// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 97 0 0
// PrepareAmerican ;
  19: CALL 318 0 0
// PrepareRussian ;
  23: CALL 9253 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 76946 0 9
// if debug then
  79: LD_EXP 1
  83: IFFALSE 92
// FogOff ( 1 ) ;
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 344
// Action ;
  92: CALL 15683 0 0
// end ;
  96: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  97: LD_INT 0
  99: PPUSH
// debug := false ;
 100: LD_ADDR_EXP 1
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// if debug then
 108: LD_EXP 1
 112: IFFALSE 122
// Difficulty := 4 ;
 114: LD_ADDR_OWVAR 67
 118: PUSH
 119: LD_INT 4
 121: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
 122: LD_ADDR_EXP 13
 126: PUSH
 127: LD_STRING GammaCommander
 129: PPUSH
 130: LD_INT 3
 132: PPUSH
 133: CALL_OW 30
 137: ST_TO_ADDR
// waitingForSikorski := false ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// deltaSupport := false ;
 146: LD_ADDR_EXP 6
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seenComputer := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// jmmArrival := false ;
 162: LD_ADDR_EXP 8
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 170: LD_ADDR_EXP 3
 174: PUSH
 175: LD_INT 21000
 177: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 178: LD_ADDR_EXP 4
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// sikorskiStatus := 1 ;
 186: LD_ADDR_EXP 9
 190: PUSH
 191: LD_INT 1
 193: ST_TO_ADDR
// sikorskiIsKilled := false ;
 194: LD_ADDR_EXP 10
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// invincibleMode := false ;
 202: LD_ADDR_EXP 5
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// captureRocketCounter := 0 ;
 210: LD_ADDR_EXP 11
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// killMechCounter := 0 ;
 218: LD_ADDR_EXP 12
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 231: LD_INT 22
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 34
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 69
 259: PUSH
 260: LD_INT 6
 262: GREATEREQUAL
 263: IFFALSE 275
 265: GO 267
 267: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 268: LD_STRING ACH_ARMOR
 270: PPUSH
 271: CALL_OW 543
 275: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 276: LD_EXP 11
 280: PUSH
 281: LD_INT 3
 283: GREATEREQUAL
 284: IFFALSE 296
 286: GO 288
 288: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 289: LD_STRING ACH_TOOL
 291: PPUSH
 292: CALL_OW 543
 296: END
// every 0 0$1 trigger killMechCounter >= 10 do
 297: LD_EXP 12
 301: PUSH
 302: LD_INT 10
 304: GREATEREQUAL
 305: IFFALSE 317
 307: GO 309
 309: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 310: LD_STRING ACH_MECH
 312: PPUSH
 313: CALL_OW 543
 317: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 318: LD_INT 0
 320: PPUSH
 321: PPUSH
 322: PPUSH
 323: PPUSH
 324: PPUSH
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_side := 1 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 1
 343: ST_TO_ADDR
// uc_nation := 1 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 1
 351: ST_TO_ADDR
// PrepareGammaBase ;
 352: CALL 2481 0 0
// x := 52 ;
 356: LD_ADDR_VAR 0 13
 360: PUSH
 361: LD_INT 52
 363: ST_TO_ADDR
// y := 16 ;
 364: LD_ADDR_VAR 0 14
 368: PUSH
 369: LD_INT 16
 371: ST_TO_ADDR
// case gammaCommander of 1 :
 372: LD_EXP 13
 376: PUSH
 377: LD_INT 1
 379: DOUBLE
 380: EQUAL
 381: IFTRUE 385
 383: GO 470
 385: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 386: LD_ADDR_EXP 16
 390: PUSH
 391: LD_STRING Donaldson
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_STRING 04_
 399: PPUSH
 400: CALL 42163 0 3
 404: ST_TO_ADDR
// if HexInfo ( x , y ) then
 405: LD_VAR 0 13
 409: PPUSH
 410: LD_VAR 0 14
 414: PPUSH
 415: CALL_OW 428
 419: IFFALSE 437
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 421: LD_EXP 16
 425: PPUSH
 426: LD_EXP 31
 430: PPUSH
 431: CALL_OW 52
 435: GO 459
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 437: LD_EXP 16
 441: PPUSH
 442: LD_VAR 0 13
 446: PPUSH
 447: LD_VAR 0 14
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// ComHold ( Donaldson ) ;
 459: LD_EXP 16
 463: PPUSH
 464: CALL_OW 140
// end ; 2 :
 468: GO 657
 470: LD_INT 2
 472: DOUBLE
 473: EQUAL
 474: IFTRUE 478
 476: GO 563
 478: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 479: LD_ADDR_EXP 15
 483: PUSH
 484: LD_STRING Brown
 486: PPUSH
 487: LD_INT 1
 489: PPUSH
 490: LD_STRING 04_
 492: PPUSH
 493: CALL 42163 0 3
 497: ST_TO_ADDR
// if HexInfo ( x , y ) then
 498: LD_VAR 0 13
 502: PPUSH
 503: LD_VAR 0 14
 507: PPUSH
 508: CALL_OW 428
 512: IFFALSE 530
// PlaceHumanInUnit ( Brown , amDepot ) else
 514: LD_EXP 15
 518: PPUSH
 519: LD_EXP 31
 523: PPUSH
 524: CALL_OW 52
 528: GO 552
// PlaceUnitXY ( Brown , x , y , false ) ;
 530: LD_EXP 15
 534: PPUSH
 535: LD_VAR 0 13
 539: PPUSH
 540: LD_VAR 0 14
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 48
// ComHold ( Brown ) ;
 552: LD_EXP 15
 556: PPUSH
 557: CALL_OW 140
// end ; 3 :
 561: GO 657
 563: LD_INT 3
 565: DOUBLE
 566: EQUAL
 567: IFTRUE 571
 569: GO 656
 571: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 572: LD_ADDR_EXP 25
 576: PUSH
 577: LD_STRING VanHouten
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: LD_STRING 
 585: PPUSH
 586: CALL 42163 0 3
 590: ST_TO_ADDR
// if HexInfo ( x , y ) then
 591: LD_VAR 0 13
 595: PPUSH
 596: LD_VAR 0 14
 600: PPUSH
 601: CALL_OW 428
 605: IFFALSE 623
// PlaceHumanInUnit ( Houten , amDepot ) else
 607: LD_EXP 25
 611: PPUSH
 612: LD_EXP 31
 616: PPUSH
 617: CALL_OW 52
 621: GO 645
// PlaceUnitXY ( Houten , x , y , false ) ;
 623: LD_EXP 25
 627: PPUSH
 628: LD_VAR 0 13
 632: PPUSH
 633: LD_VAR 0 14
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 48
// ComHold ( Houten ) ;
 645: LD_EXP 25
 649: PPUSH
 650: CALL_OW 140
// end ; end ;
 654: GO 657
 656: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 657: LD_ADDR_EXP 29
 661: PUSH
 662: LD_STRING Harisson
 664: PPUSH
 665: LD_INT 0
 667: PPUSH
 668: LD_STRING 
 670: PPUSH
 671: CALL 42163 0 3
 675: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 676: LD_ADDR_EXP 30
 680: PUSH
 681: LD_STRING Powell
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_STRING 
 689: PPUSH
 690: CALL 42163 0 3
 694: ST_TO_ADDR
// tmp := [ ] ;
 695: LD_ADDR_VAR 0 4
 699: PUSH
 700: EMPTY
 701: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 702: LD_STRING 04_Lisa
 704: PUSH
 705: EMPTY
 706: LIST
 707: PPUSH
 708: CALL_OW 28
 712: IFFALSE 821
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 714: LD_STRING LisaInDelta
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 30
 724: NOT
 725: IFFALSE 740
 727: PUSH
 728: LD_STRING 07_Lisa
 730: PUSH
 731: EMPTY
 732: LIST
 733: PPUSH
 734: CALL_OW 28
 738: NOT
 739: AND
 740: IFFALSE 763
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 742: LD_ADDR_EXP 19
 746: PUSH
 747: LD_STRING Lisa
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_STRING 04_
 755: PPUSH
 756: CALL 42163 0 3
 760: ST_TO_ADDR
 761: GO 795
// if not LoadVariable ( LisaIn07 , false ) then
 763: LD_STRING LisaIn07
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: IFFALSE 795
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 776: LD_ADDR_EXP 19
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 07_
 789: PPUSH
 790: CALL 42163 0 3
 794: ST_TO_ADDR
// if Lisa then
 795: LD_EXP 19
 799: IFFALSE 821
// tmp2 := Join ( tmp2 , Lisa ) ;
 801: LD_ADDR_VAR 0 5
 805: PUSH
 806: LD_VAR 0 5
 810: PPUSH
 811: LD_EXP 19
 815: PPUSH
 816: CALL 80295 0 2
 820: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 821: LD_STRING 04_Bobby
 823: PUSH
 824: EMPTY
 825: LIST
 826: PPUSH
 827: CALL_OW 28
 831: IFFALSE 940
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 833: LD_STRING BobbyInDelta
 835: PPUSH
 836: LD_INT 0
 838: PPUSH
 839: CALL_OW 30
 843: NOT
 844: IFFALSE 859
 846: PUSH
 847: LD_STRING 07_Bobby
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 882
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 861: LD_ADDR_EXP 17
 865: PUSH
 866: LD_STRING Bobby
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 42163 0 3
 879: ST_TO_ADDR
 880: GO 914
// if not LoadVariable ( BobbyIn07 , false ) then
 882: LD_STRING BobbyIn07
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 30
 892: NOT
 893: IFFALSE 914
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 895: LD_ADDR_EXP 17
 899: PUSH
 900: LD_STRING Bobby
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_STRING 07_
 908: PPUSH
 909: CALL 42163 0 3
 913: ST_TO_ADDR
// if Bobby then
 914: LD_EXP 17
 918: IFFALSE 940
// tmp2 := Join ( tmp2 , Bobby ) ;
 920: LD_ADDR_VAR 0 5
 924: PUSH
 925: LD_VAR 0 5
 929: PPUSH
 930: LD_EXP 17
 934: PPUSH
 935: CALL 80295 0 2
 939: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 940: LD_STRING 04_Cyrus
 942: PUSH
 943: EMPTY
 944: LIST
 945: PPUSH
 946: CALL_OW 28
 950: IFFALSE 1059
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 952: LD_STRING CyrusInDelta
 954: PPUSH
 955: LD_INT 0
 957: PPUSH
 958: CALL_OW 30
 962: NOT
 963: IFFALSE 978
 965: PUSH
 966: LD_STRING 07_Cyrus
 968: PUSH
 969: EMPTY
 970: LIST
 971: PPUSH
 972: CALL_OW 28
 976: NOT
 977: AND
 978: IFFALSE 1001
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 980: LD_ADDR_EXP 18
 984: PUSH
 985: LD_STRING Cyrus
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_STRING 04_
 993: PPUSH
 994: CALL 42163 0 3
 998: ST_TO_ADDR
 999: GO 1033
// if not LoadVariable ( CyrusIn07 , false ) then
1001: LD_STRING CyrusIn07
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 30
1011: NOT
1012: IFFALSE 1033
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1014: LD_ADDR_EXP 18
1018: PUSH
1019: LD_STRING Cyrus
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: LD_STRING 07_
1027: PPUSH
1028: CALL 42163 0 3
1032: ST_TO_ADDR
// if Cyrus then
1033: LD_EXP 18
1037: IFFALSE 1059
// tmp2 := Join ( tmp2 , Cyrus ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_VAR 0 5
1048: PPUSH
1049: LD_EXP 18
1053: PPUSH
1054: CALL 80295 0 2
1058: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1059: LD_STRING 04_Brown
1061: PUSH
1062: EMPTY
1063: LIST
1064: PPUSH
1065: CALL_OW 28
1069: IFFALSE 1084
1071: PUSH
1072: LD_STRING BrownInDelta
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 30
1082: NOT
1083: AND
1084: IFFALSE 1099
1086: PUSH
1087: LD_STRING 07_Brown
1089: PUSH
1090: EMPTY
1091: LIST
1092: PPUSH
1093: CALL_OW 28
1097: NOT
1098: AND
1099: IFFALSE 1111
1101: PUSH
1102: LD_EXP 13
1106: PUSH
1107: LD_INT 2
1109: NONEQUAL
1110: AND
1111: IFFALSE 1154
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1113: LD_ADDR_EXP 15
1117: PUSH
1118: LD_STRING Brown
1120: PPUSH
1121: LD_INT 1
1123: PPUSH
1124: LD_STRING 04_
1126: PPUSH
1127: CALL 42163 0 3
1131: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1132: LD_ADDR_VAR 0 5
1136: PUSH
1137: LD_VAR 0 5
1141: PPUSH
1142: LD_EXP 15
1146: PPUSH
1147: CALL 80295 0 2
1151: ST_TO_ADDR
// end else
1152: GO 1218
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1154: LD_STRING BrownIn07
1156: PPUSH
1157: LD_INT 0
1159: PPUSH
1160: CALL_OW 30
1164: NOT
1165: IFFALSE 1177
1167: PUSH
1168: LD_EXP 13
1172: PUSH
1173: LD_INT 2
1175: NONEQUAL
1176: AND
1177: IFFALSE 1218
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1179: LD_ADDR_EXP 15
1183: PUSH
1184: LD_STRING Brown
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_STRING 07_
1192: PPUSH
1193: CALL 42163 0 3
1197: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1198: LD_ADDR_VAR 0 5
1202: PUSH
1203: LD_VAR 0 5
1207: PPUSH
1208: LD_EXP 15
1212: PPUSH
1213: CALL 80295 0 2
1217: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1218: LD_STRING 04_Donaldson
1220: PUSH
1221: EMPTY
1222: LIST
1223: PPUSH
1224: CALL_OW 28
1228: IFFALSE 1243
1230: PUSH
1231: LD_STRING DonaldsonInDelta
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 30
1241: NOT
1242: AND
1243: IFFALSE 1258
1245: PUSH
1246: LD_STRING 07_Donaldson
1248: PUSH
1249: EMPTY
1250: LIST
1251: PPUSH
1252: CALL_OW 28
1256: NOT
1257: AND
1258: IFFALSE 1270
1260: PUSH
1261: LD_EXP 13
1265: PUSH
1266: LD_INT 1
1268: NONEQUAL
1269: AND
1270: IFFALSE 1313
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1272: LD_ADDR_EXP 16
1276: PUSH
1277: LD_STRING Donaldson
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_STRING 04_
1285: PPUSH
1286: CALL 42163 0 3
1290: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1291: LD_ADDR_VAR 0 5
1295: PUSH
1296: LD_VAR 0 5
1300: PPUSH
1301: LD_EXP 16
1305: PPUSH
1306: CALL 80295 0 2
1310: ST_TO_ADDR
// end else
1311: GO 1377
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1313: LD_STRING DonaldsonIn07
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 30
1323: NOT
1324: IFFALSE 1336
1326: PUSH
1327: LD_EXP 13
1331: PUSH
1332: LD_INT 1
1334: NONEQUAL
1335: AND
1336: IFFALSE 1377
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1338: LD_ADDR_EXP 16
1342: PUSH
1343: LD_STRING Donaldson
1345: PPUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_STRING 07_
1351: PPUSH
1352: CALL 42163 0 3
1356: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1357: LD_ADDR_VAR 0 5
1361: PUSH
1362: LD_VAR 0 5
1366: PPUSH
1367: LD_EXP 16
1371: PPUSH
1372: CALL 80295 0 2
1376: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1377: LD_STRING KhatamIn07
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 30
1387: NOT
1388: IFFALSE 1429
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1390: LD_ADDR_EXP 23
1394: PUSH
1395: LD_STRING Khatam
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 07_
1403: PPUSH
1404: CALL 42163 0 3
1408: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1409: LD_ADDR_VAR 0 5
1413: PUSH
1414: LD_VAR 0 5
1418: PPUSH
1419: LD_EXP 23
1423: PPUSH
1424: CALL 80295 0 2
1428: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1429: LD_ADDR_VAR 0 6
1433: PUSH
1434: LD_STRING 07_othersGamma
1436: PPUSH
1437: CALL_OW 31
1441: ST_TO_ADDR
// tmp := 5 - others ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 5
1449: PUSH
1450: LD_VAR 0 6
1454: MINUS
1455: ST_TO_ADDR
// if tmp then
1456: LD_VAR 0 4
1460: IFFALSE 1517
// for i := tmp downto 1 do
1462: LD_ADDR_VAR 0 2
1466: PUSH
1467: DOUBLE
1468: LD_VAR 0 4
1472: INC
1473: ST_TO_ADDR
1474: LD_INT 1
1476: PUSH
1477: FOR_DOWNTO
1478: IFFALSE 1515
// begin PrepareHuman ( false , 1 , 5 ) ;
1480: LD_INT 0
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1493: LD_ADDR_VAR 0 6
1497: PUSH
1498: LD_VAR 0 6
1502: PPUSH
1503: CALL_OW 44
1507: PPUSH
1508: CALL 80295 0 2
1512: ST_TO_ADDR
// end ;
1513: GO 1477
1515: POP
1516: POP
// for i in others do
1517: LD_ADDR_VAR 0 2
1521: PUSH
1522: LD_VAR 0 6
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1544
// SetTag ( i , 106 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: LD_INT 106
1537: PPUSH
1538: CALL_OW 109
1542: GO 1527
1544: POP
1545: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1546: LD_ADDR_VAR 0 8
1550: PUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 30
1563: PUSH
1564: LD_INT 31
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: ST_TO_ADDR
// for i in bun do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: LD_VAR 0 8
1589: PUSH
1590: FOR_IN
1591: IFFALSE 1723
// begin x := GetX ( i ) ;
1593: LD_ADDR_VAR 0 13
1597: PUSH
1598: LD_VAR 0 2
1602: PPUSH
1603: CALL_OW 250
1607: ST_TO_ADDR
// y := GetY ( i ) ;
1608: LD_ADDR_VAR 0 14
1612: PUSH
1613: LD_VAR 0 2
1617: PPUSH
1618: CALL_OW 251
1622: ST_TO_ADDR
// d := GetDir ( i ) ;
1623: LD_ADDR_VAR 0 15
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: CALL_OW 254
1637: ST_TO_ADDR
// RemoveUnit ( i ) ;
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 64
// bc_type := b_bunker ;
1647: LD_ADDR_OWVAR 42
1651: PUSH
1652: LD_INT 32
1654: ST_TO_ADDR
// bc_level := 6 ;
1655: LD_ADDR_OWVAR 43
1659: PUSH
1660: LD_INT 6
1662: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1663: LD_ADDR_VAR 0 16
1667: PUSH
1668: LD_VAR 0 13
1672: PPUSH
1673: LD_VAR 0 14
1677: PPUSH
1678: LD_VAR 0 15
1682: PPUSH
1683: CALL_OW 47
1687: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1688: LD_VAR 0 16
1692: PPUSH
1693: LD_INT 5
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_VAR 0 2
1707: PUSH
1708: LD_INT 2
1710: MOD
1711: PUSH
1712: LD_INT 1
1714: PLUS
1715: ARRAY
1716: PPUSH
1717: CALL_OW 431
// end ;
1721: GO 1590
1723: POP
1724: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1725: LD_ADDR_VAR 0 7
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 30
1742: PUSH
1743: LD_INT 5
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PPUSH
1754: CALL_OW 69
1758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1759: LD_ADDR_VAR 0 9
1763: PUSH
1764: LD_INT 22
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 6
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 30
1789: PUSH
1790: LD_INT 7
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 8
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PPUSH
1817: CALL_OW 69
1821: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1822: LD_ADDR_VAR 0 10
1826: PUSH
1827: LD_INT 22
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 3
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PPUSH
1851: CALL_OW 69
1855: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1856: LD_ADDR_VAR 0 11
1860: PUSH
1861: LD_INT 22
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 30
1873: PUSH
1874: LD_INT 36
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PPUSH
1885: CALL_OW 69
1889: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1890: LD_ADDR_VAR 0 8
1894: PUSH
1895: LD_INT 22
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: LD_INT 30
1910: PUSH
1911: LD_INT 31
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 30
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PPUSH
1937: CALL_OW 69
1941: ST_TO_ADDR
// for i in others union tmp2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 6
1951: PUSH
1952: LD_VAR 0 5
1956: UNION
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2403
// begin placed := false ;
1961: LD_ADDR_VAR 0 12
1965: PUSH
1966: LD_INT 0
1968: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1969: LD_VAR 0 2
1973: PPUSH
1974: CALL_OW 257
1978: PUSH
1979: LD_INT 1
1981: EQUAL
1982: IFFALSE 2109
// begin if UnitFilter ( bun , [ f_empty ] ) then
1984: LD_VAR 0 8
1988: PPUSH
1989: LD_INT 58
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 72
1999: IFFALSE 2038
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2001: LD_VAR 0 2
2005: PPUSH
2006: LD_VAR 0 8
2010: PPUSH
2011: LD_INT 58
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 72
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 52
// placed := true ;
2030: LD_ADDR_VAR 0 12
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// end ; if arm and not placed then
2038: LD_VAR 0 7
2042: IFFALSE 2051
2044: PUSH
2045: LD_VAR 0 12
2049: NOT
2050: AND
2051: IFFALSE 2109
// begin for j in arm do
2053: LD_ADDR_VAR 0 3
2057: PUSH
2058: LD_VAR 0 7
2062: PUSH
2063: FOR_IN
2064: IFFALSE 2107
// if UnitsInside ( j ) < 6 then
2066: LD_VAR 0 3
2070: PPUSH
2071: CALL_OW 313
2075: PUSH
2076: LD_INT 6
2078: LESS
2079: IFFALSE 2105
// begin PlaceHumanInUnit ( i , j ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_VAR 0 3
2090: PPUSH
2091: CALL_OW 52
// placed := true ;
2095: LD_ADDR_VAR 0 12
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// break ;
2103: GO 2107
// end ;
2105: GO 2063
2107: POP
2108: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 2
2121: EQUAL
2122: IFFALSE 2155
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 52
2131: PPUSH
2132: LD_INT 20
2134: PPUSH
2135: LD_INT 6
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL_OW 50
// placed := true ;
2145: LD_ADDR_VAR 0 12
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// continue ;
2153: GO 1958
// end ; if GetClass ( i ) = class_mechanic then
2155: LD_VAR 0 2
2159: PPUSH
2160: CALL_OW 257
2164: PUSH
2165: LD_INT 3
2167: EQUAL
2168: IFFALSE 2293
// begin if fac then
2170: LD_VAR 0 10
2174: IFFALSE 2293
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2176: LD_VAR 0 11
2180: IFFALSE 2201
2182: PUSH
2183: LD_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 313
2196: PUSH
2197: LD_INT 3
2199: LESS
2200: AND
2201: IFFALSE 2229
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2203: LD_VAR 0 2
2207: PPUSH
2208: LD_VAR 0 11
2212: PUSH
2213: LD_INT 1
2215: ARRAY
2216: PPUSH
2217: CALL_OW 52
// placed := true ;
2221: LD_ADDR_VAR 0 12
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// end ; if placed then
2229: LD_VAR 0 12
2233: IFFALSE 2237
// continue ;
2235: GO 1958
// for j in fac do
2237: LD_ADDR_VAR 0 3
2241: PUSH
2242: LD_VAR 0 10
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2291
// if UnitsInside ( j ) < 6 then
2250: LD_VAR 0 3
2254: PPUSH
2255: CALL_OW 313
2259: PUSH
2260: LD_INT 6
2262: LESS
2263: IFFALSE 2289
// begin PlaceHumanInUnit ( i , j ) ;
2265: LD_VAR 0 2
2269: PPUSH
2270: LD_VAR 0 3
2274: PPUSH
2275: CALL_OW 52
// placed := true ;
2279: LD_ADDR_VAR 0 12
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// break ;
2287: GO 2291
// end ;
2289: GO 2247
2291: POP
2292: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 4
2305: EQUAL
2306: IFFALSE 2370
// begin if lab then
2308: LD_VAR 0 9
2312: IFFALSE 2370
// begin for j in lab do
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_VAR 0 9
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2368
// if UnitsInside ( j ) < 6 then
2327: LD_VAR 0 3
2331: PPUSH
2332: CALL_OW 313
2336: PUSH
2337: LD_INT 6
2339: LESS
2340: IFFALSE 2366
// begin PlaceHumanInUnit ( i , j ) ;
2342: LD_VAR 0 2
2346: PPUSH
2347: LD_VAR 0 3
2351: PPUSH
2352: CALL_OW 52
// placed := true ;
2356: LD_ADDR_VAR 0 12
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// break ;
2364: GO 2368
// end ;
2366: GO 2324
2368: POP
2369: POP
// end ; end ; if not placed then
2370: LD_VAR 0 12
2374: NOT
2375: IFFALSE 2401
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2377: LD_VAR 0 2
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: CALL_OW 49
// ComHold ( i ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 140
// end ; end ;
2401: GO 1958
2403: POP
2404: POP
// if ct then
2405: LD_VAR 0 11
2409: IFFALSE 2476
// if UnitsInside ( ct [ 1 ] ) then
2411: LD_VAR 0 11
2415: PUSH
2416: LD_INT 1
2418: ARRAY
2419: PPUSH
2420: CALL_OW 313
2424: IFFALSE 2476
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_INT 22
2433: PUSH
2434: LD_INT 1
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 33
2443: PUSH
2444: LD_INT 2
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PPUSH
2455: CALL_OW 69
2459: PUSH
2460: FOR_IN
2461: IFFALSE 2474
// Connect ( i ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL 50607 0 1
2472: GO 2460
2474: POP
2475: POP
// end ; end ;
2476: LD_VAR 0 1
2480: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2489: LD_INT 71
2491: PPUSH
2492: LD_INT 5
2494: PPUSH
2495: LD_INT 1
2497: PPUSH
2498: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2502: LD_ADDR_VAR 0 2
2506: PUSH
2507: LD_STRING GammaBase
2509: PPUSH
2510: EMPTY
2511: PPUSH
2512: CALL_OW 30
2516: ST_TO_ADDR
// if not blist then
2517: LD_VAR 0 2
2521: NOT
2522: IFFALSE 2562
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2524: LD_ADDR_VAR 0 2
2528: PUSH
2529: LD_INT 1
2531: PUSH
2532: LD_INT 52
2534: PUSH
2535: LD_INT 12
2537: PUSH
2538: LD_INT 3
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: LD_INT 0
2546: PUSH
2547: LD_INT 0
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: PUSH
2559: EMPTY
2560: LIST
2561: ST_TO_ADDR
// uc_side := 1 ;
2562: LD_ADDR_OWVAR 20
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// uc_nation := 1 ;
2570: LD_ADDR_OWVAR 21
2574: PUSH
2575: LD_INT 1
2577: ST_TO_ADDR
// for i in blist do
2578: LD_ADDR_VAR 0 3
2582: PUSH
2583: LD_VAR 0 2
2587: PUSH
2588: FOR_IN
2589: IFFALSE 2867
// begin InitBc ;
2591: CALL_OW 21
// bc_type := i [ 1 ] ;
2595: LD_ADDR_OWVAR 42
2599: PUSH
2600: LD_VAR 0 3
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2609: LD_ADDR_OWVAR 43
2613: PUSH
2614: LD_VAR 0 3
2618: PUSH
2619: LD_INT 5
2621: ARRAY
2622: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2623: LD_OWVAR 42
2627: PUSH
2628: LD_INT 6
2630: PUSH
2631: LD_INT 7
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: IN
2638: IFFALSE 2702
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2640: LD_STRING 06_remoteVehs_1
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 30
2650: IFFALSE 2678
// begin bc_type := b_lab_full ;
2652: LD_ADDR_OWVAR 42
2656: PUSH
2657: LD_INT 8
2659: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2660: LD_ADDR_OWVAR 44
2664: PUSH
2665: LD_INT 10
2667: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2668: LD_ADDR_OWVAR 45
2672: PUSH
2673: LD_INT 15
2675: ST_TO_ADDR
// end else
2676: GO 2702
// begin bc_type := b_lab_half ;
2678: LD_ADDR_OWVAR 42
2682: PUSH
2683: LD_INT 7
2685: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2686: LD_ADDR_OWVAR 44
2690: PUSH
2691: LD_INT 10
2693: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2694: LD_ADDR_OWVAR 45
2698: PUSH
2699: LD_INT 9
2701: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2702: LD_OWVAR 42
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: IFFALSE 2720
// bc_type := b_factory ;
2712: LD_ADDR_OWVAR 42
2716: PUSH
2717: LD_INT 3
2719: ST_TO_ADDR
// if bc_type = b_depot then
2720: LD_OWVAR 42
2724: PUSH
2725: LD_INT 0
2727: EQUAL
2728: IFFALSE 2777
// begin bc_type := b_warehouse ;
2730: LD_ADDR_OWVAR 42
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2738: LD_ADDR_EXP 31
2742: PUSH
2743: LD_VAR 0 3
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 3
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 3
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 47
2774: ST_TO_ADDR
// continue ;
2775: GO 2588
// end ; if bc_type = b_armoury then
2777: LD_OWVAR 42
2781: PUSH
2782: LD_INT 4
2784: EQUAL
2785: IFFALSE 2795
// bc_type = b_barracks ;
2787: LD_ADDR_OWVAR 42
2791: PUSH
2792: LD_INT 5
2794: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2795: LD_ADDR_VAR 0 4
2799: PUSH
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 2
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 3
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 4
2825: ARRAY
2826: PPUSH
2827: CALL_OW 47
2831: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2832: LD_VAR 0 4
2836: PPUSH
2837: CALL_OW 266
2841: PUSH
2842: LD_INT 32
2844: EQUAL
2845: IFFALSE 2865
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2847: LD_VAR 0 4
2851: PPUSH
2852: LD_VAR 0 3
2856: PUSH
2857: LD_INT 7
2859: ARRAY
2860: PPUSH
2861: CALL_OW 431
// end ;
2865: GO 2588
2867: POP
2868: POP
// if not amDepot then
2869: LD_EXP 31
2873: NOT
2874: IFFALSE 2911
// begin bc_type := b_warehouse ;
2876: LD_ADDR_OWVAR 42
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// bc_level := 6 ;
2884: LD_ADDR_OWVAR 43
2888: PUSH
2889: LD_INT 6
2891: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2892: LD_ADDR_EXP 31
2896: PUSH
2897: LD_INT 52
2899: PPUSH
2900: LD_INT 12
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL_OW 47
2910: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2911: LD_ADDR_OWVAR 42
2915: PUSH
2916: LD_INT 5
2918: ST_TO_ADDR
// bc_level := 6 ;
2919: LD_ADDR_OWVAR 43
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2927: LD_INT 61
2929: PPUSH
2930: LD_INT 29
2932: PPUSH
2933: LD_INT 5
2935: PPUSH
2936: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2940: LD_EXP 31
2944: PPUSH
2945: LD_STRING gamma
2947: PPUSH
2948: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2952: LD_EXP 31
2956: PPUSH
2957: CALL_OW 274
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: LD_INT 400
2967: PUSH
2968: LD_INT 320
2970: PUSH
2971: LD_INT 270
2973: PUSH
2974: LD_INT 230
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PPUSH
2989: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2993: LD_EXP 31
2997: PPUSH
2998: CALL_OW 274
3002: PPUSH
3003: LD_INT 2
3005: PPUSH
3006: LD_INT 130
3008: PPUSH
3009: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3013: LD_INT 22
3015: PUSH
3016: LD_INT 1
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 30
3025: PUSH
3026: LD_INT 3
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: IFFALSE 3289
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3043: LD_ADDR_VAR 0 4
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 30
3060: PUSH
3061: LD_INT 3
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3081: LD_ADDR_VAR 0 6
3085: PUSH
3086: LD_VAR 0 4
3090: PPUSH
3091: CALL_OW 250
3095: PPUSH
3096: LD_VAR 0 4
3100: PPUSH
3101: CALL_OW 251
3105: PPUSH
3106: LD_VAR 0 4
3110: PPUSH
3111: CALL_OW 254
3115: PPUSH
3116: CALL 77905 0 3
3120: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3121: LD_ADDR_VAR 0 2
3125: PUSH
3126: LD_INT 19
3128: PUSH
3129: LD_INT 17
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3136: LD_STRING 06_remoteVehs_1
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 30
3146: IFFALSE 3169
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 2
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: LD_INT 22
3163: PPUSH
3164: CALL_OW 2
3168: ST_TO_ADDR
// for i in tmp do
3169: LD_ADDR_VAR 0 3
3173: PUSH
3174: LD_VAR 0 6
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3287
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3182: LD_VAR 0 3
3186: PUSH
3187: LD_INT 1
3189: ARRAY
3190: PPUSH
3191: LD_VAR 0 3
3195: PUSH
3196: LD_INT 2
3198: ARRAY
3199: PPUSH
3200: CALL_OW 428
3204: PUSH
3205: LD_INT 0
3207: EQUAL
3208: IFFALSE 3285
// begin bc_type := blist [ 1 ] ;
3210: LD_ADDR_OWVAR 42
3214: PUSH
3215: LD_VAR 0 2
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3224: LD_VAR 0 3
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PPUSH
3233: LD_VAR 0 3
3237: PUSH
3238: LD_INT 2
3240: ARRAY
3241: PPUSH
3242: LD_VAR 0 3
3246: PUSH
3247: LD_INT 3
3249: ARRAY
3250: PPUSH
3251: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_VAR 0 2
3264: PPUSH
3265: LD_INT 1
3267: PPUSH
3268: CALL_OW 3
3272: ST_TO_ADDR
// if blist = 0 then
3273: LD_VAR 0 2
3277: PUSH
3278: LD_INT 0
3280: EQUAL
3281: IFFALSE 3285
// break ;
3283: GO 3287
// end ;
3285: GO 3179
3287: POP
3288: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3289: LD_STRING 06_remoteVehs_1
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3758
// begin bc_type := b_control_tower ;
3301: LD_ADDR_OWVAR 42
3305: PUSH
3306: LD_INT 36
3308: ST_TO_ADDR
// bc_level := 4 ;
3309: LD_ADDR_OWVAR 43
3313: PUSH
3314: LD_INT 4
3316: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3317: LD_EXP 31
3321: PPUSH
3322: LD_INT 36
3324: PPUSH
3325: LD_INT 62
3327: PPUSH
3328: LD_INT 12
3330: PPUSH
3331: LD_INT 3
3333: PPUSH
3334: CALL 55803 0 5
3338: IFFALSE 3365
3340: PUSH
3341: LD_INT 92
3343: PUSH
3344: LD_INT 62
3346: PUSH
3347: LD_INT 12
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: NOT
3364: AND
3365: IFFALSE 3382
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3367: LD_INT 62
3369: PPUSH
3370: LD_INT 12
3372: PPUSH
3373: LD_INT 3
3375: PPUSH
3376: CALL_OW 47
3380: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3382: LD_EXP 31
3386: PPUSH
3387: LD_INT 36
3389: PPUSH
3390: LD_INT 37
3392: PPUSH
3393: LD_INT 18
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: CALL 55803 0 5
3403: IFFALSE 3430
3405: PUSH
3406: LD_INT 92
3408: PUSH
3409: LD_INT 37
3411: PUSH
3412: LD_INT 18
3414: PUSH
3415: LD_INT 3
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: NOT
3429: AND
3430: IFFALSE 3447
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3432: LD_INT 37
3434: PPUSH
3435: LD_INT 18
3437: PPUSH
3438: LD_INT 2
3440: PPUSH
3441: CALL_OW 47
3445: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3447: LD_EXP 31
3451: PPUSH
3452: LD_INT 36
3454: PPUSH
3455: LD_INT 66
3457: PPUSH
3458: LD_INT 14
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: CALL 55803 0 5
3468: IFFALSE 3495
3470: PUSH
3471: LD_INT 92
3473: PUSH
3474: LD_INT 66
3476: PUSH
3477: LD_INT 14
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PPUSH
3489: CALL_OW 69
3493: NOT
3494: AND
3495: IFFALSE 3512
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3497: LD_INT 66
3499: PPUSH
3500: LD_INT 14
3502: PPUSH
3503: LD_INT 4
3505: PPUSH
3506: CALL_OW 47
3510: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3512: LD_EXP 31
3516: PPUSH
3517: LD_INT 36
3519: PPUSH
3520: LD_INT 74
3522: PPUSH
3523: LD_INT 26
3525: PPUSH
3526: LD_INT 4
3528: PPUSH
3529: CALL 55803 0 5
3533: IFFALSE 3548
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3535: LD_INT 74
3537: PPUSH
3538: LD_INT 26
3540: PPUSH
3541: LD_INT 4
3543: PPUSH
3544: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3548: LD_INT 22
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 30
3560: PUSH
3561: LD_INT 36
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PPUSH
3572: CALL_OW 69
3576: NOT
3577: IFFALSE 3581
// exit ;
3579: GO 4106
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: DOUBLE
3587: LD_INT 1
3589: DEC
3590: ST_TO_ADDR
3591: LD_INT 3
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 2
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: PUSH
3609: LD_OWVAR 67
3613: ARRAY
3614: PUSH
3615: FOR_TO
3616: IFFALSE 3756
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3618: LD_ADDR_OWVAR 37
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 1
3635: PPUSH
3636: LD_INT 2
3638: PPUSH
3639: CALL_OW 12
3643: ARRAY
3644: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3645: LD_ADDR_OWVAR 39
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 1
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: CALL_OW 12
3670: ARRAY
3671: ST_TO_ADDR
// vc_control := control_remote ;
3672: LD_ADDR_OWVAR 38
3676: PUSH
3677: LD_INT 2
3679: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3680: LD_ADDR_OWVAR 40
3684: PUSH
3685: LD_INT 4
3687: PUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 1
3701: PPUSH
3702: LD_INT 3
3704: PPUSH
3705: CALL_OW 12
3709: ARRAY
3710: ST_TO_ADDR
// veh := CreateVehicle ;
3711: LD_ADDR_VAR 0 5
3715: PUSH
3716: CALL_OW 45
3720: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3721: LD_VAR 0 5
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3733: LD_VAR 0 5
3737: PPUSH
3738: LD_INT 61
3740: PPUSH
3741: LD_INT 23
3743: PPUSH
3744: LD_INT 9
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: CALL_OW 50
// end ;
3754: GO 3615
3756: POP
3757: POP
// end ; if gammaCommander = 1 then
3758: LD_EXP 13
3762: PUSH
3763: LD_INT 1
3765: EQUAL
3766: IFFALSE 3943
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 3
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PUSH
3802: FOR_TO
3803: IFFALSE 3939
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3805: LD_ADDR_OWVAR 37
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3832: LD_ADDR_OWVAR 39
3836: PUSH
3837: LD_INT 1
3839: PUSH
3840: LD_INT 2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 1
3849: PPUSH
3850: LD_INT 2
3852: PPUSH
3853: CALL_OW 12
3857: ARRAY
3858: ST_TO_ADDR
// vc_control := control_manual ;
3859: LD_ADDR_OWVAR 38
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3867: LD_ADDR_OWVAR 40
3871: PUSH
3872: LD_INT 4
3874: PUSH
3875: LD_INT 5
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 12
3892: ARRAY
3893: ST_TO_ADDR
// veh := CreateVehicle ;
3894: LD_ADDR_VAR 0 5
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3904: LD_VAR 0 5
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3916: LD_VAR 0 5
3920: PPUSH
3921: LD_INT 61
3923: PPUSH
3924: LD_INT 23
3926: PPUSH
3927: LD_INT 9
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 50
// end ;
3937: GO 3802
3939: POP
3940: POP
// end else
3941: GO 4106
// if gammaCommander = 2 then
3943: LD_EXP 13
3947: PUSH
3948: LD_INT 2
3950: EQUAL
3951: IFFALSE 4106
// begin bc_type := b_bunker ;
3953: LD_ADDR_OWVAR 42
3957: PUSH
3958: LD_INT 32
3960: ST_TO_ADDR
// bc_level := 6 ;
3961: LD_ADDR_OWVAR 43
3965: PUSH
3966: LD_INT 6
3968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 67
3976: PPUSH
3977: LD_INT 36
3979: PPUSH
3980: LD_INT 5
3982: PPUSH
3983: CALL_OW 47
3987: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_INT 4
3995: PPUSH
3996: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_INT 61
4007: PPUSH
4008: LD_INT 40
4010: PPUSH
4011: LD_INT 5
4013: PPUSH
4014: CALL_OW 47
4018: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
4019: LD_VAR 0 4
4023: PPUSH
4024: LD_INT 5
4026: PPUSH
4027: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
4031: LD_ADDR_OWVAR 37
4035: PUSH
4036: LD_INT 2
4038: ST_TO_ADDR
// vc_engine := engine_combustion ;
4039: LD_ADDR_OWVAR 39
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// vc_control := control_manual ;
4047: LD_ADDR_OWVAR 38
4051: PUSH
4052: LD_INT 1
4054: ST_TO_ADDR
// vc_weapon := us_crane ;
4055: LD_ADDR_OWVAR 40
4059: PUSH
4060: LD_INT 13
4062: ST_TO_ADDR
// veh := CreateVehicle ;
4063: LD_ADDR_VAR 0 5
4067: PUSH
4068: CALL_OW 45
4072: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4073: LD_VAR 0 5
4077: PPUSH
4078: LD_INT 3
4080: PPUSH
4081: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4085: LD_VAR 0 5
4089: PPUSH
4090: LD_INT 61
4092: PPUSH
4093: LD_INT 23
4095: PPUSH
4096: LD_INT 9
4098: PPUSH
4099: LD_INT 0
4101: PPUSH
4102: CALL_OW 50
// end ; end ;
4106: LD_VAR 0 1
4110: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4111: LD_INT 0
4113: PPUSH
4114: PPUSH
4115: PPUSH
4116: PPUSH
// uc_side := 1 ;
4117: LD_ADDR_OWVAR 20
4121: PUSH
4122: LD_INT 1
4124: ST_TO_ADDR
// uc_nation := 1 ;
4125: LD_ADDR_OWVAR 21
4129: PUSH
4130: LD_INT 1
4132: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4133: LD_ADDR_EXP 26
4137: PUSH
4138: LD_STRING Denis
4140: PPUSH
4141: LD_EXP 1
4145: NOT
4146: PPUSH
4147: LD_STRING 06c_
4149: PPUSH
4150: CALL 42163 0 3
4154: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4155: LD_EXP 26
4159: PPUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4170: LD_ADDR_EXP 27
4174: PUSH
4175: LD_STRING Joan
4177: PPUSH
4178: LD_EXP 1
4182: NOT
4183: PPUSH
4184: LD_STRING 06c_
4186: PPUSH
4187: CALL 42163 0 3
4191: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4192: LD_EXP 27
4196: PPUSH
4197: LD_INT 4
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4207: LD_ADDR_EXP 24
4211: PUSH
4212: LD_STRING Mike
4214: PPUSH
4215: LD_EXP 1
4219: NOT
4220: PPUSH
4221: LD_STRING 06c_
4223: PPUSH
4224: CALL 42163 0 3
4228: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4229: LD_EXP 24
4233: PPUSH
4234: LD_INT 4
4236: PPUSH
4237: LD_INT 0
4239: PPUSH
4240: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4244: LD_STRING GladstoneIn07
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 30
4254: NOT
4255: IFFALSE 4337
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4257: LD_ADDR_EXP 21
4261: PUSH
4262: LD_STRING Gladstone
4264: PPUSH
4265: LD_EXP 1
4269: NOT
4270: PPUSH
4271: LD_STRING 06c_
4273: PPUSH
4274: CALL 42163 0 3
4278: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4279: LD_EXP 21
4283: NOT
4284: IFFALSE 4298
4286: PUSH
4287: LD_STRING GladstoneStayInDelta
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 30
4297: AND
4298: IFFALSE 4322
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4300: LD_ADDR_EXP 21
4304: PUSH
4305: LD_STRING Gladstone
4307: PPUSH
4308: LD_EXP 1
4312: NOT
4313: PPUSH
4314: LD_STRING 05_
4316: PPUSH
4317: CALL 42163 0 3
4321: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4322: LD_EXP 21
4326: PPUSH
4327: LD_INT 4
4329: PPUSH
4330: LD_INT 0
4332: PPUSH
4333: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4337: LD_STRING LisaStayInDelta
4339: PPUSH
4340: LD_INT 0
4342: PPUSH
4343: CALL_OW 30
4347: IFFALSE 4383
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4349: LD_ADDR_EXP 19
4353: PUSH
4354: LD_STRING Lisa
4356: PPUSH
4357: LD_INT 1
4359: PPUSH
4360: LD_STRING 05_
4362: PPUSH
4363: CALL 42163 0 3
4367: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4368: LD_EXP 19
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: LD_INT 0
4378: PPUSH
4379: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4383: LD_STRING BobbyStayInDelta
4385: PPUSH
4386: LD_INT 0
4388: PPUSH
4389: CALL_OW 30
4393: IFFALSE 4429
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4395: LD_ADDR_EXP 17
4399: PUSH
4400: LD_STRING Bobby
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_STRING 05_
4408: PPUSH
4409: CALL 42163 0 3
4413: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_INT 4
4421: PPUSH
4422: LD_INT 0
4424: PPUSH
4425: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4429: LD_STRING CyrusStayInDelta
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL_OW 30
4439: IFFALSE 4475
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4441: LD_ADDR_EXP 18
4445: PUSH
4446: LD_STRING Cyrus
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: LD_STRING 05_
4454: PPUSH
4455: CALL 42163 0 3
4459: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4460: LD_EXP 18
4464: PPUSH
4465: LD_INT 4
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4475: LD_STRING BrownStayInDelta
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 30
4485: IFFALSE 4521
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4487: LD_ADDR_EXP 15
4491: PUSH
4492: LD_STRING Brown
4494: PPUSH
4495: LD_INT 1
4497: PPUSH
4498: LD_STRING 05_
4500: PPUSH
4501: CALL 42163 0 3
4505: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4506: LD_EXP 15
4510: PPUSH
4511: LD_INT 4
4513: PPUSH
4514: LD_INT 0
4516: PPUSH
4517: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4521: LD_STRING DonaldsonStayInDelta
4523: PPUSH
4524: LD_INT 0
4526: PPUSH
4527: CALL_OW 30
4531: IFFALSE 4567
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4533: LD_ADDR_EXP 16
4537: PUSH
4538: LD_STRING Donaldson
4540: PPUSH
4541: LD_INT 1
4543: PPUSH
4544: LD_STRING 05_
4546: PPUSH
4547: CALL 42163 0 3
4551: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4552: LD_EXP 16
4556: PPUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4567: LD_ADDR_VAR 0 4
4571: PUSH
4572: LD_STRING OthersStayInDelta
4574: PPUSH
4575: CALL_OW 31
4579: ST_TO_ADDR
// if others > 2 then
4580: LD_VAR 0 4
4584: PUSH
4585: LD_INT 2
4587: GREATER
4588: IFFALSE 4651
// begin for j := 1 to 2 do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_INT 2
4602: PUSH
4603: FOR_TO
4604: IFFALSE 4647
// begin SetTag ( others [ j ] , 107 ) ;
4606: LD_VAR 0 4
4610: PUSH
4611: LD_VAR 0 3
4615: ARRAY
4616: PPUSH
4617: LD_INT 107
4619: PPUSH
4620: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4624: LD_VAR 0 4
4628: PUSH
4629: LD_VAR 0 3
4633: ARRAY
4634: PPUSH
4635: LD_INT 4
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// end ;
4645: GO 4603
4647: POP
4648: POP
// end else
4649: GO 4712
// begin for j := 1 to others do
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_VAR 0 4
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4710
// begin SetTag ( others [ i ] , 107 ) ;
4669: LD_VAR 0 4
4673: PUSH
4674: LD_VAR 0 2
4678: ARRAY
4679: PPUSH
4680: LD_INT 107
4682: PPUSH
4683: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4687: LD_VAR 0 4
4691: PUSH
4692: LD_VAR 0 3
4696: ARRAY
4697: PPUSH
4698: LD_INT 4
4700: PPUSH
4701: LD_INT 0
4703: PPUSH
4704: CALL_OW 49
// end ;
4708: GO 4666
4710: POP
4711: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_STRING 06_other_apemans
4719: PPUSH
4720: CALL_OW 31
4724: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4725: LD_VAR 0 4
4729: PUSH
4730: LD_INT 3
4732: PUSH
4733: LD_INT 2
4735: PUSH
4736: LD_INT 2
4738: PUSH
4739: LD_INT 1
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: LD_OWVAR 67
4752: ARRAY
4753: GREATEREQUAL
4754: IFFALSE 4787
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4756: LD_ADDR_VAR 0 3
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 2
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_OWVAR 67
4783: ARRAY
4784: ST_TO_ADDR
4785: GO 4797
// j := others ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_VAR 0 4
4796: ST_TO_ADDR
// for i := 1 to j do
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: DOUBLE
4803: LD_INT 1
4805: DEC
4806: ST_TO_ADDR
4807: LD_VAR 0 3
4811: PUSH
4812: FOR_TO
4813: IFFALSE 4838
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4815: LD_VAR 0 4
4819: PUSH
4820: LD_VAR 0 2
4824: ARRAY
4825: PPUSH
4826: LD_INT 4
4828: PPUSH
4829: LD_INT 0
4831: PPUSH
4832: CALL_OW 49
4836: GO 4812
4838: POP
4839: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4840: LD_INT 4
4842: PPUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 21
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 70
4871: PPUSH
4872: LD_INT 53
4874: PPUSH
4875: LD_INT 19
4877: PPUSH
4878: CALL_OW 111
// end ;
4882: LD_VAR 0 1
4886: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4887: LD_INT 0
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
4902: PPUSH
// prefix := 07c_ ;
4903: LD_ADDR_VAR 0 10
4907: PUSH
4908: LD_STRING 07c_
4910: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4911: LD_ADDR_VAR 0 8
4915: PUSH
4916: LD_STRING 07_vehicles
4918: PPUSH
4919: EMPTY
4920: PPUSH
4921: CALL_OW 30
4925: ST_TO_ADDR
// if not vehicles and debug then
4926: LD_VAR 0 8
4930: NOT
4931: IFFALSE 4939
4933: PUSH
4934: LD_EXP 1
4938: AND
4939: IFFALSE 4967
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4941: LD_ADDR_VAR 0 8
4945: PUSH
4946: LD_INT 2
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: LD_INT 1
4954: PUSH
4955: LD_INT 4
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: ST_TO_ADDR
// if not vehicles then
4967: LD_VAR 0 8
4971: NOT
4972: IFFALSE 5029
// begin area := westGammaSupportArea ;
4974: LD_ADDR_VAR 0 11
4978: PUSH
4979: LD_INT 16
4981: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4982: LD_ADDR_VAR 0 14
4986: PUSH
4987: LD_INT 37
4989: PUSH
4990: LD_INT 70
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4997: LD_ADDR_VAR 0 13
5001: PUSH
5002: LD_INT 43
5004: PUSH
5005: LD_INT 67
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: ST_TO_ADDR
// dir := 1 ;
5012: LD_ADDR_VAR 0 12
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// wait ( 2 2$00 ) ;
5020: LD_INT 4200
5022: PPUSH
5023: CALL_OW 67
// end else
5027: GO 5075
// begin area := southGammaSupportArea ;
5029: LD_ADDR_VAR 0 11
5033: PUSH
5034: LD_INT 5
5036: ST_TO_ADDR
// point := [ 87 , 147 ] ;
5037: LD_ADDR_VAR 0 14
5041: PUSH
5042: LD_INT 87
5044: PUSH
5045: LD_INT 147
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
5052: LD_ADDR_VAR 0 13
5056: PUSH
5057: LD_INT 74
5059: PUSH
5060: LD_INT 129
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: ST_TO_ADDR
// dir := 0 ;
5067: LD_ADDR_VAR 0 12
5071: PUSH
5072: LD_INT 0
5074: ST_TO_ADDR
// end ; EraseResourceArea ( mat_cans , area ) ;
5075: LD_INT 1
5077: PPUSH
5078: LD_VAR 0 11
5082: PPUSH
5083: CALL_OW 286
// squad := [ ] ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: EMPTY
5093: ST_TO_ADDR
// tmp := [ ] ;
5094: LD_ADDR_VAR 0 6
5098: PUSH
5099: EMPTY
5100: ST_TO_ADDR
// tmpVehs := [ ] ;
5101: LD_ADDR_VAR 0 7
5105: PUSH
5106: EMPTY
5107: ST_TO_ADDR
// uc_side := 1 ;
5108: LD_ADDR_OWVAR 20
5112: PUSH
5113: LD_INT 1
5115: ST_TO_ADDR
// uc_nation := 1 ;
5116: LD_ADDR_OWVAR 21
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// if vehicles then
5124: LD_VAR 0 8
5128: IFFALSE 5350
// begin for i := 1 to vehicles do
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: DOUBLE
5136: LD_INT 1
5138: DEC
5139: ST_TO_ADDR
5140: LD_VAR 0 8
5144: PUSH
5145: FOR_TO
5146: IFFALSE 5348
// begin if vehicles [ i ] then
5148: LD_VAR 0 8
5152: PUSH
5153: LD_VAR 0 2
5157: ARRAY
5158: IFFALSE 5346
// begin if not vehicles [ i ] [ 1 ] then
5160: LD_VAR 0 8
5164: PUSH
5165: LD_VAR 0 2
5169: ARRAY
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: NOT
5175: IFFALSE 5179
// continue ;
5177: GO 5145
// if not vehicles [ i ] [ 2 ] then
5179: LD_VAR 0 8
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: PUSH
5190: LD_INT 2
5192: ARRAY
5193: NOT
5194: IFFALSE 5198
// continue ;
5196: GO 5145
// if not vehicles [ i ] [ 3 ] then
5198: LD_VAR 0 8
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: PUSH
5209: LD_INT 3
5211: ARRAY
5212: NOT
5213: IFFALSE 5217
// continue ;
5215: GO 5145
// if not vehicles [ i ] [ 4 ] then
5217: LD_VAR 0 8
5221: PUSH
5222: LD_VAR 0 2
5226: ARRAY
5227: PUSH
5228: LD_INT 4
5230: ARRAY
5231: NOT
5232: IFFALSE 5236
// continue ;
5234: GO 5145
// vc_chassis := vehicles [ i ] [ 1 ] ;
5236: LD_ADDR_OWVAR 37
5240: PUSH
5241: LD_VAR 0 8
5245: PUSH
5246: LD_VAR 0 2
5250: ARRAY
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5256: LD_ADDR_OWVAR 39
5260: PUSH
5261: LD_VAR 0 8
5265: PUSH
5266: LD_VAR 0 2
5270: ARRAY
5271: PUSH
5272: LD_INT 2
5274: ARRAY
5275: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5276: LD_ADDR_OWVAR 38
5280: PUSH
5281: LD_VAR 0 8
5285: PUSH
5286: LD_VAR 0 2
5290: ARRAY
5291: PUSH
5292: LD_INT 3
5294: ARRAY
5295: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5296: LD_ADDR_OWVAR 40
5300: PUSH
5301: LD_VAR 0 8
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PUSH
5312: LD_INT 4
5314: ARRAY
5315: ST_TO_ADDR
// veh := CreateVehicle ;
5316: LD_ADDR_VAR 0 9
5320: PUSH
5321: CALL_OW 45
5325: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5326: LD_ADDR_VAR 0 7
5330: PUSH
5331: LD_VAR 0 7
5335: PPUSH
5336: LD_VAR 0 9
5340: PPUSH
5341: CALL 80295 0 2
5345: ST_TO_ADDR
// end ; end ;
5346: GO 5145
5348: POP
5349: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5350: LD_ADDR_EXP 14
5354: PUSH
5355: LD_STRING JMM
5357: PPUSH
5358: LD_EXP 1
5362: NOT
5363: PPUSH
5364: LD_VAR 0 10
5368: PPUSH
5369: CALL 42163 0 3
5373: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5374: LD_EXP 13
5378: PUSH
5379: LD_INT 1
5381: PUSH
5382: LD_INT 3
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: IN
5389: IFFALSE 5398
5391: PUSH
5392: LD_EXP 15
5396: NOT
5397: AND
5398: IFFALSE 5459
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5400: LD_ADDR_EXP 15
5404: PUSH
5405: LD_STRING Brown
5407: PPUSH
5408: LD_EXP 1
5412: NOT
5413: PPUSH
5414: LD_VAR 0 10
5418: PPUSH
5419: CALL 42163 0 3
5423: ST_TO_ADDR
// if Brown then
5424: LD_EXP 15
5428: IFFALSE 5459
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5430: LD_ADDR_VAR 0 6
5434: PUSH
5435: LD_VAR 0 6
5439: PPUSH
5440: LD_VAR 0 6
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: PPUSH
5449: LD_EXP 15
5453: PPUSH
5454: CALL_OW 1
5458: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5459: LD_EXP 13
5463: PUSH
5464: LD_INT 2
5466: PUSH
5467: LD_INT 3
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: IN
5474: IFFALSE 5483
5476: PUSH
5477: LD_EXP 16
5481: NOT
5482: AND
5483: IFFALSE 5544
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5485: LD_ADDR_EXP 16
5489: PUSH
5490: LD_STRING Donaldson
5492: PPUSH
5493: LD_EXP 1
5497: NOT
5498: PPUSH
5499: LD_VAR 0 10
5503: PPUSH
5504: CALL 42163 0 3
5508: ST_TO_ADDR
// if Donaldson then
5509: LD_EXP 16
5513: IFFALSE 5544
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5515: LD_ADDR_VAR 0 6
5519: PUSH
5520: LD_VAR 0 6
5524: PPUSH
5525: LD_VAR 0 6
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: PPUSH
5534: LD_EXP 16
5538: PPUSH
5539: CALL_OW 1
5543: ST_TO_ADDR
// end ; if not Bobby then
5544: LD_EXP 17
5548: NOT
5549: IFFALSE 5607
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5551: LD_ADDR_EXP 17
5555: PUSH
5556: LD_STRING Bobby
5558: PPUSH
5559: LD_INT 1
5561: PPUSH
5562: LD_VAR 0 10
5566: PPUSH
5567: CALL 42163 0 3
5571: ST_TO_ADDR
// if Bobby then
5572: LD_EXP 17
5576: IFFALSE 5607
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5578: LD_ADDR_VAR 0 6
5582: PUSH
5583: LD_VAR 0 6
5587: PPUSH
5588: LD_VAR 0 6
5592: PUSH
5593: LD_INT 1
5595: PLUS
5596: PPUSH
5597: LD_EXP 17
5601: PPUSH
5602: CALL_OW 1
5606: ST_TO_ADDR
// end ; if not Cyrus then
5607: LD_EXP 18
5611: NOT
5612: IFFALSE 5670
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5614: LD_ADDR_EXP 18
5618: PUSH
5619: LD_STRING Cyrus
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: LD_VAR 0 10
5629: PPUSH
5630: CALL 42163 0 3
5634: ST_TO_ADDR
// if Cyrus then
5635: LD_EXP 18
5639: IFFALSE 5670
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5641: LD_ADDR_VAR 0 6
5645: PUSH
5646: LD_VAR 0 6
5650: PPUSH
5651: LD_VAR 0 6
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: PPUSH
5660: LD_EXP 18
5664: PPUSH
5665: CALL_OW 1
5669: ST_TO_ADDR
// end ; if not Lisa then
5670: LD_EXP 19
5674: NOT
5675: IFFALSE 5736
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5677: LD_ADDR_EXP 19
5681: PUSH
5682: LD_STRING Lisa
5684: PPUSH
5685: LD_EXP 1
5689: NOT
5690: PPUSH
5691: LD_VAR 0 10
5695: PPUSH
5696: CALL 42163 0 3
5700: ST_TO_ADDR
// if Lisa then
5701: LD_EXP 19
5705: IFFALSE 5736
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5707: LD_ADDR_VAR 0 6
5711: PUSH
5712: LD_VAR 0 6
5716: PPUSH
5717: LD_VAR 0 6
5721: PUSH
5722: LD_INT 1
5724: PLUS
5725: PPUSH
5726: LD_EXP 19
5730: PPUSH
5731: CALL_OW 1
5735: ST_TO_ADDR
// end ; if not Frank then
5736: LD_EXP 20
5740: NOT
5741: IFFALSE 5802
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5743: LD_ADDR_EXP 20
5747: PUSH
5748: LD_STRING Frank
5750: PPUSH
5751: LD_EXP 1
5755: NOT
5756: PPUSH
5757: LD_VAR 0 10
5761: PPUSH
5762: CALL 42163 0 3
5766: ST_TO_ADDR
// if Frank then
5767: LD_EXP 20
5771: IFFALSE 5802
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5773: LD_ADDR_VAR 0 6
5777: PUSH
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 6
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_EXP 20
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// end ; if not Kikuchi then
5802: LD_EXP 22
5806: NOT
5807: IFFALSE 5865
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5809: LD_ADDR_EXP 22
5813: PUSH
5814: LD_STRING Kikuchi
5816: PPUSH
5817: LD_INT 1
5819: PPUSH
5820: LD_VAR 0 10
5824: PPUSH
5825: CALL 42163 0 3
5829: ST_TO_ADDR
// if Kikuchi then
5830: LD_EXP 22
5834: IFFALSE 5865
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5836: LD_ADDR_VAR 0 6
5840: PUSH
5841: LD_VAR 0 6
5845: PPUSH
5846: LD_VAR 0 6
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: PPUSH
5855: LD_EXP 22
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// end ; if not Gladstone then
5865: LD_EXP 21
5869: NOT
5870: IFFALSE 5931
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5872: LD_ADDR_EXP 21
5876: PUSH
5877: LD_STRING Gladstone
5879: PPUSH
5880: LD_EXP 1
5884: NOT
5885: PPUSH
5886: LD_VAR 0 10
5890: PPUSH
5891: CALL 42163 0 3
5895: ST_TO_ADDR
// if Gladstone then
5896: LD_EXP 21
5900: IFFALSE 5931
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5902: LD_ADDR_VAR 0 6
5906: PUSH
5907: LD_VAR 0 6
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_INT 1
5919: PLUS
5920: PPUSH
5921: LD_EXP 21
5925: PPUSH
5926: CALL_OW 1
5930: ST_TO_ADDR
// end ; if not Khatam then
5931: LD_EXP 23
5935: NOT
5936: IFFALSE 5994
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5938: LD_ADDR_EXP 23
5942: PUSH
5943: LD_STRING Khatam
5945: PPUSH
5946: LD_INT 1
5948: PPUSH
5949: LD_VAR 0 10
5953: PPUSH
5954: CALL 42163 0 3
5958: ST_TO_ADDR
// if Khatam then
5959: LD_EXP 23
5963: IFFALSE 5994
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5965: LD_ADDR_VAR 0 6
5969: PUSH
5970: LD_VAR 0 6
5974: PPUSH
5975: LD_VAR 0 6
5979: PUSH
5980: LD_INT 1
5982: PLUS
5983: PPUSH
5984: LD_EXP 23
5988: PPUSH
5989: CALL_OW 1
5993: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5994: LD_ADDR_VAR 0 4
5998: PUSH
5999: LD_STRING 07c_others
6001: PPUSH
6002: CALL_OW 31
6006: ST_TO_ADDR
// squad := others ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 4
6016: ST_TO_ADDR
// if others then
6017: LD_VAR 0 4
6021: IFFALSE 6072
// for i in others do
6023: LD_ADDR_VAR 0 2
6027: PUSH
6028: LD_VAR 0 4
6032: PUSH
6033: FOR_IN
6034: IFFALSE 6070
// begin SetTag ( i , 108 ) ;
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_INT 108
6043: PPUSH
6044: CALL_OW 109
// tmp := Join ( tmp , i ) ;
6048: LD_ADDR_VAR 0 6
6052: PUSH
6053: LD_VAR 0 6
6057: PPUSH
6058: LD_VAR 0 2
6062: PPUSH
6063: CALL 80295 0 2
6067: ST_TO_ADDR
// end ;
6068: GO 6033
6070: POP
6071: POP
// if tmp then
6072: LD_VAR 0 6
6076: IFFALSE 6331
// begin tmp := Join ( tmp , JMM ) ;
6078: LD_ADDR_VAR 0 6
6082: PUSH
6083: LD_VAR 0 6
6087: PPUSH
6088: LD_EXP 14
6092: PPUSH
6093: CALL 80295 0 2
6097: ST_TO_ADDR
// for i in tmp do
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_VAR 0 6
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6329
// begin SetDir ( i , dir ) ;
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_VAR 0 12
6120: PPUSH
6121: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
6125: LD_VAR 0 2
6129: PPUSH
6130: CALL_OW 257
6134: PUSH
6135: LD_INT 3
6137: EQUAL
6138: IFFALSE 6146
6140: PUSH
6141: LD_VAR 0 7
6145: AND
6146: IFFALSE 6245
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6148: LD_VAR 0 7
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_INT 0
6159: PPUSH
6160: CALL_OW 233
// repeat wait ( 10 ) ;
6164: LD_INT 10
6166: PPUSH
6167: CALL_OW 67
// until PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6171: LD_VAR 0 7
6175: PUSH
6176: LD_INT 1
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 14
6184: PUSH
6185: LD_INT 1
6187: ARRAY
6188: PPUSH
6189: LD_VAR 0 14
6193: PUSH
6194: LD_INT 2
6196: ARRAY
6197: PPUSH
6198: LD_INT 0
6200: PPUSH
6201: CALL_OW 48
6205: IFFALSE 6164
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6207: LD_VAR 0 2
6211: PPUSH
6212: LD_VAR 0 7
6216: PUSH
6217: LD_INT 1
6219: ARRAY
6220: PPUSH
6221: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6225: LD_ADDR_VAR 0 7
6229: PUSH
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_INT 1
6237: PPUSH
6238: CALL_OW 3
6242: ST_TO_ADDR
// end else
6243: GO 6271
// begin repeat wait ( 10 ) ;
6245: LD_INT 10
6247: PPUSH
6248: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_VAR 0 11
6261: PPUSH
6262: LD_INT 0
6264: PPUSH
6265: CALL_OW 49
6269: IFFALSE 6245
// end ; ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_VAR 0 13
6280: PUSH
6281: LD_INT 1
6283: ARRAY
6284: PPUSH
6285: LD_VAR 0 13
6289: PUSH
6290: LD_INT 2
6292: ARRAY
6293: PPUSH
6294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6298: LD_INT 35
6300: PPUSH
6301: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6305: LD_VAR 0 11
6309: PPUSH
6310: LD_INT 22
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 70
6324: NOT
6325: IFFALSE 6298
// end ;
6327: GO 6108
6329: POP
6330: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6331: LD_EXP 14
6335: PPUSH
6336: CALL_OW 305
6340: NOT
6341: IFTRUE 6355
6343: PUSH
6344: LD_EXP 14
6348: PPUSH
6349: CALL_OW 310
6353: NOT
6354: OR
6355: IFFALSE 6387
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6357: LD_EXP 14
6361: PPUSH
6362: LD_VAR 0 14
6366: PUSH
6367: LD_INT 1
6369: ARRAY
6370: PPUSH
6371: LD_VAR 0 14
6375: PUSH
6376: LD_INT 2
6378: ARRAY
6379: PPUSH
6380: LD_INT 0
6382: PPUSH
6383: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6387: LD_EXP 14
6391: PPUSH
6392: LD_VAR 0 13
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_VAR 0 13
6405: PUSH
6406: LD_INT 2
6408: ARRAY
6409: PPUSH
6410: CALL_OW 111
// jmmArrival := true ;
6414: LD_ADDR_EXP 8
6418: PUSH
6419: LD_INT 1
6421: ST_TO_ADDR
// end ;
6422: LD_VAR 0 1
6426: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6427: LD_INT 0
6429: PPUSH
6430: PPUSH
6431: PPUSH
6432: PPUSH
6433: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6434: LD_INT 1
6436: PPUSH
6437: LD_INT 17
6439: PPUSH
6440: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6444: LD_INT 2
6446: PPUSH
6447: LD_INT 17
6449: PPUSH
6450: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6454: LD_ADDR_VAR 0 5
6458: PUSH
6459: LD_INT 6
6461: PPUSH
6462: LD_INT 58
6464: PUSH
6465: EMPTY
6466: LIST
6467: PPUSH
6468: CALL_OW 70
6472: ST_TO_ADDR
// if tmp then
6473: LD_VAR 0 5
6477: IFFALSE 6505
// for i in tmp do
6479: LD_ADDR_VAR 0 2
6483: PUSH
6484: LD_VAR 0 5
6488: PUSH
6489: FOR_IN
6490: IFFALSE 6503
// RemoveUnit ( i ) ;
6492: LD_VAR 0 2
6496: PPUSH
6497: CALL_OW 64
6501: GO 6489
6503: POP
6504: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6505: LD_ADDR_VAR 0 5
6509: PUSH
6510: LD_INT 6
6512: PPUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 21
6518: PUSH
6519: LD_INT 3
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 70
6534: ST_TO_ADDR
// if tmp then
6535: LD_VAR 0 5
6539: IFFALSE 6563
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6541: LD_VAR 0 5
6545: PPUSH
6546: LD_INT 33
6548: PPUSH
6549: LD_INT 39
6551: PPUSH
6552: CALL_OW 111
// wait ( 0 0$3 ) ;
6556: LD_INT 105
6558: PPUSH
6559: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6563: LD_INT 70
6565: PPUSH
6566: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6570: LD_INT 6
6572: PPUSH
6573: LD_INT 50
6575: PUSH
6576: EMPTY
6577: LIST
6578: PPUSH
6579: CALL_OW 70
6583: NOT
6584: IFFALSE 6563
// uc_side := 4 ;
6586: LD_ADDR_OWVAR 20
6590: PUSH
6591: LD_INT 4
6593: ST_TO_ADDR
// uc_nation := 1 ;
6594: LD_ADDR_OWVAR 21
6598: PUSH
6599: LD_INT 1
6601: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6602: LD_ADDR_EXP 28
6606: PUSH
6607: LD_STRING Sikorski
6609: PPUSH
6610: LD_INT 0
6612: PPUSH
6613: LD_STRING 
6615: PPUSH
6616: CALL 42163 0 3
6620: ST_TO_ADDR
// vc_engine := engine_combustion ;
6621: LD_ADDR_OWVAR 39
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// vc_control := control_manual ;
6629: LD_ADDR_OWVAR 38
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6637: LD_ADDR_OWVAR 40
6641: PUSH
6642: LD_INT 6
6644: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6645: LD_ADDR_OWVAR 37
6649: PUSH
6650: LD_INT 4
6652: ST_TO_ADDR
// veh := CreateVehicle ;
6653: LD_ADDR_VAR 0 4
6657: PUSH
6658: CALL_OW 45
6662: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6663: LD_VAR 0 4
6667: PPUSH
6668: LD_INT 3
6670: PPUSH
6671: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6675: LD_VAR 0 4
6679: PPUSH
6680: LD_INT 4
6682: NEG
6683: PPUSH
6684: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6688: LD_VAR 0 4
6692: PPUSH
6693: LD_INT 70
6695: PPUSH
6696: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6700: LD_VAR 0 4
6704: PPUSH
6705: LD_INT 6
6707: PPUSH
6708: LD_INT 0
6710: PPUSH
6711: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6715: LD_EXP 28
6719: PPUSH
6720: LD_VAR 0 4
6724: PPUSH
6725: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6729: LD_EXP 28
6733: PPUSH
6734: LD_INT 37
6736: PPUSH
6737: LD_INT 30
6739: PPUSH
6740: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6744: LD_INT 10
6746: PPUSH
6747: CALL_OW 67
// InitHc_All ( ) ;
6751: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: DOUBLE
6761: LD_INT 1
6763: DEC
6764: ST_TO_ADDR
6765: LD_INT 3
6767: PUSH
6768: LD_INT 2
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 2
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: PUSH
6783: LD_OWVAR 67
6787: ARRAY
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6925
// begin repeat wait ( 0 0$2 ) ;
6792: LD_INT 70
6794: PPUSH
6795: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6799: LD_INT 6
6801: PPUSH
6802: LD_INT 50
6804: PUSH
6805: EMPTY
6806: LIST
6807: PPUSH
6808: CALL_OW 70
6812: NOT
6813: IFFALSE 6792
// uc_side := 4 ;
6815: LD_ADDR_OWVAR 20
6819: PUSH
6820: LD_INT 4
6822: ST_TO_ADDR
// uc_nation := 1 ;
6823: LD_ADDR_OWVAR 21
6827: PUSH
6828: LD_INT 1
6830: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6831: LD_INT 0
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 4
6839: PPUSH
6840: LD_INT 7
6842: PPUSH
6843: CALL_OW 12
6847: PPUSH
6848: CALL_OW 380
// un := CreateHuman ;
6852: LD_ADDR_VAR 0 3
6856: PUSH
6857: CALL_OW 44
6861: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6862: LD_VAR 0 3
6866: PPUSH
6867: LD_INT 3
6869: PPUSH
6870: CALL_OW 233
// SetTag ( un , 101 ) ;
6874: LD_VAR 0 3
6878: PPUSH
6879: LD_INT 101
6881: PPUSH
6882: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6886: LD_VAR 0 3
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6901: LD_VAR 0 3
6905: PPUSH
6906: LD_INT 25
6908: PPUSH
6909: LD_INT 27
6911: PPUSH
6912: CALL_OW 111
// wait ( 0 0$1 ) ;
6916: LD_INT 35
6918: PPUSH
6919: CALL_OW 67
// end ;
6923: GO 6789
6925: POP
6926: POP
// repeat wait ( 0 0$2 ) ;
6927: LD_INT 70
6929: PPUSH
6930: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6934: LD_ADDR_VAR 0 2
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 4
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 1
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: PUSH
6968: FOR_IN
6969: IFFALSE 7032
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6971: LD_VAR 0 2
6975: PPUSH
6976: LD_INT 17
6978: PPUSH
6979: LD_INT 22
6981: PUSH
6982: LD_INT 1
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: LD_INT 58
6994: PUSH
6995: EMPTY
6996: LIST
6997: PUSH
6998: LD_INT 33
7000: PUSH
7001: LD_INT 2
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 70
7021: PUSH
7022: LD_INT 1
7024: ARRAY
7025: PPUSH
7026: CALL_OW 115
7030: GO 6968
7032: POP
7033: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
7034: LD_INT 17
7036: PPUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 58
7052: PUSH
7053: EMPTY
7054: LIST
7055: PUSH
7056: LD_INT 33
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: NOT
7080: IFFALSE 6927
// for i := 1 to 2 do
7082: LD_ADDR_VAR 0 2
7086: PUSH
7087: DOUBLE
7088: LD_INT 1
7090: DEC
7091: ST_TO_ADDR
7092: LD_INT 2
7094: PUSH
7095: FOR_TO
7096: IFFALSE 7208
// begin uc_side := 4 ;
7098: LD_ADDR_OWVAR 20
7102: PUSH
7103: LD_INT 4
7105: ST_TO_ADDR
// uc_nation := 1 ;
7106: LD_ADDR_OWVAR 21
7110: PUSH
7111: LD_INT 1
7113: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
7114: LD_INT 0
7116: PPUSH
7117: LD_INT 4
7119: PPUSH
7120: LD_INT 3
7122: PPUSH
7123: LD_INT 5
7125: PPUSH
7126: CALL_OW 12
7130: PPUSH
7131: CALL_OW 380
// un := CreateHuman ;
7135: LD_ADDR_VAR 0 3
7139: PUSH
7140: CALL_OW 44
7144: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7145: LD_VAR 0 3
7149: PPUSH
7150: LD_INT 3
7152: PPUSH
7153: CALL_OW 233
// SetTag ( un , 101 ) ;
7157: LD_VAR 0 3
7161: PPUSH
7162: LD_INT 101
7164: PPUSH
7165: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
7169: LD_VAR 0 3
7173: PPUSH
7174: LD_INT 6
7176: PPUSH
7177: LD_INT 0
7179: PPUSH
7180: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
7184: LD_VAR 0 3
7188: PPUSH
7189: LD_INT 25
7191: PPUSH
7192: LD_INT 27
7194: PPUSH
7195: CALL_OW 111
// wait ( 0 0$1 ) ;
7199: LD_INT 35
7201: PPUSH
7202: CALL_OW 67
// end ;
7206: GO 7095
7208: POP
7209: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7210: LD_ADDR_VAR 0 2
7214: PUSH
7215: DOUBLE
7216: LD_INT 1
7218: DEC
7219: ST_TO_ADDR
7220: LD_INT 5
7222: PUSH
7223: LD_INT 4
7225: PUSH
7226: LD_INT 3
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: PUSH
7238: LD_OWVAR 67
7242: ARRAY
7243: PUSH
7244: FOR_TO
7245: IFFALSE 7510
// begin repeat wait ( 0 0$2 ) ;
7247: LD_INT 70
7249: PPUSH
7250: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7254: LD_INT 6
7256: PPUSH
7257: LD_INT 50
7259: PUSH
7260: EMPTY
7261: LIST
7262: PPUSH
7263: CALL_OW 70
7267: NOT
7268: IFFALSE 7247
// uc_side := 4 ;
7270: LD_ADDR_OWVAR 20
7274: PUSH
7275: LD_INT 4
7277: ST_TO_ADDR
// uc_nation := 1 ;
7278: LD_ADDR_OWVAR 21
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// vc_engine := engine_combustion ;
7286: LD_ADDR_OWVAR 39
7290: PUSH
7291: LD_INT 1
7293: ST_TO_ADDR
// vc_control := control_manual ;
7294: LD_ADDR_OWVAR 38
7298: PUSH
7299: LD_INT 1
7301: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7302: LD_ADDR_OWVAR 40
7306: PUSH
7307: LD_INT 5
7309: PUSH
7310: LD_INT 7
7312: PUSH
7313: LD_INT 5
7315: PUSH
7316: LD_INT 4
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: PUSH
7325: LD_VAR 0 2
7329: PUSH
7330: LD_INT 4
7332: MOD
7333: PUSH
7334: LD_INT 1
7336: PLUS
7337: ARRAY
7338: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7339: LD_ADDR_OWVAR 37
7343: PUSH
7344: LD_INT 3
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 4
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: PUSH
7362: LD_VAR 0 2
7366: PUSH
7367: LD_INT 4
7369: MOD
7370: PUSH
7371: LD_INT 1
7373: PLUS
7374: ARRAY
7375: ST_TO_ADDR
// veh := CreateVehicle ;
7376: LD_ADDR_VAR 0 4
7380: PUSH
7381: CALL_OW 45
7385: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7386: LD_VAR 0 4
7390: PPUSH
7391: LD_INT 3
7393: PPUSH
7394: CALL_OW 233
// SetTag ( veh , 0 ) ;
7398: LD_VAR 0 4
7402: PPUSH
7403: LD_INT 0
7405: PPUSH
7406: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 70
7417: PPUSH
7418: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7422: LD_VAR 0 4
7426: PPUSH
7427: LD_INT 6
7429: PPUSH
7430: LD_INT 0
7432: PPUSH
7433: CALL_OW 49
// InitHc ;
7437: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7441: LD_INT 0
7443: PPUSH
7444: LD_INT 3
7446: PPUSH
7447: LD_INT 4
7449: PPUSH
7450: LD_INT 7
7452: PPUSH
7453: CALL_OW 12
7457: PPUSH
7458: CALL_OW 380
// un := CreateHuman ;
7462: LD_ADDR_VAR 0 3
7466: PUSH
7467: CALL_OW 44
7471: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7472: LD_VAR 0 3
7476: PPUSH
7477: LD_VAR 0 4
7481: PPUSH
7482: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_INT 30
7493: PPUSH
7494: LD_INT 22
7496: PPUSH
7497: CALL_OW 111
// wait ( 0 0$3 ) ;
7501: LD_INT 105
7503: PPUSH
7504: CALL_OW 67
// end ;
7508: GO 7244
7510: POP
7511: POP
// wait ( 0 0$10 ) ;
7512: LD_INT 350
7514: PPUSH
7515: CALL_OW 67
// end ;
7519: LD_VAR 0 1
7523: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7524: LD_INT 0
7526: PPUSH
7527: PPUSH
7528: PPUSH
7529: PPUSH
// gammaBase := [ ] ;
7530: LD_ADDR_VAR 0 4
7534: PUSH
7535: EMPTY
7536: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7537: LD_ADDR_VAR 0 5
7541: PUSH
7542: LD_VAR 0 1
7546: PPUSH
7547: LD_INT 22
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 21
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 50
7569: PUSH
7570: EMPTY
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 70
7582: ST_TO_ADDR
// for i in buildings do
7583: LD_ADDR_VAR 0 3
7587: PUSH
7588: LD_VAR 0 5
7592: PUSH
7593: FOR_IN
7594: IFFALSE 8031
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7596: LD_VAR 0 3
7600: PPUSH
7601: CALL_OW 266
7605: PUSH
7606: LD_INT 6
7608: PUSH
7609: LD_INT 7
7611: PUSH
7612: LD_INT 8
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: LIST
7619: IN
7620: IFFALSE 7734
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7622: LD_ADDR_VAR 0 4
7626: PUSH
7627: LD_VAR 0 4
7631: PUSH
7632: LD_VAR 0 3
7636: PPUSH
7637: CALL_OW 266
7641: PUSH
7642: LD_VAR 0 3
7646: PPUSH
7647: CALL_OW 250
7651: PUSH
7652: LD_VAR 0 3
7656: PPUSH
7657: CALL_OW 251
7661: PUSH
7662: LD_VAR 0 3
7666: PPUSH
7667: CALL_OW 254
7671: PUSH
7672: LD_VAR 0 3
7676: PPUSH
7677: CALL_OW 267
7681: PUSH
7682: LD_VAR 0 3
7686: PPUSH
7687: CALL_OW 248
7691: PUSH
7692: LD_VAR 0 3
7696: PPUSH
7697: LD_INT 1
7699: PPUSH
7700: CALL_OW 268
7704: PUSH
7705: LD_VAR 0 3
7709: PPUSH
7710: LD_INT 2
7712: PPUSH
7713: CALL_OW 268
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: ADD
7731: ST_TO_ADDR
7732: GO 8029
// if GetBType ( i ) = b_bunker then
7734: LD_VAR 0 3
7738: PPUSH
7739: CALL_OW 266
7743: PUSH
7744: LD_INT 32
7746: EQUAL
7747: IFFALSE 7844
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7749: LD_ADDR_VAR 0 4
7753: PUSH
7754: LD_VAR 0 4
7758: PUSH
7759: LD_VAR 0 3
7763: PPUSH
7764: CALL_OW 266
7768: PUSH
7769: LD_VAR 0 3
7773: PPUSH
7774: CALL_OW 250
7778: PUSH
7779: LD_VAR 0 3
7783: PPUSH
7784: CALL_OW 251
7788: PUSH
7789: LD_VAR 0 3
7793: PPUSH
7794: CALL_OW 254
7798: PUSH
7799: LD_VAR 0 3
7803: PPUSH
7804: CALL_OW 267
7808: PUSH
7809: LD_VAR 0 3
7813: PPUSH
7814: CALL_OW 248
7818: PUSH
7819: LD_VAR 0 3
7823: PPUSH
7824: CALL_OW 269
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: ADD
7841: ST_TO_ADDR
7842: GO 8029
// if GetBType ( i ) = b_factory then
7844: LD_VAR 0 3
7848: PPUSH
7849: CALL_OW 266
7853: PUSH
7854: LD_INT 3
7856: EQUAL
7857: IFFALSE 7947
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7859: LD_ADDR_VAR 0 4
7863: PUSH
7864: LD_VAR 0 4
7868: PPUSH
7869: LD_INT 1
7871: PPUSH
7872: LD_VAR 0 3
7876: PPUSH
7877: CALL_OW 266
7881: PUSH
7882: LD_VAR 0 3
7886: PPUSH
7887: CALL_OW 250
7891: PUSH
7892: LD_VAR 0 3
7896: PPUSH
7897: CALL_OW 251
7901: PUSH
7902: LD_VAR 0 3
7906: PPUSH
7907: CALL_OW 254
7911: PUSH
7912: LD_VAR 0 3
7916: PPUSH
7917: CALL_OW 267
7921: PUSH
7922: LD_VAR 0 3
7926: PPUSH
7927: CALL_OW 248
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 2
7944: ST_TO_ADDR
7945: GO 8029
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7947: LD_ADDR_VAR 0 4
7951: PUSH
7952: LD_VAR 0 4
7956: PUSH
7957: LD_VAR 0 3
7961: PPUSH
7962: CALL_OW 266
7966: PUSH
7967: LD_VAR 0 3
7971: PPUSH
7972: CALL_OW 250
7976: PUSH
7977: LD_VAR 0 3
7981: PPUSH
7982: CALL_OW 251
7986: PUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 254
7996: PUSH
7997: LD_VAR 0 3
8001: PPUSH
8002: CALL_OW 267
8006: PUSH
8007: LD_VAR 0 3
8011: PPUSH
8012: CALL_OW 248
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: PUSH
8025: EMPTY
8026: LIST
8027: ADD
8028: ST_TO_ADDR
// end ;
8029: GO 7593
8031: POP
8032: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
8033: LD_VAR 0 4
8037: PPUSH
8038: LD_STRING 08_GammaBase
8040: PPUSH
8041: CALL_OW 39
// end ;
8045: LD_VAR 0 2
8049: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
8054: PPUSH
8055: PPUSH
8056: PPUSH
8057: PPUSH
8058: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
8059: LD_ADDR_VAR 0 3
8063: PUSH
8064: LD_INT 17
8066: PPUSH
8067: LD_INT 22
8069: PUSH
8070: LD_INT 1
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 3
8079: PUSH
8080: LD_INT 21
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 33
8099: PUSH
8100: LD_INT 2
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: PPUSH
8116: CALL_OW 70
8120: ST_TO_ADDR
// if tmp then
8121: LD_VAR 0 3
8125: IFFALSE 8244
// begin for i in tmp do
8127: LD_ADDR_VAR 0 2
8131: PUSH
8132: LD_VAR 0 3
8136: PUSH
8137: FOR_IN
8138: IFFALSE 8169
// begin SetSide ( i , 4 ) ;
8140: LD_VAR 0 2
8144: PPUSH
8145: LD_INT 4
8147: PPUSH
8148: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
8152: LD_VAR 0 2
8156: PPUSH
8157: LD_INT 42
8159: PPUSH
8160: LD_INT 22
8162: PPUSH
8163: CALL_OW 111
// end ;
8167: GO 8137
8169: POP
8170: POP
// repeat wait ( 0 0$3 ) ;
8171: LD_INT 105
8173: PPUSH
8174: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
8178: LD_VAR 0 3
8182: PPUSH
8183: LD_INT 51
8185: PPUSH
8186: LD_INT 16
8188: PPUSH
8189: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8193: LD_VAR 0 3
8197: PPUSH
8198: LD_INT 95
8200: PUSH
8201: LD_INT 17
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PPUSH
8208: CALL_OW 72
8212: NOT
8213: IFFALSE 8171
// for i in tmp do
8215: LD_ADDR_VAR 0 2
8219: PUSH
8220: LD_VAR 0 3
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8242
// SetSide ( i , 1 ) ;
8228: LD_VAR 0 2
8232: PPUSH
8233: LD_INT 1
8235: PPUSH
8236: CALL_OW 235
8240: GO 8225
8242: POP
8243: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_INT 17
8251: PPUSH
8252: LD_INT 22
8254: PUSH
8255: LD_INT 1
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 33
8264: PUSH
8265: LD_INT 2
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 70
8280: ST_TO_ADDR
// if tmp then
8281: LD_VAR 0 3
8285: IFFALSE 8309
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8287: LD_VAR 0 3
8291: PPUSH
8292: LD_INT 40
8294: PPUSH
8295: LD_INT 32
8297: PPUSH
8298: CALL_OW 111
// wait ( 0 0$3 ) ;
8302: LD_INT 105
8304: PPUSH
8305: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8309: LD_ADDR_VAR 0 3
8313: PUSH
8314: LD_INT 17
8316: PPUSH
8317: LD_INT 22
8319: PUSH
8320: LD_INT 1
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 2
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 21
8342: PUSH
8343: LD_INT 3
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PPUSH
8359: CALL_OW 70
8363: ST_TO_ADDR
// if tmp then
8364: LD_VAR 0 3
8368: IFFALSE 8516
// begin repeat wait ( 0 0$1 ) ;
8370: LD_INT 35
8372: PPUSH
8373: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8377: LD_ADDR_VAR 0 3
8381: PUSH
8382: LD_INT 17
8384: PPUSH
8385: LD_INT 22
8387: PUSH
8388: LD_INT 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 2
8397: PUSH
8398: LD_INT 21
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 21
8410: PUSH
8411: LD_INT 3
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PPUSH
8427: CALL_OW 70
8431: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8432: LD_ADDR_VAR 0 2
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 4
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 25
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 21
8462: PUSH
8463: LD_INT 2
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 69
8483: PUSH
8484: FOR_IN
8485: IFFALSE 8507
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8487: LD_VAR 0 2
8491: PPUSH
8492: LD_VAR 0 3
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PPUSH
8501: CALL_OW 115
8505: GO 8484
8507: POP
8508: POP
// until not tmp ;
8509: LD_VAR 0 3
8513: NOT
8514: IFFALSE 8370
// end ; wait ( 0 0$2 ) ;
8516: LD_INT 70
8518: PPUSH
8519: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8523: LD_ADDR_VAR 0 3
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_INT 4
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8543: LD_VAR 0 3
8547: PPUSH
8548: LD_INT 52
8550: PPUSH
8551: LD_INT 54
8553: PPUSH
8554: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8558: LD_VAR 0 3
8562: PPUSH
8563: LD_INT 175
8565: PPUSH
8566: CALL_OW 202
// wait ( 0 0$5 ) ;
8570: LD_INT 175
8572: PPUSH
8573: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8577: LD_VAR 0 3
8581: PPUSH
8582: LD_INT 120
8584: PUSH
8585: LD_INT 101
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PPUSH
8592: CALL_OW 72
8596: PPUSH
8597: LD_INT 42
8599: PPUSH
8600: LD_INT 52
8602: PPUSH
8603: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8607: LD_VAR 0 3
8611: PPUSH
8612: LD_INT 120
8614: PUSH
8615: LD_INT 101
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 72
8626: PPUSH
8627: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8631: LD_VAR 0 3
8635: PPUSH
8636: LD_INT 120
8638: PUSH
8639: LD_INT 101
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 25
8648: PUSH
8649: LD_INT 4
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: PPUSH
8665: LD_INT 34
8667: PPUSH
8668: LD_INT 47
8670: PPUSH
8671: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8675: LD_VAR 0 3
8679: PPUSH
8680: LD_INT 120
8682: PUSH
8683: LD_INT 101
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 25
8692: PUSH
8693: LD_INT 4
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 72
8708: PPUSH
8709: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8713: LD_ADDR_VAR 0 7
8717: PUSH
8718: LD_VAR 0 3
8722: PPUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 2
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8738: LD_ADDR_VAR 0 4
8742: PUSH
8743: LD_INT 81
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 69
8757: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_INT 57
8765: PUSH
8766: LD_INT 66
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 62
8775: PUSH
8776: LD_INT 58
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8787: LD_INT 35
8789: PPUSH
8790: CALL_OW 67
// for i in filter do
8794: LD_ADDR_VAR 0 2
8798: PUSH
8799: LD_VAR 0 7
8803: PUSH
8804: FOR_IN
8805: IFFALSE 9239
// begin if IsDead ( i ) then
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 301
8816: IFFALSE 8836
// begin filter := filter diff i ;
8818: LD_ADDR_VAR 0 7
8822: PUSH
8823: LD_VAR 0 7
8827: PUSH
8828: LD_VAR 0 2
8832: DIFF
8833: ST_TO_ADDR
// continue ;
8834: GO 8804
// end ; tmp := IsDrivenBy ( i ) ;
8836: LD_ADDR_VAR 0 3
8840: PUSH
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL_OW 311
8850: ST_TO_ADDR
// if not tmp then
8851: LD_VAR 0 3
8855: NOT
8856: IFFALSE 8860
// continue ;
8858: GO 8804
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8860: LD_VAR 0 2
8864: PPUSH
8865: CALL_OW 261
8869: PUSH
8870: LD_INT 30
8872: GREATER
8873: IFFALSE 8890
8875: PUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 110
8885: PUSH
8886: LD_INT 2
8888: EQUAL
8889: AND
8890: IFFALSE 8906
// SetTag ( i , 0 ) else
8892: LD_VAR 0 2
8896: PPUSH
8897: LD_INT 0
8899: PPUSH
8900: CALL_OW 109
8904: GO 8935
// if GetTag ( i ) = 2 then
8906: LD_VAR 0 2
8910: PPUSH
8911: CALL_OW 110
8915: PUSH
8916: LD_INT 2
8918: EQUAL
8919: IFFALSE 8935
// begin ComMoveUnit ( i , amDepot ) ;
8921: LD_VAR 0 2
8925: PPUSH
8926: LD_EXP 31
8930: PPUSH
8931: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8935: LD_VAR 0 2
8939: PPUSH
8940: CALL_OW 256
8944: PUSH
8945: LD_INT 600
8947: GREATEREQUAL
8948: IFFALSE 8962
8950: PUSH
8951: LD_VAR 0 2
8955: PPUSH
8956: CALL_OW 110
8960: NOT
8961: AND
8962: IFFALSE 8988
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8964: LD_VAR 0 2
8968: PPUSH
8969: LD_VAR 0 4
8973: PPUSH
8974: LD_VAR 0 2
8978: PPUSH
8979: CALL_OW 74
8983: PPUSH
8984: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 256
8997: PUSH
8998: LD_INT 600
9000: LESS
9001: IFFALSE 9015
9003: PUSH
9004: LD_VAR 0 2
9008: PPUSH
9009: CALL_OW 110
9013: NOT
9014: AND
9015: IFFALSE 9091
// begin SetTag ( i , 1 ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_VAR 0 5
9043: PPUSH
9044: CALL 83811 0 2
9048: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
9049: LD_VAR 0 2
9053: PPUSH
9054: LD_VAR 0 6
9058: PUSH
9059: LD_INT 1
9061: ARRAY
9062: PPUSH
9063: LD_VAR 0 6
9067: PUSH
9068: LD_INT 2
9070: ARRAY
9071: PPUSH
9072: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
9076: LD_VAR 0 2
9080: PPUSH
9081: LD_INT 40
9083: PPUSH
9084: LD_INT 49
9086: PPUSH
9087: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
9091: LD_VAR 0 2
9095: PPUSH
9096: CALL_OW 110
9100: PUSH
9101: LD_INT 1
9103: EQUAL
9104: IFFALSE 9127
9106: PUSH
9107: LD_VAR 0 2
9111: PPUSH
9112: LD_INT 40
9114: PPUSH
9115: LD_INT 49
9117: PPUSH
9118: CALL_OW 297
9122: PUSH
9123: LD_INT 9
9125: LESS
9126: AND
9127: IFFALSE 9135
9129: PUSH
9130: LD_VAR 0 3
9134: AND
9135: IFFALSE 9237
// begin ComExitVehicle ( tmp ) ;
9137: LD_VAR 0 3
9141: PPUSH
9142: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
9146: LD_VAR 0 3
9150: PPUSH
9151: LD_VAR 0 2
9155: PPUSH
9156: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9160: LD_INT 35
9162: PPUSH
9163: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9167: LD_VAR 0 2
9171: PPUSH
9172: CALL_OW 256
9176: PUSH
9177: LD_INT 1000
9179: EQUAL
9180: IFFALSE 9160
// ComEnterUnit ( tmp , i ) ;
9182: LD_VAR 0 3
9186: PPUSH
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 120
// if GetFuel ( i ) <= 30 then
9196: LD_VAR 0 2
9200: PPUSH
9201: CALL_OW 261
9205: PUSH
9206: LD_INT 30
9208: LESSEQUAL
9209: IFFALSE 9225
// SetTag ( i , 2 ) else
9211: LD_VAR 0 2
9215: PPUSH
9216: LD_INT 2
9218: PPUSH
9219: CALL_OW 109
9223: GO 9237
// SetTag ( i , 0 ) ;
9225: LD_VAR 0 2
9229: PPUSH
9230: LD_INT 0
9232: PPUSH
9233: CALL_OW 109
// end ; end ;
9237: GO 8804
9239: POP
9240: POP
// until not filter ;
9241: LD_VAR 0 7
9245: NOT
9246: IFFALSE 8787
// end ; end_of_file
9248: LD_VAR 0 1
9252: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
9259: PPUSH
// uc_side := 3 ;
9260: LD_ADDR_OWVAR 20
9264: PUSH
9265: LD_INT 3
9267: ST_TO_ADDR
// uc_nation := 3 ;
9268: LD_ADDR_OWVAR 21
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9276: LD_ADDR_EXP 33
9280: PUSH
9281: LD_INT 8
9283: PUSH
9284: LD_INT 11
9286: PUSH
9287: LD_INT 14
9289: PUSH
9290: LD_INT 17
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: PUSH
9299: LD_OWVAR 67
9303: ARRAY
9304: ST_TO_ADDR
// ruMobile := [ ] ;
9305: LD_ADDR_EXP 34
9309: PUSH
9310: EMPTY
9311: ST_TO_ADDR
// ruBuildList := [ ] ;
9312: LD_ADDR_EXP 35
9316: PUSH
9317: EMPTY
9318: ST_TO_ADDR
// russianAttackers := [ ] ;
9319: LD_ADDR_EXP 36
9323: PUSH
9324: EMPTY
9325: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9326: LD_ADDR_VAR 0 5
9330: PUSH
9331: LD_INT 43
9333: PUSH
9334: LD_INT 44
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: ST_TO_ADDR
// if Difficulty > 2 then
9345: LD_OWVAR 67
9349: PUSH
9350: LD_INT 2
9352: GREATER
9353: IFFALSE 9376
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9355: LD_ADDR_VAR 0 5
9359: PUSH
9360: LD_VAR 0 5
9364: PUSH
9365: LD_INT 45
9367: PUSH
9368: LD_INT 46
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: ADD
9375: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9376: LD_ADDR_EXP 32
9380: PUSH
9381: LD_STRING Borodin
9383: PPUSH
9384: CALL_OW 25
9388: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9389: LD_EXP 32
9393: PPUSH
9394: LD_INT 28
9396: PPUSH
9397: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3500 , 4500 , 5500 , 6000 ] [ Difficulty ] ) ;
9401: LD_INT 28
9403: PPUSH
9404: CALL_OW 274
9408: PPUSH
9409: LD_INT 1
9411: PPUSH
9412: LD_INT 3500
9414: PUSH
9415: LD_INT 4500
9417: PUSH
9418: LD_INT 5500
9420: PUSH
9421: LD_INT 6000
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: PUSH
9430: LD_OWVAR 67
9434: ARRAY
9435: PPUSH
9436: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1500 ) ;
9440: LD_INT 28
9442: PPUSH
9443: CALL_OW 274
9447: PPUSH
9448: LD_INT 2
9450: PPUSH
9451: LD_INT 1500
9453: PPUSH
9454: CALL_OW 277
// if Difficulty > 2 then
9458: LD_OWVAR 67
9462: PUSH
9463: LD_INT 2
9465: GREATER
9466: IFFALSE 9590
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9468: LD_ADDR_VAR 0 4
9472: PUSH
9473: LD_INT 99
9475: PUSH
9476: LD_INT 130
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 121
9489: PUSH
9490: LD_INT 127
9492: PUSH
9493: LD_INT 4
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 117
9503: PUSH
9504: LD_INT 121
9506: PUSH
9507: LD_INT 4
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: ST_TO_ADDR
// for i in tmp do
9520: LD_ADDR_VAR 0 2
9524: PUSH
9525: LD_VAR 0 4
9529: PUSH
9530: FOR_IN
9531: IFFALSE 9588
// begin bc_type := b_turret ;
9533: LD_ADDR_OWVAR 42
9537: PUSH
9538: LD_INT 33
9540: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9541: LD_ADDR_OWVAR 43
9545: PUSH
9546: LD_INT 2
9548: PUSH
9549: LD_OWVAR 67
9553: PLUS
9554: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9555: LD_VAR 0 2
9559: PUSH
9560: LD_INT 1
9562: ARRAY
9563: PPUSH
9564: LD_VAR 0 2
9568: PUSH
9569: LD_INT 2
9571: ARRAY
9572: PPUSH
9573: LD_VAR 0 2
9577: PUSH
9578: LD_INT 3
9580: ARRAY
9581: PPUSH
9582: CALL_OW 47
// end ;
9586: GO 9530
9588: POP
9589: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9590: LD_ADDR_VAR 0 2
9594: PUSH
9595: LD_INT 22
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 21
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 69
9623: PUSH
9624: FOR_IN
9625: IFFALSE 9647
// SetBLevel ( i , 2 + Difficulty ) ;
9627: LD_VAR 0 2
9631: PPUSH
9632: LD_INT 2
9634: PUSH
9635: LD_OWVAR 67
9639: PLUS
9640: PPUSH
9641: CALL_OW 241
9645: GO 9624
9647: POP
9648: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9649: LD_ADDR_VAR 0 4
9653: PUSH
9654: LD_INT 22
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 30
9669: PUSH
9670: LD_INT 32
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 30
9679: PUSH
9680: LD_INT 33
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PPUSH
9696: CALL_OW 69
9700: ST_TO_ADDR
// for i in tmp do
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: LD_VAR 0 4
9710: PUSH
9711: FOR_IN
9712: IFFALSE 9744
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9714: LD_VAR 0 2
9718: PPUSH
9719: LD_VAR 0 5
9723: PUSH
9724: LD_INT 1
9726: PPUSH
9727: LD_VAR 0 5
9731: PPUSH
9732: CALL_OW 12
9736: ARRAY
9737: PPUSH
9738: CALL_OW 431
9742: GO 9711
9744: POP
9745: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: LD_INT 22
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 30
9763: PUSH
9764: LD_INT 32
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: PUSH
9780: FOR_IN
9781: IFFALSE 9830
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9783: LD_INT 0
9785: PPUSH
9786: LD_INT 5
9788: PUSH
9789: LD_INT 6
9791: PUSH
9792: LD_INT 7
9794: PUSH
9795: LD_INT 8
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: LD_OWVAR 67
9808: ARRAY
9809: PPUSH
9810: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9814: CALL_OW 44
9818: PPUSH
9819: LD_VAR 0 2
9823: PPUSH
9824: CALL_OW 52
// end ;
9828: GO 9780
9830: POP
9831: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9832: LD_ADDR_VAR 0 2
9836: PUSH
9837: LD_INT 22
9839: PUSH
9840: LD_INT 3
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 30
9849: PUSH
9850: LD_INT 5
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PPUSH
9861: CALL_OW 69
9865: PUSH
9866: FOR_IN
9867: IFFALSE 9957
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9869: LD_ADDR_VAR 0 3
9873: PUSH
9874: DOUBLE
9875: LD_INT 1
9877: DEC
9878: ST_TO_ADDR
9879: LD_INT 2
9881: PUSH
9882: LD_INT 3
9884: PUSH
9885: LD_INT 4
9887: PUSH
9888: LD_INT 5
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: PUSH
9897: LD_OWVAR 67
9901: ARRAY
9902: PUSH
9903: FOR_TO
9904: IFFALSE 9953
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9906: LD_INT 0
9908: PPUSH
9909: LD_INT 5
9911: PUSH
9912: LD_INT 6
9914: PUSH
9915: LD_INT 7
9917: PUSH
9918: LD_INT 8
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PPUSH
9933: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9937: CALL_OW 44
9941: PPUSH
9942: LD_VAR 0 2
9946: PPUSH
9947: CALL_OW 52
// end ;
9951: GO 9903
9953: POP
9954: POP
// end ;
9955: GO 9866
9957: POP
9958: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_INT 3
9971: PUSH
9972: LD_INT 4
9974: PUSH
9975: LD_INT 5
9977: PUSH
9978: LD_INT 5
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: LD_OWVAR 67
9991: ARRAY
9992: PUSH
9993: FOR_TO
9994: IFFALSE 10041
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9996: LD_INT 0
9998: PPUSH
9999: LD_INT 4
10001: PUSH
10002: LD_INT 5
10004: PUSH
10005: LD_INT 5
10007: PUSH
10008: LD_INT 6
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: PUSH
10017: LD_OWVAR 67
10021: ARRAY
10022: PPUSH
10023: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
10027: CALL_OW 44
10031: PPUSH
10032: LD_INT 28
10034: PPUSH
10035: CALL_OW 52
// end ;
10039: GO 9993
10041: POP
10042: POP
// for i := 1 to 2 do
10043: LD_ADDR_VAR 0 2
10047: PUSH
10048: DOUBLE
10049: LD_INT 1
10051: DEC
10052: ST_TO_ADDR
10053: LD_INT 2
10055: PUSH
10056: FOR_TO
10057: IFFALSE 10091
// begin PrepareScientist ( false , 6 ) ;
10059: LD_INT 0
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
10069: CALL_OW 44
10073: PPUSH
10074: LD_INT 81
10076: PPUSH
10077: LD_INT 93
10079: PPUSH
10080: CALL_OW 428
10084: PPUSH
10085: CALL_OW 52
// end ;
10089: GO 10056
10091: POP
10092: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
10093: LD_INT 22
10095: PPUSH
10096: LD_INT 1
10098: PPUSH
10099: LD_INT 3
10101: PPUSH
10102: LD_INT 51
10104: PPUSH
10105: LD_INT 100
10107: PPUSH
10108: CALL 47125 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
10112: CALL_OW 45
10116: PPUSH
10117: LD_INT 91
10119: PPUSH
10120: LD_INT 94
10122: PPUSH
10123: LD_INT 3
10125: PPUSH
10126: LD_INT 0
10128: PPUSH
10129: CALL_OW 50
// for i := 1 to 2 do
10133: LD_ADDR_VAR 0 2
10137: PUSH
10138: DOUBLE
10139: LD_INT 1
10141: DEC
10142: ST_TO_ADDR
10143: LD_INT 2
10145: PUSH
10146: FOR_TO
10147: IFFALSE 10191
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
10149: LD_INT 22
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: LD_INT 3
10157: PPUSH
10158: LD_INT 52
10160: PPUSH
10161: LD_INT 100
10163: PPUSH
10164: CALL 47125 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
10168: CALL_OW 45
10172: PPUSH
10173: LD_INT 91
10175: PPUSH
10176: LD_INT 94
10178: PPUSH
10179: LD_INT 4
10181: PPUSH
10182: LD_INT 0
10184: PPUSH
10185: CALL_OW 50
// end ;
10189: GO 10146
10191: POP
10192: POP
// end ;
10193: LD_VAR 0 1
10197: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10198: LD_INT 0
10200: PPUSH
10201: PPUSH
10202: PPUSH
10203: PPUSH
10204: PPUSH
// uc_side := 3 ;
10205: LD_ADDR_OWVAR 20
10209: PUSH
10210: LD_INT 3
10212: ST_TO_ADDR
// uc_nation := 3 ;
10213: LD_ADDR_OWVAR 21
10217: PUSH
10218: LD_INT 3
10220: ST_TO_ADDR
// for i := 1 to 4 do
10221: LD_ADDR_VAR 0 2
10225: PUSH
10226: DOUBLE
10227: LD_INT 1
10229: DEC
10230: ST_TO_ADDR
10231: LD_INT 4
10233: PUSH
10234: FOR_TO
10235: IFFALSE 10362
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10237: LD_INT 22
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 1
10245: PPUSH
10246: LD_INT 42
10248: PUSH
10249: LD_INT 43
10251: PUSH
10252: LD_INT 44
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 1
10262: PPUSH
10263: LD_INT 3
10265: PPUSH
10266: CALL_OW 12
10270: ARRAY
10271: PPUSH
10272: LD_INT 40
10274: PPUSH
10275: CALL 47125 0 5
// veh := CreateVehicle ;
10279: LD_ADDR_VAR 0 4
10283: PUSH
10284: CALL_OW 45
10288: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10289: LD_VAR 0 4
10293: PPUSH
10294: LD_INT 5
10296: PPUSH
10297: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10301: LD_VAR 0 4
10305: PPUSH
10306: LD_INT 7
10308: PPUSH
10309: LD_INT 0
10311: PPUSH
10312: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10316: LD_INT 0
10318: PPUSH
10319: LD_INT 5
10321: PPUSH
10322: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10326: CALL_OW 44
10330: PPUSH
10331: LD_VAR 0 4
10335: PPUSH
10336: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10340: LD_ADDR_VAR 0 5
10344: PUSH
10345: LD_VAR 0 5
10349: PPUSH
10350: LD_VAR 0 4
10354: PPUSH
10355: CALL 80295 0 2
10359: ST_TO_ADDR
// end ;
10360: GO 10234
10362: POP
10363: POP
// for i := 1 to 3 do
10364: LD_ADDR_VAR 0 2
10368: PUSH
10369: DOUBLE
10370: LD_INT 1
10372: DEC
10373: ST_TO_ADDR
10374: LD_INT 3
10376: PUSH
10377: FOR_TO
10378: IFFALSE 10505
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10380: LD_INT 22
10382: PPUSH
10383: LD_INT 1
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: LD_INT 42
10391: PUSH
10392: LD_INT 43
10394: PUSH
10395: LD_INT 44
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 1
10405: PPUSH
10406: LD_INT 3
10408: PPUSH
10409: CALL_OW 12
10413: ARRAY
10414: PPUSH
10415: LD_INT 40
10417: PPUSH
10418: CALL 47125 0 5
// veh := CreateVehicle ;
10422: LD_ADDR_VAR 0 4
10426: PUSH
10427: CALL_OW 45
10431: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10432: LD_VAR 0 4
10436: PPUSH
10437: LD_INT 5
10439: PPUSH
10440: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10444: LD_VAR 0 4
10448: PPUSH
10449: LD_INT 8
10451: PPUSH
10452: LD_INT 0
10454: PPUSH
10455: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10459: LD_INT 0
10461: PPUSH
10462: LD_INT 5
10464: PPUSH
10465: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10469: CALL_OW 44
10473: PPUSH
10474: LD_VAR 0 4
10478: PPUSH
10479: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 5
10492: PPUSH
10493: LD_VAR 0 4
10497: PPUSH
10498: CALL 80295 0 2
10502: ST_TO_ADDR
// end ;
10503: GO 10377
10505: POP
10506: POP
// for i := 1 to 2 do
10507: LD_ADDR_VAR 0 2
10511: PUSH
10512: DOUBLE
10513: LD_INT 1
10515: DEC
10516: ST_TO_ADDR
10517: LD_INT 2
10519: PUSH
10520: FOR_TO
10521: IFFALSE 10580
// begin PrepareSoldier ( false , 5 ) ;
10523: LD_INT 0
10525: PPUSH
10526: LD_INT 5
10528: PPUSH
10529: CALL_OW 381
// un := CreateHuman ;
10533: LD_ADDR_VAR 0 3
10537: PUSH
10538: CALL_OW 44
10542: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10543: LD_VAR 0 3
10547: PPUSH
10548: LD_INT 8
10550: PPUSH
10551: LD_INT 0
10553: PPUSH
10554: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10558: LD_ADDR_VAR 0 5
10562: PUSH
10563: LD_VAR 0 5
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: CALL 80295 0 2
10577: ST_TO_ADDR
// end ;
10578: GO 10520
10580: POP
10581: POP
// for i in tmp do
10582: LD_ADDR_VAR 0 2
10586: PUSH
10587: LD_VAR 0 5
10591: PUSH
10592: FOR_IN
10593: IFFALSE 10612
// ComAgressiveMove ( i , 51 , 16 ) ;
10595: LD_VAR 0 2
10599: PPUSH
10600: LD_INT 51
10602: PPUSH
10603: LD_INT 16
10605: PPUSH
10606: CALL_OW 114
10610: GO 10592
10612: POP
10613: POP
// end ;
10614: LD_VAR 0 1
10618: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10619: LD_EXP 34
10623: IFFALSE 11200
10625: GO 10627
10627: DISABLE
10628: LD_INT 0
10630: PPUSH
10631: PPUSH
10632: PPUSH
// begin enable ;
10633: ENABLE
// if not ruMobile then
10634: LD_EXP 34
10638: NOT
10639: IFFALSE 10643
// exit ;
10641: GO 11200
// for i in ruMobile do
10643: LD_ADDR_VAR 0 1
10647: PUSH
10648: LD_EXP 34
10652: PUSH
10653: FOR_IN
10654: IFFALSE 11198
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10656: LD_VAR 0 1
10660: PPUSH
10661: CALL_OW 302
10665: NOT
10666: IFTRUE 10683
10668: PUSH
10669: LD_VAR 0 1
10673: PPUSH
10674: CALL_OW 255
10678: PUSH
10679: LD_INT 3
10681: NONEQUAL
10682: OR
10683: IFFALSE 10703
// begin ruMobile := ruMobile diff i ;
10685: LD_ADDR_EXP 34
10689: PUSH
10690: LD_EXP 34
10694: PUSH
10695: LD_VAR 0 1
10699: DIFF
10700: ST_TO_ADDR
// continue ;
10701: GO 10653
// end ; if GetTag ( i ) = 300 then
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 110
10712: PUSH
10713: LD_INT 300
10715: EQUAL
10716: IFFALSE 10831
// begin if GetFuel ( i ) < 50 then
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 261
10727: PUSH
10728: LD_INT 50
10730: LESS
10731: IFFALSE 10790
// begin ComMoveXY ( i , 93 , 100 ) ;
10733: LD_VAR 0 1
10737: PPUSH
10738: LD_INT 93
10740: PPUSH
10741: LD_INT 100
10743: PPUSH
10744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10748: LD_INT 35
10750: PPUSH
10751: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10755: LD_VAR 0 1
10759: PPUSH
10760: LD_INT 93
10762: PPUSH
10763: LD_INT 100
10765: PPUSH
10766: CALL_OW 297
10770: PUSH
10771: LD_INT 4
10773: LESS
10774: IFFALSE 10748
// SetFuel ( i , 100 ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 100
10783: PPUSH
10784: CALL_OW 240
// end else
10788: GO 10831
// if not IsInArea ( i , ruParkingArea ) then
10790: LD_VAR 0 1
10794: PPUSH
10795: LD_INT 10
10797: PPUSH
10798: CALL_OW 308
10802: NOT
10803: IFFALSE 10819
// ComMoveToArea ( i , ruParkingArea ) else
10805: LD_VAR 0 1
10809: PPUSH
10810: LD_INT 10
10812: PPUSH
10813: CALL_OW 113
10817: GO 10831
// SetTag ( i , 301 ) ;
10819: LD_VAR 0 1
10823: PPUSH
10824: LD_INT 301
10826: PPUSH
10827: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 110
10840: PUSH
10841: LD_INT 301
10843: EQUAL
10844: IFFALSE 10974
// begin if GetLives ( i ) < 1000 then
10846: LD_VAR 0 1
10850: PPUSH
10851: CALL_OW 256
10855: PUSH
10856: LD_INT 1000
10858: LESS
10859: IFFALSE 10951
// begin if not IsDrivenBy ( i ) then
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 311
10870: NOT
10871: IFFALSE 10875
// continue ;
10873: GO 10653
// mech := IsDrivenBy ( i ) ;
10875: LD_ADDR_VAR 0 2
10879: PUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 311
10889: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10890: LD_VAR 0 2
10894: PPUSH
10895: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10899: LD_VAR 0 2
10903: PPUSH
10904: LD_VAR 0 1
10908: PPUSH
10909: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10913: LD_INT 35
10915: PPUSH
10916: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10920: LD_VAR 0 1
10924: PPUSH
10925: CALL_OW 256
10929: PUSH
10930: LD_INT 1000
10932: EQUAL
10933: IFFALSE 10913
// ComEnterUnit ( mech , i ) ;
10935: LD_VAR 0 2
10939: PPUSH
10940: LD_VAR 0 1
10944: PPUSH
10945: CALL_OW 120
// end else
10949: GO 10974
// if IsDrivenBy ( i ) then
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 311
10960: IFFALSE 10974
// SetTag ( i , 0 ) ;
10962: LD_VAR 0 1
10966: PPUSH
10967: LD_INT 0
10969: PPUSH
10970: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL_OW 110
10983: PUSH
10984: LD_INT 300
10986: LESS
10987: IFFALSE 11196
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10989: LD_ADDR_VAR 0 3
10993: PUSH
10994: LD_INT 11
10996: PPUSH
10997: LD_INT 81
10999: PUSH
11000: LD_INT 3
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PPUSH
11007: CALL_OW 70
11011: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11012: LD_VAR 0 1
11016: PPUSH
11017: CALL_OW 256
11021: PUSH
11022: LD_INT 650
11024: LESS
11025: IFFALSE 11050
// begin ComStop ( i ) ;
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL_OW 141
// SetTag ( i , 300 ) ;
11036: LD_VAR 0 1
11040: PPUSH
11041: LD_INT 300
11043: PPUSH
11044: CALL_OW 109
// continue ;
11048: GO 10653
// end ; if enemy then
11050: LD_VAR 0 3
11054: IFFALSE 11094
// begin if not HasTask ( i ) then
11056: LD_VAR 0 1
11060: PPUSH
11061: CALL_OW 314
11065: NOT
11066: IFFALSE 11092
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11068: LD_VAR 0 1
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_VAR 0 1
11082: PPUSH
11083: CALL_OW 74
11087: PPUSH
11088: CALL_OW 115
// end else
11092: GO 11196
// if ruMobile > 1 then
11094: LD_EXP 34
11098: PUSH
11099: LD_INT 1
11101: GREATER
11102: IFFALSE 11196
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
11104: LD_ADDR_VAR 0 3
11108: PUSH
11109: LD_INT 81
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 69
11123: ST_TO_ADDR
// if enemy then
11124: LD_VAR 0 3
11128: IFFALSE 11196
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_INT 116
11137: PUSH
11138: LD_INT 95
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 84
11147: PUSH
11148: LD_INT 68
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 58
11157: PUSH
11158: LD_INT 53
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 44
11167: PUSH
11168: LD_INT 35
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 45
11177: PUSH
11178: LD_INT 23
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PPUSH
11192: CALL 83061 0 2
// end ; end ; end ;
11196: GO 10653
11198: POP
11199: POP
// end ;
11200: PPOPN 3
11202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11203: LD_INT 3
11205: PUSH
11206: LD_INT 22
11208: PUSH
11209: LD_INT 1
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 32
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 69
11238: IFFALSE 11322
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 3
11254: PUSH
11255: LD_INT 22
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 32
11271: PUSH
11272: LD_INT 1
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 69
11287: PUSH
11288: FOR_IN
11289: IFFALSE 11320
// if GetFuel ( i ) < 3 then
11291: LD_VAR 0 1
11295: PPUSH
11296: CALL_OW 261
11300: PUSH
11301: LD_INT 3
11303: LESS
11304: IFFALSE 11318
// SetFuel ( i , 3 ) ;
11306: LD_VAR 0 1
11310: PPUSH
11311: LD_INT 3
11313: PPUSH
11314: CALL_OW 240
11318: GO 11288
11320: POP
11321: POP
// end ;
11322: PPOPN 1
11324: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11325: LD_INT 29
11327: PPUSH
11328: CALL_OW 302
11332: IFFALSE 11347
11334: PUSH
11335: LD_INT 29
11337: PPUSH
11338: CALL_OW 461
11342: PUSH
11343: LD_INT 2
11345: EQUAL
11346: AND
11347: IFFALSE 11586
11349: GO 11351
11351: DISABLE
11352: LD_INT 0
11354: PPUSH
11355: PPUSH
// begin enable ;
11356: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11357: LD_ADDR_VAR 0 1
11361: PUSH
11362: LD_INT 21
11364: PUSH
11365: LD_INT 22
11367: PUSH
11368: LD_INT 23
11370: PUSH
11371: LD_INT 24
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 1
11382: PPUSH
11383: LD_INT 4
11385: PPUSH
11386: CALL_OW 12
11390: ARRAY
11391: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11392: LD_ADDR_VAR 0 2
11396: PUSH
11397: LD_INT 42
11399: PUSH
11400: LD_INT 44
11402: PUSH
11403: LD_INT 43
11405: PUSH
11406: LD_INT 46
11408: PUSH
11409: LD_INT 45
11411: PUSH
11412: LD_INT 46
11414: PUSH
11415: LD_INT 45
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: LD_OWVAR 67
11431: PUSH
11432: LD_INT 0
11434: PPUSH
11435: LD_INT 3
11437: PPUSH
11438: CALL_OW 12
11442: PLUS
11443: ARRAY
11444: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11445: LD_VAR 0 1
11449: PUSH
11450: LD_INT 21
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: IN
11460: IFFALSE 11472
11462: PUSH
11463: LD_VAR 0 2
11467: PUSH
11468: LD_INT 46
11470: EQUAL
11471: AND
11472: IFFALSE 11505
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11474: LD_ADDR_VAR 0 2
11478: PUSH
11479: LD_INT 44
11481: PUSH
11482: LD_INT 45
11484: PUSH
11485: LD_INT 45
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 1
11495: PPUSH
11496: LD_INT 3
11498: PPUSH
11499: CALL_OW 12
11503: ARRAY
11504: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11505: LD_OWVAR 1
11509: PUSH
11510: LD_INT 31500
11512: PUSH
11513: LD_INT 25200
11515: PUSH
11516: LD_INT 21000
11518: PUSH
11519: LD_INT 18900
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_OWVAR 67
11532: ARRAY
11533: LESS
11534: IFFALSE 11563
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11536: LD_ADDR_VAR 0 2
11540: PUSH
11541: LD_INT 44
11543: PUSH
11544: LD_INT 43
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 1
11553: PPUSH
11554: LD_INT 2
11556: PPUSH
11557: CALL_OW 12
11561: ARRAY
11562: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11563: LD_INT 29
11565: PPUSH
11566: LD_VAR 0 1
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: LD_VAR 0 2
11581: PPUSH
11582: CALL_OW 185
// end ;
11586: PPOPN 2
11588: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11589: LD_INT 28
11591: PPUSH
11592: CALL_OW 302
11596: IFFALSE 13200
11598: GO 11600
11600: DISABLE
11601: LD_INT 0
11603: PPUSH
11604: PPUSH
11605: PPUSH
11606: PPUSH
11607: PPUSH
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
// begin enable ;
11616: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11617: LD_ADDR_VAR 0 4
11621: PUSH
11622: LD_INT 12
11624: PPUSH
11625: LD_INT 3
11627: PUSH
11628: LD_INT 24
11630: PUSH
11631: LD_INT 1000
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 21
11644: PUSH
11645: LD_INT 3
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 70
11660: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11661: LD_ADDR_VAR 0 5
11665: PUSH
11666: LD_INT 22
11668: PUSH
11669: LD_INT 3
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 25
11678: PUSH
11679: LD_INT 2
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11695: LD_ADDR_VAR 0 6
11699: PUSH
11700: LD_INT 22
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 34
11712: PUSH
11713: LD_INT 52
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11729: LD_ADDR_VAR 0 8
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_INT 3
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 4
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 69
11762: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11763: LD_ADDR_VAR 0 9
11767: PUSH
11768: LD_INT 81
11770: PPUSH
11771: LD_INT 93
11773: PPUSH
11774: CALL_OW 428
11778: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11779: LD_ADDR_VAR 0 10
11783: PUSH
11784: LD_INT 22
11786: PUSH
11787: LD_INT 3
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 30
11796: PUSH
11797: LD_INT 32
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 50
11806: PUSH
11807: EMPTY
11808: LIST
11809: PUSH
11810: LD_INT 58
11812: PUSH
11813: EMPTY
11814: LIST
11815: PUSH
11816: LD_INT 3
11818: PUSH
11819: LD_INT 120
11821: PUSH
11822: LD_INT 701
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 69
11844: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11845: LD_ADDR_VAR 0 12
11849: PUSH
11850: LD_INT 22
11852: PUSH
11853: LD_INT 3
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 30
11862: PUSH
11863: LD_INT 5
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 50
11872: PUSH
11873: EMPTY
11874: LIST
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: LD_INT 62
11881: PUSH
11882: EMPTY
11883: LIST
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 69
11899: ST_TO_ADDR
// if emptyTowers then
11900: LD_VAR 0 10
11904: IFFALSE 12167
// begin for i in emptyTowers do
11906: LD_ADDR_VAR 0 1
11910: PUSH
11911: LD_VAR 0 10
11915: PUSH
11916: FOR_IN
11917: IFFALSE 12163
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11919: LD_ADDR_VAR 0 11
11923: PUSH
11924: LD_INT 22
11926: PUSH
11927: LD_INT 3
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 2
11936: PUSH
11937: LD_INT 54
11939: PUSH
11940: EMPTY
11941: LIST
11942: PUSH
11943: LD_INT 95
11945: PUSH
11946: LD_INT 12
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 25
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 50
11970: PUSH
11971: EMPTY
11972: LIST
11973: PUSH
11974: LD_INT 3
11976: PUSH
11977: LD_INT 120
11979: PUSH
11980: LD_INT 701
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: PPUSH
11998: CALL_OW 69
12002: ST_TO_ADDR
// if not sol then
12003: LD_VAR 0 11
12007: NOT
12008: IFFALSE 12012
// break ;
12010: GO 12163
// for j in sol do
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_VAR 0 11
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12076
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
12025: LD_VAR 0 2
12029: PPUSH
12030: CALL_OW 310
12034: IFFALSE 12056
12036: PUSH
12037: LD_VAR 0 2
12041: PPUSH
12042: CALL_OW 310
12046: PPUSH
12047: CALL_OW 266
12051: PUSH
12052: LD_INT 32
12054: EQUAL
12055: AND
12056: IFFALSE 12074
// sol := sol diff j ;
12058: LD_ADDR_VAR 0 11
12062: PUSH
12063: LD_VAR 0 11
12067: PUSH
12068: LD_VAR 0 2
12072: DIFF
12073: ST_TO_ADDR
12074: GO 12022
12076: POP
12077: POP
// if not sol then
12078: LD_VAR 0 11
12082: NOT
12083: IFFALSE 12087
// break ;
12085: GO 12163
// if IsInUnit ( sol [ 1 ] ) then
12087: LD_VAR 0 11
12091: PUSH
12092: LD_INT 1
12094: ARRAY
12095: PPUSH
12096: CALL_OW 310
12100: IFFALSE 12115
// ComExit ( sol [ 1 ] ) ;
12102: LD_VAR 0 11
12106: PUSH
12107: LD_INT 1
12109: ARRAY
12110: PPUSH
12111: CALL 80693 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
12115: LD_VAR 0 11
12119: PUSH
12120: LD_INT 1
12122: ARRAY
12123: PPUSH
12124: LD_INT 701
12126: PPUSH
12127: CALL_OW 109
// SetTag ( i , 701 ) ;
12131: LD_VAR 0 1
12135: PPUSH
12136: LD_INT 701
12138: PPUSH
12139: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
12143: LD_VAR 0 11
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: PPUSH
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL_OW 180
// end ;
12161: GO 11916
12163: POP
12164: POP
// end else
12165: GO 12413
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
12167: LD_VAR 0 11
12171: PPUSH
12172: LD_INT 3
12174: PUSH
12175: LD_INT 54
12177: PUSH
12178: EMPTY
12179: LIST
12180: PUSH
12181: LD_INT 95
12183: PUSH
12184: LD_INT 12
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 72
12200: IFFALSE 12413
// begin if barracks then
12202: LD_VAR 0 12
12206: IFFALSE 12274
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12208: LD_ADDR_VAR 0 1
12212: PUSH
12213: LD_VAR 0 11
12217: PPUSH
12218: LD_INT 3
12220: PUSH
12221: LD_INT 54
12223: PUSH
12224: EMPTY
12225: LIST
12226: PUSH
12227: LD_INT 95
12229: PUSH
12230: LD_INT 12
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 72
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12270
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_VAR 0 12
12259: PUSH
12260: LD_INT 1
12262: ARRAY
12263: PPUSH
12264: CALL_OW 120
12268: GO 12247
12270: POP
12271: POP
// end else
12272: GO 12413
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12274: LD_INT 12
12276: PPUSH
12277: LD_INT 81
12279: PUSH
12280: LD_INT 3
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 70
12291: IFFALSE 12413
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12293: LD_ADDR_VAR 0 1
12297: PUSH
12298: LD_VAR 0 11
12302: PPUSH
12303: LD_INT 3
12305: PUSH
12306: LD_INT 54
12308: PUSH
12309: EMPTY
12310: LIST
12311: PUSH
12312: LD_INT 95
12314: PUSH
12315: LD_INT 12
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 72
12331: PUSH
12332: FOR_IN
12333: IFFALSE 12411
// begin SetTag ( i , 702 ) ;
12335: LD_VAR 0 1
12339: PPUSH
12340: LD_INT 702
12342: PPUSH
12343: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12347: LD_ADDR_VAR 0 13
12351: PUSH
12352: LD_INT 12
12354: PPUSH
12355: LD_INT 81
12357: PUSH
12358: LD_INT 3
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 70
12369: PPUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 74
12379: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_VAR 0 13
12389: PPUSH
12390: CALL_OW 250
12394: PPUSH
12395: LD_VAR 0 13
12399: PPUSH
12400: CALL_OW 251
12404: PPUSH
12405: CALL_OW 114
// end ;
12409: GO 12332
12411: POP
12412: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12413: LD_ADDR_VAR 0 3
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 3
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 95
12430: PUSH
12431: LD_INT 11
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 50
12440: PUSH
12441: EMPTY
12442: LIST
12443: PUSH
12444: LD_INT 25
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 120
12456: PUSH
12457: LD_INT 702
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: PPUSH
12471: CALL_OW 69
12475: ST_TO_ADDR
// if tmp then
12476: LD_VAR 0 3
12480: IFFALSE 12526
// for i in tmp do
12482: LD_ADDR_VAR 0 1
12486: PUSH
12487: LD_VAR 0 3
12491: PUSH
12492: FOR_IN
12493: IFFALSE 12524
// begin ComMoveXY ( i , 90 , 94 ) ;
12495: LD_VAR 0 1
12499: PPUSH
12500: LD_INT 90
12502: PPUSH
12503: LD_INT 94
12505: PPUSH
12506: CALL_OW 111
// SetTag ( i , 0 ) ;
12510: LD_VAR 0 1
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL_OW 109
// end ;
12522: GO 12492
12524: POP
12525: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12526: LD_VAR 0 8
12530: IFFALSE 12553
12532: PUSH
12533: LD_VAR 0 5
12537: PPUSH
12538: LD_INT 120
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PPUSH
12548: CALL_OW 72
12552: AND
12553: IFFALSE 12566
// ComExitAll ( sci ) else
12555: LD_VAR 0 8
12559: PPUSH
12560: CALL 80776 0 1
12564: GO 12641
// if sci then
12566: LD_VAR 0 8
12570: IFFALSE 12641
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12572: LD_VAR 0 8
12576: PPUSH
12577: LD_INT 3
12579: PUSH
12580: LD_INT 54
12582: PUSH
12583: EMPTY
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PPUSH
12590: CALL_OW 72
12594: IFFALSE 12607
12596: PUSH
12597: LD_VAR 0 9
12601: PPUSH
12602: CALL_OW 302
12606: AND
12607: IFFALSE 12641
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12609: LD_VAR 0 8
12613: PPUSH
12614: LD_INT 3
12616: PUSH
12617: LD_INT 54
12619: PUSH
12620: EMPTY
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 72
12631: PPUSH
12632: LD_VAR 0 9
12636: PPUSH
12637: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12641: LD_VAR 0 6
12645: PPUSH
12646: LD_INT 50
12648: PUSH
12649: EMPTY
12650: LIST
12651: PPUSH
12652: CALL_OW 72
12656: IFFALSE 12664
12658: PUSH
12659: LD_VAR 0 4
12663: AND
12664: IFFALSE 12695
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12666: LD_VAR 0 6
12670: PPUSH
12671: LD_INT 50
12673: PUSH
12674: EMPTY
12675: LIST
12676: PPUSH
12677: CALL_OW 72
12681: PPUSH
12682: LD_VAR 0 4
12686: PUSH
12687: LD_INT 1
12689: ARRAY
12690: PPUSH
12691: CALL_OW 130
// if eng then
12695: LD_VAR 0 5
12699: IFFALSE 13200
// begin for i in eng do
12701: LD_ADDR_VAR 0 1
12705: PUSH
12706: LD_VAR 0 5
12710: PUSH
12711: FOR_IN
12712: IFFALSE 13198
// begin tag := GetTag ( i ) ;
12714: LD_ADDR_VAR 0 7
12718: PUSH
12719: LD_VAR 0 1
12723: PPUSH
12724: CALL_OW 110
12728: ST_TO_ADDR
// case tag of 0 :
12729: LD_VAR 0 7
12733: PUSH
12734: LD_INT 0
12736: DOUBLE
12737: EQUAL
12738: IFTRUE 12742
12740: GO 12955
12742: POP
// begin if b then
12743: LD_VAR 0 4
12747: IFFALSE 12763
// begin SetTag ( i , 1 ) ;
12749: LD_VAR 0 1
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 109
// continue ;
12761: GO 12711
// end ; if not ruBuildList then
12763: LD_EXP 35
12767: NOT
12768: IFFALSE 12784
// ComEnterUnit ( i , ruDep ) else
12770: LD_VAR 0 1
12774: PPUSH
12775: LD_INT 28
12777: PPUSH
12778: CALL_OW 120
12782: GO 12953
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12784: LD_INT 11
12786: PPUSH
12787: LD_INT 81
12789: PUSH
12790: LD_INT 3
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PPUSH
12797: CALL_OW 70
12801: PUSH
12802: LD_INT 0
12804: EQUAL
12805: IFFALSE 12868
12807: PUSH
12808: LD_INT 28
12810: PPUSH
12811: LD_EXP 35
12815: PUSH
12816: LD_INT 1
12818: ARRAY
12819: PUSH
12820: LD_INT 1
12822: ARRAY
12823: PPUSH
12824: LD_EXP 35
12828: PUSH
12829: LD_INT 1
12831: ARRAY
12832: PUSH
12833: LD_INT 2
12835: ARRAY
12836: PPUSH
12837: LD_EXP 35
12841: PUSH
12842: LD_INT 1
12844: ARRAY
12845: PUSH
12846: LD_INT 3
12848: ARRAY
12849: PPUSH
12850: LD_EXP 35
12854: PUSH
12855: LD_INT 1
12857: ARRAY
12858: PUSH
12859: LD_INT 4
12861: ARRAY
12862: PPUSH
12863: CALL 55803 0 5
12867: AND
12868: IFFALSE 12953
// begin if IsInUnit ( i ) then
12870: LD_VAR 0 1
12874: PPUSH
12875: CALL_OW 310
12879: IFFALSE 12892
// ComExitBuilding ( i ) else
12881: LD_VAR 0 1
12885: PPUSH
12886: CALL_OW 122
12890: GO 12953
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12892: LD_VAR 0 1
12896: PPUSH
12897: LD_EXP 35
12901: PUSH
12902: LD_INT 1
12904: ARRAY
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: PPUSH
12910: LD_EXP 35
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PUSH
12919: LD_INT 2
12921: ARRAY
12922: PPUSH
12923: LD_EXP 35
12927: PUSH
12928: LD_INT 1
12930: ARRAY
12931: PUSH
12932: LD_INT 3
12934: ARRAY
12935: PPUSH
12936: LD_EXP 35
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PUSH
12945: LD_INT 4
12947: ARRAY
12948: PPUSH
12949: CALL_OW 145
// end ; end ; 1 :
12953: GO 13152
12955: LD_INT 1
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 13066
12963: POP
// begin if not b then
12964: LD_VAR 0 4
12968: NOT
12969: IFFALSE 12985
// begin SetTag ( i , 0 ) ;
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_INT 0
12978: PPUSH
12979: CALL_OW 109
// continue ;
12983: GO 12711
// end ; if IsInUnit ( i ) then
12985: LD_VAR 0 1
12989: PPUSH
12990: CALL_OW 310
12994: IFFALSE 13005
// ComExitBuilding ( i ) ;
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 122
// if GetLives ( i ) < 650 then
13005: LD_VAR 0 1
13009: PPUSH
13010: CALL_OW 256
13014: PUSH
13015: LD_INT 650
13017: LESS
13018: IFFALSE 13034
// begin SetTag ( i , 2 ) ;
13020: LD_VAR 0 1
13024: PPUSH
13025: LD_INT 2
13027: PPUSH
13028: CALL_OW 109
// continue ;
13032: GO 12711
// end ; if b then
13034: LD_VAR 0 4
13038: IFFALSE 13064
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_VAR 0 4
13049: PPUSH
13050: LD_VAR 0 1
13054: PPUSH
13055: CALL_OW 74
13059: PPUSH
13060: CALL_OW 130
// end ; 2 :
13064: GO 13152
13066: LD_INT 2
13068: DOUBLE
13069: EQUAL
13070: IFTRUE 13074
13072: GO 13151
13074: POP
// begin if GetLives ( i ) = 1000 then
13075: LD_VAR 0 1
13079: PPUSH
13080: CALL_OW 256
13084: PUSH
13085: LD_INT 1000
13087: EQUAL
13088: IFFALSE 13104
// begin SetTag ( i , 1 ) ;
13090: LD_VAR 0 1
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 109
// continue ;
13102: GO 12711
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
13104: LD_VAR 0 1
13108: PPUSH
13109: LD_INT 84
13111: PPUSH
13112: LD_INT 93
13114: PPUSH
13115: CALL_OW 297
13119: PUSH
13120: LD_INT 6
13122: GREATER
13123: IFFALSE 13149
// begin ComMoveXY ( i , 84 , 93 ) ;
13125: LD_VAR 0 1
13129: PPUSH
13130: LD_INT 84
13132: PPUSH
13133: LD_INT 93
13135: PPUSH
13136: CALL_OW 111
// AddComHold ( i ) ;
13140: LD_VAR 0 1
13144: PPUSH
13145: CALL_OW 200
// end ; end ; end ;
13149: GO 13152
13151: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
13152: LD_VAR 0 1
13156: PPUSH
13157: LD_INT 12
13159: PPUSH
13160: CALL_OW 308
13164: NOT
13165: IFFALSE 13179
13167: PUSH
13168: LD_VAR 0 1
13172: PPUSH
13173: CALL_OW 310
13177: NOT
13178: AND
13179: IFFALSE 13196
// ComMoveXY ( i , 91 , 95 ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_INT 91
13188: PPUSH
13189: LD_INT 95
13191: PPUSH
13192: CALL_OW 111
// end ;
13196: GO 12711
13198: POP
13199: POP
// end ; end ;
13200: PPOPN 13
13202: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
13203: LD_INT 0
13205: PPUSH
13206: PPUSH
13207: PPUSH
13208: PPUSH
13209: PPUSH
13210: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13211: LD_ADDR_VAR 0 3
13215: PUSH
13216: DOUBLE
13217: LD_INT 1
13219: DEC
13220: ST_TO_ADDR
13221: LD_INT 3
13223: PUSH
13224: LD_INT 4
13226: PUSH
13227: LD_INT 5
13229: PUSH
13230: LD_INT 6
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: LD_OWVAR 67
13243: ARRAY
13244: PUSH
13245: LD_VAR 0 1
13249: PLUS
13250: PUSH
13251: FOR_TO
13252: IFFALSE 13571
// begin uc_side := 6 ;
13254: LD_ADDR_OWVAR 20
13258: PUSH
13259: LD_INT 6
13261: ST_TO_ADDR
// uc_nation := 3 ;
13262: LD_ADDR_OWVAR 21
13266: PUSH
13267: LD_INT 3
13269: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13270: LD_ADDR_VAR 0 6
13274: PUSH
13275: LD_INT 21
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_INT 23
13283: PUSH
13284: LD_INT 24
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 1
13295: PPUSH
13296: LD_INT 4
13298: PPUSH
13299: CALL_OW 12
13303: ARRAY
13304: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13305: LD_ADDR_VAR 0 7
13309: PUSH
13310: LD_INT 42
13312: PUSH
13313: LD_INT 44
13315: PUSH
13316: LD_INT 43
13318: PUSH
13319: LD_INT 46
13321: PUSH
13322: LD_INT 45
13324: PUSH
13325: LD_INT 46
13327: PUSH
13328: LD_INT 45
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_OWVAR 67
13344: PUSH
13345: LD_INT 0
13347: PPUSH
13348: LD_INT 3
13350: PPUSH
13351: CALL_OW 12
13355: PLUS
13356: ARRAY
13357: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13358: LD_VAR 0 6
13362: PUSH
13363: LD_INT 21
13365: PUSH
13366: LD_INT 22
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: IN
13373: IFFALSE 13385
13375: PUSH
13376: LD_VAR 0 7
13380: PUSH
13381: LD_INT 46
13383: EQUAL
13384: AND
13385: IFFALSE 13414
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13387: LD_ADDR_VAR 0 7
13391: PUSH
13392: LD_INT 44
13394: PUSH
13395: LD_INT 45
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 1
13404: PPUSH
13405: LD_INT 2
13407: PPUSH
13408: CALL_OW 12
13412: ARRAY
13413: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13414: LD_OWVAR 1
13418: PUSH
13419: LD_INT 31500
13421: PUSH
13422: LD_INT 27300
13424: PUSH
13425: LD_INT 23100
13427: PUSH
13428: LD_INT 18900
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: PUSH
13437: LD_OWVAR 67
13441: ARRAY
13442: LESS
13443: IFFALSE 13476
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13445: LD_ADDR_VAR 0 7
13449: PUSH
13450: LD_INT 44
13452: PUSH
13453: LD_INT 43
13455: PUSH
13456: LD_INT 42
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 1
13466: PPUSH
13467: LD_INT 3
13469: PPUSH
13470: CALL_OW 12
13474: ARRAY
13475: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13476: LD_VAR 0 6
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: LD_INT 3
13486: PPUSH
13487: LD_VAR 0 7
13491: PPUSH
13492: LD_INT 90
13494: PPUSH
13495: CALL 47125 0 5
// un := CreateVehicle ;
13499: LD_ADDR_VAR 0 4
13503: PUSH
13504: CALL_OW 45
13508: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13509: LD_VAR 0 4
13513: PPUSH
13514: LD_INT 140
13516: PPUSH
13517: LD_INT 146
13519: PPUSH
13520: LD_INT 0
13522: PPUSH
13523: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13527: LD_VAR 0 4
13531: PPUSH
13532: LD_INT 131
13534: PPUSH
13535: LD_INT 128
13537: PPUSH
13538: CALL_OW 111
// wait ( 0 0$3 ) ;
13542: LD_INT 105
13544: PPUSH
13545: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13549: LD_ADDR_VAR 0 5
13553: PUSH
13554: LD_VAR 0 5
13558: PPUSH
13559: LD_VAR 0 4
13563: PPUSH
13564: CALL 80295 0 2
13568: ST_TO_ADDR
// end ;
13569: GO 13251
13571: POP
13572: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13573: LD_ADDR_EXP 36
13577: PUSH
13578: LD_EXP 36
13582: PPUSH
13583: LD_VAR 0 5
13587: PPUSH
13588: CALL 80332 0 2
13592: ST_TO_ADDR
// end ;
13593: LD_VAR 0 2
13597: RET
// every 0 0$3 trigger russianAttackers do
13598: LD_EXP 36
13602: IFFALSE 13685
13604: GO 13606
13606: DISABLE
// begin enable ;
13607: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13608: LD_EXP 36
13612: PPUSH
13613: LD_INT 126
13615: PUSH
13616: LD_INT 108
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 107
13625: PUSH
13626: LD_INT 85
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 82
13635: PUSH
13636: LD_INT 62
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 73
13645: PUSH
13646: LD_INT 46
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 62
13655: PUSH
13656: LD_INT 31
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 52
13665: PUSH
13666: LD_INT 17
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL 83061 0 2
// end ;
13685: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13686: LD_OWVAR 67
13690: PUSH
13691: LD_INT 2
13693: GREATER
13694: IFFALSE 13737
13696: PUSH
13697: LD_INT 22
13699: PUSH
13700: LD_INT 6
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 21
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 50
13719: PUSH
13720: EMPTY
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 69
13732: PUSH
13733: LD_INT 0
13735: EQUAL
13736: AND
13737: IFFALSE 13791
13739: GO 13741
13741: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13742: LD_INT 51
13744: PPUSH
13745: LD_INT 6
13747: PPUSH
13748: LD_INT 2
13750: PPUSH
13751: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13755: LD_INT 57
13757: PPUSH
13758: LD_INT 6
13760: PPUSH
13761: LD_INT 2
13763: PPUSH
13764: CALL_OW 322
// if Difficulty > 3 then
13768: LD_OWVAR 67
13772: PUSH
13773: LD_INT 3
13775: GREATER
13776: IFFALSE 13791
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13778: LD_INT 52
13780: PPUSH
13781: LD_INT 6
13783: PPUSH
13784: LD_INT 2
13786: PPUSH
13787: CALL_OW 322
// end ; end_of_file
13791: END
// on SailEvent ( event ) do begin if event = 1 then
13792: LD_VAR 0 1
13796: PUSH
13797: LD_INT 1
13799: EQUAL
13800: IFFALSE 13830
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13802: LD_INT 2
13804: PUSH
13805: LD_INT 4
13807: PUSH
13808: LD_INT 6
13810: PUSH
13811: LD_INT 8
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: PUSH
13820: LD_OWVAR 67
13824: ARRAY
13825: PPUSH
13826: CALL 13203 0 1
// end ;
13830: PPOPN 1
13832: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13833: LD_VAR 0 1
13837: PUSH
13838: LD_EXP 28
13842: EQUAL
13843: IFFALSE 13855
13845: PUSH
13846: LD_VAR 0 2
13850: PUSH
13851: LD_INT 1
13853: EQUAL
13854: AND
13855: IFFALSE 13861
// SikorskiKilledInAction ;
13857: CALL 19046 0 0
// end ;
13861: PPOPN 3
13863: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13864: LD_INT 0
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13871: LD_VAR 0 1
13875: PPUSH
13876: CALL 36737 0 1
// if un = JMM then
13880: LD_VAR 0 1
13884: PUSH
13885: LD_EXP 14
13889: EQUAL
13890: IFFALSE 13899
// YouLost ( JMM ) ;
13892: LD_STRING JMM
13894: PPUSH
13895: CALL_OW 104
// if un = Sikorski then
13899: LD_VAR 0 1
13903: PUSH
13904: LD_EXP 28
13908: EQUAL
13909: IFFALSE 13935
// if sikorskiStatus = 0 then
13911: LD_EXP 9
13915: PUSH
13916: LD_INT 0
13918: EQUAL
13919: IFFALSE 13927
// SikorskiKilledInAction else
13921: CALL 19046 0 0
13925: GO 13935
// sikorskiIsKilled := true ;
13927: LD_ADDR_EXP 10
13931: PUSH
13932: LD_INT 1
13934: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13935: LD_VAR 0 1
13939: PPUSH
13940: CALL_OW 255
13944: PUSH
13945: LD_INT 1
13947: EQUAL
13948: IFFALSE 13965
13950: PUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 248
13960: PUSH
13961: LD_INT 1
13963: EQUAL
13964: AND
13965: IFFALSE 13989
13967: PUSH
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 266
13977: PUSH
13978: LD_INT 0
13980: PUSH
13981: LD_INT 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: IN
13988: AND
13989: IFFALSE 13998
// YouLost ( Destroyed ) ;
13991: LD_STRING Destroyed
13993: PPUSH
13994: CALL_OW 104
// if un = ruDep then
13998: LD_VAR 0 1
14002: PUSH
14003: LD_INT 28
14005: EQUAL
14006: IFFALSE 14140
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
14008: LD_ADDR_VAR 0 2
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_INT 3
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 1
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PPUSH
14037: CALL_OW 69
14041: PUSH
14042: FOR_IN
14043: IFFALSE 14138
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_INT 11
14052: PPUSH
14053: LD_INT 81
14055: PUSH
14056: LD_INT 3
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PPUSH
14063: CALL_OW 70
14067: PPUSH
14068: LD_VAR 0 2
14072: PPUSH
14073: CALL_OW 74
14077: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
14078: LD_VAR 0 2
14082: PPUSH
14083: CALL_OW 310
14087: PPUSH
14088: CALL_OW 266
14092: PUSH
14093: LD_INT 32
14095: EQUAL
14096: IFFALSE 14136
// begin ComExitBuilding ( i ) ;
14098: LD_VAR 0 2
14102: PPUSH
14103: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
14107: LD_VAR 0 2
14111: PPUSH
14112: LD_VAR 0 3
14116: PPUSH
14117: CALL_OW 250
14121: PPUSH
14122: LD_VAR 0 3
14126: PPUSH
14127: CALL_OW 251
14131: PPUSH
14132: CALL_OW 174
// end ; end ;
14136: GO 14042
14138: POP
14139: POP
// end ; if un in ruMobile then
14140: LD_VAR 0 1
14144: PUSH
14145: LD_EXP 34
14149: IN
14150: IFFALSE 14168
// ruMobile := ruMobile diff un ;
14152: LD_ADDR_EXP 34
14156: PUSH
14157: LD_EXP 34
14161: PUSH
14162: LD_VAR 0 1
14166: DIFF
14167: ST_TO_ADDR
// if GetSide ( un ) = 3 then
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 255
14177: PUSH
14178: LD_INT 3
14180: EQUAL
14181: IFFALSE 14824
// begin if GetType ( un ) = unit_building then
14183: LD_VAR 0 1
14187: PPUSH
14188: CALL_OW 247
14192: PUSH
14193: LD_INT 3
14195: EQUAL
14196: IFFALSE 14332
// begin btype := GetBType ( un ) ;
14198: LD_ADDR_VAR 0 6
14202: PUSH
14203: LD_VAR 0 1
14207: PPUSH
14208: CALL_OW 266
14212: ST_TO_ADDR
// if btype = b_warehouse then
14213: LD_VAR 0 6
14217: PUSH
14218: LD_INT 1
14220: EQUAL
14221: IFFALSE 14231
// btype := b_depot ;
14223: LD_ADDR_VAR 0 6
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// if btype = b_barracks then
14231: LD_VAR 0 6
14235: PUSH
14236: LD_INT 5
14238: EQUAL
14239: IFFALSE 14249
// btype := b_armoury ;
14241: LD_ADDR_VAR 0 6
14245: PUSH
14246: LD_INT 4
14248: ST_TO_ADDR
// if btype = b_lab_full then
14249: LD_VAR 0 6
14253: PUSH
14254: LD_INT 8
14256: EQUAL
14257: IFFALSE 14267
// btype := b_lab ;
14259: LD_ADDR_VAR 0 6
14263: PUSH
14264: LD_INT 6
14266: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14267: LD_ADDR_EXP 35
14271: PUSH
14272: LD_EXP 35
14276: PPUSH
14277: LD_EXP 35
14281: PUSH
14282: LD_INT 1
14284: PLUS
14285: PPUSH
14286: LD_VAR 0 6
14290: PUSH
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 250
14300: PUSH
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 251
14310: PUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 254
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 1
14331: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 247
14341: PUSH
14342: LD_INT 2
14344: EQUAL
14345: IFFALSE 14626
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14347: LD_VAR 0 1
14351: PPUSH
14352: CALL_OW 264
14356: PUSH
14357: LD_INT 52
14359: PUSH
14360: LD_INT 51
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: IN
14367: IFFALSE 14397
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14369: LD_INT 29
14371: PPUSH
14372: LD_INT 22
14374: PPUSH
14375: LD_INT 1
14377: PPUSH
14378: LD_INT 3
14380: PPUSH
14381: LD_VAR 0 1
14385: PPUSH
14386: CALL_OW 264
14390: PPUSH
14391: CALL_OW 185
// end else
14395: GO 14626
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14397: LD_ADDR_VAR 0 4
14401: PUSH
14402: LD_INT 21
14404: PUSH
14405: LD_INT 22
14407: PUSH
14408: LD_INT 23
14410: PUSH
14411: LD_INT 24
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 1
14422: PPUSH
14423: LD_INT 4
14425: PPUSH
14426: CALL_OW 12
14430: ARRAY
14431: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14432: LD_ADDR_VAR 0 5
14436: PUSH
14437: LD_INT 42
14439: PUSH
14440: LD_INT 44
14442: PUSH
14443: LD_INT 43
14445: PUSH
14446: LD_INT 46
14448: PUSH
14449: LD_INT 45
14451: PUSH
14452: LD_INT 46
14454: PUSH
14455: LD_INT 45
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: PUSH
14467: LD_OWVAR 67
14471: PUSH
14472: LD_INT 0
14474: PPUSH
14475: LD_INT 3
14477: PPUSH
14478: CALL_OW 12
14482: PLUS
14483: ARRAY
14484: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14485: LD_VAR 0 4
14489: PUSH
14490: LD_INT 21
14492: PUSH
14493: LD_INT 22
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: IN
14500: IFFALSE 14512
14502: PUSH
14503: LD_VAR 0 5
14507: PUSH
14508: LD_INT 46
14510: EQUAL
14511: AND
14512: IFFALSE 14545
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
14514: LD_ADDR_VAR 0 5
14518: PUSH
14519: LD_INT 44
14521: PUSH
14522: LD_INT 45
14524: PUSH
14525: LD_INT 45
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 1
14535: PPUSH
14536: LD_INT 3
14538: PPUSH
14539: CALL_OW 12
14543: ARRAY
14544: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14545: LD_OWVAR 1
14549: PUSH
14550: LD_INT 31500
14552: PUSH
14553: LD_INT 27300
14555: PUSH
14556: LD_INT 23100
14558: PUSH
14559: LD_INT 21000
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_OWVAR 67
14572: ARRAY
14573: LESS
14574: IFFALSE 14603
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14576: LD_ADDR_VAR 0 5
14580: PUSH
14581: LD_INT 44
14583: PUSH
14584: LD_INT 43
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 1
14593: PPUSH
14594: LD_INT 2
14596: PPUSH
14597: CALL_OW 12
14601: ARRAY
14602: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14603: LD_INT 29
14605: PPUSH
14606: LD_VAR 0 4
14610: PPUSH
14611: LD_INT 1
14613: PPUSH
14614: LD_INT 1
14616: PPUSH
14617: LD_VAR 0 5
14621: PPUSH
14622: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL_OW 257
14635: PUSH
14636: LD_INT 3
14638: EQUAL
14639: IFFALSE 14824
// begin killMechCounter := Inc ( killMechCounter ) ;
14641: LD_ADDR_EXP 12
14645: PUSH
14646: LD_EXP 12
14650: PPUSH
14651: CALL 81668 0 1
14655: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14656: LD_EXP 33
14660: PUSH
14661: LD_INT 0
14663: EQUAL
14664: IFTRUE 14676
14666: PUSH
14667: LD_INT 29
14669: PPUSH
14670: CALL_OW 302
14674: NOT
14675: OR
14676: IFFALSE 14680
// exit ;
14678: GO 14824
// ruMechCounter := Dec ( ruMechCounter ) ;
14680: LD_ADDR_EXP 33
14684: PUSH
14685: LD_EXP 33
14689: PPUSH
14690: CALL 81690 0 1
14694: ST_TO_ADDR
// uc_side := 3 ;
14695: LD_ADDR_OWVAR 20
14699: PUSH
14700: LD_INT 3
14702: ST_TO_ADDR
// uc_nation := 3 ;
14703: LD_ADDR_OWVAR 21
14707: PUSH
14708: LD_INT 3
14710: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14711: LD_INT 0
14713: PPUSH
14714: LD_INT 5
14716: PUSH
14717: LD_INT 6
14719: PUSH
14720: LD_INT 7
14722: PUSH
14723: LD_INT 8
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: LD_OWVAR 67
14736: ARRAY
14737: PPUSH
14738: CALL_OW 383
// tmp := CreateHuman ;
14742: LD_ADDR_VAR 0 3
14746: PUSH
14747: CALL_OW 44
14751: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14752: LD_VAR 0 3
14756: PPUSH
14757: LD_INT 145
14759: PPUSH
14760: LD_INT 133
14762: PPUSH
14763: LD_INT 0
14765: PPUSH
14766: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14770: LD_VAR 0 3
14774: PPUSH
14775: LD_INT 29
14777: PPUSH
14778: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14782: LD_INT 35
14784: PPUSH
14785: CALL_OW 67
// if not HasTask ( tmp ) then
14789: LD_VAR 0 3
14793: PPUSH
14794: CALL_OW 314
14798: NOT
14799: IFFALSE 14813
// ComEnterUnit ( tmp , ruFac ) ;
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 29
14808: PPUSH
14809: CALL_OW 120
// until IsInUnit ( tmp ) ;
14813: LD_VAR 0 3
14817: PPUSH
14818: CALL_OW 310
14822: IFFALSE 14782
// end ; end ; end ;
14824: PPOPN 6
14826: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 255
14836: PUSH
14837: LD_INT 4
14839: EQUAL
14840: IFFALSE 14857
// ComMoveXY ( driver , 40 , 47 ) ;
14842: LD_VAR 0 1
14846: PPUSH
14847: LD_INT 40
14849: PPUSH
14850: LD_INT 47
14852: PPUSH
14853: CALL_OW 111
// if GetSide ( driver ) = 3 then
14857: LD_VAR 0 1
14861: PPUSH
14862: CALL_OW 255
14866: PUSH
14867: LD_INT 3
14869: EQUAL
14870: IFFALSE 15092
// begin ComMoveXY ( driver , 90 , 97 ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_INT 90
14879: PPUSH
14880: LD_INT 97
14882: PPUSH
14883: CALL_OW 111
// if IsOk ( ruFac ) then
14887: LD_INT 29
14889: PPUSH
14890: CALL_OW 302
14894: IFFALSE 15014
// begin repeat wait ( 0 0$1 ) ;
14896: LD_INT 35
14898: PPUSH
14899: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14903: LD_INT 29
14905: PPUSH
14906: CALL_OW 313
14910: PUSH
14911: LD_INT 6
14913: LESS
14914: IFTRUE 14927
14916: PUSH
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 301
14926: OR
14927: IFFALSE 14896
// if IsDead ( driver ) then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 301
14938: IFFALSE 14942
// exit ;
14940: GO 15092
// repeat wait ( 0 0$10 ) ;
14942: LD_INT 350
14944: PPUSH
14945: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 314
14958: NOT
14959: IFFALSE 14974
14961: PUSH
14962: LD_INT 29
14964: PPUSH
14965: CALL_OW 313
14969: PUSH
14970: LD_INT 6
14972: LESS
14973: AND
14974: IFFALSE 14988
// ComEnterUnit ( driver , ruFac ) ;
14976: LD_VAR 0 1
14980: PPUSH
14981: LD_INT 29
14983: PPUSH
14984: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL_OW 301
14997: IFTRUE 15010
14999: PUSH
15000: LD_VAR 0 1
15004: PPUSH
15005: CALL_OW 310
15009: OR
15010: IFFALSE 14942
// end else
15012: GO 15092
// begin ComMoveXY ( driver , 142 , 148 ) ;
15014: LD_VAR 0 1
15018: PPUSH
15019: LD_INT 142
15021: PPUSH
15022: LD_INT 148
15024: PPUSH
15025: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15029: LD_INT 35
15031: PPUSH
15032: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 301
15045: IFTRUE 15064
15047: PUSH
15048: LD_VAR 0 1
15052: PPUSH
15053: LD_INT 142
15055: PPUSH
15056: LD_INT 148
15058: PPUSH
15059: CALL_OW 307
15063: OR
15064: IFFALSE 15029
// if IsAt ( driver , 142 , 148 ) then
15066: LD_VAR 0 1
15070: PPUSH
15071: LD_INT 142
15073: PPUSH
15074: LD_INT 148
15076: PPUSH
15077: CALL_OW 307
15081: IFFALSE 15092
// RemoveUnit ( driver ) ;
15083: LD_VAR 0 1
15087: PPUSH
15088: CALL_OW 64
// end ; end ; end ;
15092: PPOPN 4
15094: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
15095: LD_VAR 0 2
15099: PPUSH
15100: CALL_OW 257
15104: PUSH
15105: LD_INT 3
15107: EQUAL
15108: IFFALSE 15125
15110: PUSH
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 255
15120: PUSH
15121: LD_INT 3
15123: EQUAL
15124: AND
15125: IFFALSE 15137
15127: PUSH
15128: LD_VAR 0 1
15132: PUSH
15133: LD_INT 29
15135: EQUAL
15136: AND
15137: IFFALSE 15151
// SetLives ( un , 1000 ) ;
15139: LD_VAR 0 2
15143: PPUSH
15144: LD_INT 1000
15146: PPUSH
15147: CALL_OW 234
// if GetTag ( b ) = 701 then
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 110
15160: PUSH
15161: LD_INT 701
15163: EQUAL
15164: IFFALSE 15190
// begin SetTag ( b , 0 ) ;
15166: LD_VAR 0 1
15170: PPUSH
15171: LD_INT 0
15173: PPUSH
15174: CALL_OW 109
// SetTag ( un , 0 ) ;
15178: LD_VAR 0 2
15182: PPUSH
15183: LD_INT 0
15185: PPUSH
15186: CALL_OW 109
// end ; end ;
15190: PPOPN 2
15192: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 255
15202: PUSH
15203: LD_INT 3
15205: PUSH
15206: LD_INT 6
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: IN
15213: IFFALSE 15230
15215: PUSH
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 263
15225: PUSH
15226: LD_INT 3
15228: EQUAL
15229: AND
15230: IFFALSE 15239
15232: PUSH
15233: LD_EXP 7
15237: NOT
15238: AND
15239: IFFALSE 15258
// begin seenComputer := true ;
15241: LD_ADDR_EXP 7
15245: PUSH
15246: LD_INT 1
15248: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: CALL 18223 0 1
// end ; end ;
15258: PPOPN 1
15260: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15261: LD_INT 0
15263: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15264: LD_VAR 0 1
15268: PPUSH
15269: LD_VAR 0 2
15273: PPUSH
15274: CALL 36795 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 255
15287: PUSH
15288: LD_INT 3
15290: EQUAL
15291: IFFALSE 15308
15293: PUSH
15294: LD_VAR 0 1
15298: PPUSH
15299: CALL_OW 263
15303: PUSH
15304: LD_INT 1
15306: EQUAL
15307: AND
15308: IFFALSE 15344
15310: PUSH
15311: LD_VAR 0 1
15315: PPUSH
15316: CALL_OW 264
15320: PUSH
15321: LD_INT 42
15323: PUSH
15324: LD_INT 43
15326: PUSH
15327: LD_INT 44
15329: PUSH
15330: LD_INT 46
15332: PUSH
15333: LD_INT 45
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: IN
15343: AND
15344: IFFALSE 15374
// begin SetTag ( vehicle , 300 ) ;
15346: LD_VAR 0 1
15350: PPUSH
15351: LD_INT 300
15353: PPUSH
15354: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15358: LD_ADDR_EXP 34
15362: PUSH
15363: LD_EXP 34
15367: PUSH
15368: LD_VAR 0 1
15372: UNION
15373: ST_TO_ADDR
// end ; end ;
15374: PPOPN 3
15376: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15377: LD_INT 0
15379: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15380: LD_VAR 0 2
15384: PPUSH
15385: LD_VAR 0 3
15389: PPUSH
15390: LD_INT 13
15392: PPUSH
15393: CALL_OW 309
15397: IFFALSE 15530
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15399: LD_ADDR_VAR 0 6
15403: PUSH
15404: LD_INT 22
15406: PUSH
15407: LD_INT 3
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 50
15416: PUSH
15417: EMPTY
15418: LIST
15419: PUSH
15420: LD_INT 34
15422: PUSH
15423: LD_INT 51
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: PPUSH
15435: CALL_OW 69
15439: ST_TO_ADDR
// if not cargo then
15440: LD_VAR 0 6
15444: NOT
15445: IFFALSE 15449
// exit ;
15447: GO 15530
// wait ( 0 0$5 ) ;
15449: LD_INT 175
15451: PPUSH
15452: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15456: LD_VAR 0 6
15460: PUSH
15461: LD_INT 1
15463: ARRAY
15464: PPUSH
15465: LD_INT 28
15467: PPUSH
15468: CALL_OW 296
15472: PUSH
15473: LD_INT 6
15475: LESS
15476: IFFALSE 15497
15478: PUSH
15479: LD_VAR 0 6
15483: PUSH
15484: LD_INT 1
15486: ARRAY
15487: PPUSH
15488: CALL_OW 261
15492: PUSH
15493: LD_INT 50
15495: LESS
15496: AND
15497: IFFALSE 15511
// ComMoveUnit ( cargo , ruDep ) ;
15499: LD_VAR 0 6
15503: PPUSH
15504: LD_INT 28
15506: PPUSH
15507: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15511: LD_VAR 0 6
15515: PPUSH
15516: LD_VAR 0 2
15520: PPUSH
15521: LD_VAR 0 3
15525: PPUSH
15526: CALL_OW 177
// end ; end ;
15530: PPOPN 6
15532: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 264
15542: PUSH
15543: LD_INT 45
15545: EQUAL
15546: IFFALSE 15563
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15548: LD_ADDR_EXP 11
15552: PUSH
15553: LD_EXP 11
15557: PPUSH
15558: CALL 81668 0 1
15562: ST_TO_ADDR
// end ;
15563: PPOPN 4
15565: END
// on BuildingComplete ( b ) do var i , tmp ;
15566: LD_INT 0
15568: PPUSH
15569: PPUSH
// begin if GetSide ( b ) = 3 then
15570: LD_VAR 0 1
15574: PPUSH
15575: CALL_OW 255
15579: PUSH
15580: LD_INT 3
15582: EQUAL
15583: IFFALSE 15680
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15585: LD_ADDR_EXP 35
15589: PUSH
15590: LD_EXP 35
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: CALL_OW 3
15602: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL_OW 266
15612: PUSH
15613: LD_INT 4
15615: EQUAL
15616: IFFALSE 15627
// ComUpgrade ( b ) ;
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL_OW 266
15636: PUSH
15637: LD_INT 32
15639: PUSH
15640: LD_INT 33
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: IN
15647: IFFALSE 15680
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15649: LD_VAR 0 1
15653: PPUSH
15654: LD_INT 46
15656: PUSH
15657: LD_INT 45
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 1
15666: PPUSH
15667: LD_INT 2
15669: PPUSH
15670: CALL_OW 12
15674: ARRAY
15675: PPUSH
15676: CALL_OW 208
// end ; end ; end_of_file
15680: PPOPN 3
15682: END
// export function Action ; var i , tmp , un , inUnit ; begin
15683: LD_INT 0
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
15689: PPUSH
// Video ( true ) ;
15690: LD_INT 1
15692: PPUSH
15693: CALL 80267 0 1
// invincibleMode := true ;
15697: LD_ADDR_EXP 5
15701: PUSH
15702: LD_INT 1
15704: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15705: LD_INT 50
15707: PPUSH
15708: LD_INT 12
15710: PPUSH
15711: LD_INT 1
15713: PPUSH
15714: LD_INT 56
15716: NEG
15717: PPUSH
15718: CALL 80179 0 4
// CenterOnXY ( 50 , 12 ) ;
15722: LD_INT 50
15724: PPUSH
15725: LD_INT 12
15727: PPUSH
15728: CALL_OW 84
// wait ( 0 0$3 ) ;
15732: LD_INT 105
15734: PPUSH
15735: CALL_OW 67
// PrepareStartRussianAttack ;
15739: CALL 10198 0 0
// CenterOnXY ( 66 , 47 ) ;
15743: LD_INT 66
15745: PPUSH
15746: LD_INT 47
15748: PPUSH
15749: CALL_OW 84
// wait ( 0 0$5 ) ;
15753: LD_INT 175
15755: PPUSH
15756: CALL_OW 67
// case gammaCommander of 1 :
15760: LD_EXP 13
15764: PUSH
15765: LD_INT 1
15767: DOUBLE
15768: EQUAL
15769: IFTRUE 15773
15771: GO 15788
15773: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15774: LD_EXP 16
15778: PPUSH
15779: LD_STRING D1-Don-1
15781: PPUSH
15782: CALL_OW 88
15786: GO 15835
15788: LD_INT 2
15790: DOUBLE
15791: EQUAL
15792: IFTRUE 15796
15794: GO 15811
15796: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15797: LD_EXP 15
15801: PPUSH
15802: LD_STRING D1-Brown-1
15804: PPUSH
15805: CALL_OW 88
15809: GO 15835
15811: LD_INT 3
15813: DOUBLE
15814: EQUAL
15815: IFTRUE 15819
15817: GO 15834
15819: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15820: LD_EXP 25
15824: PPUSH
15825: LD_STRING D1-VanH-1
15827: PPUSH
15828: CALL_OW 88
15832: GO 15835
15834: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_INT 22
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 33
15852: PUSH
15853: LD_INT 2
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 61
15862: PUSH
15863: EMPTY
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 69
15875: ST_TO_ADDR
// if tmp then
15876: LD_VAR 0 3
15880: IFFALSE 15897
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 74
15889: PPUSH
15890: LD_INT 44
15892: PPUSH
15893: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15897: LD_ADDR_VAR 0 3
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 25
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: PUSH
15931: LD_EXP 16
15935: PUSH
15936: LD_EXP 15
15940: PUSH
15941: LD_EXP 25
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: DIFF
15951: ST_TO_ADDR
// if tmp then
15952: LD_VAR 0 3
15956: IFFALSE 16036
// for i in tmp do
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: LD_VAR 0 3
15967: PUSH
15968: FOR_IN
15969: IFFALSE 16034
// begin inUnit := IsInUnit ( i ) ;
15971: LD_ADDR_VAR 0 5
15975: PUSH
15976: LD_VAR 0 2
15980: PPUSH
15981: CALL_OW 310
15985: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15986: LD_VAR 0 5
15990: IFFALSE 16014
15992: PUSH
15993: LD_VAR 0 5
15997: PPUSH
15998: CALL_OW 266
16002: PUSH
16003: LD_INT 32
16005: PUSH
16006: LD_INT 31
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: IN
16013: AND
16014: IFFALSE 16032
// tmp := tmp diff i ;
16016: LD_ADDR_VAR 0 3
16020: PUSH
16021: LD_VAR 0 3
16025: PUSH
16026: LD_VAR 0 2
16030: DIFF
16031: ST_TO_ADDR
// end ;
16032: GO 15968
16034: POP
16035: POP
// if tmp then
16036: LD_VAR 0 3
16040: IFFALSE 16130
// begin ComExitAll ( tmp ) ;
16042: LD_VAR 0 3
16046: PPUSH
16047: CALL 80776 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
16051: LD_VAR 0 3
16055: PPUSH
16056: LD_INT 74
16058: PPUSH
16059: LD_INT 44
16061: PPUSH
16062: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
16066: LD_ADDR_VAR 0 3
16070: PUSH
16071: LD_INT 22
16073: PUSH
16074: LD_INT 1
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 25
16083: PUSH
16084: LD_INT 4
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PPUSH
16095: CALL_OW 69
16099: ST_TO_ADDR
// if tmp then
16100: LD_VAR 0 3
16104: IFFALSE 16130
// begin ComExitAll ( tmp ) ;
16106: LD_VAR 0 3
16110: PPUSH
16111: CALL 80776 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
16115: LD_VAR 0 3
16119: PPUSH
16120: LD_INT 66
16122: PPUSH
16123: LD_INT 28
16125: PPUSH
16126: CALL_OW 171
// end ; end ; game_speed := 4 ;
16130: LD_ADDR_OWVAR 65
16134: PUSH
16135: LD_INT 4
16137: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16138: LD_INT 70
16140: PPUSH
16141: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
16145: LD_EXP 29
16149: PPUSH
16150: LD_STRING D1-Har-1
16152: PPUSH
16153: CALL_OW 94
// case gammaCommander of 1 :
16157: LD_EXP 13
16161: PUSH
16162: LD_INT 1
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16170
16168: GO 16185
16170: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
16171: LD_EXP 16
16175: PPUSH
16176: LD_STRING D1-Don-2
16178: PPUSH
16179: CALL_OW 88
16183: GO 16232
16185: LD_INT 2
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16208
16193: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
16194: LD_EXP 15
16198: PPUSH
16199: LD_STRING D1-Brown-2
16201: PPUSH
16202: CALL_OW 88
16206: GO 16232
16208: LD_INT 3
16210: DOUBLE
16211: EQUAL
16212: IFTRUE 16216
16214: GO 16231
16216: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
16217: LD_EXP 25
16221: PPUSH
16222: LD_STRING D1-VanH-2
16224: PPUSH
16225: CALL_OW 88
16229: GO 16232
16231: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
16232: LD_EXP 29
16236: PPUSH
16237: LD_STRING D1-Har-2
16239: PPUSH
16240: CALL_OW 94
// invincibleMode := false ;
16244: LD_ADDR_EXP 5
16248: PUSH
16249: LD_INT 0
16251: ST_TO_ADDR
// Video ( false ) ;
16252: LD_INT 0
16254: PPUSH
16255: CALL 80267 0 1
// ChangeMissionObjectives ( M1 ) ;
16259: LD_STRING M1
16261: PPUSH
16262: CALL_OW 337
// SaveForQuickRestart ;
16266: CALL_OW 22
// wait ( 2 2$30 ) ;
16270: LD_INT 5250
16272: PPUSH
16273: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16277: LD_INT 1
16279: PPUSH
16280: CALL 13203 0 1
// wait ( 4 4$30 ) ;
16284: LD_INT 9450
16286: PPUSH
16287: CALL_OW 67
// if Difficulty > 1 then
16291: LD_OWVAR 67
16295: PUSH
16296: LD_INT 1
16298: GREATER
16299: IFFALSE 16308
// PrepareRussianAttack ( 2 ) ;
16301: LD_INT 2
16303: PPUSH
16304: CALL 13203 0 1
// if Difficulty > 2 then
16308: LD_OWVAR 67
16312: PUSH
16313: LD_INT 2
16315: GREATER
16316: IFFALSE 16475
// begin for i := 1 to 4 do
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: DOUBLE
16324: LD_INT 1
16326: DEC
16327: ST_TO_ADDR
16328: LD_INT 4
16330: PUSH
16331: FOR_TO
16332: IFFALSE 16417
// begin uc_side := 6 ;
16334: LD_ADDR_OWVAR 20
16338: PUSH
16339: LD_INT 6
16341: ST_TO_ADDR
// uc_nation := 3 ;
16342: LD_ADDR_OWVAR 21
16346: PUSH
16347: LD_INT 3
16349: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16350: LD_INT 0
16352: PPUSH
16353: LD_INT 7
16355: PPUSH
16356: CALL_OW 381
// un := CreateHuman ;
16360: LD_ADDR_VAR 0 4
16364: PUSH
16365: CALL_OW 44
16369: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16370: LD_VAR 0 4
16374: PPUSH
16375: LD_INT 122
16377: PPUSH
16378: LD_INT 89
16380: PPUSH
16381: LD_INT 3
16383: PPUSH
16384: LD_INT 0
16386: PPUSH
16387: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16391: LD_VAR 0 4
16395: PPUSH
16396: LD_INT 88
16398: PPUSH
16399: LD_INT 42
16401: PPUSH
16402: CALL_OW 114
// AddComHold ( un ) ;
16406: LD_VAR 0 4
16410: PPUSH
16411: CALL_OW 200
// end ;
16415: GO 16331
16417: POP
16418: POP
// PrepareScientist ( false , 6 ) ;
16419: LD_INT 0
16421: PPUSH
16422: LD_INT 6
16424: PPUSH
16425: CALL_OW 384
// un := CreateHuman ;
16429: LD_ADDR_VAR 0 4
16433: PUSH
16434: CALL_OW 44
16438: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16439: LD_VAR 0 4
16443: PPUSH
16444: LD_INT 122
16446: PPUSH
16447: LD_INT 89
16449: PPUSH
16450: LD_INT 3
16452: PPUSH
16453: LD_INT 0
16455: PPUSH
16456: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16460: LD_VAR 0 4
16464: PPUSH
16465: LD_INT 91
16467: PPUSH
16468: LD_INT 48
16470: PPUSH
16471: CALL_OW 111
// end ; end ;
16475: LD_VAR 0 1
16479: RET
// every 0 0$1 trigger invincibleMode do var i ;
16480: LD_EXP 5
16484: IFFALSE 16581
16486: GO 16488
16488: DISABLE
16489: LD_INT 0
16491: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16492: LD_ADDR_VAR 0 1
16496: PUSH
16497: LD_INT 22
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 21
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 3
16537: PUSH
16538: LD_INT 24
16540: PUSH
16541: LD_INT 900
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: PUSH
16562: FOR_IN
16563: IFFALSE 16579
// SetLives ( i , 900 ) ;
16565: LD_VAR 0 1
16569: PPUSH
16570: LD_INT 900
16572: PPUSH
16573: CALL_OW 234
16577: GO 16562
16579: POP
16580: POP
// end ;
16581: PPOPN 1
16583: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16584: LD_OWVAR 1
16588: PUSH
16589: LD_INT 14700
16591: GREATER
16592: IFFALSE 18220
16594: GO 16596
16596: DISABLE
16597: LD_INT 0
16599: PPUSH
16600: PPUSH
// begin PrepareSupportFromDelta ;
16601: CALL 4111 0 0
// deltaSupport := true ;
16605: LD_ADDR_EXP 6
16609: PUSH
16610: LD_INT 1
16612: ST_TO_ADDR
// dialog := false ;
16613: LD_ADDR_VAR 0 1
16617: PUSH
16618: LD_INT 0
16620: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16621: LD_EXP 21
16625: PPUSH
16626: CALL_OW 302
16630: IFFALSE 16652
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_EXP 21
16641: PPUSH
16642: LD_STRING D2-Glad-1
16644: PPUSH
16645: CALL_OW 88
16649: ST_TO_ADDR
16650: GO 16734
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16652: LD_ADDR_VAR 0 1
16656: PUSH
16657: LD_INT 22
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 120
16669: PUSH
16670: LD_INT 107
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 23
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: PPUSH
16703: CALL_OW 69
16707: PUSH
16708: LD_EXP 27
16712: PUSH
16713: LD_EXP 26
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: DIFF
16722: PPUSH
16723: LD_STRING D2-Sol1-1
16725: PPUSH
16726: LD_STRING D2-FSol1-1
16728: PPUSH
16729: CALL 20515 0 3
16733: ST_TO_ADDR
// if dialog then
16734: LD_VAR 0 1
16738: IFFALSE 16845
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16740: LD_EXP 16
16744: PPUSH
16745: CALL_OW 302
16749: IFFALSE 16761
16751: PUSH
16752: LD_EXP 13
16756: PUSH
16757: LD_INT 1
16759: EQUAL
16760: AND
16761: IFFALSE 16775
// Say ( Donaldson , D2-Don-1 ) ;
16763: LD_EXP 16
16767: PPUSH
16768: LD_STRING D2-Don-1
16770: PPUSH
16771: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16775: LD_EXP 15
16779: PPUSH
16780: CALL_OW 302
16784: IFFALSE 16796
16786: PUSH
16787: LD_EXP 13
16791: PUSH
16792: LD_INT 2
16794: EQUAL
16795: AND
16796: IFFALSE 16810
// Say ( Brown , D2-Brown-1 ) ;
16798: LD_EXP 15
16802: PPUSH
16803: LD_STRING D2-Brown-1
16805: PPUSH
16806: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16810: LD_EXP 25
16814: PPUSH
16815: CALL_OW 302
16819: IFFALSE 16831
16821: PUSH
16822: LD_EXP 13
16826: PUSH
16827: LD_INT 3
16829: EQUAL
16830: AND
16831: IFFALSE 16845
// Say ( Houten , D2-VanH-1 ) ;
16833: LD_EXP 25
16837: PPUSH
16838: LD_STRING D2-VanH-1
16840: PPUSH
16841: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16845: LD_INT 3
16847: PPUSH
16848: CALL 13203 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16852: LD_STRING 07_time
16854: PPUSH
16855: LD_INT 18900
16857: PPUSH
16858: CALL_OW 30
16862: PUSH
16863: LD_INT 3
16865: DIV
16866: PPUSH
16867: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16871: LD_INT 34
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: CALL_OW 321
16881: PUSH
16882: LD_INT 2
16884: EQUAL
16885: IFFALSE 16894
// SetAchievement ( ACH_HEAVYGUN ) ;
16887: LD_STRING ACH_HEAVYGUN
16889: PPUSH
16890: CALL_OW 543
// PrepareMacmillanSquad ;
16894: CALL 4887 0 0
// wait ( 0 0$1 ) ;
16898: LD_INT 35
16900: PPUSH
16901: CALL_OW 67
// DialogueOn ;
16905: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16909: LD_EXP 14
16913: PPUSH
16914: CALL_OW 87
// dwait ( 0 0$2 ) ;
16918: LD_INT 70
16920: PPUSH
16921: CALL_OW 68
// DialogueOff ;
16925: CALL_OW 7
// wait ( 0 0$10 ) ;
16929: LD_INT 350
16931: PPUSH
16932: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16936: LD_INT 1
16938: PPUSH
16939: CALL_OW 427
// p := 0 ;
16943: LD_ADDR_VAR 0 2
16947: PUSH
16948: LD_INT 0
16950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16951: LD_INT 35
16953: PPUSH
16954: CALL_OW 67
// p := Inc ( p ) ;
16958: LD_ADDR_VAR 0 2
16962: PUSH
16963: LD_VAR 0 2
16967: PPUSH
16968: CALL 81668 0 1
16972: ST_TO_ADDR
// if p > 300 then
16973: LD_VAR 0 2
16977: PUSH
16978: LD_INT 300
16980: GREATER
16981: IFFALSE 16985
// exit ;
16983: GO 18220
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16985: LD_EXP 14
16989: PPUSH
16990: LD_INT 15
16992: PPUSH
16993: CALL_OW 308
16997: IFTRUE 17018
16999: PUSH
17000: LD_EXP 14
17004: PPUSH
17005: CALL_OW 310
17009: PPUSH
17010: LD_INT 15
17012: PPUSH
17013: CALL_OW 308
17017: OR
17018: IFTRUE 17040
17020: PUSH
17021: LD_EXP 14
17025: PPUSH
17026: LD_EXP 27
17030: PPUSH
17031: CALL_OW 296
17035: PUSH
17036: LD_INT 10
17038: LESS
17039: OR
17040: IFTRUE 17107
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_INT 1
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: LD_INT 120
17058: PUSH
17059: LD_INT 106
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 120
17068: PUSH
17069: LD_INT 107
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 91
17083: PUSH
17084: LD_EXP 14
17088: PUSH
17089: LD_INT 12
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 69
17106: OR
17107: IFFALSE 16951
// DialogueOn ;
17109: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
17113: LD_EXP 14
17117: PPUSH
17118: LD_STRING D3-JMM-1
17120: PPUSH
17121: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17125: LD_EXP 16
17129: PPUSH
17130: CALL_OW 302
17134: IFFALSE 17146
17136: PUSH
17137: LD_EXP 13
17141: PUSH
17142: LD_INT 1
17144: EQUAL
17145: AND
17146: IFFALSE 17162
// Say ( Donaldson , D3-Don-1 ) else
17148: LD_EXP 16
17152: PPUSH
17153: LD_STRING D3-Don-1
17155: PPUSH
17156: CALL_OW 88
17160: GO 17258
// begin if gammaCommander = 1 then
17162: LD_EXP 13
17166: PUSH
17167: LD_INT 1
17169: EQUAL
17170: IFFALSE 17258
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
17172: LD_INT 22
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 21
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 23
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 120
17204: PUSH
17205: LD_INT 106
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 26
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: PPUSH
17229: CALL_OW 69
17233: PPUSH
17234: LD_STRING D3-Sol1-1
17236: PPUSH
17237: LD_STRING 
17239: PPUSH
17240: CALL 20515 0 3
17244: IFFALSE 17258
// Say ( JMM , D3-JMM-2 ) ;
17246: LD_EXP 14
17250: PPUSH
17251: LD_STRING D3-JMM-2
17253: PPUSH
17254: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17258: LD_EXP 15
17262: PPUSH
17263: CALL_OW 302
17267: IFFALSE 17279
17269: PUSH
17270: LD_EXP 13
17274: PUSH
17275: LD_INT 2
17277: EQUAL
17278: AND
17279: IFFALSE 17295
// Say ( Brown , D3-Brown-1 ) else
17281: LD_EXP 15
17285: PPUSH
17286: LD_STRING D3-Brown-1
17288: PPUSH
17289: CALL_OW 88
17293: GO 17391
// begin if gammaCommander = 2 then
17295: LD_EXP 13
17299: PUSH
17300: LD_INT 2
17302: EQUAL
17303: IFFALSE 17391
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17305: LD_INT 22
17307: PUSH
17308: LD_INT 1
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 21
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 23
17327: PUSH
17328: LD_INT 1
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 120
17337: PUSH
17338: LD_INT 106
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 26
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PPUSH
17362: CALL_OW 69
17366: PPUSH
17367: LD_STRING D3-Sol1-1a
17369: PPUSH
17370: LD_STRING 
17372: PPUSH
17373: CALL 20515 0 3
17377: IFFALSE 17391
// Say ( JMM , D3-JMM-2 ) ;
17379: LD_EXP 14
17383: PPUSH
17384: LD_STRING D3-JMM-2
17386: PPUSH
17387: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17391: LD_EXP 25
17395: PPUSH
17396: CALL_OW 302
17400: IFFALSE 17412
17402: PUSH
17403: LD_EXP 13
17407: PUSH
17408: LD_INT 3
17410: EQUAL
17411: AND
17412: IFFALSE 17428
// Say ( Houten , D3-VanH-1 ) else
17414: LD_EXP 25
17418: PPUSH
17419: LD_STRING D3-VanH-1
17421: PPUSH
17422: CALL_OW 88
17426: GO 17524
// begin if gammaCommander = 3 then
17428: LD_EXP 13
17432: PUSH
17433: LD_INT 3
17435: EQUAL
17436: IFFALSE 17524
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17438: LD_INT 22
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 21
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 23
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 120
17470: PUSH
17471: LD_INT 106
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 26
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: PPUSH
17495: CALL_OW 69
17499: PPUSH
17500: LD_STRING D3-Sol1-1b
17502: PPUSH
17503: LD_STRING 
17505: PPUSH
17506: CALL 20515 0 3
17510: IFFALSE 17524
// Say ( JMM , D3-JMM-2 ) ;
17512: LD_EXP 14
17516: PPUSH
17517: LD_STRING D3-JMM-2
17519: PPUSH
17520: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17524: LD_EXP 27
17528: PPUSH
17529: CALL_OW 302
17533: IFFALSE 17561
// begin Say ( Joan , D3a-Joan-1 ) ;
17535: LD_EXP 27
17539: PPUSH
17540: LD_STRING D3a-Joan-1
17542: PPUSH
17543: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17547: LD_EXP 14
17551: PPUSH
17552: LD_STRING D3a-JMM-1
17554: PPUSH
17555: CALL_OW 88
// end else
17559: GO 17995
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17561: LD_STRING 06_JoanStatus_1
17563: PPUSH
17564: LD_INT 0
17566: PPUSH
17567: CALL_OW 30
17571: PUSH
17572: LD_INT 1
17574: EQUAL
17575: IFFALSE 17995
// begin Say ( JMM , D3b-JMM-1 ) ;
17577: LD_EXP 14
17581: PPUSH
17582: LD_STRING D3b-JMM-1
17584: PPUSH
17585: CALL_OW 88
// dialog := false ;
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_INT 0
17596: ST_TO_ADDR
// if gammaCommander = 1 then
17597: LD_EXP 13
17601: PUSH
17602: LD_INT 1
17604: EQUAL
17605: IFFALSE 17716
// if IsOK ( Donaldson ) then
17607: LD_EXP 16
17611: PPUSH
17612: CALL_OW 302
17616: IFFALSE 17638
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17618: LD_ADDR_VAR 0 1
17622: PUSH
17623: LD_EXP 16
17627: PPUSH
17628: LD_STRING D3b-Don-1
17630: PPUSH
17631: CALL_OW 88
17635: ST_TO_ADDR
17636: GO 17716
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17638: LD_ADDR_VAR 0 1
17642: PUSH
17643: LD_INT 22
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 21
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 23
17665: PUSH
17666: LD_INT 1
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 120
17675: PUSH
17676: LD_INT 106
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 26
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: PPUSH
17705: LD_STRING D3b-Sol1-1
17707: PPUSH
17708: LD_STRING 
17710: PPUSH
17711: CALL 20515 0 3
17715: ST_TO_ADDR
// if gammaCommander = 2 then
17716: LD_EXP 13
17720: PUSH
17721: LD_INT 2
17723: EQUAL
17724: IFFALSE 17835
// if IsOk ( Brown ) then
17726: LD_EXP 15
17730: PPUSH
17731: CALL_OW 302
17735: IFFALSE 17757
// dialog := Say ( Brown , D3b-Brown-1 ) else
17737: LD_ADDR_VAR 0 1
17741: PUSH
17742: LD_EXP 15
17746: PPUSH
17747: LD_STRING D3b-Brown-1
17749: PPUSH
17750: CALL_OW 88
17754: ST_TO_ADDR
17755: GO 17835
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17757: LD_ADDR_VAR 0 1
17761: PUSH
17762: LD_INT 22
17764: PUSH
17765: LD_INT 1
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 21
17774: PUSH
17775: LD_INT 1
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 23
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 120
17794: PUSH
17795: LD_INT 106
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 26
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: PPUSH
17824: LD_STRING D3b-Sol1-1
17826: PPUSH
17827: LD_STRING 
17829: PPUSH
17830: CALL 20515 0 3
17834: ST_TO_ADDR
// if gammaCommander = 3 then
17835: LD_EXP 13
17839: PUSH
17840: LD_INT 3
17842: EQUAL
17843: IFFALSE 17954
// if IsOk ( Houten ) then
17845: LD_EXP 25
17849: PPUSH
17850: CALL_OW 302
17854: IFFALSE 17876
// dialog := Say ( Houten , D3b-VanH-1 ) else
17856: LD_ADDR_VAR 0 1
17860: PUSH
17861: LD_EXP 25
17865: PPUSH
17866: LD_STRING D3b-VanH-1
17868: PPUSH
17869: CALL_OW 88
17873: ST_TO_ADDR
17874: GO 17954
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17876: LD_ADDR_VAR 0 1
17880: PUSH
17881: LD_INT 22
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 21
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 23
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 120
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 26
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: PPUSH
17943: LD_STRING D3b-Sol1-1
17945: PPUSH
17946: LD_STRING 
17948: PPUSH
17949: CALL 20515 0 3
17953: ST_TO_ADDR
// if dialog then
17954: LD_VAR 0 1
17958: IFFALSE 17995
// begin Say ( JMM , D3b-JMM-2 ) ;
17960: LD_EXP 14
17964: PPUSH
17965: LD_STRING D3b-JMM-2
17967: PPUSH
17968: CALL_OW 88
// if IsOK ( Lisa ) then
17972: LD_EXP 19
17976: PPUSH
17977: CALL_OW 302
17981: IFFALSE 17995
// Say ( Lisa , D3b-Lisa-2 ) ;
17983: LD_EXP 19
17987: PPUSH
17988: LD_STRING D3b-Lisa-2
17990: PPUSH
17991: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17995: LD_EXP 7
17999: NOT
18000: IFFALSE 18008
// begin DialogueOff ;
18002: CALL_OW 7
// exit ;
18006: GO 18220
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
18008: LD_INT 22
18010: PUSH
18011: LD_INT 1
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 21
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 23
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 2
18040: PUSH
18041: LD_INT 120
18043: PUSH
18044: LD_INT 106
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 120
18053: PUSH
18054: LD_INT 107
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 26
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: PPUSH
18088: LD_STRING DCa-Sol1-1
18090: PPUSH
18091: LD_STRING 
18093: PPUSH
18094: CALL 20515 0 3
18098: IFFALSE 18112
// Say ( JMM , DCb-JMM-1 ) ;
18100: LD_EXP 14
18104: PPUSH
18105: LD_STRING DCb-JMM-1
18107: PPUSH
18108: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
18112: LD_INT 22
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 21
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 23
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: LD_INT 120
18147: PUSH
18148: LD_INT 106
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 120
18157: PUSH
18158: LD_INT 107
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 26
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: PPUSH
18187: CALL_OW 69
18191: PPUSH
18192: LD_STRING DCb-Sol1-1
18194: PPUSH
18195: LD_STRING 
18197: PPUSH
18198: CALL 20515 0 3
18202: IFFALSE 18216
// Say ( JMM , DCb-JMM-2 ) ;
18204: LD_EXP 14
18208: PPUSH
18209: LD_STRING DCb-JMM-2
18211: PPUSH
18212: CALL_OW 88
// DialogueOff ;
18216: CALL_OW 7
// end ;
18220: PPOPN 2
18222: END
// export function DialogSeenComputer ( un ) ; begin
18223: LD_INT 0
18225: PPUSH
// if jmmArrival then
18226: LD_EXP 8
18230: IFFALSE 18234
// exit ;
18232: GO 18300
// CenterOnUnits ( un ) ;
18234: LD_VAR 0 1
18238: PPUSH
18239: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
18243: LD_INT 22
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 2
18255: PUSH
18256: LD_INT 120
18258: PUSH
18259: LD_INT 106
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 120
18268: PUSH
18269: LD_INT 107
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: PPUSH
18290: LD_STRING DC-Sol1-1
18292: PPUSH
18293: LD_STRING DC-FSol1-1
18295: PPUSH
18296: CALL 20515 0 3
// end ;
18300: LD_VAR 0 2
18304: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18305: LD_EXP 8
18309: IFFALSE 18321
18311: PUSH
18312: LD_OWVAR 1
18316: PUSH
18317: LD_INT 48300
18319: GREATEREQUAL
18320: AND
18321: IFFALSE 18334
18323: PUSH
18324: LD_EXP 14
18328: PPUSH
18329: CALL_OW 302
18333: AND
18334: IFFALSE 18824
18336: GO 18338
18338: DISABLE
// begin wait ( 2 2$00 ) ;
18339: LD_INT 4200
18341: PPUSH
18342: CALL_OW 67
// DialogueOn ;
18346: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18350: LD_EXP 30
18354: PPUSH
18355: LD_STRING D4-Pow-1
18357: PPUSH
18358: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18362: LD_EXP 14
18366: PPUSH
18367: LD_STRING D4-JMM-1
18369: PPUSH
18370: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18374: LD_EXP 30
18378: PPUSH
18379: LD_STRING D4-Pow-2
18381: PPUSH
18382: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18386: LD_EXP 14
18390: PPUSH
18391: LD_STRING D4-JMM-2
18393: PPUSH
18394: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18398: LD_EXP 30
18402: PPUSH
18403: LD_STRING D4-Pow-3
18405: PPUSH
18406: CALL_OW 94
// DialogueOff ;
18410: CALL_OW 7
// wait ( 1 1$00 ) ;
18414: LD_INT 2100
18416: PPUSH
18417: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18421: LD_INT 1
18423: PPUSH
18424: CALL_OW 427
// wait ( 7 7$30 ) ;
18428: LD_INT 15750
18430: PPUSH
18431: CALL_OW 67
// DialogueOn ;
18435: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18439: LD_EXP 30
18443: PPUSH
18444: LD_STRING D4a-Pow-1
18446: PPUSH
18447: CALL_OW 94
// DialogueOff ;
18451: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18455: LD_INT 1
18457: PPUSH
18458: CALL_OW 427
// SikorskiCounter ;
18462: CALL 20299 0 0
// PrepareSikorsky ;
18466: CALL 6427 0 0
// CenterNowOnUnits ( Sikorski ) ;
18470: LD_EXP 28
18474: PPUSH
18475: CALL_OW 87
// DialogueOn ;
18479: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18483: LD_EXP 28
18487: PPUSH
18488: LD_STRING D5-Sik-1
18490: PPUSH
18491: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18495: LD_INT 11
18497: PPUSH
18498: LD_INT 22
18500: PUSH
18501: LD_INT 1
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PPUSH
18508: CALL_OW 70
18512: PUSH
18513: LD_INT 1
18515: GREATER
18516: IFTRUE 18528
18518: PUSH
18519: LD_INT 28
18521: PPUSH
18522: CALL_OW 302
18526: NOT
18527: OR
18528: IFTRUE 18543
18530: PUSH
18531: LD_INT 28
18533: PPUSH
18534: CALL_OW 255
18538: PUSH
18539: LD_INT 1
18541: EQUAL
18542: OR
18543: IFFALSE 18595
// begin Say ( JMM , D5-JMM-1 ) ;
18545: LD_EXP 14
18549: PPUSH
18550: LD_STRING D5-JMM-1
18552: PPUSH
18553: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18557: LD_EXP 28
18561: PPUSH
18562: LD_STRING D7a-Sik-1
18564: PPUSH
18565: CALL_OW 88
// DialogueOff ;
18569: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18573: LD_STRING M2
18575: PPUSH
18576: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 427
// SikorskiAttack ;
18587: CALL 8050 0 0
// exit ;
18591: GO 18824
// end else
18593: GO 18640
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18595: LD_INT 15
18597: PPUSH
18598: LD_INT 81
18600: PUSH
18601: LD_INT 1
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PPUSH
18608: CALL_OW 70
18612: IFFALSE 18628
// Say ( JMM , D5-JMM-1b ) else
18614: LD_EXP 14
18618: PPUSH
18619: LD_STRING D5-JMM-1b
18621: PPUSH
18622: CALL_OW 88
18626: GO 18640
// Say ( JMM , D5-JMM-1a ) ;
18628: LD_EXP 14
18632: PPUSH
18633: LD_STRING D5-JMM-1a
18635: PPUSH
18636: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18640: LD_EXP 28
18644: PPUSH
18645: LD_STRING D5-Sik-2
18647: PPUSH
18648: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18652: LD_STRING QSikorski
18654: PPUSH
18655: CALL_OW 97
18659: PUSH
18660: LD_INT 1
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 18691
18668: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18669: LD_EXP 28
18673: PPUSH
18674: LD_STRING D5a-Sik-1
18676: PPUSH
18677: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18681: LD_ADDR_EXP 4
18685: PUSH
18686: LD_INT 2100
18688: ST_TO_ADDR
// end ; 2 :
18689: GO 18778
18691: LD_INT 2
18693: DOUBLE
18694: EQUAL
18695: IFTRUE 18699
18697: GO 18722
18699: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18700: LD_EXP 28
18704: PPUSH
18705: LD_STRING D5b-Sik-1
18707: PPUSH
18708: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18712: LD_ADDR_EXP 4
18716: PUSH
18717: LD_INT 10500
18719: ST_TO_ADDR
// end ; 3 :
18720: GO 18778
18722: LD_INT 3
18724: DOUBLE
18725: EQUAL
18726: IFTRUE 18730
18728: GO 18777
18730: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18731: LD_EXP 28
18735: PPUSH
18736: LD_STRING D5c-Sik-1
18738: PPUSH
18739: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18743: LD_EXP 14
18747: PPUSH
18748: LD_STRING D5c-JMM-1
18750: PPUSH
18751: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18755: LD_EXP 28
18759: PPUSH
18760: LD_STRING D5c-Sik-2
18762: PPUSH
18763: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18767: LD_ADDR_EXP 4
18771: PUSH
18772: LD_INT 10500
18774: ST_TO_ADDR
// end ; end ;
18775: GO 18778
18777: POP
// DialogueOff ;
18778: CALL_OW 7
// SikorskiWaitCounter ;
18782: CALL 20362 0 0
// DialogueOn ;
18786: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18790: LD_EXP 28
18794: PPUSH
18795: LD_STRING D6-Sik-1
18797: PPUSH
18798: CALL_OW 88
// DialogueOff ;
18802: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18806: LD_STRING M2
18808: PPUSH
18809: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18813: LD_INT 1
18815: PPUSH
18816: CALL_OW 427
// SikorskiAttack ;
18820: CALL 8050 0 0
// end ;
18824: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18825: LD_INT 11
18827: PPUSH
18828: LD_INT 22
18830: PUSH
18831: LD_INT 4
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 70
18842: PUSH
18843: LD_INT 2
18845: GREATER
18846: IFFALSE 19045
18848: GO 18850
18850: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18851: LD_EXP 28
18855: PPUSH
18856: LD_STRING D7-Sik-1
18858: PPUSH
18859: CALL_OW 88
// wait ( 0 0$10 ) ;
18863: LD_INT 350
18865: PPUSH
18866: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18870: LD_EXP 14
18874: PPUSH
18875: LD_INT 11
18877: PPUSH
18878: CALL_OW 308
18882: IFTRUE 18903
18884: PUSH
18885: LD_EXP 14
18889: PPUSH
18890: CALL_OW 310
18894: PPUSH
18895: LD_INT 11
18897: PPUSH
18898: CALL_OW 308
18902: OR
18903: IFFALSE 18927
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18905: LD_EXP 28
18909: PPUSH
18910: LD_STRING D7a-Sik-1
18912: PPUSH
18913: CALL_OW 88
// sikorskiStatus := 1 ;
18917: LD_ADDR_EXP 9
18921: PUSH
18922: LD_INT 1
18924: ST_TO_ADDR
// end else
18925: GO 18947
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18927: LD_EXP 28
18931: PPUSH
18932: LD_STRING D7b-Sik-1
18934: PPUSH
18935: CALL_OW 88
// sikorskiStatus := 0 ;
18939: LD_ADDR_EXP 9
18943: PUSH
18944: LD_INT 0
18946: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18947: LD_INT 1575
18949: PPUSH
18950: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18954: LD_EXP 14
18958: PPUSH
18959: LD_INT 11
18961: PPUSH
18962: CALL_OW 308
18966: IFTRUE 18987
18968: PUSH
18969: LD_EXP 14
18973: PPUSH
18974: CALL_OW 310
18978: PPUSH
18979: LD_INT 11
18981: PPUSH
18982: CALL_OW 308
18986: OR
18987: IFTRUE 19001
18989: PUSH
18990: LD_EXP 14
18994: PPUSH
18995: CALL_OW 302
18999: NOT
19000: OR
19001: IFFALSE 19025
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19003: LD_EXP 28
19007: PPUSH
19008: LD_STRING D7a-Sik-1
19010: PPUSH
19011: CALL_OW 88
// sikorskiStatus := 1 ;
19015: LD_ADDR_EXP 9
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// end else
19023: GO 19045
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19025: LD_EXP 28
19029: PPUSH
19030: LD_STRING D7b-Sik-1
19032: PPUSH
19033: CALL_OW 88
// sikorskiStatus := 0 ;
19037: LD_ADDR_EXP 9
19041: PUSH
19042: LD_INT 0
19044: ST_TO_ADDR
// end ; end ;
19045: END
// export function SikorskiKilledInAction ; begin
19046: LD_INT 0
19048: PPUSH
// wait ( 0 0$2 ) ;
19049: LD_INT 70
19051: PPUSH
19052: CALL_OW 67
// DialogueOn ;
19056: CALL_OW 6
// dwait ( 0 0$1 ) ;
19060: LD_INT 35
19062: PPUSH
19063: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
19067: LD_EXP 30
19071: PPUSH
19072: LD_STRING D8b-Pow-1
19074: PPUSH
19075: CALL_OW 94
// YouLost ( Dismissed ) ;
19079: LD_STRING Dismissed
19081: PPUSH
19082: CALL_OW 104
// DialogueOff ;
19086: CALL_OW 7
// end ;
19090: LD_VAR 0 1
19094: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
19095: LD_EXP 8
19099: IFFALSE 19110
19101: PUSH
19102: LD_INT 28
19104: PPUSH
19105: CALL_OW 301
19109: AND
19110: IFFALSE 19123
19112: PUSH
19113: LD_EXP 32
19117: PPUSH
19118: CALL_OW 301
19122: AND
19123: IFFALSE 19166
19125: PUSH
19126: LD_INT 22
19128: PUSH
19129: LD_INT 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 50
19138: PUSH
19139: EMPTY
19140: LIST
19141: PUSH
19142: LD_INT 30
19144: PUSH
19145: LD_INT 5
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_INT 0
19164: EQUAL
19165: AND
19166: IFFALSE 20296
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
// begin Video ( true ) ;
19176: LD_INT 1
19178: PPUSH
19179: CALL 80267 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
19183: LD_INT 104
19185: PPUSH
19186: LD_INT 108
19188: PPUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_INT 36
19194: NEG
19195: PPUSH
19196: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
19200: LD_INT 104
19202: PPUSH
19203: LD_INT 108
19205: PPUSH
19206: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
19210: LD_ADDR_VAR 0 2
19214: PUSH
19215: LD_INT 22
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 21
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 3
19237: PUSH
19238: LD_INT 24
19240: PUSH
19241: LD_INT 249
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 69
19261: ST_TO_ADDR
// if tmp then
19262: LD_VAR 0 2
19266: IFFALSE 19297
// for i in tmp do
19268: LD_ADDR_VAR 0 1
19272: PUSH
19273: LD_VAR 0 2
19277: PUSH
19278: FOR_IN
19279: IFFALSE 19295
// SetLives ( i , 249 ) ;
19281: LD_VAR 0 1
19285: PPUSH
19286: LD_INT 249
19288: PPUSH
19289: CALL_OW 234
19293: GO 19278
19295: POP
19296: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19297: LD_ADDR_VAR 0 1
19301: PUSH
19302: LD_INT 22
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 21
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PPUSH
19326: CALL_OW 69
19330: PUSH
19331: FOR_IN
19332: IFFALSE 19375
// begin ComExit ( i ) ;
19334: LD_VAR 0 1
19338: PPUSH
19339: CALL 80693 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: LD_INT 131
19350: PPUSH
19351: LD_INT 127
19353: PPUSH
19354: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19358: LD_VAR 0 1
19362: PPUSH
19363: LD_INT 141
19365: PPUSH
19366: LD_INT 147
19368: PPUSH
19369: CALL_OW 171
// end ;
19373: GO 19331
19375: POP
19376: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19377: LD_INT 81
19379: PUSH
19380: LD_INT 3
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 3
19389: PUSH
19390: LD_INT 21
19392: PUSH
19393: LD_INT 3
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PPUSH
19408: CALL_OW 69
19412: PPUSH
19413: LD_INT 131
19415: PPUSH
19416: LD_INT 127
19418: PPUSH
19419: CALL_OW 174
// wait ( 0 0$08 ) ;
19423: LD_INT 280
19425: PPUSH
19426: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19430: LD_INT 22
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 21
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 23
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 50
19462: PUSH
19463: EMPTY
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PPUSH
19472: CALL_OW 69
19476: PPUSH
19477: CALL 44363 0 1
19481: PUSH
19482: LD_INT 7
19484: LESS
19485: IFFALSE 19496
// begin YouLost ( LostVictory ) ;
19487: LD_STRING LostVictory
19489: PPUSH
19490: CALL_OW 104
// exit ;
19494: GO 20296
// end ; DialogueOn ;
19496: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19500: LD_EXP 9
19504: PUSH
19505: LD_INT 1
19507: EQUAL
19508: IFFALSE 19521
19510: PUSH
19511: LD_EXP 28
19515: PPUSH
19516: CALL_OW 302
19520: AND
19521: IFFALSE 19535
// Say ( Sikorski , D9-Sik-1 ) ;
19523: LD_EXP 28
19527: PPUSH
19528: LD_STRING D9-Sik-1
19530: PPUSH
19531: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19535: LD_INT 22
19537: PUSH
19538: LD_INT 4
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: PUSH
19550: LD_INT 0
19552: EQUAL
19553: IFFALSE 19561
19555: PUSH
19556: LD_EXP 3
19560: AND
19561: IFFALSE 19570
// SetAchievement ( ACH_BLITZKRIEG ) ;
19563: LD_STRING ACH_BLITZKRIEG
19565: PPUSH
19566: CALL_OW 543
// if tick <= 45 45$10 then
19570: LD_OWVAR 1
19574: PUSH
19575: LD_INT 94850
19577: LESSEQUAL
19578: IFFALSE 19594
// begin wait ( 3 ) ;
19580: LD_INT 3
19582: PPUSH
19583: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19587: LD_STRING ACH_ASPEED_8
19589: PPUSH
19590: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19594: LD_STRING med1
19596: PPUSH
19597: LD_INT 1
19599: PPUSH
19600: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19604: LD_STRING med2
19606: PPUSH
19607: LD_INT 1
19609: PPUSH
19610: CALL_OW 101
// if sikorskiStatus = 1 then
19614: LD_EXP 9
19618: PUSH
19619: LD_INT 1
19621: EQUAL
19622: IFFALSE 19636
// AddMedal ( perfect , 1 ) else
19624: LD_STRING perfect
19626: PPUSH
19627: LD_INT 1
19629: PPUSH
19630: CALL_OW 101
19634: GO 19647
// AddMedal ( perfect , - 1 ) ;
19636: LD_STRING perfect
19638: PPUSH
19639: LD_INT 1
19641: NEG
19642: PPUSH
19643: CALL_OW 101
// if Difficulty >= 3 then
19647: LD_OWVAR 67
19651: PUSH
19652: LD_INT 3
19654: GREATEREQUAL
19655: IFFALSE 19667
// SetAchievementEX ( ACH_AMER , 8 ) ;
19657: LD_STRING ACH_AMER
19659: PPUSH
19660: LD_INT 8
19662: PPUSH
19663: CALL_OW 564
// GiveMedals ( Main ) ;
19667: LD_STRING Main
19669: PPUSH
19670: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19674: LD_INT 22
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 23
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 21
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: PPUSH
19714: CALL_OW 43
// prefix := 08_ ;
19718: LD_ADDR_VAR 0 3
19722: PUSH
19723: LD_STRING 08_
19725: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19726: LD_EXP 14
19730: PPUSH
19731: LD_VAR 0 3
19735: PUSH
19736: LD_STRING JMM
19738: STR
19739: PPUSH
19740: CALL_OW 38
// if IsLive ( Brown ) then
19744: LD_EXP 15
19748: PPUSH
19749: CALL_OW 300
19753: IFFALSE 19773
// SaveCharacters ( Brown , prefix & Brown ) ;
19755: LD_EXP 15
19759: PPUSH
19760: LD_VAR 0 3
19764: PUSH
19765: LD_STRING Brown
19767: STR
19768: PPUSH
19769: CALL_OW 38
// if IsLive ( Donaldson ) then
19773: LD_EXP 16
19777: PPUSH
19778: CALL_OW 300
19782: IFFALSE 19802
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19784: LD_EXP 16
19788: PPUSH
19789: LD_VAR 0 3
19793: PUSH
19794: LD_STRING Donaldson
19796: STR
19797: PPUSH
19798: CALL_OW 38
// if IsLive ( Bobby ) then
19802: LD_EXP 17
19806: PPUSH
19807: CALL_OW 300
19811: IFFALSE 19831
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19813: LD_EXP 17
19817: PPUSH
19818: LD_VAR 0 3
19822: PUSH
19823: LD_STRING Bobby
19825: STR
19826: PPUSH
19827: CALL_OW 38
// if IsLive ( Cyrus ) then
19831: LD_EXP 18
19835: PPUSH
19836: CALL_OW 300
19840: IFFALSE 19860
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19842: LD_EXP 18
19846: PPUSH
19847: LD_VAR 0 3
19851: PUSH
19852: LD_STRING Cyrus
19854: STR
19855: PPUSH
19856: CALL_OW 38
// if IsLive ( Lisa ) then
19860: LD_EXP 19
19864: PPUSH
19865: CALL_OW 300
19869: IFFALSE 19889
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19871: LD_EXP 19
19875: PPUSH
19876: LD_VAR 0 3
19880: PUSH
19881: LD_STRING Lisa
19883: STR
19884: PPUSH
19885: CALL_OW 38
// if IsLive ( Frank ) then
19889: LD_EXP 20
19893: PPUSH
19894: CALL_OW 300
19898: IFFALSE 19918
// SaveCharacters ( Frank , prefix & Frank ) ;
19900: LD_EXP 20
19904: PPUSH
19905: LD_VAR 0 3
19909: PUSH
19910: LD_STRING Frank
19912: STR
19913: PPUSH
19914: CALL_OW 38
// if IsLive ( Gladstone ) then
19918: LD_EXP 21
19922: PPUSH
19923: CALL_OW 300
19927: IFFALSE 19947
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19929: LD_EXP 21
19933: PPUSH
19934: LD_VAR 0 3
19938: PUSH
19939: LD_STRING Gladstone
19941: STR
19942: PPUSH
19943: CALL_OW 38
// if IsLive ( Kikuchi ) then
19947: LD_EXP 22
19951: PPUSH
19952: CALL_OW 300
19956: IFFALSE 19976
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19958: LD_EXP 22
19962: PPUSH
19963: LD_VAR 0 3
19967: PUSH
19968: LD_STRING Kikuchi
19970: STR
19971: PPUSH
19972: CALL_OW 38
// if IsLive ( Denis ) then
19976: LD_EXP 26
19980: PPUSH
19981: CALL_OW 300
19985: IFFALSE 20005
// SaveCharacters ( Denis , prefix & Denis ) ;
19987: LD_EXP 26
19991: PPUSH
19992: LD_VAR 0 3
19996: PUSH
19997: LD_STRING Denis
19999: STR
20000: PPUSH
20001: CALL_OW 38
// if IsLive ( Joan ) then
20005: LD_EXP 27
20009: PPUSH
20010: CALL_OW 300
20014: IFFALSE 20036
// SaveCharacters ( Joan , prefix & Joan ) else
20016: LD_EXP 27
20020: PPUSH
20021: LD_VAR 0 3
20025: PUSH
20026: LD_STRING Joan
20028: STR
20029: PPUSH
20030: CALL_OW 38
20034: GO 20043
// DeleteCharacters ( Joan ) ;
20036: LD_STRING Joan
20038: PPUSH
20039: CALL_OW 40
// if IsLive ( Khatam ) then
20043: LD_EXP 23
20047: PPUSH
20048: CALL_OW 300
20052: IFFALSE 20072
// SaveCharacters ( Khatam , prefix & Khatam ) ;
20054: LD_EXP 23
20058: PPUSH
20059: LD_VAR 0 3
20063: PUSH
20064: LD_STRING Khatam
20066: STR
20067: PPUSH
20068: CALL_OW 38
// if IsLive ( Houten ) then
20072: LD_EXP 25
20076: PPUSH
20077: CALL_OW 300
20081: IFFALSE 20108
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
20083: LD_STRING enableBioCharacter(BIO_HOUT)
20085: PPUSH
20086: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
20090: LD_EXP 25
20094: PPUSH
20095: LD_VAR 0 3
20099: PUSH
20100: LD_STRING Houten
20102: STR
20103: PPUSH
20104: CALL_OW 38
// end ; if IsLive ( Mike ) then
20108: LD_EXP 24
20112: PPUSH
20113: CALL_OW 300
20117: IFFALSE 20137
// SaveCharacters ( Mike , prefix & Mike ) ;
20119: LD_EXP 24
20123: PPUSH
20124: LD_VAR 0 3
20128: PUSH
20129: LD_STRING Mike
20131: STR
20132: PPUSH
20133: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
20137: LD_INT 22
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 21
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 23
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: PUSH
20177: LD_EXP 14
20181: PUSH
20182: LD_EXP 15
20186: PUSH
20187: LD_EXP 16
20191: PUSH
20192: LD_EXP 17
20196: PUSH
20197: LD_EXP 18
20201: PUSH
20202: LD_EXP 19
20206: PUSH
20207: LD_EXP 20
20211: PUSH
20212: LD_EXP 21
20216: PUSH
20217: LD_EXP 22
20221: PUSH
20222: LD_EXP 26
20226: PUSH
20227: LD_EXP 27
20231: PUSH
20232: LD_EXP 25
20236: PUSH
20237: LD_EXP 23
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: DIFF
20257: PPUSH
20258: LD_STRING 08_other_survivors
20260: PPUSH
20261: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
20265: LD_INT 15
20267: PPUSH
20268: CALL 7524 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
20272: LD_EXP 10
20276: NOT
20277: PPUSH
20278: LD_STRING 08_SikorskiStatus
20280: PPUSH
20281: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
20285: LD_STRING enableBioCharacter(BIO_SIK)
20287: PPUSH
20288: CALL_OW 559
// YouWin ;
20292: CALL_OW 103
// end ; end_of_file
20296: PPOPN 3
20298: END
// export function SikorskiCounter ; begin
20299: LD_INT 0
20301: PPUSH
// repeat wait ( 0 0$1 ) ;
20302: LD_INT 35
20304: PPUSH
20305: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20309: LD_ADDR_OWVAR 47
20313: PUSH
20314: LD_STRING #Am08-2
20316: PUSH
20317: LD_EXP 3
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20326: LD_ADDR_EXP 3
20330: PUSH
20331: LD_EXP 3
20335: PUSH
20336: LD_INT 35
20338: MINUS
20339: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20340: LD_EXP 3
20344: PUSH
20345: LD_INT 0
20347: EQUAL
20348: IFFALSE 20302
// display_strings := [ ] ;
20350: LD_ADDR_OWVAR 47
20354: PUSH
20355: EMPTY
20356: ST_TO_ADDR
// end ;
20357: LD_VAR 0 1
20361: RET
// export function SikorskiWaitCounter ; begin
20362: LD_INT 0
20364: PPUSH
// repeat wait ( 0 0$1 ) ;
20365: LD_INT 35
20367: PPUSH
20368: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20372: LD_ADDR_OWVAR 47
20376: PUSH
20377: LD_STRING #Am08-1
20379: PUSH
20380: LD_EXP 4
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20389: LD_ADDR_EXP 4
20393: PUSH
20394: LD_EXP 4
20398: PUSH
20399: LD_INT 35
20401: MINUS
20402: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20403: LD_EXP 4
20407: PUSH
20408: LD_INT 0
20410: EQUAL
20411: IFFALSE 20365
// display_strings := [ ] ;
20413: LD_ADDR_OWVAR 47
20417: PUSH
20418: EMPTY
20419: ST_TO_ADDR
// end ; end_of_file
20420: LD_VAR 0 1
20424: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20425: LD_EXP 3
20429: IFFALSE 20469
20431: GO 20433
20433: DISABLE
// begin enable ;
20434: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20435: LD_INT 14
20437: PPUSH
20438: CALL_OW 435
20442: PUSH
20443: LD_INT 10
20445: LESS
20446: IFFALSE 20469
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20448: LD_INT 1
20450: PPUSH
20451: LD_INT 5
20453: PPUSH
20454: CALL_OW 12
20458: PPUSH
20459: LD_INT 14
20461: PPUSH
20462: LD_INT 1
20464: PPUSH
20465: CALL_OW 55
// end ;
20469: END
// every 0 0$55 trigger sikorskiArriveCounter do
20470: LD_EXP 3
20474: IFFALSE 20514
20476: GO 20478
20478: DISABLE
// begin enable ;
20479: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20480: LD_INT 13
20482: PPUSH
20483: CALL_OW 435
20487: PUSH
20488: LD_INT 10
20490: LESS
20491: IFFALSE 20514
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20493: LD_INT 1
20495: PPUSH
20496: LD_INT 5
20498: PPUSH
20499: CALL_OW 12
20503: PPUSH
20504: LD_INT 13
20506: PPUSH
20507: LD_INT 1
20509: PPUSH
20510: CALL_OW 55
// end ; end_of_file
20514: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20515: LD_INT 0
20517: PPUSH
20518: PPUSH
// if not units then
20519: LD_VAR 0 1
20523: NOT
20524: IFFALSE 20528
// exit ;
20526: GO 20653
// result := false ;
20528: LD_ADDR_VAR 0 4
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20536: LD_ADDR_VAR 0 5
20540: PUSH
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_INT 26
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PPUSH
20556: CALL_OW 72
20560: ST_TO_ADDR
// if tmp then
20561: LD_VAR 0 5
20565: IFFALSE 20591
// result := Say ( tmp [ 1 ] , menDialog ) ;
20567: LD_ADDR_VAR 0 4
20571: PUSH
20572: LD_VAR 0 5
20576: PUSH
20577: LD_INT 1
20579: ARRAY
20580: PPUSH
20581: LD_VAR 0 2
20585: PPUSH
20586: CALL_OW 88
20590: ST_TO_ADDR
// if not result then
20591: LD_VAR 0 4
20595: NOT
20596: IFFALSE 20653
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20598: LD_ADDR_VAR 0 5
20602: PUSH
20603: LD_VAR 0 1
20607: PPUSH
20608: LD_INT 26
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 72
20622: ST_TO_ADDR
// if tmp then
20623: LD_VAR 0 5
20627: IFFALSE 20653
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20629: LD_ADDR_VAR 0 4
20633: PUSH
20634: LD_VAR 0 5
20638: PUSH
20639: LD_INT 1
20641: ARRAY
20642: PPUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: CALL_OW 88
20652: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20653: LD_VAR 0 4
20657: RET
// export globalGameSaveCounter ; every 0 0$1 do
20658: GO 20660
20660: DISABLE
// begin enable ;
20661: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20662: LD_STRING updateTimer(
20664: PUSH
20665: LD_OWVAR 1
20669: STR
20670: PUSH
20671: LD_STRING );
20673: STR
20674: PPUSH
20675: CALL_OW 559
// end ;
20679: END
// every 0 0$1 do
20680: GO 20682
20682: DISABLE
// begin globalGameSaveCounter := 0 ;
20683: LD_ADDR_EXP 37
20687: PUSH
20688: LD_INT 0
20690: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20691: LD_STRING setGameSaveCounter(0)
20693: PPUSH
20694: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20698: LD_STRING initStreamRollete();
20700: PPUSH
20701: CALL_OW 559
// InitStreamMode ;
20705: CALL 22050 0 0
// DefineStreamItems ( false ) ;
20709: LD_INT 0
20711: PPUSH
20712: CALL 22514 0 1
// end ;
20716: END
// export function SOS_MapStart ( ) ; begin
20717: LD_INT 0
20719: PPUSH
// if streamModeActive then
20720: LD_EXP 38
20724: IFFALSE 20733
// DefineStreamItems ( true ) ;
20726: LD_INT 1
20728: PPUSH
20729: CALL 22514 0 1
// UpdateLuaVariables ( ) ;
20733: CALL 20750 0 0
// UpdateFactoryWaypoints ( ) ;
20737: CALL 35636 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20741: CALL 35888 0 0
// end ;
20745: LD_VAR 0 1
20749: RET
// function UpdateLuaVariables ( ) ; begin
20750: LD_INT 0
20752: PPUSH
// if globalGameSaveCounter then
20753: LD_EXP 37
20757: IFFALSE 20791
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20759: LD_ADDR_EXP 37
20763: PUSH
20764: LD_EXP 37
20768: PPUSH
20769: CALL 81668 0 1
20773: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20774: LD_STRING setGameSaveCounter(
20776: PUSH
20777: LD_EXP 37
20781: STR
20782: PUSH
20783: LD_STRING )
20785: STR
20786: PPUSH
20787: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20791: LD_STRING setGameDifficulty(
20793: PUSH
20794: LD_OWVAR 67
20798: STR
20799: PUSH
20800: LD_STRING )
20802: STR
20803: PPUSH
20804: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20808: LD_STRING displayDifficulty(
20810: PUSH
20811: LD_OWVAR 67
20815: STR
20816: PUSH
20817: LD_STRING )
20819: STR
20820: PPUSH
20821: CALL_OW 559
// end ;
20825: LD_VAR 0 1
20829: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20830: LD_INT 0
20832: PPUSH
// if p2 = stream_mode then
20833: LD_VAR 0 2
20837: PUSH
20838: LD_INT 100
20840: EQUAL
20841: IFFALSE 21844
// begin if not StreamModeActive then
20843: LD_EXP 38
20847: NOT
20848: IFFALSE 20858
// StreamModeActive := true ;
20850: LD_ADDR_EXP 38
20854: PUSH
20855: LD_INT 1
20857: ST_TO_ADDR
// if p3 = 0 then
20858: LD_VAR 0 3
20862: PUSH
20863: LD_INT 0
20865: EQUAL
20866: IFFALSE 20872
// InitStreamMode ;
20868: CALL 22050 0 0
// if p3 = 1 then
20872: LD_VAR 0 3
20876: PUSH
20877: LD_INT 1
20879: EQUAL
20880: IFFALSE 20890
// sRocket := true ;
20882: LD_ADDR_EXP 43
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
// if p3 = 2 then
20890: LD_VAR 0 3
20894: PUSH
20895: LD_INT 2
20897: EQUAL
20898: IFFALSE 20908
// sSpeed := true ;
20900: LD_ADDR_EXP 42
20904: PUSH
20905: LD_INT 1
20907: ST_TO_ADDR
// if p3 = 3 then
20908: LD_VAR 0 3
20912: PUSH
20913: LD_INT 3
20915: EQUAL
20916: IFFALSE 20926
// sEngine := true ;
20918: LD_ADDR_EXP 44
20922: PUSH
20923: LD_INT 1
20925: ST_TO_ADDR
// if p3 = 4 then
20926: LD_VAR 0 3
20930: PUSH
20931: LD_INT 4
20933: EQUAL
20934: IFFALSE 20944
// sSpec := true ;
20936: LD_ADDR_EXP 41
20940: PUSH
20941: LD_INT 1
20943: ST_TO_ADDR
// if p3 = 5 then
20944: LD_VAR 0 3
20948: PUSH
20949: LD_INT 5
20951: EQUAL
20952: IFFALSE 20962
// sLevel := true ;
20954: LD_ADDR_EXP 45
20958: PUSH
20959: LD_INT 1
20961: ST_TO_ADDR
// if p3 = 6 then
20962: LD_VAR 0 3
20966: PUSH
20967: LD_INT 6
20969: EQUAL
20970: IFFALSE 20980
// sArmoury := true ;
20972: LD_ADDR_EXP 46
20976: PUSH
20977: LD_INT 1
20979: ST_TO_ADDR
// if p3 = 7 then
20980: LD_VAR 0 3
20984: PUSH
20985: LD_INT 7
20987: EQUAL
20988: IFFALSE 20998
// sRadar := true ;
20990: LD_ADDR_EXP 47
20994: PUSH
20995: LD_INT 1
20997: ST_TO_ADDR
// if p3 = 8 then
20998: LD_VAR 0 3
21002: PUSH
21003: LD_INT 8
21005: EQUAL
21006: IFFALSE 21016
// sBunker := true ;
21008: LD_ADDR_EXP 48
21012: PUSH
21013: LD_INT 1
21015: ST_TO_ADDR
// if p3 = 9 then
21016: LD_VAR 0 3
21020: PUSH
21021: LD_INT 9
21023: EQUAL
21024: IFFALSE 21034
// sHack := true ;
21026: LD_ADDR_EXP 49
21030: PUSH
21031: LD_INT 1
21033: ST_TO_ADDR
// if p3 = 10 then
21034: LD_VAR 0 3
21038: PUSH
21039: LD_INT 10
21041: EQUAL
21042: IFFALSE 21052
// sFire := true ;
21044: LD_ADDR_EXP 50
21048: PUSH
21049: LD_INT 1
21051: ST_TO_ADDR
// if p3 = 11 then
21052: LD_VAR 0 3
21056: PUSH
21057: LD_INT 11
21059: EQUAL
21060: IFFALSE 21070
// sRefresh := true ;
21062: LD_ADDR_EXP 51
21066: PUSH
21067: LD_INT 1
21069: ST_TO_ADDR
// if p3 = 12 then
21070: LD_VAR 0 3
21074: PUSH
21075: LD_INT 12
21077: EQUAL
21078: IFFALSE 21088
// sExp := true ;
21080: LD_ADDR_EXP 52
21084: PUSH
21085: LD_INT 1
21087: ST_TO_ADDR
// if p3 = 13 then
21088: LD_VAR 0 3
21092: PUSH
21093: LD_INT 13
21095: EQUAL
21096: IFFALSE 21106
// sDepot := true ;
21098: LD_ADDR_EXP 53
21102: PUSH
21103: LD_INT 1
21105: ST_TO_ADDR
// if p3 = 14 then
21106: LD_VAR 0 3
21110: PUSH
21111: LD_INT 14
21113: EQUAL
21114: IFFALSE 21124
// sFlag := true ;
21116: LD_ADDR_EXP 54
21120: PUSH
21121: LD_INT 1
21123: ST_TO_ADDR
// if p3 = 15 then
21124: LD_VAR 0 3
21128: PUSH
21129: LD_INT 15
21131: EQUAL
21132: IFFALSE 21142
// sKamikadze := true ;
21134: LD_ADDR_EXP 62
21138: PUSH
21139: LD_INT 1
21141: ST_TO_ADDR
// if p3 = 16 then
21142: LD_VAR 0 3
21146: PUSH
21147: LD_INT 16
21149: EQUAL
21150: IFFALSE 21160
// sTroll := true ;
21152: LD_ADDR_EXP 63
21156: PUSH
21157: LD_INT 1
21159: ST_TO_ADDR
// if p3 = 17 then
21160: LD_VAR 0 3
21164: PUSH
21165: LD_INT 17
21167: EQUAL
21168: IFFALSE 21178
// sSlow := true ;
21170: LD_ADDR_EXP 64
21174: PUSH
21175: LD_INT 1
21177: ST_TO_ADDR
// if p3 = 18 then
21178: LD_VAR 0 3
21182: PUSH
21183: LD_INT 18
21185: EQUAL
21186: IFFALSE 21196
// sLack := true ;
21188: LD_ADDR_EXP 65
21192: PUSH
21193: LD_INT 1
21195: ST_TO_ADDR
// if p3 = 19 then
21196: LD_VAR 0 3
21200: PUSH
21201: LD_INT 19
21203: EQUAL
21204: IFFALSE 21214
// sTank := true ;
21206: LD_ADDR_EXP 67
21210: PUSH
21211: LD_INT 1
21213: ST_TO_ADDR
// if p3 = 20 then
21214: LD_VAR 0 3
21218: PUSH
21219: LD_INT 20
21221: EQUAL
21222: IFFALSE 21232
// sRemote := true ;
21224: LD_ADDR_EXP 68
21228: PUSH
21229: LD_INT 1
21231: ST_TO_ADDR
// if p3 = 21 then
21232: LD_VAR 0 3
21236: PUSH
21237: LD_INT 21
21239: EQUAL
21240: IFFALSE 21250
// sPowell := true ;
21242: LD_ADDR_EXP 69
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// if p3 = 22 then
21250: LD_VAR 0 3
21254: PUSH
21255: LD_INT 22
21257: EQUAL
21258: IFFALSE 21268
// sTeleport := true ;
21260: LD_ADDR_EXP 72
21264: PUSH
21265: LD_INT 1
21267: ST_TO_ADDR
// if p3 = 23 then
21268: LD_VAR 0 3
21272: PUSH
21273: LD_INT 23
21275: EQUAL
21276: IFFALSE 21286
// sOilTower := true ;
21278: LD_ADDR_EXP 74
21282: PUSH
21283: LD_INT 1
21285: ST_TO_ADDR
// if p3 = 24 then
21286: LD_VAR 0 3
21290: PUSH
21291: LD_INT 24
21293: EQUAL
21294: IFFALSE 21304
// sShovel := true ;
21296: LD_ADDR_EXP 75
21300: PUSH
21301: LD_INT 1
21303: ST_TO_ADDR
// if p3 = 25 then
21304: LD_VAR 0 3
21308: PUSH
21309: LD_INT 25
21311: EQUAL
21312: IFFALSE 21322
// sSheik := true ;
21314: LD_ADDR_EXP 76
21318: PUSH
21319: LD_INT 1
21321: ST_TO_ADDR
// if p3 = 26 then
21322: LD_VAR 0 3
21326: PUSH
21327: LD_INT 26
21329: EQUAL
21330: IFFALSE 21340
// sEarthquake := true ;
21332: LD_ADDR_EXP 78
21336: PUSH
21337: LD_INT 1
21339: ST_TO_ADDR
// if p3 = 27 then
21340: LD_VAR 0 3
21344: PUSH
21345: LD_INT 27
21347: EQUAL
21348: IFFALSE 21358
// sAI := true ;
21350: LD_ADDR_EXP 79
21354: PUSH
21355: LD_INT 1
21357: ST_TO_ADDR
// if p3 = 28 then
21358: LD_VAR 0 3
21362: PUSH
21363: LD_INT 28
21365: EQUAL
21366: IFFALSE 21376
// sCargo := true ;
21368: LD_ADDR_EXP 82
21372: PUSH
21373: LD_INT 1
21375: ST_TO_ADDR
// if p3 = 29 then
21376: LD_VAR 0 3
21380: PUSH
21381: LD_INT 29
21383: EQUAL
21384: IFFALSE 21394
// sDLaser := true ;
21386: LD_ADDR_EXP 83
21390: PUSH
21391: LD_INT 1
21393: ST_TO_ADDR
// if p3 = 30 then
21394: LD_VAR 0 3
21398: PUSH
21399: LD_INT 30
21401: EQUAL
21402: IFFALSE 21412
// sExchange := true ;
21404: LD_ADDR_EXP 84
21408: PUSH
21409: LD_INT 1
21411: ST_TO_ADDR
// if p3 = 31 then
21412: LD_VAR 0 3
21416: PUSH
21417: LD_INT 31
21419: EQUAL
21420: IFFALSE 21430
// sFac := true ;
21422: LD_ADDR_EXP 85
21426: PUSH
21427: LD_INT 1
21429: ST_TO_ADDR
// if p3 = 32 then
21430: LD_VAR 0 3
21434: PUSH
21435: LD_INT 32
21437: EQUAL
21438: IFFALSE 21448
// sPower := true ;
21440: LD_ADDR_EXP 86
21444: PUSH
21445: LD_INT 1
21447: ST_TO_ADDR
// if p3 = 33 then
21448: LD_VAR 0 3
21452: PUSH
21453: LD_INT 33
21455: EQUAL
21456: IFFALSE 21466
// sRandom := true ;
21458: LD_ADDR_EXP 87
21462: PUSH
21463: LD_INT 1
21465: ST_TO_ADDR
// if p3 = 34 then
21466: LD_VAR 0 3
21470: PUSH
21471: LD_INT 34
21473: EQUAL
21474: IFFALSE 21484
// sShield := true ;
21476: LD_ADDR_EXP 88
21480: PUSH
21481: LD_INT 1
21483: ST_TO_ADDR
// if p3 = 35 then
21484: LD_VAR 0 3
21488: PUSH
21489: LD_INT 35
21491: EQUAL
21492: IFFALSE 21502
// sTime := true ;
21494: LD_ADDR_EXP 89
21498: PUSH
21499: LD_INT 1
21501: ST_TO_ADDR
// if p3 = 36 then
21502: LD_VAR 0 3
21506: PUSH
21507: LD_INT 36
21509: EQUAL
21510: IFFALSE 21520
// sTools := true ;
21512: LD_ADDR_EXP 90
21516: PUSH
21517: LD_INT 1
21519: ST_TO_ADDR
// if p3 = 101 then
21520: LD_VAR 0 3
21524: PUSH
21525: LD_INT 101
21527: EQUAL
21528: IFFALSE 21538
// sSold := true ;
21530: LD_ADDR_EXP 55
21534: PUSH
21535: LD_INT 1
21537: ST_TO_ADDR
// if p3 = 102 then
21538: LD_VAR 0 3
21542: PUSH
21543: LD_INT 102
21545: EQUAL
21546: IFFALSE 21556
// sDiff := true ;
21548: LD_ADDR_EXP 56
21552: PUSH
21553: LD_INT 1
21555: ST_TO_ADDR
// if p3 = 103 then
21556: LD_VAR 0 3
21560: PUSH
21561: LD_INT 103
21563: EQUAL
21564: IFFALSE 21574
// sFog := true ;
21566: LD_ADDR_EXP 59
21570: PUSH
21571: LD_INT 1
21573: ST_TO_ADDR
// if p3 = 104 then
21574: LD_VAR 0 3
21578: PUSH
21579: LD_INT 104
21581: EQUAL
21582: IFFALSE 21592
// sReset := true ;
21584: LD_ADDR_EXP 60
21588: PUSH
21589: LD_INT 1
21591: ST_TO_ADDR
// if p3 = 105 then
21592: LD_VAR 0 3
21596: PUSH
21597: LD_INT 105
21599: EQUAL
21600: IFFALSE 21610
// sSun := true ;
21602: LD_ADDR_EXP 61
21606: PUSH
21607: LD_INT 1
21609: ST_TO_ADDR
// if p3 = 106 then
21610: LD_VAR 0 3
21614: PUSH
21615: LD_INT 106
21617: EQUAL
21618: IFFALSE 21628
// sTiger := true ;
21620: LD_ADDR_EXP 57
21624: PUSH
21625: LD_INT 1
21627: ST_TO_ADDR
// if p3 = 107 then
21628: LD_VAR 0 3
21632: PUSH
21633: LD_INT 107
21635: EQUAL
21636: IFFALSE 21646
// sBomb := true ;
21638: LD_ADDR_EXP 58
21642: PUSH
21643: LD_INT 1
21645: ST_TO_ADDR
// if p3 = 108 then
21646: LD_VAR 0 3
21650: PUSH
21651: LD_INT 108
21653: EQUAL
21654: IFFALSE 21664
// sWound := true ;
21656: LD_ADDR_EXP 66
21660: PUSH
21661: LD_INT 1
21663: ST_TO_ADDR
// if p3 = 109 then
21664: LD_VAR 0 3
21668: PUSH
21669: LD_INT 109
21671: EQUAL
21672: IFFALSE 21682
// sBetray := true ;
21674: LD_ADDR_EXP 70
21678: PUSH
21679: LD_INT 1
21681: ST_TO_ADDR
// if p3 = 110 then
21682: LD_VAR 0 3
21686: PUSH
21687: LD_INT 110
21689: EQUAL
21690: IFFALSE 21700
// sContamin := true ;
21692: LD_ADDR_EXP 71
21696: PUSH
21697: LD_INT 1
21699: ST_TO_ADDR
// if p3 = 111 then
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 111
21707: EQUAL
21708: IFFALSE 21718
// sOil := true ;
21710: LD_ADDR_EXP 73
21714: PUSH
21715: LD_INT 1
21717: ST_TO_ADDR
// if p3 = 112 then
21718: LD_VAR 0 3
21722: PUSH
21723: LD_INT 112
21725: EQUAL
21726: IFFALSE 21736
// sStu := true ;
21728: LD_ADDR_EXP 77
21732: PUSH
21733: LD_INT 1
21735: ST_TO_ADDR
// if p3 = 113 then
21736: LD_VAR 0 3
21740: PUSH
21741: LD_INT 113
21743: EQUAL
21744: IFFALSE 21754
// sBazooka := true ;
21746: LD_ADDR_EXP 80
21750: PUSH
21751: LD_INT 1
21753: ST_TO_ADDR
// if p3 = 114 then
21754: LD_VAR 0 3
21758: PUSH
21759: LD_INT 114
21761: EQUAL
21762: IFFALSE 21772
// sMortar := true ;
21764: LD_ADDR_EXP 81
21768: PUSH
21769: LD_INT 1
21771: ST_TO_ADDR
// if p3 = 115 then
21772: LD_VAR 0 3
21776: PUSH
21777: LD_INT 115
21779: EQUAL
21780: IFFALSE 21790
// sRanger := true ;
21782: LD_ADDR_EXP 91
21786: PUSH
21787: LD_INT 1
21789: ST_TO_ADDR
// if p3 = 116 then
21790: LD_VAR 0 3
21794: PUSH
21795: LD_INT 116
21797: EQUAL
21798: IFFALSE 21808
// sComputer := true ;
21800: LD_ADDR_EXP 92
21804: PUSH
21805: LD_INT 1
21807: ST_TO_ADDR
// if p3 = 117 then
21808: LD_VAR 0 3
21812: PUSH
21813: LD_INT 117
21815: EQUAL
21816: IFFALSE 21826
// s30 := true ;
21818: LD_ADDR_EXP 93
21822: PUSH
21823: LD_INT 1
21825: ST_TO_ADDR
// if p3 = 118 then
21826: LD_VAR 0 3
21830: PUSH
21831: LD_INT 118
21833: EQUAL
21834: IFFALSE 21844
// s60 := true ;
21836: LD_ADDR_EXP 94
21840: PUSH
21841: LD_INT 1
21843: ST_TO_ADDR
// end ; if p2 = hack_mode then
21844: LD_VAR 0 2
21848: PUSH
21849: LD_INT 101
21851: EQUAL
21852: IFFALSE 21980
// begin case p3 of 1 :
21854: LD_VAR 0 3
21858: PUSH
21859: LD_INT 1
21861: DOUBLE
21862: EQUAL
21863: IFTRUE 21867
21865: GO 21874
21867: POP
// hHackUnlimitedResources ; 2 :
21868: CALL 34243 0 0
21872: GO 21980
21874: LD_INT 2
21876: DOUBLE
21877: EQUAL
21878: IFTRUE 21882
21880: GO 21889
21882: POP
// hHackSetLevel10 ; 3 :
21883: CALL 34376 0 0
21887: GO 21980
21889: LD_INT 3
21891: DOUBLE
21892: EQUAL
21893: IFTRUE 21897
21895: GO 21904
21897: POP
// hHackSetLevel10YourUnits ; 4 :
21898: CALL 34461 0 0
21902: GO 21980
21904: LD_INT 4
21906: DOUBLE
21907: EQUAL
21908: IFTRUE 21912
21910: GO 21919
21912: POP
// hHackInvincible ; 5 :
21913: CALL 34909 0 0
21917: GO 21980
21919: LD_INT 5
21921: DOUBLE
21922: EQUAL
21923: IFTRUE 21927
21925: GO 21934
21927: POP
// hHackInvisible ; 6 :
21928: CALL 35020 0 0
21932: GO 21980
21934: LD_INT 6
21936: DOUBLE
21937: EQUAL
21938: IFTRUE 21942
21940: GO 21949
21942: POP
// hHackChangeYourSide ; 7 :
21943: CALL 35077 0 0
21947: GO 21980
21949: LD_INT 7
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21957
21955: GO 21964
21957: POP
// hHackChangeUnitSide ; 8 :
21958: CALL 35119 0 0
21962: GO 21980
21964: LD_INT 8
21966: DOUBLE
21967: EQUAL
21968: IFTRUE 21972
21970: GO 21979
21972: POP
// hHackFog ; end ;
21973: CALL 35220 0 0
21977: GO 21980
21979: POP
// end ; if p2 = game_save_mode then
21980: LD_VAR 0 2
21984: PUSH
21985: LD_INT 102
21987: EQUAL
21988: IFFALSE 22045
// begin if p3 = 1 then
21990: LD_VAR 0 3
21994: PUSH
21995: LD_INT 1
21997: EQUAL
21998: IFFALSE 22010
// globalGameSaveCounter := p4 ;
22000: LD_ADDR_EXP 37
22004: PUSH
22005: LD_VAR 0 4
22009: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22010: LD_VAR 0 3
22014: PUSH
22015: LD_INT 2
22017: EQUAL
22018: IFFALSE 22026
22020: PUSH
22021: LD_EXP 37
22025: AND
22026: IFFALSE 22045
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22028: LD_STRING setGameSaveCounter(
22030: PUSH
22031: LD_EXP 37
22035: STR
22036: PUSH
22037: LD_STRING )
22039: STR
22040: PPUSH
22041: CALL_OW 559
// end ; end ;
22045: LD_VAR 0 7
22049: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22050: LD_INT 0
22052: PPUSH
// streamModeActive := false ;
22053: LD_ADDR_EXP 38
22057: PUSH
22058: LD_INT 0
22060: ST_TO_ADDR
// normalCounter := 36 ;
22061: LD_ADDR_EXP 39
22065: PUSH
22066: LD_INT 36
22068: ST_TO_ADDR
// hardcoreCounter := 18 ;
22069: LD_ADDR_EXP 40
22073: PUSH
22074: LD_INT 18
22076: ST_TO_ADDR
// sRocket := false ;
22077: LD_ADDR_EXP 43
22081: PUSH
22082: LD_INT 0
22084: ST_TO_ADDR
// sSpeed := false ;
22085: LD_ADDR_EXP 42
22089: PUSH
22090: LD_INT 0
22092: ST_TO_ADDR
// sEngine := false ;
22093: LD_ADDR_EXP 44
22097: PUSH
22098: LD_INT 0
22100: ST_TO_ADDR
// sSpec := false ;
22101: LD_ADDR_EXP 41
22105: PUSH
22106: LD_INT 0
22108: ST_TO_ADDR
// sLevel := false ;
22109: LD_ADDR_EXP 45
22113: PUSH
22114: LD_INT 0
22116: ST_TO_ADDR
// sArmoury := false ;
22117: LD_ADDR_EXP 46
22121: PUSH
22122: LD_INT 0
22124: ST_TO_ADDR
// sRadar := false ;
22125: LD_ADDR_EXP 47
22129: PUSH
22130: LD_INT 0
22132: ST_TO_ADDR
// sBunker := false ;
22133: LD_ADDR_EXP 48
22137: PUSH
22138: LD_INT 0
22140: ST_TO_ADDR
// sHack := false ;
22141: LD_ADDR_EXP 49
22145: PUSH
22146: LD_INT 0
22148: ST_TO_ADDR
// sFire := false ;
22149: LD_ADDR_EXP 50
22153: PUSH
22154: LD_INT 0
22156: ST_TO_ADDR
// sRefresh := false ;
22157: LD_ADDR_EXP 51
22161: PUSH
22162: LD_INT 0
22164: ST_TO_ADDR
// sExp := false ;
22165: LD_ADDR_EXP 52
22169: PUSH
22170: LD_INT 0
22172: ST_TO_ADDR
// sDepot := false ;
22173: LD_ADDR_EXP 53
22177: PUSH
22178: LD_INT 0
22180: ST_TO_ADDR
// sFlag := false ;
22181: LD_ADDR_EXP 54
22185: PUSH
22186: LD_INT 0
22188: ST_TO_ADDR
// sKamikadze := false ;
22189: LD_ADDR_EXP 62
22193: PUSH
22194: LD_INT 0
22196: ST_TO_ADDR
// sTroll := false ;
22197: LD_ADDR_EXP 63
22201: PUSH
22202: LD_INT 0
22204: ST_TO_ADDR
// sSlow := false ;
22205: LD_ADDR_EXP 64
22209: PUSH
22210: LD_INT 0
22212: ST_TO_ADDR
// sLack := false ;
22213: LD_ADDR_EXP 65
22217: PUSH
22218: LD_INT 0
22220: ST_TO_ADDR
// sTank := false ;
22221: LD_ADDR_EXP 67
22225: PUSH
22226: LD_INT 0
22228: ST_TO_ADDR
// sRemote := false ;
22229: LD_ADDR_EXP 68
22233: PUSH
22234: LD_INT 0
22236: ST_TO_ADDR
// sPowell := false ;
22237: LD_ADDR_EXP 69
22241: PUSH
22242: LD_INT 0
22244: ST_TO_ADDR
// sTeleport := false ;
22245: LD_ADDR_EXP 72
22249: PUSH
22250: LD_INT 0
22252: ST_TO_ADDR
// sOilTower := false ;
22253: LD_ADDR_EXP 74
22257: PUSH
22258: LD_INT 0
22260: ST_TO_ADDR
// sShovel := false ;
22261: LD_ADDR_EXP 75
22265: PUSH
22266: LD_INT 0
22268: ST_TO_ADDR
// sSheik := false ;
22269: LD_ADDR_EXP 76
22273: PUSH
22274: LD_INT 0
22276: ST_TO_ADDR
// sEarthquake := false ;
22277: LD_ADDR_EXP 78
22281: PUSH
22282: LD_INT 0
22284: ST_TO_ADDR
// sAI := false ;
22285: LD_ADDR_EXP 79
22289: PUSH
22290: LD_INT 0
22292: ST_TO_ADDR
// sCargo := false ;
22293: LD_ADDR_EXP 82
22297: PUSH
22298: LD_INT 0
22300: ST_TO_ADDR
// sDLaser := false ;
22301: LD_ADDR_EXP 83
22305: PUSH
22306: LD_INT 0
22308: ST_TO_ADDR
// sExchange := false ;
22309: LD_ADDR_EXP 84
22313: PUSH
22314: LD_INT 0
22316: ST_TO_ADDR
// sFac := false ;
22317: LD_ADDR_EXP 85
22321: PUSH
22322: LD_INT 0
22324: ST_TO_ADDR
// sPower := false ;
22325: LD_ADDR_EXP 86
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// sRandom := false ;
22333: LD_ADDR_EXP 87
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// sShield := false ;
22341: LD_ADDR_EXP 88
22345: PUSH
22346: LD_INT 0
22348: ST_TO_ADDR
// sTime := false ;
22349: LD_ADDR_EXP 89
22353: PUSH
22354: LD_INT 0
22356: ST_TO_ADDR
// sTools := false ;
22357: LD_ADDR_EXP 90
22361: PUSH
22362: LD_INT 0
22364: ST_TO_ADDR
// sSold := false ;
22365: LD_ADDR_EXP 55
22369: PUSH
22370: LD_INT 0
22372: ST_TO_ADDR
// sDiff := false ;
22373: LD_ADDR_EXP 56
22377: PUSH
22378: LD_INT 0
22380: ST_TO_ADDR
// sFog := false ;
22381: LD_ADDR_EXP 59
22385: PUSH
22386: LD_INT 0
22388: ST_TO_ADDR
// sReset := false ;
22389: LD_ADDR_EXP 60
22393: PUSH
22394: LD_INT 0
22396: ST_TO_ADDR
// sSun := false ;
22397: LD_ADDR_EXP 61
22401: PUSH
22402: LD_INT 0
22404: ST_TO_ADDR
// sTiger := false ;
22405: LD_ADDR_EXP 57
22409: PUSH
22410: LD_INT 0
22412: ST_TO_ADDR
// sBomb := false ;
22413: LD_ADDR_EXP 58
22417: PUSH
22418: LD_INT 0
22420: ST_TO_ADDR
// sWound := false ;
22421: LD_ADDR_EXP 66
22425: PUSH
22426: LD_INT 0
22428: ST_TO_ADDR
// sBetray := false ;
22429: LD_ADDR_EXP 70
22433: PUSH
22434: LD_INT 0
22436: ST_TO_ADDR
// sContamin := false ;
22437: LD_ADDR_EXP 71
22441: PUSH
22442: LD_INT 0
22444: ST_TO_ADDR
// sOil := false ;
22445: LD_ADDR_EXP 73
22449: PUSH
22450: LD_INT 0
22452: ST_TO_ADDR
// sStu := false ;
22453: LD_ADDR_EXP 77
22457: PUSH
22458: LD_INT 0
22460: ST_TO_ADDR
// sBazooka := false ;
22461: LD_ADDR_EXP 80
22465: PUSH
22466: LD_INT 0
22468: ST_TO_ADDR
// sMortar := false ;
22469: LD_ADDR_EXP 81
22473: PUSH
22474: LD_INT 0
22476: ST_TO_ADDR
// sRanger := false ;
22477: LD_ADDR_EXP 91
22481: PUSH
22482: LD_INT 0
22484: ST_TO_ADDR
// sComputer := false ;
22485: LD_ADDR_EXP 92
22489: PUSH
22490: LD_INT 0
22492: ST_TO_ADDR
// s30 := false ;
22493: LD_ADDR_EXP 93
22497: PUSH
22498: LD_INT 0
22500: ST_TO_ADDR
// s60 := false ;
22501: LD_ADDR_EXP 94
22505: PUSH
22506: LD_INT 0
22508: ST_TO_ADDR
// end ;
22509: LD_VAR 0 1
22513: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22514: LD_INT 0
22516: PPUSH
22517: PPUSH
22518: PPUSH
22519: PPUSH
22520: PPUSH
22521: PPUSH
22522: PPUSH
// result := [ ] ;
22523: LD_ADDR_VAR 0 2
22527: PUSH
22528: EMPTY
22529: ST_TO_ADDR
// if campaign_id = 1 then
22530: LD_OWVAR 69
22534: PUSH
22535: LD_INT 1
22537: EQUAL
22538: IFFALSE 25704
// begin case mission_number of 1 :
22540: LD_OWVAR 70
22544: PUSH
22545: LD_INT 1
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22629
22553: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: LD_INT 11
22567: PUSH
22568: LD_INT 12
22570: PUSH
22571: LD_INT 15
22573: PUSH
22574: LD_INT 16
22576: PUSH
22577: LD_INT 22
22579: PUSH
22580: LD_INT 23
22582: PUSH
22583: LD_INT 26
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 101
22599: PUSH
22600: LD_INT 102
22602: PUSH
22603: LD_INT 106
22605: PUSH
22606: LD_INT 116
22608: PUSH
22609: LD_INT 117
22611: PUSH
22612: LD_INT 118
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: ST_TO_ADDR
22627: GO 25702
22629: LD_INT 2
22631: DOUBLE
22632: EQUAL
22633: IFTRUE 22637
22635: GO 22721
22637: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22638: LD_ADDR_VAR 0 2
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 4
22648: PUSH
22649: LD_INT 11
22651: PUSH
22652: LD_INT 12
22654: PUSH
22655: LD_INT 15
22657: PUSH
22658: LD_INT 16
22660: PUSH
22661: LD_INT 22
22663: PUSH
22664: LD_INT 23
22666: PUSH
22667: LD_INT 26
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 101
22683: PUSH
22684: LD_INT 102
22686: PUSH
22687: LD_INT 105
22689: PUSH
22690: LD_INT 106
22692: PUSH
22693: LD_INT 108
22695: PUSH
22696: LD_INT 116
22698: PUSH
22699: LD_INT 117
22701: PUSH
22702: LD_INT 118
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: ST_TO_ADDR
22719: GO 25702
22721: LD_INT 3
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22817
22729: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22730: LD_ADDR_VAR 0 2
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 4
22740: PUSH
22741: LD_INT 5
22743: PUSH
22744: LD_INT 11
22746: PUSH
22747: LD_INT 12
22749: PUSH
22750: LD_INT 15
22752: PUSH
22753: LD_INT 16
22755: PUSH
22756: LD_INT 22
22758: PUSH
22759: LD_INT 26
22761: PUSH
22762: LD_INT 36
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 101
22779: PUSH
22780: LD_INT 102
22782: PUSH
22783: LD_INT 105
22785: PUSH
22786: LD_INT 106
22788: PUSH
22789: LD_INT 108
22791: PUSH
22792: LD_INT 116
22794: PUSH
22795: LD_INT 117
22797: PUSH
22798: LD_INT 118
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: ST_TO_ADDR
22815: GO 25702
22817: LD_INT 4
22819: DOUBLE
22820: EQUAL
22821: IFTRUE 22825
22823: GO 22921
22825: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22826: LD_ADDR_VAR 0 2
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 4
22836: PUSH
22837: LD_INT 5
22839: PUSH
22840: LD_INT 8
22842: PUSH
22843: LD_INT 11
22845: PUSH
22846: LD_INT 12
22848: PUSH
22849: LD_INT 15
22851: PUSH
22852: LD_INT 16
22854: PUSH
22855: LD_INT 22
22857: PUSH
22858: LD_INT 23
22860: PUSH
22861: LD_INT 26
22863: PUSH
22864: LD_INT 36
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 101
22883: PUSH
22884: LD_INT 102
22886: PUSH
22887: LD_INT 105
22889: PUSH
22890: LD_INT 106
22892: PUSH
22893: LD_INT 108
22895: PUSH
22896: LD_INT 116
22898: PUSH
22899: LD_INT 117
22901: PUSH
22902: LD_INT 118
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: ST_TO_ADDR
22919: GO 25702
22921: LD_INT 5
22923: DOUBLE
22924: EQUAL
22925: IFTRUE 22929
22927: GO 23041
22929: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: LD_INT 4
22940: PUSH
22941: LD_INT 5
22943: PUSH
22944: LD_INT 6
22946: PUSH
22947: LD_INT 8
22949: PUSH
22950: LD_INT 11
22952: PUSH
22953: LD_INT 12
22955: PUSH
22956: LD_INT 15
22958: PUSH
22959: LD_INT 16
22961: PUSH
22962: LD_INT 22
22964: PUSH
22965: LD_INT 23
22967: PUSH
22968: LD_INT 25
22970: PUSH
22971: LD_INT 26
22973: PUSH
22974: LD_INT 36
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 101
22995: PUSH
22996: LD_INT 102
22998: PUSH
22999: LD_INT 105
23001: PUSH
23002: LD_INT 106
23004: PUSH
23005: LD_INT 108
23007: PUSH
23008: LD_INT 109
23010: PUSH
23011: LD_INT 112
23013: PUSH
23014: LD_INT 116
23016: PUSH
23017: LD_INT 117
23019: PUSH
23020: LD_INT 118
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: ST_TO_ADDR
23039: GO 25702
23041: LD_INT 6
23043: DOUBLE
23044: EQUAL
23045: IFTRUE 23049
23047: GO 23181
23049: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 4
23060: PUSH
23061: LD_INT 5
23063: PUSH
23064: LD_INT 6
23066: PUSH
23067: LD_INT 8
23069: PUSH
23070: LD_INT 11
23072: PUSH
23073: LD_INT 12
23075: PUSH
23076: LD_INT 15
23078: PUSH
23079: LD_INT 16
23081: PUSH
23082: LD_INT 20
23084: PUSH
23085: LD_INT 21
23087: PUSH
23088: LD_INT 22
23090: PUSH
23091: LD_INT 23
23093: PUSH
23094: LD_INT 25
23096: PUSH
23097: LD_INT 26
23099: PUSH
23100: LD_INT 30
23102: PUSH
23103: LD_INT 31
23105: PUSH
23106: LD_INT 32
23108: PUSH
23109: LD_INT 36
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 101
23135: PUSH
23136: LD_INT 102
23138: PUSH
23139: LD_INT 105
23141: PUSH
23142: LD_INT 106
23144: PUSH
23145: LD_INT 108
23147: PUSH
23148: LD_INT 109
23150: PUSH
23151: LD_INT 112
23153: PUSH
23154: LD_INT 116
23156: PUSH
23157: LD_INT 117
23159: PUSH
23160: LD_INT 118
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: ST_TO_ADDR
23179: GO 25702
23181: LD_INT 7
23183: DOUBLE
23184: EQUAL
23185: IFTRUE 23189
23187: GO 23301
23189: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: LD_INT 4
23200: PUSH
23201: LD_INT 5
23203: PUSH
23204: LD_INT 7
23206: PUSH
23207: LD_INT 11
23209: PUSH
23210: LD_INT 12
23212: PUSH
23213: LD_INT 15
23215: PUSH
23216: LD_INT 16
23218: PUSH
23219: LD_INT 20
23221: PUSH
23222: LD_INT 21
23224: PUSH
23225: LD_INT 22
23227: PUSH
23228: LD_INT 23
23230: PUSH
23231: LD_INT 25
23233: PUSH
23234: LD_INT 26
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 101
23255: PUSH
23256: LD_INT 102
23258: PUSH
23259: LD_INT 103
23261: PUSH
23262: LD_INT 105
23264: PUSH
23265: LD_INT 106
23267: PUSH
23268: LD_INT 108
23270: PUSH
23271: LD_INT 112
23273: PUSH
23274: LD_INT 116
23276: PUSH
23277: LD_INT 117
23279: PUSH
23280: LD_INT 118
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: ST_TO_ADDR
23299: GO 25702
23301: LD_INT 8
23303: DOUBLE
23304: EQUAL
23305: IFTRUE 23309
23307: GO 23449
23309: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23310: LD_ADDR_VAR 0 2
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 4
23320: PUSH
23321: LD_INT 5
23323: PUSH
23324: LD_INT 6
23326: PUSH
23327: LD_INT 7
23329: PUSH
23330: LD_INT 8
23332: PUSH
23333: LD_INT 11
23335: PUSH
23336: LD_INT 12
23338: PUSH
23339: LD_INT 15
23341: PUSH
23342: LD_INT 16
23344: PUSH
23345: LD_INT 20
23347: PUSH
23348: LD_INT 21
23350: PUSH
23351: LD_INT 22
23353: PUSH
23354: LD_INT 23
23356: PUSH
23357: LD_INT 25
23359: PUSH
23360: LD_INT 26
23362: PUSH
23363: LD_INT 30
23365: PUSH
23366: LD_INT 31
23368: PUSH
23369: LD_INT 32
23371: PUSH
23372: LD_INT 36
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 101
23399: PUSH
23400: LD_INT 102
23402: PUSH
23403: LD_INT 103
23405: PUSH
23406: LD_INT 105
23408: PUSH
23409: LD_INT 106
23411: PUSH
23412: LD_INT 108
23414: PUSH
23415: LD_INT 109
23417: PUSH
23418: LD_INT 112
23420: PUSH
23421: LD_INT 116
23423: PUSH
23424: LD_INT 117
23426: PUSH
23427: LD_INT 118
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: ST_TO_ADDR
23447: GO 25702
23449: LD_INT 9
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23605
23457: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23458: LD_ADDR_VAR 0 2
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: LD_INT 4
23468: PUSH
23469: LD_INT 5
23471: PUSH
23472: LD_INT 6
23474: PUSH
23475: LD_INT 7
23477: PUSH
23478: LD_INT 8
23480: PUSH
23481: LD_INT 11
23483: PUSH
23484: LD_INT 12
23486: PUSH
23487: LD_INT 15
23489: PUSH
23490: LD_INT 16
23492: PUSH
23493: LD_INT 20
23495: PUSH
23496: LD_INT 21
23498: PUSH
23499: LD_INT 22
23501: PUSH
23502: LD_INT 23
23504: PUSH
23505: LD_INT 25
23507: PUSH
23508: LD_INT 26
23510: PUSH
23511: LD_INT 28
23513: PUSH
23514: LD_INT 30
23516: PUSH
23517: LD_INT 31
23519: PUSH
23520: LD_INT 32
23522: PUSH
23523: LD_INT 36
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 101
23551: PUSH
23552: LD_INT 102
23554: PUSH
23555: LD_INT 103
23557: PUSH
23558: LD_INT 105
23560: PUSH
23561: LD_INT 106
23563: PUSH
23564: LD_INT 108
23566: PUSH
23567: LD_INT 109
23569: PUSH
23570: LD_INT 112
23572: PUSH
23573: LD_INT 114
23575: PUSH
23576: LD_INT 116
23578: PUSH
23579: LD_INT 117
23581: PUSH
23582: LD_INT 118
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: ST_TO_ADDR
23603: GO 25702
23605: LD_INT 10
23607: DOUBLE
23608: EQUAL
23609: IFTRUE 23613
23611: GO 23809
23613: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: LD_INT 4
23624: PUSH
23625: LD_INT 5
23627: PUSH
23628: LD_INT 6
23630: PUSH
23631: LD_INT 7
23633: PUSH
23634: LD_INT 8
23636: PUSH
23637: LD_INT 9
23639: PUSH
23640: LD_INT 10
23642: PUSH
23643: LD_INT 11
23645: PUSH
23646: LD_INT 12
23648: PUSH
23649: LD_INT 13
23651: PUSH
23652: LD_INT 14
23654: PUSH
23655: LD_INT 15
23657: PUSH
23658: LD_INT 16
23660: PUSH
23661: LD_INT 17
23663: PUSH
23664: LD_INT 18
23666: PUSH
23667: LD_INT 19
23669: PUSH
23670: LD_INT 20
23672: PUSH
23673: LD_INT 21
23675: PUSH
23676: LD_INT 22
23678: PUSH
23679: LD_INT 23
23681: PUSH
23682: LD_INT 24
23684: PUSH
23685: LD_INT 25
23687: PUSH
23688: LD_INT 26
23690: PUSH
23691: LD_INT 28
23693: PUSH
23694: LD_INT 30
23696: PUSH
23697: LD_INT 31
23699: PUSH
23700: LD_INT 32
23702: PUSH
23703: LD_INT 36
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 101
23739: PUSH
23740: LD_INT 102
23742: PUSH
23743: LD_INT 103
23745: PUSH
23746: LD_INT 104
23748: PUSH
23749: LD_INT 105
23751: PUSH
23752: LD_INT 106
23754: PUSH
23755: LD_INT 107
23757: PUSH
23758: LD_INT 108
23760: PUSH
23761: LD_INT 109
23763: PUSH
23764: LD_INT 110
23766: PUSH
23767: LD_INT 111
23769: PUSH
23770: LD_INT 112
23772: PUSH
23773: LD_INT 114
23775: PUSH
23776: LD_INT 116
23778: PUSH
23779: LD_INT 117
23781: PUSH
23782: LD_INT 118
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: ST_TO_ADDR
23807: GO 25702
23809: LD_INT 11
23811: DOUBLE
23812: EQUAL
23813: IFTRUE 23817
23815: GO 24021
23817: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23818: LD_ADDR_VAR 0 2
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 3
23828: PUSH
23829: LD_INT 4
23831: PUSH
23832: LD_INT 5
23834: PUSH
23835: LD_INT 6
23837: PUSH
23838: LD_INT 7
23840: PUSH
23841: LD_INT 8
23843: PUSH
23844: LD_INT 9
23846: PUSH
23847: LD_INT 10
23849: PUSH
23850: LD_INT 11
23852: PUSH
23853: LD_INT 12
23855: PUSH
23856: LD_INT 13
23858: PUSH
23859: LD_INT 14
23861: PUSH
23862: LD_INT 15
23864: PUSH
23865: LD_INT 16
23867: PUSH
23868: LD_INT 17
23870: PUSH
23871: LD_INT 18
23873: PUSH
23874: LD_INT 19
23876: PUSH
23877: LD_INT 20
23879: PUSH
23880: LD_INT 21
23882: PUSH
23883: LD_INT 22
23885: PUSH
23886: LD_INT 23
23888: PUSH
23889: LD_INT 24
23891: PUSH
23892: LD_INT 25
23894: PUSH
23895: LD_INT 26
23897: PUSH
23898: LD_INT 28
23900: PUSH
23901: LD_INT 30
23903: PUSH
23904: LD_INT 31
23906: PUSH
23907: LD_INT 32
23909: PUSH
23910: LD_INT 34
23912: PUSH
23913: LD_INT 36
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 101
23951: PUSH
23952: LD_INT 102
23954: PUSH
23955: LD_INT 103
23957: PUSH
23958: LD_INT 104
23960: PUSH
23961: LD_INT 105
23963: PUSH
23964: LD_INT 106
23966: PUSH
23967: LD_INT 107
23969: PUSH
23970: LD_INT 108
23972: PUSH
23973: LD_INT 109
23975: PUSH
23976: LD_INT 110
23978: PUSH
23979: LD_INT 111
23981: PUSH
23982: LD_INT 112
23984: PUSH
23985: LD_INT 114
23987: PUSH
23988: LD_INT 116
23990: PUSH
23991: LD_INT 117
23993: PUSH
23994: LD_INT 118
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: ST_TO_ADDR
24019: GO 25702
24021: LD_INT 12
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24249
24029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24030: LD_ADDR_VAR 0 2
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: LD_INT 3
24043: PUSH
24044: LD_INT 4
24046: PUSH
24047: LD_INT 5
24049: PUSH
24050: LD_INT 6
24052: PUSH
24053: LD_INT 7
24055: PUSH
24056: LD_INT 8
24058: PUSH
24059: LD_INT 9
24061: PUSH
24062: LD_INT 10
24064: PUSH
24065: LD_INT 11
24067: PUSH
24068: LD_INT 12
24070: PUSH
24071: LD_INT 13
24073: PUSH
24074: LD_INT 14
24076: PUSH
24077: LD_INT 15
24079: PUSH
24080: LD_INT 16
24082: PUSH
24083: LD_INT 17
24085: PUSH
24086: LD_INT 18
24088: PUSH
24089: LD_INT 19
24091: PUSH
24092: LD_INT 20
24094: PUSH
24095: LD_INT 21
24097: PUSH
24098: LD_INT 22
24100: PUSH
24101: LD_INT 23
24103: PUSH
24104: LD_INT 24
24106: PUSH
24107: LD_INT 25
24109: PUSH
24110: LD_INT 26
24112: PUSH
24113: LD_INT 27
24115: PUSH
24116: LD_INT 28
24118: PUSH
24119: LD_INT 30
24121: PUSH
24122: LD_INT 31
24124: PUSH
24125: LD_INT 32
24127: PUSH
24128: LD_INT 33
24130: PUSH
24131: LD_INT 34
24133: PUSH
24134: LD_INT 36
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 101
24175: PUSH
24176: LD_INT 102
24178: PUSH
24179: LD_INT 103
24181: PUSH
24182: LD_INT 104
24184: PUSH
24185: LD_INT 105
24187: PUSH
24188: LD_INT 106
24190: PUSH
24191: LD_INT 107
24193: PUSH
24194: LD_INT 108
24196: PUSH
24197: LD_INT 109
24199: PUSH
24200: LD_INT 110
24202: PUSH
24203: LD_INT 111
24205: PUSH
24206: LD_INT 112
24208: PUSH
24209: LD_INT 113
24211: PUSH
24212: LD_INT 114
24214: PUSH
24215: LD_INT 116
24217: PUSH
24218: LD_INT 117
24220: PUSH
24221: LD_INT 118
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: ST_TO_ADDR
24247: GO 25702
24249: LD_INT 13
24251: DOUBLE
24252: EQUAL
24253: IFTRUE 24257
24255: GO 24465
24257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24258: LD_ADDR_VAR 0 2
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: LD_INT 4
24274: PUSH
24275: LD_INT 5
24277: PUSH
24278: LD_INT 8
24280: PUSH
24281: LD_INT 9
24283: PUSH
24284: LD_INT 10
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 14
24295: PUSH
24296: LD_INT 15
24298: PUSH
24299: LD_INT 16
24301: PUSH
24302: LD_INT 17
24304: PUSH
24305: LD_INT 18
24307: PUSH
24308: LD_INT 19
24310: PUSH
24311: LD_INT 20
24313: PUSH
24314: LD_INT 21
24316: PUSH
24317: LD_INT 22
24319: PUSH
24320: LD_INT 23
24322: PUSH
24323: LD_INT 24
24325: PUSH
24326: LD_INT 25
24328: PUSH
24329: LD_INT 26
24331: PUSH
24332: LD_INT 27
24334: PUSH
24335: LD_INT 28
24337: PUSH
24338: LD_INT 30
24340: PUSH
24341: LD_INT 31
24343: PUSH
24344: LD_INT 32
24346: PUSH
24347: LD_INT 33
24349: PUSH
24350: LD_INT 34
24352: PUSH
24353: LD_INT 36
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 101
24391: PUSH
24392: LD_INT 102
24394: PUSH
24395: LD_INT 103
24397: PUSH
24398: LD_INT 104
24400: PUSH
24401: LD_INT 105
24403: PUSH
24404: LD_INT 106
24406: PUSH
24407: LD_INT 107
24409: PUSH
24410: LD_INT 108
24412: PUSH
24413: LD_INT 109
24415: PUSH
24416: LD_INT 110
24418: PUSH
24419: LD_INT 111
24421: PUSH
24422: LD_INT 112
24424: PUSH
24425: LD_INT 113
24427: PUSH
24428: LD_INT 114
24430: PUSH
24431: LD_INT 116
24433: PUSH
24434: LD_INT 117
24436: PUSH
24437: LD_INT 118
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: ST_TO_ADDR
24463: GO 25702
24465: LD_INT 14
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24697
24473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 2
24484: PUSH
24485: LD_INT 3
24487: PUSH
24488: LD_INT 4
24490: PUSH
24491: LD_INT 5
24493: PUSH
24494: LD_INT 6
24496: PUSH
24497: LD_INT 7
24499: PUSH
24500: LD_INT 8
24502: PUSH
24503: LD_INT 9
24505: PUSH
24506: LD_INT 10
24508: PUSH
24509: LD_INT 11
24511: PUSH
24512: LD_INT 12
24514: PUSH
24515: LD_INT 13
24517: PUSH
24518: LD_INT 14
24520: PUSH
24521: LD_INT 15
24523: PUSH
24524: LD_INT 16
24526: PUSH
24527: LD_INT 17
24529: PUSH
24530: LD_INT 18
24532: PUSH
24533: LD_INT 19
24535: PUSH
24536: LD_INT 20
24538: PUSH
24539: LD_INT 21
24541: PUSH
24542: LD_INT 22
24544: PUSH
24545: LD_INT 23
24547: PUSH
24548: LD_INT 24
24550: PUSH
24551: LD_INT 25
24553: PUSH
24554: LD_INT 26
24556: PUSH
24557: LD_INT 27
24559: PUSH
24560: LD_INT 28
24562: PUSH
24563: LD_INT 29
24565: PUSH
24566: LD_INT 30
24568: PUSH
24569: LD_INT 31
24571: PUSH
24572: LD_INT 32
24574: PUSH
24575: LD_INT 33
24577: PUSH
24578: LD_INT 34
24580: PUSH
24581: LD_INT 36
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 101
24623: PUSH
24624: LD_INT 102
24626: PUSH
24627: LD_INT 103
24629: PUSH
24630: LD_INT 104
24632: PUSH
24633: LD_INT 105
24635: PUSH
24636: LD_INT 106
24638: PUSH
24639: LD_INT 107
24641: PUSH
24642: LD_INT 108
24644: PUSH
24645: LD_INT 109
24647: PUSH
24648: LD_INT 110
24650: PUSH
24651: LD_INT 111
24653: PUSH
24654: LD_INT 112
24656: PUSH
24657: LD_INT 113
24659: PUSH
24660: LD_INT 114
24662: PUSH
24663: LD_INT 116
24665: PUSH
24666: LD_INT 117
24668: PUSH
24669: LD_INT 118
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: ST_TO_ADDR
24695: GO 25702
24697: LD_INT 15
24699: DOUBLE
24700: EQUAL
24701: IFTRUE 24705
24703: GO 24929
24705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24706: LD_ADDR_VAR 0 2
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: LD_INT 3
24719: PUSH
24720: LD_INT 4
24722: PUSH
24723: LD_INT 5
24725: PUSH
24726: LD_INT 6
24728: PUSH
24729: LD_INT 7
24731: PUSH
24732: LD_INT 8
24734: PUSH
24735: LD_INT 9
24737: PUSH
24738: LD_INT 10
24740: PUSH
24741: LD_INT 11
24743: PUSH
24744: LD_INT 12
24746: PUSH
24747: LD_INT 13
24749: PUSH
24750: LD_INT 14
24752: PUSH
24753: LD_INT 15
24755: PUSH
24756: LD_INT 16
24758: PUSH
24759: LD_INT 17
24761: PUSH
24762: LD_INT 18
24764: PUSH
24765: LD_INT 19
24767: PUSH
24768: LD_INT 20
24770: PUSH
24771: LD_INT 21
24773: PUSH
24774: LD_INT 22
24776: PUSH
24777: LD_INT 23
24779: PUSH
24780: LD_INT 24
24782: PUSH
24783: LD_INT 25
24785: PUSH
24786: LD_INT 26
24788: PUSH
24789: LD_INT 27
24791: PUSH
24792: LD_INT 28
24794: PUSH
24795: LD_INT 29
24797: PUSH
24798: LD_INT 30
24800: PUSH
24801: LD_INT 31
24803: PUSH
24804: LD_INT 32
24806: PUSH
24807: LD_INT 33
24809: PUSH
24810: LD_INT 34
24812: PUSH
24813: LD_INT 36
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 101
24855: PUSH
24856: LD_INT 102
24858: PUSH
24859: LD_INT 103
24861: PUSH
24862: LD_INT 104
24864: PUSH
24865: LD_INT 105
24867: PUSH
24868: LD_INT 106
24870: PUSH
24871: LD_INT 107
24873: PUSH
24874: LD_INT 108
24876: PUSH
24877: LD_INT 109
24879: PUSH
24880: LD_INT 110
24882: PUSH
24883: LD_INT 111
24885: PUSH
24886: LD_INT 112
24888: PUSH
24889: LD_INT 113
24891: PUSH
24892: LD_INT 114
24894: PUSH
24895: LD_INT 116
24897: PUSH
24898: LD_INT 117
24900: PUSH
24901: LD_INT 118
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: ST_TO_ADDR
24927: GO 25702
24929: LD_INT 16
24931: DOUBLE
24932: EQUAL
24933: IFTRUE 24937
24935: GO 25073
24937: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24938: LD_ADDR_VAR 0 2
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 4
24948: PUSH
24949: LD_INT 5
24951: PUSH
24952: LD_INT 7
24954: PUSH
24955: LD_INT 11
24957: PUSH
24958: LD_INT 12
24960: PUSH
24961: LD_INT 15
24963: PUSH
24964: LD_INT 16
24966: PUSH
24967: LD_INT 20
24969: PUSH
24970: LD_INT 21
24972: PUSH
24973: LD_INT 22
24975: PUSH
24976: LD_INT 23
24978: PUSH
24979: LD_INT 25
24981: PUSH
24982: LD_INT 26
24984: PUSH
24985: LD_INT 30
24987: PUSH
24988: LD_INT 31
24990: PUSH
24991: LD_INT 32
24993: PUSH
24994: LD_INT 33
24996: PUSH
24997: LD_INT 34
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 101
25023: PUSH
25024: LD_INT 102
25026: PUSH
25027: LD_INT 103
25029: PUSH
25030: LD_INT 106
25032: PUSH
25033: LD_INT 108
25035: PUSH
25036: LD_INT 112
25038: PUSH
25039: LD_INT 113
25041: PUSH
25042: LD_INT 114
25044: PUSH
25045: LD_INT 116
25047: PUSH
25048: LD_INT 117
25050: PUSH
25051: LD_INT 118
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: ST_TO_ADDR
25071: GO 25702
25073: LD_INT 17
25075: DOUBLE
25076: EQUAL
25077: IFTRUE 25081
25079: GO 25305
25081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: LD_INT 3
25095: PUSH
25096: LD_INT 4
25098: PUSH
25099: LD_INT 5
25101: PUSH
25102: LD_INT 6
25104: PUSH
25105: LD_INT 7
25107: PUSH
25108: LD_INT 8
25110: PUSH
25111: LD_INT 9
25113: PUSH
25114: LD_INT 10
25116: PUSH
25117: LD_INT 11
25119: PUSH
25120: LD_INT 12
25122: PUSH
25123: LD_INT 13
25125: PUSH
25126: LD_INT 14
25128: PUSH
25129: LD_INT 15
25131: PUSH
25132: LD_INT 16
25134: PUSH
25135: LD_INT 17
25137: PUSH
25138: LD_INT 18
25140: PUSH
25141: LD_INT 19
25143: PUSH
25144: LD_INT 20
25146: PUSH
25147: LD_INT 21
25149: PUSH
25150: LD_INT 22
25152: PUSH
25153: LD_INT 23
25155: PUSH
25156: LD_INT 24
25158: PUSH
25159: LD_INT 25
25161: PUSH
25162: LD_INT 26
25164: PUSH
25165: LD_INT 27
25167: PUSH
25168: LD_INT 28
25170: PUSH
25171: LD_INT 29
25173: PUSH
25174: LD_INT 30
25176: PUSH
25177: LD_INT 31
25179: PUSH
25180: LD_INT 32
25182: PUSH
25183: LD_INT 33
25185: PUSH
25186: LD_INT 34
25188: PUSH
25189: LD_INT 36
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 101
25231: PUSH
25232: LD_INT 102
25234: PUSH
25235: LD_INT 103
25237: PUSH
25238: LD_INT 104
25240: PUSH
25241: LD_INT 105
25243: PUSH
25244: LD_INT 106
25246: PUSH
25247: LD_INT 107
25249: PUSH
25250: LD_INT 108
25252: PUSH
25253: LD_INT 109
25255: PUSH
25256: LD_INT 110
25258: PUSH
25259: LD_INT 111
25261: PUSH
25262: LD_INT 112
25264: PUSH
25265: LD_INT 113
25267: PUSH
25268: LD_INT 114
25270: PUSH
25271: LD_INT 116
25273: PUSH
25274: LD_INT 117
25276: PUSH
25277: LD_INT 118
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 25702
25305: LD_INT 18
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25461
25313: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25314: LD_ADDR_VAR 0 2
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 4
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: LD_INT 7
25330: PUSH
25331: LD_INT 11
25333: PUSH
25334: LD_INT 12
25336: PUSH
25337: LD_INT 15
25339: PUSH
25340: LD_INT 16
25342: PUSH
25343: LD_INT 20
25345: PUSH
25346: LD_INT 21
25348: PUSH
25349: LD_INT 22
25351: PUSH
25352: LD_INT 23
25354: PUSH
25355: LD_INT 25
25357: PUSH
25358: LD_INT 26
25360: PUSH
25361: LD_INT 30
25363: PUSH
25364: LD_INT 31
25366: PUSH
25367: LD_INT 32
25369: PUSH
25370: LD_INT 33
25372: PUSH
25373: LD_INT 34
25375: PUSH
25376: LD_INT 35
25378: PUSH
25379: LD_INT 36
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 101
25407: PUSH
25408: LD_INT 102
25410: PUSH
25411: LD_INT 103
25413: PUSH
25414: LD_INT 106
25416: PUSH
25417: LD_INT 108
25419: PUSH
25420: LD_INT 112
25422: PUSH
25423: LD_INT 113
25425: PUSH
25426: LD_INT 114
25428: PUSH
25429: LD_INT 115
25431: PUSH
25432: LD_INT 116
25434: PUSH
25435: LD_INT 117
25437: PUSH
25438: LD_INT 118
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: ST_TO_ADDR
25459: GO 25702
25461: LD_INT 19
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25701
25469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25470: LD_ADDR_VAR 0 2
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: LD_INT 4
25486: PUSH
25487: LD_INT 5
25489: PUSH
25490: LD_INT 6
25492: PUSH
25493: LD_INT 7
25495: PUSH
25496: LD_INT 8
25498: PUSH
25499: LD_INT 9
25501: PUSH
25502: LD_INT 10
25504: PUSH
25505: LD_INT 11
25507: PUSH
25508: LD_INT 12
25510: PUSH
25511: LD_INT 13
25513: PUSH
25514: LD_INT 14
25516: PUSH
25517: LD_INT 15
25519: PUSH
25520: LD_INT 16
25522: PUSH
25523: LD_INT 17
25525: PUSH
25526: LD_INT 18
25528: PUSH
25529: LD_INT 19
25531: PUSH
25532: LD_INT 20
25534: PUSH
25535: LD_INT 21
25537: PUSH
25538: LD_INT 22
25540: PUSH
25541: LD_INT 23
25543: PUSH
25544: LD_INT 24
25546: PUSH
25547: LD_INT 25
25549: PUSH
25550: LD_INT 26
25552: PUSH
25553: LD_INT 27
25555: PUSH
25556: LD_INT 28
25558: PUSH
25559: LD_INT 29
25561: PUSH
25562: LD_INT 30
25564: PUSH
25565: LD_INT 31
25567: PUSH
25568: LD_INT 32
25570: PUSH
25571: LD_INT 33
25573: PUSH
25574: LD_INT 34
25576: PUSH
25577: LD_INT 35
25579: PUSH
25580: LD_INT 36
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 101
25623: PUSH
25624: LD_INT 102
25626: PUSH
25627: LD_INT 103
25629: PUSH
25630: LD_INT 104
25632: PUSH
25633: LD_INT 105
25635: PUSH
25636: LD_INT 106
25638: PUSH
25639: LD_INT 107
25641: PUSH
25642: LD_INT 108
25644: PUSH
25645: LD_INT 109
25647: PUSH
25648: LD_INT 110
25650: PUSH
25651: LD_INT 111
25653: PUSH
25654: LD_INT 112
25656: PUSH
25657: LD_INT 113
25659: PUSH
25660: LD_INT 114
25662: PUSH
25663: LD_INT 115
25665: PUSH
25666: LD_INT 116
25668: PUSH
25669: LD_INT 117
25671: PUSH
25672: LD_INT 118
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: ST_TO_ADDR
25699: GO 25702
25701: POP
// end else
25702: GO 25933
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25704: LD_ADDR_VAR 0 2
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 3
25717: PUSH
25718: LD_INT 4
25720: PUSH
25721: LD_INT 5
25723: PUSH
25724: LD_INT 6
25726: PUSH
25727: LD_INT 7
25729: PUSH
25730: LD_INT 8
25732: PUSH
25733: LD_INT 9
25735: PUSH
25736: LD_INT 10
25738: PUSH
25739: LD_INT 11
25741: PUSH
25742: LD_INT 12
25744: PUSH
25745: LD_INT 13
25747: PUSH
25748: LD_INT 14
25750: PUSH
25751: LD_INT 15
25753: PUSH
25754: LD_INT 16
25756: PUSH
25757: LD_INT 17
25759: PUSH
25760: LD_INT 18
25762: PUSH
25763: LD_INT 19
25765: PUSH
25766: LD_INT 20
25768: PUSH
25769: LD_INT 21
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_INT 23
25777: PUSH
25778: LD_INT 24
25780: PUSH
25781: LD_INT 25
25783: PUSH
25784: LD_INT 26
25786: PUSH
25787: LD_INT 27
25789: PUSH
25790: LD_INT 28
25792: PUSH
25793: LD_INT 29
25795: PUSH
25796: LD_INT 30
25798: PUSH
25799: LD_INT 31
25801: PUSH
25802: LD_INT 32
25804: PUSH
25805: LD_INT 33
25807: PUSH
25808: LD_INT 34
25810: PUSH
25811: LD_INT 35
25813: PUSH
25814: LD_INT 36
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 101
25857: PUSH
25858: LD_INT 102
25860: PUSH
25861: LD_INT 103
25863: PUSH
25864: LD_INT 104
25866: PUSH
25867: LD_INT 105
25869: PUSH
25870: LD_INT 106
25872: PUSH
25873: LD_INT 107
25875: PUSH
25876: LD_INT 108
25878: PUSH
25879: LD_INT 109
25881: PUSH
25882: LD_INT 110
25884: PUSH
25885: LD_INT 111
25887: PUSH
25888: LD_INT 112
25890: PUSH
25891: LD_INT 113
25893: PUSH
25894: LD_INT 114
25896: PUSH
25897: LD_INT 115
25899: PUSH
25900: LD_INT 116
25902: PUSH
25903: LD_INT 117
25905: PUSH
25906: LD_INT 118
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: ST_TO_ADDR
// if result then
25933: LD_VAR 0 2
25937: IFFALSE 26723
// begin normal :=  ;
25939: LD_ADDR_VAR 0 5
25943: PUSH
25944: LD_STRING 
25946: ST_TO_ADDR
// hardcore :=  ;
25947: LD_ADDR_VAR 0 6
25951: PUSH
25952: LD_STRING 
25954: ST_TO_ADDR
// active :=  ;
25955: LD_ADDR_VAR 0 7
25959: PUSH
25960: LD_STRING 
25962: ST_TO_ADDR
// for i = 1 to normalCounter do
25963: LD_ADDR_VAR 0 8
25967: PUSH
25968: DOUBLE
25969: LD_INT 1
25971: DEC
25972: ST_TO_ADDR
25973: LD_EXP 39
25977: PUSH
25978: FOR_TO
25979: IFFALSE 26080
// begin tmp := 0 ;
25981: LD_ADDR_VAR 0 3
25985: PUSH
25986: LD_STRING 0
25988: ST_TO_ADDR
// if result [ 1 ] then
25989: LD_VAR 0 2
25993: PUSH
25994: LD_INT 1
25996: ARRAY
25997: IFFALSE 26062
// if result [ 1 ] [ 1 ] = i then
25999: LD_VAR 0 2
26003: PUSH
26004: LD_INT 1
26006: ARRAY
26007: PUSH
26008: LD_INT 1
26010: ARRAY
26011: PUSH
26012: LD_VAR 0 8
26016: EQUAL
26017: IFFALSE 26062
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26019: LD_ADDR_VAR 0 2
26023: PUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: LD_INT 1
26031: PPUSH
26032: LD_VAR 0 2
26036: PUSH
26037: LD_INT 1
26039: ARRAY
26040: PPUSH
26041: LD_INT 1
26043: PPUSH
26044: CALL_OW 3
26048: PPUSH
26049: CALL_OW 1
26053: ST_TO_ADDR
// tmp := 1 ;
26054: LD_ADDR_VAR 0 3
26058: PUSH
26059: LD_STRING 1
26061: ST_TO_ADDR
// end ; normal := normal & tmp ;
26062: LD_ADDR_VAR 0 5
26066: PUSH
26067: LD_VAR 0 5
26071: PUSH
26072: LD_VAR 0 3
26076: STR
26077: ST_TO_ADDR
// end ;
26078: GO 25978
26080: POP
26081: POP
// for i = 1 to hardcoreCounter do
26082: LD_ADDR_VAR 0 8
26086: PUSH
26087: DOUBLE
26088: LD_INT 1
26090: DEC
26091: ST_TO_ADDR
26092: LD_EXP 40
26096: PUSH
26097: FOR_TO
26098: IFFALSE 26203
// begin tmp := 0 ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_STRING 0
26107: ST_TO_ADDR
// if result [ 2 ] then
26108: LD_VAR 0 2
26112: PUSH
26113: LD_INT 2
26115: ARRAY
26116: IFFALSE 26185
// if result [ 2 ] [ 1 ] = 100 + i then
26118: LD_VAR 0 2
26122: PUSH
26123: LD_INT 2
26125: ARRAY
26126: PUSH
26127: LD_INT 1
26129: ARRAY
26130: PUSH
26131: LD_INT 100
26133: PUSH
26134: LD_VAR 0 8
26138: PLUS
26139: EQUAL
26140: IFFALSE 26185
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26142: LD_ADDR_VAR 0 2
26146: PUSH
26147: LD_VAR 0 2
26151: PPUSH
26152: LD_INT 2
26154: PPUSH
26155: LD_VAR 0 2
26159: PUSH
26160: LD_INT 2
26162: ARRAY
26163: PPUSH
26164: LD_INT 1
26166: PPUSH
26167: CALL_OW 3
26171: PPUSH
26172: CALL_OW 1
26176: ST_TO_ADDR
// tmp := 1 ;
26177: LD_ADDR_VAR 0 3
26181: PUSH
26182: LD_STRING 1
26184: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26185: LD_ADDR_VAR 0 6
26189: PUSH
26190: LD_VAR 0 6
26194: PUSH
26195: LD_VAR 0 3
26199: STR
26200: ST_TO_ADDR
// end ;
26201: GO 26097
26203: POP
26204: POP
// if isGameLoad then
26205: LD_VAR 0 1
26209: IFFALSE 26684
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26211: LD_ADDR_VAR 0 4
26215: PUSH
26216: LD_EXP 43
26220: PUSH
26221: LD_EXP 42
26225: PUSH
26226: LD_EXP 44
26230: PUSH
26231: LD_EXP 41
26235: PUSH
26236: LD_EXP 45
26240: PUSH
26241: LD_EXP 46
26245: PUSH
26246: LD_EXP 47
26250: PUSH
26251: LD_EXP 48
26255: PUSH
26256: LD_EXP 49
26260: PUSH
26261: LD_EXP 50
26265: PUSH
26266: LD_EXP 51
26270: PUSH
26271: LD_EXP 52
26275: PUSH
26276: LD_EXP 53
26280: PUSH
26281: LD_EXP 54
26285: PUSH
26286: LD_EXP 62
26290: PUSH
26291: LD_EXP 63
26295: PUSH
26296: LD_EXP 64
26300: PUSH
26301: LD_EXP 65
26305: PUSH
26306: LD_EXP 67
26310: PUSH
26311: LD_EXP 68
26315: PUSH
26316: LD_EXP 69
26320: PUSH
26321: LD_EXP 72
26325: PUSH
26326: LD_EXP 74
26330: PUSH
26331: LD_EXP 75
26335: PUSH
26336: LD_EXP 76
26340: PUSH
26341: LD_EXP 78
26345: PUSH
26346: LD_EXP 79
26350: PUSH
26351: LD_EXP 82
26355: PUSH
26356: LD_EXP 83
26360: PUSH
26361: LD_EXP 84
26365: PUSH
26366: LD_EXP 85
26370: PUSH
26371: LD_EXP 86
26375: PUSH
26376: LD_EXP 87
26380: PUSH
26381: LD_EXP 88
26385: PUSH
26386: LD_EXP 89
26390: PUSH
26391: LD_EXP 90
26395: PUSH
26396: LD_EXP 55
26400: PUSH
26401: LD_EXP 56
26405: PUSH
26406: LD_EXP 59
26410: PUSH
26411: LD_EXP 60
26415: PUSH
26416: LD_EXP 61
26420: PUSH
26421: LD_EXP 57
26425: PUSH
26426: LD_EXP 58
26430: PUSH
26431: LD_EXP 66
26435: PUSH
26436: LD_EXP 70
26440: PUSH
26441: LD_EXP 71
26445: PUSH
26446: LD_EXP 73
26450: PUSH
26451: LD_EXP 77
26455: PUSH
26456: LD_EXP 80
26460: PUSH
26461: LD_EXP 81
26465: PUSH
26466: LD_EXP 91
26470: PUSH
26471: LD_EXP 92
26475: PUSH
26476: LD_EXP 93
26480: PUSH
26481: LD_EXP 94
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: ST_TO_ADDR
// tmp :=  ;
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_STRING 
26549: ST_TO_ADDR
// for i = 1 to normalCounter do
26550: LD_ADDR_VAR 0 8
26554: PUSH
26555: DOUBLE
26556: LD_INT 1
26558: DEC
26559: ST_TO_ADDR
26560: LD_EXP 39
26564: PUSH
26565: FOR_TO
26566: IFFALSE 26602
// begin if flags [ i ] then
26568: LD_VAR 0 4
26572: PUSH
26573: LD_VAR 0 8
26577: ARRAY
26578: IFFALSE 26600
// tmp := tmp & i & ; ;
26580: LD_ADDR_VAR 0 3
26584: PUSH
26585: LD_VAR 0 3
26589: PUSH
26590: LD_VAR 0 8
26594: STR
26595: PUSH
26596: LD_STRING ;
26598: STR
26599: ST_TO_ADDR
// end ;
26600: GO 26565
26602: POP
26603: POP
// for i = 1 to hardcoreCounter do
26604: LD_ADDR_VAR 0 8
26608: PUSH
26609: DOUBLE
26610: LD_INT 1
26612: DEC
26613: ST_TO_ADDR
26614: LD_EXP 40
26618: PUSH
26619: FOR_TO
26620: IFFALSE 26666
// begin if flags [ normalCounter + i ] then
26622: LD_VAR 0 4
26626: PUSH
26627: LD_EXP 39
26631: PUSH
26632: LD_VAR 0 8
26636: PLUS
26637: ARRAY
26638: IFFALSE 26664
// tmp := tmp & ( 100 + i ) & ; ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_VAR 0 3
26649: PUSH
26650: LD_INT 100
26652: PUSH
26653: LD_VAR 0 8
26657: PLUS
26658: STR
26659: PUSH
26660: LD_STRING ;
26662: STR
26663: ST_TO_ADDR
// end ;
26664: GO 26619
26666: POP
26667: POP
// if tmp then
26668: LD_VAR 0 3
26672: IFFALSE 26684
// active := tmp ;
26674: LD_ADDR_VAR 0 7
26678: PUSH
26679: LD_VAR 0 3
26683: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26684: LD_STRING getStreamItemsFromMission("
26686: PUSH
26687: LD_VAR 0 5
26691: STR
26692: PUSH
26693: LD_STRING ","
26695: STR
26696: PUSH
26697: LD_VAR 0 6
26701: STR
26702: PUSH
26703: LD_STRING ","
26705: STR
26706: PUSH
26707: LD_VAR 0 7
26711: STR
26712: PUSH
26713: LD_STRING ")
26715: STR
26716: PPUSH
26717: CALL_OW 559
// end else
26721: GO 26730
// ToLua ( getStreamItemsFromMission("","","") ) ;
26723: LD_STRING getStreamItemsFromMission("","","")
26725: PPUSH
26726: CALL_OW 559
// end ;
26730: LD_VAR 0 2
26734: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26735: LD_EXP 38
26739: IFFALSE 26747
26741: PUSH
26742: LD_EXP 43
26746: AND
26747: IFFALSE 26871
26749: GO 26751
26751: DISABLE
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
// begin enable ;
26756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26757: LD_ADDR_VAR 0 2
26761: PUSH
26762: LD_INT 22
26764: PUSH
26765: LD_OWVAR 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 34
26779: PUSH
26780: LD_INT 7
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 34
26789: PUSH
26790: LD_INT 45
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 34
26799: PUSH
26800: LD_INT 28
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 34
26809: PUSH
26810: LD_INT 47
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PPUSH
26828: CALL_OW 69
26832: ST_TO_ADDR
// if not tmp then
26833: LD_VAR 0 2
26837: NOT
26838: IFFALSE 26842
// exit ;
26840: GO 26871
// for i in tmp do
26842: LD_ADDR_VAR 0 1
26846: PUSH
26847: LD_VAR 0 2
26851: PUSH
26852: FOR_IN
26853: IFFALSE 26869
// begin SetLives ( i , 0 ) ;
26855: LD_VAR 0 1
26859: PPUSH
26860: LD_INT 0
26862: PPUSH
26863: CALL_OW 234
// end ;
26867: GO 26852
26869: POP
26870: POP
// end ;
26871: PPOPN 2
26873: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26874: LD_EXP 38
26878: IFFALSE 26886
26880: PUSH
26881: LD_EXP 44
26885: AND
26886: IFFALSE 26970
26888: GO 26890
26890: DISABLE
26891: LD_INT 0
26893: PPUSH
26894: PPUSH
// begin enable ;
26895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26896: LD_ADDR_VAR 0 2
26900: PUSH
26901: LD_INT 22
26903: PUSH
26904: LD_OWVAR 2
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 32
26915: PUSH
26916: LD_INT 3
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PPUSH
26927: CALL_OW 69
26931: ST_TO_ADDR
// if not tmp then
26932: LD_VAR 0 2
26936: NOT
26937: IFFALSE 26941
// exit ;
26939: GO 26970
// for i in tmp do
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: LD_VAR 0 2
26950: PUSH
26951: FOR_IN
26952: IFFALSE 26968
// begin SetLives ( i , 0 ) ;
26954: LD_VAR 0 1
26958: PPUSH
26959: LD_INT 0
26961: PPUSH
26962: CALL_OW 234
// end ;
26966: GO 26951
26968: POP
26969: POP
// end ;
26970: PPOPN 2
26972: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26973: LD_EXP 38
26977: IFFALSE 26985
26979: PUSH
26980: LD_EXP 41
26984: AND
26985: IFFALSE 27078
26987: GO 26989
26989: DISABLE
26990: LD_INT 0
26992: PPUSH
// begin enable ;
26993: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26994: LD_ADDR_VAR 0 1
26998: PUSH
26999: LD_INT 22
27001: PUSH
27002: LD_OWVAR 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 25
27016: PUSH
27017: LD_INT 5
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 25
27026: PUSH
27027: LD_INT 9
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 25
27036: PUSH
27037: LD_INT 8
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PPUSH
27054: CALL_OW 69
27058: PUSH
27059: FOR_IN
27060: IFFALSE 27076
// begin SetClass ( i , 1 ) ;
27062: LD_VAR 0 1
27066: PPUSH
27067: LD_INT 1
27069: PPUSH
27070: CALL_OW 336
// end ;
27074: GO 27059
27076: POP
27077: POP
// end ;
27078: PPOPN 1
27080: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27081: LD_EXP 38
27085: IFFALSE 27093
27087: PUSH
27088: LD_EXP 42
27092: AND
27093: IFFALSE 27105
27095: PUSH
27096: LD_OWVAR 65
27100: PUSH
27101: LD_INT 7
27103: LESS
27104: AND
27105: IFFALSE 27119
27107: GO 27109
27109: DISABLE
// begin enable ;
27110: ENABLE
// game_speed := 7 ;
27111: LD_ADDR_OWVAR 65
27115: PUSH
27116: LD_INT 7
27118: ST_TO_ADDR
// end ;
27119: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27120: LD_EXP 38
27124: IFFALSE 27132
27126: PUSH
27127: LD_EXP 45
27131: AND
27132: IFFALSE 27334
27134: GO 27136
27136: DISABLE
27137: LD_INT 0
27139: PPUSH
27140: PPUSH
27141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27142: LD_ADDR_VAR 0 3
27146: PUSH
27147: LD_INT 81
27149: PUSH
27150: LD_OWVAR 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 21
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PPUSH
27173: CALL_OW 69
27177: ST_TO_ADDR
// if not tmp then
27178: LD_VAR 0 3
27182: NOT
27183: IFFALSE 27187
// exit ;
27185: GO 27334
// if tmp > 5 then
27187: LD_VAR 0 3
27191: PUSH
27192: LD_INT 5
27194: GREATER
27195: IFFALSE 27207
// k := 5 else
27197: LD_ADDR_VAR 0 2
27201: PUSH
27202: LD_INT 5
27204: ST_TO_ADDR
27205: GO 27217
// k := tmp ;
27207: LD_ADDR_VAR 0 2
27211: PUSH
27212: LD_VAR 0 3
27216: ST_TO_ADDR
// for i := 1 to k do
27217: LD_ADDR_VAR 0 1
27221: PUSH
27222: DOUBLE
27223: LD_INT 1
27225: DEC
27226: ST_TO_ADDR
27227: LD_VAR 0 2
27231: PUSH
27232: FOR_TO
27233: IFFALSE 27332
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27235: LD_VAR 0 3
27239: PUSH
27240: LD_VAR 0 1
27244: ARRAY
27245: PPUSH
27246: LD_VAR 0 1
27250: PUSH
27251: LD_INT 4
27253: MOD
27254: PUSH
27255: LD_INT 1
27257: PLUS
27258: PPUSH
27259: CALL_OW 259
27263: PUSH
27264: LD_INT 10
27266: LESS
27267: IFFALSE 27330
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27269: LD_VAR 0 3
27273: PUSH
27274: LD_VAR 0 1
27278: ARRAY
27279: PPUSH
27280: LD_VAR 0 1
27284: PUSH
27285: LD_INT 4
27287: MOD
27288: PUSH
27289: LD_INT 1
27291: PLUS
27292: PPUSH
27293: LD_VAR 0 3
27297: PUSH
27298: LD_VAR 0 1
27302: ARRAY
27303: PPUSH
27304: LD_VAR 0 1
27308: PUSH
27309: LD_INT 4
27311: MOD
27312: PUSH
27313: LD_INT 1
27315: PLUS
27316: PPUSH
27317: CALL_OW 259
27321: PUSH
27322: LD_INT 1
27324: PLUS
27325: PPUSH
27326: CALL_OW 237
27330: GO 27232
27332: POP
27333: POP
// end ;
27334: PPOPN 3
27336: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27337: LD_EXP 38
27341: IFFALSE 27349
27343: PUSH
27344: LD_EXP 46
27348: AND
27349: IFFALSE 27369
27351: GO 27353
27353: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27354: LD_INT 4
27356: PPUSH
27357: LD_OWVAR 2
27361: PPUSH
27362: LD_INT 0
27364: PPUSH
27365: CALL_OW 324
27369: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27370: LD_EXP 38
27374: IFFALSE 27382
27376: PUSH
27377: LD_EXP 75
27381: AND
27382: IFFALSE 27402
27384: GO 27386
27386: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27387: LD_INT 19
27389: PPUSH
27390: LD_OWVAR 2
27394: PPUSH
27395: LD_INT 0
27397: PPUSH
27398: CALL_OW 324
27402: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27403: LD_EXP 38
27407: IFFALSE 27415
27409: PUSH
27410: LD_EXP 47
27414: AND
27415: IFFALSE 27517
27417: GO 27419
27419: DISABLE
27420: LD_INT 0
27422: PPUSH
27423: PPUSH
// begin enable ;
27424: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27425: LD_ADDR_VAR 0 2
27429: PUSH
27430: LD_INT 22
27432: PUSH
27433: LD_OWVAR 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: LD_INT 34
27447: PUSH
27448: LD_INT 11
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 34
27457: PUSH
27458: LD_INT 30
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PPUSH
27474: CALL_OW 69
27478: ST_TO_ADDR
// if not tmp then
27479: LD_VAR 0 2
27483: NOT
27484: IFFALSE 27488
// exit ;
27486: GO 27517
// for i in tmp do
27488: LD_ADDR_VAR 0 1
27492: PUSH
27493: LD_VAR 0 2
27497: PUSH
27498: FOR_IN
27499: IFFALSE 27515
// begin SetLives ( i , 0 ) ;
27501: LD_VAR 0 1
27505: PPUSH
27506: LD_INT 0
27508: PPUSH
27509: CALL_OW 234
// end ;
27513: GO 27498
27515: POP
27516: POP
// end ;
27517: PPOPN 2
27519: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27520: LD_EXP 38
27524: IFFALSE 27532
27526: PUSH
27527: LD_EXP 48
27531: AND
27532: IFFALSE 27552
27534: GO 27536
27536: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27537: LD_INT 32
27539: PPUSH
27540: LD_OWVAR 2
27544: PPUSH
27545: LD_INT 0
27547: PPUSH
27548: CALL_OW 324
27552: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27553: LD_EXP 38
27557: IFFALSE 27565
27559: PUSH
27560: LD_EXP 49
27564: AND
27565: IFFALSE 27748
27567: GO 27569
27569: DISABLE
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
27574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27575: LD_ADDR_VAR 0 2
27579: PUSH
27580: LD_INT 22
27582: PUSH
27583: LD_OWVAR 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 33
27594: PUSH
27595: LD_INT 3
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PPUSH
27606: CALL_OW 69
27610: ST_TO_ADDR
// if not tmp then
27611: LD_VAR 0 2
27615: NOT
27616: IFFALSE 27620
// exit ;
27618: GO 27748
// side := 0 ;
27620: LD_ADDR_VAR 0 3
27624: PUSH
27625: LD_INT 0
27627: ST_TO_ADDR
// for i := 1 to 8 do
27628: LD_ADDR_VAR 0 1
27632: PUSH
27633: DOUBLE
27634: LD_INT 1
27636: DEC
27637: ST_TO_ADDR
27638: LD_INT 8
27640: PUSH
27641: FOR_TO
27642: IFFALSE 27692
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27644: LD_OWVAR 2
27648: PUSH
27649: LD_VAR 0 1
27653: NONEQUAL
27654: IFFALSE 27676
27656: PUSH
27657: LD_OWVAR 2
27661: PPUSH
27662: LD_VAR 0 1
27666: PPUSH
27667: CALL_OW 81
27671: PUSH
27672: LD_INT 2
27674: EQUAL
27675: AND
27676: IFFALSE 27690
// begin side := i ;
27678: LD_ADDR_VAR 0 3
27682: PUSH
27683: LD_VAR 0 1
27687: ST_TO_ADDR
// break ;
27688: GO 27692
// end ;
27690: GO 27641
27692: POP
27693: POP
// if not side then
27694: LD_VAR 0 3
27698: NOT
27699: IFFALSE 27703
// exit ;
27701: GO 27748
// for i := 1 to tmp do
27703: LD_ADDR_VAR 0 1
27707: PUSH
27708: DOUBLE
27709: LD_INT 1
27711: DEC
27712: ST_TO_ADDR
27713: LD_VAR 0 2
27717: PUSH
27718: FOR_TO
27719: IFFALSE 27746
// if Prob ( 60 ) then
27721: LD_INT 60
27723: PPUSH
27724: CALL_OW 13
27728: IFFALSE 27744
// SetSide ( i , side ) ;
27730: LD_VAR 0 1
27734: PPUSH
27735: LD_VAR 0 3
27739: PPUSH
27740: CALL_OW 235
27744: GO 27718
27746: POP
27747: POP
// end ;
27748: PPOPN 3
27750: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27751: LD_EXP 38
27755: IFFALSE 27763
27757: PUSH
27758: LD_EXP 51
27762: AND
27763: IFFALSE 27882
27765: GO 27767
27767: DISABLE
27768: LD_INT 0
27770: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27771: LD_ADDR_VAR 0 1
27775: PUSH
27776: LD_INT 22
27778: PUSH
27779: LD_OWVAR 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 21
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: LD_INT 23
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: PPUSH
27820: CALL_OW 69
27824: PUSH
27825: FOR_IN
27826: IFFALSE 27880
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27828: LD_VAR 0 1
27832: PPUSH
27833: CALL_OW 257
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: LD_INT 4
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: IN
27856: IFFALSE 27878
// SetClass ( un , rand ( 1 , 4 ) ) ;
27858: LD_VAR 0 1
27862: PPUSH
27863: LD_INT 1
27865: PPUSH
27866: LD_INT 4
27868: PPUSH
27869: CALL_OW 12
27873: PPUSH
27874: CALL_OW 336
27878: GO 27825
27880: POP
27881: POP
// end ;
27882: PPOPN 1
27884: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27885: LD_EXP 38
27889: IFFALSE 27897
27891: PUSH
27892: LD_EXP 50
27896: AND
27897: IFFALSE 27976
27899: GO 27901
27901: DISABLE
27902: LD_INT 0
27904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27905: LD_ADDR_VAR 0 1
27909: PUSH
27910: LD_INT 22
27912: PUSH
27913: LD_OWVAR 2
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 21
27924: PUSH
27925: LD_INT 3
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PPUSH
27936: CALL_OW 69
27940: ST_TO_ADDR
// if not tmp then
27941: LD_VAR 0 1
27945: NOT
27946: IFFALSE 27950
// exit ;
27948: GO 27976
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27950: LD_VAR 0 1
27954: PUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 12
27967: ARRAY
27968: PPUSH
27969: LD_INT 100
27971: PPUSH
27972: CALL_OW 234
// end ;
27976: PPOPN 1
27978: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27979: LD_EXP 38
27983: IFFALSE 27991
27985: PUSH
27986: LD_EXP 52
27990: AND
27991: IFFALSE 28089
27993: GO 27995
27995: DISABLE
27996: LD_INT 0
27998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27999: LD_ADDR_VAR 0 1
28003: PUSH
28004: LD_INT 22
28006: PUSH
28007: LD_OWVAR 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 21
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PPUSH
28030: CALL_OW 69
28034: ST_TO_ADDR
// if not tmp then
28035: LD_VAR 0 1
28039: NOT
28040: IFFALSE 28044
// exit ;
28042: GO 28089
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28044: LD_VAR 0 1
28048: PUSH
28049: LD_INT 1
28051: PPUSH
28052: LD_VAR 0 1
28056: PPUSH
28057: CALL_OW 12
28061: ARRAY
28062: PPUSH
28063: LD_INT 1
28065: PPUSH
28066: LD_INT 4
28068: PPUSH
28069: CALL_OW 12
28073: PPUSH
28074: LD_INT 3000
28076: PPUSH
28077: LD_INT 9000
28079: PPUSH
28080: CALL_OW 12
28084: PPUSH
28085: CALL_OW 492
// end ;
28089: PPOPN 1
28091: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28092: LD_EXP 38
28096: IFFALSE 28104
28098: PUSH
28099: LD_EXP 53
28103: AND
28104: IFFALSE 28124
28106: GO 28108
28108: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28109: LD_INT 1
28111: PPUSH
28112: LD_OWVAR 2
28116: PPUSH
28117: LD_INT 0
28119: PPUSH
28120: CALL_OW 324
28124: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28125: LD_EXP 38
28129: IFFALSE 28137
28131: PUSH
28132: LD_EXP 54
28136: AND
28137: IFFALSE 28220
28139: GO 28141
28141: DISABLE
28142: LD_INT 0
28144: PPUSH
28145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28146: LD_ADDR_VAR 0 2
28150: PUSH
28151: LD_INT 22
28153: PUSH
28154: LD_OWVAR 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 21
28165: PUSH
28166: LD_INT 3
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 69
28181: ST_TO_ADDR
// if not tmp then
28182: LD_VAR 0 2
28186: NOT
28187: IFFALSE 28191
// exit ;
28189: GO 28220
// for i in tmp do
28191: LD_ADDR_VAR 0 1
28195: PUSH
28196: LD_VAR 0 2
28200: PUSH
28201: FOR_IN
28202: IFFALSE 28218
// SetBLevel ( i , 10 ) ;
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_INT 10
28211: PPUSH
28212: CALL_OW 241
28216: GO 28201
28218: POP
28219: POP
// end ;
28220: PPOPN 2
28222: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28223: LD_EXP 38
28227: IFFALSE 28235
28229: PUSH
28230: LD_EXP 55
28234: AND
28235: IFFALSE 28346
28237: GO 28239
28239: DISABLE
28240: LD_INT 0
28242: PPUSH
28243: PPUSH
28244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28245: LD_ADDR_VAR 0 3
28249: PUSH
28250: LD_INT 22
28252: PUSH
28253: LD_OWVAR 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 25
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PPUSH
28276: CALL_OW 69
28280: ST_TO_ADDR
// if not tmp then
28281: LD_VAR 0 3
28285: NOT
28286: IFFALSE 28290
// exit ;
28288: GO 28346
// un := tmp [ rand ( 1 , tmp ) ] ;
28290: LD_ADDR_VAR 0 2
28294: PUSH
28295: LD_VAR 0 3
28299: PUSH
28300: LD_INT 1
28302: PPUSH
28303: LD_VAR 0 3
28307: PPUSH
28308: CALL_OW 12
28312: ARRAY
28313: ST_TO_ADDR
// if Crawls ( un ) then
28314: LD_VAR 0 2
28318: PPUSH
28319: CALL_OW 318
28323: IFFALSE 28334
// ComWalk ( un ) ;
28325: LD_VAR 0 2
28329: PPUSH
28330: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_INT 5
28341: PPUSH
28342: CALL_OW 336
// end ;
28346: PPOPN 3
28348: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28349: LD_EXP 38
28353: IFFALSE 28361
28355: PUSH
28356: LD_EXP 56
28360: AND
28361: IFFALSE 28373
28363: PUSH
28364: LD_OWVAR 67
28368: PUSH
28369: LD_INT 4
28371: LESS
28372: AND
28373: IFFALSE 28392
28375: GO 28377
28377: DISABLE
// begin Difficulty := Difficulty + 1 ;
28378: LD_ADDR_OWVAR 67
28382: PUSH
28383: LD_OWVAR 67
28387: PUSH
28388: LD_INT 1
28390: PLUS
28391: ST_TO_ADDR
// end ;
28392: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28393: LD_EXP 38
28397: IFFALSE 28405
28399: PUSH
28400: LD_EXP 57
28404: AND
28405: IFFALSE 28508
28407: GO 28409
28409: DISABLE
28410: LD_INT 0
28412: PPUSH
// begin for i := 1 to 5 do
28413: LD_ADDR_VAR 0 1
28417: PUSH
28418: DOUBLE
28419: LD_INT 1
28421: DEC
28422: ST_TO_ADDR
28423: LD_INT 5
28425: PUSH
28426: FOR_TO
28427: IFFALSE 28506
// begin uc_nation := nation_nature ;
28429: LD_ADDR_OWVAR 21
28433: PUSH
28434: LD_INT 0
28436: ST_TO_ADDR
// uc_side := 0 ;
28437: LD_ADDR_OWVAR 20
28441: PUSH
28442: LD_INT 0
28444: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28445: LD_ADDR_OWVAR 29
28449: PUSH
28450: LD_INT 12
28452: PUSH
28453: LD_INT 12
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: ST_TO_ADDR
// hc_agressivity := 20 ;
28460: LD_ADDR_OWVAR 35
28464: PUSH
28465: LD_INT 20
28467: ST_TO_ADDR
// hc_class := class_tiger ;
28468: LD_ADDR_OWVAR 28
28472: PUSH
28473: LD_INT 14
28475: ST_TO_ADDR
// hc_gallery :=  ;
28476: LD_ADDR_OWVAR 33
28480: PUSH
28481: LD_STRING 
28483: ST_TO_ADDR
// hc_name :=  ;
28484: LD_ADDR_OWVAR 26
28488: PUSH
28489: LD_STRING 
28491: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28492: CALL_OW 44
28496: PPUSH
28497: LD_INT 0
28499: PPUSH
28500: CALL_OW 51
// end ;
28504: GO 28426
28506: POP
28507: POP
// end ;
28508: PPOPN 1
28510: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28511: LD_EXP 38
28515: IFFALSE 28523
28517: PUSH
28518: LD_EXP 58
28522: AND
28523: IFFALSE 28532
28525: GO 28527
28527: DISABLE
// StreamSibBomb ;
28528: CALL 28533 0 0
28532: END
// export function StreamSibBomb ; var i , x , y ; begin
28533: LD_INT 0
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
// result := false ;
28539: LD_ADDR_VAR 0 1
28543: PUSH
28544: LD_INT 0
28546: ST_TO_ADDR
// for i := 1 to 16 do
28547: LD_ADDR_VAR 0 2
28551: PUSH
28552: DOUBLE
28553: LD_INT 1
28555: DEC
28556: ST_TO_ADDR
28557: LD_INT 16
28559: PUSH
28560: FOR_TO
28561: IFFALSE 28760
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28563: LD_ADDR_VAR 0 3
28567: PUSH
28568: LD_INT 10
28570: PUSH
28571: LD_INT 20
28573: PUSH
28574: LD_INT 30
28576: PUSH
28577: LD_INT 40
28579: PUSH
28580: LD_INT 50
28582: PUSH
28583: LD_INT 60
28585: PUSH
28586: LD_INT 70
28588: PUSH
28589: LD_INT 80
28591: PUSH
28592: LD_INT 90
28594: PUSH
28595: LD_INT 100
28597: PUSH
28598: LD_INT 110
28600: PUSH
28601: LD_INT 120
28603: PUSH
28604: LD_INT 130
28606: PUSH
28607: LD_INT 140
28609: PUSH
28610: LD_INT 150
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: PPUSH
28633: LD_INT 15
28635: PPUSH
28636: CALL_OW 12
28640: ARRAY
28641: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28642: LD_ADDR_VAR 0 4
28646: PUSH
28647: LD_INT 10
28649: PUSH
28650: LD_INT 20
28652: PUSH
28653: LD_INT 30
28655: PUSH
28656: LD_INT 40
28658: PUSH
28659: LD_INT 50
28661: PUSH
28662: LD_INT 60
28664: PUSH
28665: LD_INT 70
28667: PUSH
28668: LD_INT 80
28670: PUSH
28671: LD_INT 90
28673: PUSH
28674: LD_INT 100
28676: PUSH
28677: LD_INT 110
28679: PUSH
28680: LD_INT 120
28682: PUSH
28683: LD_INT 130
28685: PUSH
28686: LD_INT 140
28688: PUSH
28689: LD_INT 150
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: PPUSH
28712: LD_INT 15
28714: PPUSH
28715: CALL_OW 12
28719: ARRAY
28720: ST_TO_ADDR
// if ValidHex ( x , y ) then
28721: LD_VAR 0 3
28725: PPUSH
28726: LD_VAR 0 4
28730: PPUSH
28731: CALL_OW 488
28735: IFFALSE 28758
// begin result := [ x , y ] ;
28737: LD_ADDR_VAR 0 1
28741: PUSH
28742: LD_VAR 0 3
28746: PUSH
28747: LD_VAR 0 4
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: ST_TO_ADDR
// break ;
28756: GO 28760
// end ; end ;
28758: GO 28560
28760: POP
28761: POP
// if result then
28762: LD_VAR 0 1
28766: IFFALSE 28826
// begin ToLua ( playSibBomb() ) ;
28768: LD_STRING playSibBomb()
28770: PPUSH
28771: CALL_OW 559
// wait ( 0 0$14 ) ;
28775: LD_INT 490
28777: PPUSH
28778: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28782: LD_VAR 0 1
28786: PUSH
28787: LD_INT 1
28789: ARRAY
28790: PPUSH
28791: LD_VAR 0 1
28795: PUSH
28796: LD_INT 2
28798: ARRAY
28799: PPUSH
28800: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28804: LD_VAR 0 1
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: PPUSH
28813: LD_VAR 0 1
28817: PUSH
28818: LD_INT 2
28820: ARRAY
28821: PPUSH
28822: CALL_OW 429
// end ; end ;
28826: LD_VAR 0 1
28830: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28831: LD_EXP 38
28835: IFFALSE 28843
28837: PUSH
28838: LD_EXP 60
28842: AND
28843: IFFALSE 28855
28845: GO 28847
28847: DISABLE
// YouLost (  ) ;
28848: LD_STRING 
28850: PPUSH
28851: CALL_OW 104
28855: END
// every 0 0$1 trigger StreamModeActive and sFog do
28856: LD_EXP 38
28860: IFFALSE 28868
28862: PUSH
28863: LD_EXP 59
28867: AND
28868: IFFALSE 28882
28870: GO 28872
28872: DISABLE
// FogOff ( your_side ) ;
28873: LD_OWVAR 2
28877: PPUSH
28878: CALL_OW 344
28882: END
// every 0 0$1 trigger StreamModeActive and sSun do
28883: LD_EXP 38
28887: IFFALSE 28895
28889: PUSH
28890: LD_EXP 61
28894: AND
28895: IFFALSE 28923
28897: GO 28899
28899: DISABLE
// begin solar_recharge_percent := 0 ;
28900: LD_ADDR_OWVAR 79
28904: PUSH
28905: LD_INT 0
28907: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28908: LD_INT 10500
28910: PPUSH
28911: CALL_OW 67
// solar_recharge_percent := 100 ;
28915: LD_ADDR_OWVAR 79
28919: PUSH
28920: LD_INT 100
28922: ST_TO_ADDR
// end ;
28923: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28924: LD_EXP 38
28928: IFFALSE 28936
28930: PUSH
28931: LD_EXP 62
28935: AND
28936: IFFALSE 29175
28938: GO 28940
28940: DISABLE
28941: LD_INT 0
28943: PPUSH
28944: PPUSH
28945: PPUSH
// begin tmp := [ ] ;
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: EMPTY
28952: ST_TO_ADDR
// for i := 1 to 6 do
28953: LD_ADDR_VAR 0 1
28957: PUSH
28958: DOUBLE
28959: LD_INT 1
28961: DEC
28962: ST_TO_ADDR
28963: LD_INT 6
28965: PUSH
28966: FOR_TO
28967: IFFALSE 29072
// begin uc_nation := nation_nature ;
28969: LD_ADDR_OWVAR 21
28973: PUSH
28974: LD_INT 0
28976: ST_TO_ADDR
// uc_side := 0 ;
28977: LD_ADDR_OWVAR 20
28981: PUSH
28982: LD_INT 0
28984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28985: LD_ADDR_OWVAR 29
28989: PUSH
28990: LD_INT 12
28992: PUSH
28993: LD_INT 12
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: ST_TO_ADDR
// hc_agressivity := 20 ;
29000: LD_ADDR_OWVAR 35
29004: PUSH
29005: LD_INT 20
29007: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29008: LD_ADDR_OWVAR 28
29012: PUSH
29013: LD_INT 17
29015: ST_TO_ADDR
// hc_gallery :=  ;
29016: LD_ADDR_OWVAR 33
29020: PUSH
29021: LD_STRING 
29023: ST_TO_ADDR
// hc_name :=  ;
29024: LD_ADDR_OWVAR 26
29028: PUSH
29029: LD_STRING 
29031: ST_TO_ADDR
// un := CreateHuman ;
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: CALL_OW 44
29041: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29042: LD_VAR 0 2
29046: PPUSH
29047: LD_INT 1
29049: PPUSH
29050: CALL_OW 51
// tmp := tmp ^ un ;
29054: LD_ADDR_VAR 0 3
29058: PUSH
29059: LD_VAR 0 3
29063: PUSH
29064: LD_VAR 0 2
29068: ADD
29069: ST_TO_ADDR
// end ;
29070: GO 28966
29072: POP
29073: POP
// repeat wait ( 0 0$1 ) ;
29074: LD_INT 35
29076: PPUSH
29077: CALL_OW 67
// for un in tmp do
29081: LD_ADDR_VAR 0 2
29085: PUSH
29086: LD_VAR 0 3
29090: PUSH
29091: FOR_IN
29092: IFFALSE 29166
// begin if IsDead ( un ) then
29094: LD_VAR 0 2
29098: PPUSH
29099: CALL_OW 301
29103: IFFALSE 29123
// begin tmp := tmp diff un ;
29105: LD_ADDR_VAR 0 3
29109: PUSH
29110: LD_VAR 0 3
29114: PUSH
29115: LD_VAR 0 2
29119: DIFF
29120: ST_TO_ADDR
// continue ;
29121: GO 29091
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29123: LD_VAR 0 2
29127: PPUSH
29128: LD_INT 3
29130: PUSH
29131: LD_INT 22
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: PPUSH
29150: LD_VAR 0 2
29154: PPUSH
29155: CALL_OW 74
29159: PPUSH
29160: CALL_OW 115
// end ;
29164: GO 29091
29166: POP
29167: POP
// until not tmp ;
29168: LD_VAR 0 3
29172: NOT
29173: IFFALSE 29074
// end ;
29175: PPOPN 3
29177: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29178: LD_EXP 38
29182: IFFALSE 29190
29184: PUSH
29185: LD_EXP 63
29189: AND
29190: IFFALSE 29244
29192: GO 29194
29194: DISABLE
// begin ToLua ( displayTroll(); ) ;
29195: LD_STRING displayTroll();
29197: PPUSH
29198: CALL_OW 559
// wait ( 3 3$00 ) ;
29202: LD_INT 6300
29204: PPUSH
29205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29209: LD_STRING hideTroll();
29211: PPUSH
29212: CALL_OW 559
// wait ( 1 1$00 ) ;
29216: LD_INT 2100
29218: PPUSH
29219: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29223: LD_STRING displayTroll();
29225: PPUSH
29226: CALL_OW 559
// wait ( 1 1$00 ) ;
29230: LD_INT 2100
29232: PPUSH
29233: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29237: LD_STRING hideTroll();
29239: PPUSH
29240: CALL_OW 559
// end ;
29244: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29245: LD_EXP 38
29249: IFFALSE 29257
29251: PUSH
29252: LD_EXP 64
29256: AND
29257: IFFALSE 29320
29259: GO 29261
29261: DISABLE
29262: LD_INT 0
29264: PPUSH
// begin p := 0 ;
29265: LD_ADDR_VAR 0 1
29269: PUSH
29270: LD_INT 0
29272: ST_TO_ADDR
// repeat game_speed := 1 ;
29273: LD_ADDR_OWVAR 65
29277: PUSH
29278: LD_INT 1
29280: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29281: LD_INT 35
29283: PPUSH
29284: CALL_OW 67
// p := p + 1 ;
29288: LD_ADDR_VAR 0 1
29292: PUSH
29293: LD_VAR 0 1
29297: PUSH
29298: LD_INT 1
29300: PLUS
29301: ST_TO_ADDR
// until p >= 60 ;
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 60
29309: GREATEREQUAL
29310: IFFALSE 29273
// game_speed := 4 ;
29312: LD_ADDR_OWVAR 65
29316: PUSH
29317: LD_INT 4
29319: ST_TO_ADDR
// end ;
29320: PPOPN 1
29322: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29323: LD_EXP 38
29327: IFFALSE 29335
29329: PUSH
29330: LD_EXP 65
29334: AND
29335: IFFALSE 29481
29337: GO 29339
29339: DISABLE
29340: LD_INT 0
29342: PPUSH
29343: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29344: LD_ADDR_VAR 0 1
29348: PUSH
29349: LD_INT 22
29351: PUSH
29352: LD_OWVAR 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: LD_INT 30
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 30
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PPUSH
29393: CALL_OW 69
29397: ST_TO_ADDR
// if not depot then
29398: LD_VAR 0 1
29402: NOT
29403: IFFALSE 29407
// exit ;
29405: GO 29481
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29407: LD_ADDR_VAR 0 2
29411: PUSH
29412: LD_VAR 0 1
29416: PUSH
29417: LD_INT 1
29419: PPUSH
29420: LD_VAR 0 1
29424: PPUSH
29425: CALL_OW 12
29429: ARRAY
29430: PPUSH
29431: CALL_OW 274
29435: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29436: LD_VAR 0 2
29440: PPUSH
29441: LD_INT 1
29443: PPUSH
29444: LD_INT 0
29446: PPUSH
29447: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29451: LD_VAR 0 2
29455: PPUSH
29456: LD_INT 2
29458: PPUSH
29459: LD_INT 0
29461: PPUSH
29462: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29466: LD_VAR 0 2
29470: PPUSH
29471: LD_INT 3
29473: PPUSH
29474: LD_INT 0
29476: PPUSH
29477: CALL_OW 277
// end ;
29481: PPOPN 2
29483: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29484: LD_EXP 38
29488: IFFALSE 29496
29490: PUSH
29491: LD_EXP 66
29495: AND
29496: IFFALSE 29593
29498: GO 29500
29500: DISABLE
29501: LD_INT 0
29503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29504: LD_ADDR_VAR 0 1
29508: PUSH
29509: LD_INT 22
29511: PUSH
29512: LD_OWVAR 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 21
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 3
29533: PUSH
29534: LD_INT 23
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: ST_TO_ADDR
// if not tmp then
29558: LD_VAR 0 1
29562: NOT
29563: IFFALSE 29567
// exit ;
29565: GO 29593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29567: LD_VAR 0 1
29571: PUSH
29572: LD_INT 1
29574: PPUSH
29575: LD_VAR 0 1
29579: PPUSH
29580: CALL_OW 12
29584: ARRAY
29585: PPUSH
29586: LD_INT 200
29588: PPUSH
29589: CALL_OW 234
// end ;
29593: PPOPN 1
29595: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29596: LD_EXP 38
29600: IFFALSE 29608
29602: PUSH
29603: LD_EXP 67
29607: AND
29608: IFFALSE 29687
29610: GO 29612
29612: DISABLE
29613: LD_INT 0
29615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29616: LD_ADDR_VAR 0 1
29620: PUSH
29621: LD_INT 22
29623: PUSH
29624: LD_OWVAR 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 21
29635: PUSH
29636: LD_INT 2
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ST_TO_ADDR
// if not tmp then
29652: LD_VAR 0 1
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29661: LD_VAR 0 1
29665: PUSH
29666: LD_INT 1
29668: PPUSH
29669: LD_VAR 0 1
29673: PPUSH
29674: CALL_OW 12
29678: ARRAY
29679: PPUSH
29680: LD_INT 60
29682: PPUSH
29683: CALL_OW 234
// end ;
29687: PPOPN 1
29689: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29690: LD_EXP 38
29694: IFFALSE 29702
29696: PUSH
29697: LD_EXP 68
29701: AND
29702: IFFALSE 29801
29704: GO 29706
29706: DISABLE
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
// begin enable ;
29711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29712: LD_ADDR_VAR 0 1
29716: PUSH
29717: LD_INT 22
29719: PUSH
29720: LD_OWVAR 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 61
29731: PUSH
29732: EMPTY
29733: LIST
29734: PUSH
29735: LD_INT 33
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: PPUSH
29750: CALL_OW 69
29754: ST_TO_ADDR
// if not tmp then
29755: LD_VAR 0 1
29759: NOT
29760: IFFALSE 29764
// exit ;
29762: GO 29801
// for i in tmp do
29764: LD_ADDR_VAR 0 2
29768: PUSH
29769: LD_VAR 0 1
29773: PUSH
29774: FOR_IN
29775: IFFALSE 29799
// if IsControledBy ( i ) then
29777: LD_VAR 0 2
29781: PPUSH
29782: CALL_OW 312
29786: IFFALSE 29797
// ComUnlink ( i ) ;
29788: LD_VAR 0 2
29792: PPUSH
29793: CALL_OW 136
29797: GO 29774
29799: POP
29800: POP
// end ;
29801: PPOPN 2
29803: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29804: LD_EXP 38
29808: IFFALSE 29816
29810: PUSH
29811: LD_EXP 69
29815: AND
29816: IFFALSE 29956
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
29824: PPUSH
// begin ToLua ( displayPowell(); ) ;
29825: LD_STRING displayPowell();
29827: PPUSH
29828: CALL_OW 559
// uc_side := 0 ;
29832: LD_ADDR_OWVAR 20
29836: PUSH
29837: LD_INT 0
29839: ST_TO_ADDR
// uc_nation := 2 ;
29840: LD_ADDR_OWVAR 21
29844: PUSH
29845: LD_INT 2
29847: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29848: LD_ADDR_OWVAR 37
29852: PUSH
29853: LD_INT 14
29855: ST_TO_ADDR
// vc_engine := engine_siberite ;
29856: LD_ADDR_OWVAR 39
29860: PUSH
29861: LD_INT 3
29863: ST_TO_ADDR
// vc_control := control_apeman ;
29864: LD_ADDR_OWVAR 38
29868: PUSH
29869: LD_INT 5
29871: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29872: LD_ADDR_OWVAR 40
29876: PUSH
29877: LD_INT 29
29879: ST_TO_ADDR
// un := CreateVehicle ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: CALL_OW 45
29889: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29890: LD_VAR 0 2
29894: PPUSH
29895: LD_INT 1
29897: PPUSH
29898: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29902: LD_INT 35
29904: PPUSH
29905: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29909: LD_VAR 0 2
29913: PPUSH
29914: LD_INT 22
29916: PUSH
29917: LD_OWVAR 2
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PPUSH
29926: CALL_OW 69
29930: PPUSH
29931: LD_VAR 0 2
29935: PPUSH
29936: CALL_OW 74
29940: PPUSH
29941: CALL_OW 115
// until IsDead ( un ) ;
29945: LD_VAR 0 2
29949: PPUSH
29950: CALL_OW 301
29954: IFFALSE 29902
// end ;
29956: PPOPN 2
29958: END
// every 0 0$1 trigger StreamModeActive and sStu do
29959: LD_EXP 38
29963: IFFALSE 29971
29965: PUSH
29966: LD_EXP 77
29970: AND
29971: IFFALSE 29987
29973: GO 29975
29975: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29976: LD_STRING displayStucuk();
29978: PPUSH
29979: CALL_OW 559
// ResetFog ;
29983: CALL_OW 335
// end ;
29987: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29988: LD_EXP 38
29992: IFFALSE 30000
29994: PUSH
29995: LD_EXP 70
29999: AND
30000: IFFALSE 30141
30002: GO 30004
30004: DISABLE
30005: LD_INT 0
30007: PPUSH
30008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30009: LD_ADDR_VAR 0 2
30013: PUSH
30014: LD_INT 22
30016: PUSH
30017: LD_OWVAR 2
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 21
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PPUSH
30040: CALL_OW 69
30044: ST_TO_ADDR
// if not tmp then
30045: LD_VAR 0 2
30049: NOT
30050: IFFALSE 30054
// exit ;
30052: GO 30141
// un := tmp [ rand ( 1 , tmp ) ] ;
30054: LD_ADDR_VAR 0 1
30058: PUSH
30059: LD_VAR 0 2
30063: PUSH
30064: LD_INT 1
30066: PPUSH
30067: LD_VAR 0 2
30071: PPUSH
30072: CALL_OW 12
30076: ARRAY
30077: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30078: LD_VAR 0 1
30082: PPUSH
30083: LD_INT 0
30085: PPUSH
30086: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30090: LD_VAR 0 1
30094: PPUSH
30095: LD_OWVAR 3
30099: PUSH
30100: LD_VAR 0 1
30104: DIFF
30105: PPUSH
30106: LD_VAR 0 1
30110: PPUSH
30111: CALL_OW 74
30115: PPUSH
30116: CALL_OW 115
// wait ( 0 0$20 ) ;
30120: LD_INT 700
30122: PPUSH
30123: CALL_OW 67
// SetSide ( un , your_side ) ;
30127: LD_VAR 0 1
30131: PPUSH
30132: LD_OWVAR 2
30136: PPUSH
30137: CALL_OW 235
// end ;
30141: PPOPN 2
30143: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30144: LD_EXP 38
30148: IFFALSE 30156
30150: PUSH
30151: LD_EXP 71
30155: AND
30156: IFFALSE 30262
30158: GO 30160
30160: DISABLE
30161: LD_INT 0
30163: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30164: LD_ADDR_VAR 0 1
30168: PUSH
30169: LD_INT 22
30171: PUSH
30172: LD_OWVAR 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: LD_INT 30
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 30
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PPUSH
30213: CALL_OW 69
30217: ST_TO_ADDR
// if not depot then
30218: LD_VAR 0 1
30222: NOT
30223: IFFALSE 30227
// exit ;
30225: GO 30262
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30227: LD_VAR 0 1
30231: PUSH
30232: LD_INT 1
30234: ARRAY
30235: PPUSH
30236: CALL_OW 250
30240: PPUSH
30241: LD_VAR 0 1
30245: PUSH
30246: LD_INT 1
30248: ARRAY
30249: PPUSH
30250: CALL_OW 251
30254: PPUSH
30255: LD_INT 70
30257: PPUSH
30258: CALL_OW 495
// end ;
30262: PPOPN 1
30264: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30265: LD_EXP 38
30269: IFFALSE 30277
30271: PUSH
30272: LD_EXP 72
30276: AND
30277: IFFALSE 30488
30279: GO 30281
30281: DISABLE
30282: LD_INT 0
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30289: LD_ADDR_VAR 0 5
30293: PUSH
30294: LD_INT 22
30296: PUSH
30297: LD_OWVAR 2
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 21
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: ST_TO_ADDR
// if not tmp then
30325: LD_VAR 0 5
30329: NOT
30330: IFFALSE 30334
// exit ;
30332: GO 30488
// for i in tmp do
30334: LD_ADDR_VAR 0 1
30338: PUSH
30339: LD_VAR 0 5
30343: PUSH
30344: FOR_IN
30345: IFFALSE 30486
// begin d := rand ( 0 , 5 ) ;
30347: LD_ADDR_VAR 0 4
30351: PUSH
30352: LD_INT 0
30354: PPUSH
30355: LD_INT 5
30357: PPUSH
30358: CALL_OW 12
30362: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30363: LD_ADDR_VAR 0 2
30367: PUSH
30368: LD_VAR 0 1
30372: PPUSH
30373: CALL_OW 250
30377: PPUSH
30378: LD_VAR 0 4
30382: PPUSH
30383: LD_INT 3
30385: PPUSH
30386: LD_INT 12
30388: PPUSH
30389: CALL_OW 12
30393: PPUSH
30394: CALL_OW 272
30398: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_VAR 0 1
30408: PPUSH
30409: CALL_OW 251
30413: PPUSH
30414: LD_VAR 0 4
30418: PPUSH
30419: LD_INT 3
30421: PPUSH
30422: LD_INT 12
30424: PPUSH
30425: CALL_OW 12
30429: PPUSH
30430: CALL_OW 273
30434: ST_TO_ADDR
// if ValidHex ( x , y ) then
30435: LD_VAR 0 2
30439: PPUSH
30440: LD_VAR 0 3
30444: PPUSH
30445: CALL_OW 488
30449: IFFALSE 30484
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30451: LD_VAR 0 1
30455: PPUSH
30456: LD_VAR 0 2
30460: PPUSH
30461: LD_VAR 0 3
30465: PPUSH
30466: LD_INT 3
30468: PPUSH
30469: LD_INT 6
30471: PPUSH
30472: CALL_OW 12
30476: PPUSH
30477: LD_INT 1
30479: PPUSH
30480: CALL_OW 483
// end ;
30484: GO 30344
30486: POP
30487: POP
// end ;
30488: PPOPN 5
30490: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30491: LD_EXP 38
30495: IFFALSE 30503
30497: PUSH
30498: LD_EXP 73
30502: AND
30503: IFFALSE 30597
30505: GO 30507
30507: DISABLE
30508: LD_INT 0
30510: PPUSH
30511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30512: LD_ADDR_VAR 0 2
30516: PUSH
30517: LD_INT 22
30519: PUSH
30520: LD_OWVAR 2
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 32
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 21
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: PPUSH
30554: CALL_OW 69
30558: ST_TO_ADDR
// if not tmp then
30559: LD_VAR 0 2
30563: NOT
30564: IFFALSE 30568
// exit ;
30566: GO 30597
// for i in tmp do
30568: LD_ADDR_VAR 0 1
30572: PUSH
30573: LD_VAR 0 2
30577: PUSH
30578: FOR_IN
30579: IFFALSE 30595
// SetFuel ( i , 0 ) ;
30581: LD_VAR 0 1
30585: PPUSH
30586: LD_INT 0
30588: PPUSH
30589: CALL_OW 240
30593: GO 30578
30595: POP
30596: POP
// end ;
30597: PPOPN 2
30599: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30600: LD_EXP 38
30604: IFFALSE 30612
30606: PUSH
30607: LD_EXP 74
30611: AND
30612: IFFALSE 30678
30614: GO 30616
30616: DISABLE
30617: LD_INT 0
30619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_INT 22
30627: PUSH
30628: LD_OWVAR 2
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 30
30639: PUSH
30640: LD_INT 29
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PPUSH
30651: CALL_OW 69
30655: ST_TO_ADDR
// if not tmp then
30656: LD_VAR 0 1
30660: NOT
30661: IFFALSE 30665
// exit ;
30663: GO 30678
// DestroyUnit ( tmp [ 1 ] ) ;
30665: LD_VAR 0 1
30669: PUSH
30670: LD_INT 1
30672: ARRAY
30673: PPUSH
30674: CALL_OW 65
// end ;
30678: PPOPN 1
30680: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30681: LD_EXP 38
30685: IFFALSE 30693
30687: PUSH
30688: LD_EXP 76
30692: AND
30693: IFFALSE 30822
30695: GO 30697
30697: DISABLE
30698: LD_INT 0
30700: PPUSH
// begin uc_side := 0 ;
30701: LD_ADDR_OWVAR 20
30705: PUSH
30706: LD_INT 0
30708: ST_TO_ADDR
// uc_nation := nation_arabian ;
30709: LD_ADDR_OWVAR 21
30713: PUSH
30714: LD_INT 2
30716: ST_TO_ADDR
// hc_gallery :=  ;
30717: LD_ADDR_OWVAR 33
30721: PUSH
30722: LD_STRING 
30724: ST_TO_ADDR
// hc_name :=  ;
30725: LD_ADDR_OWVAR 26
30729: PUSH
30730: LD_STRING 
30732: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30733: LD_INT 1
30735: PPUSH
30736: LD_INT 11
30738: PPUSH
30739: LD_INT 10
30741: PPUSH
30742: CALL_OW 380
// un := CreateHuman ;
30746: LD_ADDR_VAR 0 1
30750: PUSH
30751: CALL_OW 44
30755: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30756: LD_VAR 0 1
30760: PPUSH
30761: LD_INT 1
30763: PPUSH
30764: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30768: LD_INT 35
30770: PPUSH
30771: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_INT 22
30782: PUSH
30783: LD_OWVAR 2
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PPUSH
30792: CALL_OW 69
30796: PPUSH
30797: LD_VAR 0 1
30801: PPUSH
30802: CALL_OW 74
30806: PPUSH
30807: CALL_OW 115
// until IsDead ( un ) ;
30811: LD_VAR 0 1
30815: PPUSH
30816: CALL_OW 301
30820: IFFALSE 30768
// end ;
30822: PPOPN 1
30824: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30825: LD_EXP 38
30829: IFFALSE 30837
30831: PUSH
30832: LD_EXP 78
30836: AND
30837: IFFALSE 30849
30839: GO 30841
30841: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30842: LD_STRING earthquake(getX(game), 0, 32)
30844: PPUSH
30845: CALL_OW 559
30849: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30850: LD_EXP 38
30854: IFFALSE 30862
30856: PUSH
30857: LD_EXP 79
30861: AND
30862: IFFALSE 30953
30864: GO 30866
30866: DISABLE
30867: LD_INT 0
30869: PPUSH
// begin enable ;
30870: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30871: LD_ADDR_VAR 0 1
30875: PUSH
30876: LD_INT 22
30878: PUSH
30879: LD_OWVAR 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 21
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 33
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: PPUSH
30913: CALL_OW 69
30917: ST_TO_ADDR
// if not tmp then
30918: LD_VAR 0 1
30922: NOT
30923: IFFALSE 30927
// exit ;
30925: GO 30953
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30927: LD_VAR 0 1
30931: PUSH
30932: LD_INT 1
30934: PPUSH
30935: LD_VAR 0 1
30939: PPUSH
30940: CALL_OW 12
30944: ARRAY
30945: PPUSH
30946: LD_INT 1
30948: PPUSH
30949: CALL_OW 234
// end ;
30953: PPOPN 1
30955: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30956: LD_EXP 38
30960: IFFALSE 30968
30962: PUSH
30963: LD_EXP 80
30967: AND
30968: IFFALSE 31109
30970: GO 30972
30972: DISABLE
30973: LD_INT 0
30975: PPUSH
30976: PPUSH
30977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: LD_INT 22
30985: PUSH
30986: LD_OWVAR 2
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 25
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PPUSH
31009: CALL_OW 69
31013: ST_TO_ADDR
// if not tmp then
31014: LD_VAR 0 3
31018: NOT
31019: IFFALSE 31023
// exit ;
31021: GO 31109
// un := tmp [ rand ( 1 , tmp ) ] ;
31023: LD_ADDR_VAR 0 2
31027: PUSH
31028: LD_VAR 0 3
31032: PUSH
31033: LD_INT 1
31035: PPUSH
31036: LD_VAR 0 3
31040: PPUSH
31041: CALL_OW 12
31045: ARRAY
31046: ST_TO_ADDR
// if Crawls ( un ) then
31047: LD_VAR 0 2
31051: PPUSH
31052: CALL_OW 318
31056: IFFALSE 31067
// ComWalk ( un ) ;
31058: LD_VAR 0 2
31062: PPUSH
31063: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31067: LD_VAR 0 2
31071: PPUSH
31072: LD_INT 9
31074: PPUSH
31075: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31079: LD_INT 28
31081: PPUSH
31082: LD_OWVAR 2
31086: PPUSH
31087: LD_INT 2
31089: PPUSH
31090: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31094: LD_INT 29
31096: PPUSH
31097: LD_OWVAR 2
31101: PPUSH
31102: LD_INT 2
31104: PPUSH
31105: CALL_OW 322
// end ;
31109: PPOPN 3
31111: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31112: LD_EXP 38
31116: IFFALSE 31124
31118: PUSH
31119: LD_EXP 81
31123: AND
31124: IFFALSE 31235
31126: GO 31128
31128: DISABLE
31129: LD_INT 0
31131: PPUSH
31132: PPUSH
31133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31134: LD_ADDR_VAR 0 3
31138: PUSH
31139: LD_INT 22
31141: PUSH
31142: LD_OWVAR 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 25
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PPUSH
31165: CALL_OW 69
31169: ST_TO_ADDR
// if not tmp then
31170: LD_VAR 0 3
31174: NOT
31175: IFFALSE 31179
// exit ;
31177: GO 31235
// un := tmp [ rand ( 1 , tmp ) ] ;
31179: LD_ADDR_VAR 0 2
31183: PUSH
31184: LD_VAR 0 3
31188: PUSH
31189: LD_INT 1
31191: PPUSH
31192: LD_VAR 0 3
31196: PPUSH
31197: CALL_OW 12
31201: ARRAY
31202: ST_TO_ADDR
// if Crawls ( un ) then
31203: LD_VAR 0 2
31207: PPUSH
31208: CALL_OW 318
31212: IFFALSE 31223
// ComWalk ( un ) ;
31214: LD_VAR 0 2
31218: PPUSH
31219: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31223: LD_VAR 0 2
31227: PPUSH
31228: LD_INT 8
31230: PPUSH
31231: CALL_OW 336
// end ;
31235: PPOPN 3
31237: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31238: LD_EXP 38
31242: IFFALSE 31250
31244: PUSH
31245: LD_EXP 82
31249: AND
31250: IFFALSE 31394
31252: GO 31254
31254: DISABLE
31255: LD_INT 0
31257: PPUSH
31258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31259: LD_ADDR_VAR 0 2
31263: PUSH
31264: LD_INT 22
31266: PUSH
31267: LD_OWVAR 2
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 21
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: LD_INT 34
31291: PUSH
31292: LD_INT 12
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 34
31301: PUSH
31302: LD_INT 51
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 34
31311: PUSH
31312: LD_INT 32
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: PPUSH
31330: CALL_OW 69
31334: ST_TO_ADDR
// if not tmp then
31335: LD_VAR 0 2
31339: NOT
31340: IFFALSE 31344
// exit ;
31342: GO 31394
// for i in tmp do
31344: LD_ADDR_VAR 0 1
31348: PUSH
31349: LD_VAR 0 2
31353: PUSH
31354: FOR_IN
31355: IFFALSE 31392
// if GetCargo ( i , mat_artifact ) = 0 then
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_INT 4
31364: PPUSH
31365: CALL_OW 289
31369: PUSH
31370: LD_INT 0
31372: EQUAL
31373: IFFALSE 31390
// SetCargo ( i , mat_siberit , 100 ) ;
31375: LD_VAR 0 1
31379: PPUSH
31380: LD_INT 3
31382: PPUSH
31383: LD_INT 100
31385: PPUSH
31386: CALL_OW 290
31390: GO 31354
31392: POP
31393: POP
// end ;
31394: PPOPN 2
31396: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31397: LD_EXP 38
31401: IFFALSE 31409
31403: PUSH
31404: LD_EXP 83
31408: AND
31409: IFFALSE 31592
31411: GO 31413
31413: DISABLE
31414: LD_INT 0
31416: PPUSH
31417: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31418: LD_ADDR_VAR 0 2
31422: PUSH
31423: LD_INT 22
31425: PUSH
31426: LD_OWVAR 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PPUSH
31435: CALL_OW 69
31439: ST_TO_ADDR
// if not tmp then
31440: LD_VAR 0 2
31444: NOT
31445: IFFALSE 31449
// exit ;
31447: GO 31592
// for i := 1 to 2 do
31449: LD_ADDR_VAR 0 1
31453: PUSH
31454: DOUBLE
31455: LD_INT 1
31457: DEC
31458: ST_TO_ADDR
31459: LD_INT 2
31461: PUSH
31462: FOR_TO
31463: IFFALSE 31590
// begin uc_side := your_side ;
31465: LD_ADDR_OWVAR 20
31469: PUSH
31470: LD_OWVAR 2
31474: ST_TO_ADDR
// uc_nation := nation_american ;
31475: LD_ADDR_OWVAR 21
31479: PUSH
31480: LD_INT 1
31482: ST_TO_ADDR
// vc_chassis := us_morphling ;
31483: LD_ADDR_OWVAR 37
31487: PUSH
31488: LD_INT 5
31490: ST_TO_ADDR
// vc_engine := engine_siberite ;
31491: LD_ADDR_OWVAR 39
31495: PUSH
31496: LD_INT 3
31498: ST_TO_ADDR
// vc_control := control_computer ;
31499: LD_ADDR_OWVAR 38
31503: PUSH
31504: LD_INT 3
31506: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31507: LD_ADDR_OWVAR 40
31511: PUSH
31512: LD_INT 10
31514: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31515: LD_VAR 0 2
31519: PUSH
31520: LD_INT 1
31522: ARRAY
31523: PPUSH
31524: CALL_OW 310
31528: NOT
31529: IFFALSE 31576
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31531: CALL_OW 45
31535: PPUSH
31536: LD_VAR 0 2
31540: PUSH
31541: LD_INT 1
31543: ARRAY
31544: PPUSH
31545: CALL_OW 250
31549: PPUSH
31550: LD_VAR 0 2
31554: PUSH
31555: LD_INT 1
31557: ARRAY
31558: PPUSH
31559: CALL_OW 251
31563: PPUSH
31564: LD_INT 12
31566: PPUSH
31567: LD_INT 1
31569: PPUSH
31570: CALL_OW 50
31574: GO 31588
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31576: CALL_OW 45
31580: PPUSH
31581: LD_INT 1
31583: PPUSH
31584: CALL_OW 51
// end ;
31588: GO 31462
31590: POP
31591: POP
// end ;
31592: PPOPN 2
31594: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31595: LD_EXP 38
31599: IFFALSE 31607
31601: PUSH
31602: LD_EXP 84
31606: AND
31607: IFFALSE 31829
31609: GO 31611
31611: DISABLE
31612: LD_INT 0
31614: PPUSH
31615: PPUSH
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31620: LD_ADDR_VAR 0 6
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_OWVAR 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 21
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: PUSH
31650: LD_INT 23
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: PPUSH
31669: CALL_OW 69
31673: ST_TO_ADDR
// if not tmp then
31674: LD_VAR 0 6
31678: NOT
31679: IFFALSE 31683
// exit ;
31681: GO 31829
// s1 := rand ( 1 , 4 ) ;
31683: LD_ADDR_VAR 0 2
31687: PUSH
31688: LD_INT 1
31690: PPUSH
31691: LD_INT 4
31693: PPUSH
31694: CALL_OW 12
31698: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31699: LD_ADDR_VAR 0 4
31703: PUSH
31704: LD_VAR 0 6
31708: PUSH
31709: LD_INT 1
31711: ARRAY
31712: PPUSH
31713: LD_VAR 0 2
31717: PPUSH
31718: CALL_OW 259
31722: ST_TO_ADDR
// if s1 = 1 then
31723: LD_VAR 0 2
31727: PUSH
31728: LD_INT 1
31730: EQUAL
31731: IFFALSE 31751
// s2 := rand ( 2 , 4 ) else
31733: LD_ADDR_VAR 0 3
31737: PUSH
31738: LD_INT 2
31740: PPUSH
31741: LD_INT 4
31743: PPUSH
31744: CALL_OW 12
31748: ST_TO_ADDR
31749: GO 31759
// s2 := 1 ;
31751: LD_ADDR_VAR 0 3
31755: PUSH
31756: LD_INT 1
31758: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31759: LD_ADDR_VAR 0 5
31763: PUSH
31764: LD_VAR 0 6
31768: PUSH
31769: LD_INT 1
31771: ARRAY
31772: PPUSH
31773: LD_VAR 0 3
31777: PPUSH
31778: CALL_OW 259
31782: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31783: LD_VAR 0 6
31787: PUSH
31788: LD_INT 1
31790: ARRAY
31791: PPUSH
31792: LD_VAR 0 2
31796: PPUSH
31797: LD_VAR 0 5
31801: PPUSH
31802: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31806: LD_VAR 0 6
31810: PUSH
31811: LD_INT 1
31813: ARRAY
31814: PPUSH
31815: LD_VAR 0 3
31819: PPUSH
31820: LD_VAR 0 4
31824: PPUSH
31825: CALL_OW 237
// end ;
31829: PPOPN 6
31831: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31832: LD_EXP 38
31836: IFFALSE 31844
31838: PUSH
31839: LD_EXP 85
31843: AND
31844: IFFALSE 31923
31846: GO 31848
31848: DISABLE
31849: LD_INT 0
31851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31852: LD_ADDR_VAR 0 1
31856: PUSH
31857: LD_INT 22
31859: PUSH
31860: LD_OWVAR 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PPUSH
31883: CALL_OW 69
31887: ST_TO_ADDR
// if not tmp then
31888: LD_VAR 0 1
31892: NOT
31893: IFFALSE 31897
// exit ;
31895: GO 31923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31897: LD_VAR 0 1
31901: PUSH
31902: LD_INT 1
31904: PPUSH
31905: LD_VAR 0 1
31909: PPUSH
31910: CALL_OW 12
31914: ARRAY
31915: PPUSH
31916: LD_INT 1
31918: PPUSH
31919: CALL_OW 234
// end ;
31923: PPOPN 1
31925: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31926: LD_EXP 38
31930: IFFALSE 31938
31932: PUSH
31933: LD_EXP 86
31937: AND
31938: IFFALSE 32050
31940: GO 31942
31942: DISABLE
31943: LD_INT 0
31945: PPUSH
31946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31947: LD_ADDR_VAR 0 2
31951: PUSH
31952: LD_INT 22
31954: PUSH
31955: LD_OWVAR 2
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 30
31969: PUSH
31970: LD_INT 27
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 30
31979: PUSH
31980: LD_INT 26
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 30
31989: PUSH
31990: LD_INT 28
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PPUSH
32007: CALL_OW 69
32011: ST_TO_ADDR
// if not tmp then
32012: LD_VAR 0 2
32016: NOT
32017: IFFALSE 32021
// exit ;
32019: GO 32050
// for i in tmp do
32021: LD_ADDR_VAR 0 1
32025: PUSH
32026: LD_VAR 0 2
32030: PUSH
32031: FOR_IN
32032: IFFALSE 32048
// SetLives ( i , 1 ) ;
32034: LD_VAR 0 1
32038: PPUSH
32039: LD_INT 1
32041: PPUSH
32042: CALL_OW 234
32046: GO 32031
32048: POP
32049: POP
// end ;
32050: PPOPN 2
32052: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32053: LD_EXP 38
32057: IFFALSE 32065
32059: PUSH
32060: LD_EXP 87
32064: AND
32065: IFFALSE 32352
32067: GO 32069
32069: DISABLE
32070: LD_INT 0
32072: PPUSH
32073: PPUSH
32074: PPUSH
// begin i := rand ( 1 , 7 ) ;
32075: LD_ADDR_VAR 0 1
32079: PUSH
32080: LD_INT 1
32082: PPUSH
32083: LD_INT 7
32085: PPUSH
32086: CALL_OW 12
32090: ST_TO_ADDR
// case i of 1 :
32091: LD_VAR 0 1
32095: PUSH
32096: LD_INT 1
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32104
32102: GO 32114
32104: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32105: LD_STRING earthquake(getX(game), 0, 32)
32107: PPUSH
32108: CALL_OW 559
32112: GO 32352
32114: LD_INT 2
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32136
32122: POP
// begin ToLua ( displayStucuk(); ) ;
32123: LD_STRING displayStucuk();
32125: PPUSH
32126: CALL_OW 559
// ResetFog ;
32130: CALL_OW 335
// end ; 3 :
32134: GO 32352
32136: LD_INT 3
32138: DOUBLE
32139: EQUAL
32140: IFTRUE 32144
32142: GO 32248
32144: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32145: LD_ADDR_VAR 0 2
32149: PUSH
32150: LD_INT 22
32152: PUSH
32153: LD_OWVAR 2
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 25
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PPUSH
32176: CALL_OW 69
32180: ST_TO_ADDR
// if not tmp then
32181: LD_VAR 0 2
32185: NOT
32186: IFFALSE 32190
// exit ;
32188: GO 32352
// un := tmp [ rand ( 1 , tmp ) ] ;
32190: LD_ADDR_VAR 0 3
32194: PUSH
32195: LD_VAR 0 2
32199: PUSH
32200: LD_INT 1
32202: PPUSH
32203: LD_VAR 0 2
32207: PPUSH
32208: CALL_OW 12
32212: ARRAY
32213: ST_TO_ADDR
// if Crawls ( un ) then
32214: LD_VAR 0 3
32218: PPUSH
32219: CALL_OW 318
32223: IFFALSE 32234
// ComWalk ( un ) ;
32225: LD_VAR 0 3
32229: PPUSH
32230: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32234: LD_VAR 0 3
32238: PPUSH
32239: LD_INT 8
32241: PPUSH
32242: CALL_OW 336
// end ; 4 :
32246: GO 32352
32248: LD_INT 4
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32330
32256: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32257: LD_ADDR_VAR 0 2
32261: PUSH
32262: LD_INT 22
32264: PUSH
32265: LD_OWVAR 2
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 30
32276: PUSH
32277: LD_INT 29
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PPUSH
32288: CALL_OW 69
32292: ST_TO_ADDR
// if not tmp then
32293: LD_VAR 0 2
32297: NOT
32298: IFFALSE 32302
// exit ;
32300: GO 32352
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32302: LD_VAR 0 2
32306: PUSH
32307: LD_INT 1
32309: ARRAY
32310: PPUSH
32311: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32315: LD_VAR 0 2
32319: PUSH
32320: LD_INT 1
32322: ARRAY
32323: PPUSH
32324: CALL_OW 65
// end ; 5 .. 7 :
32328: GO 32352
32330: LD_INT 5
32332: DOUBLE
32333: GREATEREQUAL
32334: IFFALSE 32342
32336: LD_INT 7
32338: DOUBLE
32339: LESSEQUAL
32340: IFTRUE 32344
32342: GO 32351
32344: POP
// StreamSibBomb ; end ;
32345: CALL 28533 0 0
32349: GO 32352
32351: POP
// end ;
32352: PPOPN 3
32354: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32355: LD_EXP 38
32359: IFFALSE 32367
32361: PUSH
32362: LD_EXP 88
32366: AND
32367: IFFALSE 32523
32369: GO 32371
32371: DISABLE
32372: LD_INT 0
32374: PPUSH
32375: PPUSH
32376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32377: LD_ADDR_VAR 0 2
32381: PUSH
32382: LD_INT 81
32384: PUSH
32385: LD_OWVAR 2
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: LD_INT 21
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 21
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PPUSH
32426: CALL_OW 69
32430: ST_TO_ADDR
// if not tmp then
32431: LD_VAR 0 2
32435: NOT
32436: IFFALSE 32440
// exit ;
32438: GO 32523
// p := 0 ;
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: LD_INT 0
32447: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32448: LD_INT 35
32450: PPUSH
32451: CALL_OW 67
// p := p + 1 ;
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_VAR 0 3
32464: PUSH
32465: LD_INT 1
32467: PLUS
32468: ST_TO_ADDR
// for i in tmp do
32469: LD_ADDR_VAR 0 1
32473: PUSH
32474: LD_VAR 0 2
32478: PUSH
32479: FOR_IN
32480: IFFALSE 32511
// if GetLives ( i ) < 1000 then
32482: LD_VAR 0 1
32486: PPUSH
32487: CALL_OW 256
32491: PUSH
32492: LD_INT 1000
32494: LESS
32495: IFFALSE 32509
// SetLives ( i , 1000 ) ;
32497: LD_VAR 0 1
32501: PPUSH
32502: LD_INT 1000
32504: PPUSH
32505: CALL_OW 234
32509: GO 32479
32511: POP
32512: POP
// until p > 20 ;
32513: LD_VAR 0 3
32517: PUSH
32518: LD_INT 20
32520: GREATER
32521: IFFALSE 32448
// end ;
32523: PPOPN 3
32525: END
// every 0 0$1 trigger StreamModeActive and sTime do
32526: LD_EXP 38
32530: IFFALSE 32538
32532: PUSH
32533: LD_EXP 89
32537: AND
32538: IFFALSE 32573
32540: GO 32542
32542: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32543: LD_INT 28
32545: PPUSH
32546: LD_OWVAR 2
32550: PPUSH
32551: LD_INT 2
32553: PPUSH
32554: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32558: LD_INT 30
32560: PPUSH
32561: LD_OWVAR 2
32565: PPUSH
32566: LD_INT 2
32568: PPUSH
32569: CALL_OW 322
// end ;
32573: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32574: LD_EXP 38
32578: IFFALSE 32586
32580: PUSH
32581: LD_EXP 90
32585: AND
32586: IFFALSE 32707
32588: GO 32590
32590: DISABLE
32591: LD_INT 0
32593: PPUSH
32594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32595: LD_ADDR_VAR 0 2
32599: PUSH
32600: LD_INT 22
32602: PUSH
32603: LD_OWVAR 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 21
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 23
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: PPUSH
32644: CALL_OW 69
32648: ST_TO_ADDR
// if not tmp then
32649: LD_VAR 0 2
32653: NOT
32654: IFFALSE 32658
// exit ;
32656: GO 32707
// for i in tmp do
32658: LD_ADDR_VAR 0 1
32662: PUSH
32663: LD_VAR 0 2
32667: PUSH
32668: FOR_IN
32669: IFFALSE 32705
// begin if Crawls ( i ) then
32671: LD_VAR 0 1
32675: PPUSH
32676: CALL_OW 318
32680: IFFALSE 32691
// ComWalk ( i ) ;
32682: LD_VAR 0 1
32686: PPUSH
32687: CALL_OW 138
// SetClass ( i , 2 ) ;
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_INT 2
32698: PPUSH
32699: CALL_OW 336
// end ;
32703: GO 32668
32705: POP
32706: POP
// end ;
32707: PPOPN 2
32709: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32710: LD_EXP 38
32714: IFFALSE 32722
32716: PUSH
32717: LD_EXP 91
32721: AND
32722: IFFALSE 33012
32724: GO 32726
32726: DISABLE
32727: LD_INT 0
32729: PPUSH
32730: PPUSH
32731: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32732: LD_OWVAR 2
32736: PPUSH
32737: LD_INT 9
32739: PPUSH
32740: LD_INT 1
32742: PPUSH
32743: LD_INT 1
32745: PPUSH
32746: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32750: LD_INT 9
32752: PPUSH
32753: LD_OWVAR 2
32757: PPUSH
32758: CALL_OW 343
// uc_side := 9 ;
32762: LD_ADDR_OWVAR 20
32766: PUSH
32767: LD_INT 9
32769: ST_TO_ADDR
// uc_nation := 2 ;
32770: LD_ADDR_OWVAR 21
32774: PUSH
32775: LD_INT 2
32777: ST_TO_ADDR
// hc_name := Dark Warrior ;
32778: LD_ADDR_OWVAR 26
32782: PUSH
32783: LD_STRING Dark Warrior
32785: ST_TO_ADDR
// hc_gallery :=  ;
32786: LD_ADDR_OWVAR 33
32790: PUSH
32791: LD_STRING 
32793: ST_TO_ADDR
// hc_noskilllimit := true ;
32794: LD_ADDR_OWVAR 76
32798: PUSH
32799: LD_INT 1
32801: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32802: LD_ADDR_OWVAR 31
32806: PUSH
32807: LD_INT 30
32809: PUSH
32810: LD_INT 30
32812: PUSH
32813: LD_INT 30
32815: PUSH
32816: LD_INT 30
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
// un := CreateHuman ;
32825: LD_ADDR_VAR 0 3
32829: PUSH
32830: CALL_OW 44
32834: ST_TO_ADDR
// hc_noskilllimit := false ;
32835: LD_ADDR_OWVAR 76
32839: PUSH
32840: LD_INT 0
32842: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32843: LD_VAR 0 3
32847: PPUSH
32848: LD_INT 1
32850: PPUSH
32851: CALL_OW 51
// ToLua ( playRanger() ) ;
32855: LD_STRING playRanger()
32857: PPUSH
32858: CALL_OW 559
// p := 0 ;
32862: LD_ADDR_VAR 0 2
32866: PUSH
32867: LD_INT 0
32869: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32870: LD_INT 35
32872: PPUSH
32873: CALL_OW 67
// p := p + 1 ;
32877: LD_ADDR_VAR 0 2
32881: PUSH
32882: LD_VAR 0 2
32886: PUSH
32887: LD_INT 1
32889: PLUS
32890: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32891: LD_VAR 0 3
32895: PPUSH
32896: CALL_OW 256
32900: PUSH
32901: LD_INT 1000
32903: LESS
32904: IFFALSE 32918
// SetLives ( un , 1000 ) ;
32906: LD_VAR 0 3
32910: PPUSH
32911: LD_INT 1000
32913: PPUSH
32914: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32918: LD_VAR 0 3
32922: PPUSH
32923: LD_INT 81
32925: PUSH
32926: LD_OWVAR 2
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 91
32937: PUSH
32938: LD_VAR 0 3
32942: PUSH
32943: LD_INT 30
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PPUSH
32955: CALL_OW 69
32959: PPUSH
32960: LD_VAR 0 3
32964: PPUSH
32965: CALL_OW 74
32969: PPUSH
32970: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32974: LD_VAR 0 2
32978: PUSH
32979: LD_INT 80
32981: GREATER
32982: IFTRUE 32995
32984: PUSH
32985: LD_VAR 0 3
32989: PPUSH
32990: CALL_OW 301
32994: OR
32995: IFFALSE 32870
// if un then
32997: LD_VAR 0 3
33001: IFFALSE 33012
// RemoveUnit ( un ) ;
33003: LD_VAR 0 3
33007: PPUSH
33008: CALL_OW 64
// end ;
33012: PPOPN 3
33014: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33015: LD_EXP 92
33019: IFFALSE 33135
33021: GO 33023
33023: DISABLE
33024: LD_INT 0
33026: PPUSH
33027: PPUSH
33028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33029: LD_ADDR_VAR 0 2
33033: PUSH
33034: LD_INT 81
33036: PUSH
33037: LD_OWVAR 2
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 21
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PPUSH
33060: CALL_OW 69
33064: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33065: LD_STRING playComputer()
33067: PPUSH
33068: CALL_OW 559
// if not tmp then
33072: LD_VAR 0 2
33076: NOT
33077: IFFALSE 33081
// exit ;
33079: GO 33135
// for i in tmp do
33081: LD_ADDR_VAR 0 1
33085: PUSH
33086: LD_VAR 0 2
33090: PUSH
33091: FOR_IN
33092: IFFALSE 33133
// for j := 1 to 4 do
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: DOUBLE
33100: LD_INT 1
33102: DEC
33103: ST_TO_ADDR
33104: LD_INT 4
33106: PUSH
33107: FOR_TO
33108: IFFALSE 33129
// SetSkill ( i , j , 10 ) ;
33110: LD_VAR 0 1
33114: PPUSH
33115: LD_VAR 0 3
33119: PPUSH
33120: LD_INT 10
33122: PPUSH
33123: CALL_OW 237
33127: GO 33107
33129: POP
33130: POP
33131: GO 33091
33133: POP
33134: POP
// end ;
33135: PPOPN 3
33137: END
// every 0 0$1 trigger s30 do var i , tmp ;
33138: LD_EXP 93
33142: IFFALSE 33211
33144: GO 33146
33146: DISABLE
33147: LD_INT 0
33149: PPUSH
33150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33151: LD_ADDR_VAR 0 2
33155: PUSH
33156: LD_INT 22
33158: PUSH
33159: LD_OWVAR 2
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PPUSH
33168: CALL_OW 69
33172: ST_TO_ADDR
// if not tmp then
33173: LD_VAR 0 2
33177: NOT
33178: IFFALSE 33182
// exit ;
33180: GO 33211
// for i in tmp do
33182: LD_ADDR_VAR 0 1
33186: PUSH
33187: LD_VAR 0 2
33191: PUSH
33192: FOR_IN
33193: IFFALSE 33209
// SetLives ( i , 300 ) ;
33195: LD_VAR 0 1
33199: PPUSH
33200: LD_INT 300
33202: PPUSH
33203: CALL_OW 234
33207: GO 33192
33209: POP
33210: POP
// end ;
33211: PPOPN 2
33213: END
// every 0 0$1 trigger s60 do var i , tmp ;
33214: LD_EXP 94
33218: IFFALSE 33287
33220: GO 33222
33222: DISABLE
33223: LD_INT 0
33225: PPUSH
33226: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33227: LD_ADDR_VAR 0 2
33231: PUSH
33232: LD_INT 22
33234: PUSH
33235: LD_OWVAR 2
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PPUSH
33244: CALL_OW 69
33248: ST_TO_ADDR
// if not tmp then
33249: LD_VAR 0 2
33253: NOT
33254: IFFALSE 33258
// exit ;
33256: GO 33287
// for i in tmp do
33258: LD_ADDR_VAR 0 1
33262: PUSH
33263: LD_VAR 0 2
33267: PUSH
33268: FOR_IN
33269: IFFALSE 33285
// SetLives ( i , 600 ) ;
33271: LD_VAR 0 1
33275: PPUSH
33276: LD_INT 600
33278: PPUSH
33279: CALL_OW 234
33283: GO 33268
33285: POP
33286: POP
// end ;
33287: PPOPN 2
33289: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33290: LD_INT 0
33292: PPUSH
// case cmd of 301 :
33293: LD_VAR 0 1
33297: PUSH
33298: LD_INT 301
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33306
33304: GO 33338
33306: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33307: LD_VAR 0 6
33311: PPUSH
33312: LD_VAR 0 7
33316: PPUSH
33317: LD_VAR 0 8
33321: PPUSH
33322: LD_VAR 0 4
33326: PPUSH
33327: LD_VAR 0 5
33331: PPUSH
33332: CALL 34551 0 5
33336: GO 33459
33338: LD_INT 302
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33346
33344: GO 33383
33346: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33347: LD_VAR 0 6
33351: PPUSH
33352: LD_VAR 0 7
33356: PPUSH
33357: LD_VAR 0 8
33361: PPUSH
33362: LD_VAR 0 9
33366: PPUSH
33367: LD_VAR 0 4
33371: PPUSH
33372: LD_VAR 0 5
33376: PPUSH
33377: CALL 34642 0 6
33381: GO 33459
33383: LD_INT 303
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33428
33391: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33392: LD_VAR 0 6
33396: PPUSH
33397: LD_VAR 0 7
33401: PPUSH
33402: LD_VAR 0 8
33406: PPUSH
33407: LD_VAR 0 9
33411: PPUSH
33412: LD_VAR 0 4
33416: PPUSH
33417: LD_VAR 0 5
33421: PPUSH
33422: CALL 33464 0 6
33426: GO 33459
33428: LD_INT 304
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33458
33436: POP
// hHackTeleport ( unit , x , y ) ; end ;
33437: LD_VAR 0 2
33441: PPUSH
33442: LD_VAR 0 4
33446: PPUSH
33447: LD_VAR 0 5
33451: PPUSH
33452: CALL 35235 0 3
33456: GO 33459
33458: POP
// end ;
33459: LD_VAR 0 12
33463: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33464: LD_INT 0
33466: PPUSH
33467: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33468: LD_VAR 0 1
33472: PUSH
33473: LD_INT 1
33475: LESS
33476: IFTRUE 33488
33478: PUSH
33479: LD_VAR 0 1
33483: PUSH
33484: LD_INT 3
33486: GREATER
33487: OR
33488: IFTRUE 33506
33490: PUSH
33491: LD_VAR 0 5
33495: PPUSH
33496: LD_VAR 0 6
33500: PPUSH
33501: CALL_OW 428
33505: OR
33506: IFFALSE 33510
// exit ;
33508: GO 34238
// uc_side := your_side ;
33510: LD_ADDR_OWVAR 20
33514: PUSH
33515: LD_OWVAR 2
33519: ST_TO_ADDR
// uc_nation := nation ;
33520: LD_ADDR_OWVAR 21
33524: PUSH
33525: LD_VAR 0 1
33529: ST_TO_ADDR
// bc_level = 1 ;
33530: LD_ADDR_OWVAR 43
33534: PUSH
33535: LD_INT 1
33537: ST_TO_ADDR
// case btype of 1 :
33538: LD_VAR 0 2
33542: PUSH
33543: LD_INT 1
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33551
33549: GO 33562
33551: POP
// bc_type := b_depot ; 2 :
33552: LD_ADDR_OWVAR 42
33556: PUSH
33557: LD_INT 0
33559: ST_TO_ADDR
33560: GO 34182
33562: LD_INT 2
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33570
33568: GO 33581
33570: POP
// bc_type := b_warehouse ; 3 :
33571: LD_ADDR_OWVAR 42
33575: PUSH
33576: LD_INT 1
33578: ST_TO_ADDR
33579: GO 34182
33581: LD_INT 3
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33600
33589: POP
// bc_type := b_lab ; 4 .. 9 :
33590: LD_ADDR_OWVAR 42
33594: PUSH
33595: LD_INT 6
33597: ST_TO_ADDR
33598: GO 34182
33600: LD_INT 4
33602: DOUBLE
33603: GREATEREQUAL
33604: IFFALSE 33612
33606: LD_INT 9
33608: DOUBLE
33609: LESSEQUAL
33610: IFTRUE 33614
33612: GO 33674
33614: POP
// begin bc_type := b_lab_half ;
33615: LD_ADDR_OWVAR 42
33619: PUSH
33620: LD_INT 7
33622: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33623: LD_ADDR_OWVAR 44
33627: PUSH
33628: LD_INT 10
33630: PUSH
33631: LD_INT 11
33633: PUSH
33634: LD_INT 12
33636: PUSH
33637: LD_INT 15
33639: PUSH
33640: LD_INT 14
33642: PUSH
33643: LD_INT 13
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: PUSH
33654: LD_VAR 0 2
33658: PUSH
33659: LD_INT 3
33661: MINUS
33662: ARRAY
33663: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33664: LD_ADDR_OWVAR 45
33668: PUSH
33669: LD_INT 9
33671: ST_TO_ADDR
// end ; 10 .. 13 :
33672: GO 34182
33674: LD_INT 10
33676: DOUBLE
33677: GREATEREQUAL
33678: IFFALSE 33686
33680: LD_INT 13
33682: DOUBLE
33683: LESSEQUAL
33684: IFTRUE 33688
33686: GO 33765
33688: POP
// begin bc_type := b_lab_full ;
33689: LD_ADDR_OWVAR 42
33693: PUSH
33694: LD_INT 8
33696: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33697: LD_ADDR_OWVAR 44
33701: PUSH
33702: LD_INT 10
33704: PUSH
33705: LD_INT 12
33707: PUSH
33708: LD_INT 14
33710: PUSH
33711: LD_INT 13
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: PUSH
33720: LD_VAR 0 2
33724: PUSH
33725: LD_INT 9
33727: MINUS
33728: ARRAY
33729: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33730: LD_ADDR_OWVAR 45
33734: PUSH
33735: LD_INT 11
33737: PUSH
33738: LD_INT 15
33740: PUSH
33741: LD_INT 12
33743: PUSH
33744: LD_INT 15
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: PUSH
33753: LD_VAR 0 2
33757: PUSH
33758: LD_INT 9
33760: MINUS
33761: ARRAY
33762: ST_TO_ADDR
// end ; 14 :
33763: GO 34182
33765: LD_INT 14
33767: DOUBLE
33768: EQUAL
33769: IFTRUE 33773
33771: GO 33784
33773: POP
// bc_type := b_workshop ; 15 :
33774: LD_ADDR_OWVAR 42
33778: PUSH
33779: LD_INT 2
33781: ST_TO_ADDR
33782: GO 34182
33784: LD_INT 15
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33792
33790: GO 33803
33792: POP
// bc_type := b_factory ; 16 :
33793: LD_ADDR_OWVAR 42
33797: PUSH
33798: LD_INT 3
33800: ST_TO_ADDR
33801: GO 34182
33803: LD_INT 16
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33822
33811: POP
// bc_type := b_ext_gun ; 17 :
33812: LD_ADDR_OWVAR 42
33816: PUSH
33817: LD_INT 17
33819: ST_TO_ADDR
33820: GO 34182
33822: LD_INT 17
33824: DOUBLE
33825: EQUAL
33826: IFTRUE 33830
33828: GO 33858
33830: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33831: LD_ADDR_OWVAR 42
33835: PUSH
33836: LD_INT 19
33838: PUSH
33839: LD_INT 23
33841: PUSH
33842: LD_INT 19
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: PUSH
33850: LD_VAR 0 1
33854: ARRAY
33855: ST_TO_ADDR
33856: GO 34182
33858: LD_INT 18
33860: DOUBLE
33861: EQUAL
33862: IFTRUE 33866
33864: GO 33877
33866: POP
// bc_type := b_ext_radar ; 19 :
33867: LD_ADDR_OWVAR 42
33871: PUSH
33872: LD_INT 20
33874: ST_TO_ADDR
33875: GO 34182
33877: LD_INT 19
33879: DOUBLE
33880: EQUAL
33881: IFTRUE 33885
33883: GO 33896
33885: POP
// bc_type := b_ext_radio ; 20 :
33886: LD_ADDR_OWVAR 42
33890: PUSH
33891: LD_INT 22
33893: ST_TO_ADDR
33894: GO 34182
33896: LD_INT 20
33898: DOUBLE
33899: EQUAL
33900: IFTRUE 33904
33902: GO 33915
33904: POP
// bc_type := b_ext_siberium ; 21 :
33905: LD_ADDR_OWVAR 42
33909: PUSH
33910: LD_INT 21
33912: ST_TO_ADDR
33913: GO 34182
33915: LD_INT 21
33917: DOUBLE
33918: EQUAL
33919: IFTRUE 33923
33921: GO 33934
33923: POP
// bc_type := b_ext_computer ; 22 :
33924: LD_ADDR_OWVAR 42
33928: PUSH
33929: LD_INT 24
33931: ST_TO_ADDR
33932: GO 34182
33934: LD_INT 22
33936: DOUBLE
33937: EQUAL
33938: IFTRUE 33942
33940: GO 33953
33942: POP
// bc_type := b_ext_track ; 23 :
33943: LD_ADDR_OWVAR 42
33947: PUSH
33948: LD_INT 16
33950: ST_TO_ADDR
33951: GO 34182
33953: LD_INT 23
33955: DOUBLE
33956: EQUAL
33957: IFTRUE 33961
33959: GO 33972
33961: POP
// bc_type := b_ext_laser ; 24 :
33962: LD_ADDR_OWVAR 42
33966: PUSH
33967: LD_INT 25
33969: ST_TO_ADDR
33970: GO 34182
33972: LD_INT 24
33974: DOUBLE
33975: EQUAL
33976: IFTRUE 33980
33978: GO 33991
33980: POP
// bc_type := b_control_tower ; 25 :
33981: LD_ADDR_OWVAR 42
33985: PUSH
33986: LD_INT 36
33988: ST_TO_ADDR
33989: GO 34182
33991: LD_INT 25
33993: DOUBLE
33994: EQUAL
33995: IFTRUE 33999
33997: GO 34010
33999: POP
// bc_type := b_breastwork ; 26 :
34000: LD_ADDR_OWVAR 42
34004: PUSH
34005: LD_INT 31
34007: ST_TO_ADDR
34008: GO 34182
34010: LD_INT 26
34012: DOUBLE
34013: EQUAL
34014: IFTRUE 34018
34016: GO 34029
34018: POP
// bc_type := b_bunker ; 27 :
34019: LD_ADDR_OWVAR 42
34023: PUSH
34024: LD_INT 32
34026: ST_TO_ADDR
34027: GO 34182
34029: LD_INT 27
34031: DOUBLE
34032: EQUAL
34033: IFTRUE 34037
34035: GO 34048
34037: POP
// bc_type := b_turret ; 28 :
34038: LD_ADDR_OWVAR 42
34042: PUSH
34043: LD_INT 33
34045: ST_TO_ADDR
34046: GO 34182
34048: LD_INT 28
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34056
34054: GO 34067
34056: POP
// bc_type := b_armoury ; 29 :
34057: LD_ADDR_OWVAR 42
34061: PUSH
34062: LD_INT 4
34064: ST_TO_ADDR
34065: GO 34182
34067: LD_INT 29
34069: DOUBLE
34070: EQUAL
34071: IFTRUE 34075
34073: GO 34086
34075: POP
// bc_type := b_barracks ; 30 :
34076: LD_ADDR_OWVAR 42
34080: PUSH
34081: LD_INT 5
34083: ST_TO_ADDR
34084: GO 34182
34086: LD_INT 30
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34105
34094: POP
// bc_type := b_solar_power ; 31 :
34095: LD_ADDR_OWVAR 42
34099: PUSH
34100: LD_INT 27
34102: ST_TO_ADDR
34103: GO 34182
34105: LD_INT 31
34107: DOUBLE
34108: EQUAL
34109: IFTRUE 34113
34111: GO 34124
34113: POP
// bc_type := b_oil_power ; 32 :
34114: LD_ADDR_OWVAR 42
34118: PUSH
34119: LD_INT 26
34121: ST_TO_ADDR
34122: GO 34182
34124: LD_INT 32
34126: DOUBLE
34127: EQUAL
34128: IFTRUE 34132
34130: GO 34143
34132: POP
// bc_type := b_siberite_power ; 33 :
34133: LD_ADDR_OWVAR 42
34137: PUSH
34138: LD_INT 28
34140: ST_TO_ADDR
34141: GO 34182
34143: LD_INT 33
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34162
34151: POP
// bc_type := b_oil_mine ; 34 :
34152: LD_ADDR_OWVAR 42
34156: PUSH
34157: LD_INT 29
34159: ST_TO_ADDR
34160: GO 34182
34162: LD_INT 34
34164: DOUBLE
34165: EQUAL
34166: IFTRUE 34170
34168: GO 34181
34170: POP
// bc_type := b_siberite_mine ; end ;
34171: LD_ADDR_OWVAR 42
34175: PUSH
34176: LD_INT 30
34178: ST_TO_ADDR
34179: GO 34182
34181: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34182: LD_ADDR_VAR 0 8
34186: PUSH
34187: LD_VAR 0 5
34191: PPUSH
34192: LD_VAR 0 6
34196: PPUSH
34197: LD_VAR 0 3
34201: PPUSH
34202: CALL_OW 47
34206: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34207: LD_OWVAR 42
34211: PUSH
34212: LD_INT 32
34214: PUSH
34215: LD_INT 33
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: IN
34222: IFFALSE 34238
// PlaceWeaponTurret ( b , weapon ) ;
34224: LD_VAR 0 8
34228: PPUSH
34229: LD_VAR 0 4
34233: PPUSH
34234: CALL_OW 431
// end ;
34238: LD_VAR 0 7
34242: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34243: LD_INT 0
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34249: LD_ADDR_VAR 0 4
34253: PUSH
34254: LD_INT 22
34256: PUSH
34257: LD_OWVAR 2
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: LD_INT 30
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 30
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PPUSH
34298: CALL_OW 69
34302: ST_TO_ADDR
// if not tmp then
34303: LD_VAR 0 4
34307: NOT
34308: IFFALSE 34312
// exit ;
34310: GO 34371
// for i in tmp do
34312: LD_ADDR_VAR 0 2
34316: PUSH
34317: LD_VAR 0 4
34321: PUSH
34322: FOR_IN
34323: IFFALSE 34369
// for j = 1 to 3 do
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: DOUBLE
34331: LD_INT 1
34333: DEC
34334: ST_TO_ADDR
34335: LD_INT 3
34337: PUSH
34338: FOR_TO
34339: IFFALSE 34365
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34341: LD_VAR 0 2
34345: PPUSH
34346: CALL_OW 274
34350: PPUSH
34351: LD_VAR 0 3
34355: PPUSH
34356: LD_INT 99999
34358: PPUSH
34359: CALL_OW 277
34363: GO 34338
34365: POP
34366: POP
34367: GO 34322
34369: POP
34370: POP
// end ;
34371: LD_VAR 0 1
34375: RET
// export function hHackSetLevel10 ; var i , j ; begin
34376: LD_INT 0
34378: PPUSH
34379: PPUSH
34380: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34381: LD_ADDR_VAR 0 2
34385: PUSH
34386: LD_INT 21
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PPUSH
34396: CALL_OW 69
34400: PUSH
34401: FOR_IN
34402: IFFALSE 34454
// if IsSelected ( i ) then
34404: LD_VAR 0 2
34408: PPUSH
34409: CALL_OW 306
34413: IFFALSE 34452
// begin for j := 1 to 4 do
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: DOUBLE
34421: LD_INT 1
34423: DEC
34424: ST_TO_ADDR
34425: LD_INT 4
34427: PUSH
34428: FOR_TO
34429: IFFALSE 34450
// SetSkill ( i , j , 10 ) ;
34431: LD_VAR 0 2
34435: PPUSH
34436: LD_VAR 0 3
34440: PPUSH
34441: LD_INT 10
34443: PPUSH
34444: CALL_OW 237
34448: GO 34428
34450: POP
34451: POP
// end ;
34452: GO 34401
34454: POP
34455: POP
// end ;
34456: LD_VAR 0 1
34460: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34461: LD_INT 0
34463: PPUSH
34464: PPUSH
34465: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34466: LD_ADDR_VAR 0 2
34470: PUSH
34471: LD_INT 22
34473: PUSH
34474: LD_OWVAR 2
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 21
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PPUSH
34497: CALL_OW 69
34501: PUSH
34502: FOR_IN
34503: IFFALSE 34544
// begin for j := 1 to 4 do
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: DOUBLE
34511: LD_INT 1
34513: DEC
34514: ST_TO_ADDR
34515: LD_INT 4
34517: PUSH
34518: FOR_TO
34519: IFFALSE 34540
// SetSkill ( i , j , 10 ) ;
34521: LD_VAR 0 2
34525: PPUSH
34526: LD_VAR 0 3
34530: PPUSH
34531: LD_INT 10
34533: PPUSH
34534: CALL_OW 237
34538: GO 34518
34540: POP
34541: POP
// end ;
34542: GO 34502
34544: POP
34545: POP
// end ;
34546: LD_VAR 0 1
34550: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34551: LD_INT 0
34553: PPUSH
// uc_side := your_side ;
34554: LD_ADDR_OWVAR 20
34558: PUSH
34559: LD_OWVAR 2
34563: ST_TO_ADDR
// uc_nation := nation ;
34564: LD_ADDR_OWVAR 21
34568: PUSH
34569: LD_VAR 0 1
34573: ST_TO_ADDR
// InitHc ;
34574: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34578: LD_INT 0
34580: PPUSH
34581: LD_VAR 0 2
34585: PPUSH
34586: LD_VAR 0 3
34590: PPUSH
34591: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34595: LD_VAR 0 4
34599: PPUSH
34600: LD_VAR 0 5
34604: PPUSH
34605: CALL_OW 428
34609: PUSH
34610: LD_INT 0
34612: EQUAL
34613: IFFALSE 34637
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34615: CALL_OW 44
34619: PPUSH
34620: LD_VAR 0 4
34624: PPUSH
34625: LD_VAR 0 5
34629: PPUSH
34630: LD_INT 1
34632: PPUSH
34633: CALL_OW 48
// end ;
34637: LD_VAR 0 6
34641: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34642: LD_INT 0
34644: PPUSH
34645: PPUSH
// uc_side := your_side ;
34646: LD_ADDR_OWVAR 20
34650: PUSH
34651: LD_OWVAR 2
34655: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34656: LD_VAR 0 1
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 3
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: LD_INT 5
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: IN
34683: IFFALSE 34695
// uc_nation := nation_american else
34685: LD_ADDR_OWVAR 21
34689: PUSH
34690: LD_INT 1
34692: ST_TO_ADDR
34693: GO 34738
// if chassis in [ 11 , 12 , 13 , 14 ] then
34695: LD_VAR 0 1
34699: PUSH
34700: LD_INT 11
34702: PUSH
34703: LD_INT 12
34705: PUSH
34706: LD_INT 13
34708: PUSH
34709: LD_INT 14
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: IN
34718: IFFALSE 34730
// uc_nation := nation_arabian else
34720: LD_ADDR_OWVAR 21
34724: PUSH
34725: LD_INT 2
34727: ST_TO_ADDR
34728: GO 34738
// uc_nation := nation_russian ;
34730: LD_ADDR_OWVAR 21
34734: PUSH
34735: LD_INT 3
34737: ST_TO_ADDR
// vc_chassis := chassis ;
34738: LD_ADDR_OWVAR 37
34742: PUSH
34743: LD_VAR 0 1
34747: ST_TO_ADDR
// vc_engine := engine ;
34748: LD_ADDR_OWVAR 39
34752: PUSH
34753: LD_VAR 0 2
34757: ST_TO_ADDR
// vc_control := control ;
34758: LD_ADDR_OWVAR 38
34762: PUSH
34763: LD_VAR 0 3
34767: ST_TO_ADDR
// vc_weapon := weapon ;
34768: LD_ADDR_OWVAR 40
34772: PUSH
34773: LD_VAR 0 4
34777: ST_TO_ADDR
// un := CreateVehicle ;
34778: LD_ADDR_VAR 0 8
34782: PUSH
34783: CALL_OW 45
34787: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34788: LD_VAR 0 8
34792: PPUSH
34793: LD_INT 0
34795: PPUSH
34796: LD_INT 5
34798: PPUSH
34799: CALL_OW 12
34803: PPUSH
34804: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34808: LD_VAR 0 8
34812: PPUSH
34813: LD_VAR 0 5
34817: PPUSH
34818: LD_VAR 0 6
34822: PPUSH
34823: LD_INT 1
34825: PPUSH
34826: CALL_OW 48
// end ;
34830: LD_VAR 0 7
34834: RET
// export hInvincible ; every 1 do
34835: GO 34837
34837: DISABLE
// hInvincible := [ ] ;
34838: LD_ADDR_EXP 95
34842: PUSH
34843: EMPTY
34844: ST_TO_ADDR
34845: END
// every 10 do var i ;
34846: GO 34848
34848: DISABLE
34849: LD_INT 0
34851: PPUSH
// begin enable ;
34852: ENABLE
// if not hInvincible then
34853: LD_EXP 95
34857: NOT
34858: IFFALSE 34862
// exit ;
34860: GO 34906
// for i in hInvincible do
34862: LD_ADDR_VAR 0 1
34866: PUSH
34867: LD_EXP 95
34871: PUSH
34872: FOR_IN
34873: IFFALSE 34904
// if GetLives ( i ) < 1000 then
34875: LD_VAR 0 1
34879: PPUSH
34880: CALL_OW 256
34884: PUSH
34885: LD_INT 1000
34887: LESS
34888: IFFALSE 34902
// SetLives ( i , 1000 ) ;
34890: LD_VAR 0 1
34894: PPUSH
34895: LD_INT 1000
34897: PPUSH
34898: CALL_OW 234
34902: GO 34872
34904: POP
34905: POP
// end ;
34906: PPOPN 1
34908: END
// export function hHackInvincible ; var i ; begin
34909: LD_INT 0
34911: PPUSH
34912: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34913: LD_ADDR_VAR 0 2
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 21
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 21
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: PPUSH
34946: CALL_OW 69
34950: PUSH
34951: FOR_IN
34952: IFFALSE 35013
// if IsSelected ( i ) then
34954: LD_VAR 0 2
34958: PPUSH
34959: CALL_OW 306
34963: IFFALSE 35011
// begin if i in hInvincible then
34965: LD_VAR 0 2
34969: PUSH
34970: LD_EXP 95
34974: IN
34975: IFFALSE 34995
// hInvincible := hInvincible diff i else
34977: LD_ADDR_EXP 95
34981: PUSH
34982: LD_EXP 95
34986: PUSH
34987: LD_VAR 0 2
34991: DIFF
34992: ST_TO_ADDR
34993: GO 35011
// hInvincible := hInvincible union i ;
34995: LD_ADDR_EXP 95
34999: PUSH
35000: LD_EXP 95
35004: PUSH
35005: LD_VAR 0 2
35009: UNION
35010: ST_TO_ADDR
// end ;
35011: GO 34951
35013: POP
35014: POP
// end ;
35015: LD_VAR 0 1
35019: RET
// export function hHackInvisible ; var i , j ; begin
35020: LD_INT 0
35022: PPUSH
35023: PPUSH
35024: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35025: LD_ADDR_VAR 0 2
35029: PUSH
35030: LD_INT 21
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PPUSH
35040: CALL_OW 69
35044: PUSH
35045: FOR_IN
35046: IFFALSE 35070
// if IsSelected ( i ) then
35048: LD_VAR 0 2
35052: PPUSH
35053: CALL_OW 306
35057: IFFALSE 35068
// ComForceInvisible ( i ) ;
35059: LD_VAR 0 2
35063: PPUSH
35064: CALL_OW 496
35068: GO 35045
35070: POP
35071: POP
// end ;
35072: LD_VAR 0 1
35076: RET
// export function hHackChangeYourSide ; begin
35077: LD_INT 0
35079: PPUSH
// if your_side = 8 then
35080: LD_OWVAR 2
35084: PUSH
35085: LD_INT 8
35087: EQUAL
35088: IFFALSE 35100
// your_side := 0 else
35090: LD_ADDR_OWVAR 2
35094: PUSH
35095: LD_INT 0
35097: ST_TO_ADDR
35098: GO 35114
// your_side := your_side + 1 ;
35100: LD_ADDR_OWVAR 2
35104: PUSH
35105: LD_OWVAR 2
35109: PUSH
35110: LD_INT 1
35112: PLUS
35113: ST_TO_ADDR
// end ;
35114: LD_VAR 0 1
35118: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35119: LD_INT 0
35121: PPUSH
35122: PPUSH
35123: PPUSH
// for i in all_units do
35124: LD_ADDR_VAR 0 2
35128: PUSH
35129: LD_OWVAR 3
35133: PUSH
35134: FOR_IN
35135: IFFALSE 35213
// if IsSelected ( i ) then
35137: LD_VAR 0 2
35141: PPUSH
35142: CALL_OW 306
35146: IFFALSE 35211
// begin j := GetSide ( i ) ;
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_VAR 0 2
35157: PPUSH
35158: CALL_OW 255
35162: ST_TO_ADDR
// if j = 8 then
35163: LD_VAR 0 3
35167: PUSH
35168: LD_INT 8
35170: EQUAL
35171: IFFALSE 35183
// j := 0 else
35173: LD_ADDR_VAR 0 3
35177: PUSH
35178: LD_INT 0
35180: ST_TO_ADDR
35181: GO 35197
// j := j + 1 ;
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_VAR 0 3
35192: PUSH
35193: LD_INT 1
35195: PLUS
35196: ST_TO_ADDR
// SetSide ( i , j ) ;
35197: LD_VAR 0 2
35201: PPUSH
35202: LD_VAR 0 3
35206: PPUSH
35207: CALL_OW 235
// end ;
35211: GO 35134
35213: POP
35214: POP
// end ;
35215: LD_VAR 0 1
35219: RET
// export function hHackFog ; begin
35220: LD_INT 0
35222: PPUSH
// FogOff ( true ) ;
35223: LD_INT 1
35225: PPUSH
35226: CALL_OW 344
// end ;
35230: LD_VAR 0 1
35234: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35235: LD_INT 0
35237: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35238: LD_VAR 0 1
35242: PPUSH
35243: LD_VAR 0 2
35247: PPUSH
35248: LD_VAR 0 3
35252: PPUSH
35253: LD_INT 1
35255: PPUSH
35256: LD_INT 1
35258: PPUSH
35259: CALL_OW 483
// CenterOnXY ( x , y ) ;
35263: LD_VAR 0 2
35267: PPUSH
35268: LD_VAR 0 3
35272: PPUSH
35273: CALL_OW 84
// end ;
35277: LD_VAR 0 4
35281: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35282: LD_INT 0
35284: PPUSH
35285: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35286: LD_VAR 0 1
35290: NOT
35291: IFTRUE 35310
35293: PUSH
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_VAR 0 3
35303: PPUSH
35304: CALL_OW 488
35308: NOT
35309: OR
35310: IFTRUE 35345
35312: PUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: CALL_OW 266
35322: PUSH
35323: LD_INT 3
35325: NONEQUAL
35326: IFFALSE 35344
35328: PUSH
35329: LD_VAR 0 1
35333: PPUSH
35334: CALL_OW 247
35338: PUSH
35339: LD_INT 1
35341: EQUAL
35342: NOT
35343: AND
35344: OR
35345: IFFALSE 35349
// exit ;
35347: GO 35631
// if GetType ( factory ) = unit_human then
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL_OW 247
35358: PUSH
35359: LD_INT 1
35361: EQUAL
35362: IFFALSE 35379
// factory := IsInUnit ( factory ) ;
35364: LD_ADDR_VAR 0 1
35368: PUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 310
35378: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35379: LD_VAR 0 1
35383: PPUSH
35384: CALL_OW 266
35388: PUSH
35389: LD_INT 3
35391: NONEQUAL
35392: IFFALSE 35396
// exit ;
35394: GO 35631
// for i := 1 to Count ( factoryWaypoints ) do
35396: LD_ADDR_VAR 0 5
35400: PUSH
35401: DOUBLE
35402: LD_INT 1
35404: DEC
35405: ST_TO_ADDR
35406: LD_EXP 96
35410: PPUSH
35411: CALL 44363 0 1
35415: PUSH
35416: FOR_TO
35417: IFFALSE 35579
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35419: LD_VAR 0 2
35423: PPUSH
35424: LD_VAR 0 3
35428: PPUSH
35429: CALL_OW 428
35433: PUSH
35434: LD_EXP 96
35438: PUSH
35439: LD_VAR 0 5
35443: ARRAY
35444: PUSH
35445: LD_INT 2
35447: ARRAY
35448: EQUAL
35449: IFFALSE 35481
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35451: LD_ADDR_EXP 96
35455: PUSH
35456: LD_EXP 96
35460: PPUSH
35461: LD_VAR 0 5
35465: PPUSH
35466: CALL_OW 3
35470: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35471: CALL 35636 0 0
// exit ;
35475: POP
35476: POP
35477: GO 35631
// end else
35479: GO 35577
// if factory = factoryWaypoints [ i ] [ 2 ] then
35481: LD_VAR 0 1
35485: PUSH
35486: LD_EXP 96
35490: PUSH
35491: LD_VAR 0 5
35495: ARRAY
35496: PUSH
35497: LD_INT 2
35499: ARRAY
35500: EQUAL
35501: IFFALSE 35577
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35503: LD_ADDR_EXP 96
35507: PUSH
35508: LD_EXP 96
35512: PPUSH
35513: LD_VAR 0 5
35517: PPUSH
35518: CALL_OW 3
35522: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35523: LD_ADDR_EXP 96
35527: PUSH
35528: LD_EXP 96
35532: PPUSH
35533: LD_VAR 0 1
35537: PPUSH
35538: CALL_OW 255
35542: PUSH
35543: LD_VAR 0 1
35547: PUSH
35548: LD_VAR 0 2
35552: PUSH
35553: LD_VAR 0 3
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: PPUSH
35564: CALL 80295 0 2
35568: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35569: CALL 35636 0 0
// exit ;
35573: POP
35574: POP
35575: GO 35631
// end ; end ;
35577: GO 35416
35579: POP
35580: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35581: LD_ADDR_EXP 96
35585: PUSH
35586: LD_EXP 96
35590: PPUSH
35591: LD_VAR 0 1
35595: PPUSH
35596: CALL_OW 255
35600: PUSH
35601: LD_VAR 0 1
35605: PUSH
35606: LD_VAR 0 2
35610: PUSH
35611: LD_VAR 0 3
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: PPUSH
35622: CALL 80295 0 2
35626: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35627: CALL 35636 0 0
// end ;
35631: LD_VAR 0 4
35635: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35636: LD_INT 0
35638: PPUSH
35639: PPUSH
35640: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35641: LD_STRING resetFactoryWaypoint();
35643: PPUSH
35644: CALL_OW 559
// if factoryWaypoints then
35648: LD_EXP 96
35652: IFFALSE 35773
// begin list := factoryWaypoints ;
35654: LD_ADDR_VAR 0 3
35658: PUSH
35659: LD_EXP 96
35663: ST_TO_ADDR
// for i := 1 to list do
35664: LD_ADDR_VAR 0 2
35668: PUSH
35669: DOUBLE
35670: LD_INT 1
35672: DEC
35673: ST_TO_ADDR
35674: LD_VAR 0 3
35678: PUSH
35679: FOR_TO
35680: IFFALSE 35771
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35682: LD_STRING setFactoryWaypointXY(
35684: PUSH
35685: LD_VAR 0 3
35689: PUSH
35690: LD_VAR 0 2
35694: ARRAY
35695: PUSH
35696: LD_INT 1
35698: ARRAY
35699: STR
35700: PUSH
35701: LD_STRING ,
35703: STR
35704: PUSH
35705: LD_VAR 0 3
35709: PUSH
35710: LD_VAR 0 2
35714: ARRAY
35715: PUSH
35716: LD_INT 2
35718: ARRAY
35719: STR
35720: PUSH
35721: LD_STRING ,
35723: STR
35724: PUSH
35725: LD_VAR 0 3
35729: PUSH
35730: LD_VAR 0 2
35734: ARRAY
35735: PUSH
35736: LD_INT 3
35738: ARRAY
35739: STR
35740: PUSH
35741: LD_STRING ,
35743: STR
35744: PUSH
35745: LD_VAR 0 3
35749: PUSH
35750: LD_VAR 0 2
35754: ARRAY
35755: PUSH
35756: LD_INT 4
35758: ARRAY
35759: STR
35760: PUSH
35761: LD_STRING )
35763: STR
35764: PPUSH
35765: CALL_OW 559
35769: GO 35679
35771: POP
35772: POP
// end ; end ;
35773: LD_VAR 0 1
35777: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35778: LD_INT 0
35780: PPUSH
// if HexInfo ( x , y ) = warehouse then
35781: LD_VAR 0 2
35785: PPUSH
35786: LD_VAR 0 3
35790: PPUSH
35791: CALL_OW 428
35795: PUSH
35796: LD_VAR 0 1
35800: EQUAL
35801: IFFALSE 35828
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35803: LD_ADDR_EXP 98
35807: PUSH
35808: LD_EXP 98
35812: PPUSH
35813: LD_VAR 0 1
35817: PPUSH
35818: LD_INT 0
35820: PPUSH
35821: CALL_OW 1
35825: ST_TO_ADDR
35826: GO 35879
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35828: LD_ADDR_EXP 98
35832: PUSH
35833: LD_EXP 98
35837: PPUSH
35838: LD_VAR 0 1
35842: PPUSH
35843: LD_VAR 0 1
35847: PPUSH
35848: CALL_OW 255
35852: PUSH
35853: LD_VAR 0 1
35857: PUSH
35858: LD_VAR 0 2
35862: PUSH
35863: LD_VAR 0 3
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: PPUSH
35874: CALL_OW 1
35878: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35879: CALL 35888 0 0
// end ;
35883: LD_VAR 0 4
35887: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35888: LD_INT 0
35890: PPUSH
35891: PPUSH
35892: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35893: LD_STRING resetWarehouseGatheringPoints();
35895: PPUSH
35896: CALL_OW 559
// if warehouseGatheringPoints then
35900: LD_EXP 98
35904: IFFALSE 36030
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35906: LD_ADDR_VAR 0 3
35910: PUSH
35911: LD_EXP 98
35915: PPUSH
35916: CALL 84229 0 1
35920: ST_TO_ADDR
// for i := 1 to list do
35921: LD_ADDR_VAR 0 2
35925: PUSH
35926: DOUBLE
35927: LD_INT 1
35929: DEC
35930: ST_TO_ADDR
35931: LD_VAR 0 3
35935: PUSH
35936: FOR_TO
35937: IFFALSE 36028
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35939: LD_STRING setWarehouseGatheringPointXY(
35941: PUSH
35942: LD_VAR 0 3
35946: PUSH
35947: LD_VAR 0 2
35951: ARRAY
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: STR
35957: PUSH
35958: LD_STRING ,
35960: STR
35961: PUSH
35962: LD_VAR 0 3
35966: PUSH
35967: LD_VAR 0 2
35971: ARRAY
35972: PUSH
35973: LD_INT 2
35975: ARRAY
35976: STR
35977: PUSH
35978: LD_STRING ,
35980: STR
35981: PUSH
35982: LD_VAR 0 3
35986: PUSH
35987: LD_VAR 0 2
35991: ARRAY
35992: PUSH
35993: LD_INT 3
35995: ARRAY
35996: STR
35997: PUSH
35998: LD_STRING ,
36000: STR
36001: PUSH
36002: LD_VAR 0 3
36006: PUSH
36007: LD_VAR 0 2
36011: ARRAY
36012: PUSH
36013: LD_INT 4
36015: ARRAY
36016: STR
36017: PUSH
36018: LD_STRING )
36020: STR
36021: PPUSH
36022: CALL_OW 559
36026: GO 35936
36028: POP
36029: POP
// end ; end ;
36030: LD_VAR 0 1
36034: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36035: LD_EXP 98
36039: IFFALSE 36734
36041: GO 36043
36043: DISABLE
36044: LD_INT 0
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
// begin enable ;
36055: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36056: LD_ADDR_VAR 0 3
36060: PUSH
36061: LD_EXP 98
36065: PPUSH
36066: CALL 84229 0 1
36070: ST_TO_ADDR
// if not list then
36071: LD_VAR 0 3
36075: NOT
36076: IFFALSE 36080
// exit ;
36078: GO 36734
// for i := 1 to list do
36080: LD_ADDR_VAR 0 1
36084: PUSH
36085: DOUBLE
36086: LD_INT 1
36088: DEC
36089: ST_TO_ADDR
36090: LD_VAR 0 3
36094: PUSH
36095: FOR_TO
36096: IFFALSE 36732
// begin depot := list [ i ] [ 2 ] ;
36098: LD_ADDR_VAR 0 8
36102: PUSH
36103: LD_VAR 0 3
36107: PUSH
36108: LD_VAR 0 1
36112: ARRAY
36113: PUSH
36114: LD_INT 2
36116: ARRAY
36117: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36118: LD_ADDR_VAR 0 5
36122: PUSH
36123: LD_VAR 0 3
36127: PUSH
36128: LD_VAR 0 1
36132: ARRAY
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36138: LD_VAR 0 8
36142: PPUSH
36143: CALL_OW 301
36147: IFTRUE 36166
36149: PUSH
36150: LD_VAR 0 5
36154: PUSH
36155: LD_VAR 0 8
36159: PPUSH
36160: CALL_OW 255
36164: NONEQUAL
36165: OR
36166: IFFALSE 36195
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36168: LD_ADDR_EXP 98
36172: PUSH
36173: LD_EXP 98
36177: PPUSH
36178: LD_VAR 0 8
36182: PPUSH
36183: LD_INT 0
36185: PPUSH
36186: CALL_OW 1
36190: ST_TO_ADDR
// exit ;
36191: POP
36192: POP
36193: GO 36734
// end ; x := list [ i ] [ 3 ] ;
36195: LD_ADDR_VAR 0 6
36199: PUSH
36200: LD_VAR 0 3
36204: PUSH
36205: LD_VAR 0 1
36209: ARRAY
36210: PUSH
36211: LD_INT 3
36213: ARRAY
36214: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36215: LD_ADDR_VAR 0 7
36219: PUSH
36220: LD_VAR 0 3
36224: PUSH
36225: LD_VAR 0 1
36229: ARRAY
36230: PUSH
36231: LD_INT 4
36233: ARRAY
36234: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36235: LD_ADDR_VAR 0 9
36239: PUSH
36240: LD_VAR 0 6
36244: PPUSH
36245: LD_VAR 0 7
36249: PPUSH
36250: LD_INT 16
36252: PPUSH
36253: CALL 82803 0 3
36257: ST_TO_ADDR
// if not cratesNearbyPoint then
36258: LD_VAR 0 9
36262: NOT
36263: IFFALSE 36269
// exit ;
36265: POP
36266: POP
36267: GO 36734
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36269: LD_ADDR_VAR 0 4
36273: PUSH
36274: LD_INT 22
36276: PUSH
36277: LD_VAR 0 5
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 3
36288: PUSH
36289: LD_INT 60
36291: PUSH
36292: EMPTY
36293: LIST
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 91
36301: PUSH
36302: LD_VAR 0 8
36306: PUSH
36307: LD_INT 6
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 25
36320: PUSH
36321: LD_INT 2
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 25
36330: PUSH
36331: LD_INT 16
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: LIST
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 69
36353: PUSH
36354: LD_VAR 0 8
36358: PPUSH
36359: CALL_OW 313
36363: PPUSH
36364: LD_INT 3
36366: PUSH
36367: LD_INT 60
36369: PUSH
36370: EMPTY
36371: LIST
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: LD_INT 25
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 25
36392: PUSH
36393: LD_INT 16
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PPUSH
36409: CALL_OW 72
36413: UNION
36414: ST_TO_ADDR
// if tmp then
36415: LD_VAR 0 4
36419: IFFALSE 36499
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36421: LD_ADDR_VAR 0 4
36425: PUSH
36426: LD_VAR 0 4
36430: PPUSH
36431: LD_INT 3
36433: PPUSH
36434: CALL 80610 0 2
36438: ST_TO_ADDR
// for j in tmp do
36439: LD_ADDR_VAR 0 2
36443: PUSH
36444: LD_VAR 0 4
36448: PUSH
36449: FOR_IN
36450: IFFALSE 36493
// begin if IsInUnit ( j ) then
36452: LD_VAR 0 2
36456: PPUSH
36457: CALL_OW 310
36461: IFFALSE 36472
// ComExit ( j ) ;
36463: LD_VAR 0 2
36467: PPUSH
36468: CALL 80693 0 1
// AddComCollect ( j , x , y ) ;
36472: LD_VAR 0 2
36476: PPUSH
36477: LD_VAR 0 6
36481: PPUSH
36482: LD_VAR 0 7
36486: PPUSH
36487: CALL_OW 177
// end ;
36491: GO 36449
36493: POP
36494: POP
// exit ;
36495: POP
36496: POP
36497: GO 36734
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36499: LD_ADDR_VAR 0 4
36503: PUSH
36504: LD_INT 22
36506: PUSH
36507: LD_VAR 0 5
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 91
36518: PUSH
36519: LD_VAR 0 8
36523: PUSH
36524: LD_INT 8
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 34
36537: PUSH
36538: LD_INT 12
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 34
36547: PUSH
36548: LD_INT 51
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 34
36557: PUSH
36558: LD_INT 32
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 34
36567: PUSH
36568: LD_INT 89
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: PPUSH
36587: CALL_OW 69
36591: ST_TO_ADDR
// if tmp then
36592: LD_VAR 0 4
36596: IFFALSE 36730
// begin for j in tmp do
36598: LD_ADDR_VAR 0 2
36602: PUSH
36603: LD_VAR 0 4
36607: PUSH
36608: FOR_IN
36609: IFFALSE 36728
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36611: LD_VAR 0 2
36615: PPUSH
36616: CALL_OW 262
36620: PUSH
36621: LD_INT 3
36623: EQUAL
36624: IFTRUE 36641
36626: PUSH
36627: LD_VAR 0 2
36631: PPUSH
36632: CALL_OW 261
36636: PUSH
36637: LD_INT 20
36639: GREATER
36640: OR
36641: IFFALSE 36655
36643: PUSH
36644: LD_VAR 0 2
36648: PPUSH
36649: CALL_OW 314
36653: NOT
36654: AND
36655: IFFALSE 36685
36657: PUSH
36658: LD_VAR 0 2
36662: PPUSH
36663: CALL_OW 263
36667: PUSH
36668: LD_INT 1
36670: NONEQUAL
36671: IFTRUE 36684
36673: PUSH
36674: LD_VAR 0 2
36678: PPUSH
36679: CALL_OW 311
36683: OR
36684: AND
36685: IFFALSE 36726
// begin ComCollect ( j , x , y ) ;
36687: LD_VAR 0 2
36691: PPUSH
36692: LD_VAR 0 6
36696: PPUSH
36697: LD_VAR 0 7
36701: PPUSH
36702: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36706: LD_VAR 0 2
36710: PPUSH
36711: LD_VAR 0 8
36715: PPUSH
36716: CALL_OW 172
// exit ;
36720: POP
36721: POP
36722: POP
36723: POP
36724: GO 36734
// end ;
36726: GO 36608
36728: POP
36729: POP
// end ; end ;
36730: GO 36095
36732: POP
36733: POP
// end ; end_of_file
36734: PPOPN 9
36736: END
// export function SOS_UnitDestroyed ( un ) ; begin
36737: LD_INT 0
36739: PPUSH
// ComRadiation ( un ) ;
36740: LD_VAR 0 1
36744: PPUSH
36745: CALL 37826 0 1
// end ;
36749: LD_VAR 0 2
36753: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36754: LD_INT 0
36756: PPUSH
// ComRadiation ( un ) ;
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL 37826 0 1
// end ;
36766: LD_VAR 0 2
36770: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36771: LD_INT 0
36773: PPUSH
// end ;
36774: LD_VAR 0 4
36778: RET
// export function SOS_Command ( cmd ) ; begin
36779: LD_INT 0
36781: PPUSH
// end ;
36782: LD_VAR 0 2
36786: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36787: LD_INT 0
36789: PPUSH
// end ;
36790: LD_VAR 0 6
36794: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36795: LD_INT 0
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
// if not vehicle or not factory then
36801: LD_VAR 0 1
36805: NOT
36806: IFTRUE 36815
36808: PUSH
36809: LD_VAR 0 2
36813: NOT
36814: OR
36815: IFFALSE 36819
// exit ;
36817: GO 37401
// if not factoryWaypoints then
36819: LD_EXP 96
36823: NOT
36824: IFFALSE 36828
// exit ;
36826: GO 37401
// for i := 1 to Count ( factoryWaypoints ) do
36828: LD_ADDR_VAR 0 4
36832: PUSH
36833: DOUBLE
36834: LD_INT 1
36836: DEC
36837: ST_TO_ADDR
36838: LD_EXP 96
36842: PPUSH
36843: CALL 44363 0 1
36847: PUSH
36848: FOR_TO
36849: IFFALSE 37399
// if factoryWaypoints [ i ] [ 2 ] = factory then
36851: LD_EXP 96
36855: PUSH
36856: LD_VAR 0 4
36860: ARRAY
36861: PUSH
36862: LD_INT 2
36864: ARRAY
36865: PUSH
36866: LD_VAR 0 2
36870: EQUAL
36871: IFFALSE 37397
// begin if GetControl ( vehicle ) = control_manual then
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 263
36882: PUSH
36883: LD_INT 1
36885: EQUAL
36886: IFFALSE 37250
// begin driver := IsDrivenBy ( vehicle ) ;
36888: LD_ADDR_VAR 0 5
36892: PUSH
36893: LD_VAR 0 1
36897: PPUSH
36898: CALL_OW 311
36902: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36903: LD_VAR 0 5
36907: PUSH
36908: LD_EXP 97
36912: IN
36913: IFTRUE 36927
36915: PUSH
36916: LD_VAR 0 1
36920: PUSH
36921: LD_EXP 97
36925: IN
36926: OR
36927: IFFALSE 36933
// exit ;
36929: POP
36930: POP
36931: GO 37401
// if not HasTask ( driver ) then
36933: LD_VAR 0 5
36937: PPUSH
36938: CALL_OW 314
36942: NOT
36943: IFFALSE 37248
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36945: LD_ADDR_EXP 97
36949: PUSH
36950: LD_EXP 97
36954: PPUSH
36955: LD_VAR 0 5
36959: PPUSH
36960: CALL 80295 0 2
36964: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36965: LD_ADDR_EXP 97
36969: PUSH
36970: LD_EXP 97
36974: PPUSH
36975: LD_VAR 0 1
36979: PPUSH
36980: CALL 80295 0 2
36984: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36985: LD_ADDR_VAR 0 6
36989: PUSH
36990: LD_EXP 96
36994: PUSH
36995: LD_VAR 0 4
36999: ARRAY
37000: PUSH
37001: LD_INT 3
37003: ARRAY
37004: PPUSH
37005: LD_EXP 96
37009: PUSH
37010: LD_VAR 0 4
37014: ARRAY
37015: PUSH
37016: LD_INT 4
37018: ARRAY
37019: PPUSH
37020: CALL_OW 428
37024: ST_TO_ADDR
// if hex then
37025: LD_VAR 0 6
37029: IFFALSE 37047
// ComMoveUnit ( driver , hex ) else
37031: LD_VAR 0 5
37035: PPUSH
37036: LD_VAR 0 6
37040: PPUSH
37041: CALL_OW 112
37045: GO 37131
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
37047: LD_VAR 0 1
37051: PPUSH
37052: LD_EXP 96
37056: PUSH
37057: LD_VAR 0 4
37061: ARRAY
37062: PUSH
37063: LD_INT 3
37065: ARRAY
37066: PPUSH
37067: LD_EXP 96
37071: PUSH
37072: LD_VAR 0 4
37076: ARRAY
37077: PUSH
37078: LD_INT 4
37080: ARRAY
37081: PPUSH
37082: CALL_OW 297
37086: PUSH
37087: LD_INT 0
37089: GREATER
37090: IFFALSE 37131
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37092: LD_VAR 0 5
37096: PPUSH
37097: LD_EXP 96
37101: PUSH
37102: LD_VAR 0 4
37106: ARRAY
37107: PUSH
37108: LD_INT 3
37110: ARRAY
37111: PPUSH
37112: LD_EXP 96
37116: PUSH
37117: LD_VAR 0 4
37121: ARRAY
37122: PUSH
37123: LD_INT 4
37125: ARRAY
37126: PPUSH
37127: CALL_OW 111
// AddComExitVehicle ( driver ) ;
37131: LD_VAR 0 5
37135: PPUSH
37136: CALL_OW 181
// if Multiplayer then
37140: LD_OWVAR 4
37144: IFFALSE 37193
// begin repeat wait ( 10 ) ;
37146: LD_INT 10
37148: PPUSH
37149: CALL_OW 67
// until not IsInUnit ( driver ) ;
37153: LD_VAR 0 5
37157: PPUSH
37158: CALL_OW 310
37162: NOT
37163: IFFALSE 37146
// if not HasTask ( driver ) then
37165: LD_VAR 0 5
37169: PPUSH
37170: CALL_OW 314
37174: NOT
37175: IFFALSE 37191
// ComEnterUnit ( driver , factory ) ;
37177: LD_VAR 0 5
37181: PPUSH
37182: LD_VAR 0 2
37186: PPUSH
37187: CALL_OW 120
// end else
37191: GO 37207
// AddComEnterUnit ( driver , factory ) ;
37193: LD_VAR 0 5
37197: PPUSH
37198: LD_VAR 0 2
37202: PPUSH
37203: CALL_OW 180
// wait ( 0 0$1 ) ;
37207: LD_INT 35
37209: PPUSH
37210: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
37214: LD_ADDR_EXP 97
37218: PUSH
37219: LD_EXP 97
37223: PUSH
37224: LD_VAR 0 5
37228: DIFF
37229: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
37230: LD_ADDR_EXP 97
37234: PUSH
37235: LD_EXP 97
37239: PUSH
37240: LD_VAR 0 1
37244: DIFF
37245: ST_TO_ADDR
// break ;
37246: GO 37399
// end ; end else
37248: GO 37397
// if GetControl ( vehicle ) = control_remote then
37250: LD_VAR 0 1
37254: PPUSH
37255: CALL_OW 263
37259: PUSH
37260: LD_INT 2
37262: EQUAL
37263: IFFALSE 37349
// begin wait ( 0 0$2 ) ;
37265: LD_INT 70
37267: PPUSH
37268: CALL_OW 67
// repeat wait ( 10 ) ;
37272: LD_INT 10
37274: PPUSH
37275: CALL_OW 67
// Connect ( vehicle ) ;
37279: LD_VAR 0 1
37283: PPUSH
37284: CALL 50607 0 1
// until IsControledBy ( vehicle ) ;
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 312
37297: IFFALSE 37272
// wait ( 10 ) ;
37299: LD_INT 10
37301: PPUSH
37302: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37306: LD_VAR 0 1
37310: PPUSH
37311: LD_EXP 96
37315: PUSH
37316: LD_VAR 0 4
37320: ARRAY
37321: PUSH
37322: LD_INT 3
37324: ARRAY
37325: PPUSH
37326: LD_EXP 96
37330: PUSH
37331: LD_VAR 0 4
37335: ARRAY
37336: PUSH
37337: LD_INT 4
37339: ARRAY
37340: PPUSH
37341: CALL_OW 111
// break ;
37345: GO 37399
// end else
37347: GO 37397
// begin wait ( 0 0$3 ) ;
37349: LD_INT 105
37351: PPUSH
37352: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37356: LD_VAR 0 1
37360: PPUSH
37361: LD_EXP 96
37365: PUSH
37366: LD_VAR 0 4
37370: ARRAY
37371: PUSH
37372: LD_INT 3
37374: ARRAY
37375: PPUSH
37376: LD_EXP 96
37380: PUSH
37381: LD_VAR 0 4
37385: ARRAY
37386: PUSH
37387: LD_INT 4
37389: ARRAY
37390: PPUSH
37391: CALL_OW 111
// break ;
37395: GO 37399
// end ; end ;
37397: GO 36848
37399: POP
37400: POP
// end ;
37401: LD_VAR 0 3
37405: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37406: LD_INT 0
37408: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37409: LD_VAR 0 1
37413: PUSH
37414: LD_INT 250
37416: EQUAL
37417: IFFALSE 37434
37419: PUSH
37420: LD_VAR 0 2
37424: PPUSH
37425: CALL_OW 264
37429: PUSH
37430: LD_INT 81
37432: EQUAL
37433: AND
37434: IFFALSE 37455
// MinerPlaceMine ( unit , x , y ) ;
37436: LD_VAR 0 2
37440: PPUSH
37441: LD_VAR 0 4
37445: PPUSH
37446: LD_VAR 0 5
37450: PPUSH
37451: CALL 40587 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37455: LD_VAR 0 1
37459: PUSH
37460: LD_INT 251
37462: EQUAL
37463: IFFALSE 37480
37465: PUSH
37466: LD_VAR 0 2
37470: PPUSH
37471: CALL_OW 264
37475: PUSH
37476: LD_INT 81
37478: EQUAL
37479: AND
37480: IFFALSE 37501
// MinerDetonateMine ( unit , x , y ) ;
37482: LD_VAR 0 2
37486: PPUSH
37487: LD_VAR 0 4
37491: PPUSH
37492: LD_VAR 0 5
37496: PPUSH
37497: CALL 40866 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37501: LD_VAR 0 1
37505: PUSH
37506: LD_INT 252
37508: EQUAL
37509: IFFALSE 37526
37511: PUSH
37512: LD_VAR 0 2
37516: PPUSH
37517: CALL_OW 264
37521: PUSH
37522: LD_INT 81
37524: EQUAL
37525: AND
37526: IFFALSE 37547
// MinerCreateMinefield ( unit , x , y ) ;
37528: LD_VAR 0 2
37532: PPUSH
37533: LD_VAR 0 4
37537: PPUSH
37538: LD_VAR 0 5
37542: PPUSH
37543: CALL 41285 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37547: LD_VAR 0 1
37551: PUSH
37552: LD_INT 253
37554: EQUAL
37555: IFFALSE 37572
37557: PUSH
37558: LD_VAR 0 2
37562: PPUSH
37563: CALL_OW 257
37567: PUSH
37568: LD_INT 5
37570: EQUAL
37571: AND
37572: IFFALSE 37593
// ComBinocular ( unit , x , y ) ;
37574: LD_VAR 0 2
37578: PPUSH
37579: LD_VAR 0 4
37583: PPUSH
37584: LD_VAR 0 5
37588: PPUSH
37589: CALL 41660 0 3
// if selectedUnit then
37593: LD_VAR 0 3
37597: IFFALSE 37657
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37599: LD_VAR 0 1
37603: PUSH
37604: LD_INT 254
37606: EQUAL
37607: IFFALSE 37624
37609: PUSH
37610: LD_VAR 0 2
37614: PPUSH
37615: CALL_OW 264
37619: PUSH
37620: LD_INT 99
37622: EQUAL
37623: AND
37624: IFFALSE 37641
37626: PUSH
37627: LD_VAR 0 3
37631: PPUSH
37632: CALL_OW 263
37636: PUSH
37637: LD_INT 3
37639: EQUAL
37640: AND
37641: IFFALSE 37657
// HackDestroyVehicle ( unit , selectedUnit ) ;
37643: LD_VAR 0 2
37647: PPUSH
37648: LD_VAR 0 3
37652: PPUSH
37653: CALL 39947 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37657: LD_VAR 0 1
37661: PUSH
37662: LD_INT 255
37664: EQUAL
37665: IFFALSE 37689
37667: PUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: CALL_OW 264
37677: PUSH
37678: LD_INT 14
37680: PUSH
37681: LD_INT 53
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: IN
37688: AND
37689: IFFALSE 37707
37691: PUSH
37692: LD_VAR 0 4
37696: PPUSH
37697: LD_VAR 0 5
37701: PPUSH
37702: CALL_OW 488
37706: AND
37707: IFFALSE 37731
// CutTreeXYR ( unit , x , y , 12 ) ;
37709: LD_VAR 0 2
37713: PPUSH
37714: LD_VAR 0 4
37718: PPUSH
37719: LD_VAR 0 5
37723: PPUSH
37724: LD_INT 12
37726: PPUSH
37727: CALL 37922 0 4
// if cmd = 256 then
37731: LD_VAR 0 1
37735: PUSH
37736: LD_INT 256
37738: EQUAL
37739: IFFALSE 37760
// SetFactoryWaypoint ( unit , x , y ) ;
37741: LD_VAR 0 2
37745: PPUSH
37746: LD_VAR 0 4
37750: PPUSH
37751: LD_VAR 0 5
37755: PPUSH
37756: CALL 35282 0 3
// if cmd = 257 then
37760: LD_VAR 0 1
37764: PUSH
37765: LD_INT 257
37767: EQUAL
37768: IFFALSE 37789
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37770: LD_VAR 0 2
37774: PPUSH
37775: LD_VAR 0 4
37779: PPUSH
37780: LD_VAR 0 5
37784: PPUSH
37785: CALL 35778 0 3
// if cmd = 258 then
37789: LD_VAR 0 1
37793: PUSH
37794: LD_INT 258
37796: EQUAL
37797: IFFALSE 37821
// BurnTreeXYR ( unit , x , y , 8 ) ;
37799: LD_VAR 0 2
37803: PPUSH
37804: LD_VAR 0 4
37808: PPUSH
37809: LD_VAR 0 5
37813: PPUSH
37814: LD_INT 8
37816: PPUSH
37817: CALL 38322 0 4
// end ;
37821: LD_VAR 0 6
37825: RET
// export function ComRadiation ( un ) ; var eff ; begin
37826: LD_INT 0
37828: PPUSH
37829: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37830: LD_VAR 0 1
37834: PPUSH
37835: CALL_OW 264
37839: PUSH
37840: LD_INT 91
37842: NONEQUAL
37843: IFFALSE 37847
// exit ;
37845: GO 37917
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37847: LD_INT 68
37849: PPUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 255
37859: PPUSH
37860: CALL_OW 321
37864: PUSH
37865: LD_INT 2
37867: EQUAL
37868: IFFALSE 37880
// eff := 50 else
37870: LD_ADDR_VAR 0 3
37874: PUSH
37875: LD_INT 50
37877: ST_TO_ADDR
37878: GO 37888
// eff := 25 ;
37880: LD_ADDR_VAR 0 3
37884: PUSH
37885: LD_INT 25
37887: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 250
37897: PPUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 251
37907: PPUSH
37908: LD_VAR 0 3
37912: PPUSH
37913: CALL_OW 495
// end ;
37917: LD_VAR 0 2
37921: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37922: LD_INT 0
37924: PPUSH
37925: PPUSH
37926: PPUSH
37927: PPUSH
37928: PPUSH
37929: PPUSH
37930: PPUSH
37931: PPUSH
37932: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37933: LD_VAR 0 1
37937: PPUSH
37938: CALL_OW 302
37942: NOT
37943: IFTRUE 37962
37945: PUSH
37946: LD_VAR 0 2
37950: PPUSH
37951: LD_VAR 0 3
37955: PPUSH
37956: CALL_OW 488
37960: NOT
37961: OR
37962: IFTRUE 37971
37964: PUSH
37965: LD_VAR 0 4
37969: NOT
37970: OR
37971: IFFALSE 37975
// exit ;
37973: GO 38317
// list := [ ] ;
37975: LD_ADDR_VAR 0 13
37979: PUSH
37980: EMPTY
37981: ST_TO_ADDR
// if x - r < 0 then
37982: LD_VAR 0 2
37986: PUSH
37987: LD_VAR 0 4
37991: MINUS
37992: PUSH
37993: LD_INT 0
37995: LESS
37996: IFFALSE 38008
// min_x := 0 else
37998: LD_ADDR_VAR 0 7
38002: PUSH
38003: LD_INT 0
38005: ST_TO_ADDR
38006: GO 38024
// min_x := x - r ;
38008: LD_ADDR_VAR 0 7
38012: PUSH
38013: LD_VAR 0 2
38017: PUSH
38018: LD_VAR 0 4
38022: MINUS
38023: ST_TO_ADDR
// if y - r < 0 then
38024: LD_VAR 0 3
38028: PUSH
38029: LD_VAR 0 4
38033: MINUS
38034: PUSH
38035: LD_INT 0
38037: LESS
38038: IFFALSE 38050
// min_y := 0 else
38040: LD_ADDR_VAR 0 8
38044: PUSH
38045: LD_INT 0
38047: ST_TO_ADDR
38048: GO 38066
// min_y := y - r ;
38050: LD_ADDR_VAR 0 8
38054: PUSH
38055: LD_VAR 0 3
38059: PUSH
38060: LD_VAR 0 4
38064: MINUS
38065: ST_TO_ADDR
// max_x := x + r ;
38066: LD_ADDR_VAR 0 9
38070: PUSH
38071: LD_VAR 0 2
38075: PUSH
38076: LD_VAR 0 4
38080: PLUS
38081: ST_TO_ADDR
// max_y := y + r ;
38082: LD_ADDR_VAR 0 10
38086: PUSH
38087: LD_VAR 0 3
38091: PUSH
38092: LD_VAR 0 4
38096: PLUS
38097: ST_TO_ADDR
// for _x = min_x to max_x do
38098: LD_ADDR_VAR 0 11
38102: PUSH
38103: DOUBLE
38104: LD_VAR 0 7
38108: DEC
38109: ST_TO_ADDR
38110: LD_VAR 0 9
38114: PUSH
38115: FOR_TO
38116: IFFALSE 38235
// for _y = min_y to max_y do
38118: LD_ADDR_VAR 0 12
38122: PUSH
38123: DOUBLE
38124: LD_VAR 0 8
38128: DEC
38129: ST_TO_ADDR
38130: LD_VAR 0 10
38134: PUSH
38135: FOR_TO
38136: IFFALSE 38231
// begin if not ValidHex ( _x , _y ) then
38138: LD_VAR 0 11
38142: PPUSH
38143: LD_VAR 0 12
38147: PPUSH
38148: CALL_OW 488
38152: NOT
38153: IFFALSE 38157
// continue ;
38155: GO 38135
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38157: LD_VAR 0 11
38161: PPUSH
38162: LD_VAR 0 12
38166: PPUSH
38167: CALL_OW 351
38171: IFFALSE 38189
38173: PUSH
38174: LD_VAR 0 11
38178: PPUSH
38179: LD_VAR 0 12
38183: PPUSH
38184: CALL_OW 554
38188: AND
38189: IFFALSE 38229
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38191: LD_ADDR_VAR 0 13
38195: PUSH
38196: LD_VAR 0 13
38200: PPUSH
38201: LD_VAR 0 13
38205: PUSH
38206: LD_INT 1
38208: PLUS
38209: PPUSH
38210: LD_VAR 0 11
38214: PUSH
38215: LD_VAR 0 12
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PPUSH
38224: CALL_OW 2
38228: ST_TO_ADDR
// end ;
38229: GO 38135
38231: POP
38232: POP
38233: GO 38115
38235: POP
38236: POP
// if not list then
38237: LD_VAR 0 13
38241: NOT
38242: IFFALSE 38246
// exit ;
38244: GO 38317
// for i in list do
38246: LD_ADDR_VAR 0 6
38250: PUSH
38251: LD_VAR 0 13
38255: PUSH
38256: FOR_IN
38257: IFFALSE 38315
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_STRING M
38266: PUSH
38267: LD_VAR 0 6
38271: PUSH
38272: LD_INT 1
38274: ARRAY
38275: PUSH
38276: LD_VAR 0 6
38280: PUSH
38281: LD_INT 2
38283: ARRAY
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: PPUSH
38309: CALL_OW 447
38313: GO 38256
38315: POP
38316: POP
// end ;
38317: LD_VAR 0 5
38321: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38322: LD_INT 0
38324: PPUSH
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38334: LD_VAR 0 1
38338: PPUSH
38339: CALL_OW 302
38343: NOT
38344: IFTRUE 38363
38346: PUSH
38347: LD_VAR 0 2
38351: PPUSH
38352: LD_VAR 0 3
38356: PPUSH
38357: CALL_OW 488
38361: NOT
38362: OR
38363: IFTRUE 38372
38365: PUSH
38366: LD_VAR 0 4
38370: NOT
38371: OR
38372: IFFALSE 38376
// exit ;
38374: GO 38893
// list := [ ] ;
38376: LD_ADDR_VAR 0 13
38380: PUSH
38381: EMPTY
38382: ST_TO_ADDR
// if x - r < 0 then
38383: LD_VAR 0 2
38387: PUSH
38388: LD_VAR 0 4
38392: MINUS
38393: PUSH
38394: LD_INT 0
38396: LESS
38397: IFFALSE 38409
// min_x := 0 else
38399: LD_ADDR_VAR 0 7
38403: PUSH
38404: LD_INT 0
38406: ST_TO_ADDR
38407: GO 38425
// min_x := x - r ;
38409: LD_ADDR_VAR 0 7
38413: PUSH
38414: LD_VAR 0 2
38418: PUSH
38419: LD_VAR 0 4
38423: MINUS
38424: ST_TO_ADDR
// if y - r < 0 then
38425: LD_VAR 0 3
38429: PUSH
38430: LD_VAR 0 4
38434: MINUS
38435: PUSH
38436: LD_INT 0
38438: LESS
38439: IFFALSE 38451
// min_y := 0 else
38441: LD_ADDR_VAR 0 8
38445: PUSH
38446: LD_INT 0
38448: ST_TO_ADDR
38449: GO 38467
// min_y := y - r ;
38451: LD_ADDR_VAR 0 8
38455: PUSH
38456: LD_VAR 0 3
38460: PUSH
38461: LD_VAR 0 4
38465: MINUS
38466: ST_TO_ADDR
// max_x := x + r ;
38467: LD_ADDR_VAR 0 9
38471: PUSH
38472: LD_VAR 0 2
38476: PUSH
38477: LD_VAR 0 4
38481: PLUS
38482: ST_TO_ADDR
// max_y := y + r ;
38483: LD_ADDR_VAR 0 10
38487: PUSH
38488: LD_VAR 0 3
38492: PUSH
38493: LD_VAR 0 4
38497: PLUS
38498: ST_TO_ADDR
// for _x = min_x to max_x do
38499: LD_ADDR_VAR 0 11
38503: PUSH
38504: DOUBLE
38505: LD_VAR 0 7
38509: DEC
38510: ST_TO_ADDR
38511: LD_VAR 0 9
38515: PUSH
38516: FOR_TO
38517: IFFALSE 38636
// for _y = min_y to max_y do
38519: LD_ADDR_VAR 0 12
38523: PUSH
38524: DOUBLE
38525: LD_VAR 0 8
38529: DEC
38530: ST_TO_ADDR
38531: LD_VAR 0 10
38535: PUSH
38536: FOR_TO
38537: IFFALSE 38632
// begin if not ValidHex ( _x , _y ) then
38539: LD_VAR 0 11
38543: PPUSH
38544: LD_VAR 0 12
38548: PPUSH
38549: CALL_OW 488
38553: NOT
38554: IFFALSE 38558
// continue ;
38556: GO 38536
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38558: LD_VAR 0 11
38562: PPUSH
38563: LD_VAR 0 12
38567: PPUSH
38568: CALL_OW 351
38572: IFFALSE 38590
38574: PUSH
38575: LD_VAR 0 11
38579: PPUSH
38580: LD_VAR 0 12
38584: PPUSH
38585: CALL_OW 554
38589: AND
38590: IFFALSE 38630
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38592: LD_ADDR_VAR 0 13
38596: PUSH
38597: LD_VAR 0 13
38601: PPUSH
38602: LD_VAR 0 13
38606: PUSH
38607: LD_INT 1
38609: PLUS
38610: PPUSH
38611: LD_VAR 0 11
38615: PUSH
38616: LD_VAR 0 12
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PPUSH
38625: CALL_OW 2
38629: ST_TO_ADDR
// end ;
38630: GO 38536
38632: POP
38633: POP
38634: GO 38516
38636: POP
38637: POP
// if not list then
38638: LD_VAR 0 13
38642: NOT
38643: IFFALSE 38647
// exit ;
38645: GO 38893
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38647: LD_ADDR_VAR 0 13
38651: PUSH
38652: LD_VAR 0 1
38656: PPUSH
38657: LD_VAR 0 13
38661: PPUSH
38662: LD_INT 1
38664: PPUSH
38665: LD_INT 1
38667: PPUSH
38668: CALL 47735 0 4
38672: ST_TO_ADDR
// ComStop ( flame ) ;
38673: LD_VAR 0 1
38677: PPUSH
38678: CALL_OW 141
// for i in list do
38682: LD_ADDR_VAR 0 6
38686: PUSH
38687: LD_VAR 0 13
38691: PUSH
38692: FOR_IN
38693: IFFALSE 38724
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38695: LD_VAR 0 1
38699: PPUSH
38700: LD_VAR 0 6
38704: PUSH
38705: LD_INT 1
38707: ARRAY
38708: PPUSH
38709: LD_VAR 0 6
38713: PUSH
38714: LD_INT 2
38716: ARRAY
38717: PPUSH
38718: CALL_OW 176
38722: GO 38692
38724: POP
38725: POP
// repeat wait ( 0 0$1 ) ;
38726: LD_INT 35
38728: PPUSH
38729: CALL_OW 67
// task := GetTaskList ( flame ) ;
38733: LD_ADDR_VAR 0 14
38737: PUSH
38738: LD_VAR 0 1
38742: PPUSH
38743: CALL_OW 437
38747: ST_TO_ADDR
// if not task then
38748: LD_VAR 0 14
38752: NOT
38753: IFFALSE 38757
// exit ;
38755: GO 38893
// if task [ 1 ] [ 1 ] <> | then
38757: LD_VAR 0 14
38761: PUSH
38762: LD_INT 1
38764: ARRAY
38765: PUSH
38766: LD_INT 1
38768: ARRAY
38769: PUSH
38770: LD_STRING |
38772: NONEQUAL
38773: IFFALSE 38777
// exit ;
38775: GO 38893
// _x := task [ 1 ] [ 2 ] ;
38777: LD_ADDR_VAR 0 11
38781: PUSH
38782: LD_VAR 0 14
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PUSH
38791: LD_INT 2
38793: ARRAY
38794: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38795: LD_ADDR_VAR 0 12
38799: PUSH
38800: LD_VAR 0 14
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: PUSH
38809: LD_INT 3
38811: ARRAY
38812: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38813: LD_VAR 0 11
38817: PPUSH
38818: LD_VAR 0 12
38822: PPUSH
38823: CALL_OW 351
38827: NOT
38828: IFTRUE 38847
38830: PUSH
38831: LD_VAR 0 11
38835: PPUSH
38836: LD_VAR 0 12
38840: PPUSH
38841: CALL_OW 554
38845: NOT
38846: OR
38847: IFFALSE 38881
// begin task := Delete ( task , 1 ) ;
38849: LD_ADDR_VAR 0 14
38853: PUSH
38854: LD_VAR 0 14
38858: PPUSH
38859: LD_INT 1
38861: PPUSH
38862: CALL_OW 3
38866: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38867: LD_VAR 0 1
38871: PPUSH
38872: LD_VAR 0 14
38876: PPUSH
38877: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 314
38890: NOT
38891: IFFALSE 38726
// end ;
38893: LD_VAR 0 5
38897: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38898: LD_EXP 100
38902: NOT
38903: IFFALSE 38953
38905: GO 38907
38907: DISABLE
// begin initHack := true ;
38908: LD_ADDR_EXP 100
38912: PUSH
38913: LD_INT 1
38915: ST_TO_ADDR
// hackTanks := [ ] ;
38916: LD_ADDR_EXP 101
38920: PUSH
38921: EMPTY
38922: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38923: LD_ADDR_EXP 102
38927: PUSH
38928: EMPTY
38929: ST_TO_ADDR
// hackLimit := 3 ;
38930: LD_ADDR_EXP 103
38934: PUSH
38935: LD_INT 3
38937: ST_TO_ADDR
// hackDist := 12 ;
38938: LD_ADDR_EXP 104
38942: PUSH
38943: LD_INT 12
38945: ST_TO_ADDR
// hackCounter := [ ] ;
38946: LD_ADDR_EXP 105
38950: PUSH
38951: EMPTY
38952: ST_TO_ADDR
// end ;
38953: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38954: LD_EXP 100
38958: IFFALSE 38976
38960: PUSH
38961: LD_INT 34
38963: PUSH
38964: LD_INT 99
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PPUSH
38971: CALL_OW 69
38975: AND
38976: IFFALSE 39229
38978: GO 38980
38980: DISABLE
38981: LD_INT 0
38983: PPUSH
38984: PPUSH
// begin enable ;
38985: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38986: LD_ADDR_VAR 0 1
38990: PUSH
38991: LD_INT 34
38993: PUSH
38994: LD_INT 99
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PPUSH
39001: CALL_OW 69
39005: PUSH
39006: FOR_IN
39007: IFFALSE 39227
// begin if not i in hackTanks then
39009: LD_VAR 0 1
39013: PUSH
39014: LD_EXP 101
39018: IN
39019: NOT
39020: IFFALSE 39103
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39022: LD_ADDR_EXP 101
39026: PUSH
39027: LD_EXP 101
39031: PPUSH
39032: LD_EXP 101
39036: PUSH
39037: LD_INT 1
39039: PLUS
39040: PPUSH
39041: LD_VAR 0 1
39045: PPUSH
39046: CALL_OW 1
39050: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39051: LD_ADDR_EXP 102
39055: PUSH
39056: LD_EXP 102
39060: PPUSH
39061: LD_EXP 102
39065: PUSH
39066: LD_INT 1
39068: PLUS
39069: PPUSH
39070: EMPTY
39071: PPUSH
39072: CALL_OW 1
39076: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39077: LD_ADDR_EXP 105
39081: PUSH
39082: LD_EXP 105
39086: PPUSH
39087: LD_EXP 105
39091: PUSH
39092: LD_INT 1
39094: PLUS
39095: PPUSH
39096: EMPTY
39097: PPUSH
39098: CALL_OW 1
39102: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39103: LD_VAR 0 1
39107: PPUSH
39108: CALL_OW 302
39112: NOT
39113: IFFALSE 39126
// begin HackUnlinkAll ( i ) ;
39115: LD_VAR 0 1
39119: PPUSH
39120: CALL 39232 0 1
// continue ;
39124: GO 39006
// end ; HackCheckCapturedStatus ( i ) ;
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL 39677 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39135: LD_ADDR_VAR 0 2
39139: PUSH
39140: LD_INT 81
39142: PUSH
39143: LD_VAR 0 1
39147: PPUSH
39148: CALL_OW 255
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 33
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 91
39169: PUSH
39170: LD_VAR 0 1
39174: PUSH
39175: LD_EXP 104
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 50
39187: PUSH
39188: EMPTY
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: PPUSH
39197: CALL_OW 69
39201: ST_TO_ADDR
// if not tmp then
39202: LD_VAR 0 2
39206: NOT
39207: IFFALSE 39211
// continue ;
39209: GO 39006
// HackLink ( i , tmp ) ;
39211: LD_VAR 0 1
39215: PPUSH
39216: LD_VAR 0 2
39220: PPUSH
39221: CALL 39368 0 2
// end ;
39225: GO 39006
39227: POP
39228: POP
// end ;
39229: PPOPN 2
39231: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39232: LD_INT 0
39234: PPUSH
39235: PPUSH
39236: PPUSH
// if not hack in hackTanks then
39237: LD_VAR 0 1
39241: PUSH
39242: LD_EXP 101
39246: IN
39247: NOT
39248: IFFALSE 39252
// exit ;
39250: GO 39363
// index := GetElementIndex ( hackTanks , hack ) ;
39252: LD_ADDR_VAR 0 4
39256: PUSH
39257: LD_EXP 101
39261: PPUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL 47030 0 2
39271: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39272: LD_EXP 102
39276: PUSH
39277: LD_VAR 0 4
39281: ARRAY
39282: IFFALSE 39363
// begin for i in hackTanksCaptured [ index ] do
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_EXP 102
39293: PUSH
39294: LD_VAR 0 4
39298: ARRAY
39299: PUSH
39300: FOR_IN
39301: IFFALSE 39327
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39303: LD_VAR 0 3
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PPUSH
39312: LD_VAR 0 3
39316: PUSH
39317: LD_INT 2
39319: ARRAY
39320: PPUSH
39321: CALL_OW 235
39325: GO 39300
39327: POP
39328: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39329: LD_ADDR_EXP 102
39333: PUSH
39334: LD_EXP 102
39338: PPUSH
39339: LD_VAR 0 4
39343: PPUSH
39344: EMPTY
39345: PPUSH
39346: CALL_OW 1
39350: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39351: LD_VAR 0 1
39355: PPUSH
39356: LD_INT 0
39358: PPUSH
39359: CALL_OW 505
// end ; end ;
39363: LD_VAR 0 2
39367: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39368: LD_INT 0
39370: PPUSH
39371: PPUSH
39372: PPUSH
// if not hack in hackTanks or not vehicles then
39373: LD_VAR 0 1
39377: PUSH
39378: LD_EXP 101
39382: IN
39383: NOT
39384: IFTRUE 39393
39386: PUSH
39387: LD_VAR 0 2
39391: NOT
39392: OR
39393: IFFALSE 39397
// exit ;
39395: GO 39672
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39397: LD_ADDR_VAR 0 2
39401: PUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: LD_VAR 0 2
39411: PPUSH
39412: LD_INT 1
39414: PPUSH
39415: LD_INT 1
39417: PPUSH
39418: CALL 47682 0 4
39422: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39423: LD_ADDR_VAR 0 5
39427: PUSH
39428: LD_EXP 101
39432: PPUSH
39433: LD_VAR 0 1
39437: PPUSH
39438: CALL 47030 0 2
39442: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39443: LD_EXP 102
39447: PUSH
39448: LD_VAR 0 5
39452: ARRAY
39453: PUSH
39454: LD_EXP 103
39458: LESS
39459: IFFALSE 39648
// begin for i := 1 to vehicles do
39461: LD_ADDR_VAR 0 4
39465: PUSH
39466: DOUBLE
39467: LD_INT 1
39469: DEC
39470: ST_TO_ADDR
39471: LD_VAR 0 2
39475: PUSH
39476: FOR_TO
39477: IFFALSE 39646
// begin if hackTanksCaptured [ index ] = hackLimit then
39479: LD_EXP 102
39483: PUSH
39484: LD_VAR 0 5
39488: ARRAY
39489: PUSH
39490: LD_EXP 103
39494: EQUAL
39495: IFFALSE 39499
// break ;
39497: GO 39646
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39499: LD_ADDR_EXP 105
39503: PUSH
39504: LD_EXP 105
39508: PPUSH
39509: LD_VAR 0 5
39513: PPUSH
39514: LD_EXP 105
39518: PUSH
39519: LD_VAR 0 5
39523: ARRAY
39524: PUSH
39525: LD_INT 1
39527: PLUS
39528: PPUSH
39529: CALL_OW 1
39533: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39534: LD_ADDR_EXP 102
39538: PUSH
39539: LD_EXP 102
39543: PPUSH
39544: LD_VAR 0 5
39548: PUSH
39549: LD_EXP 102
39553: PUSH
39554: LD_VAR 0 5
39558: ARRAY
39559: PUSH
39560: LD_INT 1
39562: PLUS
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PPUSH
39568: LD_VAR 0 2
39572: PUSH
39573: LD_VAR 0 4
39577: ARRAY
39578: PUSH
39579: LD_VAR 0 2
39583: PUSH
39584: LD_VAR 0 4
39588: ARRAY
39589: PPUSH
39590: CALL_OW 255
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PPUSH
39599: CALL 47247 0 3
39603: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39604: LD_VAR 0 2
39608: PUSH
39609: LD_VAR 0 4
39613: ARRAY
39614: PPUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 255
39624: PPUSH
39625: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39629: LD_VAR 0 2
39633: PUSH
39634: LD_VAR 0 4
39638: ARRAY
39639: PPUSH
39640: CALL_OW 141
// end ;
39644: GO 39476
39646: POP
39647: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39648: LD_VAR 0 1
39652: PPUSH
39653: LD_EXP 102
39657: PUSH
39658: LD_VAR 0 5
39662: ARRAY
39663: PUSH
39664: LD_INT 0
39666: PLUS
39667: PPUSH
39668: CALL_OW 505
// end ;
39672: LD_VAR 0 3
39676: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39677: LD_INT 0
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
// if not hack in hackTanks then
39683: LD_VAR 0 1
39687: PUSH
39688: LD_EXP 101
39692: IN
39693: NOT
39694: IFFALSE 39698
// exit ;
39696: GO 39942
// index := GetElementIndex ( hackTanks , hack ) ;
39698: LD_ADDR_VAR 0 4
39702: PUSH
39703: LD_EXP 101
39707: PPUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL 47030 0 2
39717: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39718: LD_ADDR_VAR 0 3
39722: PUSH
39723: DOUBLE
39724: LD_EXP 102
39728: PUSH
39729: LD_VAR 0 4
39733: ARRAY
39734: INC
39735: ST_TO_ADDR
39736: LD_INT 1
39738: PUSH
39739: FOR_DOWNTO
39740: IFFALSE 39916
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39742: LD_ADDR_VAR 0 5
39746: PUSH
39747: LD_EXP 102
39751: PUSH
39752: LD_VAR 0 4
39756: ARRAY
39757: PUSH
39758: LD_VAR 0 3
39762: ARRAY
39763: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39764: LD_VAR 0 5
39768: PUSH
39769: LD_INT 1
39771: ARRAY
39772: PPUSH
39773: CALL_OW 302
39777: NOT
39778: IFTRUE 39806
39780: PUSH
39781: LD_VAR 0 5
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: CALL_OW 255
39794: PUSH
39795: LD_VAR 0 1
39799: PPUSH
39800: CALL_OW 255
39804: NONEQUAL
39805: OR
39806: IFFALSE 39914
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39808: LD_VAR 0 5
39812: PUSH
39813: LD_INT 1
39815: ARRAY
39816: PPUSH
39817: CALL_OW 305
39821: IFFALSE 39849
39823: PUSH
39824: LD_VAR 0 5
39828: PUSH
39829: LD_INT 1
39831: ARRAY
39832: PPUSH
39833: CALL_OW 255
39837: PUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL_OW 255
39847: EQUAL
39848: AND
39849: IFFALSE 39873
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39851: LD_VAR 0 5
39855: PUSH
39856: LD_INT 1
39858: ARRAY
39859: PPUSH
39860: LD_VAR 0 5
39864: PUSH
39865: LD_INT 2
39867: ARRAY
39868: PPUSH
39869: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39873: LD_ADDR_EXP 102
39877: PUSH
39878: LD_EXP 102
39882: PPUSH
39883: LD_VAR 0 4
39887: PPUSH
39888: LD_EXP 102
39892: PUSH
39893: LD_VAR 0 4
39897: ARRAY
39898: PPUSH
39899: LD_VAR 0 3
39903: PPUSH
39904: CALL_OW 3
39908: PPUSH
39909: CALL_OW 1
39913: ST_TO_ADDR
// end ; end ;
39914: GO 39739
39916: POP
39917: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39918: LD_VAR 0 1
39922: PPUSH
39923: LD_EXP 102
39927: PUSH
39928: LD_VAR 0 4
39932: ARRAY
39933: PUSH
39934: LD_INT 0
39936: PLUS
39937: PPUSH
39938: CALL_OW 505
// end ;
39942: LD_VAR 0 2
39946: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39947: LD_INT 0
39949: PPUSH
39950: PPUSH
39951: PPUSH
39952: PPUSH
// if not hack in hackTanks then
39953: LD_VAR 0 1
39957: PUSH
39958: LD_EXP 101
39962: IN
39963: NOT
39964: IFFALSE 39968
// exit ;
39966: GO 40053
// index := GetElementIndex ( hackTanks , hack ) ;
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: LD_EXP 101
39977: PPUSH
39978: LD_VAR 0 1
39982: PPUSH
39983: CALL 47030 0 2
39987: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39988: LD_ADDR_VAR 0 4
39992: PUSH
39993: DOUBLE
39994: LD_INT 1
39996: DEC
39997: ST_TO_ADDR
39998: LD_EXP 102
40002: PUSH
40003: LD_VAR 0 5
40007: ARRAY
40008: PUSH
40009: FOR_TO
40010: IFFALSE 40051
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40012: LD_EXP 102
40016: PUSH
40017: LD_VAR 0 5
40021: ARRAY
40022: PUSH
40023: LD_VAR 0 4
40027: ARRAY
40028: PUSH
40029: LD_INT 1
40031: ARRAY
40032: PUSH
40033: LD_VAR 0 2
40037: EQUAL
40038: IFFALSE 40049
// KillUnit ( vehicle ) ;
40040: LD_VAR 0 2
40044: PPUSH
40045: CALL_OW 66
40049: GO 40009
40051: POP
40052: POP
// end ;
40053: LD_VAR 0 3
40057: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40058: LD_EXP 106
40062: NOT
40063: IFFALSE 40098
40065: GO 40067
40067: DISABLE
// begin initMiner := true ;
40068: LD_ADDR_EXP 106
40072: PUSH
40073: LD_INT 1
40075: ST_TO_ADDR
// minersList := [ ] ;
40076: LD_ADDR_EXP 107
40080: PUSH
40081: EMPTY
40082: ST_TO_ADDR
// minerMinesList := [ ] ;
40083: LD_ADDR_EXP 108
40087: PUSH
40088: EMPTY
40089: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40090: LD_ADDR_EXP 109
40094: PUSH
40095: LD_INT 5
40097: ST_TO_ADDR
// end ;
40098: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40099: LD_EXP 106
40103: IFFALSE 40121
40105: PUSH
40106: LD_INT 34
40108: PUSH
40109: LD_INT 81
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PPUSH
40116: CALL_OW 69
40120: AND
40121: IFFALSE 40584
40123: GO 40125
40125: DISABLE
40126: LD_INT 0
40128: PPUSH
40129: PPUSH
40130: PPUSH
40131: PPUSH
// begin enable ;
40132: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40133: LD_ADDR_VAR 0 1
40137: PUSH
40138: LD_INT 34
40140: PUSH
40141: LD_INT 81
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PPUSH
40148: CALL_OW 69
40152: PUSH
40153: FOR_IN
40154: IFFALSE 40226
// begin if not i in minersList then
40156: LD_VAR 0 1
40160: PUSH
40161: LD_EXP 107
40165: IN
40166: NOT
40167: IFFALSE 40224
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40169: LD_ADDR_EXP 107
40173: PUSH
40174: LD_EXP 107
40178: PPUSH
40179: LD_EXP 107
40183: PUSH
40184: LD_INT 1
40186: PLUS
40187: PPUSH
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 1
40197: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40198: LD_ADDR_EXP 108
40202: PUSH
40203: LD_EXP 108
40207: PPUSH
40208: LD_EXP 108
40212: PUSH
40213: LD_INT 1
40215: PLUS
40216: PPUSH
40217: EMPTY
40218: PPUSH
40219: CALL_OW 1
40223: ST_TO_ADDR
// end end ;
40224: GO 40153
40226: POP
40227: POP
// for i := minerMinesList downto 1 do
40228: LD_ADDR_VAR 0 1
40232: PUSH
40233: DOUBLE
40234: LD_EXP 108
40238: INC
40239: ST_TO_ADDR
40240: LD_INT 1
40242: PUSH
40243: FOR_DOWNTO
40244: IFFALSE 40582
// begin if IsLive ( minersList [ i ] ) then
40246: LD_EXP 107
40250: PUSH
40251: LD_VAR 0 1
40255: ARRAY
40256: PPUSH
40257: CALL_OW 300
40261: IFFALSE 40289
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40263: LD_EXP 107
40267: PUSH
40268: LD_VAR 0 1
40272: ARRAY
40273: PPUSH
40274: LD_EXP 108
40278: PUSH
40279: LD_VAR 0 1
40283: ARRAY
40284: PPUSH
40285: CALL_OW 505
// if not minerMinesList [ i ] then
40289: LD_EXP 108
40293: PUSH
40294: LD_VAR 0 1
40298: ARRAY
40299: NOT
40300: IFFALSE 40304
// continue ;
40302: GO 40243
// for j := minerMinesList [ i ] downto 1 do
40304: LD_ADDR_VAR 0 2
40308: PUSH
40309: DOUBLE
40310: LD_EXP 108
40314: PUSH
40315: LD_VAR 0 1
40319: ARRAY
40320: INC
40321: ST_TO_ADDR
40322: LD_INT 1
40324: PUSH
40325: FOR_DOWNTO
40326: IFFALSE 40578
// begin side := GetSide ( minersList [ i ] ) ;
40328: LD_ADDR_VAR 0 3
40332: PUSH
40333: LD_EXP 107
40337: PUSH
40338: LD_VAR 0 1
40342: ARRAY
40343: PPUSH
40344: CALL_OW 255
40348: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40349: LD_ADDR_VAR 0 4
40353: PUSH
40354: LD_EXP 108
40358: PUSH
40359: LD_VAR 0 1
40363: ARRAY
40364: PUSH
40365: LD_VAR 0 2
40369: ARRAY
40370: PUSH
40371: LD_INT 1
40373: ARRAY
40374: PPUSH
40375: LD_EXP 108
40379: PUSH
40380: LD_VAR 0 1
40384: ARRAY
40385: PUSH
40386: LD_VAR 0 2
40390: ARRAY
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: PPUSH
40396: CALL_OW 428
40400: ST_TO_ADDR
// if not tmp then
40401: LD_VAR 0 4
40405: NOT
40406: IFFALSE 40410
// continue ;
40408: GO 40325
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40410: LD_VAR 0 4
40414: PUSH
40415: LD_INT 81
40417: PUSH
40418: LD_VAR 0 3
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PPUSH
40427: CALL_OW 69
40431: IN
40432: IFFALSE 40482
40434: PUSH
40435: LD_EXP 108
40439: PUSH
40440: LD_VAR 0 1
40444: ARRAY
40445: PUSH
40446: LD_VAR 0 2
40450: ARRAY
40451: PUSH
40452: LD_INT 1
40454: ARRAY
40455: PPUSH
40456: LD_EXP 108
40460: PUSH
40461: LD_VAR 0 1
40465: ARRAY
40466: PUSH
40467: LD_VAR 0 2
40471: ARRAY
40472: PUSH
40473: LD_INT 2
40475: ARRAY
40476: PPUSH
40477: CALL_OW 458
40481: AND
40482: IFFALSE 40576
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40484: LD_EXP 108
40488: PUSH
40489: LD_VAR 0 1
40493: ARRAY
40494: PUSH
40495: LD_VAR 0 2
40499: ARRAY
40500: PUSH
40501: LD_INT 1
40503: ARRAY
40504: PPUSH
40505: LD_EXP 108
40509: PUSH
40510: LD_VAR 0 1
40514: ARRAY
40515: PUSH
40516: LD_VAR 0 2
40520: ARRAY
40521: PUSH
40522: LD_INT 2
40524: ARRAY
40525: PPUSH
40526: LD_VAR 0 3
40530: PPUSH
40531: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40535: LD_ADDR_EXP 108
40539: PUSH
40540: LD_EXP 108
40544: PPUSH
40545: LD_VAR 0 1
40549: PPUSH
40550: LD_EXP 108
40554: PUSH
40555: LD_VAR 0 1
40559: ARRAY
40560: PPUSH
40561: LD_VAR 0 2
40565: PPUSH
40566: CALL_OW 3
40570: PPUSH
40571: CALL_OW 1
40575: ST_TO_ADDR
// end ; end ;
40576: GO 40325
40578: POP
40579: POP
// end ;
40580: GO 40243
40582: POP
40583: POP
// end ;
40584: PPOPN 4
40586: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40587: LD_INT 0
40589: PPUSH
40590: PPUSH
// result := false ;
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: LD_INT 0
40598: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40599: LD_VAR 0 1
40603: PPUSH
40604: CALL_OW 264
40608: PUSH
40609: LD_INT 81
40611: EQUAL
40612: NOT
40613: IFFALSE 40617
// exit ;
40615: GO 40861
// index := GetElementIndex ( minersList , unit ) ;
40617: LD_ADDR_VAR 0 5
40621: PUSH
40622: LD_EXP 107
40626: PPUSH
40627: LD_VAR 0 1
40631: PPUSH
40632: CALL 47030 0 2
40636: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40637: LD_EXP 108
40641: PUSH
40642: LD_VAR 0 5
40646: ARRAY
40647: PUSH
40648: LD_EXP 109
40652: GREATEREQUAL
40653: IFFALSE 40657
// exit ;
40655: GO 40861
// ComMoveXY ( unit , x , y ) ;
40657: LD_VAR 0 1
40661: PPUSH
40662: LD_VAR 0 2
40666: PPUSH
40667: LD_VAR 0 3
40671: PPUSH
40672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40676: LD_INT 35
40678: PPUSH
40679: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40683: LD_VAR 0 1
40687: PPUSH
40688: LD_VAR 0 2
40692: PPUSH
40693: LD_VAR 0 3
40697: PPUSH
40698: CALL 79076 0 3
40702: NOT
40703: IFFALSE 40716
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 314
40715: AND
40716: IFFALSE 40720
// exit ;
40718: GO 40861
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40720: LD_VAR 0 2
40724: PPUSH
40725: LD_VAR 0 3
40729: PPUSH
40730: CALL_OW 428
40734: PUSH
40735: LD_VAR 0 1
40739: EQUAL
40740: IFFALSE 40754
40742: PUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: CALL_OW 314
40752: NOT
40753: AND
40754: IFFALSE 40676
// PlaySoundXY ( x , y , PlantMine ) ;
40756: LD_VAR 0 2
40760: PPUSH
40761: LD_VAR 0 3
40765: PPUSH
40766: LD_STRING PlantMine
40768: PPUSH
40769: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40773: LD_VAR 0 2
40777: PPUSH
40778: LD_VAR 0 3
40782: PPUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 255
40792: PPUSH
40793: LD_INT 0
40795: PPUSH
40796: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40800: LD_ADDR_EXP 108
40804: PUSH
40805: LD_EXP 108
40809: PPUSH
40810: LD_VAR 0 5
40814: PUSH
40815: LD_EXP 108
40819: PUSH
40820: LD_VAR 0 5
40824: ARRAY
40825: PUSH
40826: LD_INT 1
40828: PLUS
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PPUSH
40834: LD_VAR 0 2
40838: PUSH
40839: LD_VAR 0 3
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PPUSH
40848: CALL 47247 0 3
40852: ST_TO_ADDR
// result := true ;
40853: LD_ADDR_VAR 0 4
40857: PUSH
40858: LD_INT 1
40860: ST_TO_ADDR
// end ;
40861: LD_VAR 0 4
40865: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40866: LD_INT 0
40868: PPUSH
40869: PPUSH
40870: PPUSH
// if not unit in minersList then
40871: LD_VAR 0 1
40875: PUSH
40876: LD_EXP 107
40880: IN
40881: NOT
40882: IFFALSE 40886
// exit ;
40884: GO 41280
// index := GetElementIndex ( minersList , unit ) ;
40886: LD_ADDR_VAR 0 6
40890: PUSH
40891: LD_EXP 107
40895: PPUSH
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL 47030 0 2
40905: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40906: LD_ADDR_VAR 0 5
40910: PUSH
40911: DOUBLE
40912: LD_EXP 108
40916: PUSH
40917: LD_VAR 0 6
40921: ARRAY
40922: INC
40923: ST_TO_ADDR
40924: LD_INT 1
40926: PUSH
40927: FOR_DOWNTO
40928: IFFALSE 41091
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40930: LD_EXP 108
40934: PUSH
40935: LD_VAR 0 6
40939: ARRAY
40940: PUSH
40941: LD_VAR 0 5
40945: ARRAY
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PUSH
40951: LD_VAR 0 2
40955: EQUAL
40956: IFFALSE 40986
40958: PUSH
40959: LD_EXP 108
40963: PUSH
40964: LD_VAR 0 6
40968: ARRAY
40969: PUSH
40970: LD_VAR 0 5
40974: ARRAY
40975: PUSH
40976: LD_INT 2
40978: ARRAY
40979: PUSH
40980: LD_VAR 0 3
40984: EQUAL
40985: AND
40986: IFFALSE 41089
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40988: LD_EXP 108
40992: PUSH
40993: LD_VAR 0 6
40997: ARRAY
40998: PUSH
40999: LD_VAR 0 5
41003: ARRAY
41004: PUSH
41005: LD_INT 1
41007: ARRAY
41008: PPUSH
41009: LD_EXP 108
41013: PUSH
41014: LD_VAR 0 6
41018: ARRAY
41019: PUSH
41020: LD_VAR 0 5
41024: ARRAY
41025: PUSH
41026: LD_INT 2
41028: ARRAY
41029: PPUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 255
41039: PPUSH
41040: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41044: LD_ADDR_EXP 108
41048: PUSH
41049: LD_EXP 108
41053: PPUSH
41054: LD_VAR 0 6
41058: PPUSH
41059: LD_EXP 108
41063: PUSH
41064: LD_VAR 0 6
41068: ARRAY
41069: PPUSH
41070: LD_VAR 0 5
41074: PPUSH
41075: CALL_OW 3
41079: PPUSH
41080: CALL_OW 1
41084: ST_TO_ADDR
// exit ;
41085: POP
41086: POP
41087: GO 41280
// end ; end ;
41089: GO 40927
41091: POP
41092: POP
// for i := minerMinesList [ index ] downto 1 do
41093: LD_ADDR_VAR 0 5
41097: PUSH
41098: DOUBLE
41099: LD_EXP 108
41103: PUSH
41104: LD_VAR 0 6
41108: ARRAY
41109: INC
41110: ST_TO_ADDR
41111: LD_INT 1
41113: PUSH
41114: FOR_DOWNTO
41115: IFFALSE 41278
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41117: LD_EXP 108
41121: PUSH
41122: LD_VAR 0 6
41126: ARRAY
41127: PUSH
41128: LD_VAR 0 5
41132: ARRAY
41133: PUSH
41134: LD_INT 1
41136: ARRAY
41137: PPUSH
41138: LD_EXP 108
41142: PUSH
41143: LD_VAR 0 6
41147: ARRAY
41148: PUSH
41149: LD_VAR 0 5
41153: ARRAY
41154: PUSH
41155: LD_INT 2
41157: ARRAY
41158: PPUSH
41159: LD_VAR 0 2
41163: PPUSH
41164: LD_VAR 0 3
41168: PPUSH
41169: CALL_OW 298
41173: PUSH
41174: LD_INT 6
41176: LESS
41177: IFFALSE 41276
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41179: LD_EXP 108
41183: PUSH
41184: LD_VAR 0 6
41188: ARRAY
41189: PUSH
41190: LD_VAR 0 5
41194: ARRAY
41195: PUSH
41196: LD_INT 1
41198: ARRAY
41199: PPUSH
41200: LD_EXP 108
41204: PUSH
41205: LD_VAR 0 6
41209: ARRAY
41210: PUSH
41211: LD_VAR 0 5
41215: ARRAY
41216: PUSH
41217: LD_INT 2
41219: ARRAY
41220: PPUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 255
41230: PPUSH
41231: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41235: LD_ADDR_EXP 108
41239: PUSH
41240: LD_EXP 108
41244: PPUSH
41245: LD_VAR 0 6
41249: PPUSH
41250: LD_EXP 108
41254: PUSH
41255: LD_VAR 0 6
41259: ARRAY
41260: PPUSH
41261: LD_VAR 0 5
41265: PPUSH
41266: CALL_OW 3
41270: PPUSH
41271: CALL_OW 1
41275: ST_TO_ADDR
// end ; end ;
41276: GO 41114
41278: POP
41279: POP
// end ;
41280: LD_VAR 0 4
41284: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41285: LD_INT 0
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 264
41305: PUSH
41306: LD_INT 81
41308: EQUAL
41309: NOT
41310: IFTRUE 41325
41312: PUSH
41313: LD_VAR 0 1
41317: PUSH
41318: LD_EXP 107
41322: IN
41323: NOT
41324: OR
41325: IFFALSE 41329
// exit ;
41327: GO 41655
// index := GetElementIndex ( minersList , unit ) ;
41329: LD_ADDR_VAR 0 6
41333: PUSH
41334: LD_EXP 107
41338: PPUSH
41339: LD_VAR 0 1
41343: PPUSH
41344: CALL 47030 0 2
41348: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41349: LD_ADDR_VAR 0 8
41353: PUSH
41354: LD_EXP 109
41358: PUSH
41359: LD_EXP 108
41363: PUSH
41364: LD_VAR 0 6
41368: ARRAY
41369: MINUS
41370: ST_TO_ADDR
// if not minesFreeAmount then
41371: LD_VAR 0 8
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 41655
// tmp := [ ] ;
41380: LD_ADDR_VAR 0 7
41384: PUSH
41385: EMPTY
41386: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41387: LD_ADDR_VAR 0 5
41391: PUSH
41392: DOUBLE
41393: LD_INT 1
41395: DEC
41396: ST_TO_ADDR
41397: LD_VAR 0 8
41401: PUSH
41402: FOR_TO
41403: IFFALSE 41602
// begin _d := rand ( 0 , 5 ) ;
41405: LD_ADDR_VAR 0 11
41409: PUSH
41410: LD_INT 0
41412: PPUSH
41413: LD_INT 5
41415: PPUSH
41416: CALL_OW 12
41420: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41421: LD_ADDR_VAR 0 12
41425: PUSH
41426: LD_INT 2
41428: PPUSH
41429: LD_INT 6
41431: PPUSH
41432: CALL_OW 12
41436: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41437: LD_ADDR_VAR 0 9
41441: PUSH
41442: LD_VAR 0 2
41446: PPUSH
41447: LD_VAR 0 11
41451: PPUSH
41452: LD_VAR 0 12
41456: PPUSH
41457: CALL_OW 272
41461: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41462: LD_ADDR_VAR 0 10
41466: PUSH
41467: LD_VAR 0 3
41471: PPUSH
41472: LD_VAR 0 11
41476: PPUSH
41477: LD_VAR 0 12
41481: PPUSH
41482: CALL_OW 273
41486: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41487: LD_VAR 0 9
41491: PPUSH
41492: LD_VAR 0 10
41496: PPUSH
41497: CALL_OW 488
41501: IFFALSE 41525
41503: PUSH
41504: LD_VAR 0 9
41508: PUSH
41509: LD_VAR 0 10
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_VAR 0 7
41522: IN
41523: NOT
41524: AND
41525: IFFALSE 41544
41527: PUSH
41528: LD_VAR 0 9
41532: PPUSH
41533: LD_VAR 0 10
41537: PPUSH
41538: CALL_OW 458
41542: NOT
41543: AND
41544: IFFALSE 41586
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41546: LD_ADDR_VAR 0 7
41550: PUSH
41551: LD_VAR 0 7
41555: PPUSH
41556: LD_VAR 0 7
41560: PUSH
41561: LD_INT 1
41563: PLUS
41564: PPUSH
41565: LD_VAR 0 9
41569: PUSH
41570: LD_VAR 0 10
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PPUSH
41579: CALL_OW 1
41583: ST_TO_ADDR
41584: GO 41600
// i := i - 1 ;
41586: LD_ADDR_VAR 0 5
41590: PUSH
41591: LD_VAR 0 5
41595: PUSH
41596: LD_INT 1
41598: MINUS
41599: ST_TO_ADDR
// end ;
41600: GO 41402
41602: POP
41603: POP
// for i in tmp do
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_VAR 0 7
41613: PUSH
41614: FOR_IN
41615: IFFALSE 41653
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41617: LD_VAR 0 1
41621: PPUSH
41622: LD_VAR 0 5
41626: PUSH
41627: LD_INT 1
41629: ARRAY
41630: PPUSH
41631: LD_VAR 0 5
41635: PUSH
41636: LD_INT 2
41638: ARRAY
41639: PPUSH
41640: CALL 40587 0 3
41644: NOT
41645: IFFALSE 41651
// exit ;
41647: POP
41648: POP
41649: GO 41655
41651: GO 41614
41653: POP
41654: POP
// end ;
41655: LD_VAR 0 4
41659: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41660: LD_INT 0
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
// if GetClass ( unit ) <> class_sniper then
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 257
41680: PUSH
41681: LD_INT 5
41683: NONEQUAL
41684: IFFALSE 41688
// exit ;
41686: GO 42158
// dist := 8 ;
41688: LD_ADDR_VAR 0 5
41692: PUSH
41693: LD_INT 8
41695: ST_TO_ADDR
// viewRange := 12 ;
41696: LD_ADDR_VAR 0 8
41700: PUSH
41701: LD_INT 12
41703: ST_TO_ADDR
// side := GetSide ( unit ) ;
41704: LD_ADDR_VAR 0 6
41708: PUSH
41709: LD_VAR 0 1
41713: PPUSH
41714: CALL_OW 255
41718: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41719: LD_INT 61
41721: PPUSH
41722: LD_VAR 0 6
41726: PPUSH
41727: CALL_OW 321
41731: PUSH
41732: LD_INT 2
41734: EQUAL
41735: IFFALSE 41745
// viewRange := 16 ;
41737: LD_ADDR_VAR 0 8
41741: PUSH
41742: LD_INT 16
41744: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41745: LD_VAR 0 1
41749: PPUSH
41750: LD_VAR 0 2
41754: PPUSH
41755: LD_VAR 0 3
41759: PPUSH
41760: CALL_OW 297
41764: PUSH
41765: LD_VAR 0 5
41769: GREATER
41770: IFFALSE 41849
// begin ComMoveXY ( unit , x , y ) ;
41772: LD_VAR 0 1
41776: PPUSH
41777: LD_VAR 0 2
41781: PPUSH
41782: LD_VAR 0 3
41786: PPUSH
41787: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41791: LD_INT 35
41793: PPUSH
41794: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41798: LD_VAR 0 1
41802: PPUSH
41803: LD_VAR 0 2
41807: PPUSH
41808: LD_VAR 0 3
41812: PPUSH
41813: CALL 79076 0 3
41817: NOT
41818: IFFALSE 41822
// exit ;
41820: GO 42158
// until GetDistUnitXY ( unit , x , y ) < dist ;
41822: LD_VAR 0 1
41826: PPUSH
41827: LD_VAR 0 2
41831: PPUSH
41832: LD_VAR 0 3
41836: PPUSH
41837: CALL_OW 297
41841: PUSH
41842: LD_VAR 0 5
41846: LESS
41847: IFFALSE 41791
// end ; ComTurnXY ( unit , x , y ) ;
41849: LD_VAR 0 1
41853: PPUSH
41854: LD_VAR 0 2
41858: PPUSH
41859: LD_VAR 0 3
41863: PPUSH
41864: CALL_OW 118
// repeat if Multiplayer then
41868: LD_OWVAR 4
41872: IFFALSE 41883
// wait ( 35 ) else
41874: LD_INT 35
41876: PPUSH
41877: CALL_OW 67
41881: GO 41890
// wait ( 5 ) ;
41883: LD_INT 5
41885: PPUSH
41886: CALL_OW 67
// _d := GetDir ( unit ) ;
41890: LD_ADDR_VAR 0 11
41894: PUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: CALL_OW 254
41904: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41905: LD_ADDR_VAR 0 7
41909: PUSH
41910: LD_VAR 0 1
41914: PPUSH
41915: CALL_OW 250
41919: PPUSH
41920: LD_VAR 0 1
41924: PPUSH
41925: CALL_OW 251
41929: PPUSH
41930: LD_VAR 0 2
41934: PPUSH
41935: LD_VAR 0 3
41939: PPUSH
41940: CALL 81712 0 4
41944: ST_TO_ADDR
// until dir = _d ;
41945: LD_VAR 0 7
41949: PUSH
41950: LD_VAR 0 11
41954: EQUAL
41955: IFFALSE 41868
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41957: LD_ADDR_VAR 0 9
41961: PUSH
41962: LD_VAR 0 1
41966: PPUSH
41967: CALL_OW 250
41971: PPUSH
41972: LD_VAR 0 7
41976: PPUSH
41977: LD_VAR 0 5
41981: PPUSH
41982: CALL_OW 272
41986: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41987: LD_ADDR_VAR 0 10
41991: PUSH
41992: LD_VAR 0 1
41996: PPUSH
41997: CALL_OW 251
42001: PPUSH
42002: LD_VAR 0 7
42006: PPUSH
42007: LD_VAR 0 5
42011: PPUSH
42012: CALL_OW 273
42016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42017: LD_VAR 0 9
42021: PPUSH
42022: LD_VAR 0 10
42026: PPUSH
42027: CALL_OW 488
42031: NOT
42032: IFFALSE 42036
// exit ;
42034: GO 42158
// ComAnimCustom ( unit , 1 ) ;
42036: LD_VAR 0 1
42040: PPUSH
42041: LD_INT 1
42043: PPUSH
42044: CALL_OW 592
// p := 0 ;
42048: LD_ADDR_VAR 0 12
42052: PUSH
42053: LD_INT 0
42055: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42056: LD_VAR 0 9
42060: PPUSH
42061: LD_VAR 0 10
42065: PPUSH
42066: LD_VAR 0 6
42070: PPUSH
42071: LD_VAR 0 8
42075: PPUSH
42076: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
42080: LD_INT 35
42082: PPUSH
42083: CALL_OW 67
// p := Inc ( p ) ;
42087: LD_ADDR_VAR 0 12
42091: PUSH
42092: LD_VAR 0 12
42096: PPUSH
42097: CALL 81668 0 1
42101: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
42102: LD_VAR 0 12
42106: PUSH
42107: LD_INT 3
42109: EQUAL
42110: IFTRUE 42124
42112: PUSH
42113: LD_VAR 0 1
42117: PPUSH
42118: CALL_OW 302
42122: NOT
42123: OR
42124: IFTRUE 42137
42126: PUSH
42127: LD_VAR 0 1
42131: PPUSH
42132: CALL_OW 301
42136: OR
42137: IFFALSE 42080
// RemoveSeeing ( _x , _y , side ) ;
42139: LD_VAR 0 9
42143: PPUSH
42144: LD_VAR 0 10
42148: PPUSH
42149: LD_VAR 0 6
42153: PPUSH
42154: CALL_OW 331
// end ; end_of_file
42158: LD_VAR 0 4
42162: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42163: LD_INT 0
42165: PPUSH
42166: PPUSH
// if exist_mode then
42167: LD_VAR 0 2
42171: IFFALSE 42217
// begin unit := CreateCharacter ( prefix & ident ) ;
42173: LD_ADDR_VAR 0 5
42177: PUSH
42178: LD_VAR 0 3
42182: PUSH
42183: LD_VAR 0 1
42187: STR
42188: PPUSH
42189: CALL_OW 34
42193: ST_TO_ADDR
// if unit then
42194: LD_VAR 0 5
42198: IFFALSE 42215
// DeleteCharacters ( prefix & ident ) ;
42200: LD_VAR 0 3
42204: PUSH
42205: LD_VAR 0 1
42209: STR
42210: PPUSH
42211: CALL_OW 40
// end else
42215: GO 42232
// unit := NewCharacter ( ident ) ;
42217: LD_ADDR_VAR 0 5
42221: PUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: CALL_OW 25
42231: ST_TO_ADDR
// result := unit ;
42232: LD_ADDR_VAR 0 4
42236: PUSH
42237: LD_VAR 0 5
42241: ST_TO_ADDR
// end ;
42242: LD_VAR 0 4
42246: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42247: LD_INT 0
42249: PPUSH
42250: PPUSH
// if exist_mode then
42251: LD_VAR 0 2
42255: IFFALSE 42280
// unit := CreateCharacter ( prefix & ident ) else
42257: LD_ADDR_VAR 0 5
42261: PUSH
42262: LD_VAR 0 3
42266: PUSH
42267: LD_VAR 0 1
42271: STR
42272: PPUSH
42273: CALL_OW 34
42277: ST_TO_ADDR
42278: GO 42295
// unit := NewCharacter ( ident ) ;
42280: LD_ADDR_VAR 0 5
42284: PUSH
42285: LD_VAR 0 1
42289: PPUSH
42290: CALL_OW 25
42294: ST_TO_ADDR
// result := unit ;
42295: LD_ADDR_VAR 0 4
42299: PUSH
42300: LD_VAR 0 5
42304: ST_TO_ADDR
// end ;
42305: LD_VAR 0 4
42309: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42310: LD_INT 0
42312: PPUSH
42313: PPUSH
// if not side or not nation then
42314: LD_VAR 0 1
42318: NOT
42319: IFTRUE 42328
42321: PUSH
42322: LD_VAR 0 2
42326: NOT
42327: OR
42328: IFFALSE 42332
// exit ;
42330: GO 43102
// case nation of nation_american :
42332: LD_VAR 0 2
42336: PUSH
42337: LD_INT 1
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42559
42345: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42346: LD_ADDR_VAR 0 4
42350: PUSH
42351: LD_INT 35
42353: PUSH
42354: LD_INT 45
42356: PUSH
42357: LD_INT 46
42359: PUSH
42360: LD_INT 47
42362: PUSH
42363: LD_INT 82
42365: PUSH
42366: LD_INT 83
42368: PUSH
42369: LD_INT 84
42371: PUSH
42372: LD_INT 85
42374: PUSH
42375: LD_INT 86
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 6
42386: PUSH
42387: LD_INT 15
42389: PUSH
42390: LD_INT 16
42392: PUSH
42393: LD_INT 7
42395: PUSH
42396: LD_INT 12
42398: PUSH
42399: LD_INT 13
42401: PUSH
42402: LD_INT 10
42404: PUSH
42405: LD_INT 14
42407: PUSH
42408: LD_INT 20
42410: PUSH
42411: LD_INT 21
42413: PUSH
42414: LD_INT 22
42416: PUSH
42417: LD_INT 25
42419: PUSH
42420: LD_INT 32
42422: PUSH
42423: LD_INT 27
42425: PUSH
42426: LD_INT 36
42428: PUSH
42429: LD_INT 69
42431: PUSH
42432: LD_INT 39
42434: PUSH
42435: LD_INT 34
42437: PUSH
42438: LD_INT 40
42440: PUSH
42441: LD_INT 48
42443: PUSH
42444: LD_INT 49
42446: PUSH
42447: LD_INT 50
42449: PUSH
42450: LD_INT 51
42452: PUSH
42453: LD_INT 52
42455: PUSH
42456: LD_INT 53
42458: PUSH
42459: LD_INT 54
42461: PUSH
42462: LD_INT 55
42464: PUSH
42465: LD_INT 56
42467: PUSH
42468: LD_INT 57
42470: PUSH
42471: LD_INT 58
42473: PUSH
42474: LD_INT 59
42476: PUSH
42477: LD_INT 60
42479: PUSH
42480: LD_INT 61
42482: PUSH
42483: LD_INT 62
42485: PUSH
42486: LD_INT 80
42488: PUSH
42489: LD_INT 82
42491: PUSH
42492: LD_INT 83
42494: PUSH
42495: LD_INT 84
42497: PUSH
42498: LD_INT 85
42500: PUSH
42501: LD_INT 86
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: ST_TO_ADDR
42557: GO 43024
42559: LD_INT 2
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42567
42565: GO 42793
42567: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42568: LD_ADDR_VAR 0 4
42572: PUSH
42573: LD_INT 35
42575: PUSH
42576: LD_INT 45
42578: PUSH
42579: LD_INT 46
42581: PUSH
42582: LD_INT 47
42584: PUSH
42585: LD_INT 82
42587: PUSH
42588: LD_INT 83
42590: PUSH
42591: LD_INT 84
42593: PUSH
42594: LD_INT 85
42596: PUSH
42597: LD_INT 87
42599: PUSH
42600: LD_INT 70
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 11
42608: PUSH
42609: LD_INT 3
42611: PUSH
42612: LD_INT 4
42614: PUSH
42615: LD_INT 5
42617: PUSH
42618: LD_INT 6
42620: PUSH
42621: LD_INT 15
42623: PUSH
42624: LD_INT 18
42626: PUSH
42627: LD_INT 7
42629: PUSH
42630: LD_INT 17
42632: PUSH
42633: LD_INT 8
42635: PUSH
42636: LD_INT 20
42638: PUSH
42639: LD_INT 21
42641: PUSH
42642: LD_INT 22
42644: PUSH
42645: LD_INT 72
42647: PUSH
42648: LD_INT 26
42650: PUSH
42651: LD_INT 69
42653: PUSH
42654: LD_INT 39
42656: PUSH
42657: LD_INT 40
42659: PUSH
42660: LD_INT 41
42662: PUSH
42663: LD_INT 42
42665: PUSH
42666: LD_INT 43
42668: PUSH
42669: LD_INT 48
42671: PUSH
42672: LD_INT 49
42674: PUSH
42675: LD_INT 50
42677: PUSH
42678: LD_INT 51
42680: PUSH
42681: LD_INT 52
42683: PUSH
42684: LD_INT 53
42686: PUSH
42687: LD_INT 54
42689: PUSH
42690: LD_INT 55
42692: PUSH
42693: LD_INT 56
42695: PUSH
42696: LD_INT 60
42698: PUSH
42699: LD_INT 61
42701: PUSH
42702: LD_INT 62
42704: PUSH
42705: LD_INT 66
42707: PUSH
42708: LD_INT 67
42710: PUSH
42711: LD_INT 68
42713: PUSH
42714: LD_INT 81
42716: PUSH
42717: LD_INT 82
42719: PUSH
42720: LD_INT 83
42722: PUSH
42723: LD_INT 84
42725: PUSH
42726: LD_INT 85
42728: PUSH
42729: LD_INT 87
42731: PUSH
42732: LD_INT 88
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: ST_TO_ADDR
42791: GO 43024
42793: LD_INT 3
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42801
42799: GO 43023
42801: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42802: LD_ADDR_VAR 0 4
42806: PUSH
42807: LD_INT 46
42809: PUSH
42810: LD_INT 47
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 82
42821: PUSH
42822: LD_INT 83
42824: PUSH
42825: LD_INT 84
42827: PUSH
42828: LD_INT 85
42830: PUSH
42831: LD_INT 86
42833: PUSH
42834: LD_INT 11
42836: PUSH
42837: LD_INT 9
42839: PUSH
42840: LD_INT 20
42842: PUSH
42843: LD_INT 19
42845: PUSH
42846: LD_INT 21
42848: PUSH
42849: LD_INT 24
42851: PUSH
42852: LD_INT 22
42854: PUSH
42855: LD_INT 25
42857: PUSH
42858: LD_INT 28
42860: PUSH
42861: LD_INT 29
42863: PUSH
42864: LD_INT 30
42866: PUSH
42867: LD_INT 31
42869: PUSH
42870: LD_INT 37
42872: PUSH
42873: LD_INT 38
42875: PUSH
42876: LD_INT 32
42878: PUSH
42879: LD_INT 27
42881: PUSH
42882: LD_INT 33
42884: PUSH
42885: LD_INT 69
42887: PUSH
42888: LD_INT 39
42890: PUSH
42891: LD_INT 34
42893: PUSH
42894: LD_INT 40
42896: PUSH
42897: LD_INT 71
42899: PUSH
42900: LD_INT 23
42902: PUSH
42903: LD_INT 44
42905: PUSH
42906: LD_INT 48
42908: PUSH
42909: LD_INT 49
42911: PUSH
42912: LD_INT 50
42914: PUSH
42915: LD_INT 51
42917: PUSH
42918: LD_INT 52
42920: PUSH
42921: LD_INT 53
42923: PUSH
42924: LD_INT 54
42926: PUSH
42927: LD_INT 55
42929: PUSH
42930: LD_INT 56
42932: PUSH
42933: LD_INT 57
42935: PUSH
42936: LD_INT 58
42938: PUSH
42939: LD_INT 59
42941: PUSH
42942: LD_INT 63
42944: PUSH
42945: LD_INT 64
42947: PUSH
42948: LD_INT 65
42950: PUSH
42951: LD_INT 82
42953: PUSH
42954: LD_INT 83
42956: PUSH
42957: LD_INT 84
42959: PUSH
42960: LD_INT 85
42962: PUSH
42963: LD_INT 86
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: ST_TO_ADDR
43021: GO 43024
43023: POP
// if state > - 1 and state < 3 then
43024: LD_VAR 0 3
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: GREATER
43033: IFFALSE 43045
43035: PUSH
43036: LD_VAR 0 3
43040: PUSH
43041: LD_INT 3
43043: LESS
43044: AND
43045: IFFALSE 43102
// for i in result do
43047: LD_ADDR_VAR 0 5
43051: PUSH
43052: LD_VAR 0 4
43056: PUSH
43057: FOR_IN
43058: IFFALSE 43100
// if GetTech ( i , side ) <> state then
43060: LD_VAR 0 5
43064: PPUSH
43065: LD_VAR 0 1
43069: PPUSH
43070: CALL_OW 321
43074: PUSH
43075: LD_VAR 0 3
43079: NONEQUAL
43080: IFFALSE 43098
// result := result diff i ;
43082: LD_ADDR_VAR 0 4
43086: PUSH
43087: LD_VAR 0 4
43091: PUSH
43092: LD_VAR 0 5
43096: DIFF
43097: ST_TO_ADDR
43098: GO 43057
43100: POP
43101: POP
// end ;
43102: LD_VAR 0 4
43106: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43107: LD_INT 0
43109: PPUSH
43110: PPUSH
43111: PPUSH
// result := true ;
43112: LD_ADDR_VAR 0 3
43116: PUSH
43117: LD_INT 1
43119: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43120: LD_ADDR_VAR 0 5
43124: PUSH
43125: LD_VAR 0 2
43129: PPUSH
43130: CALL_OW 480
43134: ST_TO_ADDR
// if not tmp then
43135: LD_VAR 0 5
43139: NOT
43140: IFFALSE 43144
// exit ;
43142: GO 43193
// for i in tmp do
43144: LD_ADDR_VAR 0 4
43148: PUSH
43149: LD_VAR 0 5
43153: PUSH
43154: FOR_IN
43155: IFFALSE 43191
// if GetTech ( i , side ) <> state_researched then
43157: LD_VAR 0 4
43161: PPUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 321
43171: PUSH
43172: LD_INT 2
43174: NONEQUAL
43175: IFFALSE 43189
// begin result := false ;
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_INT 0
43184: ST_TO_ADDR
// exit ;
43185: POP
43186: POP
43187: GO 43193
// end ;
43189: GO 43154
43191: POP
43192: POP
// end ;
43193: LD_VAR 0 3
43197: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43198: LD_INT 0
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
43212: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43213: LD_VAR 0 1
43217: NOT
43218: IFTRUE 43235
43220: PUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: CALL_OW 257
43230: PUSH
43231: LD_INT 9
43233: NONEQUAL
43234: OR
43235: IFFALSE 43239
// exit ;
43237: GO 43818
// side := GetSide ( unit ) ;
43239: LD_ADDR_VAR 0 9
43243: PUSH
43244: LD_VAR 0 1
43248: PPUSH
43249: CALL_OW 255
43253: ST_TO_ADDR
// tech_space := tech_spacanom ;
43254: LD_ADDR_VAR 0 12
43258: PUSH
43259: LD_INT 29
43261: ST_TO_ADDR
// tech_time := tech_taurad ;
43262: LD_ADDR_VAR 0 13
43266: PUSH
43267: LD_INT 28
43269: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43270: LD_ADDR_VAR 0 11
43274: PUSH
43275: LD_VAR 0 1
43279: PPUSH
43280: CALL_OW 310
43284: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43285: LD_VAR 0 11
43289: PPUSH
43290: CALL_OW 247
43294: PUSH
43295: LD_INT 2
43297: EQUAL
43298: IFFALSE 43302
// exit ;
43300: GO 43818
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43302: LD_ADDR_VAR 0 8
43306: PUSH
43307: LD_INT 81
43309: PUSH
43310: LD_VAR 0 9
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 21
43324: PUSH
43325: LD_INT 3
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PPUSH
43340: CALL_OW 69
43344: ST_TO_ADDR
// if not tmp then
43345: LD_VAR 0 8
43349: NOT
43350: IFFALSE 43354
// exit ;
43352: GO 43818
// if in_unit then
43354: LD_VAR 0 11
43358: IFFALSE 43382
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43360: LD_ADDR_VAR 0 10
43364: PUSH
43365: LD_VAR 0 8
43369: PPUSH
43370: LD_VAR 0 11
43374: PPUSH
43375: CALL_OW 74
43379: ST_TO_ADDR
43380: GO 43402
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43382: LD_ADDR_VAR 0 10
43386: PUSH
43387: LD_VAR 0 8
43391: PPUSH
43392: LD_VAR 0 1
43396: PPUSH
43397: CALL_OW 74
43401: ST_TO_ADDR
// if not enemy then
43402: LD_VAR 0 10
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 43818
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43411: LD_VAR 0 11
43415: IFFALSE 43437
43417: PUSH
43418: LD_VAR 0 11
43422: PPUSH
43423: LD_VAR 0 10
43427: PPUSH
43428: CALL_OW 296
43432: PUSH
43433: LD_INT 13
43435: GREATER
43436: AND
43437: IFTRUE 43459
43439: PUSH
43440: LD_VAR 0 1
43444: PPUSH
43445: LD_VAR 0 10
43449: PPUSH
43450: CALL_OW 296
43454: PUSH
43455: LD_INT 12
43457: GREATER
43458: OR
43459: IFFALSE 43463
// exit ;
43461: GO 43818
// missile := [ 1 ] ;
43463: LD_ADDR_VAR 0 14
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43474: LD_VAR 0 9
43478: PPUSH
43479: LD_VAR 0 12
43483: PPUSH
43484: CALL_OW 325
43488: IFFALSE 43517
// missile := Replace ( missile , missile + 1 , 2 ) ;
43490: LD_ADDR_VAR 0 14
43494: PUSH
43495: LD_VAR 0 14
43499: PPUSH
43500: LD_VAR 0 14
43504: PUSH
43505: LD_INT 1
43507: PLUS
43508: PPUSH
43509: LD_INT 2
43511: PPUSH
43512: CALL_OW 1
43516: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43517: LD_VAR 0 9
43521: PPUSH
43522: LD_VAR 0 13
43526: PPUSH
43527: CALL_OW 325
43531: IFFALSE 43555
43533: PUSH
43534: LD_VAR 0 10
43538: PPUSH
43539: CALL_OW 255
43543: PPUSH
43544: LD_VAR 0 13
43548: PPUSH
43549: CALL_OW 325
43553: NOT
43554: AND
43555: IFFALSE 43584
// missile := Replace ( missile , missile + 1 , 3 ) ;
43557: LD_ADDR_VAR 0 14
43561: PUSH
43562: LD_VAR 0 14
43566: PPUSH
43567: LD_VAR 0 14
43571: PUSH
43572: LD_INT 1
43574: PLUS
43575: PPUSH
43576: LD_INT 3
43578: PPUSH
43579: CALL_OW 1
43583: ST_TO_ADDR
// if missile < 2 then
43584: LD_VAR 0 14
43588: PUSH
43589: LD_INT 2
43591: LESS
43592: IFFALSE 43596
// exit ;
43594: GO 43818
// x := GetX ( enemy ) ;
43596: LD_ADDR_VAR 0 4
43600: PUSH
43601: LD_VAR 0 10
43605: PPUSH
43606: CALL_OW 250
43610: ST_TO_ADDR
// y := GetY ( enemy ) ;
43611: LD_ADDR_VAR 0 5
43615: PUSH
43616: LD_VAR 0 10
43620: PPUSH
43621: CALL_OW 251
43625: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43626: LD_ADDR_VAR 0 6
43630: PUSH
43631: LD_VAR 0 4
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PPUSH
43640: LD_INT 1
43642: PPUSH
43643: CALL_OW 12
43647: PLUS
43648: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43649: LD_ADDR_VAR 0 7
43653: PUSH
43654: LD_VAR 0 5
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PPUSH
43663: LD_INT 1
43665: PPUSH
43666: CALL_OW 12
43670: PLUS
43671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43672: LD_VAR 0 6
43676: PPUSH
43677: LD_VAR 0 7
43681: PPUSH
43682: CALL_OW 488
43686: NOT
43687: IFFALSE 43709
// begin _x := x ;
43689: LD_ADDR_VAR 0 6
43693: PUSH
43694: LD_VAR 0 4
43698: ST_TO_ADDR
// _y := y ;
43699: LD_ADDR_VAR 0 7
43703: PUSH
43704: LD_VAR 0 5
43708: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43709: LD_ADDR_VAR 0 3
43713: PUSH
43714: LD_INT 1
43716: PPUSH
43717: LD_VAR 0 14
43721: PPUSH
43722: CALL_OW 12
43726: ST_TO_ADDR
// case i of 1 :
43727: LD_VAR 0 3
43731: PUSH
43732: LD_INT 1
43734: DOUBLE
43735: EQUAL
43736: IFTRUE 43740
43738: GO 43757
43740: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43741: LD_VAR 0 1
43745: PPUSH
43746: LD_VAR 0 10
43750: PPUSH
43751: CALL_OW 115
43755: GO 43818
43757: LD_INT 2
43759: DOUBLE
43760: EQUAL
43761: IFTRUE 43765
43763: GO 43787
43765: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43766: LD_VAR 0 1
43770: PPUSH
43771: LD_VAR 0 6
43775: PPUSH
43776: LD_VAR 0 7
43780: PPUSH
43781: CALL_OW 153
43785: GO 43818
43787: LD_INT 3
43789: DOUBLE
43790: EQUAL
43791: IFTRUE 43795
43793: GO 43817
43795: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43796: LD_VAR 0 1
43800: PPUSH
43801: LD_VAR 0 6
43805: PPUSH
43806: LD_VAR 0 7
43810: PPUSH
43811: CALL_OW 154
43815: GO 43818
43817: POP
// end ;
43818: LD_VAR 0 2
43822: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43823: LD_INT 0
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
// if not unit or not building then
43831: LD_VAR 0 1
43835: NOT
43836: IFTRUE 43845
43838: PUSH
43839: LD_VAR 0 2
43843: NOT
43844: OR
43845: IFFALSE 43849
// exit ;
43847: GO 44007
// x := GetX ( building ) ;
43849: LD_ADDR_VAR 0 5
43853: PUSH
43854: LD_VAR 0 2
43858: PPUSH
43859: CALL_OW 250
43863: ST_TO_ADDR
// y := GetY ( building ) ;
43864: LD_ADDR_VAR 0 6
43868: PUSH
43869: LD_VAR 0 2
43873: PPUSH
43874: CALL_OW 251
43878: ST_TO_ADDR
// for i := 0 to 5 do
43879: LD_ADDR_VAR 0 4
43883: PUSH
43884: DOUBLE
43885: LD_INT 0
43887: DEC
43888: ST_TO_ADDR
43889: LD_INT 5
43891: PUSH
43892: FOR_TO
43893: IFFALSE 44005
// begin _x := ShiftX ( x , i , 3 ) ;
43895: LD_ADDR_VAR 0 7
43899: PUSH
43900: LD_VAR 0 5
43904: PPUSH
43905: LD_VAR 0 4
43909: PPUSH
43910: LD_INT 3
43912: PPUSH
43913: CALL_OW 272
43917: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43918: LD_ADDR_VAR 0 8
43922: PUSH
43923: LD_VAR 0 6
43927: PPUSH
43928: LD_VAR 0 4
43932: PPUSH
43933: LD_INT 3
43935: PPUSH
43936: CALL_OW 273
43940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43941: LD_VAR 0 7
43945: PPUSH
43946: LD_VAR 0 8
43950: PPUSH
43951: CALL_OW 488
43955: NOT
43956: IFFALSE 43960
// continue ;
43958: GO 43892
// if HexInfo ( _x , _y ) = 0 then
43960: LD_VAR 0 7
43964: PPUSH
43965: LD_VAR 0 8
43969: PPUSH
43970: CALL_OW 428
43974: PUSH
43975: LD_INT 0
43977: EQUAL
43978: IFFALSE 44003
// begin ComMoveXY ( unit , _x , _y ) ;
43980: LD_VAR 0 1
43984: PPUSH
43985: LD_VAR 0 7
43989: PPUSH
43990: LD_VAR 0 8
43994: PPUSH
43995: CALL_OW 111
// exit ;
43999: POP
44000: POP
44001: GO 44007
// end ; end ;
44003: GO 43892
44005: POP
44006: POP
// end ;
44007: LD_VAR 0 3
44011: RET
// export function ScanBase ( side , base_area ) ; begin
44012: LD_INT 0
44014: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44015: LD_ADDR_VAR 0 3
44019: PUSH
44020: LD_VAR 0 2
44024: PPUSH
44025: LD_INT 81
44027: PUSH
44028: LD_VAR 0 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PPUSH
44037: CALL_OW 70
44041: ST_TO_ADDR
// end ;
44042: LD_VAR 0 3
44046: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44047: LD_INT 0
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
// result := false ;
44053: LD_ADDR_VAR 0 2
44057: PUSH
44058: LD_INT 0
44060: ST_TO_ADDR
// side := GetSide ( unit ) ;
44061: LD_ADDR_VAR 0 3
44065: PUSH
44066: LD_VAR 0 1
44070: PPUSH
44071: CALL_OW 255
44075: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44076: LD_ADDR_VAR 0 4
44080: PUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 248
44090: ST_TO_ADDR
// case nat of 1 :
44091: LD_VAR 0 4
44095: PUSH
44096: LD_INT 1
44098: DOUBLE
44099: EQUAL
44100: IFTRUE 44104
44102: GO 44115
44104: POP
// tech := tech_lassight ; 2 :
44105: LD_ADDR_VAR 0 5
44109: PUSH
44110: LD_INT 12
44112: ST_TO_ADDR
44113: GO 44154
44115: LD_INT 2
44117: DOUBLE
44118: EQUAL
44119: IFTRUE 44123
44121: GO 44134
44123: POP
// tech := tech_mortar ; 3 :
44124: LD_ADDR_VAR 0 5
44128: PUSH
44129: LD_INT 41
44131: ST_TO_ADDR
44132: GO 44154
44134: LD_INT 3
44136: DOUBLE
44137: EQUAL
44138: IFTRUE 44142
44140: GO 44153
44142: POP
// tech := tech_bazooka ; end ;
44143: LD_ADDR_VAR 0 5
44147: PUSH
44148: LD_INT 44
44150: ST_TO_ADDR
44151: GO 44154
44153: POP
// if Researched ( side , tech ) then
44154: LD_VAR 0 3
44158: PPUSH
44159: LD_VAR 0 5
44163: PPUSH
44164: CALL_OW 325
44168: IFFALSE 44195
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44170: LD_ADDR_VAR 0 2
44174: PUSH
44175: LD_INT 5
44177: PUSH
44178: LD_INT 8
44180: PUSH
44181: LD_INT 9
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: PUSH
44189: LD_VAR 0 4
44193: ARRAY
44194: ST_TO_ADDR
// end ;
44195: LD_VAR 0 2
44199: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44200: LD_INT 0
44202: PPUSH
44203: PPUSH
44204: PPUSH
// if not mines then
44205: LD_VAR 0 2
44209: NOT
44210: IFFALSE 44214
// exit ;
44212: GO 44358
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44214: LD_ADDR_VAR 0 5
44218: PUSH
44219: LD_INT 81
44221: PUSH
44222: LD_VAR 0 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: LD_INT 21
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PPUSH
44252: CALL_OW 69
44256: ST_TO_ADDR
// for i in mines do
44257: LD_ADDR_VAR 0 4
44261: PUSH
44262: LD_VAR 0 2
44266: PUSH
44267: FOR_IN
44268: IFFALSE 44356
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44270: LD_VAR 0 4
44274: PUSH
44275: LD_INT 1
44277: ARRAY
44278: PPUSH
44279: LD_VAR 0 4
44283: PUSH
44284: LD_INT 2
44286: ARRAY
44287: PPUSH
44288: CALL_OW 458
44292: NOT
44293: IFFALSE 44297
// continue ;
44295: GO 44267
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44297: LD_VAR 0 4
44301: PUSH
44302: LD_INT 1
44304: ARRAY
44305: PPUSH
44306: LD_VAR 0 4
44310: PUSH
44311: LD_INT 2
44313: ARRAY
44314: PPUSH
44315: CALL_OW 428
44319: PUSH
44320: LD_VAR 0 5
44324: IN
44325: IFFALSE 44354
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44327: LD_VAR 0 4
44331: PUSH
44332: LD_INT 1
44334: ARRAY
44335: PPUSH
44336: LD_VAR 0 4
44340: PUSH
44341: LD_INT 2
44343: ARRAY
44344: PPUSH
44345: LD_VAR 0 1
44349: PPUSH
44350: CALL_OW 456
// end ;
44354: GO 44267
44356: POP
44357: POP
// end ;
44358: LD_VAR 0 3
44362: RET
// export function Count ( array ) ; begin
44363: LD_INT 0
44365: PPUSH
// result := array + 0 ;
44366: LD_ADDR_VAR 0 2
44370: PUSH
44371: LD_VAR 0 1
44375: PUSH
44376: LD_INT 0
44378: PLUS
44379: ST_TO_ADDR
// end ;
44380: LD_VAR 0 2
44384: RET
// export function IsEmpty ( building ) ; begin
44385: LD_INT 0
44387: PPUSH
// if not building then
44388: LD_VAR 0 1
44392: NOT
44393: IFFALSE 44397
// exit ;
44395: GO 44440
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44397: LD_ADDR_VAR 0 2
44401: PUSH
44402: LD_VAR 0 1
44406: PUSH
44407: LD_INT 22
44409: PUSH
44410: LD_VAR 0 1
44414: PPUSH
44415: CALL_OW 255
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 58
44426: PUSH
44427: EMPTY
44428: LIST
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PPUSH
44434: CALL_OW 69
44438: IN
44439: ST_TO_ADDR
// end ;
44440: LD_VAR 0 2
44444: RET
// export function IsNotFull ( building ) ; var places ; begin
44445: LD_INT 0
44447: PPUSH
44448: PPUSH
// if not building then
44449: LD_VAR 0 1
44453: NOT
44454: IFFALSE 44458
// exit ;
44456: GO 44486
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44458: LD_ADDR_VAR 0 2
44462: PUSH
44463: LD_VAR 0 1
44467: PPUSH
44468: LD_INT 3
44470: PUSH
44471: LD_INT 62
44473: PUSH
44474: EMPTY
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PPUSH
44481: CALL_OW 72
44485: ST_TO_ADDR
// end ;
44486: LD_VAR 0 2
44490: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44491: LD_INT 0
44493: PPUSH
44494: PPUSH
44495: PPUSH
44496: PPUSH
// tmp := [ ] ;
44497: LD_ADDR_VAR 0 3
44501: PUSH
44502: EMPTY
44503: ST_TO_ADDR
// list := [ ] ;
44504: LD_ADDR_VAR 0 5
44508: PUSH
44509: EMPTY
44510: ST_TO_ADDR
// for i = 16 to 25 do
44511: LD_ADDR_VAR 0 4
44515: PUSH
44516: DOUBLE
44517: LD_INT 16
44519: DEC
44520: ST_TO_ADDR
44521: LD_INT 25
44523: PUSH
44524: FOR_TO
44525: IFFALSE 44598
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_VAR 0 3
44536: PUSH
44537: LD_INT 22
44539: PUSH
44540: LD_VAR 0 1
44544: PPUSH
44545: CALL_OW 255
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 91
44556: PUSH
44557: LD_VAR 0 1
44561: PUSH
44562: LD_INT 6
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 30
44572: PUSH
44573: LD_VAR 0 4
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: PUSH
44587: EMPTY
44588: LIST
44589: PPUSH
44590: CALL_OW 69
44594: ADD
44595: ST_TO_ADDR
44596: GO 44524
44598: POP
44599: POP
// for i = 1 to tmp do
44600: LD_ADDR_VAR 0 4
44604: PUSH
44605: DOUBLE
44606: LD_INT 1
44608: DEC
44609: ST_TO_ADDR
44610: LD_VAR 0 3
44614: PUSH
44615: FOR_TO
44616: IFFALSE 44704
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44618: LD_ADDR_VAR 0 5
44622: PUSH
44623: LD_VAR 0 5
44627: PUSH
44628: LD_VAR 0 3
44632: PUSH
44633: LD_VAR 0 4
44637: ARRAY
44638: PPUSH
44639: CALL_OW 266
44643: PUSH
44644: LD_VAR 0 3
44648: PUSH
44649: LD_VAR 0 4
44653: ARRAY
44654: PPUSH
44655: CALL_OW 250
44659: PUSH
44660: LD_VAR 0 3
44664: PUSH
44665: LD_VAR 0 4
44669: ARRAY
44670: PPUSH
44671: CALL_OW 251
44675: PUSH
44676: LD_VAR 0 3
44680: PUSH
44681: LD_VAR 0 4
44685: ARRAY
44686: PPUSH
44687: CALL_OW 254
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: PUSH
44698: EMPTY
44699: LIST
44700: ADD
44701: ST_TO_ADDR
44702: GO 44615
44704: POP
44705: POP
// result := list ;
44706: LD_ADDR_VAR 0 2
44710: PUSH
44711: LD_VAR 0 5
44715: ST_TO_ADDR
// end ;
44716: LD_VAR 0 2
44720: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44721: LD_INT 0
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
44729: PPUSH
// if not factory then
44730: LD_VAR 0 1
44734: NOT
44735: IFFALSE 44739
// exit ;
44737: GO 45342
// if control = control_apeman then
44739: LD_VAR 0 4
44743: PUSH
44744: LD_INT 5
44746: EQUAL
44747: IFFALSE 44856
// begin tmp := UnitsInside ( factory ) ;
44749: LD_ADDR_VAR 0 8
44753: PUSH
44754: LD_VAR 0 1
44758: PPUSH
44759: CALL_OW 313
44763: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44764: LD_VAR 0 8
44768: PPUSH
44769: LD_INT 25
44771: PUSH
44772: LD_INT 12
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PPUSH
44779: CALL_OW 72
44783: NOT
44784: IFFALSE 44794
// control := control_manual ;
44786: LD_ADDR_VAR 0 4
44790: PUSH
44791: LD_INT 1
44793: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44794: LD_ADDR_VAR 0 8
44798: PUSH
44799: LD_VAR 0 1
44803: PPUSH
44804: CALL 44491 0 1
44808: ST_TO_ADDR
// if tmp then
44809: LD_VAR 0 8
44813: IFFALSE 44856
// begin for i in tmp do
44815: LD_ADDR_VAR 0 7
44819: PUSH
44820: LD_VAR 0 8
44824: PUSH
44825: FOR_IN
44826: IFFALSE 44854
// if i [ 1 ] = b_ext_radio then
44828: LD_VAR 0 7
44832: PUSH
44833: LD_INT 1
44835: ARRAY
44836: PUSH
44837: LD_INT 22
44839: EQUAL
44840: IFFALSE 44852
// begin control := control_remote ;
44842: LD_ADDR_VAR 0 4
44846: PUSH
44847: LD_INT 2
44849: ST_TO_ADDR
// break ;
44850: GO 44854
// end ;
44852: GO 44825
44854: POP
44855: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44856: LD_VAR 0 1
44860: PPUSH
44861: LD_VAR 0 2
44865: PPUSH
44866: LD_VAR 0 3
44870: PPUSH
44871: LD_VAR 0 4
44875: PPUSH
44876: LD_VAR 0 5
44880: PPUSH
44881: CALL_OW 448
44885: IFFALSE 44920
// begin result := [ chassis , engine , control , weapon ] ;
44887: LD_ADDR_VAR 0 6
44891: PUSH
44892: LD_VAR 0 2
44896: PUSH
44897: LD_VAR 0 3
44901: PUSH
44902: LD_VAR 0 4
44906: PUSH
44907: LD_VAR 0 5
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
// exit ;
44918: GO 45342
// end ; _chassis := AvailableChassisList ( factory ) ;
44920: LD_ADDR_VAR 0 9
44924: PUSH
44925: LD_VAR 0 1
44929: PPUSH
44930: CALL_OW 475
44934: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44935: LD_ADDR_VAR 0 11
44939: PUSH
44940: LD_VAR 0 1
44944: PPUSH
44945: CALL_OW 476
44949: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44950: LD_ADDR_VAR 0 12
44954: PUSH
44955: LD_VAR 0 1
44959: PPUSH
44960: CALL_OW 477
44964: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44965: LD_ADDR_VAR 0 10
44969: PUSH
44970: LD_VAR 0 1
44974: PPUSH
44975: CALL_OW 478
44979: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44980: LD_VAR 0 9
44984: NOT
44985: IFTRUE 44994
44987: PUSH
44988: LD_VAR 0 11
44992: NOT
44993: OR
44994: IFTRUE 45003
44996: PUSH
44997: LD_VAR 0 12
45001: NOT
45002: OR
45003: IFTRUE 45012
45005: PUSH
45006: LD_VAR 0 10
45010: NOT
45011: OR
45012: IFFALSE 45047
// begin result := [ chassis , engine , control , weapon ] ;
45014: LD_ADDR_VAR 0 6
45018: PUSH
45019: LD_VAR 0 2
45023: PUSH
45024: LD_VAR 0 3
45028: PUSH
45029: LD_VAR 0 4
45033: PUSH
45034: LD_VAR 0 5
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: ST_TO_ADDR
// exit ;
45045: GO 45342
// end ; if not chassis in _chassis then
45047: LD_VAR 0 2
45051: PUSH
45052: LD_VAR 0 9
45056: IN
45057: NOT
45058: IFFALSE 45084
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45060: LD_ADDR_VAR 0 2
45064: PUSH
45065: LD_VAR 0 9
45069: PUSH
45070: LD_INT 1
45072: PPUSH
45073: LD_VAR 0 9
45077: PPUSH
45078: CALL_OW 12
45082: ARRAY
45083: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45084: LD_VAR 0 2
45088: PPUSH
45089: LD_VAR 0 3
45093: PPUSH
45094: CALL 45347 0 2
45098: NOT
45099: IFFALSE 45160
// repeat engine := _engine [ 1 ] ;
45101: LD_ADDR_VAR 0 3
45105: PUSH
45106: LD_VAR 0 11
45110: PUSH
45111: LD_INT 1
45113: ARRAY
45114: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45115: LD_ADDR_VAR 0 11
45119: PUSH
45120: LD_VAR 0 11
45124: PPUSH
45125: LD_INT 1
45127: PPUSH
45128: CALL_OW 3
45132: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45133: LD_VAR 0 2
45137: PPUSH
45138: LD_VAR 0 3
45142: PPUSH
45143: CALL 45347 0 2
45147: IFTRUE 45158
45149: PUSH
45150: LD_VAR 0 11
45154: PUSH
45155: EMPTY
45156: EQUAL
45157: OR
45158: IFFALSE 45101
// if not control in _control then
45160: LD_VAR 0 4
45164: PUSH
45165: LD_VAR 0 12
45169: IN
45170: NOT
45171: IFFALSE 45197
// control := _control [ rand ( 1 , _control ) ] ;
45173: LD_ADDR_VAR 0 4
45177: PUSH
45178: LD_VAR 0 12
45182: PUSH
45183: LD_INT 1
45185: PPUSH
45186: LD_VAR 0 12
45190: PPUSH
45191: CALL_OW 12
45195: ARRAY
45196: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45197: LD_VAR 0 2
45201: PPUSH
45202: LD_VAR 0 5
45206: PPUSH
45207: CALL 45569 0 2
45211: NOT
45212: IFFALSE 45273
// repeat weapon := _weapon [ 1 ] ;
45214: LD_ADDR_VAR 0 5
45218: PUSH
45219: LD_VAR 0 10
45223: PUSH
45224: LD_INT 1
45226: ARRAY
45227: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45228: LD_ADDR_VAR 0 10
45232: PUSH
45233: LD_VAR 0 10
45237: PPUSH
45238: LD_INT 1
45240: PPUSH
45241: CALL_OW 3
45245: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45246: LD_VAR 0 2
45250: PPUSH
45251: LD_VAR 0 5
45255: PPUSH
45256: CALL 45569 0 2
45260: IFTRUE 45271
45262: PUSH
45263: LD_VAR 0 10
45267: PUSH
45268: EMPTY
45269: EQUAL
45270: OR
45271: IFFALSE 45214
// result := [ ] ;
45273: LD_ADDR_VAR 0 6
45277: PUSH
45278: EMPTY
45279: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45280: LD_VAR 0 1
45284: PPUSH
45285: LD_VAR 0 2
45289: PPUSH
45290: LD_VAR 0 3
45294: PPUSH
45295: LD_VAR 0 4
45299: PPUSH
45300: LD_VAR 0 5
45304: PPUSH
45305: CALL_OW 448
45309: IFFALSE 45342
// result := [ chassis , engine , control , weapon ] ;
45311: LD_ADDR_VAR 0 6
45315: PUSH
45316: LD_VAR 0 2
45320: PUSH
45321: LD_VAR 0 3
45325: PUSH
45326: LD_VAR 0 4
45330: PUSH
45331: LD_VAR 0 5
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// end ;
45342: LD_VAR 0 6
45346: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45347: LD_INT 0
45349: PPUSH
// if not chassis or not engine then
45350: LD_VAR 0 1
45354: NOT
45355: IFTRUE 45364
45357: PUSH
45358: LD_VAR 0 2
45362: NOT
45363: OR
45364: IFFALSE 45368
// exit ;
45366: GO 45564
// case engine of engine_solar :
45368: LD_VAR 0 2
45372: PUSH
45373: LD_INT 2
45375: DOUBLE
45376: EQUAL
45377: IFTRUE 45381
45379: GO 45419
45381: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45382: LD_ADDR_VAR 0 3
45386: PUSH
45387: LD_INT 11
45389: PUSH
45390: LD_INT 12
45392: PUSH
45393: LD_INT 13
45395: PUSH
45396: LD_INT 14
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: ST_TO_ADDR
45417: GO 45548
45419: LD_INT 1
45421: DOUBLE
45422: EQUAL
45423: IFTRUE 45427
45425: GO 45489
45427: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45428: LD_ADDR_VAR 0 3
45432: PUSH
45433: LD_INT 11
45435: PUSH
45436: LD_INT 12
45438: PUSH
45439: LD_INT 13
45441: PUSH
45442: LD_INT 14
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: LD_INT 4
45456: PUSH
45457: LD_INT 5
45459: PUSH
45460: LD_INT 21
45462: PUSH
45463: LD_INT 23
45465: PUSH
45466: LD_INT 22
45468: PUSH
45469: LD_INT 24
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
45487: GO 45548
45489: LD_INT 3
45491: DOUBLE
45492: EQUAL
45493: IFTRUE 45497
45495: GO 45547
45497: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45498: LD_ADDR_VAR 0 3
45502: PUSH
45503: LD_INT 13
45505: PUSH
45506: LD_INT 14
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: LD_INT 4
45517: PUSH
45518: LD_INT 5
45520: PUSH
45521: LD_INT 21
45523: PUSH
45524: LD_INT 22
45526: PUSH
45527: LD_INT 23
45529: PUSH
45530: LD_INT 24
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
45545: GO 45548
45547: POP
// result := ( chassis in result ) ;
45548: LD_ADDR_VAR 0 3
45552: PUSH
45553: LD_VAR 0 1
45557: PUSH
45558: LD_VAR 0 3
45562: IN
45563: ST_TO_ADDR
// end ;
45564: LD_VAR 0 3
45568: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45569: LD_INT 0
45571: PPUSH
// if not chassis or not weapon then
45572: LD_VAR 0 1
45576: NOT
45577: IFTRUE 45586
45579: PUSH
45580: LD_VAR 0 2
45584: NOT
45585: OR
45586: IFFALSE 45590
// exit ;
45588: GO 46650
// case weapon of us_machine_gun :
45590: LD_VAR 0 2
45594: PUSH
45595: LD_INT 2
45597: DOUBLE
45598: EQUAL
45599: IFTRUE 45603
45601: GO 45633
45603: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45604: LD_ADDR_VAR 0 3
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: LD_INT 4
45620: PUSH
45621: LD_INT 5
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
45631: GO 46634
45633: LD_INT 3
45635: DOUBLE
45636: EQUAL
45637: IFTRUE 45641
45639: GO 45671
45641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45642: LD_ADDR_VAR 0 3
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: LD_INT 4
45658: PUSH
45659: LD_INT 5
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
45669: GO 46634
45671: LD_INT 11
45673: DOUBLE
45674: EQUAL
45675: IFTRUE 45679
45677: GO 45709
45679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45680: LD_ADDR_VAR 0 3
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: LD_INT 4
45696: PUSH
45697: LD_INT 5
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: ST_TO_ADDR
45707: GO 46634
45709: LD_INT 4
45711: DOUBLE
45712: EQUAL
45713: IFTRUE 45717
45715: GO 45743
45717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45718: LD_ADDR_VAR 0 3
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 4
45731: PUSH
45732: LD_INT 5
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
45741: GO 46634
45743: LD_INT 5
45745: DOUBLE
45746: EQUAL
45747: IFTRUE 45751
45749: GO 45777
45751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45752: LD_ADDR_VAR 0 3
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: LD_INT 4
45765: PUSH
45766: LD_INT 5
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
45775: GO 46634
45777: LD_INT 9
45779: DOUBLE
45780: EQUAL
45781: IFTRUE 45785
45783: GO 45811
45785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45786: LD_ADDR_VAR 0 3
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: LD_INT 4
45799: PUSH
45800: LD_INT 5
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: ST_TO_ADDR
45809: GO 46634
45811: LD_INT 7
45813: DOUBLE
45814: EQUAL
45815: IFTRUE 45819
45817: GO 45845
45819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45820: LD_ADDR_VAR 0 3
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 3
45830: PUSH
45831: LD_INT 4
45833: PUSH
45834: LD_INT 5
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
45843: GO 46634
45845: LD_INT 12
45847: DOUBLE
45848: EQUAL
45849: IFTRUE 45853
45851: GO 45879
45853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45854: LD_ADDR_VAR 0 3
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: LD_INT 4
45867: PUSH
45868: LD_INT 5
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: ST_TO_ADDR
45877: GO 46634
45879: LD_INT 13
45881: DOUBLE
45882: EQUAL
45883: IFTRUE 45887
45885: GO 45913
45887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45888: LD_ADDR_VAR 0 3
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: LD_INT 4
45901: PUSH
45902: LD_INT 5
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
45911: GO 46634
45913: LD_INT 14
45915: DOUBLE
45916: EQUAL
45917: IFTRUE 45921
45919: GO 45939
45921: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45922: LD_ADDR_VAR 0 3
45926: PUSH
45927: LD_INT 4
45929: PUSH
45930: LD_INT 5
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: ST_TO_ADDR
45937: GO 46634
45939: LD_INT 6
45941: DOUBLE
45942: EQUAL
45943: IFTRUE 45947
45945: GO 45965
45947: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45948: LD_ADDR_VAR 0 3
45952: PUSH
45953: LD_INT 4
45955: PUSH
45956: LD_INT 5
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: ST_TO_ADDR
45963: GO 46634
45965: LD_INT 10
45967: DOUBLE
45968: EQUAL
45969: IFTRUE 45973
45971: GO 45991
45973: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45974: LD_ADDR_VAR 0 3
45978: PUSH
45979: LD_INT 4
45981: PUSH
45982: LD_INT 5
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: ST_TO_ADDR
45989: GO 46634
45991: LD_INT 22
45993: DOUBLE
45994: EQUAL
45995: IFTRUE 45999
45997: GO 46025
45999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46000: LD_ADDR_VAR 0 3
46004: PUSH
46005: LD_INT 11
46007: PUSH
46008: LD_INT 12
46010: PUSH
46011: LD_INT 13
46013: PUSH
46014: LD_INT 14
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
46023: GO 46634
46025: LD_INT 23
46027: DOUBLE
46028: EQUAL
46029: IFTRUE 46033
46031: GO 46059
46033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46034: LD_ADDR_VAR 0 3
46038: PUSH
46039: LD_INT 11
46041: PUSH
46042: LD_INT 12
46044: PUSH
46045: LD_INT 13
46047: PUSH
46048: LD_INT 14
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
46057: GO 46634
46059: LD_INT 24
46061: DOUBLE
46062: EQUAL
46063: IFTRUE 46067
46065: GO 46093
46067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46068: LD_ADDR_VAR 0 3
46072: PUSH
46073: LD_INT 11
46075: PUSH
46076: LD_INT 12
46078: PUSH
46079: LD_INT 13
46081: PUSH
46082: LD_INT 14
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
46091: GO 46634
46093: LD_INT 30
46095: DOUBLE
46096: EQUAL
46097: IFTRUE 46101
46099: GO 46127
46101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46102: LD_ADDR_VAR 0 3
46106: PUSH
46107: LD_INT 11
46109: PUSH
46110: LD_INT 12
46112: PUSH
46113: LD_INT 13
46115: PUSH
46116: LD_INT 14
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: ST_TO_ADDR
46125: GO 46634
46127: LD_INT 25
46129: DOUBLE
46130: EQUAL
46131: IFTRUE 46135
46133: GO 46153
46135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46136: LD_ADDR_VAR 0 3
46140: PUSH
46141: LD_INT 13
46143: PUSH
46144: LD_INT 14
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: ST_TO_ADDR
46151: GO 46634
46153: LD_INT 27
46155: DOUBLE
46156: EQUAL
46157: IFTRUE 46161
46159: GO 46179
46161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46162: LD_ADDR_VAR 0 3
46166: PUSH
46167: LD_INT 13
46169: PUSH
46170: LD_INT 14
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: ST_TO_ADDR
46177: GO 46634
46179: LD_INT 92
46181: DOUBLE
46182: EQUAL
46183: IFTRUE 46187
46185: GO 46213
46187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46188: LD_ADDR_VAR 0 3
46192: PUSH
46193: LD_INT 11
46195: PUSH
46196: LD_INT 12
46198: PUSH
46199: LD_INT 13
46201: PUSH
46202: LD_INT 14
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: ST_TO_ADDR
46211: GO 46634
46213: LD_INT 28
46215: DOUBLE
46216: EQUAL
46217: IFTRUE 46221
46219: GO 46239
46221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46222: LD_ADDR_VAR 0 3
46226: PUSH
46227: LD_INT 13
46229: PUSH
46230: LD_INT 14
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: ST_TO_ADDR
46237: GO 46634
46239: LD_INT 29
46241: DOUBLE
46242: EQUAL
46243: IFTRUE 46247
46245: GO 46265
46247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46248: LD_ADDR_VAR 0 3
46252: PUSH
46253: LD_INT 13
46255: PUSH
46256: LD_INT 14
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: ST_TO_ADDR
46263: GO 46634
46265: LD_INT 31
46267: DOUBLE
46268: EQUAL
46269: IFTRUE 46273
46271: GO 46291
46273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46274: LD_ADDR_VAR 0 3
46278: PUSH
46279: LD_INT 13
46281: PUSH
46282: LD_INT 14
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: ST_TO_ADDR
46289: GO 46634
46291: LD_INT 26
46293: DOUBLE
46294: EQUAL
46295: IFTRUE 46299
46297: GO 46317
46299: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46300: LD_ADDR_VAR 0 3
46304: PUSH
46305: LD_INT 13
46307: PUSH
46308: LD_INT 14
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: ST_TO_ADDR
46315: GO 46634
46317: LD_INT 42
46319: DOUBLE
46320: EQUAL
46321: IFTRUE 46325
46323: GO 46351
46325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46326: LD_ADDR_VAR 0 3
46330: PUSH
46331: LD_INT 21
46333: PUSH
46334: LD_INT 22
46336: PUSH
46337: LD_INT 23
46339: PUSH
46340: LD_INT 24
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: ST_TO_ADDR
46349: GO 46634
46351: LD_INT 43
46353: DOUBLE
46354: EQUAL
46355: IFTRUE 46359
46357: GO 46385
46359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46360: LD_ADDR_VAR 0 3
46364: PUSH
46365: LD_INT 21
46367: PUSH
46368: LD_INT 22
46370: PUSH
46371: LD_INT 23
46373: PUSH
46374: LD_INT 24
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
46383: GO 46634
46385: LD_INT 44
46387: DOUBLE
46388: EQUAL
46389: IFTRUE 46393
46391: GO 46419
46393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46394: LD_ADDR_VAR 0 3
46398: PUSH
46399: LD_INT 21
46401: PUSH
46402: LD_INT 22
46404: PUSH
46405: LD_INT 23
46407: PUSH
46408: LD_INT 24
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: ST_TO_ADDR
46417: GO 46634
46419: LD_INT 45
46421: DOUBLE
46422: EQUAL
46423: IFTRUE 46427
46425: GO 46453
46427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46428: LD_ADDR_VAR 0 3
46432: PUSH
46433: LD_INT 21
46435: PUSH
46436: LD_INT 22
46438: PUSH
46439: LD_INT 23
46441: PUSH
46442: LD_INT 24
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: ST_TO_ADDR
46451: GO 46634
46453: LD_INT 49
46455: DOUBLE
46456: EQUAL
46457: IFTRUE 46461
46459: GO 46487
46461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46462: LD_ADDR_VAR 0 3
46466: PUSH
46467: LD_INT 21
46469: PUSH
46470: LD_INT 22
46472: PUSH
46473: LD_INT 23
46475: PUSH
46476: LD_INT 24
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
46485: GO 46634
46487: LD_INT 51
46489: DOUBLE
46490: EQUAL
46491: IFTRUE 46495
46493: GO 46521
46495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46496: LD_ADDR_VAR 0 3
46500: PUSH
46501: LD_INT 21
46503: PUSH
46504: LD_INT 22
46506: PUSH
46507: LD_INT 23
46509: PUSH
46510: LD_INT 24
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
46519: GO 46634
46521: LD_INT 52
46523: DOUBLE
46524: EQUAL
46525: IFTRUE 46529
46527: GO 46555
46529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46530: LD_ADDR_VAR 0 3
46534: PUSH
46535: LD_INT 21
46537: PUSH
46538: LD_INT 22
46540: PUSH
46541: LD_INT 23
46543: PUSH
46544: LD_INT 24
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
46553: GO 46634
46555: LD_INT 53
46557: DOUBLE
46558: EQUAL
46559: IFTRUE 46563
46561: GO 46581
46563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46564: LD_ADDR_VAR 0 3
46568: PUSH
46569: LD_INT 23
46571: PUSH
46572: LD_INT 24
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: ST_TO_ADDR
46579: GO 46634
46581: LD_INT 46
46583: DOUBLE
46584: EQUAL
46585: IFTRUE 46589
46587: GO 46607
46589: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46590: LD_ADDR_VAR 0 3
46594: PUSH
46595: LD_INT 23
46597: PUSH
46598: LD_INT 24
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: ST_TO_ADDR
46605: GO 46634
46607: LD_INT 47
46609: DOUBLE
46610: EQUAL
46611: IFTRUE 46615
46613: GO 46633
46615: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46616: LD_ADDR_VAR 0 3
46620: PUSH
46621: LD_INT 23
46623: PUSH
46624: LD_INT 24
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: ST_TO_ADDR
46631: GO 46634
46633: POP
// result := ( chassis in result ) ;
46634: LD_ADDR_VAR 0 3
46638: PUSH
46639: LD_VAR 0 1
46643: PUSH
46644: LD_VAR 0 3
46648: IN
46649: ST_TO_ADDR
// end ;
46650: LD_VAR 0 3
46654: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46655: LD_INT 0
46657: PPUSH
46658: PPUSH
46659: PPUSH
46660: PPUSH
46661: PPUSH
46662: PPUSH
46663: PPUSH
// result := array ;
46664: LD_ADDR_VAR 0 5
46668: PUSH
46669: LD_VAR 0 1
46673: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46674: LD_VAR 0 1
46678: NOT
46679: IFTRUE 46688
46681: PUSH
46682: LD_VAR 0 2
46686: NOT
46687: OR
46688: IFTRUE 46697
46690: PUSH
46691: LD_VAR 0 3
46695: NOT
46696: OR
46697: IFTRUE 46711
46699: PUSH
46700: LD_VAR 0 2
46704: PUSH
46705: LD_VAR 0 1
46709: GREATER
46710: OR
46711: IFTRUE 46725
46713: PUSH
46714: LD_VAR 0 3
46718: PUSH
46719: LD_VAR 0 1
46723: GREATER
46724: OR
46725: IFFALSE 46729
// exit ;
46727: GO 47025
// if direction then
46729: LD_VAR 0 4
46733: IFFALSE 46797
// begin d := 1 ;
46735: LD_ADDR_VAR 0 9
46739: PUSH
46740: LD_INT 1
46742: ST_TO_ADDR
// if i_from > i_to then
46743: LD_VAR 0 2
46747: PUSH
46748: LD_VAR 0 3
46752: GREATER
46753: IFFALSE 46779
// length := ( array - i_from ) + i_to else
46755: LD_ADDR_VAR 0 11
46759: PUSH
46760: LD_VAR 0 1
46764: PUSH
46765: LD_VAR 0 2
46769: MINUS
46770: PUSH
46771: LD_VAR 0 3
46775: PLUS
46776: ST_TO_ADDR
46777: GO 46795
// length := i_to - i_from ;
46779: LD_ADDR_VAR 0 11
46783: PUSH
46784: LD_VAR 0 3
46788: PUSH
46789: LD_VAR 0 2
46793: MINUS
46794: ST_TO_ADDR
// end else
46795: GO 46858
// begin d := - 1 ;
46797: LD_ADDR_VAR 0 9
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: ST_TO_ADDR
// if i_from > i_to then
46806: LD_VAR 0 2
46810: PUSH
46811: LD_VAR 0 3
46815: GREATER
46816: IFFALSE 46836
// length := i_from - i_to else
46818: LD_ADDR_VAR 0 11
46822: PUSH
46823: LD_VAR 0 2
46827: PUSH
46828: LD_VAR 0 3
46832: MINUS
46833: ST_TO_ADDR
46834: GO 46858
// length := ( array - i_to ) + i_from ;
46836: LD_ADDR_VAR 0 11
46840: PUSH
46841: LD_VAR 0 1
46845: PUSH
46846: LD_VAR 0 3
46850: MINUS
46851: PUSH
46852: LD_VAR 0 2
46856: PLUS
46857: ST_TO_ADDR
// end ; if not length then
46858: LD_VAR 0 11
46862: NOT
46863: IFFALSE 46867
// exit ;
46865: GO 47025
// tmp := array ;
46867: LD_ADDR_VAR 0 10
46871: PUSH
46872: LD_VAR 0 1
46876: ST_TO_ADDR
// for i = 1 to length do
46877: LD_ADDR_VAR 0 6
46881: PUSH
46882: DOUBLE
46883: LD_INT 1
46885: DEC
46886: ST_TO_ADDR
46887: LD_VAR 0 11
46891: PUSH
46892: FOR_TO
46893: IFFALSE 47013
// begin for j = 1 to array do
46895: LD_ADDR_VAR 0 7
46899: PUSH
46900: DOUBLE
46901: LD_INT 1
46903: DEC
46904: ST_TO_ADDR
46905: LD_VAR 0 1
46909: PUSH
46910: FOR_TO
46911: IFFALSE 46999
// begin k := j + d ;
46913: LD_ADDR_VAR 0 8
46917: PUSH
46918: LD_VAR 0 7
46922: PUSH
46923: LD_VAR 0 9
46927: PLUS
46928: ST_TO_ADDR
// if k > array then
46929: LD_VAR 0 8
46933: PUSH
46934: LD_VAR 0 1
46938: GREATER
46939: IFFALSE 46949
// k := 1 ;
46941: LD_ADDR_VAR 0 8
46945: PUSH
46946: LD_INT 1
46948: ST_TO_ADDR
// if not k then
46949: LD_VAR 0 8
46953: NOT
46954: IFFALSE 46966
// k := array ;
46956: LD_ADDR_VAR 0 8
46960: PUSH
46961: LD_VAR 0 1
46965: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46966: LD_ADDR_VAR 0 10
46970: PUSH
46971: LD_VAR 0 10
46975: PPUSH
46976: LD_VAR 0 8
46980: PPUSH
46981: LD_VAR 0 1
46985: PUSH
46986: LD_VAR 0 7
46990: ARRAY
46991: PPUSH
46992: CALL_OW 1
46996: ST_TO_ADDR
// end ;
46997: GO 46910
46999: POP
47000: POP
// array := tmp ;
47001: LD_ADDR_VAR 0 1
47005: PUSH
47006: LD_VAR 0 10
47010: ST_TO_ADDR
// end ;
47011: GO 46892
47013: POP
47014: POP
// result := array ;
47015: LD_ADDR_VAR 0 5
47019: PUSH
47020: LD_VAR 0 1
47024: ST_TO_ADDR
// end ;
47025: LD_VAR 0 5
47029: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47030: LD_INT 0
47032: PPUSH
47033: PPUSH
// result := 0 ;
47034: LD_ADDR_VAR 0 3
47038: PUSH
47039: LD_INT 0
47041: ST_TO_ADDR
// if not array or not value in array then
47042: LD_VAR 0 1
47046: NOT
47047: IFTRUE 47062
47049: PUSH
47050: LD_VAR 0 2
47054: PUSH
47055: LD_VAR 0 1
47059: IN
47060: NOT
47061: OR
47062: IFFALSE 47066
// exit ;
47064: GO 47120
// for i = 1 to array do
47066: LD_ADDR_VAR 0 4
47070: PUSH
47071: DOUBLE
47072: LD_INT 1
47074: DEC
47075: ST_TO_ADDR
47076: LD_VAR 0 1
47080: PUSH
47081: FOR_TO
47082: IFFALSE 47118
// if value = array [ i ] then
47084: LD_VAR 0 2
47088: PUSH
47089: LD_VAR 0 1
47093: PUSH
47094: LD_VAR 0 4
47098: ARRAY
47099: EQUAL
47100: IFFALSE 47116
// begin result := i ;
47102: LD_ADDR_VAR 0 3
47106: PUSH
47107: LD_VAR 0 4
47111: ST_TO_ADDR
// exit ;
47112: POP
47113: POP
47114: GO 47120
// end ;
47116: GO 47081
47118: POP
47119: POP
// end ;
47120: LD_VAR 0 3
47124: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47125: LD_INT 0
47127: PPUSH
// vc_chassis := chassis ;
47128: LD_ADDR_OWVAR 37
47132: PUSH
47133: LD_VAR 0 1
47137: ST_TO_ADDR
// vc_engine := engine ;
47138: LD_ADDR_OWVAR 39
47142: PUSH
47143: LD_VAR 0 2
47147: ST_TO_ADDR
// vc_control := control ;
47148: LD_ADDR_OWVAR 38
47152: PUSH
47153: LD_VAR 0 3
47157: ST_TO_ADDR
// vc_weapon := weapon ;
47158: LD_ADDR_OWVAR 40
47162: PUSH
47163: LD_VAR 0 4
47167: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47168: LD_ADDR_OWVAR 41
47172: PUSH
47173: LD_VAR 0 5
47177: ST_TO_ADDR
// end ;
47178: LD_VAR 0 6
47182: RET
// export function WantPlant ( unit ) ; var task ; begin
47183: LD_INT 0
47185: PPUSH
47186: PPUSH
// result := false ;
47187: LD_ADDR_VAR 0 2
47191: PUSH
47192: LD_INT 0
47194: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47195: LD_ADDR_VAR 0 3
47199: PUSH
47200: LD_VAR 0 1
47204: PPUSH
47205: CALL_OW 437
47209: ST_TO_ADDR
// if task then
47210: LD_VAR 0 3
47214: IFFALSE 47242
// if task [ 1 ] [ 1 ] = p then
47216: LD_VAR 0 3
47220: PUSH
47221: LD_INT 1
47223: ARRAY
47224: PUSH
47225: LD_INT 1
47227: ARRAY
47228: PUSH
47229: LD_STRING p
47231: EQUAL
47232: IFFALSE 47242
// result := true ;
47234: LD_ADDR_VAR 0 2
47238: PUSH
47239: LD_INT 1
47241: ST_TO_ADDR
// end ;
47242: LD_VAR 0 2
47246: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47247: LD_INT 0
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
// if pos < 1 then
47253: LD_VAR 0 2
47257: PUSH
47258: LD_INT 1
47260: LESS
47261: IFFALSE 47265
// exit ;
47263: GO 47568
// if pos = 1 then
47265: LD_VAR 0 2
47269: PUSH
47270: LD_INT 1
47272: EQUAL
47273: IFFALSE 47306
// result := Replace ( arr , pos [ 1 ] , value ) else
47275: LD_ADDR_VAR 0 4
47279: PUSH
47280: LD_VAR 0 1
47284: PPUSH
47285: LD_VAR 0 2
47289: PUSH
47290: LD_INT 1
47292: ARRAY
47293: PPUSH
47294: LD_VAR 0 3
47298: PPUSH
47299: CALL_OW 1
47303: ST_TO_ADDR
47304: GO 47568
// begin tmp := arr ;
47306: LD_ADDR_VAR 0 6
47310: PUSH
47311: LD_VAR 0 1
47315: ST_TO_ADDR
// s_arr := [ tmp ] ;
47316: LD_ADDR_VAR 0 7
47320: PUSH
47321: LD_VAR 0 6
47325: PUSH
47326: EMPTY
47327: LIST
47328: ST_TO_ADDR
// for i = 1 to pos - 1 do
47329: LD_ADDR_VAR 0 5
47333: PUSH
47334: DOUBLE
47335: LD_INT 1
47337: DEC
47338: ST_TO_ADDR
47339: LD_VAR 0 2
47343: PUSH
47344: LD_INT 1
47346: MINUS
47347: PUSH
47348: FOR_TO
47349: IFFALSE 47394
// begin tmp := tmp [ pos [ i ] ] ;
47351: LD_ADDR_VAR 0 6
47355: PUSH
47356: LD_VAR 0 6
47360: PUSH
47361: LD_VAR 0 2
47365: PUSH
47366: LD_VAR 0 5
47370: ARRAY
47371: ARRAY
47372: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47373: LD_ADDR_VAR 0 7
47377: PUSH
47378: LD_VAR 0 7
47382: PUSH
47383: LD_VAR 0 6
47387: PUSH
47388: EMPTY
47389: LIST
47390: ADD
47391: ST_TO_ADDR
// end ;
47392: GO 47348
47394: POP
47395: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47396: LD_ADDR_VAR 0 6
47400: PUSH
47401: LD_VAR 0 6
47405: PPUSH
47406: LD_VAR 0 2
47410: PUSH
47411: LD_VAR 0 2
47415: ARRAY
47416: PPUSH
47417: LD_VAR 0 3
47421: PPUSH
47422: CALL_OW 1
47426: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47427: LD_ADDR_VAR 0 7
47431: PUSH
47432: LD_VAR 0 7
47436: PPUSH
47437: LD_VAR 0 7
47441: PPUSH
47442: LD_VAR 0 6
47446: PPUSH
47447: CALL_OW 1
47451: ST_TO_ADDR
// for i = s_arr downto 2 do
47452: LD_ADDR_VAR 0 5
47456: PUSH
47457: DOUBLE
47458: LD_VAR 0 7
47462: INC
47463: ST_TO_ADDR
47464: LD_INT 2
47466: PUSH
47467: FOR_DOWNTO
47468: IFFALSE 47552
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47470: LD_ADDR_VAR 0 6
47474: PUSH
47475: LD_VAR 0 7
47479: PUSH
47480: LD_VAR 0 5
47484: PUSH
47485: LD_INT 1
47487: MINUS
47488: ARRAY
47489: PPUSH
47490: LD_VAR 0 2
47494: PUSH
47495: LD_VAR 0 5
47499: PUSH
47500: LD_INT 1
47502: MINUS
47503: ARRAY
47504: PPUSH
47505: LD_VAR 0 7
47509: PUSH
47510: LD_VAR 0 5
47514: ARRAY
47515: PPUSH
47516: CALL_OW 1
47520: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47521: LD_ADDR_VAR 0 7
47525: PUSH
47526: LD_VAR 0 7
47530: PPUSH
47531: LD_VAR 0 5
47535: PUSH
47536: LD_INT 1
47538: MINUS
47539: PPUSH
47540: LD_VAR 0 6
47544: PPUSH
47545: CALL_OW 1
47549: ST_TO_ADDR
// end ;
47550: GO 47467
47552: POP
47553: POP
// result := s_arr [ 1 ] ;
47554: LD_ADDR_VAR 0 4
47558: PUSH
47559: LD_VAR 0 7
47563: PUSH
47564: LD_INT 1
47566: ARRAY
47567: ST_TO_ADDR
// end ; end ;
47568: LD_VAR 0 4
47572: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47573: LD_INT 0
47575: PPUSH
47576: PPUSH
// if not list then
47577: LD_VAR 0 1
47581: NOT
47582: IFFALSE 47586
// exit ;
47584: GO 47677
// i := list [ pos1 ] ;
47586: LD_ADDR_VAR 0 5
47590: PUSH
47591: LD_VAR 0 1
47595: PUSH
47596: LD_VAR 0 2
47600: ARRAY
47601: ST_TO_ADDR
// if not i then
47602: LD_VAR 0 5
47606: NOT
47607: IFFALSE 47611
// exit ;
47609: GO 47677
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47611: LD_ADDR_VAR 0 1
47615: PUSH
47616: LD_VAR 0 1
47620: PPUSH
47621: LD_VAR 0 2
47625: PPUSH
47626: LD_VAR 0 1
47630: PUSH
47631: LD_VAR 0 3
47635: ARRAY
47636: PPUSH
47637: CALL_OW 1
47641: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47642: LD_ADDR_VAR 0 1
47646: PUSH
47647: LD_VAR 0 1
47651: PPUSH
47652: LD_VAR 0 3
47656: PPUSH
47657: LD_VAR 0 5
47661: PPUSH
47662: CALL_OW 1
47666: ST_TO_ADDR
// result := list ;
47667: LD_ADDR_VAR 0 4
47671: PUSH
47672: LD_VAR 0 1
47676: ST_TO_ADDR
// end ;
47677: LD_VAR 0 4
47681: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47682: LD_INT 0
47684: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47685: LD_ADDR_VAR 0 5
47689: PUSH
47690: LD_VAR 0 1
47694: PPUSH
47695: CALL_OW 250
47699: PPUSH
47700: LD_VAR 0 1
47704: PPUSH
47705: CALL_OW 251
47709: PPUSH
47710: LD_VAR 0 2
47714: PPUSH
47715: LD_VAR 0 3
47719: PPUSH
47720: LD_VAR 0 4
47724: PPUSH
47725: CALL 48107 0 5
47729: ST_TO_ADDR
// end ;
47730: LD_VAR 0 5
47734: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47735: LD_INT 0
47737: PPUSH
47738: PPUSH
47739: PPUSH
47740: PPUSH
// if not list or not unit then
47741: LD_VAR 0 2
47745: NOT
47746: IFTRUE 47755
47748: PUSH
47749: LD_VAR 0 1
47753: NOT
47754: OR
47755: IFFALSE 47759
// exit ;
47757: GO 48102
// result := [ ] ;
47759: LD_ADDR_VAR 0 5
47763: PUSH
47764: EMPTY
47765: ST_TO_ADDR
// for i in list do
47766: LD_ADDR_VAR 0 6
47770: PUSH
47771: LD_VAR 0 2
47775: PUSH
47776: FOR_IN
47777: IFFALSE 47995
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47779: LD_ADDR_VAR 0 8
47783: PUSH
47784: LD_VAR 0 1
47788: PPUSH
47789: LD_VAR 0 6
47793: PUSH
47794: LD_INT 1
47796: ARRAY
47797: PPUSH
47798: LD_VAR 0 6
47802: PUSH
47803: LD_INT 2
47805: ARRAY
47806: PPUSH
47807: CALL_OW 297
47811: ST_TO_ADDR
// if not Count ( result ) then
47812: LD_VAR 0 5
47816: PPUSH
47817: CALL 44363 0 1
47821: NOT
47822: IFFALSE 47855
// begin result := Join ( result , [ i , tmp ] ) ;
47824: LD_ADDR_VAR 0 5
47828: PUSH
47829: LD_VAR 0 5
47833: PPUSH
47834: LD_VAR 0 6
47838: PUSH
47839: LD_VAR 0 8
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PPUSH
47848: CALL 80295 0 2
47852: ST_TO_ADDR
// continue ;
47853: GO 47776
// end ; if result [ result ] [ 2 ] <= tmp then
47855: LD_VAR 0 5
47859: PUSH
47860: LD_VAR 0 5
47864: ARRAY
47865: PUSH
47866: LD_INT 2
47868: ARRAY
47869: PUSH
47870: LD_VAR 0 8
47874: LESSEQUAL
47875: IFFALSE 47908
// result := Join ( result , [ i , tmp ] ) else
47877: LD_ADDR_VAR 0 5
47881: PUSH
47882: LD_VAR 0 5
47886: PPUSH
47887: LD_VAR 0 6
47891: PUSH
47892: LD_VAR 0 8
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PPUSH
47901: CALL 80295 0 2
47905: ST_TO_ADDR
47906: GO 47993
// begin for j := 1 to Count ( result ) do
47908: LD_ADDR_VAR 0 7
47912: PUSH
47913: DOUBLE
47914: LD_INT 1
47916: DEC
47917: ST_TO_ADDR
47918: LD_VAR 0 5
47922: PPUSH
47923: CALL 44363 0 1
47927: PUSH
47928: FOR_TO
47929: IFFALSE 47991
// begin if tmp < result [ j ] [ 2 ] then
47931: LD_VAR 0 8
47935: PUSH
47936: LD_VAR 0 5
47940: PUSH
47941: LD_VAR 0 7
47945: ARRAY
47946: PUSH
47947: LD_INT 2
47949: ARRAY
47950: LESS
47951: IFFALSE 47989
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47953: LD_ADDR_VAR 0 5
47957: PUSH
47958: LD_VAR 0 5
47962: PPUSH
47963: LD_VAR 0 7
47967: PPUSH
47968: LD_VAR 0 6
47972: PUSH
47973: LD_VAR 0 8
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PPUSH
47982: CALL_OW 2
47986: ST_TO_ADDR
// break ;
47987: GO 47991
// end ; end ;
47989: GO 47928
47991: POP
47992: POP
// end ; end ;
47993: GO 47776
47995: POP
47996: POP
// if result and not asc then
47997: LD_VAR 0 5
48001: IFFALSE 48010
48003: PUSH
48004: LD_VAR 0 3
48008: NOT
48009: AND
48010: IFFALSE 48027
// result := ReverseArray ( result ) ;
48012: LD_ADDR_VAR 0 5
48016: PUSH
48017: LD_VAR 0 5
48021: PPUSH
48022: CALL 75385 0 1
48026: ST_TO_ADDR
// tmp := [ ] ;
48027: LD_ADDR_VAR 0 8
48031: PUSH
48032: EMPTY
48033: ST_TO_ADDR
// if mode then
48034: LD_VAR 0 4
48038: IFFALSE 48102
// begin for i := 1 to result do
48040: LD_ADDR_VAR 0 6
48044: PUSH
48045: DOUBLE
48046: LD_INT 1
48048: DEC
48049: ST_TO_ADDR
48050: LD_VAR 0 5
48054: PUSH
48055: FOR_TO
48056: IFFALSE 48090
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48058: LD_ADDR_VAR 0 8
48062: PUSH
48063: LD_VAR 0 8
48067: PPUSH
48068: LD_VAR 0 5
48072: PUSH
48073: LD_VAR 0 6
48077: ARRAY
48078: PUSH
48079: LD_INT 1
48081: ARRAY
48082: PPUSH
48083: CALL 80295 0 2
48087: ST_TO_ADDR
48088: GO 48055
48090: POP
48091: POP
// result := tmp ;
48092: LD_ADDR_VAR 0 5
48096: PUSH
48097: LD_VAR 0 8
48101: ST_TO_ADDR
// end ; end ;
48102: LD_VAR 0 5
48106: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48107: LD_INT 0
48109: PPUSH
48110: PPUSH
48111: PPUSH
48112: PPUSH
// if not list then
48113: LD_VAR 0 3
48117: NOT
48118: IFFALSE 48122
// exit ;
48120: GO 48512
// result := [ ] ;
48122: LD_ADDR_VAR 0 6
48126: PUSH
48127: EMPTY
48128: ST_TO_ADDR
// for i in list do
48129: LD_ADDR_VAR 0 7
48133: PUSH
48134: LD_VAR 0 3
48138: PUSH
48139: FOR_IN
48140: IFFALSE 48342
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48142: LD_ADDR_VAR 0 9
48146: PUSH
48147: LD_VAR 0 7
48151: PPUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: LD_VAR 0 2
48161: PPUSH
48162: CALL_OW 297
48166: ST_TO_ADDR
// if not result then
48167: LD_VAR 0 6
48171: NOT
48172: IFFALSE 48198
// result := [ [ i , tmp ] ] else
48174: LD_ADDR_VAR 0 6
48178: PUSH
48179: LD_VAR 0 7
48183: PUSH
48184: LD_VAR 0 9
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: EMPTY
48194: LIST
48195: ST_TO_ADDR
48196: GO 48340
// begin if result [ result ] [ 2 ] <= tmp then
48198: LD_VAR 0 6
48202: PUSH
48203: LD_VAR 0 6
48207: ARRAY
48208: PUSH
48209: LD_INT 2
48211: ARRAY
48212: PUSH
48213: LD_VAR 0 9
48217: LESSEQUAL
48218: IFFALSE 48260
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48220: LD_ADDR_VAR 0 6
48224: PUSH
48225: LD_VAR 0 6
48229: PPUSH
48230: LD_VAR 0 6
48234: PUSH
48235: LD_INT 1
48237: PLUS
48238: PPUSH
48239: LD_VAR 0 7
48243: PUSH
48244: LD_VAR 0 9
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PPUSH
48253: CALL_OW 2
48257: ST_TO_ADDR
48258: GO 48340
// for j := 1 to result do
48260: LD_ADDR_VAR 0 8
48264: PUSH
48265: DOUBLE
48266: LD_INT 1
48268: DEC
48269: ST_TO_ADDR
48270: LD_VAR 0 6
48274: PUSH
48275: FOR_TO
48276: IFFALSE 48338
// begin if tmp < result [ j ] [ 2 ] then
48278: LD_VAR 0 9
48282: PUSH
48283: LD_VAR 0 6
48287: PUSH
48288: LD_VAR 0 8
48292: ARRAY
48293: PUSH
48294: LD_INT 2
48296: ARRAY
48297: LESS
48298: IFFALSE 48336
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48300: LD_ADDR_VAR 0 6
48304: PUSH
48305: LD_VAR 0 6
48309: PPUSH
48310: LD_VAR 0 8
48314: PPUSH
48315: LD_VAR 0 7
48319: PUSH
48320: LD_VAR 0 9
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PPUSH
48329: CALL_OW 2
48333: ST_TO_ADDR
// break ;
48334: GO 48338
// end ; end ;
48336: GO 48275
48338: POP
48339: POP
// end ; end ;
48340: GO 48139
48342: POP
48343: POP
// if result and not asc then
48344: LD_VAR 0 6
48348: IFFALSE 48357
48350: PUSH
48351: LD_VAR 0 4
48355: NOT
48356: AND
48357: IFFALSE 48432
// begin tmp := result ;
48359: LD_ADDR_VAR 0 9
48363: PUSH
48364: LD_VAR 0 6
48368: ST_TO_ADDR
// for i = tmp downto 1 do
48369: LD_ADDR_VAR 0 7
48373: PUSH
48374: DOUBLE
48375: LD_VAR 0 9
48379: INC
48380: ST_TO_ADDR
48381: LD_INT 1
48383: PUSH
48384: FOR_DOWNTO
48385: IFFALSE 48430
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48387: LD_ADDR_VAR 0 6
48391: PUSH
48392: LD_VAR 0 6
48396: PPUSH
48397: LD_VAR 0 9
48401: PUSH
48402: LD_VAR 0 7
48406: MINUS
48407: PUSH
48408: LD_INT 1
48410: PLUS
48411: PPUSH
48412: LD_VAR 0 9
48416: PUSH
48417: LD_VAR 0 7
48421: ARRAY
48422: PPUSH
48423: CALL_OW 1
48427: ST_TO_ADDR
48428: GO 48384
48430: POP
48431: POP
// end ; tmp := [ ] ;
48432: LD_ADDR_VAR 0 9
48436: PUSH
48437: EMPTY
48438: ST_TO_ADDR
// if mode then
48439: LD_VAR 0 5
48443: IFFALSE 48512
// begin for i = 1 to result do
48445: LD_ADDR_VAR 0 7
48449: PUSH
48450: DOUBLE
48451: LD_INT 1
48453: DEC
48454: ST_TO_ADDR
48455: LD_VAR 0 6
48459: PUSH
48460: FOR_TO
48461: IFFALSE 48500
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48463: LD_ADDR_VAR 0 9
48467: PUSH
48468: LD_VAR 0 9
48472: PPUSH
48473: LD_VAR 0 7
48477: PPUSH
48478: LD_VAR 0 6
48482: PUSH
48483: LD_VAR 0 7
48487: ARRAY
48488: PUSH
48489: LD_INT 1
48491: ARRAY
48492: PPUSH
48493: CALL_OW 1
48497: ST_TO_ADDR
48498: GO 48460
48500: POP
48501: POP
// result := tmp ;
48502: LD_ADDR_VAR 0 6
48506: PUSH
48507: LD_VAR 0 9
48511: ST_TO_ADDR
// end ; end ;
48512: LD_VAR 0 6
48516: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48517: LD_INT 0
48519: PPUSH
48520: PPUSH
48521: PPUSH
48522: PPUSH
48523: PPUSH
48524: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48525: LD_ADDR_VAR 0 5
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// if not x or not y then
48547: LD_VAR 0 2
48551: NOT
48552: IFTRUE 48561
48554: PUSH
48555: LD_VAR 0 3
48559: NOT
48560: OR
48561: IFFALSE 48565
// exit ;
48563: GO 50221
// if not range then
48565: LD_VAR 0 4
48569: NOT
48570: IFFALSE 48580
// range := 10 ;
48572: LD_ADDR_VAR 0 4
48576: PUSH
48577: LD_INT 10
48579: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48580: LD_ADDR_VAR 0 8
48584: PUSH
48585: LD_INT 81
48587: PUSH
48588: LD_VAR 0 1
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 92
48599: PUSH
48600: LD_VAR 0 2
48604: PUSH
48605: LD_VAR 0 3
48609: PUSH
48610: LD_VAR 0 4
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 3
48623: PUSH
48624: LD_INT 21
48626: PUSH
48627: LD_INT 3
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: LIST
48642: PPUSH
48643: CALL_OW 69
48647: ST_TO_ADDR
// if not tmp then
48648: LD_VAR 0 8
48652: NOT
48653: IFFALSE 48657
// exit ;
48655: GO 50221
// for i in tmp do
48657: LD_ADDR_VAR 0 6
48661: PUSH
48662: LD_VAR 0 8
48666: PUSH
48667: FOR_IN
48668: IFFALSE 50196
// begin points := [ 0 , 0 , 0 ] ;
48670: LD_ADDR_VAR 0 9
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: ST_TO_ADDR
// bpoints := 1 ;
48689: LD_ADDR_VAR 0 10
48693: PUSH
48694: LD_INT 1
48696: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48697: LD_VAR 0 6
48701: PPUSH
48702: CALL_OW 247
48706: PUSH
48707: LD_INT 1
48709: DOUBLE
48710: EQUAL
48711: IFTRUE 48715
48713: GO 49297
48715: POP
// begin if GetClass ( i ) = 1 then
48716: LD_VAR 0 6
48720: PPUSH
48721: CALL_OW 257
48725: PUSH
48726: LD_INT 1
48728: EQUAL
48729: IFFALSE 48750
// points := [ 10 , 5 , 3 ] ;
48731: LD_ADDR_VAR 0 9
48735: PUSH
48736: LD_INT 10
48738: PUSH
48739: LD_INT 5
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48750: LD_VAR 0 6
48754: PPUSH
48755: CALL_OW 257
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: LD_INT 4
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: IN
48774: IFFALSE 48795
// points := [ 3 , 2 , 1 ] ;
48776: LD_ADDR_VAR 0 9
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48795: LD_VAR 0 6
48799: PPUSH
48800: CALL_OW 257
48804: PUSH
48805: LD_INT 5
48807: EQUAL
48808: IFFALSE 48829
// points := [ 130 , 5 , 2 ] ;
48810: LD_ADDR_VAR 0 9
48814: PUSH
48815: LD_INT 130
48817: PUSH
48818: LD_INT 5
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48829: LD_VAR 0 6
48833: PPUSH
48834: CALL_OW 257
48838: PUSH
48839: LD_INT 8
48841: EQUAL
48842: IFFALSE 48863
// points := [ 35 , 35 , 30 ] ;
48844: LD_ADDR_VAR 0 9
48848: PUSH
48849: LD_INT 35
48851: PUSH
48852: LD_INT 35
48854: PUSH
48855: LD_INT 30
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48863: LD_VAR 0 6
48867: PPUSH
48868: CALL_OW 257
48872: PUSH
48873: LD_INT 9
48875: EQUAL
48876: IFFALSE 48897
// points := [ 20 , 55 , 40 ] ;
48878: LD_ADDR_VAR 0 9
48882: PUSH
48883: LD_INT 20
48885: PUSH
48886: LD_INT 55
48888: PUSH
48889: LD_INT 40
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48897: LD_VAR 0 6
48901: PPUSH
48902: CALL_OW 257
48906: PUSH
48907: LD_INT 12
48909: PUSH
48910: LD_INT 16
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: IN
48917: IFFALSE 48938
// points := [ 5 , 3 , 2 ] ;
48919: LD_ADDR_VAR 0 9
48923: PUSH
48924: LD_INT 5
48926: PUSH
48927: LD_INT 3
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48938: LD_VAR 0 6
48942: PPUSH
48943: CALL_OW 257
48947: PUSH
48948: LD_INT 17
48950: EQUAL
48951: IFFALSE 48972
// points := [ 100 , 50 , 75 ] ;
48953: LD_ADDR_VAR 0 9
48957: PUSH
48958: LD_INT 100
48960: PUSH
48961: LD_INT 50
48963: PUSH
48964: LD_INT 75
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48972: LD_VAR 0 6
48976: PPUSH
48977: CALL_OW 257
48981: PUSH
48982: LD_INT 15
48984: EQUAL
48985: IFFALSE 49006
// points := [ 10 , 5 , 3 ] ;
48987: LD_ADDR_VAR 0 9
48991: PUSH
48992: LD_INT 10
48994: PUSH
48995: LD_INT 5
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49006: LD_VAR 0 6
49010: PPUSH
49011: CALL_OW 257
49015: PUSH
49016: LD_INT 14
49018: EQUAL
49019: IFFALSE 49040
// points := [ 10 , 0 , 0 ] ;
49021: LD_ADDR_VAR 0 9
49025: PUSH
49026: LD_INT 10
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49040: LD_VAR 0 6
49044: PPUSH
49045: CALL_OW 257
49049: PUSH
49050: LD_INT 11
49052: EQUAL
49053: IFFALSE 49074
// points := [ 30 , 10 , 5 ] ;
49055: LD_ADDR_VAR 0 9
49059: PUSH
49060: LD_INT 30
49062: PUSH
49063: LD_INT 10
49065: PUSH
49066: LD_INT 5
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49074: LD_VAR 0 1
49078: PPUSH
49079: LD_INT 5
49081: PPUSH
49082: CALL_OW 321
49086: PUSH
49087: LD_INT 2
49089: EQUAL
49090: IFFALSE 49107
// bpoints := bpoints * 1.8 ;
49092: LD_ADDR_VAR 0 10
49096: PUSH
49097: LD_VAR 0 10
49101: PUSH
49102: LD_REAL  1.80000000000000E+0000
49105: MUL
49106: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49107: LD_VAR 0 6
49111: PPUSH
49112: CALL_OW 257
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 3
49125: PUSH
49126: LD_INT 4
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: IN
49135: IFFALSE 49155
49137: PUSH
49138: LD_VAR 0 1
49142: PPUSH
49143: LD_INT 51
49145: PPUSH
49146: CALL_OW 321
49150: PUSH
49151: LD_INT 2
49153: EQUAL
49154: AND
49155: IFFALSE 49172
// bpoints := bpoints * 1.2 ;
49157: LD_ADDR_VAR 0 10
49161: PUSH
49162: LD_VAR 0 10
49166: PUSH
49167: LD_REAL  1.20000000000000E+0000
49170: MUL
49171: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49172: LD_VAR 0 6
49176: PPUSH
49177: CALL_OW 257
49181: PUSH
49182: LD_INT 5
49184: PUSH
49185: LD_INT 7
49187: PUSH
49188: LD_INT 9
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: LIST
49195: IN
49196: IFFALSE 49216
49198: PUSH
49199: LD_VAR 0 1
49203: PPUSH
49204: LD_INT 52
49206: PPUSH
49207: CALL_OW 321
49211: PUSH
49212: LD_INT 2
49214: EQUAL
49215: AND
49216: IFFALSE 49233
// bpoints := bpoints * 1.5 ;
49218: LD_ADDR_VAR 0 10
49222: PUSH
49223: LD_VAR 0 10
49227: PUSH
49228: LD_REAL  1.50000000000000E+0000
49231: MUL
49232: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49233: LD_VAR 0 1
49237: PPUSH
49238: LD_INT 66
49240: PPUSH
49241: CALL_OW 321
49245: PUSH
49246: LD_INT 2
49248: EQUAL
49249: IFFALSE 49266
// bpoints := bpoints * 1.1 ;
49251: LD_ADDR_VAR 0 10
49255: PUSH
49256: LD_VAR 0 10
49260: PUSH
49261: LD_REAL  1.10000000000000E+0000
49264: MUL
49265: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49266: LD_ADDR_VAR 0 10
49270: PUSH
49271: LD_VAR 0 10
49275: PUSH
49276: LD_VAR 0 6
49280: PPUSH
49281: LD_INT 1
49283: PPUSH
49284: CALL_OW 259
49288: PUSH
49289: LD_REAL  1.15000000000000E+0000
49292: MUL
49293: MUL
49294: ST_TO_ADDR
// end ; unit_vehicle :
49295: GO 50125
49297: LD_INT 2
49299: DOUBLE
49300: EQUAL
49301: IFTRUE 49305
49303: GO 50113
49305: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49306: LD_VAR 0 6
49310: PPUSH
49311: CALL_OW 264
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: LD_INT 42
49321: PUSH
49322: LD_INT 24
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: IN
49330: IFFALSE 49351
// points := [ 25 , 5 , 3 ] ;
49332: LD_ADDR_VAR 0 9
49336: PUSH
49337: LD_INT 25
49339: PUSH
49340: LD_INT 5
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49351: LD_VAR 0 6
49355: PPUSH
49356: CALL_OW 264
49360: PUSH
49361: LD_INT 4
49363: PUSH
49364: LD_INT 43
49366: PUSH
49367: LD_INT 25
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: IN
49375: IFFALSE 49396
// points := [ 40 , 15 , 5 ] ;
49377: LD_ADDR_VAR 0 9
49381: PUSH
49382: LD_INT 40
49384: PUSH
49385: LD_INT 15
49387: PUSH
49388: LD_INT 5
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49396: LD_VAR 0 6
49400: PPUSH
49401: CALL_OW 264
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 23
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: IN
49416: IFFALSE 49437
// points := [ 7 , 25 , 8 ] ;
49418: LD_ADDR_VAR 0 9
49422: PUSH
49423: LD_INT 7
49425: PUSH
49426: LD_INT 25
49428: PUSH
49429: LD_INT 8
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49437: LD_VAR 0 6
49441: PPUSH
49442: CALL_OW 264
49446: PUSH
49447: LD_INT 5
49449: PUSH
49450: LD_INT 27
49452: PUSH
49453: LD_INT 44
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: IN
49461: IFFALSE 49482
// points := [ 14 , 50 , 16 ] ;
49463: LD_ADDR_VAR 0 9
49467: PUSH
49468: LD_INT 14
49470: PUSH
49471: LD_INT 50
49473: PUSH
49474: LD_INT 16
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49482: LD_VAR 0 6
49486: PPUSH
49487: CALL_OW 264
49491: PUSH
49492: LD_INT 6
49494: PUSH
49495: LD_INT 46
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: IN
49502: IFFALSE 49523
// points := [ 32 , 120 , 70 ] ;
49504: LD_ADDR_VAR 0 9
49508: PUSH
49509: LD_INT 32
49511: PUSH
49512: LD_INT 120
49514: PUSH
49515: LD_INT 70
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: LIST
49522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49523: LD_VAR 0 6
49527: PPUSH
49528: CALL_OW 264
49532: PUSH
49533: LD_INT 7
49535: PUSH
49536: LD_INT 28
49538: PUSH
49539: LD_INT 45
49541: PUSH
49542: LD_INT 92
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: IN
49551: IFFALSE 49572
// points := [ 35 , 20 , 45 ] ;
49553: LD_ADDR_VAR 0 9
49557: PUSH
49558: LD_INT 35
49560: PUSH
49561: LD_INT 20
49563: PUSH
49564: LD_INT 45
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49572: LD_VAR 0 6
49576: PPUSH
49577: CALL_OW 264
49581: PUSH
49582: LD_INT 47
49584: PUSH
49585: EMPTY
49586: LIST
49587: IN
49588: IFFALSE 49609
// points := [ 67 , 45 , 75 ] ;
49590: LD_ADDR_VAR 0 9
49594: PUSH
49595: LD_INT 67
49597: PUSH
49598: LD_INT 45
49600: PUSH
49601: LD_INT 75
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49609: LD_VAR 0 6
49613: PPUSH
49614: CALL_OW 264
49618: PUSH
49619: LD_INT 26
49621: PUSH
49622: EMPTY
49623: LIST
49624: IN
49625: IFFALSE 49646
// points := [ 120 , 30 , 80 ] ;
49627: LD_ADDR_VAR 0 9
49631: PUSH
49632: LD_INT 120
49634: PUSH
49635: LD_INT 30
49637: PUSH
49638: LD_INT 80
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49646: LD_VAR 0 6
49650: PPUSH
49651: CALL_OW 264
49655: PUSH
49656: LD_INT 22
49658: PUSH
49659: EMPTY
49660: LIST
49661: IN
49662: IFFALSE 49683
// points := [ 40 , 1 , 1 ] ;
49664: LD_ADDR_VAR 0 9
49668: PUSH
49669: LD_INT 40
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49683: LD_VAR 0 6
49687: PPUSH
49688: CALL_OW 264
49692: PUSH
49693: LD_INT 29
49695: PUSH
49696: EMPTY
49697: LIST
49698: IN
49699: IFFALSE 49720
// points := [ 70 , 200 , 400 ] ;
49701: LD_ADDR_VAR 0 9
49705: PUSH
49706: LD_INT 70
49708: PUSH
49709: LD_INT 200
49711: PUSH
49712: LD_INT 400
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49720: LD_VAR 0 6
49724: PPUSH
49725: CALL_OW 264
49729: PUSH
49730: LD_INT 14
49732: PUSH
49733: LD_INT 53
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: IN
49740: IFFALSE 49761
// points := [ 40 , 10 , 20 ] ;
49742: LD_ADDR_VAR 0 9
49746: PUSH
49747: LD_INT 40
49749: PUSH
49750: LD_INT 10
49752: PUSH
49753: LD_INT 20
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49761: LD_VAR 0 6
49765: PPUSH
49766: CALL_OW 264
49770: PUSH
49771: LD_INT 9
49773: PUSH
49774: EMPTY
49775: LIST
49776: IN
49777: IFFALSE 49798
// points := [ 5 , 70 , 20 ] ;
49779: LD_ADDR_VAR 0 9
49783: PUSH
49784: LD_INT 5
49786: PUSH
49787: LD_INT 70
49789: PUSH
49790: LD_INT 20
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49798: LD_VAR 0 6
49802: PPUSH
49803: CALL_OW 264
49807: PUSH
49808: LD_INT 10
49810: PUSH
49811: EMPTY
49812: LIST
49813: IN
49814: IFFALSE 49835
// points := [ 35 , 110 , 70 ] ;
49816: LD_ADDR_VAR 0 9
49820: PUSH
49821: LD_INT 35
49823: PUSH
49824: LD_INT 110
49826: PUSH
49827: LD_INT 70
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49835: LD_VAR 0 6
49839: PPUSH
49840: CALL_OW 265
49844: PUSH
49845: LD_INT 25
49847: EQUAL
49848: IFFALSE 49869
// points := [ 80 , 65 , 100 ] ;
49850: LD_ADDR_VAR 0 9
49854: PUSH
49855: LD_INT 80
49857: PUSH
49858: LD_INT 65
49860: PUSH
49861: LD_INT 100
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49869: LD_VAR 0 6
49873: PPUSH
49874: CALL_OW 263
49878: PUSH
49879: LD_INT 1
49881: EQUAL
49882: IFFALSE 49917
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49884: LD_ADDR_VAR 0 10
49888: PUSH
49889: LD_VAR 0 10
49893: PUSH
49894: LD_VAR 0 6
49898: PPUSH
49899: CALL_OW 311
49903: PPUSH
49904: LD_INT 3
49906: PPUSH
49907: CALL_OW 259
49911: PUSH
49912: LD_INT 4
49914: MUL
49915: MUL
49916: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49917: LD_VAR 0 6
49921: PPUSH
49922: CALL_OW 263
49926: PUSH
49927: LD_INT 2
49929: EQUAL
49930: IFFALSE 49981
// begin j := IsControledBy ( i ) ;
49932: LD_ADDR_VAR 0 7
49936: PUSH
49937: LD_VAR 0 6
49941: PPUSH
49942: CALL_OW 312
49946: ST_TO_ADDR
// if j then
49947: LD_VAR 0 7
49951: IFFALSE 49981
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49953: LD_ADDR_VAR 0 10
49957: PUSH
49958: LD_VAR 0 10
49962: PUSH
49963: LD_VAR 0 7
49967: PPUSH
49968: LD_INT 3
49970: PPUSH
49971: CALL_OW 259
49975: PUSH
49976: LD_INT 3
49978: MUL
49979: MUL
49980: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49981: LD_VAR 0 6
49985: PPUSH
49986: CALL_OW 264
49990: PUSH
49991: LD_INT 5
49993: PUSH
49994: LD_INT 6
49996: PUSH
49997: LD_INT 46
49999: PUSH
50000: LD_INT 44
50002: PUSH
50003: LD_INT 47
50005: PUSH
50006: LD_INT 45
50008: PUSH
50009: LD_INT 28
50011: PUSH
50012: LD_INT 7
50014: PUSH
50015: LD_INT 27
50017: PUSH
50018: LD_INT 29
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: IN
50033: IFFALSE 50053
50035: PUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: LD_INT 52
50043: PPUSH
50044: CALL_OW 321
50048: PUSH
50049: LD_INT 2
50051: EQUAL
50052: AND
50053: IFFALSE 50070
// bpoints := bpoints * 1.2 ;
50055: LD_ADDR_VAR 0 10
50059: PUSH
50060: LD_VAR 0 10
50064: PUSH
50065: LD_REAL  1.20000000000000E+0000
50068: MUL
50069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50070: LD_VAR 0 6
50074: PPUSH
50075: CALL_OW 264
50079: PUSH
50080: LD_INT 6
50082: PUSH
50083: LD_INT 46
50085: PUSH
50086: LD_INT 47
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: IN
50094: IFFALSE 50111
// bpoints := bpoints * 1.2 ;
50096: LD_ADDR_VAR 0 10
50100: PUSH
50101: LD_VAR 0 10
50105: PUSH
50106: LD_REAL  1.20000000000000E+0000
50109: MUL
50110: ST_TO_ADDR
// end ; unit_building :
50111: GO 50125
50113: LD_INT 3
50115: DOUBLE
50116: EQUAL
50117: IFTRUE 50121
50119: GO 50124
50121: POP
// ; end ;
50122: GO 50125
50124: POP
// for j = 1 to 3 do
50125: LD_ADDR_VAR 0 7
50129: PUSH
50130: DOUBLE
50131: LD_INT 1
50133: DEC
50134: ST_TO_ADDR
50135: LD_INT 3
50137: PUSH
50138: FOR_TO
50139: IFFALSE 50192
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50141: LD_ADDR_VAR 0 5
50145: PUSH
50146: LD_VAR 0 5
50150: PPUSH
50151: LD_VAR 0 7
50155: PPUSH
50156: LD_VAR 0 5
50160: PUSH
50161: LD_VAR 0 7
50165: ARRAY
50166: PUSH
50167: LD_VAR 0 9
50171: PUSH
50172: LD_VAR 0 7
50176: ARRAY
50177: PUSH
50178: LD_VAR 0 10
50182: MUL
50183: PLUS
50184: PPUSH
50185: CALL_OW 1
50189: ST_TO_ADDR
50190: GO 50138
50192: POP
50193: POP
// end ;
50194: GO 48667
50196: POP
50197: POP
// result := Replace ( result , 4 , tmp ) ;
50198: LD_ADDR_VAR 0 5
50202: PUSH
50203: LD_VAR 0 5
50207: PPUSH
50208: LD_INT 4
50210: PPUSH
50211: LD_VAR 0 8
50215: PPUSH
50216: CALL_OW 1
50220: ST_TO_ADDR
// end ;
50221: LD_VAR 0 5
50225: RET
// export function DangerAtRange ( unit , range ) ; begin
50226: LD_INT 0
50228: PPUSH
// if not unit then
50229: LD_VAR 0 1
50233: NOT
50234: IFFALSE 50238
// exit ;
50236: GO 50283
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50238: LD_ADDR_VAR 0 3
50242: PUSH
50243: LD_VAR 0 1
50247: PPUSH
50248: CALL_OW 255
50252: PPUSH
50253: LD_VAR 0 1
50257: PPUSH
50258: CALL_OW 250
50262: PPUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: CALL_OW 251
50272: PPUSH
50273: LD_VAR 0 2
50277: PPUSH
50278: CALL 48517 0 4
50282: ST_TO_ADDR
// end ;
50283: LD_VAR 0 3
50287: RET
// export function DangerInArea ( side , area ) ; begin
50288: LD_INT 0
50290: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50291: LD_ADDR_VAR 0 3
50295: PUSH
50296: LD_VAR 0 2
50300: PPUSH
50301: LD_INT 81
50303: PUSH
50304: LD_VAR 0 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PPUSH
50313: CALL_OW 70
50317: ST_TO_ADDR
// end ;
50318: LD_VAR 0 3
50322: RET
// export function IsExtension ( b ) ; begin
50323: LD_INT 0
50325: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50326: LD_ADDR_VAR 0 2
50330: PUSH
50331: LD_VAR 0 1
50335: PUSH
50336: LD_INT 23
50338: PUSH
50339: LD_INT 20
50341: PUSH
50342: LD_INT 22
50344: PUSH
50345: LD_INT 17
50347: PUSH
50348: LD_INT 24
50350: PUSH
50351: LD_INT 21
50353: PUSH
50354: LD_INT 19
50356: PUSH
50357: LD_INT 16
50359: PUSH
50360: LD_INT 25
50362: PUSH
50363: LD_INT 18
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: IN
50378: ST_TO_ADDR
// end ;
50379: LD_VAR 0 2
50383: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50384: LD_INT 0
50386: PPUSH
50387: PPUSH
50388: PPUSH
// result := [ ] ;
50389: LD_ADDR_VAR 0 4
50393: PUSH
50394: EMPTY
50395: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50396: LD_ADDR_VAR 0 5
50400: PUSH
50401: LD_VAR 0 2
50405: PPUSH
50406: LD_INT 21
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PPUSH
50416: CALL_OW 70
50420: ST_TO_ADDR
// if not tmp then
50421: LD_VAR 0 5
50425: NOT
50426: IFFALSE 50430
// exit ;
50428: GO 50494
// if checkLink then
50430: LD_VAR 0 3
50434: IFFALSE 50484
// begin for i in tmp do
50436: LD_ADDR_VAR 0 6
50440: PUSH
50441: LD_VAR 0 5
50445: PUSH
50446: FOR_IN
50447: IFFALSE 50482
// if GetBase ( i ) <> base then
50449: LD_VAR 0 6
50453: PPUSH
50454: CALL_OW 274
50458: PUSH
50459: LD_VAR 0 1
50463: NONEQUAL
50464: IFFALSE 50480
// ComLinkToBase ( base , i ) ;
50466: LD_VAR 0 1
50470: PPUSH
50471: LD_VAR 0 6
50475: PPUSH
50476: CALL_OW 169
50480: GO 50446
50482: POP
50483: POP
// end ; result := tmp ;
50484: LD_ADDR_VAR 0 4
50488: PUSH
50489: LD_VAR 0 5
50493: ST_TO_ADDR
// end ;
50494: LD_VAR 0 4
50498: RET
// export function ComComplete ( units , b ) ; var i ; begin
50499: LD_INT 0
50501: PPUSH
50502: PPUSH
// if not units then
50503: LD_VAR 0 1
50507: NOT
50508: IFFALSE 50512
// exit ;
50510: GO 50602
// for i in units do
50512: LD_ADDR_VAR 0 4
50516: PUSH
50517: LD_VAR 0 1
50521: PUSH
50522: FOR_IN
50523: IFFALSE 50600
// if BuildingStatus ( b ) = bs_build then
50525: LD_VAR 0 2
50529: PPUSH
50530: CALL_OW 461
50534: PUSH
50535: LD_INT 1
50537: EQUAL
50538: IFFALSE 50598
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50540: LD_VAR 0 4
50544: PPUSH
50545: LD_STRING h
50547: PUSH
50548: LD_VAR 0 2
50552: PPUSH
50553: CALL_OW 250
50557: PUSH
50558: LD_VAR 0 2
50562: PPUSH
50563: CALL_OW 251
50567: PUSH
50568: LD_VAR 0 2
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: PUSH
50591: EMPTY
50592: LIST
50593: PPUSH
50594: CALL_OW 446
50598: GO 50522
50600: POP
50601: POP
// end ;
50602: LD_VAR 0 3
50606: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50607: LD_INT 0
50609: PPUSH
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50615: LD_VAR 0 1
50619: NOT
50620: IFTRUE 50637
50622: PUSH
50623: LD_VAR 0 1
50627: PPUSH
50628: CALL_OW 263
50632: PUSH
50633: LD_INT 2
50635: NONEQUAL
50636: OR
50637: IFFALSE 50641
// exit ;
50639: GO 50957
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50641: LD_ADDR_VAR 0 6
50645: PUSH
50646: LD_INT 22
50648: PUSH
50649: LD_VAR 0 1
50653: PPUSH
50654: CALL_OW 255
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: LD_INT 30
50668: PUSH
50669: LD_INT 36
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 34
50678: PUSH
50679: LD_INT 31
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PPUSH
50695: CALL_OW 69
50699: ST_TO_ADDR
// if not tmp then
50700: LD_VAR 0 6
50704: NOT
50705: IFFALSE 50709
// exit ;
50707: GO 50957
// result := [ ] ;
50709: LD_ADDR_VAR 0 2
50713: PUSH
50714: EMPTY
50715: ST_TO_ADDR
// for i in tmp do
50716: LD_ADDR_VAR 0 3
50720: PUSH
50721: LD_VAR 0 6
50725: PUSH
50726: FOR_IN
50727: IFFALSE 50798
// begin t := UnitsInside ( i ) ;
50729: LD_ADDR_VAR 0 4
50733: PUSH
50734: LD_VAR 0 3
50738: PPUSH
50739: CALL_OW 313
50743: ST_TO_ADDR
// if t then
50744: LD_VAR 0 4
50748: IFFALSE 50796
// for j in t do
50750: LD_ADDR_VAR 0 7
50754: PUSH
50755: LD_VAR 0 4
50759: PUSH
50760: FOR_IN
50761: IFFALSE 50794
// result := Replace ( result , result + 1 , j ) ;
50763: LD_ADDR_VAR 0 2
50767: PUSH
50768: LD_VAR 0 2
50772: PPUSH
50773: LD_VAR 0 2
50777: PUSH
50778: LD_INT 1
50780: PLUS
50781: PPUSH
50782: LD_VAR 0 7
50786: PPUSH
50787: CALL_OW 1
50791: ST_TO_ADDR
50792: GO 50760
50794: POP
50795: POP
// end ;
50796: GO 50726
50798: POP
50799: POP
// if not result then
50800: LD_VAR 0 2
50804: NOT
50805: IFFALSE 50809
// exit ;
50807: GO 50957
// mech := result [ 1 ] ;
50809: LD_ADDR_VAR 0 5
50813: PUSH
50814: LD_VAR 0 2
50818: PUSH
50819: LD_INT 1
50821: ARRAY
50822: ST_TO_ADDR
// if result > 1 then
50823: LD_VAR 0 2
50827: PUSH
50828: LD_INT 1
50830: GREATER
50831: IFFALSE 50943
// begin for i = 2 to result do
50833: LD_ADDR_VAR 0 3
50837: PUSH
50838: DOUBLE
50839: LD_INT 2
50841: DEC
50842: ST_TO_ADDR
50843: LD_VAR 0 2
50847: PUSH
50848: FOR_TO
50849: IFFALSE 50941
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50851: LD_ADDR_VAR 0 4
50855: PUSH
50856: LD_VAR 0 2
50860: PUSH
50861: LD_VAR 0 3
50865: ARRAY
50866: PPUSH
50867: LD_INT 3
50869: PPUSH
50870: CALL_OW 259
50874: PUSH
50875: LD_VAR 0 2
50879: PUSH
50880: LD_VAR 0 3
50884: ARRAY
50885: PPUSH
50886: CALL_OW 432
50890: MINUS
50891: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50892: LD_VAR 0 4
50896: PUSH
50897: LD_VAR 0 5
50901: PPUSH
50902: LD_INT 3
50904: PPUSH
50905: CALL_OW 259
50909: PUSH
50910: LD_VAR 0 5
50914: PPUSH
50915: CALL_OW 432
50919: MINUS
50920: GREATEREQUAL
50921: IFFALSE 50939
// mech := result [ i ] ;
50923: LD_ADDR_VAR 0 5
50927: PUSH
50928: LD_VAR 0 2
50932: PUSH
50933: LD_VAR 0 3
50937: ARRAY
50938: ST_TO_ADDR
// end ;
50939: GO 50848
50941: POP
50942: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50943: LD_VAR 0 1
50947: PPUSH
50948: LD_VAR 0 5
50952: PPUSH
50953: CALL_OW 135
// end ;
50957: LD_VAR 0 2
50961: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50962: LD_INT 0
50964: PPUSH
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
50971: PPUSH
50972: PPUSH
50973: PPUSH
50974: PPUSH
50975: PPUSH
50976: PPUSH
// result := [ ] ;
50977: LD_ADDR_VAR 0 7
50981: PUSH
50982: EMPTY
50983: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50984: LD_VAR 0 1
50988: PPUSH
50989: CALL_OW 266
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: IN
51004: NOT
51005: IFFALSE 51009
// exit ;
51007: GO 52649
// if name then
51009: LD_VAR 0 3
51013: IFFALSE 51029
// SetBName ( base_dep , name ) ;
51015: LD_VAR 0 1
51019: PPUSH
51020: LD_VAR 0 3
51024: PPUSH
51025: CALL_OW 500
// base := GetBase ( base_dep ) ;
51029: LD_ADDR_VAR 0 15
51033: PUSH
51034: LD_VAR 0 1
51038: PPUSH
51039: CALL_OW 274
51043: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51044: LD_ADDR_VAR 0 16
51048: PUSH
51049: LD_VAR 0 1
51053: PPUSH
51054: CALL_OW 255
51058: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51059: LD_ADDR_VAR 0 17
51063: PUSH
51064: LD_VAR 0 1
51068: PPUSH
51069: CALL_OW 248
51073: ST_TO_ADDR
// if sources then
51074: LD_VAR 0 5
51078: IFFALSE 51125
// for i = 1 to 3 do
51080: LD_ADDR_VAR 0 8
51084: PUSH
51085: DOUBLE
51086: LD_INT 1
51088: DEC
51089: ST_TO_ADDR
51090: LD_INT 3
51092: PUSH
51093: FOR_TO
51094: IFFALSE 51123
// AddResourceType ( base , i , sources [ i ] ) ;
51096: LD_VAR 0 15
51100: PPUSH
51101: LD_VAR 0 8
51105: PPUSH
51106: LD_VAR 0 5
51110: PUSH
51111: LD_VAR 0 8
51115: ARRAY
51116: PPUSH
51117: CALL_OW 276
51121: GO 51093
51123: POP
51124: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51125: LD_ADDR_VAR 0 18
51129: PUSH
51130: LD_VAR 0 15
51134: PPUSH
51135: LD_VAR 0 2
51139: PPUSH
51140: LD_INT 1
51142: PPUSH
51143: CALL 50384 0 3
51147: ST_TO_ADDR
// InitHc ;
51148: CALL_OW 19
// InitUc ;
51152: CALL_OW 18
// uc_side := side ;
51156: LD_ADDR_OWVAR 20
51160: PUSH
51161: LD_VAR 0 16
51165: ST_TO_ADDR
// uc_nation := nation ;
51166: LD_ADDR_OWVAR 21
51170: PUSH
51171: LD_VAR 0 17
51175: ST_TO_ADDR
// if buildings then
51176: LD_VAR 0 18
51180: IFFALSE 52508
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51182: LD_ADDR_VAR 0 19
51186: PUSH
51187: LD_VAR 0 18
51191: PPUSH
51192: LD_INT 2
51194: PUSH
51195: LD_INT 30
51197: PUSH
51198: LD_INT 29
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 30
51207: PUSH
51208: LD_INT 30
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: PPUSH
51220: CALL_OW 72
51224: ST_TO_ADDR
// if tmp then
51225: LD_VAR 0 19
51229: IFFALSE 51277
// for i in tmp do
51231: LD_ADDR_VAR 0 8
51235: PUSH
51236: LD_VAR 0 19
51240: PUSH
51241: FOR_IN
51242: IFFALSE 51275
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51244: LD_VAR 0 8
51248: PPUSH
51249: CALL_OW 250
51253: PPUSH
51254: LD_VAR 0 8
51258: PPUSH
51259: CALL_OW 251
51263: PPUSH
51264: LD_VAR 0 16
51268: PPUSH
51269: CALL_OW 441
51273: GO 51241
51275: POP
51276: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51277: LD_VAR 0 18
51281: PPUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 30
51287: PUSH
51288: LD_INT 32
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 30
51297: PUSH
51298: LD_INT 33
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: PPUSH
51310: CALL_OW 72
51314: IFFALSE 51402
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51316: LD_ADDR_VAR 0 8
51320: PUSH
51321: LD_VAR 0 18
51325: PPUSH
51326: LD_INT 2
51328: PUSH
51329: LD_INT 30
51331: PUSH
51332: LD_INT 32
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 30
51341: PUSH
51342: LD_INT 33
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: PPUSH
51354: CALL_OW 72
51358: PUSH
51359: FOR_IN
51360: IFFALSE 51400
// begin if not GetBWeapon ( i ) then
51362: LD_VAR 0 8
51366: PPUSH
51367: CALL_OW 269
51371: NOT
51372: IFFALSE 51398
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51374: LD_VAR 0 8
51378: PPUSH
51379: LD_VAR 0 8
51383: PPUSH
51384: LD_VAR 0 2
51388: PPUSH
51389: CALL 52654 0 2
51393: PPUSH
51394: CALL_OW 431
// end ;
51398: GO 51359
51400: POP
51401: POP
// end ; for i = 1 to personel do
51402: LD_ADDR_VAR 0 8
51406: PUSH
51407: DOUBLE
51408: LD_INT 1
51410: DEC
51411: ST_TO_ADDR
51412: LD_VAR 0 6
51416: PUSH
51417: FOR_TO
51418: IFFALSE 52488
// begin if i > 4 then
51420: LD_VAR 0 8
51424: PUSH
51425: LD_INT 4
51427: GREATER
51428: IFFALSE 51432
// break ;
51430: GO 52488
// case i of 1 :
51432: LD_VAR 0 8
51436: PUSH
51437: LD_INT 1
51439: DOUBLE
51440: EQUAL
51441: IFTRUE 51445
51443: GO 51525
51445: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51446: LD_ADDR_VAR 0 12
51450: PUSH
51451: LD_VAR 0 18
51455: PPUSH
51456: LD_INT 22
51458: PUSH
51459: LD_VAR 0 16
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 58
51470: PUSH
51471: EMPTY
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 30
51479: PUSH
51480: LD_INT 32
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 30
51489: PUSH
51490: LD_INT 4
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 30
51499: PUSH
51500: LD_INT 5
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: PPUSH
51518: CALL_OW 72
51522: ST_TO_ADDR
51523: GO 51747
51525: LD_INT 2
51527: DOUBLE
51528: EQUAL
51529: IFTRUE 51533
51531: GO 51595
51533: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51534: LD_ADDR_VAR 0 12
51538: PUSH
51539: LD_VAR 0 18
51543: PPUSH
51544: LD_INT 22
51546: PUSH
51547: LD_VAR 0 16
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 30
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 30
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PPUSH
51588: CALL_OW 72
51592: ST_TO_ADDR
51593: GO 51747
51595: LD_INT 3
51597: DOUBLE
51598: EQUAL
51599: IFTRUE 51603
51601: GO 51665
51603: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51604: LD_ADDR_VAR 0 12
51608: PUSH
51609: LD_VAR 0 18
51613: PPUSH
51614: LD_INT 22
51616: PUSH
51617: LD_VAR 0 16
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 30
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 30
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PPUSH
51658: CALL_OW 72
51662: ST_TO_ADDR
51663: GO 51747
51665: LD_INT 4
51667: DOUBLE
51668: EQUAL
51669: IFTRUE 51673
51671: GO 51746
51673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51674: LD_ADDR_VAR 0 12
51678: PUSH
51679: LD_VAR 0 18
51683: PPUSH
51684: LD_INT 22
51686: PUSH
51687: LD_VAR 0 16
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 30
51701: PUSH
51702: LD_INT 6
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 30
51711: PUSH
51712: LD_INT 7
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 30
51721: PUSH
51722: LD_INT 8
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PPUSH
51739: CALL_OW 72
51743: ST_TO_ADDR
51744: GO 51747
51746: POP
// if i = 1 then
51747: LD_VAR 0 8
51751: PUSH
51752: LD_INT 1
51754: EQUAL
51755: IFFALSE 51866
// begin tmp := [ ] ;
51757: LD_ADDR_VAR 0 19
51761: PUSH
51762: EMPTY
51763: ST_TO_ADDR
// for j in f do
51764: LD_ADDR_VAR 0 9
51768: PUSH
51769: LD_VAR 0 12
51773: PUSH
51774: FOR_IN
51775: IFFALSE 51848
// if GetBType ( j ) = b_bunker then
51777: LD_VAR 0 9
51781: PPUSH
51782: CALL_OW 266
51786: PUSH
51787: LD_INT 32
51789: EQUAL
51790: IFFALSE 51817
// tmp := Insert ( tmp , 1 , j ) else
51792: LD_ADDR_VAR 0 19
51796: PUSH
51797: LD_VAR 0 19
51801: PPUSH
51802: LD_INT 1
51804: PPUSH
51805: LD_VAR 0 9
51809: PPUSH
51810: CALL_OW 2
51814: ST_TO_ADDR
51815: GO 51846
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51817: LD_ADDR_VAR 0 19
51821: PUSH
51822: LD_VAR 0 19
51826: PPUSH
51827: LD_VAR 0 19
51831: PUSH
51832: LD_INT 1
51834: PLUS
51835: PPUSH
51836: LD_VAR 0 9
51840: PPUSH
51841: CALL_OW 2
51845: ST_TO_ADDR
51846: GO 51774
51848: POP
51849: POP
// if tmp then
51850: LD_VAR 0 19
51854: IFFALSE 51866
// f := tmp ;
51856: LD_ADDR_VAR 0 12
51860: PUSH
51861: LD_VAR 0 19
51865: ST_TO_ADDR
// end ; x := personel [ i ] ;
51866: LD_ADDR_VAR 0 13
51870: PUSH
51871: LD_VAR 0 6
51875: PUSH
51876: LD_VAR 0 8
51880: ARRAY
51881: ST_TO_ADDR
// if x = - 1 then
51882: LD_VAR 0 13
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: EQUAL
51891: IFFALSE 52102
// begin for j in f do
51893: LD_ADDR_VAR 0 9
51897: PUSH
51898: LD_VAR 0 12
51902: PUSH
51903: FOR_IN
51904: IFFALSE 52098
// repeat InitHc ;
51906: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51910: LD_VAR 0 9
51914: PPUSH
51915: CALL_OW 266
51919: PUSH
51920: LD_INT 5
51922: EQUAL
51923: IFFALSE 51993
// begin if UnitsInside ( j ) < 3 then
51925: LD_VAR 0 9
51929: PPUSH
51930: CALL_OW 313
51934: PUSH
51935: LD_INT 3
51937: LESS
51938: IFFALSE 51974
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51940: LD_INT 0
51942: PPUSH
51943: LD_INT 5
51945: PUSH
51946: LD_INT 8
51948: PUSH
51949: LD_INT 9
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: PUSH
51957: LD_VAR 0 17
51961: ARRAY
51962: PPUSH
51963: LD_VAR 0 4
51967: PPUSH
51968: CALL_OW 380
51972: GO 51991
// PrepareHuman ( false , i , skill ) ;
51974: LD_INT 0
51976: PPUSH
51977: LD_VAR 0 8
51981: PPUSH
51982: LD_VAR 0 4
51986: PPUSH
51987: CALL_OW 380
// end else
51991: GO 52010
// PrepareHuman ( false , i , skill ) ;
51993: LD_INT 0
51995: PPUSH
51996: LD_VAR 0 8
52000: PPUSH
52001: LD_VAR 0 4
52005: PPUSH
52006: CALL_OW 380
// un := CreateHuman ;
52010: LD_ADDR_VAR 0 14
52014: PUSH
52015: CALL_OW 44
52019: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52020: LD_ADDR_VAR 0 7
52024: PUSH
52025: LD_VAR 0 7
52029: PPUSH
52030: LD_INT 1
52032: PPUSH
52033: LD_VAR 0 14
52037: PPUSH
52038: CALL_OW 2
52042: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52043: LD_VAR 0 14
52047: PPUSH
52048: LD_VAR 0 9
52052: PPUSH
52053: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52057: LD_VAR 0 9
52061: PPUSH
52062: CALL_OW 313
52066: PUSH
52067: LD_INT 6
52069: EQUAL
52070: IFTRUE 52094
52072: PUSH
52073: LD_VAR 0 9
52077: PPUSH
52078: CALL_OW 266
52082: PUSH
52083: LD_INT 32
52085: PUSH
52086: LD_INT 31
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: IN
52093: OR
52094: IFFALSE 51906
52096: GO 51903
52098: POP
52099: POP
// end else
52100: GO 52486
// for j = 1 to x do
52102: LD_ADDR_VAR 0 9
52106: PUSH
52107: DOUBLE
52108: LD_INT 1
52110: DEC
52111: ST_TO_ADDR
52112: LD_VAR 0 13
52116: PUSH
52117: FOR_TO
52118: IFFALSE 52484
// begin InitHc ;
52120: CALL_OW 19
// if not f then
52124: LD_VAR 0 12
52128: NOT
52129: IFFALSE 52218
// begin PrepareHuman ( false , i , skill ) ;
52131: LD_INT 0
52133: PPUSH
52134: LD_VAR 0 8
52138: PPUSH
52139: LD_VAR 0 4
52143: PPUSH
52144: CALL_OW 380
// un := CreateHuman ;
52148: LD_ADDR_VAR 0 14
52152: PUSH
52153: CALL_OW 44
52157: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52158: LD_ADDR_VAR 0 7
52162: PUSH
52163: LD_VAR 0 7
52167: PPUSH
52168: LD_INT 1
52170: PPUSH
52171: LD_VAR 0 14
52175: PPUSH
52176: CALL_OW 2
52180: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52181: LD_VAR 0 14
52185: PPUSH
52186: LD_VAR 0 1
52190: PPUSH
52191: CALL_OW 250
52195: PPUSH
52196: LD_VAR 0 1
52200: PPUSH
52201: CALL_OW 251
52205: PPUSH
52206: LD_INT 10
52208: PPUSH
52209: LD_INT 0
52211: PPUSH
52212: CALL_OW 50
// continue ;
52216: GO 52117
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52218: LD_VAR 0 12
52222: PUSH
52223: LD_INT 1
52225: ARRAY
52226: PPUSH
52227: CALL_OW 313
52231: IFFALSE 52259
52233: PUSH
52234: LD_VAR 0 12
52238: PUSH
52239: LD_INT 1
52241: ARRAY
52242: PPUSH
52243: CALL_OW 266
52247: PUSH
52248: LD_INT 32
52250: PUSH
52251: LD_INT 31
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: IN
52258: AND
52259: IFTRUE 52280
52261: PUSH
52262: LD_VAR 0 12
52266: PUSH
52267: LD_INT 1
52269: ARRAY
52270: PPUSH
52271: CALL_OW 313
52275: PUSH
52276: LD_INT 6
52278: EQUAL
52279: OR
52280: IFFALSE 52300
// f := Delete ( f , 1 ) ;
52282: LD_ADDR_VAR 0 12
52286: PUSH
52287: LD_VAR 0 12
52291: PPUSH
52292: LD_INT 1
52294: PPUSH
52295: CALL_OW 3
52299: ST_TO_ADDR
// if not f then
52300: LD_VAR 0 12
52304: NOT
52305: IFFALSE 52323
// begin x := x + 2 ;
52307: LD_ADDR_VAR 0 13
52311: PUSH
52312: LD_VAR 0 13
52316: PUSH
52317: LD_INT 2
52319: PLUS
52320: ST_TO_ADDR
// continue ;
52321: GO 52117
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52323: LD_VAR 0 12
52327: PUSH
52328: LD_INT 1
52330: ARRAY
52331: PPUSH
52332: CALL_OW 266
52336: PUSH
52337: LD_INT 5
52339: EQUAL
52340: IFFALSE 52414
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52342: LD_VAR 0 12
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: PPUSH
52351: CALL_OW 313
52355: PUSH
52356: LD_INT 3
52358: LESS
52359: IFFALSE 52395
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52361: LD_INT 0
52363: PPUSH
52364: LD_INT 5
52366: PUSH
52367: LD_INT 8
52369: PUSH
52370: LD_INT 9
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: PUSH
52378: LD_VAR 0 17
52382: ARRAY
52383: PPUSH
52384: LD_VAR 0 4
52388: PPUSH
52389: CALL_OW 380
52393: GO 52412
// PrepareHuman ( false , i , skill ) ;
52395: LD_INT 0
52397: PPUSH
52398: LD_VAR 0 8
52402: PPUSH
52403: LD_VAR 0 4
52407: PPUSH
52408: CALL_OW 380
// end else
52412: GO 52431
// PrepareHuman ( false , i , skill ) ;
52414: LD_INT 0
52416: PPUSH
52417: LD_VAR 0 8
52421: PPUSH
52422: LD_VAR 0 4
52426: PPUSH
52427: CALL_OW 380
// un := CreateHuman ;
52431: LD_ADDR_VAR 0 14
52435: PUSH
52436: CALL_OW 44
52440: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52441: LD_ADDR_VAR 0 7
52445: PUSH
52446: LD_VAR 0 7
52450: PPUSH
52451: LD_INT 1
52453: PPUSH
52454: LD_VAR 0 14
52458: PPUSH
52459: CALL_OW 2
52463: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52464: LD_VAR 0 14
52468: PPUSH
52469: LD_VAR 0 12
52473: PUSH
52474: LD_INT 1
52476: ARRAY
52477: PPUSH
52478: CALL_OW 52
// end ;
52482: GO 52117
52484: POP
52485: POP
// end ;
52486: GO 51417
52488: POP
52489: POP
// result := result ^ buildings ;
52490: LD_ADDR_VAR 0 7
52494: PUSH
52495: LD_VAR 0 7
52499: PUSH
52500: LD_VAR 0 18
52504: ADD
52505: ST_TO_ADDR
// end else
52506: GO 52649
// begin for i = 1 to personel do
52508: LD_ADDR_VAR 0 8
52512: PUSH
52513: DOUBLE
52514: LD_INT 1
52516: DEC
52517: ST_TO_ADDR
52518: LD_VAR 0 6
52522: PUSH
52523: FOR_TO
52524: IFFALSE 52647
// begin if i > 4 then
52526: LD_VAR 0 8
52530: PUSH
52531: LD_INT 4
52533: GREATER
52534: IFFALSE 52538
// break ;
52536: GO 52647
// x := personel [ i ] ;
52538: LD_ADDR_VAR 0 13
52542: PUSH
52543: LD_VAR 0 6
52547: PUSH
52548: LD_VAR 0 8
52552: ARRAY
52553: ST_TO_ADDR
// if x = - 1 then
52554: LD_VAR 0 13
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: EQUAL
52563: IFFALSE 52567
// continue ;
52565: GO 52523
// PrepareHuman ( false , i , skill ) ;
52567: LD_INT 0
52569: PPUSH
52570: LD_VAR 0 8
52574: PPUSH
52575: LD_VAR 0 4
52579: PPUSH
52580: CALL_OW 380
// un := CreateHuman ;
52584: LD_ADDR_VAR 0 14
52588: PUSH
52589: CALL_OW 44
52593: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52594: LD_VAR 0 14
52598: PPUSH
52599: LD_VAR 0 1
52603: PPUSH
52604: CALL_OW 250
52608: PPUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: CALL_OW 251
52618: PPUSH
52619: LD_INT 10
52621: PPUSH
52622: LD_INT 0
52624: PPUSH
52625: CALL_OW 50
// result := result ^ un ;
52629: LD_ADDR_VAR 0 7
52633: PUSH
52634: LD_VAR 0 7
52638: PUSH
52639: LD_VAR 0 14
52643: ADD
52644: ST_TO_ADDR
// end ;
52645: GO 52523
52647: POP
52648: POP
// end ; end ;
52649: LD_VAR 0 7
52653: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52654: LD_INT 0
52656: PPUSH
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
52671: PPUSH
// result := false ;
52672: LD_ADDR_VAR 0 3
52676: PUSH
52677: LD_INT 0
52679: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52680: LD_VAR 0 1
52684: NOT
52685: IFTRUE 52710
52687: PUSH
52688: LD_VAR 0 1
52692: PPUSH
52693: CALL_OW 266
52697: PUSH
52698: LD_INT 32
52700: PUSH
52701: LD_INT 33
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: IN
52708: NOT
52709: OR
52710: IFFALSE 52714
// exit ;
52712: GO 53849
// nat := GetNation ( tower ) ;
52714: LD_ADDR_VAR 0 12
52718: PUSH
52719: LD_VAR 0 1
52723: PPUSH
52724: CALL_OW 248
52728: ST_TO_ADDR
// side := GetSide ( tower ) ;
52729: LD_ADDR_VAR 0 16
52733: PUSH
52734: LD_VAR 0 1
52738: PPUSH
52739: CALL_OW 255
52743: ST_TO_ADDR
// x := GetX ( tower ) ;
52744: LD_ADDR_VAR 0 10
52748: PUSH
52749: LD_VAR 0 1
52753: PPUSH
52754: CALL_OW 250
52758: ST_TO_ADDR
// y := GetY ( tower ) ;
52759: LD_ADDR_VAR 0 11
52763: PUSH
52764: LD_VAR 0 1
52768: PPUSH
52769: CALL_OW 251
52773: ST_TO_ADDR
// if not x or not y then
52774: LD_VAR 0 10
52778: NOT
52779: IFTRUE 52788
52781: PUSH
52782: LD_VAR 0 11
52786: NOT
52787: OR
52788: IFFALSE 52792
// exit ;
52790: GO 53849
// weapon := 0 ;
52792: LD_ADDR_VAR 0 18
52796: PUSH
52797: LD_INT 0
52799: ST_TO_ADDR
// fac_list := [ ] ;
52800: LD_ADDR_VAR 0 17
52804: PUSH
52805: EMPTY
52806: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52807: LD_ADDR_VAR 0 6
52811: PUSH
52812: LD_VAR 0 1
52816: PPUSH
52817: CALL_OW 274
52821: PPUSH
52822: LD_VAR 0 2
52826: PPUSH
52827: LD_INT 0
52829: PPUSH
52830: CALL 50384 0 3
52834: PPUSH
52835: LD_INT 30
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PPUSH
52845: CALL_OW 72
52849: ST_TO_ADDR
// if not factories then
52850: LD_VAR 0 6
52854: NOT
52855: IFFALSE 52859
// exit ;
52857: GO 53849
// for i in factories do
52859: LD_ADDR_VAR 0 8
52863: PUSH
52864: LD_VAR 0 6
52868: PUSH
52869: FOR_IN
52870: IFFALSE 52895
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52872: LD_ADDR_VAR 0 17
52876: PUSH
52877: LD_VAR 0 17
52881: PUSH
52882: LD_VAR 0 8
52886: PPUSH
52887: CALL_OW 478
52891: UNION
52892: ST_TO_ADDR
52893: GO 52869
52895: POP
52896: POP
// if not fac_list then
52897: LD_VAR 0 17
52901: NOT
52902: IFFALSE 52906
// exit ;
52904: GO 53849
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52906: LD_ADDR_VAR 0 5
52910: PUSH
52911: LD_INT 4
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: LD_INT 9
52919: PUSH
52920: LD_INT 10
52922: PUSH
52923: LD_INT 6
52925: PUSH
52926: LD_INT 7
52928: PUSH
52929: LD_INT 11
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 27
52943: PUSH
52944: LD_INT 28
52946: PUSH
52947: LD_INT 26
52949: PUSH
52950: LD_INT 30
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 43
52961: PUSH
52962: LD_INT 44
52964: PUSH
52965: LD_INT 46
52967: PUSH
52968: LD_INT 45
52970: PUSH
52971: LD_INT 47
52973: PUSH
52974: LD_INT 49
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: PUSH
52990: LD_VAR 0 12
52994: ARRAY
52995: ST_TO_ADDR
// list := list isect fac_list ;
52996: LD_ADDR_VAR 0 5
53000: PUSH
53001: LD_VAR 0 5
53005: PUSH
53006: LD_VAR 0 17
53010: ISECT
53011: ST_TO_ADDR
// if not list then
53012: LD_VAR 0 5
53016: NOT
53017: IFFALSE 53021
// exit ;
53019: GO 53849
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53021: LD_VAR 0 12
53025: PUSH
53026: LD_INT 3
53028: EQUAL
53029: IFFALSE 53041
53031: PUSH
53032: LD_INT 49
53034: PUSH
53035: LD_VAR 0 5
53039: IN
53040: AND
53041: IFFALSE 53061
53043: PUSH
53044: LD_INT 31
53046: PPUSH
53047: LD_VAR 0 16
53051: PPUSH
53052: CALL_OW 321
53056: PUSH
53057: LD_INT 2
53059: EQUAL
53060: AND
53061: IFFALSE 53121
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53063: LD_INT 22
53065: PUSH
53066: LD_VAR 0 16
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 35
53077: PUSH
53078: LD_INT 49
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 91
53087: PUSH
53088: LD_VAR 0 1
53092: PUSH
53093: LD_INT 10
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: PPUSH
53106: CALL_OW 69
53110: NOT
53111: IFFALSE 53121
// weapon := ru_time_lapser ;
53113: LD_ADDR_VAR 0 18
53117: PUSH
53118: LD_INT 49
53120: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53121: LD_VAR 0 12
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: IN
53136: IFFALSE 53160
53138: PUSH
53139: LD_INT 11
53141: PUSH
53142: LD_VAR 0 5
53146: IN
53147: IFTRUE 53159
53149: PUSH
53150: LD_INT 30
53152: PUSH
53153: LD_VAR 0 5
53157: IN
53158: OR
53159: AND
53160: IFFALSE 53180
53162: PUSH
53163: LD_INT 6
53165: PPUSH
53166: LD_VAR 0 16
53170: PPUSH
53171: CALL_OW 321
53175: PUSH
53176: LD_INT 2
53178: EQUAL
53179: AND
53180: IFFALSE 53347
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53182: LD_INT 22
53184: PUSH
53185: LD_VAR 0 16
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 35
53199: PUSH
53200: LD_INT 11
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 35
53209: PUSH
53210: LD_INT 30
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 91
53224: PUSH
53225: LD_VAR 0 1
53229: PUSH
53230: LD_INT 18
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: PPUSH
53243: CALL_OW 69
53247: NOT
53248: IFFALSE 53324
53250: PUSH
53251: LD_INT 22
53253: PUSH
53254: LD_VAR 0 16
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 30
53268: PUSH
53269: LD_INT 32
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 30
53278: PUSH
53279: LD_INT 33
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 91
53293: PUSH
53294: LD_VAR 0 1
53298: PUSH
53299: LD_INT 12
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: PUSH
53312: EMPTY
53313: LIST
53314: PPUSH
53315: CALL_OW 69
53319: PUSH
53320: LD_INT 2
53322: GREATER
53323: AND
53324: IFFALSE 53347
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53326: LD_ADDR_VAR 0 18
53330: PUSH
53331: LD_INT 11
53333: PUSH
53334: LD_INT 30
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_VAR 0 12
53345: ARRAY
53346: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53347: LD_VAR 0 18
53351: NOT
53352: IFFALSE 53372
53354: PUSH
53355: LD_INT 40
53357: PPUSH
53358: LD_VAR 0 16
53362: PPUSH
53363: CALL_OW 321
53367: PUSH
53368: LD_INT 2
53370: EQUAL
53371: AND
53372: IFFALSE 53408
53374: PUSH
53375: LD_INT 7
53377: PUSH
53378: LD_VAR 0 5
53382: IN
53383: IFTRUE 53395
53385: PUSH
53386: LD_INT 28
53388: PUSH
53389: LD_VAR 0 5
53393: IN
53394: OR
53395: IFTRUE 53407
53397: PUSH
53398: LD_INT 45
53400: PUSH
53401: LD_VAR 0 5
53405: IN
53406: OR
53407: AND
53408: IFFALSE 53662
// begin hex := GetHexInfo ( x , y ) ;
53410: LD_ADDR_VAR 0 4
53414: PUSH
53415: LD_VAR 0 10
53419: PPUSH
53420: LD_VAR 0 11
53424: PPUSH
53425: CALL_OW 546
53429: ST_TO_ADDR
// if hex [ 1 ] then
53430: LD_VAR 0 4
53434: PUSH
53435: LD_INT 1
53437: ARRAY
53438: IFFALSE 53442
// exit ;
53440: GO 53849
// height := hex [ 2 ] ;
53442: LD_ADDR_VAR 0 15
53446: PUSH
53447: LD_VAR 0 4
53451: PUSH
53452: LD_INT 2
53454: ARRAY
53455: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53456: LD_ADDR_VAR 0 14
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 5
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: ST_TO_ADDR
// for i in tmp do
53479: LD_ADDR_VAR 0 8
53483: PUSH
53484: LD_VAR 0 14
53488: PUSH
53489: FOR_IN
53490: IFFALSE 53660
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53492: LD_ADDR_VAR 0 9
53496: PUSH
53497: LD_VAR 0 10
53501: PPUSH
53502: LD_VAR 0 8
53506: PPUSH
53507: LD_INT 5
53509: PPUSH
53510: CALL_OW 272
53514: PUSH
53515: LD_VAR 0 11
53519: PPUSH
53520: LD_VAR 0 8
53524: PPUSH
53525: LD_INT 5
53527: PPUSH
53528: CALL_OW 273
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53537: LD_VAR 0 9
53541: PUSH
53542: LD_INT 1
53544: ARRAY
53545: PPUSH
53546: LD_VAR 0 9
53550: PUSH
53551: LD_INT 2
53553: ARRAY
53554: PPUSH
53555: CALL_OW 488
53559: IFFALSE 53658
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53561: LD_ADDR_VAR 0 4
53565: PUSH
53566: LD_VAR 0 9
53570: PUSH
53571: LD_INT 1
53573: ARRAY
53574: PPUSH
53575: LD_VAR 0 9
53579: PUSH
53580: LD_INT 2
53582: ARRAY
53583: PPUSH
53584: CALL_OW 546
53588: ST_TO_ADDR
// if hex [ 1 ] then
53589: LD_VAR 0 4
53593: PUSH
53594: LD_INT 1
53596: ARRAY
53597: IFFALSE 53601
// continue ;
53599: GO 53489
// h := hex [ 2 ] ;
53601: LD_ADDR_VAR 0 13
53605: PUSH
53606: LD_VAR 0 4
53610: PUSH
53611: LD_INT 2
53613: ARRAY
53614: ST_TO_ADDR
// if h + 7 < height then
53615: LD_VAR 0 13
53619: PUSH
53620: LD_INT 7
53622: PLUS
53623: PUSH
53624: LD_VAR 0 15
53628: LESS
53629: IFFALSE 53658
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53631: LD_ADDR_VAR 0 18
53635: PUSH
53636: LD_INT 7
53638: PUSH
53639: LD_INT 28
53641: PUSH
53642: LD_INT 45
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: LIST
53649: PUSH
53650: LD_VAR 0 12
53654: ARRAY
53655: ST_TO_ADDR
// break ;
53656: GO 53660
// end ; end ; end ;
53658: GO 53489
53660: POP
53661: POP
// end ; if not weapon then
53662: LD_VAR 0 18
53666: NOT
53667: IFFALSE 53727
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53669: LD_ADDR_VAR 0 5
53673: PUSH
53674: LD_VAR 0 5
53678: PUSH
53679: LD_INT 11
53681: PUSH
53682: LD_INT 30
53684: PUSH
53685: LD_INT 49
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: DIFF
53693: ST_TO_ADDR
// if not list then
53694: LD_VAR 0 5
53698: NOT
53699: IFFALSE 53703
// exit ;
53701: GO 53849
// weapon := list [ rand ( 1 , list ) ] ;
53703: LD_ADDR_VAR 0 18
53707: PUSH
53708: LD_VAR 0 5
53712: PUSH
53713: LD_INT 1
53715: PPUSH
53716: LD_VAR 0 5
53720: PPUSH
53721: CALL_OW 12
53725: ARRAY
53726: ST_TO_ADDR
// end ; if weapon then
53727: LD_VAR 0 18
53731: IFFALSE 53849
// begin tmp := CostOfWeapon ( weapon ) ;
53733: LD_ADDR_VAR 0 14
53737: PUSH
53738: LD_VAR 0 18
53742: PPUSH
53743: CALL_OW 451
53747: ST_TO_ADDR
// j := GetBase ( tower ) ;
53748: LD_ADDR_VAR 0 9
53752: PUSH
53753: LD_VAR 0 1
53757: PPUSH
53758: CALL_OW 274
53762: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53763: LD_VAR 0 9
53767: PPUSH
53768: LD_INT 1
53770: PPUSH
53771: CALL_OW 275
53775: PUSH
53776: LD_VAR 0 14
53780: PUSH
53781: LD_INT 1
53783: ARRAY
53784: GREATEREQUAL
53785: IFFALSE 53811
53787: PUSH
53788: LD_VAR 0 9
53792: PPUSH
53793: LD_INT 2
53795: PPUSH
53796: CALL_OW 275
53800: PUSH
53801: LD_VAR 0 14
53805: PUSH
53806: LD_INT 2
53808: ARRAY
53809: GREATEREQUAL
53810: AND
53811: IFFALSE 53837
53813: PUSH
53814: LD_VAR 0 9
53818: PPUSH
53819: LD_INT 3
53821: PPUSH
53822: CALL_OW 275
53826: PUSH
53827: LD_VAR 0 14
53831: PUSH
53832: LD_INT 3
53834: ARRAY
53835: GREATEREQUAL
53836: AND
53837: IFFALSE 53849
// result := weapon ;
53839: LD_ADDR_VAR 0 3
53843: PUSH
53844: LD_VAR 0 18
53848: ST_TO_ADDR
// end ; end ;
53849: LD_VAR 0 3
53853: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53854: LD_INT 0
53856: PPUSH
53857: PPUSH
// result := true ;
53858: LD_ADDR_VAR 0 3
53862: PUSH
53863: LD_INT 1
53865: ST_TO_ADDR
// if array1 = array2 then
53866: LD_VAR 0 1
53870: PUSH
53871: LD_VAR 0 2
53875: EQUAL
53876: IFFALSE 53936
// begin for i = 1 to array1 do
53878: LD_ADDR_VAR 0 4
53882: PUSH
53883: DOUBLE
53884: LD_INT 1
53886: DEC
53887: ST_TO_ADDR
53888: LD_VAR 0 1
53892: PUSH
53893: FOR_TO
53894: IFFALSE 53932
// if array1 [ i ] <> array2 [ i ] then
53896: LD_VAR 0 1
53900: PUSH
53901: LD_VAR 0 4
53905: ARRAY
53906: PUSH
53907: LD_VAR 0 2
53911: PUSH
53912: LD_VAR 0 4
53916: ARRAY
53917: NONEQUAL
53918: IFFALSE 53930
// begin result := false ;
53920: LD_ADDR_VAR 0 3
53924: PUSH
53925: LD_INT 0
53927: ST_TO_ADDR
// break ;
53928: GO 53932
// end ;
53930: GO 53893
53932: POP
53933: POP
// end else
53934: GO 53944
// result := false ;
53936: LD_ADDR_VAR 0 3
53940: PUSH
53941: LD_INT 0
53943: ST_TO_ADDR
// end ;
53944: LD_VAR 0 3
53948: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53949: LD_INT 0
53951: PPUSH
53952: PPUSH
// if not array1 or not array2 then
53953: LD_VAR 0 1
53957: NOT
53958: IFTRUE 53967
53960: PUSH
53961: LD_VAR 0 2
53965: NOT
53966: OR
53967: IFFALSE 53971
// exit ;
53969: GO 54035
// result := true ;
53971: LD_ADDR_VAR 0 3
53975: PUSH
53976: LD_INT 1
53978: ST_TO_ADDR
// for i = 1 to array1 do
53979: LD_ADDR_VAR 0 4
53983: PUSH
53984: DOUBLE
53985: LD_INT 1
53987: DEC
53988: ST_TO_ADDR
53989: LD_VAR 0 1
53993: PUSH
53994: FOR_TO
53995: IFFALSE 54033
// if array1 [ i ] <> array2 [ i ] then
53997: LD_VAR 0 1
54001: PUSH
54002: LD_VAR 0 4
54006: ARRAY
54007: PUSH
54008: LD_VAR 0 2
54012: PUSH
54013: LD_VAR 0 4
54017: ARRAY
54018: NONEQUAL
54019: IFFALSE 54031
// begin result := false ;
54021: LD_ADDR_VAR 0 3
54025: PUSH
54026: LD_INT 0
54028: ST_TO_ADDR
// break ;
54029: GO 54033
// end ;
54031: GO 53994
54033: POP
54034: POP
// end ;
54035: LD_VAR 0 3
54039: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54040: LD_INT 0
54042: PPUSH
54043: PPUSH
54044: PPUSH
// pom := GetBase ( fac ) ;
54045: LD_ADDR_VAR 0 5
54049: PUSH
54050: LD_VAR 0 1
54054: PPUSH
54055: CALL_OW 274
54059: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54060: LD_ADDR_VAR 0 4
54064: PUSH
54065: LD_VAR 0 2
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: PPUSH
54074: LD_VAR 0 2
54078: PUSH
54079: LD_INT 2
54081: ARRAY
54082: PPUSH
54083: LD_VAR 0 2
54087: PUSH
54088: LD_INT 3
54090: ARRAY
54091: PPUSH
54092: LD_VAR 0 2
54096: PUSH
54097: LD_INT 4
54099: ARRAY
54100: PPUSH
54101: CALL_OW 449
54105: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54106: LD_ADDR_VAR 0 3
54110: PUSH
54111: LD_VAR 0 5
54115: PPUSH
54116: LD_INT 1
54118: PPUSH
54119: CALL_OW 275
54123: PUSH
54124: LD_VAR 0 4
54128: PUSH
54129: LD_INT 1
54131: ARRAY
54132: GREATEREQUAL
54133: IFFALSE 54159
54135: PUSH
54136: LD_VAR 0 5
54140: PPUSH
54141: LD_INT 2
54143: PPUSH
54144: CALL_OW 275
54148: PUSH
54149: LD_VAR 0 4
54153: PUSH
54154: LD_INT 2
54156: ARRAY
54157: GREATEREQUAL
54158: AND
54159: IFFALSE 54185
54161: PUSH
54162: LD_VAR 0 5
54166: PPUSH
54167: LD_INT 3
54169: PPUSH
54170: CALL_OW 275
54174: PUSH
54175: LD_VAR 0 4
54179: PUSH
54180: LD_INT 3
54182: ARRAY
54183: GREATEREQUAL
54184: AND
54185: ST_TO_ADDR
// end ;
54186: LD_VAR 0 3
54190: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54191: LD_INT 0
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
// pom := GetBase ( building ) ;
54197: LD_ADDR_VAR 0 3
54201: PUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 274
54211: ST_TO_ADDR
// if not pom then
54212: LD_VAR 0 3
54216: NOT
54217: IFFALSE 54221
// exit ;
54219: GO 54395
// btype := GetBType ( building ) ;
54221: LD_ADDR_VAR 0 5
54225: PUSH
54226: LD_VAR 0 1
54230: PPUSH
54231: CALL_OW 266
54235: ST_TO_ADDR
// if btype = b_armoury then
54236: LD_VAR 0 5
54240: PUSH
54241: LD_INT 4
54243: EQUAL
54244: IFFALSE 54254
// btype := b_barracks ;
54246: LD_ADDR_VAR 0 5
54250: PUSH
54251: LD_INT 5
54253: ST_TO_ADDR
// if btype = b_depot then
54254: LD_VAR 0 5
54258: PUSH
54259: LD_INT 0
54261: EQUAL
54262: IFFALSE 54272
// btype := b_warehouse ;
54264: LD_ADDR_VAR 0 5
54268: PUSH
54269: LD_INT 1
54271: ST_TO_ADDR
// if btype = b_workshop then
54272: LD_VAR 0 5
54276: PUSH
54277: LD_INT 2
54279: EQUAL
54280: IFFALSE 54290
// btype := b_factory ;
54282: LD_ADDR_VAR 0 5
54286: PUSH
54287: LD_INT 3
54289: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54290: LD_ADDR_VAR 0 4
54294: PUSH
54295: LD_VAR 0 5
54299: PPUSH
54300: LD_VAR 0 1
54304: PPUSH
54305: CALL_OW 248
54309: PPUSH
54310: CALL_OW 450
54314: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54315: LD_ADDR_VAR 0 2
54319: PUSH
54320: LD_VAR 0 3
54324: PPUSH
54325: LD_INT 1
54327: PPUSH
54328: CALL_OW 275
54332: PUSH
54333: LD_VAR 0 4
54337: PUSH
54338: LD_INT 1
54340: ARRAY
54341: GREATEREQUAL
54342: IFFALSE 54368
54344: PUSH
54345: LD_VAR 0 3
54349: PPUSH
54350: LD_INT 2
54352: PPUSH
54353: CALL_OW 275
54357: PUSH
54358: LD_VAR 0 4
54362: PUSH
54363: LD_INT 2
54365: ARRAY
54366: GREATEREQUAL
54367: AND
54368: IFFALSE 54394
54370: PUSH
54371: LD_VAR 0 3
54375: PPUSH
54376: LD_INT 3
54378: PPUSH
54379: CALL_OW 275
54383: PUSH
54384: LD_VAR 0 4
54388: PUSH
54389: LD_INT 3
54391: ARRAY
54392: GREATEREQUAL
54393: AND
54394: ST_TO_ADDR
// end ;
54395: LD_VAR 0 2
54399: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54400: LD_INT 0
54402: PPUSH
54403: PPUSH
54404: PPUSH
// pom := GetBase ( building ) ;
54405: LD_ADDR_VAR 0 4
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 274
54419: ST_TO_ADDR
// if not pom then
54420: LD_VAR 0 4
54424: NOT
54425: IFFALSE 54429
// exit ;
54427: GO 54534
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54429: LD_ADDR_VAR 0 5
54433: PUSH
54434: LD_VAR 0 2
54438: PPUSH
54439: LD_VAR 0 1
54443: PPUSH
54444: CALL_OW 248
54448: PPUSH
54449: CALL_OW 450
54453: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54454: LD_ADDR_VAR 0 3
54458: PUSH
54459: LD_VAR 0 4
54463: PPUSH
54464: LD_INT 1
54466: PPUSH
54467: CALL_OW 275
54471: PUSH
54472: LD_VAR 0 5
54476: PUSH
54477: LD_INT 1
54479: ARRAY
54480: GREATEREQUAL
54481: IFFALSE 54507
54483: PUSH
54484: LD_VAR 0 4
54488: PPUSH
54489: LD_INT 2
54491: PPUSH
54492: CALL_OW 275
54496: PUSH
54497: LD_VAR 0 5
54501: PUSH
54502: LD_INT 2
54504: ARRAY
54505: GREATEREQUAL
54506: AND
54507: IFFALSE 54533
54509: PUSH
54510: LD_VAR 0 4
54514: PPUSH
54515: LD_INT 3
54517: PPUSH
54518: CALL_OW 275
54522: PUSH
54523: LD_VAR 0 5
54527: PUSH
54528: LD_INT 3
54530: ARRAY
54531: GREATEREQUAL
54532: AND
54533: ST_TO_ADDR
// end ;
54534: LD_VAR 0 3
54538: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54539: LD_INT 0
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
// result := false ;
54552: LD_ADDR_VAR 0 8
54556: PUSH
54557: LD_INT 0
54559: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54560: LD_VAR 0 5
54564: NOT
54565: IFTRUE 54574
54567: PUSH
54568: LD_VAR 0 1
54572: NOT
54573: OR
54574: IFTRUE 54583
54576: PUSH
54577: LD_VAR 0 2
54581: NOT
54582: OR
54583: IFTRUE 54592
54585: PUSH
54586: LD_VAR 0 3
54590: NOT
54591: OR
54592: IFFALSE 54596
// exit ;
54594: GO 55422
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54596: LD_ADDR_VAR 0 14
54600: PUSH
54601: LD_VAR 0 1
54605: PPUSH
54606: LD_VAR 0 2
54610: PPUSH
54611: LD_VAR 0 3
54615: PPUSH
54616: LD_VAR 0 4
54620: PPUSH
54621: LD_VAR 0 5
54625: PUSH
54626: LD_INT 1
54628: ARRAY
54629: PPUSH
54630: CALL_OW 248
54634: PPUSH
54635: LD_INT 0
54637: PPUSH
54638: CALL 56703 0 6
54642: ST_TO_ADDR
// if not hexes then
54643: LD_VAR 0 14
54647: NOT
54648: IFFALSE 54652
// exit ;
54650: GO 55422
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54652: LD_ADDR_VAR 0 17
54656: PUSH
54657: LD_VAR 0 5
54661: PPUSH
54662: LD_INT 22
54664: PUSH
54665: LD_VAR 0 13
54669: PPUSH
54670: CALL_OW 255
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 30
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 30
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PPUSH
54711: CALL_OW 72
54715: ST_TO_ADDR
// for i = 1 to hexes do
54716: LD_ADDR_VAR 0 9
54720: PUSH
54721: DOUBLE
54722: LD_INT 1
54724: DEC
54725: ST_TO_ADDR
54726: LD_VAR 0 14
54730: PUSH
54731: FOR_TO
54732: IFFALSE 55420
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54734: LD_ADDR_VAR 0 13
54738: PUSH
54739: LD_VAR 0 14
54743: PUSH
54744: LD_VAR 0 9
54748: ARRAY
54749: PUSH
54750: LD_INT 1
54752: ARRAY
54753: PPUSH
54754: LD_VAR 0 14
54758: PUSH
54759: LD_VAR 0 9
54763: ARRAY
54764: PUSH
54765: LD_INT 2
54767: ARRAY
54768: PPUSH
54769: CALL_OW 428
54773: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54774: LD_VAR 0 14
54778: PUSH
54779: LD_VAR 0 9
54783: ARRAY
54784: PUSH
54785: LD_INT 1
54787: ARRAY
54788: PPUSH
54789: LD_VAR 0 14
54793: PUSH
54794: LD_VAR 0 9
54798: ARRAY
54799: PUSH
54800: LD_INT 2
54802: ARRAY
54803: PPUSH
54804: CALL_OW 351
54808: IFTRUE 54847
54810: PUSH
54811: LD_VAR 0 14
54815: PUSH
54816: LD_VAR 0 9
54820: ARRAY
54821: PUSH
54822: LD_INT 1
54824: ARRAY
54825: PPUSH
54826: LD_VAR 0 14
54830: PUSH
54831: LD_VAR 0 9
54835: ARRAY
54836: PUSH
54837: LD_INT 2
54839: ARRAY
54840: PPUSH
54841: CALL_OW 488
54845: NOT
54846: OR
54847: IFTRUE 54864
54849: PUSH
54850: LD_VAR 0 13
54854: PPUSH
54855: CALL_OW 247
54859: PUSH
54860: LD_INT 3
54862: EQUAL
54863: OR
54864: IFFALSE 54870
// exit ;
54866: POP
54867: POP
54868: GO 55422
// if not tmp then
54870: LD_VAR 0 13
54874: NOT
54875: IFFALSE 54879
// continue ;
54877: GO 54731
// result := true ;
54879: LD_ADDR_VAR 0 8
54883: PUSH
54884: LD_INT 1
54886: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54887: LD_VAR 0 6
54891: IFFALSE 54908
54893: PUSH
54894: LD_VAR 0 13
54898: PPUSH
54899: CALL_OW 247
54903: PUSH
54904: LD_INT 2
54906: EQUAL
54907: AND
54908: IFFALSE 54925
54910: PUSH
54911: LD_VAR 0 13
54915: PPUSH
54916: CALL_OW 263
54920: PUSH
54921: LD_INT 1
54923: EQUAL
54924: AND
54925: IFFALSE 55089
// begin if IsDrivenBy ( tmp ) then
54927: LD_VAR 0 13
54931: PPUSH
54932: CALL_OW 311
54936: IFFALSE 54940
// continue ;
54938: GO 54731
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54940: LD_VAR 0 6
54944: PPUSH
54945: LD_INT 3
54947: PUSH
54948: LD_INT 60
54950: PUSH
54951: EMPTY
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: LD_INT 55
54963: PUSH
54964: EMPTY
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PPUSH
54975: CALL_OW 72
54979: IFFALSE 55087
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54981: LD_ADDR_VAR 0 18
54985: PUSH
54986: LD_VAR 0 6
54990: PPUSH
54991: LD_INT 3
54993: PUSH
54994: LD_INT 60
54996: PUSH
54997: EMPTY
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: LD_INT 55
55009: PUSH
55010: EMPTY
55011: LIST
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PPUSH
55021: CALL_OW 72
55025: PUSH
55026: LD_INT 1
55028: ARRAY
55029: ST_TO_ADDR
// if IsInUnit ( driver ) then
55030: LD_VAR 0 18
55034: PPUSH
55035: CALL_OW 310
55039: IFFALSE 55050
// ComExit ( driver ) ;
55041: LD_VAR 0 18
55045: PPUSH
55046: CALL 80693 0 1
// AddComEnterUnit ( driver , tmp ) ;
55050: LD_VAR 0 18
55054: PPUSH
55055: LD_VAR 0 13
55059: PPUSH
55060: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55064: LD_VAR 0 18
55068: PPUSH
55069: LD_VAR 0 7
55073: PPUSH
55074: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55078: LD_VAR 0 18
55082: PPUSH
55083: CALL_OW 181
// end ; continue ;
55087: GO 54731
// end ; if not cleaners or not tmp in cleaners then
55089: LD_VAR 0 6
55093: NOT
55094: IFTRUE 55109
55096: PUSH
55097: LD_VAR 0 13
55101: PUSH
55102: LD_VAR 0 6
55106: IN
55107: NOT
55108: OR
55109: IFFALSE 55418
// begin if dep then
55111: LD_VAR 0 17
55115: IFFALSE 55251
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55117: LD_ADDR_VAR 0 16
55121: PUSH
55122: LD_VAR 0 17
55126: PUSH
55127: LD_INT 1
55129: ARRAY
55130: PPUSH
55131: CALL_OW 250
55135: PPUSH
55136: LD_VAR 0 17
55140: PUSH
55141: LD_INT 1
55143: ARRAY
55144: PPUSH
55145: CALL_OW 254
55149: PPUSH
55150: LD_INT 5
55152: PPUSH
55153: CALL_OW 272
55157: PUSH
55158: LD_VAR 0 17
55162: PUSH
55163: LD_INT 1
55165: ARRAY
55166: PPUSH
55167: CALL_OW 251
55171: PPUSH
55172: LD_VAR 0 17
55176: PUSH
55177: LD_INT 1
55179: ARRAY
55180: PPUSH
55181: CALL_OW 254
55185: PPUSH
55186: LD_INT 5
55188: PPUSH
55189: CALL_OW 273
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55198: LD_VAR 0 16
55202: PUSH
55203: LD_INT 1
55205: ARRAY
55206: PPUSH
55207: LD_VAR 0 16
55211: PUSH
55212: LD_INT 2
55214: ARRAY
55215: PPUSH
55216: CALL_OW 488
55220: IFFALSE 55251
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55222: LD_VAR 0 13
55226: PPUSH
55227: LD_VAR 0 16
55231: PUSH
55232: LD_INT 1
55234: ARRAY
55235: PPUSH
55236: LD_VAR 0 16
55240: PUSH
55241: LD_INT 2
55243: ARRAY
55244: PPUSH
55245: CALL_OW 111
// continue ;
55249: GO 54731
// end ; end ; r := GetDir ( tmp ) ;
55251: LD_ADDR_VAR 0 15
55255: PUSH
55256: LD_VAR 0 13
55260: PPUSH
55261: CALL_OW 254
55265: ST_TO_ADDR
// if r = 5 then
55266: LD_VAR 0 15
55270: PUSH
55271: LD_INT 5
55273: EQUAL
55274: IFFALSE 55284
// r := 0 ;
55276: LD_ADDR_VAR 0 15
55280: PUSH
55281: LD_INT 0
55283: ST_TO_ADDR
// for j = r to 5 do
55284: LD_ADDR_VAR 0 10
55288: PUSH
55289: DOUBLE
55290: LD_VAR 0 15
55294: DEC
55295: ST_TO_ADDR
55296: LD_INT 5
55298: PUSH
55299: FOR_TO
55300: IFFALSE 55416
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55302: LD_ADDR_VAR 0 11
55306: PUSH
55307: LD_VAR 0 13
55311: PPUSH
55312: CALL_OW 250
55316: PPUSH
55317: LD_VAR 0 10
55321: PPUSH
55322: LD_INT 2
55324: PPUSH
55325: CALL_OW 272
55329: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55330: LD_ADDR_VAR 0 12
55334: PUSH
55335: LD_VAR 0 13
55339: PPUSH
55340: CALL_OW 251
55344: PPUSH
55345: LD_VAR 0 10
55349: PPUSH
55350: LD_INT 2
55352: PPUSH
55353: CALL_OW 273
55357: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55358: LD_VAR 0 11
55362: PPUSH
55363: LD_VAR 0 12
55367: PPUSH
55368: CALL_OW 488
55372: IFFALSE 55391
55374: PUSH
55375: LD_VAR 0 11
55379: PPUSH
55380: LD_VAR 0 12
55384: PPUSH
55385: CALL_OW 428
55389: NOT
55390: AND
55391: IFFALSE 55414
// begin ComMoveXY ( tmp , _x , _y ) ;
55393: LD_VAR 0 13
55397: PPUSH
55398: LD_VAR 0 11
55402: PPUSH
55403: LD_VAR 0 12
55407: PPUSH
55408: CALL_OW 111
// break ;
55412: GO 55416
// end ; end ;
55414: GO 55299
55416: POP
55417: POP
// end ; end ;
55418: GO 54731
55420: POP
55421: POP
// end ;
55422: LD_VAR 0 8
55426: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55427: LD_INT 0
55429: PPUSH
// result := true ;
55430: LD_ADDR_VAR 0 3
55434: PUSH
55435: LD_INT 1
55437: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55438: LD_VAR 0 2
55442: PUSH
55443: LD_INT 24
55445: DOUBLE
55446: EQUAL
55447: IFTRUE 55457
55449: LD_INT 33
55451: DOUBLE
55452: EQUAL
55453: IFTRUE 55457
55455: GO 55482
55457: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55458: LD_ADDR_VAR 0 3
55462: PUSH
55463: LD_INT 32
55465: PPUSH
55466: LD_VAR 0 1
55470: PPUSH
55471: CALL_OW 321
55475: PUSH
55476: LD_INT 2
55478: EQUAL
55479: ST_TO_ADDR
55480: GO 55798
55482: LD_INT 20
55484: DOUBLE
55485: EQUAL
55486: IFTRUE 55490
55488: GO 55515
55490: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55491: LD_ADDR_VAR 0 3
55495: PUSH
55496: LD_INT 6
55498: PPUSH
55499: LD_VAR 0 1
55503: PPUSH
55504: CALL_OW 321
55508: PUSH
55509: LD_INT 2
55511: EQUAL
55512: ST_TO_ADDR
55513: GO 55798
55515: LD_INT 22
55517: DOUBLE
55518: EQUAL
55519: IFTRUE 55529
55521: LD_INT 36
55523: DOUBLE
55524: EQUAL
55525: IFTRUE 55529
55527: GO 55554
55529: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55530: LD_ADDR_VAR 0 3
55534: PUSH
55535: LD_INT 15
55537: PPUSH
55538: LD_VAR 0 1
55542: PPUSH
55543: CALL_OW 321
55547: PUSH
55548: LD_INT 2
55550: EQUAL
55551: ST_TO_ADDR
55552: GO 55798
55554: LD_INT 30
55556: DOUBLE
55557: EQUAL
55558: IFTRUE 55562
55560: GO 55587
55562: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55563: LD_ADDR_VAR 0 3
55567: PUSH
55568: LD_INT 20
55570: PPUSH
55571: LD_VAR 0 1
55575: PPUSH
55576: CALL_OW 321
55580: PUSH
55581: LD_INT 2
55583: EQUAL
55584: ST_TO_ADDR
55585: GO 55798
55587: LD_INT 28
55589: DOUBLE
55590: EQUAL
55591: IFTRUE 55601
55593: LD_INT 21
55595: DOUBLE
55596: EQUAL
55597: IFTRUE 55601
55599: GO 55626
55601: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55602: LD_ADDR_VAR 0 3
55606: PUSH
55607: LD_INT 21
55609: PPUSH
55610: LD_VAR 0 1
55614: PPUSH
55615: CALL_OW 321
55619: PUSH
55620: LD_INT 2
55622: EQUAL
55623: ST_TO_ADDR
55624: GO 55798
55626: LD_INT 16
55628: DOUBLE
55629: EQUAL
55630: IFTRUE 55634
55632: GO 55659
55634: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55635: LD_ADDR_VAR 0 3
55639: PUSH
55640: LD_INT 84
55642: PPUSH
55643: LD_VAR 0 1
55647: PPUSH
55648: CALL_OW 321
55652: PUSH
55653: LD_INT 2
55655: EQUAL
55656: ST_TO_ADDR
55657: GO 55798
55659: LD_INT 19
55661: DOUBLE
55662: EQUAL
55663: IFTRUE 55673
55665: LD_INT 23
55667: DOUBLE
55668: EQUAL
55669: IFTRUE 55673
55671: GO 55698
55673: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55674: LD_ADDR_VAR 0 3
55678: PUSH
55679: LD_INT 83
55681: PPUSH
55682: LD_VAR 0 1
55686: PPUSH
55687: CALL_OW 321
55691: PUSH
55692: LD_INT 2
55694: EQUAL
55695: ST_TO_ADDR
55696: GO 55798
55698: LD_INT 17
55700: DOUBLE
55701: EQUAL
55702: IFTRUE 55706
55704: GO 55731
55706: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55707: LD_ADDR_VAR 0 3
55711: PUSH
55712: LD_INT 39
55714: PPUSH
55715: LD_VAR 0 1
55719: PPUSH
55720: CALL_OW 321
55724: PUSH
55725: LD_INT 2
55727: EQUAL
55728: ST_TO_ADDR
55729: GO 55798
55731: LD_INT 18
55733: DOUBLE
55734: EQUAL
55735: IFTRUE 55739
55737: GO 55764
55739: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55740: LD_ADDR_VAR 0 3
55744: PUSH
55745: LD_INT 40
55747: PPUSH
55748: LD_VAR 0 1
55752: PPUSH
55753: CALL_OW 321
55757: PUSH
55758: LD_INT 2
55760: EQUAL
55761: ST_TO_ADDR
55762: GO 55798
55764: LD_INT 27
55766: DOUBLE
55767: EQUAL
55768: IFTRUE 55772
55770: GO 55797
55772: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55773: LD_ADDR_VAR 0 3
55777: PUSH
55778: LD_INT 35
55780: PPUSH
55781: LD_VAR 0 1
55785: PPUSH
55786: CALL_OW 321
55790: PUSH
55791: LD_INT 2
55793: EQUAL
55794: ST_TO_ADDR
55795: GO 55798
55797: POP
// end ;
55798: LD_VAR 0 3
55802: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55803: LD_INT 0
55805: PPUSH
55806: PPUSH
55807: PPUSH
55808: PPUSH
55809: PPUSH
55810: PPUSH
55811: PPUSH
55812: PPUSH
55813: PPUSH
55814: PPUSH
55815: PPUSH
// result := false ;
55816: LD_ADDR_VAR 0 6
55820: PUSH
55821: LD_INT 0
55823: ST_TO_ADDR
// if btype = b_depot then
55824: LD_VAR 0 2
55828: PUSH
55829: LD_INT 0
55831: EQUAL
55832: IFFALSE 55844
// begin result := true ;
55834: LD_ADDR_VAR 0 6
55838: PUSH
55839: LD_INT 1
55841: ST_TO_ADDR
// exit ;
55842: GO 56698
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55844: LD_VAR 0 1
55848: NOT
55849: IFTRUE 55874
55851: PUSH
55852: LD_VAR 0 1
55856: PPUSH
55857: CALL_OW 266
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: IN
55872: NOT
55873: OR
55874: IFTRUE 55883
55876: PUSH
55877: LD_VAR 0 2
55881: NOT
55882: OR
55883: IFTRUE 55919
55885: PUSH
55886: LD_VAR 0 5
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 4
55905: PUSH
55906: LD_INT 5
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: IN
55917: NOT
55918: OR
55919: IFTRUE 55938
55921: PUSH
55922: LD_VAR 0 3
55926: PPUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: CALL_OW 488
55936: NOT
55937: OR
55938: IFFALSE 55942
// exit ;
55940: GO 56698
// side := GetSide ( depot ) ;
55942: LD_ADDR_VAR 0 9
55946: PUSH
55947: LD_VAR 0 1
55951: PPUSH
55952: CALL_OW 255
55956: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55957: LD_VAR 0 9
55961: PPUSH
55962: LD_VAR 0 2
55966: PPUSH
55967: CALL 55427 0 2
55971: NOT
55972: IFFALSE 55976
// exit ;
55974: GO 56698
// pom := GetBase ( depot ) ;
55976: LD_ADDR_VAR 0 10
55980: PUSH
55981: LD_VAR 0 1
55985: PPUSH
55986: CALL_OW 274
55990: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55991: LD_ADDR_VAR 0 11
55995: PUSH
55996: LD_VAR 0 2
56000: PPUSH
56001: LD_VAR 0 1
56005: PPUSH
56006: CALL_OW 248
56010: PPUSH
56011: CALL_OW 450
56015: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56016: LD_VAR 0 10
56020: PPUSH
56021: LD_INT 1
56023: PPUSH
56024: CALL_OW 275
56028: PUSH
56029: LD_VAR 0 11
56033: PUSH
56034: LD_INT 1
56036: ARRAY
56037: GREATEREQUAL
56038: IFFALSE 56064
56040: PUSH
56041: LD_VAR 0 10
56045: PPUSH
56046: LD_INT 2
56048: PPUSH
56049: CALL_OW 275
56053: PUSH
56054: LD_VAR 0 11
56058: PUSH
56059: LD_INT 2
56061: ARRAY
56062: GREATEREQUAL
56063: AND
56064: IFFALSE 56090
56066: PUSH
56067: LD_VAR 0 10
56071: PPUSH
56072: LD_INT 3
56074: PPUSH
56075: CALL_OW 275
56079: PUSH
56080: LD_VAR 0 11
56084: PUSH
56085: LD_INT 3
56087: ARRAY
56088: GREATEREQUAL
56089: AND
56090: NOT
56091: IFFALSE 56095
// exit ;
56093: GO 56698
// if GetBType ( depot ) = b_depot then
56095: LD_VAR 0 1
56099: PPUSH
56100: CALL_OW 266
56104: PUSH
56105: LD_INT 0
56107: EQUAL
56108: IFFALSE 56120
// dist := 28 else
56110: LD_ADDR_VAR 0 14
56114: PUSH
56115: LD_INT 28
56117: ST_TO_ADDR
56118: GO 56128
// dist := 36 ;
56120: LD_ADDR_VAR 0 14
56124: PUSH
56125: LD_INT 36
56127: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56128: LD_VAR 0 1
56132: PPUSH
56133: LD_VAR 0 3
56137: PPUSH
56138: LD_VAR 0 4
56142: PPUSH
56143: CALL_OW 297
56147: PUSH
56148: LD_VAR 0 14
56152: GREATER
56153: IFFALSE 56157
// exit ;
56155: GO 56698
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56157: LD_ADDR_VAR 0 12
56161: PUSH
56162: LD_VAR 0 2
56166: PPUSH
56167: LD_VAR 0 3
56171: PPUSH
56172: LD_VAR 0 4
56176: PPUSH
56177: LD_VAR 0 5
56181: PPUSH
56182: LD_VAR 0 1
56186: PPUSH
56187: CALL_OW 248
56191: PPUSH
56192: LD_INT 0
56194: PPUSH
56195: CALL 56703 0 6
56199: ST_TO_ADDR
// if not hexes then
56200: LD_VAR 0 12
56204: NOT
56205: IFFALSE 56209
// exit ;
56207: GO 56698
// hex := GetHexInfo ( x , y ) ;
56209: LD_ADDR_VAR 0 15
56213: PUSH
56214: LD_VAR 0 3
56218: PPUSH
56219: LD_VAR 0 4
56223: PPUSH
56224: CALL_OW 546
56228: ST_TO_ADDR
// if hex [ 1 ] then
56229: LD_VAR 0 15
56233: PUSH
56234: LD_INT 1
56236: ARRAY
56237: IFFALSE 56241
// exit ;
56239: GO 56698
// height := hex [ 2 ] ;
56241: LD_ADDR_VAR 0 13
56245: PUSH
56246: LD_VAR 0 15
56250: PUSH
56251: LD_INT 2
56253: ARRAY
56254: ST_TO_ADDR
// for i = 1 to hexes do
56255: LD_ADDR_VAR 0 7
56259: PUSH
56260: DOUBLE
56261: LD_INT 1
56263: DEC
56264: ST_TO_ADDR
56265: LD_VAR 0 12
56269: PUSH
56270: FOR_TO
56271: IFFALSE 56615
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56273: LD_VAR 0 12
56277: PUSH
56278: LD_VAR 0 7
56282: ARRAY
56283: PUSH
56284: LD_INT 1
56286: ARRAY
56287: PPUSH
56288: LD_VAR 0 12
56292: PUSH
56293: LD_VAR 0 7
56297: ARRAY
56298: PUSH
56299: LD_INT 2
56301: ARRAY
56302: PPUSH
56303: CALL_OW 488
56307: NOT
56308: IFTRUE 56350
56310: PUSH
56311: LD_VAR 0 12
56315: PUSH
56316: LD_VAR 0 7
56320: ARRAY
56321: PUSH
56322: LD_INT 1
56324: ARRAY
56325: PPUSH
56326: LD_VAR 0 12
56330: PUSH
56331: LD_VAR 0 7
56335: ARRAY
56336: PUSH
56337: LD_INT 2
56339: ARRAY
56340: PPUSH
56341: CALL_OW 428
56345: PUSH
56346: LD_INT 0
56348: GREATER
56349: OR
56350: IFTRUE 56388
56352: PUSH
56353: LD_VAR 0 12
56357: PUSH
56358: LD_VAR 0 7
56362: ARRAY
56363: PUSH
56364: LD_INT 1
56366: ARRAY
56367: PPUSH
56368: LD_VAR 0 12
56372: PUSH
56373: LD_VAR 0 7
56377: ARRAY
56378: PUSH
56379: LD_INT 2
56381: ARRAY
56382: PPUSH
56383: CALL_OW 351
56387: OR
56388: IFFALSE 56394
// exit ;
56390: POP
56391: POP
56392: GO 56698
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56394: LD_ADDR_VAR 0 8
56398: PUSH
56399: LD_VAR 0 12
56403: PUSH
56404: LD_VAR 0 7
56408: ARRAY
56409: PUSH
56410: LD_INT 1
56412: ARRAY
56413: PPUSH
56414: LD_VAR 0 12
56418: PUSH
56419: LD_VAR 0 7
56423: ARRAY
56424: PUSH
56425: LD_INT 2
56427: ARRAY
56428: PPUSH
56429: CALL_OW 546
56433: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56434: LD_VAR 0 8
56438: PUSH
56439: LD_INT 1
56441: ARRAY
56442: IFTRUE 56464
56444: PUSH
56445: LD_VAR 0 8
56449: PUSH
56450: LD_INT 2
56452: ARRAY
56453: PUSH
56454: LD_VAR 0 13
56458: PUSH
56459: LD_INT 2
56461: PLUS
56462: GREATER
56463: OR
56464: IFTRUE 56486
56466: PUSH
56467: LD_VAR 0 8
56471: PUSH
56472: LD_INT 2
56474: ARRAY
56475: PUSH
56476: LD_VAR 0 13
56480: PUSH
56481: LD_INT 2
56483: MINUS
56484: LESS
56485: OR
56486: IFTRUE 56554
56488: PUSH
56489: LD_VAR 0 8
56493: PUSH
56494: LD_INT 3
56496: ARRAY
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 8
56503: PUSH
56504: LD_INT 9
56506: PUSH
56507: LD_INT 10
56509: PUSH
56510: LD_INT 11
56512: PUSH
56513: LD_INT 12
56515: PUSH
56516: LD_INT 13
56518: PUSH
56519: LD_INT 16
56521: PUSH
56522: LD_INT 17
56524: PUSH
56525: LD_INT 18
56527: PUSH
56528: LD_INT 19
56530: PUSH
56531: LD_INT 20
56533: PUSH
56534: LD_INT 21
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: IN
56552: NOT
56553: OR
56554: IFTRUE 56567
56556: PUSH
56557: LD_VAR 0 8
56561: PUSH
56562: LD_INT 5
56564: ARRAY
56565: NOT
56566: OR
56567: IFTRUE 56607
56569: PUSH
56570: LD_VAR 0 8
56574: PUSH
56575: LD_INT 6
56577: ARRAY
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 7
56587: PUSH
56588: LD_INT 9
56590: PUSH
56591: LD_INT 10
56593: PUSH
56594: LD_INT 11
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: IN
56605: NOT
56606: OR
56607: IFFALSE 56613
// exit ;
56609: POP
56610: POP
56611: GO 56698
// end ;
56613: GO 56270
56615: POP
56616: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56617: LD_VAR 0 9
56621: PPUSH
56622: LD_VAR 0 3
56626: PPUSH
56627: LD_VAR 0 4
56631: PPUSH
56632: LD_INT 20
56634: PPUSH
56635: CALL 48517 0 4
56639: PUSH
56640: LD_INT 4
56642: ARRAY
56643: IFFALSE 56647
// exit ;
56645: GO 56698
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56647: LD_VAR 0 2
56651: PUSH
56652: LD_INT 29
56654: PUSH
56655: LD_INT 30
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: IN
56662: IFFALSE 56686
56664: PUSH
56665: LD_VAR 0 3
56669: PPUSH
56670: LD_VAR 0 4
56674: PPUSH
56675: LD_VAR 0 9
56679: PPUSH
56680: CALL_OW 440
56684: NOT
56685: AND
56686: IFFALSE 56690
// exit ;
56688: GO 56698
// result := true ;
56690: LD_ADDR_VAR 0 6
56694: PUSH
56695: LD_INT 1
56697: ST_TO_ADDR
// end ;
56698: LD_VAR 0 6
56702: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56703: LD_INT 0
56705: PPUSH
56706: PPUSH
56707: PPUSH
56708: PPUSH
56709: PPUSH
56710: PPUSH
56711: PPUSH
56712: PPUSH
56713: PPUSH
56714: PPUSH
56715: PPUSH
56716: PPUSH
56717: PPUSH
56718: PPUSH
56719: PPUSH
56720: PPUSH
56721: PPUSH
56722: PPUSH
56723: PPUSH
56724: PPUSH
56725: PPUSH
56726: PPUSH
56727: PPUSH
56728: PPUSH
56729: PPUSH
56730: PPUSH
56731: PPUSH
56732: PPUSH
56733: PPUSH
56734: PPUSH
56735: PPUSH
56736: PPUSH
56737: PPUSH
56738: PPUSH
56739: PPUSH
56740: PPUSH
56741: PPUSH
56742: PPUSH
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
56747: PPUSH
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
56755: PPUSH
56756: PPUSH
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
// result = [ ] ;
56763: LD_ADDR_VAR 0 7
56767: PUSH
56768: EMPTY
56769: ST_TO_ADDR
// temp_list = [ ] ;
56770: LD_ADDR_VAR 0 9
56774: PUSH
56775: EMPTY
56776: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56777: LD_VAR 0 4
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: LD_INT 5
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: IN
56808: NOT
56809: IFTRUE 56852
56811: PUSH
56812: LD_VAR 0 1
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: IN
56827: IFFALSE 56851
56829: PUSH
56830: LD_VAR 0 5
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: IN
56849: NOT
56850: AND
56851: OR
56852: IFFALSE 56856
// exit ;
56854: GO 75255
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56856: LD_VAR 0 1
56860: PUSH
56861: LD_INT 6
56863: PUSH
56864: LD_INT 7
56866: PUSH
56867: LD_INT 8
56869: PUSH
56870: LD_INT 13
56872: PUSH
56873: LD_INT 12
56875: PUSH
56876: LD_INT 15
56878: PUSH
56879: LD_INT 11
56881: PUSH
56882: LD_INT 14
56884: PUSH
56885: LD_INT 10
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: IN
56899: IFFALSE 56909
// btype = b_lab ;
56901: LD_ADDR_VAR 0 1
56905: PUSH
56906: LD_INT 6
56908: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56909: LD_VAR 0 6
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: IN
56928: NOT
56929: IFTRUE 56997
56931: PUSH
56932: LD_VAR 0 1
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: LD_INT 6
56951: PUSH
56952: LD_INT 36
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: LD_INT 5
56960: PUSH
56961: LD_INT 31
56963: PUSH
56964: LD_INT 32
56966: PUSH
56967: LD_INT 33
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: IN
56983: NOT
56984: IFFALSE 56996
56986: PUSH
56987: LD_VAR 0 6
56991: PUSH
56992: LD_INT 1
56994: EQUAL
56995: AND
56996: OR
56997: IFTRUE 57029
56999: PUSH
57000: LD_VAR 0 1
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: IN
57015: NOT
57016: IFFALSE 57028
57018: PUSH
57019: LD_VAR 0 6
57023: PUSH
57024: LD_INT 2
57026: EQUAL
57027: AND
57028: OR
57029: IFFALSE 57039
// mode = 0 ;
57031: LD_ADDR_VAR 0 6
57035: PUSH
57036: LD_INT 0
57038: ST_TO_ADDR
// case mode of 0 :
57039: LD_VAR 0 6
57043: PUSH
57044: LD_INT 0
57046: DOUBLE
57047: EQUAL
57048: IFTRUE 57052
57050: GO 68505
57052: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57053: LD_ADDR_VAR 0 11
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57246: LD_ADDR_VAR 0 12
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57442: LD_ADDR_VAR 0 13
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57641: LD_ADDR_VAR 0 14
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57837: LD_ADDR_VAR 0 15
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58030: LD_ADDR_VAR 0 16
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58223: LD_ADDR_VAR 0 17
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58453: LD_ADDR_VAR 0 18
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58683: LD_ADDR_VAR 0 19
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58913: LD_ADDR_VAR 0 20
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59143: LD_ADDR_VAR 0 21
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59373: LD_ADDR_VAR 0 22
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59603: LD_ADDR_VAR 0 23
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59883: LD_ADDR_VAR 0 24
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60159: LD_ADDR_VAR 0 25
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: LD_INT 3
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60433: LD_ADDR_VAR 0 26
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60709: LD_ADDR_VAR 0 27
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60989: LD_ADDR_VAR 0 28
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61271: LD_ADDR_VAR 0 29
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 3
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 3
61515: NEG
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61550: LD_ADDR_VAR 0 30
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: LD_INT 2
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 2
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 3
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61828: LD_ADDR_VAR 0 31
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 2
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: LD_INT 3
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: NEG
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62106: LD_ADDR_VAR 0 32
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62384: LD_ADDR_VAR 0 33
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 2
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 3
62628: NEG
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62663: LD_ADDR_VAR 0 34
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: NEG
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 3
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62943: LD_ADDR_VAR 0 35
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 2
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63055: LD_ADDR_VAR 0 36
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 2
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63167: LD_ADDR_VAR 0 37
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63279: LD_ADDR_VAR 0 38
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 1
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63391: LD_ADDR_VAR 0 39
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63503: LD_ADDR_VAR 0 40
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63615: LD_ADDR_VAR 0 41
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: LD_INT 2
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: NEG
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: LD_INT 3
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 3
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 3
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 3
63889: NEG
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 3
63924: NEG
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63965: LD_ADDR_VAR 0 42
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 1
64034: NEG
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 2
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: LD_INT 3
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: LD_INT 3
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 3
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 3
64211: PUSH
64212: LD_INT 3
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 3
64274: NEG
64275: PUSH
64276: LD_INT 3
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64315: LD_ADDR_VAR 0 43
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 1
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 2
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 2
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 2
64492: NEG
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: LD_INT 3
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 3
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 2
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 3
64611: NEG
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: NEG
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64663: LD_ADDR_VAR 0 44
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: LD_INT 2
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: NEG
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: LD_INT 2
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: LD_INT 3
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 2
64926: NEG
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 3
64937: NEG
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 3
64960: NEG
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: LD_INT 3
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65013: LD_ADDR_VAR 0 45
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 2
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: LD_INT 2
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: LD_INT 2
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 3
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: LD_INT 3
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 3
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: LD_INT 2
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65363: LD_ADDR_VAR 0 46
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: NEG
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: LD_INT 2
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 2
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 2
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 2
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 2
65540: NEG
65541: PUSH
65542: LD_INT 1
65544: NEG
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: LD_INT 3
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 1
65575: PUSH
65576: LD_INT 2
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: LD_INT 1
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 3
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 3
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: LD_INT 3
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 3
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65711: LD_ADDR_VAR 0 47
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: LD_INT 1
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 2
65826: NEG
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65862: LD_ADDR_VAR 0 48
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 1
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: LD_INT 2
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 2
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66009: LD_ADDR_VAR 0 49
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: LD_INT 1
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 1
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: LD_INT 1
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: LD_INT 2
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66153: LD_ADDR_VAR 0 50
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: LD_INT 1
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 2
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 1
66254: PUSH
66255: LD_INT 2
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 1
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66297: LD_ADDR_VAR 0 51
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 1
66355: NEG
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: NEG
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: NEG
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66444: LD_ADDR_VAR 0 52
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: NEG
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: LD_INT 1
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 2
66548: NEG
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 2
66571: NEG
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66595: LD_ADDR_VAR 0 53
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 1
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 1
66664: NEG
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 0
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 2
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: LD_INT 2
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66825: LD_ADDR_VAR 0 54
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 0
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 0
66918: PUSH
66919: LD_INT 2
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 2
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: LD_INT 2
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 2
67012: NEG
67013: PUSH
67014: LD_INT 1
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: NEG
67025: PUSH
67026: LD_INT 2
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67055: LD_ADDR_VAR 0 55
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: LD_INT 2
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: LD_INT 2
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 2
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: LD_INT 1
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 1
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: LD_INT 1
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 2
67254: NEG
67255: PUSH
67256: LD_INT 2
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67285: LD_ADDR_VAR 0 56
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: NEG
67367: PUSH
67368: LD_INT 2
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 2
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 2
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 2
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 0
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 1
67450: NEG
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 2
67461: NEG
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 2
67472: NEG
67473: PUSH
67474: LD_INT 1
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 2
67484: NEG
67485: PUSH
67486: LD_INT 2
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67515: LD_ADDR_VAR 0 57
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 2
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 1
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 1
67660: PUSH
67661: LD_INT 2
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 2
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 2
67691: NEG
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 2
67702: NEG
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 2
67714: NEG
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67745: LD_ADDR_VAR 0 58
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 0
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: LD_INT 1
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: LD_INT 0
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 1
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: NEG
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: NEG
67827: PUSH
67828: LD_INT 2
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 0
67838: PUSH
67839: LD_INT 2
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 1
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 2
67870: PUSH
67871: LD_INT 1
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 2
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: LD_INT 2
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 2
67921: NEG
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: LD_INT 2
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67975: LD_ADDR_VAR 0 59
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 1
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: PUSH
68014: LD_INT 1
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68063: LD_ADDR_VAR 0 60
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 1
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 1
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 1
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 1
68121: NEG
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: NEG
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68151: LD_ADDR_VAR 0 61
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 1
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 0
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 1
68220: NEG
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68239: LD_ADDR_VAR 0 62
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 1
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: LD_INT 1
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68327: LD_ADDR_VAR 0 63
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 0
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 1
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 1
68365: PUSH
68366: LD_INT 1
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 0
68375: PUSH
68376: LD_INT 1
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: NEG
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68415: LD_ADDR_VAR 0 64
68419: PUSH
68420: LD_INT 0
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 1
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: LD_INT 1
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 1
68473: NEG
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 1
68484: NEG
68485: PUSH
68486: LD_INT 1
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: ST_TO_ADDR
// end ; 1 :
68503: GO 74400
68505: LD_INT 1
68507: DOUBLE
68508: EQUAL
68509: IFTRUE 68513
68511: GO 71136
68513: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68514: LD_ADDR_VAR 0 11
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: LD_INT 3
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: LD_INT 3
68536: NEG
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 1
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: LIST
68557: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68558: LD_ADDR_VAR 0 12
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 3
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 3
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: LIST
68598: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68599: LD_ADDR_VAR 0 13
68603: PUSH
68604: LD_INT 3
68606: PUSH
68607: LD_INT 2
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 3
68616: PUSH
68617: LD_INT 3
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 3
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: LIST
68638: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68639: LD_ADDR_VAR 0 14
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: LD_INT 3
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: NEG
68667: PUSH
68668: LD_INT 2
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: LIST
68679: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68680: LD_ADDR_VAR 0 15
68684: PUSH
68685: LD_INT 2
68687: NEG
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 3
68698: NEG
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 3
68709: NEG
68710: PUSH
68711: LD_INT 1
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: LIST
68723: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68724: LD_ADDR_VAR 0 16
68728: PUSH
68729: LD_INT 2
68731: NEG
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: NEG
68744: PUSH
68745: LD_INT 2
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: LD_INT 3
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68770: LD_ADDR_VAR 0 17
68774: PUSH
68775: LD_INT 1
68777: NEG
68778: PUSH
68779: LD_INT 3
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 1
68800: PUSH
68801: LD_INT 2
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68814: LD_ADDR_VAR 0 18
68818: PUSH
68819: LD_INT 2
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: PUSH
68833: LD_INT 0
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: LD_INT 1
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: LIST
68854: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68855: LD_ADDR_VAR 0 19
68859: PUSH
68860: LD_INT 3
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: LD_INT 3
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 2
68882: PUSH
68883: LD_INT 3
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: LIST
68894: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68895: LD_ADDR_VAR 0 20
68899: PUSH
68900: LD_INT 1
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 3
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: LD_INT 2
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: LIST
68935: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68936: LD_ADDR_VAR 0 21
68940: PUSH
68941: LD_INT 2
68943: NEG
68944: PUSH
68945: LD_INT 1
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 3
68954: NEG
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 3
68965: NEG
68966: PUSH
68967: LD_INT 1
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: LIST
68979: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68980: LD_ADDR_VAR 0 22
68984: PUSH
68985: LD_INT 2
68987: NEG
68988: PUSH
68989: LD_INT 3
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: LD_INT 2
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 3
69011: NEG
69012: PUSH
69013: LD_INT 3
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69026: LD_ADDR_VAR 0 23
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: LD_INT 3
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: LD_INT 4
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: LD_INT 3
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: LIST
69069: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69070: LD_ADDR_VAR 0 24
69074: PUSH
69075: LD_INT 3
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: PUSH
69088: LD_INT 1
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 4
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: LIST
69110: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69111: LD_ADDR_VAR 0 25
69115: PUSH
69116: LD_INT 3
69118: PUSH
69119: LD_INT 3
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: LD_INT 3
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: LIST
69150: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69151: LD_ADDR_VAR 0 26
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: LD_INT 4
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 1
69178: NEG
69179: PUSH
69180: LD_INT 3
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: LIST
69191: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69192: LD_ADDR_VAR 0 27
69196: PUSH
69197: LD_INT 3
69199: NEG
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 3
69210: NEG
69211: PUSH
69212: LD_INT 1
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 4
69221: NEG
69222: PUSH
69223: LD_INT 1
69225: NEG
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: LIST
69235: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69236: LD_ADDR_VAR 0 28
69240: PUSH
69241: LD_INT 3
69243: NEG
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: LD_INT 4
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 4
69267: NEG
69268: PUSH
69269: LD_INT 3
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69282: LD_ADDR_VAR 0 29
69286: PUSH
69287: LD_INT 1
69289: NEG
69290: PUSH
69291: LD_INT 3
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: LD_INT 3
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 1
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: LD_INT 4
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: LD_INT 4
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 1
69357: NEG
69358: PUSH
69359: LD_INT 5
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: LD_INT 5
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: LD_INT 4
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 1
69391: NEG
69392: PUSH
69393: LD_INT 6
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: LD_INT 6
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: LD_INT 5
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69437: LD_ADDR_VAR 0 30
69441: PUSH
69442: LD_INT 2
69444: PUSH
69445: LD_INT 1
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 3
69455: PUSH
69456: LD_INT 0
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 3
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: LD_INT 1
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 4
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 4
69496: PUSH
69497: LD_INT 1
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 4
69506: PUSH
69507: LD_INT 1
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 5
69517: PUSH
69518: LD_INT 0
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 5
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 5
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 6
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 6
69558: PUSH
69559: LD_INT 1
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69580: LD_ADDR_VAR 0 31
69584: PUSH
69585: LD_INT 3
69587: PUSH
69588: LD_INT 2
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 3
69597: PUSH
69598: LD_INT 3
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: LD_INT 3
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 4
69627: PUSH
69628: LD_INT 4
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 3
69637: PUSH
69638: LD_INT 4
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 5
69647: PUSH
69648: LD_INT 4
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 5
69657: PUSH
69658: LD_INT 5
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 4
69667: PUSH
69668: LD_INT 5
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 6
69677: PUSH
69678: LD_INT 5
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 6
69687: PUSH
69688: LD_INT 6
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 5
69697: PUSH
69698: LD_INT 6
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69719: LD_ADDR_VAR 0 32
69723: PUSH
69724: LD_INT 1
69726: PUSH
69727: LD_INT 3
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_INT 3
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 1
69746: NEG
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 1
69757: PUSH
69758: LD_INT 4
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: LD_INT 4
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: PUSH
69779: LD_INT 3
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 1
69788: PUSH
69789: LD_INT 5
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: LD_INT 5
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 1
69808: NEG
69809: PUSH
69810: LD_INT 4
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 1
69819: PUSH
69820: LD_INT 6
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 0
69829: PUSH
69830: LD_INT 6
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 1
69839: NEG
69840: PUSH
69841: LD_INT 5
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69862: LD_ADDR_VAR 0 33
69866: PUSH
69867: LD_INT 2
69869: NEG
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 3
69903: NEG
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 4
69914: NEG
69915: PUSH
69916: LD_INT 0
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 4
69925: NEG
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: NEG
69938: PUSH
69939: LD_INT 1
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 5
69948: NEG
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 5
69959: NEG
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 5
69971: NEG
69972: PUSH
69973: LD_INT 1
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 6
69982: NEG
69983: PUSH
69984: LD_INT 0
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 6
69993: NEG
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70017: LD_ADDR_VAR 0 34
70021: PUSH
70022: LD_INT 2
70024: NEG
70025: PUSH
70026: LD_INT 3
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 3
70036: NEG
70037: PUSH
70038: LD_INT 2
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 3
70048: NEG
70049: PUSH
70050: LD_INT 3
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 3
70060: NEG
70061: PUSH
70062: LD_INT 4
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 4
70072: NEG
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 4
70084: NEG
70085: PUSH
70086: LD_INT 4
70088: NEG
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 4
70096: NEG
70097: PUSH
70098: LD_INT 5
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 5
70108: NEG
70109: PUSH
70110: LD_INT 4
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 5
70120: NEG
70121: PUSH
70122: LD_INT 5
70124: NEG
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 5
70132: NEG
70133: PUSH
70134: LD_INT 6
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 6
70144: NEG
70145: PUSH
70146: LD_INT 5
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 6
70156: NEG
70157: PUSH
70158: LD_INT 6
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70180: LD_ADDR_VAR 0 41
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: LD_INT 3
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: LD_INT 2
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: LIST
70223: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70224: LD_ADDR_VAR 0 42
70228: PUSH
70229: LD_INT 2
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 2
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 3
70252: PUSH
70253: LD_INT 1
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: LIST
70264: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70265: LD_ADDR_VAR 0 43
70269: PUSH
70270: LD_INT 2
70272: PUSH
70273: LD_INT 2
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 3
70282: PUSH
70283: LD_INT 2
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: LD_INT 3
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70305: LD_ADDR_VAR 0 44
70309: PUSH
70310: LD_INT 0
70312: PUSH
70313: LD_INT 2
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 1
70322: PUSH
70323: LD_INT 3
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 1
70332: NEG
70333: PUSH
70334: LD_INT 2
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: LIST
70345: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70346: LD_ADDR_VAR 0 45
70350: PUSH
70351: LD_INT 2
70353: NEG
70354: PUSH
70355: LD_INT 0
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 2
70364: NEG
70365: PUSH
70366: LD_INT 1
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 3
70375: NEG
70376: PUSH
70377: LD_INT 1
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70390: LD_ADDR_VAR 0 46
70394: PUSH
70395: LD_INT 2
70397: NEG
70398: PUSH
70399: LD_INT 2
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PUSH
70411: LD_INT 3
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 3
70421: NEG
70422: PUSH
70423: LD_INT 2
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: LIST
70435: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70436: LD_ADDR_VAR 0 47
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: LD_INT 3
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 1
70455: NEG
70456: PUSH
70457: LD_INT 3
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70469: LD_ADDR_VAR 0 48
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: LD_INT 2
70479: NEG
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 2
70487: PUSH
70488: LD_INT 1
70490: NEG
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70500: LD_ADDR_VAR 0 49
70504: PUSH
70505: LD_INT 3
70507: PUSH
70508: LD_INT 1
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 3
70517: PUSH
70518: LD_INT 2
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70529: LD_ADDR_VAR 0 50
70533: PUSH
70534: LD_INT 2
70536: PUSH
70537: LD_INT 3
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: LD_INT 3
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70558: LD_ADDR_VAR 0 51
70562: PUSH
70563: LD_INT 1
70565: NEG
70566: PUSH
70567: LD_INT 2
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 2
70576: NEG
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70589: LD_ADDR_VAR 0 52
70593: PUSH
70594: LD_INT 3
70596: NEG
70597: PUSH
70598: LD_INT 1
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 3
70608: NEG
70609: PUSH
70610: LD_INT 2
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70622: LD_ADDR_VAR 0 53
70626: PUSH
70627: LD_INT 1
70629: NEG
70630: PUSH
70631: LD_INT 3
70633: NEG
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: LD_INT 3
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: LD_INT 2
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: LIST
70665: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70666: LD_ADDR_VAR 0 54
70670: PUSH
70671: LD_INT 2
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 3
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 3
70694: PUSH
70695: LD_INT 1
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: LIST
70706: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70707: LD_ADDR_VAR 0 55
70711: PUSH
70712: LD_INT 3
70714: PUSH
70715: LD_INT 2
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 3
70724: PUSH
70725: LD_INT 3
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 2
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: LIST
70746: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70747: LD_ADDR_VAR 0 56
70751: PUSH
70752: LD_INT 1
70754: PUSH
70755: LD_INT 3
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: LD_INT 3
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 1
70774: NEG
70775: PUSH
70776: LD_INT 2
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: LIST
70787: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70788: LD_ADDR_VAR 0 57
70792: PUSH
70793: LD_INT 2
70795: NEG
70796: PUSH
70797: LD_INT 1
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 3
70806: NEG
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 3
70817: NEG
70818: PUSH
70819: LD_INT 1
70821: NEG
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: LIST
70831: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70832: LD_ADDR_VAR 0 58
70836: PUSH
70837: LD_INT 2
70839: NEG
70840: PUSH
70841: LD_INT 3
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 3
70851: NEG
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: NEG
70864: PUSH
70865: LD_INT 3
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: LIST
70877: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70878: LD_ADDR_VAR 0 59
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: LD_INT 2
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: LD_INT 2
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 1
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: LIST
70921: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70922: LD_ADDR_VAR 0 60
70926: PUSH
70927: LD_INT 1
70929: PUSH
70930: LD_INT 1
70932: NEG
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 2
70940: PUSH
70941: LD_INT 0
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 2
70950: PUSH
70951: LD_INT 1
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70963: LD_ADDR_VAR 0 61
70967: PUSH
70968: LD_INT 2
70970: PUSH
70971: LD_INT 1
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 2
70980: PUSH
70981: LD_INT 2
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 1
70990: PUSH
70991: LD_INT 2
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: LIST
71002: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71003: LD_ADDR_VAR 0 62
71007: PUSH
71008: LD_INT 1
71010: PUSH
71011: LD_INT 2
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: LD_INT 2
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 1
71030: NEG
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71044: LD_ADDR_VAR 0 63
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: LD_INT 1
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 2
71062: NEG
71063: PUSH
71064: LD_INT 0
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 2
71073: NEG
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: LIST
71087: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71088: LD_ADDR_VAR 0 64
71092: PUSH
71093: LD_INT 1
71095: NEG
71096: PUSH
71097: LD_INT 2
71099: NEG
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 2
71107: NEG
71108: PUSH
71109: LD_INT 1
71111: NEG
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 2
71119: NEG
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: LIST
71133: ST_TO_ADDR
// end ; 2 :
71134: GO 74400
71136: LD_INT 2
71138: DOUBLE
71139: EQUAL
71140: IFTRUE 71144
71142: GO 74399
71144: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71145: LD_ADDR_VAR 0 29
71149: PUSH
71150: LD_INT 4
71152: PUSH
71153: LD_INT 0
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 4
71162: PUSH
71163: LD_INT 1
71165: NEG
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 5
71173: PUSH
71174: LD_INT 0
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 5
71183: PUSH
71184: LD_INT 1
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 4
71193: PUSH
71194: LD_INT 1
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 3
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 3
71213: PUSH
71214: LD_INT 1
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: LD_INT 2
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 5
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 3
71245: PUSH
71246: LD_INT 3
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 3
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 4
71265: PUSH
71266: LD_INT 3
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 4
71275: PUSH
71276: LD_INT 4
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 3
71285: PUSH
71286: LD_INT 4
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: LD_INT 3
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 2
71305: PUSH
71306: LD_INT 2
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 4
71315: PUSH
71316: LD_INT 2
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 2
71325: PUSH
71326: LD_INT 4
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 0
71335: PUSH
71336: LD_INT 4
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 0
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 1
71355: PUSH
71356: LD_INT 4
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 1
71365: PUSH
71366: LD_INT 5
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: LD_INT 5
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 1
71385: NEG
71386: PUSH
71387: LD_INT 4
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 1
71396: NEG
71397: PUSH
71398: LD_INT 3
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 2
71407: PUSH
71408: LD_INT 5
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 2
71417: NEG
71418: PUSH
71419: LD_INT 3
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 3
71428: NEG
71429: PUSH
71430: LD_INT 0
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 3
71439: NEG
71440: PUSH
71441: LD_INT 1
71443: NEG
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 2
71451: NEG
71452: PUSH
71453: LD_INT 0
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 2
71462: NEG
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 3
71473: NEG
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 4
71484: NEG
71485: PUSH
71486: LD_INT 0
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 4
71495: NEG
71496: PUSH
71497: LD_INT 1
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 4
71507: NEG
71508: PUSH
71509: LD_INT 2
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 2
71519: NEG
71520: PUSH
71521: LD_INT 2
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 4
71530: NEG
71531: PUSH
71532: LD_INT 4
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 4
71542: NEG
71543: PUSH
71544: LD_INT 5
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 3
71554: NEG
71555: PUSH
71556: LD_INT 4
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: NEG
71567: PUSH
71568: LD_INT 3
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 4
71578: NEG
71579: PUSH
71580: LD_INT 3
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 5
71590: NEG
71591: PUSH
71592: LD_INT 4
71594: NEG
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 5
71602: NEG
71603: PUSH
71604: LD_INT 5
71606: NEG
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 3
71614: NEG
71615: PUSH
71616: LD_INT 5
71618: NEG
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 5
71626: NEG
71627: PUSH
71628: LD_INT 3
71630: NEG
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71683: LD_ADDR_VAR 0 30
71687: PUSH
71688: LD_INT 4
71690: PUSH
71691: LD_INT 4
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 4
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 5
71710: PUSH
71711: LD_INT 4
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 5
71720: PUSH
71721: LD_INT 5
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 4
71730: PUSH
71731: LD_INT 5
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 3
71740: PUSH
71741: LD_INT 4
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 3
71750: PUSH
71751: LD_INT 3
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 5
71760: PUSH
71761: LD_INT 3
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 3
71770: PUSH
71771: LD_INT 5
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 0
71780: PUSH
71781: LD_INT 3
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 0
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: LD_INT 3
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 1
71810: PUSH
71811: LD_INT 4
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: LD_INT 4
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 1
71830: NEG
71831: PUSH
71832: LD_INT 3
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 1
71841: NEG
71842: PUSH
71843: LD_INT 2
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 2
71852: PUSH
71853: LD_INT 4
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 2
71862: NEG
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 4
71873: NEG
71874: PUSH
71875: LD_INT 0
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 4
71884: NEG
71885: PUSH
71886: LD_INT 1
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 3
71896: NEG
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 3
71907: NEG
71908: PUSH
71909: LD_INT 1
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 4
71918: NEG
71919: PUSH
71920: LD_INT 1
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 5
71929: NEG
71930: PUSH
71931: LD_INT 0
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 5
71940: NEG
71941: PUSH
71942: LD_INT 1
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 5
71952: NEG
71953: PUSH
71954: LD_INT 2
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 3
71964: NEG
71965: PUSH
71966: LD_INT 2
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 3
71975: NEG
71976: PUSH
71977: LD_INT 3
71979: NEG
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 3
71987: NEG
71988: PUSH
71989: LD_INT 4
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 2
71999: NEG
72000: PUSH
72001: LD_INT 3
72003: NEG
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 2
72011: NEG
72012: PUSH
72013: LD_INT 2
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 3
72023: NEG
72024: PUSH
72025: LD_INT 2
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 4
72035: NEG
72036: PUSH
72037: LD_INT 3
72039: NEG
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 4
72047: NEG
72048: PUSH
72049: LD_INT 4
72051: NEG
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 2
72059: NEG
72060: PUSH
72061: LD_INT 4
72063: NEG
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 4
72071: NEG
72072: PUSH
72073: LD_INT 2
72075: NEG
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: LD_INT 4
72086: NEG
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 0
72094: PUSH
72095: LD_INT 5
72097: NEG
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 1
72105: PUSH
72106: LD_INT 4
72108: NEG
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 1
72116: PUSH
72117: LD_INT 3
72119: NEG
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 0
72127: PUSH
72128: LD_INT 3
72130: NEG
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 1
72138: NEG
72139: PUSH
72140: LD_INT 4
72142: NEG
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 1
72150: NEG
72151: PUSH
72152: LD_INT 5
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 2
72162: PUSH
72163: LD_INT 3
72165: NEG
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 2
72173: NEG
72174: PUSH
72175: LD_INT 5
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72230: LD_ADDR_VAR 0 31
72234: PUSH
72235: LD_INT 0
72237: PUSH
72238: LD_INT 4
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 0
72247: PUSH
72248: LD_INT 3
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 1
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 1
72267: PUSH
72268: LD_INT 5
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 0
72277: PUSH
72278: LD_INT 5
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 1
72287: NEG
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 1
72298: NEG
72299: PUSH
72300: LD_INT 3
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: LD_INT 5
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 2
72319: NEG
72320: PUSH
72321: LD_INT 3
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 3
72330: NEG
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 3
72341: NEG
72342: PUSH
72343: LD_INT 1
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 2
72353: NEG
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 2
72364: NEG
72365: PUSH
72366: LD_INT 1
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 3
72375: NEG
72376: PUSH
72377: LD_INT 1
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 4
72386: NEG
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 4
72397: NEG
72398: PUSH
72399: LD_INT 1
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 4
72409: NEG
72410: PUSH
72411: LD_INT 2
72413: NEG
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 2
72421: NEG
72422: PUSH
72423: LD_INT 2
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 4
72432: NEG
72433: PUSH
72434: LD_INT 4
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 4
72444: NEG
72445: PUSH
72446: LD_INT 5
72448: NEG
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 3
72456: NEG
72457: PUSH
72458: LD_INT 4
72460: NEG
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 3
72468: NEG
72469: PUSH
72470: LD_INT 3
72472: NEG
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 4
72480: NEG
72481: PUSH
72482: LD_INT 3
72484: NEG
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 5
72492: NEG
72493: PUSH
72494: LD_INT 4
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 5
72504: NEG
72505: PUSH
72506: LD_INT 5
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 3
72516: NEG
72517: PUSH
72518: LD_INT 5
72520: NEG
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 5
72528: NEG
72529: PUSH
72530: LD_INT 3
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: LD_INT 3
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 0
72551: PUSH
72552: LD_INT 4
72554: NEG
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 1
72562: PUSH
72563: LD_INT 3
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 1
72573: PUSH
72574: LD_INT 2
72576: NEG
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 0
72584: PUSH
72585: LD_INT 2
72587: NEG
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 1
72595: NEG
72596: PUSH
72597: LD_INT 3
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 1
72607: NEG
72608: PUSH
72609: LD_INT 4
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 2
72619: PUSH
72620: LD_INT 2
72622: NEG
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 2
72630: NEG
72631: PUSH
72632: LD_INT 4
72634: NEG
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 4
72642: PUSH
72643: LD_INT 0
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 4
72652: PUSH
72653: LD_INT 1
72655: NEG
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 5
72663: PUSH
72664: LD_INT 0
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 5
72673: PUSH
72674: LD_INT 1
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 4
72683: PUSH
72684: LD_INT 1
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 3
72693: PUSH
72694: LD_INT 0
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 3
72703: PUSH
72704: LD_INT 1
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 3
72714: PUSH
72715: LD_INT 2
72717: NEG
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 5
72725: PUSH
72726: LD_INT 2
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72780: LD_ADDR_VAR 0 32
72784: PUSH
72785: LD_INT 4
72787: NEG
72788: PUSH
72789: LD_INT 0
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 4
72798: NEG
72799: PUSH
72800: LD_INT 1
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 3
72810: NEG
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 3
72821: NEG
72822: PUSH
72823: LD_INT 1
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 4
72832: NEG
72833: PUSH
72834: LD_INT 1
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 5
72843: NEG
72844: PUSH
72845: LD_INT 0
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 5
72854: NEG
72855: PUSH
72856: LD_INT 1
72858: NEG
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 5
72866: NEG
72867: PUSH
72868: LD_INT 2
72870: NEG
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 3
72878: NEG
72879: PUSH
72880: LD_INT 2
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 3
72889: NEG
72890: PUSH
72891: LD_INT 3
72893: NEG
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 3
72901: NEG
72902: PUSH
72903: LD_INT 4
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 2
72913: NEG
72914: PUSH
72915: LD_INT 3
72917: NEG
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 2
72925: NEG
72926: PUSH
72927: LD_INT 2
72929: NEG
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 3
72937: NEG
72938: PUSH
72939: LD_INT 2
72941: NEG
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 4
72949: NEG
72950: PUSH
72951: LD_INT 3
72953: NEG
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 4
72961: NEG
72962: PUSH
72963: LD_INT 4
72965: NEG
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 2
72973: NEG
72974: PUSH
72975: LD_INT 4
72977: NEG
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 4
72985: NEG
72986: PUSH
72987: LD_INT 2
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 0
72997: PUSH
72998: LD_INT 4
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 0
73008: PUSH
73009: LD_INT 5
73011: NEG
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 1
73019: PUSH
73020: LD_INT 4
73022: NEG
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 1
73030: PUSH
73031: LD_INT 3
73033: NEG
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: LD_INT 3
73044: NEG
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 1
73052: NEG
73053: PUSH
73054: LD_INT 4
73056: NEG
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 1
73064: NEG
73065: PUSH
73066: LD_INT 5
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 2
73076: PUSH
73077: LD_INT 3
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 2
73087: NEG
73088: PUSH
73089: LD_INT 5
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 3
73099: PUSH
73100: LD_INT 0
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 3
73109: PUSH
73110: LD_INT 1
73112: NEG
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 4
73120: PUSH
73121: LD_INT 0
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 4
73130: PUSH
73131: LD_INT 1
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 3
73140: PUSH
73141: LD_INT 1
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 2
73150: PUSH
73151: LD_INT 0
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 2
73160: PUSH
73161: LD_INT 1
73163: NEG
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 2
73171: PUSH
73172: LD_INT 2
73174: NEG
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 4
73182: PUSH
73183: LD_INT 2
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 4
73192: PUSH
73193: LD_INT 4
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 4
73202: PUSH
73203: LD_INT 3
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 5
73212: PUSH
73213: LD_INT 4
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PUSH
73220: LD_INT 5
73222: PUSH
73223: LD_INT 5
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PUSH
73230: LD_INT 4
73232: PUSH
73233: LD_INT 5
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 3
73242: PUSH
73243: LD_INT 4
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 3
73252: PUSH
73253: LD_INT 3
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 5
73262: PUSH
73263: LD_INT 3
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 3
73272: PUSH
73273: LD_INT 5
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73327: LD_ADDR_VAR 0 33
73331: PUSH
73332: LD_INT 4
73334: NEG
73335: PUSH
73336: LD_INT 4
73338: NEG
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 4
73346: NEG
73347: PUSH
73348: LD_INT 5
73350: NEG
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 3
73358: NEG
73359: PUSH
73360: LD_INT 4
73362: NEG
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 3
73370: NEG
73371: PUSH
73372: LD_INT 3
73374: NEG
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 4
73382: NEG
73383: PUSH
73384: LD_INT 3
73386: NEG
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 5
73394: NEG
73395: PUSH
73396: LD_INT 4
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 5
73406: NEG
73407: PUSH
73408: LD_INT 5
73410: NEG
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 3
73418: NEG
73419: PUSH
73420: LD_INT 5
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 5
73430: NEG
73431: PUSH
73432: LD_INT 3
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 0
73442: PUSH
73443: LD_INT 3
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 0
73453: PUSH
73454: LD_INT 4
73456: NEG
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 1
73464: PUSH
73465: LD_INT 3
73467: NEG
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 1
73475: PUSH
73476: LD_INT 2
73478: NEG
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 0
73486: PUSH
73487: LD_INT 2
73489: NEG
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 1
73497: NEG
73498: PUSH
73499: LD_INT 3
73501: NEG
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 1
73509: NEG
73510: PUSH
73511: LD_INT 4
73513: NEG
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 2
73521: PUSH
73522: LD_INT 2
73524: NEG
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_INT 2
73532: NEG
73533: PUSH
73534: LD_INT 4
73536: NEG
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 4
73544: PUSH
73545: LD_INT 0
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 4
73554: PUSH
73555: LD_INT 1
73557: NEG
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 5
73565: PUSH
73566: LD_INT 0
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 5
73575: PUSH
73576: LD_INT 1
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 4
73585: PUSH
73586: LD_INT 1
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 3
73595: PUSH
73596: LD_INT 0
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 3
73605: PUSH
73606: LD_INT 1
73608: NEG
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 3
73616: PUSH
73617: LD_INT 2
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 5
73627: PUSH
73628: LD_INT 2
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 3
73637: PUSH
73638: LD_INT 3
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 3
73647: PUSH
73648: LD_INT 2
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 4
73657: PUSH
73658: LD_INT 3
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 4
73667: PUSH
73668: LD_INT 4
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 3
73677: PUSH
73678: LD_INT 4
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 2
73687: PUSH
73688: LD_INT 3
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 2
73697: PUSH
73698: LD_INT 2
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 4
73707: PUSH
73708: LD_INT 2
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 2
73717: PUSH
73718: LD_INT 4
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: LD_INT 0
73727: PUSH
73728: LD_INT 4
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: LD_INT 0
73737: PUSH
73738: LD_INT 3
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 1
73747: PUSH
73748: LD_INT 4
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: LD_INT 5
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 0
73767: PUSH
73768: LD_INT 5
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 1
73777: NEG
73778: PUSH
73779: LD_INT 4
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 1
73788: NEG
73789: PUSH
73790: LD_INT 3
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 2
73799: PUSH
73800: LD_INT 5
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 2
73809: NEG
73810: PUSH
73811: LD_INT 3
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73865: LD_ADDR_VAR 0 34
73869: PUSH
73870: LD_INT 0
73872: PUSH
73873: LD_INT 4
73875: NEG
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: PUSH
73881: LD_INT 0
73883: PUSH
73884: LD_INT 5
73886: NEG
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 1
73894: PUSH
73895: LD_INT 4
73897: NEG
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 1
73905: PUSH
73906: LD_INT 3
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 0
73916: PUSH
73917: LD_INT 3
73919: NEG
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 1
73927: NEG
73928: PUSH
73929: LD_INT 4
73931: NEG
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 1
73939: NEG
73940: PUSH
73941: LD_INT 5
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 2
73951: PUSH
73952: LD_INT 3
73954: NEG
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: LD_INT 2
73962: NEG
73963: PUSH
73964: LD_INT 5
73966: NEG
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: LD_INT 3
73984: PUSH
73985: LD_INT 1
73987: NEG
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: PUSH
73993: LD_INT 4
73995: PUSH
73996: LD_INT 0
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: PUSH
74003: LD_INT 4
74005: PUSH
74006: LD_INT 1
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: LD_INT 1
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 2
74025: PUSH
74026: LD_INT 0
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_INT 2
74035: PUSH
74036: LD_INT 1
74038: NEG
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 2
74046: PUSH
74047: LD_INT 2
74049: NEG
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 4
74057: PUSH
74058: LD_INT 2
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 4
74067: PUSH
74068: LD_INT 4
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PUSH
74075: LD_INT 4
74077: PUSH
74078: LD_INT 3
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PUSH
74085: LD_INT 5
74087: PUSH
74088: LD_INT 4
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 5
74097: PUSH
74098: LD_INT 5
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 4
74107: PUSH
74108: LD_INT 5
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 3
74117: PUSH
74118: LD_INT 4
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: LD_INT 3
74127: PUSH
74128: LD_INT 3
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 5
74137: PUSH
74138: LD_INT 3
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: LD_INT 3
74147: PUSH
74148: LD_INT 5
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 0
74157: PUSH
74158: LD_INT 3
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 0
74167: PUSH
74168: LD_INT 2
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 1
74177: PUSH
74178: LD_INT 3
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 1
74187: PUSH
74188: LD_INT 4
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 0
74197: PUSH
74198: LD_INT 4
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 1
74207: NEG
74208: PUSH
74209: LD_INT 3
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 1
74218: NEG
74219: PUSH
74220: LD_INT 2
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 2
74229: PUSH
74230: LD_INT 4
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 2
74239: NEG
74240: PUSH
74241: LD_INT 2
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PUSH
74248: LD_INT 4
74250: NEG
74251: PUSH
74252: LD_INT 0
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: LD_INT 4
74261: NEG
74262: PUSH
74263: LD_INT 1
74265: NEG
74266: PUSH
74267: EMPTY
74268: LIST
74269: LIST
74270: PUSH
74271: LD_INT 3
74273: NEG
74274: PUSH
74275: LD_INT 0
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PUSH
74282: LD_INT 3
74284: NEG
74285: PUSH
74286: LD_INT 1
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: LD_INT 4
74295: NEG
74296: PUSH
74297: LD_INT 1
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 5
74306: NEG
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 5
74317: NEG
74318: PUSH
74319: LD_INT 1
74321: NEG
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PUSH
74327: LD_INT 5
74329: NEG
74330: PUSH
74331: LD_INT 2
74333: NEG
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 3
74341: NEG
74342: PUSH
74343: LD_INT 2
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: ST_TO_ADDR
// end ; end ;
74397: GO 74400
74399: POP
// case btype of b_depot , b_warehouse :
74400: LD_VAR 0 1
74404: PUSH
74405: LD_INT 0
74407: DOUBLE
74408: EQUAL
74409: IFTRUE 74419
74411: LD_INT 1
74413: DOUBLE
74414: EQUAL
74415: IFTRUE 74419
74417: GO 74620
74419: POP
// case nation of nation_american :
74420: LD_VAR 0 5
74424: PUSH
74425: LD_INT 1
74427: DOUBLE
74428: EQUAL
74429: IFTRUE 74433
74431: GO 74489
74433: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74434: LD_ADDR_VAR 0 9
74438: PUSH
74439: LD_VAR 0 11
74443: PUSH
74444: LD_VAR 0 12
74448: PUSH
74449: LD_VAR 0 13
74453: PUSH
74454: LD_VAR 0 14
74458: PUSH
74459: LD_VAR 0 15
74463: PUSH
74464: LD_VAR 0 16
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: PUSH
74477: LD_VAR 0 4
74481: PUSH
74482: LD_INT 1
74484: PLUS
74485: ARRAY
74486: ST_TO_ADDR
74487: GO 74618
74489: LD_INT 2
74491: DOUBLE
74492: EQUAL
74493: IFTRUE 74497
74495: GO 74553
74497: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74498: LD_ADDR_VAR 0 9
74502: PUSH
74503: LD_VAR 0 17
74507: PUSH
74508: LD_VAR 0 18
74512: PUSH
74513: LD_VAR 0 19
74517: PUSH
74518: LD_VAR 0 20
74522: PUSH
74523: LD_VAR 0 21
74527: PUSH
74528: LD_VAR 0 22
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: PUSH
74541: LD_VAR 0 4
74545: PUSH
74546: LD_INT 1
74548: PLUS
74549: ARRAY
74550: ST_TO_ADDR
74551: GO 74618
74553: LD_INT 3
74555: DOUBLE
74556: EQUAL
74557: IFTRUE 74561
74559: GO 74617
74561: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74562: LD_ADDR_VAR 0 9
74566: PUSH
74567: LD_VAR 0 23
74571: PUSH
74572: LD_VAR 0 24
74576: PUSH
74577: LD_VAR 0 25
74581: PUSH
74582: LD_VAR 0 26
74586: PUSH
74587: LD_VAR 0 27
74591: PUSH
74592: LD_VAR 0 28
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: PUSH
74605: LD_VAR 0 4
74609: PUSH
74610: LD_INT 1
74612: PLUS
74613: ARRAY
74614: ST_TO_ADDR
74615: GO 74618
74617: POP
74618: GO 75173
74620: LD_INT 2
74622: DOUBLE
74623: EQUAL
74624: IFTRUE 74634
74626: LD_INT 3
74628: DOUBLE
74629: EQUAL
74630: IFTRUE 74634
74632: GO 74690
74634: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74635: LD_ADDR_VAR 0 9
74639: PUSH
74640: LD_VAR 0 29
74644: PUSH
74645: LD_VAR 0 30
74649: PUSH
74650: LD_VAR 0 31
74654: PUSH
74655: LD_VAR 0 32
74659: PUSH
74660: LD_VAR 0 33
74664: PUSH
74665: LD_VAR 0 34
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: PUSH
74678: LD_VAR 0 4
74682: PUSH
74683: LD_INT 1
74685: PLUS
74686: ARRAY
74687: ST_TO_ADDR
74688: GO 75173
74690: LD_INT 16
74692: DOUBLE
74693: EQUAL
74694: IFTRUE 74752
74696: LD_INT 17
74698: DOUBLE
74699: EQUAL
74700: IFTRUE 74752
74702: LD_INT 18
74704: DOUBLE
74705: EQUAL
74706: IFTRUE 74752
74708: LD_INT 19
74710: DOUBLE
74711: EQUAL
74712: IFTRUE 74752
74714: LD_INT 22
74716: DOUBLE
74717: EQUAL
74718: IFTRUE 74752
74720: LD_INT 20
74722: DOUBLE
74723: EQUAL
74724: IFTRUE 74752
74726: LD_INT 21
74728: DOUBLE
74729: EQUAL
74730: IFTRUE 74752
74732: LD_INT 23
74734: DOUBLE
74735: EQUAL
74736: IFTRUE 74752
74738: LD_INT 24
74740: DOUBLE
74741: EQUAL
74742: IFTRUE 74752
74744: LD_INT 25
74746: DOUBLE
74747: EQUAL
74748: IFTRUE 74752
74750: GO 74808
74752: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74753: LD_ADDR_VAR 0 9
74757: PUSH
74758: LD_VAR 0 35
74762: PUSH
74763: LD_VAR 0 36
74767: PUSH
74768: LD_VAR 0 37
74772: PUSH
74773: LD_VAR 0 38
74777: PUSH
74778: LD_VAR 0 39
74782: PUSH
74783: LD_VAR 0 40
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: PUSH
74796: LD_VAR 0 4
74800: PUSH
74801: LD_INT 1
74803: PLUS
74804: ARRAY
74805: ST_TO_ADDR
74806: GO 75173
74808: LD_INT 6
74810: DOUBLE
74811: EQUAL
74812: IFTRUE 74864
74814: LD_INT 7
74816: DOUBLE
74817: EQUAL
74818: IFTRUE 74864
74820: LD_INT 8
74822: DOUBLE
74823: EQUAL
74824: IFTRUE 74864
74826: LD_INT 13
74828: DOUBLE
74829: EQUAL
74830: IFTRUE 74864
74832: LD_INT 12
74834: DOUBLE
74835: EQUAL
74836: IFTRUE 74864
74838: LD_INT 15
74840: DOUBLE
74841: EQUAL
74842: IFTRUE 74864
74844: LD_INT 11
74846: DOUBLE
74847: EQUAL
74848: IFTRUE 74864
74850: LD_INT 14
74852: DOUBLE
74853: EQUAL
74854: IFTRUE 74864
74856: LD_INT 10
74858: DOUBLE
74859: EQUAL
74860: IFTRUE 74864
74862: GO 74920
74864: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74865: LD_ADDR_VAR 0 9
74869: PUSH
74870: LD_VAR 0 41
74874: PUSH
74875: LD_VAR 0 42
74879: PUSH
74880: LD_VAR 0 43
74884: PUSH
74885: LD_VAR 0 44
74889: PUSH
74890: LD_VAR 0 45
74894: PUSH
74895: LD_VAR 0 46
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: PUSH
74908: LD_VAR 0 4
74912: PUSH
74913: LD_INT 1
74915: PLUS
74916: ARRAY
74917: ST_TO_ADDR
74918: GO 75173
74920: LD_INT 36
74922: DOUBLE
74923: EQUAL
74924: IFTRUE 74928
74926: GO 74984
74928: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74929: LD_ADDR_VAR 0 9
74933: PUSH
74934: LD_VAR 0 47
74938: PUSH
74939: LD_VAR 0 48
74943: PUSH
74944: LD_VAR 0 49
74948: PUSH
74949: LD_VAR 0 50
74953: PUSH
74954: LD_VAR 0 51
74958: PUSH
74959: LD_VAR 0 52
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: PUSH
74972: LD_VAR 0 4
74976: PUSH
74977: LD_INT 1
74979: PLUS
74980: ARRAY
74981: ST_TO_ADDR
74982: GO 75173
74984: LD_INT 4
74986: DOUBLE
74987: EQUAL
74988: IFTRUE 75010
74990: LD_INT 5
74992: DOUBLE
74993: EQUAL
74994: IFTRUE 75010
74996: LD_INT 34
74998: DOUBLE
74999: EQUAL
75000: IFTRUE 75010
75002: LD_INT 37
75004: DOUBLE
75005: EQUAL
75006: IFTRUE 75010
75008: GO 75066
75010: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75011: LD_ADDR_VAR 0 9
75015: PUSH
75016: LD_VAR 0 53
75020: PUSH
75021: LD_VAR 0 54
75025: PUSH
75026: LD_VAR 0 55
75030: PUSH
75031: LD_VAR 0 56
75035: PUSH
75036: LD_VAR 0 57
75040: PUSH
75041: LD_VAR 0 58
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: PUSH
75054: LD_VAR 0 4
75058: PUSH
75059: LD_INT 1
75061: PLUS
75062: ARRAY
75063: ST_TO_ADDR
75064: GO 75173
75066: LD_INT 31
75068: DOUBLE
75069: EQUAL
75070: IFTRUE 75116
75072: LD_INT 32
75074: DOUBLE
75075: EQUAL
75076: IFTRUE 75116
75078: LD_INT 33
75080: DOUBLE
75081: EQUAL
75082: IFTRUE 75116
75084: LD_INT 27
75086: DOUBLE
75087: EQUAL
75088: IFTRUE 75116
75090: LD_INT 26
75092: DOUBLE
75093: EQUAL
75094: IFTRUE 75116
75096: LD_INT 28
75098: DOUBLE
75099: EQUAL
75100: IFTRUE 75116
75102: LD_INT 29
75104: DOUBLE
75105: EQUAL
75106: IFTRUE 75116
75108: LD_INT 30
75110: DOUBLE
75111: EQUAL
75112: IFTRUE 75116
75114: GO 75172
75116: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75117: LD_ADDR_VAR 0 9
75121: PUSH
75122: LD_VAR 0 59
75126: PUSH
75127: LD_VAR 0 60
75131: PUSH
75132: LD_VAR 0 61
75136: PUSH
75137: LD_VAR 0 62
75141: PUSH
75142: LD_VAR 0 63
75146: PUSH
75147: LD_VAR 0 64
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: PUSH
75160: LD_VAR 0 4
75164: PUSH
75165: LD_INT 1
75167: PLUS
75168: ARRAY
75169: ST_TO_ADDR
75170: GO 75173
75172: POP
// temp_list2 = [ ] ;
75173: LD_ADDR_VAR 0 10
75177: PUSH
75178: EMPTY
75179: ST_TO_ADDR
// for i in temp_list do
75180: LD_ADDR_VAR 0 8
75184: PUSH
75185: LD_VAR 0 9
75189: PUSH
75190: FOR_IN
75191: IFFALSE 75243
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75193: LD_ADDR_VAR 0 10
75197: PUSH
75198: LD_VAR 0 10
75202: PUSH
75203: LD_VAR 0 8
75207: PUSH
75208: LD_INT 1
75210: ARRAY
75211: PUSH
75212: LD_VAR 0 2
75216: PLUS
75217: PUSH
75218: LD_VAR 0 8
75222: PUSH
75223: LD_INT 2
75225: ARRAY
75226: PUSH
75227: LD_VAR 0 3
75231: PLUS
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: EMPTY
75238: LIST
75239: ADD
75240: ST_TO_ADDR
75241: GO 75190
75243: POP
75244: POP
// result = temp_list2 ;
75245: LD_ADDR_VAR 0 7
75249: PUSH
75250: LD_VAR 0 10
75254: ST_TO_ADDR
// end ;
75255: LD_VAR 0 7
75259: RET
// export function EnemyInRange ( unit , dist ) ; begin
75260: LD_INT 0
75262: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75263: LD_ADDR_VAR 0 3
75267: PUSH
75268: LD_VAR 0 1
75272: PPUSH
75273: CALL_OW 255
75277: PPUSH
75278: LD_VAR 0 1
75282: PPUSH
75283: CALL_OW 250
75287: PPUSH
75288: LD_VAR 0 1
75292: PPUSH
75293: CALL_OW 251
75297: PPUSH
75298: LD_VAR 0 2
75302: PPUSH
75303: CALL 48517 0 4
75307: PUSH
75308: LD_INT 4
75310: ARRAY
75311: ST_TO_ADDR
// end ;
75312: LD_VAR 0 3
75316: RET
// export function PlayerSeeMe ( unit ) ; begin
75317: LD_INT 0
75319: PPUSH
// result := See ( your_side , unit ) ;
75320: LD_ADDR_VAR 0 2
75324: PUSH
75325: LD_OWVAR 2
75329: PPUSH
75330: LD_VAR 0 1
75334: PPUSH
75335: CALL_OW 292
75339: ST_TO_ADDR
// end ;
75340: LD_VAR 0 2
75344: RET
// export function ReverseDir ( unit ) ; begin
75345: LD_INT 0
75347: PPUSH
// if not unit then
75348: LD_VAR 0 1
75352: NOT
75353: IFFALSE 75357
// exit ;
75355: GO 75380
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75357: LD_ADDR_VAR 0 2
75361: PUSH
75362: LD_VAR 0 1
75366: PPUSH
75367: CALL_OW 254
75371: PUSH
75372: LD_INT 3
75374: PLUS
75375: PUSH
75376: LD_INT 6
75378: MOD
75379: ST_TO_ADDR
// end ;
75380: LD_VAR 0 2
75384: RET
// export function ReverseArray ( array ) ; var i ; begin
75385: LD_INT 0
75387: PPUSH
75388: PPUSH
// if not array then
75389: LD_VAR 0 1
75393: NOT
75394: IFFALSE 75398
// exit ;
75396: GO 75453
// result := [ ] ;
75398: LD_ADDR_VAR 0 2
75402: PUSH
75403: EMPTY
75404: ST_TO_ADDR
// for i := array downto 1 do
75405: LD_ADDR_VAR 0 3
75409: PUSH
75410: DOUBLE
75411: LD_VAR 0 1
75415: INC
75416: ST_TO_ADDR
75417: LD_INT 1
75419: PUSH
75420: FOR_DOWNTO
75421: IFFALSE 75451
// result := Join ( result , array [ i ] ) ;
75423: LD_ADDR_VAR 0 2
75427: PUSH
75428: LD_VAR 0 2
75432: PPUSH
75433: LD_VAR 0 1
75437: PUSH
75438: LD_VAR 0 3
75442: ARRAY
75443: PPUSH
75444: CALL 80295 0 2
75448: ST_TO_ADDR
75449: GO 75420
75451: POP
75452: POP
// end ;
75453: LD_VAR 0 2
75457: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75458: LD_INT 0
75460: PPUSH
75461: PPUSH
75462: PPUSH
75463: PPUSH
75464: PPUSH
75465: PPUSH
// if not unit or not hexes then
75466: LD_VAR 0 1
75470: NOT
75471: IFTRUE 75480
75473: PUSH
75474: LD_VAR 0 2
75478: NOT
75479: OR
75480: IFFALSE 75484
// exit ;
75482: GO 75607
// dist := 9999 ;
75484: LD_ADDR_VAR 0 5
75488: PUSH
75489: LD_INT 9999
75491: ST_TO_ADDR
// for i = 1 to hexes do
75492: LD_ADDR_VAR 0 4
75496: PUSH
75497: DOUBLE
75498: LD_INT 1
75500: DEC
75501: ST_TO_ADDR
75502: LD_VAR 0 2
75506: PUSH
75507: FOR_TO
75508: IFFALSE 75595
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75510: LD_ADDR_VAR 0 6
75514: PUSH
75515: LD_VAR 0 1
75519: PPUSH
75520: LD_VAR 0 2
75524: PUSH
75525: LD_VAR 0 4
75529: ARRAY
75530: PUSH
75531: LD_INT 1
75533: ARRAY
75534: PPUSH
75535: LD_VAR 0 2
75539: PUSH
75540: LD_VAR 0 4
75544: ARRAY
75545: PUSH
75546: LD_INT 2
75548: ARRAY
75549: PPUSH
75550: CALL_OW 297
75554: ST_TO_ADDR
// if tdist < dist then
75555: LD_VAR 0 6
75559: PUSH
75560: LD_VAR 0 5
75564: LESS
75565: IFFALSE 75593
// begin hex := hexes [ i ] ;
75567: LD_ADDR_VAR 0 8
75571: PUSH
75572: LD_VAR 0 2
75576: PUSH
75577: LD_VAR 0 4
75581: ARRAY
75582: ST_TO_ADDR
// dist := tdist ;
75583: LD_ADDR_VAR 0 5
75587: PUSH
75588: LD_VAR 0 6
75592: ST_TO_ADDR
// end ; end ;
75593: GO 75507
75595: POP
75596: POP
// result := hex ;
75597: LD_ADDR_VAR 0 3
75601: PUSH
75602: LD_VAR 0 8
75606: ST_TO_ADDR
// end ;
75607: LD_VAR 0 3
75611: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75612: LD_INT 0
75614: PPUSH
75615: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75616: LD_VAR 0 1
75620: NOT
75621: IFTRUE 75660
75623: PUSH
75624: LD_VAR 0 1
75628: PUSH
75629: LD_INT 21
75631: PUSH
75632: LD_INT 2
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 23
75641: PUSH
75642: LD_INT 2
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PPUSH
75653: CALL_OW 69
75657: IN
75658: NOT
75659: OR
75660: IFFALSE 75664
// exit ;
75662: GO 75711
// for i = 1 to 3 do
75664: LD_ADDR_VAR 0 3
75668: PUSH
75669: DOUBLE
75670: LD_INT 1
75672: DEC
75673: ST_TO_ADDR
75674: LD_INT 3
75676: PUSH
75677: FOR_TO
75678: IFFALSE 75709
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75680: LD_VAR 0 1
75684: PPUSH
75685: CALL_OW 250
75689: PPUSH
75690: LD_VAR 0 1
75694: PPUSH
75695: CALL_OW 251
75699: PPUSH
75700: LD_INT 1
75702: PPUSH
75703: CALL_OW 453
75707: GO 75677
75709: POP
75710: POP
// end ;
75711: LD_VAR 0 2
75715: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75716: LD_INT 0
75718: PPUSH
75719: PPUSH
75720: PPUSH
75721: PPUSH
75722: PPUSH
75723: PPUSH
// if not unit or not enemy_unit then
75724: LD_VAR 0 1
75728: NOT
75729: IFTRUE 75738
75731: PUSH
75732: LD_VAR 0 2
75736: NOT
75737: OR
75738: IFFALSE 75742
// exit ;
75740: GO 76213
// if GetLives ( i ) < 250 then
75742: LD_VAR 0 4
75746: PPUSH
75747: CALL_OW 256
75751: PUSH
75752: LD_INT 250
75754: LESS
75755: IFFALSE 75768
// begin ComAutodestruct ( i ) ;
75757: LD_VAR 0 4
75761: PPUSH
75762: CALL 75612 0 1
// exit ;
75766: GO 76213
// end ; x := GetX ( enemy_unit ) ;
75768: LD_ADDR_VAR 0 7
75772: PUSH
75773: LD_VAR 0 2
75777: PPUSH
75778: CALL_OW 250
75782: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75783: LD_ADDR_VAR 0 8
75787: PUSH
75788: LD_VAR 0 2
75792: PPUSH
75793: CALL_OW 251
75797: ST_TO_ADDR
// if not x or not y then
75798: LD_VAR 0 7
75802: NOT
75803: IFTRUE 75812
75805: PUSH
75806: LD_VAR 0 8
75810: NOT
75811: OR
75812: IFFALSE 75816
// exit ;
75814: GO 76213
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75816: LD_ADDR_VAR 0 6
75820: PUSH
75821: LD_VAR 0 7
75825: PPUSH
75826: LD_INT 0
75828: PPUSH
75829: LD_INT 4
75831: PPUSH
75832: CALL_OW 272
75836: PUSH
75837: LD_VAR 0 8
75841: PPUSH
75842: LD_INT 0
75844: PPUSH
75845: LD_INT 4
75847: PPUSH
75848: CALL_OW 273
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_VAR 0 7
75861: PPUSH
75862: LD_INT 1
75864: PPUSH
75865: LD_INT 4
75867: PPUSH
75868: CALL_OW 272
75872: PUSH
75873: LD_VAR 0 8
75877: PPUSH
75878: LD_INT 1
75880: PPUSH
75881: LD_INT 4
75883: PPUSH
75884: CALL_OW 273
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: LD_VAR 0 7
75897: PPUSH
75898: LD_INT 2
75900: PPUSH
75901: LD_INT 4
75903: PPUSH
75904: CALL_OW 272
75908: PUSH
75909: LD_VAR 0 8
75913: PPUSH
75914: LD_INT 2
75916: PPUSH
75917: LD_INT 4
75919: PPUSH
75920: CALL_OW 273
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_VAR 0 7
75933: PPUSH
75934: LD_INT 3
75936: PPUSH
75937: LD_INT 4
75939: PPUSH
75940: CALL_OW 272
75944: PUSH
75945: LD_VAR 0 8
75949: PPUSH
75950: LD_INT 3
75952: PPUSH
75953: LD_INT 4
75955: PPUSH
75956: CALL_OW 273
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: LD_VAR 0 7
75969: PPUSH
75970: LD_INT 4
75972: PPUSH
75973: LD_INT 4
75975: PPUSH
75976: CALL_OW 272
75980: PUSH
75981: LD_VAR 0 8
75985: PPUSH
75986: LD_INT 4
75988: PPUSH
75989: LD_INT 4
75991: PPUSH
75992: CALL_OW 273
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PUSH
76001: LD_VAR 0 7
76005: PPUSH
76006: LD_INT 5
76008: PPUSH
76009: LD_INT 4
76011: PPUSH
76012: CALL_OW 272
76016: PUSH
76017: LD_VAR 0 8
76021: PPUSH
76022: LD_INT 5
76024: PPUSH
76025: LD_INT 4
76027: PPUSH
76028: CALL_OW 273
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: ST_TO_ADDR
// for i = tmp downto 1 do
76045: LD_ADDR_VAR 0 4
76049: PUSH
76050: DOUBLE
76051: LD_VAR 0 6
76055: INC
76056: ST_TO_ADDR
76057: LD_INT 1
76059: PUSH
76060: FOR_DOWNTO
76061: IFFALSE 76164
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76063: LD_VAR 0 6
76067: PUSH
76068: LD_VAR 0 4
76072: ARRAY
76073: PUSH
76074: LD_INT 1
76076: ARRAY
76077: PPUSH
76078: LD_VAR 0 6
76082: PUSH
76083: LD_VAR 0 4
76087: ARRAY
76088: PUSH
76089: LD_INT 2
76091: ARRAY
76092: PPUSH
76093: CALL_OW 488
76097: NOT
76098: IFTRUE 76140
76100: PUSH
76101: LD_VAR 0 6
76105: PUSH
76106: LD_VAR 0 4
76110: ARRAY
76111: PUSH
76112: LD_INT 1
76114: ARRAY
76115: PPUSH
76116: LD_VAR 0 6
76120: PUSH
76121: LD_VAR 0 4
76125: ARRAY
76126: PUSH
76127: LD_INT 2
76129: ARRAY
76130: PPUSH
76131: CALL_OW 428
76135: PUSH
76136: LD_INT 0
76138: NONEQUAL
76139: OR
76140: IFFALSE 76162
// tmp := Delete ( tmp , i ) ;
76142: LD_ADDR_VAR 0 6
76146: PUSH
76147: LD_VAR 0 6
76151: PPUSH
76152: LD_VAR 0 4
76156: PPUSH
76157: CALL_OW 3
76161: ST_TO_ADDR
76162: GO 76060
76164: POP
76165: POP
// j := GetClosestHex ( unit , tmp ) ;
76166: LD_ADDR_VAR 0 5
76170: PUSH
76171: LD_VAR 0 1
76175: PPUSH
76176: LD_VAR 0 6
76180: PPUSH
76181: CALL 75458 0 2
76185: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76186: LD_VAR 0 1
76190: PPUSH
76191: LD_VAR 0 5
76195: PUSH
76196: LD_INT 1
76198: ARRAY
76199: PPUSH
76200: LD_VAR 0 5
76204: PUSH
76205: LD_INT 2
76207: ARRAY
76208: PPUSH
76209: CALL_OW 111
// end ;
76213: LD_VAR 0 3
76217: RET
// export function PrepareApemanSoldier ( ) ; begin
76218: LD_INT 0
76220: PPUSH
// uc_nation := 0 ;
76221: LD_ADDR_OWVAR 21
76225: PUSH
76226: LD_INT 0
76228: ST_TO_ADDR
// hc_sex := sex_male ;
76229: LD_ADDR_OWVAR 27
76233: PUSH
76234: LD_INT 1
76236: ST_TO_ADDR
// hc_name :=  ;
76237: LD_ADDR_OWVAR 26
76241: PUSH
76242: LD_STRING 
76244: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76245: LD_ADDR_OWVAR 28
76249: PUSH
76250: LD_INT 15
76252: ST_TO_ADDR
// hc_gallery :=  ;
76253: LD_ADDR_OWVAR 33
76257: PUSH
76258: LD_STRING 
76260: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76261: LD_ADDR_OWVAR 31
76265: PUSH
76266: LD_INT 0
76268: PPUSH
76269: LD_INT 3
76271: PPUSH
76272: CALL_OW 12
76276: PUSH
76277: LD_INT 0
76279: PPUSH
76280: LD_INT 3
76282: PPUSH
76283: CALL_OW 12
76287: PUSH
76288: LD_INT 0
76290: PUSH
76291: LD_INT 0
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76300: LD_ADDR_OWVAR 29
76304: PUSH
76305: LD_INT 12
76307: PUSH
76308: LD_INT 12
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: ST_TO_ADDR
// end ;
76315: LD_VAR 0 1
76319: RET
// export function PrepareApemanEngineer ( ) ; begin
76320: LD_INT 0
76322: PPUSH
// uc_nation := 0 ;
76323: LD_ADDR_OWVAR 21
76327: PUSH
76328: LD_INT 0
76330: ST_TO_ADDR
// hc_sex := sex_male ;
76331: LD_ADDR_OWVAR 27
76335: PUSH
76336: LD_INT 1
76338: ST_TO_ADDR
// hc_name :=  ;
76339: LD_ADDR_OWVAR 26
76343: PUSH
76344: LD_STRING 
76346: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76347: LD_ADDR_OWVAR 28
76351: PUSH
76352: LD_INT 16
76354: ST_TO_ADDR
// hc_gallery :=  ;
76355: LD_ADDR_OWVAR 33
76359: PUSH
76360: LD_STRING 
76362: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76363: LD_ADDR_OWVAR 31
76367: PUSH
76368: LD_INT 0
76370: PPUSH
76371: LD_INT 3
76373: PPUSH
76374: CALL_OW 12
76378: PUSH
76379: LD_INT 0
76381: PPUSH
76382: LD_INT 3
76384: PPUSH
76385: CALL_OW 12
76389: PUSH
76390: LD_INT 0
76392: PUSH
76393: LD_INT 0
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76402: LD_ADDR_OWVAR 29
76406: PUSH
76407: LD_INT 12
76409: PUSH
76410: LD_INT 12
76412: PUSH
76413: EMPTY
76414: LIST
76415: LIST
76416: ST_TO_ADDR
// end ;
76417: LD_VAR 0 1
76421: RET
// export function PrepareApeman ( agressivity ) ; begin
76422: LD_INT 0
76424: PPUSH
// uc_side := 0 ;
76425: LD_ADDR_OWVAR 20
76429: PUSH
76430: LD_INT 0
76432: ST_TO_ADDR
// uc_nation := 0 ;
76433: LD_ADDR_OWVAR 21
76437: PUSH
76438: LD_INT 0
76440: ST_TO_ADDR
// hc_sex := sex_male ;
76441: LD_ADDR_OWVAR 27
76445: PUSH
76446: LD_INT 1
76448: ST_TO_ADDR
// hc_class := class_apeman ;
76449: LD_ADDR_OWVAR 28
76453: PUSH
76454: LD_INT 12
76456: ST_TO_ADDR
// hc_gallery :=  ;
76457: LD_ADDR_OWVAR 33
76461: PUSH
76462: LD_STRING 
76464: ST_TO_ADDR
// hc_name :=  ;
76465: LD_ADDR_OWVAR 26
76469: PUSH
76470: LD_STRING 
76472: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76473: LD_ADDR_OWVAR 29
76477: PUSH
76478: LD_INT 12
76480: PUSH
76481: LD_INT 12
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: ST_TO_ADDR
// if agressivity = 0 then
76488: LD_VAR 0 1
76492: PUSH
76493: LD_INT 0
76495: EQUAL
76496: IFFALSE 76508
// hc_agressivity := 0 else
76498: LD_ADDR_OWVAR 35
76502: PUSH
76503: LD_INT 0
76505: ST_TO_ADDR
76506: GO 76529
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76508: LD_ADDR_OWVAR 35
76512: PUSH
76513: LD_VAR 0 1
76517: NEG
76518: PPUSH
76519: LD_VAR 0 1
76523: PPUSH
76524: CALL_OW 12
76528: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76529: LD_ADDR_OWVAR 31
76533: PUSH
76534: LD_INT 0
76536: PPUSH
76537: LD_INT 3
76539: PPUSH
76540: CALL_OW 12
76544: PUSH
76545: LD_INT 0
76547: PPUSH
76548: LD_INT 3
76550: PPUSH
76551: CALL_OW 12
76555: PUSH
76556: LD_INT 0
76558: PUSH
76559: LD_INT 0
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: LIST
76566: LIST
76567: ST_TO_ADDR
// end ;
76568: LD_VAR 0 2
76572: RET
// export function PrepareTiger ( agressivity ) ; begin
76573: LD_INT 0
76575: PPUSH
// uc_side := 0 ;
76576: LD_ADDR_OWVAR 20
76580: PUSH
76581: LD_INT 0
76583: ST_TO_ADDR
// uc_nation := 0 ;
76584: LD_ADDR_OWVAR 21
76588: PUSH
76589: LD_INT 0
76591: ST_TO_ADDR
// InitHc ;
76592: CALL_OW 19
// hc_class := class_tiger ;
76596: LD_ADDR_OWVAR 28
76600: PUSH
76601: LD_INT 14
76603: ST_TO_ADDR
// hc_gallery :=  ;
76604: LD_ADDR_OWVAR 33
76608: PUSH
76609: LD_STRING 
76611: ST_TO_ADDR
// hc_name :=  ;
76612: LD_ADDR_OWVAR 26
76616: PUSH
76617: LD_STRING 
76619: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76620: LD_ADDR_OWVAR 35
76624: PUSH
76625: LD_VAR 0 1
76629: NEG
76630: PPUSH
76631: LD_VAR 0 1
76635: PPUSH
76636: CALL_OW 12
76640: ST_TO_ADDR
// end ;
76641: LD_VAR 0 2
76645: RET
// export function PrepareEnchidna ( ) ; begin
76646: LD_INT 0
76648: PPUSH
// uc_side := 0 ;
76649: LD_ADDR_OWVAR 20
76653: PUSH
76654: LD_INT 0
76656: ST_TO_ADDR
// uc_nation := 0 ;
76657: LD_ADDR_OWVAR 21
76661: PUSH
76662: LD_INT 0
76664: ST_TO_ADDR
// InitHc ;
76665: CALL_OW 19
// hc_class := class_baggie ;
76669: LD_ADDR_OWVAR 28
76673: PUSH
76674: LD_INT 13
76676: ST_TO_ADDR
// hc_gallery :=  ;
76677: LD_ADDR_OWVAR 33
76681: PUSH
76682: LD_STRING 
76684: ST_TO_ADDR
// hc_name :=  ;
76685: LD_ADDR_OWVAR 26
76689: PUSH
76690: LD_STRING 
76692: ST_TO_ADDR
// end ;
76693: LD_VAR 0 1
76697: RET
// export function PrepareFrog ( ) ; begin
76698: LD_INT 0
76700: PPUSH
// uc_side := 0 ;
76701: LD_ADDR_OWVAR 20
76705: PUSH
76706: LD_INT 0
76708: ST_TO_ADDR
// uc_nation := 0 ;
76709: LD_ADDR_OWVAR 21
76713: PUSH
76714: LD_INT 0
76716: ST_TO_ADDR
// InitHc ;
76717: CALL_OW 19
// hc_class := class_frog ;
76721: LD_ADDR_OWVAR 28
76725: PUSH
76726: LD_INT 19
76728: ST_TO_ADDR
// hc_gallery :=  ;
76729: LD_ADDR_OWVAR 33
76733: PUSH
76734: LD_STRING 
76736: ST_TO_ADDR
// hc_name :=  ;
76737: LD_ADDR_OWVAR 26
76741: PUSH
76742: LD_STRING 
76744: ST_TO_ADDR
// end ;
76745: LD_VAR 0 1
76749: RET
// export function PrepareFish ( ) ; begin
76750: LD_INT 0
76752: PPUSH
// uc_side := 0 ;
76753: LD_ADDR_OWVAR 20
76757: PUSH
76758: LD_INT 0
76760: ST_TO_ADDR
// uc_nation := 0 ;
76761: LD_ADDR_OWVAR 21
76765: PUSH
76766: LD_INT 0
76768: ST_TO_ADDR
// InitHc ;
76769: CALL_OW 19
// hc_class := class_fish ;
76773: LD_ADDR_OWVAR 28
76777: PUSH
76778: LD_INT 20
76780: ST_TO_ADDR
// hc_gallery :=  ;
76781: LD_ADDR_OWVAR 33
76785: PUSH
76786: LD_STRING 
76788: ST_TO_ADDR
// hc_name :=  ;
76789: LD_ADDR_OWVAR 26
76793: PUSH
76794: LD_STRING 
76796: ST_TO_ADDR
// end ;
76797: LD_VAR 0 1
76801: RET
// export function PrepareBird ( ) ; begin
76802: LD_INT 0
76804: PPUSH
// uc_side := 0 ;
76805: LD_ADDR_OWVAR 20
76809: PUSH
76810: LD_INT 0
76812: ST_TO_ADDR
// uc_nation := 0 ;
76813: LD_ADDR_OWVAR 21
76817: PUSH
76818: LD_INT 0
76820: ST_TO_ADDR
// InitHc ;
76821: CALL_OW 19
// hc_class := class_phororhacos ;
76825: LD_ADDR_OWVAR 28
76829: PUSH
76830: LD_INT 18
76832: ST_TO_ADDR
// hc_gallery :=  ;
76833: LD_ADDR_OWVAR 33
76837: PUSH
76838: LD_STRING 
76840: ST_TO_ADDR
// hc_name :=  ;
76841: LD_ADDR_OWVAR 26
76845: PUSH
76846: LD_STRING 
76848: ST_TO_ADDR
// end ;
76849: LD_VAR 0 1
76853: RET
// export function PrepareHorse ( ) ; begin
76854: LD_INT 0
76856: PPUSH
// uc_side := 0 ;
76857: LD_ADDR_OWVAR 20
76861: PUSH
76862: LD_INT 0
76864: ST_TO_ADDR
// uc_nation := 0 ;
76865: LD_ADDR_OWVAR 21
76869: PUSH
76870: LD_INT 0
76872: ST_TO_ADDR
// InitHc ;
76873: CALL_OW 19
// hc_class := class_horse ;
76877: LD_ADDR_OWVAR 28
76881: PUSH
76882: LD_INT 21
76884: ST_TO_ADDR
// hc_gallery :=  ;
76885: LD_ADDR_OWVAR 33
76889: PUSH
76890: LD_STRING 
76892: ST_TO_ADDR
// hc_name :=  ;
76893: LD_ADDR_OWVAR 26
76897: PUSH
76898: LD_STRING 
76900: ST_TO_ADDR
// end ;
76901: LD_VAR 0 1
76905: RET
// export function PrepareMastodont ( ) ; begin
76906: LD_INT 0
76908: PPUSH
// uc_side := 0 ;
76909: LD_ADDR_OWVAR 20
76913: PUSH
76914: LD_INT 0
76916: ST_TO_ADDR
// uc_nation := 0 ;
76917: LD_ADDR_OWVAR 21
76921: PUSH
76922: LD_INT 0
76924: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76925: LD_ADDR_OWVAR 37
76929: PUSH
76930: LD_INT 31
76932: ST_TO_ADDR
// vc_control := control_rider ;
76933: LD_ADDR_OWVAR 38
76937: PUSH
76938: LD_INT 4
76940: ST_TO_ADDR
// end ;
76941: LD_VAR 0 1
76945: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76946: LD_INT 0
76948: PPUSH
76949: PPUSH
76950: PPUSH
// uc_side = 0 ;
76951: LD_ADDR_OWVAR 20
76955: PUSH
76956: LD_INT 0
76958: ST_TO_ADDR
// uc_nation = 0 ;
76959: LD_ADDR_OWVAR 21
76963: PUSH
76964: LD_INT 0
76966: ST_TO_ADDR
// InitHc_All ( ) ;
76967: CALL_OW 584
// InitVc ;
76971: CALL_OW 20
// if mastodonts then
76975: LD_VAR 0 6
76979: IFFALSE 77046
// for i = 1 to mastodonts do
76981: LD_ADDR_VAR 0 11
76985: PUSH
76986: DOUBLE
76987: LD_INT 1
76989: DEC
76990: ST_TO_ADDR
76991: LD_VAR 0 6
76995: PUSH
76996: FOR_TO
76997: IFFALSE 77044
// begin vc_chassis := 31 ;
76999: LD_ADDR_OWVAR 37
77003: PUSH
77004: LD_INT 31
77006: ST_TO_ADDR
// vc_control := control_rider ;
77007: LD_ADDR_OWVAR 38
77011: PUSH
77012: LD_INT 4
77014: ST_TO_ADDR
// animal := CreateVehicle ;
77015: LD_ADDR_VAR 0 12
77019: PUSH
77020: CALL_OW 45
77024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77025: LD_VAR 0 12
77029: PPUSH
77030: LD_VAR 0 8
77034: PPUSH
77035: LD_INT 0
77037: PPUSH
77038: CALL 79188 0 3
// end ;
77042: GO 76996
77044: POP
77045: POP
// if horses then
77046: LD_VAR 0 5
77050: IFFALSE 77117
// for i = 1 to horses do
77052: LD_ADDR_VAR 0 11
77056: PUSH
77057: DOUBLE
77058: LD_INT 1
77060: DEC
77061: ST_TO_ADDR
77062: LD_VAR 0 5
77066: PUSH
77067: FOR_TO
77068: IFFALSE 77115
// begin hc_class := 21 ;
77070: LD_ADDR_OWVAR 28
77074: PUSH
77075: LD_INT 21
77077: ST_TO_ADDR
// hc_gallery :=  ;
77078: LD_ADDR_OWVAR 33
77082: PUSH
77083: LD_STRING 
77085: ST_TO_ADDR
// animal := CreateHuman ;
77086: LD_ADDR_VAR 0 12
77090: PUSH
77091: CALL_OW 44
77095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77096: LD_VAR 0 12
77100: PPUSH
77101: LD_VAR 0 8
77105: PPUSH
77106: LD_INT 0
77108: PPUSH
77109: CALL 79188 0 3
// end ;
77113: GO 77067
77115: POP
77116: POP
// if birds then
77117: LD_VAR 0 1
77121: IFFALSE 77188
// for i = 1 to birds do
77123: LD_ADDR_VAR 0 11
77127: PUSH
77128: DOUBLE
77129: LD_INT 1
77131: DEC
77132: ST_TO_ADDR
77133: LD_VAR 0 1
77137: PUSH
77138: FOR_TO
77139: IFFALSE 77186
// begin hc_class := 18 ;
77141: LD_ADDR_OWVAR 28
77145: PUSH
77146: LD_INT 18
77148: ST_TO_ADDR
// hc_gallery =  ;
77149: LD_ADDR_OWVAR 33
77153: PUSH
77154: LD_STRING 
77156: ST_TO_ADDR
// animal := CreateHuman ;
77157: LD_ADDR_VAR 0 12
77161: PUSH
77162: CALL_OW 44
77166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77167: LD_VAR 0 12
77171: PPUSH
77172: LD_VAR 0 8
77176: PPUSH
77177: LD_INT 0
77179: PPUSH
77180: CALL 79188 0 3
// end ;
77184: GO 77138
77186: POP
77187: POP
// if tigers then
77188: LD_VAR 0 2
77192: IFFALSE 77276
// for i = 1 to tigers do
77194: LD_ADDR_VAR 0 11
77198: PUSH
77199: DOUBLE
77200: LD_INT 1
77202: DEC
77203: ST_TO_ADDR
77204: LD_VAR 0 2
77208: PUSH
77209: FOR_TO
77210: IFFALSE 77274
// begin hc_class = class_tiger ;
77212: LD_ADDR_OWVAR 28
77216: PUSH
77217: LD_INT 14
77219: ST_TO_ADDR
// hc_gallery =  ;
77220: LD_ADDR_OWVAR 33
77224: PUSH
77225: LD_STRING 
77227: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77228: LD_ADDR_OWVAR 35
77232: PUSH
77233: LD_INT 7
77235: NEG
77236: PPUSH
77237: LD_INT 7
77239: PPUSH
77240: CALL_OW 12
77244: ST_TO_ADDR
// animal := CreateHuman ;
77245: LD_ADDR_VAR 0 12
77249: PUSH
77250: CALL_OW 44
77254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77255: LD_VAR 0 12
77259: PPUSH
77260: LD_VAR 0 8
77264: PPUSH
77265: LD_INT 0
77267: PPUSH
77268: CALL 79188 0 3
// end ;
77272: GO 77209
77274: POP
77275: POP
// if apemans then
77276: LD_VAR 0 3
77280: IFFALSE 77403
// for i = 1 to apemans do
77282: LD_ADDR_VAR 0 11
77286: PUSH
77287: DOUBLE
77288: LD_INT 1
77290: DEC
77291: ST_TO_ADDR
77292: LD_VAR 0 3
77296: PUSH
77297: FOR_TO
77298: IFFALSE 77401
// begin hc_class = class_apeman ;
77300: LD_ADDR_OWVAR 28
77304: PUSH
77305: LD_INT 12
77307: ST_TO_ADDR
// hc_gallery =  ;
77308: LD_ADDR_OWVAR 33
77312: PUSH
77313: LD_STRING 
77315: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77316: LD_ADDR_OWVAR 35
77320: PUSH
77321: LD_INT 2
77323: NEG
77324: PPUSH
77325: LD_INT 2
77327: PPUSH
77328: CALL_OW 12
77332: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77333: LD_ADDR_OWVAR 31
77337: PUSH
77338: LD_INT 1
77340: PPUSH
77341: LD_INT 3
77343: PPUSH
77344: CALL_OW 12
77348: PUSH
77349: LD_INT 1
77351: PPUSH
77352: LD_INT 3
77354: PPUSH
77355: CALL_OW 12
77359: PUSH
77360: LD_INT 0
77362: PUSH
77363: LD_INT 0
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: LIST
77370: LIST
77371: ST_TO_ADDR
// animal := CreateHuman ;
77372: LD_ADDR_VAR 0 12
77376: PUSH
77377: CALL_OW 44
77381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77382: LD_VAR 0 12
77386: PPUSH
77387: LD_VAR 0 8
77391: PPUSH
77392: LD_INT 0
77394: PPUSH
77395: CALL 79188 0 3
// end ;
77399: GO 77297
77401: POP
77402: POP
// if enchidnas then
77403: LD_VAR 0 4
77407: IFFALSE 77474
// for i = 1 to enchidnas do
77409: LD_ADDR_VAR 0 11
77413: PUSH
77414: DOUBLE
77415: LD_INT 1
77417: DEC
77418: ST_TO_ADDR
77419: LD_VAR 0 4
77423: PUSH
77424: FOR_TO
77425: IFFALSE 77472
// begin hc_class = 13 ;
77427: LD_ADDR_OWVAR 28
77431: PUSH
77432: LD_INT 13
77434: ST_TO_ADDR
// hc_gallery =  ;
77435: LD_ADDR_OWVAR 33
77439: PUSH
77440: LD_STRING 
77442: ST_TO_ADDR
// animal := CreateHuman ;
77443: LD_ADDR_VAR 0 12
77447: PUSH
77448: CALL_OW 44
77452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77453: LD_VAR 0 12
77457: PPUSH
77458: LD_VAR 0 8
77462: PPUSH
77463: LD_INT 0
77465: PPUSH
77466: CALL 79188 0 3
// end ;
77470: GO 77424
77472: POP
77473: POP
// if fishes then
77474: LD_VAR 0 7
77478: IFFALSE 77545
// for i = 1 to fishes do
77480: LD_ADDR_VAR 0 11
77484: PUSH
77485: DOUBLE
77486: LD_INT 1
77488: DEC
77489: ST_TO_ADDR
77490: LD_VAR 0 7
77494: PUSH
77495: FOR_TO
77496: IFFALSE 77543
// begin hc_class = 20 ;
77498: LD_ADDR_OWVAR 28
77502: PUSH
77503: LD_INT 20
77505: ST_TO_ADDR
// hc_gallery =  ;
77506: LD_ADDR_OWVAR 33
77510: PUSH
77511: LD_STRING 
77513: ST_TO_ADDR
// animal := CreateHuman ;
77514: LD_ADDR_VAR 0 12
77518: PUSH
77519: CALL_OW 44
77523: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77524: LD_VAR 0 12
77528: PPUSH
77529: LD_VAR 0 9
77533: PPUSH
77534: LD_INT 0
77536: PPUSH
77537: CALL 79188 0 3
// end ;
77541: GO 77495
77543: POP
77544: POP
// end ;
77545: LD_VAR 0 10
77549: RET
// export function WantHeal ( sci , unit ) ; begin
77550: LD_INT 0
77552: PPUSH
// if GetTaskList ( sci ) > 0 then
77553: LD_VAR 0 1
77557: PPUSH
77558: CALL_OW 437
77562: PUSH
77563: LD_INT 0
77565: GREATER
77566: IFFALSE 77638
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77568: LD_VAR 0 1
77572: PPUSH
77573: CALL_OW 437
77577: PUSH
77578: LD_INT 1
77580: ARRAY
77581: PUSH
77582: LD_INT 1
77584: ARRAY
77585: PUSH
77586: LD_STRING l
77588: EQUAL
77589: IFFALSE 77616
77591: PUSH
77592: LD_VAR 0 1
77596: PPUSH
77597: CALL_OW 437
77601: PUSH
77602: LD_INT 1
77604: ARRAY
77605: PUSH
77606: LD_INT 4
77608: ARRAY
77609: PUSH
77610: LD_VAR 0 2
77614: EQUAL
77615: AND
77616: IFFALSE 77628
// result := true else
77618: LD_ADDR_VAR 0 3
77622: PUSH
77623: LD_INT 1
77625: ST_TO_ADDR
77626: GO 77636
// result := false ;
77628: LD_ADDR_VAR 0 3
77632: PUSH
77633: LD_INT 0
77635: ST_TO_ADDR
// end else
77636: GO 77646
// result := false ;
77638: LD_ADDR_VAR 0 3
77642: PUSH
77643: LD_INT 0
77645: ST_TO_ADDR
// end ;
77646: LD_VAR 0 3
77650: RET
// export function HealTarget ( sci ) ; begin
77651: LD_INT 0
77653: PPUSH
// if not sci then
77654: LD_VAR 0 1
77658: NOT
77659: IFFALSE 77663
// exit ;
77661: GO 77728
// result := 0 ;
77663: LD_ADDR_VAR 0 2
77667: PUSH
77668: LD_INT 0
77670: ST_TO_ADDR
// if GetTaskList ( sci ) then
77671: LD_VAR 0 1
77675: PPUSH
77676: CALL_OW 437
77680: IFFALSE 77728
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77682: LD_VAR 0 1
77686: PPUSH
77687: CALL_OW 437
77691: PUSH
77692: LD_INT 1
77694: ARRAY
77695: PUSH
77696: LD_INT 1
77698: ARRAY
77699: PUSH
77700: LD_STRING l
77702: EQUAL
77703: IFFALSE 77728
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77705: LD_ADDR_VAR 0 2
77709: PUSH
77710: LD_VAR 0 1
77714: PPUSH
77715: CALL_OW 437
77719: PUSH
77720: LD_INT 1
77722: ARRAY
77723: PUSH
77724: LD_INT 4
77726: ARRAY
77727: ST_TO_ADDR
// end ;
77728: LD_VAR 0 2
77732: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77733: LD_INT 0
77735: PPUSH
77736: PPUSH
77737: PPUSH
77738: PPUSH
// if not base_units then
77739: LD_VAR 0 1
77743: NOT
77744: IFFALSE 77748
// exit ;
77746: GO 77835
// result := false ;
77748: LD_ADDR_VAR 0 2
77752: PUSH
77753: LD_INT 0
77755: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77756: LD_ADDR_VAR 0 5
77760: PUSH
77761: LD_VAR 0 1
77765: PPUSH
77766: LD_INT 21
77768: PUSH
77769: LD_INT 3
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: PPUSH
77776: CALL_OW 72
77780: ST_TO_ADDR
// if not tmp then
77781: LD_VAR 0 5
77785: NOT
77786: IFFALSE 77790
// exit ;
77788: GO 77835
// for i in tmp do
77790: LD_ADDR_VAR 0 3
77794: PUSH
77795: LD_VAR 0 5
77799: PUSH
77800: FOR_IN
77801: IFFALSE 77833
// begin result := EnemyInRange ( i , 22 ) ;
77803: LD_ADDR_VAR 0 2
77807: PUSH
77808: LD_VAR 0 3
77812: PPUSH
77813: LD_INT 22
77815: PPUSH
77816: CALL 75260 0 2
77820: ST_TO_ADDR
// if result then
77821: LD_VAR 0 2
77825: IFFALSE 77831
// exit ;
77827: POP
77828: POP
77829: GO 77835
// end ;
77831: GO 77800
77833: POP
77834: POP
// end ;
77835: LD_VAR 0 2
77839: RET
// export function FilterByTag ( units , tag ) ; begin
77840: LD_INT 0
77842: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77843: LD_ADDR_VAR 0 3
77847: PUSH
77848: LD_VAR 0 1
77852: PPUSH
77853: LD_INT 120
77855: PUSH
77856: LD_VAR 0 2
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: PPUSH
77865: CALL_OW 72
77869: ST_TO_ADDR
// end ;
77870: LD_VAR 0 3
77874: RET
// export function IsDriver ( un ) ; begin
77875: LD_INT 0
77877: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77878: LD_ADDR_VAR 0 2
77882: PUSH
77883: LD_VAR 0 1
77887: PUSH
77888: LD_INT 55
77890: PUSH
77891: EMPTY
77892: LIST
77893: PPUSH
77894: CALL_OW 69
77898: IN
77899: ST_TO_ADDR
// end ;
77900: LD_VAR 0 2
77904: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77905: LD_INT 0
77907: PPUSH
77908: PPUSH
// list := [ ] ;
77909: LD_ADDR_VAR 0 5
77913: PUSH
77914: EMPTY
77915: ST_TO_ADDR
// case d of 0 :
77916: LD_VAR 0 3
77920: PUSH
77921: LD_INT 0
77923: DOUBLE
77924: EQUAL
77925: IFTRUE 77929
77927: GO 78062
77929: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77930: LD_ADDR_VAR 0 5
77934: PUSH
77935: LD_VAR 0 1
77939: PUSH
77940: LD_INT 4
77942: MINUS
77943: PUSH
77944: LD_VAR 0 2
77948: PUSH
77949: LD_INT 4
77951: MINUS
77952: PUSH
77953: LD_INT 2
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: LIST
77960: PUSH
77961: LD_VAR 0 1
77965: PUSH
77966: LD_INT 3
77968: MINUS
77969: PUSH
77970: LD_VAR 0 2
77974: PUSH
77975: LD_INT 1
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: LIST
77982: PUSH
77983: LD_VAR 0 1
77987: PUSH
77988: LD_INT 4
77990: PLUS
77991: PUSH
77992: LD_VAR 0 2
77996: PUSH
77997: LD_INT 4
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: LIST
78004: PUSH
78005: LD_VAR 0 1
78009: PUSH
78010: LD_INT 3
78012: PLUS
78013: PUSH
78014: LD_VAR 0 2
78018: PUSH
78019: LD_INT 3
78021: PLUS
78022: PUSH
78023: LD_INT 5
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: LIST
78030: PUSH
78031: LD_VAR 0 1
78035: PUSH
78036: LD_VAR 0 2
78040: PUSH
78041: LD_INT 4
78043: PLUS
78044: PUSH
78045: LD_INT 0
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: LIST
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: ST_TO_ADDR
// end ; 1 :
78060: GO 78760
78062: LD_INT 1
78064: DOUBLE
78065: EQUAL
78066: IFTRUE 78070
78068: GO 78203
78070: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78071: LD_ADDR_VAR 0 5
78075: PUSH
78076: LD_VAR 0 1
78080: PUSH
78081: LD_VAR 0 2
78085: PUSH
78086: LD_INT 4
78088: MINUS
78089: PUSH
78090: LD_INT 3
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: LIST
78097: PUSH
78098: LD_VAR 0 1
78102: PUSH
78103: LD_INT 3
78105: MINUS
78106: PUSH
78107: LD_VAR 0 2
78111: PUSH
78112: LD_INT 3
78114: MINUS
78115: PUSH
78116: LD_INT 2
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: LIST
78123: PUSH
78124: LD_VAR 0 1
78128: PUSH
78129: LD_INT 4
78131: MINUS
78132: PUSH
78133: LD_VAR 0 2
78137: PUSH
78138: LD_INT 1
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: LIST
78145: PUSH
78146: LD_VAR 0 1
78150: PUSH
78151: LD_VAR 0 2
78155: PUSH
78156: LD_INT 3
78158: PLUS
78159: PUSH
78160: LD_INT 0
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: LIST
78167: PUSH
78168: LD_VAR 0 1
78172: PUSH
78173: LD_INT 4
78175: PLUS
78176: PUSH
78177: LD_VAR 0 2
78181: PUSH
78182: LD_INT 4
78184: PLUS
78185: PUSH
78186: LD_INT 5
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: LIST
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: ST_TO_ADDR
// end ; 2 :
78201: GO 78760
78203: LD_INT 2
78205: DOUBLE
78206: EQUAL
78207: IFTRUE 78211
78209: GO 78340
78211: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78212: LD_ADDR_VAR 0 5
78216: PUSH
78217: LD_VAR 0 1
78221: PUSH
78222: LD_VAR 0 2
78226: PUSH
78227: LD_INT 3
78229: MINUS
78230: PUSH
78231: LD_INT 3
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: LIST
78238: PUSH
78239: LD_VAR 0 1
78243: PUSH
78244: LD_INT 4
78246: PLUS
78247: PUSH
78248: LD_VAR 0 2
78252: PUSH
78253: LD_INT 4
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: LIST
78260: PUSH
78261: LD_VAR 0 1
78265: PUSH
78266: LD_VAR 0 2
78270: PUSH
78271: LD_INT 4
78273: PLUS
78274: PUSH
78275: LD_INT 0
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: LIST
78282: PUSH
78283: LD_VAR 0 1
78287: PUSH
78288: LD_INT 3
78290: MINUS
78291: PUSH
78292: LD_VAR 0 2
78296: PUSH
78297: LD_INT 1
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: LIST
78304: PUSH
78305: LD_VAR 0 1
78309: PUSH
78310: LD_INT 4
78312: MINUS
78313: PUSH
78314: LD_VAR 0 2
78318: PUSH
78319: LD_INT 4
78321: MINUS
78322: PUSH
78323: LD_INT 2
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: LIST
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: ST_TO_ADDR
// end ; 3 :
78338: GO 78760
78340: LD_INT 3
78342: DOUBLE
78343: EQUAL
78344: IFTRUE 78348
78346: GO 78481
78348: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78349: LD_ADDR_VAR 0 5
78353: PUSH
78354: LD_VAR 0 1
78358: PUSH
78359: LD_INT 3
78361: PLUS
78362: PUSH
78363: LD_VAR 0 2
78367: PUSH
78368: LD_INT 4
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: LIST
78375: PUSH
78376: LD_VAR 0 1
78380: PUSH
78381: LD_INT 4
78383: PLUS
78384: PUSH
78385: LD_VAR 0 2
78389: PUSH
78390: LD_INT 4
78392: PLUS
78393: PUSH
78394: LD_INT 5
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: LIST
78401: PUSH
78402: LD_VAR 0 1
78406: PUSH
78407: LD_INT 4
78409: MINUS
78410: PUSH
78411: LD_VAR 0 2
78415: PUSH
78416: LD_INT 1
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: LIST
78423: PUSH
78424: LD_VAR 0 1
78428: PUSH
78429: LD_VAR 0 2
78433: PUSH
78434: LD_INT 4
78436: MINUS
78437: PUSH
78438: LD_INT 3
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: LIST
78445: PUSH
78446: LD_VAR 0 1
78450: PUSH
78451: LD_INT 3
78453: MINUS
78454: PUSH
78455: LD_VAR 0 2
78459: PUSH
78460: LD_INT 3
78462: MINUS
78463: PUSH
78464: LD_INT 2
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: LIST
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: ST_TO_ADDR
// end ; 4 :
78479: GO 78760
78481: LD_INT 4
78483: DOUBLE
78484: EQUAL
78485: IFTRUE 78489
78487: GO 78622
78489: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78490: LD_ADDR_VAR 0 5
78494: PUSH
78495: LD_VAR 0 1
78499: PUSH
78500: LD_VAR 0 2
78504: PUSH
78505: LD_INT 4
78507: PLUS
78508: PUSH
78509: LD_INT 0
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: LIST
78516: PUSH
78517: LD_VAR 0 1
78521: PUSH
78522: LD_INT 3
78524: PLUS
78525: PUSH
78526: LD_VAR 0 2
78530: PUSH
78531: LD_INT 3
78533: PLUS
78534: PUSH
78535: LD_INT 5
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: LIST
78542: PUSH
78543: LD_VAR 0 1
78547: PUSH
78548: LD_INT 4
78550: PLUS
78551: PUSH
78552: LD_VAR 0 2
78556: PUSH
78557: LD_INT 4
78559: PUSH
78560: EMPTY
78561: LIST
78562: LIST
78563: LIST
78564: PUSH
78565: LD_VAR 0 1
78569: PUSH
78570: LD_VAR 0 2
78574: PUSH
78575: LD_INT 3
78577: MINUS
78578: PUSH
78579: LD_INT 3
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: LIST
78586: PUSH
78587: LD_VAR 0 1
78591: PUSH
78592: LD_INT 4
78594: MINUS
78595: PUSH
78596: LD_VAR 0 2
78600: PUSH
78601: LD_INT 4
78603: MINUS
78604: PUSH
78605: LD_INT 2
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: LIST
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: ST_TO_ADDR
// end ; 5 :
78620: GO 78760
78622: LD_INT 5
78624: DOUBLE
78625: EQUAL
78626: IFTRUE 78630
78628: GO 78759
78630: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78631: LD_ADDR_VAR 0 5
78635: PUSH
78636: LD_VAR 0 1
78640: PUSH
78641: LD_INT 4
78643: MINUS
78644: PUSH
78645: LD_VAR 0 2
78649: PUSH
78650: LD_INT 1
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: LIST
78657: PUSH
78658: LD_VAR 0 1
78662: PUSH
78663: LD_VAR 0 2
78667: PUSH
78668: LD_INT 4
78670: MINUS
78671: PUSH
78672: LD_INT 3
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: LIST
78679: PUSH
78680: LD_VAR 0 1
78684: PUSH
78685: LD_INT 4
78687: PLUS
78688: PUSH
78689: LD_VAR 0 2
78693: PUSH
78694: LD_INT 4
78696: PLUS
78697: PUSH
78698: LD_INT 5
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: LIST
78705: PUSH
78706: LD_VAR 0 1
78710: PUSH
78711: LD_INT 3
78713: PLUS
78714: PUSH
78715: LD_VAR 0 2
78719: PUSH
78720: LD_INT 4
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: LIST
78727: PUSH
78728: LD_VAR 0 1
78732: PUSH
78733: LD_VAR 0 2
78737: PUSH
78738: LD_INT 3
78740: PLUS
78741: PUSH
78742: LD_INT 0
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: LIST
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: ST_TO_ADDR
// end ; end ;
78757: GO 78760
78759: POP
// result := list ;
78760: LD_ADDR_VAR 0 4
78764: PUSH
78765: LD_VAR 0 5
78769: ST_TO_ADDR
// end ;
78770: LD_VAR 0 4
78774: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78775: LD_INT 0
78777: PPUSH
78778: PPUSH
78779: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78780: LD_VAR 0 1
78784: NOT
78785: IFTRUE 78813
78787: PUSH
78788: LD_VAR 0 2
78792: PUSH
78793: LD_INT 1
78795: PUSH
78796: LD_INT 2
78798: PUSH
78799: LD_INT 3
78801: PUSH
78802: LD_INT 4
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: IN
78811: NOT
78812: OR
78813: IFFALSE 78817
// exit ;
78815: GO 78900
// tmp := [ ] ;
78817: LD_ADDR_VAR 0 5
78821: PUSH
78822: EMPTY
78823: ST_TO_ADDR
// for i in units do
78824: LD_ADDR_VAR 0 4
78828: PUSH
78829: LD_VAR 0 1
78833: PUSH
78834: FOR_IN
78835: IFFALSE 78869
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78837: LD_ADDR_VAR 0 5
78841: PUSH
78842: LD_VAR 0 5
78846: PPUSH
78847: LD_VAR 0 4
78851: PPUSH
78852: LD_VAR 0 2
78856: PPUSH
78857: CALL_OW 259
78861: PPUSH
78862: CALL 80295 0 2
78866: ST_TO_ADDR
78867: GO 78834
78869: POP
78870: POP
// if not tmp then
78871: LD_VAR 0 5
78875: NOT
78876: IFFALSE 78880
// exit ;
78878: GO 78900
// result := SortListByListDesc ( units , tmp ) ;
78880: LD_ADDR_VAR 0 3
78884: PUSH
78885: LD_VAR 0 1
78889: PPUSH
78890: LD_VAR 0 5
78894: PPUSH
78895: CALL_OW 77
78899: ST_TO_ADDR
// end ;
78900: LD_VAR 0 3
78904: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78905: LD_INT 0
78907: PPUSH
78908: PPUSH
78909: PPUSH
// result := false ;
78910: LD_ADDR_VAR 0 3
78914: PUSH
78915: LD_INT 0
78917: ST_TO_ADDR
// if not building then
78918: LD_VAR 0 2
78922: NOT
78923: IFFALSE 78927
// exit ;
78925: GO 79071
// x := GetX ( building ) ;
78927: LD_ADDR_VAR 0 4
78931: PUSH
78932: LD_VAR 0 2
78936: PPUSH
78937: CALL_OW 250
78941: ST_TO_ADDR
// y := GetY ( building ) ;
78942: LD_ADDR_VAR 0 5
78946: PUSH
78947: LD_VAR 0 2
78951: PPUSH
78952: CALL_OW 251
78956: ST_TO_ADDR
// if not x or not y then
78957: LD_VAR 0 4
78961: NOT
78962: IFTRUE 78971
78964: PUSH
78965: LD_VAR 0 5
78969: NOT
78970: OR
78971: IFFALSE 78975
// exit ;
78973: GO 79071
// if GetTaskList ( unit ) then
78975: LD_VAR 0 1
78979: PPUSH
78980: CALL_OW 437
78984: IFFALSE 79071
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78986: LD_STRING e
78988: PUSH
78989: LD_VAR 0 1
78993: PPUSH
78994: CALL_OW 437
78998: PUSH
78999: LD_INT 1
79001: ARRAY
79002: PUSH
79003: LD_INT 1
79005: ARRAY
79006: EQUAL
79007: IFFALSE 79034
79009: PUSH
79010: LD_VAR 0 4
79014: PUSH
79015: LD_VAR 0 1
79019: PPUSH
79020: CALL_OW 437
79024: PUSH
79025: LD_INT 1
79027: ARRAY
79028: PUSH
79029: LD_INT 2
79031: ARRAY
79032: EQUAL
79033: AND
79034: IFFALSE 79061
79036: PUSH
79037: LD_VAR 0 5
79041: PUSH
79042: LD_VAR 0 1
79046: PPUSH
79047: CALL_OW 437
79051: PUSH
79052: LD_INT 1
79054: ARRAY
79055: PUSH
79056: LD_INT 3
79058: ARRAY
79059: EQUAL
79060: AND
79061: IFFALSE 79071
// result := true end ;
79063: LD_ADDR_VAR 0 3
79067: PUSH
79068: LD_INT 1
79070: ST_TO_ADDR
// end ;
79071: LD_VAR 0 3
79075: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79076: LD_INT 0
79078: PPUSH
// result := false ;
79079: LD_ADDR_VAR 0 4
79083: PUSH
79084: LD_INT 0
79086: ST_TO_ADDR
// if GetTaskList ( unit ) then
79087: LD_VAR 0 1
79091: PPUSH
79092: CALL_OW 437
79096: IFFALSE 79183
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79098: LD_STRING M
79100: PUSH
79101: LD_VAR 0 1
79105: PPUSH
79106: CALL_OW 437
79110: PUSH
79111: LD_INT 1
79113: ARRAY
79114: PUSH
79115: LD_INT 1
79117: ARRAY
79118: EQUAL
79119: IFFALSE 79146
79121: PUSH
79122: LD_VAR 0 2
79126: PUSH
79127: LD_VAR 0 1
79131: PPUSH
79132: CALL_OW 437
79136: PUSH
79137: LD_INT 1
79139: ARRAY
79140: PUSH
79141: LD_INT 2
79143: ARRAY
79144: EQUAL
79145: AND
79146: IFFALSE 79173
79148: PUSH
79149: LD_VAR 0 3
79153: PUSH
79154: LD_VAR 0 1
79158: PPUSH
79159: CALL_OW 437
79163: PUSH
79164: LD_INT 1
79166: ARRAY
79167: PUSH
79168: LD_INT 3
79170: ARRAY
79171: EQUAL
79172: AND
79173: IFFALSE 79183
// result := true ;
79175: LD_ADDR_VAR 0 4
79179: PUSH
79180: LD_INT 1
79182: ST_TO_ADDR
// end ; end ;
79183: LD_VAR 0 4
79187: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79188: LD_INT 0
79190: PPUSH
79191: PPUSH
79192: PPUSH
79193: PPUSH
// if not unit or not area then
79194: LD_VAR 0 1
79198: NOT
79199: IFTRUE 79208
79201: PUSH
79202: LD_VAR 0 2
79206: NOT
79207: OR
79208: IFFALSE 79212
// exit ;
79210: GO 79388
// tmp := AreaToList ( area , i ) ;
79212: LD_ADDR_VAR 0 6
79216: PUSH
79217: LD_VAR 0 2
79221: PPUSH
79222: LD_VAR 0 5
79226: PPUSH
79227: CALL_OW 517
79231: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79232: LD_ADDR_VAR 0 5
79236: PUSH
79237: DOUBLE
79238: LD_INT 1
79240: DEC
79241: ST_TO_ADDR
79242: LD_VAR 0 6
79246: PUSH
79247: LD_INT 1
79249: ARRAY
79250: PUSH
79251: FOR_TO
79252: IFFALSE 79386
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79254: LD_ADDR_VAR 0 7
79258: PUSH
79259: LD_VAR 0 6
79263: PUSH
79264: LD_INT 1
79266: ARRAY
79267: PUSH
79268: LD_VAR 0 5
79272: ARRAY
79273: PUSH
79274: LD_VAR 0 6
79278: PUSH
79279: LD_INT 2
79281: ARRAY
79282: PUSH
79283: LD_VAR 0 5
79287: ARRAY
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79293: LD_INT 92
79295: PUSH
79296: LD_VAR 0 7
79300: PUSH
79301: LD_INT 1
79303: ARRAY
79304: PUSH
79305: LD_VAR 0 7
79309: PUSH
79310: LD_INT 2
79312: ARRAY
79313: PUSH
79314: LD_INT 2
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: PPUSH
79323: CALL_OW 69
79327: PUSH
79328: LD_INT 0
79330: EQUAL
79331: IFFALSE 79384
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79333: LD_VAR 0 1
79337: PPUSH
79338: LD_VAR 0 7
79342: PUSH
79343: LD_INT 1
79345: ARRAY
79346: PPUSH
79347: LD_VAR 0 7
79351: PUSH
79352: LD_INT 2
79354: ARRAY
79355: PPUSH
79356: LD_VAR 0 3
79360: PPUSH
79361: CALL_OW 48
// result := IsPlaced ( unit ) ;
79365: LD_ADDR_VAR 0 4
79369: PUSH
79370: LD_VAR 0 1
79374: PPUSH
79375: CALL_OW 305
79379: ST_TO_ADDR
// exit ;
79380: POP
79381: POP
79382: GO 79388
// end ; end ;
79384: GO 79251
79386: POP
79387: POP
// end ;
79388: LD_VAR 0 4
79392: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79393: LD_INT 0
79395: PPUSH
79396: PPUSH
79397: PPUSH
// if not side or side > 8 then
79398: LD_VAR 0 1
79402: NOT
79403: IFTRUE 79415
79405: PUSH
79406: LD_VAR 0 1
79410: PUSH
79411: LD_INT 8
79413: GREATER
79414: OR
79415: IFFALSE 79419
// exit ;
79417: GO 79606
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79419: LD_ADDR_VAR 0 4
79423: PUSH
79424: LD_INT 22
79426: PUSH
79427: LD_VAR 0 1
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: PUSH
79436: LD_INT 21
79438: PUSH
79439: LD_INT 3
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PPUSH
79450: CALL_OW 69
79454: ST_TO_ADDR
// if not tmp then
79455: LD_VAR 0 4
79459: NOT
79460: IFFALSE 79464
// exit ;
79462: GO 79606
// enable_addtolog := true ;
79464: LD_ADDR_OWVAR 81
79468: PUSH
79469: LD_INT 1
79471: ST_TO_ADDR
// AddToLog ( [ ) ;
79472: LD_STRING [
79474: PPUSH
79475: CALL_OW 561
// for i in tmp do
79479: LD_ADDR_VAR 0 3
79483: PUSH
79484: LD_VAR 0 4
79488: PUSH
79489: FOR_IN
79490: IFFALSE 79597
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79492: LD_STRING [
79494: PUSH
79495: LD_VAR 0 3
79499: PPUSH
79500: CALL_OW 266
79504: STR
79505: PUSH
79506: LD_STRING , 
79508: STR
79509: PUSH
79510: LD_VAR 0 3
79514: PPUSH
79515: CALL_OW 250
79519: STR
79520: PUSH
79521: LD_STRING , 
79523: STR
79524: PUSH
79525: LD_VAR 0 3
79529: PPUSH
79530: CALL_OW 251
79534: STR
79535: PUSH
79536: LD_STRING , 
79538: STR
79539: PUSH
79540: LD_VAR 0 3
79544: PPUSH
79545: CALL_OW 254
79549: STR
79550: PUSH
79551: LD_STRING , 
79553: STR
79554: PUSH
79555: LD_VAR 0 3
79559: PPUSH
79560: LD_INT 1
79562: PPUSH
79563: CALL_OW 268
79567: STR
79568: PUSH
79569: LD_STRING , 
79571: STR
79572: PUSH
79573: LD_VAR 0 3
79577: PPUSH
79578: LD_INT 2
79580: PPUSH
79581: CALL_OW 268
79585: STR
79586: PUSH
79587: LD_STRING ],
79589: STR
79590: PPUSH
79591: CALL_OW 561
// end ;
79595: GO 79489
79597: POP
79598: POP
// AddToLog ( ]; ) ;
79599: LD_STRING ];
79601: PPUSH
79602: CALL_OW 561
// end ;
79606: LD_VAR 0 2
79610: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79611: LD_INT 0
79613: PPUSH
79614: PPUSH
79615: PPUSH
79616: PPUSH
79617: PPUSH
// if not area or not rate or not max then
79618: LD_VAR 0 1
79622: NOT
79623: IFTRUE 79632
79625: PUSH
79626: LD_VAR 0 2
79630: NOT
79631: OR
79632: IFTRUE 79641
79634: PUSH
79635: LD_VAR 0 4
79639: NOT
79640: OR
79641: IFFALSE 79645
// exit ;
79643: GO 79834
// while 1 do
79645: LD_INT 1
79647: IFFALSE 79834
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79649: LD_ADDR_VAR 0 9
79653: PUSH
79654: LD_VAR 0 1
79658: PPUSH
79659: LD_INT 1
79661: PPUSH
79662: CALL_OW 287
79666: PUSH
79667: LD_INT 10
79669: MUL
79670: ST_TO_ADDR
// r := rate / 10 ;
79671: LD_ADDR_VAR 0 7
79675: PUSH
79676: LD_VAR 0 2
79680: PUSH
79681: LD_INT 10
79683: DIVREAL
79684: ST_TO_ADDR
// time := 1 1$00 ;
79685: LD_ADDR_VAR 0 8
79689: PUSH
79690: LD_INT 2100
79692: ST_TO_ADDR
// if amount < min then
79693: LD_VAR 0 9
79697: PUSH
79698: LD_VAR 0 3
79702: LESS
79703: IFFALSE 79721
// r := r * 2 else
79705: LD_ADDR_VAR 0 7
79709: PUSH
79710: LD_VAR 0 7
79714: PUSH
79715: LD_INT 2
79717: MUL
79718: ST_TO_ADDR
79719: GO 79747
// if amount > max then
79721: LD_VAR 0 9
79725: PUSH
79726: LD_VAR 0 4
79730: GREATER
79731: IFFALSE 79747
// r := r / 2 ;
79733: LD_ADDR_VAR 0 7
79737: PUSH
79738: LD_VAR 0 7
79742: PUSH
79743: LD_INT 2
79745: DIVREAL
79746: ST_TO_ADDR
// time := time / r ;
79747: LD_ADDR_VAR 0 8
79751: PUSH
79752: LD_VAR 0 8
79756: PUSH
79757: LD_VAR 0 7
79761: DIVREAL
79762: ST_TO_ADDR
// if time < 0 then
79763: LD_VAR 0 8
79767: PUSH
79768: LD_INT 0
79770: LESS
79771: IFFALSE 79788
// time := time * - 1 ;
79773: LD_ADDR_VAR 0 8
79777: PUSH
79778: LD_VAR 0 8
79782: PUSH
79783: LD_INT 1
79785: NEG
79786: MUL
79787: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79788: LD_VAR 0 8
79792: PUSH
79793: LD_INT 35
79795: PPUSH
79796: LD_INT 875
79798: PPUSH
79799: CALL_OW 12
79803: PLUS
79804: PPUSH
79805: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79809: LD_INT 1
79811: PPUSH
79812: LD_INT 5
79814: PPUSH
79815: CALL_OW 12
79819: PPUSH
79820: LD_VAR 0 1
79824: PPUSH
79825: LD_INT 1
79827: PPUSH
79828: CALL_OW 55
// end ;
79832: GO 79645
// end ;
79834: LD_VAR 0 5
79838: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79839: LD_INT 0
79841: PPUSH
79842: PPUSH
79843: PPUSH
79844: PPUSH
79845: PPUSH
79846: PPUSH
79847: PPUSH
79848: PPUSH
// if not turrets or not factories then
79849: LD_VAR 0 1
79853: NOT
79854: IFTRUE 79863
79856: PUSH
79857: LD_VAR 0 2
79861: NOT
79862: OR
79863: IFFALSE 79867
// exit ;
79865: GO 80174
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79867: LD_ADDR_VAR 0 10
79871: PUSH
79872: LD_INT 5
79874: PUSH
79875: LD_INT 6
79877: PUSH
79878: EMPTY
79879: LIST
79880: LIST
79881: PUSH
79882: LD_INT 2
79884: PUSH
79885: LD_INT 4
79887: PUSH
79888: EMPTY
79889: LIST
79890: LIST
79891: PUSH
79892: LD_INT 3
79894: PUSH
79895: LD_INT 5
79897: PUSH
79898: EMPTY
79899: LIST
79900: LIST
79901: PUSH
79902: EMPTY
79903: LIST
79904: LIST
79905: LIST
79906: PUSH
79907: LD_INT 24
79909: PUSH
79910: LD_INT 25
79912: PUSH
79913: EMPTY
79914: LIST
79915: LIST
79916: PUSH
79917: LD_INT 23
79919: PUSH
79920: LD_INT 27
79922: PUSH
79923: EMPTY
79924: LIST
79925: LIST
79926: PUSH
79927: EMPTY
79928: LIST
79929: LIST
79930: PUSH
79931: LD_INT 42
79933: PUSH
79934: LD_INT 43
79936: PUSH
79937: EMPTY
79938: LIST
79939: LIST
79940: PUSH
79941: LD_INT 44
79943: PUSH
79944: LD_INT 46
79946: PUSH
79947: EMPTY
79948: LIST
79949: LIST
79950: PUSH
79951: LD_INT 45
79953: PUSH
79954: LD_INT 47
79956: PUSH
79957: EMPTY
79958: LIST
79959: LIST
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: LIST
79965: PUSH
79966: EMPTY
79967: LIST
79968: LIST
79969: LIST
79970: ST_TO_ADDR
// result := [ ] ;
79971: LD_ADDR_VAR 0 3
79975: PUSH
79976: EMPTY
79977: ST_TO_ADDR
// for i in turrets do
79978: LD_ADDR_VAR 0 4
79982: PUSH
79983: LD_VAR 0 1
79987: PUSH
79988: FOR_IN
79989: IFFALSE 80172
// begin nat := GetNation ( i ) ;
79991: LD_ADDR_VAR 0 7
79995: PUSH
79996: LD_VAR 0 4
80000: PPUSH
80001: CALL_OW 248
80005: ST_TO_ADDR
// weapon := 0 ;
80006: LD_ADDR_VAR 0 8
80010: PUSH
80011: LD_INT 0
80013: ST_TO_ADDR
// if not nat then
80014: LD_VAR 0 7
80018: NOT
80019: IFFALSE 80023
// continue ;
80021: GO 79988
// for j in list [ nat ] do
80023: LD_ADDR_VAR 0 5
80027: PUSH
80028: LD_VAR 0 10
80032: PUSH
80033: LD_VAR 0 7
80037: ARRAY
80038: PUSH
80039: FOR_IN
80040: IFFALSE 80081
// if GetBWeapon ( i ) = j [ 1 ] then
80042: LD_VAR 0 4
80046: PPUSH
80047: CALL_OW 269
80051: PUSH
80052: LD_VAR 0 5
80056: PUSH
80057: LD_INT 1
80059: ARRAY
80060: EQUAL
80061: IFFALSE 80079
// begin weapon := j [ 2 ] ;
80063: LD_ADDR_VAR 0 8
80067: PUSH
80068: LD_VAR 0 5
80072: PUSH
80073: LD_INT 2
80075: ARRAY
80076: ST_TO_ADDR
// break ;
80077: GO 80081
// end ;
80079: GO 80039
80081: POP
80082: POP
// if not weapon then
80083: LD_VAR 0 8
80087: NOT
80088: IFFALSE 80092
// continue ;
80090: GO 79988
// for k in factories do
80092: LD_ADDR_VAR 0 6
80096: PUSH
80097: LD_VAR 0 2
80101: PUSH
80102: FOR_IN
80103: IFFALSE 80168
// begin weapons := AvailableWeaponList ( k ) ;
80105: LD_ADDR_VAR 0 9
80109: PUSH
80110: LD_VAR 0 6
80114: PPUSH
80115: CALL_OW 478
80119: ST_TO_ADDR
// if not weapons then
80120: LD_VAR 0 9
80124: NOT
80125: IFFALSE 80129
// continue ;
80127: GO 80102
// if weapon in weapons then
80129: LD_VAR 0 8
80133: PUSH
80134: LD_VAR 0 9
80138: IN
80139: IFFALSE 80166
// begin result := [ i , weapon ] ;
80141: LD_ADDR_VAR 0 3
80145: PUSH
80146: LD_VAR 0 4
80150: PUSH
80151: LD_VAR 0 8
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: ST_TO_ADDR
// exit ;
80160: POP
80161: POP
80162: POP
80163: POP
80164: GO 80174
// end ; end ;
80166: GO 80102
80168: POP
80169: POP
// end ;
80170: GO 79988
80172: POP
80173: POP
// end ;
80174: LD_VAR 0 3
80178: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80179: LD_INT 0
80181: PPUSH
// if not side or side > 8 then
80182: LD_VAR 0 3
80186: NOT
80187: IFTRUE 80199
80189: PUSH
80190: LD_VAR 0 3
80194: PUSH
80195: LD_INT 8
80197: GREATER
80198: OR
80199: IFFALSE 80203
// exit ;
80201: GO 80262
// if not range then
80203: LD_VAR 0 4
80207: NOT
80208: IFFALSE 80219
// range := - 12 ;
80210: LD_ADDR_VAR 0 4
80214: PUSH
80215: LD_INT 12
80217: NEG
80218: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80219: LD_VAR 0 1
80223: PPUSH
80224: LD_VAR 0 2
80228: PPUSH
80229: LD_VAR 0 3
80233: PPUSH
80234: LD_VAR 0 4
80238: PPUSH
80239: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80243: LD_VAR 0 1
80247: PPUSH
80248: LD_VAR 0 2
80252: PPUSH
80253: LD_VAR 0 3
80257: PPUSH
80258: CALL_OW 331
// end ;
80262: LD_VAR 0 5
80266: RET
// export function Video ( mode ) ; begin
80267: LD_INT 0
80269: PPUSH
// ingame_video = mode ;
80270: LD_ADDR_OWVAR 52
80274: PUSH
80275: LD_VAR 0 1
80279: ST_TO_ADDR
// interface_hidden = mode ;
80280: LD_ADDR_OWVAR 54
80284: PUSH
80285: LD_VAR 0 1
80289: ST_TO_ADDR
// end ;
80290: LD_VAR 0 2
80294: RET
// export function Join ( array , element ) ; begin
80295: LD_INT 0
80297: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80298: LD_ADDR_VAR 0 3
80302: PUSH
80303: LD_VAR 0 1
80307: PPUSH
80308: LD_VAR 0 1
80312: PUSH
80313: LD_INT 1
80315: PLUS
80316: PPUSH
80317: LD_VAR 0 2
80321: PPUSH
80322: CALL_OW 1
80326: ST_TO_ADDR
// end ;
80327: LD_VAR 0 3
80331: RET
// export function JoinUnion ( array , element ) ; begin
80332: LD_INT 0
80334: PPUSH
// result := array union element ;
80335: LD_ADDR_VAR 0 3
80339: PUSH
80340: LD_VAR 0 1
80344: PUSH
80345: LD_VAR 0 2
80349: UNION
80350: ST_TO_ADDR
// end ;
80351: LD_VAR 0 3
80355: RET
// export function GetBehemoths ( side ) ; begin
80356: LD_INT 0
80358: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80359: LD_ADDR_VAR 0 2
80363: PUSH
80364: LD_INT 22
80366: PUSH
80367: LD_VAR 0 1
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PUSH
80376: LD_INT 31
80378: PUSH
80379: LD_INT 25
80381: PUSH
80382: EMPTY
80383: LIST
80384: LIST
80385: PUSH
80386: EMPTY
80387: LIST
80388: LIST
80389: PPUSH
80390: CALL_OW 69
80394: ST_TO_ADDR
// end ;
80395: LD_VAR 0 2
80399: RET
// export function Shuffle ( array ) ; var i , index ; begin
80400: LD_INT 0
80402: PPUSH
80403: PPUSH
80404: PPUSH
// result := [ ] ;
80405: LD_ADDR_VAR 0 2
80409: PUSH
80410: EMPTY
80411: ST_TO_ADDR
// if not array then
80412: LD_VAR 0 1
80416: NOT
80417: IFFALSE 80421
// exit ;
80419: GO 80520
// Randomize ;
80421: CALL_OW 10
// for i = array downto 1 do
80425: LD_ADDR_VAR 0 3
80429: PUSH
80430: DOUBLE
80431: LD_VAR 0 1
80435: INC
80436: ST_TO_ADDR
80437: LD_INT 1
80439: PUSH
80440: FOR_DOWNTO
80441: IFFALSE 80518
// begin index := rand ( 1 , array ) ;
80443: LD_ADDR_VAR 0 4
80447: PUSH
80448: LD_INT 1
80450: PPUSH
80451: LD_VAR 0 1
80455: PPUSH
80456: CALL_OW 12
80460: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80461: LD_ADDR_VAR 0 2
80465: PUSH
80466: LD_VAR 0 2
80470: PPUSH
80471: LD_VAR 0 2
80475: PUSH
80476: LD_INT 1
80478: PLUS
80479: PPUSH
80480: LD_VAR 0 1
80484: PUSH
80485: LD_VAR 0 4
80489: ARRAY
80490: PPUSH
80491: CALL_OW 2
80495: ST_TO_ADDR
// array := Delete ( array , index ) ;
80496: LD_ADDR_VAR 0 1
80500: PUSH
80501: LD_VAR 0 1
80505: PPUSH
80506: LD_VAR 0 4
80510: PPUSH
80511: CALL_OW 3
80515: ST_TO_ADDR
// end ;
80516: GO 80440
80518: POP
80519: POP
// end ;
80520: LD_VAR 0 2
80524: RET
// export function GetBaseMaterials ( base ) ; begin
80525: LD_INT 0
80527: PPUSH
// result := [ 0 , 0 , 0 ] ;
80528: LD_ADDR_VAR 0 2
80532: PUSH
80533: LD_INT 0
80535: PUSH
80536: LD_INT 0
80538: PUSH
80539: LD_INT 0
80541: PUSH
80542: EMPTY
80543: LIST
80544: LIST
80545: LIST
80546: ST_TO_ADDR
// if not base then
80547: LD_VAR 0 1
80551: NOT
80552: IFFALSE 80556
// exit ;
80554: GO 80605
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80556: LD_ADDR_VAR 0 2
80560: PUSH
80561: LD_VAR 0 1
80565: PPUSH
80566: LD_INT 1
80568: PPUSH
80569: CALL_OW 275
80573: PUSH
80574: LD_VAR 0 1
80578: PPUSH
80579: LD_INT 2
80581: PPUSH
80582: CALL_OW 275
80586: PUSH
80587: LD_VAR 0 1
80591: PPUSH
80592: LD_INT 3
80594: PPUSH
80595: CALL_OW 275
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: LIST
80604: ST_TO_ADDR
// end ;
80605: LD_VAR 0 2
80609: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80610: LD_INT 0
80612: PPUSH
80613: PPUSH
// result := array ;
80614: LD_ADDR_VAR 0 3
80618: PUSH
80619: LD_VAR 0 1
80623: ST_TO_ADDR
// if size >= result then
80624: LD_VAR 0 2
80628: PUSH
80629: LD_VAR 0 3
80633: GREATEREQUAL
80634: IFFALSE 80638
// exit ;
80636: GO 80688
// if size then
80638: LD_VAR 0 2
80642: IFFALSE 80688
// for i := array downto size do
80644: LD_ADDR_VAR 0 4
80648: PUSH
80649: DOUBLE
80650: LD_VAR 0 1
80654: INC
80655: ST_TO_ADDR
80656: LD_VAR 0 2
80660: PUSH
80661: FOR_DOWNTO
80662: IFFALSE 80686
// result := Delete ( result , result ) ;
80664: LD_ADDR_VAR 0 3
80668: PUSH
80669: LD_VAR 0 3
80673: PPUSH
80674: LD_VAR 0 3
80678: PPUSH
80679: CALL_OW 3
80683: ST_TO_ADDR
80684: GO 80661
80686: POP
80687: POP
// end ;
80688: LD_VAR 0 3
80692: RET
// export function ComExit ( unit ) ; var tmp ; begin
80693: LD_INT 0
80695: PPUSH
80696: PPUSH
// if not IsInUnit ( unit ) then
80697: LD_VAR 0 1
80701: PPUSH
80702: CALL_OW 310
80706: NOT
80707: IFFALSE 80711
// exit ;
80709: GO 80771
// tmp := IsInUnit ( unit ) ;
80711: LD_ADDR_VAR 0 3
80715: PUSH
80716: LD_VAR 0 1
80720: PPUSH
80721: CALL_OW 310
80725: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80726: LD_VAR 0 3
80730: PPUSH
80731: CALL_OW 247
80735: PUSH
80736: LD_INT 2
80738: EQUAL
80739: IFFALSE 80752
// ComExitVehicle ( unit ) else
80741: LD_VAR 0 1
80745: PPUSH
80746: CALL_OW 121
80750: GO 80761
// ComExitBuilding ( unit ) ;
80752: LD_VAR 0 1
80756: PPUSH
80757: CALL_OW 122
// result := tmp ;
80761: LD_ADDR_VAR 0 2
80765: PUSH
80766: LD_VAR 0 3
80770: ST_TO_ADDR
// end ;
80771: LD_VAR 0 2
80775: RET
// export function ComExitAll ( units ) ; var i ; begin
80776: LD_INT 0
80778: PPUSH
80779: PPUSH
// if not units then
80780: LD_VAR 0 1
80784: NOT
80785: IFFALSE 80789
// exit ;
80787: GO 80815
// for i in units do
80789: LD_ADDR_VAR 0 3
80793: PUSH
80794: LD_VAR 0 1
80798: PUSH
80799: FOR_IN
80800: IFFALSE 80813
// ComExit ( i ) ;
80802: LD_VAR 0 3
80806: PPUSH
80807: CALL 80693 0 1
80811: GO 80799
80813: POP
80814: POP
// end ;
80815: LD_VAR 0 2
80819: RET
// export function ResetHc ; begin
80820: LD_INT 0
80822: PPUSH
// InitHc ;
80823: CALL_OW 19
// hc_importance := 0 ;
80827: LD_ADDR_OWVAR 32
80831: PUSH
80832: LD_INT 0
80834: ST_TO_ADDR
// end ;
80835: LD_VAR 0 1
80839: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80840: LD_INT 0
80842: PPUSH
80843: PPUSH
80844: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80845: LD_ADDR_VAR 0 6
80849: PUSH
80850: LD_VAR 0 1
80854: PUSH
80855: LD_VAR 0 3
80859: PLUS
80860: PUSH
80861: LD_INT 2
80863: DIV
80864: ST_TO_ADDR
// if _x < 0 then
80865: LD_VAR 0 6
80869: PUSH
80870: LD_INT 0
80872: LESS
80873: IFFALSE 80890
// _x := _x * - 1 ;
80875: LD_ADDR_VAR 0 6
80879: PUSH
80880: LD_VAR 0 6
80884: PUSH
80885: LD_INT 1
80887: NEG
80888: MUL
80889: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80890: LD_ADDR_VAR 0 7
80894: PUSH
80895: LD_VAR 0 2
80899: PUSH
80900: LD_VAR 0 4
80904: PLUS
80905: PUSH
80906: LD_INT 2
80908: DIV
80909: ST_TO_ADDR
// if _y < 0 then
80910: LD_VAR 0 7
80914: PUSH
80915: LD_INT 0
80917: LESS
80918: IFFALSE 80935
// _y := _y * - 1 ;
80920: LD_ADDR_VAR 0 7
80924: PUSH
80925: LD_VAR 0 7
80929: PUSH
80930: LD_INT 1
80932: NEG
80933: MUL
80934: ST_TO_ADDR
// result := [ _x , _y ] ;
80935: LD_ADDR_VAR 0 5
80939: PUSH
80940: LD_VAR 0 6
80944: PUSH
80945: LD_VAR 0 7
80949: PUSH
80950: EMPTY
80951: LIST
80952: LIST
80953: ST_TO_ADDR
// end ;
80954: LD_VAR 0 5
80958: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80959: LD_INT 0
80961: PPUSH
80962: PPUSH
80963: PPUSH
80964: PPUSH
// task := GetTaskList ( unit ) ;
80965: LD_ADDR_VAR 0 7
80969: PUSH
80970: LD_VAR 0 1
80974: PPUSH
80975: CALL_OW 437
80979: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80980: LD_VAR 0 7
80984: NOT
80985: IFFALSE 81004
80987: PUSH
80988: LD_VAR 0 1
80992: PPUSH
80993: LD_VAR 0 2
80997: PPUSH
80998: CALL_OW 308
81002: NOT
81003: AND
81004: IFFALSE 81008
// exit ;
81006: GO 81126
// if IsInArea ( unit , area ) then
81008: LD_VAR 0 1
81012: PPUSH
81013: LD_VAR 0 2
81017: PPUSH
81018: CALL_OW 308
81022: IFFALSE 81040
// begin ComMoveToArea ( unit , goAway ) ;
81024: LD_VAR 0 1
81028: PPUSH
81029: LD_VAR 0 3
81033: PPUSH
81034: CALL_OW 113
// exit ;
81038: GO 81126
// end ; if task [ 1 ] [ 1 ] <> M then
81040: LD_VAR 0 7
81044: PUSH
81045: LD_INT 1
81047: ARRAY
81048: PUSH
81049: LD_INT 1
81051: ARRAY
81052: PUSH
81053: LD_STRING M
81055: NONEQUAL
81056: IFFALSE 81060
// exit ;
81058: GO 81126
// x := task [ 1 ] [ 2 ] ;
81060: LD_ADDR_VAR 0 5
81064: PUSH
81065: LD_VAR 0 7
81069: PUSH
81070: LD_INT 1
81072: ARRAY
81073: PUSH
81074: LD_INT 2
81076: ARRAY
81077: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81078: LD_ADDR_VAR 0 6
81082: PUSH
81083: LD_VAR 0 7
81087: PUSH
81088: LD_INT 1
81090: ARRAY
81091: PUSH
81092: LD_INT 3
81094: ARRAY
81095: ST_TO_ADDR
// if InArea ( x , y , area ) then
81096: LD_VAR 0 5
81100: PPUSH
81101: LD_VAR 0 6
81105: PPUSH
81106: LD_VAR 0 2
81110: PPUSH
81111: CALL_OW 309
81115: IFFALSE 81126
// ComStop ( unit ) ;
81117: LD_VAR 0 1
81121: PPUSH
81122: CALL_OW 141
// end ;
81126: LD_VAR 0 4
81130: RET
// export function Abs ( value ) ; begin
81131: LD_INT 0
81133: PPUSH
// result := value ;
81134: LD_ADDR_VAR 0 2
81138: PUSH
81139: LD_VAR 0 1
81143: ST_TO_ADDR
// if value < 0 then
81144: LD_VAR 0 1
81148: PUSH
81149: LD_INT 0
81151: LESS
81152: IFFALSE 81169
// result := value * - 1 ;
81154: LD_ADDR_VAR 0 2
81158: PUSH
81159: LD_VAR 0 1
81163: PUSH
81164: LD_INT 1
81166: NEG
81167: MUL
81168: ST_TO_ADDR
// end ;
81169: LD_VAR 0 2
81173: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81174: LD_INT 0
81176: PPUSH
81177: PPUSH
81178: PPUSH
81179: PPUSH
81180: PPUSH
81181: PPUSH
81182: PPUSH
81183: PPUSH
// if not unit or not building then
81184: LD_VAR 0 1
81188: NOT
81189: IFTRUE 81198
81191: PUSH
81192: LD_VAR 0 2
81196: NOT
81197: OR
81198: IFFALSE 81202
// exit ;
81200: GO 81430
// x := GetX ( building ) ;
81202: LD_ADDR_VAR 0 4
81206: PUSH
81207: LD_VAR 0 2
81211: PPUSH
81212: CALL_OW 250
81216: ST_TO_ADDR
// y := GetY ( building ) ;
81217: LD_ADDR_VAR 0 6
81221: PUSH
81222: LD_VAR 0 2
81226: PPUSH
81227: CALL_OW 251
81231: ST_TO_ADDR
// d := GetDir ( building ) ;
81232: LD_ADDR_VAR 0 8
81236: PUSH
81237: LD_VAR 0 2
81241: PPUSH
81242: CALL_OW 254
81246: ST_TO_ADDR
// r := 4 ;
81247: LD_ADDR_VAR 0 9
81251: PUSH
81252: LD_INT 4
81254: ST_TO_ADDR
// for i := 1 to 5 do
81255: LD_ADDR_VAR 0 10
81259: PUSH
81260: DOUBLE
81261: LD_INT 1
81263: DEC
81264: ST_TO_ADDR
81265: LD_INT 5
81267: PUSH
81268: FOR_TO
81269: IFFALSE 81428
// begin _x := ShiftX ( x , d , r + i ) ;
81271: LD_ADDR_VAR 0 5
81275: PUSH
81276: LD_VAR 0 4
81280: PPUSH
81281: LD_VAR 0 8
81285: PPUSH
81286: LD_VAR 0 9
81290: PUSH
81291: LD_VAR 0 10
81295: PLUS
81296: PPUSH
81297: CALL_OW 272
81301: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81302: LD_ADDR_VAR 0 7
81306: PUSH
81307: LD_VAR 0 6
81311: PPUSH
81312: LD_VAR 0 8
81316: PPUSH
81317: LD_VAR 0 9
81321: PUSH
81322: LD_VAR 0 10
81326: PLUS
81327: PPUSH
81328: CALL_OW 273
81332: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81333: LD_VAR 0 5
81337: PPUSH
81338: LD_VAR 0 7
81342: PPUSH
81343: CALL_OW 488
81347: IFFALSE 81382
81349: PUSH
81350: LD_VAR 0 5
81354: PPUSH
81355: LD_VAR 0 7
81359: PPUSH
81360: CALL_OW 428
81364: PPUSH
81365: CALL_OW 247
81369: PUSH
81370: LD_INT 3
81372: PUSH
81373: LD_INT 2
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: IN
81380: NOT
81381: AND
81382: IFFALSE 81426
// begin ComMoveXY ( unit , _x , _y ) ;
81384: LD_VAR 0 1
81388: PPUSH
81389: LD_VAR 0 5
81393: PPUSH
81394: LD_VAR 0 7
81398: PPUSH
81399: CALL_OW 111
// result := [ _x , _y ] ;
81403: LD_ADDR_VAR 0 3
81407: PUSH
81408: LD_VAR 0 5
81412: PUSH
81413: LD_VAR 0 7
81417: PUSH
81418: EMPTY
81419: LIST
81420: LIST
81421: ST_TO_ADDR
// exit ;
81422: POP
81423: POP
81424: GO 81430
// end ; end ;
81426: GO 81268
81428: POP
81429: POP
// end ;
81430: LD_VAR 0 3
81434: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81435: LD_INT 0
81437: PPUSH
81438: PPUSH
81439: PPUSH
// result := 0 ;
81440: LD_ADDR_VAR 0 3
81444: PUSH
81445: LD_INT 0
81447: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81448: LD_VAR 0 1
81452: PUSH
81453: LD_INT 0
81455: LESS
81456: IFTRUE 81468
81458: PUSH
81459: LD_VAR 0 1
81463: PUSH
81464: LD_INT 8
81466: GREATER
81467: OR
81468: IFTRUE 81480
81470: PUSH
81471: LD_VAR 0 2
81475: PUSH
81476: LD_INT 0
81478: LESS
81479: OR
81480: IFTRUE 81492
81482: PUSH
81483: LD_VAR 0 2
81487: PUSH
81488: LD_INT 8
81490: GREATER
81491: OR
81492: IFFALSE 81496
// exit ;
81494: GO 81571
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81496: LD_ADDR_VAR 0 4
81500: PUSH
81501: LD_INT 22
81503: PUSH
81504: LD_VAR 0 2
81508: PUSH
81509: EMPTY
81510: LIST
81511: LIST
81512: PPUSH
81513: CALL_OW 69
81517: PUSH
81518: FOR_IN
81519: IFFALSE 81569
// begin un := UnitShoot ( i ) ;
81521: LD_ADDR_VAR 0 5
81525: PUSH
81526: LD_VAR 0 4
81530: PPUSH
81531: CALL_OW 504
81535: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81536: LD_VAR 0 5
81540: PPUSH
81541: CALL_OW 255
81545: PUSH
81546: LD_VAR 0 1
81550: EQUAL
81551: IFFALSE 81567
// begin result := un ;
81553: LD_ADDR_VAR 0 3
81557: PUSH
81558: LD_VAR 0 5
81562: ST_TO_ADDR
// exit ;
81563: POP
81564: POP
81565: GO 81571
// end ; end ;
81567: GO 81518
81569: POP
81570: POP
// end ;
81571: LD_VAR 0 3
81575: RET
// export function GetCargoBay ( units ) ; begin
81576: LD_INT 0
81578: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81579: LD_ADDR_VAR 0 2
81583: PUSH
81584: LD_VAR 0 1
81588: PPUSH
81589: LD_INT 2
81591: PUSH
81592: LD_INT 34
81594: PUSH
81595: LD_INT 12
81597: PUSH
81598: EMPTY
81599: LIST
81600: LIST
81601: PUSH
81602: LD_INT 34
81604: PUSH
81605: LD_INT 51
81607: PUSH
81608: EMPTY
81609: LIST
81610: LIST
81611: PUSH
81612: LD_INT 34
81614: PUSH
81615: LD_INT 32
81617: PUSH
81618: EMPTY
81619: LIST
81620: LIST
81621: PUSH
81622: LD_INT 34
81624: PUSH
81625: LD_INT 89
81627: PUSH
81628: EMPTY
81629: LIST
81630: LIST
81631: PUSH
81632: EMPTY
81633: LIST
81634: LIST
81635: LIST
81636: LIST
81637: LIST
81638: PPUSH
81639: CALL_OW 72
81643: ST_TO_ADDR
// end ;
81644: LD_VAR 0 2
81648: RET
// export function Negate ( value ) ; begin
81649: LD_INT 0
81651: PPUSH
// result := not value ;
81652: LD_ADDR_VAR 0 2
81656: PUSH
81657: LD_VAR 0 1
81661: NOT
81662: ST_TO_ADDR
// end ;
81663: LD_VAR 0 2
81667: RET
// export function Inc ( value ) ; begin
81668: LD_INT 0
81670: PPUSH
// result := value + 1 ;
81671: LD_ADDR_VAR 0 2
81675: PUSH
81676: LD_VAR 0 1
81680: PUSH
81681: LD_INT 1
81683: PLUS
81684: ST_TO_ADDR
// end ;
81685: LD_VAR 0 2
81689: RET
// export function Dec ( value ) ; begin
81690: LD_INT 0
81692: PPUSH
// result := value - 1 ;
81693: LD_ADDR_VAR 0 2
81697: PUSH
81698: LD_VAR 0 1
81702: PUSH
81703: LD_INT 1
81705: MINUS
81706: ST_TO_ADDR
// end ;
81707: LD_VAR 0 2
81711: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81712: LD_INT 0
81714: PPUSH
81715: PPUSH
81716: PPUSH
81717: PPUSH
81718: PPUSH
81719: PPUSH
81720: PPUSH
81721: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81722: LD_VAR 0 1
81726: PPUSH
81727: LD_VAR 0 2
81731: PPUSH
81732: CALL_OW 488
81736: NOT
81737: IFTRUE 81756
81739: PUSH
81740: LD_VAR 0 3
81744: PPUSH
81745: LD_VAR 0 4
81749: PPUSH
81750: CALL_OW 488
81754: NOT
81755: OR
81756: IFFALSE 81769
// begin result := - 1 ;
81758: LD_ADDR_VAR 0 5
81762: PUSH
81763: LD_INT 1
81765: NEG
81766: ST_TO_ADDR
// exit ;
81767: GO 82004
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81769: LD_ADDR_VAR 0 12
81773: PUSH
81774: LD_VAR 0 1
81778: PPUSH
81779: LD_VAR 0 2
81783: PPUSH
81784: LD_VAR 0 3
81788: PPUSH
81789: LD_VAR 0 4
81793: PPUSH
81794: CALL 80840 0 4
81798: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81799: LD_ADDR_VAR 0 11
81803: PUSH
81804: LD_VAR 0 1
81808: PPUSH
81809: LD_VAR 0 2
81813: PPUSH
81814: LD_VAR 0 12
81818: PUSH
81819: LD_INT 1
81821: ARRAY
81822: PPUSH
81823: LD_VAR 0 12
81827: PUSH
81828: LD_INT 2
81830: ARRAY
81831: PPUSH
81832: CALL_OW 298
81836: ST_TO_ADDR
// distance := 9999 ;
81837: LD_ADDR_VAR 0 10
81841: PUSH
81842: LD_INT 9999
81844: ST_TO_ADDR
// for i := 0 to 5 do
81845: LD_ADDR_VAR 0 6
81849: PUSH
81850: DOUBLE
81851: LD_INT 0
81853: DEC
81854: ST_TO_ADDR
81855: LD_INT 5
81857: PUSH
81858: FOR_TO
81859: IFFALSE 82002
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81861: LD_ADDR_VAR 0 7
81865: PUSH
81866: LD_VAR 0 1
81870: PPUSH
81871: LD_VAR 0 6
81875: PPUSH
81876: LD_VAR 0 11
81880: PPUSH
81881: CALL_OW 272
81885: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81886: LD_ADDR_VAR 0 8
81890: PUSH
81891: LD_VAR 0 2
81895: PPUSH
81896: LD_VAR 0 6
81900: PPUSH
81901: LD_VAR 0 11
81905: PPUSH
81906: CALL_OW 273
81910: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81911: LD_VAR 0 7
81915: PPUSH
81916: LD_VAR 0 8
81920: PPUSH
81921: CALL_OW 488
81925: NOT
81926: IFFALSE 81930
// continue ;
81928: GO 81858
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81930: LD_ADDR_VAR 0 9
81934: PUSH
81935: LD_VAR 0 12
81939: PUSH
81940: LD_INT 1
81942: ARRAY
81943: PPUSH
81944: LD_VAR 0 12
81948: PUSH
81949: LD_INT 2
81951: ARRAY
81952: PPUSH
81953: LD_VAR 0 7
81957: PPUSH
81958: LD_VAR 0 8
81962: PPUSH
81963: CALL_OW 298
81967: ST_TO_ADDR
// if tmp < distance then
81968: LD_VAR 0 9
81972: PUSH
81973: LD_VAR 0 10
81977: LESS
81978: IFFALSE 82000
// begin result := i ;
81980: LD_ADDR_VAR 0 5
81984: PUSH
81985: LD_VAR 0 6
81989: ST_TO_ADDR
// distance := tmp ;
81990: LD_ADDR_VAR 0 10
81994: PUSH
81995: LD_VAR 0 9
81999: ST_TO_ADDR
// end ; end ;
82000: GO 81858
82002: POP
82003: POP
// end ;
82004: LD_VAR 0 5
82008: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82009: LD_INT 0
82011: PPUSH
82012: PPUSH
// if not driver or not IsInUnit ( driver ) then
82013: LD_VAR 0 1
82017: NOT
82018: IFTRUE 82032
82020: PUSH
82021: LD_VAR 0 1
82025: PPUSH
82026: CALL_OW 310
82030: NOT
82031: OR
82032: IFFALSE 82036
// exit ;
82034: GO 82126
// vehicle := IsInUnit ( driver ) ;
82036: LD_ADDR_VAR 0 3
82040: PUSH
82041: LD_VAR 0 1
82045: PPUSH
82046: CALL_OW 310
82050: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82051: LD_VAR 0 1
82055: PPUSH
82056: LD_STRING \
82058: PUSH
82059: LD_INT 0
82061: PUSH
82062: LD_INT 0
82064: PUSH
82065: LD_INT 0
82067: PUSH
82068: LD_INT 0
82070: PUSH
82071: LD_INT 0
82073: PUSH
82074: LD_INT 0
82076: PUSH
82077: EMPTY
82078: LIST
82079: LIST
82080: LIST
82081: LIST
82082: LIST
82083: LIST
82084: LIST
82085: PUSH
82086: LD_STRING E
82088: PUSH
82089: LD_INT 0
82091: PUSH
82092: LD_INT 0
82094: PUSH
82095: LD_VAR 0 3
82099: PUSH
82100: LD_INT 0
82102: PUSH
82103: LD_INT 0
82105: PUSH
82106: LD_INT 0
82108: PUSH
82109: EMPTY
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: PUSH
82118: EMPTY
82119: LIST
82120: LIST
82121: PPUSH
82122: CALL_OW 446
// end ;
82126: LD_VAR 0 2
82130: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82131: LD_INT 0
82133: PPUSH
82134: PPUSH
// if not driver or not IsInUnit ( driver ) then
82135: LD_VAR 0 1
82139: NOT
82140: IFTRUE 82154
82142: PUSH
82143: LD_VAR 0 1
82147: PPUSH
82148: CALL_OW 310
82152: NOT
82153: OR
82154: IFFALSE 82158
// exit ;
82156: GO 82248
// vehicle := IsInUnit ( driver ) ;
82158: LD_ADDR_VAR 0 3
82162: PUSH
82163: LD_VAR 0 1
82167: PPUSH
82168: CALL_OW 310
82172: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82173: LD_VAR 0 1
82177: PPUSH
82178: LD_STRING \
82180: PUSH
82181: LD_INT 0
82183: PUSH
82184: LD_INT 0
82186: PUSH
82187: LD_INT 0
82189: PUSH
82190: LD_INT 0
82192: PUSH
82193: LD_INT 0
82195: PUSH
82196: LD_INT 0
82198: PUSH
82199: EMPTY
82200: LIST
82201: LIST
82202: LIST
82203: LIST
82204: LIST
82205: LIST
82206: LIST
82207: PUSH
82208: LD_STRING E
82210: PUSH
82211: LD_INT 0
82213: PUSH
82214: LD_INT 0
82216: PUSH
82217: LD_VAR 0 3
82221: PUSH
82222: LD_INT 0
82224: PUSH
82225: LD_INT 0
82227: PUSH
82228: LD_INT 0
82230: PUSH
82231: EMPTY
82232: LIST
82233: LIST
82234: LIST
82235: LIST
82236: LIST
82237: LIST
82238: LIST
82239: PUSH
82240: EMPTY
82241: LIST
82242: LIST
82243: PPUSH
82244: CALL_OW 447
// end ;
82248: LD_VAR 0 2
82252: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82253: LD_INT 0
82255: PPUSH
82256: PPUSH
82257: PPUSH
// tmp := [ ] ;
82258: LD_ADDR_VAR 0 5
82262: PUSH
82263: EMPTY
82264: ST_TO_ADDR
// for i in units do
82265: LD_ADDR_VAR 0 4
82269: PUSH
82270: LD_VAR 0 1
82274: PUSH
82275: FOR_IN
82276: IFFALSE 82314
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82278: LD_ADDR_VAR 0 5
82282: PUSH
82283: LD_VAR 0 5
82287: PPUSH
82288: LD_VAR 0 5
82292: PUSH
82293: LD_INT 1
82295: PLUS
82296: PPUSH
82297: LD_VAR 0 4
82301: PPUSH
82302: CALL_OW 256
82306: PPUSH
82307: CALL_OW 2
82311: ST_TO_ADDR
82312: GO 82275
82314: POP
82315: POP
// if not tmp then
82316: LD_VAR 0 5
82320: NOT
82321: IFFALSE 82325
// exit ;
82323: GO 82373
// if asc then
82325: LD_VAR 0 2
82329: IFFALSE 82353
// result := SortListByListAsc ( units , tmp ) else
82331: LD_ADDR_VAR 0 3
82335: PUSH
82336: LD_VAR 0 1
82340: PPUSH
82341: LD_VAR 0 5
82345: PPUSH
82346: CALL_OW 76
82350: ST_TO_ADDR
82351: GO 82373
// result := SortListByListDesc ( units , tmp ) ;
82353: LD_ADDR_VAR 0 3
82357: PUSH
82358: LD_VAR 0 1
82362: PPUSH
82363: LD_VAR 0 5
82367: PPUSH
82368: CALL_OW 77
82372: ST_TO_ADDR
// end ;
82373: LD_VAR 0 3
82377: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82378: LD_INT 0
82380: PPUSH
82381: PPUSH
// task := GetTaskList ( mech ) ;
82382: LD_ADDR_VAR 0 4
82386: PUSH
82387: LD_VAR 0 1
82391: PPUSH
82392: CALL_OW 437
82396: ST_TO_ADDR
// if not task then
82397: LD_VAR 0 4
82401: NOT
82402: IFFALSE 82406
// exit ;
82404: GO 82450
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82406: LD_ADDR_VAR 0 3
82410: PUSH
82411: LD_VAR 0 4
82415: PUSH
82416: LD_INT 1
82418: ARRAY
82419: PUSH
82420: LD_INT 1
82422: ARRAY
82423: PUSH
82424: LD_STRING r
82426: EQUAL
82427: IFFALSE 82449
82429: PUSH
82430: LD_VAR 0 4
82434: PUSH
82435: LD_INT 1
82437: ARRAY
82438: PUSH
82439: LD_INT 4
82441: ARRAY
82442: PUSH
82443: LD_VAR 0 2
82447: EQUAL
82448: AND
82449: ST_TO_ADDR
// end ;
82450: LD_VAR 0 3
82454: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82455: LD_INT 0
82457: PPUSH
// SetDir ( unit , d ) ;
82458: LD_VAR 0 1
82462: PPUSH
82463: LD_VAR 0 4
82467: PPUSH
82468: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82472: LD_ADDR_VAR 0 6
82476: PUSH
82477: LD_VAR 0 1
82481: PPUSH
82482: LD_VAR 0 2
82486: PPUSH
82487: LD_VAR 0 3
82491: PPUSH
82492: LD_VAR 0 5
82496: PPUSH
82497: CALL_OW 48
82501: ST_TO_ADDR
// end ;
82502: LD_VAR 0 6
82506: RET
// export function ToNaturalNumber ( number ) ; begin
82507: LD_INT 0
82509: PPUSH
// result := number div 1 ;
82510: LD_ADDR_VAR 0 2
82514: PUSH
82515: LD_VAR 0 1
82519: PUSH
82520: LD_INT 1
82522: DIV
82523: ST_TO_ADDR
// if number < 0 then
82524: LD_VAR 0 1
82528: PUSH
82529: LD_INT 0
82531: LESS
82532: IFFALSE 82542
// result := 0 ;
82534: LD_ADDR_VAR 0 2
82538: PUSH
82539: LD_INT 0
82541: ST_TO_ADDR
// end ;
82542: LD_VAR 0 2
82546: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82547: LD_INT 0
82549: PPUSH
82550: PPUSH
82551: PPUSH
// if not buildings then
82552: LD_VAR 0 1
82556: NOT
82557: IFFALSE 82561
// exit ;
82559: GO 82676
// tmp := [ ] ;
82561: LD_ADDR_VAR 0 5
82565: PUSH
82566: EMPTY
82567: ST_TO_ADDR
// for b in buildings do
82568: LD_ADDR_VAR 0 4
82572: PUSH
82573: LD_VAR 0 1
82577: PUSH
82578: FOR_IN
82579: IFFALSE 82617
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82581: LD_ADDR_VAR 0 5
82585: PUSH
82586: LD_VAR 0 5
82590: PPUSH
82591: LD_VAR 0 5
82595: PUSH
82596: LD_INT 1
82598: PLUS
82599: PPUSH
82600: LD_VAR 0 4
82604: PPUSH
82605: CALL_OW 266
82609: PPUSH
82610: CALL_OW 1
82614: ST_TO_ADDR
82615: GO 82578
82617: POP
82618: POP
// if not tmp then
82619: LD_VAR 0 5
82623: NOT
82624: IFFALSE 82628
// exit ;
82626: GO 82676
// if asc then
82628: LD_VAR 0 2
82632: IFFALSE 82656
// result := SortListByListAsc ( buildings , tmp ) else
82634: LD_ADDR_VAR 0 3
82638: PUSH
82639: LD_VAR 0 1
82643: PPUSH
82644: LD_VAR 0 5
82648: PPUSH
82649: CALL_OW 76
82653: ST_TO_ADDR
82654: GO 82676
// result := SortListByListDesc ( buildings , tmp ) ;
82656: LD_ADDR_VAR 0 3
82660: PUSH
82661: LD_VAR 0 1
82665: PPUSH
82666: LD_VAR 0 5
82670: PPUSH
82671: CALL_OW 77
82675: ST_TO_ADDR
// end ;
82676: LD_VAR 0 3
82680: RET
// export function SortByClass ( units , class ) ; var un ; begin
82681: LD_INT 0
82683: PPUSH
82684: PPUSH
// if not units or not class then
82685: LD_VAR 0 1
82689: NOT
82690: IFTRUE 82699
82692: PUSH
82693: LD_VAR 0 2
82697: NOT
82698: OR
82699: IFFALSE 82703
// exit ;
82701: GO 82798
// result := [ ] ;
82703: LD_ADDR_VAR 0 3
82707: PUSH
82708: EMPTY
82709: ST_TO_ADDR
// for un in units do
82710: LD_ADDR_VAR 0 4
82714: PUSH
82715: LD_VAR 0 1
82719: PUSH
82720: FOR_IN
82721: IFFALSE 82796
// if GetClass ( un ) = class then
82723: LD_VAR 0 4
82727: PPUSH
82728: CALL_OW 257
82732: PUSH
82733: LD_VAR 0 2
82737: EQUAL
82738: IFFALSE 82765
// result := Insert ( result , 1 , un ) else
82740: LD_ADDR_VAR 0 3
82744: PUSH
82745: LD_VAR 0 3
82749: PPUSH
82750: LD_INT 1
82752: PPUSH
82753: LD_VAR 0 4
82757: PPUSH
82758: CALL_OW 2
82762: ST_TO_ADDR
82763: GO 82794
// result := Replace ( result , result + 1 , un ) ;
82765: LD_ADDR_VAR 0 3
82769: PUSH
82770: LD_VAR 0 3
82774: PPUSH
82775: LD_VAR 0 3
82779: PUSH
82780: LD_INT 1
82782: PLUS
82783: PPUSH
82784: LD_VAR 0 4
82788: PPUSH
82789: CALL_OW 1
82793: ST_TO_ADDR
82794: GO 82720
82796: POP
82797: POP
// end ;
82798: LD_VAR 0 3
82802: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82803: LD_INT 0
82805: PPUSH
82806: PPUSH
82807: PPUSH
82808: PPUSH
82809: PPUSH
82810: PPUSH
82811: PPUSH
// result := [ ] ;
82812: LD_ADDR_VAR 0 4
82816: PUSH
82817: EMPTY
82818: ST_TO_ADDR
// if x - r < 0 then
82819: LD_VAR 0 1
82823: PUSH
82824: LD_VAR 0 3
82828: MINUS
82829: PUSH
82830: LD_INT 0
82832: LESS
82833: IFFALSE 82845
// min_x := 0 else
82835: LD_ADDR_VAR 0 8
82839: PUSH
82840: LD_INT 0
82842: ST_TO_ADDR
82843: GO 82861
// min_x := x - r ;
82845: LD_ADDR_VAR 0 8
82849: PUSH
82850: LD_VAR 0 1
82854: PUSH
82855: LD_VAR 0 3
82859: MINUS
82860: ST_TO_ADDR
// if y - r < 0 then
82861: LD_VAR 0 2
82865: PUSH
82866: LD_VAR 0 3
82870: MINUS
82871: PUSH
82872: LD_INT 0
82874: LESS
82875: IFFALSE 82887
// min_y := 0 else
82877: LD_ADDR_VAR 0 7
82881: PUSH
82882: LD_INT 0
82884: ST_TO_ADDR
82885: GO 82903
// min_y := y - r ;
82887: LD_ADDR_VAR 0 7
82891: PUSH
82892: LD_VAR 0 2
82896: PUSH
82897: LD_VAR 0 3
82901: MINUS
82902: ST_TO_ADDR
// max_x := x + r ;
82903: LD_ADDR_VAR 0 9
82907: PUSH
82908: LD_VAR 0 1
82912: PUSH
82913: LD_VAR 0 3
82917: PLUS
82918: ST_TO_ADDR
// max_y := y + r ;
82919: LD_ADDR_VAR 0 10
82923: PUSH
82924: LD_VAR 0 2
82928: PUSH
82929: LD_VAR 0 3
82933: PLUS
82934: ST_TO_ADDR
// for _x = min_x to max_x do
82935: LD_ADDR_VAR 0 5
82939: PUSH
82940: DOUBLE
82941: LD_VAR 0 8
82945: DEC
82946: ST_TO_ADDR
82947: LD_VAR 0 9
82951: PUSH
82952: FOR_TO
82953: IFFALSE 83054
// for _y = min_y to max_y do
82955: LD_ADDR_VAR 0 6
82959: PUSH
82960: DOUBLE
82961: LD_VAR 0 7
82965: DEC
82966: ST_TO_ADDR
82967: LD_VAR 0 10
82971: PUSH
82972: FOR_TO
82973: IFFALSE 83050
// begin if not ValidHex ( _x , _y ) then
82975: LD_VAR 0 5
82979: PPUSH
82980: LD_VAR 0 6
82984: PPUSH
82985: CALL_OW 488
82989: NOT
82990: IFFALSE 82994
// continue ;
82992: GO 82972
// if GetResourceTypeXY ( _x , _y ) then
82994: LD_VAR 0 5
82998: PPUSH
82999: LD_VAR 0 6
83003: PPUSH
83004: CALL_OW 283
83008: IFFALSE 83048
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83010: LD_ADDR_VAR 0 4
83014: PUSH
83015: LD_VAR 0 4
83019: PPUSH
83020: LD_VAR 0 4
83024: PUSH
83025: LD_INT 1
83027: PLUS
83028: PPUSH
83029: LD_VAR 0 5
83033: PUSH
83034: LD_VAR 0 6
83038: PUSH
83039: EMPTY
83040: LIST
83041: LIST
83042: PPUSH
83043: CALL_OW 1
83047: ST_TO_ADDR
// end ;
83048: GO 82972
83050: POP
83051: POP
83052: GO 82952
83054: POP
83055: POP
// end ;
83056: LD_VAR 0 4
83060: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83061: LD_INT 0
83063: PPUSH
83064: PPUSH
83065: PPUSH
83066: PPUSH
83067: PPUSH
83068: PPUSH
83069: PPUSH
83070: PPUSH
// if not units then
83071: LD_VAR 0 1
83075: NOT
83076: IFFALSE 83080
// exit ;
83078: GO 83612
// result := UnitFilter ( units , [ f_ok ] ) ;
83080: LD_ADDR_VAR 0 3
83084: PUSH
83085: LD_VAR 0 1
83089: PPUSH
83090: LD_INT 50
83092: PUSH
83093: EMPTY
83094: LIST
83095: PPUSH
83096: CALL_OW 72
83100: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83101: LD_ADDR_VAR 0 8
83105: PUSH
83106: LD_VAR 0 1
83110: PUSH
83111: LD_INT 1
83113: ARRAY
83114: PPUSH
83115: CALL_OW 255
83119: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83120: LD_ADDR_VAR 0 10
83124: PUSH
83125: LD_INT 29
83127: PUSH
83128: LD_INT 91
83130: PUSH
83131: LD_INT 49
83133: PUSH
83134: EMPTY
83135: LIST
83136: LIST
83137: LIST
83138: ST_TO_ADDR
// if not result then
83139: LD_VAR 0 3
83143: NOT
83144: IFFALSE 83148
// exit ;
83146: GO 83612
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83148: LD_ADDR_VAR 0 5
83152: PUSH
83153: LD_INT 81
83155: PUSH
83156: LD_VAR 0 8
83160: PUSH
83161: EMPTY
83162: LIST
83163: LIST
83164: PPUSH
83165: CALL_OW 69
83169: ST_TO_ADDR
// for i in result do
83170: LD_ADDR_VAR 0 4
83174: PUSH
83175: LD_VAR 0 3
83179: PUSH
83180: FOR_IN
83181: IFFALSE 83610
// begin tag := GetTag ( i ) + 1 ;
83183: LD_ADDR_VAR 0 9
83187: PUSH
83188: LD_VAR 0 4
83192: PPUSH
83193: CALL_OW 110
83197: PUSH
83198: LD_INT 1
83200: PLUS
83201: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83202: LD_ADDR_VAR 0 7
83206: PUSH
83207: LD_VAR 0 4
83211: PPUSH
83212: CALL_OW 250
83216: PPUSH
83217: LD_VAR 0 4
83221: PPUSH
83222: CALL_OW 251
83226: PPUSH
83227: LD_INT 4
83229: PPUSH
83230: CALL 82803 0 3
83234: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83235: LD_VAR 0 4
83239: PPUSH
83240: CALL_OW 247
83244: PUSH
83245: LD_INT 2
83247: EQUAL
83248: IFFALSE 83260
83250: PUSH
83251: LD_VAR 0 7
83255: PUSH
83256: LD_INT 2
83258: GREATER
83259: AND
83260: IFFALSE 83280
83262: PUSH
83263: LD_VAR 0 4
83267: PPUSH
83268: CALL_OW 264
83272: PUSH
83273: LD_VAR 0 10
83277: IN
83278: NOT
83279: AND
83280: IFFALSE 83319
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83282: LD_VAR 0 4
83286: PPUSH
83287: LD_VAR 0 7
83291: PUSH
83292: LD_INT 1
83294: ARRAY
83295: PUSH
83296: LD_INT 1
83298: ARRAY
83299: PPUSH
83300: LD_VAR 0 7
83304: PUSH
83305: LD_INT 1
83307: ARRAY
83308: PUSH
83309: LD_INT 2
83311: ARRAY
83312: PPUSH
83313: CALL_OW 116
83317: GO 83608
// if path > tag then
83319: LD_VAR 0 2
83323: PUSH
83324: LD_VAR 0 9
83328: GREATER
83329: IFFALSE 83537
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83331: LD_ADDR_VAR 0 6
83335: PUSH
83336: LD_VAR 0 5
83340: PPUSH
83341: LD_INT 91
83343: PUSH
83344: LD_VAR 0 4
83348: PUSH
83349: LD_INT 8
83351: PUSH
83352: EMPTY
83353: LIST
83354: LIST
83355: LIST
83356: PPUSH
83357: CALL_OW 72
83361: ST_TO_ADDR
// if nearEnemy then
83362: LD_VAR 0 6
83366: IFFALSE 83435
// begin if GetWeapon ( i ) = ru_time_lapser then
83368: LD_VAR 0 4
83372: PPUSH
83373: CALL_OW 264
83377: PUSH
83378: LD_INT 49
83380: EQUAL
83381: IFFALSE 83409
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83383: LD_VAR 0 4
83387: PPUSH
83388: LD_VAR 0 6
83392: PPUSH
83393: LD_VAR 0 4
83397: PPUSH
83398: CALL_OW 74
83402: PPUSH
83403: CALL_OW 112
83407: GO 83433
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83409: LD_VAR 0 4
83413: PPUSH
83414: LD_VAR 0 6
83418: PPUSH
83419: LD_VAR 0 4
83423: PPUSH
83424: CALL_OW 74
83428: PPUSH
83429: CALL 84693 0 2
// end else
83433: GO 83535
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83435: LD_VAR 0 4
83439: PPUSH
83440: LD_VAR 0 2
83444: PUSH
83445: LD_VAR 0 9
83449: ARRAY
83450: PUSH
83451: LD_INT 1
83453: ARRAY
83454: PPUSH
83455: LD_VAR 0 2
83459: PUSH
83460: LD_VAR 0 9
83464: ARRAY
83465: PUSH
83466: LD_INT 2
83468: ARRAY
83469: PPUSH
83470: CALL_OW 297
83474: PUSH
83475: LD_INT 6
83477: GREATER
83478: IFFALSE 83521
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83480: LD_VAR 0 4
83484: PPUSH
83485: LD_VAR 0 2
83489: PUSH
83490: LD_VAR 0 9
83494: ARRAY
83495: PUSH
83496: LD_INT 1
83498: ARRAY
83499: PPUSH
83500: LD_VAR 0 2
83504: PUSH
83505: LD_VAR 0 9
83509: ARRAY
83510: PUSH
83511: LD_INT 2
83513: ARRAY
83514: PPUSH
83515: CALL_OW 114
83519: GO 83535
// SetTag ( i , tag ) ;
83521: LD_VAR 0 4
83525: PPUSH
83526: LD_VAR 0 9
83530: PPUSH
83531: CALL_OW 109
// end else
83535: GO 83608
// if enemy then
83537: LD_VAR 0 5
83541: IFFALSE 83608
// begin if GetWeapon ( i ) = ru_time_lapser then
83543: LD_VAR 0 4
83547: PPUSH
83548: CALL_OW 264
83552: PUSH
83553: LD_INT 49
83555: EQUAL
83556: IFFALSE 83584
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83558: LD_VAR 0 4
83562: PPUSH
83563: LD_VAR 0 5
83567: PPUSH
83568: LD_VAR 0 4
83572: PPUSH
83573: CALL_OW 74
83577: PPUSH
83578: CALL_OW 112
83582: GO 83608
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83584: LD_VAR 0 4
83588: PPUSH
83589: LD_VAR 0 5
83593: PPUSH
83594: LD_VAR 0 4
83598: PPUSH
83599: CALL_OW 74
83603: PPUSH
83604: CALL 84693 0 2
// end ; end ;
83608: GO 83180
83610: POP
83611: POP
// end ;
83612: LD_VAR 0 3
83616: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83617: LD_INT 0
83619: PPUSH
83620: PPUSH
83621: PPUSH
// if not unit or IsInUnit ( unit ) then
83622: LD_VAR 0 1
83626: NOT
83627: IFTRUE 83640
83629: PUSH
83630: LD_VAR 0 1
83634: PPUSH
83635: CALL_OW 310
83639: OR
83640: IFFALSE 83644
// exit ;
83642: GO 83735
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83644: LD_ADDR_VAR 0 4
83648: PUSH
83649: LD_VAR 0 1
83653: PPUSH
83654: CALL_OW 250
83658: PPUSH
83659: LD_VAR 0 2
83663: PPUSH
83664: LD_INT 1
83666: PPUSH
83667: CALL_OW 272
83671: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83672: LD_ADDR_VAR 0 5
83676: PUSH
83677: LD_VAR 0 1
83681: PPUSH
83682: CALL_OW 251
83686: PPUSH
83687: LD_VAR 0 2
83691: PPUSH
83692: LD_INT 1
83694: PPUSH
83695: CALL_OW 273
83699: ST_TO_ADDR
// if ValidHex ( x , y ) then
83700: LD_VAR 0 4
83704: PPUSH
83705: LD_VAR 0 5
83709: PPUSH
83710: CALL_OW 488
83714: IFFALSE 83735
// ComTurnXY ( unit , x , y ) ;
83716: LD_VAR 0 1
83720: PPUSH
83721: LD_VAR 0 4
83725: PPUSH
83726: LD_VAR 0 5
83730: PPUSH
83731: CALL_OW 118
// end ;
83735: LD_VAR 0 3
83739: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83740: LD_INT 0
83742: PPUSH
83743: PPUSH
// result := false ;
83744: LD_ADDR_VAR 0 3
83748: PUSH
83749: LD_INT 0
83751: ST_TO_ADDR
// if not units then
83752: LD_VAR 0 2
83756: NOT
83757: IFFALSE 83761
// exit ;
83759: GO 83806
// for i in units do
83761: LD_ADDR_VAR 0 4
83765: PUSH
83766: LD_VAR 0 2
83770: PUSH
83771: FOR_IN
83772: IFFALSE 83804
// if See ( side , i ) then
83774: LD_VAR 0 1
83778: PPUSH
83779: LD_VAR 0 4
83783: PPUSH
83784: CALL_OW 292
83788: IFFALSE 83802
// begin result := true ;
83790: LD_ADDR_VAR 0 3
83794: PUSH
83795: LD_INT 1
83797: ST_TO_ADDR
// exit ;
83798: POP
83799: POP
83800: GO 83806
// end ;
83802: GO 83771
83804: POP
83805: POP
// end ;
83806: LD_VAR 0 3
83810: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83811: LD_INT 0
83813: PPUSH
83814: PPUSH
83815: PPUSH
83816: PPUSH
// if not unit or not points then
83817: LD_VAR 0 1
83821: NOT
83822: IFTRUE 83831
83824: PUSH
83825: LD_VAR 0 2
83829: NOT
83830: OR
83831: IFFALSE 83835
// exit ;
83833: GO 83925
// dist := 99999 ;
83835: LD_ADDR_VAR 0 5
83839: PUSH
83840: LD_INT 99999
83842: ST_TO_ADDR
// for i in points do
83843: LD_ADDR_VAR 0 4
83847: PUSH
83848: LD_VAR 0 2
83852: PUSH
83853: FOR_IN
83854: IFFALSE 83923
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83856: LD_ADDR_VAR 0 6
83860: PUSH
83861: LD_VAR 0 1
83865: PPUSH
83866: LD_VAR 0 4
83870: PUSH
83871: LD_INT 1
83873: ARRAY
83874: PPUSH
83875: LD_VAR 0 4
83879: PUSH
83880: LD_INT 2
83882: ARRAY
83883: PPUSH
83884: CALL_OW 297
83888: ST_TO_ADDR
// if tmpDist < dist then
83889: LD_VAR 0 6
83893: PUSH
83894: LD_VAR 0 5
83898: LESS
83899: IFFALSE 83921
// begin result := i ;
83901: LD_ADDR_VAR 0 3
83905: PUSH
83906: LD_VAR 0 4
83910: ST_TO_ADDR
// dist := tmpDist ;
83911: LD_ADDR_VAR 0 5
83915: PUSH
83916: LD_VAR 0 6
83920: ST_TO_ADDR
// end ; end ;
83921: GO 83853
83923: POP
83924: POP
// end ;
83925: LD_VAR 0 3
83929: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83930: LD_INT 0
83932: PPUSH
// uc_side := side ;
83933: LD_ADDR_OWVAR 20
83937: PUSH
83938: LD_VAR 0 1
83942: ST_TO_ADDR
// uc_nation := 3 ;
83943: LD_ADDR_OWVAR 21
83947: PUSH
83948: LD_INT 3
83950: ST_TO_ADDR
// vc_chassis := 25 ;
83951: LD_ADDR_OWVAR 37
83955: PUSH
83956: LD_INT 25
83958: ST_TO_ADDR
// vc_engine := engine_siberite ;
83959: LD_ADDR_OWVAR 39
83963: PUSH
83964: LD_INT 3
83966: ST_TO_ADDR
// vc_control := control_computer ;
83967: LD_ADDR_OWVAR 38
83971: PUSH
83972: LD_INT 3
83974: ST_TO_ADDR
// vc_weapon := 59 ;
83975: LD_ADDR_OWVAR 40
83979: PUSH
83980: LD_INT 59
83982: ST_TO_ADDR
// result := CreateVehicle ;
83983: LD_ADDR_VAR 0 5
83987: PUSH
83988: CALL_OW 45
83992: ST_TO_ADDR
// SetDir ( result , d ) ;
83993: LD_VAR 0 5
83997: PPUSH
83998: LD_VAR 0 4
84002: PPUSH
84003: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84007: LD_VAR 0 5
84011: PPUSH
84012: LD_VAR 0 2
84016: PPUSH
84017: LD_VAR 0 3
84021: PPUSH
84022: LD_INT 0
84024: PPUSH
84025: CALL_OW 48
// end ;
84029: LD_VAR 0 5
84033: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84034: LD_INT 0
84036: PPUSH
84037: PPUSH
84038: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84039: LD_ADDR_VAR 0 2
84043: PUSH
84044: LD_INT 0
84046: PUSH
84047: LD_INT 0
84049: PUSH
84050: LD_INT 0
84052: PUSH
84053: LD_INT 0
84055: PUSH
84056: EMPTY
84057: LIST
84058: LIST
84059: LIST
84060: LIST
84061: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84062: LD_VAR 0 1
84066: NOT
84067: IFTRUE 84100
84069: PUSH
84070: LD_VAR 0 1
84074: PPUSH
84075: CALL_OW 264
84079: PUSH
84080: LD_INT 12
84082: PUSH
84083: LD_INT 51
84085: PUSH
84086: LD_INT 32
84088: PUSH
84089: LD_INT 89
84091: PUSH
84092: EMPTY
84093: LIST
84094: LIST
84095: LIST
84096: LIST
84097: IN
84098: NOT
84099: OR
84100: IFFALSE 84104
// exit ;
84102: GO 84202
// for i := 1 to 3 do
84104: LD_ADDR_VAR 0 3
84108: PUSH
84109: DOUBLE
84110: LD_INT 1
84112: DEC
84113: ST_TO_ADDR
84114: LD_INT 3
84116: PUSH
84117: FOR_TO
84118: IFFALSE 84200
// begin tmp := GetCargo ( cargo , i ) ;
84120: LD_ADDR_VAR 0 4
84124: PUSH
84125: LD_VAR 0 1
84129: PPUSH
84130: LD_VAR 0 3
84134: PPUSH
84135: CALL_OW 289
84139: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84140: LD_ADDR_VAR 0 2
84144: PUSH
84145: LD_VAR 0 2
84149: PPUSH
84150: LD_VAR 0 3
84154: PPUSH
84155: LD_VAR 0 4
84159: PPUSH
84160: CALL_OW 1
84164: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84165: LD_ADDR_VAR 0 2
84169: PUSH
84170: LD_VAR 0 2
84174: PPUSH
84175: LD_INT 4
84177: PPUSH
84178: LD_VAR 0 2
84182: PUSH
84183: LD_INT 4
84185: ARRAY
84186: PUSH
84187: LD_VAR 0 4
84191: PLUS
84192: PPUSH
84193: CALL_OW 1
84197: ST_TO_ADDR
// end ;
84198: GO 84117
84200: POP
84201: POP
// end ;
84202: LD_VAR 0 2
84206: RET
// export function Length ( array ) ; begin
84207: LD_INT 0
84209: PPUSH
// result := array + 0 ;
84210: LD_ADDR_VAR 0 2
84214: PUSH
84215: LD_VAR 0 1
84219: PUSH
84220: LD_INT 0
84222: PLUS
84223: ST_TO_ADDR
// end ;
84224: LD_VAR 0 2
84228: RET
// export function PrepareArray ( array ) ; begin
84229: LD_INT 0
84231: PPUSH
// result := array diff 0 ;
84232: LD_ADDR_VAR 0 2
84236: PUSH
84237: LD_VAR 0 1
84241: PUSH
84242: LD_INT 0
84244: DIFF
84245: ST_TO_ADDR
// if not result [ 1 ] then
84246: LD_VAR 0 2
84250: PUSH
84251: LD_INT 1
84253: ARRAY
84254: NOT
84255: IFFALSE 84275
// result := Delete ( result , 1 ) ;
84257: LD_ADDR_VAR 0 2
84261: PUSH
84262: LD_VAR 0 2
84266: PPUSH
84267: LD_INT 1
84269: PPUSH
84270: CALL_OW 3
84274: ST_TO_ADDR
// end ;
84275: LD_VAR 0 2
84279: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84280: LD_INT 0
84282: PPUSH
84283: PPUSH
84284: PPUSH
84285: PPUSH
// sibRocketRange := 25 ;
84286: LD_ADDR_VAR 0 6
84290: PUSH
84291: LD_INT 25
84293: ST_TO_ADDR
// result := false ;
84294: LD_ADDR_VAR 0 4
84298: PUSH
84299: LD_INT 0
84301: ST_TO_ADDR
// for i := 0 to 5 do
84302: LD_ADDR_VAR 0 5
84306: PUSH
84307: DOUBLE
84308: LD_INT 0
84310: DEC
84311: ST_TO_ADDR
84312: LD_INT 5
84314: PUSH
84315: FOR_TO
84316: IFFALSE 84383
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84318: LD_VAR 0 1
84322: PPUSH
84323: LD_VAR 0 5
84327: PPUSH
84328: LD_VAR 0 6
84332: PPUSH
84333: CALL_OW 272
84337: PPUSH
84338: LD_VAR 0 2
84342: PPUSH
84343: LD_VAR 0 5
84347: PPUSH
84348: LD_VAR 0 6
84352: PPUSH
84353: CALL_OW 273
84357: PPUSH
84358: LD_VAR 0 3
84362: PPUSH
84363: CALL_OW 309
84367: IFFALSE 84381
// begin result := true ;
84369: LD_ADDR_VAR 0 4
84373: PUSH
84374: LD_INT 1
84376: ST_TO_ADDR
// exit ;
84377: POP
84378: POP
84379: GO 84385
// end ;
84381: GO 84315
84383: POP
84384: POP
// end ;
84385: LD_VAR 0 4
84389: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84390: LD_INT 0
84392: PPUSH
84393: PPUSH
84394: PPUSH
// if btype = b_depot then
84395: LD_VAR 0 2
84399: PUSH
84400: LD_INT 0
84402: EQUAL
84403: IFFALSE 84415
// begin result := true ;
84405: LD_ADDR_VAR 0 3
84409: PUSH
84410: LD_INT 1
84412: ST_TO_ADDR
// exit ;
84413: GO 84535
// end ; pom := GetBase ( depot ) ;
84415: LD_ADDR_VAR 0 4
84419: PUSH
84420: LD_VAR 0 1
84424: PPUSH
84425: CALL_OW 274
84429: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84430: LD_ADDR_VAR 0 5
84434: PUSH
84435: LD_VAR 0 2
84439: PPUSH
84440: LD_VAR 0 1
84444: PPUSH
84445: CALL_OW 248
84449: PPUSH
84450: CALL_OW 450
84454: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84455: LD_ADDR_VAR 0 3
84459: PUSH
84460: LD_VAR 0 4
84464: PPUSH
84465: LD_INT 1
84467: PPUSH
84468: CALL_OW 275
84472: PUSH
84473: LD_VAR 0 5
84477: PUSH
84478: LD_INT 1
84480: ARRAY
84481: GREATEREQUAL
84482: IFFALSE 84508
84484: PUSH
84485: LD_VAR 0 4
84489: PPUSH
84490: LD_INT 2
84492: PPUSH
84493: CALL_OW 275
84497: PUSH
84498: LD_VAR 0 5
84502: PUSH
84503: LD_INT 2
84505: ARRAY
84506: GREATEREQUAL
84507: AND
84508: IFFALSE 84534
84510: PUSH
84511: LD_VAR 0 4
84515: PPUSH
84516: LD_INT 3
84518: PPUSH
84519: CALL_OW 275
84523: PUSH
84524: LD_VAR 0 5
84528: PUSH
84529: LD_INT 3
84531: ARRAY
84532: GREATEREQUAL
84533: AND
84534: ST_TO_ADDR
// end ;
84535: LD_VAR 0 3
84539: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84540: LD_INT 0
84542: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84543: LD_VAR 0 1
84547: PPUSH
84548: LD_VAR 0 2
84552: PPUSH
84553: LD_INT 0
84555: PPUSH
84556: LD_INT 0
84558: PPUSH
84559: LD_INT 1
84561: PPUSH
84562: LD_INT 0
84564: PPUSH
84565: CALL_OW 587
// end ;
84569: LD_VAR 0 3
84573: RET
// export function CenterOnNow ( unit ) ; begin
84574: LD_INT 0
84576: PPUSH
// result := IsInUnit ( unit ) ;
84577: LD_ADDR_VAR 0 2
84581: PUSH
84582: LD_VAR 0 1
84586: PPUSH
84587: CALL_OW 310
84591: ST_TO_ADDR
// if not result then
84592: LD_VAR 0 2
84596: NOT
84597: IFFALSE 84609
// result := unit ;
84599: LD_ADDR_VAR 0 2
84603: PUSH
84604: LD_VAR 0 1
84608: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84609: LD_VAR 0 1
84613: PPUSH
84614: CALL_OW 87
// end ;
84618: LD_VAR 0 2
84622: RET
// export function ComMoveHex ( unit , hex ) ; begin
84623: LD_INT 0
84625: PPUSH
// if not hex then
84626: LD_VAR 0 2
84630: NOT
84631: IFFALSE 84635
// exit ;
84633: GO 84688
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84635: LD_VAR 0 2
84639: PUSH
84640: LD_INT 1
84642: ARRAY
84643: PPUSH
84644: LD_VAR 0 2
84648: PUSH
84649: LD_INT 2
84651: ARRAY
84652: PPUSH
84653: CALL_OW 428
84657: IFFALSE 84661
// exit ;
84659: GO 84688
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84661: LD_VAR 0 1
84665: PPUSH
84666: LD_VAR 0 2
84670: PUSH
84671: LD_INT 1
84673: ARRAY
84674: PPUSH
84675: LD_VAR 0 2
84679: PUSH
84680: LD_INT 2
84682: ARRAY
84683: PPUSH
84684: CALL_OW 111
// end ;
84688: LD_VAR 0 3
84692: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84693: LD_INT 0
84695: PPUSH
84696: PPUSH
84697: PPUSH
// if not unit or not enemy then
84698: LD_VAR 0 1
84702: NOT
84703: IFTRUE 84712
84705: PUSH
84706: LD_VAR 0 2
84710: NOT
84711: OR
84712: IFFALSE 84716
// exit ;
84714: GO 84842
// x := GetX ( enemy ) ;
84716: LD_ADDR_VAR 0 4
84720: PUSH
84721: LD_VAR 0 2
84725: PPUSH
84726: CALL_OW 250
84730: ST_TO_ADDR
// y := GetY ( enemy ) ;
84731: LD_ADDR_VAR 0 5
84735: PUSH
84736: LD_VAR 0 2
84740: PPUSH
84741: CALL_OW 251
84745: ST_TO_ADDR
// if ValidHex ( x , y ) then
84746: LD_VAR 0 4
84750: PPUSH
84751: LD_VAR 0 5
84755: PPUSH
84756: CALL_OW 488
84760: IFFALSE 84842
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84762: LD_VAR 0 2
84766: PPUSH
84767: CALL_OW 247
84771: PUSH
84772: LD_INT 3
84774: PUSH
84775: LD_INT 2
84777: PUSH
84778: EMPTY
84779: LIST
84780: LIST
84781: IN
84782: IFTRUE 84805
84784: PUSH
84785: LD_VAR 0 1
84789: PPUSH
84790: CALL_OW 255
84794: PPUSH
84795: LD_VAR 0 2
84799: PPUSH
84800: CALL_OW 292
84804: OR
84805: IFFALSE 84823
// ComAttackUnit ( unit , enemy ) else
84807: LD_VAR 0 1
84811: PPUSH
84812: LD_VAR 0 2
84816: PPUSH
84817: CALL_OW 115
84821: GO 84842
// ComAgressiveMove ( unit , x , y ) ;
84823: LD_VAR 0 1
84827: PPUSH
84828: LD_VAR 0 4
84832: PPUSH
84833: LD_VAR 0 5
84837: PPUSH
84838: CALL_OW 114
// end ;
84842: LD_VAR 0 3
84846: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84847: LD_INT 0
84849: PPUSH
84850: PPUSH
84851: PPUSH
// list := AreaToList ( area , 0 ) ;
84852: LD_ADDR_VAR 0 5
84856: PUSH
84857: LD_VAR 0 1
84861: PPUSH
84862: LD_INT 0
84864: PPUSH
84865: CALL_OW 517
84869: ST_TO_ADDR
// if not list then
84870: LD_VAR 0 5
84874: NOT
84875: IFFALSE 84879
// exit ;
84877: GO 85009
// if all then
84879: LD_VAR 0 2
84883: IFFALSE 84971
// begin for i := 1 to list [ 1 ] do
84885: LD_ADDR_VAR 0 4
84889: PUSH
84890: DOUBLE
84891: LD_INT 1
84893: DEC
84894: ST_TO_ADDR
84895: LD_VAR 0 5
84899: PUSH
84900: LD_INT 1
84902: ARRAY
84903: PUSH
84904: FOR_TO
84905: IFFALSE 84967
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84907: LD_ADDR_VAR 0 3
84911: PUSH
84912: LD_VAR 0 3
84916: PPUSH
84917: LD_VAR 0 3
84921: PUSH
84922: LD_INT 1
84924: PLUS
84925: PPUSH
84926: LD_VAR 0 5
84930: PUSH
84931: LD_INT 1
84933: ARRAY
84934: PUSH
84935: LD_VAR 0 4
84939: ARRAY
84940: PUSH
84941: LD_VAR 0 5
84945: PUSH
84946: LD_INT 2
84948: ARRAY
84949: PUSH
84950: LD_VAR 0 4
84954: ARRAY
84955: PUSH
84956: EMPTY
84957: LIST
84958: LIST
84959: PPUSH
84960: CALL_OW 1
84964: ST_TO_ADDR
84965: GO 84904
84967: POP
84968: POP
// exit ;
84969: GO 85009
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84971: LD_ADDR_VAR 0 3
84975: PUSH
84976: LD_VAR 0 5
84980: PUSH
84981: LD_INT 1
84983: ARRAY
84984: PUSH
84985: LD_INT 1
84987: ARRAY
84988: PUSH
84989: LD_VAR 0 5
84993: PUSH
84994: LD_INT 2
84996: ARRAY
84997: PUSH
84998: LD_INT 1
85000: ARRAY
85001: PUSH
85002: EMPTY
85003: LIST
85004: LIST
85005: PUSH
85006: EMPTY
85007: LIST
85008: ST_TO_ADDR
// end ;
85009: LD_VAR 0 3
85013: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85014: LD_INT 0
85016: PPUSH
85017: PPUSH
// list := AreaToList ( area , 0 ) ;
85018: LD_ADDR_VAR 0 4
85022: PUSH
85023: LD_VAR 0 1
85027: PPUSH
85028: LD_INT 0
85030: PPUSH
85031: CALL_OW 517
85035: ST_TO_ADDR
// if not list then
85036: LD_VAR 0 4
85040: NOT
85041: IFFALSE 85045
// exit ;
85043: GO 85086
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85045: LD_ADDR_VAR 0 3
85049: PUSH
85050: LD_VAR 0 4
85054: PUSH
85055: LD_INT 1
85057: ARRAY
85058: PUSH
85059: LD_INT 1
85061: ARRAY
85062: PUSH
85063: LD_VAR 0 4
85067: PUSH
85068: LD_INT 2
85070: ARRAY
85071: PUSH
85072: LD_INT 1
85074: ARRAY
85075: PUSH
85076: LD_VAR 0 2
85080: PUSH
85081: EMPTY
85082: LIST
85083: LIST
85084: LIST
85085: ST_TO_ADDR
// end ;
85086: LD_VAR 0 3
85090: RET
// export function First ( array ) ; begin
85091: LD_INT 0
85093: PPUSH
// if not array then
85094: LD_VAR 0 1
85098: NOT
85099: IFFALSE 85103
// exit ;
85101: GO 85117
// result := array [ 1 ] ;
85103: LD_ADDR_VAR 0 2
85107: PUSH
85108: LD_VAR 0 1
85112: PUSH
85113: LD_INT 1
85115: ARRAY
85116: ST_TO_ADDR
// end ;
85117: LD_VAR 0 2
85121: RET
// export function Last ( array ) ; begin
85122: LD_INT 0
85124: PPUSH
// if not array then
85125: LD_VAR 0 1
85129: NOT
85130: IFFALSE 85134
// exit ;
85132: GO 85150
// result := array [ array ] ;
85134: LD_ADDR_VAR 0 2
85138: PUSH
85139: LD_VAR 0 1
85143: PUSH
85144: LD_VAR 0 1
85148: ARRAY
85149: ST_TO_ADDR
// end ;
85150: LD_VAR 0 2
85154: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85155: LD_INT 0
85157: PPUSH
85158: PPUSH
// result := [ ] ;
85159: LD_ADDR_VAR 0 5
85163: PUSH
85164: EMPTY
85165: ST_TO_ADDR
// if not array then
85166: LD_VAR 0 1
85170: NOT
85171: IFFALSE 85175
// exit ;
85173: GO 85287
// for i := 1 to array do
85175: LD_ADDR_VAR 0 6
85179: PUSH
85180: DOUBLE
85181: LD_INT 1
85183: DEC
85184: ST_TO_ADDR
85185: LD_VAR 0 1
85189: PUSH
85190: FOR_TO
85191: IFFALSE 85285
// if array [ i ] [ index ] = value then
85193: LD_VAR 0 1
85197: PUSH
85198: LD_VAR 0 6
85202: ARRAY
85203: PUSH
85204: LD_VAR 0 2
85208: ARRAY
85209: PUSH
85210: LD_VAR 0 3
85214: EQUAL
85215: IFFALSE 85283
// begin if indexColumn then
85217: LD_VAR 0 4
85221: IFFALSE 85257
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85223: LD_ADDR_VAR 0 5
85227: PUSH
85228: LD_VAR 0 5
85232: PPUSH
85233: LD_VAR 0 1
85237: PUSH
85238: LD_VAR 0 6
85242: ARRAY
85243: PUSH
85244: LD_VAR 0 4
85248: ARRAY
85249: PPUSH
85250: CALL 80295 0 2
85254: ST_TO_ADDR
85255: GO 85283
// result := Join ( result , array [ i ] ) ;
85257: LD_ADDR_VAR 0 5
85261: PUSH
85262: LD_VAR 0 5
85266: PPUSH
85267: LD_VAR 0 1
85271: PUSH
85272: LD_VAR 0 6
85276: ARRAY
85277: PPUSH
85278: CALL 80295 0 2
85282: ST_TO_ADDR
// end ;
85283: GO 85190
85285: POP
85286: POP
// end ;
85287: LD_VAR 0 5
85291: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85292: LD_INT 0
85294: PPUSH
// if not vehicles or not parkingPoint then
85295: LD_VAR 0 1
85299: NOT
85300: IFTRUE 85309
85302: PUSH
85303: LD_VAR 0 2
85307: NOT
85308: OR
85309: IFFALSE 85313
// exit ;
85311: GO 85411
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85313: LD_ADDR_VAR 0 1
85317: PUSH
85318: LD_VAR 0 1
85322: PPUSH
85323: LD_INT 50
85325: PUSH
85326: EMPTY
85327: LIST
85328: PUSH
85329: LD_INT 3
85331: PUSH
85332: LD_INT 92
85334: PUSH
85335: LD_VAR 0 2
85339: PUSH
85340: LD_INT 1
85342: ARRAY
85343: PUSH
85344: LD_VAR 0 2
85348: PUSH
85349: LD_INT 2
85351: ARRAY
85352: PUSH
85353: LD_INT 8
85355: PUSH
85356: EMPTY
85357: LIST
85358: LIST
85359: LIST
85360: LIST
85361: PUSH
85362: EMPTY
85363: LIST
85364: LIST
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PPUSH
85370: CALL_OW 72
85374: ST_TO_ADDR
// if not vehicles then
85375: LD_VAR 0 1
85379: NOT
85380: IFFALSE 85384
// exit ;
85382: GO 85411
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85384: LD_VAR 0 1
85388: PPUSH
85389: LD_VAR 0 2
85393: PUSH
85394: LD_INT 1
85396: ARRAY
85397: PPUSH
85398: LD_VAR 0 2
85402: PUSH
85403: LD_INT 2
85405: ARRAY
85406: PPUSH
85407: CALL_OW 111
// end ;
85411: LD_VAR 0 3
85415: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85416: LD_INT 0
85418: PPUSH
85419: PPUSH
85420: PPUSH
// if not side or not area then
85421: LD_VAR 0 1
85425: NOT
85426: IFTRUE 85435
85428: PUSH
85429: LD_VAR 0 2
85433: NOT
85434: OR
85435: IFFALSE 85439
// exit ;
85437: GO 85558
// tmp := AreaToList ( area , 0 ) ;
85439: LD_ADDR_VAR 0 5
85443: PUSH
85444: LD_VAR 0 2
85448: PPUSH
85449: LD_INT 0
85451: PPUSH
85452: CALL_OW 517
85456: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85457: LD_ADDR_VAR 0 4
85461: PUSH
85462: DOUBLE
85463: LD_INT 1
85465: DEC
85466: ST_TO_ADDR
85467: LD_VAR 0 5
85471: PUSH
85472: LD_INT 1
85474: ARRAY
85475: PUSH
85476: FOR_TO
85477: IFFALSE 85556
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85479: LD_VAR 0 5
85483: PUSH
85484: LD_INT 1
85486: ARRAY
85487: PUSH
85488: LD_VAR 0 4
85492: ARRAY
85493: PPUSH
85494: LD_VAR 0 5
85498: PUSH
85499: LD_INT 2
85501: ARRAY
85502: PUSH
85503: LD_VAR 0 4
85507: ARRAY
85508: PPUSH
85509: CALL_OW 351
85513: IFFALSE 85554
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85515: LD_VAR 0 5
85519: PUSH
85520: LD_INT 1
85522: ARRAY
85523: PUSH
85524: LD_VAR 0 4
85528: ARRAY
85529: PPUSH
85530: LD_VAR 0 5
85534: PUSH
85535: LD_INT 2
85537: ARRAY
85538: PUSH
85539: LD_VAR 0 4
85543: ARRAY
85544: PPUSH
85545: LD_VAR 0 1
85549: PPUSH
85550: CALL_OW 244
// end ;
85554: GO 85476
85556: POP
85557: POP
// end ; end_of_file
85558: LD_VAR 0 3
85562: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85563: LD_VAR 0 1
85567: PUSH
85568: LD_INT 200
85570: DOUBLE
85571: GREATEREQUAL
85572: IFFALSE 85580
85574: LD_INT 299
85576: DOUBLE
85577: LESSEQUAL
85578: IFTRUE 85582
85580: GO 85614
85582: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85583: LD_VAR 0 1
85587: PPUSH
85588: LD_VAR 0 2
85592: PPUSH
85593: LD_VAR 0 3
85597: PPUSH
85598: LD_VAR 0 4
85602: PPUSH
85603: LD_VAR 0 5
85607: PPUSH
85608: CALL 37406 0 5
85612: GO 85691
85614: LD_INT 300
85616: DOUBLE
85617: GREATEREQUAL
85618: IFFALSE 85626
85620: LD_INT 399
85622: DOUBLE
85623: LESSEQUAL
85624: IFTRUE 85628
85626: GO 85690
85628: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85629: LD_VAR 0 1
85633: PPUSH
85634: LD_VAR 0 2
85638: PPUSH
85639: LD_VAR 0 3
85643: PPUSH
85644: LD_VAR 0 4
85648: PPUSH
85649: LD_VAR 0 5
85653: PPUSH
85654: LD_VAR 0 6
85658: PPUSH
85659: LD_VAR 0 7
85663: PPUSH
85664: LD_VAR 0 8
85668: PPUSH
85669: LD_VAR 0 9
85673: PPUSH
85674: LD_VAR 0 10
85678: PPUSH
85679: LD_VAR 0 11
85683: PPUSH
85684: CALL 33290 0 11
85688: GO 85691
85690: POP
// end ;
85691: PPOPN 11
85693: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85694: LD_VAR 0 1
85698: PPUSH
85699: LD_VAR 0 2
85703: PPUSH
85704: LD_VAR 0 3
85708: PPUSH
85709: LD_VAR 0 4
85713: PPUSH
85714: LD_VAR 0 5
85718: PPUSH
85719: CALL 36787 0 5
// end ; end_of_file
85723: PPOPN 5
85725: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85726: LD_VAR 0 1
85730: PPUSH
85731: LD_VAR 0 2
85735: PPUSH
85736: LD_VAR 0 3
85740: PPUSH
85741: LD_VAR 0 4
85745: PPUSH
85746: LD_VAR 0 5
85750: PPUSH
85751: LD_VAR 0 6
85755: PPUSH
85756: CALL 20830 0 6
// end ;
85760: PPOPN 6
85762: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85763: LD_INT 0
85765: PPUSH
// begin if not units then
85766: LD_VAR 0 1
85770: NOT
85771: IFFALSE 85775
// exit ;
85773: GO 85775
// end ;
85775: PPOPN 7
85777: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85778: CALL 20717 0 0
// end ;
85782: PPOPN 1
85784: END
