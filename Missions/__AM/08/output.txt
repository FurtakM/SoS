// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 , 14 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: LD_INT 14
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// debugMode = 0 ;
 186: LD_ADDR_EXP 45
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// PrepareDifficulty ;
 194: CALL 7766 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 198: LD_INT 43
 200: PPUSH
 201: LD_INT 22
 203: PPUSH
 204: LD_INT 1
 206: PPUSH
 207: LD_INT 333
 209: NEG
 210: PPUSH
 211: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 215: LD_INT 43
 217: PPUSH
 218: LD_INT 22
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 331
// PrepareGammaBase ;
 228: CALL 2639 0 0
// PrepareHeroes ;
 232: CALL 575 0 0
// PrepareRussianCommander ;
 236: CALL 6622 0 0
// PrepareRussians ;
 240: CALL 6940 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 244: LD_INT 22
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 25
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PPUSH
 273: LD_INT 0
 275: PPUSH
 276: LD_INT 90
 278: PPUSH
 279: LD_INT 86
 281: PPUSH
 282: LD_INT 3
 284: PPUSH
 285: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 24
 294: PPUSH
 295: LD_INT 3
 297: PPUSH
 298: LD_EXP 25
 302: PPUSH
 303: LD_EXP 26
 307: PPUSH
 308: CALL_OW 12
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: LD_INT 4
 318: PPUSH
 319: CALL 9191 0 6
// PrepareCutsceneAttack ;
 323: CALL 6674 0 0
// end ;
 327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 34
 340: PUSH
 341: LD_INT 6
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: LD_INT 6
 359: GREATEREQUAL
 360: IFFALSE 372
 362: GO 364
 364: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 365: LD_STRING ACH_ARMOR
 367: PPUSH
 368: CALL_OW 543
 372: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 373: LD_EXP 45
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 572
 383: GO 385
 385: DISABLE
 386: LD_INT 0
 388: PPUSH
// begin enable ;
 389: ENABLE
// fogoff ( true ) ;
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 397: LD_ADDR_VAR 0 1
 401: PUSH
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 21
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 448
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 431
 448: POP
 449: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 509
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 274
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 9999
 502: PPUSH
 503: CALL_OW 277
 507: GO 484
 509: POP
 510: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 511: LD_ADDR_VAR 0 1
 515: PUSH
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: PUSH
 545: FOR_IN
 546: IFFALSE 570
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 274
 557: PPUSH
 558: LD_INT 2
 560: PPUSH
 561: LD_INT 9999
 563: PPUSH
 564: CALL_OW 277
 568: GO 545
 570: POP
 571: POP
// end ; end_of_file
 572: PPOPN 1
 574: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
// uc_side = 1 ;
 592: LD_ADDR_OWVAR 20
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// uc_nation = 1 ;
 600: LD_ADDR_OWVAR 21
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if gammaCommander = 1 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 1
 615: EQUAL
 616: IFFALSE 667
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 618: LD_ADDR_EXP 3
 622: PUSH
 623: LD_STRING Donaldson
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_STRING 04_
 631: PPUSH
 632: CALL 45052 0 3
 636: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 54
 644: PPUSH
 645: LD_INT 25
 647: PPUSH
 648: LD_INT 8
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 50
// ComHold ( Donaldson ) ;
 658: LD_EXP 3
 662: PPUSH
 663: CALL_OW 140
// end ; if gammaCommander = 2 then
 667: LD_EXP 12
 671: PUSH
 672: LD_INT 2
 674: EQUAL
 675: IFFALSE 726
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_STRING Brown
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_STRING 04_
 690: PPUSH
 691: CALL 45052 0 3
 695: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 54
 703: PPUSH
 704: LD_INT 25
 706: PPUSH
 707: LD_INT 8
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// ComHold ( Brown ) ;
 717: LD_EXP 2
 721: PPUSH
 722: CALL_OW 140
// end ; if gammaCommander = 3 then
 726: LD_EXP 12
 730: PUSH
 731: LD_INT 3
 733: EQUAL
 734: IFFALSE 785
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 736: LD_ADDR_EXP 13
 740: PUSH
 741: LD_STRING VanHouten
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 
 749: PPUSH
 750: CALL 45052 0 3
 754: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 755: LD_EXP 13
 759: PPUSH
 760: LD_INT 54
 762: PPUSH
 763: LD_INT 25
 765: PPUSH
 766: LD_INT 8
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 50
// ComHold ( Houten ) ;
 776: LD_EXP 13
 780: PPUSH
 781: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 785: LD_ADDR_EXP 22
 789: PUSH
 790: LD_STRING Harisson
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 
 798: PPUSH
 799: CALL 45052 0 3
 803: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 804: LD_ADDR_EXP 23
 808: PUSH
 809: LD_STRING Powell
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 
 817: PPUSH
 818: CALL 45052 0 3
 822: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 823: LD_STRING 04_Lisa
 825: PUSH
 826: EMPTY
 827: LIST
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_STRING LisaInDelta
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 30
 844: NOT
 845: AND
 846: PUSH
 847: LD_STRING 07_Lisa
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 898
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 861: LD_ADDR_EXP 6
 865: PUSH
 866: LD_STRING Lisa
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 45052 0 3
 879: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 880: LD_ADDR_VAR 0 15
 884: PUSH
 885: LD_VAR 0 15
 889: PUSH
 890: LD_EXP 6
 894: ADD
 895: ST_TO_ADDR
// end else
 896: GO 953
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 898: LD_EXP 6
 902: NOT
 903: PUSH
 904: LD_STRING LisaIn07
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: NOT
 915: AND
 916: IFFALSE 953
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Lisa
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_STRING 07_
 931: PPUSH
 932: CALL 45052 0 3
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 6
 951: ADD
 952: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 953: LD_STRING 04_Bobby
 955: PUSH
 956: EMPTY
 957: LIST
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_STRING BobbyInDelta
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 30
 974: NOT
 975: AND
 976: PUSH
 977: LD_STRING 07_Bobby
 979: PUSH
 980: EMPTY
 981: LIST
 982: PPUSH
 983: CALL_OW 28
 987: NOT
 988: AND
 989: IFFALSE 1028
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 991: LD_ADDR_EXP 4
 995: PUSH
 996: LD_STRING Bobby
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_STRING 04_
1004: PPUSH
1005: CALL 45052 0 3
1009: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1010: LD_ADDR_VAR 0 15
1014: PUSH
1015: LD_VAR 0 15
1019: PUSH
1020: LD_EXP 4
1024: ADD
1025: ST_TO_ADDR
// end else
1026: GO 1083
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1028: LD_EXP 4
1032: NOT
1033: PUSH
1034: LD_STRING BobbyIn07
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: IFFALSE 1083
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1048: LD_ADDR_EXP 4
1052: PUSH
1053: LD_STRING Bobby
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_STRING 07_
1061: PPUSH
1062: CALL 45052 0 3
1066: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1067: LD_ADDR_VAR 0 15
1071: PUSH
1072: LD_VAR 0 15
1076: PUSH
1077: LD_EXP 4
1081: ADD
1082: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1083: LD_STRING 04_Cyrus
1085: PUSH
1086: EMPTY
1087: LIST
1088: PPUSH
1089: CALL_OW 28
1093: PUSH
1094: LD_STRING CyrusInDelta
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 30
1104: NOT
1105: AND
1106: PUSH
1107: LD_STRING 07_Cyrus
1109: PUSH
1110: EMPTY
1111: LIST
1112: PPUSH
1113: CALL_OW 28
1117: NOT
1118: AND
1119: IFFALSE 1158
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1121: LD_ADDR_EXP 5
1125: PUSH
1126: LD_STRING Cyrus
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: LD_STRING 04_
1134: PPUSH
1135: CALL 45052 0 3
1139: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1140: LD_ADDR_VAR 0 15
1144: PUSH
1145: LD_VAR 0 15
1149: PUSH
1150: LD_EXP 5
1154: ADD
1155: ST_TO_ADDR
// end else
1156: GO 1213
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1158: LD_EXP 5
1162: NOT
1163: PUSH
1164: LD_STRING CyrusIn07
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 30
1174: NOT
1175: AND
1176: IFFALSE 1213
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_STRING Cyrus
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_STRING 07_
1191: PPUSH
1192: CALL 45052 0 3
1196: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1197: LD_ADDR_VAR 0 15
1201: PUSH
1202: LD_VAR 0 15
1206: PUSH
1207: LD_EXP 5
1211: ADD
1212: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1213: LD_STRING 04_Brown
1215: PUSH
1216: EMPTY
1217: LIST
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_STRING BrownInDelta
1226: PPUSH
1227: LD_INT 0
1229: PPUSH
1230: CALL_OW 30
1234: NOT
1235: AND
1236: PUSH
1237: LD_STRING 07_Brown
1239: PUSH
1240: EMPTY
1241: LIST
1242: PPUSH
1243: CALL_OW 28
1247: NOT
1248: AND
1249: PUSH
1250: LD_EXP 12
1254: PUSH
1255: LD_INT 2
1257: NONEQUAL
1258: AND
1259: IFFALSE 1298
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1261: LD_ADDR_EXP 2
1265: PUSH
1266: LD_STRING Brown
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_STRING 04_
1274: PPUSH
1275: CALL 45052 0 3
1279: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1280: LD_ADDR_VAR 0 15
1284: PUSH
1285: LD_VAR 0 15
1289: PUSH
1290: LD_EXP 2
1294: ADD
1295: ST_TO_ADDR
// end else
1296: GO 1363
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1298: LD_EXP 2
1302: NOT
1303: PUSH
1304: LD_STRING BrownIn07
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 30
1314: NOT
1315: AND
1316: PUSH
1317: LD_EXP 12
1321: PUSH
1322: LD_INT 2
1324: NONEQUAL
1325: AND
1326: IFFALSE 1363
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1328: LD_ADDR_EXP 2
1332: PUSH
1333: LD_STRING Brown
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_STRING 07_
1341: PPUSH
1342: CALL 45052 0 3
1346: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1347: LD_ADDR_VAR 0 15
1351: PUSH
1352: LD_VAR 0 15
1356: PUSH
1357: LD_EXP 2
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1363: LD_STRING 04_Donaldson
1365: PUSH
1366: EMPTY
1367: LIST
1368: PPUSH
1369: CALL_OW 28
1373: PUSH
1374: LD_STRING DonaldsonInDelta
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 30
1384: NOT
1385: AND
1386: PUSH
1387: LD_STRING 07_Donaldson
1389: PUSH
1390: EMPTY
1391: LIST
1392: PPUSH
1393: CALL_OW 28
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 12
1404: PUSH
1405: LD_INT 1
1407: NONEQUAL
1408: AND
1409: IFFALSE 1448
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1411: LD_ADDR_EXP 3
1415: PUSH
1416: LD_STRING Donaldson
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_STRING 04_
1424: PPUSH
1425: CALL 45052 0 3
1429: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1430: LD_ADDR_VAR 0 15
1434: PUSH
1435: LD_VAR 0 15
1439: PUSH
1440: LD_EXP 3
1444: ADD
1445: ST_TO_ADDR
// end else
1446: GO 1513
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1448: LD_EXP 3
1452: NOT
1453: PUSH
1454: LD_STRING DonaldsonIn07
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 30
1464: NOT
1465: AND
1466: PUSH
1467: LD_EXP 12
1471: PUSH
1472: LD_INT 1
1474: NONEQUAL
1475: AND
1476: IFFALSE 1513
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_STRING Donaldson
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 07_
1491: PPUSH
1492: CALL 45052 0 3
1496: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1497: LD_ADDR_VAR 0 15
1501: PUSH
1502: LD_VAR 0 15
1506: PUSH
1507: LD_EXP 3
1511: ADD
1512: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1513: LD_STRING KhatamIn07
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 30
1523: NOT
1524: IFFALSE 1561
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1526: LD_ADDR_EXP 10
1530: PUSH
1531: LD_STRING Khatam
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_STRING 07_
1539: PPUSH
1540: CALL 45052 0 3
1544: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1545: LD_ADDR_VAR 0 15
1549: PUSH
1550: LD_VAR 0 15
1554: PUSH
1555: LD_EXP 10
1559: ADD
1560: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1561: LD_ADDR_EXP 11
1565: PUSH
1566: LD_STRING 07_othersGamma
1568: PPUSH
1569: CALL_OW 31
1573: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1574: LD_ADDR_VAR 0 14
1578: PUSH
1579: LD_INT 8
1581: PUSH
1582: LD_EXP 11
1586: MINUS
1587: ST_TO_ADDR
// if tmp then
1588: LD_VAR 0 14
1592: IFFALSE 1645
// for i = 1 to tmp do
1594: LD_ADDR_VAR 0 2
1598: PUSH
1599: DOUBLE
1600: LD_INT 1
1602: DEC
1603: ST_TO_ADDR
1604: LD_VAR 0 14
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1643
// begin PrepareHuman ( false , 1 , 5 ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1625: LD_ADDR_EXP 11
1629: PUSH
1630: LD_EXP 11
1634: PUSH
1635: CALL_OW 44
1639: ADD
1640: ST_TO_ADDR
// end ;
1641: GO 1609
1643: POP
1644: POP
// if HexInfo ( 61 , 29 ) = 0 then
1645: LD_INT 61
1647: PPUSH
1648: LD_INT 29
1650: PPUSH
1651: CALL_OW 428
1655: PUSH
1656: LD_INT 0
1658: EQUAL
1659: IFFALSE 1690
// begin bc_type := b_barracks ;
1661: LD_ADDR_OWVAR 42
1665: PUSH
1666: LD_INT 5
1668: ST_TO_ADDR
// bc_level := 6 ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1677: LD_INT 61
1679: PPUSH
1680: LD_INT 29
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1690: LD_ADDR_VAR 0 13
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 31
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// for i in bun do
1724: LD_ADDR_VAR 0 2
1728: PUSH
1729: LD_VAR 0 13
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1867
// begin x := GetX ( i ) ;
1737: LD_ADDR_VAR 0 3
1741: PUSH
1742: LD_VAR 0 2
1746: PPUSH
1747: CALL_OW 250
1751: ST_TO_ADDR
// y := GetY ( i ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 251
1766: ST_TO_ADDR
// d := GetDir ( i ) ;
1767: LD_ADDR_VAR 0 5
1771: PUSH
1772: LD_VAR 0 2
1776: PPUSH
1777: CALL_OW 254
1781: ST_TO_ADDR
// RemoveUnit ( i ) ;
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 64
// bc_type := b_bunker ;
1791: LD_ADDR_OWVAR 42
1795: PUSH
1796: LD_INT 32
1798: ST_TO_ADDR
// bc_level := 6 ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1807: LD_ADDR_VAR 0 6
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: CALL_OW 47
1831: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1832: LD_VAR 0 6
1836: PPUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_VAR 0 2
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 1
1858: PLUS
1859: ARRAY
1860: PPUSH
1861: CALL_OW 431
// end ;
1865: GO 1734
1867: POP
1868: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1903: LD_ADDR_VAR 0 8
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 30
1923: PUSH
1924: LD_INT 6
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 7
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 30
1943: PUSH
1944: LD_INT 8
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PPUSH
1961: CALL_OW 69
1965: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1966: LD_ADDR_VAR 0 7
1970: PUSH
1971: LD_INT 22
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 30
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2034: LD_ADDR_VAR 0 13
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 31
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 32
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_EXP 11
2095: PUSH
2096: LD_VAR 0 15
2100: ADD
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2524
// begin placed := false ;
2105: LD_ADDR_VAR 0 11
2109: PUSH
2110: LD_INT 0
2112: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 257
2122: PUSH
2123: LD_INT 1
2125: EQUAL
2126: IFFALSE 2251
// begin if UnitFilter ( bun , [ f_empty ] ) then
2128: LD_VAR 0 13
2132: PPUSH
2133: LD_INT 58
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: IFFALSE 2182
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 13
2154: PPUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 72
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// placed := true ;
2174: LD_ADDR_VAR 0 11
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// end ; if arm and not placed then
2182: LD_VAR 0 9
2186: PUSH
2187: LD_VAR 0 11
2191: NOT
2192: AND
2193: IFFALSE 2251
// begin for j in arm do
2195: LD_ADDR_VAR 0 10
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: FOR_IN
2206: IFFALSE 2249
// if UnitsInside ( j ) < 6 then
2208: LD_VAR 0 10
2212: PPUSH
2213: CALL_OW 313
2217: PUSH
2218: LD_INT 6
2220: LESS
2221: IFFALSE 2247
// begin PlaceHumanInUnit ( i , j ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_VAR 0 10
2232: PPUSH
2233: CALL_OW 52
// placed := true ;
2237: LD_ADDR_VAR 0 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// break ;
2245: GO 2249
// end ;
2247: GO 2205
2249: POP
2250: POP
// end ; end ; if GetClass ( i ) = 2 then
2251: LD_VAR 0 2
2255: PPUSH
2256: CALL_OW 257
2260: PUSH
2261: LD_INT 2
2263: EQUAL
2264: IFFALSE 2297
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 52
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: LD_INT 6
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
// placed := true ;
2287: LD_ADDR_VAR 0 11
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// continue ;
2295: GO 2102
// end ; if GetClass ( i ) = 3 then
2297: LD_VAR 0 2
2301: PPUSH
2302: CALL_OW 257
2306: PUSH
2307: LD_INT 3
2309: EQUAL
2310: IFFALSE 2414
// if fac then
2312: LD_VAR 0 7
2316: IFFALSE 2414
// begin if ct then
2318: LD_VAR 0 12
2322: IFFALSE 2350
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_VAR 0 12
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// placed := true ;
2342: LD_ADDR_VAR 0 11
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if placed then
2350: LD_VAR 0 11
2354: IFFALSE 2358
// continue ;
2356: GO 2102
// for j in fac do
2358: LD_ADDR_VAR 0 10
2362: PUSH
2363: LD_VAR 0 7
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2412
// if UnitsInside ( j ) < 6 then
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 313
2380: PUSH
2381: LD_INT 6
2383: LESS
2384: IFFALSE 2410
// begin PlaceHumanInUnit ( i , j ) ;
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_VAR 0 10
2395: PPUSH
2396: CALL_OW 52
// placed := true ;
2400: LD_ADDR_VAR 0 11
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// break ;
2408: GO 2412
// end ;
2410: GO 2368
2412: POP
2413: POP
// end ; if GetClass ( i ) = 4 then
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 257
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2491
// if lab then
2429: LD_VAR 0 8
2433: IFFALSE 2491
// begin for j in lab do
2435: LD_ADDR_VAR 0 10
2439: PUSH
2440: LD_VAR 0 8
2444: PUSH
2445: FOR_IN
2446: IFFALSE 2489
// if UnitsInside ( j ) < 6 then
2448: LD_VAR 0 10
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: IFFALSE 2487
// begin PlaceHumanInUnit ( i , j ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 52
// placed := true ;
2477: LD_ADDR_VAR 0 11
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// break ;
2485: GO 2489
// end ;
2487: GO 2445
2489: POP
2490: POP
// end ; if not placed then
2491: LD_VAR 0 11
2495: NOT
2496: IFFALSE 2522
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// ComHold ( i ) ;
2513: LD_VAR 0 2
2517: PPUSH
2518: CALL_OW 140
// end ; end ;
2522: GO 2102
2524: POP
2525: POP
// if ct then
2526: LD_VAR 0 12
2530: IFFALSE 2634
// if UnitsInside ( ct [ 1 ] ) then
2532: LD_VAR 0 12
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 313
2545: IFFALSE 2634
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 22
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 33
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2632
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 12
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: CALL_OW 313
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_VAR 0 12
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 313
2619: PPUSH
2620: CALL_OW 12
2624: ARRAY
2625: PPUSH
2626: CALL_OW 135
2630: GO 2581
2632: POP
2633: POP
// end ; end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_STRING GammaBase
2667: PPUSH
2668: EMPTY
2669: PPUSH
2670: CALL_OW 30
2674: ST_TO_ADDR
// if not blist then
2675: LD_VAR 0 2
2679: NOT
2680: IFFALSE 2720
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 52
2692: PUSH
2693: LD_INT 12
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: ST_TO_ADDR
// uc_side := 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation := 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// bc_kind1 := - 1 ;
2736: LD_ADDR_OWVAR 44
2740: PUSH
2741: LD_INT 1
2743: NEG
2744: ST_TO_ADDR
// bc_kind2 := - 1 ;
2745: LD_ADDR_OWVAR 45
2749: PUSH
2750: LD_INT 1
2752: NEG
2753: ST_TO_ADDR
// for i in blist do
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: FOR_IN
2765: IFFALSE 3041
// begin bc_type := i [ 1 ] ;
2767: LD_ADDR_OWVAR 42
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2781: LD_ADDR_OWVAR 43
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 5
2793: ARRAY
2794: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2795: LD_OWVAR 42
2799: PUSH
2800: LD_INT 6
2802: PUSH
2803: LD_INT 7
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: IN
2810: IFFALSE 2876
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2812: LD_STRING 06_remoteVehs_1
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 30
2822: NOT
2823: IFFALSE 2851
// begin bc_type := b_lab_full ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 8
2832: ST_TO_ADDR
// bc_kind1 := 10 ;
2833: LD_ADDR_OWVAR 44
2837: PUSH
2838: LD_INT 10
2840: ST_TO_ADDR
// bc_kind2 := 15 ;
2841: LD_ADDR_OWVAR 45
2845: PUSH
2846: LD_INT 15
2848: ST_TO_ADDR
// end else
2849: GO 2876
// begin bc_type := b_lab_half ;
2851: LD_ADDR_OWVAR 42
2855: PUSH
2856: LD_INT 7
2858: ST_TO_ADDR
// bc_kind1 := 10 ;
2859: LD_ADDR_OWVAR 44
2863: PUSH
2864: LD_INT 10
2866: ST_TO_ADDR
// bc_kind2 := - 1 ;
2867: LD_ADDR_OWVAR 45
2871: PUSH
2872: LD_INT 1
2874: NEG
2875: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2876: LD_OWVAR 42
2880: PUSH
2881: LD_INT 2
2883: EQUAL
2884: IFFALSE 2894
// bc_type := b_factory ;
2886: LD_ADDR_OWVAR 42
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// if bc_type = b_depot then
2894: LD_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2951
// begin bc_type := b_warehouse ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2912: LD_ADDR_EXP 37
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 3
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 47
2948: ST_TO_ADDR
// continue ;
2949: GO 2764
// end ; if bc_type = b_armoury then
2951: LD_OWVAR 42
2955: PUSH
2956: LD_INT 4
2958: EQUAL
2959: IFFALSE 2969
// bc_type = b_barracks ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 5
2968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 3
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 3
2996: PUSH
2997: LD_INT 4
2999: ARRAY
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 266
3015: PUSH
3016: LD_INT 32
3018: EQUAL
3019: IFFALSE 3039
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 7
3033: ARRAY
3034: PPUSH
3035: CALL_OW 431
// end ;
3039: GO 2764
3041: POP
3042: POP
// if not amDepot then
3043: LD_EXP 37
3047: NOT
3048: IFFALSE 3085
// begin bc_type := b_warehouse ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// bc_level := 6 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 6
3065: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3066: LD_ADDR_EXP 37
3070: PUSH
3071: LD_INT 52
3073: PPUSH
3074: LD_INT 12
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3085: LD_EXP 37
3089: PPUSH
3090: LD_STRING gamma
3092: PPUSH
3093: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 , 280 ] [ Difficulty ] ) ;
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 274
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 500
3112: PUSH
3113: LD_INT 420
3115: PUSH
3116: LD_INT 350
3118: PUSH
3119: LD_INT 280
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 274
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 200
3153: PPUSH
3154: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3158: LD_INT 22
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 3
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: IFFALSE 3434
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3226: LD_ADDR_VAR 0 6
3230: PUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: CALL_OW 250
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 251
3250: PPUSH
3251: LD_VAR 0 4
3255: PPUSH
3256: CALL_OW 254
3260: PPUSH
3261: CALL 79425 0 3
3265: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: LD_INT 19
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3281: LD_STRING 06_remoteVehs_1
3283: PPUSH
3284: LD_INT 0
3286: PPUSH
3287: CALL_OW 30
3291: IFFALSE 3314
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 22
3308: PPUSH
3309: CALL_OW 2
3313: ST_TO_ADDR
// for i in tmp do
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 6
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: CALL_OW 428
3349: PUSH
3350: LD_INT 0
3352: EQUAL
3353: IFFALSE 3430
// begin bc_type := blist [ 1 ] ;
3355: LD_ADDR_OWVAR 42
3359: PUSH
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 3
3394: ARRAY
3395: PPUSH
3396: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: LD_VAR 0 2
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 3
3417: ST_TO_ADDR
// if blist = 0 then
3418: LD_VAR 0 2
3422: PUSH
3423: LD_INT 0
3425: EQUAL
3426: IFFALSE 3430
// break ;
3428: GO 3432
// end ;
3430: GO 3324
3432: POP
3433: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3434: LD_STRING 06_remoteVehs_1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 30
3444: IFFALSE 3911
// begin bc_type = 36 ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 36
3453: ST_TO_ADDR
// bc_level = 4 ;
3454: LD_ADDR_OWVAR 43
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3462: LD_EXP 37
3466: PPUSH
3467: LD_INT 36
3469: PPUSH
3470: LD_INT 62
3472: PPUSH
3473: LD_INT 12
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL 17162 0 6
3486: PUSH
3487: LD_INT 92
3489: PUSH
3490: LD_INT 62
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: NOT
3510: AND
3511: IFFALSE 3528
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3513: LD_INT 62
3515: PPUSH
3516: LD_INT 12
3518: PPUSH
3519: LD_INT 3
3521: PPUSH
3522: CALL_OW 47
3526: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3528: LD_EXP 37
3532: PPUSH
3533: LD_INT 36
3535: PPUSH
3536: LD_INT 37
3538: PPUSH
3539: LD_INT 18
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL 17162 0 6
3552: PUSH
3553: LD_INT 92
3555: PUSH
3556: LD_INT 37
3558: PUSH
3559: LD_INT 18
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: NOT
3576: AND
3577: IFFALSE 3594
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3579: LD_INT 37
3581: PPUSH
3582: LD_INT 18
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 47
3592: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3594: LD_EXP 37
3598: PPUSH
3599: LD_INT 36
3601: PPUSH
3602: LD_INT 66
3604: PPUSH
3605: LD_INT 14
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL 17162 0 6
3618: PUSH
3619: LD_INT 92
3621: PUSH
3622: LD_INT 66
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: NOT
3642: AND
3643: IFFALSE 3660
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3645: LD_INT 66
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 4
3653: PPUSH
3654: CALL_OW 47
3658: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3660: LD_EXP 37
3664: PPUSH
3665: LD_INT 36
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: LD_INT 26
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL 17162 0 6
3684: IFFALSE 3699
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3686: LD_INT 74
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 36
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: NOT
3728: IFFALSE 3732
// exit ;
3730: GO 3911
// for i := 1 to [ 3 , 2 , 2 , 1 ] [ Difficulty ] do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: DOUBLE
3738: LD_INT 1
3740: DEC
3741: ST_TO_ADDR
3742: LD_INT 3
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_OWVAR 67
3764: ARRAY
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3909
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 , 2 ] [ Difficulty ] ;
3769: LD_ADDR_OWVAR 37
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_INT 2
3792: PPUSH
3793: CALL_OW 12
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: ST_TO_ADDR
// vc_engine = 1 ;
3817: LD_ADDR_OWVAR 39
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// vc_control = 2 ;
3825: LD_ADDR_OWVAR 38
3829: PUSH
3830: LD_INT 2
3832: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3833: LD_ADDR_OWVAR 40
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_INT 4
3881: PPUSH
3882: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 56
3893: PPUSH
3894: LD_INT 17
3896: PPUSH
3897: LD_INT 9
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 50
// end ;
3907: GO 3766
3909: POP
3910: POP
// end ; end ;
3911: LD_VAR 0 1
3915: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
// uc_side = 1 ;
3922: LD_ADDR_OWVAR 20
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// uc_nation = 1 ;
3930: LD_ADDR_OWVAR 21
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3938: LD_ADDR_EXP 14
3942: PUSH
3943: LD_STRING Denis
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_STRING 06c_
3951: PPUSH
3952: CALL 45052 0 3
3956: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_INT 4
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3972: LD_ADDR_EXP 15
3976: PUSH
3977: LD_STRING Joan
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_STRING 06c_
3985: PPUSH
3986: CALL 45052 0 3
3990: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4006: LD_STRING GladstoneIn07
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 30
4016: NOT
4017: IFFALSE 4091
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4019: LD_ADDR_EXP 8
4023: PUSH
4024: LD_STRING Gladstone
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING 06c_
4032: PPUSH
4033: CALL 45052 0 3
4037: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4038: LD_EXP 8
4042: NOT
4043: PUSH
4044: LD_STRING GladstoneStayInDelta
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 30
4054: AND
4055: IFFALSE 4076
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4057: LD_ADDR_EXP 8
4061: PUSH
4062: LD_STRING Gladstone
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_STRING 05_
4070: PPUSH
4071: CALL 45052 0 3
4075: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4076: LD_EXP 8
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4091: LD_STRING LisaStayInDelta
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 30
4101: IFFALSE 4137
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4103: LD_ADDR_EXP 6
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_STRING 05_
4116: PPUSH
4117: CALL 45052 0 3
4121: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4122: LD_EXP 6
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4137: LD_STRING BobbyStayInDelta
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: CALL_OW 30
4147: IFFALSE 4183
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4149: LD_ADDR_EXP 4
4153: PUSH
4154: LD_STRING Bobby
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_STRING 05_
4162: PPUSH
4163: CALL 45052 0 3
4167: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4168: LD_EXP 4
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4183: LD_STRING CyrusStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4229
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4195: LD_ADDR_EXP 5
4199: PUSH
4200: LD_STRING Cyrus
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_STRING 05_
4208: PPUSH
4209: CALL 45052 0 3
4213: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4214: LD_EXP 5
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4229: LD_STRING BrownStayInDelta
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 30
4239: IFFALSE 4275
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4241: LD_ADDR_EXP 2
4245: PUSH
4246: LD_STRING Brown
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING 05_
4254: PPUSH
4255: CALL 45052 0 3
4259: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4260: LD_EXP 2
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4275: LD_STRING DonaldsonStayInDelta
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 30
4285: IFFALSE 4321
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4287: LD_ADDR_EXP 3
4291: PUSH
4292: LD_STRING Donaldson
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_STRING 05_
4300: PPUSH
4301: CALL 45052 0 3
4305: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4306: LD_EXP 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: LD_STRING OthersStayInDelta
4328: PPUSH
4329: CALL_OW 31
4333: ST_TO_ADDR
// if other > 2 then
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: GREATER
4342: IFFALSE 4387
// begin for j = 1 to 2 do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: DOUBLE
4350: LD_INT 1
4352: DEC
4353: ST_TO_ADDR
4354: LD_INT 2
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4383
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 3
4369: ARRAY
4370: PPUSH
4371: LD_INT 4
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 49
4381: GO 4357
4383: POP
4384: POP
// end else
4385: GO 4430
// begin for j = 1 to other do
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 4
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4428
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4405: LD_VAR 0 4
4409: PUSH
4410: LD_VAR 0 3
4414: ARRAY
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
4426: GO 4402
4428: POP
4429: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4430: LD_ADDR_VAR 0 4
4434: PUSH
4435: LD_STRING 06_other_apemans
4437: PPUSH
4438: CALL_OW 31
4442: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
4443: LD_VAR 0 4
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_OWVAR 67
4470: ARRAY
4471: GREATEREQUAL
4472: IFFALSE 4505
// j := [ 5 , 4 , 3 , 3 ] [ Difficulty ] else
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: ST_TO_ADDR
4503: GO 4515
// j := other ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_VAR 0 4
4514: ST_TO_ADDR
// for i = 1 to j do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4556
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
4554: GO 4530
4556: POP
4557: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 70
4589: PPUSH
4590: LD_INT 53
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: CALL_OW 111
// firstAttack = 1 ;
4600: LD_ADDR_EXP 33
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 1
4612: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4624: LD_ADDR_VAR 0 8
4628: PUSH
4629: LD_STRING 07_vehicles
4631: PPUSH
4632: EMPTY
4633: PPUSH
4634: CALL_OW 30
4638: ST_TO_ADDR
// macmilan_squad := [ ] ;
4639: LD_ADDR_EXP 42
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// tmp := [ ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// tmp_vehs := [ ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// uc_side := 1 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// uc_nation := 1 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if vehicles then
4676: LD_VAR 0 8
4680: IFFALSE 4839
// begin k := 1 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 8
4704: PUSH
4705: LD_INT 4
4707: DIV
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4837
// begin vc_chassis = vehicles [ k ] ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_VAR 0 8
4721: PUSH
4722: LD_VAR 0 3
4726: ARRAY
4727: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4728: LD_ADDR_OWVAR 39
4732: PUSH
4733: LD_VAR 0 8
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ARRAY
4747: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4748: LD_ADDR_OWVAR 38
4752: PUSH
4753: LD_VAR 0 8
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PLUS
4766: ARRAY
4767: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4768: LD_ADDR_OWVAR 40
4772: PUSH
4773: LD_VAR 0 8
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PLUS
4786: ARRAY
4787: ST_TO_ADDR
// k := k + 4 ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 4
4800: PLUS
4801: ST_TO_ADDR
// veh := CreateVehicle ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: CALL_OW 45
4811: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4812: LD_ADDR_VAR 0 7
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 9
4829: PPUSH
4830: CALL_OW 2
4834: ST_TO_ADDR
// end ;
4835: GO 4709
4837: POP
4838: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4839: LD_ADDR_EXP 1
4843: PUSH
4844: LD_STRING JMM
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_EXP 44
4854: PPUSH
4855: CALL 45052 0 3
4859: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4860: LD_EXP 12
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_EXP 12
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: OR
4878: PUSH
4879: LD_EXP 2
4883: NOT
4884: AND
4885: IFFALSE 4943
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4887: LD_ADDR_EXP 2
4891: PUSH
4892: LD_STRING Brown
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_EXP 44
4902: PPUSH
4903: CALL 45052 0 3
4907: ST_TO_ADDR
// if Brown then
4908: LD_EXP 2
4912: IFFALSE 4943
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_VAR 0 6
4923: PPUSH
4924: LD_VAR 0 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: PPUSH
4933: LD_EXP 2
4937: PPUSH
4938: CALL_OW 1
4942: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4943: LD_EXP 12
4947: PUSH
4948: LD_INT 2
4950: EQUAL
4951: PUSH
4952: LD_EXP 12
4956: PUSH
4957: LD_INT 3
4959: EQUAL
4960: OR
4961: PUSH
4962: LD_EXP 3
4966: NOT
4967: AND
4968: IFFALSE 5026
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4970: LD_ADDR_EXP 3
4974: PUSH
4975: LD_STRING Donaldson
4977: PPUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 44
4985: PPUSH
4986: CALL 45052 0 3
4990: ST_TO_ADDR
// if Donaldson then
4991: LD_EXP 3
4995: IFFALSE 5026
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_EXP 3
5020: PPUSH
5021: CALL_OW 1
5025: ST_TO_ADDR
// end ; if not Bobby then
5026: LD_EXP 4
5030: NOT
5031: IFFALSE 5089
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5033: LD_ADDR_EXP 4
5037: PUSH
5038: LD_STRING Bobby
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_EXP 44
5048: PPUSH
5049: CALL 45052 0 3
5053: ST_TO_ADDR
// if Bobby then
5054: LD_EXP 4
5058: IFFALSE 5089
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5060: LD_ADDR_VAR 0 6
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: PLUS
5078: PPUSH
5079: LD_EXP 4
5083: PPUSH
5084: CALL_OW 1
5088: ST_TO_ADDR
// end ; if not Cyrus then
5089: LD_EXP 5
5093: NOT
5094: IFFALSE 5152
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5096: LD_ADDR_EXP 5
5100: PUSH
5101: LD_STRING Cyrus
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_EXP 44
5111: PPUSH
5112: CALL 45052 0 3
5116: ST_TO_ADDR
// if Cyrus then
5117: LD_EXP 5
5121: IFFALSE 5152
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5123: LD_ADDR_VAR 0 6
5127: PUSH
5128: LD_VAR 0 6
5132: PPUSH
5133: LD_VAR 0 6
5137: PUSH
5138: LD_INT 1
5140: PLUS
5141: PPUSH
5142: LD_EXP 5
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; if not Lisa then
5152: LD_EXP 6
5156: NOT
5157: IFFALSE 5215
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5159: LD_ADDR_EXP 6
5163: PUSH
5164: LD_STRING Lisa
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 44
5174: PPUSH
5175: CALL 45052 0 3
5179: ST_TO_ADDR
// if Lisa then
5180: LD_EXP 6
5184: IFFALSE 5215
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5186: LD_ADDR_VAR 0 6
5190: PUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: LD_VAR 0 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: PPUSH
5205: LD_EXP 6
5209: PPUSH
5210: CALL_OW 1
5214: ST_TO_ADDR
// end ; if not Frank then
5215: LD_EXP 7
5219: NOT
5220: IFFALSE 5278
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5222: LD_ADDR_EXP 7
5226: PUSH
5227: LD_STRING Frank
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_EXP 44
5237: PPUSH
5238: CALL 45052 0 3
5242: ST_TO_ADDR
// if Frank then
5243: LD_EXP 7
5247: IFFALSE 5278
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: LD_VAR 0 6
5258: PPUSH
5259: LD_VAR 0 6
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: PPUSH
5268: LD_EXP 7
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// end ; if not Kikuchi then
5278: LD_EXP 9
5282: NOT
5283: IFFALSE 5341
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5285: LD_ADDR_EXP 9
5289: PUSH
5290: LD_STRING Kikuchi
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: LD_EXP 44
5300: PPUSH
5301: CALL 45052 0 3
5305: ST_TO_ADDR
// if Kikuchi then
5306: LD_EXP 9
5310: IFFALSE 5341
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: LD_VAR 0 6
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: PPUSH
5331: LD_EXP 9
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// end ; if not Gladstone then
5341: LD_EXP 8
5345: NOT
5346: IFFALSE 5404
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5348: LD_ADDR_EXP 8
5352: PUSH
5353: LD_STRING Gladstone
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 44
5363: PPUSH
5364: CALL 45052 0 3
5368: ST_TO_ADDR
// if Gladstone then
5369: LD_EXP 8
5373: IFFALSE 5404
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_VAR 0 6
5384: PPUSH
5385: LD_VAR 0 6
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: PPUSH
5394: LD_EXP 8
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// end ; if not Khatam then
5404: LD_EXP 10
5408: NOT
5409: IFFALSE 5467
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5411: LD_ADDR_EXP 10
5415: PUSH
5416: LD_STRING Khatam
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_EXP 44
5426: PPUSH
5427: CALL 45052 0 3
5431: ST_TO_ADDR
// if Khatam then
5432: LD_EXP 10
5436: IFFALSE 5467
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: LD_VAR 0 6
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: PPUSH
5457: LD_EXP 10
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_STRING 07c_others
5474: PPUSH
5475: CALL_OW 31
5479: ST_TO_ADDR
// macmilan_squad := others ;
5480: LD_ADDR_EXP 42
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// if others then
5490: LD_VAR 0 5
5494: IFFALSE 5582
// for i in others do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 5
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5580
// if GetClass ( i ) = 3 then
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 257
5518: PUSH
5519: LD_INT 3
5521: EQUAL
5522: IFFALSE 5549
// tmp := Insert ( tmp , 1 , i ) else
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: CALL_OW 2
5546: ST_TO_ADDR
5547: GO 5578
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 6
5558: PPUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: PPUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 1
5577: ST_TO_ADDR
5578: GO 5506
5580: POP
5581: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: IFFALSE 5640
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 70
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// RemoveUnit ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 64
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$1 ) ;
5640: LD_INT 35
5642: PPUSH
5643: CALL_OW 67
// if tmp then
5647: LD_VAR 0 6
5651: IFFALSE 5836
// begin for i in tmp do
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_VAR 0 6
5662: PUSH
5663: FOR_IN
5664: IFFALSE 5834
// begin SetDir ( i , 3 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 233
// if tmp_vehs then
5678: LD_VAR 0 7
5682: IFFALSE 5760
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5684: LD_VAR 0 7
5688: PUSH
5689: LD_INT 1
5691: ARRAY
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5700: LD_VAR 0 7
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PPUSH
5709: LD_INT 78
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5740: LD_ADDR_VAR 0 7
5744: PUSH
5745: LD_VAR 0 7
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// end else
5758: GO 5775
// PlaceUnitArea ( i , GammaSupport , false ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 4
5767: PPUSH
5768: LD_INT 0
5770: PPUSH
5771: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 77
5782: PPUSH
5783: LD_INT 16
5785: PPUSH
5786: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 65
5797: PPUSH
5798: LD_INT 24
5800: PPUSH
5801: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5812: LD_INT 4
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: NOT
5830: IFFALSE 5805
// end ;
5832: GO 5663
5834: POP
5835: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: LD_INT 0
5846: PPUSH
5847: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 77
5858: PPUSH
5859: LD_INT 16
5861: PPUSH
5862: CALL_OW 111
// end ;
5866: LD_VAR 0 1
5870: RET
// export function PrepareSikorsky ; begin
5871: LD_INT 0
5873: PPUSH
// uc_side = 4 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 4
5881: ST_TO_ADDR
// uc_nation = 1 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5890: LD_ADDR_EXP 16
5894: PUSH
5895: LD_STRING Sikorski
5897: PPUSH
5898: LD_INT 0
5900: PPUSH
5901: LD_STRING 
5903: PPUSH
5904: CALL 45052 0 3
5908: ST_TO_ADDR
// vc_engine = 1 ;
5909: LD_ADDR_OWVAR 39
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_control = 1 ;
5917: LD_ADDR_OWVAR 38
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 , 4 ] [ Difficulty ] ;
5925: LD_ADDR_OWVAR 40
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: ST_TO_ADDR
// vc_chassis = 4 ;
5954: LD_ADDR_OWVAR 37
5958: PUSH
5959: LD_INT 4
5961: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5962: LD_ADDR_EXP 17
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5972: LD_EXP 17
5976: PPUSH
5977: LD_INT 3
5979: PPUSH
5980: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5984: LD_INT 35
5986: PPUSH
5987: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5991: LD_EXP 17
5995: PPUSH
5996: LD_INT 18
5998: PPUSH
5999: LD_INT 5
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 305
6018: IFFALSE 5984
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6020: LD_EXP 16
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 5
6041: PPUSH
6042: CALL_OW 113
// end ;
6046: LD_VAR 0 1
6050: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
// InitHc ;
6057: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 , 3 ] [ Difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_OWVAR 67
6093: ARRAY
6094: PUSH
6095: FOR_TO
6096: IFFALSE 6212
// begin uc_side = 4 ;
6098: LD_ADDR_OWVAR 20
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// uc_nation = 1 ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 53
6195: PPUSH
6196: LD_INT 23
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6095
6212: POP
6213: POP
// for i = 1 to 2 do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: DOUBLE
6220: LD_INT 1
6222: DEC
6223: ST_TO_ADDR
6224: LD_INT 2
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6344
// begin uc_side = 4 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 4
6237: ST_TO_ADDR
// uc_nation = 1 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 4
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: CALL_OW 12
6278: PPUSH
6279: CALL_OW 380
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 3
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_INT 9
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 53
6327: PPUSH
6328: LD_INT 23
6330: PPUSH
6331: CALL_OW 111
// wait ( 0 0$1 ) ;
6335: LD_INT 35
6337: PPUSH
6338: CALL_OW 67
// end ;
6342: GO 6227
6344: POP
6345: POP
// for i = 1 to [ 5 , 5 , 4 , 3 ] [ Difficulty ] do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6615
// begin uc_side = 4 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// uc_nation = 1 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// vc_engine = 1 ;
6399: LD_ADDR_OWVAR 39
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// vc_control = 1 ;
6407: LD_ADDR_OWVAR 38
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6415: LD_ADDR_OWVAR 40
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: LD_INT 6
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 4
6445: MOD
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: ARRAY
6451: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6452: LD_ADDR_OWVAR 37
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: LD_INT 4
6482: MOD
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: ARRAY
6488: ST_TO_ADDR
// veh = CreateVehicle ;
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: CALL_OW 45
6498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 3
6506: PPUSH
6507: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 9
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// InitHc ;
6526: CALL_OW 19
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 5
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un = CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6591: LD_VAR 0 3
6595: PPUSH
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 23
6601: PPUSH
6602: CALL_OW 111
// wait ( 0 0$5 ) ;
6606: LD_INT 175
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6380
6615: POP
6616: POP
// end ; end_of_file
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussianCommander ; begin
6622: LD_INT 0
6624: PPUSH
// uc_side = 3 ;
6625: LD_ADDR_OWVAR 20
6629: PUSH
6630: LD_INT 3
6632: ST_TO_ADDR
// uc_nation = 3 ;
6633: LD_ADDR_OWVAR 21
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6641: LD_ADDR_EXP 24
6645: PUSH
6646: LD_STRING Borodin
6648: PPUSH
6649: CALL_OW 25
6653: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6654: LD_EXP 24
6658: PPUSH
6659: LD_INT 25
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL_OW 49
// end ;
6669: LD_VAR 0 1
6673: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// for i = 1 to 10 do
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: DOUBLE
6686: LD_INT 1
6688: DEC
6689: ST_TO_ADDR
6690: LD_INT 10
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6768
// begin uc_side = 6 ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_INT 6
6703: ST_TO_ADDR
// uc_nation = 3 ;
6704: LD_ADDR_OWVAR 21
6708: PUSH
6709: LD_INT 3
6711: ST_TO_ADDR
// hc_gallery =  ;
6712: LD_ADDR_OWVAR 33
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hc_name =  ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6728: LD_INT 0
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6693
6768: POP
6769: POP
// for i = 1 to 3 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 3
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6933
// begin uc_side = 6 ;
6786: LD_ADDR_OWVAR 20
6790: PUSH
6791: LD_INT 6
6793: ST_TO_ADDR
// uc_nation = 3 ;
6794: LD_ADDR_OWVAR 21
6798: PUSH
6799: LD_INT 3
6801: ST_TO_ADDR
// vc_engine = 1 ;
6802: LD_ADDR_OWVAR 39
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// vc_control = 1 ;
6810: LD_ADDR_OWVAR 38
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6818: LD_ADDR_OWVAR 40
6822: PUSH
6823: LD_INT 43
6825: PUSH
6826: LD_INT 44
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 1
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: CALL_OW 12
6843: ARRAY
6844: ST_TO_ADDR
// vc_chassis = 22 ;
6845: LD_ADDR_OWVAR 37
6849: PUSH
6850: LD_INT 22
6852: ST_TO_ADDR
// veh = CreateVehicle ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: CALL_OW 45
6862: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 49
// hc_gallery =  ;
6878: LD_ADDR_OWVAR 33
6882: PUSH
6883: LD_STRING 
6885: ST_TO_ADDR
// hc_name =  ;
6886: LD_ADDR_OWVAR 26
6890: PUSH
6891: LD_STRING 
6893: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 3
6899: PPUSH
6900: LD_INT 4
6902: PPUSH
6903: CALL_OW 380
// un = CreateHuman ;
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: CALL_OW 44
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_VAR 0 4
6926: PPUSH
6927: CALL_OW 52
// end ;
6931: GO 6783
6933: POP
6934: POP
// end ;
6935: LD_VAR 0 1
6939: RET
// export function PrepareRussians ; var i , un ; begin
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to 8 do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_INT 8
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7045
// begin uc_side = 3 ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_INT 3
6968: ST_TO_ADDR
// uc_nation = 3 ;
6969: LD_ADDR_OWVAR 21
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_gallery =  ;
6977: LD_ADDR_OWVAR 33
6981: PUSH
6982: LD_STRING 
6984: ST_TO_ADDR
// hc_name =  ;
6985: LD_ADDR_OWVAR 26
6989: PUSH
6990: LD_STRING 
6992: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6993: LD_INT 0
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_EXP 25
7003: PPUSH
7004: LD_EXP 26
7008: PPUSH
7009: CALL_OW 12
7013: PPUSH
7014: CALL_OW 380
// un = CreateHuman ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: CALL_OW 44
7027: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7028: LD_VAR 0 3
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 49
// end ;
7043: GO 6958
7045: POP
7046: POP
// for i = 1 to 4 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 4
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7147
// begin uc_side = 3 ;
7063: LD_ADDR_OWVAR 20
7067: PUSH
7068: LD_INT 3
7070: ST_TO_ADDR
// uc_nation = 3 ;
7071: LD_ADDR_OWVAR 21
7075: PUSH
7076: LD_INT 3
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: LD_EXP 25
7105: PPUSH
7106: LD_EXP 26
7110: PPUSH
7111: CALL_OW 12
7115: PPUSH
7116: CALL_OW 380
// un = CreateHuman ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: CALL_OW 44
7129: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7060
7147: POP
7148: POP
// for i = 1 to 3 do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_INT 3
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7249
// begin uc_side = 3 ;
7165: LD_ADDR_OWVAR 20
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// uc_nation = 3 ;
7173: LD_ADDR_OWVAR 21
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
// hc_gallery =  ;
7181: LD_ADDR_OWVAR 33
7185: PUSH
7186: LD_STRING 
7188: ST_TO_ADDR
// hc_name =  ;
7189: LD_ADDR_OWVAR 26
7193: PUSH
7194: LD_STRING 
7196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7197: LD_INT 0
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_EXP 25
7207: PPUSH
7208: LD_EXP 26
7212: PPUSH
7213: CALL_OW 12
7217: PPUSH
7218: CALL_OW 380
// un = CreateHuman ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: CALL_OW 44
7231: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 49
// end ;
7247: GO 7162
7249: POP
7250: POP
// for i = 1 to 2 do
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: DOUBLE
7257: LD_INT 1
7259: DEC
7260: ST_TO_ADDR
7261: LD_INT 2
7263: PUSH
7264: FOR_TO
7265: IFFALSE 7351
// begin uc_side = 3 ;
7267: LD_ADDR_OWVAR 20
7271: PUSH
7272: LD_INT 3
7274: ST_TO_ADDR
// uc_nation = 3 ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_name =  ;
7291: LD_ADDR_OWVAR 26
7295: PUSH
7296: LD_STRING 
7298: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 4
7304: PPUSH
7305: LD_EXP 25
7309: PPUSH
7310: LD_EXP 26
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 380
// un = CreateHuman ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: CALL_OW 44
7333: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 3
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// end ;
7349: GO 7264
7351: POP
7352: POP
// end ; end_of_file
7353: LD_VAR 0 1
7357: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7363: LD_ADDR_VAR 0 1
7367: PUSH
7368: LD_VAR 0 1
7372: PUSH
7373: LD_EXP 1
7377: PUSH
7378: LD_EXP 2
7382: PUSH
7383: LD_EXP 3
7387: PUSH
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 5
7397: PUSH
7398: LD_EXP 6
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 8
7412: PUSH
7413: LD_EXP 9
7417: PUSH
7418: LD_EXP 10
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 12
7458: ARRAY
7459: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 258
7469: PUSH
7470: LD_INT 1
7472: EQUAL
7473: IFFALSE 7491
// Say ( speaker , dialogMID ) else
7475: LD_VAR 0 6
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 88
7489: GO 7505
// Say ( speaker , dialogFID ) ;
7491: LD_VAR 0 6
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 88
// result := speaker ;
7505: LD_ADDR_VAR 0 4
7509: PUSH
7510: LD_VAR 0 6
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 4
7519: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// uc_side := GetSide ( b ) ;
7525: LD_ADDR_OWVAR 20
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 255
7539: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7540: LD_ADDR_OWVAR 21
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: CALL_OW 248
7554: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7570: LD_ADDR_VAR 0 5
7574: PUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 254
7584: PUSH
7585: LD_INT 3
7587: MINUS
7588: ST_TO_ADDR
// if dir < 0 then
7589: LD_VAR 0 5
7593: PUSH
7594: LD_INT 0
7596: LESS
7597: IFFALSE 7613
// dir := 6 + dir ;
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_VAR 0 5
7611: PLUS
7612: ST_TO_ADDR
// un := CreateHuman ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: CALL_OW 44
7622: ST_TO_ADDR
// SetDir ( un , dir ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 52
// end ;
7651: LD_VAR 0 3
7655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
// for i = 1 to count do
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 6
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7759
// begin uc_side = side ;
7680: LD_ADDR_OWVAR 20
7684: PUSH
7685: LD_VAR 0 1
7689: ST_TO_ADDR
// uc_nation = nation ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_VAR 0 2
7699: ST_TO_ADDR
// hc_gallery =  ;
7700: LD_ADDR_OWVAR 33
7704: PUSH
7705: LD_STRING 
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 10
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7743: LD_VAR 0 10
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 52
// end ;
7757: GO 7677
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 7
7765: RET
// export function PrepareDifficulty ; begin
7766: LD_INT 0
7768: PPUSH
// case Difficulty of 1 :
7769: LD_OWVAR 67
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7801
7782: POP
// begin RuSolMinLevel = 3 ;
7783: LD_ADDR_EXP 25
7787: PUSH
7788: LD_INT 3
7790: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7791: LD_ADDR_EXP 26
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; 2 :
7799: GO 7979
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7880
7809: POP
// begin RuSolMinLevel = 5 ;
7810: LD_ADDR_EXP 25
7814: PUSH
7815: LD_INT 5
7817: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7818: LD_ADDR_EXP 26
7822: PUSH
7823: LD_INT 6
7825: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7826: LD_INT 51
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7839: LD_INT 57
7841: PPUSH
7842: LD_INT 3
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7852: LD_INT 57
7854: PPUSH
7855: LD_INT 6
7857: PPUSH
7858: LD_INT 2
7860: PPUSH
7861: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7865: LD_INT 51
7867: PPUSH
7868: LD_INT 6
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: CALL_OW 322
// end ; 3 .. 4 :
7878: GO 7979
7880: LD_INT 3
7882: DOUBLE
7883: GREATEREQUAL
7884: IFFALSE 7892
7886: LD_INT 4
7888: DOUBLE
7889: LESSEQUAL
7890: IFTRUE 7894
7892: GO 7978
7894: POP
// begin RuSolMinLevel = 5 ;
7895: LD_ADDR_EXP 25
7899: PUSH
7900: LD_INT 5
7902: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7903: LD_ADDR_EXP 26
7907: PUSH
7908: LD_INT 6
7910: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7911: LD_INT 57
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7924: LD_INT 51
7926: PPUSH
7927: LD_INT 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7937: LD_INT 52
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 1
7945: PPUSH
7946: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 6
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 6
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// end ; end ;
7976: GO 7979
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7984: LD_INT 0
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 22
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 69
8023: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8024: LD_ADDR_VAR 0 4
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: LD_INT 79
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 94
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 29
8067: PUSH
8068: LD_INT 106
8070: PUSH
8071: LD_INT 97
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 26
8085: PUSH
8086: LD_INT 93
8088: PUSH
8089: LD_INT 97
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 100
8106: PUSH
8107: LD_INT 89
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 17
8121: PUSH
8122: LD_INT 96
8124: PUSH
8125: LD_INT 89
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 78
8142: PUSH
8143: LD_INT 94
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: LD_INT 95
8160: PUSH
8161: LD_INT 82
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 104
8178: PUSH
8179: LD_INT 85
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 81
8196: PUSH
8197: LD_INT 78
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 109
8214: PUSH
8215: LD_INT 90
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 88
8232: PUSH
8233: LD_INT 79
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 76
8250: PUSH
8251: LD_INT 87
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 96
8268: PUSH
8269: LD_INT 97
8271: PUSH
8272: LD_INT 5
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 85
8286: PUSH
8287: LD_INT 84
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 88
8304: PUSH
8305: LD_INT 95
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 19
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 89
8325: PUSH
8326: LD_INT 4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 16
8337: PUSH
8338: LD_INT 97
8340: PUSH
8341: LD_INT 86
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 100
8358: PUSH
8359: LD_INT 85
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: ST_TO_ADDR
// for i := 1 to buildingsTab do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 4
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8481
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: ARRAY
8455: PUSH
8456: LD_INT 3
8458: ARRAY
8459: PPUSH
8460: LD_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PUSH
8471: LD_INT 4
8473: ARRAY
8474: PPUSH
8475: CALL_OW 205
8479: GO 8407
8481: POP
8482: POP
// end ;
8483: LD_VAR 0 1
8487: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8488: LD_INT 0
8490: PPUSH
8491: PPUSH
// for i in charactersList do
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8521
// SaveCharacters ( i , ident ) ;
8505: LD_VAR 0 4
8509: PPUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 38
8519: GO 8502
8521: POP
8522: POP
// end ;
8523: LD_VAR 0 3
8527: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 8
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8762
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8688: LD_VAR 0 8
8692: PUSH
8693: LD_VAR 0 5
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 321
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 8
8717: PUSH
8718: LD_VAR 0 5
8722: ARRAY
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: CALL_OW 482
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: AND
8738: IFFALSE 8760
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 8
8749: PUSH
8750: LD_VAR 0 5
8754: ARRAY
8755: PPUSH
8756: CALL_OW 184
8760: GO 8685
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 4
8768: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8779: LD_ADDR_VAR 0 6
8783: PUSH
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 56
8803: PUSH
8804: EMPTY
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 700
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 60
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 8
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 9
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: PUSH
8892: LD_EXP 24
8896: PUSH
8897: EMPTY
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8901: LD_ADDR_VAR 0 7
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 22
8913: PUSH
8914: LD_VAR 0 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 58
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 251
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 30
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 251
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if barrackList > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9186
// begin if turretList = 0 then
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: EQUAL
9048: IFFALSE 9090
// begin if soldiers_list > 0 then
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 0
9057: GREATER
9058: IFFALSE 9088
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9060: LD_VAR 0 6
9064: PPUSH
9065: LD_VAR 0 9
9069: PUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 9
9077: PPUSH
9078: CALL_OW 12
9082: ARRAY
9083: PPUSH
9084: CALL_OW 120
// end else
9088: GO 9186
// begin for i in barrackList do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9184
// begin insideUnits = UnitsInside ( i ) ;
9103: LD_ADDR_VAR 0 10
9107: PUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 313
9117: ST_TO_ADDR
// if insideUnits > 0 then
9118: LD_VAR 0 10
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: IFFALSE 9150
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9128: LD_VAR 0 10
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// if soldiers_list > 0 then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_INT 0
9157: GREATER
9158: IFFALSE 9182
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 120
// end ;
9182: GO 9100
9184: POP
9185: POP
// end ; end ; end ;
9186: LD_VAR 0 3
9190: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// for i = 1 to vehCount do
9199: LD_ADDR_VAR 0 8
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9422
// begin uc_side = side ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_VAR 0 1
9226: ST_TO_ADDR
// uc_nation = nation ;
9227: LD_ADDR_OWVAR 21
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// vc_Chassis = 22 ;
9237: LD_ADDR_OWVAR 37
9241: PUSH
9242: LD_INT 22
9244: ST_TO_ADDR
// vc_engine = 1 ;
9245: LD_ADDR_OWVAR 39
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// vc_control = 1 ;
9253: LD_ADDR_OWVAR 38
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9261: LD_ADDR_OWVAR 40
9265: PUSH
9266: LD_INT 43
9268: PUSH
9269: LD_INT 44
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 2
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// veh = CreateVehicle ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: CALL_OW 45
9297: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9298: LD_VAR 0 12
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9315: LD_ADDR_EXP 32
9319: PUSH
9320: LD_EXP 32
9324: PUSH
9325: LD_VAR 0 12
9329: ADD
9330: ST_TO_ADDR
// hc_class = 3 ;
9331: LD_ADDR_OWVAR 28
9335: PUSH
9336: LD_INT 3
9338: ST_TO_ADDR
// hc_name =  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_gallery =  ;
9347: LD_ADDR_OWVAR 33
9351: PUSH
9352: LD_STRING 
9354: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: LD_EXP 25
9365: PPUSH
9366: LD_EXP 26
9370: PPUSH
9371: CALL_OW 12
9375: PPUSH
9376: CALL_OW 380
// un = CreateHuman ;
9380: LD_ADDR_VAR 0 10
9384: PUSH
9385: CALL_OW 44
9389: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9390: LD_VAR 0 10
9394: PPUSH
9395: LD_VAR 0 12
9399: PPUSH
9400: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9404: LD_ADDR_EXP 32
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 10
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9214
9422: POP
9423: POP
// end ;
9424: LD_VAR 0 7
9428: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_INT 0
9464: EQUAL
9465: PUSH
9466: LD_EXP 32
9470: AND
9471: IFFALSE 9758
// begin for i in defenders_list do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_EXP 32
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9756
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: LD_INT 63
9493: PPUSH
9494: LD_INT 75
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 8
9504: GREATER
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: AND
9517: IFFALSE 9536
// ComMoveXY ( i , 63 , 75 ) else
9519: LD_VAR 0 4
9523: PPUSH
9524: LD_INT 63
9526: PPUSH
9527: LD_INT 75
9529: PPUSH
9530: CALL_OW 111
9534: GO 9754
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 3
9548: EQUAL
9549: PUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 310
9559: NOT
9560: AND
9561: PUSH
9562: LD_VAR 0 4
9566: PPUSH
9567: CALL_OW 314
9571: NOT
9572: AND
9573: IFFALSE 9626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_EXP 32
9584: PPUSH
9585: LD_INT 58
9587: PUSH
9588: EMPTY
9589: LIST
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: LD_INT 1000
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PPUSH
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL_OW 74
9619: PPUSH
9620: CALL_OW 120
9624: GO 9754
// if GetFuel ( i ) < 100 then
9626: LD_VAR 0 4
9630: PPUSH
9631: CALL_OW 261
9635: PUSH
9636: LD_INT 100
9638: LESS
9639: IFFALSE 9655
// SetFuel ( defenders_list , 100 ) else
9641: LD_EXP 32
9645: PPUSH
9646: LD_INT 100
9648: PPUSH
9649: CALL_OW 240
9653: GO 9754
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 263
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: PUSH
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL_OW 256
9678: PUSH
9679: LD_INT 990
9681: LESS
9682: AND
9683: IFFALSE 9754
// begin veh := i ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_VAR 0 4
9694: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 311
9709: ST_TO_ADDR
// if veh then
9710: LD_VAR 0 7
9714: IFFALSE 9754
// begin ComMoveXY ( i , 63 , 75 ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_INT 63
9723: PPUSH
9724: LD_INT 75
9726: PPUSH
9727: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9740: LD_VAR 0 8
9744: PPUSH
9745: LD_VAR 0 7
9749: PPUSH
9750: CALL_OW 189
// end ; end ; end ;
9754: GO 9483
9756: POP
9757: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_VAR 0 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: PPUSH
9783: CALL_OW 70
9787: ST_TO_ADDR
// if tmp and defenders_list then
9788: LD_VAR 0 6
9792: PUSH
9793: LD_EXP 32
9797: AND
9798: IFFALSE 9967
// for i in defenders_list do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_EXP 32
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9965
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: CALL_OW 257
9822: PUSH
9823: LD_INT 3
9825: EQUAL
9826: PUSH
9827: LD_VAR 0 4
9831: PPUSH
9832: CALL_OW 310
9836: NOT
9837: AND
9838: IFFALSE 9877
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_EXP 32
9849: PPUSH
9850: LD_INT 58
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 72
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: PPUSH
9871: CALL_OW 120
9875: GO 9963
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 314
9886: NOT
9887: PUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 308
9902: AND
9903: IFFALSE 9931
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 6
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL_OW 74
9924: PPUSH
9925: CALL_OW 115
9929: GO 9963
// if not IsInArea ( i , defenseArea ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL_OW 308
9945: NOT
9946: IFFALSE 9963
// ComMoveXY ( i , 63 , 75 ) ;
9948: LD_VAR 0 4
9952: PPUSH
9953: LD_INT 63
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: CALL_OW 111
// end ;
9963: GO 9810
9965: POP
9966: POP
// end ;
9967: LD_VAR 0 3
9971: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
9976: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_VAR 0 3
10012: LESSEQUAL
10013: IFFALSE 10121
// begin for i = 1 to vehCount do
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_VAR 0 3
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10119
// begin weapon = weaponTab [ i ] ;
10033: LD_ADDR_VAR 0 10
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 9
10047: ARRAY
10048: ST_TO_ADDR
// if weapon = 46 then
10049: LD_VAR 0 10
10053: PUSH
10054: LD_INT 46
10056: EQUAL
10057: IFFALSE 10088
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 24
10066: PPUSH
10067: LD_VAR 0 5
10071: PPUSH
10072: LD_VAR 0 6
10076: PPUSH
10077: LD_VAR 0 10
10081: PPUSH
10082: CALL_OW 185
// end else
10086: GO 10117
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 7
10097: PPUSH
10098: LD_VAR 0 5
10102: PPUSH
10103: LD_VAR 0 6
10107: PPUSH
10108: LD_VAR 0 10
10112: PPUSH
10113: CALL_OW 185
// end ; end ;
10117: GO 10030
10119: POP
10120: POP
// end ; end ;
10121: LD_VAR 0 8
10125: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10126: LD_INT 0
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 24
10164: PUSH
10165: LD_INT 650
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if damageVehicles > 0 then
10186: LD_VAR 0 8
10190: PUSH
10191: LD_INT 0
10193: GREATER
10194: IFFALSE 10215
// ComMoveXY ( damageVehicles , repX , repY ) ;
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10215: LD_VAR 0 8
10219: PPUSH
10220: LD_INT 95
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 72
10253: PUSH
10254: LD_INT 0
10256: GREATER
10257: IFFALSE 10324
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10259: LD_ADDR_VAR 0 6
10263: PUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: LD_INT 95
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 58
10286: PUSH
10287: EMPTY
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10322
// ComExitVehicle ( UnitsInside ( i ) ) ;
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 313
10315: PPUSH
10316: CALL_OW 121
10320: GO 10303
10322: POP
10323: POP
// end ;
10324: LD_VAR 0 5
10328: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 24
10367: PUSH
10368: LD_INT 250
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 58
10380: PUSH
10381: EMPTY
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 43
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 46
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 , 7 ] [ Difficulty ] then
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 24
10463: PUSH
10464: LD_INT 1000
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 58
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 43
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 46
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_OWVAR 67
10557: ARRAY
10558: GREATEREQUAL
10559: IFFALSE 11124
// repeat wait ( 0 0$1 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 250
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 43
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 44
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 34
10630: PUSH
10631: LD_INT 46
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: EMPTY
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 95
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: NOT
10702: PUSH
10703: LD_VAR 0 11
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: AND
10712: IFFALSE 10767
// for i := 1 to wayX do
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: DOUBLE
10720: LD_INT 1
10722: DEC
10723: ST_TO_ADDR
10724: LD_VAR 0 3
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10765
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 6
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 6
10757: ARRAY
10758: PPUSH
10759: CALL_OW 114
10763: GO 10729
10765: POP
10766: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 95
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: IFFALSE 11023
// begin seeEnemy = 1 ;
10801: LD_ADDR_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// for j in vehiclesOK do
10809: LD_ADDR_VAR 0 7
10813: PUSH
10814: LD_VAR 0 8
10818: PUSH
10819: FOR_IN
10820: IFFALSE 11021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10822: LD_ADDR_VAR 0 9
10826: PUSH
10827: LD_INT 81
10829: PUSH
10830: LD_VAR 0 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10868: LD_ADDR_VAR 0 10
10872: PUSH
10873: LD_INT 81
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 101
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: LD_INT 21
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10953: LD_VAR 0 7
10957: PPUSH
10958: LD_VAR 0 9
10962: PPUSH
10963: CALL_OW 296
10967: PUSH
10968: LD_INT 8
10970: PLUS
10971: PUSH
10972: LD_VAR 0 7
10976: PPUSH
10977: LD_VAR 0 10
10981: PPUSH
10982: CALL_OW 296
10986: LESS
10987: IFFALSE 11005
// ComAttackUnit ( j , target1 ) else
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 115
11003: GO 11019
// ComAttackUnit ( j , target2 ) ;
11005: LD_VAR 0 7
11009: PPUSH
11010: LD_VAR 0 10
11014: PPUSH
11015: CALL_OW 115
// end ;
11019: GO 10819
11021: POP
11022: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 250
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 34
11070: PUSH
11071: LD_INT 44
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 46
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 58
11099: PUSH
11100: EMPTY
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10561
// seeEnemy = 0 ;
11124: LD_ADDR_VAR 0 11
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 5
11136: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// repeat wait ( 0 0$1 ) ;
11145: LD_INT 35
11147: PPUSH
11148: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11152: LD_ADDR_VAR 0 7
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 651
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: ST_TO_ADDR
// for j in vehiclesOK do
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 7
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 81
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 74
11257: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11258: LD_ADDR_VAR 0 6
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 101
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 59
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PPUSH
11333: LD_VAR 0 4
11337: PPUSH
11338: CALL_OW 74
11342: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11343: LD_VAR 0 4
11347: PPUSH
11348: LD_VAR 0 5
11352: PPUSH
11353: CALL_OW 296
11357: PUSH
11358: LD_INT 8
11360: PLUS
11361: PUSH
11362: LD_VAR 0 4
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 296
11376: LESS
11377: IFFALSE 11395
// ComAttackUnit ( j , target1 ) else
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: CALL_OW 115
11393: GO 11409
// ComAttackUnit ( j , target2 ) ;
11395: LD_VAR 0 4
11399: PPUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: CALL_OW 115
// end ;
11409: GO 11209
11411: POP
11412: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 250
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11145
// end ;
11460: LD_VAR 0 2
11464: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: CALL_OW 313
11487: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 750
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 54
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 70
11553: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 22
11566: PUSH
11567: LD_VAR 0 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: PPUSH
11611: CALL_OW 70
11615: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11616: LD_VAR 0 6
11620: NOT
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_VAR 0 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 24
11646: PUSH
11647: LD_INT 250
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: NOT
11664: AND
11665: IFFALSE 11669
// exit ;
11667: GO 11866
// if buildings_list > 0 and engineerOkInside then
11669: LD_VAR 0 6
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 8
11682: AND
11683: IFFALSE 11709
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: PPUSH
11705: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11709: LD_VAR 0 6
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_INT 0
11725: GREATER
11726: AND
11727: IFFALSE 11747
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11729: LD_VAR 0 9
11733: PPUSH
11734: LD_VAR 0 6
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 0
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: AND
11775: IFFALSE 11791
// ComEnterUnit ( engineerOkOutside , building ) ;
11777: LD_VAR 0 9
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11791: LD_VAR 0 9
11795: PUSH
11796: LD_INT 0
11798: GREATER
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: AND
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: AND
11819: IFFALSE 11866
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 3
11851: ARRAY
11852: PPUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 4
11860: ARRAY
11861: PPUSH
11862: CALL_OW 145
// end ;
11866: LD_VAR 0 5
11870: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 24
11921: PUSH
11922: LD_INT 251
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11940: LD_ADDR_VAR 0 7
11944: PUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 50
11984: PUSH
11985: EMPTY
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_VAR 0 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 24
12053: PUSH
12054: LD_INT 750
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12076: LD_ADDR_VAR 0 11
12080: PUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 24
12130: PUSH
12131: LD_INT 1000
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 70
12152: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12153: LD_VAR 0 10
12157: NOT
12158: PUSH
12159: LD_VAR 0 11
12163: NOT
12164: AND
12165: PUSH
12166: LD_VAR 0 6
12170: NOT
12171: AND
12172: IFFALSE 12176
// exit ;
12174: GO 12410
// if damageUnits > 0 and sci_list > 0 then
12176: LD_VAR 0 10
12180: PUSH
12181: LD_INT 0
12183: GREATER
12184: PUSH
12185: LD_VAR 0 6
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: IFFALSE 12210
// ComMoveToArea ( damageUnits , healArea ) ;
12196: LD_VAR 0 10
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12210: LD_VAR 0 11
12214: PUSH
12215: LD_INT 0
12217: GREATER
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: AND
12228: IFFALSE 12239
// ComExitBuilding ( sci_list ) ;
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12239: LD_VAR 0 11
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: PUSH
12248: LD_VAR 0 7
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12259: LD_VAR 0 7
12263: PPUSH
12264: LD_VAR 0 11
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12277: LD_VAR 0 10
12281: PUSH
12282: LD_INT 0
12284: EQUAL
12285: PUSH
12286: LD_VAR 0 11
12290: PUSH
12291: LD_INT 0
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: LD_INT 0
12303: GREATER
12304: AND
12305: IFFALSE 12410
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12307: LD_ADDR_VAR 0 12
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12354: LD_ADDR_VAR 0 13
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_VAR 0 12
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12372: LD_VAR 0 7
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: PPUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_VAR 0 13
12404: ARRAY
12405: PPUSH
12406: CALL_OW 120
// end ; end ;
12410: LD_VAR 0 5
12414: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 30
12444: PUSH
12445: LD_INT 31
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 33
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12552: LD_VAR 0 6
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12640
// begin for i in turretsList do
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12638
// begin for j in enemyBuildings do
12585: LD_ADDR_VAR 0 5
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: FOR_IN
12596: IFFALSE 12634
// begin if GetDistUnits ( i , j ) < 20 then
12598: LD_VAR 0 4
12602: PPUSH
12603: LD_VAR 0 5
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 20
12615: LESS
12616: IFFALSE 12632
// begin ComAttackUnit ( i , j ) ;
12618: LD_VAR 0 4
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL_OW 115
// end ; end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: GO 12582
12638: POP
12639: POP
// end ; end ;
12640: LD_VAR 0 3
12644: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// for i = 1 to medicCount do
12658: LD_ADDR_VAR 0 14
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_VAR 0 7
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12756
// begin uc_side = side ;
12676: LD_ADDR_OWVAR 20
12680: PUSH
12681: LD_VAR 0 1
12685: ST_TO_ADDR
// uc_nation = nation ;
12686: LD_ADDR_OWVAR 21
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// hc_name =  ;
12696: LD_ADDR_OWVAR 26
12700: PUSH
12701: LD_STRING 
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 9
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// end ;
12754: GO 12673
12756: POP
12757: POP
// for i = 1 to soldierCount do
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_VAR 0 3
12772: PUSH
12773: FOR_TO
12774: IFFALSE 12856
// begin uc_side = side ;
12776: LD_ADDR_OWVAR 20
12780: PUSH
12781: LD_VAR 0 1
12785: ST_TO_ADDR
// uc_nation = nation ;
12786: LD_ADDR_OWVAR 21
12790: PUSH
12791: LD_VAR 0 2
12795: ST_TO_ADDR
// hc_name =  ;
12796: LD_ADDR_OWVAR 26
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// hc_gallery =  ;
12804: LD_ADDR_OWVAR 33
12808: PUSH
12809: LD_STRING 
12811: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 8
12822: PPUSH
12823: CALL_OW 380
// un = CreateHuman ;
12827: LD_ADDR_VAR 0 16
12831: PUSH
12832: CALL_OW 44
12836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12837: LD_VAR 0 16
12841: PPUSH
12842: LD_VAR 0 9
12846: PPUSH
12847: LD_INT 0
12849: PPUSH
12850: CALL_OW 49
// end ;
12854: GO 12773
12856: POP
12857: POP
// for i = 1 to sniperCount do
12858: LD_ADDR_VAR 0 14
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 4
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12956
// begin uc_side = side ;
12876: LD_ADDR_OWVAR 20
12880: PUSH
12881: LD_VAR 0 1
12885: ST_TO_ADDR
// uc_nation = nation ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_VAR 0 2
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_gallery =  ;
12904: LD_ADDR_OWVAR 33
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: CALL_OW 380
// un = CreateHuman ;
12927: LD_ADDR_VAR 0 16
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12937: LD_VAR 0 16
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// end ;
12954: GO 12873
12956: POP
12957: POP
// for i = 1 to bazookCount do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_VAR 0 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13056
// begin uc_side = side ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// uc_nation = nation ;
12986: LD_ADDR_OWVAR 21
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// hc_name =  ;
12996: LD_ADDR_OWVAR 26
13000: PUSH
13001: LD_STRING 
13003: ST_TO_ADDR
// hc_gallery =  ;
13004: LD_ADDR_OWVAR 33
13008: PUSH
13009: LD_STRING 
13011: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_INT 9
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: CALL_OW 380
// un = CreateHuman ;
13027: LD_ADDR_VAR 0 16
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13037: LD_VAR 0 16
13041: PPUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// end ;
13054: GO 12973
13056: POP
13057: POP
// for i = 1 to mortalCount do
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13156
// begin uc_side = side ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_VAR 0 1
13085: ST_TO_ADDR
// uc_nation = nation ;
13086: LD_ADDR_OWVAR 21
13090: PUSH
13091: LD_VAR 0 2
13095: ST_TO_ADDR
// hc_name =  ;
13096: LD_ADDR_OWVAR 26
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_gallery =  ;
13104: LD_ADDR_OWVAR 33
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13112: LD_INT 0
13114: PPUSH
13115: LD_INT 8
13117: PPUSH
13118: LD_VAR 0 8
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 16
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13137: LD_VAR 0 16
13141: PPUSH
13142: LD_VAR 0 9
13146: PPUSH
13147: LD_INT 0
13149: PPUSH
13150: CALL_OW 49
// end ;
13154: GO 13073
13156: POP
13157: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13158: LD_ADDR_VAR 0 19
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_VAR 0 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 8
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 9
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13234: LD_ADDR_VAR 0 18
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// for i in medic_list do
13270: LD_ADDR_VAR 0 14
13274: PUSH
13275: LD_VAR 0 18
13279: PUSH
13280: FOR_IN
13281: IFFALSE 13299
// ComMoveToArea ( i , healArea ) ;
13283: LD_VAR 0 14
13287: PPUSH
13288: LD_VAR 0 10
13292: PPUSH
13293: CALL_OW 113
13297: GO 13280
13299: POP
13300: POP
// if strategy = 1 then
13301: LD_VAR 0 12
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13855
// begin repeat wait ( 0 0$3 ) ;
13311: LD_INT 105
13313: PPUSH
13314: CALL_OW 67
// for i in soldiersOK_list do
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: LD_VAR 0 19
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13393
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_INT 91
13338: PPUSH
13339: LD_INT 63
13341: PPUSH
13342: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_INT 101
13353: PPUSH
13354: LD_INT 53
13356: PPUSH
13357: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_INT 75
13368: PPUSH
13369: LD_INT 23
13371: PPUSH
13372: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_INT 78
13383: PPUSH
13384: LD_INT 8
13386: PPUSH
13387: CALL_OW 174
// end ;
13391: GO 13328
13393: POP
13394: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13395: LD_INT 12
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: PUSH
13415: LD_INT 2
13417: GREATER
13418: IFFALSE 13311
// repeat wait ( 0 0$1 ) ;
13420: LD_INT 35
13422: PPUSH
13423: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: LD_INT 550
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 250
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 9
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 1000
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if medicCount > 0 then
13575: LD_VAR 0 7
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13657
// begin if damageUnit_list > 0 then
13585: LD_VAR 0 17
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13657
// begin for i in damageUnit_list do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: LD_VAR 0 17
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13655
// begin ComMoveToArea ( i , healArea ) ;
13608: LD_VAR 0 14
13612: PPUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 113
// for j in medic_list do
13622: LD_ADDR_VAR 0 15
13626: PUSH
13627: LD_VAR 0 18
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13651
// AddComHeal ( j , i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: LD_VAR 0 14
13644: PPUSH
13645: CALL_OW 188
13649: GO 13632
13651: POP
13652: POP
// end ;
13653: GO 13605
13655: POP
13656: POP
// end ; end ; for i in soldiersOK_list do
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: LD_VAR 0 19
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13670: LD_ADDR_VAR 0 22
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_VAR 0 11
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 74
13701: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13702: LD_ADDR_VAR 0 23
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 59
13724: PUSH
13725: EMPTY
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 14
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13776: LD_VAR 0 14
13780: PPUSH
13781: LD_VAR 0 22
13785: PPUSH
13786: CALL_OW 296
13790: PUSH
13791: LD_INT 6
13793: PLUS
13794: PUSH
13795: LD_VAR 0 14
13799: PPUSH
13800: LD_VAR 0 23
13804: PPUSH
13805: CALL_OW 296
13809: LESS
13810: IFFALSE 13828
// begin ComAttackUnit ( i , target1 ) ;
13812: LD_VAR 0 14
13816: PPUSH
13817: LD_VAR 0 22
13821: PPUSH
13822: CALL_OW 115
// end else
13826: GO 13842
// begin ComAttackUnit ( i , target2 ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 23
13837: PPUSH
13838: CALL_OW 115
// end ; end ;
13842: GO 13667
13844: POP
13845: POP
// until soldiersOK_list = [ ] ;
13846: LD_VAR 0 19
13850: PUSH
13851: EMPTY
13852: EQUAL
13853: IFFALSE 13420
// end ; if strategy = 2 then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 2
13862: EQUAL
13863: IFFALSE 14379
// begin repeat wait ( 0 0$1 ) ;
13865: LD_INT 35
13867: PPUSH
13868: CALL_OW 67
// for i in soldiersOK_list do
13872: LD_ADDR_VAR 0 14
13876: PUSH
13877: LD_VAR 0 19
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13917
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_INT 91
13892: PPUSH
13893: LD_INT 63
13895: PPUSH
13896: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13900: LD_VAR 0 14
13904: PPUSH
13905: LD_INT 75
13907: PPUSH
13908: LD_INT 33
13910: PPUSH
13911: CALL_OW 174
// end ;
13915: GO 13882
13917: POP
13918: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13919: LD_INT 13
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 70
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: IFFALSE 13865
// repeat wait ( 0 0$3 ) ;
13944: LD_INT 105
13946: PPUSH
13947: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_VAR 0 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 550
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 250
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14012: LD_ADDR_VAR 0 19
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 8
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 9
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 1000
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if medicCount > 0 then
14099: LD_VAR 0 7
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14181
// begin if damageUnit_list > 0 then
14109: LD_VAR 0 17
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14181
// begin for i in damageUnit_list do
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_VAR 0 17
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14179
// begin ComMoveToArea ( i , healArea ) ;
14132: LD_VAR 0 14
14136: PPUSH
14137: LD_VAR 0 10
14141: PPUSH
14142: CALL_OW 113
// for j in medic_list do
14146: LD_ADDR_VAR 0 15
14150: PUSH
14151: LD_VAR 0 18
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14175
// AddComHeal ( j , i ) ;
14159: LD_VAR 0 15
14163: PPUSH
14164: LD_VAR 0 14
14168: PPUSH
14169: CALL_OW 188
14173: GO 14156
14175: POP
14176: POP
// end ;
14177: GO 14129
14179: POP
14180: POP
// end ; end ; for i in soldiersOK_list do
14181: LD_ADDR_VAR 0 14
14185: PUSH
14186: LD_VAR 0 19
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14368
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14194: LD_ADDR_VAR 0 22
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 11
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PPUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: CALL_OW 74
14225: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14226: LD_ADDR_VAR 0 23
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_VAR 0 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 59
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 14
14294: PPUSH
14295: CALL_OW 74
14299: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14300: LD_VAR 0 14
14304: PPUSH
14305: LD_VAR 0 22
14309: PPUSH
14310: CALL_OW 296
14314: PUSH
14315: LD_INT 6
14317: PLUS
14318: PUSH
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 23
14328: PPUSH
14329: CALL_OW 296
14333: LESS
14334: IFFALSE 14352
// begin ComAttackUnit ( i , target1 ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 22
14345: PPUSH
14346: CALL_OW 115
// end else
14350: GO 14366
// begin ComAttackUnit ( i , target2 ) ;
14352: LD_VAR 0 14
14356: PPUSH
14357: LD_VAR 0 23
14361: PPUSH
14362: CALL_OW 115
// end ; end ;
14366: GO 14191
14368: POP
14369: POP
// until soldiersOK_list = [ ] ;
14370: LD_VAR 0 19
14374: PUSH
14375: EMPTY
14376: EQUAL
14377: IFFALSE 13944
// end ; if strategy = 3 then
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: IFFALSE 14933
// begin repeat wait ( 0 0$3 ) ;
14389: LD_INT 105
14391: PPUSH
14392: CALL_OW 67
// for i in soldiersOK_list do
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 19
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14471
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14409: LD_VAR 0 14
14413: PPUSH
14414: LD_INT 63
14416: PPUSH
14417: LD_INT 71
14419: PPUSH
14420: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14424: LD_VAR 0 14
14428: PPUSH
14429: LD_INT 35
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14439: LD_VAR 0 14
14443: PPUSH
14444: LD_INT 23
14446: PPUSH
14447: LD_INT 18
14449: PPUSH
14450: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14454: LD_VAR 0 14
14458: PPUSH
14459: LD_INT 26
14461: PPUSH
14462: LD_INT 12
14464: PPUSH
14465: CALL_OW 174
// end ;
14469: GO 14406
14471: POP
14472: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14473: LD_INT 14
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 70
14492: PUSH
14493: LD_INT 2
14495: GREATER
14496: IFFALSE 14389
// repeat wait ( 0 0$1 ) ;
14498: LD_INT 35
14500: PPUSH
14501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14505: LD_ADDR_VAR 0 17
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 550
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 250
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14566: LD_ADDR_VAR 0 19
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 1000
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: ST_TO_ADDR
// if medicCount > 0 then
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 0
14660: GREATER
14661: IFFALSE 14735
// begin if damageUnit_list > 0 then
14663: LD_VAR 0 17
14667: PUSH
14668: LD_INT 0
14670: GREATER
14671: IFFALSE 14735
// begin for i in damageUnit_list do
14673: LD_ADDR_VAR 0 14
14677: PUSH
14678: LD_VAR 0 17
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14733
// begin ComMoveToArea ( i , healArea ) ;
14686: LD_VAR 0 14
14690: PPUSH
14691: LD_VAR 0 10
14695: PPUSH
14696: CALL_OW 113
// for j in medic_list do
14700: LD_ADDR_VAR 0 15
14704: PUSH
14705: LD_VAR 0 18
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14729
// AddComHeal ( j , i ) ;
14713: LD_VAR 0 15
14717: PPUSH
14718: LD_VAR 0 14
14722: PPUSH
14723: CALL_OW 188
14727: GO 14710
14729: POP
14730: POP
// end ;
14731: GO 14683
14733: POP
14734: POP
// end ; end ; for i in soldiersOK_list do
14735: LD_ADDR_VAR 0 14
14739: PUSH
14740: LD_VAR 0 19
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14748: LD_ADDR_VAR 0 22
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_VAR 0 11
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PPUSH
14770: LD_VAR 0 14
14774: PPUSH
14775: CALL_OW 74
14779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14780: LD_ADDR_VAR 0 23
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 11
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 59
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 14
14848: PPUSH
14849: CALL_OW 74
14853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14854: LD_VAR 0 14
14858: PPUSH
14859: LD_VAR 0 22
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 6
14871: PLUS
14872: PUSH
14873: LD_VAR 0 14
14877: PPUSH
14878: LD_VAR 0 23
14882: PPUSH
14883: CALL_OW 296
14887: LESS
14888: IFFALSE 14906
// begin ComAttackUnit ( i , target1 ) ;
14890: LD_VAR 0 14
14894: PPUSH
14895: LD_VAR 0 22
14899: PPUSH
14900: CALL_OW 115
// end else
14904: GO 14920
// begin ComAttackUnit ( i , target2 ) ;
14906: LD_VAR 0 14
14910: PPUSH
14911: LD_VAR 0 23
14915: PPUSH
14916: CALL_OW 115
// end ; end ;
14920: GO 14745
14922: POP
14923: POP
// until soldiersOK_list = [ ] ;
14924: LD_VAR 0 19
14928: PUSH
14929: EMPTY
14930: EQUAL
14931: IFFALSE 14498
// end ; end ;
14933: LD_VAR 0 13
14937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
// amChassisTab = [ ] ;
14951: LD_ADDR_VAR 0 19
14955: PUSH
14956: EMPTY
14957: ST_TO_ADDR
// arChassisTab = [ ] ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// ruChassisTab = [ ] ;
14965: LD_ADDR_VAR 0 17
14969: PUSH
14970: EMPTY
14971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14972: LD_INT 35
14974: PPUSH
14975: CALL_OW 67
// if nation = 1 then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 15478
// begin uc_side = side ;
14989: LD_ADDR_OWVAR 20
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// uc_nation = nation ;
14999: LD_ADDR_OWVAR 21
15003: PUSH
15004: LD_VAR 0 5
15008: ST_TO_ADDR
// vc_engine = vehengine ;
15009: LD_ADDR_OWVAR 39
15013: PUSH
15014: LD_VAR 0 6
15018: ST_TO_ADDR
// vc_control = vehcontrol ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_VAR 0 7
15028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15029: LD_ADDR_OWVAR 40
15033: PUSH
15034: LD_VAR 0 10
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// for j = 1 to AMWeapon do
15053: LD_ADDR_VAR 0 14
15057: PUSH
15058: DOUBLE
15059: LD_INT 1
15061: DEC
15062: ST_TO_ADDR
15063: LD_VAR 0 10
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15071: LD_VAR 0 10
15075: PUSH
15076: LD_VAR 0 14
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: EQUAL
15085: PUSH
15086: LD_VAR 0 10
15090: PUSH
15091: LD_VAR 0 14
15095: ARRAY
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: OR
15101: IFFALSE 15154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15130: LD_ADDR_OWVAR 37
15134: PUSH
15135: LD_VAR 0 19
15139: PUSH
15140: LD_INT 1
15142: PPUSH
15143: LD_VAR 0 19
15147: PPUSH
15148: CALL_OW 12
15152: ARRAY
15153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15154: LD_VAR 0 10
15158: PUSH
15159: LD_VAR 0 14
15163: ARRAY
15164: PUSH
15165: LD_INT 4
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 10
15173: PUSH
15174: LD_VAR 0 14
15178: ARRAY
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: OR
15184: PUSH
15185: LD_VAR 0 10
15189: PUSH
15190: LD_VAR 0 14
15194: ARRAY
15195: PUSH
15196: LD_INT 9
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 10
15205: PUSH
15206: LD_VAR 0 14
15210: ARRAY
15211: PUSH
15212: LD_INT 11
15214: EQUAL
15215: OR
15216: PUSH
15217: LD_VAR 0 10
15221: PUSH
15222: LD_VAR 0 14
15226: ARRAY
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: OR
15232: IFFALSE 15281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15234: LD_ADDR_VAR 0 19
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 4
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15257: LD_ADDR_OWVAR 37
15261: PUSH
15262: LD_VAR 0 19
15266: PUSH
15267: LD_INT 1
15269: PPUSH
15270: LD_VAR 0 19
15274: PPUSH
15275: CALL_OW 12
15279: ARRAY
15280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15281: LD_VAR 0 10
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 8
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 10
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 6
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 10
15316: PUSH
15317: LD_VAR 0 14
15321: ARRAY
15322: PUSH
15323: LD_INT 10
15325: EQUAL
15326: OR
15327: IFFALSE 15368
// begin amChassisTab = [ 4 , 5 ] ;
15329: LD_ADDR_VAR 0 19
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15344: LD_ADDR_OWVAR 37
15348: PUSH
15349: LD_VAR 0 19
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_VAR 0 19
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: ST_TO_ADDR
// end ; end ;
15368: GO 15068
15370: POP
15371: POP
// veh = CreateVehicle ;
15372: LD_ADDR_VAR 0 16
15376: PUSH
15377: CALL_OW 45
15381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15382: LD_VAR 0 16
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// if vehControl = 1 then
15399: LD_VAR 0 7
15403: PUSH
15404: LD_INT 1
15406: EQUAL
15407: IFFALSE 15464
// begin hc_gallery =  ;
15409: LD_ADDR_OWVAR 33
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15425: LD_INT 0
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 380
// un = CreateHuman ;
15440: LD_ADDR_VAR 0 15
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15450: LD_VAR 0 15
15454: PPUSH
15455: LD_VAR 0 16
15459: PPUSH
15460: CALL_OW 52
// end ; i = i + 1 ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 13
15473: PUSH
15474: LD_INT 1
15476: PLUS
15477: ST_TO_ADDR
// end ; if nation = 2 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15910
// begin uc_side = side ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_VAR 0 2
15497: ST_TO_ADDR
// uc_nation = nation ;
15498: LD_ADDR_OWVAR 21
15502: PUSH
15503: LD_VAR 0 5
15507: ST_TO_ADDR
// vc_engine = vehengine ;
15508: LD_ADDR_OWVAR 39
15512: PUSH
15513: LD_VAR 0 6
15517: ST_TO_ADDR
// vc_control = vehcontrol ;
15518: LD_ADDR_OWVAR 38
15522: PUSH
15523: LD_VAR 0 7
15527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15528: LD_ADDR_OWVAR 40
15532: PUSH
15533: LD_VAR 0 9
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: ST_TO_ADDR
// for j = 1 to ARWeapons do
15552: LD_ADDR_VAR 0 14
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 9
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 14
15579: ARRAY
15580: PUSH
15581: LD_INT 24
15583: EQUAL
15584: PUSH
15585: LD_VAR 0 9
15589: PUSH
15590: LD_VAR 0 14
15594: ARRAY
15595: PUSH
15596: LD_INT 22
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 9
15605: PUSH
15606: LD_VAR 0 14
15610: ARRAY
15611: PUSH
15612: LD_INT 23
15614: EQUAL
15615: OR
15616: PUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 14
15626: ARRAY
15627: PUSH
15628: LD_INT 30
15630: EQUAL
15631: OR
15632: IFFALSE 15681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15634: LD_ADDR_VAR 0 18
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15657: LD_ADDR_OWVAR 37
15661: PUSH
15662: LD_VAR 0 18
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_VAR 0 18
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15681: LD_VAR 0 9
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 29
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 9
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 28
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 9
15716: PUSH
15717: LD_VAR 0 14
15721: ARRAY
15722: PUSH
15723: LD_INT 27
15725: EQUAL
15726: OR
15727: PUSH
15728: LD_VAR 0 9
15732: PUSH
15733: LD_VAR 0 14
15737: ARRAY
15738: PUSH
15739: LD_INT 26
15741: EQUAL
15742: OR
15743: PUSH
15744: LD_VAR 0 9
15748: PUSH
15749: LD_VAR 0 14
15753: ARRAY
15754: PUSH
15755: LD_INT 25
15757: EQUAL
15758: OR
15759: IFFALSE 15800
// begin arChassisTab = [ 13 , 14 ] ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 13
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15776: LD_ADDR_OWVAR 37
15780: PUSH
15781: LD_VAR 0 18
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 18
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// end ; end ;
15800: GO 15567
15802: POP
15803: POP
// veh = CreateVehicle ;
15804: LD_ADDR_VAR 0 16
15808: PUSH
15809: CALL_OW 45
15813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15814: LD_VAR 0 16
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// if vehcontrol = 1 then
15831: LD_VAR 0 7
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15896
// begin hc_gallery =  ;
15841: LD_ADDR_OWVAR 33
15845: PUSH
15846: LD_STRING 
15848: ST_TO_ADDR
// hc_name =  ;
15849: LD_ADDR_OWVAR 26
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 3
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 380
// un = CreateHuman ;
15872: LD_ADDR_VAR 0 15
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15882: LD_VAR 0 15
15886: PPUSH
15887: LD_VAR 0 16
15891: PPUSH
15892: CALL_OW 52
// end ; i = i + 1 ;
15896: LD_ADDR_VAR 0 13
15900: PUSH
15901: LD_VAR 0 13
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: ST_TO_ADDR
// end ; if nation = 3 then
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 3
15917: EQUAL
15918: IFFALSE 16310
// begin uc_side = side ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_VAR 0 2
15929: ST_TO_ADDR
// uc_nation = nation ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// vc_engine = vehengine ;
15940: LD_ADDR_OWVAR 39
15944: PUSH
15945: LD_VAR 0 6
15949: ST_TO_ADDR
// vc_control = vehcontrol ;
15950: LD_ADDR_OWVAR 38
15954: PUSH
15955: LD_VAR 0 7
15959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15960: LD_ADDR_OWVAR 40
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 8
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: ST_TO_ADDR
// for j = 1 to RuWeapons do
15984: LD_ADDR_VAR 0 14
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_VAR 0 8
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16002: LD_VAR 0 8
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 42
16015: EQUAL
16016: PUSH
16017: LD_VAR 0 8
16021: PUSH
16022: LD_VAR 0 14
16026: ARRAY
16027: PUSH
16028: LD_INT 43
16030: EQUAL
16031: OR
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_VAR 0 14
16042: ARRAY
16043: PUSH
16044: LD_INT 44
16046: EQUAL
16047: OR
16048: PUSH
16049: LD_VAR 0 8
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 45
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 8
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 49
16078: EQUAL
16079: OR
16080: IFFALSE 16129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16082: LD_ADDR_VAR 0 17
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 23
16095: PUSH
16096: LD_INT 24
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16105: LD_ADDR_OWVAR 37
16109: PUSH
16110: LD_VAR 0 17
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 17
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16129: LD_VAR 0 8
16133: PUSH
16134: LD_VAR 0 14
16138: ARRAY
16139: PUSH
16140: LD_INT 46
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_VAR 0 14
16153: ARRAY
16154: PUSH
16155: LD_INT 47
16157: EQUAL
16158: OR
16159: IFFALSE 16200
// begin ruChassisTab = [ 23 , 24 ] ;
16161: LD_ADDR_VAR 0 17
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: LD_INT 24
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16176: LD_ADDR_OWVAR 37
16180: PUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 17
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// end ; end ;
16200: GO 15999
16202: POP
16203: POP
// veh = CreateVehicle ;
16204: LD_ADDR_VAR 0 16
16208: PUSH
16209: CALL_OW 45
16213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16214: LD_VAR 0 16
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// if vehcontrol = 1 then
16231: LD_VAR 0 7
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: IFFALSE 16296
// begin hc_gallery =  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name =  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16257: LD_INT 0
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
// un = CreateHuman ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: CALL_OW 44
16281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16282: LD_VAR 0 15
16286: PPUSH
16287: LD_VAR 0 16
16291: PPUSH
16292: CALL_OW 52
// end ; i = i + 1 ;
16296: LD_ADDR_VAR 0 13
16300: PUSH
16301: LD_VAR 0 13
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: ST_TO_ADDR
// end ; until i = vehCount ;
16310: LD_VAR 0 13
16314: PUSH
16315: LD_VAR 0 3
16319: EQUAL
16320: IFFALSE 14972
// repeat wait ( 0 0$1 ) ;
16322: LD_INT 35
16324: PPUSH
16325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16329: LD_ADDR_VAR 0 20
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 24
16358: PUSH
16359: LD_INT 250
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if vehicleOK_list > 0 then
16376: LD_VAR 0 20
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16575
// begin for i in vehicleOK_list do
16386: LD_ADDR_VAR 0 13
16390: PUSH
16391: LD_VAR 0 20
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16399: LD_ADDR_VAR 0 21
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 11
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: PPUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 74
16430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16431: LD_ADDR_VAR 0 22
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 11
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 59
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 74
16504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16505: LD_VAR 0 13
16509: PPUSH
16510: LD_VAR 0 21
16514: PPUSH
16515: CALL_OW 296
16519: PUSH
16520: LD_INT 6
16522: PLUS
16523: PUSH
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 22
16533: PPUSH
16534: CALL_OW 296
16538: LESS
16539: IFFALSE 16557
// begin ComAttackUnit ( i , target1 ) ;
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 21
16550: PPUSH
16551: CALL_OW 115
// end else
16555: GO 16571
// begin ComAttackUnit ( i , target2 ) ;
16557: LD_VAR 0 13
16561: PPUSH
16562: LD_VAR 0 22
16566: PPUSH
16567: CALL_OW 115
// end ; end ;
16571: GO 16396
16573: POP
16574: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16575: LD_INT 22
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 250
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: IFFALSE 16322
// end ;
16622: LD_VAR 0 12
16626: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 24
16662: PUSH
16663: LD_INT 550
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 250
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1000
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// if medicCount > 0 then
16821: LD_VAR 0 9
16825: PUSH
16826: LD_INT 0
16828: GREATER
16829: IFFALSE 16903
// begin if damageUnit_list > 0 then
16831: LD_VAR 0 7
16835: PUSH
16836: LD_INT 0
16838: GREATER
16839: IFFALSE 16903
// begin for i in damageUnit_list do
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_VAR 0 7
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16901
// begin ComMoveToArea ( i , healArea ) ;
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 113
// for j in medicCount do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 9
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16897
// AddComHeal ( j , i ) ;
16881: LD_VAR 0 6
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 188
16895: GO 16878
16897: POP
16898: POP
// end ;
16899: GO 16851
16901: POP
16902: POP
// end ; end ; if soldiersOK_list > 0 then
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 0
16910: GREATER
16911: IFFALSE 17102
// begin for i in soldiersOK_list do
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 8
16922: PUSH
16923: FOR_IN
16924: IFFALSE 17100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16926: LD_ADDR_VAR 0 10
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_VAR 0 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL_OW 74
16957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16958: LD_ADDR_VAR 0 11
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_VAR 0 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 59
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL_OW 74
17031: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: CALL_OW 296
17046: PUSH
17047: LD_INT 8
17049: PLUS
17050: PUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 11
17060: PPUSH
17061: CALL_OW 296
17065: LESS
17066: IFFALSE 17084
// begin ComAttackUnit ( i , target1 ) ;
17068: LD_VAR 0 5
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 115
// end else
17082: GO 17098
// begin ComAttackUnit ( i , target2 ) ;
17084: LD_VAR 0 5
17088: PPUSH
17089: LD_VAR 0 11
17093: PPUSH
17094: CALL_OW 115
// end ; end ;
17098: GO 16923
17100: POP
17101: POP
// end ; end ;
17102: LD_VAR 0 4
17106: RET
// export function GetDriverVehicle ( unit ) ; begin
17107: LD_INT 0
17109: PPUSH
// if not unit then
17110: LD_VAR 0 1
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17157
// result := IsInUnit ( unit ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 310
17133: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 2
17146: NONEQUAL
17147: IFFALSE 17157
// result := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 2
17161: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
// result := false ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17181: LD_VAR 0 1
17185: NOT
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: IN
17207: NOT
17208: OR
17209: PUSH
17210: LD_VAR 0 2
17214: NOT
17215: OR
17216: PUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: IN
17248: NOT
17249: OR
17250: PUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: CALL_OW 488
17265: NOT
17266: OR
17267: IFFALSE 17271
// exit ;
17269: GO 17952
// pom := GetBase ( bdepot ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 274
17285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 248
17305: PPUSH
17306: CALL_OW 450
17310: ST_TO_ADDR
// if check_cost then
17311: LD_VAR 0 6
17315: IFFALSE 17392
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17317: LD_VAR 0 10
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 275
17329: PUSH
17330: LD_VAR 0 11
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: GREATEREQUAL
17339: PUSH
17340: LD_VAR 0 10
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 11
17357: PUSH
17358: LD_INT 2
17360: ARRAY
17361: GREATEREQUAL
17362: AND
17363: PUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: CALL_OW 275
17376: PUSH
17377: LD_VAR 0 11
17381: PUSH
17382: LD_INT 3
17384: ARRAY
17385: GREATEREQUAL
17386: AND
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17952
// if GetBType ( bdepot ) = b_depot then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: IFFALSE 17417
// dist := 28 else
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_INT 28
17414: ST_TO_ADDR
17415: GO 17425
// dist := 36 ;
17417: LD_ADDR_VAR 0 14
17421: PUSH
17422: LD_INT 36
17424: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 297
17444: PUSH
17445: LD_VAR 0 14
17449: GREATER
17450: IFFALSE 17454
// exit ;
17452: GO 17952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17454: LD_ADDR_VAR 0 12
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 248
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL 58993 0 6
17496: ST_TO_ADDR
// if not hexes then
17497: LD_VAR 0 12
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17952
// hex := GetHexInfo ( x , y ) ;
17506: LD_ADDR_VAR 0 15
17510: PUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 546
17525: ST_TO_ADDR
// if hex [ 1 ] then
17526: LD_VAR 0 15
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: IFFALSE 17538
// exit ;
17536: GO 17952
// height := hex [ 2 ] ;
17538: LD_ADDR_VAR 0 13
17542: PUSH
17543: LD_VAR 0 15
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: ST_TO_ADDR
// for i = 1 to hexes do
17552: LD_ADDR_VAR 0 8
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 12
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17570: LD_VAR 0 12
17574: PUSH
17575: LD_VAR 0 8
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PPUSH
17600: CALL_OW 488
17604: NOT
17605: IFFALSE 17609
// continue ;
17607: GO 17567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17609: LD_ADDR_VAR 0 9
17613: PUSH
17614: LD_VAR 0 12
17618: PUSH
17619: LD_VAR 0 8
17623: ARRAY
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 12
17633: PUSH
17634: LD_VAR 0 8
17638: ARRAY
17639: PUSH
17640: LD_INT 2
17642: ARRAY
17643: PPUSH
17644: CALL_OW 546
17648: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 9
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 2
17674: PLUS
17675: GREATER
17676: OR
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: PUSH
17687: LD_VAR 0 13
17691: PUSH
17692: LD_INT 2
17694: MINUS
17695: LESS
17696: OR
17697: PUSH
17698: LD_VAR 0 9
17702: PUSH
17703: LD_INT 3
17705: ARRAY
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 16
17730: PUSH
17731: LD_INT 17
17733: PUSH
17734: LD_INT 18
17736: PUSH
17737: LD_INT 19
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 9
17768: PUSH
17769: LD_INT 5
17771: ARRAY
17772: NOT
17773: OR
17774: PUSH
17775: LD_VAR 0 9
17779: PUSH
17780: LD_INT 6
17782: ARRAY
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 9
17795: PUSH
17796: LD_INT 10
17798: PUSH
17799: LD_INT 11
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: IN
17810: NOT
17811: OR
17812: PUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 8
17837: ARRAY
17838: PUSH
17839: LD_INT 2
17841: ARRAY
17842: PPUSH
17843: CALL_OW 428
17847: PUSH
17848: LD_INT 0
17850: GREATER
17851: OR
17852: PUSH
17853: LD_VAR 0 12
17857: PUSH
17858: LD_VAR 0 8
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: LD_VAR 0 12
17872: PUSH
17873: LD_VAR 0 8
17877: ARRAY
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: PPUSH
17883: CALL_OW 351
17887: OR
17888: IFFALSE 17894
// exit ;
17890: POP
17891: POP
17892: GO 17952
// end ;
17894: GO 17567
17896: POP
17897: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PPUSH
17934: CALL_OW 440
17938: NOT
17939: AND
17940: IFFALSE 17944
// exit ;
17942: GO 17952
// result := true ;
17944: LD_ADDR_VAR 0 7
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// end ; end_of_file
17952: LD_VAR 0 7
17956: RET
// every 1 do var i ;
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin Video ( true ) ;
17963: LD_INT 1
17965: PPUSH
17966: CALL 81761 0 1
// CenterOnXY ( 53 , 40 ) ;
17970: LD_INT 53
17972: PPUSH
17973: LD_INT 40
17975: PPUSH
17976: CALL_OW 84
// wait ( 0 0$5 ) ;
17980: LD_INT 175
17982: PPUSH
17983: CALL_OW 67
// if gammaCommander = 1 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 1
17994: EQUAL
17995: IFFALSE 18009
// Say ( Donaldson , D1-Don-1 ) ;
17997: LD_EXP 3
18001: PPUSH
18002: LD_STRING D1-Don-1
18004: PPUSH
18005: CALL_OW 88
// if gammaCommander = 2 then
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 2
18016: EQUAL
18017: IFFALSE 18031
// Say ( Brown , D1-Brown-1 ) ;
18019: LD_EXP 2
18023: PPUSH
18024: LD_STRING D1-Brown-1
18026: PPUSH
18027: CALL_OW 88
// if gammaCommander = 3 then
18031: LD_EXP 12
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18053
// Say ( Houten , D1-VanH-1 ) ;
18041: LD_EXP 13
18045: PPUSH
18046: LD_STRING D1-VanH-1
18048: PPUSH
18049: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
18053: LD_EXP 22
18057: PPUSH
18058: LD_STRING D1-Har-1
18060: PPUSH
18061: CALL_OW 94
// if gammaCommander = 1 then
18065: LD_EXP 12
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: IFFALSE 18087
// Say ( Donaldson , D1-Don-2 ) ;
18075: LD_EXP 3
18079: PPUSH
18080: LD_STRING D1-Don-2
18082: PPUSH
18083: CALL_OW 88
// if gammaCommander = 2 then
18087: LD_EXP 12
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: IFFALSE 18109
// Say ( Brown , D1-Brown-2 ) ;
18097: LD_EXP 2
18101: PPUSH
18102: LD_STRING D1-Brown-2
18104: PPUSH
18105: CALL_OW 88
// if gammaCommander = 3 then
18109: LD_EXP 12
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: IFFALSE 18131
// Say ( Houten , D1-VanH-2 ) ;
18119: LD_EXP 13
18123: PPUSH
18124: LD_STRING D1-VanH-2
18126: PPUSH
18127: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18131: LD_EXP 22
18135: PPUSH
18136: LD_STRING D1-Har-2
18138: PPUSH
18139: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18143: LD_INT 22
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 61
18165: PUSH
18166: EMPTY
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IFFALSE 18243
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 61
18207: PUSH
18208: EMPTY
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 114
18239: GO 18221
18241: POP
18242: POP
// repeat wait ( 0 0$1 ) ;
18243: LD_INT 35
18245: PPUSH
18246: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18293
// ComAgressiveMove ( i , 54 , 20 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 54
18283: PPUSH
18284: LD_INT 20
18286: PPUSH
18287: CALL_OW 114
18291: GO 18273
18293: POP
18294: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 54
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18378
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 70
18353: PPUSH
18354: LD_INT 41
18356: PPUSH
18357: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 46
18368: PPUSH
18369: LD_INT 39
18371: PPUSH
18372: CALL_OW 174
// end ;
18376: GO 18343
18378: POP
18379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 3
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: LD_INT 500
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18466
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_EXP 37
18444: PPUSH
18445: CALL_OW 250
18449: PPUSH
18450: LD_EXP 37
18454: PPUSH
18455: CALL_OW 251
18459: PPUSH
18460: CALL_OW 111
18464: GO 18432
18466: POP
18467: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 5
18510: LESS
18511: IFFALSE 18243
// Video ( false ) ;
18513: LD_INT 0
18515: PPUSH
18516: CALL 81761 0 1
// ChangeMissionObjectives ( M1 ) ;
18520: LD_STRING M1
18522: PPUSH
18523: CALL_OW 337
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// SaveForQuickRestart ;
18534: CALL_OW 22
// startCutscene = 0 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// end ;
18546: PPOPN 1
18548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18549: LD_EXP 38
18553: IFFALSE 18644
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin enable ;
18562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 22
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 700
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// for i in tmp do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18642
// SetLives ( i , 700 ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 700
18635: PPUSH
18636: CALL_OW 234
18640: GO 18625
18642: POP
18643: POP
// end ;
18644: PPOPN 2
18646: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 6300
18687: GREATER
18688: OR
18689: IFFALSE 18938
18691: GO 18693
18693: DISABLE
// begin PrepareSupportFromDelta ;
18694: CALL 3916 0 0
// firstAttack = 1 ;
18698: LD_ADDR_EXP 33
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18706: LD_EXP 8
18710: PPUSH
18711: CALL_OW 302
18715: IFFALSE 18731
// Say ( Gladstone , D2-Glad-1 ) else
18717: LD_EXP 8
18721: PPUSH
18722: LD_STRING D2-Glad-1
18724: PPUSH
18725: CALL_OW 88
18729: GO 18839
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18731: LD_INT 4
18733: PPUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: PUSH
18814: LD_EXP 15
18818: PUSH
18819: LD_EXP 14
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: DIFF
18828: PPUSH
18829: LD_STRING D2-Sol1-1
18831: PPUSH
18832: LD_STRING D2-FSol1-1
18834: PPUSH
18835: CALL 7358 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18839: LD_EXP 3
18843: PPUSH
18844: CALL_OW 302
18848: PUSH
18849: LD_EXP 12
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: AND
18858: IFFALSE 18872
// Say ( Donaldson , D2-Don-1 ) ;
18860: LD_EXP 3
18864: PPUSH
18865: LD_STRING D2-Don-1
18867: PPUSH
18868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18872: LD_EXP 2
18876: PPUSH
18877: CALL_OW 302
18881: PUSH
18882: LD_EXP 12
18886: PUSH
18887: LD_INT 2
18889: EQUAL
18890: AND
18891: IFFALSE 18905
// Say ( Brown , D2-Brown-1 ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_STRING D2-Brown-1
18900: PPUSH
18901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18905: LD_EXP 13
18909: PPUSH
18910: CALL_OW 302
18914: PUSH
18915: LD_EXP 12
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: AND
18924: IFFALSE 18938
// Say ( Houten , D2-VanH-1 ) ;
18926: LD_EXP 13
18930: PPUSH
18931: LD_STRING D2-VanH-1
18933: PPUSH
18934: CALL_OW 88
// end ;
18938: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18939: LD_OWVAR 1
18943: PUSH
18944: LD_INT 6300
18946: GREATER
18947: IFFALSE 20001
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18955: LD_STRING 07_time
18957: PPUSH
18958: LD_INT 12600
18960: PPUSH
18961: CALL_OW 30
18965: PUSH
18966: LD_INT 3
18968: DIV
18969: PPUSH
18970: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18974: LD_INT 34
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 321
18984: PUSH
18985: LD_INT 2
18987: EQUAL
18988: IFFALSE 18997
// SetAchievement ( ACH_HEAVYGUN ) ;
18990: LD_STRING ACH_HEAVYGUN
18992: PPUSH
18993: CALL_OW 543
// PrepareMacmillanSquad ;
18997: CALL 4613 0 0
// CenterNowOnUnits ( JMM ) ;
19001: LD_EXP 1
19005: PPUSH
19006: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
19010: LD_EXP 1
19014: PPUSH
19015: LD_STRING D3-JMM-1
19017: PPUSH
19018: CALL_OW 88
// JMMArrive = 1 ;
19022: LD_ADDR_EXP 39
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
19030: LD_EXP 3
19034: PPUSH
19035: CALL_OW 302
19039: PUSH
19040: LD_EXP 12
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: AND
19049: IFFALSE 19065
// begin Say ( Donaldson , D3-Don-1 ) ;
19051: LD_EXP 3
19055: PPUSH
19056: LD_STRING D3-Don-1
19058: PPUSH
19059: CALL_OW 88
// end else
19063: GO 19117
// begin if gammaCommander = 1 then
19065: LD_EXP 12
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19117
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19075: LD_EXP 11
19079: PPUSH
19080: LD_INT 26
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_STRING D3-Sol1-1
19097: PPUSH
19098: LD_STRING D3-Sol1-1
19100: PPUSH
19101: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19105: LD_EXP 1
19109: PPUSH
19110: LD_STRING D3-JMM-2
19112: PPUSH
19113: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19117: LD_EXP 2
19121: PPUSH
19122: CALL_OW 302
19126: PUSH
19127: LD_EXP 12
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: AND
19136: IFFALSE 19152
// begin Say ( Brown , D3-Brown-1 ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_STRING D3-Brown-1
19145: PPUSH
19146: CALL_OW 88
// end else
19150: GO 19204
// begin if gammaCommander = 2 then
19152: LD_EXP 12
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19204
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_INT 26
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 72
19181: PPUSH
19182: LD_STRING D3-Sol1-1a
19184: PPUSH
19185: LD_STRING D3-Sol1-1a
19187: PPUSH
19188: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3-JMM-2
19199: PPUSH
19200: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19204: LD_EXP 13
19208: PPUSH
19209: CALL_OW 302
19213: PUSH
19214: LD_EXP 12
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: IFFALSE 19239
// begin Say ( Houten , D3-VanH-1 ) ;
19225: LD_EXP 13
19229: PPUSH
19230: LD_STRING D3-VanH-1
19232: PPUSH
19233: CALL_OW 88
// end else
19237: GO 19291
// begin if gammaCommander = 3 then
19239: LD_EXP 12
19243: PUSH
19244: LD_INT 3
19246: EQUAL
19247: IFFALSE 19291
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19249: LD_EXP 11
19253: PPUSH
19254: LD_INT 26
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 72
19268: PPUSH
19269: LD_STRING D3-Sol1-1b
19271: PPUSH
19272: LD_STRING D3-Sol1-1b
19274: PPUSH
19275: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19279: LD_EXP 1
19283: PPUSH
19284: LD_STRING D3-JMM-2
19286: PPUSH
19287: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19291: LD_EXP 15
19295: PPUSH
19296: CALL_OW 302
19300: IFFALSE 19328
// begin Say ( Joan , D3a-Joan-1 ) ;
19302: LD_EXP 15
19306: PPUSH
19307: LD_STRING D3a-Joan-1
19309: PPUSH
19310: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19314: LD_EXP 1
19318: PPUSH
19319: LD_STRING D3a-JMM-1
19321: PPUSH
19322: CALL_OW 88
// end else
19326: GO 19670
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19328: LD_STRING 06_JoanStatus_1
19330: PPUSH
19331: LD_INT 0
19333: PPUSH
19334: CALL_OW 30
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19670
// begin Say ( JMM , D3b-JMM-1 ) ;
19344: LD_EXP 1
19348: PPUSH
19349: LD_STRING D3b-JMM-1
19351: PPUSH
19352: CALL_OW 88
// if gammaCommander = 1 then
19356: LD_EXP 12
19360: PUSH
19361: LD_INT 1
19363: EQUAL
19364: IFFALSE 19421
// if IsOK ( Donaldson ) then
19366: LD_EXP 3
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19391
// Say ( Donaldson , D3b-Don-1 ) else
19377: LD_EXP 3
19381: PPUSH
19382: LD_STRING D3b-Don-1
19384: PPUSH
19385: CALL_OW 88
19389: GO 19421
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19391: LD_EXP 11
19395: PPUSH
19396: LD_INT 26
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 72
19410: PPUSH
19411: LD_STRING D3b-Sol1-1
19413: PPUSH
19414: LD_STRING D3b-Sol1-1
19416: PPUSH
19417: CALL 7358 0 3
// if gammaCommander = 2 then
19421: LD_EXP 12
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19486
// if IsOk ( Brown ) then
19431: LD_EXP 2
19435: PPUSH
19436: CALL_OW 302
19440: IFFALSE 19456
// Say ( Brown , D3b-Brown-1 ) else
19442: LD_EXP 2
19446: PPUSH
19447: LD_STRING D3b-Brown-1
19449: PPUSH
19450: CALL_OW 88
19454: GO 19486
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19456: LD_EXP 11
19460: PPUSH
19461: LD_INT 26
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 72
19475: PPUSH
19476: LD_STRING D3b-Sol1-1
19478: PPUSH
19479: LD_STRING D3b-Sol1-1
19481: PPUSH
19482: CALL 7358 0 3
// if gammaCommander = 3 then
19486: LD_EXP 12
19490: PUSH
19491: LD_INT 3
19493: EQUAL
19494: IFFALSE 19551
// if IsOk ( Houten ) then
19496: LD_EXP 13
19500: PPUSH
19501: CALL_OW 302
19505: IFFALSE 19521
// Say ( Houten , D3b-VanH-1 ) else
19507: LD_EXP 13
19511: PPUSH
19512: LD_STRING D3b-VanH-1
19514: PPUSH
19515: CALL_OW 88
19519: GO 19551
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19521: LD_EXP 11
19525: PPUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 72
19540: PPUSH
19541: LD_STRING D3b-Sol1-1
19543: PPUSH
19544: LD_STRING D3b-Sol1-1
19546: PPUSH
19547: CALL 7358 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19551: LD_EXP 11
19555: PPUSH
19556: LD_INT 26
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 72
19570: PUSH
19571: LD_EXP 12
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: PUSH
19580: LD_EXP 3
19584: PPUSH
19585: CALL_OW 302
19589: AND
19590: OR
19591: PUSH
19592: LD_EXP 12
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: PUSH
19601: LD_EXP 2
19605: PPUSH
19606: CALL_OW 302
19610: AND
19611: OR
19612: PUSH
19613: LD_EXP 12
19617: PUSH
19618: LD_INT 3
19620: EQUAL
19621: PUSH
19622: LD_EXP 13
19626: PPUSH
19627: CALL_OW 302
19631: AND
19632: OR
19633: IFFALSE 19647
// Say ( JMM , D3b-JMM-2 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D3b-JMM-2
19642: PPUSH
19643: CALL_OW 88
// if IsOK ( Lisa ) then
19647: LD_EXP 6
19651: PPUSH
19652: CALL_OW 302
19656: IFFALSE 19670
// Say ( Lisa , D3b-Lisa-2 ) ;
19658: LD_EXP 6
19662: PPUSH
19663: LD_STRING D3b-Lisa-2
19665: PPUSH
19666: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19670: LD_ADDR_VAR 0 1
19674: PUSH
19675: LD_EXP 1
19679: PUSH
19680: LD_EXP 2
19684: PUSH
19685: LD_EXP 3
19689: PUSH
19690: LD_EXP 4
19694: PUSH
19695: LD_EXP 5
19699: PUSH
19700: LD_EXP 6
19704: PUSH
19705: LD_EXP 7
19709: PUSH
19710: LD_EXP 8
19714: PUSH
19715: LD_EXP 9
19719: PUSH
19720: LD_EXP 10
19724: PUSH
19725: LD_EXP 15
19729: PUSH
19730: LD_EXP 14
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_EXP 42
19753: ADD
19754: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19755: LD_INT 22
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PUSH
19846: LD_VAR 0 1
19850: DIFF
19851: PPUSH
19852: LD_STRING DCa-Sol1-1
19854: PPUSH
19855: LD_STRING DCa-Sol1-1
19857: PPUSH
19858: CALL 7358 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19862: LD_EXP 1
19866: PPUSH
19867: LD_STRING DCb-JMM-1
19869: PPUSH
19870: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19874: LD_INT 22
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 26
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 25
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_VAR 0 1
19969: DIFF
19970: PPUSH
19971: LD_STRING DCb-Sol1-1
19973: PPUSH
19974: LD_STRING DCb-Sol1-1
19976: PPUSH
19977: CALL 7358 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19981: LD_EXP 1
19985: PPUSH
19986: LD_STRING DCb-JMM-2
19988: PPUSH
19989: CALL_OW 88
// secondAttack = 1 ;
19993: LD_ADDR_EXP 34
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// end ;
20001: PPOPN 1
20003: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
20004: LD_EXP 39
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_OWVAR 1
20017: PUSH
20018: LD_INT 37800
20020: GREATEREQUAL
20021: AND
20022: IFFALSE 20095
20024: GO 20026
20026: DISABLE
// begin DialogueOn ;
20027: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
20031: LD_EXP 23
20035: PPUSH
20036: LD_STRING D4-Pow-1
20038: PPUSH
20039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D4-JMM-1
20050: PPUSH
20051: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20055: LD_EXP 23
20059: PPUSH
20060: LD_STRING D4-Pow-2
20062: PPUSH
20063: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D4-JMM-2
20074: PPUSH
20075: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20079: LD_EXP 23
20083: PPUSH
20084: LD_STRING D4-Pow-3
20086: PPUSH
20087: CALL_OW 94
// DialogueOff ;
20091: CALL_OW 7
// end ;
20095: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20096: LD_EXP 39
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: PUSH
20105: LD_OWVAR 1
20109: PUSH
20110: LD_INT 50400
20112: GREATEREQUAL
20113: AND
20114: IFFALSE 20139
20116: GO 20118
20118: DISABLE
// begin DialogueOn ;
20119: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20123: LD_EXP 23
20127: PPUSH
20128: LD_STRING D4a-Pow-1
20130: PPUSH
20131: CALL_OW 94
// DialogueOff ;
20135: CALL_OW 7
// end ;
20139: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20140: LD_EXP 39
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: PUSH
20149: LD_OWVAR 1
20153: PUSH
20154: LD_INT 73500
20156: GREATEREQUAL
20157: AND
20158: IFFALSE 20179
20160: GO 20162
20162: DISABLE
// begin PrepareSikorsky ;
20163: CALL 5871 0 0
// SikorskyArrive = 1 ;
20167: LD_ADDR_EXP 18
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// PrepareSikorskyArmy ;
20175: CALL 6051 0 0
// end ;
20179: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20180: LD_EXP 17
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 308
20192: IFFALSE 20384
20194: GO 20196
20196: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20197: LD_EXP 17
20201: PPUSH
20202: CALL_OW 87
// DialogueOn ;
20206: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20210: LD_EXP 16
20214: PPUSH
20215: LD_STRING D5-Sik-1
20217: PPUSH
20218: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20222: LD_EXP 1
20226: PPUSH
20227: LD_STRING D5-JMM-1a
20229: PPUSH
20230: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20234: LD_EXP 16
20238: PPUSH
20239: LD_STRING D5-Sik-2
20241: PPUSH
20242: CALL_OW 88
// case query ( QSikorski ) of 1 :
20246: LD_STRING QSikorski
20248: PPUSH
20249: CALL_OW 97
20253: PUSH
20254: LD_INT 1
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20285
20262: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20263: LD_EXP 16
20267: PPUSH
20268: LD_STRING D5a-Sik-1
20270: PPUSH
20271: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20275: LD_ADDR_EXP 19
20279: PUSH
20280: LD_INT 2100
20282: ST_TO_ADDR
// end ; 2 :
20283: GO 20372
20285: LD_INT 2
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20316
20293: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5b-Sik-1
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; 3 :
20314: GO 20372
20316: LD_INT 3
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20371
20324: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20325: LD_EXP 16
20329: PPUSH
20330: LD_STRING D5c-Sik-1
20332: PPUSH
20333: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20337: LD_EXP 1
20341: PPUSH
20342: LD_STRING D5c-JMM-1
20344: PPUSH
20345: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20349: LD_EXP 16
20353: PPUSH
20354: LD_STRING D5c-Sik-2
20356: PPUSH
20357: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20361: LD_ADDR_EXP 19
20365: PUSH
20366: LD_INT 10500
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20372
20371: POP
// DialogueOff ;
20372: CALL_OW 7
// timerStatus = 1 ;
20376: LD_ADDR_EXP 35
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20385: LD_EXP 19
20389: PUSH
20390: LD_INT 35
20392: LESS
20393: IFFALSE 20441
20395: GO 20397
20397: DISABLE
// begin timerStatus = 0 ;
20398: LD_ADDR_EXP 35
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// DialogueOn ;
20406: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20410: LD_EXP 16
20414: PPUSH
20415: LD_STRING D6-Sik-1
20417: PPUSH
20418: CALL_OW 88
// DialogueOff ;
20422: CALL_OW 7
// SikorskyAI = 1 ;
20426: LD_ADDR_EXP 20
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20434: LD_STRING M2
20436: PPUSH
20437: CALL_OW 337
// end ;
20441: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20442: LD_EXP 17
20446: PPUSH
20447: LD_INT 18
20449: PPUSH
20450: CALL_OW 308
20454: IFFALSE 20564
20456: GO 20458
20458: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20459: LD_EXP 16
20463: PPUSH
20464: LD_STRING D7-Sik-1
20466: PPUSH
20467: CALL_OW 88
// wait ( 0 0$10 ) ;
20471: LD_INT 350
20473: PPUSH
20474: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20478: LD_EXP 1
20482: PPUSH
20483: LD_INT 24
20485: PPUSH
20486: CALL_OW 308
20490: PUSH
20491: LD_EXP 1
20495: PPUSH
20496: CALL 17107 0 1
20500: PUSH
20501: LD_EXP 1
20505: PPUSH
20506: CALL 17107 0 1
20510: PPUSH
20511: LD_INT 24
20513: PPUSH
20514: CALL_OW 308
20518: AND
20519: OR
20520: IFFALSE 20544
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20522: LD_EXP 16
20526: PPUSH
20527: LD_STRING D7a-Sik-1
20529: PPUSH
20530: CALL_OW 88
// SikorskyStatus = 1 ;
20534: LD_ADDR_EXP 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// end else
20542: GO 20564
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20544: LD_EXP 16
20548: PPUSH
20549: LD_STRING D7b-Sik-1
20551: PPUSH
20552: CALL_OW 88
// SikorskyStatus = 2 ;
20556: LD_ADDR_EXP 21
20560: PUSH
20561: LD_INT 2
20563: ST_TO_ADDR
// end ; end ; end_of_file
20564: END
// on BuildingComplete ( building ) do var tmp , un ;
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin if GetSide ( building ) = 3 then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 255
20578: PUSH
20579: LD_INT 3
20581: EQUAL
20582: IFFALSE 21119
// begin if GetBType ( building ) = b_depot then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20665
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 274
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 5000
20614: PPUSH
20615: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 274
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: LD_INT 5000
20634: PPUSH
20635: CALL_OW 277
// SetBName ( building , konev ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING konev
20646: PPUSH
20647: CALL_OW 500
// ruDepot = building ;
20651: LD_ADDR_EXP 28
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// BuildRussianBase ;
20661: CALL 7984 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 266
20688: PUSH
20689: LD_INT 2
20691: EQUAL
20692: OR
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: OR
20708: IFFALSE 20719
// ComUpgrade ( building ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 146
// if GetBType ( building ) = b_lab then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: IFFALSE 20783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 10
20741: PPUSH
20742: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 12
20753: PPUSH
20754: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 3
20768: PPUSH
20769: CALL 8528 0 3
// ruLab = building ;
20773: LD_ADDR_EXP 29
20777: PUSH
20778: LD_VAR 0 1
20782: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 32
20795: EQUAL
20796: IFFALSE 20914
// begin uc_side = 3 ;
20798: LD_ADDR_OWVAR 20
20802: PUSH
20803: LD_INT 3
20805: ST_TO_ADDR
// uc_nation = 3 ;
20806: LD_ADDR_OWVAR 21
20810: PUSH
20811: LD_INT 3
20813: ST_TO_ADDR
// hc_gallery =  ;
20814: LD_ADDR_OWVAR 33
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// hc_name =  ;
20822: LD_ADDR_OWVAR 26
20826: PUSH
20827: LD_STRING 
20829: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_EXP 25
20840: PPUSH
20841: LD_EXP 26
20845: PPUSH
20846: CALL_OW 12
20850: PPUSH
20851: CALL_OW 380
// un = CreateHuman ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: CALL_OW 44
20864: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 43
20886: PUSH
20887: LD_INT 44
20889: PUSH
20890: LD_INT 46
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: PPUSH
20910: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 266
20923: PUSH
20924: LD_INT 33
20926: EQUAL
20927: IFFALSE 20964
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 43
20936: PUSH
20937: LD_INT 44
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 12
20958: ARRAY
20959: PPUSH
20960: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL_OW 266
20973: PUSH
20974: LD_INT 32
20976: EQUAL
20977: IFFALSE 21014
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 43
20986: PUSH
20987: LD_INT 44
20989: PUSH
20990: LD_INT 46
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 3
21003: PPUSH
21004: CALL_OW 12
21008: ARRAY
21009: PPUSH
21010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 266
21023: PUSH
21024: LD_INT 24
21026: EQUAL
21027: IFFALSE 21037
// russianAI = 1 ;
21029: LD_ADDR_EXP 27
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
21037: LD_EXP 31
21041: PUSH
21042: LD_INT 0
21044: GREATER
21045: IFFALSE 21119
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21047: LD_ADDR_EXP 31
21051: PUSH
21052: LD_EXP 31
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 3
21064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21065: LD_ADDR_EXP 31
21069: PUSH
21070: LD_EXP 31
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 3
21082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21083: LD_ADDR_EXP 31
21087: PUSH
21088: LD_EXP 31
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 3
21100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21101: LD_ADDR_EXP 31
21105: PUSH
21106: LD_EXP 31
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 3
21118: ST_TO_ADDR
// end ; end ; end ;
21119: PPOPN 3
21121: END
// on UpgradeComplete ( building ) do var i ;
21122: LD_INT 0
21124: PPUSH
// begin if GetSide ( building ) = 3 then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PUSH
21135: LD_INT 3
21137: EQUAL
21138: IFFALSE 21319
// begin if GetBType ( building ) = b_factory then
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 266
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21208
// ComEnterUnit ( i , building ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 120
21206: GO 21189
21208: POP
21209: POP
// ruFab = building ;
21210: LD_ADDR_EXP 30
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 266
21229: PUSH
21230: LD_INT 8
21232: EQUAL
21233: IFFALSE 21290
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 25
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21288
// ComEnterUnit ( i , building ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 120
21286: GO 21269
21288: POP
21289: POP
// if GetBType ( building ) = b_warehouse then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21319
// begin ComEnterUnit ( Borodin , building ) ;
21305: LD_EXP 24
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 120
// end ; end ; end ;
21319: PPOPN 2
21321: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: PUSH
21351: LD_EXP 41
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: AND
21360: IFFALSE 21478
// begin varEvent1 = 1 ;
21362: LD_ADDR_EXP 41
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PUSH
21459: LD_EXP 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: DIFF
21467: PPUSH
21468: LD_STRING DC-Sol1-1
21470: PPUSH
21471: LD_STRING DC-FSol1-1
21473: PPUSH
21474: CALL 7358 0 3
// end ; end ;
21478: PPOPN 1
21480: END
// on UnitDestroyed ( unit ) do var i ;
21481: LD_INT 0
21483: PPUSH
// begin if unit = Joan then
21484: LD_VAR 0 1
21488: PUSH
21489: LD_EXP 15
21493: EQUAL
21494: IFFALSE 21503
// DeleteCharacters ( Joan ) ;
21496: LD_STRING Joan
21498: PPUSH
21499: CALL_OW 40
// if GetSide ( unit ) = 3 then
21503: LD_VAR 0 1
21507: PPUSH
21508: CALL_OW 255
21512: PUSH
21513: LD_INT 3
21515: EQUAL
21516: IFFALSE 22286
// begin if GetType ( unit ) = unit_building then
21518: LD_VAR 0 1
21522: PPUSH
21523: CALL_OW 247
21527: PUSH
21528: LD_INT 3
21530: EQUAL
21531: IFFALSE 22223
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 266
21542: PUSH
21543: LD_INT 31
21545: EQUAL
21546: PUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 266
21556: PUSH
21557: LD_INT 32
21559: EQUAL
21560: OR
21561: PUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 266
21571: PUSH
21572: LD_INT 36
21574: EQUAL
21575: OR
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 266
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: OR
21591: PUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 266
21601: PUSH
21602: LD_INT 24
21604: EQUAL
21605: OR
21606: PUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 266
21616: PUSH
21617: LD_INT 17
21619: EQUAL
21620: OR
21621: PUSH
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 266
21631: PUSH
21632: LD_INT 25
21634: EQUAL
21635: OR
21636: PUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 266
21646: PUSH
21647: LD_INT 19
21649: EQUAL
21650: OR
21651: PUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 266
21661: PUSH
21662: LD_INT 20
21664: EQUAL
21665: OR
21666: PUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 266
21676: PUSH
21677: LD_INT 18
21679: EQUAL
21680: OR
21681: PUSH
21682: LD_VAR 0 1
21686: PPUSH
21687: CALL_OW 266
21691: PUSH
21692: LD_INT 21
21694: EQUAL
21695: OR
21696: PUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 266
21706: PUSH
21707: LD_INT 23
21709: EQUAL
21710: OR
21711: PUSH
21712: LD_VAR 0 1
21716: PPUSH
21717: CALL_OW 266
21721: PUSH
21722: LD_INT 16
21724: EQUAL
21725: OR
21726: PUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 266
21736: PUSH
21737: LD_INT 6
21739: EQUAL
21740: OR
21741: PUSH
21742: LD_VAR 0 1
21746: PPUSH
21747: CALL_OW 266
21751: PUSH
21752: LD_INT 29
21754: EQUAL
21755: OR
21756: PUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: CALL_OW 266
21766: PUSH
21767: LD_INT 26
21769: EQUAL
21770: OR
21771: PUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 266
21781: PUSH
21782: LD_INT 30
21784: EQUAL
21785: OR
21786: PUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 266
21796: PUSH
21797: LD_INT 28
21799: EQUAL
21800: OR
21801: PUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: CALL_OW 266
21811: PUSH
21812: LD_INT 27
21814: EQUAL
21815: OR
21816: PUSH
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 266
21826: PUSH
21827: LD_INT 33
21829: EQUAL
21830: OR
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 2
21844: EQUAL
21845: OR
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 266
21856: PUSH
21857: LD_INT 4
21859: EQUAL
21860: OR
21861: IFFALSE 21947
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21863: LD_ADDR_EXP 31
21867: PUSH
21868: LD_EXP 31
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 266
21882: ADD
21883: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21884: LD_ADDR_EXP 31
21888: PUSH
21889: LD_EXP 31
21893: PUSH
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 250
21903: ADD
21904: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21905: LD_ADDR_EXP 31
21909: PUSH
21910: LD_EXP 31
21914: PUSH
21915: LD_VAR 0 1
21919: PPUSH
21920: CALL_OW 251
21924: ADD
21925: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21926: LD_ADDR_EXP 31
21930: PUSH
21931: LD_EXP 31
21935: PUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 254
21945: ADD
21946: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 266
21956: PUSH
21957: LD_INT 1
21959: EQUAL
21960: IFFALSE 22039
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21962: LD_ADDR_EXP 31
21966: PUSH
21967: LD_EXP 31
21971: PUSH
21972: LD_INT 0
21974: ADD
21975: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21976: LD_ADDR_EXP 31
21980: PUSH
21981: LD_EXP 31
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 250
21995: ADD
21996: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21997: LD_ADDR_EXP 31
22001: PUSH
22002: LD_EXP 31
22006: PUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 251
22016: ADD
22017: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22018: LD_ADDR_EXP 31
22022: PUSH
22023: LD_EXP 31
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 254
22037: ADD
22038: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 266
22048: PUSH
22049: LD_INT 3
22051: EQUAL
22052: IFFALSE 22131
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22054: LD_ADDR_EXP 31
22058: PUSH
22059: LD_EXP 31
22063: PUSH
22064: LD_INT 2
22066: ADD
22067: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22068: LD_ADDR_EXP 31
22072: PUSH
22073: LD_EXP 31
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 250
22087: ADD
22088: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22089: LD_ADDR_EXP 31
22093: PUSH
22094: LD_EXP 31
22098: PUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 251
22108: ADD
22109: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22110: LD_ADDR_EXP 31
22114: PUSH
22115: LD_EXP 31
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: CALL_OW 254
22129: ADD
22130: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL_OW 266
22140: PUSH
22141: LD_INT 5
22143: EQUAL
22144: IFFALSE 22223
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22146: LD_ADDR_EXP 31
22150: PUSH
22151: LD_EXP 31
22155: PUSH
22156: LD_INT 4
22158: ADD
22159: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22160: LD_ADDR_EXP 31
22164: PUSH
22165: LD_EXP 31
22169: PUSH
22170: LD_VAR 0 1
22174: PPUSH
22175: CALL_OW 250
22179: ADD
22180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22181: LD_ADDR_EXP 31
22185: PUSH
22186: LD_EXP 31
22190: PUSH
22191: LD_VAR 0 1
22195: PPUSH
22196: CALL_OW 251
22200: ADD
22201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22202: LD_ADDR_EXP 31
22206: PUSH
22207: LD_EXP 31
22211: PUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 254
22221: ADD
22222: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL_OW 247
22232: PUSH
22233: LD_INT 1
22235: EQUAL
22236: IFFALSE 22286
// begin for i in defenders_list do
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_EXP 32
22247: PUSH
22248: FOR_IN
22249: IFFALSE 22284
// if i = unit then
22251: LD_VAR 0 2
22255: PUSH
22256: LD_VAR 0 1
22260: EQUAL
22261: IFFALSE 22282
// defenders_list = defenders_list diff [ unit ] ;
22263: LD_ADDR_EXP 32
22267: PUSH
22268: LD_EXP 32
22272: PUSH
22273: LD_VAR 0 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: DIFF
22281: ST_TO_ADDR
22282: GO 22248
22284: POP
22285: POP
// end ; end ; end ;
22286: PPOPN 2
22288: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL 41153 0 1
// end ; end_of_file
22298: PPOPN 1
22300: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
// begin enemyWayX = [ ] ;
22307: LD_ADDR_EXP 46
22311: PUSH
22312: EMPTY
22313: ST_TO_ADDR
// enemyWayY = [ ] ;
22314: LD_ADDR_EXP 47
22318: PUSH
22319: EMPTY
22320: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_INT 3
22331: PPUSH
22332: CALL_OW 12
22336: ST_TO_ADDR
// if rnd = 1 then
22337: LD_VAR 0 1
22341: PUSH
22342: LD_INT 1
22344: EQUAL
22345: IFFALSE 22385
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22347: LD_ADDR_EXP 46
22351: PUSH
22352: LD_INT 73
22354: PUSH
22355: LD_INT 46
22357: PUSH
22358: LD_INT 29
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22366: LD_ADDR_EXP 47
22370: PUSH
22371: LD_INT 71
22373: PUSH
22374: LD_INT 43
22376: PUSH
22377: LD_INT 29
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// end ; if rnd = 2 then
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 2
22392: EQUAL
22393: IFFALSE 22417
// begin enemyWayX = [ 64 ] ;
22395: LD_ADDR_EXP 46
22399: PUSH
22400: LD_INT 64
22402: PUSH
22403: EMPTY
22404: LIST
22405: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22406: LD_ADDR_EXP 47
22410: PUSH
22411: LD_INT 43
22413: PUSH
22414: EMPTY
22415: LIST
22416: ST_TO_ADDR
// end ; if rnd = 3 then
22417: LD_VAR 0 1
22421: PUSH
22422: LD_INT 3
22424: EQUAL
22425: IFFALSE 22449
// begin enemyWayX = [ 80 ] ;
22427: LD_ADDR_EXP 46
22431: PUSH
22432: LD_INT 80
22434: PUSH
22435: EMPTY
22436: LIST
22437: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22438: LD_ADDR_EXP 47
22442: PUSH
22443: LD_INT 28
22445: PUSH
22446: EMPTY
22447: LIST
22448: ST_TO_ADDR
// end ; enable ;
22449: ENABLE
// end ;
22450: PPOPN 1
22452: END
// every 0 0$1 do
22453: GO 22455
22455: DISABLE
// begin enable ;
22456: ENABLE
// if escapeAvalaible = 0 then
22457: LD_EXP 36
22461: PUSH
22462: LD_INT 0
22464: EQUAL
22465: IFFALSE 22477
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22467: LD_INT 3
22469: PPUSH
22470: LD_INT 6
22472: PPUSH
22473: CALL 8769 0 2
// if escapeAvalaible = 0 then
22477: LD_EXP 36
22481: PUSH
22482: LD_INT 0
22484: EQUAL
22485: IFFALSE 22497
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22487: LD_INT 1
22489: PPUSH
22490: LD_INT 24
22492: PPUSH
22493: CALL 9429 0 2
// if russianAI = 1 then
22497: LD_EXP 27
22501: PUSH
22502: LD_INT 1
22504: EQUAL
22505: IFFALSE 22575
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22507: LD_INT 3
22509: PPUSH
22510: LD_INT 7
22512: PPUSH
22513: LD_INT 6
22515: PPUSH
22516: LD_EXP 29
22520: PPUSH
22521: CALL 11871 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22525: LD_INT 3
22527: PPUSH
22528: LD_EXP 28
22532: PPUSH
22533: LD_INT 6
22535: PPUSH
22536: LD_EXP 31
22540: PPUSH
22541: CALL 11465 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22545: LD_INT 3
22547: PPUSH
22548: LD_INT 26
22550: PPUSH
22551: LD_EXP 46
22555: PPUSH
22556: LD_EXP 47
22560: PPUSH
22561: CALL 10329 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22565: LD_INT 3
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: CALL 12415 0 2
// end ; if SikorskyArrive = 1 then
22575: LD_EXP 18
22579: PUSH
22580: LD_INT 1
22582: EQUAL
22583: IFFALSE 22601
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22585: LD_INT 3
22587: PPUSH
22588: LD_INT 10
22590: PPUSH
22591: LD_INT 53
22593: PPUSH
22594: LD_INT 59
22596: PPUSH
22597: CALL 10126 0 4
// end ;
22601: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22602: LD_EXP 27
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22886
22612: GO 22614
22614: DISABLE
22615: LD_INT 0
22617: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22618: LD_ADDR_VAR 0 1
22622: PUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 21
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 32
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 35
22661: PUSH
22662: LD_INT 43
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 35
22671: PUSH
22672: LD_INT 44
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 35
22681: PUSH
22682: LD_INT 46
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: PPUSH
22705: CALL_OW 69
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22750
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_INT 43
22720: PUSH
22721: LD_INT 44
22723: PUSH
22724: LD_INT 46
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: PPUSH
22735: LD_INT 3
22737: PPUSH
22738: CALL_OW 12
22742: ARRAY
22743: PPUSH
22744: CALL_OW 431
22748: GO 22710
22750: POP
22751: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22752: LD_ADDR_VAR 0 1
22756: PUSH
22757: LD_INT 22
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 21
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 30
22779: PUSH
22780: LD_INT 33
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 35
22795: PUSH
22796: LD_INT 43
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 35
22805: PUSH
22806: LD_INT 44
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 35
22815: PUSH
22816: LD_INT 46
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 69
22843: PUSH
22844: FOR_IN
22845: IFFALSE 22884
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22847: LD_VAR 0 1
22851: PPUSH
22852: LD_INT 43
22854: PUSH
22855: LD_INT 44
22857: PUSH
22858: LD_INT 46
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PPUSH
22869: LD_INT 3
22871: PPUSH
22872: CALL_OW 12
22876: ARRAY
22877: PPUSH
22878: CALL_OW 431
22882: GO 22844
22884: POP
22885: POP
// end ;
22886: PPOPN 1
22888: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22889: LD_EXP 24
22893: PPUSH
22894: CALL_OW 310
22898: NOT
22899: PUSH
22900: LD_EXP 28
22904: PPUSH
22905: CALL_OW 302
22909: AND
22910: PUSH
22911: LD_EXP 28
22915: PPUSH
22916: CALL_OW 255
22920: PUSH
22921: LD_INT 3
22923: EQUAL
22924: AND
22925: IFFALSE 22945
22927: GO 22929
22929: DISABLE
// begin enable ;
22930: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22931: LD_EXP 24
22935: PPUSH
22936: LD_EXP 28
22940: PPUSH
22941: CALL_OW 120
// end ;
22945: END
// every 0 0$1 trigger SikorskyAI = 1 do
22946: LD_EXP 20
22950: PUSH
22951: LD_INT 1
22953: EQUAL
22954: IFFALSE 22989
22956: GO 22958
22958: DISABLE
// begin enable ;
22959: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22960: LD_INT 4
22962: PPUSH
22963: LD_INT 10
22965: PPUSH
22966: LD_INT 93
22968: PPUSH
22969: LD_INT 93
22971: PPUSH
22972: CALL 10126 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22976: LD_INT 4
22978: PPUSH
22979: LD_INT 11
22981: PPUSH
22982: LD_INT 3
22984: PPUSH
22985: CALL 16627 0 3
// end ;
22989: END
// every 0 0$1 trigger SikorskyAI = 1 do
22990: LD_EXP 20
22994: PUSH
22995: LD_INT 1
22997: EQUAL
22998: IFFALSE 23010
23000: GO 23002
23002: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
23003: LD_INT 4
23005: PPUSH
23006: CALL 11137 0 1
23010: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
23011: LD_EXP 27
23015: PUSH
23016: LD_INT 1
23018: EQUAL
23019: PUSH
23020: LD_EXP 30
23024: PPUSH
23025: CALL_OW 302
23029: AND
23030: PUSH
23031: LD_EXP 30
23035: PPUSH
23036: CALL_OW 255
23040: PUSH
23041: LD_INT 3
23043: EQUAL
23044: AND
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 21
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 3
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: AND
23090: IFFALSE 23324
23092: GO 23094
23094: DISABLE
// begin enable ;
23095: ENABLE
// if Difficulty = 1 then
23096: LD_OWVAR 67
23100: PUSH
23101: LD_INT 1
23103: EQUAL
23104: IFFALSE 23172
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23106: LD_INT 3
23108: PPUSH
23109: LD_EXP 30
23113: PPUSH
23114: LD_INT 5
23116: PPUSH
23117: LD_INT 8
23119: PPUSH
23120: CALL_OW 12
23124: PPUSH
23125: LD_INT 43
23127: PUSH
23128: LD_INT 43
23130: PUSH
23131: LD_INT 43
23133: PUSH
23134: LD_INT 43
23136: PUSH
23137: LD_INT 44
23139: PUSH
23140: LD_INT 44
23142: PUSH
23143: LD_INT 44
23145: PUSH
23146: LD_INT 46
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: LD_INT 3
23164: PPUSH
23165: LD_INT 24
23167: PPUSH
23168: CALL 9972 0 7
// if Difficulty = 2 then
23172: LD_OWVAR 67
23176: PUSH
23177: LD_INT 2
23179: EQUAL
23180: IFFALSE 23248
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23182: LD_INT 3
23184: PPUSH
23185: LD_EXP 30
23189: PPUSH
23190: LD_INT 6
23192: PPUSH
23193: LD_INT 8
23195: PPUSH
23196: CALL_OW 12
23200: PPUSH
23201: LD_INT 43
23203: PUSH
23204: LD_INT 43
23206: PUSH
23207: LD_INT 44
23209: PUSH
23210: LD_INT 44
23212: PUSH
23213: LD_INT 44
23215: PUSH
23216: LD_INT 44
23218: PUSH
23219: LD_INT 46
23221: PUSH
23222: LD_INT 46
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: LD_INT 3
23240: PPUSH
23241: LD_INT 24
23243: PPUSH
23244: CALL 9972 0 7
// if Difficulty >= 3 then
23248: LD_OWVAR 67
23252: PUSH
23253: LD_INT 3
23255: GREATEREQUAL
23256: IFFALSE 23324
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23258: LD_INT 3
23260: PPUSH
23261: LD_EXP 30
23265: PPUSH
23266: LD_INT 7
23268: PPUSH
23269: LD_INT 8
23271: PPUSH
23272: CALL_OW 12
23276: PPUSH
23277: LD_INT 43
23279: PUSH
23280: LD_INT 43
23282: PUSH
23283: LD_INT 44
23285: PUSH
23286: LD_INT 44
23288: PUSH
23289: LD_INT 44
23291: PUSH
23292: LD_INT 46
23294: PUSH
23295: LD_INT 46
23297: PUSH
23298: LD_INT 46
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: LD_INT 3
23316: PPUSH
23317: LD_INT 24
23319: PPUSH
23320: CALL 9972 0 7
// end ;
23324: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23325: LD_EXP 38
23329: PUSH
23330: LD_INT 1
23332: EQUAL
23333: IFFALSE 23415
23335: GO 23337
23337: DISABLE
23338: LD_INT 0
23340: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23341: LD_ADDR_VAR 0 1
23345: PUSH
23346: LD_INT 22
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 24
23371: PUSH
23372: LD_INT 650
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: PPUSH
23388: CALL_OW 69
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23413
// ComMoveXY ( i , 51 , 12 ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_INT 51
23403: PPUSH
23404: LD_INT 12
23406: PPUSH
23407: CALL_OW 111
23411: GO 23393
23413: POP
23414: POP
// end ; end_of_file
23415: PPOPN 1
23417: END
// every 1 1$20 trigger firstAttack = 1 do
23418: LD_EXP 33
23422: PUSH
23423: LD_INT 1
23425: EQUAL
23426: IFFALSE 23536
23428: GO 23430
23430: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23431: LD_INT 6
23433: PPUSH
23434: LD_INT 3
23436: PPUSH
23437: LD_INT 3
23439: PPUSH
23440: LD_INT 4
23442: PPUSH
23443: CALL_OW 12
23447: PUSH
23448: LD_INT 4
23450: PPUSH
23451: LD_INT 6
23453: PPUSH
23454: CALL_OW 12
23458: PUSH
23459: LD_INT 5
23461: PPUSH
23462: LD_INT 6
23464: PPUSH
23465: CALL_OW 12
23469: PUSH
23470: LD_INT 6
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: LD_OWVAR 67
23483: ARRAY
23484: PPUSH
23485: LD_INT 0
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: LD_INT 0
23493: PPUSH
23494: LD_INT 0
23496: PPUSH
23497: LD_EXP 25
23501: PPUSH
23502: LD_EXP 26
23506: PPUSH
23507: CALL_OW 12
23511: PPUSH
23512: LD_INT 16
23514: PPUSH
23515: LD_INT 7
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: LD_INT 3
23526: PPUSH
23527: CALL_OW 12
23531: PPUSH
23532: CALL 12645 0 12
23536: END
// every 1 1$40 trigger firstAttack = 1 do
23537: LD_EXP 33
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23641
23547: GO 23549
23549: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23550: LD_INT 16
23552: PPUSH
23553: LD_INT 6
23555: PPUSH
23556: LD_INT 3
23558: PPUSH
23559: LD_INT 4
23561: PPUSH
23562: CALL_OW 12
23566: PUSH
23567: LD_INT 4
23569: PPUSH
23570: LD_INT 5
23572: PPUSH
23573: CALL_OW 12
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 6
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: LD_OWVAR 67
23594: ARRAY
23595: PPUSH
23596: LD_EXP 25
23600: PPUSH
23601: LD_EXP 26
23605: PPUSH
23606: CALL_OW 12
23610: PPUSH
23611: LD_INT 3
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: LD_INT 44
23622: PUSH
23623: LD_INT 46
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PPUSH
23630: EMPTY
23631: PPUSH
23632: EMPTY
23633: PPUSH
23634: LD_INT 1
23636: PPUSH
23637: CALL 14938 0 11
23641: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23642: LD_EXP 33
23646: PUSH
23647: LD_INT 1
23649: EQUAL
23650: PUSH
23651: LD_EXP 39
23655: PUSH
23656: LD_INT 0
23658: EQUAL
23659: AND
23660: IFFALSE 23770
23662: GO 23664
23664: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23665: LD_INT 6
23667: PPUSH
23668: LD_INT 3
23670: PPUSH
23671: LD_INT 4
23673: PPUSH
23674: LD_INT 5
23676: PPUSH
23677: CALL_OW 12
23681: PUSH
23682: LD_INT 5
23684: PPUSH
23685: LD_INT 6
23687: PPUSH
23688: CALL_OW 12
23692: PUSH
23693: LD_INT 5
23695: PPUSH
23696: LD_INT 6
23698: PPUSH
23699: CALL_OW 12
23703: PUSH
23704: LD_INT 6
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: LD_OWVAR 67
23717: ARRAY
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: LD_INT 0
23724: PPUSH
23725: LD_INT 0
23727: PPUSH
23728: LD_INT 0
23730: PPUSH
23731: LD_EXP 25
23735: PPUSH
23736: LD_EXP 26
23740: PPUSH
23741: CALL_OW 12
23745: PPUSH
23746: LD_INT 16
23748: PPUSH
23749: LD_INT 7
23751: PPUSH
23752: LD_INT 1
23754: PPUSH
23755: LD_INT 1
23757: PPUSH
23758: LD_INT 3
23760: PPUSH
23761: CALL_OW 12
23765: PPUSH
23766: CALL 12645 0 12
23770: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23771: LD_EXP 33
23775: PUSH
23776: LD_INT 1
23778: EQUAL
23779: PUSH
23780: LD_EXP 39
23784: PUSH
23785: LD_INT 0
23787: EQUAL
23788: AND
23789: IFFALSE 23889
23791: GO 23793
23793: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23794: LD_INT 16
23796: PPUSH
23797: LD_INT 6
23799: PPUSH
23800: LD_INT 4
23802: PPUSH
23803: LD_INT 5
23805: PPUSH
23806: CALL_OW 12
23810: PUSH
23811: LD_INT 6
23813: PPUSH
23814: LD_INT 7
23816: PPUSH
23817: CALL_OW 12
23821: PUSH
23822: LD_INT 7
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: LD_OWVAR 67
23838: ARRAY
23839: PPUSH
23840: LD_EXP 25
23844: PPUSH
23845: LD_EXP 26
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: LD_INT 3
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_INT 3
23863: PPUSH
23864: LD_INT 43
23866: PUSH
23867: LD_INT 44
23869: PUSH
23870: LD_INT 46
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PPUSH
23878: EMPTY
23879: PPUSH
23880: EMPTY
23881: PPUSH
23882: LD_INT 1
23884: PPUSH
23885: CALL 14938 0 11
23889: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23890: LD_EXP 33
23894: PUSH
23895: LD_INT 1
23897: EQUAL
23898: PUSH
23899: LD_EXP 39
23903: PUSH
23904: LD_INT 0
23906: EQUAL
23907: AND
23908: IFFALSE 24008
23910: GO 23912
23912: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23913: LD_INT 16
23915: PPUSH
23916: LD_INT 6
23918: PPUSH
23919: LD_INT 4
23921: PPUSH
23922: LD_INT 5
23924: PPUSH
23925: CALL_OW 12
23929: PUSH
23930: LD_INT 6
23932: PPUSH
23933: LD_INT 7
23935: PPUSH
23936: CALL_OW 12
23940: PUSH
23941: LD_INT 7
23943: PUSH
23944: LD_INT 8
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_OWVAR 67
23957: ARRAY
23958: PPUSH
23959: LD_EXP 25
23963: PPUSH
23964: LD_EXP 26
23968: PPUSH
23969: CALL_OW 12
23973: PPUSH
23974: LD_INT 3
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: LD_INT 3
23982: PPUSH
23983: LD_INT 43
23985: PUSH
23986: LD_INT 44
23988: PUSH
23989: LD_INT 46
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: PPUSH
23997: EMPTY
23998: PPUSH
23999: EMPTY
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: CALL 14938 0 11
24008: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
24009: LD_EXP 33
24013: PUSH
24014: LD_INT 1
24016: EQUAL
24017: PUSH
24018: LD_EXP 39
24022: PUSH
24023: LD_INT 0
24025: EQUAL
24026: AND
24027: IFFALSE 24107
24029: GO 24031
24031: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24032: LD_INT 16
24034: PPUSH
24035: LD_INT 6
24037: PPUSH
24038: LD_INT 4
24040: PUSH
24041: LD_INT 6
24043: PUSH
24044: LD_INT 7
24046: PUSH
24047: LD_INT 8
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: LD_OWVAR 67
24060: ARRAY
24061: PPUSH
24062: LD_EXP 25
24066: PPUSH
24067: LD_EXP 26
24071: PPUSH
24072: CALL_OW 12
24076: PPUSH
24077: LD_INT 3
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: LD_INT 3
24085: PPUSH
24086: LD_INT 44
24088: PUSH
24089: LD_INT 46
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PPUSH
24096: EMPTY
24097: PPUSH
24098: EMPTY
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL 14938 0 11
24107: END
// every 1 1$00 trigger secondAttack = 1 do
24108: LD_EXP 34
24112: PUSH
24113: LD_INT 1
24115: EQUAL
24116: IFFALSE 24202
24118: GO 24120
24120: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24121: LD_INT 6
24123: PPUSH
24124: LD_INT 3
24126: PPUSH
24127: LD_INT 3
24129: PUSH
24130: LD_INT 4
24132: PUSH
24133: LD_INT 5
24135: PUSH
24136: LD_INT 6
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: LD_OWVAR 67
24149: ARRAY
24150: PPUSH
24151: LD_INT 0
24153: PPUSH
24154: LD_INT 0
24156: PPUSH
24157: LD_INT 0
24159: PPUSH
24160: LD_INT 0
24162: PPUSH
24163: LD_EXP 25
24167: PPUSH
24168: LD_EXP 26
24172: PPUSH
24173: CALL_OW 12
24177: PPUSH
24178: LD_INT 16
24180: PPUSH
24181: LD_INT 7
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_INT 1
24189: PPUSH
24190: LD_INT 3
24192: PPUSH
24193: CALL_OW 12
24197: PPUSH
24198: CALL 12645 0 12
24202: END
// every 1 1$00 trigger secondAttack = 1 do
24203: LD_EXP 34
24207: PUSH
24208: LD_INT 1
24210: EQUAL
24211: IFFALSE 24319
24213: GO 24215
24215: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24216: LD_INT 16
24218: PPUSH
24219: LD_INT 6
24221: PPUSH
24222: LD_INT 5
24224: PPUSH
24225: LD_INT 6
24227: PPUSH
24228: CALL_OW 12
24232: PUSH
24233: LD_INT 6
24235: PPUSH
24236: LD_INT 9
24238: PPUSH
24239: CALL_OW 12
24243: PUSH
24244: LD_INT 7
24246: PPUSH
24247: LD_INT 9
24249: PPUSH
24250: CALL_OW 12
24254: PUSH
24255: LD_INT 9
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: LD_OWVAR 67
24268: ARRAY
24269: PPUSH
24270: LD_EXP 25
24274: PPUSH
24275: LD_EXP 26
24279: PPUSH
24280: CALL_OW 12
24284: PPUSH
24285: LD_INT 3
24287: PPUSH
24288: LD_INT 1
24290: PPUSH
24291: LD_INT 3
24293: PPUSH
24294: LD_INT 43
24296: PUSH
24297: LD_INT 44
24299: PUSH
24300: LD_INT 46
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PPUSH
24308: EMPTY
24309: PPUSH
24310: EMPTY
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL 14938 0 11
24319: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24320: LD_EXP 18
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: IFFALSE 24410
24330: GO 24332
24332: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24333: LD_INT 6
24335: PPUSH
24336: LD_INT 3
24338: PPUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: LD_INT 5
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: LD_OWVAR 67
24357: ARRAY
24358: PPUSH
24359: LD_INT 0
24361: PPUSH
24362: LD_INT 0
24364: PPUSH
24365: LD_INT 0
24367: PPUSH
24368: LD_INT 0
24370: PPUSH
24371: LD_EXP 25
24375: PPUSH
24376: LD_EXP 26
24380: PPUSH
24381: CALL_OW 12
24385: PPUSH
24386: LD_INT 16
24388: PPUSH
24389: LD_INT 7
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: LD_INT 1
24397: PPUSH
24398: LD_INT 3
24400: PPUSH
24401: CALL_OW 12
24405: PPUSH
24406: CALL 12645 0 12
24410: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24411: LD_EXP 18
24415: PUSH
24416: LD_INT 0
24418: EQUAL
24419: IFFALSE 24523
24421: GO 24423
24423: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24424: LD_INT 16
24426: PPUSH
24427: LD_INT 6
24429: PPUSH
24430: LD_INT 5
24432: PPUSH
24433: LD_INT 6
24435: PPUSH
24436: CALL_OW 12
24440: PUSH
24441: LD_INT 6
24443: PPUSH
24444: LD_INT 9
24446: PPUSH
24447: CALL_OW 12
24451: PUSH
24452: LD_INT 7
24454: PPUSH
24455: LD_INT 9
24457: PPUSH
24458: CALL_OW 12
24462: PUSH
24463: LD_INT 9
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: PUSH
24472: LD_OWVAR 67
24476: ARRAY
24477: PPUSH
24478: LD_EXP 25
24482: PPUSH
24483: LD_EXP 26
24487: PPUSH
24488: CALL_OW 12
24492: PPUSH
24493: LD_INT 3
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: LD_INT 3
24501: PPUSH
24502: LD_INT 44
24504: PUSH
24505: LD_INT 46
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: EMPTY
24513: PPUSH
24514: EMPTY
24515: PPUSH
24516: LD_INT 1
24518: PPUSH
24519: CALL 14938 0 11
24523: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24524: LD_EXP 18
24528: PUSH
24529: LD_INT 0
24531: EQUAL
24532: IFFALSE 24614
24534: GO 24536
24536: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24537: LD_INT 6
24539: PPUSH
24540: LD_INT 3
24542: PPUSH
24543: LD_INT 3
24545: PUSH
24546: LD_INT 4
24548: PUSH
24549: LD_INT 5
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_OWVAR 67
24561: ARRAY
24562: PPUSH
24563: LD_INT 0
24565: PPUSH
24566: LD_INT 0
24568: PPUSH
24569: LD_INT 0
24571: PPUSH
24572: LD_INT 0
24574: PPUSH
24575: LD_EXP 25
24579: PPUSH
24580: LD_EXP 26
24584: PPUSH
24585: CALL_OW 12
24589: PPUSH
24590: LD_INT 16
24592: PPUSH
24593: LD_INT 7
24595: PPUSH
24596: LD_INT 1
24598: PPUSH
24599: LD_INT 1
24601: PPUSH
24602: LD_INT 3
24604: PPUSH
24605: CALL_OW 12
24609: PPUSH
24610: CALL 12645 0 12
24614: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24615: LD_EXP 18
24619: PUSH
24620: LD_INT 0
24622: EQUAL
24623: IFFALSE 24727
24625: GO 24627
24627: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24628: LD_INT 16
24630: PPUSH
24631: LD_INT 6
24633: PPUSH
24634: LD_INT 5
24636: PPUSH
24637: LD_INT 6
24639: PPUSH
24640: CALL_OW 12
24644: PUSH
24645: LD_INT 6
24647: PPUSH
24648: LD_INT 9
24650: PPUSH
24651: CALL_OW 12
24655: PUSH
24656: LD_INT 7
24658: PPUSH
24659: LD_INT 9
24661: PPUSH
24662: CALL_OW 12
24666: PUSH
24667: LD_INT 9
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PUSH
24676: LD_OWVAR 67
24680: ARRAY
24681: PPUSH
24682: LD_EXP 25
24686: PPUSH
24687: LD_EXP 26
24691: PPUSH
24692: CALL_OW 12
24696: PPUSH
24697: LD_INT 3
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: LD_INT 3
24705: PPUSH
24706: LD_INT 44
24708: PUSH
24709: LD_INT 46
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: EMPTY
24717: PPUSH
24718: EMPTY
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL 14938 0 11
24727: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24728: LD_EXP 18
24732: PUSH
24733: LD_INT 0
24735: EQUAL
24736: IFFALSE 24822
24738: GO 24740
24740: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24741: LD_INT 6
24743: PPUSH
24744: LD_INT 3
24746: PPUSH
24747: LD_INT 3
24749: PUSH
24750: LD_INT 4
24752: PUSH
24753: LD_INT 5
24755: PUSH
24756: LD_INT 6
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: PUSH
24765: LD_OWVAR 67
24769: ARRAY
24770: PPUSH
24771: LD_INT 0
24773: PPUSH
24774: LD_INT 0
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: LD_INT 0
24782: PPUSH
24783: LD_EXP 25
24787: PPUSH
24788: LD_EXP 26
24792: PPUSH
24793: CALL_OW 12
24797: PPUSH
24798: LD_INT 16
24800: PPUSH
24801: LD_INT 7
24803: PPUSH
24804: LD_INT 1
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: LD_INT 3
24812: PPUSH
24813: CALL_OW 12
24817: PPUSH
24818: CALL 12645 0 12
24822: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24823: LD_EXP 18
24827: PUSH
24828: LD_INT 0
24830: EQUAL
24831: IFFALSE 24911
24833: GO 24835
24835: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24836: LD_INT 16
24838: PPUSH
24839: LD_INT 6
24841: PPUSH
24842: LD_INT 7
24844: PUSH
24845: LD_INT 8
24847: PUSH
24848: LD_INT 9
24850: PUSH
24851: LD_INT 10
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: PUSH
24860: LD_OWVAR 67
24864: ARRAY
24865: PPUSH
24866: LD_EXP 25
24870: PPUSH
24871: LD_EXP 26
24875: PPUSH
24876: CALL_OW 12
24880: PPUSH
24881: LD_INT 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 3
24889: PPUSH
24890: LD_INT 44
24892: PUSH
24893: LD_INT 46
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PPUSH
24900: EMPTY
24901: PPUSH
24902: EMPTY
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL 14938 0 11
24911: END
// every 0 0$1 trigger timerStatus = 1 do
24912: LD_EXP 35
24916: PUSH
24917: LD_INT 1
24919: EQUAL
24920: IFFALSE 24980
24922: GO 24924
24924: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24925: LD_INT 35
24927: PPUSH
24928: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24932: LD_ADDR_OWVAR 47
24936: PUSH
24937: LD_STRING #Am08-1
24939: PUSH
24940: LD_EXP 19
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24949: LD_ADDR_EXP 19
24953: PUSH
24954: LD_EXP 19
24958: PUSH
24959: LD_INT 35
24961: MINUS
24962: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24963: LD_EXP 19
24967: PUSH
24968: LD_INT 0
24970: EQUAL
24971: IFFALSE 24925
// display_strings := [ ] ;
24973: LD_ADDR_OWVAR 47
24977: PUSH
24978: EMPTY
24979: ST_TO_ADDR
// end ; end_of_file
24980: END
// every 1 1$0 do
24981: GO 24983
24983: DISABLE
// begin if supply <= 13 and supply > 7 then
24984: LD_EXP 40
24988: PUSH
24989: LD_INT 13
24991: LESSEQUAL
24992: PUSH
24993: LD_EXP 40
24997: PUSH
24998: LD_INT 7
25000: GREATER
25001: AND
25002: IFFALSE 25025
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
25004: LD_INT 3
25006: PPUSH
25007: LD_INT 5
25009: PPUSH
25010: CALL_OW 12
25014: PPUSH
25015: LD_INT 5
25017: PPUSH
25018: LD_INT 1
25020: PPUSH
25021: CALL_OW 55
// if supply <= 7 and supply > 4 then
25025: LD_EXP 40
25029: PUSH
25030: LD_INT 7
25032: LESSEQUAL
25033: PUSH
25034: LD_EXP 40
25038: PUSH
25039: LD_INT 4
25041: GREATER
25042: AND
25043: IFFALSE 25066
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
25045: LD_INT 3
25047: PPUSH
25048: LD_INT 5
25050: PPUSH
25051: CALL_OW 12
25055: PPUSH
25056: LD_INT 20
25058: PPUSH
25059: LD_INT 1
25061: PPUSH
25062: CALL_OW 55
// if supply <= 4 and supply > 0 then
25066: LD_EXP 40
25070: PUSH
25071: LD_INT 4
25073: LESSEQUAL
25074: PUSH
25075: LD_EXP 40
25079: PUSH
25080: LD_INT 0
25082: GREATER
25083: AND
25084: IFFALSE 25107
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
25086: LD_INT 3
25088: PPUSH
25089: LD_INT 5
25091: PPUSH
25092: CALL_OW 12
25096: PPUSH
25097: LD_INT 21
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 55
// if supply > 0 then
25107: LD_EXP 40
25111: PUSH
25112: LD_INT 0
25114: GREATER
25115: IFFALSE 25132
// begin supply = supply - 1 ;
25117: LD_ADDR_EXP 40
25121: PUSH
25122: LD_EXP 40
25126: PUSH
25127: LD_INT 1
25129: MINUS
25130: ST_TO_ADDR
// enable ;
25131: ENABLE
// end ; end ; end_of_file
25132: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25133: LD_EXP 39
25137: PUSH
25138: LD_INT 1
25140: EQUAL
25141: PUSH
25142: LD_EXP 1
25146: PPUSH
25147: CALL_OW 301
25151: AND
25152: IFFALSE 25164
25154: GO 25156
25156: DISABLE
// YouLost ( JMM ) ;
25157: LD_STRING JMM
25159: PPUSH
25160: CALL_OW 104
25164: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25165: LD_EXP 18
25169: PUSH
25170: LD_INT 1
25172: EQUAL
25173: PUSH
25174: LD_EXP 16
25178: PPUSH
25179: CALL_OW 301
25183: AND
25184: IFFALSE 25216
25186: GO 25188
25188: DISABLE
// begin DialogueOn ;
25189: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25193: LD_EXP 23
25197: PPUSH
25198: LD_STRING D8a-Pow-1
25200: PPUSH
25201: CALL_OW 94
// DialogueOff ;
25205: CALL_OW 7
// YouLost ( Dismissed ) ;
25209: LD_STRING Dismissed
25211: PPUSH
25212: CALL_OW 104
// end ;
25216: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25217: LD_INT 22
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 30
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PUSH
25264: LD_INT 0
25266: EQUAL
25267: IFFALSE 25279
25269: GO 25271
25271: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25272: LD_STRING Destroyed
25274: PPUSH
25275: CALL_OW 104
25279: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25280: LD_EXP 24
25284: PPUSH
25285: CALL_OW 301
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 3
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 21
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: PUSH
25319: LD_INT 7
25321: PUSH
25322: LD_INT 6
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: LD_INT 5
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: PUSH
25337: LD_OWVAR 67
25341: ARRAY
25342: LESS
25343: AND
25344: PUSH
25345: LD_EXP 1
25349: PPUSH
25350: CALL_OW 305
25354: AND
25355: IFFALSE 25911
25357: GO 25359
25359: DISABLE
25360: LD_INT 0
25362: PPUSH
25363: PPUSH
25364: PPUSH
// begin russianAI = 0 ;
25365: LD_ADDR_EXP 27
25369: PUSH
25370: LD_INT 0
25372: ST_TO_ADDR
// escapeAvalaible = 1 ;
25373: LD_ADDR_EXP 36
25377: PUSH
25378: LD_INT 1
25380: ST_TO_ADDR
// Video ( true ) ;
25381: LD_INT 1
25383: PPUSH
25384: CALL 81761 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25388: LD_INT 3
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: LD_INT 1
25396: PPUSH
25397: LD_INT 0
25399: PPUSH
25400: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25404: LD_INT 6
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: LD_INT 0
25415: PPUSH
25416: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 1
25425: PPUSH
25426: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25430: LD_INT 97
25432: PPUSH
25433: LD_INT 91
25435: PPUSH
25436: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25440: LD_INT 22
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 21
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PPUSH
25464: CALL_OW 69
25468: PPUSH
25469: CALL_OW 121
// wait ( 0 0$01 ) ;
25473: LD_INT 35
25475: PPUSH
25476: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25480: LD_INT 22
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: PPUSH
25509: LD_INT 124
25511: PPUSH
25512: LD_INT 98
25514: PPUSH
25515: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25519: LD_INT 22
25521: PUSH
25522: LD_INT 6
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 21
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PPUSH
25543: CALL_OW 69
25547: PPUSH
25548: CALL_OW 121
// wait ( 0 0$01 ) ;
25552: LD_INT 35
25554: PPUSH
25555: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25559: LD_INT 22
25561: PUSH
25562: LD_INT 6
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: PPUSH
25588: LD_INT 124
25590: PPUSH
25591: LD_INT 98
25593: PPUSH
25594: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25598: LD_INT 22
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 21
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 3
25620: PUSH
25621: LD_INT 54
25623: PUSH
25624: EMPTY
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 69
25640: PPUSH
25641: LD_INT 124
25643: PPUSH
25644: LD_INT 98
25646: PPUSH
25647: CALL_OW 114
// wait ( 0 0$4 ) ;
25651: LD_INT 140
25653: PPUSH
25654: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25658: LD_INT 124
25660: PPUSH
25661: LD_INT 98
25663: PPUSH
25664: CALL_OW 84
// if SikorskyStatus = 1 then
25668: LD_EXP 21
25672: PUSH
25673: LD_INT 1
25675: EQUAL
25676: IFFALSE 25690
// Say ( Sikorski , D9-Sik-1 ) ;
25678: LD_EXP 16
25682: PPUSH
25683: LD_STRING D9-Sik-1
25685: PPUSH
25686: CALL_OW 88
// if SikorskyStatus = 2 then
25690: LD_EXP 21
25694: PUSH
25695: LD_INT 2
25697: EQUAL
25698: IFFALSE 25719
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25700: LD_EXP 23
25704: PPUSH
25705: LD_STRING D8b-Pow-1
25707: PPUSH
25708: CALL_OW 94
// YouLost ( Dismissed ) ;
25712: LD_STRING Dismissed
25714: PPUSH
25715: CALL_OW 104
// end ; p := 0 0$0 ;
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 0
25726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 22
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_INT 6
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 21
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25779: LD_INT 35
25781: PPUSH
25782: CALL_OW 67
// p := p + 0 0$1 ;
25786: LD_ADDR_VAR 0 3
25790: PUSH
25791: LD_VAR 0 3
25795: PUSH
25796: LD_INT 35
25798: PLUS
25799: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25800: LD_VAR 0 2
25804: PPUSH
25805: LD_INT 22
25807: PPUSH
25808: CALL_OW 113
// for i in tmp do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_VAR 0 2
25821: PUSH
25822: FOR_IN
25823: IFFALSE 25850
// if IsInArea ( i , RussianEscape ) then
25825: LD_VAR 0 1
25829: PPUSH
25830: LD_INT 22
25832: PPUSH
25833: CALL_OW 308
25837: IFFALSE 25848
// RemoveUnit ( i ) ;
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 64
25848: GO 25822
25850: POP
25851: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25852: LD_INT 23
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 24
25874: PUSH
25875: LD_INT 250
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: PUSH
25892: LD_INT 0
25894: EQUAL
25895: PUSH
25896: LD_VAR 0 3
25900: PUSH
25901: LD_INT 245
25903: GREATEREQUAL
25904: OR
25905: IFFALSE 25779
// FinishMission ;
25907: CALL 25914 0 0
// end ;
25911: PPOPN 3
25913: END
// export function FinishMission ; var tmp ; begin
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25918: LD_INT 22
25920: PUSH
25921: LD_INT 4
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: PUSH
25933: LD_INT 0
25935: EQUAL
25936: IFFALSE 25945
// SetAchievement ( ACH_BLITZKRIEG ) ;
25938: LD_STRING ACH_BLITZKRIEG
25940: PPUSH
25941: CALL_OW 543
// if tick <= 25 25$00 then
25945: LD_OWVAR 1
25949: PUSH
25950: LD_INT 52500
25952: LESSEQUAL
25953: IFFALSE 25969
// begin wait ( 3 ) ;
25955: LD_INT 3
25957: PPUSH
25958: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25962: LD_STRING ACH_ASPEED_8
25964: PPUSH
25965: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25969: LD_STRING med1
25971: PPUSH
25972: LD_INT 1
25974: PPUSH
25975: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25979: LD_STRING med2
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25989: LD_STRING perfect
25991: PPUSH
25992: LD_INT 1
25994: PPUSH
25995: CALL_OW 101
// if Difficulty >= 3 then
25999: LD_OWVAR 67
26003: PUSH
26004: LD_INT 3
26006: GREATEREQUAL
26007: IFFALSE 26019
// SetAchievementEX ( ACH_AMER , 8 ) ;
26009: LD_STRING ACH_AMER
26011: PPUSH
26012: LD_INT 8
26014: PPUSH
26015: CALL_OW 564
// GiveMedals ( Main ) ;
26019: LD_STRING Main
26021: PPUSH
26022: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
26026: LD_INT 22
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 23
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 21
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: LD_INT 25
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 25
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 25
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 25
26091: PUSH
26092: LD_INT 4
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 69
26116: PPUSH
26117: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26121: LD_EXP 1
26125: PPUSH
26126: LD_EXP 43
26130: PUSH
26131: LD_STRING JMM
26133: STR
26134: PPUSH
26135: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26139: LD_EXP 2
26143: PPUSH
26144: LD_EXP 43
26148: PUSH
26149: LD_STRING Brown
26151: STR
26152: PPUSH
26153: CALL 8488 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26157: LD_EXP 3
26161: PPUSH
26162: LD_EXP 43
26166: PUSH
26167: LD_STRING Donaldson
26169: STR
26170: PPUSH
26171: CALL 8488 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26175: LD_EXP 4
26179: PPUSH
26180: LD_EXP 43
26184: PUSH
26185: LD_STRING Bobby
26187: STR
26188: PPUSH
26189: CALL 8488 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26193: LD_EXP 5
26197: PPUSH
26198: LD_EXP 43
26202: PUSH
26203: LD_STRING Cyrus
26205: STR
26206: PPUSH
26207: CALL 8488 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26211: LD_EXP 6
26215: PPUSH
26216: LD_EXP 43
26220: PUSH
26221: LD_STRING Lisa
26223: STR
26224: PPUSH
26225: CALL 8488 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26229: LD_EXP 7
26233: PPUSH
26234: LD_EXP 43
26238: PUSH
26239: LD_STRING Frank
26241: STR
26242: PPUSH
26243: CALL 8488 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26247: LD_EXP 8
26251: PPUSH
26252: LD_EXP 43
26256: PUSH
26257: LD_STRING Gladstone
26259: STR
26260: PPUSH
26261: CALL 8488 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26265: LD_EXP 9
26269: PPUSH
26270: LD_EXP 43
26274: PUSH
26275: LD_STRING Kikuchi
26277: STR
26278: PPUSH
26279: CALL 8488 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26283: LD_EXP 14
26287: PPUSH
26288: LD_EXP 43
26292: PUSH
26293: LD_STRING Denis
26295: STR
26296: PPUSH
26297: CALL 8488 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26301: LD_EXP 15
26305: PPUSH
26306: LD_EXP 43
26310: PUSH
26311: LD_STRING Joan
26313: STR
26314: PPUSH
26315: CALL 8488 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26319: LD_EXP 10
26323: PPUSH
26324: LD_EXP 43
26328: PUSH
26329: LD_STRING Khatam
26331: STR
26332: PPUSH
26333: CALL 8488 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26337: LD_EXP 13
26341: PPUSH
26342: LD_EXP 43
26346: PUSH
26347: LD_STRING Houten
26349: STR
26350: PPUSH
26351: CALL 8488 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26355: LD_INT 50
26357: PUSH
26358: EMPTY
26359: LIST
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 21
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 25
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 25
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 25
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 25
26416: PUSH
26417: LD_INT 4
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: PPUSH
26437: CALL_OW 69
26441: PUSH
26442: LD_EXP 1
26446: PUSH
26447: LD_EXP 2
26451: PUSH
26452: LD_EXP 3
26456: PUSH
26457: LD_EXP 4
26461: PUSH
26462: LD_EXP 5
26466: PUSH
26467: LD_EXP 6
26471: PUSH
26472: LD_EXP 7
26476: PUSH
26477: LD_EXP 8
26481: PUSH
26482: LD_EXP 9
26486: PUSH
26487: LD_EXP 14
26491: PUSH
26492: LD_EXP 15
26496: PUSH
26497: LD_EXP 13
26501: PUSH
26502: LD_EXP 10
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: DIFF
26522: PPUSH
26523: LD_STRING 08_other_survivors
26525: PPUSH
26526: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26530: LD_INT 23
26532: PPUSH
26533: CALL 26546 0 1
// YouWin ;
26537: CALL_OW 103
// end ;
26541: LD_VAR 0 1
26545: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
// gammaBase = [ ] ;
26552: LD_ADDR_VAR 0 4
26556: PUSH
26557: EMPTY
26558: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26559: LD_ADDR_VAR 0 5
26563: PUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: LD_INT 22
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 21
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 50
26591: PUSH
26592: EMPTY
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: PPUSH
26600: CALL_OW 70
26604: ST_TO_ADDR
// for i in buildings do
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_VAR 0 5
26614: PUSH
26615: FOR_IN
26616: IFFALSE 27053
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26618: LD_VAR 0 3
26622: PPUSH
26623: CALL_OW 266
26627: PUSH
26628: LD_INT 6
26630: PUSH
26631: LD_INT 7
26633: PUSH
26634: LD_INT 8
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: IN
26642: IFFALSE 26756
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 4
26653: PUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: CALL_OW 266
26663: PUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL_OW 250
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 251
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 254
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 267
26703: PUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 248
26713: PUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 268
26726: PUSH
26727: LD_VAR 0 3
26731: PPUSH
26732: LD_INT 2
26734: PPUSH
26735: CALL_OW 268
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: ADD
26753: ST_TO_ADDR
26754: GO 27051
// if GetBType ( i ) = b_bunker then
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 266
26765: PUSH
26766: LD_INT 32
26768: EQUAL
26769: IFFALSE 26866
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26771: LD_ADDR_VAR 0 4
26775: PUSH
26776: LD_VAR 0 4
26780: PUSH
26781: LD_VAR 0 3
26785: PPUSH
26786: CALL_OW 266
26790: PUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL_OW 250
26800: PUSH
26801: LD_VAR 0 3
26805: PPUSH
26806: CALL_OW 251
26810: PUSH
26811: LD_VAR 0 3
26815: PPUSH
26816: CALL_OW 254
26820: PUSH
26821: LD_VAR 0 3
26825: PPUSH
26826: CALL_OW 267
26830: PUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 248
26840: PUSH
26841: LD_VAR 0 3
26845: PPUSH
26846: CALL_OW 269
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: ADD
26863: ST_TO_ADDR
26864: GO 27051
// if GetBType ( i ) = b_factory then
26866: LD_VAR 0 3
26870: PPUSH
26871: CALL_OW 266
26875: PUSH
26876: LD_INT 3
26878: EQUAL
26879: IFFALSE 26969
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26881: LD_ADDR_VAR 0 4
26885: PUSH
26886: LD_VAR 0 4
26890: PPUSH
26891: LD_INT 1
26893: PPUSH
26894: LD_VAR 0 3
26898: PPUSH
26899: CALL_OW 266
26903: PUSH
26904: LD_VAR 0 3
26908: PPUSH
26909: CALL_OW 250
26913: PUSH
26914: LD_VAR 0 3
26918: PPUSH
26919: CALL_OW 251
26923: PUSH
26924: LD_VAR 0 3
26928: PPUSH
26929: CALL_OW 254
26933: PUSH
26934: LD_VAR 0 3
26938: PPUSH
26939: CALL_OW 267
26943: PUSH
26944: LD_VAR 0 3
26948: PPUSH
26949: CALL_OW 248
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 2
26966: ST_TO_ADDR
26967: GO 27051
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26969: LD_ADDR_VAR 0 4
26973: PUSH
26974: LD_VAR 0 4
26978: PUSH
26979: LD_VAR 0 3
26983: PPUSH
26984: CALL_OW 266
26988: PUSH
26989: LD_VAR 0 3
26993: PPUSH
26994: CALL_OW 250
26998: PUSH
26999: LD_VAR 0 3
27003: PPUSH
27004: CALL_OW 251
27008: PUSH
27009: LD_VAR 0 3
27013: PPUSH
27014: CALL_OW 254
27018: PUSH
27019: LD_VAR 0 3
27023: PPUSH
27024: CALL_OW 267
27028: PUSH
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 248
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: ADD
27050: ST_TO_ADDR
// end ;
27051: GO 26615
27053: POP
27054: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
27055: LD_VAR 0 4
27059: PPUSH
27060: LD_STRING 08_GammaBase
27062: PPUSH
27063: CALL_OW 39
// end ; end_of_file
27067: LD_VAR 0 2
27071: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27072: LD_INT 0
27074: PPUSH
// ar_miner := 81 ;
27075: LD_ADDR_EXP 55
27079: PUSH
27080: LD_INT 81
27082: ST_TO_ADDR
// ar_crane := 88 ;
27083: LD_ADDR_EXP 54
27087: PUSH
27088: LD_INT 88
27090: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27091: LD_ADDR_EXP 49
27095: PUSH
27096: LD_INT 89
27098: ST_TO_ADDR
// us_hack := 99 ;
27099: LD_ADDR_EXP 50
27103: PUSH
27104: LD_INT 99
27106: ST_TO_ADDR
// us_artillery := 97 ;
27107: LD_ADDR_EXP 51
27111: PUSH
27112: LD_INT 97
27114: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27115: LD_ADDR_EXP 52
27119: PUSH
27120: LD_INT 91
27122: ST_TO_ADDR
// ar_mortar := 92 ;
27123: LD_ADDR_EXP 53
27127: PUSH
27128: LD_INT 92
27130: ST_TO_ADDR
// ru_radar := 98 ;
27131: LD_ADDR_EXP 48
27135: PUSH
27136: LD_INT 98
27138: ST_TO_ADDR
// tech_Artillery := 80 ;
27139: LD_ADDR_EXP 56
27143: PUSH
27144: LD_INT 80
27146: ST_TO_ADDR
// tech_RadMat := 81 ;
27147: LD_ADDR_EXP 57
27151: PUSH
27152: LD_INT 81
27154: ST_TO_ADDR
// tech_BasicTools := 82 ;
27155: LD_ADDR_EXP 58
27159: PUSH
27160: LD_INT 82
27162: ST_TO_ADDR
// tech_Cargo := 83 ;
27163: LD_ADDR_EXP 59
27167: PUSH
27168: LD_INT 83
27170: ST_TO_ADDR
// tech_Track := 84 ;
27171: LD_ADDR_EXP 60
27175: PUSH
27176: LD_INT 84
27178: ST_TO_ADDR
// tech_Crane := 85 ;
27179: LD_ADDR_EXP 61
27183: PUSH
27184: LD_INT 85
27186: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27187: LD_ADDR_EXP 62
27191: PUSH
27192: LD_INT 86
27194: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27195: LD_ADDR_EXP 63
27199: PUSH
27200: LD_INT 87
27202: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27203: LD_ADDR_EXP 64
27207: PUSH
27208: LD_INT 88
27210: ST_TO_ADDR
// class_mastodont := 31 ;
27211: LD_ADDR_EXP 65
27215: PUSH
27216: LD_INT 31
27218: ST_TO_ADDR
// class_horse := 21 ;
27219: LD_ADDR_EXP 66
27223: PUSH
27224: LD_INT 21
27226: ST_TO_ADDR
// end ;
27227: LD_VAR 0 1
27231: RET
// every 1 do
27232: GO 27234
27234: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27235: CALL 27072 0 0
27239: END
// every 0 0$1 do
27240: GO 27242
27242: DISABLE
// begin enable ;
27243: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27244: LD_STRING updateTimer(
27246: PUSH
27247: LD_OWVAR 1
27251: STR
27252: PUSH
27253: LD_STRING );
27255: STR
27256: PPUSH
27257: CALL_OW 559
// end ;
27261: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27262: LD_INT 0
27264: PPUSH
// if p2 = 100 then
27265: LD_VAR 0 2
27269: PUSH
27270: LD_INT 100
27272: EQUAL
27273: IFFALSE 28276
// begin if not StreamModeActive then
27275: LD_EXP 67
27279: NOT
27280: IFFALSE 27290
// StreamModeActive := true ;
27282: LD_ADDR_EXP 67
27286: PUSH
27287: LD_INT 1
27289: ST_TO_ADDR
// if p3 = 0 then
27290: LD_VAR 0 3
27294: PUSH
27295: LD_INT 0
27297: EQUAL
27298: IFFALSE 27304
// InitStreamMode ;
27300: CALL 28436 0 0
// if p3 = 1 then
27304: LD_VAR 0 3
27308: PUSH
27309: LD_INT 1
27311: EQUAL
27312: IFFALSE 27322
// sRocket := true ;
27314: LD_ADDR_EXP 72
27318: PUSH
27319: LD_INT 1
27321: ST_TO_ADDR
// if p3 = 2 then
27322: LD_VAR 0 3
27326: PUSH
27327: LD_INT 2
27329: EQUAL
27330: IFFALSE 27340
// sSpeed := true ;
27332: LD_ADDR_EXP 71
27336: PUSH
27337: LD_INT 1
27339: ST_TO_ADDR
// if p3 = 3 then
27340: LD_VAR 0 3
27344: PUSH
27345: LD_INT 3
27347: EQUAL
27348: IFFALSE 27358
// sEngine := true ;
27350: LD_ADDR_EXP 73
27354: PUSH
27355: LD_INT 1
27357: ST_TO_ADDR
// if p3 = 4 then
27358: LD_VAR 0 3
27362: PUSH
27363: LD_INT 4
27365: EQUAL
27366: IFFALSE 27376
// sSpec := true ;
27368: LD_ADDR_EXP 70
27372: PUSH
27373: LD_INT 1
27375: ST_TO_ADDR
// if p3 = 5 then
27376: LD_VAR 0 3
27380: PUSH
27381: LD_INT 5
27383: EQUAL
27384: IFFALSE 27394
// sLevel := true ;
27386: LD_ADDR_EXP 74
27390: PUSH
27391: LD_INT 1
27393: ST_TO_ADDR
// if p3 = 6 then
27394: LD_VAR 0 3
27398: PUSH
27399: LD_INT 6
27401: EQUAL
27402: IFFALSE 27412
// sArmoury := true ;
27404: LD_ADDR_EXP 75
27408: PUSH
27409: LD_INT 1
27411: ST_TO_ADDR
// if p3 = 7 then
27412: LD_VAR 0 3
27416: PUSH
27417: LD_INT 7
27419: EQUAL
27420: IFFALSE 27430
// sRadar := true ;
27422: LD_ADDR_EXP 76
27426: PUSH
27427: LD_INT 1
27429: ST_TO_ADDR
// if p3 = 8 then
27430: LD_VAR 0 3
27434: PUSH
27435: LD_INT 8
27437: EQUAL
27438: IFFALSE 27448
// sBunker := true ;
27440: LD_ADDR_EXP 77
27444: PUSH
27445: LD_INT 1
27447: ST_TO_ADDR
// if p3 = 9 then
27448: LD_VAR 0 3
27452: PUSH
27453: LD_INT 9
27455: EQUAL
27456: IFFALSE 27466
// sHack := true ;
27458: LD_ADDR_EXP 78
27462: PUSH
27463: LD_INT 1
27465: ST_TO_ADDR
// if p3 = 10 then
27466: LD_VAR 0 3
27470: PUSH
27471: LD_INT 10
27473: EQUAL
27474: IFFALSE 27484
// sFire := true ;
27476: LD_ADDR_EXP 79
27480: PUSH
27481: LD_INT 1
27483: ST_TO_ADDR
// if p3 = 11 then
27484: LD_VAR 0 3
27488: PUSH
27489: LD_INT 11
27491: EQUAL
27492: IFFALSE 27502
// sRefresh := true ;
27494: LD_ADDR_EXP 80
27498: PUSH
27499: LD_INT 1
27501: ST_TO_ADDR
// if p3 = 12 then
27502: LD_VAR 0 3
27506: PUSH
27507: LD_INT 12
27509: EQUAL
27510: IFFALSE 27520
// sExp := true ;
27512: LD_ADDR_EXP 81
27516: PUSH
27517: LD_INT 1
27519: ST_TO_ADDR
// if p3 = 13 then
27520: LD_VAR 0 3
27524: PUSH
27525: LD_INT 13
27527: EQUAL
27528: IFFALSE 27538
// sDepot := true ;
27530: LD_ADDR_EXP 82
27534: PUSH
27535: LD_INT 1
27537: ST_TO_ADDR
// if p3 = 14 then
27538: LD_VAR 0 3
27542: PUSH
27543: LD_INT 14
27545: EQUAL
27546: IFFALSE 27556
// sFlag := true ;
27548: LD_ADDR_EXP 83
27552: PUSH
27553: LD_INT 1
27555: ST_TO_ADDR
// if p3 = 15 then
27556: LD_VAR 0 3
27560: PUSH
27561: LD_INT 15
27563: EQUAL
27564: IFFALSE 27574
// sKamikadze := true ;
27566: LD_ADDR_EXP 91
27570: PUSH
27571: LD_INT 1
27573: ST_TO_ADDR
// if p3 = 16 then
27574: LD_VAR 0 3
27578: PUSH
27579: LD_INT 16
27581: EQUAL
27582: IFFALSE 27592
// sTroll := true ;
27584: LD_ADDR_EXP 92
27588: PUSH
27589: LD_INT 1
27591: ST_TO_ADDR
// if p3 = 17 then
27592: LD_VAR 0 3
27596: PUSH
27597: LD_INT 17
27599: EQUAL
27600: IFFALSE 27610
// sSlow := true ;
27602: LD_ADDR_EXP 93
27606: PUSH
27607: LD_INT 1
27609: ST_TO_ADDR
// if p3 = 18 then
27610: LD_VAR 0 3
27614: PUSH
27615: LD_INT 18
27617: EQUAL
27618: IFFALSE 27628
// sLack := true ;
27620: LD_ADDR_EXP 94
27624: PUSH
27625: LD_INT 1
27627: ST_TO_ADDR
// if p3 = 19 then
27628: LD_VAR 0 3
27632: PUSH
27633: LD_INT 19
27635: EQUAL
27636: IFFALSE 27646
// sTank := true ;
27638: LD_ADDR_EXP 96
27642: PUSH
27643: LD_INT 1
27645: ST_TO_ADDR
// if p3 = 20 then
27646: LD_VAR 0 3
27650: PUSH
27651: LD_INT 20
27653: EQUAL
27654: IFFALSE 27664
// sRemote := true ;
27656: LD_ADDR_EXP 97
27660: PUSH
27661: LD_INT 1
27663: ST_TO_ADDR
// if p3 = 21 then
27664: LD_VAR 0 3
27668: PUSH
27669: LD_INT 21
27671: EQUAL
27672: IFFALSE 27682
// sPowell := true ;
27674: LD_ADDR_EXP 98
27678: PUSH
27679: LD_INT 1
27681: ST_TO_ADDR
// if p3 = 22 then
27682: LD_VAR 0 3
27686: PUSH
27687: LD_INT 22
27689: EQUAL
27690: IFFALSE 27700
// sTeleport := true ;
27692: LD_ADDR_EXP 101
27696: PUSH
27697: LD_INT 1
27699: ST_TO_ADDR
// if p3 = 23 then
27700: LD_VAR 0 3
27704: PUSH
27705: LD_INT 23
27707: EQUAL
27708: IFFALSE 27718
// sOilTower := true ;
27710: LD_ADDR_EXP 103
27714: PUSH
27715: LD_INT 1
27717: ST_TO_ADDR
// if p3 = 24 then
27718: LD_VAR 0 3
27722: PUSH
27723: LD_INT 24
27725: EQUAL
27726: IFFALSE 27736
// sShovel := true ;
27728: LD_ADDR_EXP 104
27732: PUSH
27733: LD_INT 1
27735: ST_TO_ADDR
// if p3 = 25 then
27736: LD_VAR 0 3
27740: PUSH
27741: LD_INT 25
27743: EQUAL
27744: IFFALSE 27754
// sSheik := true ;
27746: LD_ADDR_EXP 105
27750: PUSH
27751: LD_INT 1
27753: ST_TO_ADDR
// if p3 = 26 then
27754: LD_VAR 0 3
27758: PUSH
27759: LD_INT 26
27761: EQUAL
27762: IFFALSE 27772
// sEarthquake := true ;
27764: LD_ADDR_EXP 107
27768: PUSH
27769: LD_INT 1
27771: ST_TO_ADDR
// if p3 = 27 then
27772: LD_VAR 0 3
27776: PUSH
27777: LD_INT 27
27779: EQUAL
27780: IFFALSE 27790
// sAI := true ;
27782: LD_ADDR_EXP 108
27786: PUSH
27787: LD_INT 1
27789: ST_TO_ADDR
// if p3 = 28 then
27790: LD_VAR 0 3
27794: PUSH
27795: LD_INT 28
27797: EQUAL
27798: IFFALSE 27808
// sCargo := true ;
27800: LD_ADDR_EXP 111
27804: PUSH
27805: LD_INT 1
27807: ST_TO_ADDR
// if p3 = 29 then
27808: LD_VAR 0 3
27812: PUSH
27813: LD_INT 29
27815: EQUAL
27816: IFFALSE 27826
// sDLaser := true ;
27818: LD_ADDR_EXP 112
27822: PUSH
27823: LD_INT 1
27825: ST_TO_ADDR
// if p3 = 30 then
27826: LD_VAR 0 3
27830: PUSH
27831: LD_INT 30
27833: EQUAL
27834: IFFALSE 27844
// sExchange := true ;
27836: LD_ADDR_EXP 113
27840: PUSH
27841: LD_INT 1
27843: ST_TO_ADDR
// if p3 = 31 then
27844: LD_VAR 0 3
27848: PUSH
27849: LD_INT 31
27851: EQUAL
27852: IFFALSE 27862
// sFac := true ;
27854: LD_ADDR_EXP 114
27858: PUSH
27859: LD_INT 1
27861: ST_TO_ADDR
// if p3 = 32 then
27862: LD_VAR 0 3
27866: PUSH
27867: LD_INT 32
27869: EQUAL
27870: IFFALSE 27880
// sPower := true ;
27872: LD_ADDR_EXP 115
27876: PUSH
27877: LD_INT 1
27879: ST_TO_ADDR
// if p3 = 33 then
27880: LD_VAR 0 3
27884: PUSH
27885: LD_INT 33
27887: EQUAL
27888: IFFALSE 27898
// sRandom := true ;
27890: LD_ADDR_EXP 116
27894: PUSH
27895: LD_INT 1
27897: ST_TO_ADDR
// if p3 = 34 then
27898: LD_VAR 0 3
27902: PUSH
27903: LD_INT 34
27905: EQUAL
27906: IFFALSE 27916
// sShield := true ;
27908: LD_ADDR_EXP 117
27912: PUSH
27913: LD_INT 1
27915: ST_TO_ADDR
// if p3 = 35 then
27916: LD_VAR 0 3
27920: PUSH
27921: LD_INT 35
27923: EQUAL
27924: IFFALSE 27934
// sTime := true ;
27926: LD_ADDR_EXP 118
27930: PUSH
27931: LD_INT 1
27933: ST_TO_ADDR
// if p3 = 36 then
27934: LD_VAR 0 3
27938: PUSH
27939: LD_INT 36
27941: EQUAL
27942: IFFALSE 27952
// sTools := true ;
27944: LD_ADDR_EXP 119
27948: PUSH
27949: LD_INT 1
27951: ST_TO_ADDR
// if p3 = 101 then
27952: LD_VAR 0 3
27956: PUSH
27957: LD_INT 101
27959: EQUAL
27960: IFFALSE 27970
// sSold := true ;
27962: LD_ADDR_EXP 84
27966: PUSH
27967: LD_INT 1
27969: ST_TO_ADDR
// if p3 = 102 then
27970: LD_VAR 0 3
27974: PUSH
27975: LD_INT 102
27977: EQUAL
27978: IFFALSE 27988
// sDiff := true ;
27980: LD_ADDR_EXP 85
27984: PUSH
27985: LD_INT 1
27987: ST_TO_ADDR
// if p3 = 103 then
27988: LD_VAR 0 3
27992: PUSH
27993: LD_INT 103
27995: EQUAL
27996: IFFALSE 28006
// sFog := true ;
27998: LD_ADDR_EXP 88
28002: PUSH
28003: LD_INT 1
28005: ST_TO_ADDR
// if p3 = 104 then
28006: LD_VAR 0 3
28010: PUSH
28011: LD_INT 104
28013: EQUAL
28014: IFFALSE 28024
// sReset := true ;
28016: LD_ADDR_EXP 89
28020: PUSH
28021: LD_INT 1
28023: ST_TO_ADDR
// if p3 = 105 then
28024: LD_VAR 0 3
28028: PUSH
28029: LD_INT 105
28031: EQUAL
28032: IFFALSE 28042
// sSun := true ;
28034: LD_ADDR_EXP 90
28038: PUSH
28039: LD_INT 1
28041: ST_TO_ADDR
// if p3 = 106 then
28042: LD_VAR 0 3
28046: PUSH
28047: LD_INT 106
28049: EQUAL
28050: IFFALSE 28060
// sTiger := true ;
28052: LD_ADDR_EXP 86
28056: PUSH
28057: LD_INT 1
28059: ST_TO_ADDR
// if p3 = 107 then
28060: LD_VAR 0 3
28064: PUSH
28065: LD_INT 107
28067: EQUAL
28068: IFFALSE 28078
// sBomb := true ;
28070: LD_ADDR_EXP 87
28074: PUSH
28075: LD_INT 1
28077: ST_TO_ADDR
// if p3 = 108 then
28078: LD_VAR 0 3
28082: PUSH
28083: LD_INT 108
28085: EQUAL
28086: IFFALSE 28096
// sWound := true ;
28088: LD_ADDR_EXP 95
28092: PUSH
28093: LD_INT 1
28095: ST_TO_ADDR
// if p3 = 109 then
28096: LD_VAR 0 3
28100: PUSH
28101: LD_INT 109
28103: EQUAL
28104: IFFALSE 28114
// sBetray := true ;
28106: LD_ADDR_EXP 99
28110: PUSH
28111: LD_INT 1
28113: ST_TO_ADDR
// if p3 = 110 then
28114: LD_VAR 0 3
28118: PUSH
28119: LD_INT 110
28121: EQUAL
28122: IFFALSE 28132
// sContamin := true ;
28124: LD_ADDR_EXP 100
28128: PUSH
28129: LD_INT 1
28131: ST_TO_ADDR
// if p3 = 111 then
28132: LD_VAR 0 3
28136: PUSH
28137: LD_INT 111
28139: EQUAL
28140: IFFALSE 28150
// sOil := true ;
28142: LD_ADDR_EXP 102
28146: PUSH
28147: LD_INT 1
28149: ST_TO_ADDR
// if p3 = 112 then
28150: LD_VAR 0 3
28154: PUSH
28155: LD_INT 112
28157: EQUAL
28158: IFFALSE 28168
// sStu := true ;
28160: LD_ADDR_EXP 106
28164: PUSH
28165: LD_INT 1
28167: ST_TO_ADDR
// if p3 = 113 then
28168: LD_VAR 0 3
28172: PUSH
28173: LD_INT 113
28175: EQUAL
28176: IFFALSE 28186
// sBazooka := true ;
28178: LD_ADDR_EXP 109
28182: PUSH
28183: LD_INT 1
28185: ST_TO_ADDR
// if p3 = 114 then
28186: LD_VAR 0 3
28190: PUSH
28191: LD_INT 114
28193: EQUAL
28194: IFFALSE 28204
// sMortar := true ;
28196: LD_ADDR_EXP 110
28200: PUSH
28201: LD_INT 1
28203: ST_TO_ADDR
// if p3 = 115 then
28204: LD_VAR 0 3
28208: PUSH
28209: LD_INT 115
28211: EQUAL
28212: IFFALSE 28222
// sRanger := true ;
28214: LD_ADDR_EXP 120
28218: PUSH
28219: LD_INT 1
28221: ST_TO_ADDR
// if p3 = 116 then
28222: LD_VAR 0 3
28226: PUSH
28227: LD_INT 116
28229: EQUAL
28230: IFFALSE 28240
// sComputer := true ;
28232: LD_ADDR_EXP 121
28236: PUSH
28237: LD_INT 1
28239: ST_TO_ADDR
// if p3 = 117 then
28240: LD_VAR 0 3
28244: PUSH
28245: LD_INT 117
28247: EQUAL
28248: IFFALSE 28258
// s30 := true ;
28250: LD_ADDR_EXP 122
28254: PUSH
28255: LD_INT 1
28257: ST_TO_ADDR
// if p3 = 118 then
28258: LD_VAR 0 3
28262: PUSH
28263: LD_INT 118
28265: EQUAL
28266: IFFALSE 28276
// s60 := true ;
28268: LD_ADDR_EXP 123
28272: PUSH
28273: LD_INT 1
28275: ST_TO_ADDR
// end ; if p2 = 101 then
28276: LD_VAR 0 2
28280: PUSH
28281: LD_INT 101
28283: EQUAL
28284: IFFALSE 28412
// begin case p3 of 1 :
28286: LD_VAR 0 3
28290: PUSH
28291: LD_INT 1
28293: DOUBLE
28294: EQUAL
28295: IFTRUE 28299
28297: GO 28306
28299: POP
// hHackUnlimitedResources ; 2 :
28300: CALL 40008 0 0
28304: GO 28412
28306: LD_INT 2
28308: DOUBLE
28309: EQUAL
28310: IFTRUE 28314
28312: GO 28321
28314: POP
// hHackSetLevel10 ; 3 :
28315: CALL 40141 0 0
28319: GO 28412
28321: LD_INT 3
28323: DOUBLE
28324: EQUAL
28325: IFTRUE 28329
28327: GO 28336
28329: POP
// hHackSetLevel10YourUnits ; 4 :
28330: CALL 40226 0 0
28334: GO 28412
28336: LD_INT 4
28338: DOUBLE
28339: EQUAL
28340: IFTRUE 28344
28342: GO 28351
28344: POP
// hHackInvincible ; 5 :
28345: CALL 40674 0 0
28349: GO 28412
28351: LD_INT 5
28353: DOUBLE
28354: EQUAL
28355: IFTRUE 28359
28357: GO 28366
28359: POP
// hHackInvisible ; 6 :
28360: CALL 40785 0 0
28364: GO 28412
28366: LD_INT 6
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 28381
28374: POP
// hHackChangeYourSide ; 7 :
28375: CALL 40842 0 0
28379: GO 28412
28381: LD_INT 7
28383: DOUBLE
28384: EQUAL
28385: IFTRUE 28389
28387: GO 28396
28389: POP
// hHackChangeUnitSide ; 8 :
28390: CALL 40884 0 0
28394: GO 28412
28396: LD_INT 8
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 28411
28404: POP
// hHackFog ; end ;
28405: CALL 40985 0 0
28409: GO 28412
28411: POP
// end ; end ;
28412: LD_VAR 0 7
28416: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
28417: GO 28419
28419: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28420: LD_STRING initStreamRollete();
28422: PPUSH
28423: CALL_OW 559
// InitStreamMode ;
28427: CALL 28436 0 0
// DefineStreamItems ( ) ;
28431: CALL 28900 0 0
// end ;
28435: END
// function InitStreamMode ; begin
28436: LD_INT 0
28438: PPUSH
// streamModeActive := false ;
28439: LD_ADDR_EXP 67
28443: PUSH
28444: LD_INT 0
28446: ST_TO_ADDR
// normalCounter := 36 ;
28447: LD_ADDR_EXP 68
28451: PUSH
28452: LD_INT 36
28454: ST_TO_ADDR
// hardcoreCounter := 16 ;
28455: LD_ADDR_EXP 69
28459: PUSH
28460: LD_INT 16
28462: ST_TO_ADDR
// sRocket := false ;
28463: LD_ADDR_EXP 72
28467: PUSH
28468: LD_INT 0
28470: ST_TO_ADDR
// sSpeed := false ;
28471: LD_ADDR_EXP 71
28475: PUSH
28476: LD_INT 0
28478: ST_TO_ADDR
// sEngine := false ;
28479: LD_ADDR_EXP 73
28483: PUSH
28484: LD_INT 0
28486: ST_TO_ADDR
// sSpec := false ;
28487: LD_ADDR_EXP 70
28491: PUSH
28492: LD_INT 0
28494: ST_TO_ADDR
// sLevel := false ;
28495: LD_ADDR_EXP 74
28499: PUSH
28500: LD_INT 0
28502: ST_TO_ADDR
// sArmoury := false ;
28503: LD_ADDR_EXP 75
28507: PUSH
28508: LD_INT 0
28510: ST_TO_ADDR
// sRadar := false ;
28511: LD_ADDR_EXP 76
28515: PUSH
28516: LD_INT 0
28518: ST_TO_ADDR
// sBunker := false ;
28519: LD_ADDR_EXP 77
28523: PUSH
28524: LD_INT 0
28526: ST_TO_ADDR
// sHack := false ;
28527: LD_ADDR_EXP 78
28531: PUSH
28532: LD_INT 0
28534: ST_TO_ADDR
// sFire := false ;
28535: LD_ADDR_EXP 79
28539: PUSH
28540: LD_INT 0
28542: ST_TO_ADDR
// sRefresh := false ;
28543: LD_ADDR_EXP 80
28547: PUSH
28548: LD_INT 0
28550: ST_TO_ADDR
// sExp := false ;
28551: LD_ADDR_EXP 81
28555: PUSH
28556: LD_INT 0
28558: ST_TO_ADDR
// sDepot := false ;
28559: LD_ADDR_EXP 82
28563: PUSH
28564: LD_INT 0
28566: ST_TO_ADDR
// sFlag := false ;
28567: LD_ADDR_EXP 83
28571: PUSH
28572: LD_INT 0
28574: ST_TO_ADDR
// sKamikadze := false ;
28575: LD_ADDR_EXP 91
28579: PUSH
28580: LD_INT 0
28582: ST_TO_ADDR
// sTroll := false ;
28583: LD_ADDR_EXP 92
28587: PUSH
28588: LD_INT 0
28590: ST_TO_ADDR
// sSlow := false ;
28591: LD_ADDR_EXP 93
28595: PUSH
28596: LD_INT 0
28598: ST_TO_ADDR
// sLack := false ;
28599: LD_ADDR_EXP 94
28603: PUSH
28604: LD_INT 0
28606: ST_TO_ADDR
// sTank := false ;
28607: LD_ADDR_EXP 96
28611: PUSH
28612: LD_INT 0
28614: ST_TO_ADDR
// sRemote := false ;
28615: LD_ADDR_EXP 97
28619: PUSH
28620: LD_INT 0
28622: ST_TO_ADDR
// sPowell := false ;
28623: LD_ADDR_EXP 98
28627: PUSH
28628: LD_INT 0
28630: ST_TO_ADDR
// sTeleport := false ;
28631: LD_ADDR_EXP 101
28635: PUSH
28636: LD_INT 0
28638: ST_TO_ADDR
// sOilTower := false ;
28639: LD_ADDR_EXP 103
28643: PUSH
28644: LD_INT 0
28646: ST_TO_ADDR
// sShovel := false ;
28647: LD_ADDR_EXP 104
28651: PUSH
28652: LD_INT 0
28654: ST_TO_ADDR
// sSheik := false ;
28655: LD_ADDR_EXP 105
28659: PUSH
28660: LD_INT 0
28662: ST_TO_ADDR
// sEarthquake := false ;
28663: LD_ADDR_EXP 107
28667: PUSH
28668: LD_INT 0
28670: ST_TO_ADDR
// sAI := false ;
28671: LD_ADDR_EXP 108
28675: PUSH
28676: LD_INT 0
28678: ST_TO_ADDR
// sCargo := false ;
28679: LD_ADDR_EXP 111
28683: PUSH
28684: LD_INT 0
28686: ST_TO_ADDR
// sDLaser := false ;
28687: LD_ADDR_EXP 112
28691: PUSH
28692: LD_INT 0
28694: ST_TO_ADDR
// sExchange := false ;
28695: LD_ADDR_EXP 113
28699: PUSH
28700: LD_INT 0
28702: ST_TO_ADDR
// sFac := false ;
28703: LD_ADDR_EXP 114
28707: PUSH
28708: LD_INT 0
28710: ST_TO_ADDR
// sPower := false ;
28711: LD_ADDR_EXP 115
28715: PUSH
28716: LD_INT 0
28718: ST_TO_ADDR
// sRandom := false ;
28719: LD_ADDR_EXP 116
28723: PUSH
28724: LD_INT 0
28726: ST_TO_ADDR
// sShield := false ;
28727: LD_ADDR_EXP 117
28731: PUSH
28732: LD_INT 0
28734: ST_TO_ADDR
// sTime := false ;
28735: LD_ADDR_EXP 118
28739: PUSH
28740: LD_INT 0
28742: ST_TO_ADDR
// sTools := false ;
28743: LD_ADDR_EXP 119
28747: PUSH
28748: LD_INT 0
28750: ST_TO_ADDR
// sSold := false ;
28751: LD_ADDR_EXP 84
28755: PUSH
28756: LD_INT 0
28758: ST_TO_ADDR
// sDiff := false ;
28759: LD_ADDR_EXP 85
28763: PUSH
28764: LD_INT 0
28766: ST_TO_ADDR
// sFog := false ;
28767: LD_ADDR_EXP 88
28771: PUSH
28772: LD_INT 0
28774: ST_TO_ADDR
// sReset := false ;
28775: LD_ADDR_EXP 89
28779: PUSH
28780: LD_INT 0
28782: ST_TO_ADDR
// sSun := false ;
28783: LD_ADDR_EXP 90
28787: PUSH
28788: LD_INT 0
28790: ST_TO_ADDR
// sTiger := false ;
28791: LD_ADDR_EXP 86
28795: PUSH
28796: LD_INT 0
28798: ST_TO_ADDR
// sBomb := false ;
28799: LD_ADDR_EXP 87
28803: PUSH
28804: LD_INT 0
28806: ST_TO_ADDR
// sWound := false ;
28807: LD_ADDR_EXP 95
28811: PUSH
28812: LD_INT 0
28814: ST_TO_ADDR
// sBetray := false ;
28815: LD_ADDR_EXP 99
28819: PUSH
28820: LD_INT 0
28822: ST_TO_ADDR
// sContamin := false ;
28823: LD_ADDR_EXP 100
28827: PUSH
28828: LD_INT 0
28830: ST_TO_ADDR
// sOil := false ;
28831: LD_ADDR_EXP 102
28835: PUSH
28836: LD_INT 0
28838: ST_TO_ADDR
// sStu := false ;
28839: LD_ADDR_EXP 106
28843: PUSH
28844: LD_INT 0
28846: ST_TO_ADDR
// sBazooka := false ;
28847: LD_ADDR_EXP 109
28851: PUSH
28852: LD_INT 0
28854: ST_TO_ADDR
// sMortar := false ;
28855: LD_ADDR_EXP 110
28859: PUSH
28860: LD_INT 0
28862: ST_TO_ADDR
// sRanger := false ;
28863: LD_ADDR_EXP 120
28867: PUSH
28868: LD_INT 0
28870: ST_TO_ADDR
// sComputer := false ;
28871: LD_ADDR_EXP 121
28875: PUSH
28876: LD_INT 0
28878: ST_TO_ADDR
// s30 := false ;
28879: LD_ADDR_EXP 122
28883: PUSH
28884: LD_INT 0
28886: ST_TO_ADDR
// s60 := false ;
28887: LD_ADDR_EXP 123
28891: PUSH
28892: LD_INT 0
28894: ST_TO_ADDR
// end ;
28895: LD_VAR 0 1
28899: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28900: LD_INT 0
28902: PPUSH
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
// result := [ ] ;
28907: LD_ADDR_VAR 0 1
28911: PUSH
28912: EMPTY
28913: ST_TO_ADDR
// if campaign_id = 1 then
28914: LD_OWVAR 69
28918: PUSH
28919: LD_INT 1
28921: EQUAL
28922: IFFALSE 32088
// begin case mission_number of 1 :
28924: LD_OWVAR 70
28928: PUSH
28929: LD_INT 1
28931: DOUBLE
28932: EQUAL
28933: IFTRUE 28937
28935: GO 29013
28937: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
28938: LD_ADDR_VAR 0 1
28942: PUSH
28943: LD_INT 2
28945: PUSH
28946: LD_INT 4
28948: PUSH
28949: LD_INT 11
28951: PUSH
28952: LD_INT 12
28954: PUSH
28955: LD_INT 15
28957: PUSH
28958: LD_INT 16
28960: PUSH
28961: LD_INT 22
28963: PUSH
28964: LD_INT 23
28966: PUSH
28967: LD_INT 26
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 101
28983: PUSH
28984: LD_INT 102
28986: PUSH
28987: LD_INT 106
28989: PUSH
28990: LD_INT 116
28992: PUSH
28993: LD_INT 117
28995: PUSH
28996: LD_INT 118
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: ST_TO_ADDR
29011: GO 32086
29013: LD_INT 2
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29105
29021: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29022: LD_ADDR_VAR 0 1
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 4
29032: PUSH
29033: LD_INT 11
29035: PUSH
29036: LD_INT 12
29038: PUSH
29039: LD_INT 15
29041: PUSH
29042: LD_INT 16
29044: PUSH
29045: LD_INT 22
29047: PUSH
29048: LD_INT 23
29050: PUSH
29051: LD_INT 26
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 101
29067: PUSH
29068: LD_INT 102
29070: PUSH
29071: LD_INT 105
29073: PUSH
29074: LD_INT 106
29076: PUSH
29077: LD_INT 108
29079: PUSH
29080: LD_INT 116
29082: PUSH
29083: LD_INT 117
29085: PUSH
29086: LD_INT 118
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: ST_TO_ADDR
29103: GO 32086
29105: LD_INT 3
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29201
29113: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29114: LD_ADDR_VAR 0 1
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 4
29124: PUSH
29125: LD_INT 5
29127: PUSH
29128: LD_INT 11
29130: PUSH
29131: LD_INT 12
29133: PUSH
29134: LD_INT 15
29136: PUSH
29137: LD_INT 16
29139: PUSH
29140: LD_INT 22
29142: PUSH
29143: LD_INT 26
29145: PUSH
29146: LD_INT 36
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 101
29163: PUSH
29164: LD_INT 102
29166: PUSH
29167: LD_INT 105
29169: PUSH
29170: LD_INT 106
29172: PUSH
29173: LD_INT 108
29175: PUSH
29176: LD_INT 116
29178: PUSH
29179: LD_INT 117
29181: PUSH
29182: LD_INT 118
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: ST_TO_ADDR
29199: GO 32086
29201: LD_INT 4
29203: DOUBLE
29204: EQUAL
29205: IFTRUE 29209
29207: GO 29305
29209: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29210: LD_ADDR_VAR 0 1
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: LD_INT 4
29220: PUSH
29221: LD_INT 5
29223: PUSH
29224: LD_INT 8
29226: PUSH
29227: LD_INT 11
29229: PUSH
29230: LD_INT 12
29232: PUSH
29233: LD_INT 15
29235: PUSH
29236: LD_INT 16
29238: PUSH
29239: LD_INT 22
29241: PUSH
29242: LD_INT 23
29244: PUSH
29245: LD_INT 26
29247: PUSH
29248: LD_INT 36
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 101
29267: PUSH
29268: LD_INT 102
29270: PUSH
29271: LD_INT 105
29273: PUSH
29274: LD_INT 106
29276: PUSH
29277: LD_INT 108
29279: PUSH
29280: LD_INT 116
29282: PUSH
29283: LD_INT 117
29285: PUSH
29286: LD_INT 118
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: ST_TO_ADDR
29303: GO 32086
29305: LD_INT 5
29307: DOUBLE
29308: EQUAL
29309: IFTRUE 29313
29311: GO 29425
29313: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
29314: LD_ADDR_VAR 0 1
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: LD_INT 4
29324: PUSH
29325: LD_INT 5
29327: PUSH
29328: LD_INT 6
29330: PUSH
29331: LD_INT 8
29333: PUSH
29334: LD_INT 11
29336: PUSH
29337: LD_INT 12
29339: PUSH
29340: LD_INT 15
29342: PUSH
29343: LD_INT 16
29345: PUSH
29346: LD_INT 22
29348: PUSH
29349: LD_INT 23
29351: PUSH
29352: LD_INT 25
29354: PUSH
29355: LD_INT 26
29357: PUSH
29358: LD_INT 36
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 101
29379: PUSH
29380: LD_INT 102
29382: PUSH
29383: LD_INT 105
29385: PUSH
29386: LD_INT 106
29388: PUSH
29389: LD_INT 108
29391: PUSH
29392: LD_INT 109
29394: PUSH
29395: LD_INT 112
29397: PUSH
29398: LD_INT 116
29400: PUSH
29401: LD_INT 117
29403: PUSH
29404: LD_INT 118
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: ST_TO_ADDR
29423: GO 32086
29425: LD_INT 6
29427: DOUBLE
29428: EQUAL
29429: IFTRUE 29433
29431: GO 29565
29433: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
29434: LD_ADDR_VAR 0 1
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 4
29444: PUSH
29445: LD_INT 5
29447: PUSH
29448: LD_INT 6
29450: PUSH
29451: LD_INT 8
29453: PUSH
29454: LD_INT 11
29456: PUSH
29457: LD_INT 12
29459: PUSH
29460: LD_INT 15
29462: PUSH
29463: LD_INT 16
29465: PUSH
29466: LD_INT 20
29468: PUSH
29469: LD_INT 21
29471: PUSH
29472: LD_INT 22
29474: PUSH
29475: LD_INT 23
29477: PUSH
29478: LD_INT 25
29480: PUSH
29481: LD_INT 26
29483: PUSH
29484: LD_INT 30
29486: PUSH
29487: LD_INT 31
29489: PUSH
29490: LD_INT 32
29492: PUSH
29493: LD_INT 36
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 101
29519: PUSH
29520: LD_INT 102
29522: PUSH
29523: LD_INT 105
29525: PUSH
29526: LD_INT 106
29528: PUSH
29529: LD_INT 108
29531: PUSH
29532: LD_INT 109
29534: PUSH
29535: LD_INT 112
29537: PUSH
29538: LD_INT 116
29540: PUSH
29541: LD_INT 117
29543: PUSH
29544: LD_INT 118
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: ST_TO_ADDR
29563: GO 32086
29565: LD_INT 7
29567: DOUBLE
29568: EQUAL
29569: IFTRUE 29573
29571: GO 29685
29573: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
29574: LD_ADDR_VAR 0 1
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: LD_INT 4
29584: PUSH
29585: LD_INT 5
29587: PUSH
29588: LD_INT 7
29590: PUSH
29591: LD_INT 11
29593: PUSH
29594: LD_INT 12
29596: PUSH
29597: LD_INT 15
29599: PUSH
29600: LD_INT 16
29602: PUSH
29603: LD_INT 20
29605: PUSH
29606: LD_INT 21
29608: PUSH
29609: LD_INT 22
29611: PUSH
29612: LD_INT 23
29614: PUSH
29615: LD_INT 25
29617: PUSH
29618: LD_INT 26
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 101
29639: PUSH
29640: LD_INT 102
29642: PUSH
29643: LD_INT 103
29645: PUSH
29646: LD_INT 105
29648: PUSH
29649: LD_INT 106
29651: PUSH
29652: LD_INT 108
29654: PUSH
29655: LD_INT 112
29657: PUSH
29658: LD_INT 116
29660: PUSH
29661: LD_INT 117
29663: PUSH
29664: LD_INT 118
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: ST_TO_ADDR
29683: GO 32086
29685: LD_INT 8
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29833
29693: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
29694: LD_ADDR_VAR 0 1
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 4
29704: PUSH
29705: LD_INT 5
29707: PUSH
29708: LD_INT 6
29710: PUSH
29711: LD_INT 7
29713: PUSH
29714: LD_INT 8
29716: PUSH
29717: LD_INT 11
29719: PUSH
29720: LD_INT 12
29722: PUSH
29723: LD_INT 15
29725: PUSH
29726: LD_INT 16
29728: PUSH
29729: LD_INT 20
29731: PUSH
29732: LD_INT 21
29734: PUSH
29735: LD_INT 22
29737: PUSH
29738: LD_INT 23
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 26
29746: PUSH
29747: LD_INT 30
29749: PUSH
29750: LD_INT 31
29752: PUSH
29753: LD_INT 32
29755: PUSH
29756: LD_INT 36
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 101
29783: PUSH
29784: LD_INT 102
29786: PUSH
29787: LD_INT 103
29789: PUSH
29790: LD_INT 105
29792: PUSH
29793: LD_INT 106
29795: PUSH
29796: LD_INT 108
29798: PUSH
29799: LD_INT 109
29801: PUSH
29802: LD_INT 112
29804: PUSH
29805: LD_INT 116
29807: PUSH
29808: LD_INT 117
29810: PUSH
29811: LD_INT 118
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: ST_TO_ADDR
29831: GO 32086
29833: LD_INT 9
29835: DOUBLE
29836: EQUAL
29837: IFTRUE 29841
29839: GO 29989
29841: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
29842: LD_ADDR_VAR 0 1
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: LD_INT 4
29852: PUSH
29853: LD_INT 5
29855: PUSH
29856: LD_INT 6
29858: PUSH
29859: LD_INT 7
29861: PUSH
29862: LD_INT 8
29864: PUSH
29865: LD_INT 11
29867: PUSH
29868: LD_INT 12
29870: PUSH
29871: LD_INT 15
29873: PUSH
29874: LD_INT 16
29876: PUSH
29877: LD_INT 20
29879: PUSH
29880: LD_INT 21
29882: PUSH
29883: LD_INT 22
29885: PUSH
29886: LD_INT 23
29888: PUSH
29889: LD_INT 25
29891: PUSH
29892: LD_INT 26
29894: PUSH
29895: LD_INT 28
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 31
29903: PUSH
29904: LD_INT 32
29906: PUSH
29907: LD_INT 36
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 101
29935: PUSH
29936: LD_INT 102
29938: PUSH
29939: LD_INT 103
29941: PUSH
29942: LD_INT 105
29944: PUSH
29945: LD_INT 106
29947: PUSH
29948: LD_INT 108
29950: PUSH
29951: LD_INT 109
29953: PUSH
29954: LD_INT 112
29956: PUSH
29957: LD_INT 114
29959: PUSH
29960: LD_INT 116
29962: PUSH
29963: LD_INT 117
29965: PUSH
29966: LD_INT 118
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: ST_TO_ADDR
29987: GO 32086
29989: LD_INT 10
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30193
29997: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
29998: LD_ADDR_VAR 0 1
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 4
30008: PUSH
30009: LD_INT 5
30011: PUSH
30012: LD_INT 6
30014: PUSH
30015: LD_INT 7
30017: PUSH
30018: LD_INT 8
30020: PUSH
30021: LD_INT 9
30023: PUSH
30024: LD_INT 10
30026: PUSH
30027: LD_INT 11
30029: PUSH
30030: LD_INT 12
30032: PUSH
30033: LD_INT 13
30035: PUSH
30036: LD_INT 14
30038: PUSH
30039: LD_INT 15
30041: PUSH
30042: LD_INT 16
30044: PUSH
30045: LD_INT 17
30047: PUSH
30048: LD_INT 18
30050: PUSH
30051: LD_INT 19
30053: PUSH
30054: LD_INT 20
30056: PUSH
30057: LD_INT 21
30059: PUSH
30060: LD_INT 22
30062: PUSH
30063: LD_INT 23
30065: PUSH
30066: LD_INT 24
30068: PUSH
30069: LD_INT 25
30071: PUSH
30072: LD_INT 26
30074: PUSH
30075: LD_INT 28
30077: PUSH
30078: LD_INT 30
30080: PUSH
30081: LD_INT 31
30083: PUSH
30084: LD_INT 32
30086: PUSH
30087: LD_INT 36
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 101
30123: PUSH
30124: LD_INT 102
30126: PUSH
30127: LD_INT 103
30129: PUSH
30130: LD_INT 104
30132: PUSH
30133: LD_INT 105
30135: PUSH
30136: LD_INT 106
30138: PUSH
30139: LD_INT 107
30141: PUSH
30142: LD_INT 108
30144: PUSH
30145: LD_INT 109
30147: PUSH
30148: LD_INT 110
30150: PUSH
30151: LD_INT 111
30153: PUSH
30154: LD_INT 112
30156: PUSH
30157: LD_INT 114
30159: PUSH
30160: LD_INT 116
30162: PUSH
30163: LD_INT 117
30165: PUSH
30166: LD_INT 118
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: ST_TO_ADDR
30191: GO 32086
30193: LD_INT 11
30195: DOUBLE
30196: EQUAL
30197: IFTRUE 30201
30199: GO 30405
30201: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30202: LD_ADDR_VAR 0 1
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 4
30215: PUSH
30216: LD_INT 5
30218: PUSH
30219: LD_INT 6
30221: PUSH
30222: LD_INT 7
30224: PUSH
30225: LD_INT 8
30227: PUSH
30228: LD_INT 9
30230: PUSH
30231: LD_INT 10
30233: PUSH
30234: LD_INT 11
30236: PUSH
30237: LD_INT 12
30239: PUSH
30240: LD_INT 13
30242: PUSH
30243: LD_INT 14
30245: PUSH
30246: LD_INT 15
30248: PUSH
30249: LD_INT 16
30251: PUSH
30252: LD_INT 17
30254: PUSH
30255: LD_INT 18
30257: PUSH
30258: LD_INT 19
30260: PUSH
30261: LD_INT 20
30263: PUSH
30264: LD_INT 21
30266: PUSH
30267: LD_INT 22
30269: PUSH
30270: LD_INT 23
30272: PUSH
30273: LD_INT 24
30275: PUSH
30276: LD_INT 25
30278: PUSH
30279: LD_INT 26
30281: PUSH
30282: LD_INT 28
30284: PUSH
30285: LD_INT 30
30287: PUSH
30288: LD_INT 31
30290: PUSH
30291: LD_INT 32
30293: PUSH
30294: LD_INT 34
30296: PUSH
30297: LD_INT 36
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 101
30335: PUSH
30336: LD_INT 102
30338: PUSH
30339: LD_INT 103
30341: PUSH
30342: LD_INT 104
30344: PUSH
30345: LD_INT 105
30347: PUSH
30348: LD_INT 106
30350: PUSH
30351: LD_INT 107
30353: PUSH
30354: LD_INT 108
30356: PUSH
30357: LD_INT 109
30359: PUSH
30360: LD_INT 110
30362: PUSH
30363: LD_INT 111
30365: PUSH
30366: LD_INT 112
30368: PUSH
30369: LD_INT 114
30371: PUSH
30372: LD_INT 116
30374: PUSH
30375: LD_INT 117
30377: PUSH
30378: LD_INT 118
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: ST_TO_ADDR
30403: GO 32086
30405: LD_INT 12
30407: DOUBLE
30408: EQUAL
30409: IFTRUE 30413
30411: GO 30633
30413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: LD_INT 2
30424: PUSH
30425: LD_INT 3
30427: PUSH
30428: LD_INT 4
30430: PUSH
30431: LD_INT 5
30433: PUSH
30434: LD_INT 6
30436: PUSH
30437: LD_INT 7
30439: PUSH
30440: LD_INT 8
30442: PUSH
30443: LD_INT 9
30445: PUSH
30446: LD_INT 10
30448: PUSH
30449: LD_INT 11
30451: PUSH
30452: LD_INT 12
30454: PUSH
30455: LD_INT 13
30457: PUSH
30458: LD_INT 14
30460: PUSH
30461: LD_INT 15
30463: PUSH
30464: LD_INT 16
30466: PUSH
30467: LD_INT 17
30469: PUSH
30470: LD_INT 18
30472: PUSH
30473: LD_INT 19
30475: PUSH
30476: LD_INT 20
30478: PUSH
30479: LD_INT 21
30481: PUSH
30482: LD_INT 22
30484: PUSH
30485: LD_INT 23
30487: PUSH
30488: LD_INT 24
30490: PUSH
30491: LD_INT 25
30493: PUSH
30494: LD_INT 26
30496: PUSH
30497: LD_INT 27
30499: PUSH
30500: LD_INT 28
30502: PUSH
30503: LD_INT 30
30505: PUSH
30506: LD_INT 31
30508: PUSH
30509: LD_INT 32
30511: PUSH
30512: LD_INT 33
30514: PUSH
30515: LD_INT 34
30517: PUSH
30518: LD_INT 36
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 101
30559: PUSH
30560: LD_INT 102
30562: PUSH
30563: LD_INT 103
30565: PUSH
30566: LD_INT 104
30568: PUSH
30569: LD_INT 105
30571: PUSH
30572: LD_INT 106
30574: PUSH
30575: LD_INT 107
30577: PUSH
30578: LD_INT 108
30580: PUSH
30581: LD_INT 109
30583: PUSH
30584: LD_INT 110
30586: PUSH
30587: LD_INT 111
30589: PUSH
30590: LD_INT 112
30592: PUSH
30593: LD_INT 113
30595: PUSH
30596: LD_INT 114
30598: PUSH
30599: LD_INT 116
30601: PUSH
30602: LD_INT 117
30604: PUSH
30605: LD_INT 118
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: ST_TO_ADDR
30631: GO 32086
30633: LD_INT 13
30635: DOUBLE
30636: EQUAL
30637: IFTRUE 30641
30639: GO 30849
30641: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
30642: LD_ADDR_VAR 0 1
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: LD_INT 5
30661: PUSH
30662: LD_INT 8
30664: PUSH
30665: LD_INT 9
30667: PUSH
30668: LD_INT 10
30670: PUSH
30671: LD_INT 11
30673: PUSH
30674: LD_INT 12
30676: PUSH
30677: LD_INT 14
30679: PUSH
30680: LD_INT 15
30682: PUSH
30683: LD_INT 16
30685: PUSH
30686: LD_INT 17
30688: PUSH
30689: LD_INT 18
30691: PUSH
30692: LD_INT 19
30694: PUSH
30695: LD_INT 20
30697: PUSH
30698: LD_INT 21
30700: PUSH
30701: LD_INT 22
30703: PUSH
30704: LD_INT 23
30706: PUSH
30707: LD_INT 24
30709: PUSH
30710: LD_INT 25
30712: PUSH
30713: LD_INT 26
30715: PUSH
30716: LD_INT 27
30718: PUSH
30719: LD_INT 28
30721: PUSH
30722: LD_INT 30
30724: PUSH
30725: LD_INT 31
30727: PUSH
30728: LD_INT 32
30730: PUSH
30731: LD_INT 33
30733: PUSH
30734: LD_INT 34
30736: PUSH
30737: LD_INT 36
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 101
30775: PUSH
30776: LD_INT 102
30778: PUSH
30779: LD_INT 103
30781: PUSH
30782: LD_INT 104
30784: PUSH
30785: LD_INT 105
30787: PUSH
30788: LD_INT 106
30790: PUSH
30791: LD_INT 107
30793: PUSH
30794: LD_INT 108
30796: PUSH
30797: LD_INT 109
30799: PUSH
30800: LD_INT 110
30802: PUSH
30803: LD_INT 111
30805: PUSH
30806: LD_INT 112
30808: PUSH
30809: LD_INT 113
30811: PUSH
30812: LD_INT 114
30814: PUSH
30815: LD_INT 116
30817: PUSH
30818: LD_INT 117
30820: PUSH
30821: LD_INT 118
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: ST_TO_ADDR
30847: GO 32086
30849: LD_INT 14
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 31081
30857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
30858: LD_ADDR_VAR 0 1
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 4
30874: PUSH
30875: LD_INT 5
30877: PUSH
30878: LD_INT 6
30880: PUSH
30881: LD_INT 7
30883: PUSH
30884: LD_INT 8
30886: PUSH
30887: LD_INT 9
30889: PUSH
30890: LD_INT 10
30892: PUSH
30893: LD_INT 11
30895: PUSH
30896: LD_INT 12
30898: PUSH
30899: LD_INT 13
30901: PUSH
30902: LD_INT 14
30904: PUSH
30905: LD_INT 15
30907: PUSH
30908: LD_INT 16
30910: PUSH
30911: LD_INT 17
30913: PUSH
30914: LD_INT 18
30916: PUSH
30917: LD_INT 19
30919: PUSH
30920: LD_INT 20
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 22
30928: PUSH
30929: LD_INT 23
30931: PUSH
30932: LD_INT 24
30934: PUSH
30935: LD_INT 25
30937: PUSH
30938: LD_INT 26
30940: PUSH
30941: LD_INT 27
30943: PUSH
30944: LD_INT 28
30946: PUSH
30947: LD_INT 29
30949: PUSH
30950: LD_INT 30
30952: PUSH
30953: LD_INT 31
30955: PUSH
30956: LD_INT 32
30958: PUSH
30959: LD_INT 33
30961: PUSH
30962: LD_INT 34
30964: PUSH
30965: LD_INT 36
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 101
31007: PUSH
31008: LD_INT 102
31010: PUSH
31011: LD_INT 103
31013: PUSH
31014: LD_INT 104
31016: PUSH
31017: LD_INT 105
31019: PUSH
31020: LD_INT 106
31022: PUSH
31023: LD_INT 107
31025: PUSH
31026: LD_INT 108
31028: PUSH
31029: LD_INT 109
31031: PUSH
31032: LD_INT 110
31034: PUSH
31035: LD_INT 111
31037: PUSH
31038: LD_INT 112
31040: PUSH
31041: LD_INT 113
31043: PUSH
31044: LD_INT 114
31046: PUSH
31047: LD_INT 116
31049: PUSH
31050: LD_INT 117
31052: PUSH
31053: LD_INT 118
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: ST_TO_ADDR
31079: GO 32086
31081: LD_INT 15
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31313
31089: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31090: LD_ADDR_VAR 0 1
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 4
31106: PUSH
31107: LD_INT 5
31109: PUSH
31110: LD_INT 6
31112: PUSH
31113: LD_INT 7
31115: PUSH
31116: LD_INT 8
31118: PUSH
31119: LD_INT 9
31121: PUSH
31122: LD_INT 10
31124: PUSH
31125: LD_INT 11
31127: PUSH
31128: LD_INT 12
31130: PUSH
31131: LD_INT 13
31133: PUSH
31134: LD_INT 14
31136: PUSH
31137: LD_INT 15
31139: PUSH
31140: LD_INT 16
31142: PUSH
31143: LD_INT 17
31145: PUSH
31146: LD_INT 18
31148: PUSH
31149: LD_INT 19
31151: PUSH
31152: LD_INT 20
31154: PUSH
31155: LD_INT 21
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 23
31163: PUSH
31164: LD_INT 24
31166: PUSH
31167: LD_INT 25
31169: PUSH
31170: LD_INT 26
31172: PUSH
31173: LD_INT 27
31175: PUSH
31176: LD_INT 28
31178: PUSH
31179: LD_INT 29
31181: PUSH
31182: LD_INT 30
31184: PUSH
31185: LD_INT 31
31187: PUSH
31188: LD_INT 32
31190: PUSH
31191: LD_INT 33
31193: PUSH
31194: LD_INT 34
31196: PUSH
31197: LD_INT 36
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 101
31239: PUSH
31240: LD_INT 102
31242: PUSH
31243: LD_INT 103
31245: PUSH
31246: LD_INT 104
31248: PUSH
31249: LD_INT 105
31251: PUSH
31252: LD_INT 106
31254: PUSH
31255: LD_INT 107
31257: PUSH
31258: LD_INT 108
31260: PUSH
31261: LD_INT 109
31263: PUSH
31264: LD_INT 110
31266: PUSH
31267: LD_INT 111
31269: PUSH
31270: LD_INT 112
31272: PUSH
31273: LD_INT 113
31275: PUSH
31276: LD_INT 114
31278: PUSH
31279: LD_INT 116
31281: PUSH
31282: LD_INT 117
31284: PUSH
31285: LD_INT 118
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: ST_TO_ADDR
31311: GO 32086
31313: LD_INT 16
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31457
31321: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
31322: LD_ADDR_VAR 0 1
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 4
31332: PUSH
31333: LD_INT 5
31335: PUSH
31336: LD_INT 7
31338: PUSH
31339: LD_INT 11
31341: PUSH
31342: LD_INT 12
31344: PUSH
31345: LD_INT 15
31347: PUSH
31348: LD_INT 16
31350: PUSH
31351: LD_INT 20
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 22
31359: PUSH
31360: LD_INT 23
31362: PUSH
31363: LD_INT 25
31365: PUSH
31366: LD_INT 26
31368: PUSH
31369: LD_INT 30
31371: PUSH
31372: LD_INT 31
31374: PUSH
31375: LD_INT 32
31377: PUSH
31378: LD_INT 33
31380: PUSH
31381: LD_INT 34
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 101
31407: PUSH
31408: LD_INT 102
31410: PUSH
31411: LD_INT 103
31413: PUSH
31414: LD_INT 106
31416: PUSH
31417: LD_INT 108
31419: PUSH
31420: LD_INT 112
31422: PUSH
31423: LD_INT 113
31425: PUSH
31426: LD_INT 114
31428: PUSH
31429: LD_INT 116
31431: PUSH
31432: LD_INT 117
31434: PUSH
31435: LD_INT 118
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: ST_TO_ADDR
31455: GO 32086
31457: LD_INT 17
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31689
31465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
31466: LD_ADDR_VAR 0 1
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: LD_INT 4
31482: PUSH
31483: LD_INT 5
31485: PUSH
31486: LD_INT 6
31488: PUSH
31489: LD_INT 7
31491: PUSH
31492: LD_INT 8
31494: PUSH
31495: LD_INT 9
31497: PUSH
31498: LD_INT 10
31500: PUSH
31501: LD_INT 11
31503: PUSH
31504: LD_INT 12
31506: PUSH
31507: LD_INT 13
31509: PUSH
31510: LD_INT 14
31512: PUSH
31513: LD_INT 15
31515: PUSH
31516: LD_INT 16
31518: PUSH
31519: LD_INT 17
31521: PUSH
31522: LD_INT 18
31524: PUSH
31525: LD_INT 19
31527: PUSH
31528: LD_INT 20
31530: PUSH
31531: LD_INT 21
31533: PUSH
31534: LD_INT 22
31536: PUSH
31537: LD_INT 23
31539: PUSH
31540: LD_INT 24
31542: PUSH
31543: LD_INT 25
31545: PUSH
31546: LD_INT 26
31548: PUSH
31549: LD_INT 27
31551: PUSH
31552: LD_INT 28
31554: PUSH
31555: LD_INT 29
31557: PUSH
31558: LD_INT 30
31560: PUSH
31561: LD_INT 31
31563: PUSH
31564: LD_INT 32
31566: PUSH
31567: LD_INT 33
31569: PUSH
31570: LD_INT 34
31572: PUSH
31573: LD_INT 36
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 101
31615: PUSH
31616: LD_INT 102
31618: PUSH
31619: LD_INT 103
31621: PUSH
31622: LD_INT 104
31624: PUSH
31625: LD_INT 105
31627: PUSH
31628: LD_INT 106
31630: PUSH
31631: LD_INT 107
31633: PUSH
31634: LD_INT 108
31636: PUSH
31637: LD_INT 109
31639: PUSH
31640: LD_INT 110
31642: PUSH
31643: LD_INT 111
31645: PUSH
31646: LD_INT 112
31648: PUSH
31649: LD_INT 113
31651: PUSH
31652: LD_INT 114
31654: PUSH
31655: LD_INT 116
31657: PUSH
31658: LD_INT 117
31660: PUSH
31661: LD_INT 118
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: ST_TO_ADDR
31687: GO 32086
31689: LD_INT 18
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31845
31697: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
31698: LD_ADDR_VAR 0 1
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 5
31711: PUSH
31712: LD_INT 7
31714: PUSH
31715: LD_INT 11
31717: PUSH
31718: LD_INT 12
31720: PUSH
31721: LD_INT 15
31723: PUSH
31724: LD_INT 16
31726: PUSH
31727: LD_INT 20
31729: PUSH
31730: LD_INT 21
31732: PUSH
31733: LD_INT 22
31735: PUSH
31736: LD_INT 23
31738: PUSH
31739: LD_INT 25
31741: PUSH
31742: LD_INT 26
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: LD_INT 31
31750: PUSH
31751: LD_INT 32
31753: PUSH
31754: LD_INT 33
31756: PUSH
31757: LD_INT 34
31759: PUSH
31760: LD_INT 35
31762: PUSH
31763: LD_INT 36
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 101
31791: PUSH
31792: LD_INT 102
31794: PUSH
31795: LD_INT 103
31797: PUSH
31798: LD_INT 106
31800: PUSH
31801: LD_INT 108
31803: PUSH
31804: LD_INT 112
31806: PUSH
31807: LD_INT 113
31809: PUSH
31810: LD_INT 114
31812: PUSH
31813: LD_INT 115
31815: PUSH
31816: LD_INT 116
31818: PUSH
31819: LD_INT 117
31821: PUSH
31822: LD_INT 118
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: ST_TO_ADDR
31843: GO 32086
31845: LD_INT 19
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 32085
31853: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
31854: LD_ADDR_VAR 0 1
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 4
31870: PUSH
31871: LD_INT 5
31873: PUSH
31874: LD_INT 6
31876: PUSH
31877: LD_INT 7
31879: PUSH
31880: LD_INT 8
31882: PUSH
31883: LD_INT 9
31885: PUSH
31886: LD_INT 10
31888: PUSH
31889: LD_INT 11
31891: PUSH
31892: LD_INT 12
31894: PUSH
31895: LD_INT 13
31897: PUSH
31898: LD_INT 14
31900: PUSH
31901: LD_INT 15
31903: PUSH
31904: LD_INT 16
31906: PUSH
31907: LD_INT 17
31909: PUSH
31910: LD_INT 18
31912: PUSH
31913: LD_INT 19
31915: PUSH
31916: LD_INT 20
31918: PUSH
31919: LD_INT 21
31921: PUSH
31922: LD_INT 22
31924: PUSH
31925: LD_INT 23
31927: PUSH
31928: LD_INT 24
31930: PUSH
31931: LD_INT 25
31933: PUSH
31934: LD_INT 26
31936: PUSH
31937: LD_INT 27
31939: PUSH
31940: LD_INT 28
31942: PUSH
31943: LD_INT 29
31945: PUSH
31946: LD_INT 30
31948: PUSH
31949: LD_INT 31
31951: PUSH
31952: LD_INT 32
31954: PUSH
31955: LD_INT 33
31957: PUSH
31958: LD_INT 34
31960: PUSH
31961: LD_INT 35
31963: PUSH
31964: LD_INT 36
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 101
32007: PUSH
32008: LD_INT 102
32010: PUSH
32011: LD_INT 103
32013: PUSH
32014: LD_INT 104
32016: PUSH
32017: LD_INT 105
32019: PUSH
32020: LD_INT 106
32022: PUSH
32023: LD_INT 107
32025: PUSH
32026: LD_INT 108
32028: PUSH
32029: LD_INT 109
32031: PUSH
32032: LD_INT 110
32034: PUSH
32035: LD_INT 111
32037: PUSH
32038: LD_INT 112
32040: PUSH
32041: LD_INT 113
32043: PUSH
32044: LD_INT 114
32046: PUSH
32047: LD_INT 115
32049: PUSH
32050: LD_INT 116
32052: PUSH
32053: LD_INT 117
32055: PUSH
32056: LD_INT 118
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: ST_TO_ADDR
32083: GO 32086
32085: POP
// end else
32086: GO 32317
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32088: LD_ADDR_VAR 0 1
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: LD_INT 4
32104: PUSH
32105: LD_INT 5
32107: PUSH
32108: LD_INT 6
32110: PUSH
32111: LD_INT 7
32113: PUSH
32114: LD_INT 8
32116: PUSH
32117: LD_INT 9
32119: PUSH
32120: LD_INT 10
32122: PUSH
32123: LD_INT 11
32125: PUSH
32126: LD_INT 12
32128: PUSH
32129: LD_INT 13
32131: PUSH
32132: LD_INT 14
32134: PUSH
32135: LD_INT 15
32137: PUSH
32138: LD_INT 16
32140: PUSH
32141: LD_INT 17
32143: PUSH
32144: LD_INT 18
32146: PUSH
32147: LD_INT 19
32149: PUSH
32150: LD_INT 20
32152: PUSH
32153: LD_INT 21
32155: PUSH
32156: LD_INT 22
32158: PUSH
32159: LD_INT 23
32161: PUSH
32162: LD_INT 24
32164: PUSH
32165: LD_INT 25
32167: PUSH
32168: LD_INT 26
32170: PUSH
32171: LD_INT 27
32173: PUSH
32174: LD_INT 28
32176: PUSH
32177: LD_INT 29
32179: PUSH
32180: LD_INT 30
32182: PUSH
32183: LD_INT 31
32185: PUSH
32186: LD_INT 32
32188: PUSH
32189: LD_INT 33
32191: PUSH
32192: LD_INT 34
32194: PUSH
32195: LD_INT 35
32197: PUSH
32198: LD_INT 36
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 101
32241: PUSH
32242: LD_INT 102
32244: PUSH
32245: LD_INT 103
32247: PUSH
32248: LD_INT 104
32250: PUSH
32251: LD_INT 105
32253: PUSH
32254: LD_INT 106
32256: PUSH
32257: LD_INT 107
32259: PUSH
32260: LD_INT 108
32262: PUSH
32263: LD_INT 109
32265: PUSH
32266: LD_INT 110
32268: PUSH
32269: LD_INT 111
32271: PUSH
32272: LD_INT 112
32274: PUSH
32275: LD_INT 113
32277: PUSH
32278: LD_INT 114
32280: PUSH
32281: LD_INT 115
32283: PUSH
32284: LD_INT 116
32286: PUSH
32287: LD_INT 117
32289: PUSH
32290: LD_INT 118
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: ST_TO_ADDR
// if result then
32317: LD_VAR 0 1
32321: IFFALSE 32610
// begin normal :=  ;
32323: LD_ADDR_VAR 0 3
32327: PUSH
32328: LD_STRING 
32330: ST_TO_ADDR
// hardcore :=  ;
32331: LD_ADDR_VAR 0 4
32335: PUSH
32336: LD_STRING 
32338: ST_TO_ADDR
// for i = 1 to normalCounter do
32339: LD_ADDR_VAR 0 5
32343: PUSH
32344: DOUBLE
32345: LD_INT 1
32347: DEC
32348: ST_TO_ADDR
32349: LD_EXP 68
32353: PUSH
32354: FOR_TO
32355: IFFALSE 32456
// begin tmp := 0 ;
32357: LD_ADDR_VAR 0 2
32361: PUSH
32362: LD_STRING 0
32364: ST_TO_ADDR
// if result [ 1 ] then
32365: LD_VAR 0 1
32369: PUSH
32370: LD_INT 1
32372: ARRAY
32373: IFFALSE 32438
// if result [ 1 ] [ 1 ] = i then
32375: LD_VAR 0 1
32379: PUSH
32380: LD_INT 1
32382: ARRAY
32383: PUSH
32384: LD_INT 1
32386: ARRAY
32387: PUSH
32388: LD_VAR 0 5
32392: EQUAL
32393: IFFALSE 32438
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32395: LD_ADDR_VAR 0 1
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_INT 1
32407: PPUSH
32408: LD_VAR 0 1
32412: PUSH
32413: LD_INT 1
32415: ARRAY
32416: PPUSH
32417: LD_INT 1
32419: PPUSH
32420: CALL_OW 3
32424: PPUSH
32425: CALL_OW 1
32429: ST_TO_ADDR
// tmp := 1 ;
32430: LD_ADDR_VAR 0 2
32434: PUSH
32435: LD_STRING 1
32437: ST_TO_ADDR
// end ; normal := normal & tmp ;
32438: LD_ADDR_VAR 0 3
32442: PUSH
32443: LD_VAR 0 3
32447: PUSH
32448: LD_VAR 0 2
32452: STR
32453: ST_TO_ADDR
// end ;
32454: GO 32354
32456: POP
32457: POP
// for i = 1 to hardcoreCounter do
32458: LD_ADDR_VAR 0 5
32462: PUSH
32463: DOUBLE
32464: LD_INT 1
32466: DEC
32467: ST_TO_ADDR
32468: LD_EXP 69
32472: PUSH
32473: FOR_TO
32474: IFFALSE 32579
// begin tmp := 0 ;
32476: LD_ADDR_VAR 0 2
32480: PUSH
32481: LD_STRING 0
32483: ST_TO_ADDR
// if result [ 2 ] then
32484: LD_VAR 0 1
32488: PUSH
32489: LD_INT 2
32491: ARRAY
32492: IFFALSE 32561
// if result [ 2 ] [ 1 ] = 100 + i then
32494: LD_VAR 0 1
32498: PUSH
32499: LD_INT 2
32501: ARRAY
32502: PUSH
32503: LD_INT 1
32505: ARRAY
32506: PUSH
32507: LD_INT 100
32509: PUSH
32510: LD_VAR 0 5
32514: PLUS
32515: EQUAL
32516: IFFALSE 32561
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32518: LD_ADDR_VAR 0 1
32522: PUSH
32523: LD_VAR 0 1
32527: PPUSH
32528: LD_INT 2
32530: PPUSH
32531: LD_VAR 0 1
32535: PUSH
32536: LD_INT 2
32538: ARRAY
32539: PPUSH
32540: LD_INT 1
32542: PPUSH
32543: CALL_OW 3
32547: PPUSH
32548: CALL_OW 1
32552: ST_TO_ADDR
// tmp := 1 ;
32553: LD_ADDR_VAR 0 2
32557: PUSH
32558: LD_STRING 1
32560: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32561: LD_ADDR_VAR 0 4
32565: PUSH
32566: LD_VAR 0 4
32570: PUSH
32571: LD_VAR 0 2
32575: STR
32576: ST_TO_ADDR
// end ;
32577: GO 32473
32579: POP
32580: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32581: LD_STRING getStreamItemsFromMission("
32583: PUSH
32584: LD_VAR 0 3
32588: STR
32589: PUSH
32590: LD_STRING ","
32592: STR
32593: PUSH
32594: LD_VAR 0 4
32598: STR
32599: PUSH
32600: LD_STRING ")
32602: STR
32603: PPUSH
32604: CALL_OW 559
// end else
32608: GO 32617
// ToLua ( getStreamItemsFromMission("","") ) ;
32610: LD_STRING getStreamItemsFromMission("","")
32612: PPUSH
32613: CALL_OW 559
// end ;
32617: LD_VAR 0 1
32621: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32622: LD_EXP 67
32626: PUSH
32627: LD_EXP 72
32631: AND
32632: IFFALSE 32756
32634: GO 32636
32636: DISABLE
32637: LD_INT 0
32639: PPUSH
32640: PPUSH
// begin enable ;
32641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32642: LD_ADDR_VAR 0 2
32646: PUSH
32647: LD_INT 22
32649: PUSH
32650: LD_OWVAR 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 34
32664: PUSH
32665: LD_INT 7
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 34
32674: PUSH
32675: LD_INT 45
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 34
32684: PUSH
32685: LD_INT 28
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 34
32694: PUSH
32695: LD_INT 47
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PPUSH
32713: CALL_OW 69
32717: ST_TO_ADDR
// if not tmp then
32718: LD_VAR 0 2
32722: NOT
32723: IFFALSE 32727
// exit ;
32725: GO 32756
// for i in tmp do
32727: LD_ADDR_VAR 0 1
32731: PUSH
32732: LD_VAR 0 2
32736: PUSH
32737: FOR_IN
32738: IFFALSE 32754
// begin SetLives ( i , 0 ) ;
32740: LD_VAR 0 1
32744: PPUSH
32745: LD_INT 0
32747: PPUSH
32748: CALL_OW 234
// end ;
32752: GO 32737
32754: POP
32755: POP
// end ;
32756: PPOPN 2
32758: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32759: LD_EXP 67
32763: PUSH
32764: LD_EXP 73
32768: AND
32769: IFFALSE 32853
32771: GO 32773
32773: DISABLE
32774: LD_INT 0
32776: PPUSH
32777: PPUSH
// begin enable ;
32778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32779: LD_ADDR_VAR 0 2
32783: PUSH
32784: LD_INT 22
32786: PUSH
32787: LD_OWVAR 2
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 32
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PPUSH
32810: CALL_OW 69
32814: ST_TO_ADDR
// if not tmp then
32815: LD_VAR 0 2
32819: NOT
32820: IFFALSE 32824
// exit ;
32822: GO 32853
// for i in tmp do
32824: LD_ADDR_VAR 0 1
32828: PUSH
32829: LD_VAR 0 2
32833: PUSH
32834: FOR_IN
32835: IFFALSE 32851
// begin SetLives ( i , 0 ) ;
32837: LD_VAR 0 1
32841: PPUSH
32842: LD_INT 0
32844: PPUSH
32845: CALL_OW 234
// end ;
32849: GO 32834
32851: POP
32852: POP
// end ;
32853: PPOPN 2
32855: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32856: LD_EXP 67
32860: PUSH
32861: LD_EXP 70
32865: AND
32866: IFFALSE 32959
32868: GO 32870
32870: DISABLE
32871: LD_INT 0
32873: PPUSH
// begin enable ;
32874: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32875: LD_ADDR_VAR 0 1
32879: PUSH
32880: LD_INT 22
32882: PUSH
32883: LD_OWVAR 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 25
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 25
32907: PUSH
32908: LD_INT 9
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 25
32917: PUSH
32918: LD_INT 8
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PPUSH
32935: CALL_OW 69
32939: PUSH
32940: FOR_IN
32941: IFFALSE 32957
// begin SetClass ( i , 1 ) ;
32943: LD_VAR 0 1
32947: PPUSH
32948: LD_INT 1
32950: PPUSH
32951: CALL_OW 336
// end ;
32955: GO 32940
32957: POP
32958: POP
// end ;
32959: PPOPN 1
32961: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32962: LD_EXP 67
32966: PUSH
32967: LD_EXP 71
32971: AND
32972: PUSH
32973: LD_OWVAR 65
32977: PUSH
32978: LD_INT 7
32980: LESS
32981: AND
32982: IFFALSE 32996
32984: GO 32986
32986: DISABLE
// begin enable ;
32987: ENABLE
// game_speed := 7 ;
32988: LD_ADDR_OWVAR 65
32992: PUSH
32993: LD_INT 7
32995: ST_TO_ADDR
// end ;
32996: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32997: LD_EXP 67
33001: PUSH
33002: LD_EXP 74
33006: AND
33007: IFFALSE 33209
33009: GO 33011
33011: DISABLE
33012: LD_INT 0
33014: PPUSH
33015: PPUSH
33016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33017: LD_ADDR_VAR 0 3
33021: PUSH
33022: LD_INT 81
33024: PUSH
33025: LD_OWVAR 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 21
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: ST_TO_ADDR
// if not tmp then
33053: LD_VAR 0 3
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33209
// if tmp > 5 then
33062: LD_VAR 0 3
33066: PUSH
33067: LD_INT 5
33069: GREATER
33070: IFFALSE 33082
// k := 5 else
33072: LD_ADDR_VAR 0 2
33076: PUSH
33077: LD_INT 5
33079: ST_TO_ADDR
33080: GO 33092
// k := tmp ;
33082: LD_ADDR_VAR 0 2
33086: PUSH
33087: LD_VAR 0 3
33091: ST_TO_ADDR
// for i := 1 to k do
33092: LD_ADDR_VAR 0 1
33096: PUSH
33097: DOUBLE
33098: LD_INT 1
33100: DEC
33101: ST_TO_ADDR
33102: LD_VAR 0 2
33106: PUSH
33107: FOR_TO
33108: IFFALSE 33207
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33110: LD_VAR 0 3
33114: PUSH
33115: LD_VAR 0 1
33119: ARRAY
33120: PPUSH
33121: LD_VAR 0 1
33125: PUSH
33126: LD_INT 4
33128: MOD
33129: PUSH
33130: LD_INT 1
33132: PLUS
33133: PPUSH
33134: CALL_OW 259
33138: PUSH
33139: LD_INT 10
33141: LESS
33142: IFFALSE 33205
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33144: LD_VAR 0 3
33148: PUSH
33149: LD_VAR 0 1
33153: ARRAY
33154: PPUSH
33155: LD_VAR 0 1
33159: PUSH
33160: LD_INT 4
33162: MOD
33163: PUSH
33164: LD_INT 1
33166: PLUS
33167: PPUSH
33168: LD_VAR 0 3
33172: PUSH
33173: LD_VAR 0 1
33177: ARRAY
33178: PPUSH
33179: LD_VAR 0 1
33183: PUSH
33184: LD_INT 4
33186: MOD
33187: PUSH
33188: LD_INT 1
33190: PLUS
33191: PPUSH
33192: CALL_OW 259
33196: PUSH
33197: LD_INT 1
33199: PLUS
33200: PPUSH
33201: CALL_OW 237
33205: GO 33107
33207: POP
33208: POP
// end ;
33209: PPOPN 3
33211: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33212: LD_EXP 67
33216: PUSH
33217: LD_EXP 75
33221: AND
33222: IFFALSE 33242
33224: GO 33226
33226: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33227: LD_INT 4
33229: PPUSH
33230: LD_OWVAR 2
33234: PPUSH
33235: LD_INT 0
33237: PPUSH
33238: CALL_OW 324
33242: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33243: LD_EXP 67
33247: PUSH
33248: LD_EXP 104
33252: AND
33253: IFFALSE 33273
33255: GO 33257
33257: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33258: LD_INT 19
33260: PPUSH
33261: LD_OWVAR 2
33265: PPUSH
33266: LD_INT 0
33268: PPUSH
33269: CALL_OW 324
33273: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33274: LD_EXP 67
33278: PUSH
33279: LD_EXP 76
33283: AND
33284: IFFALSE 33386
33286: GO 33288
33288: DISABLE
33289: LD_INT 0
33291: PPUSH
33292: PPUSH
// begin enable ;
33293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33294: LD_ADDR_VAR 0 2
33298: PUSH
33299: LD_INT 22
33301: PUSH
33302: LD_OWVAR 2
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 34
33316: PUSH
33317: LD_INT 11
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 34
33326: PUSH
33327: LD_INT 30
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: LIST
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PPUSH
33343: CALL_OW 69
33347: ST_TO_ADDR
// if not tmp then
33348: LD_VAR 0 2
33352: NOT
33353: IFFALSE 33357
// exit ;
33355: GO 33386
// for i in tmp do
33357: LD_ADDR_VAR 0 1
33361: PUSH
33362: LD_VAR 0 2
33366: PUSH
33367: FOR_IN
33368: IFFALSE 33384
// begin SetLives ( i , 0 ) ;
33370: LD_VAR 0 1
33374: PPUSH
33375: LD_INT 0
33377: PPUSH
33378: CALL_OW 234
// end ;
33382: GO 33367
33384: POP
33385: POP
// end ;
33386: PPOPN 2
33388: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33389: LD_EXP 67
33393: PUSH
33394: LD_EXP 77
33398: AND
33399: IFFALSE 33419
33401: GO 33403
33403: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33404: LD_INT 32
33406: PPUSH
33407: LD_OWVAR 2
33411: PPUSH
33412: LD_INT 0
33414: PPUSH
33415: CALL_OW 324
33419: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33420: LD_EXP 67
33424: PUSH
33425: LD_EXP 78
33429: AND
33430: IFFALSE 33611
33432: GO 33434
33434: DISABLE
33435: LD_INT 0
33437: PPUSH
33438: PPUSH
33439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33440: LD_ADDR_VAR 0 2
33444: PUSH
33445: LD_INT 22
33447: PUSH
33448: LD_OWVAR 2
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 33
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PPUSH
33471: CALL_OW 69
33475: ST_TO_ADDR
// if not tmp then
33476: LD_VAR 0 2
33480: NOT
33481: IFFALSE 33485
// exit ;
33483: GO 33611
// side := 0 ;
33485: LD_ADDR_VAR 0 3
33489: PUSH
33490: LD_INT 0
33492: ST_TO_ADDR
// for i := 1 to 8 do
33493: LD_ADDR_VAR 0 1
33497: PUSH
33498: DOUBLE
33499: LD_INT 1
33501: DEC
33502: ST_TO_ADDR
33503: LD_INT 8
33505: PUSH
33506: FOR_TO
33507: IFFALSE 33555
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33509: LD_OWVAR 2
33513: PUSH
33514: LD_VAR 0 1
33518: NONEQUAL
33519: PUSH
33520: LD_OWVAR 2
33524: PPUSH
33525: LD_VAR 0 1
33529: PPUSH
33530: CALL_OW 81
33534: PUSH
33535: LD_INT 2
33537: EQUAL
33538: AND
33539: IFFALSE 33553
// begin side := i ;
33541: LD_ADDR_VAR 0 3
33545: PUSH
33546: LD_VAR 0 1
33550: ST_TO_ADDR
// break ;
33551: GO 33555
// end ;
33553: GO 33506
33555: POP
33556: POP
// if not side then
33557: LD_VAR 0 3
33561: NOT
33562: IFFALSE 33566
// exit ;
33564: GO 33611
// for i := 1 to tmp do
33566: LD_ADDR_VAR 0 1
33570: PUSH
33571: DOUBLE
33572: LD_INT 1
33574: DEC
33575: ST_TO_ADDR
33576: LD_VAR 0 2
33580: PUSH
33581: FOR_TO
33582: IFFALSE 33609
// if Prob ( 60 ) then
33584: LD_INT 60
33586: PPUSH
33587: CALL_OW 13
33591: IFFALSE 33607
// SetSide ( i , side ) ;
33593: LD_VAR 0 1
33597: PPUSH
33598: LD_VAR 0 3
33602: PPUSH
33603: CALL_OW 235
33607: GO 33581
33609: POP
33610: POP
// end ;
33611: PPOPN 3
33613: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33614: LD_EXP 67
33618: PUSH
33619: LD_EXP 80
33623: AND
33624: IFFALSE 33743
33626: GO 33628
33628: DISABLE
33629: LD_INT 0
33631: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33632: LD_ADDR_VAR 0 1
33636: PUSH
33637: LD_INT 22
33639: PUSH
33640: LD_OWVAR 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 21
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: LD_INT 23
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: PPUSH
33681: CALL_OW 69
33685: PUSH
33686: FOR_IN
33687: IFFALSE 33741
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33689: LD_VAR 0 1
33693: PPUSH
33694: CALL_OW 257
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: LD_INT 4
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: IN
33717: IFFALSE 33739
// SetClass ( un , rand ( 1 , 4 ) ) ;
33719: LD_VAR 0 1
33723: PPUSH
33724: LD_INT 1
33726: PPUSH
33727: LD_INT 4
33729: PPUSH
33730: CALL_OW 12
33734: PPUSH
33735: CALL_OW 336
33739: GO 33686
33741: POP
33742: POP
// end ;
33743: PPOPN 1
33745: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33746: LD_EXP 67
33750: PUSH
33751: LD_EXP 79
33755: AND
33756: IFFALSE 33835
33758: GO 33760
33760: DISABLE
33761: LD_INT 0
33763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33764: LD_ADDR_VAR 0 1
33768: PUSH
33769: LD_INT 22
33771: PUSH
33772: LD_OWVAR 2
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 21
33783: PUSH
33784: LD_INT 3
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PPUSH
33795: CALL_OW 69
33799: ST_TO_ADDR
// if not tmp then
33800: LD_VAR 0 1
33804: NOT
33805: IFFALSE 33809
// exit ;
33807: GO 33835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33809: LD_VAR 0 1
33813: PUSH
33814: LD_INT 1
33816: PPUSH
33817: LD_VAR 0 1
33821: PPUSH
33822: CALL_OW 12
33826: ARRAY
33827: PPUSH
33828: LD_INT 100
33830: PPUSH
33831: CALL_OW 234
// end ;
33835: PPOPN 1
33837: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33838: LD_EXP 67
33842: PUSH
33843: LD_EXP 81
33847: AND
33848: IFFALSE 33946
33850: GO 33852
33852: DISABLE
33853: LD_INT 0
33855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33856: LD_ADDR_VAR 0 1
33860: PUSH
33861: LD_INT 22
33863: PUSH
33864: LD_OWVAR 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 21
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PPUSH
33887: CALL_OW 69
33891: ST_TO_ADDR
// if not tmp then
33892: LD_VAR 0 1
33896: NOT
33897: IFFALSE 33901
// exit ;
33899: GO 33946
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33901: LD_VAR 0 1
33905: PUSH
33906: LD_INT 1
33908: PPUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL_OW 12
33918: ARRAY
33919: PPUSH
33920: LD_INT 1
33922: PPUSH
33923: LD_INT 4
33925: PPUSH
33926: CALL_OW 12
33930: PPUSH
33931: LD_INT 3000
33933: PPUSH
33934: LD_INT 9000
33936: PPUSH
33937: CALL_OW 12
33941: PPUSH
33942: CALL_OW 492
// end ;
33946: PPOPN 1
33948: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33949: LD_EXP 67
33953: PUSH
33954: LD_EXP 82
33958: AND
33959: IFFALSE 33979
33961: GO 33963
33963: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33964: LD_INT 1
33966: PPUSH
33967: LD_OWVAR 2
33971: PPUSH
33972: LD_INT 0
33974: PPUSH
33975: CALL_OW 324
33979: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33980: LD_EXP 67
33984: PUSH
33985: LD_EXP 83
33989: AND
33990: IFFALSE 34073
33992: GO 33994
33994: DISABLE
33995: LD_INT 0
33997: PPUSH
33998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33999: LD_ADDR_VAR 0 2
34003: PUSH
34004: LD_INT 22
34006: PUSH
34007: LD_OWVAR 2
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: LD_INT 3
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PPUSH
34030: CALL_OW 69
34034: ST_TO_ADDR
// if not tmp then
34035: LD_VAR 0 2
34039: NOT
34040: IFFALSE 34044
// exit ;
34042: GO 34073
// for i in tmp do
34044: LD_ADDR_VAR 0 1
34048: PUSH
34049: LD_VAR 0 2
34053: PUSH
34054: FOR_IN
34055: IFFALSE 34071
// SetBLevel ( i , 10 ) ;
34057: LD_VAR 0 1
34061: PPUSH
34062: LD_INT 10
34064: PPUSH
34065: CALL_OW 241
34069: GO 34054
34071: POP
34072: POP
// end ;
34073: PPOPN 2
34075: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34076: LD_EXP 67
34080: PUSH
34081: LD_EXP 84
34085: AND
34086: IFFALSE 34197
34088: GO 34090
34090: DISABLE
34091: LD_INT 0
34093: PPUSH
34094: PPUSH
34095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34096: LD_ADDR_VAR 0 3
34100: PUSH
34101: LD_INT 22
34103: PUSH
34104: LD_OWVAR 2
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 25
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PPUSH
34127: CALL_OW 69
34131: ST_TO_ADDR
// if not tmp then
34132: LD_VAR 0 3
34136: NOT
34137: IFFALSE 34141
// exit ;
34139: GO 34197
// un := tmp [ rand ( 1 , tmp ) ] ;
34141: LD_ADDR_VAR 0 2
34145: PUSH
34146: LD_VAR 0 3
34150: PUSH
34151: LD_INT 1
34153: PPUSH
34154: LD_VAR 0 3
34158: PPUSH
34159: CALL_OW 12
34163: ARRAY
34164: ST_TO_ADDR
// if Crawls ( un ) then
34165: LD_VAR 0 2
34169: PPUSH
34170: CALL_OW 318
34174: IFFALSE 34185
// ComWalk ( un ) ;
34176: LD_VAR 0 2
34180: PPUSH
34181: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34185: LD_VAR 0 2
34189: PPUSH
34190: LD_INT 5
34192: PPUSH
34193: CALL_OW 336
// end ;
34197: PPOPN 3
34199: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34200: LD_EXP 67
34204: PUSH
34205: LD_EXP 85
34209: AND
34210: PUSH
34211: LD_OWVAR 67
34215: PUSH
34216: LD_INT 4
34218: LESS
34219: AND
34220: IFFALSE 34239
34222: GO 34224
34224: DISABLE
// begin Difficulty := Difficulty + 1 ;
34225: LD_ADDR_OWVAR 67
34229: PUSH
34230: LD_OWVAR 67
34234: PUSH
34235: LD_INT 1
34237: PLUS
34238: ST_TO_ADDR
// end ;
34239: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34240: LD_EXP 67
34244: PUSH
34245: LD_EXP 86
34249: AND
34250: IFFALSE 34353
34252: GO 34254
34254: DISABLE
34255: LD_INT 0
34257: PPUSH
// begin for i := 1 to 5 do
34258: LD_ADDR_VAR 0 1
34262: PUSH
34263: DOUBLE
34264: LD_INT 1
34266: DEC
34267: ST_TO_ADDR
34268: LD_INT 5
34270: PUSH
34271: FOR_TO
34272: IFFALSE 34351
// begin uc_nation := nation_nature ;
34274: LD_ADDR_OWVAR 21
34278: PUSH
34279: LD_INT 0
34281: ST_TO_ADDR
// uc_side := 0 ;
34282: LD_ADDR_OWVAR 20
34286: PUSH
34287: LD_INT 0
34289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34290: LD_ADDR_OWVAR 29
34294: PUSH
34295: LD_INT 12
34297: PUSH
34298: LD_INT 12
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: ST_TO_ADDR
// hc_agressivity := 20 ;
34305: LD_ADDR_OWVAR 35
34309: PUSH
34310: LD_INT 20
34312: ST_TO_ADDR
// hc_class := class_tiger ;
34313: LD_ADDR_OWVAR 28
34317: PUSH
34318: LD_INT 14
34320: ST_TO_ADDR
// hc_gallery :=  ;
34321: LD_ADDR_OWVAR 33
34325: PUSH
34326: LD_STRING 
34328: ST_TO_ADDR
// hc_name :=  ;
34329: LD_ADDR_OWVAR 26
34333: PUSH
34334: LD_STRING 
34336: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34337: CALL_OW 44
34341: PPUSH
34342: LD_INT 0
34344: PPUSH
34345: CALL_OW 51
// end ;
34349: GO 34271
34351: POP
34352: POP
// end ;
34353: PPOPN 1
34355: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34356: LD_EXP 67
34360: PUSH
34361: LD_EXP 87
34365: AND
34366: IFFALSE 34375
34368: GO 34370
34370: DISABLE
// StreamSibBomb ;
34371: CALL 34376 0 0
34375: END
// export function StreamSibBomb ; var i , x , y ; begin
34376: LD_INT 0
34378: PPUSH
34379: PPUSH
34380: PPUSH
34381: PPUSH
// result := false ;
34382: LD_ADDR_VAR 0 1
34386: PUSH
34387: LD_INT 0
34389: ST_TO_ADDR
// for i := 1 to 16 do
34390: LD_ADDR_VAR 0 2
34394: PUSH
34395: DOUBLE
34396: LD_INT 1
34398: DEC
34399: ST_TO_ADDR
34400: LD_INT 16
34402: PUSH
34403: FOR_TO
34404: IFFALSE 34603
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34406: LD_ADDR_VAR 0 3
34410: PUSH
34411: LD_INT 10
34413: PUSH
34414: LD_INT 20
34416: PUSH
34417: LD_INT 30
34419: PUSH
34420: LD_INT 40
34422: PUSH
34423: LD_INT 50
34425: PUSH
34426: LD_INT 60
34428: PUSH
34429: LD_INT 70
34431: PUSH
34432: LD_INT 80
34434: PUSH
34435: LD_INT 90
34437: PUSH
34438: LD_INT 100
34440: PUSH
34441: LD_INT 110
34443: PUSH
34444: LD_INT 120
34446: PUSH
34447: LD_INT 130
34449: PUSH
34450: LD_INT 140
34452: PUSH
34453: LD_INT 150
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: PPUSH
34476: LD_INT 15
34478: PPUSH
34479: CALL_OW 12
34483: ARRAY
34484: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34485: LD_ADDR_VAR 0 4
34489: PUSH
34490: LD_INT 10
34492: PUSH
34493: LD_INT 20
34495: PUSH
34496: LD_INT 30
34498: PUSH
34499: LD_INT 40
34501: PUSH
34502: LD_INT 50
34504: PUSH
34505: LD_INT 60
34507: PUSH
34508: LD_INT 70
34510: PUSH
34511: LD_INT 80
34513: PUSH
34514: LD_INT 90
34516: PUSH
34517: LD_INT 100
34519: PUSH
34520: LD_INT 110
34522: PUSH
34523: LD_INT 120
34525: PUSH
34526: LD_INT 130
34528: PUSH
34529: LD_INT 140
34531: PUSH
34532: LD_INT 150
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PPUSH
34555: LD_INT 15
34557: PPUSH
34558: CALL_OW 12
34562: ARRAY
34563: ST_TO_ADDR
// if ValidHex ( x , y ) then
34564: LD_VAR 0 3
34568: PPUSH
34569: LD_VAR 0 4
34573: PPUSH
34574: CALL_OW 488
34578: IFFALSE 34601
// begin result := [ x , y ] ;
34580: LD_ADDR_VAR 0 1
34584: PUSH
34585: LD_VAR 0 3
34589: PUSH
34590: LD_VAR 0 4
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: ST_TO_ADDR
// break ;
34599: GO 34603
// end ; end ;
34601: GO 34403
34603: POP
34604: POP
// if result then
34605: LD_VAR 0 1
34609: IFFALSE 34669
// begin ToLua ( playSibBomb() ) ;
34611: LD_STRING playSibBomb()
34613: PPUSH
34614: CALL_OW 559
// wait ( 0 0$14 ) ;
34618: LD_INT 490
34620: PPUSH
34621: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34625: LD_VAR 0 1
34629: PUSH
34630: LD_INT 1
34632: ARRAY
34633: PPUSH
34634: LD_VAR 0 1
34638: PUSH
34639: LD_INT 2
34641: ARRAY
34642: PPUSH
34643: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34647: LD_VAR 0 1
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: PPUSH
34656: LD_VAR 0 1
34660: PUSH
34661: LD_INT 2
34663: ARRAY
34664: PPUSH
34665: CALL_OW 429
// end ; end ;
34669: LD_VAR 0 1
34673: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34674: LD_EXP 67
34678: PUSH
34679: LD_EXP 89
34683: AND
34684: IFFALSE 34696
34686: GO 34688
34688: DISABLE
// YouLost (  ) ;
34689: LD_STRING 
34691: PPUSH
34692: CALL_OW 104
34696: END
// every 0 0$1 trigger StreamModeActive and sFog do
34697: LD_EXP 67
34701: PUSH
34702: LD_EXP 88
34706: AND
34707: IFFALSE 34721
34709: GO 34711
34711: DISABLE
// FogOff ( your_side ) ;
34712: LD_OWVAR 2
34716: PPUSH
34717: CALL_OW 344
34721: END
// every 0 0$1 trigger StreamModeActive and sSun do
34722: LD_EXP 67
34726: PUSH
34727: LD_EXP 90
34731: AND
34732: IFFALSE 34760
34734: GO 34736
34736: DISABLE
// begin solar_recharge_percent := 0 ;
34737: LD_ADDR_OWVAR 79
34741: PUSH
34742: LD_INT 0
34744: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34745: LD_INT 10500
34747: PPUSH
34748: CALL_OW 67
// solar_recharge_percent := 100 ;
34752: LD_ADDR_OWVAR 79
34756: PUSH
34757: LD_INT 100
34759: ST_TO_ADDR
// end ;
34760: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34761: LD_EXP 67
34765: PUSH
34766: LD_EXP 91
34770: AND
34771: IFFALSE 35010
34773: GO 34775
34775: DISABLE
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
34780: PPUSH
// begin tmp := [ ] ;
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: EMPTY
34787: ST_TO_ADDR
// for i := 1 to 6 do
34788: LD_ADDR_VAR 0 1
34792: PUSH
34793: DOUBLE
34794: LD_INT 1
34796: DEC
34797: ST_TO_ADDR
34798: LD_INT 6
34800: PUSH
34801: FOR_TO
34802: IFFALSE 34907
// begin uc_nation := nation_nature ;
34804: LD_ADDR_OWVAR 21
34808: PUSH
34809: LD_INT 0
34811: ST_TO_ADDR
// uc_side := 0 ;
34812: LD_ADDR_OWVAR 20
34816: PUSH
34817: LD_INT 0
34819: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34820: LD_ADDR_OWVAR 29
34824: PUSH
34825: LD_INT 12
34827: PUSH
34828: LD_INT 12
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: ST_TO_ADDR
// hc_agressivity := 20 ;
34835: LD_ADDR_OWVAR 35
34839: PUSH
34840: LD_INT 20
34842: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34843: LD_ADDR_OWVAR 28
34847: PUSH
34848: LD_INT 17
34850: ST_TO_ADDR
// hc_gallery :=  ;
34851: LD_ADDR_OWVAR 33
34855: PUSH
34856: LD_STRING 
34858: ST_TO_ADDR
// hc_name :=  ;
34859: LD_ADDR_OWVAR 26
34863: PUSH
34864: LD_STRING 
34866: ST_TO_ADDR
// un := CreateHuman ;
34867: LD_ADDR_VAR 0 2
34871: PUSH
34872: CALL_OW 44
34876: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_INT 1
34884: PPUSH
34885: CALL_OW 51
// tmp := tmp ^ un ;
34889: LD_ADDR_VAR 0 3
34893: PUSH
34894: LD_VAR 0 3
34898: PUSH
34899: LD_VAR 0 2
34903: ADD
34904: ST_TO_ADDR
// end ;
34905: GO 34801
34907: POP
34908: POP
// repeat wait ( 0 0$1 ) ;
34909: LD_INT 35
34911: PPUSH
34912: CALL_OW 67
// for un in tmp do
34916: LD_ADDR_VAR 0 2
34920: PUSH
34921: LD_VAR 0 3
34925: PUSH
34926: FOR_IN
34927: IFFALSE 35001
// begin if IsDead ( un ) then
34929: LD_VAR 0 2
34933: PPUSH
34934: CALL_OW 301
34938: IFFALSE 34958
// begin tmp := tmp diff un ;
34940: LD_ADDR_VAR 0 3
34944: PUSH
34945: LD_VAR 0 3
34949: PUSH
34950: LD_VAR 0 2
34954: DIFF
34955: ST_TO_ADDR
// continue ;
34956: GO 34926
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34958: LD_VAR 0 2
34962: PPUSH
34963: LD_INT 3
34965: PUSH
34966: LD_INT 22
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PPUSH
34980: CALL_OW 69
34984: PPUSH
34985: LD_VAR 0 2
34989: PPUSH
34990: CALL_OW 74
34994: PPUSH
34995: CALL_OW 115
// end ;
34999: GO 34926
35001: POP
35002: POP
// until not tmp ;
35003: LD_VAR 0 3
35007: NOT
35008: IFFALSE 34909
// end ;
35010: PPOPN 3
35012: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35013: LD_EXP 67
35017: PUSH
35018: LD_EXP 92
35022: AND
35023: IFFALSE 35077
35025: GO 35027
35027: DISABLE
// begin ToLua ( displayTroll(); ) ;
35028: LD_STRING displayTroll();
35030: PPUSH
35031: CALL_OW 559
// wait ( 3 3$00 ) ;
35035: LD_INT 6300
35037: PPUSH
35038: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35042: LD_STRING hideTroll();
35044: PPUSH
35045: CALL_OW 559
// wait ( 1 1$00 ) ;
35049: LD_INT 2100
35051: PPUSH
35052: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35056: LD_STRING displayTroll();
35058: PPUSH
35059: CALL_OW 559
// wait ( 1 1$00 ) ;
35063: LD_INT 2100
35065: PPUSH
35066: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35070: LD_STRING hideTroll();
35072: PPUSH
35073: CALL_OW 559
// end ;
35077: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35078: LD_EXP 67
35082: PUSH
35083: LD_EXP 93
35087: AND
35088: IFFALSE 35151
35090: GO 35092
35092: DISABLE
35093: LD_INT 0
35095: PPUSH
// begin p := 0 ;
35096: LD_ADDR_VAR 0 1
35100: PUSH
35101: LD_INT 0
35103: ST_TO_ADDR
// repeat game_speed := 1 ;
35104: LD_ADDR_OWVAR 65
35108: PUSH
35109: LD_INT 1
35111: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35112: LD_INT 35
35114: PPUSH
35115: CALL_OW 67
// p := p + 1 ;
35119: LD_ADDR_VAR 0 1
35123: PUSH
35124: LD_VAR 0 1
35128: PUSH
35129: LD_INT 1
35131: PLUS
35132: ST_TO_ADDR
// until p >= 60 ;
35133: LD_VAR 0 1
35137: PUSH
35138: LD_INT 60
35140: GREATEREQUAL
35141: IFFALSE 35104
// game_speed := 4 ;
35143: LD_ADDR_OWVAR 65
35147: PUSH
35148: LD_INT 4
35150: ST_TO_ADDR
// end ;
35151: PPOPN 1
35153: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35154: LD_EXP 67
35158: PUSH
35159: LD_EXP 94
35163: AND
35164: IFFALSE 35310
35166: GO 35168
35168: DISABLE
35169: LD_INT 0
35171: PPUSH
35172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35173: LD_ADDR_VAR 0 1
35177: PUSH
35178: LD_INT 22
35180: PUSH
35181: LD_OWVAR 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 30
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 30
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PPUSH
35222: CALL_OW 69
35226: ST_TO_ADDR
// if not depot then
35227: LD_VAR 0 1
35231: NOT
35232: IFFALSE 35236
// exit ;
35234: GO 35310
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35236: LD_ADDR_VAR 0 2
35240: PUSH
35241: LD_VAR 0 1
35245: PUSH
35246: LD_INT 1
35248: PPUSH
35249: LD_VAR 0 1
35253: PPUSH
35254: CALL_OW 12
35258: ARRAY
35259: PPUSH
35260: CALL_OW 274
35264: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35265: LD_VAR 0 2
35269: PPUSH
35270: LD_INT 1
35272: PPUSH
35273: LD_INT 0
35275: PPUSH
35276: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35280: LD_VAR 0 2
35284: PPUSH
35285: LD_INT 2
35287: PPUSH
35288: LD_INT 0
35290: PPUSH
35291: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35295: LD_VAR 0 2
35299: PPUSH
35300: LD_INT 3
35302: PPUSH
35303: LD_INT 0
35305: PPUSH
35306: CALL_OW 277
// end ;
35310: PPOPN 2
35312: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35313: LD_EXP 67
35317: PUSH
35318: LD_EXP 95
35322: AND
35323: IFFALSE 35420
35325: GO 35327
35327: DISABLE
35328: LD_INT 0
35330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35331: LD_ADDR_VAR 0 1
35335: PUSH
35336: LD_INT 22
35338: PUSH
35339: LD_OWVAR 2
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 21
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: LD_INT 23
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: PPUSH
35380: CALL_OW 69
35384: ST_TO_ADDR
// if not tmp then
35385: LD_VAR 0 1
35389: NOT
35390: IFFALSE 35394
// exit ;
35392: GO 35420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35394: LD_VAR 0 1
35398: PUSH
35399: LD_INT 1
35401: PPUSH
35402: LD_VAR 0 1
35406: PPUSH
35407: CALL_OW 12
35411: ARRAY
35412: PPUSH
35413: LD_INT 200
35415: PPUSH
35416: CALL_OW 234
// end ;
35420: PPOPN 1
35422: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35423: LD_EXP 67
35427: PUSH
35428: LD_EXP 96
35432: AND
35433: IFFALSE 35512
35435: GO 35437
35437: DISABLE
35438: LD_INT 0
35440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35441: LD_ADDR_VAR 0 1
35445: PUSH
35446: LD_INT 22
35448: PUSH
35449: LD_OWVAR 2
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 21
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PPUSH
35472: CALL_OW 69
35476: ST_TO_ADDR
// if not tmp then
35477: LD_VAR 0 1
35481: NOT
35482: IFFALSE 35486
// exit ;
35484: GO 35512
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35486: LD_VAR 0 1
35490: PUSH
35491: LD_INT 1
35493: PPUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 12
35503: ARRAY
35504: PPUSH
35505: LD_INT 60
35507: PPUSH
35508: CALL_OW 234
// end ;
35512: PPOPN 1
35514: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35515: LD_EXP 67
35519: PUSH
35520: LD_EXP 97
35524: AND
35525: IFFALSE 35624
35527: GO 35529
35529: DISABLE
35530: LD_INT 0
35532: PPUSH
35533: PPUSH
// begin enable ;
35534: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35535: LD_ADDR_VAR 0 1
35539: PUSH
35540: LD_INT 22
35542: PUSH
35543: LD_OWVAR 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 61
35554: PUSH
35555: EMPTY
35556: LIST
35557: PUSH
35558: LD_INT 33
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: PPUSH
35573: CALL_OW 69
35577: ST_TO_ADDR
// if not tmp then
35578: LD_VAR 0 1
35582: NOT
35583: IFFALSE 35587
// exit ;
35585: GO 35624
// for i in tmp do
35587: LD_ADDR_VAR 0 2
35591: PUSH
35592: LD_VAR 0 1
35596: PUSH
35597: FOR_IN
35598: IFFALSE 35622
// if IsControledBy ( i ) then
35600: LD_VAR 0 2
35604: PPUSH
35605: CALL_OW 312
35609: IFFALSE 35620
// ComUnlink ( i ) ;
35611: LD_VAR 0 2
35615: PPUSH
35616: CALL_OW 136
35620: GO 35597
35622: POP
35623: POP
// end ;
35624: PPOPN 2
35626: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35627: LD_EXP 67
35631: PUSH
35632: LD_EXP 98
35636: AND
35637: IFFALSE 35777
35639: GO 35641
35641: DISABLE
35642: LD_INT 0
35644: PPUSH
35645: PPUSH
// begin ToLua ( displayPowell(); ) ;
35646: LD_STRING displayPowell();
35648: PPUSH
35649: CALL_OW 559
// uc_side := 0 ;
35653: LD_ADDR_OWVAR 20
35657: PUSH
35658: LD_INT 0
35660: ST_TO_ADDR
// uc_nation := 2 ;
35661: LD_ADDR_OWVAR 21
35665: PUSH
35666: LD_INT 2
35668: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35669: LD_ADDR_OWVAR 37
35673: PUSH
35674: LD_INT 14
35676: ST_TO_ADDR
// vc_engine := engine_siberite ;
35677: LD_ADDR_OWVAR 39
35681: PUSH
35682: LD_INT 3
35684: ST_TO_ADDR
// vc_control := control_apeman ;
35685: LD_ADDR_OWVAR 38
35689: PUSH
35690: LD_INT 5
35692: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35693: LD_ADDR_OWVAR 40
35697: PUSH
35698: LD_INT 29
35700: ST_TO_ADDR
// un := CreateVehicle ;
35701: LD_ADDR_VAR 0 2
35705: PUSH
35706: CALL_OW 45
35710: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35711: LD_VAR 0 2
35715: PPUSH
35716: LD_INT 1
35718: PPUSH
35719: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35723: LD_INT 35
35725: PPUSH
35726: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35730: LD_VAR 0 2
35734: PPUSH
35735: LD_INT 22
35737: PUSH
35738: LD_OWVAR 2
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PPUSH
35747: CALL_OW 69
35751: PPUSH
35752: LD_VAR 0 2
35756: PPUSH
35757: CALL_OW 74
35761: PPUSH
35762: CALL_OW 115
// until IsDead ( un ) ;
35766: LD_VAR 0 2
35770: PPUSH
35771: CALL_OW 301
35775: IFFALSE 35723
// end ;
35777: PPOPN 2
35779: END
// every 0 0$1 trigger StreamModeActive and sStu do
35780: LD_EXP 67
35784: PUSH
35785: LD_EXP 106
35789: AND
35790: IFFALSE 35806
35792: GO 35794
35794: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35795: LD_STRING displayStucuk();
35797: PPUSH
35798: CALL_OW 559
// ResetFog ;
35802: CALL_OW 335
// end ;
35806: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35807: LD_EXP 67
35811: PUSH
35812: LD_EXP 99
35816: AND
35817: IFFALSE 35958
35819: GO 35821
35821: DISABLE
35822: LD_INT 0
35824: PPUSH
35825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35826: LD_ADDR_VAR 0 2
35830: PUSH
35831: LD_INT 22
35833: PUSH
35834: LD_OWVAR 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 21
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PPUSH
35857: CALL_OW 69
35861: ST_TO_ADDR
// if not tmp then
35862: LD_VAR 0 2
35866: NOT
35867: IFFALSE 35871
// exit ;
35869: GO 35958
// un := tmp [ rand ( 1 , tmp ) ] ;
35871: LD_ADDR_VAR 0 1
35875: PUSH
35876: LD_VAR 0 2
35880: PUSH
35881: LD_INT 1
35883: PPUSH
35884: LD_VAR 0 2
35888: PPUSH
35889: CALL_OW 12
35893: ARRAY
35894: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35895: LD_VAR 0 1
35899: PPUSH
35900: LD_INT 0
35902: PPUSH
35903: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35907: LD_VAR 0 1
35911: PPUSH
35912: LD_OWVAR 3
35916: PUSH
35917: LD_VAR 0 1
35921: DIFF
35922: PPUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 74
35932: PPUSH
35933: CALL_OW 115
// wait ( 0 0$20 ) ;
35937: LD_INT 700
35939: PPUSH
35940: CALL_OW 67
// SetSide ( un , your_side ) ;
35944: LD_VAR 0 1
35948: PPUSH
35949: LD_OWVAR 2
35953: PPUSH
35954: CALL_OW 235
// end ;
35958: PPOPN 2
35960: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35961: LD_EXP 67
35965: PUSH
35966: LD_EXP 100
35970: AND
35971: IFFALSE 36077
35973: GO 35975
35975: DISABLE
35976: LD_INT 0
35978: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35979: LD_ADDR_VAR 0 1
35983: PUSH
35984: LD_INT 22
35986: PUSH
35987: LD_OWVAR 2
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 30
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 30
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PPUSH
36028: CALL_OW 69
36032: ST_TO_ADDR
// if not depot then
36033: LD_VAR 0 1
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36077
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36042: LD_VAR 0 1
36046: PUSH
36047: LD_INT 1
36049: ARRAY
36050: PPUSH
36051: CALL_OW 250
36055: PPUSH
36056: LD_VAR 0 1
36060: PUSH
36061: LD_INT 1
36063: ARRAY
36064: PPUSH
36065: CALL_OW 251
36069: PPUSH
36070: LD_INT 70
36072: PPUSH
36073: CALL_OW 495
// end ;
36077: PPOPN 1
36079: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36080: LD_EXP 67
36084: PUSH
36085: LD_EXP 101
36089: AND
36090: IFFALSE 36301
36092: GO 36094
36094: DISABLE
36095: LD_INT 0
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36102: LD_ADDR_VAR 0 5
36106: PUSH
36107: LD_INT 22
36109: PUSH
36110: LD_OWVAR 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 21
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PPUSH
36133: CALL_OW 69
36137: ST_TO_ADDR
// if not tmp then
36138: LD_VAR 0 5
36142: NOT
36143: IFFALSE 36147
// exit ;
36145: GO 36301
// for i in tmp do
36147: LD_ADDR_VAR 0 1
36151: PUSH
36152: LD_VAR 0 5
36156: PUSH
36157: FOR_IN
36158: IFFALSE 36299
// begin d := rand ( 0 , 5 ) ;
36160: LD_ADDR_VAR 0 4
36164: PUSH
36165: LD_INT 0
36167: PPUSH
36168: LD_INT 5
36170: PPUSH
36171: CALL_OW 12
36175: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36176: LD_ADDR_VAR 0 2
36180: PUSH
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL_OW 250
36190: PPUSH
36191: LD_VAR 0 4
36195: PPUSH
36196: LD_INT 3
36198: PPUSH
36199: LD_INT 12
36201: PPUSH
36202: CALL_OW 12
36206: PPUSH
36207: CALL_OW 272
36211: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36212: LD_ADDR_VAR 0 3
36216: PUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 251
36226: PPUSH
36227: LD_VAR 0 4
36231: PPUSH
36232: LD_INT 3
36234: PPUSH
36235: LD_INT 12
36237: PPUSH
36238: CALL_OW 12
36242: PPUSH
36243: CALL_OW 273
36247: ST_TO_ADDR
// if ValidHex ( x , y ) then
36248: LD_VAR 0 2
36252: PPUSH
36253: LD_VAR 0 3
36257: PPUSH
36258: CALL_OW 488
36262: IFFALSE 36297
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36264: LD_VAR 0 1
36268: PPUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: LD_VAR 0 3
36278: PPUSH
36279: LD_INT 3
36281: PPUSH
36282: LD_INT 6
36284: PPUSH
36285: CALL_OW 12
36289: PPUSH
36290: LD_INT 1
36292: PPUSH
36293: CALL_OW 483
// end ;
36297: GO 36157
36299: POP
36300: POP
// end ;
36301: PPOPN 5
36303: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36304: LD_EXP 67
36308: PUSH
36309: LD_EXP 102
36313: AND
36314: IFFALSE 36408
36316: GO 36318
36318: DISABLE
36319: LD_INT 0
36321: PPUSH
36322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36323: LD_ADDR_VAR 0 2
36327: PUSH
36328: LD_INT 22
36330: PUSH
36331: LD_OWVAR 2
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 32
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 21
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: PPUSH
36365: CALL_OW 69
36369: ST_TO_ADDR
// if not tmp then
36370: LD_VAR 0 2
36374: NOT
36375: IFFALSE 36379
// exit ;
36377: GO 36408
// for i in tmp do
36379: LD_ADDR_VAR 0 1
36383: PUSH
36384: LD_VAR 0 2
36388: PUSH
36389: FOR_IN
36390: IFFALSE 36406
// SetFuel ( i , 0 ) ;
36392: LD_VAR 0 1
36396: PPUSH
36397: LD_INT 0
36399: PPUSH
36400: CALL_OW 240
36404: GO 36389
36406: POP
36407: POP
// end ;
36408: PPOPN 2
36410: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36411: LD_EXP 67
36415: PUSH
36416: LD_EXP 103
36420: AND
36421: IFFALSE 36487
36423: GO 36425
36425: DISABLE
36426: LD_INT 0
36428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36429: LD_ADDR_VAR 0 1
36433: PUSH
36434: LD_INT 22
36436: PUSH
36437: LD_OWVAR 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 30
36448: PUSH
36449: LD_INT 29
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PPUSH
36460: CALL_OW 69
36464: ST_TO_ADDR
// if not tmp then
36465: LD_VAR 0 1
36469: NOT
36470: IFFALSE 36474
// exit ;
36472: GO 36487
// DestroyUnit ( tmp [ 1 ] ) ;
36474: LD_VAR 0 1
36478: PUSH
36479: LD_INT 1
36481: ARRAY
36482: PPUSH
36483: CALL_OW 65
// end ;
36487: PPOPN 1
36489: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36490: LD_EXP 67
36494: PUSH
36495: LD_EXP 105
36499: AND
36500: IFFALSE 36629
36502: GO 36504
36504: DISABLE
36505: LD_INT 0
36507: PPUSH
// begin uc_side := 0 ;
36508: LD_ADDR_OWVAR 20
36512: PUSH
36513: LD_INT 0
36515: ST_TO_ADDR
// uc_nation := nation_arabian ;
36516: LD_ADDR_OWVAR 21
36520: PUSH
36521: LD_INT 2
36523: ST_TO_ADDR
// hc_gallery :=  ;
36524: LD_ADDR_OWVAR 33
36528: PUSH
36529: LD_STRING 
36531: ST_TO_ADDR
// hc_name :=  ;
36532: LD_ADDR_OWVAR 26
36536: PUSH
36537: LD_STRING 
36539: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36540: LD_INT 1
36542: PPUSH
36543: LD_INT 11
36545: PPUSH
36546: LD_INT 10
36548: PPUSH
36549: CALL_OW 380
// un := CreateHuman ;
36553: LD_ADDR_VAR 0 1
36557: PUSH
36558: CALL_OW 44
36562: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36563: LD_VAR 0 1
36567: PPUSH
36568: LD_INT 1
36570: PPUSH
36571: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36575: LD_INT 35
36577: PPUSH
36578: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36582: LD_VAR 0 1
36586: PPUSH
36587: LD_INT 22
36589: PUSH
36590: LD_OWVAR 2
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PPUSH
36599: CALL_OW 69
36603: PPUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 74
36613: PPUSH
36614: CALL_OW 115
// until IsDead ( un ) ;
36618: LD_VAR 0 1
36622: PPUSH
36623: CALL_OW 301
36627: IFFALSE 36575
// end ;
36629: PPOPN 1
36631: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36632: LD_EXP 67
36636: PUSH
36637: LD_EXP 107
36641: AND
36642: IFFALSE 36654
36644: GO 36646
36646: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36647: LD_STRING earthquake(getX(game), 0, 32)
36649: PPUSH
36650: CALL_OW 559
36654: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36655: LD_EXP 67
36659: PUSH
36660: LD_EXP 108
36664: AND
36665: IFFALSE 36756
36667: GO 36669
36669: DISABLE
36670: LD_INT 0
36672: PPUSH
// begin enable ;
36673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36674: LD_ADDR_VAR 0 1
36678: PUSH
36679: LD_INT 22
36681: PUSH
36682: LD_OWVAR 2
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 21
36693: PUSH
36694: LD_INT 2
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 33
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: PPUSH
36716: CALL_OW 69
36720: ST_TO_ADDR
// if not tmp then
36721: LD_VAR 0 1
36725: NOT
36726: IFFALSE 36730
// exit ;
36728: GO 36756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36730: LD_VAR 0 1
36734: PUSH
36735: LD_INT 1
36737: PPUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: CALL_OW 12
36747: ARRAY
36748: PPUSH
36749: LD_INT 1
36751: PPUSH
36752: CALL_OW 234
// end ;
36756: PPOPN 1
36758: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36759: LD_EXP 67
36763: PUSH
36764: LD_EXP 109
36768: AND
36769: IFFALSE 36910
36771: GO 36773
36773: DISABLE
36774: LD_INT 0
36776: PPUSH
36777: PPUSH
36778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: LD_INT 22
36786: PUSH
36787: LD_OWVAR 2
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 25
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PPUSH
36810: CALL_OW 69
36814: ST_TO_ADDR
// if not tmp then
36815: LD_VAR 0 3
36819: NOT
36820: IFFALSE 36824
// exit ;
36822: GO 36910
// un := tmp [ rand ( 1 , tmp ) ] ;
36824: LD_ADDR_VAR 0 2
36828: PUSH
36829: LD_VAR 0 3
36833: PUSH
36834: LD_INT 1
36836: PPUSH
36837: LD_VAR 0 3
36841: PPUSH
36842: CALL_OW 12
36846: ARRAY
36847: ST_TO_ADDR
// if Crawls ( un ) then
36848: LD_VAR 0 2
36852: PPUSH
36853: CALL_OW 318
36857: IFFALSE 36868
// ComWalk ( un ) ;
36859: LD_VAR 0 2
36863: PPUSH
36864: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36868: LD_VAR 0 2
36872: PPUSH
36873: LD_INT 9
36875: PPUSH
36876: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36880: LD_INT 28
36882: PPUSH
36883: LD_OWVAR 2
36887: PPUSH
36888: LD_INT 2
36890: PPUSH
36891: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36895: LD_INT 29
36897: PPUSH
36898: LD_OWVAR 2
36902: PPUSH
36903: LD_INT 2
36905: PPUSH
36906: CALL_OW 322
// end ;
36910: PPOPN 3
36912: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36913: LD_EXP 67
36917: PUSH
36918: LD_EXP 110
36922: AND
36923: IFFALSE 37034
36925: GO 36927
36927: DISABLE
36928: LD_INT 0
36930: PPUSH
36931: PPUSH
36932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36933: LD_ADDR_VAR 0 3
36937: PUSH
36938: LD_INT 22
36940: PUSH
36941: LD_OWVAR 2
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 25
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PPUSH
36964: CALL_OW 69
36968: ST_TO_ADDR
// if not tmp then
36969: LD_VAR 0 3
36973: NOT
36974: IFFALSE 36978
// exit ;
36976: GO 37034
// un := tmp [ rand ( 1 , tmp ) ] ;
36978: LD_ADDR_VAR 0 2
36982: PUSH
36983: LD_VAR 0 3
36987: PUSH
36988: LD_INT 1
36990: PPUSH
36991: LD_VAR 0 3
36995: PPUSH
36996: CALL_OW 12
37000: ARRAY
37001: ST_TO_ADDR
// if Crawls ( un ) then
37002: LD_VAR 0 2
37006: PPUSH
37007: CALL_OW 318
37011: IFFALSE 37022
// ComWalk ( un ) ;
37013: LD_VAR 0 2
37017: PPUSH
37018: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37022: LD_VAR 0 2
37026: PPUSH
37027: LD_INT 8
37029: PPUSH
37030: CALL_OW 336
// end ;
37034: PPOPN 3
37036: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37037: LD_EXP 67
37041: PUSH
37042: LD_EXP 111
37046: AND
37047: IFFALSE 37191
37049: GO 37051
37051: DISABLE
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37056: LD_ADDR_VAR 0 2
37060: PUSH
37061: LD_INT 22
37063: PUSH
37064: LD_OWVAR 2
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 21
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: LD_INT 34
37088: PUSH
37089: LD_INT 12
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 34
37098: PUSH
37099: LD_INT 51
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 34
37108: PUSH
37109: LD_INT 32
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: PPUSH
37127: CALL_OW 69
37131: ST_TO_ADDR
// if not tmp then
37132: LD_VAR 0 2
37136: NOT
37137: IFFALSE 37141
// exit ;
37139: GO 37191
// for i in tmp do
37141: LD_ADDR_VAR 0 1
37145: PUSH
37146: LD_VAR 0 2
37150: PUSH
37151: FOR_IN
37152: IFFALSE 37189
// if GetCargo ( i , mat_artifact ) = 0 then
37154: LD_VAR 0 1
37158: PPUSH
37159: LD_INT 4
37161: PPUSH
37162: CALL_OW 289
37166: PUSH
37167: LD_INT 0
37169: EQUAL
37170: IFFALSE 37187
// SetCargo ( i , mat_siberit , 100 ) ;
37172: LD_VAR 0 1
37176: PPUSH
37177: LD_INT 3
37179: PPUSH
37180: LD_INT 100
37182: PPUSH
37183: CALL_OW 290
37187: GO 37151
37189: POP
37190: POP
// end ;
37191: PPOPN 2
37193: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37194: LD_EXP 67
37198: PUSH
37199: LD_EXP 112
37203: AND
37204: IFFALSE 37387
37206: GO 37208
37208: DISABLE
37209: LD_INT 0
37211: PPUSH
37212: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37213: LD_ADDR_VAR 0 2
37217: PUSH
37218: LD_INT 22
37220: PUSH
37221: LD_OWVAR 2
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PPUSH
37230: CALL_OW 69
37234: ST_TO_ADDR
// if not tmp then
37235: LD_VAR 0 2
37239: NOT
37240: IFFALSE 37244
// exit ;
37242: GO 37387
// for i := 1 to 2 do
37244: LD_ADDR_VAR 0 1
37248: PUSH
37249: DOUBLE
37250: LD_INT 1
37252: DEC
37253: ST_TO_ADDR
37254: LD_INT 2
37256: PUSH
37257: FOR_TO
37258: IFFALSE 37385
// begin uc_side := your_side ;
37260: LD_ADDR_OWVAR 20
37264: PUSH
37265: LD_OWVAR 2
37269: ST_TO_ADDR
// uc_nation := nation_american ;
37270: LD_ADDR_OWVAR 21
37274: PUSH
37275: LD_INT 1
37277: ST_TO_ADDR
// vc_chassis := us_morphling ;
37278: LD_ADDR_OWVAR 37
37282: PUSH
37283: LD_INT 5
37285: ST_TO_ADDR
// vc_engine := engine_siberite ;
37286: LD_ADDR_OWVAR 39
37290: PUSH
37291: LD_INT 3
37293: ST_TO_ADDR
// vc_control := control_computer ;
37294: LD_ADDR_OWVAR 38
37298: PUSH
37299: LD_INT 3
37301: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37302: LD_ADDR_OWVAR 40
37306: PUSH
37307: LD_INT 10
37309: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37310: LD_VAR 0 2
37314: PUSH
37315: LD_INT 1
37317: ARRAY
37318: PPUSH
37319: CALL_OW 310
37323: NOT
37324: IFFALSE 37371
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37326: CALL_OW 45
37330: PPUSH
37331: LD_VAR 0 2
37335: PUSH
37336: LD_INT 1
37338: ARRAY
37339: PPUSH
37340: CALL_OW 250
37344: PPUSH
37345: LD_VAR 0 2
37349: PUSH
37350: LD_INT 1
37352: ARRAY
37353: PPUSH
37354: CALL_OW 251
37358: PPUSH
37359: LD_INT 12
37361: PPUSH
37362: LD_INT 1
37364: PPUSH
37365: CALL_OW 50
37369: GO 37383
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37371: CALL_OW 45
37375: PPUSH
37376: LD_INT 1
37378: PPUSH
37379: CALL_OW 51
// end ;
37383: GO 37257
37385: POP
37386: POP
// end ;
37387: PPOPN 2
37389: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37390: LD_EXP 67
37394: PUSH
37395: LD_EXP 113
37399: AND
37400: IFFALSE 37622
37402: GO 37404
37404: DISABLE
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37413: LD_ADDR_VAR 0 6
37417: PUSH
37418: LD_INT 22
37420: PUSH
37421: LD_OWVAR 2
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 21
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: LD_INT 23
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: PPUSH
37462: CALL_OW 69
37466: ST_TO_ADDR
// if not tmp then
37467: LD_VAR 0 6
37471: NOT
37472: IFFALSE 37476
// exit ;
37474: GO 37622
// s1 := rand ( 1 , 4 ) ;
37476: LD_ADDR_VAR 0 2
37480: PUSH
37481: LD_INT 1
37483: PPUSH
37484: LD_INT 4
37486: PPUSH
37487: CALL_OW 12
37491: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37492: LD_ADDR_VAR 0 4
37496: PUSH
37497: LD_VAR 0 6
37501: PUSH
37502: LD_INT 1
37504: ARRAY
37505: PPUSH
37506: LD_VAR 0 2
37510: PPUSH
37511: CALL_OW 259
37515: ST_TO_ADDR
// if s1 = 1 then
37516: LD_VAR 0 2
37520: PUSH
37521: LD_INT 1
37523: EQUAL
37524: IFFALSE 37544
// s2 := rand ( 2 , 4 ) else
37526: LD_ADDR_VAR 0 3
37530: PUSH
37531: LD_INT 2
37533: PPUSH
37534: LD_INT 4
37536: PPUSH
37537: CALL_OW 12
37541: ST_TO_ADDR
37542: GO 37552
// s2 := 1 ;
37544: LD_ADDR_VAR 0 3
37548: PUSH
37549: LD_INT 1
37551: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37552: LD_ADDR_VAR 0 5
37556: PUSH
37557: LD_VAR 0 6
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: PPUSH
37566: LD_VAR 0 3
37570: PPUSH
37571: CALL_OW 259
37575: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37576: LD_VAR 0 6
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PPUSH
37585: LD_VAR 0 2
37589: PPUSH
37590: LD_VAR 0 5
37594: PPUSH
37595: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37599: LD_VAR 0 6
37603: PUSH
37604: LD_INT 1
37606: ARRAY
37607: PPUSH
37608: LD_VAR 0 3
37612: PPUSH
37613: LD_VAR 0 4
37617: PPUSH
37618: CALL_OW 237
// end ;
37622: PPOPN 6
37624: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37625: LD_EXP 67
37629: PUSH
37630: LD_EXP 114
37634: AND
37635: IFFALSE 37714
37637: GO 37639
37639: DISABLE
37640: LD_INT 0
37642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37643: LD_ADDR_VAR 0 1
37647: PUSH
37648: LD_INT 22
37650: PUSH
37651: LD_OWVAR 2
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 30
37662: PUSH
37663: LD_INT 3
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PPUSH
37674: CALL_OW 69
37678: ST_TO_ADDR
// if not tmp then
37679: LD_VAR 0 1
37683: NOT
37684: IFFALSE 37688
// exit ;
37686: GO 37714
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37688: LD_VAR 0 1
37692: PUSH
37693: LD_INT 1
37695: PPUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL_OW 12
37705: ARRAY
37706: PPUSH
37707: LD_INT 1
37709: PPUSH
37710: CALL_OW 234
// end ;
37714: PPOPN 1
37716: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37717: LD_EXP 67
37721: PUSH
37722: LD_EXP 115
37726: AND
37727: IFFALSE 37839
37729: GO 37731
37731: DISABLE
37732: LD_INT 0
37734: PPUSH
37735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37736: LD_ADDR_VAR 0 2
37740: PUSH
37741: LD_INT 22
37743: PUSH
37744: LD_OWVAR 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: LD_INT 30
37758: PUSH
37759: LD_INT 27
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 30
37768: PUSH
37769: LD_INT 26
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 30
37778: PUSH
37779: LD_INT 28
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PPUSH
37796: CALL_OW 69
37800: ST_TO_ADDR
// if not tmp then
37801: LD_VAR 0 2
37805: NOT
37806: IFFALSE 37810
// exit ;
37808: GO 37839
// for i in tmp do
37810: LD_ADDR_VAR 0 1
37814: PUSH
37815: LD_VAR 0 2
37819: PUSH
37820: FOR_IN
37821: IFFALSE 37837
// SetLives ( i , 1 ) ;
37823: LD_VAR 0 1
37827: PPUSH
37828: LD_INT 1
37830: PPUSH
37831: CALL_OW 234
37835: GO 37820
37837: POP
37838: POP
// end ;
37839: PPOPN 2
37841: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37842: LD_EXP 67
37846: PUSH
37847: LD_EXP 116
37851: AND
37852: IFFALSE 38139
37854: GO 37856
37856: DISABLE
37857: LD_INT 0
37859: PPUSH
37860: PPUSH
37861: PPUSH
// begin i := rand ( 1 , 7 ) ;
37862: LD_ADDR_VAR 0 1
37866: PUSH
37867: LD_INT 1
37869: PPUSH
37870: LD_INT 7
37872: PPUSH
37873: CALL_OW 12
37877: ST_TO_ADDR
// case i of 1 :
37878: LD_VAR 0 1
37882: PUSH
37883: LD_INT 1
37885: DOUBLE
37886: EQUAL
37887: IFTRUE 37891
37889: GO 37901
37891: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37892: LD_STRING earthquake(getX(game), 0, 32)
37894: PPUSH
37895: CALL_OW 559
37899: GO 38139
37901: LD_INT 2
37903: DOUBLE
37904: EQUAL
37905: IFTRUE 37909
37907: GO 37923
37909: POP
// begin ToLua ( displayStucuk(); ) ;
37910: LD_STRING displayStucuk();
37912: PPUSH
37913: CALL_OW 559
// ResetFog ;
37917: CALL_OW 335
// end ; 3 :
37921: GO 38139
37923: LD_INT 3
37925: DOUBLE
37926: EQUAL
37927: IFTRUE 37931
37929: GO 38035
37931: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37932: LD_ADDR_VAR 0 2
37936: PUSH
37937: LD_INT 22
37939: PUSH
37940: LD_OWVAR 2
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 25
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PPUSH
37963: CALL_OW 69
37967: ST_TO_ADDR
// if not tmp then
37968: LD_VAR 0 2
37972: NOT
37973: IFFALSE 37977
// exit ;
37975: GO 38139
// un := tmp [ rand ( 1 , tmp ) ] ;
37977: LD_ADDR_VAR 0 3
37981: PUSH
37982: LD_VAR 0 2
37986: PUSH
37987: LD_INT 1
37989: PPUSH
37990: LD_VAR 0 2
37994: PPUSH
37995: CALL_OW 12
37999: ARRAY
38000: ST_TO_ADDR
// if Crawls ( un ) then
38001: LD_VAR 0 3
38005: PPUSH
38006: CALL_OW 318
38010: IFFALSE 38021
// ComWalk ( un ) ;
38012: LD_VAR 0 3
38016: PPUSH
38017: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38021: LD_VAR 0 3
38025: PPUSH
38026: LD_INT 8
38028: PPUSH
38029: CALL_OW 336
// end ; 4 :
38033: GO 38139
38035: LD_INT 4
38037: DOUBLE
38038: EQUAL
38039: IFTRUE 38043
38041: GO 38117
38043: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38044: LD_ADDR_VAR 0 2
38048: PUSH
38049: LD_INT 22
38051: PUSH
38052: LD_OWVAR 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 30
38063: PUSH
38064: LD_INT 29
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PPUSH
38075: CALL_OW 69
38079: ST_TO_ADDR
// if not tmp then
38080: LD_VAR 0 2
38084: NOT
38085: IFFALSE 38089
// exit ;
38087: GO 38139
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38089: LD_VAR 0 2
38093: PUSH
38094: LD_INT 1
38096: ARRAY
38097: PPUSH
38098: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38102: LD_VAR 0 2
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: PPUSH
38111: CALL_OW 65
// end ; 5 .. 7 :
38115: GO 38139
38117: LD_INT 5
38119: DOUBLE
38120: GREATEREQUAL
38121: IFFALSE 38129
38123: LD_INT 7
38125: DOUBLE
38126: LESSEQUAL
38127: IFTRUE 38131
38129: GO 38138
38131: POP
// StreamSibBomb ; end ;
38132: CALL 34376 0 0
38136: GO 38139
38138: POP
// end ;
38139: PPOPN 3
38141: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38142: LD_EXP 67
38146: PUSH
38147: LD_EXP 117
38151: AND
38152: IFFALSE 38308
38154: GO 38156
38156: DISABLE
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
38161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38162: LD_ADDR_VAR 0 2
38166: PUSH
38167: LD_INT 81
38169: PUSH
38170: LD_OWVAR 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: LD_INT 21
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 21
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PPUSH
38211: CALL_OW 69
38215: ST_TO_ADDR
// if not tmp then
38216: LD_VAR 0 2
38220: NOT
38221: IFFALSE 38225
// exit ;
38223: GO 38308
// p := 0 ;
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: LD_INT 0
38232: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38233: LD_INT 35
38235: PPUSH
38236: CALL_OW 67
// p := p + 1 ;
38240: LD_ADDR_VAR 0 3
38244: PUSH
38245: LD_VAR 0 3
38249: PUSH
38250: LD_INT 1
38252: PLUS
38253: ST_TO_ADDR
// for i in tmp do
38254: LD_ADDR_VAR 0 1
38258: PUSH
38259: LD_VAR 0 2
38263: PUSH
38264: FOR_IN
38265: IFFALSE 38296
// if GetLives ( i ) < 1000 then
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 256
38276: PUSH
38277: LD_INT 1000
38279: LESS
38280: IFFALSE 38294
// SetLives ( i , 1000 ) ;
38282: LD_VAR 0 1
38286: PPUSH
38287: LD_INT 1000
38289: PPUSH
38290: CALL_OW 234
38294: GO 38264
38296: POP
38297: POP
// until p > 20 ;
38298: LD_VAR 0 3
38302: PUSH
38303: LD_INT 20
38305: GREATER
38306: IFFALSE 38233
// end ;
38308: PPOPN 3
38310: END
// every 0 0$1 trigger StreamModeActive and sTime do
38311: LD_EXP 67
38315: PUSH
38316: LD_EXP 118
38320: AND
38321: IFFALSE 38356
38323: GO 38325
38325: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38326: LD_INT 28
38328: PPUSH
38329: LD_OWVAR 2
38333: PPUSH
38334: LD_INT 2
38336: PPUSH
38337: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38341: LD_INT 30
38343: PPUSH
38344: LD_OWVAR 2
38348: PPUSH
38349: LD_INT 2
38351: PPUSH
38352: CALL_OW 322
// end ;
38356: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38357: LD_EXP 67
38361: PUSH
38362: LD_EXP 119
38366: AND
38367: IFFALSE 38488
38369: GO 38371
38371: DISABLE
38372: LD_INT 0
38374: PPUSH
38375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38376: LD_ADDR_VAR 0 2
38380: PUSH
38381: LD_INT 22
38383: PUSH
38384: LD_OWVAR 2
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 21
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 3
38405: PUSH
38406: LD_INT 23
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: PPUSH
38425: CALL_OW 69
38429: ST_TO_ADDR
// if not tmp then
38430: LD_VAR 0 2
38434: NOT
38435: IFFALSE 38439
// exit ;
38437: GO 38488
// for i in tmp do
38439: LD_ADDR_VAR 0 1
38443: PUSH
38444: LD_VAR 0 2
38448: PUSH
38449: FOR_IN
38450: IFFALSE 38486
// begin if Crawls ( i ) then
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 318
38461: IFFALSE 38472
// ComWalk ( i ) ;
38463: LD_VAR 0 1
38467: PPUSH
38468: CALL_OW 138
// SetClass ( i , 2 ) ;
38472: LD_VAR 0 1
38476: PPUSH
38477: LD_INT 2
38479: PPUSH
38480: CALL_OW 336
// end ;
38484: GO 38449
38486: POP
38487: POP
// end ;
38488: PPOPN 2
38490: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38491: LD_EXP 67
38495: PUSH
38496: LD_EXP 120
38500: AND
38501: IFFALSE 38789
38503: GO 38505
38505: DISABLE
38506: LD_INT 0
38508: PPUSH
38509: PPUSH
38510: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38511: LD_OWVAR 2
38515: PPUSH
38516: LD_INT 9
38518: PPUSH
38519: LD_INT 1
38521: PPUSH
38522: LD_INT 1
38524: PPUSH
38525: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38529: LD_INT 9
38531: PPUSH
38532: LD_OWVAR 2
38536: PPUSH
38537: CALL_OW 343
// uc_side := 9 ;
38541: LD_ADDR_OWVAR 20
38545: PUSH
38546: LD_INT 9
38548: ST_TO_ADDR
// uc_nation := 2 ;
38549: LD_ADDR_OWVAR 21
38553: PUSH
38554: LD_INT 2
38556: ST_TO_ADDR
// hc_name := Dark Warrior ;
38557: LD_ADDR_OWVAR 26
38561: PUSH
38562: LD_STRING Dark Warrior
38564: ST_TO_ADDR
// hc_gallery :=  ;
38565: LD_ADDR_OWVAR 33
38569: PUSH
38570: LD_STRING 
38572: ST_TO_ADDR
// hc_noskilllimit := true ;
38573: LD_ADDR_OWVAR 76
38577: PUSH
38578: LD_INT 1
38580: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38581: LD_ADDR_OWVAR 31
38585: PUSH
38586: LD_INT 30
38588: PUSH
38589: LD_INT 30
38591: PUSH
38592: LD_INT 30
38594: PUSH
38595: LD_INT 30
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: ST_TO_ADDR
// un := CreateHuman ;
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: CALL_OW 44
38613: ST_TO_ADDR
// hc_noskilllimit := false ;
38614: LD_ADDR_OWVAR 76
38618: PUSH
38619: LD_INT 0
38621: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38622: LD_VAR 0 3
38626: PPUSH
38627: LD_INT 1
38629: PPUSH
38630: CALL_OW 51
// ToLua ( playRanger() ) ;
38634: LD_STRING playRanger()
38636: PPUSH
38637: CALL_OW 559
// p := 0 ;
38641: LD_ADDR_VAR 0 2
38645: PUSH
38646: LD_INT 0
38648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38649: LD_INT 35
38651: PPUSH
38652: CALL_OW 67
// p := p + 1 ;
38656: LD_ADDR_VAR 0 2
38660: PUSH
38661: LD_VAR 0 2
38665: PUSH
38666: LD_INT 1
38668: PLUS
38669: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38670: LD_VAR 0 3
38674: PPUSH
38675: CALL_OW 256
38679: PUSH
38680: LD_INT 1000
38682: LESS
38683: IFFALSE 38697
// SetLives ( un , 1000 ) ;
38685: LD_VAR 0 3
38689: PPUSH
38690: LD_INT 1000
38692: PPUSH
38693: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38697: LD_VAR 0 3
38701: PPUSH
38702: LD_INT 81
38704: PUSH
38705: LD_OWVAR 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 91
38716: PUSH
38717: LD_VAR 0 3
38721: PUSH
38722: LD_INT 30
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PPUSH
38734: CALL_OW 69
38738: PPUSH
38739: LD_VAR 0 3
38743: PPUSH
38744: CALL_OW 74
38748: PPUSH
38749: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
38753: LD_VAR 0 2
38757: PUSH
38758: LD_INT 80
38760: GREATER
38761: PUSH
38762: LD_VAR 0 3
38766: PPUSH
38767: CALL_OW 301
38771: OR
38772: IFFALSE 38649
// if un then
38774: LD_VAR 0 3
38778: IFFALSE 38789
// RemoveUnit ( un ) ;
38780: LD_VAR 0 3
38784: PPUSH
38785: CALL_OW 64
// end ;
38789: PPOPN 3
38791: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
38792: LD_EXP 121
38796: IFFALSE 38912
38798: GO 38800
38800: DISABLE
38801: LD_INT 0
38803: PPUSH
38804: PPUSH
38805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
38806: LD_ADDR_VAR 0 2
38810: PUSH
38811: LD_INT 81
38813: PUSH
38814: LD_OWVAR 2
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 21
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PPUSH
38837: CALL_OW 69
38841: ST_TO_ADDR
// ToLua ( playComputer() ) ;
38842: LD_STRING playComputer()
38844: PPUSH
38845: CALL_OW 559
// if not tmp then
38849: LD_VAR 0 2
38853: NOT
38854: IFFALSE 38858
// exit ;
38856: GO 38912
// for i in tmp do
38858: LD_ADDR_VAR 0 1
38862: PUSH
38863: LD_VAR 0 2
38867: PUSH
38868: FOR_IN
38869: IFFALSE 38910
// for j := 1 to 4 do
38871: LD_ADDR_VAR 0 3
38875: PUSH
38876: DOUBLE
38877: LD_INT 1
38879: DEC
38880: ST_TO_ADDR
38881: LD_INT 4
38883: PUSH
38884: FOR_TO
38885: IFFALSE 38906
// SetSkill ( i , j , 10 ) ;
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_VAR 0 3
38896: PPUSH
38897: LD_INT 10
38899: PPUSH
38900: CALL_OW 237
38904: GO 38884
38906: POP
38907: POP
38908: GO 38868
38910: POP
38911: POP
// end ;
38912: PPOPN 3
38914: END
// every 0 0$1 trigger s30 do var i , tmp ;
38915: LD_EXP 122
38919: IFFALSE 38988
38921: GO 38923
38923: DISABLE
38924: LD_INT 0
38926: PPUSH
38927: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38928: LD_ADDR_VAR 0 2
38932: PUSH
38933: LD_INT 22
38935: PUSH
38936: LD_OWVAR 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PPUSH
38945: CALL_OW 69
38949: ST_TO_ADDR
// if not tmp then
38950: LD_VAR 0 2
38954: NOT
38955: IFFALSE 38959
// exit ;
38957: GO 38988
// for i in tmp do
38959: LD_ADDR_VAR 0 1
38963: PUSH
38964: LD_VAR 0 2
38968: PUSH
38969: FOR_IN
38970: IFFALSE 38986
// SetLives ( i , 300 ) ;
38972: LD_VAR 0 1
38976: PPUSH
38977: LD_INT 300
38979: PPUSH
38980: CALL_OW 234
38984: GO 38969
38986: POP
38987: POP
// end ;
38988: PPOPN 2
38990: END
// every 0 0$1 trigger s60 do var i , tmp ;
38991: LD_EXP 123
38995: IFFALSE 39064
38997: GO 38999
38999: DISABLE
39000: LD_INT 0
39002: PPUSH
39003: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39004: LD_ADDR_VAR 0 2
39008: PUSH
39009: LD_INT 22
39011: PUSH
39012: LD_OWVAR 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PPUSH
39021: CALL_OW 69
39025: ST_TO_ADDR
// if not tmp then
39026: LD_VAR 0 2
39030: NOT
39031: IFFALSE 39035
// exit ;
39033: GO 39064
// for i in tmp do
39035: LD_ADDR_VAR 0 1
39039: PUSH
39040: LD_VAR 0 2
39044: PUSH
39045: FOR_IN
39046: IFFALSE 39062
// SetLives ( i , 600 ) ;
39048: LD_VAR 0 1
39052: PPUSH
39053: LD_INT 600
39055: PPUSH
39056: CALL_OW 234
39060: GO 39045
39062: POP
39063: POP
// end ;
39064: PPOPN 2
39066: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39067: LD_INT 0
39069: PPUSH
// case cmd of 301 :
39070: LD_VAR 0 1
39074: PUSH
39075: LD_INT 301
39077: DOUBLE
39078: EQUAL
39079: IFTRUE 39083
39081: GO 39115
39083: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39084: LD_VAR 0 6
39088: PPUSH
39089: LD_VAR 0 7
39093: PPUSH
39094: LD_VAR 0 8
39098: PPUSH
39099: LD_VAR 0 4
39103: PPUSH
39104: LD_VAR 0 5
39108: PPUSH
39109: CALL 40316 0 5
39113: GO 39236
39115: LD_INT 302
39117: DOUBLE
39118: EQUAL
39119: IFTRUE 39123
39121: GO 39160
39123: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39124: LD_VAR 0 6
39128: PPUSH
39129: LD_VAR 0 7
39133: PPUSH
39134: LD_VAR 0 8
39138: PPUSH
39139: LD_VAR 0 9
39143: PPUSH
39144: LD_VAR 0 4
39148: PPUSH
39149: LD_VAR 0 5
39153: PPUSH
39154: CALL 40407 0 6
39158: GO 39236
39160: LD_INT 303
39162: DOUBLE
39163: EQUAL
39164: IFTRUE 39168
39166: GO 39205
39168: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39169: LD_VAR 0 6
39173: PPUSH
39174: LD_VAR 0 7
39178: PPUSH
39179: LD_VAR 0 8
39183: PPUSH
39184: LD_VAR 0 9
39188: PPUSH
39189: LD_VAR 0 4
39193: PPUSH
39194: LD_VAR 0 5
39198: PPUSH
39199: CALL 39241 0 6
39203: GO 39236
39205: LD_INT 304
39207: DOUBLE
39208: EQUAL
39209: IFTRUE 39213
39211: GO 39235
39213: POP
// hHackTeleport ( unit , x , y ) ; end ;
39214: LD_VAR 0 2
39218: PPUSH
39219: LD_VAR 0 4
39223: PPUSH
39224: LD_VAR 0 5
39228: PPUSH
39229: CALL 41000 0 3
39233: GO 39236
39235: POP
// end ;
39236: LD_VAR 0 12
39240: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39245: LD_VAR 0 1
39249: PUSH
39250: LD_INT 1
39252: LESS
39253: PUSH
39254: LD_VAR 0 1
39258: PUSH
39259: LD_INT 3
39261: GREATER
39262: OR
39263: PUSH
39264: LD_VAR 0 5
39268: PPUSH
39269: LD_VAR 0 6
39273: PPUSH
39274: CALL_OW 428
39278: OR
39279: IFFALSE 39283
// exit ;
39281: GO 40003
// uc_side := your_side ;
39283: LD_ADDR_OWVAR 20
39287: PUSH
39288: LD_OWVAR 2
39292: ST_TO_ADDR
// uc_nation := nation ;
39293: LD_ADDR_OWVAR 21
39297: PUSH
39298: LD_VAR 0 1
39302: ST_TO_ADDR
// bc_level = 1 ;
39303: LD_ADDR_OWVAR 43
39307: PUSH
39308: LD_INT 1
39310: ST_TO_ADDR
// case btype of 1 :
39311: LD_VAR 0 2
39315: PUSH
39316: LD_INT 1
39318: DOUBLE
39319: EQUAL
39320: IFTRUE 39324
39322: GO 39335
39324: POP
// bc_type := b_depot ; 2 :
39325: LD_ADDR_OWVAR 42
39329: PUSH
39330: LD_INT 0
39332: ST_TO_ADDR
39333: GO 39947
39335: LD_INT 2
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39354
39343: POP
// bc_type := b_warehouse ; 3 :
39344: LD_ADDR_OWVAR 42
39348: PUSH
39349: LD_INT 1
39351: ST_TO_ADDR
39352: GO 39947
39354: LD_INT 3
39356: DOUBLE
39357: EQUAL
39358: IFTRUE 39362
39360: GO 39373
39362: POP
// bc_type := b_lab ; 4 .. 9 :
39363: LD_ADDR_OWVAR 42
39367: PUSH
39368: LD_INT 6
39370: ST_TO_ADDR
39371: GO 39947
39373: LD_INT 4
39375: DOUBLE
39376: GREATEREQUAL
39377: IFFALSE 39385
39379: LD_INT 9
39381: DOUBLE
39382: LESSEQUAL
39383: IFTRUE 39387
39385: GO 39439
39387: POP
// begin bc_type := b_lab_half ;
39388: LD_ADDR_OWVAR 42
39392: PUSH
39393: LD_INT 7
39395: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39396: LD_ADDR_OWVAR 44
39400: PUSH
39401: LD_INT 10
39403: PUSH
39404: LD_INT 11
39406: PUSH
39407: LD_INT 12
39409: PUSH
39410: LD_INT 15
39412: PUSH
39413: LD_INT 14
39415: PUSH
39416: LD_INT 13
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: PUSH
39427: LD_VAR 0 2
39431: PUSH
39432: LD_INT 3
39434: MINUS
39435: ARRAY
39436: ST_TO_ADDR
// end ; 10 .. 13 :
39437: GO 39947
39439: LD_INT 10
39441: DOUBLE
39442: GREATEREQUAL
39443: IFFALSE 39451
39445: LD_INT 13
39447: DOUBLE
39448: LESSEQUAL
39449: IFTRUE 39453
39451: GO 39530
39453: POP
// begin bc_type := b_lab_full ;
39454: LD_ADDR_OWVAR 42
39458: PUSH
39459: LD_INT 8
39461: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
39462: LD_ADDR_OWVAR 44
39466: PUSH
39467: LD_INT 10
39469: PUSH
39470: LD_INT 12
39472: PUSH
39473: LD_INT 14
39475: PUSH
39476: LD_INT 13
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: PUSH
39485: LD_VAR 0 2
39489: PUSH
39490: LD_INT 9
39492: MINUS
39493: ARRAY
39494: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
39495: LD_ADDR_OWVAR 45
39499: PUSH
39500: LD_INT 11
39502: PUSH
39503: LD_INT 15
39505: PUSH
39506: LD_INT 12
39508: PUSH
39509: LD_INT 15
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: PUSH
39518: LD_VAR 0 2
39522: PUSH
39523: LD_INT 9
39525: MINUS
39526: ARRAY
39527: ST_TO_ADDR
// end ; 14 :
39528: GO 39947
39530: LD_INT 14
39532: DOUBLE
39533: EQUAL
39534: IFTRUE 39538
39536: GO 39549
39538: POP
// bc_type := b_workshop ; 15 :
39539: LD_ADDR_OWVAR 42
39543: PUSH
39544: LD_INT 2
39546: ST_TO_ADDR
39547: GO 39947
39549: LD_INT 15
39551: DOUBLE
39552: EQUAL
39553: IFTRUE 39557
39555: GO 39568
39557: POP
// bc_type := b_factory ; 16 :
39558: LD_ADDR_OWVAR 42
39562: PUSH
39563: LD_INT 3
39565: ST_TO_ADDR
39566: GO 39947
39568: LD_INT 16
39570: DOUBLE
39571: EQUAL
39572: IFTRUE 39576
39574: GO 39587
39576: POP
// bc_type := b_ext_gun ; 17 :
39577: LD_ADDR_OWVAR 42
39581: PUSH
39582: LD_INT 17
39584: ST_TO_ADDR
39585: GO 39947
39587: LD_INT 17
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39595
39593: GO 39623
39595: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
39596: LD_ADDR_OWVAR 42
39600: PUSH
39601: LD_INT 19
39603: PUSH
39604: LD_INT 23
39606: PUSH
39607: LD_INT 19
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: PUSH
39615: LD_VAR 0 1
39619: ARRAY
39620: ST_TO_ADDR
39621: GO 39947
39623: LD_INT 18
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39642
39631: POP
// bc_type := b_ext_radar ; 19 :
39632: LD_ADDR_OWVAR 42
39636: PUSH
39637: LD_INT 20
39639: ST_TO_ADDR
39640: GO 39947
39642: LD_INT 19
39644: DOUBLE
39645: EQUAL
39646: IFTRUE 39650
39648: GO 39661
39650: POP
// bc_type := b_ext_radio ; 20 :
39651: LD_ADDR_OWVAR 42
39655: PUSH
39656: LD_INT 22
39658: ST_TO_ADDR
39659: GO 39947
39661: LD_INT 20
39663: DOUBLE
39664: EQUAL
39665: IFTRUE 39669
39667: GO 39680
39669: POP
// bc_type := b_ext_siberium ; 21 :
39670: LD_ADDR_OWVAR 42
39674: PUSH
39675: LD_INT 21
39677: ST_TO_ADDR
39678: GO 39947
39680: LD_INT 21
39682: DOUBLE
39683: EQUAL
39684: IFTRUE 39688
39686: GO 39699
39688: POP
// bc_type := b_ext_computer ; 22 :
39689: LD_ADDR_OWVAR 42
39693: PUSH
39694: LD_INT 24
39696: ST_TO_ADDR
39697: GO 39947
39699: LD_INT 22
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39707
39705: GO 39718
39707: POP
// bc_type := b_ext_track ; 23 :
39708: LD_ADDR_OWVAR 42
39712: PUSH
39713: LD_INT 16
39715: ST_TO_ADDR
39716: GO 39947
39718: LD_INT 23
39720: DOUBLE
39721: EQUAL
39722: IFTRUE 39726
39724: GO 39737
39726: POP
// bc_type := b_ext_laser ; 24 :
39727: LD_ADDR_OWVAR 42
39731: PUSH
39732: LD_INT 25
39734: ST_TO_ADDR
39735: GO 39947
39737: LD_INT 24
39739: DOUBLE
39740: EQUAL
39741: IFTRUE 39745
39743: GO 39756
39745: POP
// bc_type := b_control_tower ; 25 :
39746: LD_ADDR_OWVAR 42
39750: PUSH
39751: LD_INT 36
39753: ST_TO_ADDR
39754: GO 39947
39756: LD_INT 25
39758: DOUBLE
39759: EQUAL
39760: IFTRUE 39764
39762: GO 39775
39764: POP
// bc_type := b_breastwork ; 26 :
39765: LD_ADDR_OWVAR 42
39769: PUSH
39770: LD_INT 31
39772: ST_TO_ADDR
39773: GO 39947
39775: LD_INT 26
39777: DOUBLE
39778: EQUAL
39779: IFTRUE 39783
39781: GO 39794
39783: POP
// bc_type := b_bunker ; 27 :
39784: LD_ADDR_OWVAR 42
39788: PUSH
39789: LD_INT 32
39791: ST_TO_ADDR
39792: GO 39947
39794: LD_INT 27
39796: DOUBLE
39797: EQUAL
39798: IFTRUE 39802
39800: GO 39813
39802: POP
// bc_type := b_turret ; 28 :
39803: LD_ADDR_OWVAR 42
39807: PUSH
39808: LD_INT 33
39810: ST_TO_ADDR
39811: GO 39947
39813: LD_INT 28
39815: DOUBLE
39816: EQUAL
39817: IFTRUE 39821
39819: GO 39832
39821: POP
// bc_type := b_armoury ; 29 :
39822: LD_ADDR_OWVAR 42
39826: PUSH
39827: LD_INT 4
39829: ST_TO_ADDR
39830: GO 39947
39832: LD_INT 29
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 39851
39840: POP
// bc_type := b_barracks ; 30 :
39841: LD_ADDR_OWVAR 42
39845: PUSH
39846: LD_INT 5
39848: ST_TO_ADDR
39849: GO 39947
39851: LD_INT 30
39853: DOUBLE
39854: EQUAL
39855: IFTRUE 39859
39857: GO 39870
39859: POP
// bc_type := b_solar_power ; 31 :
39860: LD_ADDR_OWVAR 42
39864: PUSH
39865: LD_INT 27
39867: ST_TO_ADDR
39868: GO 39947
39870: LD_INT 31
39872: DOUBLE
39873: EQUAL
39874: IFTRUE 39878
39876: GO 39889
39878: POP
// bc_type := b_oil_power ; 32 :
39879: LD_ADDR_OWVAR 42
39883: PUSH
39884: LD_INT 26
39886: ST_TO_ADDR
39887: GO 39947
39889: LD_INT 32
39891: DOUBLE
39892: EQUAL
39893: IFTRUE 39897
39895: GO 39908
39897: POP
// bc_type := b_siberite_power ; 33 :
39898: LD_ADDR_OWVAR 42
39902: PUSH
39903: LD_INT 28
39905: ST_TO_ADDR
39906: GO 39947
39908: LD_INT 33
39910: DOUBLE
39911: EQUAL
39912: IFTRUE 39916
39914: GO 39927
39916: POP
// bc_type := b_oil_mine ; 34 :
39917: LD_ADDR_OWVAR 42
39921: PUSH
39922: LD_INT 29
39924: ST_TO_ADDR
39925: GO 39947
39927: LD_INT 34
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39935
39933: GO 39946
39935: POP
// bc_type := b_siberite_mine ; end ;
39936: LD_ADDR_OWVAR 42
39940: PUSH
39941: LD_INT 30
39943: ST_TO_ADDR
39944: GO 39947
39946: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39947: LD_ADDR_VAR 0 8
39951: PUSH
39952: LD_VAR 0 5
39956: PPUSH
39957: LD_VAR 0 6
39961: PPUSH
39962: LD_VAR 0 3
39966: PPUSH
39967: CALL_OW 47
39971: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39972: LD_OWVAR 42
39976: PUSH
39977: LD_INT 32
39979: PUSH
39980: LD_INT 33
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: IN
39987: IFFALSE 40003
// PlaceWeaponTurret ( b , weapon ) ;
39989: LD_VAR 0 8
39993: PPUSH
39994: LD_VAR 0 4
39998: PPUSH
39999: CALL_OW 431
// end ;
40003: LD_VAR 0 7
40007: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40008: LD_INT 0
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40014: LD_ADDR_VAR 0 4
40018: PUSH
40019: LD_INT 22
40021: PUSH
40022: LD_OWVAR 2
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 30
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 30
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: LIST
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PPUSH
40063: CALL_OW 69
40067: ST_TO_ADDR
// if not tmp then
40068: LD_VAR 0 4
40072: NOT
40073: IFFALSE 40077
// exit ;
40075: GO 40136
// for i in tmp do
40077: LD_ADDR_VAR 0 2
40081: PUSH
40082: LD_VAR 0 4
40086: PUSH
40087: FOR_IN
40088: IFFALSE 40134
// for j = 1 to 3 do
40090: LD_ADDR_VAR 0 3
40094: PUSH
40095: DOUBLE
40096: LD_INT 1
40098: DEC
40099: ST_TO_ADDR
40100: LD_INT 3
40102: PUSH
40103: FOR_TO
40104: IFFALSE 40130
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40106: LD_VAR 0 2
40110: PPUSH
40111: CALL_OW 274
40115: PPUSH
40116: LD_VAR 0 3
40120: PPUSH
40121: LD_INT 99999
40123: PPUSH
40124: CALL_OW 277
40128: GO 40103
40130: POP
40131: POP
40132: GO 40087
40134: POP
40135: POP
// end ;
40136: LD_VAR 0 1
40140: RET
// export function hHackSetLevel10 ; var i , j ; begin
40141: LD_INT 0
40143: PPUSH
40144: PPUSH
40145: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40146: LD_ADDR_VAR 0 2
40150: PUSH
40151: LD_INT 21
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PPUSH
40161: CALL_OW 69
40165: PUSH
40166: FOR_IN
40167: IFFALSE 40219
// if IsSelected ( i ) then
40169: LD_VAR 0 2
40173: PPUSH
40174: CALL_OW 306
40178: IFFALSE 40217
// begin for j := 1 to 4 do
40180: LD_ADDR_VAR 0 3
40184: PUSH
40185: DOUBLE
40186: LD_INT 1
40188: DEC
40189: ST_TO_ADDR
40190: LD_INT 4
40192: PUSH
40193: FOR_TO
40194: IFFALSE 40215
// SetSkill ( i , j , 10 ) ;
40196: LD_VAR 0 2
40200: PPUSH
40201: LD_VAR 0 3
40205: PPUSH
40206: LD_INT 10
40208: PPUSH
40209: CALL_OW 237
40213: GO 40193
40215: POP
40216: POP
// end ;
40217: GO 40166
40219: POP
40220: POP
// end ;
40221: LD_VAR 0 1
40225: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40226: LD_INT 0
40228: PPUSH
40229: PPUSH
40230: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40231: LD_ADDR_VAR 0 2
40235: PUSH
40236: LD_INT 22
40238: PUSH
40239: LD_OWVAR 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 21
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PPUSH
40262: CALL_OW 69
40266: PUSH
40267: FOR_IN
40268: IFFALSE 40309
// begin for j := 1 to 4 do
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: DOUBLE
40276: LD_INT 1
40278: DEC
40279: ST_TO_ADDR
40280: LD_INT 4
40282: PUSH
40283: FOR_TO
40284: IFFALSE 40305
// SetSkill ( i , j , 10 ) ;
40286: LD_VAR 0 2
40290: PPUSH
40291: LD_VAR 0 3
40295: PPUSH
40296: LD_INT 10
40298: PPUSH
40299: CALL_OW 237
40303: GO 40283
40305: POP
40306: POP
// end ;
40307: GO 40267
40309: POP
40310: POP
// end ;
40311: LD_VAR 0 1
40315: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40316: LD_INT 0
40318: PPUSH
// uc_side := your_side ;
40319: LD_ADDR_OWVAR 20
40323: PUSH
40324: LD_OWVAR 2
40328: ST_TO_ADDR
// uc_nation := nation ;
40329: LD_ADDR_OWVAR 21
40333: PUSH
40334: LD_VAR 0 1
40338: ST_TO_ADDR
// InitHc ;
40339: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40343: LD_INT 0
40345: PPUSH
40346: LD_VAR 0 2
40350: PPUSH
40351: LD_VAR 0 3
40355: PPUSH
40356: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40360: LD_VAR 0 4
40364: PPUSH
40365: LD_VAR 0 5
40369: PPUSH
40370: CALL_OW 428
40374: PUSH
40375: LD_INT 0
40377: EQUAL
40378: IFFALSE 40402
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40380: CALL_OW 44
40384: PPUSH
40385: LD_VAR 0 4
40389: PPUSH
40390: LD_VAR 0 5
40394: PPUSH
40395: LD_INT 1
40397: PPUSH
40398: CALL_OW 48
// end ;
40402: LD_VAR 0 6
40406: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
// uc_side := your_side ;
40411: LD_ADDR_OWVAR 20
40415: PUSH
40416: LD_OWVAR 2
40420: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40421: LD_VAR 0 1
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 3
40434: PUSH
40435: LD_INT 4
40437: PUSH
40438: LD_INT 5
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: IN
40448: IFFALSE 40460
// uc_nation := nation_american else
40450: LD_ADDR_OWVAR 21
40454: PUSH
40455: LD_INT 1
40457: ST_TO_ADDR
40458: GO 40503
// if chassis in [ 11 , 12 , 13 , 14 ] then
40460: LD_VAR 0 1
40464: PUSH
40465: LD_INT 11
40467: PUSH
40468: LD_INT 12
40470: PUSH
40471: LD_INT 13
40473: PUSH
40474: LD_INT 14
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: IN
40483: IFFALSE 40495
// uc_nation := nation_arabian else
40485: LD_ADDR_OWVAR 21
40489: PUSH
40490: LD_INT 2
40492: ST_TO_ADDR
40493: GO 40503
// uc_nation := nation_russian ;
40495: LD_ADDR_OWVAR 21
40499: PUSH
40500: LD_INT 3
40502: ST_TO_ADDR
// vc_chassis := chassis ;
40503: LD_ADDR_OWVAR 37
40507: PUSH
40508: LD_VAR 0 1
40512: ST_TO_ADDR
// vc_engine := engine ;
40513: LD_ADDR_OWVAR 39
40517: PUSH
40518: LD_VAR 0 2
40522: ST_TO_ADDR
// vc_control := control ;
40523: LD_ADDR_OWVAR 38
40527: PUSH
40528: LD_VAR 0 3
40532: ST_TO_ADDR
// vc_weapon := weapon ;
40533: LD_ADDR_OWVAR 40
40537: PUSH
40538: LD_VAR 0 4
40542: ST_TO_ADDR
// un := CreateVehicle ;
40543: LD_ADDR_VAR 0 8
40547: PUSH
40548: CALL_OW 45
40552: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
40553: LD_VAR 0 8
40557: PPUSH
40558: LD_INT 0
40560: PPUSH
40561: LD_INT 5
40563: PPUSH
40564: CALL_OW 12
40568: PPUSH
40569: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
40573: LD_VAR 0 8
40577: PPUSH
40578: LD_VAR 0 5
40582: PPUSH
40583: LD_VAR 0 6
40587: PPUSH
40588: LD_INT 1
40590: PPUSH
40591: CALL_OW 48
// end ;
40595: LD_VAR 0 7
40599: RET
// export hInvincible ; every 1 do
40600: GO 40602
40602: DISABLE
// hInvincible := [ ] ;
40603: LD_ADDR_EXP 124
40607: PUSH
40608: EMPTY
40609: ST_TO_ADDR
40610: END
// every 10 do var i ;
40611: GO 40613
40613: DISABLE
40614: LD_INT 0
40616: PPUSH
// begin enable ;
40617: ENABLE
// if not hInvincible then
40618: LD_EXP 124
40622: NOT
40623: IFFALSE 40627
// exit ;
40625: GO 40671
// for i in hInvincible do
40627: LD_ADDR_VAR 0 1
40631: PUSH
40632: LD_EXP 124
40636: PUSH
40637: FOR_IN
40638: IFFALSE 40669
// if GetLives ( i ) < 1000 then
40640: LD_VAR 0 1
40644: PPUSH
40645: CALL_OW 256
40649: PUSH
40650: LD_INT 1000
40652: LESS
40653: IFFALSE 40667
// SetLives ( i , 1000 ) ;
40655: LD_VAR 0 1
40659: PPUSH
40660: LD_INT 1000
40662: PPUSH
40663: CALL_OW 234
40667: GO 40637
40669: POP
40670: POP
// end ;
40671: PPOPN 1
40673: END
// export function hHackInvincible ; var i ; begin
40674: LD_INT 0
40676: PPUSH
40677: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
40678: LD_ADDR_VAR 0 2
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: LD_INT 21
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 21
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: LIST
40710: PPUSH
40711: CALL_OW 69
40715: PUSH
40716: FOR_IN
40717: IFFALSE 40778
// if IsSelected ( i ) then
40719: LD_VAR 0 2
40723: PPUSH
40724: CALL_OW 306
40728: IFFALSE 40776
// begin if i in hInvincible then
40730: LD_VAR 0 2
40734: PUSH
40735: LD_EXP 124
40739: IN
40740: IFFALSE 40760
// hInvincible := hInvincible diff i else
40742: LD_ADDR_EXP 124
40746: PUSH
40747: LD_EXP 124
40751: PUSH
40752: LD_VAR 0 2
40756: DIFF
40757: ST_TO_ADDR
40758: GO 40776
// hInvincible := hInvincible union i ;
40760: LD_ADDR_EXP 124
40764: PUSH
40765: LD_EXP 124
40769: PUSH
40770: LD_VAR 0 2
40774: UNION
40775: ST_TO_ADDR
// end ;
40776: GO 40716
40778: POP
40779: POP
// end ;
40780: LD_VAR 0 1
40784: RET
// export function hHackInvisible ; var i , j ; begin
40785: LD_INT 0
40787: PPUSH
40788: PPUSH
40789: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40790: LD_ADDR_VAR 0 2
40794: PUSH
40795: LD_INT 21
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PPUSH
40805: CALL_OW 69
40809: PUSH
40810: FOR_IN
40811: IFFALSE 40835
// if IsSelected ( i ) then
40813: LD_VAR 0 2
40817: PPUSH
40818: CALL_OW 306
40822: IFFALSE 40833
// ComForceInvisible ( i ) ;
40824: LD_VAR 0 2
40828: PPUSH
40829: CALL_OW 496
40833: GO 40810
40835: POP
40836: POP
// end ;
40837: LD_VAR 0 1
40841: RET
// export function hHackChangeYourSide ; begin
40842: LD_INT 0
40844: PPUSH
// if your_side = 8 then
40845: LD_OWVAR 2
40849: PUSH
40850: LD_INT 8
40852: EQUAL
40853: IFFALSE 40865
// your_side := 0 else
40855: LD_ADDR_OWVAR 2
40859: PUSH
40860: LD_INT 0
40862: ST_TO_ADDR
40863: GO 40879
// your_side := your_side + 1 ;
40865: LD_ADDR_OWVAR 2
40869: PUSH
40870: LD_OWVAR 2
40874: PUSH
40875: LD_INT 1
40877: PLUS
40878: ST_TO_ADDR
// end ;
40879: LD_VAR 0 1
40883: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40884: LD_INT 0
40886: PPUSH
40887: PPUSH
40888: PPUSH
// for i in all_units do
40889: LD_ADDR_VAR 0 2
40893: PUSH
40894: LD_OWVAR 3
40898: PUSH
40899: FOR_IN
40900: IFFALSE 40978
// if IsSelected ( i ) then
40902: LD_VAR 0 2
40906: PPUSH
40907: CALL_OW 306
40911: IFFALSE 40976
// begin j := GetSide ( i ) ;
40913: LD_ADDR_VAR 0 3
40917: PUSH
40918: LD_VAR 0 2
40922: PPUSH
40923: CALL_OW 255
40927: ST_TO_ADDR
// if j = 8 then
40928: LD_VAR 0 3
40932: PUSH
40933: LD_INT 8
40935: EQUAL
40936: IFFALSE 40948
// j := 0 else
40938: LD_ADDR_VAR 0 3
40942: PUSH
40943: LD_INT 0
40945: ST_TO_ADDR
40946: GO 40962
// j := j + 1 ;
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_VAR 0 3
40957: PUSH
40958: LD_INT 1
40960: PLUS
40961: ST_TO_ADDR
// SetSide ( i , j ) ;
40962: LD_VAR 0 2
40966: PPUSH
40967: LD_VAR 0 3
40971: PPUSH
40972: CALL_OW 235
// end ;
40976: GO 40899
40978: POP
40979: POP
// end ;
40980: LD_VAR 0 1
40984: RET
// export function hHackFog ; begin
40985: LD_INT 0
40987: PPUSH
// FogOff ( true ) ;
40988: LD_INT 1
40990: PPUSH
40991: CALL_OW 344
// end ;
40995: LD_VAR 0 1
40999: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41000: LD_INT 0
41002: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41003: LD_VAR 0 1
41007: PPUSH
41008: LD_VAR 0 2
41012: PPUSH
41013: LD_VAR 0 3
41017: PPUSH
41018: LD_INT 1
41020: PPUSH
41021: LD_INT 1
41023: PPUSH
41024: CALL_OW 483
// CenterOnXY ( x , y ) ;
41028: LD_VAR 0 2
41032: PPUSH
41033: LD_VAR 0 3
41037: PPUSH
41038: CALL_OW 84
// end ; end_of_file
41042: LD_VAR 0 4
41046: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
41047: LD_INT 0
41049: PPUSH
41050: PPUSH
41051: PPUSH
41052: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 264
41062: PUSH
41063: LD_EXP 52
41067: EQUAL
41068: IFFALSE 41140
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
41070: LD_INT 68
41072: PPUSH
41073: LD_VAR 0 1
41077: PPUSH
41078: CALL_OW 255
41082: PPUSH
41083: CALL_OW 321
41087: PUSH
41088: LD_INT 2
41090: EQUAL
41091: IFFALSE 41103
// eff := 70 else
41093: LD_ADDR_VAR 0 4
41097: PUSH
41098: LD_INT 70
41100: ST_TO_ADDR
41101: GO 41111
// eff := 30 ;
41103: LD_ADDR_VAR 0 4
41107: PUSH
41108: LD_INT 30
41110: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
41111: LD_VAR 0 1
41115: PPUSH
41116: CALL_OW 250
41120: PPUSH
41121: LD_VAR 0 1
41125: PPUSH
41126: CALL_OW 251
41130: PPUSH
41131: LD_VAR 0 4
41135: PPUSH
41136: CALL_OW 495
// end ; end ;
41140: LD_VAR 0 2
41144: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
41145: LD_INT 0
41147: PPUSH
// end ;
41148: LD_VAR 0 4
41152: RET
// export function SOS_Command ( cmd ) ; begin
41153: LD_INT 0
41155: PPUSH
// end ;
41156: LD_VAR 0 2
41160: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
41161: LD_INT 0
41163: PPUSH
// end ;
41164: LD_VAR 0 6
41168: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
41169: LD_INT 0
41171: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
41172: LD_VAR 0 1
41176: PUSH
41177: LD_INT 250
41179: EQUAL
41180: PUSH
41181: LD_VAR 0 2
41185: PPUSH
41186: CALL_OW 264
41190: PUSH
41191: LD_EXP 55
41195: EQUAL
41196: AND
41197: IFFALSE 41218
// MinerPlaceMine ( unit , x , y ) ;
41199: LD_VAR 0 2
41203: PPUSH
41204: LD_VAR 0 4
41208: PPUSH
41209: LD_VAR 0 5
41213: PPUSH
41214: CALL 43567 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
41218: LD_VAR 0 1
41222: PUSH
41223: LD_INT 251
41225: EQUAL
41226: PUSH
41227: LD_VAR 0 2
41231: PPUSH
41232: CALL_OW 264
41236: PUSH
41237: LD_EXP 55
41241: EQUAL
41242: AND
41243: IFFALSE 41264
// MinerDetonateMine ( unit , x , y ) ;
41245: LD_VAR 0 2
41249: PPUSH
41250: LD_VAR 0 4
41254: PPUSH
41255: LD_VAR 0 5
41259: PPUSH
41260: CALL 43844 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
41264: LD_VAR 0 1
41268: PUSH
41269: LD_INT 252
41271: EQUAL
41272: PUSH
41273: LD_VAR 0 2
41277: PPUSH
41278: CALL_OW 264
41282: PUSH
41283: LD_EXP 55
41287: EQUAL
41288: AND
41289: IFFALSE 41310
// MinerCreateMinefield ( unit , x , y ) ;
41291: LD_VAR 0 2
41295: PPUSH
41296: LD_VAR 0 4
41300: PPUSH
41301: LD_VAR 0 5
41305: PPUSH
41306: CALL 44261 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
41310: LD_VAR 0 1
41314: PUSH
41315: LD_INT 253
41317: EQUAL
41318: PUSH
41319: LD_VAR 0 2
41323: PPUSH
41324: CALL_OW 257
41328: PUSH
41329: LD_INT 5
41331: EQUAL
41332: AND
41333: IFFALSE 41354
// ComBinocular ( unit , x , y ) ;
41335: LD_VAR 0 2
41339: PPUSH
41340: LD_VAR 0 4
41344: PPUSH
41345: LD_VAR 0 5
41349: PPUSH
41350: CALL 44632 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
41354: LD_VAR 0 1
41358: PUSH
41359: LD_INT 254
41361: EQUAL
41362: PUSH
41363: LD_VAR 0 2
41367: PPUSH
41368: CALL_OW 264
41372: PUSH
41373: LD_EXP 50
41377: EQUAL
41378: AND
41379: PUSH
41380: LD_VAR 0 3
41384: PPUSH
41385: CALL_OW 263
41389: PUSH
41390: LD_INT 3
41392: EQUAL
41393: AND
41394: IFFALSE 41410
// HackDestroyVehicle ( unit , selectedUnit ) ;
41396: LD_VAR 0 2
41400: PPUSH
41401: LD_VAR 0 3
41405: PPUSH
41406: CALL 42927 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
41410: LD_VAR 0 1
41414: PUSH
41415: LD_INT 255
41417: EQUAL
41418: PUSH
41419: LD_VAR 0 2
41423: PPUSH
41424: CALL_OW 264
41428: PUSH
41429: LD_INT 14
41431: PUSH
41432: LD_INT 53
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: IN
41439: AND
41440: PUSH
41441: LD_VAR 0 4
41445: PPUSH
41446: LD_VAR 0 5
41450: PPUSH
41451: CALL_OW 488
41455: AND
41456: IFFALSE 41480
// CutTreeXYR ( unit , x , y , 12 ) ;
41458: LD_VAR 0 2
41462: PPUSH
41463: LD_VAR 0 4
41467: PPUSH
41468: LD_VAR 0 5
41472: PPUSH
41473: LD_INT 12
41475: PPUSH
41476: CALL 41493 0 4
// end ;
41480: LD_VAR 0 6
41484: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
41485: LD_INT 0
41487: PPUSH
// end ;
41488: LD_VAR 0 4
41492: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
41493: LD_INT 0
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
41504: LD_VAR 0 1
41508: NOT
41509: PUSH
41510: LD_VAR 0 2
41514: PPUSH
41515: LD_VAR 0 3
41519: PPUSH
41520: CALL_OW 488
41524: NOT
41525: OR
41526: PUSH
41527: LD_VAR 0 4
41531: NOT
41532: OR
41533: IFFALSE 41537
// exit ;
41535: GO 41877
// list := [ ] ;
41537: LD_ADDR_VAR 0 13
41541: PUSH
41542: EMPTY
41543: ST_TO_ADDR
// if x - r < 0 then
41544: LD_VAR 0 2
41548: PUSH
41549: LD_VAR 0 4
41553: MINUS
41554: PUSH
41555: LD_INT 0
41557: LESS
41558: IFFALSE 41570
// min_x := 0 else
41560: LD_ADDR_VAR 0 7
41564: PUSH
41565: LD_INT 0
41567: ST_TO_ADDR
41568: GO 41586
// min_x := x - r ;
41570: LD_ADDR_VAR 0 7
41574: PUSH
41575: LD_VAR 0 2
41579: PUSH
41580: LD_VAR 0 4
41584: MINUS
41585: ST_TO_ADDR
// if y - r < 0 then
41586: LD_VAR 0 3
41590: PUSH
41591: LD_VAR 0 4
41595: MINUS
41596: PUSH
41597: LD_INT 0
41599: LESS
41600: IFFALSE 41612
// min_y := 0 else
41602: LD_ADDR_VAR 0 8
41606: PUSH
41607: LD_INT 0
41609: ST_TO_ADDR
41610: GO 41628
// min_y := y - r ;
41612: LD_ADDR_VAR 0 8
41616: PUSH
41617: LD_VAR 0 3
41621: PUSH
41622: LD_VAR 0 4
41626: MINUS
41627: ST_TO_ADDR
// max_x := x + r ;
41628: LD_ADDR_VAR 0 9
41632: PUSH
41633: LD_VAR 0 2
41637: PUSH
41638: LD_VAR 0 4
41642: PLUS
41643: ST_TO_ADDR
// max_y := y + r ;
41644: LD_ADDR_VAR 0 10
41648: PUSH
41649: LD_VAR 0 3
41653: PUSH
41654: LD_VAR 0 4
41658: PLUS
41659: ST_TO_ADDR
// for _x = min_x to max_x do
41660: LD_ADDR_VAR 0 11
41664: PUSH
41665: DOUBLE
41666: LD_VAR 0 7
41670: DEC
41671: ST_TO_ADDR
41672: LD_VAR 0 9
41676: PUSH
41677: FOR_TO
41678: IFFALSE 41795
// for _y = min_y to max_y do
41680: LD_ADDR_VAR 0 12
41684: PUSH
41685: DOUBLE
41686: LD_VAR 0 8
41690: DEC
41691: ST_TO_ADDR
41692: LD_VAR 0 10
41696: PUSH
41697: FOR_TO
41698: IFFALSE 41791
// begin if not ValidHex ( _x , _y ) then
41700: LD_VAR 0 11
41704: PPUSH
41705: LD_VAR 0 12
41709: PPUSH
41710: CALL_OW 488
41714: NOT
41715: IFFALSE 41719
// continue ;
41717: GO 41697
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
41719: LD_VAR 0 11
41723: PPUSH
41724: LD_VAR 0 12
41728: PPUSH
41729: CALL_OW 351
41733: PUSH
41734: LD_VAR 0 11
41738: PPUSH
41739: LD_VAR 0 12
41743: PPUSH
41744: CALL_OW 554
41748: AND
41749: IFFALSE 41789
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41751: LD_ADDR_VAR 0 13
41755: PUSH
41756: LD_VAR 0 13
41760: PPUSH
41761: LD_VAR 0 13
41765: PUSH
41766: LD_INT 1
41768: PLUS
41769: PPUSH
41770: LD_VAR 0 11
41774: PUSH
41775: LD_VAR 0 12
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PPUSH
41784: CALL_OW 2
41788: ST_TO_ADDR
// end ;
41789: GO 41697
41791: POP
41792: POP
41793: GO 41677
41795: POP
41796: POP
// if not list then
41797: LD_VAR 0 13
41801: NOT
41802: IFFALSE 41806
// exit ;
41804: GO 41877
// for i in list do
41806: LD_ADDR_VAR 0 6
41810: PUSH
41811: LD_VAR 0 13
41815: PUSH
41816: FOR_IN
41817: IFFALSE 41875
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41819: LD_VAR 0 1
41823: PPUSH
41824: LD_STRING M
41826: PUSH
41827: LD_VAR 0 6
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PUSH
41836: LD_VAR 0 6
41840: PUSH
41841: LD_INT 2
41843: ARRAY
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: PPUSH
41869: CALL_OW 447
41873: GO 41816
41875: POP
41876: POP
// end ;
41877: LD_VAR 0 5
41881: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41882: LD_EXP 127
41886: NOT
41887: IFFALSE 41937
41889: GO 41891
41891: DISABLE
// begin initHack := true ;
41892: LD_ADDR_EXP 127
41896: PUSH
41897: LD_INT 1
41899: ST_TO_ADDR
// hackTanks := [ ] ;
41900: LD_ADDR_EXP 128
41904: PUSH
41905: EMPTY
41906: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41907: LD_ADDR_EXP 129
41911: PUSH
41912: EMPTY
41913: ST_TO_ADDR
// hackLimit := 3 ;
41914: LD_ADDR_EXP 130
41918: PUSH
41919: LD_INT 3
41921: ST_TO_ADDR
// hackDist := 12 ;
41922: LD_ADDR_EXP 131
41926: PUSH
41927: LD_INT 12
41929: ST_TO_ADDR
// hackCounter := [ ] ;
41930: LD_ADDR_EXP 132
41934: PUSH
41935: EMPTY
41936: ST_TO_ADDR
// end ;
41937: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41938: LD_EXP 127
41942: PUSH
41943: LD_INT 34
41945: PUSH
41946: LD_EXP 50
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PPUSH
41955: CALL_OW 69
41959: AND
41960: IFFALSE 42215
41962: GO 41964
41964: DISABLE
41965: LD_INT 0
41967: PPUSH
41968: PPUSH
// begin enable ;
41969: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41970: LD_ADDR_VAR 0 1
41974: PUSH
41975: LD_INT 34
41977: PUSH
41978: LD_EXP 50
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PPUSH
41987: CALL_OW 69
41991: PUSH
41992: FOR_IN
41993: IFFALSE 42213
// begin if not i in hackTanks then
41995: LD_VAR 0 1
41999: PUSH
42000: LD_EXP 128
42004: IN
42005: NOT
42006: IFFALSE 42089
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
42008: LD_ADDR_EXP 128
42012: PUSH
42013: LD_EXP 128
42017: PPUSH
42018: LD_EXP 128
42022: PUSH
42023: LD_INT 1
42025: PLUS
42026: PPUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: CALL_OW 1
42036: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
42037: LD_ADDR_EXP 129
42041: PUSH
42042: LD_EXP 129
42046: PPUSH
42047: LD_EXP 129
42051: PUSH
42052: LD_INT 1
42054: PLUS
42055: PPUSH
42056: EMPTY
42057: PPUSH
42058: CALL_OW 1
42062: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
42063: LD_ADDR_EXP 132
42067: PUSH
42068: LD_EXP 132
42072: PPUSH
42073: LD_EXP 132
42077: PUSH
42078: LD_INT 1
42080: PLUS
42081: PPUSH
42082: EMPTY
42083: PPUSH
42084: CALL_OW 1
42088: ST_TO_ADDR
// end ; if not IsOk ( i ) then
42089: LD_VAR 0 1
42093: PPUSH
42094: CALL_OW 302
42098: NOT
42099: IFFALSE 42112
// begin HackUnlinkAll ( i ) ;
42101: LD_VAR 0 1
42105: PPUSH
42106: CALL 42218 0 1
// continue ;
42110: GO 41992
// end ; HackCheckCapturedStatus ( i ) ;
42112: LD_VAR 0 1
42116: PPUSH
42117: CALL 42661 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
42121: LD_ADDR_VAR 0 2
42125: PUSH
42126: LD_INT 81
42128: PUSH
42129: LD_VAR 0 1
42133: PPUSH
42134: CALL_OW 255
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 33
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 91
42155: PUSH
42156: LD_VAR 0 1
42160: PUSH
42161: LD_EXP 131
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 50
42173: PUSH
42174: EMPTY
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: PPUSH
42183: CALL_OW 69
42187: ST_TO_ADDR
// if not tmp then
42188: LD_VAR 0 2
42192: NOT
42193: IFFALSE 42197
// continue ;
42195: GO 41992
// HackLink ( i , tmp ) ;
42197: LD_VAR 0 1
42201: PPUSH
42202: LD_VAR 0 2
42206: PPUSH
42207: CALL 42354 0 2
// end ;
42211: GO 41992
42213: POP
42214: POP
// end ;
42215: PPOPN 2
42217: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
42218: LD_INT 0
42220: PPUSH
42221: PPUSH
42222: PPUSH
// if not hack in hackTanks then
42223: LD_VAR 0 1
42227: PUSH
42228: LD_EXP 128
42232: IN
42233: NOT
42234: IFFALSE 42238
// exit ;
42236: GO 42349
// index := GetElementIndex ( hackTanks , hack ) ;
42238: LD_ADDR_VAR 0 4
42242: PUSH
42243: LD_EXP 128
42247: PPUSH
42248: LD_VAR 0 1
42252: PPUSH
42253: CALL 49823 0 2
42257: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
42258: LD_EXP 129
42262: PUSH
42263: LD_VAR 0 4
42267: ARRAY
42268: IFFALSE 42349
// begin for i in hackTanksCaptured [ index ] do
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_EXP 129
42279: PUSH
42280: LD_VAR 0 4
42284: ARRAY
42285: PUSH
42286: FOR_IN
42287: IFFALSE 42313
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
42289: LD_VAR 0 3
42293: PUSH
42294: LD_INT 1
42296: ARRAY
42297: PPUSH
42298: LD_VAR 0 3
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: PPUSH
42307: CALL_OW 235
42311: GO 42286
42313: POP
42314: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
42315: LD_ADDR_EXP 129
42319: PUSH
42320: LD_EXP 129
42324: PPUSH
42325: LD_VAR 0 4
42329: PPUSH
42330: EMPTY
42331: PPUSH
42332: CALL_OW 1
42336: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
42337: LD_VAR 0 1
42341: PPUSH
42342: LD_INT 0
42344: PPUSH
42345: CALL_OW 505
// end ; end ;
42349: LD_VAR 0 2
42353: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
42354: LD_INT 0
42356: PPUSH
42357: PPUSH
42358: PPUSH
// if not hack in hackTanks or not vehicles then
42359: LD_VAR 0 1
42363: PUSH
42364: LD_EXP 128
42368: IN
42369: NOT
42370: PUSH
42371: LD_VAR 0 2
42375: NOT
42376: OR
42377: IFFALSE 42381
// exit ;
42379: GO 42656
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
42381: LD_ADDR_VAR 0 2
42385: PUSH
42386: LD_VAR 0 1
42390: PPUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: LD_INT 1
42398: PPUSH
42399: LD_INT 1
42401: PPUSH
42402: CALL 50473 0 4
42406: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
42407: LD_ADDR_VAR 0 5
42411: PUSH
42412: LD_EXP 128
42416: PPUSH
42417: LD_VAR 0 1
42421: PPUSH
42422: CALL 49823 0 2
42426: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
42427: LD_EXP 129
42431: PUSH
42432: LD_VAR 0 5
42436: ARRAY
42437: PUSH
42438: LD_EXP 130
42442: LESS
42443: IFFALSE 42632
// begin for i := 1 to vehicles do
42445: LD_ADDR_VAR 0 4
42449: PUSH
42450: DOUBLE
42451: LD_INT 1
42453: DEC
42454: ST_TO_ADDR
42455: LD_VAR 0 2
42459: PUSH
42460: FOR_TO
42461: IFFALSE 42630
// begin if hackTanksCaptured [ index ] = hackLimit then
42463: LD_EXP 129
42467: PUSH
42468: LD_VAR 0 5
42472: ARRAY
42473: PUSH
42474: LD_EXP 130
42478: EQUAL
42479: IFFALSE 42483
// break ;
42481: GO 42630
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
42483: LD_ADDR_EXP 132
42487: PUSH
42488: LD_EXP 132
42492: PPUSH
42493: LD_VAR 0 5
42497: PPUSH
42498: LD_EXP 132
42502: PUSH
42503: LD_VAR 0 5
42507: ARRAY
42508: PUSH
42509: LD_INT 1
42511: PLUS
42512: PPUSH
42513: CALL_OW 1
42517: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
42518: LD_ADDR_EXP 129
42522: PUSH
42523: LD_EXP 129
42527: PPUSH
42528: LD_VAR 0 5
42532: PUSH
42533: LD_EXP 129
42537: PUSH
42538: LD_VAR 0 5
42542: ARRAY
42543: PUSH
42544: LD_INT 1
42546: PLUS
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PPUSH
42552: LD_VAR 0 2
42556: PUSH
42557: LD_VAR 0 4
42561: ARRAY
42562: PUSH
42563: LD_VAR 0 2
42567: PUSH
42568: LD_VAR 0 4
42572: ARRAY
42573: PPUSH
42574: CALL_OW 255
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PPUSH
42583: CALL 50038 0 3
42587: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
42588: LD_VAR 0 2
42592: PUSH
42593: LD_VAR 0 4
42597: ARRAY
42598: PPUSH
42599: LD_VAR 0 1
42603: PPUSH
42604: CALL_OW 255
42608: PPUSH
42609: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
42613: LD_VAR 0 2
42617: PUSH
42618: LD_VAR 0 4
42622: ARRAY
42623: PPUSH
42624: CALL_OW 141
// end ;
42628: GO 42460
42630: POP
42631: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42632: LD_VAR 0 1
42636: PPUSH
42637: LD_EXP 129
42641: PUSH
42642: LD_VAR 0 5
42646: ARRAY
42647: PUSH
42648: LD_INT 0
42650: PLUS
42651: PPUSH
42652: CALL_OW 505
// end ;
42656: LD_VAR 0 3
42660: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
42661: LD_INT 0
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
// if not hack in hackTanks then
42667: LD_VAR 0 1
42671: PUSH
42672: LD_EXP 128
42676: IN
42677: NOT
42678: IFFALSE 42682
// exit ;
42680: GO 42922
// index := GetElementIndex ( hackTanks , hack ) ;
42682: LD_ADDR_VAR 0 4
42686: PUSH
42687: LD_EXP 128
42691: PPUSH
42692: LD_VAR 0 1
42696: PPUSH
42697: CALL 49823 0 2
42701: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: DOUBLE
42708: LD_EXP 129
42712: PUSH
42713: LD_VAR 0 4
42717: ARRAY
42718: INC
42719: ST_TO_ADDR
42720: LD_INT 1
42722: PUSH
42723: FOR_DOWNTO
42724: IFFALSE 42896
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
42726: LD_ADDR_VAR 0 5
42730: PUSH
42731: LD_EXP 129
42735: PUSH
42736: LD_VAR 0 4
42740: ARRAY
42741: PUSH
42742: LD_VAR 0 3
42746: ARRAY
42747: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
42748: LD_VAR 0 5
42752: PUSH
42753: LD_INT 1
42755: ARRAY
42756: PPUSH
42757: CALL_OW 302
42761: NOT
42762: PUSH
42763: LD_VAR 0 5
42767: PUSH
42768: LD_INT 1
42770: ARRAY
42771: PPUSH
42772: CALL_OW 255
42776: PUSH
42777: LD_VAR 0 1
42781: PPUSH
42782: CALL_OW 255
42786: NONEQUAL
42787: OR
42788: IFFALSE 42894
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
42790: LD_VAR 0 5
42794: PUSH
42795: LD_INT 1
42797: ARRAY
42798: PPUSH
42799: CALL_OW 305
42803: PUSH
42804: LD_VAR 0 5
42808: PUSH
42809: LD_INT 1
42811: ARRAY
42812: PPUSH
42813: CALL_OW 255
42817: PUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 255
42827: EQUAL
42828: AND
42829: IFFALSE 42853
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42831: LD_VAR 0 5
42835: PUSH
42836: LD_INT 1
42838: ARRAY
42839: PPUSH
42840: LD_VAR 0 5
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: PPUSH
42849: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42853: LD_ADDR_EXP 129
42857: PUSH
42858: LD_EXP 129
42862: PPUSH
42863: LD_VAR 0 4
42867: PPUSH
42868: LD_EXP 129
42872: PUSH
42873: LD_VAR 0 4
42877: ARRAY
42878: PPUSH
42879: LD_VAR 0 3
42883: PPUSH
42884: CALL_OW 3
42888: PPUSH
42889: CALL_OW 1
42893: ST_TO_ADDR
// end ; end ;
42894: GO 42723
42896: POP
42897: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42898: LD_VAR 0 1
42902: PPUSH
42903: LD_EXP 129
42907: PUSH
42908: LD_VAR 0 4
42912: ARRAY
42913: PUSH
42914: LD_INT 0
42916: PLUS
42917: PPUSH
42918: CALL_OW 505
// end ;
42922: LD_VAR 0 2
42926: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42927: LD_INT 0
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
// if not hack in hackTanks then
42933: LD_VAR 0 1
42937: PUSH
42938: LD_EXP 128
42942: IN
42943: NOT
42944: IFFALSE 42948
// exit ;
42946: GO 43033
// index := GetElementIndex ( hackTanks , hack ) ;
42948: LD_ADDR_VAR 0 5
42952: PUSH
42953: LD_EXP 128
42957: PPUSH
42958: LD_VAR 0 1
42962: PPUSH
42963: CALL 49823 0 2
42967: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42968: LD_ADDR_VAR 0 4
42972: PUSH
42973: DOUBLE
42974: LD_INT 1
42976: DEC
42977: ST_TO_ADDR
42978: LD_EXP 129
42982: PUSH
42983: LD_VAR 0 5
42987: ARRAY
42988: PUSH
42989: FOR_TO
42990: IFFALSE 43031
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42992: LD_EXP 129
42996: PUSH
42997: LD_VAR 0 5
43001: ARRAY
43002: PUSH
43003: LD_VAR 0 4
43007: ARRAY
43008: PUSH
43009: LD_INT 1
43011: ARRAY
43012: PUSH
43013: LD_VAR 0 2
43017: EQUAL
43018: IFFALSE 43029
// KillUnit ( vehicle ) ;
43020: LD_VAR 0 2
43024: PPUSH
43025: CALL_OW 66
43029: GO 42989
43031: POP
43032: POP
// end ;
43033: LD_VAR 0 3
43037: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
43038: LD_EXP 133
43042: NOT
43043: IFFALSE 43078
43045: GO 43047
43047: DISABLE
// begin initMiner := true ;
43048: LD_ADDR_EXP 133
43052: PUSH
43053: LD_INT 1
43055: ST_TO_ADDR
// minersList := [ ] ;
43056: LD_ADDR_EXP 134
43060: PUSH
43061: EMPTY
43062: ST_TO_ADDR
// minerMinesList := [ ] ;
43063: LD_ADDR_EXP 135
43067: PUSH
43068: EMPTY
43069: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
43070: LD_ADDR_EXP 136
43074: PUSH
43075: LD_INT 5
43077: ST_TO_ADDR
// end ;
43078: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
43079: LD_EXP 133
43083: PUSH
43084: LD_INT 34
43086: PUSH
43087: LD_EXP 55
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PPUSH
43096: CALL_OW 69
43100: AND
43101: IFFALSE 43564
43103: GO 43105
43105: DISABLE
43106: LD_INT 0
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
// begin enable ;
43112: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
43113: LD_ADDR_VAR 0 1
43117: PUSH
43118: LD_INT 34
43120: PUSH
43121: LD_EXP 55
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PPUSH
43130: CALL_OW 69
43134: PUSH
43135: FOR_IN
43136: IFFALSE 43208
// begin if not i in minersList then
43138: LD_VAR 0 1
43142: PUSH
43143: LD_EXP 134
43147: IN
43148: NOT
43149: IFFALSE 43206
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
43151: LD_ADDR_EXP 134
43155: PUSH
43156: LD_EXP 134
43160: PPUSH
43161: LD_EXP 134
43165: PUSH
43166: LD_INT 1
43168: PLUS
43169: PPUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL_OW 1
43179: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
43180: LD_ADDR_EXP 135
43184: PUSH
43185: LD_EXP 135
43189: PPUSH
43190: LD_EXP 135
43194: PUSH
43195: LD_INT 1
43197: PLUS
43198: PPUSH
43199: EMPTY
43200: PPUSH
43201: CALL_OW 1
43205: ST_TO_ADDR
// end end ;
43206: GO 43135
43208: POP
43209: POP
// for i := minerMinesList downto 1 do
43210: LD_ADDR_VAR 0 1
43214: PUSH
43215: DOUBLE
43216: LD_EXP 135
43220: INC
43221: ST_TO_ADDR
43222: LD_INT 1
43224: PUSH
43225: FOR_DOWNTO
43226: IFFALSE 43562
// begin if IsLive ( minersList [ i ] ) then
43228: LD_EXP 134
43232: PUSH
43233: LD_VAR 0 1
43237: ARRAY
43238: PPUSH
43239: CALL_OW 300
43243: IFFALSE 43271
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
43245: LD_EXP 134
43249: PUSH
43250: LD_VAR 0 1
43254: ARRAY
43255: PPUSH
43256: LD_EXP 135
43260: PUSH
43261: LD_VAR 0 1
43265: ARRAY
43266: PPUSH
43267: CALL_OW 505
// if not minerMinesList [ i ] then
43271: LD_EXP 135
43275: PUSH
43276: LD_VAR 0 1
43280: ARRAY
43281: NOT
43282: IFFALSE 43286
// continue ;
43284: GO 43225
// for j := minerMinesList [ i ] downto 1 do
43286: LD_ADDR_VAR 0 2
43290: PUSH
43291: DOUBLE
43292: LD_EXP 135
43296: PUSH
43297: LD_VAR 0 1
43301: ARRAY
43302: INC
43303: ST_TO_ADDR
43304: LD_INT 1
43306: PUSH
43307: FOR_DOWNTO
43308: IFFALSE 43558
// begin side := GetSide ( minersList [ i ] ) ;
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: LD_EXP 134
43319: PUSH
43320: LD_VAR 0 1
43324: ARRAY
43325: PPUSH
43326: CALL_OW 255
43330: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
43331: LD_ADDR_VAR 0 4
43335: PUSH
43336: LD_EXP 135
43340: PUSH
43341: LD_VAR 0 1
43345: ARRAY
43346: PUSH
43347: LD_VAR 0 2
43351: ARRAY
43352: PUSH
43353: LD_INT 1
43355: ARRAY
43356: PPUSH
43357: LD_EXP 135
43361: PUSH
43362: LD_VAR 0 1
43366: ARRAY
43367: PUSH
43368: LD_VAR 0 2
43372: ARRAY
43373: PUSH
43374: LD_INT 2
43376: ARRAY
43377: PPUSH
43378: CALL_OW 428
43382: ST_TO_ADDR
// if not tmp then
43383: LD_VAR 0 4
43387: NOT
43388: IFFALSE 43392
// continue ;
43390: GO 43307
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
43392: LD_VAR 0 4
43396: PUSH
43397: LD_INT 81
43399: PUSH
43400: LD_VAR 0 3
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PPUSH
43409: CALL_OW 69
43413: IN
43414: PUSH
43415: LD_EXP 135
43419: PUSH
43420: LD_VAR 0 1
43424: ARRAY
43425: PUSH
43426: LD_VAR 0 2
43430: ARRAY
43431: PUSH
43432: LD_INT 1
43434: ARRAY
43435: PPUSH
43436: LD_EXP 135
43440: PUSH
43441: LD_VAR 0 1
43445: ARRAY
43446: PUSH
43447: LD_VAR 0 2
43451: ARRAY
43452: PUSH
43453: LD_INT 2
43455: ARRAY
43456: PPUSH
43457: CALL_OW 458
43461: AND
43462: IFFALSE 43556
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
43464: LD_EXP 135
43468: PUSH
43469: LD_VAR 0 1
43473: ARRAY
43474: PUSH
43475: LD_VAR 0 2
43479: ARRAY
43480: PUSH
43481: LD_INT 1
43483: ARRAY
43484: PPUSH
43485: LD_EXP 135
43489: PUSH
43490: LD_VAR 0 1
43494: ARRAY
43495: PUSH
43496: LD_VAR 0 2
43500: ARRAY
43501: PUSH
43502: LD_INT 2
43504: ARRAY
43505: PPUSH
43506: LD_VAR 0 3
43510: PPUSH
43511: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
43515: LD_ADDR_EXP 135
43519: PUSH
43520: LD_EXP 135
43524: PPUSH
43525: LD_VAR 0 1
43529: PPUSH
43530: LD_EXP 135
43534: PUSH
43535: LD_VAR 0 1
43539: ARRAY
43540: PPUSH
43541: LD_VAR 0 2
43545: PPUSH
43546: CALL_OW 3
43550: PPUSH
43551: CALL_OW 1
43555: ST_TO_ADDR
// end ; end ;
43556: GO 43307
43558: POP
43559: POP
// end ;
43560: GO 43225
43562: POP
43563: POP
// end ;
43564: PPOPN 4
43566: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
43567: LD_INT 0
43569: PPUSH
43570: PPUSH
// result := false ;
43571: LD_ADDR_VAR 0 4
43575: PUSH
43576: LD_INT 0
43578: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
43579: LD_VAR 0 1
43583: PPUSH
43584: CALL_OW 264
43588: PUSH
43589: LD_EXP 55
43593: EQUAL
43594: NOT
43595: IFFALSE 43599
// exit ;
43597: GO 43839
// index := GetElementIndex ( minersList , unit ) ;
43599: LD_ADDR_VAR 0 5
43603: PUSH
43604: LD_EXP 134
43608: PPUSH
43609: LD_VAR 0 1
43613: PPUSH
43614: CALL 49823 0 2
43618: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
43619: LD_EXP 135
43623: PUSH
43624: LD_VAR 0 5
43628: ARRAY
43629: PUSH
43630: LD_EXP 136
43634: GREATEREQUAL
43635: IFFALSE 43639
// exit ;
43637: GO 43839
// ComMoveXY ( unit , x , y ) ;
43639: LD_VAR 0 1
43643: PPUSH
43644: LD_VAR 0 2
43648: PPUSH
43649: LD_VAR 0 3
43653: PPUSH
43654: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43658: LD_INT 35
43660: PPUSH
43661: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
43665: LD_VAR 0 1
43669: PPUSH
43670: LD_VAR 0 2
43674: PPUSH
43675: LD_VAR 0 3
43679: PPUSH
43680: CALL 80595 0 3
43684: NOT
43685: PUSH
43686: LD_VAR 0 1
43690: PPUSH
43691: CALL_OW 314
43695: AND
43696: IFFALSE 43700
// exit ;
43698: GO 43839
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
43700: LD_VAR 0 2
43704: PPUSH
43705: LD_VAR 0 3
43709: PPUSH
43710: CALL_OW 428
43714: PUSH
43715: LD_VAR 0 1
43719: EQUAL
43720: PUSH
43721: LD_VAR 0 1
43725: PPUSH
43726: CALL_OW 314
43730: NOT
43731: AND
43732: IFFALSE 43658
// PlaySoundXY ( x , y , PlantMine ) ;
43734: LD_VAR 0 2
43738: PPUSH
43739: LD_VAR 0 3
43743: PPUSH
43744: LD_STRING PlantMine
43746: PPUSH
43747: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
43751: LD_VAR 0 2
43755: PPUSH
43756: LD_VAR 0 3
43760: PPUSH
43761: LD_VAR 0 1
43765: PPUSH
43766: CALL_OW 255
43770: PPUSH
43771: LD_INT 0
43773: PPUSH
43774: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
43778: LD_ADDR_EXP 135
43782: PUSH
43783: LD_EXP 135
43787: PPUSH
43788: LD_VAR 0 5
43792: PUSH
43793: LD_EXP 135
43797: PUSH
43798: LD_VAR 0 5
43802: ARRAY
43803: PUSH
43804: LD_INT 1
43806: PLUS
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PPUSH
43812: LD_VAR 0 2
43816: PUSH
43817: LD_VAR 0 3
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PPUSH
43826: CALL 50038 0 3
43830: ST_TO_ADDR
// result := true ;
43831: LD_ADDR_VAR 0 4
43835: PUSH
43836: LD_INT 1
43838: ST_TO_ADDR
// end ;
43839: LD_VAR 0 4
43843: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43844: LD_INT 0
43846: PPUSH
43847: PPUSH
43848: PPUSH
// if not unit in minersList then
43849: LD_VAR 0 1
43853: PUSH
43854: LD_EXP 134
43858: IN
43859: NOT
43860: IFFALSE 43864
// exit ;
43862: GO 44256
// index := GetElementIndex ( minersList , unit ) ;
43864: LD_ADDR_VAR 0 6
43868: PUSH
43869: LD_EXP 134
43873: PPUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL 49823 0 2
43883: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43884: LD_ADDR_VAR 0 5
43888: PUSH
43889: DOUBLE
43890: LD_EXP 135
43894: PUSH
43895: LD_VAR 0 6
43899: ARRAY
43900: INC
43901: ST_TO_ADDR
43902: LD_INT 1
43904: PUSH
43905: FOR_DOWNTO
43906: IFFALSE 44067
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43908: LD_EXP 135
43912: PUSH
43913: LD_VAR 0 6
43917: ARRAY
43918: PUSH
43919: LD_VAR 0 5
43923: ARRAY
43924: PUSH
43925: LD_INT 1
43927: ARRAY
43928: PUSH
43929: LD_VAR 0 2
43933: EQUAL
43934: PUSH
43935: LD_EXP 135
43939: PUSH
43940: LD_VAR 0 6
43944: ARRAY
43945: PUSH
43946: LD_VAR 0 5
43950: ARRAY
43951: PUSH
43952: LD_INT 2
43954: ARRAY
43955: PUSH
43956: LD_VAR 0 3
43960: EQUAL
43961: AND
43962: IFFALSE 44065
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43964: LD_EXP 135
43968: PUSH
43969: LD_VAR 0 6
43973: ARRAY
43974: PUSH
43975: LD_VAR 0 5
43979: ARRAY
43980: PUSH
43981: LD_INT 1
43983: ARRAY
43984: PPUSH
43985: LD_EXP 135
43989: PUSH
43990: LD_VAR 0 6
43994: ARRAY
43995: PUSH
43996: LD_VAR 0 5
44000: ARRAY
44001: PUSH
44002: LD_INT 2
44004: ARRAY
44005: PPUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 255
44015: PPUSH
44016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
44020: LD_ADDR_EXP 135
44024: PUSH
44025: LD_EXP 135
44029: PPUSH
44030: LD_VAR 0 6
44034: PPUSH
44035: LD_EXP 135
44039: PUSH
44040: LD_VAR 0 6
44044: ARRAY
44045: PPUSH
44046: LD_VAR 0 5
44050: PPUSH
44051: CALL_OW 3
44055: PPUSH
44056: CALL_OW 1
44060: ST_TO_ADDR
// exit ;
44061: POP
44062: POP
44063: GO 44256
// end ; end ;
44065: GO 43905
44067: POP
44068: POP
// for i := minerMinesList [ index ] downto 1 do
44069: LD_ADDR_VAR 0 5
44073: PUSH
44074: DOUBLE
44075: LD_EXP 135
44079: PUSH
44080: LD_VAR 0 6
44084: ARRAY
44085: INC
44086: ST_TO_ADDR
44087: LD_INT 1
44089: PUSH
44090: FOR_DOWNTO
44091: IFFALSE 44254
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
44093: LD_EXP 135
44097: PUSH
44098: LD_VAR 0 6
44102: ARRAY
44103: PUSH
44104: LD_VAR 0 5
44108: ARRAY
44109: PUSH
44110: LD_INT 1
44112: ARRAY
44113: PPUSH
44114: LD_EXP 135
44118: PUSH
44119: LD_VAR 0 6
44123: ARRAY
44124: PUSH
44125: LD_VAR 0 5
44129: ARRAY
44130: PUSH
44131: LD_INT 2
44133: ARRAY
44134: PPUSH
44135: LD_VAR 0 2
44139: PPUSH
44140: LD_VAR 0 3
44144: PPUSH
44145: CALL_OW 298
44149: PUSH
44150: LD_INT 6
44152: LESS
44153: IFFALSE 44252
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
44155: LD_EXP 135
44159: PUSH
44160: LD_VAR 0 6
44164: ARRAY
44165: PUSH
44166: LD_VAR 0 5
44170: ARRAY
44171: PUSH
44172: LD_INT 1
44174: ARRAY
44175: PPUSH
44176: LD_EXP 135
44180: PUSH
44181: LD_VAR 0 6
44185: ARRAY
44186: PUSH
44187: LD_VAR 0 5
44191: ARRAY
44192: PUSH
44193: LD_INT 2
44195: ARRAY
44196: PPUSH
44197: LD_VAR 0 1
44201: PPUSH
44202: CALL_OW 255
44206: PPUSH
44207: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
44211: LD_ADDR_EXP 135
44215: PUSH
44216: LD_EXP 135
44220: PPUSH
44221: LD_VAR 0 6
44225: PPUSH
44226: LD_EXP 135
44230: PUSH
44231: LD_VAR 0 6
44235: ARRAY
44236: PPUSH
44237: LD_VAR 0 5
44241: PPUSH
44242: CALL_OW 3
44246: PPUSH
44247: CALL_OW 1
44251: ST_TO_ADDR
// end ; end ;
44252: GO 44090
44254: POP
44255: POP
// end ;
44256: LD_VAR 0 4
44260: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
44261: LD_INT 0
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 264
44281: PUSH
44282: LD_EXP 55
44286: EQUAL
44287: NOT
44288: PUSH
44289: LD_VAR 0 1
44293: PUSH
44294: LD_EXP 134
44298: IN
44299: NOT
44300: OR
44301: IFFALSE 44305
// exit ;
44303: GO 44627
// index := GetElementIndex ( minersList , unit ) ;
44305: LD_ADDR_VAR 0 6
44309: PUSH
44310: LD_EXP 134
44314: PPUSH
44315: LD_VAR 0 1
44319: PPUSH
44320: CALL 49823 0 2
44324: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
44325: LD_ADDR_VAR 0 8
44329: PUSH
44330: LD_EXP 136
44334: PUSH
44335: LD_EXP 135
44339: PUSH
44340: LD_VAR 0 6
44344: ARRAY
44345: MINUS
44346: ST_TO_ADDR
// if not minesFreeAmount then
44347: LD_VAR 0 8
44351: NOT
44352: IFFALSE 44356
// exit ;
44354: GO 44627
// tmp := [ ] ;
44356: LD_ADDR_VAR 0 7
44360: PUSH
44361: EMPTY
44362: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
44363: LD_ADDR_VAR 0 5
44367: PUSH
44368: DOUBLE
44369: LD_INT 1
44371: DEC
44372: ST_TO_ADDR
44373: LD_VAR 0 8
44377: PUSH
44378: FOR_TO
44379: IFFALSE 44574
// begin _d := rand ( 0 , 5 ) ;
44381: LD_ADDR_VAR 0 11
44385: PUSH
44386: LD_INT 0
44388: PPUSH
44389: LD_INT 5
44391: PPUSH
44392: CALL_OW 12
44396: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
44397: LD_ADDR_VAR 0 12
44401: PUSH
44402: LD_INT 2
44404: PPUSH
44405: LD_INT 6
44407: PPUSH
44408: CALL_OW 12
44412: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
44413: LD_ADDR_VAR 0 9
44417: PUSH
44418: LD_VAR 0 2
44422: PPUSH
44423: LD_VAR 0 11
44427: PPUSH
44428: LD_VAR 0 12
44432: PPUSH
44433: CALL_OW 272
44437: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
44438: LD_ADDR_VAR 0 10
44442: PUSH
44443: LD_VAR 0 3
44447: PPUSH
44448: LD_VAR 0 11
44452: PPUSH
44453: LD_VAR 0 12
44457: PPUSH
44458: CALL_OW 273
44462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
44463: LD_VAR 0 9
44467: PPUSH
44468: LD_VAR 0 10
44472: PPUSH
44473: CALL_OW 488
44477: PUSH
44478: LD_VAR 0 9
44482: PUSH
44483: LD_VAR 0 10
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_VAR 0 7
44496: IN
44497: NOT
44498: AND
44499: PUSH
44500: LD_VAR 0 9
44504: PPUSH
44505: LD_VAR 0 10
44509: PPUSH
44510: CALL_OW 458
44514: NOT
44515: AND
44516: IFFALSE 44558
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
44518: LD_ADDR_VAR 0 7
44522: PUSH
44523: LD_VAR 0 7
44527: PPUSH
44528: LD_VAR 0 7
44532: PUSH
44533: LD_INT 1
44535: PLUS
44536: PPUSH
44537: LD_VAR 0 9
44541: PUSH
44542: LD_VAR 0 10
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PPUSH
44551: CALL_OW 1
44555: ST_TO_ADDR
44556: GO 44572
// i := i - 1 ;
44558: LD_ADDR_VAR 0 5
44562: PUSH
44563: LD_VAR 0 5
44567: PUSH
44568: LD_INT 1
44570: MINUS
44571: ST_TO_ADDR
// end ;
44572: GO 44378
44574: POP
44575: POP
// for i in tmp do
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_VAR 0 7
44585: PUSH
44586: FOR_IN
44587: IFFALSE 44625
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
44589: LD_VAR 0 1
44593: PPUSH
44594: LD_VAR 0 5
44598: PUSH
44599: LD_INT 1
44601: ARRAY
44602: PPUSH
44603: LD_VAR 0 5
44607: PUSH
44608: LD_INT 2
44610: ARRAY
44611: PPUSH
44612: CALL 43567 0 3
44616: NOT
44617: IFFALSE 44623
// exit ;
44619: POP
44620: POP
44621: GO 44627
44623: GO 44586
44625: POP
44626: POP
// end ;
44627: LD_VAR 0 4
44631: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
44632: LD_INT 0
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
// if not GetClass ( unit ) = class_sniper then
44641: LD_VAR 0 1
44645: PPUSH
44646: CALL_OW 257
44650: PUSH
44651: LD_INT 5
44653: EQUAL
44654: NOT
44655: IFFALSE 44659
// exit ;
44657: GO 45047
// dist := 8 ;
44659: LD_ADDR_VAR 0 5
44663: PUSH
44664: LD_INT 8
44666: ST_TO_ADDR
// viewRange := 12 ;
44667: LD_ADDR_VAR 0 7
44671: PUSH
44672: LD_INT 12
44674: ST_TO_ADDR
// side := GetSide ( unit ) ;
44675: LD_ADDR_VAR 0 6
44679: PUSH
44680: LD_VAR 0 1
44684: PPUSH
44685: CALL_OW 255
44689: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
44690: LD_INT 61
44692: PPUSH
44693: LD_VAR 0 6
44697: PPUSH
44698: CALL_OW 321
44702: PUSH
44703: LD_INT 2
44705: EQUAL
44706: IFFALSE 44716
// viewRange := 16 ;
44708: LD_ADDR_VAR 0 7
44712: PUSH
44713: LD_INT 16
44715: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
44716: LD_VAR 0 1
44720: PPUSH
44721: LD_VAR 0 2
44725: PPUSH
44726: LD_VAR 0 3
44730: PPUSH
44731: CALL_OW 297
44735: PUSH
44736: LD_VAR 0 5
44740: GREATER
44741: IFFALSE 44820
// begin ComMoveXY ( unit , x , y ) ;
44743: LD_VAR 0 1
44747: PPUSH
44748: LD_VAR 0 2
44752: PPUSH
44753: LD_VAR 0 3
44757: PPUSH
44758: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44762: LD_INT 35
44764: PPUSH
44765: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
44769: LD_VAR 0 1
44773: PPUSH
44774: LD_VAR 0 2
44778: PPUSH
44779: LD_VAR 0 3
44783: PPUSH
44784: CALL 80595 0 3
44788: NOT
44789: IFFALSE 44793
// exit ;
44791: GO 45047
// until GetDistUnitXY ( unit , x , y ) < dist ;
44793: LD_VAR 0 1
44797: PPUSH
44798: LD_VAR 0 2
44802: PPUSH
44803: LD_VAR 0 3
44807: PPUSH
44808: CALL_OW 297
44812: PUSH
44813: LD_VAR 0 5
44817: LESS
44818: IFFALSE 44762
// end ; ComTurnXY ( unit , x , y ) ;
44820: LD_VAR 0 1
44824: PPUSH
44825: LD_VAR 0 2
44829: PPUSH
44830: LD_VAR 0 3
44834: PPUSH
44835: CALL_OW 118
// wait ( 5 ) ;
44839: LD_INT 5
44841: PPUSH
44842: CALL_OW 67
// _d := GetDir ( unit ) ;
44846: LD_ADDR_VAR 0 10
44850: PUSH
44851: LD_VAR 0 1
44855: PPUSH
44856: CALL_OW 254
44860: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44861: LD_ADDR_VAR 0 8
44865: PUSH
44866: LD_VAR 0 1
44870: PPUSH
44871: CALL_OW 250
44875: PPUSH
44876: LD_VAR 0 10
44880: PPUSH
44881: LD_VAR 0 5
44885: PPUSH
44886: CALL_OW 272
44890: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44891: LD_ADDR_VAR 0 9
44895: PUSH
44896: LD_VAR 0 1
44900: PPUSH
44901: CALL_OW 251
44905: PPUSH
44906: LD_VAR 0 10
44910: PPUSH
44911: LD_VAR 0 5
44915: PPUSH
44916: CALL_OW 273
44920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44921: LD_VAR 0 8
44925: PPUSH
44926: LD_VAR 0 9
44930: PPUSH
44931: CALL_OW 488
44935: NOT
44936: IFFALSE 44940
// exit ;
44938: GO 45047
// ComAnimCustom ( unit , 1 ) ;
44940: LD_VAR 0 1
44944: PPUSH
44945: LD_INT 1
44947: PPUSH
44948: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44952: LD_VAR 0 8
44956: PPUSH
44957: LD_VAR 0 9
44961: PPUSH
44962: LD_VAR 0 6
44966: PPUSH
44967: LD_VAR 0 7
44971: PPUSH
44972: CALL_OW 330
// repeat wait ( 1 ) ;
44976: LD_INT 1
44978: PPUSH
44979: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44983: LD_VAR 0 1
44987: PPUSH
44988: CALL_OW 316
44992: PUSH
44993: LD_VAR 0 1
44997: PPUSH
44998: CALL_OW 314
45002: OR
45003: PUSH
45004: LD_VAR 0 1
45008: PPUSH
45009: CALL_OW 302
45013: NOT
45014: OR
45015: PUSH
45016: LD_VAR 0 1
45020: PPUSH
45021: CALL_OW 301
45025: OR
45026: IFFALSE 44976
// RemoveSeeing ( _x , _y , side ) ;
45028: LD_VAR 0 8
45032: PPUSH
45033: LD_VAR 0 9
45037: PPUSH
45038: LD_VAR 0 6
45042: PPUSH
45043: CALL_OW 331
// end ; end_of_file
45047: LD_VAR 0 4
45051: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
45052: LD_INT 0
45054: PPUSH
45055: PPUSH
// if exist_mode then
45056: LD_VAR 0 2
45060: IFFALSE 45085
// unit := CreateCharacter ( prefix & ident ) else
45062: LD_ADDR_VAR 0 5
45066: PUSH
45067: LD_VAR 0 3
45071: PUSH
45072: LD_VAR 0 1
45076: STR
45077: PPUSH
45078: CALL_OW 34
45082: ST_TO_ADDR
45083: GO 45100
// unit := NewCharacter ( ident ) ;
45085: LD_ADDR_VAR 0 5
45089: PUSH
45090: LD_VAR 0 1
45094: PPUSH
45095: CALL_OW 25
45099: ST_TO_ADDR
// result := unit ;
45100: LD_ADDR_VAR 0 4
45104: PUSH
45105: LD_VAR 0 5
45109: ST_TO_ADDR
// end ;
45110: LD_VAR 0 4
45114: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
45115: LD_INT 0
45117: PPUSH
45118: PPUSH
// if not side or not nation then
45119: LD_VAR 0 1
45123: NOT
45124: PUSH
45125: LD_VAR 0 2
45129: NOT
45130: OR
45131: IFFALSE 45135
// exit ;
45133: GO 45903
// case nation of nation_american :
45135: LD_VAR 0 2
45139: PUSH
45140: LD_INT 1
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45362
45148: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
45149: LD_ADDR_VAR 0 4
45153: PUSH
45154: LD_INT 35
45156: PUSH
45157: LD_INT 45
45159: PUSH
45160: LD_INT 46
45162: PUSH
45163: LD_INT 47
45165: PUSH
45166: LD_INT 82
45168: PUSH
45169: LD_INT 83
45171: PUSH
45172: LD_INT 84
45174: PUSH
45175: LD_INT 85
45177: PUSH
45178: LD_INT 86
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 6
45189: PUSH
45190: LD_INT 15
45192: PUSH
45193: LD_INT 16
45195: PUSH
45196: LD_INT 7
45198: PUSH
45199: LD_INT 12
45201: PUSH
45202: LD_INT 13
45204: PUSH
45205: LD_INT 10
45207: PUSH
45208: LD_INT 14
45210: PUSH
45211: LD_INT 20
45213: PUSH
45214: LD_INT 21
45216: PUSH
45217: LD_INT 22
45219: PUSH
45220: LD_INT 25
45222: PUSH
45223: LD_INT 32
45225: PUSH
45226: LD_INT 27
45228: PUSH
45229: LD_INT 36
45231: PUSH
45232: LD_INT 69
45234: PUSH
45235: LD_INT 39
45237: PUSH
45238: LD_INT 34
45240: PUSH
45241: LD_INT 40
45243: PUSH
45244: LD_INT 48
45246: PUSH
45247: LD_INT 49
45249: PUSH
45250: LD_INT 50
45252: PUSH
45253: LD_INT 51
45255: PUSH
45256: LD_INT 52
45258: PUSH
45259: LD_INT 53
45261: PUSH
45262: LD_INT 54
45264: PUSH
45265: LD_INT 55
45267: PUSH
45268: LD_INT 56
45270: PUSH
45271: LD_INT 57
45273: PUSH
45274: LD_INT 58
45276: PUSH
45277: LD_INT 59
45279: PUSH
45280: LD_INT 60
45282: PUSH
45283: LD_INT 61
45285: PUSH
45286: LD_INT 62
45288: PUSH
45289: LD_INT 80
45291: PUSH
45292: LD_INT 82
45294: PUSH
45295: LD_INT 83
45297: PUSH
45298: LD_INT 84
45300: PUSH
45301: LD_INT 85
45303: PUSH
45304: LD_INT 86
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
45360: GO 45827
45362: LD_INT 2
45364: DOUBLE
45365: EQUAL
45366: IFTRUE 45370
45368: GO 45596
45370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
45371: LD_ADDR_VAR 0 4
45375: PUSH
45376: LD_INT 35
45378: PUSH
45379: LD_INT 45
45381: PUSH
45382: LD_INT 46
45384: PUSH
45385: LD_INT 47
45387: PUSH
45388: LD_INT 82
45390: PUSH
45391: LD_INT 83
45393: PUSH
45394: LD_INT 84
45396: PUSH
45397: LD_INT 85
45399: PUSH
45400: LD_INT 87
45402: PUSH
45403: LD_INT 70
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 11
45411: PUSH
45412: LD_INT 3
45414: PUSH
45415: LD_INT 4
45417: PUSH
45418: LD_INT 5
45420: PUSH
45421: LD_INT 6
45423: PUSH
45424: LD_INT 15
45426: PUSH
45427: LD_INT 18
45429: PUSH
45430: LD_INT 7
45432: PUSH
45433: LD_INT 17
45435: PUSH
45436: LD_INT 8
45438: PUSH
45439: LD_INT 20
45441: PUSH
45442: LD_INT 21
45444: PUSH
45445: LD_INT 22
45447: PUSH
45448: LD_INT 72
45450: PUSH
45451: LD_INT 26
45453: PUSH
45454: LD_INT 69
45456: PUSH
45457: LD_INT 39
45459: PUSH
45460: LD_INT 40
45462: PUSH
45463: LD_INT 41
45465: PUSH
45466: LD_INT 42
45468: PUSH
45469: LD_INT 43
45471: PUSH
45472: LD_INT 48
45474: PUSH
45475: LD_INT 49
45477: PUSH
45478: LD_INT 50
45480: PUSH
45481: LD_INT 51
45483: PUSH
45484: LD_INT 52
45486: PUSH
45487: LD_INT 53
45489: PUSH
45490: LD_INT 54
45492: PUSH
45493: LD_INT 55
45495: PUSH
45496: LD_INT 56
45498: PUSH
45499: LD_INT 60
45501: PUSH
45502: LD_INT 61
45504: PUSH
45505: LD_INT 62
45507: PUSH
45508: LD_INT 66
45510: PUSH
45511: LD_INT 67
45513: PUSH
45514: LD_INT 68
45516: PUSH
45517: LD_INT 81
45519: PUSH
45520: LD_INT 82
45522: PUSH
45523: LD_INT 83
45525: PUSH
45526: LD_INT 84
45528: PUSH
45529: LD_INT 85
45531: PUSH
45532: LD_INT 87
45534: PUSH
45535: LD_INT 88
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
45594: GO 45827
45596: LD_INT 3
45598: DOUBLE
45599: EQUAL
45600: IFTRUE 45604
45602: GO 45826
45604: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
45605: LD_ADDR_VAR 0 4
45609: PUSH
45610: LD_INT 46
45612: PUSH
45613: LD_INT 47
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 82
45624: PUSH
45625: LD_INT 83
45627: PUSH
45628: LD_INT 84
45630: PUSH
45631: LD_INT 85
45633: PUSH
45634: LD_INT 86
45636: PUSH
45637: LD_INT 11
45639: PUSH
45640: LD_INT 9
45642: PUSH
45643: LD_INT 20
45645: PUSH
45646: LD_INT 19
45648: PUSH
45649: LD_INT 21
45651: PUSH
45652: LD_INT 24
45654: PUSH
45655: LD_INT 22
45657: PUSH
45658: LD_INT 25
45660: PUSH
45661: LD_INT 28
45663: PUSH
45664: LD_INT 29
45666: PUSH
45667: LD_INT 30
45669: PUSH
45670: LD_INT 31
45672: PUSH
45673: LD_INT 37
45675: PUSH
45676: LD_INT 38
45678: PUSH
45679: LD_INT 32
45681: PUSH
45682: LD_INT 27
45684: PUSH
45685: LD_INT 33
45687: PUSH
45688: LD_INT 69
45690: PUSH
45691: LD_INT 39
45693: PUSH
45694: LD_INT 34
45696: PUSH
45697: LD_INT 40
45699: PUSH
45700: LD_INT 71
45702: PUSH
45703: LD_INT 23
45705: PUSH
45706: LD_INT 44
45708: PUSH
45709: LD_INT 48
45711: PUSH
45712: LD_INT 49
45714: PUSH
45715: LD_INT 50
45717: PUSH
45718: LD_INT 51
45720: PUSH
45721: LD_INT 52
45723: PUSH
45724: LD_INT 53
45726: PUSH
45727: LD_INT 54
45729: PUSH
45730: LD_INT 55
45732: PUSH
45733: LD_INT 56
45735: PUSH
45736: LD_INT 57
45738: PUSH
45739: LD_INT 58
45741: PUSH
45742: LD_INT 59
45744: PUSH
45745: LD_INT 63
45747: PUSH
45748: LD_INT 64
45750: PUSH
45751: LD_INT 65
45753: PUSH
45754: LD_INT 82
45756: PUSH
45757: LD_INT 83
45759: PUSH
45760: LD_INT 84
45762: PUSH
45763: LD_INT 85
45765: PUSH
45766: LD_INT 86
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: ST_TO_ADDR
45824: GO 45827
45826: POP
// if state > - 1 and state < 3 then
45827: LD_VAR 0 3
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: GREATER
45836: PUSH
45837: LD_VAR 0 3
45841: PUSH
45842: LD_INT 3
45844: LESS
45845: AND
45846: IFFALSE 45903
// for i in result do
45848: LD_ADDR_VAR 0 5
45852: PUSH
45853: LD_VAR 0 4
45857: PUSH
45858: FOR_IN
45859: IFFALSE 45901
// if GetTech ( i , side ) <> state then
45861: LD_VAR 0 5
45865: PPUSH
45866: LD_VAR 0 1
45870: PPUSH
45871: CALL_OW 321
45875: PUSH
45876: LD_VAR 0 3
45880: NONEQUAL
45881: IFFALSE 45899
// result := result diff i ;
45883: LD_ADDR_VAR 0 4
45887: PUSH
45888: LD_VAR 0 4
45892: PUSH
45893: LD_VAR 0 5
45897: DIFF
45898: ST_TO_ADDR
45899: GO 45858
45901: POP
45902: POP
// end ;
45903: LD_VAR 0 4
45907: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45908: LD_INT 0
45910: PPUSH
45911: PPUSH
45912: PPUSH
// result := true ;
45913: LD_ADDR_VAR 0 3
45917: PUSH
45918: LD_INT 1
45920: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45921: LD_ADDR_VAR 0 5
45925: PUSH
45926: LD_VAR 0 2
45930: PPUSH
45931: CALL_OW 480
45935: ST_TO_ADDR
// if not tmp then
45936: LD_VAR 0 5
45940: NOT
45941: IFFALSE 45945
// exit ;
45943: GO 45994
// for i in tmp do
45945: LD_ADDR_VAR 0 4
45949: PUSH
45950: LD_VAR 0 5
45954: PUSH
45955: FOR_IN
45956: IFFALSE 45992
// if GetTech ( i , side ) <> state_researched then
45958: LD_VAR 0 4
45962: PPUSH
45963: LD_VAR 0 1
45967: PPUSH
45968: CALL_OW 321
45972: PUSH
45973: LD_INT 2
45975: NONEQUAL
45976: IFFALSE 45990
// begin result := false ;
45978: LD_ADDR_VAR 0 3
45982: PUSH
45983: LD_INT 0
45985: ST_TO_ADDR
// exit ;
45986: POP
45987: POP
45988: GO 45994
// end ;
45990: GO 45955
45992: POP
45993: POP
// end ;
45994: LD_VAR 0 3
45998: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45999: LD_INT 0
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
46013: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
46014: LD_VAR 0 1
46018: NOT
46019: PUSH
46020: LD_VAR 0 1
46024: PPUSH
46025: CALL_OW 257
46029: PUSH
46030: LD_INT 9
46032: NONEQUAL
46033: OR
46034: IFFALSE 46038
// exit ;
46036: GO 46611
// side := GetSide ( unit ) ;
46038: LD_ADDR_VAR 0 9
46042: PUSH
46043: LD_VAR 0 1
46047: PPUSH
46048: CALL_OW 255
46052: ST_TO_ADDR
// tech_space := tech_spacanom ;
46053: LD_ADDR_VAR 0 12
46057: PUSH
46058: LD_INT 29
46060: ST_TO_ADDR
// tech_time := tech_taurad ;
46061: LD_ADDR_VAR 0 13
46065: PUSH
46066: LD_INT 28
46068: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
46069: LD_ADDR_VAR 0 11
46073: PUSH
46074: LD_VAR 0 1
46078: PPUSH
46079: CALL_OW 310
46083: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
46084: LD_VAR 0 11
46088: PPUSH
46089: CALL_OW 247
46093: PUSH
46094: LD_INT 2
46096: EQUAL
46097: IFFALSE 46101
// exit ;
46099: GO 46611
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46101: LD_ADDR_VAR 0 8
46105: PUSH
46106: LD_INT 81
46108: PUSH
46109: LD_VAR 0 9
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: LD_INT 21
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PPUSH
46139: CALL_OW 69
46143: ST_TO_ADDR
// if not tmp then
46144: LD_VAR 0 8
46148: NOT
46149: IFFALSE 46153
// exit ;
46151: GO 46611
// if in_unit then
46153: LD_VAR 0 11
46157: IFFALSE 46181
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
46159: LD_ADDR_VAR 0 10
46163: PUSH
46164: LD_VAR 0 8
46168: PPUSH
46169: LD_VAR 0 11
46173: PPUSH
46174: CALL_OW 74
46178: ST_TO_ADDR
46179: GO 46201
// enemy := NearestUnitToUnit ( tmp , unit ) ;
46181: LD_ADDR_VAR 0 10
46185: PUSH
46186: LD_VAR 0 8
46190: PPUSH
46191: LD_VAR 0 1
46195: PPUSH
46196: CALL_OW 74
46200: ST_TO_ADDR
// if not enemy then
46201: LD_VAR 0 10
46205: NOT
46206: IFFALSE 46210
// exit ;
46208: GO 46611
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
46210: LD_VAR 0 11
46214: PUSH
46215: LD_VAR 0 11
46219: PPUSH
46220: LD_VAR 0 10
46224: PPUSH
46225: CALL_OW 296
46229: PUSH
46230: LD_INT 13
46232: GREATER
46233: AND
46234: PUSH
46235: LD_VAR 0 1
46239: PPUSH
46240: LD_VAR 0 10
46244: PPUSH
46245: CALL_OW 296
46249: PUSH
46250: LD_INT 12
46252: GREATER
46253: OR
46254: IFFALSE 46258
// exit ;
46256: GO 46611
// missile := [ 1 ] ;
46258: LD_ADDR_VAR 0 14
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: ST_TO_ADDR
// if Researched ( side , tech_space ) then
46269: LD_VAR 0 9
46273: PPUSH
46274: LD_VAR 0 12
46278: PPUSH
46279: CALL_OW 325
46283: IFFALSE 46312
// missile := Insert ( missile , missile + 1 , 2 ) ;
46285: LD_ADDR_VAR 0 14
46289: PUSH
46290: LD_VAR 0 14
46294: PPUSH
46295: LD_VAR 0 14
46299: PUSH
46300: LD_INT 1
46302: PLUS
46303: PPUSH
46304: LD_INT 2
46306: PPUSH
46307: CALL_OW 2
46311: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
46312: LD_VAR 0 9
46316: PPUSH
46317: LD_VAR 0 13
46321: PPUSH
46322: CALL_OW 325
46326: PUSH
46327: LD_VAR 0 10
46331: PPUSH
46332: CALL_OW 255
46336: PPUSH
46337: LD_VAR 0 13
46341: PPUSH
46342: CALL_OW 325
46346: NOT
46347: AND
46348: IFFALSE 46377
// missile := Insert ( missile , missile + 1 , 3 ) ;
46350: LD_ADDR_VAR 0 14
46354: PUSH
46355: LD_VAR 0 14
46359: PPUSH
46360: LD_VAR 0 14
46364: PUSH
46365: LD_INT 1
46367: PLUS
46368: PPUSH
46369: LD_INT 3
46371: PPUSH
46372: CALL_OW 2
46376: ST_TO_ADDR
// if missile < 2 then
46377: LD_VAR 0 14
46381: PUSH
46382: LD_INT 2
46384: LESS
46385: IFFALSE 46389
// exit ;
46387: GO 46611
// x := GetX ( enemy ) ;
46389: LD_ADDR_VAR 0 4
46393: PUSH
46394: LD_VAR 0 10
46398: PPUSH
46399: CALL_OW 250
46403: ST_TO_ADDR
// y := GetY ( enemy ) ;
46404: LD_ADDR_VAR 0 5
46408: PUSH
46409: LD_VAR 0 10
46413: PPUSH
46414: CALL_OW 251
46418: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
46419: LD_ADDR_VAR 0 6
46423: PUSH
46424: LD_VAR 0 4
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PPUSH
46433: LD_INT 1
46435: PPUSH
46436: CALL_OW 12
46440: PLUS
46441: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
46442: LD_ADDR_VAR 0 7
46446: PUSH
46447: LD_VAR 0 5
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PPUSH
46456: LD_INT 1
46458: PPUSH
46459: CALL_OW 12
46463: PLUS
46464: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46465: LD_VAR 0 6
46469: PPUSH
46470: LD_VAR 0 7
46474: PPUSH
46475: CALL_OW 488
46479: NOT
46480: IFFALSE 46502
// begin _x := x ;
46482: LD_ADDR_VAR 0 6
46486: PUSH
46487: LD_VAR 0 4
46491: ST_TO_ADDR
// _y := y ;
46492: LD_ADDR_VAR 0 7
46496: PUSH
46497: LD_VAR 0 5
46501: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
46502: LD_ADDR_VAR 0 3
46506: PUSH
46507: LD_INT 1
46509: PPUSH
46510: LD_VAR 0 14
46514: PPUSH
46515: CALL_OW 12
46519: ST_TO_ADDR
// case i of 1 :
46520: LD_VAR 0 3
46524: PUSH
46525: LD_INT 1
46527: DOUBLE
46528: EQUAL
46529: IFTRUE 46533
46531: GO 46550
46533: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
46534: LD_VAR 0 1
46538: PPUSH
46539: LD_VAR 0 10
46543: PPUSH
46544: CALL_OW 115
46548: GO 46611
46550: LD_INT 2
46552: DOUBLE
46553: EQUAL
46554: IFTRUE 46558
46556: GO 46580
46558: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
46559: LD_VAR 0 1
46563: PPUSH
46564: LD_VAR 0 6
46568: PPUSH
46569: LD_VAR 0 7
46573: PPUSH
46574: CALL_OW 153
46578: GO 46611
46580: LD_INT 3
46582: DOUBLE
46583: EQUAL
46584: IFTRUE 46588
46586: GO 46610
46588: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
46589: LD_VAR 0 1
46593: PPUSH
46594: LD_VAR 0 6
46598: PPUSH
46599: LD_VAR 0 7
46603: PPUSH
46604: CALL_OW 154
46608: GO 46611
46610: POP
// end ;
46611: LD_VAR 0 2
46615: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46616: LD_INT 0
46618: PPUSH
46619: PPUSH
46620: PPUSH
46621: PPUSH
46622: PPUSH
46623: PPUSH
// if not unit or not building then
46624: LD_VAR 0 1
46628: NOT
46629: PUSH
46630: LD_VAR 0 2
46634: NOT
46635: OR
46636: IFFALSE 46640
// exit ;
46638: GO 46798
// x := GetX ( building ) ;
46640: LD_ADDR_VAR 0 5
46644: PUSH
46645: LD_VAR 0 2
46649: PPUSH
46650: CALL_OW 250
46654: ST_TO_ADDR
// y := GetY ( building ) ;
46655: LD_ADDR_VAR 0 6
46659: PUSH
46660: LD_VAR 0 2
46664: PPUSH
46665: CALL_OW 251
46669: ST_TO_ADDR
// for i = 0 to 5 do
46670: LD_ADDR_VAR 0 4
46674: PUSH
46675: DOUBLE
46676: LD_INT 0
46678: DEC
46679: ST_TO_ADDR
46680: LD_INT 5
46682: PUSH
46683: FOR_TO
46684: IFFALSE 46796
// begin _x := ShiftX ( x , i , 3 ) ;
46686: LD_ADDR_VAR 0 7
46690: PUSH
46691: LD_VAR 0 5
46695: PPUSH
46696: LD_VAR 0 4
46700: PPUSH
46701: LD_INT 3
46703: PPUSH
46704: CALL_OW 272
46708: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46709: LD_ADDR_VAR 0 8
46713: PUSH
46714: LD_VAR 0 6
46718: PPUSH
46719: LD_VAR 0 4
46723: PPUSH
46724: LD_INT 3
46726: PPUSH
46727: CALL_OW 273
46731: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46732: LD_VAR 0 7
46736: PPUSH
46737: LD_VAR 0 8
46741: PPUSH
46742: CALL_OW 488
46746: NOT
46747: IFFALSE 46751
// continue ;
46749: GO 46683
// if HexInfo ( _x , _y ) = 0 then
46751: LD_VAR 0 7
46755: PPUSH
46756: LD_VAR 0 8
46760: PPUSH
46761: CALL_OW 428
46765: PUSH
46766: LD_INT 0
46768: EQUAL
46769: IFFALSE 46794
// begin ComMoveXY ( unit , _x , _y ) ;
46771: LD_VAR 0 1
46775: PPUSH
46776: LD_VAR 0 7
46780: PPUSH
46781: LD_VAR 0 8
46785: PPUSH
46786: CALL_OW 111
// exit ;
46790: POP
46791: POP
46792: GO 46798
// end ; end ;
46794: GO 46683
46796: POP
46797: POP
// end ;
46798: LD_VAR 0 3
46802: RET
// export function ScanBase ( side , base_area ) ; begin
46803: LD_INT 0
46805: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46806: LD_ADDR_VAR 0 3
46810: PUSH
46811: LD_VAR 0 2
46815: PPUSH
46816: LD_INT 81
46818: PUSH
46819: LD_VAR 0 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PPUSH
46828: CALL_OW 70
46832: ST_TO_ADDR
// end ;
46833: LD_VAR 0 3
46837: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46838: LD_INT 0
46840: PPUSH
46841: PPUSH
46842: PPUSH
46843: PPUSH
// result := false ;
46844: LD_ADDR_VAR 0 2
46848: PUSH
46849: LD_INT 0
46851: ST_TO_ADDR
// side := GetSide ( unit ) ;
46852: LD_ADDR_VAR 0 3
46856: PUSH
46857: LD_VAR 0 1
46861: PPUSH
46862: CALL_OW 255
46866: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46867: LD_ADDR_VAR 0 4
46871: PUSH
46872: LD_VAR 0 1
46876: PPUSH
46877: CALL_OW 248
46881: ST_TO_ADDR
// case nat of 1 :
46882: LD_VAR 0 4
46886: PUSH
46887: LD_INT 1
46889: DOUBLE
46890: EQUAL
46891: IFTRUE 46895
46893: GO 46906
46895: POP
// tech := tech_lassight ; 2 :
46896: LD_ADDR_VAR 0 5
46900: PUSH
46901: LD_INT 12
46903: ST_TO_ADDR
46904: GO 46945
46906: LD_INT 2
46908: DOUBLE
46909: EQUAL
46910: IFTRUE 46914
46912: GO 46925
46914: POP
// tech := tech_mortar ; 3 :
46915: LD_ADDR_VAR 0 5
46919: PUSH
46920: LD_INT 41
46922: ST_TO_ADDR
46923: GO 46945
46925: LD_INT 3
46927: DOUBLE
46928: EQUAL
46929: IFTRUE 46933
46931: GO 46944
46933: POP
// tech := tech_bazooka ; end ;
46934: LD_ADDR_VAR 0 5
46938: PUSH
46939: LD_INT 44
46941: ST_TO_ADDR
46942: GO 46945
46944: POP
// if Researched ( side , tech ) then
46945: LD_VAR 0 3
46949: PPUSH
46950: LD_VAR 0 5
46954: PPUSH
46955: CALL_OW 325
46959: IFFALSE 46986
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46961: LD_ADDR_VAR 0 2
46965: PUSH
46966: LD_INT 5
46968: PUSH
46969: LD_INT 8
46971: PUSH
46972: LD_INT 9
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: PUSH
46980: LD_VAR 0 4
46984: ARRAY
46985: ST_TO_ADDR
// end ;
46986: LD_VAR 0 2
46990: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46991: LD_INT 0
46993: PPUSH
46994: PPUSH
46995: PPUSH
// if not mines then
46996: LD_VAR 0 2
47000: NOT
47001: IFFALSE 47005
// exit ;
47003: GO 47149
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47005: LD_ADDR_VAR 0 5
47009: PUSH
47010: LD_INT 81
47012: PUSH
47013: LD_VAR 0 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 21
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PPUSH
47043: CALL_OW 69
47047: ST_TO_ADDR
// for i in mines do
47048: LD_ADDR_VAR 0 4
47052: PUSH
47053: LD_VAR 0 2
47057: PUSH
47058: FOR_IN
47059: IFFALSE 47147
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
47061: LD_VAR 0 4
47065: PUSH
47066: LD_INT 1
47068: ARRAY
47069: PPUSH
47070: LD_VAR 0 4
47074: PUSH
47075: LD_INT 2
47077: ARRAY
47078: PPUSH
47079: CALL_OW 458
47083: NOT
47084: IFFALSE 47088
// continue ;
47086: GO 47058
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
47088: LD_VAR 0 4
47092: PUSH
47093: LD_INT 1
47095: ARRAY
47096: PPUSH
47097: LD_VAR 0 4
47101: PUSH
47102: LD_INT 2
47104: ARRAY
47105: PPUSH
47106: CALL_OW 428
47110: PUSH
47111: LD_VAR 0 5
47115: IN
47116: IFFALSE 47145
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
47118: LD_VAR 0 4
47122: PUSH
47123: LD_INT 1
47125: ARRAY
47126: PPUSH
47127: LD_VAR 0 4
47131: PUSH
47132: LD_INT 2
47134: ARRAY
47135: PPUSH
47136: LD_VAR 0 1
47140: PPUSH
47141: CALL_OW 456
// end ;
47145: GO 47058
47147: POP
47148: POP
// end ;
47149: LD_VAR 0 3
47153: RET
// export function Count ( array ) ; var i ; begin
47154: LD_INT 0
47156: PPUSH
47157: PPUSH
// result := 0 ;
47158: LD_ADDR_VAR 0 2
47162: PUSH
47163: LD_INT 0
47165: ST_TO_ADDR
// for i in array do
47166: LD_ADDR_VAR 0 3
47170: PUSH
47171: LD_VAR 0 1
47175: PUSH
47176: FOR_IN
47177: IFFALSE 47201
// if i then
47179: LD_VAR 0 3
47183: IFFALSE 47199
// result := result + 1 ;
47185: LD_ADDR_VAR 0 2
47189: PUSH
47190: LD_VAR 0 2
47194: PUSH
47195: LD_INT 1
47197: PLUS
47198: ST_TO_ADDR
47199: GO 47176
47201: POP
47202: POP
// end ;
47203: LD_VAR 0 2
47207: RET
// export function IsEmpty ( building ) ; begin
47208: LD_INT 0
47210: PPUSH
// if not building then
47211: LD_VAR 0 1
47215: NOT
47216: IFFALSE 47220
// exit ;
47218: GO 47263
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
47220: LD_ADDR_VAR 0 2
47224: PUSH
47225: LD_VAR 0 1
47229: PUSH
47230: LD_INT 22
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 255
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 58
47249: PUSH
47250: EMPTY
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PPUSH
47257: CALL_OW 69
47261: IN
47262: ST_TO_ADDR
// end ;
47263: LD_VAR 0 2
47267: RET
// export function IsNotFull ( building ) ; begin
47268: LD_INT 0
47270: PPUSH
// if not building then
47271: LD_VAR 0 1
47275: NOT
47276: IFFALSE 47280
// exit ;
47278: GO 47299
// result := UnitsInside ( building ) < 6 ;
47280: LD_ADDR_VAR 0 2
47284: PUSH
47285: LD_VAR 0 1
47289: PPUSH
47290: CALL_OW 313
47294: PUSH
47295: LD_INT 6
47297: LESS
47298: ST_TO_ADDR
// end ;
47299: LD_VAR 0 2
47303: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
47304: LD_INT 0
47306: PPUSH
47307: PPUSH
47308: PPUSH
47309: PPUSH
// tmp := [ ] ;
47310: LD_ADDR_VAR 0 3
47314: PUSH
47315: EMPTY
47316: ST_TO_ADDR
// list := [ ] ;
47317: LD_ADDR_VAR 0 5
47321: PUSH
47322: EMPTY
47323: ST_TO_ADDR
// for i = 16 to 25 do
47324: LD_ADDR_VAR 0 4
47328: PUSH
47329: DOUBLE
47330: LD_INT 16
47332: DEC
47333: ST_TO_ADDR
47334: LD_INT 25
47336: PUSH
47337: FOR_TO
47338: IFFALSE 47411
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
47340: LD_ADDR_VAR 0 3
47344: PUSH
47345: LD_VAR 0 3
47349: PUSH
47350: LD_INT 22
47352: PUSH
47353: LD_VAR 0 1
47357: PPUSH
47358: CALL_OW 255
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 91
47369: PUSH
47370: LD_VAR 0 1
47374: PUSH
47375: LD_INT 6
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 30
47385: PUSH
47386: LD_VAR 0 4
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: PPUSH
47403: CALL_OW 69
47407: ADD
47408: ST_TO_ADDR
47409: GO 47337
47411: POP
47412: POP
// for i = 1 to tmp do
47413: LD_ADDR_VAR 0 4
47417: PUSH
47418: DOUBLE
47419: LD_INT 1
47421: DEC
47422: ST_TO_ADDR
47423: LD_VAR 0 3
47427: PUSH
47428: FOR_TO
47429: IFFALSE 47517
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
47431: LD_ADDR_VAR 0 5
47435: PUSH
47436: LD_VAR 0 5
47440: PUSH
47441: LD_VAR 0 3
47445: PUSH
47446: LD_VAR 0 4
47450: ARRAY
47451: PPUSH
47452: CALL_OW 266
47456: PUSH
47457: LD_VAR 0 3
47461: PUSH
47462: LD_VAR 0 4
47466: ARRAY
47467: PPUSH
47468: CALL_OW 250
47472: PUSH
47473: LD_VAR 0 3
47477: PUSH
47478: LD_VAR 0 4
47482: ARRAY
47483: PPUSH
47484: CALL_OW 251
47488: PUSH
47489: LD_VAR 0 3
47493: PUSH
47494: LD_VAR 0 4
47498: ARRAY
47499: PPUSH
47500: CALL_OW 254
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: ADD
47514: ST_TO_ADDR
47515: GO 47428
47517: POP
47518: POP
// result := list ;
47519: LD_ADDR_VAR 0 2
47523: PUSH
47524: LD_VAR 0 5
47528: ST_TO_ADDR
// end ;
47529: LD_VAR 0 2
47533: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
47534: LD_INT 0
47536: PPUSH
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
// if not factory then
47543: LD_VAR 0 1
47547: NOT
47548: IFFALSE 47552
// exit ;
47550: GO 48145
// if control = control_apeman then
47552: LD_VAR 0 4
47556: PUSH
47557: LD_INT 5
47559: EQUAL
47560: IFFALSE 47669
// begin tmp := UnitsInside ( factory ) ;
47562: LD_ADDR_VAR 0 8
47566: PUSH
47567: LD_VAR 0 1
47571: PPUSH
47572: CALL_OW 313
47576: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
47577: LD_VAR 0 8
47581: PPUSH
47582: LD_INT 25
47584: PUSH
47585: LD_INT 12
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PPUSH
47592: CALL_OW 72
47596: NOT
47597: IFFALSE 47607
// control := control_manual ;
47599: LD_ADDR_VAR 0 4
47603: PUSH
47604: LD_INT 1
47606: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
47607: LD_ADDR_VAR 0 8
47611: PUSH
47612: LD_VAR 0 1
47616: PPUSH
47617: CALL 47304 0 1
47621: ST_TO_ADDR
// if tmp then
47622: LD_VAR 0 8
47626: IFFALSE 47669
// begin for i in tmp do
47628: LD_ADDR_VAR 0 7
47632: PUSH
47633: LD_VAR 0 8
47637: PUSH
47638: FOR_IN
47639: IFFALSE 47667
// if i [ 1 ] = b_ext_radio then
47641: LD_VAR 0 7
47645: PUSH
47646: LD_INT 1
47648: ARRAY
47649: PUSH
47650: LD_INT 22
47652: EQUAL
47653: IFFALSE 47665
// begin control := control_remote ;
47655: LD_ADDR_VAR 0 4
47659: PUSH
47660: LD_INT 2
47662: ST_TO_ADDR
// break ;
47663: GO 47667
// end ;
47665: GO 47638
47667: POP
47668: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47669: LD_VAR 0 1
47673: PPUSH
47674: LD_VAR 0 2
47678: PPUSH
47679: LD_VAR 0 3
47683: PPUSH
47684: LD_VAR 0 4
47688: PPUSH
47689: LD_VAR 0 5
47693: PPUSH
47694: CALL_OW 448
47698: IFFALSE 47733
// begin result := [ chassis , engine , control , weapon ] ;
47700: LD_ADDR_VAR 0 6
47704: PUSH
47705: LD_VAR 0 2
47709: PUSH
47710: LD_VAR 0 3
47714: PUSH
47715: LD_VAR 0 4
47719: PUSH
47720: LD_VAR 0 5
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// exit ;
47731: GO 48145
// end ; _chassis := AvailableChassisList ( factory ) ;
47733: LD_ADDR_VAR 0 9
47737: PUSH
47738: LD_VAR 0 1
47742: PPUSH
47743: CALL_OW 475
47747: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47748: LD_ADDR_VAR 0 11
47752: PUSH
47753: LD_VAR 0 1
47757: PPUSH
47758: CALL_OW 476
47762: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47763: LD_ADDR_VAR 0 12
47767: PUSH
47768: LD_VAR 0 1
47772: PPUSH
47773: CALL_OW 477
47777: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47778: LD_ADDR_VAR 0 10
47782: PUSH
47783: LD_VAR 0 1
47787: PPUSH
47788: CALL_OW 478
47792: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47793: LD_VAR 0 9
47797: NOT
47798: PUSH
47799: LD_VAR 0 11
47803: NOT
47804: OR
47805: PUSH
47806: LD_VAR 0 12
47810: NOT
47811: OR
47812: PUSH
47813: LD_VAR 0 10
47817: NOT
47818: OR
47819: IFFALSE 47854
// begin result := [ chassis , engine , control , weapon ] ;
47821: LD_ADDR_VAR 0 6
47825: PUSH
47826: LD_VAR 0 2
47830: PUSH
47831: LD_VAR 0 3
47835: PUSH
47836: LD_VAR 0 4
47840: PUSH
47841: LD_VAR 0 5
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// exit ;
47852: GO 48145
// end ; if not chassis in _chassis then
47854: LD_VAR 0 2
47858: PUSH
47859: LD_VAR 0 9
47863: IN
47864: NOT
47865: IFFALSE 47891
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47867: LD_ADDR_VAR 0 2
47871: PUSH
47872: LD_VAR 0 9
47876: PUSH
47877: LD_INT 1
47879: PPUSH
47880: LD_VAR 0 9
47884: PPUSH
47885: CALL_OW 12
47889: ARRAY
47890: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47891: LD_VAR 0 2
47895: PPUSH
47896: LD_VAR 0 3
47900: PPUSH
47901: CALL 48150 0 2
47905: NOT
47906: IFFALSE 47965
// repeat engine := _engine [ 1 ] ;
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_VAR 0 11
47917: PUSH
47918: LD_INT 1
47920: ARRAY
47921: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47922: LD_ADDR_VAR 0 11
47926: PUSH
47927: LD_VAR 0 11
47931: PPUSH
47932: LD_INT 1
47934: PPUSH
47935: CALL_OW 3
47939: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47940: LD_VAR 0 2
47944: PPUSH
47945: LD_VAR 0 3
47949: PPUSH
47950: CALL 48150 0 2
47954: PUSH
47955: LD_VAR 0 11
47959: PUSH
47960: EMPTY
47961: EQUAL
47962: OR
47963: IFFALSE 47908
// if not control in _control then
47965: LD_VAR 0 4
47969: PUSH
47970: LD_VAR 0 12
47974: IN
47975: NOT
47976: IFFALSE 48002
// control := _control [ rand ( 1 , _control ) ] ;
47978: LD_ADDR_VAR 0 4
47982: PUSH
47983: LD_VAR 0 12
47987: PUSH
47988: LD_INT 1
47990: PPUSH
47991: LD_VAR 0 12
47995: PPUSH
47996: CALL_OW 12
48000: ARRAY
48001: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
48002: LD_VAR 0 2
48006: PPUSH
48007: LD_VAR 0 5
48011: PPUSH
48012: CALL 48370 0 2
48016: NOT
48017: IFFALSE 48076
// repeat weapon := _weapon [ 1 ] ;
48019: LD_ADDR_VAR 0 5
48023: PUSH
48024: LD_VAR 0 10
48028: PUSH
48029: LD_INT 1
48031: ARRAY
48032: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
48033: LD_ADDR_VAR 0 10
48037: PUSH
48038: LD_VAR 0 10
48042: PPUSH
48043: LD_INT 1
48045: PPUSH
48046: CALL_OW 3
48050: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
48051: LD_VAR 0 2
48055: PPUSH
48056: LD_VAR 0 5
48060: PPUSH
48061: CALL 48370 0 2
48065: PUSH
48066: LD_VAR 0 10
48070: PUSH
48071: EMPTY
48072: EQUAL
48073: OR
48074: IFFALSE 48019
// result := [ ] ;
48076: LD_ADDR_VAR 0 6
48080: PUSH
48081: EMPTY
48082: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48083: LD_VAR 0 1
48087: PPUSH
48088: LD_VAR 0 2
48092: PPUSH
48093: LD_VAR 0 3
48097: PPUSH
48098: LD_VAR 0 4
48102: PPUSH
48103: LD_VAR 0 5
48107: PPUSH
48108: CALL_OW 448
48112: IFFALSE 48145
// result := [ chassis , engine , control , weapon ] ;
48114: LD_ADDR_VAR 0 6
48118: PUSH
48119: LD_VAR 0 2
48123: PUSH
48124: LD_VAR 0 3
48128: PUSH
48129: LD_VAR 0 4
48133: PUSH
48134: LD_VAR 0 5
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: ST_TO_ADDR
// end ;
48145: LD_VAR 0 6
48149: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
48150: LD_INT 0
48152: PPUSH
// if not chassis or not engine then
48153: LD_VAR 0 1
48157: NOT
48158: PUSH
48159: LD_VAR 0 2
48163: NOT
48164: OR
48165: IFFALSE 48169
// exit ;
48167: GO 48365
// case engine of engine_solar :
48169: LD_VAR 0 2
48173: PUSH
48174: LD_INT 2
48176: DOUBLE
48177: EQUAL
48178: IFTRUE 48182
48180: GO 48220
48182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
48183: LD_ADDR_VAR 0 3
48187: PUSH
48188: LD_INT 11
48190: PUSH
48191: LD_INT 12
48193: PUSH
48194: LD_INT 13
48196: PUSH
48197: LD_INT 14
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: ST_TO_ADDR
48218: GO 48349
48220: LD_INT 1
48222: DOUBLE
48223: EQUAL
48224: IFTRUE 48228
48226: GO 48290
48228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
48229: LD_ADDR_VAR 0 3
48233: PUSH
48234: LD_INT 11
48236: PUSH
48237: LD_INT 12
48239: PUSH
48240: LD_INT 13
48242: PUSH
48243: LD_INT 14
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 4
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: LD_INT 21
48263: PUSH
48264: LD_INT 23
48266: PUSH
48267: LD_INT 22
48269: PUSH
48270: LD_INT 24
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: ST_TO_ADDR
48288: GO 48349
48290: LD_INT 3
48292: DOUBLE
48293: EQUAL
48294: IFTRUE 48298
48296: GO 48348
48298: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48299: LD_ADDR_VAR 0 3
48303: PUSH
48304: LD_INT 13
48306: PUSH
48307: LD_INT 14
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 4
48318: PUSH
48319: LD_INT 5
48321: PUSH
48322: LD_INT 21
48324: PUSH
48325: LD_INT 22
48327: PUSH
48328: LD_INT 23
48330: PUSH
48331: LD_INT 24
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: ST_TO_ADDR
48346: GO 48349
48348: POP
// result := ( chassis in result ) ;
48349: LD_ADDR_VAR 0 3
48353: PUSH
48354: LD_VAR 0 1
48358: PUSH
48359: LD_VAR 0 3
48363: IN
48364: ST_TO_ADDR
// end ;
48365: LD_VAR 0 3
48369: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
48370: LD_INT 0
48372: PPUSH
// if not chassis or not weapon then
48373: LD_VAR 0 1
48377: NOT
48378: PUSH
48379: LD_VAR 0 2
48383: NOT
48384: OR
48385: IFFALSE 48389
// exit ;
48387: GO 49451
// case weapon of us_machine_gun :
48389: LD_VAR 0 2
48393: PUSH
48394: LD_INT 2
48396: DOUBLE
48397: EQUAL
48398: IFTRUE 48402
48400: GO 48432
48402: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
48403: LD_ADDR_VAR 0 3
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 4
48419: PUSH
48420: LD_INT 5
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: ST_TO_ADDR
48430: GO 49435
48432: LD_INT 3
48434: DOUBLE
48435: EQUAL
48436: IFTRUE 48440
48438: GO 48470
48440: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
48441: LD_ADDR_VAR 0 3
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: LD_INT 4
48457: PUSH
48458: LD_INT 5
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
48468: GO 49435
48470: LD_INT 11
48472: DOUBLE
48473: EQUAL
48474: IFTRUE 48478
48476: GO 48508
48478: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
48479: LD_ADDR_VAR 0 3
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 4
48495: PUSH
48496: LD_INT 5
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: ST_TO_ADDR
48506: GO 49435
48508: LD_INT 4
48510: DOUBLE
48511: EQUAL
48512: IFTRUE 48516
48514: GO 48542
48516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
48517: LD_ADDR_VAR 0 3
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 3
48527: PUSH
48528: LD_INT 4
48530: PUSH
48531: LD_INT 5
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: ST_TO_ADDR
48540: GO 49435
48542: LD_INT 5
48544: DOUBLE
48545: EQUAL
48546: IFTRUE 48550
48548: GO 48576
48550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
48551: LD_ADDR_VAR 0 3
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 4
48564: PUSH
48565: LD_INT 5
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
48574: GO 49435
48576: LD_INT 9
48578: DOUBLE
48579: EQUAL
48580: IFTRUE 48584
48582: GO 48610
48584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
48585: LD_ADDR_VAR 0 3
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 4
48598: PUSH
48599: LD_INT 5
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: ST_TO_ADDR
48608: GO 49435
48610: LD_INT 7
48612: DOUBLE
48613: EQUAL
48614: IFTRUE 48618
48616: GO 48644
48618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
48619: LD_ADDR_VAR 0 3
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: LD_INT 3
48629: PUSH
48630: LD_INT 4
48632: PUSH
48633: LD_INT 5
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
48642: GO 49435
48644: LD_INT 12
48646: DOUBLE
48647: EQUAL
48648: IFTRUE 48652
48650: GO 48678
48652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
48653: LD_ADDR_VAR 0 3
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 4
48666: PUSH
48667: LD_INT 5
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
48676: GO 49435
48678: LD_INT 13
48680: DOUBLE
48681: EQUAL
48682: IFTRUE 48686
48684: GO 48712
48686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
48687: LD_ADDR_VAR 0 3
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: LD_INT 4
48700: PUSH
48701: LD_INT 5
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: ST_TO_ADDR
48710: GO 49435
48712: LD_INT 14
48714: DOUBLE
48715: EQUAL
48716: IFTRUE 48720
48718: GO 48738
48720: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
48721: LD_ADDR_VAR 0 3
48725: PUSH
48726: LD_INT 4
48728: PUSH
48729: LD_INT 5
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: ST_TO_ADDR
48736: GO 49435
48738: LD_INT 6
48740: DOUBLE
48741: EQUAL
48742: IFTRUE 48746
48744: GO 48764
48746: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48747: LD_ADDR_VAR 0 3
48751: PUSH
48752: LD_INT 4
48754: PUSH
48755: LD_INT 5
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: ST_TO_ADDR
48762: GO 49435
48764: LD_INT 10
48766: DOUBLE
48767: EQUAL
48768: IFTRUE 48772
48770: GO 48790
48772: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48773: LD_ADDR_VAR 0 3
48777: PUSH
48778: LD_INT 4
48780: PUSH
48781: LD_INT 5
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: ST_TO_ADDR
48788: GO 49435
48790: LD_INT 22
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48798
48796: GO 48824
48798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48799: LD_ADDR_VAR 0 3
48803: PUSH
48804: LD_INT 11
48806: PUSH
48807: LD_INT 12
48809: PUSH
48810: LD_INT 13
48812: PUSH
48813: LD_INT 14
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
48822: GO 49435
48824: LD_INT 23
48826: DOUBLE
48827: EQUAL
48828: IFTRUE 48832
48830: GO 48858
48832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48833: LD_ADDR_VAR 0 3
48837: PUSH
48838: LD_INT 11
48840: PUSH
48841: LD_INT 12
48843: PUSH
48844: LD_INT 13
48846: PUSH
48847: LD_INT 14
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: ST_TO_ADDR
48856: GO 49435
48858: LD_INT 24
48860: DOUBLE
48861: EQUAL
48862: IFTRUE 48866
48864: GO 48892
48866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48867: LD_ADDR_VAR 0 3
48871: PUSH
48872: LD_INT 11
48874: PUSH
48875: LD_INT 12
48877: PUSH
48878: LD_INT 13
48880: PUSH
48881: LD_INT 14
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: ST_TO_ADDR
48890: GO 49435
48892: LD_INT 30
48894: DOUBLE
48895: EQUAL
48896: IFTRUE 48900
48898: GO 48926
48900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48901: LD_ADDR_VAR 0 3
48905: PUSH
48906: LD_INT 11
48908: PUSH
48909: LD_INT 12
48911: PUSH
48912: LD_INT 13
48914: PUSH
48915: LD_INT 14
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: ST_TO_ADDR
48924: GO 49435
48926: LD_INT 25
48928: DOUBLE
48929: EQUAL
48930: IFTRUE 48934
48932: GO 48952
48934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48935: LD_ADDR_VAR 0 3
48939: PUSH
48940: LD_INT 13
48942: PUSH
48943: LD_INT 14
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: ST_TO_ADDR
48950: GO 49435
48952: LD_INT 27
48954: DOUBLE
48955: EQUAL
48956: IFTRUE 48960
48958: GO 48978
48960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48961: LD_ADDR_VAR 0 3
48965: PUSH
48966: LD_INT 13
48968: PUSH
48969: LD_INT 14
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: ST_TO_ADDR
48976: GO 49435
48978: LD_EXP 53
48982: DOUBLE
48983: EQUAL
48984: IFTRUE 48988
48986: GO 49014
48988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48989: LD_ADDR_VAR 0 3
48993: PUSH
48994: LD_INT 11
48996: PUSH
48997: LD_INT 12
48999: PUSH
49000: LD_INT 13
49002: PUSH
49003: LD_INT 14
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
49012: GO 49435
49014: LD_INT 28
49016: DOUBLE
49017: EQUAL
49018: IFTRUE 49022
49020: GO 49040
49022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
49023: LD_ADDR_VAR 0 3
49027: PUSH
49028: LD_INT 13
49030: PUSH
49031: LD_INT 14
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: ST_TO_ADDR
49038: GO 49435
49040: LD_INT 29
49042: DOUBLE
49043: EQUAL
49044: IFTRUE 49048
49046: GO 49066
49048: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
49049: LD_ADDR_VAR 0 3
49053: PUSH
49054: LD_INT 13
49056: PUSH
49057: LD_INT 14
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: ST_TO_ADDR
49064: GO 49435
49066: LD_INT 31
49068: DOUBLE
49069: EQUAL
49070: IFTRUE 49074
49072: GO 49092
49074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
49075: LD_ADDR_VAR 0 3
49079: PUSH
49080: LD_INT 13
49082: PUSH
49083: LD_INT 14
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: ST_TO_ADDR
49090: GO 49435
49092: LD_INT 26
49094: DOUBLE
49095: EQUAL
49096: IFTRUE 49100
49098: GO 49118
49100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
49101: LD_ADDR_VAR 0 3
49105: PUSH
49106: LD_INT 13
49108: PUSH
49109: LD_INT 14
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: ST_TO_ADDR
49116: GO 49435
49118: LD_INT 42
49120: DOUBLE
49121: EQUAL
49122: IFTRUE 49126
49124: GO 49152
49126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
49127: LD_ADDR_VAR 0 3
49131: PUSH
49132: LD_INT 21
49134: PUSH
49135: LD_INT 22
49137: PUSH
49138: LD_INT 23
49140: PUSH
49141: LD_INT 24
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
49150: GO 49435
49152: LD_INT 43
49154: DOUBLE
49155: EQUAL
49156: IFTRUE 49160
49158: GO 49186
49160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
49161: LD_ADDR_VAR 0 3
49165: PUSH
49166: LD_INT 21
49168: PUSH
49169: LD_INT 22
49171: PUSH
49172: LD_INT 23
49174: PUSH
49175: LD_INT 24
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: ST_TO_ADDR
49184: GO 49435
49186: LD_INT 44
49188: DOUBLE
49189: EQUAL
49190: IFTRUE 49194
49192: GO 49220
49194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
49195: LD_ADDR_VAR 0 3
49199: PUSH
49200: LD_INT 21
49202: PUSH
49203: LD_INT 22
49205: PUSH
49206: LD_INT 23
49208: PUSH
49209: LD_INT 24
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: ST_TO_ADDR
49218: GO 49435
49220: LD_INT 45
49222: DOUBLE
49223: EQUAL
49224: IFTRUE 49228
49226: GO 49254
49228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
49229: LD_ADDR_VAR 0 3
49233: PUSH
49234: LD_INT 21
49236: PUSH
49237: LD_INT 22
49239: PUSH
49240: LD_INT 23
49242: PUSH
49243: LD_INT 24
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: ST_TO_ADDR
49252: GO 49435
49254: LD_INT 49
49256: DOUBLE
49257: EQUAL
49258: IFTRUE 49262
49260: GO 49288
49262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
49263: LD_ADDR_VAR 0 3
49267: PUSH
49268: LD_INT 21
49270: PUSH
49271: LD_INT 22
49273: PUSH
49274: LD_INT 23
49276: PUSH
49277: LD_INT 24
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
49286: GO 49435
49288: LD_INT 51
49290: DOUBLE
49291: EQUAL
49292: IFTRUE 49296
49294: GO 49322
49296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
49297: LD_ADDR_VAR 0 3
49301: PUSH
49302: LD_INT 21
49304: PUSH
49305: LD_INT 22
49307: PUSH
49308: LD_INT 23
49310: PUSH
49311: LD_INT 24
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: ST_TO_ADDR
49320: GO 49435
49322: LD_INT 52
49324: DOUBLE
49325: EQUAL
49326: IFTRUE 49330
49328: GO 49356
49330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
49331: LD_ADDR_VAR 0 3
49335: PUSH
49336: LD_INT 21
49338: PUSH
49339: LD_INT 22
49341: PUSH
49342: LD_INT 23
49344: PUSH
49345: LD_INT 24
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
49354: GO 49435
49356: LD_INT 53
49358: DOUBLE
49359: EQUAL
49360: IFTRUE 49364
49362: GO 49382
49364: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
49365: LD_ADDR_VAR 0 3
49369: PUSH
49370: LD_INT 23
49372: PUSH
49373: LD_INT 24
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: ST_TO_ADDR
49380: GO 49435
49382: LD_INT 46
49384: DOUBLE
49385: EQUAL
49386: IFTRUE 49390
49388: GO 49408
49390: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
49391: LD_ADDR_VAR 0 3
49395: PUSH
49396: LD_INT 23
49398: PUSH
49399: LD_INT 24
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: ST_TO_ADDR
49406: GO 49435
49408: LD_INT 47
49410: DOUBLE
49411: EQUAL
49412: IFTRUE 49416
49414: GO 49434
49416: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49417: LD_ADDR_VAR 0 3
49421: PUSH
49422: LD_INT 23
49424: PUSH
49425: LD_INT 24
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: ST_TO_ADDR
49432: GO 49435
49434: POP
// result := ( chassis in result ) ;
49435: LD_ADDR_VAR 0 3
49439: PUSH
49440: LD_VAR 0 1
49444: PUSH
49445: LD_VAR 0 3
49449: IN
49450: ST_TO_ADDR
// end ;
49451: LD_VAR 0 3
49455: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
49456: LD_INT 0
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
49462: PPUSH
49463: PPUSH
49464: PPUSH
// result := array ;
49465: LD_ADDR_VAR 0 5
49469: PUSH
49470: LD_VAR 0 1
49474: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
49475: LD_VAR 0 1
49479: NOT
49480: PUSH
49481: LD_VAR 0 2
49485: NOT
49486: OR
49487: PUSH
49488: LD_VAR 0 3
49492: NOT
49493: OR
49494: PUSH
49495: LD_VAR 0 2
49499: PUSH
49500: LD_VAR 0 1
49504: GREATER
49505: OR
49506: PUSH
49507: LD_VAR 0 3
49511: PUSH
49512: LD_VAR 0 1
49516: GREATER
49517: OR
49518: IFFALSE 49522
// exit ;
49520: GO 49818
// if direction then
49522: LD_VAR 0 4
49526: IFFALSE 49590
// begin d := 1 ;
49528: LD_ADDR_VAR 0 9
49532: PUSH
49533: LD_INT 1
49535: ST_TO_ADDR
// if i_from > i_to then
49536: LD_VAR 0 2
49540: PUSH
49541: LD_VAR 0 3
49545: GREATER
49546: IFFALSE 49572
// length := ( array - i_from ) + i_to else
49548: LD_ADDR_VAR 0 11
49552: PUSH
49553: LD_VAR 0 1
49557: PUSH
49558: LD_VAR 0 2
49562: MINUS
49563: PUSH
49564: LD_VAR 0 3
49568: PLUS
49569: ST_TO_ADDR
49570: GO 49588
// length := i_to - i_from ;
49572: LD_ADDR_VAR 0 11
49576: PUSH
49577: LD_VAR 0 3
49581: PUSH
49582: LD_VAR 0 2
49586: MINUS
49587: ST_TO_ADDR
// end else
49588: GO 49651
// begin d := - 1 ;
49590: LD_ADDR_VAR 0 9
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: ST_TO_ADDR
// if i_from > i_to then
49599: LD_VAR 0 2
49603: PUSH
49604: LD_VAR 0 3
49608: GREATER
49609: IFFALSE 49629
// length := i_from - i_to else
49611: LD_ADDR_VAR 0 11
49615: PUSH
49616: LD_VAR 0 2
49620: PUSH
49621: LD_VAR 0 3
49625: MINUS
49626: ST_TO_ADDR
49627: GO 49651
// length := ( array - i_to ) + i_from ;
49629: LD_ADDR_VAR 0 11
49633: PUSH
49634: LD_VAR 0 1
49638: PUSH
49639: LD_VAR 0 3
49643: MINUS
49644: PUSH
49645: LD_VAR 0 2
49649: PLUS
49650: ST_TO_ADDR
// end ; if not length then
49651: LD_VAR 0 11
49655: NOT
49656: IFFALSE 49660
// exit ;
49658: GO 49818
// tmp := array ;
49660: LD_ADDR_VAR 0 10
49664: PUSH
49665: LD_VAR 0 1
49669: ST_TO_ADDR
// for i = 1 to length do
49670: LD_ADDR_VAR 0 6
49674: PUSH
49675: DOUBLE
49676: LD_INT 1
49678: DEC
49679: ST_TO_ADDR
49680: LD_VAR 0 11
49684: PUSH
49685: FOR_TO
49686: IFFALSE 49806
// begin for j = 1 to array do
49688: LD_ADDR_VAR 0 7
49692: PUSH
49693: DOUBLE
49694: LD_INT 1
49696: DEC
49697: ST_TO_ADDR
49698: LD_VAR 0 1
49702: PUSH
49703: FOR_TO
49704: IFFALSE 49792
// begin k := j + d ;
49706: LD_ADDR_VAR 0 8
49710: PUSH
49711: LD_VAR 0 7
49715: PUSH
49716: LD_VAR 0 9
49720: PLUS
49721: ST_TO_ADDR
// if k > array then
49722: LD_VAR 0 8
49726: PUSH
49727: LD_VAR 0 1
49731: GREATER
49732: IFFALSE 49742
// k := 1 ;
49734: LD_ADDR_VAR 0 8
49738: PUSH
49739: LD_INT 1
49741: ST_TO_ADDR
// if not k then
49742: LD_VAR 0 8
49746: NOT
49747: IFFALSE 49759
// k := array ;
49749: LD_ADDR_VAR 0 8
49753: PUSH
49754: LD_VAR 0 1
49758: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49759: LD_ADDR_VAR 0 10
49763: PUSH
49764: LD_VAR 0 10
49768: PPUSH
49769: LD_VAR 0 8
49773: PPUSH
49774: LD_VAR 0 1
49778: PUSH
49779: LD_VAR 0 7
49783: ARRAY
49784: PPUSH
49785: CALL_OW 1
49789: ST_TO_ADDR
// end ;
49790: GO 49703
49792: POP
49793: POP
// array := tmp ;
49794: LD_ADDR_VAR 0 1
49798: PUSH
49799: LD_VAR 0 10
49803: ST_TO_ADDR
// end ;
49804: GO 49685
49806: POP
49807: POP
// result := array ;
49808: LD_ADDR_VAR 0 5
49812: PUSH
49813: LD_VAR 0 1
49817: ST_TO_ADDR
// end ;
49818: LD_VAR 0 5
49822: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49823: LD_INT 0
49825: PPUSH
49826: PPUSH
// result := 0 ;
49827: LD_ADDR_VAR 0 3
49831: PUSH
49832: LD_INT 0
49834: ST_TO_ADDR
// if not array or not value in array then
49835: LD_VAR 0 1
49839: NOT
49840: PUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_VAR 0 1
49850: IN
49851: NOT
49852: OR
49853: IFFALSE 49857
// exit ;
49855: GO 49911
// for i = 1 to array do
49857: LD_ADDR_VAR 0 4
49861: PUSH
49862: DOUBLE
49863: LD_INT 1
49865: DEC
49866: ST_TO_ADDR
49867: LD_VAR 0 1
49871: PUSH
49872: FOR_TO
49873: IFFALSE 49909
// if value = array [ i ] then
49875: LD_VAR 0 2
49879: PUSH
49880: LD_VAR 0 1
49884: PUSH
49885: LD_VAR 0 4
49889: ARRAY
49890: EQUAL
49891: IFFALSE 49907
// begin result := i ;
49893: LD_ADDR_VAR 0 3
49897: PUSH
49898: LD_VAR 0 4
49902: ST_TO_ADDR
// exit ;
49903: POP
49904: POP
49905: GO 49911
// end ;
49907: GO 49872
49909: POP
49910: POP
// end ;
49911: LD_VAR 0 3
49915: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49916: LD_INT 0
49918: PPUSH
// vc_chassis := chassis ;
49919: LD_ADDR_OWVAR 37
49923: PUSH
49924: LD_VAR 0 1
49928: ST_TO_ADDR
// vc_engine := engine ;
49929: LD_ADDR_OWVAR 39
49933: PUSH
49934: LD_VAR 0 2
49938: ST_TO_ADDR
// vc_control := control ;
49939: LD_ADDR_OWVAR 38
49943: PUSH
49944: LD_VAR 0 3
49948: ST_TO_ADDR
// vc_weapon := weapon ;
49949: LD_ADDR_OWVAR 40
49953: PUSH
49954: LD_VAR 0 4
49958: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49959: LD_ADDR_OWVAR 41
49963: PUSH
49964: LD_VAR 0 5
49968: ST_TO_ADDR
// end ;
49969: LD_VAR 0 6
49973: RET
// export function WantPlant ( unit ) ; var task ; begin
49974: LD_INT 0
49976: PPUSH
49977: PPUSH
// result := false ;
49978: LD_ADDR_VAR 0 2
49982: PUSH
49983: LD_INT 0
49985: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49986: LD_ADDR_VAR 0 3
49990: PUSH
49991: LD_VAR 0 1
49995: PPUSH
49996: CALL_OW 437
50000: ST_TO_ADDR
// if task then
50001: LD_VAR 0 3
50005: IFFALSE 50033
// if task [ 1 ] [ 1 ] = p then
50007: LD_VAR 0 3
50011: PUSH
50012: LD_INT 1
50014: ARRAY
50015: PUSH
50016: LD_INT 1
50018: ARRAY
50019: PUSH
50020: LD_STRING p
50022: EQUAL
50023: IFFALSE 50033
// result := true ;
50025: LD_ADDR_VAR 0 2
50029: PUSH
50030: LD_INT 1
50032: ST_TO_ADDR
// end ;
50033: LD_VAR 0 2
50037: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
50038: LD_INT 0
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
// if pos < 1 then
50044: LD_VAR 0 2
50048: PUSH
50049: LD_INT 1
50051: LESS
50052: IFFALSE 50056
// exit ;
50054: GO 50359
// if pos = 1 then
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 1
50063: EQUAL
50064: IFFALSE 50097
// result := Replace ( arr , pos [ 1 ] , value ) else
50066: LD_ADDR_VAR 0 4
50070: PUSH
50071: LD_VAR 0 1
50075: PPUSH
50076: LD_VAR 0 2
50080: PUSH
50081: LD_INT 1
50083: ARRAY
50084: PPUSH
50085: LD_VAR 0 3
50089: PPUSH
50090: CALL_OW 1
50094: ST_TO_ADDR
50095: GO 50359
// begin tmp := arr ;
50097: LD_ADDR_VAR 0 6
50101: PUSH
50102: LD_VAR 0 1
50106: ST_TO_ADDR
// s_arr := [ tmp ] ;
50107: LD_ADDR_VAR 0 7
50111: PUSH
50112: LD_VAR 0 6
50116: PUSH
50117: EMPTY
50118: LIST
50119: ST_TO_ADDR
// for i = 1 to pos - 1 do
50120: LD_ADDR_VAR 0 5
50124: PUSH
50125: DOUBLE
50126: LD_INT 1
50128: DEC
50129: ST_TO_ADDR
50130: LD_VAR 0 2
50134: PUSH
50135: LD_INT 1
50137: MINUS
50138: PUSH
50139: FOR_TO
50140: IFFALSE 50185
// begin tmp := tmp [ pos [ i ] ] ;
50142: LD_ADDR_VAR 0 6
50146: PUSH
50147: LD_VAR 0 6
50151: PUSH
50152: LD_VAR 0 2
50156: PUSH
50157: LD_VAR 0 5
50161: ARRAY
50162: ARRAY
50163: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
50164: LD_ADDR_VAR 0 7
50168: PUSH
50169: LD_VAR 0 7
50173: PUSH
50174: LD_VAR 0 6
50178: PUSH
50179: EMPTY
50180: LIST
50181: ADD
50182: ST_TO_ADDR
// end ;
50183: GO 50139
50185: POP
50186: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
50187: LD_ADDR_VAR 0 6
50191: PUSH
50192: LD_VAR 0 6
50196: PPUSH
50197: LD_VAR 0 2
50201: PUSH
50202: LD_VAR 0 2
50206: ARRAY
50207: PPUSH
50208: LD_VAR 0 3
50212: PPUSH
50213: CALL_OW 1
50217: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
50218: LD_ADDR_VAR 0 7
50222: PUSH
50223: LD_VAR 0 7
50227: PPUSH
50228: LD_VAR 0 7
50232: PPUSH
50233: LD_VAR 0 6
50237: PPUSH
50238: CALL_OW 1
50242: ST_TO_ADDR
// for i = s_arr downto 2 do
50243: LD_ADDR_VAR 0 5
50247: PUSH
50248: DOUBLE
50249: LD_VAR 0 7
50253: INC
50254: ST_TO_ADDR
50255: LD_INT 2
50257: PUSH
50258: FOR_DOWNTO
50259: IFFALSE 50343
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
50261: LD_ADDR_VAR 0 6
50265: PUSH
50266: LD_VAR 0 7
50270: PUSH
50271: LD_VAR 0 5
50275: PUSH
50276: LD_INT 1
50278: MINUS
50279: ARRAY
50280: PPUSH
50281: LD_VAR 0 2
50285: PUSH
50286: LD_VAR 0 5
50290: PUSH
50291: LD_INT 1
50293: MINUS
50294: ARRAY
50295: PPUSH
50296: LD_VAR 0 7
50300: PUSH
50301: LD_VAR 0 5
50305: ARRAY
50306: PPUSH
50307: CALL_OW 1
50311: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
50312: LD_ADDR_VAR 0 7
50316: PUSH
50317: LD_VAR 0 7
50321: PPUSH
50322: LD_VAR 0 5
50326: PUSH
50327: LD_INT 1
50329: MINUS
50330: PPUSH
50331: LD_VAR 0 6
50335: PPUSH
50336: CALL_OW 1
50340: ST_TO_ADDR
// end ;
50341: GO 50258
50343: POP
50344: POP
// result := s_arr [ 1 ] ;
50345: LD_ADDR_VAR 0 4
50349: PUSH
50350: LD_VAR 0 7
50354: PUSH
50355: LD_INT 1
50357: ARRAY
50358: ST_TO_ADDR
// end ; end ;
50359: LD_VAR 0 4
50363: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
50364: LD_INT 0
50366: PPUSH
50367: PPUSH
// if not list then
50368: LD_VAR 0 1
50372: NOT
50373: IFFALSE 50377
// exit ;
50375: GO 50468
// i := list [ pos1 ] ;
50377: LD_ADDR_VAR 0 5
50381: PUSH
50382: LD_VAR 0 1
50386: PUSH
50387: LD_VAR 0 2
50391: ARRAY
50392: ST_TO_ADDR
// if not i then
50393: LD_VAR 0 5
50397: NOT
50398: IFFALSE 50402
// exit ;
50400: GO 50468
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
50402: LD_ADDR_VAR 0 1
50406: PUSH
50407: LD_VAR 0 1
50411: PPUSH
50412: LD_VAR 0 2
50416: PPUSH
50417: LD_VAR 0 1
50421: PUSH
50422: LD_VAR 0 3
50426: ARRAY
50427: PPUSH
50428: CALL_OW 1
50432: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
50433: LD_ADDR_VAR 0 1
50437: PUSH
50438: LD_VAR 0 1
50442: PPUSH
50443: LD_VAR 0 3
50447: PPUSH
50448: LD_VAR 0 5
50452: PPUSH
50453: CALL_OW 1
50457: ST_TO_ADDR
// result := list ;
50458: LD_ADDR_VAR 0 4
50462: PUSH
50463: LD_VAR 0 1
50467: ST_TO_ADDR
// end ;
50468: LD_VAR 0 4
50472: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
50473: LD_INT 0
50475: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
50476: LD_ADDR_VAR 0 5
50480: PUSH
50481: LD_VAR 0 1
50485: PPUSH
50486: CALL_OW 250
50490: PPUSH
50491: LD_VAR 0 1
50495: PPUSH
50496: CALL_OW 251
50500: PPUSH
50501: LD_VAR 0 2
50505: PPUSH
50506: LD_VAR 0 3
50510: PPUSH
50511: LD_VAR 0 4
50515: PPUSH
50516: CALL 50526 0 5
50520: ST_TO_ADDR
// end ;
50521: LD_VAR 0 5
50525: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
50526: LD_INT 0
50528: PPUSH
50529: PPUSH
50530: PPUSH
50531: PPUSH
// if not list then
50532: LD_VAR 0 3
50536: NOT
50537: IFFALSE 50541
// exit ;
50539: GO 50929
// result := [ ] ;
50541: LD_ADDR_VAR 0 6
50545: PUSH
50546: EMPTY
50547: ST_TO_ADDR
// for i in list do
50548: LD_ADDR_VAR 0 7
50552: PUSH
50553: LD_VAR 0 3
50557: PUSH
50558: FOR_IN
50559: IFFALSE 50761
// begin tmp := GetDistUnitXY ( i , x , y ) ;
50561: LD_ADDR_VAR 0 9
50565: PUSH
50566: LD_VAR 0 7
50570: PPUSH
50571: LD_VAR 0 1
50575: PPUSH
50576: LD_VAR 0 2
50580: PPUSH
50581: CALL_OW 297
50585: ST_TO_ADDR
// if not result then
50586: LD_VAR 0 6
50590: NOT
50591: IFFALSE 50617
// result := [ [ i , tmp ] ] else
50593: LD_ADDR_VAR 0 6
50597: PUSH
50598: LD_VAR 0 7
50602: PUSH
50603: LD_VAR 0 9
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: ST_TO_ADDR
50615: GO 50759
// begin if result [ result ] [ 2 ] < tmp then
50617: LD_VAR 0 6
50621: PUSH
50622: LD_VAR 0 6
50626: ARRAY
50627: PUSH
50628: LD_INT 2
50630: ARRAY
50631: PUSH
50632: LD_VAR 0 9
50636: LESS
50637: IFFALSE 50679
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
50639: LD_ADDR_VAR 0 6
50643: PUSH
50644: LD_VAR 0 6
50648: PPUSH
50649: LD_VAR 0 6
50653: PUSH
50654: LD_INT 1
50656: PLUS
50657: PPUSH
50658: LD_VAR 0 7
50662: PUSH
50663: LD_VAR 0 9
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PPUSH
50672: CALL_OW 2
50676: ST_TO_ADDR
50677: GO 50759
// for j = 1 to result do
50679: LD_ADDR_VAR 0 8
50683: PUSH
50684: DOUBLE
50685: LD_INT 1
50687: DEC
50688: ST_TO_ADDR
50689: LD_VAR 0 6
50693: PUSH
50694: FOR_TO
50695: IFFALSE 50757
// begin if tmp < result [ j ] [ 2 ] then
50697: LD_VAR 0 9
50701: PUSH
50702: LD_VAR 0 6
50706: PUSH
50707: LD_VAR 0 8
50711: ARRAY
50712: PUSH
50713: LD_INT 2
50715: ARRAY
50716: LESS
50717: IFFALSE 50755
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50719: LD_ADDR_VAR 0 6
50723: PUSH
50724: LD_VAR 0 6
50728: PPUSH
50729: LD_VAR 0 8
50733: PPUSH
50734: LD_VAR 0 7
50738: PUSH
50739: LD_VAR 0 9
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PPUSH
50748: CALL_OW 2
50752: ST_TO_ADDR
// break ;
50753: GO 50757
// end ; end ;
50755: GO 50694
50757: POP
50758: POP
// end ; end ;
50759: GO 50558
50761: POP
50762: POP
// if result and not asc then
50763: LD_VAR 0 6
50767: PUSH
50768: LD_VAR 0 4
50772: NOT
50773: AND
50774: IFFALSE 50849
// begin tmp := result ;
50776: LD_ADDR_VAR 0 9
50780: PUSH
50781: LD_VAR 0 6
50785: ST_TO_ADDR
// for i = tmp downto 1 do
50786: LD_ADDR_VAR 0 7
50790: PUSH
50791: DOUBLE
50792: LD_VAR 0 9
50796: INC
50797: ST_TO_ADDR
50798: LD_INT 1
50800: PUSH
50801: FOR_DOWNTO
50802: IFFALSE 50847
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50804: LD_ADDR_VAR 0 6
50808: PUSH
50809: LD_VAR 0 6
50813: PPUSH
50814: LD_VAR 0 9
50818: PUSH
50819: LD_VAR 0 7
50823: MINUS
50824: PUSH
50825: LD_INT 1
50827: PLUS
50828: PPUSH
50829: LD_VAR 0 9
50833: PUSH
50834: LD_VAR 0 7
50838: ARRAY
50839: PPUSH
50840: CALL_OW 1
50844: ST_TO_ADDR
50845: GO 50801
50847: POP
50848: POP
// end ; tmp := [ ] ;
50849: LD_ADDR_VAR 0 9
50853: PUSH
50854: EMPTY
50855: ST_TO_ADDR
// if mode then
50856: LD_VAR 0 5
50860: IFFALSE 50929
// begin for i = 1 to result do
50862: LD_ADDR_VAR 0 7
50866: PUSH
50867: DOUBLE
50868: LD_INT 1
50870: DEC
50871: ST_TO_ADDR
50872: LD_VAR 0 6
50876: PUSH
50877: FOR_TO
50878: IFFALSE 50917
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50880: LD_ADDR_VAR 0 9
50884: PUSH
50885: LD_VAR 0 9
50889: PPUSH
50890: LD_VAR 0 7
50894: PPUSH
50895: LD_VAR 0 6
50899: PUSH
50900: LD_VAR 0 7
50904: ARRAY
50905: PUSH
50906: LD_INT 1
50908: ARRAY
50909: PPUSH
50910: CALL_OW 1
50914: ST_TO_ADDR
50915: GO 50877
50917: POP
50918: POP
// result := tmp ;
50919: LD_ADDR_VAR 0 6
50923: PUSH
50924: LD_VAR 0 9
50928: ST_TO_ADDR
// end ; end ;
50929: LD_VAR 0 6
50933: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50934: LD_INT 0
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
50940: PPUSH
50941: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50942: LD_ADDR_VAR 0 5
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// if not x or not y then
50964: LD_VAR 0 2
50968: NOT
50969: PUSH
50970: LD_VAR 0 3
50974: NOT
50975: OR
50976: IFFALSE 50980
// exit ;
50978: GO 52632
// if not range then
50980: LD_VAR 0 4
50984: NOT
50985: IFFALSE 50995
// range := 10 ;
50987: LD_ADDR_VAR 0 4
50991: PUSH
50992: LD_INT 10
50994: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50995: LD_ADDR_VAR 0 8
50999: PUSH
51000: LD_INT 81
51002: PUSH
51003: LD_VAR 0 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 92
51014: PUSH
51015: LD_VAR 0 2
51019: PUSH
51020: LD_VAR 0 3
51024: PUSH
51025: LD_VAR 0 4
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: LD_INT 21
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: PPUSH
51058: CALL_OW 69
51062: ST_TO_ADDR
// if not tmp then
51063: LD_VAR 0 8
51067: NOT
51068: IFFALSE 51072
// exit ;
51070: GO 52632
// for i in tmp do
51072: LD_ADDR_VAR 0 6
51076: PUSH
51077: LD_VAR 0 8
51081: PUSH
51082: FOR_IN
51083: IFFALSE 52607
// begin points := [ 0 , 0 , 0 ] ;
51085: LD_ADDR_VAR 0 9
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// bpoints := 1 ;
51104: LD_ADDR_VAR 0 10
51108: PUSH
51109: LD_INT 1
51111: ST_TO_ADDR
// case GetType ( i ) of unit_human :
51112: LD_VAR 0 6
51116: PPUSH
51117: CALL_OW 247
51121: PUSH
51122: LD_INT 1
51124: DOUBLE
51125: EQUAL
51126: IFTRUE 51130
51128: GO 51708
51130: POP
// begin if GetClass ( i ) = 1 then
51131: LD_VAR 0 6
51135: PPUSH
51136: CALL_OW 257
51140: PUSH
51141: LD_INT 1
51143: EQUAL
51144: IFFALSE 51165
// points := [ 10 , 5 , 3 ] ;
51146: LD_ADDR_VAR 0 9
51150: PUSH
51151: LD_INT 10
51153: PUSH
51154: LD_INT 5
51156: PUSH
51157: LD_INT 3
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: LIST
51164: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
51165: LD_VAR 0 6
51169: PPUSH
51170: CALL_OW 257
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: LD_INT 4
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: LIST
51188: IN
51189: IFFALSE 51210
// points := [ 3 , 2 , 1 ] ;
51191: LD_ADDR_VAR 0 9
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: ST_TO_ADDR
// if GetClass ( i ) = 5 then
51210: LD_VAR 0 6
51214: PPUSH
51215: CALL_OW 257
51219: PUSH
51220: LD_INT 5
51222: EQUAL
51223: IFFALSE 51244
// points := [ 130 , 5 , 2 ] ;
51225: LD_ADDR_VAR 0 9
51229: PUSH
51230: LD_INT 130
51232: PUSH
51233: LD_INT 5
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// if GetClass ( i ) = 8 then
51244: LD_VAR 0 6
51248: PPUSH
51249: CALL_OW 257
51253: PUSH
51254: LD_INT 8
51256: EQUAL
51257: IFFALSE 51278
// points := [ 35 , 35 , 30 ] ;
51259: LD_ADDR_VAR 0 9
51263: PUSH
51264: LD_INT 35
51266: PUSH
51267: LD_INT 35
51269: PUSH
51270: LD_INT 30
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// if GetClass ( i ) = 9 then
51278: LD_VAR 0 6
51282: PPUSH
51283: CALL_OW 257
51287: PUSH
51288: LD_INT 9
51290: EQUAL
51291: IFFALSE 51312
// points := [ 20 , 55 , 40 ] ;
51293: LD_ADDR_VAR 0 9
51297: PUSH
51298: LD_INT 20
51300: PUSH
51301: LD_INT 55
51303: PUSH
51304: LD_INT 40
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
51312: LD_VAR 0 6
51316: PPUSH
51317: CALL_OW 257
51321: PUSH
51322: LD_INT 12
51324: PUSH
51325: LD_INT 16
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: IN
51332: IFFALSE 51353
// points := [ 5 , 3 , 2 ] ;
51334: LD_ADDR_VAR 0 9
51338: PUSH
51339: LD_INT 5
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: ST_TO_ADDR
// if GetClass ( i ) = 17 then
51353: LD_VAR 0 6
51357: PPUSH
51358: CALL_OW 257
51362: PUSH
51363: LD_INT 17
51365: EQUAL
51366: IFFALSE 51387
// points := [ 100 , 50 , 75 ] ;
51368: LD_ADDR_VAR 0 9
51372: PUSH
51373: LD_INT 100
51375: PUSH
51376: LD_INT 50
51378: PUSH
51379: LD_INT 75
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: LIST
51386: ST_TO_ADDR
// if GetClass ( i ) = 15 then
51387: LD_VAR 0 6
51391: PPUSH
51392: CALL_OW 257
51396: PUSH
51397: LD_INT 15
51399: EQUAL
51400: IFFALSE 51421
// points := [ 10 , 5 , 3 ] ;
51402: LD_ADDR_VAR 0 9
51406: PUSH
51407: LD_INT 10
51409: PUSH
51410: LD_INT 5
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: LIST
51420: ST_TO_ADDR
// if GetClass ( i ) = 14 then
51421: LD_VAR 0 6
51425: PPUSH
51426: CALL_OW 257
51430: PUSH
51431: LD_INT 14
51433: EQUAL
51434: IFFALSE 51455
// points := [ 10 , 0 , 0 ] ;
51436: LD_ADDR_VAR 0 9
51440: PUSH
51441: LD_INT 10
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// if GetClass ( i ) = 11 then
51455: LD_VAR 0 6
51459: PPUSH
51460: CALL_OW 257
51464: PUSH
51465: LD_INT 11
51467: EQUAL
51468: IFFALSE 51489
// points := [ 30 , 10 , 5 ] ;
51470: LD_ADDR_VAR 0 9
51474: PUSH
51475: LD_INT 30
51477: PUSH
51478: LD_INT 10
51480: PUSH
51481: LD_INT 5
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: LIST
51488: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
51489: LD_VAR 0 1
51493: PPUSH
51494: LD_INT 5
51496: PPUSH
51497: CALL_OW 321
51501: PUSH
51502: LD_INT 2
51504: EQUAL
51505: IFFALSE 51522
// bpoints := bpoints * 1.8 ;
51507: LD_ADDR_VAR 0 10
51511: PUSH
51512: LD_VAR 0 10
51516: PUSH
51517: LD_REAL  1.80000000000000E+0000
51520: MUL
51521: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
51522: LD_VAR 0 6
51526: PPUSH
51527: CALL_OW 257
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: LD_INT 4
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: IN
51550: PUSH
51551: LD_VAR 0 1
51555: PPUSH
51556: LD_INT 51
51558: PPUSH
51559: CALL_OW 321
51563: PUSH
51564: LD_INT 2
51566: EQUAL
51567: AND
51568: IFFALSE 51585
// bpoints := bpoints * 1.2 ;
51570: LD_ADDR_VAR 0 10
51574: PUSH
51575: LD_VAR 0 10
51579: PUSH
51580: LD_REAL  1.20000000000000E+0000
51583: MUL
51584: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
51585: LD_VAR 0 6
51589: PPUSH
51590: CALL_OW 257
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: LD_INT 7
51600: PUSH
51601: LD_INT 9
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: IN
51609: PUSH
51610: LD_VAR 0 1
51614: PPUSH
51615: LD_INT 52
51617: PPUSH
51618: CALL_OW 321
51622: PUSH
51623: LD_INT 2
51625: EQUAL
51626: AND
51627: IFFALSE 51644
// bpoints := bpoints * 1.5 ;
51629: LD_ADDR_VAR 0 10
51633: PUSH
51634: LD_VAR 0 10
51638: PUSH
51639: LD_REAL  1.50000000000000E+0000
51642: MUL
51643: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
51644: LD_VAR 0 1
51648: PPUSH
51649: LD_INT 66
51651: PPUSH
51652: CALL_OW 321
51656: PUSH
51657: LD_INT 2
51659: EQUAL
51660: IFFALSE 51677
// bpoints := bpoints * 1.1 ;
51662: LD_ADDR_VAR 0 10
51666: PUSH
51667: LD_VAR 0 10
51671: PUSH
51672: LD_REAL  1.10000000000000E+0000
51675: MUL
51676: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
51677: LD_ADDR_VAR 0 10
51681: PUSH
51682: LD_VAR 0 10
51686: PUSH
51687: LD_VAR 0 6
51691: PPUSH
51692: LD_INT 1
51694: PPUSH
51695: CALL_OW 259
51699: PUSH
51700: LD_REAL  1.15000000000000E+0000
51703: MUL
51704: MUL
51705: ST_TO_ADDR
// end ; unit_vehicle :
51706: GO 52536
51708: LD_INT 2
51710: DOUBLE
51711: EQUAL
51712: IFTRUE 51716
51714: GO 52524
51716: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
51717: LD_VAR 0 6
51721: PPUSH
51722: CALL_OW 264
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 42
51732: PUSH
51733: LD_INT 24
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: IN
51741: IFFALSE 51762
// points := [ 25 , 5 , 3 ] ;
51743: LD_ADDR_VAR 0 9
51747: PUSH
51748: LD_INT 25
51750: PUSH
51751: LD_INT 5
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51762: LD_VAR 0 6
51766: PPUSH
51767: CALL_OW 264
51771: PUSH
51772: LD_INT 4
51774: PUSH
51775: LD_INT 43
51777: PUSH
51778: LD_INT 25
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: IN
51786: IFFALSE 51807
// points := [ 40 , 15 , 5 ] ;
51788: LD_ADDR_VAR 0 9
51792: PUSH
51793: LD_INT 40
51795: PUSH
51796: LD_INT 15
51798: PUSH
51799: LD_INT 5
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: LIST
51806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51807: LD_VAR 0 6
51811: PPUSH
51812: CALL_OW 264
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 23
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: IN
51827: IFFALSE 51848
// points := [ 7 , 25 , 8 ] ;
51829: LD_ADDR_VAR 0 9
51833: PUSH
51834: LD_INT 7
51836: PUSH
51837: LD_INT 25
51839: PUSH
51840: LD_INT 8
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51848: LD_VAR 0 6
51852: PPUSH
51853: CALL_OW 264
51857: PUSH
51858: LD_INT 5
51860: PUSH
51861: LD_INT 27
51863: PUSH
51864: LD_INT 44
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: IN
51872: IFFALSE 51893
// points := [ 14 , 50 , 16 ] ;
51874: LD_ADDR_VAR 0 9
51878: PUSH
51879: LD_INT 14
51881: PUSH
51882: LD_INT 50
51884: PUSH
51885: LD_INT 16
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51893: LD_VAR 0 6
51897: PPUSH
51898: CALL_OW 264
51902: PUSH
51903: LD_INT 6
51905: PUSH
51906: LD_INT 46
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: IN
51913: IFFALSE 51934
// points := [ 32 , 120 , 70 ] ;
51915: LD_ADDR_VAR 0 9
51919: PUSH
51920: LD_INT 32
51922: PUSH
51923: LD_INT 120
51925: PUSH
51926: LD_INT 70
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
51934: LD_VAR 0 6
51938: PPUSH
51939: CALL_OW 264
51943: PUSH
51944: LD_INT 7
51946: PUSH
51947: LD_INT 28
51949: PUSH
51950: LD_INT 45
51952: PUSH
51953: LD_EXP 53
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: IN
51964: IFFALSE 51985
// points := [ 35 , 20 , 45 ] ;
51966: LD_ADDR_VAR 0 9
51970: PUSH
51971: LD_INT 35
51973: PUSH
51974: LD_INT 20
51976: PUSH
51977: LD_INT 45
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51985: LD_VAR 0 6
51989: PPUSH
51990: CALL_OW 264
51994: PUSH
51995: LD_INT 47
51997: PUSH
51998: EMPTY
51999: LIST
52000: IN
52001: IFFALSE 52022
// points := [ 67 , 45 , 75 ] ;
52003: LD_ADDR_VAR 0 9
52007: PUSH
52008: LD_INT 67
52010: PUSH
52011: LD_INT 45
52013: PUSH
52014: LD_INT 75
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52022: LD_VAR 0 6
52026: PPUSH
52027: CALL_OW 264
52031: PUSH
52032: LD_INT 26
52034: PUSH
52035: EMPTY
52036: LIST
52037: IN
52038: IFFALSE 52059
// points := [ 120 , 30 , 80 ] ;
52040: LD_ADDR_VAR 0 9
52044: PUSH
52045: LD_INT 120
52047: PUSH
52048: LD_INT 30
52050: PUSH
52051: LD_INT 80
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: LIST
52058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52059: LD_VAR 0 6
52063: PPUSH
52064: CALL_OW 264
52068: PUSH
52069: LD_INT 22
52071: PUSH
52072: EMPTY
52073: LIST
52074: IN
52075: IFFALSE 52096
// points := [ 40 , 1 , 1 ] ;
52077: LD_ADDR_VAR 0 9
52081: PUSH
52082: LD_INT 40
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
52096: LD_VAR 0 6
52100: PPUSH
52101: CALL_OW 264
52105: PUSH
52106: LD_INT 29
52108: PUSH
52109: EMPTY
52110: LIST
52111: IN
52112: IFFALSE 52133
// points := [ 70 , 200 , 400 ] ;
52114: LD_ADDR_VAR 0 9
52118: PUSH
52119: LD_INT 70
52121: PUSH
52122: LD_INT 200
52124: PUSH
52125: LD_INT 400
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
52133: LD_VAR 0 6
52137: PPUSH
52138: CALL_OW 264
52142: PUSH
52143: LD_INT 14
52145: PUSH
52146: LD_INT 53
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: IN
52153: IFFALSE 52174
// points := [ 40 , 10 , 20 ] ;
52155: LD_ADDR_VAR 0 9
52159: PUSH
52160: LD_INT 40
52162: PUSH
52163: LD_INT 10
52165: PUSH
52166: LD_INT 20
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
52174: LD_VAR 0 6
52178: PPUSH
52179: CALL_OW 264
52183: PUSH
52184: LD_INT 9
52186: PUSH
52187: EMPTY
52188: LIST
52189: IN
52190: IFFALSE 52211
// points := [ 5 , 70 , 20 ] ;
52192: LD_ADDR_VAR 0 9
52196: PUSH
52197: LD_INT 5
52199: PUSH
52200: LD_INT 70
52202: PUSH
52203: LD_INT 20
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
52211: LD_VAR 0 6
52215: PPUSH
52216: CALL_OW 264
52220: PUSH
52221: LD_INT 10
52223: PUSH
52224: EMPTY
52225: LIST
52226: IN
52227: IFFALSE 52248
// points := [ 35 , 110 , 70 ] ;
52229: LD_ADDR_VAR 0 9
52233: PUSH
52234: LD_INT 35
52236: PUSH
52237: LD_INT 110
52239: PUSH
52240: LD_INT 70
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
52248: LD_VAR 0 6
52252: PPUSH
52253: CALL_OW 265
52257: PUSH
52258: LD_INT 25
52260: EQUAL
52261: IFFALSE 52282
// points := [ 80 , 65 , 100 ] ;
52263: LD_ADDR_VAR 0 9
52267: PUSH
52268: LD_INT 80
52270: PUSH
52271: LD_INT 65
52273: PUSH
52274: LD_INT 100
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
52282: LD_VAR 0 6
52286: PPUSH
52287: CALL_OW 263
52291: PUSH
52292: LD_INT 1
52294: EQUAL
52295: IFFALSE 52330
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
52297: LD_ADDR_VAR 0 10
52301: PUSH
52302: LD_VAR 0 10
52306: PUSH
52307: LD_VAR 0 6
52311: PPUSH
52312: CALL_OW 311
52316: PPUSH
52317: LD_INT 3
52319: PPUSH
52320: CALL_OW 259
52324: PUSH
52325: LD_INT 4
52327: MUL
52328: MUL
52329: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
52330: LD_VAR 0 6
52334: PPUSH
52335: CALL_OW 263
52339: PUSH
52340: LD_INT 2
52342: EQUAL
52343: IFFALSE 52394
// begin j := IsControledBy ( i ) ;
52345: LD_ADDR_VAR 0 7
52349: PUSH
52350: LD_VAR 0 6
52354: PPUSH
52355: CALL_OW 312
52359: ST_TO_ADDR
// if j then
52360: LD_VAR 0 7
52364: IFFALSE 52394
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
52366: LD_ADDR_VAR 0 10
52370: PUSH
52371: LD_VAR 0 10
52375: PUSH
52376: LD_VAR 0 7
52380: PPUSH
52381: LD_INT 3
52383: PPUSH
52384: CALL_OW 259
52388: PUSH
52389: LD_INT 3
52391: MUL
52392: MUL
52393: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
52394: LD_VAR 0 6
52398: PPUSH
52399: CALL_OW 264
52403: PUSH
52404: LD_INT 5
52406: PUSH
52407: LD_INT 6
52409: PUSH
52410: LD_INT 46
52412: PUSH
52413: LD_INT 44
52415: PUSH
52416: LD_INT 47
52418: PUSH
52419: LD_INT 45
52421: PUSH
52422: LD_INT 28
52424: PUSH
52425: LD_INT 7
52427: PUSH
52428: LD_INT 27
52430: PUSH
52431: LD_INT 29
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: IN
52446: PUSH
52447: LD_VAR 0 1
52451: PPUSH
52452: LD_INT 52
52454: PPUSH
52455: CALL_OW 321
52459: PUSH
52460: LD_INT 2
52462: EQUAL
52463: AND
52464: IFFALSE 52481
// bpoints := bpoints * 1.2 ;
52466: LD_ADDR_VAR 0 10
52470: PUSH
52471: LD_VAR 0 10
52475: PUSH
52476: LD_REAL  1.20000000000000E+0000
52479: MUL
52480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
52481: LD_VAR 0 6
52485: PPUSH
52486: CALL_OW 264
52490: PUSH
52491: LD_INT 6
52493: PUSH
52494: LD_INT 46
52496: PUSH
52497: LD_INT 47
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: IN
52505: IFFALSE 52522
// bpoints := bpoints * 1.2 ;
52507: LD_ADDR_VAR 0 10
52511: PUSH
52512: LD_VAR 0 10
52516: PUSH
52517: LD_REAL  1.20000000000000E+0000
52520: MUL
52521: ST_TO_ADDR
// end ; unit_building :
52522: GO 52536
52524: LD_INT 3
52526: DOUBLE
52527: EQUAL
52528: IFTRUE 52532
52530: GO 52535
52532: POP
// ; end ;
52533: GO 52536
52535: POP
// for j = 1 to 3 do
52536: LD_ADDR_VAR 0 7
52540: PUSH
52541: DOUBLE
52542: LD_INT 1
52544: DEC
52545: ST_TO_ADDR
52546: LD_INT 3
52548: PUSH
52549: FOR_TO
52550: IFFALSE 52603
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
52552: LD_ADDR_VAR 0 5
52556: PUSH
52557: LD_VAR 0 5
52561: PPUSH
52562: LD_VAR 0 7
52566: PPUSH
52567: LD_VAR 0 5
52571: PUSH
52572: LD_VAR 0 7
52576: ARRAY
52577: PUSH
52578: LD_VAR 0 9
52582: PUSH
52583: LD_VAR 0 7
52587: ARRAY
52588: PUSH
52589: LD_VAR 0 10
52593: MUL
52594: PLUS
52595: PPUSH
52596: CALL_OW 1
52600: ST_TO_ADDR
52601: GO 52549
52603: POP
52604: POP
// end ;
52605: GO 51082
52607: POP
52608: POP
// result := Replace ( result , 4 , tmp ) ;
52609: LD_ADDR_VAR 0 5
52613: PUSH
52614: LD_VAR 0 5
52618: PPUSH
52619: LD_INT 4
52621: PPUSH
52622: LD_VAR 0 8
52626: PPUSH
52627: CALL_OW 1
52631: ST_TO_ADDR
// end ;
52632: LD_VAR 0 5
52636: RET
// export function DangerAtRange ( unit , range ) ; begin
52637: LD_INT 0
52639: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_VAR 0 1
52649: PPUSH
52650: CALL_OW 255
52654: PPUSH
52655: LD_VAR 0 1
52659: PPUSH
52660: CALL_OW 250
52664: PPUSH
52665: LD_VAR 0 1
52669: PPUSH
52670: CALL_OW 251
52674: PPUSH
52675: LD_VAR 0 2
52679: PPUSH
52680: CALL 50934 0 4
52684: ST_TO_ADDR
// end ;
52685: LD_VAR 0 3
52689: RET
// export function DangerInArea ( side , area ) ; begin
52690: LD_INT 0
52692: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
52693: LD_ADDR_VAR 0 3
52697: PUSH
52698: LD_VAR 0 2
52702: PPUSH
52703: LD_INT 81
52705: PUSH
52706: LD_VAR 0 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PPUSH
52715: CALL_OW 70
52719: ST_TO_ADDR
// end ;
52720: LD_VAR 0 3
52724: RET
// export function IsExtension ( b ) ; begin
52725: LD_INT 0
52727: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
52728: LD_ADDR_VAR 0 2
52732: PUSH
52733: LD_VAR 0 1
52737: PUSH
52738: LD_INT 23
52740: PUSH
52741: LD_INT 20
52743: PUSH
52744: LD_INT 22
52746: PUSH
52747: LD_INT 17
52749: PUSH
52750: LD_INT 24
52752: PUSH
52753: LD_INT 21
52755: PUSH
52756: LD_INT 19
52758: PUSH
52759: LD_INT 16
52761: PUSH
52762: LD_INT 25
52764: PUSH
52765: LD_INT 18
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: IN
52780: ST_TO_ADDR
// end ;
52781: LD_VAR 0 2
52785: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52786: LD_INT 0
52788: PPUSH
52789: PPUSH
52790: PPUSH
// result := [ ] ;
52791: LD_ADDR_VAR 0 4
52795: PUSH
52796: EMPTY
52797: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52798: LD_ADDR_VAR 0 5
52802: PUSH
52803: LD_VAR 0 2
52807: PPUSH
52808: LD_INT 21
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PPUSH
52818: CALL_OW 70
52822: ST_TO_ADDR
// if not tmp then
52823: LD_VAR 0 5
52827: NOT
52828: IFFALSE 52832
// exit ;
52830: GO 52896
// if checkLink then
52832: LD_VAR 0 3
52836: IFFALSE 52886
// begin for i in tmp do
52838: LD_ADDR_VAR 0 6
52842: PUSH
52843: LD_VAR 0 5
52847: PUSH
52848: FOR_IN
52849: IFFALSE 52884
// if GetBase ( i ) <> base then
52851: LD_VAR 0 6
52855: PPUSH
52856: CALL_OW 274
52860: PUSH
52861: LD_VAR 0 1
52865: NONEQUAL
52866: IFFALSE 52882
// ComLinkToBase ( base , i ) ;
52868: LD_VAR 0 1
52872: PPUSH
52873: LD_VAR 0 6
52877: PPUSH
52878: CALL_OW 169
52882: GO 52848
52884: POP
52885: POP
// end ; result := tmp ;
52886: LD_ADDR_VAR 0 4
52890: PUSH
52891: LD_VAR 0 5
52895: ST_TO_ADDR
// end ;
52896: LD_VAR 0 4
52900: RET
// export function ComComplete ( units , b ) ; var i ; begin
52901: LD_INT 0
52903: PPUSH
52904: PPUSH
// if not units then
52905: LD_VAR 0 1
52909: NOT
52910: IFFALSE 52914
// exit ;
52912: GO 53004
// for i in units do
52914: LD_ADDR_VAR 0 4
52918: PUSH
52919: LD_VAR 0 1
52923: PUSH
52924: FOR_IN
52925: IFFALSE 53002
// if BuildingStatus ( b ) = bs_build then
52927: LD_VAR 0 2
52931: PPUSH
52932: CALL_OW 461
52936: PUSH
52937: LD_INT 1
52939: EQUAL
52940: IFFALSE 53000
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52942: LD_VAR 0 4
52946: PPUSH
52947: LD_STRING h
52949: PUSH
52950: LD_VAR 0 2
52954: PPUSH
52955: CALL_OW 250
52959: PUSH
52960: LD_VAR 0 2
52964: PPUSH
52965: CALL_OW 251
52969: PUSH
52970: LD_VAR 0 2
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: PPUSH
52996: CALL_OW 446
53000: GO 52924
53002: POP
53003: POP
// end ;
53004: LD_VAR 0 3
53008: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
53009: LD_INT 0
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
53017: LD_VAR 0 1
53021: NOT
53022: PUSH
53023: LD_VAR 0 1
53027: PPUSH
53028: CALL_OW 263
53032: PUSH
53033: LD_INT 2
53035: NONEQUAL
53036: OR
53037: IFFALSE 53041
// exit ;
53039: GO 53357
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53041: LD_ADDR_VAR 0 6
53045: PUSH
53046: LD_INT 22
53048: PUSH
53049: LD_VAR 0 1
53053: PPUSH
53054: CALL_OW 255
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 30
53068: PUSH
53069: LD_INT 36
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 34
53078: PUSH
53079: LD_INT 31
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PPUSH
53095: CALL_OW 69
53099: ST_TO_ADDR
// if not tmp then
53100: LD_VAR 0 6
53104: NOT
53105: IFFALSE 53109
// exit ;
53107: GO 53357
// result := [ ] ;
53109: LD_ADDR_VAR 0 2
53113: PUSH
53114: EMPTY
53115: ST_TO_ADDR
// for i in tmp do
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: LD_VAR 0 6
53125: PUSH
53126: FOR_IN
53127: IFFALSE 53198
// begin t := UnitsInside ( i ) ;
53129: LD_ADDR_VAR 0 4
53133: PUSH
53134: LD_VAR 0 3
53138: PPUSH
53139: CALL_OW 313
53143: ST_TO_ADDR
// if t then
53144: LD_VAR 0 4
53148: IFFALSE 53196
// for j in t do
53150: LD_ADDR_VAR 0 7
53154: PUSH
53155: LD_VAR 0 4
53159: PUSH
53160: FOR_IN
53161: IFFALSE 53194
// result := Replace ( result , result + 1 , j ) ;
53163: LD_ADDR_VAR 0 2
53167: PUSH
53168: LD_VAR 0 2
53172: PPUSH
53173: LD_VAR 0 2
53177: PUSH
53178: LD_INT 1
53180: PLUS
53181: PPUSH
53182: LD_VAR 0 7
53186: PPUSH
53187: CALL_OW 1
53191: ST_TO_ADDR
53192: GO 53160
53194: POP
53195: POP
// end ;
53196: GO 53126
53198: POP
53199: POP
// if not result then
53200: LD_VAR 0 2
53204: NOT
53205: IFFALSE 53209
// exit ;
53207: GO 53357
// mech := result [ 1 ] ;
53209: LD_ADDR_VAR 0 5
53213: PUSH
53214: LD_VAR 0 2
53218: PUSH
53219: LD_INT 1
53221: ARRAY
53222: ST_TO_ADDR
// if result > 1 then
53223: LD_VAR 0 2
53227: PUSH
53228: LD_INT 1
53230: GREATER
53231: IFFALSE 53343
// begin for i = 2 to result do
53233: LD_ADDR_VAR 0 3
53237: PUSH
53238: DOUBLE
53239: LD_INT 2
53241: DEC
53242: ST_TO_ADDR
53243: LD_VAR 0 2
53247: PUSH
53248: FOR_TO
53249: IFFALSE 53341
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
53251: LD_ADDR_VAR 0 4
53255: PUSH
53256: LD_VAR 0 2
53260: PUSH
53261: LD_VAR 0 3
53265: ARRAY
53266: PPUSH
53267: LD_INT 3
53269: PPUSH
53270: CALL_OW 259
53274: PUSH
53275: LD_VAR 0 2
53279: PUSH
53280: LD_VAR 0 3
53284: ARRAY
53285: PPUSH
53286: CALL_OW 432
53290: MINUS
53291: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
53292: LD_VAR 0 4
53296: PUSH
53297: LD_VAR 0 5
53301: PPUSH
53302: LD_INT 3
53304: PPUSH
53305: CALL_OW 259
53309: PUSH
53310: LD_VAR 0 5
53314: PPUSH
53315: CALL_OW 432
53319: MINUS
53320: GREATEREQUAL
53321: IFFALSE 53339
// mech := result [ i ] ;
53323: LD_ADDR_VAR 0 5
53327: PUSH
53328: LD_VAR 0 2
53332: PUSH
53333: LD_VAR 0 3
53337: ARRAY
53338: ST_TO_ADDR
// end ;
53339: GO 53248
53341: POP
53342: POP
// end ; ComLinkTo ( vehicle , mech ) ;
53343: LD_VAR 0 1
53347: PPUSH
53348: LD_VAR 0 5
53352: PPUSH
53353: CALL_OW 135
// end ;
53357: LD_VAR 0 2
53361: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
53362: LD_INT 0
53364: PPUSH
53365: PPUSH
53366: PPUSH
53367: PPUSH
53368: PPUSH
53369: PPUSH
53370: PPUSH
53371: PPUSH
53372: PPUSH
53373: PPUSH
53374: PPUSH
53375: PPUSH
53376: PPUSH
// result := [ ] ;
53377: LD_ADDR_VAR 0 7
53381: PUSH
53382: EMPTY
53383: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
53384: LD_VAR 0 1
53388: PPUSH
53389: CALL_OW 266
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: IN
53404: NOT
53405: IFFALSE 53409
// exit ;
53407: GO 55043
// if name then
53409: LD_VAR 0 3
53413: IFFALSE 53429
// SetBName ( base_dep , name ) ;
53415: LD_VAR 0 1
53419: PPUSH
53420: LD_VAR 0 3
53424: PPUSH
53425: CALL_OW 500
// base := GetBase ( base_dep ) ;
53429: LD_ADDR_VAR 0 15
53433: PUSH
53434: LD_VAR 0 1
53438: PPUSH
53439: CALL_OW 274
53443: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
53444: LD_ADDR_VAR 0 16
53448: PUSH
53449: LD_VAR 0 1
53453: PPUSH
53454: CALL_OW 255
53458: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
53459: LD_ADDR_VAR 0 17
53463: PUSH
53464: LD_VAR 0 1
53468: PPUSH
53469: CALL_OW 248
53473: ST_TO_ADDR
// if sources then
53474: LD_VAR 0 5
53478: IFFALSE 53525
// for i = 1 to 3 do
53480: LD_ADDR_VAR 0 8
53484: PUSH
53485: DOUBLE
53486: LD_INT 1
53488: DEC
53489: ST_TO_ADDR
53490: LD_INT 3
53492: PUSH
53493: FOR_TO
53494: IFFALSE 53523
// AddResourceType ( base , i , sources [ i ] ) ;
53496: LD_VAR 0 15
53500: PPUSH
53501: LD_VAR 0 8
53505: PPUSH
53506: LD_VAR 0 5
53510: PUSH
53511: LD_VAR 0 8
53515: ARRAY
53516: PPUSH
53517: CALL_OW 276
53521: GO 53493
53523: POP
53524: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
53525: LD_ADDR_VAR 0 18
53529: PUSH
53530: LD_VAR 0 15
53534: PPUSH
53535: LD_VAR 0 2
53539: PPUSH
53540: LD_INT 1
53542: PPUSH
53543: CALL 52786 0 3
53547: ST_TO_ADDR
// InitHc ;
53548: CALL_OW 19
// InitUc ;
53552: CALL_OW 18
// uc_side := side ;
53556: LD_ADDR_OWVAR 20
53560: PUSH
53561: LD_VAR 0 16
53565: ST_TO_ADDR
// uc_nation := nation ;
53566: LD_ADDR_OWVAR 21
53570: PUSH
53571: LD_VAR 0 17
53575: ST_TO_ADDR
// if buildings then
53576: LD_VAR 0 18
53580: IFFALSE 54902
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
53582: LD_ADDR_VAR 0 19
53586: PUSH
53587: LD_VAR 0 18
53591: PPUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 30
53597: PUSH
53598: LD_INT 29
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 30
53607: PUSH
53608: LD_INT 30
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: PPUSH
53620: CALL_OW 72
53624: ST_TO_ADDR
// if tmp then
53625: LD_VAR 0 19
53629: IFFALSE 53677
// for i in tmp do
53631: LD_ADDR_VAR 0 8
53635: PUSH
53636: LD_VAR 0 19
53640: PUSH
53641: FOR_IN
53642: IFFALSE 53675
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
53644: LD_VAR 0 8
53648: PPUSH
53649: CALL_OW 250
53653: PPUSH
53654: LD_VAR 0 8
53658: PPUSH
53659: CALL_OW 251
53663: PPUSH
53664: LD_VAR 0 16
53668: PPUSH
53669: CALL_OW 441
53673: GO 53641
53675: POP
53676: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
53677: LD_VAR 0 18
53681: PPUSH
53682: LD_INT 2
53684: PUSH
53685: LD_INT 30
53687: PUSH
53688: LD_INT 32
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 30
53697: PUSH
53698: LD_INT 33
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: PPUSH
53710: CALL_OW 72
53714: IFFALSE 53802
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
53716: LD_ADDR_VAR 0 8
53720: PUSH
53721: LD_VAR 0 18
53725: PPUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 30
53731: PUSH
53732: LD_INT 32
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 30
53741: PUSH
53742: LD_INT 33
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: PPUSH
53754: CALL_OW 72
53758: PUSH
53759: FOR_IN
53760: IFFALSE 53800
// begin if not GetBWeapon ( i ) then
53762: LD_VAR 0 8
53766: PPUSH
53767: CALL_OW 269
53771: NOT
53772: IFFALSE 53798
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53774: LD_VAR 0 8
53778: PPUSH
53779: LD_VAR 0 8
53783: PPUSH
53784: LD_VAR 0 2
53788: PPUSH
53789: CALL 55048 0 2
53793: PPUSH
53794: CALL_OW 431
// end ;
53798: GO 53759
53800: POP
53801: POP
// end ; for i = 1 to personel do
53802: LD_ADDR_VAR 0 8
53806: PUSH
53807: DOUBLE
53808: LD_INT 1
53810: DEC
53811: ST_TO_ADDR
53812: LD_VAR 0 6
53816: PUSH
53817: FOR_TO
53818: IFFALSE 54882
// begin if i > 4 then
53820: LD_VAR 0 8
53824: PUSH
53825: LD_INT 4
53827: GREATER
53828: IFFALSE 53832
// break ;
53830: GO 54882
// case i of 1 :
53832: LD_VAR 0 8
53836: PUSH
53837: LD_INT 1
53839: DOUBLE
53840: EQUAL
53841: IFTRUE 53845
53843: GO 53925
53845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53846: LD_ADDR_VAR 0 12
53850: PUSH
53851: LD_VAR 0 18
53855: PPUSH
53856: LD_INT 22
53858: PUSH
53859: LD_VAR 0 16
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 58
53870: PUSH
53871: EMPTY
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 30
53879: PUSH
53880: LD_INT 32
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 30
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 30
53899: PUSH
53900: LD_INT 5
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: PPUSH
53918: CALL_OW 72
53922: ST_TO_ADDR
53923: GO 54147
53925: LD_INT 2
53927: DOUBLE
53928: EQUAL
53929: IFTRUE 53933
53931: GO 53995
53933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53934: LD_ADDR_VAR 0 12
53938: PUSH
53939: LD_VAR 0 18
53943: PPUSH
53944: LD_INT 22
53946: PUSH
53947: LD_VAR 0 16
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 30
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 30
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PPUSH
53988: CALL_OW 72
53992: ST_TO_ADDR
53993: GO 54147
53995: LD_INT 3
53997: DOUBLE
53998: EQUAL
53999: IFTRUE 54003
54001: GO 54065
54003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
54004: LD_ADDR_VAR 0 12
54008: PUSH
54009: LD_VAR 0 18
54013: PPUSH
54014: LD_INT 22
54016: PUSH
54017: LD_VAR 0 16
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 30
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 30
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PPUSH
54058: CALL_OW 72
54062: ST_TO_ADDR
54063: GO 54147
54065: LD_INT 4
54067: DOUBLE
54068: EQUAL
54069: IFTRUE 54073
54071: GO 54146
54073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54074: LD_ADDR_VAR 0 12
54078: PUSH
54079: LD_VAR 0 18
54083: PPUSH
54084: LD_INT 22
54086: PUSH
54087: LD_VAR 0 16
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: LD_INT 30
54101: PUSH
54102: LD_INT 6
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 30
54111: PUSH
54112: LD_INT 7
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 30
54121: PUSH
54122: LD_INT 8
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PPUSH
54139: CALL_OW 72
54143: ST_TO_ADDR
54144: GO 54147
54146: POP
// if i = 1 then
54147: LD_VAR 0 8
54151: PUSH
54152: LD_INT 1
54154: EQUAL
54155: IFFALSE 54266
// begin tmp := [ ] ;
54157: LD_ADDR_VAR 0 19
54161: PUSH
54162: EMPTY
54163: ST_TO_ADDR
// for j in f do
54164: LD_ADDR_VAR 0 9
54168: PUSH
54169: LD_VAR 0 12
54173: PUSH
54174: FOR_IN
54175: IFFALSE 54248
// if GetBType ( j ) = b_bunker then
54177: LD_VAR 0 9
54181: PPUSH
54182: CALL_OW 266
54186: PUSH
54187: LD_INT 32
54189: EQUAL
54190: IFFALSE 54217
// tmp := Insert ( tmp , 1 , j ) else
54192: LD_ADDR_VAR 0 19
54196: PUSH
54197: LD_VAR 0 19
54201: PPUSH
54202: LD_INT 1
54204: PPUSH
54205: LD_VAR 0 9
54209: PPUSH
54210: CALL_OW 2
54214: ST_TO_ADDR
54215: GO 54246
// tmp := Insert ( tmp , tmp + 1 , j ) ;
54217: LD_ADDR_VAR 0 19
54221: PUSH
54222: LD_VAR 0 19
54226: PPUSH
54227: LD_VAR 0 19
54231: PUSH
54232: LD_INT 1
54234: PLUS
54235: PPUSH
54236: LD_VAR 0 9
54240: PPUSH
54241: CALL_OW 2
54245: ST_TO_ADDR
54246: GO 54174
54248: POP
54249: POP
// if tmp then
54250: LD_VAR 0 19
54254: IFFALSE 54266
// f := tmp ;
54256: LD_ADDR_VAR 0 12
54260: PUSH
54261: LD_VAR 0 19
54265: ST_TO_ADDR
// end ; x := personel [ i ] ;
54266: LD_ADDR_VAR 0 13
54270: PUSH
54271: LD_VAR 0 6
54275: PUSH
54276: LD_VAR 0 8
54280: ARRAY
54281: ST_TO_ADDR
// if x = - 1 then
54282: LD_VAR 0 13
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: EQUAL
54291: IFFALSE 54500
// begin for j in f do
54293: LD_ADDR_VAR 0 9
54297: PUSH
54298: LD_VAR 0 12
54302: PUSH
54303: FOR_IN
54304: IFFALSE 54496
// repeat InitHc ;
54306: CALL_OW 19
// if GetBType ( j ) = b_barracks then
54310: LD_VAR 0 9
54314: PPUSH
54315: CALL_OW 266
54319: PUSH
54320: LD_INT 5
54322: EQUAL
54323: IFFALSE 54393
// begin if UnitsInside ( j ) < 3 then
54325: LD_VAR 0 9
54329: PPUSH
54330: CALL_OW 313
54334: PUSH
54335: LD_INT 3
54337: LESS
54338: IFFALSE 54374
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54340: LD_INT 0
54342: PPUSH
54343: LD_INT 5
54345: PUSH
54346: LD_INT 8
54348: PUSH
54349: LD_INT 9
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: PUSH
54357: LD_VAR 0 17
54361: ARRAY
54362: PPUSH
54363: LD_VAR 0 4
54367: PPUSH
54368: CALL_OW 380
54372: GO 54391
// PrepareHuman ( false , i , skill ) ;
54374: LD_INT 0
54376: PPUSH
54377: LD_VAR 0 8
54381: PPUSH
54382: LD_VAR 0 4
54386: PPUSH
54387: CALL_OW 380
// end else
54391: GO 54410
// PrepareHuman ( false , i , skill ) ;
54393: LD_INT 0
54395: PPUSH
54396: LD_VAR 0 8
54400: PPUSH
54401: LD_VAR 0 4
54405: PPUSH
54406: CALL_OW 380
// un := CreateHuman ;
54410: LD_ADDR_VAR 0 14
54414: PUSH
54415: CALL_OW 44
54419: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54420: LD_ADDR_VAR 0 7
54424: PUSH
54425: LD_VAR 0 7
54429: PPUSH
54430: LD_INT 1
54432: PPUSH
54433: LD_VAR 0 14
54437: PPUSH
54438: CALL_OW 2
54442: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
54443: LD_VAR 0 14
54447: PPUSH
54448: LD_VAR 0 9
54452: PPUSH
54453: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
54457: LD_VAR 0 9
54461: PPUSH
54462: CALL_OW 313
54466: PUSH
54467: LD_INT 6
54469: EQUAL
54470: PUSH
54471: LD_VAR 0 9
54475: PPUSH
54476: CALL_OW 266
54480: PUSH
54481: LD_INT 32
54483: PUSH
54484: LD_INT 31
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: IN
54491: OR
54492: IFFALSE 54306
54494: GO 54303
54496: POP
54497: POP
// end else
54498: GO 54880
// for j = 1 to x do
54500: LD_ADDR_VAR 0 9
54504: PUSH
54505: DOUBLE
54506: LD_INT 1
54508: DEC
54509: ST_TO_ADDR
54510: LD_VAR 0 13
54514: PUSH
54515: FOR_TO
54516: IFFALSE 54878
// begin InitHc ;
54518: CALL_OW 19
// if not f then
54522: LD_VAR 0 12
54526: NOT
54527: IFFALSE 54616
// begin PrepareHuman ( false , i , skill ) ;
54529: LD_INT 0
54531: PPUSH
54532: LD_VAR 0 8
54536: PPUSH
54537: LD_VAR 0 4
54541: PPUSH
54542: CALL_OW 380
// un := CreateHuman ;
54546: LD_ADDR_VAR 0 14
54550: PUSH
54551: CALL_OW 44
54555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54556: LD_ADDR_VAR 0 7
54560: PUSH
54561: LD_VAR 0 7
54565: PPUSH
54566: LD_INT 1
54568: PPUSH
54569: LD_VAR 0 14
54573: PPUSH
54574: CALL_OW 2
54578: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54579: LD_VAR 0 14
54583: PPUSH
54584: LD_VAR 0 1
54588: PPUSH
54589: CALL_OW 250
54593: PPUSH
54594: LD_VAR 0 1
54598: PPUSH
54599: CALL_OW 251
54603: PPUSH
54604: LD_INT 10
54606: PPUSH
54607: LD_INT 0
54609: PPUSH
54610: CALL_OW 50
// continue ;
54614: GO 54515
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
54616: LD_VAR 0 12
54620: PUSH
54621: LD_INT 1
54623: ARRAY
54624: PPUSH
54625: CALL_OW 313
54629: PUSH
54630: LD_VAR 0 12
54634: PUSH
54635: LD_INT 1
54637: ARRAY
54638: PPUSH
54639: CALL_OW 266
54643: PUSH
54644: LD_INT 32
54646: PUSH
54647: LD_INT 31
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: IN
54654: AND
54655: PUSH
54656: LD_VAR 0 12
54660: PUSH
54661: LD_INT 1
54663: ARRAY
54664: PPUSH
54665: CALL_OW 313
54669: PUSH
54670: LD_INT 6
54672: EQUAL
54673: OR
54674: IFFALSE 54694
// f := Delete ( f , 1 ) ;
54676: LD_ADDR_VAR 0 12
54680: PUSH
54681: LD_VAR 0 12
54685: PPUSH
54686: LD_INT 1
54688: PPUSH
54689: CALL_OW 3
54693: ST_TO_ADDR
// if not f then
54694: LD_VAR 0 12
54698: NOT
54699: IFFALSE 54717
// begin x := x + 2 ;
54701: LD_ADDR_VAR 0 13
54705: PUSH
54706: LD_VAR 0 13
54710: PUSH
54711: LD_INT 2
54713: PLUS
54714: ST_TO_ADDR
// continue ;
54715: GO 54515
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
54717: LD_VAR 0 12
54721: PUSH
54722: LD_INT 1
54724: ARRAY
54725: PPUSH
54726: CALL_OW 266
54730: PUSH
54731: LD_INT 5
54733: EQUAL
54734: IFFALSE 54808
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54736: LD_VAR 0 12
54740: PUSH
54741: LD_INT 1
54743: ARRAY
54744: PPUSH
54745: CALL_OW 313
54749: PUSH
54750: LD_INT 3
54752: LESS
54753: IFFALSE 54789
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54755: LD_INT 0
54757: PPUSH
54758: LD_INT 5
54760: PUSH
54761: LD_INT 8
54763: PUSH
54764: LD_INT 9
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: PUSH
54772: LD_VAR 0 17
54776: ARRAY
54777: PPUSH
54778: LD_VAR 0 4
54782: PPUSH
54783: CALL_OW 380
54787: GO 54806
// PrepareHuman ( false , i , skill ) ;
54789: LD_INT 0
54791: PPUSH
54792: LD_VAR 0 8
54796: PPUSH
54797: LD_VAR 0 4
54801: PPUSH
54802: CALL_OW 380
// end else
54806: GO 54825
// PrepareHuman ( false , i , skill ) ;
54808: LD_INT 0
54810: PPUSH
54811: LD_VAR 0 8
54815: PPUSH
54816: LD_VAR 0 4
54820: PPUSH
54821: CALL_OW 380
// un := CreateHuman ;
54825: LD_ADDR_VAR 0 14
54829: PUSH
54830: CALL_OW 44
54834: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54835: LD_ADDR_VAR 0 7
54839: PUSH
54840: LD_VAR 0 7
54844: PPUSH
54845: LD_INT 1
54847: PPUSH
54848: LD_VAR 0 14
54852: PPUSH
54853: CALL_OW 2
54857: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54858: LD_VAR 0 14
54862: PPUSH
54863: LD_VAR 0 12
54867: PUSH
54868: LD_INT 1
54870: ARRAY
54871: PPUSH
54872: CALL_OW 52
// end ;
54876: GO 54515
54878: POP
54879: POP
// end ;
54880: GO 53817
54882: POP
54883: POP
// result := result ^ buildings ;
54884: LD_ADDR_VAR 0 7
54888: PUSH
54889: LD_VAR 0 7
54893: PUSH
54894: LD_VAR 0 18
54898: ADD
54899: ST_TO_ADDR
// end else
54900: GO 55043
// begin for i = 1 to personel do
54902: LD_ADDR_VAR 0 8
54906: PUSH
54907: DOUBLE
54908: LD_INT 1
54910: DEC
54911: ST_TO_ADDR
54912: LD_VAR 0 6
54916: PUSH
54917: FOR_TO
54918: IFFALSE 55041
// begin if i > 4 then
54920: LD_VAR 0 8
54924: PUSH
54925: LD_INT 4
54927: GREATER
54928: IFFALSE 54932
// break ;
54930: GO 55041
// x := personel [ i ] ;
54932: LD_ADDR_VAR 0 13
54936: PUSH
54937: LD_VAR 0 6
54941: PUSH
54942: LD_VAR 0 8
54946: ARRAY
54947: ST_TO_ADDR
// if x = - 1 then
54948: LD_VAR 0 13
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: EQUAL
54957: IFFALSE 54961
// continue ;
54959: GO 54917
// PrepareHuman ( false , i , skill ) ;
54961: LD_INT 0
54963: PPUSH
54964: LD_VAR 0 8
54968: PPUSH
54969: LD_VAR 0 4
54973: PPUSH
54974: CALL_OW 380
// un := CreateHuman ;
54978: LD_ADDR_VAR 0 14
54982: PUSH
54983: CALL_OW 44
54987: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54988: LD_VAR 0 14
54992: PPUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: CALL_OW 250
55002: PPUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 251
55012: PPUSH
55013: LD_INT 10
55015: PPUSH
55016: LD_INT 0
55018: PPUSH
55019: CALL_OW 50
// result := result ^ un ;
55023: LD_ADDR_VAR 0 7
55027: PUSH
55028: LD_VAR 0 7
55032: PUSH
55033: LD_VAR 0 14
55037: ADD
55038: ST_TO_ADDR
// end ;
55039: GO 54917
55041: POP
55042: POP
// end ; end ;
55043: LD_VAR 0 7
55047: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55048: LD_INT 0
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
// result := false ;
55066: LD_ADDR_VAR 0 3
55070: PUSH
55071: LD_INT 0
55073: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55074: LD_VAR 0 1
55078: NOT
55079: PUSH
55080: LD_VAR 0 1
55084: PPUSH
55085: CALL_OW 266
55089: PUSH
55090: LD_INT 32
55092: PUSH
55093: LD_INT 33
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: IN
55100: NOT
55101: OR
55102: IFFALSE 55106
// exit ;
55104: GO 56215
// nat := GetNation ( tower ) ;
55106: LD_ADDR_VAR 0 12
55110: PUSH
55111: LD_VAR 0 1
55115: PPUSH
55116: CALL_OW 248
55120: ST_TO_ADDR
// side := GetSide ( tower ) ;
55121: LD_ADDR_VAR 0 16
55125: PUSH
55126: LD_VAR 0 1
55130: PPUSH
55131: CALL_OW 255
55135: ST_TO_ADDR
// x := GetX ( tower ) ;
55136: LD_ADDR_VAR 0 10
55140: PUSH
55141: LD_VAR 0 1
55145: PPUSH
55146: CALL_OW 250
55150: ST_TO_ADDR
// y := GetY ( tower ) ;
55151: LD_ADDR_VAR 0 11
55155: PUSH
55156: LD_VAR 0 1
55160: PPUSH
55161: CALL_OW 251
55165: ST_TO_ADDR
// if not x or not y then
55166: LD_VAR 0 10
55170: NOT
55171: PUSH
55172: LD_VAR 0 11
55176: NOT
55177: OR
55178: IFFALSE 55182
// exit ;
55180: GO 56215
// weapon := 0 ;
55182: LD_ADDR_VAR 0 18
55186: PUSH
55187: LD_INT 0
55189: ST_TO_ADDR
// fac_list := [ ] ;
55190: LD_ADDR_VAR 0 17
55194: PUSH
55195: EMPTY
55196: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
55197: LD_ADDR_VAR 0 6
55201: PUSH
55202: LD_VAR 0 1
55206: PPUSH
55207: CALL_OW 274
55211: PPUSH
55212: LD_VAR 0 2
55216: PPUSH
55217: LD_INT 0
55219: PPUSH
55220: CALL 52786 0 3
55224: PPUSH
55225: LD_INT 30
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PPUSH
55235: CALL_OW 72
55239: ST_TO_ADDR
// if not factories then
55240: LD_VAR 0 6
55244: NOT
55245: IFFALSE 55249
// exit ;
55247: GO 56215
// for i in factories do
55249: LD_ADDR_VAR 0 8
55253: PUSH
55254: LD_VAR 0 6
55258: PUSH
55259: FOR_IN
55260: IFFALSE 55285
// fac_list := fac_list union AvailableWeaponList ( i ) ;
55262: LD_ADDR_VAR 0 17
55266: PUSH
55267: LD_VAR 0 17
55271: PUSH
55272: LD_VAR 0 8
55276: PPUSH
55277: CALL_OW 478
55281: UNION
55282: ST_TO_ADDR
55283: GO 55259
55285: POP
55286: POP
// if not fac_list then
55287: LD_VAR 0 17
55291: NOT
55292: IFFALSE 55296
// exit ;
55294: GO 56215
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
55296: LD_ADDR_VAR 0 5
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: LD_INT 5
55306: PUSH
55307: LD_INT 9
55309: PUSH
55310: LD_INT 10
55312: PUSH
55313: LD_INT 6
55315: PUSH
55316: LD_INT 7
55318: PUSH
55319: LD_INT 11
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 27
55333: PUSH
55334: LD_INT 28
55336: PUSH
55337: LD_INT 26
55339: PUSH
55340: LD_INT 30
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 43
55351: PUSH
55352: LD_INT 44
55354: PUSH
55355: LD_INT 46
55357: PUSH
55358: LD_INT 45
55360: PUSH
55361: LD_INT 47
55363: PUSH
55364: LD_INT 49
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: PUSH
55380: LD_VAR 0 12
55384: ARRAY
55385: ST_TO_ADDR
// list := list isect fac_list ;
55386: LD_ADDR_VAR 0 5
55390: PUSH
55391: LD_VAR 0 5
55395: PUSH
55396: LD_VAR 0 17
55400: ISECT
55401: ST_TO_ADDR
// if not list then
55402: LD_VAR 0 5
55406: NOT
55407: IFFALSE 55411
// exit ;
55409: GO 56215
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
55411: LD_VAR 0 12
55415: PUSH
55416: LD_INT 3
55418: EQUAL
55419: PUSH
55420: LD_INT 49
55422: PUSH
55423: LD_VAR 0 5
55427: IN
55428: AND
55429: PUSH
55430: LD_INT 31
55432: PPUSH
55433: LD_VAR 0 16
55437: PPUSH
55438: CALL_OW 321
55442: PUSH
55443: LD_INT 2
55445: EQUAL
55446: AND
55447: IFFALSE 55507
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
55449: LD_INT 22
55451: PUSH
55452: LD_VAR 0 16
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 35
55463: PUSH
55464: LD_INT 49
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 91
55473: PUSH
55474: LD_VAR 0 1
55478: PUSH
55479: LD_INT 10
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: PPUSH
55492: CALL_OW 69
55496: NOT
55497: IFFALSE 55507
// weapon := ru_time_lapser ;
55499: LD_ADDR_VAR 0 18
55503: PUSH
55504: LD_INT 49
55506: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
55507: LD_VAR 0 12
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: IN
55522: PUSH
55523: LD_INT 11
55525: PUSH
55526: LD_VAR 0 5
55530: IN
55531: PUSH
55532: LD_INT 30
55534: PUSH
55535: LD_VAR 0 5
55539: IN
55540: OR
55541: AND
55542: PUSH
55543: LD_INT 6
55545: PPUSH
55546: LD_VAR 0 16
55550: PPUSH
55551: CALL_OW 321
55555: PUSH
55556: LD_INT 2
55558: EQUAL
55559: AND
55560: IFFALSE 55725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
55562: LD_INT 22
55564: PUSH
55565: LD_VAR 0 16
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 35
55579: PUSH
55580: LD_INT 11
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 35
55589: PUSH
55590: LD_INT 30
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 91
55604: PUSH
55605: LD_VAR 0 1
55609: PUSH
55610: LD_INT 18
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: PPUSH
55623: CALL_OW 69
55627: NOT
55628: PUSH
55629: LD_INT 22
55631: PUSH
55632: LD_VAR 0 16
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 30
55646: PUSH
55647: LD_INT 32
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 30
55656: PUSH
55657: LD_INT 33
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 91
55671: PUSH
55672: LD_VAR 0 1
55676: PUSH
55677: LD_INT 12
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: PPUSH
55693: CALL_OW 69
55697: PUSH
55698: LD_INT 2
55700: GREATER
55701: AND
55702: IFFALSE 55725
// weapon := [ us_radar , ar_radar ] [ nat ] ;
55704: LD_ADDR_VAR 0 18
55708: PUSH
55709: LD_INT 11
55711: PUSH
55712: LD_INT 30
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_VAR 0 12
55723: ARRAY
55724: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
55725: LD_VAR 0 18
55729: NOT
55730: PUSH
55731: LD_INT 40
55733: PPUSH
55734: LD_VAR 0 16
55738: PPUSH
55739: CALL_OW 321
55743: PUSH
55744: LD_INT 2
55746: EQUAL
55747: AND
55748: PUSH
55749: LD_INT 7
55751: PUSH
55752: LD_VAR 0 5
55756: IN
55757: PUSH
55758: LD_INT 28
55760: PUSH
55761: LD_VAR 0 5
55765: IN
55766: OR
55767: PUSH
55768: LD_INT 45
55770: PUSH
55771: LD_VAR 0 5
55775: IN
55776: OR
55777: AND
55778: IFFALSE 56032
// begin hex := GetHexInfo ( x , y ) ;
55780: LD_ADDR_VAR 0 4
55784: PUSH
55785: LD_VAR 0 10
55789: PPUSH
55790: LD_VAR 0 11
55794: PPUSH
55795: CALL_OW 546
55799: ST_TO_ADDR
// if hex [ 1 ] then
55800: LD_VAR 0 4
55804: PUSH
55805: LD_INT 1
55807: ARRAY
55808: IFFALSE 55812
// exit ;
55810: GO 56215
// height := hex [ 2 ] ;
55812: LD_ADDR_VAR 0 15
55816: PUSH
55817: LD_VAR 0 4
55821: PUSH
55822: LD_INT 2
55824: ARRAY
55825: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55826: LD_ADDR_VAR 0 14
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: LD_INT 5
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// for i in tmp do
55849: LD_ADDR_VAR 0 8
55853: PUSH
55854: LD_VAR 0 14
55858: PUSH
55859: FOR_IN
55860: IFFALSE 56030
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55862: LD_ADDR_VAR 0 9
55866: PUSH
55867: LD_VAR 0 10
55871: PPUSH
55872: LD_VAR 0 8
55876: PPUSH
55877: LD_INT 5
55879: PPUSH
55880: CALL_OW 272
55884: PUSH
55885: LD_VAR 0 11
55889: PPUSH
55890: LD_VAR 0 8
55894: PPUSH
55895: LD_INT 5
55897: PPUSH
55898: CALL_OW 273
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55907: LD_VAR 0 9
55911: PUSH
55912: LD_INT 1
55914: ARRAY
55915: PPUSH
55916: LD_VAR 0 9
55920: PUSH
55921: LD_INT 2
55923: ARRAY
55924: PPUSH
55925: CALL_OW 488
55929: IFFALSE 56028
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55931: LD_ADDR_VAR 0 4
55935: PUSH
55936: LD_VAR 0 9
55940: PUSH
55941: LD_INT 1
55943: ARRAY
55944: PPUSH
55945: LD_VAR 0 9
55949: PUSH
55950: LD_INT 2
55952: ARRAY
55953: PPUSH
55954: CALL_OW 546
55958: ST_TO_ADDR
// if hex [ 1 ] then
55959: LD_VAR 0 4
55963: PUSH
55964: LD_INT 1
55966: ARRAY
55967: IFFALSE 55971
// continue ;
55969: GO 55859
// h := hex [ 2 ] ;
55971: LD_ADDR_VAR 0 13
55975: PUSH
55976: LD_VAR 0 4
55980: PUSH
55981: LD_INT 2
55983: ARRAY
55984: ST_TO_ADDR
// if h + 7 < height then
55985: LD_VAR 0 13
55989: PUSH
55990: LD_INT 7
55992: PLUS
55993: PUSH
55994: LD_VAR 0 15
55998: LESS
55999: IFFALSE 56028
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
56001: LD_ADDR_VAR 0 18
56005: PUSH
56006: LD_INT 7
56008: PUSH
56009: LD_INT 28
56011: PUSH
56012: LD_INT 45
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: PUSH
56020: LD_VAR 0 12
56024: ARRAY
56025: ST_TO_ADDR
// break ;
56026: GO 56030
// end ; end ; end ;
56028: GO 55859
56030: POP
56031: POP
// end ; if not weapon then
56032: LD_VAR 0 18
56036: NOT
56037: IFFALSE 56097
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56039: LD_ADDR_VAR 0 5
56043: PUSH
56044: LD_VAR 0 5
56048: PUSH
56049: LD_INT 11
56051: PUSH
56052: LD_INT 30
56054: PUSH
56055: LD_INT 49
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: DIFF
56063: ST_TO_ADDR
// if not list then
56064: LD_VAR 0 5
56068: NOT
56069: IFFALSE 56073
// exit ;
56071: GO 56215
// weapon := list [ rand ( 1 , list ) ] ;
56073: LD_ADDR_VAR 0 18
56077: PUSH
56078: LD_VAR 0 5
56082: PUSH
56083: LD_INT 1
56085: PPUSH
56086: LD_VAR 0 5
56090: PPUSH
56091: CALL_OW 12
56095: ARRAY
56096: ST_TO_ADDR
// end ; if weapon then
56097: LD_VAR 0 18
56101: IFFALSE 56215
// begin tmp := CostOfWeapon ( weapon ) ;
56103: LD_ADDR_VAR 0 14
56107: PUSH
56108: LD_VAR 0 18
56112: PPUSH
56113: CALL_OW 451
56117: ST_TO_ADDR
// j := GetBase ( tower ) ;
56118: LD_ADDR_VAR 0 9
56122: PUSH
56123: LD_VAR 0 1
56127: PPUSH
56128: CALL_OW 274
56132: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
56133: LD_VAR 0 9
56137: PPUSH
56138: LD_INT 1
56140: PPUSH
56141: CALL_OW 275
56145: PUSH
56146: LD_VAR 0 14
56150: PUSH
56151: LD_INT 1
56153: ARRAY
56154: GREATEREQUAL
56155: PUSH
56156: LD_VAR 0 9
56160: PPUSH
56161: LD_INT 2
56163: PPUSH
56164: CALL_OW 275
56168: PUSH
56169: LD_VAR 0 14
56173: PUSH
56174: LD_INT 2
56176: ARRAY
56177: GREATEREQUAL
56178: AND
56179: PUSH
56180: LD_VAR 0 9
56184: PPUSH
56185: LD_INT 3
56187: PPUSH
56188: CALL_OW 275
56192: PUSH
56193: LD_VAR 0 14
56197: PUSH
56198: LD_INT 3
56200: ARRAY
56201: GREATEREQUAL
56202: AND
56203: IFFALSE 56215
// result := weapon ;
56205: LD_ADDR_VAR 0 3
56209: PUSH
56210: LD_VAR 0 18
56214: ST_TO_ADDR
// end ; end ;
56215: LD_VAR 0 3
56219: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
56220: LD_INT 0
56222: PPUSH
56223: PPUSH
// result := true ;
56224: LD_ADDR_VAR 0 3
56228: PUSH
56229: LD_INT 1
56231: ST_TO_ADDR
// if array1 = array2 then
56232: LD_VAR 0 1
56236: PUSH
56237: LD_VAR 0 2
56241: EQUAL
56242: IFFALSE 56302
// begin for i = 1 to array1 do
56244: LD_ADDR_VAR 0 4
56248: PUSH
56249: DOUBLE
56250: LD_INT 1
56252: DEC
56253: ST_TO_ADDR
56254: LD_VAR 0 1
56258: PUSH
56259: FOR_TO
56260: IFFALSE 56298
// if array1 [ i ] <> array2 [ i ] then
56262: LD_VAR 0 1
56266: PUSH
56267: LD_VAR 0 4
56271: ARRAY
56272: PUSH
56273: LD_VAR 0 2
56277: PUSH
56278: LD_VAR 0 4
56282: ARRAY
56283: NONEQUAL
56284: IFFALSE 56296
// begin result := false ;
56286: LD_ADDR_VAR 0 3
56290: PUSH
56291: LD_INT 0
56293: ST_TO_ADDR
// break ;
56294: GO 56298
// end ;
56296: GO 56259
56298: POP
56299: POP
// end else
56300: GO 56310
// result := false ;
56302: LD_ADDR_VAR 0 3
56306: PUSH
56307: LD_INT 0
56309: ST_TO_ADDR
// end ;
56310: LD_VAR 0 3
56314: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
56315: LD_INT 0
56317: PPUSH
56318: PPUSH
// if not array1 or not array2 then
56319: LD_VAR 0 1
56323: NOT
56324: PUSH
56325: LD_VAR 0 2
56329: NOT
56330: OR
56331: IFFALSE 56335
// exit ;
56333: GO 56399
// result := true ;
56335: LD_ADDR_VAR 0 3
56339: PUSH
56340: LD_INT 1
56342: ST_TO_ADDR
// for i = 1 to array1 do
56343: LD_ADDR_VAR 0 4
56347: PUSH
56348: DOUBLE
56349: LD_INT 1
56351: DEC
56352: ST_TO_ADDR
56353: LD_VAR 0 1
56357: PUSH
56358: FOR_TO
56359: IFFALSE 56397
// if array1 [ i ] <> array2 [ i ] then
56361: LD_VAR 0 1
56365: PUSH
56366: LD_VAR 0 4
56370: ARRAY
56371: PUSH
56372: LD_VAR 0 2
56376: PUSH
56377: LD_VAR 0 4
56381: ARRAY
56382: NONEQUAL
56383: IFFALSE 56395
// begin result := false ;
56385: LD_ADDR_VAR 0 3
56389: PUSH
56390: LD_INT 0
56392: ST_TO_ADDR
// break ;
56393: GO 56397
// end ;
56395: GO 56358
56397: POP
56398: POP
// end ;
56399: LD_VAR 0 3
56403: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
56404: LD_INT 0
56406: PPUSH
56407: PPUSH
56408: PPUSH
// pom := GetBase ( fac ) ;
56409: LD_ADDR_VAR 0 5
56413: PUSH
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 274
56423: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
56424: LD_ADDR_VAR 0 4
56428: PUSH
56429: LD_VAR 0 2
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PPUSH
56438: LD_VAR 0 2
56442: PUSH
56443: LD_INT 2
56445: ARRAY
56446: PPUSH
56447: LD_VAR 0 2
56451: PUSH
56452: LD_INT 3
56454: ARRAY
56455: PPUSH
56456: LD_VAR 0 2
56460: PUSH
56461: LD_INT 4
56463: ARRAY
56464: PPUSH
56465: CALL_OW 449
56469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56470: LD_ADDR_VAR 0 3
56474: PUSH
56475: LD_VAR 0 5
56479: PPUSH
56480: LD_INT 1
56482: PPUSH
56483: CALL_OW 275
56487: PUSH
56488: LD_VAR 0 4
56492: PUSH
56493: LD_INT 1
56495: ARRAY
56496: GREATEREQUAL
56497: PUSH
56498: LD_VAR 0 5
56502: PPUSH
56503: LD_INT 2
56505: PPUSH
56506: CALL_OW 275
56510: PUSH
56511: LD_VAR 0 4
56515: PUSH
56516: LD_INT 2
56518: ARRAY
56519: GREATEREQUAL
56520: AND
56521: PUSH
56522: LD_VAR 0 5
56526: PPUSH
56527: LD_INT 3
56529: PPUSH
56530: CALL_OW 275
56534: PUSH
56535: LD_VAR 0 4
56539: PUSH
56540: LD_INT 3
56542: ARRAY
56543: GREATEREQUAL
56544: AND
56545: ST_TO_ADDR
// end ;
56546: LD_VAR 0 3
56550: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
56551: LD_INT 0
56553: PPUSH
56554: PPUSH
56555: PPUSH
56556: PPUSH
// pom := GetBase ( building ) ;
56557: LD_ADDR_VAR 0 3
56561: PUSH
56562: LD_VAR 0 1
56566: PPUSH
56567: CALL_OW 274
56571: ST_TO_ADDR
// if not pom then
56572: LD_VAR 0 3
56576: NOT
56577: IFFALSE 56581
// exit ;
56579: GO 56751
// btype := GetBType ( building ) ;
56581: LD_ADDR_VAR 0 5
56585: PUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: CALL_OW 266
56595: ST_TO_ADDR
// if btype = b_armoury then
56596: LD_VAR 0 5
56600: PUSH
56601: LD_INT 4
56603: EQUAL
56604: IFFALSE 56614
// btype := b_barracks ;
56606: LD_ADDR_VAR 0 5
56610: PUSH
56611: LD_INT 5
56613: ST_TO_ADDR
// if btype = b_depot then
56614: LD_VAR 0 5
56618: PUSH
56619: LD_INT 0
56621: EQUAL
56622: IFFALSE 56632
// btype := b_warehouse ;
56624: LD_ADDR_VAR 0 5
56628: PUSH
56629: LD_INT 1
56631: ST_TO_ADDR
// if btype = b_workshop then
56632: LD_VAR 0 5
56636: PUSH
56637: LD_INT 2
56639: EQUAL
56640: IFFALSE 56650
// btype := b_factory ;
56642: LD_ADDR_VAR 0 5
56646: PUSH
56647: LD_INT 3
56649: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56650: LD_ADDR_VAR 0 4
56654: PUSH
56655: LD_VAR 0 5
56659: PPUSH
56660: LD_VAR 0 1
56664: PPUSH
56665: CALL_OW 248
56669: PPUSH
56670: CALL_OW 450
56674: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56675: LD_ADDR_VAR 0 2
56679: PUSH
56680: LD_VAR 0 3
56684: PPUSH
56685: LD_INT 1
56687: PPUSH
56688: CALL_OW 275
56692: PUSH
56693: LD_VAR 0 4
56697: PUSH
56698: LD_INT 1
56700: ARRAY
56701: GREATEREQUAL
56702: PUSH
56703: LD_VAR 0 3
56707: PPUSH
56708: LD_INT 2
56710: PPUSH
56711: CALL_OW 275
56715: PUSH
56716: LD_VAR 0 4
56720: PUSH
56721: LD_INT 2
56723: ARRAY
56724: GREATEREQUAL
56725: AND
56726: PUSH
56727: LD_VAR 0 3
56731: PPUSH
56732: LD_INT 3
56734: PPUSH
56735: CALL_OW 275
56739: PUSH
56740: LD_VAR 0 4
56744: PUSH
56745: LD_INT 3
56747: ARRAY
56748: GREATEREQUAL
56749: AND
56750: ST_TO_ADDR
// end ;
56751: LD_VAR 0 2
56755: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56756: LD_INT 0
56758: PPUSH
56759: PPUSH
56760: PPUSH
// pom := GetBase ( building ) ;
56761: LD_ADDR_VAR 0 4
56765: PUSH
56766: LD_VAR 0 1
56770: PPUSH
56771: CALL_OW 274
56775: ST_TO_ADDR
// if not pom then
56776: LD_VAR 0 4
56780: NOT
56781: IFFALSE 56785
// exit ;
56783: GO 56886
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56785: LD_ADDR_VAR 0 5
56789: PUSH
56790: LD_VAR 0 2
56794: PPUSH
56795: LD_VAR 0 1
56799: PPUSH
56800: CALL_OW 248
56804: PPUSH
56805: CALL_OW 450
56809: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: LD_VAR 0 4
56819: PPUSH
56820: LD_INT 1
56822: PPUSH
56823: CALL_OW 275
56827: PUSH
56828: LD_VAR 0 5
56832: PUSH
56833: LD_INT 1
56835: ARRAY
56836: GREATEREQUAL
56837: PUSH
56838: LD_VAR 0 4
56842: PPUSH
56843: LD_INT 2
56845: PPUSH
56846: CALL_OW 275
56850: PUSH
56851: LD_VAR 0 5
56855: PUSH
56856: LD_INT 2
56858: ARRAY
56859: GREATEREQUAL
56860: AND
56861: PUSH
56862: LD_VAR 0 4
56866: PPUSH
56867: LD_INT 3
56869: PPUSH
56870: CALL_OW 275
56874: PUSH
56875: LD_VAR 0 5
56879: PUSH
56880: LD_INT 3
56882: ARRAY
56883: GREATEREQUAL
56884: AND
56885: ST_TO_ADDR
// end ;
56886: LD_VAR 0 3
56890: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56891: LD_INT 0
56893: PPUSH
56894: PPUSH
56895: PPUSH
56896: PPUSH
56897: PPUSH
56898: PPUSH
56899: PPUSH
56900: PPUSH
56901: PPUSH
56902: PPUSH
56903: PPUSH
// result := false ;
56904: LD_ADDR_VAR 0 8
56908: PUSH
56909: LD_INT 0
56911: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56912: LD_VAR 0 5
56916: NOT
56917: PUSH
56918: LD_VAR 0 1
56922: NOT
56923: OR
56924: PUSH
56925: LD_VAR 0 2
56929: NOT
56930: OR
56931: PUSH
56932: LD_VAR 0 3
56936: NOT
56937: OR
56938: IFFALSE 56942
// exit ;
56940: GO 57756
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56942: LD_ADDR_VAR 0 14
56946: PUSH
56947: LD_VAR 0 1
56951: PPUSH
56952: LD_VAR 0 2
56956: PPUSH
56957: LD_VAR 0 3
56961: PPUSH
56962: LD_VAR 0 4
56966: PPUSH
56967: LD_VAR 0 5
56971: PUSH
56972: LD_INT 1
56974: ARRAY
56975: PPUSH
56976: CALL_OW 248
56980: PPUSH
56981: LD_INT 0
56983: PPUSH
56984: CALL 58993 0 6
56988: ST_TO_ADDR
// if not hexes then
56989: LD_VAR 0 14
56993: NOT
56994: IFFALSE 56998
// exit ;
56996: GO 57756
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56998: LD_ADDR_VAR 0 17
57002: PUSH
57003: LD_VAR 0 5
57007: PPUSH
57008: LD_INT 22
57010: PUSH
57011: LD_VAR 0 13
57015: PPUSH
57016: CALL_OW 255
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 30
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 30
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PPUSH
57057: CALL_OW 72
57061: ST_TO_ADDR
// for i = 1 to hexes do
57062: LD_ADDR_VAR 0 9
57066: PUSH
57067: DOUBLE
57068: LD_INT 1
57070: DEC
57071: ST_TO_ADDR
57072: LD_VAR 0 14
57076: PUSH
57077: FOR_TO
57078: IFFALSE 57754
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57080: LD_ADDR_VAR 0 13
57084: PUSH
57085: LD_VAR 0 14
57089: PUSH
57090: LD_VAR 0 9
57094: ARRAY
57095: PUSH
57096: LD_INT 1
57098: ARRAY
57099: PPUSH
57100: LD_VAR 0 14
57104: PUSH
57105: LD_VAR 0 9
57109: ARRAY
57110: PUSH
57111: LD_INT 2
57113: ARRAY
57114: PPUSH
57115: CALL_OW 428
57119: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
57120: LD_VAR 0 14
57124: PUSH
57125: LD_VAR 0 9
57129: ARRAY
57130: PUSH
57131: LD_INT 1
57133: ARRAY
57134: PPUSH
57135: LD_VAR 0 14
57139: PUSH
57140: LD_VAR 0 9
57144: ARRAY
57145: PUSH
57146: LD_INT 2
57148: ARRAY
57149: PPUSH
57150: CALL_OW 351
57154: PUSH
57155: LD_VAR 0 14
57159: PUSH
57160: LD_VAR 0 9
57164: ARRAY
57165: PUSH
57166: LD_INT 1
57168: ARRAY
57169: PPUSH
57170: LD_VAR 0 14
57174: PUSH
57175: LD_VAR 0 9
57179: ARRAY
57180: PUSH
57181: LD_INT 2
57183: ARRAY
57184: PPUSH
57185: CALL_OW 488
57189: NOT
57190: OR
57191: PUSH
57192: LD_VAR 0 13
57196: PPUSH
57197: CALL_OW 247
57201: PUSH
57202: LD_INT 3
57204: EQUAL
57205: OR
57206: IFFALSE 57212
// exit ;
57208: POP
57209: POP
57210: GO 57756
// if not tmp then
57212: LD_VAR 0 13
57216: NOT
57217: IFFALSE 57221
// continue ;
57219: GO 57077
// result := true ;
57221: LD_ADDR_VAR 0 8
57225: PUSH
57226: LD_INT 1
57228: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
57229: LD_VAR 0 6
57233: PUSH
57234: LD_VAR 0 13
57238: PPUSH
57239: CALL_OW 247
57243: PUSH
57244: LD_INT 2
57246: EQUAL
57247: AND
57248: PUSH
57249: LD_VAR 0 13
57253: PPUSH
57254: CALL_OW 263
57258: PUSH
57259: LD_INT 1
57261: EQUAL
57262: AND
57263: IFFALSE 57427
// begin if IsDrivenBy ( tmp ) then
57265: LD_VAR 0 13
57269: PPUSH
57270: CALL_OW 311
57274: IFFALSE 57278
// continue ;
57276: GO 57077
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
57278: LD_VAR 0 6
57282: PPUSH
57283: LD_INT 3
57285: PUSH
57286: LD_INT 60
57288: PUSH
57289: EMPTY
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: LD_INT 55
57301: PUSH
57302: EMPTY
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PPUSH
57313: CALL_OW 72
57317: IFFALSE 57425
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
57319: LD_ADDR_VAR 0 18
57323: PUSH
57324: LD_VAR 0 6
57328: PPUSH
57329: LD_INT 3
57331: PUSH
57332: LD_INT 60
57334: PUSH
57335: EMPTY
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 55
57347: PUSH
57348: EMPTY
57349: LIST
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PPUSH
57359: CALL_OW 72
57363: PUSH
57364: LD_INT 1
57366: ARRAY
57367: ST_TO_ADDR
// if IsInUnit ( driver ) then
57368: LD_VAR 0 18
57372: PPUSH
57373: CALL_OW 310
57377: IFFALSE 57388
// ComExit ( driver ) ;
57379: LD_VAR 0 18
57383: PPUSH
57384: CALL 82177 0 1
// AddComEnterUnit ( driver , tmp ) ;
57388: LD_VAR 0 18
57392: PPUSH
57393: LD_VAR 0 13
57397: PPUSH
57398: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
57402: LD_VAR 0 18
57406: PPUSH
57407: LD_VAR 0 7
57411: PPUSH
57412: CALL_OW 173
// AddComExitVehicle ( driver ) ;
57416: LD_VAR 0 18
57420: PPUSH
57421: CALL_OW 181
// end ; continue ;
57425: GO 57077
// end ; if not cleaners or not tmp in cleaners then
57427: LD_VAR 0 6
57431: NOT
57432: PUSH
57433: LD_VAR 0 13
57437: PUSH
57438: LD_VAR 0 6
57442: IN
57443: NOT
57444: OR
57445: IFFALSE 57752
// begin if dep then
57447: LD_VAR 0 17
57451: IFFALSE 57587
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
57453: LD_ADDR_VAR 0 16
57457: PUSH
57458: LD_VAR 0 17
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PPUSH
57467: CALL_OW 250
57471: PPUSH
57472: LD_VAR 0 17
57476: PUSH
57477: LD_INT 1
57479: ARRAY
57480: PPUSH
57481: CALL_OW 254
57485: PPUSH
57486: LD_INT 5
57488: PPUSH
57489: CALL_OW 272
57493: PUSH
57494: LD_VAR 0 17
57498: PUSH
57499: LD_INT 1
57501: ARRAY
57502: PPUSH
57503: CALL_OW 251
57507: PPUSH
57508: LD_VAR 0 17
57512: PUSH
57513: LD_INT 1
57515: ARRAY
57516: PPUSH
57517: CALL_OW 254
57521: PPUSH
57522: LD_INT 5
57524: PPUSH
57525: CALL_OW 273
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
57534: LD_VAR 0 16
57538: PUSH
57539: LD_INT 1
57541: ARRAY
57542: PPUSH
57543: LD_VAR 0 16
57547: PUSH
57548: LD_INT 2
57550: ARRAY
57551: PPUSH
57552: CALL_OW 488
57556: IFFALSE 57587
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
57558: LD_VAR 0 13
57562: PPUSH
57563: LD_VAR 0 16
57567: PUSH
57568: LD_INT 1
57570: ARRAY
57571: PPUSH
57572: LD_VAR 0 16
57576: PUSH
57577: LD_INT 2
57579: ARRAY
57580: PPUSH
57581: CALL_OW 111
// continue ;
57585: GO 57077
// end ; end ; r := GetDir ( tmp ) ;
57587: LD_ADDR_VAR 0 15
57591: PUSH
57592: LD_VAR 0 13
57596: PPUSH
57597: CALL_OW 254
57601: ST_TO_ADDR
// if r = 5 then
57602: LD_VAR 0 15
57606: PUSH
57607: LD_INT 5
57609: EQUAL
57610: IFFALSE 57620
// r := 0 ;
57612: LD_ADDR_VAR 0 15
57616: PUSH
57617: LD_INT 0
57619: ST_TO_ADDR
// for j = r to 5 do
57620: LD_ADDR_VAR 0 10
57624: PUSH
57625: DOUBLE
57626: LD_VAR 0 15
57630: DEC
57631: ST_TO_ADDR
57632: LD_INT 5
57634: PUSH
57635: FOR_TO
57636: IFFALSE 57750
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57638: LD_ADDR_VAR 0 11
57642: PUSH
57643: LD_VAR 0 13
57647: PPUSH
57648: CALL_OW 250
57652: PPUSH
57653: LD_VAR 0 10
57657: PPUSH
57658: LD_INT 2
57660: PPUSH
57661: CALL_OW 272
57665: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57666: LD_ADDR_VAR 0 12
57670: PUSH
57671: LD_VAR 0 13
57675: PPUSH
57676: CALL_OW 251
57680: PPUSH
57681: LD_VAR 0 10
57685: PPUSH
57686: LD_INT 2
57688: PPUSH
57689: CALL_OW 273
57693: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
57694: LD_VAR 0 11
57698: PPUSH
57699: LD_VAR 0 12
57703: PPUSH
57704: CALL_OW 488
57708: PUSH
57709: LD_VAR 0 11
57713: PPUSH
57714: LD_VAR 0 12
57718: PPUSH
57719: CALL_OW 428
57723: NOT
57724: AND
57725: IFFALSE 57748
// begin ComMoveXY ( tmp , _x , _y ) ;
57727: LD_VAR 0 13
57731: PPUSH
57732: LD_VAR 0 11
57736: PPUSH
57737: LD_VAR 0 12
57741: PPUSH
57742: CALL_OW 111
// break ;
57746: GO 57750
// end ; end ;
57748: GO 57635
57750: POP
57751: POP
// end ; end ;
57752: GO 57077
57754: POP
57755: POP
// end ;
57756: LD_VAR 0 8
57760: RET
// export function BuildingTechInvented ( side , btype ) ; begin
57761: LD_INT 0
57763: PPUSH
// result := true ;
57764: LD_ADDR_VAR 0 3
57768: PUSH
57769: LD_INT 1
57771: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
57772: LD_VAR 0 2
57776: PUSH
57777: LD_INT 24
57779: DOUBLE
57780: EQUAL
57781: IFTRUE 57791
57783: LD_INT 33
57785: DOUBLE
57786: EQUAL
57787: IFTRUE 57791
57789: GO 57816
57791: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
57792: LD_ADDR_VAR 0 3
57796: PUSH
57797: LD_INT 32
57799: PPUSH
57800: LD_VAR 0 1
57804: PPUSH
57805: CALL_OW 321
57809: PUSH
57810: LD_INT 2
57812: EQUAL
57813: ST_TO_ADDR
57814: GO 58136
57816: LD_INT 20
57818: DOUBLE
57819: EQUAL
57820: IFTRUE 57824
57822: GO 57849
57824: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
57825: LD_ADDR_VAR 0 3
57829: PUSH
57830: LD_INT 6
57832: PPUSH
57833: LD_VAR 0 1
57837: PPUSH
57838: CALL_OW 321
57842: PUSH
57843: LD_INT 2
57845: EQUAL
57846: ST_TO_ADDR
57847: GO 58136
57849: LD_INT 22
57851: DOUBLE
57852: EQUAL
57853: IFTRUE 57863
57855: LD_INT 36
57857: DOUBLE
57858: EQUAL
57859: IFTRUE 57863
57861: GO 57888
57863: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
57864: LD_ADDR_VAR 0 3
57868: PUSH
57869: LD_INT 15
57871: PPUSH
57872: LD_VAR 0 1
57876: PPUSH
57877: CALL_OW 321
57881: PUSH
57882: LD_INT 2
57884: EQUAL
57885: ST_TO_ADDR
57886: GO 58136
57888: LD_INT 30
57890: DOUBLE
57891: EQUAL
57892: IFTRUE 57896
57894: GO 57921
57896: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
57897: LD_ADDR_VAR 0 3
57901: PUSH
57902: LD_INT 20
57904: PPUSH
57905: LD_VAR 0 1
57909: PPUSH
57910: CALL_OW 321
57914: PUSH
57915: LD_INT 2
57917: EQUAL
57918: ST_TO_ADDR
57919: GO 58136
57921: LD_INT 28
57923: DOUBLE
57924: EQUAL
57925: IFTRUE 57935
57927: LD_INT 21
57929: DOUBLE
57930: EQUAL
57931: IFTRUE 57935
57933: GO 57960
57935: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: LD_INT 21
57943: PPUSH
57944: LD_VAR 0 1
57948: PPUSH
57949: CALL_OW 321
57953: PUSH
57954: LD_INT 2
57956: EQUAL
57957: ST_TO_ADDR
57958: GO 58136
57960: LD_INT 16
57962: DOUBLE
57963: EQUAL
57964: IFTRUE 57968
57966: GO 57995
57968: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57969: LD_ADDR_VAR 0 3
57973: PUSH
57974: LD_EXP 60
57978: PPUSH
57979: LD_VAR 0 1
57983: PPUSH
57984: CALL_OW 321
57988: PUSH
57989: LD_INT 2
57991: EQUAL
57992: ST_TO_ADDR
57993: GO 58136
57995: LD_INT 19
57997: DOUBLE
57998: EQUAL
57999: IFTRUE 58009
58001: LD_INT 23
58003: DOUBLE
58004: EQUAL
58005: IFTRUE 58009
58007: GO 58036
58009: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
58010: LD_ADDR_VAR 0 3
58014: PUSH
58015: LD_EXP 59
58019: PPUSH
58020: LD_VAR 0 1
58024: PPUSH
58025: CALL_OW 321
58029: PUSH
58030: LD_INT 2
58032: EQUAL
58033: ST_TO_ADDR
58034: GO 58136
58036: LD_INT 17
58038: DOUBLE
58039: EQUAL
58040: IFTRUE 58044
58042: GO 58069
58044: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
58045: LD_ADDR_VAR 0 3
58049: PUSH
58050: LD_INT 39
58052: PPUSH
58053: LD_VAR 0 1
58057: PPUSH
58058: CALL_OW 321
58062: PUSH
58063: LD_INT 2
58065: EQUAL
58066: ST_TO_ADDR
58067: GO 58136
58069: LD_INT 18
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58077
58075: GO 58102
58077: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
58078: LD_ADDR_VAR 0 3
58082: PUSH
58083: LD_INT 40
58085: PPUSH
58086: LD_VAR 0 1
58090: PPUSH
58091: CALL_OW 321
58095: PUSH
58096: LD_INT 2
58098: EQUAL
58099: ST_TO_ADDR
58100: GO 58136
58102: LD_INT 27
58104: DOUBLE
58105: EQUAL
58106: IFTRUE 58110
58108: GO 58135
58110: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
58111: LD_ADDR_VAR 0 3
58115: PUSH
58116: LD_INT 35
58118: PPUSH
58119: LD_VAR 0 1
58123: PPUSH
58124: CALL_OW 321
58128: PUSH
58129: LD_INT 2
58131: EQUAL
58132: ST_TO_ADDR
58133: GO 58136
58135: POP
// end ;
58136: LD_VAR 0 3
58140: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
58141: LD_INT 0
58143: PPUSH
58144: PPUSH
58145: PPUSH
58146: PPUSH
58147: PPUSH
58148: PPUSH
58149: PPUSH
58150: PPUSH
58151: PPUSH
58152: PPUSH
58153: PPUSH
// result := false ;
58154: LD_ADDR_VAR 0 6
58158: PUSH
58159: LD_INT 0
58161: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58162: LD_VAR 0 1
58166: NOT
58167: PUSH
58168: LD_VAR 0 1
58172: PPUSH
58173: CALL_OW 266
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: IN
58188: NOT
58189: OR
58190: PUSH
58191: LD_VAR 0 2
58195: NOT
58196: OR
58197: PUSH
58198: LD_VAR 0 5
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 4
58217: PUSH
58218: LD_INT 5
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: IN
58229: NOT
58230: OR
58231: PUSH
58232: LD_VAR 0 3
58236: PPUSH
58237: LD_VAR 0 4
58241: PPUSH
58242: CALL_OW 488
58246: NOT
58247: OR
58248: IFFALSE 58252
// exit ;
58250: GO 58988
// side := GetSide ( depot ) ;
58252: LD_ADDR_VAR 0 9
58256: PUSH
58257: LD_VAR 0 1
58261: PPUSH
58262: CALL_OW 255
58266: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
58267: LD_VAR 0 9
58271: PPUSH
58272: LD_VAR 0 2
58276: PPUSH
58277: CALL 57761 0 2
58281: NOT
58282: IFFALSE 58286
// exit ;
58284: GO 58988
// pom := GetBase ( depot ) ;
58286: LD_ADDR_VAR 0 10
58290: PUSH
58291: LD_VAR 0 1
58295: PPUSH
58296: CALL_OW 274
58300: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58301: LD_ADDR_VAR 0 11
58305: PUSH
58306: LD_VAR 0 2
58310: PPUSH
58311: LD_VAR 0 1
58315: PPUSH
58316: CALL_OW 248
58320: PPUSH
58321: CALL_OW 450
58325: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58326: LD_VAR 0 10
58330: PPUSH
58331: LD_INT 1
58333: PPUSH
58334: CALL_OW 275
58338: PUSH
58339: LD_VAR 0 11
58343: PUSH
58344: LD_INT 1
58346: ARRAY
58347: GREATEREQUAL
58348: PUSH
58349: LD_VAR 0 10
58353: PPUSH
58354: LD_INT 2
58356: PPUSH
58357: CALL_OW 275
58361: PUSH
58362: LD_VAR 0 11
58366: PUSH
58367: LD_INT 2
58369: ARRAY
58370: GREATEREQUAL
58371: AND
58372: PUSH
58373: LD_VAR 0 10
58377: PPUSH
58378: LD_INT 3
58380: PPUSH
58381: CALL_OW 275
58385: PUSH
58386: LD_VAR 0 11
58390: PUSH
58391: LD_INT 3
58393: ARRAY
58394: GREATEREQUAL
58395: AND
58396: NOT
58397: IFFALSE 58401
// exit ;
58399: GO 58988
// if GetBType ( depot ) = b_depot then
58401: LD_VAR 0 1
58405: PPUSH
58406: CALL_OW 266
58410: PUSH
58411: LD_INT 0
58413: EQUAL
58414: IFFALSE 58426
// dist := 28 else
58416: LD_ADDR_VAR 0 14
58420: PUSH
58421: LD_INT 28
58423: ST_TO_ADDR
58424: GO 58434
// dist := 36 ;
58426: LD_ADDR_VAR 0 14
58430: PUSH
58431: LD_INT 36
58433: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
58434: LD_VAR 0 1
58438: PPUSH
58439: LD_VAR 0 3
58443: PPUSH
58444: LD_VAR 0 4
58448: PPUSH
58449: CALL_OW 297
58453: PUSH
58454: LD_VAR 0 14
58458: GREATER
58459: IFFALSE 58463
// exit ;
58461: GO 58988
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
58463: LD_ADDR_VAR 0 12
58467: PUSH
58468: LD_VAR 0 2
58472: PPUSH
58473: LD_VAR 0 3
58477: PPUSH
58478: LD_VAR 0 4
58482: PPUSH
58483: LD_VAR 0 5
58487: PPUSH
58488: LD_VAR 0 1
58492: PPUSH
58493: CALL_OW 248
58497: PPUSH
58498: LD_INT 0
58500: PPUSH
58501: CALL 58993 0 6
58505: ST_TO_ADDR
// if not hexes then
58506: LD_VAR 0 12
58510: NOT
58511: IFFALSE 58515
// exit ;
58513: GO 58988
// hex := GetHexInfo ( x , y ) ;
58515: LD_ADDR_VAR 0 15
58519: PUSH
58520: LD_VAR 0 3
58524: PPUSH
58525: LD_VAR 0 4
58529: PPUSH
58530: CALL_OW 546
58534: ST_TO_ADDR
// if hex [ 1 ] then
58535: LD_VAR 0 15
58539: PUSH
58540: LD_INT 1
58542: ARRAY
58543: IFFALSE 58547
// exit ;
58545: GO 58988
// height := hex [ 2 ] ;
58547: LD_ADDR_VAR 0 13
58551: PUSH
58552: LD_VAR 0 15
58556: PUSH
58557: LD_INT 2
58559: ARRAY
58560: ST_TO_ADDR
// for i = 1 to hexes do
58561: LD_ADDR_VAR 0 7
58565: PUSH
58566: DOUBLE
58567: LD_INT 1
58569: DEC
58570: ST_TO_ADDR
58571: LD_VAR 0 12
58575: PUSH
58576: FOR_TO
58577: IFFALSE 58907
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58579: LD_VAR 0 12
58583: PUSH
58584: LD_VAR 0 7
58588: ARRAY
58589: PUSH
58590: LD_INT 1
58592: ARRAY
58593: PPUSH
58594: LD_VAR 0 12
58598: PUSH
58599: LD_VAR 0 7
58603: ARRAY
58604: PUSH
58605: LD_INT 2
58607: ARRAY
58608: PPUSH
58609: CALL_OW 488
58613: NOT
58614: PUSH
58615: LD_VAR 0 12
58619: PUSH
58620: LD_VAR 0 7
58624: ARRAY
58625: PUSH
58626: LD_INT 1
58628: ARRAY
58629: PPUSH
58630: LD_VAR 0 12
58634: PUSH
58635: LD_VAR 0 7
58639: ARRAY
58640: PUSH
58641: LD_INT 2
58643: ARRAY
58644: PPUSH
58645: CALL_OW 428
58649: PUSH
58650: LD_INT 0
58652: GREATER
58653: OR
58654: PUSH
58655: LD_VAR 0 12
58659: PUSH
58660: LD_VAR 0 7
58664: ARRAY
58665: PUSH
58666: LD_INT 1
58668: ARRAY
58669: PPUSH
58670: LD_VAR 0 12
58674: PUSH
58675: LD_VAR 0 7
58679: ARRAY
58680: PUSH
58681: LD_INT 2
58683: ARRAY
58684: PPUSH
58685: CALL_OW 351
58689: OR
58690: IFFALSE 58696
// exit ;
58692: POP
58693: POP
58694: GO 58988
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58696: LD_ADDR_VAR 0 8
58700: PUSH
58701: LD_VAR 0 12
58705: PUSH
58706: LD_VAR 0 7
58710: ARRAY
58711: PUSH
58712: LD_INT 1
58714: ARRAY
58715: PPUSH
58716: LD_VAR 0 12
58720: PUSH
58721: LD_VAR 0 7
58725: ARRAY
58726: PUSH
58727: LD_INT 2
58729: ARRAY
58730: PPUSH
58731: CALL_OW 546
58735: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58736: LD_VAR 0 8
58740: PUSH
58741: LD_INT 1
58743: ARRAY
58744: PUSH
58745: LD_VAR 0 8
58749: PUSH
58750: LD_INT 2
58752: ARRAY
58753: PUSH
58754: LD_VAR 0 13
58758: PUSH
58759: LD_INT 2
58761: PLUS
58762: GREATER
58763: OR
58764: PUSH
58765: LD_VAR 0 8
58769: PUSH
58770: LD_INT 2
58772: ARRAY
58773: PUSH
58774: LD_VAR 0 13
58778: PUSH
58779: LD_INT 2
58781: MINUS
58782: LESS
58783: OR
58784: PUSH
58785: LD_VAR 0 8
58789: PUSH
58790: LD_INT 3
58792: ARRAY
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 8
58799: PUSH
58800: LD_INT 9
58802: PUSH
58803: LD_INT 10
58805: PUSH
58806: LD_INT 11
58808: PUSH
58809: LD_INT 12
58811: PUSH
58812: LD_INT 13
58814: PUSH
58815: LD_INT 16
58817: PUSH
58818: LD_INT 17
58820: PUSH
58821: LD_INT 18
58823: PUSH
58824: LD_INT 19
58826: PUSH
58827: LD_INT 20
58829: PUSH
58830: LD_INT 21
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: IN
58848: NOT
58849: OR
58850: PUSH
58851: LD_VAR 0 8
58855: PUSH
58856: LD_INT 5
58858: ARRAY
58859: NOT
58860: OR
58861: PUSH
58862: LD_VAR 0 8
58866: PUSH
58867: LD_INT 6
58869: ARRAY
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: LD_INT 7
58879: PUSH
58880: LD_INT 9
58882: PUSH
58883: LD_INT 10
58885: PUSH
58886: LD_INT 11
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: IN
58897: NOT
58898: OR
58899: IFFALSE 58905
// exit ;
58901: POP
58902: POP
58903: GO 58988
// end ;
58905: GO 58576
58907: POP
58908: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58909: LD_VAR 0 9
58913: PPUSH
58914: LD_VAR 0 3
58918: PPUSH
58919: LD_VAR 0 4
58923: PPUSH
58924: LD_INT 20
58926: PPUSH
58927: CALL 50934 0 4
58931: PUSH
58932: LD_INT 4
58934: ARRAY
58935: IFFALSE 58939
// exit ;
58937: GO 58988
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58939: LD_VAR 0 2
58943: PUSH
58944: LD_INT 29
58946: PUSH
58947: LD_INT 30
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: IN
58954: PUSH
58955: LD_VAR 0 3
58959: PPUSH
58960: LD_VAR 0 4
58964: PPUSH
58965: LD_VAR 0 9
58969: PPUSH
58970: CALL_OW 440
58974: NOT
58975: AND
58976: IFFALSE 58980
// exit ;
58978: GO 58988
// result := true ;
58980: LD_ADDR_VAR 0 6
58984: PUSH
58985: LD_INT 1
58987: ST_TO_ADDR
// end ;
58988: LD_VAR 0 6
58992: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58993: LD_INT 0
58995: PPUSH
58996: PPUSH
58997: PPUSH
58998: PPUSH
58999: PPUSH
59000: PPUSH
59001: PPUSH
59002: PPUSH
59003: PPUSH
59004: PPUSH
59005: PPUSH
59006: PPUSH
59007: PPUSH
59008: PPUSH
59009: PPUSH
59010: PPUSH
59011: PPUSH
59012: PPUSH
59013: PPUSH
59014: PPUSH
59015: PPUSH
59016: PPUSH
59017: PPUSH
59018: PPUSH
59019: PPUSH
59020: PPUSH
59021: PPUSH
59022: PPUSH
59023: PPUSH
59024: PPUSH
59025: PPUSH
59026: PPUSH
59027: PPUSH
59028: PPUSH
59029: PPUSH
59030: PPUSH
59031: PPUSH
59032: PPUSH
59033: PPUSH
59034: PPUSH
59035: PPUSH
59036: PPUSH
59037: PPUSH
59038: PPUSH
59039: PPUSH
59040: PPUSH
59041: PPUSH
59042: PPUSH
59043: PPUSH
59044: PPUSH
59045: PPUSH
59046: PPUSH
59047: PPUSH
59048: PPUSH
59049: PPUSH
59050: PPUSH
59051: PPUSH
59052: PPUSH
// result = [ ] ;
59053: LD_ADDR_VAR 0 7
59057: PUSH
59058: EMPTY
59059: ST_TO_ADDR
// temp_list = [ ] ;
59060: LD_ADDR_VAR 0 9
59064: PUSH
59065: EMPTY
59066: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59067: LD_VAR 0 4
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: LD_INT 4
59086: PUSH
59087: LD_INT 5
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: IN
59098: NOT
59099: PUSH
59100: LD_VAR 0 1
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: IN
59115: PUSH
59116: LD_VAR 0 5
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: LIST
59134: IN
59135: NOT
59136: AND
59137: OR
59138: IFFALSE 59142
// exit ;
59140: GO 77533
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59142: LD_VAR 0 1
59146: PUSH
59147: LD_INT 6
59149: PUSH
59150: LD_INT 7
59152: PUSH
59153: LD_INT 8
59155: PUSH
59156: LD_INT 13
59158: PUSH
59159: LD_INT 12
59161: PUSH
59162: LD_INT 15
59164: PUSH
59165: LD_INT 11
59167: PUSH
59168: LD_INT 14
59170: PUSH
59171: LD_INT 10
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: IN
59185: IFFALSE 59195
// btype = b_lab ;
59187: LD_ADDR_VAR 0 1
59191: PUSH
59192: LD_INT 6
59194: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59195: LD_VAR 0 6
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: IN
59214: NOT
59215: PUSH
59216: LD_VAR 0 1
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: LD_INT 6
59235: PUSH
59236: LD_INT 36
59238: PUSH
59239: LD_INT 4
59241: PUSH
59242: LD_INT 5
59244: PUSH
59245: LD_INT 31
59247: PUSH
59248: LD_INT 32
59250: PUSH
59251: LD_INT 33
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: IN
59267: NOT
59268: PUSH
59269: LD_VAR 0 6
59273: PUSH
59274: LD_INT 1
59276: EQUAL
59277: AND
59278: OR
59279: PUSH
59280: LD_VAR 0 1
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: IN
59295: NOT
59296: PUSH
59297: LD_VAR 0 6
59301: PUSH
59302: LD_INT 2
59304: EQUAL
59305: AND
59306: OR
59307: IFFALSE 59317
// mode = 0 ;
59309: LD_ADDR_VAR 0 6
59313: PUSH
59314: LD_INT 0
59316: ST_TO_ADDR
// case mode of 0 :
59317: LD_VAR 0 6
59321: PUSH
59322: LD_INT 0
59324: DOUBLE
59325: EQUAL
59326: IFTRUE 59330
59328: GO 70783
59330: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59331: LD_ADDR_VAR 0 11
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 3
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 3
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59524: LD_ADDR_VAR 0 12
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59720: LD_ADDR_VAR 0 13
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59919: LD_ADDR_VAR 0 14
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60115: LD_ADDR_VAR 0 15
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60308: LD_ADDR_VAR 0 16
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 3
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60501: LD_ADDR_VAR 0 17
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60731: LD_ADDR_VAR 0 18
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60961: LD_ADDR_VAR 0 19
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61191: LD_ADDR_VAR 0 20
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61421: LD_ADDR_VAR 0 21
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 2
61620: NEG
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61651: LD_ADDR_VAR 0 22
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: LD_INT 2
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61881: LD_ADDR_VAR 0 23
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: NEG
62081: PUSH
62082: LD_INT 2
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: NEG
62093: PUSH
62094: LD_INT 3
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 2
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62161: LD_ADDR_VAR 0 24
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 2
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 2
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62437: LD_ADDR_VAR 0 25
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 3
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: LD_INT 3
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62711: LD_ADDR_VAR 0 26
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: LD_INT 1
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: LD_INT 3
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62987: LD_ADDR_VAR 0 27
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: LD_INT 2
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 2
63209: NEG
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 3
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63267: LD_ADDR_VAR 0 28
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 2
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: LD_INT 2
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: NEG
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 3
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 3
63514: NEG
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63549: LD_ADDR_VAR 0 29
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: LD_INT 3
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 3
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 3
63793: NEG
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63828: LD_ADDR_VAR 0 30
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 2
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: LD_INT 3
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: LD_INT 2
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 3
64071: NEG
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64106: LD_ADDR_VAR 0 31
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: LD_INT 2
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: NEG
64296: PUSH
64297: LD_INT 3
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: LD_INT 3
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64384: LD_ADDR_VAR 0 32
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: LD_INT 2
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 2
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: LD_INT 3
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 2
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 3
64627: NEG
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64662: LD_ADDR_VAR 0 33
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: LD_INT 2
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 1
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 2
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: LD_INT 3
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64941: LD_ADDR_VAR 0 34
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 2
65066: PUSH
65067: LD_INT 2
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: NEG
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 2
65108: NEG
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 2
65120: NEG
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 1
65132: NEG
65133: PUSH
65134: LD_INT 3
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: LD_INT 3
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65221: LD_ADDR_VAR 0 35
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65333: LD_ADDR_VAR 0 36
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 2
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65445: LD_ADDR_VAR 0 37
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65557: LD_ADDR_VAR 0 38
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65669: LD_ADDR_VAR 0 39
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 1
65738: NEG
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65781: LD_ADDR_VAR 0 40
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: LD_INT 1
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: LD_INT 1
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65893: LD_ADDR_VAR 0 41
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 1
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: LD_INT 1
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: NEG
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: LD_INT 2
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 2
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 2
66071: NEG
66072: PUSH
66073: LD_INT 2
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: NEG
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: PUSH
66127: LD_INT 2
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 3
66136: PUSH
66137: LD_INT 3
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 3
66178: NEG
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 3
66190: NEG
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66243: LD_ADDR_VAR 0 42
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 1
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 2
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: NEG
66410: PUSH
66411: LD_INT 1
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: LD_INT 2
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 3
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 3
66489: PUSH
66490: LD_INT 3
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: LD_INT 3
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 3
66540: NEG
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 3
66552: NEG
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66593: LD_ADDR_VAR 0 43
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 1
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: NEG
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: LD_INT 2
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 1
66728: PUSH
66729: LD_INT 2
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 2
66759: NEG
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: LD_INT 3
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 3
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 1
66805: PUSH
66806: LD_INT 2
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: LD_INT 1
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 3
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 3
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: LD_INT 3
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: LD_INT 3
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: LD_INT 1
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 3
66889: NEG
66890: PUSH
66891: LD_INT 0
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66941: LD_ADDR_VAR 0 44
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 1
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 1
67010: NEG
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: LD_INT 2
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: LD_INT 2
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 2
67107: NEG
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 2
67119: NEG
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: LD_INT 3
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: LD_INT 1
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 3
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 2
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 3
67215: NEG
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 3
67226: NEG
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: NEG
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: NEG
67251: PUSH
67252: LD_INT 3
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67291: LD_ADDR_VAR 0 45
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 1
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 1
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: LD_INT 1
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: LD_INT 2
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: LD_INT 2
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 2
67457: NEG
67458: PUSH
67459: LD_INT 1
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 2
67469: NEG
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 2
67481: NEG
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: LD_INT 3
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: LD_INT 3
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 1
67516: PUSH
67517: LD_INT 2
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: LD_INT 2
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 3
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 2
67547: PUSH
67548: LD_INT 3
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 1
67557: PUSH
67558: LD_INT 3
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 3
67588: NEG
67589: PUSH
67590: LD_INT 2
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: NEG
67601: PUSH
67602: LD_INT 3
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67641: LD_ADDR_VAR 0 46
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 1
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 1
67699: NEG
67700: PUSH
67701: LD_INT 0
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 1
67710: NEG
67711: PUSH
67712: LD_INT 1
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: LD_INT 2
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: LD_INT 2
67737: NEG
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 1
67745: PUSH
67746: LD_INT 1
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 0
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 2
67807: NEG
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 2
67818: NEG
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: LD_INT 3
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 3
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 2
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 3
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 2
67926: NEG
67927: PUSH
67928: LD_INT 1
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: NEG
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: LD_INT 1
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67989: LD_ADDR_VAR 0 47
67993: PUSH
67994: LD_INT 0
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: LD_INT 1
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 1
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: LD_INT 1
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: NEG
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: LD_INT 1
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 1
68070: NEG
68071: PUSH
68072: LD_INT 2
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: PUSH
68094: LD_INT 1
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 2
68104: NEG
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 2
68116: NEG
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68140: LD_ADDR_VAR 0 48
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 0
68157: PUSH
68158: LD_INT 1
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: NEG
68199: PUSH
68200: LD_INT 0
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: LD_INT 1
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: LD_INT 2
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: LD_INT 2
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 1
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 2
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: LD_INT 1
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68287: LD_ADDR_VAR 0 49
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: LD_INT 1
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: LD_INT 1
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: PUSH
68369: LD_INT 1
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 2
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: LD_INT 2
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 1
68409: PUSH
68410: LD_INT 2
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68431: LD_ADDR_VAR 0 50
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: LD_INT 1
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 0
68479: PUSH
68480: LD_INT 1
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 1
68489: NEG
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 1
68500: NEG
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 2
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 2
68522: PUSH
68523: LD_INT 2
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 1
68532: PUSH
68533: LD_INT 2
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: LD_INT 2
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68575: LD_ADDR_VAR 0 51
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: PUSH
68657: LD_INT 2
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: LD_INT 2
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 1
68676: NEG
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 2
68687: NEG
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 2
68698: NEG
68699: PUSH
68700: LD_INT 1
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68722: LD_ADDR_VAR 0 52
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: LD_INT 1
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: LD_INT 1
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 1
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: LD_INT 1
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: LD_INT 2
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 1
68815: NEG
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 2
68826: NEG
68827: PUSH
68828: LD_INT 0
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: LD_INT 1
68841: NEG
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 2
68849: NEG
68850: PUSH
68851: LD_INT 2
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68873: LD_ADDR_VAR 0 53
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 1
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: LD_INT 1
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 0
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: LD_INT 1
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: NEG
68955: PUSH
68956: LD_INT 2
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: LD_INT 2
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: PUSH
68978: LD_INT 1
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 2
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 2
69008: PUSH
69009: LD_INT 2
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: PUSH
69019: LD_INT 2
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: LD_INT 2
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 2
69060: NEG
69061: PUSH
69062: LD_INT 1
69064: NEG
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 2
69072: NEG
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69103: LD_ADDR_VAR 0 54
69107: PUSH
69108: LD_INT 0
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: LD_INT 1
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 1
69141: PUSH
69142: LD_INT 1
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 1
69161: NEG
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 1
69172: NEG
69173: PUSH
69174: LD_INT 1
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: LD_INT 2
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: LD_INT 2
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 2
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 2
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 2
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: LD_INT 2
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: LD_INT 2
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 2
69302: NEG
69303: PUSH
69304: LD_INT 2
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69333: LD_ADDR_VAR 0 55
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 0
69350: PUSH
69351: LD_INT 1
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 1
69371: PUSH
69372: LD_INT 1
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 1
69391: NEG
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 1
69402: NEG
69403: PUSH
69404: LD_INT 1
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 1
69414: NEG
69415: PUSH
69416: LD_INT 2
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 1
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 2
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 2
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 2
69468: PUSH
69469: LD_INT 2
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 1
69478: PUSH
69479: LD_INT 2
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: LD_INT 2
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 1
69498: NEG
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 2
69509: NEG
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 2
69520: NEG
69521: PUSH
69522: LD_INT 1
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 2
69532: NEG
69533: PUSH
69534: LD_INT 2
69536: NEG
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69563: LD_ADDR_VAR 0 56
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: LD_INT 1
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: LD_INT 1
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: LD_INT 1
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: NEG
69645: PUSH
69646: LD_INT 2
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: LD_INT 2
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 1
69667: PUSH
69668: LD_INT 1
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 2
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 2
69698: PUSH
69699: LD_INT 2
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: LD_INT 2
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 1
69728: NEG
69729: PUSH
69730: LD_INT 1
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: LD_INT 0
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 2
69750: NEG
69751: PUSH
69752: LD_INT 1
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: LD_INT 2
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69793: LD_ADDR_VAR 0 57
69797: PUSH
69798: LD_INT 0
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 1
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 1
69821: PUSH
69822: LD_INT 0
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: LD_INT 1
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: NEG
69863: PUSH
69864: LD_INT 1
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 1
69874: NEG
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: LD_INT 2
69889: NEG
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 1
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 2
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 2
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 2
69928: PUSH
69929: LD_INT 2
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: PUSH
69939: LD_INT 2
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 0
69948: PUSH
69949: LD_INT 2
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 1
69958: NEG
69959: PUSH
69960: LD_INT 1
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 2
69969: NEG
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 2
69992: NEG
69993: PUSH
69994: LD_INT 2
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70023: LD_ADDR_VAR 0 58
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: LD_INT 1
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 1
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 1
70061: PUSH
70062: LD_INT 1
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 1
70081: NEG
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: NEG
70093: PUSH
70094: LD_INT 1
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: LD_INT 2
70108: NEG
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 0
70116: PUSH
70117: LD_INT 2
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 1
70127: PUSH
70128: LD_INT 1
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 2
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 2
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 2
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 1
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: LD_INT 2
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 1
70188: NEG
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 2
70199: NEG
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 2
70210: NEG
70211: PUSH
70212: LD_INT 1
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 2
70222: NEG
70223: PUSH
70224: LD_INT 2
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70253: LD_ADDR_VAR 0 59
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 1
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 1
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: LD_INT 1
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 1
70311: NEG
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 1
70322: NEG
70323: PUSH
70324: LD_INT 1
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70341: LD_ADDR_VAR 0 60
70345: PUSH
70346: LD_INT 0
70348: PUSH
70349: LD_INT 0
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 0
70358: PUSH
70359: LD_INT 1
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 1
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 1
70379: PUSH
70380: LD_INT 1
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 0
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 1
70399: NEG
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: NEG
70411: PUSH
70412: LD_INT 1
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70429: LD_ADDR_VAR 0 61
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: LD_INT 1
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: LD_INT 1
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 1
70487: NEG
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70517: LD_ADDR_VAR 0 62
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 0
70534: PUSH
70535: LD_INT 1
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 1
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: LD_INT 1
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 0
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 1
70575: NEG
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: LD_INT 1
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70605: LD_ADDR_VAR 0 63
70609: PUSH
70610: LD_INT 0
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 1
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: LD_INT 1
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 1
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: PUSH
70665: LD_INT 0
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: NEG
70675: PUSH
70676: LD_INT 1
70678: NEG
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70693: LD_ADDR_VAR 0 64
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: LD_INT 1
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 1
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 1
70731: PUSH
70732: LD_INT 1
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 0
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 1
70751: NEG
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: NEG
70763: PUSH
70764: LD_INT 1
70766: NEG
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: ST_TO_ADDR
// end ; 1 :
70781: GO 76678
70783: LD_INT 1
70785: DOUBLE
70786: EQUAL
70787: IFTRUE 70791
70789: GO 73414
70791: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70792: LD_ADDR_VAR 0 11
70796: PUSH
70797: LD_INT 1
70799: NEG
70800: PUSH
70801: LD_INT 3
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: LD_INT 3
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 1
70822: PUSH
70823: LD_INT 2
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: LIST
70835: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70836: LD_ADDR_VAR 0 12
70840: PUSH
70841: LD_INT 2
70843: PUSH
70844: LD_INT 1
70846: NEG
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 3
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: LIST
70876: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70877: LD_ADDR_VAR 0 13
70881: PUSH
70882: LD_INT 3
70884: PUSH
70885: LD_INT 2
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 3
70894: PUSH
70895: LD_INT 3
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 2
70904: PUSH
70905: LD_INT 3
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: LIST
70916: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70917: LD_ADDR_VAR 0 14
70921: PUSH
70922: LD_INT 1
70924: PUSH
70925: LD_INT 3
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 3
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: LD_INT 2
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70958: LD_ADDR_VAR 0 15
70962: PUSH
70963: LD_INT 2
70965: NEG
70966: PUSH
70967: LD_INT 1
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 3
70976: NEG
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: NEG
70988: PUSH
70989: LD_INT 1
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: LIST
71001: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71002: LD_ADDR_VAR 0 16
71006: PUSH
71007: LD_INT 2
71009: NEG
71010: PUSH
71011: LD_INT 3
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 3
71021: NEG
71022: PUSH
71023: LD_INT 2
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 3
71033: NEG
71034: PUSH
71035: LD_INT 3
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: LIST
71047: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71048: LD_ADDR_VAR 0 17
71052: PUSH
71053: LD_INT 1
71055: NEG
71056: PUSH
71057: LD_INT 3
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: LD_INT 3
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 1
71078: PUSH
71079: LD_INT 2
71081: NEG
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71092: LD_ADDR_VAR 0 18
71096: PUSH
71097: LD_INT 2
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 3
71110: PUSH
71111: LD_INT 0
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 3
71120: PUSH
71121: LD_INT 1
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71133: LD_ADDR_VAR 0 19
71137: PUSH
71138: LD_INT 3
71140: PUSH
71141: LD_INT 2
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 3
71150: PUSH
71151: LD_INT 3
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 2
71160: PUSH
71161: LD_INT 3
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: LIST
71172: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71173: LD_ADDR_VAR 0 20
71177: PUSH
71178: LD_INT 1
71180: PUSH
71181: LD_INT 3
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: LD_INT 3
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 1
71200: NEG
71201: PUSH
71202: LD_INT 2
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: LIST
71213: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71214: LD_ADDR_VAR 0 21
71218: PUSH
71219: LD_INT 2
71221: NEG
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 3
71232: NEG
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 3
71243: NEG
71244: PUSH
71245: LD_INT 1
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: LIST
71257: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71258: LD_ADDR_VAR 0 22
71262: PUSH
71263: LD_INT 2
71265: NEG
71266: PUSH
71267: LD_INT 3
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 3
71277: NEG
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 3
71289: NEG
71290: PUSH
71291: LD_INT 3
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: LIST
71303: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71304: LD_ADDR_VAR 0 23
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: LD_INT 3
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 1
71322: NEG
71323: PUSH
71324: LD_INT 4
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 1
71334: PUSH
71335: LD_INT 3
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: LIST
71347: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71348: LD_ADDR_VAR 0 24
71352: PUSH
71353: LD_INT 3
71355: PUSH
71356: LD_INT 0
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 3
71365: PUSH
71366: LD_INT 1
71368: NEG
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 4
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: LIST
71388: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71389: LD_ADDR_VAR 0 25
71393: PUSH
71394: LD_INT 3
71396: PUSH
71397: LD_INT 3
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 4
71406: PUSH
71407: LD_INT 3
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 3
71416: PUSH
71417: LD_INT 4
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: LIST
71428: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71429: LD_ADDR_VAR 0 26
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: LD_INT 3
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 1
71446: PUSH
71447: LD_INT 4
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 1
71456: NEG
71457: PUSH
71458: LD_INT 3
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: LIST
71469: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
71470: LD_ADDR_VAR 0 27
71474: PUSH
71475: LD_INT 3
71477: NEG
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 3
71488: NEG
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 4
71499: NEG
71500: PUSH
71501: LD_INT 1
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: LIST
71513: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
71514: LD_ADDR_VAR 0 28
71518: PUSH
71519: LD_INT 3
71521: NEG
71522: PUSH
71523: LD_INT 3
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: LD_INT 4
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 4
71545: NEG
71546: PUSH
71547: LD_INT 3
71549: NEG
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: LIST
71559: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
71560: LD_ADDR_VAR 0 29
71564: PUSH
71565: LD_INT 1
71567: NEG
71568: PUSH
71569: LD_INT 3
71571: NEG
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: LD_INT 3
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: LD_INT 2
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 1
71601: NEG
71602: PUSH
71603: LD_INT 4
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 0
71613: PUSH
71614: LD_INT 4
71616: NEG
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: LD_INT 3
71627: NEG
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 1
71635: NEG
71636: PUSH
71637: LD_INT 5
71639: NEG
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 0
71647: PUSH
71648: LD_INT 5
71650: NEG
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 1
71658: PUSH
71659: LD_INT 4
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: LD_INT 6
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: LD_INT 6
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 1
71692: PUSH
71693: LD_INT 5
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71715: LD_ADDR_VAR 0 30
71719: PUSH
71720: LD_INT 2
71722: PUSH
71723: LD_INT 1
71725: NEG
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 3
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 3
71743: PUSH
71744: LD_INT 1
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 3
71753: PUSH
71754: LD_INT 1
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 4
71764: PUSH
71765: LD_INT 0
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 4
71774: PUSH
71775: LD_INT 1
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 4
71784: PUSH
71785: LD_INT 1
71787: NEG
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 5
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 5
71805: PUSH
71806: LD_INT 1
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 5
71815: PUSH
71816: LD_INT 1
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 6
71826: PUSH
71827: LD_INT 0
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 6
71836: PUSH
71837: LD_INT 1
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71858: LD_ADDR_VAR 0 31
71862: PUSH
71863: LD_INT 3
71865: PUSH
71866: LD_INT 2
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 3
71875: PUSH
71876: LD_INT 3
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 2
71885: PUSH
71886: LD_INT 3
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 4
71895: PUSH
71896: LD_INT 3
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 4
71905: PUSH
71906: LD_INT 4
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: LD_INT 4
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 5
71925: PUSH
71926: LD_INT 4
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 5
71935: PUSH
71936: LD_INT 5
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 4
71945: PUSH
71946: LD_INT 5
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 6
71955: PUSH
71956: LD_INT 5
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 6
71965: PUSH
71966: LD_INT 6
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 5
71975: PUSH
71976: LD_INT 6
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71997: LD_ADDR_VAR 0 32
72001: PUSH
72002: LD_INT 1
72004: PUSH
72005: LD_INT 3
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 0
72014: PUSH
72015: LD_INT 3
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 1
72024: NEG
72025: PUSH
72026: LD_INT 2
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 1
72035: PUSH
72036: LD_INT 4
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: LD_INT 4
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 1
72055: NEG
72056: PUSH
72057: LD_INT 3
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 1
72066: PUSH
72067: LD_INT 5
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_INT 5
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: NEG
72087: PUSH
72088: LD_INT 4
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 1
72097: PUSH
72098: LD_INT 6
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 0
72107: PUSH
72108: LD_INT 6
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 1
72117: NEG
72118: PUSH
72119: LD_INT 5
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72140: LD_ADDR_VAR 0 33
72144: PUSH
72145: LD_INT 2
72147: NEG
72148: PUSH
72149: LD_INT 1
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 3
72158: NEG
72159: PUSH
72160: LD_INT 0
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 3
72169: NEG
72170: PUSH
72171: LD_INT 1
72173: NEG
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 3
72181: NEG
72182: PUSH
72183: LD_INT 1
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 4
72192: NEG
72193: PUSH
72194: LD_INT 0
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 4
72203: NEG
72204: PUSH
72205: LD_INT 1
72207: NEG
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 4
72215: NEG
72216: PUSH
72217: LD_INT 1
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 5
72226: NEG
72227: PUSH
72228: LD_INT 0
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 5
72237: NEG
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 5
72249: NEG
72250: PUSH
72251: LD_INT 1
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 6
72260: NEG
72261: PUSH
72262: LD_INT 0
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 6
72271: NEG
72272: PUSH
72273: LD_INT 1
72275: NEG
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72295: LD_ADDR_VAR 0 34
72299: PUSH
72300: LD_INT 2
72302: NEG
72303: PUSH
72304: LD_INT 3
72306: NEG
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 3
72314: NEG
72315: PUSH
72316: LD_INT 2
72318: NEG
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 3
72326: NEG
72327: PUSH
72328: LD_INT 3
72330: NEG
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 3
72338: NEG
72339: PUSH
72340: LD_INT 4
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 4
72350: NEG
72351: PUSH
72352: LD_INT 3
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 4
72362: NEG
72363: PUSH
72364: LD_INT 4
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 4
72374: NEG
72375: PUSH
72376: LD_INT 5
72378: NEG
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 5
72386: NEG
72387: PUSH
72388: LD_INT 4
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 5
72398: NEG
72399: PUSH
72400: LD_INT 5
72402: NEG
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 5
72410: NEG
72411: PUSH
72412: LD_INT 6
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 6
72422: NEG
72423: PUSH
72424: LD_INT 5
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 6
72434: NEG
72435: PUSH
72436: LD_INT 6
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
72458: LD_ADDR_VAR 0 41
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: LD_INT 2
72468: NEG
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 1
72476: NEG
72477: PUSH
72478: LD_INT 3
72480: NEG
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 1
72488: PUSH
72489: LD_INT 2
72491: NEG
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: LIST
72501: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
72502: LD_ADDR_VAR 0 42
72506: PUSH
72507: LD_INT 2
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 2
72519: PUSH
72520: LD_INT 1
72522: NEG
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 3
72530: PUSH
72531: LD_INT 1
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: LIST
72542: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
72543: LD_ADDR_VAR 0 43
72547: PUSH
72548: LD_INT 2
72550: PUSH
72551: LD_INT 2
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 3
72560: PUSH
72561: LD_INT 2
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: LIST
72582: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
72583: LD_ADDR_VAR 0 44
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: LD_INT 2
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 1
72600: PUSH
72601: LD_INT 3
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 1
72610: NEG
72611: PUSH
72612: LD_INT 2
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: LIST
72623: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72624: LD_ADDR_VAR 0 45
72628: PUSH
72629: LD_INT 2
72631: NEG
72632: PUSH
72633: LD_INT 0
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 2
72642: NEG
72643: PUSH
72644: LD_INT 1
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 3
72653: NEG
72654: PUSH
72655: LD_INT 1
72657: NEG
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72668: LD_ADDR_VAR 0 46
72672: PUSH
72673: LD_INT 2
72675: NEG
72676: PUSH
72677: LD_INT 2
72679: NEG
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 2
72687: NEG
72688: PUSH
72689: LD_INT 3
72691: NEG
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 3
72699: NEG
72700: PUSH
72701: LD_INT 2
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: LIST
72713: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72714: LD_ADDR_VAR 0 47
72718: PUSH
72719: LD_INT 2
72721: NEG
72722: PUSH
72723: LD_INT 3
72725: NEG
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 1
72733: NEG
72734: PUSH
72735: LD_INT 3
72737: NEG
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72747: LD_ADDR_VAR 0 48
72751: PUSH
72752: LD_INT 1
72754: PUSH
72755: LD_INT 2
72757: NEG
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 2
72765: PUSH
72766: LD_INT 1
72768: NEG
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72778: LD_ADDR_VAR 0 49
72782: PUSH
72783: LD_INT 3
72785: PUSH
72786: LD_INT 1
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 3
72795: PUSH
72796: LD_INT 2
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72807: LD_ADDR_VAR 0 50
72811: PUSH
72812: LD_INT 2
72814: PUSH
72815: LD_INT 3
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 1
72824: PUSH
72825: LD_INT 3
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72836: LD_ADDR_VAR 0 51
72840: PUSH
72841: LD_INT 1
72843: NEG
72844: PUSH
72845: LD_INT 2
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 2
72854: NEG
72855: PUSH
72856: LD_INT 1
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72867: LD_ADDR_VAR 0 52
72871: PUSH
72872: LD_INT 3
72874: NEG
72875: PUSH
72876: LD_INT 1
72878: NEG
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: PUSH
72884: LD_INT 3
72886: NEG
72887: PUSH
72888: LD_INT 2
72890: NEG
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72900: LD_ADDR_VAR 0 53
72904: PUSH
72905: LD_INT 1
72907: NEG
72908: PUSH
72909: LD_INT 3
72911: NEG
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 0
72919: PUSH
72920: LD_INT 3
72922: NEG
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 1
72930: PUSH
72931: LD_INT 2
72933: NEG
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: LIST
72943: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72944: LD_ADDR_VAR 0 54
72948: PUSH
72949: LD_INT 2
72951: PUSH
72952: LD_INT 1
72954: NEG
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 3
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 3
72972: PUSH
72973: LD_INT 1
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: LIST
72984: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72985: LD_ADDR_VAR 0 55
72989: PUSH
72990: LD_INT 3
72992: PUSH
72993: LD_INT 2
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 3
73002: PUSH
73003: LD_INT 3
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PUSH
73010: LD_INT 2
73012: PUSH
73013: LD_INT 3
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: LIST
73024: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73025: LD_ADDR_VAR 0 56
73029: PUSH
73030: LD_INT 1
73032: PUSH
73033: LD_INT 3
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 0
73042: PUSH
73043: LD_INT 3
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 1
73052: NEG
73053: PUSH
73054: LD_INT 2
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: LIST
73065: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73066: LD_ADDR_VAR 0 57
73070: PUSH
73071: LD_INT 2
73073: NEG
73074: PUSH
73075: LD_INT 1
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: LD_INT 3
73084: NEG
73085: PUSH
73086: LD_INT 0
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 3
73095: NEG
73096: PUSH
73097: LD_INT 1
73099: NEG
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: LIST
73109: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73110: LD_ADDR_VAR 0 58
73114: PUSH
73115: LD_INT 2
73117: NEG
73118: PUSH
73119: LD_INT 3
73121: NEG
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 3
73129: NEG
73130: PUSH
73131: LD_INT 2
73133: NEG
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: LD_INT 3
73141: NEG
73142: PUSH
73143: LD_INT 3
73145: NEG
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: LIST
73155: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73156: LD_ADDR_VAR 0 59
73160: PUSH
73161: LD_INT 1
73163: NEG
73164: PUSH
73165: LD_INT 2
73167: NEG
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: PUSH
73173: LD_INT 0
73175: PUSH
73176: LD_INT 2
73178: NEG
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 1
73186: PUSH
73187: LD_INT 1
73189: NEG
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: LIST
73199: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73200: LD_ADDR_VAR 0 60
73204: PUSH
73205: LD_INT 1
73207: PUSH
73208: LD_INT 1
73210: NEG
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 2
73218: PUSH
73219: LD_INT 0
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: LD_INT 2
73228: PUSH
73229: LD_INT 1
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: LIST
73240: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73241: LD_ADDR_VAR 0 61
73245: PUSH
73246: LD_INT 2
73248: PUSH
73249: LD_INT 1
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 2
73258: PUSH
73259: LD_INT 2
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: LD_INT 1
73268: PUSH
73269: LD_INT 2
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73281: LD_ADDR_VAR 0 62
73285: PUSH
73286: LD_INT 1
73288: PUSH
73289: LD_INT 2
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 0
73298: PUSH
73299: LD_INT 2
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 1
73308: NEG
73309: PUSH
73310: LD_INT 1
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73322: LD_ADDR_VAR 0 63
73326: PUSH
73327: LD_INT 1
73329: NEG
73330: PUSH
73331: LD_INT 1
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 2
73340: NEG
73341: PUSH
73342: LD_INT 0
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 2
73351: NEG
73352: PUSH
73353: LD_INT 1
73355: NEG
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: LIST
73365: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73366: LD_ADDR_VAR 0 64
73370: PUSH
73371: LD_INT 1
73373: NEG
73374: PUSH
73375: LD_INT 2
73377: NEG
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 2
73385: NEG
73386: PUSH
73387: LD_INT 1
73389: NEG
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 2
73397: NEG
73398: PUSH
73399: LD_INT 2
73401: NEG
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: LIST
73411: ST_TO_ADDR
// end ; 2 :
73412: GO 76678
73414: LD_INT 2
73416: DOUBLE
73417: EQUAL
73418: IFTRUE 73422
73420: GO 76677
73422: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73423: LD_ADDR_VAR 0 29
73427: PUSH
73428: LD_INT 4
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 4
73440: PUSH
73441: LD_INT 1
73443: NEG
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 5
73451: PUSH
73452: LD_INT 0
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 5
73461: PUSH
73462: LD_INT 1
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 4
73471: PUSH
73472: LD_INT 1
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 3
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 3
73491: PUSH
73492: LD_INT 1
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 3
73502: PUSH
73503: LD_INT 2
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 5
73513: PUSH
73514: LD_INT 2
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 3
73523: PUSH
73524: LD_INT 3
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 3
73533: PUSH
73534: LD_INT 2
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 4
73543: PUSH
73544: LD_INT 3
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: LD_INT 4
73553: PUSH
73554: LD_INT 4
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 3
73563: PUSH
73564: LD_INT 4
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 2
73573: PUSH
73574: LD_INT 3
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 2
73583: PUSH
73584: LD_INT 2
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 4
73593: PUSH
73594: LD_INT 2
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 2
73603: PUSH
73604: LD_INT 4
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 0
73613: PUSH
73614: LD_INT 4
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 0
73623: PUSH
73624: LD_INT 3
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 1
73633: PUSH
73634: LD_INT 4
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 1
73643: PUSH
73644: LD_INT 5
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: PUSH
73651: LD_INT 0
73653: PUSH
73654: LD_INT 5
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 1
73663: NEG
73664: PUSH
73665: LD_INT 4
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 1
73674: NEG
73675: PUSH
73676: LD_INT 3
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: LD_INT 5
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 2
73695: NEG
73696: PUSH
73697: LD_INT 3
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 3
73706: NEG
73707: PUSH
73708: LD_INT 0
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 3
73717: NEG
73718: PUSH
73719: LD_INT 1
73721: NEG
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 2
73729: NEG
73730: PUSH
73731: LD_INT 0
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 2
73740: NEG
73741: PUSH
73742: LD_INT 1
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: LD_INT 3
73751: NEG
73752: PUSH
73753: LD_INT 1
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 4
73762: NEG
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: LD_INT 4
73773: NEG
73774: PUSH
73775: LD_INT 1
73777: NEG
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 4
73785: NEG
73786: PUSH
73787: LD_INT 2
73789: NEG
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 2
73797: NEG
73798: PUSH
73799: LD_INT 2
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 4
73808: NEG
73809: PUSH
73810: LD_INT 4
73812: NEG
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 4
73820: NEG
73821: PUSH
73822: LD_INT 5
73824: NEG
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: LD_INT 3
73832: NEG
73833: PUSH
73834: LD_INT 4
73836: NEG
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 3
73844: NEG
73845: PUSH
73846: LD_INT 3
73848: NEG
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 4
73856: NEG
73857: PUSH
73858: LD_INT 3
73860: NEG
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 5
73868: NEG
73869: PUSH
73870: LD_INT 4
73872: NEG
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 5
73880: NEG
73881: PUSH
73882: LD_INT 5
73884: NEG
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: PUSH
73890: LD_INT 3
73892: NEG
73893: PUSH
73894: LD_INT 5
73896: NEG
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 5
73904: NEG
73905: PUSH
73906: LD_INT 3
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73961: LD_ADDR_VAR 0 30
73965: PUSH
73966: LD_INT 4
73968: PUSH
73969: LD_INT 4
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 4
73978: PUSH
73979: LD_INT 3
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 5
73988: PUSH
73989: LD_INT 4
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 5
73998: PUSH
73999: LD_INT 5
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: LD_INT 4
74008: PUSH
74009: LD_INT 5
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 3
74018: PUSH
74019: LD_INT 4
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 3
74028: PUSH
74029: LD_INT 3
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 5
74038: PUSH
74039: LD_INT 3
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 3
74048: PUSH
74049: LD_INT 5
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 0
74058: PUSH
74059: LD_INT 3
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: LD_INT 2
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 1
74078: PUSH
74079: LD_INT 3
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PUSH
74086: LD_INT 1
74088: PUSH
74089: LD_INT 4
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 0
74098: PUSH
74099: LD_INT 4
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 1
74108: NEG
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 1
74119: NEG
74120: PUSH
74121: LD_INT 2
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 2
74130: PUSH
74131: LD_INT 4
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 2
74140: NEG
74141: PUSH
74142: LD_INT 2
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 4
74151: NEG
74152: PUSH
74153: LD_INT 0
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 4
74162: NEG
74163: PUSH
74164: LD_INT 1
74166: NEG
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 3
74174: NEG
74175: PUSH
74176: LD_INT 0
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 3
74185: NEG
74186: PUSH
74187: LD_INT 1
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 4
74196: NEG
74197: PUSH
74198: LD_INT 1
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 5
74207: NEG
74208: PUSH
74209: LD_INT 0
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 5
74218: NEG
74219: PUSH
74220: LD_INT 1
74222: NEG
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 5
74230: NEG
74231: PUSH
74232: LD_INT 2
74234: NEG
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 3
74242: NEG
74243: PUSH
74244: LD_INT 2
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: LD_INT 3
74253: NEG
74254: PUSH
74255: LD_INT 3
74257: NEG
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PUSH
74263: LD_INT 3
74265: NEG
74266: PUSH
74267: LD_INT 4
74269: NEG
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 2
74277: NEG
74278: PUSH
74279: LD_INT 3
74281: NEG
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 2
74289: NEG
74290: PUSH
74291: LD_INT 2
74293: NEG
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 3
74301: NEG
74302: PUSH
74303: LD_INT 2
74305: NEG
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 4
74313: NEG
74314: PUSH
74315: LD_INT 3
74317: NEG
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: LD_INT 4
74325: NEG
74326: PUSH
74327: LD_INT 4
74329: NEG
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 2
74337: NEG
74338: PUSH
74339: LD_INT 4
74341: NEG
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 4
74349: NEG
74350: PUSH
74351: LD_INT 2
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 0
74361: PUSH
74362: LD_INT 4
74364: NEG
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: LD_INT 5
74375: NEG
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 1
74383: PUSH
74384: LD_INT 4
74386: NEG
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 1
74394: PUSH
74395: LD_INT 3
74397: NEG
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: LD_INT 3
74408: NEG
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 1
74416: NEG
74417: PUSH
74418: LD_INT 4
74420: NEG
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 1
74428: NEG
74429: PUSH
74430: LD_INT 5
74432: NEG
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: PUSH
74438: LD_INT 2
74440: PUSH
74441: LD_INT 3
74443: NEG
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 2
74451: NEG
74452: PUSH
74453: LD_INT 5
74455: NEG
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
74508: LD_ADDR_VAR 0 31
74512: PUSH
74513: LD_INT 0
74515: PUSH
74516: LD_INT 4
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: LD_INT 0
74525: PUSH
74526: LD_INT 3
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PUSH
74533: LD_INT 1
74535: PUSH
74536: LD_INT 4
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PUSH
74543: LD_INT 1
74545: PUSH
74546: LD_INT 5
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 0
74555: PUSH
74556: LD_INT 5
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 1
74565: NEG
74566: PUSH
74567: LD_INT 4
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 1
74576: NEG
74577: PUSH
74578: LD_INT 3
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 2
74587: PUSH
74588: LD_INT 5
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 2
74597: NEG
74598: PUSH
74599: LD_INT 3
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 3
74608: NEG
74609: PUSH
74610: LD_INT 0
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 3
74619: NEG
74620: PUSH
74621: LD_INT 1
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 2
74631: NEG
74632: PUSH
74633: LD_INT 0
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 2
74642: NEG
74643: PUSH
74644: LD_INT 1
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 3
74653: NEG
74654: PUSH
74655: LD_INT 1
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 4
74664: NEG
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: PUSH
74673: LD_INT 4
74675: NEG
74676: PUSH
74677: LD_INT 1
74679: NEG
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 4
74687: NEG
74688: PUSH
74689: LD_INT 2
74691: NEG
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 2
74699: NEG
74700: PUSH
74701: LD_INT 2
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PUSH
74708: LD_INT 4
74710: NEG
74711: PUSH
74712: LD_INT 4
74714: NEG
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 4
74722: NEG
74723: PUSH
74724: LD_INT 5
74726: NEG
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 3
74734: NEG
74735: PUSH
74736: LD_INT 4
74738: NEG
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 3
74746: NEG
74747: PUSH
74748: LD_INT 3
74750: NEG
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 4
74758: NEG
74759: PUSH
74760: LD_INT 3
74762: NEG
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PUSH
74768: LD_INT 5
74770: NEG
74771: PUSH
74772: LD_INT 4
74774: NEG
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 5
74782: NEG
74783: PUSH
74784: LD_INT 5
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 3
74794: NEG
74795: PUSH
74796: LD_INT 5
74798: NEG
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 5
74806: NEG
74807: PUSH
74808: LD_INT 3
74810: NEG
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 0
74818: PUSH
74819: LD_INT 3
74821: NEG
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 0
74829: PUSH
74830: LD_INT 4
74832: NEG
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 1
74840: PUSH
74841: LD_INT 3
74843: NEG
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 1
74851: PUSH
74852: LD_INT 2
74854: NEG
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 0
74862: PUSH
74863: LD_INT 2
74865: NEG
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 1
74873: NEG
74874: PUSH
74875: LD_INT 3
74877: NEG
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 1
74885: NEG
74886: PUSH
74887: LD_INT 4
74889: NEG
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 2
74897: PUSH
74898: LD_INT 2
74900: NEG
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 2
74908: NEG
74909: PUSH
74910: LD_INT 4
74912: NEG
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: PUSH
74918: LD_INT 4
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 4
74930: PUSH
74931: LD_INT 1
74933: NEG
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 5
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 5
74951: PUSH
74952: LD_INT 1
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 4
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: LD_INT 3
74971: PUSH
74972: LD_INT 0
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 3
74981: PUSH
74982: LD_INT 1
74984: NEG
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 3
74992: PUSH
74993: LD_INT 2
74995: NEG
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 5
75003: PUSH
75004: LD_INT 2
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75058: LD_ADDR_VAR 0 32
75062: PUSH
75063: LD_INT 4
75065: NEG
75066: PUSH
75067: LD_INT 0
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 4
75076: NEG
75077: PUSH
75078: LD_INT 1
75080: NEG
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 3
75088: NEG
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 3
75099: NEG
75100: PUSH
75101: LD_INT 1
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 4
75110: NEG
75111: PUSH
75112: LD_INT 1
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 5
75121: NEG
75122: PUSH
75123: LD_INT 0
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 5
75132: NEG
75133: PUSH
75134: LD_INT 1
75136: NEG
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 5
75144: NEG
75145: PUSH
75146: LD_INT 2
75148: NEG
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 3
75156: NEG
75157: PUSH
75158: LD_INT 2
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 3
75167: NEG
75168: PUSH
75169: LD_INT 3
75171: NEG
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 3
75179: NEG
75180: PUSH
75181: LD_INT 4
75183: NEG
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: PUSH
75189: LD_INT 2
75191: NEG
75192: PUSH
75193: LD_INT 3
75195: NEG
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 2
75203: NEG
75204: PUSH
75205: LD_INT 2
75207: NEG
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: PUSH
75213: LD_INT 3
75215: NEG
75216: PUSH
75217: LD_INT 2
75219: NEG
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_INT 4
75227: NEG
75228: PUSH
75229: LD_INT 3
75231: NEG
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: LD_INT 4
75239: NEG
75240: PUSH
75241: LD_INT 4
75243: NEG
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 2
75251: NEG
75252: PUSH
75253: LD_INT 4
75255: NEG
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 4
75263: NEG
75264: PUSH
75265: LD_INT 2
75267: NEG
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 0
75275: PUSH
75276: LD_INT 4
75278: NEG
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 0
75286: PUSH
75287: LD_INT 5
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 1
75297: PUSH
75298: LD_INT 4
75300: NEG
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 1
75308: PUSH
75309: LD_INT 3
75311: NEG
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 0
75319: PUSH
75320: LD_INT 3
75322: NEG
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 1
75330: NEG
75331: PUSH
75332: LD_INT 4
75334: NEG
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 1
75342: NEG
75343: PUSH
75344: LD_INT 5
75346: NEG
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 2
75354: PUSH
75355: LD_INT 3
75357: NEG
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 2
75365: NEG
75366: PUSH
75367: LD_INT 5
75369: NEG
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PUSH
75375: LD_INT 3
75377: PUSH
75378: LD_INT 0
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: PUSH
75385: LD_INT 3
75387: PUSH
75388: LD_INT 1
75390: NEG
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 4
75398: PUSH
75399: LD_INT 0
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 4
75408: PUSH
75409: LD_INT 1
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 3
75418: PUSH
75419: LD_INT 1
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 2
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 2
75438: PUSH
75439: LD_INT 1
75441: NEG
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PUSH
75447: LD_INT 2
75449: PUSH
75450: LD_INT 2
75452: NEG
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PUSH
75458: LD_INT 4
75460: PUSH
75461: LD_INT 2
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: PUSH
75468: LD_INT 4
75470: PUSH
75471: LD_INT 4
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PUSH
75478: LD_INT 4
75480: PUSH
75481: LD_INT 3
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PUSH
75488: LD_INT 5
75490: PUSH
75491: LD_INT 4
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PUSH
75498: LD_INT 5
75500: PUSH
75501: LD_INT 5
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 4
75510: PUSH
75511: LD_INT 5
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 3
75520: PUSH
75521: LD_INT 4
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: LD_INT 3
75530: PUSH
75531: LD_INT 3
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: PUSH
75538: LD_INT 5
75540: PUSH
75541: LD_INT 3
75543: PUSH
75544: EMPTY
75545: LIST
75546: LIST
75547: PUSH
75548: LD_INT 3
75550: PUSH
75551: LD_INT 5
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
75605: LD_ADDR_VAR 0 33
75609: PUSH
75610: LD_INT 4
75612: NEG
75613: PUSH
75614: LD_INT 4
75616: NEG
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 4
75624: NEG
75625: PUSH
75626: LD_INT 5
75628: NEG
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: PUSH
75634: LD_INT 3
75636: NEG
75637: PUSH
75638: LD_INT 4
75640: NEG
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 3
75648: NEG
75649: PUSH
75650: LD_INT 3
75652: NEG
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: LD_INT 4
75660: NEG
75661: PUSH
75662: LD_INT 3
75664: NEG
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 5
75672: NEG
75673: PUSH
75674: LD_INT 4
75676: NEG
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: PUSH
75682: LD_INT 5
75684: NEG
75685: PUSH
75686: LD_INT 5
75688: NEG
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 3
75696: NEG
75697: PUSH
75698: LD_INT 5
75700: NEG
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 5
75708: NEG
75709: PUSH
75710: LD_INT 3
75712: NEG
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 0
75720: PUSH
75721: LD_INT 3
75723: NEG
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 0
75731: PUSH
75732: LD_INT 4
75734: NEG
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 1
75742: PUSH
75743: LD_INT 3
75745: NEG
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 1
75753: PUSH
75754: LD_INT 2
75756: NEG
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 0
75764: PUSH
75765: LD_INT 2
75767: NEG
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 1
75775: NEG
75776: PUSH
75777: LD_INT 3
75779: NEG
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 1
75787: NEG
75788: PUSH
75789: LD_INT 4
75791: NEG
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 2
75799: PUSH
75800: LD_INT 2
75802: NEG
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 2
75810: NEG
75811: PUSH
75812: LD_INT 4
75814: NEG
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 4
75822: PUSH
75823: LD_INT 0
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 4
75832: PUSH
75833: LD_INT 1
75835: NEG
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 5
75843: PUSH
75844: LD_INT 0
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 5
75853: PUSH
75854: LD_INT 1
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: LD_INT 4
75863: PUSH
75864: LD_INT 1
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 3
75873: PUSH
75874: LD_INT 0
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 3
75883: PUSH
75884: LD_INT 1
75886: NEG
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: LD_INT 3
75894: PUSH
75895: LD_INT 2
75897: NEG
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: LD_INT 5
75905: PUSH
75906: LD_INT 2
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 3
75915: PUSH
75916: LD_INT 3
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: LD_INT 3
75925: PUSH
75926: LD_INT 2
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: PUSH
75933: LD_INT 4
75935: PUSH
75936: LD_INT 3
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: PUSH
75943: LD_INT 4
75945: PUSH
75946: LD_INT 4
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: PUSH
75953: LD_INT 3
75955: PUSH
75956: LD_INT 4
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 2
75965: PUSH
75966: LD_INT 3
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PUSH
75973: LD_INT 2
75975: PUSH
75976: LD_INT 2
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PUSH
75983: LD_INT 4
75985: PUSH
75986: LD_INT 2
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PUSH
75993: LD_INT 2
75995: PUSH
75996: LD_INT 4
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: PUSH
76003: LD_INT 0
76005: PUSH
76006: LD_INT 4
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: PUSH
76013: LD_INT 0
76015: PUSH
76016: LD_INT 3
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: LD_INT 1
76025: PUSH
76026: LD_INT 4
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: LD_INT 1
76035: PUSH
76036: LD_INT 5
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: PUSH
76043: LD_INT 0
76045: PUSH
76046: LD_INT 5
76048: PUSH
76049: EMPTY
76050: LIST
76051: LIST
76052: PUSH
76053: LD_INT 1
76055: NEG
76056: PUSH
76057: LD_INT 4
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: PUSH
76064: LD_INT 1
76066: NEG
76067: PUSH
76068: LD_INT 3
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 2
76077: PUSH
76078: LD_INT 5
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 2
76087: NEG
76088: PUSH
76089: LD_INT 3
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76143: LD_ADDR_VAR 0 34
76147: PUSH
76148: LD_INT 0
76150: PUSH
76151: LD_INT 4
76153: NEG
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 0
76161: PUSH
76162: LD_INT 5
76164: NEG
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 1
76172: PUSH
76173: LD_INT 4
76175: NEG
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: LD_INT 1
76183: PUSH
76184: LD_INT 3
76186: NEG
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 0
76194: PUSH
76195: LD_INT 3
76197: NEG
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: LD_INT 1
76205: NEG
76206: PUSH
76207: LD_INT 4
76209: NEG
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: LD_INT 1
76217: NEG
76218: PUSH
76219: LD_INT 5
76221: NEG
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PUSH
76227: LD_INT 2
76229: PUSH
76230: LD_INT 3
76232: NEG
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 2
76240: NEG
76241: PUSH
76242: LD_INT 5
76244: NEG
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: LD_INT 3
76252: PUSH
76253: LD_INT 0
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: LD_INT 3
76262: PUSH
76263: LD_INT 1
76265: NEG
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: LD_INT 4
76273: PUSH
76274: LD_INT 0
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: PUSH
76281: LD_INT 4
76283: PUSH
76284: LD_INT 1
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 3
76293: PUSH
76294: LD_INT 1
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 2
76303: PUSH
76304: LD_INT 0
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: LD_INT 2
76313: PUSH
76314: LD_INT 1
76316: NEG
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PUSH
76322: LD_INT 2
76324: PUSH
76325: LD_INT 2
76327: NEG
76328: PUSH
76329: EMPTY
76330: LIST
76331: LIST
76332: PUSH
76333: LD_INT 4
76335: PUSH
76336: LD_INT 2
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: PUSH
76343: LD_INT 4
76345: PUSH
76346: LD_INT 4
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 4
76355: PUSH
76356: LD_INT 3
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 5
76365: PUSH
76366: LD_INT 4
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 5
76375: PUSH
76376: LD_INT 5
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PUSH
76383: LD_INT 4
76385: PUSH
76386: LD_INT 5
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 3
76395: PUSH
76396: LD_INT 4
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 3
76405: PUSH
76406: LD_INT 3
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 5
76415: PUSH
76416: LD_INT 3
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: LD_INT 3
76425: PUSH
76426: LD_INT 5
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 0
76435: PUSH
76436: LD_INT 3
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 0
76445: PUSH
76446: LD_INT 2
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: LD_INT 1
76455: PUSH
76456: LD_INT 3
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: PUSH
76463: LD_INT 1
76465: PUSH
76466: LD_INT 4
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PUSH
76473: LD_INT 0
76475: PUSH
76476: LD_INT 4
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: PUSH
76483: LD_INT 1
76485: NEG
76486: PUSH
76487: LD_INT 3
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 1
76496: NEG
76497: PUSH
76498: LD_INT 2
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 2
76507: PUSH
76508: LD_INT 4
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: LD_INT 2
76517: NEG
76518: PUSH
76519: LD_INT 2
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 4
76528: NEG
76529: PUSH
76530: LD_INT 0
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: PUSH
76537: LD_INT 4
76539: NEG
76540: PUSH
76541: LD_INT 1
76543: NEG
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 3
76551: NEG
76552: PUSH
76553: LD_INT 0
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 3
76562: NEG
76563: PUSH
76564: LD_INT 1
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 4
76573: NEG
76574: PUSH
76575: LD_INT 1
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 5
76584: NEG
76585: PUSH
76586: LD_INT 0
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 5
76595: NEG
76596: PUSH
76597: LD_INT 1
76599: NEG
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 5
76607: NEG
76608: PUSH
76609: LD_INT 2
76611: NEG
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: LD_INT 3
76619: NEG
76620: PUSH
76621: LD_INT 2
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: ST_TO_ADDR
// end ; end ;
76675: GO 76678
76677: POP
// case btype of b_depot , b_warehouse :
76678: LD_VAR 0 1
76682: PUSH
76683: LD_INT 0
76685: DOUBLE
76686: EQUAL
76687: IFTRUE 76697
76689: LD_INT 1
76691: DOUBLE
76692: EQUAL
76693: IFTRUE 76697
76695: GO 76898
76697: POP
// case nation of nation_american :
76698: LD_VAR 0 5
76702: PUSH
76703: LD_INT 1
76705: DOUBLE
76706: EQUAL
76707: IFTRUE 76711
76709: GO 76767
76711: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
76712: LD_ADDR_VAR 0 9
76716: PUSH
76717: LD_VAR 0 11
76721: PUSH
76722: LD_VAR 0 12
76726: PUSH
76727: LD_VAR 0 13
76731: PUSH
76732: LD_VAR 0 14
76736: PUSH
76737: LD_VAR 0 15
76741: PUSH
76742: LD_VAR 0 16
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: PUSH
76755: LD_VAR 0 4
76759: PUSH
76760: LD_INT 1
76762: PLUS
76763: ARRAY
76764: ST_TO_ADDR
76765: GO 76896
76767: LD_INT 2
76769: DOUBLE
76770: EQUAL
76771: IFTRUE 76775
76773: GO 76831
76775: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
76776: LD_ADDR_VAR 0 9
76780: PUSH
76781: LD_VAR 0 17
76785: PUSH
76786: LD_VAR 0 18
76790: PUSH
76791: LD_VAR 0 19
76795: PUSH
76796: LD_VAR 0 20
76800: PUSH
76801: LD_VAR 0 21
76805: PUSH
76806: LD_VAR 0 22
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: LIST
76817: LIST
76818: PUSH
76819: LD_VAR 0 4
76823: PUSH
76824: LD_INT 1
76826: PLUS
76827: ARRAY
76828: ST_TO_ADDR
76829: GO 76896
76831: LD_INT 3
76833: DOUBLE
76834: EQUAL
76835: IFTRUE 76839
76837: GO 76895
76839: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76840: LD_ADDR_VAR 0 9
76844: PUSH
76845: LD_VAR 0 23
76849: PUSH
76850: LD_VAR 0 24
76854: PUSH
76855: LD_VAR 0 25
76859: PUSH
76860: LD_VAR 0 26
76864: PUSH
76865: LD_VAR 0 27
76869: PUSH
76870: LD_VAR 0 28
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: LIST
76882: PUSH
76883: LD_VAR 0 4
76887: PUSH
76888: LD_INT 1
76890: PLUS
76891: ARRAY
76892: ST_TO_ADDR
76893: GO 76896
76895: POP
76896: GO 77451
76898: LD_INT 2
76900: DOUBLE
76901: EQUAL
76902: IFTRUE 76912
76904: LD_INT 3
76906: DOUBLE
76907: EQUAL
76908: IFTRUE 76912
76910: GO 76968
76912: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76913: LD_ADDR_VAR 0 9
76917: PUSH
76918: LD_VAR 0 29
76922: PUSH
76923: LD_VAR 0 30
76927: PUSH
76928: LD_VAR 0 31
76932: PUSH
76933: LD_VAR 0 32
76937: PUSH
76938: LD_VAR 0 33
76942: PUSH
76943: LD_VAR 0 34
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: PUSH
76956: LD_VAR 0 4
76960: PUSH
76961: LD_INT 1
76963: PLUS
76964: ARRAY
76965: ST_TO_ADDR
76966: GO 77451
76968: LD_INT 16
76970: DOUBLE
76971: EQUAL
76972: IFTRUE 77030
76974: LD_INT 17
76976: DOUBLE
76977: EQUAL
76978: IFTRUE 77030
76980: LD_INT 18
76982: DOUBLE
76983: EQUAL
76984: IFTRUE 77030
76986: LD_INT 19
76988: DOUBLE
76989: EQUAL
76990: IFTRUE 77030
76992: LD_INT 22
76994: DOUBLE
76995: EQUAL
76996: IFTRUE 77030
76998: LD_INT 20
77000: DOUBLE
77001: EQUAL
77002: IFTRUE 77030
77004: LD_INT 21
77006: DOUBLE
77007: EQUAL
77008: IFTRUE 77030
77010: LD_INT 23
77012: DOUBLE
77013: EQUAL
77014: IFTRUE 77030
77016: LD_INT 24
77018: DOUBLE
77019: EQUAL
77020: IFTRUE 77030
77022: LD_INT 25
77024: DOUBLE
77025: EQUAL
77026: IFTRUE 77030
77028: GO 77086
77030: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77031: LD_ADDR_VAR 0 9
77035: PUSH
77036: LD_VAR 0 35
77040: PUSH
77041: LD_VAR 0 36
77045: PUSH
77046: LD_VAR 0 37
77050: PUSH
77051: LD_VAR 0 38
77055: PUSH
77056: LD_VAR 0 39
77060: PUSH
77061: LD_VAR 0 40
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: PUSH
77074: LD_VAR 0 4
77078: PUSH
77079: LD_INT 1
77081: PLUS
77082: ARRAY
77083: ST_TO_ADDR
77084: GO 77451
77086: LD_INT 6
77088: DOUBLE
77089: EQUAL
77090: IFTRUE 77142
77092: LD_INT 7
77094: DOUBLE
77095: EQUAL
77096: IFTRUE 77142
77098: LD_INT 8
77100: DOUBLE
77101: EQUAL
77102: IFTRUE 77142
77104: LD_INT 13
77106: DOUBLE
77107: EQUAL
77108: IFTRUE 77142
77110: LD_INT 12
77112: DOUBLE
77113: EQUAL
77114: IFTRUE 77142
77116: LD_INT 15
77118: DOUBLE
77119: EQUAL
77120: IFTRUE 77142
77122: LD_INT 11
77124: DOUBLE
77125: EQUAL
77126: IFTRUE 77142
77128: LD_INT 14
77130: DOUBLE
77131: EQUAL
77132: IFTRUE 77142
77134: LD_INT 10
77136: DOUBLE
77137: EQUAL
77138: IFTRUE 77142
77140: GO 77198
77142: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
77143: LD_ADDR_VAR 0 9
77147: PUSH
77148: LD_VAR 0 41
77152: PUSH
77153: LD_VAR 0 42
77157: PUSH
77158: LD_VAR 0 43
77162: PUSH
77163: LD_VAR 0 44
77167: PUSH
77168: LD_VAR 0 45
77172: PUSH
77173: LD_VAR 0 46
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: PUSH
77186: LD_VAR 0 4
77190: PUSH
77191: LD_INT 1
77193: PLUS
77194: ARRAY
77195: ST_TO_ADDR
77196: GO 77451
77198: LD_INT 36
77200: DOUBLE
77201: EQUAL
77202: IFTRUE 77206
77204: GO 77262
77206: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77207: LD_ADDR_VAR 0 9
77211: PUSH
77212: LD_VAR 0 47
77216: PUSH
77217: LD_VAR 0 48
77221: PUSH
77222: LD_VAR 0 49
77226: PUSH
77227: LD_VAR 0 50
77231: PUSH
77232: LD_VAR 0 51
77236: PUSH
77237: LD_VAR 0 52
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: LIST
77246: LIST
77247: LIST
77248: LIST
77249: PUSH
77250: LD_VAR 0 4
77254: PUSH
77255: LD_INT 1
77257: PLUS
77258: ARRAY
77259: ST_TO_ADDR
77260: GO 77451
77262: LD_INT 4
77264: DOUBLE
77265: EQUAL
77266: IFTRUE 77288
77268: LD_INT 5
77270: DOUBLE
77271: EQUAL
77272: IFTRUE 77288
77274: LD_INT 34
77276: DOUBLE
77277: EQUAL
77278: IFTRUE 77288
77280: LD_INT 37
77282: DOUBLE
77283: EQUAL
77284: IFTRUE 77288
77286: GO 77344
77288: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77289: LD_ADDR_VAR 0 9
77293: PUSH
77294: LD_VAR 0 53
77298: PUSH
77299: LD_VAR 0 54
77303: PUSH
77304: LD_VAR 0 55
77308: PUSH
77309: LD_VAR 0 56
77313: PUSH
77314: LD_VAR 0 57
77318: PUSH
77319: LD_VAR 0 58
77323: PUSH
77324: EMPTY
77325: LIST
77326: LIST
77327: LIST
77328: LIST
77329: LIST
77330: LIST
77331: PUSH
77332: LD_VAR 0 4
77336: PUSH
77337: LD_INT 1
77339: PLUS
77340: ARRAY
77341: ST_TO_ADDR
77342: GO 77451
77344: LD_INT 31
77346: DOUBLE
77347: EQUAL
77348: IFTRUE 77394
77350: LD_INT 32
77352: DOUBLE
77353: EQUAL
77354: IFTRUE 77394
77356: LD_INT 33
77358: DOUBLE
77359: EQUAL
77360: IFTRUE 77394
77362: LD_INT 27
77364: DOUBLE
77365: EQUAL
77366: IFTRUE 77394
77368: LD_INT 26
77370: DOUBLE
77371: EQUAL
77372: IFTRUE 77394
77374: LD_INT 28
77376: DOUBLE
77377: EQUAL
77378: IFTRUE 77394
77380: LD_INT 29
77382: DOUBLE
77383: EQUAL
77384: IFTRUE 77394
77386: LD_INT 30
77388: DOUBLE
77389: EQUAL
77390: IFTRUE 77394
77392: GO 77450
77394: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
77395: LD_ADDR_VAR 0 9
77399: PUSH
77400: LD_VAR 0 59
77404: PUSH
77405: LD_VAR 0 60
77409: PUSH
77410: LD_VAR 0 61
77414: PUSH
77415: LD_VAR 0 62
77419: PUSH
77420: LD_VAR 0 63
77424: PUSH
77425: LD_VAR 0 64
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: PUSH
77438: LD_VAR 0 4
77442: PUSH
77443: LD_INT 1
77445: PLUS
77446: ARRAY
77447: ST_TO_ADDR
77448: GO 77451
77450: POP
// temp_list2 = [ ] ;
77451: LD_ADDR_VAR 0 10
77455: PUSH
77456: EMPTY
77457: ST_TO_ADDR
// for i in temp_list do
77458: LD_ADDR_VAR 0 8
77462: PUSH
77463: LD_VAR 0 9
77467: PUSH
77468: FOR_IN
77469: IFFALSE 77521
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
77471: LD_ADDR_VAR 0 10
77475: PUSH
77476: LD_VAR 0 10
77480: PUSH
77481: LD_VAR 0 8
77485: PUSH
77486: LD_INT 1
77488: ARRAY
77489: PUSH
77490: LD_VAR 0 2
77494: PLUS
77495: PUSH
77496: LD_VAR 0 8
77500: PUSH
77501: LD_INT 2
77503: ARRAY
77504: PUSH
77505: LD_VAR 0 3
77509: PLUS
77510: PUSH
77511: EMPTY
77512: LIST
77513: LIST
77514: PUSH
77515: EMPTY
77516: LIST
77517: ADD
77518: ST_TO_ADDR
77519: GO 77468
77521: POP
77522: POP
// result = temp_list2 ;
77523: LD_ADDR_VAR 0 7
77527: PUSH
77528: LD_VAR 0 10
77532: ST_TO_ADDR
// end ;
77533: LD_VAR 0 7
77537: RET
// export function EnemyInRange ( unit , dist ) ; begin
77538: LD_INT 0
77540: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
77541: LD_ADDR_VAR 0 3
77545: PUSH
77546: LD_VAR 0 1
77550: PPUSH
77551: CALL_OW 255
77555: PPUSH
77556: LD_VAR 0 1
77560: PPUSH
77561: CALL_OW 250
77565: PPUSH
77566: LD_VAR 0 1
77570: PPUSH
77571: CALL_OW 251
77575: PPUSH
77576: LD_VAR 0 2
77580: PPUSH
77581: CALL 50934 0 4
77585: PUSH
77586: LD_INT 4
77588: ARRAY
77589: ST_TO_ADDR
// end ;
77590: LD_VAR 0 3
77594: RET
// export function PlayerSeeMe ( unit ) ; begin
77595: LD_INT 0
77597: PPUSH
// result := See ( your_side , unit ) ;
77598: LD_ADDR_VAR 0 2
77602: PUSH
77603: LD_OWVAR 2
77607: PPUSH
77608: LD_VAR 0 1
77612: PPUSH
77613: CALL_OW 292
77617: ST_TO_ADDR
// end ;
77618: LD_VAR 0 2
77622: RET
// export function ReverseDir ( unit ) ; begin
77623: LD_INT 0
77625: PPUSH
// if not unit then
77626: LD_VAR 0 1
77630: NOT
77631: IFFALSE 77635
// exit ;
77633: GO 77658
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
77635: LD_ADDR_VAR 0 2
77639: PUSH
77640: LD_VAR 0 1
77644: PPUSH
77645: CALL_OW 254
77649: PUSH
77650: LD_INT 3
77652: PLUS
77653: PUSH
77654: LD_INT 6
77656: MOD
77657: ST_TO_ADDR
// end ;
77658: LD_VAR 0 2
77662: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
77663: LD_INT 0
77665: PPUSH
77666: PPUSH
77667: PPUSH
77668: PPUSH
77669: PPUSH
// if not hexes then
77670: LD_VAR 0 2
77674: NOT
77675: IFFALSE 77679
// exit ;
77677: GO 77827
// dist := 9999 ;
77679: LD_ADDR_VAR 0 5
77683: PUSH
77684: LD_INT 9999
77686: ST_TO_ADDR
// for i = 1 to hexes do
77687: LD_ADDR_VAR 0 4
77691: PUSH
77692: DOUBLE
77693: LD_INT 1
77695: DEC
77696: ST_TO_ADDR
77697: LD_VAR 0 2
77701: PUSH
77702: FOR_TO
77703: IFFALSE 77815
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
77705: LD_VAR 0 1
77709: PPUSH
77710: LD_VAR 0 2
77714: PUSH
77715: LD_VAR 0 4
77719: ARRAY
77720: PUSH
77721: LD_INT 1
77723: ARRAY
77724: PPUSH
77725: LD_VAR 0 2
77729: PUSH
77730: LD_VAR 0 4
77734: ARRAY
77735: PUSH
77736: LD_INT 2
77738: ARRAY
77739: PPUSH
77740: CALL_OW 297
77744: PUSH
77745: LD_VAR 0 5
77749: LESS
77750: IFFALSE 77813
// begin hex := hexes [ i ] ;
77752: LD_ADDR_VAR 0 7
77756: PUSH
77757: LD_VAR 0 2
77761: PUSH
77762: LD_VAR 0 4
77766: ARRAY
77767: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77768: LD_ADDR_VAR 0 5
77772: PUSH
77773: LD_VAR 0 1
77777: PPUSH
77778: LD_VAR 0 2
77782: PUSH
77783: LD_VAR 0 4
77787: ARRAY
77788: PUSH
77789: LD_INT 1
77791: ARRAY
77792: PPUSH
77793: LD_VAR 0 2
77797: PUSH
77798: LD_VAR 0 4
77802: ARRAY
77803: PUSH
77804: LD_INT 2
77806: ARRAY
77807: PPUSH
77808: CALL_OW 297
77812: ST_TO_ADDR
// end ; end ;
77813: GO 77702
77815: POP
77816: POP
// result := hex ;
77817: LD_ADDR_VAR 0 3
77821: PUSH
77822: LD_VAR 0 7
77826: ST_TO_ADDR
// end ;
77827: LD_VAR 0 3
77831: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77832: LD_INT 0
77834: PPUSH
77835: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77836: LD_VAR 0 1
77840: NOT
77841: PUSH
77842: LD_VAR 0 1
77846: PUSH
77847: LD_INT 21
77849: PUSH
77850: LD_INT 2
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 23
77859: PUSH
77860: LD_INT 2
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PPUSH
77871: CALL_OW 69
77875: IN
77876: NOT
77877: OR
77878: IFFALSE 77882
// exit ;
77880: GO 77929
// for i = 1 to 3 do
77882: LD_ADDR_VAR 0 3
77886: PUSH
77887: DOUBLE
77888: LD_INT 1
77890: DEC
77891: ST_TO_ADDR
77892: LD_INT 3
77894: PUSH
77895: FOR_TO
77896: IFFALSE 77927
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77898: LD_VAR 0 1
77902: PPUSH
77903: CALL_OW 250
77907: PPUSH
77908: LD_VAR 0 1
77912: PPUSH
77913: CALL_OW 251
77917: PPUSH
77918: LD_INT 1
77920: PPUSH
77921: CALL_OW 453
77925: GO 77895
77927: POP
77928: POP
// end ;
77929: LD_VAR 0 2
77933: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77934: LD_INT 0
77936: PPUSH
77937: PPUSH
77938: PPUSH
77939: PPUSH
77940: PPUSH
77941: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77942: LD_VAR 0 1
77946: NOT
77947: PUSH
77948: LD_VAR 0 2
77952: NOT
77953: OR
77954: PUSH
77955: LD_VAR 0 1
77959: PPUSH
77960: CALL_OW 314
77964: OR
77965: IFFALSE 77969
// exit ;
77967: GO 78410
// x := GetX ( enemy_unit ) ;
77969: LD_ADDR_VAR 0 7
77973: PUSH
77974: LD_VAR 0 2
77978: PPUSH
77979: CALL_OW 250
77983: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77984: LD_ADDR_VAR 0 8
77988: PUSH
77989: LD_VAR 0 2
77993: PPUSH
77994: CALL_OW 251
77998: ST_TO_ADDR
// if not x or not y then
77999: LD_VAR 0 7
78003: NOT
78004: PUSH
78005: LD_VAR 0 8
78009: NOT
78010: OR
78011: IFFALSE 78015
// exit ;
78013: GO 78410
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78015: LD_ADDR_VAR 0 6
78019: PUSH
78020: LD_VAR 0 7
78024: PPUSH
78025: LD_INT 0
78027: PPUSH
78028: LD_INT 4
78030: PPUSH
78031: CALL_OW 272
78035: PUSH
78036: LD_VAR 0 8
78040: PPUSH
78041: LD_INT 0
78043: PPUSH
78044: LD_INT 4
78046: PPUSH
78047: CALL_OW 273
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: LD_VAR 0 7
78060: PPUSH
78061: LD_INT 1
78063: PPUSH
78064: LD_INT 4
78066: PPUSH
78067: CALL_OW 272
78071: PUSH
78072: LD_VAR 0 8
78076: PPUSH
78077: LD_INT 1
78079: PPUSH
78080: LD_INT 4
78082: PPUSH
78083: CALL_OW 273
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: PUSH
78092: LD_VAR 0 7
78096: PPUSH
78097: LD_INT 2
78099: PPUSH
78100: LD_INT 4
78102: PPUSH
78103: CALL_OW 272
78107: PUSH
78108: LD_VAR 0 8
78112: PPUSH
78113: LD_INT 2
78115: PPUSH
78116: LD_INT 4
78118: PPUSH
78119: CALL_OW 273
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PUSH
78128: LD_VAR 0 7
78132: PPUSH
78133: LD_INT 3
78135: PPUSH
78136: LD_INT 4
78138: PPUSH
78139: CALL_OW 272
78143: PUSH
78144: LD_VAR 0 8
78148: PPUSH
78149: LD_INT 3
78151: PPUSH
78152: LD_INT 4
78154: PPUSH
78155: CALL_OW 273
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: PUSH
78164: LD_VAR 0 7
78168: PPUSH
78169: LD_INT 4
78171: PPUSH
78172: LD_INT 4
78174: PPUSH
78175: CALL_OW 272
78179: PUSH
78180: LD_VAR 0 8
78184: PPUSH
78185: LD_INT 4
78187: PPUSH
78188: LD_INT 4
78190: PPUSH
78191: CALL_OW 273
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: LD_VAR 0 7
78204: PPUSH
78205: LD_INT 5
78207: PPUSH
78208: LD_INT 4
78210: PPUSH
78211: CALL_OW 272
78215: PUSH
78216: LD_VAR 0 8
78220: PPUSH
78221: LD_INT 5
78223: PPUSH
78224: LD_INT 4
78226: PPUSH
78227: CALL_OW 273
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: PUSH
78236: EMPTY
78237: LIST
78238: LIST
78239: LIST
78240: LIST
78241: LIST
78242: LIST
78243: ST_TO_ADDR
// for i = tmp downto 1 do
78244: LD_ADDR_VAR 0 4
78248: PUSH
78249: DOUBLE
78250: LD_VAR 0 6
78254: INC
78255: ST_TO_ADDR
78256: LD_INT 1
78258: PUSH
78259: FOR_DOWNTO
78260: IFFALSE 78361
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78262: LD_VAR 0 6
78266: PUSH
78267: LD_VAR 0 4
78271: ARRAY
78272: PUSH
78273: LD_INT 1
78275: ARRAY
78276: PPUSH
78277: LD_VAR 0 6
78281: PUSH
78282: LD_VAR 0 4
78286: ARRAY
78287: PUSH
78288: LD_INT 2
78290: ARRAY
78291: PPUSH
78292: CALL_OW 488
78296: NOT
78297: PUSH
78298: LD_VAR 0 6
78302: PUSH
78303: LD_VAR 0 4
78307: ARRAY
78308: PUSH
78309: LD_INT 1
78311: ARRAY
78312: PPUSH
78313: LD_VAR 0 6
78317: PUSH
78318: LD_VAR 0 4
78322: ARRAY
78323: PUSH
78324: LD_INT 2
78326: ARRAY
78327: PPUSH
78328: CALL_OW 428
78332: PUSH
78333: LD_INT 0
78335: NONEQUAL
78336: OR
78337: IFFALSE 78359
// tmp := Delete ( tmp , i ) ;
78339: LD_ADDR_VAR 0 6
78343: PUSH
78344: LD_VAR 0 6
78348: PPUSH
78349: LD_VAR 0 4
78353: PPUSH
78354: CALL_OW 3
78358: ST_TO_ADDR
78359: GO 78259
78361: POP
78362: POP
// j := GetClosestHex ( unit , tmp ) ;
78363: LD_ADDR_VAR 0 5
78367: PUSH
78368: LD_VAR 0 1
78372: PPUSH
78373: LD_VAR 0 6
78377: PPUSH
78378: CALL 77663 0 2
78382: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78383: LD_VAR 0 1
78387: PPUSH
78388: LD_VAR 0 5
78392: PUSH
78393: LD_INT 1
78395: ARRAY
78396: PPUSH
78397: LD_VAR 0 5
78401: PUSH
78402: LD_INT 2
78404: ARRAY
78405: PPUSH
78406: CALL_OW 111
// end ;
78410: LD_VAR 0 3
78414: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78415: LD_INT 0
78417: PPUSH
78418: PPUSH
78419: PPUSH
// uc_side = 0 ;
78420: LD_ADDR_OWVAR 20
78424: PUSH
78425: LD_INT 0
78427: ST_TO_ADDR
// uc_nation = 0 ;
78428: LD_ADDR_OWVAR 21
78432: PUSH
78433: LD_INT 0
78435: ST_TO_ADDR
// InitHc_All ( ) ;
78436: CALL_OW 584
// InitVc ;
78440: CALL_OW 20
// if mastodonts then
78444: LD_VAR 0 6
78448: IFFALSE 78515
// for i = 1 to mastodonts do
78450: LD_ADDR_VAR 0 11
78454: PUSH
78455: DOUBLE
78456: LD_INT 1
78458: DEC
78459: ST_TO_ADDR
78460: LD_VAR 0 6
78464: PUSH
78465: FOR_TO
78466: IFFALSE 78513
// begin vc_chassis := 31 ;
78468: LD_ADDR_OWVAR 37
78472: PUSH
78473: LD_INT 31
78475: ST_TO_ADDR
// vc_control := control_rider ;
78476: LD_ADDR_OWVAR 38
78480: PUSH
78481: LD_INT 4
78483: ST_TO_ADDR
// animal := CreateVehicle ;
78484: LD_ADDR_VAR 0 12
78488: PUSH
78489: CALL_OW 45
78493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78494: LD_VAR 0 12
78498: PPUSH
78499: LD_VAR 0 8
78503: PPUSH
78504: LD_INT 0
78506: PPUSH
78507: CALL 80703 0 3
// end ;
78511: GO 78465
78513: POP
78514: POP
// if horses then
78515: LD_VAR 0 5
78519: IFFALSE 78586
// for i = 1 to horses do
78521: LD_ADDR_VAR 0 11
78525: PUSH
78526: DOUBLE
78527: LD_INT 1
78529: DEC
78530: ST_TO_ADDR
78531: LD_VAR 0 5
78535: PUSH
78536: FOR_TO
78537: IFFALSE 78584
// begin hc_class := 21 ;
78539: LD_ADDR_OWVAR 28
78543: PUSH
78544: LD_INT 21
78546: ST_TO_ADDR
// hc_gallery :=  ;
78547: LD_ADDR_OWVAR 33
78551: PUSH
78552: LD_STRING 
78554: ST_TO_ADDR
// animal := CreateHuman ;
78555: LD_ADDR_VAR 0 12
78559: PUSH
78560: CALL_OW 44
78564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78565: LD_VAR 0 12
78569: PPUSH
78570: LD_VAR 0 8
78574: PPUSH
78575: LD_INT 0
78577: PPUSH
78578: CALL 80703 0 3
// end ;
78582: GO 78536
78584: POP
78585: POP
// if birds then
78586: LD_VAR 0 1
78590: IFFALSE 78657
// for i = 1 to birds do
78592: LD_ADDR_VAR 0 11
78596: PUSH
78597: DOUBLE
78598: LD_INT 1
78600: DEC
78601: ST_TO_ADDR
78602: LD_VAR 0 1
78606: PUSH
78607: FOR_TO
78608: IFFALSE 78655
// begin hc_class = 18 ;
78610: LD_ADDR_OWVAR 28
78614: PUSH
78615: LD_INT 18
78617: ST_TO_ADDR
// hc_gallery =  ;
78618: LD_ADDR_OWVAR 33
78622: PUSH
78623: LD_STRING 
78625: ST_TO_ADDR
// animal := CreateHuman ;
78626: LD_ADDR_VAR 0 12
78630: PUSH
78631: CALL_OW 44
78635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78636: LD_VAR 0 12
78640: PPUSH
78641: LD_VAR 0 8
78645: PPUSH
78646: LD_INT 0
78648: PPUSH
78649: CALL 80703 0 3
// end ;
78653: GO 78607
78655: POP
78656: POP
// if tigers then
78657: LD_VAR 0 2
78661: IFFALSE 78745
// for i = 1 to tigers do
78663: LD_ADDR_VAR 0 11
78667: PUSH
78668: DOUBLE
78669: LD_INT 1
78671: DEC
78672: ST_TO_ADDR
78673: LD_VAR 0 2
78677: PUSH
78678: FOR_TO
78679: IFFALSE 78743
// begin hc_class = class_tiger ;
78681: LD_ADDR_OWVAR 28
78685: PUSH
78686: LD_INT 14
78688: ST_TO_ADDR
// hc_gallery =  ;
78689: LD_ADDR_OWVAR 33
78693: PUSH
78694: LD_STRING 
78696: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78697: LD_ADDR_OWVAR 35
78701: PUSH
78702: LD_INT 7
78704: NEG
78705: PPUSH
78706: LD_INT 7
78708: PPUSH
78709: CALL_OW 12
78713: ST_TO_ADDR
// animal := CreateHuman ;
78714: LD_ADDR_VAR 0 12
78718: PUSH
78719: CALL_OW 44
78723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78724: LD_VAR 0 12
78728: PPUSH
78729: LD_VAR 0 8
78733: PPUSH
78734: LD_INT 0
78736: PPUSH
78737: CALL 80703 0 3
// end ;
78741: GO 78678
78743: POP
78744: POP
// if apemans then
78745: LD_VAR 0 3
78749: IFFALSE 78872
// for i = 1 to apemans do
78751: LD_ADDR_VAR 0 11
78755: PUSH
78756: DOUBLE
78757: LD_INT 1
78759: DEC
78760: ST_TO_ADDR
78761: LD_VAR 0 3
78765: PUSH
78766: FOR_TO
78767: IFFALSE 78870
// begin hc_class = class_apeman ;
78769: LD_ADDR_OWVAR 28
78773: PUSH
78774: LD_INT 12
78776: ST_TO_ADDR
// hc_gallery =  ;
78777: LD_ADDR_OWVAR 33
78781: PUSH
78782: LD_STRING 
78784: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78785: LD_ADDR_OWVAR 35
78789: PUSH
78790: LD_INT 2
78792: NEG
78793: PPUSH
78794: LD_INT 2
78796: PPUSH
78797: CALL_OW 12
78801: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78802: LD_ADDR_OWVAR 31
78806: PUSH
78807: LD_INT 1
78809: PPUSH
78810: LD_INT 3
78812: PPUSH
78813: CALL_OW 12
78817: PUSH
78818: LD_INT 1
78820: PPUSH
78821: LD_INT 3
78823: PPUSH
78824: CALL_OW 12
78828: PUSH
78829: LD_INT 0
78831: PUSH
78832: LD_INT 0
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: LIST
78839: LIST
78840: ST_TO_ADDR
// animal := CreateHuman ;
78841: LD_ADDR_VAR 0 12
78845: PUSH
78846: CALL_OW 44
78850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78851: LD_VAR 0 12
78855: PPUSH
78856: LD_VAR 0 8
78860: PPUSH
78861: LD_INT 0
78863: PPUSH
78864: CALL 80703 0 3
// end ;
78868: GO 78766
78870: POP
78871: POP
// if enchidnas then
78872: LD_VAR 0 4
78876: IFFALSE 78943
// for i = 1 to enchidnas do
78878: LD_ADDR_VAR 0 11
78882: PUSH
78883: DOUBLE
78884: LD_INT 1
78886: DEC
78887: ST_TO_ADDR
78888: LD_VAR 0 4
78892: PUSH
78893: FOR_TO
78894: IFFALSE 78941
// begin hc_class = 13 ;
78896: LD_ADDR_OWVAR 28
78900: PUSH
78901: LD_INT 13
78903: ST_TO_ADDR
// hc_gallery =  ;
78904: LD_ADDR_OWVAR 33
78908: PUSH
78909: LD_STRING 
78911: ST_TO_ADDR
// animal := CreateHuman ;
78912: LD_ADDR_VAR 0 12
78916: PUSH
78917: CALL_OW 44
78921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78922: LD_VAR 0 12
78926: PPUSH
78927: LD_VAR 0 8
78931: PPUSH
78932: LD_INT 0
78934: PPUSH
78935: CALL 80703 0 3
// end ;
78939: GO 78893
78941: POP
78942: POP
// if fishes then
78943: LD_VAR 0 7
78947: IFFALSE 79014
// for i = 1 to fishes do
78949: LD_ADDR_VAR 0 11
78953: PUSH
78954: DOUBLE
78955: LD_INT 1
78957: DEC
78958: ST_TO_ADDR
78959: LD_VAR 0 7
78963: PUSH
78964: FOR_TO
78965: IFFALSE 79012
// begin hc_class = 20 ;
78967: LD_ADDR_OWVAR 28
78971: PUSH
78972: LD_INT 20
78974: ST_TO_ADDR
// hc_gallery =  ;
78975: LD_ADDR_OWVAR 33
78979: PUSH
78980: LD_STRING 
78982: ST_TO_ADDR
// animal := CreateHuman ;
78983: LD_ADDR_VAR 0 12
78987: PUSH
78988: CALL_OW 44
78992: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78993: LD_VAR 0 12
78997: PPUSH
78998: LD_VAR 0 9
79002: PPUSH
79003: LD_INT 0
79005: PPUSH
79006: CALL 80703 0 3
// end ;
79010: GO 78964
79012: POP
79013: POP
// end ;
79014: LD_VAR 0 10
79018: RET
// export function WantHeal ( sci , unit ) ; begin
79019: LD_INT 0
79021: PPUSH
// if GetTaskList ( sci ) > 0 then
79022: LD_VAR 0 1
79026: PPUSH
79027: CALL_OW 437
79031: PUSH
79032: LD_INT 0
79034: GREATER
79035: IFFALSE 79105
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
79037: LD_VAR 0 1
79041: PPUSH
79042: CALL_OW 437
79046: PUSH
79047: LD_INT 1
79049: ARRAY
79050: PUSH
79051: LD_INT 1
79053: ARRAY
79054: PUSH
79055: LD_STRING l
79057: EQUAL
79058: PUSH
79059: LD_VAR 0 1
79063: PPUSH
79064: CALL_OW 437
79068: PUSH
79069: LD_INT 1
79071: ARRAY
79072: PUSH
79073: LD_INT 4
79075: ARRAY
79076: PUSH
79077: LD_VAR 0 2
79081: EQUAL
79082: AND
79083: IFFALSE 79095
// result := true else
79085: LD_ADDR_VAR 0 3
79089: PUSH
79090: LD_INT 1
79092: ST_TO_ADDR
79093: GO 79103
// result := false ;
79095: LD_ADDR_VAR 0 3
79099: PUSH
79100: LD_INT 0
79102: ST_TO_ADDR
// end else
79103: GO 79113
// result := false ;
79105: LD_ADDR_VAR 0 3
79109: PUSH
79110: LD_INT 0
79112: ST_TO_ADDR
// end ;
79113: LD_VAR 0 3
79117: RET
// export function HealTarget ( sci ) ; begin
79118: LD_INT 0
79120: PPUSH
// if not sci then
79121: LD_VAR 0 1
79125: NOT
79126: IFFALSE 79130
// exit ;
79128: GO 79195
// result := 0 ;
79130: LD_ADDR_VAR 0 2
79134: PUSH
79135: LD_INT 0
79137: ST_TO_ADDR
// if GetTaskList ( sci ) then
79138: LD_VAR 0 1
79142: PPUSH
79143: CALL_OW 437
79147: IFFALSE 79195
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79149: LD_VAR 0 1
79153: PPUSH
79154: CALL_OW 437
79158: PUSH
79159: LD_INT 1
79161: ARRAY
79162: PUSH
79163: LD_INT 1
79165: ARRAY
79166: PUSH
79167: LD_STRING l
79169: EQUAL
79170: IFFALSE 79195
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79172: LD_ADDR_VAR 0 2
79176: PUSH
79177: LD_VAR 0 1
79181: PPUSH
79182: CALL_OW 437
79186: PUSH
79187: LD_INT 1
79189: ARRAY
79190: PUSH
79191: LD_INT 4
79193: ARRAY
79194: ST_TO_ADDR
// end ;
79195: LD_VAR 0 2
79199: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
79200: LD_INT 0
79202: PPUSH
79203: PPUSH
79204: PPUSH
79205: PPUSH
// if not base_units then
79206: LD_VAR 0 1
79210: NOT
79211: IFFALSE 79215
// exit ;
79213: GO 79302
// result := false ;
79215: LD_ADDR_VAR 0 2
79219: PUSH
79220: LD_INT 0
79222: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
79223: LD_ADDR_VAR 0 5
79227: PUSH
79228: LD_VAR 0 1
79232: PPUSH
79233: LD_INT 21
79235: PUSH
79236: LD_INT 3
79238: PUSH
79239: EMPTY
79240: LIST
79241: LIST
79242: PPUSH
79243: CALL_OW 72
79247: ST_TO_ADDR
// if not tmp then
79248: LD_VAR 0 5
79252: NOT
79253: IFFALSE 79257
// exit ;
79255: GO 79302
// for i in tmp do
79257: LD_ADDR_VAR 0 3
79261: PUSH
79262: LD_VAR 0 5
79266: PUSH
79267: FOR_IN
79268: IFFALSE 79300
// begin result := EnemyInRange ( i , 22 ) ;
79270: LD_ADDR_VAR 0 2
79274: PUSH
79275: LD_VAR 0 3
79279: PPUSH
79280: LD_INT 22
79282: PPUSH
79283: CALL 77538 0 2
79287: ST_TO_ADDR
// if result then
79288: LD_VAR 0 2
79292: IFFALSE 79298
// exit ;
79294: POP
79295: POP
79296: GO 79302
// end ;
79298: GO 79267
79300: POP
79301: POP
// end ;
79302: LD_VAR 0 2
79306: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
79307: LD_INT 0
79309: PPUSH
79310: PPUSH
// if not units then
79311: LD_VAR 0 1
79315: NOT
79316: IFFALSE 79320
// exit ;
79318: GO 79390
// result := [ ] ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: EMPTY
79326: ST_TO_ADDR
// for i in units do
79327: LD_ADDR_VAR 0 4
79331: PUSH
79332: LD_VAR 0 1
79336: PUSH
79337: FOR_IN
79338: IFFALSE 79388
// if GetTag ( i ) = tag then
79340: LD_VAR 0 4
79344: PPUSH
79345: CALL_OW 110
79349: PUSH
79350: LD_VAR 0 2
79354: EQUAL
79355: IFFALSE 79386
// result := Replace ( result , result + 1 , i ) ;
79357: LD_ADDR_VAR 0 3
79361: PUSH
79362: LD_VAR 0 3
79366: PPUSH
79367: LD_VAR 0 3
79371: PUSH
79372: LD_INT 1
79374: PLUS
79375: PPUSH
79376: LD_VAR 0 4
79380: PPUSH
79381: CALL_OW 1
79385: ST_TO_ADDR
79386: GO 79337
79388: POP
79389: POP
// end ;
79390: LD_VAR 0 3
79394: RET
// export function IsDriver ( un ) ; begin
79395: LD_INT 0
79397: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
79398: LD_ADDR_VAR 0 2
79402: PUSH
79403: LD_VAR 0 1
79407: PUSH
79408: LD_INT 55
79410: PUSH
79411: EMPTY
79412: LIST
79413: PPUSH
79414: CALL_OW 69
79418: IN
79419: ST_TO_ADDR
// end ;
79420: LD_VAR 0 2
79424: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
79425: LD_INT 0
79427: PPUSH
79428: PPUSH
// list := [ ] ;
79429: LD_ADDR_VAR 0 5
79433: PUSH
79434: EMPTY
79435: ST_TO_ADDR
// case d of 0 :
79436: LD_VAR 0 3
79440: PUSH
79441: LD_INT 0
79443: DOUBLE
79444: EQUAL
79445: IFTRUE 79449
79447: GO 79582
79449: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
79450: LD_ADDR_VAR 0 5
79454: PUSH
79455: LD_VAR 0 1
79459: PUSH
79460: LD_INT 4
79462: MINUS
79463: PUSH
79464: LD_VAR 0 2
79468: PUSH
79469: LD_INT 4
79471: MINUS
79472: PUSH
79473: LD_INT 2
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: LIST
79480: PUSH
79481: LD_VAR 0 1
79485: PUSH
79486: LD_INT 3
79488: MINUS
79489: PUSH
79490: LD_VAR 0 2
79494: PUSH
79495: LD_INT 1
79497: PUSH
79498: EMPTY
79499: LIST
79500: LIST
79501: LIST
79502: PUSH
79503: LD_VAR 0 1
79507: PUSH
79508: LD_INT 4
79510: PLUS
79511: PUSH
79512: LD_VAR 0 2
79516: PUSH
79517: LD_INT 4
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: LIST
79524: PUSH
79525: LD_VAR 0 1
79529: PUSH
79530: LD_INT 3
79532: PLUS
79533: PUSH
79534: LD_VAR 0 2
79538: PUSH
79539: LD_INT 3
79541: PLUS
79542: PUSH
79543: LD_INT 5
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: LIST
79550: PUSH
79551: LD_VAR 0 1
79555: PUSH
79556: LD_VAR 0 2
79560: PUSH
79561: LD_INT 4
79563: PLUS
79564: PUSH
79565: LD_INT 0
79567: PUSH
79568: EMPTY
79569: LIST
79570: LIST
79571: LIST
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: LIST
79577: LIST
79578: LIST
79579: ST_TO_ADDR
// end ; 1 :
79580: GO 80280
79582: LD_INT 1
79584: DOUBLE
79585: EQUAL
79586: IFTRUE 79590
79588: GO 79723
79590: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79591: LD_ADDR_VAR 0 5
79595: PUSH
79596: LD_VAR 0 1
79600: PUSH
79601: LD_VAR 0 2
79605: PUSH
79606: LD_INT 4
79608: MINUS
79609: PUSH
79610: LD_INT 3
79612: PUSH
79613: EMPTY
79614: LIST
79615: LIST
79616: LIST
79617: PUSH
79618: LD_VAR 0 1
79622: PUSH
79623: LD_INT 3
79625: MINUS
79626: PUSH
79627: LD_VAR 0 2
79631: PUSH
79632: LD_INT 3
79634: MINUS
79635: PUSH
79636: LD_INT 2
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: LIST
79643: PUSH
79644: LD_VAR 0 1
79648: PUSH
79649: LD_INT 4
79651: MINUS
79652: PUSH
79653: LD_VAR 0 2
79657: PUSH
79658: LD_INT 1
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: LIST
79665: PUSH
79666: LD_VAR 0 1
79670: PUSH
79671: LD_VAR 0 2
79675: PUSH
79676: LD_INT 3
79678: PLUS
79679: PUSH
79680: LD_INT 0
79682: PUSH
79683: EMPTY
79684: LIST
79685: LIST
79686: LIST
79687: PUSH
79688: LD_VAR 0 1
79692: PUSH
79693: LD_INT 4
79695: PLUS
79696: PUSH
79697: LD_VAR 0 2
79701: PUSH
79702: LD_INT 4
79704: PLUS
79705: PUSH
79706: LD_INT 5
79708: PUSH
79709: EMPTY
79710: LIST
79711: LIST
79712: LIST
79713: PUSH
79714: EMPTY
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: ST_TO_ADDR
// end ; 2 :
79721: GO 80280
79723: LD_INT 2
79725: DOUBLE
79726: EQUAL
79727: IFTRUE 79731
79729: GO 79860
79731: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79732: LD_ADDR_VAR 0 5
79736: PUSH
79737: LD_VAR 0 1
79741: PUSH
79742: LD_VAR 0 2
79746: PUSH
79747: LD_INT 3
79749: MINUS
79750: PUSH
79751: LD_INT 3
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: LIST
79758: PUSH
79759: LD_VAR 0 1
79763: PUSH
79764: LD_INT 4
79766: PLUS
79767: PUSH
79768: LD_VAR 0 2
79772: PUSH
79773: LD_INT 4
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: LIST
79780: PUSH
79781: LD_VAR 0 1
79785: PUSH
79786: LD_VAR 0 2
79790: PUSH
79791: LD_INT 4
79793: PLUS
79794: PUSH
79795: LD_INT 0
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: LIST
79802: PUSH
79803: LD_VAR 0 1
79807: PUSH
79808: LD_INT 3
79810: MINUS
79811: PUSH
79812: LD_VAR 0 2
79816: PUSH
79817: LD_INT 1
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: LIST
79824: PUSH
79825: LD_VAR 0 1
79829: PUSH
79830: LD_INT 4
79832: MINUS
79833: PUSH
79834: LD_VAR 0 2
79838: PUSH
79839: LD_INT 4
79841: MINUS
79842: PUSH
79843: LD_INT 2
79845: PUSH
79846: EMPTY
79847: LIST
79848: LIST
79849: LIST
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: LIST
79855: LIST
79856: LIST
79857: ST_TO_ADDR
// end ; 3 :
79858: GO 80280
79860: LD_INT 3
79862: DOUBLE
79863: EQUAL
79864: IFTRUE 79868
79866: GO 80001
79868: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79869: LD_ADDR_VAR 0 5
79873: PUSH
79874: LD_VAR 0 1
79878: PUSH
79879: LD_INT 3
79881: PLUS
79882: PUSH
79883: LD_VAR 0 2
79887: PUSH
79888: LD_INT 4
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: LIST
79895: PUSH
79896: LD_VAR 0 1
79900: PUSH
79901: LD_INT 4
79903: PLUS
79904: PUSH
79905: LD_VAR 0 2
79909: PUSH
79910: LD_INT 4
79912: PLUS
79913: PUSH
79914: LD_INT 5
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: LIST
79921: PUSH
79922: LD_VAR 0 1
79926: PUSH
79927: LD_INT 4
79929: MINUS
79930: PUSH
79931: LD_VAR 0 2
79935: PUSH
79936: LD_INT 1
79938: PUSH
79939: EMPTY
79940: LIST
79941: LIST
79942: LIST
79943: PUSH
79944: LD_VAR 0 1
79948: PUSH
79949: LD_VAR 0 2
79953: PUSH
79954: LD_INT 4
79956: MINUS
79957: PUSH
79958: LD_INT 3
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: LIST
79965: PUSH
79966: LD_VAR 0 1
79970: PUSH
79971: LD_INT 3
79973: MINUS
79974: PUSH
79975: LD_VAR 0 2
79979: PUSH
79980: LD_INT 3
79982: MINUS
79983: PUSH
79984: LD_INT 2
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: LIST
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: LIST
79996: LIST
79997: LIST
79998: ST_TO_ADDR
// end ; 4 :
79999: GO 80280
80001: LD_INT 4
80003: DOUBLE
80004: EQUAL
80005: IFTRUE 80009
80007: GO 80142
80009: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
80010: LD_ADDR_VAR 0 5
80014: PUSH
80015: LD_VAR 0 1
80019: PUSH
80020: LD_VAR 0 2
80024: PUSH
80025: LD_INT 4
80027: PLUS
80028: PUSH
80029: LD_INT 0
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: LIST
80036: PUSH
80037: LD_VAR 0 1
80041: PUSH
80042: LD_INT 3
80044: PLUS
80045: PUSH
80046: LD_VAR 0 2
80050: PUSH
80051: LD_INT 3
80053: PLUS
80054: PUSH
80055: LD_INT 5
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: LIST
80062: PUSH
80063: LD_VAR 0 1
80067: PUSH
80068: LD_INT 4
80070: PLUS
80071: PUSH
80072: LD_VAR 0 2
80076: PUSH
80077: LD_INT 4
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: LIST
80084: PUSH
80085: LD_VAR 0 1
80089: PUSH
80090: LD_VAR 0 2
80094: PUSH
80095: LD_INT 3
80097: MINUS
80098: PUSH
80099: LD_INT 3
80101: PUSH
80102: EMPTY
80103: LIST
80104: LIST
80105: LIST
80106: PUSH
80107: LD_VAR 0 1
80111: PUSH
80112: LD_INT 4
80114: MINUS
80115: PUSH
80116: LD_VAR 0 2
80120: PUSH
80121: LD_INT 4
80123: MINUS
80124: PUSH
80125: LD_INT 2
80127: PUSH
80128: EMPTY
80129: LIST
80130: LIST
80131: LIST
80132: PUSH
80133: EMPTY
80134: LIST
80135: LIST
80136: LIST
80137: LIST
80138: LIST
80139: ST_TO_ADDR
// end ; 5 :
80140: GO 80280
80142: LD_INT 5
80144: DOUBLE
80145: EQUAL
80146: IFTRUE 80150
80148: GO 80279
80150: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
80151: LD_ADDR_VAR 0 5
80155: PUSH
80156: LD_VAR 0 1
80160: PUSH
80161: LD_INT 4
80163: MINUS
80164: PUSH
80165: LD_VAR 0 2
80169: PUSH
80170: LD_INT 1
80172: PUSH
80173: EMPTY
80174: LIST
80175: LIST
80176: LIST
80177: PUSH
80178: LD_VAR 0 1
80182: PUSH
80183: LD_VAR 0 2
80187: PUSH
80188: LD_INT 4
80190: MINUS
80191: PUSH
80192: LD_INT 3
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: LIST
80199: PUSH
80200: LD_VAR 0 1
80204: PUSH
80205: LD_INT 4
80207: PLUS
80208: PUSH
80209: LD_VAR 0 2
80213: PUSH
80214: LD_INT 4
80216: PLUS
80217: PUSH
80218: LD_INT 5
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: LIST
80225: PUSH
80226: LD_VAR 0 1
80230: PUSH
80231: LD_INT 3
80233: PLUS
80234: PUSH
80235: LD_VAR 0 2
80239: PUSH
80240: LD_INT 4
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: LIST
80247: PUSH
80248: LD_VAR 0 1
80252: PUSH
80253: LD_VAR 0 2
80257: PUSH
80258: LD_INT 3
80260: PLUS
80261: PUSH
80262: LD_INT 0
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: LIST
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: ST_TO_ADDR
// end ; end ;
80277: GO 80280
80279: POP
// result := list ;
80280: LD_ADDR_VAR 0 4
80284: PUSH
80285: LD_VAR 0 5
80289: ST_TO_ADDR
// end ;
80290: LD_VAR 0 4
80294: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
80295: LD_INT 0
80297: PPUSH
80298: PPUSH
80299: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
80300: LD_VAR 0 1
80304: NOT
80305: PUSH
80306: LD_VAR 0 2
80310: PUSH
80311: LD_INT 1
80313: PUSH
80314: LD_INT 2
80316: PUSH
80317: LD_INT 3
80319: PUSH
80320: LD_INT 4
80322: PUSH
80323: EMPTY
80324: LIST
80325: LIST
80326: LIST
80327: LIST
80328: IN
80329: NOT
80330: OR
80331: IFFALSE 80335
// exit ;
80333: GO 80427
// tmp := [ ] ;
80335: LD_ADDR_VAR 0 5
80339: PUSH
80340: EMPTY
80341: ST_TO_ADDR
// for i in units do
80342: LD_ADDR_VAR 0 4
80346: PUSH
80347: LD_VAR 0 1
80351: PUSH
80352: FOR_IN
80353: IFFALSE 80396
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
80355: LD_ADDR_VAR 0 5
80359: PUSH
80360: LD_VAR 0 5
80364: PPUSH
80365: LD_VAR 0 5
80369: PUSH
80370: LD_INT 1
80372: PLUS
80373: PPUSH
80374: LD_VAR 0 4
80378: PPUSH
80379: LD_VAR 0 2
80383: PPUSH
80384: CALL_OW 259
80388: PPUSH
80389: CALL_OW 2
80393: ST_TO_ADDR
80394: GO 80352
80396: POP
80397: POP
// if not tmp then
80398: LD_VAR 0 5
80402: NOT
80403: IFFALSE 80407
// exit ;
80405: GO 80427
// result := SortListByListDesc ( units , tmp ) ;
80407: LD_ADDR_VAR 0 3
80411: PUSH
80412: LD_VAR 0 1
80416: PPUSH
80417: LD_VAR 0 5
80421: PPUSH
80422: CALL_OW 77
80426: ST_TO_ADDR
// end ;
80427: LD_VAR 0 3
80431: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
80432: LD_INT 0
80434: PPUSH
80435: PPUSH
80436: PPUSH
// result := false ;
80437: LD_ADDR_VAR 0 3
80441: PUSH
80442: LD_INT 0
80444: ST_TO_ADDR
// x := GetX ( building ) ;
80445: LD_ADDR_VAR 0 4
80449: PUSH
80450: LD_VAR 0 2
80454: PPUSH
80455: CALL_OW 250
80459: ST_TO_ADDR
// y := GetY ( building ) ;
80460: LD_ADDR_VAR 0 5
80464: PUSH
80465: LD_VAR 0 2
80469: PPUSH
80470: CALL_OW 251
80474: ST_TO_ADDR
// if not building or not x or not y then
80475: LD_VAR 0 2
80479: NOT
80480: PUSH
80481: LD_VAR 0 4
80485: NOT
80486: OR
80487: PUSH
80488: LD_VAR 0 5
80492: NOT
80493: OR
80494: IFFALSE 80498
// exit ;
80496: GO 80590
// if GetTaskList ( unit ) then
80498: LD_VAR 0 1
80502: PPUSH
80503: CALL_OW 437
80507: IFFALSE 80590
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80509: LD_STRING e
80511: PUSH
80512: LD_VAR 0 1
80516: PPUSH
80517: CALL_OW 437
80521: PUSH
80522: LD_INT 1
80524: ARRAY
80525: PUSH
80526: LD_INT 1
80528: ARRAY
80529: EQUAL
80530: PUSH
80531: LD_VAR 0 4
80535: PUSH
80536: LD_VAR 0 1
80540: PPUSH
80541: CALL_OW 437
80545: PUSH
80546: LD_INT 1
80548: ARRAY
80549: PUSH
80550: LD_INT 2
80552: ARRAY
80553: EQUAL
80554: AND
80555: PUSH
80556: LD_VAR 0 5
80560: PUSH
80561: LD_VAR 0 1
80565: PPUSH
80566: CALL_OW 437
80570: PUSH
80571: LD_INT 1
80573: ARRAY
80574: PUSH
80575: LD_INT 3
80577: ARRAY
80578: EQUAL
80579: AND
80580: IFFALSE 80590
// result := true end ;
80582: LD_ADDR_VAR 0 3
80586: PUSH
80587: LD_INT 1
80589: ST_TO_ADDR
// end ;
80590: LD_VAR 0 3
80594: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80595: LD_INT 0
80597: PPUSH
// result := false ;
80598: LD_ADDR_VAR 0 4
80602: PUSH
80603: LD_INT 0
80605: ST_TO_ADDR
// if GetTaskList ( unit ) then
80606: LD_VAR 0 1
80610: PPUSH
80611: CALL_OW 437
80615: IFFALSE 80698
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80617: LD_STRING M
80619: PUSH
80620: LD_VAR 0 1
80624: PPUSH
80625: CALL_OW 437
80629: PUSH
80630: LD_INT 1
80632: ARRAY
80633: PUSH
80634: LD_INT 1
80636: ARRAY
80637: EQUAL
80638: PUSH
80639: LD_VAR 0 2
80643: PUSH
80644: LD_VAR 0 1
80648: PPUSH
80649: CALL_OW 437
80653: PUSH
80654: LD_INT 1
80656: ARRAY
80657: PUSH
80658: LD_INT 2
80660: ARRAY
80661: EQUAL
80662: AND
80663: PUSH
80664: LD_VAR 0 3
80668: PUSH
80669: LD_VAR 0 1
80673: PPUSH
80674: CALL_OW 437
80678: PUSH
80679: LD_INT 1
80681: ARRAY
80682: PUSH
80683: LD_INT 3
80685: ARRAY
80686: EQUAL
80687: AND
80688: IFFALSE 80698
// result := true ;
80690: LD_ADDR_VAR 0 4
80694: PUSH
80695: LD_INT 1
80697: ST_TO_ADDR
// end ; end ;
80698: LD_VAR 0 4
80702: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80703: LD_INT 0
80705: PPUSH
80706: PPUSH
80707: PPUSH
80708: PPUSH
// if not unit or not area then
80709: LD_VAR 0 1
80713: NOT
80714: PUSH
80715: LD_VAR 0 2
80719: NOT
80720: OR
80721: IFFALSE 80725
// exit ;
80723: GO 80889
// tmp := AreaToList ( area , i ) ;
80725: LD_ADDR_VAR 0 6
80729: PUSH
80730: LD_VAR 0 2
80734: PPUSH
80735: LD_VAR 0 5
80739: PPUSH
80740: CALL_OW 517
80744: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80745: LD_ADDR_VAR 0 5
80749: PUSH
80750: DOUBLE
80751: LD_INT 1
80753: DEC
80754: ST_TO_ADDR
80755: LD_VAR 0 6
80759: PUSH
80760: LD_INT 1
80762: ARRAY
80763: PUSH
80764: FOR_TO
80765: IFFALSE 80887
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80767: LD_ADDR_VAR 0 7
80771: PUSH
80772: LD_VAR 0 6
80776: PUSH
80777: LD_INT 1
80779: ARRAY
80780: PUSH
80781: LD_VAR 0 5
80785: ARRAY
80786: PUSH
80787: LD_VAR 0 6
80791: PUSH
80792: LD_INT 2
80794: ARRAY
80795: PUSH
80796: LD_VAR 0 5
80800: ARRAY
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80806: LD_VAR 0 7
80810: PUSH
80811: LD_INT 1
80813: ARRAY
80814: PPUSH
80815: LD_VAR 0 7
80819: PUSH
80820: LD_INT 2
80822: ARRAY
80823: PPUSH
80824: CALL_OW 428
80828: PUSH
80829: LD_INT 0
80831: EQUAL
80832: IFFALSE 80885
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80834: LD_VAR 0 1
80838: PPUSH
80839: LD_VAR 0 7
80843: PUSH
80844: LD_INT 1
80846: ARRAY
80847: PPUSH
80848: LD_VAR 0 7
80852: PUSH
80853: LD_INT 2
80855: ARRAY
80856: PPUSH
80857: LD_VAR 0 3
80861: PPUSH
80862: CALL_OW 48
// result := IsPlaced ( unit ) ;
80866: LD_ADDR_VAR 0 4
80870: PUSH
80871: LD_VAR 0 1
80875: PPUSH
80876: CALL_OW 305
80880: ST_TO_ADDR
// exit ;
80881: POP
80882: POP
80883: GO 80889
// end ; end ;
80885: GO 80764
80887: POP
80888: POP
// end ;
80889: LD_VAR 0 4
80893: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80894: LD_INT 0
80896: PPUSH
80897: PPUSH
80898: PPUSH
// if not side or side > 8 then
80899: LD_VAR 0 1
80903: NOT
80904: PUSH
80905: LD_VAR 0 1
80909: PUSH
80910: LD_INT 8
80912: GREATER
80913: OR
80914: IFFALSE 80918
// exit ;
80916: GO 81105
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80918: LD_ADDR_VAR 0 4
80922: PUSH
80923: LD_INT 22
80925: PUSH
80926: LD_VAR 0 1
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PUSH
80935: LD_INT 21
80937: PUSH
80938: LD_INT 3
80940: PUSH
80941: EMPTY
80942: LIST
80943: LIST
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PPUSH
80949: CALL_OW 69
80953: ST_TO_ADDR
// if not tmp then
80954: LD_VAR 0 4
80958: NOT
80959: IFFALSE 80963
// exit ;
80961: GO 81105
// enable_addtolog := true ;
80963: LD_ADDR_OWVAR 81
80967: PUSH
80968: LD_INT 1
80970: ST_TO_ADDR
// AddToLog ( [ ) ;
80971: LD_STRING [
80973: PPUSH
80974: CALL_OW 561
// for i in tmp do
80978: LD_ADDR_VAR 0 3
80982: PUSH
80983: LD_VAR 0 4
80987: PUSH
80988: FOR_IN
80989: IFFALSE 81096
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80991: LD_STRING [
80993: PUSH
80994: LD_VAR 0 3
80998: PPUSH
80999: CALL_OW 266
81003: STR
81004: PUSH
81005: LD_STRING , 
81007: STR
81008: PUSH
81009: LD_VAR 0 3
81013: PPUSH
81014: CALL_OW 250
81018: STR
81019: PUSH
81020: LD_STRING , 
81022: STR
81023: PUSH
81024: LD_VAR 0 3
81028: PPUSH
81029: CALL_OW 251
81033: STR
81034: PUSH
81035: LD_STRING , 
81037: STR
81038: PUSH
81039: LD_VAR 0 3
81043: PPUSH
81044: CALL_OW 254
81048: STR
81049: PUSH
81050: LD_STRING , 
81052: STR
81053: PUSH
81054: LD_VAR 0 3
81058: PPUSH
81059: LD_INT 1
81061: PPUSH
81062: CALL_OW 268
81066: STR
81067: PUSH
81068: LD_STRING , 
81070: STR
81071: PUSH
81072: LD_VAR 0 3
81076: PPUSH
81077: LD_INT 2
81079: PPUSH
81080: CALL_OW 268
81084: STR
81085: PUSH
81086: LD_STRING ],
81088: STR
81089: PPUSH
81090: CALL_OW 561
// end ;
81094: GO 80988
81096: POP
81097: POP
// AddToLog ( ]; ) ;
81098: LD_STRING ];
81100: PPUSH
81101: CALL_OW 561
// end ;
81105: LD_VAR 0 2
81109: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
81110: LD_INT 0
81112: PPUSH
81113: PPUSH
81114: PPUSH
81115: PPUSH
81116: PPUSH
// if not area or not rate or not max then
81117: LD_VAR 0 1
81121: NOT
81122: PUSH
81123: LD_VAR 0 2
81127: NOT
81128: OR
81129: PUSH
81130: LD_VAR 0 4
81134: NOT
81135: OR
81136: IFFALSE 81140
// exit ;
81138: GO 81332
// while 1 do
81140: LD_INT 1
81142: IFFALSE 81332
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
81144: LD_ADDR_VAR 0 9
81148: PUSH
81149: LD_VAR 0 1
81153: PPUSH
81154: LD_INT 1
81156: PPUSH
81157: CALL_OW 287
81161: PUSH
81162: LD_INT 10
81164: MUL
81165: ST_TO_ADDR
// r := rate / 10 ;
81166: LD_ADDR_VAR 0 7
81170: PUSH
81171: LD_VAR 0 2
81175: PUSH
81176: LD_INT 10
81178: DIVREAL
81179: ST_TO_ADDR
// time := 1 1$00 ;
81180: LD_ADDR_VAR 0 8
81184: PUSH
81185: LD_INT 2100
81187: ST_TO_ADDR
// if amount < min then
81188: LD_VAR 0 9
81192: PUSH
81193: LD_VAR 0 3
81197: LESS
81198: IFFALSE 81216
// r := r * 2 else
81200: LD_ADDR_VAR 0 7
81204: PUSH
81205: LD_VAR 0 7
81209: PUSH
81210: LD_INT 2
81212: MUL
81213: ST_TO_ADDR
81214: GO 81242
// if amount > max then
81216: LD_VAR 0 9
81220: PUSH
81221: LD_VAR 0 4
81225: GREATER
81226: IFFALSE 81242
// r := r / 2 ;
81228: LD_ADDR_VAR 0 7
81232: PUSH
81233: LD_VAR 0 7
81237: PUSH
81238: LD_INT 2
81240: DIVREAL
81241: ST_TO_ADDR
// time := time / r ;
81242: LD_ADDR_VAR 0 8
81246: PUSH
81247: LD_VAR 0 8
81251: PUSH
81252: LD_VAR 0 7
81256: DIVREAL
81257: ST_TO_ADDR
// if time < 0 then
81258: LD_VAR 0 8
81262: PUSH
81263: LD_INT 0
81265: LESS
81266: IFFALSE 81283
// time := time * - 1 ;
81268: LD_ADDR_VAR 0 8
81272: PUSH
81273: LD_VAR 0 8
81277: PUSH
81278: LD_INT 1
81280: NEG
81281: MUL
81282: ST_TO_ADDR
// wait ( time ) ;
81283: LD_VAR 0 8
81287: PPUSH
81288: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
81292: LD_INT 35
81294: PPUSH
81295: LD_INT 875
81297: PPUSH
81298: CALL_OW 12
81302: PPUSH
81303: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
81307: LD_INT 1
81309: PPUSH
81310: LD_INT 5
81312: PPUSH
81313: CALL_OW 12
81317: PPUSH
81318: LD_VAR 0 1
81322: PPUSH
81323: LD_INT 1
81325: PPUSH
81326: CALL_OW 55
// end ;
81330: GO 81140
// end ;
81332: LD_VAR 0 5
81336: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
81337: LD_INT 0
81339: PPUSH
81340: PPUSH
81341: PPUSH
81342: PPUSH
81343: PPUSH
81344: PPUSH
81345: PPUSH
81346: PPUSH
// if not turrets or not factories then
81347: LD_VAR 0 1
81351: NOT
81352: PUSH
81353: LD_VAR 0 2
81357: NOT
81358: OR
81359: IFFALSE 81363
// exit ;
81361: GO 81670
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
81363: LD_ADDR_VAR 0 10
81367: PUSH
81368: LD_INT 5
81370: PUSH
81371: LD_INT 6
81373: PUSH
81374: EMPTY
81375: LIST
81376: LIST
81377: PUSH
81378: LD_INT 2
81380: PUSH
81381: LD_INT 4
81383: PUSH
81384: EMPTY
81385: LIST
81386: LIST
81387: PUSH
81388: LD_INT 3
81390: PUSH
81391: LD_INT 5
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: PUSH
81398: EMPTY
81399: LIST
81400: LIST
81401: LIST
81402: PUSH
81403: LD_INT 24
81405: PUSH
81406: LD_INT 25
81408: PUSH
81409: EMPTY
81410: LIST
81411: LIST
81412: PUSH
81413: LD_INT 23
81415: PUSH
81416: LD_INT 27
81418: PUSH
81419: EMPTY
81420: LIST
81421: LIST
81422: PUSH
81423: EMPTY
81424: LIST
81425: LIST
81426: PUSH
81427: LD_INT 42
81429: PUSH
81430: LD_INT 43
81432: PUSH
81433: EMPTY
81434: LIST
81435: LIST
81436: PUSH
81437: LD_INT 44
81439: PUSH
81440: LD_INT 46
81442: PUSH
81443: EMPTY
81444: LIST
81445: LIST
81446: PUSH
81447: LD_INT 45
81449: PUSH
81450: LD_INT 47
81452: PUSH
81453: EMPTY
81454: LIST
81455: LIST
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: LIST
81461: PUSH
81462: EMPTY
81463: LIST
81464: LIST
81465: LIST
81466: ST_TO_ADDR
// result := [ ] ;
81467: LD_ADDR_VAR 0 3
81471: PUSH
81472: EMPTY
81473: ST_TO_ADDR
// for i in turrets do
81474: LD_ADDR_VAR 0 4
81478: PUSH
81479: LD_VAR 0 1
81483: PUSH
81484: FOR_IN
81485: IFFALSE 81668
// begin nat := GetNation ( i ) ;
81487: LD_ADDR_VAR 0 7
81491: PUSH
81492: LD_VAR 0 4
81496: PPUSH
81497: CALL_OW 248
81501: ST_TO_ADDR
// weapon := 0 ;
81502: LD_ADDR_VAR 0 8
81506: PUSH
81507: LD_INT 0
81509: ST_TO_ADDR
// if not nat then
81510: LD_VAR 0 7
81514: NOT
81515: IFFALSE 81519
// continue ;
81517: GO 81484
// for j in list [ nat ] do
81519: LD_ADDR_VAR 0 5
81523: PUSH
81524: LD_VAR 0 10
81528: PUSH
81529: LD_VAR 0 7
81533: ARRAY
81534: PUSH
81535: FOR_IN
81536: IFFALSE 81577
// if GetBWeapon ( i ) = j [ 1 ] then
81538: LD_VAR 0 4
81542: PPUSH
81543: CALL_OW 269
81547: PUSH
81548: LD_VAR 0 5
81552: PUSH
81553: LD_INT 1
81555: ARRAY
81556: EQUAL
81557: IFFALSE 81575
// begin weapon := j [ 2 ] ;
81559: LD_ADDR_VAR 0 8
81563: PUSH
81564: LD_VAR 0 5
81568: PUSH
81569: LD_INT 2
81571: ARRAY
81572: ST_TO_ADDR
// break ;
81573: GO 81577
// end ;
81575: GO 81535
81577: POP
81578: POP
// if not weapon then
81579: LD_VAR 0 8
81583: NOT
81584: IFFALSE 81588
// continue ;
81586: GO 81484
// for k in factories do
81588: LD_ADDR_VAR 0 6
81592: PUSH
81593: LD_VAR 0 2
81597: PUSH
81598: FOR_IN
81599: IFFALSE 81664
// begin weapons := AvailableWeaponList ( k ) ;
81601: LD_ADDR_VAR 0 9
81605: PUSH
81606: LD_VAR 0 6
81610: PPUSH
81611: CALL_OW 478
81615: ST_TO_ADDR
// if not weapons then
81616: LD_VAR 0 9
81620: NOT
81621: IFFALSE 81625
// continue ;
81623: GO 81598
// if weapon in weapons then
81625: LD_VAR 0 8
81629: PUSH
81630: LD_VAR 0 9
81634: IN
81635: IFFALSE 81662
// begin result := [ i , weapon ] ;
81637: LD_ADDR_VAR 0 3
81641: PUSH
81642: LD_VAR 0 4
81646: PUSH
81647: LD_VAR 0 8
81651: PUSH
81652: EMPTY
81653: LIST
81654: LIST
81655: ST_TO_ADDR
// exit ;
81656: POP
81657: POP
81658: POP
81659: POP
81660: GO 81670
// end ; end ;
81662: GO 81598
81664: POP
81665: POP
// end ;
81666: GO 81484
81668: POP
81669: POP
// end ;
81670: LD_VAR 0 3
81674: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81675: LD_INT 0
81677: PPUSH
// if not side or side > 8 then
81678: LD_VAR 0 3
81682: NOT
81683: PUSH
81684: LD_VAR 0 3
81688: PUSH
81689: LD_INT 8
81691: GREATER
81692: OR
81693: IFFALSE 81697
// exit ;
81695: GO 81756
// if not range then
81697: LD_VAR 0 4
81701: NOT
81702: IFFALSE 81713
// range := - 12 ;
81704: LD_ADDR_VAR 0 4
81708: PUSH
81709: LD_INT 12
81711: NEG
81712: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81713: LD_VAR 0 1
81717: PPUSH
81718: LD_VAR 0 2
81722: PPUSH
81723: LD_VAR 0 3
81727: PPUSH
81728: LD_VAR 0 4
81732: PPUSH
81733: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81737: LD_VAR 0 1
81741: PPUSH
81742: LD_VAR 0 2
81746: PPUSH
81747: LD_VAR 0 3
81751: PPUSH
81752: CALL_OW 331
// end ;
81756: LD_VAR 0 5
81760: RET
// export function Video ( mode ) ; begin
81761: LD_INT 0
81763: PPUSH
// ingame_video = mode ;
81764: LD_ADDR_OWVAR 52
81768: PUSH
81769: LD_VAR 0 1
81773: ST_TO_ADDR
// interface_hidden = mode ;
81774: LD_ADDR_OWVAR 54
81778: PUSH
81779: LD_VAR 0 1
81783: ST_TO_ADDR
// end ;
81784: LD_VAR 0 2
81788: RET
// export function Join ( array , element ) ; begin
81789: LD_INT 0
81791: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81792: LD_ADDR_VAR 0 3
81796: PUSH
81797: LD_VAR 0 1
81801: PPUSH
81802: LD_VAR 0 1
81806: PUSH
81807: LD_INT 1
81809: PLUS
81810: PPUSH
81811: LD_VAR 0 2
81815: PPUSH
81816: CALL_OW 1
81820: ST_TO_ADDR
// end ;
81821: LD_VAR 0 3
81825: RET
// export function JoinUnion ( array , element ) ; begin
81826: LD_INT 0
81828: PPUSH
// result := array union element ;
81829: LD_ADDR_VAR 0 3
81833: PUSH
81834: LD_VAR 0 1
81838: PUSH
81839: LD_VAR 0 2
81843: UNION
81844: ST_TO_ADDR
// end ;
81845: LD_VAR 0 3
81849: RET
// export function GetBehemoths ( side ) ; begin
81850: LD_INT 0
81852: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
81853: LD_ADDR_VAR 0 2
81857: PUSH
81858: LD_INT 22
81860: PUSH
81861: LD_VAR 0 1
81865: PUSH
81866: EMPTY
81867: LIST
81868: LIST
81869: PUSH
81870: LD_INT 31
81872: PUSH
81873: LD_INT 25
81875: PUSH
81876: EMPTY
81877: LIST
81878: LIST
81879: PUSH
81880: EMPTY
81881: LIST
81882: LIST
81883: PPUSH
81884: CALL_OW 69
81888: ST_TO_ADDR
// end ;
81889: LD_VAR 0 2
81893: RET
// export function Shuffle ( array ) ; var i , index ; begin
81894: LD_INT 0
81896: PPUSH
81897: PPUSH
81898: PPUSH
// result := [ ] ;
81899: LD_ADDR_VAR 0 2
81903: PUSH
81904: EMPTY
81905: ST_TO_ADDR
// if not array then
81906: LD_VAR 0 1
81910: NOT
81911: IFFALSE 81915
// exit ;
81913: GO 82014
// Randomize ;
81915: CALL_OW 10
// for i = array downto 1 do
81919: LD_ADDR_VAR 0 3
81923: PUSH
81924: DOUBLE
81925: LD_VAR 0 1
81929: INC
81930: ST_TO_ADDR
81931: LD_INT 1
81933: PUSH
81934: FOR_DOWNTO
81935: IFFALSE 82012
// begin index := rand ( 1 , array ) ;
81937: LD_ADDR_VAR 0 4
81941: PUSH
81942: LD_INT 1
81944: PPUSH
81945: LD_VAR 0 1
81949: PPUSH
81950: CALL_OW 12
81954: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81955: LD_ADDR_VAR 0 2
81959: PUSH
81960: LD_VAR 0 2
81964: PPUSH
81965: LD_VAR 0 2
81969: PUSH
81970: LD_INT 1
81972: PLUS
81973: PPUSH
81974: LD_VAR 0 1
81978: PUSH
81979: LD_VAR 0 4
81983: ARRAY
81984: PPUSH
81985: CALL_OW 2
81989: ST_TO_ADDR
// array := Delete ( array , index ) ;
81990: LD_ADDR_VAR 0 1
81994: PUSH
81995: LD_VAR 0 1
81999: PPUSH
82000: LD_VAR 0 4
82004: PPUSH
82005: CALL_OW 3
82009: ST_TO_ADDR
// end ;
82010: GO 81934
82012: POP
82013: POP
// end ;
82014: LD_VAR 0 2
82018: RET
// export function GetBaseMaterials ( base ) ; begin
82019: LD_INT 0
82021: PPUSH
// result := [ 0 , 0 , 0 ] ;
82022: LD_ADDR_VAR 0 2
82026: PUSH
82027: LD_INT 0
82029: PUSH
82030: LD_INT 0
82032: PUSH
82033: LD_INT 0
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: LIST
82040: ST_TO_ADDR
// if not base then
82041: LD_VAR 0 1
82045: NOT
82046: IFFALSE 82050
// exit ;
82048: GO 82099
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
82050: LD_ADDR_VAR 0 2
82054: PUSH
82055: LD_VAR 0 1
82059: PPUSH
82060: LD_INT 1
82062: PPUSH
82063: CALL_OW 275
82067: PUSH
82068: LD_VAR 0 1
82072: PPUSH
82073: LD_INT 2
82075: PPUSH
82076: CALL_OW 275
82080: PUSH
82081: LD_VAR 0 1
82085: PPUSH
82086: LD_INT 3
82088: PPUSH
82089: CALL_OW 275
82093: PUSH
82094: EMPTY
82095: LIST
82096: LIST
82097: LIST
82098: ST_TO_ADDR
// end ;
82099: LD_VAR 0 2
82103: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
82104: LD_INT 0
82106: PPUSH
82107: PPUSH
// result := array ;
82108: LD_ADDR_VAR 0 3
82112: PUSH
82113: LD_VAR 0 1
82117: ST_TO_ADDR
// if size > 0 then
82118: LD_VAR 0 2
82122: PUSH
82123: LD_INT 0
82125: GREATER
82126: IFFALSE 82172
// for i := array downto size do
82128: LD_ADDR_VAR 0 4
82132: PUSH
82133: DOUBLE
82134: LD_VAR 0 1
82138: INC
82139: ST_TO_ADDR
82140: LD_VAR 0 2
82144: PUSH
82145: FOR_DOWNTO
82146: IFFALSE 82170
// result := Delete ( result , result ) ;
82148: LD_ADDR_VAR 0 3
82152: PUSH
82153: LD_VAR 0 3
82157: PPUSH
82158: LD_VAR 0 3
82162: PPUSH
82163: CALL_OW 3
82167: ST_TO_ADDR
82168: GO 82145
82170: POP
82171: POP
// end ;
82172: LD_VAR 0 3
82176: RET
// export function ComExit ( unit ) ; var tmp ; begin
82177: LD_INT 0
82179: PPUSH
82180: PPUSH
// if not IsInUnit ( unit ) then
82181: LD_VAR 0 1
82185: PPUSH
82186: CALL_OW 310
82190: NOT
82191: IFFALSE 82195
// exit ;
82193: GO 82255
// tmp := IsInUnit ( unit ) ;
82195: LD_ADDR_VAR 0 3
82199: PUSH
82200: LD_VAR 0 1
82204: PPUSH
82205: CALL_OW 310
82209: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
82210: LD_VAR 0 3
82214: PPUSH
82215: CALL_OW 247
82219: PUSH
82220: LD_INT 2
82222: EQUAL
82223: IFFALSE 82236
// ComExitVehicle ( unit ) else
82225: LD_VAR 0 1
82229: PPUSH
82230: CALL_OW 121
82234: GO 82245
// ComExitBuilding ( unit ) ;
82236: LD_VAR 0 1
82240: PPUSH
82241: CALL_OW 122
// result := tmp ;
82245: LD_ADDR_VAR 0 2
82249: PUSH
82250: LD_VAR 0 3
82254: ST_TO_ADDR
// end ;
82255: LD_VAR 0 2
82259: RET
// export function ComExitAll ( units ) ; var i ; begin
82260: LD_INT 0
82262: PPUSH
82263: PPUSH
// if not units then
82264: LD_VAR 0 1
82268: NOT
82269: IFFALSE 82273
// exit ;
82271: GO 82299
// for i in units do
82273: LD_ADDR_VAR 0 3
82277: PUSH
82278: LD_VAR 0 1
82282: PUSH
82283: FOR_IN
82284: IFFALSE 82297
// ComExit ( i ) ;
82286: LD_VAR 0 3
82290: PPUSH
82291: CALL 82177 0 1
82295: GO 82283
82297: POP
82298: POP
// end ;
82299: LD_VAR 0 2
82303: RET
// export function ResetHc ; begin
82304: LD_INT 0
82306: PPUSH
// InitHc ;
82307: CALL_OW 19
// hc_importance := 0 ;
82311: LD_ADDR_OWVAR 32
82315: PUSH
82316: LD_INT 0
82318: ST_TO_ADDR
// end ;
82319: LD_VAR 0 1
82323: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
82324: LD_INT 0
82326: PPUSH
82327: PPUSH
82328: PPUSH
// _x := ( x1 + x2 ) div 2 ;
82329: LD_ADDR_VAR 0 6
82333: PUSH
82334: LD_VAR 0 1
82338: PUSH
82339: LD_VAR 0 3
82343: PLUS
82344: PUSH
82345: LD_INT 2
82347: DIV
82348: ST_TO_ADDR
// if _x < 0 then
82349: LD_VAR 0 6
82353: PUSH
82354: LD_INT 0
82356: LESS
82357: IFFALSE 82374
// _x := _x * - 1 ;
82359: LD_ADDR_VAR 0 6
82363: PUSH
82364: LD_VAR 0 6
82368: PUSH
82369: LD_INT 1
82371: NEG
82372: MUL
82373: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
82374: LD_ADDR_VAR 0 7
82378: PUSH
82379: LD_VAR 0 2
82383: PUSH
82384: LD_VAR 0 4
82388: PLUS
82389: PUSH
82390: LD_INT 2
82392: DIV
82393: ST_TO_ADDR
// if _y < 0 then
82394: LD_VAR 0 7
82398: PUSH
82399: LD_INT 0
82401: LESS
82402: IFFALSE 82419
// _y := _y * - 1 ;
82404: LD_ADDR_VAR 0 7
82408: PUSH
82409: LD_VAR 0 7
82413: PUSH
82414: LD_INT 1
82416: NEG
82417: MUL
82418: ST_TO_ADDR
// result := [ _x , _y ] ;
82419: LD_ADDR_VAR 0 5
82423: PUSH
82424: LD_VAR 0 6
82428: PUSH
82429: LD_VAR 0 7
82433: PUSH
82434: EMPTY
82435: LIST
82436: LIST
82437: ST_TO_ADDR
// end ;
82438: LD_VAR 0 5
82442: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
82443: LD_INT 0
82445: PPUSH
82446: PPUSH
82447: PPUSH
82448: PPUSH
// task := GetTaskList ( unit ) ;
82449: LD_ADDR_VAR 0 7
82453: PUSH
82454: LD_VAR 0 1
82458: PPUSH
82459: CALL_OW 437
82463: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
82464: LD_VAR 0 7
82468: NOT
82469: PUSH
82470: LD_VAR 0 1
82474: PPUSH
82475: LD_VAR 0 2
82479: PPUSH
82480: CALL_OW 308
82484: NOT
82485: AND
82486: IFFALSE 82490
// exit ;
82488: GO 82608
// if IsInArea ( unit , area ) then
82490: LD_VAR 0 1
82494: PPUSH
82495: LD_VAR 0 2
82499: PPUSH
82500: CALL_OW 308
82504: IFFALSE 82522
// begin ComMoveToArea ( unit , goAway ) ;
82506: LD_VAR 0 1
82510: PPUSH
82511: LD_VAR 0 3
82515: PPUSH
82516: CALL_OW 113
// exit ;
82520: GO 82608
// end ; if task [ 1 ] [ 1 ] <> M then
82522: LD_VAR 0 7
82526: PUSH
82527: LD_INT 1
82529: ARRAY
82530: PUSH
82531: LD_INT 1
82533: ARRAY
82534: PUSH
82535: LD_STRING M
82537: NONEQUAL
82538: IFFALSE 82542
// exit ;
82540: GO 82608
// x := task [ 1 ] [ 2 ] ;
82542: LD_ADDR_VAR 0 5
82546: PUSH
82547: LD_VAR 0 7
82551: PUSH
82552: LD_INT 1
82554: ARRAY
82555: PUSH
82556: LD_INT 2
82558: ARRAY
82559: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82560: LD_ADDR_VAR 0 6
82564: PUSH
82565: LD_VAR 0 7
82569: PUSH
82570: LD_INT 1
82572: ARRAY
82573: PUSH
82574: LD_INT 3
82576: ARRAY
82577: ST_TO_ADDR
// if InArea ( x , y , area ) then
82578: LD_VAR 0 5
82582: PPUSH
82583: LD_VAR 0 6
82587: PPUSH
82588: LD_VAR 0 2
82592: PPUSH
82593: CALL_OW 309
82597: IFFALSE 82608
// ComStop ( unit ) ;
82599: LD_VAR 0 1
82603: PPUSH
82604: CALL_OW 141
// end ;
82608: LD_VAR 0 4
82612: RET
// export function Abs ( value ) ; begin
82613: LD_INT 0
82615: PPUSH
// result := value ;
82616: LD_ADDR_VAR 0 2
82620: PUSH
82621: LD_VAR 0 1
82625: ST_TO_ADDR
// if value < 0 then
82626: LD_VAR 0 1
82630: PUSH
82631: LD_INT 0
82633: LESS
82634: IFFALSE 82651
// result := value * - 1 ;
82636: LD_ADDR_VAR 0 2
82640: PUSH
82641: LD_VAR 0 1
82645: PUSH
82646: LD_INT 1
82648: NEG
82649: MUL
82650: ST_TO_ADDR
// end ;
82651: LD_VAR 0 2
82655: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82656: LD_INT 0
82658: PPUSH
82659: PPUSH
82660: PPUSH
82661: PPUSH
82662: PPUSH
82663: PPUSH
82664: PPUSH
82665: PPUSH
// if not unit or not building then
82666: LD_VAR 0 1
82670: NOT
82671: PUSH
82672: LD_VAR 0 2
82676: NOT
82677: OR
82678: IFFALSE 82682
// exit ;
82680: GO 82908
// x := GetX ( building ) ;
82682: LD_ADDR_VAR 0 4
82686: PUSH
82687: LD_VAR 0 2
82691: PPUSH
82692: CALL_OW 250
82696: ST_TO_ADDR
// y := GetY ( building ) ;
82697: LD_ADDR_VAR 0 6
82701: PUSH
82702: LD_VAR 0 2
82706: PPUSH
82707: CALL_OW 251
82711: ST_TO_ADDR
// d := GetDir ( building ) ;
82712: LD_ADDR_VAR 0 8
82716: PUSH
82717: LD_VAR 0 2
82721: PPUSH
82722: CALL_OW 254
82726: ST_TO_ADDR
// r := 4 ;
82727: LD_ADDR_VAR 0 9
82731: PUSH
82732: LD_INT 4
82734: ST_TO_ADDR
// for i := 1 to 5 do
82735: LD_ADDR_VAR 0 10
82739: PUSH
82740: DOUBLE
82741: LD_INT 1
82743: DEC
82744: ST_TO_ADDR
82745: LD_INT 5
82747: PUSH
82748: FOR_TO
82749: IFFALSE 82906
// begin _x := ShiftX ( x , d , r + i ) ;
82751: LD_ADDR_VAR 0 5
82755: PUSH
82756: LD_VAR 0 4
82760: PPUSH
82761: LD_VAR 0 8
82765: PPUSH
82766: LD_VAR 0 9
82770: PUSH
82771: LD_VAR 0 10
82775: PLUS
82776: PPUSH
82777: CALL_OW 272
82781: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82782: LD_ADDR_VAR 0 7
82786: PUSH
82787: LD_VAR 0 6
82791: PPUSH
82792: LD_VAR 0 8
82796: PPUSH
82797: LD_VAR 0 9
82801: PUSH
82802: LD_VAR 0 10
82806: PLUS
82807: PPUSH
82808: CALL_OW 273
82812: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82813: LD_VAR 0 5
82817: PPUSH
82818: LD_VAR 0 7
82822: PPUSH
82823: CALL_OW 488
82827: PUSH
82828: LD_VAR 0 5
82832: PPUSH
82833: LD_VAR 0 7
82837: PPUSH
82838: CALL_OW 428
82842: PPUSH
82843: CALL_OW 247
82847: PUSH
82848: LD_INT 3
82850: PUSH
82851: LD_INT 2
82853: PUSH
82854: EMPTY
82855: LIST
82856: LIST
82857: IN
82858: NOT
82859: AND
82860: IFFALSE 82904
// begin ComMoveXY ( unit , _x , _y ) ;
82862: LD_VAR 0 1
82866: PPUSH
82867: LD_VAR 0 5
82871: PPUSH
82872: LD_VAR 0 7
82876: PPUSH
82877: CALL_OW 111
// result := [ _x , _y ] ;
82881: LD_ADDR_VAR 0 3
82885: PUSH
82886: LD_VAR 0 5
82890: PUSH
82891: LD_VAR 0 7
82895: PUSH
82896: EMPTY
82897: LIST
82898: LIST
82899: ST_TO_ADDR
// exit ;
82900: POP
82901: POP
82902: GO 82908
// end ; end ;
82904: GO 82748
82906: POP
82907: POP
// end ;
82908: LD_VAR 0 3
82912: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82913: LD_INT 0
82915: PPUSH
82916: PPUSH
82917: PPUSH
// result := 0 ;
82918: LD_ADDR_VAR 0 3
82922: PUSH
82923: LD_INT 0
82925: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82926: LD_VAR 0 1
82930: PUSH
82931: LD_INT 0
82933: LESS
82934: PUSH
82935: LD_VAR 0 1
82939: PUSH
82940: LD_INT 8
82942: GREATER
82943: OR
82944: PUSH
82945: LD_VAR 0 2
82949: PUSH
82950: LD_INT 0
82952: LESS
82953: OR
82954: PUSH
82955: LD_VAR 0 2
82959: PUSH
82960: LD_INT 8
82962: GREATER
82963: OR
82964: IFFALSE 82968
// exit ;
82966: GO 83043
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82968: LD_ADDR_VAR 0 4
82972: PUSH
82973: LD_INT 22
82975: PUSH
82976: LD_VAR 0 2
82980: PUSH
82981: EMPTY
82982: LIST
82983: LIST
82984: PPUSH
82985: CALL_OW 69
82989: PUSH
82990: FOR_IN
82991: IFFALSE 83041
// begin un := UnitShoot ( i ) ;
82993: LD_ADDR_VAR 0 5
82997: PUSH
82998: LD_VAR 0 4
83002: PPUSH
83003: CALL_OW 504
83007: ST_TO_ADDR
// if GetSide ( un ) = side1 then
83008: LD_VAR 0 5
83012: PPUSH
83013: CALL_OW 255
83017: PUSH
83018: LD_VAR 0 1
83022: EQUAL
83023: IFFALSE 83039
// begin result := un ;
83025: LD_ADDR_VAR 0 3
83029: PUSH
83030: LD_VAR 0 5
83034: ST_TO_ADDR
// exit ;
83035: POP
83036: POP
83037: GO 83043
// end ; end ;
83039: GO 82990
83041: POP
83042: POP
// end ;
83043: LD_VAR 0 3
83047: RET
// export function GetCargoBay ( units ) ; begin
83048: LD_INT 0
83050: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
83051: LD_ADDR_VAR 0 2
83055: PUSH
83056: LD_VAR 0 1
83060: PPUSH
83061: LD_INT 2
83063: PUSH
83064: LD_INT 34
83066: PUSH
83067: LD_INT 12
83069: PUSH
83070: EMPTY
83071: LIST
83072: LIST
83073: PUSH
83074: LD_INT 34
83076: PUSH
83077: LD_INT 51
83079: PUSH
83080: EMPTY
83081: LIST
83082: LIST
83083: PUSH
83084: LD_INT 34
83086: PUSH
83087: LD_INT 32
83089: PUSH
83090: EMPTY
83091: LIST
83092: LIST
83093: PUSH
83094: LD_INT 34
83096: PUSH
83097: LD_EXP 49
83101: PUSH
83102: EMPTY
83103: LIST
83104: LIST
83105: PUSH
83106: EMPTY
83107: LIST
83108: LIST
83109: LIST
83110: LIST
83111: LIST
83112: PPUSH
83113: CALL_OW 72
83117: ST_TO_ADDR
// end ;
83118: LD_VAR 0 2
83122: RET
// export function Negate ( value ) ; begin
83123: LD_INT 0
83125: PPUSH
// result := not value ;
83126: LD_ADDR_VAR 0 2
83130: PUSH
83131: LD_VAR 0 1
83135: NOT
83136: ST_TO_ADDR
// end ;
83137: LD_VAR 0 2
83141: RET
// export function Inc ( value ) ; begin
83142: LD_INT 0
83144: PPUSH
// result := value + 1 ;
83145: LD_ADDR_VAR 0 2
83149: PUSH
83150: LD_VAR 0 1
83154: PUSH
83155: LD_INT 1
83157: PLUS
83158: ST_TO_ADDR
// end ;
83159: LD_VAR 0 2
83163: RET
// export function Dec ( value ) ; begin
83164: LD_INT 0
83166: PPUSH
// result := value - 1 ;
83167: LD_ADDR_VAR 0 2
83171: PUSH
83172: LD_VAR 0 1
83176: PUSH
83177: LD_INT 1
83179: MINUS
83180: ST_TO_ADDR
// end ;
83181: LD_VAR 0 2
83185: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
83186: LD_INT 0
83188: PPUSH
83189: PPUSH
83190: PPUSH
83191: PPUSH
83192: PPUSH
83193: PPUSH
83194: PPUSH
83195: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
83196: LD_VAR 0 1
83200: PPUSH
83201: LD_VAR 0 2
83205: PPUSH
83206: CALL_OW 488
83210: NOT
83211: PUSH
83212: LD_VAR 0 3
83216: PPUSH
83217: LD_VAR 0 4
83221: PPUSH
83222: CALL_OW 488
83226: NOT
83227: OR
83228: IFFALSE 83241
// begin result := - 1 ;
83230: LD_ADDR_VAR 0 5
83234: PUSH
83235: LD_INT 1
83237: NEG
83238: ST_TO_ADDR
// exit ;
83239: GO 83476
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
83241: LD_ADDR_VAR 0 12
83245: PUSH
83246: LD_VAR 0 1
83250: PPUSH
83251: LD_VAR 0 2
83255: PPUSH
83256: LD_VAR 0 3
83260: PPUSH
83261: LD_VAR 0 4
83265: PPUSH
83266: CALL 82324 0 4
83270: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
83271: LD_ADDR_VAR 0 11
83275: PUSH
83276: LD_VAR 0 1
83280: PPUSH
83281: LD_VAR 0 2
83285: PPUSH
83286: LD_VAR 0 12
83290: PUSH
83291: LD_INT 1
83293: ARRAY
83294: PPUSH
83295: LD_VAR 0 12
83299: PUSH
83300: LD_INT 2
83302: ARRAY
83303: PPUSH
83304: CALL_OW 298
83308: ST_TO_ADDR
// distance := 9999 ;
83309: LD_ADDR_VAR 0 10
83313: PUSH
83314: LD_INT 9999
83316: ST_TO_ADDR
// for i := 0 to 5 do
83317: LD_ADDR_VAR 0 6
83321: PUSH
83322: DOUBLE
83323: LD_INT 0
83325: DEC
83326: ST_TO_ADDR
83327: LD_INT 5
83329: PUSH
83330: FOR_TO
83331: IFFALSE 83474
// begin _x := ShiftX ( x1 , i , centerDist ) ;
83333: LD_ADDR_VAR 0 7
83337: PUSH
83338: LD_VAR 0 1
83342: PPUSH
83343: LD_VAR 0 6
83347: PPUSH
83348: LD_VAR 0 11
83352: PPUSH
83353: CALL_OW 272
83357: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
83358: LD_ADDR_VAR 0 8
83362: PUSH
83363: LD_VAR 0 2
83367: PPUSH
83368: LD_VAR 0 6
83372: PPUSH
83373: LD_VAR 0 11
83377: PPUSH
83378: CALL_OW 273
83382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83383: LD_VAR 0 7
83387: PPUSH
83388: LD_VAR 0 8
83392: PPUSH
83393: CALL_OW 488
83397: NOT
83398: IFFALSE 83402
// continue ;
83400: GO 83330
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
83402: LD_ADDR_VAR 0 9
83406: PUSH
83407: LD_VAR 0 12
83411: PUSH
83412: LD_INT 1
83414: ARRAY
83415: PPUSH
83416: LD_VAR 0 12
83420: PUSH
83421: LD_INT 2
83423: ARRAY
83424: PPUSH
83425: LD_VAR 0 7
83429: PPUSH
83430: LD_VAR 0 8
83434: PPUSH
83435: CALL_OW 298
83439: ST_TO_ADDR
// if tmp < distance then
83440: LD_VAR 0 9
83444: PUSH
83445: LD_VAR 0 10
83449: LESS
83450: IFFALSE 83472
// begin result := i ;
83452: LD_ADDR_VAR 0 5
83456: PUSH
83457: LD_VAR 0 6
83461: ST_TO_ADDR
// distance := tmp ;
83462: LD_ADDR_VAR 0 10
83466: PUSH
83467: LD_VAR 0 9
83471: ST_TO_ADDR
// end ; end ;
83472: GO 83330
83474: POP
83475: POP
// end ;
83476: LD_VAR 0 5
83480: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83481: LD_INT 0
83483: PPUSH
83484: PPUSH
// if not driver or not IsInUnit ( driver ) then
83485: LD_VAR 0 1
83489: NOT
83490: PUSH
83491: LD_VAR 0 1
83495: PPUSH
83496: CALL_OW 310
83500: NOT
83501: OR
83502: IFFALSE 83506
// exit ;
83504: GO 83596
// vehicle := IsInUnit ( driver ) ;
83506: LD_ADDR_VAR 0 3
83510: PUSH
83511: LD_VAR 0 1
83515: PPUSH
83516: CALL_OW 310
83520: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83521: LD_VAR 0 1
83525: PPUSH
83526: LD_STRING \
83528: PUSH
83529: LD_INT 0
83531: PUSH
83532: LD_INT 0
83534: PUSH
83535: LD_INT 0
83537: PUSH
83538: LD_INT 0
83540: PUSH
83541: LD_INT 0
83543: PUSH
83544: LD_INT 0
83546: PUSH
83547: EMPTY
83548: LIST
83549: LIST
83550: LIST
83551: LIST
83552: LIST
83553: LIST
83554: LIST
83555: PUSH
83556: LD_STRING E
83558: PUSH
83559: LD_INT 0
83561: PUSH
83562: LD_INT 0
83564: PUSH
83565: LD_VAR 0 3
83569: PUSH
83570: LD_INT 0
83572: PUSH
83573: LD_INT 0
83575: PUSH
83576: LD_INT 0
83578: PUSH
83579: EMPTY
83580: LIST
83581: LIST
83582: LIST
83583: LIST
83584: LIST
83585: LIST
83586: LIST
83587: PUSH
83588: EMPTY
83589: LIST
83590: LIST
83591: PPUSH
83592: CALL_OW 446
// end ;
83596: LD_VAR 0 2
83600: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83601: LD_INT 0
83603: PPUSH
83604: PPUSH
// if not driver or not IsInUnit ( driver ) then
83605: LD_VAR 0 1
83609: NOT
83610: PUSH
83611: LD_VAR 0 1
83615: PPUSH
83616: CALL_OW 310
83620: NOT
83621: OR
83622: IFFALSE 83626
// exit ;
83624: GO 83716
// vehicle := IsInUnit ( driver ) ;
83626: LD_ADDR_VAR 0 3
83630: PUSH
83631: LD_VAR 0 1
83635: PPUSH
83636: CALL_OW 310
83640: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83641: LD_VAR 0 1
83645: PPUSH
83646: LD_STRING \
83648: PUSH
83649: LD_INT 0
83651: PUSH
83652: LD_INT 0
83654: PUSH
83655: LD_INT 0
83657: PUSH
83658: LD_INT 0
83660: PUSH
83661: LD_INT 0
83663: PUSH
83664: LD_INT 0
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: LIST
83671: LIST
83672: LIST
83673: LIST
83674: LIST
83675: PUSH
83676: LD_STRING E
83678: PUSH
83679: LD_INT 0
83681: PUSH
83682: LD_INT 0
83684: PUSH
83685: LD_VAR 0 3
83689: PUSH
83690: LD_INT 0
83692: PUSH
83693: LD_INT 0
83695: PUSH
83696: LD_INT 0
83698: PUSH
83699: EMPTY
83700: LIST
83701: LIST
83702: LIST
83703: LIST
83704: LIST
83705: LIST
83706: LIST
83707: PUSH
83708: EMPTY
83709: LIST
83710: LIST
83711: PPUSH
83712: CALL_OW 447
// end ;
83716: LD_VAR 0 2
83720: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83721: LD_INT 0
83723: PPUSH
83724: PPUSH
83725: PPUSH
// tmp := [ ] ;
83726: LD_ADDR_VAR 0 5
83730: PUSH
83731: EMPTY
83732: ST_TO_ADDR
// for i in units do
83733: LD_ADDR_VAR 0 4
83737: PUSH
83738: LD_VAR 0 1
83742: PUSH
83743: FOR_IN
83744: IFFALSE 83782
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83746: LD_ADDR_VAR 0 5
83750: PUSH
83751: LD_VAR 0 5
83755: PPUSH
83756: LD_VAR 0 5
83760: PUSH
83761: LD_INT 1
83763: PLUS
83764: PPUSH
83765: LD_VAR 0 4
83769: PPUSH
83770: CALL_OW 256
83774: PPUSH
83775: CALL_OW 2
83779: ST_TO_ADDR
83780: GO 83743
83782: POP
83783: POP
// if not tmp then
83784: LD_VAR 0 5
83788: NOT
83789: IFFALSE 83793
// exit ;
83791: GO 83841
// if asc then
83793: LD_VAR 0 2
83797: IFFALSE 83821
// result := SortListByListAsc ( units , tmp ) else
83799: LD_ADDR_VAR 0 3
83803: PUSH
83804: LD_VAR 0 1
83808: PPUSH
83809: LD_VAR 0 5
83813: PPUSH
83814: CALL_OW 76
83818: ST_TO_ADDR
83819: GO 83841
// result := SortListByListDesc ( units , tmp ) ;
83821: LD_ADDR_VAR 0 3
83825: PUSH
83826: LD_VAR 0 1
83830: PPUSH
83831: LD_VAR 0 5
83835: PPUSH
83836: CALL_OW 77
83840: ST_TO_ADDR
// end ;
83841: LD_VAR 0 3
83845: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83846: LD_INT 0
83848: PPUSH
83849: PPUSH
// task := GetTaskList ( mech ) ;
83850: LD_ADDR_VAR 0 4
83854: PUSH
83855: LD_VAR 0 1
83859: PPUSH
83860: CALL_OW 437
83864: ST_TO_ADDR
// if not task then
83865: LD_VAR 0 4
83869: NOT
83870: IFFALSE 83874
// exit ;
83872: GO 83916
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83874: LD_ADDR_VAR 0 3
83878: PUSH
83879: LD_VAR 0 4
83883: PUSH
83884: LD_INT 1
83886: ARRAY
83887: PUSH
83888: LD_INT 1
83890: ARRAY
83891: PUSH
83892: LD_STRING r
83894: EQUAL
83895: PUSH
83896: LD_VAR 0 4
83900: PUSH
83901: LD_INT 1
83903: ARRAY
83904: PUSH
83905: LD_INT 4
83907: ARRAY
83908: PUSH
83909: LD_VAR 0 2
83913: EQUAL
83914: AND
83915: ST_TO_ADDR
// end ;
83916: LD_VAR 0 3
83920: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83921: LD_INT 0
83923: PPUSH
// SetDir ( unit , d ) ;
83924: LD_VAR 0 1
83928: PPUSH
83929: LD_VAR 0 4
83933: PPUSH
83934: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83938: LD_VAR 0 1
83942: PPUSH
83943: LD_VAR 0 2
83947: PPUSH
83948: LD_VAR 0 3
83952: PPUSH
83953: LD_VAR 0 5
83957: PPUSH
83958: CALL_OW 48
// end ;
83962: LD_VAR 0 6
83966: RET
// export function ToNaturalNumber ( number ) ; begin
83967: LD_INT 0
83969: PPUSH
// result := number div 1 ;
83970: LD_ADDR_VAR 0 2
83974: PUSH
83975: LD_VAR 0 1
83979: PUSH
83980: LD_INT 1
83982: DIV
83983: ST_TO_ADDR
// if number < 0 then
83984: LD_VAR 0 1
83988: PUSH
83989: LD_INT 0
83991: LESS
83992: IFFALSE 84002
// result := 0 ;
83994: LD_ADDR_VAR 0 2
83998: PUSH
83999: LD_INT 0
84001: ST_TO_ADDR
// end ;
84002: LD_VAR 0 2
84006: RET
// export function SortByClass ( units , class ) ; var un ; begin
84007: LD_INT 0
84009: PPUSH
84010: PPUSH
// if not units or not class then
84011: LD_VAR 0 1
84015: NOT
84016: PUSH
84017: LD_VAR 0 2
84021: NOT
84022: OR
84023: IFFALSE 84027
// exit ;
84025: GO 84122
// result := [ ] ;
84027: LD_ADDR_VAR 0 3
84031: PUSH
84032: EMPTY
84033: ST_TO_ADDR
// for un in units do
84034: LD_ADDR_VAR 0 4
84038: PUSH
84039: LD_VAR 0 1
84043: PUSH
84044: FOR_IN
84045: IFFALSE 84120
// if GetClass ( un ) = class then
84047: LD_VAR 0 4
84051: PPUSH
84052: CALL_OW 257
84056: PUSH
84057: LD_VAR 0 2
84061: EQUAL
84062: IFFALSE 84089
// result := Insert ( result , 1 , un ) else
84064: LD_ADDR_VAR 0 3
84068: PUSH
84069: LD_VAR 0 3
84073: PPUSH
84074: LD_INT 1
84076: PPUSH
84077: LD_VAR 0 4
84081: PPUSH
84082: CALL_OW 2
84086: ST_TO_ADDR
84087: GO 84118
// result := Replace ( result , result + 1 , un ) ;
84089: LD_ADDR_VAR 0 3
84093: PUSH
84094: LD_VAR 0 3
84098: PPUSH
84099: LD_VAR 0 3
84103: PUSH
84104: LD_INT 1
84106: PLUS
84107: PPUSH
84108: LD_VAR 0 4
84112: PPUSH
84113: CALL_OW 1
84117: ST_TO_ADDR
84118: GO 84044
84120: POP
84121: POP
// end ;
84122: LD_VAR 0 3
84126: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
84127: LD_INT 0
84129: PPUSH
84130: PPUSH
84131: PPUSH
84132: PPUSH
84133: PPUSH
84134: PPUSH
84135: PPUSH
// result := [ ] ;
84136: LD_ADDR_VAR 0 4
84140: PUSH
84141: EMPTY
84142: ST_TO_ADDR
// if x - r < 0 then
84143: LD_VAR 0 1
84147: PUSH
84148: LD_VAR 0 3
84152: MINUS
84153: PUSH
84154: LD_INT 0
84156: LESS
84157: IFFALSE 84169
// min_x := 0 else
84159: LD_ADDR_VAR 0 8
84163: PUSH
84164: LD_INT 0
84166: ST_TO_ADDR
84167: GO 84185
// min_x := x - r ;
84169: LD_ADDR_VAR 0 8
84173: PUSH
84174: LD_VAR 0 1
84178: PUSH
84179: LD_VAR 0 3
84183: MINUS
84184: ST_TO_ADDR
// if y - r < 0 then
84185: LD_VAR 0 2
84189: PUSH
84190: LD_VAR 0 3
84194: MINUS
84195: PUSH
84196: LD_INT 0
84198: LESS
84199: IFFALSE 84211
// min_y := 0 else
84201: LD_ADDR_VAR 0 7
84205: PUSH
84206: LD_INT 0
84208: ST_TO_ADDR
84209: GO 84227
// min_y := y - r ;
84211: LD_ADDR_VAR 0 7
84215: PUSH
84216: LD_VAR 0 2
84220: PUSH
84221: LD_VAR 0 3
84225: MINUS
84226: ST_TO_ADDR
// max_x := x + r ;
84227: LD_ADDR_VAR 0 9
84231: PUSH
84232: LD_VAR 0 1
84236: PUSH
84237: LD_VAR 0 3
84241: PLUS
84242: ST_TO_ADDR
// max_y := y + r ;
84243: LD_ADDR_VAR 0 10
84247: PUSH
84248: LD_VAR 0 2
84252: PUSH
84253: LD_VAR 0 3
84257: PLUS
84258: ST_TO_ADDR
// for _x = min_x to max_x do
84259: LD_ADDR_VAR 0 5
84263: PUSH
84264: DOUBLE
84265: LD_VAR 0 8
84269: DEC
84270: ST_TO_ADDR
84271: LD_VAR 0 9
84275: PUSH
84276: FOR_TO
84277: IFFALSE 84378
// for _y = min_y to max_y do
84279: LD_ADDR_VAR 0 6
84283: PUSH
84284: DOUBLE
84285: LD_VAR 0 7
84289: DEC
84290: ST_TO_ADDR
84291: LD_VAR 0 10
84295: PUSH
84296: FOR_TO
84297: IFFALSE 84374
// begin if not ValidHex ( _x , _y ) then
84299: LD_VAR 0 5
84303: PPUSH
84304: LD_VAR 0 6
84308: PPUSH
84309: CALL_OW 488
84313: NOT
84314: IFFALSE 84318
// continue ;
84316: GO 84296
// if GetResourceTypeXY ( _x , _y ) then
84318: LD_VAR 0 5
84322: PPUSH
84323: LD_VAR 0 6
84327: PPUSH
84328: CALL_OW 283
84332: IFFALSE 84372
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84334: LD_ADDR_VAR 0 4
84338: PUSH
84339: LD_VAR 0 4
84343: PPUSH
84344: LD_VAR 0 4
84348: PUSH
84349: LD_INT 1
84351: PLUS
84352: PPUSH
84353: LD_VAR 0 5
84357: PUSH
84358: LD_VAR 0 6
84362: PUSH
84363: EMPTY
84364: LIST
84365: LIST
84366: PPUSH
84367: CALL_OW 1
84371: ST_TO_ADDR
// end ;
84372: GO 84296
84374: POP
84375: POP
84376: GO 84276
84378: POP
84379: POP
// end ;
84380: LD_VAR 0 4
84384: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84385: LD_INT 0
84387: PPUSH
84388: PPUSH
84389: PPUSH
84390: PPUSH
84391: PPUSH
84392: PPUSH
84393: PPUSH
84394: PPUSH
// if not units then
84395: LD_VAR 0 1
84399: NOT
84400: IFFALSE 84404
// exit ;
84402: GO 84829
// result := UnitFilter ( units , [ f_ok ] ) ;
84404: LD_ADDR_VAR 0 3
84408: PUSH
84409: LD_VAR 0 1
84413: PPUSH
84414: LD_INT 50
84416: PUSH
84417: EMPTY
84418: LIST
84419: PPUSH
84420: CALL_OW 72
84424: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84425: LD_ADDR_VAR 0 8
84429: PUSH
84430: LD_VAR 0 1
84434: PUSH
84435: LD_INT 1
84437: ARRAY
84438: PPUSH
84439: CALL_OW 255
84443: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
84444: LD_ADDR_VAR 0 10
84448: PUSH
84449: LD_INT 29
84451: PUSH
84452: LD_EXP 52
84456: PUSH
84457: EMPTY
84458: LIST
84459: LIST
84460: ST_TO_ADDR
// if not result then
84461: LD_VAR 0 3
84465: NOT
84466: IFFALSE 84470
// exit ;
84468: GO 84829
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84470: LD_ADDR_VAR 0 5
84474: PUSH
84475: LD_INT 81
84477: PUSH
84478: LD_VAR 0 8
84482: PUSH
84483: EMPTY
84484: LIST
84485: LIST
84486: PPUSH
84487: CALL_OW 69
84491: ST_TO_ADDR
// for i in result do
84492: LD_ADDR_VAR 0 4
84496: PUSH
84497: LD_VAR 0 3
84501: PUSH
84502: FOR_IN
84503: IFFALSE 84827
// begin tag := GetTag ( i ) + 1 ;
84505: LD_ADDR_VAR 0 9
84509: PUSH
84510: LD_VAR 0 4
84514: PPUSH
84515: CALL_OW 110
84519: PUSH
84520: LD_INT 1
84522: PLUS
84523: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
84524: LD_ADDR_VAR 0 7
84528: PUSH
84529: LD_VAR 0 4
84533: PPUSH
84534: CALL_OW 250
84538: PPUSH
84539: LD_VAR 0 4
84543: PPUSH
84544: CALL_OW 251
84548: PPUSH
84549: LD_INT 6
84551: PPUSH
84552: CALL 84127 0 3
84556: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
84557: LD_VAR 0 7
84561: PUSH
84562: LD_VAR 0 4
84566: PPUSH
84567: CALL_OW 264
84571: PUSH
84572: LD_VAR 0 10
84576: IN
84577: NOT
84578: AND
84579: IFFALSE 84618
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84581: LD_VAR 0 4
84585: PPUSH
84586: LD_VAR 0 7
84590: PUSH
84591: LD_INT 1
84593: ARRAY
84594: PUSH
84595: LD_INT 1
84597: ARRAY
84598: PPUSH
84599: LD_VAR 0 7
84603: PUSH
84604: LD_INT 1
84606: ARRAY
84607: PUSH
84608: LD_INT 2
84610: ARRAY
84611: PPUSH
84612: CALL_OW 116
84616: GO 84825
// if path > tag then
84618: LD_VAR 0 2
84622: PUSH
84623: LD_VAR 0 9
84627: GREATER
84628: IFFALSE 84795
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
84630: LD_ADDR_VAR 0 6
84634: PUSH
84635: LD_VAR 0 5
84639: PPUSH
84640: LD_INT 91
84642: PUSH
84643: LD_VAR 0 4
84647: PUSH
84648: LD_INT 12
84650: PUSH
84651: EMPTY
84652: LIST
84653: LIST
84654: LIST
84655: PPUSH
84656: CALL_OW 72
84660: ST_TO_ADDR
// if nearEnemy then
84661: LD_VAR 0 6
84665: IFFALSE 84693
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84667: LD_VAR 0 4
84671: PPUSH
84672: LD_VAR 0 6
84676: PPUSH
84677: LD_VAR 0 4
84681: PPUSH
84682: CALL_OW 74
84686: PPUSH
84687: CALL_OW 115
84691: GO 84793
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84693: LD_VAR 0 4
84697: PPUSH
84698: LD_VAR 0 2
84702: PUSH
84703: LD_VAR 0 9
84707: ARRAY
84708: PUSH
84709: LD_INT 1
84711: ARRAY
84712: PPUSH
84713: LD_VAR 0 2
84717: PUSH
84718: LD_VAR 0 9
84722: ARRAY
84723: PUSH
84724: LD_INT 2
84726: ARRAY
84727: PPUSH
84728: CALL_OW 297
84732: PUSH
84733: LD_INT 6
84735: GREATER
84736: IFFALSE 84779
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84738: LD_VAR 0 4
84742: PPUSH
84743: LD_VAR 0 2
84747: PUSH
84748: LD_VAR 0 9
84752: ARRAY
84753: PUSH
84754: LD_INT 1
84756: ARRAY
84757: PPUSH
84758: LD_VAR 0 2
84762: PUSH
84763: LD_VAR 0 9
84767: ARRAY
84768: PUSH
84769: LD_INT 2
84771: ARRAY
84772: PPUSH
84773: CALL_OW 114
84777: GO 84793
// SetTag ( i , tag ) ;
84779: LD_VAR 0 4
84783: PPUSH
84784: LD_VAR 0 9
84788: PPUSH
84789: CALL_OW 109
// end else
84793: GO 84825
// if enemy then
84795: LD_VAR 0 5
84799: IFFALSE 84825
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84801: LD_VAR 0 4
84805: PPUSH
84806: LD_VAR 0 5
84810: PPUSH
84811: LD_VAR 0 4
84815: PPUSH
84816: CALL_OW 74
84820: PPUSH
84821: CALL_OW 115
// end ;
84825: GO 84502
84827: POP
84828: POP
// end ;
84829: LD_VAR 0 3
84833: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84834: LD_INT 0
84836: PPUSH
84837: PPUSH
84838: PPUSH
// if not unit or IsInUnit ( unit ) then
84839: LD_VAR 0 1
84843: NOT
84844: PUSH
84845: LD_VAR 0 1
84849: PPUSH
84850: CALL_OW 310
84854: OR
84855: IFFALSE 84859
// exit ;
84857: GO 84950
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84859: LD_ADDR_VAR 0 4
84863: PUSH
84864: LD_VAR 0 1
84868: PPUSH
84869: CALL_OW 250
84873: PPUSH
84874: LD_VAR 0 2
84878: PPUSH
84879: LD_INT 1
84881: PPUSH
84882: CALL_OW 272
84886: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84887: LD_ADDR_VAR 0 5
84891: PUSH
84892: LD_VAR 0 1
84896: PPUSH
84897: CALL_OW 251
84901: PPUSH
84902: LD_VAR 0 2
84906: PPUSH
84907: LD_INT 1
84909: PPUSH
84910: CALL_OW 273
84914: ST_TO_ADDR
// if ValidHex ( x , y ) then
84915: LD_VAR 0 4
84919: PPUSH
84920: LD_VAR 0 5
84924: PPUSH
84925: CALL_OW 488
84929: IFFALSE 84950
// ComTurnXY ( unit , x , y ) ;
84931: LD_VAR 0 1
84935: PPUSH
84936: LD_VAR 0 4
84940: PPUSH
84941: LD_VAR 0 5
84945: PPUSH
84946: CALL_OW 118
// end ;
84950: LD_VAR 0 3
84954: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84955: LD_INT 0
84957: PPUSH
84958: PPUSH
// result := false ;
84959: LD_ADDR_VAR 0 3
84963: PUSH
84964: LD_INT 0
84966: ST_TO_ADDR
// if not units then
84967: LD_VAR 0 2
84971: NOT
84972: IFFALSE 84976
// exit ;
84974: GO 85021
// for i in units do
84976: LD_ADDR_VAR 0 4
84980: PUSH
84981: LD_VAR 0 2
84985: PUSH
84986: FOR_IN
84987: IFFALSE 85019
// if See ( side , i ) then
84989: LD_VAR 0 1
84993: PPUSH
84994: LD_VAR 0 4
84998: PPUSH
84999: CALL_OW 292
85003: IFFALSE 85017
// begin result := true ;
85005: LD_ADDR_VAR 0 3
85009: PUSH
85010: LD_INT 1
85012: ST_TO_ADDR
// exit ;
85013: POP
85014: POP
85015: GO 85021
// end ;
85017: GO 84986
85019: POP
85020: POP
// end ;
85021: LD_VAR 0 3
85025: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
85026: LD_INT 0
85028: PPUSH
85029: PPUSH
85030: PPUSH
85031: PPUSH
// if not unit or not points then
85032: LD_VAR 0 1
85036: NOT
85037: PUSH
85038: LD_VAR 0 2
85042: NOT
85043: OR
85044: IFFALSE 85048
// exit ;
85046: GO 85138
// dist := 99999 ;
85048: LD_ADDR_VAR 0 5
85052: PUSH
85053: LD_INT 99999
85055: ST_TO_ADDR
// for i in points do
85056: LD_ADDR_VAR 0 4
85060: PUSH
85061: LD_VAR 0 2
85065: PUSH
85066: FOR_IN
85067: IFFALSE 85136
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
85069: LD_ADDR_VAR 0 6
85073: PUSH
85074: LD_VAR 0 1
85078: PPUSH
85079: LD_VAR 0 4
85083: PUSH
85084: LD_INT 1
85086: ARRAY
85087: PPUSH
85088: LD_VAR 0 4
85092: PUSH
85093: LD_INT 2
85095: ARRAY
85096: PPUSH
85097: CALL_OW 297
85101: ST_TO_ADDR
// if tmpDist < dist then
85102: LD_VAR 0 6
85106: PUSH
85107: LD_VAR 0 5
85111: LESS
85112: IFFALSE 85134
// begin result := i ;
85114: LD_ADDR_VAR 0 3
85118: PUSH
85119: LD_VAR 0 4
85123: ST_TO_ADDR
// dist := tmpDist ;
85124: LD_ADDR_VAR 0 5
85128: PUSH
85129: LD_VAR 0 6
85133: ST_TO_ADDR
// end ; end ;
85134: GO 85066
85136: POP
85137: POP
// end ; end_of_file
85138: LD_VAR 0 3
85142: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85143: LD_VAR 0 1
85147: PUSH
85148: LD_INT 200
85150: DOUBLE
85151: GREATEREQUAL
85152: IFFALSE 85160
85154: LD_INT 299
85156: DOUBLE
85157: LESSEQUAL
85158: IFTRUE 85162
85160: GO 85194
85162: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85163: LD_VAR 0 1
85167: PPUSH
85168: LD_VAR 0 2
85172: PPUSH
85173: LD_VAR 0 3
85177: PPUSH
85178: LD_VAR 0 4
85182: PPUSH
85183: LD_VAR 0 5
85187: PPUSH
85188: CALL 41169 0 5
85192: GO 85271
85194: LD_INT 300
85196: DOUBLE
85197: GREATEREQUAL
85198: IFFALSE 85206
85200: LD_INT 399
85202: DOUBLE
85203: LESSEQUAL
85204: IFTRUE 85208
85206: GO 85270
85208: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85209: LD_VAR 0 1
85213: PPUSH
85214: LD_VAR 0 2
85218: PPUSH
85219: LD_VAR 0 3
85223: PPUSH
85224: LD_VAR 0 4
85228: PPUSH
85229: LD_VAR 0 5
85233: PPUSH
85234: LD_VAR 0 6
85238: PPUSH
85239: LD_VAR 0 7
85243: PPUSH
85244: LD_VAR 0 8
85248: PPUSH
85249: LD_VAR 0 9
85253: PPUSH
85254: LD_VAR 0 10
85258: PPUSH
85259: LD_VAR 0 11
85263: PPUSH
85264: CALL 39067 0 11
85268: GO 85271
85270: POP
// end ;
85271: PPOPN 11
85273: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85274: LD_VAR 0 1
85278: PPUSH
85279: LD_VAR 0 2
85283: PPUSH
85284: LD_VAR 0 3
85288: PPUSH
85289: LD_VAR 0 4
85293: PPUSH
85294: LD_VAR 0 5
85298: PPUSH
85299: CALL 41161 0 5
// end ; end_of_file
85303: PPOPN 5
85305: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85306: LD_VAR 0 1
85310: PPUSH
85311: LD_VAR 0 2
85315: PPUSH
85316: LD_VAR 0 3
85320: PPUSH
85321: LD_VAR 0 4
85325: PPUSH
85326: LD_VAR 0 5
85330: PPUSH
85331: LD_VAR 0 6
85335: PPUSH
85336: CALL 27262 0 6
// end ;
85340: PPOPN 6
85342: END
