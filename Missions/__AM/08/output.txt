// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7604 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareBase ;
 224: CALL 2587 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6375 0 0
// PrepareRussians ;
 236: CALL 6693 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 9014 0 6
// PrepareCutsceneAttack ;
 319: CALL 6427 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 660
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING 04_Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 7111 0 2
 629: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 630: LD_EXP 3
 634: PPUSH
 635: LD_INT 54
 637: PPUSH
 638: LD_INT 25
 640: PPUSH
 641: LD_INT 8
 643: PPUSH
 644: LD_INT 0
 646: PPUSH
 647: CALL_OW 50
// ComHold ( Donaldson ) ;
 651: LD_EXP 3
 655: PPUSH
 656: CALL_OW 140
// end ; if gammaCommander = 2 then
 660: LD_EXP 12
 664: PUSH
 665: LD_INT 2
 667: EQUAL
 668: IFFALSE 716
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 670: LD_ADDR_EXP 2
 674: PUSH
 675: LD_STRING 04_Brown
 677: PPUSH
 678: LD_INT 1
 680: PPUSH
 681: CALL 7111 0 2
 685: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 686: LD_EXP 2
 690: PPUSH
 691: LD_INT 54
 693: PPUSH
 694: LD_INT 25
 696: PPUSH
 697: LD_INT 8
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 50
// ComHold ( Brown ) ;
 707: LD_EXP 2
 711: PPUSH
 712: CALL_OW 140
// end ; if gammaCommander = 3 then
 716: LD_EXP 12
 720: PUSH
 721: LD_INT 3
 723: EQUAL
 724: IFFALSE 772
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_STRING VanHouten
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: CALL 7111 0 2
 741: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 742: LD_EXP 13
 746: PPUSH
 747: LD_INT 54
 749: PPUSH
 750: LD_INT 25
 752: PPUSH
 753: LD_INT 8
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 50
// ComHold ( Houten ) ;
 763: LD_EXP 13
 767: PPUSH
 768: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 772: LD_ADDR_EXP 22
 776: PUSH
 777: LD_STRING Harisson
 779: PPUSH
 780: LD_INT 0
 782: PPUSH
 783: CALL 7111 0 2
 787: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 788: LD_ADDR_EXP 23
 792: PUSH
 793: LD_STRING Powell
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: CALL 7111 0 2
 803: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 804: LD_STRING 04_Lisa
 806: PUSH
 807: EMPTY
 808: LIST
 809: PPUSH
 810: CALL_OW 28
 814: PUSH
 815: LD_STRING LisaInDelta
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 30
 825: NOT
 826: AND
 827: PUSH
 828: LD_STRING 07_Lisa
 830: PUSH
 831: EMPTY
 832: LIST
 833: PPUSH
 834: CALL_OW 28
 838: NOT
 839: AND
 840: IFFALSE 876
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 842: LD_ADDR_EXP 6
 846: PUSH
 847: LD_STRING 04_Lisa
 849: PPUSH
 850: LD_INT 1
 852: PPUSH
 853: CALL 7111 0 2
 857: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 858: LD_ADDR_VAR 0 15
 862: PUSH
 863: LD_VAR 0 15
 867: PUSH
 868: LD_EXP 6
 872: ADD
 873: ST_TO_ADDR
// end else
 874: GO 928
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 876: LD_EXP 6
 880: NOT
 881: PUSH
 882: LD_STRING LisaIn07
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 30
 892: NOT
 893: AND
 894: IFFALSE 928
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 896: LD_ADDR_EXP 6
 900: PUSH
 901: LD_STRING 07_Lisa
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL 7111 0 2
 911: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 912: LD_ADDR_VAR 0 15
 916: PUSH
 917: LD_VAR 0 15
 921: PUSH
 922: LD_EXP 6
 926: ADD
 927: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 928: LD_STRING 04_Bobby
 930: PUSH
 931: EMPTY
 932: LIST
 933: PPUSH
 934: CALL_OW 28
 938: PUSH
 939: LD_STRING BobbyInDelta
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 30
 949: NOT
 950: AND
 951: PUSH
 952: LD_STRING 07_Bobby
 954: PUSH
 955: EMPTY
 956: LIST
 957: PPUSH
 958: CALL_OW 28
 962: NOT
 963: AND
 964: IFFALSE 1000
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 966: LD_ADDR_EXP 4
 970: PUSH
 971: LD_STRING 04_Bobby
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: CALL 7111 0 2
 981: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 982: LD_ADDR_VAR 0 15
 986: PUSH
 987: LD_VAR 0 15
 991: PUSH
 992: LD_EXP 4
 996: ADD
 997: ST_TO_ADDR
// end else
 998: GO 1052
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1000: LD_EXP 4
1004: NOT
1005: PUSH
1006: LD_STRING BobbyIn07
1008: PPUSH
1009: LD_INT 0
1011: PPUSH
1012: CALL_OW 30
1016: NOT
1017: AND
1018: IFFALSE 1052
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
1020: LD_ADDR_EXP 4
1024: PUSH
1025: LD_STRING 07_Bobby
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL 7111 0 2
1035: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1036: LD_ADDR_VAR 0 15
1040: PUSH
1041: LD_VAR 0 15
1045: PUSH
1046: LD_EXP 4
1050: ADD
1051: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1052: LD_STRING 04_Cyrus
1054: PUSH
1055: EMPTY
1056: LIST
1057: PPUSH
1058: CALL_OW 28
1062: PUSH
1063: LD_STRING CyrusInDelta
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 30
1073: NOT
1074: AND
1075: PUSH
1076: LD_STRING 07_Cyrus
1078: PUSH
1079: EMPTY
1080: LIST
1081: PPUSH
1082: CALL_OW 28
1086: NOT
1087: AND
1088: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1090: LD_ADDR_EXP 5
1094: PUSH
1095: LD_STRING 04_Cyrus
1097: PPUSH
1098: LD_INT 1
1100: PPUSH
1101: CALL 7111 0 2
1105: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1106: LD_ADDR_VAR 0 15
1110: PUSH
1111: LD_VAR 0 15
1115: PUSH
1116: LD_EXP 5
1120: ADD
1121: ST_TO_ADDR
// end else
1122: GO 1176
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1124: LD_EXP 5
1128: NOT
1129: PUSH
1130: LD_STRING CyrusIn07
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 30
1140: NOT
1141: AND
1142: IFFALSE 1176
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1144: LD_ADDR_EXP 5
1148: PUSH
1149: LD_STRING 07_Cyrus
1151: PPUSH
1152: LD_INT 1
1154: PPUSH
1155: CALL 7111 0 2
1159: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1160: LD_ADDR_VAR 0 15
1164: PUSH
1165: LD_VAR 0 15
1169: PUSH
1170: LD_EXP 5
1174: ADD
1175: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1176: LD_STRING 04_Brown
1178: PUSH
1179: EMPTY
1180: LIST
1181: PPUSH
1182: CALL_OW 28
1186: PUSH
1187: LD_STRING BrownInDelta
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: CALL_OW 30
1197: NOT
1198: AND
1199: PUSH
1200: LD_STRING 07_Brown
1202: PUSH
1203: EMPTY
1204: LIST
1205: PPUSH
1206: CALL_OW 28
1210: NOT
1211: AND
1212: PUSH
1213: LD_EXP 12
1217: PUSH
1218: LD_INT 2
1220: NONEQUAL
1221: AND
1222: IFFALSE 1258
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1224: LD_ADDR_EXP 2
1228: PUSH
1229: LD_STRING 04_Brown
1231: PPUSH
1232: LD_INT 1
1234: PPUSH
1235: CALL 7111 0 2
1239: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1240: LD_ADDR_VAR 0 15
1244: PUSH
1245: LD_VAR 0 15
1249: PUSH
1250: LD_EXP 2
1254: ADD
1255: ST_TO_ADDR
// end else
1256: GO 1320
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1258: LD_EXP 2
1262: NOT
1263: PUSH
1264: LD_STRING BrownIn07
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 30
1274: NOT
1275: AND
1276: PUSH
1277: LD_EXP 12
1281: PUSH
1282: LD_INT 2
1284: NONEQUAL
1285: AND
1286: IFFALSE 1320
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1288: LD_ADDR_EXP 2
1292: PUSH
1293: LD_STRING 07_Brown
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL 7111 0 2
1303: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1304: LD_ADDR_VAR 0 15
1308: PUSH
1309: LD_VAR 0 15
1313: PUSH
1314: LD_EXP 2
1318: ADD
1319: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1320: LD_STRING 04_Donaldson
1322: PUSH
1323: EMPTY
1324: LIST
1325: PPUSH
1326: CALL_OW 28
1330: PUSH
1331: LD_STRING DonaldsonInDelta
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: AND
1343: PUSH
1344: LD_STRING 07_Donaldson
1346: PUSH
1347: EMPTY
1348: LIST
1349: PPUSH
1350: CALL_OW 28
1354: NOT
1355: AND
1356: PUSH
1357: LD_EXP 12
1361: PUSH
1362: LD_INT 1
1364: NONEQUAL
1365: AND
1366: IFFALSE 1402
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1368: LD_ADDR_EXP 3
1372: PUSH
1373: LD_STRING 04_Donaldson
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 7111 0 2
1383: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1384: LD_ADDR_VAR 0 15
1388: PUSH
1389: LD_VAR 0 15
1393: PUSH
1394: LD_EXP 3
1398: ADD
1399: ST_TO_ADDR
// end else
1400: GO 1464
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1402: LD_EXP 3
1406: NOT
1407: PUSH
1408: LD_STRING DonaldsonIn07
1410: PPUSH
1411: LD_INT 0
1413: PPUSH
1414: CALL_OW 30
1418: NOT
1419: AND
1420: PUSH
1421: LD_EXP 12
1425: PUSH
1426: LD_INT 1
1428: NONEQUAL
1429: AND
1430: IFFALSE 1464
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1432: LD_ADDR_EXP 3
1436: PUSH
1437: LD_STRING 07_Donaldson
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 7111 0 2
1447: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1448: LD_ADDR_VAR 0 15
1452: PUSH
1453: LD_VAR 0 15
1457: PUSH
1458: LD_EXP 3
1462: ADD
1463: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1464: LD_STRING KhatamIn07
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 30
1474: NOT
1475: IFFALSE 1509
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1477: LD_ADDR_EXP 10
1481: PUSH
1482: LD_STRING 07_Khatam
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: CALL 7111 0 2
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 10
1507: ADD
1508: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1509: LD_ADDR_EXP 11
1513: PUSH
1514: LD_STRING 07_othersGamma
1516: PPUSH
1517: CALL_OW 31
1521: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1522: LD_ADDR_VAR 0 14
1526: PUSH
1527: LD_INT 8
1529: PUSH
1530: LD_EXP 11
1534: MINUS
1535: ST_TO_ADDR
// if tmp then
1536: LD_VAR 0 14
1540: IFFALSE 1593
// for i = 1 to tmp do
1542: LD_ADDR_VAR 0 2
1546: PUSH
1547: DOUBLE
1548: LD_INT 1
1550: DEC
1551: ST_TO_ADDR
1552: LD_VAR 0 14
1556: PUSH
1557: FOR_TO
1558: IFFALSE 1591
// begin PrepareHuman ( false , 1 , 5 ) ;
1560: LD_INT 0
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: LD_INT 5
1568: PPUSH
1569: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1573: LD_ADDR_EXP 11
1577: PUSH
1578: LD_EXP 11
1582: PUSH
1583: CALL_OW 44
1587: ADD
1588: ST_TO_ADDR
// end ;
1589: GO 1557
1591: POP
1592: POP
// if HexInfo ( 61 , 29 ) = 0 then
1593: LD_INT 61
1595: PPUSH
1596: LD_INT 29
1598: PPUSH
1599: CALL_OW 428
1603: PUSH
1604: LD_INT 0
1606: EQUAL
1607: IFFALSE 1638
// begin bc_type := b_barracks ;
1609: LD_ADDR_OWVAR 42
1613: PUSH
1614: LD_INT 5
1616: ST_TO_ADDR
// bc_level := 6 ;
1617: LD_ADDR_OWVAR 43
1621: PUSH
1622: LD_INT 6
1624: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1625: LD_INT 61
1627: PPUSH
1628: LD_INT 29
1630: PPUSH
1631: LD_INT 5
1633: PPUSH
1634: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1638: LD_ADDR_VAR 0 13
1642: PUSH
1643: LD_INT 22
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 30
1655: PUSH
1656: LD_INT 31
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: CALL_OW 69
1671: ST_TO_ADDR
// for i in bun do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: LD_VAR 0 13
1681: PUSH
1682: FOR_IN
1683: IFFALSE 1815
// begin x := GetX ( i ) ;
1685: LD_ADDR_VAR 0 3
1689: PUSH
1690: LD_VAR 0 2
1694: PPUSH
1695: CALL_OW 250
1699: ST_TO_ADDR
// y := GetY ( i ) ;
1700: LD_ADDR_VAR 0 4
1704: PUSH
1705: LD_VAR 0 2
1709: PPUSH
1710: CALL_OW 251
1714: ST_TO_ADDR
// d := GetDir ( i ) ;
1715: LD_ADDR_VAR 0 5
1719: PUSH
1720: LD_VAR 0 2
1724: PPUSH
1725: CALL_OW 254
1729: ST_TO_ADDR
// RemoveUnit ( i ) ;
1730: LD_VAR 0 2
1734: PPUSH
1735: CALL_OW 64
// bc_type := b_bunker ;
1739: LD_ADDR_OWVAR 42
1743: PUSH
1744: LD_INT 32
1746: ST_TO_ADDR
// bc_level := 6 ;
1747: LD_ADDR_OWVAR 43
1751: PUSH
1752: LD_INT 6
1754: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1755: LD_ADDR_VAR 0 6
1759: PUSH
1760: LD_VAR 0 3
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: LD_VAR 0 5
1774: PPUSH
1775: CALL_OW 47
1779: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1780: LD_VAR 0 6
1784: PPUSH
1785: LD_INT 5
1787: PUSH
1788: LD_INT 4
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: PUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 2
1802: MOD
1803: PUSH
1804: LD_INT 1
1806: PLUS
1807: ARRAY
1808: PPUSH
1809: CALL_OW 431
// end ;
1813: GO 1682
1815: POP
1816: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1817: LD_ADDR_VAR 0 9
1821: PUSH
1822: LD_INT 22
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 30
1834: PUSH
1835: LD_INT 5
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PPUSH
1846: CALL_OW 69
1850: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1851: LD_ADDR_VAR 0 8
1855: PUSH
1856: LD_INT 22
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 6
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 30
1881: PUSH
1882: LD_INT 7
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 30
1891: PUSH
1892: LD_INT 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PPUSH
1909: CALL_OW 69
1913: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1914: LD_ADDR_VAR 0 7
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 30
1931: PUSH
1932: LD_INT 3
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1948: LD_ADDR_VAR 0 12
1952: PUSH
1953: LD_INT 22
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 30
1965: PUSH
1966: LD_INT 36
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1982: LD_ADDR_VAR 0 13
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 30
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 30
2012: PUSH
2013: LD_INT 32
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: LD_EXP 11
2043: PUSH
2044: LD_VAR 0 15
2048: ADD
2049: PUSH
2050: FOR_IN
2051: IFFALSE 2472
// begin placed := false ;
2053: LD_ADDR_VAR 0 11
2057: PUSH
2058: LD_INT 0
2060: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 257
2070: PUSH
2071: LD_INT 1
2073: EQUAL
2074: IFFALSE 2199
// begin if UnitFilter ( bun , [ f_empty ] ) then
2076: LD_VAR 0 13
2080: PPUSH
2081: LD_INT 58
2083: PUSH
2084: EMPTY
2085: LIST
2086: PPUSH
2087: CALL_OW 72
2091: IFFALSE 2130
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2093: LD_VAR 0 2
2097: PPUSH
2098: LD_VAR 0 13
2102: PPUSH
2103: LD_INT 58
2105: PUSH
2106: EMPTY
2107: LIST
2108: PPUSH
2109: CALL_OW 72
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: PPUSH
2118: CALL_OW 52
// placed := true ;
2122: LD_ADDR_VAR 0 11
2126: PUSH
2127: LD_INT 1
2129: ST_TO_ADDR
// end ; if arm and not placed then
2130: LD_VAR 0 9
2134: PUSH
2135: LD_VAR 0 11
2139: NOT
2140: AND
2141: IFFALSE 2199
// begin for j in arm do
2143: LD_ADDR_VAR 0 10
2147: PUSH
2148: LD_VAR 0 9
2152: PUSH
2153: FOR_IN
2154: IFFALSE 2197
// if UnitsInside ( j ) < 6 then
2156: LD_VAR 0 10
2160: PPUSH
2161: CALL_OW 313
2165: PUSH
2166: LD_INT 6
2168: LESS
2169: IFFALSE 2195
// begin PlaceHumanInUnit ( i , j ) ;
2171: LD_VAR 0 2
2175: PPUSH
2176: LD_VAR 0 10
2180: PPUSH
2181: CALL_OW 52
// placed := true ;
2185: LD_ADDR_VAR 0 11
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// break ;
2193: GO 2197
// end ;
2195: GO 2153
2197: POP
2198: POP
// end ; end ; if GetClass ( i ) = 2 then
2199: LD_VAR 0 2
2203: PPUSH
2204: CALL_OW 257
2208: PUSH
2209: LD_INT 2
2211: EQUAL
2212: IFFALSE 2245
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: LD_INT 20
2224: PPUSH
2225: LD_INT 6
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 50
// placed := true ;
2235: LD_ADDR_VAR 0 11
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// continue ;
2243: GO 2050
// end ; if GetClass ( i ) = 3 then
2245: LD_VAR 0 2
2249: PPUSH
2250: CALL_OW 257
2254: PUSH
2255: LD_INT 3
2257: EQUAL
2258: IFFALSE 2362
// if fac then
2260: LD_VAR 0 7
2264: IFFALSE 2362
// begin if ct then
2266: LD_VAR 0 12
2270: IFFALSE 2298
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2272: LD_VAR 0 2
2276: PPUSH
2277: LD_VAR 0 12
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 52
// placed := true ;
2290: LD_ADDR_VAR 0 11
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// end ; if placed then
2298: LD_VAR 0 11
2302: IFFALSE 2306
// continue ;
2304: GO 2050
// for j in fac do
2306: LD_ADDR_VAR 0 10
2310: PUSH
2311: LD_VAR 0 7
2315: PUSH
2316: FOR_IN
2317: IFFALSE 2360
// if UnitsInside ( j ) < 6 then
2319: LD_VAR 0 10
2323: PPUSH
2324: CALL_OW 313
2328: PUSH
2329: LD_INT 6
2331: LESS
2332: IFFALSE 2358
// begin PlaceHumanInUnit ( i , j ) ;
2334: LD_VAR 0 2
2338: PPUSH
2339: LD_VAR 0 10
2343: PPUSH
2344: CALL_OW 52
// placed := true ;
2348: LD_ADDR_VAR 0 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// break ;
2356: GO 2360
// end ;
2358: GO 2316
2360: POP
2361: POP
// end ; if GetClass ( i ) = 4 then
2362: LD_VAR 0 2
2366: PPUSH
2367: CALL_OW 257
2371: PUSH
2372: LD_INT 4
2374: EQUAL
2375: IFFALSE 2439
// if lab then
2377: LD_VAR 0 8
2381: IFFALSE 2439
// begin for j in lab do
2383: LD_ADDR_VAR 0 10
2387: PUSH
2388: LD_VAR 0 8
2392: PUSH
2393: FOR_IN
2394: IFFALSE 2437
// if UnitsInside ( j ) < 6 then
2396: LD_VAR 0 10
2400: PPUSH
2401: CALL_OW 313
2405: PUSH
2406: LD_INT 6
2408: LESS
2409: IFFALSE 2435
// begin PlaceHumanInUnit ( i , j ) ;
2411: LD_VAR 0 2
2415: PPUSH
2416: LD_VAR 0 10
2420: PPUSH
2421: CALL_OW 52
// placed := true ;
2425: LD_ADDR_VAR 0 11
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// break ;
2433: GO 2437
// end ;
2435: GO 2393
2437: POP
2438: POP
// end ; if not placed then
2439: LD_VAR 0 11
2443: NOT
2444: IFFALSE 2470
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 5
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: CALL_OW 49
// ComHold ( i ) ;
2461: LD_VAR 0 2
2465: PPUSH
2466: CALL_OW 140
// end ; end ;
2470: GO 2050
2472: POP
2473: POP
// if ct then
2474: LD_VAR 0 12
2478: IFFALSE 2582
// if UnitsInside ( ct [ 1 ] ) then
2480: LD_VAR 0 12
2484: PUSH
2485: LD_INT 1
2487: ARRAY
2488: PPUSH
2489: CALL_OW 313
2493: IFFALSE 2582
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2495: LD_ADDR_VAR 0 2
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 1
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 33
2512: PUSH
2513: LD_INT 2
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 69
2528: PUSH
2529: FOR_IN
2530: IFFALSE 2580
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2532: LD_VAR 0 2
2536: PPUSH
2537: LD_VAR 0 12
2541: PUSH
2542: LD_INT 1
2544: ARRAY
2545: PPUSH
2546: CALL_OW 313
2550: PUSH
2551: LD_INT 1
2553: PPUSH
2554: LD_VAR 0 12
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 313
2567: PPUSH
2568: CALL_OW 12
2572: ARRAY
2573: PPUSH
2574: CALL_OW 135
2578: GO 2529
2580: POP
2581: POP
// end ; end ;
2582: LD_VAR 0 1
2586: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2587: LD_INT 0
2589: PPUSH
2590: PPUSH
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2595: LD_INT 71
2597: PPUSH
2598: LD_INT 5
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: LD_STRING GammaBase
2615: PPUSH
2616: EMPTY
2617: PPUSH
2618: CALL_OW 30
2622: ST_TO_ADDR
// if not blist then
2623: LD_VAR 0 2
2627: NOT
2628: IFFALSE 2668
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2630: LD_ADDR_VAR 0 2
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: LD_INT 52
2640: PUSH
2641: LD_INT 12
2643: PUSH
2644: LD_INT 3
2646: PUSH
2647: LD_INT 3
2649: PUSH
2650: LD_INT 0
2652: PUSH
2653: LD_INT 0
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: ST_TO_ADDR
// uc_side := 1 ;
2668: LD_ADDR_OWVAR 20
2672: PUSH
2673: LD_INT 1
2675: ST_TO_ADDR
// uc_nation := 1 ;
2676: LD_ADDR_OWVAR 21
2680: PUSH
2681: LD_INT 1
2683: ST_TO_ADDR
// bc_kind1 := - 1 ;
2684: LD_ADDR_OWVAR 44
2688: PUSH
2689: LD_INT 1
2691: NEG
2692: ST_TO_ADDR
// bc_kind2 := - 1 ;
2693: LD_ADDR_OWVAR 45
2697: PUSH
2698: LD_INT 1
2700: NEG
2701: ST_TO_ADDR
// for i in blist do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: LD_VAR 0 2
2711: PUSH
2712: FOR_IN
2713: IFFALSE 2989
// begin bc_type := i [ 1 ] ;
2715: LD_ADDR_OWVAR 42
2719: PUSH
2720: LD_VAR 0 3
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2729: LD_ADDR_OWVAR 43
2733: PUSH
2734: LD_VAR 0 3
2738: PUSH
2739: LD_INT 5
2741: ARRAY
2742: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2743: LD_OWVAR 42
2747: PUSH
2748: LD_INT 6
2750: PUSH
2751: LD_INT 7
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: IN
2758: IFFALSE 2824
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2760: LD_STRING 06_remoteVehs_1
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 30
2770: NOT
2771: IFFALSE 2799
// begin bc_type := b_lab_full ;
2773: LD_ADDR_OWVAR 42
2777: PUSH
2778: LD_INT 8
2780: ST_TO_ADDR
// bc_kind1 := 10 ;
2781: LD_ADDR_OWVAR 44
2785: PUSH
2786: LD_INT 10
2788: ST_TO_ADDR
// bc_kind2 := 15 ;
2789: LD_ADDR_OWVAR 45
2793: PUSH
2794: LD_INT 15
2796: ST_TO_ADDR
// end else
2797: GO 2824
// begin bc_type := b_lab_half ;
2799: LD_ADDR_OWVAR 42
2803: PUSH
2804: LD_INT 7
2806: ST_TO_ADDR
// bc_kind1 := 10 ;
2807: LD_ADDR_OWVAR 44
2811: PUSH
2812: LD_INT 10
2814: ST_TO_ADDR
// bc_kind2 := - 1 ;
2815: LD_ADDR_OWVAR 45
2819: PUSH
2820: LD_INT 1
2822: NEG
2823: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2824: LD_OWVAR 42
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: IFFALSE 2842
// bc_type := b_factory ;
2834: LD_ADDR_OWVAR 42
2838: PUSH
2839: LD_INT 3
2841: ST_TO_ADDR
// if bc_type = b_depot then
2842: LD_OWVAR 42
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 2899
// begin bc_type := b_warehouse ;
2852: LD_ADDR_OWVAR 42
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2860: LD_ADDR_EXP 37
2864: PUSH
2865: LD_VAR 0 3
2869: PUSH
2870: LD_INT 2
2872: ARRAY
2873: PPUSH
2874: LD_VAR 0 3
2878: PUSH
2879: LD_INT 3
2881: ARRAY
2882: PPUSH
2883: LD_VAR 0 3
2887: PUSH
2888: LD_INT 4
2890: ARRAY
2891: PPUSH
2892: CALL_OW 47
2896: ST_TO_ADDR
// continue ;
2897: GO 2712
// end ; if bc_type = b_armoury then
2899: LD_OWVAR 42
2903: PUSH
2904: LD_INT 4
2906: EQUAL
2907: IFFALSE 2917
// bc_type = b_barracks ;
2909: LD_ADDR_OWVAR 42
2913: PUSH
2914: LD_INT 5
2916: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2917: LD_ADDR_VAR 0 4
2921: PUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_INT 2
2929: ARRAY
2930: PPUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_INT 3
2938: ARRAY
2939: PPUSH
2940: LD_VAR 0 3
2944: PUSH
2945: LD_INT 4
2947: ARRAY
2948: PPUSH
2949: CALL_OW 47
2953: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2954: LD_VAR 0 4
2958: PPUSH
2959: CALL_OW 266
2963: PUSH
2964: LD_INT 32
2966: EQUAL
2967: IFFALSE 2987
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2969: LD_VAR 0 4
2973: PPUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 7
2981: ARRAY
2982: PPUSH
2983: CALL_OW 431
// end ;
2987: GO 2712
2989: POP
2990: POP
// if not amDepot then
2991: LD_EXP 37
2995: NOT
2996: IFFALSE 3033
// begin bc_type := b_warehouse ;
2998: LD_ADDR_OWVAR 42
3002: PUSH
3003: LD_INT 1
3005: ST_TO_ADDR
// bc_level := 6 ;
3006: LD_ADDR_OWVAR 43
3010: PUSH
3011: LD_INT 6
3013: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3014: LD_ADDR_EXP 37
3018: PUSH
3019: LD_INT 52
3021: PPUSH
3022: LD_INT 12
3024: PPUSH
3025: LD_INT 3
3027: PPUSH
3028: CALL_OW 47
3032: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3033: LD_EXP 37
3037: PPUSH
3038: LD_STRING gamma
3040: PPUSH
3041: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3045: LD_EXP 37
3049: PPUSH
3050: CALL_OW 274
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: LD_INT 500
3060: PUSH
3061: LD_INT 420
3063: PUSH
3064: LD_INT 350
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: LIST
3071: PUSH
3072: LD_OWVAR 67
3076: ARRAY
3077: PPUSH
3078: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3082: LD_EXP 37
3086: PPUSH
3087: CALL_OW 274
3091: PPUSH
3092: LD_INT 2
3094: PPUSH
3095: LD_INT 200
3097: PPUSH
3098: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3102: LD_INT 22
3104: PUSH
3105: LD_INT 1
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 30
3114: PUSH
3115: LD_INT 3
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PPUSH
3126: CALL_OW 69
3130: IFFALSE 3378
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3132: LD_ADDR_VAR 0 4
3136: PUSH
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 30
3149: PUSH
3150: LD_INT 3
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PPUSH
3161: CALL_OW 69
3165: PUSH
3166: LD_INT 1
3168: ARRAY
3169: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3170: LD_ADDR_VAR 0 6
3174: PUSH
3175: LD_VAR 0 4
3179: PPUSH
3180: CALL_OW 250
3184: PPUSH
3185: LD_VAR 0 4
3189: PPUSH
3190: CALL_OW 251
3194: PPUSH
3195: LD_VAR 0 4
3199: PPUSH
3200: CALL_OW 254
3204: PPUSH
3205: CALL 16926 0 3
3209: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 19
3217: PUSH
3218: LD_INT 17
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3225: LD_STRING 06_remoteVehs_1
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 30
3235: IFFALSE 3258
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3237: LD_ADDR_VAR 0 2
3241: PUSH
3242: LD_VAR 0 2
3246: PPUSH
3247: LD_INT 1
3249: PPUSH
3250: LD_INT 22
3252: PPUSH
3253: CALL_OW 2
3257: ST_TO_ADDR
// for i in tmp do
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_VAR 0 6
3267: PUSH
3268: FOR_IN
3269: IFFALSE 3376
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3271: LD_VAR 0 3
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: PPUSH
3280: LD_VAR 0 3
3284: PUSH
3285: LD_INT 2
3287: ARRAY
3288: PPUSH
3289: CALL_OW 428
3293: PUSH
3294: LD_INT 0
3296: EQUAL
3297: IFFALSE 3374
// begin bc_type := blist [ 1 ] ;
3299: LD_ADDR_OWVAR 42
3303: PUSH
3304: LD_VAR 0 2
3308: PUSH
3309: LD_INT 1
3311: ARRAY
3312: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3313: LD_VAR 0 3
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: LD_VAR 0 3
3326: PUSH
3327: LD_INT 2
3329: ARRAY
3330: PPUSH
3331: LD_VAR 0 3
3335: PUSH
3336: LD_INT 3
3338: ARRAY
3339: PPUSH
3340: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_VAR 0 2
3353: PPUSH
3354: LD_INT 1
3356: PPUSH
3357: CALL_OW 3
3361: ST_TO_ADDR
// if blist = 0 then
3362: LD_VAR 0 2
3366: PUSH
3367: LD_INT 0
3369: EQUAL
3370: IFFALSE 3374
// break ;
3372: GO 3376
// end ;
3374: GO 3268
3376: POP
3377: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3378: LD_STRING 06_remoteVehs_1
3380: PPUSH
3381: LD_INT 0
3383: PPUSH
3384: CALL_OW 30
3388: IFFALSE 3847
// begin bc_type = 36 ;
3390: LD_ADDR_OWVAR 42
3394: PUSH
3395: LD_INT 36
3397: ST_TO_ADDR
// bc_level = 4 ;
3398: LD_ADDR_OWVAR 43
3402: PUSH
3403: LD_INT 4
3405: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3406: LD_EXP 37
3410: PPUSH
3411: LD_INT 36
3413: PPUSH
3414: LD_INT 62
3416: PPUSH
3417: LD_INT 12
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: LD_INT 0
3425: PPUSH
3426: CALL 17796 0 6
3430: PUSH
3431: LD_INT 92
3433: PUSH
3434: LD_INT 62
3436: PUSH
3437: LD_INT 12
3439: PUSH
3440: LD_INT 3
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: NOT
3454: AND
3455: IFFALSE 3472
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3457: LD_INT 62
3459: PPUSH
3460: LD_INT 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: CALL_OW 47
3470: GO 3643
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3472: LD_EXP 37
3476: PPUSH
3477: LD_INT 36
3479: PPUSH
3480: LD_INT 37
3482: PPUSH
3483: LD_INT 18
3485: PPUSH
3486: LD_INT 2
3488: PPUSH
3489: LD_INT 0
3491: PPUSH
3492: CALL 17796 0 6
3496: PUSH
3497: LD_INT 92
3499: PUSH
3500: LD_INT 37
3502: PUSH
3503: LD_INT 18
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PPUSH
3515: CALL_OW 69
3519: NOT
3520: AND
3521: IFFALSE 3538
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3523: LD_INT 37
3525: PPUSH
3526: LD_INT 18
3528: PPUSH
3529: LD_INT 2
3531: PPUSH
3532: CALL_OW 47
3536: GO 3643
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3538: LD_EXP 37
3542: PPUSH
3543: LD_INT 36
3545: PPUSH
3546: LD_INT 66
3548: PPUSH
3549: LD_INT 14
3551: PPUSH
3552: LD_INT 4
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 17796 0 6
3562: PUSH
3563: LD_INT 92
3565: PUSH
3566: LD_INT 66
3568: PUSH
3569: LD_INT 14
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PPUSH
3581: CALL_OW 69
3585: NOT
3586: AND
3587: IFFALSE 3604
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3589: LD_INT 66
3591: PPUSH
3592: LD_INT 14
3594: PPUSH
3595: LD_INT 4
3597: PPUSH
3598: CALL_OW 47
3602: GO 3643
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3604: LD_EXP 37
3608: PPUSH
3609: LD_INT 36
3611: PPUSH
3612: LD_INT 74
3614: PPUSH
3615: LD_INT 26
3617: PPUSH
3618: LD_INT 4
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL 17796 0 6
3628: IFFALSE 3643
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3630: LD_INT 74
3632: PPUSH
3633: LD_INT 26
3635: PPUSH
3636: LD_INT 4
3638: PPUSH
3639: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3643: LD_INT 22
3645: PUSH
3646: LD_INT 1
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 30
3655: PUSH
3656: LD_INT 36
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PPUSH
3667: CALL_OW 69
3671: NOT
3672: IFFALSE 3676
// exit ;
3674: GO 3847
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3676: LD_ADDR_VAR 0 3
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 3
3688: PUSH
3689: LD_INT 2
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: LD_OWVAR 67
3704: ARRAY
3705: PUSH
3706: FOR_TO
3707: IFFALSE 3845
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3709: LD_ADDR_OWVAR 37
3713: PUSH
3714: LD_INT 3
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 3
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 2
3732: PPUSH
3733: CALL_OW 12
3737: ARRAY
3738: PUSH
3739: LD_INT 2
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_OWVAR 67
3751: ARRAY
3752: ST_TO_ADDR
// vc_engine = 1 ;
3753: LD_ADDR_OWVAR 39
3757: PUSH
3758: LD_INT 1
3760: ST_TO_ADDR
// vc_control = 2 ;
3761: LD_ADDR_OWVAR 38
3765: PUSH
3766: LD_INT 2
3768: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3769: LD_ADDR_OWVAR 40
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 5
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 3
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// veh = CreateVehicle ;
3800: LD_ADDR_VAR 0 5
3804: PUSH
3805: CALL_OW 45
3809: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3810: LD_VAR 0 5
3814: PPUSH
3815: LD_INT 4
3817: PPUSH
3818: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3822: LD_VAR 0 5
3826: PPUSH
3827: LD_INT 56
3829: PPUSH
3830: LD_INT 17
3832: PPUSH
3833: LD_INT 9
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 50
// end ;
3843: GO 3706
3845: POP
3846: POP
// end ; end ;
3847: LD_VAR 0 1
3851: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3852: LD_INT 0
3854: PPUSH
3855: PPUSH
3856: PPUSH
3857: PPUSH
// uc_side = 1 ;
3858: LD_ADDR_OWVAR 20
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// uc_nation = 1 ;
3866: LD_ADDR_OWVAR 21
3870: PUSH
3871: LD_INT 1
3873: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3874: LD_ADDR_EXP 14
3878: PUSH
3879: LD_STRING 06c_Denis
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL 7111 0 2
3889: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3890: LD_EXP 14
3894: PPUSH
3895: LD_INT 4
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3905: LD_ADDR_EXP 15
3909: PUSH
3910: LD_STRING 06c_Joan
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: CALL 7111 0 2
3920: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3921: LD_EXP 15
3925: PPUSH
3926: LD_INT 4
3928: PPUSH
3929: LD_INT 0
3931: PPUSH
3932: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3936: LD_STRING GladstoneIn07
3938: PPUSH
3939: LD_INT 0
3941: PPUSH
3942: CALL_OW 30
3946: NOT
3947: IFFALSE 4015
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3949: LD_ADDR_EXP 8
3953: PUSH
3954: LD_STRING 06c_Gladstone
3956: PPUSH
3957: LD_INT 1
3959: PPUSH
3960: CALL 7111 0 2
3964: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3965: LD_EXP 8
3969: NOT
3970: PUSH
3971: LD_STRING GladstoneStayInDelta
3973: PPUSH
3974: LD_INT 0
3976: PPUSH
3977: CALL_OW 30
3981: AND
3982: IFFALSE 4000
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3984: LD_ADDR_EXP 8
3988: PUSH
3989: LD_STRING 05_Gladstone
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: CALL 7111 0 2
3999: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4000: LD_EXP 8
4004: PPUSH
4005: LD_INT 4
4007: PPUSH
4008: LD_INT 0
4010: PPUSH
4011: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4015: LD_STRING LisaStayInDelta
4017: PPUSH
4018: LD_INT 0
4020: PPUSH
4021: CALL_OW 30
4025: IFFALSE 4058
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
4027: LD_ADDR_EXP 6
4031: PUSH
4032: LD_STRING 05_Lisa
4034: PPUSH
4035: LD_INT 1
4037: PPUSH
4038: CALL 7111 0 2
4042: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4043: LD_EXP 6
4047: PPUSH
4048: LD_INT 4
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4058: LD_STRING BobbyStayInDelta
4060: PPUSH
4061: LD_INT 0
4063: PPUSH
4064: CALL_OW 30
4068: IFFALSE 4101
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4070: LD_ADDR_EXP 4
4074: PUSH
4075: LD_STRING 05_Bobby
4077: PPUSH
4078: LD_INT 1
4080: PPUSH
4081: CALL 7111 0 2
4085: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4086: LD_EXP 4
4090: PPUSH
4091: LD_INT 4
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4101: LD_STRING CyrusStayInDelta
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 30
4111: IFFALSE 4144
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4113: LD_ADDR_EXP 5
4117: PUSH
4118: LD_STRING 05_Cyrus
4120: PPUSH
4121: LD_INT 1
4123: PPUSH
4124: CALL 7111 0 2
4128: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4129: LD_EXP 5
4133: PPUSH
4134: LD_INT 4
4136: PPUSH
4137: LD_INT 0
4139: PPUSH
4140: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4144: LD_STRING BrownStayInDelta
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: CALL_OW 30
4154: IFFALSE 4187
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4156: LD_ADDR_EXP 2
4160: PUSH
4161: LD_STRING 05_Brown
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL 7111 0 2
4171: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4172: LD_EXP 2
4176: PPUSH
4177: LD_INT 4
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4187: LD_STRING DonaldsonStayInDelta
4189: PPUSH
4190: LD_INT 0
4192: PPUSH
4193: CALL_OW 30
4197: IFFALSE 4230
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4199: LD_ADDR_EXP 3
4203: PUSH
4204: LD_STRING 05_Donaldson
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL 7111 0 2
4214: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4215: LD_EXP 3
4219: PPUSH
4220: LD_INT 4
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4230: LD_ADDR_VAR 0 4
4234: PUSH
4235: LD_STRING OthersStayInDelta
4237: PPUSH
4238: CALL_OW 31
4242: ST_TO_ADDR
// if other > 2 then
4243: LD_VAR 0 4
4247: PUSH
4248: LD_INT 2
4250: GREATER
4251: IFFALSE 4296
// begin for j = 1 to 2 do
4253: LD_ADDR_VAR 0 3
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_INT 2
4265: PUSH
4266: FOR_TO
4267: IFFALSE 4292
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4269: LD_VAR 0 4
4273: PUSH
4274: LD_VAR 0 3
4278: ARRAY
4279: PPUSH
4280: LD_INT 4
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 49
4290: GO 4266
4292: POP
4293: POP
// end else
4294: GO 4339
// begin for j = 1 to other do
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: DOUBLE
4302: LD_INT 1
4304: DEC
4305: ST_TO_ADDR
4306: LD_VAR 0 4
4310: PUSH
4311: FOR_TO
4312: IFFALSE 4337
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4314: LD_VAR 0 4
4318: PUSH
4319: LD_VAR 0 3
4323: ARRAY
4324: PPUSH
4325: LD_INT 4
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 49
4335: GO 4311
4337: POP
4338: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4339: LD_ADDR_VAR 0 4
4343: PUSH
4344: LD_STRING 06_other_apemans
4346: PPUSH
4347: CALL_OW 31
4351: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4352: LD_VAR 0 4
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 4
4362: PUSH
4363: LD_INT 3
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: PUSH
4371: LD_OWVAR 67
4375: ARRAY
4376: GREATEREQUAL
4377: IFFALSE 4406
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_INT 5
4386: PUSH
4387: LD_INT 4
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_OWVAR 67
4402: ARRAY
4403: ST_TO_ADDR
4404: GO 4416
// j := other ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_VAR 0 4
4415: ST_TO_ADDR
// for i = 1 to j do
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: DOUBLE
4422: LD_INT 1
4424: DEC
4425: ST_TO_ADDR
4426: LD_VAR 0 3
4430: PUSH
4431: FOR_TO
4432: IFFALSE 4457
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4434: LD_VAR 0 4
4438: PUSH
4439: LD_VAR 0 2
4443: ARRAY
4444: PPUSH
4445: LD_INT 4
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 49
4455: GO 4431
4457: POP
4458: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4459: LD_INT 4
4461: PPUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 70
4490: PPUSH
4491: LD_INT 53
4493: PPUSH
4494: LD_INT 19
4496: PPUSH
4497: CALL_OW 111
// firstAttack = 1 ;
4501: LD_ADDR_EXP 33
4505: PUSH
4506: LD_INT 1
4508: ST_TO_ADDR
// end ;
4509: LD_VAR 0 1
4513: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4514: LD_INT 0
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
4524: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4525: LD_ADDR_VAR 0 8
4529: PUSH
4530: LD_STRING 07_vehicles
4532: PPUSH
4533: EMPTY
4534: PPUSH
4535: CALL_OW 30
4539: ST_TO_ADDR
// macmilan_squad := [ ] ;
4540: LD_ADDR_EXP 42
4544: PUSH
4545: EMPTY
4546: ST_TO_ADDR
// tmp_vehs := [ ] ;
4547: LD_ADDR_VAR 0 7
4551: PUSH
4552: EMPTY
4553: ST_TO_ADDR
// uc_side := 1 ;
4554: LD_ADDR_OWVAR 20
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// uc_nation := 1 ;
4562: LD_ADDR_OWVAR 21
4566: PUSH
4567: LD_INT 1
4569: ST_TO_ADDR
// if vehicles then
4570: LD_VAR 0 8
4574: IFFALSE 4733
// begin k := 1 ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: DOUBLE
4590: LD_INT 1
4592: DEC
4593: ST_TO_ADDR
4594: LD_VAR 0 8
4598: PUSH
4599: LD_INT 4
4601: DIV
4602: PUSH
4603: FOR_TO
4604: IFFALSE 4731
// begin vc_chassis = vehicles [ k ] ;
4606: LD_ADDR_OWVAR 37
4610: PUSH
4611: LD_VAR 0 8
4615: PUSH
4616: LD_VAR 0 3
4620: ARRAY
4621: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4622: LD_ADDR_OWVAR 39
4626: PUSH
4627: LD_VAR 0 8
4631: PUSH
4632: LD_VAR 0 3
4636: PUSH
4637: LD_INT 1
4639: PLUS
4640: ARRAY
4641: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4642: LD_ADDR_OWVAR 38
4646: PUSH
4647: LD_VAR 0 8
4651: PUSH
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 2
4659: PLUS
4660: ARRAY
4661: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4662: LD_ADDR_OWVAR 40
4666: PUSH
4667: LD_VAR 0 8
4671: PUSH
4672: LD_VAR 0 3
4676: PUSH
4677: LD_INT 3
4679: PLUS
4680: ARRAY
4681: ST_TO_ADDR
// k := k + 4 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 3
4691: PUSH
4692: LD_INT 4
4694: PLUS
4695: ST_TO_ADDR
// veh := CreateVehicle ;
4696: LD_ADDR_VAR 0 9
4700: PUSH
4701: CALL_OW 45
4705: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4706: LD_ADDR_VAR 0 7
4710: PUSH
4711: LD_VAR 0 7
4715: PPUSH
4716: LD_INT 1
4718: PPUSH
4719: LD_VAR 0 9
4723: PPUSH
4724: CALL_OW 2
4728: ST_TO_ADDR
// end ;
4729: GO 4603
4731: POP
4732: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4733: LD_ADDR_EXP 1
4737: PUSH
4738: LD_EXP 44
4742: PUSH
4743: LD_STRING JMM
4745: STR
4746: PPUSH
4747: LD_INT 1
4749: PPUSH
4750: CALL 7111 0 2
4754: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4755: LD_EXP 12
4759: PUSH
4760: LD_INT 1
4762: EQUAL
4763: PUSH
4764: LD_EXP 12
4768: PUSH
4769: LD_INT 3
4771: EQUAL
4772: OR
4773: PUSH
4774: LD_EXP 2
4778: NOT
4779: AND
4780: IFFALSE 4833
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4782: LD_ADDR_EXP 2
4786: PUSH
4787: LD_EXP 44
4791: PUSH
4792: LD_STRING Brown
4794: STR
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL 7111 0 2
4803: ST_TO_ADDR
// if Brown then
4804: LD_EXP 2
4808: IFFALSE 4833
// tmp := Insert ( tmp , 1 , Brown ) ;
4810: LD_ADDR_VAR 0 6
4814: PUSH
4815: LD_VAR 0 6
4819: PPUSH
4820: LD_INT 1
4822: PPUSH
4823: LD_EXP 2
4827: PPUSH
4828: CALL_OW 2
4832: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4833: LD_EXP 12
4837: PUSH
4838: LD_INT 2
4840: EQUAL
4841: PUSH
4842: LD_EXP 12
4846: PUSH
4847: LD_INT 3
4849: EQUAL
4850: OR
4851: PUSH
4852: LD_EXP 3
4856: NOT
4857: AND
4858: IFFALSE 4911
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4860: LD_ADDR_EXP 3
4864: PUSH
4865: LD_EXP 44
4869: PUSH
4870: LD_STRING Donaldson
4872: STR
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL 7111 0 2
4881: ST_TO_ADDR
// if Donaldson then
4882: LD_EXP 3
4886: IFFALSE 4911
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4888: LD_ADDR_VAR 0 6
4892: PUSH
4893: LD_VAR 0 6
4897: PPUSH
4898: LD_INT 1
4900: PPUSH
4901: LD_EXP 3
4905: PPUSH
4906: CALL_OW 2
4910: ST_TO_ADDR
// end ; if not Bobby then
4911: LD_EXP 4
4915: NOT
4916: IFFALSE 4969
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4918: LD_ADDR_EXP 4
4922: PUSH
4923: LD_EXP 44
4927: PUSH
4928: LD_STRING Bobby
4930: STR
4931: PPUSH
4932: LD_INT 1
4934: PPUSH
4935: CALL 7111 0 2
4939: ST_TO_ADDR
// if Bobby then
4940: LD_EXP 4
4944: IFFALSE 4969
// tmp := Insert ( tmp , 1 , Bobby ) ;
4946: LD_ADDR_VAR 0 6
4950: PUSH
4951: LD_VAR 0 6
4955: PPUSH
4956: LD_INT 1
4958: PPUSH
4959: LD_EXP 4
4963: PPUSH
4964: CALL_OW 2
4968: ST_TO_ADDR
// end ; if not Cyrus then
4969: LD_EXP 5
4973: NOT
4974: IFFALSE 5027
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_EXP 44
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: CALL 7111 0 2
4997: ST_TO_ADDR
// if Cyrus then
4998: LD_EXP 5
5002: IFFALSE 5027
// tmp := Insert ( tmp , 1 , Cyrus ) ;
5004: LD_ADDR_VAR 0 6
5008: PUSH
5009: LD_VAR 0 6
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_EXP 5
5021: PPUSH
5022: CALL_OW 2
5026: ST_TO_ADDR
// end ; if not Lisa then
5027: LD_EXP 6
5031: NOT
5032: IFFALSE 5085
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5034: LD_ADDR_EXP 6
5038: PUSH
5039: LD_EXP 44
5043: PUSH
5044: LD_STRING Lisa
5046: STR
5047: PPUSH
5048: LD_INT 1
5050: PPUSH
5051: CALL 7111 0 2
5055: ST_TO_ADDR
// if Lisa then
5056: LD_EXP 6
5060: IFFALSE 5085
// tmp := Insert ( tmp , 1 , Lisa ) ;
5062: LD_ADDR_VAR 0 6
5066: PUSH
5067: LD_VAR 0 6
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_EXP 6
5079: PPUSH
5080: CALL_OW 2
5084: ST_TO_ADDR
// end ; if not Frank then
5085: LD_EXP 7
5089: NOT
5090: IFFALSE 5143
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5092: LD_ADDR_EXP 7
5096: PUSH
5097: LD_EXP 44
5101: PUSH
5102: LD_STRING Frank
5104: STR
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: CALL 7111 0 2
5113: ST_TO_ADDR
// if Frank then
5114: LD_EXP 7
5118: IFFALSE 5143
// tmp := Insert ( tmp , 1 , Frank ) ;
5120: LD_ADDR_VAR 0 6
5124: PUSH
5125: LD_VAR 0 6
5129: PPUSH
5130: LD_INT 1
5132: PPUSH
5133: LD_EXP 7
5137: PPUSH
5138: CALL_OW 2
5142: ST_TO_ADDR
// end ; if not Kikuchi then
5143: LD_EXP 9
5147: NOT
5148: IFFALSE 5201
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5150: LD_ADDR_EXP 9
5154: PUSH
5155: LD_EXP 44
5159: PUSH
5160: LD_STRING Kikuchi
5162: STR
5163: PPUSH
5164: LD_INT 1
5166: PPUSH
5167: CALL 7111 0 2
5171: ST_TO_ADDR
// if Kikuchi then
5172: LD_EXP 9
5176: IFFALSE 5201
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5178: LD_ADDR_VAR 0 6
5182: PUSH
5183: LD_VAR 0 6
5187: PPUSH
5188: LD_INT 1
5190: PPUSH
5191: LD_EXP 9
5195: PPUSH
5196: CALL_OW 2
5200: ST_TO_ADDR
// end ; if not Gladstone then
5201: LD_EXP 8
5205: NOT
5206: IFFALSE 5259
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5208: LD_ADDR_EXP 8
5212: PUSH
5213: LD_EXP 44
5217: PUSH
5218: LD_STRING Gladstone
5220: STR
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: CALL 7111 0 2
5229: ST_TO_ADDR
// if Gladstone then
5230: LD_EXP 8
5234: IFFALSE 5259
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5236: LD_ADDR_VAR 0 6
5240: PUSH
5241: LD_VAR 0 6
5245: PPUSH
5246: LD_INT 1
5248: PPUSH
5249: LD_EXP 8
5253: PPUSH
5254: CALL_OW 2
5258: ST_TO_ADDR
// end ; if not Khatam then
5259: LD_EXP 10
5263: NOT
5264: IFFALSE 5317
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5266: LD_ADDR_EXP 10
5270: PUSH
5271: LD_EXP 44
5275: PUSH
5276: LD_STRING Khatam
5278: STR
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: CALL 7111 0 2
5287: ST_TO_ADDR
// if Khatam then
5288: LD_EXP 10
5292: IFFALSE 5317
// tmp := Insert ( tmp , 1 , Khatam ) ;
5294: LD_ADDR_VAR 0 6
5298: PUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 1
5306: PPUSH
5307: LD_EXP 10
5311: PPUSH
5312: CALL_OW 2
5316: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5317: LD_ADDR_VAR 0 5
5321: PUSH
5322: LD_STRING 07c_others
5324: PPUSH
5325: CALL_OW 31
5329: ST_TO_ADDR
// macmilan_squad := others ;
5330: LD_ADDR_EXP 42
5334: PUSH
5335: LD_VAR 0 5
5339: ST_TO_ADDR
// if others then
5340: LD_VAR 0 5
5344: IFFALSE 5432
// for i in others do
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_VAR 0 5
5355: PUSH
5356: FOR_IN
5357: IFFALSE 5430
// if GetClass ( i ) = 3 then
5359: LD_VAR 0 2
5363: PPUSH
5364: CALL_OW 257
5368: PUSH
5369: LD_INT 3
5371: EQUAL
5372: IFFALSE 5399
// tmp := Insert ( tmp , 1 , i ) else
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: LD_VAR 0 6
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_VAR 0 2
5391: PPUSH
5392: CALL_OW 2
5396: ST_TO_ADDR
5397: GO 5428
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5399: LD_ADDR_VAR 0 6
5403: PUSH
5404: LD_VAR 0 6
5408: PPUSH
5409: LD_VAR 0 6
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 2
5422: PPUSH
5423: CALL_OW 2
5427: ST_TO_ADDR
5428: GO 5356
5430: POP
5431: POP
// wait ( 0 0$1 ) ;
5432: LD_INT 35
5434: PPUSH
5435: CALL_OW 67
// for i in tmp do
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_VAR 0 6
5448: PUSH
5449: FOR_IN
5450: IFFALSE 5602
// begin SetDir ( i , 3 ) ;
5452: LD_VAR 0 2
5456: PPUSH
5457: LD_INT 3
5459: PPUSH
5460: CALL_OW 233
// if tmp_vehs then
5464: LD_VAR 0 7
5468: IFFALSE 5543
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5470: LD_VAR 0 7
5474: PUSH
5475: LD_INT 1
5477: ARRAY
5478: PPUSH
5479: LD_INT 3
5481: PPUSH
5482: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5486: LD_VAR 0 7
5490: PUSH
5491: LD_INT 1
5493: ARRAY
5494: PPUSH
5495: LD_INT 4
5497: PPUSH
5498: LD_INT 0
5500: PPUSH
5501: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5505: LD_VAR 0 2
5509: PPUSH
5510: LD_VAR 0 7
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PPUSH
5519: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5523: LD_ADDR_VAR 0 7
5527: PUSH
5528: LD_VAR 0 7
5532: PPUSH
5533: LD_INT 1
5535: PPUSH
5536: CALL_OW 3
5540: ST_TO_ADDR
// end else
5541: GO 5558
// PlaceUnitArea ( i , GammaSupport , false ) ;
5543: LD_VAR 0 2
5547: PPUSH
5548: LD_INT 4
5550: PPUSH
5551: LD_INT 0
5553: PPUSH
5554: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 77
5565: PPUSH
5566: LD_INT 16
5568: PPUSH
5569: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5573: LD_INT 35
5575: PPUSH
5576: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5580: LD_INT 4
5582: PPUSH
5583: LD_INT 22
5585: PUSH
5586: LD_INT 1
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 70
5597: NOT
5598: IFFALSE 5573
// end ;
5600: GO 5449
5602: POP
5603: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_INT 4
5611: PPUSH
5612: LD_INT 0
5614: PPUSH
5615: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5619: LD_EXP 1
5623: PPUSH
5624: LD_INT 77
5626: PPUSH
5627: LD_INT 16
5629: PPUSH
5630: CALL_OW 111
// end ;
5634: LD_VAR 0 1
5638: RET
// export function PrepareSikorsky ; begin
5639: LD_INT 0
5641: PPUSH
// uc_side = 4 ;
5642: LD_ADDR_OWVAR 20
5646: PUSH
5647: LD_INT 4
5649: ST_TO_ADDR
// uc_nation = 1 ;
5650: LD_ADDR_OWVAR 21
5654: PUSH
5655: LD_INT 1
5657: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5658: LD_ADDR_EXP 16
5662: PUSH
5663: LD_STRING Sikorski
5665: PPUSH
5666: LD_INT 0
5668: PPUSH
5669: CALL 7111 0 2
5673: ST_TO_ADDR
// vc_engine = 1 ;
5674: LD_ADDR_OWVAR 39
5678: PUSH
5679: LD_INT 1
5681: ST_TO_ADDR
// vc_control = 1 ;
5682: LD_ADDR_OWVAR 38
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5690: LD_ADDR_OWVAR 40
5694: PUSH
5695: LD_INT 5
5697: PUSH
5698: LD_INT 3
5700: PUSH
5701: LD_INT 4
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: LIST
5708: PUSH
5709: LD_OWVAR 67
5713: ARRAY
5714: ST_TO_ADDR
// vc_chassis = 4 ;
5715: LD_ADDR_OWVAR 37
5719: PUSH
5720: LD_INT 4
5722: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5723: LD_ADDR_EXP 17
5727: PUSH
5728: CALL_OW 45
5732: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5733: LD_EXP 17
5737: PPUSH
5738: LD_INT 3
5740: PPUSH
5741: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5745: LD_INT 35
5747: PPUSH
5748: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5752: LD_EXP 17
5756: PPUSH
5757: LD_INT 18
5759: PPUSH
5760: LD_INT 5
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5770: LD_EXP 17
5774: PPUSH
5775: CALL_OW 305
5779: IFFALSE 5745
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5781: LD_EXP 16
5785: PPUSH
5786: LD_EXP 17
5790: PPUSH
5791: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5795: LD_EXP 17
5799: PPUSH
5800: LD_INT 5
5802: PPUSH
5803: CALL_OW 113
// end ;
5807: LD_VAR 0 1
5811: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5812: LD_INT 0
5814: PPUSH
5815: PPUSH
5816: PPUSH
5817: PPUSH
// InitHc ;
5818: CALL_OW 19
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5822: LD_ADDR_VAR 0 2
5826: PUSH
5827: DOUBLE
5828: LD_INT 1
5830: DEC
5831: ST_TO_ADDR
5832: LD_INT 8
5834: PUSH
5835: LD_INT 7
5837: PUSH
5838: LD_INT 7
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: PUSH
5846: LD_OWVAR 67
5850: ARRAY
5851: PUSH
5852: FOR_TO
5853: IFFALSE 5969
// begin uc_side = 4 ;
5855: LD_ADDR_OWVAR 20
5859: PUSH
5860: LD_INT 4
5862: ST_TO_ADDR
// uc_nation = 1 ;
5863: LD_ADDR_OWVAR 21
5867: PUSH
5868: LD_INT 1
5870: ST_TO_ADDR
// hc_name =  ;
5871: LD_ADDR_OWVAR 26
5875: PUSH
5876: LD_STRING 
5878: ST_TO_ADDR
// hc_gallery =  ;
5879: LD_ADDR_OWVAR 33
5883: PUSH
5884: LD_STRING 
5886: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5887: LD_INT 0
5889: PPUSH
5890: LD_INT 1
5892: PPUSH
5893: LD_INT 5
5895: PPUSH
5896: LD_INT 8
5898: PPUSH
5899: CALL_OW 12
5903: PPUSH
5904: CALL_OW 380
// un = CreateHuman ;
5908: LD_ADDR_VAR 0 3
5912: PUSH
5913: CALL_OW 44
5917: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5918: LD_VAR 0 3
5922: PPUSH
5923: LD_INT 3
5925: PPUSH
5926: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5930: LD_VAR 0 3
5934: PPUSH
5935: LD_INT 9
5937: PPUSH
5938: LD_INT 0
5940: PPUSH
5941: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5945: LD_VAR 0 3
5949: PPUSH
5950: LD_INT 53
5952: PPUSH
5953: LD_INT 23
5955: PPUSH
5956: CALL_OW 111
// wait ( 0 0$1 ) ;
5960: LD_INT 35
5962: PPUSH
5963: CALL_OW 67
// end ;
5967: GO 5852
5969: POP
5970: POP
// for i = 1 to 3 do
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 3
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6101
// begin uc_side = 4 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 4
5994: ST_TO_ADDR
// uc_nation = 1 ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// hc_name =  ;
6003: LD_ADDR_OWVAR 26
6007: PUSH
6008: LD_STRING 
6010: ST_TO_ADDR
// hc_gallery =  ;
6011: LD_ADDR_OWVAR 33
6015: PUSH
6016: LD_STRING 
6018: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6019: LD_INT 0
6021: PPUSH
6022: LD_INT 4
6024: PPUSH
6025: LD_INT 5
6027: PPUSH
6028: LD_INT 8
6030: PPUSH
6031: CALL_OW 12
6035: PPUSH
6036: CALL_OW 380
// un = CreateHuman ;
6040: LD_ADDR_VAR 0 3
6044: PUSH
6045: CALL_OW 44
6049: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6050: LD_VAR 0 3
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6062: LD_VAR 0 3
6066: PPUSH
6067: LD_INT 9
6069: PPUSH
6070: LD_INT 0
6072: PPUSH
6073: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_INT 53
6084: PPUSH
6085: LD_INT 23
6087: PPUSH
6088: CALL_OW 111
// wait ( 0 0$1 ) ;
6092: LD_INT 35
6094: PPUSH
6095: CALL_OW 67
// end ;
6099: GO 5984
6101: POP
6102: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6103: LD_ADDR_VAR 0 2
6107: PUSH
6108: DOUBLE
6109: LD_INT 1
6111: DEC
6112: ST_TO_ADDR
6113: LD_INT 9
6115: PUSH
6116: LD_INT 8
6118: PUSH
6119: LD_INT 7
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: PUSH
6127: LD_OWVAR 67
6131: ARRAY
6132: PUSH
6133: FOR_TO
6134: IFFALSE 6368
// begin uc_side = 4 ;
6136: LD_ADDR_OWVAR 20
6140: PUSH
6141: LD_INT 4
6143: ST_TO_ADDR
// uc_nation = 1 ;
6144: LD_ADDR_OWVAR 21
6148: PUSH
6149: LD_INT 1
6151: ST_TO_ADDR
// vc_engine = 1 ;
6152: LD_ADDR_OWVAR 39
6156: PUSH
6157: LD_INT 1
6159: ST_TO_ADDR
// vc_control = 1 ;
6160: LD_ADDR_OWVAR 38
6164: PUSH
6165: LD_INT 1
6167: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6168: LD_ADDR_OWVAR 40
6172: PUSH
6173: LD_INT 7
6175: PUSH
6176: LD_INT 4
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: LD_INT 6
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: PUSH
6191: LD_VAR 0 2
6195: PUSH
6196: LD_INT 4
6198: MOD
6199: PUSH
6200: LD_INT 1
6202: PLUS
6203: ARRAY
6204: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6205: LD_ADDR_OWVAR 37
6209: PUSH
6210: LD_INT 3
6212: PUSH
6213: LD_INT 3
6215: PUSH
6216: LD_INT 4
6218: PUSH
6219: LD_INT 4
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: PUSH
6228: LD_VAR 0 2
6232: PUSH
6233: LD_INT 4
6235: MOD
6236: PUSH
6237: LD_INT 1
6239: PLUS
6240: ARRAY
6241: ST_TO_ADDR
// veh = CreateVehicle ;
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: CALL_OW 45
6251: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6252: LD_VAR 0 4
6256: PPUSH
6257: LD_INT 3
6259: PPUSH
6260: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6264: LD_VAR 0 4
6268: PPUSH
6269: LD_INT 9
6271: PPUSH
6272: LD_INT 0
6274: PPUSH
6275: CALL_OW 49
// InitHc ;
6279: CALL_OW 19
// hc_name =  ;
6283: LD_ADDR_OWVAR 26
6287: PUSH
6288: LD_STRING 
6290: ST_TO_ADDR
// hc_gallery =  ;
6291: LD_ADDR_OWVAR 33
6295: PUSH
6296: LD_STRING 
6298: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6299: LD_INT 0
6301: PPUSH
6302: LD_INT 3
6304: PPUSH
6305: LD_INT 5
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: CALL_OW 12
6315: PPUSH
6316: CALL_OW 380
// un = CreateHuman ;
6320: LD_ADDR_VAR 0 3
6324: PUSH
6325: CALL_OW 44
6329: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6330: LD_VAR 0 3
6334: PPUSH
6335: LD_VAR 0 4
6339: PPUSH
6340: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6344: LD_VAR 0 3
6348: PPUSH
6349: LD_INT 53
6351: PPUSH
6352: LD_INT 23
6354: PPUSH
6355: CALL_OW 111
// wait ( 0 0$5 ) ;
6359: LD_INT 175
6361: PPUSH
6362: CALL_OW 67
// end ;
6366: GO 6133
6368: POP
6369: POP
// end ; end_of_file
6370: LD_VAR 0 1
6374: RET
// export function PrepareRussianCommander ; begin
6375: LD_INT 0
6377: PPUSH
// uc_side = 3 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 3
6385: ST_TO_ADDR
// uc_nation = 3 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 3
6393: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6394: LD_ADDR_EXP 24
6398: PUSH
6399: LD_STRING Borodin
6401: PPUSH
6402: CALL_OW 25
6406: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6407: LD_EXP 24
6411: PPUSH
6412: LD_INT 25
6414: PPUSH
6415: LD_INT 0
6417: PPUSH
6418: CALL_OW 49
// end ;
6422: LD_VAR 0 1
6426: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6427: LD_INT 0
6429: PPUSH
6430: PPUSH
6431: PPUSH
6432: PPUSH
// for i = 1 to 10 do
6433: LD_ADDR_VAR 0 2
6437: PUSH
6438: DOUBLE
6439: LD_INT 1
6441: DEC
6442: ST_TO_ADDR
6443: LD_INT 10
6445: PUSH
6446: FOR_TO
6447: IFFALSE 6521
// begin uc_side = 6 ;
6449: LD_ADDR_OWVAR 20
6453: PUSH
6454: LD_INT 6
6456: ST_TO_ADDR
// uc_nation = 3 ;
6457: LD_ADDR_OWVAR 21
6461: PUSH
6462: LD_INT 3
6464: ST_TO_ADDR
// hc_gallery =  ;
6465: LD_ADDR_OWVAR 33
6469: PUSH
6470: LD_STRING 
6472: ST_TO_ADDR
// hc_name =  ;
6473: LD_ADDR_OWVAR 26
6477: PUSH
6478: LD_STRING 
6480: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6481: LD_INT 0
6483: PPUSH
6484: LD_INT 1
6486: PPUSH
6487: LD_INT 3
6489: PPUSH
6490: CALL_OW 380
// un = CreateHuman ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: CALL_OW 44
6503: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6504: LD_VAR 0 3
6508: PPUSH
6509: LD_INT 1
6511: PPUSH
6512: LD_INT 0
6514: PPUSH
6515: CALL_OW 49
// end ;
6519: GO 6446
6521: POP
6522: POP
// for i = 1 to 3 do
6523: LD_ADDR_VAR 0 2
6527: PUSH
6528: DOUBLE
6529: LD_INT 1
6531: DEC
6532: ST_TO_ADDR
6533: LD_INT 3
6535: PUSH
6536: FOR_TO
6537: IFFALSE 6686
// begin uc_side = 6 ;
6539: LD_ADDR_OWVAR 20
6543: PUSH
6544: LD_INT 6
6546: ST_TO_ADDR
// uc_nation = 3 ;
6547: LD_ADDR_OWVAR 21
6551: PUSH
6552: LD_INT 3
6554: ST_TO_ADDR
// vc_engine = 1 ;
6555: LD_ADDR_OWVAR 39
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// vc_control = 1 ;
6563: LD_ADDR_OWVAR 38
6567: PUSH
6568: LD_INT 1
6570: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6571: LD_ADDR_OWVAR 40
6575: PUSH
6576: LD_INT 43
6578: PUSH
6579: LD_INT 44
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 1
6588: PPUSH
6589: LD_INT 2
6591: PPUSH
6592: CALL_OW 12
6596: ARRAY
6597: ST_TO_ADDR
// vc_chassis = 22 ;
6598: LD_ADDR_OWVAR 37
6602: PUSH
6603: LD_INT 22
6605: ST_TO_ADDR
// veh = CreateVehicle ;
6606: LD_ADDR_VAR 0 4
6610: PUSH
6611: CALL_OW 45
6615: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6616: LD_VAR 0 4
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 0
6626: PPUSH
6627: CALL_OW 49
// hc_gallery =  ;
6631: LD_ADDR_OWVAR 33
6635: PUSH
6636: LD_STRING 
6638: ST_TO_ADDR
// hc_name =  ;
6639: LD_ADDR_OWVAR 26
6643: PUSH
6644: LD_STRING 
6646: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6647: LD_INT 0
6649: PPUSH
6650: LD_INT 3
6652: PPUSH
6653: LD_INT 4
6655: PPUSH
6656: CALL_OW 380
// un = CreateHuman ;
6660: LD_ADDR_VAR 0 3
6664: PUSH
6665: CALL_OW 44
6669: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6670: LD_VAR 0 3
6674: PPUSH
6675: LD_VAR 0 4
6679: PPUSH
6680: CALL_OW 52
// end ;
6684: GO 6536
6686: POP
6687: POP
// end ;
6688: LD_VAR 0 1
6692: RET
// export function PrepareRussians ; var i , un ; begin
6693: LD_INT 0
6695: PPUSH
6696: PPUSH
6697: PPUSH
// for i = 1 to 8 do
6698: LD_ADDR_VAR 0 2
6702: PUSH
6703: DOUBLE
6704: LD_INT 1
6706: DEC
6707: ST_TO_ADDR
6708: LD_INT 8
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6798
// begin uc_side = 3 ;
6714: LD_ADDR_OWVAR 20
6718: PUSH
6719: LD_INT 3
6721: ST_TO_ADDR
// uc_nation = 3 ;
6722: LD_ADDR_OWVAR 21
6726: PUSH
6727: LD_INT 3
6729: ST_TO_ADDR
// hc_gallery =  ;
6730: LD_ADDR_OWVAR 33
6734: PUSH
6735: LD_STRING 
6737: ST_TO_ADDR
// hc_name =  ;
6738: LD_ADDR_OWVAR 26
6742: PUSH
6743: LD_STRING 
6745: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6746: LD_INT 0
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_EXP 25
6756: PPUSH
6757: LD_EXP 26
6761: PPUSH
6762: CALL_OW 12
6766: PPUSH
6767: CALL_OW 380
// un = CreateHuman ;
6771: LD_ADDR_VAR 0 3
6775: PUSH
6776: CALL_OW 44
6780: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6781: LD_VAR 0 3
6785: PPUSH
6786: LD_INT 3
6788: PPUSH
6789: LD_INT 0
6791: PPUSH
6792: CALL_OW 49
// end ;
6796: GO 6711
6798: POP
6799: POP
// for i = 1 to 4 do
6800: LD_ADDR_VAR 0 2
6804: PUSH
6805: DOUBLE
6806: LD_INT 1
6808: DEC
6809: ST_TO_ADDR
6810: LD_INT 4
6812: PUSH
6813: FOR_TO
6814: IFFALSE 6900
// begin uc_side = 3 ;
6816: LD_ADDR_OWVAR 20
6820: PUSH
6821: LD_INT 3
6823: ST_TO_ADDR
// uc_nation = 3 ;
6824: LD_ADDR_OWVAR 21
6828: PUSH
6829: LD_INT 3
6831: ST_TO_ADDR
// hc_gallery =  ;
6832: LD_ADDR_OWVAR 33
6836: PUSH
6837: LD_STRING 
6839: ST_TO_ADDR
// hc_name =  ;
6840: LD_ADDR_OWVAR 26
6844: PUSH
6845: LD_STRING 
6847: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6848: LD_INT 0
6850: PPUSH
6851: LD_INT 2
6853: PPUSH
6854: LD_EXP 25
6858: PPUSH
6859: LD_EXP 26
6863: PPUSH
6864: CALL_OW 12
6868: PPUSH
6869: CALL_OW 380
// un = CreateHuman ;
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: CALL_OW 44
6882: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6883: LD_VAR 0 3
6887: PPUSH
6888: LD_INT 3
6890: PPUSH
6891: LD_INT 0
6893: PPUSH
6894: CALL_OW 49
// end ;
6898: GO 6813
6900: POP
6901: POP
// for i = 1 to 3 do
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: DOUBLE
6908: LD_INT 1
6910: DEC
6911: ST_TO_ADDR
6912: LD_INT 3
6914: PUSH
6915: FOR_TO
6916: IFFALSE 7002
// begin uc_side = 3 ;
6918: LD_ADDR_OWVAR 20
6922: PUSH
6923: LD_INT 3
6925: ST_TO_ADDR
// uc_nation = 3 ;
6926: LD_ADDR_OWVAR 21
6930: PUSH
6931: LD_INT 3
6933: ST_TO_ADDR
// hc_gallery =  ;
6934: LD_ADDR_OWVAR 33
6938: PUSH
6939: LD_STRING 
6941: ST_TO_ADDR
// hc_name =  ;
6942: LD_ADDR_OWVAR 26
6946: PUSH
6947: LD_STRING 
6949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6950: LD_INT 0
6952: PPUSH
6953: LD_INT 3
6955: PPUSH
6956: LD_EXP 25
6960: PPUSH
6961: LD_EXP 26
6965: PPUSH
6966: CALL_OW 12
6970: PPUSH
6971: CALL_OW 380
// un = CreateHuman ;
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: CALL_OW 44
6984: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6985: LD_VAR 0 3
6989: PPUSH
6990: LD_INT 3
6992: PPUSH
6993: LD_INT 0
6995: PPUSH
6996: CALL_OW 49
// end ;
7000: GO 6915
7002: POP
7003: POP
// for i = 1 to 2 do
7004: LD_ADDR_VAR 0 2
7008: PUSH
7009: DOUBLE
7010: LD_INT 1
7012: DEC
7013: ST_TO_ADDR
7014: LD_INT 2
7016: PUSH
7017: FOR_TO
7018: IFFALSE 7104
// begin uc_side = 3 ;
7020: LD_ADDR_OWVAR 20
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// uc_nation = 3 ;
7028: LD_ADDR_OWVAR 21
7032: PUSH
7033: LD_INT 3
7035: ST_TO_ADDR
// hc_gallery =  ;
7036: LD_ADDR_OWVAR 33
7040: PUSH
7041: LD_STRING 
7043: ST_TO_ADDR
// hc_name =  ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING 
7051: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7052: LD_INT 0
7054: PPUSH
7055: LD_INT 4
7057: PPUSH
7058: LD_EXP 25
7062: PPUSH
7063: LD_EXP 26
7067: PPUSH
7068: CALL_OW 12
7072: PPUSH
7073: CALL_OW 380
// un = CreateHuman ;
7077: LD_ADDR_VAR 0 3
7081: PUSH
7082: CALL_OW 44
7086: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7087: LD_VAR 0 3
7091: PPUSH
7092: LD_INT 3
7094: PPUSH
7095: LD_INT 0
7097: PPUSH
7098: CALL_OW 49
// end ;
7102: GO 7017
7104: POP
7105: POP
// end ; end_of_file
7106: LD_VAR 0 1
7110: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7111: LD_INT 0
7113: PPUSH
7114: PPUSH
// if exist_mode then
7115: LD_VAR 0 2
7119: IFFALSE 7138
// unit := CreateCharacter ( ident ) else
7121: LD_ADDR_VAR 0 4
7125: PUSH
7126: LD_VAR 0 1
7130: PPUSH
7131: CALL_OW 34
7135: ST_TO_ADDR
7136: GO 7153
// unit := NewCharacter ( ident ) ;
7138: LD_ADDR_VAR 0 4
7142: PUSH
7143: LD_VAR 0 1
7147: PPUSH
7148: CALL_OW 25
7152: ST_TO_ADDR
// result := unit ;
7153: LD_ADDR_VAR 0 3
7157: PUSH
7158: LD_VAR 0 4
7162: ST_TO_ADDR
// end ;
7163: LD_VAR 0 3
7167: RET
// export function Video ( mode ) ; begin
7168: LD_INT 0
7170: PPUSH
// ingame_video = mode ;
7171: LD_ADDR_OWVAR 52
7175: PUSH
7176: LD_VAR 0 1
7180: ST_TO_ADDR
// interface_hidden = mode ;
7181: LD_ADDR_OWVAR 54
7185: PUSH
7186: LD_VAR 0 1
7190: ST_TO_ADDR
// end ;
7191: LD_VAR 0 2
7195: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7196: LD_INT 0
7198: PPUSH
7199: PPUSH
7200: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7201: LD_ADDR_VAR 0 1
7205: PUSH
7206: LD_VAR 0 1
7210: PUSH
7211: LD_EXP 1
7215: PUSH
7216: LD_EXP 2
7220: PUSH
7221: LD_EXP 3
7225: PUSH
7226: LD_EXP 4
7230: PUSH
7231: LD_EXP 5
7235: PUSH
7236: LD_EXP 6
7240: PUSH
7241: LD_EXP 7
7245: PUSH
7246: LD_EXP 8
7250: PUSH
7251: LD_EXP 9
7255: PUSH
7256: LD_EXP 10
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: DIFF
7273: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7274: LD_ADDR_VAR 0 6
7278: PUSH
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 1
7286: PPUSH
7287: LD_VAR 0 1
7291: PPUSH
7292: CALL_OW 12
7296: ARRAY
7297: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7298: LD_VAR 0 6
7302: PPUSH
7303: CALL_OW 258
7307: PUSH
7308: LD_INT 1
7310: EQUAL
7311: IFFALSE 7329
// Say ( speaker , dialogMID ) else
7313: LD_VAR 0 6
7317: PPUSH
7318: LD_VAR 0 2
7322: PPUSH
7323: CALL_OW 88
7327: GO 7343
// Say ( speaker , dialogFID ) ;
7329: LD_VAR 0 6
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 88
// result := speaker ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: LD_VAR 0 6
7352: ST_TO_ADDR
// end ;
7353: LD_VAR 0 4
7357: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// uc_side := GetSide ( b ) ;
7363: LD_ADDR_OWVAR 20
7367: PUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: CALL_OW 255
7377: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7378: LD_ADDR_OWVAR 21
7382: PUSH
7383: LD_VAR 0 2
7387: PPUSH
7388: CALL_OW 248
7392: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7393: LD_INT 0
7395: PPUSH
7396: LD_INT 1
7398: PPUSH
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7408: LD_ADDR_VAR 0 5
7412: PUSH
7413: LD_VAR 0 2
7417: PPUSH
7418: CALL_OW 254
7422: PUSH
7423: LD_INT 3
7425: MINUS
7426: ST_TO_ADDR
// if dir < 0 then
7427: LD_VAR 0 5
7431: PUSH
7432: LD_INT 0
7434: LESS
7435: IFFALSE 7451
// dir := 6 + dir ;
7437: LD_ADDR_VAR 0 5
7441: PUSH
7442: LD_INT 6
7444: PUSH
7445: LD_VAR 0 5
7449: PLUS
7450: ST_TO_ADDR
// un := CreateHuman ;
7451: LD_ADDR_VAR 0 4
7455: PUSH
7456: CALL_OW 44
7460: ST_TO_ADDR
// SetDir ( un , dir ) ;
7461: LD_VAR 0 4
7465: PPUSH
7466: LD_VAR 0 5
7470: PPUSH
7471: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7475: LD_VAR 0 4
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 52
// end ;
7489: LD_VAR 0 3
7493: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7494: LD_INT 0
7496: PPUSH
7497: PPUSH
7498: PPUSH
7499: PPUSH
// for i = 1 to count do
7500: LD_ADDR_VAR 0 8
7504: PUSH
7505: DOUBLE
7506: LD_INT 1
7508: DEC
7509: ST_TO_ADDR
7510: LD_VAR 0 6
7514: PUSH
7515: FOR_TO
7516: IFFALSE 7597
// begin uc_side = side ;
7518: LD_ADDR_OWVAR 20
7522: PUSH
7523: LD_VAR 0 1
7527: ST_TO_ADDR
// uc_nation = nation ;
7528: LD_ADDR_OWVAR 21
7532: PUSH
7533: LD_VAR 0 2
7537: ST_TO_ADDR
// hc_gallery =  ;
7538: LD_ADDR_OWVAR 33
7542: PUSH
7543: LD_STRING 
7545: ST_TO_ADDR
// hc_name =  ;
7546: LD_ADDR_OWVAR 26
7550: PUSH
7551: LD_STRING 
7553: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7554: LD_INT 0
7556: PPUSH
7557: LD_VAR 0 5
7561: PPUSH
7562: LD_VAR 0 4
7566: PPUSH
7567: CALL_OW 380
// un = CreateHuman ;
7571: LD_ADDR_VAR 0 10
7575: PUSH
7576: CALL_OW 44
7580: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7581: LD_VAR 0 10
7585: PPUSH
7586: LD_VAR 0 3
7590: PPUSH
7591: CALL_OW 52
// end ;
7595: GO 7515
7597: POP
7598: POP
// end ;
7599: LD_VAR 0 7
7603: RET
// export function PrepareDifficulty ; begin
7604: LD_INT 0
7606: PPUSH
// if Difficulty = 1 then
7607: LD_OWVAR 67
7611: PUSH
7612: LD_INT 1
7614: EQUAL
7615: IFFALSE 7633
// begin RuSolMinLevel = 3 ;
7617: LD_ADDR_EXP 25
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7625: LD_ADDR_EXP 26
7629: PUSH
7630: LD_INT 5
7632: ST_TO_ADDR
// end ; if Difficulty = 2 then
7633: LD_OWVAR 67
7637: PUSH
7638: LD_INT 2
7640: EQUAL
7641: IFFALSE 7711
// begin RuSolMinLevel = 5 ;
7643: LD_ADDR_EXP 25
7647: PUSH
7648: LD_INT 5
7650: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7651: LD_ADDR_EXP 26
7655: PUSH
7656: LD_INT 6
7658: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7659: LD_INT 51
7661: PPUSH
7662: LD_INT 3
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7672: LD_INT 57
7674: PPUSH
7675: LD_INT 3
7677: PPUSH
7678: LD_INT 1
7680: PPUSH
7681: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7685: LD_INT 57
7687: PPUSH
7688: LD_INT 6
7690: PPUSH
7691: LD_INT 2
7693: PPUSH
7694: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7698: LD_INT 51
7700: PPUSH
7701: LD_INT 6
7703: PPUSH
7704: LD_INT 2
7706: PPUSH
7707: CALL_OW 322
// end ; if Difficulty = 3 then
7711: LD_OWVAR 67
7715: PUSH
7716: LD_INT 3
7718: EQUAL
7719: IFFALSE 7802
// begin RuSolMinLevel = 5 ;
7721: LD_ADDR_EXP 25
7725: PUSH
7726: LD_INT 5
7728: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7729: LD_ADDR_EXP 26
7733: PUSH
7734: LD_INT 6
7736: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7737: LD_INT 57
7739: PPUSH
7740: LD_INT 3
7742: PPUSH
7743: LD_INT 1
7745: PPUSH
7746: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7750: LD_INT 51
7752: PPUSH
7753: LD_INT 3
7755: PPUSH
7756: LD_INT 1
7758: PPUSH
7759: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7763: LD_INT 52
7765: PPUSH
7766: LD_INT 3
7768: PPUSH
7769: LD_INT 1
7771: PPUSH
7772: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7776: LD_INT 57
7778: PPUSH
7779: LD_INT 6
7781: PPUSH
7782: LD_INT 2
7784: PPUSH
7785: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7789: LD_INT 52
7791: PPUSH
7792: LD_INT 6
7794: PPUSH
7795: LD_INT 2
7797: PPUSH
7798: CALL_OW 322
// end ; end ;
7802: LD_VAR 0 1
7806: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7807: LD_INT 0
7809: PPUSH
7810: PPUSH
7811: PPUSH
7812: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: LD_INT 22
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 25
7830: PUSH
7831: LD_INT 2
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 69
7846: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7847: LD_ADDR_VAR 0 4
7851: PUSH
7852: LD_INT 4
7854: PUSH
7855: LD_INT 75
7857: PUSH
7858: LD_INT 79
7860: PUSH
7861: LD_INT 2
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 4
7872: PUSH
7873: LD_INT 113
7875: PUSH
7876: LD_INT 94
7878: PUSH
7879: LD_INT 4
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 29
7890: PUSH
7891: LD_INT 106
7893: PUSH
7894: LD_INT 97
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 26
7908: PUSH
7909: LD_INT 93
7911: PUSH
7912: LD_INT 97
7914: PUSH
7915: LD_INT 5
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 2
7926: PUSH
7927: LD_INT 100
7929: PUSH
7930: LD_INT 89
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 17
7944: PUSH
7945: LD_INT 96
7947: PUSH
7948: LD_INT 89
7950: PUSH
7951: LD_INT 1
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 32
7962: PUSH
7963: LD_INT 78
7965: PUSH
7966: LD_INT 94
7968: PUSH
7969: LD_INT 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 32
7980: PUSH
7981: LD_INT 95
7983: PUSH
7984: LD_INT 82
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 32
7998: PUSH
7999: LD_INT 104
8001: PUSH
8002: LD_INT 85
8004: PUSH
8005: LD_INT 2
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 32
8016: PUSH
8017: LD_INT 81
8019: PUSH
8020: LD_INT 78
8022: PUSH
8023: LD_INT 2
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 33
8034: PUSH
8035: LD_INT 109
8037: PUSH
8038: LD_INT 90
8040: PUSH
8041: LD_INT 3
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 33
8052: PUSH
8053: LD_INT 88
8055: PUSH
8056: LD_INT 79
8058: PUSH
8059: LD_INT 3
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 33
8070: PUSH
8071: LD_INT 76
8073: PUSH
8074: LD_INT 87
8076: PUSH
8077: LD_INT 1
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 26
8088: PUSH
8089: LD_INT 96
8091: PUSH
8092: LD_INT 97
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 26
8106: PUSH
8107: LD_INT 85
8109: PUSH
8110: LD_INT 84
8112: PUSH
8113: LD_INT 2
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 6
8124: PUSH
8125: LD_INT 88
8127: PUSH
8128: LD_INT 95
8130: PUSH
8131: LD_INT 0
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 19
8142: PUSH
8143: LD_INT 103
8145: PUSH
8146: LD_INT 89
8148: PUSH
8149: LD_INT 4
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 16
8160: PUSH
8161: LD_INT 97
8163: PUSH
8164: LD_INT 86
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 24
8178: PUSH
8179: LD_INT 100
8181: PUSH
8182: LD_INT 85
8184: PUSH
8185: LD_INT 3
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: ST_TO_ADDR
// for i := 1 to buildingsTab do
8215: LD_ADDR_VAR 0 2
8219: PUSH
8220: DOUBLE
8221: LD_INT 1
8223: DEC
8224: ST_TO_ADDR
8225: LD_VAR 0 4
8229: PUSH
8230: FOR_TO
8231: IFFALSE 8304
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8233: LD_VAR 0 3
8237: PPUSH
8238: LD_VAR 0 4
8242: PUSH
8243: LD_VAR 0 2
8247: ARRAY
8248: PUSH
8249: LD_INT 1
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 4
8257: PUSH
8258: LD_VAR 0 2
8262: ARRAY
8263: PUSH
8264: LD_INT 2
8266: ARRAY
8267: PPUSH
8268: LD_VAR 0 4
8272: PUSH
8273: LD_VAR 0 2
8277: ARRAY
8278: PUSH
8279: LD_INT 3
8281: ARRAY
8282: PPUSH
8283: LD_VAR 0 4
8287: PUSH
8288: LD_VAR 0 2
8292: ARRAY
8293: PUSH
8294: LD_INT 4
8296: ARRAY
8297: PPUSH
8298: CALL_OW 205
8302: GO 8230
8304: POP
8305: POP
// end ;
8306: LD_VAR 0 1
8310: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8311: LD_INT 0
8313: PPUSH
8314: PPUSH
// for i in charactersList do
8315: LD_ADDR_VAR 0 4
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: FOR_IN
8326: IFFALSE 8344
// SaveCharacters ( i , ident ) ;
8328: LD_VAR 0 4
8332: PPUSH
8333: LD_VAR 0 2
8337: PPUSH
8338: CALL_OW 38
8342: GO 8325
8344: POP
8345: POP
// end ;
8346: LD_VAR 0 3
8350: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8351: LD_INT 0
8353: PPUSH
8354: PPUSH
8355: PPUSH
8356: PPUSH
8357: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8358: LD_ADDR_VAR 0 8
8362: PUSH
8363: LD_INT 48
8365: PUSH
8366: LD_INT 49
8368: PUSH
8369: LD_INT 50
8371: PUSH
8372: LD_INT 20
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: LD_INT 51
8380: PUSH
8381: LD_INT 52
8383: PUSH
8384: LD_INT 69
8386: PUSH
8387: LD_INT 39
8389: PUSH
8390: LD_INT 34
8392: PUSH
8393: LD_INT 40
8395: PUSH
8396: LD_INT 53
8398: PUSH
8399: LD_INT 71
8401: PUSH
8402: LD_INT 57
8404: PUSH
8405: LD_INT 58
8407: PUSH
8408: LD_INT 44
8410: PUSH
8411: LD_INT 32
8413: PUSH
8414: LD_INT 27
8416: PUSH
8417: LD_INT 23
8419: PUSH
8420: LD_INT 33
8422: PUSH
8423: LD_INT 59
8425: PUSH
8426: LD_INT 54
8428: PUSH
8429: LD_INT 55
8431: PUSH
8432: LD_INT 56
8434: PUSH
8435: LD_INT 63
8437: PUSH
8438: LD_INT 64
8440: PUSH
8441: LD_INT 65
8443: PUSH
8444: LD_INT 30
8446: PUSH
8447: LD_INT 31
8449: PUSH
8450: LD_INT 21
8452: PUSH
8453: LD_INT 22
8455: PUSH
8456: LD_INT 25
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8493: LD_ADDR_VAR 0 5
8497: PUSH
8498: DOUBLE
8499: LD_INT 1
8501: DEC
8502: ST_TO_ADDR
8503: LD_VAR 0 8
8507: PUSH
8508: FOR_TO
8509: IFFALSE 8585
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8511: LD_VAR 0 8
8515: PUSH
8516: LD_VAR 0 5
8520: ARRAY
8521: PPUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 321
8531: PUSH
8532: LD_INT 1
8534: EQUAL
8535: PUSH
8536: LD_VAR 0 8
8540: PUSH
8541: LD_VAR 0 5
8545: ARRAY
8546: PPUSH
8547: LD_VAR 0 3
8551: PPUSH
8552: CALL_OW 482
8556: PUSH
8557: LD_INT 1
8559: EQUAL
8560: AND
8561: IFFALSE 8583
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8563: LD_VAR 0 2
8567: PPUSH
8568: LD_VAR 0 8
8572: PUSH
8573: LD_VAR 0 5
8577: ARRAY
8578: PPUSH
8579: CALL_OW 184
8583: GO 8508
8585: POP
8586: POP
// end ;
8587: LD_VAR 0 4
8591: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8592: LD_INT 0
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
8598: PPUSH
8599: PPUSH
8600: PPUSH
8601: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8602: LD_ADDR_VAR 0 6
8606: PUSH
8607: LD_VAR 0 2
8611: PPUSH
8612: LD_INT 22
8614: PUSH
8615: LD_VAR 0 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 56
8626: PUSH
8627: EMPTY
8628: LIST
8629: PUSH
8630: LD_INT 24
8632: PUSH
8633: LD_INT 700
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: LD_INT 60
8645: PUSH
8646: EMPTY
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 2
8655: PUSH
8656: LD_INT 25
8658: PUSH
8659: LD_INT 1
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 25
8668: PUSH
8669: LD_INT 5
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 25
8678: PUSH
8679: LD_INT 8
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 25
8688: PUSH
8689: LD_INT 9
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 70
8714: PUSH
8715: LD_EXP 24
8719: PUSH
8720: EMPTY
8721: LIST
8722: DIFF
8723: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8724: LD_ADDR_VAR 0 7
8728: PUSH
8729: LD_VAR 0 2
8733: PPUSH
8734: LD_INT 22
8736: PUSH
8737: LD_VAR 0 1
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 30
8748: PUSH
8749: LD_INT 32
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 58
8758: PUSH
8759: EMPTY
8760: LIST
8761: PUSH
8762: LD_INT 24
8764: PUSH
8765: LD_INT 251
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 70
8782: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8783: LD_ADDR_VAR 0 9
8787: PUSH
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_INT 22
8795: PUSH
8796: LD_VAR 0 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 30
8810: PUSH
8811: LD_INT 4
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 30
8820: PUSH
8821: LD_INT 5
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 24
8835: PUSH
8836: LD_INT 251
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PPUSH
8848: CALL_OW 70
8852: ST_TO_ADDR
// if barrackList > 0 then
8853: LD_VAR 0 9
8857: PUSH
8858: LD_INT 0
8860: GREATER
8861: IFFALSE 9009
// begin if turretList = 0 then
8863: LD_VAR 0 7
8867: PUSH
8868: LD_INT 0
8870: EQUAL
8871: IFFALSE 8913
// begin if soldiers_list > 0 then
8873: LD_VAR 0 6
8877: PUSH
8878: LD_INT 0
8880: GREATER
8881: IFFALSE 8911
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8883: LD_VAR 0 6
8887: PPUSH
8888: LD_VAR 0 9
8892: PUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PPUSH
8901: CALL_OW 12
8905: ARRAY
8906: PPUSH
8907: CALL_OW 120
// end else
8911: GO 9009
// begin for i in barrackList do
8913: LD_ADDR_VAR 0 4
8917: PUSH
8918: LD_VAR 0 9
8922: PUSH
8923: FOR_IN
8924: IFFALSE 9007
// begin insideUnits = UnitsInside ( i ) ;
8926: LD_ADDR_VAR 0 10
8930: PUSH
8931: LD_VAR 0 4
8935: PPUSH
8936: CALL_OW 313
8940: ST_TO_ADDR
// if insideUnits > 0 then
8941: LD_VAR 0 10
8945: PUSH
8946: LD_INT 0
8948: GREATER
8949: IFFALSE 8973
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8951: LD_VAR 0 10
8955: PUSH
8956: LD_INT 1
8958: ARRAY
8959: PPUSH
8960: LD_VAR 0 7
8964: PUSH
8965: LD_INT 1
8967: ARRAY
8968: PPUSH
8969: CALL_OW 120
// if soldiers_list > 0 then
8973: LD_VAR 0 6
8977: PUSH
8978: LD_INT 0
8980: GREATER
8981: IFFALSE 9005
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8983: LD_VAR 0 6
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PPUSH
8992: LD_VAR 0 7
8996: PUSH
8997: LD_INT 1
8999: ARRAY
9000: PPUSH
9001: CALL_OW 120
// end ;
9005: GO 8923
9007: POP
9008: POP
// end ; end ; end ;
9009: LD_VAR 0 3
9013: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9014: LD_INT 0
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
// for i = 1 to vehCount do
9022: LD_ADDR_VAR 0 8
9026: PUSH
9027: DOUBLE
9028: LD_INT 1
9030: DEC
9031: ST_TO_ADDR
9032: LD_VAR 0 6
9036: PUSH
9037: FOR_TO
9038: IFFALSE 9245
// begin uc_side = side ;
9040: LD_ADDR_OWVAR 20
9044: PUSH
9045: LD_VAR 0 1
9049: ST_TO_ADDR
// uc_nation = nation ;
9050: LD_ADDR_OWVAR 21
9054: PUSH
9055: LD_VAR 0 3
9059: ST_TO_ADDR
// vc_Chassis = 22 ;
9060: LD_ADDR_OWVAR 37
9064: PUSH
9065: LD_INT 22
9067: ST_TO_ADDR
// vc_engine = 1 ;
9068: LD_ADDR_OWVAR 39
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// vc_control = 1 ;
9076: LD_ADDR_OWVAR 38
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9084: LD_ADDR_OWVAR 40
9088: PUSH
9089: LD_INT 43
9091: PUSH
9092: LD_INT 44
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: LD_INT 1
9101: PPUSH
9102: LD_INT 2
9104: PPUSH
9105: CALL_OW 12
9109: ARRAY
9110: ST_TO_ADDR
// veh = CreateVehicle ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: CALL_OW 45
9120: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9121: LD_VAR 0 12
9125: PPUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: LD_INT 0
9133: PPUSH
9134: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9138: LD_ADDR_EXP 32
9142: PUSH
9143: LD_EXP 32
9147: PUSH
9148: LD_VAR 0 12
9152: ADD
9153: ST_TO_ADDR
// hc_class = 3 ;
9154: LD_ADDR_OWVAR 28
9158: PUSH
9159: LD_INT 3
9161: ST_TO_ADDR
// hc_name =  ;
9162: LD_ADDR_OWVAR 26
9166: PUSH
9167: LD_STRING 
9169: ST_TO_ADDR
// hc_gallery =  ;
9170: LD_ADDR_OWVAR 33
9174: PUSH
9175: LD_STRING 
9177: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9178: LD_INT 0
9180: PPUSH
9181: LD_INT 3
9183: PPUSH
9184: LD_EXP 25
9188: PPUSH
9189: LD_EXP 26
9193: PPUSH
9194: CALL_OW 12
9198: PPUSH
9199: CALL_OW 380
// un = CreateHuman ;
9203: LD_ADDR_VAR 0 10
9207: PUSH
9208: CALL_OW 44
9212: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9213: LD_VAR 0 10
9217: PPUSH
9218: LD_VAR 0 12
9222: PPUSH
9223: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9227: LD_ADDR_EXP 32
9231: PUSH
9232: LD_EXP 32
9236: PUSH
9237: LD_VAR 0 10
9241: ADD
9242: ST_TO_ADDR
// end ;
9243: GO 9037
9245: POP
9246: POP
// end ;
9247: LD_VAR 0 7
9251: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9252: LD_INT 0
9254: PPUSH
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
9259: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9260: LD_VAR 0 2
9264: PPUSH
9265: LD_INT 22
9267: PUSH
9268: LD_VAR 0 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: PPUSH
9280: CALL_OW 70
9284: PUSH
9285: LD_INT 0
9287: EQUAL
9288: PUSH
9289: LD_EXP 32
9293: AND
9294: IFFALSE 9581
// begin for i in defenders_list do
9296: LD_ADDR_VAR 0 4
9300: PUSH
9301: LD_EXP 32
9305: PUSH
9306: FOR_IN
9307: IFFALSE 9579
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9309: LD_VAR 0 4
9313: PPUSH
9314: LD_INT 63
9316: PPUSH
9317: LD_INT 75
9319: PPUSH
9320: CALL_OW 297
9324: PUSH
9325: LD_INT 8
9327: GREATER
9328: PUSH
9329: LD_VAR 0 4
9333: PPUSH
9334: CALL_OW 314
9338: NOT
9339: AND
9340: IFFALSE 9359
// ComMoveXY ( i , 63 , 75 ) else
9342: LD_VAR 0 4
9346: PPUSH
9347: LD_INT 63
9349: PPUSH
9350: LD_INT 75
9352: PPUSH
9353: CALL_OW 111
9357: GO 9577
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9359: LD_VAR 0 4
9363: PPUSH
9364: CALL_OW 257
9368: PUSH
9369: LD_INT 3
9371: EQUAL
9372: PUSH
9373: LD_VAR 0 4
9377: PPUSH
9378: CALL_OW 310
9382: NOT
9383: AND
9384: PUSH
9385: LD_VAR 0 4
9389: PPUSH
9390: CALL_OW 314
9394: NOT
9395: AND
9396: IFFALSE 9449
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9398: LD_VAR 0 4
9402: PPUSH
9403: LD_EXP 32
9407: PPUSH
9408: LD_INT 58
9410: PUSH
9411: EMPTY
9412: LIST
9413: PUSH
9414: LD_INT 24
9416: PUSH
9417: LD_INT 1000
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 72
9432: PPUSH
9433: LD_VAR 0 4
9437: PPUSH
9438: CALL_OW 74
9442: PPUSH
9443: CALL_OW 120
9447: GO 9577
// if GetFuel ( i ) < 100 then
9449: LD_VAR 0 4
9453: PPUSH
9454: CALL_OW 261
9458: PUSH
9459: LD_INT 100
9461: LESS
9462: IFFALSE 9478
// SetFuel ( defenders_list , 100 ) else
9464: LD_EXP 32
9468: PPUSH
9469: LD_INT 100
9471: PPUSH
9472: CALL_OW 240
9476: GO 9577
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9478: LD_VAR 0 4
9482: PPUSH
9483: CALL_OW 263
9487: PUSH
9488: LD_INT 1
9490: EQUAL
9491: PUSH
9492: LD_VAR 0 4
9496: PPUSH
9497: CALL_OW 256
9501: PUSH
9502: LD_INT 990
9504: LESS
9505: AND
9506: IFFALSE 9577
// begin veh := i ;
9508: LD_ADDR_VAR 0 7
9512: PUSH
9513: LD_VAR 0 4
9517: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9518: LD_ADDR_VAR 0 8
9522: PUSH
9523: LD_VAR 0 4
9527: PPUSH
9528: CALL_OW 311
9532: ST_TO_ADDR
// if veh then
9533: LD_VAR 0 7
9537: IFFALSE 9577
// begin ComMoveXY ( i , 63 , 75 ) ;
9539: LD_VAR 0 4
9543: PPUSH
9544: LD_INT 63
9546: PPUSH
9547: LD_INT 75
9549: PPUSH
9550: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9554: LD_VAR 0 7
9558: PPUSH
9559: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9563: LD_VAR 0 8
9567: PPUSH
9568: LD_VAR 0 7
9572: PPUSH
9573: CALL_OW 189
// end ; end ; end ;
9577: GO 9306
9579: POP
9580: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9581: LD_ADDR_VAR 0 6
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: LD_INT 22
9593: PUSH
9594: LD_VAR 0 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: PPUSH
9606: CALL_OW 70
9610: ST_TO_ADDR
// if tmp and defenders_list then
9611: LD_VAR 0 6
9615: PUSH
9616: LD_EXP 32
9620: AND
9621: IFFALSE 9790
// for i in defenders_list do
9623: LD_ADDR_VAR 0 4
9627: PUSH
9628: LD_EXP 32
9632: PUSH
9633: FOR_IN
9634: IFFALSE 9788
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9636: LD_VAR 0 4
9640: PPUSH
9641: CALL_OW 257
9645: PUSH
9646: LD_INT 3
9648: EQUAL
9649: PUSH
9650: LD_VAR 0 4
9654: PPUSH
9655: CALL_OW 310
9659: NOT
9660: AND
9661: IFFALSE 9700
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9663: LD_VAR 0 4
9667: PPUSH
9668: LD_EXP 32
9672: PPUSH
9673: LD_INT 58
9675: PUSH
9676: EMPTY
9677: LIST
9678: PPUSH
9679: CALL_OW 72
9683: PPUSH
9684: LD_VAR 0 4
9688: PPUSH
9689: CALL_OW 74
9693: PPUSH
9694: CALL_OW 120
9698: GO 9786
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 314
9709: NOT
9710: PUSH
9711: LD_VAR 0 4
9715: PPUSH
9716: LD_VAR 0 2
9720: PPUSH
9721: CALL_OW 308
9725: AND
9726: IFFALSE 9754
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9728: LD_VAR 0 4
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: LD_VAR 0 4
9742: PPUSH
9743: CALL_OW 74
9747: PPUSH
9748: CALL_OW 115
9752: GO 9786
// if not IsInArea ( i , defenseArea ) then
9754: LD_VAR 0 4
9758: PPUSH
9759: LD_VAR 0 2
9763: PPUSH
9764: CALL_OW 308
9768: NOT
9769: IFFALSE 9786
// ComMoveXY ( i , 63 , 75 ) ;
9771: LD_VAR 0 4
9775: PPUSH
9776: LD_INT 63
9778: PPUSH
9779: LD_INT 75
9781: PPUSH
9782: CALL_OW 111
// end ;
9786: GO 9633
9788: POP
9789: POP
// end ;
9790: LD_VAR 0 3
9794: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9795: LD_INT 0
9797: PPUSH
9798: PPUSH
9799: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9800: LD_INT 22
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 21
9814: PUSH
9815: LD_INT 2
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 69
9830: PUSH
9831: LD_VAR 0 3
9835: LESSEQUAL
9836: IFFALSE 9944
// begin for i = 1 to vehCount do
9838: LD_ADDR_VAR 0 9
9842: PUSH
9843: DOUBLE
9844: LD_INT 1
9846: DEC
9847: ST_TO_ADDR
9848: LD_VAR 0 3
9852: PUSH
9853: FOR_TO
9854: IFFALSE 9942
// begin weapon = weaponTab [ i ] ;
9856: LD_ADDR_VAR 0 10
9860: PUSH
9861: LD_VAR 0 4
9865: PUSH
9866: LD_VAR 0 9
9870: ARRAY
9871: ST_TO_ADDR
// if weapon = 46 then
9872: LD_VAR 0 10
9876: PUSH
9877: LD_INT 46
9879: EQUAL
9880: IFFALSE 9911
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9882: LD_VAR 0 2
9886: PPUSH
9887: LD_INT 24
9889: PPUSH
9890: LD_VAR 0 5
9894: PPUSH
9895: LD_VAR 0 6
9899: PPUSH
9900: LD_VAR 0 10
9904: PPUSH
9905: CALL_OW 185
// end else
9909: GO 9940
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9911: LD_VAR 0 2
9915: PPUSH
9916: LD_VAR 0 7
9920: PPUSH
9921: LD_VAR 0 5
9925: PPUSH
9926: LD_VAR 0 6
9930: PPUSH
9931: LD_VAR 0 10
9935: PPUSH
9936: CALL_OW 185
// end ; end ;
9940: GO 9853
9942: POP
9943: POP
// end ; end ;
9944: LD_VAR 0 8
9948: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9949: LD_INT 0
9951: PPUSH
9952: PPUSH
9953: PPUSH
9954: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9955: LD_ADDR_VAR 0 8
9959: PUSH
9960: LD_INT 22
9962: PUSH
9963: LD_VAR 0 1
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 3
9984: PUSH
9985: LD_INT 24
9987: PUSH
9988: LD_INT 650
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 69
10008: ST_TO_ADDR
// if damageVehicles > 0 then
10009: LD_VAR 0 8
10013: PUSH
10014: LD_INT 0
10016: GREATER
10017: IFFALSE 10038
// ComMoveXY ( damageVehicles , repX , repY ) ;
10019: LD_VAR 0 8
10023: PPUSH
10024: LD_VAR 0 3
10028: PPUSH
10029: LD_VAR 0 4
10033: PPUSH
10034: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10038: LD_VAR 0 8
10042: PPUSH
10043: LD_INT 95
10045: PUSH
10046: LD_VAR 0 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 3
10057: PUSH
10058: LD_INT 58
10060: PUSH
10061: EMPTY
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 72
10076: PUSH
10077: LD_INT 0
10079: GREATER
10080: IFFALSE 10147
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10082: LD_ADDR_VAR 0 6
10086: PUSH
10087: LD_VAR 0 8
10091: PPUSH
10092: LD_INT 95
10094: PUSH
10095: LD_VAR 0 2
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 3
10106: PUSH
10107: LD_INT 58
10109: PUSH
10110: EMPTY
10111: LIST
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 72
10125: PUSH
10126: FOR_IN
10127: IFFALSE 10145
// ComExitVehicle ( UnitsInside ( i ) ) ;
10129: LD_VAR 0 6
10133: PPUSH
10134: CALL_OW 313
10138: PPUSH
10139: CALL_OW 121
10143: GO 10126
10145: POP
10146: POP
// end ;
10147: LD_VAR 0 5
10151: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
10156: PPUSH
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10161: LD_ADDR_VAR 0 8
10165: PUSH
10166: LD_INT 22
10168: PUSH
10169: LD_VAR 0 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 21
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 24
10190: PUSH
10191: LD_INT 250
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 3
10200: PUSH
10201: LD_INT 58
10203: PUSH
10204: EMPTY
10205: LIST
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: LD_INT 34
10212: PUSH
10213: LD_INT 43
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 34
10222: PUSH
10223: LD_INT 44
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 34
10232: PUSH
10233: LD_INT 46
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: PPUSH
10257: CALL_OW 69
10261: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10262: LD_INT 22
10264: PUSH
10265: LD_VAR 0 1
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 21
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 24
10286: PUSH
10287: LD_INT 1000
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 58
10299: PUSH
10300: EMPTY
10301: LIST
10302: PUSH
10303: LD_INT 2
10305: PUSH
10306: LD_INT 34
10308: PUSH
10309: LD_INT 43
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 34
10318: PUSH
10319: LD_INT 44
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 34
10328: PUSH
10329: LD_INT 46
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 69
10357: PUSH
10358: LD_INT 5
10360: PUSH
10361: LD_INT 6
10363: PUSH
10364: LD_INT 7
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: LD_OWVAR 67
10376: ARRAY
10377: GREATEREQUAL
10378: IFFALSE 10943
// repeat wait ( 0 0$1 ) ;
10380: LD_INT 35
10382: PPUSH
10383: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10387: LD_ADDR_VAR 0 8
10391: PUSH
10392: LD_INT 22
10394: PUSH
10395: LD_VAR 0 1
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 21
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 24
10416: PUSH
10417: LD_INT 250
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 2
10426: PUSH
10427: LD_INT 34
10429: PUSH
10430: LD_INT 43
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 34
10439: PUSH
10440: LD_INT 44
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: LD_INT 34
10449: PUSH
10450: LD_INT 46
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 3
10465: PUSH
10466: LD_INT 58
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PPUSH
10483: CALL_OW 69
10487: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10488: LD_INT 22
10490: PUSH
10491: LD_VAR 0 1
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 95
10502: PUSH
10503: LD_VAR 0 2
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 69
10520: NOT
10521: PUSH
10522: LD_VAR 0 11
10526: PUSH
10527: LD_INT 0
10529: EQUAL
10530: AND
10531: IFFALSE 10586
// for i := 1 to wayX do
10533: LD_ADDR_VAR 0 6
10537: PUSH
10538: DOUBLE
10539: LD_INT 1
10541: DEC
10542: ST_TO_ADDR
10543: LD_VAR 0 3
10547: PUSH
10548: FOR_TO
10549: IFFALSE 10584
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10551: LD_VAR 0 8
10555: PPUSH
10556: LD_VAR 0 3
10560: PUSH
10561: LD_VAR 0 6
10565: ARRAY
10566: PPUSH
10567: LD_VAR 0 4
10571: PUSH
10572: LD_VAR 0 6
10576: ARRAY
10577: PPUSH
10578: CALL_OW 114
10582: GO 10548
10584: POP
10585: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10586: LD_INT 22
10588: PUSH
10589: LD_VAR 0 1
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 95
10600: PUSH
10601: LD_VAR 0 2
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: IFFALSE 10842
// begin seeEnemy = 1 ;
10620: LD_ADDR_VAR 0 11
10624: PUSH
10625: LD_INT 1
10627: ST_TO_ADDR
// for j in vehiclesOK do
10628: LD_ADDR_VAR 0 7
10632: PUSH
10633: LD_VAR 0 8
10637: PUSH
10638: FOR_IN
10639: IFFALSE 10840
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10641: LD_ADDR_VAR 0 9
10645: PUSH
10646: LD_INT 81
10648: PUSH
10649: LD_VAR 0 1
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 101
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 69
10676: PPUSH
10677: LD_VAR 0 7
10681: PPUSH
10682: CALL_OW 74
10686: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10687: LD_ADDR_VAR 0 10
10691: PUSH
10692: LD_INT 81
10694: PUSH
10695: LD_VAR 0 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 101
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 2
10716: PUSH
10717: LD_INT 59
10719: PUSH
10720: EMPTY
10721: LIST
10722: PUSH
10723: LD_INT 21
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: PPUSH
10757: CALL_OW 69
10761: PPUSH
10762: LD_VAR 0 7
10766: PPUSH
10767: CALL_OW 74
10771: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10772: LD_VAR 0 7
10776: PPUSH
10777: LD_VAR 0 9
10781: PPUSH
10782: CALL_OW 296
10786: PUSH
10787: LD_INT 8
10789: PLUS
10790: PUSH
10791: LD_VAR 0 7
10795: PPUSH
10796: LD_VAR 0 10
10800: PPUSH
10801: CALL_OW 296
10805: LESS
10806: IFFALSE 10824
// ComAttackUnit ( j , target1 ) else
10808: LD_VAR 0 7
10812: PPUSH
10813: LD_VAR 0 9
10817: PPUSH
10818: CALL_OW 115
10822: GO 10838
// ComAttackUnit ( j , target2 ) ;
10824: LD_VAR 0 7
10828: PPUSH
10829: LD_VAR 0 10
10833: PPUSH
10834: CALL_OW 115
// end ;
10838: GO 10638
10840: POP
10841: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10842: LD_INT 22
10844: PUSH
10845: LD_VAR 0 1
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 21
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 24
10866: PUSH
10867: LD_INT 250
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 34
10879: PUSH
10880: LD_INT 43
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 34
10889: PUSH
10890: LD_INT 44
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 34
10899: PUSH
10900: LD_INT 46
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: LD_INT 58
10918: PUSH
10919: EMPTY
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 69
10937: PUSH
10938: LD_INT 0
10940: EQUAL
10941: IFFALSE 10380
// seeEnemy = 0 ;
10943: LD_ADDR_VAR 0 11
10947: PUSH
10948: LD_INT 0
10950: ST_TO_ADDR
// end ;
10951: LD_VAR 0 5
10955: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10956: LD_INT 0
10958: PPUSH
10959: PPUSH
10960: PPUSH
10961: PPUSH
10962: PPUSH
10963: PPUSH
// repeat wait ( 0 0$1 ) ;
10964: LD_INT 35
10966: PPUSH
10967: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10971: LD_ADDR_VAR 0 7
10975: PUSH
10976: LD_INT 22
10978: PUSH
10979: LD_VAR 0 1
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 21
10990: PUSH
10991: LD_INT 2
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 24
11000: PUSH
11001: LD_INT 651
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 69
11017: ST_TO_ADDR
// for j in vehiclesOK do
11018: LD_ADDR_VAR 0 4
11022: PUSH
11023: LD_VAR 0 7
11027: PUSH
11028: FOR_IN
11029: IFFALSE 11230
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11031: LD_ADDR_VAR 0 5
11035: PUSH
11036: LD_INT 81
11038: PUSH
11039: LD_VAR 0 1
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 101
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PPUSH
11067: LD_VAR 0 4
11071: PPUSH
11072: CALL_OW 74
11076: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11077: LD_ADDR_VAR 0 6
11081: PUSH
11082: LD_INT 81
11084: PUSH
11085: LD_VAR 0 1
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 101
11096: PUSH
11097: LD_INT 1
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 2
11106: PUSH
11107: LD_INT 59
11109: PUSH
11110: EMPTY
11111: LIST
11112: PUSH
11113: LD_INT 21
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 21
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: PPUSH
11147: CALL_OW 69
11151: PPUSH
11152: LD_VAR 0 4
11156: PPUSH
11157: CALL_OW 74
11161: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11162: LD_VAR 0 4
11166: PPUSH
11167: LD_VAR 0 5
11171: PPUSH
11172: CALL_OW 296
11176: PUSH
11177: LD_INT 8
11179: PLUS
11180: PUSH
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_VAR 0 6
11190: PPUSH
11191: CALL_OW 296
11195: LESS
11196: IFFALSE 11214
// ComAttackUnit ( j , target1 ) else
11198: LD_VAR 0 4
11202: PPUSH
11203: LD_VAR 0 5
11207: PPUSH
11208: CALL_OW 115
11212: GO 11228
// ComAttackUnit ( j , target2 ) ;
11214: LD_VAR 0 4
11218: PPUSH
11219: LD_VAR 0 6
11223: PPUSH
11224: CALL_OW 115
// end ;
11228: GO 11028
11230: POP
11231: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11232: LD_INT 22
11234: PUSH
11235: LD_VAR 0 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 21
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 24
11256: PUSH
11257: LD_INT 250
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 69
11273: PUSH
11274: LD_INT 0
11276: EQUAL
11277: IFFALSE 10964
// end ;
11279: LD_VAR 0 2
11283: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11284: LD_INT 0
11286: PPUSH
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11292: LD_ADDR_VAR 0 8
11296: PUSH
11297: LD_VAR 0 2
11301: PPUSH
11302: CALL_OW 313
11306: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11307: LD_ADDR_VAR 0 9
11311: PUSH
11312: LD_VAR 0 3
11316: PPUSH
11317: LD_INT 22
11319: PUSH
11320: LD_VAR 0 1
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 25
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 24
11341: PUSH
11342: LD_INT 750
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 3
11351: PUSH
11352: LD_INT 54
11354: PUSH
11355: EMPTY
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: PPUSH
11368: CALL_OW 70
11372: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11373: LD_ADDR_VAR 0 6
11377: PUSH
11378: LD_VAR 0 3
11382: PPUSH
11383: LD_INT 22
11385: PUSH
11386: LD_VAR 0 1
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 21
11397: PUSH
11398: LD_INT 3
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 3
11407: PUSH
11408: LD_INT 24
11410: PUSH
11411: LD_INT 1000
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: PPUSH
11430: CALL_OW 70
11434: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11435: LD_VAR 0 6
11439: NOT
11440: PUSH
11441: LD_INT 22
11443: PUSH
11444: LD_VAR 0 1
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 25
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 24
11465: PUSH
11466: LD_INT 250
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 69
11482: NOT
11483: AND
11484: IFFALSE 11488
// exit ;
11486: GO 11685
// if buildings_list > 0 and engineerOkInside then
11488: LD_VAR 0 6
11492: PUSH
11493: LD_INT 0
11495: GREATER
11496: PUSH
11497: LD_VAR 0 8
11501: AND
11502: IFFALSE 11528
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11504: LD_VAR 0 8
11508: PPUSH
11509: LD_INT 25
11511: PUSH
11512: LD_INT 2
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 72
11523: PPUSH
11524: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11528: LD_VAR 0 6
11532: PUSH
11533: LD_INT 0
11535: GREATER
11536: PUSH
11537: LD_VAR 0 9
11541: PUSH
11542: LD_INT 0
11544: GREATER
11545: AND
11546: IFFALSE 11566
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11548: LD_VAR 0 9
11552: PPUSH
11553: LD_VAR 0 6
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11566: LD_VAR 0 6
11570: PUSH
11571: LD_INT 0
11573: EQUAL
11574: PUSH
11575: LD_VAR 0 4
11579: PUSH
11580: LD_INT 0
11582: EQUAL
11583: AND
11584: PUSH
11585: LD_VAR 0 9
11589: PUSH
11590: LD_INT 0
11592: GREATER
11593: AND
11594: IFFALSE 11610
// ComEnterUnit ( engineerOkOutside , building ) ;
11596: LD_VAR 0 9
11600: PPUSH
11601: LD_VAR 0 2
11605: PPUSH
11606: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11610: LD_VAR 0 9
11614: PUSH
11615: LD_INT 0
11617: GREATER
11618: PUSH
11619: LD_VAR 0 6
11623: PUSH
11624: LD_INT 0
11626: EQUAL
11627: AND
11628: PUSH
11629: LD_VAR 0 4
11633: PUSH
11634: LD_INT 0
11636: GREATER
11637: AND
11638: IFFALSE 11685
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11640: LD_VAR 0 9
11644: PPUSH
11645: LD_VAR 0 4
11649: PUSH
11650: LD_INT 1
11652: ARRAY
11653: PPUSH
11654: LD_VAR 0 4
11658: PUSH
11659: LD_INT 2
11661: ARRAY
11662: PPUSH
11663: LD_VAR 0 4
11667: PUSH
11668: LD_INT 3
11670: ARRAY
11671: PPUSH
11672: LD_VAR 0 4
11676: PUSH
11677: LD_INT 4
11679: ARRAY
11680: PPUSH
11681: CALL_OW 145
// end ;
11685: LD_VAR 0 5
11689: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11690: LD_INT 0
11692: PPUSH
11693: PPUSH
11694: PPUSH
11695: PPUSH
11696: PPUSH
11697: PPUSH
11698: PPUSH
11699: PPUSH
11700: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11701: LD_ADDR_VAR 0 6
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_VAR 0 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 25
11720: PUSH
11721: LD_INT 4
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 23
11730: PUSH
11731: LD_INT 2
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: LD_INT 24
11740: PUSH
11741: LD_INT 251
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11759: LD_ADDR_VAR 0 7
11763: PUSH
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 22
11771: PUSH
11772: LD_VAR 0 1
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 23
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 25
11793: PUSH
11794: LD_INT 4
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: EMPTY
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 70
11817: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11818: LD_ADDR_VAR 0 10
11822: PUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 22
11830: PUSH
11831: LD_VAR 0 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 21
11842: PUSH
11843: LD_INT 1
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 3
11852: PUSH
11853: LD_INT 25
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 3
11869: PUSH
11870: LD_INT 24
11872: PUSH
11873: LD_INT 750
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 70
11894: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11895: LD_ADDR_VAR 0 11
11899: PUSH
11900: LD_VAR 0 2
11904: PPUSH
11905: LD_INT 22
11907: PUSH
11908: LD_VAR 0 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 21
11919: PUSH
11920: LD_INT 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 3
11929: PUSH
11930: LD_INT 25
11932: PUSH
11933: LD_INT 3
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 3
11946: PUSH
11947: LD_INT 24
11949: PUSH
11950: LD_INT 1000
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: PPUSH
11967: CALL_OW 70
11971: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11972: LD_VAR 0 10
11976: NOT
11977: PUSH
11978: LD_VAR 0 11
11982: NOT
11983: AND
11984: PUSH
11985: LD_VAR 0 6
11989: NOT
11990: AND
11991: IFFALSE 11995
// exit ;
11993: GO 12229
// if damageUnits > 0 and sci_list > 0 then
11995: LD_VAR 0 10
11999: PUSH
12000: LD_INT 0
12002: GREATER
12003: PUSH
12004: LD_VAR 0 6
12008: PUSH
12009: LD_INT 0
12011: GREATER
12012: AND
12013: IFFALSE 12029
// ComMoveToArea ( damageUnits , healArea ) ;
12015: LD_VAR 0 10
12019: PPUSH
12020: LD_VAR 0 2
12024: PPUSH
12025: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12029: LD_VAR 0 11
12033: PUSH
12034: LD_INT 0
12036: GREATER
12037: PUSH
12038: LD_VAR 0 6
12042: PUSH
12043: LD_INT 0
12045: GREATER
12046: AND
12047: IFFALSE 12058
// ComExitBuilding ( sci_list ) ;
12049: LD_VAR 0 6
12053: PPUSH
12054: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12058: LD_VAR 0 11
12062: PUSH
12063: LD_INT 0
12065: GREATER
12066: PUSH
12067: LD_VAR 0 7
12071: PUSH
12072: LD_INT 0
12074: GREATER
12075: AND
12076: IFFALSE 12096
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12078: LD_VAR 0 7
12082: PPUSH
12083: LD_VAR 0 11
12087: PUSH
12088: LD_INT 1
12090: ARRAY
12091: PPUSH
12092: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12096: LD_VAR 0 10
12100: PUSH
12101: LD_INT 0
12103: EQUAL
12104: PUSH
12105: LD_VAR 0 11
12109: PUSH
12110: LD_INT 0
12112: EQUAL
12113: AND
12114: PUSH
12115: LD_VAR 0 7
12119: PUSH
12120: LD_INT 0
12122: GREATER
12123: AND
12124: IFFALSE 12229
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12126: LD_ADDR_VAR 0 12
12130: PUSH
12131: LD_INT 22
12133: PUSH
12134: LD_VAR 0 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 3
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 30
12155: PUSH
12156: LD_INT 8
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 69
12172: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12173: LD_ADDR_VAR 0 13
12177: PUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_VAR 0 12
12185: PPUSH
12186: CALL_OW 12
12190: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12191: LD_VAR 0 7
12195: PPUSH
12196: LD_INT 3
12198: PUSH
12199: LD_INT 60
12201: PUSH
12202: EMPTY
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 72
12213: PPUSH
12214: LD_VAR 0 12
12218: PUSH
12219: LD_VAR 0 13
12223: ARRAY
12224: PPUSH
12225: CALL_OW 120
// end ; end ;
12229: LD_VAR 0 5
12233: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12234: LD_INT 0
12236: PPUSH
12237: PPUSH
12238: PPUSH
12239: PPUSH
12240: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12241: LD_ADDR_VAR 0 6
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_VAR 0 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 2
12260: PUSH
12261: LD_INT 30
12263: PUSH
12264: LD_INT 31
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 30
12273: PUSH
12274: LD_INT 32
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 33
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 4
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 5
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12328: LD_ADDR_VAR 0 7
12332: PUSH
12333: LD_INT 22
12335: PUSH
12336: LD_VAR 0 2
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 21
12347: PUSH
12348: LD_INT 3
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 58
12357: PUSH
12358: EMPTY
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: PPUSH
12366: CALL_OW 69
12370: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12371: LD_VAR 0 6
12375: PUSH
12376: LD_INT 0
12378: GREATER
12379: PUSH
12380: LD_VAR 0 7
12384: PUSH
12385: LD_INT 0
12387: GREATER
12388: AND
12389: IFFALSE 12459
// begin for i in turretsList do
12391: LD_ADDR_VAR 0 4
12395: PUSH
12396: LD_VAR 0 6
12400: PUSH
12401: FOR_IN
12402: IFFALSE 12457
// begin for j in enemyBuildings do
12404: LD_ADDR_VAR 0 5
12408: PUSH
12409: LD_VAR 0 7
12413: PUSH
12414: FOR_IN
12415: IFFALSE 12453
// begin if GetDistUnits ( i , j ) < 20 then
12417: LD_VAR 0 4
12421: PPUSH
12422: LD_VAR 0 5
12426: PPUSH
12427: CALL_OW 296
12431: PUSH
12432: LD_INT 20
12434: LESS
12435: IFFALSE 12451
// begin ComAttackUnit ( i , j ) ;
12437: LD_VAR 0 4
12441: PPUSH
12442: LD_VAR 0 5
12446: PPUSH
12447: CALL_OW 115
// end ; end ;
12451: GO 12414
12453: POP
12454: POP
// end ;
12455: GO 12401
12457: POP
12458: POP
// end ; end ;
12459: LD_VAR 0 3
12463: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12464: LD_INT 0
12466: PPUSH
12467: PPUSH
12468: PPUSH
12469: PPUSH
12470: PPUSH
12471: PPUSH
12472: PPUSH
12473: PPUSH
12474: PPUSH
12475: PPUSH
12476: PPUSH
// for i = 1 to medicCount do
12477: LD_ADDR_VAR 0 14
12481: PUSH
12482: DOUBLE
12483: LD_INT 1
12485: DEC
12486: ST_TO_ADDR
12487: LD_VAR 0 7
12491: PUSH
12492: FOR_TO
12493: IFFALSE 12575
// begin uc_side = side ;
12495: LD_ADDR_OWVAR 20
12499: PUSH
12500: LD_VAR 0 1
12504: ST_TO_ADDR
// uc_nation = nation ;
12505: LD_ADDR_OWVAR 21
12509: PUSH
12510: LD_VAR 0 2
12514: ST_TO_ADDR
// hc_name =  ;
12515: LD_ADDR_OWVAR 26
12519: PUSH
12520: LD_STRING 
12522: ST_TO_ADDR
// hc_gallery =  ;
12523: LD_ADDR_OWVAR 33
12527: PUSH
12528: LD_STRING 
12530: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12531: LD_INT 0
12533: PPUSH
12534: LD_INT 4
12536: PPUSH
12537: LD_VAR 0 8
12541: PPUSH
12542: CALL_OW 380
// un = CreateHuman ;
12546: LD_ADDR_VAR 0 16
12550: PUSH
12551: CALL_OW 44
12555: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12556: LD_VAR 0 16
12560: PPUSH
12561: LD_VAR 0 9
12565: PPUSH
12566: LD_INT 0
12568: PPUSH
12569: CALL_OW 49
// end ;
12573: GO 12492
12575: POP
12576: POP
// for i = 1 to soldierCount do
12577: LD_ADDR_VAR 0 14
12581: PUSH
12582: DOUBLE
12583: LD_INT 1
12585: DEC
12586: ST_TO_ADDR
12587: LD_VAR 0 3
12591: PUSH
12592: FOR_TO
12593: IFFALSE 12675
// begin uc_side = side ;
12595: LD_ADDR_OWVAR 20
12599: PUSH
12600: LD_VAR 0 1
12604: ST_TO_ADDR
// uc_nation = nation ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_VAR 0 2
12614: ST_TO_ADDR
// hc_name =  ;
12615: LD_ADDR_OWVAR 26
12619: PUSH
12620: LD_STRING 
12622: ST_TO_ADDR
// hc_gallery =  ;
12623: LD_ADDR_OWVAR 33
12627: PUSH
12628: LD_STRING 
12630: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12631: LD_INT 0
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: LD_VAR 0 8
12641: PPUSH
12642: CALL_OW 380
// un = CreateHuman ;
12646: LD_ADDR_VAR 0 16
12650: PUSH
12651: CALL_OW 44
12655: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12656: LD_VAR 0 16
12660: PPUSH
12661: LD_VAR 0 9
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 49
// end ;
12673: GO 12592
12675: POP
12676: POP
// for i = 1 to sniperCount do
12677: LD_ADDR_VAR 0 14
12681: PUSH
12682: DOUBLE
12683: LD_INT 1
12685: DEC
12686: ST_TO_ADDR
12687: LD_VAR 0 4
12691: PUSH
12692: FOR_TO
12693: IFFALSE 12775
// begin uc_side = side ;
12695: LD_ADDR_OWVAR 20
12699: PUSH
12700: LD_VAR 0 1
12704: ST_TO_ADDR
// uc_nation = nation ;
12705: LD_ADDR_OWVAR 21
12709: PUSH
12710: LD_VAR 0 2
12714: ST_TO_ADDR
// hc_name =  ;
12715: LD_ADDR_OWVAR 26
12719: PUSH
12720: LD_STRING 
12722: ST_TO_ADDR
// hc_gallery =  ;
12723: LD_ADDR_OWVAR 33
12727: PUSH
12728: LD_STRING 
12730: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12731: LD_INT 0
12733: PPUSH
12734: LD_INT 5
12736: PPUSH
12737: LD_VAR 0 8
12741: PPUSH
12742: CALL_OW 380
// un = CreateHuman ;
12746: LD_ADDR_VAR 0 16
12750: PUSH
12751: CALL_OW 44
12755: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12756: LD_VAR 0 16
12760: PPUSH
12761: LD_VAR 0 9
12765: PPUSH
12766: LD_INT 0
12768: PPUSH
12769: CALL_OW 49
// end ;
12773: GO 12692
12775: POP
12776: POP
// for i = 1 to bazookCount do
12777: LD_ADDR_VAR 0 14
12781: PUSH
12782: DOUBLE
12783: LD_INT 1
12785: DEC
12786: ST_TO_ADDR
12787: LD_VAR 0 5
12791: PUSH
12792: FOR_TO
12793: IFFALSE 12875
// begin uc_side = side ;
12795: LD_ADDR_OWVAR 20
12799: PUSH
12800: LD_VAR 0 1
12804: ST_TO_ADDR
// uc_nation = nation ;
12805: LD_ADDR_OWVAR 21
12809: PUSH
12810: LD_VAR 0 2
12814: ST_TO_ADDR
// hc_name =  ;
12815: LD_ADDR_OWVAR 26
12819: PUSH
12820: LD_STRING 
12822: ST_TO_ADDR
// hc_gallery =  ;
12823: LD_ADDR_OWVAR 33
12827: PUSH
12828: LD_STRING 
12830: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12831: LD_INT 0
12833: PPUSH
12834: LD_INT 9
12836: PPUSH
12837: LD_VAR 0 8
12841: PPUSH
12842: CALL_OW 380
// un = CreateHuman ;
12846: LD_ADDR_VAR 0 16
12850: PUSH
12851: CALL_OW 44
12855: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12856: LD_VAR 0 16
12860: PPUSH
12861: LD_VAR 0 9
12865: PPUSH
12866: LD_INT 0
12868: PPUSH
12869: CALL_OW 49
// end ;
12873: GO 12792
12875: POP
12876: POP
// for i = 1 to mortalCount do
12877: LD_ADDR_VAR 0 14
12881: PUSH
12882: DOUBLE
12883: LD_INT 1
12885: DEC
12886: ST_TO_ADDR
12887: LD_VAR 0 6
12891: PUSH
12892: FOR_TO
12893: IFFALSE 12975
// begin uc_side = side ;
12895: LD_ADDR_OWVAR 20
12899: PUSH
12900: LD_VAR 0 1
12904: ST_TO_ADDR
// uc_nation = nation ;
12905: LD_ADDR_OWVAR 21
12909: PUSH
12910: LD_VAR 0 2
12914: ST_TO_ADDR
// hc_name =  ;
12915: LD_ADDR_OWVAR 26
12919: PUSH
12920: LD_STRING 
12922: ST_TO_ADDR
// hc_gallery =  ;
12923: LD_ADDR_OWVAR 33
12927: PUSH
12928: LD_STRING 
12930: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12931: LD_INT 0
12933: PPUSH
12934: LD_INT 8
12936: PPUSH
12937: LD_VAR 0 8
12941: PPUSH
12942: CALL_OW 380
// un = CreateHuman ;
12946: LD_ADDR_VAR 0 16
12950: PUSH
12951: CALL_OW 44
12955: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12956: LD_VAR 0 16
12960: PPUSH
12961: LD_VAR 0 9
12965: PPUSH
12966: LD_INT 0
12968: PPUSH
12969: CALL_OW 49
// end ;
12973: GO 12892
12975: POP
12976: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12977: LD_ADDR_VAR 0 19
12981: PUSH
12982: LD_INT 22
12984: PUSH
12985: LD_VAR 0 1
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: LD_INT 2
12996: PUSH
12997: LD_INT 25
12999: PUSH
13000: LD_INT 1
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 25
13009: PUSH
13010: LD_INT 5
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: LD_INT 25
13019: PUSH
13020: LD_INT 8
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 25
13029: PUSH
13030: LD_INT 9
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PPUSH
13048: CALL_OW 69
13052: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13053: LD_ADDR_VAR 0 18
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_VAR 0 1
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 25
13072: PUSH
13073: LD_INT 4
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: ST_TO_ADDR
// for i in medic_list do
13089: LD_ADDR_VAR 0 14
13093: PUSH
13094: LD_VAR 0 18
13098: PUSH
13099: FOR_IN
13100: IFFALSE 13118
// ComMoveToArea ( i , healArea ) ;
13102: LD_VAR 0 14
13106: PPUSH
13107: LD_VAR 0 10
13111: PPUSH
13112: CALL_OW 113
13116: GO 13099
13118: POP
13119: POP
// if strategy = 1 then
13120: LD_VAR 0 12
13124: PUSH
13125: LD_INT 1
13127: EQUAL
13128: IFFALSE 13674
// begin repeat wait ( 0 0$3 ) ;
13130: LD_INT 105
13132: PPUSH
13133: CALL_OW 67
// for i in soldiersOK_list do
13137: LD_ADDR_VAR 0 14
13141: PUSH
13142: LD_VAR 0 19
13146: PUSH
13147: FOR_IN
13148: IFFALSE 13212
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13150: LD_VAR 0 14
13154: PPUSH
13155: LD_INT 91
13157: PPUSH
13158: LD_INT 63
13160: PPUSH
13161: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13165: LD_VAR 0 14
13169: PPUSH
13170: LD_INT 101
13172: PPUSH
13173: LD_INT 53
13175: PPUSH
13176: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13180: LD_VAR 0 14
13184: PPUSH
13185: LD_INT 75
13187: PPUSH
13188: LD_INT 23
13190: PPUSH
13191: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13195: LD_VAR 0 14
13199: PPUSH
13200: LD_INT 78
13202: PPUSH
13203: LD_INT 8
13205: PPUSH
13206: CALL_OW 174
// end ;
13210: GO 13147
13212: POP
13213: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13214: LD_INT 12
13216: PPUSH
13217: LD_INT 22
13219: PUSH
13220: LD_VAR 0 1
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 70
13233: PUSH
13234: LD_INT 2
13236: GREATER
13237: IFFALSE 13130
// repeat wait ( 0 0$1 ) ;
13239: LD_INT 35
13241: PPUSH
13242: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13246: LD_ADDR_VAR 0 17
13250: PUSH
13251: LD_INT 22
13253: PUSH
13254: LD_VAR 0 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 1
13265: PUSH
13266: LD_INT 3
13268: PUSH
13269: LD_INT 24
13271: PUSH
13272: LD_INT 550
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 24
13285: PUSH
13286: LD_INT 250
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 69
13306: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13307: LD_ADDR_VAR 0 19
13311: PUSH
13312: LD_INT 22
13314: PUSH
13315: LD_VAR 0 1
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: LD_INT 25
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 25
13339: PUSH
13340: LD_INT 5
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 25
13349: PUSH
13350: LD_INT 8
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 25
13359: PUSH
13360: LD_INT 9
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 24
13376: PUSH
13377: LD_INT 1000
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: ST_TO_ADDR
// if medicCount > 0 then
13394: LD_VAR 0 7
13398: PUSH
13399: LD_INT 0
13401: GREATER
13402: IFFALSE 13476
// begin if damageUnit_list > 0 then
13404: LD_VAR 0 17
13408: PUSH
13409: LD_INT 0
13411: GREATER
13412: IFFALSE 13476
// begin for i in damageUnit_list do
13414: LD_ADDR_VAR 0 14
13418: PUSH
13419: LD_VAR 0 17
13423: PUSH
13424: FOR_IN
13425: IFFALSE 13474
// begin ComMoveToArea ( i , healArea ) ;
13427: LD_VAR 0 14
13431: PPUSH
13432: LD_VAR 0 10
13436: PPUSH
13437: CALL_OW 113
// for j in medic_list do
13441: LD_ADDR_VAR 0 15
13445: PUSH
13446: LD_VAR 0 18
13450: PUSH
13451: FOR_IN
13452: IFFALSE 13470
// AddComHeal ( j , i ) ;
13454: LD_VAR 0 15
13458: PPUSH
13459: LD_VAR 0 14
13463: PPUSH
13464: CALL_OW 188
13468: GO 13451
13470: POP
13471: POP
// end ;
13472: GO 13424
13474: POP
13475: POP
// end ; end ; for i in soldiersOK_list do
13476: LD_ADDR_VAR 0 14
13480: PUSH
13481: LD_VAR 0 19
13485: PUSH
13486: FOR_IN
13487: IFFALSE 13663
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13489: LD_ADDR_VAR 0 22
13493: PUSH
13494: LD_INT 22
13496: PUSH
13497: LD_VAR 0 11
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 69
13510: PPUSH
13511: LD_VAR 0 14
13515: PPUSH
13516: CALL_OW 74
13520: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13521: LD_ADDR_VAR 0 23
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_VAR 0 11
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 2
13540: PUSH
13541: LD_INT 59
13543: PUSH
13544: EMPTY
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 21
13559: PUSH
13560: LD_INT 2
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: PPUSH
13585: LD_VAR 0 14
13589: PPUSH
13590: CALL_OW 74
13594: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13595: LD_VAR 0 14
13599: PPUSH
13600: LD_VAR 0 22
13604: PPUSH
13605: CALL_OW 296
13609: PUSH
13610: LD_INT 6
13612: PLUS
13613: PUSH
13614: LD_VAR 0 14
13618: PPUSH
13619: LD_VAR 0 23
13623: PPUSH
13624: CALL_OW 296
13628: LESS
13629: IFFALSE 13647
// begin ComAttackUnit ( i , target1 ) ;
13631: LD_VAR 0 14
13635: PPUSH
13636: LD_VAR 0 22
13640: PPUSH
13641: CALL_OW 115
// end else
13645: GO 13661
// begin ComAttackUnit ( i , target2 ) ;
13647: LD_VAR 0 14
13651: PPUSH
13652: LD_VAR 0 23
13656: PPUSH
13657: CALL_OW 115
// end ; end ;
13661: GO 13486
13663: POP
13664: POP
// until soldiersOK_list = [ ] ;
13665: LD_VAR 0 19
13669: PUSH
13670: EMPTY
13671: EQUAL
13672: IFFALSE 13239
// end ; if strategy = 2 then
13674: LD_VAR 0 12
13678: PUSH
13679: LD_INT 2
13681: EQUAL
13682: IFFALSE 14198
// begin repeat wait ( 0 0$1 ) ;
13684: LD_INT 35
13686: PPUSH
13687: CALL_OW 67
// for i in soldiersOK_list do
13691: LD_ADDR_VAR 0 14
13695: PUSH
13696: LD_VAR 0 19
13700: PUSH
13701: FOR_IN
13702: IFFALSE 13736
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13704: LD_VAR 0 14
13708: PPUSH
13709: LD_INT 91
13711: PPUSH
13712: LD_INT 63
13714: PPUSH
13715: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13719: LD_VAR 0 14
13723: PPUSH
13724: LD_INT 75
13726: PPUSH
13727: LD_INT 33
13729: PPUSH
13730: CALL_OW 174
// end ;
13734: GO 13701
13736: POP
13737: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13738: LD_INT 13
13740: PPUSH
13741: LD_INT 22
13743: PUSH
13744: LD_VAR 0 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 70
13757: PUSH
13758: LD_INT 2
13760: GREATER
13761: IFFALSE 13684
// repeat wait ( 0 0$3 ) ;
13763: LD_INT 105
13765: PPUSH
13766: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13770: LD_ADDR_VAR 0 17
13774: PUSH
13775: LD_INT 22
13777: PUSH
13778: LD_VAR 0 1
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: LD_INT 3
13792: PUSH
13793: LD_INT 24
13795: PUSH
13796: LD_INT 550
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 24
13809: PUSH
13810: LD_INT 250
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 69
13830: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13831: LD_ADDR_VAR 0 19
13835: PUSH
13836: LD_INT 22
13838: PUSH
13839: LD_VAR 0 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 2
13850: PUSH
13851: LD_INT 25
13853: PUSH
13854: LD_INT 1
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 25
13863: PUSH
13864: LD_INT 5
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 8
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 25
13883: PUSH
13884: LD_INT 9
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 24
13900: PUSH
13901: LD_INT 1000
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: ST_TO_ADDR
// if medicCount > 0 then
13918: LD_VAR 0 7
13922: PUSH
13923: LD_INT 0
13925: GREATER
13926: IFFALSE 14000
// begin if damageUnit_list > 0 then
13928: LD_VAR 0 17
13932: PUSH
13933: LD_INT 0
13935: GREATER
13936: IFFALSE 14000
// begin for i in damageUnit_list do
13938: LD_ADDR_VAR 0 14
13942: PUSH
13943: LD_VAR 0 17
13947: PUSH
13948: FOR_IN
13949: IFFALSE 13998
// begin ComMoveToArea ( i , healArea ) ;
13951: LD_VAR 0 14
13955: PPUSH
13956: LD_VAR 0 10
13960: PPUSH
13961: CALL_OW 113
// for j in medic_list do
13965: LD_ADDR_VAR 0 15
13969: PUSH
13970: LD_VAR 0 18
13974: PUSH
13975: FOR_IN
13976: IFFALSE 13994
// AddComHeal ( j , i ) ;
13978: LD_VAR 0 15
13982: PPUSH
13983: LD_VAR 0 14
13987: PPUSH
13988: CALL_OW 188
13992: GO 13975
13994: POP
13995: POP
// end ;
13996: GO 13948
13998: POP
13999: POP
// end ; end ; for i in soldiersOK_list do
14000: LD_ADDR_VAR 0 14
14004: PUSH
14005: LD_VAR 0 19
14009: PUSH
14010: FOR_IN
14011: IFFALSE 14187
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14013: LD_ADDR_VAR 0 22
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_VAR 0 11
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 69
14034: PPUSH
14035: LD_VAR 0 14
14039: PPUSH
14040: CALL_OW 74
14044: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14045: LD_ADDR_VAR 0 23
14049: PUSH
14050: LD_INT 22
14052: PUSH
14053: LD_VAR 0 11
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: LD_INT 59
14067: PUSH
14068: EMPTY
14069: LIST
14070: PUSH
14071: LD_INT 21
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 21
14083: PUSH
14084: LD_INT 2
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: PPUSH
14109: LD_VAR 0 14
14113: PPUSH
14114: CALL_OW 74
14118: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14119: LD_VAR 0 14
14123: PPUSH
14124: LD_VAR 0 22
14128: PPUSH
14129: CALL_OW 296
14133: PUSH
14134: LD_INT 6
14136: PLUS
14137: PUSH
14138: LD_VAR 0 14
14142: PPUSH
14143: LD_VAR 0 23
14147: PPUSH
14148: CALL_OW 296
14152: LESS
14153: IFFALSE 14171
// begin ComAttackUnit ( i , target1 ) ;
14155: LD_VAR 0 14
14159: PPUSH
14160: LD_VAR 0 22
14164: PPUSH
14165: CALL_OW 115
// end else
14169: GO 14185
// begin ComAttackUnit ( i , target2 ) ;
14171: LD_VAR 0 14
14175: PPUSH
14176: LD_VAR 0 23
14180: PPUSH
14181: CALL_OW 115
// end ; end ;
14185: GO 14010
14187: POP
14188: POP
// until soldiersOK_list = [ ] ;
14189: LD_VAR 0 19
14193: PUSH
14194: EMPTY
14195: EQUAL
14196: IFFALSE 13763
// end ; if strategy = 3 then
14198: LD_VAR 0 12
14202: PUSH
14203: LD_INT 3
14205: EQUAL
14206: IFFALSE 14752
// begin repeat wait ( 0 0$3 ) ;
14208: LD_INT 105
14210: PPUSH
14211: CALL_OW 67
// for i in soldiersOK_list do
14215: LD_ADDR_VAR 0 14
14219: PUSH
14220: LD_VAR 0 19
14224: PUSH
14225: FOR_IN
14226: IFFALSE 14290
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14228: LD_VAR 0 14
14232: PPUSH
14233: LD_INT 63
14235: PPUSH
14236: LD_INT 71
14238: PPUSH
14239: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14243: LD_VAR 0 14
14247: PPUSH
14248: LD_INT 35
14250: PPUSH
14251: LD_INT 44
14253: PPUSH
14254: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14258: LD_VAR 0 14
14262: PPUSH
14263: LD_INT 23
14265: PPUSH
14266: LD_INT 18
14268: PPUSH
14269: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14273: LD_VAR 0 14
14277: PPUSH
14278: LD_INT 26
14280: PPUSH
14281: LD_INT 12
14283: PPUSH
14284: CALL_OW 174
// end ;
14288: GO 14225
14290: POP
14291: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14292: LD_INT 14
14294: PPUSH
14295: LD_INT 22
14297: PUSH
14298: LD_VAR 0 1
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 70
14311: PUSH
14312: LD_INT 2
14314: GREATER
14315: IFFALSE 14208
// repeat wait ( 0 0$1 ) ;
14317: LD_INT 35
14319: PPUSH
14320: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14324: LD_ADDR_VAR 0 17
14328: PUSH
14329: LD_INT 22
14331: PUSH
14332: LD_VAR 0 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 1
14343: PUSH
14344: LD_INT 3
14346: PUSH
14347: LD_INT 24
14349: PUSH
14350: LD_INT 550
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 24
14363: PUSH
14364: LD_INT 250
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: CALL_OW 69
14384: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14385: LD_ADDR_VAR 0 19
14389: PUSH
14390: LD_INT 22
14392: PUSH
14393: LD_VAR 0 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: LD_INT 25
14407: PUSH
14408: LD_INT 1
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 5
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 25
14427: PUSH
14428: LD_INT 8
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 25
14437: PUSH
14438: LD_INT 9
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 24
14454: PUSH
14455: LD_INT 1000
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 69
14471: ST_TO_ADDR
// if medicCount > 0 then
14472: LD_VAR 0 7
14476: PUSH
14477: LD_INT 0
14479: GREATER
14480: IFFALSE 14554
// begin if damageUnit_list > 0 then
14482: LD_VAR 0 17
14486: PUSH
14487: LD_INT 0
14489: GREATER
14490: IFFALSE 14554
// begin for i in damageUnit_list do
14492: LD_ADDR_VAR 0 14
14496: PUSH
14497: LD_VAR 0 17
14501: PUSH
14502: FOR_IN
14503: IFFALSE 14552
// begin ComMoveToArea ( i , healArea ) ;
14505: LD_VAR 0 14
14509: PPUSH
14510: LD_VAR 0 10
14514: PPUSH
14515: CALL_OW 113
// for j in medic_list do
14519: LD_ADDR_VAR 0 15
14523: PUSH
14524: LD_VAR 0 18
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14548
// AddComHeal ( j , i ) ;
14532: LD_VAR 0 15
14536: PPUSH
14537: LD_VAR 0 14
14541: PPUSH
14542: CALL_OW 188
14546: GO 14529
14548: POP
14549: POP
// end ;
14550: GO 14502
14552: POP
14553: POP
// end ; end ; for i in soldiersOK_list do
14554: LD_ADDR_VAR 0 14
14558: PUSH
14559: LD_VAR 0 19
14563: PUSH
14564: FOR_IN
14565: IFFALSE 14741
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14567: LD_ADDR_VAR 0 22
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_VAR 0 11
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: PPUSH
14589: LD_VAR 0 14
14593: PPUSH
14594: CALL_OW 74
14598: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14599: LD_ADDR_VAR 0 23
14603: PUSH
14604: LD_INT 22
14606: PUSH
14607: LD_VAR 0 11
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: LD_INT 59
14621: PUSH
14622: EMPTY
14623: LIST
14624: PUSH
14625: LD_INT 21
14627: PUSH
14628: LD_INT 1
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 21
14637: PUSH
14638: LD_INT 2
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: PPUSH
14658: CALL_OW 69
14662: PPUSH
14663: LD_VAR 0 14
14667: PPUSH
14668: CALL_OW 74
14672: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14673: LD_VAR 0 14
14677: PPUSH
14678: LD_VAR 0 22
14682: PPUSH
14683: CALL_OW 296
14687: PUSH
14688: LD_INT 6
14690: PLUS
14691: PUSH
14692: LD_VAR 0 14
14696: PPUSH
14697: LD_VAR 0 23
14701: PPUSH
14702: CALL_OW 296
14706: LESS
14707: IFFALSE 14725
// begin ComAttackUnit ( i , target1 ) ;
14709: LD_VAR 0 14
14713: PPUSH
14714: LD_VAR 0 22
14718: PPUSH
14719: CALL_OW 115
// end else
14723: GO 14739
// begin ComAttackUnit ( i , target2 ) ;
14725: LD_VAR 0 14
14729: PPUSH
14730: LD_VAR 0 23
14734: PPUSH
14735: CALL_OW 115
// end ; end ;
14739: GO 14564
14741: POP
14742: POP
// until soldiersOK_list = [ ] ;
14743: LD_VAR 0 19
14747: PUSH
14748: EMPTY
14749: EQUAL
14750: IFFALSE 14317
// end ; end ;
14752: LD_VAR 0 13
14756: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14757: LD_INT 0
14759: PPUSH
14760: PPUSH
14761: PPUSH
14762: PPUSH
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
// amChassisTab = [ ] ;
14770: LD_ADDR_VAR 0 19
14774: PUSH
14775: EMPTY
14776: ST_TO_ADDR
// arChassisTab = [ ] ;
14777: LD_ADDR_VAR 0 18
14781: PUSH
14782: EMPTY
14783: ST_TO_ADDR
// ruChassisTab = [ ] ;
14784: LD_ADDR_VAR 0 17
14788: PUSH
14789: EMPTY
14790: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14791: LD_INT 35
14793: PPUSH
14794: CALL_OW 67
// if nation = 1 then
14798: LD_VAR 0 5
14802: PUSH
14803: LD_INT 1
14805: EQUAL
14806: IFFALSE 15297
// begin uc_side = side ;
14808: LD_ADDR_OWVAR 20
14812: PUSH
14813: LD_VAR 0 2
14817: ST_TO_ADDR
// uc_nation = nation ;
14818: LD_ADDR_OWVAR 21
14822: PUSH
14823: LD_VAR 0 5
14827: ST_TO_ADDR
// vc_engine = vehengine ;
14828: LD_ADDR_OWVAR 39
14832: PUSH
14833: LD_VAR 0 6
14837: ST_TO_ADDR
// vc_control = vehcontrol ;
14838: LD_ADDR_OWVAR 38
14842: PUSH
14843: LD_VAR 0 7
14847: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14848: LD_ADDR_OWVAR 40
14852: PUSH
14853: LD_VAR 0 10
14857: PUSH
14858: LD_INT 1
14860: PPUSH
14861: LD_VAR 0 10
14865: PPUSH
14866: CALL_OW 12
14870: ARRAY
14871: ST_TO_ADDR
// for j = 1 to AMWeapon do
14872: LD_ADDR_VAR 0 14
14876: PUSH
14877: DOUBLE
14878: LD_INT 1
14880: DEC
14881: ST_TO_ADDR
14882: LD_VAR 0 10
14886: PUSH
14887: FOR_TO
14888: IFFALSE 15189
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14890: LD_VAR 0 10
14894: PUSH
14895: LD_VAR 0 14
14899: ARRAY
14900: PUSH
14901: LD_INT 2
14903: EQUAL
14904: PUSH
14905: LD_VAR 0 10
14909: PUSH
14910: LD_VAR 0 14
14914: ARRAY
14915: PUSH
14916: LD_INT 3
14918: EQUAL
14919: OR
14920: IFFALSE 14973
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14922: LD_ADDR_VAR 0 19
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: LD_INT 3
14935: PUSH
14936: LD_INT 4
14938: PUSH
14939: LD_INT 5
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14949: LD_ADDR_OWVAR 37
14953: PUSH
14954: LD_VAR 0 19
14958: PUSH
14959: LD_INT 1
14961: PPUSH
14962: LD_VAR 0 19
14966: PPUSH
14967: CALL_OW 12
14971: ARRAY
14972: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14973: LD_VAR 0 10
14977: PUSH
14978: LD_VAR 0 14
14982: ARRAY
14983: PUSH
14984: LD_INT 4
14986: EQUAL
14987: PUSH
14988: LD_VAR 0 10
14992: PUSH
14993: LD_VAR 0 14
14997: ARRAY
14998: PUSH
14999: LD_INT 5
15001: EQUAL
15002: OR
15003: PUSH
15004: LD_VAR 0 10
15008: PUSH
15009: LD_VAR 0 14
15013: ARRAY
15014: PUSH
15015: LD_INT 9
15017: EQUAL
15018: OR
15019: PUSH
15020: LD_VAR 0 10
15024: PUSH
15025: LD_VAR 0 14
15029: ARRAY
15030: PUSH
15031: LD_INT 11
15033: EQUAL
15034: OR
15035: PUSH
15036: LD_VAR 0 10
15040: PUSH
15041: LD_VAR 0 14
15045: ARRAY
15046: PUSH
15047: LD_INT 7
15049: EQUAL
15050: OR
15051: IFFALSE 15100
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15053: LD_ADDR_VAR 0 19
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: LD_INT 4
15066: PUSH
15067: LD_INT 5
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15076: LD_ADDR_OWVAR 37
15080: PUSH
15081: LD_VAR 0 19
15085: PUSH
15086: LD_INT 1
15088: PPUSH
15089: LD_VAR 0 19
15093: PPUSH
15094: CALL_OW 12
15098: ARRAY
15099: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15100: LD_VAR 0 10
15104: PUSH
15105: LD_VAR 0 14
15109: ARRAY
15110: PUSH
15111: LD_INT 8
15113: EQUAL
15114: PUSH
15115: LD_VAR 0 10
15119: PUSH
15120: LD_VAR 0 14
15124: ARRAY
15125: PUSH
15126: LD_INT 6
15128: EQUAL
15129: OR
15130: PUSH
15131: LD_VAR 0 10
15135: PUSH
15136: LD_VAR 0 14
15140: ARRAY
15141: PUSH
15142: LD_INT 10
15144: EQUAL
15145: OR
15146: IFFALSE 15187
// begin amChassisTab = [ 4 , 5 ] ;
15148: LD_ADDR_VAR 0 19
15152: PUSH
15153: LD_INT 4
15155: PUSH
15156: LD_INT 5
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15163: LD_ADDR_OWVAR 37
15167: PUSH
15168: LD_VAR 0 19
15172: PUSH
15173: LD_INT 1
15175: PPUSH
15176: LD_VAR 0 19
15180: PPUSH
15181: CALL_OW 12
15185: ARRAY
15186: ST_TO_ADDR
// end ; end ;
15187: GO 14887
15189: POP
15190: POP
// veh = CreateVehicle ;
15191: LD_ADDR_VAR 0 16
15195: PUSH
15196: CALL_OW 45
15200: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15201: LD_VAR 0 16
15205: PPUSH
15206: LD_VAR 0 1
15210: PPUSH
15211: LD_INT 0
15213: PPUSH
15214: CALL_OW 49
// if vehControl = 1 then
15218: LD_VAR 0 7
15222: PUSH
15223: LD_INT 1
15225: EQUAL
15226: IFFALSE 15283
// begin hc_gallery =  ;
15228: LD_ADDR_OWVAR 33
15232: PUSH
15233: LD_STRING 
15235: ST_TO_ADDR
// hc_name =  ;
15236: LD_ADDR_OWVAR 26
15240: PUSH
15241: LD_STRING 
15243: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15244: LD_INT 0
15246: PPUSH
15247: LD_INT 3
15249: PPUSH
15250: LD_VAR 0 4
15254: PPUSH
15255: CALL_OW 380
// un = CreateHuman ;
15259: LD_ADDR_VAR 0 15
15263: PUSH
15264: CALL_OW 44
15268: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15269: LD_VAR 0 15
15273: PPUSH
15274: LD_VAR 0 16
15278: PPUSH
15279: CALL_OW 52
// end ; i = i + 1 ;
15283: LD_ADDR_VAR 0 13
15287: PUSH
15288: LD_VAR 0 13
15292: PUSH
15293: LD_INT 1
15295: PLUS
15296: ST_TO_ADDR
// end ; if nation = 2 then
15297: LD_VAR 0 5
15301: PUSH
15302: LD_INT 2
15304: EQUAL
15305: IFFALSE 15729
// begin uc_side = side ;
15307: LD_ADDR_OWVAR 20
15311: PUSH
15312: LD_VAR 0 2
15316: ST_TO_ADDR
// uc_nation = nation ;
15317: LD_ADDR_OWVAR 21
15321: PUSH
15322: LD_VAR 0 5
15326: ST_TO_ADDR
// vc_engine = vehengine ;
15327: LD_ADDR_OWVAR 39
15331: PUSH
15332: LD_VAR 0 6
15336: ST_TO_ADDR
// vc_control = vehcontrol ;
15337: LD_ADDR_OWVAR 38
15341: PUSH
15342: LD_VAR 0 7
15346: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15347: LD_ADDR_OWVAR 40
15351: PUSH
15352: LD_VAR 0 9
15356: PUSH
15357: LD_INT 1
15359: PPUSH
15360: LD_VAR 0 9
15364: PPUSH
15365: CALL_OW 12
15369: ARRAY
15370: ST_TO_ADDR
// for j = 1 to ARWeapons do
15371: LD_ADDR_VAR 0 14
15375: PUSH
15376: DOUBLE
15377: LD_INT 1
15379: DEC
15380: ST_TO_ADDR
15381: LD_VAR 0 9
15385: PUSH
15386: FOR_TO
15387: IFFALSE 15621
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15389: LD_VAR 0 9
15393: PUSH
15394: LD_VAR 0 14
15398: ARRAY
15399: PUSH
15400: LD_INT 24
15402: EQUAL
15403: PUSH
15404: LD_VAR 0 9
15408: PUSH
15409: LD_VAR 0 14
15413: ARRAY
15414: PUSH
15415: LD_INT 22
15417: EQUAL
15418: OR
15419: PUSH
15420: LD_VAR 0 9
15424: PUSH
15425: LD_VAR 0 14
15429: ARRAY
15430: PUSH
15431: LD_INT 23
15433: EQUAL
15434: OR
15435: PUSH
15436: LD_VAR 0 9
15440: PUSH
15441: LD_VAR 0 14
15445: ARRAY
15446: PUSH
15447: LD_INT 30
15449: EQUAL
15450: OR
15451: IFFALSE 15500
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15453: LD_ADDR_VAR 0 18
15457: PUSH
15458: LD_INT 11
15460: PUSH
15461: LD_INT 12
15463: PUSH
15464: LD_INT 13
15466: PUSH
15467: LD_INT 14
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15476: LD_ADDR_OWVAR 37
15480: PUSH
15481: LD_VAR 0 18
15485: PUSH
15486: LD_INT 1
15488: PPUSH
15489: LD_VAR 0 18
15493: PPUSH
15494: CALL_OW 12
15498: ARRAY
15499: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15500: LD_VAR 0 9
15504: PUSH
15505: LD_VAR 0 14
15509: ARRAY
15510: PUSH
15511: LD_INT 29
15513: EQUAL
15514: PUSH
15515: LD_VAR 0 9
15519: PUSH
15520: LD_VAR 0 14
15524: ARRAY
15525: PUSH
15526: LD_INT 28
15528: EQUAL
15529: OR
15530: PUSH
15531: LD_VAR 0 9
15535: PUSH
15536: LD_VAR 0 14
15540: ARRAY
15541: PUSH
15542: LD_INT 27
15544: EQUAL
15545: OR
15546: PUSH
15547: LD_VAR 0 9
15551: PUSH
15552: LD_VAR 0 14
15556: ARRAY
15557: PUSH
15558: LD_INT 26
15560: EQUAL
15561: OR
15562: PUSH
15563: LD_VAR 0 9
15567: PUSH
15568: LD_VAR 0 14
15572: ARRAY
15573: PUSH
15574: LD_INT 25
15576: EQUAL
15577: OR
15578: IFFALSE 15619
// begin arChassisTab = [ 13 , 14 ] ;
15580: LD_ADDR_VAR 0 18
15584: PUSH
15585: LD_INT 13
15587: PUSH
15588: LD_INT 14
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15595: LD_ADDR_OWVAR 37
15599: PUSH
15600: LD_VAR 0 18
15604: PUSH
15605: LD_INT 1
15607: PPUSH
15608: LD_VAR 0 18
15612: PPUSH
15613: CALL_OW 12
15617: ARRAY
15618: ST_TO_ADDR
// end ; end ;
15619: GO 15386
15621: POP
15622: POP
// veh = CreateVehicle ;
15623: LD_ADDR_VAR 0 16
15627: PUSH
15628: CALL_OW 45
15632: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15633: LD_VAR 0 16
15637: PPUSH
15638: LD_VAR 0 1
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL_OW 49
// if vehcontrol = 1 then
15650: LD_VAR 0 7
15654: PUSH
15655: LD_INT 1
15657: EQUAL
15658: IFFALSE 15715
// begin hc_gallery =  ;
15660: LD_ADDR_OWVAR 33
15664: PUSH
15665: LD_STRING 
15667: ST_TO_ADDR
// hc_name =  ;
15668: LD_ADDR_OWVAR 26
15672: PUSH
15673: LD_STRING 
15675: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15676: LD_INT 0
15678: PPUSH
15679: LD_INT 3
15681: PPUSH
15682: LD_VAR 0 4
15686: PPUSH
15687: CALL_OW 380
// un = CreateHuman ;
15691: LD_ADDR_VAR 0 15
15695: PUSH
15696: CALL_OW 44
15700: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15701: LD_VAR 0 15
15705: PPUSH
15706: LD_VAR 0 16
15710: PPUSH
15711: CALL_OW 52
// end ; i = i + 1 ;
15715: LD_ADDR_VAR 0 13
15719: PUSH
15720: LD_VAR 0 13
15724: PUSH
15725: LD_INT 1
15727: PLUS
15728: ST_TO_ADDR
// end ; if nation = 3 then
15729: LD_VAR 0 5
15733: PUSH
15734: LD_INT 3
15736: EQUAL
15737: IFFALSE 16129
// begin uc_side = side ;
15739: LD_ADDR_OWVAR 20
15743: PUSH
15744: LD_VAR 0 2
15748: ST_TO_ADDR
// uc_nation = nation ;
15749: LD_ADDR_OWVAR 21
15753: PUSH
15754: LD_VAR 0 5
15758: ST_TO_ADDR
// vc_engine = vehengine ;
15759: LD_ADDR_OWVAR 39
15763: PUSH
15764: LD_VAR 0 6
15768: ST_TO_ADDR
// vc_control = vehcontrol ;
15769: LD_ADDR_OWVAR 38
15773: PUSH
15774: LD_VAR 0 7
15778: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15779: LD_ADDR_OWVAR 40
15783: PUSH
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 1
15791: PPUSH
15792: LD_VAR 0 8
15796: PPUSH
15797: CALL_OW 12
15801: ARRAY
15802: ST_TO_ADDR
// for j = 1 to RuWeapons do
15803: LD_ADDR_VAR 0 14
15807: PUSH
15808: DOUBLE
15809: LD_INT 1
15811: DEC
15812: ST_TO_ADDR
15813: LD_VAR 0 8
15817: PUSH
15818: FOR_TO
15819: IFFALSE 16021
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15821: LD_VAR 0 8
15825: PUSH
15826: LD_VAR 0 14
15830: ARRAY
15831: PUSH
15832: LD_INT 42
15834: EQUAL
15835: PUSH
15836: LD_VAR 0 8
15840: PUSH
15841: LD_VAR 0 14
15845: ARRAY
15846: PUSH
15847: LD_INT 43
15849: EQUAL
15850: OR
15851: PUSH
15852: LD_VAR 0 8
15856: PUSH
15857: LD_VAR 0 14
15861: ARRAY
15862: PUSH
15863: LD_INT 44
15865: EQUAL
15866: OR
15867: PUSH
15868: LD_VAR 0 8
15872: PUSH
15873: LD_VAR 0 14
15877: ARRAY
15878: PUSH
15879: LD_INT 45
15881: EQUAL
15882: OR
15883: PUSH
15884: LD_VAR 0 8
15888: PUSH
15889: LD_VAR 0 14
15893: ARRAY
15894: PUSH
15895: LD_INT 49
15897: EQUAL
15898: OR
15899: IFFALSE 15948
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15901: LD_ADDR_VAR 0 17
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_INT 23
15914: PUSH
15915: LD_INT 24
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15924: LD_ADDR_OWVAR 37
15928: PUSH
15929: LD_VAR 0 17
15933: PUSH
15934: LD_INT 1
15936: PPUSH
15937: LD_VAR 0 17
15941: PPUSH
15942: CALL_OW 12
15946: ARRAY
15947: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15948: LD_VAR 0 8
15952: PUSH
15953: LD_VAR 0 14
15957: ARRAY
15958: PUSH
15959: LD_INT 46
15961: EQUAL
15962: PUSH
15963: LD_VAR 0 8
15967: PUSH
15968: LD_VAR 0 14
15972: ARRAY
15973: PUSH
15974: LD_INT 47
15976: EQUAL
15977: OR
15978: IFFALSE 16019
// begin ruChassisTab = [ 23 , 24 ] ;
15980: LD_ADDR_VAR 0 17
15984: PUSH
15985: LD_INT 23
15987: PUSH
15988: LD_INT 24
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15995: LD_ADDR_OWVAR 37
15999: PUSH
16000: LD_VAR 0 17
16004: PUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_VAR 0 17
16012: PPUSH
16013: CALL_OW 12
16017: ARRAY
16018: ST_TO_ADDR
// end ; end ;
16019: GO 15818
16021: POP
16022: POP
// veh = CreateVehicle ;
16023: LD_ADDR_VAR 0 16
16027: PUSH
16028: CALL_OW 45
16032: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16033: LD_VAR 0 16
16037: PPUSH
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 0
16045: PPUSH
16046: CALL_OW 49
// if vehcontrol = 1 then
16050: LD_VAR 0 7
16054: PUSH
16055: LD_INT 1
16057: EQUAL
16058: IFFALSE 16115
// begin hc_gallery =  ;
16060: LD_ADDR_OWVAR 33
16064: PUSH
16065: LD_STRING 
16067: ST_TO_ADDR
// hc_name =  ;
16068: LD_ADDR_OWVAR 26
16072: PUSH
16073: LD_STRING 
16075: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16076: LD_INT 0
16078: PPUSH
16079: LD_INT 3
16081: PPUSH
16082: LD_VAR 0 4
16086: PPUSH
16087: CALL_OW 380
// un = CreateHuman ;
16091: LD_ADDR_VAR 0 15
16095: PUSH
16096: CALL_OW 44
16100: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16101: LD_VAR 0 15
16105: PPUSH
16106: LD_VAR 0 16
16110: PPUSH
16111: CALL_OW 52
// end ; i = i + 1 ;
16115: LD_ADDR_VAR 0 13
16119: PUSH
16120: LD_VAR 0 13
16124: PUSH
16125: LD_INT 1
16127: PLUS
16128: ST_TO_ADDR
// end ; until i = vehCount ;
16129: LD_VAR 0 13
16133: PUSH
16134: LD_VAR 0 3
16138: EQUAL
16139: IFFALSE 14791
// repeat wait ( 0 0$1 ) ;
16141: LD_INT 35
16143: PPUSH
16144: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16148: LD_ADDR_VAR 0 20
16152: PUSH
16153: LD_INT 22
16155: PUSH
16156: LD_VAR 0 2
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 21
16167: PUSH
16168: LD_INT 2
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 24
16177: PUSH
16178: LD_INT 250
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: ST_TO_ADDR
// if vehicleOK_list > 0 then
16195: LD_VAR 0 20
16199: PUSH
16200: LD_INT 0
16202: GREATER
16203: IFFALSE 16394
// begin for i in vehicleOK_list do
16205: LD_ADDR_VAR 0 13
16209: PUSH
16210: LD_VAR 0 20
16214: PUSH
16215: FOR_IN
16216: IFFALSE 16392
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16218: LD_ADDR_VAR 0 21
16222: PUSH
16223: LD_INT 22
16225: PUSH
16226: LD_VAR 0 11
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PPUSH
16235: CALL_OW 69
16239: PPUSH
16240: LD_VAR 0 13
16244: PPUSH
16245: CALL_OW 74
16249: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16250: LD_ADDR_VAR 0 22
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_VAR 0 11
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 59
16272: PUSH
16273: EMPTY
16274: LIST
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 21
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: PPUSH
16314: LD_VAR 0 13
16318: PPUSH
16319: CALL_OW 74
16323: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16324: LD_VAR 0 13
16328: PPUSH
16329: LD_VAR 0 21
16333: PPUSH
16334: CALL_OW 296
16338: PUSH
16339: LD_INT 6
16341: PLUS
16342: PUSH
16343: LD_VAR 0 13
16347: PPUSH
16348: LD_VAR 0 22
16352: PPUSH
16353: CALL_OW 296
16357: LESS
16358: IFFALSE 16376
// begin ComAttackUnit ( i , target1 ) ;
16360: LD_VAR 0 13
16364: PPUSH
16365: LD_VAR 0 21
16369: PPUSH
16370: CALL_OW 115
// end else
16374: GO 16390
// begin ComAttackUnit ( i , target2 ) ;
16376: LD_VAR 0 13
16380: PPUSH
16381: LD_VAR 0 22
16385: PPUSH
16386: CALL_OW 115
// end ; end ;
16390: GO 16215
16392: POP
16393: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16394: LD_INT 22
16396: PUSH
16397: LD_VAR 0 2
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 21
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 24
16418: PUSH
16419: LD_INT 250
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: PPUSH
16431: CALL_OW 69
16435: PUSH
16436: LD_INT 0
16438: EQUAL
16439: IFFALSE 16141
// end ;
16441: LD_VAR 0 12
16445: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16456: LD_ADDR_VAR 0 7
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_VAR 0 1
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: LD_INT 3
16478: PUSH
16479: LD_INT 24
16481: PUSH
16482: LD_INT 550
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 24
16495: PUSH
16496: LD_INT 250
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16517: LD_ADDR_VAR 0 8
16521: PUSH
16522: LD_INT 22
16524: PUSH
16525: LD_VAR 0 1
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 2
16536: PUSH
16537: LD_INT 25
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 25
16549: PUSH
16550: LD_INT 5
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 25
16559: PUSH
16560: LD_INT 8
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 25
16569: PUSH
16570: LD_INT 9
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 24
16586: PUSH
16587: LD_INT 1000
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: PPUSH
16599: CALL_OW 69
16603: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16604: LD_ADDR_VAR 0 9
16608: PUSH
16609: LD_INT 22
16611: PUSH
16612: LD_VAR 0 1
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 25
16623: PUSH
16624: LD_INT 4
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: ST_TO_ADDR
// if medicCount > 0 then
16640: LD_VAR 0 9
16644: PUSH
16645: LD_INT 0
16647: GREATER
16648: IFFALSE 16722
// begin if damageUnit_list > 0 then
16650: LD_VAR 0 7
16654: PUSH
16655: LD_INT 0
16657: GREATER
16658: IFFALSE 16722
// begin for i in damageUnit_list do
16660: LD_ADDR_VAR 0 5
16664: PUSH
16665: LD_VAR 0 7
16669: PUSH
16670: FOR_IN
16671: IFFALSE 16720
// begin ComMoveToArea ( i , healArea ) ;
16673: LD_VAR 0 5
16677: PPUSH
16678: LD_VAR 0 2
16682: PPUSH
16683: CALL_OW 113
// for j in medicCount do
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_VAR 0 9
16696: PUSH
16697: FOR_IN
16698: IFFALSE 16716
// AddComHeal ( j , i ) ;
16700: LD_VAR 0 6
16704: PPUSH
16705: LD_VAR 0 5
16709: PPUSH
16710: CALL_OW 188
16714: GO 16697
16716: POP
16717: POP
// end ;
16718: GO 16670
16720: POP
16721: POP
// end ; end ; if soldiersOK_list > 0 then
16722: LD_VAR 0 8
16726: PUSH
16727: LD_INT 0
16729: GREATER
16730: IFFALSE 16921
// begin for i in soldiersOK_list do
16732: LD_ADDR_VAR 0 5
16736: PUSH
16737: LD_VAR 0 8
16741: PUSH
16742: FOR_IN
16743: IFFALSE 16919
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16745: LD_ADDR_VAR 0 10
16749: PUSH
16750: LD_INT 22
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PPUSH
16762: CALL_OW 69
16766: PPUSH
16767: LD_VAR 0 5
16771: PPUSH
16772: CALL_OW 74
16776: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16777: LD_ADDR_VAR 0 11
16781: PUSH
16782: LD_INT 22
16784: PUSH
16785: LD_VAR 0 3
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: LD_INT 59
16799: PUSH
16800: EMPTY
16801: LIST
16802: PUSH
16803: LD_INT 21
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 21
16815: PUSH
16816: LD_INT 2
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: EMPTY
16834: LIST
16835: PPUSH
16836: CALL_OW 69
16840: PPUSH
16841: LD_VAR 0 5
16845: PPUSH
16846: CALL_OW 74
16850: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16851: LD_VAR 0 5
16855: PPUSH
16856: LD_VAR 0 10
16860: PPUSH
16861: CALL_OW 296
16865: PUSH
16866: LD_INT 8
16868: PLUS
16869: PUSH
16870: LD_VAR 0 5
16874: PPUSH
16875: LD_VAR 0 11
16879: PPUSH
16880: CALL_OW 296
16884: LESS
16885: IFFALSE 16903
// begin ComAttackUnit ( i , target1 ) ;
16887: LD_VAR 0 5
16891: PPUSH
16892: LD_VAR 0 10
16896: PPUSH
16897: CALL_OW 115
// end else
16901: GO 16917
// begin ComAttackUnit ( i , target2 ) ;
16903: LD_VAR 0 5
16907: PPUSH
16908: LD_VAR 0 11
16912: PPUSH
16913: CALL_OW 115
// end ; end ;
16917: GO 16742
16919: POP
16920: POP
// end ; end ;
16921: LD_VAR 0 4
16925: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
16926: LD_INT 0
16928: PPUSH
16929: PPUSH
// list := [ ] ;
16930: LD_ADDR_VAR 0 5
16934: PUSH
16935: EMPTY
16936: ST_TO_ADDR
// case d of 0 :
16937: LD_VAR 0 3
16941: PUSH
16942: LD_INT 0
16944: DOUBLE
16945: EQUAL
16946: IFTRUE 16950
16948: GO 17083
16950: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16951: LD_ADDR_VAR 0 5
16955: PUSH
16956: LD_VAR 0 1
16960: PUSH
16961: LD_INT 4
16963: MINUS
16964: PUSH
16965: LD_VAR 0 2
16969: PUSH
16970: LD_INT 4
16972: MINUS
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_VAR 0 1
16986: PUSH
16987: LD_INT 3
16989: MINUS
16990: PUSH
16991: LD_VAR 0 2
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: LD_VAR 0 1
17008: PUSH
17009: LD_INT 4
17011: PLUS
17012: PUSH
17013: LD_VAR 0 2
17017: PUSH
17018: LD_INT 4
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: PUSH
17026: LD_VAR 0 1
17030: PUSH
17031: LD_INT 3
17033: PLUS
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 3
17042: PLUS
17043: PUSH
17044: LD_INT 5
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: PUSH
17052: LD_VAR 0 1
17056: PUSH
17057: LD_VAR 0 2
17061: PUSH
17062: LD_INT 4
17064: PLUS
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: ST_TO_ADDR
// end ; 1 :
17081: GO 17781
17083: LD_INT 1
17085: DOUBLE
17086: EQUAL
17087: IFTRUE 17091
17089: GO 17224
17091: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
17092: LD_ADDR_VAR 0 5
17096: PUSH
17097: LD_VAR 0 1
17101: PUSH
17102: LD_VAR 0 2
17106: PUSH
17107: LD_INT 4
17109: MINUS
17110: PUSH
17111: LD_INT 3
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: LD_VAR 0 1
17123: PUSH
17124: LD_INT 3
17126: MINUS
17127: PUSH
17128: LD_VAR 0 2
17132: PUSH
17133: LD_INT 3
17135: MINUS
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: PUSH
17145: LD_VAR 0 1
17149: PUSH
17150: LD_INT 4
17152: MINUS
17153: PUSH
17154: LD_VAR 0 2
17158: PUSH
17159: LD_INT 1
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: LD_VAR 0 1
17171: PUSH
17172: LD_VAR 0 2
17176: PUSH
17177: LD_INT 3
17179: PLUS
17180: PUSH
17181: LD_INT 0
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: PUSH
17189: LD_VAR 0 1
17193: PUSH
17194: LD_INT 4
17196: PLUS
17197: PUSH
17198: LD_VAR 0 2
17202: PUSH
17203: LD_INT 4
17205: PLUS
17206: PUSH
17207: LD_INT 5
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: ST_TO_ADDR
// end ; 2 :
17222: GO 17781
17224: LD_INT 2
17226: DOUBLE
17227: EQUAL
17228: IFTRUE 17232
17230: GO 17361
17232: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17233: LD_ADDR_VAR 0 5
17237: PUSH
17238: LD_VAR 0 1
17242: PUSH
17243: LD_VAR 0 2
17247: PUSH
17248: LD_INT 3
17250: MINUS
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: PUSH
17260: LD_VAR 0 1
17264: PUSH
17265: LD_INT 4
17267: PLUS
17268: PUSH
17269: LD_VAR 0 2
17273: PUSH
17274: LD_INT 4
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: PUSH
17282: LD_VAR 0 1
17286: PUSH
17287: LD_VAR 0 2
17291: PUSH
17292: LD_INT 4
17294: PLUS
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: LD_VAR 0 1
17308: PUSH
17309: LD_INT 3
17311: MINUS
17312: PUSH
17313: LD_VAR 0 2
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_VAR 0 1
17330: PUSH
17331: LD_INT 4
17333: MINUS
17334: PUSH
17335: LD_VAR 0 2
17339: PUSH
17340: LD_INT 4
17342: MINUS
17343: PUSH
17344: LD_INT 2
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: ST_TO_ADDR
// end ; 3 :
17359: GO 17781
17361: LD_INT 3
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17502
17369: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17370: LD_ADDR_VAR 0 5
17374: PUSH
17375: LD_VAR 0 1
17379: PUSH
17380: LD_INT 3
17382: PLUS
17383: PUSH
17384: LD_VAR 0 2
17388: PUSH
17389: LD_INT 4
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: LD_VAR 0 1
17401: PUSH
17402: LD_INT 4
17404: PLUS
17405: PUSH
17406: LD_VAR 0 2
17410: PUSH
17411: LD_INT 4
17413: PLUS
17414: PUSH
17415: LD_INT 5
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: PUSH
17423: LD_VAR 0 1
17427: PUSH
17428: LD_INT 4
17430: MINUS
17431: PUSH
17432: LD_VAR 0 2
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: PUSH
17445: LD_VAR 0 1
17449: PUSH
17450: LD_VAR 0 2
17454: PUSH
17455: LD_INT 4
17457: MINUS
17458: PUSH
17459: LD_INT 3
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: PUSH
17467: LD_VAR 0 1
17471: PUSH
17472: LD_INT 3
17474: MINUS
17475: PUSH
17476: LD_VAR 0 2
17480: PUSH
17481: LD_INT 3
17483: MINUS
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: ST_TO_ADDR
// end ; 4 :
17500: GO 17781
17502: LD_INT 4
17504: DOUBLE
17505: EQUAL
17506: IFTRUE 17510
17508: GO 17643
17510: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17511: LD_ADDR_VAR 0 5
17515: PUSH
17516: LD_VAR 0 1
17520: PUSH
17521: LD_VAR 0 2
17525: PUSH
17526: LD_INT 4
17528: PLUS
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: LD_VAR 0 1
17542: PUSH
17543: LD_INT 3
17545: PLUS
17546: PUSH
17547: LD_VAR 0 2
17551: PUSH
17552: LD_INT 3
17554: PLUS
17555: PUSH
17556: LD_INT 5
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: LD_VAR 0 1
17568: PUSH
17569: LD_INT 4
17571: PLUS
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: LD_INT 4
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: LIST
17585: PUSH
17586: LD_VAR 0 1
17590: PUSH
17591: LD_VAR 0 2
17595: PUSH
17596: LD_INT 3
17598: MINUS
17599: PUSH
17600: LD_INT 3
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: LD_VAR 0 1
17612: PUSH
17613: LD_INT 4
17615: MINUS
17616: PUSH
17617: LD_VAR 0 2
17621: PUSH
17622: LD_INT 4
17624: MINUS
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: ST_TO_ADDR
// end ; 5 :
17641: GO 17781
17643: LD_INT 5
17645: DOUBLE
17646: EQUAL
17647: IFTRUE 17651
17649: GO 17780
17651: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17652: LD_ADDR_VAR 0 5
17656: PUSH
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 4
17664: MINUS
17665: PUSH
17666: LD_VAR 0 2
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: LIST
17678: PUSH
17679: LD_VAR 0 1
17683: PUSH
17684: LD_VAR 0 2
17688: PUSH
17689: LD_INT 4
17691: MINUS
17692: PUSH
17693: LD_INT 3
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: PUSH
17701: LD_VAR 0 1
17705: PUSH
17706: LD_INT 4
17708: PLUS
17709: PUSH
17710: LD_VAR 0 2
17714: PUSH
17715: LD_INT 4
17717: PLUS
17718: PUSH
17719: LD_INT 5
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: LD_VAR 0 1
17731: PUSH
17732: LD_INT 3
17734: PLUS
17735: PUSH
17736: LD_VAR 0 2
17740: PUSH
17741: LD_INT 4
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: PUSH
17749: LD_VAR 0 1
17753: PUSH
17754: LD_VAR 0 2
17758: PUSH
17759: LD_INT 3
17761: PLUS
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: ST_TO_ADDR
// end ; end ;
17778: GO 17781
17780: POP
// result := list ;
17781: LD_ADDR_VAR 0 4
17785: PUSH
17786: LD_VAR 0 5
17790: ST_TO_ADDR
// end ;
17791: LD_VAR 0 4
17795: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
17800: PPUSH
17801: PPUSH
17802: PPUSH
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
// result := false ;
17807: LD_ADDR_VAR 0 7
17811: PUSH
17812: LD_INT 0
17814: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17815: LD_VAR 0 1
17819: NOT
17820: PUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL_OW 266
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: IN
17841: NOT
17842: OR
17843: PUSH
17844: LD_VAR 0 2
17848: NOT
17849: OR
17850: PUSH
17851: LD_VAR 0 5
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: LD_INT 2
17864: PUSH
17865: LD_INT 3
17867: PUSH
17868: LD_INT 4
17870: PUSH
17871: LD_INT 5
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: IN
17882: NOT
17883: OR
17884: PUSH
17885: LD_VAR 0 3
17889: PPUSH
17890: LD_VAR 0 4
17894: PPUSH
17895: CALL_OW 488
17899: NOT
17900: OR
17901: IFFALSE 17905
// exit ;
17903: GO 18586
// pom := GetBase ( bdepot ) ;
17905: LD_ADDR_VAR 0 10
17909: PUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 274
17919: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17920: LD_ADDR_VAR 0 11
17924: PUSH
17925: LD_VAR 0 2
17929: PPUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 248
17939: PPUSH
17940: CALL_OW 450
17944: ST_TO_ADDR
// if check_cost then
17945: LD_VAR 0 6
17949: IFFALSE 18026
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17951: LD_VAR 0 10
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 275
17963: PUSH
17964: LD_VAR 0 11
17968: PUSH
17969: LD_INT 1
17971: ARRAY
17972: GREATEREQUAL
17973: PUSH
17974: LD_VAR 0 10
17978: PPUSH
17979: LD_INT 2
17981: PPUSH
17982: CALL_OW 275
17986: PUSH
17987: LD_VAR 0 11
17991: PUSH
17992: LD_INT 2
17994: ARRAY
17995: GREATEREQUAL
17996: AND
17997: PUSH
17998: LD_VAR 0 10
18002: PPUSH
18003: LD_INT 3
18005: PPUSH
18006: CALL_OW 275
18010: PUSH
18011: LD_VAR 0 11
18015: PUSH
18016: LD_INT 3
18018: ARRAY
18019: GREATEREQUAL
18020: AND
18021: NOT
18022: IFFALSE 18026
// exit ;
18024: GO 18586
// if GetBType ( bdepot ) = b_depot then
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 266
18035: PUSH
18036: LD_INT 0
18038: EQUAL
18039: IFFALSE 18051
// dist := 28 else
18041: LD_ADDR_VAR 0 14
18045: PUSH
18046: LD_INT 28
18048: ST_TO_ADDR
18049: GO 18059
// dist := 36 ;
18051: LD_ADDR_VAR 0 14
18055: PUSH
18056: LD_INT 36
18058: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
18059: LD_VAR 0 1
18063: PPUSH
18064: LD_VAR 0 3
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: CALL_OW 297
18078: PUSH
18079: LD_VAR 0 14
18083: GREATER
18084: IFFALSE 18088
// exit ;
18086: GO 18586
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18088: LD_ADDR_VAR 0 12
18092: PUSH
18093: LD_VAR 0 2
18097: PPUSH
18098: LD_VAR 0 3
18102: PPUSH
18103: LD_VAR 0 4
18107: PPUSH
18108: LD_VAR 0 5
18112: PPUSH
18113: LD_VAR 0 1
18117: PPUSH
18118: CALL_OW 248
18122: PPUSH
18123: LD_INT 0
18125: PPUSH
18126: CALL 18591 0 6
18130: ST_TO_ADDR
// if not hexes then
18131: LD_VAR 0 12
18135: NOT
18136: IFFALSE 18140
// exit ;
18138: GO 18586
// hex := GetHexInfo ( x , y ) ;
18140: LD_ADDR_VAR 0 15
18144: PUSH
18145: LD_VAR 0 3
18149: PPUSH
18150: LD_VAR 0 4
18154: PPUSH
18155: CALL_OW 546
18159: ST_TO_ADDR
// if hex [ 1 ] then
18160: LD_VAR 0 15
18164: PUSH
18165: LD_INT 1
18167: ARRAY
18168: IFFALSE 18172
// exit ;
18170: GO 18586
// height := hex [ 2 ] ;
18172: LD_ADDR_VAR 0 13
18176: PUSH
18177: LD_VAR 0 15
18181: PUSH
18182: LD_INT 2
18184: ARRAY
18185: ST_TO_ADDR
// for i = 1 to hexes do
18186: LD_ADDR_VAR 0 8
18190: PUSH
18191: DOUBLE
18192: LD_INT 1
18194: DEC
18195: ST_TO_ADDR
18196: LD_VAR 0 12
18200: PUSH
18201: FOR_TO
18202: IFFALSE 18530
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18204: LD_VAR 0 12
18208: PUSH
18209: LD_VAR 0 8
18213: ARRAY
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PPUSH
18219: LD_VAR 0 12
18223: PUSH
18224: LD_VAR 0 8
18228: ARRAY
18229: PUSH
18230: LD_INT 2
18232: ARRAY
18233: PPUSH
18234: CALL_OW 488
18238: NOT
18239: IFFALSE 18243
// continue ;
18241: GO 18201
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18243: LD_ADDR_VAR 0 9
18247: PUSH
18248: LD_VAR 0 12
18252: PUSH
18253: LD_VAR 0 8
18257: ARRAY
18258: PUSH
18259: LD_INT 1
18261: ARRAY
18262: PPUSH
18263: LD_VAR 0 12
18267: PUSH
18268: LD_VAR 0 8
18272: ARRAY
18273: PUSH
18274: LD_INT 2
18276: ARRAY
18277: PPUSH
18278: CALL_OW 546
18282: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18283: LD_VAR 0 9
18287: PUSH
18288: LD_INT 1
18290: ARRAY
18291: PUSH
18292: LD_VAR 0 9
18296: PUSH
18297: LD_INT 2
18299: ARRAY
18300: PUSH
18301: LD_VAR 0 13
18305: PUSH
18306: LD_INT 2
18308: PLUS
18309: GREATER
18310: OR
18311: PUSH
18312: LD_VAR 0 9
18316: PUSH
18317: LD_INT 2
18319: ARRAY
18320: PUSH
18321: LD_VAR 0 13
18325: PUSH
18326: LD_INT 2
18328: MINUS
18329: LESS
18330: OR
18331: PUSH
18332: LD_VAR 0 9
18336: PUSH
18337: LD_INT 3
18339: ARRAY
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: LD_INT 8
18346: PUSH
18347: LD_INT 9
18349: PUSH
18350: LD_INT 10
18352: PUSH
18353: LD_INT 11
18355: PUSH
18356: LD_INT 12
18358: PUSH
18359: LD_INT 13
18361: PUSH
18362: LD_INT 16
18364: PUSH
18365: LD_INT 17
18367: PUSH
18368: LD_INT 18
18370: PUSH
18371: LD_INT 19
18373: PUSH
18374: LD_INT 20
18376: PUSH
18377: LD_INT 21
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: IN
18395: NOT
18396: OR
18397: PUSH
18398: LD_VAR 0 9
18402: PUSH
18403: LD_INT 5
18405: ARRAY
18406: NOT
18407: OR
18408: PUSH
18409: LD_VAR 0 9
18413: PUSH
18414: LD_INT 6
18416: ARRAY
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 7
18426: PUSH
18427: LD_INT 9
18429: PUSH
18430: LD_INT 10
18432: PUSH
18433: LD_INT 11
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: IN
18444: NOT
18445: OR
18446: PUSH
18447: LD_VAR 0 12
18451: PUSH
18452: LD_VAR 0 8
18456: ARRAY
18457: PUSH
18458: LD_INT 1
18460: ARRAY
18461: PPUSH
18462: LD_VAR 0 12
18466: PUSH
18467: LD_VAR 0 8
18471: ARRAY
18472: PUSH
18473: LD_INT 2
18475: ARRAY
18476: PPUSH
18477: CALL_OW 428
18481: PUSH
18482: LD_INT 0
18484: GREATER
18485: OR
18486: PUSH
18487: LD_VAR 0 12
18491: PUSH
18492: LD_VAR 0 8
18496: ARRAY
18497: PUSH
18498: LD_INT 1
18500: ARRAY
18501: PPUSH
18502: LD_VAR 0 12
18506: PUSH
18507: LD_VAR 0 8
18511: ARRAY
18512: PUSH
18513: LD_INT 2
18515: ARRAY
18516: PPUSH
18517: CALL_OW 351
18521: OR
18522: IFFALSE 18528
// exit ;
18524: POP
18525: POP
18526: GO 18586
// end ;
18528: GO 18201
18530: POP
18531: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18532: LD_VAR 0 2
18536: PUSH
18537: LD_INT 29
18539: PUSH
18540: LD_INT 30
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: IN
18547: PUSH
18548: LD_VAR 0 3
18552: PPUSH
18553: LD_VAR 0 4
18557: PPUSH
18558: LD_VAR 0 1
18562: PPUSH
18563: CALL_OW 255
18567: PPUSH
18568: CALL_OW 440
18572: NOT
18573: AND
18574: IFFALSE 18578
// exit ;
18576: GO 18586
// result := true ;
18578: LD_ADDR_VAR 0 7
18582: PUSH
18583: LD_INT 1
18585: ST_TO_ADDR
// end ;
18586: LD_VAR 0 7
18590: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18591: LD_INT 0
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
18610: PPUSH
18611: PPUSH
18612: PPUSH
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
18628: PPUSH
18629: PPUSH
18630: PPUSH
18631: PPUSH
18632: PPUSH
18633: PPUSH
18634: PPUSH
18635: PPUSH
18636: PPUSH
18637: PPUSH
18638: PPUSH
18639: PPUSH
18640: PPUSH
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
18647: PPUSH
18648: PPUSH
18649: PPUSH
18650: PPUSH
// result = [ ] ;
18651: LD_ADDR_VAR 0 7
18655: PUSH
18656: EMPTY
18657: ST_TO_ADDR
// temp_list = [ ] ;
18658: LD_ADDR_VAR 0 9
18662: PUSH
18663: EMPTY
18664: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18665: LD_VAR 0 4
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: LD_INT 3
18681: PUSH
18682: LD_INT 4
18684: PUSH
18685: LD_INT 5
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: IN
18696: NOT
18697: PUSH
18698: LD_VAR 0 1
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: IN
18713: PUSH
18714: LD_VAR 0 5
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: IN
18733: NOT
18734: AND
18735: OR
18736: IFFALSE 18740
// exit ;
18738: GO 37125
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18740: LD_VAR 0 1
18744: PUSH
18745: LD_INT 6
18747: PUSH
18748: LD_INT 7
18750: PUSH
18751: LD_INT 8
18753: PUSH
18754: LD_INT 13
18756: PUSH
18757: LD_INT 12
18759: PUSH
18760: LD_INT 15
18762: PUSH
18763: LD_INT 11
18765: PUSH
18766: LD_INT 14
18768: PUSH
18769: LD_INT 10
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: IN
18783: IFFALSE 18793
// btype = b_lab ;
18785: LD_ADDR_VAR 0 1
18789: PUSH
18790: LD_INT 6
18792: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18793: LD_VAR 0 6
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: LIST
18811: IN
18812: NOT
18813: PUSH
18814: LD_VAR 0 1
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 1
18824: PUSH
18825: LD_INT 2
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: LD_INT 6
18833: PUSH
18834: LD_INT 36
18836: PUSH
18837: LD_INT 4
18839: PUSH
18840: LD_INT 5
18842: PUSH
18843: LD_INT 31
18845: PUSH
18846: LD_INT 32
18848: PUSH
18849: LD_INT 33
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: IN
18865: NOT
18866: PUSH
18867: LD_VAR 0 6
18871: PUSH
18872: LD_INT 1
18874: EQUAL
18875: AND
18876: OR
18877: PUSH
18878: LD_VAR 0 1
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 3
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: IN
18893: NOT
18894: PUSH
18895: LD_VAR 0 6
18899: PUSH
18900: LD_INT 2
18902: EQUAL
18903: AND
18904: OR
18905: IFFALSE 18915
// mode = 0 ;
18907: LD_ADDR_VAR 0 6
18911: PUSH
18912: LD_INT 0
18914: ST_TO_ADDR
// case mode of 0 :
18915: LD_VAR 0 6
18919: PUSH
18920: LD_INT 0
18922: DOUBLE
18923: EQUAL
18924: IFTRUE 18928
18926: GO 30381
18928: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18929: LD_ADDR_VAR 0 11
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: LD_INT 0
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: NEG
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: NEG
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: LD_INT 2
19025: NEG
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 1
19064: NEG
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: NEG
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19122: LD_ADDR_VAR 0 12
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 1
19180: NEG
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: LD_INT 1
19195: NEG
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: LD_INT 1
19206: NEG
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: NEG
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: NEG
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 2
19268: NEG
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 3
19279: NEG
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 3
19290: NEG
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19318: LD_ADDR_VAR 0 13
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: LD_INT 0
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: LD_INT 1
19338: NEG
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 0
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: NEG
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 1
19399: NEG
19400: PUSH
19401: LD_INT 2
19403: NEG
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 2
19441: NEG
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: LD_INT 2
19457: NEG
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: LD_INT 3
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 3
19477: NEG
19478: PUSH
19479: LD_INT 2
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 3
19489: NEG
19490: PUSH
19491: LD_INT 3
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19517: LD_ADDR_VAR 0 14
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: LD_INT 2
19613: NEG
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 1
19663: NEG
19664: PUSH
19665: LD_INT 3
19667: NEG
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: LD_INT 3
19678: NEG
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: LD_INT 2
19689: NEG
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19713: LD_ADDR_VAR 0 15
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 2
19847: NEG
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 3
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 3
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19906: LD_ADDR_VAR 0 16
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 1
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: LD_INT 1
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: LD_INT 2
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_INT 2
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: NEG
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 3
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 3
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 3
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20099: LD_ADDR_VAR 0 17
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: LD_INT 0
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: LD_INT 2
20184: NEG
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 0
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: LD_INT 1
20206: NEG
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20329: LD_ADDR_VAR 0 18
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: LD_INT 1
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 0
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: LD_INT 0
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: LD_INT 1
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: LD_INT 2
20414: NEG
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 0
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: LD_INT 1
20436: NEG
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: NEG
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: LD_INT 2
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20559: LD_ADDR_VAR 0 19
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: NEG
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: LD_INT 2
20644: NEG
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: NEG
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 2
20746: NEG
20747: PUSH
20748: LD_INT 1
20750: NEG
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 2
20758: NEG
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20789: LD_ADDR_VAR 0 20
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 1
20847: NEG
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 1
20858: NEG
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: LD_INT 2
20874: NEG
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: LD_INT 2
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 1
20896: NEG
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 2
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 2
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: NEG
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 2
20976: NEG
20977: PUSH
20978: LD_INT 1
20980: NEG
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: NEG
20989: PUSH
20990: LD_INT 2
20992: NEG
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21019: LD_ADDR_VAR 0 21
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: NEG
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: NEG
21089: PUSH
21090: LD_INT 1
21092: NEG
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: LD_INT 2
21104: NEG
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 2
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 2
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 2
21154: PUSH
21155: LD_INT 2
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: LD_INT 0
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 2
21206: NEG
21207: PUSH
21208: LD_INT 1
21210: NEG
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: NEG
21219: PUSH
21220: LD_INT 2
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21249: LD_ADDR_VAR 0 22
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 1
21307: NEG
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 1
21318: NEG
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 0
21342: PUSH
21343: LD_INT 2
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: NEG
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 2
21436: NEG
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 2
21448: NEG
21449: PUSH
21450: LD_INT 2
21452: NEG
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21479: LD_ADDR_VAR 0 23
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: NEG
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: LD_INT 2
21564: NEG
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 2
21575: NEG
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 2
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: LD_INT 2
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 2
21655: NEG
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 2
21666: NEG
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 2
21678: NEG
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 2
21690: NEG
21691: PUSH
21692: LD_INT 3
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: LD_INT 3
21706: NEG
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: LD_INT 2
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21759: LD_ADDR_VAR 0 24
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 2
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 2
21946: NEG
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 2
21958: NEG
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: LD_INT 2
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 3
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22035: LD_ADDR_VAR 0 25
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: LD_INT 2
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: LD_INT 1
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 2
22222: NEG
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 2
22234: NEG
22235: PUSH
22236: LD_INT 2
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 3
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 2
22266: PUSH
22267: LD_INT 3
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: LD_INT 3
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22309: LD_ADDR_VAR 0 26
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 0
22326: PUSH
22327: LD_INT 1
22329: NEG
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: LD_INT 2
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 2
22405: NEG
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 2
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: LD_INT 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: LD_INT 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: LD_INT 1
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 2
22485: NEG
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 2
22496: NEG
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 2
22508: NEG
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: PUSH
22521: LD_INT 3
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 3
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22585: LD_ADDR_VAR 0 27
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 0
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: NEG
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: LD_INT 2
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: LD_INT 1
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 1
22750: NEG
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: NEG
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 2
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 2
22807: NEG
22808: PUSH
22809: LD_INT 1
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 3
22818: NEG
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 3
22830: NEG
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22865: LD_ADDR_VAR 0 28
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: NEG
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 2
23052: NEG
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 2
23076: NEG
23077: PUSH
23078: LD_INT 3
23080: NEG
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 1
23088: NEG
23089: PUSH
23090: LD_INT 3
23092: NEG
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 3
23100: NEG
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 3
23112: NEG
23113: PUSH
23114: LD_INT 2
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23147: LD_ADDR_VAR 0 29
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: NEG
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 2
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 2
23262: PUSH
23263: LD_INT 0
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: LD_INT 2
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: NEG
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: NEG
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: NEG
23338: PUSH
23339: LD_INT 3
23341: NEG
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 3
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 3
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 3
23391: NEG
23392: PUSH
23393: LD_INT 2
23395: NEG
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23426: LD_ADDR_VAR 0 30
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: LD_INT 2
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: NEG
23593: PUSH
23594: LD_INT 0
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 2
23603: NEG
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: LD_INT 3
23619: NEG
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 3
23638: PUSH
23639: LD_INT 2
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: NEG
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 3
23669: NEG
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23704: LD_ADDR_VAR 0 31
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 1
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 1
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 2
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: LD_INT 2
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 2
23893: NEG
23894: PUSH
23895: LD_INT 3
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 3
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 3
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 3
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23982: LD_ADDR_VAR 0 32
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 2
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 2
24148: NEG
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 3
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: LD_INT 2
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 2
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 3
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: NEG
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 3
24225: NEG
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24260: LD_ADDR_VAR 0 33
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: NEG
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: NEG
24451: PUSH
24452: LD_INT 3
24454: NEG
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 3
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: LD_INT 2
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 3
24504: NEG
24505: PUSH
24506: LD_INT 2
24508: NEG
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24539: LD_ADDR_VAR 0 34
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: NEG
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: LD_INT 2
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 2
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 2
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 2
24706: NEG
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 2
24718: NEG
24719: PUSH
24720: LD_INT 2
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: LD_INT 3
24734: NEG
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 2
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: LD_INT 3
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 3
24784: NEG
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24819: LD_ADDR_VAR 0 35
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 2
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24931: LD_ADDR_VAR 0 36
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: LD_INT 2
25016: NEG
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25043: LD_ADDR_VAR 0 37
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25155: LD_ADDR_VAR 0 38
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25267: LD_ADDR_VAR 0 39
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: LD_INT 2
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25379: LD_ADDR_VAR 0 40
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25491: LD_ADDR_VAR 0 41
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 2
25646: NEG
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: NEG
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 2
25669: NEG
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: LD_INT 3
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: LD_INT 3
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 3
25765: NEG
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 3
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 3
25788: NEG
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: NEG
25801: PUSH
25802: LD_INT 3
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25841: LD_ADDR_VAR 0 42
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: LD_INT 2
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 2
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 2
26007: NEG
26008: PUSH
26009: LD_INT 1
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: NEG
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: LD_INT 3
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: LD_INT 3
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: LD_INT 3
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 3
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: LD_INT 3
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: LD_INT 3
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 3
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 3
26138: NEG
26139: PUSH
26140: LD_INT 2
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 3
26150: NEG
26151: PUSH
26152: LD_INT 3
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26191: LD_ADDR_VAR 0 43
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: LD_INT 2
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: LD_INT 2
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 3
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: LD_INT 3
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 3
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: LD_INT 3
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 3
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 2
26476: NEG
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 3
26487: NEG
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 3
26498: NEG
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26539: LD_ADDR_VAR 0 44
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: LD_INT 2
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: LD_INT 2
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: LD_INT 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: NEG
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: NEG
26730: PUSH
26731: LD_INT 3
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 2
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 3
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 3
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 3
26782: PUSH
26783: LD_INT 3
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: LD_INT 3
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 3
26813: NEG
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 3
26824: NEG
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 3
26836: NEG
26837: PUSH
26838: LD_INT 2
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 3
26848: NEG
26849: PUSH
26850: LD_INT 3
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26889: LD_ADDR_VAR 0 45
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: NEG
27068: PUSH
27069: LD_INT 2
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 2
27079: NEG
27080: PUSH
27081: LD_INT 3
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 3
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: LD_INT 3
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 2
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 3
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: LD_INT 3
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 3
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: LD_INT 3
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 3
27186: NEG
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: NEG
27199: PUSH
27200: LD_INT 3
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27239: LD_ADDR_VAR 0 46
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 3
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 3
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 3
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 3
27535: NEG
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 3
27546: NEG
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27587: LD_ADDR_VAR 0 47
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 2
27702: NEG
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 2
27714: NEG
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27738: LD_ADDR_VAR 0 48
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27885: LD_ADDR_VAR 0 49
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28029: LD_ADDR_VAR 0 50
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: LD_INT 1
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: NEG
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: LD_INT 2
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28173: LD_ADDR_VAR 0 51
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28320: LD_ADDR_VAR 0 52
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 2
28424: NEG
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 2
28435: NEG
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 2
28447: NEG
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28471: LD_ADDR_VAR 0 53
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 1
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 2
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: LD_INT 2
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: NEG
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: NEG
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28701: LD_ADDR_VAR 0 54
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: LD_INT 2
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: NEG
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 2
28888: NEG
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28931: LD_ADDR_VAR 0 55
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 2
29107: NEG
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 2
29118: NEG
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29161: LD_ADDR_VAR 0 56
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: LD_INT 0
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 1
29242: NEG
29243: PUSH
29244: LD_INT 2
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: LD_INT 2
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 2
29337: NEG
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 2
29348: NEG
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 2
29360: NEG
29361: PUSH
29362: LD_INT 2
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29391: LD_ADDR_VAR 0 57
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: LD_INT 2
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: LD_INT 2
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: NEG
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29621: LD_ADDR_VAR 0 58
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 2
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 1
29786: NEG
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: NEG
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 2
29808: NEG
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: NEG
29821: PUSH
29822: LD_INT 2
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29851: LD_ADDR_VAR 0 59
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29939: LD_ADDR_VAR 0 60
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30027: LD_ADDR_VAR 0 61
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30115: LD_ADDR_VAR 0 62
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30203: LD_ADDR_VAR 0 63
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30291: LD_ADDR_VAR 0 64
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: ST_TO_ADDR
// end ; 1 :
30379: GO 36276
30381: LD_INT 1
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30389
30387: GO 33012
30389: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30390: LD_ADDR_VAR 0 11
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 3
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30434: LD_ADDR_VAR 0 12
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30475: LD_ADDR_VAR 0 13
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: LD_INT 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30515: LD_ADDR_VAR 0 14
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 3
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30556: LD_ADDR_VAR 0 15
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 3
30574: NEG
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 3
30585: NEG
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30600: LD_ADDR_VAR 0 16
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: NEG
30620: PUSH
30621: LD_INT 2
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 3
30631: NEG
30632: PUSH
30633: LD_INT 3
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30646: LD_ADDR_VAR 0 17
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 3
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: LD_INT 3
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30690: LD_ADDR_VAR 0 18
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 3
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30731: LD_ADDR_VAR 0 19
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30771: LD_ADDR_VAR 0 20
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 3
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30812: LD_ADDR_VAR 0 21
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: LIST
30855: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30856: LD_ADDR_VAR 0 22
30860: PUSH
30861: LD_INT 2
30863: NEG
30864: PUSH
30865: LD_INT 3
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 3
30875: NEG
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 3
30887: NEG
30888: PUSH
30889: LD_INT 3
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30902: LD_ADDR_VAR 0 23
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 3
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 4
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 3
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30946: LD_ADDR_VAR 0 24
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 4
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30987: LD_ADDR_VAR 0 25
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 4
31004: PUSH
31005: LD_INT 3
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: LD_INT 4
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31027: LD_ADDR_VAR 0 26
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: LD_INT 4
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31068: LD_ADDR_VAR 0 27
31072: PUSH
31073: LD_INT 3
31075: NEG
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 4
31097: NEG
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: LIST
31111: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31112: LD_ADDR_VAR 0 28
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: LD_INT 4
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 4
31143: NEG
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31158: LD_ADDR_VAR 0 29
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: LD_INT 3
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: LD_INT 4
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 4
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: LD_INT 3
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 5
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: LD_INT 5
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 4
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 6
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: LD_INT 6
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 5
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31313: LD_ADDR_VAR 0 30
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 1
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 4
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 4
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 4
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 5
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 5
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 6
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 6
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31456: LD_ADDR_VAR 0 31
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 3
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: LD_INT 3
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 4
31503: PUSH
31504: LD_INT 4
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 3
31513: PUSH
31514: LD_INT 4
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 5
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 5
31533: PUSH
31534: LD_INT 5
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 4
31543: PUSH
31544: LD_INT 5
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 6
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 6
31563: PUSH
31564: LD_INT 6
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 5
31573: PUSH
31574: LD_INT 6
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31595: LD_ADDR_VAR 0 32
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 3
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: NEG
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 4
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 4
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 3
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: LD_INT 5
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: LD_INT 5
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: LD_INT 4
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 6
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: LD_INT 6
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 5
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31738: LD_ADDR_VAR 0 33
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: NEG
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 4
31790: NEG
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 4
31801: NEG
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 4
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 5
31824: NEG
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 5
31835: NEG
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 5
31847: NEG
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 6
31858: NEG
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 6
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31893: LD_ADDR_VAR 0 34
31897: PUSH
31898: LD_INT 2
31900: NEG
31901: PUSH
31902: LD_INT 3
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 3
31912: NEG
31913: PUSH
31914: LD_INT 2
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 3
31936: NEG
31937: PUSH
31938: LD_INT 4
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 4
31948: NEG
31949: PUSH
31950: LD_INT 3
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 4
31960: NEG
31961: PUSH
31962: LD_INT 4
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 4
31972: NEG
31973: PUSH
31974: LD_INT 5
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 5
31984: NEG
31985: PUSH
31986: LD_INT 4
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 5
31996: NEG
31997: PUSH
31998: LD_INT 5
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 5
32008: NEG
32009: PUSH
32010: LD_INT 6
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 6
32020: NEG
32021: PUSH
32022: LD_INT 5
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 6
32032: NEG
32033: PUSH
32034: LD_INT 6
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32056: LD_ADDR_VAR 0 41
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: LD_INT 3
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32100: LD_ADDR_VAR 0 42
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32141: LD_ADDR_VAR 0 43
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32181: LD_ADDR_VAR 0 44
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32222: LD_ADDR_VAR 0 45
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: NEG
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32266: LD_ADDR_VAR 0 46
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: LD_INT 3
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: LD_INT 2
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32312: LD_ADDR_VAR 0 47
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: LD_INT 3
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: LD_INT 3
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32345: LD_ADDR_VAR 0 48
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32376: LD_ADDR_VAR 0 49
32380: PUSH
32381: LD_INT 3
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32405: LD_ADDR_VAR 0 50
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32434: LD_ADDR_VAR 0 51
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32465: LD_ADDR_VAR 0 52
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 3
32484: NEG
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32498: LD_ADDR_VAR 0 53
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: LD_INT 3
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 3
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32542: LD_ADDR_VAR 0 54
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 3
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 3
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32583: LD_ADDR_VAR 0 55
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 3
32600: PUSH
32601: LD_INT 3
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32623: LD_ADDR_VAR 0 56
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32664: LD_ADDR_VAR 0 57
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 3
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32708: LD_ADDR_VAR 0 58
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 3
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: NEG
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: NEG
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32754: LD_ADDR_VAR 0 59
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32798: LD_ADDR_VAR 0 60
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32839: LD_ADDR_VAR 0 61
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32879: LD_ADDR_VAR 0 62
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32920: LD_ADDR_VAR 0 63
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 2
32938: NEG
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 2
32949: NEG
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32964: LD_ADDR_VAR 0 64
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: NEG
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: LD_INT 2
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: ST_TO_ADDR
// end ; 2 :
33010: GO 36276
33012: LD_INT 2
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 36275
33020: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33021: LD_ADDR_VAR 0 29
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 5
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 4
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 3
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 5
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 3
33121: PUSH
33122: LD_INT 3
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 4
33141: PUSH
33142: LD_INT 3
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 4
33151: PUSH
33152: LD_INT 4
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: LD_INT 4
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 4
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 4
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 3
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 4
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 5
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: NEG
33262: PUSH
33263: LD_INT 4
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PUSH
33274: LD_INT 3
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: LD_INT 5
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: LD_INT 3
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 3
33304: NEG
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 3
33315: NEG
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: NEG
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 3
33349: NEG
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 4
33360: NEG
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 4
33371: NEG
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 4
33383: NEG
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 4
33406: NEG
33407: PUSH
33408: LD_INT 4
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 4
33418: NEG
33419: PUSH
33420: LD_INT 5
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 3
33430: NEG
33431: PUSH
33432: LD_INT 4
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 3
33442: NEG
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 4
33454: NEG
33455: PUSH
33456: LD_INT 3
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 5
33466: NEG
33467: PUSH
33468: LD_INT 4
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 5
33478: NEG
33479: PUSH
33480: LD_INT 5
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 3
33490: NEG
33491: PUSH
33492: LD_INT 5
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 5
33502: NEG
33503: PUSH
33504: LD_INT 3
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33559: LD_ADDR_VAR 0 30
33563: PUSH
33564: LD_INT 4
33566: PUSH
33567: LD_INT 4
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 4
33576: PUSH
33577: LD_INT 3
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: LD_INT 4
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 5
33596: PUSH
33597: LD_INT 5
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 4
33606: PUSH
33607: LD_INT 5
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: LD_INT 4
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 3
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: LD_INT 3
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 1
33686: PUSH
33687: LD_INT 4
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: LD_INT 4
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: LD_INT 3
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: LD_INT 4
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 2
33738: NEG
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 4
33749: NEG
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 3
33772: NEG
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 3
33783: NEG
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 4
33794: NEG
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 5
33805: NEG
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 5
33816: NEG
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 5
33828: NEG
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 3
33863: NEG
33864: PUSH
33865: LD_INT 4
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 3
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 4
33911: NEG
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 4
33923: NEG
33924: PUSH
33925: LD_INT 4
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: NEG
33936: PUSH
33937: LD_INT 4
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 4
33947: NEG
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: LD_INT 4
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: LD_INT 5
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: LD_INT 4
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: LD_INT 3
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 3
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: NEG
34015: PUSH
34016: LD_INT 4
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: LD_INT 5
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 2
34049: NEG
34050: PUSH
34051: LD_INT 5
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34106: LD_ADDR_VAR 0 31
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 4
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 5
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 5
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 4
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: LD_INT 5
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: LD_INT 3
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: NEG
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 2
34229: NEG
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 3
34251: NEG
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 4
34262: NEG
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 4
34273: NEG
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 4
34285: NEG
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 4
34308: NEG
34309: PUSH
34310: LD_INT 4
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 4
34320: NEG
34321: PUSH
34322: LD_INT 5
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: NEG
34333: PUSH
34334: LD_INT 4
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 3
34344: NEG
34345: PUSH
34346: LD_INT 3
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 4
34356: NEG
34357: PUSH
34358: LD_INT 3
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 5
34368: NEG
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 5
34380: NEG
34381: PUSH
34382: LD_INT 5
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 3
34392: NEG
34393: PUSH
34394: LD_INT 5
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 5
34404: NEG
34405: PUSH
34406: LD_INT 3
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 3
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: LD_INT 4
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: LD_INT 3
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 2
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: LD_INT 3
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: LD_INT 4
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: LD_INT 2
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: LD_INT 4
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 4
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 4
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 4
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: LD_INT 2
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 5
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34656: LD_ADDR_VAR 0 32
34660: PUSH
34661: LD_INT 4
34663: NEG
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 4
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: NEG
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: NEG
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 4
34708: NEG
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 5
34719: NEG
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 5
34730: NEG
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 5
34742: NEG
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 3
34754: NEG
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: NEG
34778: PUSH
34779: LD_INT 4
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: LD_INT 3
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: NEG
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 3
34813: NEG
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 4
34825: NEG
34826: PUSH
34827: LD_INT 3
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 4
34837: NEG
34838: PUSH
34839: LD_INT 4
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: LD_INT 4
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 4
34861: NEG
34862: PUSH
34863: LD_INT 2
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 4
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 5
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 4
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 3
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: LD_INT 4
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 5
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 3
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: LD_INT 5
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 3
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 4
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 4
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 3
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 4
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 4
35068: PUSH
35069: LD_INT 4
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: LD_INT 3
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 5
35088: PUSH
35089: LD_INT 4
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 5
35098: PUSH
35099: LD_INT 5
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 4
35108: PUSH
35109: LD_INT 5
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 3
35118: PUSH
35119: LD_INT 4
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 3
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 5
35138: PUSH
35139: LD_INT 3
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: LD_INT 5
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35203: LD_ADDR_VAR 0 33
35207: PUSH
35208: LD_INT 4
35210: NEG
35211: PUSH
35212: LD_INT 4
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 4
35222: NEG
35223: PUSH
35224: LD_INT 5
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 3
35234: NEG
35235: PUSH
35236: LD_INT 4
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: NEG
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 4
35258: NEG
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 5
35270: NEG
35271: PUSH
35272: LD_INT 4
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 5
35282: NEG
35283: PUSH
35284: LD_INT 5
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 3
35294: NEG
35295: PUSH
35296: LD_INT 5
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 5
35306: NEG
35307: PUSH
35308: LD_INT 3
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 3
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 4
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: LD_INT 3
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 2
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: LD_INT 3
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: LD_INT 4
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 2
35400: NEG
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 2
35408: NEG
35409: PUSH
35410: LD_INT 4
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 4
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 4
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 5
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 5
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 4
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 3
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 3
35481: PUSH
35482: LD_INT 1
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 3
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 5
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 4
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 4
35543: PUSH
35544: LD_INT 4
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: LD_INT 4
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 4
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: LD_INT 4
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 4
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 4
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 5
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 5
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 4
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 5
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 2
35685: NEG
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35741: LD_ADDR_VAR 0 34
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 4
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: LD_INT 5
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: LD_INT 4
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: LD_INT 3
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 3
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 4
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: LD_INT 5
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: PUSH
35828: LD_INT 3
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: LD_INT 5
35842: NEG
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 4
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 4
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 3
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 4
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 4
35943: PUSH
35944: LD_INT 4
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 4
35953: PUSH
35954: LD_INT 3
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 5
35963: PUSH
35964: LD_INT 4
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 5
35973: PUSH
35974: LD_INT 5
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 4
35983: PUSH
35984: LD_INT 5
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 3
35993: PUSH
35994: LD_INT 4
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 3
36003: PUSH
36004: LD_INT 3
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 5
36013: PUSH
36014: LD_INT 3
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 3
36023: PUSH
36024: LD_INT 5
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 4
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 4
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 4
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 4
36126: NEG
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 4
36137: NEG
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 3
36149: NEG
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 3
36160: NEG
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 4
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 5
36182: NEG
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 5
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 5
36205: NEG
36206: PUSH
36207: LD_INT 2
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 3
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
// end ; end ;
36273: GO 36276
36275: POP
// case btype of b_depot , b_warehouse :
36276: LD_VAR 0 1
36280: PUSH
36281: LD_INT 0
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36295
36287: LD_INT 1
36289: DOUBLE
36290: EQUAL
36291: IFTRUE 36295
36293: GO 36496
36295: POP
// case nation of nation_american :
36296: LD_VAR 0 5
36300: PUSH
36301: LD_INT 1
36303: DOUBLE
36304: EQUAL
36305: IFTRUE 36309
36307: GO 36365
36309: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36310: LD_ADDR_VAR 0 9
36314: PUSH
36315: LD_VAR 0 11
36319: PUSH
36320: LD_VAR 0 12
36324: PUSH
36325: LD_VAR 0 13
36329: PUSH
36330: LD_VAR 0 14
36334: PUSH
36335: LD_VAR 0 15
36339: PUSH
36340: LD_VAR 0 16
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: PUSH
36353: LD_VAR 0 4
36357: PUSH
36358: LD_INT 1
36360: PLUS
36361: ARRAY
36362: ST_TO_ADDR
36363: GO 36494
36365: LD_INT 2
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36373
36371: GO 36429
36373: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: LD_VAR 0 17
36383: PUSH
36384: LD_VAR 0 18
36388: PUSH
36389: LD_VAR 0 19
36393: PUSH
36394: LD_VAR 0 20
36398: PUSH
36399: LD_VAR 0 21
36403: PUSH
36404: LD_VAR 0 22
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: LD_VAR 0 4
36421: PUSH
36422: LD_INT 1
36424: PLUS
36425: ARRAY
36426: ST_TO_ADDR
36427: GO 36494
36429: LD_INT 3
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36437
36435: GO 36493
36437: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36438: LD_ADDR_VAR 0 9
36442: PUSH
36443: LD_VAR 0 23
36447: PUSH
36448: LD_VAR 0 24
36452: PUSH
36453: LD_VAR 0 25
36457: PUSH
36458: LD_VAR 0 26
36462: PUSH
36463: LD_VAR 0 27
36467: PUSH
36468: LD_VAR 0 28
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: PUSH
36481: LD_VAR 0 4
36485: PUSH
36486: LD_INT 1
36488: PLUS
36489: ARRAY
36490: ST_TO_ADDR
36491: GO 36494
36493: POP
36494: GO 37043
36496: LD_INT 2
36498: DOUBLE
36499: EQUAL
36500: IFTRUE 36510
36502: LD_INT 3
36504: DOUBLE
36505: EQUAL
36506: IFTRUE 36510
36508: GO 36566
36510: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36511: LD_ADDR_VAR 0 9
36515: PUSH
36516: LD_VAR 0 29
36520: PUSH
36521: LD_VAR 0 30
36525: PUSH
36526: LD_VAR 0 31
36530: PUSH
36531: LD_VAR 0 32
36535: PUSH
36536: LD_VAR 0 33
36540: PUSH
36541: LD_VAR 0 34
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: PUSH
36554: LD_VAR 0 4
36558: PUSH
36559: LD_INT 1
36561: PLUS
36562: ARRAY
36563: ST_TO_ADDR
36564: GO 37043
36566: LD_INT 16
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36622
36572: LD_INT 17
36574: DOUBLE
36575: EQUAL
36576: IFTRUE 36622
36578: LD_INT 18
36580: DOUBLE
36581: EQUAL
36582: IFTRUE 36622
36584: LD_INT 19
36586: DOUBLE
36587: EQUAL
36588: IFTRUE 36622
36590: LD_INT 20
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36622
36596: LD_INT 21
36598: DOUBLE
36599: EQUAL
36600: IFTRUE 36622
36602: LD_INT 23
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36622
36608: LD_INT 24
36610: DOUBLE
36611: EQUAL
36612: IFTRUE 36622
36614: LD_INT 25
36616: DOUBLE
36617: EQUAL
36618: IFTRUE 36622
36620: GO 36678
36622: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36623: LD_ADDR_VAR 0 9
36627: PUSH
36628: LD_VAR 0 35
36632: PUSH
36633: LD_VAR 0 36
36637: PUSH
36638: LD_VAR 0 37
36642: PUSH
36643: LD_VAR 0 38
36647: PUSH
36648: LD_VAR 0 39
36652: PUSH
36653: LD_VAR 0 40
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: PUSH
36666: LD_VAR 0 4
36670: PUSH
36671: LD_INT 1
36673: PLUS
36674: ARRAY
36675: ST_TO_ADDR
36676: GO 37043
36678: LD_INT 6
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36734
36684: LD_INT 7
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36734
36690: LD_INT 8
36692: DOUBLE
36693: EQUAL
36694: IFTRUE 36734
36696: LD_INT 13
36698: DOUBLE
36699: EQUAL
36700: IFTRUE 36734
36702: LD_INT 12
36704: DOUBLE
36705: EQUAL
36706: IFTRUE 36734
36708: LD_INT 15
36710: DOUBLE
36711: EQUAL
36712: IFTRUE 36734
36714: LD_INT 11
36716: DOUBLE
36717: EQUAL
36718: IFTRUE 36734
36720: LD_INT 14
36722: DOUBLE
36723: EQUAL
36724: IFTRUE 36734
36726: LD_INT 10
36728: DOUBLE
36729: EQUAL
36730: IFTRUE 36734
36732: GO 36790
36734: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36735: LD_ADDR_VAR 0 9
36739: PUSH
36740: LD_VAR 0 41
36744: PUSH
36745: LD_VAR 0 42
36749: PUSH
36750: LD_VAR 0 43
36754: PUSH
36755: LD_VAR 0 44
36759: PUSH
36760: LD_VAR 0 45
36764: PUSH
36765: LD_VAR 0 46
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 4
36782: PUSH
36783: LD_INT 1
36785: PLUS
36786: ARRAY
36787: ST_TO_ADDR
36788: GO 37043
36790: LD_INT 36
36792: DOUBLE
36793: EQUAL
36794: IFTRUE 36798
36796: GO 36854
36798: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36799: LD_ADDR_VAR 0 9
36803: PUSH
36804: LD_VAR 0 47
36808: PUSH
36809: LD_VAR 0 48
36813: PUSH
36814: LD_VAR 0 49
36818: PUSH
36819: LD_VAR 0 50
36823: PUSH
36824: LD_VAR 0 51
36828: PUSH
36829: LD_VAR 0 52
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: PUSH
36842: LD_VAR 0 4
36846: PUSH
36847: LD_INT 1
36849: PLUS
36850: ARRAY
36851: ST_TO_ADDR
36852: GO 37043
36854: LD_INT 4
36856: DOUBLE
36857: EQUAL
36858: IFTRUE 36880
36860: LD_INT 5
36862: DOUBLE
36863: EQUAL
36864: IFTRUE 36880
36866: LD_INT 34
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36880
36872: LD_INT 37
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36880
36878: GO 36936
36880: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36881: LD_ADDR_VAR 0 9
36885: PUSH
36886: LD_VAR 0 53
36890: PUSH
36891: LD_VAR 0 54
36895: PUSH
36896: LD_VAR 0 55
36900: PUSH
36901: LD_VAR 0 56
36905: PUSH
36906: LD_VAR 0 57
36910: PUSH
36911: LD_VAR 0 58
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: PUSH
36924: LD_VAR 0 4
36928: PUSH
36929: LD_INT 1
36931: PLUS
36932: ARRAY
36933: ST_TO_ADDR
36934: GO 37043
36936: LD_INT 31
36938: DOUBLE
36939: EQUAL
36940: IFTRUE 36986
36942: LD_INT 32
36944: DOUBLE
36945: EQUAL
36946: IFTRUE 36986
36948: LD_INT 33
36950: DOUBLE
36951: EQUAL
36952: IFTRUE 36986
36954: LD_INT 27
36956: DOUBLE
36957: EQUAL
36958: IFTRUE 36986
36960: LD_INT 26
36962: DOUBLE
36963: EQUAL
36964: IFTRUE 36986
36966: LD_INT 28
36968: DOUBLE
36969: EQUAL
36970: IFTRUE 36986
36972: LD_INT 29
36974: DOUBLE
36975: EQUAL
36976: IFTRUE 36986
36978: LD_INT 30
36980: DOUBLE
36981: EQUAL
36982: IFTRUE 36986
36984: GO 37042
36986: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36987: LD_ADDR_VAR 0 9
36991: PUSH
36992: LD_VAR 0 59
36996: PUSH
36997: LD_VAR 0 60
37001: PUSH
37002: LD_VAR 0 61
37006: PUSH
37007: LD_VAR 0 62
37011: PUSH
37012: LD_VAR 0 63
37016: PUSH
37017: LD_VAR 0 64
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: PUSH
37030: LD_VAR 0 4
37034: PUSH
37035: LD_INT 1
37037: PLUS
37038: ARRAY
37039: ST_TO_ADDR
37040: GO 37043
37042: POP
// temp_list2 = [ ] ;
37043: LD_ADDR_VAR 0 10
37047: PUSH
37048: EMPTY
37049: ST_TO_ADDR
// for i in temp_list do
37050: LD_ADDR_VAR 0 8
37054: PUSH
37055: LD_VAR 0 9
37059: PUSH
37060: FOR_IN
37061: IFFALSE 37113
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37063: LD_ADDR_VAR 0 10
37067: PUSH
37068: LD_VAR 0 10
37072: PUSH
37073: LD_VAR 0 8
37077: PUSH
37078: LD_INT 1
37080: ARRAY
37081: PUSH
37082: LD_VAR 0 2
37086: PLUS
37087: PUSH
37088: LD_VAR 0 8
37092: PUSH
37093: LD_INT 2
37095: ARRAY
37096: PUSH
37097: LD_VAR 0 3
37101: PLUS
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: ADD
37110: ST_TO_ADDR
37111: GO 37060
37113: POP
37114: POP
// result = temp_list2 ;
37115: LD_ADDR_VAR 0 7
37119: PUSH
37120: LD_VAR 0 10
37124: ST_TO_ADDR
// end ;
37125: LD_VAR 0 7
37129: RET
// export function GetDriverVehicle ( unit ) ; begin
37130: LD_INT 0
37132: PPUSH
// if not unit then
37133: LD_VAR 0 1
37137: NOT
37138: IFFALSE 37142
// exit ;
37140: GO 37180
// result := IsInUnit ( unit ) ;
37142: LD_ADDR_VAR 0 2
37146: PUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 310
37156: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
37157: LD_VAR 0 2
37161: PPUSH
37162: CALL_OW 247
37166: PUSH
37167: LD_INT 2
37169: NONEQUAL
37170: IFFALSE 37180
// result := 0 ;
37172: LD_ADDR_VAR 0 2
37176: PUSH
37177: LD_INT 0
37179: ST_TO_ADDR
// end ; end_of_file
37180: LD_VAR 0 2
37184: RET
// every 1 do var i ;
37185: GO 37187
37187: DISABLE
37188: LD_INT 0
37190: PPUSH
// begin Video ( true ) ;
37191: LD_INT 1
37193: PPUSH
37194: CALL 7168 0 1
// CenterOnXY ( 53 , 40 ) ;
37198: LD_INT 53
37200: PPUSH
37201: LD_INT 40
37203: PPUSH
37204: CALL_OW 84
// wait ( 0 0$5 ) ;
37208: LD_INT 175
37210: PPUSH
37211: CALL_OW 67
// if gammaCommander = 1 then
37215: LD_EXP 12
37219: PUSH
37220: LD_INT 1
37222: EQUAL
37223: IFFALSE 37237
// Say ( Donaldson , D1-Don-1 ) ;
37225: LD_EXP 3
37229: PPUSH
37230: LD_STRING D1-Don-1
37232: PPUSH
37233: CALL_OW 88
// if gammaCommander = 2 then
37237: LD_EXP 12
37241: PUSH
37242: LD_INT 2
37244: EQUAL
37245: IFFALSE 37259
// Say ( Brown , D1-Brown-1 ) ;
37247: LD_EXP 2
37251: PPUSH
37252: LD_STRING D1-Brown-1
37254: PPUSH
37255: CALL_OW 88
// if gammaCommander = 3 then
37259: LD_EXP 12
37263: PUSH
37264: LD_INT 3
37266: EQUAL
37267: IFFALSE 37281
// Say ( Houten , D1-VanH-1 ) ;
37269: LD_EXP 13
37273: PPUSH
37274: LD_STRING D1-VanH-1
37276: PPUSH
37277: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37281: LD_EXP 22
37285: PPUSH
37286: LD_STRING D1-Har-1
37288: PPUSH
37289: CALL_OW 94
// if gammaCommander = 1 then
37293: LD_EXP 12
37297: PUSH
37298: LD_INT 1
37300: EQUAL
37301: IFFALSE 37315
// Say ( Donaldson , D1-Don-2 ) ;
37303: LD_EXP 3
37307: PPUSH
37308: LD_STRING D1-Don-2
37310: PPUSH
37311: CALL_OW 88
// if gammaCommander = 2 then
37315: LD_EXP 12
37319: PUSH
37320: LD_INT 2
37322: EQUAL
37323: IFFALSE 37337
// Say ( Brown , D1-Brown-2 ) ;
37325: LD_EXP 2
37329: PPUSH
37330: LD_STRING D1-Brown-2
37332: PPUSH
37333: CALL_OW 88
// if gammaCommander = 3 then
37337: LD_EXP 12
37341: PUSH
37342: LD_INT 3
37344: EQUAL
37345: IFFALSE 37359
// Say ( Houten , D1-VanH-2 ) ;
37347: LD_EXP 13
37351: PPUSH
37352: LD_STRING D1-VanH-2
37354: PPUSH
37355: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37359: LD_EXP 22
37363: PPUSH
37364: LD_STRING D1-Har-2
37366: PPUSH
37367: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37371: LD_INT 22
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 33
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 61
37393: PUSH
37394: EMPTY
37395: LIST
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: PPUSH
37402: CALL_OW 69
37406: IFFALSE 37471
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37408: LD_ADDR_VAR 0 1
37412: PUSH
37413: LD_INT 22
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 33
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 61
37435: PUSH
37436: EMPTY
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: PPUSH
37444: CALL_OW 69
37448: PUSH
37449: FOR_IN
37450: IFFALSE 37469
// ComAgressiveMove ( i , 70 , 41 ) ;
37452: LD_VAR 0 1
37456: PPUSH
37457: LD_INT 70
37459: PPUSH
37460: LD_INT 41
37462: PPUSH
37463: CALL_OW 114
37467: GO 37449
37469: POP
37470: POP
// repeat wait ( 0 0$1 ) ;
37471: LD_INT 35
37473: PPUSH
37474: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37478: LD_ADDR_VAR 0 1
37482: PUSH
37483: LD_INT 22
37485: PUSH
37486: LD_INT 6
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: PPUSH
37496: CALL_OW 69
37500: PUSH
37501: FOR_IN
37502: IFFALSE 37521
// ComAgressiveMove ( i , 54 , 20 ) ;
37504: LD_VAR 0 1
37508: PPUSH
37509: LD_INT 54
37511: PPUSH
37512: LD_INT 20
37514: PPUSH
37515: CALL_OW 114
37519: GO 37501
37521: POP
37522: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37523: LD_ADDR_VAR 0 1
37527: PUSH
37528: LD_INT 22
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 25
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: LD_INT 54
37553: PUSH
37554: EMPTY
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: PPUSH
37566: CALL_OW 69
37570: PUSH
37571: FOR_IN
37572: IFFALSE 37606
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37574: LD_VAR 0 1
37578: PPUSH
37579: LD_INT 70
37581: PPUSH
37582: LD_INT 41
37584: PPUSH
37585: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37589: LD_VAR 0 1
37593: PPUSH
37594: LD_INT 46
37596: PPUSH
37597: LD_INT 39
37599: PPUSH
37600: CALL_OW 174
// end ;
37604: GO 37571
37606: POP
37607: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37608: LD_ADDR_VAR 0 1
37612: PUSH
37613: LD_INT 22
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 21
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: LD_INT 24
37638: PUSH
37639: LD_INT 500
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: PPUSH
37655: CALL_OW 69
37659: PUSH
37660: FOR_IN
37661: IFFALSE 37694
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37663: LD_VAR 0 1
37667: PPUSH
37668: LD_EXP 37
37672: PPUSH
37673: CALL_OW 250
37677: PPUSH
37678: LD_EXP 37
37682: PPUSH
37683: CALL_OW 251
37687: PPUSH
37688: CALL_OW 111
37692: GO 37660
37694: POP
37695: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37696: LD_INT 22
37698: PUSH
37699: LD_INT 6
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 21
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 24
37718: PUSH
37719: LD_INT 250
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: PPUSH
37731: CALL_OW 69
37735: PUSH
37736: LD_INT 5
37738: LESS
37739: IFFALSE 37471
// Video ( false ) ;
37741: LD_INT 0
37743: PPUSH
37744: CALL 7168 0 1
// ChangeMissionObjectives ( M1 ) ;
37748: LD_STRING M1
37750: PPUSH
37751: CALL_OW 337
// wait ( 0 0$2 ) ;
37755: LD_INT 70
37757: PPUSH
37758: CALL_OW 67
// SaveForQuickRestart ;
37762: CALL_OW 22
// startCutscene = 0 ;
37766: LD_ADDR_EXP 38
37770: PUSH
37771: LD_INT 0
37773: ST_TO_ADDR
// end ;
37774: PPOPN 1
37776: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37777: LD_EXP 38
37781: IFFALSE 37872
37783: GO 37785
37785: DISABLE
37786: LD_INT 0
37788: PPUSH
37789: PPUSH
// begin enable ;
37790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37791: LD_ADDR_VAR 0 1
37795: PUSH
37796: LD_INT 22
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 21
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 24
37821: PUSH
37822: LD_INT 700
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: PPUSH
37838: CALL_OW 69
37842: ST_TO_ADDR
// for i in tmp do
37843: LD_ADDR_VAR 0 2
37847: PUSH
37848: LD_VAR 0 1
37852: PUSH
37853: FOR_IN
37854: IFFALSE 37870
// SetLives ( i , 700 ) ;
37856: LD_VAR 0 2
37860: PPUSH
37861: LD_INT 700
37863: PPUSH
37864: CALL_OW 234
37868: GO 37853
37870: POP
37871: POP
// end ;
37872: PPOPN 2
37874: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 do
37875: LD_INT 22
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 101
37887: PUSH
37888: LD_INT 6
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PPUSH
37899: CALL_OW 69
37903: PUSH
37904: LD_INT 0
37906: EQUAL
37907: IFFALSE 38156
37909: GO 37911
37911: DISABLE
// begin PrepareSupportFromDelta ;
37912: CALL 3852 0 0
// firstAttack = 1 ;
37916: LD_ADDR_EXP 33
37920: PUSH
37921: LD_INT 1
37923: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37924: LD_EXP 8
37928: PPUSH
37929: CALL_OW 302
37933: IFFALSE 37949
// Say ( Gladstone , D2-Glad-1 ) else
37935: LD_EXP 8
37939: PPUSH
37940: LD_STRING D2-Glad-1
37942: PPUSH
37943: CALL_OW 88
37947: GO 38057
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37949: LD_INT 4
37951: PPUSH
37952: LD_INT 22
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 21
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 25
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 25
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 25
37997: PUSH
37998: LD_INT 3
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 25
38007: PUSH
38008: LD_INT 4
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: PPUSH
38027: CALL_OW 70
38031: PUSH
38032: LD_EXP 15
38036: PUSH
38037: LD_EXP 14
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: DIFF
38046: PPUSH
38047: LD_STRING D2-Sol1-1
38049: PPUSH
38050: LD_STRING D2-FSol1-1
38052: PPUSH
38053: CALL 7196 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38057: LD_EXP 3
38061: PPUSH
38062: CALL_OW 302
38066: PUSH
38067: LD_EXP 12
38071: PUSH
38072: LD_INT 1
38074: EQUAL
38075: AND
38076: IFFALSE 38090
// Say ( Donaldson , D2-Don-1 ) ;
38078: LD_EXP 3
38082: PPUSH
38083: LD_STRING D2-Don-1
38085: PPUSH
38086: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
38090: LD_EXP 2
38094: PPUSH
38095: CALL_OW 302
38099: PUSH
38100: LD_EXP 12
38104: PUSH
38105: LD_INT 2
38107: EQUAL
38108: AND
38109: IFFALSE 38123
// Say ( Brown , D2-Brown-1 ) ;
38111: LD_EXP 2
38115: PPUSH
38116: LD_STRING D2-Brown-1
38118: PPUSH
38119: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
38123: LD_EXP 13
38127: PPUSH
38128: CALL_OW 302
38132: PUSH
38133: LD_EXP 12
38137: PUSH
38138: LD_INT 3
38140: EQUAL
38141: AND
38142: IFFALSE 38156
// Say ( Houten , D2-VanH-1 ) ;
38144: LD_EXP 13
38148: PPUSH
38149: LD_STRING D2-VanH-1
38151: PPUSH
38152: CALL_OW 88
// end ;
38156: END
// every 0 0$1 do var none ;
38157: GO 38159
38159: DISABLE
38160: LD_INT 0
38162: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38163: LD_STRING 07_time
38165: PPUSH
38166: LD_INT 12600
38168: PPUSH
38169: CALL_OW 30
38173: PUSH
38174: LD_INT 3
38176: DIV
38177: PPUSH
38178: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
38182: LD_INT 34
38184: PPUSH
38185: LD_INT 1
38187: PPUSH
38188: CALL_OW 321
38192: PUSH
38193: LD_INT 2
38195: EQUAL
38196: IFFALSE 38205
// SetAchievement ( ACH_HEAVYGUN ) ;
38198: LD_STRING ACH_HEAVYGUN
38200: PPUSH
38201: CALL_OW 543
// PrepareMacmillanSquad ;
38205: CALL 4514 0 0
// CenterNowOnUnits ( JMM ) ;
38209: LD_EXP 1
38213: PPUSH
38214: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38218: LD_EXP 1
38222: PPUSH
38223: LD_STRING D3-JMM-1
38225: PPUSH
38226: CALL_OW 88
// JMMArrive = 1 ;
38230: LD_ADDR_EXP 39
38234: PUSH
38235: LD_INT 1
38237: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38238: LD_EXP 3
38242: PPUSH
38243: CALL_OW 302
38247: PUSH
38248: LD_EXP 12
38252: PUSH
38253: LD_INT 1
38255: EQUAL
38256: AND
38257: IFFALSE 38273
// begin Say ( Donaldson , D3-Don-1 ) ;
38259: LD_EXP 3
38263: PPUSH
38264: LD_STRING D3-Don-1
38266: PPUSH
38267: CALL_OW 88
// end else
38271: GO 38325
// begin if gammaCommander = 1 then
38273: LD_EXP 12
38277: PUSH
38278: LD_INT 1
38280: EQUAL
38281: IFFALSE 38325
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38283: LD_EXP 11
38287: PPUSH
38288: LD_INT 26
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PPUSH
38298: CALL_OW 72
38302: PPUSH
38303: LD_STRING D3-Sol1-1
38305: PPUSH
38306: LD_STRING D3-Sol1-1
38308: PPUSH
38309: CALL 7196 0 3
// Say ( JMM , D3-JMM-2 ) ;
38313: LD_EXP 1
38317: PPUSH
38318: LD_STRING D3-JMM-2
38320: PPUSH
38321: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38325: LD_EXP 2
38329: PPUSH
38330: CALL_OW 302
38334: PUSH
38335: LD_EXP 12
38339: PUSH
38340: LD_INT 2
38342: EQUAL
38343: AND
38344: IFFALSE 38360
// begin Say ( Brown , D3-Brown-1 ) ;
38346: LD_EXP 2
38350: PPUSH
38351: LD_STRING D3-Brown-1
38353: PPUSH
38354: CALL_OW 88
// end else
38358: GO 38412
// begin if gammaCommander = 2 then
38360: LD_EXP 12
38364: PUSH
38365: LD_INT 2
38367: EQUAL
38368: IFFALSE 38412
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38370: LD_EXP 11
38374: PPUSH
38375: LD_INT 26
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PPUSH
38385: CALL_OW 72
38389: PPUSH
38390: LD_STRING D3-Sol1-1a
38392: PPUSH
38393: LD_STRING D3-Sol1-1a
38395: PPUSH
38396: CALL 7196 0 3
// Say ( JMM , D3-JMM-2 ) ;
38400: LD_EXP 1
38404: PPUSH
38405: LD_STRING D3-JMM-2
38407: PPUSH
38408: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38412: LD_EXP 13
38416: PPUSH
38417: CALL_OW 302
38421: PUSH
38422: LD_EXP 12
38426: PUSH
38427: LD_INT 3
38429: EQUAL
38430: AND
38431: IFFALSE 38447
// begin Say ( Houten , D3-VanH-1 ) ;
38433: LD_EXP 13
38437: PPUSH
38438: LD_STRING D3-VanH-1
38440: PPUSH
38441: CALL_OW 88
// end else
38445: GO 38499
// begin if gammaCommander = 3 then
38447: LD_EXP 12
38451: PUSH
38452: LD_INT 3
38454: EQUAL
38455: IFFALSE 38499
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38457: LD_EXP 11
38461: PPUSH
38462: LD_INT 26
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PPUSH
38472: CALL_OW 72
38476: PPUSH
38477: LD_STRING D3-Sol1-1b
38479: PPUSH
38480: LD_STRING D3-Sol1-1b
38482: PPUSH
38483: CALL 7196 0 3
// Say ( JMM , D3-JMM-2 ) ;
38487: LD_EXP 1
38491: PPUSH
38492: LD_STRING D3-JMM-2
38494: PPUSH
38495: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38499: LD_EXP 15
38503: PPUSH
38504: CALL_OW 302
38508: IFFALSE 38536
// begin Say ( Joan , D3a-Joan-1 ) ;
38510: LD_EXP 15
38514: PPUSH
38515: LD_STRING D3a-Joan-1
38517: PPUSH
38518: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38522: LD_EXP 1
38526: PPUSH
38527: LD_STRING D3a-JMM-1
38529: PPUSH
38530: CALL_OW 88
// end else
38534: GO 38878
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38536: LD_STRING 06_JoanStatus_1
38538: PPUSH
38539: LD_INT 0
38541: PPUSH
38542: CALL_OW 30
38546: PUSH
38547: LD_INT 1
38549: EQUAL
38550: IFFALSE 38878
// begin Say ( JMM , D3b-JMM-1 ) ;
38552: LD_EXP 1
38556: PPUSH
38557: LD_STRING D3b-JMM-1
38559: PPUSH
38560: CALL_OW 88
// if gammaCommander = 1 then
38564: LD_EXP 12
38568: PUSH
38569: LD_INT 1
38571: EQUAL
38572: IFFALSE 38629
// if IsOK ( Donaldson ) then
38574: LD_EXP 3
38578: PPUSH
38579: CALL_OW 302
38583: IFFALSE 38599
// Say ( Donaldson , D3b-Don-1 ) else
38585: LD_EXP 3
38589: PPUSH
38590: LD_STRING D3b-Don-1
38592: PPUSH
38593: CALL_OW 88
38597: GO 38629
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38599: LD_EXP 11
38603: PPUSH
38604: LD_INT 26
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PPUSH
38614: CALL_OW 72
38618: PPUSH
38619: LD_STRING D3b-Sol1-1
38621: PPUSH
38622: LD_STRING D3b-Sol1-1
38624: PPUSH
38625: CALL 7196 0 3
// if gammaCommander = 2 then
38629: LD_EXP 12
38633: PUSH
38634: LD_INT 2
38636: EQUAL
38637: IFFALSE 38694
// if IsOk ( Brown ) then
38639: LD_EXP 2
38643: PPUSH
38644: CALL_OW 302
38648: IFFALSE 38664
// Say ( Brown , D3b-Brown-1 ) else
38650: LD_EXP 2
38654: PPUSH
38655: LD_STRING D3b-Brown-1
38657: PPUSH
38658: CALL_OW 88
38662: GO 38694
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38664: LD_EXP 11
38668: PPUSH
38669: LD_INT 26
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PPUSH
38679: CALL_OW 72
38683: PPUSH
38684: LD_STRING D3b-Sol1-1
38686: PPUSH
38687: LD_STRING D3b-Sol1-1
38689: PPUSH
38690: CALL 7196 0 3
// if gammaCommander = 3 then
38694: LD_EXP 12
38698: PUSH
38699: LD_INT 3
38701: EQUAL
38702: IFFALSE 38759
// if IsOk ( Houten ) then
38704: LD_EXP 13
38708: PPUSH
38709: CALL_OW 302
38713: IFFALSE 38729
// Say ( Houten , D3b-VanH-1 ) else
38715: LD_EXP 13
38719: PPUSH
38720: LD_STRING D3b-VanH-1
38722: PPUSH
38723: CALL_OW 88
38727: GO 38759
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38729: LD_EXP 11
38733: PPUSH
38734: LD_INT 26
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PPUSH
38744: CALL_OW 72
38748: PPUSH
38749: LD_STRING D3b-Sol1-1
38751: PPUSH
38752: LD_STRING D3b-Sol1-1
38754: PPUSH
38755: CALL 7196 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38759: LD_EXP 11
38763: PPUSH
38764: LD_INT 26
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PPUSH
38774: CALL_OW 72
38778: PUSH
38779: LD_EXP 12
38783: PUSH
38784: LD_INT 1
38786: EQUAL
38787: PUSH
38788: LD_EXP 3
38792: PPUSH
38793: CALL_OW 302
38797: AND
38798: OR
38799: PUSH
38800: LD_EXP 12
38804: PUSH
38805: LD_INT 2
38807: EQUAL
38808: PUSH
38809: LD_EXP 2
38813: PPUSH
38814: CALL_OW 302
38818: AND
38819: OR
38820: PUSH
38821: LD_EXP 12
38825: PUSH
38826: LD_INT 3
38828: EQUAL
38829: PUSH
38830: LD_EXP 13
38834: PPUSH
38835: CALL_OW 302
38839: AND
38840: OR
38841: IFFALSE 38855
// Say ( JMM , D3b-JMM-2 ) ;
38843: LD_EXP 1
38847: PPUSH
38848: LD_STRING D3b-JMM-2
38850: PPUSH
38851: CALL_OW 88
// if IsOK ( Lisa ) then
38855: LD_EXP 6
38859: PPUSH
38860: CALL_OW 302
38864: IFFALSE 38878
// Say ( Lisa , D3b-Lisa-2 ) ;
38866: LD_EXP 6
38870: PPUSH
38871: LD_STRING D3b-Lisa-2
38873: PPUSH
38874: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
38878: LD_ADDR_VAR 0 1
38882: PUSH
38883: LD_EXP 1
38887: PUSH
38888: LD_EXP 2
38892: PUSH
38893: LD_EXP 3
38897: PUSH
38898: LD_EXP 4
38902: PUSH
38903: LD_EXP 5
38907: PUSH
38908: LD_EXP 6
38912: PUSH
38913: LD_EXP 7
38917: PUSH
38918: LD_EXP 8
38922: PUSH
38923: LD_EXP 9
38927: PUSH
38928: LD_EXP 10
38932: PUSH
38933: LD_EXP 15
38937: PUSH
38938: LD_EXP 14
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: PUSH
38957: LD_EXP 42
38961: ADD
38962: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38963: LD_INT 22
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 21
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 26
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 25
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 25
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 25
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 25
39028: PUSH
39029: LD_INT 4
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: PPUSH
39049: CALL_OW 69
39053: PUSH
39054: LD_VAR 0 1
39058: DIFF
39059: PPUSH
39060: LD_STRING DCa-Sol1-1
39062: PPUSH
39063: LD_STRING DCa-Sol1-1
39065: PPUSH
39066: CALL 7196 0 3
// Say ( JMM , DCb-JMM-1 ) ;
39070: LD_EXP 1
39074: PPUSH
39075: LD_STRING DCb-JMM-1
39077: PPUSH
39078: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
39082: LD_INT 22
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 21
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 26
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: LD_INT 25
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 25
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 25
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 25
39147: PUSH
39148: LD_INT 4
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: PPUSH
39168: CALL_OW 69
39172: PUSH
39173: LD_VAR 0 1
39177: DIFF
39178: PPUSH
39179: LD_STRING DCb-Sol1-1
39181: PPUSH
39182: LD_STRING DCb-Sol1-1
39184: PPUSH
39185: CALL 7196 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39189: LD_EXP 1
39193: PPUSH
39194: LD_STRING DCb-JMM-2
39196: PPUSH
39197: CALL_OW 88
// secondAttack = 1 ;
39201: LD_ADDR_EXP 34
39205: PUSH
39206: LD_INT 1
39208: ST_TO_ADDR
// end ;
39209: PPOPN 1
39211: END
// every 0 0$01 trigger JMMArrive = 1 do
39212: LD_EXP 39
39216: PUSH
39217: LD_INT 1
39219: EQUAL
39220: IFFALSE 39300
39222: GO 39224
39224: DISABLE
// begin wait ( 3 3$0 ) ;
39225: LD_INT 6300
39227: PPUSH
39228: CALL_OW 67
// DialogueOn ;
39232: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39236: LD_EXP 23
39240: PPUSH
39241: LD_STRING D4-Pow-1
39243: PPUSH
39244: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39248: LD_EXP 1
39252: PPUSH
39253: LD_STRING D4-JMM-1
39255: PPUSH
39256: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39260: LD_EXP 23
39264: PPUSH
39265: LD_STRING D4-Pow-2
39267: PPUSH
39268: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39272: LD_EXP 1
39276: PPUSH
39277: LD_STRING D4-JMM-2
39279: PPUSH
39280: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39284: LD_EXP 23
39288: PPUSH
39289: LD_STRING D4-Pow-3
39291: PPUSH
39292: CALL_OW 94
// DialogueOff ;
39296: CALL_OW 7
// end ;
39300: END
// every 0 0$01 trigger JMMArrive = 1 do
39301: LD_EXP 39
39305: PUSH
39306: LD_INT 1
39308: EQUAL
39309: IFFALSE 39341
39311: GO 39313
39313: DISABLE
// begin wait ( 8 8$0 ) ;
39314: LD_INT 16800
39316: PPUSH
39317: CALL_OW 67
// DialogueOn ;
39321: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39325: LD_EXP 23
39329: PPUSH
39330: LD_STRING D4a-Pow-1
39332: PPUSH
39333: CALL_OW 94
// DialogueOff ;
39337: CALL_OW 7
// end ;
39341: END
// every 0 0$01 trigger JMMArrive = 1 do
39342: LD_EXP 39
39346: PUSH
39347: LD_INT 1
39349: EQUAL
39350: IFFALSE 39395
39352: GO 39354
39354: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39355: LD_INT 21000
39357: PUSH
39358: LD_INT 25200
39360: PUSH
39361: LD_INT 31500
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: PUSH
39369: LD_OWVAR 67
39373: ARRAY
39374: PPUSH
39375: CALL_OW 67
// PrepareSikorsky ;
39379: CALL 5639 0 0
// SikorskyArrive = 1 ;
39383: LD_ADDR_EXP 18
39387: PUSH
39388: LD_INT 1
39390: ST_TO_ADDR
// PrepareSikorskyArmy ;
39391: CALL 5812 0 0
// end ;
39395: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39396: LD_EXP 17
39400: PPUSH
39401: LD_INT 5
39403: PPUSH
39404: CALL_OW 308
39408: IFFALSE 39600
39410: GO 39412
39412: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39413: LD_EXP 17
39417: PPUSH
39418: CALL_OW 87
// DialogueOn ;
39422: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39426: LD_EXP 16
39430: PPUSH
39431: LD_STRING D5-Sik-1
39433: PPUSH
39434: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39438: LD_EXP 1
39442: PPUSH
39443: LD_STRING D5-JMM-1a
39445: PPUSH
39446: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39450: LD_EXP 16
39454: PPUSH
39455: LD_STRING D5-Sik-2
39457: PPUSH
39458: CALL_OW 88
// case query ( QSikorski ) of 1 :
39462: LD_STRING QSikorski
39464: PPUSH
39465: CALL_OW 97
39469: PUSH
39470: LD_INT 1
39472: DOUBLE
39473: EQUAL
39474: IFTRUE 39478
39476: GO 39501
39478: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39479: LD_EXP 16
39483: PPUSH
39484: LD_STRING D5a-Sik-1
39486: PPUSH
39487: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39491: LD_ADDR_EXP 19
39495: PUSH
39496: LD_INT 2100
39498: ST_TO_ADDR
// end ; 2 :
39499: GO 39588
39501: LD_INT 2
39503: DOUBLE
39504: EQUAL
39505: IFTRUE 39509
39507: GO 39532
39509: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39510: LD_EXP 16
39514: PPUSH
39515: LD_STRING D5b-Sik-1
39517: PPUSH
39518: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39522: LD_ADDR_EXP 19
39526: PUSH
39527: LD_INT 10500
39529: ST_TO_ADDR
// end ; 3 :
39530: GO 39588
39532: LD_INT 3
39534: DOUBLE
39535: EQUAL
39536: IFTRUE 39540
39538: GO 39587
39540: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39541: LD_EXP 16
39545: PPUSH
39546: LD_STRING D5c-Sik-1
39548: PPUSH
39549: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39553: LD_EXP 1
39557: PPUSH
39558: LD_STRING D5c-JMM-1
39560: PPUSH
39561: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39565: LD_EXP 16
39569: PPUSH
39570: LD_STRING D5c-Sik-2
39572: PPUSH
39573: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39577: LD_ADDR_EXP 19
39581: PUSH
39582: LD_INT 10500
39584: ST_TO_ADDR
// end ; end ;
39585: GO 39588
39587: POP
// DialogueOff ;
39588: CALL_OW 7
// timerStatus = 1 ;
39592: LD_ADDR_EXP 35
39596: PUSH
39597: LD_INT 1
39599: ST_TO_ADDR
// end ;
39600: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39601: LD_EXP 19
39605: PUSH
39606: LD_INT 35
39608: LESS
39609: IFFALSE 39657
39611: GO 39613
39613: DISABLE
// begin timerStatus = 0 ;
39614: LD_ADDR_EXP 35
39618: PUSH
39619: LD_INT 0
39621: ST_TO_ADDR
// DialogueOn ;
39622: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39626: LD_EXP 16
39630: PPUSH
39631: LD_STRING D6-Sik-1
39633: PPUSH
39634: CALL_OW 88
// DialogueOff ;
39638: CALL_OW 7
// SikorskyAI = 1 ;
39642: LD_ADDR_EXP 20
39646: PUSH
39647: LD_INT 1
39649: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39650: LD_STRING M2
39652: PPUSH
39653: CALL_OW 337
// end ;
39657: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39658: LD_EXP 17
39662: PPUSH
39663: LD_INT 18
39665: PPUSH
39666: CALL_OW 308
39670: IFFALSE 39780
39672: GO 39674
39674: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39675: LD_EXP 16
39679: PPUSH
39680: LD_STRING D7-Sik-1
39682: PPUSH
39683: CALL_OW 88
// wait ( 0 0$10 ) ;
39687: LD_INT 350
39689: PPUSH
39690: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
39694: LD_EXP 1
39698: PPUSH
39699: LD_INT 24
39701: PPUSH
39702: CALL_OW 308
39706: PUSH
39707: LD_EXP 1
39711: PPUSH
39712: CALL 37130 0 1
39716: PUSH
39717: LD_EXP 1
39721: PPUSH
39722: CALL 37130 0 1
39726: PPUSH
39727: LD_INT 24
39729: PPUSH
39730: CALL_OW 308
39734: AND
39735: OR
39736: IFFALSE 39760
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39738: LD_EXP 16
39742: PPUSH
39743: LD_STRING D7a-Sik-1
39745: PPUSH
39746: CALL_OW 88
// SikorskyStatus = 1 ;
39750: LD_ADDR_EXP 21
39754: PUSH
39755: LD_INT 1
39757: ST_TO_ADDR
// end else
39758: GO 39780
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39760: LD_EXP 16
39764: PPUSH
39765: LD_STRING D7b-Sik-1
39767: PPUSH
39768: CALL_OW 88
// SikorskyStatus = 2 ;
39772: LD_ADDR_EXP 21
39776: PUSH
39777: LD_INT 2
39779: ST_TO_ADDR
// end ; end ; end_of_file
39780: END
// on BuildingComplete ( building ) do var tmp , un ;
39781: LD_INT 0
39783: PPUSH
39784: PPUSH
// begin if GetSide ( building ) = 3 then
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 255
39794: PUSH
39795: LD_INT 3
39797: EQUAL
39798: IFFALSE 40335
// begin if GetBType ( building ) = b_depot then
39800: LD_VAR 0 1
39804: PPUSH
39805: CALL_OW 266
39809: PUSH
39810: LD_INT 0
39812: EQUAL
39813: IFFALSE 39881
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39815: LD_VAR 0 1
39819: PPUSH
39820: CALL_OW 274
39824: PPUSH
39825: LD_INT 1
39827: PPUSH
39828: LD_INT 5000
39830: PPUSH
39831: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 274
39844: PPUSH
39845: LD_INT 2
39847: PPUSH
39848: LD_INT 5000
39850: PPUSH
39851: CALL_OW 277
// SetBName ( building , konev ) ;
39855: LD_VAR 0 1
39859: PPUSH
39860: LD_STRING konev
39862: PPUSH
39863: CALL_OW 500
// ruDepot = building ;
39867: LD_ADDR_EXP 28
39871: PUSH
39872: LD_VAR 0 1
39876: ST_TO_ADDR
// BuildRussianBase ;
39877: CALL 7807 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39881: LD_VAR 0 1
39885: PPUSH
39886: CALL_OW 266
39890: PUSH
39891: LD_INT 0
39893: EQUAL
39894: PUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 266
39904: PUSH
39905: LD_INT 2
39907: EQUAL
39908: OR
39909: PUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 266
39919: PUSH
39920: LD_INT 4
39922: EQUAL
39923: OR
39924: IFFALSE 39935
// ComUpgrade ( building ) ;
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 146
// if GetBType ( building ) = b_lab then
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 266
39944: PUSH
39945: LD_INT 6
39947: EQUAL
39948: IFFALSE 39999
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_INT 10
39957: PPUSH
39958: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39962: LD_VAR 0 1
39966: PPUSH
39967: LD_INT 12
39969: PPUSH
39970: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39974: LD_INT 3
39976: PPUSH
39977: LD_VAR 0 1
39981: PPUSH
39982: LD_INT 3
39984: PPUSH
39985: CALL 8351 0 3
// ruLab = building ;
39989: LD_ADDR_EXP 29
39993: PUSH
39994: LD_VAR 0 1
39998: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 266
40008: PUSH
40009: LD_INT 32
40011: EQUAL
40012: IFFALSE 40130
// begin uc_side = 3 ;
40014: LD_ADDR_OWVAR 20
40018: PUSH
40019: LD_INT 3
40021: ST_TO_ADDR
// uc_nation = 3 ;
40022: LD_ADDR_OWVAR 21
40026: PUSH
40027: LD_INT 3
40029: ST_TO_ADDR
// hc_gallery =  ;
40030: LD_ADDR_OWVAR 33
40034: PUSH
40035: LD_STRING 
40037: ST_TO_ADDR
// hc_name =  ;
40038: LD_ADDR_OWVAR 26
40042: PUSH
40043: LD_STRING 
40045: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40046: LD_INT 0
40048: PPUSH
40049: LD_INT 1
40051: PPUSH
40052: LD_EXP 25
40056: PPUSH
40057: LD_EXP 26
40061: PPUSH
40062: CALL_OW 12
40066: PPUSH
40067: CALL_OW 380
// un = CreateHuman ;
40071: LD_ADDR_VAR 0 3
40075: PUSH
40076: CALL_OW 44
40080: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40081: LD_VAR 0 3
40085: PPUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_INT 43
40102: PUSH
40103: LD_INT 44
40105: PUSH
40106: LD_INT 46
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PPUSH
40117: LD_INT 3
40119: PPUSH
40120: CALL_OW 12
40124: ARRAY
40125: PPUSH
40126: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40130: LD_VAR 0 1
40134: PPUSH
40135: CALL_OW 266
40139: PUSH
40140: LD_INT 33
40142: EQUAL
40143: IFFALSE 40180
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40145: LD_VAR 0 1
40149: PPUSH
40150: LD_INT 43
40152: PUSH
40153: LD_INT 44
40155: PUSH
40156: LD_INT 46
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: PPUSH
40167: LD_INT 3
40169: PPUSH
40170: CALL_OW 12
40174: ARRAY
40175: PPUSH
40176: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40180: LD_VAR 0 1
40184: PPUSH
40185: CALL_OW 266
40189: PUSH
40190: LD_INT 32
40192: EQUAL
40193: IFFALSE 40230
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40195: LD_VAR 0 1
40199: PPUSH
40200: LD_INT 43
40202: PUSH
40203: LD_INT 44
40205: PUSH
40206: LD_INT 46
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: PPUSH
40217: LD_INT 3
40219: PPUSH
40220: CALL_OW 12
40224: ARRAY
40225: PPUSH
40226: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 266
40239: PUSH
40240: LD_INT 24
40242: EQUAL
40243: IFFALSE 40253
// russianAI = 1 ;
40245: LD_ADDR_EXP 27
40249: PUSH
40250: LD_INT 1
40252: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40253: LD_EXP 31
40257: PUSH
40258: LD_INT 0
40260: GREATER
40261: IFFALSE 40335
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40263: LD_ADDR_EXP 31
40267: PUSH
40268: LD_EXP 31
40272: PPUSH
40273: LD_INT 1
40275: PPUSH
40276: CALL_OW 3
40280: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40281: LD_ADDR_EXP 31
40285: PUSH
40286: LD_EXP 31
40290: PPUSH
40291: LD_INT 1
40293: PPUSH
40294: CALL_OW 3
40298: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40299: LD_ADDR_EXP 31
40303: PUSH
40304: LD_EXP 31
40308: PPUSH
40309: LD_INT 1
40311: PPUSH
40312: CALL_OW 3
40316: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40317: LD_ADDR_EXP 31
40321: PUSH
40322: LD_EXP 31
40326: PPUSH
40327: LD_INT 1
40329: PPUSH
40330: CALL_OW 3
40334: ST_TO_ADDR
// end ; end ; end ;
40335: PPOPN 3
40337: END
// on UpgradeComplete ( building ) do var i ;
40338: LD_INT 0
40340: PPUSH
// begin if GetSide ( building ) = 3 then
40341: LD_VAR 0 1
40345: PPUSH
40346: CALL_OW 255
40350: PUSH
40351: LD_INT 3
40353: EQUAL
40354: IFFALSE 40535
// begin if GetBType ( building ) = b_factory then
40356: LD_VAR 0 1
40360: PPUSH
40361: CALL_OW 266
40365: PUSH
40366: LD_INT 3
40368: EQUAL
40369: IFFALSE 40436
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40371: LD_ADDR_VAR 0 2
40375: PUSH
40376: LD_INT 22
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 25
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PPUSH
40400: CALL_OW 69
40404: PUSH
40405: FOR_IN
40406: IFFALSE 40424
// ComEnterUnit ( i , building ) ;
40408: LD_VAR 0 2
40412: PPUSH
40413: LD_VAR 0 1
40417: PPUSH
40418: CALL_OW 120
40422: GO 40405
40424: POP
40425: POP
// ruFab = building ;
40426: LD_ADDR_EXP 30
40430: PUSH
40431: LD_VAR 0 1
40435: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40436: LD_VAR 0 1
40440: PPUSH
40441: CALL_OW 266
40445: PUSH
40446: LD_INT 8
40448: EQUAL
40449: IFFALSE 40506
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40451: LD_ADDR_VAR 0 2
40455: PUSH
40456: LD_INT 22
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 25
40468: PUSH
40469: LD_INT 4
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PPUSH
40480: CALL_OW 69
40484: PUSH
40485: FOR_IN
40486: IFFALSE 40504
// ComEnterUnit ( i , building ) ;
40488: LD_VAR 0 2
40492: PPUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 120
40502: GO 40485
40504: POP
40505: POP
// if GetBType ( building ) = b_warehouse then
40506: LD_VAR 0 1
40510: PPUSH
40511: CALL_OW 266
40515: PUSH
40516: LD_INT 1
40518: EQUAL
40519: IFFALSE 40535
// begin ComEnterUnit ( Borodin , building ) ;
40521: LD_EXP 24
40525: PPUSH
40526: LD_VAR 0 1
40530: PPUSH
40531: CALL_OW 120
// end ; end ; end ;
40535: PPOPN 2
40537: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 247
40547: PUSH
40548: LD_INT 2
40550: EQUAL
40551: PUSH
40552: LD_VAR 0 1
40556: PPUSH
40557: CALL_OW 263
40561: PUSH
40562: LD_INT 3
40564: EQUAL
40565: AND
40566: PUSH
40567: LD_EXP 41
40571: PUSH
40572: LD_INT 0
40574: EQUAL
40575: AND
40576: IFFALSE 40694
// begin varEvent1 = 1 ;
40578: LD_ADDR_EXP 41
40582: PUSH
40583: LD_INT 1
40585: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40586: LD_VAR 0 1
40590: PPUSH
40591: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40595: LD_INT 22
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 21
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: LD_INT 25
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 25
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 25
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 25
40650: PUSH
40651: LD_INT 4
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: PPUSH
40670: CALL_OW 69
40674: PUSH
40675: LD_EXP 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: DIFF
40683: PPUSH
40684: LD_STRING DC-Sol1-1
40686: PPUSH
40687: LD_STRING DC-FSol1-1
40689: PPUSH
40690: CALL 7196 0 3
// end ; end ;
40694: PPOPN 1
40696: END
// on UnitDestroyed ( unit ) do var i ;
40697: LD_INT 0
40699: PPUSH
// begin if unit = Joan then
40700: LD_VAR 0 1
40704: PUSH
40705: LD_EXP 15
40709: EQUAL
40710: IFFALSE 40719
// DeleteCharacters ( Joan ) ;
40712: LD_STRING Joan
40714: PPUSH
40715: CALL_OW 40
// if GetSide ( unit ) = 3 then
40719: LD_VAR 0 1
40723: PPUSH
40724: CALL_OW 255
40728: PUSH
40729: LD_INT 3
40731: EQUAL
40732: IFFALSE 41502
// begin if GetType ( unit ) = unit_building then
40734: LD_VAR 0 1
40738: PPUSH
40739: CALL_OW 247
40743: PUSH
40744: LD_INT 3
40746: EQUAL
40747: IFFALSE 41439
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 266
40758: PUSH
40759: LD_INT 31
40761: EQUAL
40762: PUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 266
40772: PUSH
40773: LD_INT 32
40775: EQUAL
40776: OR
40777: PUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: CALL_OW 266
40787: PUSH
40788: LD_INT 36
40790: EQUAL
40791: OR
40792: PUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 266
40802: PUSH
40803: LD_INT 0
40805: EQUAL
40806: OR
40807: PUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: CALL_OW 266
40817: PUSH
40818: LD_INT 24
40820: EQUAL
40821: OR
40822: PUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: CALL_OW 266
40832: PUSH
40833: LD_INT 17
40835: EQUAL
40836: OR
40837: PUSH
40838: LD_VAR 0 1
40842: PPUSH
40843: CALL_OW 266
40847: PUSH
40848: LD_INT 25
40850: EQUAL
40851: OR
40852: PUSH
40853: LD_VAR 0 1
40857: PPUSH
40858: CALL_OW 266
40862: PUSH
40863: LD_INT 19
40865: EQUAL
40866: OR
40867: PUSH
40868: LD_VAR 0 1
40872: PPUSH
40873: CALL_OW 266
40877: PUSH
40878: LD_INT 20
40880: EQUAL
40881: OR
40882: PUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: CALL_OW 266
40892: PUSH
40893: LD_INT 18
40895: EQUAL
40896: OR
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: CALL_OW 266
40907: PUSH
40908: LD_INT 21
40910: EQUAL
40911: OR
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 266
40922: PUSH
40923: LD_INT 23
40925: EQUAL
40926: OR
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 266
40937: PUSH
40938: LD_INT 16
40940: EQUAL
40941: OR
40942: PUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 266
40952: PUSH
40953: LD_INT 6
40955: EQUAL
40956: OR
40957: PUSH
40958: LD_VAR 0 1
40962: PPUSH
40963: CALL_OW 266
40967: PUSH
40968: LD_INT 29
40970: EQUAL
40971: OR
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 266
40982: PUSH
40983: LD_INT 26
40985: EQUAL
40986: OR
40987: PUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 266
40997: PUSH
40998: LD_INT 30
41000: EQUAL
41001: OR
41002: PUSH
41003: LD_VAR 0 1
41007: PPUSH
41008: CALL_OW 266
41012: PUSH
41013: LD_INT 28
41015: EQUAL
41016: OR
41017: PUSH
41018: LD_VAR 0 1
41022: PPUSH
41023: CALL_OW 266
41027: PUSH
41028: LD_INT 27
41030: EQUAL
41031: OR
41032: PUSH
41033: LD_VAR 0 1
41037: PPUSH
41038: CALL_OW 266
41042: PUSH
41043: LD_INT 33
41045: EQUAL
41046: OR
41047: PUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 266
41057: PUSH
41058: LD_INT 2
41060: EQUAL
41061: OR
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 266
41072: PUSH
41073: LD_INT 4
41075: EQUAL
41076: OR
41077: IFFALSE 41163
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
41079: LD_ADDR_EXP 31
41083: PUSH
41084: LD_EXP 31
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: CALL_OW 266
41098: ADD
41099: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41100: LD_ADDR_EXP 31
41104: PUSH
41105: LD_EXP 31
41109: PUSH
41110: LD_VAR 0 1
41114: PPUSH
41115: CALL_OW 250
41119: ADD
41120: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41121: LD_ADDR_EXP 31
41125: PUSH
41126: LD_EXP 31
41130: PUSH
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 251
41140: ADD
41141: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41142: LD_ADDR_EXP 31
41146: PUSH
41147: LD_EXP 31
41151: PUSH
41152: LD_VAR 0 1
41156: PPUSH
41157: CALL_OW 254
41161: ADD
41162: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 266
41172: PUSH
41173: LD_INT 1
41175: EQUAL
41176: IFFALSE 41255
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41178: LD_ADDR_EXP 31
41182: PUSH
41183: LD_EXP 31
41187: PUSH
41188: LD_INT 0
41190: ADD
41191: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41192: LD_ADDR_EXP 31
41196: PUSH
41197: LD_EXP 31
41201: PUSH
41202: LD_VAR 0 1
41206: PPUSH
41207: CALL_OW 250
41211: ADD
41212: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41213: LD_ADDR_EXP 31
41217: PUSH
41218: LD_EXP 31
41222: PUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 251
41232: ADD
41233: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41234: LD_ADDR_EXP 31
41238: PUSH
41239: LD_EXP 31
41243: PUSH
41244: LD_VAR 0 1
41248: PPUSH
41249: CALL_OW 254
41253: ADD
41254: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41255: LD_VAR 0 1
41259: PPUSH
41260: CALL_OW 266
41264: PUSH
41265: LD_INT 3
41267: EQUAL
41268: IFFALSE 41347
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41270: LD_ADDR_EXP 31
41274: PUSH
41275: LD_EXP 31
41279: PUSH
41280: LD_INT 2
41282: ADD
41283: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41284: LD_ADDR_EXP 31
41288: PUSH
41289: LD_EXP 31
41293: PUSH
41294: LD_VAR 0 1
41298: PPUSH
41299: CALL_OW 250
41303: ADD
41304: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41305: LD_ADDR_EXP 31
41309: PUSH
41310: LD_EXP 31
41314: PUSH
41315: LD_VAR 0 1
41319: PPUSH
41320: CALL_OW 251
41324: ADD
41325: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41326: LD_ADDR_EXP 31
41330: PUSH
41331: LD_EXP 31
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 254
41345: ADD
41346: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 266
41356: PUSH
41357: LD_INT 5
41359: EQUAL
41360: IFFALSE 41439
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41362: LD_ADDR_EXP 31
41366: PUSH
41367: LD_EXP 31
41371: PUSH
41372: LD_INT 4
41374: ADD
41375: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41376: LD_ADDR_EXP 31
41380: PUSH
41381: LD_EXP 31
41385: PUSH
41386: LD_VAR 0 1
41390: PPUSH
41391: CALL_OW 250
41395: ADD
41396: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41397: LD_ADDR_EXP 31
41401: PUSH
41402: LD_EXP 31
41406: PUSH
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 251
41416: ADD
41417: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41418: LD_ADDR_EXP 31
41422: PUSH
41423: LD_EXP 31
41427: PUSH
41428: LD_VAR 0 1
41432: PPUSH
41433: CALL_OW 254
41437: ADD
41438: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41439: LD_VAR 0 1
41443: PPUSH
41444: CALL_OW 247
41448: PUSH
41449: LD_INT 1
41451: EQUAL
41452: IFFALSE 41502
// begin for i in defenders_list do
41454: LD_ADDR_VAR 0 2
41458: PUSH
41459: LD_EXP 32
41463: PUSH
41464: FOR_IN
41465: IFFALSE 41500
// if i = unit then
41467: LD_VAR 0 2
41471: PUSH
41472: LD_VAR 0 1
41476: EQUAL
41477: IFFALSE 41498
// defenders_list = defenders_list diff [ unit ] ;
41479: LD_ADDR_EXP 32
41483: PUSH
41484: LD_EXP 32
41488: PUSH
41489: LD_VAR 0 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: DIFF
41497: ST_TO_ADDR
41498: GO 41464
41500: POP
41501: POP
// end ; end ; end ;
41502: PPOPN 2
41504: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL 57495 0 1
// end ; end_of_file
41514: PPOPN 1
41516: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41517: GO 41519
41519: DISABLE
41520: LD_INT 0
41522: PPUSH
// begin enemyWayX = [ ] ;
41523: LD_ADDR_EXP 46
41527: PUSH
41528: EMPTY
41529: ST_TO_ADDR
// enemyWayY = [ ] ;
41530: LD_ADDR_EXP 47
41534: PUSH
41535: EMPTY
41536: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41537: LD_ADDR_VAR 0 1
41541: PUSH
41542: LD_INT 1
41544: PPUSH
41545: LD_INT 3
41547: PPUSH
41548: CALL_OW 12
41552: ST_TO_ADDR
// if rnd = 1 then
41553: LD_VAR 0 1
41557: PUSH
41558: LD_INT 1
41560: EQUAL
41561: IFFALSE 41601
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41563: LD_ADDR_EXP 46
41567: PUSH
41568: LD_INT 73
41570: PUSH
41571: LD_INT 46
41573: PUSH
41574: LD_INT 29
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41582: LD_ADDR_EXP 47
41586: PUSH
41587: LD_INT 71
41589: PUSH
41590: LD_INT 43
41592: PUSH
41593: LD_INT 29
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// end ; if rnd = 2 then
41601: LD_VAR 0 1
41605: PUSH
41606: LD_INT 2
41608: EQUAL
41609: IFFALSE 41633
// begin enemyWayX = [ 64 ] ;
41611: LD_ADDR_EXP 46
41615: PUSH
41616: LD_INT 64
41618: PUSH
41619: EMPTY
41620: LIST
41621: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41622: LD_ADDR_EXP 47
41626: PUSH
41627: LD_INT 43
41629: PUSH
41630: EMPTY
41631: LIST
41632: ST_TO_ADDR
// end ; if rnd = 3 then
41633: LD_VAR 0 1
41637: PUSH
41638: LD_INT 3
41640: EQUAL
41641: IFFALSE 41665
// begin enemyWayX = [ 80 ] ;
41643: LD_ADDR_EXP 46
41647: PUSH
41648: LD_INT 80
41650: PUSH
41651: EMPTY
41652: LIST
41653: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41654: LD_ADDR_EXP 47
41658: PUSH
41659: LD_INT 28
41661: PUSH
41662: EMPTY
41663: LIST
41664: ST_TO_ADDR
// end ; enable ;
41665: ENABLE
// end ;
41666: PPOPN 1
41668: END
// every 0 0$1 do
41669: GO 41671
41671: DISABLE
// begin enable ;
41672: ENABLE
// if escapeAvalaible = 0 then
41673: LD_EXP 36
41677: PUSH
41678: LD_INT 0
41680: EQUAL
41681: IFFALSE 41693
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41683: LD_INT 3
41685: PPUSH
41686: LD_INT 6
41688: PPUSH
41689: CALL 8592 0 2
// if escapeAvalaible = 0 then
41693: LD_EXP 36
41697: PUSH
41698: LD_INT 0
41700: EQUAL
41701: IFFALSE 41713
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41703: LD_INT 1
41705: PPUSH
41706: LD_INT 24
41708: PPUSH
41709: CALL 9252 0 2
// if russianAI = 1 then
41713: LD_EXP 27
41717: PUSH
41718: LD_INT 1
41720: EQUAL
41721: IFFALSE 41791
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41723: LD_INT 3
41725: PPUSH
41726: LD_INT 7
41728: PPUSH
41729: LD_INT 6
41731: PPUSH
41732: LD_EXP 29
41736: PPUSH
41737: CALL 11690 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41741: LD_INT 3
41743: PPUSH
41744: LD_EXP 28
41748: PPUSH
41749: LD_INT 6
41751: PPUSH
41752: LD_EXP 31
41756: PPUSH
41757: CALL 11284 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41761: LD_INT 3
41763: PPUSH
41764: LD_INT 26
41766: PPUSH
41767: LD_EXP 46
41771: PPUSH
41772: LD_EXP 47
41776: PPUSH
41777: CALL 10152 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41781: LD_INT 3
41783: PPUSH
41784: LD_INT 1
41786: PPUSH
41787: CALL 12234 0 2
// end ; if SikorskyArrive = 1 then
41791: LD_EXP 18
41795: PUSH
41796: LD_INT 1
41798: EQUAL
41799: IFFALSE 41817
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41801: LD_INT 3
41803: PPUSH
41804: LD_INT 10
41806: PPUSH
41807: LD_INT 53
41809: PPUSH
41810: LD_INT 59
41812: PPUSH
41813: CALL 9949 0 4
// end ;
41817: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41818: LD_EXP 27
41822: PUSH
41823: LD_INT 1
41825: EQUAL
41826: IFFALSE 42102
41828: GO 41830
41830: DISABLE
41831: LD_INT 0
41833: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41834: LD_ADDR_VAR 0 1
41838: PUSH
41839: LD_INT 22
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 21
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 30
41861: PUSH
41862: LD_INT 32
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 35
41877: PUSH
41878: LD_INT 43
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 35
41887: PUSH
41888: LD_INT 44
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 35
41897: PUSH
41898: LD_INT 46
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: PPUSH
41921: CALL_OW 69
41925: PUSH
41926: FOR_IN
41927: IFFALSE 41966
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41929: LD_VAR 0 1
41933: PPUSH
41934: LD_INT 43
41936: PUSH
41937: LD_INT 44
41939: PUSH
41940: LD_INT 46
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PPUSH
41951: LD_INT 3
41953: PPUSH
41954: CALL_OW 12
41958: ARRAY
41959: PPUSH
41960: CALL_OW 431
41964: GO 41926
41966: POP
41967: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41968: LD_ADDR_VAR 0 1
41972: PUSH
41973: LD_INT 22
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 21
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 30
41995: PUSH
41996: LD_INT 33
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 35
42011: PUSH
42012: LD_INT 43
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 35
42021: PUSH
42022: LD_INT 44
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 35
42031: PUSH
42032: LD_INT 46
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: PPUSH
42055: CALL_OW 69
42059: PUSH
42060: FOR_IN
42061: IFFALSE 42100
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42063: LD_VAR 0 1
42067: PPUSH
42068: LD_INT 43
42070: PUSH
42071: LD_INT 44
42073: PUSH
42074: LD_INT 46
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PPUSH
42085: LD_INT 3
42087: PPUSH
42088: CALL_OW 12
42092: ARRAY
42093: PPUSH
42094: CALL_OW 431
42098: GO 42060
42100: POP
42101: POP
// end ;
42102: PPOPN 1
42104: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
42105: LD_EXP 24
42109: PPUSH
42110: CALL_OW 310
42114: NOT
42115: PUSH
42116: LD_EXP 28
42120: PPUSH
42121: CALL_OW 302
42125: AND
42126: PUSH
42127: LD_EXP 28
42131: PPUSH
42132: CALL_OW 255
42136: PUSH
42137: LD_INT 3
42139: EQUAL
42140: AND
42141: IFFALSE 42161
42143: GO 42145
42145: DISABLE
// begin enable ;
42146: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42147: LD_EXP 24
42151: PPUSH
42152: LD_EXP 28
42156: PPUSH
42157: CALL_OW 120
// end ;
42161: END
// every 0 0$1 trigger SikorskyAI = 1 do
42162: LD_EXP 20
42166: PUSH
42167: LD_INT 1
42169: EQUAL
42170: IFFALSE 42205
42172: GO 42174
42174: DISABLE
// begin enable ;
42175: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42176: LD_INT 4
42178: PPUSH
42179: LD_INT 10
42181: PPUSH
42182: LD_INT 93
42184: PPUSH
42185: LD_INT 93
42187: PPUSH
42188: CALL 9949 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42192: LD_INT 4
42194: PPUSH
42195: LD_INT 11
42197: PPUSH
42198: LD_INT 3
42200: PPUSH
42201: CALL 16446 0 3
// end ;
42205: END
// every 0 0$1 trigger SikorskyAI = 1 do
42206: LD_EXP 20
42210: PUSH
42211: LD_INT 1
42213: EQUAL
42214: IFFALSE 42226
42216: GO 42218
42218: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42219: LD_INT 4
42221: PPUSH
42222: CALL 10956 0 1
42226: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42227: LD_EXP 27
42231: PUSH
42232: LD_INT 1
42234: EQUAL
42235: PUSH
42236: LD_EXP 30
42240: PPUSH
42241: CALL_OW 302
42245: AND
42246: PUSH
42247: LD_EXP 30
42251: PPUSH
42252: CALL_OW 255
42256: PUSH
42257: LD_INT 3
42259: EQUAL
42260: AND
42261: PUSH
42262: LD_INT 22
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 21
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 33
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: PPUSH
42297: CALL_OW 69
42301: PUSH
42302: LD_INT 0
42304: EQUAL
42305: AND
42306: IFFALSE 42540
42308: GO 42310
42310: DISABLE
// begin enable ;
42311: ENABLE
// if Difficulty = 1 then
42312: LD_OWVAR 67
42316: PUSH
42317: LD_INT 1
42319: EQUAL
42320: IFFALSE 42388
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42322: LD_INT 3
42324: PPUSH
42325: LD_EXP 30
42329: PPUSH
42330: LD_INT 5
42332: PPUSH
42333: LD_INT 8
42335: PPUSH
42336: CALL_OW 12
42340: PPUSH
42341: LD_INT 43
42343: PUSH
42344: LD_INT 43
42346: PUSH
42347: LD_INT 43
42349: PUSH
42350: LD_INT 43
42352: PUSH
42353: LD_INT 44
42355: PUSH
42356: LD_INT 44
42358: PUSH
42359: LD_INT 44
42361: PUSH
42362: LD_INT 46
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: PPUSH
42375: LD_INT 1
42377: PPUSH
42378: LD_INT 3
42380: PPUSH
42381: LD_INT 24
42383: PPUSH
42384: CALL 9795 0 7
// if Difficulty = 2 then
42388: LD_OWVAR 67
42392: PUSH
42393: LD_INT 2
42395: EQUAL
42396: IFFALSE 42464
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42398: LD_INT 3
42400: PPUSH
42401: LD_EXP 30
42405: PPUSH
42406: LD_INT 6
42408: PPUSH
42409: LD_INT 8
42411: PPUSH
42412: CALL_OW 12
42416: PPUSH
42417: LD_INT 43
42419: PUSH
42420: LD_INT 43
42422: PUSH
42423: LD_INT 44
42425: PUSH
42426: LD_INT 44
42428: PUSH
42429: LD_INT 44
42431: PUSH
42432: LD_INT 44
42434: PUSH
42435: LD_INT 46
42437: PUSH
42438: LD_INT 46
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: PPUSH
42451: LD_INT 1
42453: PPUSH
42454: LD_INT 3
42456: PPUSH
42457: LD_INT 24
42459: PPUSH
42460: CALL 9795 0 7
// if Difficulty = 3 then
42464: LD_OWVAR 67
42468: PUSH
42469: LD_INT 3
42471: EQUAL
42472: IFFALSE 42540
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42474: LD_INT 3
42476: PPUSH
42477: LD_EXP 30
42481: PPUSH
42482: LD_INT 7
42484: PPUSH
42485: LD_INT 8
42487: PPUSH
42488: CALL_OW 12
42492: PPUSH
42493: LD_INT 43
42495: PUSH
42496: LD_INT 43
42498: PUSH
42499: LD_INT 44
42501: PUSH
42502: LD_INT 44
42504: PUSH
42505: LD_INT 44
42507: PUSH
42508: LD_INT 46
42510: PUSH
42511: LD_INT 46
42513: PUSH
42514: LD_INT 46
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: PPUSH
42527: LD_INT 1
42529: PPUSH
42530: LD_INT 3
42532: PPUSH
42533: LD_INT 24
42535: PPUSH
42536: CALL 9795 0 7
// end ;
42540: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42541: LD_EXP 38
42545: PUSH
42546: LD_INT 1
42548: EQUAL
42549: IFFALSE 42631
42551: GO 42553
42553: DISABLE
42554: LD_INT 0
42556: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42557: LD_ADDR_VAR 0 1
42561: PUSH
42562: LD_INT 22
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 21
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 3
42584: PUSH
42585: LD_INT 24
42587: PUSH
42588: LD_INT 650
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: PPUSH
42604: CALL_OW 69
42608: PUSH
42609: FOR_IN
42610: IFFALSE 42629
// ComMoveXY ( i , 51 , 12 ) ;
42612: LD_VAR 0 1
42616: PPUSH
42617: LD_INT 51
42619: PPUSH
42620: LD_INT 12
42622: PPUSH
42623: CALL_OW 111
42627: GO 42609
42629: POP
42630: POP
// end ; end_of_file
42631: PPOPN 1
42633: END
// every 1 1$20 trigger firstAttack = 1 do
42634: LD_EXP 33
42638: PUSH
42639: LD_INT 1
42641: EQUAL
42642: IFFALSE 42748
42644: GO 42646
42646: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42647: LD_INT 6
42649: PPUSH
42650: LD_INT 3
42652: PPUSH
42653: LD_INT 3
42655: PPUSH
42656: LD_INT 4
42658: PPUSH
42659: CALL_OW 12
42663: PUSH
42664: LD_INT 4
42666: PPUSH
42667: LD_INT 6
42669: PPUSH
42670: CALL_OW 12
42674: PUSH
42675: LD_INT 5
42677: PPUSH
42678: LD_INT 6
42680: PPUSH
42681: CALL_OW 12
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: PUSH
42691: LD_OWVAR 67
42695: ARRAY
42696: PPUSH
42697: LD_INT 0
42699: PPUSH
42700: LD_INT 0
42702: PPUSH
42703: LD_INT 0
42705: PPUSH
42706: LD_INT 0
42708: PPUSH
42709: LD_EXP 25
42713: PPUSH
42714: LD_EXP 26
42718: PPUSH
42719: CALL_OW 12
42723: PPUSH
42724: LD_INT 16
42726: PPUSH
42727: LD_INT 7
42729: PPUSH
42730: LD_INT 1
42732: PPUSH
42733: LD_INT 1
42735: PPUSH
42736: LD_INT 3
42738: PPUSH
42739: CALL_OW 12
42743: PPUSH
42744: CALL 12464 0 12
42748: END
// every 1 1$40 trigger firstAttack = 1 do
42749: LD_EXP 33
42753: PUSH
42754: LD_INT 1
42756: EQUAL
42757: IFFALSE 42849
42759: GO 42761
42761: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42762: LD_INT 16
42764: PPUSH
42765: LD_INT 6
42767: PPUSH
42768: LD_INT 3
42770: PPUSH
42771: LD_INT 4
42773: PPUSH
42774: CALL_OW 12
42778: PUSH
42779: LD_INT 4
42781: PPUSH
42782: LD_INT 5
42784: PPUSH
42785: CALL_OW 12
42789: PUSH
42790: LD_INT 5
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: PUSH
42798: LD_OWVAR 67
42802: ARRAY
42803: PPUSH
42804: LD_EXP 25
42808: PPUSH
42809: LD_EXP 26
42813: PPUSH
42814: CALL_OW 12
42818: PPUSH
42819: LD_INT 3
42821: PPUSH
42822: LD_INT 1
42824: PPUSH
42825: LD_INT 3
42827: PPUSH
42828: LD_INT 44
42830: PUSH
42831: LD_INT 46
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PPUSH
42838: EMPTY
42839: PPUSH
42840: EMPTY
42841: PPUSH
42842: LD_INT 1
42844: PPUSH
42845: CALL 14757 0 11
42849: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
42850: LD_EXP 33
42854: PUSH
42855: LD_INT 1
42857: EQUAL
42858: PUSH
42859: LD_EXP 39
42863: PUSH
42864: LD_INT 0
42866: EQUAL
42867: AND
42868: IFFALSE 42974
42870: GO 42872
42872: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42873: LD_INT 6
42875: PPUSH
42876: LD_INT 3
42878: PPUSH
42879: LD_INT 4
42881: PPUSH
42882: LD_INT 5
42884: PPUSH
42885: CALL_OW 12
42889: PUSH
42890: LD_INT 5
42892: PPUSH
42893: LD_INT 6
42895: PPUSH
42896: CALL_OW 12
42900: PUSH
42901: LD_INT 5
42903: PPUSH
42904: LD_INT 6
42906: PPUSH
42907: CALL_OW 12
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: PUSH
42917: LD_OWVAR 67
42921: ARRAY
42922: PPUSH
42923: LD_INT 0
42925: PPUSH
42926: LD_INT 0
42928: PPUSH
42929: LD_INT 0
42931: PPUSH
42932: LD_INT 0
42934: PPUSH
42935: LD_EXP 25
42939: PPUSH
42940: LD_EXP 26
42944: PPUSH
42945: CALL_OW 12
42949: PPUSH
42950: LD_INT 16
42952: PPUSH
42953: LD_INT 7
42955: PPUSH
42956: LD_INT 1
42958: PPUSH
42959: LD_INT 1
42961: PPUSH
42962: LD_INT 3
42964: PPUSH
42965: CALL_OW 12
42969: PPUSH
42970: CALL 12464 0 12
42974: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
42975: LD_EXP 33
42979: PUSH
42980: LD_INT 1
42982: EQUAL
42983: PUSH
42984: LD_EXP 39
42988: PUSH
42989: LD_INT 0
42991: EQUAL
42992: AND
42993: IFFALSE 43089
42995: GO 42997
42997: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42998: LD_INT 16
43000: PPUSH
43001: LD_INT 6
43003: PPUSH
43004: LD_INT 4
43006: PPUSH
43007: LD_INT 5
43009: PPUSH
43010: CALL_OW 12
43014: PUSH
43015: LD_INT 6
43017: PPUSH
43018: LD_INT 7
43020: PPUSH
43021: CALL_OW 12
43025: PUSH
43026: LD_INT 7
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: PUSH
43034: LD_OWVAR 67
43038: ARRAY
43039: PPUSH
43040: LD_EXP 25
43044: PPUSH
43045: LD_EXP 26
43049: PPUSH
43050: CALL_OW 12
43054: PPUSH
43055: LD_INT 3
43057: PPUSH
43058: LD_INT 1
43060: PPUSH
43061: LD_INT 3
43063: PPUSH
43064: LD_INT 43
43066: PUSH
43067: LD_INT 44
43069: PUSH
43070: LD_INT 46
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: PPUSH
43078: EMPTY
43079: PPUSH
43080: EMPTY
43081: PPUSH
43082: LD_INT 1
43084: PPUSH
43085: CALL 14757 0 11
43089: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
43090: LD_EXP 33
43094: PUSH
43095: LD_INT 1
43097: EQUAL
43098: PUSH
43099: LD_EXP 39
43103: PUSH
43104: LD_INT 0
43106: EQUAL
43107: AND
43108: IFFALSE 43204
43110: GO 43112
43112: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43113: LD_INT 16
43115: PPUSH
43116: LD_INT 6
43118: PPUSH
43119: LD_INT 4
43121: PPUSH
43122: LD_INT 5
43124: PPUSH
43125: CALL_OW 12
43129: PUSH
43130: LD_INT 6
43132: PPUSH
43133: LD_INT 7
43135: PPUSH
43136: CALL_OW 12
43140: PUSH
43141: LD_INT 7
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: PUSH
43149: LD_OWVAR 67
43153: ARRAY
43154: PPUSH
43155: LD_EXP 25
43159: PPUSH
43160: LD_EXP 26
43164: PPUSH
43165: CALL_OW 12
43169: PPUSH
43170: LD_INT 3
43172: PPUSH
43173: LD_INT 1
43175: PPUSH
43176: LD_INT 3
43178: PPUSH
43179: LD_INT 43
43181: PUSH
43182: LD_INT 44
43184: PUSH
43185: LD_INT 46
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: PPUSH
43193: EMPTY
43194: PPUSH
43195: EMPTY
43196: PPUSH
43197: LD_INT 1
43199: PPUSH
43200: CALL 14757 0 11
43204: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43205: LD_EXP 33
43209: PUSH
43210: LD_INT 1
43212: EQUAL
43213: PUSH
43214: LD_EXP 39
43218: PUSH
43219: LD_INT 0
43221: EQUAL
43222: AND
43223: IFFALSE 43299
43225: GO 43227
43227: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43228: LD_INT 16
43230: PPUSH
43231: LD_INT 6
43233: PPUSH
43234: LD_INT 4
43236: PUSH
43237: LD_INT 6
43239: PUSH
43240: LD_INT 7
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: PUSH
43248: LD_OWVAR 67
43252: ARRAY
43253: PPUSH
43254: LD_EXP 25
43258: PPUSH
43259: LD_EXP 26
43263: PPUSH
43264: CALL_OW 12
43268: PPUSH
43269: LD_INT 3
43271: PPUSH
43272: LD_INT 1
43274: PPUSH
43275: LD_INT 3
43277: PPUSH
43278: LD_INT 44
43280: PUSH
43281: LD_INT 46
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PPUSH
43288: EMPTY
43289: PPUSH
43290: EMPTY
43291: PPUSH
43292: LD_INT 1
43294: PPUSH
43295: CALL 14757 0 11
43299: END
// every 1 1$00 trigger secondAttack = 1 do
43300: LD_EXP 34
43304: PUSH
43305: LD_INT 1
43307: EQUAL
43308: IFFALSE 43390
43310: GO 43312
43312: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43313: LD_INT 6
43315: PPUSH
43316: LD_INT 3
43318: PPUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 4
43324: PUSH
43325: LD_INT 5
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: PUSH
43333: LD_OWVAR 67
43337: ARRAY
43338: PPUSH
43339: LD_INT 0
43341: PPUSH
43342: LD_INT 0
43344: PPUSH
43345: LD_INT 0
43347: PPUSH
43348: LD_INT 0
43350: PPUSH
43351: LD_EXP 25
43355: PPUSH
43356: LD_EXP 26
43360: PPUSH
43361: CALL_OW 12
43365: PPUSH
43366: LD_INT 16
43368: PPUSH
43369: LD_INT 7
43371: PPUSH
43372: LD_INT 1
43374: PPUSH
43375: LD_INT 1
43377: PPUSH
43378: LD_INT 3
43380: PPUSH
43381: CALL_OW 12
43385: PPUSH
43386: CALL 12464 0 12
43390: END
// every 1 1$00 trigger secondAttack = 1 do
43391: LD_EXP 34
43395: PUSH
43396: LD_INT 1
43398: EQUAL
43399: IFFALSE 43503
43401: GO 43403
43403: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43404: LD_INT 16
43406: PPUSH
43407: LD_INT 6
43409: PPUSH
43410: LD_INT 5
43412: PPUSH
43413: LD_INT 6
43415: PPUSH
43416: CALL_OW 12
43420: PUSH
43421: LD_INT 6
43423: PPUSH
43424: LD_INT 9
43426: PPUSH
43427: CALL_OW 12
43431: PUSH
43432: LD_INT 7
43434: PPUSH
43435: LD_INT 9
43437: PPUSH
43438: CALL_OW 12
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: PUSH
43448: LD_OWVAR 67
43452: ARRAY
43453: PPUSH
43454: LD_EXP 25
43458: PPUSH
43459: LD_EXP 26
43463: PPUSH
43464: CALL_OW 12
43468: PPUSH
43469: LD_INT 3
43471: PPUSH
43472: LD_INT 1
43474: PPUSH
43475: LD_INT 3
43477: PPUSH
43478: LD_INT 43
43480: PUSH
43481: LD_INT 44
43483: PUSH
43484: LD_INT 46
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: PPUSH
43492: EMPTY
43493: PPUSH
43494: EMPTY
43495: PPUSH
43496: LD_INT 1
43498: PPUSH
43499: CALL 14757 0 11
43503: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43504: LD_EXP 18
43508: PUSH
43509: LD_INT 0
43511: EQUAL
43512: IFFALSE 43594
43514: GO 43516
43516: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43517: LD_INT 6
43519: PPUSH
43520: LD_INT 3
43522: PPUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 4
43528: PUSH
43529: LD_INT 5
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: PUSH
43537: LD_OWVAR 67
43541: ARRAY
43542: PPUSH
43543: LD_INT 0
43545: PPUSH
43546: LD_INT 0
43548: PPUSH
43549: LD_INT 0
43551: PPUSH
43552: LD_INT 0
43554: PPUSH
43555: LD_EXP 25
43559: PPUSH
43560: LD_EXP 26
43564: PPUSH
43565: CALL_OW 12
43569: PPUSH
43570: LD_INT 16
43572: PPUSH
43573: LD_INT 7
43575: PPUSH
43576: LD_INT 1
43578: PPUSH
43579: LD_INT 1
43581: PPUSH
43582: LD_INT 3
43584: PPUSH
43585: CALL_OW 12
43589: PPUSH
43590: CALL 12464 0 12
43594: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43595: LD_EXP 18
43599: PUSH
43600: LD_INT 0
43602: EQUAL
43603: IFFALSE 43703
43605: GO 43607
43607: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43608: LD_INT 16
43610: PPUSH
43611: LD_INT 6
43613: PPUSH
43614: LD_INT 5
43616: PPUSH
43617: LD_INT 6
43619: PPUSH
43620: CALL_OW 12
43624: PUSH
43625: LD_INT 6
43627: PPUSH
43628: LD_INT 9
43630: PPUSH
43631: CALL_OW 12
43635: PUSH
43636: LD_INT 7
43638: PPUSH
43639: LD_INT 9
43641: PPUSH
43642: CALL_OW 12
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: PUSH
43652: LD_OWVAR 67
43656: ARRAY
43657: PPUSH
43658: LD_EXP 25
43662: PPUSH
43663: LD_EXP 26
43667: PPUSH
43668: CALL_OW 12
43672: PPUSH
43673: LD_INT 3
43675: PPUSH
43676: LD_INT 1
43678: PPUSH
43679: LD_INT 3
43681: PPUSH
43682: LD_INT 44
43684: PUSH
43685: LD_INT 46
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PPUSH
43692: EMPTY
43693: PPUSH
43694: EMPTY
43695: PPUSH
43696: LD_INT 1
43698: PPUSH
43699: CALL 14757 0 11
43703: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43704: LD_EXP 18
43708: PUSH
43709: LD_INT 0
43711: EQUAL
43712: IFFALSE 43794
43714: GO 43716
43716: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43717: LD_INT 6
43719: PPUSH
43720: LD_INT 3
43722: PPUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 4
43728: PUSH
43729: LD_INT 5
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: PUSH
43737: LD_OWVAR 67
43741: ARRAY
43742: PPUSH
43743: LD_INT 0
43745: PPUSH
43746: LD_INT 0
43748: PPUSH
43749: LD_INT 0
43751: PPUSH
43752: LD_INT 0
43754: PPUSH
43755: LD_EXP 25
43759: PPUSH
43760: LD_EXP 26
43764: PPUSH
43765: CALL_OW 12
43769: PPUSH
43770: LD_INT 16
43772: PPUSH
43773: LD_INT 7
43775: PPUSH
43776: LD_INT 1
43778: PPUSH
43779: LD_INT 1
43781: PPUSH
43782: LD_INT 3
43784: PPUSH
43785: CALL_OW 12
43789: PPUSH
43790: CALL 12464 0 12
43794: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43795: LD_EXP 18
43799: PUSH
43800: LD_INT 0
43802: EQUAL
43803: IFFALSE 43903
43805: GO 43807
43807: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43808: LD_INT 16
43810: PPUSH
43811: LD_INT 6
43813: PPUSH
43814: LD_INT 5
43816: PPUSH
43817: LD_INT 6
43819: PPUSH
43820: CALL_OW 12
43824: PUSH
43825: LD_INT 6
43827: PPUSH
43828: LD_INT 9
43830: PPUSH
43831: CALL_OW 12
43835: PUSH
43836: LD_INT 7
43838: PPUSH
43839: LD_INT 9
43841: PPUSH
43842: CALL_OW 12
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: PUSH
43852: LD_OWVAR 67
43856: ARRAY
43857: PPUSH
43858: LD_EXP 25
43862: PPUSH
43863: LD_EXP 26
43867: PPUSH
43868: CALL_OW 12
43872: PPUSH
43873: LD_INT 3
43875: PPUSH
43876: LD_INT 1
43878: PPUSH
43879: LD_INT 3
43881: PPUSH
43882: LD_INT 44
43884: PUSH
43885: LD_INT 46
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PPUSH
43892: EMPTY
43893: PPUSH
43894: EMPTY
43895: PPUSH
43896: LD_INT 1
43898: PPUSH
43899: CALL 14757 0 11
43903: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43904: LD_EXP 18
43908: PUSH
43909: LD_INT 0
43911: EQUAL
43912: IFFALSE 43994
43914: GO 43916
43916: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43917: LD_INT 6
43919: PPUSH
43920: LD_INT 3
43922: PPUSH
43923: LD_INT 3
43925: PUSH
43926: LD_INT 4
43928: PUSH
43929: LD_INT 5
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: PUSH
43937: LD_OWVAR 67
43941: ARRAY
43942: PPUSH
43943: LD_INT 0
43945: PPUSH
43946: LD_INT 0
43948: PPUSH
43949: LD_INT 0
43951: PPUSH
43952: LD_INT 0
43954: PPUSH
43955: LD_EXP 25
43959: PPUSH
43960: LD_EXP 26
43964: PPUSH
43965: CALL_OW 12
43969: PPUSH
43970: LD_INT 16
43972: PPUSH
43973: LD_INT 7
43975: PPUSH
43976: LD_INT 1
43978: PPUSH
43979: LD_INT 1
43981: PPUSH
43982: LD_INT 3
43984: PPUSH
43985: CALL_OW 12
43989: PPUSH
43990: CALL 12464 0 12
43994: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43995: LD_EXP 18
43999: PUSH
44000: LD_INT 0
44002: EQUAL
44003: IFFALSE 44103
44005: GO 44007
44007: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
44008: LD_INT 16
44010: PPUSH
44011: LD_INT 6
44013: PPUSH
44014: LD_INT 5
44016: PPUSH
44017: LD_INT 6
44019: PPUSH
44020: CALL_OW 12
44024: PUSH
44025: LD_INT 6
44027: PPUSH
44028: LD_INT 9
44030: PPUSH
44031: CALL_OW 12
44035: PUSH
44036: LD_INT 7
44038: PPUSH
44039: LD_INT 9
44041: PPUSH
44042: CALL_OW 12
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: PUSH
44052: LD_OWVAR 67
44056: ARRAY
44057: PPUSH
44058: LD_EXP 25
44062: PPUSH
44063: LD_EXP 26
44067: PPUSH
44068: CALL_OW 12
44072: PPUSH
44073: LD_INT 3
44075: PPUSH
44076: LD_INT 1
44078: PPUSH
44079: LD_INT 3
44081: PPUSH
44082: LD_INT 44
44084: PUSH
44085: LD_INT 46
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PPUSH
44092: EMPTY
44093: PPUSH
44094: EMPTY
44095: PPUSH
44096: LD_INT 1
44098: PPUSH
44099: CALL 14757 0 11
44103: END
// every 0 0$1 trigger timerStatus = 1 do
44104: LD_EXP 35
44108: PUSH
44109: LD_INT 1
44111: EQUAL
44112: IFFALSE 44172
44114: GO 44116
44116: DISABLE
// begin repeat wait ( 0 0$1 ) ;
44117: LD_INT 35
44119: PPUSH
44120: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
44124: LD_ADDR_OWVAR 47
44128: PUSH
44129: LD_STRING #Am08-1
44131: PUSH
44132: LD_EXP 19
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
44141: LD_ADDR_EXP 19
44145: PUSH
44146: LD_EXP 19
44150: PUSH
44151: LD_INT 35
44153: MINUS
44154: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
44155: LD_EXP 19
44159: PUSH
44160: LD_INT 0
44162: EQUAL
44163: IFFALSE 44117
// display_strings := [ ] ;
44165: LD_ADDR_OWVAR 47
44169: PUSH
44170: EMPTY
44171: ST_TO_ADDR
// end ; end_of_file
44172: END
// every 1 1$0 do
44173: GO 44175
44175: DISABLE
// begin if supply <= 13 and supply > 7 then
44176: LD_EXP 40
44180: PUSH
44181: LD_INT 13
44183: LESSEQUAL
44184: PUSH
44185: LD_EXP 40
44189: PUSH
44190: LD_INT 7
44192: GREATER
44193: AND
44194: IFFALSE 44217
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44196: LD_INT 3
44198: PPUSH
44199: LD_INT 5
44201: PPUSH
44202: CALL_OW 12
44206: PPUSH
44207: LD_INT 5
44209: PPUSH
44210: LD_INT 1
44212: PPUSH
44213: CALL_OW 55
// if supply <= 7 and supply > 4 then
44217: LD_EXP 40
44221: PUSH
44222: LD_INT 7
44224: LESSEQUAL
44225: PUSH
44226: LD_EXP 40
44230: PUSH
44231: LD_INT 4
44233: GREATER
44234: AND
44235: IFFALSE 44258
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44237: LD_INT 3
44239: PPUSH
44240: LD_INT 5
44242: PPUSH
44243: CALL_OW 12
44247: PPUSH
44248: LD_INT 20
44250: PPUSH
44251: LD_INT 1
44253: PPUSH
44254: CALL_OW 55
// if supply <= 4 and supply > 0 then
44258: LD_EXP 40
44262: PUSH
44263: LD_INT 4
44265: LESSEQUAL
44266: PUSH
44267: LD_EXP 40
44271: PUSH
44272: LD_INT 0
44274: GREATER
44275: AND
44276: IFFALSE 44299
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44278: LD_INT 3
44280: PPUSH
44281: LD_INT 5
44283: PPUSH
44284: CALL_OW 12
44288: PPUSH
44289: LD_INT 21
44291: PPUSH
44292: LD_INT 1
44294: PPUSH
44295: CALL_OW 55
// if supply > 0 then
44299: LD_EXP 40
44303: PUSH
44304: LD_INT 0
44306: GREATER
44307: IFFALSE 44324
// begin supply = supply - 1 ;
44309: LD_ADDR_EXP 40
44313: PUSH
44314: LD_EXP 40
44318: PUSH
44319: LD_INT 1
44321: MINUS
44322: ST_TO_ADDR
// enable ;
44323: ENABLE
// end ; end ; end_of_file
44324: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44325: LD_EXP 39
44329: PUSH
44330: LD_INT 1
44332: EQUAL
44333: PUSH
44334: LD_EXP 1
44338: PPUSH
44339: CALL_OW 301
44343: AND
44344: IFFALSE 44356
44346: GO 44348
44348: DISABLE
// YouLost ( JMM ) ;
44349: LD_STRING JMM
44351: PPUSH
44352: CALL_OW 104
44356: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44357: LD_EXP 18
44361: PUSH
44362: LD_INT 1
44364: EQUAL
44365: PUSH
44366: LD_EXP 16
44370: PPUSH
44371: CALL_OW 301
44375: AND
44376: IFFALSE 44408
44378: GO 44380
44380: DISABLE
// begin DialogueOn ;
44381: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44385: LD_EXP 23
44389: PPUSH
44390: LD_STRING D8a-Pow-1
44392: PPUSH
44393: CALL_OW 94
// DialogueOff ;
44397: CALL_OW 7
// YouLost ( Dismissed ) ;
44401: LD_STRING Dismissed
44403: PPUSH
44404: CALL_OW 104
// end ;
44408: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44409: LD_INT 22
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 30
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 30
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PPUSH
44451: CALL_OW 69
44455: PUSH
44456: LD_INT 0
44458: EQUAL
44459: IFFALSE 44471
44461: GO 44463
44463: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44464: LD_STRING Destroyed
44466: PPUSH
44467: CALL_OW 104
44471: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
44472: LD_EXP 24
44476: PPUSH
44477: CALL_OW 301
44481: PUSH
44482: LD_INT 22
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 21
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PPUSH
44506: CALL_OW 69
44510: PUSH
44511: LD_INT 7
44513: PUSH
44514: LD_INT 6
44516: PUSH
44517: LD_INT 5
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: LIST
44524: PUSH
44525: LD_OWVAR 67
44529: ARRAY
44530: LESS
44531: AND
44532: PUSH
44533: LD_EXP 1
44537: PPUSH
44538: CALL_OW 305
44542: AND
44543: IFFALSE 45099
44545: GO 44547
44547: DISABLE
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
44552: PPUSH
// begin russianAI = 0 ;
44553: LD_ADDR_EXP 27
44557: PUSH
44558: LD_INT 0
44560: ST_TO_ADDR
// escapeAvalaible = 1 ;
44561: LD_ADDR_EXP 36
44565: PUSH
44566: LD_INT 1
44568: ST_TO_ADDR
// Video ( true ) ;
44569: LD_INT 1
44571: PPUSH
44572: CALL 7168 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44576: LD_INT 3
44578: PPUSH
44579: LD_INT 1
44581: PPUSH
44582: LD_INT 1
44584: PPUSH
44585: LD_INT 0
44587: PPUSH
44588: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44592: LD_INT 6
44594: PPUSH
44595: LD_INT 1
44597: PPUSH
44598: LD_INT 1
44600: PPUSH
44601: LD_INT 0
44603: PPUSH
44604: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44608: LD_INT 3
44610: PPUSH
44611: LD_INT 1
44613: PPUSH
44614: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44618: LD_INT 97
44620: PPUSH
44621: LD_INT 91
44623: PPUSH
44624: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44628: LD_INT 22
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 21
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PPUSH
44652: CALL_OW 69
44656: PPUSH
44657: CALL_OW 121
// wait ( 0 0$01 ) ;
44661: LD_INT 35
44663: PPUSH
44664: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44668: LD_INT 22
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 21
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PPUSH
44692: CALL_OW 69
44696: PPUSH
44697: LD_INT 124
44699: PPUSH
44700: LD_INT 98
44702: PPUSH
44703: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44707: LD_INT 22
44709: PUSH
44710: LD_INT 6
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 21
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PPUSH
44731: CALL_OW 69
44735: PPUSH
44736: CALL_OW 121
// wait ( 0 0$01 ) ;
44740: LD_INT 35
44742: PPUSH
44743: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44747: LD_INT 22
44749: PUSH
44750: LD_INT 6
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 21
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PPUSH
44771: CALL_OW 69
44775: PPUSH
44776: LD_INT 124
44778: PPUSH
44779: LD_INT 98
44781: PPUSH
44782: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44786: LD_INT 22
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 21
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: LD_INT 54
44811: PUSH
44812: EMPTY
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: PPUSH
44824: CALL_OW 69
44828: PPUSH
44829: LD_INT 124
44831: PPUSH
44832: LD_INT 98
44834: PPUSH
44835: CALL_OW 114
// wait ( 0 0$4 ) ;
44839: LD_INT 140
44841: PPUSH
44842: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44846: LD_INT 124
44848: PPUSH
44849: LD_INT 98
44851: PPUSH
44852: CALL_OW 84
// if SikorskyStatus = 1 then
44856: LD_EXP 21
44860: PUSH
44861: LD_INT 1
44863: EQUAL
44864: IFFALSE 44878
// Say ( Sikorski , D9-Sik-1 ) ;
44866: LD_EXP 16
44870: PPUSH
44871: LD_STRING D9-Sik-1
44873: PPUSH
44874: CALL_OW 88
// if SikorskyStatus = 2 then
44878: LD_EXP 21
44882: PUSH
44883: LD_INT 2
44885: EQUAL
44886: IFFALSE 44907
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44888: LD_EXP 23
44892: PPUSH
44893: LD_STRING D8b-Pow-1
44895: PPUSH
44896: CALL_OW 94
// YouLost ( Dismissed ) ;
44900: LD_STRING Dismissed
44902: PPUSH
44903: CALL_OW 104
// end ; p := 0 0$0 ;
44907: LD_ADDR_VAR 0 3
44911: PUSH
44912: LD_INT 0
44914: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
44915: LD_ADDR_VAR 0 2
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 22
44925: PUSH
44926: LD_INT 3
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 22
44935: PUSH
44936: LD_INT 6
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 21
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PPUSH
44962: CALL_OW 69
44966: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44967: LD_INT 35
44969: PPUSH
44970: CALL_OW 67
// p := p + 0 0$1 ;
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: LD_VAR 0 3
44983: PUSH
44984: LD_INT 35
44986: PLUS
44987: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
44988: LD_VAR 0 2
44992: PPUSH
44993: LD_INT 22
44995: PPUSH
44996: CALL_OW 113
// for i in tmp do
45000: LD_ADDR_VAR 0 1
45004: PUSH
45005: LD_VAR 0 2
45009: PUSH
45010: FOR_IN
45011: IFFALSE 45038
// if IsInArea ( i , RussianEscape ) then
45013: LD_VAR 0 1
45017: PPUSH
45018: LD_INT 22
45020: PPUSH
45021: CALL_OW 308
45025: IFFALSE 45036
// RemoveUnit ( i ) ;
45027: LD_VAR 0 1
45031: PPUSH
45032: CALL_OW 64
45036: GO 45010
45038: POP
45039: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
45040: LD_INT 23
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 21
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 24
45062: PUSH
45063: LD_INT 250
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: PPUSH
45075: CALL_OW 69
45079: PUSH
45080: LD_INT 0
45082: EQUAL
45083: PUSH
45084: LD_VAR 0 3
45088: PUSH
45089: LD_INT 245
45091: GREATEREQUAL
45092: OR
45093: IFFALSE 44967
// FinishMission ;
45095: CALL 45102 0 0
// end ;
45099: PPOPN 3
45101: END
// export function FinishMission ; var tmp ; begin
45102: LD_INT 0
45104: PPUSH
45105: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
45106: LD_INT 22
45108: PUSH
45109: LD_INT 4
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PPUSH
45116: CALL_OW 69
45120: PUSH
45121: LD_INT 0
45123: EQUAL
45124: IFFALSE 45133
// SetAchievement ( ACH_BLITZKRIEG ) ;
45126: LD_STRING ACH_BLITZKRIEG
45128: PPUSH
45129: CALL_OW 543
// if tick <= 25 25$00 then
45133: LD_OWVAR 1
45137: PUSH
45138: LD_INT 52500
45140: LESSEQUAL
45141: IFFALSE 45157
// begin wait ( 3 ) ;
45143: LD_INT 3
45145: PPUSH
45146: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
45150: LD_STRING ACH_ASPEED_8
45152: PPUSH
45153: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
45157: LD_STRING med1
45159: PPUSH
45160: LD_INT 1
45162: PPUSH
45163: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
45167: LD_STRING med2
45169: PPUSH
45170: LD_INT 1
45172: PPUSH
45173: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
45177: LD_STRING perfect
45179: PPUSH
45180: LD_INT 1
45182: PPUSH
45183: CALL_OW 101
// if Difficulty = 3 then
45187: LD_OWVAR 67
45191: PUSH
45192: LD_INT 3
45194: EQUAL
45195: IFFALSE 45207
// SetAchievementEX ( ACH_AMER , 8 ) ;
45197: LD_STRING ACH_AMER
45199: PPUSH
45200: LD_INT 8
45202: PPUSH
45203: CALL_OW 564
// GiveMedals ( Main ) ;
45207: LD_STRING Main
45209: PPUSH
45210: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45214: LD_INT 22
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 23
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 21
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 25
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 25
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 25
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 25
45279: PUSH
45280: LD_INT 4
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: PPUSH
45300: CALL_OW 69
45304: PPUSH
45305: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45309: LD_EXP 1
45313: PPUSH
45314: LD_EXP 43
45318: PUSH
45319: LD_STRING JMM
45321: STR
45322: PPUSH
45323: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
45327: LD_EXP 2
45331: PPUSH
45332: LD_EXP 43
45336: PUSH
45337: LD_STRING Brown
45339: STR
45340: PPUSH
45341: CALL 8311 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45345: LD_EXP 3
45349: PPUSH
45350: LD_EXP 43
45354: PUSH
45355: LD_STRING Donaldson
45357: STR
45358: PPUSH
45359: CALL 8311 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45363: LD_EXP 4
45367: PPUSH
45368: LD_EXP 43
45372: PUSH
45373: LD_STRING Bobby
45375: STR
45376: PPUSH
45377: CALL 8311 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45381: LD_EXP 5
45385: PPUSH
45386: LD_EXP 43
45390: PUSH
45391: LD_STRING Cyrus
45393: STR
45394: PPUSH
45395: CALL 8311 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45399: LD_EXP 6
45403: PPUSH
45404: LD_EXP 43
45408: PUSH
45409: LD_STRING Lisa
45411: STR
45412: PPUSH
45413: CALL 8311 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45417: LD_EXP 7
45421: PPUSH
45422: LD_EXP 43
45426: PUSH
45427: LD_STRING Frank
45429: STR
45430: PPUSH
45431: CALL 8311 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45435: LD_EXP 8
45439: PPUSH
45440: LD_EXP 43
45444: PUSH
45445: LD_STRING Gladstone
45447: STR
45448: PPUSH
45449: CALL 8311 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45453: LD_EXP 9
45457: PPUSH
45458: LD_EXP 43
45462: PUSH
45463: LD_STRING Kikuchi
45465: STR
45466: PPUSH
45467: CALL 8311 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45471: LD_EXP 14
45475: PPUSH
45476: LD_EXP 43
45480: PUSH
45481: LD_STRING Denis
45483: STR
45484: PPUSH
45485: CALL 8311 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45489: LD_EXP 15
45493: PPUSH
45494: LD_EXP 43
45498: PUSH
45499: LD_STRING Joan
45501: STR
45502: PPUSH
45503: CALL 8311 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45507: LD_EXP 10
45511: PPUSH
45512: LD_EXP 43
45516: PUSH
45517: LD_STRING Khatam
45519: STR
45520: PPUSH
45521: CALL 8311 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45525: LD_EXP 13
45529: PPUSH
45530: LD_EXP 43
45534: PUSH
45535: LD_STRING Houten
45537: STR
45538: PPUSH
45539: CALL 8311 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45543: LD_INT 50
45545: PUSH
45546: EMPTY
45547: LIST
45548: PUSH
45549: LD_INT 22
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 21
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 25
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 25
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 25
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 25
45604: PUSH
45605: LD_INT 4
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: PPUSH
45625: CALL_OW 69
45629: PUSH
45630: LD_EXP 1
45634: PUSH
45635: LD_EXP 2
45639: PUSH
45640: LD_EXP 3
45644: PUSH
45645: LD_EXP 4
45649: PUSH
45650: LD_EXP 5
45654: PUSH
45655: LD_EXP 6
45659: PUSH
45660: LD_EXP 7
45664: PUSH
45665: LD_EXP 8
45669: PUSH
45670: LD_EXP 9
45674: PUSH
45675: LD_EXP 14
45679: PUSH
45680: LD_EXP 15
45684: PUSH
45685: LD_EXP 13
45689: PUSH
45690: LD_EXP 10
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: DIFF
45710: PPUSH
45711: LD_STRING 08_other_survivors
45713: PPUSH
45714: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45718: LD_INT 23
45720: PPUSH
45721: CALL 45734 0 1
// YouWin ;
45725: CALL_OW 103
// end ;
45729: LD_VAR 0 1
45733: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45734: LD_INT 0
45736: PPUSH
45737: PPUSH
45738: PPUSH
45739: PPUSH
// gammaBase = [ ] ;
45740: LD_ADDR_VAR 0 4
45744: PUSH
45745: EMPTY
45746: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45747: LD_ADDR_VAR 0 5
45751: PUSH
45752: LD_VAR 0 1
45756: PPUSH
45757: LD_INT 22
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 21
45769: PUSH
45770: LD_INT 3
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 50
45779: PUSH
45780: EMPTY
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: PPUSH
45788: CALL_OW 70
45792: ST_TO_ADDR
// for i in buildings do
45793: LD_ADDR_VAR 0 3
45797: PUSH
45798: LD_VAR 0 5
45802: PUSH
45803: FOR_IN
45804: IFFALSE 46241
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45806: LD_VAR 0 3
45810: PPUSH
45811: CALL_OW 266
45815: PUSH
45816: LD_INT 6
45818: PUSH
45819: LD_INT 7
45821: PUSH
45822: LD_INT 8
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: IN
45830: IFFALSE 45944
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45832: LD_ADDR_VAR 0 4
45836: PUSH
45837: LD_VAR 0 4
45841: PUSH
45842: LD_VAR 0 3
45846: PPUSH
45847: CALL_OW 266
45851: PUSH
45852: LD_VAR 0 3
45856: PPUSH
45857: CALL_OW 250
45861: PUSH
45862: LD_VAR 0 3
45866: PPUSH
45867: CALL_OW 251
45871: PUSH
45872: LD_VAR 0 3
45876: PPUSH
45877: CALL_OW 254
45881: PUSH
45882: LD_VAR 0 3
45886: PPUSH
45887: CALL_OW 267
45891: PUSH
45892: LD_VAR 0 3
45896: PPUSH
45897: CALL_OW 248
45901: PUSH
45902: LD_VAR 0 3
45906: PPUSH
45907: LD_INT 1
45909: PPUSH
45910: CALL_OW 268
45914: PUSH
45915: LD_VAR 0 3
45919: PPUSH
45920: LD_INT 2
45922: PPUSH
45923: CALL_OW 268
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: ADD
45941: ST_TO_ADDR
45942: GO 46239
// if GetBType ( i ) = b_bunker then
45944: LD_VAR 0 3
45948: PPUSH
45949: CALL_OW 266
45953: PUSH
45954: LD_INT 32
45956: EQUAL
45957: IFFALSE 46054
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45959: LD_ADDR_VAR 0 4
45963: PUSH
45964: LD_VAR 0 4
45968: PUSH
45969: LD_VAR 0 3
45973: PPUSH
45974: CALL_OW 266
45978: PUSH
45979: LD_VAR 0 3
45983: PPUSH
45984: CALL_OW 250
45988: PUSH
45989: LD_VAR 0 3
45993: PPUSH
45994: CALL_OW 251
45998: PUSH
45999: LD_VAR 0 3
46003: PPUSH
46004: CALL_OW 254
46008: PUSH
46009: LD_VAR 0 3
46013: PPUSH
46014: CALL_OW 267
46018: PUSH
46019: LD_VAR 0 3
46023: PPUSH
46024: CALL_OW 248
46028: PUSH
46029: LD_VAR 0 3
46033: PPUSH
46034: CALL_OW 269
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: PUSH
46048: EMPTY
46049: LIST
46050: ADD
46051: ST_TO_ADDR
46052: GO 46239
// if GetBType ( i ) = b_factory then
46054: LD_VAR 0 3
46058: PPUSH
46059: CALL_OW 266
46063: PUSH
46064: LD_INT 3
46066: EQUAL
46067: IFFALSE 46157
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
46069: LD_ADDR_VAR 0 4
46073: PUSH
46074: LD_VAR 0 4
46078: PPUSH
46079: LD_INT 1
46081: PPUSH
46082: LD_VAR 0 3
46086: PPUSH
46087: CALL_OW 266
46091: PUSH
46092: LD_VAR 0 3
46096: PPUSH
46097: CALL_OW 250
46101: PUSH
46102: LD_VAR 0 3
46106: PPUSH
46107: CALL_OW 251
46111: PUSH
46112: LD_VAR 0 3
46116: PPUSH
46117: CALL_OW 254
46121: PUSH
46122: LD_VAR 0 3
46126: PPUSH
46127: CALL_OW 267
46131: PUSH
46132: LD_VAR 0 3
46136: PPUSH
46137: CALL_OW 248
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: PPUSH
46150: CALL_OW 2
46154: ST_TO_ADDR
46155: GO 46239
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
46157: LD_ADDR_VAR 0 4
46161: PUSH
46162: LD_VAR 0 4
46166: PUSH
46167: LD_VAR 0 3
46171: PPUSH
46172: CALL_OW 266
46176: PUSH
46177: LD_VAR 0 3
46181: PPUSH
46182: CALL_OW 250
46186: PUSH
46187: LD_VAR 0 3
46191: PPUSH
46192: CALL_OW 251
46196: PUSH
46197: LD_VAR 0 3
46201: PPUSH
46202: CALL_OW 254
46206: PUSH
46207: LD_VAR 0 3
46211: PPUSH
46212: CALL_OW 267
46216: PUSH
46217: LD_VAR 0 3
46221: PPUSH
46222: CALL_OW 248
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: ADD
46238: ST_TO_ADDR
// end ;
46239: GO 45803
46241: POP
46242: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
46243: LD_VAR 0 4
46247: PPUSH
46248: LD_STRING 08_GammaBase
46250: PPUSH
46251: CALL_OW 39
// end ; end_of_file
46255: LD_VAR 0 2
46259: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
46260: GO 46262
46262: DISABLE
// begin ru_radar := 98 ;
46263: LD_ADDR_EXP 48
46267: PUSH
46268: LD_INT 98
46270: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
46271: LD_ADDR_EXP 49
46275: PUSH
46276: LD_INT 89
46278: ST_TO_ADDR
// us_hack := 99 ;
46279: LD_ADDR_EXP 50
46283: PUSH
46284: LD_INT 99
46286: ST_TO_ADDR
// us_artillery := 97 ;
46287: LD_ADDR_EXP 51
46291: PUSH
46292: LD_INT 97
46294: ST_TO_ADDR
// ar_bio_bomb := 91 ;
46295: LD_ADDR_EXP 52
46299: PUSH
46300: LD_INT 91
46302: ST_TO_ADDR
// tech_Artillery := 80 ;
46303: LD_ADDR_EXP 53
46307: PUSH
46308: LD_INT 80
46310: ST_TO_ADDR
// tech_RadMat := 81 ;
46311: LD_ADDR_EXP 54
46315: PUSH
46316: LD_INT 81
46318: ST_TO_ADDR
// tech_BasicTools := 82 ;
46319: LD_ADDR_EXP 55
46323: PUSH
46324: LD_INT 82
46326: ST_TO_ADDR
// tech_Cargo := 83 ;
46327: LD_ADDR_EXP 56
46331: PUSH
46332: LD_INT 83
46334: ST_TO_ADDR
// tech_Track := 84 ;
46335: LD_ADDR_EXP 57
46339: PUSH
46340: LD_INT 84
46342: ST_TO_ADDR
// tech_Crane := 85 ;
46343: LD_ADDR_EXP 58
46347: PUSH
46348: LD_INT 85
46350: ST_TO_ADDR
// tech_Bulldozer := 86 ;
46351: LD_ADDR_EXP 59
46355: PUSH
46356: LD_INT 86
46358: ST_TO_ADDR
// tech_Hovercraft := 87 ;
46359: LD_ADDR_EXP 60
46363: PUSH
46364: LD_INT 87
46366: ST_TO_ADDR
// end ; end_of_file end_of_file
46367: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
46368: GO 46370
46370: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
46371: LD_STRING initStreamRollete();
46373: PPUSH
46374: CALL_OW 559
// InitStreamMode ;
46378: CALL 46387 0 0
// DefineStreamItems ( ) ;
46382: CALL 46827 0 0
// end ;
46386: END
// function InitStreamMode ; begin
46387: LD_INT 0
46389: PPUSH
// streamModeActive := false ;
46390: LD_ADDR_EXP 61
46394: PUSH
46395: LD_INT 0
46397: ST_TO_ADDR
// normalCounter := 36 ;
46398: LD_ADDR_EXP 62
46402: PUSH
46403: LD_INT 36
46405: ST_TO_ADDR
// hardcoreCounter := 16 ;
46406: LD_ADDR_EXP 63
46410: PUSH
46411: LD_INT 16
46413: ST_TO_ADDR
// sRocket := false ;
46414: LD_ADDR_EXP 66
46418: PUSH
46419: LD_INT 0
46421: ST_TO_ADDR
// sSpeed := false ;
46422: LD_ADDR_EXP 65
46426: PUSH
46427: LD_INT 0
46429: ST_TO_ADDR
// sEngine := false ;
46430: LD_ADDR_EXP 67
46434: PUSH
46435: LD_INT 0
46437: ST_TO_ADDR
// sSpec := false ;
46438: LD_ADDR_EXP 64
46442: PUSH
46443: LD_INT 0
46445: ST_TO_ADDR
// sLevel := false ;
46446: LD_ADDR_EXP 68
46450: PUSH
46451: LD_INT 0
46453: ST_TO_ADDR
// sArmoury := false ;
46454: LD_ADDR_EXP 69
46458: PUSH
46459: LD_INT 0
46461: ST_TO_ADDR
// sRadar := false ;
46462: LD_ADDR_EXP 70
46466: PUSH
46467: LD_INT 0
46469: ST_TO_ADDR
// sBunker := false ;
46470: LD_ADDR_EXP 71
46474: PUSH
46475: LD_INT 0
46477: ST_TO_ADDR
// sHack := false ;
46478: LD_ADDR_EXP 72
46482: PUSH
46483: LD_INT 0
46485: ST_TO_ADDR
// sFire := false ;
46486: LD_ADDR_EXP 73
46490: PUSH
46491: LD_INT 0
46493: ST_TO_ADDR
// sRefresh := false ;
46494: LD_ADDR_EXP 74
46498: PUSH
46499: LD_INT 0
46501: ST_TO_ADDR
// sExp := false ;
46502: LD_ADDR_EXP 75
46506: PUSH
46507: LD_INT 0
46509: ST_TO_ADDR
// sDepot := false ;
46510: LD_ADDR_EXP 76
46514: PUSH
46515: LD_INT 0
46517: ST_TO_ADDR
// sFlag := false ;
46518: LD_ADDR_EXP 77
46522: PUSH
46523: LD_INT 0
46525: ST_TO_ADDR
// sKamikadze := false ;
46526: LD_ADDR_EXP 85
46530: PUSH
46531: LD_INT 0
46533: ST_TO_ADDR
// sTroll := false ;
46534: LD_ADDR_EXP 86
46538: PUSH
46539: LD_INT 0
46541: ST_TO_ADDR
// sSlow := false ;
46542: LD_ADDR_EXP 87
46546: PUSH
46547: LD_INT 0
46549: ST_TO_ADDR
// sLack := false ;
46550: LD_ADDR_EXP 88
46554: PUSH
46555: LD_INT 0
46557: ST_TO_ADDR
// sTank := false ;
46558: LD_ADDR_EXP 90
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// sRemote := false ;
46566: LD_ADDR_EXP 91
46570: PUSH
46571: LD_INT 0
46573: ST_TO_ADDR
// sPowell := false ;
46574: LD_ADDR_EXP 92
46578: PUSH
46579: LD_INT 0
46581: ST_TO_ADDR
// sTeleport := false ;
46582: LD_ADDR_EXP 95
46586: PUSH
46587: LD_INT 0
46589: ST_TO_ADDR
// sOilTower := false ;
46590: LD_ADDR_EXP 97
46594: PUSH
46595: LD_INT 0
46597: ST_TO_ADDR
// sShovel := false ;
46598: LD_ADDR_EXP 98
46602: PUSH
46603: LD_INT 0
46605: ST_TO_ADDR
// sSheik := false ;
46606: LD_ADDR_EXP 99
46610: PUSH
46611: LD_INT 0
46613: ST_TO_ADDR
// sEarthquake := false ;
46614: LD_ADDR_EXP 101
46618: PUSH
46619: LD_INT 0
46621: ST_TO_ADDR
// sAI := false ;
46622: LD_ADDR_EXP 102
46626: PUSH
46627: LD_INT 0
46629: ST_TO_ADDR
// sCargo := false ;
46630: LD_ADDR_EXP 105
46634: PUSH
46635: LD_INT 0
46637: ST_TO_ADDR
// sDLaser := false ;
46638: LD_ADDR_EXP 106
46642: PUSH
46643: LD_INT 0
46645: ST_TO_ADDR
// sExchange := false ;
46646: LD_ADDR_EXP 107
46650: PUSH
46651: LD_INT 0
46653: ST_TO_ADDR
// sFac := false ;
46654: LD_ADDR_EXP 108
46658: PUSH
46659: LD_INT 0
46661: ST_TO_ADDR
// sPower := false ;
46662: LD_ADDR_EXP 109
46666: PUSH
46667: LD_INT 0
46669: ST_TO_ADDR
// sRandom := false ;
46670: LD_ADDR_EXP 110
46674: PUSH
46675: LD_INT 0
46677: ST_TO_ADDR
// sShield := false ;
46678: LD_ADDR_EXP 111
46682: PUSH
46683: LD_INT 0
46685: ST_TO_ADDR
// sTime := false ;
46686: LD_ADDR_EXP 112
46690: PUSH
46691: LD_INT 0
46693: ST_TO_ADDR
// sTools := false ;
46694: LD_ADDR_EXP 113
46698: PUSH
46699: LD_INT 0
46701: ST_TO_ADDR
// sSold := false ;
46702: LD_ADDR_EXP 78
46706: PUSH
46707: LD_INT 0
46709: ST_TO_ADDR
// sDiff := false ;
46710: LD_ADDR_EXP 79
46714: PUSH
46715: LD_INT 0
46717: ST_TO_ADDR
// sFog := false ;
46718: LD_ADDR_EXP 82
46722: PUSH
46723: LD_INT 0
46725: ST_TO_ADDR
// sReset := false ;
46726: LD_ADDR_EXP 83
46730: PUSH
46731: LD_INT 0
46733: ST_TO_ADDR
// sSun := false ;
46734: LD_ADDR_EXP 84
46738: PUSH
46739: LD_INT 0
46741: ST_TO_ADDR
// sTiger := false ;
46742: LD_ADDR_EXP 80
46746: PUSH
46747: LD_INT 0
46749: ST_TO_ADDR
// sBomb := false ;
46750: LD_ADDR_EXP 81
46754: PUSH
46755: LD_INT 0
46757: ST_TO_ADDR
// sWound := false ;
46758: LD_ADDR_EXP 89
46762: PUSH
46763: LD_INT 0
46765: ST_TO_ADDR
// sBetray := false ;
46766: LD_ADDR_EXP 93
46770: PUSH
46771: LD_INT 0
46773: ST_TO_ADDR
// sContamin := false ;
46774: LD_ADDR_EXP 94
46778: PUSH
46779: LD_INT 0
46781: ST_TO_ADDR
// sOil := false ;
46782: LD_ADDR_EXP 96
46786: PUSH
46787: LD_INT 0
46789: ST_TO_ADDR
// sStu := false ;
46790: LD_ADDR_EXP 100
46794: PUSH
46795: LD_INT 0
46797: ST_TO_ADDR
// sBazooka := false ;
46798: LD_ADDR_EXP 103
46802: PUSH
46803: LD_INT 0
46805: ST_TO_ADDR
// sMortar := false ;
46806: LD_ADDR_EXP 104
46810: PUSH
46811: LD_INT 0
46813: ST_TO_ADDR
// sRanger := false ;
46814: LD_ADDR_EXP 114
46818: PUSH
46819: LD_INT 0
46821: ST_TO_ADDR
// end ;
46822: LD_VAR 0 1
46826: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
46827: LD_INT 0
46829: PPUSH
46830: PPUSH
46831: PPUSH
46832: PPUSH
46833: PPUSH
// result := [ ] ;
46834: LD_ADDR_VAR 0 1
46838: PUSH
46839: EMPTY
46840: ST_TO_ADDR
// if campaign_id = 1 then
46841: LD_OWVAR 69
46845: PUSH
46846: LD_INT 1
46848: EQUAL
46849: IFFALSE 49787
// begin case mission_number of 1 :
46851: LD_OWVAR 70
46855: PUSH
46856: LD_INT 1
46858: DOUBLE
46859: EQUAL
46860: IFTRUE 46864
46862: GO 46928
46864: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
46865: LD_ADDR_VAR 0 1
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 4
46875: PUSH
46876: LD_INT 11
46878: PUSH
46879: LD_INT 12
46881: PUSH
46882: LD_INT 15
46884: PUSH
46885: LD_INT 16
46887: PUSH
46888: LD_INT 22
46890: PUSH
46891: LD_INT 23
46893: PUSH
46894: LD_INT 26
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 101
46910: PUSH
46911: LD_INT 102
46913: PUSH
46914: LD_INT 106
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: ST_TO_ADDR
46926: GO 49785
46928: LD_INT 2
46930: DOUBLE
46931: EQUAL
46932: IFTRUE 46936
46934: GO 47008
46936: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
46937: LD_ADDR_VAR 0 1
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 4
46947: PUSH
46948: LD_INT 11
46950: PUSH
46951: LD_INT 12
46953: PUSH
46954: LD_INT 15
46956: PUSH
46957: LD_INT 16
46959: PUSH
46960: LD_INT 22
46962: PUSH
46963: LD_INT 23
46965: PUSH
46966: LD_INT 26
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 101
46982: PUSH
46983: LD_INT 102
46985: PUSH
46986: LD_INT 105
46988: PUSH
46989: LD_INT 106
46991: PUSH
46992: LD_INT 108
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: ST_TO_ADDR
47006: GO 49785
47008: LD_INT 3
47010: DOUBLE
47011: EQUAL
47012: IFTRUE 47016
47014: GO 47092
47016: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
47017: LD_ADDR_VAR 0 1
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 4
47027: PUSH
47028: LD_INT 5
47030: PUSH
47031: LD_INT 11
47033: PUSH
47034: LD_INT 12
47036: PUSH
47037: LD_INT 15
47039: PUSH
47040: LD_INT 16
47042: PUSH
47043: LD_INT 22
47045: PUSH
47046: LD_INT 26
47048: PUSH
47049: LD_INT 36
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 101
47066: PUSH
47067: LD_INT 102
47069: PUSH
47070: LD_INT 105
47072: PUSH
47073: LD_INT 106
47075: PUSH
47076: LD_INT 108
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: ST_TO_ADDR
47090: GO 49785
47092: LD_INT 4
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47100
47098: GO 47184
47100: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
47101: LD_ADDR_VAR 0 1
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 4
47111: PUSH
47112: LD_INT 5
47114: PUSH
47115: LD_INT 8
47117: PUSH
47118: LD_INT 11
47120: PUSH
47121: LD_INT 12
47123: PUSH
47124: LD_INT 15
47126: PUSH
47127: LD_INT 16
47129: PUSH
47130: LD_INT 22
47132: PUSH
47133: LD_INT 23
47135: PUSH
47136: LD_INT 26
47138: PUSH
47139: LD_INT 36
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 101
47158: PUSH
47159: LD_INT 102
47161: PUSH
47162: LD_INT 105
47164: PUSH
47165: LD_INT 106
47167: PUSH
47168: LD_INT 108
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: ST_TO_ADDR
47182: GO 49785
47184: LD_INT 5
47186: DOUBLE
47187: EQUAL
47188: IFTRUE 47192
47190: GO 47292
47192: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
47193: LD_ADDR_VAR 0 1
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: LD_INT 4
47203: PUSH
47204: LD_INT 5
47206: PUSH
47207: LD_INT 6
47209: PUSH
47210: LD_INT 8
47212: PUSH
47213: LD_INT 11
47215: PUSH
47216: LD_INT 12
47218: PUSH
47219: LD_INT 15
47221: PUSH
47222: LD_INT 16
47224: PUSH
47225: LD_INT 22
47227: PUSH
47228: LD_INT 23
47230: PUSH
47231: LD_INT 25
47233: PUSH
47234: LD_INT 26
47236: PUSH
47237: LD_INT 36
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 101
47258: PUSH
47259: LD_INT 102
47261: PUSH
47262: LD_INT 105
47264: PUSH
47265: LD_INT 106
47267: PUSH
47268: LD_INT 108
47270: PUSH
47271: LD_INT 109
47273: PUSH
47274: LD_INT 112
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: ST_TO_ADDR
47290: GO 49785
47292: LD_INT 6
47294: DOUBLE
47295: EQUAL
47296: IFTRUE 47300
47298: GO 47420
47300: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
47301: LD_ADDR_VAR 0 1
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 4
47311: PUSH
47312: LD_INT 5
47314: PUSH
47315: LD_INT 6
47317: PUSH
47318: LD_INT 8
47320: PUSH
47321: LD_INT 11
47323: PUSH
47324: LD_INT 12
47326: PUSH
47327: LD_INT 15
47329: PUSH
47330: LD_INT 16
47332: PUSH
47333: LD_INT 20
47335: PUSH
47336: LD_INT 21
47338: PUSH
47339: LD_INT 22
47341: PUSH
47342: LD_INT 23
47344: PUSH
47345: LD_INT 25
47347: PUSH
47348: LD_INT 26
47350: PUSH
47351: LD_INT 30
47353: PUSH
47354: LD_INT 31
47356: PUSH
47357: LD_INT 32
47359: PUSH
47360: LD_INT 36
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 101
47386: PUSH
47387: LD_INT 102
47389: PUSH
47390: LD_INT 105
47392: PUSH
47393: LD_INT 106
47395: PUSH
47396: LD_INT 108
47398: PUSH
47399: LD_INT 109
47401: PUSH
47402: LD_INT 112
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: ST_TO_ADDR
47418: GO 49785
47420: LD_INT 7
47422: DOUBLE
47423: EQUAL
47424: IFTRUE 47428
47426: GO 47528
47428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
47429: LD_ADDR_VAR 0 1
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 4
47439: PUSH
47440: LD_INT 5
47442: PUSH
47443: LD_INT 7
47445: PUSH
47446: LD_INT 11
47448: PUSH
47449: LD_INT 12
47451: PUSH
47452: LD_INT 15
47454: PUSH
47455: LD_INT 16
47457: PUSH
47458: LD_INT 20
47460: PUSH
47461: LD_INT 21
47463: PUSH
47464: LD_INT 22
47466: PUSH
47467: LD_INT 23
47469: PUSH
47470: LD_INT 25
47472: PUSH
47473: LD_INT 26
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 101
47494: PUSH
47495: LD_INT 102
47497: PUSH
47498: LD_INT 103
47500: PUSH
47501: LD_INT 105
47503: PUSH
47504: LD_INT 106
47506: PUSH
47507: LD_INT 108
47509: PUSH
47510: LD_INT 112
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: ST_TO_ADDR
47526: GO 49785
47528: LD_INT 8
47530: DOUBLE
47531: EQUAL
47532: IFTRUE 47536
47534: GO 47664
47536: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
47537: LD_ADDR_VAR 0 1
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 4
47547: PUSH
47548: LD_INT 5
47550: PUSH
47551: LD_INT 6
47553: PUSH
47554: LD_INT 7
47556: PUSH
47557: LD_INT 8
47559: PUSH
47560: LD_INT 11
47562: PUSH
47563: LD_INT 12
47565: PUSH
47566: LD_INT 15
47568: PUSH
47569: LD_INT 16
47571: PUSH
47572: LD_INT 20
47574: PUSH
47575: LD_INT 21
47577: PUSH
47578: LD_INT 22
47580: PUSH
47581: LD_INT 23
47583: PUSH
47584: LD_INT 25
47586: PUSH
47587: LD_INT 26
47589: PUSH
47590: LD_INT 30
47592: PUSH
47593: LD_INT 31
47595: PUSH
47596: LD_INT 32
47598: PUSH
47599: LD_INT 36
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 101
47626: PUSH
47627: LD_INT 102
47629: PUSH
47630: LD_INT 103
47632: PUSH
47633: LD_INT 105
47635: PUSH
47636: LD_INT 106
47638: PUSH
47639: LD_INT 108
47641: PUSH
47642: LD_INT 109
47644: PUSH
47645: LD_INT 112
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: ST_TO_ADDR
47662: GO 49785
47664: LD_INT 9
47666: DOUBLE
47667: EQUAL
47668: IFTRUE 47672
47670: GO 47808
47672: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
47673: LD_ADDR_VAR 0 1
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: LD_INT 5
47686: PUSH
47687: LD_INT 6
47689: PUSH
47690: LD_INT 7
47692: PUSH
47693: LD_INT 8
47695: PUSH
47696: LD_INT 11
47698: PUSH
47699: LD_INT 12
47701: PUSH
47702: LD_INT 15
47704: PUSH
47705: LD_INT 16
47707: PUSH
47708: LD_INT 20
47710: PUSH
47711: LD_INT 21
47713: PUSH
47714: LD_INT 22
47716: PUSH
47717: LD_INT 23
47719: PUSH
47720: LD_INT 25
47722: PUSH
47723: LD_INT 26
47725: PUSH
47726: LD_INT 28
47728: PUSH
47729: LD_INT 30
47731: PUSH
47732: LD_INT 31
47734: PUSH
47735: LD_INT 32
47737: PUSH
47738: LD_INT 36
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 101
47766: PUSH
47767: LD_INT 102
47769: PUSH
47770: LD_INT 103
47772: PUSH
47773: LD_INT 105
47775: PUSH
47776: LD_INT 106
47778: PUSH
47779: LD_INT 108
47781: PUSH
47782: LD_INT 109
47784: PUSH
47785: LD_INT 112
47787: PUSH
47788: LD_INT 114
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: ST_TO_ADDR
47806: GO 49785
47808: LD_INT 10
47810: DOUBLE
47811: EQUAL
47812: IFTRUE 47816
47814: GO 48000
47816: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
47817: LD_ADDR_VAR 0 1
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 4
47827: PUSH
47828: LD_INT 5
47830: PUSH
47831: LD_INT 6
47833: PUSH
47834: LD_INT 7
47836: PUSH
47837: LD_INT 8
47839: PUSH
47840: LD_INT 9
47842: PUSH
47843: LD_INT 10
47845: PUSH
47846: LD_INT 11
47848: PUSH
47849: LD_INT 12
47851: PUSH
47852: LD_INT 13
47854: PUSH
47855: LD_INT 14
47857: PUSH
47858: LD_INT 15
47860: PUSH
47861: LD_INT 16
47863: PUSH
47864: LD_INT 17
47866: PUSH
47867: LD_INT 18
47869: PUSH
47870: LD_INT 19
47872: PUSH
47873: LD_INT 20
47875: PUSH
47876: LD_INT 21
47878: PUSH
47879: LD_INT 22
47881: PUSH
47882: LD_INT 23
47884: PUSH
47885: LD_INT 24
47887: PUSH
47888: LD_INT 25
47890: PUSH
47891: LD_INT 26
47893: PUSH
47894: LD_INT 28
47896: PUSH
47897: LD_INT 30
47899: PUSH
47900: LD_INT 31
47902: PUSH
47903: LD_INT 32
47905: PUSH
47906: LD_INT 36
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 101
47942: PUSH
47943: LD_INT 102
47945: PUSH
47946: LD_INT 103
47948: PUSH
47949: LD_INT 104
47951: PUSH
47952: LD_INT 105
47954: PUSH
47955: LD_INT 106
47957: PUSH
47958: LD_INT 107
47960: PUSH
47961: LD_INT 108
47963: PUSH
47964: LD_INT 109
47966: PUSH
47967: LD_INT 110
47969: PUSH
47970: LD_INT 111
47972: PUSH
47973: LD_INT 112
47975: PUSH
47976: LD_INT 114
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: ST_TO_ADDR
47998: GO 49785
48000: LD_INT 11
48002: DOUBLE
48003: EQUAL
48004: IFTRUE 48008
48006: GO 48200
48008: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
48009: LD_ADDR_VAR 0 1
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: LD_INT 4
48022: PUSH
48023: LD_INT 5
48025: PUSH
48026: LD_INT 6
48028: PUSH
48029: LD_INT 7
48031: PUSH
48032: LD_INT 8
48034: PUSH
48035: LD_INT 9
48037: PUSH
48038: LD_INT 10
48040: PUSH
48041: LD_INT 11
48043: PUSH
48044: LD_INT 12
48046: PUSH
48047: LD_INT 13
48049: PUSH
48050: LD_INT 14
48052: PUSH
48053: LD_INT 15
48055: PUSH
48056: LD_INT 16
48058: PUSH
48059: LD_INT 17
48061: PUSH
48062: LD_INT 18
48064: PUSH
48065: LD_INT 19
48067: PUSH
48068: LD_INT 20
48070: PUSH
48071: LD_INT 21
48073: PUSH
48074: LD_INT 22
48076: PUSH
48077: LD_INT 23
48079: PUSH
48080: LD_INT 24
48082: PUSH
48083: LD_INT 25
48085: PUSH
48086: LD_INT 26
48088: PUSH
48089: LD_INT 28
48091: PUSH
48092: LD_INT 30
48094: PUSH
48095: LD_INT 31
48097: PUSH
48098: LD_INT 32
48100: PUSH
48101: LD_INT 34
48103: PUSH
48104: LD_INT 36
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 101
48142: PUSH
48143: LD_INT 102
48145: PUSH
48146: LD_INT 103
48148: PUSH
48149: LD_INT 104
48151: PUSH
48152: LD_INT 105
48154: PUSH
48155: LD_INT 106
48157: PUSH
48158: LD_INT 107
48160: PUSH
48161: LD_INT 108
48163: PUSH
48164: LD_INT 109
48166: PUSH
48167: LD_INT 110
48169: PUSH
48170: LD_INT 111
48172: PUSH
48173: LD_INT 112
48175: PUSH
48176: LD_INT 114
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: ST_TO_ADDR
48198: GO 49785
48200: LD_INT 12
48202: DOUBLE
48203: EQUAL
48204: IFTRUE 48208
48206: GO 48416
48208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
48209: LD_ADDR_VAR 0 1
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 4
48225: PUSH
48226: LD_INT 5
48228: PUSH
48229: LD_INT 6
48231: PUSH
48232: LD_INT 7
48234: PUSH
48235: LD_INT 8
48237: PUSH
48238: LD_INT 9
48240: PUSH
48241: LD_INT 10
48243: PUSH
48244: LD_INT 11
48246: PUSH
48247: LD_INT 12
48249: PUSH
48250: LD_INT 13
48252: PUSH
48253: LD_INT 14
48255: PUSH
48256: LD_INT 15
48258: PUSH
48259: LD_INT 16
48261: PUSH
48262: LD_INT 17
48264: PUSH
48265: LD_INT 18
48267: PUSH
48268: LD_INT 19
48270: PUSH
48271: LD_INT 20
48273: PUSH
48274: LD_INT 21
48276: PUSH
48277: LD_INT 22
48279: PUSH
48280: LD_INT 23
48282: PUSH
48283: LD_INT 24
48285: PUSH
48286: LD_INT 25
48288: PUSH
48289: LD_INT 26
48291: PUSH
48292: LD_INT 27
48294: PUSH
48295: LD_INT 28
48297: PUSH
48298: LD_INT 30
48300: PUSH
48301: LD_INT 31
48303: PUSH
48304: LD_INT 32
48306: PUSH
48307: LD_INT 33
48309: PUSH
48310: LD_INT 34
48312: PUSH
48313: LD_INT 36
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 101
48354: PUSH
48355: LD_INT 102
48357: PUSH
48358: LD_INT 103
48360: PUSH
48361: LD_INT 104
48363: PUSH
48364: LD_INT 105
48366: PUSH
48367: LD_INT 106
48369: PUSH
48370: LD_INT 107
48372: PUSH
48373: LD_INT 108
48375: PUSH
48376: LD_INT 109
48378: PUSH
48379: LD_INT 110
48381: PUSH
48382: LD_INT 111
48384: PUSH
48385: LD_INT 112
48387: PUSH
48388: LD_INT 113
48390: PUSH
48391: LD_INT 114
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: ST_TO_ADDR
48414: GO 49785
48416: LD_INT 13
48418: DOUBLE
48419: EQUAL
48420: IFTRUE 48424
48422: GO 48620
48424: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
48425: LD_ADDR_VAR 0 1
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: LD_INT 4
48441: PUSH
48442: LD_INT 5
48444: PUSH
48445: LD_INT 8
48447: PUSH
48448: LD_INT 9
48450: PUSH
48451: LD_INT 10
48453: PUSH
48454: LD_INT 11
48456: PUSH
48457: LD_INT 12
48459: PUSH
48460: LD_INT 14
48462: PUSH
48463: LD_INT 15
48465: PUSH
48466: LD_INT 16
48468: PUSH
48469: LD_INT 17
48471: PUSH
48472: LD_INT 18
48474: PUSH
48475: LD_INT 19
48477: PUSH
48478: LD_INT 20
48480: PUSH
48481: LD_INT 21
48483: PUSH
48484: LD_INT 22
48486: PUSH
48487: LD_INT 23
48489: PUSH
48490: LD_INT 24
48492: PUSH
48493: LD_INT 25
48495: PUSH
48496: LD_INT 26
48498: PUSH
48499: LD_INT 27
48501: PUSH
48502: LD_INT 28
48504: PUSH
48505: LD_INT 30
48507: PUSH
48508: LD_INT 31
48510: PUSH
48511: LD_INT 32
48513: PUSH
48514: LD_INT 33
48516: PUSH
48517: LD_INT 34
48519: PUSH
48520: LD_INT 36
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 101
48558: PUSH
48559: LD_INT 102
48561: PUSH
48562: LD_INT 103
48564: PUSH
48565: LD_INT 104
48567: PUSH
48568: LD_INT 105
48570: PUSH
48571: LD_INT 106
48573: PUSH
48574: LD_INT 107
48576: PUSH
48577: LD_INT 108
48579: PUSH
48580: LD_INT 109
48582: PUSH
48583: LD_INT 110
48585: PUSH
48586: LD_INT 111
48588: PUSH
48589: LD_INT 112
48591: PUSH
48592: LD_INT 113
48594: PUSH
48595: LD_INT 114
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: ST_TO_ADDR
48618: GO 49785
48620: LD_INT 14
48622: DOUBLE
48623: EQUAL
48624: IFTRUE 48628
48626: GO 48840
48628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
48629: LD_ADDR_VAR 0 1
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 4
48645: PUSH
48646: LD_INT 5
48648: PUSH
48649: LD_INT 6
48651: PUSH
48652: LD_INT 7
48654: PUSH
48655: LD_INT 8
48657: PUSH
48658: LD_INT 9
48660: PUSH
48661: LD_INT 10
48663: PUSH
48664: LD_INT 11
48666: PUSH
48667: LD_INT 12
48669: PUSH
48670: LD_INT 13
48672: PUSH
48673: LD_INT 14
48675: PUSH
48676: LD_INT 15
48678: PUSH
48679: LD_INT 16
48681: PUSH
48682: LD_INT 17
48684: PUSH
48685: LD_INT 18
48687: PUSH
48688: LD_INT 19
48690: PUSH
48691: LD_INT 20
48693: PUSH
48694: LD_INT 21
48696: PUSH
48697: LD_INT 22
48699: PUSH
48700: LD_INT 23
48702: PUSH
48703: LD_INT 24
48705: PUSH
48706: LD_INT 25
48708: PUSH
48709: LD_INT 26
48711: PUSH
48712: LD_INT 27
48714: PUSH
48715: LD_INT 28
48717: PUSH
48718: LD_INT 29
48720: PUSH
48721: LD_INT 30
48723: PUSH
48724: LD_INT 31
48726: PUSH
48727: LD_INT 32
48729: PUSH
48730: LD_INT 33
48732: PUSH
48733: LD_INT 34
48735: PUSH
48736: LD_INT 36
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 101
48778: PUSH
48779: LD_INT 102
48781: PUSH
48782: LD_INT 103
48784: PUSH
48785: LD_INT 104
48787: PUSH
48788: LD_INT 105
48790: PUSH
48791: LD_INT 106
48793: PUSH
48794: LD_INT 107
48796: PUSH
48797: LD_INT 108
48799: PUSH
48800: LD_INT 109
48802: PUSH
48803: LD_INT 110
48805: PUSH
48806: LD_INT 111
48808: PUSH
48809: LD_INT 112
48811: PUSH
48812: LD_INT 113
48814: PUSH
48815: LD_INT 114
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: ST_TO_ADDR
48838: GO 49785
48840: LD_INT 15
48842: DOUBLE
48843: EQUAL
48844: IFTRUE 48848
48846: GO 49060
48848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
48849: LD_ADDR_VAR 0 1
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 4
48865: PUSH
48866: LD_INT 5
48868: PUSH
48869: LD_INT 6
48871: PUSH
48872: LD_INT 7
48874: PUSH
48875: LD_INT 8
48877: PUSH
48878: LD_INT 9
48880: PUSH
48881: LD_INT 10
48883: PUSH
48884: LD_INT 11
48886: PUSH
48887: LD_INT 12
48889: PUSH
48890: LD_INT 13
48892: PUSH
48893: LD_INT 14
48895: PUSH
48896: LD_INT 15
48898: PUSH
48899: LD_INT 16
48901: PUSH
48902: LD_INT 17
48904: PUSH
48905: LD_INT 18
48907: PUSH
48908: LD_INT 19
48910: PUSH
48911: LD_INT 20
48913: PUSH
48914: LD_INT 21
48916: PUSH
48917: LD_INT 22
48919: PUSH
48920: LD_INT 23
48922: PUSH
48923: LD_INT 24
48925: PUSH
48926: LD_INT 25
48928: PUSH
48929: LD_INT 26
48931: PUSH
48932: LD_INT 27
48934: PUSH
48935: LD_INT 28
48937: PUSH
48938: LD_INT 29
48940: PUSH
48941: LD_INT 30
48943: PUSH
48944: LD_INT 31
48946: PUSH
48947: LD_INT 32
48949: PUSH
48950: LD_INT 33
48952: PUSH
48953: LD_INT 34
48955: PUSH
48956: LD_INT 36
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 101
48998: PUSH
48999: LD_INT 102
49001: PUSH
49002: LD_INT 103
49004: PUSH
49005: LD_INT 104
49007: PUSH
49008: LD_INT 105
49010: PUSH
49011: LD_INT 106
49013: PUSH
49014: LD_INT 107
49016: PUSH
49017: LD_INT 108
49019: PUSH
49020: LD_INT 109
49022: PUSH
49023: LD_INT 110
49025: PUSH
49026: LD_INT 111
49028: PUSH
49029: LD_INT 112
49031: PUSH
49032: LD_INT 113
49034: PUSH
49035: LD_INT 114
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: ST_TO_ADDR
49058: GO 49785
49060: LD_INT 16
49062: DOUBLE
49063: EQUAL
49064: IFTRUE 49068
49066: GO 49192
49068: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
49069: LD_ADDR_VAR 0 1
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 4
49079: PUSH
49080: LD_INT 5
49082: PUSH
49083: LD_INT 7
49085: PUSH
49086: LD_INT 11
49088: PUSH
49089: LD_INT 12
49091: PUSH
49092: LD_INT 15
49094: PUSH
49095: LD_INT 16
49097: PUSH
49098: LD_INT 20
49100: PUSH
49101: LD_INT 21
49103: PUSH
49104: LD_INT 22
49106: PUSH
49107: LD_INT 23
49109: PUSH
49110: LD_INT 25
49112: PUSH
49113: LD_INT 26
49115: PUSH
49116: LD_INT 30
49118: PUSH
49119: LD_INT 31
49121: PUSH
49122: LD_INT 32
49124: PUSH
49125: LD_INT 33
49127: PUSH
49128: LD_INT 34
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 101
49154: PUSH
49155: LD_INT 102
49157: PUSH
49158: LD_INT 103
49160: PUSH
49161: LD_INT 106
49163: PUSH
49164: LD_INT 108
49166: PUSH
49167: LD_INT 112
49169: PUSH
49170: LD_INT 113
49172: PUSH
49173: LD_INT 114
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: ST_TO_ADDR
49190: GO 49785
49192: LD_INT 17
49194: DOUBLE
49195: EQUAL
49196: IFTRUE 49200
49198: GO 49412
49200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
49201: LD_ADDR_VAR 0 1
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: LD_INT 4
49217: PUSH
49218: LD_INT 5
49220: PUSH
49221: LD_INT 6
49223: PUSH
49224: LD_INT 7
49226: PUSH
49227: LD_INT 8
49229: PUSH
49230: LD_INT 9
49232: PUSH
49233: LD_INT 10
49235: PUSH
49236: LD_INT 11
49238: PUSH
49239: LD_INT 12
49241: PUSH
49242: LD_INT 13
49244: PUSH
49245: LD_INT 14
49247: PUSH
49248: LD_INT 15
49250: PUSH
49251: LD_INT 16
49253: PUSH
49254: LD_INT 17
49256: PUSH
49257: LD_INT 18
49259: PUSH
49260: LD_INT 19
49262: PUSH
49263: LD_INT 20
49265: PUSH
49266: LD_INT 21
49268: PUSH
49269: LD_INT 22
49271: PUSH
49272: LD_INT 23
49274: PUSH
49275: LD_INT 24
49277: PUSH
49278: LD_INT 25
49280: PUSH
49281: LD_INT 26
49283: PUSH
49284: LD_INT 27
49286: PUSH
49287: LD_INT 28
49289: PUSH
49290: LD_INT 29
49292: PUSH
49293: LD_INT 30
49295: PUSH
49296: LD_INT 31
49298: PUSH
49299: LD_INT 32
49301: PUSH
49302: LD_INT 33
49304: PUSH
49305: LD_INT 34
49307: PUSH
49308: LD_INT 36
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 101
49350: PUSH
49351: LD_INT 102
49353: PUSH
49354: LD_INT 103
49356: PUSH
49357: LD_INT 104
49359: PUSH
49360: LD_INT 105
49362: PUSH
49363: LD_INT 106
49365: PUSH
49366: LD_INT 107
49368: PUSH
49369: LD_INT 108
49371: PUSH
49372: LD_INT 109
49374: PUSH
49375: LD_INT 110
49377: PUSH
49378: LD_INT 111
49380: PUSH
49381: LD_INT 112
49383: PUSH
49384: LD_INT 113
49386: PUSH
49387: LD_INT 114
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: ST_TO_ADDR
49410: GO 49785
49412: LD_INT 18
49414: DOUBLE
49415: EQUAL
49416: IFTRUE 49420
49418: GO 49556
49420: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
49421: LD_ADDR_VAR 0 1
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 4
49431: PUSH
49432: LD_INT 5
49434: PUSH
49435: LD_INT 7
49437: PUSH
49438: LD_INT 11
49440: PUSH
49441: LD_INT 12
49443: PUSH
49444: LD_INT 15
49446: PUSH
49447: LD_INT 16
49449: PUSH
49450: LD_INT 20
49452: PUSH
49453: LD_INT 21
49455: PUSH
49456: LD_INT 22
49458: PUSH
49459: LD_INT 23
49461: PUSH
49462: LD_INT 25
49464: PUSH
49465: LD_INT 26
49467: PUSH
49468: LD_INT 30
49470: PUSH
49471: LD_INT 31
49473: PUSH
49474: LD_INT 32
49476: PUSH
49477: LD_INT 33
49479: PUSH
49480: LD_INT 34
49482: PUSH
49483: LD_INT 35
49485: PUSH
49486: LD_INT 36
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 101
49514: PUSH
49515: LD_INT 102
49517: PUSH
49518: LD_INT 103
49520: PUSH
49521: LD_INT 106
49523: PUSH
49524: LD_INT 108
49526: PUSH
49527: LD_INT 112
49529: PUSH
49530: LD_INT 113
49532: PUSH
49533: LD_INT 114
49535: PUSH
49536: LD_INT 115
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: ST_TO_ADDR
49554: GO 49785
49556: LD_INT 19
49558: DOUBLE
49559: EQUAL
49560: IFTRUE 49564
49562: GO 49784
49564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
49565: LD_ADDR_VAR 0 1
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: LD_INT 4
49581: PUSH
49582: LD_INT 5
49584: PUSH
49585: LD_INT 6
49587: PUSH
49588: LD_INT 7
49590: PUSH
49591: LD_INT 8
49593: PUSH
49594: LD_INT 9
49596: PUSH
49597: LD_INT 10
49599: PUSH
49600: LD_INT 11
49602: PUSH
49603: LD_INT 12
49605: PUSH
49606: LD_INT 13
49608: PUSH
49609: LD_INT 14
49611: PUSH
49612: LD_INT 15
49614: PUSH
49615: LD_INT 16
49617: PUSH
49618: LD_INT 17
49620: PUSH
49621: LD_INT 18
49623: PUSH
49624: LD_INT 19
49626: PUSH
49627: LD_INT 20
49629: PUSH
49630: LD_INT 21
49632: PUSH
49633: LD_INT 22
49635: PUSH
49636: LD_INT 23
49638: PUSH
49639: LD_INT 24
49641: PUSH
49642: LD_INT 25
49644: PUSH
49645: LD_INT 26
49647: PUSH
49648: LD_INT 27
49650: PUSH
49651: LD_INT 28
49653: PUSH
49654: LD_INT 29
49656: PUSH
49657: LD_INT 30
49659: PUSH
49660: LD_INT 31
49662: PUSH
49663: LD_INT 32
49665: PUSH
49666: LD_INT 33
49668: PUSH
49669: LD_INT 34
49671: PUSH
49672: LD_INT 35
49674: PUSH
49675: LD_INT 36
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 101
49718: PUSH
49719: LD_INT 102
49721: PUSH
49722: LD_INT 103
49724: PUSH
49725: LD_INT 104
49727: PUSH
49728: LD_INT 105
49730: PUSH
49731: LD_INT 106
49733: PUSH
49734: LD_INT 107
49736: PUSH
49737: LD_INT 108
49739: PUSH
49740: LD_INT 109
49742: PUSH
49743: LD_INT 110
49745: PUSH
49746: LD_INT 111
49748: PUSH
49749: LD_INT 112
49751: PUSH
49752: LD_INT 113
49754: PUSH
49755: LD_INT 114
49757: PUSH
49758: LD_INT 115
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: ST_TO_ADDR
49782: GO 49785
49784: POP
// end else
49785: GO 50004
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
49787: LD_ADDR_VAR 0 1
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 4
49803: PUSH
49804: LD_INT 5
49806: PUSH
49807: LD_INT 6
49809: PUSH
49810: LD_INT 7
49812: PUSH
49813: LD_INT 8
49815: PUSH
49816: LD_INT 9
49818: PUSH
49819: LD_INT 10
49821: PUSH
49822: LD_INT 11
49824: PUSH
49825: LD_INT 12
49827: PUSH
49828: LD_INT 13
49830: PUSH
49831: LD_INT 14
49833: PUSH
49834: LD_INT 15
49836: PUSH
49837: LD_INT 16
49839: PUSH
49840: LD_INT 17
49842: PUSH
49843: LD_INT 18
49845: PUSH
49846: LD_INT 19
49848: PUSH
49849: LD_INT 20
49851: PUSH
49852: LD_INT 21
49854: PUSH
49855: LD_INT 22
49857: PUSH
49858: LD_INT 23
49860: PUSH
49861: LD_INT 24
49863: PUSH
49864: LD_INT 25
49866: PUSH
49867: LD_INT 26
49869: PUSH
49870: LD_INT 27
49872: PUSH
49873: LD_INT 28
49875: PUSH
49876: LD_INT 29
49878: PUSH
49879: LD_INT 30
49881: PUSH
49882: LD_INT 31
49884: PUSH
49885: LD_INT 32
49887: PUSH
49888: LD_INT 33
49890: PUSH
49891: LD_INT 34
49893: PUSH
49894: LD_INT 35
49896: PUSH
49897: LD_INT 36
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 101
49940: PUSH
49941: LD_INT 102
49943: PUSH
49944: LD_INT 103
49946: PUSH
49947: LD_INT 104
49949: PUSH
49950: LD_INT 105
49952: PUSH
49953: LD_INT 106
49955: PUSH
49956: LD_INT 107
49958: PUSH
49959: LD_INT 108
49961: PUSH
49962: LD_INT 109
49964: PUSH
49965: LD_INT 110
49967: PUSH
49968: LD_INT 111
49970: PUSH
49971: LD_INT 112
49973: PUSH
49974: LD_INT 113
49976: PUSH
49977: LD_INT 114
49979: PUSH
49980: LD_INT 115
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// if result then
50004: LD_VAR 0 1
50008: IFFALSE 50297
// begin normal :=  ;
50010: LD_ADDR_VAR 0 3
50014: PUSH
50015: LD_STRING 
50017: ST_TO_ADDR
// hardcore :=  ;
50018: LD_ADDR_VAR 0 4
50022: PUSH
50023: LD_STRING 
50025: ST_TO_ADDR
// for i = 1 to normalCounter do
50026: LD_ADDR_VAR 0 5
50030: PUSH
50031: DOUBLE
50032: LD_INT 1
50034: DEC
50035: ST_TO_ADDR
50036: LD_EXP 62
50040: PUSH
50041: FOR_TO
50042: IFFALSE 50143
// begin tmp := 0 ;
50044: LD_ADDR_VAR 0 2
50048: PUSH
50049: LD_STRING 0
50051: ST_TO_ADDR
// if result [ 1 ] then
50052: LD_VAR 0 1
50056: PUSH
50057: LD_INT 1
50059: ARRAY
50060: IFFALSE 50125
// if result [ 1 ] [ 1 ] = i then
50062: LD_VAR 0 1
50066: PUSH
50067: LD_INT 1
50069: ARRAY
50070: PUSH
50071: LD_INT 1
50073: ARRAY
50074: PUSH
50075: LD_VAR 0 5
50079: EQUAL
50080: IFFALSE 50125
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50082: LD_ADDR_VAR 0 1
50086: PUSH
50087: LD_VAR 0 1
50091: PPUSH
50092: LD_INT 1
50094: PPUSH
50095: LD_VAR 0 1
50099: PUSH
50100: LD_INT 1
50102: ARRAY
50103: PPUSH
50104: LD_INT 1
50106: PPUSH
50107: CALL_OW 3
50111: PPUSH
50112: CALL_OW 1
50116: ST_TO_ADDR
// tmp := 1 ;
50117: LD_ADDR_VAR 0 2
50121: PUSH
50122: LD_STRING 1
50124: ST_TO_ADDR
// end ; normal := normal & tmp ;
50125: LD_ADDR_VAR 0 3
50129: PUSH
50130: LD_VAR 0 3
50134: PUSH
50135: LD_VAR 0 2
50139: STR
50140: ST_TO_ADDR
// end ;
50141: GO 50041
50143: POP
50144: POP
// for i = 1 to hardcoreCounter do
50145: LD_ADDR_VAR 0 5
50149: PUSH
50150: DOUBLE
50151: LD_INT 1
50153: DEC
50154: ST_TO_ADDR
50155: LD_EXP 63
50159: PUSH
50160: FOR_TO
50161: IFFALSE 50266
// begin tmp := 0 ;
50163: LD_ADDR_VAR 0 2
50167: PUSH
50168: LD_STRING 0
50170: ST_TO_ADDR
// if result [ 2 ] then
50171: LD_VAR 0 1
50175: PUSH
50176: LD_INT 2
50178: ARRAY
50179: IFFALSE 50248
// if result [ 2 ] [ 1 ] = 100 + i then
50181: LD_VAR 0 1
50185: PUSH
50186: LD_INT 2
50188: ARRAY
50189: PUSH
50190: LD_INT 1
50192: ARRAY
50193: PUSH
50194: LD_INT 100
50196: PUSH
50197: LD_VAR 0 5
50201: PLUS
50202: EQUAL
50203: IFFALSE 50248
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50205: LD_ADDR_VAR 0 1
50209: PUSH
50210: LD_VAR 0 1
50214: PPUSH
50215: LD_INT 2
50217: PPUSH
50218: LD_VAR 0 1
50222: PUSH
50223: LD_INT 2
50225: ARRAY
50226: PPUSH
50227: LD_INT 1
50229: PPUSH
50230: CALL_OW 3
50234: PPUSH
50235: CALL_OW 1
50239: ST_TO_ADDR
// tmp := 1 ;
50240: LD_ADDR_VAR 0 2
50244: PUSH
50245: LD_STRING 1
50247: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50248: LD_ADDR_VAR 0 4
50252: PUSH
50253: LD_VAR 0 4
50257: PUSH
50258: LD_VAR 0 2
50262: STR
50263: ST_TO_ADDR
// end ;
50264: GO 50160
50266: POP
50267: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
50268: LD_STRING getStreamItemsFromMission("
50270: PUSH
50271: LD_VAR 0 3
50275: STR
50276: PUSH
50277: LD_STRING ","
50279: STR
50280: PUSH
50281: LD_VAR 0 4
50285: STR
50286: PUSH
50287: LD_STRING ")
50289: STR
50290: PPUSH
50291: CALL_OW 559
// end else
50295: GO 50304
// ToLua ( getStreamItemsFromMission("","") ) ;
50297: LD_STRING getStreamItemsFromMission("","")
50299: PPUSH
50300: CALL_OW 559
// end ;
50304: LD_VAR 0 1
50308: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
50309: LD_VAR 0 2
50313: PUSH
50314: LD_INT 100
50316: EQUAL
50317: IFFALSE 51266
// begin if not StreamModeActive then
50319: LD_EXP 61
50323: NOT
50324: IFFALSE 50334
// StreamModeActive := true ;
50326: LD_ADDR_EXP 61
50330: PUSH
50331: LD_INT 1
50333: ST_TO_ADDR
// if p3 = 0 then
50334: LD_VAR 0 3
50338: PUSH
50339: LD_INT 0
50341: EQUAL
50342: IFFALSE 50348
// InitStreamMode ;
50344: CALL 46387 0 0
// if p3 = 1 then
50348: LD_VAR 0 3
50352: PUSH
50353: LD_INT 1
50355: EQUAL
50356: IFFALSE 50366
// sRocket := true ;
50358: LD_ADDR_EXP 66
50362: PUSH
50363: LD_INT 1
50365: ST_TO_ADDR
// if p3 = 2 then
50366: LD_VAR 0 3
50370: PUSH
50371: LD_INT 2
50373: EQUAL
50374: IFFALSE 50384
// sSpeed := true ;
50376: LD_ADDR_EXP 65
50380: PUSH
50381: LD_INT 1
50383: ST_TO_ADDR
// if p3 = 3 then
50384: LD_VAR 0 3
50388: PUSH
50389: LD_INT 3
50391: EQUAL
50392: IFFALSE 50402
// sEngine := true ;
50394: LD_ADDR_EXP 67
50398: PUSH
50399: LD_INT 1
50401: ST_TO_ADDR
// if p3 = 4 then
50402: LD_VAR 0 3
50406: PUSH
50407: LD_INT 4
50409: EQUAL
50410: IFFALSE 50420
// sSpec := true ;
50412: LD_ADDR_EXP 64
50416: PUSH
50417: LD_INT 1
50419: ST_TO_ADDR
// if p3 = 5 then
50420: LD_VAR 0 3
50424: PUSH
50425: LD_INT 5
50427: EQUAL
50428: IFFALSE 50438
// sLevel := true ;
50430: LD_ADDR_EXP 68
50434: PUSH
50435: LD_INT 1
50437: ST_TO_ADDR
// if p3 = 6 then
50438: LD_VAR 0 3
50442: PUSH
50443: LD_INT 6
50445: EQUAL
50446: IFFALSE 50456
// sArmoury := true ;
50448: LD_ADDR_EXP 69
50452: PUSH
50453: LD_INT 1
50455: ST_TO_ADDR
// if p3 = 7 then
50456: LD_VAR 0 3
50460: PUSH
50461: LD_INT 7
50463: EQUAL
50464: IFFALSE 50474
// sRadar := true ;
50466: LD_ADDR_EXP 70
50470: PUSH
50471: LD_INT 1
50473: ST_TO_ADDR
// if p3 = 8 then
50474: LD_VAR 0 3
50478: PUSH
50479: LD_INT 8
50481: EQUAL
50482: IFFALSE 50492
// sBunker := true ;
50484: LD_ADDR_EXP 71
50488: PUSH
50489: LD_INT 1
50491: ST_TO_ADDR
// if p3 = 9 then
50492: LD_VAR 0 3
50496: PUSH
50497: LD_INT 9
50499: EQUAL
50500: IFFALSE 50510
// sHack := true ;
50502: LD_ADDR_EXP 72
50506: PUSH
50507: LD_INT 1
50509: ST_TO_ADDR
// if p3 = 10 then
50510: LD_VAR 0 3
50514: PUSH
50515: LD_INT 10
50517: EQUAL
50518: IFFALSE 50528
// sFire := true ;
50520: LD_ADDR_EXP 73
50524: PUSH
50525: LD_INT 1
50527: ST_TO_ADDR
// if p3 = 11 then
50528: LD_VAR 0 3
50532: PUSH
50533: LD_INT 11
50535: EQUAL
50536: IFFALSE 50546
// sRefresh := true ;
50538: LD_ADDR_EXP 74
50542: PUSH
50543: LD_INT 1
50545: ST_TO_ADDR
// if p3 = 12 then
50546: LD_VAR 0 3
50550: PUSH
50551: LD_INT 12
50553: EQUAL
50554: IFFALSE 50564
// sExp := true ;
50556: LD_ADDR_EXP 75
50560: PUSH
50561: LD_INT 1
50563: ST_TO_ADDR
// if p3 = 13 then
50564: LD_VAR 0 3
50568: PUSH
50569: LD_INT 13
50571: EQUAL
50572: IFFALSE 50582
// sDepot := true ;
50574: LD_ADDR_EXP 76
50578: PUSH
50579: LD_INT 1
50581: ST_TO_ADDR
// if p3 = 14 then
50582: LD_VAR 0 3
50586: PUSH
50587: LD_INT 14
50589: EQUAL
50590: IFFALSE 50600
// sFlag := true ;
50592: LD_ADDR_EXP 77
50596: PUSH
50597: LD_INT 1
50599: ST_TO_ADDR
// if p3 = 15 then
50600: LD_VAR 0 3
50604: PUSH
50605: LD_INT 15
50607: EQUAL
50608: IFFALSE 50618
// sKamikadze := true ;
50610: LD_ADDR_EXP 85
50614: PUSH
50615: LD_INT 1
50617: ST_TO_ADDR
// if p3 = 16 then
50618: LD_VAR 0 3
50622: PUSH
50623: LD_INT 16
50625: EQUAL
50626: IFFALSE 50636
// sTroll := true ;
50628: LD_ADDR_EXP 86
50632: PUSH
50633: LD_INT 1
50635: ST_TO_ADDR
// if p3 = 17 then
50636: LD_VAR 0 3
50640: PUSH
50641: LD_INT 17
50643: EQUAL
50644: IFFALSE 50654
// sSlow := true ;
50646: LD_ADDR_EXP 87
50650: PUSH
50651: LD_INT 1
50653: ST_TO_ADDR
// if p3 = 18 then
50654: LD_VAR 0 3
50658: PUSH
50659: LD_INT 18
50661: EQUAL
50662: IFFALSE 50672
// sLack := true ;
50664: LD_ADDR_EXP 88
50668: PUSH
50669: LD_INT 1
50671: ST_TO_ADDR
// if p3 = 19 then
50672: LD_VAR 0 3
50676: PUSH
50677: LD_INT 19
50679: EQUAL
50680: IFFALSE 50690
// sTank := true ;
50682: LD_ADDR_EXP 90
50686: PUSH
50687: LD_INT 1
50689: ST_TO_ADDR
// if p3 = 20 then
50690: LD_VAR 0 3
50694: PUSH
50695: LD_INT 20
50697: EQUAL
50698: IFFALSE 50708
// sRemote := true ;
50700: LD_ADDR_EXP 91
50704: PUSH
50705: LD_INT 1
50707: ST_TO_ADDR
// if p3 = 21 then
50708: LD_VAR 0 3
50712: PUSH
50713: LD_INT 21
50715: EQUAL
50716: IFFALSE 50726
// sPowell := true ;
50718: LD_ADDR_EXP 92
50722: PUSH
50723: LD_INT 1
50725: ST_TO_ADDR
// if p3 = 22 then
50726: LD_VAR 0 3
50730: PUSH
50731: LD_INT 22
50733: EQUAL
50734: IFFALSE 50744
// sTeleport := true ;
50736: LD_ADDR_EXP 95
50740: PUSH
50741: LD_INT 1
50743: ST_TO_ADDR
// if p3 = 23 then
50744: LD_VAR 0 3
50748: PUSH
50749: LD_INT 23
50751: EQUAL
50752: IFFALSE 50762
// sOilTower := true ;
50754: LD_ADDR_EXP 97
50758: PUSH
50759: LD_INT 1
50761: ST_TO_ADDR
// if p3 = 24 then
50762: LD_VAR 0 3
50766: PUSH
50767: LD_INT 24
50769: EQUAL
50770: IFFALSE 50780
// sShovel := true ;
50772: LD_ADDR_EXP 98
50776: PUSH
50777: LD_INT 1
50779: ST_TO_ADDR
// if p3 = 25 then
50780: LD_VAR 0 3
50784: PUSH
50785: LD_INT 25
50787: EQUAL
50788: IFFALSE 50798
// sSheik := true ;
50790: LD_ADDR_EXP 99
50794: PUSH
50795: LD_INT 1
50797: ST_TO_ADDR
// if p3 = 26 then
50798: LD_VAR 0 3
50802: PUSH
50803: LD_INT 26
50805: EQUAL
50806: IFFALSE 50816
// sEarthquake := true ;
50808: LD_ADDR_EXP 101
50812: PUSH
50813: LD_INT 1
50815: ST_TO_ADDR
// if p3 = 27 then
50816: LD_VAR 0 3
50820: PUSH
50821: LD_INT 27
50823: EQUAL
50824: IFFALSE 50834
// sAI := true ;
50826: LD_ADDR_EXP 102
50830: PUSH
50831: LD_INT 1
50833: ST_TO_ADDR
// if p3 = 28 then
50834: LD_VAR 0 3
50838: PUSH
50839: LD_INT 28
50841: EQUAL
50842: IFFALSE 50852
// sCargo := true ;
50844: LD_ADDR_EXP 105
50848: PUSH
50849: LD_INT 1
50851: ST_TO_ADDR
// if p3 = 29 then
50852: LD_VAR 0 3
50856: PUSH
50857: LD_INT 29
50859: EQUAL
50860: IFFALSE 50870
// sDLaser := true ;
50862: LD_ADDR_EXP 106
50866: PUSH
50867: LD_INT 1
50869: ST_TO_ADDR
// if p3 = 30 then
50870: LD_VAR 0 3
50874: PUSH
50875: LD_INT 30
50877: EQUAL
50878: IFFALSE 50888
// sExchange := true ;
50880: LD_ADDR_EXP 107
50884: PUSH
50885: LD_INT 1
50887: ST_TO_ADDR
// if p3 = 31 then
50888: LD_VAR 0 3
50892: PUSH
50893: LD_INT 31
50895: EQUAL
50896: IFFALSE 50906
// sFac := true ;
50898: LD_ADDR_EXP 108
50902: PUSH
50903: LD_INT 1
50905: ST_TO_ADDR
// if p3 = 32 then
50906: LD_VAR 0 3
50910: PUSH
50911: LD_INT 32
50913: EQUAL
50914: IFFALSE 50924
// sPower := true ;
50916: LD_ADDR_EXP 109
50920: PUSH
50921: LD_INT 1
50923: ST_TO_ADDR
// if p3 = 33 then
50924: LD_VAR 0 3
50928: PUSH
50929: LD_INT 33
50931: EQUAL
50932: IFFALSE 50942
// sRandom := true ;
50934: LD_ADDR_EXP 110
50938: PUSH
50939: LD_INT 1
50941: ST_TO_ADDR
// if p3 = 34 then
50942: LD_VAR 0 3
50946: PUSH
50947: LD_INT 34
50949: EQUAL
50950: IFFALSE 50960
// sShield := true ;
50952: LD_ADDR_EXP 111
50956: PUSH
50957: LD_INT 1
50959: ST_TO_ADDR
// if p3 = 35 then
50960: LD_VAR 0 3
50964: PUSH
50965: LD_INT 35
50967: EQUAL
50968: IFFALSE 50978
// sTime := true ;
50970: LD_ADDR_EXP 112
50974: PUSH
50975: LD_INT 1
50977: ST_TO_ADDR
// if p3 = 36 then
50978: LD_VAR 0 3
50982: PUSH
50983: LD_INT 36
50985: EQUAL
50986: IFFALSE 50996
// sTools := true ;
50988: LD_ADDR_EXP 113
50992: PUSH
50993: LD_INT 1
50995: ST_TO_ADDR
// if p3 = 101 then
50996: LD_VAR 0 3
51000: PUSH
51001: LD_INT 101
51003: EQUAL
51004: IFFALSE 51014
// sSold := true ;
51006: LD_ADDR_EXP 78
51010: PUSH
51011: LD_INT 1
51013: ST_TO_ADDR
// if p3 = 102 then
51014: LD_VAR 0 3
51018: PUSH
51019: LD_INT 102
51021: EQUAL
51022: IFFALSE 51032
// sDiff := true ;
51024: LD_ADDR_EXP 79
51028: PUSH
51029: LD_INT 1
51031: ST_TO_ADDR
// if p3 = 103 then
51032: LD_VAR 0 3
51036: PUSH
51037: LD_INT 103
51039: EQUAL
51040: IFFALSE 51050
// sFog := true ;
51042: LD_ADDR_EXP 82
51046: PUSH
51047: LD_INT 1
51049: ST_TO_ADDR
// if p3 = 104 then
51050: LD_VAR 0 3
51054: PUSH
51055: LD_INT 104
51057: EQUAL
51058: IFFALSE 51068
// sReset := true ;
51060: LD_ADDR_EXP 83
51064: PUSH
51065: LD_INT 1
51067: ST_TO_ADDR
// if p3 = 105 then
51068: LD_VAR 0 3
51072: PUSH
51073: LD_INT 105
51075: EQUAL
51076: IFFALSE 51086
// sSun := true ;
51078: LD_ADDR_EXP 84
51082: PUSH
51083: LD_INT 1
51085: ST_TO_ADDR
// if p3 = 106 then
51086: LD_VAR 0 3
51090: PUSH
51091: LD_INT 106
51093: EQUAL
51094: IFFALSE 51104
// sTiger := true ;
51096: LD_ADDR_EXP 80
51100: PUSH
51101: LD_INT 1
51103: ST_TO_ADDR
// if p3 = 107 then
51104: LD_VAR 0 3
51108: PUSH
51109: LD_INT 107
51111: EQUAL
51112: IFFALSE 51122
// sBomb := true ;
51114: LD_ADDR_EXP 81
51118: PUSH
51119: LD_INT 1
51121: ST_TO_ADDR
// if p3 = 108 then
51122: LD_VAR 0 3
51126: PUSH
51127: LD_INT 108
51129: EQUAL
51130: IFFALSE 51140
// sWound := true ;
51132: LD_ADDR_EXP 89
51136: PUSH
51137: LD_INT 1
51139: ST_TO_ADDR
// if p3 = 109 then
51140: LD_VAR 0 3
51144: PUSH
51145: LD_INT 109
51147: EQUAL
51148: IFFALSE 51158
// sBetray := true ;
51150: LD_ADDR_EXP 93
51154: PUSH
51155: LD_INT 1
51157: ST_TO_ADDR
// if p3 = 110 then
51158: LD_VAR 0 3
51162: PUSH
51163: LD_INT 110
51165: EQUAL
51166: IFFALSE 51176
// sContamin := true ;
51168: LD_ADDR_EXP 94
51172: PUSH
51173: LD_INT 1
51175: ST_TO_ADDR
// if p3 = 111 then
51176: LD_VAR 0 3
51180: PUSH
51181: LD_INT 111
51183: EQUAL
51184: IFFALSE 51194
// sOil := true ;
51186: LD_ADDR_EXP 96
51190: PUSH
51191: LD_INT 1
51193: ST_TO_ADDR
// if p3 = 112 then
51194: LD_VAR 0 3
51198: PUSH
51199: LD_INT 112
51201: EQUAL
51202: IFFALSE 51212
// sStu := true ;
51204: LD_ADDR_EXP 100
51208: PUSH
51209: LD_INT 1
51211: ST_TO_ADDR
// if p3 = 113 then
51212: LD_VAR 0 3
51216: PUSH
51217: LD_INT 113
51219: EQUAL
51220: IFFALSE 51230
// sBazooka := true ;
51222: LD_ADDR_EXP 103
51226: PUSH
51227: LD_INT 1
51229: ST_TO_ADDR
// if p3 = 114 then
51230: LD_VAR 0 3
51234: PUSH
51235: LD_INT 114
51237: EQUAL
51238: IFFALSE 51248
// sMortar := true ;
51240: LD_ADDR_EXP 104
51244: PUSH
51245: LD_INT 1
51247: ST_TO_ADDR
// if p3 = 115 then
51248: LD_VAR 0 3
51252: PUSH
51253: LD_INT 115
51255: EQUAL
51256: IFFALSE 51266
// sRanger := true ;
51258: LD_ADDR_EXP 114
51262: PUSH
51263: LD_INT 1
51265: ST_TO_ADDR
// end ; end ;
51266: PPOPN 6
51268: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51269: LD_EXP 61
51273: PUSH
51274: LD_EXP 66
51278: AND
51279: IFFALSE 51403
51281: GO 51283
51283: DISABLE
51284: LD_INT 0
51286: PPUSH
51287: PPUSH
// begin enable ;
51288: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51289: LD_ADDR_VAR 0 2
51293: PUSH
51294: LD_INT 22
51296: PUSH
51297: LD_OWVAR 2
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: LD_INT 34
51311: PUSH
51312: LD_INT 7
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 34
51321: PUSH
51322: LD_INT 45
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 34
51331: PUSH
51332: LD_INT 28
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 34
51341: PUSH
51342: LD_INT 47
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PPUSH
51360: CALL_OW 69
51364: ST_TO_ADDR
// if not tmp then
51365: LD_VAR 0 2
51369: NOT
51370: IFFALSE 51374
// exit ;
51372: GO 51403
// for i in tmp do
51374: LD_ADDR_VAR 0 1
51378: PUSH
51379: LD_VAR 0 2
51383: PUSH
51384: FOR_IN
51385: IFFALSE 51401
// begin SetLives ( i , 0 ) ;
51387: LD_VAR 0 1
51391: PPUSH
51392: LD_INT 0
51394: PPUSH
51395: CALL_OW 234
// end ;
51399: GO 51384
51401: POP
51402: POP
// end ;
51403: PPOPN 2
51405: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51406: LD_EXP 61
51410: PUSH
51411: LD_EXP 67
51415: AND
51416: IFFALSE 51500
51418: GO 51420
51420: DISABLE
51421: LD_INT 0
51423: PPUSH
51424: PPUSH
// begin enable ;
51425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51426: LD_ADDR_VAR 0 2
51430: PUSH
51431: LD_INT 22
51433: PUSH
51434: LD_OWVAR 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 32
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PPUSH
51457: CALL_OW 69
51461: ST_TO_ADDR
// if not tmp then
51462: LD_VAR 0 2
51466: NOT
51467: IFFALSE 51471
// exit ;
51469: GO 51500
// for i in tmp do
51471: LD_ADDR_VAR 0 1
51475: PUSH
51476: LD_VAR 0 2
51480: PUSH
51481: FOR_IN
51482: IFFALSE 51498
// begin SetLives ( i , 0 ) ;
51484: LD_VAR 0 1
51488: PPUSH
51489: LD_INT 0
51491: PPUSH
51492: CALL_OW 234
// end ;
51496: GO 51481
51498: POP
51499: POP
// end ;
51500: PPOPN 2
51502: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51503: LD_EXP 61
51507: PUSH
51508: LD_EXP 64
51512: AND
51513: IFFALSE 51606
51515: GO 51517
51517: DISABLE
51518: LD_INT 0
51520: PPUSH
// begin enable ;
51521: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51522: LD_ADDR_VAR 0 1
51526: PUSH
51527: LD_INT 22
51529: PUSH
51530: LD_OWVAR 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 25
51544: PUSH
51545: LD_INT 5
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 25
51554: PUSH
51555: LD_INT 9
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 25
51564: PUSH
51565: LD_INT 8
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PPUSH
51582: CALL_OW 69
51586: PUSH
51587: FOR_IN
51588: IFFALSE 51604
// begin SetClass ( i , 1 ) ;
51590: LD_VAR 0 1
51594: PPUSH
51595: LD_INT 1
51597: PPUSH
51598: CALL_OW 336
// end ;
51602: GO 51587
51604: POP
51605: POP
// end ;
51606: PPOPN 1
51608: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51609: LD_EXP 61
51613: PUSH
51614: LD_EXP 65
51618: AND
51619: PUSH
51620: LD_OWVAR 65
51624: PUSH
51625: LD_INT 7
51627: LESS
51628: AND
51629: IFFALSE 51643
51631: GO 51633
51633: DISABLE
// begin enable ;
51634: ENABLE
// game_speed := 7 ;
51635: LD_ADDR_OWVAR 65
51639: PUSH
51640: LD_INT 7
51642: ST_TO_ADDR
// end ;
51643: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51644: LD_EXP 61
51648: PUSH
51649: LD_EXP 68
51653: AND
51654: IFFALSE 51856
51656: GO 51658
51658: DISABLE
51659: LD_INT 0
51661: PPUSH
51662: PPUSH
51663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_INT 81
51671: PUSH
51672: LD_OWVAR 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 21
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PPUSH
51695: CALL_OW 69
51699: ST_TO_ADDR
// if not tmp then
51700: LD_VAR 0 3
51704: NOT
51705: IFFALSE 51709
// exit ;
51707: GO 51856
// if tmp > 5 then
51709: LD_VAR 0 3
51713: PUSH
51714: LD_INT 5
51716: GREATER
51717: IFFALSE 51729
// k := 5 else
51719: LD_ADDR_VAR 0 2
51723: PUSH
51724: LD_INT 5
51726: ST_TO_ADDR
51727: GO 51739
// k := tmp ;
51729: LD_ADDR_VAR 0 2
51733: PUSH
51734: LD_VAR 0 3
51738: ST_TO_ADDR
// for i := 1 to k do
51739: LD_ADDR_VAR 0 1
51743: PUSH
51744: DOUBLE
51745: LD_INT 1
51747: DEC
51748: ST_TO_ADDR
51749: LD_VAR 0 2
51753: PUSH
51754: FOR_TO
51755: IFFALSE 51854
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51757: LD_VAR 0 3
51761: PUSH
51762: LD_VAR 0 1
51766: ARRAY
51767: PPUSH
51768: LD_VAR 0 1
51772: PUSH
51773: LD_INT 4
51775: MOD
51776: PUSH
51777: LD_INT 1
51779: PLUS
51780: PPUSH
51781: CALL_OW 259
51785: PUSH
51786: LD_INT 10
51788: LESS
51789: IFFALSE 51852
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51791: LD_VAR 0 3
51795: PUSH
51796: LD_VAR 0 1
51800: ARRAY
51801: PPUSH
51802: LD_VAR 0 1
51806: PUSH
51807: LD_INT 4
51809: MOD
51810: PUSH
51811: LD_INT 1
51813: PLUS
51814: PPUSH
51815: LD_VAR 0 3
51819: PUSH
51820: LD_VAR 0 1
51824: ARRAY
51825: PPUSH
51826: LD_VAR 0 1
51830: PUSH
51831: LD_INT 4
51833: MOD
51834: PUSH
51835: LD_INT 1
51837: PLUS
51838: PPUSH
51839: CALL_OW 259
51843: PUSH
51844: LD_INT 1
51846: PLUS
51847: PPUSH
51848: CALL_OW 237
51852: GO 51754
51854: POP
51855: POP
// end ;
51856: PPOPN 3
51858: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51859: LD_EXP 61
51863: PUSH
51864: LD_EXP 69
51868: AND
51869: IFFALSE 51889
51871: GO 51873
51873: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51874: LD_INT 4
51876: PPUSH
51877: LD_OWVAR 2
51881: PPUSH
51882: LD_INT 0
51884: PPUSH
51885: CALL_OW 324
51889: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51890: LD_EXP 61
51894: PUSH
51895: LD_EXP 98
51899: AND
51900: IFFALSE 51920
51902: GO 51904
51904: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51905: LD_INT 19
51907: PPUSH
51908: LD_OWVAR 2
51912: PPUSH
51913: LD_INT 0
51915: PPUSH
51916: CALL_OW 324
51920: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51921: LD_EXP 61
51925: PUSH
51926: LD_EXP 70
51930: AND
51931: IFFALSE 52033
51933: GO 51935
51935: DISABLE
51936: LD_INT 0
51938: PPUSH
51939: PPUSH
// begin enable ;
51940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51941: LD_ADDR_VAR 0 2
51945: PUSH
51946: LD_INT 22
51948: PUSH
51949: LD_OWVAR 2
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: LD_INT 34
51963: PUSH
51964: LD_INT 11
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 34
51973: PUSH
51974: LD_INT 30
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PPUSH
51990: CALL_OW 69
51994: ST_TO_ADDR
// if not tmp then
51995: LD_VAR 0 2
51999: NOT
52000: IFFALSE 52004
// exit ;
52002: GO 52033
// for i in tmp do
52004: LD_ADDR_VAR 0 1
52008: PUSH
52009: LD_VAR 0 2
52013: PUSH
52014: FOR_IN
52015: IFFALSE 52031
// begin SetLives ( i , 0 ) ;
52017: LD_VAR 0 1
52021: PPUSH
52022: LD_INT 0
52024: PPUSH
52025: CALL_OW 234
// end ;
52029: GO 52014
52031: POP
52032: POP
// end ;
52033: PPOPN 2
52035: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52036: LD_EXP 61
52040: PUSH
52041: LD_EXP 71
52045: AND
52046: IFFALSE 52066
52048: GO 52050
52050: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52051: LD_INT 32
52053: PPUSH
52054: LD_OWVAR 2
52058: PPUSH
52059: LD_INT 0
52061: PPUSH
52062: CALL_OW 324
52066: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52067: LD_EXP 61
52071: PUSH
52072: LD_EXP 72
52076: AND
52077: IFFALSE 52258
52079: GO 52081
52081: DISABLE
52082: LD_INT 0
52084: PPUSH
52085: PPUSH
52086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52087: LD_ADDR_VAR 0 2
52091: PUSH
52092: LD_INT 22
52094: PUSH
52095: LD_OWVAR 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 33
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PPUSH
52118: CALL_OW 69
52122: ST_TO_ADDR
// if not tmp then
52123: LD_VAR 0 2
52127: NOT
52128: IFFALSE 52132
// exit ;
52130: GO 52258
// side := 0 ;
52132: LD_ADDR_VAR 0 3
52136: PUSH
52137: LD_INT 0
52139: ST_TO_ADDR
// for i := 1 to 8 do
52140: LD_ADDR_VAR 0 1
52144: PUSH
52145: DOUBLE
52146: LD_INT 1
52148: DEC
52149: ST_TO_ADDR
52150: LD_INT 8
52152: PUSH
52153: FOR_TO
52154: IFFALSE 52202
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52156: LD_OWVAR 2
52160: PUSH
52161: LD_VAR 0 1
52165: NONEQUAL
52166: PUSH
52167: LD_OWVAR 2
52171: PPUSH
52172: LD_VAR 0 1
52176: PPUSH
52177: CALL_OW 81
52181: PUSH
52182: LD_INT 2
52184: EQUAL
52185: AND
52186: IFFALSE 52200
// begin side := i ;
52188: LD_ADDR_VAR 0 3
52192: PUSH
52193: LD_VAR 0 1
52197: ST_TO_ADDR
// break ;
52198: GO 52202
// end ;
52200: GO 52153
52202: POP
52203: POP
// if not side then
52204: LD_VAR 0 3
52208: NOT
52209: IFFALSE 52213
// exit ;
52211: GO 52258
// for i := 1 to tmp do
52213: LD_ADDR_VAR 0 1
52217: PUSH
52218: DOUBLE
52219: LD_INT 1
52221: DEC
52222: ST_TO_ADDR
52223: LD_VAR 0 2
52227: PUSH
52228: FOR_TO
52229: IFFALSE 52256
// if Prob ( 60 ) then
52231: LD_INT 60
52233: PPUSH
52234: CALL_OW 13
52238: IFFALSE 52254
// SetSide ( i , side ) ;
52240: LD_VAR 0 1
52244: PPUSH
52245: LD_VAR 0 3
52249: PPUSH
52250: CALL_OW 235
52254: GO 52228
52256: POP
52257: POP
// end ;
52258: PPOPN 3
52260: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52261: LD_EXP 61
52265: PUSH
52266: LD_EXP 74
52270: AND
52271: IFFALSE 52390
52273: GO 52275
52275: DISABLE
52276: LD_INT 0
52278: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52279: LD_ADDR_VAR 0 1
52283: PUSH
52284: LD_INT 22
52286: PUSH
52287: LD_OWVAR 2
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 21
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: LD_INT 23
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: PPUSH
52328: CALL_OW 69
52332: PUSH
52333: FOR_IN
52334: IFFALSE 52388
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52336: LD_VAR 0 1
52340: PPUSH
52341: CALL_OW 257
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: LD_INT 4
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: IN
52364: IFFALSE 52386
// SetClass ( un , rand ( 1 , 4 ) ) ;
52366: LD_VAR 0 1
52370: PPUSH
52371: LD_INT 1
52373: PPUSH
52374: LD_INT 4
52376: PPUSH
52377: CALL_OW 12
52381: PPUSH
52382: CALL_OW 336
52386: GO 52333
52388: POP
52389: POP
// end ;
52390: PPOPN 1
52392: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52393: LD_EXP 61
52397: PUSH
52398: LD_EXP 73
52402: AND
52403: IFFALSE 52482
52405: GO 52407
52407: DISABLE
52408: LD_INT 0
52410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52411: LD_ADDR_VAR 0 1
52415: PUSH
52416: LD_INT 22
52418: PUSH
52419: LD_OWVAR 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 21
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PPUSH
52442: CALL_OW 69
52446: ST_TO_ADDR
// if not tmp then
52447: LD_VAR 0 1
52451: NOT
52452: IFFALSE 52456
// exit ;
52454: GO 52482
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52456: LD_VAR 0 1
52460: PUSH
52461: LD_INT 1
52463: PPUSH
52464: LD_VAR 0 1
52468: PPUSH
52469: CALL_OW 12
52473: ARRAY
52474: PPUSH
52475: LD_INT 100
52477: PPUSH
52478: CALL_OW 234
// end ;
52482: PPOPN 1
52484: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52485: LD_EXP 61
52489: PUSH
52490: LD_EXP 75
52494: AND
52495: IFFALSE 52593
52497: GO 52499
52499: DISABLE
52500: LD_INT 0
52502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52503: LD_ADDR_VAR 0 1
52507: PUSH
52508: LD_INT 22
52510: PUSH
52511: LD_OWVAR 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 21
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PPUSH
52534: CALL_OW 69
52538: ST_TO_ADDR
// if not tmp then
52539: LD_VAR 0 1
52543: NOT
52544: IFFALSE 52548
// exit ;
52546: GO 52593
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52548: LD_VAR 0 1
52552: PUSH
52553: LD_INT 1
52555: PPUSH
52556: LD_VAR 0 1
52560: PPUSH
52561: CALL_OW 12
52565: ARRAY
52566: PPUSH
52567: LD_INT 1
52569: PPUSH
52570: LD_INT 4
52572: PPUSH
52573: CALL_OW 12
52577: PPUSH
52578: LD_INT 3000
52580: PPUSH
52581: LD_INT 9000
52583: PPUSH
52584: CALL_OW 12
52588: PPUSH
52589: CALL_OW 492
// end ;
52593: PPOPN 1
52595: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52596: LD_EXP 61
52600: PUSH
52601: LD_EXP 76
52605: AND
52606: IFFALSE 52626
52608: GO 52610
52610: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52611: LD_INT 1
52613: PPUSH
52614: LD_OWVAR 2
52618: PPUSH
52619: LD_INT 0
52621: PPUSH
52622: CALL_OW 324
52626: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52627: LD_EXP 61
52631: PUSH
52632: LD_EXP 77
52636: AND
52637: IFFALSE 52720
52639: GO 52641
52641: DISABLE
52642: LD_INT 0
52644: PPUSH
52645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52646: LD_ADDR_VAR 0 2
52650: PUSH
52651: LD_INT 22
52653: PUSH
52654: LD_OWVAR 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 21
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PPUSH
52677: CALL_OW 69
52681: ST_TO_ADDR
// if not tmp then
52682: LD_VAR 0 2
52686: NOT
52687: IFFALSE 52691
// exit ;
52689: GO 52720
// for i in tmp do
52691: LD_ADDR_VAR 0 1
52695: PUSH
52696: LD_VAR 0 2
52700: PUSH
52701: FOR_IN
52702: IFFALSE 52718
// SetBLevel ( i , 10 ) ;
52704: LD_VAR 0 1
52708: PPUSH
52709: LD_INT 10
52711: PPUSH
52712: CALL_OW 241
52716: GO 52701
52718: POP
52719: POP
// end ;
52720: PPOPN 2
52722: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52723: LD_EXP 61
52727: PUSH
52728: LD_EXP 78
52732: AND
52733: IFFALSE 52844
52735: GO 52737
52737: DISABLE
52738: LD_INT 0
52740: PPUSH
52741: PPUSH
52742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52743: LD_ADDR_VAR 0 3
52747: PUSH
52748: LD_INT 22
52750: PUSH
52751: LD_OWVAR 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 25
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PPUSH
52774: CALL_OW 69
52778: ST_TO_ADDR
// if not tmp then
52779: LD_VAR 0 3
52783: NOT
52784: IFFALSE 52788
// exit ;
52786: GO 52844
// un := tmp [ rand ( 1 , tmp ) ] ;
52788: LD_ADDR_VAR 0 2
52792: PUSH
52793: LD_VAR 0 3
52797: PUSH
52798: LD_INT 1
52800: PPUSH
52801: LD_VAR 0 3
52805: PPUSH
52806: CALL_OW 12
52810: ARRAY
52811: ST_TO_ADDR
// if Crawls ( un ) then
52812: LD_VAR 0 2
52816: PPUSH
52817: CALL_OW 318
52821: IFFALSE 52832
// ComWalk ( un ) ;
52823: LD_VAR 0 2
52827: PPUSH
52828: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52832: LD_VAR 0 2
52836: PPUSH
52837: LD_INT 5
52839: PPUSH
52840: CALL_OW 336
// end ;
52844: PPOPN 3
52846: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
52847: LD_EXP 61
52851: PUSH
52852: LD_EXP 79
52856: AND
52857: PUSH
52858: LD_OWVAR 67
52862: PUSH
52863: LD_INT 3
52865: LESS
52866: AND
52867: IFFALSE 52886
52869: GO 52871
52871: DISABLE
// Difficulty := Difficulty + 1 ;
52872: LD_ADDR_OWVAR 67
52876: PUSH
52877: LD_OWVAR 67
52881: PUSH
52882: LD_INT 1
52884: PLUS
52885: ST_TO_ADDR
52886: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52887: LD_EXP 61
52891: PUSH
52892: LD_EXP 80
52896: AND
52897: IFFALSE 53000
52899: GO 52901
52901: DISABLE
52902: LD_INT 0
52904: PPUSH
// begin for i := 1 to 5 do
52905: LD_ADDR_VAR 0 1
52909: PUSH
52910: DOUBLE
52911: LD_INT 1
52913: DEC
52914: ST_TO_ADDR
52915: LD_INT 5
52917: PUSH
52918: FOR_TO
52919: IFFALSE 52998
// begin uc_nation := nation_nature ;
52921: LD_ADDR_OWVAR 21
52925: PUSH
52926: LD_INT 0
52928: ST_TO_ADDR
// uc_side := 0 ;
52929: LD_ADDR_OWVAR 20
52933: PUSH
52934: LD_INT 0
52936: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52937: LD_ADDR_OWVAR 29
52941: PUSH
52942: LD_INT 12
52944: PUSH
52945: LD_INT 12
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// hc_agressivity := 20 ;
52952: LD_ADDR_OWVAR 35
52956: PUSH
52957: LD_INT 20
52959: ST_TO_ADDR
// hc_class := class_tiger ;
52960: LD_ADDR_OWVAR 28
52964: PUSH
52965: LD_INT 14
52967: ST_TO_ADDR
// hc_gallery :=  ;
52968: LD_ADDR_OWVAR 33
52972: PUSH
52973: LD_STRING 
52975: ST_TO_ADDR
// hc_name :=  ;
52976: LD_ADDR_OWVAR 26
52980: PUSH
52981: LD_STRING 
52983: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52984: CALL_OW 44
52988: PPUSH
52989: LD_INT 0
52991: PPUSH
52992: CALL_OW 51
// end ;
52996: GO 52918
52998: POP
52999: POP
// end ;
53000: PPOPN 1
53002: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53003: LD_EXP 61
53007: PUSH
53008: LD_EXP 81
53012: AND
53013: IFFALSE 53022
53015: GO 53017
53017: DISABLE
// StreamSibBomb ;
53018: CALL 53023 0 0
53022: END
// export function StreamSibBomb ; var i , x , y ; begin
53023: LD_INT 0
53025: PPUSH
53026: PPUSH
53027: PPUSH
53028: PPUSH
// result := false ;
53029: LD_ADDR_VAR 0 1
53033: PUSH
53034: LD_INT 0
53036: ST_TO_ADDR
// for i := 1 to 16 do
53037: LD_ADDR_VAR 0 2
53041: PUSH
53042: DOUBLE
53043: LD_INT 1
53045: DEC
53046: ST_TO_ADDR
53047: LD_INT 16
53049: PUSH
53050: FOR_TO
53051: IFFALSE 53250
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53053: LD_ADDR_VAR 0 3
53057: PUSH
53058: LD_INT 10
53060: PUSH
53061: LD_INT 20
53063: PUSH
53064: LD_INT 30
53066: PUSH
53067: LD_INT 40
53069: PUSH
53070: LD_INT 50
53072: PUSH
53073: LD_INT 60
53075: PUSH
53076: LD_INT 70
53078: PUSH
53079: LD_INT 80
53081: PUSH
53082: LD_INT 90
53084: PUSH
53085: LD_INT 100
53087: PUSH
53088: LD_INT 110
53090: PUSH
53091: LD_INT 120
53093: PUSH
53094: LD_INT 130
53096: PUSH
53097: LD_INT 140
53099: PUSH
53100: LD_INT 150
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PPUSH
53123: LD_INT 15
53125: PPUSH
53126: CALL_OW 12
53130: ARRAY
53131: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53132: LD_ADDR_VAR 0 4
53136: PUSH
53137: LD_INT 10
53139: PUSH
53140: LD_INT 20
53142: PUSH
53143: LD_INT 30
53145: PUSH
53146: LD_INT 40
53148: PUSH
53149: LD_INT 50
53151: PUSH
53152: LD_INT 60
53154: PUSH
53155: LD_INT 70
53157: PUSH
53158: LD_INT 80
53160: PUSH
53161: LD_INT 90
53163: PUSH
53164: LD_INT 100
53166: PUSH
53167: LD_INT 110
53169: PUSH
53170: LD_INT 120
53172: PUSH
53173: LD_INT 130
53175: PUSH
53176: LD_INT 140
53178: PUSH
53179: LD_INT 150
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PPUSH
53202: LD_INT 15
53204: PPUSH
53205: CALL_OW 12
53209: ARRAY
53210: ST_TO_ADDR
// if ValidHex ( x , y ) then
53211: LD_VAR 0 3
53215: PPUSH
53216: LD_VAR 0 4
53220: PPUSH
53221: CALL_OW 488
53225: IFFALSE 53248
// begin result := [ x , y ] ;
53227: LD_ADDR_VAR 0 1
53231: PUSH
53232: LD_VAR 0 3
53236: PUSH
53237: LD_VAR 0 4
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// break ;
53246: GO 53250
// end ; end ;
53248: GO 53050
53250: POP
53251: POP
// if result then
53252: LD_VAR 0 1
53256: IFFALSE 53316
// begin ToLua ( playSibBomb() ) ;
53258: LD_STRING playSibBomb()
53260: PPUSH
53261: CALL_OW 559
// wait ( 0 0$14 ) ;
53265: LD_INT 490
53267: PPUSH
53268: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53272: LD_VAR 0 1
53276: PUSH
53277: LD_INT 1
53279: ARRAY
53280: PPUSH
53281: LD_VAR 0 1
53285: PUSH
53286: LD_INT 2
53288: ARRAY
53289: PPUSH
53290: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53294: LD_VAR 0 1
53298: PUSH
53299: LD_INT 1
53301: ARRAY
53302: PPUSH
53303: LD_VAR 0 1
53307: PUSH
53308: LD_INT 2
53310: ARRAY
53311: PPUSH
53312: CALL_OW 429
// end ; end ;
53316: LD_VAR 0 1
53320: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53321: LD_EXP 61
53325: PUSH
53326: LD_EXP 83
53330: AND
53331: IFFALSE 53343
53333: GO 53335
53335: DISABLE
// YouLost (  ) ;
53336: LD_STRING 
53338: PPUSH
53339: CALL_OW 104
53343: END
// every 0 0$1 trigger StreamModeActive and sFog do
53344: LD_EXP 61
53348: PUSH
53349: LD_EXP 82
53353: AND
53354: IFFALSE 53368
53356: GO 53358
53358: DISABLE
// FogOff ( your_side ) ;
53359: LD_OWVAR 2
53363: PPUSH
53364: CALL_OW 344
53368: END
// every 0 0$1 trigger StreamModeActive and sSun do
53369: LD_EXP 61
53373: PUSH
53374: LD_EXP 84
53378: AND
53379: IFFALSE 53407
53381: GO 53383
53383: DISABLE
// begin solar_recharge_percent := 0 ;
53384: LD_ADDR_OWVAR 79
53388: PUSH
53389: LD_INT 0
53391: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53392: LD_INT 10500
53394: PPUSH
53395: CALL_OW 67
// solar_recharge_percent := 100 ;
53399: LD_ADDR_OWVAR 79
53403: PUSH
53404: LD_INT 100
53406: ST_TO_ADDR
// end ;
53407: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53408: LD_EXP 61
53412: PUSH
53413: LD_EXP 85
53417: AND
53418: IFFALSE 53657
53420: GO 53422
53422: DISABLE
53423: LD_INT 0
53425: PPUSH
53426: PPUSH
53427: PPUSH
// begin tmp := [ ] ;
53428: LD_ADDR_VAR 0 3
53432: PUSH
53433: EMPTY
53434: ST_TO_ADDR
// for i := 1 to 6 do
53435: LD_ADDR_VAR 0 1
53439: PUSH
53440: DOUBLE
53441: LD_INT 1
53443: DEC
53444: ST_TO_ADDR
53445: LD_INT 6
53447: PUSH
53448: FOR_TO
53449: IFFALSE 53554
// begin uc_nation := nation_nature ;
53451: LD_ADDR_OWVAR 21
53455: PUSH
53456: LD_INT 0
53458: ST_TO_ADDR
// uc_side := 0 ;
53459: LD_ADDR_OWVAR 20
53463: PUSH
53464: LD_INT 0
53466: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53467: LD_ADDR_OWVAR 29
53471: PUSH
53472: LD_INT 12
53474: PUSH
53475: LD_INT 12
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: ST_TO_ADDR
// hc_agressivity := 20 ;
53482: LD_ADDR_OWVAR 35
53486: PUSH
53487: LD_INT 20
53489: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53490: LD_ADDR_OWVAR 28
53494: PUSH
53495: LD_INT 17
53497: ST_TO_ADDR
// hc_gallery :=  ;
53498: LD_ADDR_OWVAR 33
53502: PUSH
53503: LD_STRING 
53505: ST_TO_ADDR
// hc_name :=  ;
53506: LD_ADDR_OWVAR 26
53510: PUSH
53511: LD_STRING 
53513: ST_TO_ADDR
// un := CreateHuman ;
53514: LD_ADDR_VAR 0 2
53518: PUSH
53519: CALL_OW 44
53523: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53524: LD_VAR 0 2
53528: PPUSH
53529: LD_INT 1
53531: PPUSH
53532: CALL_OW 51
// tmp := tmp ^ un ;
53536: LD_ADDR_VAR 0 3
53540: PUSH
53541: LD_VAR 0 3
53545: PUSH
53546: LD_VAR 0 2
53550: ADD
53551: ST_TO_ADDR
// end ;
53552: GO 53448
53554: POP
53555: POP
// repeat wait ( 0 0$1 ) ;
53556: LD_INT 35
53558: PPUSH
53559: CALL_OW 67
// for un in tmp do
53563: LD_ADDR_VAR 0 2
53567: PUSH
53568: LD_VAR 0 3
53572: PUSH
53573: FOR_IN
53574: IFFALSE 53648
// begin if IsDead ( un ) then
53576: LD_VAR 0 2
53580: PPUSH
53581: CALL_OW 301
53585: IFFALSE 53605
// begin tmp := tmp diff un ;
53587: LD_ADDR_VAR 0 3
53591: PUSH
53592: LD_VAR 0 3
53596: PUSH
53597: LD_VAR 0 2
53601: DIFF
53602: ST_TO_ADDR
// continue ;
53603: GO 53573
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53605: LD_VAR 0 2
53609: PPUSH
53610: LD_INT 3
53612: PUSH
53613: LD_INT 22
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PPUSH
53627: CALL_OW 69
53631: PPUSH
53632: LD_VAR 0 2
53636: PPUSH
53637: CALL_OW 74
53641: PPUSH
53642: CALL_OW 115
// end ;
53646: GO 53573
53648: POP
53649: POP
// until not tmp ;
53650: LD_VAR 0 3
53654: NOT
53655: IFFALSE 53556
// end ;
53657: PPOPN 3
53659: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53660: LD_EXP 61
53664: PUSH
53665: LD_EXP 86
53669: AND
53670: IFFALSE 53724
53672: GO 53674
53674: DISABLE
// begin ToLua ( displayTroll(); ) ;
53675: LD_STRING displayTroll();
53677: PPUSH
53678: CALL_OW 559
// wait ( 3 3$00 ) ;
53682: LD_INT 6300
53684: PPUSH
53685: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53689: LD_STRING hideTroll();
53691: PPUSH
53692: CALL_OW 559
// wait ( 1 1$00 ) ;
53696: LD_INT 2100
53698: PPUSH
53699: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53703: LD_STRING displayTroll();
53705: PPUSH
53706: CALL_OW 559
// wait ( 1 1$00 ) ;
53710: LD_INT 2100
53712: PPUSH
53713: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53717: LD_STRING hideTroll();
53719: PPUSH
53720: CALL_OW 559
// end ;
53724: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53725: LD_EXP 61
53729: PUSH
53730: LD_EXP 87
53734: AND
53735: IFFALSE 53798
53737: GO 53739
53739: DISABLE
53740: LD_INT 0
53742: PPUSH
// begin p := 0 ;
53743: LD_ADDR_VAR 0 1
53747: PUSH
53748: LD_INT 0
53750: ST_TO_ADDR
// repeat game_speed := 1 ;
53751: LD_ADDR_OWVAR 65
53755: PUSH
53756: LD_INT 1
53758: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53759: LD_INT 35
53761: PPUSH
53762: CALL_OW 67
// p := p + 1 ;
53766: LD_ADDR_VAR 0 1
53770: PUSH
53771: LD_VAR 0 1
53775: PUSH
53776: LD_INT 1
53778: PLUS
53779: ST_TO_ADDR
// until p >= 60 ;
53780: LD_VAR 0 1
53784: PUSH
53785: LD_INT 60
53787: GREATEREQUAL
53788: IFFALSE 53751
// game_speed := 4 ;
53790: LD_ADDR_OWVAR 65
53794: PUSH
53795: LD_INT 4
53797: ST_TO_ADDR
// end ;
53798: PPOPN 1
53800: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53801: LD_EXP 61
53805: PUSH
53806: LD_EXP 88
53810: AND
53811: IFFALSE 53957
53813: GO 53815
53815: DISABLE
53816: LD_INT 0
53818: PPUSH
53819: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53820: LD_ADDR_VAR 0 1
53824: PUSH
53825: LD_INT 22
53827: PUSH
53828: LD_OWVAR 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: LD_INT 30
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 30
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PPUSH
53869: CALL_OW 69
53873: ST_TO_ADDR
// if not depot then
53874: LD_VAR 0 1
53878: NOT
53879: IFFALSE 53883
// exit ;
53881: GO 53957
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53883: LD_ADDR_VAR 0 2
53887: PUSH
53888: LD_VAR 0 1
53892: PUSH
53893: LD_INT 1
53895: PPUSH
53896: LD_VAR 0 1
53900: PPUSH
53901: CALL_OW 12
53905: ARRAY
53906: PPUSH
53907: CALL_OW 274
53911: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53912: LD_VAR 0 2
53916: PPUSH
53917: LD_INT 1
53919: PPUSH
53920: LD_INT 0
53922: PPUSH
53923: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53927: LD_VAR 0 2
53931: PPUSH
53932: LD_INT 2
53934: PPUSH
53935: LD_INT 0
53937: PPUSH
53938: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53942: LD_VAR 0 2
53946: PPUSH
53947: LD_INT 3
53949: PPUSH
53950: LD_INT 0
53952: PPUSH
53953: CALL_OW 277
// end ;
53957: PPOPN 2
53959: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53960: LD_EXP 61
53964: PUSH
53965: LD_EXP 89
53969: AND
53970: IFFALSE 54067
53972: GO 53974
53974: DISABLE
53975: LD_INT 0
53977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53978: LD_ADDR_VAR 0 1
53982: PUSH
53983: LD_INT 22
53985: PUSH
53986: LD_OWVAR 2
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 21
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: LD_INT 23
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: PPUSH
54027: CALL_OW 69
54031: ST_TO_ADDR
// if not tmp then
54032: LD_VAR 0 1
54036: NOT
54037: IFFALSE 54041
// exit ;
54039: GO 54067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54041: LD_VAR 0 1
54045: PUSH
54046: LD_INT 1
54048: PPUSH
54049: LD_VAR 0 1
54053: PPUSH
54054: CALL_OW 12
54058: ARRAY
54059: PPUSH
54060: LD_INT 200
54062: PPUSH
54063: CALL_OW 234
// end ;
54067: PPOPN 1
54069: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54070: LD_EXP 61
54074: PUSH
54075: LD_EXP 90
54079: AND
54080: IFFALSE 54159
54082: GO 54084
54084: DISABLE
54085: LD_INT 0
54087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54088: LD_ADDR_VAR 0 1
54092: PUSH
54093: LD_INT 22
54095: PUSH
54096: LD_OWVAR 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 21
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PPUSH
54119: CALL_OW 69
54123: ST_TO_ADDR
// if not tmp then
54124: LD_VAR 0 1
54128: NOT
54129: IFFALSE 54133
// exit ;
54131: GO 54159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54133: LD_VAR 0 1
54137: PUSH
54138: LD_INT 1
54140: PPUSH
54141: LD_VAR 0 1
54145: PPUSH
54146: CALL_OW 12
54150: ARRAY
54151: PPUSH
54152: LD_INT 60
54154: PPUSH
54155: CALL_OW 234
// end ;
54159: PPOPN 1
54161: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54162: LD_EXP 61
54166: PUSH
54167: LD_EXP 91
54171: AND
54172: IFFALSE 54271
54174: GO 54176
54176: DISABLE
54177: LD_INT 0
54179: PPUSH
54180: PPUSH
// begin enable ;
54181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54182: LD_ADDR_VAR 0 1
54186: PUSH
54187: LD_INT 22
54189: PUSH
54190: LD_OWVAR 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 61
54201: PUSH
54202: EMPTY
54203: LIST
54204: PUSH
54205: LD_INT 33
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: PPUSH
54220: CALL_OW 69
54224: ST_TO_ADDR
// if not tmp then
54225: LD_VAR 0 1
54229: NOT
54230: IFFALSE 54234
// exit ;
54232: GO 54271
// for i in tmp do
54234: LD_ADDR_VAR 0 2
54238: PUSH
54239: LD_VAR 0 1
54243: PUSH
54244: FOR_IN
54245: IFFALSE 54269
// if IsControledBy ( i ) then
54247: LD_VAR 0 2
54251: PPUSH
54252: CALL_OW 312
54256: IFFALSE 54267
// ComUnlink ( i ) ;
54258: LD_VAR 0 2
54262: PPUSH
54263: CALL_OW 136
54267: GO 54244
54269: POP
54270: POP
// end ;
54271: PPOPN 2
54273: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54274: LD_EXP 61
54278: PUSH
54279: LD_EXP 92
54283: AND
54284: IFFALSE 54424
54286: GO 54288
54288: DISABLE
54289: LD_INT 0
54291: PPUSH
54292: PPUSH
// begin ToLua ( displayPowell(); ) ;
54293: LD_STRING displayPowell();
54295: PPUSH
54296: CALL_OW 559
// uc_side := 0 ;
54300: LD_ADDR_OWVAR 20
54304: PUSH
54305: LD_INT 0
54307: ST_TO_ADDR
// uc_nation := 2 ;
54308: LD_ADDR_OWVAR 21
54312: PUSH
54313: LD_INT 2
54315: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54316: LD_ADDR_OWVAR 37
54320: PUSH
54321: LD_INT 14
54323: ST_TO_ADDR
// vc_engine := engine_siberite ;
54324: LD_ADDR_OWVAR 39
54328: PUSH
54329: LD_INT 3
54331: ST_TO_ADDR
// vc_control := control_apeman ;
54332: LD_ADDR_OWVAR 38
54336: PUSH
54337: LD_INT 5
54339: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54340: LD_ADDR_OWVAR 40
54344: PUSH
54345: LD_INT 29
54347: ST_TO_ADDR
// un := CreateVehicle ;
54348: LD_ADDR_VAR 0 2
54352: PUSH
54353: CALL_OW 45
54357: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54358: LD_VAR 0 2
54362: PPUSH
54363: LD_INT 1
54365: PPUSH
54366: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54370: LD_INT 35
54372: PPUSH
54373: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54377: LD_VAR 0 2
54381: PPUSH
54382: LD_INT 22
54384: PUSH
54385: LD_OWVAR 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PPUSH
54394: CALL_OW 69
54398: PPUSH
54399: LD_VAR 0 2
54403: PPUSH
54404: CALL_OW 74
54408: PPUSH
54409: CALL_OW 115
// until IsDead ( un ) ;
54413: LD_VAR 0 2
54417: PPUSH
54418: CALL_OW 301
54422: IFFALSE 54370
// end ;
54424: PPOPN 2
54426: END
// every 0 0$1 trigger StreamModeActive and sStu do
54427: LD_EXP 61
54431: PUSH
54432: LD_EXP 100
54436: AND
54437: IFFALSE 54453
54439: GO 54441
54441: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54442: LD_STRING displayStucuk();
54444: PPUSH
54445: CALL_OW 559
// ResetFog ;
54449: CALL_OW 335
// end ;
54453: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54454: LD_EXP 61
54458: PUSH
54459: LD_EXP 93
54463: AND
54464: IFFALSE 54605
54466: GO 54468
54468: DISABLE
54469: LD_INT 0
54471: PPUSH
54472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54473: LD_ADDR_VAR 0 2
54477: PUSH
54478: LD_INT 22
54480: PUSH
54481: LD_OWVAR 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 21
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PPUSH
54504: CALL_OW 69
54508: ST_TO_ADDR
// if not tmp then
54509: LD_VAR 0 2
54513: NOT
54514: IFFALSE 54518
// exit ;
54516: GO 54605
// un := tmp [ rand ( 1 , tmp ) ] ;
54518: LD_ADDR_VAR 0 1
54522: PUSH
54523: LD_VAR 0 2
54527: PUSH
54528: LD_INT 1
54530: PPUSH
54531: LD_VAR 0 2
54535: PPUSH
54536: CALL_OW 12
54540: ARRAY
54541: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54542: LD_VAR 0 1
54546: PPUSH
54547: LD_INT 0
54549: PPUSH
54550: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54554: LD_VAR 0 1
54558: PPUSH
54559: LD_OWVAR 3
54563: PUSH
54564: LD_VAR 0 1
54568: DIFF
54569: PPUSH
54570: LD_VAR 0 1
54574: PPUSH
54575: CALL_OW 74
54579: PPUSH
54580: CALL_OW 115
// wait ( 0 0$20 ) ;
54584: LD_INT 700
54586: PPUSH
54587: CALL_OW 67
// SetSide ( un , your_side ) ;
54591: LD_VAR 0 1
54595: PPUSH
54596: LD_OWVAR 2
54600: PPUSH
54601: CALL_OW 235
// end ;
54605: PPOPN 2
54607: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54608: LD_EXP 61
54612: PUSH
54613: LD_EXP 94
54617: AND
54618: IFFALSE 54724
54620: GO 54622
54622: DISABLE
54623: LD_INT 0
54625: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54626: LD_ADDR_VAR 0 1
54630: PUSH
54631: LD_INT 22
54633: PUSH
54634: LD_OWVAR 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 30
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 30
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PPUSH
54675: CALL_OW 69
54679: ST_TO_ADDR
// if not depot then
54680: LD_VAR 0 1
54684: NOT
54685: IFFALSE 54689
// exit ;
54687: GO 54724
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54689: LD_VAR 0 1
54693: PUSH
54694: LD_INT 1
54696: ARRAY
54697: PPUSH
54698: CALL_OW 250
54702: PPUSH
54703: LD_VAR 0 1
54707: PUSH
54708: LD_INT 1
54710: ARRAY
54711: PPUSH
54712: CALL_OW 251
54716: PPUSH
54717: LD_INT 70
54719: PPUSH
54720: CALL_OW 495
// end ;
54724: PPOPN 1
54726: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54727: LD_EXP 61
54731: PUSH
54732: LD_EXP 95
54736: AND
54737: IFFALSE 54948
54739: GO 54741
54741: DISABLE
54742: LD_INT 0
54744: PPUSH
54745: PPUSH
54746: PPUSH
54747: PPUSH
54748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54749: LD_ADDR_VAR 0 5
54753: PUSH
54754: LD_INT 22
54756: PUSH
54757: LD_OWVAR 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 21
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PPUSH
54780: CALL_OW 69
54784: ST_TO_ADDR
// if not tmp then
54785: LD_VAR 0 5
54789: NOT
54790: IFFALSE 54794
// exit ;
54792: GO 54948
// for i in tmp do
54794: LD_ADDR_VAR 0 1
54798: PUSH
54799: LD_VAR 0 5
54803: PUSH
54804: FOR_IN
54805: IFFALSE 54946
// begin d := rand ( 0 , 5 ) ;
54807: LD_ADDR_VAR 0 4
54811: PUSH
54812: LD_INT 0
54814: PPUSH
54815: LD_INT 5
54817: PPUSH
54818: CALL_OW 12
54822: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54823: LD_ADDR_VAR 0 2
54827: PUSH
54828: LD_VAR 0 1
54832: PPUSH
54833: CALL_OW 250
54837: PPUSH
54838: LD_VAR 0 4
54842: PPUSH
54843: LD_INT 3
54845: PPUSH
54846: LD_INT 12
54848: PPUSH
54849: CALL_OW 12
54853: PPUSH
54854: CALL_OW 272
54858: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: LD_VAR 0 1
54868: PPUSH
54869: CALL_OW 251
54873: PPUSH
54874: LD_VAR 0 4
54878: PPUSH
54879: LD_INT 3
54881: PPUSH
54882: LD_INT 12
54884: PPUSH
54885: CALL_OW 12
54889: PPUSH
54890: CALL_OW 273
54894: ST_TO_ADDR
// if ValidHex ( x , y ) then
54895: LD_VAR 0 2
54899: PPUSH
54900: LD_VAR 0 3
54904: PPUSH
54905: CALL_OW 488
54909: IFFALSE 54944
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54911: LD_VAR 0 1
54915: PPUSH
54916: LD_VAR 0 2
54920: PPUSH
54921: LD_VAR 0 3
54925: PPUSH
54926: LD_INT 3
54928: PPUSH
54929: LD_INT 6
54931: PPUSH
54932: CALL_OW 12
54936: PPUSH
54937: LD_INT 1
54939: PPUSH
54940: CALL_OW 483
// end ;
54944: GO 54804
54946: POP
54947: POP
// end ;
54948: PPOPN 5
54950: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54951: LD_EXP 61
54955: PUSH
54956: LD_EXP 96
54960: AND
54961: IFFALSE 55055
54963: GO 54965
54965: DISABLE
54966: LD_INT 0
54968: PPUSH
54969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54970: LD_ADDR_VAR 0 2
54974: PUSH
54975: LD_INT 22
54977: PUSH
54978: LD_OWVAR 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 32
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 21
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: PPUSH
55012: CALL_OW 69
55016: ST_TO_ADDR
// if not tmp then
55017: LD_VAR 0 2
55021: NOT
55022: IFFALSE 55026
// exit ;
55024: GO 55055
// for i in tmp do
55026: LD_ADDR_VAR 0 1
55030: PUSH
55031: LD_VAR 0 2
55035: PUSH
55036: FOR_IN
55037: IFFALSE 55053
// SetFuel ( i , 0 ) ;
55039: LD_VAR 0 1
55043: PPUSH
55044: LD_INT 0
55046: PPUSH
55047: CALL_OW 240
55051: GO 55036
55053: POP
55054: POP
// end ;
55055: PPOPN 2
55057: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55058: LD_EXP 61
55062: PUSH
55063: LD_EXP 97
55067: AND
55068: IFFALSE 55134
55070: GO 55072
55072: DISABLE
55073: LD_INT 0
55075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55076: LD_ADDR_VAR 0 1
55080: PUSH
55081: LD_INT 22
55083: PUSH
55084: LD_OWVAR 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 30
55095: PUSH
55096: LD_INT 29
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PPUSH
55107: CALL_OW 69
55111: ST_TO_ADDR
// if not tmp then
55112: LD_VAR 0 1
55116: NOT
55117: IFFALSE 55121
// exit ;
55119: GO 55134
// DestroyUnit ( tmp [ 1 ] ) ;
55121: LD_VAR 0 1
55125: PUSH
55126: LD_INT 1
55128: ARRAY
55129: PPUSH
55130: CALL_OW 65
// end ;
55134: PPOPN 1
55136: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55137: LD_EXP 61
55141: PUSH
55142: LD_EXP 99
55146: AND
55147: IFFALSE 55276
55149: GO 55151
55151: DISABLE
55152: LD_INT 0
55154: PPUSH
// begin uc_side := 0 ;
55155: LD_ADDR_OWVAR 20
55159: PUSH
55160: LD_INT 0
55162: ST_TO_ADDR
// uc_nation := nation_arabian ;
55163: LD_ADDR_OWVAR 21
55167: PUSH
55168: LD_INT 2
55170: ST_TO_ADDR
// hc_gallery :=  ;
55171: LD_ADDR_OWVAR 33
55175: PUSH
55176: LD_STRING 
55178: ST_TO_ADDR
// hc_name :=  ;
55179: LD_ADDR_OWVAR 26
55183: PUSH
55184: LD_STRING 
55186: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55187: LD_INT 1
55189: PPUSH
55190: LD_INT 11
55192: PPUSH
55193: LD_INT 10
55195: PPUSH
55196: CALL_OW 380
// un := CreateHuman ;
55200: LD_ADDR_VAR 0 1
55204: PUSH
55205: CALL_OW 44
55209: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55210: LD_VAR 0 1
55214: PPUSH
55215: LD_INT 1
55217: PPUSH
55218: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55222: LD_INT 35
55224: PPUSH
55225: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55229: LD_VAR 0 1
55233: PPUSH
55234: LD_INT 22
55236: PUSH
55237: LD_OWVAR 2
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PPUSH
55246: CALL_OW 69
55250: PPUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: CALL_OW 74
55260: PPUSH
55261: CALL_OW 115
// until IsDead ( un ) ;
55265: LD_VAR 0 1
55269: PPUSH
55270: CALL_OW 301
55274: IFFALSE 55222
// end ;
55276: PPOPN 1
55278: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55279: LD_EXP 61
55283: PUSH
55284: LD_EXP 101
55288: AND
55289: IFFALSE 55301
55291: GO 55293
55293: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55294: LD_STRING earthquake(getX(game), 0, 32)
55296: PPUSH
55297: CALL_OW 559
55301: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55302: LD_EXP 61
55306: PUSH
55307: LD_EXP 102
55311: AND
55312: IFFALSE 55403
55314: GO 55316
55316: DISABLE
55317: LD_INT 0
55319: PPUSH
// begin enable ;
55320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55321: LD_ADDR_VAR 0 1
55325: PUSH
55326: LD_INT 22
55328: PUSH
55329: LD_OWVAR 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 21
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 33
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: PPUSH
55363: CALL_OW 69
55367: ST_TO_ADDR
// if not tmp then
55368: LD_VAR 0 1
55372: NOT
55373: IFFALSE 55377
// exit ;
55375: GO 55403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55377: LD_VAR 0 1
55381: PUSH
55382: LD_INT 1
55384: PPUSH
55385: LD_VAR 0 1
55389: PPUSH
55390: CALL_OW 12
55394: ARRAY
55395: PPUSH
55396: LD_INT 1
55398: PPUSH
55399: CALL_OW 234
// end ;
55403: PPOPN 1
55405: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55406: LD_EXP 61
55410: PUSH
55411: LD_EXP 103
55415: AND
55416: IFFALSE 55557
55418: GO 55420
55420: DISABLE
55421: LD_INT 0
55423: PPUSH
55424: PPUSH
55425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55426: LD_ADDR_VAR 0 3
55430: PUSH
55431: LD_INT 22
55433: PUSH
55434: LD_OWVAR 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 25
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PPUSH
55457: CALL_OW 69
55461: ST_TO_ADDR
// if not tmp then
55462: LD_VAR 0 3
55466: NOT
55467: IFFALSE 55471
// exit ;
55469: GO 55557
// un := tmp [ rand ( 1 , tmp ) ] ;
55471: LD_ADDR_VAR 0 2
55475: PUSH
55476: LD_VAR 0 3
55480: PUSH
55481: LD_INT 1
55483: PPUSH
55484: LD_VAR 0 3
55488: PPUSH
55489: CALL_OW 12
55493: ARRAY
55494: ST_TO_ADDR
// if Crawls ( un ) then
55495: LD_VAR 0 2
55499: PPUSH
55500: CALL_OW 318
55504: IFFALSE 55515
// ComWalk ( un ) ;
55506: LD_VAR 0 2
55510: PPUSH
55511: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55515: LD_VAR 0 2
55519: PPUSH
55520: LD_INT 9
55522: PPUSH
55523: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55527: LD_INT 28
55529: PPUSH
55530: LD_OWVAR 2
55534: PPUSH
55535: LD_INT 2
55537: PPUSH
55538: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55542: LD_INT 29
55544: PPUSH
55545: LD_OWVAR 2
55549: PPUSH
55550: LD_INT 2
55552: PPUSH
55553: CALL_OW 322
// end ;
55557: PPOPN 3
55559: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55560: LD_EXP 61
55564: PUSH
55565: LD_EXP 104
55569: AND
55570: IFFALSE 55681
55572: GO 55574
55574: DISABLE
55575: LD_INT 0
55577: PPUSH
55578: PPUSH
55579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55580: LD_ADDR_VAR 0 3
55584: PUSH
55585: LD_INT 22
55587: PUSH
55588: LD_OWVAR 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 25
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PPUSH
55611: CALL_OW 69
55615: ST_TO_ADDR
// if not tmp then
55616: LD_VAR 0 3
55620: NOT
55621: IFFALSE 55625
// exit ;
55623: GO 55681
// un := tmp [ rand ( 1 , tmp ) ] ;
55625: LD_ADDR_VAR 0 2
55629: PUSH
55630: LD_VAR 0 3
55634: PUSH
55635: LD_INT 1
55637: PPUSH
55638: LD_VAR 0 3
55642: PPUSH
55643: CALL_OW 12
55647: ARRAY
55648: ST_TO_ADDR
// if Crawls ( un ) then
55649: LD_VAR 0 2
55653: PPUSH
55654: CALL_OW 318
55658: IFFALSE 55669
// ComWalk ( un ) ;
55660: LD_VAR 0 2
55664: PPUSH
55665: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55669: LD_VAR 0 2
55673: PPUSH
55674: LD_INT 8
55676: PPUSH
55677: CALL_OW 336
// end ;
55681: PPOPN 3
55683: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55684: LD_EXP 61
55688: PUSH
55689: LD_EXP 105
55693: AND
55694: IFFALSE 55838
55696: GO 55698
55698: DISABLE
55699: LD_INT 0
55701: PPUSH
55702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55703: LD_ADDR_VAR 0 2
55707: PUSH
55708: LD_INT 22
55710: PUSH
55711: LD_OWVAR 2
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 21
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: LD_INT 34
55735: PUSH
55736: LD_INT 12
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 34
55745: PUSH
55746: LD_INT 51
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 34
55755: PUSH
55756: LD_INT 32
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: PPUSH
55774: CALL_OW 69
55778: ST_TO_ADDR
// if not tmp then
55779: LD_VAR 0 2
55783: NOT
55784: IFFALSE 55788
// exit ;
55786: GO 55838
// for i in tmp do
55788: LD_ADDR_VAR 0 1
55792: PUSH
55793: LD_VAR 0 2
55797: PUSH
55798: FOR_IN
55799: IFFALSE 55836
// if GetCargo ( i , mat_artifact ) = 0 then
55801: LD_VAR 0 1
55805: PPUSH
55806: LD_INT 4
55808: PPUSH
55809: CALL_OW 289
55813: PUSH
55814: LD_INT 0
55816: EQUAL
55817: IFFALSE 55834
// SetCargo ( i , mat_siberit , 100 ) ;
55819: LD_VAR 0 1
55823: PPUSH
55824: LD_INT 3
55826: PPUSH
55827: LD_INT 100
55829: PPUSH
55830: CALL_OW 290
55834: GO 55798
55836: POP
55837: POP
// end ;
55838: PPOPN 2
55840: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55841: LD_EXP 61
55845: PUSH
55846: LD_EXP 106
55850: AND
55851: IFFALSE 56004
55853: GO 55855
55855: DISABLE
55856: LD_INT 0
55858: PPUSH
55859: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55860: LD_ADDR_VAR 0 2
55864: PUSH
55865: LD_INT 22
55867: PUSH
55868: LD_OWVAR 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PPUSH
55877: CALL_OW 69
55881: ST_TO_ADDR
// if not tmp then
55882: LD_VAR 0 2
55886: NOT
55887: IFFALSE 55891
// exit ;
55889: GO 56004
// for i := 1 to 2 do
55891: LD_ADDR_VAR 0 1
55895: PUSH
55896: DOUBLE
55897: LD_INT 1
55899: DEC
55900: ST_TO_ADDR
55901: LD_INT 2
55903: PUSH
55904: FOR_TO
55905: IFFALSE 56002
// begin uc_side := your_side ;
55907: LD_ADDR_OWVAR 20
55911: PUSH
55912: LD_OWVAR 2
55916: ST_TO_ADDR
// uc_nation := nation_american ;
55917: LD_ADDR_OWVAR 21
55921: PUSH
55922: LD_INT 1
55924: ST_TO_ADDR
// vc_chassis := us_morphling ;
55925: LD_ADDR_OWVAR 37
55929: PUSH
55930: LD_INT 5
55932: ST_TO_ADDR
// vc_engine := engine_siberite ;
55933: LD_ADDR_OWVAR 39
55937: PUSH
55938: LD_INT 3
55940: ST_TO_ADDR
// vc_control := control_computer ;
55941: LD_ADDR_OWVAR 38
55945: PUSH
55946: LD_INT 3
55948: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55949: LD_ADDR_OWVAR 40
55953: PUSH
55954: LD_INT 10
55956: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
55957: CALL_OW 45
55961: PPUSH
55962: LD_VAR 0 2
55966: PUSH
55967: LD_INT 1
55969: ARRAY
55970: PPUSH
55971: CALL_OW 250
55975: PPUSH
55976: LD_VAR 0 2
55980: PUSH
55981: LD_INT 1
55983: ARRAY
55984: PPUSH
55985: CALL_OW 251
55989: PPUSH
55990: LD_INT 12
55992: PPUSH
55993: LD_INT 1
55995: PPUSH
55996: CALL_OW 50
// end ;
56000: GO 55904
56002: POP
56003: POP
// end ;
56004: PPOPN 2
56006: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56007: LD_EXP 61
56011: PUSH
56012: LD_EXP 107
56016: AND
56017: IFFALSE 56239
56019: GO 56021
56021: DISABLE
56022: LD_INT 0
56024: PPUSH
56025: PPUSH
56026: PPUSH
56027: PPUSH
56028: PPUSH
56029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56030: LD_ADDR_VAR 0 6
56034: PUSH
56035: LD_INT 22
56037: PUSH
56038: LD_OWVAR 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 21
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 23
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: PPUSH
56079: CALL_OW 69
56083: ST_TO_ADDR
// if not tmp then
56084: LD_VAR 0 6
56088: NOT
56089: IFFALSE 56093
// exit ;
56091: GO 56239
// s1 := rand ( 1 , 4 ) ;
56093: LD_ADDR_VAR 0 2
56097: PUSH
56098: LD_INT 1
56100: PPUSH
56101: LD_INT 4
56103: PPUSH
56104: CALL_OW 12
56108: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56109: LD_ADDR_VAR 0 4
56113: PUSH
56114: LD_VAR 0 6
56118: PUSH
56119: LD_INT 1
56121: ARRAY
56122: PPUSH
56123: LD_VAR 0 2
56127: PPUSH
56128: CALL_OW 259
56132: ST_TO_ADDR
// if s1 = 1 then
56133: LD_VAR 0 2
56137: PUSH
56138: LD_INT 1
56140: EQUAL
56141: IFFALSE 56161
// s2 := rand ( 2 , 4 ) else
56143: LD_ADDR_VAR 0 3
56147: PUSH
56148: LD_INT 2
56150: PPUSH
56151: LD_INT 4
56153: PPUSH
56154: CALL_OW 12
56158: ST_TO_ADDR
56159: GO 56169
// s2 := 1 ;
56161: LD_ADDR_VAR 0 3
56165: PUSH
56166: LD_INT 1
56168: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56169: LD_ADDR_VAR 0 5
56173: PUSH
56174: LD_VAR 0 6
56178: PUSH
56179: LD_INT 1
56181: ARRAY
56182: PPUSH
56183: LD_VAR 0 3
56187: PPUSH
56188: CALL_OW 259
56192: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56193: LD_VAR 0 6
56197: PUSH
56198: LD_INT 1
56200: ARRAY
56201: PPUSH
56202: LD_VAR 0 2
56206: PPUSH
56207: LD_VAR 0 5
56211: PPUSH
56212: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56216: LD_VAR 0 6
56220: PUSH
56221: LD_INT 1
56223: ARRAY
56224: PPUSH
56225: LD_VAR 0 3
56229: PPUSH
56230: LD_VAR 0 4
56234: PPUSH
56235: CALL_OW 237
// end ;
56239: PPOPN 6
56241: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56242: LD_EXP 61
56246: PUSH
56247: LD_EXP 108
56251: AND
56252: IFFALSE 56331
56254: GO 56256
56256: DISABLE
56257: LD_INT 0
56259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56260: LD_ADDR_VAR 0 1
56264: PUSH
56265: LD_INT 22
56267: PUSH
56268: LD_OWVAR 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 30
56279: PUSH
56280: LD_INT 3
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PPUSH
56291: CALL_OW 69
56295: ST_TO_ADDR
// if not tmp then
56296: LD_VAR 0 1
56300: NOT
56301: IFFALSE 56305
// exit ;
56303: GO 56331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56305: LD_VAR 0 1
56309: PUSH
56310: LD_INT 1
56312: PPUSH
56313: LD_VAR 0 1
56317: PPUSH
56318: CALL_OW 12
56322: ARRAY
56323: PPUSH
56324: LD_INT 1
56326: PPUSH
56327: CALL_OW 234
// end ;
56331: PPOPN 1
56333: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56334: LD_EXP 61
56338: PUSH
56339: LD_EXP 109
56343: AND
56344: IFFALSE 56456
56346: GO 56348
56348: DISABLE
56349: LD_INT 0
56351: PPUSH
56352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56353: LD_ADDR_VAR 0 2
56357: PUSH
56358: LD_INT 22
56360: PUSH
56361: LD_OWVAR 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 30
56375: PUSH
56376: LD_INT 27
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 30
56385: PUSH
56386: LD_INT 26
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 30
56395: PUSH
56396: LD_INT 28
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PPUSH
56413: CALL_OW 69
56417: ST_TO_ADDR
// if not tmp then
56418: LD_VAR 0 2
56422: NOT
56423: IFFALSE 56427
// exit ;
56425: GO 56456
// for i in tmp do
56427: LD_ADDR_VAR 0 1
56431: PUSH
56432: LD_VAR 0 2
56436: PUSH
56437: FOR_IN
56438: IFFALSE 56454
// SetLives ( i , 1 ) ;
56440: LD_VAR 0 1
56444: PPUSH
56445: LD_INT 1
56447: PPUSH
56448: CALL_OW 234
56452: GO 56437
56454: POP
56455: POP
// end ;
56456: PPOPN 2
56458: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56459: LD_EXP 61
56463: PUSH
56464: LD_EXP 110
56468: AND
56469: IFFALSE 56743
56471: GO 56473
56473: DISABLE
56474: LD_INT 0
56476: PPUSH
56477: PPUSH
56478: PPUSH
// begin i := rand ( 1 , 7 ) ;
56479: LD_ADDR_VAR 0 1
56483: PUSH
56484: LD_INT 1
56486: PPUSH
56487: LD_INT 7
56489: PPUSH
56490: CALL_OW 12
56494: ST_TO_ADDR
// case i of 1 :
56495: LD_VAR 0 1
56499: PUSH
56500: LD_INT 1
56502: DOUBLE
56503: EQUAL
56504: IFTRUE 56508
56506: GO 56518
56508: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56509: LD_STRING earthquake(getX(game), 0, 32)
56511: PPUSH
56512: CALL_OW 559
56516: GO 56743
56518: LD_INT 2
56520: DOUBLE
56521: EQUAL
56522: IFTRUE 56526
56524: GO 56540
56526: POP
// begin ToLua ( displayStucuk(); ) ;
56527: LD_STRING displayStucuk();
56529: PPUSH
56530: CALL_OW 559
// ResetFog ;
56534: CALL_OW 335
// end ; 3 :
56538: GO 56743
56540: LD_INT 3
56542: DOUBLE
56543: EQUAL
56544: IFTRUE 56548
56546: GO 56652
56548: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56549: LD_ADDR_VAR 0 2
56553: PUSH
56554: LD_INT 22
56556: PUSH
56557: LD_OWVAR 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 25
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PPUSH
56580: CALL_OW 69
56584: ST_TO_ADDR
// if not tmp then
56585: LD_VAR 0 2
56589: NOT
56590: IFFALSE 56594
// exit ;
56592: GO 56743
// un := tmp [ rand ( 1 , tmp ) ] ;
56594: LD_ADDR_VAR 0 3
56598: PUSH
56599: LD_VAR 0 2
56603: PUSH
56604: LD_INT 1
56606: PPUSH
56607: LD_VAR 0 2
56611: PPUSH
56612: CALL_OW 12
56616: ARRAY
56617: ST_TO_ADDR
// if Crawls ( un ) then
56618: LD_VAR 0 3
56622: PPUSH
56623: CALL_OW 318
56627: IFFALSE 56638
// ComWalk ( un ) ;
56629: LD_VAR 0 3
56633: PPUSH
56634: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56638: LD_VAR 0 3
56642: PPUSH
56643: LD_INT 8
56645: PPUSH
56646: CALL_OW 336
// end ; 4 :
56650: GO 56743
56652: LD_INT 4
56654: DOUBLE
56655: EQUAL
56656: IFTRUE 56660
56658: GO 56721
56660: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56661: LD_ADDR_VAR 0 2
56665: PUSH
56666: LD_INT 22
56668: PUSH
56669: LD_OWVAR 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 30
56680: PUSH
56681: LD_INT 29
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PPUSH
56692: CALL_OW 69
56696: ST_TO_ADDR
// if not tmp then
56697: LD_VAR 0 2
56701: NOT
56702: IFFALSE 56706
// exit ;
56704: GO 56743
// DestroyUnit ( tmp [ 1 ] ) ;
56706: LD_VAR 0 2
56710: PUSH
56711: LD_INT 1
56713: ARRAY
56714: PPUSH
56715: CALL_OW 65
// end ; 5 .. 7 :
56719: GO 56743
56721: LD_INT 5
56723: DOUBLE
56724: GREATEREQUAL
56725: IFFALSE 56733
56727: LD_INT 7
56729: DOUBLE
56730: LESSEQUAL
56731: IFTRUE 56735
56733: GO 56742
56735: POP
// StreamSibBomb ; end ;
56736: CALL 53023 0 0
56740: GO 56743
56742: POP
// end ;
56743: PPOPN 3
56745: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56746: LD_EXP 61
56750: PUSH
56751: LD_EXP 111
56755: AND
56756: IFFALSE 56912
56758: GO 56760
56760: DISABLE
56761: LD_INT 0
56763: PPUSH
56764: PPUSH
56765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56766: LD_ADDR_VAR 0 2
56770: PUSH
56771: LD_INT 81
56773: PUSH
56774: LD_OWVAR 2
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: LD_INT 21
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 21
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PPUSH
56815: CALL_OW 69
56819: ST_TO_ADDR
// if not tmp then
56820: LD_VAR 0 2
56824: NOT
56825: IFFALSE 56829
// exit ;
56827: GO 56912
// p := 0 ;
56829: LD_ADDR_VAR 0 3
56833: PUSH
56834: LD_INT 0
56836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56837: LD_INT 35
56839: PPUSH
56840: CALL_OW 67
// p := p + 1 ;
56844: LD_ADDR_VAR 0 3
56848: PUSH
56849: LD_VAR 0 3
56853: PUSH
56854: LD_INT 1
56856: PLUS
56857: ST_TO_ADDR
// for i in tmp do
56858: LD_ADDR_VAR 0 1
56862: PUSH
56863: LD_VAR 0 2
56867: PUSH
56868: FOR_IN
56869: IFFALSE 56900
// if GetLives ( i ) < 1000 then
56871: LD_VAR 0 1
56875: PPUSH
56876: CALL_OW 256
56880: PUSH
56881: LD_INT 1000
56883: LESS
56884: IFFALSE 56898
// SetLives ( i , 1000 ) ;
56886: LD_VAR 0 1
56890: PPUSH
56891: LD_INT 1000
56893: PPUSH
56894: CALL_OW 234
56898: GO 56868
56900: POP
56901: POP
// until p > 20 ;
56902: LD_VAR 0 3
56906: PUSH
56907: LD_INT 20
56909: GREATER
56910: IFFALSE 56837
// end ;
56912: PPOPN 3
56914: END
// every 0 0$1 trigger StreamModeActive and sTime do
56915: LD_EXP 61
56919: PUSH
56920: LD_EXP 112
56924: AND
56925: IFFALSE 56960
56927: GO 56929
56929: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56930: LD_INT 28
56932: PPUSH
56933: LD_OWVAR 2
56937: PPUSH
56938: LD_INT 2
56940: PPUSH
56941: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56945: LD_INT 30
56947: PPUSH
56948: LD_OWVAR 2
56952: PPUSH
56953: LD_INT 2
56955: PPUSH
56956: CALL_OW 322
// end ;
56960: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56961: LD_EXP 61
56965: PUSH
56966: LD_EXP 113
56970: AND
56971: IFFALSE 57092
56973: GO 56975
56975: DISABLE
56976: LD_INT 0
56978: PPUSH
56979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56980: LD_ADDR_VAR 0 2
56984: PUSH
56985: LD_INT 22
56987: PUSH
56988: LD_OWVAR 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 21
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: LD_INT 23
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: PPUSH
57029: CALL_OW 69
57033: ST_TO_ADDR
// if not tmp then
57034: LD_VAR 0 2
57038: NOT
57039: IFFALSE 57043
// exit ;
57041: GO 57092
// for i in tmp do
57043: LD_ADDR_VAR 0 1
57047: PUSH
57048: LD_VAR 0 2
57052: PUSH
57053: FOR_IN
57054: IFFALSE 57090
// begin if Crawls ( i ) then
57056: LD_VAR 0 1
57060: PPUSH
57061: CALL_OW 318
57065: IFFALSE 57076
// ComWalk ( i ) ;
57067: LD_VAR 0 1
57071: PPUSH
57072: CALL_OW 138
// SetClass ( i , 2 ) ;
57076: LD_VAR 0 1
57080: PPUSH
57081: LD_INT 2
57083: PPUSH
57084: CALL_OW 336
// end ;
57088: GO 57053
57090: POP
57091: POP
// end ;
57092: PPOPN 2
57094: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57095: LD_EXP 61
57099: PUSH
57100: LD_EXP 114
57104: AND
57105: IFFALSE 57386
57107: GO 57109
57109: DISABLE
57110: LD_INT 0
57112: PPUSH
57113: PPUSH
57114: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57115: LD_OWVAR 2
57119: PPUSH
57120: LD_INT 9
57122: PPUSH
57123: LD_INT 1
57125: PPUSH
57126: LD_INT 1
57128: PPUSH
57129: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57133: LD_INT 9
57135: PPUSH
57136: LD_OWVAR 2
57140: PPUSH
57141: CALL_OW 343
// uc_side := 9 ;
57145: LD_ADDR_OWVAR 20
57149: PUSH
57150: LD_INT 9
57152: ST_TO_ADDR
// uc_nation := 2 ;
57153: LD_ADDR_OWVAR 21
57157: PUSH
57158: LD_INT 2
57160: ST_TO_ADDR
// hc_name := Dark Warrior ;
57161: LD_ADDR_OWVAR 26
57165: PUSH
57166: LD_STRING Dark Warrior
57168: ST_TO_ADDR
// hc_gallery :=  ;
57169: LD_ADDR_OWVAR 33
57173: PUSH
57174: LD_STRING 
57176: ST_TO_ADDR
// hc_noskilllimit := true ;
57177: LD_ADDR_OWVAR 76
57181: PUSH
57182: LD_INT 1
57184: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57185: LD_ADDR_OWVAR 31
57189: PUSH
57190: LD_INT 30
57192: PUSH
57193: LD_INT 30
57195: PUSH
57196: LD_INT 30
57198: PUSH
57199: LD_INT 30
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: ST_TO_ADDR
// un := CreateHuman ;
57208: LD_ADDR_VAR 0 3
57212: PUSH
57213: CALL_OW 44
57217: ST_TO_ADDR
// hc_noskilllimit := false ;
57218: LD_ADDR_OWVAR 76
57222: PUSH
57223: LD_INT 0
57225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57226: LD_VAR 0 3
57230: PPUSH
57231: LD_INT 1
57233: PPUSH
57234: CALL_OW 51
// p := 0 ;
57238: LD_ADDR_VAR 0 2
57242: PUSH
57243: LD_INT 0
57245: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57246: LD_INT 35
57248: PPUSH
57249: CALL_OW 67
// p := p + 1 ;
57253: LD_ADDR_VAR 0 2
57257: PUSH
57258: LD_VAR 0 2
57262: PUSH
57263: LD_INT 1
57265: PLUS
57266: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57267: LD_VAR 0 3
57271: PPUSH
57272: CALL_OW 256
57276: PUSH
57277: LD_INT 1000
57279: LESS
57280: IFFALSE 57294
// SetLives ( un , 1000 ) ;
57282: LD_VAR 0 3
57286: PPUSH
57287: LD_INT 1000
57289: PPUSH
57290: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57294: LD_VAR 0 3
57298: PPUSH
57299: LD_INT 81
57301: PUSH
57302: LD_OWVAR 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 91
57313: PUSH
57314: LD_VAR 0 3
57318: PUSH
57319: LD_INT 30
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PPUSH
57331: CALL_OW 69
57335: PPUSH
57336: LD_VAR 0 3
57340: PPUSH
57341: CALL_OW 74
57345: PPUSH
57346: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
57350: LD_VAR 0 2
57354: PUSH
57355: LD_INT 60
57357: GREATER
57358: PUSH
57359: LD_VAR 0 3
57363: PPUSH
57364: CALL_OW 301
57368: OR
57369: IFFALSE 57246
// if un then
57371: LD_VAR 0 3
57375: IFFALSE 57386
// RemoveUnit ( un ) ;
57377: LD_VAR 0 3
57381: PPUSH
57382: CALL_OW 64
// end ; end_of_file
57386: PPOPN 3
57388: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57389: LD_INT 0
57391: PPUSH
57392: PPUSH
57393: PPUSH
57394: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57395: LD_VAR 0 1
57399: PPUSH
57400: CALL_OW 264
57404: PUSH
57405: LD_EXP 52
57409: EQUAL
57410: IFFALSE 57482
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57412: LD_INT 68
57414: PPUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: CALL_OW 255
57424: PPUSH
57425: CALL_OW 321
57429: PUSH
57430: LD_INT 2
57432: EQUAL
57433: IFFALSE 57445
// eff := 70 else
57435: LD_ADDR_VAR 0 4
57439: PUSH
57440: LD_INT 70
57442: ST_TO_ADDR
57443: GO 57453
// eff := 30 ;
57445: LD_ADDR_VAR 0 4
57449: PUSH
57450: LD_INT 30
57452: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57453: LD_VAR 0 1
57457: PPUSH
57458: CALL_OW 250
57462: PPUSH
57463: LD_VAR 0 1
57467: PPUSH
57468: CALL_OW 251
57472: PPUSH
57473: LD_VAR 0 4
57477: PPUSH
57478: CALL_OW 495
// end ; end ;
57482: LD_VAR 0 2
57486: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57487: LD_INT 0
57489: PPUSH
// end ;
57490: LD_VAR 0 4
57494: RET
// export function SOS_Command ( cmd ) ; begin
57495: LD_INT 0
57497: PPUSH
// end ;
57498: LD_VAR 0 2
57502: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57503: LD_VAR 0 1
57507: PUSH
57508: LD_INT 255
57510: EQUAL
57511: PUSH
57512: LD_VAR 0 2
57516: PPUSH
57517: CALL_OW 264
57521: PUSH
57522: LD_INT 14
57524: PUSH
57525: LD_INT 53
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: IN
57532: AND
57533: PUSH
57534: LD_VAR 0 4
57538: PPUSH
57539: LD_VAR 0 5
57543: PPUSH
57544: CALL_OW 488
57548: AND
57549: IFFALSE 57573
// CutTreeXYR ( unit , x , y , 12 ) ;
57551: LD_VAR 0 2
57555: PPUSH
57556: LD_VAR 0 4
57560: PPUSH
57561: LD_VAR 0 5
57565: PPUSH
57566: LD_INT 12
57568: PPUSH
57569: CALL 57576 0 4
// end ;
57573: PPOPN 5
57575: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57576: LD_INT 0
57578: PPUSH
57579: PPUSH
57580: PPUSH
57581: PPUSH
57582: PPUSH
57583: PPUSH
57584: PPUSH
57585: PPUSH
57586: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57587: LD_VAR 0 1
57591: NOT
57592: PUSH
57593: LD_VAR 0 2
57597: PPUSH
57598: LD_VAR 0 3
57602: PPUSH
57603: CALL_OW 488
57607: NOT
57608: OR
57609: PUSH
57610: LD_VAR 0 4
57614: NOT
57615: OR
57616: IFFALSE 57620
// exit ;
57618: GO 57960
// list := [ ] ;
57620: LD_ADDR_VAR 0 13
57624: PUSH
57625: EMPTY
57626: ST_TO_ADDR
// if x - r < 0 then
57627: LD_VAR 0 2
57631: PUSH
57632: LD_VAR 0 4
57636: MINUS
57637: PUSH
57638: LD_INT 0
57640: LESS
57641: IFFALSE 57653
// min_x := 0 else
57643: LD_ADDR_VAR 0 7
57647: PUSH
57648: LD_INT 0
57650: ST_TO_ADDR
57651: GO 57669
// min_x := x - r ;
57653: LD_ADDR_VAR 0 7
57657: PUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_VAR 0 4
57667: MINUS
57668: ST_TO_ADDR
// if y - r < 0 then
57669: LD_VAR 0 3
57673: PUSH
57674: LD_VAR 0 4
57678: MINUS
57679: PUSH
57680: LD_INT 0
57682: LESS
57683: IFFALSE 57695
// min_y := 0 else
57685: LD_ADDR_VAR 0 8
57689: PUSH
57690: LD_INT 0
57692: ST_TO_ADDR
57693: GO 57711
// min_y := y - r ;
57695: LD_ADDR_VAR 0 8
57699: PUSH
57700: LD_VAR 0 3
57704: PUSH
57705: LD_VAR 0 4
57709: MINUS
57710: ST_TO_ADDR
// max_x := x + r ;
57711: LD_ADDR_VAR 0 9
57715: PUSH
57716: LD_VAR 0 2
57720: PUSH
57721: LD_VAR 0 4
57725: PLUS
57726: ST_TO_ADDR
// max_y := y + r ;
57727: LD_ADDR_VAR 0 10
57731: PUSH
57732: LD_VAR 0 3
57736: PUSH
57737: LD_VAR 0 4
57741: PLUS
57742: ST_TO_ADDR
// for _x = min_x to max_x do
57743: LD_ADDR_VAR 0 11
57747: PUSH
57748: DOUBLE
57749: LD_VAR 0 7
57753: DEC
57754: ST_TO_ADDR
57755: LD_VAR 0 9
57759: PUSH
57760: FOR_TO
57761: IFFALSE 57878
// for _y = min_y to max_y do
57763: LD_ADDR_VAR 0 12
57767: PUSH
57768: DOUBLE
57769: LD_VAR 0 8
57773: DEC
57774: ST_TO_ADDR
57775: LD_VAR 0 10
57779: PUSH
57780: FOR_TO
57781: IFFALSE 57874
// begin if not ValidHex ( _x , _y ) then
57783: LD_VAR 0 11
57787: PPUSH
57788: LD_VAR 0 12
57792: PPUSH
57793: CALL_OW 488
57797: NOT
57798: IFFALSE 57802
// continue ;
57800: GO 57780
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57802: LD_VAR 0 11
57806: PPUSH
57807: LD_VAR 0 12
57811: PPUSH
57812: CALL_OW 351
57816: PUSH
57817: LD_VAR 0 11
57821: PPUSH
57822: LD_VAR 0 12
57826: PPUSH
57827: CALL_OW 554
57831: AND
57832: IFFALSE 57872
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57834: LD_ADDR_VAR 0 13
57838: PUSH
57839: LD_VAR 0 13
57843: PPUSH
57844: LD_VAR 0 13
57848: PUSH
57849: LD_INT 1
57851: PLUS
57852: PPUSH
57853: LD_VAR 0 11
57857: PUSH
57858: LD_VAR 0 12
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PPUSH
57867: CALL_OW 2
57871: ST_TO_ADDR
// end ;
57872: GO 57780
57874: POP
57875: POP
57876: GO 57760
57878: POP
57879: POP
// if not list then
57880: LD_VAR 0 13
57884: NOT
57885: IFFALSE 57889
// exit ;
57887: GO 57960
// for i in list do
57889: LD_ADDR_VAR 0 6
57893: PUSH
57894: LD_VAR 0 13
57898: PUSH
57899: FOR_IN
57900: IFFALSE 57958
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57902: LD_VAR 0 1
57906: PPUSH
57907: LD_STRING M
57909: PUSH
57910: LD_VAR 0 6
57914: PUSH
57915: LD_INT 1
57917: ARRAY
57918: PUSH
57919: LD_VAR 0 6
57923: PUSH
57924: LD_INT 2
57926: ARRAY
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: PUSH
57949: EMPTY
57950: LIST
57951: PPUSH
57952: CALL_OW 447
57956: GO 57899
57958: POP
57959: POP
// end ;
57960: LD_VAR 0 5
57964: RET
