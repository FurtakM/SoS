// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 8802 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 73880 0 9
// Action ;
  79: CALL 14830 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 39723 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 39723 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 39723 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 39723 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 39723 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 39723 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 39723 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 77191 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 39723 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 39723 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 77191 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 39723 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 39723 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 77191 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 39723 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 77191 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 39723 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 77191 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 39723 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 77191 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 39723 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 77191 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 39723 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 77191 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 77191 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 47829 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2815
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2650
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: NOT
2598: IFFALSE 2626
// begin bc_type := b_lab_full ;
2600: LD_ADDR_OWVAR 42
2604: PUSH
2605: LD_INT 8
2607: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2608: LD_ADDR_OWVAR 44
2612: PUSH
2613: LD_INT 10
2615: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2616: LD_ADDR_OWVAR 45
2620: PUSH
2621: LD_INT 15
2623: ST_TO_ADDR
// end else
2624: GO 2650
// begin bc_type := b_lab_half ;
2626: LD_ADDR_OWVAR 42
2630: PUSH
2631: LD_INT 7
2633: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2634: LD_ADDR_OWVAR 44
2638: PUSH
2639: LD_INT 10
2641: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2642: LD_ADDR_OWVAR 45
2646: PUSH
2647: LD_INT 9
2649: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2650: LD_OWVAR 42
2654: PUSH
2655: LD_INT 2
2657: EQUAL
2658: IFFALSE 2668
// bc_type := b_factory ;
2660: LD_ADDR_OWVAR 42
2664: PUSH
2665: LD_INT 3
2667: ST_TO_ADDR
// if bc_type = b_depot then
2668: LD_OWVAR 42
2672: PUSH
2673: LD_INT 0
2675: EQUAL
2676: IFFALSE 2725
// begin bc_type := b_warehouse ;
2678: LD_ADDR_OWVAR 42
2682: PUSH
2683: LD_INT 1
2685: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2686: LD_ADDR_EXP 31
2690: PUSH
2691: LD_VAR 0 3
2695: PUSH
2696: LD_INT 2
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 3
2704: PUSH
2705: LD_INT 3
2707: ARRAY
2708: PPUSH
2709: LD_VAR 0 3
2713: PUSH
2714: LD_INT 4
2716: ARRAY
2717: PPUSH
2718: CALL_OW 47
2722: ST_TO_ADDR
// continue ;
2723: GO 2535
// end ; if bc_type = b_armoury then
2725: LD_OWVAR 42
2729: PUSH
2730: LD_INT 4
2732: EQUAL
2733: IFFALSE 2743
// bc_type = b_barracks ;
2735: LD_ADDR_OWVAR 42
2739: PUSH
2740: LD_INT 5
2742: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2743: LD_ADDR_VAR 0 4
2747: PUSH
2748: LD_VAR 0 3
2752: PUSH
2753: LD_INT 2
2755: ARRAY
2756: PPUSH
2757: LD_VAR 0 3
2761: PUSH
2762: LD_INT 3
2764: ARRAY
2765: PPUSH
2766: LD_VAR 0 3
2770: PUSH
2771: LD_INT 4
2773: ARRAY
2774: PPUSH
2775: CALL_OW 47
2779: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2780: LD_VAR 0 4
2784: PPUSH
2785: CALL_OW 266
2789: PUSH
2790: LD_INT 32
2792: EQUAL
2793: IFFALSE 2813
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2795: LD_VAR 0 4
2799: PPUSH
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 7
2807: ARRAY
2808: PPUSH
2809: CALL_OW 431
// end ;
2813: GO 2535
2815: POP
2816: POP
// if not amDepot then
2817: LD_EXP 31
2821: NOT
2822: IFFALSE 2859
// begin bc_type := b_warehouse ;
2824: LD_ADDR_OWVAR 42
2828: PUSH
2829: LD_INT 1
2831: ST_TO_ADDR
// bc_level := 6 ;
2832: LD_ADDR_OWVAR 43
2836: PUSH
2837: LD_INT 6
2839: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2840: LD_ADDR_EXP 31
2844: PUSH
2845: LD_INT 52
2847: PPUSH
2848: LD_INT 12
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: CALL_OW 47
2858: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2859: LD_ADDR_OWVAR 42
2863: PUSH
2864: LD_INT 5
2866: ST_TO_ADDR
// bc_level := 6 ;
2867: LD_ADDR_OWVAR 43
2871: PUSH
2872: LD_INT 6
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2875: LD_INT 61
2877: PPUSH
2878: LD_INT 29
2880: PPUSH
2881: LD_INT 5
2883: PPUSH
2884: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2888: LD_EXP 31
2892: PPUSH
2893: LD_STRING gamma
2895: PPUSH
2896: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2900: LD_EXP 31
2904: PPUSH
2905: CALL_OW 274
2909: PPUSH
2910: LD_INT 1
2912: PPUSH
2913: LD_INT 400
2915: PUSH
2916: LD_INT 320
2918: PUSH
2919: LD_INT 270
2921: PUSH
2922: LD_INT 230
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: PUSH
2931: LD_OWVAR 67
2935: ARRAY
2936: PPUSH
2937: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2941: LD_EXP 31
2945: PPUSH
2946: CALL_OW 274
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: LD_INT 130
2956: PPUSH
2957: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2961: LD_INT 22
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 30
2973: PUSH
2974: LD_INT 3
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PPUSH
2985: CALL_OW 69
2989: IFFALSE 3237
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 30
3008: PUSH
3009: LD_INT 3
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 69
3024: PUSH
3025: LD_INT 1
3027: ARRAY
3028: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3029: LD_ADDR_VAR 0 6
3033: PUSH
3034: LD_VAR 0 4
3038: PPUSH
3039: CALL_OW 250
3043: PPUSH
3044: LD_VAR 0 4
3048: PPUSH
3049: CALL_OW 251
3053: PPUSH
3054: LD_VAR 0 4
3058: PPUSH
3059: CALL_OW 254
3063: PPUSH
3064: CALL 74837 0 3
3068: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3069: LD_ADDR_VAR 0 2
3073: PUSH
3074: LD_INT 19
3076: PUSH
3077: LD_INT 17
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3084: LD_STRING 06_remoteVehs_1
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 30
3094: IFFALSE 3117
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 22
3111: PPUSH
3112: CALL_OW 2
3116: ST_TO_ADDR
// for i in tmp do
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_VAR 0 6
3126: PUSH
3127: FOR_IN
3128: IFFALSE 3235
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3130: LD_VAR 0 3
3134: PUSH
3135: LD_INT 1
3137: ARRAY
3138: PPUSH
3139: LD_VAR 0 3
3143: PUSH
3144: LD_INT 2
3146: ARRAY
3147: PPUSH
3148: CALL_OW 428
3152: PUSH
3153: LD_INT 0
3155: EQUAL
3156: IFFALSE 3233
// begin bc_type := blist [ 1 ] ;
3158: LD_ADDR_OWVAR 42
3162: PUSH
3163: LD_VAR 0 2
3167: PUSH
3168: LD_INT 1
3170: ARRAY
3171: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3172: LD_VAR 0 3
3176: PUSH
3177: LD_INT 1
3179: ARRAY
3180: PPUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 2
3188: ARRAY
3189: PPUSH
3190: LD_VAR 0 3
3194: PUSH
3195: LD_INT 3
3197: ARRAY
3198: PPUSH
3199: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 3
3220: ST_TO_ADDR
// if blist = 0 then
3221: LD_VAR 0 2
3225: PUSH
3226: LD_INT 0
3228: EQUAL
3229: IFFALSE 3233
// break ;
3231: GO 3235
// end ;
3233: GO 3127
3235: POP
3236: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3237: LD_STRING 06_remoteVehs_1
3239: PPUSH
3240: LD_INT 0
3242: PPUSH
3243: CALL_OW 30
3247: IFFALSE 3700
// begin bc_type := b_control_tower ;
3249: LD_ADDR_OWVAR 42
3253: PUSH
3254: LD_INT 36
3256: ST_TO_ADDR
// bc_level := 4 ;
3257: LD_ADDR_OWVAR 43
3261: PUSH
3262: LD_INT 4
3264: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3265: LD_EXP 31
3269: PPUSH
3270: LD_INT 36
3272: PPUSH
3273: LD_INT 62
3275: PPUSH
3276: LD_INT 12
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: CALL 52957 0 5
3286: PUSH
3287: LD_INT 92
3289: PUSH
3290: LD_INT 62
3292: PUSH
3293: LD_INT 12
3295: PUSH
3296: LD_INT 3
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: NOT
3310: AND
3311: IFFALSE 3328
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3313: LD_INT 62
3315: PPUSH
3316: LD_INT 12
3318: PPUSH
3319: LD_INT 3
3321: PPUSH
3322: CALL_OW 47
3326: GO 3490
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3328: LD_EXP 31
3332: PPUSH
3333: LD_INT 36
3335: PPUSH
3336: LD_INT 37
3338: PPUSH
3339: LD_INT 18
3341: PPUSH
3342: LD_INT 2
3344: PPUSH
3345: CALL 52957 0 5
3349: PUSH
3350: LD_INT 92
3352: PUSH
3353: LD_INT 37
3355: PUSH
3356: LD_INT 18
3358: PUSH
3359: LD_INT 3
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: NOT
3373: AND
3374: IFFALSE 3391
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3376: LD_INT 37
3378: PPUSH
3379: LD_INT 18
3381: PPUSH
3382: LD_INT 2
3384: PPUSH
3385: CALL_OW 47
3389: GO 3490
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3391: LD_EXP 31
3395: PPUSH
3396: LD_INT 36
3398: PPUSH
3399: LD_INT 66
3401: PPUSH
3402: LD_INT 14
3404: PPUSH
3405: LD_INT 4
3407: PPUSH
3408: CALL 52957 0 5
3412: PUSH
3413: LD_INT 92
3415: PUSH
3416: LD_INT 66
3418: PUSH
3419: LD_INT 14
3421: PUSH
3422: LD_INT 3
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PPUSH
3431: CALL_OW 69
3435: NOT
3436: AND
3437: IFFALSE 3454
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3439: LD_INT 66
3441: PPUSH
3442: LD_INT 14
3444: PPUSH
3445: LD_INT 4
3447: PPUSH
3448: CALL_OW 47
3452: GO 3490
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3454: LD_EXP 31
3458: PPUSH
3459: LD_INT 36
3461: PPUSH
3462: LD_INT 74
3464: PPUSH
3465: LD_INT 26
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: CALL 52957 0 5
3475: IFFALSE 3490
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3477: LD_INT 74
3479: PPUSH
3480: LD_INT 26
3482: PPUSH
3483: LD_INT 4
3485: PPUSH
3486: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3490: LD_INT 22
3492: PUSH
3493: LD_INT 1
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 30
3502: PUSH
3503: LD_INT 36
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: NOT
3519: IFFALSE 3523
// exit ;
3521: GO 4048
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 3
3535: PUSH
3536: LD_INT 2
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: PUSH
3551: LD_OWVAR 67
3555: ARRAY
3556: PUSH
3557: FOR_TO
3558: IFFALSE 3698
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3560: LD_ADDR_OWVAR 37
3564: PUSH
3565: LD_INT 3
3567: PUSH
3568: LD_INT 2
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: LD_INT 1
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: CALL_OW 12
3585: ARRAY
3586: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3587: LD_ADDR_OWVAR 39
3591: PUSH
3592: LD_INT 1
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 1
3604: PPUSH
3605: LD_INT 2
3607: PPUSH
3608: CALL_OW 12
3612: ARRAY
3613: ST_TO_ADDR
// vc_control := control_remote ;
3614: LD_ADDR_OWVAR 38
3618: PUSH
3619: LD_INT 2
3621: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3622: LD_ADDR_OWVAR 40
3626: PUSH
3627: LD_INT 4
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 5
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: LD_INT 1
3643: PPUSH
3644: LD_INT 3
3646: PPUSH
3647: CALL_OW 12
3651: ARRAY
3652: ST_TO_ADDR
// veh := CreateVehicle ;
3653: LD_ADDR_VAR 0 5
3657: PUSH
3658: CALL_OW 45
3662: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3663: LD_VAR 0 5
3667: PPUSH
3668: LD_INT 3
3670: PPUSH
3671: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3675: LD_VAR 0 5
3679: PPUSH
3680: LD_INT 61
3682: PPUSH
3683: LD_INT 23
3685: PPUSH
3686: LD_INT 9
3688: PPUSH
3689: LD_INT 0
3691: PPUSH
3692: CALL_OW 50
// end ;
3696: GO 3557
3698: POP
3699: POP
// end ; if gammaCommander = 1 then
3700: LD_EXP 13
3704: PUSH
3705: LD_INT 1
3707: EQUAL
3708: IFFALSE 3885
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3710: LD_ADDR_VAR 0 3
3714: PUSH
3715: DOUBLE
3716: LD_INT 1
3718: DEC
3719: ST_TO_ADDR
3720: LD_INT 3
3722: PUSH
3723: LD_INT 3
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: LD_INT 2
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: LD_OWVAR 67
3742: ARRAY
3743: PUSH
3744: FOR_TO
3745: IFFALSE 3881
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3747: LD_ADDR_OWVAR 37
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: LD_INT 2
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 1
3764: PPUSH
3765: LD_INT 2
3767: PPUSH
3768: CALL_OW 12
3772: ARRAY
3773: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3774: LD_ADDR_OWVAR 39
3778: PUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 1
3791: PPUSH
3792: LD_INT 2
3794: PPUSH
3795: CALL_OW 12
3799: ARRAY
3800: ST_TO_ADDR
// vc_control := control_manual ;
3801: LD_ADDR_OWVAR 38
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3809: LD_ADDR_OWVAR 40
3813: PUSH
3814: LD_INT 4
3816: PUSH
3817: LD_INT 5
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 2
3829: PPUSH
3830: CALL_OW 12
3834: ARRAY
3835: ST_TO_ADDR
// veh := CreateVehicle ;
3836: LD_ADDR_VAR 0 5
3840: PUSH
3841: CALL_OW 45
3845: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3846: LD_VAR 0 5
3850: PPUSH
3851: LD_INT 3
3853: PPUSH
3854: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 61
3865: PPUSH
3866: LD_INT 23
3868: PPUSH
3869: LD_INT 9
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 50
// end ;
3879: GO 3744
3881: POP
3882: POP
// end else
3883: GO 4048
// if gammaCommander = 2 then
3885: LD_EXP 13
3889: PUSH
3890: LD_INT 2
3892: EQUAL
3893: IFFALSE 4048
// begin bc_type := b_bunker ;
3895: LD_ADDR_OWVAR 42
3899: PUSH
3900: LD_INT 32
3902: ST_TO_ADDR
// bc_level := 6 ;
3903: LD_ADDR_OWVAR 43
3907: PUSH
3908: LD_INT 6
3910: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: LD_INT 67
3918: PPUSH
3919: LD_INT 36
3921: PPUSH
3922: LD_INT 5
3924: PPUSH
3925: CALL_OW 47
3929: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3930: LD_VAR 0 4
3934: PPUSH
3935: LD_INT 4
3937: PPUSH
3938: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3942: LD_ADDR_VAR 0 4
3946: PUSH
3947: LD_INT 61
3949: PPUSH
3950: LD_INT 40
3952: PPUSH
3953: LD_INT 5
3955: PPUSH
3956: CALL_OW 47
3960: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3961: LD_VAR 0 4
3965: PPUSH
3966: LD_INT 5
3968: PPUSH
3969: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3973: LD_ADDR_OWVAR 37
3977: PUSH
3978: LD_INT 2
3980: ST_TO_ADDR
// vc_engine := engine_combustion ;
3981: LD_ADDR_OWVAR 39
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// vc_control := control_manual ;
3989: LD_ADDR_OWVAR 38
3993: PUSH
3994: LD_INT 1
3996: ST_TO_ADDR
// vc_weapon := us_crane ;
3997: LD_ADDR_OWVAR 40
4001: PUSH
4002: LD_INT 13
4004: ST_TO_ADDR
// veh := CreateVehicle ;
4005: LD_ADDR_VAR 0 5
4009: PUSH
4010: CALL_OW 45
4014: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4015: LD_VAR 0 5
4019: PPUSH
4020: LD_INT 3
4022: PPUSH
4023: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4027: LD_VAR 0 5
4031: PPUSH
4032: LD_INT 61
4034: PPUSH
4035: LD_INT 23
4037: PPUSH
4038: LD_INT 9
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 50
// end ; end ;
4048: LD_VAR 0 1
4052: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4053: LD_INT 0
4055: PPUSH
4056: PPUSH
4057: PPUSH
4058: PPUSH
// uc_side := 1 ;
4059: LD_ADDR_OWVAR 20
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// uc_nation := 1 ;
4067: LD_ADDR_OWVAR 21
4071: PUSH
4072: LD_INT 1
4074: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4075: LD_ADDR_EXP 26
4079: PUSH
4080: LD_STRING Denis
4082: PPUSH
4083: LD_EXP 1
4087: NOT
4088: PPUSH
4089: LD_STRING 06c_
4091: PPUSH
4092: CALL 39723 0 3
4096: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4097: LD_EXP 26
4101: PPUSH
4102: LD_INT 4
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4112: LD_ADDR_EXP 27
4116: PUSH
4117: LD_STRING Joan
4119: PPUSH
4120: LD_EXP 1
4124: NOT
4125: PPUSH
4126: LD_STRING 06c_
4128: PPUSH
4129: CALL 39723 0 3
4133: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4134: LD_EXP 27
4138: PPUSH
4139: LD_INT 4
4141: PPUSH
4142: LD_INT 0
4144: PPUSH
4145: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4149: LD_ADDR_EXP 24
4153: PUSH
4154: LD_STRING Mike
4156: PPUSH
4157: LD_EXP 1
4161: NOT
4162: PPUSH
4163: LD_STRING 06c_
4165: PPUSH
4166: CALL 39723 0 3
4170: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4171: LD_EXP 24
4175: PPUSH
4176: LD_INT 4
4178: PPUSH
4179: LD_INT 0
4181: PPUSH
4182: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4186: LD_STRING GladstoneIn07
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL_OW 30
4196: NOT
4197: IFFALSE 4277
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4199: LD_ADDR_EXP 21
4203: PUSH
4204: LD_STRING Gladstone
4206: PPUSH
4207: LD_EXP 1
4211: NOT
4212: PPUSH
4213: LD_STRING 06c_
4215: PPUSH
4216: CALL 39723 0 3
4220: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4221: LD_EXP 21
4225: NOT
4226: PUSH
4227: LD_STRING GladstoneStayInDelta
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: CALL_OW 30
4237: AND
4238: IFFALSE 4262
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4240: LD_ADDR_EXP 21
4244: PUSH
4245: LD_STRING Gladstone
4247: PPUSH
4248: LD_EXP 1
4252: NOT
4253: PPUSH
4254: LD_STRING 05_
4256: PPUSH
4257: CALL 39723 0 3
4261: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4262: LD_EXP 21
4266: PPUSH
4267: LD_INT 4
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4277: LD_STRING LisaStayInDelta
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 30
4287: IFFALSE 4323
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4289: LD_ADDR_EXP 19
4293: PUSH
4294: LD_STRING Lisa
4296: PPUSH
4297: LD_INT 1
4299: PPUSH
4300: LD_STRING 05_
4302: PPUSH
4303: CALL 39723 0 3
4307: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4308: LD_EXP 19
4312: PPUSH
4313: LD_INT 4
4315: PPUSH
4316: LD_INT 0
4318: PPUSH
4319: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4323: LD_STRING BobbyStayInDelta
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: CALL_OW 30
4333: IFFALSE 4369
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4335: LD_ADDR_EXP 17
4339: PUSH
4340: LD_STRING Bobby
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: LD_STRING 05_
4348: PPUSH
4349: CALL 39723 0 3
4353: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4354: LD_EXP 17
4358: PPUSH
4359: LD_INT 4
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4369: LD_STRING CyrusStayInDelta
4371: PPUSH
4372: LD_INT 0
4374: PPUSH
4375: CALL_OW 30
4379: IFFALSE 4415
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4381: LD_ADDR_EXP 18
4385: PUSH
4386: LD_STRING Cyrus
4388: PPUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_STRING 05_
4394: PPUSH
4395: CALL 39723 0 3
4399: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4400: LD_EXP 18
4404: PPUSH
4405: LD_INT 4
4407: PPUSH
4408: LD_INT 0
4410: PPUSH
4411: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4415: LD_STRING BrownStayInDelta
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 30
4425: IFFALSE 4461
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4427: LD_ADDR_EXP 15
4431: PUSH
4432: LD_STRING Brown
4434: PPUSH
4435: LD_INT 1
4437: PPUSH
4438: LD_STRING 05_
4440: PPUSH
4441: CALL 39723 0 3
4445: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4446: LD_EXP 15
4450: PPUSH
4451: LD_INT 4
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4461: LD_STRING DonaldsonStayInDelta
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL_OW 30
4471: IFFALSE 4507
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4473: LD_ADDR_EXP 16
4477: PUSH
4478: LD_STRING Donaldson
4480: PPUSH
4481: LD_INT 1
4483: PPUSH
4484: LD_STRING 05_
4486: PPUSH
4487: CALL 39723 0 3
4491: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4492: LD_EXP 16
4496: PPUSH
4497: LD_INT 4
4499: PPUSH
4500: LD_INT 0
4502: PPUSH
4503: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4507: LD_ADDR_VAR 0 4
4511: PUSH
4512: LD_STRING OthersStayInDelta
4514: PPUSH
4515: CALL_OW 31
4519: ST_TO_ADDR
// if others > 2 then
4520: LD_VAR 0 4
4524: PUSH
4525: LD_INT 2
4527: GREATER
4528: IFFALSE 4591
// begin for j := 1 to 2 do
4530: LD_ADDR_VAR 0 3
4534: PUSH
4535: DOUBLE
4536: LD_INT 1
4538: DEC
4539: ST_TO_ADDR
4540: LD_INT 2
4542: PUSH
4543: FOR_TO
4544: IFFALSE 4587
// begin SetTag ( others [ j ] , 107 ) ;
4546: LD_VAR 0 4
4550: PUSH
4551: LD_VAR 0 3
4555: ARRAY
4556: PPUSH
4557: LD_INT 107
4559: PPUSH
4560: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4564: LD_VAR 0 4
4568: PUSH
4569: LD_VAR 0 3
4573: ARRAY
4574: PPUSH
4575: LD_INT 4
4577: PPUSH
4578: LD_INT 0
4580: PPUSH
4581: CALL_OW 49
// end ;
4585: GO 4543
4587: POP
4588: POP
// end else
4589: GO 4652
// begin for j := 1 to others do
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: DOUBLE
4597: LD_INT 1
4599: DEC
4600: ST_TO_ADDR
4601: LD_VAR 0 4
4605: PUSH
4606: FOR_TO
4607: IFFALSE 4650
// begin SetTag ( others [ i ] , 107 ) ;
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_INT 107
4622: PPUSH
4623: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4627: LD_VAR 0 4
4631: PUSH
4632: LD_VAR 0 3
4636: ARRAY
4637: PPUSH
4638: LD_INT 4
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 49
// end ;
4648: GO 4606
4650: POP
4651: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4652: LD_ADDR_VAR 0 4
4656: PUSH
4657: LD_STRING 06_other_apemans
4659: PPUSH
4660: CALL_OW 31
4664: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4665: LD_VAR 0 4
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: LD_INT 2
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: LD_INT 1
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: PUSH
4688: LD_OWVAR 67
4692: ARRAY
4693: GREATEREQUAL
4694: IFFALSE 4727
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 2
4706: PUSH
4707: LD_INT 2
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: PUSH
4719: LD_OWVAR 67
4723: ARRAY
4724: ST_TO_ADDR
4725: GO 4737
// j := others ;
4727: LD_ADDR_VAR 0 3
4731: PUSH
4732: LD_VAR 0 4
4736: ST_TO_ADDR
// for i := 1 to j do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 3
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4778
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4755: LD_VAR 0 4
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PPUSH
4766: LD_INT 4
4768: PPUSH
4769: LD_INT 0
4771: PPUSH
4772: CALL_OW 49
4776: GO 4752
4778: POP
4779: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4780: LD_INT 4
4782: PPUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 1
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 21
4795: PUSH
4796: LD_INT 1
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 70
4811: PPUSH
4812: LD_INT 53
4814: PPUSH
4815: LD_INT 19
4817: PPUSH
4818: CALL_OW 111
// end ;
4822: LD_VAR 0 1
4826: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4827: LD_INT 0
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
// prefix := 07c_ ;
4843: LD_ADDR_VAR 0 10
4847: PUSH
4848: LD_STRING 07c_
4850: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4851: LD_ADDR_VAR 0 8
4855: PUSH
4856: LD_STRING 07_vehicles
4858: PPUSH
4859: EMPTY
4860: PPUSH
4861: CALL_OW 30
4865: ST_TO_ADDR
// if not vehicles and debug then
4866: LD_VAR 0 8
4870: NOT
4871: PUSH
4872: LD_EXP 1
4876: AND
4877: IFFALSE 4905
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4879: LD_ADDR_VAR 0 8
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: LD_INT 1
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: LD_INT 4
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: ST_TO_ADDR
// if not vehicles then
4905: LD_VAR 0 8
4909: NOT
4910: IFFALSE 4967
// begin area := westGammaSupportArea ;
4912: LD_ADDR_VAR 0 11
4916: PUSH
4917: LD_INT 16
4919: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4920: LD_ADDR_VAR 0 14
4924: PUSH
4925: LD_INT 37
4927: PUSH
4928: LD_INT 70
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4935: LD_ADDR_VAR 0 13
4939: PUSH
4940: LD_INT 43
4942: PUSH
4943: LD_INT 67
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: ST_TO_ADDR
// dir := 1 ;
4950: LD_ADDR_VAR 0 12
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4958: LD_INT 4200
4960: PPUSH
4961: CALL_OW 67
// end else
4965: GO 5013
// begin area := southGammaSupportArea ;
4967: LD_ADDR_VAR 0 11
4971: PUSH
4972: LD_INT 5
4974: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4975: LD_ADDR_VAR 0 14
4979: PUSH
4980: LD_INT 87
4982: PUSH
4983: LD_INT 147
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4990: LD_ADDR_VAR 0 13
4994: PUSH
4995: LD_INT 74
4997: PUSH
4998: LD_INT 129
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: ST_TO_ADDR
// dir := 0 ;
5005: LD_ADDR_VAR 0 12
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// end ; squad := [ ] ;
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: EMPTY
5019: ST_TO_ADDR
// tmp := [ ] ;
5020: LD_ADDR_VAR 0 6
5024: PUSH
5025: EMPTY
5026: ST_TO_ADDR
// tmpVehs := [ ] ;
5027: LD_ADDR_VAR 0 7
5031: PUSH
5032: EMPTY
5033: ST_TO_ADDR
// uc_side := 1 ;
5034: LD_ADDR_OWVAR 20
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// uc_nation := 1 ;
5042: LD_ADDR_OWVAR 21
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// if vehicles then
5050: LD_VAR 0 8
5054: IFFALSE 5188
// begin for i := 1 to vehicles do
5056: LD_ADDR_VAR 0 2
5060: PUSH
5061: DOUBLE
5062: LD_INT 1
5064: DEC
5065: ST_TO_ADDR
5066: LD_VAR 0 8
5070: PUSH
5071: FOR_TO
5072: IFFALSE 5186
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5074: LD_ADDR_OWVAR 37
5078: PUSH
5079: LD_VAR 0 8
5083: PUSH
5084: LD_VAR 0 2
5088: ARRAY
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5094: LD_ADDR_OWVAR 39
5098: PUSH
5099: LD_VAR 0 8
5103: PUSH
5104: LD_VAR 0 2
5108: ARRAY
5109: PUSH
5110: LD_INT 2
5112: ARRAY
5113: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5114: LD_ADDR_OWVAR 38
5118: PUSH
5119: LD_VAR 0 8
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PUSH
5130: LD_INT 3
5132: ARRAY
5133: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5134: LD_ADDR_OWVAR 40
5138: PUSH
5139: LD_VAR 0 8
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PUSH
5150: LD_INT 4
5152: ARRAY
5153: ST_TO_ADDR
// veh := CreateVehicle ;
5154: LD_ADDR_VAR 0 9
5158: PUSH
5159: CALL_OW 45
5163: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5164: LD_ADDR_VAR 0 7
5168: PUSH
5169: LD_VAR 0 7
5173: PPUSH
5174: LD_VAR 0 9
5178: PPUSH
5179: CALL 77191 0 2
5183: ST_TO_ADDR
// end ;
5184: GO 5071
5186: POP
5187: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5188: LD_ADDR_EXP 14
5192: PUSH
5193: LD_STRING JMM
5195: PPUSH
5196: LD_EXP 1
5200: NOT
5201: PPUSH
5202: LD_VAR 0 10
5206: PPUSH
5207: CALL 39723 0 3
5211: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5212: LD_EXP 13
5216: PUSH
5217: LD_INT 1
5219: PUSH
5220: LD_INT 3
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: IN
5227: PUSH
5228: LD_EXP 15
5232: NOT
5233: AND
5234: IFFALSE 5295
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5236: LD_ADDR_EXP 15
5240: PUSH
5241: LD_STRING Brown
5243: PPUSH
5244: LD_EXP 1
5248: NOT
5249: PPUSH
5250: LD_VAR 0 10
5254: PPUSH
5255: CALL 39723 0 3
5259: ST_TO_ADDR
// if Brown then
5260: LD_EXP 15
5264: IFFALSE 5295
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5266: LD_ADDR_VAR 0 6
5270: PUSH
5271: LD_VAR 0 6
5275: PPUSH
5276: LD_VAR 0 6
5280: PUSH
5281: LD_INT 1
5283: PLUS
5284: PPUSH
5285: LD_EXP 15
5289: PPUSH
5290: CALL_OW 1
5294: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5295: LD_EXP 13
5299: PUSH
5300: LD_INT 2
5302: PUSH
5303: LD_INT 3
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: IN
5310: PUSH
5311: LD_EXP 16
5315: NOT
5316: AND
5317: IFFALSE 5378
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5319: LD_ADDR_EXP 16
5323: PUSH
5324: LD_STRING Donaldson
5326: PPUSH
5327: LD_EXP 1
5331: NOT
5332: PPUSH
5333: LD_VAR 0 10
5337: PPUSH
5338: CALL 39723 0 3
5342: ST_TO_ADDR
// if Donaldson then
5343: LD_EXP 16
5347: IFFALSE 5378
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5349: LD_ADDR_VAR 0 6
5353: PUSH
5354: LD_VAR 0 6
5358: PPUSH
5359: LD_VAR 0 6
5363: PUSH
5364: LD_INT 1
5366: PLUS
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 1
5377: ST_TO_ADDR
// end ; if not Bobby then
5378: LD_EXP 17
5382: NOT
5383: IFFALSE 5441
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5385: LD_ADDR_EXP 17
5389: PUSH
5390: LD_STRING Bobby
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: LD_VAR 0 10
5400: PPUSH
5401: CALL 39723 0 3
5405: ST_TO_ADDR
// if Bobby then
5406: LD_EXP 17
5410: IFFALSE 5441
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5412: LD_ADDR_VAR 0 6
5416: PUSH
5417: LD_VAR 0 6
5421: PPUSH
5422: LD_VAR 0 6
5426: PUSH
5427: LD_INT 1
5429: PLUS
5430: PPUSH
5431: LD_EXP 17
5435: PPUSH
5436: CALL_OW 1
5440: ST_TO_ADDR
// end ; if not Cyrus then
5441: LD_EXP 18
5445: NOT
5446: IFFALSE 5504
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5448: LD_ADDR_EXP 18
5452: PUSH
5453: LD_STRING Cyrus
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: LD_VAR 0 10
5463: PPUSH
5464: CALL 39723 0 3
5468: ST_TO_ADDR
// if Cyrus then
5469: LD_EXP 18
5473: IFFALSE 5504
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5475: LD_ADDR_VAR 0 6
5479: PUSH
5480: LD_VAR 0 6
5484: PPUSH
5485: LD_VAR 0 6
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_EXP 18
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// end ; if not Lisa then
5504: LD_EXP 19
5508: NOT
5509: IFFALSE 5570
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5511: LD_ADDR_EXP 19
5515: PUSH
5516: LD_STRING Lisa
5518: PPUSH
5519: LD_EXP 1
5523: NOT
5524: PPUSH
5525: LD_VAR 0 10
5529: PPUSH
5530: CALL 39723 0 3
5534: ST_TO_ADDR
// if Lisa then
5535: LD_EXP 19
5539: IFFALSE 5570
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5541: LD_ADDR_VAR 0 6
5545: PUSH
5546: LD_VAR 0 6
5550: PPUSH
5551: LD_VAR 0 6
5555: PUSH
5556: LD_INT 1
5558: PLUS
5559: PPUSH
5560: LD_EXP 19
5564: PPUSH
5565: CALL_OW 1
5569: ST_TO_ADDR
// end ; if not Frank then
5570: LD_EXP 20
5574: NOT
5575: IFFALSE 5636
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5577: LD_ADDR_EXP 20
5581: PUSH
5582: LD_STRING Frank
5584: PPUSH
5585: LD_EXP 1
5589: NOT
5590: PPUSH
5591: LD_VAR 0 10
5595: PPUSH
5596: CALL 39723 0 3
5600: ST_TO_ADDR
// if Frank then
5601: LD_EXP 20
5605: IFFALSE 5636
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5607: LD_ADDR_VAR 0 6
5611: PUSH
5612: LD_VAR 0 6
5616: PPUSH
5617: LD_VAR 0 6
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: PPUSH
5626: LD_EXP 20
5630: PPUSH
5631: CALL_OW 1
5635: ST_TO_ADDR
// end ; if not Kikuchi then
5636: LD_EXP 22
5640: NOT
5641: IFFALSE 5699
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5643: LD_ADDR_EXP 22
5647: PUSH
5648: LD_STRING Kikuchi
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_VAR 0 10
5658: PPUSH
5659: CALL 39723 0 3
5663: ST_TO_ADDR
// if Kikuchi then
5664: LD_EXP 22
5668: IFFALSE 5699
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5670: LD_ADDR_VAR 0 6
5674: PUSH
5675: LD_VAR 0 6
5679: PPUSH
5680: LD_VAR 0 6
5684: PUSH
5685: LD_INT 1
5687: PLUS
5688: PPUSH
5689: LD_EXP 22
5693: PPUSH
5694: CALL_OW 1
5698: ST_TO_ADDR
// end ; if not Gladstone then
5699: LD_EXP 21
5703: NOT
5704: IFFALSE 5765
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5706: LD_ADDR_EXP 21
5710: PUSH
5711: LD_STRING Gladstone
5713: PPUSH
5714: LD_EXP 1
5718: NOT
5719: PPUSH
5720: LD_VAR 0 10
5724: PPUSH
5725: CALL 39723 0 3
5729: ST_TO_ADDR
// if Gladstone then
5730: LD_EXP 21
5734: IFFALSE 5765
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5736: LD_ADDR_VAR 0 6
5740: PUSH
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 6
5750: PUSH
5751: LD_INT 1
5753: PLUS
5754: PPUSH
5755: LD_EXP 21
5759: PPUSH
5760: CALL_OW 1
5764: ST_TO_ADDR
// end ; if not Khatam then
5765: LD_EXP 23
5769: NOT
5770: IFFALSE 5828
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5772: LD_ADDR_EXP 23
5776: PUSH
5777: LD_STRING Khatam
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: LD_VAR 0 10
5787: PPUSH
5788: CALL 39723 0 3
5792: ST_TO_ADDR
// if Khatam then
5793: LD_EXP 23
5797: IFFALSE 5828
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5799: LD_ADDR_VAR 0 6
5803: PUSH
5804: LD_VAR 0 6
5808: PPUSH
5809: LD_VAR 0 6
5813: PUSH
5814: LD_INT 1
5816: PLUS
5817: PPUSH
5818: LD_EXP 23
5822: PPUSH
5823: CALL_OW 1
5827: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5828: LD_ADDR_VAR 0 4
5832: PUSH
5833: LD_STRING 07c_others
5835: PPUSH
5836: CALL_OW 31
5840: ST_TO_ADDR
// squad := others ;
5841: LD_ADDR_VAR 0 5
5845: PUSH
5846: LD_VAR 0 4
5850: ST_TO_ADDR
// if others then
5851: LD_VAR 0 4
5855: IFFALSE 5906
// for i in others do
5857: LD_ADDR_VAR 0 2
5861: PUSH
5862: LD_VAR 0 4
5866: PUSH
5867: FOR_IN
5868: IFFALSE 5904
// begin SetTag ( i , 108 ) ;
5870: LD_VAR 0 2
5874: PPUSH
5875: LD_INT 108
5877: PPUSH
5878: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5882: LD_ADDR_VAR 0 6
5886: PUSH
5887: LD_VAR 0 6
5891: PPUSH
5892: LD_VAR 0 2
5896: PPUSH
5897: CALL 77191 0 2
5901: ST_TO_ADDR
// end ;
5902: GO 5867
5904: POP
5905: POP
// if tmp then
5906: LD_VAR 0 6
5910: IFFALSE 6145
// begin tmp := Join ( tmp , JMM ) ;
5912: LD_ADDR_VAR 0 6
5916: PUSH
5917: LD_VAR 0 6
5921: PPUSH
5922: LD_EXP 14
5926: PPUSH
5927: CALL 77191 0 2
5931: ST_TO_ADDR
// for i in tmp do
5932: LD_ADDR_VAR 0 2
5936: PUSH
5937: LD_VAR 0 6
5941: PUSH
5942: FOR_IN
5943: IFFALSE 6143
// begin SetDir ( i , dir ) ;
5945: LD_VAR 0 2
5949: PPUSH
5950: LD_VAR 0 12
5954: PPUSH
5955: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5959: LD_VAR 0 2
5963: PPUSH
5964: CALL_OW 257
5968: PUSH
5969: LD_INT 3
5971: EQUAL
5972: PUSH
5973: LD_VAR 0 7
5977: AND
5978: IFFALSE 6068
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5980: LD_VAR 0 7
5984: PUSH
5985: LD_INT 1
5987: ARRAY
5988: PPUSH
5989: LD_INT 0
5991: PPUSH
5992: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5996: LD_VAR 0 7
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: PPUSH
6005: LD_VAR 0 14
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_VAR 0 14
6018: PUSH
6019: LD_INT 2
6021: ARRAY
6022: PPUSH
6023: LD_INT 0
6025: PPUSH
6026: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6030: LD_VAR 0 2
6034: PPUSH
6035: LD_VAR 0 7
6039: PUSH
6040: LD_INT 1
6042: ARRAY
6043: PPUSH
6044: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6048: LD_ADDR_VAR 0 7
6052: PUSH
6053: LD_VAR 0 7
6057: PPUSH
6058: LD_INT 1
6060: PPUSH
6061: CALL_OW 3
6065: ST_TO_ADDR
// end else
6066: GO 6085
// PlaceUnitArea ( i , area , false ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_VAR 0 11
6077: PPUSH
6078: LD_INT 0
6080: PPUSH
6081: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6085: LD_VAR 0 2
6089: PPUSH
6090: LD_VAR 0 13
6094: PUSH
6095: LD_INT 1
6097: ARRAY
6098: PPUSH
6099: LD_VAR 0 13
6103: PUSH
6104: LD_INT 2
6106: ARRAY
6107: PPUSH
6108: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6112: LD_INT 35
6114: PPUSH
6115: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6119: LD_VAR 0 11
6123: PPUSH
6124: LD_INT 22
6126: PUSH
6127: LD_INT 1
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PPUSH
6134: CALL_OW 70
6138: NOT
6139: IFFALSE 6112
// end ;
6141: GO 5942
6143: POP
6144: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6145: LD_EXP 14
6149: PPUSH
6150: CALL_OW 305
6154: NOT
6155: PUSH
6156: LD_EXP 14
6160: PPUSH
6161: CALL_OW 310
6165: NOT
6166: OR
6167: IFFALSE 6199
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6169: LD_EXP 14
6173: PPUSH
6174: LD_VAR 0 14
6178: PUSH
6179: LD_INT 1
6181: ARRAY
6182: PPUSH
6183: LD_VAR 0 14
6187: PUSH
6188: LD_INT 2
6190: ARRAY
6191: PPUSH
6192: LD_INT 0
6194: PPUSH
6195: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6199: LD_EXP 14
6203: PPUSH
6204: LD_VAR 0 13
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PPUSH
6213: LD_VAR 0 13
6217: PUSH
6218: LD_INT 2
6220: ARRAY
6221: PPUSH
6222: CALL_OW 111
// jmmArrival := true ;
6226: LD_ADDR_EXP 8
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// end ;
6234: LD_VAR 0 1
6238: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6239: LD_INT 0
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
6245: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6246: LD_INT 1
6248: PPUSH
6249: LD_INT 17
6251: PPUSH
6252: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6256: LD_INT 2
6258: PPUSH
6259: LD_INT 17
6261: PPUSH
6262: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6266: LD_ADDR_VAR 0 5
6270: PUSH
6271: LD_INT 6
6273: PPUSH
6274: LD_INT 3
6276: PUSH
6277: LD_INT 21
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PPUSH
6291: CALL_OW 70
6295: ST_TO_ADDR
// if tmp then
6296: LD_VAR 0 5
6300: IFFALSE 6324
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6302: LD_VAR 0 5
6306: PPUSH
6307: LD_INT 33
6309: PPUSH
6310: LD_INT 39
6312: PPUSH
6313: CALL_OW 111
// wait ( 0 0$3 ) ;
6317: LD_INT 105
6319: PPUSH
6320: CALL_OW 67
// end ; uc_side := 4 ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_INT 4
6331: ST_TO_ADDR
// uc_nation := 1 ;
6332: LD_ADDR_OWVAR 21
6336: PUSH
6337: LD_INT 1
6339: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6340: LD_ADDR_EXP 28
6344: PUSH
6345: LD_STRING Sikorski
6347: PPUSH
6348: LD_INT 0
6350: PPUSH
6351: LD_STRING 
6353: PPUSH
6354: CALL 39723 0 3
6358: ST_TO_ADDR
// vc_engine := engine_combustion ;
6359: LD_ADDR_OWVAR 39
6363: PUSH
6364: LD_INT 1
6366: ST_TO_ADDR
// vc_control := control_manual ;
6367: LD_ADDR_OWVAR 38
6371: PUSH
6372: LD_INT 1
6374: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6375: LD_ADDR_OWVAR 40
6379: PUSH
6380: LD_INT 6
6382: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6383: LD_ADDR_OWVAR 37
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// veh := CreateVehicle ;
6391: LD_ADDR_VAR 0 4
6395: PUSH
6396: CALL_OW 45
6400: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6401: LD_VAR 0 4
6405: PPUSH
6406: LD_INT 3
6408: PPUSH
6409: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6413: LD_VAR 0 4
6417: PPUSH
6418: LD_INT 4
6420: NEG
6421: PPUSH
6422: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6426: LD_VAR 0 4
6430: PPUSH
6431: LD_INT 70
6433: PPUSH
6434: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6438: LD_VAR 0 4
6442: PPUSH
6443: LD_INT 6
6445: PPUSH
6446: LD_INT 0
6448: PPUSH
6449: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6453: LD_EXP 28
6457: PPUSH
6458: LD_VAR 0 4
6462: PPUSH
6463: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6467: LD_EXP 28
6471: PPUSH
6472: LD_INT 37
6474: PPUSH
6475: LD_INT 30
6477: PPUSH
6478: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6482: LD_INT 10
6484: PPUSH
6485: CALL_OW 67
// InitHc_All ( ) ;
6489: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: DOUBLE
6499: LD_INT 1
6501: DEC
6502: ST_TO_ADDR
6503: LD_INT 3
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: LD_INT 2
6511: PUSH
6512: LD_INT 2
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_OWVAR 67
6525: ARRAY
6526: PUSH
6527: FOR_TO
6528: IFFALSE 6640
// begin uc_side := 4 ;
6530: LD_ADDR_OWVAR 20
6534: PUSH
6535: LD_INT 4
6537: ST_TO_ADDR
// uc_nation := 1 ;
6538: LD_ADDR_OWVAR 21
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 1
6551: PPUSH
6552: LD_INT 4
6554: PPUSH
6555: LD_INT 7
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un := CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL_OW 233
// SetTag ( un , 101 ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_INT 101
6596: PPUSH
6597: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6601: LD_VAR 0 3
6605: PPUSH
6606: LD_INT 6
6608: PPUSH
6609: LD_INT 0
6611: PPUSH
6612: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6616: LD_VAR 0 3
6620: PPUSH
6621: LD_INT 25
6623: PPUSH
6624: LD_INT 27
6626: PPUSH
6627: CALL_OW 111
// wait ( 0 0$1 ) ;
6631: LD_INT 35
6633: PPUSH
6634: CALL_OW 67
// end ;
6638: GO 6527
6640: POP
6641: POP
// for i := 1 to 2 do
6642: LD_ADDR_VAR 0 2
6646: PUSH
6647: DOUBLE
6648: LD_INT 1
6650: DEC
6651: ST_TO_ADDR
6652: LD_INT 2
6654: PUSH
6655: FOR_TO
6656: IFFALSE 6768
// begin uc_side := 4 ;
6658: LD_ADDR_OWVAR 20
6662: PUSH
6663: LD_INT 4
6665: ST_TO_ADDR
// uc_nation := 1 ;
6666: LD_ADDR_OWVAR 21
6670: PUSH
6671: LD_INT 1
6673: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6674: LD_INT 0
6676: PPUSH
6677: LD_INT 4
6679: PPUSH
6680: LD_INT 3
6682: PPUSH
6683: LD_INT 5
6685: PPUSH
6686: CALL_OW 12
6690: PPUSH
6691: CALL_OW 380
// un := CreateHuman ;
6695: LD_ADDR_VAR 0 3
6699: PUSH
6700: CALL_OW 44
6704: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6705: LD_VAR 0 3
6709: PPUSH
6710: LD_INT 3
6712: PPUSH
6713: CALL_OW 233
// SetTag ( un , 101 ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 101
6724: PPUSH
6725: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6729: LD_VAR 0 3
6733: PPUSH
6734: LD_INT 6
6736: PPUSH
6737: LD_INT 0
6739: PPUSH
6740: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6744: LD_VAR 0 3
6748: PPUSH
6749: LD_INT 25
6751: PPUSH
6752: LD_INT 27
6754: PPUSH
6755: CALL_OW 111
// wait ( 0 0$1 ) ;
6759: LD_INT 35
6761: PPUSH
6762: CALL_OW 67
// end ;
6766: GO 6655
6768: POP
6769: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 5
6782: PUSH
6783: LD_INT 4
6785: PUSH
6786: LD_INT 3
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: PUSH
6798: LD_OWVAR 67
6802: ARRAY
6803: PUSH
6804: FOR_TO
6805: IFFALSE 7047
// begin uc_side := 4 ;
6807: LD_ADDR_OWVAR 20
6811: PUSH
6812: LD_INT 4
6814: ST_TO_ADDR
// uc_nation := 1 ;
6815: LD_ADDR_OWVAR 21
6819: PUSH
6820: LD_INT 1
6822: ST_TO_ADDR
// vc_engine := engine_combustion ;
6823: LD_ADDR_OWVAR 39
6827: PUSH
6828: LD_INT 1
6830: ST_TO_ADDR
// vc_control := control_manual ;
6831: LD_ADDR_OWVAR 38
6835: PUSH
6836: LD_INT 1
6838: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6839: LD_ADDR_OWVAR 40
6843: PUSH
6844: LD_INT 5
6846: PUSH
6847: LD_INT 7
6849: PUSH
6850: LD_INT 5
6852: PUSH
6853: LD_INT 4
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: PUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_INT 4
6869: MOD
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ARRAY
6875: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6876: LD_ADDR_OWVAR 37
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 4
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_VAR 0 2
6903: PUSH
6904: LD_INT 4
6906: MOD
6907: PUSH
6908: LD_INT 1
6910: PLUS
6911: ARRAY
6912: ST_TO_ADDR
// veh := CreateVehicle ;
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: CALL_OW 45
6922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6923: LD_VAR 0 4
6927: PPUSH
6928: LD_INT 3
6930: PPUSH
6931: CALL_OW 233
// SetTag ( veh , 0 ) ;
6935: LD_VAR 0 4
6939: PPUSH
6940: LD_INT 0
6942: PPUSH
6943: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6947: LD_VAR 0 4
6951: PPUSH
6952: LD_INT 70
6954: PPUSH
6955: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6959: LD_VAR 0 4
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: LD_INT 0
6969: PPUSH
6970: CALL_OW 49
// InitHc ;
6974: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6978: LD_INT 0
6980: PPUSH
6981: LD_INT 3
6983: PPUSH
6984: LD_INT 4
6986: PPUSH
6987: LD_INT 7
6989: PPUSH
6990: CALL_OW 12
6994: PPUSH
6995: CALL_OW 380
// un := CreateHuman ;
6999: LD_ADDR_VAR 0 3
7003: PUSH
7004: CALL_OW 44
7008: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7009: LD_VAR 0 3
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7023: LD_VAR 0 3
7027: PPUSH
7028: LD_INT 30
7030: PPUSH
7031: LD_INT 22
7033: PPUSH
7034: CALL_OW 111
// wait ( 0 0$3 ) ;
7038: LD_INT 105
7040: PPUSH
7041: CALL_OW 67
// end ;
7045: GO 6804
7047: POP
7048: POP
// wait ( 0 0$10 ) ;
7049: LD_INT 350
7051: PPUSH
7052: CALL_OW 67
// end ;
7056: LD_VAR 0 1
7060: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7061: LD_INT 0
7063: PPUSH
7064: PPUSH
7065: PPUSH
7066: PPUSH
// gammaBase := [ ] ;
7067: LD_ADDR_VAR 0 4
7071: PUSH
7072: EMPTY
7073: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7074: LD_ADDR_VAR 0 5
7078: PUSH
7079: LD_VAR 0 1
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 21
7096: PUSH
7097: LD_INT 3
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 50
7106: PUSH
7107: EMPTY
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 70
7119: ST_TO_ADDR
// for i in buildings do
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: LD_VAR 0 5
7129: PUSH
7130: FOR_IN
7131: IFFALSE 7568
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7133: LD_VAR 0 3
7137: PPUSH
7138: CALL_OW 266
7142: PUSH
7143: LD_INT 6
7145: PUSH
7146: LD_INT 7
7148: PUSH
7149: LD_INT 8
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: IN
7157: IFFALSE 7271
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7159: LD_ADDR_VAR 0 4
7163: PUSH
7164: LD_VAR 0 4
7168: PUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 266
7178: PUSH
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL_OW 250
7188: PUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: CALL_OW 251
7198: PUSH
7199: LD_VAR 0 3
7203: PPUSH
7204: CALL_OW 254
7208: PUSH
7209: LD_VAR 0 3
7213: PPUSH
7214: CALL_OW 267
7218: PUSH
7219: LD_VAR 0 3
7223: PPUSH
7224: CALL_OW 248
7228: PUSH
7229: LD_VAR 0 3
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL_OW 268
7241: PUSH
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_INT 2
7249: PPUSH
7250: CALL_OW 268
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: ADD
7268: ST_TO_ADDR
7269: GO 7566
// if GetBType ( i ) = b_bunker then
7271: LD_VAR 0 3
7275: PPUSH
7276: CALL_OW 266
7280: PUSH
7281: LD_INT 32
7283: EQUAL
7284: IFFALSE 7381
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7286: LD_ADDR_VAR 0 4
7290: PUSH
7291: LD_VAR 0 4
7295: PUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: CALL_OW 266
7305: PUSH
7306: LD_VAR 0 3
7310: PPUSH
7311: CALL_OW 250
7315: PUSH
7316: LD_VAR 0 3
7320: PPUSH
7321: CALL_OW 251
7325: PUSH
7326: LD_VAR 0 3
7330: PPUSH
7331: CALL_OW 254
7335: PUSH
7336: LD_VAR 0 3
7340: PPUSH
7341: CALL_OW 267
7345: PUSH
7346: LD_VAR 0 3
7350: PPUSH
7351: CALL_OW 248
7355: PUSH
7356: LD_VAR 0 3
7360: PPUSH
7361: CALL_OW 269
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: ADD
7378: ST_TO_ADDR
7379: GO 7566
// if GetBType ( i ) = b_factory then
7381: LD_VAR 0 3
7385: PPUSH
7386: CALL_OW 266
7390: PUSH
7391: LD_INT 3
7393: EQUAL
7394: IFFALSE 7484
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7396: LD_ADDR_VAR 0 4
7400: PUSH
7401: LD_VAR 0 4
7405: PPUSH
7406: LD_INT 1
7408: PPUSH
7409: LD_VAR 0 3
7413: PPUSH
7414: CALL_OW 266
7418: PUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 250
7428: PUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 251
7438: PUSH
7439: LD_VAR 0 3
7443: PPUSH
7444: CALL_OW 254
7448: PUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 267
7458: PUSH
7459: LD_VAR 0 3
7463: PPUSH
7464: CALL_OW 248
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 2
7481: ST_TO_ADDR
7482: GO 7566
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7484: LD_ADDR_VAR 0 4
7488: PUSH
7489: LD_VAR 0 4
7493: PUSH
7494: LD_VAR 0 3
7498: PPUSH
7499: CALL_OW 266
7503: PUSH
7504: LD_VAR 0 3
7508: PPUSH
7509: CALL_OW 250
7513: PUSH
7514: LD_VAR 0 3
7518: PPUSH
7519: CALL_OW 251
7523: PUSH
7524: LD_VAR 0 3
7528: PPUSH
7529: CALL_OW 254
7533: PUSH
7534: LD_VAR 0 3
7538: PPUSH
7539: CALL_OW 267
7543: PUSH
7544: LD_VAR 0 3
7548: PPUSH
7549: CALL_OW 248
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: PUSH
7562: EMPTY
7563: LIST
7564: ADD
7565: ST_TO_ADDR
// end ;
7566: GO 7130
7568: POP
7569: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7570: LD_VAR 0 4
7574: PPUSH
7575: LD_STRING 08_GammaBase
7577: PPUSH
7578: CALL_OW 39
// end ;
7582: LD_VAR 0 2
7586: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7587: LD_INT 0
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: LD_INT 17
7603: PPUSH
7604: LD_INT 22
7606: PUSH
7607: LD_INT 1
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 21
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: LD_INT 33
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 70
7657: ST_TO_ADDR
// if tmp then
7658: LD_VAR 0 3
7662: IFFALSE 7781
// begin for i in tmp do
7664: LD_ADDR_VAR 0 2
7668: PUSH
7669: LD_VAR 0 3
7673: PUSH
7674: FOR_IN
7675: IFFALSE 7706
// begin SetSide ( i , 4 ) ;
7677: LD_VAR 0 2
7681: PPUSH
7682: LD_INT 4
7684: PPUSH
7685: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 42
7696: PPUSH
7697: LD_INT 22
7699: PPUSH
7700: CALL_OW 111
// end ;
7704: GO 7674
7706: POP
7707: POP
// repeat wait ( 0 0$3 ) ;
7708: LD_INT 105
7710: PPUSH
7711: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7715: LD_VAR 0 3
7719: PPUSH
7720: LD_INT 51
7722: PPUSH
7723: LD_INT 16
7725: PPUSH
7726: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
7730: LD_VAR 0 3
7734: PPUSH
7735: LD_INT 95
7737: PUSH
7738: LD_INT 17
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PPUSH
7745: CALL_OW 72
7749: NOT
7750: IFFALSE 7708
// for i in tmp do
7752: LD_ADDR_VAR 0 2
7756: PUSH
7757: LD_VAR 0 3
7761: PUSH
7762: FOR_IN
7763: IFFALSE 7779
// SetSide ( i , 1 ) ;
7765: LD_VAR 0 2
7769: PPUSH
7770: LD_INT 1
7772: PPUSH
7773: CALL_OW 235
7777: GO 7762
7779: POP
7780: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
7781: LD_ADDR_VAR 0 3
7785: PUSH
7786: LD_INT 17
7788: PPUSH
7789: LD_INT 22
7791: PUSH
7792: LD_INT 1
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 33
7801: PUSH
7802: LD_INT 2
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PPUSH
7813: CALL_OW 70
7817: ST_TO_ADDR
// if tmp then
7818: LD_VAR 0 3
7822: IFFALSE 7846
// begin ComMoveXY ( tmp , 40 , 32 ) ;
7824: LD_VAR 0 3
7828: PPUSH
7829: LD_INT 40
7831: PPUSH
7832: LD_INT 32
7834: PPUSH
7835: CALL_OW 111
// wait ( 0 0$3 ) ;
7839: LD_INT 105
7841: PPUSH
7842: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7846: LD_ADDR_VAR 0 3
7850: PUSH
7851: LD_INT 17
7853: PPUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 2
7866: PUSH
7867: LD_INT 21
7869: PUSH
7870: LD_INT 2
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 21
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 70
7900: ST_TO_ADDR
// if tmp then
7901: LD_VAR 0 3
7905: IFFALSE 8053
// begin repeat wait ( 0 0$1 ) ;
7907: LD_INT 35
7909: PPUSH
7910: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_INT 17
7921: PPUSH
7922: LD_INT 22
7924: PUSH
7925: LD_INT 1
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: LD_INT 21
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 21
7947: PUSH
7948: LD_INT 3
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 70
7968: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
7969: LD_ADDR_VAR 0 2
7973: PUSH
7974: LD_INT 22
7976: PUSH
7977: LD_INT 4
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 2
7986: PUSH
7987: LD_INT 25
7989: PUSH
7990: LD_INT 1
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 2
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PPUSH
8016: CALL_OW 69
8020: PUSH
8021: FOR_IN
8022: IFFALSE 8044
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8024: LD_VAR 0 2
8028: PPUSH
8029: LD_VAR 0 3
8033: PUSH
8034: LD_INT 1
8036: ARRAY
8037: PPUSH
8038: CALL_OW 115
8042: GO 8021
8044: POP
8045: POP
// until not tmp ;
8046: LD_VAR 0 3
8050: NOT
8051: IFFALSE 7907
// end ; wait ( 0 0$2 ) ;
8053: LD_INT 70
8055: PPUSH
8056: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8060: LD_ADDR_VAR 0 3
8064: PUSH
8065: LD_INT 22
8067: PUSH
8068: LD_INT 4
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: ST_TO_ADDR
// AgressiveMove ( tmp , [ [ 55 , 62 ] ] ) ;
8080: LD_VAR 0 3
8084: PPUSH
8085: LD_INT 55
8087: PUSH
8088: LD_INT 62
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: PPUSH
8098: CALL 79795 0 2
// AddComWait ( tmp , 0 0$05 ) ;
8102: LD_VAR 0 3
8106: PPUSH
8107: LD_INT 175
8109: PPUSH
8110: CALL_OW 202
// wait ( 0 0$5 ) ;
8114: LD_INT 175
8116: PPUSH
8117: CALL_OW 67
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
8121: LD_VAR 0 3
8125: PPUSH
8126: LD_INT 120
8128: PUSH
8129: LD_INT 101
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PPUSH
8136: CALL_OW 72
8140: PPUSH
8141: LD_INT 58
8143: PPUSH
8144: LD_INT 96
8146: PPUSH
8147: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8151: LD_VAR 0 3
8155: PPUSH
8156: LD_INT 120
8158: PUSH
8159: LD_INT 101
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PPUSH
8166: CALL_OW 72
8170: PPUSH
8171: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
8175: LD_VAR 0 3
8179: PPUSH
8180: LD_INT 120
8182: PUSH
8183: LD_INT 101
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 25
8192: PUSH
8193: LD_INT 4
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PPUSH
8204: CALL_OW 72
8208: PPUSH
8209: LD_INT 52
8211: PPUSH
8212: LD_INT 93
8214: PPUSH
8215: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8219: LD_VAR 0 3
8223: PPUSH
8224: LD_INT 120
8226: PUSH
8227: LD_INT 101
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 25
8236: PUSH
8237: LD_INT 4
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PPUSH
8248: CALL_OW 72
8252: PPUSH
8253: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_VAR 0 3
8266: PPUSH
8267: LD_INT 21
8269: PUSH
8270: LD_INT 2
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PPUSH
8277: CALL_OW 72
8281: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8282: LD_ADDR_VAR 0 4
8286: PUSH
8287: LD_INT 81
8289: PUSH
8290: LD_INT 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 69
8301: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8302: LD_ADDR_VAR 0 5
8306: PUSH
8307: LD_INT 57
8309: PUSH
8310: LD_INT 66
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 62
8319: PUSH
8320: LD_INT 58
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8331: LD_INT 35
8333: PPUSH
8334: CALL_OW 67
// for i in filter do
8338: LD_ADDR_VAR 0 2
8342: PUSH
8343: LD_VAR 0 7
8347: PUSH
8348: FOR_IN
8349: IFFALSE 8788
// begin if IsDead ( i ) then
8351: LD_VAR 0 2
8355: PPUSH
8356: CALL_OW 301
8360: IFFALSE 8380
// begin filter := filter diff i ;
8362: LD_ADDR_VAR 0 7
8366: PUSH
8367: LD_VAR 0 7
8371: PUSH
8372: LD_VAR 0 2
8376: DIFF
8377: ST_TO_ADDR
// continue ;
8378: GO 8348
// end ; tmp := IsDrivenBy ( i ) ;
8380: LD_ADDR_VAR 0 3
8384: PUSH
8385: LD_VAR 0 2
8389: PPUSH
8390: CALL_OW 311
8394: ST_TO_ADDR
// if not tmp then
8395: LD_VAR 0 3
8399: NOT
8400: IFFALSE 8404
// continue ;
8402: GO 8348
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8404: LD_VAR 0 2
8408: PPUSH
8409: CALL_OW 261
8413: PUSH
8414: LD_INT 30
8416: GREATER
8417: PUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: CALL_OW 110
8427: PUSH
8428: LD_INT 2
8430: EQUAL
8431: AND
8432: IFFALSE 8448
// SetTag ( i , 0 ) else
8434: LD_VAR 0 2
8438: PPUSH
8439: LD_INT 0
8441: PPUSH
8442: CALL_OW 109
8446: GO 8492
// if GetTag ( i ) = 2 then
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 110
8457: PUSH
8458: LD_INT 2
8460: EQUAL
8461: IFFALSE 8492
// begin ComMoveXY ( i , 52 , 50 ) ;
8463: LD_VAR 0 2
8467: PPUSH
8468: LD_INT 52
8470: PPUSH
8471: LD_INT 50
8473: PPUSH
8474: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: LD_EXP 31
8487: PPUSH
8488: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8492: LD_VAR 0 2
8496: PPUSH
8497: CALL_OW 256
8501: PUSH
8502: LD_INT 600
8504: GREATEREQUAL
8505: PUSH
8506: LD_VAR 0 2
8510: PPUSH
8511: CALL_OW 110
8515: NOT
8516: AND
8517: IFFALSE 8543
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8519: LD_VAR 0 2
8523: PPUSH
8524: LD_VAR 0 4
8528: PPUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: CALL_OW 74
8538: PPUSH
8539: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8543: LD_VAR 0 2
8547: PPUSH
8548: CALL_OW 256
8552: PUSH
8553: LD_INT 600
8555: LESS
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 110
8566: NOT
8567: AND
8568: IFFALSE 8644
// begin SetTag ( i , 1 ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_INT 1
8577: PPUSH
8578: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8582: LD_ADDR_VAR 0 6
8586: PUSH
8587: LD_VAR 0 2
8591: PPUSH
8592: LD_VAR 0 5
8596: PPUSH
8597: CALL 80535 0 2
8601: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 6
8611: PUSH
8612: LD_INT 1
8614: ARRAY
8615: PPUSH
8616: LD_VAR 0 6
8620: PUSH
8621: LD_INT 2
8623: ARRAY
8624: PPUSH
8625: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_INT 40
8636: PPUSH
8637: LD_INT 49
8639: PPUSH
8640: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8644: LD_VAR 0 2
8648: PPUSH
8649: CALL_OW 110
8653: PUSH
8654: LD_INT 1
8656: EQUAL
8657: PUSH
8658: LD_VAR 0 2
8662: PPUSH
8663: LD_INT 40
8665: PPUSH
8666: LD_INT 49
8668: PPUSH
8669: CALL_OW 297
8673: PUSH
8674: LD_INT 9
8676: LESS
8677: AND
8678: PUSH
8679: LD_VAR 0 3
8683: AND
8684: IFFALSE 8786
// begin ComExitVehicle ( tmp ) ;
8686: LD_VAR 0 3
8690: PPUSH
8691: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8695: LD_VAR 0 3
8699: PPUSH
8700: LD_VAR 0 2
8704: PPUSH
8705: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8709: LD_INT 35
8711: PPUSH
8712: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8716: LD_VAR 0 2
8720: PPUSH
8721: CALL_OW 256
8725: PUSH
8726: LD_INT 1000
8728: EQUAL
8729: IFFALSE 8709
// ComEnterUnit ( tmp , i ) ;
8731: LD_VAR 0 3
8735: PPUSH
8736: LD_VAR 0 2
8740: PPUSH
8741: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 261
8754: PUSH
8755: LD_INT 40
8757: LESSEQUAL
8758: IFFALSE 8774
// SetTag ( i , 2 ) else
8760: LD_VAR 0 2
8764: PPUSH
8765: LD_INT 2
8767: PPUSH
8768: CALL_OW 109
8772: GO 8786
// SetTag ( i , 0 ) ;
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_INT 0
8781: PPUSH
8782: CALL_OW 109
// end ; end ;
8786: GO 8348
8788: POP
8789: POP
// until not filter ;
8790: LD_VAR 0 7
8794: NOT
8795: IFFALSE 8331
// end ; end_of_file
8797: LD_VAR 0 1
8801: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8802: LD_INT 0
8804: PPUSH
8805: PPUSH
8806: PPUSH
8807: PPUSH
8808: PPUSH
// uc_side := 3 ;
8809: LD_ADDR_OWVAR 20
8813: PUSH
8814: LD_INT 3
8816: ST_TO_ADDR
// uc_nation := 3 ;
8817: LD_ADDR_OWVAR 21
8821: PUSH
8822: LD_INT 3
8824: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8825: LD_ADDR_EXP 33
8829: PUSH
8830: LD_INT 8
8832: PUSH
8833: LD_INT 11
8835: PUSH
8836: LD_INT 14
8838: PUSH
8839: LD_INT 17
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_OWVAR 67
8852: ARRAY
8853: ST_TO_ADDR
// ruMobile := [ ] ;
8854: LD_ADDR_EXP 34
8858: PUSH
8859: EMPTY
8860: ST_TO_ADDR
// ruBuildList := [ ] ;
8861: LD_ADDR_EXP 35
8865: PUSH
8866: EMPTY
8867: ST_TO_ADDR
// russianAttackers := [ ] ;
8868: LD_ADDR_EXP 36
8872: PUSH
8873: EMPTY
8874: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8875: LD_ADDR_VAR 0 5
8879: PUSH
8880: LD_INT 43
8882: PUSH
8883: LD_INT 44
8885: PUSH
8886: LD_INT 46
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: ST_TO_ADDR
// if Difficulty > 2 then
8894: LD_OWVAR 67
8898: PUSH
8899: LD_INT 2
8901: GREATER
8902: IFFALSE 8925
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8904: LD_ADDR_VAR 0 5
8908: PUSH
8909: LD_VAR 0 5
8913: PUSH
8914: LD_INT 45
8916: PUSH
8917: LD_INT 46
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: ADD
8924: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8925: LD_ADDR_EXP 32
8929: PUSH
8930: LD_STRING Borodin
8932: PPUSH
8933: CALL_OW 25
8937: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8938: LD_EXP 32
8942: PPUSH
8943: LD_INT 28
8945: PPUSH
8946: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8950: LD_INT 28
8952: PPUSH
8953: CALL_OW 274
8957: PPUSH
8958: LD_INT 1
8960: PPUSH
8961: LD_INT 3000
8963: PUSH
8964: LD_INT 4000
8966: PUSH
8967: LD_INT 5000
8969: PUSH
8970: LD_INT 6000
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: LD_OWVAR 67
8983: ARRAY
8984: PPUSH
8985: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8989: LD_INT 28
8991: PPUSH
8992: CALL_OW 274
8996: PPUSH
8997: LD_INT 2
8999: PPUSH
9000: LD_INT 1000
9002: PPUSH
9003: CALL_OW 277
// if Difficulty > 2 then
9007: LD_OWVAR 67
9011: PUSH
9012: LD_INT 2
9014: GREATER
9015: IFFALSE 9139
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: LD_INT 99
9024: PUSH
9025: LD_INT 130
9027: PUSH
9028: LD_INT 2
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 121
9038: PUSH
9039: LD_INT 127
9041: PUSH
9042: LD_INT 4
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 117
9052: PUSH
9053: LD_INT 121
9055: PUSH
9056: LD_INT 4
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: ST_TO_ADDR
// for i in tmp do
9069: LD_ADDR_VAR 0 2
9073: PUSH
9074: LD_VAR 0 4
9078: PUSH
9079: FOR_IN
9080: IFFALSE 9137
// begin bc_type := b_turret ;
9082: LD_ADDR_OWVAR 42
9086: PUSH
9087: LD_INT 33
9089: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9090: LD_ADDR_OWVAR 43
9094: PUSH
9095: LD_INT 2
9097: PUSH
9098: LD_OWVAR 67
9102: PLUS
9103: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9104: LD_VAR 0 2
9108: PUSH
9109: LD_INT 1
9111: ARRAY
9112: PPUSH
9113: LD_VAR 0 2
9117: PUSH
9118: LD_INT 2
9120: ARRAY
9121: PPUSH
9122: LD_VAR 0 2
9126: PUSH
9127: LD_INT 3
9129: ARRAY
9130: PPUSH
9131: CALL_OW 47
// end ;
9135: GO 9079
9137: POP
9138: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9139: LD_ADDR_VAR 0 2
9143: PUSH
9144: LD_INT 22
9146: PUSH
9147: LD_INT 3
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 21
9156: PUSH
9157: LD_INT 3
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PUSH
9173: FOR_IN
9174: IFFALSE 9196
// SetBLevel ( i , 2 + Difficulty ) ;
9176: LD_VAR 0 2
9180: PPUSH
9181: LD_INT 2
9183: PUSH
9184: LD_OWVAR 67
9188: PLUS
9189: PPUSH
9190: CALL_OW 241
9194: GO 9173
9196: POP
9197: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9198: LD_ADDR_VAR 0 4
9202: PUSH
9203: LD_INT 22
9205: PUSH
9206: LD_INT 3
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: LD_INT 32
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 30
9228: PUSH
9229: LD_INT 33
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: CALL_OW 69
9249: ST_TO_ADDR
// for i in tmp do
9250: LD_ADDR_VAR 0 2
9254: PUSH
9255: LD_VAR 0 4
9259: PUSH
9260: FOR_IN
9261: IFFALSE 9293
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9263: LD_VAR 0 2
9267: PPUSH
9268: LD_VAR 0 5
9272: PUSH
9273: LD_INT 1
9275: PPUSH
9276: LD_VAR 0 5
9280: PPUSH
9281: CALL_OW 12
9285: ARRAY
9286: PPUSH
9287: CALL_OW 431
9291: GO 9260
9293: POP
9294: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_INT 22
9302: PUSH
9303: LD_INT 3
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 30
9312: PUSH
9313: LD_INT 32
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 69
9328: PUSH
9329: FOR_IN
9330: IFFALSE 9379
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9332: LD_INT 0
9334: PPUSH
9335: LD_INT 5
9337: PUSH
9338: LD_INT 6
9340: PUSH
9341: LD_INT 7
9343: PUSH
9344: LD_INT 8
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: LD_OWVAR 67
9357: ARRAY
9358: PPUSH
9359: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9363: CALL_OW 44
9367: PPUSH
9368: LD_VAR 0 2
9372: PPUSH
9373: CALL_OW 52
// end ;
9377: GO 9329
9379: POP
9380: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 3
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 30
9398: PUSH
9399: LD_INT 5
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PPUSH
9410: CALL_OW 69
9414: PUSH
9415: FOR_IN
9416: IFFALSE 9506
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: DOUBLE
9424: LD_INT 1
9426: DEC
9427: ST_TO_ADDR
9428: LD_INT 2
9430: PUSH
9431: LD_INT 3
9433: PUSH
9434: LD_INT 4
9436: PUSH
9437: LD_INT 5
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_OWVAR 67
9450: ARRAY
9451: PUSH
9452: FOR_TO
9453: IFFALSE 9502
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9455: LD_INT 0
9457: PPUSH
9458: LD_INT 5
9460: PUSH
9461: LD_INT 6
9463: PUSH
9464: LD_INT 7
9466: PUSH
9467: LD_INT 8
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: LD_OWVAR 67
9480: ARRAY
9481: PPUSH
9482: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9486: CALL_OW 44
9490: PPUSH
9491: LD_VAR 0 2
9495: PPUSH
9496: CALL_OW 52
// end ;
9500: GO 9452
9502: POP
9503: POP
// end ;
9504: GO 9415
9506: POP
9507: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_INT 3
9520: PUSH
9521: LD_INT 4
9523: PUSH
9524: LD_INT 5
9526: PUSH
9527: LD_INT 5
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: LD_OWVAR 67
9540: ARRAY
9541: PUSH
9542: FOR_TO
9543: IFFALSE 9590
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9545: LD_INT 0
9547: PPUSH
9548: LD_INT 4
9550: PUSH
9551: LD_INT 5
9553: PUSH
9554: LD_INT 5
9556: PUSH
9557: LD_INT 6
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: PUSH
9566: LD_OWVAR 67
9570: ARRAY
9571: PPUSH
9572: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9576: CALL_OW 44
9580: PPUSH
9581: LD_INT 28
9583: PPUSH
9584: CALL_OW 52
// end ;
9588: GO 9542
9590: POP
9591: POP
// for i := 1 to 2 do
9592: LD_ADDR_VAR 0 2
9596: PUSH
9597: DOUBLE
9598: LD_INT 1
9600: DEC
9601: ST_TO_ADDR
9602: LD_INT 2
9604: PUSH
9605: FOR_TO
9606: IFFALSE 9640
// begin PrepareScientist ( false , 6 ) ;
9608: LD_INT 0
9610: PPUSH
9611: LD_INT 6
9613: PPUSH
9614: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9618: CALL_OW 44
9622: PPUSH
9623: LD_INT 81
9625: PPUSH
9626: LD_INT 93
9628: PPUSH
9629: CALL_OW 428
9633: PPUSH
9634: CALL_OW 52
// end ;
9638: GO 9605
9640: POP
9641: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9642: LD_INT 22
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_INT 51
9653: PPUSH
9654: LD_INT 100
9656: PPUSH
9657: CALL 44738 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9661: CALL_OW 45
9665: PPUSH
9666: LD_INT 91
9668: PPUSH
9669: LD_INT 94
9671: PPUSH
9672: LD_INT 3
9674: PPUSH
9675: LD_INT 0
9677: PPUSH
9678: CALL_OW 50
// for i := 1 to 2 do
9682: LD_ADDR_VAR 0 2
9686: PUSH
9687: DOUBLE
9688: LD_INT 1
9690: DEC
9691: ST_TO_ADDR
9692: LD_INT 2
9694: PUSH
9695: FOR_TO
9696: IFFALSE 9740
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9698: LD_INT 22
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: LD_INT 3
9706: PPUSH
9707: LD_INT 52
9709: PPUSH
9710: LD_INT 100
9712: PPUSH
9713: CALL 44738 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9717: CALL_OW 45
9721: PPUSH
9722: LD_INT 91
9724: PPUSH
9725: LD_INT 94
9727: PPUSH
9728: LD_INT 4
9730: PPUSH
9731: LD_INT 0
9733: PPUSH
9734: CALL_OW 50
// end ;
9738: GO 9695
9740: POP
9741: POP
// end ;
9742: LD_VAR 0 1
9746: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
// uc_side := 3 ;
9754: LD_ADDR_OWVAR 20
9758: PUSH
9759: LD_INT 3
9761: ST_TO_ADDR
// uc_nation := 3 ;
9762: LD_ADDR_OWVAR 21
9766: PUSH
9767: LD_INT 3
9769: ST_TO_ADDR
// for i := 1 to 4 do
9770: LD_ADDR_VAR 0 2
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_INT 4
9782: PUSH
9783: FOR_TO
9784: IFFALSE 9911
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9786: LD_INT 22
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: LD_INT 42
9797: PUSH
9798: LD_INT 43
9800: PUSH
9801: LD_INT 44
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: PUSH
9809: LD_INT 1
9811: PPUSH
9812: LD_INT 3
9814: PPUSH
9815: CALL_OW 12
9819: ARRAY
9820: PPUSH
9821: LD_INT 40
9823: PPUSH
9824: CALL 44738 0 5
// veh := CreateVehicle ;
9828: LD_ADDR_VAR 0 4
9832: PUSH
9833: CALL_OW 45
9837: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9838: LD_VAR 0 4
9842: PPUSH
9843: LD_INT 5
9845: PPUSH
9846: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9850: LD_VAR 0 4
9854: PPUSH
9855: LD_INT 7
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9865: LD_INT 0
9867: PPUSH
9868: LD_INT 5
9870: PPUSH
9871: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9875: CALL_OW 44
9879: PPUSH
9880: LD_VAR 0 4
9884: PPUSH
9885: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9889: LD_ADDR_VAR 0 5
9893: PUSH
9894: LD_VAR 0 5
9898: PPUSH
9899: LD_VAR 0 4
9903: PPUSH
9904: CALL 77191 0 2
9908: ST_TO_ADDR
// end ;
9909: GO 9783
9911: POP
9912: POP
// for i := 1 to 3 do
9913: LD_ADDR_VAR 0 2
9917: PUSH
9918: DOUBLE
9919: LD_INT 1
9921: DEC
9922: ST_TO_ADDR
9923: LD_INT 3
9925: PUSH
9926: FOR_TO
9927: IFFALSE 10054
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9929: LD_INT 22
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: LD_INT 42
9940: PUSH
9941: LD_INT 43
9943: PUSH
9944: LD_INT 44
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 1
9954: PPUSH
9955: LD_INT 3
9957: PPUSH
9958: CALL_OW 12
9962: ARRAY
9963: PPUSH
9964: LD_INT 40
9966: PPUSH
9967: CALL 44738 0 5
// veh := CreateVehicle ;
9971: LD_ADDR_VAR 0 4
9975: PUSH
9976: CALL_OW 45
9980: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9981: LD_VAR 0 4
9985: PPUSH
9986: LD_INT 5
9988: PPUSH
9989: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9993: LD_VAR 0 4
9997: PPUSH
9998: LD_INT 8
10000: PPUSH
10001: LD_INT 0
10003: PPUSH
10004: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10008: LD_INT 0
10010: PPUSH
10011: LD_INT 5
10013: PPUSH
10014: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10018: CALL_OW 44
10022: PPUSH
10023: LD_VAR 0 4
10027: PPUSH
10028: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10032: LD_ADDR_VAR 0 5
10036: PUSH
10037: LD_VAR 0 5
10041: PPUSH
10042: LD_VAR 0 4
10046: PPUSH
10047: CALL 77191 0 2
10051: ST_TO_ADDR
// end ;
10052: GO 9926
10054: POP
10055: POP
// for i := 1 to 2 do
10056: LD_ADDR_VAR 0 2
10060: PUSH
10061: DOUBLE
10062: LD_INT 1
10064: DEC
10065: ST_TO_ADDR
10066: LD_INT 2
10068: PUSH
10069: FOR_TO
10070: IFFALSE 10129
// begin PrepareSoldier ( false , 5 ) ;
10072: LD_INT 0
10074: PPUSH
10075: LD_INT 5
10077: PPUSH
10078: CALL_OW 381
// un := CreateHuman ;
10082: LD_ADDR_VAR 0 3
10086: PUSH
10087: CALL_OW 44
10091: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10092: LD_VAR 0 3
10096: PPUSH
10097: LD_INT 8
10099: PPUSH
10100: LD_INT 0
10102: PPUSH
10103: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10107: LD_ADDR_VAR 0 5
10111: PUSH
10112: LD_VAR 0 5
10116: PPUSH
10117: LD_VAR 0 3
10121: PPUSH
10122: CALL 77191 0 2
10126: ST_TO_ADDR
// end ;
10127: GO 10069
10129: POP
10130: POP
// for i in tmp do
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_VAR 0 5
10140: PUSH
10141: FOR_IN
10142: IFFALSE 10161
// ComAgressiveMove ( i , 51 , 16 ) ;
10144: LD_VAR 0 2
10148: PPUSH
10149: LD_INT 51
10151: PPUSH
10152: LD_INT 16
10154: PPUSH
10155: CALL_OW 114
10159: GO 10141
10161: POP
10162: POP
// end ;
10163: LD_VAR 0 1
10167: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10168: LD_EXP 34
10172: IFFALSE 10747
10174: GO 10176
10176: DISABLE
10177: LD_INT 0
10179: PPUSH
10180: PPUSH
10181: PPUSH
// begin enable ;
10182: ENABLE
// if not ruMobile then
10183: LD_EXP 34
10187: NOT
10188: IFFALSE 10192
// exit ;
10190: GO 10747
// for i in ruMobile do
10192: LD_ADDR_VAR 0 1
10196: PUSH
10197: LD_EXP 34
10201: PUSH
10202: FOR_IN
10203: IFFALSE 10745
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 302
10214: NOT
10215: PUSH
10216: LD_VAR 0 1
10220: PPUSH
10221: CALL_OW 255
10225: PUSH
10226: LD_INT 3
10228: NONEQUAL
10229: OR
10230: IFFALSE 10250
// begin ruMobile := ruMobile diff i ;
10232: LD_ADDR_EXP 34
10236: PUSH
10237: LD_EXP 34
10241: PUSH
10242: LD_VAR 0 1
10246: DIFF
10247: ST_TO_ADDR
// continue ;
10248: GO 10202
// end ; if GetTag ( i ) = 300 then
10250: LD_VAR 0 1
10254: PPUSH
10255: CALL_OW 110
10259: PUSH
10260: LD_INT 300
10262: EQUAL
10263: IFFALSE 10378
// begin if GetFuel ( i ) < 50 then
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL_OW 261
10274: PUSH
10275: LD_INT 50
10277: LESS
10278: IFFALSE 10337
// begin ComMoveXY ( i , 93 , 100 ) ;
10280: LD_VAR 0 1
10284: PPUSH
10285: LD_INT 93
10287: PPUSH
10288: LD_INT 100
10290: PPUSH
10291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10295: LD_INT 35
10297: PPUSH
10298: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_INT 93
10309: PPUSH
10310: LD_INT 100
10312: PPUSH
10313: CALL_OW 297
10317: PUSH
10318: LD_INT 4
10320: LESS
10321: IFFALSE 10295
// SetFuel ( i , 100 ) ;
10323: LD_VAR 0 1
10327: PPUSH
10328: LD_INT 100
10330: PPUSH
10331: CALL_OW 240
// end else
10335: GO 10378
// if not IsInArea ( i , ruParkingArea ) then
10337: LD_VAR 0 1
10341: PPUSH
10342: LD_INT 10
10344: PPUSH
10345: CALL_OW 308
10349: NOT
10350: IFFALSE 10366
// ComMoveToArea ( i , ruParkingArea ) else
10352: LD_VAR 0 1
10356: PPUSH
10357: LD_INT 10
10359: PPUSH
10360: CALL_OW 113
10364: GO 10378
// SetTag ( i , 301 ) ;
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_INT 301
10373: PPUSH
10374: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10378: LD_VAR 0 1
10382: PPUSH
10383: CALL_OW 110
10387: PUSH
10388: LD_INT 301
10390: EQUAL
10391: IFFALSE 10521
// begin if GetLives ( i ) < 1000 then
10393: LD_VAR 0 1
10397: PPUSH
10398: CALL_OW 256
10402: PUSH
10403: LD_INT 1000
10405: LESS
10406: IFFALSE 10498
// begin if not IsDrivenBy ( i ) then
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 311
10417: NOT
10418: IFFALSE 10422
// continue ;
10420: GO 10202
// mech := IsDrivenBy ( i ) ;
10422: LD_ADDR_VAR 0 2
10426: PUSH
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 311
10436: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10437: LD_VAR 0 2
10441: PPUSH
10442: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10446: LD_VAR 0 2
10450: PPUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10460: LD_INT 35
10462: PPUSH
10463: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10467: LD_VAR 0 1
10471: PPUSH
10472: CALL_OW 256
10476: PUSH
10477: LD_INT 1000
10479: EQUAL
10480: IFFALSE 10460
// ComEnterUnit ( mech , i ) ;
10482: LD_VAR 0 2
10486: PPUSH
10487: LD_VAR 0 1
10491: PPUSH
10492: CALL_OW 120
// end else
10496: GO 10521
// if IsDrivenBy ( i ) then
10498: LD_VAR 0 1
10502: PPUSH
10503: CALL_OW 311
10507: IFFALSE 10521
// SetTag ( i , 0 ) ;
10509: LD_VAR 0 1
10513: PPUSH
10514: LD_INT 0
10516: PPUSH
10517: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10521: LD_VAR 0 1
10525: PPUSH
10526: CALL_OW 110
10530: PUSH
10531: LD_INT 300
10533: LESS
10534: IFFALSE 10743
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10536: LD_ADDR_VAR 0 3
10540: PUSH
10541: LD_INT 11
10543: PPUSH
10544: LD_INT 81
10546: PUSH
10547: LD_INT 3
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 70
10558: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10559: LD_VAR 0 1
10563: PPUSH
10564: CALL_OW 256
10568: PUSH
10569: LD_INT 650
10571: LESS
10572: IFFALSE 10597
// begin ComStop ( i ) ;
10574: LD_VAR 0 1
10578: PPUSH
10579: CALL_OW 141
// SetTag ( i , 300 ) ;
10583: LD_VAR 0 1
10587: PPUSH
10588: LD_INT 300
10590: PPUSH
10591: CALL_OW 109
// continue ;
10595: GO 10202
// end ; if enemy then
10597: LD_VAR 0 3
10601: IFFALSE 10641
// begin if not HasTask ( i ) then
10603: LD_VAR 0 1
10607: PPUSH
10608: CALL_OW 314
10612: NOT
10613: IFFALSE 10639
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10615: LD_VAR 0 1
10619: PPUSH
10620: LD_VAR 0 3
10624: PPUSH
10625: LD_VAR 0 1
10629: PPUSH
10630: CALL_OW 74
10634: PPUSH
10635: CALL_OW 115
// end else
10639: GO 10743
// if ruMobile > 2 then
10641: LD_EXP 34
10645: PUSH
10646: LD_INT 2
10648: GREATER
10649: IFFALSE 10743
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10651: LD_ADDR_VAR 0 3
10655: PUSH
10656: LD_INT 81
10658: PUSH
10659: LD_INT 3
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 69
10670: ST_TO_ADDR
// if enemy then
10671: LD_VAR 0 3
10675: IFFALSE 10743
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10677: LD_VAR 0 1
10681: PPUSH
10682: LD_INT 116
10684: PUSH
10685: LD_INT 95
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 84
10694: PUSH
10695: LD_INT 68
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 58
10704: PUSH
10705: LD_INT 53
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 44
10714: PUSH
10715: LD_INT 35
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 45
10724: PUSH
10725: LD_INT 23
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: PPUSH
10739: CALL 79795 0 2
// end ; end ; end ;
10743: GO 10202
10745: POP
10746: POP
// end ;
10747: PPOPN 3
10749: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10750: LD_INT 3
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 32
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PPUSH
10781: CALL_OW 69
10785: IFFALSE 10869
10787: GO 10789
10789: DISABLE
10790: LD_INT 0
10792: PPUSH
// begin enable ;
10793: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_INT 3
10801: PUSH
10802: LD_INT 22
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 32
10818: PUSH
10819: LD_INT 1
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PPUSH
10830: CALL_OW 69
10834: PUSH
10835: FOR_IN
10836: IFFALSE 10867
// if GetFuel ( i ) < 3 then
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 261
10847: PUSH
10848: LD_INT 3
10850: LESS
10851: IFFALSE 10865
// SetFuel ( i , 3 ) ;
10853: LD_VAR 0 1
10857: PPUSH
10858: LD_INT 3
10860: PPUSH
10861: CALL_OW 240
10865: GO 10835
10867: POP
10868: POP
// end ;
10869: PPOPN 1
10871: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10872: LD_INT 29
10874: PPUSH
10875: CALL_OW 302
10879: PUSH
10880: LD_INT 29
10882: PPUSH
10883: CALL_OW 461
10887: PUSH
10888: LD_INT 2
10890: EQUAL
10891: AND
10892: IFFALSE 11125
10894: GO 10896
10896: DISABLE
10897: LD_INT 0
10899: PPUSH
10900: PPUSH
// begin enable ;
10901: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10902: LD_ADDR_VAR 0 1
10906: PUSH
10907: LD_INT 21
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_INT 23
10915: PUSH
10916: LD_INT 24
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_INT 4
10930: PPUSH
10931: CALL_OW 12
10935: ARRAY
10936: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: LD_INT 42
10944: PUSH
10945: LD_INT 44
10947: PUSH
10948: LD_INT 43
10950: PUSH
10951: LD_INT 46
10953: PUSH
10954: LD_INT 45
10956: PUSH
10957: LD_INT 46
10959: PUSH
10960: LD_INT 45
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: LD_OWVAR 67
10976: PUSH
10977: LD_INT 0
10979: PPUSH
10980: LD_INT 3
10982: PPUSH
10983: CALL_OW 12
10987: PLUS
10988: ARRAY
10989: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10990: LD_VAR 0 1
10994: PUSH
10995: LD_INT 21
10997: PUSH
10998: LD_INT 22
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: IN
11005: PUSH
11006: LD_VAR 0 2
11010: PUSH
11011: LD_INT 46
11013: EQUAL
11014: AND
11015: IFFALSE 11044
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11017: LD_ADDR_VAR 0 2
11021: PUSH
11022: LD_INT 44
11024: PUSH
11025: LD_INT 45
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 2
11037: PPUSH
11038: CALL_OW 12
11042: ARRAY
11043: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11044: LD_OWVAR 1
11048: PUSH
11049: LD_INT 25200
11051: PUSH
11052: LD_INT 23100
11054: PUSH
11055: LD_INT 21000
11057: PUSH
11058: LD_INT 18900
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: PUSH
11067: LD_OWVAR 67
11071: ARRAY
11072: LESS
11073: IFFALSE 11102
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11075: LD_ADDR_VAR 0 2
11079: PUSH
11080: LD_INT 44
11082: PUSH
11083: LD_INT 43
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 1
11092: PPUSH
11093: LD_INT 2
11095: PPUSH
11096: CALL_OW 12
11100: ARRAY
11101: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11102: LD_INT 29
11104: PPUSH
11105: LD_VAR 0 1
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: LD_VAR 0 2
11120: PPUSH
11121: CALL_OW 185
// end ;
11125: PPOPN 2
11127: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol ;
11128: LD_INT 28
11130: PPUSH
11131: CALL_OW 302
11135: IFFALSE 12284
11137: GO 11139
11139: DISABLE
11140: LD_INT 0
11142: PPUSH
11143: PPUSH
11144: PPUSH
11145: PPUSH
11146: PPUSH
11147: PPUSH
11148: PPUSH
11149: PPUSH
11150: PPUSH
11151: PPUSH
11152: PPUSH
// begin enable ;
11153: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11154: LD_ADDR_VAR 0 4
11158: PUSH
11159: LD_INT 12
11161: PPUSH
11162: LD_INT 3
11164: PUSH
11165: LD_INT 24
11167: PUSH
11168: LD_INT 1000
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 21
11181: PUSH
11182: LD_INT 3
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 70
11197: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11198: LD_ADDR_VAR 0 5
11202: PUSH
11203: LD_INT 22
11205: PUSH
11206: LD_INT 3
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 2
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11232: LD_ADDR_VAR 0 6
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_INT 3
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 34
11249: PUSH
11250: LD_INT 52
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11266: LD_ADDR_VAR 0 8
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_INT 3
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 4
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 69
11299: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11300: LD_ADDR_VAR 0 9
11304: PUSH
11305: LD_INT 81
11307: PPUSH
11308: LD_INT 93
11310: PPUSH
11311: CALL_OW 428
11315: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11316: LD_ADDR_VAR 0 10
11320: PUSH
11321: LD_INT 22
11323: PUSH
11324: LD_INT 3
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 30
11333: PUSH
11334: LD_INT 32
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 50
11343: PUSH
11344: EMPTY
11345: LIST
11346: PUSH
11347: LD_INT 58
11349: PUSH
11350: EMPTY
11351: LIST
11352: PUSH
11353: LD_INT 3
11355: PUSH
11356: LD_INT 120
11358: PUSH
11359: LD_INT 701
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: ST_TO_ADDR
// if emptyTowers then
11382: LD_VAR 0 10
11386: IFFALSE 11620
// begin for i in emptyTowers do
11388: LD_ADDR_VAR 0 1
11392: PUSH
11393: LD_VAR 0 10
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11618
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11401: LD_ADDR_VAR 0 11
11405: PUSH
11406: LD_INT 22
11408: PUSH
11409: LD_INT 3
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 25
11418: PUSH
11419: LD_INT 1
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 50
11428: PUSH
11429: EMPTY
11430: LIST
11431: PUSH
11432: LD_INT 3
11434: PUSH
11435: LD_INT 120
11437: PUSH
11438: LD_INT 701
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PPUSH
11455: CALL_OW 69
11459: ST_TO_ADDR
// if not sol then
11460: LD_VAR 0 11
11464: NOT
11465: IFFALSE 11469
// break ;
11467: GO 11618
// for j in sol do
11469: LD_ADDR_VAR 0 2
11473: PUSH
11474: LD_VAR 0 11
11478: PUSH
11479: FOR_IN
11480: IFFALSE 11531
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11482: LD_VAR 0 2
11486: PPUSH
11487: CALL_OW 310
11491: PUSH
11492: LD_VAR 0 2
11496: PPUSH
11497: CALL_OW 310
11501: PPUSH
11502: CALL_OW 266
11506: PUSH
11507: LD_INT 32
11509: EQUAL
11510: AND
11511: IFFALSE 11529
// sol := sol diff j ;
11513: LD_ADDR_VAR 0 11
11517: PUSH
11518: LD_VAR 0 11
11522: PUSH
11523: LD_VAR 0 2
11527: DIFF
11528: ST_TO_ADDR
11529: GO 11479
11531: POP
11532: POP
// if not sol then
11533: LD_VAR 0 11
11537: NOT
11538: IFFALSE 11542
// break ;
11540: GO 11618
// if IsInUnit ( sol [ 1 ] ) then
11542: LD_VAR 0 11
11546: PUSH
11547: LD_INT 1
11549: ARRAY
11550: PPUSH
11551: CALL_OW 310
11555: IFFALSE 11570
// ComExit ( sol [ 1 ] ) ;
11557: LD_VAR 0 11
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: CALL 77589 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11570: LD_VAR 0 11
11574: PUSH
11575: LD_INT 1
11577: ARRAY
11578: PPUSH
11579: LD_INT 701
11581: PPUSH
11582: CALL_OW 109
// SetTag ( i , 701 ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_INT 701
11593: PPUSH
11594: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11598: LD_VAR 0 11
11602: PUSH
11603: LD_INT 1
11605: ARRAY
11606: PPUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 180
// end ;
11616: GO 11398
11618: POP
11619: POP
// end ; if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
11620: LD_VAR 0 8
11624: PUSH
11625: LD_VAR 0 5
11629: PPUSH
11630: LD_INT 120
11632: PUSH
11633: LD_INT 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 72
11644: AND
11645: IFFALSE 11658
// ComExitAll ( sci ) else
11647: LD_VAR 0 8
11651: PPUSH
11652: CALL 77672 0 1
11656: GO 11731
// if sci then
11658: LD_VAR 0 8
11662: IFFALSE 11731
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
11664: LD_VAR 0 8
11668: PPUSH
11669: LD_INT 3
11671: PUSH
11672: LD_INT 54
11674: PUSH
11675: EMPTY
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 72
11686: PUSH
11687: LD_VAR 0 9
11691: PPUSH
11692: CALL_OW 302
11696: AND
11697: IFFALSE 11731
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
11699: LD_VAR 0 8
11703: PPUSH
11704: LD_INT 3
11706: PUSH
11707: LD_INT 54
11709: PUSH
11710: EMPTY
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PPUSH
11717: CALL_OW 72
11721: PPUSH
11722: LD_VAR 0 9
11726: PPUSH
11727: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
11731: LD_VAR 0 6
11735: PPUSH
11736: LD_INT 50
11738: PUSH
11739: EMPTY
11740: LIST
11741: PPUSH
11742: CALL_OW 72
11746: PUSH
11747: LD_VAR 0 4
11751: AND
11752: IFFALSE 11783
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
11754: LD_VAR 0 6
11758: PPUSH
11759: LD_INT 50
11761: PUSH
11762: EMPTY
11763: LIST
11764: PPUSH
11765: CALL_OW 72
11769: PPUSH
11770: LD_VAR 0 4
11774: PUSH
11775: LD_INT 1
11777: ARRAY
11778: PPUSH
11779: CALL_OW 130
// if eng then
11783: LD_VAR 0 5
11787: IFFALSE 12284
// begin for i in eng do
11789: LD_ADDR_VAR 0 1
11793: PUSH
11794: LD_VAR 0 5
11798: PUSH
11799: FOR_IN
11800: IFFALSE 12282
// begin tag := GetTag ( i ) ;
11802: LD_ADDR_VAR 0 7
11806: PUSH
11807: LD_VAR 0 1
11811: PPUSH
11812: CALL_OW 110
11816: ST_TO_ADDR
// case tag of 0 :
11817: LD_VAR 0 7
11821: PUSH
11822: LD_INT 0
11824: DOUBLE
11825: EQUAL
11826: IFTRUE 11830
11828: GO 12041
11830: POP
// begin if b then
11831: LD_VAR 0 4
11835: IFFALSE 11851
// begin SetTag ( i , 1 ) ;
11837: LD_VAR 0 1
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 109
// continue ;
11849: GO 11799
// end ; if not ruBuildList then
11851: LD_EXP 35
11855: NOT
11856: IFFALSE 11872
// ComEnterUnit ( i , ruDep ) else
11858: LD_VAR 0 1
11862: PPUSH
11863: LD_INT 28
11865: PPUSH
11866: CALL_OW 120
11870: GO 12039
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11872: LD_INT 11
11874: PPUSH
11875: LD_INT 81
11877: PUSH
11878: LD_INT 3
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PPUSH
11885: CALL_OW 70
11889: PUSH
11890: LD_INT 0
11892: EQUAL
11893: PUSH
11894: LD_INT 28
11896: PPUSH
11897: LD_EXP 35
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PUSH
11906: LD_INT 1
11908: ARRAY
11909: PPUSH
11910: LD_EXP 35
11914: PUSH
11915: LD_INT 1
11917: ARRAY
11918: PUSH
11919: LD_INT 2
11921: ARRAY
11922: PPUSH
11923: LD_EXP 35
11927: PUSH
11928: LD_INT 1
11930: ARRAY
11931: PUSH
11932: LD_INT 3
11934: ARRAY
11935: PPUSH
11936: LD_EXP 35
11940: PUSH
11941: LD_INT 1
11943: ARRAY
11944: PUSH
11945: LD_INT 4
11947: ARRAY
11948: PPUSH
11949: CALL 52957 0 5
11953: AND
11954: IFFALSE 12039
// begin if IsInUnit ( i ) then
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 310
11965: IFFALSE 11978
// ComExitBuilding ( i ) else
11967: LD_VAR 0 1
11971: PPUSH
11972: CALL_OW 122
11976: GO 12039
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11978: LD_VAR 0 1
11982: PPUSH
11983: LD_EXP 35
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PUSH
11992: LD_INT 1
11994: ARRAY
11995: PPUSH
11996: LD_EXP 35
12000: PUSH
12001: LD_INT 1
12003: ARRAY
12004: PUSH
12005: LD_INT 2
12007: ARRAY
12008: PPUSH
12009: LD_EXP 35
12013: PUSH
12014: LD_INT 1
12016: ARRAY
12017: PUSH
12018: LD_INT 3
12020: ARRAY
12021: PPUSH
12022: LD_EXP 35
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PUSH
12031: LD_INT 4
12033: ARRAY
12034: PPUSH
12035: CALL_OW 145
// end ; end ; 1 :
12039: GO 12238
12041: LD_INT 1
12043: DOUBLE
12044: EQUAL
12045: IFTRUE 12049
12047: GO 12152
12049: POP
// begin if not b then
12050: LD_VAR 0 4
12054: NOT
12055: IFFALSE 12071
// begin SetTag ( i , 0 ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_INT 0
12064: PPUSH
12065: CALL_OW 109
// continue ;
12069: GO 11799
// end ; if IsInUnit ( i ) then
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 310
12080: IFFALSE 12091
// ComExitBuilding ( i ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 122
// if GetLives ( i ) < 650 then
12091: LD_VAR 0 1
12095: PPUSH
12096: CALL_OW 256
12100: PUSH
12101: LD_INT 650
12103: LESS
12104: IFFALSE 12120
// begin SetTag ( i , 2 ) ;
12106: LD_VAR 0 1
12110: PPUSH
12111: LD_INT 2
12113: PPUSH
12114: CALL_OW 109
// continue ;
12118: GO 11799
// end ; if b then
12120: LD_VAR 0 4
12124: IFFALSE 12150
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12126: LD_VAR 0 1
12130: PPUSH
12131: LD_VAR 0 4
12135: PPUSH
12136: LD_VAR 0 1
12140: PPUSH
12141: CALL_OW 74
12145: PPUSH
12146: CALL_OW 130
// end ; 2 :
12150: GO 12238
12152: LD_INT 2
12154: DOUBLE
12155: EQUAL
12156: IFTRUE 12160
12158: GO 12237
12160: POP
// begin if GetLives ( i ) = 1000 then
12161: LD_VAR 0 1
12165: PPUSH
12166: CALL_OW 256
12170: PUSH
12171: LD_INT 1000
12173: EQUAL
12174: IFFALSE 12190
// begin SetTag ( i , 1 ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 109
// continue ;
12188: GO 11799
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_INT 84
12197: PPUSH
12198: LD_INT 93
12200: PPUSH
12201: CALL_OW 297
12205: PUSH
12206: LD_INT 6
12208: GREATER
12209: IFFALSE 12235
// begin ComMoveXY ( i , 84 , 93 ) ;
12211: LD_VAR 0 1
12215: PPUSH
12216: LD_INT 84
12218: PPUSH
12219: LD_INT 93
12221: PPUSH
12222: CALL_OW 111
// AddComHold ( i ) ;
12226: LD_VAR 0 1
12230: PPUSH
12231: CALL_OW 200
// end ; end ; end ;
12235: GO 12238
12237: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12238: LD_VAR 0 1
12242: PPUSH
12243: LD_INT 12
12245: PPUSH
12246: CALL_OW 308
12250: NOT
12251: PUSH
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 310
12261: NOT
12262: AND
12263: IFFALSE 12280
// ComMoveXY ( i , 91 , 95 ) ;
12265: LD_VAR 0 1
12269: PPUSH
12270: LD_INT 91
12272: PPUSH
12273: LD_INT 95
12275: PPUSH
12276: CALL_OW 111
// end ;
12280: GO 11799
12282: POP
12283: POP
// end ; end ;
12284: PPOPN 11
12286: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12287: LD_INT 0
12289: PPUSH
12290: PPUSH
12291: PPUSH
12292: PPUSH
12293: PPUSH
12294: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12295: LD_ADDR_VAR 0 3
12299: PUSH
12300: DOUBLE
12301: LD_INT 1
12303: DEC
12304: ST_TO_ADDR
12305: LD_INT 3
12307: PUSH
12308: LD_INT 4
12310: PUSH
12311: LD_INT 5
12313: PUSH
12314: LD_INT 6
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_OWVAR 67
12327: ARRAY
12328: PUSH
12329: LD_VAR 0 1
12333: PLUS
12334: PUSH
12335: FOR_TO
12336: IFFALSE 12653
// begin uc_side := 6 ;
12338: LD_ADDR_OWVAR 20
12342: PUSH
12343: LD_INT 6
12345: ST_TO_ADDR
// uc_nation := 3 ;
12346: LD_ADDR_OWVAR 21
12350: PUSH
12351: LD_INT 3
12353: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12354: LD_ADDR_VAR 0 6
12358: PUSH
12359: LD_INT 21
12361: PUSH
12362: LD_INT 22
12364: PUSH
12365: LD_INT 23
12367: PUSH
12368: LD_INT 24
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 1
12379: PPUSH
12380: LD_INT 4
12382: PPUSH
12383: CALL_OW 12
12387: ARRAY
12388: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12389: LD_ADDR_VAR 0 7
12393: PUSH
12394: LD_INT 42
12396: PUSH
12397: LD_INT 44
12399: PUSH
12400: LD_INT 43
12402: PUSH
12403: LD_INT 46
12405: PUSH
12406: LD_INT 45
12408: PUSH
12409: LD_INT 46
12411: PUSH
12412: LD_INT 45
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: LD_OWVAR 67
12428: PUSH
12429: LD_INT 0
12431: PPUSH
12432: LD_INT 3
12434: PPUSH
12435: CALL_OW 12
12439: PLUS
12440: ARRAY
12441: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12442: LD_VAR 0 6
12446: PUSH
12447: LD_INT 21
12449: PUSH
12450: LD_INT 22
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: IN
12457: PUSH
12458: LD_VAR 0 7
12462: PUSH
12463: LD_INT 46
12465: EQUAL
12466: AND
12467: IFFALSE 12496
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12469: LD_ADDR_VAR 0 7
12473: PUSH
12474: LD_INT 44
12476: PUSH
12477: LD_INT 45
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 1
12486: PPUSH
12487: LD_INT 2
12489: PPUSH
12490: CALL_OW 12
12494: ARRAY
12495: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
12496: LD_OWVAR 1
12500: PUSH
12501: LD_INT 31500
12503: PUSH
12504: LD_INT 27300
12506: PUSH
12507: LD_INT 23100
12509: PUSH
12510: LD_INT 18900
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_OWVAR 67
12523: ARRAY
12524: LESS
12525: IFFALSE 12558
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
12527: LD_ADDR_VAR 0 7
12531: PUSH
12532: LD_INT 44
12534: PUSH
12535: LD_INT 43
12537: PUSH
12538: LD_INT 42
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 1
12548: PPUSH
12549: LD_INT 3
12551: PPUSH
12552: CALL_OW 12
12556: ARRAY
12557: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
12558: LD_VAR 0 6
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: LD_INT 3
12568: PPUSH
12569: LD_VAR 0 7
12573: PPUSH
12574: LD_INT 90
12576: PPUSH
12577: CALL 44738 0 5
// un := CreateVehicle ;
12581: LD_ADDR_VAR 0 4
12585: PUSH
12586: CALL_OW 45
12590: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
12591: LD_VAR 0 4
12595: PPUSH
12596: LD_INT 140
12598: PPUSH
12599: LD_INT 146
12601: PPUSH
12602: LD_INT 0
12604: PPUSH
12605: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
12609: LD_VAR 0 4
12613: PPUSH
12614: LD_INT 131
12616: PPUSH
12617: LD_INT 128
12619: PPUSH
12620: CALL_OW 111
// wait ( 0 0$3 ) ;
12624: LD_INT 105
12626: PPUSH
12627: CALL_OW 67
// tmp := Join ( tmp , un ) ;
12631: LD_ADDR_VAR 0 5
12635: PUSH
12636: LD_VAR 0 5
12640: PPUSH
12641: LD_VAR 0 4
12645: PPUSH
12646: CALL 77191 0 2
12650: ST_TO_ADDR
// end ;
12651: GO 12335
12653: POP
12654: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
12655: LD_ADDR_EXP 36
12659: PUSH
12660: LD_EXP 36
12664: PPUSH
12665: LD_VAR 0 5
12669: PPUSH
12670: CALL 77228 0 2
12674: ST_TO_ADDR
// end ;
12675: LD_VAR 0 2
12679: RET
// every 0 0$3 trigger russianAttackers do
12680: LD_EXP 36
12684: IFFALSE 12767
12686: GO 12688
12688: DISABLE
// begin enable ;
12689: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
12690: LD_EXP 36
12694: PPUSH
12695: LD_INT 126
12697: PUSH
12698: LD_INT 108
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 107
12707: PUSH
12708: LD_INT 85
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 82
12717: PUSH
12718: LD_INT 62
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 73
12727: PUSH
12728: LD_INT 46
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 62
12737: PUSH
12738: LD_INT 31
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: LD_INT 52
12747: PUSH
12748: LD_INT 17
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: PPUSH
12763: CALL 79795 0 2
// end ; end_of_file
12767: END
// on SailEvent ( event ) do begin if event = 1 then
12768: LD_VAR 0 1
12772: PUSH
12773: LD_INT 1
12775: EQUAL
12776: IFFALSE 12791
// PrepareRussianAttack ( Difficulty + 3 ) ;
12778: LD_OWVAR 67
12782: PUSH
12783: LD_INT 3
12785: PLUS
12786: PPUSH
12787: CALL 12287 0 1
// end ;
12791: PPOPN 1
12793: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
12794: LD_INT 0
12796: PPUSH
12797: PPUSH
12798: PPUSH
12799: PPUSH
12800: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL 35434 0 1
// if un = JMM then
12810: LD_VAR 0 1
12814: PUSH
12815: LD_EXP 14
12819: EQUAL
12820: IFFALSE 12829
// YouLost ( JMM ) ;
12822: LD_STRING JMM
12824: PPUSH
12825: CALL_OW 104
// if un = Sikorski then
12829: LD_VAR 0 1
12833: PUSH
12834: LD_EXP 28
12838: EQUAL
12839: IFFALSE 12865
// if sikorskiStatus = 0 then
12841: LD_EXP 9
12845: PUSH
12846: LD_INT 0
12848: EQUAL
12849: IFFALSE 12857
// SikorskiKilledInAction else
12851: CALL 18118 0 0
12855: GO 12865
// sikorskiIsKilled := true ;
12857: LD_ADDR_EXP 10
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12865: LD_VAR 0 1
12869: PPUSH
12870: CALL_OW 255
12874: PUSH
12875: LD_INT 1
12877: EQUAL
12878: PUSH
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 248
12888: PUSH
12889: LD_INT 1
12891: EQUAL
12892: AND
12893: PUSH
12894: LD_VAR 0 1
12898: PPUSH
12899: CALL_OW 266
12903: PUSH
12904: LD_INT 0
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: IN
12914: AND
12915: IFFALSE 12924
// YouLost ( Destroyed ) ;
12917: LD_STRING Destroyed
12919: PPUSH
12920: CALL_OW 104
// if un = ruDep then
12924: LD_VAR 0 1
12928: PUSH
12929: LD_INT 28
12931: EQUAL
12932: IFFALSE 13066
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
12934: LD_ADDR_VAR 0 2
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_INT 3
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 25
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: FOR_IN
12969: IFFALSE 13064
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
12971: LD_ADDR_VAR 0 3
12975: PUSH
12976: LD_INT 11
12978: PPUSH
12979: LD_INT 81
12981: PUSH
12982: LD_INT 3
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 70
12993: PPUSH
12994: LD_VAR 0 2
12998: PPUSH
12999: CALL_OW 74
13003: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13004: LD_VAR 0 2
13008: PPUSH
13009: CALL_OW 310
13013: PPUSH
13014: CALL_OW 266
13018: PUSH
13019: LD_INT 32
13021: EQUAL
13022: IFFALSE 13062
// begin ComExitBuilding ( i ) ;
13024: LD_VAR 0 2
13028: PPUSH
13029: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13033: LD_VAR 0 2
13037: PPUSH
13038: LD_VAR 0 3
13042: PPUSH
13043: CALL_OW 250
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: CALL_OW 251
13057: PPUSH
13058: CALL_OW 174
// end ; end ;
13062: GO 12968
13064: POP
13065: POP
// end ; if un in ruMobile then
13066: LD_VAR 0 1
13070: PUSH
13071: LD_EXP 34
13075: IN
13076: IFFALSE 13094
// ruMobile := ruMobile diff un ;
13078: LD_ADDR_EXP 34
13082: PUSH
13083: LD_EXP 34
13087: PUSH
13088: LD_VAR 0 1
13092: DIFF
13093: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13094: LD_VAR 0 1
13098: PPUSH
13099: CALL_OW 255
13103: PUSH
13104: LD_INT 3
13106: EQUAL
13107: IFFALSE 13742
// begin if GetType ( un ) = unit_building then
13109: LD_VAR 0 1
13113: PPUSH
13114: CALL_OW 247
13118: PUSH
13119: LD_INT 3
13121: EQUAL
13122: IFFALSE 13258
// begin btype := GetBType ( un ) ;
13124: LD_ADDR_VAR 0 6
13128: PUSH
13129: LD_VAR 0 1
13133: PPUSH
13134: CALL_OW 266
13138: ST_TO_ADDR
// if btype = b_warehouse then
13139: LD_VAR 0 6
13143: PUSH
13144: LD_INT 1
13146: EQUAL
13147: IFFALSE 13157
// btype := b_depot ;
13149: LD_ADDR_VAR 0 6
13153: PUSH
13154: LD_INT 0
13156: ST_TO_ADDR
// if btype = b_barracks then
13157: LD_VAR 0 6
13161: PUSH
13162: LD_INT 5
13164: EQUAL
13165: IFFALSE 13175
// btype := b_armoury ;
13167: LD_ADDR_VAR 0 6
13171: PUSH
13172: LD_INT 4
13174: ST_TO_ADDR
// if btype = b_lab_full then
13175: LD_VAR 0 6
13179: PUSH
13180: LD_INT 8
13182: EQUAL
13183: IFFALSE 13193
// btype := b_lab ;
13185: LD_ADDR_VAR 0 6
13189: PUSH
13190: LD_INT 6
13192: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
13193: LD_ADDR_EXP 35
13197: PUSH
13198: LD_EXP 35
13202: PPUSH
13203: LD_EXP 35
13207: PUSH
13208: LD_INT 1
13210: PLUS
13211: PPUSH
13212: LD_VAR 0 6
13216: PUSH
13217: LD_VAR 0 1
13221: PPUSH
13222: CALL_OW 250
13226: PUSH
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 251
13236: PUSH
13237: LD_VAR 0 1
13241: PPUSH
13242: CALL_OW 254
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: PPUSH
13253: CALL_OW 1
13257: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13258: LD_VAR 0 1
13262: PPUSH
13263: CALL_OW 247
13267: PUSH
13268: LD_INT 2
13270: EQUAL
13271: IFFALSE 13546
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 264
13282: PUSH
13283: LD_INT 52
13285: PUSH
13286: LD_INT 51
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: IN
13293: IFFALSE 13323
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
13295: LD_INT 29
13297: PPUSH
13298: LD_INT 22
13300: PPUSH
13301: LD_INT 1
13303: PPUSH
13304: LD_INT 3
13306: PPUSH
13307: LD_VAR 0 1
13311: PPUSH
13312: CALL_OW 264
13316: PPUSH
13317: CALL_OW 185
// end else
13321: GO 13546
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13323: LD_ADDR_VAR 0 4
13327: PUSH
13328: LD_INT 21
13330: PUSH
13331: LD_INT 22
13333: PUSH
13334: LD_INT 23
13336: PUSH
13337: LD_INT 24
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 1
13348: PPUSH
13349: LD_INT 4
13351: PPUSH
13352: CALL_OW 12
13356: ARRAY
13357: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13358: LD_ADDR_VAR 0 5
13362: PUSH
13363: LD_INT 42
13365: PUSH
13366: LD_INT 44
13368: PUSH
13369: LD_INT 43
13371: PUSH
13372: LD_INT 46
13374: PUSH
13375: LD_INT 45
13377: PUSH
13378: LD_INT 46
13380: PUSH
13381: LD_INT 45
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: PUSH
13393: LD_OWVAR 67
13397: PUSH
13398: LD_INT 0
13400: PPUSH
13401: LD_INT 3
13403: PPUSH
13404: CALL_OW 12
13408: PLUS
13409: ARRAY
13410: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13411: LD_VAR 0 4
13415: PUSH
13416: LD_INT 21
13418: PUSH
13419: LD_INT 22
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: IN
13426: PUSH
13427: LD_VAR 0 5
13431: PUSH
13432: LD_INT 46
13434: EQUAL
13435: AND
13436: IFFALSE 13465
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13438: LD_ADDR_VAR 0 5
13442: PUSH
13443: LD_INT 44
13445: PUSH
13446: LD_INT 45
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_INT 2
13458: PPUSH
13459: CALL_OW 12
13463: ARRAY
13464: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
13465: LD_OWVAR 1
13469: PUSH
13470: LD_INT 31500
13472: PUSH
13473: LD_INT 27300
13475: PUSH
13476: LD_INT 23100
13478: PUSH
13479: LD_INT 21000
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: PUSH
13488: LD_OWVAR 67
13492: ARRAY
13493: LESS
13494: IFFALSE 13523
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13496: LD_ADDR_VAR 0 5
13500: PUSH
13501: LD_INT 44
13503: PUSH
13504: LD_INT 43
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 1
13513: PPUSH
13514: LD_INT 2
13516: PPUSH
13517: CALL_OW 12
13521: ARRAY
13522: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
13523: LD_INT 29
13525: PPUSH
13526: LD_VAR 0 4
13530: PPUSH
13531: LD_INT 1
13533: PPUSH
13534: LD_INT 1
13536: PPUSH
13537: LD_VAR 0 5
13541: PPUSH
13542: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 257
13555: PUSH
13556: LD_INT 3
13558: EQUAL
13559: IFFALSE 13742
// begin killMechCounter := Inc ( killMechCounter ) ;
13561: LD_ADDR_EXP 12
13565: PUSH
13566: LD_EXP 12
13570: PPUSH
13571: CALL 78552 0 1
13575: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
13576: LD_EXP 33
13580: PUSH
13581: LD_INT 0
13583: EQUAL
13584: PUSH
13585: LD_INT 29
13587: PPUSH
13588: CALL_OW 302
13592: NOT
13593: OR
13594: IFFALSE 13598
// exit ;
13596: GO 13742
// ruMechCounter := Dec ( ruMechCounter ) ;
13598: LD_ADDR_EXP 33
13602: PUSH
13603: LD_EXP 33
13607: PPUSH
13608: CALL 78574 0 1
13612: ST_TO_ADDR
// uc_side := 3 ;
13613: LD_ADDR_OWVAR 20
13617: PUSH
13618: LD_INT 3
13620: ST_TO_ADDR
// uc_nation := 3 ;
13621: LD_ADDR_OWVAR 21
13625: PUSH
13626: LD_INT 3
13628: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
13629: LD_INT 0
13631: PPUSH
13632: LD_INT 5
13634: PUSH
13635: LD_INT 6
13637: PUSH
13638: LD_INT 7
13640: PUSH
13641: LD_INT 8
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: LD_OWVAR 67
13654: ARRAY
13655: PPUSH
13656: CALL_OW 383
// tmp := CreateHuman ;
13660: LD_ADDR_VAR 0 3
13664: PUSH
13665: CALL_OW 44
13669: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 145
13677: PPUSH
13678: LD_INT 133
13680: PPUSH
13681: LD_INT 0
13683: PPUSH
13684: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
13688: LD_VAR 0 3
13692: PPUSH
13693: LD_INT 29
13695: PPUSH
13696: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13700: LD_INT 35
13702: PPUSH
13703: CALL_OW 67
// if not HasTask ( tmp ) then
13707: LD_VAR 0 3
13711: PPUSH
13712: CALL_OW 314
13716: NOT
13717: IFFALSE 13731
// ComEnterUnit ( tmp , ruFac ) ;
13719: LD_VAR 0 3
13723: PPUSH
13724: LD_INT 29
13726: PPUSH
13727: CALL_OW 120
// until IsInUnit ( tmp ) ;
13731: LD_VAR 0 3
13735: PPUSH
13736: CALL_OW 310
13740: IFFALSE 13700
// end ; end ; end ;
13742: PPOPN 6
13744: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
13745: LD_VAR 0 1
13749: PPUSH
13750: CALL_OW 255
13754: PUSH
13755: LD_INT 4
13757: EQUAL
13758: IFFALSE 13775
// ComMoveXY ( driver , 40 , 47 ) ;
13760: LD_VAR 0 1
13764: PPUSH
13765: LD_INT 40
13767: PPUSH
13768: LD_INT 47
13770: PPUSH
13771: CALL_OW 111
// if GetSide ( driver ) = 3 then
13775: LD_VAR 0 1
13779: PPUSH
13780: CALL_OW 255
13784: PUSH
13785: LD_INT 3
13787: EQUAL
13788: IFFALSE 14002
// begin ComMoveXY ( driver , 90 , 97 ) ;
13790: LD_VAR 0 1
13794: PPUSH
13795: LD_INT 90
13797: PPUSH
13798: LD_INT 97
13800: PPUSH
13801: CALL_OW 111
// if IsOk ( ruFac ) then
13805: LD_INT 29
13807: PPUSH
13808: CALL_OW 302
13812: IFFALSE 13926
// begin repeat wait ( 0 0$1 ) ;
13814: LD_INT 35
13816: PPUSH
13817: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
13821: LD_INT 29
13823: PPUSH
13824: CALL_OW 313
13828: PUSH
13829: LD_INT 6
13831: LESS
13832: PUSH
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 301
13842: OR
13843: IFFALSE 13814
// if IsDead ( driver ) then
13845: LD_VAR 0 1
13849: PPUSH
13850: CALL_OW 301
13854: IFFALSE 13858
// exit ;
13856: GO 14002
// repeat wait ( 0 0$10 ) ;
13858: LD_INT 350
13860: PPUSH
13861: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
13865: LD_VAR 0 1
13869: PPUSH
13870: CALL_OW 314
13874: NOT
13875: PUSH
13876: LD_INT 29
13878: PPUSH
13879: CALL_OW 313
13883: PUSH
13884: LD_INT 6
13886: LESS
13887: AND
13888: IFFALSE 13902
// ComEnterUnit ( driver , ruFac ) ;
13890: LD_VAR 0 1
13894: PPUSH
13895: LD_INT 29
13897: PPUSH
13898: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
13902: LD_VAR 0 1
13906: PPUSH
13907: CALL_OW 301
13911: PUSH
13912: LD_VAR 0 1
13916: PPUSH
13917: CALL_OW 310
13921: OR
13922: IFFALSE 13858
// end else
13924: GO 14002
// begin ComMoveXY ( driver , 142 , 148 ) ;
13926: LD_VAR 0 1
13930: PPUSH
13931: LD_INT 142
13933: PPUSH
13934: LD_INT 148
13936: PPUSH
13937: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13941: LD_INT 35
13943: PPUSH
13944: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
13948: LD_VAR 0 1
13952: PPUSH
13953: CALL_OW 301
13957: PUSH
13958: LD_VAR 0 1
13962: PPUSH
13963: LD_INT 142
13965: PPUSH
13966: LD_INT 148
13968: PPUSH
13969: CALL_OW 307
13973: OR
13974: IFFALSE 13941
// if IsAt ( driver , 142 , 148 ) then
13976: LD_VAR 0 1
13980: PPUSH
13981: LD_INT 142
13983: PPUSH
13984: LD_INT 148
13986: PPUSH
13987: CALL_OW 307
13991: IFFALSE 14002
// RemoveUnit ( driver ) ;
13993: LD_VAR 0 1
13997: PPUSH
13998: CALL_OW 64
// end ; end ; end ;
14002: PPOPN 4
14004: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14005: LD_VAR 0 2
14009: PPUSH
14010: CALL_OW 257
14014: PUSH
14015: LD_INT 3
14017: EQUAL
14018: PUSH
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 255
14028: PUSH
14029: LD_INT 3
14031: EQUAL
14032: AND
14033: PUSH
14034: LD_VAR 0 1
14038: PUSH
14039: LD_INT 29
14041: EQUAL
14042: AND
14043: IFFALSE 14057
// SetLives ( un , 1000 ) ;
14045: LD_VAR 0 2
14049: PPUSH
14050: LD_INT 1000
14052: PPUSH
14053: CALL_OW 234
// if GetTag ( b ) = 701 then
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 110
14066: PUSH
14067: LD_INT 701
14069: EQUAL
14070: IFFALSE 14096
// begin SetTag ( b , 0 ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: LD_INT 0
14079: PPUSH
14080: CALL_OW 109
// SetTag ( un , 0 ) ;
14084: LD_VAR 0 2
14088: PPUSH
14089: LD_INT 0
14091: PPUSH
14092: CALL_OW 109
// end ; end ;
14096: PPOPN 2
14098: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
14099: LD_INT 0
14101: PPUSH
14102: PPUSH
// begin if GetSide ( b ) = 3 then
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 255
14112: PUSH
14113: LD_INT 3
14115: EQUAL
14116: IFFALSE 14347
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
14118: LD_VAR 0 1
14122: PPUSH
14123: CALL_OW 266
14127: PUSH
14128: LD_INT 32
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: IN
14138: IFFALSE 14347
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
14140: LD_ADDR_VAR 0 4
14144: PUSH
14145: LD_INT 22
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 50
14157: PUSH
14158: EMPTY
14159: LIST
14160: PUSH
14161: LD_INT 30
14163: PUSH
14164: LD_INT 32
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 58
14173: PUSH
14174: EMPTY
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: ST_TO_ADDR
// if tmp then
14188: LD_VAR 0 4
14192: IFFALSE 14214
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_VAR 0 4
14203: PUSH
14204: LD_INT 1
14206: ARRAY
14207: PPUSH
14208: CALL_OW 120
// exit ;
14212: GO 14347
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
14214: LD_ADDR_VAR 0 4
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 50
14231: PUSH
14232: EMPTY
14233: LIST
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 30
14240: PUSH
14241: LD_INT 4
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 30
14250: PUSH
14251: LD_INT 5
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if not tmp then
14273: LD_VAR 0 4
14277: NOT
14278: IFFALSE 14297
// begin ComMoveXY ( un , 92 , 99 ) ;
14280: LD_VAR 0 2
14284: PPUSH
14285: LD_INT 92
14287: PPUSH
14288: LD_INT 99
14290: PPUSH
14291: CALL_OW 111
// exit ;
14295: GO 14347
// end ; for i in tmp do
14297: LD_ADDR_VAR 0 3
14301: PUSH
14302: LD_VAR 0 4
14306: PUSH
14307: FOR_IN
14308: IFFALSE 14345
// if UnitsInside ( i ) < 6 then
14310: LD_VAR 0 3
14314: PPUSH
14315: CALL_OW 313
14319: PUSH
14320: LD_INT 6
14322: LESS
14323: IFFALSE 14343
// begin ComEnterUnit ( un , i ) ;
14325: LD_VAR 0 2
14329: PPUSH
14330: LD_VAR 0 3
14334: PPUSH
14335: CALL_OW 120
// exit ;
14339: POP
14340: POP
14341: GO 14347
// end ;
14343: GO 14307
14345: POP
14346: POP
// end ; end ; end ;
14347: PPOPN 4
14349: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 255
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 6
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: IN
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 263
14380: PUSH
14381: LD_INT 3
14383: EQUAL
14384: AND
14385: PUSH
14386: LD_EXP 7
14390: NOT
14391: AND
14392: IFFALSE 14411
// begin seenComputer := true ;
14394: LD_ADDR_EXP 7
14398: PUSH
14399: LD_INT 1
14401: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14402: LD_VAR 0 1
14406: PPUSH
14407: CALL 17332 0 1
// end ; end ;
14411: PPOPN 1
14413: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14414: LD_INT 0
14416: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14417: LD_VAR 0 1
14421: PPUSH
14422: LD_VAR 0 2
14426: PPUSH
14427: CALL 35554 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 3
14443: EQUAL
14444: PUSH
14445: LD_VAR 0 1
14449: PPUSH
14450: CALL_OW 263
14454: PUSH
14455: LD_INT 1
14457: EQUAL
14458: AND
14459: PUSH
14460: LD_VAR 0 1
14464: PPUSH
14465: CALL_OW 264
14469: PUSH
14470: LD_INT 42
14472: PUSH
14473: LD_INT 43
14475: PUSH
14476: LD_INT 44
14478: PUSH
14479: LD_INT 46
14481: PUSH
14482: LD_INT 45
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: IN
14492: AND
14493: IFFALSE 14523
// begin SetTag ( vehicle , 300 ) ;
14495: LD_VAR 0 1
14499: PPUSH
14500: LD_INT 300
14502: PPUSH
14503: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14507: LD_ADDR_EXP 34
14511: PUSH
14512: LD_EXP 34
14516: PUSH
14517: LD_VAR 0 1
14521: UNION
14522: ST_TO_ADDR
// end ; end ;
14523: PPOPN 3
14525: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14526: LD_INT 0
14528: PPUSH
// begin if InArea ( x , y , ruCrates ) then
14529: LD_VAR 0 2
14533: PPUSH
14534: LD_VAR 0 3
14538: PPUSH
14539: LD_INT 13
14541: PPUSH
14542: CALL_OW 309
14546: IFFALSE 14677
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
14548: LD_ADDR_VAR 0 6
14552: PUSH
14553: LD_INT 22
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 50
14565: PUSH
14566: EMPTY
14567: LIST
14568: PUSH
14569: LD_INT 34
14571: PUSH
14572: LD_INT 51
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: ST_TO_ADDR
// if not cargo then
14589: LD_VAR 0 6
14593: NOT
14594: IFFALSE 14598
// exit ;
14596: GO 14677
// wait ( 0 0$5 ) ;
14598: LD_INT 175
14600: PPUSH
14601: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
14605: LD_VAR 0 6
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PPUSH
14614: LD_INT 28
14616: PPUSH
14617: CALL_OW 296
14621: PUSH
14622: LD_INT 6
14624: LESS
14625: PUSH
14626: LD_VAR 0 6
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PPUSH
14635: CALL_OW 261
14639: PUSH
14640: LD_INT 50
14642: LESS
14643: AND
14644: IFFALSE 14658
// ComMoveUnit ( cargo , ruDep ) ;
14646: LD_VAR 0 6
14650: PPUSH
14651: LD_INT 28
14653: PPUSH
14654: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
14658: LD_VAR 0 6
14662: PPUSH
14663: LD_VAR 0 2
14667: PPUSH
14668: LD_VAR 0 3
14672: PPUSH
14673: CALL_OW 177
// end ; end ;
14677: PPOPN 6
14679: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
14680: LD_VAR 0 1
14684: PPUSH
14685: CALL_OW 264
14689: PUSH
14690: LD_INT 45
14692: EQUAL
14693: IFFALSE 14710
// captureRocketCounter := Inc ( captureRocketCounter ) ;
14695: LD_ADDR_EXP 11
14699: PUSH
14700: LD_EXP 11
14704: PPUSH
14705: CALL 78552 0 1
14709: ST_TO_ADDR
// end ;
14710: PPOPN 4
14712: END
// on BuildingComplete ( b ) do var i , tmp ;
14713: LD_INT 0
14715: PPUSH
14716: PPUSH
// begin if GetSide ( b ) = 3 then
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 255
14726: PUSH
14727: LD_INT 3
14729: EQUAL
14730: IFFALSE 14827
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
14732: LD_ADDR_EXP 35
14736: PUSH
14737: LD_EXP 35
14741: PPUSH
14742: LD_INT 1
14744: PPUSH
14745: CALL_OW 3
14749: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 266
14759: PUSH
14760: LD_INT 4
14762: EQUAL
14763: IFFALSE 14774
// ComUpgrade ( b ) ;
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
14774: LD_VAR 0 1
14778: PPUSH
14779: CALL_OW 266
14783: PUSH
14784: LD_INT 32
14786: PUSH
14787: LD_INT 33
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: IN
14794: IFFALSE 14827
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
14796: LD_VAR 0 1
14800: PPUSH
14801: LD_INT 46
14803: PUSH
14804: LD_INT 45
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 1
14813: PPUSH
14814: LD_INT 2
14816: PPUSH
14817: CALL_OW 12
14821: ARRAY
14822: PPUSH
14823: CALL_OW 208
// end ; end ; end_of_file
14827: PPOPN 3
14829: END
// export function Action ; var i , tmp , un , inUnit ; begin
14830: LD_INT 0
14832: PPUSH
14833: PPUSH
14834: PPUSH
14835: PPUSH
14836: PPUSH
// Video ( true ) ;
14837: LD_INT 1
14839: PPUSH
14840: CALL 77163 0 1
// invincibleMode := true ;
14844: LD_ADDR_EXP 5
14848: PUSH
14849: LD_INT 1
14851: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
14852: LD_INT 50
14854: PPUSH
14855: LD_INT 12
14857: PPUSH
14858: LD_INT 1
14860: PPUSH
14861: LD_INT 56
14863: NEG
14864: PPUSH
14865: CALL 77077 0 4
// CenterOnXY ( 50 , 12 ) ;
14869: LD_INT 50
14871: PPUSH
14872: LD_INT 12
14874: PPUSH
14875: CALL_OW 84
// wait ( 0 0$3 ) ;
14879: LD_INT 105
14881: PPUSH
14882: CALL_OW 67
// PrepareStartRussianAttack ;
14886: CALL 9747 0 0
// CenterOnXY ( 66 , 47 ) ;
14890: LD_INT 66
14892: PPUSH
14893: LD_INT 47
14895: PPUSH
14896: CALL_OW 84
// wait ( 0 0$5 ) ;
14900: LD_INT 175
14902: PPUSH
14903: CALL_OW 67
// case gammaCommander of 1 :
14907: LD_EXP 13
14911: PUSH
14912: LD_INT 1
14914: DOUBLE
14915: EQUAL
14916: IFTRUE 14920
14918: GO 14935
14920: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
14921: LD_EXP 16
14925: PPUSH
14926: LD_STRING D1-Don-1
14928: PPUSH
14929: CALL_OW 88
14933: GO 14982
14935: LD_INT 2
14937: DOUBLE
14938: EQUAL
14939: IFTRUE 14943
14941: GO 14958
14943: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
14944: LD_EXP 15
14948: PPUSH
14949: LD_STRING D1-Brown-1
14951: PPUSH
14952: CALL_OW 88
14956: GO 14982
14958: LD_INT 3
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14966
14964: GO 14981
14966: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
14967: LD_EXP 25
14971: PPUSH
14972: LD_STRING D1-VanH-1
14974: PPUSH
14975: CALL_OW 88
14979: GO 14982
14981: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 33
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 61
15009: PUSH
15010: EMPTY
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: LIST
15017: PPUSH
15018: CALL_OW 69
15022: ST_TO_ADDR
// if tmp then
15023: LD_VAR 0 3
15027: IFFALSE 15044
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15029: LD_VAR 0 3
15033: PPUSH
15034: LD_INT 74
15036: PPUSH
15037: LD_INT 44
15039: PPUSH
15040: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15044: LD_ADDR_VAR 0 3
15048: PUSH
15049: LD_INT 22
15051: PUSH
15052: LD_INT 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 25
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 69
15077: PUSH
15078: LD_EXP 16
15082: PUSH
15083: LD_EXP 15
15087: PUSH
15088: LD_EXP 25
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: DIFF
15098: ST_TO_ADDR
// if tmp then
15099: LD_VAR 0 3
15103: IFFALSE 15181
// for i in tmp do
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: LD_VAR 0 3
15114: PUSH
15115: FOR_IN
15116: IFFALSE 15179
// begin inUnit := IsInUnit ( i ) ;
15118: LD_ADDR_VAR 0 5
15122: PUSH
15123: LD_VAR 0 2
15127: PPUSH
15128: CALL_OW 310
15132: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15133: LD_VAR 0 5
15137: PUSH
15138: LD_VAR 0 5
15142: PPUSH
15143: CALL_OW 266
15147: PUSH
15148: LD_INT 32
15150: PUSH
15151: LD_INT 31
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: IN
15158: AND
15159: IFFALSE 15177
// tmp := tmp diff i ;
15161: LD_ADDR_VAR 0 3
15165: PUSH
15166: LD_VAR 0 3
15170: PUSH
15171: LD_VAR 0 2
15175: DIFF
15176: ST_TO_ADDR
// end ;
15177: GO 15115
15179: POP
15180: POP
// if tmp then
15181: LD_VAR 0 3
15185: IFFALSE 15275
// begin ComExitAll ( tmp ) ;
15187: LD_VAR 0 3
15191: PPUSH
15192: CALL 77672 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15196: LD_VAR 0 3
15200: PPUSH
15201: LD_INT 74
15203: PPUSH
15204: LD_INT 44
15206: PPUSH
15207: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15211: LD_ADDR_VAR 0 3
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 25
15228: PUSH
15229: LD_INT 4
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PPUSH
15240: CALL_OW 69
15244: ST_TO_ADDR
// if tmp then
15245: LD_VAR 0 3
15249: IFFALSE 15275
// begin ComExitAll ( tmp ) ;
15251: LD_VAR 0 3
15255: PPUSH
15256: CALL 77672 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15260: LD_VAR 0 3
15264: PPUSH
15265: LD_INT 66
15267: PPUSH
15268: LD_INT 28
15270: PPUSH
15271: CALL_OW 171
// end ; end ; game_speed := 4 ;
15275: LD_ADDR_OWVAR 65
15279: PUSH
15280: LD_INT 4
15282: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15283: LD_INT 70
15285: PPUSH
15286: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15290: LD_EXP 29
15294: PPUSH
15295: LD_STRING D1-Har-1
15297: PPUSH
15298: CALL_OW 94
// case gammaCommander of 1 :
15302: LD_EXP 13
15306: PUSH
15307: LD_INT 1
15309: DOUBLE
15310: EQUAL
15311: IFTRUE 15315
15313: GO 15330
15315: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15316: LD_EXP 16
15320: PPUSH
15321: LD_STRING D1-Don-2
15323: PPUSH
15324: CALL_OW 88
15328: GO 15377
15330: LD_INT 2
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15353
15338: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15339: LD_EXP 15
15343: PPUSH
15344: LD_STRING D1-Brown-2
15346: PPUSH
15347: CALL_OW 88
15351: GO 15377
15353: LD_INT 3
15355: DOUBLE
15356: EQUAL
15357: IFTRUE 15361
15359: GO 15376
15361: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15362: LD_EXP 25
15366: PPUSH
15367: LD_STRING D1-VanH-2
15369: PPUSH
15370: CALL_OW 88
15374: GO 15377
15376: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15377: LD_EXP 29
15381: PPUSH
15382: LD_STRING D1-Har-2
15384: PPUSH
15385: CALL_OW 94
// invincibleMode := false ;
15389: LD_ADDR_EXP 5
15393: PUSH
15394: LD_INT 0
15396: ST_TO_ADDR
// Video ( false ) ;
15397: LD_INT 0
15399: PPUSH
15400: CALL 77163 0 1
// ChangeMissionObjectives ( M1 ) ;
15404: LD_STRING M1
15406: PPUSH
15407: CALL_OW 337
// SaveForQuickRestart ;
15411: CALL_OW 22
// wait ( 2 2$30 ) ;
15415: LD_INT 5250
15417: PPUSH
15418: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15422: LD_INT 1
15424: PPUSH
15425: CALL 12287 0 1
// wait ( 4 4$30 ) ;
15429: LD_INT 9450
15431: PPUSH
15432: CALL_OW 67
// if Difficulty > 1 then
15436: LD_OWVAR 67
15440: PUSH
15441: LD_INT 1
15443: GREATER
15444: IFFALSE 15453
// PrepareRussianAttack ( 2 ) ;
15446: LD_INT 2
15448: PPUSH
15449: CALL 12287 0 1
// if Difficulty > 2 then
15453: LD_OWVAR 67
15457: PUSH
15458: LD_INT 2
15460: GREATER
15461: IFFALSE 15620
// begin for i := 1 to 4 do
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: DOUBLE
15469: LD_INT 1
15471: DEC
15472: ST_TO_ADDR
15473: LD_INT 4
15475: PUSH
15476: FOR_TO
15477: IFFALSE 15562
// begin uc_side := 6 ;
15479: LD_ADDR_OWVAR 20
15483: PUSH
15484: LD_INT 6
15486: ST_TO_ADDR
// uc_nation := 3 ;
15487: LD_ADDR_OWVAR 21
15491: PUSH
15492: LD_INT 3
15494: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15495: LD_INT 0
15497: PPUSH
15498: LD_INT 7
15500: PPUSH
15501: CALL_OW 381
// un := CreateHuman ;
15505: LD_ADDR_VAR 0 4
15509: PUSH
15510: CALL_OW 44
15514: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15515: LD_VAR 0 4
15519: PPUSH
15520: LD_INT 122
15522: PPUSH
15523: LD_INT 89
15525: PPUSH
15526: LD_INT 3
15528: PPUSH
15529: LD_INT 0
15531: PPUSH
15532: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
15536: LD_VAR 0 4
15540: PPUSH
15541: LD_INT 88
15543: PPUSH
15544: LD_INT 42
15546: PPUSH
15547: CALL_OW 114
// AddComHold ( un ) ;
15551: LD_VAR 0 4
15555: PPUSH
15556: CALL_OW 200
// end ;
15560: GO 15476
15562: POP
15563: POP
// PrepareScientist ( false , 6 ) ;
15564: LD_INT 0
15566: PPUSH
15567: LD_INT 6
15569: PPUSH
15570: CALL_OW 384
// un := CreateHuman ;
15574: LD_ADDR_VAR 0 4
15578: PUSH
15579: CALL_OW 44
15583: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15584: LD_VAR 0 4
15588: PPUSH
15589: LD_INT 122
15591: PPUSH
15592: LD_INT 89
15594: PPUSH
15595: LD_INT 3
15597: PPUSH
15598: LD_INT 0
15600: PPUSH
15601: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
15605: LD_VAR 0 4
15609: PPUSH
15610: LD_INT 91
15612: PPUSH
15613: LD_INT 48
15615: PPUSH
15616: CALL_OW 111
// end ; end ;
15620: LD_VAR 0 1
15624: RET
// every 0 0$1 trigger invincibleMode do var i ;
15625: LD_EXP 5
15629: IFFALSE 15708
15631: GO 15633
15633: DISABLE
15634: LD_INT 0
15636: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15637: LD_ADDR_VAR 0 1
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_INT 1
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 3
15664: PUSH
15665: LD_INT 24
15667: PUSH
15668: LD_INT 1000
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: PUSH
15689: FOR_IN
15690: IFFALSE 15706
// SetLives ( i , 1000 ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 1000
15699: PPUSH
15700: CALL_OW 234
15704: GO 15689
15706: POP
15707: POP
// end ;
15708: PPOPN 1
15710: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
15711: LD_OWVAR 1
15715: PUSH
15716: LD_INT 14700
15718: GREATER
15719: IFFALSE 17329
15721: GO 15723
15723: DISABLE
15724: LD_INT 0
15726: PPUSH
15727: PPUSH
// begin PrepareSupportFromDelta ;
15728: CALL 4053 0 0
// deltaSupport := true ;
15732: LD_ADDR_EXP 6
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
// dialog := false ;
15740: LD_ADDR_VAR 0 1
15744: PUSH
15745: LD_INT 0
15747: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15748: LD_EXP 21
15752: PPUSH
15753: CALL_OW 302
15757: IFFALSE 15779
// dialog := Say ( Gladstone , D2-Glad-1 ) else
15759: LD_ADDR_VAR 0 1
15763: PUSH
15764: LD_EXP 21
15768: PPUSH
15769: LD_STRING D2-Glad-1
15771: PPUSH
15772: CALL_OW 88
15776: ST_TO_ADDR
15777: GO 15861
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15779: LD_ADDR_VAR 0 1
15783: PUSH
15784: LD_INT 22
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 120
15796: PUSH
15797: LD_INT 107
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: PPUSH
15830: CALL_OW 69
15834: PUSH
15835: LD_EXP 27
15839: PUSH
15840: LD_EXP 26
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: DIFF
15849: PPUSH
15850: LD_STRING D2-Sol1-1
15852: PPUSH
15853: LD_STRING D2-FSol1-1
15855: PPUSH
15856: CALL 19497 0 3
15860: ST_TO_ADDR
// if dialog then
15861: LD_VAR 0 1
15865: IFFALSE 15966
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
15867: LD_EXP 16
15871: PPUSH
15872: CALL_OW 302
15876: PUSH
15877: LD_EXP 13
15881: PUSH
15882: LD_INT 1
15884: EQUAL
15885: AND
15886: IFFALSE 15900
// Say ( Donaldson , D2-Don-1 ) ;
15888: LD_EXP 16
15892: PPUSH
15893: LD_STRING D2-Don-1
15895: PPUSH
15896: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15900: LD_EXP 15
15904: PPUSH
15905: CALL_OW 302
15909: PUSH
15910: LD_EXP 13
15914: PUSH
15915: LD_INT 2
15917: EQUAL
15918: AND
15919: IFFALSE 15933
// Say ( Brown , D2-Brown-1 ) ;
15921: LD_EXP 15
15925: PPUSH
15926: LD_STRING D2-Brown-1
15928: PPUSH
15929: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15933: LD_EXP 25
15937: PPUSH
15938: CALL_OW 302
15942: PUSH
15943: LD_EXP 13
15947: PUSH
15948: LD_INT 3
15950: EQUAL
15951: AND
15952: IFFALSE 15966
// Say ( Houten , D2-VanH-1 ) ;
15954: LD_EXP 25
15958: PPUSH
15959: LD_STRING D2-VanH-1
15961: PPUSH
15962: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
15966: LD_INT 3
15968: PPUSH
15969: CALL 12287 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
15973: LD_STRING 07_time
15975: PPUSH
15976: LD_INT 18900
15978: PPUSH
15979: CALL_OW 30
15983: PUSH
15984: LD_INT 3
15986: DIV
15987: PPUSH
15988: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
15992: LD_INT 34
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 321
16002: PUSH
16003: LD_INT 2
16005: EQUAL
16006: IFFALSE 16015
// SetAchievement ( ACH_HEAVYGUN ) ;
16008: LD_STRING ACH_HEAVYGUN
16010: PPUSH
16011: CALL_OW 543
// PrepareMacmillanSquad ;
16015: CALL 4827 0 0
// wait ( 0 0$1 ) ;
16019: LD_INT 35
16021: PPUSH
16022: CALL_OW 67
// DialogueOn ;
16026: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16030: LD_EXP 14
16034: PPUSH
16035: CALL_OW 87
// dwait ( 0 0$2 ) ;
16039: LD_INT 70
16041: PPUSH
16042: CALL_OW 68
// DialogueOff ;
16046: CALL_OW 7
// wait ( 0 0$10 ) ;
16050: LD_INT 350
16052: PPUSH
16053: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 427
// p := 0 ;
16064: LD_ADDR_VAR 0 2
16068: PUSH
16069: LD_INT 0
16071: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16072: LD_INT 35
16074: PPUSH
16075: CALL_OW 67
// p := Inc ( p ) ;
16079: LD_ADDR_VAR 0 2
16083: PUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL 78552 0 1
16093: ST_TO_ADDR
// if p > 300 then
16094: LD_VAR 0 2
16098: PUSH
16099: LD_INT 300
16101: GREATER
16102: IFFALSE 16106
// exit ;
16104: GO 17329
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16106: LD_EXP 14
16110: PPUSH
16111: LD_INT 15
16113: PPUSH
16114: CALL_OW 308
16118: PUSH
16119: LD_EXP 14
16123: PPUSH
16124: CALL_OW 310
16128: PPUSH
16129: LD_INT 15
16131: PPUSH
16132: CALL_OW 308
16136: OR
16137: PUSH
16138: LD_EXP 14
16142: PPUSH
16143: LD_EXP 27
16147: PPUSH
16148: CALL_OW 296
16152: PUSH
16153: LD_INT 10
16155: LESS
16156: OR
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 2
16170: PUSH
16171: LD_INT 120
16173: PUSH
16174: LD_INT 106
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 120
16183: PUSH
16184: LD_INT 107
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 91
16198: PUSH
16199: LD_EXP 14
16203: PUSH
16204: LD_INT 12
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: OR
16222: IFFALSE 16072
// DialogueOn ;
16224: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16228: LD_EXP 14
16232: PPUSH
16233: LD_STRING D3-JMM-1
16235: PPUSH
16236: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16240: LD_EXP 16
16244: PPUSH
16245: CALL_OW 302
16249: PUSH
16250: LD_EXP 13
16254: PUSH
16255: LD_INT 1
16257: EQUAL
16258: AND
16259: IFFALSE 16275
// Say ( Donaldson , D3-Don-1 ) else
16261: LD_EXP 16
16265: PPUSH
16266: LD_STRING D3-Don-1
16268: PPUSH
16269: CALL_OW 88
16273: GO 16371
// begin if gammaCommander = 1 then
16275: LD_EXP 13
16279: PUSH
16280: LD_INT 1
16282: EQUAL
16283: IFFALSE 16371
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16285: LD_INT 22
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 23
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 120
16317: PUSH
16318: LD_INT 106
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 26
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 69
16346: PPUSH
16347: LD_STRING D3-Sol1-1
16349: PPUSH
16350: LD_STRING 
16352: PPUSH
16353: CALL 19497 0 3
16357: IFFALSE 16371
// Say ( JMM , D3-JMM-2 ) ;
16359: LD_EXP 14
16363: PPUSH
16364: LD_STRING D3-JMM-2
16366: PPUSH
16367: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16371: LD_EXP 15
16375: PPUSH
16376: CALL_OW 302
16380: PUSH
16381: LD_EXP 13
16385: PUSH
16386: LD_INT 2
16388: EQUAL
16389: AND
16390: IFFALSE 16406
// Say ( Brown , D3-Brown-1 ) else
16392: LD_EXP 15
16396: PPUSH
16397: LD_STRING D3-Brown-1
16399: PPUSH
16400: CALL_OW 88
16404: GO 16502
// begin if gammaCommander = 2 then
16406: LD_EXP 13
16410: PUSH
16411: LD_INT 2
16413: EQUAL
16414: IFFALSE 16502
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16416: LD_INT 22
16418: PUSH
16419: LD_INT 1
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 21
16428: PUSH
16429: LD_INT 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 23
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 120
16448: PUSH
16449: LD_INT 106
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 26
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: PPUSH
16473: CALL_OW 69
16477: PPUSH
16478: LD_STRING D3-Sol1-1a
16480: PPUSH
16481: LD_STRING 
16483: PPUSH
16484: CALL 19497 0 3
16488: IFFALSE 16502
// Say ( JMM , D3-JMM-2 ) ;
16490: LD_EXP 14
16494: PPUSH
16495: LD_STRING D3-JMM-2
16497: PPUSH
16498: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16502: LD_EXP 25
16506: PPUSH
16507: CALL_OW 302
16511: PUSH
16512: LD_EXP 13
16516: PUSH
16517: LD_INT 3
16519: EQUAL
16520: AND
16521: IFFALSE 16537
// Say ( Houten , D3-VanH-1 ) else
16523: LD_EXP 25
16527: PPUSH
16528: LD_STRING D3-VanH-1
16530: PPUSH
16531: CALL_OW 88
16535: GO 16633
// begin if gammaCommander = 3 then
16537: LD_EXP 13
16541: PUSH
16542: LD_INT 3
16544: EQUAL
16545: IFFALSE 16633
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
16547: LD_INT 22
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 21
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 23
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 120
16579: PUSH
16580: LD_INT 106
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 26
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: PPUSH
16609: LD_STRING D3-Sol1-1b
16611: PPUSH
16612: LD_STRING 
16614: PPUSH
16615: CALL 19497 0 3
16619: IFFALSE 16633
// Say ( JMM , D3-JMM-2 ) ;
16621: LD_EXP 14
16625: PPUSH
16626: LD_STRING D3-JMM-2
16628: PPUSH
16629: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16633: LD_EXP 27
16637: PPUSH
16638: CALL_OW 302
16642: IFFALSE 16670
// begin Say ( Joan , D3a-Joan-1 ) ;
16644: LD_EXP 27
16648: PPUSH
16649: LD_STRING D3a-Joan-1
16651: PPUSH
16652: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16656: LD_EXP 14
16660: PPUSH
16661: LD_STRING D3a-JMM-1
16663: PPUSH
16664: CALL_OW 88
// end else
16668: GO 17104
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16670: LD_STRING 06_JoanStatus_1
16672: PPUSH
16673: LD_INT 0
16675: PPUSH
16676: CALL_OW 30
16680: PUSH
16681: LD_INT 1
16683: EQUAL
16684: IFFALSE 17104
// begin Say ( JMM , D3b-JMM-1 ) ;
16686: LD_EXP 14
16690: PPUSH
16691: LD_STRING D3b-JMM-1
16693: PPUSH
16694: CALL_OW 88
// dialog := false ;
16698: LD_ADDR_VAR 0 1
16702: PUSH
16703: LD_INT 0
16705: ST_TO_ADDR
// if gammaCommander = 1 then
16706: LD_EXP 13
16710: PUSH
16711: LD_INT 1
16713: EQUAL
16714: IFFALSE 16825
// if IsOK ( Donaldson ) then
16716: LD_EXP 16
16720: PPUSH
16721: CALL_OW 302
16725: IFFALSE 16747
// dialog := Say ( Donaldson , D3b-Don-1 ) else
16727: LD_ADDR_VAR 0 1
16731: PUSH
16732: LD_EXP 16
16736: PPUSH
16737: LD_STRING D3b-Don-1
16739: PPUSH
16740: CALL_OW 88
16744: ST_TO_ADDR
16745: GO 16825
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16747: LD_ADDR_VAR 0 1
16751: PUSH
16752: LD_INT 22
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 21
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 23
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 120
16784: PUSH
16785: LD_INT 106
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 26
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: PPUSH
16809: CALL_OW 69
16813: PPUSH
16814: LD_STRING D3b-Sol1-1
16816: PPUSH
16817: LD_STRING 
16819: PPUSH
16820: CALL 19497 0 3
16824: ST_TO_ADDR
// if gammaCommander = 2 then
16825: LD_EXP 13
16829: PUSH
16830: LD_INT 2
16832: EQUAL
16833: IFFALSE 16944
// if IsOk ( Brown ) then
16835: LD_EXP 15
16839: PPUSH
16840: CALL_OW 302
16844: IFFALSE 16866
// dialog := Say ( Brown , D3b-Brown-1 ) else
16846: LD_ADDR_VAR 0 1
16850: PUSH
16851: LD_EXP 15
16855: PPUSH
16856: LD_STRING D3b-Brown-1
16858: PPUSH
16859: CALL_OW 88
16863: ST_TO_ADDR
16864: GO 16944
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16866: LD_ADDR_VAR 0 1
16870: PUSH
16871: LD_INT 22
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 23
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 120
16903: PUSH
16904: LD_INT 106
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 26
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: PPUSH
16928: CALL_OW 69
16932: PPUSH
16933: LD_STRING D3b-Sol1-1
16935: PPUSH
16936: LD_STRING 
16938: PPUSH
16939: CALL 19497 0 3
16943: ST_TO_ADDR
// if gammaCommander = 3 then
16944: LD_EXP 13
16948: PUSH
16949: LD_INT 3
16951: EQUAL
16952: IFFALSE 17063
// if IsOk ( Houten ) then
16954: LD_EXP 25
16958: PPUSH
16959: CALL_OW 302
16963: IFFALSE 16985
// dialog := Say ( Houten , D3b-VanH-1 ) else
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_EXP 25
16974: PPUSH
16975: LD_STRING D3b-VanH-1
16977: PPUSH
16978: CALL_OW 88
16982: ST_TO_ADDR
16983: GO 17063
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16985: LD_ADDR_VAR 0 1
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 21
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 23
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 120
17022: PUSH
17023: LD_INT 106
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 26
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: PPUSH
17047: CALL_OW 69
17051: PPUSH
17052: LD_STRING D3b-Sol1-1
17054: PPUSH
17055: LD_STRING 
17057: PPUSH
17058: CALL 19497 0 3
17062: ST_TO_ADDR
// if dialog then
17063: LD_VAR 0 1
17067: IFFALSE 17104
// begin Say ( JMM , D3b-JMM-2 ) ;
17069: LD_EXP 14
17073: PPUSH
17074: LD_STRING D3b-JMM-2
17076: PPUSH
17077: CALL_OW 88
// if IsOK ( Lisa ) then
17081: LD_EXP 19
17085: PPUSH
17086: CALL_OW 302
17090: IFFALSE 17104
// Say ( Lisa , D3b-Lisa-2 ) ;
17092: LD_EXP 19
17096: PPUSH
17097: LD_STRING D3b-Lisa-2
17099: PPUSH
17100: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17104: LD_EXP 7
17108: NOT
17109: IFFALSE 17117
// begin DialogueOff ;
17111: CALL_OW 7
// exit ;
17115: GO 17329
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17117: LD_INT 22
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 21
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 23
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 2
17149: PUSH
17150: LD_INT 120
17152: PUSH
17153: LD_INT 106
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 120
17162: PUSH
17163: LD_INT 107
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 26
17177: PUSH
17178: LD_INT 1
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: PPUSH
17197: LD_STRING DCa-Sol1-1
17199: PPUSH
17200: LD_STRING 
17202: PPUSH
17203: CALL 19497 0 3
17207: IFFALSE 17221
// Say ( JMM , DCb-JMM-1 ) ;
17209: LD_EXP 14
17213: PPUSH
17214: LD_STRING DCb-JMM-1
17216: PPUSH
17217: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17221: LD_INT 22
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 21
17233: PUSH
17234: LD_INT 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 23
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: LD_INT 120
17256: PUSH
17257: LD_INT 106
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 120
17266: PUSH
17267: LD_INT 107
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 26
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: PPUSH
17296: CALL_OW 69
17300: PPUSH
17301: LD_STRING DCb-Sol1-1
17303: PPUSH
17304: LD_STRING 
17306: PPUSH
17307: CALL 19497 0 3
17311: IFFALSE 17325
// Say ( JMM , DCb-JMM-2 ) ;
17313: LD_EXP 14
17317: PPUSH
17318: LD_STRING DCb-JMM-2
17320: PPUSH
17321: CALL_OW 88
// DialogueOff ;
17325: CALL_OW 7
// end ;
17329: PPOPN 2
17331: END
// export function DialogSeenComputer ( un ) ; begin
17332: LD_INT 0
17334: PPUSH
// if jmmArrival then
17335: LD_EXP 8
17339: IFFALSE 17343
// exit ;
17341: GO 17409
// CenterOnUnits ( un ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17352: LD_INT 22
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 2
17364: PUSH
17365: LD_INT 120
17367: PUSH
17368: LD_INT 106
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 120
17377: PUSH
17378: LD_INT 107
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 69
17398: PPUSH
17399: LD_STRING DC-Sol1-1
17401: PPUSH
17402: LD_STRING DC-FSol1-1
17404: PPUSH
17405: CALL 19497 0 3
// end ;
17409: LD_VAR 0 2
17413: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17414: LD_EXP 8
17418: PUSH
17419: LD_OWVAR 1
17423: PUSH
17424: LD_INT 48300
17426: GREATEREQUAL
17427: AND
17428: PUSH
17429: LD_EXP 14
17433: PPUSH
17434: CALL_OW 302
17438: AND
17439: IFFALSE 17902
17441: GO 17443
17443: DISABLE
// begin wait ( 2 2$00 ) ;
17444: LD_INT 4200
17446: PPUSH
17447: CALL_OW 67
// DialogueOn ;
17451: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17455: LD_EXP 30
17459: PPUSH
17460: LD_STRING D4-Pow-1
17462: PPUSH
17463: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17467: LD_EXP 14
17471: PPUSH
17472: LD_STRING D4-JMM-1
17474: PPUSH
17475: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17479: LD_EXP 30
17483: PPUSH
17484: LD_STRING D4-Pow-2
17486: PPUSH
17487: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17491: LD_EXP 14
17495: PPUSH
17496: LD_STRING D4-JMM-2
17498: PPUSH
17499: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17503: LD_EXP 30
17507: PPUSH
17508: LD_STRING D4-Pow-3
17510: PPUSH
17511: CALL_OW 94
// DialogueOff ;
17515: CALL_OW 7
// wait ( 1 1$00 ) ;
17519: LD_INT 2100
17521: PPUSH
17522: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
17526: LD_INT 1
17528: PPUSH
17529: CALL_OW 427
// wait ( 7 7$30 ) ;
17533: LD_INT 15750
17535: PPUSH
17536: CALL_OW 67
// DialogueOn ;
17540: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17544: LD_EXP 30
17548: PPUSH
17549: LD_STRING D4a-Pow-1
17551: PPUSH
17552: CALL_OW 94
// DialogueOff ;
17556: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
17560: LD_INT 1
17562: PPUSH
17563: CALL_OW 427
// SikorskiCounter ;
17567: CALL 19281 0 0
// PrepareSikorsky ;
17571: CALL 6239 0 0
// CenterNowOnUnits ( Sikorski ) ;
17575: LD_EXP 28
17579: PPUSH
17580: CALL_OW 87
// DialogueOn ;
17584: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17588: LD_EXP 28
17592: PPUSH
17593: LD_STRING D5-Sik-1
17595: PPUSH
17596: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 then
17600: LD_INT 11
17602: PPUSH
17603: LD_INT 22
17605: PUSH
17606: LD_INT 1
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 70
17617: PUSH
17618: LD_INT 1
17620: GREATER
17621: IFFALSE 17673
// begin Say ( JMM , D5-JMM-1 ) ;
17623: LD_EXP 14
17627: PPUSH
17628: LD_STRING D5-JMM-1
17630: PPUSH
17631: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
17635: LD_EXP 28
17639: PPUSH
17640: LD_STRING D7a-Sik-1
17642: PPUSH
17643: CALL_OW 88
// DialogueOff ;
17647: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17651: LD_STRING M2
17653: PPUSH
17654: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17658: LD_INT 1
17660: PPUSH
17661: CALL_OW 427
// SikorskiAttack ;
17665: CALL 7587 0 0
// exit ;
17669: GO 17902
// end else
17671: GO 17718
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
17673: LD_INT 15
17675: PPUSH
17676: LD_INT 81
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PPUSH
17686: CALL_OW 70
17690: IFFALSE 17706
// Say ( JMM , D5-JMM-1b ) else
17692: LD_EXP 14
17696: PPUSH
17697: LD_STRING D5-JMM-1b
17699: PPUSH
17700: CALL_OW 88
17704: GO 17718
// Say ( JMM , D5-JMM-1a ) ;
17706: LD_EXP 14
17710: PPUSH
17711: LD_STRING D5-JMM-1a
17713: PPUSH
17714: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17718: LD_EXP 28
17722: PPUSH
17723: LD_STRING D5-Sik-2
17725: PPUSH
17726: CALL_OW 88
// case Query ( QSikorski ) of 1 :
17730: LD_STRING QSikorski
17732: PPUSH
17733: CALL_OW 97
17737: PUSH
17738: LD_INT 1
17740: DOUBLE
17741: EQUAL
17742: IFTRUE 17746
17744: GO 17769
17746: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17747: LD_EXP 28
17751: PPUSH
17752: LD_STRING D5a-Sik-1
17754: PPUSH
17755: CALL_OW 88
// sikorskiWait := 1 1$00 ;
17759: LD_ADDR_EXP 4
17763: PUSH
17764: LD_INT 2100
17766: ST_TO_ADDR
// end ; 2 :
17767: GO 17856
17769: LD_INT 2
17771: DOUBLE
17772: EQUAL
17773: IFTRUE 17777
17775: GO 17800
17777: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17778: LD_EXP 28
17782: PPUSH
17783: LD_STRING D5b-Sik-1
17785: PPUSH
17786: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17790: LD_ADDR_EXP 4
17794: PUSH
17795: LD_INT 10500
17797: ST_TO_ADDR
// end ; 3 :
17798: GO 17856
17800: LD_INT 3
17802: DOUBLE
17803: EQUAL
17804: IFTRUE 17808
17806: GO 17855
17808: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17809: LD_EXP 28
17813: PPUSH
17814: LD_STRING D5c-Sik-1
17816: PPUSH
17817: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17821: LD_EXP 14
17825: PPUSH
17826: LD_STRING D5c-JMM-1
17828: PPUSH
17829: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17833: LD_EXP 28
17837: PPUSH
17838: LD_STRING D5c-Sik-2
17840: PPUSH
17841: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17845: LD_ADDR_EXP 4
17849: PUSH
17850: LD_INT 10500
17852: ST_TO_ADDR
// end ; end ;
17853: GO 17856
17855: POP
// DialogueOff ;
17856: CALL_OW 7
// SikorskiWaitCounter ;
17860: CALL 19344 0 0
// DialogueOn ;
17864: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17868: LD_EXP 28
17872: PPUSH
17873: LD_STRING D6-Sik-1
17875: PPUSH
17876: CALL_OW 88
// DialogueOff ;
17880: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17884: LD_STRING M2
17886: PPUSH
17887: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17891: LD_INT 1
17893: PPUSH
17894: CALL_OW 427
// SikorskiAttack ;
17898: CALL 7587 0 0
// end ;
17902: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
17903: LD_INT 11
17905: PPUSH
17906: LD_INT 22
17908: PUSH
17909: LD_INT 4
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 70
17920: PUSH
17921: LD_INT 2
17923: GREATER
17924: IFFALSE 18117
17926: GO 17928
17928: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17929: LD_EXP 28
17933: PPUSH
17934: LD_STRING D7-Sik-1
17936: PPUSH
17937: CALL_OW 88
// wait ( 0 0$10 ) ;
17941: LD_INT 350
17943: PPUSH
17944: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
17948: LD_EXP 14
17952: PPUSH
17953: LD_INT 11
17955: PPUSH
17956: CALL_OW 308
17960: PUSH
17961: LD_EXP 14
17965: PPUSH
17966: CALL_OW 310
17970: PPUSH
17971: LD_INT 11
17973: PPUSH
17974: CALL_OW 308
17978: OR
17979: IFFALSE 18003
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17981: LD_EXP 28
17985: PPUSH
17986: LD_STRING D7a-Sik-1
17988: PPUSH
17989: CALL_OW 88
// sikorskiStatus := 1 ;
17993: LD_ADDR_EXP 9
17997: PUSH
17998: LD_INT 1
18000: ST_TO_ADDR
// end else
18001: GO 18023
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18003: LD_EXP 28
18007: PPUSH
18008: LD_STRING D7b-Sik-1
18010: PPUSH
18011: CALL_OW 88
// sikorskiStatus := 0 ;
18015: LD_ADDR_EXP 9
18019: PUSH
18020: LD_INT 0
18022: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18023: LD_INT 1575
18025: PPUSH
18026: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18030: LD_EXP 14
18034: PPUSH
18035: LD_INT 11
18037: PPUSH
18038: CALL_OW 308
18042: PUSH
18043: LD_EXP 14
18047: PPUSH
18048: CALL_OW 310
18052: PPUSH
18053: LD_INT 11
18055: PPUSH
18056: CALL_OW 308
18060: OR
18061: PUSH
18062: LD_EXP 14
18066: PPUSH
18067: CALL_OW 302
18071: NOT
18072: OR
18073: IFFALSE 18097
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18075: LD_EXP 28
18079: PPUSH
18080: LD_STRING D7a-Sik-1
18082: PPUSH
18083: CALL_OW 88
// sikorskiStatus := 1 ;
18087: LD_ADDR_EXP 9
18091: PUSH
18092: LD_INT 1
18094: ST_TO_ADDR
// end else
18095: GO 18117
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18097: LD_EXP 28
18101: PPUSH
18102: LD_STRING D7b-Sik-1
18104: PPUSH
18105: CALL_OW 88
// sikorskiStatus := 0 ;
18109: LD_ADDR_EXP 9
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// end ; end ;
18117: END
// export function SikorskiKilledInAction ; begin
18118: LD_INT 0
18120: PPUSH
// wait ( 0 0$2 ) ;
18121: LD_INT 70
18123: PPUSH
18124: CALL_OW 67
// DialogueOn ;
18128: CALL_OW 6
// dwait ( 0 0$1 ) ;
18132: LD_INT 35
18134: PPUSH
18135: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18139: LD_EXP 30
18143: PPUSH
18144: LD_STRING D8b-Pow-1
18146: PPUSH
18147: CALL_OW 94
// YouLost ( Dismissed ) ;
18151: LD_STRING Dismissed
18153: PPUSH
18154: CALL_OW 104
// DialogueOff ;
18158: CALL_OW 7
// end ;
18162: LD_VAR 0 1
18166: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18167: LD_EXP 8
18171: PUSH
18172: LD_INT 28
18174: PPUSH
18175: CALL_OW 301
18179: AND
18180: PUSH
18181: LD_EXP 32
18185: PPUSH
18186: CALL_OW 301
18190: AND
18191: PUSH
18192: LD_INT 22
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 50
18204: PUSH
18205: EMPTY
18206: LIST
18207: PUSH
18208: LD_INT 30
18210: PUSH
18211: LD_INT 5
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 69
18227: PUSH
18228: LD_INT 0
18230: EQUAL
18231: AND
18232: IFFALSE 19278
18234: GO 18236
18236: DISABLE
18237: LD_INT 0
18239: PPUSH
18240: PPUSH
18241: PPUSH
// begin Video ( true ) ;
18242: LD_INT 1
18244: PPUSH
18245: CALL 77163 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18249: LD_INT 104
18251: PPUSH
18252: LD_INT 108
18254: PPUSH
18255: LD_INT 1
18257: PPUSH
18258: LD_INT 36
18260: NEG
18261: PPUSH
18262: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18266: LD_INT 104
18268: PPUSH
18269: LD_INT 108
18271: PPUSH
18272: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18276: LD_ADDR_VAR 0 2
18280: PUSH
18281: LD_INT 22
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 21
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: LD_INT 24
18306: PUSH
18307: LD_INT 249
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: ST_TO_ADDR
// if tmp then
18328: LD_VAR 0 2
18332: IFFALSE 18363
// for i in tmp do
18334: LD_ADDR_VAR 0 1
18338: PUSH
18339: LD_VAR 0 2
18343: PUSH
18344: FOR_IN
18345: IFFALSE 18361
// SetLives ( i , 249 ) ;
18347: LD_VAR 0 1
18351: PPUSH
18352: LD_INT 249
18354: PPUSH
18355: CALL_OW 234
18359: GO 18344
18361: POP
18362: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18363: LD_ADDR_VAR 0 1
18367: PUSH
18368: LD_INT 22
18370: PUSH
18371: LD_INT 3
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 21
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PPUSH
18392: CALL_OW 69
18396: PUSH
18397: FOR_IN
18398: IFFALSE 18441
// begin ComExit ( i ) ;
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL 77589 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_INT 131
18416: PPUSH
18417: LD_INT 127
18419: PPUSH
18420: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18424: LD_VAR 0 1
18428: PPUSH
18429: LD_INT 141
18431: PPUSH
18432: LD_INT 147
18434: PPUSH
18435: CALL_OW 171
// end ;
18439: GO 18397
18441: POP
18442: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18443: LD_INT 81
18445: PUSH
18446: LD_INT 3
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: LD_INT 21
18458: PUSH
18459: LD_INT 3
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: PPUSH
18479: LD_INT 131
18481: PPUSH
18482: LD_INT 127
18484: PPUSH
18485: CALL_OW 174
// wait ( 0 0$08 ) ;
18489: LD_INT 280
18491: PPUSH
18492: CALL_OW 67
// DialogueOn ;
18496: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
18500: LD_EXP 9
18504: PUSH
18505: LD_INT 1
18507: EQUAL
18508: PUSH
18509: LD_EXP 28
18513: PPUSH
18514: CALL_OW 302
18518: AND
18519: IFFALSE 18533
// Say ( Sikorski , D9-Sik-1 ) ;
18521: LD_EXP 28
18525: PPUSH
18526: LD_STRING D9-Sik-1
18528: PPUSH
18529: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
18533: LD_INT 22
18535: PUSH
18536: LD_INT 4
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PUSH
18548: LD_INT 0
18550: EQUAL
18551: PUSH
18552: LD_EXP 3
18556: AND
18557: IFFALSE 18566
// SetAchievement ( ACH_BLITZKRIEG ) ;
18559: LD_STRING ACH_BLITZKRIEG
18561: PPUSH
18562: CALL_OW 543
// if tick <= 45 45$10 then
18566: LD_OWVAR 1
18570: PUSH
18571: LD_INT 94850
18573: LESSEQUAL
18574: IFFALSE 18590
// begin wait ( 3 ) ;
18576: LD_INT 3
18578: PPUSH
18579: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
18583: LD_STRING ACH_ASPEED_8
18585: PPUSH
18586: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
18590: LD_STRING med1
18592: PPUSH
18593: LD_INT 1
18595: PPUSH
18596: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
18600: LD_STRING med2
18602: PPUSH
18603: LD_INT 1
18605: PPUSH
18606: CALL_OW 101
// if sikorskiStatus = 1 then
18610: LD_EXP 9
18614: PUSH
18615: LD_INT 1
18617: EQUAL
18618: IFFALSE 18632
// AddMedal ( perfect , 1 ) else
18620: LD_STRING perfect
18622: PPUSH
18623: LD_INT 1
18625: PPUSH
18626: CALL_OW 101
18630: GO 18643
// AddMedal ( perfect , - 1 ) ;
18632: LD_STRING perfect
18634: PPUSH
18635: LD_INT 1
18637: NEG
18638: PPUSH
18639: CALL_OW 101
// if Difficulty >= 3 then
18643: LD_OWVAR 67
18647: PUSH
18648: LD_INT 3
18650: GREATEREQUAL
18651: IFFALSE 18663
// SetAchievementEX ( ACH_AMER , 8 ) ;
18653: LD_STRING ACH_AMER
18655: PPUSH
18656: LD_INT 8
18658: PPUSH
18659: CALL_OW 564
// GiveMedals ( Main ) ;
18663: LD_STRING Main
18665: PPUSH
18666: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18670: LD_INT 22
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 23
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 21
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: LIST
18704: PPUSH
18705: CALL_OW 69
18709: PPUSH
18710: CALL_OW 43
// prefix := 08_ ;
18714: LD_ADDR_VAR 0 3
18718: PUSH
18719: LD_STRING 08_
18721: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
18722: LD_EXP 14
18726: PPUSH
18727: LD_VAR 0 3
18731: PUSH
18732: LD_STRING JMM
18734: STR
18735: PPUSH
18736: CALL_OW 38
// if IsLive ( Brown ) then
18740: LD_EXP 15
18744: PPUSH
18745: CALL_OW 300
18749: IFFALSE 18769
// SaveCharacters ( Brown , prefix & Brown ) ;
18751: LD_EXP 15
18755: PPUSH
18756: LD_VAR 0 3
18760: PUSH
18761: LD_STRING Brown
18763: STR
18764: PPUSH
18765: CALL_OW 38
// if IsLive ( Donaldson ) then
18769: LD_EXP 16
18773: PPUSH
18774: CALL_OW 300
18778: IFFALSE 18798
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
18780: LD_EXP 16
18784: PPUSH
18785: LD_VAR 0 3
18789: PUSH
18790: LD_STRING Donaldson
18792: STR
18793: PPUSH
18794: CALL_OW 38
// if IsLive ( Bobby ) then
18798: LD_EXP 17
18802: PPUSH
18803: CALL_OW 300
18807: IFFALSE 18827
// SaveCharacters ( Bobby , prefix & Bobby ) ;
18809: LD_EXP 17
18813: PPUSH
18814: LD_VAR 0 3
18818: PUSH
18819: LD_STRING Bobby
18821: STR
18822: PPUSH
18823: CALL_OW 38
// if IsLive ( Cyrus ) then
18827: LD_EXP 18
18831: PPUSH
18832: CALL_OW 300
18836: IFFALSE 18856
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
18838: LD_EXP 18
18842: PPUSH
18843: LD_VAR 0 3
18847: PUSH
18848: LD_STRING Cyrus
18850: STR
18851: PPUSH
18852: CALL_OW 38
// if IsLive ( Lisa ) then
18856: LD_EXP 19
18860: PPUSH
18861: CALL_OW 300
18865: IFFALSE 18885
// SaveCharacters ( Lisa , prefix & Lisa ) ;
18867: LD_EXP 19
18871: PPUSH
18872: LD_VAR 0 3
18876: PUSH
18877: LD_STRING Lisa
18879: STR
18880: PPUSH
18881: CALL_OW 38
// if IsLive ( Frank ) then
18885: LD_EXP 20
18889: PPUSH
18890: CALL_OW 300
18894: IFFALSE 18914
// SaveCharacters ( Frank , prefix & Frank ) ;
18896: LD_EXP 20
18900: PPUSH
18901: LD_VAR 0 3
18905: PUSH
18906: LD_STRING Frank
18908: STR
18909: PPUSH
18910: CALL_OW 38
// if IsLive ( Gladstone ) then
18914: LD_EXP 21
18918: PPUSH
18919: CALL_OW 300
18923: IFFALSE 18943
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
18925: LD_EXP 21
18929: PPUSH
18930: LD_VAR 0 3
18934: PUSH
18935: LD_STRING Gladstone
18937: STR
18938: PPUSH
18939: CALL_OW 38
// if IsLive ( Kikuchi ) then
18943: LD_EXP 22
18947: PPUSH
18948: CALL_OW 300
18952: IFFALSE 18972
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
18954: LD_EXP 22
18958: PPUSH
18959: LD_VAR 0 3
18963: PUSH
18964: LD_STRING Kikuchi
18966: STR
18967: PPUSH
18968: CALL_OW 38
// if IsLive ( Denis ) then
18972: LD_EXP 26
18976: PPUSH
18977: CALL_OW 300
18981: IFFALSE 19001
// SaveCharacters ( Denis , prefix & Denis ) ;
18983: LD_EXP 26
18987: PPUSH
18988: LD_VAR 0 3
18992: PUSH
18993: LD_STRING Denis
18995: STR
18996: PPUSH
18997: CALL_OW 38
// if IsLive ( Joan ) then
19001: LD_EXP 27
19005: PPUSH
19006: CALL_OW 300
19010: IFFALSE 19032
// SaveCharacters ( Joan , prefix & Joan ) else
19012: LD_EXP 27
19016: PPUSH
19017: LD_VAR 0 3
19021: PUSH
19022: LD_STRING Joan
19024: STR
19025: PPUSH
19026: CALL_OW 38
19030: GO 19039
// DeleteCharacters ( Joan ) ;
19032: LD_STRING Joan
19034: PPUSH
19035: CALL_OW 40
// if IsLive ( Khatam ) then
19039: LD_EXP 23
19043: PPUSH
19044: CALL_OW 300
19048: IFFALSE 19068
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19050: LD_EXP 23
19054: PPUSH
19055: LD_VAR 0 3
19059: PUSH
19060: LD_STRING Khatam
19062: STR
19063: PPUSH
19064: CALL_OW 38
// if IsLive ( Houten ) then
19068: LD_EXP 25
19072: PPUSH
19073: CALL_OW 300
19077: IFFALSE 19097
// SaveCharacters ( Houten , prefix & Houten ) ;
19079: LD_EXP 25
19083: PPUSH
19084: LD_VAR 0 3
19088: PUSH
19089: LD_STRING Houten
19091: STR
19092: PPUSH
19093: CALL_OW 38
// if IsLive ( Mike ) then
19097: LD_EXP 24
19101: PPUSH
19102: CALL_OW 300
19106: IFFALSE 19126
// SaveCharacters ( Mike , prefix & Mike ) ;
19108: LD_EXP 24
19112: PPUSH
19113: LD_VAR 0 3
19117: PUSH
19118: LD_STRING Mike
19120: STR
19121: PPUSH
19122: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19126: LD_INT 22
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 23
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 69
19165: PUSH
19166: LD_EXP 14
19170: PUSH
19171: LD_EXP 15
19175: PUSH
19176: LD_EXP 16
19180: PUSH
19181: LD_EXP 17
19185: PUSH
19186: LD_EXP 18
19190: PUSH
19191: LD_EXP 19
19195: PUSH
19196: LD_EXP 20
19200: PUSH
19201: LD_EXP 21
19205: PUSH
19206: LD_EXP 22
19210: PUSH
19211: LD_EXP 26
19215: PUSH
19216: LD_EXP 27
19220: PUSH
19221: LD_EXP 25
19225: PUSH
19226: LD_EXP 23
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: DIFF
19246: PPUSH
19247: LD_STRING 08_other_survivors
19249: PPUSH
19250: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19254: LD_INT 15
19256: PPUSH
19257: CALL 7061 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19261: LD_EXP 10
19265: NOT
19266: PPUSH
19267: LD_STRING 08_SikorskiStatus
19269: PPUSH
19270: CALL_OW 39
// YouWin ;
19274: CALL_OW 103
// end ; end_of_file
19278: PPOPN 3
19280: END
// export function SikorskiCounter ; begin
19281: LD_INT 0
19283: PPUSH
// repeat wait ( 0 0$1 ) ;
19284: LD_INT 35
19286: PPUSH
19287: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19291: LD_ADDR_OWVAR 47
19295: PUSH
19296: LD_STRING #Am08-2
19298: PUSH
19299: LD_EXP 3
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19308: LD_ADDR_EXP 3
19312: PUSH
19313: LD_EXP 3
19317: PUSH
19318: LD_INT 35
19320: MINUS
19321: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19322: LD_EXP 3
19326: PUSH
19327: LD_INT 0
19329: EQUAL
19330: IFFALSE 19284
// display_strings := [ ] ;
19332: LD_ADDR_OWVAR 47
19336: PUSH
19337: EMPTY
19338: ST_TO_ADDR
// end ;
19339: LD_VAR 0 1
19343: RET
// export function SikorskiWaitCounter ; begin
19344: LD_INT 0
19346: PPUSH
// repeat wait ( 0 0$1 ) ;
19347: LD_INT 35
19349: PPUSH
19350: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19354: LD_ADDR_OWVAR 47
19358: PUSH
19359: LD_STRING #Am08-1
19361: PUSH
19362: LD_EXP 4
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19371: LD_ADDR_EXP 4
19375: PUSH
19376: LD_EXP 4
19380: PUSH
19381: LD_INT 35
19383: MINUS
19384: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19385: LD_EXP 4
19389: PUSH
19390: LD_INT 0
19392: EQUAL
19393: IFFALSE 19347
// display_strings := [ ] ;
19395: LD_ADDR_OWVAR 47
19399: PUSH
19400: EMPTY
19401: ST_TO_ADDR
// end ; end_of_file
19402: LD_VAR 0 1
19406: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19407: LD_EXP 3
19411: IFFALSE 19451
19413: GO 19415
19415: DISABLE
// begin enable ;
19416: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19417: LD_INT 14
19419: PPUSH
19420: CALL_OW 435
19424: PUSH
19425: LD_INT 10
19427: LESS
19428: IFFALSE 19451
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19430: LD_INT 1
19432: PPUSH
19433: LD_INT 5
19435: PPUSH
19436: CALL_OW 12
19440: PPUSH
19441: LD_INT 14
19443: PPUSH
19444: LD_INT 1
19446: PPUSH
19447: CALL_OW 55
// end ;
19451: END
// every 0 0$55 trigger sikorskiArriveCounter do
19452: LD_EXP 3
19456: IFFALSE 19496
19458: GO 19460
19460: DISABLE
// begin enable ;
19461: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19462: LD_INT 13
19464: PPUSH
19465: CALL_OW 435
19469: PUSH
19470: LD_INT 10
19472: LESS
19473: IFFALSE 19496
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
19475: LD_INT 1
19477: PPUSH
19478: LD_INT 5
19480: PPUSH
19481: CALL_OW 12
19485: PPUSH
19486: LD_INT 13
19488: PPUSH
19489: LD_INT 1
19491: PPUSH
19492: CALL_OW 55
// end ; end_of_file
19496: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
19497: LD_INT 0
19499: PPUSH
19500: PPUSH
// if not units then
19501: LD_VAR 0 1
19505: NOT
19506: IFFALSE 19510
// exit ;
19508: GO 19635
// result := false ;
19510: LD_ADDR_VAR 0 4
19514: PUSH
19515: LD_INT 0
19517: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
19518: LD_ADDR_VAR 0 5
19522: PUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: LD_INT 26
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 72
19542: ST_TO_ADDR
// if tmp then
19543: LD_VAR 0 5
19547: IFFALSE 19573
// result := Say ( tmp [ 1 ] , menDialog ) ;
19549: LD_ADDR_VAR 0 4
19553: PUSH
19554: LD_VAR 0 5
19558: PUSH
19559: LD_INT 1
19561: ARRAY
19562: PPUSH
19563: LD_VAR 0 2
19567: PPUSH
19568: CALL_OW 88
19572: ST_TO_ADDR
// if not result then
19573: LD_VAR 0 4
19577: NOT
19578: IFFALSE 19635
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
19580: LD_ADDR_VAR 0 5
19584: PUSH
19585: LD_VAR 0 1
19589: PPUSH
19590: LD_INT 26
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 72
19604: ST_TO_ADDR
// if tmp then
19605: LD_VAR 0 5
19609: IFFALSE 19635
// result := Say ( tmp [ 1 ] , womenDialog ) ;
19611: LD_ADDR_VAR 0 4
19615: PUSH
19616: LD_VAR 0 5
19620: PUSH
19621: LD_INT 1
19623: ARRAY
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: CALL_OW 88
19634: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
19635: LD_VAR 0 4
19639: RET
// export globalGameSaveCounter ; every 0 0$1 do
19640: GO 19642
19642: DISABLE
// begin enable ;
19643: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19644: LD_STRING updateTimer(
19646: PUSH
19647: LD_OWVAR 1
19651: STR
19652: PUSH
19653: LD_STRING );
19655: STR
19656: PPUSH
19657: CALL_OW 559
// end ;
19661: END
// every 0 0$1 do
19662: GO 19664
19664: DISABLE
// begin globalGameSaveCounter := 0 ;
19665: LD_ADDR_EXP 37
19669: PUSH
19670: LD_INT 0
19672: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19673: LD_STRING setGameSaveCounter(0)
19675: PPUSH
19676: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19680: LD_STRING initStreamRollete();
19682: PPUSH
19683: CALL_OW 559
// InitStreamMode ;
19687: CALL 21013 0 0
// DefineStreamItems ( false ) ;
19691: LD_INT 0
19693: PPUSH
19694: CALL 21477 0 1
// end ;
19698: END
// export function SOS_MapStart ( ) ; begin
19699: LD_INT 0
19701: PPUSH
// if streamModeActive then
19702: LD_EXP 38
19706: IFFALSE 19715
// DefineStreamItems ( true ) ;
19708: LD_INT 1
19710: PPUSH
19711: CALL 21477 0 1
// UpdateLuaVariables ( ) ;
19715: CALL 19732 0 0
// UpdateFactoryWaypoints ( ) ;
19719: CALL 34338 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19723: CALL 34595 0 0
// end ;
19727: LD_VAR 0 1
19731: RET
// function UpdateLuaVariables ( ) ; begin
19732: LD_INT 0
19734: PPUSH
// if globalGameSaveCounter then
19735: LD_EXP 37
19739: IFFALSE 19773
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19741: LD_ADDR_EXP 37
19745: PUSH
19746: LD_EXP 37
19750: PPUSH
19751: CALL 78552 0 1
19755: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19756: LD_STRING setGameSaveCounter(
19758: PUSH
19759: LD_EXP 37
19763: STR
19764: PUSH
19765: LD_STRING )
19767: STR
19768: PPUSH
19769: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19773: LD_STRING setGameDifficulty(
19775: PUSH
19776: LD_OWVAR 67
19780: STR
19781: PUSH
19782: LD_STRING )
19784: STR
19785: PPUSH
19786: CALL_OW 559
// end ;
19790: LD_VAR 0 1
19794: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19795: LD_INT 0
19797: PPUSH
// if p2 = stream_mode then
19798: LD_VAR 0 2
19802: PUSH
19803: LD_INT 100
19805: EQUAL
19806: IFFALSE 20809
// begin if not StreamModeActive then
19808: LD_EXP 38
19812: NOT
19813: IFFALSE 19823
// StreamModeActive := true ;
19815: LD_ADDR_EXP 38
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 0 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 0
19830: EQUAL
19831: IFFALSE 19837
// InitStreamMode ;
19833: CALL 21013 0 0
// if p3 = 1 then
19837: LD_VAR 0 3
19841: PUSH
19842: LD_INT 1
19844: EQUAL
19845: IFFALSE 19855
// sRocket := true ;
19847: LD_ADDR_EXP 43
19851: PUSH
19852: LD_INT 1
19854: ST_TO_ADDR
// if p3 = 2 then
19855: LD_VAR 0 3
19859: PUSH
19860: LD_INT 2
19862: EQUAL
19863: IFFALSE 19873
// sSpeed := true ;
19865: LD_ADDR_EXP 42
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// if p3 = 3 then
19873: LD_VAR 0 3
19877: PUSH
19878: LD_INT 3
19880: EQUAL
19881: IFFALSE 19891
// sEngine := true ;
19883: LD_ADDR_EXP 44
19887: PUSH
19888: LD_INT 1
19890: ST_TO_ADDR
// if p3 = 4 then
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 4
19898: EQUAL
19899: IFFALSE 19909
// sSpec := true ;
19901: LD_ADDR_EXP 41
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// if p3 = 5 then
19909: LD_VAR 0 3
19913: PUSH
19914: LD_INT 5
19916: EQUAL
19917: IFFALSE 19927
// sLevel := true ;
19919: LD_ADDR_EXP 45
19923: PUSH
19924: LD_INT 1
19926: ST_TO_ADDR
// if p3 = 6 then
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 6
19934: EQUAL
19935: IFFALSE 19945
// sArmoury := true ;
19937: LD_ADDR_EXP 46
19941: PUSH
19942: LD_INT 1
19944: ST_TO_ADDR
// if p3 = 7 then
19945: LD_VAR 0 3
19949: PUSH
19950: LD_INT 7
19952: EQUAL
19953: IFFALSE 19963
// sRadar := true ;
19955: LD_ADDR_EXP 47
19959: PUSH
19960: LD_INT 1
19962: ST_TO_ADDR
// if p3 = 8 then
19963: LD_VAR 0 3
19967: PUSH
19968: LD_INT 8
19970: EQUAL
19971: IFFALSE 19981
// sBunker := true ;
19973: LD_ADDR_EXP 48
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 9 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 9
19988: EQUAL
19989: IFFALSE 19999
// sHack := true ;
19991: LD_ADDR_EXP 49
19995: PUSH
19996: LD_INT 1
19998: ST_TO_ADDR
// if p3 = 10 then
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 10
20006: EQUAL
20007: IFFALSE 20017
// sFire := true ;
20009: LD_ADDR_EXP 50
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// if p3 = 11 then
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 11
20024: EQUAL
20025: IFFALSE 20035
// sRefresh := true ;
20027: LD_ADDR_EXP 51
20031: PUSH
20032: LD_INT 1
20034: ST_TO_ADDR
// if p3 = 12 then
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 12
20042: EQUAL
20043: IFFALSE 20053
// sExp := true ;
20045: LD_ADDR_EXP 52
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// if p3 = 13 then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 13
20060: EQUAL
20061: IFFALSE 20071
// sDepot := true ;
20063: LD_ADDR_EXP 53
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// if p3 = 14 then
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 14
20078: EQUAL
20079: IFFALSE 20089
// sFlag := true ;
20081: LD_ADDR_EXP 54
20085: PUSH
20086: LD_INT 1
20088: ST_TO_ADDR
// if p3 = 15 then
20089: LD_VAR 0 3
20093: PUSH
20094: LD_INT 15
20096: EQUAL
20097: IFFALSE 20107
// sKamikadze := true ;
20099: LD_ADDR_EXP 62
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// if p3 = 16 then
20107: LD_VAR 0 3
20111: PUSH
20112: LD_INT 16
20114: EQUAL
20115: IFFALSE 20125
// sTroll := true ;
20117: LD_ADDR_EXP 63
20121: PUSH
20122: LD_INT 1
20124: ST_TO_ADDR
// if p3 = 17 then
20125: LD_VAR 0 3
20129: PUSH
20130: LD_INT 17
20132: EQUAL
20133: IFFALSE 20143
// sSlow := true ;
20135: LD_ADDR_EXP 64
20139: PUSH
20140: LD_INT 1
20142: ST_TO_ADDR
// if p3 = 18 then
20143: LD_VAR 0 3
20147: PUSH
20148: LD_INT 18
20150: EQUAL
20151: IFFALSE 20161
// sLack := true ;
20153: LD_ADDR_EXP 65
20157: PUSH
20158: LD_INT 1
20160: ST_TO_ADDR
// if p3 = 19 then
20161: LD_VAR 0 3
20165: PUSH
20166: LD_INT 19
20168: EQUAL
20169: IFFALSE 20179
// sTank := true ;
20171: LD_ADDR_EXP 67
20175: PUSH
20176: LD_INT 1
20178: ST_TO_ADDR
// if p3 = 20 then
20179: LD_VAR 0 3
20183: PUSH
20184: LD_INT 20
20186: EQUAL
20187: IFFALSE 20197
// sRemote := true ;
20189: LD_ADDR_EXP 68
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
// if p3 = 21 then
20197: LD_VAR 0 3
20201: PUSH
20202: LD_INT 21
20204: EQUAL
20205: IFFALSE 20215
// sPowell := true ;
20207: LD_ADDR_EXP 69
20211: PUSH
20212: LD_INT 1
20214: ST_TO_ADDR
// if p3 = 22 then
20215: LD_VAR 0 3
20219: PUSH
20220: LD_INT 22
20222: EQUAL
20223: IFFALSE 20233
// sTeleport := true ;
20225: LD_ADDR_EXP 72
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// if p3 = 23 then
20233: LD_VAR 0 3
20237: PUSH
20238: LD_INT 23
20240: EQUAL
20241: IFFALSE 20251
// sOilTower := true ;
20243: LD_ADDR_EXP 74
20247: PUSH
20248: LD_INT 1
20250: ST_TO_ADDR
// if p3 = 24 then
20251: LD_VAR 0 3
20255: PUSH
20256: LD_INT 24
20258: EQUAL
20259: IFFALSE 20269
// sShovel := true ;
20261: LD_ADDR_EXP 75
20265: PUSH
20266: LD_INT 1
20268: ST_TO_ADDR
// if p3 = 25 then
20269: LD_VAR 0 3
20273: PUSH
20274: LD_INT 25
20276: EQUAL
20277: IFFALSE 20287
// sSheik := true ;
20279: LD_ADDR_EXP 76
20283: PUSH
20284: LD_INT 1
20286: ST_TO_ADDR
// if p3 = 26 then
20287: LD_VAR 0 3
20291: PUSH
20292: LD_INT 26
20294: EQUAL
20295: IFFALSE 20305
// sEarthquake := true ;
20297: LD_ADDR_EXP 78
20301: PUSH
20302: LD_INT 1
20304: ST_TO_ADDR
// if p3 = 27 then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_INT 27
20312: EQUAL
20313: IFFALSE 20323
// sAI := true ;
20315: LD_ADDR_EXP 79
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// if p3 = 28 then
20323: LD_VAR 0 3
20327: PUSH
20328: LD_INT 28
20330: EQUAL
20331: IFFALSE 20341
// sCargo := true ;
20333: LD_ADDR_EXP 82
20337: PUSH
20338: LD_INT 1
20340: ST_TO_ADDR
// if p3 = 29 then
20341: LD_VAR 0 3
20345: PUSH
20346: LD_INT 29
20348: EQUAL
20349: IFFALSE 20359
// sDLaser := true ;
20351: LD_ADDR_EXP 83
20355: PUSH
20356: LD_INT 1
20358: ST_TO_ADDR
// if p3 = 30 then
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 30
20366: EQUAL
20367: IFFALSE 20377
// sExchange := true ;
20369: LD_ADDR_EXP 84
20373: PUSH
20374: LD_INT 1
20376: ST_TO_ADDR
// if p3 = 31 then
20377: LD_VAR 0 3
20381: PUSH
20382: LD_INT 31
20384: EQUAL
20385: IFFALSE 20395
// sFac := true ;
20387: LD_ADDR_EXP 85
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// if p3 = 32 then
20395: LD_VAR 0 3
20399: PUSH
20400: LD_INT 32
20402: EQUAL
20403: IFFALSE 20413
// sPower := true ;
20405: LD_ADDR_EXP 86
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// if p3 = 33 then
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 33
20420: EQUAL
20421: IFFALSE 20431
// sRandom := true ;
20423: LD_ADDR_EXP 87
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
// if p3 = 34 then
20431: LD_VAR 0 3
20435: PUSH
20436: LD_INT 34
20438: EQUAL
20439: IFFALSE 20449
// sShield := true ;
20441: LD_ADDR_EXP 88
20445: PUSH
20446: LD_INT 1
20448: ST_TO_ADDR
// if p3 = 35 then
20449: LD_VAR 0 3
20453: PUSH
20454: LD_INT 35
20456: EQUAL
20457: IFFALSE 20467
// sTime := true ;
20459: LD_ADDR_EXP 89
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
// if p3 = 36 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 36
20474: EQUAL
20475: IFFALSE 20485
// sTools := true ;
20477: LD_ADDR_EXP 90
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// if p3 = 101 then
20485: LD_VAR 0 3
20489: PUSH
20490: LD_INT 101
20492: EQUAL
20493: IFFALSE 20503
// sSold := true ;
20495: LD_ADDR_EXP 55
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// if p3 = 102 then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 102
20510: EQUAL
20511: IFFALSE 20521
// sDiff := true ;
20513: LD_ADDR_EXP 56
20517: PUSH
20518: LD_INT 1
20520: ST_TO_ADDR
// if p3 = 103 then
20521: LD_VAR 0 3
20525: PUSH
20526: LD_INT 103
20528: EQUAL
20529: IFFALSE 20539
// sFog := true ;
20531: LD_ADDR_EXP 59
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// if p3 = 104 then
20539: LD_VAR 0 3
20543: PUSH
20544: LD_INT 104
20546: EQUAL
20547: IFFALSE 20557
// sReset := true ;
20549: LD_ADDR_EXP 60
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// if p3 = 105 then
20557: LD_VAR 0 3
20561: PUSH
20562: LD_INT 105
20564: EQUAL
20565: IFFALSE 20575
// sSun := true ;
20567: LD_ADDR_EXP 61
20571: PUSH
20572: LD_INT 1
20574: ST_TO_ADDR
// if p3 = 106 then
20575: LD_VAR 0 3
20579: PUSH
20580: LD_INT 106
20582: EQUAL
20583: IFFALSE 20593
// sTiger := true ;
20585: LD_ADDR_EXP 57
20589: PUSH
20590: LD_INT 1
20592: ST_TO_ADDR
// if p3 = 107 then
20593: LD_VAR 0 3
20597: PUSH
20598: LD_INT 107
20600: EQUAL
20601: IFFALSE 20611
// sBomb := true ;
20603: LD_ADDR_EXP 58
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// if p3 = 108 then
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 108
20618: EQUAL
20619: IFFALSE 20629
// sWound := true ;
20621: LD_ADDR_EXP 66
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// if p3 = 109 then
20629: LD_VAR 0 3
20633: PUSH
20634: LD_INT 109
20636: EQUAL
20637: IFFALSE 20647
// sBetray := true ;
20639: LD_ADDR_EXP 70
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// if p3 = 110 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 110
20654: EQUAL
20655: IFFALSE 20665
// sContamin := true ;
20657: LD_ADDR_EXP 71
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// if p3 = 111 then
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 111
20672: EQUAL
20673: IFFALSE 20683
// sOil := true ;
20675: LD_ADDR_EXP 73
20679: PUSH
20680: LD_INT 1
20682: ST_TO_ADDR
// if p3 = 112 then
20683: LD_VAR 0 3
20687: PUSH
20688: LD_INT 112
20690: EQUAL
20691: IFFALSE 20701
// sStu := true ;
20693: LD_ADDR_EXP 77
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// if p3 = 113 then
20701: LD_VAR 0 3
20705: PUSH
20706: LD_INT 113
20708: EQUAL
20709: IFFALSE 20719
// sBazooka := true ;
20711: LD_ADDR_EXP 80
20715: PUSH
20716: LD_INT 1
20718: ST_TO_ADDR
// if p3 = 114 then
20719: LD_VAR 0 3
20723: PUSH
20724: LD_INT 114
20726: EQUAL
20727: IFFALSE 20737
// sMortar := true ;
20729: LD_ADDR_EXP 81
20733: PUSH
20734: LD_INT 1
20736: ST_TO_ADDR
// if p3 = 115 then
20737: LD_VAR 0 3
20741: PUSH
20742: LD_INT 115
20744: EQUAL
20745: IFFALSE 20755
// sRanger := true ;
20747: LD_ADDR_EXP 91
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// if p3 = 116 then
20755: LD_VAR 0 3
20759: PUSH
20760: LD_INT 116
20762: EQUAL
20763: IFFALSE 20773
// sComputer := true ;
20765: LD_ADDR_EXP 92
20769: PUSH
20770: LD_INT 1
20772: ST_TO_ADDR
// if p3 = 117 then
20773: LD_VAR 0 3
20777: PUSH
20778: LD_INT 117
20780: EQUAL
20781: IFFALSE 20791
// s30 := true ;
20783: LD_ADDR_EXP 93
20787: PUSH
20788: LD_INT 1
20790: ST_TO_ADDR
// if p3 = 118 then
20791: LD_VAR 0 3
20795: PUSH
20796: LD_INT 118
20798: EQUAL
20799: IFFALSE 20809
// s60 := true ;
20801: LD_ADDR_EXP 94
20805: PUSH
20806: LD_INT 1
20808: ST_TO_ADDR
// end ; if p2 = hack_mode then
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 101
20816: EQUAL
20817: IFFALSE 20945
// begin case p3 of 1 :
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 1
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20839
20832: POP
// hHackUnlimitedResources ; 2 :
20833: CALL 33084 0 0
20837: GO 20945
20839: LD_INT 2
20841: DOUBLE
20842: EQUAL
20843: IFTRUE 20847
20845: GO 20854
20847: POP
// hHackSetLevel10 ; 3 :
20848: CALL 33217 0 0
20852: GO 20945
20854: LD_INT 3
20856: DOUBLE
20857: EQUAL
20858: IFTRUE 20862
20860: GO 20869
20862: POP
// hHackSetLevel10YourUnits ; 4 :
20863: CALL 33302 0 0
20867: GO 20945
20869: LD_INT 4
20871: DOUBLE
20872: EQUAL
20873: IFTRUE 20877
20875: GO 20884
20877: POP
// hHackInvincible ; 5 :
20878: CALL 33750 0 0
20882: GO 20945
20884: LD_INT 5
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20899
20892: POP
// hHackInvisible ; 6 :
20893: CALL 33861 0 0
20897: GO 20945
20899: LD_INT 6
20901: DOUBLE
20902: EQUAL
20903: IFTRUE 20907
20905: GO 20914
20907: POP
// hHackChangeYourSide ; 7 :
20908: CALL 33918 0 0
20912: GO 20945
20914: LD_INT 7
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20922
20920: GO 20929
20922: POP
// hHackChangeUnitSide ; 8 :
20923: CALL 33960 0 0
20927: GO 20945
20929: LD_INT 8
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20944
20937: POP
// hHackFog ; end ;
20938: CALL 34061 0 0
20942: GO 20945
20944: POP
// end ; if p2 = game_save_mode then
20945: LD_VAR 0 2
20949: PUSH
20950: LD_INT 102
20952: EQUAL
20953: IFFALSE 21008
// begin if p3 = 1 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 1
20962: EQUAL
20963: IFFALSE 20975
// globalGameSaveCounter := p4 ;
20965: LD_ADDR_EXP 37
20969: PUSH
20970: LD_VAR 0 4
20974: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20975: LD_VAR 0 3
20979: PUSH
20980: LD_INT 2
20982: EQUAL
20983: PUSH
20984: LD_EXP 37
20988: AND
20989: IFFALSE 21008
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20991: LD_STRING setGameSaveCounter(
20993: PUSH
20994: LD_EXP 37
20998: STR
20999: PUSH
21000: LD_STRING )
21002: STR
21003: PPUSH
21004: CALL_OW 559
// end ; end ;
21008: LD_VAR 0 7
21012: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21013: LD_INT 0
21015: PPUSH
// streamModeActive := false ;
21016: LD_ADDR_EXP 38
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// normalCounter := 36 ;
21024: LD_ADDR_EXP 39
21028: PUSH
21029: LD_INT 36
21031: ST_TO_ADDR
// hardcoreCounter := 18 ;
21032: LD_ADDR_EXP 40
21036: PUSH
21037: LD_INT 18
21039: ST_TO_ADDR
// sRocket := false ;
21040: LD_ADDR_EXP 43
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sSpeed := false ;
21048: LD_ADDR_EXP 42
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sEngine := false ;
21056: LD_ADDR_EXP 44
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sSpec := false ;
21064: LD_ADDR_EXP 41
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sLevel := false ;
21072: LD_ADDR_EXP 45
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// sArmoury := false ;
21080: LD_ADDR_EXP 46
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// sRadar := false ;
21088: LD_ADDR_EXP 47
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sBunker := false ;
21096: LD_ADDR_EXP 48
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sHack := false ;
21104: LD_ADDR_EXP 49
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sFire := false ;
21112: LD_ADDR_EXP 50
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sRefresh := false ;
21120: LD_ADDR_EXP 51
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sExp := false ;
21128: LD_ADDR_EXP 52
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sDepot := false ;
21136: LD_ADDR_EXP 53
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sFlag := false ;
21144: LD_ADDR_EXP 54
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sKamikadze := false ;
21152: LD_ADDR_EXP 62
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sTroll := false ;
21160: LD_ADDR_EXP 63
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sSlow := false ;
21168: LD_ADDR_EXP 64
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sLack := false ;
21176: LD_ADDR_EXP 65
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sTank := false ;
21184: LD_ADDR_EXP 67
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sRemote := false ;
21192: LD_ADDR_EXP 68
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sPowell := false ;
21200: LD_ADDR_EXP 69
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sTeleport := false ;
21208: LD_ADDR_EXP 72
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sOilTower := false ;
21216: LD_ADDR_EXP 74
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sShovel := false ;
21224: LD_ADDR_EXP 75
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sSheik := false ;
21232: LD_ADDR_EXP 76
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sEarthquake := false ;
21240: LD_ADDR_EXP 78
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sAI := false ;
21248: LD_ADDR_EXP 79
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sCargo := false ;
21256: LD_ADDR_EXP 82
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sDLaser := false ;
21264: LD_ADDR_EXP 83
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sExchange := false ;
21272: LD_ADDR_EXP 84
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sFac := false ;
21280: LD_ADDR_EXP 85
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sPower := false ;
21288: LD_ADDR_EXP 86
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sRandom := false ;
21296: LD_ADDR_EXP 87
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sShield := false ;
21304: LD_ADDR_EXP 88
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sTime := false ;
21312: LD_ADDR_EXP 89
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sTools := false ;
21320: LD_ADDR_EXP 90
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sSold := false ;
21328: LD_ADDR_EXP 55
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sDiff := false ;
21336: LD_ADDR_EXP 56
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sFog := false ;
21344: LD_ADDR_EXP 59
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sReset := false ;
21352: LD_ADDR_EXP 60
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sSun := false ;
21360: LD_ADDR_EXP 61
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sTiger := false ;
21368: LD_ADDR_EXP 57
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sBomb := false ;
21376: LD_ADDR_EXP 58
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sWound := false ;
21384: LD_ADDR_EXP 66
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sBetray := false ;
21392: LD_ADDR_EXP 70
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sContamin := false ;
21400: LD_ADDR_EXP 71
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sOil := false ;
21408: LD_ADDR_EXP 73
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sStu := false ;
21416: LD_ADDR_EXP 77
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sBazooka := false ;
21424: LD_ADDR_EXP 80
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sMortar := false ;
21432: LD_ADDR_EXP 81
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sRanger := false ;
21440: LD_ADDR_EXP 91
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sComputer := false ;
21448: LD_ADDR_EXP 92
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// s30 := false ;
21456: LD_ADDR_EXP 93
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// s60 := false ;
21464: LD_ADDR_EXP 94
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// end ;
21472: LD_VAR 0 1
21476: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21477: LD_INT 0
21479: PPUSH
21480: PPUSH
21481: PPUSH
21482: PPUSH
21483: PPUSH
21484: PPUSH
21485: PPUSH
// result := [ ] ;
21486: LD_ADDR_VAR 0 2
21490: PUSH
21491: EMPTY
21492: ST_TO_ADDR
// if campaign_id = 1 then
21493: LD_OWVAR 69
21497: PUSH
21498: LD_INT 1
21500: EQUAL
21501: IFFALSE 24667
// begin case mission_number of 1 :
21503: LD_OWVAR 70
21507: PUSH
21508: LD_INT 1
21510: DOUBLE
21511: EQUAL
21512: IFTRUE 21516
21514: GO 21592
21516: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21517: LD_ADDR_VAR 0 2
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 4
21527: PUSH
21528: LD_INT 11
21530: PUSH
21531: LD_INT 12
21533: PUSH
21534: LD_INT 15
21536: PUSH
21537: LD_INT 16
21539: PUSH
21540: LD_INT 22
21542: PUSH
21543: LD_INT 23
21545: PUSH
21546: LD_INT 26
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 101
21562: PUSH
21563: LD_INT 102
21565: PUSH
21566: LD_INT 106
21568: PUSH
21569: LD_INT 116
21571: PUSH
21572: LD_INT 117
21574: PUSH
21575: LD_INT 118
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: ST_TO_ADDR
21590: GO 24665
21592: LD_INT 2
21594: DOUBLE
21595: EQUAL
21596: IFTRUE 21600
21598: GO 21684
21600: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21601: LD_ADDR_VAR 0 2
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 4
21611: PUSH
21612: LD_INT 11
21614: PUSH
21615: LD_INT 12
21617: PUSH
21618: LD_INT 15
21620: PUSH
21621: LD_INT 16
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_INT 23
21629: PUSH
21630: LD_INT 26
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 101
21646: PUSH
21647: LD_INT 102
21649: PUSH
21650: LD_INT 105
21652: PUSH
21653: LD_INT 106
21655: PUSH
21656: LD_INT 108
21658: PUSH
21659: LD_INT 116
21661: PUSH
21662: LD_INT 117
21664: PUSH
21665: LD_INT 118
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: ST_TO_ADDR
21682: GO 24665
21684: LD_INT 3
21686: DOUBLE
21687: EQUAL
21688: IFTRUE 21692
21690: GO 21780
21692: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21693: LD_ADDR_VAR 0 2
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: LD_INT 4
21703: PUSH
21704: LD_INT 5
21706: PUSH
21707: LD_INT 11
21709: PUSH
21710: LD_INT 12
21712: PUSH
21713: LD_INT 15
21715: PUSH
21716: LD_INT 16
21718: PUSH
21719: LD_INT 22
21721: PUSH
21722: LD_INT 26
21724: PUSH
21725: LD_INT 36
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 101
21742: PUSH
21743: LD_INT 102
21745: PUSH
21746: LD_INT 105
21748: PUSH
21749: LD_INT 106
21751: PUSH
21752: LD_INT 108
21754: PUSH
21755: LD_INT 116
21757: PUSH
21758: LD_INT 117
21760: PUSH
21761: LD_INT 118
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: ST_TO_ADDR
21778: GO 24665
21780: LD_INT 4
21782: DOUBLE
21783: EQUAL
21784: IFTRUE 21788
21786: GO 21884
21788: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21789: LD_ADDR_VAR 0 2
21793: PUSH
21794: LD_INT 2
21796: PUSH
21797: LD_INT 4
21799: PUSH
21800: LD_INT 5
21802: PUSH
21803: LD_INT 8
21805: PUSH
21806: LD_INT 11
21808: PUSH
21809: LD_INT 12
21811: PUSH
21812: LD_INT 15
21814: PUSH
21815: LD_INT 16
21817: PUSH
21818: LD_INT 22
21820: PUSH
21821: LD_INT 23
21823: PUSH
21824: LD_INT 26
21826: PUSH
21827: LD_INT 36
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 101
21846: PUSH
21847: LD_INT 102
21849: PUSH
21850: LD_INT 105
21852: PUSH
21853: LD_INT 106
21855: PUSH
21856: LD_INT 108
21858: PUSH
21859: LD_INT 116
21861: PUSH
21862: LD_INT 117
21864: PUSH
21865: LD_INT 118
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: ST_TO_ADDR
21882: GO 24665
21884: LD_INT 5
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 22004
21892: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21893: LD_ADDR_VAR 0 2
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: LD_INT 4
21903: PUSH
21904: LD_INT 5
21906: PUSH
21907: LD_INT 6
21909: PUSH
21910: LD_INT 8
21912: PUSH
21913: LD_INT 11
21915: PUSH
21916: LD_INT 12
21918: PUSH
21919: LD_INT 15
21921: PUSH
21922: LD_INT 16
21924: PUSH
21925: LD_INT 22
21927: PUSH
21928: LD_INT 23
21930: PUSH
21931: LD_INT 25
21933: PUSH
21934: LD_INT 26
21936: PUSH
21937: LD_INT 36
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 101
21958: PUSH
21959: LD_INT 102
21961: PUSH
21962: LD_INT 105
21964: PUSH
21965: LD_INT 106
21967: PUSH
21968: LD_INT 108
21970: PUSH
21971: LD_INT 109
21973: PUSH
21974: LD_INT 112
21976: PUSH
21977: LD_INT 116
21979: PUSH
21980: LD_INT 117
21982: PUSH
21983: LD_INT 118
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: ST_TO_ADDR
22002: GO 24665
22004: LD_INT 6
22006: DOUBLE
22007: EQUAL
22008: IFTRUE 22012
22010: GO 22144
22012: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: LD_INT 4
22023: PUSH
22024: LD_INT 5
22026: PUSH
22027: LD_INT 6
22029: PUSH
22030: LD_INT 8
22032: PUSH
22033: LD_INT 11
22035: PUSH
22036: LD_INT 12
22038: PUSH
22039: LD_INT 15
22041: PUSH
22042: LD_INT 16
22044: PUSH
22045: LD_INT 20
22047: PUSH
22048: LD_INT 21
22050: PUSH
22051: LD_INT 22
22053: PUSH
22054: LD_INT 23
22056: PUSH
22057: LD_INT 25
22059: PUSH
22060: LD_INT 26
22062: PUSH
22063: LD_INT 30
22065: PUSH
22066: LD_INT 31
22068: PUSH
22069: LD_INT 32
22071: PUSH
22072: LD_INT 36
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 101
22098: PUSH
22099: LD_INT 102
22101: PUSH
22102: LD_INT 105
22104: PUSH
22105: LD_INT 106
22107: PUSH
22108: LD_INT 108
22110: PUSH
22111: LD_INT 109
22113: PUSH
22114: LD_INT 112
22116: PUSH
22117: LD_INT 116
22119: PUSH
22120: LD_INT 117
22122: PUSH
22123: LD_INT 118
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: ST_TO_ADDR
22142: GO 24665
22144: LD_INT 7
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22264
22152: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22153: LD_ADDR_VAR 0 2
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 4
22163: PUSH
22164: LD_INT 5
22166: PUSH
22167: LD_INT 7
22169: PUSH
22170: LD_INT 11
22172: PUSH
22173: LD_INT 12
22175: PUSH
22176: LD_INT 15
22178: PUSH
22179: LD_INT 16
22181: PUSH
22182: LD_INT 20
22184: PUSH
22185: LD_INT 21
22187: PUSH
22188: LD_INT 22
22190: PUSH
22191: LD_INT 23
22193: PUSH
22194: LD_INT 25
22196: PUSH
22197: LD_INT 26
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 101
22218: PUSH
22219: LD_INT 102
22221: PUSH
22222: LD_INT 103
22224: PUSH
22225: LD_INT 105
22227: PUSH
22228: LD_INT 106
22230: PUSH
22231: LD_INT 108
22233: PUSH
22234: LD_INT 112
22236: PUSH
22237: LD_INT 116
22239: PUSH
22240: LD_INT 117
22242: PUSH
22243: LD_INT 118
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: ST_TO_ADDR
22262: GO 24665
22264: LD_INT 8
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22412
22272: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22273: LD_ADDR_VAR 0 2
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 4
22283: PUSH
22284: LD_INT 5
22286: PUSH
22287: LD_INT 6
22289: PUSH
22290: LD_INT 7
22292: PUSH
22293: LD_INT 8
22295: PUSH
22296: LD_INT 11
22298: PUSH
22299: LD_INT 12
22301: PUSH
22302: LD_INT 15
22304: PUSH
22305: LD_INT 16
22307: PUSH
22308: LD_INT 20
22310: PUSH
22311: LD_INT 21
22313: PUSH
22314: LD_INT 22
22316: PUSH
22317: LD_INT 23
22319: PUSH
22320: LD_INT 25
22322: PUSH
22323: LD_INT 26
22325: PUSH
22326: LD_INT 30
22328: PUSH
22329: LD_INT 31
22331: PUSH
22332: LD_INT 32
22334: PUSH
22335: LD_INT 36
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 101
22362: PUSH
22363: LD_INT 102
22365: PUSH
22366: LD_INT 103
22368: PUSH
22369: LD_INT 105
22371: PUSH
22372: LD_INT 106
22374: PUSH
22375: LD_INT 108
22377: PUSH
22378: LD_INT 109
22380: PUSH
22381: LD_INT 112
22383: PUSH
22384: LD_INT 116
22386: PUSH
22387: LD_INT 117
22389: PUSH
22390: LD_INT 118
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: ST_TO_ADDR
22410: GO 24665
22412: LD_INT 9
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22568
22420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22421: LD_ADDR_VAR 0 2
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 4
22431: PUSH
22432: LD_INT 5
22434: PUSH
22435: LD_INT 6
22437: PUSH
22438: LD_INT 7
22440: PUSH
22441: LD_INT 8
22443: PUSH
22444: LD_INT 11
22446: PUSH
22447: LD_INT 12
22449: PUSH
22450: LD_INT 15
22452: PUSH
22453: LD_INT 16
22455: PUSH
22456: LD_INT 20
22458: PUSH
22459: LD_INT 21
22461: PUSH
22462: LD_INT 22
22464: PUSH
22465: LD_INT 23
22467: PUSH
22468: LD_INT 25
22470: PUSH
22471: LD_INT 26
22473: PUSH
22474: LD_INT 28
22476: PUSH
22477: LD_INT 30
22479: PUSH
22480: LD_INT 31
22482: PUSH
22483: LD_INT 32
22485: PUSH
22486: LD_INT 36
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 101
22514: PUSH
22515: LD_INT 102
22517: PUSH
22518: LD_INT 103
22520: PUSH
22521: LD_INT 105
22523: PUSH
22524: LD_INT 106
22526: PUSH
22527: LD_INT 108
22529: PUSH
22530: LD_INT 109
22532: PUSH
22533: LD_INT 112
22535: PUSH
22536: LD_INT 114
22538: PUSH
22539: LD_INT 116
22541: PUSH
22542: LD_INT 117
22544: PUSH
22545: LD_INT 118
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: ST_TO_ADDR
22566: GO 24665
22568: LD_INT 10
22570: DOUBLE
22571: EQUAL
22572: IFTRUE 22576
22574: GO 22772
22576: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22577: LD_ADDR_VAR 0 2
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 4
22587: PUSH
22588: LD_INT 5
22590: PUSH
22591: LD_INT 6
22593: PUSH
22594: LD_INT 7
22596: PUSH
22597: LD_INT 8
22599: PUSH
22600: LD_INT 9
22602: PUSH
22603: LD_INT 10
22605: PUSH
22606: LD_INT 11
22608: PUSH
22609: LD_INT 12
22611: PUSH
22612: LD_INT 13
22614: PUSH
22615: LD_INT 14
22617: PUSH
22618: LD_INT 15
22620: PUSH
22621: LD_INT 16
22623: PUSH
22624: LD_INT 17
22626: PUSH
22627: LD_INT 18
22629: PUSH
22630: LD_INT 19
22632: PUSH
22633: LD_INT 20
22635: PUSH
22636: LD_INT 21
22638: PUSH
22639: LD_INT 22
22641: PUSH
22642: LD_INT 23
22644: PUSH
22645: LD_INT 24
22647: PUSH
22648: LD_INT 25
22650: PUSH
22651: LD_INT 26
22653: PUSH
22654: LD_INT 28
22656: PUSH
22657: LD_INT 30
22659: PUSH
22660: LD_INT 31
22662: PUSH
22663: LD_INT 32
22665: PUSH
22666: LD_INT 36
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 101
22702: PUSH
22703: LD_INT 102
22705: PUSH
22706: LD_INT 103
22708: PUSH
22709: LD_INT 104
22711: PUSH
22712: LD_INT 105
22714: PUSH
22715: LD_INT 106
22717: PUSH
22718: LD_INT 107
22720: PUSH
22721: LD_INT 108
22723: PUSH
22724: LD_INT 109
22726: PUSH
22727: LD_INT 110
22729: PUSH
22730: LD_INT 111
22732: PUSH
22733: LD_INT 112
22735: PUSH
22736: LD_INT 114
22738: PUSH
22739: LD_INT 116
22741: PUSH
22742: LD_INT 117
22744: PUSH
22745: LD_INT 118
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: ST_TO_ADDR
22770: GO 24665
22772: LD_INT 11
22774: DOUBLE
22775: EQUAL
22776: IFTRUE 22780
22778: GO 22984
22780: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22781: LD_ADDR_VAR 0 2
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: LD_INT 4
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: LD_INT 6
22800: PUSH
22801: LD_INT 7
22803: PUSH
22804: LD_INT 8
22806: PUSH
22807: LD_INT 9
22809: PUSH
22810: LD_INT 10
22812: PUSH
22813: LD_INT 11
22815: PUSH
22816: LD_INT 12
22818: PUSH
22819: LD_INT 13
22821: PUSH
22822: LD_INT 14
22824: PUSH
22825: LD_INT 15
22827: PUSH
22828: LD_INT 16
22830: PUSH
22831: LD_INT 17
22833: PUSH
22834: LD_INT 18
22836: PUSH
22837: LD_INT 19
22839: PUSH
22840: LD_INT 20
22842: PUSH
22843: LD_INT 21
22845: PUSH
22846: LD_INT 22
22848: PUSH
22849: LD_INT 23
22851: PUSH
22852: LD_INT 24
22854: PUSH
22855: LD_INT 25
22857: PUSH
22858: LD_INT 26
22860: PUSH
22861: LD_INT 28
22863: PUSH
22864: LD_INT 30
22866: PUSH
22867: LD_INT 31
22869: PUSH
22870: LD_INT 32
22872: PUSH
22873: LD_INT 34
22875: PUSH
22876: LD_INT 36
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 101
22914: PUSH
22915: LD_INT 102
22917: PUSH
22918: LD_INT 103
22920: PUSH
22921: LD_INT 104
22923: PUSH
22924: LD_INT 105
22926: PUSH
22927: LD_INT 106
22929: PUSH
22930: LD_INT 107
22932: PUSH
22933: LD_INT 108
22935: PUSH
22936: LD_INT 109
22938: PUSH
22939: LD_INT 110
22941: PUSH
22942: LD_INT 111
22944: PUSH
22945: LD_INT 112
22947: PUSH
22948: LD_INT 114
22950: PUSH
22951: LD_INT 116
22953: PUSH
22954: LD_INT 117
22956: PUSH
22957: LD_INT 118
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: ST_TO_ADDR
22982: GO 24665
22984: LD_INT 12
22986: DOUBLE
22987: EQUAL
22988: IFTRUE 22992
22990: GO 23212
22992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22993: LD_ADDR_VAR 0 2
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: LD_INT 4
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 6
23015: PUSH
23016: LD_INT 7
23018: PUSH
23019: LD_INT 8
23021: PUSH
23022: LD_INT 9
23024: PUSH
23025: LD_INT 10
23027: PUSH
23028: LD_INT 11
23030: PUSH
23031: LD_INT 12
23033: PUSH
23034: LD_INT 13
23036: PUSH
23037: LD_INT 14
23039: PUSH
23040: LD_INT 15
23042: PUSH
23043: LD_INT 16
23045: PUSH
23046: LD_INT 17
23048: PUSH
23049: LD_INT 18
23051: PUSH
23052: LD_INT 19
23054: PUSH
23055: LD_INT 20
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 22
23063: PUSH
23064: LD_INT 23
23066: PUSH
23067: LD_INT 24
23069: PUSH
23070: LD_INT 25
23072: PUSH
23073: LD_INT 26
23075: PUSH
23076: LD_INT 27
23078: PUSH
23079: LD_INT 28
23081: PUSH
23082: LD_INT 30
23084: PUSH
23085: LD_INT 31
23087: PUSH
23088: LD_INT 32
23090: PUSH
23091: LD_INT 33
23093: PUSH
23094: LD_INT 34
23096: PUSH
23097: LD_INT 36
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 101
23138: PUSH
23139: LD_INT 102
23141: PUSH
23142: LD_INT 103
23144: PUSH
23145: LD_INT 104
23147: PUSH
23148: LD_INT 105
23150: PUSH
23151: LD_INT 106
23153: PUSH
23154: LD_INT 107
23156: PUSH
23157: LD_INT 108
23159: PUSH
23160: LD_INT 109
23162: PUSH
23163: LD_INT 110
23165: PUSH
23166: LD_INT 111
23168: PUSH
23169: LD_INT 112
23171: PUSH
23172: LD_INT 113
23174: PUSH
23175: LD_INT 114
23177: PUSH
23178: LD_INT 116
23180: PUSH
23181: LD_INT 117
23183: PUSH
23184: LD_INT 118
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: ST_TO_ADDR
23210: GO 24665
23212: LD_INT 13
23214: DOUBLE
23215: EQUAL
23216: IFTRUE 23220
23218: GO 23428
23220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23221: LD_ADDR_VAR 0 2
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 3
23234: PUSH
23235: LD_INT 4
23237: PUSH
23238: LD_INT 5
23240: PUSH
23241: LD_INT 8
23243: PUSH
23244: LD_INT 9
23246: PUSH
23247: LD_INT 10
23249: PUSH
23250: LD_INT 11
23252: PUSH
23253: LD_INT 12
23255: PUSH
23256: LD_INT 14
23258: PUSH
23259: LD_INT 15
23261: PUSH
23262: LD_INT 16
23264: PUSH
23265: LD_INT 17
23267: PUSH
23268: LD_INT 18
23270: PUSH
23271: LD_INT 19
23273: PUSH
23274: LD_INT 20
23276: PUSH
23277: LD_INT 21
23279: PUSH
23280: LD_INT 22
23282: PUSH
23283: LD_INT 23
23285: PUSH
23286: LD_INT 24
23288: PUSH
23289: LD_INT 25
23291: PUSH
23292: LD_INT 26
23294: PUSH
23295: LD_INT 27
23297: PUSH
23298: LD_INT 28
23300: PUSH
23301: LD_INT 30
23303: PUSH
23304: LD_INT 31
23306: PUSH
23307: LD_INT 32
23309: PUSH
23310: LD_INT 33
23312: PUSH
23313: LD_INT 34
23315: PUSH
23316: LD_INT 36
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 101
23354: PUSH
23355: LD_INT 102
23357: PUSH
23358: LD_INT 103
23360: PUSH
23361: LD_INT 104
23363: PUSH
23364: LD_INT 105
23366: PUSH
23367: LD_INT 106
23369: PUSH
23370: LD_INT 107
23372: PUSH
23373: LD_INT 108
23375: PUSH
23376: LD_INT 109
23378: PUSH
23379: LD_INT 110
23381: PUSH
23382: LD_INT 111
23384: PUSH
23385: LD_INT 112
23387: PUSH
23388: LD_INT 113
23390: PUSH
23391: LD_INT 114
23393: PUSH
23394: LD_INT 116
23396: PUSH
23397: LD_INT 117
23399: PUSH
23400: LD_INT 118
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: ST_TO_ADDR
23426: GO 24665
23428: LD_INT 14
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23660
23436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23437: LD_ADDR_VAR 0 2
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: LD_INT 4
23453: PUSH
23454: LD_INT 5
23456: PUSH
23457: LD_INT 6
23459: PUSH
23460: LD_INT 7
23462: PUSH
23463: LD_INT 8
23465: PUSH
23466: LD_INT 9
23468: PUSH
23469: LD_INT 10
23471: PUSH
23472: LD_INT 11
23474: PUSH
23475: LD_INT 12
23477: PUSH
23478: LD_INT 13
23480: PUSH
23481: LD_INT 14
23483: PUSH
23484: LD_INT 15
23486: PUSH
23487: LD_INT 16
23489: PUSH
23490: LD_INT 17
23492: PUSH
23493: LD_INT 18
23495: PUSH
23496: LD_INT 19
23498: PUSH
23499: LD_INT 20
23501: PUSH
23502: LD_INT 21
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_INT 23
23510: PUSH
23511: LD_INT 24
23513: PUSH
23514: LD_INT 25
23516: PUSH
23517: LD_INT 26
23519: PUSH
23520: LD_INT 27
23522: PUSH
23523: LD_INT 28
23525: PUSH
23526: LD_INT 29
23528: PUSH
23529: LD_INT 30
23531: PUSH
23532: LD_INT 31
23534: PUSH
23535: LD_INT 32
23537: PUSH
23538: LD_INT 33
23540: PUSH
23541: LD_INT 34
23543: PUSH
23544: LD_INT 36
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 101
23586: PUSH
23587: LD_INT 102
23589: PUSH
23590: LD_INT 103
23592: PUSH
23593: LD_INT 104
23595: PUSH
23596: LD_INT 105
23598: PUSH
23599: LD_INT 106
23601: PUSH
23602: LD_INT 107
23604: PUSH
23605: LD_INT 108
23607: PUSH
23608: LD_INT 109
23610: PUSH
23611: LD_INT 110
23613: PUSH
23614: LD_INT 111
23616: PUSH
23617: LD_INT 112
23619: PUSH
23620: LD_INT 113
23622: PUSH
23623: LD_INT 114
23625: PUSH
23626: LD_INT 116
23628: PUSH
23629: LD_INT 117
23631: PUSH
23632: LD_INT 118
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: ST_TO_ADDR
23658: GO 24665
23660: LD_INT 15
23662: DOUBLE
23663: EQUAL
23664: IFTRUE 23668
23666: GO 23892
23668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 6
23691: PUSH
23692: LD_INT 7
23694: PUSH
23695: LD_INT 8
23697: PUSH
23698: LD_INT 9
23700: PUSH
23701: LD_INT 10
23703: PUSH
23704: LD_INT 11
23706: PUSH
23707: LD_INT 12
23709: PUSH
23710: LD_INT 13
23712: PUSH
23713: LD_INT 14
23715: PUSH
23716: LD_INT 15
23718: PUSH
23719: LD_INT 16
23721: PUSH
23722: LD_INT 17
23724: PUSH
23725: LD_INT 18
23727: PUSH
23728: LD_INT 19
23730: PUSH
23731: LD_INT 20
23733: PUSH
23734: LD_INT 21
23736: PUSH
23737: LD_INT 22
23739: PUSH
23740: LD_INT 23
23742: PUSH
23743: LD_INT 24
23745: PUSH
23746: LD_INT 25
23748: PUSH
23749: LD_INT 26
23751: PUSH
23752: LD_INT 27
23754: PUSH
23755: LD_INT 28
23757: PUSH
23758: LD_INT 29
23760: PUSH
23761: LD_INT 30
23763: PUSH
23764: LD_INT 31
23766: PUSH
23767: LD_INT 32
23769: PUSH
23770: LD_INT 33
23772: PUSH
23773: LD_INT 34
23775: PUSH
23776: LD_INT 36
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 101
23818: PUSH
23819: LD_INT 102
23821: PUSH
23822: LD_INT 103
23824: PUSH
23825: LD_INT 104
23827: PUSH
23828: LD_INT 105
23830: PUSH
23831: LD_INT 106
23833: PUSH
23834: LD_INT 107
23836: PUSH
23837: LD_INT 108
23839: PUSH
23840: LD_INT 109
23842: PUSH
23843: LD_INT 110
23845: PUSH
23846: LD_INT 111
23848: PUSH
23849: LD_INT 112
23851: PUSH
23852: LD_INT 113
23854: PUSH
23855: LD_INT 114
23857: PUSH
23858: LD_INT 116
23860: PUSH
23861: LD_INT 117
23863: PUSH
23864: LD_INT 118
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 24665
23892: LD_INT 16
23894: DOUBLE
23895: EQUAL
23896: IFTRUE 23900
23898: GO 24036
23900: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 4
23911: PUSH
23912: LD_INT 5
23914: PUSH
23915: LD_INT 7
23917: PUSH
23918: LD_INT 11
23920: PUSH
23921: LD_INT 12
23923: PUSH
23924: LD_INT 15
23926: PUSH
23927: LD_INT 16
23929: PUSH
23930: LD_INT 20
23932: PUSH
23933: LD_INT 21
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_INT 23
23941: PUSH
23942: LD_INT 25
23944: PUSH
23945: LD_INT 26
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 31
23953: PUSH
23954: LD_INT 32
23956: PUSH
23957: LD_INT 33
23959: PUSH
23960: LD_INT 34
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 101
23986: PUSH
23987: LD_INT 102
23989: PUSH
23990: LD_INT 103
23992: PUSH
23993: LD_INT 106
23995: PUSH
23996: LD_INT 108
23998: PUSH
23999: LD_INT 112
24001: PUSH
24002: LD_INT 113
24004: PUSH
24005: LD_INT 114
24007: PUSH
24008: LD_INT 116
24010: PUSH
24011: LD_INT 117
24013: PUSH
24014: LD_INT 118
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: ST_TO_ADDR
24034: GO 24665
24036: LD_INT 17
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24268
24044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24045: LD_ADDR_VAR 0 2
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: LD_INT 4
24061: PUSH
24062: LD_INT 5
24064: PUSH
24065: LD_INT 6
24067: PUSH
24068: LD_INT 7
24070: PUSH
24071: LD_INT 8
24073: PUSH
24074: LD_INT 9
24076: PUSH
24077: LD_INT 10
24079: PUSH
24080: LD_INT 11
24082: PUSH
24083: LD_INT 12
24085: PUSH
24086: LD_INT 13
24088: PUSH
24089: LD_INT 14
24091: PUSH
24092: LD_INT 15
24094: PUSH
24095: LD_INT 16
24097: PUSH
24098: LD_INT 17
24100: PUSH
24101: LD_INT 18
24103: PUSH
24104: LD_INT 19
24106: PUSH
24107: LD_INT 20
24109: PUSH
24110: LD_INT 21
24112: PUSH
24113: LD_INT 22
24115: PUSH
24116: LD_INT 23
24118: PUSH
24119: LD_INT 24
24121: PUSH
24122: LD_INT 25
24124: PUSH
24125: LD_INT 26
24127: PUSH
24128: LD_INT 27
24130: PUSH
24131: LD_INT 28
24133: PUSH
24134: LD_INT 29
24136: PUSH
24137: LD_INT 30
24139: PUSH
24140: LD_INT 31
24142: PUSH
24143: LD_INT 32
24145: PUSH
24146: LD_INT 33
24148: PUSH
24149: LD_INT 34
24151: PUSH
24152: LD_INT 36
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 101
24194: PUSH
24195: LD_INT 102
24197: PUSH
24198: LD_INT 103
24200: PUSH
24201: LD_INT 104
24203: PUSH
24204: LD_INT 105
24206: PUSH
24207: LD_INT 106
24209: PUSH
24210: LD_INT 107
24212: PUSH
24213: LD_INT 108
24215: PUSH
24216: LD_INT 109
24218: PUSH
24219: LD_INT 110
24221: PUSH
24222: LD_INT 111
24224: PUSH
24225: LD_INT 112
24227: PUSH
24228: LD_INT 113
24230: PUSH
24231: LD_INT 114
24233: PUSH
24234: LD_INT 116
24236: PUSH
24237: LD_INT 117
24239: PUSH
24240: LD_INT 118
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: ST_TO_ADDR
24266: GO 24665
24268: LD_INT 18
24270: DOUBLE
24271: EQUAL
24272: IFTRUE 24276
24274: GO 24424
24276: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24277: LD_ADDR_VAR 0 2
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: LD_INT 4
24287: PUSH
24288: LD_INT 5
24290: PUSH
24291: LD_INT 7
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 12
24299: PUSH
24300: LD_INT 15
24302: PUSH
24303: LD_INT 16
24305: PUSH
24306: LD_INT 20
24308: PUSH
24309: LD_INT 21
24311: PUSH
24312: LD_INT 22
24314: PUSH
24315: LD_INT 23
24317: PUSH
24318: LD_INT 25
24320: PUSH
24321: LD_INT 26
24323: PUSH
24324: LD_INT 30
24326: PUSH
24327: LD_INT 31
24329: PUSH
24330: LD_INT 32
24332: PUSH
24333: LD_INT 33
24335: PUSH
24336: LD_INT 34
24338: PUSH
24339: LD_INT 35
24341: PUSH
24342: LD_INT 36
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 101
24370: PUSH
24371: LD_INT 102
24373: PUSH
24374: LD_INT 103
24376: PUSH
24377: LD_INT 106
24379: PUSH
24380: LD_INT 108
24382: PUSH
24383: LD_INT 112
24385: PUSH
24386: LD_INT 113
24388: PUSH
24389: LD_INT 114
24391: PUSH
24392: LD_INT 115
24394: PUSH
24395: LD_INT 116
24397: PUSH
24398: LD_INT 117
24400: PUSH
24401: LD_INT 118
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: ST_TO_ADDR
24422: GO 24665
24424: LD_INT 19
24426: DOUBLE
24427: EQUAL
24428: IFTRUE 24432
24430: GO 24664
24432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: LD_INT 3
24446: PUSH
24447: LD_INT 4
24449: PUSH
24450: LD_INT 5
24452: PUSH
24453: LD_INT 6
24455: PUSH
24456: LD_INT 7
24458: PUSH
24459: LD_INT 8
24461: PUSH
24462: LD_INT 9
24464: PUSH
24465: LD_INT 10
24467: PUSH
24468: LD_INT 11
24470: PUSH
24471: LD_INT 12
24473: PUSH
24474: LD_INT 13
24476: PUSH
24477: LD_INT 14
24479: PUSH
24480: LD_INT 15
24482: PUSH
24483: LD_INT 16
24485: PUSH
24486: LD_INT 17
24488: PUSH
24489: LD_INT 18
24491: PUSH
24492: LD_INT 19
24494: PUSH
24495: LD_INT 20
24497: PUSH
24498: LD_INT 21
24500: PUSH
24501: LD_INT 22
24503: PUSH
24504: LD_INT 23
24506: PUSH
24507: LD_INT 24
24509: PUSH
24510: LD_INT 25
24512: PUSH
24513: LD_INT 26
24515: PUSH
24516: LD_INT 27
24518: PUSH
24519: LD_INT 28
24521: PUSH
24522: LD_INT 29
24524: PUSH
24525: LD_INT 30
24527: PUSH
24528: LD_INT 31
24530: PUSH
24531: LD_INT 32
24533: PUSH
24534: LD_INT 33
24536: PUSH
24537: LD_INT 34
24539: PUSH
24540: LD_INT 35
24542: PUSH
24543: LD_INT 36
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 101
24586: PUSH
24587: LD_INT 102
24589: PUSH
24590: LD_INT 103
24592: PUSH
24593: LD_INT 104
24595: PUSH
24596: LD_INT 105
24598: PUSH
24599: LD_INT 106
24601: PUSH
24602: LD_INT 107
24604: PUSH
24605: LD_INT 108
24607: PUSH
24608: LD_INT 109
24610: PUSH
24611: LD_INT 110
24613: PUSH
24614: LD_INT 111
24616: PUSH
24617: LD_INT 112
24619: PUSH
24620: LD_INT 113
24622: PUSH
24623: LD_INT 114
24625: PUSH
24626: LD_INT 115
24628: PUSH
24629: LD_INT 116
24631: PUSH
24632: LD_INT 117
24634: PUSH
24635: LD_INT 118
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: ST_TO_ADDR
24662: GO 24665
24664: POP
// end else
24665: GO 24896
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24667: LD_ADDR_VAR 0 2
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 3
24680: PUSH
24681: LD_INT 4
24683: PUSH
24684: LD_INT 5
24686: PUSH
24687: LD_INT 6
24689: PUSH
24690: LD_INT 7
24692: PUSH
24693: LD_INT 8
24695: PUSH
24696: LD_INT 9
24698: PUSH
24699: LD_INT 10
24701: PUSH
24702: LD_INT 11
24704: PUSH
24705: LD_INT 12
24707: PUSH
24708: LD_INT 13
24710: PUSH
24711: LD_INT 14
24713: PUSH
24714: LD_INT 15
24716: PUSH
24717: LD_INT 16
24719: PUSH
24720: LD_INT 17
24722: PUSH
24723: LD_INT 18
24725: PUSH
24726: LD_INT 19
24728: PUSH
24729: LD_INT 20
24731: PUSH
24732: LD_INT 21
24734: PUSH
24735: LD_INT 22
24737: PUSH
24738: LD_INT 23
24740: PUSH
24741: LD_INT 24
24743: PUSH
24744: LD_INT 25
24746: PUSH
24747: LD_INT 26
24749: PUSH
24750: LD_INT 27
24752: PUSH
24753: LD_INT 28
24755: PUSH
24756: LD_INT 29
24758: PUSH
24759: LD_INT 30
24761: PUSH
24762: LD_INT 31
24764: PUSH
24765: LD_INT 32
24767: PUSH
24768: LD_INT 33
24770: PUSH
24771: LD_INT 34
24773: PUSH
24774: LD_INT 35
24776: PUSH
24777: LD_INT 36
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 101
24820: PUSH
24821: LD_INT 102
24823: PUSH
24824: LD_INT 103
24826: PUSH
24827: LD_INT 104
24829: PUSH
24830: LD_INT 105
24832: PUSH
24833: LD_INT 106
24835: PUSH
24836: LD_INT 107
24838: PUSH
24839: LD_INT 108
24841: PUSH
24842: LD_INT 109
24844: PUSH
24845: LD_INT 110
24847: PUSH
24848: LD_INT 111
24850: PUSH
24851: LD_INT 112
24853: PUSH
24854: LD_INT 113
24856: PUSH
24857: LD_INT 114
24859: PUSH
24860: LD_INT 115
24862: PUSH
24863: LD_INT 116
24865: PUSH
24866: LD_INT 117
24868: PUSH
24869: LD_INT 118
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: ST_TO_ADDR
// if result then
24896: LD_VAR 0 2
24900: IFFALSE 25686
// begin normal :=  ;
24902: LD_ADDR_VAR 0 5
24906: PUSH
24907: LD_STRING 
24909: ST_TO_ADDR
// hardcore :=  ;
24910: LD_ADDR_VAR 0 6
24914: PUSH
24915: LD_STRING 
24917: ST_TO_ADDR
// active :=  ;
24918: LD_ADDR_VAR 0 7
24922: PUSH
24923: LD_STRING 
24925: ST_TO_ADDR
// for i = 1 to normalCounter do
24926: LD_ADDR_VAR 0 8
24930: PUSH
24931: DOUBLE
24932: LD_INT 1
24934: DEC
24935: ST_TO_ADDR
24936: LD_EXP 39
24940: PUSH
24941: FOR_TO
24942: IFFALSE 25043
// begin tmp := 0 ;
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_STRING 0
24951: ST_TO_ADDR
// if result [ 1 ] then
24952: LD_VAR 0 2
24956: PUSH
24957: LD_INT 1
24959: ARRAY
24960: IFFALSE 25025
// if result [ 1 ] [ 1 ] = i then
24962: LD_VAR 0 2
24966: PUSH
24967: LD_INT 1
24969: ARRAY
24970: PUSH
24971: LD_INT 1
24973: ARRAY
24974: PUSH
24975: LD_VAR 0 8
24979: EQUAL
24980: IFFALSE 25025
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24982: LD_ADDR_VAR 0 2
24986: PUSH
24987: LD_VAR 0 2
24991: PPUSH
24992: LD_INT 1
24994: PPUSH
24995: LD_VAR 0 2
24999: PUSH
25000: LD_INT 1
25002: ARRAY
25003: PPUSH
25004: LD_INT 1
25006: PPUSH
25007: CALL_OW 3
25011: PPUSH
25012: CALL_OW 1
25016: ST_TO_ADDR
// tmp := 1 ;
25017: LD_ADDR_VAR 0 3
25021: PUSH
25022: LD_STRING 1
25024: ST_TO_ADDR
// end ; normal := normal & tmp ;
25025: LD_ADDR_VAR 0 5
25029: PUSH
25030: LD_VAR 0 5
25034: PUSH
25035: LD_VAR 0 3
25039: STR
25040: ST_TO_ADDR
// end ;
25041: GO 24941
25043: POP
25044: POP
// for i = 1 to hardcoreCounter do
25045: LD_ADDR_VAR 0 8
25049: PUSH
25050: DOUBLE
25051: LD_INT 1
25053: DEC
25054: ST_TO_ADDR
25055: LD_EXP 40
25059: PUSH
25060: FOR_TO
25061: IFFALSE 25166
// begin tmp := 0 ;
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: LD_STRING 0
25070: ST_TO_ADDR
// if result [ 2 ] then
25071: LD_VAR 0 2
25075: PUSH
25076: LD_INT 2
25078: ARRAY
25079: IFFALSE 25148
// if result [ 2 ] [ 1 ] = 100 + i then
25081: LD_VAR 0 2
25085: PUSH
25086: LD_INT 2
25088: ARRAY
25089: PUSH
25090: LD_INT 1
25092: ARRAY
25093: PUSH
25094: LD_INT 100
25096: PUSH
25097: LD_VAR 0 8
25101: PLUS
25102: EQUAL
25103: IFFALSE 25148
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25105: LD_ADDR_VAR 0 2
25109: PUSH
25110: LD_VAR 0 2
25114: PPUSH
25115: LD_INT 2
25117: PPUSH
25118: LD_VAR 0 2
25122: PUSH
25123: LD_INT 2
25125: ARRAY
25126: PPUSH
25127: LD_INT 1
25129: PPUSH
25130: CALL_OW 3
25134: PPUSH
25135: CALL_OW 1
25139: ST_TO_ADDR
// tmp := 1 ;
25140: LD_ADDR_VAR 0 3
25144: PUSH
25145: LD_STRING 1
25147: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25148: LD_ADDR_VAR 0 6
25152: PUSH
25153: LD_VAR 0 6
25157: PUSH
25158: LD_VAR 0 3
25162: STR
25163: ST_TO_ADDR
// end ;
25164: GO 25060
25166: POP
25167: POP
// if isGameLoad then
25168: LD_VAR 0 1
25172: IFFALSE 25647
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25174: LD_ADDR_VAR 0 4
25178: PUSH
25179: LD_EXP 43
25183: PUSH
25184: LD_EXP 42
25188: PUSH
25189: LD_EXP 44
25193: PUSH
25194: LD_EXP 41
25198: PUSH
25199: LD_EXP 45
25203: PUSH
25204: LD_EXP 46
25208: PUSH
25209: LD_EXP 47
25213: PUSH
25214: LD_EXP 48
25218: PUSH
25219: LD_EXP 49
25223: PUSH
25224: LD_EXP 50
25228: PUSH
25229: LD_EXP 51
25233: PUSH
25234: LD_EXP 52
25238: PUSH
25239: LD_EXP 53
25243: PUSH
25244: LD_EXP 54
25248: PUSH
25249: LD_EXP 62
25253: PUSH
25254: LD_EXP 63
25258: PUSH
25259: LD_EXP 64
25263: PUSH
25264: LD_EXP 65
25268: PUSH
25269: LD_EXP 67
25273: PUSH
25274: LD_EXP 68
25278: PUSH
25279: LD_EXP 69
25283: PUSH
25284: LD_EXP 72
25288: PUSH
25289: LD_EXP 74
25293: PUSH
25294: LD_EXP 75
25298: PUSH
25299: LD_EXP 76
25303: PUSH
25304: LD_EXP 78
25308: PUSH
25309: LD_EXP 79
25313: PUSH
25314: LD_EXP 82
25318: PUSH
25319: LD_EXP 83
25323: PUSH
25324: LD_EXP 84
25328: PUSH
25329: LD_EXP 85
25333: PUSH
25334: LD_EXP 86
25338: PUSH
25339: LD_EXP 87
25343: PUSH
25344: LD_EXP 88
25348: PUSH
25349: LD_EXP 89
25353: PUSH
25354: LD_EXP 90
25358: PUSH
25359: LD_EXP 55
25363: PUSH
25364: LD_EXP 56
25368: PUSH
25369: LD_EXP 59
25373: PUSH
25374: LD_EXP 60
25378: PUSH
25379: LD_EXP 61
25383: PUSH
25384: LD_EXP 57
25388: PUSH
25389: LD_EXP 58
25393: PUSH
25394: LD_EXP 66
25398: PUSH
25399: LD_EXP 70
25403: PUSH
25404: LD_EXP 71
25408: PUSH
25409: LD_EXP 73
25413: PUSH
25414: LD_EXP 77
25418: PUSH
25419: LD_EXP 80
25423: PUSH
25424: LD_EXP 81
25428: PUSH
25429: LD_EXP 91
25433: PUSH
25434: LD_EXP 92
25438: PUSH
25439: LD_EXP 93
25443: PUSH
25444: LD_EXP 94
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: ST_TO_ADDR
// tmp :=  ;
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_STRING 
25512: ST_TO_ADDR
// for i = 1 to normalCounter do
25513: LD_ADDR_VAR 0 8
25517: PUSH
25518: DOUBLE
25519: LD_INT 1
25521: DEC
25522: ST_TO_ADDR
25523: LD_EXP 39
25527: PUSH
25528: FOR_TO
25529: IFFALSE 25565
// begin if flags [ i ] then
25531: LD_VAR 0 4
25535: PUSH
25536: LD_VAR 0 8
25540: ARRAY
25541: IFFALSE 25563
// tmp := tmp & i & ; ;
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_VAR 0 3
25552: PUSH
25553: LD_VAR 0 8
25557: STR
25558: PUSH
25559: LD_STRING ;
25561: STR
25562: ST_TO_ADDR
// end ;
25563: GO 25528
25565: POP
25566: POP
// for i = 1 to hardcoreCounter do
25567: LD_ADDR_VAR 0 8
25571: PUSH
25572: DOUBLE
25573: LD_INT 1
25575: DEC
25576: ST_TO_ADDR
25577: LD_EXP 40
25581: PUSH
25582: FOR_TO
25583: IFFALSE 25629
// begin if flags [ normalCounter + i ] then
25585: LD_VAR 0 4
25589: PUSH
25590: LD_EXP 39
25594: PUSH
25595: LD_VAR 0 8
25599: PLUS
25600: ARRAY
25601: IFFALSE 25627
// tmp := tmp & ( 100 + i ) & ; ;
25603: LD_ADDR_VAR 0 3
25607: PUSH
25608: LD_VAR 0 3
25612: PUSH
25613: LD_INT 100
25615: PUSH
25616: LD_VAR 0 8
25620: PLUS
25621: STR
25622: PUSH
25623: LD_STRING ;
25625: STR
25626: ST_TO_ADDR
// end ;
25627: GO 25582
25629: POP
25630: POP
// if tmp then
25631: LD_VAR 0 3
25635: IFFALSE 25647
// active := tmp ;
25637: LD_ADDR_VAR 0 7
25641: PUSH
25642: LD_VAR 0 3
25646: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25647: LD_STRING getStreamItemsFromMission("
25649: PUSH
25650: LD_VAR 0 5
25654: STR
25655: PUSH
25656: LD_STRING ","
25658: STR
25659: PUSH
25660: LD_VAR 0 6
25664: STR
25665: PUSH
25666: LD_STRING ","
25668: STR
25669: PUSH
25670: LD_VAR 0 7
25674: STR
25675: PUSH
25676: LD_STRING ")
25678: STR
25679: PPUSH
25680: CALL_OW 559
// end else
25684: GO 25693
// ToLua ( getStreamItemsFromMission("","","") ) ;
25686: LD_STRING getStreamItemsFromMission("","","")
25688: PPUSH
25689: CALL_OW 559
// end ;
25693: LD_VAR 0 2
25697: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25698: LD_EXP 38
25702: PUSH
25703: LD_EXP 43
25707: AND
25708: IFFALSE 25832
25710: GO 25712
25712: DISABLE
25713: LD_INT 0
25715: PPUSH
25716: PPUSH
// begin enable ;
25717: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25718: LD_ADDR_VAR 0 2
25722: PUSH
25723: LD_INT 22
25725: PUSH
25726: LD_OWVAR 2
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: LD_INT 34
25740: PUSH
25741: LD_INT 7
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 34
25750: PUSH
25751: LD_INT 45
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 34
25760: PUSH
25761: LD_INT 28
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 34
25770: PUSH
25771: LD_INT 47
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PPUSH
25789: CALL_OW 69
25793: ST_TO_ADDR
// if not tmp then
25794: LD_VAR 0 2
25798: NOT
25799: IFFALSE 25803
// exit ;
25801: GO 25832
// for i in tmp do
25803: LD_ADDR_VAR 0 1
25807: PUSH
25808: LD_VAR 0 2
25812: PUSH
25813: FOR_IN
25814: IFFALSE 25830
// begin SetLives ( i , 0 ) ;
25816: LD_VAR 0 1
25820: PPUSH
25821: LD_INT 0
25823: PPUSH
25824: CALL_OW 234
// end ;
25828: GO 25813
25830: POP
25831: POP
// end ;
25832: PPOPN 2
25834: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25835: LD_EXP 38
25839: PUSH
25840: LD_EXP 44
25844: AND
25845: IFFALSE 25929
25847: GO 25849
25849: DISABLE
25850: LD_INT 0
25852: PPUSH
25853: PPUSH
// begin enable ;
25854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25855: LD_ADDR_VAR 0 2
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_OWVAR 2
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 32
25874: PUSH
25875: LD_INT 3
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PPUSH
25886: CALL_OW 69
25890: ST_TO_ADDR
// if not tmp then
25891: LD_VAR 0 2
25895: NOT
25896: IFFALSE 25900
// exit ;
25898: GO 25929
// for i in tmp do
25900: LD_ADDR_VAR 0 1
25904: PUSH
25905: LD_VAR 0 2
25909: PUSH
25910: FOR_IN
25911: IFFALSE 25927
// begin SetLives ( i , 0 ) ;
25913: LD_VAR 0 1
25917: PPUSH
25918: LD_INT 0
25920: PPUSH
25921: CALL_OW 234
// end ;
25925: GO 25910
25927: POP
25928: POP
// end ;
25929: PPOPN 2
25931: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25932: LD_EXP 38
25936: PUSH
25937: LD_EXP 41
25941: AND
25942: IFFALSE 26035
25944: GO 25946
25946: DISABLE
25947: LD_INT 0
25949: PPUSH
// begin enable ;
25950: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25951: LD_ADDR_VAR 0 1
25955: PUSH
25956: LD_INT 22
25958: PUSH
25959: LD_OWVAR 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 25
25973: PUSH
25974: LD_INT 5
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 25
25983: PUSH
25984: LD_INT 9
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 25
25993: PUSH
25994: LD_INT 8
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PPUSH
26011: CALL_OW 69
26015: PUSH
26016: FOR_IN
26017: IFFALSE 26033
// begin SetClass ( i , 1 ) ;
26019: LD_VAR 0 1
26023: PPUSH
26024: LD_INT 1
26026: PPUSH
26027: CALL_OW 336
// end ;
26031: GO 26016
26033: POP
26034: POP
// end ;
26035: PPOPN 1
26037: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26038: LD_EXP 38
26042: PUSH
26043: LD_EXP 42
26047: AND
26048: PUSH
26049: LD_OWVAR 65
26053: PUSH
26054: LD_INT 7
26056: LESS
26057: AND
26058: IFFALSE 26072
26060: GO 26062
26062: DISABLE
// begin enable ;
26063: ENABLE
// game_speed := 7 ;
26064: LD_ADDR_OWVAR 65
26068: PUSH
26069: LD_INT 7
26071: ST_TO_ADDR
// end ;
26072: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26073: LD_EXP 38
26077: PUSH
26078: LD_EXP 45
26082: AND
26083: IFFALSE 26285
26085: GO 26087
26087: DISABLE
26088: LD_INT 0
26090: PPUSH
26091: PPUSH
26092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_INT 81
26100: PUSH
26101: LD_OWVAR 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 21
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PPUSH
26124: CALL_OW 69
26128: ST_TO_ADDR
// if not tmp then
26129: LD_VAR 0 3
26133: NOT
26134: IFFALSE 26138
// exit ;
26136: GO 26285
// if tmp > 5 then
26138: LD_VAR 0 3
26142: PUSH
26143: LD_INT 5
26145: GREATER
26146: IFFALSE 26158
// k := 5 else
26148: LD_ADDR_VAR 0 2
26152: PUSH
26153: LD_INT 5
26155: ST_TO_ADDR
26156: GO 26168
// k := tmp ;
26158: LD_ADDR_VAR 0 2
26162: PUSH
26163: LD_VAR 0 3
26167: ST_TO_ADDR
// for i := 1 to k do
26168: LD_ADDR_VAR 0 1
26172: PUSH
26173: DOUBLE
26174: LD_INT 1
26176: DEC
26177: ST_TO_ADDR
26178: LD_VAR 0 2
26182: PUSH
26183: FOR_TO
26184: IFFALSE 26283
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26186: LD_VAR 0 3
26190: PUSH
26191: LD_VAR 0 1
26195: ARRAY
26196: PPUSH
26197: LD_VAR 0 1
26201: PUSH
26202: LD_INT 4
26204: MOD
26205: PUSH
26206: LD_INT 1
26208: PLUS
26209: PPUSH
26210: CALL_OW 259
26214: PUSH
26215: LD_INT 10
26217: LESS
26218: IFFALSE 26281
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26220: LD_VAR 0 3
26224: PUSH
26225: LD_VAR 0 1
26229: ARRAY
26230: PPUSH
26231: LD_VAR 0 1
26235: PUSH
26236: LD_INT 4
26238: MOD
26239: PUSH
26240: LD_INT 1
26242: PLUS
26243: PPUSH
26244: LD_VAR 0 3
26248: PUSH
26249: LD_VAR 0 1
26253: ARRAY
26254: PPUSH
26255: LD_VAR 0 1
26259: PUSH
26260: LD_INT 4
26262: MOD
26263: PUSH
26264: LD_INT 1
26266: PLUS
26267: PPUSH
26268: CALL_OW 259
26272: PUSH
26273: LD_INT 1
26275: PLUS
26276: PPUSH
26277: CALL_OW 237
26281: GO 26183
26283: POP
26284: POP
// end ;
26285: PPOPN 3
26287: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26288: LD_EXP 38
26292: PUSH
26293: LD_EXP 46
26297: AND
26298: IFFALSE 26318
26300: GO 26302
26302: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26303: LD_INT 4
26305: PPUSH
26306: LD_OWVAR 2
26310: PPUSH
26311: LD_INT 0
26313: PPUSH
26314: CALL_OW 324
26318: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26319: LD_EXP 38
26323: PUSH
26324: LD_EXP 75
26328: AND
26329: IFFALSE 26349
26331: GO 26333
26333: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26334: LD_INT 19
26336: PPUSH
26337: LD_OWVAR 2
26341: PPUSH
26342: LD_INT 0
26344: PPUSH
26345: CALL_OW 324
26349: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26350: LD_EXP 38
26354: PUSH
26355: LD_EXP 47
26359: AND
26360: IFFALSE 26462
26362: GO 26364
26364: DISABLE
26365: LD_INT 0
26367: PPUSH
26368: PPUSH
// begin enable ;
26369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26370: LD_ADDR_VAR 0 2
26374: PUSH
26375: LD_INT 22
26377: PUSH
26378: LD_OWVAR 2
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: LD_INT 34
26392: PUSH
26393: LD_INT 11
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 34
26402: PUSH
26403: LD_INT 30
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: LIST
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PPUSH
26419: CALL_OW 69
26423: ST_TO_ADDR
// if not tmp then
26424: LD_VAR 0 2
26428: NOT
26429: IFFALSE 26433
// exit ;
26431: GO 26462
// for i in tmp do
26433: LD_ADDR_VAR 0 1
26437: PUSH
26438: LD_VAR 0 2
26442: PUSH
26443: FOR_IN
26444: IFFALSE 26460
// begin SetLives ( i , 0 ) ;
26446: LD_VAR 0 1
26450: PPUSH
26451: LD_INT 0
26453: PPUSH
26454: CALL_OW 234
// end ;
26458: GO 26443
26460: POP
26461: POP
// end ;
26462: PPOPN 2
26464: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26465: LD_EXP 38
26469: PUSH
26470: LD_EXP 48
26474: AND
26475: IFFALSE 26495
26477: GO 26479
26479: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26480: LD_INT 32
26482: PPUSH
26483: LD_OWVAR 2
26487: PPUSH
26488: LD_INT 0
26490: PPUSH
26491: CALL_OW 324
26495: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26496: LD_EXP 38
26500: PUSH
26501: LD_EXP 49
26505: AND
26506: IFFALSE 26687
26508: GO 26510
26510: DISABLE
26511: LD_INT 0
26513: PPUSH
26514: PPUSH
26515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26516: LD_ADDR_VAR 0 2
26520: PUSH
26521: LD_INT 22
26523: PUSH
26524: LD_OWVAR 2
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 33
26535: PUSH
26536: LD_INT 3
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PPUSH
26547: CALL_OW 69
26551: ST_TO_ADDR
// if not tmp then
26552: LD_VAR 0 2
26556: NOT
26557: IFFALSE 26561
// exit ;
26559: GO 26687
// side := 0 ;
26561: LD_ADDR_VAR 0 3
26565: PUSH
26566: LD_INT 0
26568: ST_TO_ADDR
// for i := 1 to 8 do
26569: LD_ADDR_VAR 0 1
26573: PUSH
26574: DOUBLE
26575: LD_INT 1
26577: DEC
26578: ST_TO_ADDR
26579: LD_INT 8
26581: PUSH
26582: FOR_TO
26583: IFFALSE 26631
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26585: LD_OWVAR 2
26589: PUSH
26590: LD_VAR 0 1
26594: NONEQUAL
26595: PUSH
26596: LD_OWVAR 2
26600: PPUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: CALL_OW 81
26610: PUSH
26611: LD_INT 2
26613: EQUAL
26614: AND
26615: IFFALSE 26629
// begin side := i ;
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_VAR 0 1
26626: ST_TO_ADDR
// break ;
26627: GO 26631
// end ;
26629: GO 26582
26631: POP
26632: POP
// if not side then
26633: LD_VAR 0 3
26637: NOT
26638: IFFALSE 26642
// exit ;
26640: GO 26687
// for i := 1 to tmp do
26642: LD_ADDR_VAR 0 1
26646: PUSH
26647: DOUBLE
26648: LD_INT 1
26650: DEC
26651: ST_TO_ADDR
26652: LD_VAR 0 2
26656: PUSH
26657: FOR_TO
26658: IFFALSE 26685
// if Prob ( 60 ) then
26660: LD_INT 60
26662: PPUSH
26663: CALL_OW 13
26667: IFFALSE 26683
// SetSide ( i , side ) ;
26669: LD_VAR 0 1
26673: PPUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 235
26683: GO 26657
26685: POP
26686: POP
// end ;
26687: PPOPN 3
26689: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26690: LD_EXP 38
26694: PUSH
26695: LD_EXP 51
26699: AND
26700: IFFALSE 26819
26702: GO 26704
26704: DISABLE
26705: LD_INT 0
26707: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26708: LD_ADDR_VAR 0 1
26712: PUSH
26713: LD_INT 22
26715: PUSH
26716: LD_OWVAR 2
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 21
26727: PUSH
26728: LD_INT 1
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 3
26737: PUSH
26738: LD_INT 23
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: PPUSH
26757: CALL_OW 69
26761: PUSH
26762: FOR_IN
26763: IFFALSE 26817
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 257
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 3
26783: PUSH
26784: LD_INT 4
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: IN
26793: IFFALSE 26815
// SetClass ( un , rand ( 1 , 4 ) ) ;
26795: LD_VAR 0 1
26799: PPUSH
26800: LD_INT 1
26802: PPUSH
26803: LD_INT 4
26805: PPUSH
26806: CALL_OW 12
26810: PPUSH
26811: CALL_OW 336
26815: GO 26762
26817: POP
26818: POP
// end ;
26819: PPOPN 1
26821: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26822: LD_EXP 38
26826: PUSH
26827: LD_EXP 50
26831: AND
26832: IFFALSE 26911
26834: GO 26836
26836: DISABLE
26837: LD_INT 0
26839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26840: LD_ADDR_VAR 0 1
26844: PUSH
26845: LD_INT 22
26847: PUSH
26848: LD_OWVAR 2
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 21
26859: PUSH
26860: LD_INT 3
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PPUSH
26871: CALL_OW 69
26875: ST_TO_ADDR
// if not tmp then
26876: LD_VAR 0 1
26880: NOT
26881: IFFALSE 26885
// exit ;
26883: GO 26911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26885: LD_VAR 0 1
26889: PUSH
26890: LD_INT 1
26892: PPUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 12
26902: ARRAY
26903: PPUSH
26904: LD_INT 100
26906: PPUSH
26907: CALL_OW 234
// end ;
26911: PPOPN 1
26913: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26914: LD_EXP 38
26918: PUSH
26919: LD_EXP 52
26923: AND
26924: IFFALSE 27022
26926: GO 26928
26928: DISABLE
26929: LD_INT 0
26931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26932: LD_ADDR_VAR 0 1
26936: PUSH
26937: LD_INT 22
26939: PUSH
26940: LD_OWVAR 2
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 21
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PPUSH
26963: CALL_OW 69
26967: ST_TO_ADDR
// if not tmp then
26968: LD_VAR 0 1
26972: NOT
26973: IFFALSE 26977
// exit ;
26975: GO 27022
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26977: LD_VAR 0 1
26981: PUSH
26982: LD_INT 1
26984: PPUSH
26985: LD_VAR 0 1
26989: PPUSH
26990: CALL_OW 12
26994: ARRAY
26995: PPUSH
26996: LD_INT 1
26998: PPUSH
26999: LD_INT 4
27001: PPUSH
27002: CALL_OW 12
27006: PPUSH
27007: LD_INT 3000
27009: PPUSH
27010: LD_INT 9000
27012: PPUSH
27013: CALL_OW 12
27017: PPUSH
27018: CALL_OW 492
// end ;
27022: PPOPN 1
27024: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27025: LD_EXP 38
27029: PUSH
27030: LD_EXP 53
27034: AND
27035: IFFALSE 27055
27037: GO 27039
27039: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27040: LD_INT 1
27042: PPUSH
27043: LD_OWVAR 2
27047: PPUSH
27048: LD_INT 0
27050: PPUSH
27051: CALL_OW 324
27055: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27056: LD_EXP 38
27060: PUSH
27061: LD_EXP 54
27065: AND
27066: IFFALSE 27149
27068: GO 27070
27070: DISABLE
27071: LD_INT 0
27073: PPUSH
27074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27075: LD_ADDR_VAR 0 2
27079: PUSH
27080: LD_INT 22
27082: PUSH
27083: LD_OWVAR 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 21
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PPUSH
27106: CALL_OW 69
27110: ST_TO_ADDR
// if not tmp then
27111: LD_VAR 0 2
27115: NOT
27116: IFFALSE 27120
// exit ;
27118: GO 27149
// for i in tmp do
27120: LD_ADDR_VAR 0 1
27124: PUSH
27125: LD_VAR 0 2
27129: PUSH
27130: FOR_IN
27131: IFFALSE 27147
// SetBLevel ( i , 10 ) ;
27133: LD_VAR 0 1
27137: PPUSH
27138: LD_INT 10
27140: PPUSH
27141: CALL_OW 241
27145: GO 27130
27147: POP
27148: POP
// end ;
27149: PPOPN 2
27151: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27152: LD_EXP 38
27156: PUSH
27157: LD_EXP 55
27161: AND
27162: IFFALSE 27273
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
27170: PPUSH
27171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 22
27179: PUSH
27180: LD_OWVAR 2
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 25
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PPUSH
27203: CALL_OW 69
27207: ST_TO_ADDR
// if not tmp then
27208: LD_VAR 0 3
27212: NOT
27213: IFFALSE 27217
// exit ;
27215: GO 27273
// un := tmp [ rand ( 1 , tmp ) ] ;
27217: LD_ADDR_VAR 0 2
27221: PUSH
27222: LD_VAR 0 3
27226: PUSH
27227: LD_INT 1
27229: PPUSH
27230: LD_VAR 0 3
27234: PPUSH
27235: CALL_OW 12
27239: ARRAY
27240: ST_TO_ADDR
// if Crawls ( un ) then
27241: LD_VAR 0 2
27245: PPUSH
27246: CALL_OW 318
27250: IFFALSE 27261
// ComWalk ( un ) ;
27252: LD_VAR 0 2
27256: PPUSH
27257: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27261: LD_VAR 0 2
27265: PPUSH
27266: LD_INT 5
27268: PPUSH
27269: CALL_OW 336
// end ;
27273: PPOPN 3
27275: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27276: LD_EXP 38
27280: PUSH
27281: LD_EXP 56
27285: AND
27286: PUSH
27287: LD_OWVAR 67
27291: PUSH
27292: LD_INT 4
27294: LESS
27295: AND
27296: IFFALSE 27315
27298: GO 27300
27300: DISABLE
// begin Difficulty := Difficulty + 1 ;
27301: LD_ADDR_OWVAR 67
27305: PUSH
27306: LD_OWVAR 67
27310: PUSH
27311: LD_INT 1
27313: PLUS
27314: ST_TO_ADDR
// end ;
27315: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27316: LD_EXP 38
27320: PUSH
27321: LD_EXP 57
27325: AND
27326: IFFALSE 27429
27328: GO 27330
27330: DISABLE
27331: LD_INT 0
27333: PPUSH
// begin for i := 1 to 5 do
27334: LD_ADDR_VAR 0 1
27338: PUSH
27339: DOUBLE
27340: LD_INT 1
27342: DEC
27343: ST_TO_ADDR
27344: LD_INT 5
27346: PUSH
27347: FOR_TO
27348: IFFALSE 27427
// begin uc_nation := nation_nature ;
27350: LD_ADDR_OWVAR 21
27354: PUSH
27355: LD_INT 0
27357: ST_TO_ADDR
// uc_side := 0 ;
27358: LD_ADDR_OWVAR 20
27362: PUSH
27363: LD_INT 0
27365: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27366: LD_ADDR_OWVAR 29
27370: PUSH
27371: LD_INT 12
27373: PUSH
27374: LD_INT 12
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: ST_TO_ADDR
// hc_agressivity := 20 ;
27381: LD_ADDR_OWVAR 35
27385: PUSH
27386: LD_INT 20
27388: ST_TO_ADDR
// hc_class := class_tiger ;
27389: LD_ADDR_OWVAR 28
27393: PUSH
27394: LD_INT 14
27396: ST_TO_ADDR
// hc_gallery :=  ;
27397: LD_ADDR_OWVAR 33
27401: PUSH
27402: LD_STRING 
27404: ST_TO_ADDR
// hc_name :=  ;
27405: LD_ADDR_OWVAR 26
27409: PUSH
27410: LD_STRING 
27412: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27413: CALL_OW 44
27417: PPUSH
27418: LD_INT 0
27420: PPUSH
27421: CALL_OW 51
// end ;
27425: GO 27347
27427: POP
27428: POP
// end ;
27429: PPOPN 1
27431: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27432: LD_EXP 38
27436: PUSH
27437: LD_EXP 58
27441: AND
27442: IFFALSE 27451
27444: GO 27446
27446: DISABLE
// StreamSibBomb ;
27447: CALL 27452 0 0
27451: END
// export function StreamSibBomb ; var i , x , y ; begin
27452: LD_INT 0
27454: PPUSH
27455: PPUSH
27456: PPUSH
27457: PPUSH
// result := false ;
27458: LD_ADDR_VAR 0 1
27462: PUSH
27463: LD_INT 0
27465: ST_TO_ADDR
// for i := 1 to 16 do
27466: LD_ADDR_VAR 0 2
27470: PUSH
27471: DOUBLE
27472: LD_INT 1
27474: DEC
27475: ST_TO_ADDR
27476: LD_INT 16
27478: PUSH
27479: FOR_TO
27480: IFFALSE 27679
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27482: LD_ADDR_VAR 0 3
27486: PUSH
27487: LD_INT 10
27489: PUSH
27490: LD_INT 20
27492: PUSH
27493: LD_INT 30
27495: PUSH
27496: LD_INT 40
27498: PUSH
27499: LD_INT 50
27501: PUSH
27502: LD_INT 60
27504: PUSH
27505: LD_INT 70
27507: PUSH
27508: LD_INT 80
27510: PUSH
27511: LD_INT 90
27513: PUSH
27514: LD_INT 100
27516: PUSH
27517: LD_INT 110
27519: PUSH
27520: LD_INT 120
27522: PUSH
27523: LD_INT 130
27525: PUSH
27526: LD_INT 140
27528: PUSH
27529: LD_INT 150
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: PPUSH
27552: LD_INT 15
27554: PPUSH
27555: CALL_OW 12
27559: ARRAY
27560: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27561: LD_ADDR_VAR 0 4
27565: PUSH
27566: LD_INT 10
27568: PUSH
27569: LD_INT 20
27571: PUSH
27572: LD_INT 30
27574: PUSH
27575: LD_INT 40
27577: PUSH
27578: LD_INT 50
27580: PUSH
27581: LD_INT 60
27583: PUSH
27584: LD_INT 70
27586: PUSH
27587: LD_INT 80
27589: PUSH
27590: LD_INT 90
27592: PUSH
27593: LD_INT 100
27595: PUSH
27596: LD_INT 110
27598: PUSH
27599: LD_INT 120
27601: PUSH
27602: LD_INT 130
27604: PUSH
27605: LD_INT 140
27607: PUSH
27608: LD_INT 150
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PPUSH
27631: LD_INT 15
27633: PPUSH
27634: CALL_OW 12
27638: ARRAY
27639: ST_TO_ADDR
// if ValidHex ( x , y ) then
27640: LD_VAR 0 3
27644: PPUSH
27645: LD_VAR 0 4
27649: PPUSH
27650: CALL_OW 488
27654: IFFALSE 27677
// begin result := [ x , y ] ;
27656: LD_ADDR_VAR 0 1
27660: PUSH
27661: LD_VAR 0 3
27665: PUSH
27666: LD_VAR 0 4
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: ST_TO_ADDR
// break ;
27675: GO 27679
// end ; end ;
27677: GO 27479
27679: POP
27680: POP
// if result then
27681: LD_VAR 0 1
27685: IFFALSE 27745
// begin ToLua ( playSibBomb() ) ;
27687: LD_STRING playSibBomb()
27689: PPUSH
27690: CALL_OW 559
// wait ( 0 0$14 ) ;
27694: LD_INT 490
27696: PPUSH
27697: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27701: LD_VAR 0 1
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: PPUSH
27710: LD_VAR 0 1
27714: PUSH
27715: LD_INT 2
27717: ARRAY
27718: PPUSH
27719: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27723: LD_VAR 0 1
27727: PUSH
27728: LD_INT 1
27730: ARRAY
27731: PPUSH
27732: LD_VAR 0 1
27736: PUSH
27737: LD_INT 2
27739: ARRAY
27740: PPUSH
27741: CALL_OW 429
// end ; end ;
27745: LD_VAR 0 1
27749: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27750: LD_EXP 38
27754: PUSH
27755: LD_EXP 60
27759: AND
27760: IFFALSE 27772
27762: GO 27764
27764: DISABLE
// YouLost (  ) ;
27765: LD_STRING 
27767: PPUSH
27768: CALL_OW 104
27772: END
// every 0 0$1 trigger StreamModeActive and sFog do
27773: LD_EXP 38
27777: PUSH
27778: LD_EXP 59
27782: AND
27783: IFFALSE 27797
27785: GO 27787
27787: DISABLE
// FogOff ( your_side ) ;
27788: LD_OWVAR 2
27792: PPUSH
27793: CALL_OW 344
27797: END
// every 0 0$1 trigger StreamModeActive and sSun do
27798: LD_EXP 38
27802: PUSH
27803: LD_EXP 61
27807: AND
27808: IFFALSE 27836
27810: GO 27812
27812: DISABLE
// begin solar_recharge_percent := 0 ;
27813: LD_ADDR_OWVAR 79
27817: PUSH
27818: LD_INT 0
27820: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27821: LD_INT 10500
27823: PPUSH
27824: CALL_OW 67
// solar_recharge_percent := 100 ;
27828: LD_ADDR_OWVAR 79
27832: PUSH
27833: LD_INT 100
27835: ST_TO_ADDR
// end ;
27836: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27837: LD_EXP 38
27841: PUSH
27842: LD_EXP 62
27846: AND
27847: IFFALSE 28086
27849: GO 27851
27851: DISABLE
27852: LD_INT 0
27854: PPUSH
27855: PPUSH
27856: PPUSH
// begin tmp := [ ] ;
27857: LD_ADDR_VAR 0 3
27861: PUSH
27862: EMPTY
27863: ST_TO_ADDR
// for i := 1 to 6 do
27864: LD_ADDR_VAR 0 1
27868: PUSH
27869: DOUBLE
27870: LD_INT 1
27872: DEC
27873: ST_TO_ADDR
27874: LD_INT 6
27876: PUSH
27877: FOR_TO
27878: IFFALSE 27983
// begin uc_nation := nation_nature ;
27880: LD_ADDR_OWVAR 21
27884: PUSH
27885: LD_INT 0
27887: ST_TO_ADDR
// uc_side := 0 ;
27888: LD_ADDR_OWVAR 20
27892: PUSH
27893: LD_INT 0
27895: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27896: LD_ADDR_OWVAR 29
27900: PUSH
27901: LD_INT 12
27903: PUSH
27904: LD_INT 12
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: ST_TO_ADDR
// hc_agressivity := 20 ;
27911: LD_ADDR_OWVAR 35
27915: PUSH
27916: LD_INT 20
27918: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27919: LD_ADDR_OWVAR 28
27923: PUSH
27924: LD_INT 17
27926: ST_TO_ADDR
// hc_gallery :=  ;
27927: LD_ADDR_OWVAR 33
27931: PUSH
27932: LD_STRING 
27934: ST_TO_ADDR
// hc_name :=  ;
27935: LD_ADDR_OWVAR 26
27939: PUSH
27940: LD_STRING 
27942: ST_TO_ADDR
// un := CreateHuman ;
27943: LD_ADDR_VAR 0 2
27947: PUSH
27948: CALL_OW 44
27952: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27953: LD_VAR 0 2
27957: PPUSH
27958: LD_INT 1
27960: PPUSH
27961: CALL_OW 51
// tmp := tmp ^ un ;
27965: LD_ADDR_VAR 0 3
27969: PUSH
27970: LD_VAR 0 3
27974: PUSH
27975: LD_VAR 0 2
27979: ADD
27980: ST_TO_ADDR
// end ;
27981: GO 27877
27983: POP
27984: POP
// repeat wait ( 0 0$1 ) ;
27985: LD_INT 35
27987: PPUSH
27988: CALL_OW 67
// for un in tmp do
27992: LD_ADDR_VAR 0 2
27996: PUSH
27997: LD_VAR 0 3
28001: PUSH
28002: FOR_IN
28003: IFFALSE 28077
// begin if IsDead ( un ) then
28005: LD_VAR 0 2
28009: PPUSH
28010: CALL_OW 301
28014: IFFALSE 28034
// begin tmp := tmp diff un ;
28016: LD_ADDR_VAR 0 3
28020: PUSH
28021: LD_VAR 0 3
28025: PUSH
28026: LD_VAR 0 2
28030: DIFF
28031: ST_TO_ADDR
// continue ;
28032: GO 28002
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_INT 3
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PPUSH
28056: CALL_OW 69
28060: PPUSH
28061: LD_VAR 0 2
28065: PPUSH
28066: CALL_OW 74
28070: PPUSH
28071: CALL_OW 115
// end ;
28075: GO 28002
28077: POP
28078: POP
// until not tmp ;
28079: LD_VAR 0 3
28083: NOT
28084: IFFALSE 27985
// end ;
28086: PPOPN 3
28088: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28089: LD_EXP 38
28093: PUSH
28094: LD_EXP 63
28098: AND
28099: IFFALSE 28153
28101: GO 28103
28103: DISABLE
// begin ToLua ( displayTroll(); ) ;
28104: LD_STRING displayTroll();
28106: PPUSH
28107: CALL_OW 559
// wait ( 3 3$00 ) ;
28111: LD_INT 6300
28113: PPUSH
28114: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28118: LD_STRING hideTroll();
28120: PPUSH
28121: CALL_OW 559
// wait ( 1 1$00 ) ;
28125: LD_INT 2100
28127: PPUSH
28128: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28132: LD_STRING displayTroll();
28134: PPUSH
28135: CALL_OW 559
// wait ( 1 1$00 ) ;
28139: LD_INT 2100
28141: PPUSH
28142: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28146: LD_STRING hideTroll();
28148: PPUSH
28149: CALL_OW 559
// end ;
28153: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28154: LD_EXP 38
28158: PUSH
28159: LD_EXP 64
28163: AND
28164: IFFALSE 28227
28166: GO 28168
28168: DISABLE
28169: LD_INT 0
28171: PPUSH
// begin p := 0 ;
28172: LD_ADDR_VAR 0 1
28176: PUSH
28177: LD_INT 0
28179: ST_TO_ADDR
// repeat game_speed := 1 ;
28180: LD_ADDR_OWVAR 65
28184: PUSH
28185: LD_INT 1
28187: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28188: LD_INT 35
28190: PPUSH
28191: CALL_OW 67
// p := p + 1 ;
28195: LD_ADDR_VAR 0 1
28199: PUSH
28200: LD_VAR 0 1
28204: PUSH
28205: LD_INT 1
28207: PLUS
28208: ST_TO_ADDR
// until p >= 60 ;
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 60
28216: GREATEREQUAL
28217: IFFALSE 28180
// game_speed := 4 ;
28219: LD_ADDR_OWVAR 65
28223: PUSH
28224: LD_INT 4
28226: ST_TO_ADDR
// end ;
28227: PPOPN 1
28229: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28230: LD_EXP 38
28234: PUSH
28235: LD_EXP 65
28239: AND
28240: IFFALSE 28386
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28249: LD_ADDR_VAR 0 1
28253: PUSH
28254: LD_INT 22
28256: PUSH
28257: LD_OWVAR 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: LD_INT 30
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 30
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PPUSH
28298: CALL_OW 69
28302: ST_TO_ADDR
// if not depot then
28303: LD_VAR 0 1
28307: NOT
28308: IFFALSE 28312
// exit ;
28310: GO 28386
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28312: LD_ADDR_VAR 0 2
28316: PUSH
28317: LD_VAR 0 1
28321: PUSH
28322: LD_INT 1
28324: PPUSH
28325: LD_VAR 0 1
28329: PPUSH
28330: CALL_OW 12
28334: ARRAY
28335: PPUSH
28336: CALL_OW 274
28340: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28341: LD_VAR 0 2
28345: PPUSH
28346: LD_INT 1
28348: PPUSH
28349: LD_INT 0
28351: PPUSH
28352: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28356: LD_VAR 0 2
28360: PPUSH
28361: LD_INT 2
28363: PPUSH
28364: LD_INT 0
28366: PPUSH
28367: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28371: LD_VAR 0 2
28375: PPUSH
28376: LD_INT 3
28378: PPUSH
28379: LD_INT 0
28381: PPUSH
28382: CALL_OW 277
// end ;
28386: PPOPN 2
28388: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28389: LD_EXP 38
28393: PUSH
28394: LD_EXP 66
28398: AND
28399: IFFALSE 28496
28401: GO 28403
28403: DISABLE
28404: LD_INT 0
28406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: LD_INT 22
28414: PUSH
28415: LD_OWVAR 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 21
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 3
28436: PUSH
28437: LD_INT 23
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: PPUSH
28456: CALL_OW 69
28460: ST_TO_ADDR
// if not tmp then
28461: LD_VAR 0 1
28465: NOT
28466: IFFALSE 28470
// exit ;
28468: GO 28496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28470: LD_VAR 0 1
28474: PUSH
28475: LD_INT 1
28477: PPUSH
28478: LD_VAR 0 1
28482: PPUSH
28483: CALL_OW 12
28487: ARRAY
28488: PPUSH
28489: LD_INT 200
28491: PPUSH
28492: CALL_OW 234
// end ;
28496: PPOPN 1
28498: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28499: LD_EXP 38
28503: PUSH
28504: LD_EXP 67
28508: AND
28509: IFFALSE 28588
28511: GO 28513
28513: DISABLE
28514: LD_INT 0
28516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28517: LD_ADDR_VAR 0 1
28521: PUSH
28522: LD_INT 22
28524: PUSH
28525: LD_OWVAR 2
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 21
28536: PUSH
28537: LD_INT 2
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PPUSH
28548: CALL_OW 69
28552: ST_TO_ADDR
// if not tmp then
28553: LD_VAR 0 1
28557: NOT
28558: IFFALSE 28562
// exit ;
28560: GO 28588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28562: LD_VAR 0 1
28566: PUSH
28567: LD_INT 1
28569: PPUSH
28570: LD_VAR 0 1
28574: PPUSH
28575: CALL_OW 12
28579: ARRAY
28580: PPUSH
28581: LD_INT 60
28583: PPUSH
28584: CALL_OW 234
// end ;
28588: PPOPN 1
28590: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28591: LD_EXP 38
28595: PUSH
28596: LD_EXP 68
28600: AND
28601: IFFALSE 28700
28603: GO 28605
28605: DISABLE
28606: LD_INT 0
28608: PPUSH
28609: PPUSH
// begin enable ;
28610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28611: LD_ADDR_VAR 0 1
28615: PUSH
28616: LD_INT 22
28618: PUSH
28619: LD_OWVAR 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 61
28630: PUSH
28631: EMPTY
28632: LIST
28633: PUSH
28634: LD_INT 33
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: PPUSH
28649: CALL_OW 69
28653: ST_TO_ADDR
// if not tmp then
28654: LD_VAR 0 1
28658: NOT
28659: IFFALSE 28663
// exit ;
28661: GO 28700
// for i in tmp do
28663: LD_ADDR_VAR 0 2
28667: PUSH
28668: LD_VAR 0 1
28672: PUSH
28673: FOR_IN
28674: IFFALSE 28698
// if IsControledBy ( i ) then
28676: LD_VAR 0 2
28680: PPUSH
28681: CALL_OW 312
28685: IFFALSE 28696
// ComUnlink ( i ) ;
28687: LD_VAR 0 2
28691: PPUSH
28692: CALL_OW 136
28696: GO 28673
28698: POP
28699: POP
// end ;
28700: PPOPN 2
28702: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28703: LD_EXP 38
28707: PUSH
28708: LD_EXP 69
28712: AND
28713: IFFALSE 28853
28715: GO 28717
28717: DISABLE
28718: LD_INT 0
28720: PPUSH
28721: PPUSH
// begin ToLua ( displayPowell(); ) ;
28722: LD_STRING displayPowell();
28724: PPUSH
28725: CALL_OW 559
// uc_side := 0 ;
28729: LD_ADDR_OWVAR 20
28733: PUSH
28734: LD_INT 0
28736: ST_TO_ADDR
// uc_nation := 2 ;
28737: LD_ADDR_OWVAR 21
28741: PUSH
28742: LD_INT 2
28744: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28745: LD_ADDR_OWVAR 37
28749: PUSH
28750: LD_INT 14
28752: ST_TO_ADDR
// vc_engine := engine_siberite ;
28753: LD_ADDR_OWVAR 39
28757: PUSH
28758: LD_INT 3
28760: ST_TO_ADDR
// vc_control := control_apeman ;
28761: LD_ADDR_OWVAR 38
28765: PUSH
28766: LD_INT 5
28768: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28769: LD_ADDR_OWVAR 40
28773: PUSH
28774: LD_INT 29
28776: ST_TO_ADDR
// un := CreateVehicle ;
28777: LD_ADDR_VAR 0 2
28781: PUSH
28782: CALL_OW 45
28786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28787: LD_VAR 0 2
28791: PPUSH
28792: LD_INT 1
28794: PPUSH
28795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28799: LD_INT 35
28801: PPUSH
28802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28806: LD_VAR 0 2
28810: PPUSH
28811: LD_INT 22
28813: PUSH
28814: LD_OWVAR 2
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PPUSH
28823: CALL_OW 69
28827: PPUSH
28828: LD_VAR 0 2
28832: PPUSH
28833: CALL_OW 74
28837: PPUSH
28838: CALL_OW 115
// until IsDead ( un ) ;
28842: LD_VAR 0 2
28846: PPUSH
28847: CALL_OW 301
28851: IFFALSE 28799
// end ;
28853: PPOPN 2
28855: END
// every 0 0$1 trigger StreamModeActive and sStu do
28856: LD_EXP 38
28860: PUSH
28861: LD_EXP 77
28865: AND
28866: IFFALSE 28882
28868: GO 28870
28870: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28871: LD_STRING displayStucuk();
28873: PPUSH
28874: CALL_OW 559
// ResetFog ;
28878: CALL_OW 335
// end ;
28882: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28883: LD_EXP 38
28887: PUSH
28888: LD_EXP 70
28892: AND
28893: IFFALSE 29034
28895: GO 28897
28897: DISABLE
28898: LD_INT 0
28900: PPUSH
28901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28902: LD_ADDR_VAR 0 2
28906: PUSH
28907: LD_INT 22
28909: PUSH
28910: LD_OWVAR 2
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 21
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PPUSH
28933: CALL_OW 69
28937: ST_TO_ADDR
// if not tmp then
28938: LD_VAR 0 2
28942: NOT
28943: IFFALSE 28947
// exit ;
28945: GO 29034
// un := tmp [ rand ( 1 , tmp ) ] ;
28947: LD_ADDR_VAR 0 1
28951: PUSH
28952: LD_VAR 0 2
28956: PUSH
28957: LD_INT 1
28959: PPUSH
28960: LD_VAR 0 2
28964: PPUSH
28965: CALL_OW 12
28969: ARRAY
28970: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28971: LD_VAR 0 1
28975: PPUSH
28976: LD_INT 0
28978: PPUSH
28979: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28983: LD_VAR 0 1
28987: PPUSH
28988: LD_OWVAR 3
28992: PUSH
28993: LD_VAR 0 1
28997: DIFF
28998: PPUSH
28999: LD_VAR 0 1
29003: PPUSH
29004: CALL_OW 74
29008: PPUSH
29009: CALL_OW 115
// wait ( 0 0$20 ) ;
29013: LD_INT 700
29015: PPUSH
29016: CALL_OW 67
// SetSide ( un , your_side ) ;
29020: LD_VAR 0 1
29024: PPUSH
29025: LD_OWVAR 2
29029: PPUSH
29030: CALL_OW 235
// end ;
29034: PPOPN 2
29036: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29037: LD_EXP 38
29041: PUSH
29042: LD_EXP 71
29046: AND
29047: IFFALSE 29153
29049: GO 29051
29051: DISABLE
29052: LD_INT 0
29054: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29055: LD_ADDR_VAR 0 1
29059: PUSH
29060: LD_INT 22
29062: PUSH
29063: LD_OWVAR 2
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 2
29074: PUSH
29075: LD_INT 30
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 30
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PPUSH
29104: CALL_OW 69
29108: ST_TO_ADDR
// if not depot then
29109: LD_VAR 0 1
29113: NOT
29114: IFFALSE 29118
// exit ;
29116: GO 29153
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29118: LD_VAR 0 1
29122: PUSH
29123: LD_INT 1
29125: ARRAY
29126: PPUSH
29127: CALL_OW 250
29131: PPUSH
29132: LD_VAR 0 1
29136: PUSH
29137: LD_INT 1
29139: ARRAY
29140: PPUSH
29141: CALL_OW 251
29145: PPUSH
29146: LD_INT 70
29148: PPUSH
29149: CALL_OW 495
// end ;
29153: PPOPN 1
29155: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29156: LD_EXP 38
29160: PUSH
29161: LD_EXP 72
29165: AND
29166: IFFALSE 29377
29168: GO 29170
29170: DISABLE
29171: LD_INT 0
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
29177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29178: LD_ADDR_VAR 0 5
29182: PUSH
29183: LD_INT 22
29185: PUSH
29186: LD_OWVAR 2
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 21
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PPUSH
29209: CALL_OW 69
29213: ST_TO_ADDR
// if not tmp then
29214: LD_VAR 0 5
29218: NOT
29219: IFFALSE 29223
// exit ;
29221: GO 29377
// for i in tmp do
29223: LD_ADDR_VAR 0 1
29227: PUSH
29228: LD_VAR 0 5
29232: PUSH
29233: FOR_IN
29234: IFFALSE 29375
// begin d := rand ( 0 , 5 ) ;
29236: LD_ADDR_VAR 0 4
29240: PUSH
29241: LD_INT 0
29243: PPUSH
29244: LD_INT 5
29246: PPUSH
29247: CALL_OW 12
29251: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29252: LD_ADDR_VAR 0 2
29256: PUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 250
29266: PPUSH
29267: LD_VAR 0 4
29271: PPUSH
29272: LD_INT 3
29274: PPUSH
29275: LD_INT 12
29277: PPUSH
29278: CALL_OW 12
29282: PPUSH
29283: CALL_OW 272
29287: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_VAR 0 1
29297: PPUSH
29298: CALL_OW 251
29302: PPUSH
29303: LD_VAR 0 4
29307: PPUSH
29308: LD_INT 3
29310: PPUSH
29311: LD_INT 12
29313: PPUSH
29314: CALL_OW 12
29318: PPUSH
29319: CALL_OW 273
29323: ST_TO_ADDR
// if ValidHex ( x , y ) then
29324: LD_VAR 0 2
29328: PPUSH
29329: LD_VAR 0 3
29333: PPUSH
29334: CALL_OW 488
29338: IFFALSE 29373
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29340: LD_VAR 0 1
29344: PPUSH
29345: LD_VAR 0 2
29349: PPUSH
29350: LD_VAR 0 3
29354: PPUSH
29355: LD_INT 3
29357: PPUSH
29358: LD_INT 6
29360: PPUSH
29361: CALL_OW 12
29365: PPUSH
29366: LD_INT 1
29368: PPUSH
29369: CALL_OW 483
// end ;
29373: GO 29233
29375: POP
29376: POP
// end ;
29377: PPOPN 5
29379: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29380: LD_EXP 38
29384: PUSH
29385: LD_EXP 73
29389: AND
29390: IFFALSE 29484
29392: GO 29394
29394: DISABLE
29395: LD_INT 0
29397: PPUSH
29398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29399: LD_ADDR_VAR 0 2
29403: PUSH
29404: LD_INT 22
29406: PUSH
29407: LD_OWVAR 2
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 32
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 21
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: PPUSH
29441: CALL_OW 69
29445: ST_TO_ADDR
// if not tmp then
29446: LD_VAR 0 2
29450: NOT
29451: IFFALSE 29455
// exit ;
29453: GO 29484
// for i in tmp do
29455: LD_ADDR_VAR 0 1
29459: PUSH
29460: LD_VAR 0 2
29464: PUSH
29465: FOR_IN
29466: IFFALSE 29482
// SetFuel ( i , 0 ) ;
29468: LD_VAR 0 1
29472: PPUSH
29473: LD_INT 0
29475: PPUSH
29476: CALL_OW 240
29480: GO 29465
29482: POP
29483: POP
// end ;
29484: PPOPN 2
29486: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29487: LD_EXP 38
29491: PUSH
29492: LD_EXP 74
29496: AND
29497: IFFALSE 29563
29499: GO 29501
29501: DISABLE
29502: LD_INT 0
29504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29505: LD_ADDR_VAR 0 1
29509: PUSH
29510: LD_INT 22
29512: PUSH
29513: LD_OWVAR 2
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 30
29524: PUSH
29525: LD_INT 29
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PPUSH
29536: CALL_OW 69
29540: ST_TO_ADDR
// if not tmp then
29541: LD_VAR 0 1
29545: NOT
29546: IFFALSE 29550
// exit ;
29548: GO 29563
// DestroyUnit ( tmp [ 1 ] ) ;
29550: LD_VAR 0 1
29554: PUSH
29555: LD_INT 1
29557: ARRAY
29558: PPUSH
29559: CALL_OW 65
// end ;
29563: PPOPN 1
29565: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29566: LD_EXP 38
29570: PUSH
29571: LD_EXP 76
29575: AND
29576: IFFALSE 29705
29578: GO 29580
29580: DISABLE
29581: LD_INT 0
29583: PPUSH
// begin uc_side := 0 ;
29584: LD_ADDR_OWVAR 20
29588: PUSH
29589: LD_INT 0
29591: ST_TO_ADDR
// uc_nation := nation_arabian ;
29592: LD_ADDR_OWVAR 21
29596: PUSH
29597: LD_INT 2
29599: ST_TO_ADDR
// hc_gallery :=  ;
29600: LD_ADDR_OWVAR 33
29604: PUSH
29605: LD_STRING 
29607: ST_TO_ADDR
// hc_name :=  ;
29608: LD_ADDR_OWVAR 26
29612: PUSH
29613: LD_STRING 
29615: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29616: LD_INT 1
29618: PPUSH
29619: LD_INT 11
29621: PPUSH
29622: LD_INT 10
29624: PPUSH
29625: CALL_OW 380
// un := CreateHuman ;
29629: LD_ADDR_VAR 0 1
29633: PUSH
29634: CALL_OW 44
29638: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29639: LD_VAR 0 1
29643: PPUSH
29644: LD_INT 1
29646: PPUSH
29647: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29651: LD_INT 35
29653: PPUSH
29654: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29658: LD_VAR 0 1
29662: PPUSH
29663: LD_INT 22
29665: PUSH
29666: LD_OWVAR 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PPUSH
29675: CALL_OW 69
29679: PPUSH
29680: LD_VAR 0 1
29684: PPUSH
29685: CALL_OW 74
29689: PPUSH
29690: CALL_OW 115
// until IsDead ( un ) ;
29694: LD_VAR 0 1
29698: PPUSH
29699: CALL_OW 301
29703: IFFALSE 29651
// end ;
29705: PPOPN 1
29707: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29708: LD_EXP 38
29712: PUSH
29713: LD_EXP 78
29717: AND
29718: IFFALSE 29730
29720: GO 29722
29722: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29723: LD_STRING earthquake(getX(game), 0, 32)
29725: PPUSH
29726: CALL_OW 559
29730: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29731: LD_EXP 38
29735: PUSH
29736: LD_EXP 79
29740: AND
29741: IFFALSE 29832
29743: GO 29745
29745: DISABLE
29746: LD_INT 0
29748: PPUSH
// begin enable ;
29749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29750: LD_ADDR_VAR 0 1
29754: PUSH
29755: LD_INT 22
29757: PUSH
29758: LD_OWVAR 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 21
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 33
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: LIST
29791: PPUSH
29792: CALL_OW 69
29796: ST_TO_ADDR
// if not tmp then
29797: LD_VAR 0 1
29801: NOT
29802: IFFALSE 29806
// exit ;
29804: GO 29832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29806: LD_VAR 0 1
29810: PUSH
29811: LD_INT 1
29813: PPUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 12
29823: ARRAY
29824: PPUSH
29825: LD_INT 1
29827: PPUSH
29828: CALL_OW 234
// end ;
29832: PPOPN 1
29834: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29835: LD_EXP 38
29839: PUSH
29840: LD_EXP 80
29844: AND
29845: IFFALSE 29986
29847: GO 29849
29849: DISABLE
29850: LD_INT 0
29852: PPUSH
29853: PPUSH
29854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: LD_INT 22
29862: PUSH
29863: LD_OWVAR 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 25
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PPUSH
29886: CALL_OW 69
29890: ST_TO_ADDR
// if not tmp then
29891: LD_VAR 0 3
29895: NOT
29896: IFFALSE 29900
// exit ;
29898: GO 29986
// un := tmp [ rand ( 1 , tmp ) ] ;
29900: LD_ADDR_VAR 0 2
29904: PUSH
29905: LD_VAR 0 3
29909: PUSH
29910: LD_INT 1
29912: PPUSH
29913: LD_VAR 0 3
29917: PPUSH
29918: CALL_OW 12
29922: ARRAY
29923: ST_TO_ADDR
// if Crawls ( un ) then
29924: LD_VAR 0 2
29928: PPUSH
29929: CALL_OW 318
29933: IFFALSE 29944
// ComWalk ( un ) ;
29935: LD_VAR 0 2
29939: PPUSH
29940: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29944: LD_VAR 0 2
29948: PPUSH
29949: LD_INT 9
29951: PPUSH
29952: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29956: LD_INT 28
29958: PPUSH
29959: LD_OWVAR 2
29963: PPUSH
29964: LD_INT 2
29966: PPUSH
29967: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29971: LD_INT 29
29973: PPUSH
29974: LD_OWVAR 2
29978: PPUSH
29979: LD_INT 2
29981: PPUSH
29982: CALL_OW 322
// end ;
29986: PPOPN 3
29988: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29989: LD_EXP 38
29993: PUSH
29994: LD_EXP 81
29998: AND
29999: IFFALSE 30110
30001: GO 30003
30003: DISABLE
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
30008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30009: LD_ADDR_VAR 0 3
30013: PUSH
30014: LD_INT 22
30016: PUSH
30017: LD_OWVAR 2
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 25
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PPUSH
30040: CALL_OW 69
30044: ST_TO_ADDR
// if not tmp then
30045: LD_VAR 0 3
30049: NOT
30050: IFFALSE 30054
// exit ;
30052: GO 30110
// un := tmp [ rand ( 1 , tmp ) ] ;
30054: LD_ADDR_VAR 0 2
30058: PUSH
30059: LD_VAR 0 3
30063: PUSH
30064: LD_INT 1
30066: PPUSH
30067: LD_VAR 0 3
30071: PPUSH
30072: CALL_OW 12
30076: ARRAY
30077: ST_TO_ADDR
// if Crawls ( un ) then
30078: LD_VAR 0 2
30082: PPUSH
30083: CALL_OW 318
30087: IFFALSE 30098
// ComWalk ( un ) ;
30089: LD_VAR 0 2
30093: PPUSH
30094: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30098: LD_VAR 0 2
30102: PPUSH
30103: LD_INT 8
30105: PPUSH
30106: CALL_OW 336
// end ;
30110: PPOPN 3
30112: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30113: LD_EXP 38
30117: PUSH
30118: LD_EXP 82
30122: AND
30123: IFFALSE 30267
30125: GO 30127
30127: DISABLE
30128: LD_INT 0
30130: PPUSH
30131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30132: LD_ADDR_VAR 0 2
30136: PUSH
30137: LD_INT 22
30139: PUSH
30140: LD_OWVAR 2
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 21
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 34
30164: PUSH
30165: LD_INT 12
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 34
30174: PUSH
30175: LD_INT 51
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 34
30184: PUSH
30185: LD_INT 32
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: PPUSH
30203: CALL_OW 69
30207: ST_TO_ADDR
// if not tmp then
30208: LD_VAR 0 2
30212: NOT
30213: IFFALSE 30217
// exit ;
30215: GO 30267
// for i in tmp do
30217: LD_ADDR_VAR 0 1
30221: PUSH
30222: LD_VAR 0 2
30226: PUSH
30227: FOR_IN
30228: IFFALSE 30265
// if GetCargo ( i , mat_artifact ) = 0 then
30230: LD_VAR 0 1
30234: PPUSH
30235: LD_INT 4
30237: PPUSH
30238: CALL_OW 289
30242: PUSH
30243: LD_INT 0
30245: EQUAL
30246: IFFALSE 30263
// SetCargo ( i , mat_siberit , 100 ) ;
30248: LD_VAR 0 1
30252: PPUSH
30253: LD_INT 3
30255: PPUSH
30256: LD_INT 100
30258: PPUSH
30259: CALL_OW 290
30263: GO 30227
30265: POP
30266: POP
// end ;
30267: PPOPN 2
30269: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30270: LD_EXP 38
30274: PUSH
30275: LD_EXP 83
30279: AND
30280: IFFALSE 30463
30282: GO 30284
30284: DISABLE
30285: LD_INT 0
30287: PPUSH
30288: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30289: LD_ADDR_VAR 0 2
30293: PUSH
30294: LD_INT 22
30296: PUSH
30297: LD_OWVAR 2
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PPUSH
30306: CALL_OW 69
30310: ST_TO_ADDR
// if not tmp then
30311: LD_VAR 0 2
30315: NOT
30316: IFFALSE 30320
// exit ;
30318: GO 30463
// for i := 1 to 2 do
30320: LD_ADDR_VAR 0 1
30324: PUSH
30325: DOUBLE
30326: LD_INT 1
30328: DEC
30329: ST_TO_ADDR
30330: LD_INT 2
30332: PUSH
30333: FOR_TO
30334: IFFALSE 30461
// begin uc_side := your_side ;
30336: LD_ADDR_OWVAR 20
30340: PUSH
30341: LD_OWVAR 2
30345: ST_TO_ADDR
// uc_nation := nation_american ;
30346: LD_ADDR_OWVAR 21
30350: PUSH
30351: LD_INT 1
30353: ST_TO_ADDR
// vc_chassis := us_morphling ;
30354: LD_ADDR_OWVAR 37
30358: PUSH
30359: LD_INT 5
30361: ST_TO_ADDR
// vc_engine := engine_siberite ;
30362: LD_ADDR_OWVAR 39
30366: PUSH
30367: LD_INT 3
30369: ST_TO_ADDR
// vc_control := control_computer ;
30370: LD_ADDR_OWVAR 38
30374: PUSH
30375: LD_INT 3
30377: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30378: LD_ADDR_OWVAR 40
30382: PUSH
30383: LD_INT 10
30385: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30386: LD_VAR 0 2
30390: PUSH
30391: LD_INT 1
30393: ARRAY
30394: PPUSH
30395: CALL_OW 310
30399: NOT
30400: IFFALSE 30447
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30402: CALL_OW 45
30406: PPUSH
30407: LD_VAR 0 2
30411: PUSH
30412: LD_INT 1
30414: ARRAY
30415: PPUSH
30416: CALL_OW 250
30420: PPUSH
30421: LD_VAR 0 2
30425: PUSH
30426: LD_INT 1
30428: ARRAY
30429: PPUSH
30430: CALL_OW 251
30434: PPUSH
30435: LD_INT 12
30437: PPUSH
30438: LD_INT 1
30440: PPUSH
30441: CALL_OW 50
30445: GO 30459
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30447: CALL_OW 45
30451: PPUSH
30452: LD_INT 1
30454: PPUSH
30455: CALL_OW 51
// end ;
30459: GO 30333
30461: POP
30462: POP
// end ;
30463: PPOPN 2
30465: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30466: LD_EXP 38
30470: PUSH
30471: LD_EXP 84
30475: AND
30476: IFFALSE 30698
30478: GO 30480
30480: DISABLE
30481: LD_INT 0
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
30487: PPUSH
30488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30489: LD_ADDR_VAR 0 6
30493: PUSH
30494: LD_INT 22
30496: PUSH
30497: LD_OWVAR 2
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 21
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: LD_INT 23
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: PPUSH
30538: CALL_OW 69
30542: ST_TO_ADDR
// if not tmp then
30543: LD_VAR 0 6
30547: NOT
30548: IFFALSE 30552
// exit ;
30550: GO 30698
// s1 := rand ( 1 , 4 ) ;
30552: LD_ADDR_VAR 0 2
30556: PUSH
30557: LD_INT 1
30559: PPUSH
30560: LD_INT 4
30562: PPUSH
30563: CALL_OW 12
30567: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30568: LD_ADDR_VAR 0 4
30572: PUSH
30573: LD_VAR 0 6
30577: PUSH
30578: LD_INT 1
30580: ARRAY
30581: PPUSH
30582: LD_VAR 0 2
30586: PPUSH
30587: CALL_OW 259
30591: ST_TO_ADDR
// if s1 = 1 then
30592: LD_VAR 0 2
30596: PUSH
30597: LD_INT 1
30599: EQUAL
30600: IFFALSE 30620
// s2 := rand ( 2 , 4 ) else
30602: LD_ADDR_VAR 0 3
30606: PUSH
30607: LD_INT 2
30609: PPUSH
30610: LD_INT 4
30612: PPUSH
30613: CALL_OW 12
30617: ST_TO_ADDR
30618: GO 30628
// s2 := 1 ;
30620: LD_ADDR_VAR 0 3
30624: PUSH
30625: LD_INT 1
30627: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30628: LD_ADDR_VAR 0 5
30632: PUSH
30633: LD_VAR 0 6
30637: PUSH
30638: LD_INT 1
30640: ARRAY
30641: PPUSH
30642: LD_VAR 0 3
30646: PPUSH
30647: CALL_OW 259
30651: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30652: LD_VAR 0 6
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: LD_VAR 0 2
30665: PPUSH
30666: LD_VAR 0 5
30670: PPUSH
30671: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30675: LD_VAR 0 6
30679: PUSH
30680: LD_INT 1
30682: ARRAY
30683: PPUSH
30684: LD_VAR 0 3
30688: PPUSH
30689: LD_VAR 0 4
30693: PPUSH
30694: CALL_OW 237
// end ;
30698: PPOPN 6
30700: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30701: LD_EXP 38
30705: PUSH
30706: LD_EXP 85
30710: AND
30711: IFFALSE 30790
30713: GO 30715
30715: DISABLE
30716: LD_INT 0
30718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30719: LD_ADDR_VAR 0 1
30723: PUSH
30724: LD_INT 22
30726: PUSH
30727: LD_OWVAR 2
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 30
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PPUSH
30750: CALL_OW 69
30754: ST_TO_ADDR
// if not tmp then
30755: LD_VAR 0 1
30759: NOT
30760: IFFALSE 30764
// exit ;
30762: GO 30790
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30764: LD_VAR 0 1
30768: PUSH
30769: LD_INT 1
30771: PPUSH
30772: LD_VAR 0 1
30776: PPUSH
30777: CALL_OW 12
30781: ARRAY
30782: PPUSH
30783: LD_INT 1
30785: PPUSH
30786: CALL_OW 234
// end ;
30790: PPOPN 1
30792: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30793: LD_EXP 38
30797: PUSH
30798: LD_EXP 86
30802: AND
30803: IFFALSE 30915
30805: GO 30807
30807: DISABLE
30808: LD_INT 0
30810: PPUSH
30811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30812: LD_ADDR_VAR 0 2
30816: PUSH
30817: LD_INT 22
30819: PUSH
30820: LD_OWVAR 2
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: LD_INT 30
30834: PUSH
30835: LD_INT 27
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 30
30844: PUSH
30845: LD_INT 26
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 30
30854: PUSH
30855: LD_INT 28
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PPUSH
30872: CALL_OW 69
30876: ST_TO_ADDR
// if not tmp then
30877: LD_VAR 0 2
30881: NOT
30882: IFFALSE 30886
// exit ;
30884: GO 30915
// for i in tmp do
30886: LD_ADDR_VAR 0 1
30890: PUSH
30891: LD_VAR 0 2
30895: PUSH
30896: FOR_IN
30897: IFFALSE 30913
// SetLives ( i , 1 ) ;
30899: LD_VAR 0 1
30903: PPUSH
30904: LD_INT 1
30906: PPUSH
30907: CALL_OW 234
30911: GO 30896
30913: POP
30914: POP
// end ;
30915: PPOPN 2
30917: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30918: LD_EXP 38
30922: PUSH
30923: LD_EXP 87
30927: AND
30928: IFFALSE 31215
30930: GO 30932
30932: DISABLE
30933: LD_INT 0
30935: PPUSH
30936: PPUSH
30937: PPUSH
// begin i := rand ( 1 , 7 ) ;
30938: LD_ADDR_VAR 0 1
30942: PUSH
30943: LD_INT 1
30945: PPUSH
30946: LD_INT 7
30948: PPUSH
30949: CALL_OW 12
30953: ST_TO_ADDR
// case i of 1 :
30954: LD_VAR 0 1
30958: PUSH
30959: LD_INT 1
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 30967
30965: GO 30977
30967: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30968: LD_STRING earthquake(getX(game), 0, 32)
30970: PPUSH
30971: CALL_OW 559
30975: GO 31215
30977: LD_INT 2
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30999
30985: POP
// begin ToLua ( displayStucuk(); ) ;
30986: LD_STRING displayStucuk();
30988: PPUSH
30989: CALL_OW 559
// ResetFog ;
30993: CALL_OW 335
// end ; 3 :
30997: GO 31215
30999: LD_INT 3
31001: DOUBLE
31002: EQUAL
31003: IFTRUE 31007
31005: GO 31111
31007: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31008: LD_ADDR_VAR 0 2
31012: PUSH
31013: LD_INT 22
31015: PUSH
31016: LD_OWVAR 2
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 25
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PPUSH
31039: CALL_OW 69
31043: ST_TO_ADDR
// if not tmp then
31044: LD_VAR 0 2
31048: NOT
31049: IFFALSE 31053
// exit ;
31051: GO 31215
// un := tmp [ rand ( 1 , tmp ) ] ;
31053: LD_ADDR_VAR 0 3
31057: PUSH
31058: LD_VAR 0 2
31062: PUSH
31063: LD_INT 1
31065: PPUSH
31066: LD_VAR 0 2
31070: PPUSH
31071: CALL_OW 12
31075: ARRAY
31076: ST_TO_ADDR
// if Crawls ( un ) then
31077: LD_VAR 0 3
31081: PPUSH
31082: CALL_OW 318
31086: IFFALSE 31097
// ComWalk ( un ) ;
31088: LD_VAR 0 3
31092: PPUSH
31093: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31097: LD_VAR 0 3
31101: PPUSH
31102: LD_INT 8
31104: PPUSH
31105: CALL_OW 336
// end ; 4 :
31109: GO 31215
31111: LD_INT 4
31113: DOUBLE
31114: EQUAL
31115: IFTRUE 31119
31117: GO 31193
31119: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31120: LD_ADDR_VAR 0 2
31124: PUSH
31125: LD_INT 22
31127: PUSH
31128: LD_OWVAR 2
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 30
31139: PUSH
31140: LD_INT 29
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PPUSH
31151: CALL_OW 69
31155: ST_TO_ADDR
// if not tmp then
31156: LD_VAR 0 2
31160: NOT
31161: IFFALSE 31165
// exit ;
31163: GO 31215
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31165: LD_VAR 0 2
31169: PUSH
31170: LD_INT 1
31172: ARRAY
31173: PPUSH
31174: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31178: LD_VAR 0 2
31182: PUSH
31183: LD_INT 1
31185: ARRAY
31186: PPUSH
31187: CALL_OW 65
// end ; 5 .. 7 :
31191: GO 31215
31193: LD_INT 5
31195: DOUBLE
31196: GREATEREQUAL
31197: IFFALSE 31205
31199: LD_INT 7
31201: DOUBLE
31202: LESSEQUAL
31203: IFTRUE 31207
31205: GO 31214
31207: POP
// StreamSibBomb ; end ;
31208: CALL 27452 0 0
31212: GO 31215
31214: POP
// end ;
31215: PPOPN 3
31217: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31218: LD_EXP 38
31222: PUSH
31223: LD_EXP 88
31227: AND
31228: IFFALSE 31384
31230: GO 31232
31232: DISABLE
31233: LD_INT 0
31235: PPUSH
31236: PPUSH
31237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31238: LD_ADDR_VAR 0 2
31242: PUSH
31243: LD_INT 81
31245: PUSH
31246: LD_OWVAR 2
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 21
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 21
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PPUSH
31287: CALL_OW 69
31291: ST_TO_ADDR
// if not tmp then
31292: LD_VAR 0 2
31296: NOT
31297: IFFALSE 31301
// exit ;
31299: GO 31384
// p := 0 ;
31301: LD_ADDR_VAR 0 3
31305: PUSH
31306: LD_INT 0
31308: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31309: LD_INT 35
31311: PPUSH
31312: CALL_OW 67
// p := p + 1 ;
31316: LD_ADDR_VAR 0 3
31320: PUSH
31321: LD_VAR 0 3
31325: PUSH
31326: LD_INT 1
31328: PLUS
31329: ST_TO_ADDR
// for i in tmp do
31330: LD_ADDR_VAR 0 1
31334: PUSH
31335: LD_VAR 0 2
31339: PUSH
31340: FOR_IN
31341: IFFALSE 31372
// if GetLives ( i ) < 1000 then
31343: LD_VAR 0 1
31347: PPUSH
31348: CALL_OW 256
31352: PUSH
31353: LD_INT 1000
31355: LESS
31356: IFFALSE 31370
// SetLives ( i , 1000 ) ;
31358: LD_VAR 0 1
31362: PPUSH
31363: LD_INT 1000
31365: PPUSH
31366: CALL_OW 234
31370: GO 31340
31372: POP
31373: POP
// until p > 20 ;
31374: LD_VAR 0 3
31378: PUSH
31379: LD_INT 20
31381: GREATER
31382: IFFALSE 31309
// end ;
31384: PPOPN 3
31386: END
// every 0 0$1 trigger StreamModeActive and sTime do
31387: LD_EXP 38
31391: PUSH
31392: LD_EXP 89
31396: AND
31397: IFFALSE 31432
31399: GO 31401
31401: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31402: LD_INT 28
31404: PPUSH
31405: LD_OWVAR 2
31409: PPUSH
31410: LD_INT 2
31412: PPUSH
31413: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31417: LD_INT 30
31419: PPUSH
31420: LD_OWVAR 2
31424: PPUSH
31425: LD_INT 2
31427: PPUSH
31428: CALL_OW 322
// end ;
31432: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31433: LD_EXP 38
31437: PUSH
31438: LD_EXP 90
31442: AND
31443: IFFALSE 31564
31445: GO 31447
31447: DISABLE
31448: LD_INT 0
31450: PPUSH
31451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31452: LD_ADDR_VAR 0 2
31456: PUSH
31457: LD_INT 22
31459: PUSH
31460: LD_OWVAR 2
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 21
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 23
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: PPUSH
31501: CALL_OW 69
31505: ST_TO_ADDR
// if not tmp then
31506: LD_VAR 0 2
31510: NOT
31511: IFFALSE 31515
// exit ;
31513: GO 31564
// for i in tmp do
31515: LD_ADDR_VAR 0 1
31519: PUSH
31520: LD_VAR 0 2
31524: PUSH
31525: FOR_IN
31526: IFFALSE 31562
// begin if Crawls ( i ) then
31528: LD_VAR 0 1
31532: PPUSH
31533: CALL_OW 318
31537: IFFALSE 31548
// ComWalk ( i ) ;
31539: LD_VAR 0 1
31543: PPUSH
31544: CALL_OW 138
// SetClass ( i , 2 ) ;
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_INT 2
31555: PPUSH
31556: CALL_OW 336
// end ;
31560: GO 31525
31562: POP
31563: POP
// end ;
31564: PPOPN 2
31566: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31567: LD_EXP 38
31571: PUSH
31572: LD_EXP 91
31576: AND
31577: IFFALSE 31865
31579: GO 31581
31581: DISABLE
31582: LD_INT 0
31584: PPUSH
31585: PPUSH
31586: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31587: LD_OWVAR 2
31591: PPUSH
31592: LD_INT 9
31594: PPUSH
31595: LD_INT 1
31597: PPUSH
31598: LD_INT 1
31600: PPUSH
31601: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31605: LD_INT 9
31607: PPUSH
31608: LD_OWVAR 2
31612: PPUSH
31613: CALL_OW 343
// uc_side := 9 ;
31617: LD_ADDR_OWVAR 20
31621: PUSH
31622: LD_INT 9
31624: ST_TO_ADDR
// uc_nation := 2 ;
31625: LD_ADDR_OWVAR 21
31629: PUSH
31630: LD_INT 2
31632: ST_TO_ADDR
// hc_name := Dark Warrior ;
31633: LD_ADDR_OWVAR 26
31637: PUSH
31638: LD_STRING Dark Warrior
31640: ST_TO_ADDR
// hc_gallery :=  ;
31641: LD_ADDR_OWVAR 33
31645: PUSH
31646: LD_STRING 
31648: ST_TO_ADDR
// hc_noskilllimit := true ;
31649: LD_ADDR_OWVAR 76
31653: PUSH
31654: LD_INT 1
31656: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31657: LD_ADDR_OWVAR 31
31661: PUSH
31662: LD_INT 30
31664: PUSH
31665: LD_INT 30
31667: PUSH
31668: LD_INT 30
31670: PUSH
31671: LD_INT 30
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
// un := CreateHuman ;
31680: LD_ADDR_VAR 0 3
31684: PUSH
31685: CALL_OW 44
31689: ST_TO_ADDR
// hc_noskilllimit := false ;
31690: LD_ADDR_OWVAR 76
31694: PUSH
31695: LD_INT 0
31697: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31698: LD_VAR 0 3
31702: PPUSH
31703: LD_INT 1
31705: PPUSH
31706: CALL_OW 51
// ToLua ( playRanger() ) ;
31710: LD_STRING playRanger()
31712: PPUSH
31713: CALL_OW 559
// p := 0 ;
31717: LD_ADDR_VAR 0 2
31721: PUSH
31722: LD_INT 0
31724: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31725: LD_INT 35
31727: PPUSH
31728: CALL_OW 67
// p := p + 1 ;
31732: LD_ADDR_VAR 0 2
31736: PUSH
31737: LD_VAR 0 2
31741: PUSH
31742: LD_INT 1
31744: PLUS
31745: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31746: LD_VAR 0 3
31750: PPUSH
31751: CALL_OW 256
31755: PUSH
31756: LD_INT 1000
31758: LESS
31759: IFFALSE 31773
// SetLives ( un , 1000 ) ;
31761: LD_VAR 0 3
31765: PPUSH
31766: LD_INT 1000
31768: PPUSH
31769: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31773: LD_VAR 0 3
31777: PPUSH
31778: LD_INT 81
31780: PUSH
31781: LD_OWVAR 2
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 91
31792: PUSH
31793: LD_VAR 0 3
31797: PUSH
31798: LD_INT 30
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PPUSH
31810: CALL_OW 69
31814: PPUSH
31815: LD_VAR 0 3
31819: PPUSH
31820: CALL_OW 74
31824: PPUSH
31825: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31829: LD_VAR 0 2
31833: PUSH
31834: LD_INT 80
31836: GREATER
31837: PUSH
31838: LD_VAR 0 3
31842: PPUSH
31843: CALL_OW 301
31847: OR
31848: IFFALSE 31725
// if un then
31850: LD_VAR 0 3
31854: IFFALSE 31865
// RemoveUnit ( un ) ;
31856: LD_VAR 0 3
31860: PPUSH
31861: CALL_OW 64
// end ;
31865: PPOPN 3
31867: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31868: LD_EXP 92
31872: IFFALSE 31988
31874: GO 31876
31876: DISABLE
31877: LD_INT 0
31879: PPUSH
31880: PPUSH
31881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31882: LD_ADDR_VAR 0 2
31886: PUSH
31887: LD_INT 81
31889: PUSH
31890: LD_OWVAR 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 21
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PPUSH
31913: CALL_OW 69
31917: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31918: LD_STRING playComputer()
31920: PPUSH
31921: CALL_OW 559
// if not tmp then
31925: LD_VAR 0 2
31929: NOT
31930: IFFALSE 31934
// exit ;
31932: GO 31988
// for i in tmp do
31934: LD_ADDR_VAR 0 1
31938: PUSH
31939: LD_VAR 0 2
31943: PUSH
31944: FOR_IN
31945: IFFALSE 31986
// for j := 1 to 4 do
31947: LD_ADDR_VAR 0 3
31951: PUSH
31952: DOUBLE
31953: LD_INT 1
31955: DEC
31956: ST_TO_ADDR
31957: LD_INT 4
31959: PUSH
31960: FOR_TO
31961: IFFALSE 31982
// SetSkill ( i , j , 10 ) ;
31963: LD_VAR 0 1
31967: PPUSH
31968: LD_VAR 0 3
31972: PPUSH
31973: LD_INT 10
31975: PPUSH
31976: CALL_OW 237
31980: GO 31960
31982: POP
31983: POP
31984: GO 31944
31986: POP
31987: POP
// end ;
31988: PPOPN 3
31990: END
// every 0 0$1 trigger s30 do var i , tmp ;
31991: LD_EXP 93
31995: IFFALSE 32064
31997: GO 31999
31999: DISABLE
32000: LD_INT 0
32002: PPUSH
32003: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32004: LD_ADDR_VAR 0 2
32008: PUSH
32009: LD_INT 22
32011: PUSH
32012: LD_OWVAR 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PPUSH
32021: CALL_OW 69
32025: ST_TO_ADDR
// if not tmp then
32026: LD_VAR 0 2
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32064
// for i in tmp do
32035: LD_ADDR_VAR 0 1
32039: PUSH
32040: LD_VAR 0 2
32044: PUSH
32045: FOR_IN
32046: IFFALSE 32062
// SetLives ( i , 300 ) ;
32048: LD_VAR 0 1
32052: PPUSH
32053: LD_INT 300
32055: PPUSH
32056: CALL_OW 234
32060: GO 32045
32062: POP
32063: POP
// end ;
32064: PPOPN 2
32066: END
// every 0 0$1 trigger s60 do var i , tmp ;
32067: LD_EXP 94
32071: IFFALSE 32140
32073: GO 32075
32075: DISABLE
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32080: LD_ADDR_VAR 0 2
32084: PUSH
32085: LD_INT 22
32087: PUSH
32088: LD_OWVAR 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PPUSH
32097: CALL_OW 69
32101: ST_TO_ADDR
// if not tmp then
32102: LD_VAR 0 2
32106: NOT
32107: IFFALSE 32111
// exit ;
32109: GO 32140
// for i in tmp do
32111: LD_ADDR_VAR 0 1
32115: PUSH
32116: LD_VAR 0 2
32120: PUSH
32121: FOR_IN
32122: IFFALSE 32138
// SetLives ( i , 600 ) ;
32124: LD_VAR 0 1
32128: PPUSH
32129: LD_INT 600
32131: PPUSH
32132: CALL_OW 234
32136: GO 32121
32138: POP
32139: POP
// end ;
32140: PPOPN 2
32142: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32143: LD_INT 0
32145: PPUSH
// case cmd of 301 :
32146: LD_VAR 0 1
32150: PUSH
32151: LD_INT 301
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32159
32157: GO 32191
32159: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32160: LD_VAR 0 6
32164: PPUSH
32165: LD_VAR 0 7
32169: PPUSH
32170: LD_VAR 0 8
32174: PPUSH
32175: LD_VAR 0 4
32179: PPUSH
32180: LD_VAR 0 5
32184: PPUSH
32185: CALL 33392 0 5
32189: GO 32312
32191: LD_INT 302
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32236
32199: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32200: LD_VAR 0 6
32204: PPUSH
32205: LD_VAR 0 7
32209: PPUSH
32210: LD_VAR 0 8
32214: PPUSH
32215: LD_VAR 0 9
32219: PPUSH
32220: LD_VAR 0 4
32224: PPUSH
32225: LD_VAR 0 5
32229: PPUSH
32230: CALL 33483 0 6
32234: GO 32312
32236: LD_INT 303
32238: DOUBLE
32239: EQUAL
32240: IFTRUE 32244
32242: GO 32281
32244: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32245: LD_VAR 0 6
32249: PPUSH
32250: LD_VAR 0 7
32254: PPUSH
32255: LD_VAR 0 8
32259: PPUSH
32260: LD_VAR 0 9
32264: PPUSH
32265: LD_VAR 0 4
32269: PPUSH
32270: LD_VAR 0 5
32274: PPUSH
32275: CALL 32317 0 6
32279: GO 32312
32281: LD_INT 304
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 32311
32289: POP
// hHackTeleport ( unit , x , y ) ; end ;
32290: LD_VAR 0 2
32294: PPUSH
32295: LD_VAR 0 4
32299: PPUSH
32300: LD_VAR 0 5
32304: PPUSH
32305: CALL 34076 0 3
32309: GO 32312
32311: POP
// end ;
32312: LD_VAR 0 12
32316: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32317: LD_INT 0
32319: PPUSH
32320: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32321: LD_VAR 0 1
32325: PUSH
32326: LD_INT 1
32328: LESS
32329: PUSH
32330: LD_VAR 0 1
32334: PUSH
32335: LD_INT 3
32337: GREATER
32338: OR
32339: PUSH
32340: LD_VAR 0 5
32344: PPUSH
32345: LD_VAR 0 6
32349: PPUSH
32350: CALL_OW 428
32354: OR
32355: IFFALSE 32359
// exit ;
32357: GO 33079
// uc_side := your_side ;
32359: LD_ADDR_OWVAR 20
32363: PUSH
32364: LD_OWVAR 2
32368: ST_TO_ADDR
// uc_nation := nation ;
32369: LD_ADDR_OWVAR 21
32373: PUSH
32374: LD_VAR 0 1
32378: ST_TO_ADDR
// bc_level = 1 ;
32379: LD_ADDR_OWVAR 43
32383: PUSH
32384: LD_INT 1
32386: ST_TO_ADDR
// case btype of 1 :
32387: LD_VAR 0 2
32391: PUSH
32392: LD_INT 1
32394: DOUBLE
32395: EQUAL
32396: IFTRUE 32400
32398: GO 32411
32400: POP
// bc_type := b_depot ; 2 :
32401: LD_ADDR_OWVAR 42
32405: PUSH
32406: LD_INT 0
32408: ST_TO_ADDR
32409: GO 33023
32411: LD_INT 2
32413: DOUBLE
32414: EQUAL
32415: IFTRUE 32419
32417: GO 32430
32419: POP
// bc_type := b_warehouse ; 3 :
32420: LD_ADDR_OWVAR 42
32424: PUSH
32425: LD_INT 1
32427: ST_TO_ADDR
32428: GO 33023
32430: LD_INT 3
32432: DOUBLE
32433: EQUAL
32434: IFTRUE 32438
32436: GO 32449
32438: POP
// bc_type := b_lab ; 4 .. 9 :
32439: LD_ADDR_OWVAR 42
32443: PUSH
32444: LD_INT 6
32446: ST_TO_ADDR
32447: GO 33023
32449: LD_INT 4
32451: DOUBLE
32452: GREATEREQUAL
32453: IFFALSE 32461
32455: LD_INT 9
32457: DOUBLE
32458: LESSEQUAL
32459: IFTRUE 32463
32461: GO 32515
32463: POP
// begin bc_type := b_lab_half ;
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 7
32471: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32472: LD_ADDR_OWVAR 44
32476: PUSH
32477: LD_INT 10
32479: PUSH
32480: LD_INT 11
32482: PUSH
32483: LD_INT 12
32485: PUSH
32486: LD_INT 15
32488: PUSH
32489: LD_INT 14
32491: PUSH
32492: LD_INT 13
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: PUSH
32503: LD_VAR 0 2
32507: PUSH
32508: LD_INT 3
32510: MINUS
32511: ARRAY
32512: ST_TO_ADDR
// end ; 10 .. 13 :
32513: GO 33023
32515: LD_INT 10
32517: DOUBLE
32518: GREATEREQUAL
32519: IFFALSE 32527
32521: LD_INT 13
32523: DOUBLE
32524: LESSEQUAL
32525: IFTRUE 32529
32527: GO 32606
32529: POP
// begin bc_type := b_lab_full ;
32530: LD_ADDR_OWVAR 42
32534: PUSH
32535: LD_INT 8
32537: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32538: LD_ADDR_OWVAR 44
32542: PUSH
32543: LD_INT 10
32545: PUSH
32546: LD_INT 12
32548: PUSH
32549: LD_INT 14
32551: PUSH
32552: LD_INT 13
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: PUSH
32561: LD_VAR 0 2
32565: PUSH
32566: LD_INT 9
32568: MINUS
32569: ARRAY
32570: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32571: LD_ADDR_OWVAR 45
32575: PUSH
32576: LD_INT 11
32578: PUSH
32579: LD_INT 15
32581: PUSH
32582: LD_INT 12
32584: PUSH
32585: LD_INT 15
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: PUSH
32594: LD_VAR 0 2
32598: PUSH
32599: LD_INT 9
32601: MINUS
32602: ARRAY
32603: ST_TO_ADDR
// end ; 14 :
32604: GO 33023
32606: LD_INT 14
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32625
32614: POP
// bc_type := b_workshop ; 15 :
32615: LD_ADDR_OWVAR 42
32619: PUSH
32620: LD_INT 2
32622: ST_TO_ADDR
32623: GO 33023
32625: LD_INT 15
32627: DOUBLE
32628: EQUAL
32629: IFTRUE 32633
32631: GO 32644
32633: POP
// bc_type := b_factory ; 16 :
32634: LD_ADDR_OWVAR 42
32638: PUSH
32639: LD_INT 3
32641: ST_TO_ADDR
32642: GO 33023
32644: LD_INT 16
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32652
32650: GO 32663
32652: POP
// bc_type := b_ext_gun ; 17 :
32653: LD_ADDR_OWVAR 42
32657: PUSH
32658: LD_INT 17
32660: ST_TO_ADDR
32661: GO 33023
32663: LD_INT 17
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32671
32669: GO 32699
32671: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32672: LD_ADDR_OWVAR 42
32676: PUSH
32677: LD_INT 19
32679: PUSH
32680: LD_INT 23
32682: PUSH
32683: LD_INT 19
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: PUSH
32691: LD_VAR 0 1
32695: ARRAY
32696: ST_TO_ADDR
32697: GO 33023
32699: LD_INT 18
32701: DOUBLE
32702: EQUAL
32703: IFTRUE 32707
32705: GO 32718
32707: POP
// bc_type := b_ext_radar ; 19 :
32708: LD_ADDR_OWVAR 42
32712: PUSH
32713: LD_INT 20
32715: ST_TO_ADDR
32716: GO 33023
32718: LD_INT 19
32720: DOUBLE
32721: EQUAL
32722: IFTRUE 32726
32724: GO 32737
32726: POP
// bc_type := b_ext_radio ; 20 :
32727: LD_ADDR_OWVAR 42
32731: PUSH
32732: LD_INT 22
32734: ST_TO_ADDR
32735: GO 33023
32737: LD_INT 20
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32756
32745: POP
// bc_type := b_ext_siberium ; 21 :
32746: LD_ADDR_OWVAR 42
32750: PUSH
32751: LD_INT 21
32753: ST_TO_ADDR
32754: GO 33023
32756: LD_INT 21
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32775
32764: POP
// bc_type := b_ext_computer ; 22 :
32765: LD_ADDR_OWVAR 42
32769: PUSH
32770: LD_INT 24
32772: ST_TO_ADDR
32773: GO 33023
32775: LD_INT 22
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32794
32783: POP
// bc_type := b_ext_track ; 23 :
32784: LD_ADDR_OWVAR 42
32788: PUSH
32789: LD_INT 16
32791: ST_TO_ADDR
32792: GO 33023
32794: LD_INT 23
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32813
32802: POP
// bc_type := b_ext_laser ; 24 :
32803: LD_ADDR_OWVAR 42
32807: PUSH
32808: LD_INT 25
32810: ST_TO_ADDR
32811: GO 33023
32813: LD_INT 24
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32832
32821: POP
// bc_type := b_control_tower ; 25 :
32822: LD_ADDR_OWVAR 42
32826: PUSH
32827: LD_INT 36
32829: ST_TO_ADDR
32830: GO 33023
32832: LD_INT 25
32834: DOUBLE
32835: EQUAL
32836: IFTRUE 32840
32838: GO 32851
32840: POP
// bc_type := b_breastwork ; 26 :
32841: LD_ADDR_OWVAR 42
32845: PUSH
32846: LD_INT 31
32848: ST_TO_ADDR
32849: GO 33023
32851: LD_INT 26
32853: DOUBLE
32854: EQUAL
32855: IFTRUE 32859
32857: GO 32870
32859: POP
// bc_type := b_bunker ; 27 :
32860: LD_ADDR_OWVAR 42
32864: PUSH
32865: LD_INT 32
32867: ST_TO_ADDR
32868: GO 33023
32870: LD_INT 27
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32889
32878: POP
// bc_type := b_turret ; 28 :
32879: LD_ADDR_OWVAR 42
32883: PUSH
32884: LD_INT 33
32886: ST_TO_ADDR
32887: GO 33023
32889: LD_INT 28
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32908
32897: POP
// bc_type := b_armoury ; 29 :
32898: LD_ADDR_OWVAR 42
32902: PUSH
32903: LD_INT 4
32905: ST_TO_ADDR
32906: GO 33023
32908: LD_INT 29
32910: DOUBLE
32911: EQUAL
32912: IFTRUE 32916
32914: GO 32927
32916: POP
// bc_type := b_barracks ; 30 :
32917: LD_ADDR_OWVAR 42
32921: PUSH
32922: LD_INT 5
32924: ST_TO_ADDR
32925: GO 33023
32927: LD_INT 30
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 32946
32935: POP
// bc_type := b_solar_power ; 31 :
32936: LD_ADDR_OWVAR 42
32940: PUSH
32941: LD_INT 27
32943: ST_TO_ADDR
32944: GO 33023
32946: LD_INT 31
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32954
32952: GO 32965
32954: POP
// bc_type := b_oil_power ; 32 :
32955: LD_ADDR_OWVAR 42
32959: PUSH
32960: LD_INT 26
32962: ST_TO_ADDR
32963: GO 33023
32965: LD_INT 32
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 32984
32973: POP
// bc_type := b_siberite_power ; 33 :
32974: LD_ADDR_OWVAR 42
32978: PUSH
32979: LD_INT 28
32981: ST_TO_ADDR
32982: GO 33023
32984: LD_INT 33
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33003
32992: POP
// bc_type := b_oil_mine ; 34 :
32993: LD_ADDR_OWVAR 42
32997: PUSH
32998: LD_INT 29
33000: ST_TO_ADDR
33001: GO 33023
33003: LD_INT 34
33005: DOUBLE
33006: EQUAL
33007: IFTRUE 33011
33009: GO 33022
33011: POP
// bc_type := b_siberite_mine ; end ;
33012: LD_ADDR_OWVAR 42
33016: PUSH
33017: LD_INT 30
33019: ST_TO_ADDR
33020: GO 33023
33022: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33023: LD_ADDR_VAR 0 8
33027: PUSH
33028: LD_VAR 0 5
33032: PPUSH
33033: LD_VAR 0 6
33037: PPUSH
33038: LD_VAR 0 3
33042: PPUSH
33043: CALL_OW 47
33047: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33048: LD_OWVAR 42
33052: PUSH
33053: LD_INT 32
33055: PUSH
33056: LD_INT 33
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: IN
33063: IFFALSE 33079
// PlaceWeaponTurret ( b , weapon ) ;
33065: LD_VAR 0 8
33069: PPUSH
33070: LD_VAR 0 4
33074: PPUSH
33075: CALL_OW 431
// end ;
33079: LD_VAR 0 7
33083: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33084: LD_INT 0
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33090: LD_ADDR_VAR 0 4
33094: PUSH
33095: LD_INT 22
33097: PUSH
33098: LD_OWVAR 2
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: LD_INT 30
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 30
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PPUSH
33139: CALL_OW 69
33143: ST_TO_ADDR
// if not tmp then
33144: LD_VAR 0 4
33148: NOT
33149: IFFALSE 33153
// exit ;
33151: GO 33212
// for i in tmp do
33153: LD_ADDR_VAR 0 2
33157: PUSH
33158: LD_VAR 0 4
33162: PUSH
33163: FOR_IN
33164: IFFALSE 33210
// for j = 1 to 3 do
33166: LD_ADDR_VAR 0 3
33170: PUSH
33171: DOUBLE
33172: LD_INT 1
33174: DEC
33175: ST_TO_ADDR
33176: LD_INT 3
33178: PUSH
33179: FOR_TO
33180: IFFALSE 33206
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33182: LD_VAR 0 2
33186: PPUSH
33187: CALL_OW 274
33191: PPUSH
33192: LD_VAR 0 3
33196: PPUSH
33197: LD_INT 99999
33199: PPUSH
33200: CALL_OW 277
33204: GO 33179
33206: POP
33207: POP
33208: GO 33163
33210: POP
33211: POP
// end ;
33212: LD_VAR 0 1
33216: RET
// export function hHackSetLevel10 ; var i , j ; begin
33217: LD_INT 0
33219: PPUSH
33220: PPUSH
33221: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33222: LD_ADDR_VAR 0 2
33226: PUSH
33227: LD_INT 21
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PPUSH
33237: CALL_OW 69
33241: PUSH
33242: FOR_IN
33243: IFFALSE 33295
// if IsSelected ( i ) then
33245: LD_VAR 0 2
33249: PPUSH
33250: CALL_OW 306
33254: IFFALSE 33293
// begin for j := 1 to 4 do
33256: LD_ADDR_VAR 0 3
33260: PUSH
33261: DOUBLE
33262: LD_INT 1
33264: DEC
33265: ST_TO_ADDR
33266: LD_INT 4
33268: PUSH
33269: FOR_TO
33270: IFFALSE 33291
// SetSkill ( i , j , 10 ) ;
33272: LD_VAR 0 2
33276: PPUSH
33277: LD_VAR 0 3
33281: PPUSH
33282: LD_INT 10
33284: PPUSH
33285: CALL_OW 237
33289: GO 33269
33291: POP
33292: POP
// end ;
33293: GO 33242
33295: POP
33296: POP
// end ;
33297: LD_VAR 0 1
33301: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33302: LD_INT 0
33304: PPUSH
33305: PPUSH
33306: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33307: LD_ADDR_VAR 0 2
33311: PUSH
33312: LD_INT 22
33314: PUSH
33315: LD_OWVAR 2
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 21
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PPUSH
33338: CALL_OW 69
33342: PUSH
33343: FOR_IN
33344: IFFALSE 33385
// begin for j := 1 to 4 do
33346: LD_ADDR_VAR 0 3
33350: PUSH
33351: DOUBLE
33352: LD_INT 1
33354: DEC
33355: ST_TO_ADDR
33356: LD_INT 4
33358: PUSH
33359: FOR_TO
33360: IFFALSE 33381
// SetSkill ( i , j , 10 ) ;
33362: LD_VAR 0 2
33366: PPUSH
33367: LD_VAR 0 3
33371: PPUSH
33372: LD_INT 10
33374: PPUSH
33375: CALL_OW 237
33379: GO 33359
33381: POP
33382: POP
// end ;
33383: GO 33343
33385: POP
33386: POP
// end ;
33387: LD_VAR 0 1
33391: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33392: LD_INT 0
33394: PPUSH
// uc_side := your_side ;
33395: LD_ADDR_OWVAR 20
33399: PUSH
33400: LD_OWVAR 2
33404: ST_TO_ADDR
// uc_nation := nation ;
33405: LD_ADDR_OWVAR 21
33409: PUSH
33410: LD_VAR 0 1
33414: ST_TO_ADDR
// InitHc ;
33415: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33419: LD_INT 0
33421: PPUSH
33422: LD_VAR 0 2
33426: PPUSH
33427: LD_VAR 0 3
33431: PPUSH
33432: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33436: LD_VAR 0 4
33440: PPUSH
33441: LD_VAR 0 5
33445: PPUSH
33446: CALL_OW 428
33450: PUSH
33451: LD_INT 0
33453: EQUAL
33454: IFFALSE 33478
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33456: CALL_OW 44
33460: PPUSH
33461: LD_VAR 0 4
33465: PPUSH
33466: LD_VAR 0 5
33470: PPUSH
33471: LD_INT 1
33473: PPUSH
33474: CALL_OW 48
// end ;
33478: LD_VAR 0 6
33482: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33483: LD_INT 0
33485: PPUSH
33486: PPUSH
// uc_side := your_side ;
33487: LD_ADDR_OWVAR 20
33491: PUSH
33492: LD_OWVAR 2
33496: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33497: LD_VAR 0 1
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: LD_INT 4
33513: PUSH
33514: LD_INT 5
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: IN
33524: IFFALSE 33536
// uc_nation := nation_american else
33526: LD_ADDR_OWVAR 21
33530: PUSH
33531: LD_INT 1
33533: ST_TO_ADDR
33534: GO 33579
// if chassis in [ 11 , 12 , 13 , 14 ] then
33536: LD_VAR 0 1
33540: PUSH
33541: LD_INT 11
33543: PUSH
33544: LD_INT 12
33546: PUSH
33547: LD_INT 13
33549: PUSH
33550: LD_INT 14
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: IN
33559: IFFALSE 33571
// uc_nation := nation_arabian else
33561: LD_ADDR_OWVAR 21
33565: PUSH
33566: LD_INT 2
33568: ST_TO_ADDR
33569: GO 33579
// uc_nation := nation_russian ;
33571: LD_ADDR_OWVAR 21
33575: PUSH
33576: LD_INT 3
33578: ST_TO_ADDR
// vc_chassis := chassis ;
33579: LD_ADDR_OWVAR 37
33583: PUSH
33584: LD_VAR 0 1
33588: ST_TO_ADDR
// vc_engine := engine ;
33589: LD_ADDR_OWVAR 39
33593: PUSH
33594: LD_VAR 0 2
33598: ST_TO_ADDR
// vc_control := control ;
33599: LD_ADDR_OWVAR 38
33603: PUSH
33604: LD_VAR 0 3
33608: ST_TO_ADDR
// vc_weapon := weapon ;
33609: LD_ADDR_OWVAR 40
33613: PUSH
33614: LD_VAR 0 4
33618: ST_TO_ADDR
// un := CreateVehicle ;
33619: LD_ADDR_VAR 0 8
33623: PUSH
33624: CALL_OW 45
33628: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33629: LD_VAR 0 8
33633: PPUSH
33634: LD_INT 0
33636: PPUSH
33637: LD_INT 5
33639: PPUSH
33640: CALL_OW 12
33644: PPUSH
33645: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33649: LD_VAR 0 8
33653: PPUSH
33654: LD_VAR 0 5
33658: PPUSH
33659: LD_VAR 0 6
33663: PPUSH
33664: LD_INT 1
33666: PPUSH
33667: CALL_OW 48
// end ;
33671: LD_VAR 0 7
33675: RET
// export hInvincible ; every 1 do
33676: GO 33678
33678: DISABLE
// hInvincible := [ ] ;
33679: LD_ADDR_EXP 95
33683: PUSH
33684: EMPTY
33685: ST_TO_ADDR
33686: END
// every 10 do var i ;
33687: GO 33689
33689: DISABLE
33690: LD_INT 0
33692: PPUSH
// begin enable ;
33693: ENABLE
// if not hInvincible then
33694: LD_EXP 95
33698: NOT
33699: IFFALSE 33703
// exit ;
33701: GO 33747
// for i in hInvincible do
33703: LD_ADDR_VAR 0 1
33707: PUSH
33708: LD_EXP 95
33712: PUSH
33713: FOR_IN
33714: IFFALSE 33745
// if GetLives ( i ) < 1000 then
33716: LD_VAR 0 1
33720: PPUSH
33721: CALL_OW 256
33725: PUSH
33726: LD_INT 1000
33728: LESS
33729: IFFALSE 33743
// SetLives ( i , 1000 ) ;
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_INT 1000
33738: PPUSH
33739: CALL_OW 234
33743: GO 33713
33745: POP
33746: POP
// end ;
33747: PPOPN 1
33749: END
// export function hHackInvincible ; var i ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33754: LD_ADDR_VAR 0 2
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 21
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 21
33774: PUSH
33775: LD_INT 2
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: PPUSH
33787: CALL_OW 69
33791: PUSH
33792: FOR_IN
33793: IFFALSE 33854
// if IsSelected ( i ) then
33795: LD_VAR 0 2
33799: PPUSH
33800: CALL_OW 306
33804: IFFALSE 33852
// begin if i in hInvincible then
33806: LD_VAR 0 2
33810: PUSH
33811: LD_EXP 95
33815: IN
33816: IFFALSE 33836
// hInvincible := hInvincible diff i else
33818: LD_ADDR_EXP 95
33822: PUSH
33823: LD_EXP 95
33827: PUSH
33828: LD_VAR 0 2
33832: DIFF
33833: ST_TO_ADDR
33834: GO 33852
// hInvincible := hInvincible union i ;
33836: LD_ADDR_EXP 95
33840: PUSH
33841: LD_EXP 95
33845: PUSH
33846: LD_VAR 0 2
33850: UNION
33851: ST_TO_ADDR
// end ;
33852: GO 33792
33854: POP
33855: POP
// end ;
33856: LD_VAR 0 1
33860: RET
// export function hHackInvisible ; var i , j ; begin
33861: LD_INT 0
33863: PPUSH
33864: PPUSH
33865: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33866: LD_ADDR_VAR 0 2
33870: PUSH
33871: LD_INT 21
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PPUSH
33881: CALL_OW 69
33885: PUSH
33886: FOR_IN
33887: IFFALSE 33911
// if IsSelected ( i ) then
33889: LD_VAR 0 2
33893: PPUSH
33894: CALL_OW 306
33898: IFFALSE 33909
// ComForceInvisible ( i ) ;
33900: LD_VAR 0 2
33904: PPUSH
33905: CALL_OW 496
33909: GO 33886
33911: POP
33912: POP
// end ;
33913: LD_VAR 0 1
33917: RET
// export function hHackChangeYourSide ; begin
33918: LD_INT 0
33920: PPUSH
// if your_side = 8 then
33921: LD_OWVAR 2
33925: PUSH
33926: LD_INT 8
33928: EQUAL
33929: IFFALSE 33941
// your_side := 0 else
33931: LD_ADDR_OWVAR 2
33935: PUSH
33936: LD_INT 0
33938: ST_TO_ADDR
33939: GO 33955
// your_side := your_side + 1 ;
33941: LD_ADDR_OWVAR 2
33945: PUSH
33946: LD_OWVAR 2
33950: PUSH
33951: LD_INT 1
33953: PLUS
33954: ST_TO_ADDR
// end ;
33955: LD_VAR 0 1
33959: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33960: LD_INT 0
33962: PPUSH
33963: PPUSH
33964: PPUSH
// for i in all_units do
33965: LD_ADDR_VAR 0 2
33969: PUSH
33970: LD_OWVAR 3
33974: PUSH
33975: FOR_IN
33976: IFFALSE 34054
// if IsSelected ( i ) then
33978: LD_VAR 0 2
33982: PPUSH
33983: CALL_OW 306
33987: IFFALSE 34052
// begin j := GetSide ( i ) ;
33989: LD_ADDR_VAR 0 3
33993: PUSH
33994: LD_VAR 0 2
33998: PPUSH
33999: CALL_OW 255
34003: ST_TO_ADDR
// if j = 8 then
34004: LD_VAR 0 3
34008: PUSH
34009: LD_INT 8
34011: EQUAL
34012: IFFALSE 34024
// j := 0 else
34014: LD_ADDR_VAR 0 3
34018: PUSH
34019: LD_INT 0
34021: ST_TO_ADDR
34022: GO 34038
// j := j + 1 ;
34024: LD_ADDR_VAR 0 3
34028: PUSH
34029: LD_VAR 0 3
34033: PUSH
34034: LD_INT 1
34036: PLUS
34037: ST_TO_ADDR
// SetSide ( i , j ) ;
34038: LD_VAR 0 2
34042: PPUSH
34043: LD_VAR 0 3
34047: PPUSH
34048: CALL_OW 235
// end ;
34052: GO 33975
34054: POP
34055: POP
// end ;
34056: LD_VAR 0 1
34060: RET
// export function hHackFog ; begin
34061: LD_INT 0
34063: PPUSH
// FogOff ( true ) ;
34064: LD_INT 1
34066: PPUSH
34067: CALL_OW 344
// end ;
34071: LD_VAR 0 1
34075: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34076: LD_INT 0
34078: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34079: LD_VAR 0 1
34083: PPUSH
34084: LD_VAR 0 2
34088: PPUSH
34089: LD_VAR 0 3
34093: PPUSH
34094: LD_INT 1
34096: PPUSH
34097: LD_INT 1
34099: PPUSH
34100: CALL_OW 483
// CenterOnXY ( x , y ) ;
34104: LD_VAR 0 2
34108: PPUSH
34109: LD_VAR 0 3
34113: PPUSH
34114: CALL_OW 84
// end ;
34118: LD_VAR 0 4
34122: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34127: LD_VAR 0 1
34131: NOT
34132: PUSH
34133: LD_VAR 0 2
34137: PPUSH
34138: LD_VAR 0 3
34142: PPUSH
34143: CALL_OW 488
34147: NOT
34148: OR
34149: PUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 266
34159: PUSH
34160: LD_INT 3
34162: NONEQUAL
34163: PUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 247
34173: PUSH
34174: LD_INT 1
34176: EQUAL
34177: NOT
34178: AND
34179: OR
34180: IFFALSE 34184
// exit ;
34182: GO 34333
// if GetType ( factory ) = unit_human then
34184: LD_VAR 0 1
34188: PPUSH
34189: CALL_OW 247
34193: PUSH
34194: LD_INT 1
34196: EQUAL
34197: IFFALSE 34214
// factory := IsInUnit ( factory ) ;
34199: LD_ADDR_VAR 0 1
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 310
34213: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34214: LD_VAR 0 1
34218: PPUSH
34219: CALL_OW 266
34223: PUSH
34224: LD_INT 3
34226: NONEQUAL
34227: IFFALSE 34231
// exit ;
34229: GO 34333
// if HexInfo ( x , y ) = factory then
34231: LD_VAR 0 2
34235: PPUSH
34236: LD_VAR 0 3
34240: PPUSH
34241: CALL_OW 428
34245: PUSH
34246: LD_VAR 0 1
34250: EQUAL
34251: IFFALSE 34278
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34253: LD_ADDR_EXP 96
34257: PUSH
34258: LD_EXP 96
34262: PPUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: LD_INT 0
34270: PPUSH
34271: CALL_OW 1
34275: ST_TO_ADDR
34276: GO 34329
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34278: LD_ADDR_EXP 96
34282: PUSH
34283: LD_EXP 96
34287: PPUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 255
34302: PUSH
34303: LD_VAR 0 1
34307: PUSH
34308: LD_VAR 0 2
34312: PUSH
34313: LD_VAR 0 3
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: PPUSH
34324: CALL_OW 1
34328: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34329: CALL 34338 0 0
// end ;
34333: LD_VAR 0 4
34337: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34338: LD_INT 0
34340: PPUSH
34341: PPUSH
34342: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34343: LD_STRING resetFactoryWaypoint();
34345: PPUSH
34346: CALL_OW 559
// if factoryWaypoints then
34350: LD_EXP 96
34354: IFFALSE 34480
// begin list := PrepareArray ( factoryWaypoints ) ;
34356: LD_ADDR_VAR 0 3
34360: PUSH
34361: LD_EXP 96
34365: PPUSH
34366: CALL 80949 0 1
34370: ST_TO_ADDR
// for i := 1 to list do
34371: LD_ADDR_VAR 0 2
34375: PUSH
34376: DOUBLE
34377: LD_INT 1
34379: DEC
34380: ST_TO_ADDR
34381: LD_VAR 0 3
34385: PUSH
34386: FOR_TO
34387: IFFALSE 34478
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34389: LD_STRING setFactoryWaypointXY(
34391: PUSH
34392: LD_VAR 0 3
34396: PUSH
34397: LD_VAR 0 2
34401: ARRAY
34402: PUSH
34403: LD_INT 1
34405: ARRAY
34406: STR
34407: PUSH
34408: LD_STRING ,
34410: STR
34411: PUSH
34412: LD_VAR 0 3
34416: PUSH
34417: LD_VAR 0 2
34421: ARRAY
34422: PUSH
34423: LD_INT 2
34425: ARRAY
34426: STR
34427: PUSH
34428: LD_STRING ,
34430: STR
34431: PUSH
34432: LD_VAR 0 3
34436: PUSH
34437: LD_VAR 0 2
34441: ARRAY
34442: PUSH
34443: LD_INT 3
34445: ARRAY
34446: STR
34447: PUSH
34448: LD_STRING ,
34450: STR
34451: PUSH
34452: LD_VAR 0 3
34456: PUSH
34457: LD_VAR 0 2
34461: ARRAY
34462: PUSH
34463: LD_INT 4
34465: ARRAY
34466: STR
34467: PUSH
34468: LD_STRING )
34470: STR
34471: PPUSH
34472: CALL_OW 559
34476: GO 34386
34478: POP
34479: POP
// end ; end ;
34480: LD_VAR 0 1
34484: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34485: LD_INT 0
34487: PPUSH
// if HexInfo ( x , y ) = warehouse then
34488: LD_VAR 0 2
34492: PPUSH
34493: LD_VAR 0 3
34497: PPUSH
34498: CALL_OW 428
34502: PUSH
34503: LD_VAR 0 1
34507: EQUAL
34508: IFFALSE 34535
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34510: LD_ADDR_EXP 97
34514: PUSH
34515: LD_EXP 97
34519: PPUSH
34520: LD_VAR 0 1
34524: PPUSH
34525: LD_INT 0
34527: PPUSH
34528: CALL_OW 1
34532: ST_TO_ADDR
34533: GO 34586
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34535: LD_ADDR_EXP 97
34539: PUSH
34540: LD_EXP 97
34544: PPUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 255
34559: PUSH
34560: LD_VAR 0 1
34564: PUSH
34565: LD_VAR 0 2
34569: PUSH
34570: LD_VAR 0 3
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: PPUSH
34581: CALL_OW 1
34585: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34586: CALL 34595 0 0
// end ;
34590: LD_VAR 0 4
34594: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34595: LD_INT 0
34597: PPUSH
34598: PPUSH
34599: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34600: LD_STRING resetWarehouseGatheringPoints();
34602: PPUSH
34603: CALL_OW 559
// if warehouseGatheringPoints then
34607: LD_EXP 97
34611: IFFALSE 34737
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_EXP 97
34622: PPUSH
34623: CALL 80949 0 1
34627: ST_TO_ADDR
// for i := 1 to list do
34628: LD_ADDR_VAR 0 2
34632: PUSH
34633: DOUBLE
34634: LD_INT 1
34636: DEC
34637: ST_TO_ADDR
34638: LD_VAR 0 3
34642: PUSH
34643: FOR_TO
34644: IFFALSE 34735
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34646: LD_STRING setWarehouseGatheringPointXY(
34648: PUSH
34649: LD_VAR 0 3
34653: PUSH
34654: LD_VAR 0 2
34658: ARRAY
34659: PUSH
34660: LD_INT 1
34662: ARRAY
34663: STR
34664: PUSH
34665: LD_STRING ,
34667: STR
34668: PUSH
34669: LD_VAR 0 3
34673: PUSH
34674: LD_VAR 0 2
34678: ARRAY
34679: PUSH
34680: LD_INT 2
34682: ARRAY
34683: STR
34684: PUSH
34685: LD_STRING ,
34687: STR
34688: PUSH
34689: LD_VAR 0 3
34693: PUSH
34694: LD_VAR 0 2
34698: ARRAY
34699: PUSH
34700: LD_INT 3
34702: ARRAY
34703: STR
34704: PUSH
34705: LD_STRING ,
34707: STR
34708: PUSH
34709: LD_VAR 0 3
34713: PUSH
34714: LD_VAR 0 2
34718: ARRAY
34719: PUSH
34720: LD_INT 4
34722: ARRAY
34723: STR
34724: PUSH
34725: LD_STRING )
34727: STR
34728: PPUSH
34729: CALL_OW 559
34733: GO 34643
34735: POP
34736: POP
// end ; end ;
34737: LD_VAR 0 1
34741: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34742: LD_EXP 97
34746: IFFALSE 35431
34748: GO 34750
34750: DISABLE
34751: LD_INT 0
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
// begin enable ;
34762: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34763: LD_ADDR_VAR 0 3
34767: PUSH
34768: LD_EXP 97
34772: PPUSH
34773: CALL 80949 0 1
34777: ST_TO_ADDR
// if not list then
34778: LD_VAR 0 3
34782: NOT
34783: IFFALSE 34787
// exit ;
34785: GO 35431
// for i := 1 to list do
34787: LD_ADDR_VAR 0 1
34791: PUSH
34792: DOUBLE
34793: LD_INT 1
34795: DEC
34796: ST_TO_ADDR
34797: LD_VAR 0 3
34801: PUSH
34802: FOR_TO
34803: IFFALSE 35429
// begin depot := list [ i ] [ 2 ] ;
34805: LD_ADDR_VAR 0 8
34809: PUSH
34810: LD_VAR 0 3
34814: PUSH
34815: LD_VAR 0 1
34819: ARRAY
34820: PUSH
34821: LD_INT 2
34823: ARRAY
34824: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34825: LD_ADDR_VAR 0 5
34829: PUSH
34830: LD_VAR 0 3
34834: PUSH
34835: LD_VAR 0 1
34839: ARRAY
34840: PUSH
34841: LD_INT 1
34843: ARRAY
34844: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34845: LD_VAR 0 8
34849: PPUSH
34850: CALL_OW 301
34854: PUSH
34855: LD_VAR 0 5
34859: PUSH
34860: LD_VAR 0 8
34864: PPUSH
34865: CALL_OW 255
34869: NONEQUAL
34870: OR
34871: IFFALSE 34900
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34873: LD_ADDR_EXP 97
34877: PUSH
34878: LD_EXP 97
34882: PPUSH
34883: LD_VAR 0 8
34887: PPUSH
34888: LD_INT 0
34890: PPUSH
34891: CALL_OW 1
34895: ST_TO_ADDR
// exit ;
34896: POP
34897: POP
34898: GO 35431
// end ; x := list [ i ] [ 3 ] ;
34900: LD_ADDR_VAR 0 6
34904: PUSH
34905: LD_VAR 0 3
34909: PUSH
34910: LD_VAR 0 1
34914: ARRAY
34915: PUSH
34916: LD_INT 3
34918: ARRAY
34919: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34920: LD_ADDR_VAR 0 7
34924: PUSH
34925: LD_VAR 0 3
34929: PUSH
34930: LD_VAR 0 1
34934: ARRAY
34935: PUSH
34936: LD_INT 4
34938: ARRAY
34939: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34940: LD_ADDR_VAR 0 9
34944: PUSH
34945: LD_VAR 0 6
34949: PPUSH
34950: LD_VAR 0 7
34954: PPUSH
34955: LD_INT 16
34957: PPUSH
34958: CALL 79537 0 3
34962: ST_TO_ADDR
// if not cratesNearbyPoint then
34963: LD_VAR 0 9
34967: NOT
34968: IFFALSE 34974
// exit ;
34970: POP
34971: POP
34972: GO 35431
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34974: LD_ADDR_VAR 0 4
34978: PUSH
34979: LD_INT 22
34981: PUSH
34982: LD_VAR 0 5
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 60
34996: PUSH
34997: EMPTY
34998: LIST
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 91
35006: PUSH
35007: LD_VAR 0 8
35011: PUSH
35012: LD_INT 6
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 25
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 25
35035: PUSH
35036: LD_INT 16
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: PPUSH
35054: CALL_OW 69
35058: PUSH
35059: LD_VAR 0 8
35063: PPUSH
35064: CALL_OW 313
35068: PPUSH
35069: LD_INT 3
35071: PUSH
35072: LD_INT 60
35074: PUSH
35075: EMPTY
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 25
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 25
35097: PUSH
35098: LD_INT 16
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PPUSH
35114: CALL_OW 72
35118: UNION
35119: ST_TO_ADDR
// if tmp then
35120: LD_VAR 0 4
35124: IFFALSE 35204
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35126: LD_ADDR_VAR 0 4
35130: PUSH
35131: LD_VAR 0 4
35135: PPUSH
35136: LD_INT 3
35138: PPUSH
35139: CALL 77506 0 2
35143: ST_TO_ADDR
// for j in tmp do
35144: LD_ADDR_VAR 0 2
35148: PUSH
35149: LD_VAR 0 4
35153: PUSH
35154: FOR_IN
35155: IFFALSE 35198
// begin if IsInUnit ( j ) then
35157: LD_VAR 0 2
35161: PPUSH
35162: CALL_OW 310
35166: IFFALSE 35177
// ComExit ( j ) ;
35168: LD_VAR 0 2
35172: PPUSH
35173: CALL 77589 0 1
// AddComCollect ( j , x , y ) ;
35177: LD_VAR 0 2
35181: PPUSH
35182: LD_VAR 0 6
35186: PPUSH
35187: LD_VAR 0 7
35191: PPUSH
35192: CALL_OW 177
// end ;
35196: GO 35154
35198: POP
35199: POP
// exit ;
35200: POP
35201: POP
35202: GO 35431
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35204: LD_ADDR_VAR 0 4
35208: PUSH
35209: LD_INT 22
35211: PUSH
35212: LD_VAR 0 5
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 91
35223: PUSH
35224: LD_VAR 0 8
35228: PUSH
35229: LD_INT 8
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 34
35242: PUSH
35243: LD_INT 12
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 34
35252: PUSH
35253: LD_INT 51
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 34
35262: PUSH
35263: LD_INT 32
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 34
35272: PUSH
35273: LD_INT 89
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: PPUSH
35292: CALL_OW 69
35296: ST_TO_ADDR
// if tmp then
35297: LD_VAR 0 4
35301: IFFALSE 35427
// begin for j in tmp do
35303: LD_ADDR_VAR 0 2
35307: PUSH
35308: LD_VAR 0 4
35312: PUSH
35313: FOR_IN
35314: IFFALSE 35425
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35316: LD_VAR 0 2
35320: PPUSH
35321: CALL_OW 262
35325: PUSH
35326: LD_INT 3
35328: EQUAL
35329: PUSH
35330: LD_VAR 0 2
35334: PPUSH
35335: CALL_OW 261
35339: PUSH
35340: LD_INT 20
35342: GREATER
35343: OR
35344: PUSH
35345: LD_VAR 0 2
35349: PPUSH
35350: CALL_OW 314
35354: NOT
35355: AND
35356: PUSH
35357: LD_VAR 0 2
35361: PPUSH
35362: CALL_OW 263
35366: PUSH
35367: LD_INT 1
35369: NONEQUAL
35370: PUSH
35371: LD_VAR 0 2
35375: PPUSH
35376: CALL_OW 311
35380: OR
35381: AND
35382: IFFALSE 35423
// begin ComCollect ( j , x , y ) ;
35384: LD_VAR 0 2
35388: PPUSH
35389: LD_VAR 0 6
35393: PPUSH
35394: LD_VAR 0 7
35398: PPUSH
35399: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35403: LD_VAR 0 2
35407: PPUSH
35408: LD_VAR 0 8
35412: PPUSH
35413: CALL_OW 172
// exit ;
35417: POP
35418: POP
35419: POP
35420: POP
35421: GO 35431
// end ;
35423: GO 35313
35425: POP
35426: POP
// end ; end ;
35427: GO 34802
35429: POP
35430: POP
// end ; end_of_file
35431: PPOPN 9
35433: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35434: LD_INT 0
35436: PPUSH
35437: PPUSH
35438: PPUSH
35439: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 264
35449: PUSH
35450: LD_INT 91
35452: EQUAL
35453: IFFALSE 35525
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35455: LD_INT 68
35457: PPUSH
35458: LD_VAR 0 1
35462: PPUSH
35463: CALL_OW 255
35467: PPUSH
35468: CALL_OW 321
35472: PUSH
35473: LD_INT 2
35475: EQUAL
35476: IFFALSE 35488
// eff := 70 else
35478: LD_ADDR_VAR 0 4
35482: PUSH
35483: LD_INT 70
35485: ST_TO_ADDR
35486: GO 35496
// eff := 30 ;
35488: LD_ADDR_VAR 0 4
35492: PUSH
35493: LD_INT 30
35495: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35496: LD_VAR 0 1
35500: PPUSH
35501: CALL_OW 250
35505: PPUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 251
35515: PPUSH
35516: LD_VAR 0 4
35520: PPUSH
35521: CALL_OW 495
// end ; end ;
35525: LD_VAR 0 2
35529: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35530: LD_INT 0
35532: PPUSH
// end ;
35533: LD_VAR 0 4
35537: RET
// export function SOS_Command ( cmd ) ; begin
35538: LD_INT 0
35540: PPUSH
// end ;
35541: LD_VAR 0 2
35545: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35546: LD_INT 0
35548: PPUSH
// end ;
35549: LD_VAR 0 6
35553: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35554: LD_INT 0
35556: PPUSH
35557: PPUSH
// if not vehicle or not factory then
35558: LD_VAR 0 1
35562: NOT
35563: PUSH
35564: LD_VAR 0 2
35568: NOT
35569: OR
35570: IFFALSE 35574
// exit ;
35572: GO 35805
// if factoryWaypoints >= factory then
35574: LD_EXP 96
35578: PUSH
35579: LD_VAR 0 2
35583: GREATEREQUAL
35584: IFFALSE 35805
// if factoryWaypoints [ factory ] then
35586: LD_EXP 96
35590: PUSH
35591: LD_VAR 0 2
35595: ARRAY
35596: IFFALSE 35805
// begin if GetControl ( vehicle ) = control_manual then
35598: LD_VAR 0 1
35602: PPUSH
35603: CALL_OW 263
35607: PUSH
35608: LD_INT 1
35610: EQUAL
35611: IFFALSE 35692
// begin driver := IsDrivenBy ( vehicle ) ;
35613: LD_ADDR_VAR 0 4
35617: PUSH
35618: LD_VAR 0 1
35622: PPUSH
35623: CALL_OW 311
35627: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35628: LD_VAR 0 4
35632: PPUSH
35633: LD_EXP 96
35637: PUSH
35638: LD_VAR 0 2
35642: ARRAY
35643: PUSH
35644: LD_INT 3
35646: ARRAY
35647: PPUSH
35648: LD_EXP 96
35652: PUSH
35653: LD_VAR 0 2
35657: ARRAY
35658: PUSH
35659: LD_INT 4
35661: ARRAY
35662: PPUSH
35663: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35667: LD_VAR 0 4
35671: PPUSH
35672: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35676: LD_VAR 0 4
35680: PPUSH
35681: LD_VAR 0 2
35685: PPUSH
35686: CALL_OW 180
// end else
35690: GO 35805
// if GetControl ( vehicle ) = control_remote then
35692: LD_VAR 0 1
35696: PPUSH
35697: CALL_OW 263
35701: PUSH
35702: LD_INT 2
35704: EQUAL
35705: IFFALSE 35766
// begin wait ( 0 0$2 ) ;
35707: LD_INT 70
35709: PPUSH
35710: CALL_OW 67
// if Connect ( vehicle ) then
35714: LD_VAR 0 1
35718: PPUSH
35719: CALL 47829 0 1
35723: IFFALSE 35764
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35725: LD_VAR 0 1
35729: PPUSH
35730: LD_EXP 96
35734: PUSH
35735: LD_VAR 0 2
35739: ARRAY
35740: PUSH
35741: LD_INT 3
35743: ARRAY
35744: PPUSH
35745: LD_EXP 96
35749: PUSH
35750: LD_VAR 0 2
35754: ARRAY
35755: PUSH
35756: LD_INT 4
35758: ARRAY
35759: PPUSH
35760: CALL_OW 171
// end else
35764: GO 35805
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35766: LD_VAR 0 1
35770: PPUSH
35771: LD_EXP 96
35775: PUSH
35776: LD_VAR 0 2
35780: ARRAY
35781: PUSH
35782: LD_INT 3
35784: ARRAY
35785: PPUSH
35786: LD_EXP 96
35790: PUSH
35791: LD_VAR 0 2
35795: ARRAY
35796: PUSH
35797: LD_INT 4
35799: ARRAY
35800: PPUSH
35801: CALL_OW 171
// end ; end ;
35805: LD_VAR 0 3
35809: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35810: LD_INT 0
35812: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35813: LD_VAR 0 1
35817: PUSH
35818: LD_INT 250
35820: EQUAL
35821: PUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL_OW 264
35831: PUSH
35832: LD_INT 81
35834: EQUAL
35835: AND
35836: IFFALSE 35857
// MinerPlaceMine ( unit , x , y ) ;
35838: LD_VAR 0 2
35842: PPUSH
35843: LD_VAR 0 4
35847: PPUSH
35848: LD_VAR 0 5
35852: PPUSH
35853: CALL 38242 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35857: LD_VAR 0 1
35861: PUSH
35862: LD_INT 251
35864: EQUAL
35865: PUSH
35866: LD_VAR 0 2
35870: PPUSH
35871: CALL_OW 264
35875: PUSH
35876: LD_INT 81
35878: EQUAL
35879: AND
35880: IFFALSE 35901
// MinerDetonateMine ( unit , x , y ) ;
35882: LD_VAR 0 2
35886: PPUSH
35887: LD_VAR 0 4
35891: PPUSH
35892: LD_VAR 0 5
35896: PPUSH
35897: CALL 38517 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35901: LD_VAR 0 1
35905: PUSH
35906: LD_INT 252
35908: EQUAL
35909: PUSH
35910: LD_VAR 0 2
35914: PPUSH
35915: CALL_OW 264
35919: PUSH
35920: LD_INT 81
35922: EQUAL
35923: AND
35924: IFFALSE 35945
// MinerCreateMinefield ( unit , x , y ) ;
35926: LD_VAR 0 2
35930: PPUSH
35931: LD_VAR 0 4
35935: PPUSH
35936: LD_VAR 0 5
35940: PPUSH
35941: CALL 38934 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35945: LD_VAR 0 1
35949: PUSH
35950: LD_INT 253
35952: EQUAL
35953: PUSH
35954: LD_VAR 0 2
35958: PPUSH
35959: CALL_OW 257
35963: PUSH
35964: LD_INT 5
35966: EQUAL
35967: AND
35968: IFFALSE 35989
// ComBinocular ( unit , x , y ) ;
35970: LD_VAR 0 2
35974: PPUSH
35975: LD_VAR 0 4
35979: PPUSH
35980: LD_VAR 0 5
35984: PPUSH
35985: CALL 39303 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35989: LD_VAR 0 1
35993: PUSH
35994: LD_INT 254
35996: EQUAL
35997: PUSH
35998: LD_VAR 0 2
36002: PPUSH
36003: CALL_OW 264
36007: PUSH
36008: LD_INT 99
36010: EQUAL
36011: AND
36012: PUSH
36013: LD_VAR 0 3
36017: PPUSH
36018: CALL_OW 263
36022: PUSH
36023: LD_INT 3
36025: EQUAL
36026: AND
36027: IFFALSE 36043
// HackDestroyVehicle ( unit , selectedUnit ) ;
36029: LD_VAR 0 2
36033: PPUSH
36034: LD_VAR 0 3
36038: PPUSH
36039: CALL 37606 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36043: LD_VAR 0 1
36047: PUSH
36048: LD_INT 255
36050: EQUAL
36051: PUSH
36052: LD_VAR 0 2
36056: PPUSH
36057: CALL_OW 264
36061: PUSH
36062: LD_INT 14
36064: PUSH
36065: LD_INT 53
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: IN
36072: AND
36073: PUSH
36074: LD_VAR 0 4
36078: PPUSH
36079: LD_VAR 0 5
36083: PPUSH
36084: CALL_OW 488
36088: AND
36089: IFFALSE 36113
// CutTreeXYR ( unit , x , y , 12 ) ;
36091: LD_VAR 0 2
36095: PPUSH
36096: LD_VAR 0 4
36100: PPUSH
36101: LD_VAR 0 5
36105: PPUSH
36106: LD_INT 12
36108: PPUSH
36109: CALL 36176 0 4
// if cmd = 256 then
36113: LD_VAR 0 1
36117: PUSH
36118: LD_INT 256
36120: EQUAL
36121: IFFALSE 36142
// SetFactoryWaypoint ( unit , x , y ) ;
36123: LD_VAR 0 2
36127: PPUSH
36128: LD_VAR 0 4
36132: PPUSH
36133: LD_VAR 0 5
36137: PPUSH
36138: CALL 34123 0 3
// if cmd = 257 then
36142: LD_VAR 0 1
36146: PUSH
36147: LD_INT 257
36149: EQUAL
36150: IFFALSE 36171
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36152: LD_VAR 0 2
36156: PPUSH
36157: LD_VAR 0 4
36161: PPUSH
36162: LD_VAR 0 5
36166: PPUSH
36167: CALL 34485 0 3
// end ;
36171: LD_VAR 0 6
36175: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36176: LD_INT 0
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36187: LD_VAR 0 1
36191: NOT
36192: PUSH
36193: LD_VAR 0 2
36197: PPUSH
36198: LD_VAR 0 3
36202: PPUSH
36203: CALL_OW 488
36207: NOT
36208: OR
36209: PUSH
36210: LD_VAR 0 4
36214: NOT
36215: OR
36216: IFFALSE 36220
// exit ;
36218: GO 36560
// list := [ ] ;
36220: LD_ADDR_VAR 0 13
36224: PUSH
36225: EMPTY
36226: ST_TO_ADDR
// if x - r < 0 then
36227: LD_VAR 0 2
36231: PUSH
36232: LD_VAR 0 4
36236: MINUS
36237: PUSH
36238: LD_INT 0
36240: LESS
36241: IFFALSE 36253
// min_x := 0 else
36243: LD_ADDR_VAR 0 7
36247: PUSH
36248: LD_INT 0
36250: ST_TO_ADDR
36251: GO 36269
// min_x := x - r ;
36253: LD_ADDR_VAR 0 7
36257: PUSH
36258: LD_VAR 0 2
36262: PUSH
36263: LD_VAR 0 4
36267: MINUS
36268: ST_TO_ADDR
// if y - r < 0 then
36269: LD_VAR 0 3
36273: PUSH
36274: LD_VAR 0 4
36278: MINUS
36279: PUSH
36280: LD_INT 0
36282: LESS
36283: IFFALSE 36295
// min_y := 0 else
36285: LD_ADDR_VAR 0 8
36289: PUSH
36290: LD_INT 0
36292: ST_TO_ADDR
36293: GO 36311
// min_y := y - r ;
36295: LD_ADDR_VAR 0 8
36299: PUSH
36300: LD_VAR 0 3
36304: PUSH
36305: LD_VAR 0 4
36309: MINUS
36310: ST_TO_ADDR
// max_x := x + r ;
36311: LD_ADDR_VAR 0 9
36315: PUSH
36316: LD_VAR 0 2
36320: PUSH
36321: LD_VAR 0 4
36325: PLUS
36326: ST_TO_ADDR
// max_y := y + r ;
36327: LD_ADDR_VAR 0 10
36331: PUSH
36332: LD_VAR 0 3
36336: PUSH
36337: LD_VAR 0 4
36341: PLUS
36342: ST_TO_ADDR
// for _x = min_x to max_x do
36343: LD_ADDR_VAR 0 11
36347: PUSH
36348: DOUBLE
36349: LD_VAR 0 7
36353: DEC
36354: ST_TO_ADDR
36355: LD_VAR 0 9
36359: PUSH
36360: FOR_TO
36361: IFFALSE 36478
// for _y = min_y to max_y do
36363: LD_ADDR_VAR 0 12
36367: PUSH
36368: DOUBLE
36369: LD_VAR 0 8
36373: DEC
36374: ST_TO_ADDR
36375: LD_VAR 0 10
36379: PUSH
36380: FOR_TO
36381: IFFALSE 36474
// begin if not ValidHex ( _x , _y ) then
36383: LD_VAR 0 11
36387: PPUSH
36388: LD_VAR 0 12
36392: PPUSH
36393: CALL_OW 488
36397: NOT
36398: IFFALSE 36402
// continue ;
36400: GO 36380
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36402: LD_VAR 0 11
36406: PPUSH
36407: LD_VAR 0 12
36411: PPUSH
36412: CALL_OW 351
36416: PUSH
36417: LD_VAR 0 11
36421: PPUSH
36422: LD_VAR 0 12
36426: PPUSH
36427: CALL_OW 554
36431: AND
36432: IFFALSE 36472
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36434: LD_ADDR_VAR 0 13
36438: PUSH
36439: LD_VAR 0 13
36443: PPUSH
36444: LD_VAR 0 13
36448: PUSH
36449: LD_INT 1
36451: PLUS
36452: PPUSH
36453: LD_VAR 0 11
36457: PUSH
36458: LD_VAR 0 12
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PPUSH
36467: CALL_OW 2
36471: ST_TO_ADDR
// end ;
36472: GO 36380
36474: POP
36475: POP
36476: GO 36360
36478: POP
36479: POP
// if not list then
36480: LD_VAR 0 13
36484: NOT
36485: IFFALSE 36489
// exit ;
36487: GO 36560
// for i in list do
36489: LD_ADDR_VAR 0 6
36493: PUSH
36494: LD_VAR 0 13
36498: PUSH
36499: FOR_IN
36500: IFFALSE 36558
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_STRING M
36509: PUSH
36510: LD_VAR 0 6
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: PUSH
36519: LD_VAR 0 6
36523: PUSH
36524: LD_INT 2
36526: ARRAY
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: PPUSH
36552: CALL_OW 447
36556: GO 36499
36558: POP
36559: POP
// end ;
36560: LD_VAR 0 5
36564: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36565: LD_EXP 99
36569: NOT
36570: IFFALSE 36620
36572: GO 36574
36574: DISABLE
// begin initHack := true ;
36575: LD_ADDR_EXP 99
36579: PUSH
36580: LD_INT 1
36582: ST_TO_ADDR
// hackTanks := [ ] ;
36583: LD_ADDR_EXP 100
36587: PUSH
36588: EMPTY
36589: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36590: LD_ADDR_EXP 101
36594: PUSH
36595: EMPTY
36596: ST_TO_ADDR
// hackLimit := 3 ;
36597: LD_ADDR_EXP 102
36601: PUSH
36602: LD_INT 3
36604: ST_TO_ADDR
// hackDist := 12 ;
36605: LD_ADDR_EXP 103
36609: PUSH
36610: LD_INT 12
36612: ST_TO_ADDR
// hackCounter := [ ] ;
36613: LD_ADDR_EXP 104
36617: PUSH
36618: EMPTY
36619: ST_TO_ADDR
// end ;
36620: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36621: LD_EXP 99
36625: PUSH
36626: LD_INT 34
36628: PUSH
36629: LD_INT 99
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PPUSH
36636: CALL_OW 69
36640: AND
36641: IFFALSE 36894
36643: GO 36645
36645: DISABLE
36646: LD_INT 0
36648: PPUSH
36649: PPUSH
// begin enable ;
36650: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36651: LD_ADDR_VAR 0 1
36655: PUSH
36656: LD_INT 34
36658: PUSH
36659: LD_INT 99
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PPUSH
36666: CALL_OW 69
36670: PUSH
36671: FOR_IN
36672: IFFALSE 36892
// begin if not i in hackTanks then
36674: LD_VAR 0 1
36678: PUSH
36679: LD_EXP 100
36683: IN
36684: NOT
36685: IFFALSE 36768
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36687: LD_ADDR_EXP 100
36691: PUSH
36692: LD_EXP 100
36696: PPUSH
36697: LD_EXP 100
36701: PUSH
36702: LD_INT 1
36704: PLUS
36705: PPUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 1
36715: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36716: LD_ADDR_EXP 101
36720: PUSH
36721: LD_EXP 101
36725: PPUSH
36726: LD_EXP 101
36730: PUSH
36731: LD_INT 1
36733: PLUS
36734: PPUSH
36735: EMPTY
36736: PPUSH
36737: CALL_OW 1
36741: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36742: LD_ADDR_EXP 104
36746: PUSH
36747: LD_EXP 104
36751: PPUSH
36752: LD_EXP 104
36756: PUSH
36757: LD_INT 1
36759: PLUS
36760: PPUSH
36761: EMPTY
36762: PPUSH
36763: CALL_OW 1
36767: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36768: LD_VAR 0 1
36772: PPUSH
36773: CALL_OW 302
36777: NOT
36778: IFFALSE 36791
// begin HackUnlinkAll ( i ) ;
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL 36897 0 1
// continue ;
36789: GO 36671
// end ; HackCheckCapturedStatus ( i ) ;
36791: LD_VAR 0 1
36795: PPUSH
36796: CALL 37340 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36800: LD_ADDR_VAR 0 2
36804: PUSH
36805: LD_INT 81
36807: PUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 255
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 33
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 91
36834: PUSH
36835: LD_VAR 0 1
36839: PUSH
36840: LD_EXP 103
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 50
36852: PUSH
36853: EMPTY
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: PPUSH
36862: CALL_OW 69
36866: ST_TO_ADDR
// if not tmp then
36867: LD_VAR 0 2
36871: NOT
36872: IFFALSE 36876
// continue ;
36874: GO 36671
// HackLink ( i , tmp ) ;
36876: LD_VAR 0 1
36880: PPUSH
36881: LD_VAR 0 2
36885: PPUSH
36886: CALL 37033 0 2
// end ;
36890: GO 36671
36892: POP
36893: POP
// end ;
36894: PPOPN 2
36896: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36897: LD_INT 0
36899: PPUSH
36900: PPUSH
36901: PPUSH
// if not hack in hackTanks then
36902: LD_VAR 0 1
36906: PUSH
36907: LD_EXP 100
36911: IN
36912: NOT
36913: IFFALSE 36917
// exit ;
36915: GO 37028
// index := GetElementIndex ( hackTanks , hack ) ;
36917: LD_ADDR_VAR 0 4
36921: PUSH
36922: LD_EXP 100
36926: PPUSH
36927: LD_VAR 0 1
36931: PPUSH
36932: CALL 44645 0 2
36936: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36937: LD_EXP 101
36941: PUSH
36942: LD_VAR 0 4
36946: ARRAY
36947: IFFALSE 37028
// begin for i in hackTanksCaptured [ index ] do
36949: LD_ADDR_VAR 0 3
36953: PUSH
36954: LD_EXP 101
36958: PUSH
36959: LD_VAR 0 4
36963: ARRAY
36964: PUSH
36965: FOR_IN
36966: IFFALSE 36992
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36968: LD_VAR 0 3
36972: PUSH
36973: LD_INT 1
36975: ARRAY
36976: PPUSH
36977: LD_VAR 0 3
36981: PUSH
36982: LD_INT 2
36984: ARRAY
36985: PPUSH
36986: CALL_OW 235
36990: GO 36965
36992: POP
36993: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36994: LD_ADDR_EXP 101
36998: PUSH
36999: LD_EXP 101
37003: PPUSH
37004: LD_VAR 0 4
37008: PPUSH
37009: EMPTY
37010: PPUSH
37011: CALL_OW 1
37015: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37016: LD_VAR 0 1
37020: PPUSH
37021: LD_INT 0
37023: PPUSH
37024: CALL_OW 505
// end ; end ;
37028: LD_VAR 0 2
37032: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
// if not hack in hackTanks or not vehicles then
37038: LD_VAR 0 1
37042: PUSH
37043: LD_EXP 100
37047: IN
37048: NOT
37049: PUSH
37050: LD_VAR 0 2
37054: NOT
37055: OR
37056: IFFALSE 37060
// exit ;
37058: GO 37335
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37060: LD_ADDR_VAR 0 2
37064: PUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: LD_VAR 0 2
37074: PPUSH
37075: LD_INT 1
37077: PPUSH
37078: LD_INT 1
37080: PPUSH
37081: CALL 45295 0 4
37085: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37086: LD_ADDR_VAR 0 5
37090: PUSH
37091: LD_EXP 100
37095: PPUSH
37096: LD_VAR 0 1
37100: PPUSH
37101: CALL 44645 0 2
37105: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37106: LD_EXP 101
37110: PUSH
37111: LD_VAR 0 5
37115: ARRAY
37116: PUSH
37117: LD_EXP 102
37121: LESS
37122: IFFALSE 37311
// begin for i := 1 to vehicles do
37124: LD_ADDR_VAR 0 4
37128: PUSH
37129: DOUBLE
37130: LD_INT 1
37132: DEC
37133: ST_TO_ADDR
37134: LD_VAR 0 2
37138: PUSH
37139: FOR_TO
37140: IFFALSE 37309
// begin if hackTanksCaptured [ index ] = hackLimit then
37142: LD_EXP 101
37146: PUSH
37147: LD_VAR 0 5
37151: ARRAY
37152: PUSH
37153: LD_EXP 102
37157: EQUAL
37158: IFFALSE 37162
// break ;
37160: GO 37309
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37162: LD_ADDR_EXP 104
37166: PUSH
37167: LD_EXP 104
37171: PPUSH
37172: LD_VAR 0 5
37176: PPUSH
37177: LD_EXP 104
37181: PUSH
37182: LD_VAR 0 5
37186: ARRAY
37187: PUSH
37188: LD_INT 1
37190: PLUS
37191: PPUSH
37192: CALL_OW 1
37196: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37197: LD_ADDR_EXP 101
37201: PUSH
37202: LD_EXP 101
37206: PPUSH
37207: LD_VAR 0 5
37211: PUSH
37212: LD_EXP 101
37216: PUSH
37217: LD_VAR 0 5
37221: ARRAY
37222: PUSH
37223: LD_INT 1
37225: PLUS
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PPUSH
37231: LD_VAR 0 2
37235: PUSH
37236: LD_VAR 0 4
37240: ARRAY
37241: PUSH
37242: LD_VAR 0 2
37246: PUSH
37247: LD_VAR 0 4
37251: ARRAY
37252: PPUSH
37253: CALL_OW 255
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PPUSH
37262: CALL 44860 0 3
37266: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37267: LD_VAR 0 2
37271: PUSH
37272: LD_VAR 0 4
37276: ARRAY
37277: PPUSH
37278: LD_VAR 0 1
37282: PPUSH
37283: CALL_OW 255
37287: PPUSH
37288: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37292: LD_VAR 0 2
37296: PUSH
37297: LD_VAR 0 4
37301: ARRAY
37302: PPUSH
37303: CALL_OW 141
// end ;
37307: GO 37139
37309: POP
37310: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37311: LD_VAR 0 1
37315: PPUSH
37316: LD_EXP 101
37320: PUSH
37321: LD_VAR 0 5
37325: ARRAY
37326: PUSH
37327: LD_INT 0
37329: PLUS
37330: PPUSH
37331: CALL_OW 505
// end ;
37335: LD_VAR 0 3
37339: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
// if not hack in hackTanks then
37346: LD_VAR 0 1
37350: PUSH
37351: LD_EXP 100
37355: IN
37356: NOT
37357: IFFALSE 37361
// exit ;
37359: GO 37601
// index := GetElementIndex ( hackTanks , hack ) ;
37361: LD_ADDR_VAR 0 4
37365: PUSH
37366: LD_EXP 100
37370: PPUSH
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL 44645 0 2
37380: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37381: LD_ADDR_VAR 0 3
37385: PUSH
37386: DOUBLE
37387: LD_EXP 101
37391: PUSH
37392: LD_VAR 0 4
37396: ARRAY
37397: INC
37398: ST_TO_ADDR
37399: LD_INT 1
37401: PUSH
37402: FOR_DOWNTO
37403: IFFALSE 37575
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37405: LD_ADDR_VAR 0 5
37409: PUSH
37410: LD_EXP 101
37414: PUSH
37415: LD_VAR 0 4
37419: ARRAY
37420: PUSH
37421: LD_VAR 0 3
37425: ARRAY
37426: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37427: LD_VAR 0 5
37431: PUSH
37432: LD_INT 1
37434: ARRAY
37435: PPUSH
37436: CALL_OW 302
37440: NOT
37441: PUSH
37442: LD_VAR 0 5
37446: PUSH
37447: LD_INT 1
37449: ARRAY
37450: PPUSH
37451: CALL_OW 255
37455: PUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL_OW 255
37465: NONEQUAL
37466: OR
37467: IFFALSE 37573
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37469: LD_VAR 0 5
37473: PUSH
37474: LD_INT 1
37476: ARRAY
37477: PPUSH
37478: CALL_OW 305
37482: PUSH
37483: LD_VAR 0 5
37487: PUSH
37488: LD_INT 1
37490: ARRAY
37491: PPUSH
37492: CALL_OW 255
37496: PUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 255
37506: EQUAL
37507: AND
37508: IFFALSE 37532
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37510: LD_VAR 0 5
37514: PUSH
37515: LD_INT 1
37517: ARRAY
37518: PPUSH
37519: LD_VAR 0 5
37523: PUSH
37524: LD_INT 2
37526: ARRAY
37527: PPUSH
37528: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37532: LD_ADDR_EXP 101
37536: PUSH
37537: LD_EXP 101
37541: PPUSH
37542: LD_VAR 0 4
37546: PPUSH
37547: LD_EXP 101
37551: PUSH
37552: LD_VAR 0 4
37556: ARRAY
37557: PPUSH
37558: LD_VAR 0 3
37562: PPUSH
37563: CALL_OW 3
37567: PPUSH
37568: CALL_OW 1
37572: ST_TO_ADDR
// end ; end ;
37573: GO 37402
37575: POP
37576: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37577: LD_VAR 0 1
37581: PPUSH
37582: LD_EXP 101
37586: PUSH
37587: LD_VAR 0 4
37591: ARRAY
37592: PUSH
37593: LD_INT 0
37595: PLUS
37596: PPUSH
37597: CALL_OW 505
// end ;
37601: LD_VAR 0 2
37605: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37606: LD_INT 0
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
// if not hack in hackTanks then
37612: LD_VAR 0 1
37616: PUSH
37617: LD_EXP 100
37621: IN
37622: NOT
37623: IFFALSE 37627
// exit ;
37625: GO 37712
// index := GetElementIndex ( hackTanks , hack ) ;
37627: LD_ADDR_VAR 0 5
37631: PUSH
37632: LD_EXP 100
37636: PPUSH
37637: LD_VAR 0 1
37641: PPUSH
37642: CALL 44645 0 2
37646: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37647: LD_ADDR_VAR 0 4
37651: PUSH
37652: DOUBLE
37653: LD_INT 1
37655: DEC
37656: ST_TO_ADDR
37657: LD_EXP 101
37661: PUSH
37662: LD_VAR 0 5
37666: ARRAY
37667: PUSH
37668: FOR_TO
37669: IFFALSE 37710
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37671: LD_EXP 101
37675: PUSH
37676: LD_VAR 0 5
37680: ARRAY
37681: PUSH
37682: LD_VAR 0 4
37686: ARRAY
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: PUSH
37692: LD_VAR 0 2
37696: EQUAL
37697: IFFALSE 37708
// KillUnit ( vehicle ) ;
37699: LD_VAR 0 2
37703: PPUSH
37704: CALL_OW 66
37708: GO 37668
37710: POP
37711: POP
// end ;
37712: LD_VAR 0 3
37716: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37717: LD_EXP 105
37721: NOT
37722: IFFALSE 37757
37724: GO 37726
37726: DISABLE
// begin initMiner := true ;
37727: LD_ADDR_EXP 105
37731: PUSH
37732: LD_INT 1
37734: ST_TO_ADDR
// minersList := [ ] ;
37735: LD_ADDR_EXP 106
37739: PUSH
37740: EMPTY
37741: ST_TO_ADDR
// minerMinesList := [ ] ;
37742: LD_ADDR_EXP 107
37746: PUSH
37747: EMPTY
37748: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37749: LD_ADDR_EXP 108
37753: PUSH
37754: LD_INT 5
37756: ST_TO_ADDR
// end ;
37757: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37758: LD_EXP 105
37762: PUSH
37763: LD_INT 34
37765: PUSH
37766: LD_INT 81
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PPUSH
37773: CALL_OW 69
37777: AND
37778: IFFALSE 38239
37780: GO 37782
37782: DISABLE
37783: LD_INT 0
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
// begin enable ;
37789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37790: LD_ADDR_VAR 0 1
37794: PUSH
37795: LD_INT 34
37797: PUSH
37798: LD_INT 81
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PPUSH
37805: CALL_OW 69
37809: PUSH
37810: FOR_IN
37811: IFFALSE 37883
// begin if not i in minersList then
37813: LD_VAR 0 1
37817: PUSH
37818: LD_EXP 106
37822: IN
37823: NOT
37824: IFFALSE 37881
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37826: LD_ADDR_EXP 106
37830: PUSH
37831: LD_EXP 106
37835: PPUSH
37836: LD_EXP 106
37840: PUSH
37841: LD_INT 1
37843: PLUS
37844: PPUSH
37845: LD_VAR 0 1
37849: PPUSH
37850: CALL_OW 1
37854: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37855: LD_ADDR_EXP 107
37859: PUSH
37860: LD_EXP 107
37864: PPUSH
37865: LD_EXP 107
37869: PUSH
37870: LD_INT 1
37872: PLUS
37873: PPUSH
37874: EMPTY
37875: PPUSH
37876: CALL_OW 1
37880: ST_TO_ADDR
// end end ;
37881: GO 37810
37883: POP
37884: POP
// for i := minerMinesList downto 1 do
37885: LD_ADDR_VAR 0 1
37889: PUSH
37890: DOUBLE
37891: LD_EXP 107
37895: INC
37896: ST_TO_ADDR
37897: LD_INT 1
37899: PUSH
37900: FOR_DOWNTO
37901: IFFALSE 38237
// begin if IsLive ( minersList [ i ] ) then
37903: LD_EXP 106
37907: PUSH
37908: LD_VAR 0 1
37912: ARRAY
37913: PPUSH
37914: CALL_OW 300
37918: IFFALSE 37946
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37920: LD_EXP 106
37924: PUSH
37925: LD_VAR 0 1
37929: ARRAY
37930: PPUSH
37931: LD_EXP 107
37935: PUSH
37936: LD_VAR 0 1
37940: ARRAY
37941: PPUSH
37942: CALL_OW 505
// if not minerMinesList [ i ] then
37946: LD_EXP 107
37950: PUSH
37951: LD_VAR 0 1
37955: ARRAY
37956: NOT
37957: IFFALSE 37961
// continue ;
37959: GO 37900
// for j := minerMinesList [ i ] downto 1 do
37961: LD_ADDR_VAR 0 2
37965: PUSH
37966: DOUBLE
37967: LD_EXP 107
37971: PUSH
37972: LD_VAR 0 1
37976: ARRAY
37977: INC
37978: ST_TO_ADDR
37979: LD_INT 1
37981: PUSH
37982: FOR_DOWNTO
37983: IFFALSE 38233
// begin side := GetSide ( minersList [ i ] ) ;
37985: LD_ADDR_VAR 0 3
37989: PUSH
37990: LD_EXP 106
37994: PUSH
37995: LD_VAR 0 1
37999: ARRAY
38000: PPUSH
38001: CALL_OW 255
38005: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38006: LD_ADDR_VAR 0 4
38010: PUSH
38011: LD_EXP 107
38015: PUSH
38016: LD_VAR 0 1
38020: ARRAY
38021: PUSH
38022: LD_VAR 0 2
38026: ARRAY
38027: PUSH
38028: LD_INT 1
38030: ARRAY
38031: PPUSH
38032: LD_EXP 107
38036: PUSH
38037: LD_VAR 0 1
38041: ARRAY
38042: PUSH
38043: LD_VAR 0 2
38047: ARRAY
38048: PUSH
38049: LD_INT 2
38051: ARRAY
38052: PPUSH
38053: CALL_OW 428
38057: ST_TO_ADDR
// if not tmp then
38058: LD_VAR 0 4
38062: NOT
38063: IFFALSE 38067
// continue ;
38065: GO 37982
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38067: LD_VAR 0 4
38071: PUSH
38072: LD_INT 81
38074: PUSH
38075: LD_VAR 0 3
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PPUSH
38084: CALL_OW 69
38088: IN
38089: PUSH
38090: LD_EXP 107
38094: PUSH
38095: LD_VAR 0 1
38099: ARRAY
38100: PUSH
38101: LD_VAR 0 2
38105: ARRAY
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: PPUSH
38111: LD_EXP 107
38115: PUSH
38116: LD_VAR 0 1
38120: ARRAY
38121: PUSH
38122: LD_VAR 0 2
38126: ARRAY
38127: PUSH
38128: LD_INT 2
38130: ARRAY
38131: PPUSH
38132: CALL_OW 458
38136: AND
38137: IFFALSE 38231
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38139: LD_EXP 107
38143: PUSH
38144: LD_VAR 0 1
38148: ARRAY
38149: PUSH
38150: LD_VAR 0 2
38154: ARRAY
38155: PUSH
38156: LD_INT 1
38158: ARRAY
38159: PPUSH
38160: LD_EXP 107
38164: PUSH
38165: LD_VAR 0 1
38169: ARRAY
38170: PUSH
38171: LD_VAR 0 2
38175: ARRAY
38176: PUSH
38177: LD_INT 2
38179: ARRAY
38180: PPUSH
38181: LD_VAR 0 3
38185: PPUSH
38186: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38190: LD_ADDR_EXP 107
38194: PUSH
38195: LD_EXP 107
38199: PPUSH
38200: LD_VAR 0 1
38204: PPUSH
38205: LD_EXP 107
38209: PUSH
38210: LD_VAR 0 1
38214: ARRAY
38215: PPUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: CALL_OW 3
38225: PPUSH
38226: CALL_OW 1
38230: ST_TO_ADDR
// end ; end ;
38231: GO 37982
38233: POP
38234: POP
// end ;
38235: GO 37900
38237: POP
38238: POP
// end ;
38239: PPOPN 4
38241: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38242: LD_INT 0
38244: PPUSH
38245: PPUSH
// result := false ;
38246: LD_ADDR_VAR 0 4
38250: PUSH
38251: LD_INT 0
38253: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 264
38263: PUSH
38264: LD_INT 81
38266: EQUAL
38267: NOT
38268: IFFALSE 38272
// exit ;
38270: GO 38512
// index := GetElementIndex ( minersList , unit ) ;
38272: LD_ADDR_VAR 0 5
38276: PUSH
38277: LD_EXP 106
38281: PPUSH
38282: LD_VAR 0 1
38286: PPUSH
38287: CALL 44645 0 2
38291: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38292: LD_EXP 107
38296: PUSH
38297: LD_VAR 0 5
38301: ARRAY
38302: PUSH
38303: LD_EXP 108
38307: GREATEREQUAL
38308: IFFALSE 38312
// exit ;
38310: GO 38512
// ComMoveXY ( unit , x , y ) ;
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_VAR 0 2
38321: PPUSH
38322: LD_VAR 0 3
38326: PPUSH
38327: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38331: LD_INT 35
38333: PPUSH
38334: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38338: LD_VAR 0 1
38342: PPUSH
38343: LD_VAR 0 2
38347: PPUSH
38348: LD_VAR 0 3
38352: PPUSH
38353: CALL 76000 0 3
38357: NOT
38358: PUSH
38359: LD_VAR 0 1
38363: PPUSH
38364: CALL_OW 314
38368: AND
38369: IFFALSE 38373
// exit ;
38371: GO 38512
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38373: LD_VAR 0 2
38377: PPUSH
38378: LD_VAR 0 3
38382: PPUSH
38383: CALL_OW 428
38387: PUSH
38388: LD_VAR 0 1
38392: EQUAL
38393: PUSH
38394: LD_VAR 0 1
38398: PPUSH
38399: CALL_OW 314
38403: NOT
38404: AND
38405: IFFALSE 38331
// PlaySoundXY ( x , y , PlantMine ) ;
38407: LD_VAR 0 2
38411: PPUSH
38412: LD_VAR 0 3
38416: PPUSH
38417: LD_STRING PlantMine
38419: PPUSH
38420: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38424: LD_VAR 0 2
38428: PPUSH
38429: LD_VAR 0 3
38433: PPUSH
38434: LD_VAR 0 1
38438: PPUSH
38439: CALL_OW 255
38443: PPUSH
38444: LD_INT 0
38446: PPUSH
38447: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38451: LD_ADDR_EXP 107
38455: PUSH
38456: LD_EXP 107
38460: PPUSH
38461: LD_VAR 0 5
38465: PUSH
38466: LD_EXP 107
38470: PUSH
38471: LD_VAR 0 5
38475: ARRAY
38476: PUSH
38477: LD_INT 1
38479: PLUS
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PPUSH
38485: LD_VAR 0 2
38489: PUSH
38490: LD_VAR 0 3
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PPUSH
38499: CALL 44860 0 3
38503: ST_TO_ADDR
// result := true ;
38504: LD_ADDR_VAR 0 4
38508: PUSH
38509: LD_INT 1
38511: ST_TO_ADDR
// end ;
38512: LD_VAR 0 4
38516: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38517: LD_INT 0
38519: PPUSH
38520: PPUSH
38521: PPUSH
// if not unit in minersList then
38522: LD_VAR 0 1
38526: PUSH
38527: LD_EXP 106
38531: IN
38532: NOT
38533: IFFALSE 38537
// exit ;
38535: GO 38929
// index := GetElementIndex ( minersList , unit ) ;
38537: LD_ADDR_VAR 0 6
38541: PUSH
38542: LD_EXP 106
38546: PPUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL 44645 0 2
38556: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38557: LD_ADDR_VAR 0 5
38561: PUSH
38562: DOUBLE
38563: LD_EXP 107
38567: PUSH
38568: LD_VAR 0 6
38572: ARRAY
38573: INC
38574: ST_TO_ADDR
38575: LD_INT 1
38577: PUSH
38578: FOR_DOWNTO
38579: IFFALSE 38740
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38581: LD_EXP 107
38585: PUSH
38586: LD_VAR 0 6
38590: ARRAY
38591: PUSH
38592: LD_VAR 0 5
38596: ARRAY
38597: PUSH
38598: LD_INT 1
38600: ARRAY
38601: PUSH
38602: LD_VAR 0 2
38606: EQUAL
38607: PUSH
38608: LD_EXP 107
38612: PUSH
38613: LD_VAR 0 6
38617: ARRAY
38618: PUSH
38619: LD_VAR 0 5
38623: ARRAY
38624: PUSH
38625: LD_INT 2
38627: ARRAY
38628: PUSH
38629: LD_VAR 0 3
38633: EQUAL
38634: AND
38635: IFFALSE 38738
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38637: LD_EXP 107
38641: PUSH
38642: LD_VAR 0 6
38646: ARRAY
38647: PUSH
38648: LD_VAR 0 5
38652: ARRAY
38653: PUSH
38654: LD_INT 1
38656: ARRAY
38657: PPUSH
38658: LD_EXP 107
38662: PUSH
38663: LD_VAR 0 6
38667: ARRAY
38668: PUSH
38669: LD_VAR 0 5
38673: ARRAY
38674: PUSH
38675: LD_INT 2
38677: ARRAY
38678: PPUSH
38679: LD_VAR 0 1
38683: PPUSH
38684: CALL_OW 255
38688: PPUSH
38689: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38693: LD_ADDR_EXP 107
38697: PUSH
38698: LD_EXP 107
38702: PPUSH
38703: LD_VAR 0 6
38707: PPUSH
38708: LD_EXP 107
38712: PUSH
38713: LD_VAR 0 6
38717: ARRAY
38718: PPUSH
38719: LD_VAR 0 5
38723: PPUSH
38724: CALL_OW 3
38728: PPUSH
38729: CALL_OW 1
38733: ST_TO_ADDR
// exit ;
38734: POP
38735: POP
38736: GO 38929
// end ; end ;
38738: GO 38578
38740: POP
38741: POP
// for i := minerMinesList [ index ] downto 1 do
38742: LD_ADDR_VAR 0 5
38746: PUSH
38747: DOUBLE
38748: LD_EXP 107
38752: PUSH
38753: LD_VAR 0 6
38757: ARRAY
38758: INC
38759: ST_TO_ADDR
38760: LD_INT 1
38762: PUSH
38763: FOR_DOWNTO
38764: IFFALSE 38927
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38766: LD_EXP 107
38770: PUSH
38771: LD_VAR 0 6
38775: ARRAY
38776: PUSH
38777: LD_VAR 0 5
38781: ARRAY
38782: PUSH
38783: LD_INT 1
38785: ARRAY
38786: PPUSH
38787: LD_EXP 107
38791: PUSH
38792: LD_VAR 0 6
38796: ARRAY
38797: PUSH
38798: LD_VAR 0 5
38802: ARRAY
38803: PUSH
38804: LD_INT 2
38806: ARRAY
38807: PPUSH
38808: LD_VAR 0 2
38812: PPUSH
38813: LD_VAR 0 3
38817: PPUSH
38818: CALL_OW 298
38822: PUSH
38823: LD_INT 6
38825: LESS
38826: IFFALSE 38925
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38828: LD_EXP 107
38832: PUSH
38833: LD_VAR 0 6
38837: ARRAY
38838: PUSH
38839: LD_VAR 0 5
38843: ARRAY
38844: PUSH
38845: LD_INT 1
38847: ARRAY
38848: PPUSH
38849: LD_EXP 107
38853: PUSH
38854: LD_VAR 0 6
38858: ARRAY
38859: PUSH
38860: LD_VAR 0 5
38864: ARRAY
38865: PUSH
38866: LD_INT 2
38868: ARRAY
38869: PPUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 255
38879: PPUSH
38880: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38884: LD_ADDR_EXP 107
38888: PUSH
38889: LD_EXP 107
38893: PPUSH
38894: LD_VAR 0 6
38898: PPUSH
38899: LD_EXP 107
38903: PUSH
38904: LD_VAR 0 6
38908: ARRAY
38909: PPUSH
38910: LD_VAR 0 5
38914: PPUSH
38915: CALL_OW 3
38919: PPUSH
38920: CALL_OW 1
38924: ST_TO_ADDR
// end ; end ;
38925: GO 38763
38927: POP
38928: POP
// end ;
38929: LD_VAR 0 4
38933: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38934: LD_INT 0
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 264
38954: PUSH
38955: LD_INT 81
38957: EQUAL
38958: NOT
38959: PUSH
38960: LD_VAR 0 1
38964: PUSH
38965: LD_EXP 106
38969: IN
38970: NOT
38971: OR
38972: IFFALSE 38976
// exit ;
38974: GO 39298
// index := GetElementIndex ( minersList , unit ) ;
38976: LD_ADDR_VAR 0 6
38980: PUSH
38981: LD_EXP 106
38985: PPUSH
38986: LD_VAR 0 1
38990: PPUSH
38991: CALL 44645 0 2
38995: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38996: LD_ADDR_VAR 0 8
39000: PUSH
39001: LD_EXP 108
39005: PUSH
39006: LD_EXP 107
39010: PUSH
39011: LD_VAR 0 6
39015: ARRAY
39016: MINUS
39017: ST_TO_ADDR
// if not minesFreeAmount then
39018: LD_VAR 0 8
39022: NOT
39023: IFFALSE 39027
// exit ;
39025: GO 39298
// tmp := [ ] ;
39027: LD_ADDR_VAR 0 7
39031: PUSH
39032: EMPTY
39033: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39034: LD_ADDR_VAR 0 5
39038: PUSH
39039: DOUBLE
39040: LD_INT 1
39042: DEC
39043: ST_TO_ADDR
39044: LD_VAR 0 8
39048: PUSH
39049: FOR_TO
39050: IFFALSE 39245
// begin _d := rand ( 0 , 5 ) ;
39052: LD_ADDR_VAR 0 11
39056: PUSH
39057: LD_INT 0
39059: PPUSH
39060: LD_INT 5
39062: PPUSH
39063: CALL_OW 12
39067: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39068: LD_ADDR_VAR 0 12
39072: PUSH
39073: LD_INT 2
39075: PPUSH
39076: LD_INT 6
39078: PPUSH
39079: CALL_OW 12
39083: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39084: LD_ADDR_VAR 0 9
39088: PUSH
39089: LD_VAR 0 2
39093: PPUSH
39094: LD_VAR 0 11
39098: PPUSH
39099: LD_VAR 0 12
39103: PPUSH
39104: CALL_OW 272
39108: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39109: LD_ADDR_VAR 0 10
39113: PUSH
39114: LD_VAR 0 3
39118: PPUSH
39119: LD_VAR 0 11
39123: PPUSH
39124: LD_VAR 0 12
39128: PPUSH
39129: CALL_OW 273
39133: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39134: LD_VAR 0 9
39138: PPUSH
39139: LD_VAR 0 10
39143: PPUSH
39144: CALL_OW 488
39148: PUSH
39149: LD_VAR 0 9
39153: PUSH
39154: LD_VAR 0 10
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_VAR 0 7
39167: IN
39168: NOT
39169: AND
39170: PUSH
39171: LD_VAR 0 9
39175: PPUSH
39176: LD_VAR 0 10
39180: PPUSH
39181: CALL_OW 458
39185: NOT
39186: AND
39187: IFFALSE 39229
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39189: LD_ADDR_VAR 0 7
39193: PUSH
39194: LD_VAR 0 7
39198: PPUSH
39199: LD_VAR 0 7
39203: PUSH
39204: LD_INT 1
39206: PLUS
39207: PPUSH
39208: LD_VAR 0 9
39212: PUSH
39213: LD_VAR 0 10
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PPUSH
39222: CALL_OW 1
39226: ST_TO_ADDR
39227: GO 39243
// i := i - 1 ;
39229: LD_ADDR_VAR 0 5
39233: PUSH
39234: LD_VAR 0 5
39238: PUSH
39239: LD_INT 1
39241: MINUS
39242: ST_TO_ADDR
// end ;
39243: GO 39049
39245: POP
39246: POP
// for i in tmp do
39247: LD_ADDR_VAR 0 5
39251: PUSH
39252: LD_VAR 0 7
39256: PUSH
39257: FOR_IN
39258: IFFALSE 39296
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39260: LD_VAR 0 1
39264: PPUSH
39265: LD_VAR 0 5
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: LD_VAR 0 5
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: PPUSH
39283: CALL 38242 0 3
39287: NOT
39288: IFFALSE 39294
// exit ;
39290: POP
39291: POP
39292: GO 39298
39294: GO 39257
39296: POP
39297: POP
// end ;
39298: LD_VAR 0 4
39302: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39303: LD_INT 0
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
// if not GetClass ( unit ) = class_sniper then
39312: LD_VAR 0 1
39316: PPUSH
39317: CALL_OW 257
39321: PUSH
39322: LD_INT 5
39324: EQUAL
39325: NOT
39326: IFFALSE 39330
// exit ;
39328: GO 39718
// dist := 8 ;
39330: LD_ADDR_VAR 0 5
39334: PUSH
39335: LD_INT 8
39337: ST_TO_ADDR
// viewRange := 12 ;
39338: LD_ADDR_VAR 0 7
39342: PUSH
39343: LD_INT 12
39345: ST_TO_ADDR
// side := GetSide ( unit ) ;
39346: LD_ADDR_VAR 0 6
39350: PUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 255
39360: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39361: LD_INT 61
39363: PPUSH
39364: LD_VAR 0 6
39368: PPUSH
39369: CALL_OW 321
39373: PUSH
39374: LD_INT 2
39376: EQUAL
39377: IFFALSE 39387
// viewRange := 16 ;
39379: LD_ADDR_VAR 0 7
39383: PUSH
39384: LD_INT 16
39386: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39387: LD_VAR 0 1
39391: PPUSH
39392: LD_VAR 0 2
39396: PPUSH
39397: LD_VAR 0 3
39401: PPUSH
39402: CALL_OW 297
39406: PUSH
39407: LD_VAR 0 5
39411: GREATER
39412: IFFALSE 39491
// begin ComMoveXY ( unit , x , y ) ;
39414: LD_VAR 0 1
39418: PPUSH
39419: LD_VAR 0 2
39423: PPUSH
39424: LD_VAR 0 3
39428: PPUSH
39429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39433: LD_INT 35
39435: PPUSH
39436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39440: LD_VAR 0 1
39444: PPUSH
39445: LD_VAR 0 2
39449: PPUSH
39450: LD_VAR 0 3
39454: PPUSH
39455: CALL 76000 0 3
39459: NOT
39460: IFFALSE 39464
// exit ;
39462: GO 39718
// until GetDistUnitXY ( unit , x , y ) < dist ;
39464: LD_VAR 0 1
39468: PPUSH
39469: LD_VAR 0 2
39473: PPUSH
39474: LD_VAR 0 3
39478: PPUSH
39479: CALL_OW 297
39483: PUSH
39484: LD_VAR 0 5
39488: LESS
39489: IFFALSE 39433
// end ; ComTurnXY ( unit , x , y ) ;
39491: LD_VAR 0 1
39495: PPUSH
39496: LD_VAR 0 2
39500: PPUSH
39501: LD_VAR 0 3
39505: PPUSH
39506: CALL_OW 118
// wait ( 5 ) ;
39510: LD_INT 5
39512: PPUSH
39513: CALL_OW 67
// _d := GetDir ( unit ) ;
39517: LD_ADDR_VAR 0 10
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 254
39531: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39532: LD_ADDR_VAR 0 8
39536: PUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 250
39546: PPUSH
39547: LD_VAR 0 10
39551: PPUSH
39552: LD_VAR 0 5
39556: PPUSH
39557: CALL_OW 272
39561: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39562: LD_ADDR_VAR 0 9
39566: PUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 251
39576: PPUSH
39577: LD_VAR 0 10
39581: PPUSH
39582: LD_VAR 0 5
39586: PPUSH
39587: CALL_OW 273
39591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39592: LD_VAR 0 8
39596: PPUSH
39597: LD_VAR 0 9
39601: PPUSH
39602: CALL_OW 488
39606: NOT
39607: IFFALSE 39611
// exit ;
39609: GO 39718
// ComAnimCustom ( unit , 1 ) ;
39611: LD_VAR 0 1
39615: PPUSH
39616: LD_INT 1
39618: PPUSH
39619: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39623: LD_VAR 0 8
39627: PPUSH
39628: LD_VAR 0 9
39632: PPUSH
39633: LD_VAR 0 6
39637: PPUSH
39638: LD_VAR 0 7
39642: PPUSH
39643: CALL_OW 330
// repeat wait ( 1 ) ;
39647: LD_INT 1
39649: PPUSH
39650: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39654: LD_VAR 0 1
39658: PPUSH
39659: CALL_OW 316
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 314
39673: OR
39674: PUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 302
39684: NOT
39685: OR
39686: PUSH
39687: LD_VAR 0 1
39691: PPUSH
39692: CALL_OW 301
39696: OR
39697: IFFALSE 39647
// RemoveSeeing ( _x , _y , side ) ;
39699: LD_VAR 0 8
39703: PPUSH
39704: LD_VAR 0 9
39708: PPUSH
39709: LD_VAR 0 6
39713: PPUSH
39714: CALL_OW 331
// end ; end_of_file
39718: LD_VAR 0 4
39722: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39723: LD_INT 0
39725: PPUSH
39726: PPUSH
// if exist_mode then
39727: LD_VAR 0 2
39731: IFFALSE 39756
// unit := CreateCharacter ( prefix & ident ) else
39733: LD_ADDR_VAR 0 5
39737: PUSH
39738: LD_VAR 0 3
39742: PUSH
39743: LD_VAR 0 1
39747: STR
39748: PPUSH
39749: CALL_OW 34
39753: ST_TO_ADDR
39754: GO 39771
// unit := NewCharacter ( ident ) ;
39756: LD_ADDR_VAR 0 5
39760: PUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 25
39770: ST_TO_ADDR
// result := unit ;
39771: LD_ADDR_VAR 0 4
39775: PUSH
39776: LD_VAR 0 5
39780: ST_TO_ADDR
// end ;
39781: LD_VAR 0 4
39785: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39786: LD_INT 0
39788: PPUSH
39789: PPUSH
// if not side or not nation then
39790: LD_VAR 0 1
39794: NOT
39795: PUSH
39796: LD_VAR 0 2
39800: NOT
39801: OR
39802: IFFALSE 39806
// exit ;
39804: GO 40574
// case nation of nation_american :
39806: LD_VAR 0 2
39810: PUSH
39811: LD_INT 1
39813: DOUBLE
39814: EQUAL
39815: IFTRUE 39819
39817: GO 40033
39819: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39820: LD_ADDR_VAR 0 4
39824: PUSH
39825: LD_INT 35
39827: PUSH
39828: LD_INT 45
39830: PUSH
39831: LD_INT 46
39833: PUSH
39834: LD_INT 47
39836: PUSH
39837: LD_INT 82
39839: PUSH
39840: LD_INT 83
39842: PUSH
39843: LD_INT 84
39845: PUSH
39846: LD_INT 85
39848: PUSH
39849: LD_INT 86
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 6
39860: PUSH
39861: LD_INT 15
39863: PUSH
39864: LD_INT 16
39866: PUSH
39867: LD_INT 7
39869: PUSH
39870: LD_INT 12
39872: PUSH
39873: LD_INT 13
39875: PUSH
39876: LD_INT 10
39878: PUSH
39879: LD_INT 14
39881: PUSH
39882: LD_INT 20
39884: PUSH
39885: LD_INT 21
39887: PUSH
39888: LD_INT 22
39890: PUSH
39891: LD_INT 25
39893: PUSH
39894: LD_INT 32
39896: PUSH
39897: LD_INT 27
39899: PUSH
39900: LD_INT 36
39902: PUSH
39903: LD_INT 69
39905: PUSH
39906: LD_INT 39
39908: PUSH
39909: LD_INT 34
39911: PUSH
39912: LD_INT 40
39914: PUSH
39915: LD_INT 48
39917: PUSH
39918: LD_INT 49
39920: PUSH
39921: LD_INT 50
39923: PUSH
39924: LD_INT 51
39926: PUSH
39927: LD_INT 52
39929: PUSH
39930: LD_INT 53
39932: PUSH
39933: LD_INT 54
39935: PUSH
39936: LD_INT 55
39938: PUSH
39939: LD_INT 56
39941: PUSH
39942: LD_INT 57
39944: PUSH
39945: LD_INT 58
39947: PUSH
39948: LD_INT 59
39950: PUSH
39951: LD_INT 60
39953: PUSH
39954: LD_INT 61
39956: PUSH
39957: LD_INT 62
39959: PUSH
39960: LD_INT 80
39962: PUSH
39963: LD_INT 82
39965: PUSH
39966: LD_INT 83
39968: PUSH
39969: LD_INT 84
39971: PUSH
39972: LD_INT 85
39974: PUSH
39975: LD_INT 86
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
40031: GO 40498
40033: LD_INT 2
40035: DOUBLE
40036: EQUAL
40037: IFTRUE 40041
40039: GO 40267
40041: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40042: LD_ADDR_VAR 0 4
40046: PUSH
40047: LD_INT 35
40049: PUSH
40050: LD_INT 45
40052: PUSH
40053: LD_INT 46
40055: PUSH
40056: LD_INT 47
40058: PUSH
40059: LD_INT 82
40061: PUSH
40062: LD_INT 83
40064: PUSH
40065: LD_INT 84
40067: PUSH
40068: LD_INT 85
40070: PUSH
40071: LD_INT 87
40073: PUSH
40074: LD_INT 70
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 11
40082: PUSH
40083: LD_INT 3
40085: PUSH
40086: LD_INT 4
40088: PUSH
40089: LD_INT 5
40091: PUSH
40092: LD_INT 6
40094: PUSH
40095: LD_INT 15
40097: PUSH
40098: LD_INT 18
40100: PUSH
40101: LD_INT 7
40103: PUSH
40104: LD_INT 17
40106: PUSH
40107: LD_INT 8
40109: PUSH
40110: LD_INT 20
40112: PUSH
40113: LD_INT 21
40115: PUSH
40116: LD_INT 22
40118: PUSH
40119: LD_INT 72
40121: PUSH
40122: LD_INT 26
40124: PUSH
40125: LD_INT 69
40127: PUSH
40128: LD_INT 39
40130: PUSH
40131: LD_INT 40
40133: PUSH
40134: LD_INT 41
40136: PUSH
40137: LD_INT 42
40139: PUSH
40140: LD_INT 43
40142: PUSH
40143: LD_INT 48
40145: PUSH
40146: LD_INT 49
40148: PUSH
40149: LD_INT 50
40151: PUSH
40152: LD_INT 51
40154: PUSH
40155: LD_INT 52
40157: PUSH
40158: LD_INT 53
40160: PUSH
40161: LD_INT 54
40163: PUSH
40164: LD_INT 55
40166: PUSH
40167: LD_INT 56
40169: PUSH
40170: LD_INT 60
40172: PUSH
40173: LD_INT 61
40175: PUSH
40176: LD_INT 62
40178: PUSH
40179: LD_INT 66
40181: PUSH
40182: LD_INT 67
40184: PUSH
40185: LD_INT 68
40187: PUSH
40188: LD_INT 81
40190: PUSH
40191: LD_INT 82
40193: PUSH
40194: LD_INT 83
40196: PUSH
40197: LD_INT 84
40199: PUSH
40200: LD_INT 85
40202: PUSH
40203: LD_INT 87
40205: PUSH
40206: LD_INT 88
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
40265: GO 40498
40267: LD_INT 3
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40497
40275: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40276: LD_ADDR_VAR 0 4
40280: PUSH
40281: LD_INT 46
40283: PUSH
40284: LD_INT 47
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: LD_INT 82
40295: PUSH
40296: LD_INT 83
40298: PUSH
40299: LD_INT 84
40301: PUSH
40302: LD_INT 85
40304: PUSH
40305: LD_INT 86
40307: PUSH
40308: LD_INT 11
40310: PUSH
40311: LD_INT 9
40313: PUSH
40314: LD_INT 20
40316: PUSH
40317: LD_INT 19
40319: PUSH
40320: LD_INT 21
40322: PUSH
40323: LD_INT 24
40325: PUSH
40326: LD_INT 22
40328: PUSH
40329: LD_INT 25
40331: PUSH
40332: LD_INT 28
40334: PUSH
40335: LD_INT 29
40337: PUSH
40338: LD_INT 30
40340: PUSH
40341: LD_INT 31
40343: PUSH
40344: LD_INT 37
40346: PUSH
40347: LD_INT 38
40349: PUSH
40350: LD_INT 32
40352: PUSH
40353: LD_INT 27
40355: PUSH
40356: LD_INT 33
40358: PUSH
40359: LD_INT 69
40361: PUSH
40362: LD_INT 39
40364: PUSH
40365: LD_INT 34
40367: PUSH
40368: LD_INT 40
40370: PUSH
40371: LD_INT 71
40373: PUSH
40374: LD_INT 23
40376: PUSH
40377: LD_INT 44
40379: PUSH
40380: LD_INT 48
40382: PUSH
40383: LD_INT 49
40385: PUSH
40386: LD_INT 50
40388: PUSH
40389: LD_INT 51
40391: PUSH
40392: LD_INT 52
40394: PUSH
40395: LD_INT 53
40397: PUSH
40398: LD_INT 54
40400: PUSH
40401: LD_INT 55
40403: PUSH
40404: LD_INT 56
40406: PUSH
40407: LD_INT 57
40409: PUSH
40410: LD_INT 58
40412: PUSH
40413: LD_INT 59
40415: PUSH
40416: LD_INT 63
40418: PUSH
40419: LD_INT 64
40421: PUSH
40422: LD_INT 65
40424: PUSH
40425: LD_INT 82
40427: PUSH
40428: LD_INT 83
40430: PUSH
40431: LD_INT 84
40433: PUSH
40434: LD_INT 85
40436: PUSH
40437: LD_INT 86
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: ST_TO_ADDR
40495: GO 40498
40497: POP
// if state > - 1 and state < 3 then
40498: LD_VAR 0 3
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: GREATER
40507: PUSH
40508: LD_VAR 0 3
40512: PUSH
40513: LD_INT 3
40515: LESS
40516: AND
40517: IFFALSE 40574
// for i in result do
40519: LD_ADDR_VAR 0 5
40523: PUSH
40524: LD_VAR 0 4
40528: PUSH
40529: FOR_IN
40530: IFFALSE 40572
// if GetTech ( i , side ) <> state then
40532: LD_VAR 0 5
40536: PPUSH
40537: LD_VAR 0 1
40541: PPUSH
40542: CALL_OW 321
40546: PUSH
40547: LD_VAR 0 3
40551: NONEQUAL
40552: IFFALSE 40570
// result := result diff i ;
40554: LD_ADDR_VAR 0 4
40558: PUSH
40559: LD_VAR 0 4
40563: PUSH
40564: LD_VAR 0 5
40568: DIFF
40569: ST_TO_ADDR
40570: GO 40529
40572: POP
40573: POP
// end ;
40574: LD_VAR 0 4
40578: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40579: LD_INT 0
40581: PPUSH
40582: PPUSH
40583: PPUSH
// result := true ;
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: LD_INT 1
40591: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40592: LD_ADDR_VAR 0 5
40596: PUSH
40597: LD_VAR 0 2
40601: PPUSH
40602: CALL_OW 480
40606: ST_TO_ADDR
// if not tmp then
40607: LD_VAR 0 5
40611: NOT
40612: IFFALSE 40616
// exit ;
40614: GO 40665
// for i in tmp do
40616: LD_ADDR_VAR 0 4
40620: PUSH
40621: LD_VAR 0 5
40625: PUSH
40626: FOR_IN
40627: IFFALSE 40663
// if GetTech ( i , side ) <> state_researched then
40629: LD_VAR 0 4
40633: PPUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 321
40643: PUSH
40644: LD_INT 2
40646: NONEQUAL
40647: IFFALSE 40661
// begin result := false ;
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: LD_INT 0
40656: ST_TO_ADDR
// exit ;
40657: POP
40658: POP
40659: GO 40665
// end ;
40661: GO 40626
40663: POP
40664: POP
// end ;
40665: LD_VAR 0 3
40669: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40670: LD_INT 0
40672: PPUSH
40673: PPUSH
40674: PPUSH
40675: PPUSH
40676: PPUSH
40677: PPUSH
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40685: LD_VAR 0 1
40689: NOT
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 257
40700: PUSH
40701: LD_INT 9
40703: NONEQUAL
40704: OR
40705: IFFALSE 40709
// exit ;
40707: GO 41282
// side := GetSide ( unit ) ;
40709: LD_ADDR_VAR 0 9
40713: PUSH
40714: LD_VAR 0 1
40718: PPUSH
40719: CALL_OW 255
40723: ST_TO_ADDR
// tech_space := tech_spacanom ;
40724: LD_ADDR_VAR 0 12
40728: PUSH
40729: LD_INT 29
40731: ST_TO_ADDR
// tech_time := tech_taurad ;
40732: LD_ADDR_VAR 0 13
40736: PUSH
40737: LD_INT 28
40739: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40740: LD_ADDR_VAR 0 11
40744: PUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 310
40754: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40755: LD_VAR 0 11
40759: PPUSH
40760: CALL_OW 247
40764: PUSH
40765: LD_INT 2
40767: EQUAL
40768: IFFALSE 40772
// exit ;
40770: GO 41282
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40772: LD_ADDR_VAR 0 8
40776: PUSH
40777: LD_INT 81
40779: PUSH
40780: LD_VAR 0 9
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: LD_INT 21
40794: PUSH
40795: LD_INT 3
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PPUSH
40810: CALL_OW 69
40814: ST_TO_ADDR
// if not tmp then
40815: LD_VAR 0 8
40819: NOT
40820: IFFALSE 40824
// exit ;
40822: GO 41282
// if in_unit then
40824: LD_VAR 0 11
40828: IFFALSE 40852
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40830: LD_ADDR_VAR 0 10
40834: PUSH
40835: LD_VAR 0 8
40839: PPUSH
40840: LD_VAR 0 11
40844: PPUSH
40845: CALL_OW 74
40849: ST_TO_ADDR
40850: GO 40872
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40852: LD_ADDR_VAR 0 10
40856: PUSH
40857: LD_VAR 0 8
40861: PPUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 74
40871: ST_TO_ADDR
// if not enemy then
40872: LD_VAR 0 10
40876: NOT
40877: IFFALSE 40881
// exit ;
40879: GO 41282
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40881: LD_VAR 0 11
40885: PUSH
40886: LD_VAR 0 11
40890: PPUSH
40891: LD_VAR 0 10
40895: PPUSH
40896: CALL_OW 296
40900: PUSH
40901: LD_INT 13
40903: GREATER
40904: AND
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: LD_VAR 0 10
40915: PPUSH
40916: CALL_OW 296
40920: PUSH
40921: LD_INT 12
40923: GREATER
40924: OR
40925: IFFALSE 40929
// exit ;
40927: GO 41282
// missile := [ 1 ] ;
40929: LD_ADDR_VAR 0 14
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40940: LD_VAR 0 9
40944: PPUSH
40945: LD_VAR 0 12
40949: PPUSH
40950: CALL_OW 325
40954: IFFALSE 40983
// missile := Replace ( missile , missile + 1 , 2 ) ;
40956: LD_ADDR_VAR 0 14
40960: PUSH
40961: LD_VAR 0 14
40965: PPUSH
40966: LD_VAR 0 14
40970: PUSH
40971: LD_INT 1
40973: PLUS
40974: PPUSH
40975: LD_INT 2
40977: PPUSH
40978: CALL_OW 1
40982: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40983: LD_VAR 0 9
40987: PPUSH
40988: LD_VAR 0 13
40992: PPUSH
40993: CALL_OW 325
40997: PUSH
40998: LD_VAR 0 10
41002: PPUSH
41003: CALL_OW 255
41007: PPUSH
41008: LD_VAR 0 13
41012: PPUSH
41013: CALL_OW 325
41017: NOT
41018: AND
41019: IFFALSE 41048
// missile := Replace ( missile , missile + 1 , 3 ) ;
41021: LD_ADDR_VAR 0 14
41025: PUSH
41026: LD_VAR 0 14
41030: PPUSH
41031: LD_VAR 0 14
41035: PUSH
41036: LD_INT 1
41038: PLUS
41039: PPUSH
41040: LD_INT 3
41042: PPUSH
41043: CALL_OW 1
41047: ST_TO_ADDR
// if missile < 2 then
41048: LD_VAR 0 14
41052: PUSH
41053: LD_INT 2
41055: LESS
41056: IFFALSE 41060
// exit ;
41058: GO 41282
// x := GetX ( enemy ) ;
41060: LD_ADDR_VAR 0 4
41064: PUSH
41065: LD_VAR 0 10
41069: PPUSH
41070: CALL_OW 250
41074: ST_TO_ADDR
// y := GetY ( enemy ) ;
41075: LD_ADDR_VAR 0 5
41079: PUSH
41080: LD_VAR 0 10
41084: PPUSH
41085: CALL_OW 251
41089: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41090: LD_ADDR_VAR 0 6
41094: PUSH
41095: LD_VAR 0 4
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PPUSH
41104: LD_INT 1
41106: PPUSH
41107: CALL_OW 12
41111: PLUS
41112: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41113: LD_ADDR_VAR 0 7
41117: PUSH
41118: LD_VAR 0 5
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PPUSH
41127: LD_INT 1
41129: PPUSH
41130: CALL_OW 12
41134: PLUS
41135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41136: LD_VAR 0 6
41140: PPUSH
41141: LD_VAR 0 7
41145: PPUSH
41146: CALL_OW 488
41150: NOT
41151: IFFALSE 41173
// begin _x := x ;
41153: LD_ADDR_VAR 0 6
41157: PUSH
41158: LD_VAR 0 4
41162: ST_TO_ADDR
// _y := y ;
41163: LD_ADDR_VAR 0 7
41167: PUSH
41168: LD_VAR 0 5
41172: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_INT 1
41180: PPUSH
41181: LD_VAR 0 14
41185: PPUSH
41186: CALL_OW 12
41190: ST_TO_ADDR
// case i of 1 :
41191: LD_VAR 0 3
41195: PUSH
41196: LD_INT 1
41198: DOUBLE
41199: EQUAL
41200: IFTRUE 41204
41202: GO 41221
41204: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41205: LD_VAR 0 1
41209: PPUSH
41210: LD_VAR 0 10
41214: PPUSH
41215: CALL_OW 115
41219: GO 41282
41221: LD_INT 2
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41251
41229: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41230: LD_VAR 0 1
41234: PPUSH
41235: LD_VAR 0 6
41239: PPUSH
41240: LD_VAR 0 7
41244: PPUSH
41245: CALL_OW 153
41249: GO 41282
41251: LD_INT 3
41253: DOUBLE
41254: EQUAL
41255: IFTRUE 41259
41257: GO 41281
41259: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41260: LD_VAR 0 1
41264: PPUSH
41265: LD_VAR 0 6
41269: PPUSH
41270: LD_VAR 0 7
41274: PPUSH
41275: CALL_OW 154
41279: GO 41282
41281: POP
// end ;
41282: LD_VAR 0 2
41286: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41287: LD_INT 0
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
// if not unit or not building then
41295: LD_VAR 0 1
41299: NOT
41300: PUSH
41301: LD_VAR 0 2
41305: NOT
41306: OR
41307: IFFALSE 41311
// exit ;
41309: GO 41469
// x := GetX ( building ) ;
41311: LD_ADDR_VAR 0 5
41315: PUSH
41316: LD_VAR 0 2
41320: PPUSH
41321: CALL_OW 250
41325: ST_TO_ADDR
// y := GetY ( building ) ;
41326: LD_ADDR_VAR 0 6
41330: PUSH
41331: LD_VAR 0 2
41335: PPUSH
41336: CALL_OW 251
41340: ST_TO_ADDR
// for i = 0 to 5 do
41341: LD_ADDR_VAR 0 4
41345: PUSH
41346: DOUBLE
41347: LD_INT 0
41349: DEC
41350: ST_TO_ADDR
41351: LD_INT 5
41353: PUSH
41354: FOR_TO
41355: IFFALSE 41467
// begin _x := ShiftX ( x , i , 3 ) ;
41357: LD_ADDR_VAR 0 7
41361: PUSH
41362: LD_VAR 0 5
41366: PPUSH
41367: LD_VAR 0 4
41371: PPUSH
41372: LD_INT 3
41374: PPUSH
41375: CALL_OW 272
41379: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41380: LD_ADDR_VAR 0 8
41384: PUSH
41385: LD_VAR 0 6
41389: PPUSH
41390: LD_VAR 0 4
41394: PPUSH
41395: LD_INT 3
41397: PPUSH
41398: CALL_OW 273
41402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41403: LD_VAR 0 7
41407: PPUSH
41408: LD_VAR 0 8
41412: PPUSH
41413: CALL_OW 488
41417: NOT
41418: IFFALSE 41422
// continue ;
41420: GO 41354
// if HexInfo ( _x , _y ) = 0 then
41422: LD_VAR 0 7
41426: PPUSH
41427: LD_VAR 0 8
41431: PPUSH
41432: CALL_OW 428
41436: PUSH
41437: LD_INT 0
41439: EQUAL
41440: IFFALSE 41465
// begin ComMoveXY ( unit , _x , _y ) ;
41442: LD_VAR 0 1
41446: PPUSH
41447: LD_VAR 0 7
41451: PPUSH
41452: LD_VAR 0 8
41456: PPUSH
41457: CALL_OW 111
// exit ;
41461: POP
41462: POP
41463: GO 41469
// end ; end ;
41465: GO 41354
41467: POP
41468: POP
// end ;
41469: LD_VAR 0 3
41473: RET
// export function ScanBase ( side , base_area ) ; begin
41474: LD_INT 0
41476: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41477: LD_ADDR_VAR 0 3
41481: PUSH
41482: LD_VAR 0 2
41486: PPUSH
41487: LD_INT 81
41489: PUSH
41490: LD_VAR 0 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PPUSH
41499: CALL_OW 70
41503: ST_TO_ADDR
// end ;
41504: LD_VAR 0 3
41508: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41509: LD_INT 0
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
// result := false ;
41515: LD_ADDR_VAR 0 2
41519: PUSH
41520: LD_INT 0
41522: ST_TO_ADDR
// side := GetSide ( unit ) ;
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_VAR 0 1
41532: PPUSH
41533: CALL_OW 255
41537: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41538: LD_ADDR_VAR 0 4
41542: PUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 248
41552: ST_TO_ADDR
// case nat of 1 :
41553: LD_VAR 0 4
41557: PUSH
41558: LD_INT 1
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 41577
41566: POP
// tech := tech_lassight ; 2 :
41567: LD_ADDR_VAR 0 5
41571: PUSH
41572: LD_INT 12
41574: ST_TO_ADDR
41575: GO 41616
41577: LD_INT 2
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41585
41583: GO 41596
41585: POP
// tech := tech_mortar ; 3 :
41586: LD_ADDR_VAR 0 5
41590: PUSH
41591: LD_INT 41
41593: ST_TO_ADDR
41594: GO 41616
41596: LD_INT 3
41598: DOUBLE
41599: EQUAL
41600: IFTRUE 41604
41602: GO 41615
41604: POP
// tech := tech_bazooka ; end ;
41605: LD_ADDR_VAR 0 5
41609: PUSH
41610: LD_INT 44
41612: ST_TO_ADDR
41613: GO 41616
41615: POP
// if Researched ( side , tech ) then
41616: LD_VAR 0 3
41620: PPUSH
41621: LD_VAR 0 5
41625: PPUSH
41626: CALL_OW 325
41630: IFFALSE 41657
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41632: LD_ADDR_VAR 0 2
41636: PUSH
41637: LD_INT 5
41639: PUSH
41640: LD_INT 8
41642: PUSH
41643: LD_INT 9
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: PUSH
41651: LD_VAR 0 4
41655: ARRAY
41656: ST_TO_ADDR
// end ;
41657: LD_VAR 0 2
41661: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41662: LD_INT 0
41664: PPUSH
41665: PPUSH
41666: PPUSH
// if not mines then
41667: LD_VAR 0 2
41671: NOT
41672: IFFALSE 41676
// exit ;
41674: GO 41820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41676: LD_ADDR_VAR 0 5
41680: PUSH
41681: LD_INT 81
41683: PUSH
41684: LD_VAR 0 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 3
41695: PUSH
41696: LD_INT 21
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PPUSH
41714: CALL_OW 69
41718: ST_TO_ADDR
// for i in mines do
41719: LD_ADDR_VAR 0 4
41723: PUSH
41724: LD_VAR 0 2
41728: PUSH
41729: FOR_IN
41730: IFFALSE 41818
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41732: LD_VAR 0 4
41736: PUSH
41737: LD_INT 1
41739: ARRAY
41740: PPUSH
41741: LD_VAR 0 4
41745: PUSH
41746: LD_INT 2
41748: ARRAY
41749: PPUSH
41750: CALL_OW 458
41754: NOT
41755: IFFALSE 41759
// continue ;
41757: GO 41729
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41759: LD_VAR 0 4
41763: PUSH
41764: LD_INT 1
41766: ARRAY
41767: PPUSH
41768: LD_VAR 0 4
41772: PUSH
41773: LD_INT 2
41775: ARRAY
41776: PPUSH
41777: CALL_OW 428
41781: PUSH
41782: LD_VAR 0 5
41786: IN
41787: IFFALSE 41816
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41789: LD_VAR 0 4
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PPUSH
41798: LD_VAR 0 4
41802: PUSH
41803: LD_INT 2
41805: ARRAY
41806: PPUSH
41807: LD_VAR 0 1
41811: PPUSH
41812: CALL_OW 456
// end ;
41816: GO 41729
41818: POP
41819: POP
// end ;
41820: LD_VAR 0 3
41824: RET
// export function Count ( array ) ; var i ; begin
41825: LD_INT 0
41827: PPUSH
41828: PPUSH
// result := 0 ;
41829: LD_ADDR_VAR 0 2
41833: PUSH
41834: LD_INT 0
41836: ST_TO_ADDR
// for i in array do
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_VAR 0 1
41846: PUSH
41847: FOR_IN
41848: IFFALSE 41872
// if i then
41850: LD_VAR 0 3
41854: IFFALSE 41870
// result := result + 1 ;
41856: LD_ADDR_VAR 0 2
41860: PUSH
41861: LD_VAR 0 2
41865: PUSH
41866: LD_INT 1
41868: PLUS
41869: ST_TO_ADDR
41870: GO 41847
41872: POP
41873: POP
// end ;
41874: LD_VAR 0 2
41878: RET
// export function IsEmpty ( building ) ; begin
41879: LD_INT 0
41881: PPUSH
// if not building then
41882: LD_VAR 0 1
41886: NOT
41887: IFFALSE 41891
// exit ;
41889: GO 41934
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41891: LD_ADDR_VAR 0 2
41895: PUSH
41896: LD_VAR 0 1
41900: PUSH
41901: LD_INT 22
41903: PUSH
41904: LD_VAR 0 1
41908: PPUSH
41909: CALL_OW 255
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 58
41920: PUSH
41921: EMPTY
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PPUSH
41928: CALL_OW 69
41932: IN
41933: ST_TO_ADDR
// end ;
41934: LD_VAR 0 2
41938: RET
// export function IsNotFull ( building ) ; var places ; begin
41939: LD_INT 0
41941: PPUSH
41942: PPUSH
// if not building then
41943: LD_VAR 0 1
41947: NOT
41948: IFFALSE 41952
// exit ;
41950: GO 42123
// result := false ;
41952: LD_ADDR_VAR 0 2
41956: PUSH
41957: LD_INT 0
41959: ST_TO_ADDR
// places := 0 ;
41960: LD_ADDR_VAR 0 3
41964: PUSH
41965: LD_INT 0
41967: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 266
41977: PUSH
41978: LD_INT 0
41980: DOUBLE
41981: EQUAL
41982: IFTRUE 42040
41984: LD_INT 1
41986: DOUBLE
41987: EQUAL
41988: IFTRUE 42040
41990: LD_INT 6
41992: DOUBLE
41993: EQUAL
41994: IFTRUE 42040
41996: LD_INT 7
41998: DOUBLE
41999: EQUAL
42000: IFTRUE 42040
42002: LD_INT 8
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42040
42008: LD_INT 4
42010: DOUBLE
42011: EQUAL
42012: IFTRUE 42040
42014: LD_INT 5
42016: DOUBLE
42017: EQUAL
42018: IFTRUE 42040
42020: LD_INT 2
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42040
42026: LD_INT 3
42028: DOUBLE
42029: EQUAL
42030: IFTRUE 42040
42032: LD_INT 35
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42040
42038: GO 42051
42040: POP
// places := 6 ; b_bunker , b_breastwork :
42041: LD_ADDR_VAR 0 3
42045: PUSH
42046: LD_INT 6
42048: ST_TO_ADDR
42049: GO 42096
42051: LD_INT 32
42053: DOUBLE
42054: EQUAL
42055: IFTRUE 42065
42057: LD_INT 31
42059: DOUBLE
42060: EQUAL
42061: IFTRUE 42065
42063: GO 42076
42065: POP
// places := 1 ; b_control_tower :
42066: LD_ADDR_VAR 0 3
42070: PUSH
42071: LD_INT 1
42073: ST_TO_ADDR
42074: GO 42096
42076: LD_INT 36
42078: DOUBLE
42079: EQUAL
42080: IFTRUE 42084
42082: GO 42095
42084: POP
// places := 3 ; end ;
42085: LD_ADDR_VAR 0 3
42089: PUSH
42090: LD_INT 3
42092: ST_TO_ADDR
42093: GO 42096
42095: POP
// if places then
42096: LD_VAR 0 3
42100: IFFALSE 42123
// result := UnitsInside ( building ) < places ;
42102: LD_ADDR_VAR 0 2
42106: PUSH
42107: LD_VAR 0 1
42111: PPUSH
42112: CALL_OW 313
42116: PUSH
42117: LD_VAR 0 3
42121: LESS
42122: ST_TO_ADDR
// end ;
42123: LD_VAR 0 2
42127: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42128: LD_INT 0
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
// tmp := [ ] ;
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: EMPTY
42140: ST_TO_ADDR
// list := [ ] ;
42141: LD_ADDR_VAR 0 5
42145: PUSH
42146: EMPTY
42147: ST_TO_ADDR
// for i = 16 to 25 do
42148: LD_ADDR_VAR 0 4
42152: PUSH
42153: DOUBLE
42154: LD_INT 16
42156: DEC
42157: ST_TO_ADDR
42158: LD_INT 25
42160: PUSH
42161: FOR_TO
42162: IFFALSE 42235
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42164: LD_ADDR_VAR 0 3
42168: PUSH
42169: LD_VAR 0 3
42173: PUSH
42174: LD_INT 22
42176: PUSH
42177: LD_VAR 0 1
42181: PPUSH
42182: CALL_OW 255
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 91
42193: PUSH
42194: LD_VAR 0 1
42198: PUSH
42199: LD_INT 6
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 30
42209: PUSH
42210: LD_VAR 0 4
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: PPUSH
42227: CALL_OW 69
42231: ADD
42232: ST_TO_ADDR
42233: GO 42161
42235: POP
42236: POP
// for i = 1 to tmp do
42237: LD_ADDR_VAR 0 4
42241: PUSH
42242: DOUBLE
42243: LD_INT 1
42245: DEC
42246: ST_TO_ADDR
42247: LD_VAR 0 3
42251: PUSH
42252: FOR_TO
42253: IFFALSE 42341
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42255: LD_ADDR_VAR 0 5
42259: PUSH
42260: LD_VAR 0 5
42264: PUSH
42265: LD_VAR 0 3
42269: PUSH
42270: LD_VAR 0 4
42274: ARRAY
42275: PPUSH
42276: CALL_OW 266
42280: PUSH
42281: LD_VAR 0 3
42285: PUSH
42286: LD_VAR 0 4
42290: ARRAY
42291: PPUSH
42292: CALL_OW 250
42296: PUSH
42297: LD_VAR 0 3
42301: PUSH
42302: LD_VAR 0 4
42306: ARRAY
42307: PPUSH
42308: CALL_OW 251
42312: PUSH
42313: LD_VAR 0 3
42317: PUSH
42318: LD_VAR 0 4
42322: ARRAY
42323: PPUSH
42324: CALL_OW 254
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: ADD
42338: ST_TO_ADDR
42339: GO 42252
42341: POP
42342: POP
// result := list ;
42343: LD_ADDR_VAR 0 2
42347: PUSH
42348: LD_VAR 0 5
42352: ST_TO_ADDR
// end ;
42353: LD_VAR 0 2
42357: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42358: LD_INT 0
42360: PPUSH
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
42365: PPUSH
42366: PPUSH
// if not factory then
42367: LD_VAR 0 1
42371: NOT
42372: IFFALSE 42376
// exit ;
42374: GO 42969
// if control = control_apeman then
42376: LD_VAR 0 4
42380: PUSH
42381: LD_INT 5
42383: EQUAL
42384: IFFALSE 42493
// begin tmp := UnitsInside ( factory ) ;
42386: LD_ADDR_VAR 0 8
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 313
42400: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42401: LD_VAR 0 8
42405: PPUSH
42406: LD_INT 25
42408: PUSH
42409: LD_INT 12
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PPUSH
42416: CALL_OW 72
42420: NOT
42421: IFFALSE 42431
// control := control_manual ;
42423: LD_ADDR_VAR 0 4
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42431: LD_ADDR_VAR 0 8
42435: PUSH
42436: LD_VAR 0 1
42440: PPUSH
42441: CALL 42128 0 1
42445: ST_TO_ADDR
// if tmp then
42446: LD_VAR 0 8
42450: IFFALSE 42493
// begin for i in tmp do
42452: LD_ADDR_VAR 0 7
42456: PUSH
42457: LD_VAR 0 8
42461: PUSH
42462: FOR_IN
42463: IFFALSE 42491
// if i [ 1 ] = b_ext_radio then
42465: LD_VAR 0 7
42469: PUSH
42470: LD_INT 1
42472: ARRAY
42473: PUSH
42474: LD_INT 22
42476: EQUAL
42477: IFFALSE 42489
// begin control := control_remote ;
42479: LD_ADDR_VAR 0 4
42483: PUSH
42484: LD_INT 2
42486: ST_TO_ADDR
// break ;
42487: GO 42491
// end ;
42489: GO 42462
42491: POP
42492: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42493: LD_VAR 0 1
42497: PPUSH
42498: LD_VAR 0 2
42502: PPUSH
42503: LD_VAR 0 3
42507: PPUSH
42508: LD_VAR 0 4
42512: PPUSH
42513: LD_VAR 0 5
42517: PPUSH
42518: CALL_OW 448
42522: IFFALSE 42557
// begin result := [ chassis , engine , control , weapon ] ;
42524: LD_ADDR_VAR 0 6
42528: PUSH
42529: LD_VAR 0 2
42533: PUSH
42534: LD_VAR 0 3
42538: PUSH
42539: LD_VAR 0 4
42543: PUSH
42544: LD_VAR 0 5
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: ST_TO_ADDR
// exit ;
42555: GO 42969
// end ; _chassis := AvailableChassisList ( factory ) ;
42557: LD_ADDR_VAR 0 9
42561: PUSH
42562: LD_VAR 0 1
42566: PPUSH
42567: CALL_OW 475
42571: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42572: LD_ADDR_VAR 0 11
42576: PUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 476
42586: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42587: LD_ADDR_VAR 0 12
42591: PUSH
42592: LD_VAR 0 1
42596: PPUSH
42597: CALL_OW 477
42601: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42602: LD_ADDR_VAR 0 10
42606: PUSH
42607: LD_VAR 0 1
42611: PPUSH
42612: CALL_OW 478
42616: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42617: LD_VAR 0 9
42621: NOT
42622: PUSH
42623: LD_VAR 0 11
42627: NOT
42628: OR
42629: PUSH
42630: LD_VAR 0 12
42634: NOT
42635: OR
42636: PUSH
42637: LD_VAR 0 10
42641: NOT
42642: OR
42643: IFFALSE 42678
// begin result := [ chassis , engine , control , weapon ] ;
42645: LD_ADDR_VAR 0 6
42649: PUSH
42650: LD_VAR 0 2
42654: PUSH
42655: LD_VAR 0 3
42659: PUSH
42660: LD_VAR 0 4
42664: PUSH
42665: LD_VAR 0 5
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: ST_TO_ADDR
// exit ;
42676: GO 42969
// end ; if not chassis in _chassis then
42678: LD_VAR 0 2
42682: PUSH
42683: LD_VAR 0 9
42687: IN
42688: NOT
42689: IFFALSE 42715
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42691: LD_ADDR_VAR 0 2
42695: PUSH
42696: LD_VAR 0 9
42700: PUSH
42701: LD_INT 1
42703: PPUSH
42704: LD_VAR 0 9
42708: PPUSH
42709: CALL_OW 12
42713: ARRAY
42714: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42715: LD_VAR 0 2
42719: PPUSH
42720: LD_VAR 0 3
42724: PPUSH
42725: CALL 42974 0 2
42729: NOT
42730: IFFALSE 42789
// repeat engine := _engine [ 1 ] ;
42732: LD_ADDR_VAR 0 3
42736: PUSH
42737: LD_VAR 0 11
42741: PUSH
42742: LD_INT 1
42744: ARRAY
42745: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42746: LD_ADDR_VAR 0 11
42750: PUSH
42751: LD_VAR 0 11
42755: PPUSH
42756: LD_INT 1
42758: PPUSH
42759: CALL_OW 3
42763: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42764: LD_VAR 0 2
42768: PPUSH
42769: LD_VAR 0 3
42773: PPUSH
42774: CALL 42974 0 2
42778: PUSH
42779: LD_VAR 0 11
42783: PUSH
42784: EMPTY
42785: EQUAL
42786: OR
42787: IFFALSE 42732
// if not control in _control then
42789: LD_VAR 0 4
42793: PUSH
42794: LD_VAR 0 12
42798: IN
42799: NOT
42800: IFFALSE 42826
// control := _control [ rand ( 1 , _control ) ] ;
42802: LD_ADDR_VAR 0 4
42806: PUSH
42807: LD_VAR 0 12
42811: PUSH
42812: LD_INT 1
42814: PPUSH
42815: LD_VAR 0 12
42819: PPUSH
42820: CALL_OW 12
42824: ARRAY
42825: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42826: LD_VAR 0 2
42830: PPUSH
42831: LD_VAR 0 5
42835: PPUSH
42836: CALL 43194 0 2
42840: NOT
42841: IFFALSE 42900
// repeat weapon := _weapon [ 1 ] ;
42843: LD_ADDR_VAR 0 5
42847: PUSH
42848: LD_VAR 0 10
42852: PUSH
42853: LD_INT 1
42855: ARRAY
42856: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42857: LD_ADDR_VAR 0 10
42861: PUSH
42862: LD_VAR 0 10
42866: PPUSH
42867: LD_INT 1
42869: PPUSH
42870: CALL_OW 3
42874: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42875: LD_VAR 0 2
42879: PPUSH
42880: LD_VAR 0 5
42884: PPUSH
42885: CALL 43194 0 2
42889: PUSH
42890: LD_VAR 0 10
42894: PUSH
42895: EMPTY
42896: EQUAL
42897: OR
42898: IFFALSE 42843
// result := [ ] ;
42900: LD_ADDR_VAR 0 6
42904: PUSH
42905: EMPTY
42906: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42907: LD_VAR 0 1
42911: PPUSH
42912: LD_VAR 0 2
42916: PPUSH
42917: LD_VAR 0 3
42921: PPUSH
42922: LD_VAR 0 4
42926: PPUSH
42927: LD_VAR 0 5
42931: PPUSH
42932: CALL_OW 448
42936: IFFALSE 42969
// result := [ chassis , engine , control , weapon ] ;
42938: LD_ADDR_VAR 0 6
42942: PUSH
42943: LD_VAR 0 2
42947: PUSH
42948: LD_VAR 0 3
42952: PUSH
42953: LD_VAR 0 4
42957: PUSH
42958: LD_VAR 0 5
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: ST_TO_ADDR
// end ;
42969: LD_VAR 0 6
42973: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42974: LD_INT 0
42976: PPUSH
// if not chassis or not engine then
42977: LD_VAR 0 1
42981: NOT
42982: PUSH
42983: LD_VAR 0 2
42987: NOT
42988: OR
42989: IFFALSE 42993
// exit ;
42991: GO 43189
// case engine of engine_solar :
42993: LD_VAR 0 2
42997: PUSH
42998: LD_INT 2
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43006
43004: GO 43044
43006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43007: LD_ADDR_VAR 0 3
43011: PUSH
43012: LD_INT 11
43014: PUSH
43015: LD_INT 12
43017: PUSH
43018: LD_INT 13
43020: PUSH
43021: LD_INT 14
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
43042: GO 43173
43044: LD_INT 1
43046: DOUBLE
43047: EQUAL
43048: IFTRUE 43052
43050: GO 43114
43052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43053: LD_ADDR_VAR 0 3
43057: PUSH
43058: LD_INT 11
43060: PUSH
43061: LD_INT 12
43063: PUSH
43064: LD_INT 13
43066: PUSH
43067: LD_INT 14
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: LD_INT 4
43081: PUSH
43082: LD_INT 5
43084: PUSH
43085: LD_INT 21
43087: PUSH
43088: LD_INT 23
43090: PUSH
43091: LD_INT 22
43093: PUSH
43094: LD_INT 24
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
43112: GO 43173
43114: LD_INT 3
43116: DOUBLE
43117: EQUAL
43118: IFTRUE 43122
43120: GO 43172
43122: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_INT 13
43130: PUSH
43131: LD_INT 14
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 4
43142: PUSH
43143: LD_INT 5
43145: PUSH
43146: LD_INT 21
43148: PUSH
43149: LD_INT 22
43151: PUSH
43152: LD_INT 23
43154: PUSH
43155: LD_INT 24
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: ST_TO_ADDR
43170: GO 43173
43172: POP
// result := ( chassis in result ) ;
43173: LD_ADDR_VAR 0 3
43177: PUSH
43178: LD_VAR 0 1
43182: PUSH
43183: LD_VAR 0 3
43187: IN
43188: ST_TO_ADDR
// end ;
43189: LD_VAR 0 3
43193: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43194: LD_INT 0
43196: PPUSH
// if not chassis or not weapon then
43197: LD_VAR 0 1
43201: NOT
43202: PUSH
43203: LD_VAR 0 2
43207: NOT
43208: OR
43209: IFFALSE 43213
// exit ;
43211: GO 44273
// case weapon of us_machine_gun :
43213: LD_VAR 0 2
43217: PUSH
43218: LD_INT 2
43220: DOUBLE
43221: EQUAL
43222: IFTRUE 43226
43224: GO 43256
43226: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43227: LD_ADDR_VAR 0 3
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 2
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 4
43243: PUSH
43244: LD_INT 5
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: ST_TO_ADDR
43254: GO 44257
43256: LD_INT 3
43258: DOUBLE
43259: EQUAL
43260: IFTRUE 43264
43262: GO 43294
43264: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43265: LD_ADDR_VAR 0 3
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: LD_INT 4
43281: PUSH
43282: LD_INT 5
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
43292: GO 44257
43294: LD_INT 11
43296: DOUBLE
43297: EQUAL
43298: IFTRUE 43302
43300: GO 43332
43302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43303: LD_ADDR_VAR 0 3
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: LD_INT 3
43316: PUSH
43317: LD_INT 4
43319: PUSH
43320: LD_INT 5
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
43330: GO 44257
43332: LD_INT 4
43334: DOUBLE
43335: EQUAL
43336: IFTRUE 43340
43338: GO 43366
43340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43341: LD_ADDR_VAR 0 3
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
43364: GO 44257
43366: LD_INT 5
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43400
43374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
43398: GO 44257
43400: LD_INT 9
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43434
43408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43409: LD_ADDR_VAR 0 3
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: LD_INT 4
43422: PUSH
43423: LD_INT 5
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
43432: GO 44257
43434: LD_INT 7
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43468
43442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 4
43456: PUSH
43457: LD_INT 5
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
43466: GO 44257
43468: LD_INT 12
43470: DOUBLE
43471: EQUAL
43472: IFTRUE 43476
43474: GO 43502
43476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43477: LD_ADDR_VAR 0 3
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 4
43490: PUSH
43491: LD_INT 5
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
43500: GO 44257
43502: LD_INT 13
43504: DOUBLE
43505: EQUAL
43506: IFTRUE 43510
43508: GO 43536
43510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43511: LD_ADDR_VAR 0 3
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 4
43524: PUSH
43525: LD_INT 5
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: ST_TO_ADDR
43534: GO 44257
43536: LD_INT 14
43538: DOUBLE
43539: EQUAL
43540: IFTRUE 43544
43542: GO 43562
43544: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43545: LD_ADDR_VAR 0 3
43549: PUSH
43550: LD_INT 4
43552: PUSH
43553: LD_INT 5
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: ST_TO_ADDR
43560: GO 44257
43562: LD_INT 6
43564: DOUBLE
43565: EQUAL
43566: IFTRUE 43570
43568: GO 43588
43570: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43571: LD_ADDR_VAR 0 3
43575: PUSH
43576: LD_INT 4
43578: PUSH
43579: LD_INT 5
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: ST_TO_ADDR
43586: GO 44257
43588: LD_INT 10
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43614
43596: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_INT 4
43604: PUSH
43605: LD_INT 5
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: ST_TO_ADDR
43612: GO 44257
43614: LD_INT 22
43616: DOUBLE
43617: EQUAL
43618: IFTRUE 43622
43620: GO 43648
43622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43623: LD_ADDR_VAR 0 3
43627: PUSH
43628: LD_INT 11
43630: PUSH
43631: LD_INT 12
43633: PUSH
43634: LD_INT 13
43636: PUSH
43637: LD_INT 14
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
43646: GO 44257
43648: LD_INT 23
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43682
43656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_INT 11
43664: PUSH
43665: LD_INT 12
43667: PUSH
43668: LD_INT 13
43670: PUSH
43671: LD_INT 14
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
43680: GO 44257
43682: LD_INT 24
43684: DOUBLE
43685: EQUAL
43686: IFTRUE 43690
43688: GO 43716
43690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43691: LD_ADDR_VAR 0 3
43695: PUSH
43696: LD_INT 11
43698: PUSH
43699: LD_INT 12
43701: PUSH
43702: LD_INT 13
43704: PUSH
43705: LD_INT 14
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: ST_TO_ADDR
43714: GO 44257
43716: LD_INT 30
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 43750
43724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43725: LD_ADDR_VAR 0 3
43729: PUSH
43730: LD_INT 11
43732: PUSH
43733: LD_INT 12
43735: PUSH
43736: LD_INT 13
43738: PUSH
43739: LD_INT 14
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: ST_TO_ADDR
43748: GO 44257
43750: LD_INT 25
43752: DOUBLE
43753: EQUAL
43754: IFTRUE 43758
43756: GO 43776
43758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43759: LD_ADDR_VAR 0 3
43763: PUSH
43764: LD_INT 13
43766: PUSH
43767: LD_INT 14
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: ST_TO_ADDR
43774: GO 44257
43776: LD_INT 27
43778: DOUBLE
43779: EQUAL
43780: IFTRUE 43784
43782: GO 43802
43784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43785: LD_ADDR_VAR 0 3
43789: PUSH
43790: LD_INT 13
43792: PUSH
43793: LD_INT 14
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: ST_TO_ADDR
43800: GO 44257
43802: LD_INT 92
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43836
43810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43811: LD_ADDR_VAR 0 3
43815: PUSH
43816: LD_INT 11
43818: PUSH
43819: LD_INT 12
43821: PUSH
43822: LD_INT 13
43824: PUSH
43825: LD_INT 14
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: ST_TO_ADDR
43834: GO 44257
43836: LD_INT 28
43838: DOUBLE
43839: EQUAL
43840: IFTRUE 43844
43842: GO 43862
43844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43845: LD_ADDR_VAR 0 3
43849: PUSH
43850: LD_INT 13
43852: PUSH
43853: LD_INT 14
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: ST_TO_ADDR
43860: GO 44257
43862: LD_INT 29
43864: DOUBLE
43865: EQUAL
43866: IFTRUE 43870
43868: GO 43888
43870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43871: LD_ADDR_VAR 0 3
43875: PUSH
43876: LD_INT 13
43878: PUSH
43879: LD_INT 14
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: ST_TO_ADDR
43886: GO 44257
43888: LD_INT 31
43890: DOUBLE
43891: EQUAL
43892: IFTRUE 43896
43894: GO 43914
43896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43897: LD_ADDR_VAR 0 3
43901: PUSH
43902: LD_INT 13
43904: PUSH
43905: LD_INT 14
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: ST_TO_ADDR
43912: GO 44257
43914: LD_INT 26
43916: DOUBLE
43917: EQUAL
43918: IFTRUE 43922
43920: GO 43940
43922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43923: LD_ADDR_VAR 0 3
43927: PUSH
43928: LD_INT 13
43930: PUSH
43931: LD_INT 14
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: ST_TO_ADDR
43938: GO 44257
43940: LD_INT 42
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43948
43946: GO 43974
43948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43949: LD_ADDR_VAR 0 3
43953: PUSH
43954: LD_INT 21
43956: PUSH
43957: LD_INT 22
43959: PUSH
43960: LD_INT 23
43962: PUSH
43963: LD_INT 24
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
43972: GO 44257
43974: LD_INT 43
43976: DOUBLE
43977: EQUAL
43978: IFTRUE 43982
43980: GO 44008
43982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_INT 21
43990: PUSH
43991: LD_INT 22
43993: PUSH
43994: LD_INT 23
43996: PUSH
43997: LD_INT 24
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: ST_TO_ADDR
44006: GO 44257
44008: LD_INT 44
44010: DOUBLE
44011: EQUAL
44012: IFTRUE 44016
44014: GO 44042
44016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44017: LD_ADDR_VAR 0 3
44021: PUSH
44022: LD_INT 21
44024: PUSH
44025: LD_INT 22
44027: PUSH
44028: LD_INT 23
44030: PUSH
44031: LD_INT 24
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
44040: GO 44257
44042: LD_INT 45
44044: DOUBLE
44045: EQUAL
44046: IFTRUE 44050
44048: GO 44076
44050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44051: LD_ADDR_VAR 0 3
44055: PUSH
44056: LD_INT 21
44058: PUSH
44059: LD_INT 22
44061: PUSH
44062: LD_INT 23
44064: PUSH
44065: LD_INT 24
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
44074: GO 44257
44076: LD_INT 49
44078: DOUBLE
44079: EQUAL
44080: IFTRUE 44084
44082: GO 44110
44084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44085: LD_ADDR_VAR 0 3
44089: PUSH
44090: LD_INT 21
44092: PUSH
44093: LD_INT 22
44095: PUSH
44096: LD_INT 23
44098: PUSH
44099: LD_INT 24
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: ST_TO_ADDR
44108: GO 44257
44110: LD_INT 51
44112: DOUBLE
44113: EQUAL
44114: IFTRUE 44118
44116: GO 44144
44118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_INT 21
44126: PUSH
44127: LD_INT 22
44129: PUSH
44130: LD_INT 23
44132: PUSH
44133: LD_INT 24
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: ST_TO_ADDR
44142: GO 44257
44144: LD_INT 52
44146: DOUBLE
44147: EQUAL
44148: IFTRUE 44152
44150: GO 44178
44152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44153: LD_ADDR_VAR 0 3
44157: PUSH
44158: LD_INT 21
44160: PUSH
44161: LD_INT 22
44163: PUSH
44164: LD_INT 23
44166: PUSH
44167: LD_INT 24
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
44176: GO 44257
44178: LD_INT 53
44180: DOUBLE
44181: EQUAL
44182: IFTRUE 44186
44184: GO 44204
44186: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_INT 23
44194: PUSH
44195: LD_INT 24
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: ST_TO_ADDR
44202: GO 44257
44204: LD_INT 46
44206: DOUBLE
44207: EQUAL
44208: IFTRUE 44212
44210: GO 44230
44212: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44213: LD_ADDR_VAR 0 3
44217: PUSH
44218: LD_INT 23
44220: PUSH
44221: LD_INT 24
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: ST_TO_ADDR
44228: GO 44257
44230: LD_INT 47
44232: DOUBLE
44233: EQUAL
44234: IFTRUE 44238
44236: GO 44256
44238: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44239: LD_ADDR_VAR 0 3
44243: PUSH
44244: LD_INT 23
44246: PUSH
44247: LD_INT 24
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: ST_TO_ADDR
44254: GO 44257
44256: POP
// result := ( chassis in result ) ;
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_VAR 0 1
44266: PUSH
44267: LD_VAR 0 3
44271: IN
44272: ST_TO_ADDR
// end ;
44273: LD_VAR 0 3
44277: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44278: LD_INT 0
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
// result := array ;
44287: LD_ADDR_VAR 0 5
44291: PUSH
44292: LD_VAR 0 1
44296: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44297: LD_VAR 0 1
44301: NOT
44302: PUSH
44303: LD_VAR 0 2
44307: NOT
44308: OR
44309: PUSH
44310: LD_VAR 0 3
44314: NOT
44315: OR
44316: PUSH
44317: LD_VAR 0 2
44321: PUSH
44322: LD_VAR 0 1
44326: GREATER
44327: OR
44328: PUSH
44329: LD_VAR 0 3
44333: PUSH
44334: LD_VAR 0 1
44338: GREATER
44339: OR
44340: IFFALSE 44344
// exit ;
44342: GO 44640
// if direction then
44344: LD_VAR 0 4
44348: IFFALSE 44412
// begin d := 1 ;
44350: LD_ADDR_VAR 0 9
44354: PUSH
44355: LD_INT 1
44357: ST_TO_ADDR
// if i_from > i_to then
44358: LD_VAR 0 2
44362: PUSH
44363: LD_VAR 0 3
44367: GREATER
44368: IFFALSE 44394
// length := ( array - i_from ) + i_to else
44370: LD_ADDR_VAR 0 11
44374: PUSH
44375: LD_VAR 0 1
44379: PUSH
44380: LD_VAR 0 2
44384: MINUS
44385: PUSH
44386: LD_VAR 0 3
44390: PLUS
44391: ST_TO_ADDR
44392: GO 44410
// length := i_to - i_from ;
44394: LD_ADDR_VAR 0 11
44398: PUSH
44399: LD_VAR 0 3
44403: PUSH
44404: LD_VAR 0 2
44408: MINUS
44409: ST_TO_ADDR
// end else
44410: GO 44473
// begin d := - 1 ;
44412: LD_ADDR_VAR 0 9
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: ST_TO_ADDR
// if i_from > i_to then
44421: LD_VAR 0 2
44425: PUSH
44426: LD_VAR 0 3
44430: GREATER
44431: IFFALSE 44451
// length := i_from - i_to else
44433: LD_ADDR_VAR 0 11
44437: PUSH
44438: LD_VAR 0 2
44442: PUSH
44443: LD_VAR 0 3
44447: MINUS
44448: ST_TO_ADDR
44449: GO 44473
// length := ( array - i_to ) + i_from ;
44451: LD_ADDR_VAR 0 11
44455: PUSH
44456: LD_VAR 0 1
44460: PUSH
44461: LD_VAR 0 3
44465: MINUS
44466: PUSH
44467: LD_VAR 0 2
44471: PLUS
44472: ST_TO_ADDR
// end ; if not length then
44473: LD_VAR 0 11
44477: NOT
44478: IFFALSE 44482
// exit ;
44480: GO 44640
// tmp := array ;
44482: LD_ADDR_VAR 0 10
44486: PUSH
44487: LD_VAR 0 1
44491: ST_TO_ADDR
// for i = 1 to length do
44492: LD_ADDR_VAR 0 6
44496: PUSH
44497: DOUBLE
44498: LD_INT 1
44500: DEC
44501: ST_TO_ADDR
44502: LD_VAR 0 11
44506: PUSH
44507: FOR_TO
44508: IFFALSE 44628
// begin for j = 1 to array do
44510: LD_ADDR_VAR 0 7
44514: PUSH
44515: DOUBLE
44516: LD_INT 1
44518: DEC
44519: ST_TO_ADDR
44520: LD_VAR 0 1
44524: PUSH
44525: FOR_TO
44526: IFFALSE 44614
// begin k := j + d ;
44528: LD_ADDR_VAR 0 8
44532: PUSH
44533: LD_VAR 0 7
44537: PUSH
44538: LD_VAR 0 9
44542: PLUS
44543: ST_TO_ADDR
// if k > array then
44544: LD_VAR 0 8
44548: PUSH
44549: LD_VAR 0 1
44553: GREATER
44554: IFFALSE 44564
// k := 1 ;
44556: LD_ADDR_VAR 0 8
44560: PUSH
44561: LD_INT 1
44563: ST_TO_ADDR
// if not k then
44564: LD_VAR 0 8
44568: NOT
44569: IFFALSE 44581
// k := array ;
44571: LD_ADDR_VAR 0 8
44575: PUSH
44576: LD_VAR 0 1
44580: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44581: LD_ADDR_VAR 0 10
44585: PUSH
44586: LD_VAR 0 10
44590: PPUSH
44591: LD_VAR 0 8
44595: PPUSH
44596: LD_VAR 0 1
44600: PUSH
44601: LD_VAR 0 7
44605: ARRAY
44606: PPUSH
44607: CALL_OW 1
44611: ST_TO_ADDR
// end ;
44612: GO 44525
44614: POP
44615: POP
// array := tmp ;
44616: LD_ADDR_VAR 0 1
44620: PUSH
44621: LD_VAR 0 10
44625: ST_TO_ADDR
// end ;
44626: GO 44507
44628: POP
44629: POP
// result := array ;
44630: LD_ADDR_VAR 0 5
44634: PUSH
44635: LD_VAR 0 1
44639: ST_TO_ADDR
// end ;
44640: LD_VAR 0 5
44644: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44645: LD_INT 0
44647: PPUSH
44648: PPUSH
// result := 0 ;
44649: LD_ADDR_VAR 0 3
44653: PUSH
44654: LD_INT 0
44656: ST_TO_ADDR
// if not array or not value in array then
44657: LD_VAR 0 1
44661: NOT
44662: PUSH
44663: LD_VAR 0 2
44667: PUSH
44668: LD_VAR 0 1
44672: IN
44673: NOT
44674: OR
44675: IFFALSE 44679
// exit ;
44677: GO 44733
// for i = 1 to array do
44679: LD_ADDR_VAR 0 4
44683: PUSH
44684: DOUBLE
44685: LD_INT 1
44687: DEC
44688: ST_TO_ADDR
44689: LD_VAR 0 1
44693: PUSH
44694: FOR_TO
44695: IFFALSE 44731
// if value = array [ i ] then
44697: LD_VAR 0 2
44701: PUSH
44702: LD_VAR 0 1
44706: PUSH
44707: LD_VAR 0 4
44711: ARRAY
44712: EQUAL
44713: IFFALSE 44729
// begin result := i ;
44715: LD_ADDR_VAR 0 3
44719: PUSH
44720: LD_VAR 0 4
44724: ST_TO_ADDR
// exit ;
44725: POP
44726: POP
44727: GO 44733
// end ;
44729: GO 44694
44731: POP
44732: POP
// end ;
44733: LD_VAR 0 3
44737: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44738: LD_INT 0
44740: PPUSH
// vc_chassis := chassis ;
44741: LD_ADDR_OWVAR 37
44745: PUSH
44746: LD_VAR 0 1
44750: ST_TO_ADDR
// vc_engine := engine ;
44751: LD_ADDR_OWVAR 39
44755: PUSH
44756: LD_VAR 0 2
44760: ST_TO_ADDR
// vc_control := control ;
44761: LD_ADDR_OWVAR 38
44765: PUSH
44766: LD_VAR 0 3
44770: ST_TO_ADDR
// vc_weapon := weapon ;
44771: LD_ADDR_OWVAR 40
44775: PUSH
44776: LD_VAR 0 4
44780: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44781: LD_ADDR_OWVAR 41
44785: PUSH
44786: LD_VAR 0 5
44790: ST_TO_ADDR
// end ;
44791: LD_VAR 0 6
44795: RET
// export function WantPlant ( unit ) ; var task ; begin
44796: LD_INT 0
44798: PPUSH
44799: PPUSH
// result := false ;
44800: LD_ADDR_VAR 0 2
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44808: LD_ADDR_VAR 0 3
44812: PUSH
44813: LD_VAR 0 1
44817: PPUSH
44818: CALL_OW 437
44822: ST_TO_ADDR
// if task then
44823: LD_VAR 0 3
44827: IFFALSE 44855
// if task [ 1 ] [ 1 ] = p then
44829: LD_VAR 0 3
44833: PUSH
44834: LD_INT 1
44836: ARRAY
44837: PUSH
44838: LD_INT 1
44840: ARRAY
44841: PUSH
44842: LD_STRING p
44844: EQUAL
44845: IFFALSE 44855
// result := true ;
44847: LD_ADDR_VAR 0 2
44851: PUSH
44852: LD_INT 1
44854: ST_TO_ADDR
// end ;
44855: LD_VAR 0 2
44859: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44860: LD_INT 0
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
// if pos < 1 then
44866: LD_VAR 0 2
44870: PUSH
44871: LD_INT 1
44873: LESS
44874: IFFALSE 44878
// exit ;
44876: GO 45181
// if pos = 1 then
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 1
44885: EQUAL
44886: IFFALSE 44919
// result := Replace ( arr , pos [ 1 ] , value ) else
44888: LD_ADDR_VAR 0 4
44892: PUSH
44893: LD_VAR 0 1
44897: PPUSH
44898: LD_VAR 0 2
44902: PUSH
44903: LD_INT 1
44905: ARRAY
44906: PPUSH
44907: LD_VAR 0 3
44911: PPUSH
44912: CALL_OW 1
44916: ST_TO_ADDR
44917: GO 45181
// begin tmp := arr ;
44919: LD_ADDR_VAR 0 6
44923: PUSH
44924: LD_VAR 0 1
44928: ST_TO_ADDR
// s_arr := [ tmp ] ;
44929: LD_ADDR_VAR 0 7
44933: PUSH
44934: LD_VAR 0 6
44938: PUSH
44939: EMPTY
44940: LIST
44941: ST_TO_ADDR
// for i = 1 to pos - 1 do
44942: LD_ADDR_VAR 0 5
44946: PUSH
44947: DOUBLE
44948: LD_INT 1
44950: DEC
44951: ST_TO_ADDR
44952: LD_VAR 0 2
44956: PUSH
44957: LD_INT 1
44959: MINUS
44960: PUSH
44961: FOR_TO
44962: IFFALSE 45007
// begin tmp := tmp [ pos [ i ] ] ;
44964: LD_ADDR_VAR 0 6
44968: PUSH
44969: LD_VAR 0 6
44973: PUSH
44974: LD_VAR 0 2
44978: PUSH
44979: LD_VAR 0 5
44983: ARRAY
44984: ARRAY
44985: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44986: LD_ADDR_VAR 0 7
44990: PUSH
44991: LD_VAR 0 7
44995: PUSH
44996: LD_VAR 0 6
45000: PUSH
45001: EMPTY
45002: LIST
45003: ADD
45004: ST_TO_ADDR
// end ;
45005: GO 44961
45007: POP
45008: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45009: LD_ADDR_VAR 0 6
45013: PUSH
45014: LD_VAR 0 6
45018: PPUSH
45019: LD_VAR 0 2
45023: PUSH
45024: LD_VAR 0 2
45028: ARRAY
45029: PPUSH
45030: LD_VAR 0 3
45034: PPUSH
45035: CALL_OW 1
45039: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45040: LD_ADDR_VAR 0 7
45044: PUSH
45045: LD_VAR 0 7
45049: PPUSH
45050: LD_VAR 0 7
45054: PPUSH
45055: LD_VAR 0 6
45059: PPUSH
45060: CALL_OW 1
45064: ST_TO_ADDR
// for i = s_arr downto 2 do
45065: LD_ADDR_VAR 0 5
45069: PUSH
45070: DOUBLE
45071: LD_VAR 0 7
45075: INC
45076: ST_TO_ADDR
45077: LD_INT 2
45079: PUSH
45080: FOR_DOWNTO
45081: IFFALSE 45165
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45083: LD_ADDR_VAR 0 6
45087: PUSH
45088: LD_VAR 0 7
45092: PUSH
45093: LD_VAR 0 5
45097: PUSH
45098: LD_INT 1
45100: MINUS
45101: ARRAY
45102: PPUSH
45103: LD_VAR 0 2
45107: PUSH
45108: LD_VAR 0 5
45112: PUSH
45113: LD_INT 1
45115: MINUS
45116: ARRAY
45117: PPUSH
45118: LD_VAR 0 7
45122: PUSH
45123: LD_VAR 0 5
45127: ARRAY
45128: PPUSH
45129: CALL_OW 1
45133: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45134: LD_ADDR_VAR 0 7
45138: PUSH
45139: LD_VAR 0 7
45143: PPUSH
45144: LD_VAR 0 5
45148: PUSH
45149: LD_INT 1
45151: MINUS
45152: PPUSH
45153: LD_VAR 0 6
45157: PPUSH
45158: CALL_OW 1
45162: ST_TO_ADDR
// end ;
45163: GO 45080
45165: POP
45166: POP
// result := s_arr [ 1 ] ;
45167: LD_ADDR_VAR 0 4
45171: PUSH
45172: LD_VAR 0 7
45176: PUSH
45177: LD_INT 1
45179: ARRAY
45180: ST_TO_ADDR
// end ; end ;
45181: LD_VAR 0 4
45185: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45186: LD_INT 0
45188: PPUSH
45189: PPUSH
// if not list then
45190: LD_VAR 0 1
45194: NOT
45195: IFFALSE 45199
// exit ;
45197: GO 45290
// i := list [ pos1 ] ;
45199: LD_ADDR_VAR 0 5
45203: PUSH
45204: LD_VAR 0 1
45208: PUSH
45209: LD_VAR 0 2
45213: ARRAY
45214: ST_TO_ADDR
// if not i then
45215: LD_VAR 0 5
45219: NOT
45220: IFFALSE 45224
// exit ;
45222: GO 45290
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45224: LD_ADDR_VAR 0 1
45228: PUSH
45229: LD_VAR 0 1
45233: PPUSH
45234: LD_VAR 0 2
45238: PPUSH
45239: LD_VAR 0 1
45243: PUSH
45244: LD_VAR 0 3
45248: ARRAY
45249: PPUSH
45250: CALL_OW 1
45254: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45255: LD_ADDR_VAR 0 1
45259: PUSH
45260: LD_VAR 0 1
45264: PPUSH
45265: LD_VAR 0 3
45269: PPUSH
45270: LD_VAR 0 5
45274: PPUSH
45275: CALL_OW 1
45279: ST_TO_ADDR
// result := list ;
45280: LD_ADDR_VAR 0 4
45284: PUSH
45285: LD_VAR 0 1
45289: ST_TO_ADDR
// end ;
45290: LD_VAR 0 4
45294: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45295: LD_INT 0
45297: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45298: LD_ADDR_VAR 0 5
45302: PUSH
45303: LD_VAR 0 1
45307: PPUSH
45308: CALL_OW 250
45312: PPUSH
45313: LD_VAR 0 1
45317: PPUSH
45318: CALL_OW 251
45322: PPUSH
45323: LD_VAR 0 2
45327: PPUSH
45328: LD_VAR 0 3
45332: PPUSH
45333: LD_VAR 0 4
45337: PPUSH
45338: CALL 45348 0 5
45342: ST_TO_ADDR
// end ;
45343: LD_VAR 0 5
45347: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45348: LD_INT 0
45350: PPUSH
45351: PPUSH
45352: PPUSH
45353: PPUSH
// if not list then
45354: LD_VAR 0 3
45358: NOT
45359: IFFALSE 45363
// exit ;
45361: GO 45751
// result := [ ] ;
45363: LD_ADDR_VAR 0 6
45367: PUSH
45368: EMPTY
45369: ST_TO_ADDR
// for i in list do
45370: LD_ADDR_VAR 0 7
45374: PUSH
45375: LD_VAR 0 3
45379: PUSH
45380: FOR_IN
45381: IFFALSE 45583
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45383: LD_ADDR_VAR 0 9
45387: PUSH
45388: LD_VAR 0 7
45392: PPUSH
45393: LD_VAR 0 1
45397: PPUSH
45398: LD_VAR 0 2
45402: PPUSH
45403: CALL_OW 297
45407: ST_TO_ADDR
// if not result then
45408: LD_VAR 0 6
45412: NOT
45413: IFFALSE 45439
// result := [ [ i , tmp ] ] else
45415: LD_ADDR_VAR 0 6
45419: PUSH
45420: LD_VAR 0 7
45424: PUSH
45425: LD_VAR 0 9
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: EMPTY
45435: LIST
45436: ST_TO_ADDR
45437: GO 45581
// begin if result [ result ] [ 2 ] < tmp then
45439: LD_VAR 0 6
45443: PUSH
45444: LD_VAR 0 6
45448: ARRAY
45449: PUSH
45450: LD_INT 2
45452: ARRAY
45453: PUSH
45454: LD_VAR 0 9
45458: LESS
45459: IFFALSE 45501
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45461: LD_ADDR_VAR 0 6
45465: PUSH
45466: LD_VAR 0 6
45470: PPUSH
45471: LD_VAR 0 6
45475: PUSH
45476: LD_INT 1
45478: PLUS
45479: PPUSH
45480: LD_VAR 0 7
45484: PUSH
45485: LD_VAR 0 9
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PPUSH
45494: CALL_OW 2
45498: ST_TO_ADDR
45499: GO 45581
// for j = 1 to result do
45501: LD_ADDR_VAR 0 8
45505: PUSH
45506: DOUBLE
45507: LD_INT 1
45509: DEC
45510: ST_TO_ADDR
45511: LD_VAR 0 6
45515: PUSH
45516: FOR_TO
45517: IFFALSE 45579
// begin if tmp < result [ j ] [ 2 ] then
45519: LD_VAR 0 9
45523: PUSH
45524: LD_VAR 0 6
45528: PUSH
45529: LD_VAR 0 8
45533: ARRAY
45534: PUSH
45535: LD_INT 2
45537: ARRAY
45538: LESS
45539: IFFALSE 45577
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45541: LD_ADDR_VAR 0 6
45545: PUSH
45546: LD_VAR 0 6
45550: PPUSH
45551: LD_VAR 0 8
45555: PPUSH
45556: LD_VAR 0 7
45560: PUSH
45561: LD_VAR 0 9
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PPUSH
45570: CALL_OW 2
45574: ST_TO_ADDR
// break ;
45575: GO 45579
// end ; end ;
45577: GO 45516
45579: POP
45580: POP
// end ; end ;
45581: GO 45380
45583: POP
45584: POP
// if result and not asc then
45585: LD_VAR 0 6
45589: PUSH
45590: LD_VAR 0 4
45594: NOT
45595: AND
45596: IFFALSE 45671
// begin tmp := result ;
45598: LD_ADDR_VAR 0 9
45602: PUSH
45603: LD_VAR 0 6
45607: ST_TO_ADDR
// for i = tmp downto 1 do
45608: LD_ADDR_VAR 0 7
45612: PUSH
45613: DOUBLE
45614: LD_VAR 0 9
45618: INC
45619: ST_TO_ADDR
45620: LD_INT 1
45622: PUSH
45623: FOR_DOWNTO
45624: IFFALSE 45669
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45626: LD_ADDR_VAR 0 6
45630: PUSH
45631: LD_VAR 0 6
45635: PPUSH
45636: LD_VAR 0 9
45640: PUSH
45641: LD_VAR 0 7
45645: MINUS
45646: PUSH
45647: LD_INT 1
45649: PLUS
45650: PPUSH
45651: LD_VAR 0 9
45655: PUSH
45656: LD_VAR 0 7
45660: ARRAY
45661: PPUSH
45662: CALL_OW 1
45666: ST_TO_ADDR
45667: GO 45623
45669: POP
45670: POP
// end ; tmp := [ ] ;
45671: LD_ADDR_VAR 0 9
45675: PUSH
45676: EMPTY
45677: ST_TO_ADDR
// if mode then
45678: LD_VAR 0 5
45682: IFFALSE 45751
// begin for i = 1 to result do
45684: LD_ADDR_VAR 0 7
45688: PUSH
45689: DOUBLE
45690: LD_INT 1
45692: DEC
45693: ST_TO_ADDR
45694: LD_VAR 0 6
45698: PUSH
45699: FOR_TO
45700: IFFALSE 45739
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45702: LD_ADDR_VAR 0 9
45706: PUSH
45707: LD_VAR 0 9
45711: PPUSH
45712: LD_VAR 0 7
45716: PPUSH
45717: LD_VAR 0 6
45721: PUSH
45722: LD_VAR 0 7
45726: ARRAY
45727: PUSH
45728: LD_INT 1
45730: ARRAY
45731: PPUSH
45732: CALL_OW 1
45736: ST_TO_ADDR
45737: GO 45699
45739: POP
45740: POP
// result := tmp ;
45741: LD_ADDR_VAR 0 6
45745: PUSH
45746: LD_VAR 0 9
45750: ST_TO_ADDR
// end ; end ;
45751: LD_VAR 0 6
45755: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45756: LD_INT 0
45758: PPUSH
45759: PPUSH
45760: PPUSH
45761: PPUSH
45762: PPUSH
45763: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45764: LD_ADDR_VAR 0 5
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: ST_TO_ADDR
// if not x or not y then
45786: LD_VAR 0 2
45790: NOT
45791: PUSH
45792: LD_VAR 0 3
45796: NOT
45797: OR
45798: IFFALSE 45802
// exit ;
45800: GO 47452
// if not range then
45802: LD_VAR 0 4
45806: NOT
45807: IFFALSE 45817
// range := 10 ;
45809: LD_ADDR_VAR 0 4
45813: PUSH
45814: LD_INT 10
45816: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45817: LD_ADDR_VAR 0 8
45821: PUSH
45822: LD_INT 81
45824: PUSH
45825: LD_VAR 0 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 92
45836: PUSH
45837: LD_VAR 0 2
45841: PUSH
45842: LD_VAR 0 3
45846: PUSH
45847: LD_VAR 0 4
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: LD_INT 21
45863: PUSH
45864: LD_INT 3
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: PPUSH
45880: CALL_OW 69
45884: ST_TO_ADDR
// if not tmp then
45885: LD_VAR 0 8
45889: NOT
45890: IFFALSE 45894
// exit ;
45892: GO 47452
// for i in tmp do
45894: LD_ADDR_VAR 0 6
45898: PUSH
45899: LD_VAR 0 8
45903: PUSH
45904: FOR_IN
45905: IFFALSE 47427
// begin points := [ 0 , 0 , 0 ] ;
45907: LD_ADDR_VAR 0 9
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// bpoints := 1 ;
45926: LD_ADDR_VAR 0 10
45930: PUSH
45931: LD_INT 1
45933: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45934: LD_VAR 0 6
45938: PPUSH
45939: CALL_OW 247
45943: PUSH
45944: LD_INT 1
45946: DOUBLE
45947: EQUAL
45948: IFTRUE 45952
45950: GO 46530
45952: POP
// begin if GetClass ( i ) = 1 then
45953: LD_VAR 0 6
45957: PPUSH
45958: CALL_OW 257
45962: PUSH
45963: LD_INT 1
45965: EQUAL
45966: IFFALSE 45987
// points := [ 10 , 5 , 3 ] ;
45968: LD_ADDR_VAR 0 9
45972: PUSH
45973: LD_INT 10
45975: PUSH
45976: LD_INT 5
45978: PUSH
45979: LD_INT 3
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45987: LD_VAR 0 6
45991: PPUSH
45992: CALL_OW 257
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: LD_INT 4
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: IN
46011: IFFALSE 46032
// points := [ 3 , 2 , 1 ] ;
46013: LD_ADDR_VAR 0 9
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46032: LD_VAR 0 6
46036: PPUSH
46037: CALL_OW 257
46041: PUSH
46042: LD_INT 5
46044: EQUAL
46045: IFFALSE 46066
// points := [ 130 , 5 , 2 ] ;
46047: LD_ADDR_VAR 0 9
46051: PUSH
46052: LD_INT 130
46054: PUSH
46055: LD_INT 5
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46066: LD_VAR 0 6
46070: PPUSH
46071: CALL_OW 257
46075: PUSH
46076: LD_INT 8
46078: EQUAL
46079: IFFALSE 46100
// points := [ 35 , 35 , 30 ] ;
46081: LD_ADDR_VAR 0 9
46085: PUSH
46086: LD_INT 35
46088: PUSH
46089: LD_INT 35
46091: PUSH
46092: LD_INT 30
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46100: LD_VAR 0 6
46104: PPUSH
46105: CALL_OW 257
46109: PUSH
46110: LD_INT 9
46112: EQUAL
46113: IFFALSE 46134
// points := [ 20 , 55 , 40 ] ;
46115: LD_ADDR_VAR 0 9
46119: PUSH
46120: LD_INT 20
46122: PUSH
46123: LD_INT 55
46125: PUSH
46126: LD_INT 40
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46134: LD_VAR 0 6
46138: PPUSH
46139: CALL_OW 257
46143: PUSH
46144: LD_INT 12
46146: PUSH
46147: LD_INT 16
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: IN
46154: IFFALSE 46175
// points := [ 5 , 3 , 2 ] ;
46156: LD_ADDR_VAR 0 9
46160: PUSH
46161: LD_INT 5
46163: PUSH
46164: LD_INT 3
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46175: LD_VAR 0 6
46179: PPUSH
46180: CALL_OW 257
46184: PUSH
46185: LD_INT 17
46187: EQUAL
46188: IFFALSE 46209
// points := [ 100 , 50 , 75 ] ;
46190: LD_ADDR_VAR 0 9
46194: PUSH
46195: LD_INT 100
46197: PUSH
46198: LD_INT 50
46200: PUSH
46201: LD_INT 75
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46209: LD_VAR 0 6
46213: PPUSH
46214: CALL_OW 257
46218: PUSH
46219: LD_INT 15
46221: EQUAL
46222: IFFALSE 46243
// points := [ 10 , 5 , 3 ] ;
46224: LD_ADDR_VAR 0 9
46228: PUSH
46229: LD_INT 10
46231: PUSH
46232: LD_INT 5
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46243: LD_VAR 0 6
46247: PPUSH
46248: CALL_OW 257
46252: PUSH
46253: LD_INT 14
46255: EQUAL
46256: IFFALSE 46277
// points := [ 10 , 0 , 0 ] ;
46258: LD_ADDR_VAR 0 9
46262: PUSH
46263: LD_INT 10
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46277: LD_VAR 0 6
46281: PPUSH
46282: CALL_OW 257
46286: PUSH
46287: LD_INT 11
46289: EQUAL
46290: IFFALSE 46311
// points := [ 30 , 10 , 5 ] ;
46292: LD_ADDR_VAR 0 9
46296: PUSH
46297: LD_INT 30
46299: PUSH
46300: LD_INT 10
46302: PUSH
46303: LD_INT 5
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46311: LD_VAR 0 1
46315: PPUSH
46316: LD_INT 5
46318: PPUSH
46319: CALL_OW 321
46323: PUSH
46324: LD_INT 2
46326: EQUAL
46327: IFFALSE 46344
// bpoints := bpoints * 1.8 ;
46329: LD_ADDR_VAR 0 10
46333: PUSH
46334: LD_VAR 0 10
46338: PUSH
46339: LD_REAL  1.80000000000000E+0000
46342: MUL
46343: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46344: LD_VAR 0 6
46348: PPUSH
46349: CALL_OW 257
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: LD_INT 4
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: IN
46372: PUSH
46373: LD_VAR 0 1
46377: PPUSH
46378: LD_INT 51
46380: PPUSH
46381: CALL_OW 321
46385: PUSH
46386: LD_INT 2
46388: EQUAL
46389: AND
46390: IFFALSE 46407
// bpoints := bpoints * 1.2 ;
46392: LD_ADDR_VAR 0 10
46396: PUSH
46397: LD_VAR 0 10
46401: PUSH
46402: LD_REAL  1.20000000000000E+0000
46405: MUL
46406: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46407: LD_VAR 0 6
46411: PPUSH
46412: CALL_OW 257
46416: PUSH
46417: LD_INT 5
46419: PUSH
46420: LD_INT 7
46422: PUSH
46423: LD_INT 9
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: LIST
46430: IN
46431: PUSH
46432: LD_VAR 0 1
46436: PPUSH
46437: LD_INT 52
46439: PPUSH
46440: CALL_OW 321
46444: PUSH
46445: LD_INT 2
46447: EQUAL
46448: AND
46449: IFFALSE 46466
// bpoints := bpoints * 1.5 ;
46451: LD_ADDR_VAR 0 10
46455: PUSH
46456: LD_VAR 0 10
46460: PUSH
46461: LD_REAL  1.50000000000000E+0000
46464: MUL
46465: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46466: LD_VAR 0 1
46470: PPUSH
46471: LD_INT 66
46473: PPUSH
46474: CALL_OW 321
46478: PUSH
46479: LD_INT 2
46481: EQUAL
46482: IFFALSE 46499
// bpoints := bpoints * 1.1 ;
46484: LD_ADDR_VAR 0 10
46488: PUSH
46489: LD_VAR 0 10
46493: PUSH
46494: LD_REAL  1.10000000000000E+0000
46497: MUL
46498: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46499: LD_ADDR_VAR 0 10
46503: PUSH
46504: LD_VAR 0 10
46508: PUSH
46509: LD_VAR 0 6
46513: PPUSH
46514: LD_INT 1
46516: PPUSH
46517: CALL_OW 259
46521: PUSH
46522: LD_REAL  1.15000000000000E+0000
46525: MUL
46526: MUL
46527: ST_TO_ADDR
// end ; unit_vehicle :
46528: GO 47356
46530: LD_INT 2
46532: DOUBLE
46533: EQUAL
46534: IFTRUE 46538
46536: GO 47344
46538: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46539: LD_VAR 0 6
46543: PPUSH
46544: CALL_OW 264
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 42
46554: PUSH
46555: LD_INT 24
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: IN
46563: IFFALSE 46584
// points := [ 25 , 5 , 3 ] ;
46565: LD_ADDR_VAR 0 9
46569: PUSH
46570: LD_INT 25
46572: PUSH
46573: LD_INT 5
46575: PUSH
46576: LD_INT 3
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46584: LD_VAR 0 6
46588: PPUSH
46589: CALL_OW 264
46593: PUSH
46594: LD_INT 4
46596: PUSH
46597: LD_INT 43
46599: PUSH
46600: LD_INT 25
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: IN
46608: IFFALSE 46629
// points := [ 40 , 15 , 5 ] ;
46610: LD_ADDR_VAR 0 9
46614: PUSH
46615: LD_INT 40
46617: PUSH
46618: LD_INT 15
46620: PUSH
46621: LD_INT 5
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46629: LD_VAR 0 6
46633: PPUSH
46634: CALL_OW 264
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: LD_INT 23
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: IN
46649: IFFALSE 46670
// points := [ 7 , 25 , 8 ] ;
46651: LD_ADDR_VAR 0 9
46655: PUSH
46656: LD_INT 7
46658: PUSH
46659: LD_INT 25
46661: PUSH
46662: LD_INT 8
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: LIST
46669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46670: LD_VAR 0 6
46674: PPUSH
46675: CALL_OW 264
46679: PUSH
46680: LD_INT 5
46682: PUSH
46683: LD_INT 27
46685: PUSH
46686: LD_INT 44
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: IN
46694: IFFALSE 46715
// points := [ 14 , 50 , 16 ] ;
46696: LD_ADDR_VAR 0 9
46700: PUSH
46701: LD_INT 14
46703: PUSH
46704: LD_INT 50
46706: PUSH
46707: LD_INT 16
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46715: LD_VAR 0 6
46719: PPUSH
46720: CALL_OW 264
46724: PUSH
46725: LD_INT 6
46727: PUSH
46728: LD_INT 46
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: IN
46735: IFFALSE 46756
// points := [ 32 , 120 , 70 ] ;
46737: LD_ADDR_VAR 0 9
46741: PUSH
46742: LD_INT 32
46744: PUSH
46745: LD_INT 120
46747: PUSH
46748: LD_INT 70
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46756: LD_VAR 0 6
46760: PPUSH
46761: CALL_OW 264
46765: PUSH
46766: LD_INT 7
46768: PUSH
46769: LD_INT 28
46771: PUSH
46772: LD_INT 45
46774: PUSH
46775: LD_INT 92
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: IN
46784: IFFALSE 46805
// points := [ 35 , 20 , 45 ] ;
46786: LD_ADDR_VAR 0 9
46790: PUSH
46791: LD_INT 35
46793: PUSH
46794: LD_INT 20
46796: PUSH
46797: LD_INT 45
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: LIST
46804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46805: LD_VAR 0 6
46809: PPUSH
46810: CALL_OW 264
46814: PUSH
46815: LD_INT 47
46817: PUSH
46818: EMPTY
46819: LIST
46820: IN
46821: IFFALSE 46842
// points := [ 67 , 45 , 75 ] ;
46823: LD_ADDR_VAR 0 9
46827: PUSH
46828: LD_INT 67
46830: PUSH
46831: LD_INT 45
46833: PUSH
46834: LD_INT 75
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46842: LD_VAR 0 6
46846: PPUSH
46847: CALL_OW 264
46851: PUSH
46852: LD_INT 26
46854: PUSH
46855: EMPTY
46856: LIST
46857: IN
46858: IFFALSE 46879
// points := [ 120 , 30 , 80 ] ;
46860: LD_ADDR_VAR 0 9
46864: PUSH
46865: LD_INT 120
46867: PUSH
46868: LD_INT 30
46870: PUSH
46871: LD_INT 80
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46879: LD_VAR 0 6
46883: PPUSH
46884: CALL_OW 264
46888: PUSH
46889: LD_INT 22
46891: PUSH
46892: EMPTY
46893: LIST
46894: IN
46895: IFFALSE 46916
// points := [ 40 , 1 , 1 ] ;
46897: LD_ADDR_VAR 0 9
46901: PUSH
46902: LD_INT 40
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46916: LD_VAR 0 6
46920: PPUSH
46921: CALL_OW 264
46925: PUSH
46926: LD_INT 29
46928: PUSH
46929: EMPTY
46930: LIST
46931: IN
46932: IFFALSE 46953
// points := [ 70 , 200 , 400 ] ;
46934: LD_ADDR_VAR 0 9
46938: PUSH
46939: LD_INT 70
46941: PUSH
46942: LD_INT 200
46944: PUSH
46945: LD_INT 400
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46953: LD_VAR 0 6
46957: PPUSH
46958: CALL_OW 264
46962: PUSH
46963: LD_INT 14
46965: PUSH
46966: LD_INT 53
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: IN
46973: IFFALSE 46994
// points := [ 40 , 10 , 20 ] ;
46975: LD_ADDR_VAR 0 9
46979: PUSH
46980: LD_INT 40
46982: PUSH
46983: LD_INT 10
46985: PUSH
46986: LD_INT 20
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46994: LD_VAR 0 6
46998: PPUSH
46999: CALL_OW 264
47003: PUSH
47004: LD_INT 9
47006: PUSH
47007: EMPTY
47008: LIST
47009: IN
47010: IFFALSE 47031
// points := [ 5 , 70 , 20 ] ;
47012: LD_ADDR_VAR 0 9
47016: PUSH
47017: LD_INT 5
47019: PUSH
47020: LD_INT 70
47022: PUSH
47023: LD_INT 20
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47031: LD_VAR 0 6
47035: PPUSH
47036: CALL_OW 264
47040: PUSH
47041: LD_INT 10
47043: PUSH
47044: EMPTY
47045: LIST
47046: IN
47047: IFFALSE 47068
// points := [ 35 , 110 , 70 ] ;
47049: LD_ADDR_VAR 0 9
47053: PUSH
47054: LD_INT 35
47056: PUSH
47057: LD_INT 110
47059: PUSH
47060: LD_INT 70
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47068: LD_VAR 0 6
47072: PPUSH
47073: CALL_OW 265
47077: PUSH
47078: LD_INT 25
47080: EQUAL
47081: IFFALSE 47102
// points := [ 80 , 65 , 100 ] ;
47083: LD_ADDR_VAR 0 9
47087: PUSH
47088: LD_INT 80
47090: PUSH
47091: LD_INT 65
47093: PUSH
47094: LD_INT 100
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47102: LD_VAR 0 6
47106: PPUSH
47107: CALL_OW 263
47111: PUSH
47112: LD_INT 1
47114: EQUAL
47115: IFFALSE 47150
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47117: LD_ADDR_VAR 0 10
47121: PUSH
47122: LD_VAR 0 10
47126: PUSH
47127: LD_VAR 0 6
47131: PPUSH
47132: CALL_OW 311
47136: PPUSH
47137: LD_INT 3
47139: PPUSH
47140: CALL_OW 259
47144: PUSH
47145: LD_INT 4
47147: MUL
47148: MUL
47149: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47150: LD_VAR 0 6
47154: PPUSH
47155: CALL_OW 263
47159: PUSH
47160: LD_INT 2
47162: EQUAL
47163: IFFALSE 47214
// begin j := IsControledBy ( i ) ;
47165: LD_ADDR_VAR 0 7
47169: PUSH
47170: LD_VAR 0 6
47174: PPUSH
47175: CALL_OW 312
47179: ST_TO_ADDR
// if j then
47180: LD_VAR 0 7
47184: IFFALSE 47214
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47186: LD_ADDR_VAR 0 10
47190: PUSH
47191: LD_VAR 0 10
47195: PUSH
47196: LD_VAR 0 7
47200: PPUSH
47201: LD_INT 3
47203: PPUSH
47204: CALL_OW 259
47208: PUSH
47209: LD_INT 3
47211: MUL
47212: MUL
47213: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47214: LD_VAR 0 6
47218: PPUSH
47219: CALL_OW 264
47223: PUSH
47224: LD_INT 5
47226: PUSH
47227: LD_INT 6
47229: PUSH
47230: LD_INT 46
47232: PUSH
47233: LD_INT 44
47235: PUSH
47236: LD_INT 47
47238: PUSH
47239: LD_INT 45
47241: PUSH
47242: LD_INT 28
47244: PUSH
47245: LD_INT 7
47247: PUSH
47248: LD_INT 27
47250: PUSH
47251: LD_INT 29
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: IN
47266: PUSH
47267: LD_VAR 0 1
47271: PPUSH
47272: LD_INT 52
47274: PPUSH
47275: CALL_OW 321
47279: PUSH
47280: LD_INT 2
47282: EQUAL
47283: AND
47284: IFFALSE 47301
// bpoints := bpoints * 1.2 ;
47286: LD_ADDR_VAR 0 10
47290: PUSH
47291: LD_VAR 0 10
47295: PUSH
47296: LD_REAL  1.20000000000000E+0000
47299: MUL
47300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47301: LD_VAR 0 6
47305: PPUSH
47306: CALL_OW 264
47310: PUSH
47311: LD_INT 6
47313: PUSH
47314: LD_INT 46
47316: PUSH
47317: LD_INT 47
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: IN
47325: IFFALSE 47342
// bpoints := bpoints * 1.2 ;
47327: LD_ADDR_VAR 0 10
47331: PUSH
47332: LD_VAR 0 10
47336: PUSH
47337: LD_REAL  1.20000000000000E+0000
47340: MUL
47341: ST_TO_ADDR
// end ; unit_building :
47342: GO 47356
47344: LD_INT 3
47346: DOUBLE
47347: EQUAL
47348: IFTRUE 47352
47350: GO 47355
47352: POP
// ; end ;
47353: GO 47356
47355: POP
// for j = 1 to 3 do
47356: LD_ADDR_VAR 0 7
47360: PUSH
47361: DOUBLE
47362: LD_INT 1
47364: DEC
47365: ST_TO_ADDR
47366: LD_INT 3
47368: PUSH
47369: FOR_TO
47370: IFFALSE 47423
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47372: LD_ADDR_VAR 0 5
47376: PUSH
47377: LD_VAR 0 5
47381: PPUSH
47382: LD_VAR 0 7
47386: PPUSH
47387: LD_VAR 0 5
47391: PUSH
47392: LD_VAR 0 7
47396: ARRAY
47397: PUSH
47398: LD_VAR 0 9
47402: PUSH
47403: LD_VAR 0 7
47407: ARRAY
47408: PUSH
47409: LD_VAR 0 10
47413: MUL
47414: PLUS
47415: PPUSH
47416: CALL_OW 1
47420: ST_TO_ADDR
47421: GO 47369
47423: POP
47424: POP
// end ;
47425: GO 45904
47427: POP
47428: POP
// result := Replace ( result , 4 , tmp ) ;
47429: LD_ADDR_VAR 0 5
47433: PUSH
47434: LD_VAR 0 5
47438: PPUSH
47439: LD_INT 4
47441: PPUSH
47442: LD_VAR 0 8
47446: PPUSH
47447: CALL_OW 1
47451: ST_TO_ADDR
// end ;
47452: LD_VAR 0 5
47456: RET
// export function DangerAtRange ( unit , range ) ; begin
47457: LD_INT 0
47459: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47460: LD_ADDR_VAR 0 3
47464: PUSH
47465: LD_VAR 0 1
47469: PPUSH
47470: CALL_OW 255
47474: PPUSH
47475: LD_VAR 0 1
47479: PPUSH
47480: CALL_OW 250
47484: PPUSH
47485: LD_VAR 0 1
47489: PPUSH
47490: CALL_OW 251
47494: PPUSH
47495: LD_VAR 0 2
47499: PPUSH
47500: CALL 45756 0 4
47504: ST_TO_ADDR
// end ;
47505: LD_VAR 0 3
47509: RET
// export function DangerInArea ( side , area ) ; begin
47510: LD_INT 0
47512: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47513: LD_ADDR_VAR 0 3
47517: PUSH
47518: LD_VAR 0 2
47522: PPUSH
47523: LD_INT 81
47525: PUSH
47526: LD_VAR 0 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PPUSH
47535: CALL_OW 70
47539: ST_TO_ADDR
// end ;
47540: LD_VAR 0 3
47544: RET
// export function IsExtension ( b ) ; begin
47545: LD_INT 0
47547: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47548: LD_ADDR_VAR 0 2
47552: PUSH
47553: LD_VAR 0 1
47557: PUSH
47558: LD_INT 23
47560: PUSH
47561: LD_INT 20
47563: PUSH
47564: LD_INT 22
47566: PUSH
47567: LD_INT 17
47569: PUSH
47570: LD_INT 24
47572: PUSH
47573: LD_INT 21
47575: PUSH
47576: LD_INT 19
47578: PUSH
47579: LD_INT 16
47581: PUSH
47582: LD_INT 25
47584: PUSH
47585: LD_INT 18
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: IN
47600: ST_TO_ADDR
// end ;
47601: LD_VAR 0 2
47605: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47606: LD_INT 0
47608: PPUSH
47609: PPUSH
47610: PPUSH
// result := [ ] ;
47611: LD_ADDR_VAR 0 4
47615: PUSH
47616: EMPTY
47617: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47618: LD_ADDR_VAR 0 5
47622: PUSH
47623: LD_VAR 0 2
47627: PPUSH
47628: LD_INT 21
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PPUSH
47638: CALL_OW 70
47642: ST_TO_ADDR
// if not tmp then
47643: LD_VAR 0 5
47647: NOT
47648: IFFALSE 47652
// exit ;
47650: GO 47716
// if checkLink then
47652: LD_VAR 0 3
47656: IFFALSE 47706
// begin for i in tmp do
47658: LD_ADDR_VAR 0 6
47662: PUSH
47663: LD_VAR 0 5
47667: PUSH
47668: FOR_IN
47669: IFFALSE 47704
// if GetBase ( i ) <> base then
47671: LD_VAR 0 6
47675: PPUSH
47676: CALL_OW 274
47680: PUSH
47681: LD_VAR 0 1
47685: NONEQUAL
47686: IFFALSE 47702
// ComLinkToBase ( base , i ) ;
47688: LD_VAR 0 1
47692: PPUSH
47693: LD_VAR 0 6
47697: PPUSH
47698: CALL_OW 169
47702: GO 47668
47704: POP
47705: POP
// end ; result := tmp ;
47706: LD_ADDR_VAR 0 4
47710: PUSH
47711: LD_VAR 0 5
47715: ST_TO_ADDR
// end ;
47716: LD_VAR 0 4
47720: RET
// export function ComComplete ( units , b ) ; var i ; begin
47721: LD_INT 0
47723: PPUSH
47724: PPUSH
// if not units then
47725: LD_VAR 0 1
47729: NOT
47730: IFFALSE 47734
// exit ;
47732: GO 47824
// for i in units do
47734: LD_ADDR_VAR 0 4
47738: PUSH
47739: LD_VAR 0 1
47743: PUSH
47744: FOR_IN
47745: IFFALSE 47822
// if BuildingStatus ( b ) = bs_build then
47747: LD_VAR 0 2
47751: PPUSH
47752: CALL_OW 461
47756: PUSH
47757: LD_INT 1
47759: EQUAL
47760: IFFALSE 47820
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47762: LD_VAR 0 4
47766: PPUSH
47767: LD_STRING h
47769: PUSH
47770: LD_VAR 0 2
47774: PPUSH
47775: CALL_OW 250
47779: PUSH
47780: LD_VAR 0 2
47784: PPUSH
47785: CALL_OW 251
47789: PUSH
47790: LD_VAR 0 2
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: PPUSH
47816: CALL_OW 446
47820: GO 47744
47822: POP
47823: POP
// end ;
47824: LD_VAR 0 3
47828: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47829: LD_INT 0
47831: PPUSH
47832: PPUSH
47833: PPUSH
47834: PPUSH
47835: PPUSH
47836: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47837: LD_VAR 0 1
47841: NOT
47842: PUSH
47843: LD_VAR 0 1
47847: PPUSH
47848: CALL_OW 263
47852: PUSH
47853: LD_INT 2
47855: NONEQUAL
47856: OR
47857: IFFALSE 47861
// exit ;
47859: GO 48177
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47861: LD_ADDR_VAR 0 6
47865: PUSH
47866: LD_INT 22
47868: PUSH
47869: LD_VAR 0 1
47873: PPUSH
47874: CALL_OW 255
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 30
47888: PUSH
47889: LD_INT 36
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 34
47898: PUSH
47899: LD_INT 31
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PPUSH
47915: CALL_OW 69
47919: ST_TO_ADDR
// if not tmp then
47920: LD_VAR 0 6
47924: NOT
47925: IFFALSE 47929
// exit ;
47927: GO 48177
// result := [ ] ;
47929: LD_ADDR_VAR 0 2
47933: PUSH
47934: EMPTY
47935: ST_TO_ADDR
// for i in tmp do
47936: LD_ADDR_VAR 0 3
47940: PUSH
47941: LD_VAR 0 6
47945: PUSH
47946: FOR_IN
47947: IFFALSE 48018
// begin t := UnitsInside ( i ) ;
47949: LD_ADDR_VAR 0 4
47953: PUSH
47954: LD_VAR 0 3
47958: PPUSH
47959: CALL_OW 313
47963: ST_TO_ADDR
// if t then
47964: LD_VAR 0 4
47968: IFFALSE 48016
// for j in t do
47970: LD_ADDR_VAR 0 7
47974: PUSH
47975: LD_VAR 0 4
47979: PUSH
47980: FOR_IN
47981: IFFALSE 48014
// result := Replace ( result , result + 1 , j ) ;
47983: LD_ADDR_VAR 0 2
47987: PUSH
47988: LD_VAR 0 2
47992: PPUSH
47993: LD_VAR 0 2
47997: PUSH
47998: LD_INT 1
48000: PLUS
48001: PPUSH
48002: LD_VAR 0 7
48006: PPUSH
48007: CALL_OW 1
48011: ST_TO_ADDR
48012: GO 47980
48014: POP
48015: POP
// end ;
48016: GO 47946
48018: POP
48019: POP
// if not result then
48020: LD_VAR 0 2
48024: NOT
48025: IFFALSE 48029
// exit ;
48027: GO 48177
// mech := result [ 1 ] ;
48029: LD_ADDR_VAR 0 5
48033: PUSH
48034: LD_VAR 0 2
48038: PUSH
48039: LD_INT 1
48041: ARRAY
48042: ST_TO_ADDR
// if result > 1 then
48043: LD_VAR 0 2
48047: PUSH
48048: LD_INT 1
48050: GREATER
48051: IFFALSE 48163
// begin for i = 2 to result do
48053: LD_ADDR_VAR 0 3
48057: PUSH
48058: DOUBLE
48059: LD_INT 2
48061: DEC
48062: ST_TO_ADDR
48063: LD_VAR 0 2
48067: PUSH
48068: FOR_TO
48069: IFFALSE 48161
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48071: LD_ADDR_VAR 0 4
48075: PUSH
48076: LD_VAR 0 2
48080: PUSH
48081: LD_VAR 0 3
48085: ARRAY
48086: PPUSH
48087: LD_INT 3
48089: PPUSH
48090: CALL_OW 259
48094: PUSH
48095: LD_VAR 0 2
48099: PUSH
48100: LD_VAR 0 3
48104: ARRAY
48105: PPUSH
48106: CALL_OW 432
48110: MINUS
48111: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48112: LD_VAR 0 4
48116: PUSH
48117: LD_VAR 0 5
48121: PPUSH
48122: LD_INT 3
48124: PPUSH
48125: CALL_OW 259
48129: PUSH
48130: LD_VAR 0 5
48134: PPUSH
48135: CALL_OW 432
48139: MINUS
48140: GREATEREQUAL
48141: IFFALSE 48159
// mech := result [ i ] ;
48143: LD_ADDR_VAR 0 5
48147: PUSH
48148: LD_VAR 0 2
48152: PUSH
48153: LD_VAR 0 3
48157: ARRAY
48158: ST_TO_ADDR
// end ;
48159: GO 48068
48161: POP
48162: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48163: LD_VAR 0 1
48167: PPUSH
48168: LD_VAR 0 5
48172: PPUSH
48173: CALL_OW 135
// end ;
48177: LD_VAR 0 2
48181: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48182: LD_INT 0
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
// result := [ ] ;
48197: LD_ADDR_VAR 0 7
48201: PUSH
48202: EMPTY
48203: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48204: LD_VAR 0 1
48208: PPUSH
48209: CALL_OW 266
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: IN
48224: NOT
48225: IFFALSE 48229
// exit ;
48227: GO 49863
// if name then
48229: LD_VAR 0 3
48233: IFFALSE 48249
// SetBName ( base_dep , name ) ;
48235: LD_VAR 0 1
48239: PPUSH
48240: LD_VAR 0 3
48244: PPUSH
48245: CALL_OW 500
// base := GetBase ( base_dep ) ;
48249: LD_ADDR_VAR 0 15
48253: PUSH
48254: LD_VAR 0 1
48258: PPUSH
48259: CALL_OW 274
48263: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48264: LD_ADDR_VAR 0 16
48268: PUSH
48269: LD_VAR 0 1
48273: PPUSH
48274: CALL_OW 255
48278: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48279: LD_ADDR_VAR 0 17
48283: PUSH
48284: LD_VAR 0 1
48288: PPUSH
48289: CALL_OW 248
48293: ST_TO_ADDR
// if sources then
48294: LD_VAR 0 5
48298: IFFALSE 48345
// for i = 1 to 3 do
48300: LD_ADDR_VAR 0 8
48304: PUSH
48305: DOUBLE
48306: LD_INT 1
48308: DEC
48309: ST_TO_ADDR
48310: LD_INT 3
48312: PUSH
48313: FOR_TO
48314: IFFALSE 48343
// AddResourceType ( base , i , sources [ i ] ) ;
48316: LD_VAR 0 15
48320: PPUSH
48321: LD_VAR 0 8
48325: PPUSH
48326: LD_VAR 0 5
48330: PUSH
48331: LD_VAR 0 8
48335: ARRAY
48336: PPUSH
48337: CALL_OW 276
48341: GO 48313
48343: POP
48344: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48345: LD_ADDR_VAR 0 18
48349: PUSH
48350: LD_VAR 0 15
48354: PPUSH
48355: LD_VAR 0 2
48359: PPUSH
48360: LD_INT 1
48362: PPUSH
48363: CALL 47606 0 3
48367: ST_TO_ADDR
// InitHc ;
48368: CALL_OW 19
// InitUc ;
48372: CALL_OW 18
// uc_side := side ;
48376: LD_ADDR_OWVAR 20
48380: PUSH
48381: LD_VAR 0 16
48385: ST_TO_ADDR
// uc_nation := nation ;
48386: LD_ADDR_OWVAR 21
48390: PUSH
48391: LD_VAR 0 17
48395: ST_TO_ADDR
// if buildings then
48396: LD_VAR 0 18
48400: IFFALSE 49722
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48402: LD_ADDR_VAR 0 19
48406: PUSH
48407: LD_VAR 0 18
48411: PPUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 30
48417: PUSH
48418: LD_INT 29
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 30
48427: PUSH
48428: LD_INT 30
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: PPUSH
48440: CALL_OW 72
48444: ST_TO_ADDR
// if tmp then
48445: LD_VAR 0 19
48449: IFFALSE 48497
// for i in tmp do
48451: LD_ADDR_VAR 0 8
48455: PUSH
48456: LD_VAR 0 19
48460: PUSH
48461: FOR_IN
48462: IFFALSE 48495
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48464: LD_VAR 0 8
48468: PPUSH
48469: CALL_OW 250
48473: PPUSH
48474: LD_VAR 0 8
48478: PPUSH
48479: CALL_OW 251
48483: PPUSH
48484: LD_VAR 0 16
48488: PPUSH
48489: CALL_OW 441
48493: GO 48461
48495: POP
48496: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48497: LD_VAR 0 18
48501: PPUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 30
48507: PUSH
48508: LD_INT 32
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 30
48517: PUSH
48518: LD_INT 33
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: LIST
48529: PPUSH
48530: CALL_OW 72
48534: IFFALSE 48622
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48536: LD_ADDR_VAR 0 8
48540: PUSH
48541: LD_VAR 0 18
48545: PPUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 30
48551: PUSH
48552: LD_INT 32
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 30
48561: PUSH
48562: LD_INT 33
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: PPUSH
48574: CALL_OW 72
48578: PUSH
48579: FOR_IN
48580: IFFALSE 48620
// begin if not GetBWeapon ( i ) then
48582: LD_VAR 0 8
48586: PPUSH
48587: CALL_OW 269
48591: NOT
48592: IFFALSE 48618
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48594: LD_VAR 0 8
48598: PPUSH
48599: LD_VAR 0 8
48603: PPUSH
48604: LD_VAR 0 2
48608: PPUSH
48609: CALL 49868 0 2
48613: PPUSH
48614: CALL_OW 431
// end ;
48618: GO 48579
48620: POP
48621: POP
// end ; for i = 1 to personel do
48622: LD_ADDR_VAR 0 8
48626: PUSH
48627: DOUBLE
48628: LD_INT 1
48630: DEC
48631: ST_TO_ADDR
48632: LD_VAR 0 6
48636: PUSH
48637: FOR_TO
48638: IFFALSE 49702
// begin if i > 4 then
48640: LD_VAR 0 8
48644: PUSH
48645: LD_INT 4
48647: GREATER
48648: IFFALSE 48652
// break ;
48650: GO 49702
// case i of 1 :
48652: LD_VAR 0 8
48656: PUSH
48657: LD_INT 1
48659: DOUBLE
48660: EQUAL
48661: IFTRUE 48665
48663: GO 48745
48665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48666: LD_ADDR_VAR 0 12
48670: PUSH
48671: LD_VAR 0 18
48675: PPUSH
48676: LD_INT 22
48678: PUSH
48679: LD_VAR 0 16
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 58
48690: PUSH
48691: EMPTY
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 30
48699: PUSH
48700: LD_INT 32
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 30
48709: PUSH
48710: LD_INT 4
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 30
48719: PUSH
48720: LD_INT 5
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: PPUSH
48738: CALL_OW 72
48742: ST_TO_ADDR
48743: GO 48967
48745: LD_INT 2
48747: DOUBLE
48748: EQUAL
48749: IFTRUE 48753
48751: GO 48815
48753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48754: LD_ADDR_VAR 0 12
48758: PUSH
48759: LD_VAR 0 18
48763: PPUSH
48764: LD_INT 22
48766: PUSH
48767: LD_VAR 0 16
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: LD_INT 30
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 30
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PPUSH
48808: CALL_OW 72
48812: ST_TO_ADDR
48813: GO 48967
48815: LD_INT 3
48817: DOUBLE
48818: EQUAL
48819: IFTRUE 48823
48821: GO 48885
48823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48824: LD_ADDR_VAR 0 12
48828: PUSH
48829: LD_VAR 0 18
48833: PPUSH
48834: LD_INT 22
48836: PUSH
48837: LD_VAR 0 16
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 30
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 30
48861: PUSH
48862: LD_INT 3
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PPUSH
48878: CALL_OW 72
48882: ST_TO_ADDR
48883: GO 48967
48885: LD_INT 4
48887: DOUBLE
48888: EQUAL
48889: IFTRUE 48893
48891: GO 48966
48893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48894: LD_ADDR_VAR 0 12
48898: PUSH
48899: LD_VAR 0 18
48903: PPUSH
48904: LD_INT 22
48906: PUSH
48907: LD_VAR 0 16
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 30
48921: PUSH
48922: LD_INT 6
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 30
48931: PUSH
48932: LD_INT 7
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 30
48941: PUSH
48942: LD_INT 8
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PPUSH
48959: CALL_OW 72
48963: ST_TO_ADDR
48964: GO 48967
48966: POP
// if i = 1 then
48967: LD_VAR 0 8
48971: PUSH
48972: LD_INT 1
48974: EQUAL
48975: IFFALSE 49086
// begin tmp := [ ] ;
48977: LD_ADDR_VAR 0 19
48981: PUSH
48982: EMPTY
48983: ST_TO_ADDR
// for j in f do
48984: LD_ADDR_VAR 0 9
48988: PUSH
48989: LD_VAR 0 12
48993: PUSH
48994: FOR_IN
48995: IFFALSE 49068
// if GetBType ( j ) = b_bunker then
48997: LD_VAR 0 9
49001: PPUSH
49002: CALL_OW 266
49006: PUSH
49007: LD_INT 32
49009: EQUAL
49010: IFFALSE 49037
// tmp := Insert ( tmp , 1 , j ) else
49012: LD_ADDR_VAR 0 19
49016: PUSH
49017: LD_VAR 0 19
49021: PPUSH
49022: LD_INT 1
49024: PPUSH
49025: LD_VAR 0 9
49029: PPUSH
49030: CALL_OW 2
49034: ST_TO_ADDR
49035: GO 49066
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49037: LD_ADDR_VAR 0 19
49041: PUSH
49042: LD_VAR 0 19
49046: PPUSH
49047: LD_VAR 0 19
49051: PUSH
49052: LD_INT 1
49054: PLUS
49055: PPUSH
49056: LD_VAR 0 9
49060: PPUSH
49061: CALL_OW 2
49065: ST_TO_ADDR
49066: GO 48994
49068: POP
49069: POP
// if tmp then
49070: LD_VAR 0 19
49074: IFFALSE 49086
// f := tmp ;
49076: LD_ADDR_VAR 0 12
49080: PUSH
49081: LD_VAR 0 19
49085: ST_TO_ADDR
// end ; x := personel [ i ] ;
49086: LD_ADDR_VAR 0 13
49090: PUSH
49091: LD_VAR 0 6
49095: PUSH
49096: LD_VAR 0 8
49100: ARRAY
49101: ST_TO_ADDR
// if x = - 1 then
49102: LD_VAR 0 13
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: EQUAL
49111: IFFALSE 49320
// begin for j in f do
49113: LD_ADDR_VAR 0 9
49117: PUSH
49118: LD_VAR 0 12
49122: PUSH
49123: FOR_IN
49124: IFFALSE 49316
// repeat InitHc ;
49126: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49130: LD_VAR 0 9
49134: PPUSH
49135: CALL_OW 266
49139: PUSH
49140: LD_INT 5
49142: EQUAL
49143: IFFALSE 49213
// begin if UnitsInside ( j ) < 3 then
49145: LD_VAR 0 9
49149: PPUSH
49150: CALL_OW 313
49154: PUSH
49155: LD_INT 3
49157: LESS
49158: IFFALSE 49194
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49160: LD_INT 0
49162: PPUSH
49163: LD_INT 5
49165: PUSH
49166: LD_INT 8
49168: PUSH
49169: LD_INT 9
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: PUSH
49177: LD_VAR 0 17
49181: ARRAY
49182: PPUSH
49183: LD_VAR 0 4
49187: PPUSH
49188: CALL_OW 380
49192: GO 49211
// PrepareHuman ( false , i , skill ) ;
49194: LD_INT 0
49196: PPUSH
49197: LD_VAR 0 8
49201: PPUSH
49202: LD_VAR 0 4
49206: PPUSH
49207: CALL_OW 380
// end else
49211: GO 49230
// PrepareHuman ( false , i , skill ) ;
49213: LD_INT 0
49215: PPUSH
49216: LD_VAR 0 8
49220: PPUSH
49221: LD_VAR 0 4
49225: PPUSH
49226: CALL_OW 380
// un := CreateHuman ;
49230: LD_ADDR_VAR 0 14
49234: PUSH
49235: CALL_OW 44
49239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49240: LD_ADDR_VAR 0 7
49244: PUSH
49245: LD_VAR 0 7
49249: PPUSH
49250: LD_INT 1
49252: PPUSH
49253: LD_VAR 0 14
49257: PPUSH
49258: CALL_OW 2
49262: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49263: LD_VAR 0 14
49267: PPUSH
49268: LD_VAR 0 9
49272: PPUSH
49273: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49277: LD_VAR 0 9
49281: PPUSH
49282: CALL_OW 313
49286: PUSH
49287: LD_INT 6
49289: EQUAL
49290: PUSH
49291: LD_VAR 0 9
49295: PPUSH
49296: CALL_OW 266
49300: PUSH
49301: LD_INT 32
49303: PUSH
49304: LD_INT 31
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: IN
49311: OR
49312: IFFALSE 49126
49314: GO 49123
49316: POP
49317: POP
// end else
49318: GO 49700
// for j = 1 to x do
49320: LD_ADDR_VAR 0 9
49324: PUSH
49325: DOUBLE
49326: LD_INT 1
49328: DEC
49329: ST_TO_ADDR
49330: LD_VAR 0 13
49334: PUSH
49335: FOR_TO
49336: IFFALSE 49698
// begin InitHc ;
49338: CALL_OW 19
// if not f then
49342: LD_VAR 0 12
49346: NOT
49347: IFFALSE 49436
// begin PrepareHuman ( false , i , skill ) ;
49349: LD_INT 0
49351: PPUSH
49352: LD_VAR 0 8
49356: PPUSH
49357: LD_VAR 0 4
49361: PPUSH
49362: CALL_OW 380
// un := CreateHuman ;
49366: LD_ADDR_VAR 0 14
49370: PUSH
49371: CALL_OW 44
49375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49376: LD_ADDR_VAR 0 7
49380: PUSH
49381: LD_VAR 0 7
49385: PPUSH
49386: LD_INT 1
49388: PPUSH
49389: LD_VAR 0 14
49393: PPUSH
49394: CALL_OW 2
49398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49399: LD_VAR 0 14
49403: PPUSH
49404: LD_VAR 0 1
49408: PPUSH
49409: CALL_OW 250
49413: PPUSH
49414: LD_VAR 0 1
49418: PPUSH
49419: CALL_OW 251
49423: PPUSH
49424: LD_INT 10
49426: PPUSH
49427: LD_INT 0
49429: PPUSH
49430: CALL_OW 50
// continue ;
49434: GO 49335
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49436: LD_VAR 0 12
49440: PUSH
49441: LD_INT 1
49443: ARRAY
49444: PPUSH
49445: CALL_OW 313
49449: PUSH
49450: LD_VAR 0 12
49454: PUSH
49455: LD_INT 1
49457: ARRAY
49458: PPUSH
49459: CALL_OW 266
49463: PUSH
49464: LD_INT 32
49466: PUSH
49467: LD_INT 31
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: IN
49474: AND
49475: PUSH
49476: LD_VAR 0 12
49480: PUSH
49481: LD_INT 1
49483: ARRAY
49484: PPUSH
49485: CALL_OW 313
49489: PUSH
49490: LD_INT 6
49492: EQUAL
49493: OR
49494: IFFALSE 49514
// f := Delete ( f , 1 ) ;
49496: LD_ADDR_VAR 0 12
49500: PUSH
49501: LD_VAR 0 12
49505: PPUSH
49506: LD_INT 1
49508: PPUSH
49509: CALL_OW 3
49513: ST_TO_ADDR
// if not f then
49514: LD_VAR 0 12
49518: NOT
49519: IFFALSE 49537
// begin x := x + 2 ;
49521: LD_ADDR_VAR 0 13
49525: PUSH
49526: LD_VAR 0 13
49530: PUSH
49531: LD_INT 2
49533: PLUS
49534: ST_TO_ADDR
// continue ;
49535: GO 49335
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49537: LD_VAR 0 12
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: PPUSH
49546: CALL_OW 266
49550: PUSH
49551: LD_INT 5
49553: EQUAL
49554: IFFALSE 49628
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49556: LD_VAR 0 12
49560: PUSH
49561: LD_INT 1
49563: ARRAY
49564: PPUSH
49565: CALL_OW 313
49569: PUSH
49570: LD_INT 3
49572: LESS
49573: IFFALSE 49609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49575: LD_INT 0
49577: PPUSH
49578: LD_INT 5
49580: PUSH
49581: LD_INT 8
49583: PUSH
49584: LD_INT 9
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: PUSH
49592: LD_VAR 0 17
49596: ARRAY
49597: PPUSH
49598: LD_VAR 0 4
49602: PPUSH
49603: CALL_OW 380
49607: GO 49626
// PrepareHuman ( false , i , skill ) ;
49609: LD_INT 0
49611: PPUSH
49612: LD_VAR 0 8
49616: PPUSH
49617: LD_VAR 0 4
49621: PPUSH
49622: CALL_OW 380
// end else
49626: GO 49645
// PrepareHuman ( false , i , skill ) ;
49628: LD_INT 0
49630: PPUSH
49631: LD_VAR 0 8
49635: PPUSH
49636: LD_VAR 0 4
49640: PPUSH
49641: CALL_OW 380
// un := CreateHuman ;
49645: LD_ADDR_VAR 0 14
49649: PUSH
49650: CALL_OW 44
49654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49655: LD_ADDR_VAR 0 7
49659: PUSH
49660: LD_VAR 0 7
49664: PPUSH
49665: LD_INT 1
49667: PPUSH
49668: LD_VAR 0 14
49672: PPUSH
49673: CALL_OW 2
49677: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49678: LD_VAR 0 14
49682: PPUSH
49683: LD_VAR 0 12
49687: PUSH
49688: LD_INT 1
49690: ARRAY
49691: PPUSH
49692: CALL_OW 52
// end ;
49696: GO 49335
49698: POP
49699: POP
// end ;
49700: GO 48637
49702: POP
49703: POP
// result := result ^ buildings ;
49704: LD_ADDR_VAR 0 7
49708: PUSH
49709: LD_VAR 0 7
49713: PUSH
49714: LD_VAR 0 18
49718: ADD
49719: ST_TO_ADDR
// end else
49720: GO 49863
// begin for i = 1 to personel do
49722: LD_ADDR_VAR 0 8
49726: PUSH
49727: DOUBLE
49728: LD_INT 1
49730: DEC
49731: ST_TO_ADDR
49732: LD_VAR 0 6
49736: PUSH
49737: FOR_TO
49738: IFFALSE 49861
// begin if i > 4 then
49740: LD_VAR 0 8
49744: PUSH
49745: LD_INT 4
49747: GREATER
49748: IFFALSE 49752
// break ;
49750: GO 49861
// x := personel [ i ] ;
49752: LD_ADDR_VAR 0 13
49756: PUSH
49757: LD_VAR 0 6
49761: PUSH
49762: LD_VAR 0 8
49766: ARRAY
49767: ST_TO_ADDR
// if x = - 1 then
49768: LD_VAR 0 13
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: EQUAL
49777: IFFALSE 49781
// continue ;
49779: GO 49737
// PrepareHuman ( false , i , skill ) ;
49781: LD_INT 0
49783: PPUSH
49784: LD_VAR 0 8
49788: PPUSH
49789: LD_VAR 0 4
49793: PPUSH
49794: CALL_OW 380
// un := CreateHuman ;
49798: LD_ADDR_VAR 0 14
49802: PUSH
49803: CALL_OW 44
49807: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49808: LD_VAR 0 14
49812: PPUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 250
49822: PPUSH
49823: LD_VAR 0 1
49827: PPUSH
49828: CALL_OW 251
49832: PPUSH
49833: LD_INT 10
49835: PPUSH
49836: LD_INT 0
49838: PPUSH
49839: CALL_OW 50
// result := result ^ un ;
49843: LD_ADDR_VAR 0 7
49847: PUSH
49848: LD_VAR 0 7
49852: PUSH
49853: LD_VAR 0 14
49857: ADD
49858: ST_TO_ADDR
// end ;
49859: GO 49737
49861: POP
49862: POP
// end ; end ;
49863: LD_VAR 0 7
49867: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49868: LD_INT 0
49870: PPUSH
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
49879: PPUSH
49880: PPUSH
49881: PPUSH
49882: PPUSH
49883: PPUSH
49884: PPUSH
49885: PPUSH
// result := false ;
49886: LD_ADDR_VAR 0 3
49890: PUSH
49891: LD_INT 0
49893: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49894: LD_VAR 0 1
49898: NOT
49899: PUSH
49900: LD_VAR 0 1
49904: PPUSH
49905: CALL_OW 266
49909: PUSH
49910: LD_INT 32
49912: PUSH
49913: LD_INT 33
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: IN
49920: NOT
49921: OR
49922: IFFALSE 49926
// exit ;
49924: GO 51035
// nat := GetNation ( tower ) ;
49926: LD_ADDR_VAR 0 12
49930: PUSH
49931: LD_VAR 0 1
49935: PPUSH
49936: CALL_OW 248
49940: ST_TO_ADDR
// side := GetSide ( tower ) ;
49941: LD_ADDR_VAR 0 16
49945: PUSH
49946: LD_VAR 0 1
49950: PPUSH
49951: CALL_OW 255
49955: ST_TO_ADDR
// x := GetX ( tower ) ;
49956: LD_ADDR_VAR 0 10
49960: PUSH
49961: LD_VAR 0 1
49965: PPUSH
49966: CALL_OW 250
49970: ST_TO_ADDR
// y := GetY ( tower ) ;
49971: LD_ADDR_VAR 0 11
49975: PUSH
49976: LD_VAR 0 1
49980: PPUSH
49981: CALL_OW 251
49985: ST_TO_ADDR
// if not x or not y then
49986: LD_VAR 0 10
49990: NOT
49991: PUSH
49992: LD_VAR 0 11
49996: NOT
49997: OR
49998: IFFALSE 50002
// exit ;
50000: GO 51035
// weapon := 0 ;
50002: LD_ADDR_VAR 0 18
50006: PUSH
50007: LD_INT 0
50009: ST_TO_ADDR
// fac_list := [ ] ;
50010: LD_ADDR_VAR 0 17
50014: PUSH
50015: EMPTY
50016: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50017: LD_ADDR_VAR 0 6
50021: PUSH
50022: LD_VAR 0 1
50026: PPUSH
50027: CALL_OW 274
50031: PPUSH
50032: LD_VAR 0 2
50036: PPUSH
50037: LD_INT 0
50039: PPUSH
50040: CALL 47606 0 3
50044: PPUSH
50045: LD_INT 30
50047: PUSH
50048: LD_INT 3
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PPUSH
50055: CALL_OW 72
50059: ST_TO_ADDR
// if not factories then
50060: LD_VAR 0 6
50064: NOT
50065: IFFALSE 50069
// exit ;
50067: GO 51035
// for i in factories do
50069: LD_ADDR_VAR 0 8
50073: PUSH
50074: LD_VAR 0 6
50078: PUSH
50079: FOR_IN
50080: IFFALSE 50105
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50082: LD_ADDR_VAR 0 17
50086: PUSH
50087: LD_VAR 0 17
50091: PUSH
50092: LD_VAR 0 8
50096: PPUSH
50097: CALL_OW 478
50101: UNION
50102: ST_TO_ADDR
50103: GO 50079
50105: POP
50106: POP
// if not fac_list then
50107: LD_VAR 0 17
50111: NOT
50112: IFFALSE 50116
// exit ;
50114: GO 51035
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50116: LD_ADDR_VAR 0 5
50120: PUSH
50121: LD_INT 4
50123: PUSH
50124: LD_INT 5
50126: PUSH
50127: LD_INT 9
50129: PUSH
50130: LD_INT 10
50132: PUSH
50133: LD_INT 6
50135: PUSH
50136: LD_INT 7
50138: PUSH
50139: LD_INT 11
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 27
50153: PUSH
50154: LD_INT 28
50156: PUSH
50157: LD_INT 26
50159: PUSH
50160: LD_INT 30
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 43
50171: PUSH
50172: LD_INT 44
50174: PUSH
50175: LD_INT 46
50177: PUSH
50178: LD_INT 45
50180: PUSH
50181: LD_INT 47
50183: PUSH
50184: LD_INT 49
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: PUSH
50200: LD_VAR 0 12
50204: ARRAY
50205: ST_TO_ADDR
// list := list isect fac_list ;
50206: LD_ADDR_VAR 0 5
50210: PUSH
50211: LD_VAR 0 5
50215: PUSH
50216: LD_VAR 0 17
50220: ISECT
50221: ST_TO_ADDR
// if not list then
50222: LD_VAR 0 5
50226: NOT
50227: IFFALSE 50231
// exit ;
50229: GO 51035
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50231: LD_VAR 0 12
50235: PUSH
50236: LD_INT 3
50238: EQUAL
50239: PUSH
50240: LD_INT 49
50242: PUSH
50243: LD_VAR 0 5
50247: IN
50248: AND
50249: PUSH
50250: LD_INT 31
50252: PPUSH
50253: LD_VAR 0 16
50257: PPUSH
50258: CALL_OW 321
50262: PUSH
50263: LD_INT 2
50265: EQUAL
50266: AND
50267: IFFALSE 50327
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50269: LD_INT 22
50271: PUSH
50272: LD_VAR 0 16
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 35
50283: PUSH
50284: LD_INT 49
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 91
50293: PUSH
50294: LD_VAR 0 1
50298: PUSH
50299: LD_INT 10
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: PPUSH
50312: CALL_OW 69
50316: NOT
50317: IFFALSE 50327
// weapon := ru_time_lapser ;
50319: LD_ADDR_VAR 0 18
50323: PUSH
50324: LD_INT 49
50326: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50327: LD_VAR 0 12
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: IN
50342: PUSH
50343: LD_INT 11
50345: PUSH
50346: LD_VAR 0 5
50350: IN
50351: PUSH
50352: LD_INT 30
50354: PUSH
50355: LD_VAR 0 5
50359: IN
50360: OR
50361: AND
50362: PUSH
50363: LD_INT 6
50365: PPUSH
50366: LD_VAR 0 16
50370: PPUSH
50371: CALL_OW 321
50375: PUSH
50376: LD_INT 2
50378: EQUAL
50379: AND
50380: IFFALSE 50545
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50382: LD_INT 22
50384: PUSH
50385: LD_VAR 0 16
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 35
50399: PUSH
50400: LD_INT 11
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 35
50409: PUSH
50410: LD_INT 30
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 91
50424: PUSH
50425: LD_VAR 0 1
50429: PUSH
50430: LD_INT 18
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: PPUSH
50443: CALL_OW 69
50447: NOT
50448: PUSH
50449: LD_INT 22
50451: PUSH
50452: LD_VAR 0 16
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 30
50466: PUSH
50467: LD_INT 32
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 30
50476: PUSH
50477: LD_INT 33
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 91
50491: PUSH
50492: LD_VAR 0 1
50496: PUSH
50497: LD_INT 12
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: PPUSH
50513: CALL_OW 69
50517: PUSH
50518: LD_INT 2
50520: GREATER
50521: AND
50522: IFFALSE 50545
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50524: LD_ADDR_VAR 0 18
50528: PUSH
50529: LD_INT 11
50531: PUSH
50532: LD_INT 30
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_VAR 0 12
50543: ARRAY
50544: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50545: LD_VAR 0 18
50549: NOT
50550: PUSH
50551: LD_INT 40
50553: PPUSH
50554: LD_VAR 0 16
50558: PPUSH
50559: CALL_OW 321
50563: PUSH
50564: LD_INT 2
50566: EQUAL
50567: AND
50568: PUSH
50569: LD_INT 7
50571: PUSH
50572: LD_VAR 0 5
50576: IN
50577: PUSH
50578: LD_INT 28
50580: PUSH
50581: LD_VAR 0 5
50585: IN
50586: OR
50587: PUSH
50588: LD_INT 45
50590: PUSH
50591: LD_VAR 0 5
50595: IN
50596: OR
50597: AND
50598: IFFALSE 50852
// begin hex := GetHexInfo ( x , y ) ;
50600: LD_ADDR_VAR 0 4
50604: PUSH
50605: LD_VAR 0 10
50609: PPUSH
50610: LD_VAR 0 11
50614: PPUSH
50615: CALL_OW 546
50619: ST_TO_ADDR
// if hex [ 1 ] then
50620: LD_VAR 0 4
50624: PUSH
50625: LD_INT 1
50627: ARRAY
50628: IFFALSE 50632
// exit ;
50630: GO 51035
// height := hex [ 2 ] ;
50632: LD_ADDR_VAR 0 15
50636: PUSH
50637: LD_VAR 0 4
50641: PUSH
50642: LD_INT 2
50644: ARRAY
50645: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50646: LD_ADDR_VAR 0 14
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: LD_INT 5
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// for i in tmp do
50669: LD_ADDR_VAR 0 8
50673: PUSH
50674: LD_VAR 0 14
50678: PUSH
50679: FOR_IN
50680: IFFALSE 50850
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50682: LD_ADDR_VAR 0 9
50686: PUSH
50687: LD_VAR 0 10
50691: PPUSH
50692: LD_VAR 0 8
50696: PPUSH
50697: LD_INT 5
50699: PPUSH
50700: CALL_OW 272
50704: PUSH
50705: LD_VAR 0 11
50709: PPUSH
50710: LD_VAR 0 8
50714: PPUSH
50715: LD_INT 5
50717: PPUSH
50718: CALL_OW 273
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50727: LD_VAR 0 9
50731: PUSH
50732: LD_INT 1
50734: ARRAY
50735: PPUSH
50736: LD_VAR 0 9
50740: PUSH
50741: LD_INT 2
50743: ARRAY
50744: PPUSH
50745: CALL_OW 488
50749: IFFALSE 50848
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50751: LD_ADDR_VAR 0 4
50755: PUSH
50756: LD_VAR 0 9
50760: PUSH
50761: LD_INT 1
50763: ARRAY
50764: PPUSH
50765: LD_VAR 0 9
50769: PUSH
50770: LD_INT 2
50772: ARRAY
50773: PPUSH
50774: CALL_OW 546
50778: ST_TO_ADDR
// if hex [ 1 ] then
50779: LD_VAR 0 4
50783: PUSH
50784: LD_INT 1
50786: ARRAY
50787: IFFALSE 50791
// continue ;
50789: GO 50679
// h := hex [ 2 ] ;
50791: LD_ADDR_VAR 0 13
50795: PUSH
50796: LD_VAR 0 4
50800: PUSH
50801: LD_INT 2
50803: ARRAY
50804: ST_TO_ADDR
// if h + 7 < height then
50805: LD_VAR 0 13
50809: PUSH
50810: LD_INT 7
50812: PLUS
50813: PUSH
50814: LD_VAR 0 15
50818: LESS
50819: IFFALSE 50848
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50821: LD_ADDR_VAR 0 18
50825: PUSH
50826: LD_INT 7
50828: PUSH
50829: LD_INT 28
50831: PUSH
50832: LD_INT 45
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: PUSH
50840: LD_VAR 0 12
50844: ARRAY
50845: ST_TO_ADDR
// break ;
50846: GO 50850
// end ; end ; end ;
50848: GO 50679
50850: POP
50851: POP
// end ; if not weapon then
50852: LD_VAR 0 18
50856: NOT
50857: IFFALSE 50917
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50859: LD_ADDR_VAR 0 5
50863: PUSH
50864: LD_VAR 0 5
50868: PUSH
50869: LD_INT 11
50871: PUSH
50872: LD_INT 30
50874: PUSH
50875: LD_INT 49
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: DIFF
50883: ST_TO_ADDR
// if not list then
50884: LD_VAR 0 5
50888: NOT
50889: IFFALSE 50893
// exit ;
50891: GO 51035
// weapon := list [ rand ( 1 , list ) ] ;
50893: LD_ADDR_VAR 0 18
50897: PUSH
50898: LD_VAR 0 5
50902: PUSH
50903: LD_INT 1
50905: PPUSH
50906: LD_VAR 0 5
50910: PPUSH
50911: CALL_OW 12
50915: ARRAY
50916: ST_TO_ADDR
// end ; if weapon then
50917: LD_VAR 0 18
50921: IFFALSE 51035
// begin tmp := CostOfWeapon ( weapon ) ;
50923: LD_ADDR_VAR 0 14
50927: PUSH
50928: LD_VAR 0 18
50932: PPUSH
50933: CALL_OW 451
50937: ST_TO_ADDR
// j := GetBase ( tower ) ;
50938: LD_ADDR_VAR 0 9
50942: PUSH
50943: LD_VAR 0 1
50947: PPUSH
50948: CALL_OW 274
50952: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50953: LD_VAR 0 9
50957: PPUSH
50958: LD_INT 1
50960: PPUSH
50961: CALL_OW 275
50965: PUSH
50966: LD_VAR 0 14
50970: PUSH
50971: LD_INT 1
50973: ARRAY
50974: GREATEREQUAL
50975: PUSH
50976: LD_VAR 0 9
50980: PPUSH
50981: LD_INT 2
50983: PPUSH
50984: CALL_OW 275
50988: PUSH
50989: LD_VAR 0 14
50993: PUSH
50994: LD_INT 2
50996: ARRAY
50997: GREATEREQUAL
50998: AND
50999: PUSH
51000: LD_VAR 0 9
51004: PPUSH
51005: LD_INT 3
51007: PPUSH
51008: CALL_OW 275
51012: PUSH
51013: LD_VAR 0 14
51017: PUSH
51018: LD_INT 3
51020: ARRAY
51021: GREATEREQUAL
51022: AND
51023: IFFALSE 51035
// result := weapon ;
51025: LD_ADDR_VAR 0 3
51029: PUSH
51030: LD_VAR 0 18
51034: ST_TO_ADDR
// end ; end ;
51035: LD_VAR 0 3
51039: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51040: LD_INT 0
51042: PPUSH
51043: PPUSH
// result := true ;
51044: LD_ADDR_VAR 0 3
51048: PUSH
51049: LD_INT 1
51051: ST_TO_ADDR
// if array1 = array2 then
51052: LD_VAR 0 1
51056: PUSH
51057: LD_VAR 0 2
51061: EQUAL
51062: IFFALSE 51122
// begin for i = 1 to array1 do
51064: LD_ADDR_VAR 0 4
51068: PUSH
51069: DOUBLE
51070: LD_INT 1
51072: DEC
51073: ST_TO_ADDR
51074: LD_VAR 0 1
51078: PUSH
51079: FOR_TO
51080: IFFALSE 51118
// if array1 [ i ] <> array2 [ i ] then
51082: LD_VAR 0 1
51086: PUSH
51087: LD_VAR 0 4
51091: ARRAY
51092: PUSH
51093: LD_VAR 0 2
51097: PUSH
51098: LD_VAR 0 4
51102: ARRAY
51103: NONEQUAL
51104: IFFALSE 51116
// begin result := false ;
51106: LD_ADDR_VAR 0 3
51110: PUSH
51111: LD_INT 0
51113: ST_TO_ADDR
// break ;
51114: GO 51118
// end ;
51116: GO 51079
51118: POP
51119: POP
// end else
51120: GO 51130
// result := false ;
51122: LD_ADDR_VAR 0 3
51126: PUSH
51127: LD_INT 0
51129: ST_TO_ADDR
// end ;
51130: LD_VAR 0 3
51134: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51135: LD_INT 0
51137: PPUSH
51138: PPUSH
// if not array1 or not array2 then
51139: LD_VAR 0 1
51143: NOT
51144: PUSH
51145: LD_VAR 0 2
51149: NOT
51150: OR
51151: IFFALSE 51155
// exit ;
51153: GO 51219
// result := true ;
51155: LD_ADDR_VAR 0 3
51159: PUSH
51160: LD_INT 1
51162: ST_TO_ADDR
// for i = 1 to array1 do
51163: LD_ADDR_VAR 0 4
51167: PUSH
51168: DOUBLE
51169: LD_INT 1
51171: DEC
51172: ST_TO_ADDR
51173: LD_VAR 0 1
51177: PUSH
51178: FOR_TO
51179: IFFALSE 51217
// if array1 [ i ] <> array2 [ i ] then
51181: LD_VAR 0 1
51185: PUSH
51186: LD_VAR 0 4
51190: ARRAY
51191: PUSH
51192: LD_VAR 0 2
51196: PUSH
51197: LD_VAR 0 4
51201: ARRAY
51202: NONEQUAL
51203: IFFALSE 51215
// begin result := false ;
51205: LD_ADDR_VAR 0 3
51209: PUSH
51210: LD_INT 0
51212: ST_TO_ADDR
// break ;
51213: GO 51217
// end ;
51215: GO 51178
51217: POP
51218: POP
// end ;
51219: LD_VAR 0 3
51223: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51224: LD_INT 0
51226: PPUSH
51227: PPUSH
51228: PPUSH
// pom := GetBase ( fac ) ;
51229: LD_ADDR_VAR 0 5
51233: PUSH
51234: LD_VAR 0 1
51238: PPUSH
51239: CALL_OW 274
51243: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51244: LD_ADDR_VAR 0 4
51248: PUSH
51249: LD_VAR 0 2
51253: PUSH
51254: LD_INT 1
51256: ARRAY
51257: PPUSH
51258: LD_VAR 0 2
51262: PUSH
51263: LD_INT 2
51265: ARRAY
51266: PPUSH
51267: LD_VAR 0 2
51271: PUSH
51272: LD_INT 3
51274: ARRAY
51275: PPUSH
51276: LD_VAR 0 2
51280: PUSH
51281: LD_INT 4
51283: ARRAY
51284: PPUSH
51285: CALL_OW 449
51289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51290: LD_ADDR_VAR 0 3
51294: PUSH
51295: LD_VAR 0 5
51299: PPUSH
51300: LD_INT 1
51302: PPUSH
51303: CALL_OW 275
51307: PUSH
51308: LD_VAR 0 4
51312: PUSH
51313: LD_INT 1
51315: ARRAY
51316: GREATEREQUAL
51317: PUSH
51318: LD_VAR 0 5
51322: PPUSH
51323: LD_INT 2
51325: PPUSH
51326: CALL_OW 275
51330: PUSH
51331: LD_VAR 0 4
51335: PUSH
51336: LD_INT 2
51338: ARRAY
51339: GREATEREQUAL
51340: AND
51341: PUSH
51342: LD_VAR 0 5
51346: PPUSH
51347: LD_INT 3
51349: PPUSH
51350: CALL_OW 275
51354: PUSH
51355: LD_VAR 0 4
51359: PUSH
51360: LD_INT 3
51362: ARRAY
51363: GREATEREQUAL
51364: AND
51365: ST_TO_ADDR
// end ;
51366: LD_VAR 0 3
51370: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51371: LD_INT 0
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
// pom := GetBase ( building ) ;
51377: LD_ADDR_VAR 0 3
51381: PUSH
51382: LD_VAR 0 1
51386: PPUSH
51387: CALL_OW 274
51391: ST_TO_ADDR
// if not pom then
51392: LD_VAR 0 3
51396: NOT
51397: IFFALSE 51401
// exit ;
51399: GO 51571
// btype := GetBType ( building ) ;
51401: LD_ADDR_VAR 0 5
51405: PUSH
51406: LD_VAR 0 1
51410: PPUSH
51411: CALL_OW 266
51415: ST_TO_ADDR
// if btype = b_armoury then
51416: LD_VAR 0 5
51420: PUSH
51421: LD_INT 4
51423: EQUAL
51424: IFFALSE 51434
// btype := b_barracks ;
51426: LD_ADDR_VAR 0 5
51430: PUSH
51431: LD_INT 5
51433: ST_TO_ADDR
// if btype = b_depot then
51434: LD_VAR 0 5
51438: PUSH
51439: LD_INT 0
51441: EQUAL
51442: IFFALSE 51452
// btype := b_warehouse ;
51444: LD_ADDR_VAR 0 5
51448: PUSH
51449: LD_INT 1
51451: ST_TO_ADDR
// if btype = b_workshop then
51452: LD_VAR 0 5
51456: PUSH
51457: LD_INT 2
51459: EQUAL
51460: IFFALSE 51470
// btype := b_factory ;
51462: LD_ADDR_VAR 0 5
51466: PUSH
51467: LD_INT 3
51469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51470: LD_ADDR_VAR 0 4
51474: PUSH
51475: LD_VAR 0 5
51479: PPUSH
51480: LD_VAR 0 1
51484: PPUSH
51485: CALL_OW 248
51489: PPUSH
51490: CALL_OW 450
51494: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51495: LD_ADDR_VAR 0 2
51499: PUSH
51500: LD_VAR 0 3
51504: PPUSH
51505: LD_INT 1
51507: PPUSH
51508: CALL_OW 275
51512: PUSH
51513: LD_VAR 0 4
51517: PUSH
51518: LD_INT 1
51520: ARRAY
51521: GREATEREQUAL
51522: PUSH
51523: LD_VAR 0 3
51527: PPUSH
51528: LD_INT 2
51530: PPUSH
51531: CALL_OW 275
51535: PUSH
51536: LD_VAR 0 4
51540: PUSH
51541: LD_INT 2
51543: ARRAY
51544: GREATEREQUAL
51545: AND
51546: PUSH
51547: LD_VAR 0 3
51551: PPUSH
51552: LD_INT 3
51554: PPUSH
51555: CALL_OW 275
51559: PUSH
51560: LD_VAR 0 4
51564: PUSH
51565: LD_INT 3
51567: ARRAY
51568: GREATEREQUAL
51569: AND
51570: ST_TO_ADDR
// end ;
51571: LD_VAR 0 2
51575: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51576: LD_INT 0
51578: PPUSH
51579: PPUSH
51580: PPUSH
// pom := GetBase ( building ) ;
51581: LD_ADDR_VAR 0 4
51585: PUSH
51586: LD_VAR 0 1
51590: PPUSH
51591: CALL_OW 274
51595: ST_TO_ADDR
// if not pom then
51596: LD_VAR 0 4
51600: NOT
51601: IFFALSE 51605
// exit ;
51603: GO 51706
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51605: LD_ADDR_VAR 0 5
51609: PUSH
51610: LD_VAR 0 2
51614: PPUSH
51615: LD_VAR 0 1
51619: PPUSH
51620: CALL_OW 248
51624: PPUSH
51625: CALL_OW 450
51629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51630: LD_ADDR_VAR 0 3
51634: PUSH
51635: LD_VAR 0 4
51639: PPUSH
51640: LD_INT 1
51642: PPUSH
51643: CALL_OW 275
51647: PUSH
51648: LD_VAR 0 5
51652: PUSH
51653: LD_INT 1
51655: ARRAY
51656: GREATEREQUAL
51657: PUSH
51658: LD_VAR 0 4
51662: PPUSH
51663: LD_INT 2
51665: PPUSH
51666: CALL_OW 275
51670: PUSH
51671: LD_VAR 0 5
51675: PUSH
51676: LD_INT 2
51678: ARRAY
51679: GREATEREQUAL
51680: AND
51681: PUSH
51682: LD_VAR 0 4
51686: PPUSH
51687: LD_INT 3
51689: PPUSH
51690: CALL_OW 275
51694: PUSH
51695: LD_VAR 0 5
51699: PUSH
51700: LD_INT 3
51702: ARRAY
51703: GREATEREQUAL
51704: AND
51705: ST_TO_ADDR
// end ;
51706: LD_VAR 0 3
51710: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51711: LD_INT 0
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
// result := false ;
51724: LD_ADDR_VAR 0 8
51728: PUSH
51729: LD_INT 0
51731: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51732: LD_VAR 0 5
51736: NOT
51737: PUSH
51738: LD_VAR 0 1
51742: NOT
51743: OR
51744: PUSH
51745: LD_VAR 0 2
51749: NOT
51750: OR
51751: PUSH
51752: LD_VAR 0 3
51756: NOT
51757: OR
51758: IFFALSE 51762
// exit ;
51760: GO 52576
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51762: LD_ADDR_VAR 0 14
51766: PUSH
51767: LD_VAR 0 1
51771: PPUSH
51772: LD_VAR 0 2
51776: PPUSH
51777: LD_VAR 0 3
51781: PPUSH
51782: LD_VAR 0 4
51786: PPUSH
51787: LD_VAR 0 5
51791: PUSH
51792: LD_INT 1
51794: ARRAY
51795: PPUSH
51796: CALL_OW 248
51800: PPUSH
51801: LD_INT 0
51803: PPUSH
51804: CALL 53809 0 6
51808: ST_TO_ADDR
// if not hexes then
51809: LD_VAR 0 14
51813: NOT
51814: IFFALSE 51818
// exit ;
51816: GO 52576
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51818: LD_ADDR_VAR 0 17
51822: PUSH
51823: LD_VAR 0 5
51827: PPUSH
51828: LD_INT 22
51830: PUSH
51831: LD_VAR 0 13
51835: PPUSH
51836: CALL_OW 255
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 30
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 30
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PPUSH
51877: CALL_OW 72
51881: ST_TO_ADDR
// for i = 1 to hexes do
51882: LD_ADDR_VAR 0 9
51886: PUSH
51887: DOUBLE
51888: LD_INT 1
51890: DEC
51891: ST_TO_ADDR
51892: LD_VAR 0 14
51896: PUSH
51897: FOR_TO
51898: IFFALSE 52574
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51900: LD_ADDR_VAR 0 13
51904: PUSH
51905: LD_VAR 0 14
51909: PUSH
51910: LD_VAR 0 9
51914: ARRAY
51915: PUSH
51916: LD_INT 1
51918: ARRAY
51919: PPUSH
51920: LD_VAR 0 14
51924: PUSH
51925: LD_VAR 0 9
51929: ARRAY
51930: PUSH
51931: LD_INT 2
51933: ARRAY
51934: PPUSH
51935: CALL_OW 428
51939: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51940: LD_VAR 0 14
51944: PUSH
51945: LD_VAR 0 9
51949: ARRAY
51950: PUSH
51951: LD_INT 1
51953: ARRAY
51954: PPUSH
51955: LD_VAR 0 14
51959: PUSH
51960: LD_VAR 0 9
51964: ARRAY
51965: PUSH
51966: LD_INT 2
51968: ARRAY
51969: PPUSH
51970: CALL_OW 351
51974: PUSH
51975: LD_VAR 0 14
51979: PUSH
51980: LD_VAR 0 9
51984: ARRAY
51985: PUSH
51986: LD_INT 1
51988: ARRAY
51989: PPUSH
51990: LD_VAR 0 14
51994: PUSH
51995: LD_VAR 0 9
51999: ARRAY
52000: PUSH
52001: LD_INT 2
52003: ARRAY
52004: PPUSH
52005: CALL_OW 488
52009: NOT
52010: OR
52011: PUSH
52012: LD_VAR 0 13
52016: PPUSH
52017: CALL_OW 247
52021: PUSH
52022: LD_INT 3
52024: EQUAL
52025: OR
52026: IFFALSE 52032
// exit ;
52028: POP
52029: POP
52030: GO 52576
// if not tmp then
52032: LD_VAR 0 13
52036: NOT
52037: IFFALSE 52041
// continue ;
52039: GO 51897
// result := true ;
52041: LD_ADDR_VAR 0 8
52045: PUSH
52046: LD_INT 1
52048: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52049: LD_VAR 0 6
52053: PUSH
52054: LD_VAR 0 13
52058: PPUSH
52059: CALL_OW 247
52063: PUSH
52064: LD_INT 2
52066: EQUAL
52067: AND
52068: PUSH
52069: LD_VAR 0 13
52073: PPUSH
52074: CALL_OW 263
52078: PUSH
52079: LD_INT 1
52081: EQUAL
52082: AND
52083: IFFALSE 52247
// begin if IsDrivenBy ( tmp ) then
52085: LD_VAR 0 13
52089: PPUSH
52090: CALL_OW 311
52094: IFFALSE 52098
// continue ;
52096: GO 51897
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52098: LD_VAR 0 6
52102: PPUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 60
52108: PUSH
52109: EMPTY
52110: LIST
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: LD_INT 55
52121: PUSH
52122: EMPTY
52123: LIST
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PPUSH
52133: CALL_OW 72
52137: IFFALSE 52245
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52139: LD_ADDR_VAR 0 18
52143: PUSH
52144: LD_VAR 0 6
52148: PPUSH
52149: LD_INT 3
52151: PUSH
52152: LD_INT 60
52154: PUSH
52155: EMPTY
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 55
52167: PUSH
52168: EMPTY
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PPUSH
52179: CALL_OW 72
52183: PUSH
52184: LD_INT 1
52186: ARRAY
52187: ST_TO_ADDR
// if IsInUnit ( driver ) then
52188: LD_VAR 0 18
52192: PPUSH
52193: CALL_OW 310
52197: IFFALSE 52208
// ComExit ( driver ) ;
52199: LD_VAR 0 18
52203: PPUSH
52204: CALL 77589 0 1
// AddComEnterUnit ( driver , tmp ) ;
52208: LD_VAR 0 18
52212: PPUSH
52213: LD_VAR 0 13
52217: PPUSH
52218: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52222: LD_VAR 0 18
52226: PPUSH
52227: LD_VAR 0 7
52231: PPUSH
52232: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52236: LD_VAR 0 18
52240: PPUSH
52241: CALL_OW 181
// end ; continue ;
52245: GO 51897
// end ; if not cleaners or not tmp in cleaners then
52247: LD_VAR 0 6
52251: NOT
52252: PUSH
52253: LD_VAR 0 13
52257: PUSH
52258: LD_VAR 0 6
52262: IN
52263: NOT
52264: OR
52265: IFFALSE 52572
// begin if dep then
52267: LD_VAR 0 17
52271: IFFALSE 52407
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52273: LD_ADDR_VAR 0 16
52277: PUSH
52278: LD_VAR 0 17
52282: PUSH
52283: LD_INT 1
52285: ARRAY
52286: PPUSH
52287: CALL_OW 250
52291: PPUSH
52292: LD_VAR 0 17
52296: PUSH
52297: LD_INT 1
52299: ARRAY
52300: PPUSH
52301: CALL_OW 254
52305: PPUSH
52306: LD_INT 5
52308: PPUSH
52309: CALL_OW 272
52313: PUSH
52314: LD_VAR 0 17
52318: PUSH
52319: LD_INT 1
52321: ARRAY
52322: PPUSH
52323: CALL_OW 251
52327: PPUSH
52328: LD_VAR 0 17
52332: PUSH
52333: LD_INT 1
52335: ARRAY
52336: PPUSH
52337: CALL_OW 254
52341: PPUSH
52342: LD_INT 5
52344: PPUSH
52345: CALL_OW 273
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52354: LD_VAR 0 16
52358: PUSH
52359: LD_INT 1
52361: ARRAY
52362: PPUSH
52363: LD_VAR 0 16
52367: PUSH
52368: LD_INT 2
52370: ARRAY
52371: PPUSH
52372: CALL_OW 488
52376: IFFALSE 52407
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52378: LD_VAR 0 13
52382: PPUSH
52383: LD_VAR 0 16
52387: PUSH
52388: LD_INT 1
52390: ARRAY
52391: PPUSH
52392: LD_VAR 0 16
52396: PUSH
52397: LD_INT 2
52399: ARRAY
52400: PPUSH
52401: CALL_OW 111
// continue ;
52405: GO 51897
// end ; end ; r := GetDir ( tmp ) ;
52407: LD_ADDR_VAR 0 15
52411: PUSH
52412: LD_VAR 0 13
52416: PPUSH
52417: CALL_OW 254
52421: ST_TO_ADDR
// if r = 5 then
52422: LD_VAR 0 15
52426: PUSH
52427: LD_INT 5
52429: EQUAL
52430: IFFALSE 52440
// r := 0 ;
52432: LD_ADDR_VAR 0 15
52436: PUSH
52437: LD_INT 0
52439: ST_TO_ADDR
// for j = r to 5 do
52440: LD_ADDR_VAR 0 10
52444: PUSH
52445: DOUBLE
52446: LD_VAR 0 15
52450: DEC
52451: ST_TO_ADDR
52452: LD_INT 5
52454: PUSH
52455: FOR_TO
52456: IFFALSE 52570
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52458: LD_ADDR_VAR 0 11
52462: PUSH
52463: LD_VAR 0 13
52467: PPUSH
52468: CALL_OW 250
52472: PPUSH
52473: LD_VAR 0 10
52477: PPUSH
52478: LD_INT 2
52480: PPUSH
52481: CALL_OW 272
52485: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52486: LD_ADDR_VAR 0 12
52490: PUSH
52491: LD_VAR 0 13
52495: PPUSH
52496: CALL_OW 251
52500: PPUSH
52501: LD_VAR 0 10
52505: PPUSH
52506: LD_INT 2
52508: PPUSH
52509: CALL_OW 273
52513: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52514: LD_VAR 0 11
52518: PPUSH
52519: LD_VAR 0 12
52523: PPUSH
52524: CALL_OW 488
52528: PUSH
52529: LD_VAR 0 11
52533: PPUSH
52534: LD_VAR 0 12
52538: PPUSH
52539: CALL_OW 428
52543: NOT
52544: AND
52545: IFFALSE 52568
// begin ComMoveXY ( tmp , _x , _y ) ;
52547: LD_VAR 0 13
52551: PPUSH
52552: LD_VAR 0 11
52556: PPUSH
52557: LD_VAR 0 12
52561: PPUSH
52562: CALL_OW 111
// break ;
52566: GO 52570
// end ; end ;
52568: GO 52455
52570: POP
52571: POP
// end ; end ;
52572: GO 51897
52574: POP
52575: POP
// end ;
52576: LD_VAR 0 8
52580: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52581: LD_INT 0
52583: PPUSH
// result := true ;
52584: LD_ADDR_VAR 0 3
52588: PUSH
52589: LD_INT 1
52591: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52592: LD_VAR 0 2
52596: PUSH
52597: LD_INT 24
52599: DOUBLE
52600: EQUAL
52601: IFTRUE 52611
52603: LD_INT 33
52605: DOUBLE
52606: EQUAL
52607: IFTRUE 52611
52609: GO 52636
52611: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52612: LD_ADDR_VAR 0 3
52616: PUSH
52617: LD_INT 32
52619: PPUSH
52620: LD_VAR 0 1
52624: PPUSH
52625: CALL_OW 321
52629: PUSH
52630: LD_INT 2
52632: EQUAL
52633: ST_TO_ADDR
52634: GO 52952
52636: LD_INT 20
52638: DOUBLE
52639: EQUAL
52640: IFTRUE 52644
52642: GO 52669
52644: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52645: LD_ADDR_VAR 0 3
52649: PUSH
52650: LD_INT 6
52652: PPUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: CALL_OW 321
52662: PUSH
52663: LD_INT 2
52665: EQUAL
52666: ST_TO_ADDR
52667: GO 52952
52669: LD_INT 22
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52683
52675: LD_INT 36
52677: DOUBLE
52678: EQUAL
52679: IFTRUE 52683
52681: GO 52708
52683: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52684: LD_ADDR_VAR 0 3
52688: PUSH
52689: LD_INT 15
52691: PPUSH
52692: LD_VAR 0 1
52696: PPUSH
52697: CALL_OW 321
52701: PUSH
52702: LD_INT 2
52704: EQUAL
52705: ST_TO_ADDR
52706: GO 52952
52708: LD_INT 30
52710: DOUBLE
52711: EQUAL
52712: IFTRUE 52716
52714: GO 52741
52716: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52717: LD_ADDR_VAR 0 3
52721: PUSH
52722: LD_INT 20
52724: PPUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 321
52734: PUSH
52735: LD_INT 2
52737: EQUAL
52738: ST_TO_ADDR
52739: GO 52952
52741: LD_INT 28
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52755
52747: LD_INT 21
52749: DOUBLE
52750: EQUAL
52751: IFTRUE 52755
52753: GO 52780
52755: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: LD_INT 21
52763: PPUSH
52764: LD_VAR 0 1
52768: PPUSH
52769: CALL_OW 321
52773: PUSH
52774: LD_INT 2
52776: EQUAL
52777: ST_TO_ADDR
52778: GO 52952
52780: LD_INT 16
52782: DOUBLE
52783: EQUAL
52784: IFTRUE 52788
52786: GO 52813
52788: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52789: LD_ADDR_VAR 0 3
52793: PUSH
52794: LD_INT 84
52796: PPUSH
52797: LD_VAR 0 1
52801: PPUSH
52802: CALL_OW 321
52806: PUSH
52807: LD_INT 2
52809: EQUAL
52810: ST_TO_ADDR
52811: GO 52952
52813: LD_INT 19
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52827
52819: LD_INT 23
52821: DOUBLE
52822: EQUAL
52823: IFTRUE 52827
52825: GO 52852
52827: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52828: LD_ADDR_VAR 0 3
52832: PUSH
52833: LD_INT 83
52835: PPUSH
52836: LD_VAR 0 1
52840: PPUSH
52841: CALL_OW 321
52845: PUSH
52846: LD_INT 2
52848: EQUAL
52849: ST_TO_ADDR
52850: GO 52952
52852: LD_INT 17
52854: DOUBLE
52855: EQUAL
52856: IFTRUE 52860
52858: GO 52885
52860: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52861: LD_ADDR_VAR 0 3
52865: PUSH
52866: LD_INT 39
52868: PPUSH
52869: LD_VAR 0 1
52873: PPUSH
52874: CALL_OW 321
52878: PUSH
52879: LD_INT 2
52881: EQUAL
52882: ST_TO_ADDR
52883: GO 52952
52885: LD_INT 18
52887: DOUBLE
52888: EQUAL
52889: IFTRUE 52893
52891: GO 52918
52893: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52894: LD_ADDR_VAR 0 3
52898: PUSH
52899: LD_INT 40
52901: PPUSH
52902: LD_VAR 0 1
52906: PPUSH
52907: CALL_OW 321
52911: PUSH
52912: LD_INT 2
52914: EQUAL
52915: ST_TO_ADDR
52916: GO 52952
52918: LD_INT 27
52920: DOUBLE
52921: EQUAL
52922: IFTRUE 52926
52924: GO 52951
52926: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52927: LD_ADDR_VAR 0 3
52931: PUSH
52932: LD_INT 35
52934: PPUSH
52935: LD_VAR 0 1
52939: PPUSH
52940: CALL_OW 321
52944: PUSH
52945: LD_INT 2
52947: EQUAL
52948: ST_TO_ADDR
52949: GO 52952
52951: POP
// end ;
52952: LD_VAR 0 3
52956: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52957: LD_INT 0
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
// result := false ;
52970: LD_ADDR_VAR 0 6
52974: PUSH
52975: LD_INT 0
52977: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52978: LD_VAR 0 1
52982: NOT
52983: PUSH
52984: LD_VAR 0 1
52988: PPUSH
52989: CALL_OW 266
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: IN
53004: NOT
53005: OR
53006: PUSH
53007: LD_VAR 0 2
53011: NOT
53012: OR
53013: PUSH
53014: LD_VAR 0 5
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: LD_INT 4
53033: PUSH
53034: LD_INT 5
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: IN
53045: NOT
53046: OR
53047: PUSH
53048: LD_VAR 0 3
53052: PPUSH
53053: LD_VAR 0 4
53057: PPUSH
53058: CALL_OW 488
53062: NOT
53063: OR
53064: IFFALSE 53068
// exit ;
53066: GO 53804
// side := GetSide ( depot ) ;
53068: LD_ADDR_VAR 0 9
53072: PUSH
53073: LD_VAR 0 1
53077: PPUSH
53078: CALL_OW 255
53082: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53083: LD_VAR 0 9
53087: PPUSH
53088: LD_VAR 0 2
53092: PPUSH
53093: CALL 52581 0 2
53097: NOT
53098: IFFALSE 53102
// exit ;
53100: GO 53804
// pom := GetBase ( depot ) ;
53102: LD_ADDR_VAR 0 10
53106: PUSH
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 274
53116: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53117: LD_ADDR_VAR 0 11
53121: PUSH
53122: LD_VAR 0 2
53126: PPUSH
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 248
53136: PPUSH
53137: CALL_OW 450
53141: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53142: LD_VAR 0 10
53146: PPUSH
53147: LD_INT 1
53149: PPUSH
53150: CALL_OW 275
53154: PUSH
53155: LD_VAR 0 11
53159: PUSH
53160: LD_INT 1
53162: ARRAY
53163: GREATEREQUAL
53164: PUSH
53165: LD_VAR 0 10
53169: PPUSH
53170: LD_INT 2
53172: PPUSH
53173: CALL_OW 275
53177: PUSH
53178: LD_VAR 0 11
53182: PUSH
53183: LD_INT 2
53185: ARRAY
53186: GREATEREQUAL
53187: AND
53188: PUSH
53189: LD_VAR 0 10
53193: PPUSH
53194: LD_INT 3
53196: PPUSH
53197: CALL_OW 275
53201: PUSH
53202: LD_VAR 0 11
53206: PUSH
53207: LD_INT 3
53209: ARRAY
53210: GREATEREQUAL
53211: AND
53212: NOT
53213: IFFALSE 53217
// exit ;
53215: GO 53804
// if GetBType ( depot ) = b_depot then
53217: LD_VAR 0 1
53221: PPUSH
53222: CALL_OW 266
53226: PUSH
53227: LD_INT 0
53229: EQUAL
53230: IFFALSE 53242
// dist := 28 else
53232: LD_ADDR_VAR 0 14
53236: PUSH
53237: LD_INT 28
53239: ST_TO_ADDR
53240: GO 53250
// dist := 36 ;
53242: LD_ADDR_VAR 0 14
53246: PUSH
53247: LD_INT 36
53249: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53250: LD_VAR 0 1
53254: PPUSH
53255: LD_VAR 0 3
53259: PPUSH
53260: LD_VAR 0 4
53264: PPUSH
53265: CALL_OW 297
53269: PUSH
53270: LD_VAR 0 14
53274: GREATER
53275: IFFALSE 53279
// exit ;
53277: GO 53804
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53279: LD_ADDR_VAR 0 12
53283: PUSH
53284: LD_VAR 0 2
53288: PPUSH
53289: LD_VAR 0 3
53293: PPUSH
53294: LD_VAR 0 4
53298: PPUSH
53299: LD_VAR 0 5
53303: PPUSH
53304: LD_VAR 0 1
53308: PPUSH
53309: CALL_OW 248
53313: PPUSH
53314: LD_INT 0
53316: PPUSH
53317: CALL 53809 0 6
53321: ST_TO_ADDR
// if not hexes then
53322: LD_VAR 0 12
53326: NOT
53327: IFFALSE 53331
// exit ;
53329: GO 53804
// hex := GetHexInfo ( x , y ) ;
53331: LD_ADDR_VAR 0 15
53335: PUSH
53336: LD_VAR 0 3
53340: PPUSH
53341: LD_VAR 0 4
53345: PPUSH
53346: CALL_OW 546
53350: ST_TO_ADDR
// if hex [ 1 ] then
53351: LD_VAR 0 15
53355: PUSH
53356: LD_INT 1
53358: ARRAY
53359: IFFALSE 53363
// exit ;
53361: GO 53804
// height := hex [ 2 ] ;
53363: LD_ADDR_VAR 0 13
53367: PUSH
53368: LD_VAR 0 15
53372: PUSH
53373: LD_INT 2
53375: ARRAY
53376: ST_TO_ADDR
// for i = 1 to hexes do
53377: LD_ADDR_VAR 0 7
53381: PUSH
53382: DOUBLE
53383: LD_INT 1
53385: DEC
53386: ST_TO_ADDR
53387: LD_VAR 0 12
53391: PUSH
53392: FOR_TO
53393: IFFALSE 53723
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53395: LD_VAR 0 12
53399: PUSH
53400: LD_VAR 0 7
53404: ARRAY
53405: PUSH
53406: LD_INT 1
53408: ARRAY
53409: PPUSH
53410: LD_VAR 0 12
53414: PUSH
53415: LD_VAR 0 7
53419: ARRAY
53420: PUSH
53421: LD_INT 2
53423: ARRAY
53424: PPUSH
53425: CALL_OW 488
53429: NOT
53430: PUSH
53431: LD_VAR 0 12
53435: PUSH
53436: LD_VAR 0 7
53440: ARRAY
53441: PUSH
53442: LD_INT 1
53444: ARRAY
53445: PPUSH
53446: LD_VAR 0 12
53450: PUSH
53451: LD_VAR 0 7
53455: ARRAY
53456: PUSH
53457: LD_INT 2
53459: ARRAY
53460: PPUSH
53461: CALL_OW 428
53465: PUSH
53466: LD_INT 0
53468: GREATER
53469: OR
53470: PUSH
53471: LD_VAR 0 12
53475: PUSH
53476: LD_VAR 0 7
53480: ARRAY
53481: PUSH
53482: LD_INT 1
53484: ARRAY
53485: PPUSH
53486: LD_VAR 0 12
53490: PUSH
53491: LD_VAR 0 7
53495: ARRAY
53496: PUSH
53497: LD_INT 2
53499: ARRAY
53500: PPUSH
53501: CALL_OW 351
53505: OR
53506: IFFALSE 53512
// exit ;
53508: POP
53509: POP
53510: GO 53804
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53512: LD_ADDR_VAR 0 8
53516: PUSH
53517: LD_VAR 0 12
53521: PUSH
53522: LD_VAR 0 7
53526: ARRAY
53527: PUSH
53528: LD_INT 1
53530: ARRAY
53531: PPUSH
53532: LD_VAR 0 12
53536: PUSH
53537: LD_VAR 0 7
53541: ARRAY
53542: PUSH
53543: LD_INT 2
53545: ARRAY
53546: PPUSH
53547: CALL_OW 546
53551: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53552: LD_VAR 0 8
53556: PUSH
53557: LD_INT 1
53559: ARRAY
53560: PUSH
53561: LD_VAR 0 8
53565: PUSH
53566: LD_INT 2
53568: ARRAY
53569: PUSH
53570: LD_VAR 0 13
53574: PUSH
53575: LD_INT 2
53577: PLUS
53578: GREATER
53579: OR
53580: PUSH
53581: LD_VAR 0 8
53585: PUSH
53586: LD_INT 2
53588: ARRAY
53589: PUSH
53590: LD_VAR 0 13
53594: PUSH
53595: LD_INT 2
53597: MINUS
53598: LESS
53599: OR
53600: PUSH
53601: LD_VAR 0 8
53605: PUSH
53606: LD_INT 3
53608: ARRAY
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 8
53615: PUSH
53616: LD_INT 9
53618: PUSH
53619: LD_INT 10
53621: PUSH
53622: LD_INT 11
53624: PUSH
53625: LD_INT 12
53627: PUSH
53628: LD_INT 13
53630: PUSH
53631: LD_INT 16
53633: PUSH
53634: LD_INT 17
53636: PUSH
53637: LD_INT 18
53639: PUSH
53640: LD_INT 19
53642: PUSH
53643: LD_INT 20
53645: PUSH
53646: LD_INT 21
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: IN
53664: NOT
53665: OR
53666: PUSH
53667: LD_VAR 0 8
53671: PUSH
53672: LD_INT 5
53674: ARRAY
53675: NOT
53676: OR
53677: PUSH
53678: LD_VAR 0 8
53682: PUSH
53683: LD_INT 6
53685: ARRAY
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 7
53695: PUSH
53696: LD_INT 9
53698: PUSH
53699: LD_INT 10
53701: PUSH
53702: LD_INT 11
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: IN
53713: NOT
53714: OR
53715: IFFALSE 53721
// exit ;
53717: POP
53718: POP
53719: GO 53804
// end ;
53721: GO 53392
53723: POP
53724: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53725: LD_VAR 0 9
53729: PPUSH
53730: LD_VAR 0 3
53734: PPUSH
53735: LD_VAR 0 4
53739: PPUSH
53740: LD_INT 20
53742: PPUSH
53743: CALL 45756 0 4
53747: PUSH
53748: LD_INT 4
53750: ARRAY
53751: IFFALSE 53755
// exit ;
53753: GO 53804
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53755: LD_VAR 0 2
53759: PUSH
53760: LD_INT 29
53762: PUSH
53763: LD_INT 30
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: IN
53770: PUSH
53771: LD_VAR 0 3
53775: PPUSH
53776: LD_VAR 0 4
53780: PPUSH
53781: LD_VAR 0 9
53785: PPUSH
53786: CALL_OW 440
53790: NOT
53791: AND
53792: IFFALSE 53796
// exit ;
53794: GO 53804
// result := true ;
53796: LD_ADDR_VAR 0 6
53800: PUSH
53801: LD_INT 1
53803: ST_TO_ADDR
// end ;
53804: LD_VAR 0 6
53808: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53809: LD_INT 0
53811: PPUSH
53812: PPUSH
53813: PPUSH
53814: PPUSH
53815: PPUSH
53816: PPUSH
53817: PPUSH
53818: PPUSH
53819: PPUSH
53820: PPUSH
53821: PPUSH
53822: PPUSH
53823: PPUSH
53824: PPUSH
53825: PPUSH
53826: PPUSH
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
53835: PPUSH
53836: PPUSH
53837: PPUSH
53838: PPUSH
53839: PPUSH
53840: PPUSH
53841: PPUSH
53842: PPUSH
53843: PPUSH
53844: PPUSH
53845: PPUSH
53846: PPUSH
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
53860: PPUSH
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
53865: PPUSH
53866: PPUSH
53867: PPUSH
53868: PPUSH
// result = [ ] ;
53869: LD_ADDR_VAR 0 7
53873: PUSH
53874: EMPTY
53875: ST_TO_ADDR
// temp_list = [ ] ;
53876: LD_ADDR_VAR 0 9
53880: PUSH
53881: EMPTY
53882: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53883: LD_VAR 0 4
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: LD_INT 4
53902: PUSH
53903: LD_INT 5
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: IN
53914: NOT
53915: PUSH
53916: LD_VAR 0 1
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: IN
53931: PUSH
53932: LD_VAR 0 5
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: IN
53951: NOT
53952: AND
53953: OR
53954: IFFALSE 53958
// exit ;
53956: GO 72349
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53958: LD_VAR 0 1
53962: PUSH
53963: LD_INT 6
53965: PUSH
53966: LD_INT 7
53968: PUSH
53969: LD_INT 8
53971: PUSH
53972: LD_INT 13
53974: PUSH
53975: LD_INT 12
53977: PUSH
53978: LD_INT 15
53980: PUSH
53981: LD_INT 11
53983: PUSH
53984: LD_INT 14
53986: PUSH
53987: LD_INT 10
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: IN
54001: IFFALSE 54011
// btype = b_lab ;
54003: LD_ADDR_VAR 0 1
54007: PUSH
54008: LD_INT 6
54010: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54011: LD_VAR 0 6
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: IN
54030: NOT
54031: PUSH
54032: LD_VAR 0 1
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: LD_INT 6
54051: PUSH
54052: LD_INT 36
54054: PUSH
54055: LD_INT 4
54057: PUSH
54058: LD_INT 5
54060: PUSH
54061: LD_INT 31
54063: PUSH
54064: LD_INT 32
54066: PUSH
54067: LD_INT 33
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: IN
54083: NOT
54084: PUSH
54085: LD_VAR 0 6
54089: PUSH
54090: LD_INT 1
54092: EQUAL
54093: AND
54094: OR
54095: PUSH
54096: LD_VAR 0 1
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: IN
54111: NOT
54112: PUSH
54113: LD_VAR 0 6
54117: PUSH
54118: LD_INT 2
54120: EQUAL
54121: AND
54122: OR
54123: IFFALSE 54133
// mode = 0 ;
54125: LD_ADDR_VAR 0 6
54129: PUSH
54130: LD_INT 0
54132: ST_TO_ADDR
// case mode of 0 :
54133: LD_VAR 0 6
54137: PUSH
54138: LD_INT 0
54140: DOUBLE
54141: EQUAL
54142: IFTRUE 54146
54144: GO 65599
54146: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54147: LD_ADDR_VAR 0 11
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54340: LD_ADDR_VAR 0 12
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 3
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54536: LD_ADDR_VAR 0 13
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54735: LD_ADDR_VAR 0 14
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54931: LD_ADDR_VAR 0 15
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55124: LD_ADDR_VAR 0 16
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55317: LD_ADDR_VAR 0 17
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55547: LD_ADDR_VAR 0 18
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55777: LD_ADDR_VAR 0 19
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56007: LD_ADDR_VAR 0 20
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56237: LD_ADDR_VAR 0 21
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56467: LD_ADDR_VAR 0 22
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56697: LD_ADDR_VAR 0 23
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56977: LD_ADDR_VAR 0 24
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 3
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57253: LD_ADDR_VAR 0 25
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 2
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 3
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57527: LD_ADDR_VAR 0 26
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57803: LD_ADDR_VAR 0 27
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58083: LD_ADDR_VAR 0 28
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58365: LD_ADDR_VAR 0 29
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58644: LD_ADDR_VAR 0 30
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58922: LD_ADDR_VAR 0 31
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 3
59165: NEG
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59200: LD_ADDR_VAR 0 32
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 3
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 3
59443: NEG
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59478: LD_ADDR_VAR 0 33
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: LD_INT 2
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59757: LD_ADDR_VAR 0 34
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 3
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60037: LD_ADDR_VAR 0 35
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60149: LD_ADDR_VAR 0 36
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60261: LD_ADDR_VAR 0 37
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60373: LD_ADDR_VAR 0 38
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60485: LD_ADDR_VAR 0 39
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60597: LD_ADDR_VAR 0 40
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60709: LD_ADDR_VAR 0 41
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 3
60994: NEG
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61059: LD_ADDR_VAR 0 42
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 2
61237: NEG
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 3
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 3
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 3
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 3
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61409: LD_ADDR_VAR 0 43
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 3
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 3
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61757: LD_ADDR_VAR 0 44
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: NEG
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: NEG
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 3
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 3
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: NEG
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62107: LD_ADDR_VAR 0 45
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 2
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 3
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: LD_INT 3
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: LD_INT 3
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: NEG
62405: PUSH
62406: LD_INT 2
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: NEG
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62457: LD_ADDR_VAR 0 46
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: LD_INT 2
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 3
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 3
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 3
62764: NEG
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62805: LD_ADDR_VAR 0 47
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 2
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62956: LD_ADDR_VAR 0 48
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 2
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 2
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63103: LD_ADDR_VAR 0 49
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63247: LD_ADDR_VAR 0 50
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 1
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 2
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63391: LD_ADDR_VAR 0 51
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 2
63514: NEG
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63538: LD_ADDR_VAR 0 52
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: NEG
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 2
63653: NEG
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63689: LD_ADDR_VAR 0 53
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 1
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 2
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 2
63865: NEG
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: NEG
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63919: LD_ADDR_VAR 0 54
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: LD_INT 1
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: LD_INT 2
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 2
64095: NEG
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: NEG
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64149: LD_ADDR_VAR 0 55
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: NEG
64231: PUSH
64232: LD_INT 2
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: NEG
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64379: LD_ADDR_VAR 0 56
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 2
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: LD_INT 2
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64609: LD_ADDR_VAR 0 57
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 2
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: NEG
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64839: LD_ADDR_VAR 0 58
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: LD_INT 2
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 2
65038: NEG
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65069: LD_ADDR_VAR 0 59
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65157: LD_ADDR_VAR 0 60
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65245: LD_ADDR_VAR 0 61
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65333: LD_ADDR_VAR 0 62
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65421: LD_ADDR_VAR 0 63
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65509: LD_ADDR_VAR 0 64
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// end ; 1 :
65597: GO 71494
65599: LD_INT 1
65601: DOUBLE
65602: EQUAL
65603: IFTRUE 65607
65605: GO 68230
65607: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65608: LD_ADDR_VAR 0 11
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 3
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 3
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: LD_INT 2
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65652: LD_ADDR_VAR 0 12
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: LIST
65692: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65693: LD_ADDR_VAR 0 13
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 3
65710: PUSH
65711: LD_INT 3
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: LIST
65732: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65733: LD_ADDR_VAR 0 14
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 2
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65774: LD_ADDR_VAR 0 15
65778: PUSH
65779: LD_INT 2
65781: NEG
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 3
65792: NEG
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 3
65803: NEG
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65818: LD_ADDR_VAR 0 16
65822: PUSH
65823: LD_INT 2
65825: NEG
65826: PUSH
65827: LD_INT 3
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: LD_INT 2
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: LD_INT 3
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65864: LD_ADDR_VAR 0 17
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: LD_INT 3
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 3
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: LIST
65907: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65908: LD_ADDR_VAR 0 18
65912: PUSH
65913: LD_INT 2
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 3
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 3
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: LIST
65948: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65949: LD_ADDR_VAR 0 19
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 2
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65989: LD_ADDR_VAR 0 20
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: LD_INT 2
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: LIST
66029: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66030: LD_ADDR_VAR 0 21
66034: PUSH
66035: LD_INT 2
66037: NEG
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 3
66048: NEG
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: LIST
66073: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66074: LD_ADDR_VAR 0 22
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: LD_INT 3
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 3
66093: NEG
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: NEG
66106: PUSH
66107: LD_INT 3
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66120: LD_ADDR_VAR 0 23
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: LD_INT 4
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: LIST
66163: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66164: LD_ADDR_VAR 0 24
66168: PUSH
66169: LD_INT 3
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 3
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 4
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66205: LD_ADDR_VAR 0 25
66209: PUSH
66210: LD_INT 3
66212: PUSH
66213: LD_INT 3
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 4
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 3
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66245: LD_ADDR_VAR 0 26
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 4
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 1
66272: NEG
66273: PUSH
66274: LD_INT 3
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66286: LD_ADDR_VAR 0 27
66290: PUSH
66291: LD_INT 3
66293: NEG
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 3
66304: NEG
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 4
66315: NEG
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66330: LD_ADDR_VAR 0 28
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 3
66349: NEG
66350: PUSH
66351: LD_INT 4
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 4
66361: NEG
66362: PUSH
66363: LD_INT 3
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: LIST
66375: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66376: LD_ADDR_VAR 0 29
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: LD_INT 3
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 3
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 2
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: LD_INT 4
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: LD_INT 3
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: LD_INT 5
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 5
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: LD_INT 4
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: LD_INT 6
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: LD_INT 6
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: LD_INT 5
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66531: LD_ADDR_VAR 0 30
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 4
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 4
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 5
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 5
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 5
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 6
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 6
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66674: LD_ADDR_VAR 0 31
66678: PUSH
66679: LD_INT 3
66681: PUSH
66682: LD_INT 2
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 3
66691: PUSH
66692: LD_INT 3
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 2
66701: PUSH
66702: LD_INT 3
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 4
66711: PUSH
66712: LD_INT 3
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 4
66721: PUSH
66722: LD_INT 4
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: LD_INT 4
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 5
66741: PUSH
66742: LD_INT 4
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 5
66751: PUSH
66752: LD_INT 5
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 4
66761: PUSH
66762: LD_INT 5
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 6
66771: PUSH
66772: LD_INT 5
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 6
66781: PUSH
66782: LD_INT 6
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 5
66791: PUSH
66792: LD_INT 6
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66813: LD_ADDR_VAR 0 32
66817: PUSH
66818: LD_INT 1
66820: PUSH
66821: LD_INT 3
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: LD_INT 3
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: LD_INT 4
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 4
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: LD_INT 3
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 1
66882: PUSH
66883: LD_INT 5
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: LD_INT 5
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: LD_INT 4
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 6
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 6
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 1
66933: NEG
66934: PUSH
66935: LD_INT 5
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66956: LD_ADDR_VAR 0 33
66960: PUSH
66961: LD_INT 2
66963: NEG
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: NEG
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 3
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 3
66997: NEG
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 4
67008: NEG
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 4
67019: NEG
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 5
67042: NEG
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 5
67053: NEG
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 5
67065: NEG
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 6
67076: NEG
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 6
67087: NEG
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67111: LD_ADDR_VAR 0 34
67115: PUSH
67116: LD_INT 2
67118: NEG
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 3
67130: NEG
67131: PUSH
67132: LD_INT 2
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: NEG
67143: PUSH
67144: LD_INT 3
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: NEG
67155: PUSH
67156: LD_INT 4
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 4
67166: NEG
67167: PUSH
67168: LD_INT 3
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 4
67178: NEG
67179: PUSH
67180: LD_INT 4
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 4
67190: NEG
67191: PUSH
67192: LD_INT 5
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 5
67202: NEG
67203: PUSH
67204: LD_INT 4
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 5
67214: NEG
67215: PUSH
67216: LD_INT 5
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 5
67226: NEG
67227: PUSH
67228: LD_INT 6
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 6
67238: NEG
67239: PUSH
67240: LD_INT 5
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 6
67250: NEG
67251: PUSH
67252: LD_INT 6
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67274: LD_ADDR_VAR 0 41
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: LD_INT 2
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: LD_INT 3
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: LD_INT 2
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67318: LD_ADDR_VAR 0 42
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: LD_INT 1
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67359: LD_ADDR_VAR 0 43
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: LD_INT 2
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 3
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: LIST
67398: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67399: LD_ADDR_VAR 0 44
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: LD_INT 2
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: LD_INT 3
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: PUSH
67428: LD_INT 2
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: LIST
67439: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67440: LD_ADDR_VAR 0 45
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 3
67469: NEG
67470: PUSH
67471: LD_INT 1
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67484: LD_ADDR_VAR 0 46
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: LD_INT 2
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 2
67503: NEG
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 3
67515: NEG
67516: PUSH
67517: LD_INT 2
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: LIST
67529: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67530: LD_ADDR_VAR 0 47
67534: PUSH
67535: LD_INT 2
67537: NEG
67538: PUSH
67539: LD_INT 3
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67563: LD_ADDR_VAR 0 48
67567: PUSH
67568: LD_INT 1
67570: PUSH
67571: LD_INT 2
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67594: LD_ADDR_VAR 0 49
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: LD_INT 1
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: LD_INT 2
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67623: LD_ADDR_VAR 0 50
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: LD_INT 3
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 1
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67652: LD_ADDR_VAR 0 51
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: LD_INT 2
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: NEG
67671: PUSH
67672: LD_INT 1
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67683: LD_ADDR_VAR 0 52
67687: PUSH
67688: LD_INT 3
67690: NEG
67691: PUSH
67692: LD_INT 1
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 3
67702: NEG
67703: PUSH
67704: LD_INT 2
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67716: LD_ADDR_VAR 0 53
67720: PUSH
67721: LD_INT 1
67723: NEG
67724: PUSH
67725: LD_INT 3
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: LD_INT 3
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 1
67746: PUSH
67747: LD_INT 2
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: LIST
67759: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67760: LD_ADDR_VAR 0 54
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: LIST
67800: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67801: LD_ADDR_VAR 0 55
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 3
67818: PUSH
67819: LD_INT 3
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: LD_INT 3
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67841: LD_ADDR_VAR 0 56
67845: PUSH
67846: LD_INT 1
67848: PUSH
67849: LD_INT 3
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 2
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67882: LD_ADDR_VAR 0 57
67886: PUSH
67887: LD_INT 2
67889: NEG
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 3
67900: NEG
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 3
67911: NEG
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67926: LD_ADDR_VAR 0 58
67930: PUSH
67931: LD_INT 2
67933: NEG
67934: PUSH
67935: LD_INT 3
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: LD_INT 2
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: LIST
67971: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67972: LD_ADDR_VAR 0 59
67976: PUSH
67977: LD_INT 1
67979: NEG
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 2
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: LIST
68015: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68016: LD_ADDR_VAR 0 60
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: LIST
68056: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68057: LD_ADDR_VAR 0 61
68061: PUSH
68062: LD_INT 2
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: PUSH
68085: LD_INT 2
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68097: LD_ADDR_VAR 0 62
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: LD_INT 2
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: LD_INT 1
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: LIST
68137: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68138: LD_ADDR_VAR 0 63
68142: PUSH
68143: LD_INT 1
68145: NEG
68146: PUSH
68147: LD_INT 1
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 2
68156: NEG
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 2
68167: NEG
68168: PUSH
68169: LD_INT 1
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68182: LD_ADDR_VAR 0 64
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 2
68201: NEG
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 2
68213: NEG
68214: PUSH
68215: LD_INT 2
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: ST_TO_ADDR
// end ; 2 :
68228: GO 71494
68230: LD_INT 2
68232: DOUBLE
68233: EQUAL
68234: IFTRUE 68238
68236: GO 71493
68238: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68239: LD_ADDR_VAR 0 29
68243: PUSH
68244: LD_INT 4
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 4
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 5
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 5
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 4
68287: PUSH
68288: LD_INT 1
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 5
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: LD_INT 3
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 3
68349: PUSH
68350: LD_INT 2
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: LD_INT 3
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 4
68369: PUSH
68370: LD_INT 4
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: LD_INT 4
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: LD_INT 3
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: LD_INT 2
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 4
68409: PUSH
68410: LD_INT 2
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 2
68419: PUSH
68420: LD_INT 4
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: LD_INT 4
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: LD_INT 4
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: PUSH
68460: LD_INT 5
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_INT 5
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: NEG
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 2
68501: PUSH
68502: LD_INT 5
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: NEG
68512: PUSH
68513: LD_INT 3
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 3
68522: NEG
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: LD_INT 1
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 2
68545: NEG
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 2
68556: NEG
68557: PUSH
68558: LD_INT 1
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 3
68567: NEG
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 4
68578: NEG
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 4
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 4
68601: NEG
68602: PUSH
68603: LD_INT 2
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 2
68613: NEG
68614: PUSH
68615: LD_INT 2
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 4
68624: NEG
68625: PUSH
68626: LD_INT 4
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 4
68636: NEG
68637: PUSH
68638: LD_INT 5
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 3
68648: NEG
68649: PUSH
68650: LD_INT 4
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 3
68660: NEG
68661: PUSH
68662: LD_INT 3
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 4
68672: NEG
68673: PUSH
68674: LD_INT 3
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 5
68684: NEG
68685: PUSH
68686: LD_INT 4
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 5
68696: NEG
68697: PUSH
68698: LD_INT 5
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: LD_INT 5
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 5
68720: NEG
68721: PUSH
68722: LD_INT 3
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68777: LD_ADDR_VAR 0 30
68781: PUSH
68782: LD_INT 4
68784: PUSH
68785: LD_INT 4
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 4
68794: PUSH
68795: LD_INT 3
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 5
68804: PUSH
68805: LD_INT 4
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 5
68814: PUSH
68815: LD_INT 5
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 4
68824: PUSH
68825: LD_INT 5
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: LD_INT 4
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 3
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 5
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 3
68864: PUSH
68865: LD_INT 5
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 3
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 2
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: LD_INT 3
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: LD_INT 4
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 0
68914: PUSH
68915: LD_INT 4
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: NEG
68925: PUSH
68926: LD_INT 3
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: LD_INT 2
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: LD_INT 4
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: NEG
68957: PUSH
68958: LD_INT 2
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 4
68967: NEG
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 4
68978: NEG
68979: PUSH
68980: LD_INT 1
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 3
68990: NEG
68991: PUSH
68992: LD_INT 0
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 3
69001: NEG
69002: PUSH
69003: LD_INT 1
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 4
69012: NEG
69013: PUSH
69014: LD_INT 1
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 5
69023: NEG
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 5
69034: NEG
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 5
69046: NEG
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 3
69058: NEG
69059: PUSH
69060: LD_INT 2
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 3
69069: NEG
69070: PUSH
69071: LD_INT 3
69073: NEG
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: LD_INT 4
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: NEG
69094: PUSH
69095: LD_INT 3
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 2
69105: NEG
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: NEG
69118: PUSH
69119: LD_INT 2
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 4
69129: NEG
69130: PUSH
69131: LD_INT 3
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 4
69141: NEG
69142: PUSH
69143: LD_INT 4
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: LD_INT 4
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 4
69165: NEG
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 4
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 5
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 1
69199: PUSH
69200: LD_INT 4
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: PUSH
69211: LD_INT 3
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: LD_INT 3
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: LD_INT 4
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: LD_INT 5
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 3
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 2
69267: NEG
69268: PUSH
69269: LD_INT 5
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69324: LD_ADDR_VAR 0 31
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 4
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 3
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: LD_INT 4
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: LD_INT 5
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 0
69371: PUSH
69372: LD_INT 5
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: LD_INT 4
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 1
69392: NEG
69393: PUSH
69394: LD_INT 3
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 2
69403: PUSH
69404: LD_INT 5
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: LD_INT 3
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: LD_INT 0
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: LD_INT 1
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 2
69458: NEG
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 3
69469: NEG
69470: PUSH
69471: LD_INT 1
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 4
69480: NEG
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 4
69491: NEG
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 4
69503: NEG
69504: PUSH
69505: LD_INT 2
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 2
69515: NEG
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 4
69526: NEG
69527: PUSH
69528: LD_INT 4
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 4
69538: NEG
69539: PUSH
69540: LD_INT 5
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 3
69550: NEG
69551: PUSH
69552: LD_INT 4
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 3
69562: NEG
69563: PUSH
69564: LD_INT 3
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 3
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 5
69586: NEG
69587: PUSH
69588: LD_INT 4
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 5
69598: NEG
69599: PUSH
69600: LD_INT 5
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 3
69610: NEG
69611: PUSH
69612: LD_INT 5
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 5
69622: NEG
69623: PUSH
69624: LD_INT 3
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: LD_INT 3
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 0
69645: PUSH
69646: LD_INT 4
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 1
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 1
69667: PUSH
69668: LD_INT 2
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 0
69678: PUSH
69679: LD_INT 2
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: NEG
69690: PUSH
69691: LD_INT 3
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: LD_INT 4
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 2
69713: PUSH
69714: LD_INT 2
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 2
69724: NEG
69725: PUSH
69726: LD_INT 4
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 4
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 4
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 5
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 5
69767: PUSH
69768: LD_INT 1
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 4
69777: PUSH
69778: LD_INT 1
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 3
69787: PUSH
69788: LD_INT 0
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 3
69797: PUSH
69798: LD_INT 1
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 3
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 5
69819: PUSH
69820: LD_INT 2
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69874: LD_ADDR_VAR 0 32
69878: PUSH
69879: LD_INT 4
69881: NEG
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 4
69892: NEG
69893: PUSH
69894: LD_INT 1
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 3
69904: NEG
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: NEG
69916: PUSH
69917: LD_INT 1
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 4
69926: NEG
69927: PUSH
69928: LD_INT 1
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 5
69937: NEG
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 5
69948: NEG
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 5
69960: NEG
69961: PUSH
69962: LD_INT 2
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 3
69972: NEG
69973: PUSH
69974: LD_INT 2
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 3
69983: NEG
69984: PUSH
69985: LD_INT 3
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 3
69995: NEG
69996: PUSH
69997: LD_INT 4
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: NEG
70008: PUSH
70009: LD_INT 3
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 2
70019: NEG
70020: PUSH
70021: LD_INT 2
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 3
70031: NEG
70032: PUSH
70033: LD_INT 2
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 4
70043: NEG
70044: PUSH
70045: LD_INT 3
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 4
70055: NEG
70056: PUSH
70057: LD_INT 4
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: NEG
70068: PUSH
70069: LD_INT 4
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 4
70079: NEG
70080: PUSH
70081: LD_INT 2
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: LD_INT 4
70094: NEG
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: LD_INT 5
70105: NEG
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 1
70113: PUSH
70114: LD_INT 4
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: LD_INT 3
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: LD_INT 3
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: NEG
70147: PUSH
70148: LD_INT 4
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 1
70158: NEG
70159: PUSH
70160: LD_INT 5
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 2
70170: PUSH
70171: LD_INT 3
70173: NEG
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 2
70181: NEG
70182: PUSH
70183: LD_INT 5
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 3
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 3
70203: PUSH
70204: LD_INT 1
70206: NEG
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 4
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 4
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 2
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: LD_INT 1
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 2
70265: PUSH
70266: LD_INT 2
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 4
70276: PUSH
70277: LD_INT 2
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 4
70286: PUSH
70287: LD_INT 4
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 4
70296: PUSH
70297: LD_INT 3
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 5
70306: PUSH
70307: LD_INT 4
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 5
70316: PUSH
70317: LD_INT 5
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 4
70326: PUSH
70327: LD_INT 5
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 3
70336: PUSH
70337: LD_INT 4
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 3
70346: PUSH
70347: LD_INT 3
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 5
70356: PUSH
70357: LD_INT 3
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 3
70366: PUSH
70367: LD_INT 5
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70421: LD_ADDR_VAR 0 33
70425: PUSH
70426: LD_INT 4
70428: NEG
70429: PUSH
70430: LD_INT 4
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 4
70440: NEG
70441: PUSH
70442: LD_INT 5
70444: NEG
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: LD_INT 4
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 3
70464: NEG
70465: PUSH
70466: LD_INT 3
70468: NEG
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 4
70476: NEG
70477: PUSH
70478: LD_INT 3
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 5
70488: NEG
70489: PUSH
70490: LD_INT 4
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 5
70500: NEG
70501: PUSH
70502: LD_INT 5
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 5
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 5
70524: NEG
70525: PUSH
70526: LD_INT 3
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: LD_INT 3
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 4
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 1
70558: PUSH
70559: LD_INT 3
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: LD_INT 2
70572: NEG
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: LD_INT 2
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 1
70591: NEG
70592: PUSH
70593: LD_INT 3
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: LD_INT 4
70607: NEG
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: LD_INT 2
70618: NEG
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 2
70626: NEG
70627: PUSH
70628: LD_INT 4
70630: NEG
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 4
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: LD_INT 1
70651: NEG
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 5
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 5
70669: PUSH
70670: LD_INT 1
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 4
70679: PUSH
70680: LD_INT 1
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 3
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 3
70710: PUSH
70711: LD_INT 2
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 5
70721: PUSH
70722: LD_INT 2
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 3
70731: PUSH
70732: LD_INT 3
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: LD_INT 2
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 4
70751: PUSH
70752: LD_INT 3
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 4
70761: PUSH
70762: LD_INT 4
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 3
70771: PUSH
70772: LD_INT 4
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 2
70781: PUSH
70782: LD_INT 3
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: LD_INT 2
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 4
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 2
70811: PUSH
70812: LD_INT 4
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 0
70821: PUSH
70822: LD_INT 4
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 3
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 1
70841: PUSH
70842: LD_INT 4
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 1
70851: PUSH
70852: LD_INT 5
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: LD_INT 5
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 1
70871: NEG
70872: PUSH
70873: LD_INT 4
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: LD_INT 3
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 2
70893: PUSH
70894: LD_INT 5
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: NEG
70904: PUSH
70905: LD_INT 3
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70959: LD_ADDR_VAR 0 34
70963: PUSH
70964: LD_INT 0
70966: PUSH
70967: LD_INT 4
70969: NEG
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 0
70977: PUSH
70978: LD_INT 5
70980: NEG
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 1
70988: PUSH
70989: LD_INT 4
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 1
70999: PUSH
71000: LD_INT 3
71002: NEG
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 0
71010: PUSH
71011: LD_INT 3
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 1
71021: NEG
71022: PUSH
71023: LD_INT 4
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 1
71033: NEG
71034: PUSH
71035: LD_INT 5
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 2
71045: PUSH
71046: LD_INT 3
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 2
71056: NEG
71057: PUSH
71058: LD_INT 5
71060: NEG
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 3
71068: PUSH
71069: LD_INT 0
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 3
71078: PUSH
71079: LD_INT 1
71081: NEG
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 4
71089: PUSH
71090: LD_INT 0
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 4
71099: PUSH
71100: LD_INT 1
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: LD_INT 1
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 2
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 2
71129: PUSH
71130: LD_INT 1
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 2
71140: PUSH
71141: LD_INT 2
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 4
71151: PUSH
71152: LD_INT 2
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 4
71161: PUSH
71162: LD_INT 4
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: LD_INT 3
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 5
71181: PUSH
71182: LD_INT 4
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 5
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 4
71201: PUSH
71202: LD_INT 5
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 3
71211: PUSH
71212: LD_INT 4
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 3
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 5
71231: PUSH
71232: LD_INT 3
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 3
71241: PUSH
71242: LD_INT 5
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: LD_INT 3
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 0
71261: PUSH
71262: LD_INT 2
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 1
71271: PUSH
71272: LD_INT 3
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 1
71281: PUSH
71282: LD_INT 4
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: LD_INT 4
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 1
71301: NEG
71302: PUSH
71303: LD_INT 3
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: LD_INT 2
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 2
71323: PUSH
71324: LD_INT 4
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 2
71333: NEG
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 4
71344: NEG
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 4
71355: NEG
71356: PUSH
71357: LD_INT 1
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 3
71367: NEG
71368: PUSH
71369: LD_INT 0
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 3
71378: NEG
71379: PUSH
71380: LD_INT 1
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 4
71389: NEG
71390: PUSH
71391: LD_INT 1
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 5
71400: NEG
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 5
71411: NEG
71412: PUSH
71413: LD_INT 1
71415: NEG
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 5
71423: NEG
71424: PUSH
71425: LD_INT 2
71427: NEG
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 3
71435: NEG
71436: PUSH
71437: LD_INT 2
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: ST_TO_ADDR
// end ; end ;
71491: GO 71494
71493: POP
// case btype of b_depot , b_warehouse :
71494: LD_VAR 0 1
71498: PUSH
71499: LD_INT 0
71501: DOUBLE
71502: EQUAL
71503: IFTRUE 71513
71505: LD_INT 1
71507: DOUBLE
71508: EQUAL
71509: IFTRUE 71513
71511: GO 71714
71513: POP
// case nation of nation_american :
71514: LD_VAR 0 5
71518: PUSH
71519: LD_INT 1
71521: DOUBLE
71522: EQUAL
71523: IFTRUE 71527
71525: GO 71583
71527: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71528: LD_ADDR_VAR 0 9
71532: PUSH
71533: LD_VAR 0 11
71537: PUSH
71538: LD_VAR 0 12
71542: PUSH
71543: LD_VAR 0 13
71547: PUSH
71548: LD_VAR 0 14
71552: PUSH
71553: LD_VAR 0 15
71557: PUSH
71558: LD_VAR 0 16
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: PUSH
71571: LD_VAR 0 4
71575: PUSH
71576: LD_INT 1
71578: PLUS
71579: ARRAY
71580: ST_TO_ADDR
71581: GO 71712
71583: LD_INT 2
71585: DOUBLE
71586: EQUAL
71587: IFTRUE 71591
71589: GO 71647
71591: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71592: LD_ADDR_VAR 0 9
71596: PUSH
71597: LD_VAR 0 17
71601: PUSH
71602: LD_VAR 0 18
71606: PUSH
71607: LD_VAR 0 19
71611: PUSH
71612: LD_VAR 0 20
71616: PUSH
71617: LD_VAR 0 21
71621: PUSH
71622: LD_VAR 0 22
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: PUSH
71635: LD_VAR 0 4
71639: PUSH
71640: LD_INT 1
71642: PLUS
71643: ARRAY
71644: ST_TO_ADDR
71645: GO 71712
71647: LD_INT 3
71649: DOUBLE
71650: EQUAL
71651: IFTRUE 71655
71653: GO 71711
71655: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71656: LD_ADDR_VAR 0 9
71660: PUSH
71661: LD_VAR 0 23
71665: PUSH
71666: LD_VAR 0 24
71670: PUSH
71671: LD_VAR 0 25
71675: PUSH
71676: LD_VAR 0 26
71680: PUSH
71681: LD_VAR 0 27
71685: PUSH
71686: LD_VAR 0 28
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: PUSH
71699: LD_VAR 0 4
71703: PUSH
71704: LD_INT 1
71706: PLUS
71707: ARRAY
71708: ST_TO_ADDR
71709: GO 71712
71711: POP
71712: GO 72267
71714: LD_INT 2
71716: DOUBLE
71717: EQUAL
71718: IFTRUE 71728
71720: LD_INT 3
71722: DOUBLE
71723: EQUAL
71724: IFTRUE 71728
71726: GO 71784
71728: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71729: LD_ADDR_VAR 0 9
71733: PUSH
71734: LD_VAR 0 29
71738: PUSH
71739: LD_VAR 0 30
71743: PUSH
71744: LD_VAR 0 31
71748: PUSH
71749: LD_VAR 0 32
71753: PUSH
71754: LD_VAR 0 33
71758: PUSH
71759: LD_VAR 0 34
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: PUSH
71772: LD_VAR 0 4
71776: PUSH
71777: LD_INT 1
71779: PLUS
71780: ARRAY
71781: ST_TO_ADDR
71782: GO 72267
71784: LD_INT 16
71786: DOUBLE
71787: EQUAL
71788: IFTRUE 71846
71790: LD_INT 17
71792: DOUBLE
71793: EQUAL
71794: IFTRUE 71846
71796: LD_INT 18
71798: DOUBLE
71799: EQUAL
71800: IFTRUE 71846
71802: LD_INT 19
71804: DOUBLE
71805: EQUAL
71806: IFTRUE 71846
71808: LD_INT 22
71810: DOUBLE
71811: EQUAL
71812: IFTRUE 71846
71814: LD_INT 20
71816: DOUBLE
71817: EQUAL
71818: IFTRUE 71846
71820: LD_INT 21
71822: DOUBLE
71823: EQUAL
71824: IFTRUE 71846
71826: LD_INT 23
71828: DOUBLE
71829: EQUAL
71830: IFTRUE 71846
71832: LD_INT 24
71834: DOUBLE
71835: EQUAL
71836: IFTRUE 71846
71838: LD_INT 25
71840: DOUBLE
71841: EQUAL
71842: IFTRUE 71846
71844: GO 71902
71846: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71847: LD_ADDR_VAR 0 9
71851: PUSH
71852: LD_VAR 0 35
71856: PUSH
71857: LD_VAR 0 36
71861: PUSH
71862: LD_VAR 0 37
71866: PUSH
71867: LD_VAR 0 38
71871: PUSH
71872: LD_VAR 0 39
71876: PUSH
71877: LD_VAR 0 40
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: PUSH
71890: LD_VAR 0 4
71894: PUSH
71895: LD_INT 1
71897: PLUS
71898: ARRAY
71899: ST_TO_ADDR
71900: GO 72267
71902: LD_INT 6
71904: DOUBLE
71905: EQUAL
71906: IFTRUE 71958
71908: LD_INT 7
71910: DOUBLE
71911: EQUAL
71912: IFTRUE 71958
71914: LD_INT 8
71916: DOUBLE
71917: EQUAL
71918: IFTRUE 71958
71920: LD_INT 13
71922: DOUBLE
71923: EQUAL
71924: IFTRUE 71958
71926: LD_INT 12
71928: DOUBLE
71929: EQUAL
71930: IFTRUE 71958
71932: LD_INT 15
71934: DOUBLE
71935: EQUAL
71936: IFTRUE 71958
71938: LD_INT 11
71940: DOUBLE
71941: EQUAL
71942: IFTRUE 71958
71944: LD_INT 14
71946: DOUBLE
71947: EQUAL
71948: IFTRUE 71958
71950: LD_INT 10
71952: DOUBLE
71953: EQUAL
71954: IFTRUE 71958
71956: GO 72014
71958: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71959: LD_ADDR_VAR 0 9
71963: PUSH
71964: LD_VAR 0 41
71968: PUSH
71969: LD_VAR 0 42
71973: PUSH
71974: LD_VAR 0 43
71978: PUSH
71979: LD_VAR 0 44
71983: PUSH
71984: LD_VAR 0 45
71988: PUSH
71989: LD_VAR 0 46
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: PUSH
72002: LD_VAR 0 4
72006: PUSH
72007: LD_INT 1
72009: PLUS
72010: ARRAY
72011: ST_TO_ADDR
72012: GO 72267
72014: LD_INT 36
72016: DOUBLE
72017: EQUAL
72018: IFTRUE 72022
72020: GO 72078
72022: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72023: LD_ADDR_VAR 0 9
72027: PUSH
72028: LD_VAR 0 47
72032: PUSH
72033: LD_VAR 0 48
72037: PUSH
72038: LD_VAR 0 49
72042: PUSH
72043: LD_VAR 0 50
72047: PUSH
72048: LD_VAR 0 51
72052: PUSH
72053: LD_VAR 0 52
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: PUSH
72066: LD_VAR 0 4
72070: PUSH
72071: LD_INT 1
72073: PLUS
72074: ARRAY
72075: ST_TO_ADDR
72076: GO 72267
72078: LD_INT 4
72080: DOUBLE
72081: EQUAL
72082: IFTRUE 72104
72084: LD_INT 5
72086: DOUBLE
72087: EQUAL
72088: IFTRUE 72104
72090: LD_INT 34
72092: DOUBLE
72093: EQUAL
72094: IFTRUE 72104
72096: LD_INT 37
72098: DOUBLE
72099: EQUAL
72100: IFTRUE 72104
72102: GO 72160
72104: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72105: LD_ADDR_VAR 0 9
72109: PUSH
72110: LD_VAR 0 53
72114: PUSH
72115: LD_VAR 0 54
72119: PUSH
72120: LD_VAR 0 55
72124: PUSH
72125: LD_VAR 0 56
72129: PUSH
72130: LD_VAR 0 57
72134: PUSH
72135: LD_VAR 0 58
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: PUSH
72148: LD_VAR 0 4
72152: PUSH
72153: LD_INT 1
72155: PLUS
72156: ARRAY
72157: ST_TO_ADDR
72158: GO 72267
72160: LD_INT 31
72162: DOUBLE
72163: EQUAL
72164: IFTRUE 72210
72166: LD_INT 32
72168: DOUBLE
72169: EQUAL
72170: IFTRUE 72210
72172: LD_INT 33
72174: DOUBLE
72175: EQUAL
72176: IFTRUE 72210
72178: LD_INT 27
72180: DOUBLE
72181: EQUAL
72182: IFTRUE 72210
72184: LD_INT 26
72186: DOUBLE
72187: EQUAL
72188: IFTRUE 72210
72190: LD_INT 28
72192: DOUBLE
72193: EQUAL
72194: IFTRUE 72210
72196: LD_INT 29
72198: DOUBLE
72199: EQUAL
72200: IFTRUE 72210
72202: LD_INT 30
72204: DOUBLE
72205: EQUAL
72206: IFTRUE 72210
72208: GO 72266
72210: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72211: LD_ADDR_VAR 0 9
72215: PUSH
72216: LD_VAR 0 59
72220: PUSH
72221: LD_VAR 0 60
72225: PUSH
72226: LD_VAR 0 61
72230: PUSH
72231: LD_VAR 0 62
72235: PUSH
72236: LD_VAR 0 63
72240: PUSH
72241: LD_VAR 0 64
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: PUSH
72254: LD_VAR 0 4
72258: PUSH
72259: LD_INT 1
72261: PLUS
72262: ARRAY
72263: ST_TO_ADDR
72264: GO 72267
72266: POP
// temp_list2 = [ ] ;
72267: LD_ADDR_VAR 0 10
72271: PUSH
72272: EMPTY
72273: ST_TO_ADDR
// for i in temp_list do
72274: LD_ADDR_VAR 0 8
72278: PUSH
72279: LD_VAR 0 9
72283: PUSH
72284: FOR_IN
72285: IFFALSE 72337
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72287: LD_ADDR_VAR 0 10
72291: PUSH
72292: LD_VAR 0 10
72296: PUSH
72297: LD_VAR 0 8
72301: PUSH
72302: LD_INT 1
72304: ARRAY
72305: PUSH
72306: LD_VAR 0 2
72310: PLUS
72311: PUSH
72312: LD_VAR 0 8
72316: PUSH
72317: LD_INT 2
72319: ARRAY
72320: PUSH
72321: LD_VAR 0 3
72325: PLUS
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: EMPTY
72332: LIST
72333: ADD
72334: ST_TO_ADDR
72335: GO 72284
72337: POP
72338: POP
// result = temp_list2 ;
72339: LD_ADDR_VAR 0 7
72343: PUSH
72344: LD_VAR 0 10
72348: ST_TO_ADDR
// end ;
72349: LD_VAR 0 7
72353: RET
// export function EnemyInRange ( unit , dist ) ; begin
72354: LD_INT 0
72356: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72357: LD_ADDR_VAR 0 3
72361: PUSH
72362: LD_VAR 0 1
72366: PPUSH
72367: CALL_OW 255
72371: PPUSH
72372: LD_VAR 0 1
72376: PPUSH
72377: CALL_OW 250
72381: PPUSH
72382: LD_VAR 0 1
72386: PPUSH
72387: CALL_OW 251
72391: PPUSH
72392: LD_VAR 0 2
72396: PPUSH
72397: CALL 45756 0 4
72401: PUSH
72402: LD_INT 4
72404: ARRAY
72405: ST_TO_ADDR
// end ;
72406: LD_VAR 0 3
72410: RET
// export function PlayerSeeMe ( unit ) ; begin
72411: LD_INT 0
72413: PPUSH
// result := See ( your_side , unit ) ;
72414: LD_ADDR_VAR 0 2
72418: PUSH
72419: LD_OWVAR 2
72423: PPUSH
72424: LD_VAR 0 1
72428: PPUSH
72429: CALL_OW 292
72433: ST_TO_ADDR
// end ;
72434: LD_VAR 0 2
72438: RET
// export function ReverseDir ( unit ) ; begin
72439: LD_INT 0
72441: PPUSH
// if not unit then
72442: LD_VAR 0 1
72446: NOT
72447: IFFALSE 72451
// exit ;
72449: GO 72474
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72451: LD_ADDR_VAR 0 2
72455: PUSH
72456: LD_VAR 0 1
72460: PPUSH
72461: CALL_OW 254
72465: PUSH
72466: LD_INT 3
72468: PLUS
72469: PUSH
72470: LD_INT 6
72472: MOD
72473: ST_TO_ADDR
// end ;
72474: LD_VAR 0 2
72478: RET
// export function ReverseArray ( array ) ; var i ; begin
72479: LD_INT 0
72481: PPUSH
72482: PPUSH
// if not array then
72483: LD_VAR 0 1
72487: NOT
72488: IFFALSE 72492
// exit ;
72490: GO 72547
// result := [ ] ;
72492: LD_ADDR_VAR 0 2
72496: PUSH
72497: EMPTY
72498: ST_TO_ADDR
// for i := array downto 1 do
72499: LD_ADDR_VAR 0 3
72503: PUSH
72504: DOUBLE
72505: LD_VAR 0 1
72509: INC
72510: ST_TO_ADDR
72511: LD_INT 1
72513: PUSH
72514: FOR_DOWNTO
72515: IFFALSE 72545
// result := Join ( result , array [ i ] ) ;
72517: LD_ADDR_VAR 0 2
72521: PUSH
72522: LD_VAR 0 2
72526: PPUSH
72527: LD_VAR 0 1
72531: PUSH
72532: LD_VAR 0 3
72536: ARRAY
72537: PPUSH
72538: CALL 77191 0 2
72542: ST_TO_ADDR
72543: GO 72514
72545: POP
72546: POP
// end ;
72547: LD_VAR 0 2
72551: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72552: LD_INT 0
72554: PPUSH
72555: PPUSH
72556: PPUSH
72557: PPUSH
72558: PPUSH
72559: PPUSH
// if not unit or not hexes then
72560: LD_VAR 0 1
72564: NOT
72565: PUSH
72566: LD_VAR 0 2
72570: NOT
72571: OR
72572: IFFALSE 72576
// exit ;
72574: GO 72699
// dist := 9999 ;
72576: LD_ADDR_VAR 0 5
72580: PUSH
72581: LD_INT 9999
72583: ST_TO_ADDR
// for i = 1 to hexes do
72584: LD_ADDR_VAR 0 4
72588: PUSH
72589: DOUBLE
72590: LD_INT 1
72592: DEC
72593: ST_TO_ADDR
72594: LD_VAR 0 2
72598: PUSH
72599: FOR_TO
72600: IFFALSE 72687
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72602: LD_ADDR_VAR 0 6
72606: PUSH
72607: LD_VAR 0 1
72611: PPUSH
72612: LD_VAR 0 2
72616: PUSH
72617: LD_VAR 0 4
72621: ARRAY
72622: PUSH
72623: LD_INT 1
72625: ARRAY
72626: PPUSH
72627: LD_VAR 0 2
72631: PUSH
72632: LD_VAR 0 4
72636: ARRAY
72637: PUSH
72638: LD_INT 2
72640: ARRAY
72641: PPUSH
72642: CALL_OW 297
72646: ST_TO_ADDR
// if tdist < dist then
72647: LD_VAR 0 6
72651: PUSH
72652: LD_VAR 0 5
72656: LESS
72657: IFFALSE 72685
// begin hex := hexes [ i ] ;
72659: LD_ADDR_VAR 0 8
72663: PUSH
72664: LD_VAR 0 2
72668: PUSH
72669: LD_VAR 0 4
72673: ARRAY
72674: ST_TO_ADDR
// dist := tdist ;
72675: LD_ADDR_VAR 0 5
72679: PUSH
72680: LD_VAR 0 6
72684: ST_TO_ADDR
// end ; end ;
72685: GO 72599
72687: POP
72688: POP
// result := hex ;
72689: LD_ADDR_VAR 0 3
72693: PUSH
72694: LD_VAR 0 8
72698: ST_TO_ADDR
// end ;
72699: LD_VAR 0 3
72703: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72704: LD_INT 0
72706: PPUSH
72707: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72708: LD_VAR 0 1
72712: NOT
72713: PUSH
72714: LD_VAR 0 1
72718: PUSH
72719: LD_INT 21
72721: PUSH
72722: LD_INT 2
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 23
72731: PUSH
72732: LD_INT 2
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PPUSH
72743: CALL_OW 69
72747: IN
72748: NOT
72749: OR
72750: IFFALSE 72754
// exit ;
72752: GO 72801
// for i = 1 to 3 do
72754: LD_ADDR_VAR 0 3
72758: PUSH
72759: DOUBLE
72760: LD_INT 1
72762: DEC
72763: ST_TO_ADDR
72764: LD_INT 3
72766: PUSH
72767: FOR_TO
72768: IFFALSE 72799
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72770: LD_VAR 0 1
72774: PPUSH
72775: CALL_OW 250
72779: PPUSH
72780: LD_VAR 0 1
72784: PPUSH
72785: CALL_OW 251
72789: PPUSH
72790: LD_INT 1
72792: PPUSH
72793: CALL_OW 453
72797: GO 72767
72799: POP
72800: POP
// end ;
72801: LD_VAR 0 2
72805: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72806: LD_INT 0
72808: PPUSH
72809: PPUSH
72810: PPUSH
72811: PPUSH
72812: PPUSH
72813: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72814: LD_VAR 0 1
72818: NOT
72819: PUSH
72820: LD_VAR 0 2
72824: NOT
72825: OR
72826: PUSH
72827: LD_VAR 0 1
72831: PPUSH
72832: CALL_OW 314
72836: OR
72837: IFFALSE 72841
// exit ;
72839: GO 73308
// if GetLives ( i ) < 250 then
72841: LD_VAR 0 4
72845: PPUSH
72846: CALL_OW 256
72850: PUSH
72851: LD_INT 250
72853: LESS
72854: IFFALSE 72867
// begin ComAutodestruct ( i ) ;
72856: LD_VAR 0 4
72860: PPUSH
72861: CALL 72704 0 1
// exit ;
72865: GO 73308
// end ; x := GetX ( enemy_unit ) ;
72867: LD_ADDR_VAR 0 7
72871: PUSH
72872: LD_VAR 0 2
72876: PPUSH
72877: CALL_OW 250
72881: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72882: LD_ADDR_VAR 0 8
72886: PUSH
72887: LD_VAR 0 2
72891: PPUSH
72892: CALL_OW 251
72896: ST_TO_ADDR
// if not x or not y then
72897: LD_VAR 0 7
72901: NOT
72902: PUSH
72903: LD_VAR 0 8
72907: NOT
72908: OR
72909: IFFALSE 72913
// exit ;
72911: GO 73308
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72913: LD_ADDR_VAR 0 6
72917: PUSH
72918: LD_VAR 0 7
72922: PPUSH
72923: LD_INT 0
72925: PPUSH
72926: LD_INT 4
72928: PPUSH
72929: CALL_OW 272
72933: PUSH
72934: LD_VAR 0 8
72938: PPUSH
72939: LD_INT 0
72941: PPUSH
72942: LD_INT 4
72944: PPUSH
72945: CALL_OW 273
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_VAR 0 7
72958: PPUSH
72959: LD_INT 1
72961: PPUSH
72962: LD_INT 4
72964: PPUSH
72965: CALL_OW 272
72969: PUSH
72970: LD_VAR 0 8
72974: PPUSH
72975: LD_INT 1
72977: PPUSH
72978: LD_INT 4
72980: PPUSH
72981: CALL_OW 273
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_VAR 0 7
72994: PPUSH
72995: LD_INT 2
72997: PPUSH
72998: LD_INT 4
73000: PPUSH
73001: CALL_OW 272
73005: PUSH
73006: LD_VAR 0 8
73010: PPUSH
73011: LD_INT 2
73013: PPUSH
73014: LD_INT 4
73016: PPUSH
73017: CALL_OW 273
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_VAR 0 7
73030: PPUSH
73031: LD_INT 3
73033: PPUSH
73034: LD_INT 4
73036: PPUSH
73037: CALL_OW 272
73041: PUSH
73042: LD_VAR 0 8
73046: PPUSH
73047: LD_INT 3
73049: PPUSH
73050: LD_INT 4
73052: PPUSH
73053: CALL_OW 273
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_VAR 0 7
73066: PPUSH
73067: LD_INT 4
73069: PPUSH
73070: LD_INT 4
73072: PPUSH
73073: CALL_OW 272
73077: PUSH
73078: LD_VAR 0 8
73082: PPUSH
73083: LD_INT 4
73085: PPUSH
73086: LD_INT 4
73088: PPUSH
73089: CALL_OW 273
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_VAR 0 7
73102: PPUSH
73103: LD_INT 5
73105: PPUSH
73106: LD_INT 4
73108: PPUSH
73109: CALL_OW 272
73113: PUSH
73114: LD_VAR 0 8
73118: PPUSH
73119: LD_INT 5
73121: PPUSH
73122: LD_INT 4
73124: PPUSH
73125: CALL_OW 273
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: ST_TO_ADDR
// for i = tmp downto 1 do
73142: LD_ADDR_VAR 0 4
73146: PUSH
73147: DOUBLE
73148: LD_VAR 0 6
73152: INC
73153: ST_TO_ADDR
73154: LD_INT 1
73156: PUSH
73157: FOR_DOWNTO
73158: IFFALSE 73259
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73160: LD_VAR 0 6
73164: PUSH
73165: LD_VAR 0 4
73169: ARRAY
73170: PUSH
73171: LD_INT 1
73173: ARRAY
73174: PPUSH
73175: LD_VAR 0 6
73179: PUSH
73180: LD_VAR 0 4
73184: ARRAY
73185: PUSH
73186: LD_INT 2
73188: ARRAY
73189: PPUSH
73190: CALL_OW 488
73194: NOT
73195: PUSH
73196: LD_VAR 0 6
73200: PUSH
73201: LD_VAR 0 4
73205: ARRAY
73206: PUSH
73207: LD_INT 1
73209: ARRAY
73210: PPUSH
73211: LD_VAR 0 6
73215: PUSH
73216: LD_VAR 0 4
73220: ARRAY
73221: PUSH
73222: LD_INT 2
73224: ARRAY
73225: PPUSH
73226: CALL_OW 428
73230: PUSH
73231: LD_INT 0
73233: NONEQUAL
73234: OR
73235: IFFALSE 73257
// tmp := Delete ( tmp , i ) ;
73237: LD_ADDR_VAR 0 6
73241: PUSH
73242: LD_VAR 0 6
73246: PPUSH
73247: LD_VAR 0 4
73251: PPUSH
73252: CALL_OW 3
73256: ST_TO_ADDR
73257: GO 73157
73259: POP
73260: POP
// j := GetClosestHex ( unit , tmp ) ;
73261: LD_ADDR_VAR 0 5
73265: PUSH
73266: LD_VAR 0 1
73270: PPUSH
73271: LD_VAR 0 6
73275: PPUSH
73276: CALL 72552 0 2
73280: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73281: LD_VAR 0 1
73285: PPUSH
73286: LD_VAR 0 5
73290: PUSH
73291: LD_INT 1
73293: ARRAY
73294: PPUSH
73295: LD_VAR 0 5
73299: PUSH
73300: LD_INT 2
73302: ARRAY
73303: PPUSH
73304: CALL_OW 111
// end ;
73308: LD_VAR 0 3
73312: RET
// export function PrepareApemanSoldier ( ) ; begin
73313: LD_INT 0
73315: PPUSH
// uc_nation := 0 ;
73316: LD_ADDR_OWVAR 21
73320: PUSH
73321: LD_INT 0
73323: ST_TO_ADDR
// hc_sex := sex_male ;
73324: LD_ADDR_OWVAR 27
73328: PUSH
73329: LD_INT 1
73331: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73332: LD_ADDR_OWVAR 28
73336: PUSH
73337: LD_INT 15
73339: ST_TO_ADDR
// hc_gallery :=  ;
73340: LD_ADDR_OWVAR 33
73344: PUSH
73345: LD_STRING 
73347: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73348: LD_ADDR_OWVAR 31
73352: PUSH
73353: LD_INT 0
73355: PPUSH
73356: LD_INT 3
73358: PPUSH
73359: CALL_OW 12
73363: PUSH
73364: LD_INT 0
73366: PPUSH
73367: LD_INT 3
73369: PPUSH
73370: CALL_OW 12
73374: PUSH
73375: LD_INT 0
73377: PUSH
73378: LD_INT 0
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: ST_TO_ADDR
// end ;
73387: LD_VAR 0 1
73391: RET
// export function PrepareApemanEngineer ( ) ; begin
73392: LD_INT 0
73394: PPUSH
// uc_nation := 0 ;
73395: LD_ADDR_OWVAR 21
73399: PUSH
73400: LD_INT 0
73402: ST_TO_ADDR
// hc_sex := sex_male ;
73403: LD_ADDR_OWVAR 27
73407: PUSH
73408: LD_INT 1
73410: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73411: LD_ADDR_OWVAR 28
73415: PUSH
73416: LD_INT 16
73418: ST_TO_ADDR
// hc_gallery :=  ;
73419: LD_ADDR_OWVAR 33
73423: PUSH
73424: LD_STRING 
73426: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73427: LD_ADDR_OWVAR 31
73431: PUSH
73432: LD_INT 0
73434: PPUSH
73435: LD_INT 3
73437: PPUSH
73438: CALL_OW 12
73442: PUSH
73443: LD_INT 0
73445: PPUSH
73446: LD_INT 3
73448: PPUSH
73449: CALL_OW 12
73453: PUSH
73454: LD_INT 0
73456: PUSH
73457: LD_INT 0
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: ST_TO_ADDR
// end ;
73466: LD_VAR 0 1
73470: RET
// export function PrepareApeman ( agressivity ) ; begin
73471: LD_INT 0
73473: PPUSH
// uc_side := 0 ;
73474: LD_ADDR_OWVAR 20
73478: PUSH
73479: LD_INT 0
73481: ST_TO_ADDR
// uc_nation := 0 ;
73482: LD_ADDR_OWVAR 21
73486: PUSH
73487: LD_INT 0
73489: ST_TO_ADDR
// hc_sex := sex_male ;
73490: LD_ADDR_OWVAR 27
73494: PUSH
73495: LD_INT 1
73497: ST_TO_ADDR
// hc_class := class_apeman ;
73498: LD_ADDR_OWVAR 28
73502: PUSH
73503: LD_INT 12
73505: ST_TO_ADDR
// hc_gallery :=  ;
73506: LD_ADDR_OWVAR 33
73510: PUSH
73511: LD_STRING 
73513: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73514: LD_ADDR_OWVAR 35
73518: PUSH
73519: LD_VAR 0 1
73523: NEG
73524: PPUSH
73525: LD_VAR 0 1
73529: PPUSH
73530: CALL_OW 12
73534: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73535: LD_ADDR_OWVAR 31
73539: PUSH
73540: LD_INT 0
73542: PPUSH
73543: LD_INT 3
73545: PPUSH
73546: CALL_OW 12
73550: PUSH
73551: LD_INT 0
73553: PPUSH
73554: LD_INT 3
73556: PPUSH
73557: CALL_OW 12
73561: PUSH
73562: LD_INT 0
73564: PUSH
73565: LD_INT 0
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: ST_TO_ADDR
// end ;
73574: LD_VAR 0 2
73578: RET
// export function PrepareTiger ( agressivity ) ; begin
73579: LD_INT 0
73581: PPUSH
// uc_side := 0 ;
73582: LD_ADDR_OWVAR 20
73586: PUSH
73587: LD_INT 0
73589: ST_TO_ADDR
// uc_nation := 0 ;
73590: LD_ADDR_OWVAR 21
73594: PUSH
73595: LD_INT 0
73597: ST_TO_ADDR
// hc_class := class_tiger ;
73598: LD_ADDR_OWVAR 28
73602: PUSH
73603: LD_INT 14
73605: ST_TO_ADDR
// hc_gallery :=  ;
73606: LD_ADDR_OWVAR 33
73610: PUSH
73611: LD_STRING 
73613: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73614: LD_ADDR_OWVAR 35
73618: PUSH
73619: LD_VAR 0 1
73623: NEG
73624: PPUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: CALL_OW 12
73634: ST_TO_ADDR
// end ;
73635: LD_VAR 0 2
73639: RET
// export function PrepareEnchidna ( ) ; begin
73640: LD_INT 0
73642: PPUSH
// uc_side := 0 ;
73643: LD_ADDR_OWVAR 20
73647: PUSH
73648: LD_INT 0
73650: ST_TO_ADDR
// uc_nation := 0 ;
73651: LD_ADDR_OWVAR 21
73655: PUSH
73656: LD_INT 0
73658: ST_TO_ADDR
// hc_class := class_baggie ;
73659: LD_ADDR_OWVAR 28
73663: PUSH
73664: LD_INT 13
73666: ST_TO_ADDR
// hc_gallery :=  ;
73667: LD_ADDR_OWVAR 33
73671: PUSH
73672: LD_STRING 
73674: ST_TO_ADDR
// end ;
73675: LD_VAR 0 1
73679: RET
// export function PrepareFrog ( ) ; begin
73680: LD_INT 0
73682: PPUSH
// uc_side := 0 ;
73683: LD_ADDR_OWVAR 20
73687: PUSH
73688: LD_INT 0
73690: ST_TO_ADDR
// uc_nation := 0 ;
73691: LD_ADDR_OWVAR 21
73695: PUSH
73696: LD_INT 0
73698: ST_TO_ADDR
// hc_class := class_frog ;
73699: LD_ADDR_OWVAR 28
73703: PUSH
73704: LD_INT 19
73706: ST_TO_ADDR
// hc_gallery :=  ;
73707: LD_ADDR_OWVAR 33
73711: PUSH
73712: LD_STRING 
73714: ST_TO_ADDR
// end ;
73715: LD_VAR 0 1
73719: RET
// export function PrepareFish ( ) ; begin
73720: LD_INT 0
73722: PPUSH
// uc_side := 0 ;
73723: LD_ADDR_OWVAR 20
73727: PUSH
73728: LD_INT 0
73730: ST_TO_ADDR
// uc_nation := 0 ;
73731: LD_ADDR_OWVAR 21
73735: PUSH
73736: LD_INT 0
73738: ST_TO_ADDR
// hc_class := class_fish ;
73739: LD_ADDR_OWVAR 28
73743: PUSH
73744: LD_INT 20
73746: ST_TO_ADDR
// hc_gallery :=  ;
73747: LD_ADDR_OWVAR 33
73751: PUSH
73752: LD_STRING 
73754: ST_TO_ADDR
// end ;
73755: LD_VAR 0 1
73759: RET
// export function PrepareBird ( ) ; begin
73760: LD_INT 0
73762: PPUSH
// uc_side := 0 ;
73763: LD_ADDR_OWVAR 20
73767: PUSH
73768: LD_INT 0
73770: ST_TO_ADDR
// uc_nation := 0 ;
73771: LD_ADDR_OWVAR 21
73775: PUSH
73776: LD_INT 0
73778: ST_TO_ADDR
// hc_class := class_phororhacos ;
73779: LD_ADDR_OWVAR 28
73783: PUSH
73784: LD_INT 18
73786: ST_TO_ADDR
// hc_gallery :=  ;
73787: LD_ADDR_OWVAR 33
73791: PUSH
73792: LD_STRING 
73794: ST_TO_ADDR
// end ;
73795: LD_VAR 0 1
73799: RET
// export function PrepareHorse ( ) ; begin
73800: LD_INT 0
73802: PPUSH
// uc_side := 0 ;
73803: LD_ADDR_OWVAR 20
73807: PUSH
73808: LD_INT 0
73810: ST_TO_ADDR
// uc_nation := 0 ;
73811: LD_ADDR_OWVAR 21
73815: PUSH
73816: LD_INT 0
73818: ST_TO_ADDR
// hc_class := class_horse ;
73819: LD_ADDR_OWVAR 28
73823: PUSH
73824: LD_INT 21
73826: ST_TO_ADDR
// hc_gallery :=  ;
73827: LD_ADDR_OWVAR 33
73831: PUSH
73832: LD_STRING 
73834: ST_TO_ADDR
// end ;
73835: LD_VAR 0 1
73839: RET
// export function PrepareMastodont ( ) ; begin
73840: LD_INT 0
73842: PPUSH
// uc_side := 0 ;
73843: LD_ADDR_OWVAR 20
73847: PUSH
73848: LD_INT 0
73850: ST_TO_ADDR
// uc_nation := 0 ;
73851: LD_ADDR_OWVAR 21
73855: PUSH
73856: LD_INT 0
73858: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73859: LD_ADDR_OWVAR 37
73863: PUSH
73864: LD_INT 31
73866: ST_TO_ADDR
// vc_control := control_rider ;
73867: LD_ADDR_OWVAR 38
73871: PUSH
73872: LD_INT 4
73874: ST_TO_ADDR
// end ;
73875: LD_VAR 0 1
73879: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73880: LD_INT 0
73882: PPUSH
73883: PPUSH
73884: PPUSH
// uc_side = 0 ;
73885: LD_ADDR_OWVAR 20
73889: PUSH
73890: LD_INT 0
73892: ST_TO_ADDR
// uc_nation = 0 ;
73893: LD_ADDR_OWVAR 21
73897: PUSH
73898: LD_INT 0
73900: ST_TO_ADDR
// InitHc_All ( ) ;
73901: CALL_OW 584
// InitVc ;
73905: CALL_OW 20
// if mastodonts then
73909: LD_VAR 0 6
73913: IFFALSE 73980
// for i = 1 to mastodonts do
73915: LD_ADDR_VAR 0 11
73919: PUSH
73920: DOUBLE
73921: LD_INT 1
73923: DEC
73924: ST_TO_ADDR
73925: LD_VAR 0 6
73929: PUSH
73930: FOR_TO
73931: IFFALSE 73978
// begin vc_chassis := 31 ;
73933: LD_ADDR_OWVAR 37
73937: PUSH
73938: LD_INT 31
73940: ST_TO_ADDR
// vc_control := control_rider ;
73941: LD_ADDR_OWVAR 38
73945: PUSH
73946: LD_INT 4
73948: ST_TO_ADDR
// animal := CreateVehicle ;
73949: LD_ADDR_VAR 0 12
73953: PUSH
73954: CALL_OW 45
73958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73959: LD_VAR 0 12
73963: PPUSH
73964: LD_VAR 0 8
73968: PPUSH
73969: LD_INT 0
73971: PPUSH
73972: CALL 76108 0 3
// end ;
73976: GO 73930
73978: POP
73979: POP
// if horses then
73980: LD_VAR 0 5
73984: IFFALSE 74051
// for i = 1 to horses do
73986: LD_ADDR_VAR 0 11
73990: PUSH
73991: DOUBLE
73992: LD_INT 1
73994: DEC
73995: ST_TO_ADDR
73996: LD_VAR 0 5
74000: PUSH
74001: FOR_TO
74002: IFFALSE 74049
// begin hc_class := 21 ;
74004: LD_ADDR_OWVAR 28
74008: PUSH
74009: LD_INT 21
74011: ST_TO_ADDR
// hc_gallery :=  ;
74012: LD_ADDR_OWVAR 33
74016: PUSH
74017: LD_STRING 
74019: ST_TO_ADDR
// animal := CreateHuman ;
74020: LD_ADDR_VAR 0 12
74024: PUSH
74025: CALL_OW 44
74029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74030: LD_VAR 0 12
74034: PPUSH
74035: LD_VAR 0 8
74039: PPUSH
74040: LD_INT 0
74042: PPUSH
74043: CALL 76108 0 3
// end ;
74047: GO 74001
74049: POP
74050: POP
// if birds then
74051: LD_VAR 0 1
74055: IFFALSE 74122
// for i = 1 to birds do
74057: LD_ADDR_VAR 0 11
74061: PUSH
74062: DOUBLE
74063: LD_INT 1
74065: DEC
74066: ST_TO_ADDR
74067: LD_VAR 0 1
74071: PUSH
74072: FOR_TO
74073: IFFALSE 74120
// begin hc_class = 18 ;
74075: LD_ADDR_OWVAR 28
74079: PUSH
74080: LD_INT 18
74082: ST_TO_ADDR
// hc_gallery =  ;
74083: LD_ADDR_OWVAR 33
74087: PUSH
74088: LD_STRING 
74090: ST_TO_ADDR
// animal := CreateHuman ;
74091: LD_ADDR_VAR 0 12
74095: PUSH
74096: CALL_OW 44
74100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74101: LD_VAR 0 12
74105: PPUSH
74106: LD_VAR 0 8
74110: PPUSH
74111: LD_INT 0
74113: PPUSH
74114: CALL 76108 0 3
// end ;
74118: GO 74072
74120: POP
74121: POP
// if tigers then
74122: LD_VAR 0 2
74126: IFFALSE 74210
// for i = 1 to tigers do
74128: LD_ADDR_VAR 0 11
74132: PUSH
74133: DOUBLE
74134: LD_INT 1
74136: DEC
74137: ST_TO_ADDR
74138: LD_VAR 0 2
74142: PUSH
74143: FOR_TO
74144: IFFALSE 74208
// begin hc_class = class_tiger ;
74146: LD_ADDR_OWVAR 28
74150: PUSH
74151: LD_INT 14
74153: ST_TO_ADDR
// hc_gallery =  ;
74154: LD_ADDR_OWVAR 33
74158: PUSH
74159: LD_STRING 
74161: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74162: LD_ADDR_OWVAR 35
74166: PUSH
74167: LD_INT 7
74169: NEG
74170: PPUSH
74171: LD_INT 7
74173: PPUSH
74174: CALL_OW 12
74178: ST_TO_ADDR
// animal := CreateHuman ;
74179: LD_ADDR_VAR 0 12
74183: PUSH
74184: CALL_OW 44
74188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74189: LD_VAR 0 12
74193: PPUSH
74194: LD_VAR 0 8
74198: PPUSH
74199: LD_INT 0
74201: PPUSH
74202: CALL 76108 0 3
// end ;
74206: GO 74143
74208: POP
74209: POP
// if apemans then
74210: LD_VAR 0 3
74214: IFFALSE 74337
// for i = 1 to apemans do
74216: LD_ADDR_VAR 0 11
74220: PUSH
74221: DOUBLE
74222: LD_INT 1
74224: DEC
74225: ST_TO_ADDR
74226: LD_VAR 0 3
74230: PUSH
74231: FOR_TO
74232: IFFALSE 74335
// begin hc_class = class_apeman ;
74234: LD_ADDR_OWVAR 28
74238: PUSH
74239: LD_INT 12
74241: ST_TO_ADDR
// hc_gallery =  ;
74242: LD_ADDR_OWVAR 33
74246: PUSH
74247: LD_STRING 
74249: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74250: LD_ADDR_OWVAR 35
74254: PUSH
74255: LD_INT 2
74257: NEG
74258: PPUSH
74259: LD_INT 2
74261: PPUSH
74262: CALL_OW 12
74266: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74267: LD_ADDR_OWVAR 31
74271: PUSH
74272: LD_INT 1
74274: PPUSH
74275: LD_INT 3
74277: PPUSH
74278: CALL_OW 12
74282: PUSH
74283: LD_INT 1
74285: PPUSH
74286: LD_INT 3
74288: PPUSH
74289: CALL_OW 12
74293: PUSH
74294: LD_INT 0
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: ST_TO_ADDR
// animal := CreateHuman ;
74306: LD_ADDR_VAR 0 12
74310: PUSH
74311: CALL_OW 44
74315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74316: LD_VAR 0 12
74320: PPUSH
74321: LD_VAR 0 8
74325: PPUSH
74326: LD_INT 0
74328: PPUSH
74329: CALL 76108 0 3
// end ;
74333: GO 74231
74335: POP
74336: POP
// if enchidnas then
74337: LD_VAR 0 4
74341: IFFALSE 74408
// for i = 1 to enchidnas do
74343: LD_ADDR_VAR 0 11
74347: PUSH
74348: DOUBLE
74349: LD_INT 1
74351: DEC
74352: ST_TO_ADDR
74353: LD_VAR 0 4
74357: PUSH
74358: FOR_TO
74359: IFFALSE 74406
// begin hc_class = 13 ;
74361: LD_ADDR_OWVAR 28
74365: PUSH
74366: LD_INT 13
74368: ST_TO_ADDR
// hc_gallery =  ;
74369: LD_ADDR_OWVAR 33
74373: PUSH
74374: LD_STRING 
74376: ST_TO_ADDR
// animal := CreateHuman ;
74377: LD_ADDR_VAR 0 12
74381: PUSH
74382: CALL_OW 44
74386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74387: LD_VAR 0 12
74391: PPUSH
74392: LD_VAR 0 8
74396: PPUSH
74397: LD_INT 0
74399: PPUSH
74400: CALL 76108 0 3
// end ;
74404: GO 74358
74406: POP
74407: POP
// if fishes then
74408: LD_VAR 0 7
74412: IFFALSE 74479
// for i = 1 to fishes do
74414: LD_ADDR_VAR 0 11
74418: PUSH
74419: DOUBLE
74420: LD_INT 1
74422: DEC
74423: ST_TO_ADDR
74424: LD_VAR 0 7
74428: PUSH
74429: FOR_TO
74430: IFFALSE 74477
// begin hc_class = 20 ;
74432: LD_ADDR_OWVAR 28
74436: PUSH
74437: LD_INT 20
74439: ST_TO_ADDR
// hc_gallery =  ;
74440: LD_ADDR_OWVAR 33
74444: PUSH
74445: LD_STRING 
74447: ST_TO_ADDR
// animal := CreateHuman ;
74448: LD_ADDR_VAR 0 12
74452: PUSH
74453: CALL_OW 44
74457: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74458: LD_VAR 0 12
74462: PPUSH
74463: LD_VAR 0 9
74467: PPUSH
74468: LD_INT 0
74470: PPUSH
74471: CALL 76108 0 3
// end ;
74475: GO 74429
74477: POP
74478: POP
// end ;
74479: LD_VAR 0 10
74483: RET
// export function WantHeal ( sci , unit ) ; begin
74484: LD_INT 0
74486: PPUSH
// if GetTaskList ( sci ) > 0 then
74487: LD_VAR 0 1
74491: PPUSH
74492: CALL_OW 437
74496: PUSH
74497: LD_INT 0
74499: GREATER
74500: IFFALSE 74570
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74502: LD_VAR 0 1
74506: PPUSH
74507: CALL_OW 437
74511: PUSH
74512: LD_INT 1
74514: ARRAY
74515: PUSH
74516: LD_INT 1
74518: ARRAY
74519: PUSH
74520: LD_STRING l
74522: EQUAL
74523: PUSH
74524: LD_VAR 0 1
74528: PPUSH
74529: CALL_OW 437
74533: PUSH
74534: LD_INT 1
74536: ARRAY
74537: PUSH
74538: LD_INT 4
74540: ARRAY
74541: PUSH
74542: LD_VAR 0 2
74546: EQUAL
74547: AND
74548: IFFALSE 74560
// result := true else
74550: LD_ADDR_VAR 0 3
74554: PUSH
74555: LD_INT 1
74557: ST_TO_ADDR
74558: GO 74568
// result := false ;
74560: LD_ADDR_VAR 0 3
74564: PUSH
74565: LD_INT 0
74567: ST_TO_ADDR
// end else
74568: GO 74578
// result := false ;
74570: LD_ADDR_VAR 0 3
74574: PUSH
74575: LD_INT 0
74577: ST_TO_ADDR
// end ;
74578: LD_VAR 0 3
74582: RET
// export function HealTarget ( sci ) ; begin
74583: LD_INT 0
74585: PPUSH
// if not sci then
74586: LD_VAR 0 1
74590: NOT
74591: IFFALSE 74595
// exit ;
74593: GO 74660
// result := 0 ;
74595: LD_ADDR_VAR 0 2
74599: PUSH
74600: LD_INT 0
74602: ST_TO_ADDR
// if GetTaskList ( sci ) then
74603: LD_VAR 0 1
74607: PPUSH
74608: CALL_OW 437
74612: IFFALSE 74660
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74614: LD_VAR 0 1
74618: PPUSH
74619: CALL_OW 437
74623: PUSH
74624: LD_INT 1
74626: ARRAY
74627: PUSH
74628: LD_INT 1
74630: ARRAY
74631: PUSH
74632: LD_STRING l
74634: EQUAL
74635: IFFALSE 74660
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74637: LD_ADDR_VAR 0 2
74641: PUSH
74642: LD_VAR 0 1
74646: PPUSH
74647: CALL_OW 437
74651: PUSH
74652: LD_INT 1
74654: ARRAY
74655: PUSH
74656: LD_INT 4
74658: ARRAY
74659: ST_TO_ADDR
// end ;
74660: LD_VAR 0 2
74664: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74665: LD_INT 0
74667: PPUSH
74668: PPUSH
74669: PPUSH
74670: PPUSH
// if not base_units then
74671: LD_VAR 0 1
74675: NOT
74676: IFFALSE 74680
// exit ;
74678: GO 74767
// result := false ;
74680: LD_ADDR_VAR 0 2
74684: PUSH
74685: LD_INT 0
74687: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74688: LD_ADDR_VAR 0 5
74692: PUSH
74693: LD_VAR 0 1
74697: PPUSH
74698: LD_INT 21
74700: PUSH
74701: LD_INT 3
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PPUSH
74708: CALL_OW 72
74712: ST_TO_ADDR
// if not tmp then
74713: LD_VAR 0 5
74717: NOT
74718: IFFALSE 74722
// exit ;
74720: GO 74767
// for i in tmp do
74722: LD_ADDR_VAR 0 3
74726: PUSH
74727: LD_VAR 0 5
74731: PUSH
74732: FOR_IN
74733: IFFALSE 74765
// begin result := EnemyInRange ( i , 22 ) ;
74735: LD_ADDR_VAR 0 2
74739: PUSH
74740: LD_VAR 0 3
74744: PPUSH
74745: LD_INT 22
74747: PPUSH
74748: CALL 72354 0 2
74752: ST_TO_ADDR
// if result then
74753: LD_VAR 0 2
74757: IFFALSE 74763
// exit ;
74759: POP
74760: POP
74761: GO 74767
// end ;
74763: GO 74732
74765: POP
74766: POP
// end ;
74767: LD_VAR 0 2
74771: RET
// export function FilterByTag ( units , tag ) ; begin
74772: LD_INT 0
74774: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74775: LD_ADDR_VAR 0 3
74779: PUSH
74780: LD_VAR 0 1
74784: PPUSH
74785: LD_INT 120
74787: PUSH
74788: LD_VAR 0 2
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PPUSH
74797: CALL_OW 72
74801: ST_TO_ADDR
// end ;
74802: LD_VAR 0 3
74806: RET
// export function IsDriver ( un ) ; begin
74807: LD_INT 0
74809: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74810: LD_ADDR_VAR 0 2
74814: PUSH
74815: LD_VAR 0 1
74819: PUSH
74820: LD_INT 55
74822: PUSH
74823: EMPTY
74824: LIST
74825: PPUSH
74826: CALL_OW 69
74830: IN
74831: ST_TO_ADDR
// end ;
74832: LD_VAR 0 2
74836: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74837: LD_INT 0
74839: PPUSH
74840: PPUSH
// list := [ ] ;
74841: LD_ADDR_VAR 0 5
74845: PUSH
74846: EMPTY
74847: ST_TO_ADDR
// case d of 0 :
74848: LD_VAR 0 3
74852: PUSH
74853: LD_INT 0
74855: DOUBLE
74856: EQUAL
74857: IFTRUE 74861
74859: GO 74994
74861: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74862: LD_ADDR_VAR 0 5
74866: PUSH
74867: LD_VAR 0 1
74871: PUSH
74872: LD_INT 4
74874: MINUS
74875: PUSH
74876: LD_VAR 0 2
74880: PUSH
74881: LD_INT 4
74883: MINUS
74884: PUSH
74885: LD_INT 2
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: LIST
74892: PUSH
74893: LD_VAR 0 1
74897: PUSH
74898: LD_INT 3
74900: MINUS
74901: PUSH
74902: LD_VAR 0 2
74906: PUSH
74907: LD_INT 1
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: LIST
74914: PUSH
74915: LD_VAR 0 1
74919: PUSH
74920: LD_INT 4
74922: PLUS
74923: PUSH
74924: LD_VAR 0 2
74928: PUSH
74929: LD_INT 4
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: LIST
74936: PUSH
74937: LD_VAR 0 1
74941: PUSH
74942: LD_INT 3
74944: PLUS
74945: PUSH
74946: LD_VAR 0 2
74950: PUSH
74951: LD_INT 3
74953: PLUS
74954: PUSH
74955: LD_INT 5
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: LIST
74962: PUSH
74963: LD_VAR 0 1
74967: PUSH
74968: LD_VAR 0 2
74972: PUSH
74973: LD_INT 4
74975: PLUS
74976: PUSH
74977: LD_INT 0
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: LIST
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: ST_TO_ADDR
// end ; 1 :
74992: GO 75692
74994: LD_INT 1
74996: DOUBLE
74997: EQUAL
74998: IFTRUE 75002
75000: GO 75135
75002: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75003: LD_ADDR_VAR 0 5
75007: PUSH
75008: LD_VAR 0 1
75012: PUSH
75013: LD_VAR 0 2
75017: PUSH
75018: LD_INT 4
75020: MINUS
75021: PUSH
75022: LD_INT 3
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: LIST
75029: PUSH
75030: LD_VAR 0 1
75034: PUSH
75035: LD_INT 3
75037: MINUS
75038: PUSH
75039: LD_VAR 0 2
75043: PUSH
75044: LD_INT 3
75046: MINUS
75047: PUSH
75048: LD_INT 2
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: LIST
75055: PUSH
75056: LD_VAR 0 1
75060: PUSH
75061: LD_INT 4
75063: MINUS
75064: PUSH
75065: LD_VAR 0 2
75069: PUSH
75070: LD_INT 1
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: LIST
75077: PUSH
75078: LD_VAR 0 1
75082: PUSH
75083: LD_VAR 0 2
75087: PUSH
75088: LD_INT 3
75090: PLUS
75091: PUSH
75092: LD_INT 0
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: LIST
75099: PUSH
75100: LD_VAR 0 1
75104: PUSH
75105: LD_INT 4
75107: PLUS
75108: PUSH
75109: LD_VAR 0 2
75113: PUSH
75114: LD_INT 4
75116: PLUS
75117: PUSH
75118: LD_INT 5
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: LIST
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: ST_TO_ADDR
// end ; 2 :
75133: GO 75692
75135: LD_INT 2
75137: DOUBLE
75138: EQUAL
75139: IFTRUE 75143
75141: GO 75272
75143: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75144: LD_ADDR_VAR 0 5
75148: PUSH
75149: LD_VAR 0 1
75153: PUSH
75154: LD_VAR 0 2
75158: PUSH
75159: LD_INT 3
75161: MINUS
75162: PUSH
75163: LD_INT 3
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: LIST
75170: PUSH
75171: LD_VAR 0 1
75175: PUSH
75176: LD_INT 4
75178: PLUS
75179: PUSH
75180: LD_VAR 0 2
75184: PUSH
75185: LD_INT 4
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: LIST
75192: PUSH
75193: LD_VAR 0 1
75197: PUSH
75198: LD_VAR 0 2
75202: PUSH
75203: LD_INT 4
75205: PLUS
75206: PUSH
75207: LD_INT 0
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: LIST
75214: PUSH
75215: LD_VAR 0 1
75219: PUSH
75220: LD_INT 3
75222: MINUS
75223: PUSH
75224: LD_VAR 0 2
75228: PUSH
75229: LD_INT 1
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: LIST
75236: PUSH
75237: LD_VAR 0 1
75241: PUSH
75242: LD_INT 4
75244: MINUS
75245: PUSH
75246: LD_VAR 0 2
75250: PUSH
75251: LD_INT 4
75253: MINUS
75254: PUSH
75255: LD_INT 2
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: LIST
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: ST_TO_ADDR
// end ; 3 :
75270: GO 75692
75272: LD_INT 3
75274: DOUBLE
75275: EQUAL
75276: IFTRUE 75280
75278: GO 75413
75280: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75281: LD_ADDR_VAR 0 5
75285: PUSH
75286: LD_VAR 0 1
75290: PUSH
75291: LD_INT 3
75293: PLUS
75294: PUSH
75295: LD_VAR 0 2
75299: PUSH
75300: LD_INT 4
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: LIST
75307: PUSH
75308: LD_VAR 0 1
75312: PUSH
75313: LD_INT 4
75315: PLUS
75316: PUSH
75317: LD_VAR 0 2
75321: PUSH
75322: LD_INT 4
75324: PLUS
75325: PUSH
75326: LD_INT 5
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: LIST
75333: PUSH
75334: LD_VAR 0 1
75338: PUSH
75339: LD_INT 4
75341: MINUS
75342: PUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_INT 1
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: LIST
75355: PUSH
75356: LD_VAR 0 1
75360: PUSH
75361: LD_VAR 0 2
75365: PUSH
75366: LD_INT 4
75368: MINUS
75369: PUSH
75370: LD_INT 3
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: LIST
75377: PUSH
75378: LD_VAR 0 1
75382: PUSH
75383: LD_INT 3
75385: MINUS
75386: PUSH
75387: LD_VAR 0 2
75391: PUSH
75392: LD_INT 3
75394: MINUS
75395: PUSH
75396: LD_INT 2
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: LIST
75403: PUSH
75404: EMPTY
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: ST_TO_ADDR
// end ; 4 :
75411: GO 75692
75413: LD_INT 4
75415: DOUBLE
75416: EQUAL
75417: IFTRUE 75421
75419: GO 75554
75421: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75422: LD_ADDR_VAR 0 5
75426: PUSH
75427: LD_VAR 0 1
75431: PUSH
75432: LD_VAR 0 2
75436: PUSH
75437: LD_INT 4
75439: PLUS
75440: PUSH
75441: LD_INT 0
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: LIST
75448: PUSH
75449: LD_VAR 0 1
75453: PUSH
75454: LD_INT 3
75456: PLUS
75457: PUSH
75458: LD_VAR 0 2
75462: PUSH
75463: LD_INT 3
75465: PLUS
75466: PUSH
75467: LD_INT 5
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: LIST
75474: PUSH
75475: LD_VAR 0 1
75479: PUSH
75480: LD_INT 4
75482: PLUS
75483: PUSH
75484: LD_VAR 0 2
75488: PUSH
75489: LD_INT 4
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: LIST
75496: PUSH
75497: LD_VAR 0 1
75501: PUSH
75502: LD_VAR 0 2
75506: PUSH
75507: LD_INT 3
75509: MINUS
75510: PUSH
75511: LD_INT 3
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: LIST
75518: PUSH
75519: LD_VAR 0 1
75523: PUSH
75524: LD_INT 4
75526: MINUS
75527: PUSH
75528: LD_VAR 0 2
75532: PUSH
75533: LD_INT 4
75535: MINUS
75536: PUSH
75537: LD_INT 2
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: LIST
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: ST_TO_ADDR
// end ; 5 :
75552: GO 75692
75554: LD_INT 5
75556: DOUBLE
75557: EQUAL
75558: IFTRUE 75562
75560: GO 75691
75562: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75563: LD_ADDR_VAR 0 5
75567: PUSH
75568: LD_VAR 0 1
75572: PUSH
75573: LD_INT 4
75575: MINUS
75576: PUSH
75577: LD_VAR 0 2
75581: PUSH
75582: LD_INT 1
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: PUSH
75590: LD_VAR 0 1
75594: PUSH
75595: LD_VAR 0 2
75599: PUSH
75600: LD_INT 4
75602: MINUS
75603: PUSH
75604: LD_INT 3
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: LIST
75611: PUSH
75612: LD_VAR 0 1
75616: PUSH
75617: LD_INT 4
75619: PLUS
75620: PUSH
75621: LD_VAR 0 2
75625: PUSH
75626: LD_INT 4
75628: PLUS
75629: PUSH
75630: LD_INT 5
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: PUSH
75638: LD_VAR 0 1
75642: PUSH
75643: LD_INT 3
75645: PLUS
75646: PUSH
75647: LD_VAR 0 2
75651: PUSH
75652: LD_INT 4
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: LIST
75659: PUSH
75660: LD_VAR 0 1
75664: PUSH
75665: LD_VAR 0 2
75669: PUSH
75670: LD_INT 3
75672: PLUS
75673: PUSH
75674: LD_INT 0
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: LIST
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: ST_TO_ADDR
// end ; end ;
75689: GO 75692
75691: POP
// result := list ;
75692: LD_ADDR_VAR 0 4
75696: PUSH
75697: LD_VAR 0 5
75701: ST_TO_ADDR
// end ;
75702: LD_VAR 0 4
75706: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75707: LD_INT 0
75709: PPUSH
75710: PPUSH
75711: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75712: LD_VAR 0 1
75716: NOT
75717: PUSH
75718: LD_VAR 0 2
75722: PUSH
75723: LD_INT 1
75725: PUSH
75726: LD_INT 2
75728: PUSH
75729: LD_INT 3
75731: PUSH
75732: LD_INT 4
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: IN
75741: NOT
75742: OR
75743: IFFALSE 75747
// exit ;
75745: GO 75830
// tmp := [ ] ;
75747: LD_ADDR_VAR 0 5
75751: PUSH
75752: EMPTY
75753: ST_TO_ADDR
// for i in units do
75754: LD_ADDR_VAR 0 4
75758: PUSH
75759: LD_VAR 0 1
75763: PUSH
75764: FOR_IN
75765: IFFALSE 75799
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75767: LD_ADDR_VAR 0 5
75771: PUSH
75772: LD_VAR 0 5
75776: PPUSH
75777: LD_VAR 0 4
75781: PPUSH
75782: LD_VAR 0 2
75786: PPUSH
75787: CALL_OW 259
75791: PPUSH
75792: CALL 77191 0 2
75796: ST_TO_ADDR
75797: GO 75764
75799: POP
75800: POP
// if not tmp then
75801: LD_VAR 0 5
75805: NOT
75806: IFFALSE 75810
// exit ;
75808: GO 75830
// result := SortListByListDesc ( units , tmp ) ;
75810: LD_ADDR_VAR 0 3
75814: PUSH
75815: LD_VAR 0 1
75819: PPUSH
75820: LD_VAR 0 5
75824: PPUSH
75825: CALL_OW 77
75829: ST_TO_ADDR
// end ;
75830: LD_VAR 0 3
75834: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75835: LD_INT 0
75837: PPUSH
75838: PPUSH
75839: PPUSH
// result := false ;
75840: LD_ADDR_VAR 0 3
75844: PUSH
75845: LD_INT 0
75847: ST_TO_ADDR
// if not building then
75848: LD_VAR 0 2
75852: NOT
75853: IFFALSE 75857
// exit ;
75855: GO 75995
// x := GetX ( building ) ;
75857: LD_ADDR_VAR 0 4
75861: PUSH
75862: LD_VAR 0 2
75866: PPUSH
75867: CALL_OW 250
75871: ST_TO_ADDR
// y := GetY ( building ) ;
75872: LD_ADDR_VAR 0 5
75876: PUSH
75877: LD_VAR 0 2
75881: PPUSH
75882: CALL_OW 251
75886: ST_TO_ADDR
// if not x or not y then
75887: LD_VAR 0 4
75891: NOT
75892: PUSH
75893: LD_VAR 0 5
75897: NOT
75898: OR
75899: IFFALSE 75903
// exit ;
75901: GO 75995
// if GetTaskList ( unit ) then
75903: LD_VAR 0 1
75907: PPUSH
75908: CALL_OW 437
75912: IFFALSE 75995
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75914: LD_STRING e
75916: PUSH
75917: LD_VAR 0 1
75921: PPUSH
75922: CALL_OW 437
75926: PUSH
75927: LD_INT 1
75929: ARRAY
75930: PUSH
75931: LD_INT 1
75933: ARRAY
75934: EQUAL
75935: PUSH
75936: LD_VAR 0 4
75940: PUSH
75941: LD_VAR 0 1
75945: PPUSH
75946: CALL_OW 437
75950: PUSH
75951: LD_INT 1
75953: ARRAY
75954: PUSH
75955: LD_INT 2
75957: ARRAY
75958: EQUAL
75959: AND
75960: PUSH
75961: LD_VAR 0 5
75965: PUSH
75966: LD_VAR 0 1
75970: PPUSH
75971: CALL_OW 437
75975: PUSH
75976: LD_INT 1
75978: ARRAY
75979: PUSH
75980: LD_INT 3
75982: ARRAY
75983: EQUAL
75984: AND
75985: IFFALSE 75995
// result := true end ;
75987: LD_ADDR_VAR 0 3
75991: PUSH
75992: LD_INT 1
75994: ST_TO_ADDR
// end ;
75995: LD_VAR 0 3
75999: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76000: LD_INT 0
76002: PPUSH
// result := false ;
76003: LD_ADDR_VAR 0 4
76007: PUSH
76008: LD_INT 0
76010: ST_TO_ADDR
// if GetTaskList ( unit ) then
76011: LD_VAR 0 1
76015: PPUSH
76016: CALL_OW 437
76020: IFFALSE 76103
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76022: LD_STRING M
76024: PUSH
76025: LD_VAR 0 1
76029: PPUSH
76030: CALL_OW 437
76034: PUSH
76035: LD_INT 1
76037: ARRAY
76038: PUSH
76039: LD_INT 1
76041: ARRAY
76042: EQUAL
76043: PUSH
76044: LD_VAR 0 2
76048: PUSH
76049: LD_VAR 0 1
76053: PPUSH
76054: CALL_OW 437
76058: PUSH
76059: LD_INT 1
76061: ARRAY
76062: PUSH
76063: LD_INT 2
76065: ARRAY
76066: EQUAL
76067: AND
76068: PUSH
76069: LD_VAR 0 3
76073: PUSH
76074: LD_VAR 0 1
76078: PPUSH
76079: CALL_OW 437
76083: PUSH
76084: LD_INT 1
76086: ARRAY
76087: PUSH
76088: LD_INT 3
76090: ARRAY
76091: EQUAL
76092: AND
76093: IFFALSE 76103
// result := true ;
76095: LD_ADDR_VAR 0 4
76099: PUSH
76100: LD_INT 1
76102: ST_TO_ADDR
// end ; end ;
76103: LD_VAR 0 4
76107: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76108: LD_INT 0
76110: PPUSH
76111: PPUSH
76112: PPUSH
76113: PPUSH
// if not unit or not area then
76114: LD_VAR 0 1
76118: NOT
76119: PUSH
76120: LD_VAR 0 2
76124: NOT
76125: OR
76126: IFFALSE 76130
// exit ;
76128: GO 76294
// tmp := AreaToList ( area , i ) ;
76130: LD_ADDR_VAR 0 6
76134: PUSH
76135: LD_VAR 0 2
76139: PPUSH
76140: LD_VAR 0 5
76144: PPUSH
76145: CALL_OW 517
76149: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76150: LD_ADDR_VAR 0 5
76154: PUSH
76155: DOUBLE
76156: LD_INT 1
76158: DEC
76159: ST_TO_ADDR
76160: LD_VAR 0 6
76164: PUSH
76165: LD_INT 1
76167: ARRAY
76168: PUSH
76169: FOR_TO
76170: IFFALSE 76292
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76172: LD_ADDR_VAR 0 7
76176: PUSH
76177: LD_VAR 0 6
76181: PUSH
76182: LD_INT 1
76184: ARRAY
76185: PUSH
76186: LD_VAR 0 5
76190: ARRAY
76191: PUSH
76192: LD_VAR 0 6
76196: PUSH
76197: LD_INT 2
76199: ARRAY
76200: PUSH
76201: LD_VAR 0 5
76205: ARRAY
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76211: LD_VAR 0 7
76215: PUSH
76216: LD_INT 1
76218: ARRAY
76219: PPUSH
76220: LD_VAR 0 7
76224: PUSH
76225: LD_INT 2
76227: ARRAY
76228: PPUSH
76229: CALL_OW 428
76233: PUSH
76234: LD_INT 0
76236: EQUAL
76237: IFFALSE 76290
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76239: LD_VAR 0 1
76243: PPUSH
76244: LD_VAR 0 7
76248: PUSH
76249: LD_INT 1
76251: ARRAY
76252: PPUSH
76253: LD_VAR 0 7
76257: PUSH
76258: LD_INT 2
76260: ARRAY
76261: PPUSH
76262: LD_VAR 0 3
76266: PPUSH
76267: CALL_OW 48
// result := IsPlaced ( unit ) ;
76271: LD_ADDR_VAR 0 4
76275: PUSH
76276: LD_VAR 0 1
76280: PPUSH
76281: CALL_OW 305
76285: ST_TO_ADDR
// exit ;
76286: POP
76287: POP
76288: GO 76294
// end ; end ;
76290: GO 76169
76292: POP
76293: POP
// end ;
76294: LD_VAR 0 4
76298: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76299: LD_INT 0
76301: PPUSH
76302: PPUSH
76303: PPUSH
// if not side or side > 8 then
76304: LD_VAR 0 1
76308: NOT
76309: PUSH
76310: LD_VAR 0 1
76314: PUSH
76315: LD_INT 8
76317: GREATER
76318: OR
76319: IFFALSE 76323
// exit ;
76321: GO 76510
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76323: LD_ADDR_VAR 0 4
76327: PUSH
76328: LD_INT 22
76330: PUSH
76331: LD_VAR 0 1
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 21
76342: PUSH
76343: LD_INT 3
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PPUSH
76354: CALL_OW 69
76358: ST_TO_ADDR
// if not tmp then
76359: LD_VAR 0 4
76363: NOT
76364: IFFALSE 76368
// exit ;
76366: GO 76510
// enable_addtolog := true ;
76368: LD_ADDR_OWVAR 81
76372: PUSH
76373: LD_INT 1
76375: ST_TO_ADDR
// AddToLog ( [ ) ;
76376: LD_STRING [
76378: PPUSH
76379: CALL_OW 561
// for i in tmp do
76383: LD_ADDR_VAR 0 3
76387: PUSH
76388: LD_VAR 0 4
76392: PUSH
76393: FOR_IN
76394: IFFALSE 76501
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76396: LD_STRING [
76398: PUSH
76399: LD_VAR 0 3
76403: PPUSH
76404: CALL_OW 266
76408: STR
76409: PUSH
76410: LD_STRING , 
76412: STR
76413: PUSH
76414: LD_VAR 0 3
76418: PPUSH
76419: CALL_OW 250
76423: STR
76424: PUSH
76425: LD_STRING , 
76427: STR
76428: PUSH
76429: LD_VAR 0 3
76433: PPUSH
76434: CALL_OW 251
76438: STR
76439: PUSH
76440: LD_STRING , 
76442: STR
76443: PUSH
76444: LD_VAR 0 3
76448: PPUSH
76449: CALL_OW 254
76453: STR
76454: PUSH
76455: LD_STRING , 
76457: STR
76458: PUSH
76459: LD_VAR 0 3
76463: PPUSH
76464: LD_INT 1
76466: PPUSH
76467: CALL_OW 268
76471: STR
76472: PUSH
76473: LD_STRING , 
76475: STR
76476: PUSH
76477: LD_VAR 0 3
76481: PPUSH
76482: LD_INT 2
76484: PPUSH
76485: CALL_OW 268
76489: STR
76490: PUSH
76491: LD_STRING ],
76493: STR
76494: PPUSH
76495: CALL_OW 561
// end ;
76499: GO 76393
76501: POP
76502: POP
// AddToLog ( ]; ) ;
76503: LD_STRING ];
76505: PPUSH
76506: CALL_OW 561
// end ;
76510: LD_VAR 0 2
76514: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76515: LD_INT 0
76517: PPUSH
76518: PPUSH
76519: PPUSH
76520: PPUSH
76521: PPUSH
// if not area or not rate or not max then
76522: LD_VAR 0 1
76526: NOT
76527: PUSH
76528: LD_VAR 0 2
76532: NOT
76533: OR
76534: PUSH
76535: LD_VAR 0 4
76539: NOT
76540: OR
76541: IFFALSE 76545
// exit ;
76543: GO 76734
// while 1 do
76545: LD_INT 1
76547: IFFALSE 76734
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76549: LD_ADDR_VAR 0 9
76553: PUSH
76554: LD_VAR 0 1
76558: PPUSH
76559: LD_INT 1
76561: PPUSH
76562: CALL_OW 287
76566: PUSH
76567: LD_INT 10
76569: MUL
76570: ST_TO_ADDR
// r := rate / 10 ;
76571: LD_ADDR_VAR 0 7
76575: PUSH
76576: LD_VAR 0 2
76580: PUSH
76581: LD_INT 10
76583: DIVREAL
76584: ST_TO_ADDR
// time := 1 1$00 ;
76585: LD_ADDR_VAR 0 8
76589: PUSH
76590: LD_INT 2100
76592: ST_TO_ADDR
// if amount < min then
76593: LD_VAR 0 9
76597: PUSH
76598: LD_VAR 0 3
76602: LESS
76603: IFFALSE 76621
// r := r * 2 else
76605: LD_ADDR_VAR 0 7
76609: PUSH
76610: LD_VAR 0 7
76614: PUSH
76615: LD_INT 2
76617: MUL
76618: ST_TO_ADDR
76619: GO 76647
// if amount > max then
76621: LD_VAR 0 9
76625: PUSH
76626: LD_VAR 0 4
76630: GREATER
76631: IFFALSE 76647
// r := r / 2 ;
76633: LD_ADDR_VAR 0 7
76637: PUSH
76638: LD_VAR 0 7
76642: PUSH
76643: LD_INT 2
76645: DIVREAL
76646: ST_TO_ADDR
// time := time / r ;
76647: LD_ADDR_VAR 0 8
76651: PUSH
76652: LD_VAR 0 8
76656: PUSH
76657: LD_VAR 0 7
76661: DIVREAL
76662: ST_TO_ADDR
// if time < 0 then
76663: LD_VAR 0 8
76667: PUSH
76668: LD_INT 0
76670: LESS
76671: IFFALSE 76688
// time := time * - 1 ;
76673: LD_ADDR_VAR 0 8
76677: PUSH
76678: LD_VAR 0 8
76682: PUSH
76683: LD_INT 1
76685: NEG
76686: MUL
76687: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76688: LD_VAR 0 8
76692: PUSH
76693: LD_INT 35
76695: PPUSH
76696: LD_INT 875
76698: PPUSH
76699: CALL_OW 12
76703: PLUS
76704: PPUSH
76705: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76709: LD_INT 1
76711: PPUSH
76712: LD_INT 5
76714: PPUSH
76715: CALL_OW 12
76719: PPUSH
76720: LD_VAR 0 1
76724: PPUSH
76725: LD_INT 1
76727: PPUSH
76728: CALL_OW 55
// end ;
76732: GO 76545
// end ;
76734: LD_VAR 0 5
76738: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76739: LD_INT 0
76741: PPUSH
76742: PPUSH
76743: PPUSH
76744: PPUSH
76745: PPUSH
76746: PPUSH
76747: PPUSH
76748: PPUSH
// if not turrets or not factories then
76749: LD_VAR 0 1
76753: NOT
76754: PUSH
76755: LD_VAR 0 2
76759: NOT
76760: OR
76761: IFFALSE 76765
// exit ;
76763: GO 77072
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76765: LD_ADDR_VAR 0 10
76769: PUSH
76770: LD_INT 5
76772: PUSH
76773: LD_INT 6
76775: PUSH
76776: EMPTY
76777: LIST
76778: LIST
76779: PUSH
76780: LD_INT 2
76782: PUSH
76783: LD_INT 4
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: LD_INT 3
76792: PUSH
76793: LD_INT 5
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: LIST
76804: PUSH
76805: LD_INT 24
76807: PUSH
76808: LD_INT 25
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: PUSH
76815: LD_INT 23
76817: PUSH
76818: LD_INT 27
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: LD_INT 42
76831: PUSH
76832: LD_INT 43
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: PUSH
76839: LD_INT 44
76841: PUSH
76842: LD_INT 46
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PUSH
76849: LD_INT 45
76851: PUSH
76852: LD_INT 47
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: LIST
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: LIST
76868: ST_TO_ADDR
// result := [ ] ;
76869: LD_ADDR_VAR 0 3
76873: PUSH
76874: EMPTY
76875: ST_TO_ADDR
// for i in turrets do
76876: LD_ADDR_VAR 0 4
76880: PUSH
76881: LD_VAR 0 1
76885: PUSH
76886: FOR_IN
76887: IFFALSE 77070
// begin nat := GetNation ( i ) ;
76889: LD_ADDR_VAR 0 7
76893: PUSH
76894: LD_VAR 0 4
76898: PPUSH
76899: CALL_OW 248
76903: ST_TO_ADDR
// weapon := 0 ;
76904: LD_ADDR_VAR 0 8
76908: PUSH
76909: LD_INT 0
76911: ST_TO_ADDR
// if not nat then
76912: LD_VAR 0 7
76916: NOT
76917: IFFALSE 76921
// continue ;
76919: GO 76886
// for j in list [ nat ] do
76921: LD_ADDR_VAR 0 5
76925: PUSH
76926: LD_VAR 0 10
76930: PUSH
76931: LD_VAR 0 7
76935: ARRAY
76936: PUSH
76937: FOR_IN
76938: IFFALSE 76979
// if GetBWeapon ( i ) = j [ 1 ] then
76940: LD_VAR 0 4
76944: PPUSH
76945: CALL_OW 269
76949: PUSH
76950: LD_VAR 0 5
76954: PUSH
76955: LD_INT 1
76957: ARRAY
76958: EQUAL
76959: IFFALSE 76977
// begin weapon := j [ 2 ] ;
76961: LD_ADDR_VAR 0 8
76965: PUSH
76966: LD_VAR 0 5
76970: PUSH
76971: LD_INT 2
76973: ARRAY
76974: ST_TO_ADDR
// break ;
76975: GO 76979
// end ;
76977: GO 76937
76979: POP
76980: POP
// if not weapon then
76981: LD_VAR 0 8
76985: NOT
76986: IFFALSE 76990
// continue ;
76988: GO 76886
// for k in factories do
76990: LD_ADDR_VAR 0 6
76994: PUSH
76995: LD_VAR 0 2
76999: PUSH
77000: FOR_IN
77001: IFFALSE 77066
// begin weapons := AvailableWeaponList ( k ) ;
77003: LD_ADDR_VAR 0 9
77007: PUSH
77008: LD_VAR 0 6
77012: PPUSH
77013: CALL_OW 478
77017: ST_TO_ADDR
// if not weapons then
77018: LD_VAR 0 9
77022: NOT
77023: IFFALSE 77027
// continue ;
77025: GO 77000
// if weapon in weapons then
77027: LD_VAR 0 8
77031: PUSH
77032: LD_VAR 0 9
77036: IN
77037: IFFALSE 77064
// begin result := [ i , weapon ] ;
77039: LD_ADDR_VAR 0 3
77043: PUSH
77044: LD_VAR 0 4
77048: PUSH
77049: LD_VAR 0 8
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: ST_TO_ADDR
// exit ;
77058: POP
77059: POP
77060: POP
77061: POP
77062: GO 77072
// end ; end ;
77064: GO 77000
77066: POP
77067: POP
// end ;
77068: GO 76886
77070: POP
77071: POP
// end ;
77072: LD_VAR 0 3
77076: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77077: LD_INT 0
77079: PPUSH
// if not side or side > 8 then
77080: LD_VAR 0 3
77084: NOT
77085: PUSH
77086: LD_VAR 0 3
77090: PUSH
77091: LD_INT 8
77093: GREATER
77094: OR
77095: IFFALSE 77099
// exit ;
77097: GO 77158
// if not range then
77099: LD_VAR 0 4
77103: NOT
77104: IFFALSE 77115
// range := - 12 ;
77106: LD_ADDR_VAR 0 4
77110: PUSH
77111: LD_INT 12
77113: NEG
77114: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77115: LD_VAR 0 1
77119: PPUSH
77120: LD_VAR 0 2
77124: PPUSH
77125: LD_VAR 0 3
77129: PPUSH
77130: LD_VAR 0 4
77134: PPUSH
77135: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77139: LD_VAR 0 1
77143: PPUSH
77144: LD_VAR 0 2
77148: PPUSH
77149: LD_VAR 0 3
77153: PPUSH
77154: CALL_OW 331
// end ;
77158: LD_VAR 0 5
77162: RET
// export function Video ( mode ) ; begin
77163: LD_INT 0
77165: PPUSH
// ingame_video = mode ;
77166: LD_ADDR_OWVAR 52
77170: PUSH
77171: LD_VAR 0 1
77175: ST_TO_ADDR
// interface_hidden = mode ;
77176: LD_ADDR_OWVAR 54
77180: PUSH
77181: LD_VAR 0 1
77185: ST_TO_ADDR
// end ;
77186: LD_VAR 0 2
77190: RET
// export function Join ( array , element ) ; begin
77191: LD_INT 0
77193: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77194: LD_ADDR_VAR 0 3
77198: PUSH
77199: LD_VAR 0 1
77203: PPUSH
77204: LD_VAR 0 1
77208: PUSH
77209: LD_INT 1
77211: PLUS
77212: PPUSH
77213: LD_VAR 0 2
77217: PPUSH
77218: CALL_OW 1
77222: ST_TO_ADDR
// end ;
77223: LD_VAR 0 3
77227: RET
// export function JoinUnion ( array , element ) ; begin
77228: LD_INT 0
77230: PPUSH
// result := array union element ;
77231: LD_ADDR_VAR 0 3
77235: PUSH
77236: LD_VAR 0 1
77240: PUSH
77241: LD_VAR 0 2
77245: UNION
77246: ST_TO_ADDR
// end ;
77247: LD_VAR 0 3
77251: RET
// export function GetBehemoths ( side ) ; begin
77252: LD_INT 0
77254: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77255: LD_ADDR_VAR 0 2
77259: PUSH
77260: LD_INT 22
77262: PUSH
77263: LD_VAR 0 1
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: LD_INT 31
77274: PUSH
77275: LD_INT 25
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PPUSH
77286: CALL_OW 69
77290: ST_TO_ADDR
// end ;
77291: LD_VAR 0 2
77295: RET
// export function Shuffle ( array ) ; var i , index ; begin
77296: LD_INT 0
77298: PPUSH
77299: PPUSH
77300: PPUSH
// result := [ ] ;
77301: LD_ADDR_VAR 0 2
77305: PUSH
77306: EMPTY
77307: ST_TO_ADDR
// if not array then
77308: LD_VAR 0 1
77312: NOT
77313: IFFALSE 77317
// exit ;
77315: GO 77416
// Randomize ;
77317: CALL_OW 10
// for i = array downto 1 do
77321: LD_ADDR_VAR 0 3
77325: PUSH
77326: DOUBLE
77327: LD_VAR 0 1
77331: INC
77332: ST_TO_ADDR
77333: LD_INT 1
77335: PUSH
77336: FOR_DOWNTO
77337: IFFALSE 77414
// begin index := rand ( 1 , array ) ;
77339: LD_ADDR_VAR 0 4
77343: PUSH
77344: LD_INT 1
77346: PPUSH
77347: LD_VAR 0 1
77351: PPUSH
77352: CALL_OW 12
77356: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77357: LD_ADDR_VAR 0 2
77361: PUSH
77362: LD_VAR 0 2
77366: PPUSH
77367: LD_VAR 0 2
77371: PUSH
77372: LD_INT 1
77374: PLUS
77375: PPUSH
77376: LD_VAR 0 1
77380: PUSH
77381: LD_VAR 0 4
77385: ARRAY
77386: PPUSH
77387: CALL_OW 2
77391: ST_TO_ADDR
// array := Delete ( array , index ) ;
77392: LD_ADDR_VAR 0 1
77396: PUSH
77397: LD_VAR 0 1
77401: PPUSH
77402: LD_VAR 0 4
77406: PPUSH
77407: CALL_OW 3
77411: ST_TO_ADDR
// end ;
77412: GO 77336
77414: POP
77415: POP
// end ;
77416: LD_VAR 0 2
77420: RET
// export function GetBaseMaterials ( base ) ; begin
77421: LD_INT 0
77423: PPUSH
// result := [ 0 , 0 , 0 ] ;
77424: LD_ADDR_VAR 0 2
77428: PUSH
77429: LD_INT 0
77431: PUSH
77432: LD_INT 0
77434: PUSH
77435: LD_INT 0
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: LIST
77442: ST_TO_ADDR
// if not base then
77443: LD_VAR 0 1
77447: NOT
77448: IFFALSE 77452
// exit ;
77450: GO 77501
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77452: LD_ADDR_VAR 0 2
77456: PUSH
77457: LD_VAR 0 1
77461: PPUSH
77462: LD_INT 1
77464: PPUSH
77465: CALL_OW 275
77469: PUSH
77470: LD_VAR 0 1
77474: PPUSH
77475: LD_INT 2
77477: PPUSH
77478: CALL_OW 275
77482: PUSH
77483: LD_VAR 0 1
77487: PPUSH
77488: LD_INT 3
77490: PPUSH
77491: CALL_OW 275
77495: PUSH
77496: EMPTY
77497: LIST
77498: LIST
77499: LIST
77500: ST_TO_ADDR
// end ;
77501: LD_VAR 0 2
77505: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77506: LD_INT 0
77508: PPUSH
77509: PPUSH
// result := array ;
77510: LD_ADDR_VAR 0 3
77514: PUSH
77515: LD_VAR 0 1
77519: ST_TO_ADDR
// if size >= result then
77520: LD_VAR 0 2
77524: PUSH
77525: LD_VAR 0 3
77529: GREATEREQUAL
77530: IFFALSE 77534
// exit ;
77532: GO 77584
// if size then
77534: LD_VAR 0 2
77538: IFFALSE 77584
// for i := array downto size do
77540: LD_ADDR_VAR 0 4
77544: PUSH
77545: DOUBLE
77546: LD_VAR 0 1
77550: INC
77551: ST_TO_ADDR
77552: LD_VAR 0 2
77556: PUSH
77557: FOR_DOWNTO
77558: IFFALSE 77582
// result := Delete ( result , result ) ;
77560: LD_ADDR_VAR 0 3
77564: PUSH
77565: LD_VAR 0 3
77569: PPUSH
77570: LD_VAR 0 3
77574: PPUSH
77575: CALL_OW 3
77579: ST_TO_ADDR
77580: GO 77557
77582: POP
77583: POP
// end ;
77584: LD_VAR 0 3
77588: RET
// export function ComExit ( unit ) ; var tmp ; begin
77589: LD_INT 0
77591: PPUSH
77592: PPUSH
// if not IsInUnit ( unit ) then
77593: LD_VAR 0 1
77597: PPUSH
77598: CALL_OW 310
77602: NOT
77603: IFFALSE 77607
// exit ;
77605: GO 77667
// tmp := IsInUnit ( unit ) ;
77607: LD_ADDR_VAR 0 3
77611: PUSH
77612: LD_VAR 0 1
77616: PPUSH
77617: CALL_OW 310
77621: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77622: LD_VAR 0 3
77626: PPUSH
77627: CALL_OW 247
77631: PUSH
77632: LD_INT 2
77634: EQUAL
77635: IFFALSE 77648
// ComExitVehicle ( unit ) else
77637: LD_VAR 0 1
77641: PPUSH
77642: CALL_OW 121
77646: GO 77657
// ComExitBuilding ( unit ) ;
77648: LD_VAR 0 1
77652: PPUSH
77653: CALL_OW 122
// result := tmp ;
77657: LD_ADDR_VAR 0 2
77661: PUSH
77662: LD_VAR 0 3
77666: ST_TO_ADDR
// end ;
77667: LD_VAR 0 2
77671: RET
// export function ComExitAll ( units ) ; var i ; begin
77672: LD_INT 0
77674: PPUSH
77675: PPUSH
// if not units then
77676: LD_VAR 0 1
77680: NOT
77681: IFFALSE 77685
// exit ;
77683: GO 77711
// for i in units do
77685: LD_ADDR_VAR 0 3
77689: PUSH
77690: LD_VAR 0 1
77694: PUSH
77695: FOR_IN
77696: IFFALSE 77709
// ComExit ( i ) ;
77698: LD_VAR 0 3
77702: PPUSH
77703: CALL 77589 0 1
77707: GO 77695
77709: POP
77710: POP
// end ;
77711: LD_VAR 0 2
77715: RET
// export function ResetHc ; begin
77716: LD_INT 0
77718: PPUSH
// InitHc ;
77719: CALL_OW 19
// hc_importance := 0 ;
77723: LD_ADDR_OWVAR 32
77727: PUSH
77728: LD_INT 0
77730: ST_TO_ADDR
// end ;
77731: LD_VAR 0 1
77735: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77736: LD_INT 0
77738: PPUSH
77739: PPUSH
77740: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77741: LD_ADDR_VAR 0 6
77745: PUSH
77746: LD_VAR 0 1
77750: PUSH
77751: LD_VAR 0 3
77755: PLUS
77756: PUSH
77757: LD_INT 2
77759: DIV
77760: ST_TO_ADDR
// if _x < 0 then
77761: LD_VAR 0 6
77765: PUSH
77766: LD_INT 0
77768: LESS
77769: IFFALSE 77786
// _x := _x * - 1 ;
77771: LD_ADDR_VAR 0 6
77775: PUSH
77776: LD_VAR 0 6
77780: PUSH
77781: LD_INT 1
77783: NEG
77784: MUL
77785: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77786: LD_ADDR_VAR 0 7
77790: PUSH
77791: LD_VAR 0 2
77795: PUSH
77796: LD_VAR 0 4
77800: PLUS
77801: PUSH
77802: LD_INT 2
77804: DIV
77805: ST_TO_ADDR
// if _y < 0 then
77806: LD_VAR 0 7
77810: PUSH
77811: LD_INT 0
77813: LESS
77814: IFFALSE 77831
// _y := _y * - 1 ;
77816: LD_ADDR_VAR 0 7
77820: PUSH
77821: LD_VAR 0 7
77825: PUSH
77826: LD_INT 1
77828: NEG
77829: MUL
77830: ST_TO_ADDR
// result := [ _x , _y ] ;
77831: LD_ADDR_VAR 0 5
77835: PUSH
77836: LD_VAR 0 6
77840: PUSH
77841: LD_VAR 0 7
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: ST_TO_ADDR
// end ;
77850: LD_VAR 0 5
77854: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77855: LD_INT 0
77857: PPUSH
77858: PPUSH
77859: PPUSH
77860: PPUSH
// task := GetTaskList ( unit ) ;
77861: LD_ADDR_VAR 0 7
77865: PUSH
77866: LD_VAR 0 1
77870: PPUSH
77871: CALL_OW 437
77875: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77876: LD_VAR 0 7
77880: NOT
77881: PUSH
77882: LD_VAR 0 1
77886: PPUSH
77887: LD_VAR 0 2
77891: PPUSH
77892: CALL_OW 308
77896: NOT
77897: AND
77898: IFFALSE 77902
// exit ;
77900: GO 78020
// if IsInArea ( unit , area ) then
77902: LD_VAR 0 1
77906: PPUSH
77907: LD_VAR 0 2
77911: PPUSH
77912: CALL_OW 308
77916: IFFALSE 77934
// begin ComMoveToArea ( unit , goAway ) ;
77918: LD_VAR 0 1
77922: PPUSH
77923: LD_VAR 0 3
77927: PPUSH
77928: CALL_OW 113
// exit ;
77932: GO 78020
// end ; if task [ 1 ] [ 1 ] <> M then
77934: LD_VAR 0 7
77938: PUSH
77939: LD_INT 1
77941: ARRAY
77942: PUSH
77943: LD_INT 1
77945: ARRAY
77946: PUSH
77947: LD_STRING M
77949: NONEQUAL
77950: IFFALSE 77954
// exit ;
77952: GO 78020
// x := task [ 1 ] [ 2 ] ;
77954: LD_ADDR_VAR 0 5
77958: PUSH
77959: LD_VAR 0 7
77963: PUSH
77964: LD_INT 1
77966: ARRAY
77967: PUSH
77968: LD_INT 2
77970: ARRAY
77971: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77972: LD_ADDR_VAR 0 6
77976: PUSH
77977: LD_VAR 0 7
77981: PUSH
77982: LD_INT 1
77984: ARRAY
77985: PUSH
77986: LD_INT 3
77988: ARRAY
77989: ST_TO_ADDR
// if InArea ( x , y , area ) then
77990: LD_VAR 0 5
77994: PPUSH
77995: LD_VAR 0 6
77999: PPUSH
78000: LD_VAR 0 2
78004: PPUSH
78005: CALL_OW 309
78009: IFFALSE 78020
// ComStop ( unit ) ;
78011: LD_VAR 0 1
78015: PPUSH
78016: CALL_OW 141
// end ;
78020: LD_VAR 0 4
78024: RET
// export function Abs ( value ) ; begin
78025: LD_INT 0
78027: PPUSH
// result := value ;
78028: LD_ADDR_VAR 0 2
78032: PUSH
78033: LD_VAR 0 1
78037: ST_TO_ADDR
// if value < 0 then
78038: LD_VAR 0 1
78042: PUSH
78043: LD_INT 0
78045: LESS
78046: IFFALSE 78063
// result := value * - 1 ;
78048: LD_ADDR_VAR 0 2
78052: PUSH
78053: LD_VAR 0 1
78057: PUSH
78058: LD_INT 1
78060: NEG
78061: MUL
78062: ST_TO_ADDR
// end ;
78063: LD_VAR 0 2
78067: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78068: LD_INT 0
78070: PPUSH
78071: PPUSH
78072: PPUSH
78073: PPUSH
78074: PPUSH
78075: PPUSH
78076: PPUSH
78077: PPUSH
// if not unit or not building then
78078: LD_VAR 0 1
78082: NOT
78083: PUSH
78084: LD_VAR 0 2
78088: NOT
78089: OR
78090: IFFALSE 78094
// exit ;
78092: GO 78320
// x := GetX ( building ) ;
78094: LD_ADDR_VAR 0 4
78098: PUSH
78099: LD_VAR 0 2
78103: PPUSH
78104: CALL_OW 250
78108: ST_TO_ADDR
// y := GetY ( building ) ;
78109: LD_ADDR_VAR 0 6
78113: PUSH
78114: LD_VAR 0 2
78118: PPUSH
78119: CALL_OW 251
78123: ST_TO_ADDR
// d := GetDir ( building ) ;
78124: LD_ADDR_VAR 0 8
78128: PUSH
78129: LD_VAR 0 2
78133: PPUSH
78134: CALL_OW 254
78138: ST_TO_ADDR
// r := 4 ;
78139: LD_ADDR_VAR 0 9
78143: PUSH
78144: LD_INT 4
78146: ST_TO_ADDR
// for i := 1 to 5 do
78147: LD_ADDR_VAR 0 10
78151: PUSH
78152: DOUBLE
78153: LD_INT 1
78155: DEC
78156: ST_TO_ADDR
78157: LD_INT 5
78159: PUSH
78160: FOR_TO
78161: IFFALSE 78318
// begin _x := ShiftX ( x , d , r + i ) ;
78163: LD_ADDR_VAR 0 5
78167: PUSH
78168: LD_VAR 0 4
78172: PPUSH
78173: LD_VAR 0 8
78177: PPUSH
78178: LD_VAR 0 9
78182: PUSH
78183: LD_VAR 0 10
78187: PLUS
78188: PPUSH
78189: CALL_OW 272
78193: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78194: LD_ADDR_VAR 0 7
78198: PUSH
78199: LD_VAR 0 6
78203: PPUSH
78204: LD_VAR 0 8
78208: PPUSH
78209: LD_VAR 0 9
78213: PUSH
78214: LD_VAR 0 10
78218: PLUS
78219: PPUSH
78220: CALL_OW 273
78224: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78225: LD_VAR 0 5
78229: PPUSH
78230: LD_VAR 0 7
78234: PPUSH
78235: CALL_OW 488
78239: PUSH
78240: LD_VAR 0 5
78244: PPUSH
78245: LD_VAR 0 7
78249: PPUSH
78250: CALL_OW 428
78254: PPUSH
78255: CALL_OW 247
78259: PUSH
78260: LD_INT 3
78262: PUSH
78263: LD_INT 2
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: IN
78270: NOT
78271: AND
78272: IFFALSE 78316
// begin ComMoveXY ( unit , _x , _y ) ;
78274: LD_VAR 0 1
78278: PPUSH
78279: LD_VAR 0 5
78283: PPUSH
78284: LD_VAR 0 7
78288: PPUSH
78289: CALL_OW 111
// result := [ _x , _y ] ;
78293: LD_ADDR_VAR 0 3
78297: PUSH
78298: LD_VAR 0 5
78302: PUSH
78303: LD_VAR 0 7
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: ST_TO_ADDR
// exit ;
78312: POP
78313: POP
78314: GO 78320
// end ; end ;
78316: GO 78160
78318: POP
78319: POP
// end ;
78320: LD_VAR 0 3
78324: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78325: LD_INT 0
78327: PPUSH
78328: PPUSH
78329: PPUSH
// result := 0 ;
78330: LD_ADDR_VAR 0 3
78334: PUSH
78335: LD_INT 0
78337: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78338: LD_VAR 0 1
78342: PUSH
78343: LD_INT 0
78345: LESS
78346: PUSH
78347: LD_VAR 0 1
78351: PUSH
78352: LD_INT 8
78354: GREATER
78355: OR
78356: PUSH
78357: LD_VAR 0 2
78361: PUSH
78362: LD_INT 0
78364: LESS
78365: OR
78366: PUSH
78367: LD_VAR 0 2
78371: PUSH
78372: LD_INT 8
78374: GREATER
78375: OR
78376: IFFALSE 78380
// exit ;
78378: GO 78455
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78380: LD_ADDR_VAR 0 4
78384: PUSH
78385: LD_INT 22
78387: PUSH
78388: LD_VAR 0 2
78392: PUSH
78393: EMPTY
78394: LIST
78395: LIST
78396: PPUSH
78397: CALL_OW 69
78401: PUSH
78402: FOR_IN
78403: IFFALSE 78453
// begin un := UnitShoot ( i ) ;
78405: LD_ADDR_VAR 0 5
78409: PUSH
78410: LD_VAR 0 4
78414: PPUSH
78415: CALL_OW 504
78419: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78420: LD_VAR 0 5
78424: PPUSH
78425: CALL_OW 255
78429: PUSH
78430: LD_VAR 0 1
78434: EQUAL
78435: IFFALSE 78451
// begin result := un ;
78437: LD_ADDR_VAR 0 3
78441: PUSH
78442: LD_VAR 0 5
78446: ST_TO_ADDR
// exit ;
78447: POP
78448: POP
78449: GO 78455
// end ; end ;
78451: GO 78402
78453: POP
78454: POP
// end ;
78455: LD_VAR 0 3
78459: RET
// export function GetCargoBay ( units ) ; begin
78460: LD_INT 0
78462: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78463: LD_ADDR_VAR 0 2
78467: PUSH
78468: LD_VAR 0 1
78472: PPUSH
78473: LD_INT 2
78475: PUSH
78476: LD_INT 34
78478: PUSH
78479: LD_INT 12
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PUSH
78486: LD_INT 34
78488: PUSH
78489: LD_INT 51
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PUSH
78496: LD_INT 34
78498: PUSH
78499: LD_INT 32
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: PUSH
78506: LD_INT 34
78508: PUSH
78509: LD_INT 89
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: LIST
78520: LIST
78521: LIST
78522: PPUSH
78523: CALL_OW 72
78527: ST_TO_ADDR
// end ;
78528: LD_VAR 0 2
78532: RET
// export function Negate ( value ) ; begin
78533: LD_INT 0
78535: PPUSH
// result := not value ;
78536: LD_ADDR_VAR 0 2
78540: PUSH
78541: LD_VAR 0 1
78545: NOT
78546: ST_TO_ADDR
// end ;
78547: LD_VAR 0 2
78551: RET
// export function Inc ( value ) ; begin
78552: LD_INT 0
78554: PPUSH
// result := value + 1 ;
78555: LD_ADDR_VAR 0 2
78559: PUSH
78560: LD_VAR 0 1
78564: PUSH
78565: LD_INT 1
78567: PLUS
78568: ST_TO_ADDR
// end ;
78569: LD_VAR 0 2
78573: RET
// export function Dec ( value ) ; begin
78574: LD_INT 0
78576: PPUSH
// result := value - 1 ;
78577: LD_ADDR_VAR 0 2
78581: PUSH
78582: LD_VAR 0 1
78586: PUSH
78587: LD_INT 1
78589: MINUS
78590: ST_TO_ADDR
// end ;
78591: LD_VAR 0 2
78595: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78596: LD_INT 0
78598: PPUSH
78599: PPUSH
78600: PPUSH
78601: PPUSH
78602: PPUSH
78603: PPUSH
78604: PPUSH
78605: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78606: LD_VAR 0 1
78610: PPUSH
78611: LD_VAR 0 2
78615: PPUSH
78616: CALL_OW 488
78620: NOT
78621: PUSH
78622: LD_VAR 0 3
78626: PPUSH
78627: LD_VAR 0 4
78631: PPUSH
78632: CALL_OW 488
78636: NOT
78637: OR
78638: IFFALSE 78651
// begin result := - 1 ;
78640: LD_ADDR_VAR 0 5
78644: PUSH
78645: LD_INT 1
78647: NEG
78648: ST_TO_ADDR
// exit ;
78649: GO 78886
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78651: LD_ADDR_VAR 0 12
78655: PUSH
78656: LD_VAR 0 1
78660: PPUSH
78661: LD_VAR 0 2
78665: PPUSH
78666: LD_VAR 0 3
78670: PPUSH
78671: LD_VAR 0 4
78675: PPUSH
78676: CALL 77736 0 4
78680: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78681: LD_ADDR_VAR 0 11
78685: PUSH
78686: LD_VAR 0 1
78690: PPUSH
78691: LD_VAR 0 2
78695: PPUSH
78696: LD_VAR 0 12
78700: PUSH
78701: LD_INT 1
78703: ARRAY
78704: PPUSH
78705: LD_VAR 0 12
78709: PUSH
78710: LD_INT 2
78712: ARRAY
78713: PPUSH
78714: CALL_OW 298
78718: ST_TO_ADDR
// distance := 9999 ;
78719: LD_ADDR_VAR 0 10
78723: PUSH
78724: LD_INT 9999
78726: ST_TO_ADDR
// for i := 0 to 5 do
78727: LD_ADDR_VAR 0 6
78731: PUSH
78732: DOUBLE
78733: LD_INT 0
78735: DEC
78736: ST_TO_ADDR
78737: LD_INT 5
78739: PUSH
78740: FOR_TO
78741: IFFALSE 78884
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78743: LD_ADDR_VAR 0 7
78747: PUSH
78748: LD_VAR 0 1
78752: PPUSH
78753: LD_VAR 0 6
78757: PPUSH
78758: LD_VAR 0 11
78762: PPUSH
78763: CALL_OW 272
78767: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78768: LD_ADDR_VAR 0 8
78772: PUSH
78773: LD_VAR 0 2
78777: PPUSH
78778: LD_VAR 0 6
78782: PPUSH
78783: LD_VAR 0 11
78787: PPUSH
78788: CALL_OW 273
78792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78793: LD_VAR 0 7
78797: PPUSH
78798: LD_VAR 0 8
78802: PPUSH
78803: CALL_OW 488
78807: NOT
78808: IFFALSE 78812
// continue ;
78810: GO 78740
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78812: LD_ADDR_VAR 0 9
78816: PUSH
78817: LD_VAR 0 12
78821: PUSH
78822: LD_INT 1
78824: ARRAY
78825: PPUSH
78826: LD_VAR 0 12
78830: PUSH
78831: LD_INT 2
78833: ARRAY
78834: PPUSH
78835: LD_VAR 0 7
78839: PPUSH
78840: LD_VAR 0 8
78844: PPUSH
78845: CALL_OW 298
78849: ST_TO_ADDR
// if tmp < distance then
78850: LD_VAR 0 9
78854: PUSH
78855: LD_VAR 0 10
78859: LESS
78860: IFFALSE 78882
// begin result := i ;
78862: LD_ADDR_VAR 0 5
78866: PUSH
78867: LD_VAR 0 6
78871: ST_TO_ADDR
// distance := tmp ;
78872: LD_ADDR_VAR 0 10
78876: PUSH
78877: LD_VAR 0 9
78881: ST_TO_ADDR
// end ; end ;
78882: GO 78740
78884: POP
78885: POP
// end ;
78886: LD_VAR 0 5
78890: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78891: LD_INT 0
78893: PPUSH
78894: PPUSH
// if not driver or not IsInUnit ( driver ) then
78895: LD_VAR 0 1
78899: NOT
78900: PUSH
78901: LD_VAR 0 1
78905: PPUSH
78906: CALL_OW 310
78910: NOT
78911: OR
78912: IFFALSE 78916
// exit ;
78914: GO 79006
// vehicle := IsInUnit ( driver ) ;
78916: LD_ADDR_VAR 0 3
78920: PUSH
78921: LD_VAR 0 1
78925: PPUSH
78926: CALL_OW 310
78930: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78931: LD_VAR 0 1
78935: PPUSH
78936: LD_STRING \
78938: PUSH
78939: LD_INT 0
78941: PUSH
78942: LD_INT 0
78944: PUSH
78945: LD_INT 0
78947: PUSH
78948: LD_INT 0
78950: PUSH
78951: LD_INT 0
78953: PUSH
78954: LD_INT 0
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: PUSH
78966: LD_STRING E
78968: PUSH
78969: LD_INT 0
78971: PUSH
78972: LD_INT 0
78974: PUSH
78975: LD_VAR 0 3
78979: PUSH
78980: LD_INT 0
78982: PUSH
78983: LD_INT 0
78985: PUSH
78986: LD_INT 0
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: PPUSH
79002: CALL_OW 446
// end ;
79006: LD_VAR 0 2
79010: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79011: LD_INT 0
79013: PPUSH
79014: PPUSH
// if not driver or not IsInUnit ( driver ) then
79015: LD_VAR 0 1
79019: NOT
79020: PUSH
79021: LD_VAR 0 1
79025: PPUSH
79026: CALL_OW 310
79030: NOT
79031: OR
79032: IFFALSE 79036
// exit ;
79034: GO 79126
// vehicle := IsInUnit ( driver ) ;
79036: LD_ADDR_VAR 0 3
79040: PUSH
79041: LD_VAR 0 1
79045: PPUSH
79046: CALL_OW 310
79050: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79051: LD_VAR 0 1
79055: PPUSH
79056: LD_STRING \
79058: PUSH
79059: LD_INT 0
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: LD_INT 0
79067: PUSH
79068: LD_INT 0
79070: PUSH
79071: LD_INT 0
79073: PUSH
79074: LD_INT 0
79076: PUSH
79077: EMPTY
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: PUSH
79086: LD_STRING E
79088: PUSH
79089: LD_INT 0
79091: PUSH
79092: LD_INT 0
79094: PUSH
79095: LD_VAR 0 3
79099: PUSH
79100: LD_INT 0
79102: PUSH
79103: LD_INT 0
79105: PUSH
79106: LD_INT 0
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: LIST
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PPUSH
79122: CALL_OW 447
// end ;
79126: LD_VAR 0 2
79130: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79131: LD_INT 0
79133: PPUSH
79134: PPUSH
79135: PPUSH
// tmp := [ ] ;
79136: LD_ADDR_VAR 0 5
79140: PUSH
79141: EMPTY
79142: ST_TO_ADDR
// for i in units do
79143: LD_ADDR_VAR 0 4
79147: PUSH
79148: LD_VAR 0 1
79152: PUSH
79153: FOR_IN
79154: IFFALSE 79192
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79156: LD_ADDR_VAR 0 5
79160: PUSH
79161: LD_VAR 0 5
79165: PPUSH
79166: LD_VAR 0 5
79170: PUSH
79171: LD_INT 1
79173: PLUS
79174: PPUSH
79175: LD_VAR 0 4
79179: PPUSH
79180: CALL_OW 256
79184: PPUSH
79185: CALL_OW 2
79189: ST_TO_ADDR
79190: GO 79153
79192: POP
79193: POP
// if not tmp then
79194: LD_VAR 0 5
79198: NOT
79199: IFFALSE 79203
// exit ;
79201: GO 79251
// if asc then
79203: LD_VAR 0 2
79207: IFFALSE 79231
// result := SortListByListAsc ( units , tmp ) else
79209: LD_ADDR_VAR 0 3
79213: PUSH
79214: LD_VAR 0 1
79218: PPUSH
79219: LD_VAR 0 5
79223: PPUSH
79224: CALL_OW 76
79228: ST_TO_ADDR
79229: GO 79251
// result := SortListByListDesc ( units , tmp ) ;
79231: LD_ADDR_VAR 0 3
79235: PUSH
79236: LD_VAR 0 1
79240: PPUSH
79241: LD_VAR 0 5
79245: PPUSH
79246: CALL_OW 77
79250: ST_TO_ADDR
// end ;
79251: LD_VAR 0 3
79255: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79256: LD_INT 0
79258: PPUSH
79259: PPUSH
// task := GetTaskList ( mech ) ;
79260: LD_ADDR_VAR 0 4
79264: PUSH
79265: LD_VAR 0 1
79269: PPUSH
79270: CALL_OW 437
79274: ST_TO_ADDR
// if not task then
79275: LD_VAR 0 4
79279: NOT
79280: IFFALSE 79284
// exit ;
79282: GO 79326
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79284: LD_ADDR_VAR 0 3
79288: PUSH
79289: LD_VAR 0 4
79293: PUSH
79294: LD_INT 1
79296: ARRAY
79297: PUSH
79298: LD_INT 1
79300: ARRAY
79301: PUSH
79302: LD_STRING r
79304: EQUAL
79305: PUSH
79306: LD_VAR 0 4
79310: PUSH
79311: LD_INT 1
79313: ARRAY
79314: PUSH
79315: LD_INT 4
79317: ARRAY
79318: PUSH
79319: LD_VAR 0 2
79323: EQUAL
79324: AND
79325: ST_TO_ADDR
// end ;
79326: LD_VAR 0 3
79330: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79331: LD_INT 0
79333: PPUSH
// SetDir ( unit , d ) ;
79334: LD_VAR 0 1
79338: PPUSH
79339: LD_VAR 0 4
79343: PPUSH
79344: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79348: LD_VAR 0 1
79352: PPUSH
79353: LD_VAR 0 2
79357: PPUSH
79358: LD_VAR 0 3
79362: PPUSH
79363: LD_VAR 0 5
79367: PPUSH
79368: CALL_OW 48
// end ;
79372: LD_VAR 0 6
79376: RET
// export function ToNaturalNumber ( number ) ; begin
79377: LD_INT 0
79379: PPUSH
// result := number div 1 ;
79380: LD_ADDR_VAR 0 2
79384: PUSH
79385: LD_VAR 0 1
79389: PUSH
79390: LD_INT 1
79392: DIV
79393: ST_TO_ADDR
// if number < 0 then
79394: LD_VAR 0 1
79398: PUSH
79399: LD_INT 0
79401: LESS
79402: IFFALSE 79412
// result := 0 ;
79404: LD_ADDR_VAR 0 2
79408: PUSH
79409: LD_INT 0
79411: ST_TO_ADDR
// end ;
79412: LD_VAR 0 2
79416: RET
// export function SortByClass ( units , class ) ; var un ; begin
79417: LD_INT 0
79419: PPUSH
79420: PPUSH
// if not units or not class then
79421: LD_VAR 0 1
79425: NOT
79426: PUSH
79427: LD_VAR 0 2
79431: NOT
79432: OR
79433: IFFALSE 79437
// exit ;
79435: GO 79532
// result := [ ] ;
79437: LD_ADDR_VAR 0 3
79441: PUSH
79442: EMPTY
79443: ST_TO_ADDR
// for un in units do
79444: LD_ADDR_VAR 0 4
79448: PUSH
79449: LD_VAR 0 1
79453: PUSH
79454: FOR_IN
79455: IFFALSE 79530
// if GetClass ( un ) = class then
79457: LD_VAR 0 4
79461: PPUSH
79462: CALL_OW 257
79466: PUSH
79467: LD_VAR 0 2
79471: EQUAL
79472: IFFALSE 79499
// result := Insert ( result , 1 , un ) else
79474: LD_ADDR_VAR 0 3
79478: PUSH
79479: LD_VAR 0 3
79483: PPUSH
79484: LD_INT 1
79486: PPUSH
79487: LD_VAR 0 4
79491: PPUSH
79492: CALL_OW 2
79496: ST_TO_ADDR
79497: GO 79528
// result := Replace ( result , result + 1 , un ) ;
79499: LD_ADDR_VAR 0 3
79503: PUSH
79504: LD_VAR 0 3
79508: PPUSH
79509: LD_VAR 0 3
79513: PUSH
79514: LD_INT 1
79516: PLUS
79517: PPUSH
79518: LD_VAR 0 4
79522: PPUSH
79523: CALL_OW 1
79527: ST_TO_ADDR
79528: GO 79454
79530: POP
79531: POP
// end ;
79532: LD_VAR 0 3
79536: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79537: LD_INT 0
79539: PPUSH
79540: PPUSH
79541: PPUSH
79542: PPUSH
79543: PPUSH
79544: PPUSH
79545: PPUSH
// result := [ ] ;
79546: LD_ADDR_VAR 0 4
79550: PUSH
79551: EMPTY
79552: ST_TO_ADDR
// if x - r < 0 then
79553: LD_VAR 0 1
79557: PUSH
79558: LD_VAR 0 3
79562: MINUS
79563: PUSH
79564: LD_INT 0
79566: LESS
79567: IFFALSE 79579
// min_x := 0 else
79569: LD_ADDR_VAR 0 8
79573: PUSH
79574: LD_INT 0
79576: ST_TO_ADDR
79577: GO 79595
// min_x := x - r ;
79579: LD_ADDR_VAR 0 8
79583: PUSH
79584: LD_VAR 0 1
79588: PUSH
79589: LD_VAR 0 3
79593: MINUS
79594: ST_TO_ADDR
// if y - r < 0 then
79595: LD_VAR 0 2
79599: PUSH
79600: LD_VAR 0 3
79604: MINUS
79605: PUSH
79606: LD_INT 0
79608: LESS
79609: IFFALSE 79621
// min_y := 0 else
79611: LD_ADDR_VAR 0 7
79615: PUSH
79616: LD_INT 0
79618: ST_TO_ADDR
79619: GO 79637
// min_y := y - r ;
79621: LD_ADDR_VAR 0 7
79625: PUSH
79626: LD_VAR 0 2
79630: PUSH
79631: LD_VAR 0 3
79635: MINUS
79636: ST_TO_ADDR
// max_x := x + r ;
79637: LD_ADDR_VAR 0 9
79641: PUSH
79642: LD_VAR 0 1
79646: PUSH
79647: LD_VAR 0 3
79651: PLUS
79652: ST_TO_ADDR
// max_y := y + r ;
79653: LD_ADDR_VAR 0 10
79657: PUSH
79658: LD_VAR 0 2
79662: PUSH
79663: LD_VAR 0 3
79667: PLUS
79668: ST_TO_ADDR
// for _x = min_x to max_x do
79669: LD_ADDR_VAR 0 5
79673: PUSH
79674: DOUBLE
79675: LD_VAR 0 8
79679: DEC
79680: ST_TO_ADDR
79681: LD_VAR 0 9
79685: PUSH
79686: FOR_TO
79687: IFFALSE 79788
// for _y = min_y to max_y do
79689: LD_ADDR_VAR 0 6
79693: PUSH
79694: DOUBLE
79695: LD_VAR 0 7
79699: DEC
79700: ST_TO_ADDR
79701: LD_VAR 0 10
79705: PUSH
79706: FOR_TO
79707: IFFALSE 79784
// begin if not ValidHex ( _x , _y ) then
79709: LD_VAR 0 5
79713: PPUSH
79714: LD_VAR 0 6
79718: PPUSH
79719: CALL_OW 488
79723: NOT
79724: IFFALSE 79728
// continue ;
79726: GO 79706
// if GetResourceTypeXY ( _x , _y ) then
79728: LD_VAR 0 5
79732: PPUSH
79733: LD_VAR 0 6
79737: PPUSH
79738: CALL_OW 283
79742: IFFALSE 79782
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79744: LD_ADDR_VAR 0 4
79748: PUSH
79749: LD_VAR 0 4
79753: PPUSH
79754: LD_VAR 0 4
79758: PUSH
79759: LD_INT 1
79761: PLUS
79762: PPUSH
79763: LD_VAR 0 5
79767: PUSH
79768: LD_VAR 0 6
79772: PUSH
79773: EMPTY
79774: LIST
79775: LIST
79776: PPUSH
79777: CALL_OW 1
79781: ST_TO_ADDR
// end ;
79782: GO 79706
79784: POP
79785: POP
79786: GO 79686
79788: POP
79789: POP
// end ;
79790: LD_VAR 0 4
79794: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79795: LD_INT 0
79797: PPUSH
79798: PPUSH
79799: PPUSH
79800: PPUSH
79801: PPUSH
79802: PPUSH
79803: PPUSH
79804: PPUSH
// if not units then
79805: LD_VAR 0 1
79809: NOT
79810: IFFALSE 79814
// exit ;
79812: GO 80338
// result := UnitFilter ( units , [ f_ok ] ) ;
79814: LD_ADDR_VAR 0 3
79818: PUSH
79819: LD_VAR 0 1
79823: PPUSH
79824: LD_INT 50
79826: PUSH
79827: EMPTY
79828: LIST
79829: PPUSH
79830: CALL_OW 72
79834: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79835: LD_ADDR_VAR 0 8
79839: PUSH
79840: LD_VAR 0 1
79844: PUSH
79845: LD_INT 1
79847: ARRAY
79848: PPUSH
79849: CALL_OW 255
79853: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79854: LD_ADDR_VAR 0 10
79858: PUSH
79859: LD_INT 29
79861: PUSH
79862: LD_INT 91
79864: PUSH
79865: LD_INT 49
79867: PUSH
79868: EMPTY
79869: LIST
79870: LIST
79871: LIST
79872: ST_TO_ADDR
// if not result then
79873: LD_VAR 0 3
79877: NOT
79878: IFFALSE 79882
// exit ;
79880: GO 80338
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79882: LD_ADDR_VAR 0 5
79886: PUSH
79887: LD_INT 81
79889: PUSH
79890: LD_VAR 0 8
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: PPUSH
79899: CALL_OW 69
79903: ST_TO_ADDR
// for i in result do
79904: LD_ADDR_VAR 0 4
79908: PUSH
79909: LD_VAR 0 3
79913: PUSH
79914: FOR_IN
79915: IFFALSE 80336
// begin tag := GetTag ( i ) + 1 ;
79917: LD_ADDR_VAR 0 9
79921: PUSH
79922: LD_VAR 0 4
79926: PPUSH
79927: CALL_OW 110
79931: PUSH
79932: LD_INT 1
79934: PLUS
79935: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79936: LD_ADDR_VAR 0 7
79940: PUSH
79941: LD_VAR 0 4
79945: PPUSH
79946: CALL_OW 250
79950: PPUSH
79951: LD_VAR 0 4
79955: PPUSH
79956: CALL_OW 251
79960: PPUSH
79961: LD_INT 6
79963: PPUSH
79964: CALL 79537 0 3
79968: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79969: LD_VAR 0 4
79973: PPUSH
79974: CALL_OW 247
79978: PUSH
79979: LD_INT 2
79981: EQUAL
79982: PUSH
79983: LD_VAR 0 7
79987: AND
79988: PUSH
79989: LD_VAR 0 4
79993: PPUSH
79994: CALL_OW 264
79998: PUSH
79999: LD_VAR 0 10
80003: IN
80004: NOT
80005: AND
80006: IFFALSE 80045
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80008: LD_VAR 0 4
80012: PPUSH
80013: LD_VAR 0 7
80017: PUSH
80018: LD_INT 1
80020: ARRAY
80021: PUSH
80022: LD_INT 1
80024: ARRAY
80025: PPUSH
80026: LD_VAR 0 7
80030: PUSH
80031: LD_INT 1
80033: ARRAY
80034: PUSH
80035: LD_INT 2
80037: ARRAY
80038: PPUSH
80039: CALL_OW 116
80043: GO 80334
// if path > tag then
80045: LD_VAR 0 2
80049: PUSH
80050: LD_VAR 0 9
80054: GREATER
80055: IFFALSE 80263
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80057: LD_ADDR_VAR 0 6
80061: PUSH
80062: LD_VAR 0 5
80066: PPUSH
80067: LD_INT 91
80069: PUSH
80070: LD_VAR 0 4
80074: PUSH
80075: LD_INT 8
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: LIST
80082: PPUSH
80083: CALL_OW 72
80087: ST_TO_ADDR
// if nearEnemy then
80088: LD_VAR 0 6
80092: IFFALSE 80161
// begin if GetWeapon ( i ) = ru_time_lapser then
80094: LD_VAR 0 4
80098: PPUSH
80099: CALL_OW 264
80103: PUSH
80104: LD_INT 49
80106: EQUAL
80107: IFFALSE 80135
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80109: LD_VAR 0 4
80113: PPUSH
80114: LD_VAR 0 6
80118: PPUSH
80119: LD_VAR 0 4
80123: PPUSH
80124: CALL_OW 74
80128: PPUSH
80129: CALL_OW 112
80133: GO 80159
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80135: LD_VAR 0 4
80139: PPUSH
80140: LD_VAR 0 6
80144: PPUSH
80145: LD_VAR 0 4
80149: PPUSH
80150: CALL_OW 74
80154: PPUSH
80155: CALL_OW 115
// end else
80159: GO 80261
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80161: LD_VAR 0 4
80165: PPUSH
80166: LD_VAR 0 2
80170: PUSH
80171: LD_VAR 0 9
80175: ARRAY
80176: PUSH
80177: LD_INT 1
80179: ARRAY
80180: PPUSH
80181: LD_VAR 0 2
80185: PUSH
80186: LD_VAR 0 9
80190: ARRAY
80191: PUSH
80192: LD_INT 2
80194: ARRAY
80195: PPUSH
80196: CALL_OW 297
80200: PUSH
80201: LD_INT 6
80203: GREATER
80204: IFFALSE 80247
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80206: LD_VAR 0 4
80210: PPUSH
80211: LD_VAR 0 2
80215: PUSH
80216: LD_VAR 0 9
80220: ARRAY
80221: PUSH
80222: LD_INT 1
80224: ARRAY
80225: PPUSH
80226: LD_VAR 0 2
80230: PUSH
80231: LD_VAR 0 9
80235: ARRAY
80236: PUSH
80237: LD_INT 2
80239: ARRAY
80240: PPUSH
80241: CALL_OW 114
80245: GO 80261
// SetTag ( i , tag ) ;
80247: LD_VAR 0 4
80251: PPUSH
80252: LD_VAR 0 9
80256: PPUSH
80257: CALL_OW 109
// end else
80261: GO 80334
// if enemy then
80263: LD_VAR 0 5
80267: IFFALSE 80334
// begin if GetWeapon ( i ) = ru_time_lapser then
80269: LD_VAR 0 4
80273: PPUSH
80274: CALL_OW 264
80278: PUSH
80279: LD_INT 49
80281: EQUAL
80282: IFFALSE 80310
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80284: LD_VAR 0 4
80288: PPUSH
80289: LD_VAR 0 5
80293: PPUSH
80294: LD_VAR 0 4
80298: PPUSH
80299: CALL_OW 74
80303: PPUSH
80304: CALL_OW 112
80308: GO 80334
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80310: LD_VAR 0 4
80314: PPUSH
80315: LD_VAR 0 5
80319: PPUSH
80320: LD_VAR 0 4
80324: PPUSH
80325: CALL_OW 74
80329: PPUSH
80330: CALL_OW 115
// end ; end ;
80334: GO 79914
80336: POP
80337: POP
// end ;
80338: LD_VAR 0 3
80342: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80343: LD_INT 0
80345: PPUSH
80346: PPUSH
80347: PPUSH
// if not unit or IsInUnit ( unit ) then
80348: LD_VAR 0 1
80352: NOT
80353: PUSH
80354: LD_VAR 0 1
80358: PPUSH
80359: CALL_OW 310
80363: OR
80364: IFFALSE 80368
// exit ;
80366: GO 80459
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80368: LD_ADDR_VAR 0 4
80372: PUSH
80373: LD_VAR 0 1
80377: PPUSH
80378: CALL_OW 250
80382: PPUSH
80383: LD_VAR 0 2
80387: PPUSH
80388: LD_INT 1
80390: PPUSH
80391: CALL_OW 272
80395: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80396: LD_ADDR_VAR 0 5
80400: PUSH
80401: LD_VAR 0 1
80405: PPUSH
80406: CALL_OW 251
80410: PPUSH
80411: LD_VAR 0 2
80415: PPUSH
80416: LD_INT 1
80418: PPUSH
80419: CALL_OW 273
80423: ST_TO_ADDR
// if ValidHex ( x , y ) then
80424: LD_VAR 0 4
80428: PPUSH
80429: LD_VAR 0 5
80433: PPUSH
80434: CALL_OW 488
80438: IFFALSE 80459
// ComTurnXY ( unit , x , y ) ;
80440: LD_VAR 0 1
80444: PPUSH
80445: LD_VAR 0 4
80449: PPUSH
80450: LD_VAR 0 5
80454: PPUSH
80455: CALL_OW 118
// end ;
80459: LD_VAR 0 3
80463: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80464: LD_INT 0
80466: PPUSH
80467: PPUSH
// result := false ;
80468: LD_ADDR_VAR 0 3
80472: PUSH
80473: LD_INT 0
80475: ST_TO_ADDR
// if not units then
80476: LD_VAR 0 2
80480: NOT
80481: IFFALSE 80485
// exit ;
80483: GO 80530
// for i in units do
80485: LD_ADDR_VAR 0 4
80489: PUSH
80490: LD_VAR 0 2
80494: PUSH
80495: FOR_IN
80496: IFFALSE 80528
// if See ( side , i ) then
80498: LD_VAR 0 1
80502: PPUSH
80503: LD_VAR 0 4
80507: PPUSH
80508: CALL_OW 292
80512: IFFALSE 80526
// begin result := true ;
80514: LD_ADDR_VAR 0 3
80518: PUSH
80519: LD_INT 1
80521: ST_TO_ADDR
// exit ;
80522: POP
80523: POP
80524: GO 80530
// end ;
80526: GO 80495
80528: POP
80529: POP
// end ;
80530: LD_VAR 0 3
80534: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80535: LD_INT 0
80537: PPUSH
80538: PPUSH
80539: PPUSH
80540: PPUSH
// if not unit or not points then
80541: LD_VAR 0 1
80545: NOT
80546: PUSH
80547: LD_VAR 0 2
80551: NOT
80552: OR
80553: IFFALSE 80557
// exit ;
80555: GO 80647
// dist := 99999 ;
80557: LD_ADDR_VAR 0 5
80561: PUSH
80562: LD_INT 99999
80564: ST_TO_ADDR
// for i in points do
80565: LD_ADDR_VAR 0 4
80569: PUSH
80570: LD_VAR 0 2
80574: PUSH
80575: FOR_IN
80576: IFFALSE 80645
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80578: LD_ADDR_VAR 0 6
80582: PUSH
80583: LD_VAR 0 1
80587: PPUSH
80588: LD_VAR 0 4
80592: PUSH
80593: LD_INT 1
80595: ARRAY
80596: PPUSH
80597: LD_VAR 0 4
80601: PUSH
80602: LD_INT 2
80604: ARRAY
80605: PPUSH
80606: CALL_OW 297
80610: ST_TO_ADDR
// if tmpDist < dist then
80611: LD_VAR 0 6
80615: PUSH
80616: LD_VAR 0 5
80620: LESS
80621: IFFALSE 80643
// begin result := i ;
80623: LD_ADDR_VAR 0 3
80627: PUSH
80628: LD_VAR 0 4
80632: ST_TO_ADDR
// dist := tmpDist ;
80633: LD_ADDR_VAR 0 5
80637: PUSH
80638: LD_VAR 0 6
80642: ST_TO_ADDR
// end ; end ;
80643: GO 80575
80645: POP
80646: POP
// end ;
80647: LD_VAR 0 3
80651: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80652: LD_INT 0
80654: PPUSH
// uc_side := side ;
80655: LD_ADDR_OWVAR 20
80659: PUSH
80660: LD_VAR 0 1
80664: ST_TO_ADDR
// uc_nation := 3 ;
80665: LD_ADDR_OWVAR 21
80669: PUSH
80670: LD_INT 3
80672: ST_TO_ADDR
// vc_chassis := 25 ;
80673: LD_ADDR_OWVAR 37
80677: PUSH
80678: LD_INT 25
80680: ST_TO_ADDR
// vc_engine := engine_siberite ;
80681: LD_ADDR_OWVAR 39
80685: PUSH
80686: LD_INT 3
80688: ST_TO_ADDR
// vc_control := control_computer ;
80689: LD_ADDR_OWVAR 38
80693: PUSH
80694: LD_INT 3
80696: ST_TO_ADDR
// vc_weapon := 59 ;
80697: LD_ADDR_OWVAR 40
80701: PUSH
80702: LD_INT 59
80704: ST_TO_ADDR
// result := CreateVehicle ;
80705: LD_ADDR_VAR 0 5
80709: PUSH
80710: CALL_OW 45
80714: ST_TO_ADDR
// SetDir ( result , d ) ;
80715: LD_VAR 0 5
80719: PPUSH
80720: LD_VAR 0 4
80724: PPUSH
80725: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80729: LD_VAR 0 5
80733: PPUSH
80734: LD_VAR 0 2
80738: PPUSH
80739: LD_VAR 0 3
80743: PPUSH
80744: LD_INT 0
80746: PPUSH
80747: CALL_OW 48
// end ;
80751: LD_VAR 0 5
80755: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80756: LD_INT 0
80758: PPUSH
80759: PPUSH
80760: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80761: LD_ADDR_VAR 0 2
80765: PUSH
80766: LD_INT 0
80768: PUSH
80769: LD_INT 0
80771: PUSH
80772: LD_INT 0
80774: PUSH
80775: LD_INT 0
80777: PUSH
80778: EMPTY
80779: LIST
80780: LIST
80781: LIST
80782: LIST
80783: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80784: LD_VAR 0 1
80788: NOT
80789: PUSH
80790: LD_VAR 0 1
80794: PPUSH
80795: CALL_OW 264
80799: PUSH
80800: LD_INT 12
80802: PUSH
80803: LD_INT 51
80805: PUSH
80806: LD_INT 32
80808: PUSH
80809: LD_INT 89
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: LIST
80816: LIST
80817: IN
80818: NOT
80819: OR
80820: IFFALSE 80824
// exit ;
80822: GO 80922
// for i := 1 to 3 do
80824: LD_ADDR_VAR 0 3
80828: PUSH
80829: DOUBLE
80830: LD_INT 1
80832: DEC
80833: ST_TO_ADDR
80834: LD_INT 3
80836: PUSH
80837: FOR_TO
80838: IFFALSE 80920
// begin tmp := GetCargo ( cargo , i ) ;
80840: LD_ADDR_VAR 0 4
80844: PUSH
80845: LD_VAR 0 1
80849: PPUSH
80850: LD_VAR 0 3
80854: PPUSH
80855: CALL_OW 289
80859: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80860: LD_ADDR_VAR 0 2
80864: PUSH
80865: LD_VAR 0 2
80869: PPUSH
80870: LD_VAR 0 3
80874: PPUSH
80875: LD_VAR 0 4
80879: PPUSH
80880: CALL_OW 1
80884: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80885: LD_ADDR_VAR 0 2
80889: PUSH
80890: LD_VAR 0 2
80894: PPUSH
80895: LD_INT 4
80897: PPUSH
80898: LD_VAR 0 2
80902: PUSH
80903: LD_INT 4
80905: ARRAY
80906: PUSH
80907: LD_VAR 0 4
80911: PLUS
80912: PPUSH
80913: CALL_OW 1
80917: ST_TO_ADDR
// end ;
80918: GO 80837
80920: POP
80921: POP
// end ;
80922: LD_VAR 0 2
80926: RET
// export function Length ( array ) ; begin
80927: LD_INT 0
80929: PPUSH
// result := array + 0 ;
80930: LD_ADDR_VAR 0 2
80934: PUSH
80935: LD_VAR 0 1
80939: PUSH
80940: LD_INT 0
80942: PLUS
80943: ST_TO_ADDR
// end ;
80944: LD_VAR 0 2
80948: RET
// export function PrepareArray ( array ) ; begin
80949: LD_INT 0
80951: PPUSH
// result := array diff 0 ;
80952: LD_ADDR_VAR 0 2
80956: PUSH
80957: LD_VAR 0 1
80961: PUSH
80962: LD_INT 0
80964: DIFF
80965: ST_TO_ADDR
// if not result [ 1 ] then
80966: LD_VAR 0 2
80970: PUSH
80971: LD_INT 1
80973: ARRAY
80974: NOT
80975: IFFALSE 80995
// result := Delete ( result , 1 ) ;
80977: LD_ADDR_VAR 0 2
80981: PUSH
80982: LD_VAR 0 2
80986: PPUSH
80987: LD_INT 1
80989: PPUSH
80990: CALL_OW 3
80994: ST_TO_ADDR
// end ;
80995: LD_VAR 0 2
80999: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81000: LD_INT 0
81002: PPUSH
81003: PPUSH
81004: PPUSH
81005: PPUSH
// sibRocketRange := 25 ;
81006: LD_ADDR_VAR 0 6
81010: PUSH
81011: LD_INT 25
81013: ST_TO_ADDR
// result := false ;
81014: LD_ADDR_VAR 0 4
81018: PUSH
81019: LD_INT 0
81021: ST_TO_ADDR
// for i := 0 to 5 do
81022: LD_ADDR_VAR 0 5
81026: PUSH
81027: DOUBLE
81028: LD_INT 0
81030: DEC
81031: ST_TO_ADDR
81032: LD_INT 5
81034: PUSH
81035: FOR_TO
81036: IFFALSE 81103
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81038: LD_VAR 0 1
81042: PPUSH
81043: LD_VAR 0 5
81047: PPUSH
81048: LD_VAR 0 6
81052: PPUSH
81053: CALL_OW 272
81057: PPUSH
81058: LD_VAR 0 2
81062: PPUSH
81063: LD_VAR 0 5
81067: PPUSH
81068: LD_VAR 0 6
81072: PPUSH
81073: CALL_OW 273
81077: PPUSH
81078: LD_VAR 0 3
81082: PPUSH
81083: CALL_OW 309
81087: IFFALSE 81101
// begin result := true ;
81089: LD_ADDR_VAR 0 4
81093: PUSH
81094: LD_INT 1
81096: ST_TO_ADDR
// exit ;
81097: POP
81098: POP
81099: GO 81105
// end ;
81101: GO 81035
81103: POP
81104: POP
// end ;
81105: LD_VAR 0 4
81109: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81110: LD_INT 0
81112: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81113: LD_VAR 0 1
81117: PPUSH
81118: LD_VAR 0 2
81122: PPUSH
81123: LD_INT 0
81125: PPUSH
81126: LD_INT 0
81128: PPUSH
81129: LD_INT 1
81131: PPUSH
81132: LD_INT 0
81134: PPUSH
81135: CALL_OW 587
// end ; end_of_file
81139: LD_VAR 0 3
81143: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81144: LD_VAR 0 1
81148: PUSH
81149: LD_INT 200
81151: DOUBLE
81152: GREATEREQUAL
81153: IFFALSE 81161
81155: LD_INT 299
81157: DOUBLE
81158: LESSEQUAL
81159: IFTRUE 81163
81161: GO 81195
81163: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81164: LD_VAR 0 1
81168: PPUSH
81169: LD_VAR 0 2
81173: PPUSH
81174: LD_VAR 0 3
81178: PPUSH
81179: LD_VAR 0 4
81183: PPUSH
81184: LD_VAR 0 5
81188: PPUSH
81189: CALL 35810 0 5
81193: GO 81272
81195: LD_INT 300
81197: DOUBLE
81198: GREATEREQUAL
81199: IFFALSE 81207
81201: LD_INT 399
81203: DOUBLE
81204: LESSEQUAL
81205: IFTRUE 81209
81207: GO 81271
81209: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81210: LD_VAR 0 1
81214: PPUSH
81215: LD_VAR 0 2
81219: PPUSH
81220: LD_VAR 0 3
81224: PPUSH
81225: LD_VAR 0 4
81229: PPUSH
81230: LD_VAR 0 5
81234: PPUSH
81235: LD_VAR 0 6
81239: PPUSH
81240: LD_VAR 0 7
81244: PPUSH
81245: LD_VAR 0 8
81249: PPUSH
81250: LD_VAR 0 9
81254: PPUSH
81255: LD_VAR 0 10
81259: PPUSH
81260: LD_VAR 0 11
81264: PPUSH
81265: CALL 32143 0 11
81269: GO 81272
81271: POP
// end ;
81272: PPOPN 11
81274: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81275: LD_VAR 0 1
81279: PPUSH
81280: LD_VAR 0 2
81284: PPUSH
81285: LD_VAR 0 3
81289: PPUSH
81290: LD_VAR 0 4
81294: PPUSH
81295: LD_VAR 0 5
81299: PPUSH
81300: CALL 35546 0 5
// end ; end_of_file
81304: PPOPN 5
81306: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81307: LD_VAR 0 1
81311: PPUSH
81312: LD_VAR 0 2
81316: PPUSH
81317: LD_VAR 0 3
81321: PPUSH
81322: LD_VAR 0 4
81326: PPUSH
81327: LD_VAR 0 5
81331: PPUSH
81332: LD_VAR 0 6
81336: PPUSH
81337: CALL 19795 0 6
// end ;
81341: PPOPN 6
81343: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81344: LD_INT 0
81346: PPUSH
// begin if not units then
81347: LD_VAR 0 1
81351: NOT
81352: IFFALSE 81356
// exit ;
81354: GO 81356
// end ;
81356: PPOPN 7
81358: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81359: CALL 19699 0 0
// end ;
81363: PPOPN 1
81365: END
