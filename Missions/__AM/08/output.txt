// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9054 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 75434 0 9
// Action ;
  79: CALL 15422 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 41066 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 41066 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 41066 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 41066 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 41066 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 41066 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 41066 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 78757 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 41066 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 41066 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 78757 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 41066 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 41066 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 78757 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 41066 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 78757 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 41066 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 78757 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 41066 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 78757 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 41066 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 78757 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 41066 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 78757 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 78757 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 49374 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 76391 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 54502 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 54502 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 54502 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 54502 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 41066 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 41066 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 41066 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 41066 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 41066 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 41066 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 41066 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 41066 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 41066 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 41066 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 78757 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 41066 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 41066 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 41066 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 41066 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 41066 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 41066 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 41066 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 41066 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 41066 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 41066 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 78757 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 78757 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 41066 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9040
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8744
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8744
// begin ComMoveUnit ( i , amDepot ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_EXP 31
8739: PPUSH
8740: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8744: LD_VAR 0 2
8748: PPUSH
8749: CALL_OW 256
8753: PUSH
8754: LD_INT 600
8756: GREATEREQUAL
8757: PUSH
8758: LD_VAR 0 2
8762: PPUSH
8763: CALL_OW 110
8767: NOT
8768: AND
8769: IFFALSE 8795
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: LD_VAR 0 2
8785: PPUSH
8786: CALL_OW 74
8790: PPUSH
8791: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8795: LD_VAR 0 2
8799: PPUSH
8800: CALL_OW 256
8804: PUSH
8805: LD_INT 600
8807: LESS
8808: PUSH
8809: LD_VAR 0 2
8813: PPUSH
8814: CALL_OW 110
8818: NOT
8819: AND
8820: IFFALSE 8896
// begin SetTag ( i , 1 ) ;
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_INT 1
8829: PPUSH
8830: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8834: LD_ADDR_VAR 0 6
8838: PUSH
8839: LD_VAR 0 2
8843: PPUSH
8844: LD_VAR 0 5
8848: PPUSH
8849: CALL 82101 0 2
8853: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 6
8863: PUSH
8864: LD_INT 1
8866: ARRAY
8867: PPUSH
8868: LD_VAR 0 6
8872: PUSH
8873: LD_INT 2
8875: ARRAY
8876: PPUSH
8877: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8881: LD_VAR 0 2
8885: PPUSH
8886: LD_INT 40
8888: PPUSH
8889: LD_INT 49
8891: PPUSH
8892: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 110
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PPUSH
8915: LD_INT 40
8917: PPUSH
8918: LD_INT 49
8920: PPUSH
8921: CALL_OW 297
8925: PUSH
8926: LD_INT 9
8928: LESS
8929: AND
8930: PUSH
8931: LD_VAR 0 3
8935: AND
8936: IFFALSE 9038
// begin ComExitVehicle ( tmp ) ;
8938: LD_VAR 0 3
8942: PPUSH
8943: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 2
8956: PPUSH
8957: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8961: LD_INT 35
8963: PPUSH
8964: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 256
8977: PUSH
8978: LD_INT 1000
8980: EQUAL
8981: IFFALSE 8961
// ComEnterUnit ( tmp , i ) ;
8983: LD_VAR 0 3
8987: PPUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 120
// if GetFuel ( i ) <= 30 then
8997: LD_VAR 0 2
9001: PPUSH
9002: CALL_OW 261
9006: PUSH
9007: LD_INT 30
9009: LESSEQUAL
9010: IFFALSE 9026
// SetTag ( i , 2 ) else
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_INT 2
9019: PPUSH
9020: CALL_OW 109
9024: GO 9038
// SetTag ( i , 0 ) ;
9026: LD_VAR 0 2
9030: PPUSH
9031: LD_INT 0
9033: PPUSH
9034: CALL_OW 109
// end ; end ;
9038: GO 8615
9040: POP
9041: POP
// until not filter ;
9042: LD_VAR 0 7
9046: NOT
9047: IFFALSE 8598
// end ; end_of_file
9049: LD_VAR 0 1
9053: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9054: LD_INT 0
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
// uc_side := 3 ;
9061: LD_ADDR_OWVAR 20
9065: PUSH
9066: LD_INT 3
9068: ST_TO_ADDR
// uc_nation := 3 ;
9069: LD_ADDR_OWVAR 21
9073: PUSH
9074: LD_INT 3
9076: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9077: LD_ADDR_EXP 33
9081: PUSH
9082: LD_INT 8
9084: PUSH
9085: LD_INT 11
9087: PUSH
9088: LD_INT 14
9090: PUSH
9091: LD_INT 17
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: LD_OWVAR 67
9104: ARRAY
9105: ST_TO_ADDR
// ruMobile := [ ] ;
9106: LD_ADDR_EXP 34
9110: PUSH
9111: EMPTY
9112: ST_TO_ADDR
// ruBuildList := [ ] ;
9113: LD_ADDR_EXP 35
9117: PUSH
9118: EMPTY
9119: ST_TO_ADDR
// russianAttackers := [ ] ;
9120: LD_ADDR_EXP 36
9124: PUSH
9125: EMPTY
9126: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9127: LD_ADDR_VAR 0 5
9131: PUSH
9132: LD_INT 43
9134: PUSH
9135: LD_INT 44
9137: PUSH
9138: LD_INT 46
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// if Difficulty > 2 then
9146: LD_OWVAR 67
9150: PUSH
9151: LD_INT 2
9153: GREATER
9154: IFFALSE 9177
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9156: LD_ADDR_VAR 0 5
9160: PUSH
9161: LD_VAR 0 5
9165: PUSH
9166: LD_INT 45
9168: PUSH
9169: LD_INT 46
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ADD
9176: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9177: LD_ADDR_EXP 32
9181: PUSH
9182: LD_STRING Borodin
9184: PPUSH
9185: CALL_OW 25
9189: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9190: LD_EXP 32
9194: PPUSH
9195: LD_INT 28
9197: PPUSH
9198: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9202: LD_INT 28
9204: PPUSH
9205: CALL_OW 274
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 3000
9215: PUSH
9216: LD_INT 4000
9218: PUSH
9219: LD_INT 5000
9221: PUSH
9222: LD_INT 6000
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: LD_OWVAR 67
9235: ARRAY
9236: PPUSH
9237: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9241: LD_INT 28
9243: PPUSH
9244: CALL_OW 274
9248: PPUSH
9249: LD_INT 2
9251: PPUSH
9252: LD_INT 1000
9254: PPUSH
9255: CALL_OW 277
// if Difficulty > 2 then
9259: LD_OWVAR 67
9263: PUSH
9264: LD_INT 2
9266: GREATER
9267: IFFALSE 9391
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9269: LD_ADDR_VAR 0 4
9273: PUSH
9274: LD_INT 99
9276: PUSH
9277: LD_INT 130
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 121
9290: PUSH
9291: LD_INT 127
9293: PUSH
9294: LD_INT 4
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 117
9304: PUSH
9305: LD_INT 121
9307: PUSH
9308: LD_INT 4
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: ST_TO_ADDR
// for i in tmp do
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_VAR 0 4
9330: PUSH
9331: FOR_IN
9332: IFFALSE 9389
// begin bc_type := b_turret ;
9334: LD_ADDR_OWVAR 42
9338: PUSH
9339: LD_INT 33
9341: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9342: LD_ADDR_OWVAR 43
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: LD_OWVAR 67
9354: PLUS
9355: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9356: LD_VAR 0 2
9360: PUSH
9361: LD_INT 1
9363: ARRAY
9364: PPUSH
9365: LD_VAR 0 2
9369: PUSH
9370: LD_INT 2
9372: ARRAY
9373: PPUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_INT 3
9381: ARRAY
9382: PPUSH
9383: CALL_OW 47
// end ;
9387: GO 9331
9389: POP
9390: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: PUSH
9425: FOR_IN
9426: IFFALSE 9448
// SetBLevel ( i , 2 + Difficulty ) ;
9428: LD_VAR 0 2
9432: PPUSH
9433: LD_INT 2
9435: PUSH
9436: LD_OWVAR 67
9440: PLUS
9441: PPUSH
9442: CALL_OW 241
9446: GO 9425
9448: POP
9449: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9450: LD_ADDR_VAR 0 4
9454: PUSH
9455: LD_INT 22
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: LD_INT 30
9470: PUSH
9471: LD_INT 32
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 33
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 69
9501: ST_TO_ADDR
// for i in tmp do
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_VAR 0 4
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9545
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_VAR 0 5
9524: PUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 5
9532: PPUSH
9533: CALL_OW 12
9537: ARRAY
9538: PPUSH
9539: CALL_OW 431
9543: GO 9512
9545: POP
9546: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9547: LD_ADDR_VAR 0 2
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 32
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PPUSH
9576: CALL_OW 69
9580: PUSH
9581: FOR_IN
9582: IFFALSE 9631
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9584: LD_INT 0
9586: PPUSH
9587: LD_INT 5
9589: PUSH
9590: LD_INT 6
9592: PUSH
9593: LD_INT 7
9595: PUSH
9596: LD_INT 8
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: LD_OWVAR 67
9609: ARRAY
9610: PPUSH
9611: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9615: CALL_OW 44
9619: PPUSH
9620: LD_VAR 0 2
9624: PPUSH
9625: CALL_OW 52
// end ;
9629: GO 9581
9631: POP
9632: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_INT 22
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: PUSH
9667: FOR_IN
9668: IFFALSE 9758
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: LD_INT 3
9685: PUSH
9686: LD_INT 4
9688: PUSH
9689: LD_INT 5
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_OWVAR 67
9702: ARRAY
9703: PUSH
9704: FOR_TO
9705: IFFALSE 9754
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9707: LD_INT 0
9709: PPUSH
9710: LD_INT 5
9712: PUSH
9713: LD_INT 6
9715: PUSH
9716: LD_INT 7
9718: PUSH
9719: LD_INT 8
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_OWVAR 67
9732: ARRAY
9733: PPUSH
9734: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9738: CALL_OW 44
9742: PPUSH
9743: LD_VAR 0 2
9747: PPUSH
9748: CALL_OW 52
// end ;
9752: GO 9704
9754: POP
9755: POP
// end ;
9756: GO 9667
9758: POP
9759: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9760: LD_ADDR_VAR 0 2
9764: PUSH
9765: DOUBLE
9766: LD_INT 1
9768: DEC
9769: ST_TO_ADDR
9770: LD_INT 3
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 5
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_OWVAR 67
9792: ARRAY
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9842
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9797: LD_INT 0
9799: PPUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: LD_OWVAR 67
9822: ARRAY
9823: PPUSH
9824: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9828: CALL_OW 44
9832: PPUSH
9833: LD_INT 28
9835: PPUSH
9836: CALL_OW 52
// end ;
9840: GO 9794
9842: POP
9843: POP
// for i := 1 to 2 do
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: DOUBLE
9850: LD_INT 1
9852: DEC
9853: ST_TO_ADDR
9854: LD_INT 2
9856: PUSH
9857: FOR_TO
9858: IFFALSE 9892
// begin PrepareScientist ( false , 6 ) ;
9860: LD_INT 0
9862: PPUSH
9863: LD_INT 6
9865: PPUSH
9866: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9870: CALL_OW 44
9874: PPUSH
9875: LD_INT 81
9877: PPUSH
9878: LD_INT 93
9880: PPUSH
9881: CALL_OW 428
9885: PPUSH
9886: CALL_OW 52
// end ;
9890: GO 9857
9892: POP
9893: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9894: LD_INT 22
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: LD_INT 3
9902: PPUSH
9903: LD_INT 51
9905: PPUSH
9906: LD_INT 100
9908: PPUSH
9909: CALL 45906 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9913: CALL_OW 45
9917: PPUSH
9918: LD_INT 91
9920: PPUSH
9921: LD_INT 94
9923: PPUSH
9924: LD_INT 3
9926: PPUSH
9927: LD_INT 0
9929: PPUSH
9930: CALL_OW 50
// for i := 1 to 2 do
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: DOUBLE
9940: LD_INT 1
9942: DEC
9943: ST_TO_ADDR
9944: LD_INT 2
9946: PUSH
9947: FOR_TO
9948: IFFALSE 9992
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9950: LD_INT 22
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: LD_INT 3
9958: PPUSH
9959: LD_INT 52
9961: PPUSH
9962: LD_INT 100
9964: PPUSH
9965: CALL 45906 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9969: CALL_OW 45
9973: PPUSH
9974: LD_INT 91
9976: PPUSH
9977: LD_INT 94
9979: PPUSH
9980: LD_INT 4
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: CALL_OW 50
// end ;
9990: GO 9947
9992: POP
9993: POP
// end ;
9994: LD_VAR 0 1
9998: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
// uc_side := 3 ;
10006: LD_ADDR_OWVAR 20
10010: PUSH
10011: LD_INT 3
10013: ST_TO_ADDR
// uc_nation := 3 ;
10014: LD_ADDR_OWVAR 21
10018: PUSH
10019: LD_INT 3
10021: ST_TO_ADDR
// for i := 1 to 4 do
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: DOUBLE
10028: LD_INT 1
10030: DEC
10031: ST_TO_ADDR
10032: LD_INT 4
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10163
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10038: LD_INT 22
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: LD_INT 42
10049: PUSH
10050: LD_INT 43
10052: PUSH
10053: LD_INT 44
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 1
10063: PPUSH
10064: LD_INT 3
10066: PPUSH
10067: CALL_OW 12
10071: ARRAY
10072: PPUSH
10073: LD_INT 40
10075: PPUSH
10076: CALL 45906 0 5
// veh := CreateVehicle ;
10080: LD_ADDR_VAR 0 4
10084: PUSH
10085: CALL_OW 45
10089: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10090: LD_VAR 0 4
10094: PPUSH
10095: LD_INT 5
10097: PPUSH
10098: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_INT 7
10109: PPUSH
10110: LD_INT 0
10112: PPUSH
10113: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 5
10122: PPUSH
10123: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10127: CALL_OW 44
10131: PPUSH
10132: LD_VAR 0 4
10136: PPUSH
10137: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10141: LD_ADDR_VAR 0 5
10145: PUSH
10146: LD_VAR 0 5
10150: PPUSH
10151: LD_VAR 0 4
10155: PPUSH
10156: CALL 78757 0 2
10160: ST_TO_ADDR
// end ;
10161: GO 10035
10163: POP
10164: POP
// for i := 1 to 3 do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: DOUBLE
10171: LD_INT 1
10173: DEC
10174: ST_TO_ADDR
10175: LD_INT 3
10177: PUSH
10178: FOR_TO
10179: IFFALSE 10306
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10181: LD_INT 22
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: LD_INT 42
10192: PUSH
10193: LD_INT 43
10195: PUSH
10196: LD_INT 44
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 1
10206: PPUSH
10207: LD_INT 3
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 40
10218: PPUSH
10219: CALL 45906 0 5
// veh := CreateVehicle ;
10223: LD_ADDR_VAR 0 4
10227: PUSH
10228: CALL_OW 45
10232: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10233: LD_VAR 0 4
10237: PPUSH
10238: LD_INT 5
10240: PPUSH
10241: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10245: LD_VAR 0 4
10249: PPUSH
10250: LD_INT 8
10252: PPUSH
10253: LD_INT 0
10255: PPUSH
10256: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10260: LD_INT 0
10262: PPUSH
10263: LD_INT 5
10265: PPUSH
10266: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10270: CALL_OW 44
10274: PPUSH
10275: LD_VAR 0 4
10279: PPUSH
10280: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10284: LD_ADDR_VAR 0 5
10288: PUSH
10289: LD_VAR 0 5
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: CALL 78757 0 2
10303: ST_TO_ADDR
// end ;
10304: GO 10178
10306: POP
10307: POP
// for i := 1 to 2 do
10308: LD_ADDR_VAR 0 2
10312: PUSH
10313: DOUBLE
10314: LD_INT 1
10316: DEC
10317: ST_TO_ADDR
10318: LD_INT 2
10320: PUSH
10321: FOR_TO
10322: IFFALSE 10381
// begin PrepareSoldier ( false , 5 ) ;
10324: LD_INT 0
10326: PPUSH
10327: LD_INT 5
10329: PPUSH
10330: CALL_OW 381
// un := CreateHuman ;
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: CALL_OW 44
10343: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10344: LD_VAR 0 3
10348: PPUSH
10349: LD_INT 8
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10359: LD_ADDR_VAR 0 5
10363: PUSH
10364: LD_VAR 0 5
10368: PPUSH
10369: LD_VAR 0 3
10373: PPUSH
10374: CALL 78757 0 2
10378: ST_TO_ADDR
// end ;
10379: GO 10321
10381: POP
10382: POP
// for i in tmp do
10383: LD_ADDR_VAR 0 2
10387: PUSH
10388: LD_VAR 0 5
10392: PUSH
10393: FOR_IN
10394: IFFALSE 10413
// ComAgressiveMove ( i , 51 , 16 ) ;
10396: LD_VAR 0 2
10400: PPUSH
10401: LD_INT 51
10403: PPUSH
10404: LD_INT 16
10406: PPUSH
10407: CALL_OW 114
10411: GO 10393
10413: POP
10414: POP
// end ;
10415: LD_VAR 0 1
10419: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10420: LD_EXP 34
10424: IFFALSE 10999
10426: GO 10428
10428: DISABLE
10429: LD_INT 0
10431: PPUSH
10432: PPUSH
10433: PPUSH
// begin enable ;
10434: ENABLE
// if not ruMobile then
10435: LD_EXP 34
10439: NOT
10440: IFFALSE 10444
// exit ;
10442: GO 10999
// for i in ruMobile do
10444: LD_ADDR_VAR 0 1
10448: PUSH
10449: LD_EXP 34
10453: PUSH
10454: FOR_IN
10455: IFFALSE 10997
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10457: LD_VAR 0 1
10461: PPUSH
10462: CALL_OW 302
10466: NOT
10467: PUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 255
10477: PUSH
10478: LD_INT 3
10480: NONEQUAL
10481: OR
10482: IFFALSE 10502
// begin ruMobile := ruMobile diff i ;
10484: LD_ADDR_EXP 34
10488: PUSH
10489: LD_EXP 34
10493: PUSH
10494: LD_VAR 0 1
10498: DIFF
10499: ST_TO_ADDR
// continue ;
10500: GO 10454
// end ; if GetTag ( i ) = 300 then
10502: LD_VAR 0 1
10506: PPUSH
10507: CALL_OW 110
10511: PUSH
10512: LD_INT 300
10514: EQUAL
10515: IFFALSE 10630
// begin if GetFuel ( i ) < 50 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 261
10526: PUSH
10527: LD_INT 50
10529: LESS
10530: IFFALSE 10589
// begin ComMoveXY ( i , 93 , 100 ) ;
10532: LD_VAR 0 1
10536: PPUSH
10537: LD_INT 93
10539: PPUSH
10540: LD_INT 100
10542: PPUSH
10543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10547: LD_INT 35
10549: PPUSH
10550: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10554: LD_VAR 0 1
10558: PPUSH
10559: LD_INT 93
10561: PPUSH
10562: LD_INT 100
10564: PPUSH
10565: CALL_OW 297
10569: PUSH
10570: LD_INT 4
10572: LESS
10573: IFFALSE 10547
// SetFuel ( i , 100 ) ;
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_INT 100
10582: PPUSH
10583: CALL_OW 240
// end else
10587: GO 10630
// if not IsInArea ( i , ruParkingArea ) then
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 10
10596: PPUSH
10597: CALL_OW 308
10601: NOT
10602: IFFALSE 10618
// ComMoveToArea ( i , ruParkingArea ) else
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 113
10616: GO 10630
// SetTag ( i , 301 ) ;
10618: LD_VAR 0 1
10622: PPUSH
10623: LD_INT 301
10625: PPUSH
10626: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 110
10639: PUSH
10640: LD_INT 301
10642: EQUAL
10643: IFFALSE 10773
// begin if GetLives ( i ) < 1000 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 256
10654: PUSH
10655: LD_INT 1000
10657: LESS
10658: IFFALSE 10750
// begin if not IsDrivenBy ( i ) then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 311
10669: NOT
10670: IFFALSE 10674
// continue ;
10672: GO 10454
// mech := IsDrivenBy ( i ) ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 311
10688: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10689: LD_VAR 0 2
10693: PPUSH
10694: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10698: LD_VAR 0 2
10702: PPUSH
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10712: LD_INT 35
10714: PPUSH
10715: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 256
10728: PUSH
10729: LD_INT 1000
10731: EQUAL
10732: IFFALSE 10712
// ComEnterUnit ( mech , i ) ;
10734: LD_VAR 0 2
10738: PPUSH
10739: LD_VAR 0 1
10743: PPUSH
10744: CALL_OW 120
// end else
10748: GO 10773
// if IsDrivenBy ( i ) then
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 311
10759: IFFALSE 10773
// SetTag ( i , 0 ) ;
10761: LD_VAR 0 1
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 110
10782: PUSH
10783: LD_INT 300
10785: LESS
10786: IFFALSE 10995
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10788: LD_ADDR_VAR 0 3
10792: PUSH
10793: LD_INT 11
10795: PPUSH
10796: LD_INT 81
10798: PUSH
10799: LD_INT 3
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 70
10810: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 256
10820: PUSH
10821: LD_INT 650
10823: LESS
10824: IFFALSE 10849
// begin ComStop ( i ) ;
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 141
// SetTag ( i , 300 ) ;
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 300
10842: PPUSH
10843: CALL_OW 109
// continue ;
10847: GO 10454
// end ; if enemy then
10849: LD_VAR 0 3
10853: IFFALSE 10893
// begin if not HasTask ( i ) then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 314
10864: NOT
10865: IFFALSE 10891
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 74
10886: PPUSH
10887: CALL_OW 115
// end else
10891: GO 10995
// if ruMobile > 1 then
10893: LD_EXP 34
10897: PUSH
10898: LD_INT 1
10900: GREATER
10901: IFFALSE 10995
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10903: LD_ADDR_VAR 0 3
10907: PUSH
10908: LD_INT 81
10910: PUSH
10911: LD_INT 3
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 69
10922: ST_TO_ADDR
// if enemy then
10923: LD_VAR 0 3
10927: IFFALSE 10995
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10929: LD_VAR 0 1
10933: PPUSH
10934: LD_INT 116
10936: PUSH
10937: LD_INT 95
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 84
10946: PUSH
10947: LD_INT 68
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 58
10956: PUSH
10957: LD_INT 53
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 44
10966: PUSH
10967: LD_INT 35
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 45
10976: PUSH
10977: LD_INT 23
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL 81361 0 2
// end ; end ; end ;
10995: GO 10454
10997: POP
10998: POP
// end ;
10999: PPOPN 3
11001: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11002: LD_INT 3
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 32
11021: PUSH
11022: LD_INT 1
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PPUSH
11033: CALL_OW 69
11037: IFFALSE 11121
11039: GO 11041
11041: DISABLE
11042: LD_INT 0
11044: PPUSH
// begin enable ;
11045: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11046: LD_ADDR_VAR 0 1
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 32
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11119
// if GetFuel ( i ) < 3 then
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 261
11099: PUSH
11100: LD_INT 3
11102: LESS
11103: IFFALSE 11117
// SetFuel ( i , 3 ) ;
11105: LD_VAR 0 1
11109: PPUSH
11110: LD_INT 3
11112: PPUSH
11113: CALL_OW 240
11117: GO 11087
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11124: LD_INT 29
11126: PPUSH
11127: CALL_OW 302
11131: PUSH
11132: LD_INT 29
11134: PPUSH
11135: CALL_OW 461
11139: PUSH
11140: LD_INT 2
11142: EQUAL
11143: AND
11144: IFFALSE 11377
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
// begin enable ;
11153: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11154: LD_ADDR_VAR 0 1
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 23
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 1
11179: PPUSH
11180: LD_INT 4
11182: PPUSH
11183: CALL_OW 12
11187: ARRAY
11188: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11189: LD_ADDR_VAR 0 2
11193: PUSH
11194: LD_INT 42
11196: PUSH
11197: LD_INT 44
11199: PUSH
11200: LD_INT 43
11202: PUSH
11203: LD_INT 46
11205: PUSH
11206: LD_INT 45
11208: PUSH
11209: LD_INT 46
11211: PUSH
11212: LD_INT 45
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_OWVAR 67
11228: PUSH
11229: LD_INT 0
11231: PPUSH
11232: LD_INT 3
11234: PPUSH
11235: CALL_OW 12
11239: PLUS
11240: ARRAY
11241: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11242: LD_VAR 0 1
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: IN
11257: PUSH
11258: LD_VAR 0 2
11262: PUSH
11263: LD_INT 46
11265: EQUAL
11266: AND
11267: IFFALSE 11296
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11269: LD_ADDR_VAR 0 2
11273: PUSH
11274: LD_INT 44
11276: PUSH
11277: LD_INT 45
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: CALL_OW 12
11294: ARRAY
11295: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11296: LD_OWVAR 1
11300: PUSH
11301: LD_INT 31500
11303: PUSH
11304: LD_INT 25200
11306: PUSH
11307: LD_INT 21000
11309: PUSH
11310: LD_INT 18900
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: LD_OWVAR 67
11323: ARRAY
11324: LESS
11325: IFFALSE 11354
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 44
11334: PUSH
11335: LD_INT 43
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 1
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: CALL_OW 12
11352: ARRAY
11353: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11354: LD_INT 29
11356: PPUSH
11357: LD_VAR 0 1
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: LD_VAR 0 2
11372: PPUSH
11373: CALL_OW 185
// end ;
11377: PPOPN 2
11379: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11380: LD_INT 28
11382: PPUSH
11383: CALL_OW 302
11387: IFFALSE 12979
11389: GO 11391
11391: DISABLE
11392: LD_INT 0
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
// begin enable ;
11407: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 12
11415: PPUSH
11416: LD_INT 3
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 1000
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 3
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 70
11451: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_INT 3
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11486: LD_ADDR_VAR 0 6
11490: PUSH
11491: LD_INT 22
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 34
11503: PUSH
11504: LD_INT 52
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11520: LD_ADDR_VAR 0 8
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 3
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 69
11553: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11554: LD_ADDR_VAR 0 9
11558: PUSH
11559: LD_INT 81
11561: PPUSH
11562: LD_INT 93
11564: PPUSH
11565: CALL_OW 428
11569: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11570: LD_ADDR_VAR 0 10
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 32
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 50
11597: PUSH
11598: EMPTY
11599: LIST
11600: PUSH
11601: LD_INT 58
11603: PUSH
11604: EMPTY
11605: LIST
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 120
11612: PUSH
11613: LD_INT 701
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11636: LD_ADDR_VAR 0 12
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 30
11653: PUSH
11654: LD_INT 5
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 50
11663: PUSH
11664: EMPTY
11665: LIST
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: LD_INT 62
11672: PUSH
11673: EMPTY
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: ST_TO_ADDR
// if emptyTowers then
11691: LD_VAR 0 10
11695: IFFALSE 11956
// begin for i in emptyTowers do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_VAR 0 10
11706: PUSH
11707: FOR_IN
11708: IFFALSE 11952
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11710: LD_ADDR_VAR 0 11
11714: PUSH
11715: LD_INT 22
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 54
11730: PUSH
11731: EMPTY
11732: LIST
11733: PUSH
11734: LD_INT 95
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 50
11761: PUSH
11762: EMPTY
11763: LIST
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 120
11770: PUSH
11771: LD_INT 701
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: ST_TO_ADDR
// if not sol then
11794: LD_VAR 0 11
11798: NOT
11799: IFFALSE 11803
// break ;
11801: GO 11952
// for j in sol do
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: LD_VAR 0 11
11812: PUSH
11813: FOR_IN
11814: IFFALSE 11865
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 310
11825: PUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL_OW 310
11835: PPUSH
11836: CALL_OW 266
11840: PUSH
11841: LD_INT 32
11843: EQUAL
11844: AND
11845: IFFALSE 11863
// sol := sol diff j ;
11847: LD_ADDR_VAR 0 11
11851: PUSH
11852: LD_VAR 0 11
11856: PUSH
11857: LD_VAR 0 2
11861: DIFF
11862: ST_TO_ADDR
11863: GO 11813
11865: POP
11866: POP
// if not sol then
11867: LD_VAR 0 11
11871: NOT
11872: IFFALSE 11876
// break ;
11874: GO 11952
// if IsInUnit ( sol [ 1 ] ) then
11876: LD_VAR 0 11
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PPUSH
11885: CALL_OW 310
11889: IFFALSE 11904
// ComExit ( sol [ 1 ] ) ;
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL 79155 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11904: LD_VAR 0 11
11908: PUSH
11909: LD_INT 1
11911: ARRAY
11912: PPUSH
11913: LD_INT 701
11915: PPUSH
11916: CALL_OW 109
// SetTag ( i , 701 ) ;
11920: LD_VAR 0 1
11924: PPUSH
11925: LD_INT 701
11927: PPUSH
11928: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11932: LD_VAR 0 11
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 180
// end ;
11950: GO 11707
11952: POP
11953: POP
// end else
11954: GO 12202
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11956: LD_VAR 0 11
11960: PPUSH
11961: LD_INT 3
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: LD_INT 95
11972: PUSH
11973: LD_INT 12
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 72
11989: IFFALSE 12202
// begin if barracks then
11991: LD_VAR 0 12
11995: IFFALSE 12063
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
11997: LD_ADDR_VAR 0 1
12001: PUSH
12002: LD_VAR 0 11
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: LD_INT 95
12018: PUSH
12019: LD_INT 12
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 72
12035: PUSH
12036: FOR_IN
12037: IFFALSE 12059
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12039: LD_VAR 0 1
12043: PPUSH
12044: LD_VAR 0 12
12048: PUSH
12049: LD_INT 1
12051: ARRAY
12052: PPUSH
12053: CALL_OW 120
12057: GO 12036
12059: POP
12060: POP
// end else
12061: GO 12202
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12063: LD_INT 12
12065: PPUSH
12066: LD_INT 81
12068: PUSH
12069: LD_INT 3
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 70
12080: IFFALSE 12202
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_VAR 0 11
12091: PPUSH
12092: LD_INT 3
12094: PUSH
12095: LD_INT 54
12097: PUSH
12098: EMPTY
12099: LIST
12100: PUSH
12101: LD_INT 95
12103: PUSH
12104: LD_INT 12
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 72
12120: PUSH
12121: FOR_IN
12122: IFFALSE 12200
// begin SetTag ( i , 702 ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_INT 702
12131: PPUSH
12132: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12136: LD_ADDR_VAR 0 13
12140: PUSH
12141: LD_INT 12
12143: PPUSH
12144: LD_INT 81
12146: PUSH
12147: LD_INT 3
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 70
12158: PPUSH
12159: LD_VAR 0 1
12163: PPUSH
12164: CALL_OW 74
12168: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12169: LD_VAR 0 1
12173: PPUSH
12174: LD_VAR 0 13
12178: PPUSH
12179: CALL_OW 250
12183: PPUSH
12184: LD_VAR 0 13
12188: PPUSH
12189: CALL_OW 251
12193: PPUSH
12194: CALL_OW 114
// end ;
12198: GO 12121
12200: POP
12201: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_INT 3
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 95
12219: PUSH
12220: LD_INT 11
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 50
12229: PUSH
12230: EMPTY
12231: LIST
12232: PUSH
12233: LD_INT 25
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 120
12245: PUSH
12246: LD_INT 702
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// if tmp then
12265: LD_VAR 0 3
12269: IFFALSE 12315
// for i in tmp do
12271: LD_ADDR_VAR 0 1
12275: PUSH
12276: LD_VAR 0 3
12280: PUSH
12281: FOR_IN
12282: IFFALSE 12313
// begin ComMoveXY ( i , 90 , 94 ) ;
12284: LD_VAR 0 1
12288: PPUSH
12289: LD_INT 90
12291: PPUSH
12292: LD_INT 94
12294: PPUSH
12295: CALL_OW 111
// SetTag ( i , 0 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 0
12306: PPUSH
12307: CALL_OW 109
// end ;
12311: GO 12281
12313: POP
12314: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12315: LD_VAR 0 8
12319: PUSH
12320: LD_VAR 0 5
12324: PPUSH
12325: LD_INT 120
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: AND
12340: IFFALSE 12353
// ComExitAll ( sci ) else
12342: LD_VAR 0 8
12346: PPUSH
12347: CALL 79238 0 1
12351: GO 12426
// if sci then
12353: LD_VAR 0 8
12357: IFFALSE 12426
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12359: LD_VAR 0 8
12363: PPUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 54
12369: PUSH
12370: EMPTY
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 72
12381: PUSH
12382: LD_VAR 0 9
12386: PPUSH
12387: CALL_OW 302
12391: AND
12392: IFFALSE 12426
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12394: LD_VAR 0 8
12398: PPUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 54
12404: PUSH
12405: EMPTY
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 72
12416: PPUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12426: LD_VAR 0 6
12430: PPUSH
12431: LD_INT 50
12433: PUSH
12434: EMPTY
12435: LIST
12436: PPUSH
12437: CALL_OW 72
12441: PUSH
12442: LD_VAR 0 4
12446: AND
12447: IFFALSE 12478
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12449: LD_VAR 0 6
12453: PPUSH
12454: LD_INT 50
12456: PUSH
12457: EMPTY
12458: LIST
12459: PPUSH
12460: CALL_OW 72
12464: PPUSH
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 130
// if eng then
12478: LD_VAR 0 5
12482: IFFALSE 12979
// begin for i in eng do
12484: LD_ADDR_VAR 0 1
12488: PUSH
12489: LD_VAR 0 5
12493: PUSH
12494: FOR_IN
12495: IFFALSE 12977
// begin tag := GetTag ( i ) ;
12497: LD_ADDR_VAR 0 7
12501: PUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 110
12511: ST_TO_ADDR
// case tag of 0 :
12512: LD_VAR 0 7
12516: PUSH
12517: LD_INT 0
12519: DOUBLE
12520: EQUAL
12521: IFTRUE 12525
12523: GO 12736
12525: POP
// begin if b then
12526: LD_VAR 0 4
12530: IFFALSE 12546
// begin SetTag ( i , 1 ) ;
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 109
// continue ;
12544: GO 12494
// end ; if not ruBuildList then
12546: LD_EXP 35
12550: NOT
12551: IFFALSE 12567
// ComEnterUnit ( i , ruDep ) else
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_INT 28
12560: PPUSH
12561: CALL_OW 120
12565: GO 12734
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12567: LD_INT 11
12569: PPUSH
12570: LD_INT 81
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 70
12584: PUSH
12585: LD_INT 0
12587: EQUAL
12588: PUSH
12589: LD_INT 28
12591: PPUSH
12592: LD_EXP 35
12596: PUSH
12597: LD_INT 1
12599: ARRAY
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PPUSH
12605: LD_EXP 35
12609: PUSH
12610: LD_INT 1
12612: ARRAY
12613: PUSH
12614: LD_INT 2
12616: ARRAY
12617: PPUSH
12618: LD_EXP 35
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PUSH
12627: LD_INT 3
12629: ARRAY
12630: PPUSH
12631: LD_EXP 35
12635: PUSH
12636: LD_INT 1
12638: ARRAY
12639: PUSH
12640: LD_INT 4
12642: ARRAY
12643: PPUSH
12644: CALL 54502 0 5
12648: AND
12649: IFFALSE 12734
// begin if IsInUnit ( i ) then
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 310
12660: IFFALSE 12673
// ComExitBuilding ( i ) else
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 122
12671: GO 12734
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12673: LD_VAR 0 1
12677: PPUSH
12678: LD_EXP 35
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PUSH
12687: LD_INT 1
12689: ARRAY
12690: PPUSH
12691: LD_EXP 35
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: PUSH
12700: LD_INT 2
12702: ARRAY
12703: PPUSH
12704: LD_EXP 35
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PUSH
12713: LD_INT 3
12715: ARRAY
12716: PPUSH
12717: LD_EXP 35
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PUSH
12726: LD_INT 4
12728: ARRAY
12729: PPUSH
12730: CALL_OW 145
// end ; end ; 1 :
12734: GO 12933
12736: LD_INT 1
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12847
12744: POP
// begin if not b then
12745: LD_VAR 0 4
12749: NOT
12750: IFFALSE 12766
// begin SetTag ( i , 0 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 0
12759: PPUSH
12760: CALL_OW 109
// continue ;
12764: GO 12494
// end ; if IsInUnit ( i ) then
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 310
12775: IFFALSE 12786
// ComExitBuilding ( i ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL_OW 122
// if GetLives ( i ) < 650 then
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 256
12795: PUSH
12796: LD_INT 650
12798: LESS
12799: IFFALSE 12815
// begin SetTag ( i , 2 ) ;
12801: LD_VAR 0 1
12805: PPUSH
12806: LD_INT 2
12808: PPUSH
12809: CALL_OW 109
// continue ;
12813: GO 12494
// end ; if b then
12815: LD_VAR 0 4
12819: IFFALSE 12845
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 74
12840: PPUSH
12841: CALL_OW 130
// end ; 2 :
12845: GO 12933
12847: LD_INT 2
12849: DOUBLE
12850: EQUAL
12851: IFTRUE 12855
12853: GO 12932
12855: POP
// begin if GetLives ( i ) = 1000 then
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 256
12865: PUSH
12866: LD_INT 1000
12868: EQUAL
12869: IFFALSE 12885
// begin SetTag ( i , 1 ) ;
12871: LD_VAR 0 1
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 109
// continue ;
12883: GO 12494
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12885: LD_VAR 0 1
12889: PPUSH
12890: LD_INT 84
12892: PPUSH
12893: LD_INT 93
12895: PPUSH
12896: CALL_OW 297
12900: PUSH
12901: LD_INT 6
12903: GREATER
12904: IFFALSE 12930
// begin ComMoveXY ( i , 84 , 93 ) ;
12906: LD_VAR 0 1
12910: PPUSH
12911: LD_INT 84
12913: PPUSH
12914: LD_INT 93
12916: PPUSH
12917: CALL_OW 111
// AddComHold ( i ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 200
// end ; end ; end ;
12930: GO 12933
12932: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12933: LD_VAR 0 1
12937: PPUSH
12938: LD_INT 12
12940: PPUSH
12941: CALL_OW 308
12945: NOT
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 310
12956: NOT
12957: AND
12958: IFFALSE 12975
// ComMoveXY ( i , 91 , 95 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 91
12967: PPUSH
12968: LD_INT 95
12970: PPUSH
12971: CALL_OW 111
// end ;
12975: GO 12494
12977: POP
12978: POP
// end ; end ;
12979: PPOPN 13
12981: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12982: LD_INT 0
12984: PPUSH
12985: PPUSH
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12990: LD_ADDR_VAR 0 3
12994: PUSH
12995: DOUBLE
12996: LD_INT 1
12998: DEC
12999: ST_TO_ADDR
13000: LD_INT 3
13002: PUSH
13003: LD_INT 4
13005: PUSH
13006: LD_INT 5
13008: PUSH
13009: LD_INT 6
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_OWVAR 67
13022: ARRAY
13023: PUSH
13024: LD_VAR 0 1
13028: PLUS
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13348
// begin uc_side := 6 ;
13033: LD_ADDR_OWVAR 20
13037: PUSH
13038: LD_INT 6
13040: ST_TO_ADDR
// uc_nation := 3 ;
13041: LD_ADDR_OWVAR 21
13045: PUSH
13046: LD_INT 3
13048: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13049: LD_ADDR_VAR 0 6
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 23
13062: PUSH
13063: LD_INT 24
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 1
13074: PPUSH
13075: LD_INT 4
13077: PPUSH
13078: CALL_OW 12
13082: ARRAY
13083: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13084: LD_ADDR_VAR 0 7
13088: PUSH
13089: LD_INT 42
13091: PUSH
13092: LD_INT 44
13094: PUSH
13095: LD_INT 43
13097: PUSH
13098: LD_INT 46
13100: PUSH
13101: LD_INT 45
13103: PUSH
13104: LD_INT 46
13106: PUSH
13107: LD_INT 45
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: LD_OWVAR 67
13123: PUSH
13124: LD_INT 0
13126: PPUSH
13127: LD_INT 3
13129: PPUSH
13130: CALL_OW 12
13134: PLUS
13135: ARRAY
13136: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13137: LD_VAR 0 6
13141: PUSH
13142: LD_INT 21
13144: PUSH
13145: LD_INT 22
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: IN
13152: PUSH
13153: LD_VAR 0 7
13157: PUSH
13158: LD_INT 46
13160: EQUAL
13161: AND
13162: IFFALSE 13191
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13164: LD_ADDR_VAR 0 7
13168: PUSH
13169: LD_INT 44
13171: PUSH
13172: LD_INT 45
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 1
13181: PPUSH
13182: LD_INT 2
13184: PPUSH
13185: CALL_OW 12
13189: ARRAY
13190: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13191: LD_OWVAR 1
13195: PUSH
13196: LD_INT 31500
13198: PUSH
13199: LD_INT 27300
13201: PUSH
13202: LD_INT 23100
13204: PUSH
13205: LD_INT 18900
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_OWVAR 67
13218: ARRAY
13219: LESS
13220: IFFALSE 13253
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13222: LD_ADDR_VAR 0 7
13226: PUSH
13227: LD_INT 44
13229: PUSH
13230: LD_INT 43
13232: PUSH
13233: LD_INT 42
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 1
13243: PPUSH
13244: LD_INT 3
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13253: LD_VAR 0 6
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_INT 3
13263: PPUSH
13264: LD_VAR 0 7
13268: PPUSH
13269: LD_INT 90
13271: PPUSH
13272: CALL 45906 0 5
// un := CreateVehicle ;
13276: LD_ADDR_VAR 0 4
13280: PUSH
13281: CALL_OW 45
13285: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13286: LD_VAR 0 4
13290: PPUSH
13291: LD_INT 140
13293: PPUSH
13294: LD_INT 146
13296: PPUSH
13297: LD_INT 0
13299: PPUSH
13300: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13304: LD_VAR 0 4
13308: PPUSH
13309: LD_INT 131
13311: PPUSH
13312: LD_INT 128
13314: PPUSH
13315: CALL_OW 111
// wait ( 0 0$3 ) ;
13319: LD_INT 105
13321: PPUSH
13322: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13326: LD_ADDR_VAR 0 5
13330: PUSH
13331: LD_VAR 0 5
13335: PPUSH
13336: LD_VAR 0 4
13340: PPUSH
13341: CALL 78757 0 2
13345: ST_TO_ADDR
// end ;
13346: GO 13030
13348: POP
13349: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13350: LD_ADDR_EXP 36
13354: PUSH
13355: LD_EXP 36
13359: PPUSH
13360: LD_VAR 0 5
13364: PPUSH
13365: CALL 78794 0 2
13369: ST_TO_ADDR
// end ;
13370: LD_VAR 0 2
13374: RET
// every 0 0$3 trigger russianAttackers do
13375: LD_EXP 36
13379: IFFALSE 13462
13381: GO 13383
13383: DISABLE
// begin enable ;
13384: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13385: LD_EXP 36
13389: PPUSH
13390: LD_INT 126
13392: PUSH
13393: LD_INT 108
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 107
13402: PUSH
13403: LD_INT 85
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 82
13412: PUSH
13413: LD_INT 62
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 73
13422: PUSH
13423: LD_INT 46
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 62
13432: PUSH
13433: LD_INT 31
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 52
13442: PUSH
13443: LD_INT 17
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL 81361 0 2
// end ;
13462: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13463: LD_OWVAR 67
13467: PUSH
13468: LD_INT 2
13470: GREATER
13471: PUSH
13472: LD_INT 22
13474: PUSH
13475: LD_INT 6
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 21
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: EMPTY
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: PUSH
13508: LD_INT 0
13510: EQUAL
13511: AND
13512: IFFALSE 13566
13514: GO 13516
13516: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13517: LD_INT 51
13519: PPUSH
13520: LD_INT 6
13522: PPUSH
13523: LD_INT 2
13525: PPUSH
13526: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13530: LD_INT 57
13532: PPUSH
13533: LD_INT 6
13535: PPUSH
13536: LD_INT 2
13538: PPUSH
13539: CALL_OW 322
// if Difficulty > 3 then
13543: LD_OWVAR 67
13547: PUSH
13548: LD_INT 3
13550: GREATER
13551: IFFALSE 13566
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13553: LD_INT 52
13555: PPUSH
13556: LD_INT 6
13558: PPUSH
13559: LD_INT 2
13561: PPUSH
13562: CALL_OW 322
// end ; end_of_file
13566: END
// on SailEvent ( event ) do begin if event = 1 then
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: EQUAL
13575: IFFALSE 13605
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13577: LD_INT 2
13579: PUSH
13580: LD_INT 4
13582: PUSH
13583: LD_INT 6
13585: PUSH
13586: LD_INT 8
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_OWVAR 67
13599: ARRAY
13600: PPUSH
13601: CALL 12982 0 1
// end ;
13605: PPOPN 1
13607: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13608: LD_VAR 0 1
13612: PUSH
13613: LD_EXP 28
13617: EQUAL
13618: PUSH
13619: LD_VAR 0 2
13623: PUSH
13624: LD_INT 1
13626: EQUAL
13627: AND
13628: IFFALSE 13634
// SikorskiKilledInAction ;
13630: CALL 18751 0 0
// end ;
13634: PPOPN 3
13636: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL 36172 0 1
// if un = JMM then
13653: LD_VAR 0 1
13657: PUSH
13658: LD_EXP 14
13662: EQUAL
13663: IFFALSE 13672
// YouLost ( JMM ) ;
13665: LD_STRING JMM
13667: PPUSH
13668: CALL_OW 104
// if un = Sikorski then
13672: LD_VAR 0 1
13676: PUSH
13677: LD_EXP 28
13681: EQUAL
13682: IFFALSE 13708
// if sikorskiStatus = 0 then
13684: LD_EXP 9
13688: PUSH
13689: LD_INT 0
13691: EQUAL
13692: IFFALSE 13700
// SikorskiKilledInAction else
13694: CALL 18751 0 0
13698: GO 13708
// sikorskiIsKilled := true ;
13700: LD_ADDR_EXP 10
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 255
13717: PUSH
13718: LD_INT 1
13720: EQUAL
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 248
13731: PUSH
13732: LD_INT 1
13734: EQUAL
13735: AND
13736: PUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 266
13746: PUSH
13747: LD_INT 0
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: IN
13757: AND
13758: IFFALSE 13767
// YouLost ( Destroyed ) ;
13760: LD_STRING Destroyed
13762: PPUSH
13763: CALL_OW 104
// if un = ruDep then
13767: LD_VAR 0 1
13771: PUSH
13772: LD_INT 28
13774: EQUAL
13775: IFFALSE 13909
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13777: LD_ADDR_VAR 0 2
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_INT 3
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 25
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: FOR_IN
13812: IFFALSE 13907
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13814: LD_ADDR_VAR 0 3
13818: PUSH
13819: LD_INT 11
13821: PPUSH
13822: LD_INT 81
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PPUSH
13832: CALL_OW 70
13836: PPUSH
13837: LD_VAR 0 2
13841: PPUSH
13842: CALL_OW 74
13846: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13847: LD_VAR 0 2
13851: PPUSH
13852: CALL_OW 310
13856: PPUSH
13857: CALL_OW 266
13861: PUSH
13862: LD_INT 32
13864: EQUAL
13865: IFFALSE 13905
// begin ComExitBuilding ( i ) ;
13867: LD_VAR 0 2
13871: PPUSH
13872: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13876: LD_VAR 0 2
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: CALL_OW 250
13890: PPUSH
13891: LD_VAR 0 3
13895: PPUSH
13896: CALL_OW 251
13900: PPUSH
13901: CALL_OW 174
// end ; end ;
13905: GO 13811
13907: POP
13908: POP
// end ; if un in ruMobile then
13909: LD_VAR 0 1
13913: PUSH
13914: LD_EXP 34
13918: IN
13919: IFFALSE 13937
// ruMobile := ruMobile diff un ;
13921: LD_ADDR_EXP 34
13925: PUSH
13926: LD_EXP 34
13930: PUSH
13931: LD_VAR 0 1
13935: DIFF
13936: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 255
13946: PUSH
13947: LD_INT 3
13949: EQUAL
13950: IFFALSE 14585
// begin if GetType ( un ) = unit_building then
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 247
13961: PUSH
13962: LD_INT 3
13964: EQUAL
13965: IFFALSE 14101
// begin btype := GetBType ( un ) ;
13967: LD_ADDR_VAR 0 6
13971: PUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 266
13981: ST_TO_ADDR
// if btype = b_warehouse then
13982: LD_VAR 0 6
13986: PUSH
13987: LD_INT 1
13989: EQUAL
13990: IFFALSE 14000
// btype := b_depot ;
13992: LD_ADDR_VAR 0 6
13996: PUSH
13997: LD_INT 0
13999: ST_TO_ADDR
// if btype = b_barracks then
14000: LD_VAR 0 6
14004: PUSH
14005: LD_INT 5
14007: EQUAL
14008: IFFALSE 14018
// btype := b_armoury ;
14010: LD_ADDR_VAR 0 6
14014: PUSH
14015: LD_INT 4
14017: ST_TO_ADDR
// if btype = b_lab_full then
14018: LD_VAR 0 6
14022: PUSH
14023: LD_INT 8
14025: EQUAL
14026: IFFALSE 14036
// btype := b_lab ;
14028: LD_ADDR_VAR 0 6
14032: PUSH
14033: LD_INT 6
14035: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14036: LD_ADDR_EXP 35
14040: PUSH
14041: LD_EXP 35
14045: PPUSH
14046: LD_EXP 35
14050: PUSH
14051: LD_INT 1
14053: PLUS
14054: PPUSH
14055: LD_VAR 0 6
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 250
14069: PUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 251
14079: PUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 254
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 1
14100: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 247
14110: PUSH
14111: LD_INT 2
14113: EQUAL
14114: IFFALSE 14389
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 264
14125: PUSH
14126: LD_INT 52
14128: PUSH
14129: LD_INT 51
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: IN
14136: IFFALSE 14166
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14138: LD_INT 29
14140: PPUSH
14141: LD_INT 22
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_INT 3
14149: PPUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 264
14159: PPUSH
14160: CALL_OW 185
// end else
14164: GO 14389
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14166: LD_ADDR_VAR 0 4
14170: PUSH
14171: LD_INT 21
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_INT 23
14179: PUSH
14180: LD_INT 24
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 1
14191: PPUSH
14192: LD_INT 4
14194: PPUSH
14195: CALL_OW 12
14199: ARRAY
14200: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14201: LD_ADDR_VAR 0 5
14205: PUSH
14206: LD_INT 42
14208: PUSH
14209: LD_INT 44
14211: PUSH
14212: LD_INT 43
14214: PUSH
14215: LD_INT 46
14217: PUSH
14218: LD_INT 45
14220: PUSH
14221: LD_INT 46
14223: PUSH
14224: LD_INT 45
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: PUSH
14236: LD_OWVAR 67
14240: PUSH
14241: LD_INT 0
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 12
14251: PLUS
14252: ARRAY
14253: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14254: LD_VAR 0 4
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 22
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: IN
14269: PUSH
14270: LD_VAR 0 5
14274: PUSH
14275: LD_INT 46
14277: EQUAL
14278: AND
14279: IFFALSE 14308
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14281: LD_ADDR_VAR 0 5
14285: PUSH
14286: LD_INT 44
14288: PUSH
14289: LD_INT 45
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 1
14298: PPUSH
14299: LD_INT 2
14301: PPUSH
14302: CALL_OW 12
14306: ARRAY
14307: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14308: LD_OWVAR 1
14312: PUSH
14313: LD_INT 31500
14315: PUSH
14316: LD_INT 27300
14318: PUSH
14319: LD_INT 23100
14321: PUSH
14322: LD_INT 21000
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: LD_OWVAR 67
14335: ARRAY
14336: LESS
14337: IFFALSE 14366
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14339: LD_ADDR_VAR 0 5
14343: PUSH
14344: LD_INT 44
14346: PUSH
14347: LD_INT 43
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 1
14356: PPUSH
14357: LD_INT 2
14359: PPUSH
14360: CALL_OW 12
14364: ARRAY
14365: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14366: LD_INT 29
14368: PPUSH
14369: LD_VAR 0 4
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_VAR 0 5
14384: PPUSH
14385: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 257
14398: PUSH
14399: LD_INT 3
14401: EQUAL
14402: IFFALSE 14585
// begin killMechCounter := Inc ( killMechCounter ) ;
14404: LD_ADDR_EXP 12
14408: PUSH
14409: LD_EXP 12
14413: PPUSH
14414: CALL 80118 0 1
14418: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14419: LD_EXP 33
14423: PUSH
14424: LD_INT 0
14426: EQUAL
14427: PUSH
14428: LD_INT 29
14430: PPUSH
14431: CALL_OW 302
14435: NOT
14436: OR
14437: IFFALSE 14441
// exit ;
14439: GO 14585
// ruMechCounter := Dec ( ruMechCounter ) ;
14441: LD_ADDR_EXP 33
14445: PUSH
14446: LD_EXP 33
14450: PPUSH
14451: CALL 80140 0 1
14455: ST_TO_ADDR
// uc_side := 3 ;
14456: LD_ADDR_OWVAR 20
14460: PUSH
14461: LD_INT 3
14463: ST_TO_ADDR
// uc_nation := 3 ;
14464: LD_ADDR_OWVAR 21
14468: PUSH
14469: LD_INT 3
14471: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14472: LD_INT 0
14474: PPUSH
14475: LD_INT 5
14477: PUSH
14478: LD_INT 6
14480: PUSH
14481: LD_INT 7
14483: PUSH
14484: LD_INT 8
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: LD_OWVAR 67
14497: ARRAY
14498: PPUSH
14499: CALL_OW 383
// tmp := CreateHuman ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: CALL_OW 44
14512: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14513: LD_VAR 0 3
14517: PPUSH
14518: LD_INT 145
14520: PPUSH
14521: LD_INT 133
14523: PPUSH
14524: LD_INT 0
14526: PPUSH
14527: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14531: LD_VAR 0 3
14535: PPUSH
14536: LD_INT 29
14538: PPUSH
14539: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14543: LD_INT 35
14545: PPUSH
14546: CALL_OW 67
// if not HasTask ( tmp ) then
14550: LD_VAR 0 3
14554: PPUSH
14555: CALL_OW 314
14559: NOT
14560: IFFALSE 14574
// ComEnterUnit ( tmp , ruFac ) ;
14562: LD_VAR 0 3
14566: PPUSH
14567: LD_INT 29
14569: PPUSH
14570: CALL_OW 120
// until IsInUnit ( tmp ) ;
14574: LD_VAR 0 3
14578: PPUSH
14579: CALL_OW 310
14583: IFFALSE 14543
// end ; end ; end ;
14585: PPOPN 6
14587: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 4
14600: EQUAL
14601: IFFALSE 14618
// ComMoveXY ( driver , 40 , 47 ) ;
14603: LD_VAR 0 1
14607: PPUSH
14608: LD_INT 40
14610: PPUSH
14611: LD_INT 47
14613: PPUSH
14614: CALL_OW 111
// if GetSide ( driver ) = 3 then
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 255
14627: PUSH
14628: LD_INT 3
14630: EQUAL
14631: IFFALSE 14845
// begin ComMoveXY ( driver , 90 , 97 ) ;
14633: LD_VAR 0 1
14637: PPUSH
14638: LD_INT 90
14640: PPUSH
14641: LD_INT 97
14643: PPUSH
14644: CALL_OW 111
// if IsOk ( ruFac ) then
14648: LD_INT 29
14650: PPUSH
14651: CALL_OW 302
14655: IFFALSE 14769
// begin repeat wait ( 0 0$1 ) ;
14657: LD_INT 35
14659: PPUSH
14660: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14664: LD_INT 29
14666: PPUSH
14667: CALL_OW 313
14671: PUSH
14672: LD_INT 6
14674: LESS
14675: PUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 301
14685: OR
14686: IFFALSE 14657
// if IsDead ( driver ) then
14688: LD_VAR 0 1
14692: PPUSH
14693: CALL_OW 301
14697: IFFALSE 14701
// exit ;
14699: GO 14845
// repeat wait ( 0 0$10 ) ;
14701: LD_INT 350
14703: PPUSH
14704: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14708: LD_VAR 0 1
14712: PPUSH
14713: CALL_OW 314
14717: NOT
14718: PUSH
14719: LD_INT 29
14721: PPUSH
14722: CALL_OW 313
14726: PUSH
14727: LD_INT 6
14729: LESS
14730: AND
14731: IFFALSE 14745
// ComEnterUnit ( driver , ruFac ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_INT 29
14740: PPUSH
14741: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 301
14754: PUSH
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 310
14764: OR
14765: IFFALSE 14701
// end else
14767: GO 14845
// begin ComMoveXY ( driver , 142 , 148 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 142
14776: PPUSH
14777: LD_INT 148
14779: PPUSH
14780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14784: LD_INT 35
14786: PPUSH
14787: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 301
14800: PUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: LD_INT 142
14808: PPUSH
14809: LD_INT 148
14811: PPUSH
14812: CALL_OW 307
14816: OR
14817: IFFALSE 14784
// if IsAt ( driver , 142 , 148 ) then
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 142
14826: PPUSH
14827: LD_INT 148
14829: PPUSH
14830: CALL_OW 307
14834: IFFALSE 14845
// RemoveUnit ( driver ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 64
// end ; end ; end ;
14845: PPOPN 4
14847: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14848: LD_VAR 0 2
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: PUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 255
14871: PUSH
14872: LD_INT 3
14874: EQUAL
14875: AND
14876: PUSH
14877: LD_VAR 0 1
14881: PUSH
14882: LD_INT 29
14884: EQUAL
14885: AND
14886: IFFALSE 14900
// SetLives ( un , 1000 ) ;
14888: LD_VAR 0 2
14892: PPUSH
14893: LD_INT 1000
14895: PPUSH
14896: CALL_OW 234
// if GetTag ( b ) = 701 then
14900: LD_VAR 0 1
14904: PPUSH
14905: CALL_OW 110
14909: PUSH
14910: LD_INT 701
14912: EQUAL
14913: IFFALSE 14939
// begin SetTag ( b , 0 ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: CALL_OW 109
// SetTag ( un , 0 ) ;
14927: LD_VAR 0 2
14931: PPUSH
14932: LD_INT 0
14934: PPUSH
14935: CALL_OW 109
// end ; end ;
14939: PPOPN 2
14941: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 255
14951: PUSH
14952: LD_INT 3
14954: PUSH
14955: LD_INT 6
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: IN
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 263
14972: PUSH
14973: LD_INT 3
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_EXP 7
14982: NOT
14983: AND
14984: IFFALSE 15003
// begin seenComputer := true ;
14986: LD_ADDR_EXP 7
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14994: LD_VAR 0 1
14998: PPUSH
14999: CALL 17942 0 1
// end ; end ;
15003: PPOPN 1
15005: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15006: LD_INT 0
15008: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: CALL 36292 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 255
15032: PUSH
15033: LD_INT 3
15035: EQUAL
15036: PUSH
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 263
15046: PUSH
15047: LD_INT 1
15049: EQUAL
15050: AND
15051: PUSH
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 264
15061: PUSH
15062: LD_INT 42
15064: PUSH
15065: LD_INT 43
15067: PUSH
15068: LD_INT 44
15070: PUSH
15071: LD_INT 46
15073: PUSH
15074: LD_INT 45
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: IN
15084: AND
15085: IFFALSE 15115
// begin SetTag ( vehicle , 300 ) ;
15087: LD_VAR 0 1
15091: PPUSH
15092: LD_INT 300
15094: PPUSH
15095: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15099: LD_ADDR_EXP 34
15103: PUSH
15104: LD_EXP 34
15108: PUSH
15109: LD_VAR 0 1
15113: UNION
15114: ST_TO_ADDR
// end ; end ;
15115: PPOPN 3
15117: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15118: LD_INT 0
15120: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15121: LD_VAR 0 2
15125: PPUSH
15126: LD_VAR 0 3
15130: PPUSH
15131: LD_INT 13
15133: PPUSH
15134: CALL_OW 309
15138: IFFALSE 15269
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15140: LD_ADDR_VAR 0 6
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_INT 3
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 50
15157: PUSH
15158: EMPTY
15159: LIST
15160: PUSH
15161: LD_INT 34
15163: PUSH
15164: LD_INT 51
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: ST_TO_ADDR
// if not cargo then
15181: LD_VAR 0 6
15185: NOT
15186: IFFALSE 15190
// exit ;
15188: GO 15269
// wait ( 0 0$5 ) ;
15190: LD_INT 175
15192: PPUSH
15193: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15197: LD_VAR 0 6
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PPUSH
15206: LD_INT 28
15208: PPUSH
15209: CALL_OW 296
15213: PUSH
15214: LD_INT 6
15216: LESS
15217: PUSH
15218: LD_VAR 0 6
15222: PUSH
15223: LD_INT 1
15225: ARRAY
15226: PPUSH
15227: CALL_OW 261
15231: PUSH
15232: LD_INT 50
15234: LESS
15235: AND
15236: IFFALSE 15250
// ComMoveUnit ( cargo , ruDep ) ;
15238: LD_VAR 0 6
15242: PPUSH
15243: LD_INT 28
15245: PPUSH
15246: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15250: LD_VAR 0 6
15254: PPUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: CALL_OW 177
// end ; end ;
15269: PPOPN 6
15271: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 264
15281: PUSH
15282: LD_INT 45
15284: EQUAL
15285: IFFALSE 15302
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15287: LD_ADDR_EXP 11
15291: PUSH
15292: LD_EXP 11
15296: PPUSH
15297: CALL 80118 0 1
15301: ST_TO_ADDR
// end ;
15302: PPOPN 4
15304: END
// on BuildingComplete ( b ) do var i , tmp ;
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
// begin if GetSide ( b ) = 3 then
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 255
15318: PUSH
15319: LD_INT 3
15321: EQUAL
15322: IFFALSE 15419
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15324: LD_ADDR_EXP 35
15328: PUSH
15329: LD_EXP 35
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 3
15341: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 266
15351: PUSH
15352: LD_INT 4
15354: EQUAL
15355: IFFALSE 15366
// ComUpgrade ( b ) ;
15357: LD_VAR 0 1
15361: PPUSH
15362: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15366: LD_VAR 0 1
15370: PPUSH
15371: CALL_OW 266
15375: PUSH
15376: LD_INT 32
15378: PUSH
15379: LD_INT 33
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: IN
15386: IFFALSE 15419
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 46
15395: PUSH
15396: LD_INT 45
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 2
15408: PPUSH
15409: CALL_OW 12
15413: ARRAY
15414: PPUSH
15415: CALL_OW 208
// end ; end ; end_of_file
15419: PPOPN 3
15421: END
// export function Action ; var i , tmp , un , inUnit ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
// Video ( true ) ;
15429: LD_INT 1
15431: PPUSH
15432: CALL 78729 0 1
// invincibleMode := true ;
15436: LD_ADDR_EXP 5
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15444: LD_INT 50
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_INT 56
15455: NEG
15456: PPUSH
15457: CALL 78643 0 4
// CenterOnXY ( 50 , 12 ) ;
15461: LD_INT 50
15463: PPUSH
15464: LD_INT 12
15466: PPUSH
15467: CALL_OW 84
// wait ( 0 0$3 ) ;
15471: LD_INT 105
15473: PPUSH
15474: CALL_OW 67
// PrepareStartRussianAttack ;
15478: CALL 9999 0 0
// CenterOnXY ( 66 , 47 ) ;
15482: LD_INT 66
15484: PPUSH
15485: LD_INT 47
15487: PPUSH
15488: CALL_OW 84
// wait ( 0 0$5 ) ;
15492: LD_INT 175
15494: PPUSH
15495: CALL_OW 67
// case gammaCommander of 1 :
15499: LD_EXP 13
15503: PUSH
15504: LD_INT 1
15506: DOUBLE
15507: EQUAL
15508: IFTRUE 15512
15510: GO 15527
15512: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15513: LD_EXP 16
15517: PPUSH
15518: LD_STRING D1-Don-1
15520: PPUSH
15521: CALL_OW 88
15525: GO 15574
15527: LD_INT 2
15529: DOUBLE
15530: EQUAL
15531: IFTRUE 15535
15533: GO 15550
15535: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15536: LD_EXP 15
15540: PPUSH
15541: LD_STRING D1-Brown-1
15543: PPUSH
15544: CALL_OW 88
15548: GO 15574
15550: LD_INT 3
15552: DOUBLE
15553: EQUAL
15554: IFTRUE 15558
15556: GO 15573
15558: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15559: LD_EXP 25
15563: PPUSH
15564: LD_STRING D1-VanH-1
15566: PPUSH
15567: CALL_OW 88
15571: GO 15574
15573: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15574: LD_ADDR_VAR 0 3
15578: PUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 33
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 61
15601: PUSH
15602: EMPTY
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 69
15614: ST_TO_ADDR
// if tmp then
15615: LD_VAR 0 3
15619: IFFALSE 15636
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15621: LD_VAR 0 3
15625: PPUSH
15626: LD_INT 74
15628: PPUSH
15629: LD_INT 44
15631: PPUSH
15632: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_INT 22
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 1
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: PUSH
15670: LD_EXP 16
15674: PUSH
15675: LD_EXP 15
15679: PUSH
15680: LD_EXP 25
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: DIFF
15690: ST_TO_ADDR
// if tmp then
15691: LD_VAR 0 3
15695: IFFALSE 15773
// for i in tmp do
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_VAR 0 3
15706: PUSH
15707: FOR_IN
15708: IFFALSE 15771
// begin inUnit := IsInUnit ( i ) ;
15710: LD_ADDR_VAR 0 5
15714: PUSH
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 310
15724: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15725: LD_VAR 0 5
15729: PUSH
15730: LD_VAR 0 5
15734: PPUSH
15735: CALL_OW 266
15739: PUSH
15740: LD_INT 32
15742: PUSH
15743: LD_INT 31
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: IN
15750: AND
15751: IFFALSE 15769
// tmp := tmp diff i ;
15753: LD_ADDR_VAR 0 3
15757: PUSH
15758: LD_VAR 0 3
15762: PUSH
15763: LD_VAR 0 2
15767: DIFF
15768: ST_TO_ADDR
// end ;
15769: GO 15707
15771: POP
15772: POP
// if tmp then
15773: LD_VAR 0 3
15777: IFFALSE 15867
// begin ComExitAll ( tmp ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: CALL 79238 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15788: LD_VAR 0 3
15792: PPUSH
15793: LD_INT 74
15795: PPUSH
15796: LD_INT 44
15798: PPUSH
15799: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 4
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: ST_TO_ADDR
// if tmp then
15837: LD_VAR 0 3
15841: IFFALSE 15867
// begin ComExitAll ( tmp ) ;
15843: LD_VAR 0 3
15847: PPUSH
15848: CALL 79238 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 66
15859: PPUSH
15860: LD_INT 28
15862: PPUSH
15863: CALL_OW 171
// end ; end ; game_speed := 4 ;
15867: LD_ADDR_OWVAR 65
15871: PUSH
15872: LD_INT 4
15874: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15875: LD_INT 70
15877: PPUSH
15878: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15882: LD_EXP 29
15886: PPUSH
15887: LD_STRING D1-Har-1
15889: PPUSH
15890: CALL_OW 94
// case gammaCommander of 1 :
15894: LD_EXP 13
15898: PUSH
15899: LD_INT 1
15901: DOUBLE
15902: EQUAL
15903: IFTRUE 15907
15905: GO 15922
15907: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15908: LD_EXP 16
15912: PPUSH
15913: LD_STRING D1-Don-2
15915: PPUSH
15916: CALL_OW 88
15920: GO 15969
15922: LD_INT 2
15924: DOUBLE
15925: EQUAL
15926: IFTRUE 15930
15928: GO 15945
15930: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15931: LD_EXP 15
15935: PPUSH
15936: LD_STRING D1-Brown-2
15938: PPUSH
15939: CALL_OW 88
15943: GO 15969
15945: LD_INT 3
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 15968
15953: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15954: LD_EXP 25
15958: PPUSH
15959: LD_STRING D1-VanH-2
15961: PPUSH
15962: CALL_OW 88
15966: GO 15969
15968: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15969: LD_EXP 29
15973: PPUSH
15974: LD_STRING D1-Har-2
15976: PPUSH
15977: CALL_OW 94
// invincibleMode := false ;
15981: LD_ADDR_EXP 5
15985: PUSH
15986: LD_INT 0
15988: ST_TO_ADDR
// Video ( false ) ;
15989: LD_INT 0
15991: PPUSH
15992: CALL 78729 0 1
// ChangeMissionObjectives ( M1 ) ;
15996: LD_STRING M1
15998: PPUSH
15999: CALL_OW 337
// SaveForQuickRestart ;
16003: CALL_OW 22
// wait ( 2 2$30 ) ;
16007: LD_INT 5250
16009: PPUSH
16010: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16014: LD_INT 1
16016: PPUSH
16017: CALL 12982 0 1
// wait ( 4 4$30 ) ;
16021: LD_INT 9450
16023: PPUSH
16024: CALL_OW 67
// if Difficulty > 1 then
16028: LD_OWVAR 67
16032: PUSH
16033: LD_INT 1
16035: GREATER
16036: IFFALSE 16045
// PrepareRussianAttack ( 2 ) ;
16038: LD_INT 2
16040: PPUSH
16041: CALL 12982 0 1
// if Difficulty > 2 then
16045: LD_OWVAR 67
16049: PUSH
16050: LD_INT 2
16052: GREATER
16053: IFFALSE 16212
// begin for i := 1 to 4 do
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: DOUBLE
16061: LD_INT 1
16063: DEC
16064: ST_TO_ADDR
16065: LD_INT 4
16067: PUSH
16068: FOR_TO
16069: IFFALSE 16154
// begin uc_side := 6 ;
16071: LD_ADDR_OWVAR 20
16075: PUSH
16076: LD_INT 6
16078: ST_TO_ADDR
// uc_nation := 3 ;
16079: LD_ADDR_OWVAR 21
16083: PUSH
16084: LD_INT 3
16086: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16087: LD_INT 0
16089: PPUSH
16090: LD_INT 7
16092: PPUSH
16093: CALL_OW 381
// un := CreateHuman ;
16097: LD_ADDR_VAR 0 4
16101: PUSH
16102: CALL_OW 44
16106: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16107: LD_VAR 0 4
16111: PPUSH
16112: LD_INT 122
16114: PPUSH
16115: LD_INT 89
16117: PPUSH
16118: LD_INT 3
16120: PPUSH
16121: LD_INT 0
16123: PPUSH
16124: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16128: LD_VAR 0 4
16132: PPUSH
16133: LD_INT 88
16135: PPUSH
16136: LD_INT 42
16138: PPUSH
16139: CALL_OW 114
// AddComHold ( un ) ;
16143: LD_VAR 0 4
16147: PPUSH
16148: CALL_OW 200
// end ;
16152: GO 16068
16154: POP
16155: POP
// PrepareScientist ( false , 6 ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_INT 6
16161: PPUSH
16162: CALL_OW 384
// un := CreateHuman ;
16166: LD_ADDR_VAR 0 4
16170: PUSH
16171: CALL_OW 44
16175: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16176: LD_VAR 0 4
16180: PPUSH
16181: LD_INT 122
16183: PPUSH
16184: LD_INT 89
16186: PPUSH
16187: LD_INT 3
16189: PPUSH
16190: LD_INT 0
16192: PPUSH
16193: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 91
16204: PPUSH
16205: LD_INT 48
16207: PPUSH
16208: CALL_OW 111
// end ; end ;
16212: LD_VAR 0 1
16216: RET
// every 0 0$1 trigger invincibleMode do var i ;
16217: LD_EXP 5
16221: IFFALSE 16318
16223: GO 16225
16225: DISABLE
16226: LD_INT 0
16228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_INT 22
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 2
16246: PUSH
16247: LD_INT 21
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 3
16274: PUSH
16275: LD_INT 24
16277: PUSH
16278: LD_INT 900
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PPUSH
16294: CALL_OW 69
16298: PUSH
16299: FOR_IN
16300: IFFALSE 16316
// SetLives ( i , 900 ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_INT 900
16309: PPUSH
16310: CALL_OW 234
16314: GO 16299
16316: POP
16317: POP
// end ;
16318: PPOPN 1
16320: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16321: LD_OWVAR 1
16325: PUSH
16326: LD_INT 14700
16328: GREATER
16329: IFFALSE 17939
16331: GO 16333
16333: DISABLE
16334: LD_INT 0
16336: PPUSH
16337: PPUSH
// begin PrepareSupportFromDelta ;
16338: CALL 4052 0 0
// deltaSupport := true ;
16342: LD_ADDR_EXP 6
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// dialog := false ;
16350: LD_ADDR_VAR 0 1
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16358: LD_EXP 21
16362: PPUSH
16363: CALL_OW 302
16367: IFFALSE 16389
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: LD_EXP 21
16378: PPUSH
16379: LD_STRING D2-Glad-1
16381: PPUSH
16382: CALL_OW 88
16386: ST_TO_ADDR
16387: GO 16471
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16389: LD_ADDR_VAR 0 1
16393: PUSH
16394: LD_INT 22
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 120
16406: PUSH
16407: LD_INT 107
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 21
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 23
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 69
16444: PUSH
16445: LD_EXP 27
16449: PUSH
16450: LD_EXP 26
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: DIFF
16459: PPUSH
16460: LD_STRING D2-Sol1-1
16462: PPUSH
16463: LD_STRING D2-FSol1-1
16465: PPUSH
16466: CALL 20210 0 3
16470: ST_TO_ADDR
// if dialog then
16471: LD_VAR 0 1
16475: IFFALSE 16576
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16477: LD_EXP 16
16481: PPUSH
16482: CALL_OW 302
16486: PUSH
16487: LD_EXP 13
16491: PUSH
16492: LD_INT 1
16494: EQUAL
16495: AND
16496: IFFALSE 16510
// Say ( Donaldson , D2-Don-1 ) ;
16498: LD_EXP 16
16502: PPUSH
16503: LD_STRING D2-Don-1
16505: PPUSH
16506: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16510: LD_EXP 15
16514: PPUSH
16515: CALL_OW 302
16519: PUSH
16520: LD_EXP 13
16524: PUSH
16525: LD_INT 2
16527: EQUAL
16528: AND
16529: IFFALSE 16543
// Say ( Brown , D2-Brown-1 ) ;
16531: LD_EXP 15
16535: PPUSH
16536: LD_STRING D2-Brown-1
16538: PPUSH
16539: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16543: LD_EXP 25
16547: PPUSH
16548: CALL_OW 302
16552: PUSH
16553: LD_EXP 13
16557: PUSH
16558: LD_INT 3
16560: EQUAL
16561: AND
16562: IFFALSE 16576
// Say ( Houten , D2-VanH-1 ) ;
16564: LD_EXP 25
16568: PPUSH
16569: LD_STRING D2-VanH-1
16571: PPUSH
16572: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16576: LD_INT 3
16578: PPUSH
16579: CALL 12982 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16583: LD_STRING 07_time
16585: PPUSH
16586: LD_INT 18900
16588: PPUSH
16589: CALL_OW 30
16593: PUSH
16594: LD_INT 3
16596: DIV
16597: PPUSH
16598: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16602: LD_INT 34
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 321
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: IFFALSE 16625
// SetAchievement ( ACH_HEAVYGUN ) ;
16618: LD_STRING ACH_HEAVYGUN
16620: PPUSH
16621: CALL_OW 543
// PrepareMacmillanSquad ;
16625: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16629: LD_INT 35
16631: PPUSH
16632: CALL_OW 67
// DialogueOn ;
16636: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16640: LD_EXP 14
16644: PPUSH
16645: CALL_OW 87
// dwait ( 0 0$2 ) ;
16649: LD_INT 70
16651: PPUSH
16652: CALL_OW 68
// DialogueOff ;
16656: CALL_OW 7
// wait ( 0 0$10 ) ;
16660: LD_INT 350
16662: PPUSH
16663: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16667: LD_INT 1
16669: PPUSH
16670: CALL_OW 427
// p := 0 ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_INT 0
16681: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16682: LD_INT 35
16684: PPUSH
16685: CALL_OW 67
// p := Inc ( p ) ;
16689: LD_ADDR_VAR 0 2
16693: PUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: CALL 80118 0 1
16703: ST_TO_ADDR
// if p > 300 then
16704: LD_VAR 0 2
16708: PUSH
16709: LD_INT 300
16711: GREATER
16712: IFFALSE 16716
// exit ;
16714: GO 17939
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16716: LD_EXP 14
16720: PPUSH
16721: LD_INT 15
16723: PPUSH
16724: CALL_OW 308
16728: PUSH
16729: LD_EXP 14
16733: PPUSH
16734: CALL_OW 310
16738: PPUSH
16739: LD_INT 15
16741: PPUSH
16742: CALL_OW 308
16746: OR
16747: PUSH
16748: LD_EXP 14
16752: PPUSH
16753: LD_EXP 27
16757: PPUSH
16758: CALL_OW 296
16762: PUSH
16763: LD_INT 10
16765: LESS
16766: OR
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 120
16783: PUSH
16784: LD_INT 106
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 120
16793: PUSH
16794: LD_INT 107
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 91
16808: PUSH
16809: LD_EXP 14
16813: PUSH
16814: LD_INT 12
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: PPUSH
16827: CALL_OW 69
16831: OR
16832: IFFALSE 16682
// DialogueOn ;
16834: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16838: LD_EXP 14
16842: PPUSH
16843: LD_STRING D3-JMM-1
16845: PPUSH
16846: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16850: LD_EXP 16
16854: PPUSH
16855: CALL_OW 302
16859: PUSH
16860: LD_EXP 13
16864: PUSH
16865: LD_INT 1
16867: EQUAL
16868: AND
16869: IFFALSE 16885
// Say ( Donaldson , D3-Don-1 ) else
16871: LD_EXP 16
16875: PPUSH
16876: LD_STRING D3-Don-1
16878: PPUSH
16879: CALL_OW 88
16883: GO 16981
// begin if gammaCommander = 1 then
16885: LD_EXP 13
16889: PUSH
16890: LD_INT 1
16892: EQUAL
16893: IFFALSE 16981
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16895: LD_INT 22
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 21
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 23
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 120
16927: PUSH
16928: LD_INT 106
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: PPUSH
16957: LD_STRING D3-Sol1-1
16959: PPUSH
16960: LD_STRING 
16962: PPUSH
16963: CALL 20210 0 3
16967: IFFALSE 16981
// Say ( JMM , D3-JMM-2 ) ;
16969: LD_EXP 14
16973: PPUSH
16974: LD_STRING D3-JMM-2
16976: PPUSH
16977: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16981: LD_EXP 15
16985: PPUSH
16986: CALL_OW 302
16990: PUSH
16991: LD_EXP 13
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: AND
17000: IFFALSE 17016
// Say ( Brown , D3-Brown-1 ) else
17002: LD_EXP 15
17006: PPUSH
17007: LD_STRING D3-Brown-1
17009: PPUSH
17010: CALL_OW 88
17014: GO 17112
// begin if gammaCommander = 2 then
17016: LD_EXP 13
17020: PUSH
17021: LD_INT 2
17023: EQUAL
17024: IFFALSE 17112
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17026: LD_INT 22
17028: PUSH
17029: LD_INT 1
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 21
17038: PUSH
17039: LD_INT 1
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 120
17058: PUSH
17059: LD_INT 106
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 26
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: PPUSH
17083: CALL_OW 69
17087: PPUSH
17088: LD_STRING D3-Sol1-1a
17090: PPUSH
17091: LD_STRING 
17093: PPUSH
17094: CALL 20210 0 3
17098: IFFALSE 17112
// Say ( JMM , D3-JMM-2 ) ;
17100: LD_EXP 14
17104: PPUSH
17105: LD_STRING D3-JMM-2
17107: PPUSH
17108: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17112: LD_EXP 25
17116: PPUSH
17117: CALL_OW 302
17121: PUSH
17122: LD_EXP 13
17126: PUSH
17127: LD_INT 3
17129: EQUAL
17130: AND
17131: IFFALSE 17147
// Say ( Houten , D3-VanH-1 ) else
17133: LD_EXP 25
17137: PPUSH
17138: LD_STRING D3-VanH-1
17140: PPUSH
17141: CALL_OW 88
17145: GO 17243
// begin if gammaCommander = 3 then
17147: LD_EXP 13
17151: PUSH
17152: LD_INT 3
17154: EQUAL
17155: IFFALSE 17243
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17157: LD_INT 22
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 23
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 120
17189: PUSH
17190: LD_INT 106
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 26
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 69
17218: PPUSH
17219: LD_STRING D3-Sol1-1b
17221: PPUSH
17222: LD_STRING 
17224: PPUSH
17225: CALL 20210 0 3
17229: IFFALSE 17243
// Say ( JMM , D3-JMM-2 ) ;
17231: LD_EXP 14
17235: PPUSH
17236: LD_STRING D3-JMM-2
17238: PPUSH
17239: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17243: LD_EXP 27
17247: PPUSH
17248: CALL_OW 302
17252: IFFALSE 17280
// begin Say ( Joan , D3a-Joan-1 ) ;
17254: LD_EXP 27
17258: PPUSH
17259: LD_STRING D3a-Joan-1
17261: PPUSH
17262: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17266: LD_EXP 14
17270: PPUSH
17271: LD_STRING D3a-JMM-1
17273: PPUSH
17274: CALL_OW 88
// end else
17278: GO 17714
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17280: LD_STRING 06_JoanStatus_1
17282: PPUSH
17283: LD_INT 0
17285: PPUSH
17286: CALL_OW 30
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: IFFALSE 17714
// begin Say ( JMM , D3b-JMM-1 ) ;
17296: LD_EXP 14
17300: PPUSH
17301: LD_STRING D3b-JMM-1
17303: PPUSH
17304: CALL_OW 88
// dialog := false ;
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// if gammaCommander = 1 then
17316: LD_EXP 13
17320: PUSH
17321: LD_INT 1
17323: EQUAL
17324: IFFALSE 17435
// if IsOK ( Donaldson ) then
17326: LD_EXP 16
17330: PPUSH
17331: CALL_OW 302
17335: IFFALSE 17357
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17337: LD_ADDR_VAR 0 1
17341: PUSH
17342: LD_EXP 16
17346: PPUSH
17347: LD_STRING D3b-Don-1
17349: PPUSH
17350: CALL_OW 88
17354: ST_TO_ADDR
17355: GO 17435
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_INT 22
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 21
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 23
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 120
17394: PUSH
17395: LD_INT 106
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 26
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PPUSH
17419: CALL_OW 69
17423: PPUSH
17424: LD_STRING D3b-Sol1-1
17426: PPUSH
17427: LD_STRING 
17429: PPUSH
17430: CALL 20210 0 3
17434: ST_TO_ADDR
// if gammaCommander = 2 then
17435: LD_EXP 13
17439: PUSH
17440: LD_INT 2
17442: EQUAL
17443: IFFALSE 17554
// if IsOk ( Brown ) then
17445: LD_EXP 15
17449: PPUSH
17450: CALL_OW 302
17454: IFFALSE 17476
// dialog := Say ( Brown , D3b-Brown-1 ) else
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_EXP 15
17465: PPUSH
17466: LD_STRING D3b-Brown-1
17468: PPUSH
17469: CALL_OW 88
17473: ST_TO_ADDR
17474: GO 17554
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 23
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 120
17513: PUSH
17514: LD_INT 106
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PPUSH
17538: CALL_OW 69
17542: PPUSH
17543: LD_STRING D3b-Sol1-1
17545: PPUSH
17546: LD_STRING 
17548: PPUSH
17549: CALL 20210 0 3
17553: ST_TO_ADDR
// if gammaCommander = 3 then
17554: LD_EXP 13
17558: PUSH
17559: LD_INT 3
17561: EQUAL
17562: IFFALSE 17673
// if IsOk ( Houten ) then
17564: LD_EXP 25
17568: PPUSH
17569: CALL_OW 302
17573: IFFALSE 17595
// dialog := Say ( Houten , D3b-VanH-1 ) else
17575: LD_ADDR_VAR 0 1
17579: PUSH
17580: LD_EXP 25
17584: PPUSH
17585: LD_STRING D3b-VanH-1
17587: PPUSH
17588: CALL_OW 88
17592: ST_TO_ADDR
17593: GO 17673
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 23
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 120
17632: PUSH
17633: LD_INT 106
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 26
17642: PUSH
17643: LD_INT 1
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: PPUSH
17662: LD_STRING D3b-Sol1-1
17664: PPUSH
17665: LD_STRING 
17667: PPUSH
17668: CALL 20210 0 3
17672: ST_TO_ADDR
// if dialog then
17673: LD_VAR 0 1
17677: IFFALSE 17714
// begin Say ( JMM , D3b-JMM-2 ) ;
17679: LD_EXP 14
17683: PPUSH
17684: LD_STRING D3b-JMM-2
17686: PPUSH
17687: CALL_OW 88
// if IsOK ( Lisa ) then
17691: LD_EXP 19
17695: PPUSH
17696: CALL_OW 302
17700: IFFALSE 17714
// Say ( Lisa , D3b-Lisa-2 ) ;
17702: LD_EXP 19
17706: PPUSH
17707: LD_STRING D3b-Lisa-2
17709: PPUSH
17710: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17714: LD_EXP 7
17718: NOT
17719: IFFALSE 17727
// begin DialogueOff ;
17721: CALL_OW 7
// exit ;
17725: GO 17939
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17727: LD_INT 22
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 120
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 120
17772: PUSH
17773: LD_INT 107
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 26
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_STRING DCa-Sol1-1
17809: PPUSH
17810: LD_STRING 
17812: PPUSH
17813: CALL 20210 0 3
17817: IFFALSE 17831
// Say ( JMM , DCb-JMM-1 ) ;
17819: LD_EXP 14
17823: PPUSH
17824: LD_STRING DCb-JMM-1
17826: PPUSH
17827: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17831: LD_INT 22
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 23
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 120
17866: PUSH
17867: LD_INT 106
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 120
17876: PUSH
17877: LD_INT 107
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 26
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: PPUSH
17911: LD_STRING DCb-Sol1-1
17913: PPUSH
17914: LD_STRING 
17916: PPUSH
17917: CALL 20210 0 3
17921: IFFALSE 17935
// Say ( JMM , DCb-JMM-2 ) ;
17923: LD_EXP 14
17927: PPUSH
17928: LD_STRING DCb-JMM-2
17930: PPUSH
17931: CALL_OW 88
// DialogueOff ;
17935: CALL_OW 7
// end ;
17939: PPOPN 2
17941: END
// export function DialogSeenComputer ( un ) ; begin
17942: LD_INT 0
17944: PPUSH
// if jmmArrival then
17945: LD_EXP 8
17949: IFFALSE 17953
// exit ;
17951: GO 18019
// CenterOnUnits ( un ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17962: LD_INT 22
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 120
17977: PUSH
17978: LD_INT 106
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 120
17987: PUSH
17988: LD_INT 107
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: PPUSH
18009: LD_STRING DC-Sol1-1
18011: PPUSH
18012: LD_STRING DC-FSol1-1
18014: PPUSH
18015: CALL 20210 0 3
// end ;
18019: LD_VAR 0 2
18023: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18024: LD_EXP 8
18028: PUSH
18029: LD_OWVAR 1
18033: PUSH
18034: LD_INT 48300
18036: GREATEREQUAL
18037: AND
18038: PUSH
18039: LD_EXP 14
18043: PPUSH
18044: CALL_OW 302
18048: AND
18049: IFFALSE 18535
18051: GO 18053
18053: DISABLE
// begin wait ( 2 2$00 ) ;
18054: LD_INT 4200
18056: PPUSH
18057: CALL_OW 67
// DialogueOn ;
18061: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18065: LD_EXP 30
18069: PPUSH
18070: LD_STRING D4-Pow-1
18072: PPUSH
18073: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18077: LD_EXP 14
18081: PPUSH
18082: LD_STRING D4-JMM-1
18084: PPUSH
18085: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18089: LD_EXP 30
18093: PPUSH
18094: LD_STRING D4-Pow-2
18096: PPUSH
18097: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18101: LD_EXP 14
18105: PPUSH
18106: LD_STRING D4-JMM-2
18108: PPUSH
18109: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18113: LD_EXP 30
18117: PPUSH
18118: LD_STRING D4-Pow-3
18120: PPUSH
18121: CALL_OW 94
// DialogueOff ;
18125: CALL_OW 7
// wait ( 1 1$00 ) ;
18129: LD_INT 2100
18131: PPUSH
18132: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 427
// wait ( 7 7$30 ) ;
18143: LD_INT 15750
18145: PPUSH
18146: CALL_OW 67
// DialogueOn ;
18150: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18154: LD_EXP 30
18158: PPUSH
18159: LD_STRING D4a-Pow-1
18161: PPUSH
18162: CALL_OW 94
// DialogueOff ;
18166: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 427
// SikorskiCounter ;
18177: CALL 19994 0 0
// PrepareSikorsky ;
18181: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18185: LD_EXP 28
18189: PPUSH
18190: CALL_OW 87
// DialogueOn ;
18194: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18198: LD_EXP 28
18202: PPUSH
18203: LD_STRING D5-Sik-1
18205: PPUSH
18206: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18210: LD_INT 11
18212: PPUSH
18213: LD_INT 22
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 70
18227: PUSH
18228: LD_INT 1
18230: GREATER
18231: PUSH
18232: LD_INT 28
18234: PPUSH
18235: CALL_OW 302
18239: NOT
18240: OR
18241: PUSH
18242: LD_INT 28
18244: PPUSH
18245: CALL_OW 255
18249: PUSH
18250: LD_INT 1
18252: EQUAL
18253: OR
18254: IFFALSE 18306
// begin Say ( JMM , D5-JMM-1 ) ;
18256: LD_EXP 14
18260: PPUSH
18261: LD_STRING D5-JMM-1
18263: PPUSH
18264: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18268: LD_EXP 28
18272: PPUSH
18273: LD_STRING D7a-Sik-1
18275: PPUSH
18276: CALL_OW 88
// DialogueOff ;
18280: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18284: LD_STRING M2
18286: PPUSH
18287: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18291: LD_INT 1
18293: PPUSH
18294: CALL_OW 427
// SikorskiAttack ;
18298: CALL 7861 0 0
// exit ;
18302: GO 18535
// end else
18304: GO 18351
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18306: LD_INT 15
18308: PPUSH
18309: LD_INT 81
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PPUSH
18319: CALL_OW 70
18323: IFFALSE 18339
// Say ( JMM , D5-JMM-1b ) else
18325: LD_EXP 14
18329: PPUSH
18330: LD_STRING D5-JMM-1b
18332: PPUSH
18333: CALL_OW 88
18337: GO 18351
// Say ( JMM , D5-JMM-1a ) ;
18339: LD_EXP 14
18343: PPUSH
18344: LD_STRING D5-JMM-1a
18346: PPUSH
18347: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18351: LD_EXP 28
18355: PPUSH
18356: LD_STRING D5-Sik-2
18358: PPUSH
18359: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18363: LD_STRING QSikorski
18365: PPUSH
18366: CALL_OW 97
18370: PUSH
18371: LD_INT 1
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18402
18379: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18380: LD_EXP 28
18384: PPUSH
18385: LD_STRING D5a-Sik-1
18387: PPUSH
18388: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18392: LD_ADDR_EXP 4
18396: PUSH
18397: LD_INT 2100
18399: ST_TO_ADDR
// end ; 2 :
18400: GO 18489
18402: LD_INT 2
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18433
18410: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18411: LD_EXP 28
18415: PPUSH
18416: LD_STRING D5b-Sik-1
18418: PPUSH
18419: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18423: LD_ADDR_EXP 4
18427: PUSH
18428: LD_INT 10500
18430: ST_TO_ADDR
// end ; 3 :
18431: GO 18489
18433: LD_INT 3
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18488
18441: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18442: LD_EXP 28
18446: PPUSH
18447: LD_STRING D5c-Sik-1
18449: PPUSH
18450: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18454: LD_EXP 14
18458: PPUSH
18459: LD_STRING D5c-JMM-1
18461: PPUSH
18462: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18466: LD_EXP 28
18470: PPUSH
18471: LD_STRING D5c-Sik-2
18473: PPUSH
18474: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18478: LD_ADDR_EXP 4
18482: PUSH
18483: LD_INT 10500
18485: ST_TO_ADDR
// end ; end ;
18486: GO 18489
18488: POP
// DialogueOff ;
18489: CALL_OW 7
// SikorskiWaitCounter ;
18493: CALL 20057 0 0
// DialogueOn ;
18497: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18501: LD_EXP 28
18505: PPUSH
18506: LD_STRING D6-Sik-1
18508: PPUSH
18509: CALL_OW 88
// DialogueOff ;
18513: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18517: LD_STRING M2
18519: PPUSH
18520: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 427
// SikorskiAttack ;
18531: CALL 7861 0 0
// end ;
18535: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18536: LD_INT 11
18538: PPUSH
18539: LD_INT 22
18541: PUSH
18542: LD_INT 4
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 70
18553: PUSH
18554: LD_INT 2
18556: GREATER
18557: IFFALSE 18750
18559: GO 18561
18561: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18562: LD_EXP 28
18566: PPUSH
18567: LD_STRING D7-Sik-1
18569: PPUSH
18570: CALL_OW 88
// wait ( 0 0$10 ) ;
18574: LD_INT 350
18576: PPUSH
18577: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18581: LD_EXP 14
18585: PPUSH
18586: LD_INT 11
18588: PPUSH
18589: CALL_OW 308
18593: PUSH
18594: LD_EXP 14
18598: PPUSH
18599: CALL_OW 310
18603: PPUSH
18604: LD_INT 11
18606: PPUSH
18607: CALL_OW 308
18611: OR
18612: IFFALSE 18636
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18614: LD_EXP 28
18618: PPUSH
18619: LD_STRING D7a-Sik-1
18621: PPUSH
18622: CALL_OW 88
// sikorskiStatus := 1 ;
18626: LD_ADDR_EXP 9
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// end else
18634: GO 18656
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18636: LD_EXP 28
18640: PPUSH
18641: LD_STRING D7b-Sik-1
18643: PPUSH
18644: CALL_OW 88
// sikorskiStatus := 0 ;
18648: LD_ADDR_EXP 9
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18656: LD_INT 1575
18658: PPUSH
18659: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18663: LD_EXP 14
18667: PPUSH
18668: LD_INT 11
18670: PPUSH
18671: CALL_OW 308
18675: PUSH
18676: LD_EXP 14
18680: PPUSH
18681: CALL_OW 310
18685: PPUSH
18686: LD_INT 11
18688: PPUSH
18689: CALL_OW 308
18693: OR
18694: PUSH
18695: LD_EXP 14
18699: PPUSH
18700: CALL_OW 302
18704: NOT
18705: OR
18706: IFFALSE 18730
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18708: LD_EXP 28
18712: PPUSH
18713: LD_STRING D7a-Sik-1
18715: PPUSH
18716: CALL_OW 88
// sikorskiStatus := 1 ;
18720: LD_ADDR_EXP 9
18724: PUSH
18725: LD_INT 1
18727: ST_TO_ADDR
// end else
18728: GO 18750
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18730: LD_EXP 28
18734: PPUSH
18735: LD_STRING D7b-Sik-1
18737: PPUSH
18738: CALL_OW 88
// sikorskiStatus := 0 ;
18742: LD_ADDR_EXP 9
18746: PUSH
18747: LD_INT 0
18749: ST_TO_ADDR
// end ; end ;
18750: END
// export function SikorskiKilledInAction ; begin
18751: LD_INT 0
18753: PPUSH
// wait ( 0 0$2 ) ;
18754: LD_INT 70
18756: PPUSH
18757: CALL_OW 67
// DialogueOn ;
18761: CALL_OW 6
// dwait ( 0 0$1 ) ;
18765: LD_INT 35
18767: PPUSH
18768: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18772: LD_EXP 30
18776: PPUSH
18777: LD_STRING D8b-Pow-1
18779: PPUSH
18780: CALL_OW 94
// YouLost ( Dismissed ) ;
18784: LD_STRING Dismissed
18786: PPUSH
18787: CALL_OW 104
// DialogueOff ;
18791: CALL_OW 7
// end ;
18795: LD_VAR 0 1
18799: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18800: LD_EXP 8
18804: PUSH
18805: LD_INT 28
18807: PPUSH
18808: CALL_OW 301
18812: AND
18813: PUSH
18814: LD_EXP 32
18818: PPUSH
18819: CALL_OW 301
18823: AND
18824: PUSH
18825: LD_INT 22
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 50
18837: PUSH
18838: EMPTY
18839: LIST
18840: PUSH
18841: LD_INT 30
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PUSH
18861: LD_INT 0
18863: EQUAL
18864: AND
18865: IFFALSE 19991
18867: GO 18869
18869: DISABLE
18870: LD_INT 0
18872: PPUSH
18873: PPUSH
18874: PPUSH
// begin Video ( true ) ;
18875: LD_INT 1
18877: PPUSH
18878: CALL 78729 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18882: LD_INT 104
18884: PPUSH
18885: LD_INT 108
18887: PPUSH
18888: LD_INT 1
18890: PPUSH
18891: LD_INT 36
18893: NEG
18894: PPUSH
18895: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18899: LD_INT 104
18901: PPUSH
18902: LD_INT 108
18904: PPUSH
18905: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18909: LD_ADDR_VAR 0 2
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 3
18936: PUSH
18937: LD_INT 24
18939: PUSH
18940: LD_INT 249
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: ST_TO_ADDR
// if tmp then
18961: LD_VAR 0 2
18965: IFFALSE 18996
// for i in tmp do
18967: LD_ADDR_VAR 0 1
18971: PUSH
18972: LD_VAR 0 2
18976: PUSH
18977: FOR_IN
18978: IFFALSE 18994
// SetLives ( i , 249 ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: LD_INT 249
18987: PPUSH
18988: CALL_OW 234
18992: GO 18977
18994: POP
18995: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18996: LD_ADDR_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_INT 3
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: PUSH
19030: FOR_IN
19031: IFFALSE 19074
// begin ComExit ( i ) ;
19033: LD_VAR 0 1
19037: PPUSH
19038: CALL 79155 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19042: LD_VAR 0 1
19046: PPUSH
19047: LD_INT 131
19049: PPUSH
19050: LD_INT 127
19052: PPUSH
19053: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19057: LD_VAR 0 1
19061: PPUSH
19062: LD_INT 141
19064: PPUSH
19065: LD_INT 147
19067: PPUSH
19068: CALL_OW 171
// end ;
19072: GO 19030
19074: POP
19075: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19076: LD_INT 81
19078: PUSH
19079: LD_INT 3
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: LD_INT 21
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PPUSH
19112: LD_INT 131
19114: PPUSH
19115: LD_INT 127
19117: PPUSH
19118: CALL_OW 174
// wait ( 0 0$08 ) ;
19122: LD_INT 280
19124: PPUSH
19125: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19129: LD_INT 22
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 21
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 23
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 50
19161: PUSH
19162: EMPTY
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL_OW 69
19175: PPUSH
19176: CALL 43168 0 1
19180: PUSH
19181: LD_INT 7
19183: LESS
19184: IFFALSE 19195
// begin YouLost ( LostVictory ) ;
19186: LD_STRING LostVictory
19188: PPUSH
19189: CALL_OW 104
// exit ;
19193: GO 19991
// end ; DialogueOn ;
19195: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19199: LD_EXP 9
19203: PUSH
19204: LD_INT 1
19206: EQUAL
19207: PUSH
19208: LD_EXP 28
19212: PPUSH
19213: CALL_OW 302
19217: AND
19218: IFFALSE 19232
// Say ( Sikorski , D9-Sik-1 ) ;
19220: LD_EXP 28
19224: PPUSH
19225: LD_STRING D9-Sik-1
19227: PPUSH
19228: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19232: LD_INT 22
19234: PUSH
19235: LD_INT 4
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 69
19246: PUSH
19247: LD_INT 0
19249: EQUAL
19250: PUSH
19251: LD_EXP 3
19255: AND
19256: IFFALSE 19265
// SetAchievement ( ACH_BLITZKRIEG ) ;
19258: LD_STRING ACH_BLITZKRIEG
19260: PPUSH
19261: CALL_OW 543
// if tick <= 45 45$10 then
19265: LD_OWVAR 1
19269: PUSH
19270: LD_INT 94850
19272: LESSEQUAL
19273: IFFALSE 19289
// begin wait ( 3 ) ;
19275: LD_INT 3
19277: PPUSH
19278: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19282: LD_STRING ACH_ASPEED_8
19284: PPUSH
19285: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19289: LD_STRING med1
19291: PPUSH
19292: LD_INT 1
19294: PPUSH
19295: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19299: LD_STRING med2
19301: PPUSH
19302: LD_INT 1
19304: PPUSH
19305: CALL_OW 101
// if sikorskiStatus = 1 then
19309: LD_EXP 9
19313: PUSH
19314: LD_INT 1
19316: EQUAL
19317: IFFALSE 19331
// AddMedal ( perfect , 1 ) else
19319: LD_STRING perfect
19321: PPUSH
19322: LD_INT 1
19324: PPUSH
19325: CALL_OW 101
19329: GO 19342
// AddMedal ( perfect , - 1 ) ;
19331: LD_STRING perfect
19333: PPUSH
19334: LD_INT 1
19336: NEG
19337: PPUSH
19338: CALL_OW 101
// if Difficulty >= 3 then
19342: LD_OWVAR 67
19346: PUSH
19347: LD_INT 3
19349: GREATEREQUAL
19350: IFFALSE 19362
// SetAchievementEX ( ACH_AMER , 8 ) ;
19352: LD_STRING ACH_AMER
19354: PPUSH
19355: LD_INT 8
19357: PPUSH
19358: CALL_OW 564
// GiveMedals ( Main ) ;
19362: LD_STRING Main
19364: PPUSH
19365: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19369: LD_INT 22
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 23
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 21
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: PPUSH
19404: CALL_OW 69
19408: PPUSH
19409: CALL_OW 43
// prefix := 08_ ;
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_STRING 08_
19420: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19421: LD_EXP 14
19425: PPUSH
19426: LD_VAR 0 3
19430: PUSH
19431: LD_STRING JMM
19433: STR
19434: PPUSH
19435: CALL_OW 38
// if IsLive ( Brown ) then
19439: LD_EXP 15
19443: PPUSH
19444: CALL_OW 300
19448: IFFALSE 19468
// SaveCharacters ( Brown , prefix & Brown ) ;
19450: LD_EXP 15
19454: PPUSH
19455: LD_VAR 0 3
19459: PUSH
19460: LD_STRING Brown
19462: STR
19463: PPUSH
19464: CALL_OW 38
// if IsLive ( Donaldson ) then
19468: LD_EXP 16
19472: PPUSH
19473: CALL_OW 300
19477: IFFALSE 19497
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19479: LD_EXP 16
19483: PPUSH
19484: LD_VAR 0 3
19488: PUSH
19489: LD_STRING Donaldson
19491: STR
19492: PPUSH
19493: CALL_OW 38
// if IsLive ( Bobby ) then
19497: LD_EXP 17
19501: PPUSH
19502: CALL_OW 300
19506: IFFALSE 19526
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19508: LD_EXP 17
19512: PPUSH
19513: LD_VAR 0 3
19517: PUSH
19518: LD_STRING Bobby
19520: STR
19521: PPUSH
19522: CALL_OW 38
// if IsLive ( Cyrus ) then
19526: LD_EXP 18
19530: PPUSH
19531: CALL_OW 300
19535: IFFALSE 19555
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19537: LD_EXP 18
19541: PPUSH
19542: LD_VAR 0 3
19546: PUSH
19547: LD_STRING Cyrus
19549: STR
19550: PPUSH
19551: CALL_OW 38
// if IsLive ( Lisa ) then
19555: LD_EXP 19
19559: PPUSH
19560: CALL_OW 300
19564: IFFALSE 19584
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19566: LD_EXP 19
19570: PPUSH
19571: LD_VAR 0 3
19575: PUSH
19576: LD_STRING Lisa
19578: STR
19579: PPUSH
19580: CALL_OW 38
// if IsLive ( Frank ) then
19584: LD_EXP 20
19588: PPUSH
19589: CALL_OW 300
19593: IFFALSE 19613
// SaveCharacters ( Frank , prefix & Frank ) ;
19595: LD_EXP 20
19599: PPUSH
19600: LD_VAR 0 3
19604: PUSH
19605: LD_STRING Frank
19607: STR
19608: PPUSH
19609: CALL_OW 38
// if IsLive ( Gladstone ) then
19613: LD_EXP 21
19617: PPUSH
19618: CALL_OW 300
19622: IFFALSE 19642
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19624: LD_EXP 21
19628: PPUSH
19629: LD_VAR 0 3
19633: PUSH
19634: LD_STRING Gladstone
19636: STR
19637: PPUSH
19638: CALL_OW 38
// if IsLive ( Kikuchi ) then
19642: LD_EXP 22
19646: PPUSH
19647: CALL_OW 300
19651: IFFALSE 19671
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19653: LD_EXP 22
19657: PPUSH
19658: LD_VAR 0 3
19662: PUSH
19663: LD_STRING Kikuchi
19665: STR
19666: PPUSH
19667: CALL_OW 38
// if IsLive ( Denis ) then
19671: LD_EXP 26
19675: PPUSH
19676: CALL_OW 300
19680: IFFALSE 19700
// SaveCharacters ( Denis , prefix & Denis ) ;
19682: LD_EXP 26
19686: PPUSH
19687: LD_VAR 0 3
19691: PUSH
19692: LD_STRING Denis
19694: STR
19695: PPUSH
19696: CALL_OW 38
// if IsLive ( Joan ) then
19700: LD_EXP 27
19704: PPUSH
19705: CALL_OW 300
19709: IFFALSE 19731
// SaveCharacters ( Joan , prefix & Joan ) else
19711: LD_EXP 27
19715: PPUSH
19716: LD_VAR 0 3
19720: PUSH
19721: LD_STRING Joan
19723: STR
19724: PPUSH
19725: CALL_OW 38
19729: GO 19738
// DeleteCharacters ( Joan ) ;
19731: LD_STRING Joan
19733: PPUSH
19734: CALL_OW 40
// if IsLive ( Khatam ) then
19738: LD_EXP 23
19742: PPUSH
19743: CALL_OW 300
19747: IFFALSE 19767
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19749: LD_EXP 23
19753: PPUSH
19754: LD_VAR 0 3
19758: PUSH
19759: LD_STRING Khatam
19761: STR
19762: PPUSH
19763: CALL_OW 38
// if IsLive ( Houten ) then
19767: LD_EXP 25
19771: PPUSH
19772: CALL_OW 300
19776: IFFALSE 19803
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19778: LD_STRING enableBioCharacter(BIO_HOUT)
19780: PPUSH
19781: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19785: LD_EXP 25
19789: PPUSH
19790: LD_VAR 0 3
19794: PUSH
19795: LD_STRING Houten
19797: STR
19798: PPUSH
19799: CALL_OW 38
// end ; if IsLive ( Mike ) then
19803: LD_EXP 24
19807: PPUSH
19808: CALL_OW 300
19812: IFFALSE 19832
// SaveCharacters ( Mike , prefix & Mike ) ;
19814: LD_EXP 24
19818: PPUSH
19819: LD_VAR 0 3
19823: PUSH
19824: LD_STRING Mike
19826: STR
19827: PPUSH
19828: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19832: LD_INT 22
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 21
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 23
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: PPUSH
19867: CALL_OW 69
19871: PUSH
19872: LD_EXP 14
19876: PUSH
19877: LD_EXP 15
19881: PUSH
19882: LD_EXP 16
19886: PUSH
19887: LD_EXP 17
19891: PUSH
19892: LD_EXP 18
19896: PUSH
19897: LD_EXP 19
19901: PUSH
19902: LD_EXP 20
19906: PUSH
19907: LD_EXP 21
19911: PUSH
19912: LD_EXP 22
19916: PUSH
19917: LD_EXP 26
19921: PUSH
19922: LD_EXP 27
19926: PUSH
19927: LD_EXP 25
19931: PUSH
19932: LD_EXP 23
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: DIFF
19952: PPUSH
19953: LD_STRING 08_other_survivors
19955: PPUSH
19956: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19960: LD_INT 15
19962: PPUSH
19963: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19967: LD_EXP 10
19971: NOT
19972: PPUSH
19973: LD_STRING 08_SikorskiStatus
19975: PPUSH
19976: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
19980: LD_STRING enableBioCharacter(BIO_SIK)
19982: PPUSH
19983: CALL_OW 559
// YouWin ;
19987: CALL_OW 103
// end ; end_of_file
19991: PPOPN 3
19993: END
// export function SikorskiCounter ; begin
19994: LD_INT 0
19996: PPUSH
// repeat wait ( 0 0$1 ) ;
19997: LD_INT 35
19999: PPUSH
20000: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20004: LD_ADDR_OWVAR 47
20008: PUSH
20009: LD_STRING #Am08-2
20011: PUSH
20012: LD_EXP 3
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20021: LD_ADDR_EXP 3
20025: PUSH
20026: LD_EXP 3
20030: PUSH
20031: LD_INT 35
20033: MINUS
20034: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20035: LD_EXP 3
20039: PUSH
20040: LD_INT 0
20042: EQUAL
20043: IFFALSE 19997
// display_strings := [ ] ;
20045: LD_ADDR_OWVAR 47
20049: PUSH
20050: EMPTY
20051: ST_TO_ADDR
// end ;
20052: LD_VAR 0 1
20056: RET
// export function SikorskiWaitCounter ; begin
20057: LD_INT 0
20059: PPUSH
// repeat wait ( 0 0$1 ) ;
20060: LD_INT 35
20062: PPUSH
20063: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20067: LD_ADDR_OWVAR 47
20071: PUSH
20072: LD_STRING #Am08-1
20074: PUSH
20075: LD_EXP 4
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20084: LD_ADDR_EXP 4
20088: PUSH
20089: LD_EXP 4
20093: PUSH
20094: LD_INT 35
20096: MINUS
20097: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20098: LD_EXP 4
20102: PUSH
20103: LD_INT 0
20105: EQUAL
20106: IFFALSE 20060
// display_strings := [ ] ;
20108: LD_ADDR_OWVAR 47
20112: PUSH
20113: EMPTY
20114: ST_TO_ADDR
// end ; end_of_file
20115: LD_VAR 0 1
20119: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20120: LD_EXP 3
20124: IFFALSE 20164
20126: GO 20128
20128: DISABLE
// begin enable ;
20129: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20130: LD_INT 14
20132: PPUSH
20133: CALL_OW 435
20137: PUSH
20138: LD_INT 10
20140: LESS
20141: IFFALSE 20164
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20143: LD_INT 1
20145: PPUSH
20146: LD_INT 5
20148: PPUSH
20149: CALL_OW 12
20153: PPUSH
20154: LD_INT 14
20156: PPUSH
20157: LD_INT 1
20159: PPUSH
20160: CALL_OW 55
// end ;
20164: END
// every 0 0$55 trigger sikorskiArriveCounter do
20165: LD_EXP 3
20169: IFFALSE 20209
20171: GO 20173
20173: DISABLE
// begin enable ;
20174: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20175: LD_INT 13
20177: PPUSH
20178: CALL_OW 435
20182: PUSH
20183: LD_INT 10
20185: LESS
20186: IFFALSE 20209
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20188: LD_INT 1
20190: PPUSH
20191: LD_INT 5
20193: PPUSH
20194: CALL_OW 12
20198: PPUSH
20199: LD_INT 13
20201: PPUSH
20202: LD_INT 1
20204: PPUSH
20205: CALL_OW 55
// end ; end_of_file
20209: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20210: LD_INT 0
20212: PPUSH
20213: PPUSH
// if not units then
20214: LD_VAR 0 1
20218: NOT
20219: IFFALSE 20223
// exit ;
20221: GO 20348
// result := false ;
20223: LD_ADDR_VAR 0 4
20227: PUSH
20228: LD_INT 0
20230: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20231: LD_ADDR_VAR 0 5
20235: PUSH
20236: LD_VAR 0 1
20240: PPUSH
20241: LD_INT 26
20243: PUSH
20244: LD_INT 1
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PPUSH
20251: CALL_OW 72
20255: ST_TO_ADDR
// if tmp then
20256: LD_VAR 0 5
20260: IFFALSE 20286
// result := Say ( tmp [ 1 ] , menDialog ) ;
20262: LD_ADDR_VAR 0 4
20266: PUSH
20267: LD_VAR 0 5
20271: PUSH
20272: LD_INT 1
20274: ARRAY
20275: PPUSH
20276: LD_VAR 0 2
20280: PPUSH
20281: CALL_OW 88
20285: ST_TO_ADDR
// if not result then
20286: LD_VAR 0 4
20290: NOT
20291: IFFALSE 20348
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20293: LD_ADDR_VAR 0 5
20297: PUSH
20298: LD_VAR 0 1
20302: PPUSH
20303: LD_INT 26
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 72
20317: ST_TO_ADDR
// if tmp then
20318: LD_VAR 0 5
20322: IFFALSE 20348
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20324: LD_ADDR_VAR 0 4
20328: PUSH
20329: LD_VAR 0 5
20333: PUSH
20334: LD_INT 1
20336: ARRAY
20337: PPUSH
20338: LD_VAR 0 3
20342: PPUSH
20343: CALL_OW 88
20347: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20348: LD_VAR 0 4
20352: RET
// export globalGameSaveCounter ; every 0 0$1 do
20353: GO 20355
20355: DISABLE
// begin enable ;
20356: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20357: LD_STRING updateTimer(
20359: PUSH
20360: LD_OWVAR 1
20364: STR
20365: PUSH
20366: LD_STRING );
20368: STR
20369: PPUSH
20370: CALL_OW 559
// end ;
20374: END
// every 0 0$1 do
20375: GO 20377
20377: DISABLE
// begin globalGameSaveCounter := 0 ;
20378: LD_ADDR_EXP 37
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20386: LD_STRING setGameSaveCounter(0)
20388: PPUSH
20389: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20393: LD_STRING initStreamRollete();
20395: PPUSH
20396: CALL_OW 559
// InitStreamMode ;
20400: CALL 21743 0 0
// DefineStreamItems ( false ) ;
20404: LD_INT 0
20406: PPUSH
20407: CALL 22207 0 1
// end ;
20411: END
// export function SOS_MapStart ( ) ; begin
20412: LD_INT 0
20414: PPUSH
// if streamModeActive then
20415: LD_EXP 38
20419: IFFALSE 20428
// DefineStreamItems ( true ) ;
20421: LD_INT 1
20423: PPUSH
20424: CALL 22207 0 1
// UpdateLuaVariables ( ) ;
20428: CALL 20445 0 0
// UpdateFactoryWaypoints ( ) ;
20432: CALL 35076 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20436: CALL 35333 0 0
// end ;
20440: LD_VAR 0 1
20444: RET
// function UpdateLuaVariables ( ) ; begin
20445: LD_INT 0
20447: PPUSH
// if globalGameSaveCounter then
20448: LD_EXP 37
20452: IFFALSE 20486
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20454: LD_ADDR_EXP 37
20458: PUSH
20459: LD_EXP 37
20463: PPUSH
20464: CALL 80118 0 1
20468: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20469: LD_STRING setGameSaveCounter(
20471: PUSH
20472: LD_EXP 37
20476: STR
20477: PUSH
20478: LD_STRING )
20480: STR
20481: PPUSH
20482: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20486: LD_STRING setGameDifficulty(
20488: PUSH
20489: LD_OWVAR 67
20493: STR
20494: PUSH
20495: LD_STRING )
20497: STR
20498: PPUSH
20499: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20503: LD_STRING displayDifficulty(
20505: PUSH
20506: LD_OWVAR 67
20510: STR
20511: PUSH
20512: LD_STRING )
20514: STR
20515: PPUSH
20516: CALL_OW 559
// end ;
20520: LD_VAR 0 1
20524: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20525: LD_INT 0
20527: PPUSH
// if p2 = stream_mode then
20528: LD_VAR 0 2
20532: PUSH
20533: LD_INT 100
20535: EQUAL
20536: IFFALSE 21539
// begin if not StreamModeActive then
20538: LD_EXP 38
20542: NOT
20543: IFFALSE 20553
// StreamModeActive := true ;
20545: LD_ADDR_EXP 38
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// if p3 = 0 then
20553: LD_VAR 0 3
20557: PUSH
20558: LD_INT 0
20560: EQUAL
20561: IFFALSE 20567
// InitStreamMode ;
20563: CALL 21743 0 0
// if p3 = 1 then
20567: LD_VAR 0 3
20571: PUSH
20572: LD_INT 1
20574: EQUAL
20575: IFFALSE 20585
// sRocket := true ;
20577: LD_ADDR_EXP 43
20581: PUSH
20582: LD_INT 1
20584: ST_TO_ADDR
// if p3 = 2 then
20585: LD_VAR 0 3
20589: PUSH
20590: LD_INT 2
20592: EQUAL
20593: IFFALSE 20603
// sSpeed := true ;
20595: LD_ADDR_EXP 42
20599: PUSH
20600: LD_INT 1
20602: ST_TO_ADDR
// if p3 = 3 then
20603: LD_VAR 0 3
20607: PUSH
20608: LD_INT 3
20610: EQUAL
20611: IFFALSE 20621
// sEngine := true ;
20613: LD_ADDR_EXP 44
20617: PUSH
20618: LD_INT 1
20620: ST_TO_ADDR
// if p3 = 4 then
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 4
20628: EQUAL
20629: IFFALSE 20639
// sSpec := true ;
20631: LD_ADDR_EXP 41
20635: PUSH
20636: LD_INT 1
20638: ST_TO_ADDR
// if p3 = 5 then
20639: LD_VAR 0 3
20643: PUSH
20644: LD_INT 5
20646: EQUAL
20647: IFFALSE 20657
// sLevel := true ;
20649: LD_ADDR_EXP 45
20653: PUSH
20654: LD_INT 1
20656: ST_TO_ADDR
// if p3 = 6 then
20657: LD_VAR 0 3
20661: PUSH
20662: LD_INT 6
20664: EQUAL
20665: IFFALSE 20675
// sArmoury := true ;
20667: LD_ADDR_EXP 46
20671: PUSH
20672: LD_INT 1
20674: ST_TO_ADDR
// if p3 = 7 then
20675: LD_VAR 0 3
20679: PUSH
20680: LD_INT 7
20682: EQUAL
20683: IFFALSE 20693
// sRadar := true ;
20685: LD_ADDR_EXP 47
20689: PUSH
20690: LD_INT 1
20692: ST_TO_ADDR
// if p3 = 8 then
20693: LD_VAR 0 3
20697: PUSH
20698: LD_INT 8
20700: EQUAL
20701: IFFALSE 20711
// sBunker := true ;
20703: LD_ADDR_EXP 48
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if p3 = 9 then
20711: LD_VAR 0 3
20715: PUSH
20716: LD_INT 9
20718: EQUAL
20719: IFFALSE 20729
// sHack := true ;
20721: LD_ADDR_EXP 49
20725: PUSH
20726: LD_INT 1
20728: ST_TO_ADDR
// if p3 = 10 then
20729: LD_VAR 0 3
20733: PUSH
20734: LD_INT 10
20736: EQUAL
20737: IFFALSE 20747
// sFire := true ;
20739: LD_ADDR_EXP 50
20743: PUSH
20744: LD_INT 1
20746: ST_TO_ADDR
// if p3 = 11 then
20747: LD_VAR 0 3
20751: PUSH
20752: LD_INT 11
20754: EQUAL
20755: IFFALSE 20765
// sRefresh := true ;
20757: LD_ADDR_EXP 51
20761: PUSH
20762: LD_INT 1
20764: ST_TO_ADDR
// if p3 = 12 then
20765: LD_VAR 0 3
20769: PUSH
20770: LD_INT 12
20772: EQUAL
20773: IFFALSE 20783
// sExp := true ;
20775: LD_ADDR_EXP 52
20779: PUSH
20780: LD_INT 1
20782: ST_TO_ADDR
// if p3 = 13 then
20783: LD_VAR 0 3
20787: PUSH
20788: LD_INT 13
20790: EQUAL
20791: IFFALSE 20801
// sDepot := true ;
20793: LD_ADDR_EXP 53
20797: PUSH
20798: LD_INT 1
20800: ST_TO_ADDR
// if p3 = 14 then
20801: LD_VAR 0 3
20805: PUSH
20806: LD_INT 14
20808: EQUAL
20809: IFFALSE 20819
// sFlag := true ;
20811: LD_ADDR_EXP 54
20815: PUSH
20816: LD_INT 1
20818: ST_TO_ADDR
// if p3 = 15 then
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 15
20826: EQUAL
20827: IFFALSE 20837
// sKamikadze := true ;
20829: LD_ADDR_EXP 62
20833: PUSH
20834: LD_INT 1
20836: ST_TO_ADDR
// if p3 = 16 then
20837: LD_VAR 0 3
20841: PUSH
20842: LD_INT 16
20844: EQUAL
20845: IFFALSE 20855
// sTroll := true ;
20847: LD_ADDR_EXP 63
20851: PUSH
20852: LD_INT 1
20854: ST_TO_ADDR
// if p3 = 17 then
20855: LD_VAR 0 3
20859: PUSH
20860: LD_INT 17
20862: EQUAL
20863: IFFALSE 20873
// sSlow := true ;
20865: LD_ADDR_EXP 64
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// if p3 = 18 then
20873: LD_VAR 0 3
20877: PUSH
20878: LD_INT 18
20880: EQUAL
20881: IFFALSE 20891
// sLack := true ;
20883: LD_ADDR_EXP 65
20887: PUSH
20888: LD_INT 1
20890: ST_TO_ADDR
// if p3 = 19 then
20891: LD_VAR 0 3
20895: PUSH
20896: LD_INT 19
20898: EQUAL
20899: IFFALSE 20909
// sTank := true ;
20901: LD_ADDR_EXP 67
20905: PUSH
20906: LD_INT 1
20908: ST_TO_ADDR
// if p3 = 20 then
20909: LD_VAR 0 3
20913: PUSH
20914: LD_INT 20
20916: EQUAL
20917: IFFALSE 20927
// sRemote := true ;
20919: LD_ADDR_EXP 68
20923: PUSH
20924: LD_INT 1
20926: ST_TO_ADDR
// if p3 = 21 then
20927: LD_VAR 0 3
20931: PUSH
20932: LD_INT 21
20934: EQUAL
20935: IFFALSE 20945
// sPowell := true ;
20937: LD_ADDR_EXP 69
20941: PUSH
20942: LD_INT 1
20944: ST_TO_ADDR
// if p3 = 22 then
20945: LD_VAR 0 3
20949: PUSH
20950: LD_INT 22
20952: EQUAL
20953: IFFALSE 20963
// sTeleport := true ;
20955: LD_ADDR_EXP 72
20959: PUSH
20960: LD_INT 1
20962: ST_TO_ADDR
// if p3 = 23 then
20963: LD_VAR 0 3
20967: PUSH
20968: LD_INT 23
20970: EQUAL
20971: IFFALSE 20981
// sOilTower := true ;
20973: LD_ADDR_EXP 74
20977: PUSH
20978: LD_INT 1
20980: ST_TO_ADDR
// if p3 = 24 then
20981: LD_VAR 0 3
20985: PUSH
20986: LD_INT 24
20988: EQUAL
20989: IFFALSE 20999
// sShovel := true ;
20991: LD_ADDR_EXP 75
20995: PUSH
20996: LD_INT 1
20998: ST_TO_ADDR
// if p3 = 25 then
20999: LD_VAR 0 3
21003: PUSH
21004: LD_INT 25
21006: EQUAL
21007: IFFALSE 21017
// sSheik := true ;
21009: LD_ADDR_EXP 76
21013: PUSH
21014: LD_INT 1
21016: ST_TO_ADDR
// if p3 = 26 then
21017: LD_VAR 0 3
21021: PUSH
21022: LD_INT 26
21024: EQUAL
21025: IFFALSE 21035
// sEarthquake := true ;
21027: LD_ADDR_EXP 78
21031: PUSH
21032: LD_INT 1
21034: ST_TO_ADDR
// if p3 = 27 then
21035: LD_VAR 0 3
21039: PUSH
21040: LD_INT 27
21042: EQUAL
21043: IFFALSE 21053
// sAI := true ;
21045: LD_ADDR_EXP 79
21049: PUSH
21050: LD_INT 1
21052: ST_TO_ADDR
// if p3 = 28 then
21053: LD_VAR 0 3
21057: PUSH
21058: LD_INT 28
21060: EQUAL
21061: IFFALSE 21071
// sCargo := true ;
21063: LD_ADDR_EXP 82
21067: PUSH
21068: LD_INT 1
21070: ST_TO_ADDR
// if p3 = 29 then
21071: LD_VAR 0 3
21075: PUSH
21076: LD_INT 29
21078: EQUAL
21079: IFFALSE 21089
// sDLaser := true ;
21081: LD_ADDR_EXP 83
21085: PUSH
21086: LD_INT 1
21088: ST_TO_ADDR
// if p3 = 30 then
21089: LD_VAR 0 3
21093: PUSH
21094: LD_INT 30
21096: EQUAL
21097: IFFALSE 21107
// sExchange := true ;
21099: LD_ADDR_EXP 84
21103: PUSH
21104: LD_INT 1
21106: ST_TO_ADDR
// if p3 = 31 then
21107: LD_VAR 0 3
21111: PUSH
21112: LD_INT 31
21114: EQUAL
21115: IFFALSE 21125
// sFac := true ;
21117: LD_ADDR_EXP 85
21121: PUSH
21122: LD_INT 1
21124: ST_TO_ADDR
// if p3 = 32 then
21125: LD_VAR 0 3
21129: PUSH
21130: LD_INT 32
21132: EQUAL
21133: IFFALSE 21143
// sPower := true ;
21135: LD_ADDR_EXP 86
21139: PUSH
21140: LD_INT 1
21142: ST_TO_ADDR
// if p3 = 33 then
21143: LD_VAR 0 3
21147: PUSH
21148: LD_INT 33
21150: EQUAL
21151: IFFALSE 21161
// sRandom := true ;
21153: LD_ADDR_EXP 87
21157: PUSH
21158: LD_INT 1
21160: ST_TO_ADDR
// if p3 = 34 then
21161: LD_VAR 0 3
21165: PUSH
21166: LD_INT 34
21168: EQUAL
21169: IFFALSE 21179
// sShield := true ;
21171: LD_ADDR_EXP 88
21175: PUSH
21176: LD_INT 1
21178: ST_TO_ADDR
// if p3 = 35 then
21179: LD_VAR 0 3
21183: PUSH
21184: LD_INT 35
21186: EQUAL
21187: IFFALSE 21197
// sTime := true ;
21189: LD_ADDR_EXP 89
21193: PUSH
21194: LD_INT 1
21196: ST_TO_ADDR
// if p3 = 36 then
21197: LD_VAR 0 3
21201: PUSH
21202: LD_INT 36
21204: EQUAL
21205: IFFALSE 21215
// sTools := true ;
21207: LD_ADDR_EXP 90
21211: PUSH
21212: LD_INT 1
21214: ST_TO_ADDR
// if p3 = 101 then
21215: LD_VAR 0 3
21219: PUSH
21220: LD_INT 101
21222: EQUAL
21223: IFFALSE 21233
// sSold := true ;
21225: LD_ADDR_EXP 55
21229: PUSH
21230: LD_INT 1
21232: ST_TO_ADDR
// if p3 = 102 then
21233: LD_VAR 0 3
21237: PUSH
21238: LD_INT 102
21240: EQUAL
21241: IFFALSE 21251
// sDiff := true ;
21243: LD_ADDR_EXP 56
21247: PUSH
21248: LD_INT 1
21250: ST_TO_ADDR
// if p3 = 103 then
21251: LD_VAR 0 3
21255: PUSH
21256: LD_INT 103
21258: EQUAL
21259: IFFALSE 21269
// sFog := true ;
21261: LD_ADDR_EXP 59
21265: PUSH
21266: LD_INT 1
21268: ST_TO_ADDR
// if p3 = 104 then
21269: LD_VAR 0 3
21273: PUSH
21274: LD_INT 104
21276: EQUAL
21277: IFFALSE 21287
// sReset := true ;
21279: LD_ADDR_EXP 60
21283: PUSH
21284: LD_INT 1
21286: ST_TO_ADDR
// if p3 = 105 then
21287: LD_VAR 0 3
21291: PUSH
21292: LD_INT 105
21294: EQUAL
21295: IFFALSE 21305
// sSun := true ;
21297: LD_ADDR_EXP 61
21301: PUSH
21302: LD_INT 1
21304: ST_TO_ADDR
// if p3 = 106 then
21305: LD_VAR 0 3
21309: PUSH
21310: LD_INT 106
21312: EQUAL
21313: IFFALSE 21323
// sTiger := true ;
21315: LD_ADDR_EXP 57
21319: PUSH
21320: LD_INT 1
21322: ST_TO_ADDR
// if p3 = 107 then
21323: LD_VAR 0 3
21327: PUSH
21328: LD_INT 107
21330: EQUAL
21331: IFFALSE 21341
// sBomb := true ;
21333: LD_ADDR_EXP 58
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
// if p3 = 108 then
21341: LD_VAR 0 3
21345: PUSH
21346: LD_INT 108
21348: EQUAL
21349: IFFALSE 21359
// sWound := true ;
21351: LD_ADDR_EXP 66
21355: PUSH
21356: LD_INT 1
21358: ST_TO_ADDR
// if p3 = 109 then
21359: LD_VAR 0 3
21363: PUSH
21364: LD_INT 109
21366: EQUAL
21367: IFFALSE 21377
// sBetray := true ;
21369: LD_ADDR_EXP 70
21373: PUSH
21374: LD_INT 1
21376: ST_TO_ADDR
// if p3 = 110 then
21377: LD_VAR 0 3
21381: PUSH
21382: LD_INT 110
21384: EQUAL
21385: IFFALSE 21395
// sContamin := true ;
21387: LD_ADDR_EXP 71
21391: PUSH
21392: LD_INT 1
21394: ST_TO_ADDR
// if p3 = 111 then
21395: LD_VAR 0 3
21399: PUSH
21400: LD_INT 111
21402: EQUAL
21403: IFFALSE 21413
// sOil := true ;
21405: LD_ADDR_EXP 73
21409: PUSH
21410: LD_INT 1
21412: ST_TO_ADDR
// if p3 = 112 then
21413: LD_VAR 0 3
21417: PUSH
21418: LD_INT 112
21420: EQUAL
21421: IFFALSE 21431
// sStu := true ;
21423: LD_ADDR_EXP 77
21427: PUSH
21428: LD_INT 1
21430: ST_TO_ADDR
// if p3 = 113 then
21431: LD_VAR 0 3
21435: PUSH
21436: LD_INT 113
21438: EQUAL
21439: IFFALSE 21449
// sBazooka := true ;
21441: LD_ADDR_EXP 80
21445: PUSH
21446: LD_INT 1
21448: ST_TO_ADDR
// if p3 = 114 then
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 114
21456: EQUAL
21457: IFFALSE 21467
// sMortar := true ;
21459: LD_ADDR_EXP 81
21463: PUSH
21464: LD_INT 1
21466: ST_TO_ADDR
// if p3 = 115 then
21467: LD_VAR 0 3
21471: PUSH
21472: LD_INT 115
21474: EQUAL
21475: IFFALSE 21485
// sRanger := true ;
21477: LD_ADDR_EXP 91
21481: PUSH
21482: LD_INT 1
21484: ST_TO_ADDR
// if p3 = 116 then
21485: LD_VAR 0 3
21489: PUSH
21490: LD_INT 116
21492: EQUAL
21493: IFFALSE 21503
// sComputer := true ;
21495: LD_ADDR_EXP 92
21499: PUSH
21500: LD_INT 1
21502: ST_TO_ADDR
// if p3 = 117 then
21503: LD_VAR 0 3
21507: PUSH
21508: LD_INT 117
21510: EQUAL
21511: IFFALSE 21521
// s30 := true ;
21513: LD_ADDR_EXP 93
21517: PUSH
21518: LD_INT 1
21520: ST_TO_ADDR
// if p3 = 118 then
21521: LD_VAR 0 3
21525: PUSH
21526: LD_INT 118
21528: EQUAL
21529: IFFALSE 21539
// s60 := true ;
21531: LD_ADDR_EXP 94
21535: PUSH
21536: LD_INT 1
21538: ST_TO_ADDR
// end ; if p2 = hack_mode then
21539: LD_VAR 0 2
21543: PUSH
21544: LD_INT 101
21546: EQUAL
21547: IFFALSE 21675
// begin case p3 of 1 :
21549: LD_VAR 0 3
21553: PUSH
21554: LD_INT 1
21556: DOUBLE
21557: EQUAL
21558: IFTRUE 21562
21560: GO 21569
21562: POP
// hHackUnlimitedResources ; 2 :
21563: CALL 33822 0 0
21567: GO 21675
21569: LD_INT 2
21571: DOUBLE
21572: EQUAL
21573: IFTRUE 21577
21575: GO 21584
21577: POP
// hHackSetLevel10 ; 3 :
21578: CALL 33955 0 0
21582: GO 21675
21584: LD_INT 3
21586: DOUBLE
21587: EQUAL
21588: IFTRUE 21592
21590: GO 21599
21592: POP
// hHackSetLevel10YourUnits ; 4 :
21593: CALL 34040 0 0
21597: GO 21675
21599: LD_INT 4
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21614
21607: POP
// hHackInvincible ; 5 :
21608: CALL 34488 0 0
21612: GO 21675
21614: LD_INT 5
21616: DOUBLE
21617: EQUAL
21618: IFTRUE 21622
21620: GO 21629
21622: POP
// hHackInvisible ; 6 :
21623: CALL 34599 0 0
21627: GO 21675
21629: LD_INT 6
21631: DOUBLE
21632: EQUAL
21633: IFTRUE 21637
21635: GO 21644
21637: POP
// hHackChangeYourSide ; 7 :
21638: CALL 34656 0 0
21642: GO 21675
21644: LD_INT 7
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21659
21652: POP
// hHackChangeUnitSide ; 8 :
21653: CALL 34698 0 0
21657: GO 21675
21659: LD_INT 8
21661: DOUBLE
21662: EQUAL
21663: IFTRUE 21667
21665: GO 21674
21667: POP
// hHackFog ; end ;
21668: CALL 34799 0 0
21672: GO 21675
21674: POP
// end ; if p2 = game_save_mode then
21675: LD_VAR 0 2
21679: PUSH
21680: LD_INT 102
21682: EQUAL
21683: IFFALSE 21738
// begin if p3 = 1 then
21685: LD_VAR 0 3
21689: PUSH
21690: LD_INT 1
21692: EQUAL
21693: IFFALSE 21705
// globalGameSaveCounter := p4 ;
21695: LD_ADDR_EXP 37
21699: PUSH
21700: LD_VAR 0 4
21704: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21705: LD_VAR 0 3
21709: PUSH
21710: LD_INT 2
21712: EQUAL
21713: PUSH
21714: LD_EXP 37
21718: AND
21719: IFFALSE 21738
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21721: LD_STRING setGameSaveCounter(
21723: PUSH
21724: LD_EXP 37
21728: STR
21729: PUSH
21730: LD_STRING )
21732: STR
21733: PPUSH
21734: CALL_OW 559
// end ; end ;
21738: LD_VAR 0 7
21742: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21743: LD_INT 0
21745: PPUSH
// streamModeActive := false ;
21746: LD_ADDR_EXP 38
21750: PUSH
21751: LD_INT 0
21753: ST_TO_ADDR
// normalCounter := 36 ;
21754: LD_ADDR_EXP 39
21758: PUSH
21759: LD_INT 36
21761: ST_TO_ADDR
// hardcoreCounter := 18 ;
21762: LD_ADDR_EXP 40
21766: PUSH
21767: LD_INT 18
21769: ST_TO_ADDR
// sRocket := false ;
21770: LD_ADDR_EXP 43
21774: PUSH
21775: LD_INT 0
21777: ST_TO_ADDR
// sSpeed := false ;
21778: LD_ADDR_EXP 42
21782: PUSH
21783: LD_INT 0
21785: ST_TO_ADDR
// sEngine := false ;
21786: LD_ADDR_EXP 44
21790: PUSH
21791: LD_INT 0
21793: ST_TO_ADDR
// sSpec := false ;
21794: LD_ADDR_EXP 41
21798: PUSH
21799: LD_INT 0
21801: ST_TO_ADDR
// sLevel := false ;
21802: LD_ADDR_EXP 45
21806: PUSH
21807: LD_INT 0
21809: ST_TO_ADDR
// sArmoury := false ;
21810: LD_ADDR_EXP 46
21814: PUSH
21815: LD_INT 0
21817: ST_TO_ADDR
// sRadar := false ;
21818: LD_ADDR_EXP 47
21822: PUSH
21823: LD_INT 0
21825: ST_TO_ADDR
// sBunker := false ;
21826: LD_ADDR_EXP 48
21830: PUSH
21831: LD_INT 0
21833: ST_TO_ADDR
// sHack := false ;
21834: LD_ADDR_EXP 49
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// sFire := false ;
21842: LD_ADDR_EXP 50
21846: PUSH
21847: LD_INT 0
21849: ST_TO_ADDR
// sRefresh := false ;
21850: LD_ADDR_EXP 51
21854: PUSH
21855: LD_INT 0
21857: ST_TO_ADDR
// sExp := false ;
21858: LD_ADDR_EXP 52
21862: PUSH
21863: LD_INT 0
21865: ST_TO_ADDR
// sDepot := false ;
21866: LD_ADDR_EXP 53
21870: PUSH
21871: LD_INT 0
21873: ST_TO_ADDR
// sFlag := false ;
21874: LD_ADDR_EXP 54
21878: PUSH
21879: LD_INT 0
21881: ST_TO_ADDR
// sKamikadze := false ;
21882: LD_ADDR_EXP 62
21886: PUSH
21887: LD_INT 0
21889: ST_TO_ADDR
// sTroll := false ;
21890: LD_ADDR_EXP 63
21894: PUSH
21895: LD_INT 0
21897: ST_TO_ADDR
// sSlow := false ;
21898: LD_ADDR_EXP 64
21902: PUSH
21903: LD_INT 0
21905: ST_TO_ADDR
// sLack := false ;
21906: LD_ADDR_EXP 65
21910: PUSH
21911: LD_INT 0
21913: ST_TO_ADDR
// sTank := false ;
21914: LD_ADDR_EXP 67
21918: PUSH
21919: LD_INT 0
21921: ST_TO_ADDR
// sRemote := false ;
21922: LD_ADDR_EXP 68
21926: PUSH
21927: LD_INT 0
21929: ST_TO_ADDR
// sPowell := false ;
21930: LD_ADDR_EXP 69
21934: PUSH
21935: LD_INT 0
21937: ST_TO_ADDR
// sTeleport := false ;
21938: LD_ADDR_EXP 72
21942: PUSH
21943: LD_INT 0
21945: ST_TO_ADDR
// sOilTower := false ;
21946: LD_ADDR_EXP 74
21950: PUSH
21951: LD_INT 0
21953: ST_TO_ADDR
// sShovel := false ;
21954: LD_ADDR_EXP 75
21958: PUSH
21959: LD_INT 0
21961: ST_TO_ADDR
// sSheik := false ;
21962: LD_ADDR_EXP 76
21966: PUSH
21967: LD_INT 0
21969: ST_TO_ADDR
// sEarthquake := false ;
21970: LD_ADDR_EXP 78
21974: PUSH
21975: LD_INT 0
21977: ST_TO_ADDR
// sAI := false ;
21978: LD_ADDR_EXP 79
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
// sCargo := false ;
21986: LD_ADDR_EXP 82
21990: PUSH
21991: LD_INT 0
21993: ST_TO_ADDR
// sDLaser := false ;
21994: LD_ADDR_EXP 83
21998: PUSH
21999: LD_INT 0
22001: ST_TO_ADDR
// sExchange := false ;
22002: LD_ADDR_EXP 84
22006: PUSH
22007: LD_INT 0
22009: ST_TO_ADDR
// sFac := false ;
22010: LD_ADDR_EXP 85
22014: PUSH
22015: LD_INT 0
22017: ST_TO_ADDR
// sPower := false ;
22018: LD_ADDR_EXP 86
22022: PUSH
22023: LD_INT 0
22025: ST_TO_ADDR
// sRandom := false ;
22026: LD_ADDR_EXP 87
22030: PUSH
22031: LD_INT 0
22033: ST_TO_ADDR
// sShield := false ;
22034: LD_ADDR_EXP 88
22038: PUSH
22039: LD_INT 0
22041: ST_TO_ADDR
// sTime := false ;
22042: LD_ADDR_EXP 89
22046: PUSH
22047: LD_INT 0
22049: ST_TO_ADDR
// sTools := false ;
22050: LD_ADDR_EXP 90
22054: PUSH
22055: LD_INT 0
22057: ST_TO_ADDR
// sSold := false ;
22058: LD_ADDR_EXP 55
22062: PUSH
22063: LD_INT 0
22065: ST_TO_ADDR
// sDiff := false ;
22066: LD_ADDR_EXP 56
22070: PUSH
22071: LD_INT 0
22073: ST_TO_ADDR
// sFog := false ;
22074: LD_ADDR_EXP 59
22078: PUSH
22079: LD_INT 0
22081: ST_TO_ADDR
// sReset := false ;
22082: LD_ADDR_EXP 60
22086: PUSH
22087: LD_INT 0
22089: ST_TO_ADDR
// sSun := false ;
22090: LD_ADDR_EXP 61
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// sTiger := false ;
22098: LD_ADDR_EXP 57
22102: PUSH
22103: LD_INT 0
22105: ST_TO_ADDR
// sBomb := false ;
22106: LD_ADDR_EXP 58
22110: PUSH
22111: LD_INT 0
22113: ST_TO_ADDR
// sWound := false ;
22114: LD_ADDR_EXP 66
22118: PUSH
22119: LD_INT 0
22121: ST_TO_ADDR
// sBetray := false ;
22122: LD_ADDR_EXP 70
22126: PUSH
22127: LD_INT 0
22129: ST_TO_ADDR
// sContamin := false ;
22130: LD_ADDR_EXP 71
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// sOil := false ;
22138: LD_ADDR_EXP 73
22142: PUSH
22143: LD_INT 0
22145: ST_TO_ADDR
// sStu := false ;
22146: LD_ADDR_EXP 77
22150: PUSH
22151: LD_INT 0
22153: ST_TO_ADDR
// sBazooka := false ;
22154: LD_ADDR_EXP 80
22158: PUSH
22159: LD_INT 0
22161: ST_TO_ADDR
// sMortar := false ;
22162: LD_ADDR_EXP 81
22166: PUSH
22167: LD_INT 0
22169: ST_TO_ADDR
// sRanger := false ;
22170: LD_ADDR_EXP 91
22174: PUSH
22175: LD_INT 0
22177: ST_TO_ADDR
// sComputer := false ;
22178: LD_ADDR_EXP 92
22182: PUSH
22183: LD_INT 0
22185: ST_TO_ADDR
// s30 := false ;
22186: LD_ADDR_EXP 93
22190: PUSH
22191: LD_INT 0
22193: ST_TO_ADDR
// s60 := false ;
22194: LD_ADDR_EXP 94
22198: PUSH
22199: LD_INT 0
22201: ST_TO_ADDR
// end ;
22202: LD_VAR 0 1
22206: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22207: LD_INT 0
22209: PPUSH
22210: PPUSH
22211: PPUSH
22212: PPUSH
22213: PPUSH
22214: PPUSH
22215: PPUSH
// result := [ ] ;
22216: LD_ADDR_VAR 0 2
22220: PUSH
22221: EMPTY
22222: ST_TO_ADDR
// if campaign_id = 1 then
22223: LD_OWVAR 69
22227: PUSH
22228: LD_INT 1
22230: EQUAL
22231: IFFALSE 25397
// begin case mission_number of 1 :
22233: LD_OWVAR 70
22237: PUSH
22238: LD_INT 1
22240: DOUBLE
22241: EQUAL
22242: IFTRUE 22246
22244: GO 22322
22246: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: LD_INT 4
22257: PUSH
22258: LD_INT 11
22260: PUSH
22261: LD_INT 12
22263: PUSH
22264: LD_INT 15
22266: PUSH
22267: LD_INT 16
22269: PUSH
22270: LD_INT 22
22272: PUSH
22273: LD_INT 23
22275: PUSH
22276: LD_INT 26
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 101
22292: PUSH
22293: LD_INT 102
22295: PUSH
22296: LD_INT 106
22298: PUSH
22299: LD_INT 116
22301: PUSH
22302: LD_INT 117
22304: PUSH
22305: LD_INT 118
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: ST_TO_ADDR
22320: GO 25395
22322: LD_INT 2
22324: DOUBLE
22325: EQUAL
22326: IFTRUE 22330
22328: GO 22414
22330: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 4
22341: PUSH
22342: LD_INT 11
22344: PUSH
22345: LD_INT 12
22347: PUSH
22348: LD_INT 15
22350: PUSH
22351: LD_INT 16
22353: PUSH
22354: LD_INT 22
22356: PUSH
22357: LD_INT 23
22359: PUSH
22360: LD_INT 26
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 101
22376: PUSH
22377: LD_INT 102
22379: PUSH
22380: LD_INT 105
22382: PUSH
22383: LD_INT 106
22385: PUSH
22386: LD_INT 108
22388: PUSH
22389: LD_INT 116
22391: PUSH
22392: LD_INT 117
22394: PUSH
22395: LD_INT 118
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: ST_TO_ADDR
22412: GO 25395
22414: LD_INT 3
22416: DOUBLE
22417: EQUAL
22418: IFTRUE 22422
22420: GO 22510
22422: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22423: LD_ADDR_VAR 0 2
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 4
22433: PUSH
22434: LD_INT 5
22436: PUSH
22437: LD_INT 11
22439: PUSH
22440: LD_INT 12
22442: PUSH
22443: LD_INT 15
22445: PUSH
22446: LD_INT 16
22448: PUSH
22449: LD_INT 22
22451: PUSH
22452: LD_INT 26
22454: PUSH
22455: LD_INT 36
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 101
22472: PUSH
22473: LD_INT 102
22475: PUSH
22476: LD_INT 105
22478: PUSH
22479: LD_INT 106
22481: PUSH
22482: LD_INT 108
22484: PUSH
22485: LD_INT 116
22487: PUSH
22488: LD_INT 117
22490: PUSH
22491: LD_INT 118
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: ST_TO_ADDR
22508: GO 25395
22510: LD_INT 4
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22614
22518: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: LD_INT 4
22529: PUSH
22530: LD_INT 5
22532: PUSH
22533: LD_INT 8
22535: PUSH
22536: LD_INT 11
22538: PUSH
22539: LD_INT 12
22541: PUSH
22542: LD_INT 15
22544: PUSH
22545: LD_INT 16
22547: PUSH
22548: LD_INT 22
22550: PUSH
22551: LD_INT 23
22553: PUSH
22554: LD_INT 26
22556: PUSH
22557: LD_INT 36
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 101
22576: PUSH
22577: LD_INT 102
22579: PUSH
22580: LD_INT 105
22582: PUSH
22583: LD_INT 106
22585: PUSH
22586: LD_INT 108
22588: PUSH
22589: LD_INT 116
22591: PUSH
22592: LD_INT 117
22594: PUSH
22595: LD_INT 118
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: ST_TO_ADDR
22612: GO 25395
22614: LD_INT 5
22616: DOUBLE
22617: EQUAL
22618: IFTRUE 22622
22620: GO 22734
22622: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22623: LD_ADDR_VAR 0 2
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: LD_INT 4
22633: PUSH
22634: LD_INT 5
22636: PUSH
22637: LD_INT 6
22639: PUSH
22640: LD_INT 8
22642: PUSH
22643: LD_INT 11
22645: PUSH
22646: LD_INT 12
22648: PUSH
22649: LD_INT 15
22651: PUSH
22652: LD_INT 16
22654: PUSH
22655: LD_INT 22
22657: PUSH
22658: LD_INT 23
22660: PUSH
22661: LD_INT 25
22663: PUSH
22664: LD_INT 26
22666: PUSH
22667: LD_INT 36
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 101
22688: PUSH
22689: LD_INT 102
22691: PUSH
22692: LD_INT 105
22694: PUSH
22695: LD_INT 106
22697: PUSH
22698: LD_INT 108
22700: PUSH
22701: LD_INT 109
22703: PUSH
22704: LD_INT 112
22706: PUSH
22707: LD_INT 116
22709: PUSH
22710: LD_INT 117
22712: PUSH
22713: LD_INT 118
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: ST_TO_ADDR
22732: GO 25395
22734: LD_INT 6
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22874
22742: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22743: LD_ADDR_VAR 0 2
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 4
22753: PUSH
22754: LD_INT 5
22756: PUSH
22757: LD_INT 6
22759: PUSH
22760: LD_INT 8
22762: PUSH
22763: LD_INT 11
22765: PUSH
22766: LD_INT 12
22768: PUSH
22769: LD_INT 15
22771: PUSH
22772: LD_INT 16
22774: PUSH
22775: LD_INT 20
22777: PUSH
22778: LD_INT 21
22780: PUSH
22781: LD_INT 22
22783: PUSH
22784: LD_INT 23
22786: PUSH
22787: LD_INT 25
22789: PUSH
22790: LD_INT 26
22792: PUSH
22793: LD_INT 30
22795: PUSH
22796: LD_INT 31
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: LD_INT 36
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 101
22828: PUSH
22829: LD_INT 102
22831: PUSH
22832: LD_INT 105
22834: PUSH
22835: LD_INT 106
22837: PUSH
22838: LD_INT 108
22840: PUSH
22841: LD_INT 109
22843: PUSH
22844: LD_INT 112
22846: PUSH
22847: LD_INT 116
22849: PUSH
22850: LD_INT 117
22852: PUSH
22853: LD_INT 118
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: ST_TO_ADDR
22872: GO 25395
22874: LD_INT 7
22876: DOUBLE
22877: EQUAL
22878: IFTRUE 22882
22880: GO 22994
22882: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22883: LD_ADDR_VAR 0 2
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 4
22893: PUSH
22894: LD_INT 5
22896: PUSH
22897: LD_INT 7
22899: PUSH
22900: LD_INT 11
22902: PUSH
22903: LD_INT 12
22905: PUSH
22906: LD_INT 15
22908: PUSH
22909: LD_INT 16
22911: PUSH
22912: LD_INT 20
22914: PUSH
22915: LD_INT 21
22917: PUSH
22918: LD_INT 22
22920: PUSH
22921: LD_INT 23
22923: PUSH
22924: LD_INT 25
22926: PUSH
22927: LD_INT 26
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 101
22948: PUSH
22949: LD_INT 102
22951: PUSH
22952: LD_INT 103
22954: PUSH
22955: LD_INT 105
22957: PUSH
22958: LD_INT 106
22960: PUSH
22961: LD_INT 108
22963: PUSH
22964: LD_INT 112
22966: PUSH
22967: LD_INT 116
22969: PUSH
22970: LD_INT 117
22972: PUSH
22973: LD_INT 118
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: ST_TO_ADDR
22992: GO 25395
22994: LD_INT 8
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23142
23002: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23003: LD_ADDR_VAR 0 2
23007: PUSH
23008: LD_INT 2
23010: PUSH
23011: LD_INT 4
23013: PUSH
23014: LD_INT 5
23016: PUSH
23017: LD_INT 6
23019: PUSH
23020: LD_INT 7
23022: PUSH
23023: LD_INT 8
23025: PUSH
23026: LD_INT 11
23028: PUSH
23029: LD_INT 12
23031: PUSH
23032: LD_INT 15
23034: PUSH
23035: LD_INT 16
23037: PUSH
23038: LD_INT 20
23040: PUSH
23041: LD_INT 21
23043: PUSH
23044: LD_INT 22
23046: PUSH
23047: LD_INT 23
23049: PUSH
23050: LD_INT 25
23052: PUSH
23053: LD_INT 26
23055: PUSH
23056: LD_INT 30
23058: PUSH
23059: LD_INT 31
23061: PUSH
23062: LD_INT 32
23064: PUSH
23065: LD_INT 36
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 101
23092: PUSH
23093: LD_INT 102
23095: PUSH
23096: LD_INT 103
23098: PUSH
23099: LD_INT 105
23101: PUSH
23102: LD_INT 106
23104: PUSH
23105: LD_INT 108
23107: PUSH
23108: LD_INT 109
23110: PUSH
23111: LD_INT 112
23113: PUSH
23114: LD_INT 116
23116: PUSH
23117: LD_INT 117
23119: PUSH
23120: LD_INT 118
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: ST_TO_ADDR
23140: GO 25395
23142: LD_INT 9
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23298
23150: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: LD_INT 4
23161: PUSH
23162: LD_INT 5
23164: PUSH
23165: LD_INT 6
23167: PUSH
23168: LD_INT 7
23170: PUSH
23171: LD_INT 8
23173: PUSH
23174: LD_INT 11
23176: PUSH
23177: LD_INT 12
23179: PUSH
23180: LD_INT 15
23182: PUSH
23183: LD_INT 16
23185: PUSH
23186: LD_INT 20
23188: PUSH
23189: LD_INT 21
23191: PUSH
23192: LD_INT 22
23194: PUSH
23195: LD_INT 23
23197: PUSH
23198: LD_INT 25
23200: PUSH
23201: LD_INT 26
23203: PUSH
23204: LD_INT 28
23206: PUSH
23207: LD_INT 30
23209: PUSH
23210: LD_INT 31
23212: PUSH
23213: LD_INT 32
23215: PUSH
23216: LD_INT 36
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 101
23244: PUSH
23245: LD_INT 102
23247: PUSH
23248: LD_INT 103
23250: PUSH
23251: LD_INT 105
23253: PUSH
23254: LD_INT 106
23256: PUSH
23257: LD_INT 108
23259: PUSH
23260: LD_INT 109
23262: PUSH
23263: LD_INT 112
23265: PUSH
23266: LD_INT 114
23268: PUSH
23269: LD_INT 116
23271: PUSH
23272: LD_INT 117
23274: PUSH
23275: LD_INT 118
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: ST_TO_ADDR
23296: GO 25395
23298: LD_INT 10
23300: DOUBLE
23301: EQUAL
23302: IFTRUE 23306
23304: GO 23502
23306: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23307: LD_ADDR_VAR 0 2
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: LD_INT 4
23317: PUSH
23318: LD_INT 5
23320: PUSH
23321: LD_INT 6
23323: PUSH
23324: LD_INT 7
23326: PUSH
23327: LD_INT 8
23329: PUSH
23330: LD_INT 9
23332: PUSH
23333: LD_INT 10
23335: PUSH
23336: LD_INT 11
23338: PUSH
23339: LD_INT 12
23341: PUSH
23342: LD_INT 13
23344: PUSH
23345: LD_INT 14
23347: PUSH
23348: LD_INT 15
23350: PUSH
23351: LD_INT 16
23353: PUSH
23354: LD_INT 17
23356: PUSH
23357: LD_INT 18
23359: PUSH
23360: LD_INT 19
23362: PUSH
23363: LD_INT 20
23365: PUSH
23366: LD_INT 21
23368: PUSH
23369: LD_INT 22
23371: PUSH
23372: LD_INT 23
23374: PUSH
23375: LD_INT 24
23377: PUSH
23378: LD_INT 25
23380: PUSH
23381: LD_INT 26
23383: PUSH
23384: LD_INT 28
23386: PUSH
23387: LD_INT 30
23389: PUSH
23390: LD_INT 31
23392: PUSH
23393: LD_INT 32
23395: PUSH
23396: LD_INT 36
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 101
23432: PUSH
23433: LD_INT 102
23435: PUSH
23436: LD_INT 103
23438: PUSH
23439: LD_INT 104
23441: PUSH
23442: LD_INT 105
23444: PUSH
23445: LD_INT 106
23447: PUSH
23448: LD_INT 107
23450: PUSH
23451: LD_INT 108
23453: PUSH
23454: LD_INT 109
23456: PUSH
23457: LD_INT 110
23459: PUSH
23460: LD_INT 111
23462: PUSH
23463: LD_INT 112
23465: PUSH
23466: LD_INT 114
23468: PUSH
23469: LD_INT 116
23471: PUSH
23472: LD_INT 117
23474: PUSH
23475: LD_INT 118
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: ST_TO_ADDR
23500: GO 25395
23502: LD_INT 11
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23714
23510: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: LD_INT 4
23524: PUSH
23525: LD_INT 5
23527: PUSH
23528: LD_INT 6
23530: PUSH
23531: LD_INT 7
23533: PUSH
23534: LD_INT 8
23536: PUSH
23537: LD_INT 9
23539: PUSH
23540: LD_INT 10
23542: PUSH
23543: LD_INT 11
23545: PUSH
23546: LD_INT 12
23548: PUSH
23549: LD_INT 13
23551: PUSH
23552: LD_INT 14
23554: PUSH
23555: LD_INT 15
23557: PUSH
23558: LD_INT 16
23560: PUSH
23561: LD_INT 17
23563: PUSH
23564: LD_INT 18
23566: PUSH
23567: LD_INT 19
23569: PUSH
23570: LD_INT 20
23572: PUSH
23573: LD_INT 21
23575: PUSH
23576: LD_INT 22
23578: PUSH
23579: LD_INT 23
23581: PUSH
23582: LD_INT 24
23584: PUSH
23585: LD_INT 25
23587: PUSH
23588: LD_INT 26
23590: PUSH
23591: LD_INT 28
23593: PUSH
23594: LD_INT 30
23596: PUSH
23597: LD_INT 31
23599: PUSH
23600: LD_INT 32
23602: PUSH
23603: LD_INT 34
23605: PUSH
23606: LD_INT 36
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 101
23644: PUSH
23645: LD_INT 102
23647: PUSH
23648: LD_INT 103
23650: PUSH
23651: LD_INT 104
23653: PUSH
23654: LD_INT 105
23656: PUSH
23657: LD_INT 106
23659: PUSH
23660: LD_INT 107
23662: PUSH
23663: LD_INT 108
23665: PUSH
23666: LD_INT 109
23668: PUSH
23669: LD_INT 110
23671: PUSH
23672: LD_INT 111
23674: PUSH
23675: LD_INT 112
23677: PUSH
23678: LD_INT 114
23680: PUSH
23681: LD_INT 116
23683: PUSH
23684: LD_INT 117
23686: PUSH
23687: LD_INT 118
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: ST_TO_ADDR
23712: GO 25395
23714: LD_INT 12
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23722
23720: GO 23942
23722: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23723: LD_ADDR_VAR 0 2
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: LD_INT 3
23736: PUSH
23737: LD_INT 4
23739: PUSH
23740: LD_INT 5
23742: PUSH
23743: LD_INT 6
23745: PUSH
23746: LD_INT 7
23748: PUSH
23749: LD_INT 8
23751: PUSH
23752: LD_INT 9
23754: PUSH
23755: LD_INT 10
23757: PUSH
23758: LD_INT 11
23760: PUSH
23761: LD_INT 12
23763: PUSH
23764: LD_INT 13
23766: PUSH
23767: LD_INT 14
23769: PUSH
23770: LD_INT 15
23772: PUSH
23773: LD_INT 16
23775: PUSH
23776: LD_INT 17
23778: PUSH
23779: LD_INT 18
23781: PUSH
23782: LD_INT 19
23784: PUSH
23785: LD_INT 20
23787: PUSH
23788: LD_INT 21
23790: PUSH
23791: LD_INT 22
23793: PUSH
23794: LD_INT 23
23796: PUSH
23797: LD_INT 24
23799: PUSH
23800: LD_INT 25
23802: PUSH
23803: LD_INT 26
23805: PUSH
23806: LD_INT 27
23808: PUSH
23809: LD_INT 28
23811: PUSH
23812: LD_INT 30
23814: PUSH
23815: LD_INT 31
23817: PUSH
23818: LD_INT 32
23820: PUSH
23821: LD_INT 33
23823: PUSH
23824: LD_INT 34
23826: PUSH
23827: LD_INT 36
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 101
23868: PUSH
23869: LD_INT 102
23871: PUSH
23872: LD_INT 103
23874: PUSH
23875: LD_INT 104
23877: PUSH
23878: LD_INT 105
23880: PUSH
23881: LD_INT 106
23883: PUSH
23884: LD_INT 107
23886: PUSH
23887: LD_INT 108
23889: PUSH
23890: LD_INT 109
23892: PUSH
23893: LD_INT 110
23895: PUSH
23896: LD_INT 111
23898: PUSH
23899: LD_INT 112
23901: PUSH
23902: LD_INT 113
23904: PUSH
23905: LD_INT 114
23907: PUSH
23908: LD_INT 116
23910: PUSH
23911: LD_INT 117
23913: PUSH
23914: LD_INT 118
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: ST_TO_ADDR
23940: GO 25395
23942: LD_INT 13
23944: DOUBLE
23945: EQUAL
23946: IFTRUE 23950
23948: GO 24158
23950: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 2
23961: PUSH
23962: LD_INT 3
23964: PUSH
23965: LD_INT 4
23967: PUSH
23968: LD_INT 5
23970: PUSH
23971: LD_INT 8
23973: PUSH
23974: LD_INT 9
23976: PUSH
23977: LD_INT 10
23979: PUSH
23980: LD_INT 11
23982: PUSH
23983: LD_INT 12
23985: PUSH
23986: LD_INT 14
23988: PUSH
23989: LD_INT 15
23991: PUSH
23992: LD_INT 16
23994: PUSH
23995: LD_INT 17
23997: PUSH
23998: LD_INT 18
24000: PUSH
24001: LD_INT 19
24003: PUSH
24004: LD_INT 20
24006: PUSH
24007: LD_INT 21
24009: PUSH
24010: LD_INT 22
24012: PUSH
24013: LD_INT 23
24015: PUSH
24016: LD_INT 24
24018: PUSH
24019: LD_INT 25
24021: PUSH
24022: LD_INT 26
24024: PUSH
24025: LD_INT 27
24027: PUSH
24028: LD_INT 28
24030: PUSH
24031: LD_INT 30
24033: PUSH
24034: LD_INT 31
24036: PUSH
24037: LD_INT 32
24039: PUSH
24040: LD_INT 33
24042: PUSH
24043: LD_INT 34
24045: PUSH
24046: LD_INT 36
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 101
24084: PUSH
24085: LD_INT 102
24087: PUSH
24088: LD_INT 103
24090: PUSH
24091: LD_INT 104
24093: PUSH
24094: LD_INT 105
24096: PUSH
24097: LD_INT 106
24099: PUSH
24100: LD_INT 107
24102: PUSH
24103: LD_INT 108
24105: PUSH
24106: LD_INT 109
24108: PUSH
24109: LD_INT 110
24111: PUSH
24112: LD_INT 111
24114: PUSH
24115: LD_INT 112
24117: PUSH
24118: LD_INT 113
24120: PUSH
24121: LD_INT 114
24123: PUSH
24124: LD_INT 116
24126: PUSH
24127: LD_INT 117
24129: PUSH
24130: LD_INT 118
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: ST_TO_ADDR
24156: GO 25395
24158: LD_INT 14
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24390
24166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24167: LD_ADDR_VAR 0 2
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 4
24183: PUSH
24184: LD_INT 5
24186: PUSH
24187: LD_INT 6
24189: PUSH
24190: LD_INT 7
24192: PUSH
24193: LD_INT 8
24195: PUSH
24196: LD_INT 9
24198: PUSH
24199: LD_INT 10
24201: PUSH
24202: LD_INT 11
24204: PUSH
24205: LD_INT 12
24207: PUSH
24208: LD_INT 13
24210: PUSH
24211: LD_INT 14
24213: PUSH
24214: LD_INT 15
24216: PUSH
24217: LD_INT 16
24219: PUSH
24220: LD_INT 17
24222: PUSH
24223: LD_INT 18
24225: PUSH
24226: LD_INT 19
24228: PUSH
24229: LD_INT 20
24231: PUSH
24232: LD_INT 21
24234: PUSH
24235: LD_INT 22
24237: PUSH
24238: LD_INT 23
24240: PUSH
24241: LD_INT 24
24243: PUSH
24244: LD_INT 25
24246: PUSH
24247: LD_INT 26
24249: PUSH
24250: LD_INT 27
24252: PUSH
24253: LD_INT 28
24255: PUSH
24256: LD_INT 29
24258: PUSH
24259: LD_INT 30
24261: PUSH
24262: LD_INT 31
24264: PUSH
24265: LD_INT 32
24267: PUSH
24268: LD_INT 33
24270: PUSH
24271: LD_INT 34
24273: PUSH
24274: LD_INT 36
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 101
24316: PUSH
24317: LD_INT 102
24319: PUSH
24320: LD_INT 103
24322: PUSH
24323: LD_INT 104
24325: PUSH
24326: LD_INT 105
24328: PUSH
24329: LD_INT 106
24331: PUSH
24332: LD_INT 107
24334: PUSH
24335: LD_INT 108
24337: PUSH
24338: LD_INT 109
24340: PUSH
24341: LD_INT 110
24343: PUSH
24344: LD_INT 111
24346: PUSH
24347: LD_INT 112
24349: PUSH
24350: LD_INT 113
24352: PUSH
24353: LD_INT 114
24355: PUSH
24356: LD_INT 116
24358: PUSH
24359: LD_INT 117
24361: PUSH
24362: LD_INT 118
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: ST_TO_ADDR
24388: GO 25395
24390: LD_INT 15
24392: DOUBLE
24393: EQUAL
24394: IFTRUE 24398
24396: GO 24622
24398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24399: LD_ADDR_VAR 0 2
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 3
24412: PUSH
24413: LD_INT 4
24415: PUSH
24416: LD_INT 5
24418: PUSH
24419: LD_INT 6
24421: PUSH
24422: LD_INT 7
24424: PUSH
24425: LD_INT 8
24427: PUSH
24428: LD_INT 9
24430: PUSH
24431: LD_INT 10
24433: PUSH
24434: LD_INT 11
24436: PUSH
24437: LD_INT 12
24439: PUSH
24440: LD_INT 13
24442: PUSH
24443: LD_INT 14
24445: PUSH
24446: LD_INT 15
24448: PUSH
24449: LD_INT 16
24451: PUSH
24452: LD_INT 17
24454: PUSH
24455: LD_INT 18
24457: PUSH
24458: LD_INT 19
24460: PUSH
24461: LD_INT 20
24463: PUSH
24464: LD_INT 21
24466: PUSH
24467: LD_INT 22
24469: PUSH
24470: LD_INT 23
24472: PUSH
24473: LD_INT 24
24475: PUSH
24476: LD_INT 25
24478: PUSH
24479: LD_INT 26
24481: PUSH
24482: LD_INT 27
24484: PUSH
24485: LD_INT 28
24487: PUSH
24488: LD_INT 29
24490: PUSH
24491: LD_INT 30
24493: PUSH
24494: LD_INT 31
24496: PUSH
24497: LD_INT 32
24499: PUSH
24500: LD_INT 33
24502: PUSH
24503: LD_INT 34
24505: PUSH
24506: LD_INT 36
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 101
24548: PUSH
24549: LD_INT 102
24551: PUSH
24552: LD_INT 103
24554: PUSH
24555: LD_INT 104
24557: PUSH
24558: LD_INT 105
24560: PUSH
24561: LD_INT 106
24563: PUSH
24564: LD_INT 107
24566: PUSH
24567: LD_INT 108
24569: PUSH
24570: LD_INT 109
24572: PUSH
24573: LD_INT 110
24575: PUSH
24576: LD_INT 111
24578: PUSH
24579: LD_INT 112
24581: PUSH
24582: LD_INT 113
24584: PUSH
24585: LD_INT 114
24587: PUSH
24588: LD_INT 116
24590: PUSH
24591: LD_INT 117
24593: PUSH
24594: LD_INT 118
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: ST_TO_ADDR
24620: GO 25395
24622: LD_INT 16
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24766
24630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24631: LD_ADDR_VAR 0 2
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 4
24641: PUSH
24642: LD_INT 5
24644: PUSH
24645: LD_INT 7
24647: PUSH
24648: LD_INT 11
24650: PUSH
24651: LD_INT 12
24653: PUSH
24654: LD_INT 15
24656: PUSH
24657: LD_INT 16
24659: PUSH
24660: LD_INT 20
24662: PUSH
24663: LD_INT 21
24665: PUSH
24666: LD_INT 22
24668: PUSH
24669: LD_INT 23
24671: PUSH
24672: LD_INT 25
24674: PUSH
24675: LD_INT 26
24677: PUSH
24678: LD_INT 30
24680: PUSH
24681: LD_INT 31
24683: PUSH
24684: LD_INT 32
24686: PUSH
24687: LD_INT 33
24689: PUSH
24690: LD_INT 34
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 101
24716: PUSH
24717: LD_INT 102
24719: PUSH
24720: LD_INT 103
24722: PUSH
24723: LD_INT 106
24725: PUSH
24726: LD_INT 108
24728: PUSH
24729: LD_INT 112
24731: PUSH
24732: LD_INT 113
24734: PUSH
24735: LD_INT 114
24737: PUSH
24738: LD_INT 116
24740: PUSH
24741: LD_INT 117
24743: PUSH
24744: LD_INT 118
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: ST_TO_ADDR
24764: GO 25395
24766: LD_INT 17
24768: DOUBLE
24769: EQUAL
24770: IFTRUE 24774
24772: GO 24998
24774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24775: LD_ADDR_VAR 0 2
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 2
24785: PUSH
24786: LD_INT 3
24788: PUSH
24789: LD_INT 4
24791: PUSH
24792: LD_INT 5
24794: PUSH
24795: LD_INT 6
24797: PUSH
24798: LD_INT 7
24800: PUSH
24801: LD_INT 8
24803: PUSH
24804: LD_INT 9
24806: PUSH
24807: LD_INT 10
24809: PUSH
24810: LD_INT 11
24812: PUSH
24813: LD_INT 12
24815: PUSH
24816: LD_INT 13
24818: PUSH
24819: LD_INT 14
24821: PUSH
24822: LD_INT 15
24824: PUSH
24825: LD_INT 16
24827: PUSH
24828: LD_INT 17
24830: PUSH
24831: LD_INT 18
24833: PUSH
24834: LD_INT 19
24836: PUSH
24837: LD_INT 20
24839: PUSH
24840: LD_INT 21
24842: PUSH
24843: LD_INT 22
24845: PUSH
24846: LD_INT 23
24848: PUSH
24849: LD_INT 24
24851: PUSH
24852: LD_INT 25
24854: PUSH
24855: LD_INT 26
24857: PUSH
24858: LD_INT 27
24860: PUSH
24861: LD_INT 28
24863: PUSH
24864: LD_INT 29
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: LD_INT 31
24872: PUSH
24873: LD_INT 32
24875: PUSH
24876: LD_INT 33
24878: PUSH
24879: LD_INT 34
24881: PUSH
24882: LD_INT 36
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 101
24924: PUSH
24925: LD_INT 102
24927: PUSH
24928: LD_INT 103
24930: PUSH
24931: LD_INT 104
24933: PUSH
24934: LD_INT 105
24936: PUSH
24937: LD_INT 106
24939: PUSH
24940: LD_INT 107
24942: PUSH
24943: LD_INT 108
24945: PUSH
24946: LD_INT 109
24948: PUSH
24949: LD_INT 110
24951: PUSH
24952: LD_INT 111
24954: PUSH
24955: LD_INT 112
24957: PUSH
24958: LD_INT 113
24960: PUSH
24961: LD_INT 114
24963: PUSH
24964: LD_INT 116
24966: PUSH
24967: LD_INT 117
24969: PUSH
24970: LD_INT 118
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: ST_TO_ADDR
24996: GO 25395
24998: LD_INT 18
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25154
25006: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25007: LD_ADDR_VAR 0 2
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 4
25017: PUSH
25018: LD_INT 5
25020: PUSH
25021: LD_INT 7
25023: PUSH
25024: LD_INT 11
25026: PUSH
25027: LD_INT 12
25029: PUSH
25030: LD_INT 15
25032: PUSH
25033: LD_INT 16
25035: PUSH
25036: LD_INT 20
25038: PUSH
25039: LD_INT 21
25041: PUSH
25042: LD_INT 22
25044: PUSH
25045: LD_INT 23
25047: PUSH
25048: LD_INT 25
25050: PUSH
25051: LD_INT 26
25053: PUSH
25054: LD_INT 30
25056: PUSH
25057: LD_INT 31
25059: PUSH
25060: LD_INT 32
25062: PUSH
25063: LD_INT 33
25065: PUSH
25066: LD_INT 34
25068: PUSH
25069: LD_INT 35
25071: PUSH
25072: LD_INT 36
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 101
25100: PUSH
25101: LD_INT 102
25103: PUSH
25104: LD_INT 103
25106: PUSH
25107: LD_INT 106
25109: PUSH
25110: LD_INT 108
25112: PUSH
25113: LD_INT 112
25115: PUSH
25116: LD_INT 113
25118: PUSH
25119: LD_INT 114
25121: PUSH
25122: LD_INT 115
25124: PUSH
25125: LD_INT 116
25127: PUSH
25128: LD_INT 117
25130: PUSH
25131: LD_INT 118
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: ST_TO_ADDR
25152: GO 25395
25154: LD_INT 19
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25394
25162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25163: LD_ADDR_VAR 0 2
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: LD_INT 4
25179: PUSH
25180: LD_INT 5
25182: PUSH
25183: LD_INT 6
25185: PUSH
25186: LD_INT 7
25188: PUSH
25189: LD_INT 8
25191: PUSH
25192: LD_INT 9
25194: PUSH
25195: LD_INT 10
25197: PUSH
25198: LD_INT 11
25200: PUSH
25201: LD_INT 12
25203: PUSH
25204: LD_INT 13
25206: PUSH
25207: LD_INT 14
25209: PUSH
25210: LD_INT 15
25212: PUSH
25213: LD_INT 16
25215: PUSH
25216: LD_INT 17
25218: PUSH
25219: LD_INT 18
25221: PUSH
25222: LD_INT 19
25224: PUSH
25225: LD_INT 20
25227: PUSH
25228: LD_INT 21
25230: PUSH
25231: LD_INT 22
25233: PUSH
25234: LD_INT 23
25236: PUSH
25237: LD_INT 24
25239: PUSH
25240: LD_INT 25
25242: PUSH
25243: LD_INT 26
25245: PUSH
25246: LD_INT 27
25248: PUSH
25249: LD_INT 28
25251: PUSH
25252: LD_INT 29
25254: PUSH
25255: LD_INT 30
25257: PUSH
25258: LD_INT 31
25260: PUSH
25261: LD_INT 32
25263: PUSH
25264: LD_INT 33
25266: PUSH
25267: LD_INT 34
25269: PUSH
25270: LD_INT 35
25272: PUSH
25273: LD_INT 36
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 101
25316: PUSH
25317: LD_INT 102
25319: PUSH
25320: LD_INT 103
25322: PUSH
25323: LD_INT 104
25325: PUSH
25326: LD_INT 105
25328: PUSH
25329: LD_INT 106
25331: PUSH
25332: LD_INT 107
25334: PUSH
25335: LD_INT 108
25337: PUSH
25338: LD_INT 109
25340: PUSH
25341: LD_INT 110
25343: PUSH
25344: LD_INT 111
25346: PUSH
25347: LD_INT 112
25349: PUSH
25350: LD_INT 113
25352: PUSH
25353: LD_INT 114
25355: PUSH
25356: LD_INT 115
25358: PUSH
25359: LD_INT 116
25361: PUSH
25362: LD_INT 117
25364: PUSH
25365: LD_INT 118
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: ST_TO_ADDR
25392: GO 25395
25394: POP
// end else
25395: GO 25626
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25397: LD_ADDR_VAR 0 2
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: LD_INT 3
25410: PUSH
25411: LD_INT 4
25413: PUSH
25414: LD_INT 5
25416: PUSH
25417: LD_INT 6
25419: PUSH
25420: LD_INT 7
25422: PUSH
25423: LD_INT 8
25425: PUSH
25426: LD_INT 9
25428: PUSH
25429: LD_INT 10
25431: PUSH
25432: LD_INT 11
25434: PUSH
25435: LD_INT 12
25437: PUSH
25438: LD_INT 13
25440: PUSH
25441: LD_INT 14
25443: PUSH
25444: LD_INT 15
25446: PUSH
25447: LD_INT 16
25449: PUSH
25450: LD_INT 17
25452: PUSH
25453: LD_INT 18
25455: PUSH
25456: LD_INT 19
25458: PUSH
25459: LD_INT 20
25461: PUSH
25462: LD_INT 21
25464: PUSH
25465: LD_INT 22
25467: PUSH
25468: LD_INT 23
25470: PUSH
25471: LD_INT 24
25473: PUSH
25474: LD_INT 25
25476: PUSH
25477: LD_INT 26
25479: PUSH
25480: LD_INT 27
25482: PUSH
25483: LD_INT 28
25485: PUSH
25486: LD_INT 29
25488: PUSH
25489: LD_INT 30
25491: PUSH
25492: LD_INT 31
25494: PUSH
25495: LD_INT 32
25497: PUSH
25498: LD_INT 33
25500: PUSH
25501: LD_INT 34
25503: PUSH
25504: LD_INT 35
25506: PUSH
25507: LD_INT 36
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 101
25550: PUSH
25551: LD_INT 102
25553: PUSH
25554: LD_INT 103
25556: PUSH
25557: LD_INT 104
25559: PUSH
25560: LD_INT 105
25562: PUSH
25563: LD_INT 106
25565: PUSH
25566: LD_INT 107
25568: PUSH
25569: LD_INT 108
25571: PUSH
25572: LD_INT 109
25574: PUSH
25575: LD_INT 110
25577: PUSH
25578: LD_INT 111
25580: PUSH
25581: LD_INT 112
25583: PUSH
25584: LD_INT 113
25586: PUSH
25587: LD_INT 114
25589: PUSH
25590: LD_INT 115
25592: PUSH
25593: LD_INT 116
25595: PUSH
25596: LD_INT 117
25598: PUSH
25599: LD_INT 118
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: ST_TO_ADDR
// if result then
25626: LD_VAR 0 2
25630: IFFALSE 26416
// begin normal :=  ;
25632: LD_ADDR_VAR 0 5
25636: PUSH
25637: LD_STRING 
25639: ST_TO_ADDR
// hardcore :=  ;
25640: LD_ADDR_VAR 0 6
25644: PUSH
25645: LD_STRING 
25647: ST_TO_ADDR
// active :=  ;
25648: LD_ADDR_VAR 0 7
25652: PUSH
25653: LD_STRING 
25655: ST_TO_ADDR
// for i = 1 to normalCounter do
25656: LD_ADDR_VAR 0 8
25660: PUSH
25661: DOUBLE
25662: LD_INT 1
25664: DEC
25665: ST_TO_ADDR
25666: LD_EXP 39
25670: PUSH
25671: FOR_TO
25672: IFFALSE 25773
// begin tmp := 0 ;
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_STRING 0
25681: ST_TO_ADDR
// if result [ 1 ] then
25682: LD_VAR 0 2
25686: PUSH
25687: LD_INT 1
25689: ARRAY
25690: IFFALSE 25755
// if result [ 1 ] [ 1 ] = i then
25692: LD_VAR 0 2
25696: PUSH
25697: LD_INT 1
25699: ARRAY
25700: PUSH
25701: LD_INT 1
25703: ARRAY
25704: PUSH
25705: LD_VAR 0 8
25709: EQUAL
25710: IFFALSE 25755
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25712: LD_ADDR_VAR 0 2
25716: PUSH
25717: LD_VAR 0 2
25721: PPUSH
25722: LD_INT 1
25724: PPUSH
25725: LD_VAR 0 2
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: LD_INT 1
25736: PPUSH
25737: CALL_OW 3
25741: PPUSH
25742: CALL_OW 1
25746: ST_TO_ADDR
// tmp := 1 ;
25747: LD_ADDR_VAR 0 3
25751: PUSH
25752: LD_STRING 1
25754: ST_TO_ADDR
// end ; normal := normal & tmp ;
25755: LD_ADDR_VAR 0 5
25759: PUSH
25760: LD_VAR 0 5
25764: PUSH
25765: LD_VAR 0 3
25769: STR
25770: ST_TO_ADDR
// end ;
25771: GO 25671
25773: POP
25774: POP
// for i = 1 to hardcoreCounter do
25775: LD_ADDR_VAR 0 8
25779: PUSH
25780: DOUBLE
25781: LD_INT 1
25783: DEC
25784: ST_TO_ADDR
25785: LD_EXP 40
25789: PUSH
25790: FOR_TO
25791: IFFALSE 25896
// begin tmp := 0 ;
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_STRING 0
25800: ST_TO_ADDR
// if result [ 2 ] then
25801: LD_VAR 0 2
25805: PUSH
25806: LD_INT 2
25808: ARRAY
25809: IFFALSE 25878
// if result [ 2 ] [ 1 ] = 100 + i then
25811: LD_VAR 0 2
25815: PUSH
25816: LD_INT 2
25818: ARRAY
25819: PUSH
25820: LD_INT 1
25822: ARRAY
25823: PUSH
25824: LD_INT 100
25826: PUSH
25827: LD_VAR 0 8
25831: PLUS
25832: EQUAL
25833: IFFALSE 25878
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25835: LD_ADDR_VAR 0 2
25839: PUSH
25840: LD_VAR 0 2
25844: PPUSH
25845: LD_INT 2
25847: PPUSH
25848: LD_VAR 0 2
25852: PUSH
25853: LD_INT 2
25855: ARRAY
25856: PPUSH
25857: LD_INT 1
25859: PPUSH
25860: CALL_OW 3
25864: PPUSH
25865: CALL_OW 1
25869: ST_TO_ADDR
// tmp := 1 ;
25870: LD_ADDR_VAR 0 3
25874: PUSH
25875: LD_STRING 1
25877: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25878: LD_ADDR_VAR 0 6
25882: PUSH
25883: LD_VAR 0 6
25887: PUSH
25888: LD_VAR 0 3
25892: STR
25893: ST_TO_ADDR
// end ;
25894: GO 25790
25896: POP
25897: POP
// if isGameLoad then
25898: LD_VAR 0 1
25902: IFFALSE 26377
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25904: LD_ADDR_VAR 0 4
25908: PUSH
25909: LD_EXP 43
25913: PUSH
25914: LD_EXP 42
25918: PUSH
25919: LD_EXP 44
25923: PUSH
25924: LD_EXP 41
25928: PUSH
25929: LD_EXP 45
25933: PUSH
25934: LD_EXP 46
25938: PUSH
25939: LD_EXP 47
25943: PUSH
25944: LD_EXP 48
25948: PUSH
25949: LD_EXP 49
25953: PUSH
25954: LD_EXP 50
25958: PUSH
25959: LD_EXP 51
25963: PUSH
25964: LD_EXP 52
25968: PUSH
25969: LD_EXP 53
25973: PUSH
25974: LD_EXP 54
25978: PUSH
25979: LD_EXP 62
25983: PUSH
25984: LD_EXP 63
25988: PUSH
25989: LD_EXP 64
25993: PUSH
25994: LD_EXP 65
25998: PUSH
25999: LD_EXP 67
26003: PUSH
26004: LD_EXP 68
26008: PUSH
26009: LD_EXP 69
26013: PUSH
26014: LD_EXP 72
26018: PUSH
26019: LD_EXP 74
26023: PUSH
26024: LD_EXP 75
26028: PUSH
26029: LD_EXP 76
26033: PUSH
26034: LD_EXP 78
26038: PUSH
26039: LD_EXP 79
26043: PUSH
26044: LD_EXP 82
26048: PUSH
26049: LD_EXP 83
26053: PUSH
26054: LD_EXP 84
26058: PUSH
26059: LD_EXP 85
26063: PUSH
26064: LD_EXP 86
26068: PUSH
26069: LD_EXP 87
26073: PUSH
26074: LD_EXP 88
26078: PUSH
26079: LD_EXP 89
26083: PUSH
26084: LD_EXP 90
26088: PUSH
26089: LD_EXP 55
26093: PUSH
26094: LD_EXP 56
26098: PUSH
26099: LD_EXP 59
26103: PUSH
26104: LD_EXP 60
26108: PUSH
26109: LD_EXP 61
26113: PUSH
26114: LD_EXP 57
26118: PUSH
26119: LD_EXP 58
26123: PUSH
26124: LD_EXP 66
26128: PUSH
26129: LD_EXP 70
26133: PUSH
26134: LD_EXP 71
26138: PUSH
26139: LD_EXP 73
26143: PUSH
26144: LD_EXP 77
26148: PUSH
26149: LD_EXP 80
26153: PUSH
26154: LD_EXP 81
26158: PUSH
26159: LD_EXP 91
26163: PUSH
26164: LD_EXP 92
26168: PUSH
26169: LD_EXP 93
26173: PUSH
26174: LD_EXP 94
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: ST_TO_ADDR
// tmp :=  ;
26235: LD_ADDR_VAR 0 3
26239: PUSH
26240: LD_STRING 
26242: ST_TO_ADDR
// for i = 1 to normalCounter do
26243: LD_ADDR_VAR 0 8
26247: PUSH
26248: DOUBLE
26249: LD_INT 1
26251: DEC
26252: ST_TO_ADDR
26253: LD_EXP 39
26257: PUSH
26258: FOR_TO
26259: IFFALSE 26295
// begin if flags [ i ] then
26261: LD_VAR 0 4
26265: PUSH
26266: LD_VAR 0 8
26270: ARRAY
26271: IFFALSE 26293
// tmp := tmp & i & ; ;
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_VAR 0 3
26282: PUSH
26283: LD_VAR 0 8
26287: STR
26288: PUSH
26289: LD_STRING ;
26291: STR
26292: ST_TO_ADDR
// end ;
26293: GO 26258
26295: POP
26296: POP
// for i = 1 to hardcoreCounter do
26297: LD_ADDR_VAR 0 8
26301: PUSH
26302: DOUBLE
26303: LD_INT 1
26305: DEC
26306: ST_TO_ADDR
26307: LD_EXP 40
26311: PUSH
26312: FOR_TO
26313: IFFALSE 26359
// begin if flags [ normalCounter + i ] then
26315: LD_VAR 0 4
26319: PUSH
26320: LD_EXP 39
26324: PUSH
26325: LD_VAR 0 8
26329: PLUS
26330: ARRAY
26331: IFFALSE 26357
// tmp := tmp & ( 100 + i ) & ; ;
26333: LD_ADDR_VAR 0 3
26337: PUSH
26338: LD_VAR 0 3
26342: PUSH
26343: LD_INT 100
26345: PUSH
26346: LD_VAR 0 8
26350: PLUS
26351: STR
26352: PUSH
26353: LD_STRING ;
26355: STR
26356: ST_TO_ADDR
// end ;
26357: GO 26312
26359: POP
26360: POP
// if tmp then
26361: LD_VAR 0 3
26365: IFFALSE 26377
// active := tmp ;
26367: LD_ADDR_VAR 0 7
26371: PUSH
26372: LD_VAR 0 3
26376: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26377: LD_STRING getStreamItemsFromMission("
26379: PUSH
26380: LD_VAR 0 5
26384: STR
26385: PUSH
26386: LD_STRING ","
26388: STR
26389: PUSH
26390: LD_VAR 0 6
26394: STR
26395: PUSH
26396: LD_STRING ","
26398: STR
26399: PUSH
26400: LD_VAR 0 7
26404: STR
26405: PUSH
26406: LD_STRING ")
26408: STR
26409: PPUSH
26410: CALL_OW 559
// end else
26414: GO 26423
// ToLua ( getStreamItemsFromMission("","","") ) ;
26416: LD_STRING getStreamItemsFromMission("","","")
26418: PPUSH
26419: CALL_OW 559
// end ;
26423: LD_VAR 0 2
26427: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26428: LD_EXP 38
26432: PUSH
26433: LD_EXP 43
26437: AND
26438: IFFALSE 26562
26440: GO 26442
26442: DISABLE
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
// begin enable ;
26447: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26448: LD_ADDR_VAR 0 2
26452: PUSH
26453: LD_INT 22
26455: PUSH
26456: LD_OWVAR 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: LD_INT 34
26470: PUSH
26471: LD_INT 7
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 34
26480: PUSH
26481: LD_INT 45
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 34
26490: PUSH
26491: LD_INT 28
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 34
26500: PUSH
26501: LD_INT 47
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PPUSH
26519: CALL_OW 69
26523: ST_TO_ADDR
// if not tmp then
26524: LD_VAR 0 2
26528: NOT
26529: IFFALSE 26533
// exit ;
26531: GO 26562
// for i in tmp do
26533: LD_ADDR_VAR 0 1
26537: PUSH
26538: LD_VAR 0 2
26542: PUSH
26543: FOR_IN
26544: IFFALSE 26560
// begin SetLives ( i , 0 ) ;
26546: LD_VAR 0 1
26550: PPUSH
26551: LD_INT 0
26553: PPUSH
26554: CALL_OW 234
// end ;
26558: GO 26543
26560: POP
26561: POP
// end ;
26562: PPOPN 2
26564: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26565: LD_EXP 38
26569: PUSH
26570: LD_EXP 44
26574: AND
26575: IFFALSE 26659
26577: GO 26579
26579: DISABLE
26580: LD_INT 0
26582: PPUSH
26583: PPUSH
// begin enable ;
26584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26585: LD_ADDR_VAR 0 2
26589: PUSH
26590: LD_INT 22
26592: PUSH
26593: LD_OWVAR 2
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 32
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PPUSH
26616: CALL_OW 69
26620: ST_TO_ADDR
// if not tmp then
26621: LD_VAR 0 2
26625: NOT
26626: IFFALSE 26630
// exit ;
26628: GO 26659
// for i in tmp do
26630: LD_ADDR_VAR 0 1
26634: PUSH
26635: LD_VAR 0 2
26639: PUSH
26640: FOR_IN
26641: IFFALSE 26657
// begin SetLives ( i , 0 ) ;
26643: LD_VAR 0 1
26647: PPUSH
26648: LD_INT 0
26650: PPUSH
26651: CALL_OW 234
// end ;
26655: GO 26640
26657: POP
26658: POP
// end ;
26659: PPOPN 2
26661: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26662: LD_EXP 38
26666: PUSH
26667: LD_EXP 41
26671: AND
26672: IFFALSE 26765
26674: GO 26676
26676: DISABLE
26677: LD_INT 0
26679: PPUSH
// begin enable ;
26680: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26681: LD_ADDR_VAR 0 1
26685: PUSH
26686: LD_INT 22
26688: PUSH
26689: LD_OWVAR 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 25
26703: PUSH
26704: LD_INT 5
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 25
26713: PUSH
26714: LD_INT 9
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 25
26723: PUSH
26724: LD_INT 8
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PPUSH
26741: CALL_OW 69
26745: PUSH
26746: FOR_IN
26747: IFFALSE 26763
// begin SetClass ( i , 1 ) ;
26749: LD_VAR 0 1
26753: PPUSH
26754: LD_INT 1
26756: PPUSH
26757: CALL_OW 336
// end ;
26761: GO 26746
26763: POP
26764: POP
// end ;
26765: PPOPN 1
26767: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26768: LD_EXP 38
26772: PUSH
26773: LD_EXP 42
26777: AND
26778: PUSH
26779: LD_OWVAR 65
26783: PUSH
26784: LD_INT 7
26786: LESS
26787: AND
26788: IFFALSE 26802
26790: GO 26792
26792: DISABLE
// begin enable ;
26793: ENABLE
// game_speed := 7 ;
26794: LD_ADDR_OWVAR 65
26798: PUSH
26799: LD_INT 7
26801: ST_TO_ADDR
// end ;
26802: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26803: LD_EXP 38
26807: PUSH
26808: LD_EXP 45
26812: AND
26813: IFFALSE 27015
26815: GO 26817
26817: DISABLE
26818: LD_INT 0
26820: PPUSH
26821: PPUSH
26822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: LD_INT 81
26830: PUSH
26831: LD_OWVAR 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: ST_TO_ADDR
// if not tmp then
26859: LD_VAR 0 3
26863: NOT
26864: IFFALSE 26868
// exit ;
26866: GO 27015
// if tmp > 5 then
26868: LD_VAR 0 3
26872: PUSH
26873: LD_INT 5
26875: GREATER
26876: IFFALSE 26888
// k := 5 else
26878: LD_ADDR_VAR 0 2
26882: PUSH
26883: LD_INT 5
26885: ST_TO_ADDR
26886: GO 26898
// k := tmp ;
26888: LD_ADDR_VAR 0 2
26892: PUSH
26893: LD_VAR 0 3
26897: ST_TO_ADDR
// for i := 1 to k do
26898: LD_ADDR_VAR 0 1
26902: PUSH
26903: DOUBLE
26904: LD_INT 1
26906: DEC
26907: ST_TO_ADDR
26908: LD_VAR 0 2
26912: PUSH
26913: FOR_TO
26914: IFFALSE 27013
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26916: LD_VAR 0 3
26920: PUSH
26921: LD_VAR 0 1
26925: ARRAY
26926: PPUSH
26927: LD_VAR 0 1
26931: PUSH
26932: LD_INT 4
26934: MOD
26935: PUSH
26936: LD_INT 1
26938: PLUS
26939: PPUSH
26940: CALL_OW 259
26944: PUSH
26945: LD_INT 10
26947: LESS
26948: IFFALSE 27011
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26950: LD_VAR 0 3
26954: PUSH
26955: LD_VAR 0 1
26959: ARRAY
26960: PPUSH
26961: LD_VAR 0 1
26965: PUSH
26966: LD_INT 4
26968: MOD
26969: PUSH
26970: LD_INT 1
26972: PLUS
26973: PPUSH
26974: LD_VAR 0 3
26978: PUSH
26979: LD_VAR 0 1
26983: ARRAY
26984: PPUSH
26985: LD_VAR 0 1
26989: PUSH
26990: LD_INT 4
26992: MOD
26993: PUSH
26994: LD_INT 1
26996: PLUS
26997: PPUSH
26998: CALL_OW 259
27002: PUSH
27003: LD_INT 1
27005: PLUS
27006: PPUSH
27007: CALL_OW 237
27011: GO 26913
27013: POP
27014: POP
// end ;
27015: PPOPN 3
27017: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27018: LD_EXP 38
27022: PUSH
27023: LD_EXP 46
27027: AND
27028: IFFALSE 27048
27030: GO 27032
27032: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27033: LD_INT 4
27035: PPUSH
27036: LD_OWVAR 2
27040: PPUSH
27041: LD_INT 0
27043: PPUSH
27044: CALL_OW 324
27048: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27049: LD_EXP 38
27053: PUSH
27054: LD_EXP 75
27058: AND
27059: IFFALSE 27079
27061: GO 27063
27063: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27064: LD_INT 19
27066: PPUSH
27067: LD_OWVAR 2
27071: PPUSH
27072: LD_INT 0
27074: PPUSH
27075: CALL_OW 324
27079: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27080: LD_EXP 38
27084: PUSH
27085: LD_EXP 47
27089: AND
27090: IFFALSE 27192
27092: GO 27094
27094: DISABLE
27095: LD_INT 0
27097: PPUSH
27098: PPUSH
// begin enable ;
27099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27100: LD_ADDR_VAR 0 2
27104: PUSH
27105: LD_INT 22
27107: PUSH
27108: LD_OWVAR 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: LD_INT 34
27122: PUSH
27123: LD_INT 11
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 34
27132: PUSH
27133: LD_INT 30
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PPUSH
27149: CALL_OW 69
27153: ST_TO_ADDR
// if not tmp then
27154: LD_VAR 0 2
27158: NOT
27159: IFFALSE 27163
// exit ;
27161: GO 27192
// for i in tmp do
27163: LD_ADDR_VAR 0 1
27167: PUSH
27168: LD_VAR 0 2
27172: PUSH
27173: FOR_IN
27174: IFFALSE 27190
// begin SetLives ( i , 0 ) ;
27176: LD_VAR 0 1
27180: PPUSH
27181: LD_INT 0
27183: PPUSH
27184: CALL_OW 234
// end ;
27188: GO 27173
27190: POP
27191: POP
// end ;
27192: PPOPN 2
27194: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27195: LD_EXP 38
27199: PUSH
27200: LD_EXP 48
27204: AND
27205: IFFALSE 27225
27207: GO 27209
27209: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27210: LD_INT 32
27212: PPUSH
27213: LD_OWVAR 2
27217: PPUSH
27218: LD_INT 0
27220: PPUSH
27221: CALL_OW 324
27225: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27226: LD_EXP 38
27230: PUSH
27231: LD_EXP 49
27235: AND
27236: IFFALSE 27417
27238: GO 27240
27240: DISABLE
27241: LD_INT 0
27243: PPUSH
27244: PPUSH
27245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27246: LD_ADDR_VAR 0 2
27250: PUSH
27251: LD_INT 22
27253: PUSH
27254: LD_OWVAR 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 33
27265: PUSH
27266: LD_INT 3
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PPUSH
27277: CALL_OW 69
27281: ST_TO_ADDR
// if not tmp then
27282: LD_VAR 0 2
27286: NOT
27287: IFFALSE 27291
// exit ;
27289: GO 27417
// side := 0 ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_INT 0
27298: ST_TO_ADDR
// for i := 1 to 8 do
27299: LD_ADDR_VAR 0 1
27303: PUSH
27304: DOUBLE
27305: LD_INT 1
27307: DEC
27308: ST_TO_ADDR
27309: LD_INT 8
27311: PUSH
27312: FOR_TO
27313: IFFALSE 27361
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27315: LD_OWVAR 2
27319: PUSH
27320: LD_VAR 0 1
27324: NONEQUAL
27325: PUSH
27326: LD_OWVAR 2
27330: PPUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 81
27340: PUSH
27341: LD_INT 2
27343: EQUAL
27344: AND
27345: IFFALSE 27359
// begin side := i ;
27347: LD_ADDR_VAR 0 3
27351: PUSH
27352: LD_VAR 0 1
27356: ST_TO_ADDR
// break ;
27357: GO 27361
// end ;
27359: GO 27312
27361: POP
27362: POP
// if not side then
27363: LD_VAR 0 3
27367: NOT
27368: IFFALSE 27372
// exit ;
27370: GO 27417
// for i := 1 to tmp do
27372: LD_ADDR_VAR 0 1
27376: PUSH
27377: DOUBLE
27378: LD_INT 1
27380: DEC
27381: ST_TO_ADDR
27382: LD_VAR 0 2
27386: PUSH
27387: FOR_TO
27388: IFFALSE 27415
// if Prob ( 60 ) then
27390: LD_INT 60
27392: PPUSH
27393: CALL_OW 13
27397: IFFALSE 27413
// SetSide ( i , side ) ;
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_VAR 0 3
27408: PPUSH
27409: CALL_OW 235
27413: GO 27387
27415: POP
27416: POP
// end ;
27417: PPOPN 3
27419: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27420: LD_EXP 38
27424: PUSH
27425: LD_EXP 51
27429: AND
27430: IFFALSE 27549
27432: GO 27434
27434: DISABLE
27435: LD_INT 0
27437: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27438: LD_ADDR_VAR 0 1
27442: PUSH
27443: LD_INT 22
27445: PUSH
27446: LD_OWVAR 2
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 21
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 3
27467: PUSH
27468: LD_INT 23
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: PPUSH
27487: CALL_OW 69
27491: PUSH
27492: FOR_IN
27493: IFFALSE 27547
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27495: LD_VAR 0 1
27499: PPUSH
27500: CALL_OW 257
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: LD_INT 4
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: IN
27523: IFFALSE 27545
// SetClass ( un , rand ( 1 , 4 ) ) ;
27525: LD_VAR 0 1
27529: PPUSH
27530: LD_INT 1
27532: PPUSH
27533: LD_INT 4
27535: PPUSH
27536: CALL_OW 12
27540: PPUSH
27541: CALL_OW 336
27545: GO 27492
27547: POP
27548: POP
// end ;
27549: PPOPN 1
27551: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27552: LD_EXP 38
27556: PUSH
27557: LD_EXP 50
27561: AND
27562: IFFALSE 27641
27564: GO 27566
27566: DISABLE
27567: LD_INT 0
27569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27570: LD_ADDR_VAR 0 1
27574: PUSH
27575: LD_INT 22
27577: PUSH
27578: LD_OWVAR 2
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 21
27589: PUSH
27590: LD_INT 3
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: ST_TO_ADDR
// if not tmp then
27606: LD_VAR 0 1
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27641
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27615: LD_VAR 0 1
27619: PUSH
27620: LD_INT 1
27622: PPUSH
27623: LD_VAR 0 1
27627: PPUSH
27628: CALL_OW 12
27632: ARRAY
27633: PPUSH
27634: LD_INT 100
27636: PPUSH
27637: CALL_OW 234
// end ;
27641: PPOPN 1
27643: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27644: LD_EXP 38
27648: PUSH
27649: LD_EXP 52
27653: AND
27654: IFFALSE 27752
27656: GO 27658
27658: DISABLE
27659: LD_INT 0
27661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27662: LD_ADDR_VAR 0 1
27666: PUSH
27667: LD_INT 22
27669: PUSH
27670: LD_OWVAR 2
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 21
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PPUSH
27693: CALL_OW 69
27697: ST_TO_ADDR
// if not tmp then
27698: LD_VAR 0 1
27702: NOT
27703: IFFALSE 27707
// exit ;
27705: GO 27752
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27707: LD_VAR 0 1
27711: PUSH
27712: LD_INT 1
27714: PPUSH
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL_OW 12
27724: ARRAY
27725: PPUSH
27726: LD_INT 1
27728: PPUSH
27729: LD_INT 4
27731: PPUSH
27732: CALL_OW 12
27736: PPUSH
27737: LD_INT 3000
27739: PPUSH
27740: LD_INT 9000
27742: PPUSH
27743: CALL_OW 12
27747: PPUSH
27748: CALL_OW 492
// end ;
27752: PPOPN 1
27754: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27755: LD_EXP 38
27759: PUSH
27760: LD_EXP 53
27764: AND
27765: IFFALSE 27785
27767: GO 27769
27769: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27770: LD_INT 1
27772: PPUSH
27773: LD_OWVAR 2
27777: PPUSH
27778: LD_INT 0
27780: PPUSH
27781: CALL_OW 324
27785: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27786: LD_EXP 38
27790: PUSH
27791: LD_EXP 54
27795: AND
27796: IFFALSE 27879
27798: GO 27800
27800: DISABLE
27801: LD_INT 0
27803: PPUSH
27804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27805: LD_ADDR_VAR 0 2
27809: PUSH
27810: LD_INT 22
27812: PUSH
27813: LD_OWVAR 2
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 21
27824: PUSH
27825: LD_INT 3
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 69
27840: ST_TO_ADDR
// if not tmp then
27841: LD_VAR 0 2
27845: NOT
27846: IFFALSE 27850
// exit ;
27848: GO 27879
// for i in tmp do
27850: LD_ADDR_VAR 0 1
27854: PUSH
27855: LD_VAR 0 2
27859: PUSH
27860: FOR_IN
27861: IFFALSE 27877
// SetBLevel ( i , 10 ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_INT 10
27870: PPUSH
27871: CALL_OW 241
27875: GO 27860
27877: POP
27878: POP
// end ;
27879: PPOPN 2
27881: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27882: LD_EXP 38
27886: PUSH
27887: LD_EXP 55
27891: AND
27892: IFFALSE 28003
27894: GO 27896
27896: DISABLE
27897: LD_INT 0
27899: PPUSH
27900: PPUSH
27901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_INT 22
27909: PUSH
27910: LD_OWVAR 2
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 25
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PPUSH
27933: CALL_OW 69
27937: ST_TO_ADDR
// if not tmp then
27938: LD_VAR 0 3
27942: NOT
27943: IFFALSE 27947
// exit ;
27945: GO 28003
// un := tmp [ rand ( 1 , tmp ) ] ;
27947: LD_ADDR_VAR 0 2
27951: PUSH
27952: LD_VAR 0 3
27956: PUSH
27957: LD_INT 1
27959: PPUSH
27960: LD_VAR 0 3
27964: PPUSH
27965: CALL_OW 12
27969: ARRAY
27970: ST_TO_ADDR
// if Crawls ( un ) then
27971: LD_VAR 0 2
27975: PPUSH
27976: CALL_OW 318
27980: IFFALSE 27991
// ComWalk ( un ) ;
27982: LD_VAR 0 2
27986: PPUSH
27987: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27991: LD_VAR 0 2
27995: PPUSH
27996: LD_INT 5
27998: PPUSH
27999: CALL_OW 336
// end ;
28003: PPOPN 3
28005: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28006: LD_EXP 38
28010: PUSH
28011: LD_EXP 56
28015: AND
28016: PUSH
28017: LD_OWVAR 67
28021: PUSH
28022: LD_INT 4
28024: LESS
28025: AND
28026: IFFALSE 28045
28028: GO 28030
28030: DISABLE
// begin Difficulty := Difficulty + 1 ;
28031: LD_ADDR_OWVAR 67
28035: PUSH
28036: LD_OWVAR 67
28040: PUSH
28041: LD_INT 1
28043: PLUS
28044: ST_TO_ADDR
// end ;
28045: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28046: LD_EXP 38
28050: PUSH
28051: LD_EXP 57
28055: AND
28056: IFFALSE 28159
28058: GO 28060
28060: DISABLE
28061: LD_INT 0
28063: PPUSH
// begin for i := 1 to 5 do
28064: LD_ADDR_VAR 0 1
28068: PUSH
28069: DOUBLE
28070: LD_INT 1
28072: DEC
28073: ST_TO_ADDR
28074: LD_INT 5
28076: PUSH
28077: FOR_TO
28078: IFFALSE 28157
// begin uc_nation := nation_nature ;
28080: LD_ADDR_OWVAR 21
28084: PUSH
28085: LD_INT 0
28087: ST_TO_ADDR
// uc_side := 0 ;
28088: LD_ADDR_OWVAR 20
28092: PUSH
28093: LD_INT 0
28095: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28096: LD_ADDR_OWVAR 29
28100: PUSH
28101: LD_INT 12
28103: PUSH
28104: LD_INT 12
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: ST_TO_ADDR
// hc_agressivity := 20 ;
28111: LD_ADDR_OWVAR 35
28115: PUSH
28116: LD_INT 20
28118: ST_TO_ADDR
// hc_class := class_tiger ;
28119: LD_ADDR_OWVAR 28
28123: PUSH
28124: LD_INT 14
28126: ST_TO_ADDR
// hc_gallery :=  ;
28127: LD_ADDR_OWVAR 33
28131: PUSH
28132: LD_STRING 
28134: ST_TO_ADDR
// hc_name :=  ;
28135: LD_ADDR_OWVAR 26
28139: PUSH
28140: LD_STRING 
28142: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28143: CALL_OW 44
28147: PPUSH
28148: LD_INT 0
28150: PPUSH
28151: CALL_OW 51
// end ;
28155: GO 28077
28157: POP
28158: POP
// end ;
28159: PPOPN 1
28161: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28162: LD_EXP 38
28166: PUSH
28167: LD_EXP 58
28171: AND
28172: IFFALSE 28181
28174: GO 28176
28176: DISABLE
// StreamSibBomb ;
28177: CALL 28182 0 0
28181: END
// export function StreamSibBomb ; var i , x , y ; begin
28182: LD_INT 0
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
// result := false ;
28188: LD_ADDR_VAR 0 1
28192: PUSH
28193: LD_INT 0
28195: ST_TO_ADDR
// for i := 1 to 16 do
28196: LD_ADDR_VAR 0 2
28200: PUSH
28201: DOUBLE
28202: LD_INT 1
28204: DEC
28205: ST_TO_ADDR
28206: LD_INT 16
28208: PUSH
28209: FOR_TO
28210: IFFALSE 28409
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28212: LD_ADDR_VAR 0 3
28216: PUSH
28217: LD_INT 10
28219: PUSH
28220: LD_INT 20
28222: PUSH
28223: LD_INT 30
28225: PUSH
28226: LD_INT 40
28228: PUSH
28229: LD_INT 50
28231: PUSH
28232: LD_INT 60
28234: PUSH
28235: LD_INT 70
28237: PUSH
28238: LD_INT 80
28240: PUSH
28241: LD_INT 90
28243: PUSH
28244: LD_INT 100
28246: PUSH
28247: LD_INT 110
28249: PUSH
28250: LD_INT 120
28252: PUSH
28253: LD_INT 130
28255: PUSH
28256: LD_INT 140
28258: PUSH
28259: LD_INT 150
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: PPUSH
28282: LD_INT 15
28284: PPUSH
28285: CALL_OW 12
28289: ARRAY
28290: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28291: LD_ADDR_VAR 0 4
28295: PUSH
28296: LD_INT 10
28298: PUSH
28299: LD_INT 20
28301: PUSH
28302: LD_INT 30
28304: PUSH
28305: LD_INT 40
28307: PUSH
28308: LD_INT 50
28310: PUSH
28311: LD_INT 60
28313: PUSH
28314: LD_INT 70
28316: PUSH
28317: LD_INT 80
28319: PUSH
28320: LD_INT 90
28322: PUSH
28323: LD_INT 100
28325: PUSH
28326: LD_INT 110
28328: PUSH
28329: LD_INT 120
28331: PUSH
28332: LD_INT 130
28334: PUSH
28335: LD_INT 140
28337: PUSH
28338: LD_INT 150
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PPUSH
28361: LD_INT 15
28363: PPUSH
28364: CALL_OW 12
28368: ARRAY
28369: ST_TO_ADDR
// if ValidHex ( x , y ) then
28370: LD_VAR 0 3
28374: PPUSH
28375: LD_VAR 0 4
28379: PPUSH
28380: CALL_OW 488
28384: IFFALSE 28407
// begin result := [ x , y ] ;
28386: LD_ADDR_VAR 0 1
28390: PUSH
28391: LD_VAR 0 3
28395: PUSH
28396: LD_VAR 0 4
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// break ;
28405: GO 28409
// end ; end ;
28407: GO 28209
28409: POP
28410: POP
// if result then
28411: LD_VAR 0 1
28415: IFFALSE 28475
// begin ToLua ( playSibBomb() ) ;
28417: LD_STRING playSibBomb()
28419: PPUSH
28420: CALL_OW 559
// wait ( 0 0$14 ) ;
28424: LD_INT 490
28426: PPUSH
28427: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28431: LD_VAR 0 1
28435: PUSH
28436: LD_INT 1
28438: ARRAY
28439: PPUSH
28440: LD_VAR 0 1
28444: PUSH
28445: LD_INT 2
28447: ARRAY
28448: PPUSH
28449: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28453: LD_VAR 0 1
28457: PUSH
28458: LD_INT 1
28460: ARRAY
28461: PPUSH
28462: LD_VAR 0 1
28466: PUSH
28467: LD_INT 2
28469: ARRAY
28470: PPUSH
28471: CALL_OW 429
// end ; end ;
28475: LD_VAR 0 1
28479: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28480: LD_EXP 38
28484: PUSH
28485: LD_EXP 60
28489: AND
28490: IFFALSE 28502
28492: GO 28494
28494: DISABLE
// YouLost (  ) ;
28495: LD_STRING 
28497: PPUSH
28498: CALL_OW 104
28502: END
// every 0 0$1 trigger StreamModeActive and sFog do
28503: LD_EXP 38
28507: PUSH
28508: LD_EXP 59
28512: AND
28513: IFFALSE 28527
28515: GO 28517
28517: DISABLE
// FogOff ( your_side ) ;
28518: LD_OWVAR 2
28522: PPUSH
28523: CALL_OW 344
28527: END
// every 0 0$1 trigger StreamModeActive and sSun do
28528: LD_EXP 38
28532: PUSH
28533: LD_EXP 61
28537: AND
28538: IFFALSE 28566
28540: GO 28542
28542: DISABLE
// begin solar_recharge_percent := 0 ;
28543: LD_ADDR_OWVAR 79
28547: PUSH
28548: LD_INT 0
28550: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28551: LD_INT 10500
28553: PPUSH
28554: CALL_OW 67
// solar_recharge_percent := 100 ;
28558: LD_ADDR_OWVAR 79
28562: PUSH
28563: LD_INT 100
28565: ST_TO_ADDR
// end ;
28566: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28567: LD_EXP 38
28571: PUSH
28572: LD_EXP 62
28576: AND
28577: IFFALSE 28816
28579: GO 28581
28581: DISABLE
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
28586: PPUSH
// begin tmp := [ ] ;
28587: LD_ADDR_VAR 0 3
28591: PUSH
28592: EMPTY
28593: ST_TO_ADDR
// for i := 1 to 6 do
28594: LD_ADDR_VAR 0 1
28598: PUSH
28599: DOUBLE
28600: LD_INT 1
28602: DEC
28603: ST_TO_ADDR
28604: LD_INT 6
28606: PUSH
28607: FOR_TO
28608: IFFALSE 28713
// begin uc_nation := nation_nature ;
28610: LD_ADDR_OWVAR 21
28614: PUSH
28615: LD_INT 0
28617: ST_TO_ADDR
// uc_side := 0 ;
28618: LD_ADDR_OWVAR 20
28622: PUSH
28623: LD_INT 0
28625: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28626: LD_ADDR_OWVAR 29
28630: PUSH
28631: LD_INT 12
28633: PUSH
28634: LD_INT 12
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: ST_TO_ADDR
// hc_agressivity := 20 ;
28641: LD_ADDR_OWVAR 35
28645: PUSH
28646: LD_INT 20
28648: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28649: LD_ADDR_OWVAR 28
28653: PUSH
28654: LD_INT 17
28656: ST_TO_ADDR
// hc_gallery :=  ;
28657: LD_ADDR_OWVAR 33
28661: PUSH
28662: LD_STRING 
28664: ST_TO_ADDR
// hc_name :=  ;
28665: LD_ADDR_OWVAR 26
28669: PUSH
28670: LD_STRING 
28672: ST_TO_ADDR
// un := CreateHuman ;
28673: LD_ADDR_VAR 0 2
28677: PUSH
28678: CALL_OW 44
28682: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28683: LD_VAR 0 2
28687: PPUSH
28688: LD_INT 1
28690: PPUSH
28691: CALL_OW 51
// tmp := tmp ^ un ;
28695: LD_ADDR_VAR 0 3
28699: PUSH
28700: LD_VAR 0 3
28704: PUSH
28705: LD_VAR 0 2
28709: ADD
28710: ST_TO_ADDR
// end ;
28711: GO 28607
28713: POP
28714: POP
// repeat wait ( 0 0$1 ) ;
28715: LD_INT 35
28717: PPUSH
28718: CALL_OW 67
// for un in tmp do
28722: LD_ADDR_VAR 0 2
28726: PUSH
28727: LD_VAR 0 3
28731: PUSH
28732: FOR_IN
28733: IFFALSE 28807
// begin if IsDead ( un ) then
28735: LD_VAR 0 2
28739: PPUSH
28740: CALL_OW 301
28744: IFFALSE 28764
// begin tmp := tmp diff un ;
28746: LD_ADDR_VAR 0 3
28750: PUSH
28751: LD_VAR 0 3
28755: PUSH
28756: LD_VAR 0 2
28760: DIFF
28761: ST_TO_ADDR
// continue ;
28762: GO 28732
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28764: LD_VAR 0 2
28768: PPUSH
28769: LD_INT 3
28771: PUSH
28772: LD_INT 22
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PPUSH
28786: CALL_OW 69
28790: PPUSH
28791: LD_VAR 0 2
28795: PPUSH
28796: CALL_OW 74
28800: PPUSH
28801: CALL_OW 115
// end ;
28805: GO 28732
28807: POP
28808: POP
// until not tmp ;
28809: LD_VAR 0 3
28813: NOT
28814: IFFALSE 28715
// end ;
28816: PPOPN 3
28818: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28819: LD_EXP 38
28823: PUSH
28824: LD_EXP 63
28828: AND
28829: IFFALSE 28883
28831: GO 28833
28833: DISABLE
// begin ToLua ( displayTroll(); ) ;
28834: LD_STRING displayTroll();
28836: PPUSH
28837: CALL_OW 559
// wait ( 3 3$00 ) ;
28841: LD_INT 6300
28843: PPUSH
28844: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28848: LD_STRING hideTroll();
28850: PPUSH
28851: CALL_OW 559
// wait ( 1 1$00 ) ;
28855: LD_INT 2100
28857: PPUSH
28858: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28862: LD_STRING displayTroll();
28864: PPUSH
28865: CALL_OW 559
// wait ( 1 1$00 ) ;
28869: LD_INT 2100
28871: PPUSH
28872: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28876: LD_STRING hideTroll();
28878: PPUSH
28879: CALL_OW 559
// end ;
28883: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28884: LD_EXP 38
28888: PUSH
28889: LD_EXP 64
28893: AND
28894: IFFALSE 28957
28896: GO 28898
28898: DISABLE
28899: LD_INT 0
28901: PPUSH
// begin p := 0 ;
28902: LD_ADDR_VAR 0 1
28906: PUSH
28907: LD_INT 0
28909: ST_TO_ADDR
// repeat game_speed := 1 ;
28910: LD_ADDR_OWVAR 65
28914: PUSH
28915: LD_INT 1
28917: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28918: LD_INT 35
28920: PPUSH
28921: CALL_OW 67
// p := p + 1 ;
28925: LD_ADDR_VAR 0 1
28929: PUSH
28930: LD_VAR 0 1
28934: PUSH
28935: LD_INT 1
28937: PLUS
28938: ST_TO_ADDR
// until p >= 60 ;
28939: LD_VAR 0 1
28943: PUSH
28944: LD_INT 60
28946: GREATEREQUAL
28947: IFFALSE 28910
// game_speed := 4 ;
28949: LD_ADDR_OWVAR 65
28953: PUSH
28954: LD_INT 4
28956: ST_TO_ADDR
// end ;
28957: PPOPN 1
28959: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28960: LD_EXP 38
28964: PUSH
28965: LD_EXP 65
28969: AND
28970: IFFALSE 29116
28972: GO 28974
28974: DISABLE
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28979: LD_ADDR_VAR 0 1
28983: PUSH
28984: LD_INT 22
28986: PUSH
28987: LD_OWVAR 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 30
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 30
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: ST_TO_ADDR
// if not depot then
29033: LD_VAR 0 1
29037: NOT
29038: IFFALSE 29042
// exit ;
29040: GO 29116
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29042: LD_ADDR_VAR 0 2
29046: PUSH
29047: LD_VAR 0 1
29051: PUSH
29052: LD_INT 1
29054: PPUSH
29055: LD_VAR 0 1
29059: PPUSH
29060: CALL_OW 12
29064: ARRAY
29065: PPUSH
29066: CALL_OW 274
29070: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29071: LD_VAR 0 2
29075: PPUSH
29076: LD_INT 1
29078: PPUSH
29079: LD_INT 0
29081: PPUSH
29082: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29086: LD_VAR 0 2
29090: PPUSH
29091: LD_INT 2
29093: PPUSH
29094: LD_INT 0
29096: PPUSH
29097: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29101: LD_VAR 0 2
29105: PPUSH
29106: LD_INT 3
29108: PPUSH
29109: LD_INT 0
29111: PPUSH
29112: CALL_OW 277
// end ;
29116: PPOPN 2
29118: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29119: LD_EXP 38
29123: PUSH
29124: LD_EXP 66
29128: AND
29129: IFFALSE 29226
29131: GO 29133
29133: DISABLE
29134: LD_INT 0
29136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29137: LD_ADDR_VAR 0 1
29141: PUSH
29142: LD_INT 22
29144: PUSH
29145: LD_OWVAR 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 21
29156: PUSH
29157: LD_INT 1
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 3
29166: PUSH
29167: LD_INT 23
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: PPUSH
29186: CALL_OW 69
29190: ST_TO_ADDR
// if not tmp then
29191: LD_VAR 0 1
29195: NOT
29196: IFFALSE 29200
// exit ;
29198: GO 29226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29200: LD_VAR 0 1
29204: PUSH
29205: LD_INT 1
29207: PPUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 12
29217: ARRAY
29218: PPUSH
29219: LD_INT 200
29221: PPUSH
29222: CALL_OW 234
// end ;
29226: PPOPN 1
29228: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29229: LD_EXP 38
29233: PUSH
29234: LD_EXP 67
29238: AND
29239: IFFALSE 29318
29241: GO 29243
29243: DISABLE
29244: LD_INT 0
29246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29247: LD_ADDR_VAR 0 1
29251: PUSH
29252: LD_INT 22
29254: PUSH
29255: LD_OWVAR 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 21
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PPUSH
29278: CALL_OW 69
29282: ST_TO_ADDR
// if not tmp then
29283: LD_VAR 0 1
29287: NOT
29288: IFFALSE 29292
// exit ;
29290: GO 29318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29292: LD_VAR 0 1
29296: PUSH
29297: LD_INT 1
29299: PPUSH
29300: LD_VAR 0 1
29304: PPUSH
29305: CALL_OW 12
29309: ARRAY
29310: PPUSH
29311: LD_INT 60
29313: PPUSH
29314: CALL_OW 234
// end ;
29318: PPOPN 1
29320: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29321: LD_EXP 38
29325: PUSH
29326: LD_EXP 68
29330: AND
29331: IFFALSE 29430
29333: GO 29335
29335: DISABLE
29336: LD_INT 0
29338: PPUSH
29339: PPUSH
// begin enable ;
29340: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29341: LD_ADDR_VAR 0 1
29345: PUSH
29346: LD_INT 22
29348: PUSH
29349: LD_OWVAR 2
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 61
29360: PUSH
29361: EMPTY
29362: LIST
29363: PUSH
29364: LD_INT 33
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: PPUSH
29379: CALL_OW 69
29383: ST_TO_ADDR
// if not tmp then
29384: LD_VAR 0 1
29388: NOT
29389: IFFALSE 29393
// exit ;
29391: GO 29430
// for i in tmp do
29393: LD_ADDR_VAR 0 2
29397: PUSH
29398: LD_VAR 0 1
29402: PUSH
29403: FOR_IN
29404: IFFALSE 29428
// if IsControledBy ( i ) then
29406: LD_VAR 0 2
29410: PPUSH
29411: CALL_OW 312
29415: IFFALSE 29426
// ComUnlink ( i ) ;
29417: LD_VAR 0 2
29421: PPUSH
29422: CALL_OW 136
29426: GO 29403
29428: POP
29429: POP
// end ;
29430: PPOPN 2
29432: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29433: LD_EXP 38
29437: PUSH
29438: LD_EXP 69
29442: AND
29443: IFFALSE 29583
29445: GO 29447
29447: DISABLE
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
// begin ToLua ( displayPowell(); ) ;
29452: LD_STRING displayPowell();
29454: PPUSH
29455: CALL_OW 559
// uc_side := 0 ;
29459: LD_ADDR_OWVAR 20
29463: PUSH
29464: LD_INT 0
29466: ST_TO_ADDR
// uc_nation := 2 ;
29467: LD_ADDR_OWVAR 21
29471: PUSH
29472: LD_INT 2
29474: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29475: LD_ADDR_OWVAR 37
29479: PUSH
29480: LD_INT 14
29482: ST_TO_ADDR
// vc_engine := engine_siberite ;
29483: LD_ADDR_OWVAR 39
29487: PUSH
29488: LD_INT 3
29490: ST_TO_ADDR
// vc_control := control_apeman ;
29491: LD_ADDR_OWVAR 38
29495: PUSH
29496: LD_INT 5
29498: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29499: LD_ADDR_OWVAR 40
29503: PUSH
29504: LD_INT 29
29506: ST_TO_ADDR
// un := CreateVehicle ;
29507: LD_ADDR_VAR 0 2
29511: PUSH
29512: CALL_OW 45
29516: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29517: LD_VAR 0 2
29521: PPUSH
29522: LD_INT 1
29524: PPUSH
29525: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29529: LD_INT 35
29531: PPUSH
29532: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29536: LD_VAR 0 2
29540: PPUSH
29541: LD_INT 22
29543: PUSH
29544: LD_OWVAR 2
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: PPUSH
29558: LD_VAR 0 2
29562: PPUSH
29563: CALL_OW 74
29567: PPUSH
29568: CALL_OW 115
// until IsDead ( un ) ;
29572: LD_VAR 0 2
29576: PPUSH
29577: CALL_OW 301
29581: IFFALSE 29529
// end ;
29583: PPOPN 2
29585: END
// every 0 0$1 trigger StreamModeActive and sStu do
29586: LD_EXP 38
29590: PUSH
29591: LD_EXP 77
29595: AND
29596: IFFALSE 29612
29598: GO 29600
29600: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29601: LD_STRING displayStucuk();
29603: PPUSH
29604: CALL_OW 559
// ResetFog ;
29608: CALL_OW 335
// end ;
29612: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29613: LD_EXP 38
29617: PUSH
29618: LD_EXP 70
29622: AND
29623: IFFALSE 29764
29625: GO 29627
29627: DISABLE
29628: LD_INT 0
29630: PPUSH
29631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29632: LD_ADDR_VAR 0 2
29636: PUSH
29637: LD_INT 22
29639: PUSH
29640: LD_OWVAR 2
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 21
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PPUSH
29663: CALL_OW 69
29667: ST_TO_ADDR
// if not tmp then
29668: LD_VAR 0 2
29672: NOT
29673: IFFALSE 29677
// exit ;
29675: GO 29764
// un := tmp [ rand ( 1 , tmp ) ] ;
29677: LD_ADDR_VAR 0 1
29681: PUSH
29682: LD_VAR 0 2
29686: PUSH
29687: LD_INT 1
29689: PPUSH
29690: LD_VAR 0 2
29694: PPUSH
29695: CALL_OW 12
29699: ARRAY
29700: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29701: LD_VAR 0 1
29705: PPUSH
29706: LD_INT 0
29708: PPUSH
29709: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29713: LD_VAR 0 1
29717: PPUSH
29718: LD_OWVAR 3
29722: PUSH
29723: LD_VAR 0 1
29727: DIFF
29728: PPUSH
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 74
29738: PPUSH
29739: CALL_OW 115
// wait ( 0 0$20 ) ;
29743: LD_INT 700
29745: PPUSH
29746: CALL_OW 67
// SetSide ( un , your_side ) ;
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_OWVAR 2
29759: PPUSH
29760: CALL_OW 235
// end ;
29764: PPOPN 2
29766: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29767: LD_EXP 38
29771: PUSH
29772: LD_EXP 71
29776: AND
29777: IFFALSE 29883
29779: GO 29781
29781: DISABLE
29782: LD_INT 0
29784: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29785: LD_ADDR_VAR 0 1
29789: PUSH
29790: LD_INT 22
29792: PUSH
29793: LD_OWVAR 2
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: LD_INT 30
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 30
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: ST_TO_ADDR
// if not depot then
29839: LD_VAR 0 1
29843: NOT
29844: IFFALSE 29848
// exit ;
29846: GO 29883
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29848: LD_VAR 0 1
29852: PUSH
29853: LD_INT 1
29855: ARRAY
29856: PPUSH
29857: CALL_OW 250
29861: PPUSH
29862: LD_VAR 0 1
29866: PUSH
29867: LD_INT 1
29869: ARRAY
29870: PPUSH
29871: CALL_OW 251
29875: PPUSH
29876: LD_INT 70
29878: PPUSH
29879: CALL_OW 495
// end ;
29883: PPOPN 1
29885: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29886: LD_EXP 38
29890: PUSH
29891: LD_EXP 72
29895: AND
29896: IFFALSE 30107
29898: GO 29900
29900: DISABLE
29901: LD_INT 0
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29908: LD_ADDR_VAR 0 5
29912: PUSH
29913: LD_INT 22
29915: PUSH
29916: LD_OWVAR 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 21
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PPUSH
29939: CALL_OW 69
29943: ST_TO_ADDR
// if not tmp then
29944: LD_VAR 0 5
29948: NOT
29949: IFFALSE 29953
// exit ;
29951: GO 30107
// for i in tmp do
29953: LD_ADDR_VAR 0 1
29957: PUSH
29958: LD_VAR 0 5
29962: PUSH
29963: FOR_IN
29964: IFFALSE 30105
// begin d := rand ( 0 , 5 ) ;
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: LD_INT 0
29973: PPUSH
29974: LD_INT 5
29976: PPUSH
29977: CALL_OW 12
29981: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29982: LD_ADDR_VAR 0 2
29986: PUSH
29987: LD_VAR 0 1
29991: PPUSH
29992: CALL_OW 250
29996: PPUSH
29997: LD_VAR 0 4
30001: PPUSH
30002: LD_INT 3
30004: PPUSH
30005: LD_INT 12
30007: PPUSH
30008: CALL_OW 12
30012: PPUSH
30013: CALL_OW 272
30017: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 251
30032: PPUSH
30033: LD_VAR 0 4
30037: PPUSH
30038: LD_INT 3
30040: PPUSH
30041: LD_INT 12
30043: PPUSH
30044: CALL_OW 12
30048: PPUSH
30049: CALL_OW 273
30053: ST_TO_ADDR
// if ValidHex ( x , y ) then
30054: LD_VAR 0 2
30058: PPUSH
30059: LD_VAR 0 3
30063: PPUSH
30064: CALL_OW 488
30068: IFFALSE 30103
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30070: LD_VAR 0 1
30074: PPUSH
30075: LD_VAR 0 2
30079: PPUSH
30080: LD_VAR 0 3
30084: PPUSH
30085: LD_INT 3
30087: PPUSH
30088: LD_INT 6
30090: PPUSH
30091: CALL_OW 12
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: CALL_OW 483
// end ;
30103: GO 29963
30105: POP
30106: POP
// end ;
30107: PPOPN 5
30109: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30110: LD_EXP 38
30114: PUSH
30115: LD_EXP 73
30119: AND
30120: IFFALSE 30214
30122: GO 30124
30124: DISABLE
30125: LD_INT 0
30127: PPUSH
30128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30129: LD_ADDR_VAR 0 2
30133: PUSH
30134: LD_INT 22
30136: PUSH
30137: LD_OWVAR 2
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 32
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 21
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: PPUSH
30171: CALL_OW 69
30175: ST_TO_ADDR
// if not tmp then
30176: LD_VAR 0 2
30180: NOT
30181: IFFALSE 30185
// exit ;
30183: GO 30214
// for i in tmp do
30185: LD_ADDR_VAR 0 1
30189: PUSH
30190: LD_VAR 0 2
30194: PUSH
30195: FOR_IN
30196: IFFALSE 30212
// SetFuel ( i , 0 ) ;
30198: LD_VAR 0 1
30202: PPUSH
30203: LD_INT 0
30205: PPUSH
30206: CALL_OW 240
30210: GO 30195
30212: POP
30213: POP
// end ;
30214: PPOPN 2
30216: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30217: LD_EXP 38
30221: PUSH
30222: LD_EXP 74
30226: AND
30227: IFFALSE 30293
30229: GO 30231
30231: DISABLE
30232: LD_INT 0
30234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30235: LD_ADDR_VAR 0 1
30239: PUSH
30240: LD_INT 22
30242: PUSH
30243: LD_OWVAR 2
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 30
30254: PUSH
30255: LD_INT 29
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 69
30270: ST_TO_ADDR
// if not tmp then
30271: LD_VAR 0 1
30275: NOT
30276: IFFALSE 30280
// exit ;
30278: GO 30293
// DestroyUnit ( tmp [ 1 ] ) ;
30280: LD_VAR 0 1
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: CALL_OW 65
// end ;
30293: PPOPN 1
30295: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30296: LD_EXP 38
30300: PUSH
30301: LD_EXP 76
30305: AND
30306: IFFALSE 30435
30308: GO 30310
30310: DISABLE
30311: LD_INT 0
30313: PPUSH
// begin uc_side := 0 ;
30314: LD_ADDR_OWVAR 20
30318: PUSH
30319: LD_INT 0
30321: ST_TO_ADDR
// uc_nation := nation_arabian ;
30322: LD_ADDR_OWVAR 21
30326: PUSH
30327: LD_INT 2
30329: ST_TO_ADDR
// hc_gallery :=  ;
30330: LD_ADDR_OWVAR 33
30334: PUSH
30335: LD_STRING 
30337: ST_TO_ADDR
// hc_name :=  ;
30338: LD_ADDR_OWVAR 26
30342: PUSH
30343: LD_STRING 
30345: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30346: LD_INT 1
30348: PPUSH
30349: LD_INT 11
30351: PPUSH
30352: LD_INT 10
30354: PPUSH
30355: CALL_OW 380
// un := CreateHuman ;
30359: LD_ADDR_VAR 0 1
30363: PUSH
30364: CALL_OW 44
30368: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30369: LD_VAR 0 1
30373: PPUSH
30374: LD_INT 1
30376: PPUSH
30377: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30381: LD_INT 35
30383: PPUSH
30384: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30388: LD_VAR 0 1
30392: PPUSH
30393: LD_INT 22
30395: PUSH
30396: LD_OWVAR 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PPUSH
30405: CALL_OW 69
30409: PPUSH
30410: LD_VAR 0 1
30414: PPUSH
30415: CALL_OW 74
30419: PPUSH
30420: CALL_OW 115
// until IsDead ( un ) ;
30424: LD_VAR 0 1
30428: PPUSH
30429: CALL_OW 301
30433: IFFALSE 30381
// end ;
30435: PPOPN 1
30437: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30438: LD_EXP 38
30442: PUSH
30443: LD_EXP 78
30447: AND
30448: IFFALSE 30460
30450: GO 30452
30452: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30453: LD_STRING earthquake(getX(game), 0, 32)
30455: PPUSH
30456: CALL_OW 559
30460: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30461: LD_EXP 38
30465: PUSH
30466: LD_EXP 79
30470: AND
30471: IFFALSE 30562
30473: GO 30475
30475: DISABLE
30476: LD_INT 0
30478: PPUSH
// begin enable ;
30479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30480: LD_ADDR_VAR 0 1
30484: PUSH
30485: LD_INT 22
30487: PUSH
30488: LD_OWVAR 2
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 21
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 33
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: PPUSH
30522: CALL_OW 69
30526: ST_TO_ADDR
// if not tmp then
30527: LD_VAR 0 1
30531: NOT
30532: IFFALSE 30536
// exit ;
30534: GO 30562
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30536: LD_VAR 0 1
30540: PUSH
30541: LD_INT 1
30543: PPUSH
30544: LD_VAR 0 1
30548: PPUSH
30549: CALL_OW 12
30553: ARRAY
30554: PPUSH
30555: LD_INT 1
30557: PPUSH
30558: CALL_OW 234
// end ;
30562: PPOPN 1
30564: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30565: LD_EXP 38
30569: PUSH
30570: LD_EXP 80
30574: AND
30575: IFFALSE 30716
30577: GO 30579
30579: DISABLE
30580: LD_INT 0
30582: PPUSH
30583: PPUSH
30584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30585: LD_ADDR_VAR 0 3
30589: PUSH
30590: LD_INT 22
30592: PUSH
30593: LD_OWVAR 2
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 25
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PPUSH
30616: CALL_OW 69
30620: ST_TO_ADDR
// if not tmp then
30621: LD_VAR 0 3
30625: NOT
30626: IFFALSE 30630
// exit ;
30628: GO 30716
// un := tmp [ rand ( 1 , tmp ) ] ;
30630: LD_ADDR_VAR 0 2
30634: PUSH
30635: LD_VAR 0 3
30639: PUSH
30640: LD_INT 1
30642: PPUSH
30643: LD_VAR 0 3
30647: PPUSH
30648: CALL_OW 12
30652: ARRAY
30653: ST_TO_ADDR
// if Crawls ( un ) then
30654: LD_VAR 0 2
30658: PPUSH
30659: CALL_OW 318
30663: IFFALSE 30674
// ComWalk ( un ) ;
30665: LD_VAR 0 2
30669: PPUSH
30670: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30674: LD_VAR 0 2
30678: PPUSH
30679: LD_INT 9
30681: PPUSH
30682: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30686: LD_INT 28
30688: PPUSH
30689: LD_OWVAR 2
30693: PPUSH
30694: LD_INT 2
30696: PPUSH
30697: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30701: LD_INT 29
30703: PPUSH
30704: LD_OWVAR 2
30708: PPUSH
30709: LD_INT 2
30711: PPUSH
30712: CALL_OW 322
// end ;
30716: PPOPN 3
30718: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30719: LD_EXP 38
30723: PUSH
30724: LD_EXP 81
30728: AND
30729: IFFALSE 30840
30731: GO 30733
30733: DISABLE
30734: LD_INT 0
30736: PPUSH
30737: PPUSH
30738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30739: LD_ADDR_VAR 0 3
30743: PUSH
30744: LD_INT 22
30746: PUSH
30747: LD_OWVAR 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 25
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 69
30774: ST_TO_ADDR
// if not tmp then
30775: LD_VAR 0 3
30779: NOT
30780: IFFALSE 30784
// exit ;
30782: GO 30840
// un := tmp [ rand ( 1 , tmp ) ] ;
30784: LD_ADDR_VAR 0 2
30788: PUSH
30789: LD_VAR 0 3
30793: PUSH
30794: LD_INT 1
30796: PPUSH
30797: LD_VAR 0 3
30801: PPUSH
30802: CALL_OW 12
30806: ARRAY
30807: ST_TO_ADDR
// if Crawls ( un ) then
30808: LD_VAR 0 2
30812: PPUSH
30813: CALL_OW 318
30817: IFFALSE 30828
// ComWalk ( un ) ;
30819: LD_VAR 0 2
30823: PPUSH
30824: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30828: LD_VAR 0 2
30832: PPUSH
30833: LD_INT 8
30835: PPUSH
30836: CALL_OW 336
// end ;
30840: PPOPN 3
30842: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30843: LD_EXP 38
30847: PUSH
30848: LD_EXP 82
30852: AND
30853: IFFALSE 30997
30855: GO 30857
30857: DISABLE
30858: LD_INT 0
30860: PPUSH
30861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30862: LD_ADDR_VAR 0 2
30866: PUSH
30867: LD_INT 22
30869: PUSH
30870: LD_OWVAR 2
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 21
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 34
30894: PUSH
30895: LD_INT 12
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 34
30904: PUSH
30905: LD_INT 51
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 34
30914: PUSH
30915: LD_INT 32
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: ST_TO_ADDR
// if not tmp then
30938: LD_VAR 0 2
30942: NOT
30943: IFFALSE 30947
// exit ;
30945: GO 30997
// for i in tmp do
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: LD_VAR 0 2
30956: PUSH
30957: FOR_IN
30958: IFFALSE 30995
// if GetCargo ( i , mat_artifact ) = 0 then
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_INT 4
30967: PPUSH
30968: CALL_OW 289
30972: PUSH
30973: LD_INT 0
30975: EQUAL
30976: IFFALSE 30993
// SetCargo ( i , mat_siberit , 100 ) ;
30978: LD_VAR 0 1
30982: PPUSH
30983: LD_INT 3
30985: PPUSH
30986: LD_INT 100
30988: PPUSH
30989: CALL_OW 290
30993: GO 30957
30995: POP
30996: POP
// end ;
30997: PPOPN 2
30999: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31000: LD_EXP 38
31004: PUSH
31005: LD_EXP 83
31009: AND
31010: IFFALSE 31193
31012: GO 31014
31014: DISABLE
31015: LD_INT 0
31017: PPUSH
31018: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31019: LD_ADDR_VAR 0 2
31023: PUSH
31024: LD_INT 22
31026: PUSH
31027: LD_OWVAR 2
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PPUSH
31036: CALL_OW 69
31040: ST_TO_ADDR
// if not tmp then
31041: LD_VAR 0 2
31045: NOT
31046: IFFALSE 31050
// exit ;
31048: GO 31193
// for i := 1 to 2 do
31050: LD_ADDR_VAR 0 1
31054: PUSH
31055: DOUBLE
31056: LD_INT 1
31058: DEC
31059: ST_TO_ADDR
31060: LD_INT 2
31062: PUSH
31063: FOR_TO
31064: IFFALSE 31191
// begin uc_side := your_side ;
31066: LD_ADDR_OWVAR 20
31070: PUSH
31071: LD_OWVAR 2
31075: ST_TO_ADDR
// uc_nation := nation_american ;
31076: LD_ADDR_OWVAR 21
31080: PUSH
31081: LD_INT 1
31083: ST_TO_ADDR
// vc_chassis := us_morphling ;
31084: LD_ADDR_OWVAR 37
31088: PUSH
31089: LD_INT 5
31091: ST_TO_ADDR
// vc_engine := engine_siberite ;
31092: LD_ADDR_OWVAR 39
31096: PUSH
31097: LD_INT 3
31099: ST_TO_ADDR
// vc_control := control_computer ;
31100: LD_ADDR_OWVAR 38
31104: PUSH
31105: LD_INT 3
31107: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31108: LD_ADDR_OWVAR 40
31112: PUSH
31113: LD_INT 10
31115: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31116: LD_VAR 0 2
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: CALL_OW 310
31129: NOT
31130: IFFALSE 31177
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31132: CALL_OW 45
31136: PPUSH
31137: LD_VAR 0 2
31141: PUSH
31142: LD_INT 1
31144: ARRAY
31145: PPUSH
31146: CALL_OW 250
31150: PPUSH
31151: LD_VAR 0 2
31155: PUSH
31156: LD_INT 1
31158: ARRAY
31159: PPUSH
31160: CALL_OW 251
31164: PPUSH
31165: LD_INT 12
31167: PPUSH
31168: LD_INT 1
31170: PPUSH
31171: CALL_OW 50
31175: GO 31189
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31177: CALL_OW 45
31181: PPUSH
31182: LD_INT 1
31184: PPUSH
31185: CALL_OW 51
// end ;
31189: GO 31063
31191: POP
31192: POP
// end ;
31193: PPOPN 2
31195: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31196: LD_EXP 38
31200: PUSH
31201: LD_EXP 84
31205: AND
31206: IFFALSE 31428
31208: GO 31210
31210: DISABLE
31211: LD_INT 0
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31219: LD_ADDR_VAR 0 6
31223: PUSH
31224: LD_INT 22
31226: PUSH
31227: LD_OWVAR 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 21
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 23
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: ST_TO_ADDR
// if not tmp then
31273: LD_VAR 0 6
31277: NOT
31278: IFFALSE 31282
// exit ;
31280: GO 31428
// s1 := rand ( 1 , 4 ) ;
31282: LD_ADDR_VAR 0 2
31286: PUSH
31287: LD_INT 1
31289: PPUSH
31290: LD_INT 4
31292: PPUSH
31293: CALL_OW 12
31297: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31298: LD_ADDR_VAR 0 4
31302: PUSH
31303: LD_VAR 0 6
31307: PUSH
31308: LD_INT 1
31310: ARRAY
31311: PPUSH
31312: LD_VAR 0 2
31316: PPUSH
31317: CALL_OW 259
31321: ST_TO_ADDR
// if s1 = 1 then
31322: LD_VAR 0 2
31326: PUSH
31327: LD_INT 1
31329: EQUAL
31330: IFFALSE 31350
// s2 := rand ( 2 , 4 ) else
31332: LD_ADDR_VAR 0 3
31336: PUSH
31337: LD_INT 2
31339: PPUSH
31340: LD_INT 4
31342: PPUSH
31343: CALL_OW 12
31347: ST_TO_ADDR
31348: GO 31358
// s2 := 1 ;
31350: LD_ADDR_VAR 0 3
31354: PUSH
31355: LD_INT 1
31357: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31358: LD_ADDR_VAR 0 5
31362: PUSH
31363: LD_VAR 0 6
31367: PUSH
31368: LD_INT 1
31370: ARRAY
31371: PPUSH
31372: LD_VAR 0 3
31376: PPUSH
31377: CALL_OW 259
31381: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31382: LD_VAR 0 6
31386: PUSH
31387: LD_INT 1
31389: ARRAY
31390: PPUSH
31391: LD_VAR 0 2
31395: PPUSH
31396: LD_VAR 0 5
31400: PPUSH
31401: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31405: LD_VAR 0 6
31409: PUSH
31410: LD_INT 1
31412: ARRAY
31413: PPUSH
31414: LD_VAR 0 3
31418: PPUSH
31419: LD_VAR 0 4
31423: PPUSH
31424: CALL_OW 237
// end ;
31428: PPOPN 6
31430: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31431: LD_EXP 38
31435: PUSH
31436: LD_EXP 85
31440: AND
31441: IFFALSE 31520
31443: GO 31445
31445: DISABLE
31446: LD_INT 0
31448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31449: LD_ADDR_VAR 0 1
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_OWVAR 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 30
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PPUSH
31480: CALL_OW 69
31484: ST_TO_ADDR
// if not tmp then
31485: LD_VAR 0 1
31489: NOT
31490: IFFALSE 31494
// exit ;
31492: GO 31520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31494: LD_VAR 0 1
31498: PUSH
31499: LD_INT 1
31501: PPUSH
31502: LD_VAR 0 1
31506: PPUSH
31507: CALL_OW 12
31511: ARRAY
31512: PPUSH
31513: LD_INT 1
31515: PPUSH
31516: CALL_OW 234
// end ;
31520: PPOPN 1
31522: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31523: LD_EXP 38
31527: PUSH
31528: LD_EXP 86
31532: AND
31533: IFFALSE 31645
31535: GO 31537
31537: DISABLE
31538: LD_INT 0
31540: PPUSH
31541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31542: LD_ADDR_VAR 0 2
31546: PUSH
31547: LD_INT 22
31549: PUSH
31550: LD_OWVAR 2
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: LD_INT 30
31564: PUSH
31565: LD_INT 27
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 30
31574: PUSH
31575: LD_INT 26
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 30
31584: PUSH
31585: LD_INT 28
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PPUSH
31602: CALL_OW 69
31606: ST_TO_ADDR
// if not tmp then
31607: LD_VAR 0 2
31611: NOT
31612: IFFALSE 31616
// exit ;
31614: GO 31645
// for i in tmp do
31616: LD_ADDR_VAR 0 1
31620: PUSH
31621: LD_VAR 0 2
31625: PUSH
31626: FOR_IN
31627: IFFALSE 31643
// SetLives ( i , 1 ) ;
31629: LD_VAR 0 1
31633: PPUSH
31634: LD_INT 1
31636: PPUSH
31637: CALL_OW 234
31641: GO 31626
31643: POP
31644: POP
// end ;
31645: PPOPN 2
31647: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31648: LD_EXP 38
31652: PUSH
31653: LD_EXP 87
31657: AND
31658: IFFALSE 31945
31660: GO 31662
31662: DISABLE
31663: LD_INT 0
31665: PPUSH
31666: PPUSH
31667: PPUSH
// begin i := rand ( 1 , 7 ) ;
31668: LD_ADDR_VAR 0 1
31672: PUSH
31673: LD_INT 1
31675: PPUSH
31676: LD_INT 7
31678: PPUSH
31679: CALL_OW 12
31683: ST_TO_ADDR
// case i of 1 :
31684: LD_VAR 0 1
31688: PUSH
31689: LD_INT 1
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31707
31697: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31698: LD_STRING earthquake(getX(game), 0, 32)
31700: PPUSH
31701: CALL_OW 559
31705: GO 31945
31707: LD_INT 2
31709: DOUBLE
31710: EQUAL
31711: IFTRUE 31715
31713: GO 31729
31715: POP
// begin ToLua ( displayStucuk(); ) ;
31716: LD_STRING displayStucuk();
31718: PPUSH
31719: CALL_OW 559
// ResetFog ;
31723: CALL_OW 335
// end ; 3 :
31727: GO 31945
31729: LD_INT 3
31731: DOUBLE
31732: EQUAL
31733: IFTRUE 31737
31735: GO 31841
31737: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31738: LD_ADDR_VAR 0 2
31742: PUSH
31743: LD_INT 22
31745: PUSH
31746: LD_OWVAR 2
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 25
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PPUSH
31769: CALL_OW 69
31773: ST_TO_ADDR
// if not tmp then
31774: LD_VAR 0 2
31778: NOT
31779: IFFALSE 31783
// exit ;
31781: GO 31945
// un := tmp [ rand ( 1 , tmp ) ] ;
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_VAR 0 2
31792: PUSH
31793: LD_INT 1
31795: PPUSH
31796: LD_VAR 0 2
31800: PPUSH
31801: CALL_OW 12
31805: ARRAY
31806: ST_TO_ADDR
// if Crawls ( un ) then
31807: LD_VAR 0 3
31811: PPUSH
31812: CALL_OW 318
31816: IFFALSE 31827
// ComWalk ( un ) ;
31818: LD_VAR 0 3
31822: PPUSH
31823: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31827: LD_VAR 0 3
31831: PPUSH
31832: LD_INT 8
31834: PPUSH
31835: CALL_OW 336
// end ; 4 :
31839: GO 31945
31841: LD_INT 4
31843: DOUBLE
31844: EQUAL
31845: IFTRUE 31849
31847: GO 31923
31849: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_INT 22
31857: PUSH
31858: LD_OWVAR 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 30
31869: PUSH
31870: LD_INT 29
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PPUSH
31881: CALL_OW 69
31885: ST_TO_ADDR
// if not tmp then
31886: LD_VAR 0 2
31890: NOT
31891: IFFALSE 31895
// exit ;
31893: GO 31945
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31895: LD_VAR 0 2
31899: PUSH
31900: LD_INT 1
31902: ARRAY
31903: PPUSH
31904: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31908: LD_VAR 0 2
31912: PUSH
31913: LD_INT 1
31915: ARRAY
31916: PPUSH
31917: CALL_OW 65
// end ; 5 .. 7 :
31921: GO 31945
31923: LD_INT 5
31925: DOUBLE
31926: GREATEREQUAL
31927: IFFALSE 31935
31929: LD_INT 7
31931: DOUBLE
31932: LESSEQUAL
31933: IFTRUE 31937
31935: GO 31944
31937: POP
// StreamSibBomb ; end ;
31938: CALL 28182 0 0
31942: GO 31945
31944: POP
// end ;
31945: PPOPN 3
31947: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31948: LD_EXP 38
31952: PUSH
31953: LD_EXP 88
31957: AND
31958: IFFALSE 32114
31960: GO 31962
31962: DISABLE
31963: LD_INT 0
31965: PPUSH
31966: PPUSH
31967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: LD_INT 81
31975: PUSH
31976: LD_OWVAR 2
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: LD_INT 21
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 21
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PPUSH
32017: CALL_OW 69
32021: ST_TO_ADDR
// if not tmp then
32022: LD_VAR 0 2
32026: NOT
32027: IFFALSE 32031
// exit ;
32029: GO 32114
// p := 0 ;
32031: LD_ADDR_VAR 0 3
32035: PUSH
32036: LD_INT 0
32038: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32039: LD_INT 35
32041: PPUSH
32042: CALL_OW 67
// p := p + 1 ;
32046: LD_ADDR_VAR 0 3
32050: PUSH
32051: LD_VAR 0 3
32055: PUSH
32056: LD_INT 1
32058: PLUS
32059: ST_TO_ADDR
// for i in tmp do
32060: LD_ADDR_VAR 0 1
32064: PUSH
32065: LD_VAR 0 2
32069: PUSH
32070: FOR_IN
32071: IFFALSE 32102
// if GetLives ( i ) < 1000 then
32073: LD_VAR 0 1
32077: PPUSH
32078: CALL_OW 256
32082: PUSH
32083: LD_INT 1000
32085: LESS
32086: IFFALSE 32100
// SetLives ( i , 1000 ) ;
32088: LD_VAR 0 1
32092: PPUSH
32093: LD_INT 1000
32095: PPUSH
32096: CALL_OW 234
32100: GO 32070
32102: POP
32103: POP
// until p > 20 ;
32104: LD_VAR 0 3
32108: PUSH
32109: LD_INT 20
32111: GREATER
32112: IFFALSE 32039
// end ;
32114: PPOPN 3
32116: END
// every 0 0$1 trigger StreamModeActive and sTime do
32117: LD_EXP 38
32121: PUSH
32122: LD_EXP 89
32126: AND
32127: IFFALSE 32162
32129: GO 32131
32131: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32132: LD_INT 28
32134: PPUSH
32135: LD_OWVAR 2
32139: PPUSH
32140: LD_INT 2
32142: PPUSH
32143: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32147: LD_INT 30
32149: PPUSH
32150: LD_OWVAR 2
32154: PPUSH
32155: LD_INT 2
32157: PPUSH
32158: CALL_OW 322
// end ;
32162: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32163: LD_EXP 38
32167: PUSH
32168: LD_EXP 90
32172: AND
32173: IFFALSE 32294
32175: GO 32177
32177: DISABLE
32178: LD_INT 0
32180: PPUSH
32181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32182: LD_ADDR_VAR 0 2
32186: PUSH
32187: LD_INT 22
32189: PUSH
32190: LD_OWVAR 2
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 21
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: LD_INT 23
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: PPUSH
32231: CALL_OW 69
32235: ST_TO_ADDR
// if not tmp then
32236: LD_VAR 0 2
32240: NOT
32241: IFFALSE 32245
// exit ;
32243: GO 32294
// for i in tmp do
32245: LD_ADDR_VAR 0 1
32249: PUSH
32250: LD_VAR 0 2
32254: PUSH
32255: FOR_IN
32256: IFFALSE 32292
// begin if Crawls ( i ) then
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 318
32267: IFFALSE 32278
// ComWalk ( i ) ;
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 138
// SetClass ( i , 2 ) ;
32278: LD_VAR 0 1
32282: PPUSH
32283: LD_INT 2
32285: PPUSH
32286: CALL_OW 336
// end ;
32290: GO 32255
32292: POP
32293: POP
// end ;
32294: PPOPN 2
32296: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32297: LD_EXP 38
32301: PUSH
32302: LD_EXP 91
32306: AND
32307: IFFALSE 32595
32309: GO 32311
32311: DISABLE
32312: LD_INT 0
32314: PPUSH
32315: PPUSH
32316: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32317: LD_OWVAR 2
32321: PPUSH
32322: LD_INT 9
32324: PPUSH
32325: LD_INT 1
32327: PPUSH
32328: LD_INT 1
32330: PPUSH
32331: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32335: LD_INT 9
32337: PPUSH
32338: LD_OWVAR 2
32342: PPUSH
32343: CALL_OW 343
// uc_side := 9 ;
32347: LD_ADDR_OWVAR 20
32351: PUSH
32352: LD_INT 9
32354: ST_TO_ADDR
// uc_nation := 2 ;
32355: LD_ADDR_OWVAR 21
32359: PUSH
32360: LD_INT 2
32362: ST_TO_ADDR
// hc_name := Dark Warrior ;
32363: LD_ADDR_OWVAR 26
32367: PUSH
32368: LD_STRING Dark Warrior
32370: ST_TO_ADDR
// hc_gallery :=  ;
32371: LD_ADDR_OWVAR 33
32375: PUSH
32376: LD_STRING 
32378: ST_TO_ADDR
// hc_noskilllimit := true ;
32379: LD_ADDR_OWVAR 76
32383: PUSH
32384: LD_INT 1
32386: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32387: LD_ADDR_OWVAR 31
32391: PUSH
32392: LD_INT 30
32394: PUSH
32395: LD_INT 30
32397: PUSH
32398: LD_INT 30
32400: PUSH
32401: LD_INT 30
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: ST_TO_ADDR
// un := CreateHuman ;
32410: LD_ADDR_VAR 0 3
32414: PUSH
32415: CALL_OW 44
32419: ST_TO_ADDR
// hc_noskilllimit := false ;
32420: LD_ADDR_OWVAR 76
32424: PUSH
32425: LD_INT 0
32427: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32428: LD_VAR 0 3
32432: PPUSH
32433: LD_INT 1
32435: PPUSH
32436: CALL_OW 51
// ToLua ( playRanger() ) ;
32440: LD_STRING playRanger()
32442: PPUSH
32443: CALL_OW 559
// p := 0 ;
32447: LD_ADDR_VAR 0 2
32451: PUSH
32452: LD_INT 0
32454: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32455: LD_INT 35
32457: PPUSH
32458: CALL_OW 67
// p := p + 1 ;
32462: LD_ADDR_VAR 0 2
32466: PUSH
32467: LD_VAR 0 2
32471: PUSH
32472: LD_INT 1
32474: PLUS
32475: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32476: LD_VAR 0 3
32480: PPUSH
32481: CALL_OW 256
32485: PUSH
32486: LD_INT 1000
32488: LESS
32489: IFFALSE 32503
// SetLives ( un , 1000 ) ;
32491: LD_VAR 0 3
32495: PPUSH
32496: LD_INT 1000
32498: PPUSH
32499: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32503: LD_VAR 0 3
32507: PPUSH
32508: LD_INT 81
32510: PUSH
32511: LD_OWVAR 2
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 91
32522: PUSH
32523: LD_VAR 0 3
32527: PUSH
32528: LD_INT 30
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PPUSH
32540: CALL_OW 69
32544: PPUSH
32545: LD_VAR 0 3
32549: PPUSH
32550: CALL_OW 74
32554: PPUSH
32555: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32559: LD_VAR 0 2
32563: PUSH
32564: LD_INT 80
32566: GREATER
32567: PUSH
32568: LD_VAR 0 3
32572: PPUSH
32573: CALL_OW 301
32577: OR
32578: IFFALSE 32455
// if un then
32580: LD_VAR 0 3
32584: IFFALSE 32595
// RemoveUnit ( un ) ;
32586: LD_VAR 0 3
32590: PPUSH
32591: CALL_OW 64
// end ;
32595: PPOPN 3
32597: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32598: LD_EXP 92
32602: IFFALSE 32718
32604: GO 32606
32606: DISABLE
32607: LD_INT 0
32609: PPUSH
32610: PPUSH
32611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32612: LD_ADDR_VAR 0 2
32616: PUSH
32617: LD_INT 81
32619: PUSH
32620: LD_OWVAR 2
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 21
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PPUSH
32643: CALL_OW 69
32647: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32648: LD_STRING playComputer()
32650: PPUSH
32651: CALL_OW 559
// if not tmp then
32655: LD_VAR 0 2
32659: NOT
32660: IFFALSE 32664
// exit ;
32662: GO 32718
// for i in tmp do
32664: LD_ADDR_VAR 0 1
32668: PUSH
32669: LD_VAR 0 2
32673: PUSH
32674: FOR_IN
32675: IFFALSE 32716
// for j := 1 to 4 do
32677: LD_ADDR_VAR 0 3
32681: PUSH
32682: DOUBLE
32683: LD_INT 1
32685: DEC
32686: ST_TO_ADDR
32687: LD_INT 4
32689: PUSH
32690: FOR_TO
32691: IFFALSE 32712
// SetSkill ( i , j , 10 ) ;
32693: LD_VAR 0 1
32697: PPUSH
32698: LD_VAR 0 3
32702: PPUSH
32703: LD_INT 10
32705: PPUSH
32706: CALL_OW 237
32710: GO 32690
32712: POP
32713: POP
32714: GO 32674
32716: POP
32717: POP
// end ;
32718: PPOPN 3
32720: END
// every 0 0$1 trigger s30 do var i , tmp ;
32721: LD_EXP 93
32725: IFFALSE 32794
32727: GO 32729
32729: DISABLE
32730: LD_INT 0
32732: PPUSH
32733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32734: LD_ADDR_VAR 0 2
32738: PUSH
32739: LD_INT 22
32741: PUSH
32742: LD_OWVAR 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PPUSH
32751: CALL_OW 69
32755: ST_TO_ADDR
// if not tmp then
32756: LD_VAR 0 2
32760: NOT
32761: IFFALSE 32765
// exit ;
32763: GO 32794
// for i in tmp do
32765: LD_ADDR_VAR 0 1
32769: PUSH
32770: LD_VAR 0 2
32774: PUSH
32775: FOR_IN
32776: IFFALSE 32792
// SetLives ( i , 300 ) ;
32778: LD_VAR 0 1
32782: PPUSH
32783: LD_INT 300
32785: PPUSH
32786: CALL_OW 234
32790: GO 32775
32792: POP
32793: POP
// end ;
32794: PPOPN 2
32796: END
// every 0 0$1 trigger s60 do var i , tmp ;
32797: LD_EXP 94
32801: IFFALSE 32870
32803: GO 32805
32805: DISABLE
32806: LD_INT 0
32808: PPUSH
32809: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32810: LD_ADDR_VAR 0 2
32814: PUSH
32815: LD_INT 22
32817: PUSH
32818: LD_OWVAR 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PPUSH
32827: CALL_OW 69
32831: ST_TO_ADDR
// if not tmp then
32832: LD_VAR 0 2
32836: NOT
32837: IFFALSE 32841
// exit ;
32839: GO 32870
// for i in tmp do
32841: LD_ADDR_VAR 0 1
32845: PUSH
32846: LD_VAR 0 2
32850: PUSH
32851: FOR_IN
32852: IFFALSE 32868
// SetLives ( i , 600 ) ;
32854: LD_VAR 0 1
32858: PPUSH
32859: LD_INT 600
32861: PPUSH
32862: CALL_OW 234
32866: GO 32851
32868: POP
32869: POP
// end ;
32870: PPOPN 2
32872: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32873: LD_INT 0
32875: PPUSH
// case cmd of 301 :
32876: LD_VAR 0 1
32880: PUSH
32881: LD_INT 301
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32921
32889: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32890: LD_VAR 0 6
32894: PPUSH
32895: LD_VAR 0 7
32899: PPUSH
32900: LD_VAR 0 8
32904: PPUSH
32905: LD_VAR 0 4
32909: PPUSH
32910: LD_VAR 0 5
32914: PPUSH
32915: CALL 34130 0 5
32919: GO 33042
32921: LD_INT 302
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32966
32929: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32930: LD_VAR 0 6
32934: PPUSH
32935: LD_VAR 0 7
32939: PPUSH
32940: LD_VAR 0 8
32944: PPUSH
32945: LD_VAR 0 9
32949: PPUSH
32950: LD_VAR 0 4
32954: PPUSH
32955: LD_VAR 0 5
32959: PPUSH
32960: CALL 34221 0 6
32964: GO 33042
32966: LD_INT 303
32968: DOUBLE
32969: EQUAL
32970: IFTRUE 32974
32972: GO 33011
32974: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32975: LD_VAR 0 6
32979: PPUSH
32980: LD_VAR 0 7
32984: PPUSH
32985: LD_VAR 0 8
32989: PPUSH
32990: LD_VAR 0 9
32994: PPUSH
32995: LD_VAR 0 4
32999: PPUSH
33000: LD_VAR 0 5
33004: PPUSH
33005: CALL 33047 0 6
33009: GO 33042
33011: LD_INT 304
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33041
33019: POP
// hHackTeleport ( unit , x , y ) ; end ;
33020: LD_VAR 0 2
33024: PPUSH
33025: LD_VAR 0 4
33029: PPUSH
33030: LD_VAR 0 5
33034: PPUSH
33035: CALL 34814 0 3
33039: GO 33042
33041: POP
// end ;
33042: LD_VAR 0 12
33046: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33047: LD_INT 0
33049: PPUSH
33050: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33051: LD_VAR 0 1
33055: PUSH
33056: LD_INT 1
33058: LESS
33059: PUSH
33060: LD_VAR 0 1
33064: PUSH
33065: LD_INT 3
33067: GREATER
33068: OR
33069: PUSH
33070: LD_VAR 0 5
33074: PPUSH
33075: LD_VAR 0 6
33079: PPUSH
33080: CALL_OW 428
33084: OR
33085: IFFALSE 33089
// exit ;
33087: GO 33817
// uc_side := your_side ;
33089: LD_ADDR_OWVAR 20
33093: PUSH
33094: LD_OWVAR 2
33098: ST_TO_ADDR
// uc_nation := nation ;
33099: LD_ADDR_OWVAR 21
33103: PUSH
33104: LD_VAR 0 1
33108: ST_TO_ADDR
// bc_level = 1 ;
33109: LD_ADDR_OWVAR 43
33113: PUSH
33114: LD_INT 1
33116: ST_TO_ADDR
// case btype of 1 :
33117: LD_VAR 0 2
33121: PUSH
33122: LD_INT 1
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33130
33128: GO 33141
33130: POP
// bc_type := b_depot ; 2 :
33131: LD_ADDR_OWVAR 42
33135: PUSH
33136: LD_INT 0
33138: ST_TO_ADDR
33139: GO 33761
33141: LD_INT 2
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33149
33147: GO 33160
33149: POP
// bc_type := b_warehouse ; 3 :
33150: LD_ADDR_OWVAR 42
33154: PUSH
33155: LD_INT 1
33157: ST_TO_ADDR
33158: GO 33761
33160: LD_INT 3
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33179
33168: POP
// bc_type := b_lab ; 4 .. 9 :
33169: LD_ADDR_OWVAR 42
33173: PUSH
33174: LD_INT 6
33176: ST_TO_ADDR
33177: GO 33761
33179: LD_INT 4
33181: DOUBLE
33182: GREATEREQUAL
33183: IFFALSE 33191
33185: LD_INT 9
33187: DOUBLE
33188: LESSEQUAL
33189: IFTRUE 33193
33191: GO 33253
33193: POP
// begin bc_type := b_lab_half ;
33194: LD_ADDR_OWVAR 42
33198: PUSH
33199: LD_INT 7
33201: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33202: LD_ADDR_OWVAR 44
33206: PUSH
33207: LD_INT 10
33209: PUSH
33210: LD_INT 11
33212: PUSH
33213: LD_INT 12
33215: PUSH
33216: LD_INT 15
33218: PUSH
33219: LD_INT 14
33221: PUSH
33222: LD_INT 13
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: PUSH
33233: LD_VAR 0 2
33237: PUSH
33238: LD_INT 3
33240: MINUS
33241: ARRAY
33242: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33243: LD_ADDR_OWVAR 45
33247: PUSH
33248: LD_INT 9
33250: ST_TO_ADDR
// end ; 10 .. 13 :
33251: GO 33761
33253: LD_INT 10
33255: DOUBLE
33256: GREATEREQUAL
33257: IFFALSE 33265
33259: LD_INT 13
33261: DOUBLE
33262: LESSEQUAL
33263: IFTRUE 33267
33265: GO 33344
33267: POP
// begin bc_type := b_lab_full ;
33268: LD_ADDR_OWVAR 42
33272: PUSH
33273: LD_INT 8
33275: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33276: LD_ADDR_OWVAR 44
33280: PUSH
33281: LD_INT 10
33283: PUSH
33284: LD_INT 12
33286: PUSH
33287: LD_INT 14
33289: PUSH
33290: LD_INT 13
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: PUSH
33299: LD_VAR 0 2
33303: PUSH
33304: LD_INT 9
33306: MINUS
33307: ARRAY
33308: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33309: LD_ADDR_OWVAR 45
33313: PUSH
33314: LD_INT 11
33316: PUSH
33317: LD_INT 15
33319: PUSH
33320: LD_INT 12
33322: PUSH
33323: LD_INT 15
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: PUSH
33332: LD_VAR 0 2
33336: PUSH
33337: LD_INT 9
33339: MINUS
33340: ARRAY
33341: ST_TO_ADDR
// end ; 14 :
33342: GO 33761
33344: LD_INT 14
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33363
33352: POP
// bc_type := b_workshop ; 15 :
33353: LD_ADDR_OWVAR 42
33357: PUSH
33358: LD_INT 2
33360: ST_TO_ADDR
33361: GO 33761
33363: LD_INT 15
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33371
33369: GO 33382
33371: POP
// bc_type := b_factory ; 16 :
33372: LD_ADDR_OWVAR 42
33376: PUSH
33377: LD_INT 3
33379: ST_TO_ADDR
33380: GO 33761
33382: LD_INT 16
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33401
33390: POP
// bc_type := b_ext_gun ; 17 :
33391: LD_ADDR_OWVAR 42
33395: PUSH
33396: LD_INT 17
33398: ST_TO_ADDR
33399: GO 33761
33401: LD_INT 17
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33437
33409: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33410: LD_ADDR_OWVAR 42
33414: PUSH
33415: LD_INT 19
33417: PUSH
33418: LD_INT 23
33420: PUSH
33421: LD_INT 19
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: PUSH
33429: LD_VAR 0 1
33433: ARRAY
33434: ST_TO_ADDR
33435: GO 33761
33437: LD_INT 18
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33456
33445: POP
// bc_type := b_ext_radar ; 19 :
33446: LD_ADDR_OWVAR 42
33450: PUSH
33451: LD_INT 20
33453: ST_TO_ADDR
33454: GO 33761
33456: LD_INT 19
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33475
33464: POP
// bc_type := b_ext_radio ; 20 :
33465: LD_ADDR_OWVAR 42
33469: PUSH
33470: LD_INT 22
33472: ST_TO_ADDR
33473: GO 33761
33475: LD_INT 20
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33483
33481: GO 33494
33483: POP
// bc_type := b_ext_siberium ; 21 :
33484: LD_ADDR_OWVAR 42
33488: PUSH
33489: LD_INT 21
33491: ST_TO_ADDR
33492: GO 33761
33494: LD_INT 21
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33513
33502: POP
// bc_type := b_ext_computer ; 22 :
33503: LD_ADDR_OWVAR 42
33507: PUSH
33508: LD_INT 24
33510: ST_TO_ADDR
33511: GO 33761
33513: LD_INT 22
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33532
33521: POP
// bc_type := b_ext_track ; 23 :
33522: LD_ADDR_OWVAR 42
33526: PUSH
33527: LD_INT 16
33529: ST_TO_ADDR
33530: GO 33761
33532: LD_INT 23
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33540
33538: GO 33551
33540: POP
// bc_type := b_ext_laser ; 24 :
33541: LD_ADDR_OWVAR 42
33545: PUSH
33546: LD_INT 25
33548: ST_TO_ADDR
33549: GO 33761
33551: LD_INT 24
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 33570
33559: POP
// bc_type := b_control_tower ; 25 :
33560: LD_ADDR_OWVAR 42
33564: PUSH
33565: LD_INT 36
33567: ST_TO_ADDR
33568: GO 33761
33570: LD_INT 25
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33589
33578: POP
// bc_type := b_breastwork ; 26 :
33579: LD_ADDR_OWVAR 42
33583: PUSH
33584: LD_INT 31
33586: ST_TO_ADDR
33587: GO 33761
33589: LD_INT 26
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 33608
33597: POP
// bc_type := b_bunker ; 27 :
33598: LD_ADDR_OWVAR 42
33602: PUSH
33603: LD_INT 32
33605: ST_TO_ADDR
33606: GO 33761
33608: LD_INT 27
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33627
33616: POP
// bc_type := b_turret ; 28 :
33617: LD_ADDR_OWVAR 42
33621: PUSH
33622: LD_INT 33
33624: ST_TO_ADDR
33625: GO 33761
33627: LD_INT 28
33629: DOUBLE
33630: EQUAL
33631: IFTRUE 33635
33633: GO 33646
33635: POP
// bc_type := b_armoury ; 29 :
33636: LD_ADDR_OWVAR 42
33640: PUSH
33641: LD_INT 4
33643: ST_TO_ADDR
33644: GO 33761
33646: LD_INT 29
33648: DOUBLE
33649: EQUAL
33650: IFTRUE 33654
33652: GO 33665
33654: POP
// bc_type := b_barracks ; 30 :
33655: LD_ADDR_OWVAR 42
33659: PUSH
33660: LD_INT 5
33662: ST_TO_ADDR
33663: GO 33761
33665: LD_INT 30
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33673
33671: GO 33684
33673: POP
// bc_type := b_solar_power ; 31 :
33674: LD_ADDR_OWVAR 42
33678: PUSH
33679: LD_INT 27
33681: ST_TO_ADDR
33682: GO 33761
33684: LD_INT 31
33686: DOUBLE
33687: EQUAL
33688: IFTRUE 33692
33690: GO 33703
33692: POP
// bc_type := b_oil_power ; 32 :
33693: LD_ADDR_OWVAR 42
33697: PUSH
33698: LD_INT 26
33700: ST_TO_ADDR
33701: GO 33761
33703: LD_INT 32
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33722
33711: POP
// bc_type := b_siberite_power ; 33 :
33712: LD_ADDR_OWVAR 42
33716: PUSH
33717: LD_INT 28
33719: ST_TO_ADDR
33720: GO 33761
33722: LD_INT 33
33724: DOUBLE
33725: EQUAL
33726: IFTRUE 33730
33728: GO 33741
33730: POP
// bc_type := b_oil_mine ; 34 :
33731: LD_ADDR_OWVAR 42
33735: PUSH
33736: LD_INT 29
33738: ST_TO_ADDR
33739: GO 33761
33741: LD_INT 34
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33749
33747: GO 33760
33749: POP
// bc_type := b_siberite_mine ; end ;
33750: LD_ADDR_OWVAR 42
33754: PUSH
33755: LD_INT 30
33757: ST_TO_ADDR
33758: GO 33761
33760: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33761: LD_ADDR_VAR 0 8
33765: PUSH
33766: LD_VAR 0 5
33770: PPUSH
33771: LD_VAR 0 6
33775: PPUSH
33776: LD_VAR 0 3
33780: PPUSH
33781: CALL_OW 47
33785: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33786: LD_OWVAR 42
33790: PUSH
33791: LD_INT 32
33793: PUSH
33794: LD_INT 33
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: IN
33801: IFFALSE 33817
// PlaceWeaponTurret ( b , weapon ) ;
33803: LD_VAR 0 8
33807: PPUSH
33808: LD_VAR 0 4
33812: PPUSH
33813: CALL_OW 431
// end ;
33817: LD_VAR 0 7
33821: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33822: LD_INT 0
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33828: LD_ADDR_VAR 0 4
33832: PUSH
33833: LD_INT 22
33835: PUSH
33836: LD_OWVAR 2
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 30
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 30
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PPUSH
33877: CALL_OW 69
33881: ST_TO_ADDR
// if not tmp then
33882: LD_VAR 0 4
33886: NOT
33887: IFFALSE 33891
// exit ;
33889: GO 33950
// for i in tmp do
33891: LD_ADDR_VAR 0 2
33895: PUSH
33896: LD_VAR 0 4
33900: PUSH
33901: FOR_IN
33902: IFFALSE 33948
// for j = 1 to 3 do
33904: LD_ADDR_VAR 0 3
33908: PUSH
33909: DOUBLE
33910: LD_INT 1
33912: DEC
33913: ST_TO_ADDR
33914: LD_INT 3
33916: PUSH
33917: FOR_TO
33918: IFFALSE 33944
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33920: LD_VAR 0 2
33924: PPUSH
33925: CALL_OW 274
33929: PPUSH
33930: LD_VAR 0 3
33934: PPUSH
33935: LD_INT 99999
33937: PPUSH
33938: CALL_OW 277
33942: GO 33917
33944: POP
33945: POP
33946: GO 33901
33948: POP
33949: POP
// end ;
33950: LD_VAR 0 1
33954: RET
// export function hHackSetLevel10 ; var i , j ; begin
33955: LD_INT 0
33957: PPUSH
33958: PPUSH
33959: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33960: LD_ADDR_VAR 0 2
33964: PUSH
33965: LD_INT 21
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PPUSH
33975: CALL_OW 69
33979: PUSH
33980: FOR_IN
33981: IFFALSE 34033
// if IsSelected ( i ) then
33983: LD_VAR 0 2
33987: PPUSH
33988: CALL_OW 306
33992: IFFALSE 34031
// begin for j := 1 to 4 do
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: DOUBLE
34000: LD_INT 1
34002: DEC
34003: ST_TO_ADDR
34004: LD_INT 4
34006: PUSH
34007: FOR_TO
34008: IFFALSE 34029
// SetSkill ( i , j , 10 ) ;
34010: LD_VAR 0 2
34014: PPUSH
34015: LD_VAR 0 3
34019: PPUSH
34020: LD_INT 10
34022: PPUSH
34023: CALL_OW 237
34027: GO 34007
34029: POP
34030: POP
// end ;
34031: GO 33980
34033: POP
34034: POP
// end ;
34035: LD_VAR 0 1
34039: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34040: LD_INT 0
34042: PPUSH
34043: PPUSH
34044: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34045: LD_ADDR_VAR 0 2
34049: PUSH
34050: LD_INT 22
34052: PUSH
34053: LD_OWVAR 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 21
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PPUSH
34076: CALL_OW 69
34080: PUSH
34081: FOR_IN
34082: IFFALSE 34123
// begin for j := 1 to 4 do
34084: LD_ADDR_VAR 0 3
34088: PUSH
34089: DOUBLE
34090: LD_INT 1
34092: DEC
34093: ST_TO_ADDR
34094: LD_INT 4
34096: PUSH
34097: FOR_TO
34098: IFFALSE 34119
// SetSkill ( i , j , 10 ) ;
34100: LD_VAR 0 2
34104: PPUSH
34105: LD_VAR 0 3
34109: PPUSH
34110: LD_INT 10
34112: PPUSH
34113: CALL_OW 237
34117: GO 34097
34119: POP
34120: POP
// end ;
34121: GO 34081
34123: POP
34124: POP
// end ;
34125: LD_VAR 0 1
34129: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34130: LD_INT 0
34132: PPUSH
// uc_side := your_side ;
34133: LD_ADDR_OWVAR 20
34137: PUSH
34138: LD_OWVAR 2
34142: ST_TO_ADDR
// uc_nation := nation ;
34143: LD_ADDR_OWVAR 21
34147: PUSH
34148: LD_VAR 0 1
34152: ST_TO_ADDR
// InitHc ;
34153: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34157: LD_INT 0
34159: PPUSH
34160: LD_VAR 0 2
34164: PPUSH
34165: LD_VAR 0 3
34169: PPUSH
34170: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34174: LD_VAR 0 4
34178: PPUSH
34179: LD_VAR 0 5
34183: PPUSH
34184: CALL_OW 428
34188: PUSH
34189: LD_INT 0
34191: EQUAL
34192: IFFALSE 34216
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34194: CALL_OW 44
34198: PPUSH
34199: LD_VAR 0 4
34203: PPUSH
34204: LD_VAR 0 5
34208: PPUSH
34209: LD_INT 1
34211: PPUSH
34212: CALL_OW 48
// end ;
34216: LD_VAR 0 6
34220: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34221: LD_INT 0
34223: PPUSH
34224: PPUSH
// uc_side := your_side ;
34225: LD_ADDR_OWVAR 20
34229: PUSH
34230: LD_OWVAR 2
34234: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34235: LD_VAR 0 1
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: LD_INT 4
34251: PUSH
34252: LD_INT 5
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: IN
34262: IFFALSE 34274
// uc_nation := nation_american else
34264: LD_ADDR_OWVAR 21
34268: PUSH
34269: LD_INT 1
34271: ST_TO_ADDR
34272: GO 34317
// if chassis in [ 11 , 12 , 13 , 14 ] then
34274: LD_VAR 0 1
34278: PUSH
34279: LD_INT 11
34281: PUSH
34282: LD_INT 12
34284: PUSH
34285: LD_INT 13
34287: PUSH
34288: LD_INT 14
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: IN
34297: IFFALSE 34309
// uc_nation := nation_arabian else
34299: LD_ADDR_OWVAR 21
34303: PUSH
34304: LD_INT 2
34306: ST_TO_ADDR
34307: GO 34317
// uc_nation := nation_russian ;
34309: LD_ADDR_OWVAR 21
34313: PUSH
34314: LD_INT 3
34316: ST_TO_ADDR
// vc_chassis := chassis ;
34317: LD_ADDR_OWVAR 37
34321: PUSH
34322: LD_VAR 0 1
34326: ST_TO_ADDR
// vc_engine := engine ;
34327: LD_ADDR_OWVAR 39
34331: PUSH
34332: LD_VAR 0 2
34336: ST_TO_ADDR
// vc_control := control ;
34337: LD_ADDR_OWVAR 38
34341: PUSH
34342: LD_VAR 0 3
34346: ST_TO_ADDR
// vc_weapon := weapon ;
34347: LD_ADDR_OWVAR 40
34351: PUSH
34352: LD_VAR 0 4
34356: ST_TO_ADDR
// un := CreateVehicle ;
34357: LD_ADDR_VAR 0 8
34361: PUSH
34362: CALL_OW 45
34366: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34367: LD_VAR 0 8
34371: PPUSH
34372: LD_INT 0
34374: PPUSH
34375: LD_INT 5
34377: PPUSH
34378: CALL_OW 12
34382: PPUSH
34383: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34387: LD_VAR 0 8
34391: PPUSH
34392: LD_VAR 0 5
34396: PPUSH
34397: LD_VAR 0 6
34401: PPUSH
34402: LD_INT 1
34404: PPUSH
34405: CALL_OW 48
// end ;
34409: LD_VAR 0 7
34413: RET
// export hInvincible ; every 1 do
34414: GO 34416
34416: DISABLE
// hInvincible := [ ] ;
34417: LD_ADDR_EXP 95
34421: PUSH
34422: EMPTY
34423: ST_TO_ADDR
34424: END
// every 10 do var i ;
34425: GO 34427
34427: DISABLE
34428: LD_INT 0
34430: PPUSH
// begin enable ;
34431: ENABLE
// if not hInvincible then
34432: LD_EXP 95
34436: NOT
34437: IFFALSE 34441
// exit ;
34439: GO 34485
// for i in hInvincible do
34441: LD_ADDR_VAR 0 1
34445: PUSH
34446: LD_EXP 95
34450: PUSH
34451: FOR_IN
34452: IFFALSE 34483
// if GetLives ( i ) < 1000 then
34454: LD_VAR 0 1
34458: PPUSH
34459: CALL_OW 256
34463: PUSH
34464: LD_INT 1000
34466: LESS
34467: IFFALSE 34481
// SetLives ( i , 1000 ) ;
34469: LD_VAR 0 1
34473: PPUSH
34474: LD_INT 1000
34476: PPUSH
34477: CALL_OW 234
34481: GO 34451
34483: POP
34484: POP
// end ;
34485: PPOPN 1
34487: END
// export function hHackInvincible ; var i ; begin
34488: LD_INT 0
34490: PPUSH
34491: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34492: LD_ADDR_VAR 0 2
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 21
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 21
34512: PUSH
34513: LD_INT 2
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: PPUSH
34525: CALL_OW 69
34529: PUSH
34530: FOR_IN
34531: IFFALSE 34592
// if IsSelected ( i ) then
34533: LD_VAR 0 2
34537: PPUSH
34538: CALL_OW 306
34542: IFFALSE 34590
// begin if i in hInvincible then
34544: LD_VAR 0 2
34548: PUSH
34549: LD_EXP 95
34553: IN
34554: IFFALSE 34574
// hInvincible := hInvincible diff i else
34556: LD_ADDR_EXP 95
34560: PUSH
34561: LD_EXP 95
34565: PUSH
34566: LD_VAR 0 2
34570: DIFF
34571: ST_TO_ADDR
34572: GO 34590
// hInvincible := hInvincible union i ;
34574: LD_ADDR_EXP 95
34578: PUSH
34579: LD_EXP 95
34583: PUSH
34584: LD_VAR 0 2
34588: UNION
34589: ST_TO_ADDR
// end ;
34590: GO 34530
34592: POP
34593: POP
// end ;
34594: LD_VAR 0 1
34598: RET
// export function hHackInvisible ; var i , j ; begin
34599: LD_INT 0
34601: PPUSH
34602: PPUSH
34603: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34604: LD_ADDR_VAR 0 2
34608: PUSH
34609: LD_INT 21
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PPUSH
34619: CALL_OW 69
34623: PUSH
34624: FOR_IN
34625: IFFALSE 34649
// if IsSelected ( i ) then
34627: LD_VAR 0 2
34631: PPUSH
34632: CALL_OW 306
34636: IFFALSE 34647
// ComForceInvisible ( i ) ;
34638: LD_VAR 0 2
34642: PPUSH
34643: CALL_OW 496
34647: GO 34624
34649: POP
34650: POP
// end ;
34651: LD_VAR 0 1
34655: RET
// export function hHackChangeYourSide ; begin
34656: LD_INT 0
34658: PPUSH
// if your_side = 8 then
34659: LD_OWVAR 2
34663: PUSH
34664: LD_INT 8
34666: EQUAL
34667: IFFALSE 34679
// your_side := 0 else
34669: LD_ADDR_OWVAR 2
34673: PUSH
34674: LD_INT 0
34676: ST_TO_ADDR
34677: GO 34693
// your_side := your_side + 1 ;
34679: LD_ADDR_OWVAR 2
34683: PUSH
34684: LD_OWVAR 2
34688: PUSH
34689: LD_INT 1
34691: PLUS
34692: ST_TO_ADDR
// end ;
34693: LD_VAR 0 1
34697: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34698: LD_INT 0
34700: PPUSH
34701: PPUSH
34702: PPUSH
// for i in all_units do
34703: LD_ADDR_VAR 0 2
34707: PUSH
34708: LD_OWVAR 3
34712: PUSH
34713: FOR_IN
34714: IFFALSE 34792
// if IsSelected ( i ) then
34716: LD_VAR 0 2
34720: PPUSH
34721: CALL_OW 306
34725: IFFALSE 34790
// begin j := GetSide ( i ) ;
34727: LD_ADDR_VAR 0 3
34731: PUSH
34732: LD_VAR 0 2
34736: PPUSH
34737: CALL_OW 255
34741: ST_TO_ADDR
// if j = 8 then
34742: LD_VAR 0 3
34746: PUSH
34747: LD_INT 8
34749: EQUAL
34750: IFFALSE 34762
// j := 0 else
34752: LD_ADDR_VAR 0 3
34756: PUSH
34757: LD_INT 0
34759: ST_TO_ADDR
34760: GO 34776
// j := j + 1 ;
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_VAR 0 3
34771: PUSH
34772: LD_INT 1
34774: PLUS
34775: ST_TO_ADDR
// SetSide ( i , j ) ;
34776: LD_VAR 0 2
34780: PPUSH
34781: LD_VAR 0 3
34785: PPUSH
34786: CALL_OW 235
// end ;
34790: GO 34713
34792: POP
34793: POP
// end ;
34794: LD_VAR 0 1
34798: RET
// export function hHackFog ; begin
34799: LD_INT 0
34801: PPUSH
// FogOff ( true ) ;
34802: LD_INT 1
34804: PPUSH
34805: CALL_OW 344
// end ;
34809: LD_VAR 0 1
34813: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34814: LD_INT 0
34816: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34817: LD_VAR 0 1
34821: PPUSH
34822: LD_VAR 0 2
34826: PPUSH
34827: LD_VAR 0 3
34831: PPUSH
34832: LD_INT 1
34834: PPUSH
34835: LD_INT 1
34837: PPUSH
34838: CALL_OW 483
// CenterOnXY ( x , y ) ;
34842: LD_VAR 0 2
34846: PPUSH
34847: LD_VAR 0 3
34851: PPUSH
34852: CALL_OW 84
// end ;
34856: LD_VAR 0 4
34860: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34861: LD_INT 0
34863: PPUSH
34864: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34865: LD_VAR 0 1
34869: NOT
34870: PUSH
34871: LD_VAR 0 2
34875: PPUSH
34876: LD_VAR 0 3
34880: PPUSH
34881: CALL_OW 488
34885: NOT
34886: OR
34887: PUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL_OW 266
34897: PUSH
34898: LD_INT 3
34900: NONEQUAL
34901: PUSH
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 247
34911: PUSH
34912: LD_INT 1
34914: EQUAL
34915: NOT
34916: AND
34917: OR
34918: IFFALSE 34922
// exit ;
34920: GO 35071
// if GetType ( factory ) = unit_human then
34922: LD_VAR 0 1
34926: PPUSH
34927: CALL_OW 247
34931: PUSH
34932: LD_INT 1
34934: EQUAL
34935: IFFALSE 34952
// factory := IsInUnit ( factory ) ;
34937: LD_ADDR_VAR 0 1
34941: PUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 310
34951: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34952: LD_VAR 0 1
34956: PPUSH
34957: CALL_OW 266
34961: PUSH
34962: LD_INT 3
34964: NONEQUAL
34965: IFFALSE 34969
// exit ;
34967: GO 35071
// if HexInfo ( x , y ) = factory then
34969: LD_VAR 0 2
34973: PPUSH
34974: LD_VAR 0 3
34978: PPUSH
34979: CALL_OW 428
34983: PUSH
34984: LD_VAR 0 1
34988: EQUAL
34989: IFFALSE 35016
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34991: LD_ADDR_EXP 96
34995: PUSH
34996: LD_EXP 96
35000: PPUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: LD_INT 0
35008: PPUSH
35009: CALL_OW 1
35013: ST_TO_ADDR
35014: GO 35067
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35016: LD_ADDR_EXP 96
35020: PUSH
35021: LD_EXP 96
35025: PPUSH
35026: LD_VAR 0 1
35030: PPUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 255
35040: PUSH
35041: LD_VAR 0 1
35045: PUSH
35046: LD_VAR 0 2
35050: PUSH
35051: LD_VAR 0 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: PPUSH
35062: CALL_OW 1
35066: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35067: CALL 35076 0 0
// end ;
35071: LD_VAR 0 4
35075: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35076: LD_INT 0
35078: PPUSH
35079: PPUSH
35080: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35081: LD_STRING resetFactoryWaypoint();
35083: PPUSH
35084: CALL_OW 559
// if factoryWaypoints then
35088: LD_EXP 96
35092: IFFALSE 35218
// begin list := PrepareArray ( factoryWaypoints ) ;
35094: LD_ADDR_VAR 0 3
35098: PUSH
35099: LD_EXP 96
35103: PPUSH
35104: CALL 82515 0 1
35108: ST_TO_ADDR
// for i := 1 to list do
35109: LD_ADDR_VAR 0 2
35113: PUSH
35114: DOUBLE
35115: LD_INT 1
35117: DEC
35118: ST_TO_ADDR
35119: LD_VAR 0 3
35123: PUSH
35124: FOR_TO
35125: IFFALSE 35216
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35127: LD_STRING setFactoryWaypointXY(
35129: PUSH
35130: LD_VAR 0 3
35134: PUSH
35135: LD_VAR 0 2
35139: ARRAY
35140: PUSH
35141: LD_INT 1
35143: ARRAY
35144: STR
35145: PUSH
35146: LD_STRING ,
35148: STR
35149: PUSH
35150: LD_VAR 0 3
35154: PUSH
35155: LD_VAR 0 2
35159: ARRAY
35160: PUSH
35161: LD_INT 2
35163: ARRAY
35164: STR
35165: PUSH
35166: LD_STRING ,
35168: STR
35169: PUSH
35170: LD_VAR 0 3
35174: PUSH
35175: LD_VAR 0 2
35179: ARRAY
35180: PUSH
35181: LD_INT 3
35183: ARRAY
35184: STR
35185: PUSH
35186: LD_STRING ,
35188: STR
35189: PUSH
35190: LD_VAR 0 3
35194: PUSH
35195: LD_VAR 0 2
35199: ARRAY
35200: PUSH
35201: LD_INT 4
35203: ARRAY
35204: STR
35205: PUSH
35206: LD_STRING )
35208: STR
35209: PPUSH
35210: CALL_OW 559
35214: GO 35124
35216: POP
35217: POP
// end ; end ;
35218: LD_VAR 0 1
35222: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35223: LD_INT 0
35225: PPUSH
// if HexInfo ( x , y ) = warehouse then
35226: LD_VAR 0 2
35230: PPUSH
35231: LD_VAR 0 3
35235: PPUSH
35236: CALL_OW 428
35240: PUSH
35241: LD_VAR 0 1
35245: EQUAL
35246: IFFALSE 35273
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35248: LD_ADDR_EXP 97
35252: PUSH
35253: LD_EXP 97
35257: PPUSH
35258: LD_VAR 0 1
35262: PPUSH
35263: LD_INT 0
35265: PPUSH
35266: CALL_OW 1
35270: ST_TO_ADDR
35271: GO 35324
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35273: LD_ADDR_EXP 97
35277: PUSH
35278: LD_EXP 97
35282: PPUSH
35283: LD_VAR 0 1
35287: PPUSH
35288: LD_VAR 0 1
35292: PPUSH
35293: CALL_OW 255
35297: PUSH
35298: LD_VAR 0 1
35302: PUSH
35303: LD_VAR 0 2
35307: PUSH
35308: LD_VAR 0 3
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: PPUSH
35319: CALL_OW 1
35323: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35324: CALL 35333 0 0
// end ;
35328: LD_VAR 0 4
35332: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35333: LD_INT 0
35335: PPUSH
35336: PPUSH
35337: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35338: LD_STRING resetWarehouseGatheringPoints();
35340: PPUSH
35341: CALL_OW 559
// if warehouseGatheringPoints then
35345: LD_EXP 97
35349: IFFALSE 35475
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35351: LD_ADDR_VAR 0 3
35355: PUSH
35356: LD_EXP 97
35360: PPUSH
35361: CALL 82515 0 1
35365: ST_TO_ADDR
// for i := 1 to list do
35366: LD_ADDR_VAR 0 2
35370: PUSH
35371: DOUBLE
35372: LD_INT 1
35374: DEC
35375: ST_TO_ADDR
35376: LD_VAR 0 3
35380: PUSH
35381: FOR_TO
35382: IFFALSE 35473
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35384: LD_STRING setWarehouseGatheringPointXY(
35386: PUSH
35387: LD_VAR 0 3
35391: PUSH
35392: LD_VAR 0 2
35396: ARRAY
35397: PUSH
35398: LD_INT 1
35400: ARRAY
35401: STR
35402: PUSH
35403: LD_STRING ,
35405: STR
35406: PUSH
35407: LD_VAR 0 3
35411: PUSH
35412: LD_VAR 0 2
35416: ARRAY
35417: PUSH
35418: LD_INT 2
35420: ARRAY
35421: STR
35422: PUSH
35423: LD_STRING ,
35425: STR
35426: PUSH
35427: LD_VAR 0 3
35431: PUSH
35432: LD_VAR 0 2
35436: ARRAY
35437: PUSH
35438: LD_INT 3
35440: ARRAY
35441: STR
35442: PUSH
35443: LD_STRING ,
35445: STR
35446: PUSH
35447: LD_VAR 0 3
35451: PUSH
35452: LD_VAR 0 2
35456: ARRAY
35457: PUSH
35458: LD_INT 4
35460: ARRAY
35461: STR
35462: PUSH
35463: LD_STRING )
35465: STR
35466: PPUSH
35467: CALL_OW 559
35471: GO 35381
35473: POP
35474: POP
// end ; end ;
35475: LD_VAR 0 1
35479: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35480: LD_EXP 97
35484: IFFALSE 36169
35486: GO 35488
35488: DISABLE
35489: LD_INT 0
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
// begin enable ;
35500: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35501: LD_ADDR_VAR 0 3
35505: PUSH
35506: LD_EXP 97
35510: PPUSH
35511: CALL 82515 0 1
35515: ST_TO_ADDR
// if not list then
35516: LD_VAR 0 3
35520: NOT
35521: IFFALSE 35525
// exit ;
35523: GO 36169
// for i := 1 to list do
35525: LD_ADDR_VAR 0 1
35529: PUSH
35530: DOUBLE
35531: LD_INT 1
35533: DEC
35534: ST_TO_ADDR
35535: LD_VAR 0 3
35539: PUSH
35540: FOR_TO
35541: IFFALSE 36167
// begin depot := list [ i ] [ 2 ] ;
35543: LD_ADDR_VAR 0 8
35547: PUSH
35548: LD_VAR 0 3
35552: PUSH
35553: LD_VAR 0 1
35557: ARRAY
35558: PUSH
35559: LD_INT 2
35561: ARRAY
35562: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35563: LD_ADDR_VAR 0 5
35567: PUSH
35568: LD_VAR 0 3
35572: PUSH
35573: LD_VAR 0 1
35577: ARRAY
35578: PUSH
35579: LD_INT 1
35581: ARRAY
35582: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35583: LD_VAR 0 8
35587: PPUSH
35588: CALL_OW 301
35592: PUSH
35593: LD_VAR 0 5
35597: PUSH
35598: LD_VAR 0 8
35602: PPUSH
35603: CALL_OW 255
35607: NONEQUAL
35608: OR
35609: IFFALSE 35638
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35611: LD_ADDR_EXP 97
35615: PUSH
35616: LD_EXP 97
35620: PPUSH
35621: LD_VAR 0 8
35625: PPUSH
35626: LD_INT 0
35628: PPUSH
35629: CALL_OW 1
35633: ST_TO_ADDR
// exit ;
35634: POP
35635: POP
35636: GO 36169
// end ; x := list [ i ] [ 3 ] ;
35638: LD_ADDR_VAR 0 6
35642: PUSH
35643: LD_VAR 0 3
35647: PUSH
35648: LD_VAR 0 1
35652: ARRAY
35653: PUSH
35654: LD_INT 3
35656: ARRAY
35657: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35658: LD_ADDR_VAR 0 7
35662: PUSH
35663: LD_VAR 0 3
35667: PUSH
35668: LD_VAR 0 1
35672: ARRAY
35673: PUSH
35674: LD_INT 4
35676: ARRAY
35677: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35678: LD_ADDR_VAR 0 9
35682: PUSH
35683: LD_VAR 0 6
35687: PPUSH
35688: LD_VAR 0 7
35692: PPUSH
35693: LD_INT 16
35695: PPUSH
35696: CALL 81103 0 3
35700: ST_TO_ADDR
// if not cratesNearbyPoint then
35701: LD_VAR 0 9
35705: NOT
35706: IFFALSE 35712
// exit ;
35708: POP
35709: POP
35710: GO 36169
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35712: LD_ADDR_VAR 0 4
35716: PUSH
35717: LD_INT 22
35719: PUSH
35720: LD_VAR 0 5
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 3
35731: PUSH
35732: LD_INT 60
35734: PUSH
35735: EMPTY
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 91
35744: PUSH
35745: LD_VAR 0 8
35749: PUSH
35750: LD_INT 6
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: LD_INT 25
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 25
35773: PUSH
35774: LD_INT 16
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: PPUSH
35792: CALL_OW 69
35796: PUSH
35797: LD_VAR 0 8
35801: PPUSH
35802: CALL_OW 313
35806: PPUSH
35807: LD_INT 3
35809: PUSH
35810: LD_INT 60
35812: PUSH
35813: EMPTY
35814: LIST
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 25
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 25
35835: PUSH
35836: LD_INT 16
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PPUSH
35852: CALL_OW 72
35856: UNION
35857: ST_TO_ADDR
// if tmp then
35858: LD_VAR 0 4
35862: IFFALSE 35942
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35864: LD_ADDR_VAR 0 4
35868: PUSH
35869: LD_VAR 0 4
35873: PPUSH
35874: LD_INT 3
35876: PPUSH
35877: CALL 79072 0 2
35881: ST_TO_ADDR
// for j in tmp do
35882: LD_ADDR_VAR 0 2
35886: PUSH
35887: LD_VAR 0 4
35891: PUSH
35892: FOR_IN
35893: IFFALSE 35936
// begin if IsInUnit ( j ) then
35895: LD_VAR 0 2
35899: PPUSH
35900: CALL_OW 310
35904: IFFALSE 35915
// ComExit ( j ) ;
35906: LD_VAR 0 2
35910: PPUSH
35911: CALL 79155 0 1
// AddComCollect ( j , x , y ) ;
35915: LD_VAR 0 2
35919: PPUSH
35920: LD_VAR 0 6
35924: PPUSH
35925: LD_VAR 0 7
35929: PPUSH
35930: CALL_OW 177
// end ;
35934: GO 35892
35936: POP
35937: POP
// exit ;
35938: POP
35939: POP
35940: GO 36169
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35942: LD_ADDR_VAR 0 4
35946: PUSH
35947: LD_INT 22
35949: PUSH
35950: LD_VAR 0 5
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 91
35961: PUSH
35962: LD_VAR 0 8
35966: PUSH
35967: LD_INT 8
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 34
35980: PUSH
35981: LD_INT 12
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 34
35990: PUSH
35991: LD_INT 51
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 34
36000: PUSH
36001: LD_INT 32
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 34
36010: PUSH
36011: LD_INT 89
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: PPUSH
36030: CALL_OW 69
36034: ST_TO_ADDR
// if tmp then
36035: LD_VAR 0 4
36039: IFFALSE 36165
// begin for j in tmp do
36041: LD_ADDR_VAR 0 2
36045: PUSH
36046: LD_VAR 0 4
36050: PUSH
36051: FOR_IN
36052: IFFALSE 36163
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36054: LD_VAR 0 2
36058: PPUSH
36059: CALL_OW 262
36063: PUSH
36064: LD_INT 3
36066: EQUAL
36067: PUSH
36068: LD_VAR 0 2
36072: PPUSH
36073: CALL_OW 261
36077: PUSH
36078: LD_INT 20
36080: GREATER
36081: OR
36082: PUSH
36083: LD_VAR 0 2
36087: PPUSH
36088: CALL_OW 314
36092: NOT
36093: AND
36094: PUSH
36095: LD_VAR 0 2
36099: PPUSH
36100: CALL_OW 263
36104: PUSH
36105: LD_INT 1
36107: NONEQUAL
36108: PUSH
36109: LD_VAR 0 2
36113: PPUSH
36114: CALL_OW 311
36118: OR
36119: AND
36120: IFFALSE 36161
// begin ComCollect ( j , x , y ) ;
36122: LD_VAR 0 2
36126: PPUSH
36127: LD_VAR 0 6
36131: PPUSH
36132: LD_VAR 0 7
36136: PPUSH
36137: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36141: LD_VAR 0 2
36145: PPUSH
36146: LD_VAR 0 8
36150: PPUSH
36151: CALL_OW 172
// exit ;
36155: POP
36156: POP
36157: POP
36158: POP
36159: GO 36169
// end ;
36161: GO 36051
36163: POP
36164: POP
// end ; end ;
36165: GO 35540
36167: POP
36168: POP
// end ; end_of_file
36169: PPOPN 9
36171: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36172: LD_INT 0
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL_OW 264
36187: PUSH
36188: LD_INT 91
36190: EQUAL
36191: IFFALSE 36263
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36193: LD_INT 68
36195: PPUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: CALL_OW 255
36205: PPUSH
36206: CALL_OW 321
36210: PUSH
36211: LD_INT 2
36213: EQUAL
36214: IFFALSE 36226
// eff := 70 else
36216: LD_ADDR_VAR 0 4
36220: PUSH
36221: LD_INT 70
36223: ST_TO_ADDR
36224: GO 36234
// eff := 30 ;
36226: LD_ADDR_VAR 0 4
36230: PUSH
36231: LD_INT 30
36233: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 250
36243: PPUSH
36244: LD_VAR 0 1
36248: PPUSH
36249: CALL_OW 251
36253: PPUSH
36254: LD_VAR 0 4
36258: PPUSH
36259: CALL_OW 495
// end ; end ;
36263: LD_VAR 0 2
36267: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36268: LD_INT 0
36270: PPUSH
// end ;
36271: LD_VAR 0 4
36275: RET
// export function SOS_Command ( cmd ) ; begin
36276: LD_INT 0
36278: PPUSH
// end ;
36279: LD_VAR 0 2
36283: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36284: LD_INT 0
36286: PPUSH
// end ;
36287: LD_VAR 0 6
36291: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36292: LD_INT 0
36294: PPUSH
36295: PPUSH
// if not vehicle or not factory then
36296: LD_VAR 0 1
36300: NOT
36301: PUSH
36302: LD_VAR 0 2
36306: NOT
36307: OR
36308: IFFALSE 36312
// exit ;
36310: GO 36543
// if factoryWaypoints >= factory then
36312: LD_EXP 96
36316: PUSH
36317: LD_VAR 0 2
36321: GREATEREQUAL
36322: IFFALSE 36543
// if factoryWaypoints [ factory ] then
36324: LD_EXP 96
36328: PUSH
36329: LD_VAR 0 2
36333: ARRAY
36334: IFFALSE 36543
// begin if GetControl ( vehicle ) = control_manual then
36336: LD_VAR 0 1
36340: PPUSH
36341: CALL_OW 263
36345: PUSH
36346: LD_INT 1
36348: EQUAL
36349: IFFALSE 36430
// begin driver := IsDrivenBy ( vehicle ) ;
36351: LD_ADDR_VAR 0 4
36355: PUSH
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 311
36365: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36366: LD_VAR 0 4
36370: PPUSH
36371: LD_EXP 96
36375: PUSH
36376: LD_VAR 0 2
36380: ARRAY
36381: PUSH
36382: LD_INT 3
36384: ARRAY
36385: PPUSH
36386: LD_EXP 96
36390: PUSH
36391: LD_VAR 0 2
36395: ARRAY
36396: PUSH
36397: LD_INT 4
36399: ARRAY
36400: PPUSH
36401: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36405: LD_VAR 0 4
36409: PPUSH
36410: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36414: LD_VAR 0 4
36418: PPUSH
36419: LD_VAR 0 2
36423: PPUSH
36424: CALL_OW 180
// end else
36428: GO 36543
// if GetControl ( vehicle ) = control_remote then
36430: LD_VAR 0 1
36434: PPUSH
36435: CALL_OW 263
36439: PUSH
36440: LD_INT 2
36442: EQUAL
36443: IFFALSE 36504
// begin wait ( 0 0$2 ) ;
36445: LD_INT 70
36447: PPUSH
36448: CALL_OW 67
// if Connect ( vehicle ) then
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL 49374 0 1
36461: IFFALSE 36502
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36463: LD_VAR 0 1
36467: PPUSH
36468: LD_EXP 96
36472: PUSH
36473: LD_VAR 0 2
36477: ARRAY
36478: PUSH
36479: LD_INT 3
36481: ARRAY
36482: PPUSH
36483: LD_EXP 96
36487: PUSH
36488: LD_VAR 0 2
36492: ARRAY
36493: PUSH
36494: LD_INT 4
36496: ARRAY
36497: PPUSH
36498: CALL_OW 171
// end else
36502: GO 36543
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36504: LD_VAR 0 1
36508: PPUSH
36509: LD_EXP 96
36513: PUSH
36514: LD_VAR 0 2
36518: ARRAY
36519: PUSH
36520: LD_INT 3
36522: ARRAY
36523: PPUSH
36524: LD_EXP 96
36528: PUSH
36529: LD_VAR 0 2
36533: ARRAY
36534: PUSH
36535: LD_INT 4
36537: ARRAY
36538: PPUSH
36539: CALL_OW 171
// end ; end ;
36543: LD_VAR 0 3
36547: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36548: LD_INT 0
36550: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36551: LD_VAR 0 1
36555: PUSH
36556: LD_INT 250
36558: EQUAL
36559: PUSH
36560: LD_VAR 0 2
36564: PPUSH
36565: CALL_OW 264
36569: PUSH
36570: LD_INT 81
36572: EQUAL
36573: AND
36574: IFFALSE 36595
// MinerPlaceMine ( unit , x , y ) ;
36576: LD_VAR 0 2
36580: PPUSH
36581: LD_VAR 0 4
36585: PPUSH
36586: LD_VAR 0 5
36590: PPUSH
36591: CALL 39585 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36595: LD_VAR 0 1
36599: PUSH
36600: LD_INT 251
36602: EQUAL
36603: PUSH
36604: LD_VAR 0 2
36608: PPUSH
36609: CALL_OW 264
36613: PUSH
36614: LD_INT 81
36616: EQUAL
36617: AND
36618: IFFALSE 36639
// MinerDetonateMine ( unit , x , y ) ;
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 4
36629: PPUSH
36630: LD_VAR 0 5
36634: PPUSH
36635: CALL 39860 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36639: LD_VAR 0 1
36643: PUSH
36644: LD_INT 252
36646: EQUAL
36647: PUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: CALL_OW 264
36657: PUSH
36658: LD_INT 81
36660: EQUAL
36661: AND
36662: IFFALSE 36683
// MinerCreateMinefield ( unit , x , y ) ;
36664: LD_VAR 0 2
36668: PPUSH
36669: LD_VAR 0 4
36673: PPUSH
36674: LD_VAR 0 5
36678: PPUSH
36679: CALL 40277 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36683: LD_VAR 0 1
36687: PUSH
36688: LD_INT 253
36690: EQUAL
36691: PUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: CALL_OW 257
36701: PUSH
36702: LD_INT 5
36704: EQUAL
36705: AND
36706: IFFALSE 36727
// ComBinocular ( unit , x , y ) ;
36708: LD_VAR 0 2
36712: PPUSH
36713: LD_VAR 0 4
36717: PPUSH
36718: LD_VAR 0 5
36722: PPUSH
36723: CALL 40646 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36727: LD_VAR 0 1
36731: PUSH
36732: LD_INT 254
36734: EQUAL
36735: PUSH
36736: LD_VAR 0 2
36740: PPUSH
36741: CALL_OW 264
36745: PUSH
36746: LD_INT 99
36748: EQUAL
36749: AND
36750: PUSH
36751: LD_VAR 0 3
36755: PPUSH
36756: CALL_OW 263
36760: PUSH
36761: LD_INT 3
36763: EQUAL
36764: AND
36765: IFFALSE 36781
// HackDestroyVehicle ( unit , selectedUnit ) ;
36767: LD_VAR 0 2
36771: PPUSH
36772: LD_VAR 0 3
36776: PPUSH
36777: CALL 38949 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36781: LD_VAR 0 1
36785: PUSH
36786: LD_INT 255
36788: EQUAL
36789: PUSH
36790: LD_VAR 0 2
36794: PPUSH
36795: CALL_OW 264
36799: PUSH
36800: LD_INT 14
36802: PUSH
36803: LD_INT 53
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: IN
36810: AND
36811: PUSH
36812: LD_VAR 0 4
36816: PPUSH
36817: LD_VAR 0 5
36821: PPUSH
36822: CALL_OW 488
36826: AND
36827: IFFALSE 36851
// CutTreeXYR ( unit , x , y , 12 ) ;
36829: LD_VAR 0 2
36833: PPUSH
36834: LD_VAR 0 4
36838: PPUSH
36839: LD_VAR 0 5
36843: PPUSH
36844: LD_INT 12
36846: PPUSH
36847: CALL 36946 0 4
// if cmd = 256 then
36851: LD_VAR 0 1
36855: PUSH
36856: LD_INT 256
36858: EQUAL
36859: IFFALSE 36880
// SetFactoryWaypoint ( unit , x , y ) ;
36861: LD_VAR 0 2
36865: PPUSH
36866: LD_VAR 0 4
36870: PPUSH
36871: LD_VAR 0 5
36875: PPUSH
36876: CALL 34861 0 3
// if cmd = 257 then
36880: LD_VAR 0 1
36884: PUSH
36885: LD_INT 257
36887: EQUAL
36888: IFFALSE 36909
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36890: LD_VAR 0 2
36894: PPUSH
36895: LD_VAR 0 4
36899: PPUSH
36900: LD_VAR 0 5
36904: PPUSH
36905: CALL 35223 0 3
// if cmd = 258 then
36909: LD_VAR 0 1
36913: PUSH
36914: LD_INT 258
36916: EQUAL
36917: IFFALSE 36941
// BurnTreeXYR ( unit , x , y , 8 ) ;
36919: LD_VAR 0 2
36923: PPUSH
36924: LD_VAR 0 4
36928: PPUSH
36929: LD_VAR 0 5
36933: PPUSH
36934: LD_INT 8
36936: PPUSH
36937: CALL 37340 0 4
// end ;
36941: LD_VAR 0 6
36945: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36946: LD_INT 0
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36957: LD_VAR 0 1
36961: PPUSH
36962: CALL_OW 302
36966: NOT
36967: PUSH
36968: LD_VAR 0 2
36972: PPUSH
36973: LD_VAR 0 3
36977: PPUSH
36978: CALL_OW 488
36982: NOT
36983: OR
36984: PUSH
36985: LD_VAR 0 4
36989: NOT
36990: OR
36991: IFFALSE 36995
// exit ;
36993: GO 37335
// list := [ ] ;
36995: LD_ADDR_VAR 0 13
36999: PUSH
37000: EMPTY
37001: ST_TO_ADDR
// if x - r < 0 then
37002: LD_VAR 0 2
37006: PUSH
37007: LD_VAR 0 4
37011: MINUS
37012: PUSH
37013: LD_INT 0
37015: LESS
37016: IFFALSE 37028
// min_x := 0 else
37018: LD_ADDR_VAR 0 7
37022: PUSH
37023: LD_INT 0
37025: ST_TO_ADDR
37026: GO 37044
// min_x := x - r ;
37028: LD_ADDR_VAR 0 7
37032: PUSH
37033: LD_VAR 0 2
37037: PUSH
37038: LD_VAR 0 4
37042: MINUS
37043: ST_TO_ADDR
// if y - r < 0 then
37044: LD_VAR 0 3
37048: PUSH
37049: LD_VAR 0 4
37053: MINUS
37054: PUSH
37055: LD_INT 0
37057: LESS
37058: IFFALSE 37070
// min_y := 0 else
37060: LD_ADDR_VAR 0 8
37064: PUSH
37065: LD_INT 0
37067: ST_TO_ADDR
37068: GO 37086
// min_y := y - r ;
37070: LD_ADDR_VAR 0 8
37074: PUSH
37075: LD_VAR 0 3
37079: PUSH
37080: LD_VAR 0 4
37084: MINUS
37085: ST_TO_ADDR
// max_x := x + r ;
37086: LD_ADDR_VAR 0 9
37090: PUSH
37091: LD_VAR 0 2
37095: PUSH
37096: LD_VAR 0 4
37100: PLUS
37101: ST_TO_ADDR
// max_y := y + r ;
37102: LD_ADDR_VAR 0 10
37106: PUSH
37107: LD_VAR 0 3
37111: PUSH
37112: LD_VAR 0 4
37116: PLUS
37117: ST_TO_ADDR
// for _x = min_x to max_x do
37118: LD_ADDR_VAR 0 11
37122: PUSH
37123: DOUBLE
37124: LD_VAR 0 7
37128: DEC
37129: ST_TO_ADDR
37130: LD_VAR 0 9
37134: PUSH
37135: FOR_TO
37136: IFFALSE 37253
// for _y = min_y to max_y do
37138: LD_ADDR_VAR 0 12
37142: PUSH
37143: DOUBLE
37144: LD_VAR 0 8
37148: DEC
37149: ST_TO_ADDR
37150: LD_VAR 0 10
37154: PUSH
37155: FOR_TO
37156: IFFALSE 37249
// begin if not ValidHex ( _x , _y ) then
37158: LD_VAR 0 11
37162: PPUSH
37163: LD_VAR 0 12
37167: PPUSH
37168: CALL_OW 488
37172: NOT
37173: IFFALSE 37177
// continue ;
37175: GO 37155
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37177: LD_VAR 0 11
37181: PPUSH
37182: LD_VAR 0 12
37186: PPUSH
37187: CALL_OW 351
37191: PUSH
37192: LD_VAR 0 11
37196: PPUSH
37197: LD_VAR 0 12
37201: PPUSH
37202: CALL_OW 554
37206: AND
37207: IFFALSE 37247
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37209: LD_ADDR_VAR 0 13
37213: PUSH
37214: LD_VAR 0 13
37218: PPUSH
37219: LD_VAR 0 13
37223: PUSH
37224: LD_INT 1
37226: PLUS
37227: PPUSH
37228: LD_VAR 0 11
37232: PUSH
37233: LD_VAR 0 12
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PPUSH
37242: CALL_OW 2
37246: ST_TO_ADDR
// end ;
37247: GO 37155
37249: POP
37250: POP
37251: GO 37135
37253: POP
37254: POP
// if not list then
37255: LD_VAR 0 13
37259: NOT
37260: IFFALSE 37264
// exit ;
37262: GO 37335
// for i in list do
37264: LD_ADDR_VAR 0 6
37268: PUSH
37269: LD_VAR 0 13
37273: PUSH
37274: FOR_IN
37275: IFFALSE 37333
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_STRING M
37284: PUSH
37285: LD_VAR 0 6
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PUSH
37294: LD_VAR 0 6
37298: PUSH
37299: LD_INT 2
37301: ARRAY
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: PPUSH
37327: CALL_OW 447
37331: GO 37274
37333: POP
37334: POP
// end ;
37335: LD_VAR 0 5
37339: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
37351: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 302
37361: NOT
37362: PUSH
37363: LD_VAR 0 2
37367: PPUSH
37368: LD_VAR 0 3
37372: PPUSH
37373: CALL_OW 488
37377: NOT
37378: OR
37379: PUSH
37380: LD_VAR 0 4
37384: NOT
37385: OR
37386: IFFALSE 37390
// exit ;
37388: GO 37903
// list := [ ] ;
37390: LD_ADDR_VAR 0 13
37394: PUSH
37395: EMPTY
37396: ST_TO_ADDR
// if x - r < 0 then
37397: LD_VAR 0 2
37401: PUSH
37402: LD_VAR 0 4
37406: MINUS
37407: PUSH
37408: LD_INT 0
37410: LESS
37411: IFFALSE 37423
// min_x := 0 else
37413: LD_ADDR_VAR 0 7
37417: PUSH
37418: LD_INT 0
37420: ST_TO_ADDR
37421: GO 37439
// min_x := x - r ;
37423: LD_ADDR_VAR 0 7
37427: PUSH
37428: LD_VAR 0 2
37432: PUSH
37433: LD_VAR 0 4
37437: MINUS
37438: ST_TO_ADDR
// if y - r < 0 then
37439: LD_VAR 0 3
37443: PUSH
37444: LD_VAR 0 4
37448: MINUS
37449: PUSH
37450: LD_INT 0
37452: LESS
37453: IFFALSE 37465
// min_y := 0 else
37455: LD_ADDR_VAR 0 8
37459: PUSH
37460: LD_INT 0
37462: ST_TO_ADDR
37463: GO 37481
// min_y := y - r ;
37465: LD_ADDR_VAR 0 8
37469: PUSH
37470: LD_VAR 0 3
37474: PUSH
37475: LD_VAR 0 4
37479: MINUS
37480: ST_TO_ADDR
// max_x := x + r ;
37481: LD_ADDR_VAR 0 9
37485: PUSH
37486: LD_VAR 0 2
37490: PUSH
37491: LD_VAR 0 4
37495: PLUS
37496: ST_TO_ADDR
// max_y := y + r ;
37497: LD_ADDR_VAR 0 10
37501: PUSH
37502: LD_VAR 0 3
37506: PUSH
37507: LD_VAR 0 4
37511: PLUS
37512: ST_TO_ADDR
// for _x = min_x to max_x do
37513: LD_ADDR_VAR 0 11
37517: PUSH
37518: DOUBLE
37519: LD_VAR 0 7
37523: DEC
37524: ST_TO_ADDR
37525: LD_VAR 0 9
37529: PUSH
37530: FOR_TO
37531: IFFALSE 37648
// for _y = min_y to max_y do
37533: LD_ADDR_VAR 0 12
37537: PUSH
37538: DOUBLE
37539: LD_VAR 0 8
37543: DEC
37544: ST_TO_ADDR
37545: LD_VAR 0 10
37549: PUSH
37550: FOR_TO
37551: IFFALSE 37644
// begin if not ValidHex ( _x , _y ) then
37553: LD_VAR 0 11
37557: PPUSH
37558: LD_VAR 0 12
37562: PPUSH
37563: CALL_OW 488
37567: NOT
37568: IFFALSE 37572
// continue ;
37570: GO 37550
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37572: LD_VAR 0 11
37576: PPUSH
37577: LD_VAR 0 12
37581: PPUSH
37582: CALL_OW 351
37586: PUSH
37587: LD_VAR 0 11
37591: PPUSH
37592: LD_VAR 0 12
37596: PPUSH
37597: CALL_OW 554
37601: AND
37602: IFFALSE 37642
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37604: LD_ADDR_VAR 0 13
37608: PUSH
37609: LD_VAR 0 13
37613: PPUSH
37614: LD_VAR 0 13
37618: PUSH
37619: LD_INT 1
37621: PLUS
37622: PPUSH
37623: LD_VAR 0 11
37627: PUSH
37628: LD_VAR 0 12
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PPUSH
37637: CALL_OW 2
37641: ST_TO_ADDR
// end ;
37642: GO 37550
37644: POP
37645: POP
37646: GO 37530
37648: POP
37649: POP
// if not list then
37650: LD_VAR 0 13
37654: NOT
37655: IFFALSE 37659
// exit ;
37657: GO 37903
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37659: LD_ADDR_VAR 0 13
37663: PUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: LD_VAR 0 13
37673: PPUSH
37674: LD_INT 1
37676: PPUSH
37677: LD_INT 1
37679: PPUSH
37680: CALL 46516 0 4
37684: ST_TO_ADDR
// ComStop ( flame ) ;
37685: LD_VAR 0 1
37689: PPUSH
37690: CALL_OW 141
// for i in list do
37694: LD_ADDR_VAR 0 6
37698: PUSH
37699: LD_VAR 0 13
37703: PUSH
37704: FOR_IN
37705: IFFALSE 37736
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37707: LD_VAR 0 1
37711: PPUSH
37712: LD_VAR 0 6
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PPUSH
37721: LD_VAR 0 6
37725: PUSH
37726: LD_INT 2
37728: ARRAY
37729: PPUSH
37730: CALL_OW 176
37734: GO 37704
37736: POP
37737: POP
// repeat wait ( 0 0$1 ) ;
37738: LD_INT 35
37740: PPUSH
37741: CALL_OW 67
// task := GetTaskList ( flame ) ;
37745: LD_ADDR_VAR 0 14
37749: PUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: CALL_OW 437
37759: ST_TO_ADDR
// if not task then
37760: LD_VAR 0 14
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 37903
// if task [ 1 ] [ 1 ] <> | then
37769: LD_VAR 0 14
37773: PUSH
37774: LD_INT 1
37776: ARRAY
37777: PUSH
37778: LD_INT 1
37780: ARRAY
37781: PUSH
37782: LD_STRING |
37784: NONEQUAL
37785: IFFALSE 37789
// exit ;
37787: GO 37903
// _x := task [ 1 ] [ 2 ] ;
37789: LD_ADDR_VAR 0 11
37793: PUSH
37794: LD_VAR 0 14
37798: PUSH
37799: LD_INT 1
37801: ARRAY
37802: PUSH
37803: LD_INT 2
37805: ARRAY
37806: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37807: LD_ADDR_VAR 0 12
37811: PUSH
37812: LD_VAR 0 14
37816: PUSH
37817: LD_INT 1
37819: ARRAY
37820: PUSH
37821: LD_INT 3
37823: ARRAY
37824: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37825: LD_VAR 0 11
37829: PPUSH
37830: LD_VAR 0 12
37834: PPUSH
37835: CALL_OW 351
37839: NOT
37840: PUSH
37841: LD_VAR 0 11
37845: PPUSH
37846: LD_VAR 0 12
37850: PPUSH
37851: CALL_OW 554
37855: NOT
37856: OR
37857: IFFALSE 37891
// begin task := Delete ( task , 1 ) ;
37859: LD_ADDR_VAR 0 14
37863: PUSH
37864: LD_VAR 0 14
37868: PPUSH
37869: LD_INT 1
37871: PPUSH
37872: CALL_OW 3
37876: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37877: LD_VAR 0 1
37881: PPUSH
37882: LD_VAR 0 14
37886: PPUSH
37887: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37891: LD_VAR 0 1
37895: PPUSH
37896: CALL_OW 314
37900: NOT
37901: IFFALSE 37738
// end ;
37903: LD_VAR 0 5
37907: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37908: LD_EXP 99
37912: NOT
37913: IFFALSE 37963
37915: GO 37917
37917: DISABLE
// begin initHack := true ;
37918: LD_ADDR_EXP 99
37922: PUSH
37923: LD_INT 1
37925: ST_TO_ADDR
// hackTanks := [ ] ;
37926: LD_ADDR_EXP 100
37930: PUSH
37931: EMPTY
37932: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37933: LD_ADDR_EXP 101
37937: PUSH
37938: EMPTY
37939: ST_TO_ADDR
// hackLimit := 3 ;
37940: LD_ADDR_EXP 102
37944: PUSH
37945: LD_INT 3
37947: ST_TO_ADDR
// hackDist := 12 ;
37948: LD_ADDR_EXP 103
37952: PUSH
37953: LD_INT 12
37955: ST_TO_ADDR
// hackCounter := [ ] ;
37956: LD_ADDR_EXP 104
37960: PUSH
37961: EMPTY
37962: ST_TO_ADDR
// end ;
37963: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37964: LD_EXP 99
37968: PUSH
37969: LD_INT 34
37971: PUSH
37972: LD_INT 99
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PPUSH
37979: CALL_OW 69
37983: AND
37984: IFFALSE 38237
37986: GO 37988
37988: DISABLE
37989: LD_INT 0
37991: PPUSH
37992: PPUSH
// begin enable ;
37993: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37994: LD_ADDR_VAR 0 1
37998: PUSH
37999: LD_INT 34
38001: PUSH
38002: LD_INT 99
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PPUSH
38009: CALL_OW 69
38013: PUSH
38014: FOR_IN
38015: IFFALSE 38235
// begin if not i in hackTanks then
38017: LD_VAR 0 1
38021: PUSH
38022: LD_EXP 100
38026: IN
38027: NOT
38028: IFFALSE 38111
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38030: LD_ADDR_EXP 100
38034: PUSH
38035: LD_EXP 100
38039: PPUSH
38040: LD_EXP 100
38044: PUSH
38045: LD_INT 1
38047: PLUS
38048: PPUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 1
38058: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38059: LD_ADDR_EXP 101
38063: PUSH
38064: LD_EXP 101
38068: PPUSH
38069: LD_EXP 101
38073: PUSH
38074: LD_INT 1
38076: PLUS
38077: PPUSH
38078: EMPTY
38079: PPUSH
38080: CALL_OW 1
38084: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38085: LD_ADDR_EXP 104
38089: PUSH
38090: LD_EXP 104
38094: PPUSH
38095: LD_EXP 104
38099: PUSH
38100: LD_INT 1
38102: PLUS
38103: PPUSH
38104: EMPTY
38105: PPUSH
38106: CALL_OW 1
38110: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38111: LD_VAR 0 1
38115: PPUSH
38116: CALL_OW 302
38120: NOT
38121: IFFALSE 38134
// begin HackUnlinkAll ( i ) ;
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL 38240 0 1
// continue ;
38132: GO 38014
// end ; HackCheckCapturedStatus ( i ) ;
38134: LD_VAR 0 1
38138: PPUSH
38139: CALL 38683 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38143: LD_ADDR_VAR 0 2
38147: PUSH
38148: LD_INT 81
38150: PUSH
38151: LD_VAR 0 1
38155: PPUSH
38156: CALL_OW 255
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 33
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 91
38177: PUSH
38178: LD_VAR 0 1
38182: PUSH
38183: LD_EXP 103
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 50
38195: PUSH
38196: EMPTY
38197: LIST
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: PPUSH
38205: CALL_OW 69
38209: ST_TO_ADDR
// if not tmp then
38210: LD_VAR 0 2
38214: NOT
38215: IFFALSE 38219
// continue ;
38217: GO 38014
// HackLink ( i , tmp ) ;
38219: LD_VAR 0 1
38223: PPUSH
38224: LD_VAR 0 2
38228: PPUSH
38229: CALL 38376 0 2
// end ;
38233: GO 38014
38235: POP
38236: POP
// end ;
38237: PPOPN 2
38239: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38240: LD_INT 0
38242: PPUSH
38243: PPUSH
38244: PPUSH
// if not hack in hackTanks then
38245: LD_VAR 0 1
38249: PUSH
38250: LD_EXP 100
38254: IN
38255: NOT
38256: IFFALSE 38260
// exit ;
38258: GO 38371
// index := GetElementIndex ( hackTanks , hack ) ;
38260: LD_ADDR_VAR 0 4
38264: PUSH
38265: LD_EXP 100
38269: PPUSH
38270: LD_VAR 0 1
38274: PPUSH
38275: CALL 45813 0 2
38279: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38280: LD_EXP 101
38284: PUSH
38285: LD_VAR 0 4
38289: ARRAY
38290: IFFALSE 38371
// begin for i in hackTanksCaptured [ index ] do
38292: LD_ADDR_VAR 0 3
38296: PUSH
38297: LD_EXP 101
38301: PUSH
38302: LD_VAR 0 4
38306: ARRAY
38307: PUSH
38308: FOR_IN
38309: IFFALSE 38335
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38311: LD_VAR 0 3
38315: PUSH
38316: LD_INT 1
38318: ARRAY
38319: PPUSH
38320: LD_VAR 0 3
38324: PUSH
38325: LD_INT 2
38327: ARRAY
38328: PPUSH
38329: CALL_OW 235
38333: GO 38308
38335: POP
38336: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38337: LD_ADDR_EXP 101
38341: PUSH
38342: LD_EXP 101
38346: PPUSH
38347: LD_VAR 0 4
38351: PPUSH
38352: EMPTY
38353: PPUSH
38354: CALL_OW 1
38358: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38359: LD_VAR 0 1
38363: PPUSH
38364: LD_INT 0
38366: PPUSH
38367: CALL_OW 505
// end ; end ;
38371: LD_VAR 0 2
38375: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38376: LD_INT 0
38378: PPUSH
38379: PPUSH
38380: PPUSH
// if not hack in hackTanks or not vehicles then
38381: LD_VAR 0 1
38385: PUSH
38386: LD_EXP 100
38390: IN
38391: NOT
38392: PUSH
38393: LD_VAR 0 2
38397: NOT
38398: OR
38399: IFFALSE 38403
// exit ;
38401: GO 38678
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38403: LD_ADDR_VAR 0 2
38407: PUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: LD_VAR 0 2
38417: PPUSH
38418: LD_INT 1
38420: PPUSH
38421: LD_INT 1
38423: PPUSH
38424: CALL 46463 0 4
38428: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38429: LD_ADDR_VAR 0 5
38433: PUSH
38434: LD_EXP 100
38438: PPUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL 45813 0 2
38448: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38449: LD_EXP 101
38453: PUSH
38454: LD_VAR 0 5
38458: ARRAY
38459: PUSH
38460: LD_EXP 102
38464: LESS
38465: IFFALSE 38654
// begin for i := 1 to vehicles do
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: DOUBLE
38473: LD_INT 1
38475: DEC
38476: ST_TO_ADDR
38477: LD_VAR 0 2
38481: PUSH
38482: FOR_TO
38483: IFFALSE 38652
// begin if hackTanksCaptured [ index ] = hackLimit then
38485: LD_EXP 101
38489: PUSH
38490: LD_VAR 0 5
38494: ARRAY
38495: PUSH
38496: LD_EXP 102
38500: EQUAL
38501: IFFALSE 38505
// break ;
38503: GO 38652
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38505: LD_ADDR_EXP 104
38509: PUSH
38510: LD_EXP 104
38514: PPUSH
38515: LD_VAR 0 5
38519: PPUSH
38520: LD_EXP 104
38524: PUSH
38525: LD_VAR 0 5
38529: ARRAY
38530: PUSH
38531: LD_INT 1
38533: PLUS
38534: PPUSH
38535: CALL_OW 1
38539: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38540: LD_ADDR_EXP 101
38544: PUSH
38545: LD_EXP 101
38549: PPUSH
38550: LD_VAR 0 5
38554: PUSH
38555: LD_EXP 101
38559: PUSH
38560: LD_VAR 0 5
38564: ARRAY
38565: PUSH
38566: LD_INT 1
38568: PLUS
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PPUSH
38574: LD_VAR 0 2
38578: PUSH
38579: LD_VAR 0 4
38583: ARRAY
38584: PUSH
38585: LD_VAR 0 2
38589: PUSH
38590: LD_VAR 0 4
38594: ARRAY
38595: PPUSH
38596: CALL_OW 255
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PPUSH
38605: CALL 46028 0 3
38609: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38610: LD_VAR 0 2
38614: PUSH
38615: LD_VAR 0 4
38619: ARRAY
38620: PPUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 255
38630: PPUSH
38631: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38635: LD_VAR 0 2
38639: PUSH
38640: LD_VAR 0 4
38644: ARRAY
38645: PPUSH
38646: CALL_OW 141
// end ;
38650: GO 38482
38652: POP
38653: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38654: LD_VAR 0 1
38658: PPUSH
38659: LD_EXP 101
38663: PUSH
38664: LD_VAR 0 5
38668: ARRAY
38669: PUSH
38670: LD_INT 0
38672: PLUS
38673: PPUSH
38674: CALL_OW 505
// end ;
38678: LD_VAR 0 3
38682: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
// if not hack in hackTanks then
38689: LD_VAR 0 1
38693: PUSH
38694: LD_EXP 100
38698: IN
38699: NOT
38700: IFFALSE 38704
// exit ;
38702: GO 38944
// index := GetElementIndex ( hackTanks , hack ) ;
38704: LD_ADDR_VAR 0 4
38708: PUSH
38709: LD_EXP 100
38713: PPUSH
38714: LD_VAR 0 1
38718: PPUSH
38719: CALL 45813 0 2
38723: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38724: LD_ADDR_VAR 0 3
38728: PUSH
38729: DOUBLE
38730: LD_EXP 101
38734: PUSH
38735: LD_VAR 0 4
38739: ARRAY
38740: INC
38741: ST_TO_ADDR
38742: LD_INT 1
38744: PUSH
38745: FOR_DOWNTO
38746: IFFALSE 38918
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38748: LD_ADDR_VAR 0 5
38752: PUSH
38753: LD_EXP 101
38757: PUSH
38758: LD_VAR 0 4
38762: ARRAY
38763: PUSH
38764: LD_VAR 0 3
38768: ARRAY
38769: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38770: LD_VAR 0 5
38774: PUSH
38775: LD_INT 1
38777: ARRAY
38778: PPUSH
38779: CALL_OW 302
38783: NOT
38784: PUSH
38785: LD_VAR 0 5
38789: PUSH
38790: LD_INT 1
38792: ARRAY
38793: PPUSH
38794: CALL_OW 255
38798: PUSH
38799: LD_VAR 0 1
38803: PPUSH
38804: CALL_OW 255
38808: NONEQUAL
38809: OR
38810: IFFALSE 38916
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38812: LD_VAR 0 5
38816: PUSH
38817: LD_INT 1
38819: ARRAY
38820: PPUSH
38821: CALL_OW 305
38825: PUSH
38826: LD_VAR 0 5
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: CALL_OW 255
38839: PUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 255
38849: EQUAL
38850: AND
38851: IFFALSE 38875
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38853: LD_VAR 0 5
38857: PUSH
38858: LD_INT 1
38860: ARRAY
38861: PPUSH
38862: LD_VAR 0 5
38866: PUSH
38867: LD_INT 2
38869: ARRAY
38870: PPUSH
38871: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38875: LD_ADDR_EXP 101
38879: PUSH
38880: LD_EXP 101
38884: PPUSH
38885: LD_VAR 0 4
38889: PPUSH
38890: LD_EXP 101
38894: PUSH
38895: LD_VAR 0 4
38899: ARRAY
38900: PPUSH
38901: LD_VAR 0 3
38905: PPUSH
38906: CALL_OW 3
38910: PPUSH
38911: CALL_OW 1
38915: ST_TO_ADDR
// end ; end ;
38916: GO 38745
38918: POP
38919: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38920: LD_VAR 0 1
38924: PPUSH
38925: LD_EXP 101
38929: PUSH
38930: LD_VAR 0 4
38934: ARRAY
38935: PUSH
38936: LD_INT 0
38938: PLUS
38939: PPUSH
38940: CALL_OW 505
// end ;
38944: LD_VAR 0 2
38948: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38949: LD_INT 0
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
// if not hack in hackTanks then
38955: LD_VAR 0 1
38959: PUSH
38960: LD_EXP 100
38964: IN
38965: NOT
38966: IFFALSE 38970
// exit ;
38968: GO 39055
// index := GetElementIndex ( hackTanks , hack ) ;
38970: LD_ADDR_VAR 0 5
38974: PUSH
38975: LD_EXP 100
38979: PPUSH
38980: LD_VAR 0 1
38984: PPUSH
38985: CALL 45813 0 2
38989: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38990: LD_ADDR_VAR 0 4
38994: PUSH
38995: DOUBLE
38996: LD_INT 1
38998: DEC
38999: ST_TO_ADDR
39000: LD_EXP 101
39004: PUSH
39005: LD_VAR 0 5
39009: ARRAY
39010: PUSH
39011: FOR_TO
39012: IFFALSE 39053
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39014: LD_EXP 101
39018: PUSH
39019: LD_VAR 0 5
39023: ARRAY
39024: PUSH
39025: LD_VAR 0 4
39029: ARRAY
39030: PUSH
39031: LD_INT 1
39033: ARRAY
39034: PUSH
39035: LD_VAR 0 2
39039: EQUAL
39040: IFFALSE 39051
// KillUnit ( vehicle ) ;
39042: LD_VAR 0 2
39046: PPUSH
39047: CALL_OW 66
39051: GO 39011
39053: POP
39054: POP
// end ;
39055: LD_VAR 0 3
39059: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39060: LD_EXP 105
39064: NOT
39065: IFFALSE 39100
39067: GO 39069
39069: DISABLE
// begin initMiner := true ;
39070: LD_ADDR_EXP 105
39074: PUSH
39075: LD_INT 1
39077: ST_TO_ADDR
// minersList := [ ] ;
39078: LD_ADDR_EXP 106
39082: PUSH
39083: EMPTY
39084: ST_TO_ADDR
// minerMinesList := [ ] ;
39085: LD_ADDR_EXP 107
39089: PUSH
39090: EMPTY
39091: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39092: LD_ADDR_EXP 108
39096: PUSH
39097: LD_INT 5
39099: ST_TO_ADDR
// end ;
39100: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39101: LD_EXP 105
39105: PUSH
39106: LD_INT 34
39108: PUSH
39109: LD_INT 81
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PPUSH
39116: CALL_OW 69
39120: AND
39121: IFFALSE 39582
39123: GO 39125
39125: DISABLE
39126: LD_INT 0
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
// begin enable ;
39132: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39133: LD_ADDR_VAR 0 1
39137: PUSH
39138: LD_INT 34
39140: PUSH
39141: LD_INT 81
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PPUSH
39148: CALL_OW 69
39152: PUSH
39153: FOR_IN
39154: IFFALSE 39226
// begin if not i in minersList then
39156: LD_VAR 0 1
39160: PUSH
39161: LD_EXP 106
39165: IN
39166: NOT
39167: IFFALSE 39224
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39169: LD_ADDR_EXP 106
39173: PUSH
39174: LD_EXP 106
39178: PPUSH
39179: LD_EXP 106
39183: PUSH
39184: LD_INT 1
39186: PLUS
39187: PPUSH
39188: LD_VAR 0 1
39192: PPUSH
39193: CALL_OW 1
39197: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39198: LD_ADDR_EXP 107
39202: PUSH
39203: LD_EXP 107
39207: PPUSH
39208: LD_EXP 107
39212: PUSH
39213: LD_INT 1
39215: PLUS
39216: PPUSH
39217: EMPTY
39218: PPUSH
39219: CALL_OW 1
39223: ST_TO_ADDR
// end end ;
39224: GO 39153
39226: POP
39227: POP
// for i := minerMinesList downto 1 do
39228: LD_ADDR_VAR 0 1
39232: PUSH
39233: DOUBLE
39234: LD_EXP 107
39238: INC
39239: ST_TO_ADDR
39240: LD_INT 1
39242: PUSH
39243: FOR_DOWNTO
39244: IFFALSE 39580
// begin if IsLive ( minersList [ i ] ) then
39246: LD_EXP 106
39250: PUSH
39251: LD_VAR 0 1
39255: ARRAY
39256: PPUSH
39257: CALL_OW 300
39261: IFFALSE 39289
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39263: LD_EXP 106
39267: PUSH
39268: LD_VAR 0 1
39272: ARRAY
39273: PPUSH
39274: LD_EXP 107
39278: PUSH
39279: LD_VAR 0 1
39283: ARRAY
39284: PPUSH
39285: CALL_OW 505
// if not minerMinesList [ i ] then
39289: LD_EXP 107
39293: PUSH
39294: LD_VAR 0 1
39298: ARRAY
39299: NOT
39300: IFFALSE 39304
// continue ;
39302: GO 39243
// for j := minerMinesList [ i ] downto 1 do
39304: LD_ADDR_VAR 0 2
39308: PUSH
39309: DOUBLE
39310: LD_EXP 107
39314: PUSH
39315: LD_VAR 0 1
39319: ARRAY
39320: INC
39321: ST_TO_ADDR
39322: LD_INT 1
39324: PUSH
39325: FOR_DOWNTO
39326: IFFALSE 39576
// begin side := GetSide ( minersList [ i ] ) ;
39328: LD_ADDR_VAR 0 3
39332: PUSH
39333: LD_EXP 106
39337: PUSH
39338: LD_VAR 0 1
39342: ARRAY
39343: PPUSH
39344: CALL_OW 255
39348: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39349: LD_ADDR_VAR 0 4
39353: PUSH
39354: LD_EXP 107
39358: PUSH
39359: LD_VAR 0 1
39363: ARRAY
39364: PUSH
39365: LD_VAR 0 2
39369: ARRAY
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: LD_EXP 107
39379: PUSH
39380: LD_VAR 0 1
39384: ARRAY
39385: PUSH
39386: LD_VAR 0 2
39390: ARRAY
39391: PUSH
39392: LD_INT 2
39394: ARRAY
39395: PPUSH
39396: CALL_OW 428
39400: ST_TO_ADDR
// if not tmp then
39401: LD_VAR 0 4
39405: NOT
39406: IFFALSE 39410
// continue ;
39408: GO 39325
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39410: LD_VAR 0 4
39414: PUSH
39415: LD_INT 81
39417: PUSH
39418: LD_VAR 0 3
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PPUSH
39427: CALL_OW 69
39431: IN
39432: PUSH
39433: LD_EXP 107
39437: PUSH
39438: LD_VAR 0 1
39442: ARRAY
39443: PUSH
39444: LD_VAR 0 2
39448: ARRAY
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: LD_EXP 107
39458: PUSH
39459: LD_VAR 0 1
39463: ARRAY
39464: PUSH
39465: LD_VAR 0 2
39469: ARRAY
39470: PUSH
39471: LD_INT 2
39473: ARRAY
39474: PPUSH
39475: CALL_OW 458
39479: AND
39480: IFFALSE 39574
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39482: LD_EXP 107
39486: PUSH
39487: LD_VAR 0 1
39491: ARRAY
39492: PUSH
39493: LD_VAR 0 2
39497: ARRAY
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PPUSH
39503: LD_EXP 107
39507: PUSH
39508: LD_VAR 0 1
39512: ARRAY
39513: PUSH
39514: LD_VAR 0 2
39518: ARRAY
39519: PUSH
39520: LD_INT 2
39522: ARRAY
39523: PPUSH
39524: LD_VAR 0 3
39528: PPUSH
39529: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39533: LD_ADDR_EXP 107
39537: PUSH
39538: LD_EXP 107
39542: PPUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: LD_EXP 107
39552: PUSH
39553: LD_VAR 0 1
39557: ARRAY
39558: PPUSH
39559: LD_VAR 0 2
39563: PPUSH
39564: CALL_OW 3
39568: PPUSH
39569: CALL_OW 1
39573: ST_TO_ADDR
// end ; end ;
39574: GO 39325
39576: POP
39577: POP
// end ;
39578: GO 39243
39580: POP
39581: POP
// end ;
39582: PPOPN 4
39584: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39585: LD_INT 0
39587: PPUSH
39588: PPUSH
// result := false ;
39589: LD_ADDR_VAR 0 4
39593: PUSH
39594: LD_INT 0
39596: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39597: LD_VAR 0 1
39601: PPUSH
39602: CALL_OW 264
39606: PUSH
39607: LD_INT 81
39609: EQUAL
39610: NOT
39611: IFFALSE 39615
// exit ;
39613: GO 39855
// index := GetElementIndex ( minersList , unit ) ;
39615: LD_ADDR_VAR 0 5
39619: PUSH
39620: LD_EXP 106
39624: PPUSH
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL 45813 0 2
39634: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39635: LD_EXP 107
39639: PUSH
39640: LD_VAR 0 5
39644: ARRAY
39645: PUSH
39646: LD_EXP 108
39650: GREATEREQUAL
39651: IFFALSE 39655
// exit ;
39653: GO 39855
// ComMoveXY ( unit , x , y ) ;
39655: LD_VAR 0 1
39659: PPUSH
39660: LD_VAR 0 2
39664: PPUSH
39665: LD_VAR 0 3
39669: PPUSH
39670: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39674: LD_INT 35
39676: PPUSH
39677: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39681: LD_VAR 0 1
39685: PPUSH
39686: LD_VAR 0 2
39690: PPUSH
39691: LD_VAR 0 3
39695: PPUSH
39696: CALL 77554 0 3
39700: NOT
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 314
39711: AND
39712: IFFALSE 39716
// exit ;
39714: GO 39855
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39716: LD_VAR 0 2
39720: PPUSH
39721: LD_VAR 0 3
39725: PPUSH
39726: CALL_OW 428
39730: PUSH
39731: LD_VAR 0 1
39735: EQUAL
39736: PUSH
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 314
39746: NOT
39747: AND
39748: IFFALSE 39674
// PlaySoundXY ( x , y , PlantMine ) ;
39750: LD_VAR 0 2
39754: PPUSH
39755: LD_VAR 0 3
39759: PPUSH
39760: LD_STRING PlantMine
39762: PPUSH
39763: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39767: LD_VAR 0 2
39771: PPUSH
39772: LD_VAR 0 3
39776: PPUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 255
39786: PPUSH
39787: LD_INT 0
39789: PPUSH
39790: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39794: LD_ADDR_EXP 107
39798: PUSH
39799: LD_EXP 107
39803: PPUSH
39804: LD_VAR 0 5
39808: PUSH
39809: LD_EXP 107
39813: PUSH
39814: LD_VAR 0 5
39818: ARRAY
39819: PUSH
39820: LD_INT 1
39822: PLUS
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PPUSH
39828: LD_VAR 0 2
39832: PUSH
39833: LD_VAR 0 3
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PPUSH
39842: CALL 46028 0 3
39846: ST_TO_ADDR
// result := true ;
39847: LD_ADDR_VAR 0 4
39851: PUSH
39852: LD_INT 1
39854: ST_TO_ADDR
// end ;
39855: LD_VAR 0 4
39859: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39860: LD_INT 0
39862: PPUSH
39863: PPUSH
39864: PPUSH
// if not unit in minersList then
39865: LD_VAR 0 1
39869: PUSH
39870: LD_EXP 106
39874: IN
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 40272
// index := GetElementIndex ( minersList , unit ) ;
39880: LD_ADDR_VAR 0 6
39884: PUSH
39885: LD_EXP 106
39889: PPUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL 45813 0 2
39899: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39900: LD_ADDR_VAR 0 5
39904: PUSH
39905: DOUBLE
39906: LD_EXP 107
39910: PUSH
39911: LD_VAR 0 6
39915: ARRAY
39916: INC
39917: ST_TO_ADDR
39918: LD_INT 1
39920: PUSH
39921: FOR_DOWNTO
39922: IFFALSE 40083
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39924: LD_EXP 107
39928: PUSH
39929: LD_VAR 0 6
39933: ARRAY
39934: PUSH
39935: LD_VAR 0 5
39939: ARRAY
39940: PUSH
39941: LD_INT 1
39943: ARRAY
39944: PUSH
39945: LD_VAR 0 2
39949: EQUAL
39950: PUSH
39951: LD_EXP 107
39955: PUSH
39956: LD_VAR 0 6
39960: ARRAY
39961: PUSH
39962: LD_VAR 0 5
39966: ARRAY
39967: PUSH
39968: LD_INT 2
39970: ARRAY
39971: PUSH
39972: LD_VAR 0 3
39976: EQUAL
39977: AND
39978: IFFALSE 40081
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39980: LD_EXP 107
39984: PUSH
39985: LD_VAR 0 6
39989: ARRAY
39990: PUSH
39991: LD_VAR 0 5
39995: ARRAY
39996: PUSH
39997: LD_INT 1
39999: ARRAY
40000: PPUSH
40001: LD_EXP 107
40005: PUSH
40006: LD_VAR 0 6
40010: ARRAY
40011: PUSH
40012: LD_VAR 0 5
40016: ARRAY
40017: PUSH
40018: LD_INT 2
40020: ARRAY
40021: PPUSH
40022: LD_VAR 0 1
40026: PPUSH
40027: CALL_OW 255
40031: PPUSH
40032: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40036: LD_ADDR_EXP 107
40040: PUSH
40041: LD_EXP 107
40045: PPUSH
40046: LD_VAR 0 6
40050: PPUSH
40051: LD_EXP 107
40055: PUSH
40056: LD_VAR 0 6
40060: ARRAY
40061: PPUSH
40062: LD_VAR 0 5
40066: PPUSH
40067: CALL_OW 3
40071: PPUSH
40072: CALL_OW 1
40076: ST_TO_ADDR
// exit ;
40077: POP
40078: POP
40079: GO 40272
// end ; end ;
40081: GO 39921
40083: POP
40084: POP
// for i := minerMinesList [ index ] downto 1 do
40085: LD_ADDR_VAR 0 5
40089: PUSH
40090: DOUBLE
40091: LD_EXP 107
40095: PUSH
40096: LD_VAR 0 6
40100: ARRAY
40101: INC
40102: ST_TO_ADDR
40103: LD_INT 1
40105: PUSH
40106: FOR_DOWNTO
40107: IFFALSE 40270
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40109: LD_EXP 107
40113: PUSH
40114: LD_VAR 0 6
40118: ARRAY
40119: PUSH
40120: LD_VAR 0 5
40124: ARRAY
40125: PUSH
40126: LD_INT 1
40128: ARRAY
40129: PPUSH
40130: LD_EXP 107
40134: PUSH
40135: LD_VAR 0 6
40139: ARRAY
40140: PUSH
40141: LD_VAR 0 5
40145: ARRAY
40146: PUSH
40147: LD_INT 2
40149: ARRAY
40150: PPUSH
40151: LD_VAR 0 2
40155: PPUSH
40156: LD_VAR 0 3
40160: PPUSH
40161: CALL_OW 298
40165: PUSH
40166: LD_INT 6
40168: LESS
40169: IFFALSE 40268
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40171: LD_EXP 107
40175: PUSH
40176: LD_VAR 0 6
40180: ARRAY
40181: PUSH
40182: LD_VAR 0 5
40186: ARRAY
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PPUSH
40192: LD_EXP 107
40196: PUSH
40197: LD_VAR 0 6
40201: ARRAY
40202: PUSH
40203: LD_VAR 0 5
40207: ARRAY
40208: PUSH
40209: LD_INT 2
40211: ARRAY
40212: PPUSH
40213: LD_VAR 0 1
40217: PPUSH
40218: CALL_OW 255
40222: PPUSH
40223: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40227: LD_ADDR_EXP 107
40231: PUSH
40232: LD_EXP 107
40236: PPUSH
40237: LD_VAR 0 6
40241: PPUSH
40242: LD_EXP 107
40246: PUSH
40247: LD_VAR 0 6
40251: ARRAY
40252: PPUSH
40253: LD_VAR 0 5
40257: PPUSH
40258: CALL_OW 3
40262: PPUSH
40263: CALL_OW 1
40267: ST_TO_ADDR
// end ; end ;
40268: GO 40106
40270: POP
40271: POP
// end ;
40272: LD_VAR 0 4
40276: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40277: LD_INT 0
40279: PPUSH
40280: PPUSH
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
40286: PPUSH
40287: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40288: LD_VAR 0 1
40292: PPUSH
40293: CALL_OW 264
40297: PUSH
40298: LD_INT 81
40300: EQUAL
40301: NOT
40302: PUSH
40303: LD_VAR 0 1
40307: PUSH
40308: LD_EXP 106
40312: IN
40313: NOT
40314: OR
40315: IFFALSE 40319
// exit ;
40317: GO 40641
// index := GetElementIndex ( minersList , unit ) ;
40319: LD_ADDR_VAR 0 6
40323: PUSH
40324: LD_EXP 106
40328: PPUSH
40329: LD_VAR 0 1
40333: PPUSH
40334: CALL 45813 0 2
40338: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40339: LD_ADDR_VAR 0 8
40343: PUSH
40344: LD_EXP 108
40348: PUSH
40349: LD_EXP 107
40353: PUSH
40354: LD_VAR 0 6
40358: ARRAY
40359: MINUS
40360: ST_TO_ADDR
// if not minesFreeAmount then
40361: LD_VAR 0 8
40365: NOT
40366: IFFALSE 40370
// exit ;
40368: GO 40641
// tmp := [ ] ;
40370: LD_ADDR_VAR 0 7
40374: PUSH
40375: EMPTY
40376: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40377: LD_ADDR_VAR 0 5
40381: PUSH
40382: DOUBLE
40383: LD_INT 1
40385: DEC
40386: ST_TO_ADDR
40387: LD_VAR 0 8
40391: PUSH
40392: FOR_TO
40393: IFFALSE 40588
// begin _d := rand ( 0 , 5 ) ;
40395: LD_ADDR_VAR 0 11
40399: PUSH
40400: LD_INT 0
40402: PPUSH
40403: LD_INT 5
40405: PPUSH
40406: CALL_OW 12
40410: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40411: LD_ADDR_VAR 0 12
40415: PUSH
40416: LD_INT 2
40418: PPUSH
40419: LD_INT 6
40421: PPUSH
40422: CALL_OW 12
40426: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40427: LD_ADDR_VAR 0 9
40431: PUSH
40432: LD_VAR 0 2
40436: PPUSH
40437: LD_VAR 0 11
40441: PPUSH
40442: LD_VAR 0 12
40446: PPUSH
40447: CALL_OW 272
40451: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40452: LD_ADDR_VAR 0 10
40456: PUSH
40457: LD_VAR 0 3
40461: PPUSH
40462: LD_VAR 0 11
40466: PPUSH
40467: LD_VAR 0 12
40471: PPUSH
40472: CALL_OW 273
40476: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40477: LD_VAR 0 9
40481: PPUSH
40482: LD_VAR 0 10
40486: PPUSH
40487: CALL_OW 488
40491: PUSH
40492: LD_VAR 0 9
40496: PUSH
40497: LD_VAR 0 10
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_VAR 0 7
40510: IN
40511: NOT
40512: AND
40513: PUSH
40514: LD_VAR 0 9
40518: PPUSH
40519: LD_VAR 0 10
40523: PPUSH
40524: CALL_OW 458
40528: NOT
40529: AND
40530: IFFALSE 40572
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40532: LD_ADDR_VAR 0 7
40536: PUSH
40537: LD_VAR 0 7
40541: PPUSH
40542: LD_VAR 0 7
40546: PUSH
40547: LD_INT 1
40549: PLUS
40550: PPUSH
40551: LD_VAR 0 9
40555: PUSH
40556: LD_VAR 0 10
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PPUSH
40565: CALL_OW 1
40569: ST_TO_ADDR
40570: GO 40586
// i := i - 1 ;
40572: LD_ADDR_VAR 0 5
40576: PUSH
40577: LD_VAR 0 5
40581: PUSH
40582: LD_INT 1
40584: MINUS
40585: ST_TO_ADDR
// end ;
40586: GO 40392
40588: POP
40589: POP
// for i in tmp do
40590: LD_ADDR_VAR 0 5
40594: PUSH
40595: LD_VAR 0 7
40599: PUSH
40600: FOR_IN
40601: IFFALSE 40639
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40603: LD_VAR 0 1
40607: PPUSH
40608: LD_VAR 0 5
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: PPUSH
40617: LD_VAR 0 5
40621: PUSH
40622: LD_INT 2
40624: ARRAY
40625: PPUSH
40626: CALL 39585 0 3
40630: NOT
40631: IFFALSE 40637
// exit ;
40633: POP
40634: POP
40635: GO 40641
40637: GO 40600
40639: POP
40640: POP
// end ;
40641: LD_VAR 0 4
40645: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40646: LD_INT 0
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
// if not GetClass ( unit ) = class_sniper then
40655: LD_VAR 0 1
40659: PPUSH
40660: CALL_OW 257
40664: PUSH
40665: LD_INT 5
40667: EQUAL
40668: NOT
40669: IFFALSE 40673
// exit ;
40671: GO 41061
// dist := 8 ;
40673: LD_ADDR_VAR 0 5
40677: PUSH
40678: LD_INT 8
40680: ST_TO_ADDR
// viewRange := 12 ;
40681: LD_ADDR_VAR 0 7
40685: PUSH
40686: LD_INT 12
40688: ST_TO_ADDR
// side := GetSide ( unit ) ;
40689: LD_ADDR_VAR 0 6
40693: PUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 255
40703: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40704: LD_INT 61
40706: PPUSH
40707: LD_VAR 0 6
40711: PPUSH
40712: CALL_OW 321
40716: PUSH
40717: LD_INT 2
40719: EQUAL
40720: IFFALSE 40730
// viewRange := 16 ;
40722: LD_ADDR_VAR 0 7
40726: PUSH
40727: LD_INT 16
40729: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40730: LD_VAR 0 1
40734: PPUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: LD_VAR 0 3
40744: PPUSH
40745: CALL_OW 297
40749: PUSH
40750: LD_VAR 0 5
40754: GREATER
40755: IFFALSE 40834
// begin ComMoveXY ( unit , x , y ) ;
40757: LD_VAR 0 1
40761: PPUSH
40762: LD_VAR 0 2
40766: PPUSH
40767: LD_VAR 0 3
40771: PPUSH
40772: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40776: LD_INT 35
40778: PPUSH
40779: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_VAR 0 3
40797: PPUSH
40798: CALL 77554 0 3
40802: NOT
40803: IFFALSE 40807
// exit ;
40805: GO 41061
// until GetDistUnitXY ( unit , x , y ) < dist ;
40807: LD_VAR 0 1
40811: PPUSH
40812: LD_VAR 0 2
40816: PPUSH
40817: LD_VAR 0 3
40821: PPUSH
40822: CALL_OW 297
40826: PUSH
40827: LD_VAR 0 5
40831: LESS
40832: IFFALSE 40776
// end ; ComTurnXY ( unit , x , y ) ;
40834: LD_VAR 0 1
40838: PPUSH
40839: LD_VAR 0 2
40843: PPUSH
40844: LD_VAR 0 3
40848: PPUSH
40849: CALL_OW 118
// wait ( 5 ) ;
40853: LD_INT 5
40855: PPUSH
40856: CALL_OW 67
// _d := GetDir ( unit ) ;
40860: LD_ADDR_VAR 0 10
40864: PUSH
40865: LD_VAR 0 1
40869: PPUSH
40870: CALL_OW 254
40874: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40875: LD_ADDR_VAR 0 8
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 250
40889: PPUSH
40890: LD_VAR 0 10
40894: PPUSH
40895: LD_VAR 0 5
40899: PPUSH
40900: CALL_OW 272
40904: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40905: LD_ADDR_VAR 0 9
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 251
40919: PPUSH
40920: LD_VAR 0 10
40924: PPUSH
40925: LD_VAR 0 5
40929: PPUSH
40930: CALL_OW 273
40934: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40935: LD_VAR 0 8
40939: PPUSH
40940: LD_VAR 0 9
40944: PPUSH
40945: CALL_OW 488
40949: NOT
40950: IFFALSE 40954
// exit ;
40952: GO 41061
// ComAnimCustom ( unit , 1 ) ;
40954: LD_VAR 0 1
40958: PPUSH
40959: LD_INT 1
40961: PPUSH
40962: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40966: LD_VAR 0 8
40970: PPUSH
40971: LD_VAR 0 9
40975: PPUSH
40976: LD_VAR 0 6
40980: PPUSH
40981: LD_VAR 0 7
40985: PPUSH
40986: CALL_OW 330
// repeat wait ( 1 ) ;
40990: LD_INT 1
40992: PPUSH
40993: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40997: LD_VAR 0 1
41001: PPUSH
41002: CALL_OW 316
41006: PUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 314
41016: OR
41017: PUSH
41018: LD_VAR 0 1
41022: PPUSH
41023: CALL_OW 302
41027: NOT
41028: OR
41029: PUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 301
41039: OR
41040: IFFALSE 40990
// RemoveSeeing ( _x , _y , side ) ;
41042: LD_VAR 0 8
41046: PPUSH
41047: LD_VAR 0 9
41051: PPUSH
41052: LD_VAR 0 6
41056: PPUSH
41057: CALL_OW 331
// end ; end_of_file
41061: LD_VAR 0 4
41065: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41066: LD_INT 0
41068: PPUSH
41069: PPUSH
// if exist_mode then
41070: LD_VAR 0 2
41074: IFFALSE 41099
// unit := CreateCharacter ( prefix & ident ) else
41076: LD_ADDR_VAR 0 5
41080: PUSH
41081: LD_VAR 0 3
41085: PUSH
41086: LD_VAR 0 1
41090: STR
41091: PPUSH
41092: CALL_OW 34
41096: ST_TO_ADDR
41097: GO 41114
// unit := NewCharacter ( ident ) ;
41099: LD_ADDR_VAR 0 5
41103: PUSH
41104: LD_VAR 0 1
41108: PPUSH
41109: CALL_OW 25
41113: ST_TO_ADDR
// result := unit ;
41114: LD_ADDR_VAR 0 4
41118: PUSH
41119: LD_VAR 0 5
41123: ST_TO_ADDR
// end ;
41124: LD_VAR 0 4
41128: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41129: LD_INT 0
41131: PPUSH
41132: PPUSH
// if not side or not nation then
41133: LD_VAR 0 1
41137: NOT
41138: PUSH
41139: LD_VAR 0 2
41143: NOT
41144: OR
41145: IFFALSE 41149
// exit ;
41147: GO 41917
// case nation of nation_american :
41149: LD_VAR 0 2
41153: PUSH
41154: LD_INT 1
41156: DOUBLE
41157: EQUAL
41158: IFTRUE 41162
41160: GO 41376
41162: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41163: LD_ADDR_VAR 0 4
41167: PUSH
41168: LD_INT 35
41170: PUSH
41171: LD_INT 45
41173: PUSH
41174: LD_INT 46
41176: PUSH
41177: LD_INT 47
41179: PUSH
41180: LD_INT 82
41182: PUSH
41183: LD_INT 83
41185: PUSH
41186: LD_INT 84
41188: PUSH
41189: LD_INT 85
41191: PUSH
41192: LD_INT 86
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 6
41203: PUSH
41204: LD_INT 15
41206: PUSH
41207: LD_INT 16
41209: PUSH
41210: LD_INT 7
41212: PUSH
41213: LD_INT 12
41215: PUSH
41216: LD_INT 13
41218: PUSH
41219: LD_INT 10
41221: PUSH
41222: LD_INT 14
41224: PUSH
41225: LD_INT 20
41227: PUSH
41228: LD_INT 21
41230: PUSH
41231: LD_INT 22
41233: PUSH
41234: LD_INT 25
41236: PUSH
41237: LD_INT 32
41239: PUSH
41240: LD_INT 27
41242: PUSH
41243: LD_INT 36
41245: PUSH
41246: LD_INT 69
41248: PUSH
41249: LD_INT 39
41251: PUSH
41252: LD_INT 34
41254: PUSH
41255: LD_INT 40
41257: PUSH
41258: LD_INT 48
41260: PUSH
41261: LD_INT 49
41263: PUSH
41264: LD_INT 50
41266: PUSH
41267: LD_INT 51
41269: PUSH
41270: LD_INT 52
41272: PUSH
41273: LD_INT 53
41275: PUSH
41276: LD_INT 54
41278: PUSH
41279: LD_INT 55
41281: PUSH
41282: LD_INT 56
41284: PUSH
41285: LD_INT 57
41287: PUSH
41288: LD_INT 58
41290: PUSH
41291: LD_INT 59
41293: PUSH
41294: LD_INT 60
41296: PUSH
41297: LD_INT 61
41299: PUSH
41300: LD_INT 62
41302: PUSH
41303: LD_INT 80
41305: PUSH
41306: LD_INT 82
41308: PUSH
41309: LD_INT 83
41311: PUSH
41312: LD_INT 84
41314: PUSH
41315: LD_INT 85
41317: PUSH
41318: LD_INT 86
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
41374: GO 41841
41376: LD_INT 2
41378: DOUBLE
41379: EQUAL
41380: IFTRUE 41384
41382: GO 41610
41384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41385: LD_ADDR_VAR 0 4
41389: PUSH
41390: LD_INT 35
41392: PUSH
41393: LD_INT 45
41395: PUSH
41396: LD_INT 46
41398: PUSH
41399: LD_INT 47
41401: PUSH
41402: LD_INT 82
41404: PUSH
41405: LD_INT 83
41407: PUSH
41408: LD_INT 84
41410: PUSH
41411: LD_INT 85
41413: PUSH
41414: LD_INT 87
41416: PUSH
41417: LD_INT 70
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 11
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: LD_INT 4
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: LD_INT 6
41437: PUSH
41438: LD_INT 15
41440: PUSH
41441: LD_INT 18
41443: PUSH
41444: LD_INT 7
41446: PUSH
41447: LD_INT 17
41449: PUSH
41450: LD_INT 8
41452: PUSH
41453: LD_INT 20
41455: PUSH
41456: LD_INT 21
41458: PUSH
41459: LD_INT 22
41461: PUSH
41462: LD_INT 72
41464: PUSH
41465: LD_INT 26
41467: PUSH
41468: LD_INT 69
41470: PUSH
41471: LD_INT 39
41473: PUSH
41474: LD_INT 40
41476: PUSH
41477: LD_INT 41
41479: PUSH
41480: LD_INT 42
41482: PUSH
41483: LD_INT 43
41485: PUSH
41486: LD_INT 48
41488: PUSH
41489: LD_INT 49
41491: PUSH
41492: LD_INT 50
41494: PUSH
41495: LD_INT 51
41497: PUSH
41498: LD_INT 52
41500: PUSH
41501: LD_INT 53
41503: PUSH
41504: LD_INT 54
41506: PUSH
41507: LD_INT 55
41509: PUSH
41510: LD_INT 56
41512: PUSH
41513: LD_INT 60
41515: PUSH
41516: LD_INT 61
41518: PUSH
41519: LD_INT 62
41521: PUSH
41522: LD_INT 66
41524: PUSH
41525: LD_INT 67
41527: PUSH
41528: LD_INT 68
41530: PUSH
41531: LD_INT 81
41533: PUSH
41534: LD_INT 82
41536: PUSH
41537: LD_INT 83
41539: PUSH
41540: LD_INT 84
41542: PUSH
41543: LD_INT 85
41545: PUSH
41546: LD_INT 87
41548: PUSH
41549: LD_INT 88
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: ST_TO_ADDR
41608: GO 41841
41610: LD_INT 3
41612: DOUBLE
41613: EQUAL
41614: IFTRUE 41618
41616: GO 41840
41618: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41619: LD_ADDR_VAR 0 4
41623: PUSH
41624: LD_INT 46
41626: PUSH
41627: LD_INT 47
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: LD_INT 82
41638: PUSH
41639: LD_INT 83
41641: PUSH
41642: LD_INT 84
41644: PUSH
41645: LD_INT 85
41647: PUSH
41648: LD_INT 86
41650: PUSH
41651: LD_INT 11
41653: PUSH
41654: LD_INT 9
41656: PUSH
41657: LD_INT 20
41659: PUSH
41660: LD_INT 19
41662: PUSH
41663: LD_INT 21
41665: PUSH
41666: LD_INT 24
41668: PUSH
41669: LD_INT 22
41671: PUSH
41672: LD_INT 25
41674: PUSH
41675: LD_INT 28
41677: PUSH
41678: LD_INT 29
41680: PUSH
41681: LD_INT 30
41683: PUSH
41684: LD_INT 31
41686: PUSH
41687: LD_INT 37
41689: PUSH
41690: LD_INT 38
41692: PUSH
41693: LD_INT 32
41695: PUSH
41696: LD_INT 27
41698: PUSH
41699: LD_INT 33
41701: PUSH
41702: LD_INT 69
41704: PUSH
41705: LD_INT 39
41707: PUSH
41708: LD_INT 34
41710: PUSH
41711: LD_INT 40
41713: PUSH
41714: LD_INT 71
41716: PUSH
41717: LD_INT 23
41719: PUSH
41720: LD_INT 44
41722: PUSH
41723: LD_INT 48
41725: PUSH
41726: LD_INT 49
41728: PUSH
41729: LD_INT 50
41731: PUSH
41732: LD_INT 51
41734: PUSH
41735: LD_INT 52
41737: PUSH
41738: LD_INT 53
41740: PUSH
41741: LD_INT 54
41743: PUSH
41744: LD_INT 55
41746: PUSH
41747: LD_INT 56
41749: PUSH
41750: LD_INT 57
41752: PUSH
41753: LD_INT 58
41755: PUSH
41756: LD_INT 59
41758: PUSH
41759: LD_INT 63
41761: PUSH
41762: LD_INT 64
41764: PUSH
41765: LD_INT 65
41767: PUSH
41768: LD_INT 82
41770: PUSH
41771: LD_INT 83
41773: PUSH
41774: LD_INT 84
41776: PUSH
41777: LD_INT 85
41779: PUSH
41780: LD_INT 86
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: ST_TO_ADDR
41838: GO 41841
41840: POP
// if state > - 1 and state < 3 then
41841: LD_VAR 0 3
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: GREATER
41850: PUSH
41851: LD_VAR 0 3
41855: PUSH
41856: LD_INT 3
41858: LESS
41859: AND
41860: IFFALSE 41917
// for i in result do
41862: LD_ADDR_VAR 0 5
41866: PUSH
41867: LD_VAR 0 4
41871: PUSH
41872: FOR_IN
41873: IFFALSE 41915
// if GetTech ( i , side ) <> state then
41875: LD_VAR 0 5
41879: PPUSH
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 321
41889: PUSH
41890: LD_VAR 0 3
41894: NONEQUAL
41895: IFFALSE 41913
// result := result diff i ;
41897: LD_ADDR_VAR 0 4
41901: PUSH
41902: LD_VAR 0 4
41906: PUSH
41907: LD_VAR 0 5
41911: DIFF
41912: ST_TO_ADDR
41913: GO 41872
41915: POP
41916: POP
// end ;
41917: LD_VAR 0 4
41921: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41922: LD_INT 0
41924: PPUSH
41925: PPUSH
41926: PPUSH
// result := true ;
41927: LD_ADDR_VAR 0 3
41931: PUSH
41932: LD_INT 1
41934: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41935: LD_ADDR_VAR 0 5
41939: PUSH
41940: LD_VAR 0 2
41944: PPUSH
41945: CALL_OW 480
41949: ST_TO_ADDR
// if not tmp then
41950: LD_VAR 0 5
41954: NOT
41955: IFFALSE 41959
// exit ;
41957: GO 42008
// for i in tmp do
41959: LD_ADDR_VAR 0 4
41963: PUSH
41964: LD_VAR 0 5
41968: PUSH
41969: FOR_IN
41970: IFFALSE 42006
// if GetTech ( i , side ) <> state_researched then
41972: LD_VAR 0 4
41976: PPUSH
41977: LD_VAR 0 1
41981: PPUSH
41982: CALL_OW 321
41986: PUSH
41987: LD_INT 2
41989: NONEQUAL
41990: IFFALSE 42004
// begin result := false ;
41992: LD_ADDR_VAR 0 3
41996: PUSH
41997: LD_INT 0
41999: ST_TO_ADDR
// exit ;
42000: POP
42001: POP
42002: GO 42008
// end ;
42004: GO 41969
42006: POP
42007: POP
// end ;
42008: LD_VAR 0 3
42012: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42013: LD_INT 0
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42028: LD_VAR 0 1
42032: NOT
42033: PUSH
42034: LD_VAR 0 1
42038: PPUSH
42039: CALL_OW 257
42043: PUSH
42044: LD_INT 9
42046: NONEQUAL
42047: OR
42048: IFFALSE 42052
// exit ;
42050: GO 42625
// side := GetSide ( unit ) ;
42052: LD_ADDR_VAR 0 9
42056: PUSH
42057: LD_VAR 0 1
42061: PPUSH
42062: CALL_OW 255
42066: ST_TO_ADDR
// tech_space := tech_spacanom ;
42067: LD_ADDR_VAR 0 12
42071: PUSH
42072: LD_INT 29
42074: ST_TO_ADDR
// tech_time := tech_taurad ;
42075: LD_ADDR_VAR 0 13
42079: PUSH
42080: LD_INT 28
42082: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42083: LD_ADDR_VAR 0 11
42087: PUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: CALL_OW 310
42097: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42098: LD_VAR 0 11
42102: PPUSH
42103: CALL_OW 247
42107: PUSH
42108: LD_INT 2
42110: EQUAL
42111: IFFALSE 42115
// exit ;
42113: GO 42625
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42115: LD_ADDR_VAR 0 8
42119: PUSH
42120: LD_INT 81
42122: PUSH
42123: LD_VAR 0 9
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 21
42137: PUSH
42138: LD_INT 3
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PPUSH
42153: CALL_OW 69
42157: ST_TO_ADDR
// if not tmp then
42158: LD_VAR 0 8
42162: NOT
42163: IFFALSE 42167
// exit ;
42165: GO 42625
// if in_unit then
42167: LD_VAR 0 11
42171: IFFALSE 42195
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42173: LD_ADDR_VAR 0 10
42177: PUSH
42178: LD_VAR 0 8
42182: PPUSH
42183: LD_VAR 0 11
42187: PPUSH
42188: CALL_OW 74
42192: ST_TO_ADDR
42193: GO 42215
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42195: LD_ADDR_VAR 0 10
42199: PUSH
42200: LD_VAR 0 8
42204: PPUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 74
42214: ST_TO_ADDR
// if not enemy then
42215: LD_VAR 0 10
42219: NOT
42220: IFFALSE 42224
// exit ;
42222: GO 42625
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42224: LD_VAR 0 11
42228: PUSH
42229: LD_VAR 0 11
42233: PPUSH
42234: LD_VAR 0 10
42238: PPUSH
42239: CALL_OW 296
42243: PUSH
42244: LD_INT 13
42246: GREATER
42247: AND
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: LD_VAR 0 10
42258: PPUSH
42259: CALL_OW 296
42263: PUSH
42264: LD_INT 12
42266: GREATER
42267: OR
42268: IFFALSE 42272
// exit ;
42270: GO 42625
// missile := [ 1 ] ;
42272: LD_ADDR_VAR 0 14
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42283: LD_VAR 0 9
42287: PPUSH
42288: LD_VAR 0 12
42292: PPUSH
42293: CALL_OW 325
42297: IFFALSE 42326
// missile := Replace ( missile , missile + 1 , 2 ) ;
42299: LD_ADDR_VAR 0 14
42303: PUSH
42304: LD_VAR 0 14
42308: PPUSH
42309: LD_VAR 0 14
42313: PUSH
42314: LD_INT 1
42316: PLUS
42317: PPUSH
42318: LD_INT 2
42320: PPUSH
42321: CALL_OW 1
42325: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42326: LD_VAR 0 9
42330: PPUSH
42331: LD_VAR 0 13
42335: PPUSH
42336: CALL_OW 325
42340: PUSH
42341: LD_VAR 0 10
42345: PPUSH
42346: CALL_OW 255
42350: PPUSH
42351: LD_VAR 0 13
42355: PPUSH
42356: CALL_OW 325
42360: NOT
42361: AND
42362: IFFALSE 42391
// missile := Replace ( missile , missile + 1 , 3 ) ;
42364: LD_ADDR_VAR 0 14
42368: PUSH
42369: LD_VAR 0 14
42373: PPUSH
42374: LD_VAR 0 14
42378: PUSH
42379: LD_INT 1
42381: PLUS
42382: PPUSH
42383: LD_INT 3
42385: PPUSH
42386: CALL_OW 1
42390: ST_TO_ADDR
// if missile < 2 then
42391: LD_VAR 0 14
42395: PUSH
42396: LD_INT 2
42398: LESS
42399: IFFALSE 42403
// exit ;
42401: GO 42625
// x := GetX ( enemy ) ;
42403: LD_ADDR_VAR 0 4
42407: PUSH
42408: LD_VAR 0 10
42412: PPUSH
42413: CALL_OW 250
42417: ST_TO_ADDR
// y := GetY ( enemy ) ;
42418: LD_ADDR_VAR 0 5
42422: PUSH
42423: LD_VAR 0 10
42427: PPUSH
42428: CALL_OW 251
42432: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42433: LD_ADDR_VAR 0 6
42437: PUSH
42438: LD_VAR 0 4
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PPUSH
42447: LD_INT 1
42449: PPUSH
42450: CALL_OW 12
42454: PLUS
42455: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42456: LD_ADDR_VAR 0 7
42460: PUSH
42461: LD_VAR 0 5
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PPUSH
42470: LD_INT 1
42472: PPUSH
42473: CALL_OW 12
42477: PLUS
42478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42479: LD_VAR 0 6
42483: PPUSH
42484: LD_VAR 0 7
42488: PPUSH
42489: CALL_OW 488
42493: NOT
42494: IFFALSE 42516
// begin _x := x ;
42496: LD_ADDR_VAR 0 6
42500: PUSH
42501: LD_VAR 0 4
42505: ST_TO_ADDR
// _y := y ;
42506: LD_ADDR_VAR 0 7
42510: PUSH
42511: LD_VAR 0 5
42515: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_INT 1
42523: PPUSH
42524: LD_VAR 0 14
42528: PPUSH
42529: CALL_OW 12
42533: ST_TO_ADDR
// case i of 1 :
42534: LD_VAR 0 3
42538: PUSH
42539: LD_INT 1
42541: DOUBLE
42542: EQUAL
42543: IFTRUE 42547
42545: GO 42564
42547: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42548: LD_VAR 0 1
42552: PPUSH
42553: LD_VAR 0 10
42557: PPUSH
42558: CALL_OW 115
42562: GO 42625
42564: LD_INT 2
42566: DOUBLE
42567: EQUAL
42568: IFTRUE 42572
42570: GO 42594
42572: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42573: LD_VAR 0 1
42577: PPUSH
42578: LD_VAR 0 6
42582: PPUSH
42583: LD_VAR 0 7
42587: PPUSH
42588: CALL_OW 153
42592: GO 42625
42594: LD_INT 3
42596: DOUBLE
42597: EQUAL
42598: IFTRUE 42602
42600: GO 42624
42602: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42603: LD_VAR 0 1
42607: PPUSH
42608: LD_VAR 0 6
42612: PPUSH
42613: LD_VAR 0 7
42617: PPUSH
42618: CALL_OW 154
42622: GO 42625
42624: POP
// end ;
42625: LD_VAR 0 2
42629: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42630: LD_INT 0
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
// if not unit or not building then
42638: LD_VAR 0 1
42642: NOT
42643: PUSH
42644: LD_VAR 0 2
42648: NOT
42649: OR
42650: IFFALSE 42654
// exit ;
42652: GO 42812
// x := GetX ( building ) ;
42654: LD_ADDR_VAR 0 5
42658: PUSH
42659: LD_VAR 0 2
42663: PPUSH
42664: CALL_OW 250
42668: ST_TO_ADDR
// y := GetY ( building ) ;
42669: LD_ADDR_VAR 0 6
42673: PUSH
42674: LD_VAR 0 2
42678: PPUSH
42679: CALL_OW 251
42683: ST_TO_ADDR
// for i = 0 to 5 do
42684: LD_ADDR_VAR 0 4
42688: PUSH
42689: DOUBLE
42690: LD_INT 0
42692: DEC
42693: ST_TO_ADDR
42694: LD_INT 5
42696: PUSH
42697: FOR_TO
42698: IFFALSE 42810
// begin _x := ShiftX ( x , i , 3 ) ;
42700: LD_ADDR_VAR 0 7
42704: PUSH
42705: LD_VAR 0 5
42709: PPUSH
42710: LD_VAR 0 4
42714: PPUSH
42715: LD_INT 3
42717: PPUSH
42718: CALL_OW 272
42722: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42723: LD_ADDR_VAR 0 8
42727: PUSH
42728: LD_VAR 0 6
42732: PPUSH
42733: LD_VAR 0 4
42737: PPUSH
42738: LD_INT 3
42740: PPUSH
42741: CALL_OW 273
42745: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42746: LD_VAR 0 7
42750: PPUSH
42751: LD_VAR 0 8
42755: PPUSH
42756: CALL_OW 488
42760: NOT
42761: IFFALSE 42765
// continue ;
42763: GO 42697
// if HexInfo ( _x , _y ) = 0 then
42765: LD_VAR 0 7
42769: PPUSH
42770: LD_VAR 0 8
42774: PPUSH
42775: CALL_OW 428
42779: PUSH
42780: LD_INT 0
42782: EQUAL
42783: IFFALSE 42808
// begin ComMoveXY ( unit , _x , _y ) ;
42785: LD_VAR 0 1
42789: PPUSH
42790: LD_VAR 0 7
42794: PPUSH
42795: LD_VAR 0 8
42799: PPUSH
42800: CALL_OW 111
// exit ;
42804: POP
42805: POP
42806: GO 42812
// end ; end ;
42808: GO 42697
42810: POP
42811: POP
// end ;
42812: LD_VAR 0 3
42816: RET
// export function ScanBase ( side , base_area ) ; begin
42817: LD_INT 0
42819: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42820: LD_ADDR_VAR 0 3
42824: PUSH
42825: LD_VAR 0 2
42829: PPUSH
42830: LD_INT 81
42832: PUSH
42833: LD_VAR 0 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PPUSH
42842: CALL_OW 70
42846: ST_TO_ADDR
// end ;
42847: LD_VAR 0 3
42851: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42852: LD_INT 0
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
// result := false ;
42858: LD_ADDR_VAR 0 2
42862: PUSH
42863: LD_INT 0
42865: ST_TO_ADDR
// side := GetSide ( unit ) ;
42866: LD_ADDR_VAR 0 3
42870: PUSH
42871: LD_VAR 0 1
42875: PPUSH
42876: CALL_OW 255
42880: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42881: LD_ADDR_VAR 0 4
42885: PUSH
42886: LD_VAR 0 1
42890: PPUSH
42891: CALL_OW 248
42895: ST_TO_ADDR
// case nat of 1 :
42896: LD_VAR 0 4
42900: PUSH
42901: LD_INT 1
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42909
42907: GO 42920
42909: POP
// tech := tech_lassight ; 2 :
42910: LD_ADDR_VAR 0 5
42914: PUSH
42915: LD_INT 12
42917: ST_TO_ADDR
42918: GO 42959
42920: LD_INT 2
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42939
42928: POP
// tech := tech_mortar ; 3 :
42929: LD_ADDR_VAR 0 5
42933: PUSH
42934: LD_INT 41
42936: ST_TO_ADDR
42937: GO 42959
42939: LD_INT 3
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 42958
42947: POP
// tech := tech_bazooka ; end ;
42948: LD_ADDR_VAR 0 5
42952: PUSH
42953: LD_INT 44
42955: ST_TO_ADDR
42956: GO 42959
42958: POP
// if Researched ( side , tech ) then
42959: LD_VAR 0 3
42963: PPUSH
42964: LD_VAR 0 5
42968: PPUSH
42969: CALL_OW 325
42973: IFFALSE 43000
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42975: LD_ADDR_VAR 0 2
42979: PUSH
42980: LD_INT 5
42982: PUSH
42983: LD_INT 8
42985: PUSH
42986: LD_INT 9
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: PUSH
42994: LD_VAR 0 4
42998: ARRAY
42999: ST_TO_ADDR
// end ;
43000: LD_VAR 0 2
43004: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43005: LD_INT 0
43007: PPUSH
43008: PPUSH
43009: PPUSH
// if not mines then
43010: LD_VAR 0 2
43014: NOT
43015: IFFALSE 43019
// exit ;
43017: GO 43163
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43019: LD_ADDR_VAR 0 5
43023: PUSH
43024: LD_INT 81
43026: PUSH
43027: LD_VAR 0 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: LD_INT 21
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PPUSH
43057: CALL_OW 69
43061: ST_TO_ADDR
// for i in mines do
43062: LD_ADDR_VAR 0 4
43066: PUSH
43067: LD_VAR 0 2
43071: PUSH
43072: FOR_IN
43073: IFFALSE 43161
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43075: LD_VAR 0 4
43079: PUSH
43080: LD_INT 1
43082: ARRAY
43083: PPUSH
43084: LD_VAR 0 4
43088: PUSH
43089: LD_INT 2
43091: ARRAY
43092: PPUSH
43093: CALL_OW 458
43097: NOT
43098: IFFALSE 43102
// continue ;
43100: GO 43072
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43102: LD_VAR 0 4
43106: PUSH
43107: LD_INT 1
43109: ARRAY
43110: PPUSH
43111: LD_VAR 0 4
43115: PUSH
43116: LD_INT 2
43118: ARRAY
43119: PPUSH
43120: CALL_OW 428
43124: PUSH
43125: LD_VAR 0 5
43129: IN
43130: IFFALSE 43159
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43132: LD_VAR 0 4
43136: PUSH
43137: LD_INT 1
43139: ARRAY
43140: PPUSH
43141: LD_VAR 0 4
43145: PUSH
43146: LD_INT 2
43148: ARRAY
43149: PPUSH
43150: LD_VAR 0 1
43154: PPUSH
43155: CALL_OW 456
// end ;
43159: GO 43072
43161: POP
43162: POP
// end ;
43163: LD_VAR 0 3
43167: RET
// export function Count ( array ) ; begin
43168: LD_INT 0
43170: PPUSH
// result := array + 0 ;
43171: LD_ADDR_VAR 0 2
43175: PUSH
43176: LD_VAR 0 1
43180: PUSH
43181: LD_INT 0
43183: PLUS
43184: ST_TO_ADDR
// end ;
43185: LD_VAR 0 2
43189: RET
// export function IsEmpty ( building ) ; begin
43190: LD_INT 0
43192: PPUSH
// if not building then
43193: LD_VAR 0 1
43197: NOT
43198: IFFALSE 43202
// exit ;
43200: GO 43245
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43202: LD_ADDR_VAR 0 2
43206: PUSH
43207: LD_VAR 0 1
43211: PUSH
43212: LD_INT 22
43214: PUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL_OW 255
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 58
43231: PUSH
43232: EMPTY
43233: LIST
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PPUSH
43239: CALL_OW 69
43243: IN
43244: ST_TO_ADDR
// end ;
43245: LD_VAR 0 2
43249: RET
// export function IsNotFull ( building ) ; var places ; begin
43250: LD_INT 0
43252: PPUSH
43253: PPUSH
// if not building then
43254: LD_VAR 0 1
43258: NOT
43259: IFFALSE 43263
// exit ;
43261: GO 43291
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43263: LD_ADDR_VAR 0 2
43267: PUSH
43268: LD_VAR 0 1
43272: PPUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 62
43278: PUSH
43279: EMPTY
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PPUSH
43286: CALL_OW 72
43290: ST_TO_ADDR
// end ;
43291: LD_VAR 0 2
43295: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43296: LD_INT 0
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
// tmp := [ ] ;
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: EMPTY
43308: ST_TO_ADDR
// list := [ ] ;
43309: LD_ADDR_VAR 0 5
43313: PUSH
43314: EMPTY
43315: ST_TO_ADDR
// for i = 16 to 25 do
43316: LD_ADDR_VAR 0 4
43320: PUSH
43321: DOUBLE
43322: LD_INT 16
43324: DEC
43325: ST_TO_ADDR
43326: LD_INT 25
43328: PUSH
43329: FOR_TO
43330: IFFALSE 43403
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43332: LD_ADDR_VAR 0 3
43336: PUSH
43337: LD_VAR 0 3
43341: PUSH
43342: LD_INT 22
43344: PUSH
43345: LD_VAR 0 1
43349: PPUSH
43350: CALL_OW 255
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 91
43361: PUSH
43362: LD_VAR 0 1
43366: PUSH
43367: LD_INT 6
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 30
43377: PUSH
43378: LD_VAR 0 4
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: PUSH
43392: EMPTY
43393: LIST
43394: PPUSH
43395: CALL_OW 69
43399: ADD
43400: ST_TO_ADDR
43401: GO 43329
43403: POP
43404: POP
// for i = 1 to tmp do
43405: LD_ADDR_VAR 0 4
43409: PUSH
43410: DOUBLE
43411: LD_INT 1
43413: DEC
43414: ST_TO_ADDR
43415: LD_VAR 0 3
43419: PUSH
43420: FOR_TO
43421: IFFALSE 43509
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43423: LD_ADDR_VAR 0 5
43427: PUSH
43428: LD_VAR 0 5
43432: PUSH
43433: LD_VAR 0 3
43437: PUSH
43438: LD_VAR 0 4
43442: ARRAY
43443: PPUSH
43444: CALL_OW 266
43448: PUSH
43449: LD_VAR 0 3
43453: PUSH
43454: LD_VAR 0 4
43458: ARRAY
43459: PPUSH
43460: CALL_OW 250
43464: PUSH
43465: LD_VAR 0 3
43469: PUSH
43470: LD_VAR 0 4
43474: ARRAY
43475: PPUSH
43476: CALL_OW 251
43480: PUSH
43481: LD_VAR 0 3
43485: PUSH
43486: LD_VAR 0 4
43490: ARRAY
43491: PPUSH
43492: CALL_OW 254
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: ADD
43506: ST_TO_ADDR
43507: GO 43420
43509: POP
43510: POP
// result := list ;
43511: LD_ADDR_VAR 0 2
43515: PUSH
43516: LD_VAR 0 5
43520: ST_TO_ADDR
// end ;
43521: LD_VAR 0 2
43525: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43526: LD_INT 0
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
// if not factory then
43535: LD_VAR 0 1
43539: NOT
43540: IFFALSE 43544
// exit ;
43542: GO 44137
// if control = control_apeman then
43544: LD_VAR 0 4
43548: PUSH
43549: LD_INT 5
43551: EQUAL
43552: IFFALSE 43661
// begin tmp := UnitsInside ( factory ) ;
43554: LD_ADDR_VAR 0 8
43558: PUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: CALL_OW 313
43568: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43569: LD_VAR 0 8
43573: PPUSH
43574: LD_INT 25
43576: PUSH
43577: LD_INT 12
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PPUSH
43584: CALL_OW 72
43588: NOT
43589: IFFALSE 43599
// control := control_manual ;
43591: LD_ADDR_VAR 0 4
43595: PUSH
43596: LD_INT 1
43598: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43599: LD_ADDR_VAR 0 8
43603: PUSH
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL 43296 0 1
43613: ST_TO_ADDR
// if tmp then
43614: LD_VAR 0 8
43618: IFFALSE 43661
// begin for i in tmp do
43620: LD_ADDR_VAR 0 7
43624: PUSH
43625: LD_VAR 0 8
43629: PUSH
43630: FOR_IN
43631: IFFALSE 43659
// if i [ 1 ] = b_ext_radio then
43633: LD_VAR 0 7
43637: PUSH
43638: LD_INT 1
43640: ARRAY
43641: PUSH
43642: LD_INT 22
43644: EQUAL
43645: IFFALSE 43657
// begin control := control_remote ;
43647: LD_ADDR_VAR 0 4
43651: PUSH
43652: LD_INT 2
43654: ST_TO_ADDR
// break ;
43655: GO 43659
// end ;
43657: GO 43630
43659: POP
43660: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43661: LD_VAR 0 1
43665: PPUSH
43666: LD_VAR 0 2
43670: PPUSH
43671: LD_VAR 0 3
43675: PPUSH
43676: LD_VAR 0 4
43680: PPUSH
43681: LD_VAR 0 5
43685: PPUSH
43686: CALL_OW 448
43690: IFFALSE 43725
// begin result := [ chassis , engine , control , weapon ] ;
43692: LD_ADDR_VAR 0 6
43696: PUSH
43697: LD_VAR 0 2
43701: PUSH
43702: LD_VAR 0 3
43706: PUSH
43707: LD_VAR 0 4
43711: PUSH
43712: LD_VAR 0 5
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// exit ;
43723: GO 44137
// end ; _chassis := AvailableChassisList ( factory ) ;
43725: LD_ADDR_VAR 0 9
43729: PUSH
43730: LD_VAR 0 1
43734: PPUSH
43735: CALL_OW 475
43739: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43740: LD_ADDR_VAR 0 11
43744: PUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 476
43754: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43755: LD_ADDR_VAR 0 12
43759: PUSH
43760: LD_VAR 0 1
43764: PPUSH
43765: CALL_OW 477
43769: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43770: LD_ADDR_VAR 0 10
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: CALL_OW 478
43784: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43785: LD_VAR 0 9
43789: NOT
43790: PUSH
43791: LD_VAR 0 11
43795: NOT
43796: OR
43797: PUSH
43798: LD_VAR 0 12
43802: NOT
43803: OR
43804: PUSH
43805: LD_VAR 0 10
43809: NOT
43810: OR
43811: IFFALSE 43846
// begin result := [ chassis , engine , control , weapon ] ;
43813: LD_ADDR_VAR 0 6
43817: PUSH
43818: LD_VAR 0 2
43822: PUSH
43823: LD_VAR 0 3
43827: PUSH
43828: LD_VAR 0 4
43832: PUSH
43833: LD_VAR 0 5
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: ST_TO_ADDR
// exit ;
43844: GO 44137
// end ; if not chassis in _chassis then
43846: LD_VAR 0 2
43850: PUSH
43851: LD_VAR 0 9
43855: IN
43856: NOT
43857: IFFALSE 43883
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43859: LD_ADDR_VAR 0 2
43863: PUSH
43864: LD_VAR 0 9
43868: PUSH
43869: LD_INT 1
43871: PPUSH
43872: LD_VAR 0 9
43876: PPUSH
43877: CALL_OW 12
43881: ARRAY
43882: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43883: LD_VAR 0 2
43887: PPUSH
43888: LD_VAR 0 3
43892: PPUSH
43893: CALL 44142 0 2
43897: NOT
43898: IFFALSE 43957
// repeat engine := _engine [ 1 ] ;
43900: LD_ADDR_VAR 0 3
43904: PUSH
43905: LD_VAR 0 11
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43914: LD_ADDR_VAR 0 11
43918: PUSH
43919: LD_VAR 0 11
43923: PPUSH
43924: LD_INT 1
43926: PPUSH
43927: CALL_OW 3
43931: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43932: LD_VAR 0 2
43936: PPUSH
43937: LD_VAR 0 3
43941: PPUSH
43942: CALL 44142 0 2
43946: PUSH
43947: LD_VAR 0 11
43951: PUSH
43952: EMPTY
43953: EQUAL
43954: OR
43955: IFFALSE 43900
// if not control in _control then
43957: LD_VAR 0 4
43961: PUSH
43962: LD_VAR 0 12
43966: IN
43967: NOT
43968: IFFALSE 43994
// control := _control [ rand ( 1 , _control ) ] ;
43970: LD_ADDR_VAR 0 4
43974: PUSH
43975: LD_VAR 0 12
43979: PUSH
43980: LD_INT 1
43982: PPUSH
43983: LD_VAR 0 12
43987: PPUSH
43988: CALL_OW 12
43992: ARRAY
43993: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43994: LD_VAR 0 2
43998: PPUSH
43999: LD_VAR 0 5
44003: PPUSH
44004: CALL 44362 0 2
44008: NOT
44009: IFFALSE 44068
// repeat weapon := _weapon [ 1 ] ;
44011: LD_ADDR_VAR 0 5
44015: PUSH
44016: LD_VAR 0 10
44020: PUSH
44021: LD_INT 1
44023: ARRAY
44024: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44025: LD_ADDR_VAR 0 10
44029: PUSH
44030: LD_VAR 0 10
44034: PPUSH
44035: LD_INT 1
44037: PPUSH
44038: CALL_OW 3
44042: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44043: LD_VAR 0 2
44047: PPUSH
44048: LD_VAR 0 5
44052: PPUSH
44053: CALL 44362 0 2
44057: PUSH
44058: LD_VAR 0 10
44062: PUSH
44063: EMPTY
44064: EQUAL
44065: OR
44066: IFFALSE 44011
// result := [ ] ;
44068: LD_ADDR_VAR 0 6
44072: PUSH
44073: EMPTY
44074: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44075: LD_VAR 0 1
44079: PPUSH
44080: LD_VAR 0 2
44084: PPUSH
44085: LD_VAR 0 3
44089: PPUSH
44090: LD_VAR 0 4
44094: PPUSH
44095: LD_VAR 0 5
44099: PPUSH
44100: CALL_OW 448
44104: IFFALSE 44137
// result := [ chassis , engine , control , weapon ] ;
44106: LD_ADDR_VAR 0 6
44110: PUSH
44111: LD_VAR 0 2
44115: PUSH
44116: LD_VAR 0 3
44120: PUSH
44121: LD_VAR 0 4
44125: PUSH
44126: LD_VAR 0 5
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: ST_TO_ADDR
// end ;
44137: LD_VAR 0 6
44141: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44142: LD_INT 0
44144: PPUSH
// if not chassis or not engine then
44145: LD_VAR 0 1
44149: NOT
44150: PUSH
44151: LD_VAR 0 2
44155: NOT
44156: OR
44157: IFFALSE 44161
// exit ;
44159: GO 44357
// case engine of engine_solar :
44161: LD_VAR 0 2
44165: PUSH
44166: LD_INT 2
44168: DOUBLE
44169: EQUAL
44170: IFTRUE 44174
44172: GO 44212
44174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44175: LD_ADDR_VAR 0 3
44179: PUSH
44180: LD_INT 11
44182: PUSH
44183: LD_INT 12
44185: PUSH
44186: LD_INT 13
44188: PUSH
44189: LD_INT 14
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
44210: GO 44341
44212: LD_INT 1
44214: DOUBLE
44215: EQUAL
44216: IFTRUE 44220
44218: GO 44282
44220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44221: LD_ADDR_VAR 0 3
44225: PUSH
44226: LD_INT 11
44228: PUSH
44229: LD_INT 12
44231: PUSH
44232: LD_INT 13
44234: PUSH
44235: LD_INT 14
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 3
44246: PUSH
44247: LD_INT 4
44249: PUSH
44250: LD_INT 5
44252: PUSH
44253: LD_INT 21
44255: PUSH
44256: LD_INT 23
44258: PUSH
44259: LD_INT 22
44261: PUSH
44262: LD_INT 24
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: ST_TO_ADDR
44280: GO 44341
44282: LD_INT 3
44284: DOUBLE
44285: EQUAL
44286: IFTRUE 44290
44288: GO 44340
44290: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44291: LD_ADDR_VAR 0 3
44295: PUSH
44296: LD_INT 13
44298: PUSH
44299: LD_INT 14
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 4
44310: PUSH
44311: LD_INT 5
44313: PUSH
44314: LD_INT 21
44316: PUSH
44317: LD_INT 22
44319: PUSH
44320: LD_INT 23
44322: PUSH
44323: LD_INT 24
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: ST_TO_ADDR
44338: GO 44341
44340: POP
// result := ( chassis in result ) ;
44341: LD_ADDR_VAR 0 3
44345: PUSH
44346: LD_VAR 0 1
44350: PUSH
44351: LD_VAR 0 3
44355: IN
44356: ST_TO_ADDR
// end ;
44357: LD_VAR 0 3
44361: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44362: LD_INT 0
44364: PPUSH
// if not chassis or not weapon then
44365: LD_VAR 0 1
44369: NOT
44370: PUSH
44371: LD_VAR 0 2
44375: NOT
44376: OR
44377: IFFALSE 44381
// exit ;
44379: GO 45441
// case weapon of us_machine_gun :
44381: LD_VAR 0 2
44385: PUSH
44386: LD_INT 2
44388: DOUBLE
44389: EQUAL
44390: IFTRUE 44394
44392: GO 44424
44394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44395: LD_ADDR_VAR 0 3
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: LD_INT 4
44411: PUSH
44412: LD_INT 5
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
44422: GO 45425
44424: LD_INT 3
44426: DOUBLE
44427: EQUAL
44428: IFTRUE 44432
44430: GO 44462
44432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44433: LD_ADDR_VAR 0 3
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: LD_INT 4
44449: PUSH
44450: LD_INT 5
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: ST_TO_ADDR
44460: GO 45425
44462: LD_INT 11
44464: DOUBLE
44465: EQUAL
44466: IFTRUE 44470
44468: GO 44500
44470: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: LD_INT 4
44487: PUSH
44488: LD_INT 5
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: ST_TO_ADDR
44498: GO 45425
44500: LD_INT 4
44502: DOUBLE
44503: EQUAL
44504: IFTRUE 44508
44506: GO 44534
44508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44509: LD_ADDR_VAR 0 3
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: LD_INT 4
44522: PUSH
44523: LD_INT 5
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
44532: GO 45425
44534: LD_INT 5
44536: DOUBLE
44537: EQUAL
44538: IFTRUE 44542
44540: GO 44568
44542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44543: LD_ADDR_VAR 0 3
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: LD_INT 4
44556: PUSH
44557: LD_INT 5
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: ST_TO_ADDR
44566: GO 45425
44568: LD_INT 9
44570: DOUBLE
44571: EQUAL
44572: IFTRUE 44576
44574: GO 44602
44576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44577: LD_ADDR_VAR 0 3
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: LD_INT 4
44590: PUSH
44591: LD_INT 5
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: ST_TO_ADDR
44600: GO 45425
44602: LD_INT 7
44604: DOUBLE
44605: EQUAL
44606: IFTRUE 44610
44608: GO 44636
44610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44611: LD_ADDR_VAR 0 3
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: LD_INT 4
44624: PUSH
44625: LD_INT 5
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: ST_TO_ADDR
44634: GO 45425
44636: LD_INT 12
44638: DOUBLE
44639: EQUAL
44640: IFTRUE 44644
44642: GO 44670
44644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44645: LD_ADDR_VAR 0 3
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 3
44655: PUSH
44656: LD_INT 4
44658: PUSH
44659: LD_INT 5
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: ST_TO_ADDR
44668: GO 45425
44670: LD_INT 13
44672: DOUBLE
44673: EQUAL
44674: IFTRUE 44678
44676: GO 44704
44678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44679: LD_ADDR_VAR 0 3
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 3
44689: PUSH
44690: LD_INT 4
44692: PUSH
44693: LD_INT 5
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: ST_TO_ADDR
44702: GO 45425
44704: LD_INT 14
44706: DOUBLE
44707: EQUAL
44708: IFTRUE 44712
44710: GO 44730
44712: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44713: LD_ADDR_VAR 0 3
44717: PUSH
44718: LD_INT 4
44720: PUSH
44721: LD_INT 5
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: ST_TO_ADDR
44728: GO 45425
44730: LD_INT 6
44732: DOUBLE
44733: EQUAL
44734: IFTRUE 44738
44736: GO 44756
44738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44739: LD_ADDR_VAR 0 3
44743: PUSH
44744: LD_INT 4
44746: PUSH
44747: LD_INT 5
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: ST_TO_ADDR
44754: GO 45425
44756: LD_INT 10
44758: DOUBLE
44759: EQUAL
44760: IFTRUE 44764
44762: GO 44782
44764: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44765: LD_ADDR_VAR 0 3
44769: PUSH
44770: LD_INT 4
44772: PUSH
44773: LD_INT 5
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: ST_TO_ADDR
44780: GO 45425
44782: LD_INT 22
44784: DOUBLE
44785: EQUAL
44786: IFTRUE 44790
44788: GO 44816
44790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44791: LD_ADDR_VAR 0 3
44795: PUSH
44796: LD_INT 11
44798: PUSH
44799: LD_INT 12
44801: PUSH
44802: LD_INT 13
44804: PUSH
44805: LD_INT 14
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: ST_TO_ADDR
44814: GO 45425
44816: LD_INT 23
44818: DOUBLE
44819: EQUAL
44820: IFTRUE 44824
44822: GO 44850
44824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44825: LD_ADDR_VAR 0 3
44829: PUSH
44830: LD_INT 11
44832: PUSH
44833: LD_INT 12
44835: PUSH
44836: LD_INT 13
44838: PUSH
44839: LD_INT 14
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: ST_TO_ADDR
44848: GO 45425
44850: LD_INT 24
44852: DOUBLE
44853: EQUAL
44854: IFTRUE 44858
44856: GO 44884
44858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44859: LD_ADDR_VAR 0 3
44863: PUSH
44864: LD_INT 11
44866: PUSH
44867: LD_INT 12
44869: PUSH
44870: LD_INT 13
44872: PUSH
44873: LD_INT 14
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: ST_TO_ADDR
44882: GO 45425
44884: LD_INT 30
44886: DOUBLE
44887: EQUAL
44888: IFTRUE 44892
44890: GO 44918
44892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44893: LD_ADDR_VAR 0 3
44897: PUSH
44898: LD_INT 11
44900: PUSH
44901: LD_INT 12
44903: PUSH
44904: LD_INT 13
44906: PUSH
44907: LD_INT 14
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
44916: GO 45425
44918: LD_INT 25
44920: DOUBLE
44921: EQUAL
44922: IFTRUE 44926
44924: GO 44944
44926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44927: LD_ADDR_VAR 0 3
44931: PUSH
44932: LD_INT 13
44934: PUSH
44935: LD_INT 14
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: ST_TO_ADDR
44942: GO 45425
44944: LD_INT 27
44946: DOUBLE
44947: EQUAL
44948: IFTRUE 44952
44950: GO 44970
44952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44953: LD_ADDR_VAR 0 3
44957: PUSH
44958: LD_INT 13
44960: PUSH
44961: LD_INT 14
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: ST_TO_ADDR
44968: GO 45425
44970: LD_INT 92
44972: DOUBLE
44973: EQUAL
44974: IFTRUE 44978
44976: GO 45004
44978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44979: LD_ADDR_VAR 0 3
44983: PUSH
44984: LD_INT 11
44986: PUSH
44987: LD_INT 12
44989: PUSH
44990: LD_INT 13
44992: PUSH
44993: LD_INT 14
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: ST_TO_ADDR
45002: GO 45425
45004: LD_INT 28
45006: DOUBLE
45007: EQUAL
45008: IFTRUE 45012
45010: GO 45030
45012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45013: LD_ADDR_VAR 0 3
45017: PUSH
45018: LD_INT 13
45020: PUSH
45021: LD_INT 14
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: ST_TO_ADDR
45028: GO 45425
45030: LD_INT 29
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45038
45036: GO 45056
45038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45039: LD_ADDR_VAR 0 3
45043: PUSH
45044: LD_INT 13
45046: PUSH
45047: LD_INT 14
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: ST_TO_ADDR
45054: GO 45425
45056: LD_INT 31
45058: DOUBLE
45059: EQUAL
45060: IFTRUE 45064
45062: GO 45082
45064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45065: LD_ADDR_VAR 0 3
45069: PUSH
45070: LD_INT 13
45072: PUSH
45073: LD_INT 14
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: ST_TO_ADDR
45080: GO 45425
45082: LD_INT 26
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45090
45088: GO 45108
45090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_INT 13
45098: PUSH
45099: LD_INT 14
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: ST_TO_ADDR
45106: GO 45425
45108: LD_INT 42
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45116
45114: GO 45142
45116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45117: LD_ADDR_VAR 0 3
45121: PUSH
45122: LD_INT 21
45124: PUSH
45125: LD_INT 22
45127: PUSH
45128: LD_INT 23
45130: PUSH
45131: LD_INT 24
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
45140: GO 45425
45142: LD_INT 43
45144: DOUBLE
45145: EQUAL
45146: IFTRUE 45150
45148: GO 45176
45150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45151: LD_ADDR_VAR 0 3
45155: PUSH
45156: LD_INT 21
45158: PUSH
45159: LD_INT 22
45161: PUSH
45162: LD_INT 23
45164: PUSH
45165: LD_INT 24
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
45174: GO 45425
45176: LD_INT 44
45178: DOUBLE
45179: EQUAL
45180: IFTRUE 45184
45182: GO 45210
45184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45185: LD_ADDR_VAR 0 3
45189: PUSH
45190: LD_INT 21
45192: PUSH
45193: LD_INT 22
45195: PUSH
45196: LD_INT 23
45198: PUSH
45199: LD_INT 24
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
45208: GO 45425
45210: LD_INT 45
45212: DOUBLE
45213: EQUAL
45214: IFTRUE 45218
45216: GO 45244
45218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45219: LD_ADDR_VAR 0 3
45223: PUSH
45224: LD_INT 21
45226: PUSH
45227: LD_INT 22
45229: PUSH
45230: LD_INT 23
45232: PUSH
45233: LD_INT 24
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
45242: GO 45425
45244: LD_INT 49
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45278
45252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_INT 21
45260: PUSH
45261: LD_INT 22
45263: PUSH
45264: LD_INT 23
45266: PUSH
45267: LD_INT 24
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
45276: GO 45425
45278: LD_INT 51
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45312
45286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45287: LD_ADDR_VAR 0 3
45291: PUSH
45292: LD_INT 21
45294: PUSH
45295: LD_INT 22
45297: PUSH
45298: LD_INT 23
45300: PUSH
45301: LD_INT 24
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
45310: GO 45425
45312: LD_INT 52
45314: DOUBLE
45315: EQUAL
45316: IFTRUE 45320
45318: GO 45346
45320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45321: LD_ADDR_VAR 0 3
45325: PUSH
45326: LD_INT 21
45328: PUSH
45329: LD_INT 22
45331: PUSH
45332: LD_INT 23
45334: PUSH
45335: LD_INT 24
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
45344: GO 45425
45346: LD_INT 53
45348: DOUBLE
45349: EQUAL
45350: IFTRUE 45354
45352: GO 45372
45354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45355: LD_ADDR_VAR 0 3
45359: PUSH
45360: LD_INT 23
45362: PUSH
45363: LD_INT 24
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: ST_TO_ADDR
45370: GO 45425
45372: LD_INT 46
45374: DOUBLE
45375: EQUAL
45376: IFTRUE 45380
45378: GO 45398
45380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45381: LD_ADDR_VAR 0 3
45385: PUSH
45386: LD_INT 23
45388: PUSH
45389: LD_INT 24
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: ST_TO_ADDR
45396: GO 45425
45398: LD_INT 47
45400: DOUBLE
45401: EQUAL
45402: IFTRUE 45406
45404: GO 45424
45406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45407: LD_ADDR_VAR 0 3
45411: PUSH
45412: LD_INT 23
45414: PUSH
45415: LD_INT 24
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: ST_TO_ADDR
45422: GO 45425
45424: POP
// result := ( chassis in result ) ;
45425: LD_ADDR_VAR 0 3
45429: PUSH
45430: LD_VAR 0 1
45434: PUSH
45435: LD_VAR 0 3
45439: IN
45440: ST_TO_ADDR
// end ;
45441: LD_VAR 0 3
45445: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45446: LD_INT 0
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
// result := array ;
45455: LD_ADDR_VAR 0 5
45459: PUSH
45460: LD_VAR 0 1
45464: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45465: LD_VAR 0 1
45469: NOT
45470: PUSH
45471: LD_VAR 0 2
45475: NOT
45476: OR
45477: PUSH
45478: LD_VAR 0 3
45482: NOT
45483: OR
45484: PUSH
45485: LD_VAR 0 2
45489: PUSH
45490: LD_VAR 0 1
45494: GREATER
45495: OR
45496: PUSH
45497: LD_VAR 0 3
45501: PUSH
45502: LD_VAR 0 1
45506: GREATER
45507: OR
45508: IFFALSE 45512
// exit ;
45510: GO 45808
// if direction then
45512: LD_VAR 0 4
45516: IFFALSE 45580
// begin d := 1 ;
45518: LD_ADDR_VAR 0 9
45522: PUSH
45523: LD_INT 1
45525: ST_TO_ADDR
// if i_from > i_to then
45526: LD_VAR 0 2
45530: PUSH
45531: LD_VAR 0 3
45535: GREATER
45536: IFFALSE 45562
// length := ( array - i_from ) + i_to else
45538: LD_ADDR_VAR 0 11
45542: PUSH
45543: LD_VAR 0 1
45547: PUSH
45548: LD_VAR 0 2
45552: MINUS
45553: PUSH
45554: LD_VAR 0 3
45558: PLUS
45559: ST_TO_ADDR
45560: GO 45578
// length := i_to - i_from ;
45562: LD_ADDR_VAR 0 11
45566: PUSH
45567: LD_VAR 0 3
45571: PUSH
45572: LD_VAR 0 2
45576: MINUS
45577: ST_TO_ADDR
// end else
45578: GO 45641
// begin d := - 1 ;
45580: LD_ADDR_VAR 0 9
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: ST_TO_ADDR
// if i_from > i_to then
45589: LD_VAR 0 2
45593: PUSH
45594: LD_VAR 0 3
45598: GREATER
45599: IFFALSE 45619
// length := i_from - i_to else
45601: LD_ADDR_VAR 0 11
45605: PUSH
45606: LD_VAR 0 2
45610: PUSH
45611: LD_VAR 0 3
45615: MINUS
45616: ST_TO_ADDR
45617: GO 45641
// length := ( array - i_to ) + i_from ;
45619: LD_ADDR_VAR 0 11
45623: PUSH
45624: LD_VAR 0 1
45628: PUSH
45629: LD_VAR 0 3
45633: MINUS
45634: PUSH
45635: LD_VAR 0 2
45639: PLUS
45640: ST_TO_ADDR
// end ; if not length then
45641: LD_VAR 0 11
45645: NOT
45646: IFFALSE 45650
// exit ;
45648: GO 45808
// tmp := array ;
45650: LD_ADDR_VAR 0 10
45654: PUSH
45655: LD_VAR 0 1
45659: ST_TO_ADDR
// for i = 1 to length do
45660: LD_ADDR_VAR 0 6
45664: PUSH
45665: DOUBLE
45666: LD_INT 1
45668: DEC
45669: ST_TO_ADDR
45670: LD_VAR 0 11
45674: PUSH
45675: FOR_TO
45676: IFFALSE 45796
// begin for j = 1 to array do
45678: LD_ADDR_VAR 0 7
45682: PUSH
45683: DOUBLE
45684: LD_INT 1
45686: DEC
45687: ST_TO_ADDR
45688: LD_VAR 0 1
45692: PUSH
45693: FOR_TO
45694: IFFALSE 45782
// begin k := j + d ;
45696: LD_ADDR_VAR 0 8
45700: PUSH
45701: LD_VAR 0 7
45705: PUSH
45706: LD_VAR 0 9
45710: PLUS
45711: ST_TO_ADDR
// if k > array then
45712: LD_VAR 0 8
45716: PUSH
45717: LD_VAR 0 1
45721: GREATER
45722: IFFALSE 45732
// k := 1 ;
45724: LD_ADDR_VAR 0 8
45728: PUSH
45729: LD_INT 1
45731: ST_TO_ADDR
// if not k then
45732: LD_VAR 0 8
45736: NOT
45737: IFFALSE 45749
// k := array ;
45739: LD_ADDR_VAR 0 8
45743: PUSH
45744: LD_VAR 0 1
45748: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45749: LD_ADDR_VAR 0 10
45753: PUSH
45754: LD_VAR 0 10
45758: PPUSH
45759: LD_VAR 0 8
45763: PPUSH
45764: LD_VAR 0 1
45768: PUSH
45769: LD_VAR 0 7
45773: ARRAY
45774: PPUSH
45775: CALL_OW 1
45779: ST_TO_ADDR
// end ;
45780: GO 45693
45782: POP
45783: POP
// array := tmp ;
45784: LD_ADDR_VAR 0 1
45788: PUSH
45789: LD_VAR 0 10
45793: ST_TO_ADDR
// end ;
45794: GO 45675
45796: POP
45797: POP
// result := array ;
45798: LD_ADDR_VAR 0 5
45802: PUSH
45803: LD_VAR 0 1
45807: ST_TO_ADDR
// end ;
45808: LD_VAR 0 5
45812: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45813: LD_INT 0
45815: PPUSH
45816: PPUSH
// result := 0 ;
45817: LD_ADDR_VAR 0 3
45821: PUSH
45822: LD_INT 0
45824: ST_TO_ADDR
// if not array or not value in array then
45825: LD_VAR 0 1
45829: NOT
45830: PUSH
45831: LD_VAR 0 2
45835: PUSH
45836: LD_VAR 0 1
45840: IN
45841: NOT
45842: OR
45843: IFFALSE 45847
// exit ;
45845: GO 45901
// for i = 1 to array do
45847: LD_ADDR_VAR 0 4
45851: PUSH
45852: DOUBLE
45853: LD_INT 1
45855: DEC
45856: ST_TO_ADDR
45857: LD_VAR 0 1
45861: PUSH
45862: FOR_TO
45863: IFFALSE 45899
// if value = array [ i ] then
45865: LD_VAR 0 2
45869: PUSH
45870: LD_VAR 0 1
45874: PUSH
45875: LD_VAR 0 4
45879: ARRAY
45880: EQUAL
45881: IFFALSE 45897
// begin result := i ;
45883: LD_ADDR_VAR 0 3
45887: PUSH
45888: LD_VAR 0 4
45892: ST_TO_ADDR
// exit ;
45893: POP
45894: POP
45895: GO 45901
// end ;
45897: GO 45862
45899: POP
45900: POP
// end ;
45901: LD_VAR 0 3
45905: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45906: LD_INT 0
45908: PPUSH
// vc_chassis := chassis ;
45909: LD_ADDR_OWVAR 37
45913: PUSH
45914: LD_VAR 0 1
45918: ST_TO_ADDR
// vc_engine := engine ;
45919: LD_ADDR_OWVAR 39
45923: PUSH
45924: LD_VAR 0 2
45928: ST_TO_ADDR
// vc_control := control ;
45929: LD_ADDR_OWVAR 38
45933: PUSH
45934: LD_VAR 0 3
45938: ST_TO_ADDR
// vc_weapon := weapon ;
45939: LD_ADDR_OWVAR 40
45943: PUSH
45944: LD_VAR 0 4
45948: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45949: LD_ADDR_OWVAR 41
45953: PUSH
45954: LD_VAR 0 5
45958: ST_TO_ADDR
// end ;
45959: LD_VAR 0 6
45963: RET
// export function WantPlant ( unit ) ; var task ; begin
45964: LD_INT 0
45966: PPUSH
45967: PPUSH
// result := false ;
45968: LD_ADDR_VAR 0 2
45972: PUSH
45973: LD_INT 0
45975: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 437
45990: ST_TO_ADDR
// if task then
45991: LD_VAR 0 3
45995: IFFALSE 46023
// if task [ 1 ] [ 1 ] = p then
45997: LD_VAR 0 3
46001: PUSH
46002: LD_INT 1
46004: ARRAY
46005: PUSH
46006: LD_INT 1
46008: ARRAY
46009: PUSH
46010: LD_STRING p
46012: EQUAL
46013: IFFALSE 46023
// result := true ;
46015: LD_ADDR_VAR 0 2
46019: PUSH
46020: LD_INT 1
46022: ST_TO_ADDR
// end ;
46023: LD_VAR 0 2
46027: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46028: LD_INT 0
46030: PPUSH
46031: PPUSH
46032: PPUSH
46033: PPUSH
// if pos < 1 then
46034: LD_VAR 0 2
46038: PUSH
46039: LD_INT 1
46041: LESS
46042: IFFALSE 46046
// exit ;
46044: GO 46349
// if pos = 1 then
46046: LD_VAR 0 2
46050: PUSH
46051: LD_INT 1
46053: EQUAL
46054: IFFALSE 46087
// result := Replace ( arr , pos [ 1 ] , value ) else
46056: LD_ADDR_VAR 0 4
46060: PUSH
46061: LD_VAR 0 1
46065: PPUSH
46066: LD_VAR 0 2
46070: PUSH
46071: LD_INT 1
46073: ARRAY
46074: PPUSH
46075: LD_VAR 0 3
46079: PPUSH
46080: CALL_OW 1
46084: ST_TO_ADDR
46085: GO 46349
// begin tmp := arr ;
46087: LD_ADDR_VAR 0 6
46091: PUSH
46092: LD_VAR 0 1
46096: ST_TO_ADDR
// s_arr := [ tmp ] ;
46097: LD_ADDR_VAR 0 7
46101: PUSH
46102: LD_VAR 0 6
46106: PUSH
46107: EMPTY
46108: LIST
46109: ST_TO_ADDR
// for i = 1 to pos - 1 do
46110: LD_ADDR_VAR 0 5
46114: PUSH
46115: DOUBLE
46116: LD_INT 1
46118: DEC
46119: ST_TO_ADDR
46120: LD_VAR 0 2
46124: PUSH
46125: LD_INT 1
46127: MINUS
46128: PUSH
46129: FOR_TO
46130: IFFALSE 46175
// begin tmp := tmp [ pos [ i ] ] ;
46132: LD_ADDR_VAR 0 6
46136: PUSH
46137: LD_VAR 0 6
46141: PUSH
46142: LD_VAR 0 2
46146: PUSH
46147: LD_VAR 0 5
46151: ARRAY
46152: ARRAY
46153: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46154: LD_ADDR_VAR 0 7
46158: PUSH
46159: LD_VAR 0 7
46163: PUSH
46164: LD_VAR 0 6
46168: PUSH
46169: EMPTY
46170: LIST
46171: ADD
46172: ST_TO_ADDR
// end ;
46173: GO 46129
46175: POP
46176: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46177: LD_ADDR_VAR 0 6
46181: PUSH
46182: LD_VAR 0 6
46186: PPUSH
46187: LD_VAR 0 2
46191: PUSH
46192: LD_VAR 0 2
46196: ARRAY
46197: PPUSH
46198: LD_VAR 0 3
46202: PPUSH
46203: CALL_OW 1
46207: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46208: LD_ADDR_VAR 0 7
46212: PUSH
46213: LD_VAR 0 7
46217: PPUSH
46218: LD_VAR 0 7
46222: PPUSH
46223: LD_VAR 0 6
46227: PPUSH
46228: CALL_OW 1
46232: ST_TO_ADDR
// for i = s_arr downto 2 do
46233: LD_ADDR_VAR 0 5
46237: PUSH
46238: DOUBLE
46239: LD_VAR 0 7
46243: INC
46244: ST_TO_ADDR
46245: LD_INT 2
46247: PUSH
46248: FOR_DOWNTO
46249: IFFALSE 46333
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46251: LD_ADDR_VAR 0 6
46255: PUSH
46256: LD_VAR 0 7
46260: PUSH
46261: LD_VAR 0 5
46265: PUSH
46266: LD_INT 1
46268: MINUS
46269: ARRAY
46270: PPUSH
46271: LD_VAR 0 2
46275: PUSH
46276: LD_VAR 0 5
46280: PUSH
46281: LD_INT 1
46283: MINUS
46284: ARRAY
46285: PPUSH
46286: LD_VAR 0 7
46290: PUSH
46291: LD_VAR 0 5
46295: ARRAY
46296: PPUSH
46297: CALL_OW 1
46301: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46302: LD_ADDR_VAR 0 7
46306: PUSH
46307: LD_VAR 0 7
46311: PPUSH
46312: LD_VAR 0 5
46316: PUSH
46317: LD_INT 1
46319: MINUS
46320: PPUSH
46321: LD_VAR 0 6
46325: PPUSH
46326: CALL_OW 1
46330: ST_TO_ADDR
// end ;
46331: GO 46248
46333: POP
46334: POP
// result := s_arr [ 1 ] ;
46335: LD_ADDR_VAR 0 4
46339: PUSH
46340: LD_VAR 0 7
46344: PUSH
46345: LD_INT 1
46347: ARRAY
46348: ST_TO_ADDR
// end ; end ;
46349: LD_VAR 0 4
46353: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46354: LD_INT 0
46356: PPUSH
46357: PPUSH
// if not list then
46358: LD_VAR 0 1
46362: NOT
46363: IFFALSE 46367
// exit ;
46365: GO 46458
// i := list [ pos1 ] ;
46367: LD_ADDR_VAR 0 5
46371: PUSH
46372: LD_VAR 0 1
46376: PUSH
46377: LD_VAR 0 2
46381: ARRAY
46382: ST_TO_ADDR
// if not i then
46383: LD_VAR 0 5
46387: NOT
46388: IFFALSE 46392
// exit ;
46390: GO 46458
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46392: LD_ADDR_VAR 0 1
46396: PUSH
46397: LD_VAR 0 1
46401: PPUSH
46402: LD_VAR 0 2
46406: PPUSH
46407: LD_VAR 0 1
46411: PUSH
46412: LD_VAR 0 3
46416: ARRAY
46417: PPUSH
46418: CALL_OW 1
46422: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46423: LD_ADDR_VAR 0 1
46427: PUSH
46428: LD_VAR 0 1
46432: PPUSH
46433: LD_VAR 0 3
46437: PPUSH
46438: LD_VAR 0 5
46442: PPUSH
46443: CALL_OW 1
46447: ST_TO_ADDR
// result := list ;
46448: LD_ADDR_VAR 0 4
46452: PUSH
46453: LD_VAR 0 1
46457: ST_TO_ADDR
// end ;
46458: LD_VAR 0 4
46462: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46463: LD_INT 0
46465: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46466: LD_ADDR_VAR 0 5
46470: PUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: CALL_OW 250
46480: PPUSH
46481: LD_VAR 0 1
46485: PPUSH
46486: CALL_OW 251
46490: PPUSH
46491: LD_VAR 0 2
46495: PPUSH
46496: LD_VAR 0 3
46500: PPUSH
46501: LD_VAR 0 4
46505: PPUSH
46506: CALL 46884 0 5
46510: ST_TO_ADDR
// end ;
46511: LD_VAR 0 5
46515: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46516: LD_INT 0
46518: PPUSH
46519: PPUSH
46520: PPUSH
46521: PPUSH
// if not list or not unit then
46522: LD_VAR 0 2
46526: NOT
46527: PUSH
46528: LD_VAR 0 1
46532: NOT
46533: OR
46534: IFFALSE 46538
// exit ;
46536: GO 46879
// result := [ ] ;
46538: LD_ADDR_VAR 0 5
46542: PUSH
46543: EMPTY
46544: ST_TO_ADDR
// for i in list do
46545: LD_ADDR_VAR 0 6
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: FOR_IN
46556: IFFALSE 46774
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46558: LD_ADDR_VAR 0 8
46562: PUSH
46563: LD_VAR 0 1
46567: PPUSH
46568: LD_VAR 0 6
46572: PUSH
46573: LD_INT 1
46575: ARRAY
46576: PPUSH
46577: LD_VAR 0 6
46581: PUSH
46582: LD_INT 2
46584: ARRAY
46585: PPUSH
46586: CALL_OW 297
46590: ST_TO_ADDR
// if not Count ( result ) then
46591: LD_VAR 0 5
46595: PPUSH
46596: CALL 43168 0 1
46600: NOT
46601: IFFALSE 46634
// begin result := Join ( result , [ i , tmp ] ) ;
46603: LD_ADDR_VAR 0 5
46607: PUSH
46608: LD_VAR 0 5
46612: PPUSH
46613: LD_VAR 0 6
46617: PUSH
46618: LD_VAR 0 8
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PPUSH
46627: CALL 78757 0 2
46631: ST_TO_ADDR
// continue ;
46632: GO 46555
// end ; if result [ result ] [ 2 ] <= tmp then
46634: LD_VAR 0 5
46638: PUSH
46639: LD_VAR 0 5
46643: ARRAY
46644: PUSH
46645: LD_INT 2
46647: ARRAY
46648: PUSH
46649: LD_VAR 0 8
46653: LESSEQUAL
46654: IFFALSE 46687
// result := Join ( result , [ i , tmp ] ) else
46656: LD_ADDR_VAR 0 5
46660: PUSH
46661: LD_VAR 0 5
46665: PPUSH
46666: LD_VAR 0 6
46670: PUSH
46671: LD_VAR 0 8
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PPUSH
46680: CALL 78757 0 2
46684: ST_TO_ADDR
46685: GO 46772
// begin for j := 1 to Count ( result ) do
46687: LD_ADDR_VAR 0 7
46691: PUSH
46692: DOUBLE
46693: LD_INT 1
46695: DEC
46696: ST_TO_ADDR
46697: LD_VAR 0 5
46701: PPUSH
46702: CALL 43168 0 1
46706: PUSH
46707: FOR_TO
46708: IFFALSE 46770
// begin if tmp < result [ j ] [ 2 ] then
46710: LD_VAR 0 8
46714: PUSH
46715: LD_VAR 0 5
46719: PUSH
46720: LD_VAR 0 7
46724: ARRAY
46725: PUSH
46726: LD_INT 2
46728: ARRAY
46729: LESS
46730: IFFALSE 46768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46732: LD_ADDR_VAR 0 5
46736: PUSH
46737: LD_VAR 0 5
46741: PPUSH
46742: LD_VAR 0 7
46746: PPUSH
46747: LD_VAR 0 6
46751: PUSH
46752: LD_VAR 0 8
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PPUSH
46761: CALL_OW 2
46765: ST_TO_ADDR
// break ;
46766: GO 46770
// end ; end ;
46768: GO 46707
46770: POP
46771: POP
// end ; end ;
46772: GO 46555
46774: POP
46775: POP
// if result and not asc then
46776: LD_VAR 0 5
46780: PUSH
46781: LD_VAR 0 3
46785: NOT
46786: AND
46787: IFFALSE 46804
// result := ReverseArray ( result ) ;
46789: LD_ADDR_VAR 0 5
46793: PUSH
46794: LD_VAR 0 5
46798: PPUSH
46799: CALL 74044 0 1
46803: ST_TO_ADDR
// tmp := [ ] ;
46804: LD_ADDR_VAR 0 8
46808: PUSH
46809: EMPTY
46810: ST_TO_ADDR
// if mode then
46811: LD_VAR 0 4
46815: IFFALSE 46879
// begin for i := 1 to result do
46817: LD_ADDR_VAR 0 6
46821: PUSH
46822: DOUBLE
46823: LD_INT 1
46825: DEC
46826: ST_TO_ADDR
46827: LD_VAR 0 5
46831: PUSH
46832: FOR_TO
46833: IFFALSE 46867
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46835: LD_ADDR_VAR 0 8
46839: PUSH
46840: LD_VAR 0 8
46844: PPUSH
46845: LD_VAR 0 5
46849: PUSH
46850: LD_VAR 0 6
46854: ARRAY
46855: PUSH
46856: LD_INT 1
46858: ARRAY
46859: PPUSH
46860: CALL 78757 0 2
46864: ST_TO_ADDR
46865: GO 46832
46867: POP
46868: POP
// result := tmp ;
46869: LD_ADDR_VAR 0 5
46873: PUSH
46874: LD_VAR 0 8
46878: ST_TO_ADDR
// end ; end ;
46879: LD_VAR 0 5
46883: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46884: LD_INT 0
46886: PPUSH
46887: PPUSH
46888: PPUSH
46889: PPUSH
// if not list then
46890: LD_VAR 0 3
46894: NOT
46895: IFFALSE 46899
// exit ;
46897: GO 47287
// result := [ ] ;
46899: LD_ADDR_VAR 0 6
46903: PUSH
46904: EMPTY
46905: ST_TO_ADDR
// for i in list do
46906: LD_ADDR_VAR 0 7
46910: PUSH
46911: LD_VAR 0 3
46915: PUSH
46916: FOR_IN
46917: IFFALSE 47119
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46919: LD_ADDR_VAR 0 9
46923: PUSH
46924: LD_VAR 0 7
46928: PPUSH
46929: LD_VAR 0 1
46933: PPUSH
46934: LD_VAR 0 2
46938: PPUSH
46939: CALL_OW 297
46943: ST_TO_ADDR
// if not result then
46944: LD_VAR 0 6
46948: NOT
46949: IFFALSE 46975
// result := [ [ i , tmp ] ] else
46951: LD_ADDR_VAR 0 6
46955: PUSH
46956: LD_VAR 0 7
46960: PUSH
46961: LD_VAR 0 9
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: EMPTY
46971: LIST
46972: ST_TO_ADDR
46973: GO 47117
// begin if result [ result ] [ 2 ] < tmp then
46975: LD_VAR 0 6
46979: PUSH
46980: LD_VAR 0 6
46984: ARRAY
46985: PUSH
46986: LD_INT 2
46988: ARRAY
46989: PUSH
46990: LD_VAR 0 9
46994: LESS
46995: IFFALSE 47037
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46997: LD_ADDR_VAR 0 6
47001: PUSH
47002: LD_VAR 0 6
47006: PPUSH
47007: LD_VAR 0 6
47011: PUSH
47012: LD_INT 1
47014: PLUS
47015: PPUSH
47016: LD_VAR 0 7
47020: PUSH
47021: LD_VAR 0 9
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PPUSH
47030: CALL_OW 2
47034: ST_TO_ADDR
47035: GO 47117
// for j = 1 to result do
47037: LD_ADDR_VAR 0 8
47041: PUSH
47042: DOUBLE
47043: LD_INT 1
47045: DEC
47046: ST_TO_ADDR
47047: LD_VAR 0 6
47051: PUSH
47052: FOR_TO
47053: IFFALSE 47115
// begin if tmp < result [ j ] [ 2 ] then
47055: LD_VAR 0 9
47059: PUSH
47060: LD_VAR 0 6
47064: PUSH
47065: LD_VAR 0 8
47069: ARRAY
47070: PUSH
47071: LD_INT 2
47073: ARRAY
47074: LESS
47075: IFFALSE 47113
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47077: LD_ADDR_VAR 0 6
47081: PUSH
47082: LD_VAR 0 6
47086: PPUSH
47087: LD_VAR 0 8
47091: PPUSH
47092: LD_VAR 0 7
47096: PUSH
47097: LD_VAR 0 9
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PPUSH
47106: CALL_OW 2
47110: ST_TO_ADDR
// break ;
47111: GO 47115
// end ; end ;
47113: GO 47052
47115: POP
47116: POP
// end ; end ;
47117: GO 46916
47119: POP
47120: POP
// if result and not asc then
47121: LD_VAR 0 6
47125: PUSH
47126: LD_VAR 0 4
47130: NOT
47131: AND
47132: IFFALSE 47207
// begin tmp := result ;
47134: LD_ADDR_VAR 0 9
47138: PUSH
47139: LD_VAR 0 6
47143: ST_TO_ADDR
// for i = tmp downto 1 do
47144: LD_ADDR_VAR 0 7
47148: PUSH
47149: DOUBLE
47150: LD_VAR 0 9
47154: INC
47155: ST_TO_ADDR
47156: LD_INT 1
47158: PUSH
47159: FOR_DOWNTO
47160: IFFALSE 47205
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47162: LD_ADDR_VAR 0 6
47166: PUSH
47167: LD_VAR 0 6
47171: PPUSH
47172: LD_VAR 0 9
47176: PUSH
47177: LD_VAR 0 7
47181: MINUS
47182: PUSH
47183: LD_INT 1
47185: PLUS
47186: PPUSH
47187: LD_VAR 0 9
47191: PUSH
47192: LD_VAR 0 7
47196: ARRAY
47197: PPUSH
47198: CALL_OW 1
47202: ST_TO_ADDR
47203: GO 47159
47205: POP
47206: POP
// end ; tmp := [ ] ;
47207: LD_ADDR_VAR 0 9
47211: PUSH
47212: EMPTY
47213: ST_TO_ADDR
// if mode then
47214: LD_VAR 0 5
47218: IFFALSE 47287
// begin for i = 1 to result do
47220: LD_ADDR_VAR 0 7
47224: PUSH
47225: DOUBLE
47226: LD_INT 1
47228: DEC
47229: ST_TO_ADDR
47230: LD_VAR 0 6
47234: PUSH
47235: FOR_TO
47236: IFFALSE 47275
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47238: LD_ADDR_VAR 0 9
47242: PUSH
47243: LD_VAR 0 9
47247: PPUSH
47248: LD_VAR 0 7
47252: PPUSH
47253: LD_VAR 0 6
47257: PUSH
47258: LD_VAR 0 7
47262: ARRAY
47263: PUSH
47264: LD_INT 1
47266: ARRAY
47267: PPUSH
47268: CALL_OW 1
47272: ST_TO_ADDR
47273: GO 47235
47275: POP
47276: POP
// result := tmp ;
47277: LD_ADDR_VAR 0 6
47281: PUSH
47282: LD_VAR 0 9
47286: ST_TO_ADDR
// end ; end ;
47287: LD_VAR 0 6
47291: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47292: LD_INT 0
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47300: LD_ADDR_VAR 0 5
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// if not x or not y then
47322: LD_VAR 0 2
47326: NOT
47327: PUSH
47328: LD_VAR 0 3
47332: NOT
47333: OR
47334: IFFALSE 47338
// exit ;
47336: GO 48988
// if not range then
47338: LD_VAR 0 4
47342: NOT
47343: IFFALSE 47353
// range := 10 ;
47345: LD_ADDR_VAR 0 4
47349: PUSH
47350: LD_INT 10
47352: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47353: LD_ADDR_VAR 0 8
47357: PUSH
47358: LD_INT 81
47360: PUSH
47361: LD_VAR 0 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 92
47372: PUSH
47373: LD_VAR 0 2
47377: PUSH
47378: LD_VAR 0 3
47382: PUSH
47383: LD_VAR 0 4
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 21
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: PPUSH
47416: CALL_OW 69
47420: ST_TO_ADDR
// if not tmp then
47421: LD_VAR 0 8
47425: NOT
47426: IFFALSE 47430
// exit ;
47428: GO 48988
// for i in tmp do
47430: LD_ADDR_VAR 0 6
47434: PUSH
47435: LD_VAR 0 8
47439: PUSH
47440: FOR_IN
47441: IFFALSE 48963
// begin points := [ 0 , 0 , 0 ] ;
47443: LD_ADDR_VAR 0 9
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: ST_TO_ADDR
// bpoints := 1 ;
47462: LD_ADDR_VAR 0 10
47466: PUSH
47467: LD_INT 1
47469: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47470: LD_VAR 0 6
47474: PPUSH
47475: CALL_OW 247
47479: PUSH
47480: LD_INT 1
47482: DOUBLE
47483: EQUAL
47484: IFTRUE 47488
47486: GO 48066
47488: POP
// begin if GetClass ( i ) = 1 then
47489: LD_VAR 0 6
47493: PPUSH
47494: CALL_OW 257
47498: PUSH
47499: LD_INT 1
47501: EQUAL
47502: IFFALSE 47523
// points := [ 10 , 5 , 3 ] ;
47504: LD_ADDR_VAR 0 9
47508: PUSH
47509: LD_INT 10
47511: PUSH
47512: LD_INT 5
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47523: LD_VAR 0 6
47527: PPUSH
47528: CALL_OW 257
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: LD_INT 4
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: IN
47547: IFFALSE 47568
// points := [ 3 , 2 , 1 ] ;
47549: LD_ADDR_VAR 0 9
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47568: LD_VAR 0 6
47572: PPUSH
47573: CALL_OW 257
47577: PUSH
47578: LD_INT 5
47580: EQUAL
47581: IFFALSE 47602
// points := [ 130 , 5 , 2 ] ;
47583: LD_ADDR_VAR 0 9
47587: PUSH
47588: LD_INT 130
47590: PUSH
47591: LD_INT 5
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47602: LD_VAR 0 6
47606: PPUSH
47607: CALL_OW 257
47611: PUSH
47612: LD_INT 8
47614: EQUAL
47615: IFFALSE 47636
// points := [ 35 , 35 , 30 ] ;
47617: LD_ADDR_VAR 0 9
47621: PUSH
47622: LD_INT 35
47624: PUSH
47625: LD_INT 35
47627: PUSH
47628: LD_INT 30
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47636: LD_VAR 0 6
47640: PPUSH
47641: CALL_OW 257
47645: PUSH
47646: LD_INT 9
47648: EQUAL
47649: IFFALSE 47670
// points := [ 20 , 55 , 40 ] ;
47651: LD_ADDR_VAR 0 9
47655: PUSH
47656: LD_INT 20
47658: PUSH
47659: LD_INT 55
47661: PUSH
47662: LD_INT 40
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47670: LD_VAR 0 6
47674: PPUSH
47675: CALL_OW 257
47679: PUSH
47680: LD_INT 12
47682: PUSH
47683: LD_INT 16
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: IN
47690: IFFALSE 47711
// points := [ 5 , 3 , 2 ] ;
47692: LD_ADDR_VAR 0 9
47696: PUSH
47697: LD_INT 5
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47711: LD_VAR 0 6
47715: PPUSH
47716: CALL_OW 257
47720: PUSH
47721: LD_INT 17
47723: EQUAL
47724: IFFALSE 47745
// points := [ 100 , 50 , 75 ] ;
47726: LD_ADDR_VAR 0 9
47730: PUSH
47731: LD_INT 100
47733: PUSH
47734: LD_INT 50
47736: PUSH
47737: LD_INT 75
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47745: LD_VAR 0 6
47749: PPUSH
47750: CALL_OW 257
47754: PUSH
47755: LD_INT 15
47757: EQUAL
47758: IFFALSE 47779
// points := [ 10 , 5 , 3 ] ;
47760: LD_ADDR_VAR 0 9
47764: PUSH
47765: LD_INT 10
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47779: LD_VAR 0 6
47783: PPUSH
47784: CALL_OW 257
47788: PUSH
47789: LD_INT 14
47791: EQUAL
47792: IFFALSE 47813
// points := [ 10 , 0 , 0 ] ;
47794: LD_ADDR_VAR 0 9
47798: PUSH
47799: LD_INT 10
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: LIST
47812: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47813: LD_VAR 0 6
47817: PPUSH
47818: CALL_OW 257
47822: PUSH
47823: LD_INT 11
47825: EQUAL
47826: IFFALSE 47847
// points := [ 30 , 10 , 5 ] ;
47828: LD_ADDR_VAR 0 9
47832: PUSH
47833: LD_INT 30
47835: PUSH
47836: LD_INT 10
47838: PUSH
47839: LD_INT 5
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47847: LD_VAR 0 1
47851: PPUSH
47852: LD_INT 5
47854: PPUSH
47855: CALL_OW 321
47859: PUSH
47860: LD_INT 2
47862: EQUAL
47863: IFFALSE 47880
// bpoints := bpoints * 1.8 ;
47865: LD_ADDR_VAR 0 10
47869: PUSH
47870: LD_VAR 0 10
47874: PUSH
47875: LD_REAL  1.80000000000000E+0000
47878: MUL
47879: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47880: LD_VAR 0 6
47884: PPUSH
47885: CALL_OW 257
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: LD_INT 4
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: IN
47908: PUSH
47909: LD_VAR 0 1
47913: PPUSH
47914: LD_INT 51
47916: PPUSH
47917: CALL_OW 321
47921: PUSH
47922: LD_INT 2
47924: EQUAL
47925: AND
47926: IFFALSE 47943
// bpoints := bpoints * 1.2 ;
47928: LD_ADDR_VAR 0 10
47932: PUSH
47933: LD_VAR 0 10
47937: PUSH
47938: LD_REAL  1.20000000000000E+0000
47941: MUL
47942: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47943: LD_VAR 0 6
47947: PPUSH
47948: CALL_OW 257
47952: PUSH
47953: LD_INT 5
47955: PUSH
47956: LD_INT 7
47958: PUSH
47959: LD_INT 9
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: IN
47967: PUSH
47968: LD_VAR 0 1
47972: PPUSH
47973: LD_INT 52
47975: PPUSH
47976: CALL_OW 321
47980: PUSH
47981: LD_INT 2
47983: EQUAL
47984: AND
47985: IFFALSE 48002
// bpoints := bpoints * 1.5 ;
47987: LD_ADDR_VAR 0 10
47991: PUSH
47992: LD_VAR 0 10
47996: PUSH
47997: LD_REAL  1.50000000000000E+0000
48000: MUL
48001: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48002: LD_VAR 0 1
48006: PPUSH
48007: LD_INT 66
48009: PPUSH
48010: CALL_OW 321
48014: PUSH
48015: LD_INT 2
48017: EQUAL
48018: IFFALSE 48035
// bpoints := bpoints * 1.1 ;
48020: LD_ADDR_VAR 0 10
48024: PUSH
48025: LD_VAR 0 10
48029: PUSH
48030: LD_REAL  1.10000000000000E+0000
48033: MUL
48034: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48035: LD_ADDR_VAR 0 10
48039: PUSH
48040: LD_VAR 0 10
48044: PUSH
48045: LD_VAR 0 6
48049: PPUSH
48050: LD_INT 1
48052: PPUSH
48053: CALL_OW 259
48057: PUSH
48058: LD_REAL  1.15000000000000E+0000
48061: MUL
48062: MUL
48063: ST_TO_ADDR
// end ; unit_vehicle :
48064: GO 48892
48066: LD_INT 2
48068: DOUBLE
48069: EQUAL
48070: IFTRUE 48074
48072: GO 48880
48074: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48075: LD_VAR 0 6
48079: PPUSH
48080: CALL_OW 264
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: LD_INT 42
48090: PUSH
48091: LD_INT 24
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: IN
48099: IFFALSE 48120
// points := [ 25 , 5 , 3 ] ;
48101: LD_ADDR_VAR 0 9
48105: PUSH
48106: LD_INT 25
48108: PUSH
48109: LD_INT 5
48111: PUSH
48112: LD_INT 3
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48120: LD_VAR 0 6
48124: PPUSH
48125: CALL_OW 264
48129: PUSH
48130: LD_INT 4
48132: PUSH
48133: LD_INT 43
48135: PUSH
48136: LD_INT 25
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: IN
48144: IFFALSE 48165
// points := [ 40 , 15 , 5 ] ;
48146: LD_ADDR_VAR 0 9
48150: PUSH
48151: LD_INT 40
48153: PUSH
48154: LD_INT 15
48156: PUSH
48157: LD_INT 5
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: LIST
48164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48165: LD_VAR 0 6
48169: PPUSH
48170: CALL_OW 264
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: LD_INT 23
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: IN
48185: IFFALSE 48206
// points := [ 7 , 25 , 8 ] ;
48187: LD_ADDR_VAR 0 9
48191: PUSH
48192: LD_INT 7
48194: PUSH
48195: LD_INT 25
48197: PUSH
48198: LD_INT 8
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48206: LD_VAR 0 6
48210: PPUSH
48211: CALL_OW 264
48215: PUSH
48216: LD_INT 5
48218: PUSH
48219: LD_INT 27
48221: PUSH
48222: LD_INT 44
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: IN
48230: IFFALSE 48251
// points := [ 14 , 50 , 16 ] ;
48232: LD_ADDR_VAR 0 9
48236: PUSH
48237: LD_INT 14
48239: PUSH
48240: LD_INT 50
48242: PUSH
48243: LD_INT 16
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48251: LD_VAR 0 6
48255: PPUSH
48256: CALL_OW 264
48260: PUSH
48261: LD_INT 6
48263: PUSH
48264: LD_INT 46
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: IN
48271: IFFALSE 48292
// points := [ 32 , 120 , 70 ] ;
48273: LD_ADDR_VAR 0 9
48277: PUSH
48278: LD_INT 32
48280: PUSH
48281: LD_INT 120
48283: PUSH
48284: LD_INT 70
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48292: LD_VAR 0 6
48296: PPUSH
48297: CALL_OW 264
48301: PUSH
48302: LD_INT 7
48304: PUSH
48305: LD_INT 28
48307: PUSH
48308: LD_INT 45
48310: PUSH
48311: LD_INT 92
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: IN
48320: IFFALSE 48341
// points := [ 35 , 20 , 45 ] ;
48322: LD_ADDR_VAR 0 9
48326: PUSH
48327: LD_INT 35
48329: PUSH
48330: LD_INT 20
48332: PUSH
48333: LD_INT 45
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48341: LD_VAR 0 6
48345: PPUSH
48346: CALL_OW 264
48350: PUSH
48351: LD_INT 47
48353: PUSH
48354: EMPTY
48355: LIST
48356: IN
48357: IFFALSE 48378
// points := [ 67 , 45 , 75 ] ;
48359: LD_ADDR_VAR 0 9
48363: PUSH
48364: LD_INT 67
48366: PUSH
48367: LD_INT 45
48369: PUSH
48370: LD_INT 75
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48378: LD_VAR 0 6
48382: PPUSH
48383: CALL_OW 264
48387: PUSH
48388: LD_INT 26
48390: PUSH
48391: EMPTY
48392: LIST
48393: IN
48394: IFFALSE 48415
// points := [ 120 , 30 , 80 ] ;
48396: LD_ADDR_VAR 0 9
48400: PUSH
48401: LD_INT 120
48403: PUSH
48404: LD_INT 30
48406: PUSH
48407: LD_INT 80
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48415: LD_VAR 0 6
48419: PPUSH
48420: CALL_OW 264
48424: PUSH
48425: LD_INT 22
48427: PUSH
48428: EMPTY
48429: LIST
48430: IN
48431: IFFALSE 48452
// points := [ 40 , 1 , 1 ] ;
48433: LD_ADDR_VAR 0 9
48437: PUSH
48438: LD_INT 40
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48452: LD_VAR 0 6
48456: PPUSH
48457: CALL_OW 264
48461: PUSH
48462: LD_INT 29
48464: PUSH
48465: EMPTY
48466: LIST
48467: IN
48468: IFFALSE 48489
// points := [ 70 , 200 , 400 ] ;
48470: LD_ADDR_VAR 0 9
48474: PUSH
48475: LD_INT 70
48477: PUSH
48478: LD_INT 200
48480: PUSH
48481: LD_INT 400
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48489: LD_VAR 0 6
48493: PPUSH
48494: CALL_OW 264
48498: PUSH
48499: LD_INT 14
48501: PUSH
48502: LD_INT 53
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: IN
48509: IFFALSE 48530
// points := [ 40 , 10 , 20 ] ;
48511: LD_ADDR_VAR 0 9
48515: PUSH
48516: LD_INT 40
48518: PUSH
48519: LD_INT 10
48521: PUSH
48522: LD_INT 20
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: LIST
48529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48530: LD_VAR 0 6
48534: PPUSH
48535: CALL_OW 264
48539: PUSH
48540: LD_INT 9
48542: PUSH
48543: EMPTY
48544: LIST
48545: IN
48546: IFFALSE 48567
// points := [ 5 , 70 , 20 ] ;
48548: LD_ADDR_VAR 0 9
48552: PUSH
48553: LD_INT 5
48555: PUSH
48556: LD_INT 70
48558: PUSH
48559: LD_INT 20
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48567: LD_VAR 0 6
48571: PPUSH
48572: CALL_OW 264
48576: PUSH
48577: LD_INT 10
48579: PUSH
48580: EMPTY
48581: LIST
48582: IN
48583: IFFALSE 48604
// points := [ 35 , 110 , 70 ] ;
48585: LD_ADDR_VAR 0 9
48589: PUSH
48590: LD_INT 35
48592: PUSH
48593: LD_INT 110
48595: PUSH
48596: LD_INT 70
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48604: LD_VAR 0 6
48608: PPUSH
48609: CALL_OW 265
48613: PUSH
48614: LD_INT 25
48616: EQUAL
48617: IFFALSE 48638
// points := [ 80 , 65 , 100 ] ;
48619: LD_ADDR_VAR 0 9
48623: PUSH
48624: LD_INT 80
48626: PUSH
48627: LD_INT 65
48629: PUSH
48630: LD_INT 100
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48638: LD_VAR 0 6
48642: PPUSH
48643: CALL_OW 263
48647: PUSH
48648: LD_INT 1
48650: EQUAL
48651: IFFALSE 48686
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48653: LD_ADDR_VAR 0 10
48657: PUSH
48658: LD_VAR 0 10
48662: PUSH
48663: LD_VAR 0 6
48667: PPUSH
48668: CALL_OW 311
48672: PPUSH
48673: LD_INT 3
48675: PPUSH
48676: CALL_OW 259
48680: PUSH
48681: LD_INT 4
48683: MUL
48684: MUL
48685: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48686: LD_VAR 0 6
48690: PPUSH
48691: CALL_OW 263
48695: PUSH
48696: LD_INT 2
48698: EQUAL
48699: IFFALSE 48750
// begin j := IsControledBy ( i ) ;
48701: LD_ADDR_VAR 0 7
48705: PUSH
48706: LD_VAR 0 6
48710: PPUSH
48711: CALL_OW 312
48715: ST_TO_ADDR
// if j then
48716: LD_VAR 0 7
48720: IFFALSE 48750
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48722: LD_ADDR_VAR 0 10
48726: PUSH
48727: LD_VAR 0 10
48731: PUSH
48732: LD_VAR 0 7
48736: PPUSH
48737: LD_INT 3
48739: PPUSH
48740: CALL_OW 259
48744: PUSH
48745: LD_INT 3
48747: MUL
48748: MUL
48749: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48750: LD_VAR 0 6
48754: PPUSH
48755: CALL_OW 264
48759: PUSH
48760: LD_INT 5
48762: PUSH
48763: LD_INT 6
48765: PUSH
48766: LD_INT 46
48768: PUSH
48769: LD_INT 44
48771: PUSH
48772: LD_INT 47
48774: PUSH
48775: LD_INT 45
48777: PUSH
48778: LD_INT 28
48780: PUSH
48781: LD_INT 7
48783: PUSH
48784: LD_INT 27
48786: PUSH
48787: LD_INT 29
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: IN
48802: PUSH
48803: LD_VAR 0 1
48807: PPUSH
48808: LD_INT 52
48810: PPUSH
48811: CALL_OW 321
48815: PUSH
48816: LD_INT 2
48818: EQUAL
48819: AND
48820: IFFALSE 48837
// bpoints := bpoints * 1.2 ;
48822: LD_ADDR_VAR 0 10
48826: PUSH
48827: LD_VAR 0 10
48831: PUSH
48832: LD_REAL  1.20000000000000E+0000
48835: MUL
48836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48837: LD_VAR 0 6
48841: PPUSH
48842: CALL_OW 264
48846: PUSH
48847: LD_INT 6
48849: PUSH
48850: LD_INT 46
48852: PUSH
48853: LD_INT 47
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: LIST
48860: IN
48861: IFFALSE 48878
// bpoints := bpoints * 1.2 ;
48863: LD_ADDR_VAR 0 10
48867: PUSH
48868: LD_VAR 0 10
48872: PUSH
48873: LD_REAL  1.20000000000000E+0000
48876: MUL
48877: ST_TO_ADDR
// end ; unit_building :
48878: GO 48892
48880: LD_INT 3
48882: DOUBLE
48883: EQUAL
48884: IFTRUE 48888
48886: GO 48891
48888: POP
// ; end ;
48889: GO 48892
48891: POP
// for j = 1 to 3 do
48892: LD_ADDR_VAR 0 7
48896: PUSH
48897: DOUBLE
48898: LD_INT 1
48900: DEC
48901: ST_TO_ADDR
48902: LD_INT 3
48904: PUSH
48905: FOR_TO
48906: IFFALSE 48959
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48908: LD_ADDR_VAR 0 5
48912: PUSH
48913: LD_VAR 0 5
48917: PPUSH
48918: LD_VAR 0 7
48922: PPUSH
48923: LD_VAR 0 5
48927: PUSH
48928: LD_VAR 0 7
48932: ARRAY
48933: PUSH
48934: LD_VAR 0 9
48938: PUSH
48939: LD_VAR 0 7
48943: ARRAY
48944: PUSH
48945: LD_VAR 0 10
48949: MUL
48950: PLUS
48951: PPUSH
48952: CALL_OW 1
48956: ST_TO_ADDR
48957: GO 48905
48959: POP
48960: POP
// end ;
48961: GO 47440
48963: POP
48964: POP
// result := Replace ( result , 4 , tmp ) ;
48965: LD_ADDR_VAR 0 5
48969: PUSH
48970: LD_VAR 0 5
48974: PPUSH
48975: LD_INT 4
48977: PPUSH
48978: LD_VAR 0 8
48982: PPUSH
48983: CALL_OW 1
48987: ST_TO_ADDR
// end ;
48988: LD_VAR 0 5
48992: RET
// export function DangerAtRange ( unit , range ) ; begin
48993: LD_INT 0
48995: PPUSH
// if not unit then
48996: LD_VAR 0 1
49000: NOT
49001: IFFALSE 49005
// exit ;
49003: GO 49050
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49005: LD_ADDR_VAR 0 3
49009: PUSH
49010: LD_VAR 0 1
49014: PPUSH
49015: CALL_OW 255
49019: PPUSH
49020: LD_VAR 0 1
49024: PPUSH
49025: CALL_OW 250
49029: PPUSH
49030: LD_VAR 0 1
49034: PPUSH
49035: CALL_OW 251
49039: PPUSH
49040: LD_VAR 0 2
49044: PPUSH
49045: CALL 47292 0 4
49049: ST_TO_ADDR
// end ;
49050: LD_VAR 0 3
49054: RET
// export function DangerInArea ( side , area ) ; begin
49055: LD_INT 0
49057: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49058: LD_ADDR_VAR 0 3
49062: PUSH
49063: LD_VAR 0 2
49067: PPUSH
49068: LD_INT 81
49070: PUSH
49071: LD_VAR 0 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PPUSH
49080: CALL_OW 70
49084: ST_TO_ADDR
// end ;
49085: LD_VAR 0 3
49089: RET
// export function IsExtension ( b ) ; begin
49090: LD_INT 0
49092: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49093: LD_ADDR_VAR 0 2
49097: PUSH
49098: LD_VAR 0 1
49102: PUSH
49103: LD_INT 23
49105: PUSH
49106: LD_INT 20
49108: PUSH
49109: LD_INT 22
49111: PUSH
49112: LD_INT 17
49114: PUSH
49115: LD_INT 24
49117: PUSH
49118: LD_INT 21
49120: PUSH
49121: LD_INT 19
49123: PUSH
49124: LD_INT 16
49126: PUSH
49127: LD_INT 25
49129: PUSH
49130: LD_INT 18
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: IN
49145: ST_TO_ADDR
// end ;
49146: LD_VAR 0 2
49150: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49151: LD_INT 0
49153: PPUSH
49154: PPUSH
49155: PPUSH
// result := [ ] ;
49156: LD_ADDR_VAR 0 4
49160: PUSH
49161: EMPTY
49162: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49163: LD_ADDR_VAR 0 5
49167: PUSH
49168: LD_VAR 0 2
49172: PPUSH
49173: LD_INT 21
49175: PUSH
49176: LD_INT 3
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PPUSH
49183: CALL_OW 70
49187: ST_TO_ADDR
// if not tmp then
49188: LD_VAR 0 5
49192: NOT
49193: IFFALSE 49197
// exit ;
49195: GO 49261
// if checkLink then
49197: LD_VAR 0 3
49201: IFFALSE 49251
// begin for i in tmp do
49203: LD_ADDR_VAR 0 6
49207: PUSH
49208: LD_VAR 0 5
49212: PUSH
49213: FOR_IN
49214: IFFALSE 49249
// if GetBase ( i ) <> base then
49216: LD_VAR 0 6
49220: PPUSH
49221: CALL_OW 274
49225: PUSH
49226: LD_VAR 0 1
49230: NONEQUAL
49231: IFFALSE 49247
// ComLinkToBase ( base , i ) ;
49233: LD_VAR 0 1
49237: PPUSH
49238: LD_VAR 0 6
49242: PPUSH
49243: CALL_OW 169
49247: GO 49213
49249: POP
49250: POP
// end ; result := tmp ;
49251: LD_ADDR_VAR 0 4
49255: PUSH
49256: LD_VAR 0 5
49260: ST_TO_ADDR
// end ;
49261: LD_VAR 0 4
49265: RET
// export function ComComplete ( units , b ) ; var i ; begin
49266: LD_INT 0
49268: PPUSH
49269: PPUSH
// if not units then
49270: LD_VAR 0 1
49274: NOT
49275: IFFALSE 49279
// exit ;
49277: GO 49369
// for i in units do
49279: LD_ADDR_VAR 0 4
49283: PUSH
49284: LD_VAR 0 1
49288: PUSH
49289: FOR_IN
49290: IFFALSE 49367
// if BuildingStatus ( b ) = bs_build then
49292: LD_VAR 0 2
49296: PPUSH
49297: CALL_OW 461
49301: PUSH
49302: LD_INT 1
49304: EQUAL
49305: IFFALSE 49365
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49307: LD_VAR 0 4
49311: PPUSH
49312: LD_STRING h
49314: PUSH
49315: LD_VAR 0 2
49319: PPUSH
49320: CALL_OW 250
49324: PUSH
49325: LD_VAR 0 2
49329: PPUSH
49330: CALL_OW 251
49334: PUSH
49335: LD_VAR 0 2
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: PUSH
49358: EMPTY
49359: LIST
49360: PPUSH
49361: CALL_OW 446
49365: GO 49289
49367: POP
49368: POP
// end ;
49369: LD_VAR 0 3
49373: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49374: LD_INT 0
49376: PPUSH
49377: PPUSH
49378: PPUSH
49379: PPUSH
49380: PPUSH
49381: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49382: LD_VAR 0 1
49386: NOT
49387: PUSH
49388: LD_VAR 0 1
49392: PPUSH
49393: CALL_OW 263
49397: PUSH
49398: LD_INT 2
49400: NONEQUAL
49401: OR
49402: IFFALSE 49406
// exit ;
49404: GO 49722
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49406: LD_ADDR_VAR 0 6
49410: PUSH
49411: LD_INT 22
49413: PUSH
49414: LD_VAR 0 1
49418: PPUSH
49419: CALL_OW 255
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 30
49433: PUSH
49434: LD_INT 36
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 34
49443: PUSH
49444: LD_INT 31
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PPUSH
49460: CALL_OW 69
49464: ST_TO_ADDR
// if not tmp then
49465: LD_VAR 0 6
49469: NOT
49470: IFFALSE 49474
// exit ;
49472: GO 49722
// result := [ ] ;
49474: LD_ADDR_VAR 0 2
49478: PUSH
49479: EMPTY
49480: ST_TO_ADDR
// for i in tmp do
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_VAR 0 6
49490: PUSH
49491: FOR_IN
49492: IFFALSE 49563
// begin t := UnitsInside ( i ) ;
49494: LD_ADDR_VAR 0 4
49498: PUSH
49499: LD_VAR 0 3
49503: PPUSH
49504: CALL_OW 313
49508: ST_TO_ADDR
// if t then
49509: LD_VAR 0 4
49513: IFFALSE 49561
// for j in t do
49515: LD_ADDR_VAR 0 7
49519: PUSH
49520: LD_VAR 0 4
49524: PUSH
49525: FOR_IN
49526: IFFALSE 49559
// result := Replace ( result , result + 1 , j ) ;
49528: LD_ADDR_VAR 0 2
49532: PUSH
49533: LD_VAR 0 2
49537: PPUSH
49538: LD_VAR 0 2
49542: PUSH
49543: LD_INT 1
49545: PLUS
49546: PPUSH
49547: LD_VAR 0 7
49551: PPUSH
49552: CALL_OW 1
49556: ST_TO_ADDR
49557: GO 49525
49559: POP
49560: POP
// end ;
49561: GO 49491
49563: POP
49564: POP
// if not result then
49565: LD_VAR 0 2
49569: NOT
49570: IFFALSE 49574
// exit ;
49572: GO 49722
// mech := result [ 1 ] ;
49574: LD_ADDR_VAR 0 5
49578: PUSH
49579: LD_VAR 0 2
49583: PUSH
49584: LD_INT 1
49586: ARRAY
49587: ST_TO_ADDR
// if result > 1 then
49588: LD_VAR 0 2
49592: PUSH
49593: LD_INT 1
49595: GREATER
49596: IFFALSE 49708
// begin for i = 2 to result do
49598: LD_ADDR_VAR 0 3
49602: PUSH
49603: DOUBLE
49604: LD_INT 2
49606: DEC
49607: ST_TO_ADDR
49608: LD_VAR 0 2
49612: PUSH
49613: FOR_TO
49614: IFFALSE 49706
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49616: LD_ADDR_VAR 0 4
49620: PUSH
49621: LD_VAR 0 2
49625: PUSH
49626: LD_VAR 0 3
49630: ARRAY
49631: PPUSH
49632: LD_INT 3
49634: PPUSH
49635: CALL_OW 259
49639: PUSH
49640: LD_VAR 0 2
49644: PUSH
49645: LD_VAR 0 3
49649: ARRAY
49650: PPUSH
49651: CALL_OW 432
49655: MINUS
49656: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49657: LD_VAR 0 4
49661: PUSH
49662: LD_VAR 0 5
49666: PPUSH
49667: LD_INT 3
49669: PPUSH
49670: CALL_OW 259
49674: PUSH
49675: LD_VAR 0 5
49679: PPUSH
49680: CALL_OW 432
49684: MINUS
49685: GREATEREQUAL
49686: IFFALSE 49704
// mech := result [ i ] ;
49688: LD_ADDR_VAR 0 5
49692: PUSH
49693: LD_VAR 0 2
49697: PUSH
49698: LD_VAR 0 3
49702: ARRAY
49703: ST_TO_ADDR
// end ;
49704: GO 49613
49706: POP
49707: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49708: LD_VAR 0 1
49712: PPUSH
49713: LD_VAR 0 5
49717: PPUSH
49718: CALL_OW 135
// end ;
49722: LD_VAR 0 2
49726: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49727: LD_INT 0
49729: PPUSH
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
49736: PPUSH
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
// result := [ ] ;
49742: LD_ADDR_VAR 0 7
49746: PUSH
49747: EMPTY
49748: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49749: LD_VAR 0 1
49753: PPUSH
49754: CALL_OW 266
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: IN
49769: NOT
49770: IFFALSE 49774
// exit ;
49772: GO 51408
// if name then
49774: LD_VAR 0 3
49778: IFFALSE 49794
// SetBName ( base_dep , name ) ;
49780: LD_VAR 0 1
49784: PPUSH
49785: LD_VAR 0 3
49789: PPUSH
49790: CALL_OW 500
// base := GetBase ( base_dep ) ;
49794: LD_ADDR_VAR 0 15
49798: PUSH
49799: LD_VAR 0 1
49803: PPUSH
49804: CALL_OW 274
49808: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49809: LD_ADDR_VAR 0 16
49813: PUSH
49814: LD_VAR 0 1
49818: PPUSH
49819: CALL_OW 255
49823: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49824: LD_ADDR_VAR 0 17
49828: PUSH
49829: LD_VAR 0 1
49833: PPUSH
49834: CALL_OW 248
49838: ST_TO_ADDR
// if sources then
49839: LD_VAR 0 5
49843: IFFALSE 49890
// for i = 1 to 3 do
49845: LD_ADDR_VAR 0 8
49849: PUSH
49850: DOUBLE
49851: LD_INT 1
49853: DEC
49854: ST_TO_ADDR
49855: LD_INT 3
49857: PUSH
49858: FOR_TO
49859: IFFALSE 49888
// AddResourceType ( base , i , sources [ i ] ) ;
49861: LD_VAR 0 15
49865: PPUSH
49866: LD_VAR 0 8
49870: PPUSH
49871: LD_VAR 0 5
49875: PUSH
49876: LD_VAR 0 8
49880: ARRAY
49881: PPUSH
49882: CALL_OW 276
49886: GO 49858
49888: POP
49889: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49890: LD_ADDR_VAR 0 18
49894: PUSH
49895: LD_VAR 0 15
49899: PPUSH
49900: LD_VAR 0 2
49904: PPUSH
49905: LD_INT 1
49907: PPUSH
49908: CALL 49151 0 3
49912: ST_TO_ADDR
// InitHc ;
49913: CALL_OW 19
// InitUc ;
49917: CALL_OW 18
// uc_side := side ;
49921: LD_ADDR_OWVAR 20
49925: PUSH
49926: LD_VAR 0 16
49930: ST_TO_ADDR
// uc_nation := nation ;
49931: LD_ADDR_OWVAR 21
49935: PUSH
49936: LD_VAR 0 17
49940: ST_TO_ADDR
// if buildings then
49941: LD_VAR 0 18
49945: IFFALSE 51267
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49947: LD_ADDR_VAR 0 19
49951: PUSH
49952: LD_VAR 0 18
49956: PPUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 30
49962: PUSH
49963: LD_INT 29
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 30
49972: PUSH
49973: LD_INT 30
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: PPUSH
49985: CALL_OW 72
49989: ST_TO_ADDR
// if tmp then
49990: LD_VAR 0 19
49994: IFFALSE 50042
// for i in tmp do
49996: LD_ADDR_VAR 0 8
50000: PUSH
50001: LD_VAR 0 19
50005: PUSH
50006: FOR_IN
50007: IFFALSE 50040
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50009: LD_VAR 0 8
50013: PPUSH
50014: CALL_OW 250
50018: PPUSH
50019: LD_VAR 0 8
50023: PPUSH
50024: CALL_OW 251
50028: PPUSH
50029: LD_VAR 0 16
50033: PPUSH
50034: CALL_OW 441
50038: GO 50006
50040: POP
50041: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50042: LD_VAR 0 18
50046: PPUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 30
50052: PUSH
50053: LD_INT 32
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 30
50062: PUSH
50063: LD_INT 33
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: PPUSH
50075: CALL_OW 72
50079: IFFALSE 50167
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50081: LD_ADDR_VAR 0 8
50085: PUSH
50086: LD_VAR 0 18
50090: PPUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 30
50096: PUSH
50097: LD_INT 32
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 30
50106: PUSH
50107: LD_INT 33
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: PPUSH
50119: CALL_OW 72
50123: PUSH
50124: FOR_IN
50125: IFFALSE 50165
// begin if not GetBWeapon ( i ) then
50127: LD_VAR 0 8
50131: PPUSH
50132: CALL_OW 269
50136: NOT
50137: IFFALSE 50163
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50139: LD_VAR 0 8
50143: PPUSH
50144: LD_VAR 0 8
50148: PPUSH
50149: LD_VAR 0 2
50153: PPUSH
50154: CALL 51413 0 2
50158: PPUSH
50159: CALL_OW 431
// end ;
50163: GO 50124
50165: POP
50166: POP
// end ; for i = 1 to personel do
50167: LD_ADDR_VAR 0 8
50171: PUSH
50172: DOUBLE
50173: LD_INT 1
50175: DEC
50176: ST_TO_ADDR
50177: LD_VAR 0 6
50181: PUSH
50182: FOR_TO
50183: IFFALSE 51247
// begin if i > 4 then
50185: LD_VAR 0 8
50189: PUSH
50190: LD_INT 4
50192: GREATER
50193: IFFALSE 50197
// break ;
50195: GO 51247
// case i of 1 :
50197: LD_VAR 0 8
50201: PUSH
50202: LD_INT 1
50204: DOUBLE
50205: EQUAL
50206: IFTRUE 50210
50208: GO 50290
50210: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50211: LD_ADDR_VAR 0 12
50215: PUSH
50216: LD_VAR 0 18
50220: PPUSH
50221: LD_INT 22
50223: PUSH
50224: LD_VAR 0 16
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 58
50235: PUSH
50236: EMPTY
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 30
50244: PUSH
50245: LD_INT 32
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 30
50254: PUSH
50255: LD_INT 4
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 30
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: LIST
50282: PPUSH
50283: CALL_OW 72
50287: ST_TO_ADDR
50288: GO 50512
50290: LD_INT 2
50292: DOUBLE
50293: EQUAL
50294: IFTRUE 50298
50296: GO 50360
50298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50299: LD_ADDR_VAR 0 12
50303: PUSH
50304: LD_VAR 0 18
50308: PPUSH
50309: LD_INT 22
50311: PUSH
50312: LD_VAR 0 16
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 30
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 30
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PPUSH
50353: CALL_OW 72
50357: ST_TO_ADDR
50358: GO 50512
50360: LD_INT 3
50362: DOUBLE
50363: EQUAL
50364: IFTRUE 50368
50366: GO 50430
50368: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50369: LD_ADDR_VAR 0 12
50373: PUSH
50374: LD_VAR 0 18
50378: PPUSH
50379: LD_INT 22
50381: PUSH
50382: LD_VAR 0 16
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 30
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 30
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PPUSH
50423: CALL_OW 72
50427: ST_TO_ADDR
50428: GO 50512
50430: LD_INT 4
50432: DOUBLE
50433: EQUAL
50434: IFTRUE 50438
50436: GO 50511
50438: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50439: LD_ADDR_VAR 0 12
50443: PUSH
50444: LD_VAR 0 18
50448: PPUSH
50449: LD_INT 22
50451: PUSH
50452: LD_VAR 0 16
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 30
50466: PUSH
50467: LD_INT 6
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 30
50476: PUSH
50477: LD_INT 7
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 30
50486: PUSH
50487: LD_INT 8
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PPUSH
50504: CALL_OW 72
50508: ST_TO_ADDR
50509: GO 50512
50511: POP
// if i = 1 then
50512: LD_VAR 0 8
50516: PUSH
50517: LD_INT 1
50519: EQUAL
50520: IFFALSE 50631
// begin tmp := [ ] ;
50522: LD_ADDR_VAR 0 19
50526: PUSH
50527: EMPTY
50528: ST_TO_ADDR
// for j in f do
50529: LD_ADDR_VAR 0 9
50533: PUSH
50534: LD_VAR 0 12
50538: PUSH
50539: FOR_IN
50540: IFFALSE 50613
// if GetBType ( j ) = b_bunker then
50542: LD_VAR 0 9
50546: PPUSH
50547: CALL_OW 266
50551: PUSH
50552: LD_INT 32
50554: EQUAL
50555: IFFALSE 50582
// tmp := Insert ( tmp , 1 , j ) else
50557: LD_ADDR_VAR 0 19
50561: PUSH
50562: LD_VAR 0 19
50566: PPUSH
50567: LD_INT 1
50569: PPUSH
50570: LD_VAR 0 9
50574: PPUSH
50575: CALL_OW 2
50579: ST_TO_ADDR
50580: GO 50611
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50582: LD_ADDR_VAR 0 19
50586: PUSH
50587: LD_VAR 0 19
50591: PPUSH
50592: LD_VAR 0 19
50596: PUSH
50597: LD_INT 1
50599: PLUS
50600: PPUSH
50601: LD_VAR 0 9
50605: PPUSH
50606: CALL_OW 2
50610: ST_TO_ADDR
50611: GO 50539
50613: POP
50614: POP
// if tmp then
50615: LD_VAR 0 19
50619: IFFALSE 50631
// f := tmp ;
50621: LD_ADDR_VAR 0 12
50625: PUSH
50626: LD_VAR 0 19
50630: ST_TO_ADDR
// end ; x := personel [ i ] ;
50631: LD_ADDR_VAR 0 13
50635: PUSH
50636: LD_VAR 0 6
50640: PUSH
50641: LD_VAR 0 8
50645: ARRAY
50646: ST_TO_ADDR
// if x = - 1 then
50647: LD_VAR 0 13
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: EQUAL
50656: IFFALSE 50865
// begin for j in f do
50658: LD_ADDR_VAR 0 9
50662: PUSH
50663: LD_VAR 0 12
50667: PUSH
50668: FOR_IN
50669: IFFALSE 50861
// repeat InitHc ;
50671: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50675: LD_VAR 0 9
50679: PPUSH
50680: CALL_OW 266
50684: PUSH
50685: LD_INT 5
50687: EQUAL
50688: IFFALSE 50758
// begin if UnitsInside ( j ) < 3 then
50690: LD_VAR 0 9
50694: PPUSH
50695: CALL_OW 313
50699: PUSH
50700: LD_INT 3
50702: LESS
50703: IFFALSE 50739
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50705: LD_INT 0
50707: PPUSH
50708: LD_INT 5
50710: PUSH
50711: LD_INT 8
50713: PUSH
50714: LD_INT 9
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: PUSH
50722: LD_VAR 0 17
50726: ARRAY
50727: PPUSH
50728: LD_VAR 0 4
50732: PPUSH
50733: CALL_OW 380
50737: GO 50756
// PrepareHuman ( false , i , skill ) ;
50739: LD_INT 0
50741: PPUSH
50742: LD_VAR 0 8
50746: PPUSH
50747: LD_VAR 0 4
50751: PPUSH
50752: CALL_OW 380
// end else
50756: GO 50775
// PrepareHuman ( false , i , skill ) ;
50758: LD_INT 0
50760: PPUSH
50761: LD_VAR 0 8
50765: PPUSH
50766: LD_VAR 0 4
50770: PPUSH
50771: CALL_OW 380
// un := CreateHuman ;
50775: LD_ADDR_VAR 0 14
50779: PUSH
50780: CALL_OW 44
50784: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50785: LD_ADDR_VAR 0 7
50789: PUSH
50790: LD_VAR 0 7
50794: PPUSH
50795: LD_INT 1
50797: PPUSH
50798: LD_VAR 0 14
50802: PPUSH
50803: CALL_OW 2
50807: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50808: LD_VAR 0 14
50812: PPUSH
50813: LD_VAR 0 9
50817: PPUSH
50818: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50822: LD_VAR 0 9
50826: PPUSH
50827: CALL_OW 313
50831: PUSH
50832: LD_INT 6
50834: EQUAL
50835: PUSH
50836: LD_VAR 0 9
50840: PPUSH
50841: CALL_OW 266
50845: PUSH
50846: LD_INT 32
50848: PUSH
50849: LD_INT 31
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: IN
50856: OR
50857: IFFALSE 50671
50859: GO 50668
50861: POP
50862: POP
// end else
50863: GO 51245
// for j = 1 to x do
50865: LD_ADDR_VAR 0 9
50869: PUSH
50870: DOUBLE
50871: LD_INT 1
50873: DEC
50874: ST_TO_ADDR
50875: LD_VAR 0 13
50879: PUSH
50880: FOR_TO
50881: IFFALSE 51243
// begin InitHc ;
50883: CALL_OW 19
// if not f then
50887: LD_VAR 0 12
50891: NOT
50892: IFFALSE 50981
// begin PrepareHuman ( false , i , skill ) ;
50894: LD_INT 0
50896: PPUSH
50897: LD_VAR 0 8
50901: PPUSH
50902: LD_VAR 0 4
50906: PPUSH
50907: CALL_OW 380
// un := CreateHuman ;
50911: LD_ADDR_VAR 0 14
50915: PUSH
50916: CALL_OW 44
50920: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50921: LD_ADDR_VAR 0 7
50925: PUSH
50926: LD_VAR 0 7
50930: PPUSH
50931: LD_INT 1
50933: PPUSH
50934: LD_VAR 0 14
50938: PPUSH
50939: CALL_OW 2
50943: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50944: LD_VAR 0 14
50948: PPUSH
50949: LD_VAR 0 1
50953: PPUSH
50954: CALL_OW 250
50958: PPUSH
50959: LD_VAR 0 1
50963: PPUSH
50964: CALL_OW 251
50968: PPUSH
50969: LD_INT 10
50971: PPUSH
50972: LD_INT 0
50974: PPUSH
50975: CALL_OW 50
// continue ;
50979: GO 50880
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50981: LD_VAR 0 12
50985: PUSH
50986: LD_INT 1
50988: ARRAY
50989: PPUSH
50990: CALL_OW 313
50994: PUSH
50995: LD_VAR 0 12
50999: PUSH
51000: LD_INT 1
51002: ARRAY
51003: PPUSH
51004: CALL_OW 266
51008: PUSH
51009: LD_INT 32
51011: PUSH
51012: LD_INT 31
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: IN
51019: AND
51020: PUSH
51021: LD_VAR 0 12
51025: PUSH
51026: LD_INT 1
51028: ARRAY
51029: PPUSH
51030: CALL_OW 313
51034: PUSH
51035: LD_INT 6
51037: EQUAL
51038: OR
51039: IFFALSE 51059
// f := Delete ( f , 1 ) ;
51041: LD_ADDR_VAR 0 12
51045: PUSH
51046: LD_VAR 0 12
51050: PPUSH
51051: LD_INT 1
51053: PPUSH
51054: CALL_OW 3
51058: ST_TO_ADDR
// if not f then
51059: LD_VAR 0 12
51063: NOT
51064: IFFALSE 51082
// begin x := x + 2 ;
51066: LD_ADDR_VAR 0 13
51070: PUSH
51071: LD_VAR 0 13
51075: PUSH
51076: LD_INT 2
51078: PLUS
51079: ST_TO_ADDR
// continue ;
51080: GO 50880
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51082: LD_VAR 0 12
51086: PUSH
51087: LD_INT 1
51089: ARRAY
51090: PPUSH
51091: CALL_OW 266
51095: PUSH
51096: LD_INT 5
51098: EQUAL
51099: IFFALSE 51173
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51101: LD_VAR 0 12
51105: PUSH
51106: LD_INT 1
51108: ARRAY
51109: PPUSH
51110: CALL_OW 313
51114: PUSH
51115: LD_INT 3
51117: LESS
51118: IFFALSE 51154
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51120: LD_INT 0
51122: PPUSH
51123: LD_INT 5
51125: PUSH
51126: LD_INT 8
51128: PUSH
51129: LD_INT 9
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: PUSH
51137: LD_VAR 0 17
51141: ARRAY
51142: PPUSH
51143: LD_VAR 0 4
51147: PPUSH
51148: CALL_OW 380
51152: GO 51171
// PrepareHuman ( false , i , skill ) ;
51154: LD_INT 0
51156: PPUSH
51157: LD_VAR 0 8
51161: PPUSH
51162: LD_VAR 0 4
51166: PPUSH
51167: CALL_OW 380
// end else
51171: GO 51190
// PrepareHuman ( false , i , skill ) ;
51173: LD_INT 0
51175: PPUSH
51176: LD_VAR 0 8
51180: PPUSH
51181: LD_VAR 0 4
51185: PPUSH
51186: CALL_OW 380
// un := CreateHuman ;
51190: LD_ADDR_VAR 0 14
51194: PUSH
51195: CALL_OW 44
51199: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51200: LD_ADDR_VAR 0 7
51204: PUSH
51205: LD_VAR 0 7
51209: PPUSH
51210: LD_INT 1
51212: PPUSH
51213: LD_VAR 0 14
51217: PPUSH
51218: CALL_OW 2
51222: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51223: LD_VAR 0 14
51227: PPUSH
51228: LD_VAR 0 12
51232: PUSH
51233: LD_INT 1
51235: ARRAY
51236: PPUSH
51237: CALL_OW 52
// end ;
51241: GO 50880
51243: POP
51244: POP
// end ;
51245: GO 50182
51247: POP
51248: POP
// result := result ^ buildings ;
51249: LD_ADDR_VAR 0 7
51253: PUSH
51254: LD_VAR 0 7
51258: PUSH
51259: LD_VAR 0 18
51263: ADD
51264: ST_TO_ADDR
// end else
51265: GO 51408
// begin for i = 1 to personel do
51267: LD_ADDR_VAR 0 8
51271: PUSH
51272: DOUBLE
51273: LD_INT 1
51275: DEC
51276: ST_TO_ADDR
51277: LD_VAR 0 6
51281: PUSH
51282: FOR_TO
51283: IFFALSE 51406
// begin if i > 4 then
51285: LD_VAR 0 8
51289: PUSH
51290: LD_INT 4
51292: GREATER
51293: IFFALSE 51297
// break ;
51295: GO 51406
// x := personel [ i ] ;
51297: LD_ADDR_VAR 0 13
51301: PUSH
51302: LD_VAR 0 6
51306: PUSH
51307: LD_VAR 0 8
51311: ARRAY
51312: ST_TO_ADDR
// if x = - 1 then
51313: LD_VAR 0 13
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: EQUAL
51322: IFFALSE 51326
// continue ;
51324: GO 51282
// PrepareHuman ( false , i , skill ) ;
51326: LD_INT 0
51328: PPUSH
51329: LD_VAR 0 8
51333: PPUSH
51334: LD_VAR 0 4
51338: PPUSH
51339: CALL_OW 380
// un := CreateHuman ;
51343: LD_ADDR_VAR 0 14
51347: PUSH
51348: CALL_OW 44
51352: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51353: LD_VAR 0 14
51357: PPUSH
51358: LD_VAR 0 1
51362: PPUSH
51363: CALL_OW 250
51367: PPUSH
51368: LD_VAR 0 1
51372: PPUSH
51373: CALL_OW 251
51377: PPUSH
51378: LD_INT 10
51380: PPUSH
51381: LD_INT 0
51383: PPUSH
51384: CALL_OW 50
// result := result ^ un ;
51388: LD_ADDR_VAR 0 7
51392: PUSH
51393: LD_VAR 0 7
51397: PUSH
51398: LD_VAR 0 14
51402: ADD
51403: ST_TO_ADDR
// end ;
51404: GO 51282
51406: POP
51407: POP
// end ; end ;
51408: LD_VAR 0 7
51412: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51413: LD_INT 0
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
51429: PPUSH
51430: PPUSH
// result := false ;
51431: LD_ADDR_VAR 0 3
51435: PUSH
51436: LD_INT 0
51438: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51439: LD_VAR 0 1
51443: NOT
51444: PUSH
51445: LD_VAR 0 1
51449: PPUSH
51450: CALL_OW 266
51454: PUSH
51455: LD_INT 32
51457: PUSH
51458: LD_INT 33
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: IN
51465: NOT
51466: OR
51467: IFFALSE 51471
// exit ;
51469: GO 52580
// nat := GetNation ( tower ) ;
51471: LD_ADDR_VAR 0 12
51475: PUSH
51476: LD_VAR 0 1
51480: PPUSH
51481: CALL_OW 248
51485: ST_TO_ADDR
// side := GetSide ( tower ) ;
51486: LD_ADDR_VAR 0 16
51490: PUSH
51491: LD_VAR 0 1
51495: PPUSH
51496: CALL_OW 255
51500: ST_TO_ADDR
// x := GetX ( tower ) ;
51501: LD_ADDR_VAR 0 10
51505: PUSH
51506: LD_VAR 0 1
51510: PPUSH
51511: CALL_OW 250
51515: ST_TO_ADDR
// y := GetY ( tower ) ;
51516: LD_ADDR_VAR 0 11
51520: PUSH
51521: LD_VAR 0 1
51525: PPUSH
51526: CALL_OW 251
51530: ST_TO_ADDR
// if not x or not y then
51531: LD_VAR 0 10
51535: NOT
51536: PUSH
51537: LD_VAR 0 11
51541: NOT
51542: OR
51543: IFFALSE 51547
// exit ;
51545: GO 52580
// weapon := 0 ;
51547: LD_ADDR_VAR 0 18
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// fac_list := [ ] ;
51555: LD_ADDR_VAR 0 17
51559: PUSH
51560: EMPTY
51561: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51562: LD_ADDR_VAR 0 6
51566: PUSH
51567: LD_VAR 0 1
51571: PPUSH
51572: CALL_OW 274
51576: PPUSH
51577: LD_VAR 0 2
51581: PPUSH
51582: LD_INT 0
51584: PPUSH
51585: CALL 49151 0 3
51589: PPUSH
51590: LD_INT 30
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PPUSH
51600: CALL_OW 72
51604: ST_TO_ADDR
// if not factories then
51605: LD_VAR 0 6
51609: NOT
51610: IFFALSE 51614
// exit ;
51612: GO 52580
// for i in factories do
51614: LD_ADDR_VAR 0 8
51618: PUSH
51619: LD_VAR 0 6
51623: PUSH
51624: FOR_IN
51625: IFFALSE 51650
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51627: LD_ADDR_VAR 0 17
51631: PUSH
51632: LD_VAR 0 17
51636: PUSH
51637: LD_VAR 0 8
51641: PPUSH
51642: CALL_OW 478
51646: UNION
51647: ST_TO_ADDR
51648: GO 51624
51650: POP
51651: POP
// if not fac_list then
51652: LD_VAR 0 17
51656: NOT
51657: IFFALSE 51661
// exit ;
51659: GO 52580
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51661: LD_ADDR_VAR 0 5
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: LD_INT 5
51671: PUSH
51672: LD_INT 9
51674: PUSH
51675: LD_INT 10
51677: PUSH
51678: LD_INT 6
51680: PUSH
51681: LD_INT 7
51683: PUSH
51684: LD_INT 11
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 27
51698: PUSH
51699: LD_INT 28
51701: PUSH
51702: LD_INT 26
51704: PUSH
51705: LD_INT 30
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 43
51716: PUSH
51717: LD_INT 44
51719: PUSH
51720: LD_INT 46
51722: PUSH
51723: LD_INT 45
51725: PUSH
51726: LD_INT 47
51728: PUSH
51729: LD_INT 49
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: PUSH
51745: LD_VAR 0 12
51749: ARRAY
51750: ST_TO_ADDR
// list := list isect fac_list ;
51751: LD_ADDR_VAR 0 5
51755: PUSH
51756: LD_VAR 0 5
51760: PUSH
51761: LD_VAR 0 17
51765: ISECT
51766: ST_TO_ADDR
// if not list then
51767: LD_VAR 0 5
51771: NOT
51772: IFFALSE 51776
// exit ;
51774: GO 52580
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51776: LD_VAR 0 12
51780: PUSH
51781: LD_INT 3
51783: EQUAL
51784: PUSH
51785: LD_INT 49
51787: PUSH
51788: LD_VAR 0 5
51792: IN
51793: AND
51794: PUSH
51795: LD_INT 31
51797: PPUSH
51798: LD_VAR 0 16
51802: PPUSH
51803: CALL_OW 321
51807: PUSH
51808: LD_INT 2
51810: EQUAL
51811: AND
51812: IFFALSE 51872
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51814: LD_INT 22
51816: PUSH
51817: LD_VAR 0 16
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 35
51828: PUSH
51829: LD_INT 49
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 91
51838: PUSH
51839: LD_VAR 0 1
51843: PUSH
51844: LD_INT 10
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: PPUSH
51857: CALL_OW 69
51861: NOT
51862: IFFALSE 51872
// weapon := ru_time_lapser ;
51864: LD_ADDR_VAR 0 18
51868: PUSH
51869: LD_INT 49
51871: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51872: LD_VAR 0 12
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: IN
51887: PUSH
51888: LD_INT 11
51890: PUSH
51891: LD_VAR 0 5
51895: IN
51896: PUSH
51897: LD_INT 30
51899: PUSH
51900: LD_VAR 0 5
51904: IN
51905: OR
51906: AND
51907: PUSH
51908: LD_INT 6
51910: PPUSH
51911: LD_VAR 0 16
51915: PPUSH
51916: CALL_OW 321
51920: PUSH
51921: LD_INT 2
51923: EQUAL
51924: AND
51925: IFFALSE 52090
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51927: LD_INT 22
51929: PUSH
51930: LD_VAR 0 16
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 35
51944: PUSH
51945: LD_INT 11
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 35
51954: PUSH
51955: LD_INT 30
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 91
51969: PUSH
51970: LD_VAR 0 1
51974: PUSH
51975: LD_INT 18
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: PPUSH
51988: CALL_OW 69
51992: NOT
51993: PUSH
51994: LD_INT 22
51996: PUSH
51997: LD_VAR 0 16
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 30
52011: PUSH
52012: LD_INT 32
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 30
52021: PUSH
52022: LD_INT 33
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 91
52036: PUSH
52037: LD_VAR 0 1
52041: PUSH
52042: LD_INT 12
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: PPUSH
52058: CALL_OW 69
52062: PUSH
52063: LD_INT 2
52065: GREATER
52066: AND
52067: IFFALSE 52090
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52069: LD_ADDR_VAR 0 18
52073: PUSH
52074: LD_INT 11
52076: PUSH
52077: LD_INT 30
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_VAR 0 12
52088: ARRAY
52089: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52090: LD_VAR 0 18
52094: NOT
52095: PUSH
52096: LD_INT 40
52098: PPUSH
52099: LD_VAR 0 16
52103: PPUSH
52104: CALL_OW 321
52108: PUSH
52109: LD_INT 2
52111: EQUAL
52112: AND
52113: PUSH
52114: LD_INT 7
52116: PUSH
52117: LD_VAR 0 5
52121: IN
52122: PUSH
52123: LD_INT 28
52125: PUSH
52126: LD_VAR 0 5
52130: IN
52131: OR
52132: PUSH
52133: LD_INT 45
52135: PUSH
52136: LD_VAR 0 5
52140: IN
52141: OR
52142: AND
52143: IFFALSE 52397
// begin hex := GetHexInfo ( x , y ) ;
52145: LD_ADDR_VAR 0 4
52149: PUSH
52150: LD_VAR 0 10
52154: PPUSH
52155: LD_VAR 0 11
52159: PPUSH
52160: CALL_OW 546
52164: ST_TO_ADDR
// if hex [ 1 ] then
52165: LD_VAR 0 4
52169: PUSH
52170: LD_INT 1
52172: ARRAY
52173: IFFALSE 52177
// exit ;
52175: GO 52580
// height := hex [ 2 ] ;
52177: LD_ADDR_VAR 0 15
52181: PUSH
52182: LD_VAR 0 4
52186: PUSH
52187: LD_INT 2
52189: ARRAY
52190: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52191: LD_ADDR_VAR 0 14
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 5
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// for i in tmp do
52214: LD_ADDR_VAR 0 8
52218: PUSH
52219: LD_VAR 0 14
52223: PUSH
52224: FOR_IN
52225: IFFALSE 52395
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52227: LD_ADDR_VAR 0 9
52231: PUSH
52232: LD_VAR 0 10
52236: PPUSH
52237: LD_VAR 0 8
52241: PPUSH
52242: LD_INT 5
52244: PPUSH
52245: CALL_OW 272
52249: PUSH
52250: LD_VAR 0 11
52254: PPUSH
52255: LD_VAR 0 8
52259: PPUSH
52260: LD_INT 5
52262: PPUSH
52263: CALL_OW 273
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52272: LD_VAR 0 9
52276: PUSH
52277: LD_INT 1
52279: ARRAY
52280: PPUSH
52281: LD_VAR 0 9
52285: PUSH
52286: LD_INT 2
52288: ARRAY
52289: PPUSH
52290: CALL_OW 488
52294: IFFALSE 52393
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52296: LD_ADDR_VAR 0 4
52300: PUSH
52301: LD_VAR 0 9
52305: PUSH
52306: LD_INT 1
52308: ARRAY
52309: PPUSH
52310: LD_VAR 0 9
52314: PUSH
52315: LD_INT 2
52317: ARRAY
52318: PPUSH
52319: CALL_OW 546
52323: ST_TO_ADDR
// if hex [ 1 ] then
52324: LD_VAR 0 4
52328: PUSH
52329: LD_INT 1
52331: ARRAY
52332: IFFALSE 52336
// continue ;
52334: GO 52224
// h := hex [ 2 ] ;
52336: LD_ADDR_VAR 0 13
52340: PUSH
52341: LD_VAR 0 4
52345: PUSH
52346: LD_INT 2
52348: ARRAY
52349: ST_TO_ADDR
// if h + 7 < height then
52350: LD_VAR 0 13
52354: PUSH
52355: LD_INT 7
52357: PLUS
52358: PUSH
52359: LD_VAR 0 15
52363: LESS
52364: IFFALSE 52393
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52366: LD_ADDR_VAR 0 18
52370: PUSH
52371: LD_INT 7
52373: PUSH
52374: LD_INT 28
52376: PUSH
52377: LD_INT 45
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: PUSH
52385: LD_VAR 0 12
52389: ARRAY
52390: ST_TO_ADDR
// break ;
52391: GO 52395
// end ; end ; end ;
52393: GO 52224
52395: POP
52396: POP
// end ; if not weapon then
52397: LD_VAR 0 18
52401: NOT
52402: IFFALSE 52462
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52404: LD_ADDR_VAR 0 5
52408: PUSH
52409: LD_VAR 0 5
52413: PUSH
52414: LD_INT 11
52416: PUSH
52417: LD_INT 30
52419: PUSH
52420: LD_INT 49
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: DIFF
52428: ST_TO_ADDR
// if not list then
52429: LD_VAR 0 5
52433: NOT
52434: IFFALSE 52438
// exit ;
52436: GO 52580
// weapon := list [ rand ( 1 , list ) ] ;
52438: LD_ADDR_VAR 0 18
52442: PUSH
52443: LD_VAR 0 5
52447: PUSH
52448: LD_INT 1
52450: PPUSH
52451: LD_VAR 0 5
52455: PPUSH
52456: CALL_OW 12
52460: ARRAY
52461: ST_TO_ADDR
// end ; if weapon then
52462: LD_VAR 0 18
52466: IFFALSE 52580
// begin tmp := CostOfWeapon ( weapon ) ;
52468: LD_ADDR_VAR 0 14
52472: PUSH
52473: LD_VAR 0 18
52477: PPUSH
52478: CALL_OW 451
52482: ST_TO_ADDR
// j := GetBase ( tower ) ;
52483: LD_ADDR_VAR 0 9
52487: PUSH
52488: LD_VAR 0 1
52492: PPUSH
52493: CALL_OW 274
52497: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52498: LD_VAR 0 9
52502: PPUSH
52503: LD_INT 1
52505: PPUSH
52506: CALL_OW 275
52510: PUSH
52511: LD_VAR 0 14
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: GREATEREQUAL
52520: PUSH
52521: LD_VAR 0 9
52525: PPUSH
52526: LD_INT 2
52528: PPUSH
52529: CALL_OW 275
52533: PUSH
52534: LD_VAR 0 14
52538: PUSH
52539: LD_INT 2
52541: ARRAY
52542: GREATEREQUAL
52543: AND
52544: PUSH
52545: LD_VAR 0 9
52549: PPUSH
52550: LD_INT 3
52552: PPUSH
52553: CALL_OW 275
52557: PUSH
52558: LD_VAR 0 14
52562: PUSH
52563: LD_INT 3
52565: ARRAY
52566: GREATEREQUAL
52567: AND
52568: IFFALSE 52580
// result := weapon ;
52570: LD_ADDR_VAR 0 3
52574: PUSH
52575: LD_VAR 0 18
52579: ST_TO_ADDR
// end ; end ;
52580: LD_VAR 0 3
52584: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52585: LD_INT 0
52587: PPUSH
52588: PPUSH
// result := true ;
52589: LD_ADDR_VAR 0 3
52593: PUSH
52594: LD_INT 1
52596: ST_TO_ADDR
// if array1 = array2 then
52597: LD_VAR 0 1
52601: PUSH
52602: LD_VAR 0 2
52606: EQUAL
52607: IFFALSE 52667
// begin for i = 1 to array1 do
52609: LD_ADDR_VAR 0 4
52613: PUSH
52614: DOUBLE
52615: LD_INT 1
52617: DEC
52618: ST_TO_ADDR
52619: LD_VAR 0 1
52623: PUSH
52624: FOR_TO
52625: IFFALSE 52663
// if array1 [ i ] <> array2 [ i ] then
52627: LD_VAR 0 1
52631: PUSH
52632: LD_VAR 0 4
52636: ARRAY
52637: PUSH
52638: LD_VAR 0 2
52642: PUSH
52643: LD_VAR 0 4
52647: ARRAY
52648: NONEQUAL
52649: IFFALSE 52661
// begin result := false ;
52651: LD_ADDR_VAR 0 3
52655: PUSH
52656: LD_INT 0
52658: ST_TO_ADDR
// break ;
52659: GO 52663
// end ;
52661: GO 52624
52663: POP
52664: POP
// end else
52665: GO 52675
// result := false ;
52667: LD_ADDR_VAR 0 3
52671: PUSH
52672: LD_INT 0
52674: ST_TO_ADDR
// end ;
52675: LD_VAR 0 3
52679: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52680: LD_INT 0
52682: PPUSH
52683: PPUSH
// if not array1 or not array2 then
52684: LD_VAR 0 1
52688: NOT
52689: PUSH
52690: LD_VAR 0 2
52694: NOT
52695: OR
52696: IFFALSE 52700
// exit ;
52698: GO 52764
// result := true ;
52700: LD_ADDR_VAR 0 3
52704: PUSH
52705: LD_INT 1
52707: ST_TO_ADDR
// for i = 1 to array1 do
52708: LD_ADDR_VAR 0 4
52712: PUSH
52713: DOUBLE
52714: LD_INT 1
52716: DEC
52717: ST_TO_ADDR
52718: LD_VAR 0 1
52722: PUSH
52723: FOR_TO
52724: IFFALSE 52762
// if array1 [ i ] <> array2 [ i ] then
52726: LD_VAR 0 1
52730: PUSH
52731: LD_VAR 0 4
52735: ARRAY
52736: PUSH
52737: LD_VAR 0 2
52741: PUSH
52742: LD_VAR 0 4
52746: ARRAY
52747: NONEQUAL
52748: IFFALSE 52760
// begin result := false ;
52750: LD_ADDR_VAR 0 3
52754: PUSH
52755: LD_INT 0
52757: ST_TO_ADDR
// break ;
52758: GO 52762
// end ;
52760: GO 52723
52762: POP
52763: POP
// end ;
52764: LD_VAR 0 3
52768: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52769: LD_INT 0
52771: PPUSH
52772: PPUSH
52773: PPUSH
// pom := GetBase ( fac ) ;
52774: LD_ADDR_VAR 0 5
52778: PUSH
52779: LD_VAR 0 1
52783: PPUSH
52784: CALL_OW 274
52788: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52789: LD_ADDR_VAR 0 4
52793: PUSH
52794: LD_VAR 0 2
52798: PUSH
52799: LD_INT 1
52801: ARRAY
52802: PPUSH
52803: LD_VAR 0 2
52807: PUSH
52808: LD_INT 2
52810: ARRAY
52811: PPUSH
52812: LD_VAR 0 2
52816: PUSH
52817: LD_INT 3
52819: ARRAY
52820: PPUSH
52821: LD_VAR 0 2
52825: PUSH
52826: LD_INT 4
52828: ARRAY
52829: PPUSH
52830: CALL_OW 449
52834: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52835: LD_ADDR_VAR 0 3
52839: PUSH
52840: LD_VAR 0 5
52844: PPUSH
52845: LD_INT 1
52847: PPUSH
52848: CALL_OW 275
52852: PUSH
52853: LD_VAR 0 4
52857: PUSH
52858: LD_INT 1
52860: ARRAY
52861: GREATEREQUAL
52862: PUSH
52863: LD_VAR 0 5
52867: PPUSH
52868: LD_INT 2
52870: PPUSH
52871: CALL_OW 275
52875: PUSH
52876: LD_VAR 0 4
52880: PUSH
52881: LD_INT 2
52883: ARRAY
52884: GREATEREQUAL
52885: AND
52886: PUSH
52887: LD_VAR 0 5
52891: PPUSH
52892: LD_INT 3
52894: PPUSH
52895: CALL_OW 275
52899: PUSH
52900: LD_VAR 0 4
52904: PUSH
52905: LD_INT 3
52907: ARRAY
52908: GREATEREQUAL
52909: AND
52910: ST_TO_ADDR
// end ;
52911: LD_VAR 0 3
52915: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52916: LD_INT 0
52918: PPUSH
52919: PPUSH
52920: PPUSH
52921: PPUSH
// pom := GetBase ( building ) ;
52922: LD_ADDR_VAR 0 3
52926: PUSH
52927: LD_VAR 0 1
52931: PPUSH
52932: CALL_OW 274
52936: ST_TO_ADDR
// if not pom then
52937: LD_VAR 0 3
52941: NOT
52942: IFFALSE 52946
// exit ;
52944: GO 53116
// btype := GetBType ( building ) ;
52946: LD_ADDR_VAR 0 5
52950: PUSH
52951: LD_VAR 0 1
52955: PPUSH
52956: CALL_OW 266
52960: ST_TO_ADDR
// if btype = b_armoury then
52961: LD_VAR 0 5
52965: PUSH
52966: LD_INT 4
52968: EQUAL
52969: IFFALSE 52979
// btype := b_barracks ;
52971: LD_ADDR_VAR 0 5
52975: PUSH
52976: LD_INT 5
52978: ST_TO_ADDR
// if btype = b_depot then
52979: LD_VAR 0 5
52983: PUSH
52984: LD_INT 0
52986: EQUAL
52987: IFFALSE 52997
// btype := b_warehouse ;
52989: LD_ADDR_VAR 0 5
52993: PUSH
52994: LD_INT 1
52996: ST_TO_ADDR
// if btype = b_workshop then
52997: LD_VAR 0 5
53001: PUSH
53002: LD_INT 2
53004: EQUAL
53005: IFFALSE 53015
// btype := b_factory ;
53007: LD_ADDR_VAR 0 5
53011: PUSH
53012: LD_INT 3
53014: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53015: LD_ADDR_VAR 0 4
53019: PUSH
53020: LD_VAR 0 5
53024: PPUSH
53025: LD_VAR 0 1
53029: PPUSH
53030: CALL_OW 248
53034: PPUSH
53035: CALL_OW 450
53039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53040: LD_ADDR_VAR 0 2
53044: PUSH
53045: LD_VAR 0 3
53049: PPUSH
53050: LD_INT 1
53052: PPUSH
53053: CALL_OW 275
53057: PUSH
53058: LD_VAR 0 4
53062: PUSH
53063: LD_INT 1
53065: ARRAY
53066: GREATEREQUAL
53067: PUSH
53068: LD_VAR 0 3
53072: PPUSH
53073: LD_INT 2
53075: PPUSH
53076: CALL_OW 275
53080: PUSH
53081: LD_VAR 0 4
53085: PUSH
53086: LD_INT 2
53088: ARRAY
53089: GREATEREQUAL
53090: AND
53091: PUSH
53092: LD_VAR 0 3
53096: PPUSH
53097: LD_INT 3
53099: PPUSH
53100: CALL_OW 275
53104: PUSH
53105: LD_VAR 0 4
53109: PUSH
53110: LD_INT 3
53112: ARRAY
53113: GREATEREQUAL
53114: AND
53115: ST_TO_ADDR
// end ;
53116: LD_VAR 0 2
53120: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53121: LD_INT 0
53123: PPUSH
53124: PPUSH
53125: PPUSH
// pom := GetBase ( building ) ;
53126: LD_ADDR_VAR 0 4
53130: PUSH
53131: LD_VAR 0 1
53135: PPUSH
53136: CALL_OW 274
53140: ST_TO_ADDR
// if not pom then
53141: LD_VAR 0 4
53145: NOT
53146: IFFALSE 53150
// exit ;
53148: GO 53251
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53150: LD_ADDR_VAR 0 5
53154: PUSH
53155: LD_VAR 0 2
53159: PPUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: CALL_OW 248
53169: PPUSH
53170: CALL_OW 450
53174: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53175: LD_ADDR_VAR 0 3
53179: PUSH
53180: LD_VAR 0 4
53184: PPUSH
53185: LD_INT 1
53187: PPUSH
53188: CALL_OW 275
53192: PUSH
53193: LD_VAR 0 5
53197: PUSH
53198: LD_INT 1
53200: ARRAY
53201: GREATEREQUAL
53202: PUSH
53203: LD_VAR 0 4
53207: PPUSH
53208: LD_INT 2
53210: PPUSH
53211: CALL_OW 275
53215: PUSH
53216: LD_VAR 0 5
53220: PUSH
53221: LD_INT 2
53223: ARRAY
53224: GREATEREQUAL
53225: AND
53226: PUSH
53227: LD_VAR 0 4
53231: PPUSH
53232: LD_INT 3
53234: PPUSH
53235: CALL_OW 275
53239: PUSH
53240: LD_VAR 0 5
53244: PUSH
53245: LD_INT 3
53247: ARRAY
53248: GREATEREQUAL
53249: AND
53250: ST_TO_ADDR
// end ;
53251: LD_VAR 0 3
53255: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53256: LD_INT 0
53258: PPUSH
53259: PPUSH
53260: PPUSH
53261: PPUSH
53262: PPUSH
53263: PPUSH
53264: PPUSH
53265: PPUSH
53266: PPUSH
53267: PPUSH
53268: PPUSH
// result := false ;
53269: LD_ADDR_VAR 0 8
53273: PUSH
53274: LD_INT 0
53276: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53277: LD_VAR 0 5
53281: NOT
53282: PUSH
53283: LD_VAR 0 1
53287: NOT
53288: OR
53289: PUSH
53290: LD_VAR 0 2
53294: NOT
53295: OR
53296: PUSH
53297: LD_VAR 0 3
53301: NOT
53302: OR
53303: IFFALSE 53307
// exit ;
53305: GO 54121
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53307: LD_ADDR_VAR 0 14
53311: PUSH
53312: LD_VAR 0 1
53316: PPUSH
53317: LD_VAR 0 2
53321: PPUSH
53322: LD_VAR 0 3
53326: PPUSH
53327: LD_VAR 0 4
53331: PPUSH
53332: LD_VAR 0 5
53336: PUSH
53337: LD_INT 1
53339: ARRAY
53340: PPUSH
53341: CALL_OW 248
53345: PPUSH
53346: LD_INT 0
53348: PPUSH
53349: CALL 55374 0 6
53353: ST_TO_ADDR
// if not hexes then
53354: LD_VAR 0 14
53358: NOT
53359: IFFALSE 53363
// exit ;
53361: GO 54121
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53363: LD_ADDR_VAR 0 17
53367: PUSH
53368: LD_VAR 0 5
53372: PPUSH
53373: LD_INT 22
53375: PUSH
53376: LD_VAR 0 13
53380: PPUSH
53381: CALL_OW 255
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 30
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 30
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PPUSH
53422: CALL_OW 72
53426: ST_TO_ADDR
// for i = 1 to hexes do
53427: LD_ADDR_VAR 0 9
53431: PUSH
53432: DOUBLE
53433: LD_INT 1
53435: DEC
53436: ST_TO_ADDR
53437: LD_VAR 0 14
53441: PUSH
53442: FOR_TO
53443: IFFALSE 54119
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53445: LD_ADDR_VAR 0 13
53449: PUSH
53450: LD_VAR 0 14
53454: PUSH
53455: LD_VAR 0 9
53459: ARRAY
53460: PUSH
53461: LD_INT 1
53463: ARRAY
53464: PPUSH
53465: LD_VAR 0 14
53469: PUSH
53470: LD_VAR 0 9
53474: ARRAY
53475: PUSH
53476: LD_INT 2
53478: ARRAY
53479: PPUSH
53480: CALL_OW 428
53484: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53485: LD_VAR 0 14
53489: PUSH
53490: LD_VAR 0 9
53494: ARRAY
53495: PUSH
53496: LD_INT 1
53498: ARRAY
53499: PPUSH
53500: LD_VAR 0 14
53504: PUSH
53505: LD_VAR 0 9
53509: ARRAY
53510: PUSH
53511: LD_INT 2
53513: ARRAY
53514: PPUSH
53515: CALL_OW 351
53519: PUSH
53520: LD_VAR 0 14
53524: PUSH
53525: LD_VAR 0 9
53529: ARRAY
53530: PUSH
53531: LD_INT 1
53533: ARRAY
53534: PPUSH
53535: LD_VAR 0 14
53539: PUSH
53540: LD_VAR 0 9
53544: ARRAY
53545: PUSH
53546: LD_INT 2
53548: ARRAY
53549: PPUSH
53550: CALL_OW 488
53554: NOT
53555: OR
53556: PUSH
53557: LD_VAR 0 13
53561: PPUSH
53562: CALL_OW 247
53566: PUSH
53567: LD_INT 3
53569: EQUAL
53570: OR
53571: IFFALSE 53577
// exit ;
53573: POP
53574: POP
53575: GO 54121
// if not tmp then
53577: LD_VAR 0 13
53581: NOT
53582: IFFALSE 53586
// continue ;
53584: GO 53442
// result := true ;
53586: LD_ADDR_VAR 0 8
53590: PUSH
53591: LD_INT 1
53593: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53594: LD_VAR 0 6
53598: PUSH
53599: LD_VAR 0 13
53603: PPUSH
53604: CALL_OW 247
53608: PUSH
53609: LD_INT 2
53611: EQUAL
53612: AND
53613: PUSH
53614: LD_VAR 0 13
53618: PPUSH
53619: CALL_OW 263
53623: PUSH
53624: LD_INT 1
53626: EQUAL
53627: AND
53628: IFFALSE 53792
// begin if IsDrivenBy ( tmp ) then
53630: LD_VAR 0 13
53634: PPUSH
53635: CALL_OW 311
53639: IFFALSE 53643
// continue ;
53641: GO 53442
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53643: LD_VAR 0 6
53647: PPUSH
53648: LD_INT 3
53650: PUSH
53651: LD_INT 60
53653: PUSH
53654: EMPTY
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: LD_INT 55
53666: PUSH
53667: EMPTY
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PPUSH
53678: CALL_OW 72
53682: IFFALSE 53790
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53684: LD_ADDR_VAR 0 18
53688: PUSH
53689: LD_VAR 0 6
53693: PPUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 60
53699: PUSH
53700: EMPTY
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: LD_INT 55
53712: PUSH
53713: EMPTY
53714: LIST
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PPUSH
53724: CALL_OW 72
53728: PUSH
53729: LD_INT 1
53731: ARRAY
53732: ST_TO_ADDR
// if IsInUnit ( driver ) then
53733: LD_VAR 0 18
53737: PPUSH
53738: CALL_OW 310
53742: IFFALSE 53753
// ComExit ( driver ) ;
53744: LD_VAR 0 18
53748: PPUSH
53749: CALL 79155 0 1
// AddComEnterUnit ( driver , tmp ) ;
53753: LD_VAR 0 18
53757: PPUSH
53758: LD_VAR 0 13
53762: PPUSH
53763: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53767: LD_VAR 0 18
53771: PPUSH
53772: LD_VAR 0 7
53776: PPUSH
53777: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53781: LD_VAR 0 18
53785: PPUSH
53786: CALL_OW 181
// end ; continue ;
53790: GO 53442
// end ; if not cleaners or not tmp in cleaners then
53792: LD_VAR 0 6
53796: NOT
53797: PUSH
53798: LD_VAR 0 13
53802: PUSH
53803: LD_VAR 0 6
53807: IN
53808: NOT
53809: OR
53810: IFFALSE 54117
// begin if dep then
53812: LD_VAR 0 17
53816: IFFALSE 53952
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53818: LD_ADDR_VAR 0 16
53822: PUSH
53823: LD_VAR 0 17
53827: PUSH
53828: LD_INT 1
53830: ARRAY
53831: PPUSH
53832: CALL_OW 250
53836: PPUSH
53837: LD_VAR 0 17
53841: PUSH
53842: LD_INT 1
53844: ARRAY
53845: PPUSH
53846: CALL_OW 254
53850: PPUSH
53851: LD_INT 5
53853: PPUSH
53854: CALL_OW 272
53858: PUSH
53859: LD_VAR 0 17
53863: PUSH
53864: LD_INT 1
53866: ARRAY
53867: PPUSH
53868: CALL_OW 251
53872: PPUSH
53873: LD_VAR 0 17
53877: PUSH
53878: LD_INT 1
53880: ARRAY
53881: PPUSH
53882: CALL_OW 254
53886: PPUSH
53887: LD_INT 5
53889: PPUSH
53890: CALL_OW 273
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53899: LD_VAR 0 16
53903: PUSH
53904: LD_INT 1
53906: ARRAY
53907: PPUSH
53908: LD_VAR 0 16
53912: PUSH
53913: LD_INT 2
53915: ARRAY
53916: PPUSH
53917: CALL_OW 488
53921: IFFALSE 53952
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53923: LD_VAR 0 13
53927: PPUSH
53928: LD_VAR 0 16
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PPUSH
53937: LD_VAR 0 16
53941: PUSH
53942: LD_INT 2
53944: ARRAY
53945: PPUSH
53946: CALL_OW 111
// continue ;
53950: GO 53442
// end ; end ; r := GetDir ( tmp ) ;
53952: LD_ADDR_VAR 0 15
53956: PUSH
53957: LD_VAR 0 13
53961: PPUSH
53962: CALL_OW 254
53966: ST_TO_ADDR
// if r = 5 then
53967: LD_VAR 0 15
53971: PUSH
53972: LD_INT 5
53974: EQUAL
53975: IFFALSE 53985
// r := 0 ;
53977: LD_ADDR_VAR 0 15
53981: PUSH
53982: LD_INT 0
53984: ST_TO_ADDR
// for j = r to 5 do
53985: LD_ADDR_VAR 0 10
53989: PUSH
53990: DOUBLE
53991: LD_VAR 0 15
53995: DEC
53996: ST_TO_ADDR
53997: LD_INT 5
53999: PUSH
54000: FOR_TO
54001: IFFALSE 54115
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54003: LD_ADDR_VAR 0 11
54007: PUSH
54008: LD_VAR 0 13
54012: PPUSH
54013: CALL_OW 250
54017: PPUSH
54018: LD_VAR 0 10
54022: PPUSH
54023: LD_INT 2
54025: PPUSH
54026: CALL_OW 272
54030: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54031: LD_ADDR_VAR 0 12
54035: PUSH
54036: LD_VAR 0 13
54040: PPUSH
54041: CALL_OW 251
54045: PPUSH
54046: LD_VAR 0 10
54050: PPUSH
54051: LD_INT 2
54053: PPUSH
54054: CALL_OW 273
54058: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54059: LD_VAR 0 11
54063: PPUSH
54064: LD_VAR 0 12
54068: PPUSH
54069: CALL_OW 488
54073: PUSH
54074: LD_VAR 0 11
54078: PPUSH
54079: LD_VAR 0 12
54083: PPUSH
54084: CALL_OW 428
54088: NOT
54089: AND
54090: IFFALSE 54113
// begin ComMoveXY ( tmp , _x , _y ) ;
54092: LD_VAR 0 13
54096: PPUSH
54097: LD_VAR 0 11
54101: PPUSH
54102: LD_VAR 0 12
54106: PPUSH
54107: CALL_OW 111
// break ;
54111: GO 54115
// end ; end ;
54113: GO 54000
54115: POP
54116: POP
// end ; end ;
54117: GO 53442
54119: POP
54120: POP
// end ;
54121: LD_VAR 0 8
54125: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54126: LD_INT 0
54128: PPUSH
// result := true ;
54129: LD_ADDR_VAR 0 3
54133: PUSH
54134: LD_INT 1
54136: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54137: LD_VAR 0 2
54141: PUSH
54142: LD_INT 24
54144: DOUBLE
54145: EQUAL
54146: IFTRUE 54156
54148: LD_INT 33
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54181
54156: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54157: LD_ADDR_VAR 0 3
54161: PUSH
54162: LD_INT 32
54164: PPUSH
54165: LD_VAR 0 1
54169: PPUSH
54170: CALL_OW 321
54174: PUSH
54175: LD_INT 2
54177: EQUAL
54178: ST_TO_ADDR
54179: GO 54497
54181: LD_INT 20
54183: DOUBLE
54184: EQUAL
54185: IFTRUE 54189
54187: GO 54214
54189: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54190: LD_ADDR_VAR 0 3
54194: PUSH
54195: LD_INT 6
54197: PPUSH
54198: LD_VAR 0 1
54202: PPUSH
54203: CALL_OW 321
54207: PUSH
54208: LD_INT 2
54210: EQUAL
54211: ST_TO_ADDR
54212: GO 54497
54214: LD_INT 22
54216: DOUBLE
54217: EQUAL
54218: IFTRUE 54228
54220: LD_INT 36
54222: DOUBLE
54223: EQUAL
54224: IFTRUE 54228
54226: GO 54253
54228: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54229: LD_ADDR_VAR 0 3
54233: PUSH
54234: LD_INT 15
54236: PPUSH
54237: LD_VAR 0 1
54241: PPUSH
54242: CALL_OW 321
54246: PUSH
54247: LD_INT 2
54249: EQUAL
54250: ST_TO_ADDR
54251: GO 54497
54253: LD_INT 30
54255: DOUBLE
54256: EQUAL
54257: IFTRUE 54261
54259: GO 54286
54261: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54262: LD_ADDR_VAR 0 3
54266: PUSH
54267: LD_INT 20
54269: PPUSH
54270: LD_VAR 0 1
54274: PPUSH
54275: CALL_OW 321
54279: PUSH
54280: LD_INT 2
54282: EQUAL
54283: ST_TO_ADDR
54284: GO 54497
54286: LD_INT 28
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54300
54292: LD_INT 21
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54300
54298: GO 54325
54300: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54301: LD_ADDR_VAR 0 3
54305: PUSH
54306: LD_INT 21
54308: PPUSH
54309: LD_VAR 0 1
54313: PPUSH
54314: CALL_OW 321
54318: PUSH
54319: LD_INT 2
54321: EQUAL
54322: ST_TO_ADDR
54323: GO 54497
54325: LD_INT 16
54327: DOUBLE
54328: EQUAL
54329: IFTRUE 54333
54331: GO 54358
54333: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_INT 84
54341: PPUSH
54342: LD_VAR 0 1
54346: PPUSH
54347: CALL_OW 321
54351: PUSH
54352: LD_INT 2
54354: EQUAL
54355: ST_TO_ADDR
54356: GO 54497
54358: LD_INT 19
54360: DOUBLE
54361: EQUAL
54362: IFTRUE 54372
54364: LD_INT 23
54366: DOUBLE
54367: EQUAL
54368: IFTRUE 54372
54370: GO 54397
54372: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54373: LD_ADDR_VAR 0 3
54377: PUSH
54378: LD_INT 83
54380: PPUSH
54381: LD_VAR 0 1
54385: PPUSH
54386: CALL_OW 321
54390: PUSH
54391: LD_INT 2
54393: EQUAL
54394: ST_TO_ADDR
54395: GO 54497
54397: LD_INT 17
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54405
54403: GO 54430
54405: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54406: LD_ADDR_VAR 0 3
54410: PUSH
54411: LD_INT 39
54413: PPUSH
54414: LD_VAR 0 1
54418: PPUSH
54419: CALL_OW 321
54423: PUSH
54424: LD_INT 2
54426: EQUAL
54427: ST_TO_ADDR
54428: GO 54497
54430: LD_INT 18
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54438
54436: GO 54463
54438: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54439: LD_ADDR_VAR 0 3
54443: PUSH
54444: LD_INT 40
54446: PPUSH
54447: LD_VAR 0 1
54451: PPUSH
54452: CALL_OW 321
54456: PUSH
54457: LD_INT 2
54459: EQUAL
54460: ST_TO_ADDR
54461: GO 54497
54463: LD_INT 27
54465: DOUBLE
54466: EQUAL
54467: IFTRUE 54471
54469: GO 54496
54471: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54472: LD_ADDR_VAR 0 3
54476: PUSH
54477: LD_INT 35
54479: PPUSH
54480: LD_VAR 0 1
54484: PPUSH
54485: CALL_OW 321
54489: PUSH
54490: LD_INT 2
54492: EQUAL
54493: ST_TO_ADDR
54494: GO 54497
54496: POP
// end ;
54497: LD_VAR 0 3
54501: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54502: LD_INT 0
54504: PPUSH
54505: PPUSH
54506: PPUSH
54507: PPUSH
54508: PPUSH
54509: PPUSH
54510: PPUSH
54511: PPUSH
54512: PPUSH
54513: PPUSH
54514: PPUSH
// result := false ;
54515: LD_ADDR_VAR 0 6
54519: PUSH
54520: LD_INT 0
54522: ST_TO_ADDR
// if btype = b_depot then
54523: LD_VAR 0 2
54527: PUSH
54528: LD_INT 0
54530: EQUAL
54531: IFFALSE 54543
// begin result := true ;
54533: LD_ADDR_VAR 0 6
54537: PUSH
54538: LD_INT 1
54540: ST_TO_ADDR
// exit ;
54541: GO 55369
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54543: LD_VAR 0 1
54547: NOT
54548: PUSH
54549: LD_VAR 0 1
54553: PPUSH
54554: CALL_OW 266
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: IN
54569: NOT
54570: OR
54571: PUSH
54572: LD_VAR 0 2
54576: NOT
54577: OR
54578: PUSH
54579: LD_VAR 0 5
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: LD_INT 4
54598: PUSH
54599: LD_INT 5
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: IN
54610: NOT
54611: OR
54612: PUSH
54613: LD_VAR 0 3
54617: PPUSH
54618: LD_VAR 0 4
54622: PPUSH
54623: CALL_OW 488
54627: NOT
54628: OR
54629: IFFALSE 54633
// exit ;
54631: GO 55369
// side := GetSide ( depot ) ;
54633: LD_ADDR_VAR 0 9
54637: PUSH
54638: LD_VAR 0 1
54642: PPUSH
54643: CALL_OW 255
54647: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54648: LD_VAR 0 9
54652: PPUSH
54653: LD_VAR 0 2
54657: PPUSH
54658: CALL 54126 0 2
54662: NOT
54663: IFFALSE 54667
// exit ;
54665: GO 55369
// pom := GetBase ( depot ) ;
54667: LD_ADDR_VAR 0 10
54671: PUSH
54672: LD_VAR 0 1
54676: PPUSH
54677: CALL_OW 274
54681: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54682: LD_ADDR_VAR 0 11
54686: PUSH
54687: LD_VAR 0 2
54691: PPUSH
54692: LD_VAR 0 1
54696: PPUSH
54697: CALL_OW 248
54701: PPUSH
54702: CALL_OW 450
54706: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54707: LD_VAR 0 10
54711: PPUSH
54712: LD_INT 1
54714: PPUSH
54715: CALL_OW 275
54719: PUSH
54720: LD_VAR 0 11
54724: PUSH
54725: LD_INT 1
54727: ARRAY
54728: GREATEREQUAL
54729: PUSH
54730: LD_VAR 0 10
54734: PPUSH
54735: LD_INT 2
54737: PPUSH
54738: CALL_OW 275
54742: PUSH
54743: LD_VAR 0 11
54747: PUSH
54748: LD_INT 2
54750: ARRAY
54751: GREATEREQUAL
54752: AND
54753: PUSH
54754: LD_VAR 0 10
54758: PPUSH
54759: LD_INT 3
54761: PPUSH
54762: CALL_OW 275
54766: PUSH
54767: LD_VAR 0 11
54771: PUSH
54772: LD_INT 3
54774: ARRAY
54775: GREATEREQUAL
54776: AND
54777: NOT
54778: IFFALSE 54782
// exit ;
54780: GO 55369
// if GetBType ( depot ) = b_depot then
54782: LD_VAR 0 1
54786: PPUSH
54787: CALL_OW 266
54791: PUSH
54792: LD_INT 0
54794: EQUAL
54795: IFFALSE 54807
// dist := 28 else
54797: LD_ADDR_VAR 0 14
54801: PUSH
54802: LD_INT 28
54804: ST_TO_ADDR
54805: GO 54815
// dist := 36 ;
54807: LD_ADDR_VAR 0 14
54811: PUSH
54812: LD_INT 36
54814: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54815: LD_VAR 0 1
54819: PPUSH
54820: LD_VAR 0 3
54824: PPUSH
54825: LD_VAR 0 4
54829: PPUSH
54830: CALL_OW 297
54834: PUSH
54835: LD_VAR 0 14
54839: GREATER
54840: IFFALSE 54844
// exit ;
54842: GO 55369
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54844: LD_ADDR_VAR 0 12
54848: PUSH
54849: LD_VAR 0 2
54853: PPUSH
54854: LD_VAR 0 3
54858: PPUSH
54859: LD_VAR 0 4
54863: PPUSH
54864: LD_VAR 0 5
54868: PPUSH
54869: LD_VAR 0 1
54873: PPUSH
54874: CALL_OW 248
54878: PPUSH
54879: LD_INT 0
54881: PPUSH
54882: CALL 55374 0 6
54886: ST_TO_ADDR
// if not hexes then
54887: LD_VAR 0 12
54891: NOT
54892: IFFALSE 54896
// exit ;
54894: GO 55369
// hex := GetHexInfo ( x , y ) ;
54896: LD_ADDR_VAR 0 15
54900: PUSH
54901: LD_VAR 0 3
54905: PPUSH
54906: LD_VAR 0 4
54910: PPUSH
54911: CALL_OW 546
54915: ST_TO_ADDR
// if hex [ 1 ] then
54916: LD_VAR 0 15
54920: PUSH
54921: LD_INT 1
54923: ARRAY
54924: IFFALSE 54928
// exit ;
54926: GO 55369
// height := hex [ 2 ] ;
54928: LD_ADDR_VAR 0 13
54932: PUSH
54933: LD_VAR 0 15
54937: PUSH
54938: LD_INT 2
54940: ARRAY
54941: ST_TO_ADDR
// for i = 1 to hexes do
54942: LD_ADDR_VAR 0 7
54946: PUSH
54947: DOUBLE
54948: LD_INT 1
54950: DEC
54951: ST_TO_ADDR
54952: LD_VAR 0 12
54956: PUSH
54957: FOR_TO
54958: IFFALSE 55288
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54960: LD_VAR 0 12
54964: PUSH
54965: LD_VAR 0 7
54969: ARRAY
54970: PUSH
54971: LD_INT 1
54973: ARRAY
54974: PPUSH
54975: LD_VAR 0 12
54979: PUSH
54980: LD_VAR 0 7
54984: ARRAY
54985: PUSH
54986: LD_INT 2
54988: ARRAY
54989: PPUSH
54990: CALL_OW 488
54994: NOT
54995: PUSH
54996: LD_VAR 0 12
55000: PUSH
55001: LD_VAR 0 7
55005: ARRAY
55006: PUSH
55007: LD_INT 1
55009: ARRAY
55010: PPUSH
55011: LD_VAR 0 12
55015: PUSH
55016: LD_VAR 0 7
55020: ARRAY
55021: PUSH
55022: LD_INT 2
55024: ARRAY
55025: PPUSH
55026: CALL_OW 428
55030: PUSH
55031: LD_INT 0
55033: GREATER
55034: OR
55035: PUSH
55036: LD_VAR 0 12
55040: PUSH
55041: LD_VAR 0 7
55045: ARRAY
55046: PUSH
55047: LD_INT 1
55049: ARRAY
55050: PPUSH
55051: LD_VAR 0 12
55055: PUSH
55056: LD_VAR 0 7
55060: ARRAY
55061: PUSH
55062: LD_INT 2
55064: ARRAY
55065: PPUSH
55066: CALL_OW 351
55070: OR
55071: IFFALSE 55077
// exit ;
55073: POP
55074: POP
55075: GO 55369
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55077: LD_ADDR_VAR 0 8
55081: PUSH
55082: LD_VAR 0 12
55086: PUSH
55087: LD_VAR 0 7
55091: ARRAY
55092: PUSH
55093: LD_INT 1
55095: ARRAY
55096: PPUSH
55097: LD_VAR 0 12
55101: PUSH
55102: LD_VAR 0 7
55106: ARRAY
55107: PUSH
55108: LD_INT 2
55110: ARRAY
55111: PPUSH
55112: CALL_OW 546
55116: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55117: LD_VAR 0 8
55121: PUSH
55122: LD_INT 1
55124: ARRAY
55125: PUSH
55126: LD_VAR 0 8
55130: PUSH
55131: LD_INT 2
55133: ARRAY
55134: PUSH
55135: LD_VAR 0 13
55139: PUSH
55140: LD_INT 2
55142: PLUS
55143: GREATER
55144: OR
55145: PUSH
55146: LD_VAR 0 8
55150: PUSH
55151: LD_INT 2
55153: ARRAY
55154: PUSH
55155: LD_VAR 0 13
55159: PUSH
55160: LD_INT 2
55162: MINUS
55163: LESS
55164: OR
55165: PUSH
55166: LD_VAR 0 8
55170: PUSH
55171: LD_INT 3
55173: ARRAY
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 8
55180: PUSH
55181: LD_INT 9
55183: PUSH
55184: LD_INT 10
55186: PUSH
55187: LD_INT 11
55189: PUSH
55190: LD_INT 12
55192: PUSH
55193: LD_INT 13
55195: PUSH
55196: LD_INT 16
55198: PUSH
55199: LD_INT 17
55201: PUSH
55202: LD_INT 18
55204: PUSH
55205: LD_INT 19
55207: PUSH
55208: LD_INT 20
55210: PUSH
55211: LD_INT 21
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: IN
55229: NOT
55230: OR
55231: PUSH
55232: LD_VAR 0 8
55236: PUSH
55237: LD_INT 5
55239: ARRAY
55240: NOT
55241: OR
55242: PUSH
55243: LD_VAR 0 8
55247: PUSH
55248: LD_INT 6
55250: ARRAY
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 7
55260: PUSH
55261: LD_INT 9
55263: PUSH
55264: LD_INT 10
55266: PUSH
55267: LD_INT 11
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: IN
55278: NOT
55279: OR
55280: IFFALSE 55286
// exit ;
55282: POP
55283: POP
55284: GO 55369
// end ;
55286: GO 54957
55288: POP
55289: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55290: LD_VAR 0 9
55294: PPUSH
55295: LD_VAR 0 3
55299: PPUSH
55300: LD_VAR 0 4
55304: PPUSH
55305: LD_INT 20
55307: PPUSH
55308: CALL 47292 0 4
55312: PUSH
55313: LD_INT 4
55315: ARRAY
55316: IFFALSE 55320
// exit ;
55318: GO 55369
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55320: LD_VAR 0 2
55324: PUSH
55325: LD_INT 29
55327: PUSH
55328: LD_INT 30
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: IN
55335: PUSH
55336: LD_VAR 0 3
55340: PPUSH
55341: LD_VAR 0 4
55345: PPUSH
55346: LD_VAR 0 9
55350: PPUSH
55351: CALL_OW 440
55355: NOT
55356: AND
55357: IFFALSE 55361
// exit ;
55359: GO 55369
// result := true ;
55361: LD_ADDR_VAR 0 6
55365: PUSH
55366: LD_INT 1
55368: ST_TO_ADDR
// end ;
55369: LD_VAR 0 6
55373: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55374: LD_INT 0
55376: PPUSH
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
55388: PPUSH
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
55411: PPUSH
55412: PPUSH
55413: PPUSH
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
55419: PPUSH
55420: PPUSH
55421: PPUSH
55422: PPUSH
55423: PPUSH
55424: PPUSH
55425: PPUSH
55426: PPUSH
55427: PPUSH
55428: PPUSH
55429: PPUSH
55430: PPUSH
55431: PPUSH
55432: PPUSH
55433: PPUSH
// result = [ ] ;
55434: LD_ADDR_VAR 0 7
55438: PUSH
55439: EMPTY
55440: ST_TO_ADDR
// temp_list = [ ] ;
55441: LD_ADDR_VAR 0 9
55445: PUSH
55446: EMPTY
55447: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55448: LD_VAR 0 4
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: LD_INT 4
55467: PUSH
55468: LD_INT 5
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: IN
55479: NOT
55480: PUSH
55481: LD_VAR 0 1
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: IN
55496: PUSH
55497: LD_VAR 0 5
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: IN
55516: NOT
55517: AND
55518: OR
55519: IFFALSE 55523
// exit ;
55521: GO 73914
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55523: LD_VAR 0 1
55527: PUSH
55528: LD_INT 6
55530: PUSH
55531: LD_INT 7
55533: PUSH
55534: LD_INT 8
55536: PUSH
55537: LD_INT 13
55539: PUSH
55540: LD_INT 12
55542: PUSH
55543: LD_INT 15
55545: PUSH
55546: LD_INT 11
55548: PUSH
55549: LD_INT 14
55551: PUSH
55552: LD_INT 10
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: IN
55566: IFFALSE 55576
// btype = b_lab ;
55568: LD_ADDR_VAR 0 1
55572: PUSH
55573: LD_INT 6
55575: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55576: LD_VAR 0 6
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: IN
55595: NOT
55596: PUSH
55597: LD_VAR 0 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: LD_INT 3
55613: PUSH
55614: LD_INT 6
55616: PUSH
55617: LD_INT 36
55619: PUSH
55620: LD_INT 4
55622: PUSH
55623: LD_INT 5
55625: PUSH
55626: LD_INT 31
55628: PUSH
55629: LD_INT 32
55631: PUSH
55632: LD_INT 33
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: IN
55648: NOT
55649: PUSH
55650: LD_VAR 0 6
55654: PUSH
55655: LD_INT 1
55657: EQUAL
55658: AND
55659: OR
55660: PUSH
55661: LD_VAR 0 1
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: IN
55676: NOT
55677: PUSH
55678: LD_VAR 0 6
55682: PUSH
55683: LD_INT 2
55685: EQUAL
55686: AND
55687: OR
55688: IFFALSE 55698
// mode = 0 ;
55690: LD_ADDR_VAR 0 6
55694: PUSH
55695: LD_INT 0
55697: ST_TO_ADDR
// case mode of 0 :
55698: LD_VAR 0 6
55702: PUSH
55703: LD_INT 0
55705: DOUBLE
55706: EQUAL
55707: IFTRUE 55711
55709: GO 67164
55711: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55712: LD_ADDR_VAR 0 11
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55905: LD_ADDR_VAR 0 12
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56101: LD_ADDR_VAR 0 13
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 3
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56300: LD_ADDR_VAR 0 14
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56496: LD_ADDR_VAR 0 15
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56689: LD_ADDR_VAR 0 16
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56882: LD_ADDR_VAR 0 17
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57112: LD_ADDR_VAR 0 18
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57342: LD_ADDR_VAR 0 19
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57572: LD_ADDR_VAR 0 20
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57802: LD_ADDR_VAR 0 21
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 2
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58032: LD_ADDR_VAR 0 22
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58262: LD_ADDR_VAR 0 23
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58542: LD_ADDR_VAR 0 24
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58818: LD_ADDR_VAR 0 25
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 3
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59092: LD_ADDR_VAR 0 26
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59368: LD_ADDR_VAR 0 27
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59648: LD_ADDR_VAR 0 28
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59930: LD_ADDR_VAR 0 29
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60209: LD_ADDR_VAR 0 30
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 2
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60487: LD_ADDR_VAR 0 31
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: NEG
60665: PUSH
60666: LD_INT 2
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60765: LD_ADDR_VAR 0 32
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 2
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 2
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 3
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61043: LD_ADDR_VAR 0 33
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 2
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61322: LD_ADDR_VAR 0 34
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 2
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: LD_INT 3
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 2
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 3
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 3
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61602: LD_ADDR_VAR 0 35
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61714: LD_ADDR_VAR 0 36
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61826: LD_ADDR_VAR 0 37
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61938: LD_ADDR_VAR 0 38
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62050: LD_ADDR_VAR 0 39
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62162: LD_ADDR_VAR 0 40
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62274: LD_ADDR_VAR 0 41
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: NEG
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: LD_INT 3
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: LD_INT 3
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 3
62571: NEG
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: LD_INT 3
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62624: LD_ADDR_VAR 0 42
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 2
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 3
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: LD_INT 3
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 3
62870: PUSH
62871: LD_INT 3
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: LD_INT 3
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 3
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 3
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: LD_INT 3
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62974: LD_ADDR_VAR 0 43
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: NEG
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 3
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 3
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 3
63281: NEG
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63322: LD_ADDR_VAR 0 44
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: LD_INT 3
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63672: LD_ADDR_VAR 0 45
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: LD_INT 2
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: LD_INT 3
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 3
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 2
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 3
63918: PUSH
63919: LD_INT 3
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: LD_INT 3
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: LD_INT 3
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 3
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 3
63969: NEG
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64022: LD_ADDR_VAR 0 46
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 1
64091: NEG
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 3
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 3
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 3
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: LD_INT 3
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 3
64318: NEG
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 3
64329: NEG
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64370: LD_ADDR_VAR 0 47
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 2
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64521: LD_ADDR_VAR 0 48
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: LD_INT 2
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64668: LD_ADDR_VAR 0 49
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: LD_INT 1
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 2
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 2
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 2
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64812: LD_ADDR_VAR 0 50
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64956: LD_ADDR_VAR 0 51
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: LD_INT 2
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 2
65079: NEG
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65103: LD_ADDR_VAR 0 52
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 2
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: LD_INT 2
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65254: LD_ADDR_VAR 0 53
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: LD_INT 2
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 2
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: LD_INT 2
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 2
65430: NEG
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 2
65441: NEG
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 2
65453: NEG
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65484: LD_ADDR_VAR 0 54
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 1
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: LD_INT 2
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 2
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 2
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 2
65683: NEG
65684: PUSH
65685: LD_INT 2
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65714: LD_ADDR_VAR 0 55
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: LD_INT 1
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 2
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65944: LD_ADDR_VAR 0 56
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 2
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 2
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 2
66079: PUSH
66080: LD_INT 2
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: LD_INT 2
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 2
66120: NEG
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 2
66131: NEG
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 2
66143: NEG
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66174: LD_ADDR_VAR 0 57
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 1
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: LD_INT 2
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 1
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 2
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 2
66350: NEG
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: NEG
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 2
66373: NEG
66374: PUSH
66375: LD_INT 2
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66404: LD_ADDR_VAR 0 58
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 1
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 1
66462: NEG
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 1
66473: NEG
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: LD_INT 2
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: LD_INT 2
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: LD_INT 1
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 2
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 2
66591: NEG
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 2
66603: NEG
66604: PUSH
66605: LD_INT 2
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66634: LD_ADDR_VAR 0 59
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: LD_INT 1
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66722: LD_ADDR_VAR 0 60
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: LD_INT 0
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66810: LD_ADDR_VAR 0 61
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: LD_INT 1
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66898: LD_ADDR_VAR 0 62
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: LD_INT 1
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 1
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66986: LD_ADDR_VAR 0 63
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: LD_INT 1
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67074: LD_ADDR_VAR 0 64
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: LD_INT 1
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: LD_INT 1
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 1
67132: NEG
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 1
67143: NEG
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: ST_TO_ADDR
// end ; 1 :
67162: GO 73059
67164: LD_INT 1
67166: DOUBLE
67167: EQUAL
67168: IFTRUE 67172
67170: GO 69795
67172: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67173: LD_ADDR_VAR 0 11
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: LD_INT 3
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 3
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: LIST
67216: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67217: LD_ADDR_VAR 0 12
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 3
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67258: LD_ADDR_VAR 0 13
67262: PUSH
67263: LD_INT 3
67265: PUSH
67266: LD_INT 2
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 2
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: LIST
67297: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67298: LD_ADDR_VAR 0 14
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 3
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: LIST
67338: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67339: LD_ADDR_VAR 0 15
67343: PUSH
67344: LD_INT 2
67346: NEG
67347: PUSH
67348: LD_INT 1
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 3
67368: NEG
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: LIST
67382: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67383: LD_ADDR_VAR 0 16
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 3
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: LIST
67428: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67429: LD_ADDR_VAR 0 17
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: LD_INT 3
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: LD_INT 2
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67473: LD_ADDR_VAR 0 18
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: LIST
67513: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67514: LD_ADDR_VAR 0 19
67518: PUSH
67519: LD_INT 3
67521: PUSH
67522: LD_INT 2
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 3
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: LD_INT 3
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67554: LD_ADDR_VAR 0 20
67558: PUSH
67559: LD_INT 1
67561: PUSH
67562: LD_INT 3
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: LD_INT 2
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: LIST
67594: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67595: LD_ADDR_VAR 0 21
67599: PUSH
67600: LD_INT 2
67602: NEG
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 3
67624: NEG
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67639: LD_ADDR_VAR 0 22
67643: PUSH
67644: LD_INT 2
67646: NEG
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 3
67658: NEG
67659: PUSH
67660: LD_INT 2
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 3
67670: NEG
67671: PUSH
67672: LD_INT 3
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67685: LD_ADDR_VAR 0 23
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: LD_INT 3
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 4
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 1
67715: PUSH
67716: LD_INT 3
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67729: LD_ADDR_VAR 0 24
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 4
67757: PUSH
67758: LD_INT 1
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: LIST
67769: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67770: LD_ADDR_VAR 0 25
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: PUSH
67798: LD_INT 4
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67810: LD_ADDR_VAR 0 26
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 4
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: LD_INT 3
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67851: LD_ADDR_VAR 0 27
67855: PUSH
67856: LD_INT 3
67858: NEG
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: LD_INT 1
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 4
67880: NEG
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: LIST
67894: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67895: LD_ADDR_VAR 0 28
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 3
67914: NEG
67915: PUSH
67916: LD_INT 4
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 4
67926: NEG
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67941: LD_ADDR_VAR 0 29
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 3
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: LD_INT 2
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 1
67982: NEG
67983: PUSH
67984: LD_INT 4
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: LD_INT 4
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: LD_INT 3
68008: NEG
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 1
68016: NEG
68017: PUSH
68018: LD_INT 5
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: LD_INT 5
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 1
68039: PUSH
68040: LD_INT 4
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: LD_INT 6
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: LD_INT 6
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 1
68073: PUSH
68074: LD_INT 5
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68096: LD_ADDR_VAR 0 30
68100: PUSH
68101: LD_INT 2
68103: PUSH
68104: LD_INT 1
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 3
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: LD_INT 1
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: LD_INT 1
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 4
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 4
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 4
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 5
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 5
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 5
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 6
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 6
68217: PUSH
68218: LD_INT 1
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68239: LD_ADDR_VAR 0 31
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: LD_INT 2
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 3
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: LD_INT 3
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 4
68276: PUSH
68277: LD_INT 3
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 4
68286: PUSH
68287: LD_INT 4
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: PUSH
68297: LD_INT 4
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 5
68306: PUSH
68307: LD_INT 4
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 5
68316: PUSH
68317: LD_INT 5
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 4
68326: PUSH
68327: LD_INT 5
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 6
68336: PUSH
68337: LD_INT 5
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 6
68346: PUSH
68347: LD_INT 6
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 5
68356: PUSH
68357: LD_INT 6
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68378: LD_ADDR_VAR 0 32
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: LD_INT 3
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 3
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: LD_INT 2
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: LD_INT 4
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 4
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: LD_INT 3
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: PUSH
68448: LD_INT 5
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 5
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: LD_INT 4
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 1
68478: PUSH
68479: LD_INT 6
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: LD_INT 6
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 1
68498: NEG
68499: PUSH
68500: LD_INT 5
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68521: LD_ADDR_VAR 0 33
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 3
68539: NEG
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: NEG
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 4
68573: NEG
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 4
68584: NEG
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 4
68596: NEG
68597: PUSH
68598: LD_INT 1
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 5
68607: NEG
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 5
68630: NEG
68631: PUSH
68632: LD_INT 1
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 6
68641: NEG
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 6
68652: NEG
68653: PUSH
68654: LD_INT 1
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68676: LD_ADDR_VAR 0 34
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: LD_INT 3
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 3
68695: NEG
68696: PUSH
68697: LD_INT 2
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 3
68707: NEG
68708: PUSH
68709: LD_INT 3
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: LD_INT 4
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 4
68731: NEG
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 4
68743: NEG
68744: PUSH
68745: LD_INT 4
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 4
68755: NEG
68756: PUSH
68757: LD_INT 5
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 5
68767: NEG
68768: PUSH
68769: LD_INT 4
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 5
68779: NEG
68780: PUSH
68781: LD_INT 5
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 5
68791: NEG
68792: PUSH
68793: LD_INT 6
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 6
68803: NEG
68804: PUSH
68805: LD_INT 5
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 6
68815: NEG
68816: PUSH
68817: LD_INT 6
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68839: LD_ADDR_VAR 0 41
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 2
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 1
68857: NEG
68858: PUSH
68859: LD_INT 3
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: LD_INT 2
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: LIST
68882: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68883: LD_ADDR_VAR 0 42
68887: PUSH
68888: LD_INT 2
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: LD_INT 1
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 3
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: LIST
68923: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68924: LD_ADDR_VAR 0 43
68928: PUSH
68929: LD_INT 2
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: LD_INT 2
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 2
68951: PUSH
68952: LD_INT 3
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: LIST
68963: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68964: LD_ADDR_VAR 0 44
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: LD_INT 2
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 1
68981: PUSH
68982: LD_INT 3
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: LD_INT 2
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: LIST
69004: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69005: LD_ADDR_VAR 0 45
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: LD_INT 0
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: LD_INT 1
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 3
69034: NEG
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: LIST
69048: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69049: LD_ADDR_VAR 0 46
69053: PUSH
69054: LD_INT 2
69056: NEG
69057: PUSH
69058: LD_INT 2
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 2
69068: NEG
69069: PUSH
69070: LD_INT 3
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: NEG
69081: PUSH
69082: LD_INT 2
69084: NEG
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: LIST
69094: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69095: LD_ADDR_VAR 0 47
69099: PUSH
69100: LD_INT 2
69102: NEG
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 1
69114: NEG
69115: PUSH
69116: LD_INT 3
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69128: LD_ADDR_VAR 0 48
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: LD_INT 2
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 2
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69159: LD_ADDR_VAR 0 49
69163: PUSH
69164: LD_INT 3
69166: PUSH
69167: LD_INT 1
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 3
69176: PUSH
69177: LD_INT 2
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69188: LD_ADDR_VAR 0 50
69192: PUSH
69193: LD_INT 2
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: LD_INT 3
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69217: LD_ADDR_VAR 0 51
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: LD_INT 2
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69248: LD_ADDR_VAR 0 52
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 3
69267: NEG
69268: PUSH
69269: LD_INT 2
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69281: LD_ADDR_VAR 0 53
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: PUSH
69290: LD_INT 3
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 3
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 2
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: LIST
69324: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69325: LD_ADDR_VAR 0 54
69329: PUSH
69330: LD_INT 2
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 3
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: LIST
69365: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69366: LD_ADDR_VAR 0 55
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 3
69383: PUSH
69384: LD_INT 3
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 3
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: LIST
69405: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69406: LD_ADDR_VAR 0 56
69410: PUSH
69411: LD_INT 1
69413: PUSH
69414: LD_INT 3
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 0
69423: PUSH
69424: LD_INT 3
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 1
69433: NEG
69434: PUSH
69435: LD_INT 2
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: LIST
69446: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69447: LD_ADDR_VAR 0 57
69451: PUSH
69452: LD_INT 2
69454: NEG
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 3
69465: NEG
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 3
69476: NEG
69477: PUSH
69478: LD_INT 1
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: LIST
69490: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69491: LD_ADDR_VAR 0 58
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 3
69510: NEG
69511: PUSH
69512: LD_INT 2
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 3
69522: NEG
69523: PUSH
69524: LD_INT 3
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: LIST
69536: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69537: LD_ADDR_VAR 0 59
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: LD_INT 2
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: LD_INT 2
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: LD_INT 1
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: LIST
69580: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69581: LD_ADDR_VAR 0 60
69585: PUSH
69586: LD_INT 1
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 2
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: LIST
69621: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69622: LD_ADDR_VAR 0 61
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 2
69639: PUSH
69640: LD_INT 2
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 1
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: LIST
69661: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69662: LD_ADDR_VAR 0 62
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: NEG
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: LIST
69702: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69703: LD_ADDR_VAR 0 63
69707: PUSH
69708: LD_INT 1
69710: NEG
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 2
69732: NEG
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69747: LD_ADDR_VAR 0 64
69751: PUSH
69752: LD_INT 1
69754: NEG
69755: PUSH
69756: LD_INT 2
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 2
69766: NEG
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 2
69778: NEG
69779: PUSH
69780: LD_INT 2
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: LIST
69792: ST_TO_ADDR
// end ; 2 :
69793: GO 73059
69795: LD_INT 2
69797: DOUBLE
69798: EQUAL
69799: IFTRUE 69803
69801: GO 73058
69803: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69804: LD_ADDR_VAR 0 29
69808: PUSH
69809: LD_INT 4
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 4
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 5
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 5
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 4
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 3
69872: PUSH
69873: LD_INT 1
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 3
69883: PUSH
69884: LD_INT 2
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 5
69894: PUSH
69895: LD_INT 2
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 3
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 3
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 4
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 4
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 3
69944: PUSH
69945: LD_INT 4
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 2
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 4
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 2
69984: PUSH
69985: LD_INT 4
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: LD_INT 3
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: LD_INT 4
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: LD_INT 5
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 5
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: PUSH
70046: LD_INT 4
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 2
70066: PUSH
70067: LD_INT 5
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 2
70076: NEG
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: NEG
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: LD_INT 1
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 2
70110: NEG
70111: PUSH
70112: LD_INT 0
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 2
70121: NEG
70122: PUSH
70123: LD_INT 1
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 3
70132: NEG
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 4
70143: NEG
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 4
70154: NEG
70155: PUSH
70156: LD_INT 1
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 4
70166: NEG
70167: PUSH
70168: LD_INT 2
70170: NEG
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 2
70178: NEG
70179: PUSH
70180: LD_INT 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: LD_INT 4
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 4
70201: NEG
70202: PUSH
70203: LD_INT 5
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: NEG
70214: PUSH
70215: LD_INT 4
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 3
70225: NEG
70226: PUSH
70227: LD_INT 3
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 4
70237: NEG
70238: PUSH
70239: LD_INT 3
70241: NEG
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 5
70249: NEG
70250: PUSH
70251: LD_INT 4
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 5
70261: NEG
70262: PUSH
70263: LD_INT 5
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: LD_INT 5
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 5
70285: NEG
70286: PUSH
70287: LD_INT 3
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70342: LD_ADDR_VAR 0 30
70346: PUSH
70347: LD_INT 4
70349: PUSH
70350: LD_INT 4
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 4
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 5
70369: PUSH
70370: LD_INT 4
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 5
70379: PUSH
70380: LD_INT 5
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 4
70389: PUSH
70390: LD_INT 5
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 3
70399: PUSH
70400: LD_INT 4
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 3
70409: PUSH
70410: LD_INT 3
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 5
70419: PUSH
70420: LD_INT 3
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 3
70429: PUSH
70430: LD_INT 5
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: LD_INT 2
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: LD_INT 3
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: LD_INT 4
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 4
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: LD_INT 3
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: PUSH
70502: LD_INT 2
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 2
70511: PUSH
70512: LD_INT 4
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 2
70521: NEG
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 4
70532: NEG
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 4
70543: NEG
70544: PUSH
70545: LD_INT 1
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 3
70555: NEG
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 3
70566: NEG
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 4
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 5
70588: NEG
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 5
70599: NEG
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 5
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: NEG
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 3
70634: NEG
70635: PUSH
70636: LD_INT 3
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 3
70646: NEG
70647: PUSH
70648: LD_INT 4
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 2
70658: NEG
70659: PUSH
70660: LD_INT 3
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 2
70670: NEG
70671: PUSH
70672: LD_INT 2
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 3
70682: NEG
70683: PUSH
70684: LD_INT 2
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 4
70694: NEG
70695: PUSH
70696: LD_INT 3
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 4
70706: NEG
70707: PUSH
70708: LD_INT 4
70710: NEG
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 2
70718: NEG
70719: PUSH
70720: LD_INT 4
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 4
70730: NEG
70731: PUSH
70732: LD_INT 2
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: LD_INT 4
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: LD_INT 5
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: LD_INT 3
70778: NEG
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: LD_INT 4
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 1
70809: NEG
70810: PUSH
70811: LD_INT 5
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 2
70821: PUSH
70822: LD_INT 3
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 2
70832: NEG
70833: PUSH
70834: LD_INT 5
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70889: LD_ADDR_VAR 0 31
70893: PUSH
70894: LD_INT 0
70896: PUSH
70897: LD_INT 4
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: LD_INT 3
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 1
70916: PUSH
70917: LD_INT 4
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: LD_INT 5
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: LD_INT 5
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 1
70946: NEG
70947: PUSH
70948: LD_INT 4
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 1
70957: NEG
70958: PUSH
70959: LD_INT 3
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 2
70968: PUSH
70969: LD_INT 5
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 2
70978: NEG
70979: PUSH
70980: LD_INT 3
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: NEG
70990: PUSH
70991: LD_INT 0
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 3
71000: NEG
71001: PUSH
71002: LD_INT 1
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 2
71012: NEG
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: NEG
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 3
71034: NEG
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 4
71045: NEG
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 4
71056: NEG
71057: PUSH
71058: LD_INT 1
71060: NEG
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 4
71068: NEG
71069: PUSH
71070: LD_INT 2
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 2
71080: NEG
71081: PUSH
71082: LD_INT 2
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 4
71091: NEG
71092: PUSH
71093: LD_INT 4
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: LD_INT 5
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 3
71115: NEG
71116: PUSH
71117: LD_INT 4
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: LD_INT 3
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 4
71139: NEG
71140: PUSH
71141: LD_INT 3
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 5
71151: NEG
71152: PUSH
71153: LD_INT 4
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 5
71163: NEG
71164: PUSH
71165: LD_INT 5
71167: NEG
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 3
71175: NEG
71176: PUSH
71177: LD_INT 5
71179: NEG
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 5
71187: NEG
71188: PUSH
71189: LD_INT 3
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: LD_INT 3
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: LD_INT 4
71213: NEG
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: LD_INT 3
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 1
71232: PUSH
71233: LD_INT 2
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 1
71266: NEG
71267: PUSH
71268: LD_INT 4
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 2
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 4
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 4
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 4
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 5
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 5
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 4
71342: PUSH
71343: LD_INT 1
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 3
71352: PUSH
71353: LD_INT 0
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 3
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 3
71373: PUSH
71374: LD_INT 2
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 5
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71439: LD_ADDR_VAR 0 32
71443: PUSH
71444: LD_INT 4
71446: NEG
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 4
71457: NEG
71458: PUSH
71459: LD_INT 1
71461: NEG
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 3
71469: NEG
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 3
71480: NEG
71481: PUSH
71482: LD_INT 1
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 4
71491: NEG
71492: PUSH
71493: LD_INT 1
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 5
71502: NEG
71503: PUSH
71504: LD_INT 0
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 5
71513: NEG
71514: PUSH
71515: LD_INT 1
71517: NEG
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 5
71525: NEG
71526: PUSH
71527: LD_INT 2
71529: NEG
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 3
71537: NEG
71538: PUSH
71539: LD_INT 2
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 3
71548: NEG
71549: PUSH
71550: LD_INT 3
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 3
71560: NEG
71561: PUSH
71562: LD_INT 4
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 2
71572: NEG
71573: PUSH
71574: LD_INT 3
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 2
71584: NEG
71585: PUSH
71586: LD_INT 2
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 3
71596: NEG
71597: PUSH
71598: LD_INT 2
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 4
71608: NEG
71609: PUSH
71610: LD_INT 3
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 4
71620: NEG
71621: PUSH
71622: LD_INT 4
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 2
71632: NEG
71633: PUSH
71634: LD_INT 4
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 4
71644: NEG
71645: PUSH
71646: LD_INT 2
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 0
71656: PUSH
71657: LD_INT 4
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: LD_INT 5
71670: NEG
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 1
71678: PUSH
71679: LD_INT 4
71681: NEG
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 1
71689: PUSH
71690: LD_INT 3
71692: NEG
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: LD_INT 4
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 1
71723: NEG
71724: PUSH
71725: LD_INT 5
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 2
71735: PUSH
71736: LD_INT 3
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 2
71746: NEG
71747: PUSH
71748: LD_INT 5
71750: NEG
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 3
71758: PUSH
71759: LD_INT 0
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 3
71768: PUSH
71769: LD_INT 1
71771: NEG
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 4
71779: PUSH
71780: LD_INT 0
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 4
71789: PUSH
71790: LD_INT 1
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 3
71799: PUSH
71800: LD_INT 1
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 2
71809: PUSH
71810: LD_INT 0
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 2
71819: PUSH
71820: LD_INT 1
71822: NEG
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 2
71830: PUSH
71831: LD_INT 2
71833: NEG
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 4
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 4
71851: PUSH
71852: LD_INT 4
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 4
71861: PUSH
71862: LD_INT 3
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 5
71871: PUSH
71872: LD_INT 4
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 5
71881: PUSH
71882: LD_INT 5
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 4
71891: PUSH
71892: LD_INT 5
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 3
71901: PUSH
71902: LD_INT 4
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 3
71911: PUSH
71912: LD_INT 3
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 5
71921: PUSH
71922: LD_INT 3
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 3
71931: PUSH
71932: LD_INT 5
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71986: LD_ADDR_VAR 0 33
71990: PUSH
71991: LD_INT 4
71993: NEG
71994: PUSH
71995: LD_INT 4
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 4
72005: NEG
72006: PUSH
72007: LD_INT 5
72009: NEG
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 3
72017: NEG
72018: PUSH
72019: LD_INT 4
72021: NEG
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 3
72029: NEG
72030: PUSH
72031: LD_INT 3
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 4
72041: NEG
72042: PUSH
72043: LD_INT 3
72045: NEG
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 5
72053: NEG
72054: PUSH
72055: LD_INT 4
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 5
72065: NEG
72066: PUSH
72067: LD_INT 5
72069: NEG
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 3
72077: NEG
72078: PUSH
72079: LD_INT 5
72081: NEG
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 5
72089: NEG
72090: PUSH
72091: LD_INT 3
72093: NEG
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: LD_INT 3
72104: NEG
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 0
72112: PUSH
72113: LD_INT 4
72115: NEG
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 1
72123: PUSH
72124: LD_INT 3
72126: NEG
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 1
72134: PUSH
72135: LD_INT 2
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 0
72145: PUSH
72146: LD_INT 2
72148: NEG
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 1
72156: NEG
72157: PUSH
72158: LD_INT 3
72160: NEG
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 1
72168: NEG
72169: PUSH
72170: LD_INT 4
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 2
72180: PUSH
72181: LD_INT 2
72183: NEG
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 2
72191: NEG
72192: PUSH
72193: LD_INT 4
72195: NEG
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 4
72203: PUSH
72204: LD_INT 0
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 4
72213: PUSH
72214: LD_INT 1
72216: NEG
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 5
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 5
72234: PUSH
72235: LD_INT 1
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 4
72244: PUSH
72245: LD_INT 1
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 3
72254: PUSH
72255: LD_INT 0
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 3
72264: PUSH
72265: LD_INT 1
72267: NEG
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 3
72275: PUSH
72276: LD_INT 2
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 5
72286: PUSH
72287: LD_INT 2
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 3
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 3
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 4
72316: PUSH
72317: LD_INT 3
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 4
72326: PUSH
72327: LD_INT 4
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 3
72336: PUSH
72337: LD_INT 4
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: LD_INT 3
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 2
72356: PUSH
72357: LD_INT 2
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_INT 4
72366: PUSH
72367: LD_INT 2
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 2
72376: PUSH
72377: LD_INT 4
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 0
72386: PUSH
72387: LD_INT 4
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 0
72396: PUSH
72397: LD_INT 3
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 1
72406: PUSH
72407: LD_INT 4
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 1
72416: PUSH
72417: LD_INT 5
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 0
72426: PUSH
72427: LD_INT 5
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 1
72436: NEG
72437: PUSH
72438: LD_INT 4
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 1
72447: NEG
72448: PUSH
72449: LD_INT 3
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 2
72458: PUSH
72459: LD_INT 5
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 2
72468: NEG
72469: PUSH
72470: LD_INT 3
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72524: LD_ADDR_VAR 0 34
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 4
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 5
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 1
72553: PUSH
72554: LD_INT 4
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 1
72564: PUSH
72565: LD_INT 3
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 0
72575: PUSH
72576: LD_INT 3
72578: NEG
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 1
72586: NEG
72587: PUSH
72588: LD_INT 4
72590: NEG
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 1
72598: NEG
72599: PUSH
72600: LD_INT 5
72602: NEG
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 2
72610: PUSH
72611: LD_INT 3
72613: NEG
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 2
72621: NEG
72622: PUSH
72623: LD_INT 5
72625: NEG
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 3
72633: PUSH
72634: LD_INT 0
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 3
72643: PUSH
72644: LD_INT 1
72646: NEG
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 4
72654: PUSH
72655: LD_INT 0
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 4
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 3
72674: PUSH
72675: LD_INT 1
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 2
72684: PUSH
72685: LD_INT 0
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: LD_INT 2
72694: PUSH
72695: LD_INT 1
72697: NEG
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 2
72705: PUSH
72706: LD_INT 2
72708: NEG
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 4
72716: PUSH
72717: LD_INT 2
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 4
72726: PUSH
72727: LD_INT 4
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 4
72736: PUSH
72737: LD_INT 3
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 5
72746: PUSH
72747: LD_INT 4
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 5
72756: PUSH
72757: LD_INT 5
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 4
72766: PUSH
72767: LD_INT 5
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 3
72776: PUSH
72777: LD_INT 4
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 3
72786: PUSH
72787: LD_INT 3
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 5
72796: PUSH
72797: LD_INT 3
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 3
72806: PUSH
72807: LD_INT 5
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: LD_INT 3
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 0
72826: PUSH
72827: LD_INT 2
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 1
72836: PUSH
72837: LD_INT 3
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 1
72846: PUSH
72847: LD_INT 4
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 0
72856: PUSH
72857: LD_INT 4
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 1
72866: NEG
72867: PUSH
72868: LD_INT 3
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: NEG
72878: PUSH
72879: LD_INT 2
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 4
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 2
72898: NEG
72899: PUSH
72900: LD_INT 2
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 4
72909: NEG
72910: PUSH
72911: LD_INT 0
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 4
72920: NEG
72921: PUSH
72922: LD_INT 1
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 3
72932: NEG
72933: PUSH
72934: LD_INT 0
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 3
72943: NEG
72944: PUSH
72945: LD_INT 1
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 4
72954: NEG
72955: PUSH
72956: LD_INT 1
72958: PUSH
72959: EMPTY
72960: LIST
72961: LIST
72962: PUSH
72963: LD_INT 5
72965: NEG
72966: PUSH
72967: LD_INT 0
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: LD_INT 5
72976: NEG
72977: PUSH
72978: LD_INT 1
72980: NEG
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 5
72988: NEG
72989: PUSH
72990: LD_INT 2
72992: NEG
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 3
73000: NEG
73001: PUSH
73002: LD_INT 2
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: ST_TO_ADDR
// end ; end ;
73056: GO 73059
73058: POP
// case btype of b_depot , b_warehouse :
73059: LD_VAR 0 1
73063: PUSH
73064: LD_INT 0
73066: DOUBLE
73067: EQUAL
73068: IFTRUE 73078
73070: LD_INT 1
73072: DOUBLE
73073: EQUAL
73074: IFTRUE 73078
73076: GO 73279
73078: POP
// case nation of nation_american :
73079: LD_VAR 0 5
73083: PUSH
73084: LD_INT 1
73086: DOUBLE
73087: EQUAL
73088: IFTRUE 73092
73090: GO 73148
73092: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73093: LD_ADDR_VAR 0 9
73097: PUSH
73098: LD_VAR 0 11
73102: PUSH
73103: LD_VAR 0 12
73107: PUSH
73108: LD_VAR 0 13
73112: PUSH
73113: LD_VAR 0 14
73117: PUSH
73118: LD_VAR 0 15
73122: PUSH
73123: LD_VAR 0 16
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: PUSH
73136: LD_VAR 0 4
73140: PUSH
73141: LD_INT 1
73143: PLUS
73144: ARRAY
73145: ST_TO_ADDR
73146: GO 73277
73148: LD_INT 2
73150: DOUBLE
73151: EQUAL
73152: IFTRUE 73156
73154: GO 73212
73156: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73157: LD_ADDR_VAR 0 9
73161: PUSH
73162: LD_VAR 0 17
73166: PUSH
73167: LD_VAR 0 18
73171: PUSH
73172: LD_VAR 0 19
73176: PUSH
73177: LD_VAR 0 20
73181: PUSH
73182: LD_VAR 0 21
73186: PUSH
73187: LD_VAR 0 22
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: PUSH
73200: LD_VAR 0 4
73204: PUSH
73205: LD_INT 1
73207: PLUS
73208: ARRAY
73209: ST_TO_ADDR
73210: GO 73277
73212: LD_INT 3
73214: DOUBLE
73215: EQUAL
73216: IFTRUE 73220
73218: GO 73276
73220: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73221: LD_ADDR_VAR 0 9
73225: PUSH
73226: LD_VAR 0 23
73230: PUSH
73231: LD_VAR 0 24
73235: PUSH
73236: LD_VAR 0 25
73240: PUSH
73241: LD_VAR 0 26
73245: PUSH
73246: LD_VAR 0 27
73250: PUSH
73251: LD_VAR 0 28
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: PUSH
73264: LD_VAR 0 4
73268: PUSH
73269: LD_INT 1
73271: PLUS
73272: ARRAY
73273: ST_TO_ADDR
73274: GO 73277
73276: POP
73277: GO 73832
73279: LD_INT 2
73281: DOUBLE
73282: EQUAL
73283: IFTRUE 73293
73285: LD_INT 3
73287: DOUBLE
73288: EQUAL
73289: IFTRUE 73293
73291: GO 73349
73293: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73294: LD_ADDR_VAR 0 9
73298: PUSH
73299: LD_VAR 0 29
73303: PUSH
73304: LD_VAR 0 30
73308: PUSH
73309: LD_VAR 0 31
73313: PUSH
73314: LD_VAR 0 32
73318: PUSH
73319: LD_VAR 0 33
73323: PUSH
73324: LD_VAR 0 34
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: PUSH
73337: LD_VAR 0 4
73341: PUSH
73342: LD_INT 1
73344: PLUS
73345: ARRAY
73346: ST_TO_ADDR
73347: GO 73832
73349: LD_INT 16
73351: DOUBLE
73352: EQUAL
73353: IFTRUE 73411
73355: LD_INT 17
73357: DOUBLE
73358: EQUAL
73359: IFTRUE 73411
73361: LD_INT 18
73363: DOUBLE
73364: EQUAL
73365: IFTRUE 73411
73367: LD_INT 19
73369: DOUBLE
73370: EQUAL
73371: IFTRUE 73411
73373: LD_INT 22
73375: DOUBLE
73376: EQUAL
73377: IFTRUE 73411
73379: LD_INT 20
73381: DOUBLE
73382: EQUAL
73383: IFTRUE 73411
73385: LD_INT 21
73387: DOUBLE
73388: EQUAL
73389: IFTRUE 73411
73391: LD_INT 23
73393: DOUBLE
73394: EQUAL
73395: IFTRUE 73411
73397: LD_INT 24
73399: DOUBLE
73400: EQUAL
73401: IFTRUE 73411
73403: LD_INT 25
73405: DOUBLE
73406: EQUAL
73407: IFTRUE 73411
73409: GO 73467
73411: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73412: LD_ADDR_VAR 0 9
73416: PUSH
73417: LD_VAR 0 35
73421: PUSH
73422: LD_VAR 0 36
73426: PUSH
73427: LD_VAR 0 37
73431: PUSH
73432: LD_VAR 0 38
73436: PUSH
73437: LD_VAR 0 39
73441: PUSH
73442: LD_VAR 0 40
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: PUSH
73455: LD_VAR 0 4
73459: PUSH
73460: LD_INT 1
73462: PLUS
73463: ARRAY
73464: ST_TO_ADDR
73465: GO 73832
73467: LD_INT 6
73469: DOUBLE
73470: EQUAL
73471: IFTRUE 73523
73473: LD_INT 7
73475: DOUBLE
73476: EQUAL
73477: IFTRUE 73523
73479: LD_INT 8
73481: DOUBLE
73482: EQUAL
73483: IFTRUE 73523
73485: LD_INT 13
73487: DOUBLE
73488: EQUAL
73489: IFTRUE 73523
73491: LD_INT 12
73493: DOUBLE
73494: EQUAL
73495: IFTRUE 73523
73497: LD_INT 15
73499: DOUBLE
73500: EQUAL
73501: IFTRUE 73523
73503: LD_INT 11
73505: DOUBLE
73506: EQUAL
73507: IFTRUE 73523
73509: LD_INT 14
73511: DOUBLE
73512: EQUAL
73513: IFTRUE 73523
73515: LD_INT 10
73517: DOUBLE
73518: EQUAL
73519: IFTRUE 73523
73521: GO 73579
73523: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73524: LD_ADDR_VAR 0 9
73528: PUSH
73529: LD_VAR 0 41
73533: PUSH
73534: LD_VAR 0 42
73538: PUSH
73539: LD_VAR 0 43
73543: PUSH
73544: LD_VAR 0 44
73548: PUSH
73549: LD_VAR 0 45
73553: PUSH
73554: LD_VAR 0 46
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: PUSH
73567: LD_VAR 0 4
73571: PUSH
73572: LD_INT 1
73574: PLUS
73575: ARRAY
73576: ST_TO_ADDR
73577: GO 73832
73579: LD_INT 36
73581: DOUBLE
73582: EQUAL
73583: IFTRUE 73587
73585: GO 73643
73587: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73588: LD_ADDR_VAR 0 9
73592: PUSH
73593: LD_VAR 0 47
73597: PUSH
73598: LD_VAR 0 48
73602: PUSH
73603: LD_VAR 0 49
73607: PUSH
73608: LD_VAR 0 50
73612: PUSH
73613: LD_VAR 0 51
73617: PUSH
73618: LD_VAR 0 52
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: PUSH
73631: LD_VAR 0 4
73635: PUSH
73636: LD_INT 1
73638: PLUS
73639: ARRAY
73640: ST_TO_ADDR
73641: GO 73832
73643: LD_INT 4
73645: DOUBLE
73646: EQUAL
73647: IFTRUE 73669
73649: LD_INT 5
73651: DOUBLE
73652: EQUAL
73653: IFTRUE 73669
73655: LD_INT 34
73657: DOUBLE
73658: EQUAL
73659: IFTRUE 73669
73661: LD_INT 37
73663: DOUBLE
73664: EQUAL
73665: IFTRUE 73669
73667: GO 73725
73669: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73670: LD_ADDR_VAR 0 9
73674: PUSH
73675: LD_VAR 0 53
73679: PUSH
73680: LD_VAR 0 54
73684: PUSH
73685: LD_VAR 0 55
73689: PUSH
73690: LD_VAR 0 56
73694: PUSH
73695: LD_VAR 0 57
73699: PUSH
73700: LD_VAR 0 58
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: PUSH
73713: LD_VAR 0 4
73717: PUSH
73718: LD_INT 1
73720: PLUS
73721: ARRAY
73722: ST_TO_ADDR
73723: GO 73832
73725: LD_INT 31
73727: DOUBLE
73728: EQUAL
73729: IFTRUE 73775
73731: LD_INT 32
73733: DOUBLE
73734: EQUAL
73735: IFTRUE 73775
73737: LD_INT 33
73739: DOUBLE
73740: EQUAL
73741: IFTRUE 73775
73743: LD_INT 27
73745: DOUBLE
73746: EQUAL
73747: IFTRUE 73775
73749: LD_INT 26
73751: DOUBLE
73752: EQUAL
73753: IFTRUE 73775
73755: LD_INT 28
73757: DOUBLE
73758: EQUAL
73759: IFTRUE 73775
73761: LD_INT 29
73763: DOUBLE
73764: EQUAL
73765: IFTRUE 73775
73767: LD_INT 30
73769: DOUBLE
73770: EQUAL
73771: IFTRUE 73775
73773: GO 73831
73775: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73776: LD_ADDR_VAR 0 9
73780: PUSH
73781: LD_VAR 0 59
73785: PUSH
73786: LD_VAR 0 60
73790: PUSH
73791: LD_VAR 0 61
73795: PUSH
73796: LD_VAR 0 62
73800: PUSH
73801: LD_VAR 0 63
73805: PUSH
73806: LD_VAR 0 64
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: PUSH
73819: LD_VAR 0 4
73823: PUSH
73824: LD_INT 1
73826: PLUS
73827: ARRAY
73828: ST_TO_ADDR
73829: GO 73832
73831: POP
// temp_list2 = [ ] ;
73832: LD_ADDR_VAR 0 10
73836: PUSH
73837: EMPTY
73838: ST_TO_ADDR
// for i in temp_list do
73839: LD_ADDR_VAR 0 8
73843: PUSH
73844: LD_VAR 0 9
73848: PUSH
73849: FOR_IN
73850: IFFALSE 73902
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73852: LD_ADDR_VAR 0 10
73856: PUSH
73857: LD_VAR 0 10
73861: PUSH
73862: LD_VAR 0 8
73866: PUSH
73867: LD_INT 1
73869: ARRAY
73870: PUSH
73871: LD_VAR 0 2
73875: PLUS
73876: PUSH
73877: LD_VAR 0 8
73881: PUSH
73882: LD_INT 2
73884: ARRAY
73885: PUSH
73886: LD_VAR 0 3
73890: PLUS
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: EMPTY
73897: LIST
73898: ADD
73899: ST_TO_ADDR
73900: GO 73849
73902: POP
73903: POP
// result = temp_list2 ;
73904: LD_ADDR_VAR 0 7
73908: PUSH
73909: LD_VAR 0 10
73913: ST_TO_ADDR
// end ;
73914: LD_VAR 0 7
73918: RET
// export function EnemyInRange ( unit , dist ) ; begin
73919: LD_INT 0
73921: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73922: LD_ADDR_VAR 0 3
73926: PUSH
73927: LD_VAR 0 1
73931: PPUSH
73932: CALL_OW 255
73936: PPUSH
73937: LD_VAR 0 1
73941: PPUSH
73942: CALL_OW 250
73946: PPUSH
73947: LD_VAR 0 1
73951: PPUSH
73952: CALL_OW 251
73956: PPUSH
73957: LD_VAR 0 2
73961: PPUSH
73962: CALL 47292 0 4
73966: PUSH
73967: LD_INT 4
73969: ARRAY
73970: ST_TO_ADDR
// end ;
73971: LD_VAR 0 3
73975: RET
// export function PlayerSeeMe ( unit ) ; begin
73976: LD_INT 0
73978: PPUSH
// result := See ( your_side , unit ) ;
73979: LD_ADDR_VAR 0 2
73983: PUSH
73984: LD_OWVAR 2
73988: PPUSH
73989: LD_VAR 0 1
73993: PPUSH
73994: CALL_OW 292
73998: ST_TO_ADDR
// end ;
73999: LD_VAR 0 2
74003: RET
// export function ReverseDir ( unit ) ; begin
74004: LD_INT 0
74006: PPUSH
// if not unit then
74007: LD_VAR 0 1
74011: NOT
74012: IFFALSE 74016
// exit ;
74014: GO 74039
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74016: LD_ADDR_VAR 0 2
74020: PUSH
74021: LD_VAR 0 1
74025: PPUSH
74026: CALL_OW 254
74030: PUSH
74031: LD_INT 3
74033: PLUS
74034: PUSH
74035: LD_INT 6
74037: MOD
74038: ST_TO_ADDR
// end ;
74039: LD_VAR 0 2
74043: RET
// export function ReverseArray ( array ) ; var i ; begin
74044: LD_INT 0
74046: PPUSH
74047: PPUSH
// if not array then
74048: LD_VAR 0 1
74052: NOT
74053: IFFALSE 74057
// exit ;
74055: GO 74112
// result := [ ] ;
74057: LD_ADDR_VAR 0 2
74061: PUSH
74062: EMPTY
74063: ST_TO_ADDR
// for i := array downto 1 do
74064: LD_ADDR_VAR 0 3
74068: PUSH
74069: DOUBLE
74070: LD_VAR 0 1
74074: INC
74075: ST_TO_ADDR
74076: LD_INT 1
74078: PUSH
74079: FOR_DOWNTO
74080: IFFALSE 74110
// result := Join ( result , array [ i ] ) ;
74082: LD_ADDR_VAR 0 2
74086: PUSH
74087: LD_VAR 0 2
74091: PPUSH
74092: LD_VAR 0 1
74096: PUSH
74097: LD_VAR 0 3
74101: ARRAY
74102: PPUSH
74103: CALL 78757 0 2
74107: ST_TO_ADDR
74108: GO 74079
74110: POP
74111: POP
// end ;
74112: LD_VAR 0 2
74116: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74117: LD_INT 0
74119: PPUSH
74120: PPUSH
74121: PPUSH
74122: PPUSH
74123: PPUSH
74124: PPUSH
// if not unit or not hexes then
74125: LD_VAR 0 1
74129: NOT
74130: PUSH
74131: LD_VAR 0 2
74135: NOT
74136: OR
74137: IFFALSE 74141
// exit ;
74139: GO 74264
// dist := 9999 ;
74141: LD_ADDR_VAR 0 5
74145: PUSH
74146: LD_INT 9999
74148: ST_TO_ADDR
// for i = 1 to hexes do
74149: LD_ADDR_VAR 0 4
74153: PUSH
74154: DOUBLE
74155: LD_INT 1
74157: DEC
74158: ST_TO_ADDR
74159: LD_VAR 0 2
74163: PUSH
74164: FOR_TO
74165: IFFALSE 74252
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74167: LD_ADDR_VAR 0 6
74171: PUSH
74172: LD_VAR 0 1
74176: PPUSH
74177: LD_VAR 0 2
74181: PUSH
74182: LD_VAR 0 4
74186: ARRAY
74187: PUSH
74188: LD_INT 1
74190: ARRAY
74191: PPUSH
74192: LD_VAR 0 2
74196: PUSH
74197: LD_VAR 0 4
74201: ARRAY
74202: PUSH
74203: LD_INT 2
74205: ARRAY
74206: PPUSH
74207: CALL_OW 297
74211: ST_TO_ADDR
// if tdist < dist then
74212: LD_VAR 0 6
74216: PUSH
74217: LD_VAR 0 5
74221: LESS
74222: IFFALSE 74250
// begin hex := hexes [ i ] ;
74224: LD_ADDR_VAR 0 8
74228: PUSH
74229: LD_VAR 0 2
74233: PUSH
74234: LD_VAR 0 4
74238: ARRAY
74239: ST_TO_ADDR
// dist := tdist ;
74240: LD_ADDR_VAR 0 5
74244: PUSH
74245: LD_VAR 0 6
74249: ST_TO_ADDR
// end ; end ;
74250: GO 74164
74252: POP
74253: POP
// result := hex ;
74254: LD_ADDR_VAR 0 3
74258: PUSH
74259: LD_VAR 0 8
74263: ST_TO_ADDR
// end ;
74264: LD_VAR 0 3
74268: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74269: LD_INT 0
74271: PPUSH
74272: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74273: LD_VAR 0 1
74277: NOT
74278: PUSH
74279: LD_VAR 0 1
74283: PUSH
74284: LD_INT 21
74286: PUSH
74287: LD_INT 2
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PUSH
74294: LD_INT 23
74296: PUSH
74297: LD_INT 2
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PPUSH
74308: CALL_OW 69
74312: IN
74313: NOT
74314: OR
74315: IFFALSE 74319
// exit ;
74317: GO 74366
// for i = 1 to 3 do
74319: LD_ADDR_VAR 0 3
74323: PUSH
74324: DOUBLE
74325: LD_INT 1
74327: DEC
74328: ST_TO_ADDR
74329: LD_INT 3
74331: PUSH
74332: FOR_TO
74333: IFFALSE 74364
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 250
74344: PPUSH
74345: LD_VAR 0 1
74349: PPUSH
74350: CALL_OW 251
74354: PPUSH
74355: LD_INT 1
74357: PPUSH
74358: CALL_OW 453
74362: GO 74332
74364: POP
74365: POP
// end ;
74366: LD_VAR 0 2
74370: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74371: LD_INT 0
74373: PPUSH
74374: PPUSH
74375: PPUSH
74376: PPUSH
74377: PPUSH
74378: PPUSH
// if not unit or not enemy_unit then
74379: LD_VAR 0 1
74383: NOT
74384: PUSH
74385: LD_VAR 0 2
74389: NOT
74390: OR
74391: IFFALSE 74395
// exit ;
74393: GO 74862
// if GetLives ( i ) < 250 then
74395: LD_VAR 0 4
74399: PPUSH
74400: CALL_OW 256
74404: PUSH
74405: LD_INT 250
74407: LESS
74408: IFFALSE 74421
// begin ComAutodestruct ( i ) ;
74410: LD_VAR 0 4
74414: PPUSH
74415: CALL 74269 0 1
// exit ;
74419: GO 74862
// end ; x := GetX ( enemy_unit ) ;
74421: LD_ADDR_VAR 0 7
74425: PUSH
74426: LD_VAR 0 2
74430: PPUSH
74431: CALL_OW 250
74435: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74436: LD_ADDR_VAR 0 8
74440: PUSH
74441: LD_VAR 0 2
74445: PPUSH
74446: CALL_OW 251
74450: ST_TO_ADDR
// if not x or not y then
74451: LD_VAR 0 7
74455: NOT
74456: PUSH
74457: LD_VAR 0 8
74461: NOT
74462: OR
74463: IFFALSE 74467
// exit ;
74465: GO 74862
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74467: LD_ADDR_VAR 0 6
74471: PUSH
74472: LD_VAR 0 7
74476: PPUSH
74477: LD_INT 0
74479: PPUSH
74480: LD_INT 4
74482: PPUSH
74483: CALL_OW 272
74487: PUSH
74488: LD_VAR 0 8
74492: PPUSH
74493: LD_INT 0
74495: PPUSH
74496: LD_INT 4
74498: PPUSH
74499: CALL_OW 273
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: LD_VAR 0 7
74512: PPUSH
74513: LD_INT 1
74515: PPUSH
74516: LD_INT 4
74518: PPUSH
74519: CALL_OW 272
74523: PUSH
74524: LD_VAR 0 8
74528: PPUSH
74529: LD_INT 1
74531: PPUSH
74532: LD_INT 4
74534: PPUSH
74535: CALL_OW 273
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: PUSH
74544: LD_VAR 0 7
74548: PPUSH
74549: LD_INT 2
74551: PPUSH
74552: LD_INT 4
74554: PPUSH
74555: CALL_OW 272
74559: PUSH
74560: LD_VAR 0 8
74564: PPUSH
74565: LD_INT 2
74567: PPUSH
74568: LD_INT 4
74570: PPUSH
74571: CALL_OW 273
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_VAR 0 7
74584: PPUSH
74585: LD_INT 3
74587: PPUSH
74588: LD_INT 4
74590: PPUSH
74591: CALL_OW 272
74595: PUSH
74596: LD_VAR 0 8
74600: PPUSH
74601: LD_INT 3
74603: PPUSH
74604: LD_INT 4
74606: PPUSH
74607: CALL_OW 273
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_VAR 0 7
74620: PPUSH
74621: LD_INT 4
74623: PPUSH
74624: LD_INT 4
74626: PPUSH
74627: CALL_OW 272
74631: PUSH
74632: LD_VAR 0 8
74636: PPUSH
74637: LD_INT 4
74639: PPUSH
74640: LD_INT 4
74642: PPUSH
74643: CALL_OW 273
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_VAR 0 7
74656: PPUSH
74657: LD_INT 5
74659: PPUSH
74660: LD_INT 4
74662: PPUSH
74663: CALL_OW 272
74667: PUSH
74668: LD_VAR 0 8
74672: PPUSH
74673: LD_INT 5
74675: PPUSH
74676: LD_INT 4
74678: PPUSH
74679: CALL_OW 273
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: ST_TO_ADDR
// for i = tmp downto 1 do
74696: LD_ADDR_VAR 0 4
74700: PUSH
74701: DOUBLE
74702: LD_VAR 0 6
74706: INC
74707: ST_TO_ADDR
74708: LD_INT 1
74710: PUSH
74711: FOR_DOWNTO
74712: IFFALSE 74813
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74714: LD_VAR 0 6
74718: PUSH
74719: LD_VAR 0 4
74723: ARRAY
74724: PUSH
74725: LD_INT 1
74727: ARRAY
74728: PPUSH
74729: LD_VAR 0 6
74733: PUSH
74734: LD_VAR 0 4
74738: ARRAY
74739: PUSH
74740: LD_INT 2
74742: ARRAY
74743: PPUSH
74744: CALL_OW 488
74748: NOT
74749: PUSH
74750: LD_VAR 0 6
74754: PUSH
74755: LD_VAR 0 4
74759: ARRAY
74760: PUSH
74761: LD_INT 1
74763: ARRAY
74764: PPUSH
74765: LD_VAR 0 6
74769: PUSH
74770: LD_VAR 0 4
74774: ARRAY
74775: PUSH
74776: LD_INT 2
74778: ARRAY
74779: PPUSH
74780: CALL_OW 428
74784: PUSH
74785: LD_INT 0
74787: NONEQUAL
74788: OR
74789: IFFALSE 74811
// tmp := Delete ( tmp , i ) ;
74791: LD_ADDR_VAR 0 6
74795: PUSH
74796: LD_VAR 0 6
74800: PPUSH
74801: LD_VAR 0 4
74805: PPUSH
74806: CALL_OW 3
74810: ST_TO_ADDR
74811: GO 74711
74813: POP
74814: POP
// j := GetClosestHex ( unit , tmp ) ;
74815: LD_ADDR_VAR 0 5
74819: PUSH
74820: LD_VAR 0 1
74824: PPUSH
74825: LD_VAR 0 6
74829: PPUSH
74830: CALL 74117 0 2
74834: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74835: LD_VAR 0 1
74839: PPUSH
74840: LD_VAR 0 5
74844: PUSH
74845: LD_INT 1
74847: ARRAY
74848: PPUSH
74849: LD_VAR 0 5
74853: PUSH
74854: LD_INT 2
74856: ARRAY
74857: PPUSH
74858: CALL_OW 111
// end ;
74862: LD_VAR 0 3
74866: RET
// export function PrepareApemanSoldier ( ) ; begin
74867: LD_INT 0
74869: PPUSH
// uc_nation := 0 ;
74870: LD_ADDR_OWVAR 21
74874: PUSH
74875: LD_INT 0
74877: ST_TO_ADDR
// hc_sex := sex_male ;
74878: LD_ADDR_OWVAR 27
74882: PUSH
74883: LD_INT 1
74885: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74886: LD_ADDR_OWVAR 28
74890: PUSH
74891: LD_INT 15
74893: ST_TO_ADDR
// hc_gallery :=  ;
74894: LD_ADDR_OWVAR 33
74898: PUSH
74899: LD_STRING 
74901: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74902: LD_ADDR_OWVAR 31
74906: PUSH
74907: LD_INT 0
74909: PPUSH
74910: LD_INT 3
74912: PPUSH
74913: CALL_OW 12
74917: PUSH
74918: LD_INT 0
74920: PPUSH
74921: LD_INT 3
74923: PPUSH
74924: CALL_OW 12
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: LD_INT 0
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: ST_TO_ADDR
// end ;
74941: LD_VAR 0 1
74945: RET
// export function PrepareApemanEngineer ( ) ; begin
74946: LD_INT 0
74948: PPUSH
// uc_nation := 0 ;
74949: LD_ADDR_OWVAR 21
74953: PUSH
74954: LD_INT 0
74956: ST_TO_ADDR
// hc_sex := sex_male ;
74957: LD_ADDR_OWVAR 27
74961: PUSH
74962: LD_INT 1
74964: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74965: LD_ADDR_OWVAR 28
74969: PUSH
74970: LD_INT 16
74972: ST_TO_ADDR
// hc_gallery :=  ;
74973: LD_ADDR_OWVAR 33
74977: PUSH
74978: LD_STRING 
74980: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74981: LD_ADDR_OWVAR 31
74985: PUSH
74986: LD_INT 0
74988: PPUSH
74989: LD_INT 3
74991: PPUSH
74992: CALL_OW 12
74996: PUSH
74997: LD_INT 0
74999: PPUSH
75000: LD_INT 3
75002: PPUSH
75003: CALL_OW 12
75007: PUSH
75008: LD_INT 0
75010: PUSH
75011: LD_INT 0
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: ST_TO_ADDR
// end ;
75020: LD_VAR 0 1
75024: RET
// export function PrepareApeman ( agressivity ) ; begin
75025: LD_INT 0
75027: PPUSH
// uc_side := 0 ;
75028: LD_ADDR_OWVAR 20
75032: PUSH
75033: LD_INT 0
75035: ST_TO_ADDR
// uc_nation := 0 ;
75036: LD_ADDR_OWVAR 21
75040: PUSH
75041: LD_INT 0
75043: ST_TO_ADDR
// hc_sex := sex_male ;
75044: LD_ADDR_OWVAR 27
75048: PUSH
75049: LD_INT 1
75051: ST_TO_ADDR
// hc_class := class_apeman ;
75052: LD_ADDR_OWVAR 28
75056: PUSH
75057: LD_INT 12
75059: ST_TO_ADDR
// hc_gallery :=  ;
75060: LD_ADDR_OWVAR 33
75064: PUSH
75065: LD_STRING 
75067: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75068: LD_ADDR_OWVAR 35
75072: PUSH
75073: LD_VAR 0 1
75077: NEG
75078: PPUSH
75079: LD_VAR 0 1
75083: PPUSH
75084: CALL_OW 12
75088: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75089: LD_ADDR_OWVAR 31
75093: PUSH
75094: LD_INT 0
75096: PPUSH
75097: LD_INT 3
75099: PPUSH
75100: CALL_OW 12
75104: PUSH
75105: LD_INT 0
75107: PPUSH
75108: LD_INT 3
75110: PPUSH
75111: CALL_OW 12
75115: PUSH
75116: LD_INT 0
75118: PUSH
75119: LD_INT 0
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: ST_TO_ADDR
// end ;
75128: LD_VAR 0 2
75132: RET
// export function PrepareTiger ( agressivity ) ; begin
75133: LD_INT 0
75135: PPUSH
// uc_side := 0 ;
75136: LD_ADDR_OWVAR 20
75140: PUSH
75141: LD_INT 0
75143: ST_TO_ADDR
// uc_nation := 0 ;
75144: LD_ADDR_OWVAR 21
75148: PUSH
75149: LD_INT 0
75151: ST_TO_ADDR
// hc_class := class_tiger ;
75152: LD_ADDR_OWVAR 28
75156: PUSH
75157: LD_INT 14
75159: ST_TO_ADDR
// hc_gallery :=  ;
75160: LD_ADDR_OWVAR 33
75164: PUSH
75165: LD_STRING 
75167: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75168: LD_ADDR_OWVAR 35
75172: PUSH
75173: LD_VAR 0 1
75177: NEG
75178: PPUSH
75179: LD_VAR 0 1
75183: PPUSH
75184: CALL_OW 12
75188: ST_TO_ADDR
// end ;
75189: LD_VAR 0 2
75193: RET
// export function PrepareEnchidna ( ) ; begin
75194: LD_INT 0
75196: PPUSH
// uc_side := 0 ;
75197: LD_ADDR_OWVAR 20
75201: PUSH
75202: LD_INT 0
75204: ST_TO_ADDR
// uc_nation := 0 ;
75205: LD_ADDR_OWVAR 21
75209: PUSH
75210: LD_INT 0
75212: ST_TO_ADDR
// hc_class := class_baggie ;
75213: LD_ADDR_OWVAR 28
75217: PUSH
75218: LD_INT 13
75220: ST_TO_ADDR
// hc_gallery :=  ;
75221: LD_ADDR_OWVAR 33
75225: PUSH
75226: LD_STRING 
75228: ST_TO_ADDR
// end ;
75229: LD_VAR 0 1
75233: RET
// export function PrepareFrog ( ) ; begin
75234: LD_INT 0
75236: PPUSH
// uc_side := 0 ;
75237: LD_ADDR_OWVAR 20
75241: PUSH
75242: LD_INT 0
75244: ST_TO_ADDR
// uc_nation := 0 ;
75245: LD_ADDR_OWVAR 21
75249: PUSH
75250: LD_INT 0
75252: ST_TO_ADDR
// hc_class := class_frog ;
75253: LD_ADDR_OWVAR 28
75257: PUSH
75258: LD_INT 19
75260: ST_TO_ADDR
// hc_gallery :=  ;
75261: LD_ADDR_OWVAR 33
75265: PUSH
75266: LD_STRING 
75268: ST_TO_ADDR
// end ;
75269: LD_VAR 0 1
75273: RET
// export function PrepareFish ( ) ; begin
75274: LD_INT 0
75276: PPUSH
// uc_side := 0 ;
75277: LD_ADDR_OWVAR 20
75281: PUSH
75282: LD_INT 0
75284: ST_TO_ADDR
// uc_nation := 0 ;
75285: LD_ADDR_OWVAR 21
75289: PUSH
75290: LD_INT 0
75292: ST_TO_ADDR
// hc_class := class_fish ;
75293: LD_ADDR_OWVAR 28
75297: PUSH
75298: LD_INT 20
75300: ST_TO_ADDR
// hc_gallery :=  ;
75301: LD_ADDR_OWVAR 33
75305: PUSH
75306: LD_STRING 
75308: ST_TO_ADDR
// end ;
75309: LD_VAR 0 1
75313: RET
// export function PrepareBird ( ) ; begin
75314: LD_INT 0
75316: PPUSH
// uc_side := 0 ;
75317: LD_ADDR_OWVAR 20
75321: PUSH
75322: LD_INT 0
75324: ST_TO_ADDR
// uc_nation := 0 ;
75325: LD_ADDR_OWVAR 21
75329: PUSH
75330: LD_INT 0
75332: ST_TO_ADDR
// hc_class := class_phororhacos ;
75333: LD_ADDR_OWVAR 28
75337: PUSH
75338: LD_INT 18
75340: ST_TO_ADDR
// hc_gallery :=  ;
75341: LD_ADDR_OWVAR 33
75345: PUSH
75346: LD_STRING 
75348: ST_TO_ADDR
// end ;
75349: LD_VAR 0 1
75353: RET
// export function PrepareHorse ( ) ; begin
75354: LD_INT 0
75356: PPUSH
// uc_side := 0 ;
75357: LD_ADDR_OWVAR 20
75361: PUSH
75362: LD_INT 0
75364: ST_TO_ADDR
// uc_nation := 0 ;
75365: LD_ADDR_OWVAR 21
75369: PUSH
75370: LD_INT 0
75372: ST_TO_ADDR
// hc_class := class_horse ;
75373: LD_ADDR_OWVAR 28
75377: PUSH
75378: LD_INT 21
75380: ST_TO_ADDR
// hc_gallery :=  ;
75381: LD_ADDR_OWVAR 33
75385: PUSH
75386: LD_STRING 
75388: ST_TO_ADDR
// end ;
75389: LD_VAR 0 1
75393: RET
// export function PrepareMastodont ( ) ; begin
75394: LD_INT 0
75396: PPUSH
// uc_side := 0 ;
75397: LD_ADDR_OWVAR 20
75401: PUSH
75402: LD_INT 0
75404: ST_TO_ADDR
// uc_nation := 0 ;
75405: LD_ADDR_OWVAR 21
75409: PUSH
75410: LD_INT 0
75412: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75413: LD_ADDR_OWVAR 37
75417: PUSH
75418: LD_INT 31
75420: ST_TO_ADDR
// vc_control := control_rider ;
75421: LD_ADDR_OWVAR 38
75425: PUSH
75426: LD_INT 4
75428: ST_TO_ADDR
// end ;
75429: LD_VAR 0 1
75433: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75434: LD_INT 0
75436: PPUSH
75437: PPUSH
75438: PPUSH
// uc_side = 0 ;
75439: LD_ADDR_OWVAR 20
75443: PUSH
75444: LD_INT 0
75446: ST_TO_ADDR
// uc_nation = 0 ;
75447: LD_ADDR_OWVAR 21
75451: PUSH
75452: LD_INT 0
75454: ST_TO_ADDR
// InitHc_All ( ) ;
75455: CALL_OW 584
// InitVc ;
75459: CALL_OW 20
// if mastodonts then
75463: LD_VAR 0 6
75467: IFFALSE 75534
// for i = 1 to mastodonts do
75469: LD_ADDR_VAR 0 11
75473: PUSH
75474: DOUBLE
75475: LD_INT 1
75477: DEC
75478: ST_TO_ADDR
75479: LD_VAR 0 6
75483: PUSH
75484: FOR_TO
75485: IFFALSE 75532
// begin vc_chassis := 31 ;
75487: LD_ADDR_OWVAR 37
75491: PUSH
75492: LD_INT 31
75494: ST_TO_ADDR
// vc_control := control_rider ;
75495: LD_ADDR_OWVAR 38
75499: PUSH
75500: LD_INT 4
75502: ST_TO_ADDR
// animal := CreateVehicle ;
75503: LD_ADDR_VAR 0 12
75507: PUSH
75508: CALL_OW 45
75512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75513: LD_VAR 0 12
75517: PPUSH
75518: LD_VAR 0 8
75522: PPUSH
75523: LD_INT 0
75525: PPUSH
75526: CALL 77662 0 3
// end ;
75530: GO 75484
75532: POP
75533: POP
// if horses then
75534: LD_VAR 0 5
75538: IFFALSE 75605
// for i = 1 to horses do
75540: LD_ADDR_VAR 0 11
75544: PUSH
75545: DOUBLE
75546: LD_INT 1
75548: DEC
75549: ST_TO_ADDR
75550: LD_VAR 0 5
75554: PUSH
75555: FOR_TO
75556: IFFALSE 75603
// begin hc_class := 21 ;
75558: LD_ADDR_OWVAR 28
75562: PUSH
75563: LD_INT 21
75565: ST_TO_ADDR
// hc_gallery :=  ;
75566: LD_ADDR_OWVAR 33
75570: PUSH
75571: LD_STRING 
75573: ST_TO_ADDR
// animal := CreateHuman ;
75574: LD_ADDR_VAR 0 12
75578: PUSH
75579: CALL_OW 44
75583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75584: LD_VAR 0 12
75588: PPUSH
75589: LD_VAR 0 8
75593: PPUSH
75594: LD_INT 0
75596: PPUSH
75597: CALL 77662 0 3
// end ;
75601: GO 75555
75603: POP
75604: POP
// if birds then
75605: LD_VAR 0 1
75609: IFFALSE 75676
// for i = 1 to birds do
75611: LD_ADDR_VAR 0 11
75615: PUSH
75616: DOUBLE
75617: LD_INT 1
75619: DEC
75620: ST_TO_ADDR
75621: LD_VAR 0 1
75625: PUSH
75626: FOR_TO
75627: IFFALSE 75674
// begin hc_class := 18 ;
75629: LD_ADDR_OWVAR 28
75633: PUSH
75634: LD_INT 18
75636: ST_TO_ADDR
// hc_gallery =  ;
75637: LD_ADDR_OWVAR 33
75641: PUSH
75642: LD_STRING 
75644: ST_TO_ADDR
// animal := CreateHuman ;
75645: LD_ADDR_VAR 0 12
75649: PUSH
75650: CALL_OW 44
75654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75655: LD_VAR 0 12
75659: PPUSH
75660: LD_VAR 0 8
75664: PPUSH
75665: LD_INT 0
75667: PPUSH
75668: CALL 77662 0 3
// end ;
75672: GO 75626
75674: POP
75675: POP
// if tigers then
75676: LD_VAR 0 2
75680: IFFALSE 75764
// for i = 1 to tigers do
75682: LD_ADDR_VAR 0 11
75686: PUSH
75687: DOUBLE
75688: LD_INT 1
75690: DEC
75691: ST_TO_ADDR
75692: LD_VAR 0 2
75696: PUSH
75697: FOR_TO
75698: IFFALSE 75762
// begin hc_class = class_tiger ;
75700: LD_ADDR_OWVAR 28
75704: PUSH
75705: LD_INT 14
75707: ST_TO_ADDR
// hc_gallery =  ;
75708: LD_ADDR_OWVAR 33
75712: PUSH
75713: LD_STRING 
75715: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75716: LD_ADDR_OWVAR 35
75720: PUSH
75721: LD_INT 7
75723: NEG
75724: PPUSH
75725: LD_INT 7
75727: PPUSH
75728: CALL_OW 12
75732: ST_TO_ADDR
// animal := CreateHuman ;
75733: LD_ADDR_VAR 0 12
75737: PUSH
75738: CALL_OW 44
75742: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75743: LD_VAR 0 12
75747: PPUSH
75748: LD_VAR 0 8
75752: PPUSH
75753: LD_INT 0
75755: PPUSH
75756: CALL 77662 0 3
// end ;
75760: GO 75697
75762: POP
75763: POP
// if apemans then
75764: LD_VAR 0 3
75768: IFFALSE 75891
// for i = 1 to apemans do
75770: LD_ADDR_VAR 0 11
75774: PUSH
75775: DOUBLE
75776: LD_INT 1
75778: DEC
75779: ST_TO_ADDR
75780: LD_VAR 0 3
75784: PUSH
75785: FOR_TO
75786: IFFALSE 75889
// begin hc_class = class_apeman ;
75788: LD_ADDR_OWVAR 28
75792: PUSH
75793: LD_INT 12
75795: ST_TO_ADDR
// hc_gallery =  ;
75796: LD_ADDR_OWVAR 33
75800: PUSH
75801: LD_STRING 
75803: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75804: LD_ADDR_OWVAR 35
75808: PUSH
75809: LD_INT 2
75811: NEG
75812: PPUSH
75813: LD_INT 2
75815: PPUSH
75816: CALL_OW 12
75820: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75821: LD_ADDR_OWVAR 31
75825: PUSH
75826: LD_INT 1
75828: PPUSH
75829: LD_INT 3
75831: PPUSH
75832: CALL_OW 12
75836: PUSH
75837: LD_INT 1
75839: PPUSH
75840: LD_INT 3
75842: PPUSH
75843: CALL_OW 12
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_INT 0
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: ST_TO_ADDR
// animal := CreateHuman ;
75860: LD_ADDR_VAR 0 12
75864: PUSH
75865: CALL_OW 44
75869: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75870: LD_VAR 0 12
75874: PPUSH
75875: LD_VAR 0 8
75879: PPUSH
75880: LD_INT 0
75882: PPUSH
75883: CALL 77662 0 3
// end ;
75887: GO 75785
75889: POP
75890: POP
// if enchidnas then
75891: LD_VAR 0 4
75895: IFFALSE 75962
// for i = 1 to enchidnas do
75897: LD_ADDR_VAR 0 11
75901: PUSH
75902: DOUBLE
75903: LD_INT 1
75905: DEC
75906: ST_TO_ADDR
75907: LD_VAR 0 4
75911: PUSH
75912: FOR_TO
75913: IFFALSE 75960
// begin hc_class = 13 ;
75915: LD_ADDR_OWVAR 28
75919: PUSH
75920: LD_INT 13
75922: ST_TO_ADDR
// hc_gallery =  ;
75923: LD_ADDR_OWVAR 33
75927: PUSH
75928: LD_STRING 
75930: ST_TO_ADDR
// animal := CreateHuman ;
75931: LD_ADDR_VAR 0 12
75935: PUSH
75936: CALL_OW 44
75940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75941: LD_VAR 0 12
75945: PPUSH
75946: LD_VAR 0 8
75950: PPUSH
75951: LD_INT 0
75953: PPUSH
75954: CALL 77662 0 3
// end ;
75958: GO 75912
75960: POP
75961: POP
// if fishes then
75962: LD_VAR 0 7
75966: IFFALSE 76033
// for i = 1 to fishes do
75968: LD_ADDR_VAR 0 11
75972: PUSH
75973: DOUBLE
75974: LD_INT 1
75976: DEC
75977: ST_TO_ADDR
75978: LD_VAR 0 7
75982: PUSH
75983: FOR_TO
75984: IFFALSE 76031
// begin hc_class = 20 ;
75986: LD_ADDR_OWVAR 28
75990: PUSH
75991: LD_INT 20
75993: ST_TO_ADDR
// hc_gallery =  ;
75994: LD_ADDR_OWVAR 33
75998: PUSH
75999: LD_STRING 
76001: ST_TO_ADDR
// animal := CreateHuman ;
76002: LD_ADDR_VAR 0 12
76006: PUSH
76007: CALL_OW 44
76011: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76012: LD_VAR 0 12
76016: PPUSH
76017: LD_VAR 0 9
76021: PPUSH
76022: LD_INT 0
76024: PPUSH
76025: CALL 77662 0 3
// end ;
76029: GO 75983
76031: POP
76032: POP
// end ;
76033: LD_VAR 0 10
76037: RET
// export function WantHeal ( sci , unit ) ; begin
76038: LD_INT 0
76040: PPUSH
// if GetTaskList ( sci ) > 0 then
76041: LD_VAR 0 1
76045: PPUSH
76046: CALL_OW 437
76050: PUSH
76051: LD_INT 0
76053: GREATER
76054: IFFALSE 76124
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76056: LD_VAR 0 1
76060: PPUSH
76061: CALL_OW 437
76065: PUSH
76066: LD_INT 1
76068: ARRAY
76069: PUSH
76070: LD_INT 1
76072: ARRAY
76073: PUSH
76074: LD_STRING l
76076: EQUAL
76077: PUSH
76078: LD_VAR 0 1
76082: PPUSH
76083: CALL_OW 437
76087: PUSH
76088: LD_INT 1
76090: ARRAY
76091: PUSH
76092: LD_INT 4
76094: ARRAY
76095: PUSH
76096: LD_VAR 0 2
76100: EQUAL
76101: AND
76102: IFFALSE 76114
// result := true else
76104: LD_ADDR_VAR 0 3
76108: PUSH
76109: LD_INT 1
76111: ST_TO_ADDR
76112: GO 76122
// result := false ;
76114: LD_ADDR_VAR 0 3
76118: PUSH
76119: LD_INT 0
76121: ST_TO_ADDR
// end else
76122: GO 76132
// result := false ;
76124: LD_ADDR_VAR 0 3
76128: PUSH
76129: LD_INT 0
76131: ST_TO_ADDR
// end ;
76132: LD_VAR 0 3
76136: RET
// export function HealTarget ( sci ) ; begin
76137: LD_INT 0
76139: PPUSH
// if not sci then
76140: LD_VAR 0 1
76144: NOT
76145: IFFALSE 76149
// exit ;
76147: GO 76214
// result := 0 ;
76149: LD_ADDR_VAR 0 2
76153: PUSH
76154: LD_INT 0
76156: ST_TO_ADDR
// if GetTaskList ( sci ) then
76157: LD_VAR 0 1
76161: PPUSH
76162: CALL_OW 437
76166: IFFALSE 76214
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76168: LD_VAR 0 1
76172: PPUSH
76173: CALL_OW 437
76177: PUSH
76178: LD_INT 1
76180: ARRAY
76181: PUSH
76182: LD_INT 1
76184: ARRAY
76185: PUSH
76186: LD_STRING l
76188: EQUAL
76189: IFFALSE 76214
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76191: LD_ADDR_VAR 0 2
76195: PUSH
76196: LD_VAR 0 1
76200: PPUSH
76201: CALL_OW 437
76205: PUSH
76206: LD_INT 1
76208: ARRAY
76209: PUSH
76210: LD_INT 4
76212: ARRAY
76213: ST_TO_ADDR
// end ;
76214: LD_VAR 0 2
76218: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76219: LD_INT 0
76221: PPUSH
76222: PPUSH
76223: PPUSH
76224: PPUSH
// if not base_units then
76225: LD_VAR 0 1
76229: NOT
76230: IFFALSE 76234
// exit ;
76232: GO 76321
// result := false ;
76234: LD_ADDR_VAR 0 2
76238: PUSH
76239: LD_INT 0
76241: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76242: LD_ADDR_VAR 0 5
76246: PUSH
76247: LD_VAR 0 1
76251: PPUSH
76252: LD_INT 21
76254: PUSH
76255: LD_INT 3
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PPUSH
76262: CALL_OW 72
76266: ST_TO_ADDR
// if not tmp then
76267: LD_VAR 0 5
76271: NOT
76272: IFFALSE 76276
// exit ;
76274: GO 76321
// for i in tmp do
76276: LD_ADDR_VAR 0 3
76280: PUSH
76281: LD_VAR 0 5
76285: PUSH
76286: FOR_IN
76287: IFFALSE 76319
// begin result := EnemyInRange ( i , 22 ) ;
76289: LD_ADDR_VAR 0 2
76293: PUSH
76294: LD_VAR 0 3
76298: PPUSH
76299: LD_INT 22
76301: PPUSH
76302: CALL 73919 0 2
76306: ST_TO_ADDR
// if result then
76307: LD_VAR 0 2
76311: IFFALSE 76317
// exit ;
76313: POP
76314: POP
76315: GO 76321
// end ;
76317: GO 76286
76319: POP
76320: POP
// end ;
76321: LD_VAR 0 2
76325: RET
// export function FilterByTag ( units , tag ) ; begin
76326: LD_INT 0
76328: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76329: LD_ADDR_VAR 0 3
76333: PUSH
76334: LD_VAR 0 1
76338: PPUSH
76339: LD_INT 120
76341: PUSH
76342: LD_VAR 0 2
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PPUSH
76351: CALL_OW 72
76355: ST_TO_ADDR
// end ;
76356: LD_VAR 0 3
76360: RET
// export function IsDriver ( un ) ; begin
76361: LD_INT 0
76363: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76364: LD_ADDR_VAR 0 2
76368: PUSH
76369: LD_VAR 0 1
76373: PUSH
76374: LD_INT 55
76376: PUSH
76377: EMPTY
76378: LIST
76379: PPUSH
76380: CALL_OW 69
76384: IN
76385: ST_TO_ADDR
// end ;
76386: LD_VAR 0 2
76390: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76391: LD_INT 0
76393: PPUSH
76394: PPUSH
// list := [ ] ;
76395: LD_ADDR_VAR 0 5
76399: PUSH
76400: EMPTY
76401: ST_TO_ADDR
// case d of 0 :
76402: LD_VAR 0 3
76406: PUSH
76407: LD_INT 0
76409: DOUBLE
76410: EQUAL
76411: IFTRUE 76415
76413: GO 76548
76415: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76416: LD_ADDR_VAR 0 5
76420: PUSH
76421: LD_VAR 0 1
76425: PUSH
76426: LD_INT 4
76428: MINUS
76429: PUSH
76430: LD_VAR 0 2
76434: PUSH
76435: LD_INT 4
76437: MINUS
76438: PUSH
76439: LD_INT 2
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: LIST
76446: PUSH
76447: LD_VAR 0 1
76451: PUSH
76452: LD_INT 3
76454: MINUS
76455: PUSH
76456: LD_VAR 0 2
76460: PUSH
76461: LD_INT 1
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: LIST
76468: PUSH
76469: LD_VAR 0 1
76473: PUSH
76474: LD_INT 4
76476: PLUS
76477: PUSH
76478: LD_VAR 0 2
76482: PUSH
76483: LD_INT 4
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: LIST
76490: PUSH
76491: LD_VAR 0 1
76495: PUSH
76496: LD_INT 3
76498: PLUS
76499: PUSH
76500: LD_VAR 0 2
76504: PUSH
76505: LD_INT 3
76507: PLUS
76508: PUSH
76509: LD_INT 5
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: LIST
76516: PUSH
76517: LD_VAR 0 1
76521: PUSH
76522: LD_VAR 0 2
76526: PUSH
76527: LD_INT 4
76529: PLUS
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: LIST
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: ST_TO_ADDR
// end ; 1 :
76546: GO 77246
76548: LD_INT 1
76550: DOUBLE
76551: EQUAL
76552: IFTRUE 76556
76554: GO 76689
76556: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76557: LD_ADDR_VAR 0 5
76561: PUSH
76562: LD_VAR 0 1
76566: PUSH
76567: LD_VAR 0 2
76571: PUSH
76572: LD_INT 4
76574: MINUS
76575: PUSH
76576: LD_INT 3
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: LIST
76583: PUSH
76584: LD_VAR 0 1
76588: PUSH
76589: LD_INT 3
76591: MINUS
76592: PUSH
76593: LD_VAR 0 2
76597: PUSH
76598: LD_INT 3
76600: MINUS
76601: PUSH
76602: LD_INT 2
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: LIST
76609: PUSH
76610: LD_VAR 0 1
76614: PUSH
76615: LD_INT 4
76617: MINUS
76618: PUSH
76619: LD_VAR 0 2
76623: PUSH
76624: LD_INT 1
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: LIST
76631: PUSH
76632: LD_VAR 0 1
76636: PUSH
76637: LD_VAR 0 2
76641: PUSH
76642: LD_INT 3
76644: PLUS
76645: PUSH
76646: LD_INT 0
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: LIST
76653: PUSH
76654: LD_VAR 0 1
76658: PUSH
76659: LD_INT 4
76661: PLUS
76662: PUSH
76663: LD_VAR 0 2
76667: PUSH
76668: LD_INT 4
76670: PLUS
76671: PUSH
76672: LD_INT 5
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: LIST
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: ST_TO_ADDR
// end ; 2 :
76687: GO 77246
76689: LD_INT 2
76691: DOUBLE
76692: EQUAL
76693: IFTRUE 76697
76695: GO 76826
76697: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76698: LD_ADDR_VAR 0 5
76702: PUSH
76703: LD_VAR 0 1
76707: PUSH
76708: LD_VAR 0 2
76712: PUSH
76713: LD_INT 3
76715: MINUS
76716: PUSH
76717: LD_INT 3
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: LIST
76724: PUSH
76725: LD_VAR 0 1
76729: PUSH
76730: LD_INT 4
76732: PLUS
76733: PUSH
76734: LD_VAR 0 2
76738: PUSH
76739: LD_INT 4
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: LIST
76746: PUSH
76747: LD_VAR 0 1
76751: PUSH
76752: LD_VAR 0 2
76756: PUSH
76757: LD_INT 4
76759: PLUS
76760: PUSH
76761: LD_INT 0
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: LIST
76768: PUSH
76769: LD_VAR 0 1
76773: PUSH
76774: LD_INT 3
76776: MINUS
76777: PUSH
76778: LD_VAR 0 2
76782: PUSH
76783: LD_INT 1
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: LIST
76790: PUSH
76791: LD_VAR 0 1
76795: PUSH
76796: LD_INT 4
76798: MINUS
76799: PUSH
76800: LD_VAR 0 2
76804: PUSH
76805: LD_INT 4
76807: MINUS
76808: PUSH
76809: LD_INT 2
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: LIST
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: LIST
76821: LIST
76822: LIST
76823: ST_TO_ADDR
// end ; 3 :
76824: GO 77246
76826: LD_INT 3
76828: DOUBLE
76829: EQUAL
76830: IFTRUE 76834
76832: GO 76967
76834: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76835: LD_ADDR_VAR 0 5
76839: PUSH
76840: LD_VAR 0 1
76844: PUSH
76845: LD_INT 3
76847: PLUS
76848: PUSH
76849: LD_VAR 0 2
76853: PUSH
76854: LD_INT 4
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: LIST
76861: PUSH
76862: LD_VAR 0 1
76866: PUSH
76867: LD_INT 4
76869: PLUS
76870: PUSH
76871: LD_VAR 0 2
76875: PUSH
76876: LD_INT 4
76878: PLUS
76879: PUSH
76880: LD_INT 5
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: LIST
76887: PUSH
76888: LD_VAR 0 1
76892: PUSH
76893: LD_INT 4
76895: MINUS
76896: PUSH
76897: LD_VAR 0 2
76901: PUSH
76902: LD_INT 1
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: LIST
76909: PUSH
76910: LD_VAR 0 1
76914: PUSH
76915: LD_VAR 0 2
76919: PUSH
76920: LD_INT 4
76922: MINUS
76923: PUSH
76924: LD_INT 3
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: LIST
76931: PUSH
76932: LD_VAR 0 1
76936: PUSH
76937: LD_INT 3
76939: MINUS
76940: PUSH
76941: LD_VAR 0 2
76945: PUSH
76946: LD_INT 3
76948: MINUS
76949: PUSH
76950: LD_INT 2
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: LIST
76957: PUSH
76958: EMPTY
76959: LIST
76960: LIST
76961: LIST
76962: LIST
76963: LIST
76964: ST_TO_ADDR
// end ; 4 :
76965: GO 77246
76967: LD_INT 4
76969: DOUBLE
76970: EQUAL
76971: IFTRUE 76975
76973: GO 77108
76975: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76976: LD_ADDR_VAR 0 5
76980: PUSH
76981: LD_VAR 0 1
76985: PUSH
76986: LD_VAR 0 2
76990: PUSH
76991: LD_INT 4
76993: PLUS
76994: PUSH
76995: LD_INT 0
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: LIST
77002: PUSH
77003: LD_VAR 0 1
77007: PUSH
77008: LD_INT 3
77010: PLUS
77011: PUSH
77012: LD_VAR 0 2
77016: PUSH
77017: LD_INT 3
77019: PLUS
77020: PUSH
77021: LD_INT 5
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: LIST
77028: PUSH
77029: LD_VAR 0 1
77033: PUSH
77034: LD_INT 4
77036: PLUS
77037: PUSH
77038: LD_VAR 0 2
77042: PUSH
77043: LD_INT 4
77045: PUSH
77046: EMPTY
77047: LIST
77048: LIST
77049: LIST
77050: PUSH
77051: LD_VAR 0 1
77055: PUSH
77056: LD_VAR 0 2
77060: PUSH
77061: LD_INT 3
77063: MINUS
77064: PUSH
77065: LD_INT 3
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: LIST
77072: PUSH
77073: LD_VAR 0 1
77077: PUSH
77078: LD_INT 4
77080: MINUS
77081: PUSH
77082: LD_VAR 0 2
77086: PUSH
77087: LD_INT 4
77089: MINUS
77090: PUSH
77091: LD_INT 2
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: LIST
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: ST_TO_ADDR
// end ; 5 :
77106: GO 77246
77108: LD_INT 5
77110: DOUBLE
77111: EQUAL
77112: IFTRUE 77116
77114: GO 77245
77116: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77117: LD_ADDR_VAR 0 5
77121: PUSH
77122: LD_VAR 0 1
77126: PUSH
77127: LD_INT 4
77129: MINUS
77130: PUSH
77131: LD_VAR 0 2
77135: PUSH
77136: LD_INT 1
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: LIST
77143: PUSH
77144: LD_VAR 0 1
77148: PUSH
77149: LD_VAR 0 2
77153: PUSH
77154: LD_INT 4
77156: MINUS
77157: PUSH
77158: LD_INT 3
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: LIST
77165: PUSH
77166: LD_VAR 0 1
77170: PUSH
77171: LD_INT 4
77173: PLUS
77174: PUSH
77175: LD_VAR 0 2
77179: PUSH
77180: LD_INT 4
77182: PLUS
77183: PUSH
77184: LD_INT 5
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: LIST
77191: PUSH
77192: LD_VAR 0 1
77196: PUSH
77197: LD_INT 3
77199: PLUS
77200: PUSH
77201: LD_VAR 0 2
77205: PUSH
77206: LD_INT 4
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: LIST
77213: PUSH
77214: LD_VAR 0 1
77218: PUSH
77219: LD_VAR 0 2
77223: PUSH
77224: LD_INT 3
77226: PLUS
77227: PUSH
77228: LD_INT 0
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: LIST
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: ST_TO_ADDR
// end ; end ;
77243: GO 77246
77245: POP
// result := list ;
77246: LD_ADDR_VAR 0 4
77250: PUSH
77251: LD_VAR 0 5
77255: ST_TO_ADDR
// end ;
77256: LD_VAR 0 4
77260: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77261: LD_INT 0
77263: PPUSH
77264: PPUSH
77265: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77266: LD_VAR 0 1
77270: NOT
77271: PUSH
77272: LD_VAR 0 2
77276: PUSH
77277: LD_INT 1
77279: PUSH
77280: LD_INT 2
77282: PUSH
77283: LD_INT 3
77285: PUSH
77286: LD_INT 4
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: IN
77295: NOT
77296: OR
77297: IFFALSE 77301
// exit ;
77299: GO 77384
// tmp := [ ] ;
77301: LD_ADDR_VAR 0 5
77305: PUSH
77306: EMPTY
77307: ST_TO_ADDR
// for i in units do
77308: LD_ADDR_VAR 0 4
77312: PUSH
77313: LD_VAR 0 1
77317: PUSH
77318: FOR_IN
77319: IFFALSE 77353
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77321: LD_ADDR_VAR 0 5
77325: PUSH
77326: LD_VAR 0 5
77330: PPUSH
77331: LD_VAR 0 4
77335: PPUSH
77336: LD_VAR 0 2
77340: PPUSH
77341: CALL_OW 259
77345: PPUSH
77346: CALL 78757 0 2
77350: ST_TO_ADDR
77351: GO 77318
77353: POP
77354: POP
// if not tmp then
77355: LD_VAR 0 5
77359: NOT
77360: IFFALSE 77364
// exit ;
77362: GO 77384
// result := SortListByListDesc ( units , tmp ) ;
77364: LD_ADDR_VAR 0 3
77368: PUSH
77369: LD_VAR 0 1
77373: PPUSH
77374: LD_VAR 0 5
77378: PPUSH
77379: CALL_OW 77
77383: ST_TO_ADDR
// end ;
77384: LD_VAR 0 3
77388: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77389: LD_INT 0
77391: PPUSH
77392: PPUSH
77393: PPUSH
// result := false ;
77394: LD_ADDR_VAR 0 3
77398: PUSH
77399: LD_INT 0
77401: ST_TO_ADDR
// if not building then
77402: LD_VAR 0 2
77406: NOT
77407: IFFALSE 77411
// exit ;
77409: GO 77549
// x := GetX ( building ) ;
77411: LD_ADDR_VAR 0 4
77415: PUSH
77416: LD_VAR 0 2
77420: PPUSH
77421: CALL_OW 250
77425: ST_TO_ADDR
// y := GetY ( building ) ;
77426: LD_ADDR_VAR 0 5
77430: PUSH
77431: LD_VAR 0 2
77435: PPUSH
77436: CALL_OW 251
77440: ST_TO_ADDR
// if not x or not y then
77441: LD_VAR 0 4
77445: NOT
77446: PUSH
77447: LD_VAR 0 5
77451: NOT
77452: OR
77453: IFFALSE 77457
// exit ;
77455: GO 77549
// if GetTaskList ( unit ) then
77457: LD_VAR 0 1
77461: PPUSH
77462: CALL_OW 437
77466: IFFALSE 77549
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77468: LD_STRING e
77470: PUSH
77471: LD_VAR 0 1
77475: PPUSH
77476: CALL_OW 437
77480: PUSH
77481: LD_INT 1
77483: ARRAY
77484: PUSH
77485: LD_INT 1
77487: ARRAY
77488: EQUAL
77489: PUSH
77490: LD_VAR 0 4
77494: PUSH
77495: LD_VAR 0 1
77499: PPUSH
77500: CALL_OW 437
77504: PUSH
77505: LD_INT 1
77507: ARRAY
77508: PUSH
77509: LD_INT 2
77511: ARRAY
77512: EQUAL
77513: AND
77514: PUSH
77515: LD_VAR 0 5
77519: PUSH
77520: LD_VAR 0 1
77524: PPUSH
77525: CALL_OW 437
77529: PUSH
77530: LD_INT 1
77532: ARRAY
77533: PUSH
77534: LD_INT 3
77536: ARRAY
77537: EQUAL
77538: AND
77539: IFFALSE 77549
// result := true end ;
77541: LD_ADDR_VAR 0 3
77545: PUSH
77546: LD_INT 1
77548: ST_TO_ADDR
// end ;
77549: LD_VAR 0 3
77553: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77554: LD_INT 0
77556: PPUSH
// result := false ;
77557: LD_ADDR_VAR 0 4
77561: PUSH
77562: LD_INT 0
77564: ST_TO_ADDR
// if GetTaskList ( unit ) then
77565: LD_VAR 0 1
77569: PPUSH
77570: CALL_OW 437
77574: IFFALSE 77657
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77576: LD_STRING M
77578: PUSH
77579: LD_VAR 0 1
77583: PPUSH
77584: CALL_OW 437
77588: PUSH
77589: LD_INT 1
77591: ARRAY
77592: PUSH
77593: LD_INT 1
77595: ARRAY
77596: EQUAL
77597: PUSH
77598: LD_VAR 0 2
77602: PUSH
77603: LD_VAR 0 1
77607: PPUSH
77608: CALL_OW 437
77612: PUSH
77613: LD_INT 1
77615: ARRAY
77616: PUSH
77617: LD_INT 2
77619: ARRAY
77620: EQUAL
77621: AND
77622: PUSH
77623: LD_VAR 0 3
77627: PUSH
77628: LD_VAR 0 1
77632: PPUSH
77633: CALL_OW 437
77637: PUSH
77638: LD_INT 1
77640: ARRAY
77641: PUSH
77642: LD_INT 3
77644: ARRAY
77645: EQUAL
77646: AND
77647: IFFALSE 77657
// result := true ;
77649: LD_ADDR_VAR 0 4
77653: PUSH
77654: LD_INT 1
77656: ST_TO_ADDR
// end ; end ;
77657: LD_VAR 0 4
77661: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77662: LD_INT 0
77664: PPUSH
77665: PPUSH
77666: PPUSH
77667: PPUSH
// if not unit or not area then
77668: LD_VAR 0 1
77672: NOT
77673: PUSH
77674: LD_VAR 0 2
77678: NOT
77679: OR
77680: IFFALSE 77684
// exit ;
77682: GO 77860
// tmp := AreaToList ( area , i ) ;
77684: LD_ADDR_VAR 0 6
77688: PUSH
77689: LD_VAR 0 2
77693: PPUSH
77694: LD_VAR 0 5
77698: PPUSH
77699: CALL_OW 517
77703: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77704: LD_ADDR_VAR 0 5
77708: PUSH
77709: DOUBLE
77710: LD_INT 1
77712: DEC
77713: ST_TO_ADDR
77714: LD_VAR 0 6
77718: PUSH
77719: LD_INT 1
77721: ARRAY
77722: PUSH
77723: FOR_TO
77724: IFFALSE 77858
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77726: LD_ADDR_VAR 0 7
77730: PUSH
77731: LD_VAR 0 6
77735: PUSH
77736: LD_INT 1
77738: ARRAY
77739: PUSH
77740: LD_VAR 0 5
77744: ARRAY
77745: PUSH
77746: LD_VAR 0 6
77750: PUSH
77751: LD_INT 2
77753: ARRAY
77754: PUSH
77755: LD_VAR 0 5
77759: ARRAY
77760: PUSH
77761: EMPTY
77762: LIST
77763: LIST
77764: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77765: LD_INT 92
77767: PUSH
77768: LD_VAR 0 7
77772: PUSH
77773: LD_INT 1
77775: ARRAY
77776: PUSH
77777: LD_VAR 0 7
77781: PUSH
77782: LD_INT 2
77784: ARRAY
77785: PUSH
77786: LD_INT 2
77788: PUSH
77789: EMPTY
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: PPUSH
77795: CALL_OW 69
77799: PUSH
77800: LD_INT 0
77802: EQUAL
77803: IFFALSE 77856
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77805: LD_VAR 0 1
77809: PPUSH
77810: LD_VAR 0 7
77814: PUSH
77815: LD_INT 1
77817: ARRAY
77818: PPUSH
77819: LD_VAR 0 7
77823: PUSH
77824: LD_INT 2
77826: ARRAY
77827: PPUSH
77828: LD_VAR 0 3
77832: PPUSH
77833: CALL_OW 48
// result := IsPlaced ( unit ) ;
77837: LD_ADDR_VAR 0 4
77841: PUSH
77842: LD_VAR 0 1
77846: PPUSH
77847: CALL_OW 305
77851: ST_TO_ADDR
// exit ;
77852: POP
77853: POP
77854: GO 77860
// end ; end ;
77856: GO 77723
77858: POP
77859: POP
// end ;
77860: LD_VAR 0 4
77864: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77865: LD_INT 0
77867: PPUSH
77868: PPUSH
77869: PPUSH
// if not side or side > 8 then
77870: LD_VAR 0 1
77874: NOT
77875: PUSH
77876: LD_VAR 0 1
77880: PUSH
77881: LD_INT 8
77883: GREATER
77884: OR
77885: IFFALSE 77889
// exit ;
77887: GO 78076
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77889: LD_ADDR_VAR 0 4
77893: PUSH
77894: LD_INT 22
77896: PUSH
77897: LD_VAR 0 1
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 21
77908: PUSH
77909: LD_INT 3
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PPUSH
77920: CALL_OW 69
77924: ST_TO_ADDR
// if not tmp then
77925: LD_VAR 0 4
77929: NOT
77930: IFFALSE 77934
// exit ;
77932: GO 78076
// enable_addtolog := true ;
77934: LD_ADDR_OWVAR 81
77938: PUSH
77939: LD_INT 1
77941: ST_TO_ADDR
// AddToLog ( [ ) ;
77942: LD_STRING [
77944: PPUSH
77945: CALL_OW 561
// for i in tmp do
77949: LD_ADDR_VAR 0 3
77953: PUSH
77954: LD_VAR 0 4
77958: PUSH
77959: FOR_IN
77960: IFFALSE 78067
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77962: LD_STRING [
77964: PUSH
77965: LD_VAR 0 3
77969: PPUSH
77970: CALL_OW 266
77974: STR
77975: PUSH
77976: LD_STRING , 
77978: STR
77979: PUSH
77980: LD_VAR 0 3
77984: PPUSH
77985: CALL_OW 250
77989: STR
77990: PUSH
77991: LD_STRING , 
77993: STR
77994: PUSH
77995: LD_VAR 0 3
77999: PPUSH
78000: CALL_OW 251
78004: STR
78005: PUSH
78006: LD_STRING , 
78008: STR
78009: PUSH
78010: LD_VAR 0 3
78014: PPUSH
78015: CALL_OW 254
78019: STR
78020: PUSH
78021: LD_STRING , 
78023: STR
78024: PUSH
78025: LD_VAR 0 3
78029: PPUSH
78030: LD_INT 1
78032: PPUSH
78033: CALL_OW 268
78037: STR
78038: PUSH
78039: LD_STRING , 
78041: STR
78042: PUSH
78043: LD_VAR 0 3
78047: PPUSH
78048: LD_INT 2
78050: PPUSH
78051: CALL_OW 268
78055: STR
78056: PUSH
78057: LD_STRING ],
78059: STR
78060: PPUSH
78061: CALL_OW 561
// end ;
78065: GO 77959
78067: POP
78068: POP
// AddToLog ( ]; ) ;
78069: LD_STRING ];
78071: PPUSH
78072: CALL_OW 561
// end ;
78076: LD_VAR 0 2
78080: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78081: LD_INT 0
78083: PPUSH
78084: PPUSH
78085: PPUSH
78086: PPUSH
78087: PPUSH
// if not area or not rate or not max then
78088: LD_VAR 0 1
78092: NOT
78093: PUSH
78094: LD_VAR 0 2
78098: NOT
78099: OR
78100: PUSH
78101: LD_VAR 0 4
78105: NOT
78106: OR
78107: IFFALSE 78111
// exit ;
78109: GO 78300
// while 1 do
78111: LD_INT 1
78113: IFFALSE 78300
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78115: LD_ADDR_VAR 0 9
78119: PUSH
78120: LD_VAR 0 1
78124: PPUSH
78125: LD_INT 1
78127: PPUSH
78128: CALL_OW 287
78132: PUSH
78133: LD_INT 10
78135: MUL
78136: ST_TO_ADDR
// r := rate / 10 ;
78137: LD_ADDR_VAR 0 7
78141: PUSH
78142: LD_VAR 0 2
78146: PUSH
78147: LD_INT 10
78149: DIVREAL
78150: ST_TO_ADDR
// time := 1 1$00 ;
78151: LD_ADDR_VAR 0 8
78155: PUSH
78156: LD_INT 2100
78158: ST_TO_ADDR
// if amount < min then
78159: LD_VAR 0 9
78163: PUSH
78164: LD_VAR 0 3
78168: LESS
78169: IFFALSE 78187
// r := r * 2 else
78171: LD_ADDR_VAR 0 7
78175: PUSH
78176: LD_VAR 0 7
78180: PUSH
78181: LD_INT 2
78183: MUL
78184: ST_TO_ADDR
78185: GO 78213
// if amount > max then
78187: LD_VAR 0 9
78191: PUSH
78192: LD_VAR 0 4
78196: GREATER
78197: IFFALSE 78213
// r := r / 2 ;
78199: LD_ADDR_VAR 0 7
78203: PUSH
78204: LD_VAR 0 7
78208: PUSH
78209: LD_INT 2
78211: DIVREAL
78212: ST_TO_ADDR
// time := time / r ;
78213: LD_ADDR_VAR 0 8
78217: PUSH
78218: LD_VAR 0 8
78222: PUSH
78223: LD_VAR 0 7
78227: DIVREAL
78228: ST_TO_ADDR
// if time < 0 then
78229: LD_VAR 0 8
78233: PUSH
78234: LD_INT 0
78236: LESS
78237: IFFALSE 78254
// time := time * - 1 ;
78239: LD_ADDR_VAR 0 8
78243: PUSH
78244: LD_VAR 0 8
78248: PUSH
78249: LD_INT 1
78251: NEG
78252: MUL
78253: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78254: LD_VAR 0 8
78258: PUSH
78259: LD_INT 35
78261: PPUSH
78262: LD_INT 875
78264: PPUSH
78265: CALL_OW 12
78269: PLUS
78270: PPUSH
78271: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78275: LD_INT 1
78277: PPUSH
78278: LD_INT 5
78280: PPUSH
78281: CALL_OW 12
78285: PPUSH
78286: LD_VAR 0 1
78290: PPUSH
78291: LD_INT 1
78293: PPUSH
78294: CALL_OW 55
// end ;
78298: GO 78111
// end ;
78300: LD_VAR 0 5
78304: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78305: LD_INT 0
78307: PPUSH
78308: PPUSH
78309: PPUSH
78310: PPUSH
78311: PPUSH
78312: PPUSH
78313: PPUSH
78314: PPUSH
// if not turrets or not factories then
78315: LD_VAR 0 1
78319: NOT
78320: PUSH
78321: LD_VAR 0 2
78325: NOT
78326: OR
78327: IFFALSE 78331
// exit ;
78329: GO 78638
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78331: LD_ADDR_VAR 0 10
78335: PUSH
78336: LD_INT 5
78338: PUSH
78339: LD_INT 6
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: LD_INT 2
78348: PUSH
78349: LD_INT 4
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 3
78358: PUSH
78359: LD_INT 5
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: LIST
78370: PUSH
78371: LD_INT 24
78373: PUSH
78374: LD_INT 25
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PUSH
78381: LD_INT 23
78383: PUSH
78384: LD_INT 27
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: PUSH
78395: LD_INT 42
78397: PUSH
78398: LD_INT 43
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PUSH
78405: LD_INT 44
78407: PUSH
78408: LD_INT 46
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 45
78417: PUSH
78418: LD_INT 47
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: LIST
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: LIST
78434: ST_TO_ADDR
// result := [ ] ;
78435: LD_ADDR_VAR 0 3
78439: PUSH
78440: EMPTY
78441: ST_TO_ADDR
// for i in turrets do
78442: LD_ADDR_VAR 0 4
78446: PUSH
78447: LD_VAR 0 1
78451: PUSH
78452: FOR_IN
78453: IFFALSE 78636
// begin nat := GetNation ( i ) ;
78455: LD_ADDR_VAR 0 7
78459: PUSH
78460: LD_VAR 0 4
78464: PPUSH
78465: CALL_OW 248
78469: ST_TO_ADDR
// weapon := 0 ;
78470: LD_ADDR_VAR 0 8
78474: PUSH
78475: LD_INT 0
78477: ST_TO_ADDR
// if not nat then
78478: LD_VAR 0 7
78482: NOT
78483: IFFALSE 78487
// continue ;
78485: GO 78452
// for j in list [ nat ] do
78487: LD_ADDR_VAR 0 5
78491: PUSH
78492: LD_VAR 0 10
78496: PUSH
78497: LD_VAR 0 7
78501: ARRAY
78502: PUSH
78503: FOR_IN
78504: IFFALSE 78545
// if GetBWeapon ( i ) = j [ 1 ] then
78506: LD_VAR 0 4
78510: PPUSH
78511: CALL_OW 269
78515: PUSH
78516: LD_VAR 0 5
78520: PUSH
78521: LD_INT 1
78523: ARRAY
78524: EQUAL
78525: IFFALSE 78543
// begin weapon := j [ 2 ] ;
78527: LD_ADDR_VAR 0 8
78531: PUSH
78532: LD_VAR 0 5
78536: PUSH
78537: LD_INT 2
78539: ARRAY
78540: ST_TO_ADDR
// break ;
78541: GO 78545
// end ;
78543: GO 78503
78545: POP
78546: POP
// if not weapon then
78547: LD_VAR 0 8
78551: NOT
78552: IFFALSE 78556
// continue ;
78554: GO 78452
// for k in factories do
78556: LD_ADDR_VAR 0 6
78560: PUSH
78561: LD_VAR 0 2
78565: PUSH
78566: FOR_IN
78567: IFFALSE 78632
// begin weapons := AvailableWeaponList ( k ) ;
78569: LD_ADDR_VAR 0 9
78573: PUSH
78574: LD_VAR 0 6
78578: PPUSH
78579: CALL_OW 478
78583: ST_TO_ADDR
// if not weapons then
78584: LD_VAR 0 9
78588: NOT
78589: IFFALSE 78593
// continue ;
78591: GO 78566
// if weapon in weapons then
78593: LD_VAR 0 8
78597: PUSH
78598: LD_VAR 0 9
78602: IN
78603: IFFALSE 78630
// begin result := [ i , weapon ] ;
78605: LD_ADDR_VAR 0 3
78609: PUSH
78610: LD_VAR 0 4
78614: PUSH
78615: LD_VAR 0 8
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: ST_TO_ADDR
// exit ;
78624: POP
78625: POP
78626: POP
78627: POP
78628: GO 78638
// end ; end ;
78630: GO 78566
78632: POP
78633: POP
// end ;
78634: GO 78452
78636: POP
78637: POP
// end ;
78638: LD_VAR 0 3
78642: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78643: LD_INT 0
78645: PPUSH
// if not side or side > 8 then
78646: LD_VAR 0 3
78650: NOT
78651: PUSH
78652: LD_VAR 0 3
78656: PUSH
78657: LD_INT 8
78659: GREATER
78660: OR
78661: IFFALSE 78665
// exit ;
78663: GO 78724
// if not range then
78665: LD_VAR 0 4
78669: NOT
78670: IFFALSE 78681
// range := - 12 ;
78672: LD_ADDR_VAR 0 4
78676: PUSH
78677: LD_INT 12
78679: NEG
78680: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78681: LD_VAR 0 1
78685: PPUSH
78686: LD_VAR 0 2
78690: PPUSH
78691: LD_VAR 0 3
78695: PPUSH
78696: LD_VAR 0 4
78700: PPUSH
78701: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78705: LD_VAR 0 1
78709: PPUSH
78710: LD_VAR 0 2
78714: PPUSH
78715: LD_VAR 0 3
78719: PPUSH
78720: CALL_OW 331
// end ;
78724: LD_VAR 0 5
78728: RET
// export function Video ( mode ) ; begin
78729: LD_INT 0
78731: PPUSH
// ingame_video = mode ;
78732: LD_ADDR_OWVAR 52
78736: PUSH
78737: LD_VAR 0 1
78741: ST_TO_ADDR
// interface_hidden = mode ;
78742: LD_ADDR_OWVAR 54
78746: PUSH
78747: LD_VAR 0 1
78751: ST_TO_ADDR
// end ;
78752: LD_VAR 0 2
78756: RET
// export function Join ( array , element ) ; begin
78757: LD_INT 0
78759: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78760: LD_ADDR_VAR 0 3
78764: PUSH
78765: LD_VAR 0 1
78769: PPUSH
78770: LD_VAR 0 1
78774: PUSH
78775: LD_INT 1
78777: PLUS
78778: PPUSH
78779: LD_VAR 0 2
78783: PPUSH
78784: CALL_OW 1
78788: ST_TO_ADDR
// end ;
78789: LD_VAR 0 3
78793: RET
// export function JoinUnion ( array , element ) ; begin
78794: LD_INT 0
78796: PPUSH
// result := array union element ;
78797: LD_ADDR_VAR 0 3
78801: PUSH
78802: LD_VAR 0 1
78806: PUSH
78807: LD_VAR 0 2
78811: UNION
78812: ST_TO_ADDR
// end ;
78813: LD_VAR 0 3
78817: RET
// export function GetBehemoths ( side ) ; begin
78818: LD_INT 0
78820: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78821: LD_ADDR_VAR 0 2
78825: PUSH
78826: LD_INT 22
78828: PUSH
78829: LD_VAR 0 1
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PUSH
78838: LD_INT 31
78840: PUSH
78841: LD_INT 25
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: PPUSH
78852: CALL_OW 69
78856: ST_TO_ADDR
// end ;
78857: LD_VAR 0 2
78861: RET
// export function Shuffle ( array ) ; var i , index ; begin
78862: LD_INT 0
78864: PPUSH
78865: PPUSH
78866: PPUSH
// result := [ ] ;
78867: LD_ADDR_VAR 0 2
78871: PUSH
78872: EMPTY
78873: ST_TO_ADDR
// if not array then
78874: LD_VAR 0 1
78878: NOT
78879: IFFALSE 78883
// exit ;
78881: GO 78982
// Randomize ;
78883: CALL_OW 10
// for i = array downto 1 do
78887: LD_ADDR_VAR 0 3
78891: PUSH
78892: DOUBLE
78893: LD_VAR 0 1
78897: INC
78898: ST_TO_ADDR
78899: LD_INT 1
78901: PUSH
78902: FOR_DOWNTO
78903: IFFALSE 78980
// begin index := rand ( 1 , array ) ;
78905: LD_ADDR_VAR 0 4
78909: PUSH
78910: LD_INT 1
78912: PPUSH
78913: LD_VAR 0 1
78917: PPUSH
78918: CALL_OW 12
78922: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78923: LD_ADDR_VAR 0 2
78927: PUSH
78928: LD_VAR 0 2
78932: PPUSH
78933: LD_VAR 0 2
78937: PUSH
78938: LD_INT 1
78940: PLUS
78941: PPUSH
78942: LD_VAR 0 1
78946: PUSH
78947: LD_VAR 0 4
78951: ARRAY
78952: PPUSH
78953: CALL_OW 2
78957: ST_TO_ADDR
// array := Delete ( array , index ) ;
78958: LD_ADDR_VAR 0 1
78962: PUSH
78963: LD_VAR 0 1
78967: PPUSH
78968: LD_VAR 0 4
78972: PPUSH
78973: CALL_OW 3
78977: ST_TO_ADDR
// end ;
78978: GO 78902
78980: POP
78981: POP
// end ;
78982: LD_VAR 0 2
78986: RET
// export function GetBaseMaterials ( base ) ; begin
78987: LD_INT 0
78989: PPUSH
// result := [ 0 , 0 , 0 ] ;
78990: LD_ADDR_VAR 0 2
78994: PUSH
78995: LD_INT 0
78997: PUSH
78998: LD_INT 0
79000: PUSH
79001: LD_INT 0
79003: PUSH
79004: EMPTY
79005: LIST
79006: LIST
79007: LIST
79008: ST_TO_ADDR
// if not base then
79009: LD_VAR 0 1
79013: NOT
79014: IFFALSE 79018
// exit ;
79016: GO 79067
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79018: LD_ADDR_VAR 0 2
79022: PUSH
79023: LD_VAR 0 1
79027: PPUSH
79028: LD_INT 1
79030: PPUSH
79031: CALL_OW 275
79035: PUSH
79036: LD_VAR 0 1
79040: PPUSH
79041: LD_INT 2
79043: PPUSH
79044: CALL_OW 275
79048: PUSH
79049: LD_VAR 0 1
79053: PPUSH
79054: LD_INT 3
79056: PPUSH
79057: CALL_OW 275
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: LIST
79066: ST_TO_ADDR
// end ;
79067: LD_VAR 0 2
79071: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79072: LD_INT 0
79074: PPUSH
79075: PPUSH
// result := array ;
79076: LD_ADDR_VAR 0 3
79080: PUSH
79081: LD_VAR 0 1
79085: ST_TO_ADDR
// if size >= result then
79086: LD_VAR 0 2
79090: PUSH
79091: LD_VAR 0 3
79095: GREATEREQUAL
79096: IFFALSE 79100
// exit ;
79098: GO 79150
// if size then
79100: LD_VAR 0 2
79104: IFFALSE 79150
// for i := array downto size do
79106: LD_ADDR_VAR 0 4
79110: PUSH
79111: DOUBLE
79112: LD_VAR 0 1
79116: INC
79117: ST_TO_ADDR
79118: LD_VAR 0 2
79122: PUSH
79123: FOR_DOWNTO
79124: IFFALSE 79148
// result := Delete ( result , result ) ;
79126: LD_ADDR_VAR 0 3
79130: PUSH
79131: LD_VAR 0 3
79135: PPUSH
79136: LD_VAR 0 3
79140: PPUSH
79141: CALL_OW 3
79145: ST_TO_ADDR
79146: GO 79123
79148: POP
79149: POP
// end ;
79150: LD_VAR 0 3
79154: RET
// export function ComExit ( unit ) ; var tmp ; begin
79155: LD_INT 0
79157: PPUSH
79158: PPUSH
// if not IsInUnit ( unit ) then
79159: LD_VAR 0 1
79163: PPUSH
79164: CALL_OW 310
79168: NOT
79169: IFFALSE 79173
// exit ;
79171: GO 79233
// tmp := IsInUnit ( unit ) ;
79173: LD_ADDR_VAR 0 3
79177: PUSH
79178: LD_VAR 0 1
79182: PPUSH
79183: CALL_OW 310
79187: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79188: LD_VAR 0 3
79192: PPUSH
79193: CALL_OW 247
79197: PUSH
79198: LD_INT 2
79200: EQUAL
79201: IFFALSE 79214
// ComExitVehicle ( unit ) else
79203: LD_VAR 0 1
79207: PPUSH
79208: CALL_OW 121
79212: GO 79223
// ComExitBuilding ( unit ) ;
79214: LD_VAR 0 1
79218: PPUSH
79219: CALL_OW 122
// result := tmp ;
79223: LD_ADDR_VAR 0 2
79227: PUSH
79228: LD_VAR 0 3
79232: ST_TO_ADDR
// end ;
79233: LD_VAR 0 2
79237: RET
// export function ComExitAll ( units ) ; var i ; begin
79238: LD_INT 0
79240: PPUSH
79241: PPUSH
// if not units then
79242: LD_VAR 0 1
79246: NOT
79247: IFFALSE 79251
// exit ;
79249: GO 79277
// for i in units do
79251: LD_ADDR_VAR 0 3
79255: PUSH
79256: LD_VAR 0 1
79260: PUSH
79261: FOR_IN
79262: IFFALSE 79275
// ComExit ( i ) ;
79264: LD_VAR 0 3
79268: PPUSH
79269: CALL 79155 0 1
79273: GO 79261
79275: POP
79276: POP
// end ;
79277: LD_VAR 0 2
79281: RET
// export function ResetHc ; begin
79282: LD_INT 0
79284: PPUSH
// InitHc ;
79285: CALL_OW 19
// hc_importance := 0 ;
79289: LD_ADDR_OWVAR 32
79293: PUSH
79294: LD_INT 0
79296: ST_TO_ADDR
// end ;
79297: LD_VAR 0 1
79301: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79302: LD_INT 0
79304: PPUSH
79305: PPUSH
79306: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79307: LD_ADDR_VAR 0 6
79311: PUSH
79312: LD_VAR 0 1
79316: PUSH
79317: LD_VAR 0 3
79321: PLUS
79322: PUSH
79323: LD_INT 2
79325: DIV
79326: ST_TO_ADDR
// if _x < 0 then
79327: LD_VAR 0 6
79331: PUSH
79332: LD_INT 0
79334: LESS
79335: IFFALSE 79352
// _x := _x * - 1 ;
79337: LD_ADDR_VAR 0 6
79341: PUSH
79342: LD_VAR 0 6
79346: PUSH
79347: LD_INT 1
79349: NEG
79350: MUL
79351: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79352: LD_ADDR_VAR 0 7
79356: PUSH
79357: LD_VAR 0 2
79361: PUSH
79362: LD_VAR 0 4
79366: PLUS
79367: PUSH
79368: LD_INT 2
79370: DIV
79371: ST_TO_ADDR
// if _y < 0 then
79372: LD_VAR 0 7
79376: PUSH
79377: LD_INT 0
79379: LESS
79380: IFFALSE 79397
// _y := _y * - 1 ;
79382: LD_ADDR_VAR 0 7
79386: PUSH
79387: LD_VAR 0 7
79391: PUSH
79392: LD_INT 1
79394: NEG
79395: MUL
79396: ST_TO_ADDR
// result := [ _x , _y ] ;
79397: LD_ADDR_VAR 0 5
79401: PUSH
79402: LD_VAR 0 6
79406: PUSH
79407: LD_VAR 0 7
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: ST_TO_ADDR
// end ;
79416: LD_VAR 0 5
79420: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79421: LD_INT 0
79423: PPUSH
79424: PPUSH
79425: PPUSH
79426: PPUSH
// task := GetTaskList ( unit ) ;
79427: LD_ADDR_VAR 0 7
79431: PUSH
79432: LD_VAR 0 1
79436: PPUSH
79437: CALL_OW 437
79441: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79442: LD_VAR 0 7
79446: NOT
79447: PUSH
79448: LD_VAR 0 1
79452: PPUSH
79453: LD_VAR 0 2
79457: PPUSH
79458: CALL_OW 308
79462: NOT
79463: AND
79464: IFFALSE 79468
// exit ;
79466: GO 79586
// if IsInArea ( unit , area ) then
79468: LD_VAR 0 1
79472: PPUSH
79473: LD_VAR 0 2
79477: PPUSH
79478: CALL_OW 308
79482: IFFALSE 79500
// begin ComMoveToArea ( unit , goAway ) ;
79484: LD_VAR 0 1
79488: PPUSH
79489: LD_VAR 0 3
79493: PPUSH
79494: CALL_OW 113
// exit ;
79498: GO 79586
// end ; if task [ 1 ] [ 1 ] <> M then
79500: LD_VAR 0 7
79504: PUSH
79505: LD_INT 1
79507: ARRAY
79508: PUSH
79509: LD_INT 1
79511: ARRAY
79512: PUSH
79513: LD_STRING M
79515: NONEQUAL
79516: IFFALSE 79520
// exit ;
79518: GO 79586
// x := task [ 1 ] [ 2 ] ;
79520: LD_ADDR_VAR 0 5
79524: PUSH
79525: LD_VAR 0 7
79529: PUSH
79530: LD_INT 1
79532: ARRAY
79533: PUSH
79534: LD_INT 2
79536: ARRAY
79537: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79538: LD_ADDR_VAR 0 6
79542: PUSH
79543: LD_VAR 0 7
79547: PUSH
79548: LD_INT 1
79550: ARRAY
79551: PUSH
79552: LD_INT 3
79554: ARRAY
79555: ST_TO_ADDR
// if InArea ( x , y , area ) then
79556: LD_VAR 0 5
79560: PPUSH
79561: LD_VAR 0 6
79565: PPUSH
79566: LD_VAR 0 2
79570: PPUSH
79571: CALL_OW 309
79575: IFFALSE 79586
// ComStop ( unit ) ;
79577: LD_VAR 0 1
79581: PPUSH
79582: CALL_OW 141
// end ;
79586: LD_VAR 0 4
79590: RET
// export function Abs ( value ) ; begin
79591: LD_INT 0
79593: PPUSH
// result := value ;
79594: LD_ADDR_VAR 0 2
79598: PUSH
79599: LD_VAR 0 1
79603: ST_TO_ADDR
// if value < 0 then
79604: LD_VAR 0 1
79608: PUSH
79609: LD_INT 0
79611: LESS
79612: IFFALSE 79629
// result := value * - 1 ;
79614: LD_ADDR_VAR 0 2
79618: PUSH
79619: LD_VAR 0 1
79623: PUSH
79624: LD_INT 1
79626: NEG
79627: MUL
79628: ST_TO_ADDR
// end ;
79629: LD_VAR 0 2
79633: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79634: LD_INT 0
79636: PPUSH
79637: PPUSH
79638: PPUSH
79639: PPUSH
79640: PPUSH
79641: PPUSH
79642: PPUSH
79643: PPUSH
// if not unit or not building then
79644: LD_VAR 0 1
79648: NOT
79649: PUSH
79650: LD_VAR 0 2
79654: NOT
79655: OR
79656: IFFALSE 79660
// exit ;
79658: GO 79886
// x := GetX ( building ) ;
79660: LD_ADDR_VAR 0 4
79664: PUSH
79665: LD_VAR 0 2
79669: PPUSH
79670: CALL_OW 250
79674: ST_TO_ADDR
// y := GetY ( building ) ;
79675: LD_ADDR_VAR 0 6
79679: PUSH
79680: LD_VAR 0 2
79684: PPUSH
79685: CALL_OW 251
79689: ST_TO_ADDR
// d := GetDir ( building ) ;
79690: LD_ADDR_VAR 0 8
79694: PUSH
79695: LD_VAR 0 2
79699: PPUSH
79700: CALL_OW 254
79704: ST_TO_ADDR
// r := 4 ;
79705: LD_ADDR_VAR 0 9
79709: PUSH
79710: LD_INT 4
79712: ST_TO_ADDR
// for i := 1 to 5 do
79713: LD_ADDR_VAR 0 10
79717: PUSH
79718: DOUBLE
79719: LD_INT 1
79721: DEC
79722: ST_TO_ADDR
79723: LD_INT 5
79725: PUSH
79726: FOR_TO
79727: IFFALSE 79884
// begin _x := ShiftX ( x , d , r + i ) ;
79729: LD_ADDR_VAR 0 5
79733: PUSH
79734: LD_VAR 0 4
79738: PPUSH
79739: LD_VAR 0 8
79743: PPUSH
79744: LD_VAR 0 9
79748: PUSH
79749: LD_VAR 0 10
79753: PLUS
79754: PPUSH
79755: CALL_OW 272
79759: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79760: LD_ADDR_VAR 0 7
79764: PUSH
79765: LD_VAR 0 6
79769: PPUSH
79770: LD_VAR 0 8
79774: PPUSH
79775: LD_VAR 0 9
79779: PUSH
79780: LD_VAR 0 10
79784: PLUS
79785: PPUSH
79786: CALL_OW 273
79790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79791: LD_VAR 0 5
79795: PPUSH
79796: LD_VAR 0 7
79800: PPUSH
79801: CALL_OW 488
79805: PUSH
79806: LD_VAR 0 5
79810: PPUSH
79811: LD_VAR 0 7
79815: PPUSH
79816: CALL_OW 428
79820: PPUSH
79821: CALL_OW 247
79825: PUSH
79826: LD_INT 3
79828: PUSH
79829: LD_INT 2
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: IN
79836: NOT
79837: AND
79838: IFFALSE 79882
// begin ComMoveXY ( unit , _x , _y ) ;
79840: LD_VAR 0 1
79844: PPUSH
79845: LD_VAR 0 5
79849: PPUSH
79850: LD_VAR 0 7
79854: PPUSH
79855: CALL_OW 111
// result := [ _x , _y ] ;
79859: LD_ADDR_VAR 0 3
79863: PUSH
79864: LD_VAR 0 5
79868: PUSH
79869: LD_VAR 0 7
79873: PUSH
79874: EMPTY
79875: LIST
79876: LIST
79877: ST_TO_ADDR
// exit ;
79878: POP
79879: POP
79880: GO 79886
// end ; end ;
79882: GO 79726
79884: POP
79885: POP
// end ;
79886: LD_VAR 0 3
79890: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79891: LD_INT 0
79893: PPUSH
79894: PPUSH
79895: PPUSH
// result := 0 ;
79896: LD_ADDR_VAR 0 3
79900: PUSH
79901: LD_INT 0
79903: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79904: LD_VAR 0 1
79908: PUSH
79909: LD_INT 0
79911: LESS
79912: PUSH
79913: LD_VAR 0 1
79917: PUSH
79918: LD_INT 8
79920: GREATER
79921: OR
79922: PUSH
79923: LD_VAR 0 2
79927: PUSH
79928: LD_INT 0
79930: LESS
79931: OR
79932: PUSH
79933: LD_VAR 0 2
79937: PUSH
79938: LD_INT 8
79940: GREATER
79941: OR
79942: IFFALSE 79946
// exit ;
79944: GO 80021
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79946: LD_ADDR_VAR 0 4
79950: PUSH
79951: LD_INT 22
79953: PUSH
79954: LD_VAR 0 2
79958: PUSH
79959: EMPTY
79960: LIST
79961: LIST
79962: PPUSH
79963: CALL_OW 69
79967: PUSH
79968: FOR_IN
79969: IFFALSE 80019
// begin un := UnitShoot ( i ) ;
79971: LD_ADDR_VAR 0 5
79975: PUSH
79976: LD_VAR 0 4
79980: PPUSH
79981: CALL_OW 504
79985: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79986: LD_VAR 0 5
79990: PPUSH
79991: CALL_OW 255
79995: PUSH
79996: LD_VAR 0 1
80000: EQUAL
80001: IFFALSE 80017
// begin result := un ;
80003: LD_ADDR_VAR 0 3
80007: PUSH
80008: LD_VAR 0 5
80012: ST_TO_ADDR
// exit ;
80013: POP
80014: POP
80015: GO 80021
// end ; end ;
80017: GO 79968
80019: POP
80020: POP
// end ;
80021: LD_VAR 0 3
80025: RET
// export function GetCargoBay ( units ) ; begin
80026: LD_INT 0
80028: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80029: LD_ADDR_VAR 0 2
80033: PUSH
80034: LD_VAR 0 1
80038: PPUSH
80039: LD_INT 2
80041: PUSH
80042: LD_INT 34
80044: PUSH
80045: LD_INT 12
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 34
80054: PUSH
80055: LD_INT 51
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 34
80064: PUSH
80065: LD_INT 32
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: LD_INT 34
80074: PUSH
80075: LD_INT 89
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: PUSH
80082: EMPTY
80083: LIST
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: PPUSH
80089: CALL_OW 72
80093: ST_TO_ADDR
// end ;
80094: LD_VAR 0 2
80098: RET
// export function Negate ( value ) ; begin
80099: LD_INT 0
80101: PPUSH
// result := not value ;
80102: LD_ADDR_VAR 0 2
80106: PUSH
80107: LD_VAR 0 1
80111: NOT
80112: ST_TO_ADDR
// end ;
80113: LD_VAR 0 2
80117: RET
// export function Inc ( value ) ; begin
80118: LD_INT 0
80120: PPUSH
// result := value + 1 ;
80121: LD_ADDR_VAR 0 2
80125: PUSH
80126: LD_VAR 0 1
80130: PUSH
80131: LD_INT 1
80133: PLUS
80134: ST_TO_ADDR
// end ;
80135: LD_VAR 0 2
80139: RET
// export function Dec ( value ) ; begin
80140: LD_INT 0
80142: PPUSH
// result := value - 1 ;
80143: LD_ADDR_VAR 0 2
80147: PUSH
80148: LD_VAR 0 1
80152: PUSH
80153: LD_INT 1
80155: MINUS
80156: ST_TO_ADDR
// end ;
80157: LD_VAR 0 2
80161: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80162: LD_INT 0
80164: PPUSH
80165: PPUSH
80166: PPUSH
80167: PPUSH
80168: PPUSH
80169: PPUSH
80170: PPUSH
80171: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80172: LD_VAR 0 1
80176: PPUSH
80177: LD_VAR 0 2
80181: PPUSH
80182: CALL_OW 488
80186: NOT
80187: PUSH
80188: LD_VAR 0 3
80192: PPUSH
80193: LD_VAR 0 4
80197: PPUSH
80198: CALL_OW 488
80202: NOT
80203: OR
80204: IFFALSE 80217
// begin result := - 1 ;
80206: LD_ADDR_VAR 0 5
80210: PUSH
80211: LD_INT 1
80213: NEG
80214: ST_TO_ADDR
// exit ;
80215: GO 80452
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80217: LD_ADDR_VAR 0 12
80221: PUSH
80222: LD_VAR 0 1
80226: PPUSH
80227: LD_VAR 0 2
80231: PPUSH
80232: LD_VAR 0 3
80236: PPUSH
80237: LD_VAR 0 4
80241: PPUSH
80242: CALL 79302 0 4
80246: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80247: LD_ADDR_VAR 0 11
80251: PUSH
80252: LD_VAR 0 1
80256: PPUSH
80257: LD_VAR 0 2
80261: PPUSH
80262: LD_VAR 0 12
80266: PUSH
80267: LD_INT 1
80269: ARRAY
80270: PPUSH
80271: LD_VAR 0 12
80275: PUSH
80276: LD_INT 2
80278: ARRAY
80279: PPUSH
80280: CALL_OW 298
80284: ST_TO_ADDR
// distance := 9999 ;
80285: LD_ADDR_VAR 0 10
80289: PUSH
80290: LD_INT 9999
80292: ST_TO_ADDR
// for i := 0 to 5 do
80293: LD_ADDR_VAR 0 6
80297: PUSH
80298: DOUBLE
80299: LD_INT 0
80301: DEC
80302: ST_TO_ADDR
80303: LD_INT 5
80305: PUSH
80306: FOR_TO
80307: IFFALSE 80450
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80309: LD_ADDR_VAR 0 7
80313: PUSH
80314: LD_VAR 0 1
80318: PPUSH
80319: LD_VAR 0 6
80323: PPUSH
80324: LD_VAR 0 11
80328: PPUSH
80329: CALL_OW 272
80333: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80334: LD_ADDR_VAR 0 8
80338: PUSH
80339: LD_VAR 0 2
80343: PPUSH
80344: LD_VAR 0 6
80348: PPUSH
80349: LD_VAR 0 11
80353: PPUSH
80354: CALL_OW 273
80358: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80359: LD_VAR 0 7
80363: PPUSH
80364: LD_VAR 0 8
80368: PPUSH
80369: CALL_OW 488
80373: NOT
80374: IFFALSE 80378
// continue ;
80376: GO 80306
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80378: LD_ADDR_VAR 0 9
80382: PUSH
80383: LD_VAR 0 12
80387: PUSH
80388: LD_INT 1
80390: ARRAY
80391: PPUSH
80392: LD_VAR 0 12
80396: PUSH
80397: LD_INT 2
80399: ARRAY
80400: PPUSH
80401: LD_VAR 0 7
80405: PPUSH
80406: LD_VAR 0 8
80410: PPUSH
80411: CALL_OW 298
80415: ST_TO_ADDR
// if tmp < distance then
80416: LD_VAR 0 9
80420: PUSH
80421: LD_VAR 0 10
80425: LESS
80426: IFFALSE 80448
// begin result := i ;
80428: LD_ADDR_VAR 0 5
80432: PUSH
80433: LD_VAR 0 6
80437: ST_TO_ADDR
// distance := tmp ;
80438: LD_ADDR_VAR 0 10
80442: PUSH
80443: LD_VAR 0 9
80447: ST_TO_ADDR
// end ; end ;
80448: GO 80306
80450: POP
80451: POP
// end ;
80452: LD_VAR 0 5
80456: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80457: LD_INT 0
80459: PPUSH
80460: PPUSH
// if not driver or not IsInUnit ( driver ) then
80461: LD_VAR 0 1
80465: NOT
80466: PUSH
80467: LD_VAR 0 1
80471: PPUSH
80472: CALL_OW 310
80476: NOT
80477: OR
80478: IFFALSE 80482
// exit ;
80480: GO 80572
// vehicle := IsInUnit ( driver ) ;
80482: LD_ADDR_VAR 0 3
80486: PUSH
80487: LD_VAR 0 1
80491: PPUSH
80492: CALL_OW 310
80496: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80497: LD_VAR 0 1
80501: PPUSH
80502: LD_STRING \
80504: PUSH
80505: LD_INT 0
80507: PUSH
80508: LD_INT 0
80510: PUSH
80511: LD_INT 0
80513: PUSH
80514: LD_INT 0
80516: PUSH
80517: LD_INT 0
80519: PUSH
80520: LD_INT 0
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: LIST
80527: LIST
80528: LIST
80529: LIST
80530: LIST
80531: PUSH
80532: LD_STRING E
80534: PUSH
80535: LD_INT 0
80537: PUSH
80538: LD_INT 0
80540: PUSH
80541: LD_VAR 0 3
80545: PUSH
80546: LD_INT 0
80548: PUSH
80549: LD_INT 0
80551: PUSH
80552: LD_INT 0
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: LIST
80559: LIST
80560: LIST
80561: LIST
80562: LIST
80563: PUSH
80564: EMPTY
80565: LIST
80566: LIST
80567: PPUSH
80568: CALL_OW 446
// end ;
80572: LD_VAR 0 2
80576: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80577: LD_INT 0
80579: PPUSH
80580: PPUSH
// if not driver or not IsInUnit ( driver ) then
80581: LD_VAR 0 1
80585: NOT
80586: PUSH
80587: LD_VAR 0 1
80591: PPUSH
80592: CALL_OW 310
80596: NOT
80597: OR
80598: IFFALSE 80602
// exit ;
80600: GO 80692
// vehicle := IsInUnit ( driver ) ;
80602: LD_ADDR_VAR 0 3
80606: PUSH
80607: LD_VAR 0 1
80611: PPUSH
80612: CALL_OW 310
80616: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80617: LD_VAR 0 1
80621: PPUSH
80622: LD_STRING \
80624: PUSH
80625: LD_INT 0
80627: PUSH
80628: LD_INT 0
80630: PUSH
80631: LD_INT 0
80633: PUSH
80634: LD_INT 0
80636: PUSH
80637: LD_INT 0
80639: PUSH
80640: LD_INT 0
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: LIST
80647: LIST
80648: LIST
80649: LIST
80650: LIST
80651: PUSH
80652: LD_STRING E
80654: PUSH
80655: LD_INT 0
80657: PUSH
80658: LD_INT 0
80660: PUSH
80661: LD_VAR 0 3
80665: PUSH
80666: LD_INT 0
80668: PUSH
80669: LD_INT 0
80671: PUSH
80672: LD_INT 0
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: LIST
80679: LIST
80680: LIST
80681: LIST
80682: LIST
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PPUSH
80688: CALL_OW 447
// end ;
80692: LD_VAR 0 2
80696: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80697: LD_INT 0
80699: PPUSH
80700: PPUSH
80701: PPUSH
// tmp := [ ] ;
80702: LD_ADDR_VAR 0 5
80706: PUSH
80707: EMPTY
80708: ST_TO_ADDR
// for i in units do
80709: LD_ADDR_VAR 0 4
80713: PUSH
80714: LD_VAR 0 1
80718: PUSH
80719: FOR_IN
80720: IFFALSE 80758
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80722: LD_ADDR_VAR 0 5
80726: PUSH
80727: LD_VAR 0 5
80731: PPUSH
80732: LD_VAR 0 5
80736: PUSH
80737: LD_INT 1
80739: PLUS
80740: PPUSH
80741: LD_VAR 0 4
80745: PPUSH
80746: CALL_OW 256
80750: PPUSH
80751: CALL_OW 2
80755: ST_TO_ADDR
80756: GO 80719
80758: POP
80759: POP
// if not tmp then
80760: LD_VAR 0 5
80764: NOT
80765: IFFALSE 80769
// exit ;
80767: GO 80817
// if asc then
80769: LD_VAR 0 2
80773: IFFALSE 80797
// result := SortListByListAsc ( units , tmp ) else
80775: LD_ADDR_VAR 0 3
80779: PUSH
80780: LD_VAR 0 1
80784: PPUSH
80785: LD_VAR 0 5
80789: PPUSH
80790: CALL_OW 76
80794: ST_TO_ADDR
80795: GO 80817
// result := SortListByListDesc ( units , tmp ) ;
80797: LD_ADDR_VAR 0 3
80801: PUSH
80802: LD_VAR 0 1
80806: PPUSH
80807: LD_VAR 0 5
80811: PPUSH
80812: CALL_OW 77
80816: ST_TO_ADDR
// end ;
80817: LD_VAR 0 3
80821: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80822: LD_INT 0
80824: PPUSH
80825: PPUSH
// task := GetTaskList ( mech ) ;
80826: LD_ADDR_VAR 0 4
80830: PUSH
80831: LD_VAR 0 1
80835: PPUSH
80836: CALL_OW 437
80840: ST_TO_ADDR
// if not task then
80841: LD_VAR 0 4
80845: NOT
80846: IFFALSE 80850
// exit ;
80848: GO 80892
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80850: LD_ADDR_VAR 0 3
80854: PUSH
80855: LD_VAR 0 4
80859: PUSH
80860: LD_INT 1
80862: ARRAY
80863: PUSH
80864: LD_INT 1
80866: ARRAY
80867: PUSH
80868: LD_STRING r
80870: EQUAL
80871: PUSH
80872: LD_VAR 0 4
80876: PUSH
80877: LD_INT 1
80879: ARRAY
80880: PUSH
80881: LD_INT 4
80883: ARRAY
80884: PUSH
80885: LD_VAR 0 2
80889: EQUAL
80890: AND
80891: ST_TO_ADDR
// end ;
80892: LD_VAR 0 3
80896: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80897: LD_INT 0
80899: PPUSH
// SetDir ( unit , d ) ;
80900: LD_VAR 0 1
80904: PPUSH
80905: LD_VAR 0 4
80909: PPUSH
80910: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80914: LD_VAR 0 1
80918: PPUSH
80919: LD_VAR 0 2
80923: PPUSH
80924: LD_VAR 0 3
80928: PPUSH
80929: LD_VAR 0 5
80933: PPUSH
80934: CALL_OW 48
// end ;
80938: LD_VAR 0 6
80942: RET
// export function ToNaturalNumber ( number ) ; begin
80943: LD_INT 0
80945: PPUSH
// result := number div 1 ;
80946: LD_ADDR_VAR 0 2
80950: PUSH
80951: LD_VAR 0 1
80955: PUSH
80956: LD_INT 1
80958: DIV
80959: ST_TO_ADDR
// if number < 0 then
80960: LD_VAR 0 1
80964: PUSH
80965: LD_INT 0
80967: LESS
80968: IFFALSE 80978
// result := 0 ;
80970: LD_ADDR_VAR 0 2
80974: PUSH
80975: LD_INT 0
80977: ST_TO_ADDR
// end ;
80978: LD_VAR 0 2
80982: RET
// export function SortByClass ( units , class ) ; var un ; begin
80983: LD_INT 0
80985: PPUSH
80986: PPUSH
// if not units or not class then
80987: LD_VAR 0 1
80991: NOT
80992: PUSH
80993: LD_VAR 0 2
80997: NOT
80998: OR
80999: IFFALSE 81003
// exit ;
81001: GO 81098
// result := [ ] ;
81003: LD_ADDR_VAR 0 3
81007: PUSH
81008: EMPTY
81009: ST_TO_ADDR
// for un in units do
81010: LD_ADDR_VAR 0 4
81014: PUSH
81015: LD_VAR 0 1
81019: PUSH
81020: FOR_IN
81021: IFFALSE 81096
// if GetClass ( un ) = class then
81023: LD_VAR 0 4
81027: PPUSH
81028: CALL_OW 257
81032: PUSH
81033: LD_VAR 0 2
81037: EQUAL
81038: IFFALSE 81065
// result := Insert ( result , 1 , un ) else
81040: LD_ADDR_VAR 0 3
81044: PUSH
81045: LD_VAR 0 3
81049: PPUSH
81050: LD_INT 1
81052: PPUSH
81053: LD_VAR 0 4
81057: PPUSH
81058: CALL_OW 2
81062: ST_TO_ADDR
81063: GO 81094
// result := Replace ( result , result + 1 , un ) ;
81065: LD_ADDR_VAR 0 3
81069: PUSH
81070: LD_VAR 0 3
81074: PPUSH
81075: LD_VAR 0 3
81079: PUSH
81080: LD_INT 1
81082: PLUS
81083: PPUSH
81084: LD_VAR 0 4
81088: PPUSH
81089: CALL_OW 1
81093: ST_TO_ADDR
81094: GO 81020
81096: POP
81097: POP
// end ;
81098: LD_VAR 0 3
81102: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81103: LD_INT 0
81105: PPUSH
81106: PPUSH
81107: PPUSH
81108: PPUSH
81109: PPUSH
81110: PPUSH
81111: PPUSH
// result := [ ] ;
81112: LD_ADDR_VAR 0 4
81116: PUSH
81117: EMPTY
81118: ST_TO_ADDR
// if x - r < 0 then
81119: LD_VAR 0 1
81123: PUSH
81124: LD_VAR 0 3
81128: MINUS
81129: PUSH
81130: LD_INT 0
81132: LESS
81133: IFFALSE 81145
// min_x := 0 else
81135: LD_ADDR_VAR 0 8
81139: PUSH
81140: LD_INT 0
81142: ST_TO_ADDR
81143: GO 81161
// min_x := x - r ;
81145: LD_ADDR_VAR 0 8
81149: PUSH
81150: LD_VAR 0 1
81154: PUSH
81155: LD_VAR 0 3
81159: MINUS
81160: ST_TO_ADDR
// if y - r < 0 then
81161: LD_VAR 0 2
81165: PUSH
81166: LD_VAR 0 3
81170: MINUS
81171: PUSH
81172: LD_INT 0
81174: LESS
81175: IFFALSE 81187
// min_y := 0 else
81177: LD_ADDR_VAR 0 7
81181: PUSH
81182: LD_INT 0
81184: ST_TO_ADDR
81185: GO 81203
// min_y := y - r ;
81187: LD_ADDR_VAR 0 7
81191: PUSH
81192: LD_VAR 0 2
81196: PUSH
81197: LD_VAR 0 3
81201: MINUS
81202: ST_TO_ADDR
// max_x := x + r ;
81203: LD_ADDR_VAR 0 9
81207: PUSH
81208: LD_VAR 0 1
81212: PUSH
81213: LD_VAR 0 3
81217: PLUS
81218: ST_TO_ADDR
// max_y := y + r ;
81219: LD_ADDR_VAR 0 10
81223: PUSH
81224: LD_VAR 0 2
81228: PUSH
81229: LD_VAR 0 3
81233: PLUS
81234: ST_TO_ADDR
// for _x = min_x to max_x do
81235: LD_ADDR_VAR 0 5
81239: PUSH
81240: DOUBLE
81241: LD_VAR 0 8
81245: DEC
81246: ST_TO_ADDR
81247: LD_VAR 0 9
81251: PUSH
81252: FOR_TO
81253: IFFALSE 81354
// for _y = min_y to max_y do
81255: LD_ADDR_VAR 0 6
81259: PUSH
81260: DOUBLE
81261: LD_VAR 0 7
81265: DEC
81266: ST_TO_ADDR
81267: LD_VAR 0 10
81271: PUSH
81272: FOR_TO
81273: IFFALSE 81350
// begin if not ValidHex ( _x , _y ) then
81275: LD_VAR 0 5
81279: PPUSH
81280: LD_VAR 0 6
81284: PPUSH
81285: CALL_OW 488
81289: NOT
81290: IFFALSE 81294
// continue ;
81292: GO 81272
// if GetResourceTypeXY ( _x , _y ) then
81294: LD_VAR 0 5
81298: PPUSH
81299: LD_VAR 0 6
81303: PPUSH
81304: CALL_OW 283
81308: IFFALSE 81348
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81310: LD_ADDR_VAR 0 4
81314: PUSH
81315: LD_VAR 0 4
81319: PPUSH
81320: LD_VAR 0 4
81324: PUSH
81325: LD_INT 1
81327: PLUS
81328: PPUSH
81329: LD_VAR 0 5
81333: PUSH
81334: LD_VAR 0 6
81338: PUSH
81339: EMPTY
81340: LIST
81341: LIST
81342: PPUSH
81343: CALL_OW 1
81347: ST_TO_ADDR
// end ;
81348: GO 81272
81350: POP
81351: POP
81352: GO 81252
81354: POP
81355: POP
// end ;
81356: LD_VAR 0 4
81360: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81361: LD_INT 0
81363: PPUSH
81364: PPUSH
81365: PPUSH
81366: PPUSH
81367: PPUSH
81368: PPUSH
81369: PPUSH
81370: PPUSH
// if not units then
81371: LD_VAR 0 1
81375: NOT
81376: IFFALSE 81380
// exit ;
81378: GO 81904
// result := UnitFilter ( units , [ f_ok ] ) ;
81380: LD_ADDR_VAR 0 3
81384: PUSH
81385: LD_VAR 0 1
81389: PPUSH
81390: LD_INT 50
81392: PUSH
81393: EMPTY
81394: LIST
81395: PPUSH
81396: CALL_OW 72
81400: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81401: LD_ADDR_VAR 0 8
81405: PUSH
81406: LD_VAR 0 1
81410: PUSH
81411: LD_INT 1
81413: ARRAY
81414: PPUSH
81415: CALL_OW 255
81419: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81420: LD_ADDR_VAR 0 10
81424: PUSH
81425: LD_INT 29
81427: PUSH
81428: LD_INT 91
81430: PUSH
81431: LD_INT 49
81433: PUSH
81434: EMPTY
81435: LIST
81436: LIST
81437: LIST
81438: ST_TO_ADDR
// if not result then
81439: LD_VAR 0 3
81443: NOT
81444: IFFALSE 81448
// exit ;
81446: GO 81904
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81448: LD_ADDR_VAR 0 5
81452: PUSH
81453: LD_INT 81
81455: PUSH
81456: LD_VAR 0 8
81460: PUSH
81461: EMPTY
81462: LIST
81463: LIST
81464: PPUSH
81465: CALL_OW 69
81469: ST_TO_ADDR
// for i in result do
81470: LD_ADDR_VAR 0 4
81474: PUSH
81475: LD_VAR 0 3
81479: PUSH
81480: FOR_IN
81481: IFFALSE 81902
// begin tag := GetTag ( i ) + 1 ;
81483: LD_ADDR_VAR 0 9
81487: PUSH
81488: LD_VAR 0 4
81492: PPUSH
81493: CALL_OW 110
81497: PUSH
81498: LD_INT 1
81500: PLUS
81501: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81502: LD_ADDR_VAR 0 7
81506: PUSH
81507: LD_VAR 0 4
81511: PPUSH
81512: CALL_OW 250
81516: PPUSH
81517: LD_VAR 0 4
81521: PPUSH
81522: CALL_OW 251
81526: PPUSH
81527: LD_INT 6
81529: PPUSH
81530: CALL 81103 0 3
81534: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81535: LD_VAR 0 4
81539: PPUSH
81540: CALL_OW 247
81544: PUSH
81545: LD_INT 2
81547: EQUAL
81548: PUSH
81549: LD_VAR 0 7
81553: AND
81554: PUSH
81555: LD_VAR 0 4
81559: PPUSH
81560: CALL_OW 264
81564: PUSH
81565: LD_VAR 0 10
81569: IN
81570: NOT
81571: AND
81572: IFFALSE 81611
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81574: LD_VAR 0 4
81578: PPUSH
81579: LD_VAR 0 7
81583: PUSH
81584: LD_INT 1
81586: ARRAY
81587: PUSH
81588: LD_INT 1
81590: ARRAY
81591: PPUSH
81592: LD_VAR 0 7
81596: PUSH
81597: LD_INT 1
81599: ARRAY
81600: PUSH
81601: LD_INT 2
81603: ARRAY
81604: PPUSH
81605: CALL_OW 116
81609: GO 81900
// if path > tag then
81611: LD_VAR 0 2
81615: PUSH
81616: LD_VAR 0 9
81620: GREATER
81621: IFFALSE 81829
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81623: LD_ADDR_VAR 0 6
81627: PUSH
81628: LD_VAR 0 5
81632: PPUSH
81633: LD_INT 91
81635: PUSH
81636: LD_VAR 0 4
81640: PUSH
81641: LD_INT 8
81643: PUSH
81644: EMPTY
81645: LIST
81646: LIST
81647: LIST
81648: PPUSH
81649: CALL_OW 72
81653: ST_TO_ADDR
// if nearEnemy then
81654: LD_VAR 0 6
81658: IFFALSE 81727
// begin if GetWeapon ( i ) = ru_time_lapser then
81660: LD_VAR 0 4
81664: PPUSH
81665: CALL_OW 264
81669: PUSH
81670: LD_INT 49
81672: EQUAL
81673: IFFALSE 81701
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81675: LD_VAR 0 4
81679: PPUSH
81680: LD_VAR 0 6
81684: PPUSH
81685: LD_VAR 0 4
81689: PPUSH
81690: CALL_OW 74
81694: PPUSH
81695: CALL_OW 112
81699: GO 81725
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81701: LD_VAR 0 4
81705: PPUSH
81706: LD_VAR 0 6
81710: PPUSH
81711: LD_VAR 0 4
81715: PPUSH
81716: CALL_OW 74
81720: PPUSH
81721: CALL 82975 0 2
// end else
81725: GO 81827
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81727: LD_VAR 0 4
81731: PPUSH
81732: LD_VAR 0 2
81736: PUSH
81737: LD_VAR 0 9
81741: ARRAY
81742: PUSH
81743: LD_INT 1
81745: ARRAY
81746: PPUSH
81747: LD_VAR 0 2
81751: PUSH
81752: LD_VAR 0 9
81756: ARRAY
81757: PUSH
81758: LD_INT 2
81760: ARRAY
81761: PPUSH
81762: CALL_OW 297
81766: PUSH
81767: LD_INT 6
81769: GREATER
81770: IFFALSE 81813
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81772: LD_VAR 0 4
81776: PPUSH
81777: LD_VAR 0 2
81781: PUSH
81782: LD_VAR 0 9
81786: ARRAY
81787: PUSH
81788: LD_INT 1
81790: ARRAY
81791: PPUSH
81792: LD_VAR 0 2
81796: PUSH
81797: LD_VAR 0 9
81801: ARRAY
81802: PUSH
81803: LD_INT 2
81805: ARRAY
81806: PPUSH
81807: CALL_OW 114
81811: GO 81827
// SetTag ( i , tag ) ;
81813: LD_VAR 0 4
81817: PPUSH
81818: LD_VAR 0 9
81822: PPUSH
81823: CALL_OW 109
// end else
81827: GO 81900
// if enemy then
81829: LD_VAR 0 5
81833: IFFALSE 81900
// begin if GetWeapon ( i ) = ru_time_lapser then
81835: LD_VAR 0 4
81839: PPUSH
81840: CALL_OW 264
81844: PUSH
81845: LD_INT 49
81847: EQUAL
81848: IFFALSE 81876
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81850: LD_VAR 0 4
81854: PPUSH
81855: LD_VAR 0 5
81859: PPUSH
81860: LD_VAR 0 4
81864: PPUSH
81865: CALL_OW 74
81869: PPUSH
81870: CALL_OW 112
81874: GO 81900
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81876: LD_VAR 0 4
81880: PPUSH
81881: LD_VAR 0 5
81885: PPUSH
81886: LD_VAR 0 4
81890: PPUSH
81891: CALL_OW 74
81895: PPUSH
81896: CALL 82975 0 2
// end ; end ;
81900: GO 81480
81902: POP
81903: POP
// end ;
81904: LD_VAR 0 3
81908: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81909: LD_INT 0
81911: PPUSH
81912: PPUSH
81913: PPUSH
// if not unit or IsInUnit ( unit ) then
81914: LD_VAR 0 1
81918: NOT
81919: PUSH
81920: LD_VAR 0 1
81924: PPUSH
81925: CALL_OW 310
81929: OR
81930: IFFALSE 81934
// exit ;
81932: GO 82025
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81934: LD_ADDR_VAR 0 4
81938: PUSH
81939: LD_VAR 0 1
81943: PPUSH
81944: CALL_OW 250
81948: PPUSH
81949: LD_VAR 0 2
81953: PPUSH
81954: LD_INT 1
81956: PPUSH
81957: CALL_OW 272
81961: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81962: LD_ADDR_VAR 0 5
81966: PUSH
81967: LD_VAR 0 1
81971: PPUSH
81972: CALL_OW 251
81976: PPUSH
81977: LD_VAR 0 2
81981: PPUSH
81982: LD_INT 1
81984: PPUSH
81985: CALL_OW 273
81989: ST_TO_ADDR
// if ValidHex ( x , y ) then
81990: LD_VAR 0 4
81994: PPUSH
81995: LD_VAR 0 5
81999: PPUSH
82000: CALL_OW 488
82004: IFFALSE 82025
// ComTurnXY ( unit , x , y ) ;
82006: LD_VAR 0 1
82010: PPUSH
82011: LD_VAR 0 4
82015: PPUSH
82016: LD_VAR 0 5
82020: PPUSH
82021: CALL_OW 118
// end ;
82025: LD_VAR 0 3
82029: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82030: LD_INT 0
82032: PPUSH
82033: PPUSH
// result := false ;
82034: LD_ADDR_VAR 0 3
82038: PUSH
82039: LD_INT 0
82041: ST_TO_ADDR
// if not units then
82042: LD_VAR 0 2
82046: NOT
82047: IFFALSE 82051
// exit ;
82049: GO 82096
// for i in units do
82051: LD_ADDR_VAR 0 4
82055: PUSH
82056: LD_VAR 0 2
82060: PUSH
82061: FOR_IN
82062: IFFALSE 82094
// if See ( side , i ) then
82064: LD_VAR 0 1
82068: PPUSH
82069: LD_VAR 0 4
82073: PPUSH
82074: CALL_OW 292
82078: IFFALSE 82092
// begin result := true ;
82080: LD_ADDR_VAR 0 3
82084: PUSH
82085: LD_INT 1
82087: ST_TO_ADDR
// exit ;
82088: POP
82089: POP
82090: GO 82096
// end ;
82092: GO 82061
82094: POP
82095: POP
// end ;
82096: LD_VAR 0 3
82100: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82101: LD_INT 0
82103: PPUSH
82104: PPUSH
82105: PPUSH
82106: PPUSH
// if not unit or not points then
82107: LD_VAR 0 1
82111: NOT
82112: PUSH
82113: LD_VAR 0 2
82117: NOT
82118: OR
82119: IFFALSE 82123
// exit ;
82121: GO 82213
// dist := 99999 ;
82123: LD_ADDR_VAR 0 5
82127: PUSH
82128: LD_INT 99999
82130: ST_TO_ADDR
// for i in points do
82131: LD_ADDR_VAR 0 4
82135: PUSH
82136: LD_VAR 0 2
82140: PUSH
82141: FOR_IN
82142: IFFALSE 82211
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82144: LD_ADDR_VAR 0 6
82148: PUSH
82149: LD_VAR 0 1
82153: PPUSH
82154: LD_VAR 0 4
82158: PUSH
82159: LD_INT 1
82161: ARRAY
82162: PPUSH
82163: LD_VAR 0 4
82167: PUSH
82168: LD_INT 2
82170: ARRAY
82171: PPUSH
82172: CALL_OW 297
82176: ST_TO_ADDR
// if tmpDist < dist then
82177: LD_VAR 0 6
82181: PUSH
82182: LD_VAR 0 5
82186: LESS
82187: IFFALSE 82209
// begin result := i ;
82189: LD_ADDR_VAR 0 3
82193: PUSH
82194: LD_VAR 0 4
82198: ST_TO_ADDR
// dist := tmpDist ;
82199: LD_ADDR_VAR 0 5
82203: PUSH
82204: LD_VAR 0 6
82208: ST_TO_ADDR
// end ; end ;
82209: GO 82141
82211: POP
82212: POP
// end ;
82213: LD_VAR 0 3
82217: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82218: LD_INT 0
82220: PPUSH
// uc_side := side ;
82221: LD_ADDR_OWVAR 20
82225: PUSH
82226: LD_VAR 0 1
82230: ST_TO_ADDR
// uc_nation := 3 ;
82231: LD_ADDR_OWVAR 21
82235: PUSH
82236: LD_INT 3
82238: ST_TO_ADDR
// vc_chassis := 25 ;
82239: LD_ADDR_OWVAR 37
82243: PUSH
82244: LD_INT 25
82246: ST_TO_ADDR
// vc_engine := engine_siberite ;
82247: LD_ADDR_OWVAR 39
82251: PUSH
82252: LD_INT 3
82254: ST_TO_ADDR
// vc_control := control_computer ;
82255: LD_ADDR_OWVAR 38
82259: PUSH
82260: LD_INT 3
82262: ST_TO_ADDR
// vc_weapon := 59 ;
82263: LD_ADDR_OWVAR 40
82267: PUSH
82268: LD_INT 59
82270: ST_TO_ADDR
// result := CreateVehicle ;
82271: LD_ADDR_VAR 0 5
82275: PUSH
82276: CALL_OW 45
82280: ST_TO_ADDR
// SetDir ( result , d ) ;
82281: LD_VAR 0 5
82285: PPUSH
82286: LD_VAR 0 4
82290: PPUSH
82291: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82295: LD_VAR 0 5
82299: PPUSH
82300: LD_VAR 0 2
82304: PPUSH
82305: LD_VAR 0 3
82309: PPUSH
82310: LD_INT 0
82312: PPUSH
82313: CALL_OW 48
// end ;
82317: LD_VAR 0 5
82321: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82322: LD_INT 0
82324: PPUSH
82325: PPUSH
82326: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82327: LD_ADDR_VAR 0 2
82331: PUSH
82332: LD_INT 0
82334: PUSH
82335: LD_INT 0
82337: PUSH
82338: LD_INT 0
82340: PUSH
82341: LD_INT 0
82343: PUSH
82344: EMPTY
82345: LIST
82346: LIST
82347: LIST
82348: LIST
82349: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82350: LD_VAR 0 1
82354: NOT
82355: PUSH
82356: LD_VAR 0 1
82360: PPUSH
82361: CALL_OW 264
82365: PUSH
82366: LD_INT 12
82368: PUSH
82369: LD_INT 51
82371: PUSH
82372: LD_INT 32
82374: PUSH
82375: LD_INT 89
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: LIST
82382: LIST
82383: IN
82384: NOT
82385: OR
82386: IFFALSE 82390
// exit ;
82388: GO 82488
// for i := 1 to 3 do
82390: LD_ADDR_VAR 0 3
82394: PUSH
82395: DOUBLE
82396: LD_INT 1
82398: DEC
82399: ST_TO_ADDR
82400: LD_INT 3
82402: PUSH
82403: FOR_TO
82404: IFFALSE 82486
// begin tmp := GetCargo ( cargo , i ) ;
82406: LD_ADDR_VAR 0 4
82410: PUSH
82411: LD_VAR 0 1
82415: PPUSH
82416: LD_VAR 0 3
82420: PPUSH
82421: CALL_OW 289
82425: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82426: LD_ADDR_VAR 0 2
82430: PUSH
82431: LD_VAR 0 2
82435: PPUSH
82436: LD_VAR 0 3
82440: PPUSH
82441: LD_VAR 0 4
82445: PPUSH
82446: CALL_OW 1
82450: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82451: LD_ADDR_VAR 0 2
82455: PUSH
82456: LD_VAR 0 2
82460: PPUSH
82461: LD_INT 4
82463: PPUSH
82464: LD_VAR 0 2
82468: PUSH
82469: LD_INT 4
82471: ARRAY
82472: PUSH
82473: LD_VAR 0 4
82477: PLUS
82478: PPUSH
82479: CALL_OW 1
82483: ST_TO_ADDR
// end ;
82484: GO 82403
82486: POP
82487: POP
// end ;
82488: LD_VAR 0 2
82492: RET
// export function Length ( array ) ; begin
82493: LD_INT 0
82495: PPUSH
// result := array + 0 ;
82496: LD_ADDR_VAR 0 2
82500: PUSH
82501: LD_VAR 0 1
82505: PUSH
82506: LD_INT 0
82508: PLUS
82509: ST_TO_ADDR
// end ;
82510: LD_VAR 0 2
82514: RET
// export function PrepareArray ( array ) ; begin
82515: LD_INT 0
82517: PPUSH
// result := array diff 0 ;
82518: LD_ADDR_VAR 0 2
82522: PUSH
82523: LD_VAR 0 1
82527: PUSH
82528: LD_INT 0
82530: DIFF
82531: ST_TO_ADDR
// if not result [ 1 ] then
82532: LD_VAR 0 2
82536: PUSH
82537: LD_INT 1
82539: ARRAY
82540: NOT
82541: IFFALSE 82561
// result := Delete ( result , 1 ) ;
82543: LD_ADDR_VAR 0 2
82547: PUSH
82548: LD_VAR 0 2
82552: PPUSH
82553: LD_INT 1
82555: PPUSH
82556: CALL_OW 3
82560: ST_TO_ADDR
// end ;
82561: LD_VAR 0 2
82565: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82566: LD_INT 0
82568: PPUSH
82569: PPUSH
82570: PPUSH
82571: PPUSH
// sibRocketRange := 25 ;
82572: LD_ADDR_VAR 0 6
82576: PUSH
82577: LD_INT 25
82579: ST_TO_ADDR
// result := false ;
82580: LD_ADDR_VAR 0 4
82584: PUSH
82585: LD_INT 0
82587: ST_TO_ADDR
// for i := 0 to 5 do
82588: LD_ADDR_VAR 0 5
82592: PUSH
82593: DOUBLE
82594: LD_INT 0
82596: DEC
82597: ST_TO_ADDR
82598: LD_INT 5
82600: PUSH
82601: FOR_TO
82602: IFFALSE 82669
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82604: LD_VAR 0 1
82608: PPUSH
82609: LD_VAR 0 5
82613: PPUSH
82614: LD_VAR 0 6
82618: PPUSH
82619: CALL_OW 272
82623: PPUSH
82624: LD_VAR 0 2
82628: PPUSH
82629: LD_VAR 0 5
82633: PPUSH
82634: LD_VAR 0 6
82638: PPUSH
82639: CALL_OW 273
82643: PPUSH
82644: LD_VAR 0 3
82648: PPUSH
82649: CALL_OW 309
82653: IFFALSE 82667
// begin result := true ;
82655: LD_ADDR_VAR 0 4
82659: PUSH
82660: LD_INT 1
82662: ST_TO_ADDR
// exit ;
82663: POP
82664: POP
82665: GO 82671
// end ;
82667: GO 82601
82669: POP
82670: POP
// end ;
82671: LD_VAR 0 4
82675: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82676: LD_INT 0
82678: PPUSH
82679: PPUSH
82680: PPUSH
// if btype = b_depot then
82681: LD_VAR 0 2
82685: PUSH
82686: LD_INT 0
82688: EQUAL
82689: IFFALSE 82701
// begin result := true ;
82691: LD_ADDR_VAR 0 3
82695: PUSH
82696: LD_INT 1
82698: ST_TO_ADDR
// exit ;
82699: GO 82817
// end ; pom := GetBase ( depot ) ;
82701: LD_ADDR_VAR 0 4
82705: PUSH
82706: LD_VAR 0 1
82710: PPUSH
82711: CALL_OW 274
82715: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82716: LD_ADDR_VAR 0 5
82720: PUSH
82721: LD_VAR 0 2
82725: PPUSH
82726: LD_VAR 0 1
82730: PPUSH
82731: CALL_OW 248
82735: PPUSH
82736: CALL_OW 450
82740: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82741: LD_ADDR_VAR 0 3
82745: PUSH
82746: LD_VAR 0 4
82750: PPUSH
82751: LD_INT 1
82753: PPUSH
82754: CALL_OW 275
82758: PUSH
82759: LD_VAR 0 5
82763: PUSH
82764: LD_INT 1
82766: ARRAY
82767: GREATEREQUAL
82768: PUSH
82769: LD_VAR 0 4
82773: PPUSH
82774: LD_INT 2
82776: PPUSH
82777: CALL_OW 275
82781: PUSH
82782: LD_VAR 0 5
82786: PUSH
82787: LD_INT 2
82789: ARRAY
82790: GREATEREQUAL
82791: AND
82792: PUSH
82793: LD_VAR 0 4
82797: PPUSH
82798: LD_INT 3
82800: PPUSH
82801: CALL_OW 275
82805: PUSH
82806: LD_VAR 0 5
82810: PUSH
82811: LD_INT 3
82813: ARRAY
82814: GREATEREQUAL
82815: AND
82816: ST_TO_ADDR
// end ;
82817: LD_VAR 0 3
82821: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82822: LD_INT 0
82824: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82825: LD_VAR 0 1
82829: PPUSH
82830: LD_VAR 0 2
82834: PPUSH
82835: LD_INT 0
82837: PPUSH
82838: LD_INT 0
82840: PPUSH
82841: LD_INT 1
82843: PPUSH
82844: LD_INT 0
82846: PPUSH
82847: CALL_OW 587
// end ;
82851: LD_VAR 0 3
82855: RET
// export function CenterOnNow ( unit ) ; begin
82856: LD_INT 0
82858: PPUSH
// result := IsInUnit ( unit ) ;
82859: LD_ADDR_VAR 0 2
82863: PUSH
82864: LD_VAR 0 1
82868: PPUSH
82869: CALL_OW 310
82873: ST_TO_ADDR
// if not result then
82874: LD_VAR 0 2
82878: NOT
82879: IFFALSE 82891
// result := unit ;
82881: LD_ADDR_VAR 0 2
82885: PUSH
82886: LD_VAR 0 1
82890: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82891: LD_VAR 0 1
82895: PPUSH
82896: CALL_OW 87
// end ;
82900: LD_VAR 0 2
82904: RET
// export function ComMoveHex ( unit , hex ) ; begin
82905: LD_INT 0
82907: PPUSH
// if not hex then
82908: LD_VAR 0 2
82912: NOT
82913: IFFALSE 82917
// exit ;
82915: GO 82970
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82917: LD_VAR 0 2
82921: PUSH
82922: LD_INT 1
82924: ARRAY
82925: PPUSH
82926: LD_VAR 0 2
82930: PUSH
82931: LD_INT 2
82933: ARRAY
82934: PPUSH
82935: CALL_OW 428
82939: IFFALSE 82943
// exit ;
82941: GO 82970
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82943: LD_VAR 0 1
82947: PPUSH
82948: LD_VAR 0 2
82952: PUSH
82953: LD_INT 1
82955: ARRAY
82956: PPUSH
82957: LD_VAR 0 2
82961: PUSH
82962: LD_INT 2
82964: ARRAY
82965: PPUSH
82966: CALL_OW 111
// end ;
82970: LD_VAR 0 3
82974: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82975: LD_INT 0
82977: PPUSH
82978: PPUSH
82979: PPUSH
// if not unit or not enemy then
82980: LD_VAR 0 1
82984: NOT
82985: PUSH
82986: LD_VAR 0 2
82990: NOT
82991: OR
82992: IFFALSE 82996
// exit ;
82994: GO 83120
// x := GetX ( enemy ) ;
82996: LD_ADDR_VAR 0 4
83000: PUSH
83001: LD_VAR 0 2
83005: PPUSH
83006: CALL_OW 250
83010: ST_TO_ADDR
// y := GetY ( enemy ) ;
83011: LD_ADDR_VAR 0 5
83015: PUSH
83016: LD_VAR 0 2
83020: PPUSH
83021: CALL_OW 251
83025: ST_TO_ADDR
// if ValidHex ( x , y ) then
83026: LD_VAR 0 4
83030: PPUSH
83031: LD_VAR 0 5
83035: PPUSH
83036: CALL_OW 488
83040: IFFALSE 83120
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83042: LD_VAR 0 2
83046: PPUSH
83047: CALL_OW 247
83051: PUSH
83052: LD_INT 3
83054: PUSH
83055: LD_INT 2
83057: PUSH
83058: EMPTY
83059: LIST
83060: LIST
83061: IN
83062: PUSH
83063: LD_VAR 0 1
83067: PPUSH
83068: CALL_OW 255
83072: PPUSH
83073: LD_VAR 0 2
83077: PPUSH
83078: CALL_OW 292
83082: OR
83083: IFFALSE 83101
// ComAttackUnit ( unit , enemy ) else
83085: LD_VAR 0 1
83089: PPUSH
83090: LD_VAR 0 2
83094: PPUSH
83095: CALL_OW 115
83099: GO 83120
// ComAgressiveMove ( unit , x , y ) ;
83101: LD_VAR 0 1
83105: PPUSH
83106: LD_VAR 0 4
83110: PPUSH
83111: LD_VAR 0 5
83115: PPUSH
83116: CALL_OW 114
// end ;
83120: LD_VAR 0 3
83124: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83125: LD_INT 0
83127: PPUSH
83128: PPUSH
83129: PPUSH
// list := AreaToList ( area , 0 ) ;
83130: LD_ADDR_VAR 0 5
83134: PUSH
83135: LD_VAR 0 1
83139: PPUSH
83140: LD_INT 0
83142: PPUSH
83143: CALL_OW 517
83147: ST_TO_ADDR
// if not list then
83148: LD_VAR 0 5
83152: NOT
83153: IFFALSE 83157
// exit ;
83155: GO 83287
// if all then
83157: LD_VAR 0 2
83161: IFFALSE 83249
// begin for i := 1 to list [ 1 ] do
83163: LD_ADDR_VAR 0 4
83167: PUSH
83168: DOUBLE
83169: LD_INT 1
83171: DEC
83172: ST_TO_ADDR
83173: LD_VAR 0 5
83177: PUSH
83178: LD_INT 1
83180: ARRAY
83181: PUSH
83182: FOR_TO
83183: IFFALSE 83245
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83185: LD_ADDR_VAR 0 3
83189: PUSH
83190: LD_VAR 0 3
83194: PPUSH
83195: LD_VAR 0 3
83199: PUSH
83200: LD_INT 1
83202: PLUS
83203: PPUSH
83204: LD_VAR 0 5
83208: PUSH
83209: LD_INT 1
83211: ARRAY
83212: PUSH
83213: LD_VAR 0 4
83217: ARRAY
83218: PUSH
83219: LD_VAR 0 5
83223: PUSH
83224: LD_INT 2
83226: ARRAY
83227: PUSH
83228: LD_VAR 0 4
83232: ARRAY
83233: PUSH
83234: EMPTY
83235: LIST
83236: LIST
83237: PPUSH
83238: CALL_OW 1
83242: ST_TO_ADDR
83243: GO 83182
83245: POP
83246: POP
// exit ;
83247: GO 83287
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83249: LD_ADDR_VAR 0 3
83253: PUSH
83254: LD_VAR 0 5
83258: PUSH
83259: LD_INT 1
83261: ARRAY
83262: PUSH
83263: LD_INT 1
83265: ARRAY
83266: PUSH
83267: LD_VAR 0 5
83271: PUSH
83272: LD_INT 2
83274: ARRAY
83275: PUSH
83276: LD_INT 1
83278: ARRAY
83279: PUSH
83280: EMPTY
83281: LIST
83282: LIST
83283: PUSH
83284: EMPTY
83285: LIST
83286: ST_TO_ADDR
// end ;
83287: LD_VAR 0 3
83291: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83292: LD_INT 0
83294: PPUSH
83295: PPUSH
// list := AreaToList ( area , 0 ) ;
83296: LD_ADDR_VAR 0 4
83300: PUSH
83301: LD_VAR 0 1
83305: PPUSH
83306: LD_INT 0
83308: PPUSH
83309: CALL_OW 517
83313: ST_TO_ADDR
// if not list then
83314: LD_VAR 0 4
83318: NOT
83319: IFFALSE 83323
// exit ;
83321: GO 83364
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83323: LD_ADDR_VAR 0 3
83327: PUSH
83328: LD_VAR 0 4
83332: PUSH
83333: LD_INT 1
83335: ARRAY
83336: PUSH
83337: LD_INT 1
83339: ARRAY
83340: PUSH
83341: LD_VAR 0 4
83345: PUSH
83346: LD_INT 2
83348: ARRAY
83349: PUSH
83350: LD_INT 1
83352: ARRAY
83353: PUSH
83354: LD_VAR 0 2
83358: PUSH
83359: EMPTY
83360: LIST
83361: LIST
83362: LIST
83363: ST_TO_ADDR
// end ;
83364: LD_VAR 0 3
83368: RET
// export function First ( array ) ; begin
83369: LD_INT 0
83371: PPUSH
// if not array then
83372: LD_VAR 0 1
83376: NOT
83377: IFFALSE 83381
// exit ;
83379: GO 83395
// result := array [ 1 ] ;
83381: LD_ADDR_VAR 0 2
83385: PUSH
83386: LD_VAR 0 1
83390: PUSH
83391: LD_INT 1
83393: ARRAY
83394: ST_TO_ADDR
// end ;
83395: LD_VAR 0 2
83399: RET
// export function Last ( array ) ; begin
83400: LD_INT 0
83402: PPUSH
// if not array then
83403: LD_VAR 0 1
83407: NOT
83408: IFFALSE 83412
// exit ;
83410: GO 83428
// result := array [ array ] ;
83412: LD_ADDR_VAR 0 2
83416: PUSH
83417: LD_VAR 0 1
83421: PUSH
83422: LD_VAR 0 1
83426: ARRAY
83427: ST_TO_ADDR
// end ;
83428: LD_VAR 0 2
83432: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83433: LD_INT 0
83435: PPUSH
83436: PPUSH
// result := [ ] ;
83437: LD_ADDR_VAR 0 5
83441: PUSH
83442: EMPTY
83443: ST_TO_ADDR
// if not array then
83444: LD_VAR 0 1
83448: NOT
83449: IFFALSE 83453
// exit ;
83451: GO 83565
// for i := 1 to array do
83453: LD_ADDR_VAR 0 6
83457: PUSH
83458: DOUBLE
83459: LD_INT 1
83461: DEC
83462: ST_TO_ADDR
83463: LD_VAR 0 1
83467: PUSH
83468: FOR_TO
83469: IFFALSE 83563
// if array [ i ] [ index ] = value then
83471: LD_VAR 0 1
83475: PUSH
83476: LD_VAR 0 6
83480: ARRAY
83481: PUSH
83482: LD_VAR 0 2
83486: ARRAY
83487: PUSH
83488: LD_VAR 0 3
83492: EQUAL
83493: IFFALSE 83561
// begin if indexColumn then
83495: LD_VAR 0 4
83499: IFFALSE 83535
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83501: LD_ADDR_VAR 0 5
83505: PUSH
83506: LD_VAR 0 5
83510: PPUSH
83511: LD_VAR 0 1
83515: PUSH
83516: LD_VAR 0 6
83520: ARRAY
83521: PUSH
83522: LD_VAR 0 4
83526: ARRAY
83527: PPUSH
83528: CALL 78757 0 2
83532: ST_TO_ADDR
83533: GO 83561
// result := Join ( result , array [ i ] ) ;
83535: LD_ADDR_VAR 0 5
83539: PUSH
83540: LD_VAR 0 5
83544: PPUSH
83545: LD_VAR 0 1
83549: PUSH
83550: LD_VAR 0 6
83554: ARRAY
83555: PPUSH
83556: CALL 78757 0 2
83560: ST_TO_ADDR
// end ;
83561: GO 83468
83563: POP
83564: POP
// end ;
83565: LD_VAR 0 5
83569: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83570: LD_INT 0
83572: PPUSH
// if not vehicles or not parkingPoint then
83573: LD_VAR 0 1
83577: NOT
83578: PUSH
83579: LD_VAR 0 2
83583: NOT
83584: OR
83585: IFFALSE 83589
// exit ;
83587: GO 83687
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83589: LD_ADDR_VAR 0 1
83593: PUSH
83594: LD_VAR 0 1
83598: PPUSH
83599: LD_INT 50
83601: PUSH
83602: EMPTY
83603: LIST
83604: PUSH
83605: LD_INT 3
83607: PUSH
83608: LD_INT 92
83610: PUSH
83611: LD_VAR 0 2
83615: PUSH
83616: LD_INT 1
83618: ARRAY
83619: PUSH
83620: LD_VAR 0 2
83624: PUSH
83625: LD_INT 2
83627: ARRAY
83628: PUSH
83629: LD_INT 8
83631: PUSH
83632: EMPTY
83633: LIST
83634: LIST
83635: LIST
83636: LIST
83637: PUSH
83638: EMPTY
83639: LIST
83640: LIST
83641: PUSH
83642: EMPTY
83643: LIST
83644: LIST
83645: PPUSH
83646: CALL_OW 72
83650: ST_TO_ADDR
// if not vehicles then
83651: LD_VAR 0 1
83655: NOT
83656: IFFALSE 83660
// exit ;
83658: GO 83687
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83660: LD_VAR 0 1
83664: PPUSH
83665: LD_VAR 0 2
83669: PUSH
83670: LD_INT 1
83672: ARRAY
83673: PPUSH
83674: LD_VAR 0 2
83678: PUSH
83679: LD_INT 2
83681: ARRAY
83682: PPUSH
83683: CALL_OW 111
// end ;
83687: LD_VAR 0 3
83691: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83692: LD_INT 0
83694: PPUSH
83695: PPUSH
83696: PPUSH
// if not side or not area then
83697: LD_VAR 0 1
83701: NOT
83702: PUSH
83703: LD_VAR 0 2
83707: NOT
83708: OR
83709: IFFALSE 83713
// exit ;
83711: GO 83832
// tmp := AreaToList ( area , 0 ) ;
83713: LD_ADDR_VAR 0 5
83717: PUSH
83718: LD_VAR 0 2
83722: PPUSH
83723: LD_INT 0
83725: PPUSH
83726: CALL_OW 517
83730: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83731: LD_ADDR_VAR 0 4
83735: PUSH
83736: DOUBLE
83737: LD_INT 1
83739: DEC
83740: ST_TO_ADDR
83741: LD_VAR 0 5
83745: PUSH
83746: LD_INT 1
83748: ARRAY
83749: PUSH
83750: FOR_TO
83751: IFFALSE 83830
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83753: LD_VAR 0 5
83757: PUSH
83758: LD_INT 1
83760: ARRAY
83761: PUSH
83762: LD_VAR 0 4
83766: ARRAY
83767: PPUSH
83768: LD_VAR 0 5
83772: PUSH
83773: LD_INT 2
83775: ARRAY
83776: PUSH
83777: LD_VAR 0 4
83781: ARRAY
83782: PPUSH
83783: CALL_OW 351
83787: IFFALSE 83828
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83789: LD_VAR 0 5
83793: PUSH
83794: LD_INT 1
83796: ARRAY
83797: PUSH
83798: LD_VAR 0 4
83802: ARRAY
83803: PPUSH
83804: LD_VAR 0 5
83808: PUSH
83809: LD_INT 2
83811: ARRAY
83812: PUSH
83813: LD_VAR 0 4
83817: ARRAY
83818: PPUSH
83819: LD_VAR 0 1
83823: PPUSH
83824: CALL_OW 244
// end ;
83828: GO 83750
83830: POP
83831: POP
// end ; end_of_file
83832: LD_VAR 0 3
83836: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83837: LD_VAR 0 1
83841: PUSH
83842: LD_INT 200
83844: DOUBLE
83845: GREATEREQUAL
83846: IFFALSE 83854
83848: LD_INT 299
83850: DOUBLE
83851: LESSEQUAL
83852: IFTRUE 83856
83854: GO 83888
83856: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83857: LD_VAR 0 1
83861: PPUSH
83862: LD_VAR 0 2
83866: PPUSH
83867: LD_VAR 0 3
83871: PPUSH
83872: LD_VAR 0 4
83876: PPUSH
83877: LD_VAR 0 5
83881: PPUSH
83882: CALL 36548 0 5
83886: GO 83965
83888: LD_INT 300
83890: DOUBLE
83891: GREATEREQUAL
83892: IFFALSE 83900
83894: LD_INT 399
83896: DOUBLE
83897: LESSEQUAL
83898: IFTRUE 83902
83900: GO 83964
83902: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83903: LD_VAR 0 1
83907: PPUSH
83908: LD_VAR 0 2
83912: PPUSH
83913: LD_VAR 0 3
83917: PPUSH
83918: LD_VAR 0 4
83922: PPUSH
83923: LD_VAR 0 5
83927: PPUSH
83928: LD_VAR 0 6
83932: PPUSH
83933: LD_VAR 0 7
83937: PPUSH
83938: LD_VAR 0 8
83942: PPUSH
83943: LD_VAR 0 9
83947: PPUSH
83948: LD_VAR 0 10
83952: PPUSH
83953: LD_VAR 0 11
83957: PPUSH
83958: CALL 32873 0 11
83962: GO 83965
83964: POP
// end ;
83965: PPOPN 11
83967: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83968: LD_VAR 0 1
83972: PPUSH
83973: LD_VAR 0 2
83977: PPUSH
83978: LD_VAR 0 3
83982: PPUSH
83983: LD_VAR 0 4
83987: PPUSH
83988: LD_VAR 0 5
83992: PPUSH
83993: CALL 36284 0 5
// end ; end_of_file
83997: PPOPN 5
83999: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84000: LD_VAR 0 1
84004: PPUSH
84005: LD_VAR 0 2
84009: PPUSH
84010: LD_VAR 0 3
84014: PPUSH
84015: LD_VAR 0 4
84019: PPUSH
84020: LD_VAR 0 5
84024: PPUSH
84025: LD_VAR 0 6
84029: PPUSH
84030: CALL 20525 0 6
// end ;
84034: PPOPN 6
84036: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84037: LD_INT 0
84039: PPUSH
// begin if not units then
84040: LD_VAR 0 1
84044: NOT
84045: IFFALSE 84049
// exit ;
84047: GO 84049
// end ;
84049: PPOPN 7
84051: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84052: CALL 20412 0 0
// end ;
84056: PPOPN 1
84058: END
