// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 97 0 0
// PrepareAmerican ;
  19: CALL 318 0 0
// PrepareRussian ;
  23: CALL 9262 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 77961 0 9
// if debug then
  79: LD_EXP 1
  83: IFFALSE 92
// FogOff ( 1 ) ;
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 344
// Action ;
  92: CALL 15692 0 0
// end ;
  96: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  97: LD_INT 0
  99: PPUSH
// debug := false ;
 100: LD_ADDR_EXP 1
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// if debug then
 108: LD_EXP 1
 112: IFFALSE 122
// Difficulty := 4 ;
 114: LD_ADDR_OWVAR 67
 118: PUSH
 119: LD_INT 4
 121: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
 122: LD_ADDR_EXP 13
 126: PUSH
 127: LD_STRING GammaCommander
 129: PPUSH
 130: LD_INT 3
 132: PPUSH
 133: CALL_OW 30
 137: ST_TO_ADDR
// waitingForSikorski := false ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// deltaSupport := false ;
 146: LD_ADDR_EXP 6
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seenComputer := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// jmmArrival := false ;
 162: LD_ADDR_EXP 8
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 170: LD_ADDR_EXP 3
 174: PUSH
 175: LD_INT 21000
 177: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 178: LD_ADDR_EXP 4
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// sikorskiStatus := 1 ;
 186: LD_ADDR_EXP 9
 190: PUSH
 191: LD_INT 1
 193: ST_TO_ADDR
// sikorskiIsKilled := false ;
 194: LD_ADDR_EXP 10
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// invincibleMode := false ;
 202: LD_ADDR_EXP 5
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// captureRocketCounter := 0 ;
 210: LD_ADDR_EXP 11
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// killMechCounter := 0 ;
 218: LD_ADDR_EXP 12
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 231: LD_INT 22
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 34
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 69
 259: PUSH
 260: LD_INT 6
 262: GREATEREQUAL
 263: IFFALSE 275
 265: GO 267
 267: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 268: LD_STRING ACH_ARMOR
 270: PPUSH
 271: CALL_OW 543
 275: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 276: LD_EXP 11
 280: PUSH
 281: LD_INT 3
 283: GREATEREQUAL
 284: IFFALSE 296
 286: GO 288
 288: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 289: LD_STRING ACH_TOOL
 291: PPUSH
 292: CALL_OW 543
 296: END
// every 0 0$1 trigger killMechCounter >= 10 do
 297: LD_EXP 12
 301: PUSH
 302: LD_INT 10
 304: GREATEREQUAL
 305: IFFALSE 317
 307: GO 309
 309: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 310: LD_STRING ACH_MECH
 312: PPUSH
 313: CALL_OW 543
 317: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 318: LD_INT 0
 320: PPUSH
 321: PPUSH
 322: PPUSH
 323: PPUSH
 324: PPUSH
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_side := 1 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 1
 343: ST_TO_ADDR
// uc_nation := 1 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 1
 351: ST_TO_ADDR
// PrepareGammaBase ;
 352: CALL 2481 0 0
// x := 52 ;
 356: LD_ADDR_VAR 0 13
 360: PUSH
 361: LD_INT 52
 363: ST_TO_ADDR
// y := 16 ;
 364: LD_ADDR_VAR 0 14
 368: PUSH
 369: LD_INT 16
 371: ST_TO_ADDR
// case gammaCommander of 1 :
 372: LD_EXP 13
 376: PUSH
 377: LD_INT 1
 379: DOUBLE
 380: EQUAL
 381: IFTRUE 385
 383: GO 470
 385: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 386: LD_ADDR_EXP 16
 390: PUSH
 391: LD_STRING Donaldson
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_STRING 04_
 399: PPUSH
 400: CALL 43120 0 3
 404: ST_TO_ADDR
// if HexInfo ( x , y ) then
 405: LD_VAR 0 13
 409: PPUSH
 410: LD_VAR 0 14
 414: PPUSH
 415: CALL_OW 428
 419: IFFALSE 437
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 421: LD_EXP 16
 425: PPUSH
 426: LD_EXP 31
 430: PPUSH
 431: CALL_OW 52
 435: GO 459
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 437: LD_EXP 16
 441: PPUSH
 442: LD_VAR 0 13
 446: PPUSH
 447: LD_VAR 0 14
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// ComHold ( Donaldson ) ;
 459: LD_EXP 16
 463: PPUSH
 464: CALL_OW 140
// end ; 2 :
 468: GO 657
 470: LD_INT 2
 472: DOUBLE
 473: EQUAL
 474: IFTRUE 478
 476: GO 563
 478: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 479: LD_ADDR_EXP 15
 483: PUSH
 484: LD_STRING Brown
 486: PPUSH
 487: LD_INT 1
 489: PPUSH
 490: LD_STRING 04_
 492: PPUSH
 493: CALL 43120 0 3
 497: ST_TO_ADDR
// if HexInfo ( x , y ) then
 498: LD_VAR 0 13
 502: PPUSH
 503: LD_VAR 0 14
 507: PPUSH
 508: CALL_OW 428
 512: IFFALSE 530
// PlaceHumanInUnit ( Brown , amDepot ) else
 514: LD_EXP 15
 518: PPUSH
 519: LD_EXP 31
 523: PPUSH
 524: CALL_OW 52
 528: GO 552
// PlaceUnitXY ( Brown , x , y , false ) ;
 530: LD_EXP 15
 534: PPUSH
 535: LD_VAR 0 13
 539: PPUSH
 540: LD_VAR 0 14
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 48
// ComHold ( Brown ) ;
 552: LD_EXP 15
 556: PPUSH
 557: CALL_OW 140
// end ; 3 :
 561: GO 657
 563: LD_INT 3
 565: DOUBLE
 566: EQUAL
 567: IFTRUE 571
 569: GO 656
 571: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 572: LD_ADDR_EXP 25
 576: PUSH
 577: LD_STRING VanHouten
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: LD_STRING 
 585: PPUSH
 586: CALL 43120 0 3
 590: ST_TO_ADDR
// if HexInfo ( x , y ) then
 591: LD_VAR 0 13
 595: PPUSH
 596: LD_VAR 0 14
 600: PPUSH
 601: CALL_OW 428
 605: IFFALSE 623
// PlaceHumanInUnit ( Houten , amDepot ) else
 607: LD_EXP 25
 611: PPUSH
 612: LD_EXP 31
 616: PPUSH
 617: CALL_OW 52
 621: GO 645
// PlaceUnitXY ( Houten , x , y , false ) ;
 623: LD_EXP 25
 627: PPUSH
 628: LD_VAR 0 13
 632: PPUSH
 633: LD_VAR 0 14
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 48
// ComHold ( Houten ) ;
 645: LD_EXP 25
 649: PPUSH
 650: CALL_OW 140
// end ; end ;
 654: GO 657
 656: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 657: LD_ADDR_EXP 29
 661: PUSH
 662: LD_STRING Harisson
 664: PPUSH
 665: LD_INT 0
 667: PPUSH
 668: LD_STRING 
 670: PPUSH
 671: CALL 43120 0 3
 675: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 676: LD_ADDR_EXP 30
 680: PUSH
 681: LD_STRING Powell
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_STRING 
 689: PPUSH
 690: CALL 43120 0 3
 694: ST_TO_ADDR
// tmp := [ ] ;
 695: LD_ADDR_VAR 0 4
 699: PUSH
 700: EMPTY
 701: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 702: LD_STRING 04_Lisa
 704: PUSH
 705: EMPTY
 706: LIST
 707: PPUSH
 708: CALL_OW 28
 712: IFFALSE 821
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 714: LD_STRING LisaInDelta
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 30
 724: NOT
 725: IFFALSE 740
 727: PUSH
 728: LD_STRING 07_Lisa
 730: PUSH
 731: EMPTY
 732: LIST
 733: PPUSH
 734: CALL_OW 28
 738: NOT
 739: AND
 740: IFFALSE 763
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 742: LD_ADDR_EXP 19
 746: PUSH
 747: LD_STRING Lisa
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_STRING 04_
 755: PPUSH
 756: CALL 43120 0 3
 760: ST_TO_ADDR
 761: GO 795
// if not LoadVariable ( LisaIn07 , false ) then
 763: LD_STRING LisaIn07
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: IFFALSE 795
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 776: LD_ADDR_EXP 19
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 07_
 789: PPUSH
 790: CALL 43120 0 3
 794: ST_TO_ADDR
// if Lisa then
 795: LD_EXP 19
 799: IFFALSE 821
// tmp2 := Join ( tmp2 , Lisa ) ;
 801: LD_ADDR_VAR 0 5
 805: PUSH
 806: LD_VAR 0 5
 810: PPUSH
 811: LD_EXP 19
 815: PPUSH
 816: CALL 81310 0 2
 820: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 821: LD_STRING 04_Bobby
 823: PUSH
 824: EMPTY
 825: LIST
 826: PPUSH
 827: CALL_OW 28
 831: IFFALSE 940
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 833: LD_STRING BobbyInDelta
 835: PPUSH
 836: LD_INT 0
 838: PPUSH
 839: CALL_OW 30
 843: NOT
 844: IFFALSE 859
 846: PUSH
 847: LD_STRING 07_Bobby
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 882
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 861: LD_ADDR_EXP 17
 865: PUSH
 866: LD_STRING Bobby
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 43120 0 3
 879: ST_TO_ADDR
 880: GO 914
// if not LoadVariable ( BobbyIn07 , false ) then
 882: LD_STRING BobbyIn07
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 30
 892: NOT
 893: IFFALSE 914
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 895: LD_ADDR_EXP 17
 899: PUSH
 900: LD_STRING Bobby
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_STRING 07_
 908: PPUSH
 909: CALL 43120 0 3
 913: ST_TO_ADDR
// if Bobby then
 914: LD_EXP 17
 918: IFFALSE 940
// tmp2 := Join ( tmp2 , Bobby ) ;
 920: LD_ADDR_VAR 0 5
 924: PUSH
 925: LD_VAR 0 5
 929: PPUSH
 930: LD_EXP 17
 934: PPUSH
 935: CALL 81310 0 2
 939: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 940: LD_STRING 04_Cyrus
 942: PUSH
 943: EMPTY
 944: LIST
 945: PPUSH
 946: CALL_OW 28
 950: IFFALSE 1059
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 952: LD_STRING CyrusInDelta
 954: PPUSH
 955: LD_INT 0
 957: PPUSH
 958: CALL_OW 30
 962: NOT
 963: IFFALSE 978
 965: PUSH
 966: LD_STRING 07_Cyrus
 968: PUSH
 969: EMPTY
 970: LIST
 971: PPUSH
 972: CALL_OW 28
 976: NOT
 977: AND
 978: IFFALSE 1001
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 980: LD_ADDR_EXP 18
 984: PUSH
 985: LD_STRING Cyrus
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_STRING 04_
 993: PPUSH
 994: CALL 43120 0 3
 998: ST_TO_ADDR
 999: GO 1033
// if not LoadVariable ( CyrusIn07 , false ) then
1001: LD_STRING CyrusIn07
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 30
1011: NOT
1012: IFFALSE 1033
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1014: LD_ADDR_EXP 18
1018: PUSH
1019: LD_STRING Cyrus
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: LD_STRING 07_
1027: PPUSH
1028: CALL 43120 0 3
1032: ST_TO_ADDR
// if Cyrus then
1033: LD_EXP 18
1037: IFFALSE 1059
// tmp2 := Join ( tmp2 , Cyrus ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_VAR 0 5
1048: PPUSH
1049: LD_EXP 18
1053: PPUSH
1054: CALL 81310 0 2
1058: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1059: LD_STRING 04_Brown
1061: PUSH
1062: EMPTY
1063: LIST
1064: PPUSH
1065: CALL_OW 28
1069: IFFALSE 1084
1071: PUSH
1072: LD_STRING BrownInDelta
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 30
1082: NOT
1083: AND
1084: IFFALSE 1099
1086: PUSH
1087: LD_STRING 07_Brown
1089: PUSH
1090: EMPTY
1091: LIST
1092: PPUSH
1093: CALL_OW 28
1097: NOT
1098: AND
1099: IFFALSE 1111
1101: PUSH
1102: LD_EXP 13
1106: PUSH
1107: LD_INT 2
1109: NONEQUAL
1110: AND
1111: IFFALSE 1154
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1113: LD_ADDR_EXP 15
1117: PUSH
1118: LD_STRING Brown
1120: PPUSH
1121: LD_INT 1
1123: PPUSH
1124: LD_STRING 04_
1126: PPUSH
1127: CALL 43120 0 3
1131: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1132: LD_ADDR_VAR 0 5
1136: PUSH
1137: LD_VAR 0 5
1141: PPUSH
1142: LD_EXP 15
1146: PPUSH
1147: CALL 81310 0 2
1151: ST_TO_ADDR
// end else
1152: GO 1218
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1154: LD_STRING BrownIn07
1156: PPUSH
1157: LD_INT 0
1159: PPUSH
1160: CALL_OW 30
1164: NOT
1165: IFFALSE 1177
1167: PUSH
1168: LD_EXP 13
1172: PUSH
1173: LD_INT 2
1175: NONEQUAL
1176: AND
1177: IFFALSE 1218
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1179: LD_ADDR_EXP 15
1183: PUSH
1184: LD_STRING Brown
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_STRING 07_
1192: PPUSH
1193: CALL 43120 0 3
1197: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1198: LD_ADDR_VAR 0 5
1202: PUSH
1203: LD_VAR 0 5
1207: PPUSH
1208: LD_EXP 15
1212: PPUSH
1213: CALL 81310 0 2
1217: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1218: LD_STRING 04_Donaldson
1220: PUSH
1221: EMPTY
1222: LIST
1223: PPUSH
1224: CALL_OW 28
1228: IFFALSE 1243
1230: PUSH
1231: LD_STRING DonaldsonInDelta
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 30
1241: NOT
1242: AND
1243: IFFALSE 1258
1245: PUSH
1246: LD_STRING 07_Donaldson
1248: PUSH
1249: EMPTY
1250: LIST
1251: PPUSH
1252: CALL_OW 28
1256: NOT
1257: AND
1258: IFFALSE 1270
1260: PUSH
1261: LD_EXP 13
1265: PUSH
1266: LD_INT 1
1268: NONEQUAL
1269: AND
1270: IFFALSE 1313
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1272: LD_ADDR_EXP 16
1276: PUSH
1277: LD_STRING Donaldson
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_STRING 04_
1285: PPUSH
1286: CALL 43120 0 3
1290: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1291: LD_ADDR_VAR 0 5
1295: PUSH
1296: LD_VAR 0 5
1300: PPUSH
1301: LD_EXP 16
1305: PPUSH
1306: CALL 81310 0 2
1310: ST_TO_ADDR
// end else
1311: GO 1377
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1313: LD_STRING DonaldsonIn07
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 30
1323: NOT
1324: IFFALSE 1336
1326: PUSH
1327: LD_EXP 13
1331: PUSH
1332: LD_INT 1
1334: NONEQUAL
1335: AND
1336: IFFALSE 1377
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1338: LD_ADDR_EXP 16
1342: PUSH
1343: LD_STRING Donaldson
1345: PPUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_STRING 07_
1351: PPUSH
1352: CALL 43120 0 3
1356: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1357: LD_ADDR_VAR 0 5
1361: PUSH
1362: LD_VAR 0 5
1366: PPUSH
1367: LD_EXP 16
1371: PPUSH
1372: CALL 81310 0 2
1376: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1377: LD_STRING KhatamIn07
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 30
1387: NOT
1388: IFFALSE 1429
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1390: LD_ADDR_EXP 23
1394: PUSH
1395: LD_STRING Khatam
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 07_
1403: PPUSH
1404: CALL 43120 0 3
1408: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1409: LD_ADDR_VAR 0 5
1413: PUSH
1414: LD_VAR 0 5
1418: PPUSH
1419: LD_EXP 23
1423: PPUSH
1424: CALL 81310 0 2
1428: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1429: LD_ADDR_VAR 0 6
1433: PUSH
1434: LD_STRING 07_othersGamma
1436: PPUSH
1437: CALL_OW 31
1441: ST_TO_ADDR
// tmp := 5 - others ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 5
1449: PUSH
1450: LD_VAR 0 6
1454: MINUS
1455: ST_TO_ADDR
// if tmp then
1456: LD_VAR 0 4
1460: IFFALSE 1517
// for i := tmp downto 1 do
1462: LD_ADDR_VAR 0 2
1466: PUSH
1467: DOUBLE
1468: LD_VAR 0 4
1472: INC
1473: ST_TO_ADDR
1474: LD_INT 1
1476: PUSH
1477: FOR_DOWNTO
1478: IFFALSE 1515
// begin PrepareHuman ( false , 1 , 5 ) ;
1480: LD_INT 0
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1493: LD_ADDR_VAR 0 6
1497: PUSH
1498: LD_VAR 0 6
1502: PPUSH
1503: CALL_OW 44
1507: PPUSH
1508: CALL 81310 0 2
1512: ST_TO_ADDR
// end ;
1513: GO 1477
1515: POP
1516: POP
// for i in others do
1517: LD_ADDR_VAR 0 2
1521: PUSH
1522: LD_VAR 0 6
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1544
// SetTag ( i , 106 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: LD_INT 106
1537: PPUSH
1538: CALL_OW 109
1542: GO 1527
1544: POP
1545: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1546: LD_ADDR_VAR 0 8
1550: PUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 30
1563: PUSH
1564: LD_INT 31
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: ST_TO_ADDR
// for i in bun do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: LD_VAR 0 8
1589: PUSH
1590: FOR_IN
1591: IFFALSE 1723
// begin x := GetX ( i ) ;
1593: LD_ADDR_VAR 0 13
1597: PUSH
1598: LD_VAR 0 2
1602: PPUSH
1603: CALL_OW 250
1607: ST_TO_ADDR
// y := GetY ( i ) ;
1608: LD_ADDR_VAR 0 14
1612: PUSH
1613: LD_VAR 0 2
1617: PPUSH
1618: CALL_OW 251
1622: ST_TO_ADDR
// d := GetDir ( i ) ;
1623: LD_ADDR_VAR 0 15
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: CALL_OW 254
1637: ST_TO_ADDR
// RemoveUnit ( i ) ;
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 64
// bc_type := b_bunker ;
1647: LD_ADDR_OWVAR 42
1651: PUSH
1652: LD_INT 32
1654: ST_TO_ADDR
// bc_level := 6 ;
1655: LD_ADDR_OWVAR 43
1659: PUSH
1660: LD_INT 6
1662: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1663: LD_ADDR_VAR 0 16
1667: PUSH
1668: LD_VAR 0 13
1672: PPUSH
1673: LD_VAR 0 14
1677: PPUSH
1678: LD_VAR 0 15
1682: PPUSH
1683: CALL_OW 47
1687: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1688: LD_VAR 0 16
1692: PPUSH
1693: LD_INT 5
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_VAR 0 2
1707: PUSH
1708: LD_INT 2
1710: MOD
1711: PUSH
1712: LD_INT 1
1714: PLUS
1715: ARRAY
1716: PPUSH
1717: CALL_OW 431
// end ;
1721: GO 1590
1723: POP
1724: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1725: LD_ADDR_VAR 0 7
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 30
1742: PUSH
1743: LD_INT 5
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PPUSH
1754: CALL_OW 69
1758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1759: LD_ADDR_VAR 0 9
1763: PUSH
1764: LD_INT 22
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 6
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 30
1789: PUSH
1790: LD_INT 7
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 8
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PPUSH
1817: CALL_OW 69
1821: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1822: LD_ADDR_VAR 0 10
1826: PUSH
1827: LD_INT 22
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 3
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PPUSH
1851: CALL_OW 69
1855: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1856: LD_ADDR_VAR 0 11
1860: PUSH
1861: LD_INT 22
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 30
1873: PUSH
1874: LD_INT 36
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PPUSH
1885: CALL_OW 69
1889: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1890: LD_ADDR_VAR 0 8
1894: PUSH
1895: LD_INT 22
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: LD_INT 30
1910: PUSH
1911: LD_INT 31
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 30
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PPUSH
1937: CALL_OW 69
1941: ST_TO_ADDR
// for i in others union tmp2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 6
1951: PUSH
1952: LD_VAR 0 5
1956: UNION
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2403
// begin placed := false ;
1961: LD_ADDR_VAR 0 12
1965: PUSH
1966: LD_INT 0
1968: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1969: LD_VAR 0 2
1973: PPUSH
1974: CALL_OW 257
1978: PUSH
1979: LD_INT 1
1981: EQUAL
1982: IFFALSE 2109
// begin if UnitFilter ( bun , [ f_empty ] ) then
1984: LD_VAR 0 8
1988: PPUSH
1989: LD_INT 58
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 72
1999: IFFALSE 2038
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2001: LD_VAR 0 2
2005: PPUSH
2006: LD_VAR 0 8
2010: PPUSH
2011: LD_INT 58
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 72
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 52
// placed := true ;
2030: LD_ADDR_VAR 0 12
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// end ; if arm and not placed then
2038: LD_VAR 0 7
2042: IFFALSE 2051
2044: PUSH
2045: LD_VAR 0 12
2049: NOT
2050: AND
2051: IFFALSE 2109
// begin for j in arm do
2053: LD_ADDR_VAR 0 3
2057: PUSH
2058: LD_VAR 0 7
2062: PUSH
2063: FOR_IN
2064: IFFALSE 2107
// if UnitsInside ( j ) < 6 then
2066: LD_VAR 0 3
2070: PPUSH
2071: CALL_OW 313
2075: PUSH
2076: LD_INT 6
2078: LESS
2079: IFFALSE 2105
// begin PlaceHumanInUnit ( i , j ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_VAR 0 3
2090: PPUSH
2091: CALL_OW 52
// placed := true ;
2095: LD_ADDR_VAR 0 12
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// break ;
2103: GO 2107
// end ;
2105: GO 2063
2107: POP
2108: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 2
2121: EQUAL
2122: IFFALSE 2155
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 52
2131: PPUSH
2132: LD_INT 20
2134: PPUSH
2135: LD_INT 6
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL_OW 50
// placed := true ;
2145: LD_ADDR_VAR 0 12
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// continue ;
2153: GO 1958
// end ; if GetClass ( i ) = class_mechanic then
2155: LD_VAR 0 2
2159: PPUSH
2160: CALL_OW 257
2164: PUSH
2165: LD_INT 3
2167: EQUAL
2168: IFFALSE 2293
// begin if fac then
2170: LD_VAR 0 10
2174: IFFALSE 2293
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2176: LD_VAR 0 11
2180: IFFALSE 2201
2182: PUSH
2183: LD_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 313
2196: PUSH
2197: LD_INT 3
2199: LESS
2200: AND
2201: IFFALSE 2229
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2203: LD_VAR 0 2
2207: PPUSH
2208: LD_VAR 0 11
2212: PUSH
2213: LD_INT 1
2215: ARRAY
2216: PPUSH
2217: CALL_OW 52
// placed := true ;
2221: LD_ADDR_VAR 0 12
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// end ; if placed then
2229: LD_VAR 0 12
2233: IFFALSE 2237
// continue ;
2235: GO 1958
// for j in fac do
2237: LD_ADDR_VAR 0 3
2241: PUSH
2242: LD_VAR 0 10
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2291
// if UnitsInside ( j ) < 6 then
2250: LD_VAR 0 3
2254: PPUSH
2255: CALL_OW 313
2259: PUSH
2260: LD_INT 6
2262: LESS
2263: IFFALSE 2289
// begin PlaceHumanInUnit ( i , j ) ;
2265: LD_VAR 0 2
2269: PPUSH
2270: LD_VAR 0 3
2274: PPUSH
2275: CALL_OW 52
// placed := true ;
2279: LD_ADDR_VAR 0 12
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// break ;
2287: GO 2291
// end ;
2289: GO 2247
2291: POP
2292: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 4
2305: EQUAL
2306: IFFALSE 2370
// begin if lab then
2308: LD_VAR 0 9
2312: IFFALSE 2370
// begin for j in lab do
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_VAR 0 9
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2368
// if UnitsInside ( j ) < 6 then
2327: LD_VAR 0 3
2331: PPUSH
2332: CALL_OW 313
2336: PUSH
2337: LD_INT 6
2339: LESS
2340: IFFALSE 2366
// begin PlaceHumanInUnit ( i , j ) ;
2342: LD_VAR 0 2
2346: PPUSH
2347: LD_VAR 0 3
2351: PPUSH
2352: CALL_OW 52
// placed := true ;
2356: LD_ADDR_VAR 0 12
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// break ;
2364: GO 2368
// end ;
2366: GO 2324
2368: POP
2369: POP
// end ; end ; if not placed then
2370: LD_VAR 0 12
2374: NOT
2375: IFFALSE 2401
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2377: LD_VAR 0 2
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: CALL_OW 49
// ComHold ( i ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 140
// end ; end ;
2401: GO 1958
2403: POP
2404: POP
// if ct then
2405: LD_VAR 0 11
2409: IFFALSE 2476
// if UnitsInside ( ct [ 1 ] ) then
2411: LD_VAR 0 11
2415: PUSH
2416: LD_INT 1
2418: ARRAY
2419: PPUSH
2420: CALL_OW 313
2424: IFFALSE 2476
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_INT 22
2433: PUSH
2434: LD_INT 1
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 33
2443: PUSH
2444: LD_INT 2
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PPUSH
2455: CALL_OW 69
2459: PUSH
2460: FOR_IN
2461: IFFALSE 2474
// Connect ( i ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL 51622 0 1
2472: GO 2460
2474: POP
2475: POP
// end ; end ;
2476: LD_VAR 0 1
2480: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2489: LD_INT 71
2491: PPUSH
2492: LD_INT 5
2494: PPUSH
2495: LD_INT 1
2497: PPUSH
2498: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2502: LD_ADDR_VAR 0 2
2506: PUSH
2507: LD_STRING GammaBase
2509: PPUSH
2510: EMPTY
2511: PPUSH
2512: CALL_OW 30
2516: ST_TO_ADDR
// if not blist then
2517: LD_VAR 0 2
2521: NOT
2522: IFFALSE 2562
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2524: LD_ADDR_VAR 0 2
2528: PUSH
2529: LD_INT 1
2531: PUSH
2532: LD_INT 52
2534: PUSH
2535: LD_INT 12
2537: PUSH
2538: LD_INT 3
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: LD_INT 0
2546: PUSH
2547: LD_INT 0
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: PUSH
2559: EMPTY
2560: LIST
2561: ST_TO_ADDR
// uc_side := 1 ;
2562: LD_ADDR_OWVAR 20
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// uc_nation := 1 ;
2570: LD_ADDR_OWVAR 21
2574: PUSH
2575: LD_INT 1
2577: ST_TO_ADDR
// for i in blist do
2578: LD_ADDR_VAR 0 3
2582: PUSH
2583: LD_VAR 0 2
2587: PUSH
2588: FOR_IN
2589: IFFALSE 2867
// begin InitBc ;
2591: CALL_OW 21
// bc_type := i [ 1 ] ;
2595: LD_ADDR_OWVAR 42
2599: PUSH
2600: LD_VAR 0 3
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2609: LD_ADDR_OWVAR 43
2613: PUSH
2614: LD_VAR 0 3
2618: PUSH
2619: LD_INT 5
2621: ARRAY
2622: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2623: LD_OWVAR 42
2627: PUSH
2628: LD_INT 6
2630: PUSH
2631: LD_INT 7
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: IN
2638: IFFALSE 2702
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2640: LD_STRING 06_remoteVehs_1
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 30
2650: IFFALSE 2678
// begin bc_type := b_lab_full ;
2652: LD_ADDR_OWVAR 42
2656: PUSH
2657: LD_INT 8
2659: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2660: LD_ADDR_OWVAR 44
2664: PUSH
2665: LD_INT 10
2667: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2668: LD_ADDR_OWVAR 45
2672: PUSH
2673: LD_INT 15
2675: ST_TO_ADDR
// end else
2676: GO 2702
// begin bc_type := b_lab_half ;
2678: LD_ADDR_OWVAR 42
2682: PUSH
2683: LD_INT 7
2685: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2686: LD_ADDR_OWVAR 44
2690: PUSH
2691: LD_INT 10
2693: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2694: LD_ADDR_OWVAR 45
2698: PUSH
2699: LD_INT 9
2701: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2702: LD_OWVAR 42
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: IFFALSE 2720
// bc_type := b_factory ;
2712: LD_ADDR_OWVAR 42
2716: PUSH
2717: LD_INT 3
2719: ST_TO_ADDR
// if bc_type = b_depot then
2720: LD_OWVAR 42
2724: PUSH
2725: LD_INT 0
2727: EQUAL
2728: IFFALSE 2777
// begin bc_type := b_warehouse ;
2730: LD_ADDR_OWVAR 42
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2738: LD_ADDR_EXP 31
2742: PUSH
2743: LD_VAR 0 3
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 3
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 3
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 47
2774: ST_TO_ADDR
// continue ;
2775: GO 2588
// end ; if bc_type = b_armoury then
2777: LD_OWVAR 42
2781: PUSH
2782: LD_INT 4
2784: EQUAL
2785: IFFALSE 2795
// bc_type = b_barracks ;
2787: LD_ADDR_OWVAR 42
2791: PUSH
2792: LD_INT 5
2794: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2795: LD_ADDR_VAR 0 4
2799: PUSH
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 2
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 3
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 4
2825: ARRAY
2826: PPUSH
2827: CALL_OW 47
2831: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2832: LD_VAR 0 4
2836: PPUSH
2837: CALL_OW 266
2841: PUSH
2842: LD_INT 32
2844: EQUAL
2845: IFFALSE 2865
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2847: LD_VAR 0 4
2851: PPUSH
2852: LD_VAR 0 3
2856: PUSH
2857: LD_INT 7
2859: ARRAY
2860: PPUSH
2861: CALL_OW 431
// end ;
2865: GO 2588
2867: POP
2868: POP
// if not amDepot then
2869: LD_EXP 31
2873: NOT
2874: IFFALSE 2911
// begin bc_type := b_warehouse ;
2876: LD_ADDR_OWVAR 42
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// bc_level := 6 ;
2884: LD_ADDR_OWVAR 43
2888: PUSH
2889: LD_INT 6
2891: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2892: LD_ADDR_EXP 31
2896: PUSH
2897: LD_INT 52
2899: PPUSH
2900: LD_INT 12
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL_OW 47
2910: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2911: LD_ADDR_OWVAR 42
2915: PUSH
2916: LD_INT 5
2918: ST_TO_ADDR
// bc_level := 6 ;
2919: LD_ADDR_OWVAR 43
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2927: LD_INT 61
2929: PPUSH
2930: LD_INT 29
2932: PPUSH
2933: LD_INT 5
2935: PPUSH
2936: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2940: LD_EXP 31
2944: PPUSH
2945: LD_STRING gamma
2947: PPUSH
2948: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2952: LD_EXP 31
2956: PPUSH
2957: CALL_OW 274
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: LD_INT 400
2967: PUSH
2968: LD_INT 320
2970: PUSH
2971: LD_INT 270
2973: PUSH
2974: LD_INT 230
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PPUSH
2989: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2993: LD_EXP 31
2997: PPUSH
2998: CALL_OW 274
3002: PPUSH
3003: LD_INT 2
3005: PPUSH
3006: LD_INT 130
3008: PPUSH
3009: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3013: LD_INT 22
3015: PUSH
3016: LD_INT 1
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 30
3025: PUSH
3026: LD_INT 3
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: IFFALSE 3289
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3043: LD_ADDR_VAR 0 4
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 30
3060: PUSH
3061: LD_INT 3
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3081: LD_ADDR_VAR 0 6
3085: PUSH
3086: LD_VAR 0 4
3090: PPUSH
3091: CALL_OW 250
3095: PPUSH
3096: LD_VAR 0 4
3100: PPUSH
3101: CALL_OW 251
3105: PPUSH
3106: LD_VAR 0 4
3110: PPUSH
3111: CALL_OW 254
3115: PPUSH
3116: CALL 78920 0 3
3120: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3121: LD_ADDR_VAR 0 2
3125: PUSH
3126: LD_INT 19
3128: PUSH
3129: LD_INT 17
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3136: LD_STRING 06_remoteVehs_1
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 30
3146: IFFALSE 3169
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 2
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: LD_INT 22
3163: PPUSH
3164: CALL_OW 2
3168: ST_TO_ADDR
// for i in tmp do
3169: LD_ADDR_VAR 0 3
3173: PUSH
3174: LD_VAR 0 6
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3287
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3182: LD_VAR 0 3
3186: PUSH
3187: LD_INT 1
3189: ARRAY
3190: PPUSH
3191: LD_VAR 0 3
3195: PUSH
3196: LD_INT 2
3198: ARRAY
3199: PPUSH
3200: CALL_OW 428
3204: PUSH
3205: LD_INT 0
3207: EQUAL
3208: IFFALSE 3285
// begin bc_type := blist [ 1 ] ;
3210: LD_ADDR_OWVAR 42
3214: PUSH
3215: LD_VAR 0 2
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3224: LD_VAR 0 3
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PPUSH
3233: LD_VAR 0 3
3237: PUSH
3238: LD_INT 2
3240: ARRAY
3241: PPUSH
3242: LD_VAR 0 3
3246: PUSH
3247: LD_INT 3
3249: ARRAY
3250: PPUSH
3251: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_VAR 0 2
3264: PPUSH
3265: LD_INT 1
3267: PPUSH
3268: CALL_OW 3
3272: ST_TO_ADDR
// if blist = 0 then
3273: LD_VAR 0 2
3277: PUSH
3278: LD_INT 0
3280: EQUAL
3281: IFFALSE 3285
// break ;
3283: GO 3287
// end ;
3285: GO 3179
3287: POP
3288: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3289: LD_STRING 06_remoteVehs_1
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3758
// begin bc_type := b_control_tower ;
3301: LD_ADDR_OWVAR 42
3305: PUSH
3306: LD_INT 36
3308: ST_TO_ADDR
// bc_level := 4 ;
3309: LD_ADDR_OWVAR 43
3313: PUSH
3314: LD_INT 4
3316: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3317: LD_EXP 31
3321: PPUSH
3322: LD_INT 36
3324: PPUSH
3325: LD_INT 62
3327: PPUSH
3328: LD_INT 12
3330: PPUSH
3331: LD_INT 3
3333: PPUSH
3334: CALL 56818 0 5
3338: IFFALSE 3365
3340: PUSH
3341: LD_INT 92
3343: PUSH
3344: LD_INT 62
3346: PUSH
3347: LD_INT 12
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: NOT
3364: AND
3365: IFFALSE 3382
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3367: LD_INT 62
3369: PPUSH
3370: LD_INT 12
3372: PPUSH
3373: LD_INT 3
3375: PPUSH
3376: CALL_OW 47
3380: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3382: LD_EXP 31
3386: PPUSH
3387: LD_INT 36
3389: PPUSH
3390: LD_INT 37
3392: PPUSH
3393: LD_INT 18
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: CALL 56818 0 5
3403: IFFALSE 3430
3405: PUSH
3406: LD_INT 92
3408: PUSH
3409: LD_INT 37
3411: PUSH
3412: LD_INT 18
3414: PUSH
3415: LD_INT 3
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: NOT
3429: AND
3430: IFFALSE 3447
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3432: LD_INT 37
3434: PPUSH
3435: LD_INT 18
3437: PPUSH
3438: LD_INT 2
3440: PPUSH
3441: CALL_OW 47
3445: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3447: LD_EXP 31
3451: PPUSH
3452: LD_INT 36
3454: PPUSH
3455: LD_INT 66
3457: PPUSH
3458: LD_INT 14
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: CALL 56818 0 5
3468: IFFALSE 3495
3470: PUSH
3471: LD_INT 92
3473: PUSH
3474: LD_INT 66
3476: PUSH
3477: LD_INT 14
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PPUSH
3489: CALL_OW 69
3493: NOT
3494: AND
3495: IFFALSE 3512
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3497: LD_INT 66
3499: PPUSH
3500: LD_INT 14
3502: PPUSH
3503: LD_INT 4
3505: PPUSH
3506: CALL_OW 47
3510: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3512: LD_EXP 31
3516: PPUSH
3517: LD_INT 36
3519: PPUSH
3520: LD_INT 74
3522: PPUSH
3523: LD_INT 26
3525: PPUSH
3526: LD_INT 4
3528: PPUSH
3529: CALL 56818 0 5
3533: IFFALSE 3548
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3535: LD_INT 74
3537: PPUSH
3538: LD_INT 26
3540: PPUSH
3541: LD_INT 4
3543: PPUSH
3544: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3548: LD_INT 22
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 30
3560: PUSH
3561: LD_INT 36
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PPUSH
3572: CALL_OW 69
3576: NOT
3577: IFFALSE 3581
// exit ;
3579: GO 4106
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: DOUBLE
3587: LD_INT 1
3589: DEC
3590: ST_TO_ADDR
3591: LD_INT 3
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 2
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: PUSH
3609: LD_OWVAR 67
3613: ARRAY
3614: PUSH
3615: FOR_TO
3616: IFFALSE 3756
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3618: LD_ADDR_OWVAR 37
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 1
3635: PPUSH
3636: LD_INT 2
3638: PPUSH
3639: CALL_OW 12
3643: ARRAY
3644: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3645: LD_ADDR_OWVAR 39
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 1
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: CALL_OW 12
3670: ARRAY
3671: ST_TO_ADDR
// vc_control := control_remote ;
3672: LD_ADDR_OWVAR 38
3676: PUSH
3677: LD_INT 2
3679: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3680: LD_ADDR_OWVAR 40
3684: PUSH
3685: LD_INT 4
3687: PUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 1
3701: PPUSH
3702: LD_INT 3
3704: PPUSH
3705: CALL_OW 12
3709: ARRAY
3710: ST_TO_ADDR
// veh := CreateVehicle ;
3711: LD_ADDR_VAR 0 5
3715: PUSH
3716: CALL_OW 45
3720: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3721: LD_VAR 0 5
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3733: LD_VAR 0 5
3737: PPUSH
3738: LD_INT 61
3740: PPUSH
3741: LD_INT 23
3743: PPUSH
3744: LD_INT 9
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: CALL_OW 50
// end ;
3754: GO 3615
3756: POP
3757: POP
// end ; if gammaCommander = 1 then
3758: LD_EXP 13
3762: PUSH
3763: LD_INT 1
3765: EQUAL
3766: IFFALSE 3943
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 3
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PUSH
3802: FOR_TO
3803: IFFALSE 3939
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3805: LD_ADDR_OWVAR 37
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3832: LD_ADDR_OWVAR 39
3836: PUSH
3837: LD_INT 1
3839: PUSH
3840: LD_INT 2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 1
3849: PPUSH
3850: LD_INT 2
3852: PPUSH
3853: CALL_OW 12
3857: ARRAY
3858: ST_TO_ADDR
// vc_control := control_manual ;
3859: LD_ADDR_OWVAR 38
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3867: LD_ADDR_OWVAR 40
3871: PUSH
3872: LD_INT 4
3874: PUSH
3875: LD_INT 5
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 12
3892: ARRAY
3893: ST_TO_ADDR
// veh := CreateVehicle ;
3894: LD_ADDR_VAR 0 5
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3904: LD_VAR 0 5
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3916: LD_VAR 0 5
3920: PPUSH
3921: LD_INT 61
3923: PPUSH
3924: LD_INT 23
3926: PPUSH
3927: LD_INT 9
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 50
// end ;
3937: GO 3802
3939: POP
3940: POP
// end else
3941: GO 4106
// if gammaCommander = 2 then
3943: LD_EXP 13
3947: PUSH
3948: LD_INT 2
3950: EQUAL
3951: IFFALSE 4106
// begin bc_type := b_bunker ;
3953: LD_ADDR_OWVAR 42
3957: PUSH
3958: LD_INT 32
3960: ST_TO_ADDR
// bc_level := 6 ;
3961: LD_ADDR_OWVAR 43
3965: PUSH
3966: LD_INT 6
3968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 67
3976: PPUSH
3977: LD_INT 36
3979: PPUSH
3980: LD_INT 5
3982: PPUSH
3983: CALL_OW 47
3987: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_INT 4
3995: PPUSH
3996: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_INT 61
4007: PPUSH
4008: LD_INT 40
4010: PPUSH
4011: LD_INT 5
4013: PPUSH
4014: CALL_OW 47
4018: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
4019: LD_VAR 0 4
4023: PPUSH
4024: LD_INT 5
4026: PPUSH
4027: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
4031: LD_ADDR_OWVAR 37
4035: PUSH
4036: LD_INT 2
4038: ST_TO_ADDR
// vc_engine := engine_combustion ;
4039: LD_ADDR_OWVAR 39
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// vc_control := control_manual ;
4047: LD_ADDR_OWVAR 38
4051: PUSH
4052: LD_INT 1
4054: ST_TO_ADDR
// vc_weapon := us_crane ;
4055: LD_ADDR_OWVAR 40
4059: PUSH
4060: LD_INT 13
4062: ST_TO_ADDR
// veh := CreateVehicle ;
4063: LD_ADDR_VAR 0 5
4067: PUSH
4068: CALL_OW 45
4072: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4073: LD_VAR 0 5
4077: PPUSH
4078: LD_INT 3
4080: PPUSH
4081: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4085: LD_VAR 0 5
4089: PPUSH
4090: LD_INT 61
4092: PPUSH
4093: LD_INT 23
4095: PPUSH
4096: LD_INT 9
4098: PPUSH
4099: LD_INT 0
4101: PPUSH
4102: CALL_OW 50
// end ; end ;
4106: LD_VAR 0 1
4110: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4111: LD_INT 0
4113: PPUSH
4114: PPUSH
4115: PPUSH
4116: PPUSH
// uc_side := 1 ;
4117: LD_ADDR_OWVAR 20
4121: PUSH
4122: LD_INT 1
4124: ST_TO_ADDR
// uc_nation := 1 ;
4125: LD_ADDR_OWVAR 21
4129: PUSH
4130: LD_INT 1
4132: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4133: LD_ADDR_EXP 26
4137: PUSH
4138: LD_STRING Denis
4140: PPUSH
4141: LD_EXP 1
4145: NOT
4146: PPUSH
4147: LD_STRING 06c_
4149: PPUSH
4150: CALL 43120 0 3
4154: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4155: LD_EXP 26
4159: PPUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4170: LD_ADDR_EXP 27
4174: PUSH
4175: LD_STRING Joan
4177: PPUSH
4178: LD_EXP 1
4182: NOT
4183: PPUSH
4184: LD_STRING 06c_
4186: PPUSH
4187: CALL 43120 0 3
4191: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4192: LD_EXP 27
4196: PPUSH
4197: LD_INT 4
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4207: LD_ADDR_EXP 24
4211: PUSH
4212: LD_STRING Mike
4214: PPUSH
4215: LD_EXP 1
4219: NOT
4220: PPUSH
4221: LD_STRING 06c_
4223: PPUSH
4224: CALL 43120 0 3
4228: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4229: LD_EXP 24
4233: PPUSH
4234: LD_INT 4
4236: PPUSH
4237: LD_INT 0
4239: PPUSH
4240: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4244: LD_STRING GladstoneIn07
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 30
4254: NOT
4255: IFFALSE 4337
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4257: LD_ADDR_EXP 21
4261: PUSH
4262: LD_STRING Gladstone
4264: PPUSH
4265: LD_EXP 1
4269: NOT
4270: PPUSH
4271: LD_STRING 06c_
4273: PPUSH
4274: CALL 43120 0 3
4278: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4279: LD_EXP 21
4283: NOT
4284: IFFALSE 4298
4286: PUSH
4287: LD_STRING GladstoneStayInDelta
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 30
4297: AND
4298: IFFALSE 4322
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4300: LD_ADDR_EXP 21
4304: PUSH
4305: LD_STRING Gladstone
4307: PPUSH
4308: LD_EXP 1
4312: NOT
4313: PPUSH
4314: LD_STRING 05_
4316: PPUSH
4317: CALL 43120 0 3
4321: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4322: LD_EXP 21
4326: PPUSH
4327: LD_INT 4
4329: PPUSH
4330: LD_INT 0
4332: PPUSH
4333: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4337: LD_STRING LisaStayInDelta
4339: PPUSH
4340: LD_INT 0
4342: PPUSH
4343: CALL_OW 30
4347: IFFALSE 4383
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4349: LD_ADDR_EXP 19
4353: PUSH
4354: LD_STRING Lisa
4356: PPUSH
4357: LD_INT 1
4359: PPUSH
4360: LD_STRING 05_
4362: PPUSH
4363: CALL 43120 0 3
4367: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4368: LD_EXP 19
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: LD_INT 0
4378: PPUSH
4379: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4383: LD_STRING BobbyStayInDelta
4385: PPUSH
4386: LD_INT 0
4388: PPUSH
4389: CALL_OW 30
4393: IFFALSE 4429
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4395: LD_ADDR_EXP 17
4399: PUSH
4400: LD_STRING Bobby
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_STRING 05_
4408: PPUSH
4409: CALL 43120 0 3
4413: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_INT 4
4421: PPUSH
4422: LD_INT 0
4424: PPUSH
4425: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4429: LD_STRING CyrusStayInDelta
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL_OW 30
4439: IFFALSE 4475
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4441: LD_ADDR_EXP 18
4445: PUSH
4446: LD_STRING Cyrus
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: LD_STRING 05_
4454: PPUSH
4455: CALL 43120 0 3
4459: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4460: LD_EXP 18
4464: PPUSH
4465: LD_INT 4
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4475: LD_STRING BrownStayInDelta
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 30
4485: IFFALSE 4521
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4487: LD_ADDR_EXP 15
4491: PUSH
4492: LD_STRING Brown
4494: PPUSH
4495: LD_INT 1
4497: PPUSH
4498: LD_STRING 05_
4500: PPUSH
4501: CALL 43120 0 3
4505: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4506: LD_EXP 15
4510: PPUSH
4511: LD_INT 4
4513: PPUSH
4514: LD_INT 0
4516: PPUSH
4517: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4521: LD_STRING DonaldsonStayInDelta
4523: PPUSH
4524: LD_INT 0
4526: PPUSH
4527: CALL_OW 30
4531: IFFALSE 4567
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4533: LD_ADDR_EXP 16
4537: PUSH
4538: LD_STRING Donaldson
4540: PPUSH
4541: LD_INT 1
4543: PPUSH
4544: LD_STRING 05_
4546: PPUSH
4547: CALL 43120 0 3
4551: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4552: LD_EXP 16
4556: PPUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4567: LD_ADDR_VAR 0 4
4571: PUSH
4572: LD_STRING OthersStayInDelta
4574: PPUSH
4575: CALL_OW 31
4579: ST_TO_ADDR
// if others > 2 then
4580: LD_VAR 0 4
4584: PUSH
4585: LD_INT 2
4587: GREATER
4588: IFFALSE 4651
// begin for j := 1 to 2 do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_INT 2
4602: PUSH
4603: FOR_TO
4604: IFFALSE 4647
// begin SetTag ( others [ j ] , 107 ) ;
4606: LD_VAR 0 4
4610: PUSH
4611: LD_VAR 0 3
4615: ARRAY
4616: PPUSH
4617: LD_INT 107
4619: PPUSH
4620: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4624: LD_VAR 0 4
4628: PUSH
4629: LD_VAR 0 3
4633: ARRAY
4634: PPUSH
4635: LD_INT 4
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// end ;
4645: GO 4603
4647: POP
4648: POP
// end else
4649: GO 4712
// begin for j := 1 to others do
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_VAR 0 4
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4710
// begin SetTag ( others [ i ] , 107 ) ;
4669: LD_VAR 0 4
4673: PUSH
4674: LD_VAR 0 2
4678: ARRAY
4679: PPUSH
4680: LD_INT 107
4682: PPUSH
4683: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4687: LD_VAR 0 4
4691: PUSH
4692: LD_VAR 0 3
4696: ARRAY
4697: PPUSH
4698: LD_INT 4
4700: PPUSH
4701: LD_INT 0
4703: PPUSH
4704: CALL_OW 49
// end ;
4708: GO 4666
4710: POP
4711: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_STRING 06_other_apemans
4719: PPUSH
4720: CALL_OW 31
4724: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4725: LD_VAR 0 4
4729: PUSH
4730: LD_INT 3
4732: PUSH
4733: LD_INT 2
4735: PUSH
4736: LD_INT 2
4738: PUSH
4739: LD_INT 1
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: LD_OWVAR 67
4752: ARRAY
4753: GREATEREQUAL
4754: IFFALSE 4787
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4756: LD_ADDR_VAR 0 3
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 2
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_OWVAR 67
4783: ARRAY
4784: ST_TO_ADDR
4785: GO 4797
// j := others ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_VAR 0 4
4796: ST_TO_ADDR
// for i := 1 to j do
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: DOUBLE
4803: LD_INT 1
4805: DEC
4806: ST_TO_ADDR
4807: LD_VAR 0 3
4811: PUSH
4812: FOR_TO
4813: IFFALSE 4838
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4815: LD_VAR 0 4
4819: PUSH
4820: LD_VAR 0 2
4824: ARRAY
4825: PPUSH
4826: LD_INT 4
4828: PPUSH
4829: LD_INT 0
4831: PPUSH
4832: CALL_OW 49
4836: GO 4812
4838: POP
4839: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4840: LD_INT 4
4842: PPUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 21
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 70
4871: PPUSH
4872: LD_INT 53
4874: PPUSH
4875: LD_INT 19
4877: PPUSH
4878: CALL_OW 111
// end ;
4882: LD_VAR 0 1
4886: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4887: LD_INT 0
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
4902: PPUSH
// prefix := 07c_ ;
4903: LD_ADDR_VAR 0 10
4907: PUSH
4908: LD_STRING 07c_
4910: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4911: LD_ADDR_VAR 0 8
4915: PUSH
4916: LD_STRING 07_vehicles
4918: PPUSH
4919: EMPTY
4920: PPUSH
4921: CALL_OW 30
4925: ST_TO_ADDR
// if not vehicles and debug then
4926: LD_VAR 0 8
4930: NOT
4931: IFFALSE 4939
4933: PUSH
4934: LD_EXP 1
4938: AND
4939: IFFALSE 4967
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4941: LD_ADDR_VAR 0 8
4945: PUSH
4946: LD_INT 2
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: LD_INT 1
4954: PUSH
4955: LD_INT 4
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: ST_TO_ADDR
// if not vehicles then
4967: LD_VAR 0 8
4971: NOT
4972: IFFALSE 5029
// begin area := westGammaSupportArea ;
4974: LD_ADDR_VAR 0 11
4978: PUSH
4979: LD_INT 16
4981: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4982: LD_ADDR_VAR 0 14
4986: PUSH
4987: LD_INT 37
4989: PUSH
4990: LD_INT 70
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4997: LD_ADDR_VAR 0 13
5001: PUSH
5002: LD_INT 43
5004: PUSH
5005: LD_INT 67
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: ST_TO_ADDR
// dir := 1 ;
5012: LD_ADDR_VAR 0 12
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// wait ( 2 2$00 ) ;
5020: LD_INT 4200
5022: PPUSH
5023: CALL_OW 67
// end else
5027: GO 5075
// begin area := southGammaSupportArea ;
5029: LD_ADDR_VAR 0 11
5033: PUSH
5034: LD_INT 5
5036: ST_TO_ADDR
// point := [ 87 , 147 ] ;
5037: LD_ADDR_VAR 0 14
5041: PUSH
5042: LD_INT 87
5044: PUSH
5045: LD_INT 147
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
5052: LD_ADDR_VAR 0 13
5056: PUSH
5057: LD_INT 74
5059: PUSH
5060: LD_INT 129
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: ST_TO_ADDR
// dir := 0 ;
5067: LD_ADDR_VAR 0 12
5071: PUSH
5072: LD_INT 0
5074: ST_TO_ADDR
// end ; EraseResourceArea ( mat_cans , area ) ;
5075: LD_INT 1
5077: PPUSH
5078: LD_VAR 0 11
5082: PPUSH
5083: CALL_OW 286
// squad := [ ] ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: EMPTY
5093: ST_TO_ADDR
// tmp := [ ] ;
5094: LD_ADDR_VAR 0 6
5098: PUSH
5099: EMPTY
5100: ST_TO_ADDR
// tmpVehs := [ ] ;
5101: LD_ADDR_VAR 0 7
5105: PUSH
5106: EMPTY
5107: ST_TO_ADDR
// uc_side := 1 ;
5108: LD_ADDR_OWVAR 20
5112: PUSH
5113: LD_INT 1
5115: ST_TO_ADDR
// uc_nation := 1 ;
5116: LD_ADDR_OWVAR 21
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// if vehicles then
5124: LD_VAR 0 8
5128: IFFALSE 5350
// begin for i := 1 to vehicles do
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: DOUBLE
5136: LD_INT 1
5138: DEC
5139: ST_TO_ADDR
5140: LD_VAR 0 8
5144: PUSH
5145: FOR_TO
5146: IFFALSE 5348
// begin if vehicles [ i ] then
5148: LD_VAR 0 8
5152: PUSH
5153: LD_VAR 0 2
5157: ARRAY
5158: IFFALSE 5346
// begin if not vehicles [ i ] [ 1 ] then
5160: LD_VAR 0 8
5164: PUSH
5165: LD_VAR 0 2
5169: ARRAY
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: NOT
5175: IFFALSE 5179
// continue ;
5177: GO 5145
// if not vehicles [ i ] [ 2 ] then
5179: LD_VAR 0 8
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: PUSH
5190: LD_INT 2
5192: ARRAY
5193: NOT
5194: IFFALSE 5198
// continue ;
5196: GO 5145
// if not vehicles [ i ] [ 3 ] then
5198: LD_VAR 0 8
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: PUSH
5209: LD_INT 3
5211: ARRAY
5212: NOT
5213: IFFALSE 5217
// continue ;
5215: GO 5145
// if not vehicles [ i ] [ 4 ] then
5217: LD_VAR 0 8
5221: PUSH
5222: LD_VAR 0 2
5226: ARRAY
5227: PUSH
5228: LD_INT 4
5230: ARRAY
5231: NOT
5232: IFFALSE 5236
// continue ;
5234: GO 5145
// vc_chassis := vehicles [ i ] [ 1 ] ;
5236: LD_ADDR_OWVAR 37
5240: PUSH
5241: LD_VAR 0 8
5245: PUSH
5246: LD_VAR 0 2
5250: ARRAY
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5256: LD_ADDR_OWVAR 39
5260: PUSH
5261: LD_VAR 0 8
5265: PUSH
5266: LD_VAR 0 2
5270: ARRAY
5271: PUSH
5272: LD_INT 2
5274: ARRAY
5275: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5276: LD_ADDR_OWVAR 38
5280: PUSH
5281: LD_VAR 0 8
5285: PUSH
5286: LD_VAR 0 2
5290: ARRAY
5291: PUSH
5292: LD_INT 3
5294: ARRAY
5295: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5296: LD_ADDR_OWVAR 40
5300: PUSH
5301: LD_VAR 0 8
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PUSH
5312: LD_INT 4
5314: ARRAY
5315: ST_TO_ADDR
// veh := CreateVehicle ;
5316: LD_ADDR_VAR 0 9
5320: PUSH
5321: CALL_OW 45
5325: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5326: LD_ADDR_VAR 0 7
5330: PUSH
5331: LD_VAR 0 7
5335: PPUSH
5336: LD_VAR 0 9
5340: PPUSH
5341: CALL 81310 0 2
5345: ST_TO_ADDR
// end ; end ;
5346: GO 5145
5348: POP
5349: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5350: LD_ADDR_EXP 14
5354: PUSH
5355: LD_STRING JMM
5357: PPUSH
5358: LD_EXP 1
5362: NOT
5363: PPUSH
5364: LD_VAR 0 10
5368: PPUSH
5369: CALL 43120 0 3
5373: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5374: LD_EXP 13
5378: PUSH
5379: LD_INT 1
5381: PUSH
5382: LD_INT 3
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: IN
5389: IFFALSE 5398
5391: PUSH
5392: LD_EXP 15
5396: NOT
5397: AND
5398: IFFALSE 5459
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5400: LD_ADDR_EXP 15
5404: PUSH
5405: LD_STRING Brown
5407: PPUSH
5408: LD_EXP 1
5412: NOT
5413: PPUSH
5414: LD_VAR 0 10
5418: PPUSH
5419: CALL 43120 0 3
5423: ST_TO_ADDR
// if Brown then
5424: LD_EXP 15
5428: IFFALSE 5459
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5430: LD_ADDR_VAR 0 6
5434: PUSH
5435: LD_VAR 0 6
5439: PPUSH
5440: LD_VAR 0 6
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: PPUSH
5449: LD_EXP 15
5453: PPUSH
5454: CALL_OW 1
5458: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5459: LD_EXP 13
5463: PUSH
5464: LD_INT 2
5466: PUSH
5467: LD_INT 3
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: IN
5474: IFFALSE 5483
5476: PUSH
5477: LD_EXP 16
5481: NOT
5482: AND
5483: IFFALSE 5544
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5485: LD_ADDR_EXP 16
5489: PUSH
5490: LD_STRING Donaldson
5492: PPUSH
5493: LD_EXP 1
5497: NOT
5498: PPUSH
5499: LD_VAR 0 10
5503: PPUSH
5504: CALL 43120 0 3
5508: ST_TO_ADDR
// if Donaldson then
5509: LD_EXP 16
5513: IFFALSE 5544
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5515: LD_ADDR_VAR 0 6
5519: PUSH
5520: LD_VAR 0 6
5524: PPUSH
5525: LD_VAR 0 6
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: PPUSH
5534: LD_EXP 16
5538: PPUSH
5539: CALL_OW 1
5543: ST_TO_ADDR
// end ; if not Bobby then
5544: LD_EXP 17
5548: NOT
5549: IFFALSE 5607
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5551: LD_ADDR_EXP 17
5555: PUSH
5556: LD_STRING Bobby
5558: PPUSH
5559: LD_INT 1
5561: PPUSH
5562: LD_VAR 0 10
5566: PPUSH
5567: CALL 43120 0 3
5571: ST_TO_ADDR
// if Bobby then
5572: LD_EXP 17
5576: IFFALSE 5607
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5578: LD_ADDR_VAR 0 6
5582: PUSH
5583: LD_VAR 0 6
5587: PPUSH
5588: LD_VAR 0 6
5592: PUSH
5593: LD_INT 1
5595: PLUS
5596: PPUSH
5597: LD_EXP 17
5601: PPUSH
5602: CALL_OW 1
5606: ST_TO_ADDR
// end ; if not Cyrus then
5607: LD_EXP 18
5611: NOT
5612: IFFALSE 5670
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5614: LD_ADDR_EXP 18
5618: PUSH
5619: LD_STRING Cyrus
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: LD_VAR 0 10
5629: PPUSH
5630: CALL 43120 0 3
5634: ST_TO_ADDR
// if Cyrus then
5635: LD_EXP 18
5639: IFFALSE 5670
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5641: LD_ADDR_VAR 0 6
5645: PUSH
5646: LD_VAR 0 6
5650: PPUSH
5651: LD_VAR 0 6
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: PPUSH
5660: LD_EXP 18
5664: PPUSH
5665: CALL_OW 1
5669: ST_TO_ADDR
// end ; if not Lisa then
5670: LD_EXP 19
5674: NOT
5675: IFFALSE 5736
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5677: LD_ADDR_EXP 19
5681: PUSH
5682: LD_STRING Lisa
5684: PPUSH
5685: LD_EXP 1
5689: NOT
5690: PPUSH
5691: LD_VAR 0 10
5695: PPUSH
5696: CALL 43120 0 3
5700: ST_TO_ADDR
// if Lisa then
5701: LD_EXP 19
5705: IFFALSE 5736
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5707: LD_ADDR_VAR 0 6
5711: PUSH
5712: LD_VAR 0 6
5716: PPUSH
5717: LD_VAR 0 6
5721: PUSH
5722: LD_INT 1
5724: PLUS
5725: PPUSH
5726: LD_EXP 19
5730: PPUSH
5731: CALL_OW 1
5735: ST_TO_ADDR
// end ; if not Frank then
5736: LD_EXP 20
5740: NOT
5741: IFFALSE 5802
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5743: LD_ADDR_EXP 20
5747: PUSH
5748: LD_STRING Frank
5750: PPUSH
5751: LD_EXP 1
5755: NOT
5756: PPUSH
5757: LD_VAR 0 10
5761: PPUSH
5762: CALL 43120 0 3
5766: ST_TO_ADDR
// if Frank then
5767: LD_EXP 20
5771: IFFALSE 5802
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5773: LD_ADDR_VAR 0 6
5777: PUSH
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 6
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_EXP 20
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// end ; if not Kikuchi then
5802: LD_EXP 22
5806: NOT
5807: IFFALSE 5865
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5809: LD_ADDR_EXP 22
5813: PUSH
5814: LD_STRING Kikuchi
5816: PPUSH
5817: LD_INT 1
5819: PPUSH
5820: LD_VAR 0 10
5824: PPUSH
5825: CALL 43120 0 3
5829: ST_TO_ADDR
// if Kikuchi then
5830: LD_EXP 22
5834: IFFALSE 5865
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5836: LD_ADDR_VAR 0 6
5840: PUSH
5841: LD_VAR 0 6
5845: PPUSH
5846: LD_VAR 0 6
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: PPUSH
5855: LD_EXP 22
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// end ; if not Gladstone then
5865: LD_EXP 21
5869: NOT
5870: IFFALSE 5931
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5872: LD_ADDR_EXP 21
5876: PUSH
5877: LD_STRING Gladstone
5879: PPUSH
5880: LD_EXP 1
5884: NOT
5885: PPUSH
5886: LD_VAR 0 10
5890: PPUSH
5891: CALL 43120 0 3
5895: ST_TO_ADDR
// if Gladstone then
5896: LD_EXP 21
5900: IFFALSE 5931
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5902: LD_ADDR_VAR 0 6
5906: PUSH
5907: LD_VAR 0 6
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_INT 1
5919: PLUS
5920: PPUSH
5921: LD_EXP 21
5925: PPUSH
5926: CALL_OW 1
5930: ST_TO_ADDR
// end ; if not Khatam then
5931: LD_EXP 23
5935: NOT
5936: IFFALSE 5994
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5938: LD_ADDR_EXP 23
5942: PUSH
5943: LD_STRING Khatam
5945: PPUSH
5946: LD_INT 1
5948: PPUSH
5949: LD_VAR 0 10
5953: PPUSH
5954: CALL 43120 0 3
5958: ST_TO_ADDR
// if Khatam then
5959: LD_EXP 23
5963: IFFALSE 5994
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5965: LD_ADDR_VAR 0 6
5969: PUSH
5970: LD_VAR 0 6
5974: PPUSH
5975: LD_VAR 0 6
5979: PUSH
5980: LD_INT 1
5982: PLUS
5983: PPUSH
5984: LD_EXP 23
5988: PPUSH
5989: CALL_OW 1
5993: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5994: LD_ADDR_VAR 0 4
5998: PUSH
5999: LD_STRING 07c_others
6001: PPUSH
6002: CALL_OW 31
6006: ST_TO_ADDR
// squad := others ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 4
6016: ST_TO_ADDR
// if others then
6017: LD_VAR 0 4
6021: IFFALSE 6072
// for i in others do
6023: LD_ADDR_VAR 0 2
6027: PUSH
6028: LD_VAR 0 4
6032: PUSH
6033: FOR_IN
6034: IFFALSE 6070
// begin SetTag ( i , 108 ) ;
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_INT 108
6043: PPUSH
6044: CALL_OW 109
// tmp := Join ( tmp , i ) ;
6048: LD_ADDR_VAR 0 6
6052: PUSH
6053: LD_VAR 0 6
6057: PPUSH
6058: LD_VAR 0 2
6062: PPUSH
6063: CALL 81310 0 2
6067: ST_TO_ADDR
// end ;
6068: GO 6033
6070: POP
6071: POP
// if tmp then
6072: LD_VAR 0 6
6076: IFFALSE 6331
// begin tmp := Join ( tmp , JMM ) ;
6078: LD_ADDR_VAR 0 6
6082: PUSH
6083: LD_VAR 0 6
6087: PPUSH
6088: LD_EXP 14
6092: PPUSH
6093: CALL 81310 0 2
6097: ST_TO_ADDR
// for i in tmp do
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_VAR 0 6
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6329
// begin SetDir ( i , dir ) ;
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_VAR 0 12
6120: PPUSH
6121: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
6125: LD_VAR 0 2
6129: PPUSH
6130: CALL_OW 257
6134: PUSH
6135: LD_INT 3
6137: EQUAL
6138: IFFALSE 6146
6140: PUSH
6141: LD_VAR 0 7
6145: AND
6146: IFFALSE 6245
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6148: LD_VAR 0 7
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_INT 0
6159: PPUSH
6160: CALL_OW 233
// repeat wait ( 10 ) ;
6164: LD_INT 10
6166: PPUSH
6167: CALL_OW 67
// until PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6171: LD_VAR 0 7
6175: PUSH
6176: LD_INT 1
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 14
6184: PUSH
6185: LD_INT 1
6187: ARRAY
6188: PPUSH
6189: LD_VAR 0 14
6193: PUSH
6194: LD_INT 2
6196: ARRAY
6197: PPUSH
6198: LD_INT 0
6200: PPUSH
6201: CALL_OW 48
6205: IFFALSE 6164
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6207: LD_VAR 0 2
6211: PPUSH
6212: LD_VAR 0 7
6216: PUSH
6217: LD_INT 1
6219: ARRAY
6220: PPUSH
6221: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6225: LD_ADDR_VAR 0 7
6229: PUSH
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_INT 1
6237: PPUSH
6238: CALL_OW 3
6242: ST_TO_ADDR
// end else
6243: GO 6271
// begin repeat wait ( 10 ) ;
6245: LD_INT 10
6247: PPUSH
6248: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_VAR 0 11
6261: PPUSH
6262: LD_INT 0
6264: PPUSH
6265: CALL_OW 49
6269: IFFALSE 6245
// end ; ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_VAR 0 13
6280: PUSH
6281: LD_INT 1
6283: ARRAY
6284: PPUSH
6285: LD_VAR 0 13
6289: PUSH
6290: LD_INT 2
6292: ARRAY
6293: PPUSH
6294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6298: LD_INT 35
6300: PPUSH
6301: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6305: LD_VAR 0 11
6309: PPUSH
6310: LD_INT 22
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 70
6324: NOT
6325: IFFALSE 6298
// end ;
6327: GO 6108
6329: POP
6330: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6331: LD_EXP 14
6335: PPUSH
6336: CALL_OW 305
6340: NOT
6341: IFTRUE 6355
6343: PUSH
6344: LD_EXP 14
6348: PPUSH
6349: CALL_OW 310
6353: NOT
6354: OR
6355: IFFALSE 6396
// begin repeat wait ( 0 0$1 ) ;
6357: LD_INT 35
6359: PPUSH
6360: CALL_OW 67
// until PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6364: LD_EXP 14
6368: PPUSH
6369: LD_VAR 0 14
6373: PUSH
6374: LD_INT 1
6376: ARRAY
6377: PPUSH
6378: LD_VAR 0 14
6382: PUSH
6383: LD_INT 2
6385: ARRAY
6386: PPUSH
6387: LD_INT 0
6389: PPUSH
6390: CALL_OW 48
6394: IFFALSE 6357
// end ; ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6396: LD_EXP 14
6400: PPUSH
6401: LD_VAR 0 13
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_VAR 0 13
6414: PUSH
6415: LD_INT 2
6417: ARRAY
6418: PPUSH
6419: CALL_OW 111
// jmmArrival := true ;
6423: LD_ADDR_EXP 8
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// end ;
6431: LD_VAR 0 1
6435: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6436: LD_INT 0
6438: PPUSH
6439: PPUSH
6440: PPUSH
6441: PPUSH
6442: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6443: LD_INT 1
6445: PPUSH
6446: LD_INT 17
6448: PPUSH
6449: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6453: LD_INT 2
6455: PPUSH
6456: LD_INT 17
6458: PPUSH
6459: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6463: LD_ADDR_VAR 0 5
6467: PUSH
6468: LD_INT 6
6470: PPUSH
6471: LD_INT 58
6473: PUSH
6474: EMPTY
6475: LIST
6476: PPUSH
6477: CALL_OW 70
6481: ST_TO_ADDR
// if tmp then
6482: LD_VAR 0 5
6486: IFFALSE 6514
// for i in tmp do
6488: LD_ADDR_VAR 0 2
6492: PUSH
6493: LD_VAR 0 5
6497: PUSH
6498: FOR_IN
6499: IFFALSE 6512
// RemoveUnit ( i ) ;
6501: LD_VAR 0 2
6505: PPUSH
6506: CALL_OW 64
6510: GO 6498
6512: POP
6513: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6514: LD_ADDR_VAR 0 5
6518: PUSH
6519: LD_INT 6
6521: PPUSH
6522: LD_INT 3
6524: PUSH
6525: LD_INT 21
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PPUSH
6539: CALL_OW 70
6543: ST_TO_ADDR
// if tmp then
6544: LD_VAR 0 5
6548: IFFALSE 6572
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6550: LD_VAR 0 5
6554: PPUSH
6555: LD_INT 33
6557: PPUSH
6558: LD_INT 39
6560: PPUSH
6561: CALL_OW 111
// wait ( 0 0$3 ) ;
6565: LD_INT 105
6567: PPUSH
6568: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6572: LD_INT 70
6574: PPUSH
6575: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6579: LD_INT 6
6581: PPUSH
6582: LD_INT 50
6584: PUSH
6585: EMPTY
6586: LIST
6587: PPUSH
6588: CALL_OW 70
6592: NOT
6593: IFFALSE 6572
// uc_side := 4 ;
6595: LD_ADDR_OWVAR 20
6599: PUSH
6600: LD_INT 4
6602: ST_TO_ADDR
// uc_nation := 1 ;
6603: LD_ADDR_OWVAR 21
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6611: LD_ADDR_EXP 28
6615: PUSH
6616: LD_STRING Sikorski
6618: PPUSH
6619: LD_INT 0
6621: PPUSH
6622: LD_STRING 
6624: PPUSH
6625: CALL 43120 0 3
6629: ST_TO_ADDR
// vc_engine := engine_combustion ;
6630: LD_ADDR_OWVAR 39
6634: PUSH
6635: LD_INT 1
6637: ST_TO_ADDR
// vc_control := control_manual ;
6638: LD_ADDR_OWVAR 38
6642: PUSH
6643: LD_INT 1
6645: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6646: LD_ADDR_OWVAR 40
6650: PUSH
6651: LD_INT 6
6653: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6654: LD_ADDR_OWVAR 37
6658: PUSH
6659: LD_INT 4
6661: ST_TO_ADDR
// veh := CreateVehicle ;
6662: LD_ADDR_VAR 0 4
6666: PUSH
6667: CALL_OW 45
6671: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6672: LD_VAR 0 4
6676: PPUSH
6677: LD_INT 3
6679: PPUSH
6680: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6684: LD_VAR 0 4
6688: PPUSH
6689: LD_INT 4
6691: NEG
6692: PPUSH
6693: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6697: LD_VAR 0 4
6701: PPUSH
6702: LD_INT 70
6704: PPUSH
6705: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: LD_INT 6
6716: PPUSH
6717: LD_INT 0
6719: PPUSH
6720: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6724: LD_EXP 28
6728: PPUSH
6729: LD_VAR 0 4
6733: PPUSH
6734: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6738: LD_EXP 28
6742: PPUSH
6743: LD_INT 37
6745: PPUSH
6746: LD_INT 30
6748: PPUSH
6749: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6753: LD_INT 10
6755: PPUSH
6756: CALL_OW 67
// InitHc_All ( ) ;
6760: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6764: LD_ADDR_VAR 0 2
6768: PUSH
6769: DOUBLE
6770: LD_INT 1
6772: DEC
6773: ST_TO_ADDR
6774: LD_INT 3
6776: PUSH
6777: LD_INT 2
6779: PUSH
6780: LD_INT 2
6782: PUSH
6783: LD_INT 2
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: LD_OWVAR 67
6796: ARRAY
6797: PUSH
6798: FOR_TO
6799: IFFALSE 6934
// begin repeat wait ( 0 0$2 ) ;
6801: LD_INT 70
6803: PPUSH
6804: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6808: LD_INT 6
6810: PPUSH
6811: LD_INT 50
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 70
6821: NOT
6822: IFFALSE 6801
// uc_side := 4 ;
6824: LD_ADDR_OWVAR 20
6828: PUSH
6829: LD_INT 4
6831: ST_TO_ADDR
// uc_nation := 1 ;
6832: LD_ADDR_OWVAR 21
6836: PUSH
6837: LD_INT 1
6839: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6840: LD_INT 0
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 4
6848: PPUSH
6849: LD_INT 7
6851: PPUSH
6852: CALL_OW 12
6856: PPUSH
6857: CALL_OW 380
// un := CreateHuman ;
6861: LD_ADDR_VAR 0 3
6865: PUSH
6866: CALL_OW 44
6870: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6871: LD_VAR 0 3
6875: PPUSH
6876: LD_INT 3
6878: PPUSH
6879: CALL_OW 233
// SetTag ( un , 101 ) ;
6883: LD_VAR 0 3
6887: PPUSH
6888: LD_INT 101
6890: PPUSH
6891: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6895: LD_VAR 0 3
6899: PPUSH
6900: LD_INT 6
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6910: LD_VAR 0 3
6914: PPUSH
6915: LD_INT 25
6917: PPUSH
6918: LD_INT 27
6920: PPUSH
6921: CALL_OW 111
// wait ( 0 0$1 ) ;
6925: LD_INT 35
6927: PPUSH
6928: CALL_OW 67
// end ;
6932: GO 6798
6934: POP
6935: POP
// repeat wait ( 0 0$2 ) ;
6936: LD_INT 70
6938: PPUSH
6939: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6943: LD_ADDR_VAR 0 2
6947: PUSH
6948: LD_INT 22
6950: PUSH
6951: LD_INT 4
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: PUSH
6977: FOR_IN
6978: IFFALSE 7041
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6980: LD_VAR 0 2
6984: PPUSH
6985: LD_INT 17
6987: PPUSH
6988: LD_INT 22
6990: PUSH
6991: LD_INT 1
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 58
7003: PUSH
7004: EMPTY
7005: LIST
7006: PUSH
7007: LD_INT 33
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 70
7030: PUSH
7031: LD_INT 1
7033: ARRAY
7034: PPUSH
7035: CALL_OW 115
7039: GO 6977
7041: POP
7042: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
7043: LD_INT 17
7045: PPUSH
7046: LD_INT 22
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 2
7058: PUSH
7059: LD_INT 58
7061: PUSH
7062: EMPTY
7063: LIST
7064: PUSH
7065: LD_INT 33
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 70
7088: NOT
7089: IFFALSE 6936
// for i := 1 to 2 do
7091: LD_ADDR_VAR 0 2
7095: PUSH
7096: DOUBLE
7097: LD_INT 1
7099: DEC
7100: ST_TO_ADDR
7101: LD_INT 2
7103: PUSH
7104: FOR_TO
7105: IFFALSE 7217
// begin uc_side := 4 ;
7107: LD_ADDR_OWVAR 20
7111: PUSH
7112: LD_INT 4
7114: ST_TO_ADDR
// uc_nation := 1 ;
7115: LD_ADDR_OWVAR 21
7119: PUSH
7120: LD_INT 1
7122: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
7123: LD_INT 0
7125: PPUSH
7126: LD_INT 4
7128: PPUSH
7129: LD_INT 3
7131: PPUSH
7132: LD_INT 5
7134: PPUSH
7135: CALL_OW 12
7139: PPUSH
7140: CALL_OW 380
// un := CreateHuman ;
7144: LD_ADDR_VAR 0 3
7148: PUSH
7149: CALL_OW 44
7153: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7154: LD_VAR 0 3
7158: PPUSH
7159: LD_INT 3
7161: PPUSH
7162: CALL_OW 233
// SetTag ( un , 101 ) ;
7166: LD_VAR 0 3
7170: PPUSH
7171: LD_INT 101
7173: PPUSH
7174: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
7178: LD_VAR 0 3
7182: PPUSH
7183: LD_INT 6
7185: PPUSH
7186: LD_INT 0
7188: PPUSH
7189: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
7193: LD_VAR 0 3
7197: PPUSH
7198: LD_INT 25
7200: PPUSH
7201: LD_INT 27
7203: PPUSH
7204: CALL_OW 111
// wait ( 0 0$1 ) ;
7208: LD_INT 35
7210: PPUSH
7211: CALL_OW 67
// end ;
7215: GO 7104
7217: POP
7218: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7219: LD_ADDR_VAR 0 2
7223: PUSH
7224: DOUBLE
7225: LD_INT 1
7227: DEC
7228: ST_TO_ADDR
7229: LD_INT 5
7231: PUSH
7232: LD_INT 4
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: LD_INT 3
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: LD_OWVAR 67
7251: ARRAY
7252: PUSH
7253: FOR_TO
7254: IFFALSE 7519
// begin repeat wait ( 0 0$2 ) ;
7256: LD_INT 70
7258: PPUSH
7259: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7263: LD_INT 6
7265: PPUSH
7266: LD_INT 50
7268: PUSH
7269: EMPTY
7270: LIST
7271: PPUSH
7272: CALL_OW 70
7276: NOT
7277: IFFALSE 7256
// uc_side := 4 ;
7279: LD_ADDR_OWVAR 20
7283: PUSH
7284: LD_INT 4
7286: ST_TO_ADDR
// uc_nation := 1 ;
7287: LD_ADDR_OWVAR 21
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// vc_engine := engine_combustion ;
7295: LD_ADDR_OWVAR 39
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// vc_control := control_manual ;
7303: LD_ADDR_OWVAR 38
7307: PUSH
7308: LD_INT 1
7310: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7311: LD_ADDR_OWVAR 40
7315: PUSH
7316: LD_INT 5
7318: PUSH
7319: LD_INT 7
7321: PUSH
7322: LD_INT 5
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: PUSH
7334: LD_VAR 0 2
7338: PUSH
7339: LD_INT 4
7341: MOD
7342: PUSH
7343: LD_INT 1
7345: PLUS
7346: ARRAY
7347: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7348: LD_ADDR_OWVAR 37
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: LD_INT 4
7361: PUSH
7362: LD_INT 4
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: LD_VAR 0 2
7375: PUSH
7376: LD_INT 4
7378: MOD
7379: PUSH
7380: LD_INT 1
7382: PLUS
7383: ARRAY
7384: ST_TO_ADDR
// veh := CreateVehicle ;
7385: LD_ADDR_VAR 0 4
7389: PUSH
7390: CALL_OW 45
7394: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7395: LD_VAR 0 4
7399: PPUSH
7400: LD_INT 3
7402: PPUSH
7403: CALL_OW 233
// SetTag ( veh , 0 ) ;
7407: LD_VAR 0 4
7411: PPUSH
7412: LD_INT 0
7414: PPUSH
7415: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7419: LD_VAR 0 4
7423: PPUSH
7424: LD_INT 70
7426: PPUSH
7427: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7431: LD_VAR 0 4
7435: PPUSH
7436: LD_INT 6
7438: PPUSH
7439: LD_INT 0
7441: PPUSH
7442: CALL_OW 49
// InitHc ;
7446: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7450: LD_INT 0
7452: PPUSH
7453: LD_INT 3
7455: PPUSH
7456: LD_INT 4
7458: PPUSH
7459: LD_INT 7
7461: PPUSH
7462: CALL_OW 12
7466: PPUSH
7467: CALL_OW 380
// un := CreateHuman ;
7471: LD_ADDR_VAR 0 3
7475: PUSH
7476: CALL_OW 44
7480: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7481: LD_VAR 0 3
7485: PPUSH
7486: LD_VAR 0 4
7490: PPUSH
7491: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7495: LD_VAR 0 3
7499: PPUSH
7500: LD_INT 30
7502: PPUSH
7503: LD_INT 22
7505: PPUSH
7506: CALL_OW 111
// wait ( 0 0$3 ) ;
7510: LD_INT 105
7512: PPUSH
7513: CALL_OW 67
// end ;
7517: GO 7253
7519: POP
7520: POP
// wait ( 0 0$10 ) ;
7521: LD_INT 350
7523: PPUSH
7524: CALL_OW 67
// end ;
7528: LD_VAR 0 1
7532: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7533: LD_INT 0
7535: PPUSH
7536: PPUSH
7537: PPUSH
7538: PPUSH
// gammaBase := [ ] ;
7539: LD_ADDR_VAR 0 4
7543: PUSH
7544: EMPTY
7545: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7546: LD_ADDR_VAR 0 5
7550: PUSH
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_INT 22
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 21
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 50
7578: PUSH
7579: EMPTY
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: PPUSH
7587: CALL_OW 70
7591: ST_TO_ADDR
// for i in buildings do
7592: LD_ADDR_VAR 0 3
7596: PUSH
7597: LD_VAR 0 5
7601: PUSH
7602: FOR_IN
7603: IFFALSE 8040
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7605: LD_VAR 0 3
7609: PPUSH
7610: CALL_OW 266
7614: PUSH
7615: LD_INT 6
7617: PUSH
7618: LD_INT 7
7620: PUSH
7621: LD_INT 8
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: IN
7629: IFFALSE 7743
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7631: LD_ADDR_VAR 0 4
7635: PUSH
7636: LD_VAR 0 4
7640: PUSH
7641: LD_VAR 0 3
7645: PPUSH
7646: CALL_OW 266
7650: PUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL_OW 250
7660: PUSH
7661: LD_VAR 0 3
7665: PPUSH
7666: CALL_OW 251
7670: PUSH
7671: LD_VAR 0 3
7675: PPUSH
7676: CALL_OW 254
7680: PUSH
7681: LD_VAR 0 3
7685: PPUSH
7686: CALL_OW 267
7690: PUSH
7691: LD_VAR 0 3
7695: PPUSH
7696: CALL_OW 248
7700: PUSH
7701: LD_VAR 0 3
7705: PPUSH
7706: LD_INT 1
7708: PPUSH
7709: CALL_OW 268
7713: PUSH
7714: LD_VAR 0 3
7718: PPUSH
7719: LD_INT 2
7721: PPUSH
7722: CALL_OW 268
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: ADD
7740: ST_TO_ADDR
7741: GO 8038
// if GetBType ( i ) = b_bunker then
7743: LD_VAR 0 3
7747: PPUSH
7748: CALL_OW 266
7752: PUSH
7753: LD_INT 32
7755: EQUAL
7756: IFFALSE 7853
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: LD_VAR 0 3
7832: PPUSH
7833: CALL_OW 269
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: ADD
7850: ST_TO_ADDR
7851: GO 8038
// if GetBType ( i ) = b_factory then
7853: LD_VAR 0 3
7857: PPUSH
7858: CALL_OW 266
7862: PUSH
7863: LD_INT 3
7865: EQUAL
7866: IFFALSE 7956
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7868: LD_ADDR_VAR 0 4
7872: PUSH
7873: LD_VAR 0 4
7877: PPUSH
7878: LD_INT 1
7880: PPUSH
7881: LD_VAR 0 3
7885: PPUSH
7886: CALL_OW 266
7890: PUSH
7891: LD_VAR 0 3
7895: PPUSH
7896: CALL_OW 250
7900: PUSH
7901: LD_VAR 0 3
7905: PPUSH
7906: CALL_OW 251
7910: PUSH
7911: LD_VAR 0 3
7915: PPUSH
7916: CALL_OW 254
7920: PUSH
7921: LD_VAR 0 3
7925: PPUSH
7926: CALL_OW 267
7930: PUSH
7931: LD_VAR 0 3
7935: PPUSH
7936: CALL_OW 248
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 2
7953: ST_TO_ADDR
7954: GO 8038
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 4
7965: PUSH
7966: LD_VAR 0 3
7970: PPUSH
7971: CALL_OW 266
7975: PUSH
7976: LD_VAR 0 3
7980: PPUSH
7981: CALL_OW 250
7985: PUSH
7986: LD_VAR 0 3
7990: PPUSH
7991: CALL_OW 251
7995: PUSH
7996: LD_VAR 0 3
8000: PPUSH
8001: CALL_OW 254
8005: PUSH
8006: LD_VAR 0 3
8010: PPUSH
8011: CALL_OW 267
8015: PUSH
8016: LD_VAR 0 3
8020: PPUSH
8021: CALL_OW 248
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: ADD
8037: ST_TO_ADDR
// end ;
8038: GO 7602
8040: POP
8041: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
8042: LD_VAR 0 4
8046: PPUSH
8047: LD_STRING 08_GammaBase
8049: PPUSH
8050: CALL_OW 39
// end ;
8054: LD_VAR 0 2
8058: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
8059: LD_INT 0
8061: PPUSH
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
8066: PPUSH
8067: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
8068: LD_ADDR_VAR 0 3
8072: PUSH
8073: LD_INT 17
8075: PPUSH
8076: LD_INT 22
8078: PUSH
8079: LD_INT 1
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: LD_INT 21
8091: PUSH
8092: LD_INT 3
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 3
8105: PUSH
8106: LD_INT 33
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: PPUSH
8125: CALL_OW 70
8129: ST_TO_ADDR
// if tmp then
8130: LD_VAR 0 3
8134: IFFALSE 8253
// begin for i in tmp do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 3
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8178
// begin SetSide ( i , 4 ) ;
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_INT 4
8156: PPUSH
8157: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
8161: LD_VAR 0 2
8165: PPUSH
8166: LD_INT 42
8168: PPUSH
8169: LD_INT 22
8171: PPUSH
8172: CALL_OW 111
// end ;
8176: GO 8146
8178: POP
8179: POP
// repeat wait ( 0 0$3 ) ;
8180: LD_INT 105
8182: PPUSH
8183: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
8187: LD_VAR 0 3
8191: PPUSH
8192: LD_INT 51
8194: PPUSH
8195: LD_INT 16
8197: PPUSH
8198: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8202: LD_VAR 0 3
8206: PPUSH
8207: LD_INT 95
8209: PUSH
8210: LD_INT 17
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PPUSH
8217: CALL_OW 72
8221: NOT
8222: IFFALSE 8180
// for i in tmp do
8224: LD_ADDR_VAR 0 2
8228: PUSH
8229: LD_VAR 0 3
8233: PUSH
8234: FOR_IN
8235: IFFALSE 8251
// SetSide ( i , 1 ) ;
8237: LD_VAR 0 2
8241: PPUSH
8242: LD_INT 1
8244: PPUSH
8245: CALL_OW 235
8249: GO 8234
8251: POP
8252: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8253: LD_ADDR_VAR 0 3
8257: PUSH
8258: LD_INT 17
8260: PPUSH
8261: LD_INT 22
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 33
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PPUSH
8285: CALL_OW 70
8289: ST_TO_ADDR
// if tmp then
8290: LD_VAR 0 3
8294: IFFALSE 8318
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8296: LD_VAR 0 3
8300: PPUSH
8301: LD_INT 40
8303: PPUSH
8304: LD_INT 32
8306: PPUSH
8307: CALL_OW 111
// wait ( 0 0$3 ) ;
8311: LD_INT 105
8313: PPUSH
8314: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8318: LD_ADDR_VAR 0 3
8322: PUSH
8323: LD_INT 17
8325: PPUSH
8326: LD_INT 22
8328: PUSH
8329: LD_INT 1
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 21
8341: PUSH
8342: LD_INT 2
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 21
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 70
8372: ST_TO_ADDR
// if tmp then
8373: LD_VAR 0 3
8377: IFFALSE 8525
// begin repeat wait ( 0 0$1 ) ;
8379: LD_INT 35
8381: PPUSH
8382: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8386: LD_ADDR_VAR 0 3
8390: PUSH
8391: LD_INT 17
8393: PPUSH
8394: LD_INT 22
8396: PUSH
8397: LD_INT 1
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: LD_INT 21
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PPUSH
8436: CALL_OW 70
8440: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8441: LD_ADDR_VAR 0 2
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_INT 4
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: PUSH
8493: FOR_IN
8494: IFFALSE 8516
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_VAR 0 3
8505: PUSH
8506: LD_INT 1
8508: ARRAY
8509: PPUSH
8510: CALL_OW 115
8514: GO 8493
8516: POP
8517: POP
// until not tmp ;
8518: LD_VAR 0 3
8522: NOT
8523: IFFALSE 8379
// end ; wait ( 0 0$2 ) ;
8525: LD_INT 70
8527: PPUSH
8528: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8532: LD_ADDR_VAR 0 3
8536: PUSH
8537: LD_INT 22
8539: PUSH
8540: LD_INT 4
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8552: LD_VAR 0 3
8556: PPUSH
8557: LD_INT 52
8559: PPUSH
8560: LD_INT 54
8562: PPUSH
8563: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8567: LD_VAR 0 3
8571: PPUSH
8572: LD_INT 175
8574: PPUSH
8575: CALL_OW 202
// wait ( 0 0$5 ) ;
8579: LD_INT 175
8581: PPUSH
8582: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8586: LD_VAR 0 3
8590: PPUSH
8591: LD_INT 120
8593: PUSH
8594: LD_INT 101
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PPUSH
8601: CALL_OW 72
8605: PPUSH
8606: LD_INT 42
8608: PPUSH
8609: LD_INT 52
8611: PPUSH
8612: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8616: LD_VAR 0 3
8620: PPUSH
8621: LD_INT 120
8623: PUSH
8624: LD_INT 101
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 72
8635: PPUSH
8636: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8640: LD_VAR 0 3
8644: PPUSH
8645: LD_INT 120
8647: PUSH
8648: LD_INT 101
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 25
8657: PUSH
8658: LD_INT 4
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 72
8673: PPUSH
8674: LD_INT 34
8676: PPUSH
8677: LD_INT 47
8679: PPUSH
8680: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8684: LD_VAR 0 3
8688: PPUSH
8689: LD_INT 120
8691: PUSH
8692: LD_INT 101
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 25
8701: PUSH
8702: LD_INT 4
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PPUSH
8713: CALL_OW 72
8717: PPUSH
8718: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8722: LD_ADDR_VAR 0 7
8726: PUSH
8727: LD_VAR 0 3
8731: PPUSH
8732: LD_INT 21
8734: PUSH
8735: LD_INT 2
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PPUSH
8742: CALL_OW 72
8746: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8747: LD_ADDR_VAR 0 4
8751: PUSH
8752: LD_INT 81
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 69
8766: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8767: LD_ADDR_VAR 0 5
8771: PUSH
8772: LD_INT 57
8774: PUSH
8775: LD_INT 66
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 62
8784: PUSH
8785: LD_INT 58
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8796: LD_INT 35
8798: PPUSH
8799: CALL_OW 67
// for i in filter do
8803: LD_ADDR_VAR 0 2
8807: PUSH
8808: LD_VAR 0 7
8812: PUSH
8813: FOR_IN
8814: IFFALSE 9248
// begin if IsDead ( i ) then
8816: LD_VAR 0 2
8820: PPUSH
8821: CALL_OW 301
8825: IFFALSE 8845
// begin filter := filter diff i ;
8827: LD_ADDR_VAR 0 7
8831: PUSH
8832: LD_VAR 0 7
8836: PUSH
8837: LD_VAR 0 2
8841: DIFF
8842: ST_TO_ADDR
// continue ;
8843: GO 8813
// end ; tmp := IsDrivenBy ( i ) ;
8845: LD_ADDR_VAR 0 3
8849: PUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 311
8859: ST_TO_ADDR
// if not tmp then
8860: LD_VAR 0 3
8864: NOT
8865: IFFALSE 8869
// continue ;
8867: GO 8813
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8869: LD_VAR 0 2
8873: PPUSH
8874: CALL_OW 261
8878: PUSH
8879: LD_INT 30
8881: GREATER
8882: IFFALSE 8899
8884: PUSH
8885: LD_VAR 0 2
8889: PPUSH
8890: CALL_OW 110
8894: PUSH
8895: LD_INT 2
8897: EQUAL
8898: AND
8899: IFFALSE 8915
// SetTag ( i , 0 ) else
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_INT 0
8908: PPUSH
8909: CALL_OW 109
8913: GO 8944
// if GetTag ( i ) = 2 then
8915: LD_VAR 0 2
8919: PPUSH
8920: CALL_OW 110
8924: PUSH
8925: LD_INT 2
8927: EQUAL
8928: IFFALSE 8944
// begin ComMoveUnit ( i , amDepot ) ;
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_EXP 31
8939: PPUSH
8940: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8944: LD_VAR 0 2
8948: PPUSH
8949: CALL_OW 256
8953: PUSH
8954: LD_INT 600
8956: GREATEREQUAL
8957: IFFALSE 8971
8959: PUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 110
8969: NOT
8970: AND
8971: IFFALSE 8997
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8973: LD_VAR 0 2
8977: PPUSH
8978: LD_VAR 0 4
8982: PPUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 74
8992: PPUSH
8993: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8997: LD_VAR 0 2
9001: PPUSH
9002: CALL_OW 256
9006: PUSH
9007: LD_INT 600
9009: LESS
9010: IFFALSE 9024
9012: PUSH
9013: LD_VAR 0 2
9017: PPUSH
9018: CALL_OW 110
9022: NOT
9023: AND
9024: IFFALSE 9100
// begin SetTag ( i , 1 ) ;
9026: LD_VAR 0 2
9030: PPUSH
9031: LD_INT 1
9033: PPUSH
9034: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
9038: LD_ADDR_VAR 0 6
9042: PUSH
9043: LD_VAR 0 2
9047: PPUSH
9048: LD_VAR 0 5
9052: PPUSH
9053: CALL 84826 0 2
9057: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
9058: LD_VAR 0 2
9062: PPUSH
9063: LD_VAR 0 6
9067: PUSH
9068: LD_INT 1
9070: ARRAY
9071: PPUSH
9072: LD_VAR 0 6
9076: PUSH
9077: LD_INT 2
9079: ARRAY
9080: PPUSH
9081: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
9085: LD_VAR 0 2
9089: PPUSH
9090: LD_INT 40
9092: PPUSH
9093: LD_INT 49
9095: PPUSH
9096: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
9100: LD_VAR 0 2
9104: PPUSH
9105: CALL_OW 110
9109: PUSH
9110: LD_INT 1
9112: EQUAL
9113: IFFALSE 9136
9115: PUSH
9116: LD_VAR 0 2
9120: PPUSH
9121: LD_INT 40
9123: PPUSH
9124: LD_INT 49
9126: PPUSH
9127: CALL_OW 297
9131: PUSH
9132: LD_INT 9
9134: LESS
9135: AND
9136: IFFALSE 9144
9138: PUSH
9139: LD_VAR 0 3
9143: AND
9144: IFFALSE 9246
// begin ComExitVehicle ( tmp ) ;
9146: LD_VAR 0 3
9150: PPUSH
9151: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
9155: LD_VAR 0 3
9159: PPUSH
9160: LD_VAR 0 2
9164: PPUSH
9165: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9169: LD_INT 35
9171: PPUSH
9172: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9176: LD_VAR 0 2
9180: PPUSH
9181: CALL_OW 256
9185: PUSH
9186: LD_INT 1000
9188: EQUAL
9189: IFFALSE 9169
// ComEnterUnit ( tmp , i ) ;
9191: LD_VAR 0 3
9195: PPUSH
9196: LD_VAR 0 2
9200: PPUSH
9201: CALL_OW 120
// if GetFuel ( i ) <= 30 then
9205: LD_VAR 0 2
9209: PPUSH
9210: CALL_OW 261
9214: PUSH
9215: LD_INT 30
9217: LESSEQUAL
9218: IFFALSE 9234
// SetTag ( i , 2 ) else
9220: LD_VAR 0 2
9224: PPUSH
9225: LD_INT 2
9227: PPUSH
9228: CALL_OW 109
9232: GO 9246
// SetTag ( i , 0 ) ;
9234: LD_VAR 0 2
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: CALL_OW 109
// end ; end ;
9246: GO 8813
9248: POP
9249: POP
// until not filter ;
9250: LD_VAR 0 7
9254: NOT
9255: IFFALSE 8796
// end ; end_of_file
9257: LD_VAR 0 1
9261: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9262: LD_INT 0
9264: PPUSH
9265: PPUSH
9266: PPUSH
9267: PPUSH
9268: PPUSH
// uc_side := 3 ;
9269: LD_ADDR_OWVAR 20
9273: PUSH
9274: LD_INT 3
9276: ST_TO_ADDR
// uc_nation := 3 ;
9277: LD_ADDR_OWVAR 21
9281: PUSH
9282: LD_INT 3
9284: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9285: LD_ADDR_EXP 33
9289: PUSH
9290: LD_INT 8
9292: PUSH
9293: LD_INT 11
9295: PUSH
9296: LD_INT 14
9298: PUSH
9299: LD_INT 17
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: PUSH
9308: LD_OWVAR 67
9312: ARRAY
9313: ST_TO_ADDR
// ruMobile := [ ] ;
9314: LD_ADDR_EXP 34
9318: PUSH
9319: EMPTY
9320: ST_TO_ADDR
// ruBuildList := [ ] ;
9321: LD_ADDR_EXP 35
9325: PUSH
9326: EMPTY
9327: ST_TO_ADDR
// russianAttackers := [ ] ;
9328: LD_ADDR_EXP 36
9332: PUSH
9333: EMPTY
9334: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9335: LD_ADDR_VAR 0 5
9339: PUSH
9340: LD_INT 43
9342: PUSH
9343: LD_INT 44
9345: PUSH
9346: LD_INT 46
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: ST_TO_ADDR
// if Difficulty > 2 then
9354: LD_OWVAR 67
9358: PUSH
9359: LD_INT 2
9361: GREATER
9362: IFFALSE 9385
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9364: LD_ADDR_VAR 0 5
9368: PUSH
9369: LD_VAR 0 5
9373: PUSH
9374: LD_INT 45
9376: PUSH
9377: LD_INT 46
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: ADD
9384: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9385: LD_ADDR_EXP 32
9389: PUSH
9390: LD_STRING Borodin
9392: PPUSH
9393: CALL_OW 25
9397: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9398: LD_EXP 32
9402: PPUSH
9403: LD_INT 28
9405: PPUSH
9406: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3500 , 4500 , 5500 , 6000 ] [ Difficulty ] ) ;
9410: LD_INT 28
9412: PPUSH
9413: CALL_OW 274
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 3500
9423: PUSH
9424: LD_INT 4500
9426: PUSH
9427: LD_INT 5500
9429: PUSH
9430: LD_INT 6000
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PPUSH
9445: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1500 ) ;
9449: LD_INT 28
9451: PPUSH
9452: CALL_OW 274
9456: PPUSH
9457: LD_INT 2
9459: PPUSH
9460: LD_INT 1500
9462: PPUSH
9463: CALL_OW 277
// if Difficulty > 2 then
9467: LD_OWVAR 67
9471: PUSH
9472: LD_INT 2
9474: GREATER
9475: IFFALSE 9599
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_INT 99
9484: PUSH
9485: LD_INT 130
9487: PUSH
9488: LD_INT 2
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 121
9498: PUSH
9499: LD_INT 127
9501: PUSH
9502: LD_INT 4
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 117
9512: PUSH
9513: LD_INT 121
9515: PUSH
9516: LD_INT 4
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: ST_TO_ADDR
// for i in tmp do
9529: LD_ADDR_VAR 0 2
9533: PUSH
9534: LD_VAR 0 4
9538: PUSH
9539: FOR_IN
9540: IFFALSE 9597
// begin bc_type := b_turret ;
9542: LD_ADDR_OWVAR 42
9546: PUSH
9547: LD_INT 33
9549: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9550: LD_ADDR_OWVAR 43
9554: PUSH
9555: LD_INT 2
9557: PUSH
9558: LD_OWVAR 67
9562: PLUS
9563: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9564: LD_VAR 0 2
9568: PUSH
9569: LD_INT 1
9571: ARRAY
9572: PPUSH
9573: LD_VAR 0 2
9577: PUSH
9578: LD_INT 2
9580: ARRAY
9581: PPUSH
9582: LD_VAR 0 2
9586: PUSH
9587: LD_INT 3
9589: ARRAY
9590: PPUSH
9591: CALL_OW 47
// end ;
9595: GO 9539
9597: POP
9598: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9599: LD_ADDR_VAR 0 2
9603: PUSH
9604: LD_INT 22
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 3
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 69
9632: PUSH
9633: FOR_IN
9634: IFFALSE 9656
// SetBLevel ( i , 2 + Difficulty ) ;
9636: LD_VAR 0 2
9640: PPUSH
9641: LD_INT 2
9643: PUSH
9644: LD_OWVAR 67
9648: PLUS
9649: PPUSH
9650: CALL_OW 241
9654: GO 9633
9656: POP
9657: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9658: LD_ADDR_VAR 0 4
9662: PUSH
9663: LD_INT 22
9665: PUSH
9666: LD_INT 3
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 2
9675: PUSH
9676: LD_INT 30
9678: PUSH
9679: LD_INT 32
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 30
9688: PUSH
9689: LD_INT 33
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// for i in tmp do
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: LD_VAR 0 4
9719: PUSH
9720: FOR_IN
9721: IFFALSE 9753
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9723: LD_VAR 0 2
9727: PPUSH
9728: LD_VAR 0 5
9732: PUSH
9733: LD_INT 1
9735: PPUSH
9736: LD_VAR 0 5
9740: PPUSH
9741: CALL_OW 12
9745: ARRAY
9746: PPUSH
9747: CALL_OW 431
9751: GO 9720
9753: POP
9754: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9755: LD_ADDR_VAR 0 2
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 30
9772: PUSH
9773: LD_INT 32
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PPUSH
9784: CALL_OW 69
9788: PUSH
9789: FOR_IN
9790: IFFALSE 9839
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9792: LD_INT 0
9794: PPUSH
9795: LD_INT 5
9797: PUSH
9798: LD_INT 6
9800: PUSH
9801: LD_INT 7
9803: PUSH
9804: LD_INT 8
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: PUSH
9813: LD_OWVAR 67
9817: ARRAY
9818: PPUSH
9819: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9823: CALL_OW 44
9827: PPUSH
9828: LD_VAR 0 2
9832: PPUSH
9833: CALL_OW 52
// end ;
9837: GO 9789
9839: POP
9840: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9841: LD_ADDR_VAR 0 2
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 3
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 30
9858: PUSH
9859: LD_INT 5
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PPUSH
9870: CALL_OW 69
9874: PUSH
9875: FOR_IN
9876: IFFALSE 9966
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9878: LD_ADDR_VAR 0 3
9882: PUSH
9883: DOUBLE
9884: LD_INT 1
9886: DEC
9887: ST_TO_ADDR
9888: LD_INT 2
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: LD_INT 4
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_OWVAR 67
9910: ARRAY
9911: PUSH
9912: FOR_TO
9913: IFFALSE 9962
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9915: LD_INT 0
9917: PPUSH
9918: LD_INT 5
9920: PUSH
9921: LD_INT 6
9923: PUSH
9924: LD_INT 7
9926: PUSH
9927: LD_INT 8
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: PUSH
9936: LD_OWVAR 67
9940: ARRAY
9941: PPUSH
9942: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9946: CALL_OW 44
9950: PPUSH
9951: LD_VAR 0 2
9955: PPUSH
9956: CALL_OW 52
// end ;
9960: GO 9912
9962: POP
9963: POP
// end ;
9964: GO 9875
9966: POP
9967: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9968: LD_ADDR_VAR 0 2
9972: PUSH
9973: DOUBLE
9974: LD_INT 1
9976: DEC
9977: ST_TO_ADDR
9978: LD_INT 3
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_OWVAR 67
10000: ARRAY
10001: PUSH
10002: FOR_TO
10003: IFFALSE 10050
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10005: LD_INT 0
10007: PPUSH
10008: LD_INT 4
10010: PUSH
10011: LD_INT 5
10013: PUSH
10014: LD_INT 5
10016: PUSH
10017: LD_INT 6
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: LD_OWVAR 67
10030: ARRAY
10031: PPUSH
10032: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
10036: CALL_OW 44
10040: PPUSH
10041: LD_INT 28
10043: PPUSH
10044: CALL_OW 52
// end ;
10048: GO 10002
10050: POP
10051: POP
// for i := 1 to 2 do
10052: LD_ADDR_VAR 0 2
10056: PUSH
10057: DOUBLE
10058: LD_INT 1
10060: DEC
10061: ST_TO_ADDR
10062: LD_INT 2
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10100
// begin PrepareScientist ( false , 6 ) ;
10068: LD_INT 0
10070: PPUSH
10071: LD_INT 6
10073: PPUSH
10074: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
10078: CALL_OW 44
10082: PPUSH
10083: LD_INT 81
10085: PPUSH
10086: LD_INT 93
10088: PPUSH
10089: CALL_OW 428
10093: PPUSH
10094: CALL_OW 52
// end ;
10098: GO 10065
10100: POP
10101: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
10102: LD_INT 22
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: LD_INT 3
10110: PPUSH
10111: LD_INT 51
10113: PPUSH
10114: LD_INT 100
10116: PPUSH
10117: CALL 48140 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
10121: CALL_OW 45
10125: PPUSH
10126: LD_INT 91
10128: PPUSH
10129: LD_INT 94
10131: PPUSH
10132: LD_INT 3
10134: PPUSH
10135: LD_INT 0
10137: PPUSH
10138: CALL_OW 50
// for i := 1 to 2 do
10142: LD_ADDR_VAR 0 2
10146: PUSH
10147: DOUBLE
10148: LD_INT 1
10150: DEC
10151: ST_TO_ADDR
10152: LD_INT 2
10154: PUSH
10155: FOR_TO
10156: IFFALSE 10200
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
10158: LD_INT 22
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: LD_INT 3
10166: PPUSH
10167: LD_INT 52
10169: PPUSH
10170: LD_INT 100
10172: PPUSH
10173: CALL 48140 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
10177: CALL_OW 45
10181: PPUSH
10182: LD_INT 91
10184: PPUSH
10185: LD_INT 94
10187: PPUSH
10188: LD_INT 4
10190: PPUSH
10191: LD_INT 0
10193: PPUSH
10194: CALL_OW 50
// end ;
10198: GO 10155
10200: POP
10201: POP
// end ;
10202: LD_VAR 0 1
10206: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10207: LD_INT 0
10209: PPUSH
10210: PPUSH
10211: PPUSH
10212: PPUSH
10213: PPUSH
// uc_side := 3 ;
10214: LD_ADDR_OWVAR 20
10218: PUSH
10219: LD_INT 3
10221: ST_TO_ADDR
// uc_nation := 3 ;
10222: LD_ADDR_OWVAR 21
10226: PUSH
10227: LD_INT 3
10229: ST_TO_ADDR
// for i := 1 to 4 do
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_INT 4
10242: PUSH
10243: FOR_TO
10244: IFFALSE 10371
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10246: LD_INT 22
10248: PPUSH
10249: LD_INT 1
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: LD_INT 42
10257: PUSH
10258: LD_INT 43
10260: PUSH
10261: LD_INT 44
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 1
10271: PPUSH
10272: LD_INT 3
10274: PPUSH
10275: CALL_OW 12
10279: ARRAY
10280: PPUSH
10281: LD_INT 40
10283: PPUSH
10284: CALL 48140 0 5
// veh := CreateVehicle ;
10288: LD_ADDR_VAR 0 4
10292: PUSH
10293: CALL_OW 45
10297: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10298: LD_VAR 0 4
10302: PPUSH
10303: LD_INT 5
10305: PPUSH
10306: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10310: LD_VAR 0 4
10314: PPUSH
10315: LD_INT 7
10317: PPUSH
10318: LD_INT 0
10320: PPUSH
10321: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10325: LD_INT 0
10327: PPUSH
10328: LD_INT 5
10330: PPUSH
10331: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10335: CALL_OW 44
10339: PPUSH
10340: LD_VAR 0 4
10344: PPUSH
10345: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PPUSH
10359: LD_VAR 0 4
10363: PPUSH
10364: CALL 81310 0 2
10368: ST_TO_ADDR
// end ;
10369: GO 10243
10371: POP
10372: POP
// for i := 1 to 3 do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: DOUBLE
10379: LD_INT 1
10381: DEC
10382: ST_TO_ADDR
10383: LD_INT 3
10385: PUSH
10386: FOR_TO
10387: IFFALSE 10514
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10389: LD_INT 22
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: LD_INT 42
10400: PUSH
10401: LD_INT 43
10403: PUSH
10404: LD_INT 44
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 1
10414: PPUSH
10415: LD_INT 3
10417: PPUSH
10418: CALL_OW 12
10422: ARRAY
10423: PPUSH
10424: LD_INT 40
10426: PPUSH
10427: CALL 48140 0 5
// veh := CreateVehicle ;
10431: LD_ADDR_VAR 0 4
10435: PUSH
10436: CALL_OW 45
10440: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10441: LD_VAR 0 4
10445: PPUSH
10446: LD_INT 5
10448: PPUSH
10449: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10453: LD_VAR 0 4
10457: PPUSH
10458: LD_INT 8
10460: PPUSH
10461: LD_INT 0
10463: PPUSH
10464: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10468: LD_INT 0
10470: PPUSH
10471: LD_INT 5
10473: PPUSH
10474: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10478: CALL_OW 44
10482: PPUSH
10483: LD_VAR 0 4
10487: PPUSH
10488: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_VAR 0 5
10501: PPUSH
10502: LD_VAR 0 4
10506: PPUSH
10507: CALL 81310 0 2
10511: ST_TO_ADDR
// end ;
10512: GO 10386
10514: POP
10515: POP
// for i := 1 to 2 do
10516: LD_ADDR_VAR 0 2
10520: PUSH
10521: DOUBLE
10522: LD_INT 1
10524: DEC
10525: ST_TO_ADDR
10526: LD_INT 2
10528: PUSH
10529: FOR_TO
10530: IFFALSE 10589
// begin PrepareSoldier ( false , 5 ) ;
10532: LD_INT 0
10534: PPUSH
10535: LD_INT 5
10537: PPUSH
10538: CALL_OW 381
// un := CreateHuman ;
10542: LD_ADDR_VAR 0 3
10546: PUSH
10547: CALL_OW 44
10551: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10552: LD_VAR 0 3
10556: PPUSH
10557: LD_INT 8
10559: PPUSH
10560: LD_INT 0
10562: PPUSH
10563: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10567: LD_ADDR_VAR 0 5
10571: PUSH
10572: LD_VAR 0 5
10576: PPUSH
10577: LD_VAR 0 3
10581: PPUSH
10582: CALL 81310 0 2
10586: ST_TO_ADDR
// end ;
10587: GO 10529
10589: POP
10590: POP
// for i in tmp do
10591: LD_ADDR_VAR 0 2
10595: PUSH
10596: LD_VAR 0 5
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10621
// ComAgressiveMove ( i , 51 , 16 ) ;
10604: LD_VAR 0 2
10608: PPUSH
10609: LD_INT 51
10611: PPUSH
10612: LD_INT 16
10614: PPUSH
10615: CALL_OW 114
10619: GO 10601
10621: POP
10622: POP
// end ;
10623: LD_VAR 0 1
10627: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10628: LD_EXP 34
10632: IFFALSE 11209
10634: GO 10636
10636: DISABLE
10637: LD_INT 0
10639: PPUSH
10640: PPUSH
10641: PPUSH
// begin enable ;
10642: ENABLE
// if not ruMobile then
10643: LD_EXP 34
10647: NOT
10648: IFFALSE 10652
// exit ;
10650: GO 11209
// for i in ruMobile do
10652: LD_ADDR_VAR 0 1
10656: PUSH
10657: LD_EXP 34
10661: PUSH
10662: FOR_IN
10663: IFFALSE 11207
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10665: LD_VAR 0 1
10669: PPUSH
10670: CALL_OW 302
10674: NOT
10675: IFTRUE 10692
10677: PUSH
10678: LD_VAR 0 1
10682: PPUSH
10683: CALL_OW 255
10687: PUSH
10688: LD_INT 3
10690: NONEQUAL
10691: OR
10692: IFFALSE 10712
// begin ruMobile := ruMobile diff i ;
10694: LD_ADDR_EXP 34
10698: PUSH
10699: LD_EXP 34
10703: PUSH
10704: LD_VAR 0 1
10708: DIFF
10709: ST_TO_ADDR
// continue ;
10710: GO 10662
// end ; if GetTag ( i ) = 300 then
10712: LD_VAR 0 1
10716: PPUSH
10717: CALL_OW 110
10721: PUSH
10722: LD_INT 300
10724: EQUAL
10725: IFFALSE 10840
// begin if GetFuel ( i ) < 50 then
10727: LD_VAR 0 1
10731: PPUSH
10732: CALL_OW 261
10736: PUSH
10737: LD_INT 50
10739: LESS
10740: IFFALSE 10799
// begin ComMoveXY ( i , 93 , 100 ) ;
10742: LD_VAR 0 1
10746: PPUSH
10747: LD_INT 93
10749: PPUSH
10750: LD_INT 100
10752: PPUSH
10753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10757: LD_INT 35
10759: PPUSH
10760: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10764: LD_VAR 0 1
10768: PPUSH
10769: LD_INT 93
10771: PPUSH
10772: LD_INT 100
10774: PPUSH
10775: CALL_OW 297
10779: PUSH
10780: LD_INT 4
10782: LESS
10783: IFFALSE 10757
// SetFuel ( i , 100 ) ;
10785: LD_VAR 0 1
10789: PPUSH
10790: LD_INT 100
10792: PPUSH
10793: CALL_OW 240
// end else
10797: GO 10840
// if not IsInArea ( i , ruParkingArea ) then
10799: LD_VAR 0 1
10803: PPUSH
10804: LD_INT 10
10806: PPUSH
10807: CALL_OW 308
10811: NOT
10812: IFFALSE 10828
// ComMoveToArea ( i , ruParkingArea ) else
10814: LD_VAR 0 1
10818: PPUSH
10819: LD_INT 10
10821: PPUSH
10822: CALL_OW 113
10826: GO 10840
// SetTag ( i , 301 ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 301
10835: PPUSH
10836: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 110
10849: PUSH
10850: LD_INT 301
10852: EQUAL
10853: IFFALSE 10983
// begin if GetLives ( i ) < 1000 then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 256
10864: PUSH
10865: LD_INT 1000
10867: LESS
10868: IFFALSE 10960
// begin if not IsDrivenBy ( i ) then
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 311
10879: NOT
10880: IFFALSE 10884
// continue ;
10882: GO 10662
// mech := IsDrivenBy ( i ) ;
10884: LD_ADDR_VAR 0 2
10888: PUSH
10889: LD_VAR 0 1
10893: PPUSH
10894: CALL_OW 311
10898: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10899: LD_VAR 0 2
10903: PPUSH
10904: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10908: LD_VAR 0 2
10912: PPUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10922: LD_INT 35
10924: PPUSH
10925: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10929: LD_VAR 0 1
10933: PPUSH
10934: CALL_OW 256
10938: PUSH
10939: LD_INT 1000
10941: EQUAL
10942: IFFALSE 10922
// ComEnterUnit ( mech , i ) ;
10944: LD_VAR 0 2
10948: PPUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 120
// end else
10958: GO 10983
// if IsDrivenBy ( i ) then
10960: LD_VAR 0 1
10964: PPUSH
10965: CALL_OW 311
10969: IFFALSE 10983
// SetTag ( i , 0 ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_INT 0
10978: PPUSH
10979: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10983: LD_VAR 0 1
10987: PPUSH
10988: CALL_OW 110
10992: PUSH
10993: LD_INT 300
10995: LESS
10996: IFFALSE 11205
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10998: LD_ADDR_VAR 0 3
11002: PUSH
11003: LD_INT 11
11005: PPUSH
11006: LD_INT 81
11008: PUSH
11009: LD_INT 3
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PPUSH
11016: CALL_OW 70
11020: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 256
11030: PUSH
11031: LD_INT 650
11033: LESS
11034: IFFALSE 11059
// begin ComStop ( i ) ;
11036: LD_VAR 0 1
11040: PPUSH
11041: CALL_OW 141
// SetTag ( i , 300 ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_INT 300
11052: PPUSH
11053: CALL_OW 109
// continue ;
11057: GO 10662
// end ; if enemy then
11059: LD_VAR 0 3
11063: IFFALSE 11103
// begin if not HasTask ( i ) then
11065: LD_VAR 0 1
11069: PPUSH
11070: CALL_OW 314
11074: NOT
11075: IFFALSE 11101
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11077: LD_VAR 0 1
11081: PPUSH
11082: LD_VAR 0 3
11086: PPUSH
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 74
11096: PPUSH
11097: CALL_OW 115
// end else
11101: GO 11205
// if ruMobile > 1 then
11103: LD_EXP 34
11107: PUSH
11108: LD_INT 1
11110: GREATER
11111: IFFALSE 11205
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
11113: LD_ADDR_VAR 0 3
11117: PUSH
11118: LD_INT 81
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PPUSH
11128: CALL_OW 69
11132: ST_TO_ADDR
// if enemy then
11133: LD_VAR 0 3
11137: IFFALSE 11205
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 116
11146: PUSH
11147: LD_INT 95
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 84
11156: PUSH
11157: LD_INT 68
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 58
11166: PUSH
11167: LD_INT 53
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 44
11176: PUSH
11177: LD_INT 35
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 45
11186: PUSH
11187: LD_INT 23
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: PPUSH
11201: CALL 84076 0 2
// end ; end ; end ;
11205: GO 10662
11207: POP
11208: POP
// end ;
11209: PPOPN 3
11211: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11212: LD_INT 3
11214: PUSH
11215: LD_INT 22
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 32
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: IFFALSE 11331
11249: GO 11251
11251: DISABLE
11252: LD_INT 0
11254: PPUSH
// begin enable ;
11255: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11256: LD_ADDR_VAR 0 1
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: LD_INT 22
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 32
11280: PUSH
11281: LD_INT 1
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PPUSH
11292: CALL_OW 69
11296: PUSH
11297: FOR_IN
11298: IFFALSE 11329
// if GetFuel ( i ) < 3 then
11300: LD_VAR 0 1
11304: PPUSH
11305: CALL_OW 261
11309: PUSH
11310: LD_INT 3
11312: LESS
11313: IFFALSE 11327
// SetFuel ( i , 3 ) ;
11315: LD_VAR 0 1
11319: PPUSH
11320: LD_INT 3
11322: PPUSH
11323: CALL_OW 240
11327: GO 11297
11329: POP
11330: POP
// end ;
11331: PPOPN 1
11333: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11334: LD_INT 29
11336: PPUSH
11337: CALL_OW 302
11341: IFFALSE 11356
11343: PUSH
11344: LD_INT 29
11346: PPUSH
11347: CALL_OW 461
11351: PUSH
11352: LD_INT 2
11354: EQUAL
11355: AND
11356: IFFALSE 11595
11358: GO 11360
11360: DISABLE
11361: LD_INT 0
11363: PPUSH
11364: PPUSH
// begin enable ;
11365: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_INT 21
11373: PUSH
11374: LD_INT 22
11376: PUSH
11377: LD_INT 23
11379: PUSH
11380: LD_INT 24
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 1
11391: PPUSH
11392: LD_INT 4
11394: PPUSH
11395: CALL_OW 12
11399: ARRAY
11400: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11401: LD_ADDR_VAR 0 2
11405: PUSH
11406: LD_INT 42
11408: PUSH
11409: LD_INT 44
11411: PUSH
11412: LD_INT 43
11414: PUSH
11415: LD_INT 46
11417: PUSH
11418: LD_INT 45
11420: PUSH
11421: LD_INT 46
11423: PUSH
11424: LD_INT 45
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: LD_OWVAR 67
11440: PUSH
11441: LD_INT 0
11443: PPUSH
11444: LD_INT 3
11446: PPUSH
11447: CALL_OW 12
11451: PLUS
11452: ARRAY
11453: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11454: LD_VAR 0 1
11458: PUSH
11459: LD_INT 21
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: IN
11469: IFFALSE 11481
11471: PUSH
11472: LD_VAR 0 2
11476: PUSH
11477: LD_INT 46
11479: EQUAL
11480: AND
11481: IFFALSE 11514
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: LD_INT 44
11490: PUSH
11491: LD_INT 45
11493: PUSH
11494: LD_INT 45
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 1
11504: PPUSH
11505: LD_INT 3
11507: PPUSH
11508: CALL_OW 12
11512: ARRAY
11513: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11514: LD_OWVAR 1
11518: PUSH
11519: LD_INT 31500
11521: PUSH
11522: LD_INT 25200
11524: PUSH
11525: LD_INT 21000
11527: PUSH
11528: LD_INT 18900
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: LD_OWVAR 67
11541: ARRAY
11542: LESS
11543: IFFALSE 11572
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11545: LD_ADDR_VAR 0 2
11549: PUSH
11550: LD_INT 44
11552: PUSH
11553: LD_INT 43
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 1
11562: PPUSH
11563: LD_INT 2
11565: PPUSH
11566: CALL_OW 12
11570: ARRAY
11571: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11572: LD_INT 29
11574: PPUSH
11575: LD_VAR 0 1
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: LD_VAR 0 2
11590: PPUSH
11591: CALL_OW 185
// end ;
11595: PPOPN 2
11597: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11598: LD_INT 28
11600: PPUSH
11601: CALL_OW 302
11605: IFFALSE 13209
11607: GO 11609
11609: DISABLE
11610: LD_INT 0
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
11619: PPUSH
11620: PPUSH
11621: PPUSH
11622: PPUSH
11623: PPUSH
11624: PPUSH
// begin enable ;
11625: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11626: LD_ADDR_VAR 0 4
11630: PUSH
11631: LD_INT 12
11633: PPUSH
11634: LD_INT 3
11636: PUSH
11637: LD_INT 24
11639: PUSH
11640: LD_INT 1000
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 70
11669: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11670: LD_ADDR_VAR 0 5
11674: PUSH
11675: LD_INT 22
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 25
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 69
11703: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11704: LD_ADDR_VAR 0 6
11708: PUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 34
11721: PUSH
11722: LD_INT 52
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PPUSH
11733: CALL_OW 69
11737: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11738: LD_ADDR_VAR 0 8
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_INT 3
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 25
11755: PUSH
11756: LD_INT 4
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11772: LD_ADDR_VAR 0 9
11776: PUSH
11777: LD_INT 81
11779: PPUSH
11780: LD_INT 93
11782: PPUSH
11783: CALL_OW 428
11787: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11788: LD_ADDR_VAR 0 10
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_INT 3
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 30
11805: PUSH
11806: LD_INT 32
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 50
11815: PUSH
11816: EMPTY
11817: LIST
11818: PUSH
11819: LD_INT 58
11821: PUSH
11822: EMPTY
11823: LIST
11824: PUSH
11825: LD_INT 3
11827: PUSH
11828: LD_INT 120
11830: PUSH
11831: LD_INT 701
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 69
11853: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11854: LD_ADDR_VAR 0 12
11858: PUSH
11859: LD_INT 22
11861: PUSH
11862: LD_INT 3
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 30
11871: PUSH
11872: LD_INT 5
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 50
11881: PUSH
11882: EMPTY
11883: LIST
11884: PUSH
11885: LD_INT 3
11887: PUSH
11888: LD_INT 62
11890: PUSH
11891: EMPTY
11892: LIST
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 69
11908: ST_TO_ADDR
// if emptyTowers then
11909: LD_VAR 0 10
11913: IFFALSE 12176
// begin for i in emptyTowers do
11915: LD_ADDR_VAR 0 1
11919: PUSH
11920: LD_VAR 0 10
11924: PUSH
11925: FOR_IN
11926: IFFALSE 12172
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11928: LD_ADDR_VAR 0 11
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_INT 3
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 54
11948: PUSH
11949: EMPTY
11950: LIST
11951: PUSH
11952: LD_INT 95
11954: PUSH
11955: LD_INT 12
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 25
11969: PUSH
11970: LD_INT 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 50
11979: PUSH
11980: EMPTY
11981: LIST
11982: PUSH
11983: LD_INT 3
11985: PUSH
11986: LD_INT 120
11988: PUSH
11989: LD_INT 701
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: ST_TO_ADDR
// if not sol then
12012: LD_VAR 0 11
12016: NOT
12017: IFFALSE 12021
// break ;
12019: GO 12172
// for j in sol do
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_VAR 0 11
12030: PUSH
12031: FOR_IN
12032: IFFALSE 12085
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
12034: LD_VAR 0 2
12038: PPUSH
12039: CALL_OW 310
12043: IFFALSE 12065
12045: PUSH
12046: LD_VAR 0 2
12050: PPUSH
12051: CALL_OW 310
12055: PPUSH
12056: CALL_OW 266
12060: PUSH
12061: LD_INT 32
12063: EQUAL
12064: AND
12065: IFFALSE 12083
// sol := sol diff j ;
12067: LD_ADDR_VAR 0 11
12071: PUSH
12072: LD_VAR 0 11
12076: PUSH
12077: LD_VAR 0 2
12081: DIFF
12082: ST_TO_ADDR
12083: GO 12031
12085: POP
12086: POP
// if not sol then
12087: LD_VAR 0 11
12091: NOT
12092: IFFALSE 12096
// break ;
12094: GO 12172
// if IsInUnit ( sol [ 1 ] ) then
12096: LD_VAR 0 11
12100: PUSH
12101: LD_INT 1
12103: ARRAY
12104: PPUSH
12105: CALL_OW 310
12109: IFFALSE 12124
// ComExit ( sol [ 1 ] ) ;
12111: LD_VAR 0 11
12115: PUSH
12116: LD_INT 1
12118: ARRAY
12119: PPUSH
12120: CALL 81708 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
12124: LD_VAR 0 11
12128: PUSH
12129: LD_INT 1
12131: ARRAY
12132: PPUSH
12133: LD_INT 701
12135: PPUSH
12136: CALL_OW 109
// SetTag ( i , 701 ) ;
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_INT 701
12147: PPUSH
12148: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
12152: LD_VAR 0 11
12156: PUSH
12157: LD_INT 1
12159: ARRAY
12160: PPUSH
12161: LD_VAR 0 1
12165: PPUSH
12166: CALL_OW 180
// end ;
12170: GO 11925
12172: POP
12173: POP
// end else
12174: GO 12422
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
12176: LD_VAR 0 11
12180: PPUSH
12181: LD_INT 3
12183: PUSH
12184: LD_INT 54
12186: PUSH
12187: EMPTY
12188: LIST
12189: PUSH
12190: LD_INT 95
12192: PUSH
12193: LD_INT 12
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 72
12209: IFFALSE 12422
// begin if barracks then
12211: LD_VAR 0 12
12215: IFFALSE 12283
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: LD_VAR 0 11
12226: PPUSH
12227: LD_INT 3
12229: PUSH
12230: LD_INT 54
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: LD_INT 95
12238: PUSH
12239: LD_INT 12
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 72
12255: PUSH
12256: FOR_IN
12257: IFFALSE 12279
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12259: LD_VAR 0 1
12263: PPUSH
12264: LD_VAR 0 12
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 120
12277: GO 12256
12279: POP
12280: POP
// end else
12281: GO 12422
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12283: LD_INT 12
12285: PPUSH
12286: LD_INT 81
12288: PUSH
12289: LD_INT 3
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 70
12300: IFFALSE 12422
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12302: LD_ADDR_VAR 0 1
12306: PUSH
12307: LD_VAR 0 11
12311: PPUSH
12312: LD_INT 3
12314: PUSH
12315: LD_INT 54
12317: PUSH
12318: EMPTY
12319: LIST
12320: PUSH
12321: LD_INT 95
12323: PUSH
12324: LD_INT 12
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: PUSH
12341: FOR_IN
12342: IFFALSE 12420
// begin SetTag ( i , 702 ) ;
12344: LD_VAR 0 1
12348: PPUSH
12349: LD_INT 702
12351: PPUSH
12352: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12356: LD_ADDR_VAR 0 13
12360: PUSH
12361: LD_INT 12
12363: PPUSH
12364: LD_INT 81
12366: PUSH
12367: LD_INT 3
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PPUSH
12374: CALL_OW 70
12378: PPUSH
12379: LD_VAR 0 1
12383: PPUSH
12384: CALL_OW 74
12388: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12389: LD_VAR 0 1
12393: PPUSH
12394: LD_VAR 0 13
12398: PPUSH
12399: CALL_OW 250
12403: PPUSH
12404: LD_VAR 0 13
12408: PPUSH
12409: CALL_OW 251
12413: PPUSH
12414: CALL_OW 114
// end ;
12418: GO 12341
12420: POP
12421: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12422: LD_ADDR_VAR 0 3
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_INT 3
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 95
12439: PUSH
12440: LD_INT 11
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 50
12449: PUSH
12450: EMPTY
12451: LIST
12452: PUSH
12453: LD_INT 25
12455: PUSH
12456: LD_INT 1
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 120
12465: PUSH
12466: LD_INT 702
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: ST_TO_ADDR
// if tmp then
12485: LD_VAR 0 3
12489: IFFALSE 12535
// for i in tmp do
12491: LD_ADDR_VAR 0 1
12495: PUSH
12496: LD_VAR 0 3
12500: PUSH
12501: FOR_IN
12502: IFFALSE 12533
// begin ComMoveXY ( i , 90 , 94 ) ;
12504: LD_VAR 0 1
12508: PPUSH
12509: LD_INT 90
12511: PPUSH
12512: LD_INT 94
12514: PPUSH
12515: CALL_OW 111
// SetTag ( i , 0 ) ;
12519: LD_VAR 0 1
12523: PPUSH
12524: LD_INT 0
12526: PPUSH
12527: CALL_OW 109
// end ;
12531: GO 12501
12533: POP
12534: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12535: LD_VAR 0 8
12539: IFFALSE 12562
12541: PUSH
12542: LD_VAR 0 5
12546: PPUSH
12547: LD_INT 120
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 72
12561: AND
12562: IFFALSE 12575
// ComExitAll ( sci ) else
12564: LD_VAR 0 8
12568: PPUSH
12569: CALL 81791 0 1
12573: GO 12650
// if sci then
12575: LD_VAR 0 8
12579: IFFALSE 12650
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12581: LD_VAR 0 8
12585: PPUSH
12586: LD_INT 3
12588: PUSH
12589: LD_INT 54
12591: PUSH
12592: EMPTY
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: IFFALSE 12616
12605: PUSH
12606: LD_VAR 0 9
12610: PPUSH
12611: CALL_OW 302
12615: AND
12616: IFFALSE 12650
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12618: LD_VAR 0 8
12622: PPUSH
12623: LD_INT 3
12625: PUSH
12626: LD_INT 54
12628: PUSH
12629: EMPTY
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 72
12640: PPUSH
12641: LD_VAR 0 9
12645: PPUSH
12646: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12650: LD_VAR 0 6
12654: PPUSH
12655: LD_INT 50
12657: PUSH
12658: EMPTY
12659: LIST
12660: PPUSH
12661: CALL_OW 72
12665: IFFALSE 12673
12667: PUSH
12668: LD_VAR 0 4
12672: AND
12673: IFFALSE 12704
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12675: LD_VAR 0 6
12679: PPUSH
12680: LD_INT 50
12682: PUSH
12683: EMPTY
12684: LIST
12685: PPUSH
12686: CALL_OW 72
12690: PPUSH
12691: LD_VAR 0 4
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: PPUSH
12700: CALL_OW 130
// if eng then
12704: LD_VAR 0 5
12708: IFFALSE 13209
// begin for i in eng do
12710: LD_ADDR_VAR 0 1
12714: PUSH
12715: LD_VAR 0 5
12719: PUSH
12720: FOR_IN
12721: IFFALSE 13207
// begin tag := GetTag ( i ) ;
12723: LD_ADDR_VAR 0 7
12727: PUSH
12728: LD_VAR 0 1
12732: PPUSH
12733: CALL_OW 110
12737: ST_TO_ADDR
// case tag of 0 :
12738: LD_VAR 0 7
12742: PUSH
12743: LD_INT 0
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12964
12751: POP
// begin if b then
12752: LD_VAR 0 4
12756: IFFALSE 12772
// begin SetTag ( i , 1 ) ;
12758: LD_VAR 0 1
12762: PPUSH
12763: LD_INT 1
12765: PPUSH
12766: CALL_OW 109
// continue ;
12770: GO 12720
// end ; if not ruBuildList then
12772: LD_EXP 35
12776: NOT
12777: IFFALSE 12793
// ComEnterUnit ( i , ruDep ) else
12779: LD_VAR 0 1
12783: PPUSH
12784: LD_INT 28
12786: PPUSH
12787: CALL_OW 120
12791: GO 12962
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12793: LD_INT 11
12795: PPUSH
12796: LD_INT 81
12798: PUSH
12799: LD_INT 3
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 70
12810: PUSH
12811: LD_INT 0
12813: EQUAL
12814: IFFALSE 12877
12816: PUSH
12817: LD_INT 28
12819: PPUSH
12820: LD_EXP 35
12824: PUSH
12825: LD_INT 1
12827: ARRAY
12828: PUSH
12829: LD_INT 1
12831: ARRAY
12832: PPUSH
12833: LD_EXP 35
12837: PUSH
12838: LD_INT 1
12840: ARRAY
12841: PUSH
12842: LD_INT 2
12844: ARRAY
12845: PPUSH
12846: LD_EXP 35
12850: PUSH
12851: LD_INT 1
12853: ARRAY
12854: PUSH
12855: LD_INT 3
12857: ARRAY
12858: PPUSH
12859: LD_EXP 35
12863: PUSH
12864: LD_INT 1
12866: ARRAY
12867: PUSH
12868: LD_INT 4
12870: ARRAY
12871: PPUSH
12872: CALL 56818 0 5
12876: AND
12877: IFFALSE 12962
// begin if IsInUnit ( i ) then
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 310
12888: IFFALSE 12901
// ComExitBuilding ( i ) else
12890: LD_VAR 0 1
12894: PPUSH
12895: CALL_OW 122
12899: GO 12962
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12901: LD_VAR 0 1
12905: PPUSH
12906: LD_EXP 35
12910: PUSH
12911: LD_INT 1
12913: ARRAY
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: LD_EXP 35
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PUSH
12928: LD_INT 2
12930: ARRAY
12931: PPUSH
12932: LD_EXP 35
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PUSH
12941: LD_INT 3
12943: ARRAY
12944: PPUSH
12945: LD_EXP 35
12949: PUSH
12950: LD_INT 1
12952: ARRAY
12953: PUSH
12954: LD_INT 4
12956: ARRAY
12957: PPUSH
12958: CALL_OW 145
// end ; end ; 1 :
12962: GO 13161
12964: LD_INT 1
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 13075
12972: POP
// begin if not b then
12973: LD_VAR 0 4
12977: NOT
12978: IFFALSE 12994
// begin SetTag ( i , 0 ) ;
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_INT 0
12987: PPUSH
12988: CALL_OW 109
// continue ;
12992: GO 12720
// end ; if IsInUnit ( i ) then
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 310
13003: IFFALSE 13014
// ComExitBuilding ( i ) ;
13005: LD_VAR 0 1
13009: PPUSH
13010: CALL_OW 122
// if GetLives ( i ) < 650 then
13014: LD_VAR 0 1
13018: PPUSH
13019: CALL_OW 256
13023: PUSH
13024: LD_INT 650
13026: LESS
13027: IFFALSE 13043
// begin SetTag ( i , 2 ) ;
13029: LD_VAR 0 1
13033: PPUSH
13034: LD_INT 2
13036: PPUSH
13037: CALL_OW 109
// continue ;
13041: GO 12720
// end ; if b then
13043: LD_VAR 0 4
13047: IFFALSE 13073
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
13049: LD_VAR 0 1
13053: PPUSH
13054: LD_VAR 0 4
13058: PPUSH
13059: LD_VAR 0 1
13063: PPUSH
13064: CALL_OW 74
13068: PPUSH
13069: CALL_OW 130
// end ; 2 :
13073: GO 13161
13075: LD_INT 2
13077: DOUBLE
13078: EQUAL
13079: IFTRUE 13083
13081: GO 13160
13083: POP
// begin if GetLives ( i ) = 1000 then
13084: LD_VAR 0 1
13088: PPUSH
13089: CALL_OW 256
13093: PUSH
13094: LD_INT 1000
13096: EQUAL
13097: IFFALSE 13113
// begin SetTag ( i , 1 ) ;
13099: LD_VAR 0 1
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 109
// continue ;
13111: GO 12720
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
13113: LD_VAR 0 1
13117: PPUSH
13118: LD_INT 84
13120: PPUSH
13121: LD_INT 93
13123: PPUSH
13124: CALL_OW 297
13128: PUSH
13129: LD_INT 6
13131: GREATER
13132: IFFALSE 13158
// begin ComMoveXY ( i , 84 , 93 ) ;
13134: LD_VAR 0 1
13138: PPUSH
13139: LD_INT 84
13141: PPUSH
13142: LD_INT 93
13144: PPUSH
13145: CALL_OW 111
// AddComHold ( i ) ;
13149: LD_VAR 0 1
13153: PPUSH
13154: CALL_OW 200
// end ; end ; end ;
13158: GO 13161
13160: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
13161: LD_VAR 0 1
13165: PPUSH
13166: LD_INT 12
13168: PPUSH
13169: CALL_OW 308
13173: NOT
13174: IFFALSE 13188
13176: PUSH
13177: LD_VAR 0 1
13181: PPUSH
13182: CALL_OW 310
13186: NOT
13187: AND
13188: IFFALSE 13205
// ComMoveXY ( i , 91 , 95 ) ;
13190: LD_VAR 0 1
13194: PPUSH
13195: LD_INT 91
13197: PPUSH
13198: LD_INT 95
13200: PPUSH
13201: CALL_OW 111
// end ;
13205: GO 12720
13207: POP
13208: POP
// end ; end ;
13209: PPOPN 13
13211: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
13212: LD_INT 0
13214: PPUSH
13215: PPUSH
13216: PPUSH
13217: PPUSH
13218: PPUSH
13219: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13220: LD_ADDR_VAR 0 3
13224: PUSH
13225: DOUBLE
13226: LD_INT 1
13228: DEC
13229: ST_TO_ADDR
13230: LD_INT 3
13232: PUSH
13233: LD_INT 4
13235: PUSH
13236: LD_INT 5
13238: PUSH
13239: LD_INT 6
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: PUSH
13248: LD_OWVAR 67
13252: ARRAY
13253: PUSH
13254: LD_VAR 0 1
13258: PLUS
13259: PUSH
13260: FOR_TO
13261: IFFALSE 13580
// begin uc_side := 6 ;
13263: LD_ADDR_OWVAR 20
13267: PUSH
13268: LD_INT 6
13270: ST_TO_ADDR
// uc_nation := 3 ;
13271: LD_ADDR_OWVAR 21
13275: PUSH
13276: LD_INT 3
13278: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13279: LD_ADDR_VAR 0 6
13283: PUSH
13284: LD_INT 21
13286: PUSH
13287: LD_INT 22
13289: PUSH
13290: LD_INT 23
13292: PUSH
13293: LD_INT 24
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 1
13304: PPUSH
13305: LD_INT 4
13307: PPUSH
13308: CALL_OW 12
13312: ARRAY
13313: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13314: LD_ADDR_VAR 0 7
13318: PUSH
13319: LD_INT 42
13321: PUSH
13322: LD_INT 44
13324: PUSH
13325: LD_INT 43
13327: PUSH
13328: LD_INT 46
13330: PUSH
13331: LD_INT 45
13333: PUSH
13334: LD_INT 46
13336: PUSH
13337: LD_INT 45
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: PUSH
13349: LD_OWVAR 67
13353: PUSH
13354: LD_INT 0
13356: PPUSH
13357: LD_INT 3
13359: PPUSH
13360: CALL_OW 12
13364: PLUS
13365: ARRAY
13366: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13367: LD_VAR 0 6
13371: PUSH
13372: LD_INT 21
13374: PUSH
13375: LD_INT 22
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: IN
13382: IFFALSE 13394
13384: PUSH
13385: LD_VAR 0 7
13389: PUSH
13390: LD_INT 46
13392: EQUAL
13393: AND
13394: IFFALSE 13423
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13396: LD_ADDR_VAR 0 7
13400: PUSH
13401: LD_INT 44
13403: PUSH
13404: LD_INT 45
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 1
13413: PPUSH
13414: LD_INT 2
13416: PPUSH
13417: CALL_OW 12
13421: ARRAY
13422: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13423: LD_OWVAR 1
13427: PUSH
13428: LD_INT 31500
13430: PUSH
13431: LD_INT 27300
13433: PUSH
13434: LD_INT 23100
13436: PUSH
13437: LD_INT 18900
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_OWVAR 67
13450: ARRAY
13451: LESS
13452: IFFALSE 13485
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13454: LD_ADDR_VAR 0 7
13458: PUSH
13459: LD_INT 44
13461: PUSH
13462: LD_INT 43
13464: PUSH
13465: LD_INT 42
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 1
13475: PPUSH
13476: LD_INT 3
13478: PPUSH
13479: CALL_OW 12
13483: ARRAY
13484: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13485: LD_VAR 0 6
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: LD_INT 3
13495: PPUSH
13496: LD_VAR 0 7
13500: PPUSH
13501: LD_INT 90
13503: PPUSH
13504: CALL 48140 0 5
// un := CreateVehicle ;
13508: LD_ADDR_VAR 0 4
13512: PUSH
13513: CALL_OW 45
13517: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13518: LD_VAR 0 4
13522: PPUSH
13523: LD_INT 140
13525: PPUSH
13526: LD_INT 146
13528: PPUSH
13529: LD_INT 0
13531: PPUSH
13532: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13536: LD_VAR 0 4
13540: PPUSH
13541: LD_INT 131
13543: PPUSH
13544: LD_INT 128
13546: PPUSH
13547: CALL_OW 111
// wait ( 0 0$3 ) ;
13551: LD_INT 105
13553: PPUSH
13554: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13558: LD_ADDR_VAR 0 5
13562: PUSH
13563: LD_VAR 0 5
13567: PPUSH
13568: LD_VAR 0 4
13572: PPUSH
13573: CALL 81310 0 2
13577: ST_TO_ADDR
// end ;
13578: GO 13260
13580: POP
13581: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13582: LD_ADDR_EXP 36
13586: PUSH
13587: LD_EXP 36
13591: PPUSH
13592: LD_VAR 0 5
13596: PPUSH
13597: CALL 81347 0 2
13601: ST_TO_ADDR
// end ;
13602: LD_VAR 0 2
13606: RET
// every 0 0$3 trigger russianAttackers do
13607: LD_EXP 36
13611: IFFALSE 13694
13613: GO 13615
13615: DISABLE
// begin enable ;
13616: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13617: LD_EXP 36
13621: PPUSH
13622: LD_INT 126
13624: PUSH
13625: LD_INT 108
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 107
13634: PUSH
13635: LD_INT 85
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 82
13644: PUSH
13645: LD_INT 62
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 73
13654: PUSH
13655: LD_INT 46
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 62
13664: PUSH
13665: LD_INT 31
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 52
13674: PUSH
13675: LD_INT 17
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL 84076 0 2
// end ;
13694: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13695: LD_OWVAR 67
13699: PUSH
13700: LD_INT 2
13702: GREATER
13703: IFFALSE 13746
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 6
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 21
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 50
13728: PUSH
13729: EMPTY
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: PPUSH
13737: CALL_OW 69
13741: PUSH
13742: LD_INT 0
13744: EQUAL
13745: AND
13746: IFFALSE 13800
13748: GO 13750
13750: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13751: LD_INT 51
13753: PPUSH
13754: LD_INT 6
13756: PPUSH
13757: LD_INT 2
13759: PPUSH
13760: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13764: LD_INT 57
13766: PPUSH
13767: LD_INT 6
13769: PPUSH
13770: LD_INT 2
13772: PPUSH
13773: CALL_OW 322
// if Difficulty > 3 then
13777: LD_OWVAR 67
13781: PUSH
13782: LD_INT 3
13784: GREATER
13785: IFFALSE 13800
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13787: LD_INT 52
13789: PPUSH
13790: LD_INT 6
13792: PPUSH
13793: LD_INT 2
13795: PPUSH
13796: CALL_OW 322
// end ; end_of_file
13800: END
// on SailEvent ( event ) do begin if event = 1 then
13801: LD_VAR 0 1
13805: PUSH
13806: LD_INT 1
13808: EQUAL
13809: IFFALSE 13839
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13811: LD_INT 2
13813: PUSH
13814: LD_INT 4
13816: PUSH
13817: LD_INT 6
13819: PUSH
13820: LD_INT 8
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: PUSH
13829: LD_OWVAR 67
13833: ARRAY
13834: PPUSH
13835: CALL 13212 0 1
// end ;
13839: PPOPN 1
13841: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13842: LD_VAR 0 1
13846: PUSH
13847: LD_EXP 28
13851: EQUAL
13852: IFFALSE 13864
13854: PUSH
13855: LD_VAR 0 2
13859: PUSH
13860: LD_INT 1
13862: EQUAL
13863: AND
13864: IFFALSE 13870
// SikorskiKilledInAction ;
13866: CALL 19055 0 0
// end ;
13870: PPOPN 3
13872: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13873: LD_INT 0
13875: PPUSH
13876: PPUSH
13877: PPUSH
13878: PPUSH
13879: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13880: LD_VAR 0 1
13884: PPUSH
13885: CALL 36746 0 1
// if un = JMM then
13889: LD_VAR 0 1
13893: PUSH
13894: LD_EXP 14
13898: EQUAL
13899: IFFALSE 13908
// YouLost ( JMM ) ;
13901: LD_STRING JMM
13903: PPUSH
13904: CALL_OW 104
// if un = Sikorski then
13908: LD_VAR 0 1
13912: PUSH
13913: LD_EXP 28
13917: EQUAL
13918: IFFALSE 13944
// if sikorskiStatus = 0 then
13920: LD_EXP 9
13924: PUSH
13925: LD_INT 0
13927: EQUAL
13928: IFFALSE 13936
// SikorskiKilledInAction else
13930: CALL 19055 0 0
13934: GO 13944
// sikorskiIsKilled := true ;
13936: LD_ADDR_EXP 10
13940: PUSH
13941: LD_INT 1
13943: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 255
13953: PUSH
13954: LD_INT 1
13956: EQUAL
13957: IFFALSE 13974
13959: PUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: CALL_OW 248
13969: PUSH
13970: LD_INT 1
13972: EQUAL
13973: AND
13974: IFFALSE 13998
13976: PUSH
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 266
13986: PUSH
13987: LD_INT 0
13989: PUSH
13990: LD_INT 1
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: IN
13997: AND
13998: IFFALSE 14007
// YouLost ( Destroyed ) ;
14000: LD_STRING Destroyed
14002: PPUSH
14003: CALL_OW 104
// if un = ruDep then
14007: LD_VAR 0 1
14011: PUSH
14012: LD_INT 28
14014: EQUAL
14015: IFFALSE 14149
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
14017: LD_ADDR_VAR 0 2
14021: PUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 3
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PPUSH
14046: CALL_OW 69
14050: PUSH
14051: FOR_IN
14052: IFFALSE 14147
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
14054: LD_ADDR_VAR 0 3
14058: PUSH
14059: LD_INT 11
14061: PPUSH
14062: LD_INT 81
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PPUSH
14072: CALL_OW 70
14076: PPUSH
14077: LD_VAR 0 2
14081: PPUSH
14082: CALL_OW 74
14086: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
14087: LD_VAR 0 2
14091: PPUSH
14092: CALL_OW 310
14096: PPUSH
14097: CALL_OW 266
14101: PUSH
14102: LD_INT 32
14104: EQUAL
14105: IFFALSE 14145
// begin ComExitBuilding ( i ) ;
14107: LD_VAR 0 2
14111: PPUSH
14112: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
14116: LD_VAR 0 2
14120: PPUSH
14121: LD_VAR 0 3
14125: PPUSH
14126: CALL_OW 250
14130: PPUSH
14131: LD_VAR 0 3
14135: PPUSH
14136: CALL_OW 251
14140: PPUSH
14141: CALL_OW 174
// end ; end ;
14145: GO 14051
14147: POP
14148: POP
// end ; if un in ruMobile then
14149: LD_VAR 0 1
14153: PUSH
14154: LD_EXP 34
14158: IN
14159: IFFALSE 14177
// ruMobile := ruMobile diff un ;
14161: LD_ADDR_EXP 34
14165: PUSH
14166: LD_EXP 34
14170: PUSH
14171: LD_VAR 0 1
14175: DIFF
14176: ST_TO_ADDR
// if GetSide ( un ) = 3 then
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 255
14186: PUSH
14187: LD_INT 3
14189: EQUAL
14190: IFFALSE 14833
// begin if GetType ( un ) = unit_building then
14192: LD_VAR 0 1
14196: PPUSH
14197: CALL_OW 247
14201: PUSH
14202: LD_INT 3
14204: EQUAL
14205: IFFALSE 14341
// begin btype := GetBType ( un ) ;
14207: LD_ADDR_VAR 0 6
14211: PUSH
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 266
14221: ST_TO_ADDR
// if btype = b_warehouse then
14222: LD_VAR 0 6
14226: PUSH
14227: LD_INT 1
14229: EQUAL
14230: IFFALSE 14240
// btype := b_depot ;
14232: LD_ADDR_VAR 0 6
14236: PUSH
14237: LD_INT 0
14239: ST_TO_ADDR
// if btype = b_barracks then
14240: LD_VAR 0 6
14244: PUSH
14245: LD_INT 5
14247: EQUAL
14248: IFFALSE 14258
// btype := b_armoury ;
14250: LD_ADDR_VAR 0 6
14254: PUSH
14255: LD_INT 4
14257: ST_TO_ADDR
// if btype = b_lab_full then
14258: LD_VAR 0 6
14262: PUSH
14263: LD_INT 8
14265: EQUAL
14266: IFFALSE 14276
// btype := b_lab ;
14268: LD_ADDR_VAR 0 6
14272: PUSH
14273: LD_INT 6
14275: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14276: LD_ADDR_EXP 35
14280: PUSH
14281: LD_EXP 35
14285: PPUSH
14286: LD_EXP 35
14290: PUSH
14291: LD_INT 1
14293: PLUS
14294: PPUSH
14295: LD_VAR 0 6
14299: PUSH
14300: LD_VAR 0 1
14304: PPUSH
14305: CALL_OW 250
14309: PUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 251
14319: PUSH
14320: LD_VAR 0 1
14324: PPUSH
14325: CALL_OW 254
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: PPUSH
14336: CALL_OW 1
14340: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14341: LD_VAR 0 1
14345: PPUSH
14346: CALL_OW 247
14350: PUSH
14351: LD_INT 2
14353: EQUAL
14354: IFFALSE 14635
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 264
14365: PUSH
14366: LD_INT 52
14368: PUSH
14369: LD_INT 51
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: IN
14376: IFFALSE 14406
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14378: LD_INT 29
14380: PPUSH
14381: LD_INT 22
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: LD_INT 3
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 264
14399: PPUSH
14400: CALL_OW 185
// end else
14404: GO 14635
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14406: LD_ADDR_VAR 0 4
14410: PUSH
14411: LD_INT 21
14413: PUSH
14414: LD_INT 22
14416: PUSH
14417: LD_INT 23
14419: PUSH
14420: LD_INT 24
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_INT 4
14434: PPUSH
14435: CALL_OW 12
14439: ARRAY
14440: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14441: LD_ADDR_VAR 0 5
14445: PUSH
14446: LD_INT 42
14448: PUSH
14449: LD_INT 44
14451: PUSH
14452: LD_INT 43
14454: PUSH
14455: LD_INT 46
14457: PUSH
14458: LD_INT 45
14460: PUSH
14461: LD_INT 46
14463: PUSH
14464: LD_INT 45
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: PUSH
14476: LD_OWVAR 67
14480: PUSH
14481: LD_INT 0
14483: PPUSH
14484: LD_INT 3
14486: PPUSH
14487: CALL_OW 12
14491: PLUS
14492: ARRAY
14493: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14494: LD_VAR 0 4
14498: PUSH
14499: LD_INT 21
14501: PUSH
14502: LD_INT 22
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: IN
14509: IFFALSE 14521
14511: PUSH
14512: LD_VAR 0 5
14516: PUSH
14517: LD_INT 46
14519: EQUAL
14520: AND
14521: IFFALSE 14554
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
14523: LD_ADDR_VAR 0 5
14527: PUSH
14528: LD_INT 44
14530: PUSH
14531: LD_INT 45
14533: PUSH
14534: LD_INT 45
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 1
14544: PPUSH
14545: LD_INT 3
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14554: LD_OWVAR 1
14558: PUSH
14559: LD_INT 31500
14561: PUSH
14562: LD_INT 27300
14564: PUSH
14565: LD_INT 23100
14567: PUSH
14568: LD_INT 21000
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: LD_OWVAR 67
14581: ARRAY
14582: LESS
14583: IFFALSE 14612
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14585: LD_ADDR_VAR 0 5
14589: PUSH
14590: LD_INT 44
14592: PUSH
14593: LD_INT 43
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 1
14602: PPUSH
14603: LD_INT 2
14605: PPUSH
14606: CALL_OW 12
14610: ARRAY
14611: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14612: LD_INT 29
14614: PPUSH
14615: LD_VAR 0 4
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: LD_VAR 0 5
14630: PPUSH
14631: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14635: LD_VAR 0 1
14639: PPUSH
14640: CALL_OW 257
14644: PUSH
14645: LD_INT 3
14647: EQUAL
14648: IFFALSE 14833
// begin killMechCounter := Inc ( killMechCounter ) ;
14650: LD_ADDR_EXP 12
14654: PUSH
14655: LD_EXP 12
14659: PPUSH
14660: CALL 82683 0 1
14664: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14665: LD_EXP 33
14669: PUSH
14670: LD_INT 0
14672: EQUAL
14673: IFTRUE 14685
14675: PUSH
14676: LD_INT 29
14678: PPUSH
14679: CALL_OW 302
14683: NOT
14684: OR
14685: IFFALSE 14689
// exit ;
14687: GO 14833
// ruMechCounter := Dec ( ruMechCounter ) ;
14689: LD_ADDR_EXP 33
14693: PUSH
14694: LD_EXP 33
14698: PPUSH
14699: CALL 82705 0 1
14703: ST_TO_ADDR
// uc_side := 3 ;
14704: LD_ADDR_OWVAR 20
14708: PUSH
14709: LD_INT 3
14711: ST_TO_ADDR
// uc_nation := 3 ;
14712: LD_ADDR_OWVAR 21
14716: PUSH
14717: LD_INT 3
14719: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14720: LD_INT 0
14722: PPUSH
14723: LD_INT 5
14725: PUSH
14726: LD_INT 6
14728: PUSH
14729: LD_INT 7
14731: PUSH
14732: LD_INT 8
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_OWVAR 67
14745: ARRAY
14746: PPUSH
14747: CALL_OW 383
// tmp := CreateHuman ;
14751: LD_ADDR_VAR 0 3
14755: PUSH
14756: CALL_OW 44
14760: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 145
14768: PPUSH
14769: LD_INT 133
14771: PPUSH
14772: LD_INT 0
14774: PPUSH
14775: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_INT 29
14786: PPUSH
14787: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14791: LD_INT 35
14793: PPUSH
14794: CALL_OW 67
// if not HasTask ( tmp ) then
14798: LD_VAR 0 3
14802: PPUSH
14803: CALL_OW 314
14807: NOT
14808: IFFALSE 14822
// ComEnterUnit ( tmp , ruFac ) ;
14810: LD_VAR 0 3
14814: PPUSH
14815: LD_INT 29
14817: PPUSH
14818: CALL_OW 120
// until IsInUnit ( tmp ) ;
14822: LD_VAR 0 3
14826: PPUSH
14827: CALL_OW 310
14831: IFFALSE 14791
// end ; end ; end ;
14833: PPOPN 6
14835: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 255
14845: PUSH
14846: LD_INT 4
14848: EQUAL
14849: IFFALSE 14866
// ComMoveXY ( driver , 40 , 47 ) ;
14851: LD_VAR 0 1
14855: PPUSH
14856: LD_INT 40
14858: PPUSH
14859: LD_INT 47
14861: PPUSH
14862: CALL_OW 111
// if GetSide ( driver ) = 3 then
14866: LD_VAR 0 1
14870: PPUSH
14871: CALL_OW 255
14875: PUSH
14876: LD_INT 3
14878: EQUAL
14879: IFFALSE 15101
// begin ComMoveXY ( driver , 90 , 97 ) ;
14881: LD_VAR 0 1
14885: PPUSH
14886: LD_INT 90
14888: PPUSH
14889: LD_INT 97
14891: PPUSH
14892: CALL_OW 111
// if IsOk ( ruFac ) then
14896: LD_INT 29
14898: PPUSH
14899: CALL_OW 302
14903: IFFALSE 15023
// begin repeat wait ( 0 0$1 ) ;
14905: LD_INT 35
14907: PPUSH
14908: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14912: LD_INT 29
14914: PPUSH
14915: CALL_OW 313
14919: PUSH
14920: LD_INT 6
14922: LESS
14923: IFTRUE 14936
14925: PUSH
14926: LD_VAR 0 1
14930: PPUSH
14931: CALL_OW 301
14935: OR
14936: IFFALSE 14905
// if IsDead ( driver ) then
14938: LD_VAR 0 1
14942: PPUSH
14943: CALL_OW 301
14947: IFFALSE 14951
// exit ;
14949: GO 15101
// repeat wait ( 0 0$10 ) ;
14951: LD_INT 350
14953: PPUSH
14954: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14958: LD_VAR 0 1
14962: PPUSH
14963: CALL_OW 314
14967: NOT
14968: IFFALSE 14983
14970: PUSH
14971: LD_INT 29
14973: PPUSH
14974: CALL_OW 313
14978: PUSH
14979: LD_INT 6
14981: LESS
14982: AND
14983: IFFALSE 14997
// ComEnterUnit ( driver , ruFac ) ;
14985: LD_VAR 0 1
14989: PPUSH
14990: LD_INT 29
14992: PPUSH
14993: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 301
15006: IFTRUE 15019
15008: PUSH
15009: LD_VAR 0 1
15013: PPUSH
15014: CALL_OW 310
15018: OR
15019: IFFALSE 14951
// end else
15021: GO 15101
// begin ComMoveXY ( driver , 142 , 148 ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: LD_INT 142
15030: PPUSH
15031: LD_INT 148
15033: PPUSH
15034: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15038: LD_INT 35
15040: PPUSH
15041: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 301
15054: IFTRUE 15073
15056: PUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: LD_INT 142
15064: PPUSH
15065: LD_INT 148
15067: PPUSH
15068: CALL_OW 307
15072: OR
15073: IFFALSE 15038
// if IsAt ( driver , 142 , 148 ) then
15075: LD_VAR 0 1
15079: PPUSH
15080: LD_INT 142
15082: PPUSH
15083: LD_INT 148
15085: PPUSH
15086: CALL_OW 307
15090: IFFALSE 15101
// RemoveUnit ( driver ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL_OW 64
// end ; end ; end ;
15101: PPOPN 4
15103: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
15104: LD_VAR 0 2
15108: PPUSH
15109: CALL_OW 257
15113: PUSH
15114: LD_INT 3
15116: EQUAL
15117: IFFALSE 15134
15119: PUSH
15120: LD_VAR 0 1
15124: PPUSH
15125: CALL_OW 255
15129: PUSH
15130: LD_INT 3
15132: EQUAL
15133: AND
15134: IFFALSE 15146
15136: PUSH
15137: LD_VAR 0 1
15141: PUSH
15142: LD_INT 29
15144: EQUAL
15145: AND
15146: IFFALSE 15160
// SetLives ( un , 1000 ) ;
15148: LD_VAR 0 2
15152: PPUSH
15153: LD_INT 1000
15155: PPUSH
15156: CALL_OW 234
// if GetTag ( b ) = 701 then
15160: LD_VAR 0 1
15164: PPUSH
15165: CALL_OW 110
15169: PUSH
15170: LD_INT 701
15172: EQUAL
15173: IFFALSE 15199
// begin SetTag ( b , 0 ) ;
15175: LD_VAR 0 1
15179: PPUSH
15180: LD_INT 0
15182: PPUSH
15183: CALL_OW 109
// SetTag ( un , 0 ) ;
15187: LD_VAR 0 2
15191: PPUSH
15192: LD_INT 0
15194: PPUSH
15195: CALL_OW 109
// end ; end ;
15199: PPOPN 2
15201: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 255
15211: PUSH
15212: LD_INT 3
15214: PUSH
15215: LD_INT 6
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: IN
15222: IFFALSE 15239
15224: PUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 263
15234: PUSH
15235: LD_INT 3
15237: EQUAL
15238: AND
15239: IFFALSE 15248
15241: PUSH
15242: LD_EXP 7
15246: NOT
15247: AND
15248: IFFALSE 15267
// begin seenComputer := true ;
15250: LD_ADDR_EXP 7
15254: PUSH
15255: LD_INT 1
15257: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL 18232 0 1
// end ; end ;
15267: PPOPN 1
15269: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15270: LD_INT 0
15272: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_VAR 0 2
15282: PPUSH
15283: CALL 36804 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15287: LD_VAR 0 1
15291: PPUSH
15292: CALL_OW 255
15296: PUSH
15297: LD_INT 3
15299: EQUAL
15300: IFFALSE 15317
15302: PUSH
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 263
15312: PUSH
15313: LD_INT 1
15315: EQUAL
15316: AND
15317: IFFALSE 15353
15319: PUSH
15320: LD_VAR 0 1
15324: PPUSH
15325: CALL_OW 264
15329: PUSH
15330: LD_INT 42
15332: PUSH
15333: LD_INT 43
15335: PUSH
15336: LD_INT 44
15338: PUSH
15339: LD_INT 46
15341: PUSH
15342: LD_INT 45
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: IN
15352: AND
15353: IFFALSE 15383
// begin SetTag ( vehicle , 300 ) ;
15355: LD_VAR 0 1
15359: PPUSH
15360: LD_INT 300
15362: PPUSH
15363: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15367: LD_ADDR_EXP 34
15371: PUSH
15372: LD_EXP 34
15376: PUSH
15377: LD_VAR 0 1
15381: UNION
15382: ST_TO_ADDR
// end ; end ;
15383: PPOPN 3
15385: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15386: LD_INT 0
15388: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15389: LD_VAR 0 2
15393: PPUSH
15394: LD_VAR 0 3
15398: PPUSH
15399: LD_INT 13
15401: PPUSH
15402: CALL_OW 309
15406: IFFALSE 15539
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15408: LD_ADDR_VAR 0 6
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 3
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 50
15425: PUSH
15426: EMPTY
15427: LIST
15428: PUSH
15429: LD_INT 34
15431: PUSH
15432: LD_INT 51
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: ST_TO_ADDR
// if not cargo then
15449: LD_VAR 0 6
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15539
// wait ( 0 0$5 ) ;
15458: LD_INT 175
15460: PPUSH
15461: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15465: LD_VAR 0 6
15469: PUSH
15470: LD_INT 1
15472: ARRAY
15473: PPUSH
15474: LD_INT 28
15476: PPUSH
15477: CALL_OW 296
15481: PUSH
15482: LD_INT 6
15484: LESS
15485: IFFALSE 15506
15487: PUSH
15488: LD_VAR 0 6
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PPUSH
15497: CALL_OW 261
15501: PUSH
15502: LD_INT 50
15504: LESS
15505: AND
15506: IFFALSE 15520
// ComMoveUnit ( cargo , ruDep ) ;
15508: LD_VAR 0 6
15512: PPUSH
15513: LD_INT 28
15515: PPUSH
15516: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15520: LD_VAR 0 6
15524: PPUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: LD_VAR 0 3
15534: PPUSH
15535: CALL_OW 177
// end ; end ;
15539: PPOPN 6
15541: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 264
15551: PUSH
15552: LD_INT 45
15554: EQUAL
15555: IFFALSE 15572
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15557: LD_ADDR_EXP 11
15561: PUSH
15562: LD_EXP 11
15566: PPUSH
15567: CALL 82683 0 1
15571: ST_TO_ADDR
// end ;
15572: PPOPN 4
15574: END
// on BuildingComplete ( b ) do var i , tmp ;
15575: LD_INT 0
15577: PPUSH
15578: PPUSH
// begin if GetSide ( b ) = 3 then
15579: LD_VAR 0 1
15583: PPUSH
15584: CALL_OW 255
15588: PUSH
15589: LD_INT 3
15591: EQUAL
15592: IFFALSE 15689
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15594: LD_ADDR_EXP 35
15598: PUSH
15599: LD_EXP 35
15603: PPUSH
15604: LD_INT 1
15606: PPUSH
15607: CALL_OW 3
15611: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 266
15621: PUSH
15622: LD_INT 4
15624: EQUAL
15625: IFFALSE 15636
// ComUpgrade ( b ) ;
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 266
15645: PUSH
15646: LD_INT 32
15648: PUSH
15649: LD_INT 33
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: IN
15656: IFFALSE 15689
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15658: LD_VAR 0 1
15662: PPUSH
15663: LD_INT 46
15665: PUSH
15666: LD_INT 45
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 1
15675: PPUSH
15676: LD_INT 2
15678: PPUSH
15679: CALL_OW 12
15683: ARRAY
15684: PPUSH
15685: CALL_OW 208
// end ; end ; end_of_file
15689: PPOPN 3
15691: END
// export function Action ; var i , tmp , un , inUnit ; begin
15692: LD_INT 0
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
// Video ( true ) ;
15699: LD_INT 1
15701: PPUSH
15702: CALL 81282 0 1
// invincibleMode := true ;
15706: LD_ADDR_EXP 5
15710: PUSH
15711: LD_INT 1
15713: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15714: LD_INT 50
15716: PPUSH
15717: LD_INT 12
15719: PPUSH
15720: LD_INT 1
15722: PPUSH
15723: LD_INT 56
15725: NEG
15726: PPUSH
15727: CALL 81194 0 4
// CenterOnXY ( 50 , 12 ) ;
15731: LD_INT 50
15733: PPUSH
15734: LD_INT 12
15736: PPUSH
15737: CALL_OW 84
// wait ( 0 0$3 ) ;
15741: LD_INT 105
15743: PPUSH
15744: CALL_OW 67
// PrepareStartRussianAttack ;
15748: CALL 10207 0 0
// CenterOnXY ( 66 , 47 ) ;
15752: LD_INT 66
15754: PPUSH
15755: LD_INT 47
15757: PPUSH
15758: CALL_OW 84
// wait ( 0 0$5 ) ;
15762: LD_INT 175
15764: PPUSH
15765: CALL_OW 67
// case gammaCommander of 1 :
15769: LD_EXP 13
15773: PUSH
15774: LD_INT 1
15776: DOUBLE
15777: EQUAL
15778: IFTRUE 15782
15780: GO 15797
15782: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15783: LD_EXP 16
15787: PPUSH
15788: LD_STRING D1-Don-1
15790: PPUSH
15791: CALL_OW 88
15795: GO 15844
15797: LD_INT 2
15799: DOUBLE
15800: EQUAL
15801: IFTRUE 15805
15803: GO 15820
15805: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15806: LD_EXP 15
15810: PPUSH
15811: LD_STRING D1-Brown-1
15813: PPUSH
15814: CALL_OW 88
15818: GO 15844
15820: LD_INT 3
15822: DOUBLE
15823: EQUAL
15824: IFTRUE 15828
15826: GO 15843
15828: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15829: LD_EXP 25
15833: PPUSH
15834: LD_STRING D1-VanH-1
15836: PPUSH
15837: CALL_OW 88
15841: GO 15844
15843: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15844: LD_ADDR_VAR 0 3
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 33
15861: PUSH
15862: LD_INT 2
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 61
15871: PUSH
15872: EMPTY
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: PPUSH
15880: CALL_OW 69
15884: ST_TO_ADDR
// if tmp then
15885: LD_VAR 0 3
15889: IFFALSE 15906
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15891: LD_VAR 0 3
15895: PPUSH
15896: LD_INT 74
15898: PPUSH
15899: LD_INT 44
15901: PPUSH
15902: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15906: LD_ADDR_VAR 0 3
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_INT 1
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 25
15923: PUSH
15924: LD_INT 1
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 69
15939: PUSH
15940: LD_EXP 16
15944: PUSH
15945: LD_EXP 15
15949: PUSH
15950: LD_EXP 25
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: DIFF
15960: ST_TO_ADDR
// if tmp then
15961: LD_VAR 0 3
15965: IFFALSE 16045
// for i in tmp do
15967: LD_ADDR_VAR 0 2
15971: PUSH
15972: LD_VAR 0 3
15976: PUSH
15977: FOR_IN
15978: IFFALSE 16043
// begin inUnit := IsInUnit ( i ) ;
15980: LD_ADDR_VAR 0 5
15984: PUSH
15985: LD_VAR 0 2
15989: PPUSH
15990: CALL_OW 310
15994: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15995: LD_VAR 0 5
15999: IFFALSE 16023
16001: PUSH
16002: LD_VAR 0 5
16006: PPUSH
16007: CALL_OW 266
16011: PUSH
16012: LD_INT 32
16014: PUSH
16015: LD_INT 31
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: IN
16022: AND
16023: IFFALSE 16041
// tmp := tmp diff i ;
16025: LD_ADDR_VAR 0 3
16029: PUSH
16030: LD_VAR 0 3
16034: PUSH
16035: LD_VAR 0 2
16039: DIFF
16040: ST_TO_ADDR
// end ;
16041: GO 15977
16043: POP
16044: POP
// if tmp then
16045: LD_VAR 0 3
16049: IFFALSE 16139
// begin ComExitAll ( tmp ) ;
16051: LD_VAR 0 3
16055: PPUSH
16056: CALL 81791 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
16060: LD_VAR 0 3
16064: PPUSH
16065: LD_INT 74
16067: PPUSH
16068: LD_INT 44
16070: PPUSH
16071: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
16075: LD_ADDR_VAR 0 3
16079: PUSH
16080: LD_INT 22
16082: PUSH
16083: LD_INT 1
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 25
16092: PUSH
16093: LD_INT 4
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: ST_TO_ADDR
// if tmp then
16109: LD_VAR 0 3
16113: IFFALSE 16139
// begin ComExitAll ( tmp ) ;
16115: LD_VAR 0 3
16119: PPUSH
16120: CALL 81791 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
16124: LD_VAR 0 3
16128: PPUSH
16129: LD_INT 66
16131: PPUSH
16132: LD_INT 28
16134: PPUSH
16135: CALL_OW 171
// end ; end ; game_speed := 4 ;
16139: LD_ADDR_OWVAR 65
16143: PUSH
16144: LD_INT 4
16146: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16147: LD_INT 70
16149: PPUSH
16150: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
16154: LD_EXP 29
16158: PPUSH
16159: LD_STRING D1-Har-1
16161: PPUSH
16162: CALL_OW 94
// case gammaCommander of 1 :
16166: LD_EXP 13
16170: PUSH
16171: LD_INT 1
16173: DOUBLE
16174: EQUAL
16175: IFTRUE 16179
16177: GO 16194
16179: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
16180: LD_EXP 16
16184: PPUSH
16185: LD_STRING D1-Don-2
16187: PPUSH
16188: CALL_OW 88
16192: GO 16241
16194: LD_INT 2
16196: DOUBLE
16197: EQUAL
16198: IFTRUE 16202
16200: GO 16217
16202: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
16203: LD_EXP 15
16207: PPUSH
16208: LD_STRING D1-Brown-2
16210: PPUSH
16211: CALL_OW 88
16215: GO 16241
16217: LD_INT 3
16219: DOUBLE
16220: EQUAL
16221: IFTRUE 16225
16223: GO 16240
16225: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
16226: LD_EXP 25
16230: PPUSH
16231: LD_STRING D1-VanH-2
16233: PPUSH
16234: CALL_OW 88
16238: GO 16241
16240: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
16241: LD_EXP 29
16245: PPUSH
16246: LD_STRING D1-Har-2
16248: PPUSH
16249: CALL_OW 94
// invincibleMode := false ;
16253: LD_ADDR_EXP 5
16257: PUSH
16258: LD_INT 0
16260: ST_TO_ADDR
// Video ( false ) ;
16261: LD_INT 0
16263: PPUSH
16264: CALL 81282 0 1
// ChangeMissionObjectives ( M1 ) ;
16268: LD_STRING M1
16270: PPUSH
16271: CALL_OW 337
// SaveForQuickRestart ;
16275: CALL_OW 22
// wait ( 2 2$30 ) ;
16279: LD_INT 5250
16281: PPUSH
16282: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16286: LD_INT 1
16288: PPUSH
16289: CALL 13212 0 1
// wait ( 4 4$30 ) ;
16293: LD_INT 9450
16295: PPUSH
16296: CALL_OW 67
// if Difficulty > 1 then
16300: LD_OWVAR 67
16304: PUSH
16305: LD_INT 1
16307: GREATER
16308: IFFALSE 16317
// PrepareRussianAttack ( 2 ) ;
16310: LD_INT 2
16312: PPUSH
16313: CALL 13212 0 1
// if Difficulty > 2 then
16317: LD_OWVAR 67
16321: PUSH
16322: LD_INT 2
16324: GREATER
16325: IFFALSE 16484
// begin for i := 1 to 4 do
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_INT 4
16339: PUSH
16340: FOR_TO
16341: IFFALSE 16426
// begin uc_side := 6 ;
16343: LD_ADDR_OWVAR 20
16347: PUSH
16348: LD_INT 6
16350: ST_TO_ADDR
// uc_nation := 3 ;
16351: LD_ADDR_OWVAR 21
16355: PUSH
16356: LD_INT 3
16358: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16359: LD_INT 0
16361: PPUSH
16362: LD_INT 7
16364: PPUSH
16365: CALL_OW 381
// un := CreateHuman ;
16369: LD_ADDR_VAR 0 4
16373: PUSH
16374: CALL_OW 44
16378: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16379: LD_VAR 0 4
16383: PPUSH
16384: LD_INT 122
16386: PPUSH
16387: LD_INT 89
16389: PPUSH
16390: LD_INT 3
16392: PPUSH
16393: LD_INT 0
16395: PPUSH
16396: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16400: LD_VAR 0 4
16404: PPUSH
16405: LD_INT 88
16407: PPUSH
16408: LD_INT 42
16410: PPUSH
16411: CALL_OW 114
// AddComHold ( un ) ;
16415: LD_VAR 0 4
16419: PPUSH
16420: CALL_OW 200
// end ;
16424: GO 16340
16426: POP
16427: POP
// PrepareScientist ( false , 6 ) ;
16428: LD_INT 0
16430: PPUSH
16431: LD_INT 6
16433: PPUSH
16434: CALL_OW 384
// un := CreateHuman ;
16438: LD_ADDR_VAR 0 4
16442: PUSH
16443: CALL_OW 44
16447: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16448: LD_VAR 0 4
16452: PPUSH
16453: LD_INT 122
16455: PPUSH
16456: LD_INT 89
16458: PPUSH
16459: LD_INT 3
16461: PPUSH
16462: LD_INT 0
16464: PPUSH
16465: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16469: LD_VAR 0 4
16473: PPUSH
16474: LD_INT 91
16476: PPUSH
16477: LD_INT 48
16479: PPUSH
16480: CALL_OW 111
// end ; end ;
16484: LD_VAR 0 1
16488: RET
// every 0 0$1 trigger invincibleMode do var i ;
16489: LD_EXP 5
16493: IFFALSE 16590
16495: GO 16497
16497: DISABLE
16498: LD_INT 0
16500: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16501: LD_ADDR_VAR 0 1
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 3
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 3
16546: PUSH
16547: LD_INT 24
16549: PUSH
16550: LD_INT 900
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: PPUSH
16566: CALL_OW 69
16570: PUSH
16571: FOR_IN
16572: IFFALSE 16588
// SetLives ( i , 900 ) ;
16574: LD_VAR 0 1
16578: PPUSH
16579: LD_INT 900
16581: PPUSH
16582: CALL_OW 234
16586: GO 16571
16588: POP
16589: POP
// end ;
16590: PPOPN 1
16592: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16593: LD_OWVAR 1
16597: PUSH
16598: LD_INT 14700
16600: GREATER
16601: IFFALSE 18229
16603: GO 16605
16605: DISABLE
16606: LD_INT 0
16608: PPUSH
16609: PPUSH
// begin PrepareSupportFromDelta ;
16610: CALL 4111 0 0
// deltaSupport := true ;
16614: LD_ADDR_EXP 6
16618: PUSH
16619: LD_INT 1
16621: ST_TO_ADDR
// dialog := false ;
16622: LD_ADDR_VAR 0 1
16626: PUSH
16627: LD_INT 0
16629: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16630: LD_EXP 21
16634: PPUSH
16635: CALL_OW 302
16639: IFFALSE 16661
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16641: LD_ADDR_VAR 0 1
16645: PUSH
16646: LD_EXP 21
16650: PPUSH
16651: LD_STRING D2-Glad-1
16653: PPUSH
16654: CALL_OW 88
16658: ST_TO_ADDR
16659: GO 16743
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16661: LD_ADDR_VAR 0 1
16665: PUSH
16666: LD_INT 22
16668: PUSH
16669: LD_INT 1
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 120
16678: PUSH
16679: LD_INT 107
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 23
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: PPUSH
16712: CALL_OW 69
16716: PUSH
16717: LD_EXP 27
16721: PUSH
16722: LD_EXP 26
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: DIFF
16731: PPUSH
16732: LD_STRING D2-Sol1-1
16734: PPUSH
16735: LD_STRING D2-FSol1-1
16737: PPUSH
16738: CALL 20524 0 3
16742: ST_TO_ADDR
// if dialog then
16743: LD_VAR 0 1
16747: IFFALSE 16854
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16749: LD_EXP 16
16753: PPUSH
16754: CALL_OW 302
16758: IFFALSE 16770
16760: PUSH
16761: LD_EXP 13
16765: PUSH
16766: LD_INT 1
16768: EQUAL
16769: AND
16770: IFFALSE 16784
// Say ( Donaldson , D2-Don-1 ) ;
16772: LD_EXP 16
16776: PPUSH
16777: LD_STRING D2-Don-1
16779: PPUSH
16780: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16784: LD_EXP 15
16788: PPUSH
16789: CALL_OW 302
16793: IFFALSE 16805
16795: PUSH
16796: LD_EXP 13
16800: PUSH
16801: LD_INT 2
16803: EQUAL
16804: AND
16805: IFFALSE 16819
// Say ( Brown , D2-Brown-1 ) ;
16807: LD_EXP 15
16811: PPUSH
16812: LD_STRING D2-Brown-1
16814: PPUSH
16815: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16819: LD_EXP 25
16823: PPUSH
16824: CALL_OW 302
16828: IFFALSE 16840
16830: PUSH
16831: LD_EXP 13
16835: PUSH
16836: LD_INT 3
16838: EQUAL
16839: AND
16840: IFFALSE 16854
// Say ( Houten , D2-VanH-1 ) ;
16842: LD_EXP 25
16846: PPUSH
16847: LD_STRING D2-VanH-1
16849: PPUSH
16850: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16854: LD_INT 3
16856: PPUSH
16857: CALL 13212 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16861: LD_STRING 07_time
16863: PPUSH
16864: LD_INT 18900
16866: PPUSH
16867: CALL_OW 30
16871: PUSH
16872: LD_INT 3
16874: DIV
16875: PPUSH
16876: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16880: LD_INT 34
16882: PPUSH
16883: LD_INT 1
16885: PPUSH
16886: CALL_OW 321
16890: PUSH
16891: LD_INT 2
16893: EQUAL
16894: IFFALSE 16903
// SetAchievement ( ACH_HEAVYGUN ) ;
16896: LD_STRING ACH_HEAVYGUN
16898: PPUSH
16899: CALL_OW 543
// PrepareMacmillanSquad ;
16903: CALL 4887 0 0
// wait ( 0 0$1 ) ;
16907: LD_INT 35
16909: PPUSH
16910: CALL_OW 67
// DialogueOn ;
16914: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16918: LD_EXP 14
16922: PPUSH
16923: CALL_OW 87
// dwait ( 0 0$2 ) ;
16927: LD_INT 70
16929: PPUSH
16930: CALL_OW 68
// DialogueOff ;
16934: CALL_OW 7
// wait ( 0 0$10 ) ;
16938: LD_INT 350
16940: PPUSH
16941: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16945: LD_INT 1
16947: PPUSH
16948: CALL_OW 427
// p := 0 ;
16952: LD_ADDR_VAR 0 2
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16960: LD_INT 35
16962: PPUSH
16963: CALL_OW 67
// p := Inc ( p ) ;
16967: LD_ADDR_VAR 0 2
16971: PUSH
16972: LD_VAR 0 2
16976: PPUSH
16977: CALL 82683 0 1
16981: ST_TO_ADDR
// if p > 300 then
16982: LD_VAR 0 2
16986: PUSH
16987: LD_INT 300
16989: GREATER
16990: IFFALSE 16994
// exit ;
16992: GO 18229
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16994: LD_EXP 14
16998: PPUSH
16999: LD_INT 15
17001: PPUSH
17002: CALL_OW 308
17006: IFTRUE 17027
17008: PUSH
17009: LD_EXP 14
17013: PPUSH
17014: CALL_OW 310
17018: PPUSH
17019: LD_INT 15
17021: PPUSH
17022: CALL_OW 308
17026: OR
17027: IFTRUE 17049
17029: PUSH
17030: LD_EXP 14
17034: PPUSH
17035: LD_EXP 27
17039: PPUSH
17040: CALL_OW 296
17044: PUSH
17045: LD_INT 10
17047: LESS
17048: OR
17049: IFTRUE 17116
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 2
17064: PUSH
17065: LD_INT 120
17067: PUSH
17068: LD_INT 106
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 120
17077: PUSH
17078: LD_INT 107
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 91
17092: PUSH
17093: LD_EXP 14
17097: PUSH
17098: LD_INT 12
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: PPUSH
17111: CALL_OW 69
17115: OR
17116: IFFALSE 16960
// DialogueOn ;
17118: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
17122: LD_EXP 14
17126: PPUSH
17127: LD_STRING D3-JMM-1
17129: PPUSH
17130: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17134: LD_EXP 16
17138: PPUSH
17139: CALL_OW 302
17143: IFFALSE 17155
17145: PUSH
17146: LD_EXP 13
17150: PUSH
17151: LD_INT 1
17153: EQUAL
17154: AND
17155: IFFALSE 17171
// Say ( Donaldson , D3-Don-1 ) else
17157: LD_EXP 16
17161: PPUSH
17162: LD_STRING D3-Don-1
17164: PPUSH
17165: CALL_OW 88
17169: GO 17267
// begin if gammaCommander = 1 then
17171: LD_EXP 13
17175: PUSH
17176: LD_INT 1
17178: EQUAL
17179: IFFALSE 17267
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
17181: LD_INT 22
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 21
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 23
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 120
17213: PUSH
17214: LD_INT 106
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 26
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: PPUSH
17238: CALL_OW 69
17242: PPUSH
17243: LD_STRING D3-Sol1-1
17245: PPUSH
17246: LD_STRING 
17248: PPUSH
17249: CALL 20524 0 3
17253: IFFALSE 17267
// Say ( JMM , D3-JMM-2 ) ;
17255: LD_EXP 14
17259: PPUSH
17260: LD_STRING D3-JMM-2
17262: PPUSH
17263: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17267: LD_EXP 15
17271: PPUSH
17272: CALL_OW 302
17276: IFFALSE 17288
17278: PUSH
17279: LD_EXP 13
17283: PUSH
17284: LD_INT 2
17286: EQUAL
17287: AND
17288: IFFALSE 17304
// Say ( Brown , D3-Brown-1 ) else
17290: LD_EXP 15
17294: PPUSH
17295: LD_STRING D3-Brown-1
17297: PPUSH
17298: CALL_OW 88
17302: GO 17400
// begin if gammaCommander = 2 then
17304: LD_EXP 13
17308: PUSH
17309: LD_INT 2
17311: EQUAL
17312: IFFALSE 17400
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17314: LD_INT 22
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 21
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 23
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 120
17346: PUSH
17347: LD_INT 106
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 26
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: PPUSH
17371: CALL_OW 69
17375: PPUSH
17376: LD_STRING D3-Sol1-1a
17378: PPUSH
17379: LD_STRING 
17381: PPUSH
17382: CALL 20524 0 3
17386: IFFALSE 17400
// Say ( JMM , D3-JMM-2 ) ;
17388: LD_EXP 14
17392: PPUSH
17393: LD_STRING D3-JMM-2
17395: PPUSH
17396: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17400: LD_EXP 25
17404: PPUSH
17405: CALL_OW 302
17409: IFFALSE 17421
17411: PUSH
17412: LD_EXP 13
17416: PUSH
17417: LD_INT 3
17419: EQUAL
17420: AND
17421: IFFALSE 17437
// Say ( Houten , D3-VanH-1 ) else
17423: LD_EXP 25
17427: PPUSH
17428: LD_STRING D3-VanH-1
17430: PPUSH
17431: CALL_OW 88
17435: GO 17533
// begin if gammaCommander = 3 then
17437: LD_EXP 13
17441: PUSH
17442: LD_INT 3
17444: EQUAL
17445: IFFALSE 17533
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17447: LD_INT 22
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 21
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 23
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 120
17479: PUSH
17480: LD_INT 106
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 26
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: PPUSH
17509: LD_STRING D3-Sol1-1b
17511: PPUSH
17512: LD_STRING 
17514: PPUSH
17515: CALL 20524 0 3
17519: IFFALSE 17533
// Say ( JMM , D3-JMM-2 ) ;
17521: LD_EXP 14
17525: PPUSH
17526: LD_STRING D3-JMM-2
17528: PPUSH
17529: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17533: LD_EXP 27
17537: PPUSH
17538: CALL_OW 302
17542: IFFALSE 17570
// begin Say ( Joan , D3a-Joan-1 ) ;
17544: LD_EXP 27
17548: PPUSH
17549: LD_STRING D3a-Joan-1
17551: PPUSH
17552: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17556: LD_EXP 14
17560: PPUSH
17561: LD_STRING D3a-JMM-1
17563: PPUSH
17564: CALL_OW 88
// end else
17568: GO 18004
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17570: LD_STRING 06_JoanStatus_1
17572: PPUSH
17573: LD_INT 0
17575: PPUSH
17576: CALL_OW 30
17580: PUSH
17581: LD_INT 1
17583: EQUAL
17584: IFFALSE 18004
// begin Say ( JMM , D3b-JMM-1 ) ;
17586: LD_EXP 14
17590: PPUSH
17591: LD_STRING D3b-JMM-1
17593: PPUSH
17594: CALL_OW 88
// dialog := false ;
17598: LD_ADDR_VAR 0 1
17602: PUSH
17603: LD_INT 0
17605: ST_TO_ADDR
// if gammaCommander = 1 then
17606: LD_EXP 13
17610: PUSH
17611: LD_INT 1
17613: EQUAL
17614: IFFALSE 17725
// if IsOK ( Donaldson ) then
17616: LD_EXP 16
17620: PPUSH
17621: CALL_OW 302
17625: IFFALSE 17647
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17627: LD_ADDR_VAR 0 1
17631: PUSH
17632: LD_EXP 16
17636: PPUSH
17637: LD_STRING D3b-Don-1
17639: PPUSH
17640: CALL_OW 88
17644: ST_TO_ADDR
17645: GO 17725
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17647: LD_ADDR_VAR 0 1
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 21
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 23
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 120
17684: PUSH
17685: LD_INT 106
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 26
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: PPUSH
17709: CALL_OW 69
17713: PPUSH
17714: LD_STRING D3b-Sol1-1
17716: PPUSH
17717: LD_STRING 
17719: PPUSH
17720: CALL 20524 0 3
17724: ST_TO_ADDR
// if gammaCommander = 2 then
17725: LD_EXP 13
17729: PUSH
17730: LD_INT 2
17732: EQUAL
17733: IFFALSE 17844
// if IsOk ( Brown ) then
17735: LD_EXP 15
17739: PPUSH
17740: CALL_OW 302
17744: IFFALSE 17766
// dialog := Say ( Brown , D3b-Brown-1 ) else
17746: LD_ADDR_VAR 0 1
17750: PUSH
17751: LD_EXP 15
17755: PPUSH
17756: LD_STRING D3b-Brown-1
17758: PPUSH
17759: CALL_OW 88
17763: ST_TO_ADDR
17764: GO 17844
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17766: LD_ADDR_VAR 0 1
17770: PUSH
17771: LD_INT 22
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 23
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 120
17803: PUSH
17804: LD_INT 106
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 26
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: PPUSH
17833: LD_STRING D3b-Sol1-1
17835: PPUSH
17836: LD_STRING 
17838: PPUSH
17839: CALL 20524 0 3
17843: ST_TO_ADDR
// if gammaCommander = 3 then
17844: LD_EXP 13
17848: PUSH
17849: LD_INT 3
17851: EQUAL
17852: IFFALSE 17963
// if IsOk ( Houten ) then
17854: LD_EXP 25
17858: PPUSH
17859: CALL_OW 302
17863: IFFALSE 17885
// dialog := Say ( Houten , D3b-VanH-1 ) else
17865: LD_ADDR_VAR 0 1
17869: PUSH
17870: LD_EXP 25
17874: PPUSH
17875: LD_STRING D3b-VanH-1
17877: PPUSH
17878: CALL_OW 88
17882: ST_TO_ADDR
17883: GO 17963
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17885: LD_ADDR_VAR 0 1
17889: PUSH
17890: LD_INT 22
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 21
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 23
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 120
17922: PUSH
17923: LD_INT 106
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 26
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: PPUSH
17947: CALL_OW 69
17951: PPUSH
17952: LD_STRING D3b-Sol1-1
17954: PPUSH
17955: LD_STRING 
17957: PPUSH
17958: CALL 20524 0 3
17962: ST_TO_ADDR
// if dialog then
17963: LD_VAR 0 1
17967: IFFALSE 18004
// begin Say ( JMM , D3b-JMM-2 ) ;
17969: LD_EXP 14
17973: PPUSH
17974: LD_STRING D3b-JMM-2
17976: PPUSH
17977: CALL_OW 88
// if IsOK ( Lisa ) then
17981: LD_EXP 19
17985: PPUSH
17986: CALL_OW 302
17990: IFFALSE 18004
// Say ( Lisa , D3b-Lisa-2 ) ;
17992: LD_EXP 19
17996: PPUSH
17997: LD_STRING D3b-Lisa-2
17999: PPUSH
18000: CALL_OW 88
// end ; end ; end ; if not seenComputer then
18004: LD_EXP 7
18008: NOT
18009: IFFALSE 18017
// begin DialogueOff ;
18011: CALL_OW 7
// exit ;
18015: GO 18229
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
18017: LD_INT 22
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 23
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: LD_INT 120
18052: PUSH
18053: LD_INT 106
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 120
18062: PUSH
18063: LD_INT 107
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 26
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: PPUSH
18097: LD_STRING DCa-Sol1-1
18099: PPUSH
18100: LD_STRING 
18102: PPUSH
18103: CALL 20524 0 3
18107: IFFALSE 18121
// Say ( JMM , DCb-JMM-1 ) ;
18109: LD_EXP 14
18113: PPUSH
18114: LD_STRING DCb-JMM-1
18116: PPUSH
18117: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
18121: LD_INT 22
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 21
18133: PUSH
18134: LD_INT 1
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 23
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 120
18156: PUSH
18157: LD_INT 106
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 120
18166: PUSH
18167: LD_INT 107
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 26
18181: PUSH
18182: LD_INT 1
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: PPUSH
18196: CALL_OW 69
18200: PPUSH
18201: LD_STRING DCb-Sol1-1
18203: PPUSH
18204: LD_STRING 
18206: PPUSH
18207: CALL 20524 0 3
18211: IFFALSE 18225
// Say ( JMM , DCb-JMM-2 ) ;
18213: LD_EXP 14
18217: PPUSH
18218: LD_STRING DCb-JMM-2
18220: PPUSH
18221: CALL_OW 88
// DialogueOff ;
18225: CALL_OW 7
// end ;
18229: PPOPN 2
18231: END
// export function DialogSeenComputer ( un ) ; begin
18232: LD_INT 0
18234: PPUSH
// if jmmArrival then
18235: LD_EXP 8
18239: IFFALSE 18243
// exit ;
18241: GO 18309
// CenterOnUnits ( un ) ;
18243: LD_VAR 0 1
18247: PPUSH
18248: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
18252: LD_INT 22
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: LD_INT 120
18267: PUSH
18268: LD_INT 106
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 120
18277: PUSH
18278: LD_INT 107
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PPUSH
18294: CALL_OW 69
18298: PPUSH
18299: LD_STRING DC-Sol1-1
18301: PPUSH
18302: LD_STRING DC-FSol1-1
18304: PPUSH
18305: CALL 20524 0 3
// end ;
18309: LD_VAR 0 2
18313: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18314: LD_EXP 8
18318: IFFALSE 18330
18320: PUSH
18321: LD_OWVAR 1
18325: PUSH
18326: LD_INT 48300
18328: GREATEREQUAL
18329: AND
18330: IFFALSE 18343
18332: PUSH
18333: LD_EXP 14
18337: PPUSH
18338: CALL_OW 302
18342: AND
18343: IFFALSE 18833
18345: GO 18347
18347: DISABLE
// begin wait ( 2 2$00 ) ;
18348: LD_INT 4200
18350: PPUSH
18351: CALL_OW 67
// DialogueOn ;
18355: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18359: LD_EXP 30
18363: PPUSH
18364: LD_STRING D4-Pow-1
18366: PPUSH
18367: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18371: LD_EXP 14
18375: PPUSH
18376: LD_STRING D4-JMM-1
18378: PPUSH
18379: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18383: LD_EXP 30
18387: PPUSH
18388: LD_STRING D4-Pow-2
18390: PPUSH
18391: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18395: LD_EXP 14
18399: PPUSH
18400: LD_STRING D4-JMM-2
18402: PPUSH
18403: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18407: LD_EXP 30
18411: PPUSH
18412: LD_STRING D4-Pow-3
18414: PPUSH
18415: CALL_OW 94
// DialogueOff ;
18419: CALL_OW 7
// wait ( 1 1$00 ) ;
18423: LD_INT 2100
18425: PPUSH
18426: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18430: LD_INT 1
18432: PPUSH
18433: CALL_OW 427
// wait ( 7 7$30 ) ;
18437: LD_INT 15750
18439: PPUSH
18440: CALL_OW 67
// DialogueOn ;
18444: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18448: LD_EXP 30
18452: PPUSH
18453: LD_STRING D4a-Pow-1
18455: PPUSH
18456: CALL_OW 94
// DialogueOff ;
18460: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 427
// SikorskiCounter ;
18471: CALL 20308 0 0
// PrepareSikorsky ;
18475: CALL 6436 0 0
// CenterNowOnUnits ( Sikorski ) ;
18479: LD_EXP 28
18483: PPUSH
18484: CALL_OW 87
// DialogueOn ;
18488: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18492: LD_EXP 28
18496: PPUSH
18497: LD_STRING D5-Sik-1
18499: PPUSH
18500: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18504: LD_INT 11
18506: PPUSH
18507: LD_INT 22
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 70
18521: PUSH
18522: LD_INT 1
18524: GREATER
18525: IFTRUE 18537
18527: PUSH
18528: LD_INT 28
18530: PPUSH
18531: CALL_OW 302
18535: NOT
18536: OR
18537: IFTRUE 18552
18539: PUSH
18540: LD_INT 28
18542: PPUSH
18543: CALL_OW 255
18547: PUSH
18548: LD_INT 1
18550: EQUAL
18551: OR
18552: IFFALSE 18604
// begin Say ( JMM , D5-JMM-1 ) ;
18554: LD_EXP 14
18558: PPUSH
18559: LD_STRING D5-JMM-1
18561: PPUSH
18562: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18566: LD_EXP 28
18570: PPUSH
18571: LD_STRING D7a-Sik-1
18573: PPUSH
18574: CALL_OW 88
// DialogueOff ;
18578: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18582: LD_STRING M2
18584: PPUSH
18585: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18589: LD_INT 1
18591: PPUSH
18592: CALL_OW 427
// SikorskiAttack ;
18596: CALL 8059 0 0
// exit ;
18600: GO 18833
// end else
18602: GO 18649
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18604: LD_INT 15
18606: PPUSH
18607: LD_INT 81
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PPUSH
18617: CALL_OW 70
18621: IFFALSE 18637
// Say ( JMM , D5-JMM-1b ) else
18623: LD_EXP 14
18627: PPUSH
18628: LD_STRING D5-JMM-1b
18630: PPUSH
18631: CALL_OW 88
18635: GO 18649
// Say ( JMM , D5-JMM-1a ) ;
18637: LD_EXP 14
18641: PPUSH
18642: LD_STRING D5-JMM-1a
18644: PPUSH
18645: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18649: LD_EXP 28
18653: PPUSH
18654: LD_STRING D5-Sik-2
18656: PPUSH
18657: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18661: LD_STRING QSikorski
18663: PPUSH
18664: CALL_OW 97
18668: PUSH
18669: LD_INT 1
18671: DOUBLE
18672: EQUAL
18673: IFTRUE 18677
18675: GO 18700
18677: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18678: LD_EXP 28
18682: PPUSH
18683: LD_STRING D5a-Sik-1
18685: PPUSH
18686: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18690: LD_ADDR_EXP 4
18694: PUSH
18695: LD_INT 2100
18697: ST_TO_ADDR
// end ; 2 :
18698: GO 18787
18700: LD_INT 2
18702: DOUBLE
18703: EQUAL
18704: IFTRUE 18708
18706: GO 18731
18708: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18709: LD_EXP 28
18713: PPUSH
18714: LD_STRING D5b-Sik-1
18716: PPUSH
18717: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18721: LD_ADDR_EXP 4
18725: PUSH
18726: LD_INT 10500
18728: ST_TO_ADDR
// end ; 3 :
18729: GO 18787
18731: LD_INT 3
18733: DOUBLE
18734: EQUAL
18735: IFTRUE 18739
18737: GO 18786
18739: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18740: LD_EXP 28
18744: PPUSH
18745: LD_STRING D5c-Sik-1
18747: PPUSH
18748: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18752: LD_EXP 14
18756: PPUSH
18757: LD_STRING D5c-JMM-1
18759: PPUSH
18760: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18764: LD_EXP 28
18768: PPUSH
18769: LD_STRING D5c-Sik-2
18771: PPUSH
18772: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18776: LD_ADDR_EXP 4
18780: PUSH
18781: LD_INT 10500
18783: ST_TO_ADDR
// end ; end ;
18784: GO 18787
18786: POP
// DialogueOff ;
18787: CALL_OW 7
// SikorskiWaitCounter ;
18791: CALL 20371 0 0
// DialogueOn ;
18795: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18799: LD_EXP 28
18803: PPUSH
18804: LD_STRING D6-Sik-1
18806: PPUSH
18807: CALL_OW 88
// DialogueOff ;
18811: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18815: LD_STRING M2
18817: PPUSH
18818: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 427
// SikorskiAttack ;
18829: CALL 8059 0 0
// end ;
18833: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18834: LD_INT 11
18836: PPUSH
18837: LD_INT 22
18839: PUSH
18840: LD_INT 4
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PPUSH
18847: CALL_OW 70
18851: PUSH
18852: LD_INT 2
18854: GREATER
18855: IFFALSE 19054
18857: GO 18859
18859: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18860: LD_EXP 28
18864: PPUSH
18865: LD_STRING D7-Sik-1
18867: PPUSH
18868: CALL_OW 88
// wait ( 0 0$10 ) ;
18872: LD_INT 350
18874: PPUSH
18875: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18879: LD_EXP 14
18883: PPUSH
18884: LD_INT 11
18886: PPUSH
18887: CALL_OW 308
18891: IFTRUE 18912
18893: PUSH
18894: LD_EXP 14
18898: PPUSH
18899: CALL_OW 310
18903: PPUSH
18904: LD_INT 11
18906: PPUSH
18907: CALL_OW 308
18911: OR
18912: IFFALSE 18936
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18914: LD_EXP 28
18918: PPUSH
18919: LD_STRING D7a-Sik-1
18921: PPUSH
18922: CALL_OW 88
// sikorskiStatus := 1 ;
18926: LD_ADDR_EXP 9
18930: PUSH
18931: LD_INT 1
18933: ST_TO_ADDR
// end else
18934: GO 18956
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18936: LD_EXP 28
18940: PPUSH
18941: LD_STRING D7b-Sik-1
18943: PPUSH
18944: CALL_OW 88
// sikorskiStatus := 0 ;
18948: LD_ADDR_EXP 9
18952: PUSH
18953: LD_INT 0
18955: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18956: LD_INT 1575
18958: PPUSH
18959: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18963: LD_EXP 14
18967: PPUSH
18968: LD_INT 11
18970: PPUSH
18971: CALL_OW 308
18975: IFTRUE 18996
18977: PUSH
18978: LD_EXP 14
18982: PPUSH
18983: CALL_OW 310
18987: PPUSH
18988: LD_INT 11
18990: PPUSH
18991: CALL_OW 308
18995: OR
18996: IFTRUE 19010
18998: PUSH
18999: LD_EXP 14
19003: PPUSH
19004: CALL_OW 302
19008: NOT
19009: OR
19010: IFFALSE 19034
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19012: LD_EXP 28
19016: PPUSH
19017: LD_STRING D7a-Sik-1
19019: PPUSH
19020: CALL_OW 88
// sikorskiStatus := 1 ;
19024: LD_ADDR_EXP 9
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// end else
19032: GO 19054
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19034: LD_EXP 28
19038: PPUSH
19039: LD_STRING D7b-Sik-1
19041: PPUSH
19042: CALL_OW 88
// sikorskiStatus := 0 ;
19046: LD_ADDR_EXP 9
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// end ; end ;
19054: END
// export function SikorskiKilledInAction ; begin
19055: LD_INT 0
19057: PPUSH
// wait ( 0 0$2 ) ;
19058: LD_INT 70
19060: PPUSH
19061: CALL_OW 67
// DialogueOn ;
19065: CALL_OW 6
// dwait ( 0 0$1 ) ;
19069: LD_INT 35
19071: PPUSH
19072: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
19076: LD_EXP 30
19080: PPUSH
19081: LD_STRING D8b-Pow-1
19083: PPUSH
19084: CALL_OW 94
// YouLost ( Dismissed ) ;
19088: LD_STRING Dismissed
19090: PPUSH
19091: CALL_OW 104
// DialogueOff ;
19095: CALL_OW 7
// end ;
19099: LD_VAR 0 1
19103: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
19104: LD_EXP 8
19108: IFFALSE 19119
19110: PUSH
19111: LD_INT 28
19113: PPUSH
19114: CALL_OW 301
19118: AND
19119: IFFALSE 19132
19121: PUSH
19122: LD_EXP 32
19126: PPUSH
19127: CALL_OW 301
19131: AND
19132: IFFALSE 19175
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_INT 3
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 50
19147: PUSH
19148: EMPTY
19149: LIST
19150: PUSH
19151: LD_INT 30
19153: PUSH
19154: LD_INT 5
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: PPUSH
19166: CALL_OW 69
19170: PUSH
19171: LD_INT 0
19173: EQUAL
19174: AND
19175: IFFALSE 20305
19177: GO 19179
19179: DISABLE
19180: LD_INT 0
19182: PPUSH
19183: PPUSH
19184: PPUSH
// begin Video ( true ) ;
19185: LD_INT 1
19187: PPUSH
19188: CALL 81282 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
19192: LD_INT 104
19194: PPUSH
19195: LD_INT 108
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_INT 36
19203: NEG
19204: PPUSH
19205: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
19209: LD_INT 104
19211: PPUSH
19212: LD_INT 108
19214: PPUSH
19215: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
19219: LD_ADDR_VAR 0 2
19223: PUSH
19224: LD_INT 22
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 21
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: LD_INT 24
19249: PUSH
19250: LD_INT 249
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: PPUSH
19266: CALL_OW 69
19270: ST_TO_ADDR
// if tmp then
19271: LD_VAR 0 2
19275: IFFALSE 19306
// for i in tmp do
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_VAR 0 2
19286: PUSH
19287: FOR_IN
19288: IFFALSE 19304
// SetLives ( i , 249 ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 249
19297: PPUSH
19298: CALL_OW 234
19302: GO 19287
19304: POP
19305: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: LD_INT 22
19313: PUSH
19314: LD_INT 3
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 21
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: FOR_IN
19341: IFFALSE 19384
// begin ComExit ( i ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL 81708 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: LD_INT 131
19359: PPUSH
19360: LD_INT 127
19362: PPUSH
19363: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19367: LD_VAR 0 1
19371: PPUSH
19372: LD_INT 141
19374: PPUSH
19375: LD_INT 147
19377: PPUSH
19378: CALL_OW 171
// end ;
19382: GO 19340
19384: POP
19385: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19386: LD_INT 81
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 3
19398: PUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PPUSH
19422: LD_INT 131
19424: PPUSH
19425: LD_INT 127
19427: PPUSH
19428: CALL_OW 174
// wait ( 0 0$08 ) ;
19432: LD_INT 280
19434: PPUSH
19435: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19439: LD_INT 22
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 21
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 23
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 50
19471: PUSH
19472: EMPTY
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: PPUSH
19481: CALL_OW 69
19485: PPUSH
19486: CALL 45344 0 1
19490: PUSH
19491: LD_INT 7
19493: LESS
19494: IFFALSE 19505
// begin YouLost ( LostVictory ) ;
19496: LD_STRING LostVictory
19498: PPUSH
19499: CALL_OW 104
// exit ;
19503: GO 20305
// end ; DialogueOn ;
19505: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19509: LD_EXP 9
19513: PUSH
19514: LD_INT 1
19516: EQUAL
19517: IFFALSE 19530
19519: PUSH
19520: LD_EXP 28
19524: PPUSH
19525: CALL_OW 302
19529: AND
19530: IFFALSE 19544
// Say ( Sikorski , D9-Sik-1 ) ;
19532: LD_EXP 28
19536: PPUSH
19537: LD_STRING D9-Sik-1
19539: PPUSH
19540: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19544: LD_INT 22
19546: PUSH
19547: LD_INT 4
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL_OW 69
19558: PUSH
19559: LD_INT 0
19561: EQUAL
19562: IFFALSE 19570
19564: PUSH
19565: LD_EXP 3
19569: AND
19570: IFFALSE 19579
// SetAchievement ( ACH_BLITZKRIEG ) ;
19572: LD_STRING ACH_BLITZKRIEG
19574: PPUSH
19575: CALL_OW 543
// if tick <= 45 45$10 then
19579: LD_OWVAR 1
19583: PUSH
19584: LD_INT 94850
19586: LESSEQUAL
19587: IFFALSE 19603
// begin wait ( 3 ) ;
19589: LD_INT 3
19591: PPUSH
19592: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19596: LD_STRING ACH_ASPEED_8
19598: PPUSH
19599: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19603: LD_STRING med1
19605: PPUSH
19606: LD_INT 1
19608: PPUSH
19609: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19613: LD_STRING med2
19615: PPUSH
19616: LD_INT 1
19618: PPUSH
19619: CALL_OW 101
// if sikorskiStatus = 1 then
19623: LD_EXP 9
19627: PUSH
19628: LD_INT 1
19630: EQUAL
19631: IFFALSE 19645
// AddMedal ( perfect , 1 ) else
19633: LD_STRING perfect
19635: PPUSH
19636: LD_INT 1
19638: PPUSH
19639: CALL_OW 101
19643: GO 19656
// AddMedal ( perfect , - 1 ) ;
19645: LD_STRING perfect
19647: PPUSH
19648: LD_INT 1
19650: NEG
19651: PPUSH
19652: CALL_OW 101
// if Difficulty >= 3 then
19656: LD_OWVAR 67
19660: PUSH
19661: LD_INT 3
19663: GREATEREQUAL
19664: IFFALSE 19676
// SetAchievementEX ( ACH_AMER , 8 ) ;
19666: LD_STRING ACH_AMER
19668: PPUSH
19669: LD_INT 8
19671: PPUSH
19672: CALL_OW 564
// GiveMedals ( Main ) ;
19676: LD_STRING Main
19678: PPUSH
19679: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19683: LD_INT 22
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 23
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 21
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 69
19722: PPUSH
19723: CALL_OW 43
// prefix := 08_ ;
19727: LD_ADDR_VAR 0 3
19731: PUSH
19732: LD_STRING 08_
19734: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19735: LD_EXP 14
19739: PPUSH
19740: LD_VAR 0 3
19744: PUSH
19745: LD_STRING JMM
19747: STR
19748: PPUSH
19749: CALL_OW 38
// if IsLive ( Brown ) then
19753: LD_EXP 15
19757: PPUSH
19758: CALL_OW 300
19762: IFFALSE 19782
// SaveCharacters ( Brown , prefix & Brown ) ;
19764: LD_EXP 15
19768: PPUSH
19769: LD_VAR 0 3
19773: PUSH
19774: LD_STRING Brown
19776: STR
19777: PPUSH
19778: CALL_OW 38
// if IsLive ( Donaldson ) then
19782: LD_EXP 16
19786: PPUSH
19787: CALL_OW 300
19791: IFFALSE 19811
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19793: LD_EXP 16
19797: PPUSH
19798: LD_VAR 0 3
19802: PUSH
19803: LD_STRING Donaldson
19805: STR
19806: PPUSH
19807: CALL_OW 38
// if IsLive ( Bobby ) then
19811: LD_EXP 17
19815: PPUSH
19816: CALL_OW 300
19820: IFFALSE 19840
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19822: LD_EXP 17
19826: PPUSH
19827: LD_VAR 0 3
19831: PUSH
19832: LD_STRING Bobby
19834: STR
19835: PPUSH
19836: CALL_OW 38
// if IsLive ( Cyrus ) then
19840: LD_EXP 18
19844: PPUSH
19845: CALL_OW 300
19849: IFFALSE 19869
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19851: LD_EXP 18
19855: PPUSH
19856: LD_VAR 0 3
19860: PUSH
19861: LD_STRING Cyrus
19863: STR
19864: PPUSH
19865: CALL_OW 38
// if IsLive ( Lisa ) then
19869: LD_EXP 19
19873: PPUSH
19874: CALL_OW 300
19878: IFFALSE 19898
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19880: LD_EXP 19
19884: PPUSH
19885: LD_VAR 0 3
19889: PUSH
19890: LD_STRING Lisa
19892: STR
19893: PPUSH
19894: CALL_OW 38
// if IsLive ( Frank ) then
19898: LD_EXP 20
19902: PPUSH
19903: CALL_OW 300
19907: IFFALSE 19927
// SaveCharacters ( Frank , prefix & Frank ) ;
19909: LD_EXP 20
19913: PPUSH
19914: LD_VAR 0 3
19918: PUSH
19919: LD_STRING Frank
19921: STR
19922: PPUSH
19923: CALL_OW 38
// if IsLive ( Gladstone ) then
19927: LD_EXP 21
19931: PPUSH
19932: CALL_OW 300
19936: IFFALSE 19956
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19938: LD_EXP 21
19942: PPUSH
19943: LD_VAR 0 3
19947: PUSH
19948: LD_STRING Gladstone
19950: STR
19951: PPUSH
19952: CALL_OW 38
// if IsLive ( Kikuchi ) then
19956: LD_EXP 22
19960: PPUSH
19961: CALL_OW 300
19965: IFFALSE 19985
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19967: LD_EXP 22
19971: PPUSH
19972: LD_VAR 0 3
19976: PUSH
19977: LD_STRING Kikuchi
19979: STR
19980: PPUSH
19981: CALL_OW 38
// if IsLive ( Denis ) then
19985: LD_EXP 26
19989: PPUSH
19990: CALL_OW 300
19994: IFFALSE 20014
// SaveCharacters ( Denis , prefix & Denis ) ;
19996: LD_EXP 26
20000: PPUSH
20001: LD_VAR 0 3
20005: PUSH
20006: LD_STRING Denis
20008: STR
20009: PPUSH
20010: CALL_OW 38
// if IsLive ( Joan ) then
20014: LD_EXP 27
20018: PPUSH
20019: CALL_OW 300
20023: IFFALSE 20045
// SaveCharacters ( Joan , prefix & Joan ) else
20025: LD_EXP 27
20029: PPUSH
20030: LD_VAR 0 3
20034: PUSH
20035: LD_STRING Joan
20037: STR
20038: PPUSH
20039: CALL_OW 38
20043: GO 20052
// DeleteCharacters ( Joan ) ;
20045: LD_STRING Joan
20047: PPUSH
20048: CALL_OW 40
// if IsLive ( Khatam ) then
20052: LD_EXP 23
20056: PPUSH
20057: CALL_OW 300
20061: IFFALSE 20081
// SaveCharacters ( Khatam , prefix & Khatam ) ;
20063: LD_EXP 23
20067: PPUSH
20068: LD_VAR 0 3
20072: PUSH
20073: LD_STRING Khatam
20075: STR
20076: PPUSH
20077: CALL_OW 38
// if IsLive ( Houten ) then
20081: LD_EXP 25
20085: PPUSH
20086: CALL_OW 300
20090: IFFALSE 20117
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
20092: LD_STRING enableBioCharacter(BIO_HOUT)
20094: PPUSH
20095: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
20099: LD_EXP 25
20103: PPUSH
20104: LD_VAR 0 3
20108: PUSH
20109: LD_STRING Houten
20111: STR
20112: PPUSH
20113: CALL_OW 38
// end ; if IsLive ( Mike ) then
20117: LD_EXP 24
20121: PPUSH
20122: CALL_OW 300
20126: IFFALSE 20146
// SaveCharacters ( Mike , prefix & Mike ) ;
20128: LD_EXP 24
20132: PPUSH
20133: LD_VAR 0 3
20137: PUSH
20138: LD_STRING Mike
20140: STR
20141: PPUSH
20142: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
20146: LD_INT 22
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 21
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 23
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: PPUSH
20181: CALL_OW 69
20185: PUSH
20186: LD_EXP 14
20190: PUSH
20191: LD_EXP 15
20195: PUSH
20196: LD_EXP 16
20200: PUSH
20201: LD_EXP 17
20205: PUSH
20206: LD_EXP 18
20210: PUSH
20211: LD_EXP 19
20215: PUSH
20216: LD_EXP 20
20220: PUSH
20221: LD_EXP 21
20225: PUSH
20226: LD_EXP 22
20230: PUSH
20231: LD_EXP 26
20235: PUSH
20236: LD_EXP 27
20240: PUSH
20241: LD_EXP 25
20245: PUSH
20246: LD_EXP 23
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: DIFF
20266: PPUSH
20267: LD_STRING 08_other_survivors
20269: PPUSH
20270: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
20274: LD_INT 15
20276: PPUSH
20277: CALL 7533 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
20281: LD_EXP 10
20285: NOT
20286: PPUSH
20287: LD_STRING 08_SikorskiStatus
20289: PPUSH
20290: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
20294: LD_STRING enableBioCharacter(BIO_SIK)
20296: PPUSH
20297: CALL_OW 559
// YouWin ;
20301: CALL_OW 103
// end ; end_of_file
20305: PPOPN 3
20307: END
// export function SikorskiCounter ; begin
20308: LD_INT 0
20310: PPUSH
// repeat wait ( 0 0$1 ) ;
20311: LD_INT 35
20313: PPUSH
20314: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20318: LD_ADDR_OWVAR 47
20322: PUSH
20323: LD_STRING #Am08-2
20325: PUSH
20326: LD_EXP 3
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20335: LD_ADDR_EXP 3
20339: PUSH
20340: LD_EXP 3
20344: PUSH
20345: LD_INT 35
20347: MINUS
20348: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20349: LD_EXP 3
20353: PUSH
20354: LD_INT 0
20356: EQUAL
20357: IFFALSE 20311
// display_strings := [ ] ;
20359: LD_ADDR_OWVAR 47
20363: PUSH
20364: EMPTY
20365: ST_TO_ADDR
// end ;
20366: LD_VAR 0 1
20370: RET
// export function SikorskiWaitCounter ; begin
20371: LD_INT 0
20373: PPUSH
// repeat wait ( 0 0$1 ) ;
20374: LD_INT 35
20376: PPUSH
20377: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20381: LD_ADDR_OWVAR 47
20385: PUSH
20386: LD_STRING #Am08-1
20388: PUSH
20389: LD_EXP 4
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20398: LD_ADDR_EXP 4
20402: PUSH
20403: LD_EXP 4
20407: PUSH
20408: LD_INT 35
20410: MINUS
20411: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20412: LD_EXP 4
20416: PUSH
20417: LD_INT 0
20419: EQUAL
20420: IFFALSE 20374
// display_strings := [ ] ;
20422: LD_ADDR_OWVAR 47
20426: PUSH
20427: EMPTY
20428: ST_TO_ADDR
// end ; end_of_file
20429: LD_VAR 0 1
20433: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20434: LD_EXP 3
20438: IFFALSE 20478
20440: GO 20442
20442: DISABLE
// begin enable ;
20443: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20444: LD_INT 14
20446: PPUSH
20447: CALL_OW 435
20451: PUSH
20452: LD_INT 10
20454: LESS
20455: IFFALSE 20478
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20457: LD_INT 1
20459: PPUSH
20460: LD_INT 5
20462: PPUSH
20463: CALL_OW 12
20467: PPUSH
20468: LD_INT 14
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 55
// end ;
20478: END
// every 0 0$55 trigger sikorskiArriveCounter do
20479: LD_EXP 3
20483: IFFALSE 20523
20485: GO 20487
20487: DISABLE
// begin enable ;
20488: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20489: LD_INT 13
20491: PPUSH
20492: CALL_OW 435
20496: PUSH
20497: LD_INT 10
20499: LESS
20500: IFFALSE 20523
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20502: LD_INT 1
20504: PPUSH
20505: LD_INT 5
20507: PPUSH
20508: CALL_OW 12
20512: PPUSH
20513: LD_INT 13
20515: PPUSH
20516: LD_INT 1
20518: PPUSH
20519: CALL_OW 55
// end ; end_of_file
20523: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
// if not units then
20528: LD_VAR 0 1
20532: NOT
20533: IFFALSE 20537
// exit ;
20535: GO 20662
// result := false ;
20537: LD_ADDR_VAR 0 4
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20545: LD_ADDR_VAR 0 5
20549: PUSH
20550: LD_VAR 0 1
20554: PPUSH
20555: LD_INT 26
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PPUSH
20565: CALL_OW 72
20569: ST_TO_ADDR
// if tmp then
20570: LD_VAR 0 5
20574: IFFALSE 20600
// result := Say ( tmp [ 1 ] , menDialog ) ;
20576: LD_ADDR_VAR 0 4
20580: PUSH
20581: LD_VAR 0 5
20585: PUSH
20586: LD_INT 1
20588: ARRAY
20589: PPUSH
20590: LD_VAR 0 2
20594: PPUSH
20595: CALL_OW 88
20599: ST_TO_ADDR
// if not result then
20600: LD_VAR 0 4
20604: NOT
20605: IFFALSE 20662
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20607: LD_ADDR_VAR 0 5
20611: PUSH
20612: LD_VAR 0 1
20616: PPUSH
20617: LD_INT 26
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PPUSH
20627: CALL_OW 72
20631: ST_TO_ADDR
// if tmp then
20632: LD_VAR 0 5
20636: IFFALSE 20662
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20638: LD_ADDR_VAR 0 4
20642: PUSH
20643: LD_VAR 0 5
20647: PUSH
20648: LD_INT 1
20650: ARRAY
20651: PPUSH
20652: LD_VAR 0 3
20656: PPUSH
20657: CALL_OW 88
20661: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20662: LD_VAR 0 4
20666: RET
// export globalGameSaveCounter ; every 0 0$1 do
20667: GO 20669
20669: DISABLE
// begin enable ;
20670: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20671: LD_STRING updateTimer(
20673: PUSH
20674: LD_OWVAR 1
20678: STR
20679: PUSH
20680: LD_STRING );
20682: STR
20683: PPUSH
20684: CALL_OW 559
// end ;
20688: END
// every 0 0$1 do
20689: GO 20691
20691: DISABLE
// begin globalGameSaveCounter := 0 ;
20692: LD_ADDR_EXP 37
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20700: LD_STRING setGameSaveCounter(0)
20702: PPUSH
20703: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20707: LD_STRING initStreamRollete();
20709: PPUSH
20710: CALL_OW 559
// InitStreamMode ;
20714: CALL 22059 0 0
// DefineStreamItems ( false ) ;
20718: LD_INT 0
20720: PPUSH
20721: CALL 22523 0 1
// end ;
20725: END
// export function SOS_MapStart ( ) ; begin
20726: LD_INT 0
20728: PPUSH
// if streamModeActive then
20729: LD_EXP 38
20733: IFFALSE 20742
// DefineStreamItems ( true ) ;
20735: LD_INT 1
20737: PPUSH
20738: CALL 22523 0 1
// UpdateLuaVariables ( ) ;
20742: CALL 20759 0 0
// UpdateFactoryWaypoints ( ) ;
20746: CALL 35645 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20750: CALL 35897 0 0
// end ;
20754: LD_VAR 0 1
20758: RET
// function UpdateLuaVariables ( ) ; begin
20759: LD_INT 0
20761: PPUSH
// if globalGameSaveCounter then
20762: LD_EXP 37
20766: IFFALSE 20800
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20768: LD_ADDR_EXP 37
20772: PUSH
20773: LD_EXP 37
20777: PPUSH
20778: CALL 82683 0 1
20782: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20783: LD_STRING setGameSaveCounter(
20785: PUSH
20786: LD_EXP 37
20790: STR
20791: PUSH
20792: LD_STRING )
20794: STR
20795: PPUSH
20796: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20800: LD_STRING setGameDifficulty(
20802: PUSH
20803: LD_OWVAR 67
20807: STR
20808: PUSH
20809: LD_STRING )
20811: STR
20812: PPUSH
20813: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20817: LD_STRING displayDifficulty(
20819: PUSH
20820: LD_OWVAR 67
20824: STR
20825: PUSH
20826: LD_STRING )
20828: STR
20829: PPUSH
20830: CALL_OW 559
// end ;
20834: LD_VAR 0 1
20838: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20839: LD_INT 0
20841: PPUSH
// if p2 = stream_mode then
20842: LD_VAR 0 2
20846: PUSH
20847: LD_INT 100
20849: EQUAL
20850: IFFALSE 21853
// begin if not StreamModeActive then
20852: LD_EXP 38
20856: NOT
20857: IFFALSE 20867
// StreamModeActive := true ;
20859: LD_ADDR_EXP 38
20863: PUSH
20864: LD_INT 1
20866: ST_TO_ADDR
// if p3 = 0 then
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 0
20874: EQUAL
20875: IFFALSE 20881
// InitStreamMode ;
20877: CALL 22059 0 0
// if p3 = 1 then
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 1
20888: EQUAL
20889: IFFALSE 20899
// sRocket := true ;
20891: LD_ADDR_EXP 43
20895: PUSH
20896: LD_INT 1
20898: ST_TO_ADDR
// if p3 = 2 then
20899: LD_VAR 0 3
20903: PUSH
20904: LD_INT 2
20906: EQUAL
20907: IFFALSE 20917
// sSpeed := true ;
20909: LD_ADDR_EXP 42
20913: PUSH
20914: LD_INT 1
20916: ST_TO_ADDR
// if p3 = 3 then
20917: LD_VAR 0 3
20921: PUSH
20922: LD_INT 3
20924: EQUAL
20925: IFFALSE 20935
// sEngine := true ;
20927: LD_ADDR_EXP 44
20931: PUSH
20932: LD_INT 1
20934: ST_TO_ADDR
// if p3 = 4 then
20935: LD_VAR 0 3
20939: PUSH
20940: LD_INT 4
20942: EQUAL
20943: IFFALSE 20953
// sSpec := true ;
20945: LD_ADDR_EXP 41
20949: PUSH
20950: LD_INT 1
20952: ST_TO_ADDR
// if p3 = 5 then
20953: LD_VAR 0 3
20957: PUSH
20958: LD_INT 5
20960: EQUAL
20961: IFFALSE 20971
// sLevel := true ;
20963: LD_ADDR_EXP 45
20967: PUSH
20968: LD_INT 1
20970: ST_TO_ADDR
// if p3 = 6 then
20971: LD_VAR 0 3
20975: PUSH
20976: LD_INT 6
20978: EQUAL
20979: IFFALSE 20989
// sArmoury := true ;
20981: LD_ADDR_EXP 46
20985: PUSH
20986: LD_INT 1
20988: ST_TO_ADDR
// if p3 = 7 then
20989: LD_VAR 0 3
20993: PUSH
20994: LD_INT 7
20996: EQUAL
20997: IFFALSE 21007
// sRadar := true ;
20999: LD_ADDR_EXP 47
21003: PUSH
21004: LD_INT 1
21006: ST_TO_ADDR
// if p3 = 8 then
21007: LD_VAR 0 3
21011: PUSH
21012: LD_INT 8
21014: EQUAL
21015: IFFALSE 21025
// sBunker := true ;
21017: LD_ADDR_EXP 48
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
// if p3 = 9 then
21025: LD_VAR 0 3
21029: PUSH
21030: LD_INT 9
21032: EQUAL
21033: IFFALSE 21043
// sHack := true ;
21035: LD_ADDR_EXP 49
21039: PUSH
21040: LD_INT 1
21042: ST_TO_ADDR
// if p3 = 10 then
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 10
21050: EQUAL
21051: IFFALSE 21061
// sFire := true ;
21053: LD_ADDR_EXP 50
21057: PUSH
21058: LD_INT 1
21060: ST_TO_ADDR
// if p3 = 11 then
21061: LD_VAR 0 3
21065: PUSH
21066: LD_INT 11
21068: EQUAL
21069: IFFALSE 21079
// sRefresh := true ;
21071: LD_ADDR_EXP 51
21075: PUSH
21076: LD_INT 1
21078: ST_TO_ADDR
// if p3 = 12 then
21079: LD_VAR 0 3
21083: PUSH
21084: LD_INT 12
21086: EQUAL
21087: IFFALSE 21097
// sExp := true ;
21089: LD_ADDR_EXP 52
21093: PUSH
21094: LD_INT 1
21096: ST_TO_ADDR
// if p3 = 13 then
21097: LD_VAR 0 3
21101: PUSH
21102: LD_INT 13
21104: EQUAL
21105: IFFALSE 21115
// sDepot := true ;
21107: LD_ADDR_EXP 53
21111: PUSH
21112: LD_INT 1
21114: ST_TO_ADDR
// if p3 = 14 then
21115: LD_VAR 0 3
21119: PUSH
21120: LD_INT 14
21122: EQUAL
21123: IFFALSE 21133
// sFlag := true ;
21125: LD_ADDR_EXP 54
21129: PUSH
21130: LD_INT 1
21132: ST_TO_ADDR
// if p3 = 15 then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 15
21140: EQUAL
21141: IFFALSE 21151
// sKamikadze := true ;
21143: LD_ADDR_EXP 62
21147: PUSH
21148: LD_INT 1
21150: ST_TO_ADDR
// if p3 = 16 then
21151: LD_VAR 0 3
21155: PUSH
21156: LD_INT 16
21158: EQUAL
21159: IFFALSE 21169
// sTroll := true ;
21161: LD_ADDR_EXP 63
21165: PUSH
21166: LD_INT 1
21168: ST_TO_ADDR
// if p3 = 17 then
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 17
21176: EQUAL
21177: IFFALSE 21187
// sSlow := true ;
21179: LD_ADDR_EXP 64
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// if p3 = 18 then
21187: LD_VAR 0 3
21191: PUSH
21192: LD_INT 18
21194: EQUAL
21195: IFFALSE 21205
// sLack := true ;
21197: LD_ADDR_EXP 65
21201: PUSH
21202: LD_INT 1
21204: ST_TO_ADDR
// if p3 = 19 then
21205: LD_VAR 0 3
21209: PUSH
21210: LD_INT 19
21212: EQUAL
21213: IFFALSE 21223
// sTank := true ;
21215: LD_ADDR_EXP 67
21219: PUSH
21220: LD_INT 1
21222: ST_TO_ADDR
// if p3 = 20 then
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 20
21230: EQUAL
21231: IFFALSE 21241
// sRemote := true ;
21233: LD_ADDR_EXP 68
21237: PUSH
21238: LD_INT 1
21240: ST_TO_ADDR
// if p3 = 21 then
21241: LD_VAR 0 3
21245: PUSH
21246: LD_INT 21
21248: EQUAL
21249: IFFALSE 21259
// sPowell := true ;
21251: LD_ADDR_EXP 69
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
// if p3 = 22 then
21259: LD_VAR 0 3
21263: PUSH
21264: LD_INT 22
21266: EQUAL
21267: IFFALSE 21277
// sTeleport := true ;
21269: LD_ADDR_EXP 72
21273: PUSH
21274: LD_INT 1
21276: ST_TO_ADDR
// if p3 = 23 then
21277: LD_VAR 0 3
21281: PUSH
21282: LD_INT 23
21284: EQUAL
21285: IFFALSE 21295
// sOilTower := true ;
21287: LD_ADDR_EXP 74
21291: PUSH
21292: LD_INT 1
21294: ST_TO_ADDR
// if p3 = 24 then
21295: LD_VAR 0 3
21299: PUSH
21300: LD_INT 24
21302: EQUAL
21303: IFFALSE 21313
// sShovel := true ;
21305: LD_ADDR_EXP 75
21309: PUSH
21310: LD_INT 1
21312: ST_TO_ADDR
// if p3 = 25 then
21313: LD_VAR 0 3
21317: PUSH
21318: LD_INT 25
21320: EQUAL
21321: IFFALSE 21331
// sSheik := true ;
21323: LD_ADDR_EXP 76
21327: PUSH
21328: LD_INT 1
21330: ST_TO_ADDR
// if p3 = 26 then
21331: LD_VAR 0 3
21335: PUSH
21336: LD_INT 26
21338: EQUAL
21339: IFFALSE 21349
// sEarthquake := true ;
21341: LD_ADDR_EXP 78
21345: PUSH
21346: LD_INT 1
21348: ST_TO_ADDR
// if p3 = 27 then
21349: LD_VAR 0 3
21353: PUSH
21354: LD_INT 27
21356: EQUAL
21357: IFFALSE 21367
// sAI := true ;
21359: LD_ADDR_EXP 79
21363: PUSH
21364: LD_INT 1
21366: ST_TO_ADDR
// if p3 = 28 then
21367: LD_VAR 0 3
21371: PUSH
21372: LD_INT 28
21374: EQUAL
21375: IFFALSE 21385
// sCargo := true ;
21377: LD_ADDR_EXP 82
21381: PUSH
21382: LD_INT 1
21384: ST_TO_ADDR
// if p3 = 29 then
21385: LD_VAR 0 3
21389: PUSH
21390: LD_INT 29
21392: EQUAL
21393: IFFALSE 21403
// sDLaser := true ;
21395: LD_ADDR_EXP 83
21399: PUSH
21400: LD_INT 1
21402: ST_TO_ADDR
// if p3 = 30 then
21403: LD_VAR 0 3
21407: PUSH
21408: LD_INT 30
21410: EQUAL
21411: IFFALSE 21421
// sExchange := true ;
21413: LD_ADDR_EXP 84
21417: PUSH
21418: LD_INT 1
21420: ST_TO_ADDR
// if p3 = 31 then
21421: LD_VAR 0 3
21425: PUSH
21426: LD_INT 31
21428: EQUAL
21429: IFFALSE 21439
// sFac := true ;
21431: LD_ADDR_EXP 85
21435: PUSH
21436: LD_INT 1
21438: ST_TO_ADDR
// if p3 = 32 then
21439: LD_VAR 0 3
21443: PUSH
21444: LD_INT 32
21446: EQUAL
21447: IFFALSE 21457
// sPower := true ;
21449: LD_ADDR_EXP 86
21453: PUSH
21454: LD_INT 1
21456: ST_TO_ADDR
// if p3 = 33 then
21457: LD_VAR 0 3
21461: PUSH
21462: LD_INT 33
21464: EQUAL
21465: IFFALSE 21475
// sRandom := true ;
21467: LD_ADDR_EXP 87
21471: PUSH
21472: LD_INT 1
21474: ST_TO_ADDR
// if p3 = 34 then
21475: LD_VAR 0 3
21479: PUSH
21480: LD_INT 34
21482: EQUAL
21483: IFFALSE 21493
// sShield := true ;
21485: LD_ADDR_EXP 88
21489: PUSH
21490: LD_INT 1
21492: ST_TO_ADDR
// if p3 = 35 then
21493: LD_VAR 0 3
21497: PUSH
21498: LD_INT 35
21500: EQUAL
21501: IFFALSE 21511
// sTime := true ;
21503: LD_ADDR_EXP 89
21507: PUSH
21508: LD_INT 1
21510: ST_TO_ADDR
// if p3 = 36 then
21511: LD_VAR 0 3
21515: PUSH
21516: LD_INT 36
21518: EQUAL
21519: IFFALSE 21529
// sTools := true ;
21521: LD_ADDR_EXP 90
21525: PUSH
21526: LD_INT 1
21528: ST_TO_ADDR
// if p3 = 101 then
21529: LD_VAR 0 3
21533: PUSH
21534: LD_INT 101
21536: EQUAL
21537: IFFALSE 21547
// sSold := true ;
21539: LD_ADDR_EXP 55
21543: PUSH
21544: LD_INT 1
21546: ST_TO_ADDR
// if p3 = 102 then
21547: LD_VAR 0 3
21551: PUSH
21552: LD_INT 102
21554: EQUAL
21555: IFFALSE 21565
// sDiff := true ;
21557: LD_ADDR_EXP 56
21561: PUSH
21562: LD_INT 1
21564: ST_TO_ADDR
// if p3 = 103 then
21565: LD_VAR 0 3
21569: PUSH
21570: LD_INT 103
21572: EQUAL
21573: IFFALSE 21583
// sFog := true ;
21575: LD_ADDR_EXP 59
21579: PUSH
21580: LD_INT 1
21582: ST_TO_ADDR
// if p3 = 104 then
21583: LD_VAR 0 3
21587: PUSH
21588: LD_INT 104
21590: EQUAL
21591: IFFALSE 21601
// sReset := true ;
21593: LD_ADDR_EXP 60
21597: PUSH
21598: LD_INT 1
21600: ST_TO_ADDR
// if p3 = 105 then
21601: LD_VAR 0 3
21605: PUSH
21606: LD_INT 105
21608: EQUAL
21609: IFFALSE 21619
// sSun := true ;
21611: LD_ADDR_EXP 61
21615: PUSH
21616: LD_INT 1
21618: ST_TO_ADDR
// if p3 = 106 then
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 106
21626: EQUAL
21627: IFFALSE 21637
// sTiger := true ;
21629: LD_ADDR_EXP 57
21633: PUSH
21634: LD_INT 1
21636: ST_TO_ADDR
// if p3 = 107 then
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 107
21644: EQUAL
21645: IFFALSE 21655
// sBomb := true ;
21647: LD_ADDR_EXP 58
21651: PUSH
21652: LD_INT 1
21654: ST_TO_ADDR
// if p3 = 108 then
21655: LD_VAR 0 3
21659: PUSH
21660: LD_INT 108
21662: EQUAL
21663: IFFALSE 21673
// sWound := true ;
21665: LD_ADDR_EXP 66
21669: PUSH
21670: LD_INT 1
21672: ST_TO_ADDR
// if p3 = 109 then
21673: LD_VAR 0 3
21677: PUSH
21678: LD_INT 109
21680: EQUAL
21681: IFFALSE 21691
// sBetray := true ;
21683: LD_ADDR_EXP 70
21687: PUSH
21688: LD_INT 1
21690: ST_TO_ADDR
// if p3 = 110 then
21691: LD_VAR 0 3
21695: PUSH
21696: LD_INT 110
21698: EQUAL
21699: IFFALSE 21709
// sContamin := true ;
21701: LD_ADDR_EXP 71
21705: PUSH
21706: LD_INT 1
21708: ST_TO_ADDR
// if p3 = 111 then
21709: LD_VAR 0 3
21713: PUSH
21714: LD_INT 111
21716: EQUAL
21717: IFFALSE 21727
// sOil := true ;
21719: LD_ADDR_EXP 73
21723: PUSH
21724: LD_INT 1
21726: ST_TO_ADDR
// if p3 = 112 then
21727: LD_VAR 0 3
21731: PUSH
21732: LD_INT 112
21734: EQUAL
21735: IFFALSE 21745
// sStu := true ;
21737: LD_ADDR_EXP 77
21741: PUSH
21742: LD_INT 1
21744: ST_TO_ADDR
// if p3 = 113 then
21745: LD_VAR 0 3
21749: PUSH
21750: LD_INT 113
21752: EQUAL
21753: IFFALSE 21763
// sBazooka := true ;
21755: LD_ADDR_EXP 80
21759: PUSH
21760: LD_INT 1
21762: ST_TO_ADDR
// if p3 = 114 then
21763: LD_VAR 0 3
21767: PUSH
21768: LD_INT 114
21770: EQUAL
21771: IFFALSE 21781
// sMortar := true ;
21773: LD_ADDR_EXP 81
21777: PUSH
21778: LD_INT 1
21780: ST_TO_ADDR
// if p3 = 115 then
21781: LD_VAR 0 3
21785: PUSH
21786: LD_INT 115
21788: EQUAL
21789: IFFALSE 21799
// sRanger := true ;
21791: LD_ADDR_EXP 91
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// if p3 = 116 then
21799: LD_VAR 0 3
21803: PUSH
21804: LD_INT 116
21806: EQUAL
21807: IFFALSE 21817
// sComputer := true ;
21809: LD_ADDR_EXP 92
21813: PUSH
21814: LD_INT 1
21816: ST_TO_ADDR
// if p3 = 117 then
21817: LD_VAR 0 3
21821: PUSH
21822: LD_INT 117
21824: EQUAL
21825: IFFALSE 21835
// s30 := true ;
21827: LD_ADDR_EXP 93
21831: PUSH
21832: LD_INT 1
21834: ST_TO_ADDR
// if p3 = 118 then
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 118
21842: EQUAL
21843: IFFALSE 21853
// s60 := true ;
21845: LD_ADDR_EXP 94
21849: PUSH
21850: LD_INT 1
21852: ST_TO_ADDR
// end ; if p2 = hack_mode then
21853: LD_VAR 0 2
21857: PUSH
21858: LD_INT 101
21860: EQUAL
21861: IFFALSE 21989
// begin case p3 of 1 :
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 1
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 21883
21876: POP
// hHackUnlimitedResources ; 2 :
21877: CALL 34252 0 0
21881: GO 21989
21883: LD_INT 2
21885: DOUBLE
21886: EQUAL
21887: IFTRUE 21891
21889: GO 21898
21891: POP
// hHackSetLevel10 ; 3 :
21892: CALL 34385 0 0
21896: GO 21989
21898: LD_INT 3
21900: DOUBLE
21901: EQUAL
21902: IFTRUE 21906
21904: GO 21913
21906: POP
// hHackSetLevel10YourUnits ; 4 :
21907: CALL 34470 0 0
21911: GO 21989
21913: LD_INT 4
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21928
21921: POP
// hHackInvincible ; 5 :
21922: CALL 34918 0 0
21926: GO 21989
21928: LD_INT 5
21930: DOUBLE
21931: EQUAL
21932: IFTRUE 21936
21934: GO 21943
21936: POP
// hHackInvisible ; 6 :
21937: CALL 35029 0 0
21941: GO 21989
21943: LD_INT 6
21945: DOUBLE
21946: EQUAL
21947: IFTRUE 21951
21949: GO 21958
21951: POP
// hHackChangeYourSide ; 7 :
21952: CALL 35086 0 0
21956: GO 21989
21958: LD_INT 7
21960: DOUBLE
21961: EQUAL
21962: IFTRUE 21966
21964: GO 21973
21966: POP
// hHackChangeUnitSide ; 8 :
21967: CALL 35128 0 0
21971: GO 21989
21973: LD_INT 8
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 21988
21981: POP
// hHackFog ; end ;
21982: CALL 35229 0 0
21986: GO 21989
21988: POP
// end ; if p2 = game_save_mode then
21989: LD_VAR 0 2
21993: PUSH
21994: LD_INT 102
21996: EQUAL
21997: IFFALSE 22054
// begin if p3 = 1 then
21999: LD_VAR 0 3
22003: PUSH
22004: LD_INT 1
22006: EQUAL
22007: IFFALSE 22019
// globalGameSaveCounter := p4 ;
22009: LD_ADDR_EXP 37
22013: PUSH
22014: LD_VAR 0 4
22018: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22019: LD_VAR 0 3
22023: PUSH
22024: LD_INT 2
22026: EQUAL
22027: IFFALSE 22035
22029: PUSH
22030: LD_EXP 37
22034: AND
22035: IFFALSE 22054
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22037: LD_STRING setGameSaveCounter(
22039: PUSH
22040: LD_EXP 37
22044: STR
22045: PUSH
22046: LD_STRING )
22048: STR
22049: PPUSH
22050: CALL_OW 559
// end ; end ;
22054: LD_VAR 0 7
22058: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22059: LD_INT 0
22061: PPUSH
// streamModeActive := false ;
22062: LD_ADDR_EXP 38
22066: PUSH
22067: LD_INT 0
22069: ST_TO_ADDR
// normalCounter := 36 ;
22070: LD_ADDR_EXP 39
22074: PUSH
22075: LD_INT 36
22077: ST_TO_ADDR
// hardcoreCounter := 18 ;
22078: LD_ADDR_EXP 40
22082: PUSH
22083: LD_INT 18
22085: ST_TO_ADDR
// sRocket := false ;
22086: LD_ADDR_EXP 43
22090: PUSH
22091: LD_INT 0
22093: ST_TO_ADDR
// sSpeed := false ;
22094: LD_ADDR_EXP 42
22098: PUSH
22099: LD_INT 0
22101: ST_TO_ADDR
// sEngine := false ;
22102: LD_ADDR_EXP 44
22106: PUSH
22107: LD_INT 0
22109: ST_TO_ADDR
// sSpec := false ;
22110: LD_ADDR_EXP 41
22114: PUSH
22115: LD_INT 0
22117: ST_TO_ADDR
// sLevel := false ;
22118: LD_ADDR_EXP 45
22122: PUSH
22123: LD_INT 0
22125: ST_TO_ADDR
// sArmoury := false ;
22126: LD_ADDR_EXP 46
22130: PUSH
22131: LD_INT 0
22133: ST_TO_ADDR
// sRadar := false ;
22134: LD_ADDR_EXP 47
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
// sBunker := false ;
22142: LD_ADDR_EXP 48
22146: PUSH
22147: LD_INT 0
22149: ST_TO_ADDR
// sHack := false ;
22150: LD_ADDR_EXP 49
22154: PUSH
22155: LD_INT 0
22157: ST_TO_ADDR
// sFire := false ;
22158: LD_ADDR_EXP 50
22162: PUSH
22163: LD_INT 0
22165: ST_TO_ADDR
// sRefresh := false ;
22166: LD_ADDR_EXP 51
22170: PUSH
22171: LD_INT 0
22173: ST_TO_ADDR
// sExp := false ;
22174: LD_ADDR_EXP 52
22178: PUSH
22179: LD_INT 0
22181: ST_TO_ADDR
// sDepot := false ;
22182: LD_ADDR_EXP 53
22186: PUSH
22187: LD_INT 0
22189: ST_TO_ADDR
// sFlag := false ;
22190: LD_ADDR_EXP 54
22194: PUSH
22195: LD_INT 0
22197: ST_TO_ADDR
// sKamikadze := false ;
22198: LD_ADDR_EXP 62
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// sTroll := false ;
22206: LD_ADDR_EXP 63
22210: PUSH
22211: LD_INT 0
22213: ST_TO_ADDR
// sSlow := false ;
22214: LD_ADDR_EXP 64
22218: PUSH
22219: LD_INT 0
22221: ST_TO_ADDR
// sLack := false ;
22222: LD_ADDR_EXP 65
22226: PUSH
22227: LD_INT 0
22229: ST_TO_ADDR
// sTank := false ;
22230: LD_ADDR_EXP 67
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
// sRemote := false ;
22238: LD_ADDR_EXP 68
22242: PUSH
22243: LD_INT 0
22245: ST_TO_ADDR
// sPowell := false ;
22246: LD_ADDR_EXP 69
22250: PUSH
22251: LD_INT 0
22253: ST_TO_ADDR
// sTeleport := false ;
22254: LD_ADDR_EXP 72
22258: PUSH
22259: LD_INT 0
22261: ST_TO_ADDR
// sOilTower := false ;
22262: LD_ADDR_EXP 74
22266: PUSH
22267: LD_INT 0
22269: ST_TO_ADDR
// sShovel := false ;
22270: LD_ADDR_EXP 75
22274: PUSH
22275: LD_INT 0
22277: ST_TO_ADDR
// sSheik := false ;
22278: LD_ADDR_EXP 76
22282: PUSH
22283: LD_INT 0
22285: ST_TO_ADDR
// sEarthquake := false ;
22286: LD_ADDR_EXP 78
22290: PUSH
22291: LD_INT 0
22293: ST_TO_ADDR
// sAI := false ;
22294: LD_ADDR_EXP 79
22298: PUSH
22299: LD_INT 0
22301: ST_TO_ADDR
// sCargo := false ;
22302: LD_ADDR_EXP 82
22306: PUSH
22307: LD_INT 0
22309: ST_TO_ADDR
// sDLaser := false ;
22310: LD_ADDR_EXP 83
22314: PUSH
22315: LD_INT 0
22317: ST_TO_ADDR
// sExchange := false ;
22318: LD_ADDR_EXP 84
22322: PUSH
22323: LD_INT 0
22325: ST_TO_ADDR
// sFac := false ;
22326: LD_ADDR_EXP 85
22330: PUSH
22331: LD_INT 0
22333: ST_TO_ADDR
// sPower := false ;
22334: LD_ADDR_EXP 86
22338: PUSH
22339: LD_INT 0
22341: ST_TO_ADDR
// sRandom := false ;
22342: LD_ADDR_EXP 87
22346: PUSH
22347: LD_INT 0
22349: ST_TO_ADDR
// sShield := false ;
22350: LD_ADDR_EXP 88
22354: PUSH
22355: LD_INT 0
22357: ST_TO_ADDR
// sTime := false ;
22358: LD_ADDR_EXP 89
22362: PUSH
22363: LD_INT 0
22365: ST_TO_ADDR
// sTools := false ;
22366: LD_ADDR_EXP 90
22370: PUSH
22371: LD_INT 0
22373: ST_TO_ADDR
// sSold := false ;
22374: LD_ADDR_EXP 55
22378: PUSH
22379: LD_INT 0
22381: ST_TO_ADDR
// sDiff := false ;
22382: LD_ADDR_EXP 56
22386: PUSH
22387: LD_INT 0
22389: ST_TO_ADDR
// sFog := false ;
22390: LD_ADDR_EXP 59
22394: PUSH
22395: LD_INT 0
22397: ST_TO_ADDR
// sReset := false ;
22398: LD_ADDR_EXP 60
22402: PUSH
22403: LD_INT 0
22405: ST_TO_ADDR
// sSun := false ;
22406: LD_ADDR_EXP 61
22410: PUSH
22411: LD_INT 0
22413: ST_TO_ADDR
// sTiger := false ;
22414: LD_ADDR_EXP 57
22418: PUSH
22419: LD_INT 0
22421: ST_TO_ADDR
// sBomb := false ;
22422: LD_ADDR_EXP 58
22426: PUSH
22427: LD_INT 0
22429: ST_TO_ADDR
// sWound := false ;
22430: LD_ADDR_EXP 66
22434: PUSH
22435: LD_INT 0
22437: ST_TO_ADDR
// sBetray := false ;
22438: LD_ADDR_EXP 70
22442: PUSH
22443: LD_INT 0
22445: ST_TO_ADDR
// sContamin := false ;
22446: LD_ADDR_EXP 71
22450: PUSH
22451: LD_INT 0
22453: ST_TO_ADDR
// sOil := false ;
22454: LD_ADDR_EXP 73
22458: PUSH
22459: LD_INT 0
22461: ST_TO_ADDR
// sStu := false ;
22462: LD_ADDR_EXP 77
22466: PUSH
22467: LD_INT 0
22469: ST_TO_ADDR
// sBazooka := false ;
22470: LD_ADDR_EXP 80
22474: PUSH
22475: LD_INT 0
22477: ST_TO_ADDR
// sMortar := false ;
22478: LD_ADDR_EXP 81
22482: PUSH
22483: LD_INT 0
22485: ST_TO_ADDR
// sRanger := false ;
22486: LD_ADDR_EXP 91
22490: PUSH
22491: LD_INT 0
22493: ST_TO_ADDR
// sComputer := false ;
22494: LD_ADDR_EXP 92
22498: PUSH
22499: LD_INT 0
22501: ST_TO_ADDR
// s30 := false ;
22502: LD_ADDR_EXP 93
22506: PUSH
22507: LD_INT 0
22509: ST_TO_ADDR
// s60 := false ;
22510: LD_ADDR_EXP 94
22514: PUSH
22515: LD_INT 0
22517: ST_TO_ADDR
// end ;
22518: LD_VAR 0 1
22522: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22523: LD_INT 0
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
22530: PPUSH
22531: PPUSH
// result := [ ] ;
22532: LD_ADDR_VAR 0 2
22536: PUSH
22537: EMPTY
22538: ST_TO_ADDR
// if campaign_id = 1 then
22539: LD_OWVAR 69
22543: PUSH
22544: LD_INT 1
22546: EQUAL
22547: IFFALSE 25713
// begin case mission_number of 1 :
22549: LD_OWVAR 70
22553: PUSH
22554: LD_INT 1
22556: DOUBLE
22557: EQUAL
22558: IFTRUE 22562
22560: GO 22638
22562: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 4
22573: PUSH
22574: LD_INT 11
22576: PUSH
22577: LD_INT 12
22579: PUSH
22580: LD_INT 15
22582: PUSH
22583: LD_INT 16
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_INT 23
22591: PUSH
22592: LD_INT 26
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 101
22608: PUSH
22609: LD_INT 102
22611: PUSH
22612: LD_INT 106
22614: PUSH
22615: LD_INT 116
22617: PUSH
22618: LD_INT 117
22620: PUSH
22621: LD_INT 118
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: ST_TO_ADDR
22636: GO 25711
22638: LD_INT 2
22640: DOUBLE
22641: EQUAL
22642: IFTRUE 22646
22644: GO 22730
22646: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22647: LD_ADDR_VAR 0 2
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: LD_INT 4
22657: PUSH
22658: LD_INT 11
22660: PUSH
22661: LD_INT 12
22663: PUSH
22664: LD_INT 15
22666: PUSH
22667: LD_INT 16
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_INT 23
22675: PUSH
22676: LD_INT 26
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 101
22692: PUSH
22693: LD_INT 102
22695: PUSH
22696: LD_INT 105
22698: PUSH
22699: LD_INT 106
22701: PUSH
22702: LD_INT 108
22704: PUSH
22705: LD_INT 116
22707: PUSH
22708: LD_INT 117
22710: PUSH
22711: LD_INT 118
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: ST_TO_ADDR
22728: GO 25711
22730: LD_INT 3
22732: DOUBLE
22733: EQUAL
22734: IFTRUE 22738
22736: GO 22826
22738: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: LD_INT 4
22749: PUSH
22750: LD_INT 5
22752: PUSH
22753: LD_INT 11
22755: PUSH
22756: LD_INT 12
22758: PUSH
22759: LD_INT 15
22761: PUSH
22762: LD_INT 16
22764: PUSH
22765: LD_INT 22
22767: PUSH
22768: LD_INT 26
22770: PUSH
22771: LD_INT 36
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 101
22788: PUSH
22789: LD_INT 102
22791: PUSH
22792: LD_INT 105
22794: PUSH
22795: LD_INT 106
22797: PUSH
22798: LD_INT 108
22800: PUSH
22801: LD_INT 116
22803: PUSH
22804: LD_INT 117
22806: PUSH
22807: LD_INT 118
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: ST_TO_ADDR
22824: GO 25711
22826: LD_INT 4
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 22930
22834: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22835: LD_ADDR_VAR 0 2
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: LD_INT 4
22845: PUSH
22846: LD_INT 5
22848: PUSH
22849: LD_INT 8
22851: PUSH
22852: LD_INT 11
22854: PUSH
22855: LD_INT 12
22857: PUSH
22858: LD_INT 15
22860: PUSH
22861: LD_INT 16
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_INT 23
22869: PUSH
22870: LD_INT 26
22872: PUSH
22873: LD_INT 36
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 101
22892: PUSH
22893: LD_INT 102
22895: PUSH
22896: LD_INT 105
22898: PUSH
22899: LD_INT 106
22901: PUSH
22902: LD_INT 108
22904: PUSH
22905: LD_INT 116
22907: PUSH
22908: LD_INT 117
22910: PUSH
22911: LD_INT 118
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: ST_TO_ADDR
22928: GO 25711
22930: LD_INT 5
22932: DOUBLE
22933: EQUAL
22934: IFTRUE 22938
22936: GO 23050
22938: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22939: LD_ADDR_VAR 0 2
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 4
22949: PUSH
22950: LD_INT 5
22952: PUSH
22953: LD_INT 6
22955: PUSH
22956: LD_INT 8
22958: PUSH
22959: LD_INT 11
22961: PUSH
22962: LD_INT 12
22964: PUSH
22965: LD_INT 15
22967: PUSH
22968: LD_INT 16
22970: PUSH
22971: LD_INT 22
22973: PUSH
22974: LD_INT 23
22976: PUSH
22977: LD_INT 25
22979: PUSH
22980: LD_INT 26
22982: PUSH
22983: LD_INT 36
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 101
23004: PUSH
23005: LD_INT 102
23007: PUSH
23008: LD_INT 105
23010: PUSH
23011: LD_INT 106
23013: PUSH
23014: LD_INT 108
23016: PUSH
23017: LD_INT 109
23019: PUSH
23020: LD_INT 112
23022: PUSH
23023: LD_INT 116
23025: PUSH
23026: LD_INT 117
23028: PUSH
23029: LD_INT 118
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: ST_TO_ADDR
23048: GO 25711
23050: LD_INT 6
23052: DOUBLE
23053: EQUAL
23054: IFTRUE 23058
23056: GO 23190
23058: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23059: LD_ADDR_VAR 0 2
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: LD_INT 4
23069: PUSH
23070: LD_INT 5
23072: PUSH
23073: LD_INT 6
23075: PUSH
23076: LD_INT 8
23078: PUSH
23079: LD_INT 11
23081: PUSH
23082: LD_INT 12
23084: PUSH
23085: LD_INT 15
23087: PUSH
23088: LD_INT 16
23090: PUSH
23091: LD_INT 20
23093: PUSH
23094: LD_INT 21
23096: PUSH
23097: LD_INT 22
23099: PUSH
23100: LD_INT 23
23102: PUSH
23103: LD_INT 25
23105: PUSH
23106: LD_INT 26
23108: PUSH
23109: LD_INT 30
23111: PUSH
23112: LD_INT 31
23114: PUSH
23115: LD_INT 32
23117: PUSH
23118: LD_INT 36
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 101
23144: PUSH
23145: LD_INT 102
23147: PUSH
23148: LD_INT 105
23150: PUSH
23151: LD_INT 106
23153: PUSH
23154: LD_INT 108
23156: PUSH
23157: LD_INT 109
23159: PUSH
23160: LD_INT 112
23162: PUSH
23163: LD_INT 116
23165: PUSH
23166: LD_INT 117
23168: PUSH
23169: LD_INT 118
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: ST_TO_ADDR
23188: GO 25711
23190: LD_INT 7
23192: DOUBLE
23193: EQUAL
23194: IFTRUE 23198
23196: GO 23310
23198: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23199: LD_ADDR_VAR 0 2
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 4
23209: PUSH
23210: LD_INT 5
23212: PUSH
23213: LD_INT 7
23215: PUSH
23216: LD_INT 11
23218: PUSH
23219: LD_INT 12
23221: PUSH
23222: LD_INT 15
23224: PUSH
23225: LD_INT 16
23227: PUSH
23228: LD_INT 20
23230: PUSH
23231: LD_INT 21
23233: PUSH
23234: LD_INT 22
23236: PUSH
23237: LD_INT 23
23239: PUSH
23240: LD_INT 25
23242: PUSH
23243: LD_INT 26
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 101
23264: PUSH
23265: LD_INT 102
23267: PUSH
23268: LD_INT 103
23270: PUSH
23271: LD_INT 105
23273: PUSH
23274: LD_INT 106
23276: PUSH
23277: LD_INT 108
23279: PUSH
23280: LD_INT 112
23282: PUSH
23283: LD_INT 116
23285: PUSH
23286: LD_INT 117
23288: PUSH
23289: LD_INT 118
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: ST_TO_ADDR
23308: GO 25711
23310: LD_INT 8
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23318
23316: GO 23458
23318: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23319: LD_ADDR_VAR 0 2
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 6
23335: PUSH
23336: LD_INT 7
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 11
23344: PUSH
23345: LD_INT 12
23347: PUSH
23348: LD_INT 15
23350: PUSH
23351: LD_INT 16
23353: PUSH
23354: LD_INT 20
23356: PUSH
23357: LD_INT 21
23359: PUSH
23360: LD_INT 22
23362: PUSH
23363: LD_INT 23
23365: PUSH
23366: LD_INT 25
23368: PUSH
23369: LD_INT 26
23371: PUSH
23372: LD_INT 30
23374: PUSH
23375: LD_INT 31
23377: PUSH
23378: LD_INT 32
23380: PUSH
23381: LD_INT 36
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 101
23408: PUSH
23409: LD_INT 102
23411: PUSH
23412: LD_INT 103
23414: PUSH
23415: LD_INT 105
23417: PUSH
23418: LD_INT 106
23420: PUSH
23421: LD_INT 108
23423: PUSH
23424: LD_INT 109
23426: PUSH
23427: LD_INT 112
23429: PUSH
23430: LD_INT 116
23432: PUSH
23433: LD_INT 117
23435: PUSH
23436: LD_INT 118
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: ST_TO_ADDR
23456: GO 25711
23458: LD_INT 9
23460: DOUBLE
23461: EQUAL
23462: IFTRUE 23466
23464: GO 23614
23466: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23467: LD_ADDR_VAR 0 2
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 4
23477: PUSH
23478: LD_INT 5
23480: PUSH
23481: LD_INT 6
23483: PUSH
23484: LD_INT 7
23486: PUSH
23487: LD_INT 8
23489: PUSH
23490: LD_INT 11
23492: PUSH
23493: LD_INT 12
23495: PUSH
23496: LD_INT 15
23498: PUSH
23499: LD_INT 16
23501: PUSH
23502: LD_INT 20
23504: PUSH
23505: LD_INT 21
23507: PUSH
23508: LD_INT 22
23510: PUSH
23511: LD_INT 23
23513: PUSH
23514: LD_INT 25
23516: PUSH
23517: LD_INT 26
23519: PUSH
23520: LD_INT 28
23522: PUSH
23523: LD_INT 30
23525: PUSH
23526: LD_INT 31
23528: PUSH
23529: LD_INT 32
23531: PUSH
23532: LD_INT 36
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 101
23560: PUSH
23561: LD_INT 102
23563: PUSH
23564: LD_INT 103
23566: PUSH
23567: LD_INT 105
23569: PUSH
23570: LD_INT 106
23572: PUSH
23573: LD_INT 108
23575: PUSH
23576: LD_INT 109
23578: PUSH
23579: LD_INT 112
23581: PUSH
23582: LD_INT 114
23584: PUSH
23585: LD_INT 116
23587: PUSH
23588: LD_INT 117
23590: PUSH
23591: LD_INT 118
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: ST_TO_ADDR
23612: GO 25711
23614: LD_INT 10
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23622
23620: GO 23818
23622: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23623: LD_ADDR_VAR 0 2
23627: PUSH
23628: LD_INT 2
23630: PUSH
23631: LD_INT 4
23633: PUSH
23634: LD_INT 5
23636: PUSH
23637: LD_INT 6
23639: PUSH
23640: LD_INT 7
23642: PUSH
23643: LD_INT 8
23645: PUSH
23646: LD_INT 9
23648: PUSH
23649: LD_INT 10
23651: PUSH
23652: LD_INT 11
23654: PUSH
23655: LD_INT 12
23657: PUSH
23658: LD_INT 13
23660: PUSH
23661: LD_INT 14
23663: PUSH
23664: LD_INT 15
23666: PUSH
23667: LD_INT 16
23669: PUSH
23670: LD_INT 17
23672: PUSH
23673: LD_INT 18
23675: PUSH
23676: LD_INT 19
23678: PUSH
23679: LD_INT 20
23681: PUSH
23682: LD_INT 21
23684: PUSH
23685: LD_INT 22
23687: PUSH
23688: LD_INT 23
23690: PUSH
23691: LD_INT 24
23693: PUSH
23694: LD_INT 25
23696: PUSH
23697: LD_INT 26
23699: PUSH
23700: LD_INT 28
23702: PUSH
23703: LD_INT 30
23705: PUSH
23706: LD_INT 31
23708: PUSH
23709: LD_INT 32
23711: PUSH
23712: LD_INT 36
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 101
23748: PUSH
23749: LD_INT 102
23751: PUSH
23752: LD_INT 103
23754: PUSH
23755: LD_INT 104
23757: PUSH
23758: LD_INT 105
23760: PUSH
23761: LD_INT 106
23763: PUSH
23764: LD_INT 107
23766: PUSH
23767: LD_INT 108
23769: PUSH
23770: LD_INT 109
23772: PUSH
23773: LD_INT 110
23775: PUSH
23776: LD_INT 111
23778: PUSH
23779: LD_INT 112
23781: PUSH
23782: LD_INT 114
23784: PUSH
23785: LD_INT 116
23787: PUSH
23788: LD_INT 117
23790: PUSH
23791: LD_INT 118
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: ST_TO_ADDR
23816: GO 25711
23818: LD_INT 11
23820: DOUBLE
23821: EQUAL
23822: IFTRUE 23826
23824: GO 24030
23826: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23827: LD_ADDR_VAR 0 2
23831: PUSH
23832: LD_INT 2
23834: PUSH
23835: LD_INT 3
23837: PUSH
23838: LD_INT 4
23840: PUSH
23841: LD_INT 5
23843: PUSH
23844: LD_INT 6
23846: PUSH
23847: LD_INT 7
23849: PUSH
23850: LD_INT 8
23852: PUSH
23853: LD_INT 9
23855: PUSH
23856: LD_INT 10
23858: PUSH
23859: LD_INT 11
23861: PUSH
23862: LD_INT 12
23864: PUSH
23865: LD_INT 13
23867: PUSH
23868: LD_INT 14
23870: PUSH
23871: LD_INT 15
23873: PUSH
23874: LD_INT 16
23876: PUSH
23877: LD_INT 17
23879: PUSH
23880: LD_INT 18
23882: PUSH
23883: LD_INT 19
23885: PUSH
23886: LD_INT 20
23888: PUSH
23889: LD_INT 21
23891: PUSH
23892: LD_INT 22
23894: PUSH
23895: LD_INT 23
23897: PUSH
23898: LD_INT 24
23900: PUSH
23901: LD_INT 25
23903: PUSH
23904: LD_INT 26
23906: PUSH
23907: LD_INT 28
23909: PUSH
23910: LD_INT 30
23912: PUSH
23913: LD_INT 31
23915: PUSH
23916: LD_INT 32
23918: PUSH
23919: LD_INT 34
23921: PUSH
23922: LD_INT 36
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 101
23960: PUSH
23961: LD_INT 102
23963: PUSH
23964: LD_INT 103
23966: PUSH
23967: LD_INT 104
23969: PUSH
23970: LD_INT 105
23972: PUSH
23973: LD_INT 106
23975: PUSH
23976: LD_INT 107
23978: PUSH
23979: LD_INT 108
23981: PUSH
23982: LD_INT 109
23984: PUSH
23985: LD_INT 110
23987: PUSH
23988: LD_INT 111
23990: PUSH
23991: LD_INT 112
23993: PUSH
23994: LD_INT 114
23996: PUSH
23997: LD_INT 116
23999: PUSH
24000: LD_INT 117
24002: PUSH
24003: LD_INT 118
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: ST_TO_ADDR
24028: GO 25711
24030: LD_INT 12
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24258
24038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24039: LD_ADDR_VAR 0 2
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: LD_INT 4
24055: PUSH
24056: LD_INT 5
24058: PUSH
24059: LD_INT 6
24061: PUSH
24062: LD_INT 7
24064: PUSH
24065: LD_INT 8
24067: PUSH
24068: LD_INT 9
24070: PUSH
24071: LD_INT 10
24073: PUSH
24074: LD_INT 11
24076: PUSH
24077: LD_INT 12
24079: PUSH
24080: LD_INT 13
24082: PUSH
24083: LD_INT 14
24085: PUSH
24086: LD_INT 15
24088: PUSH
24089: LD_INT 16
24091: PUSH
24092: LD_INT 17
24094: PUSH
24095: LD_INT 18
24097: PUSH
24098: LD_INT 19
24100: PUSH
24101: LD_INT 20
24103: PUSH
24104: LD_INT 21
24106: PUSH
24107: LD_INT 22
24109: PUSH
24110: LD_INT 23
24112: PUSH
24113: LD_INT 24
24115: PUSH
24116: LD_INT 25
24118: PUSH
24119: LD_INT 26
24121: PUSH
24122: LD_INT 27
24124: PUSH
24125: LD_INT 28
24127: PUSH
24128: LD_INT 30
24130: PUSH
24131: LD_INT 31
24133: PUSH
24134: LD_INT 32
24136: PUSH
24137: LD_INT 33
24139: PUSH
24140: LD_INT 34
24142: PUSH
24143: LD_INT 36
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 101
24184: PUSH
24185: LD_INT 102
24187: PUSH
24188: LD_INT 103
24190: PUSH
24191: LD_INT 104
24193: PUSH
24194: LD_INT 105
24196: PUSH
24197: LD_INT 106
24199: PUSH
24200: LD_INT 107
24202: PUSH
24203: LD_INT 108
24205: PUSH
24206: LD_INT 109
24208: PUSH
24209: LD_INT 110
24211: PUSH
24212: LD_INT 111
24214: PUSH
24215: LD_INT 112
24217: PUSH
24218: LD_INT 113
24220: PUSH
24221: LD_INT 114
24223: PUSH
24224: LD_INT 116
24226: PUSH
24227: LD_INT 117
24229: PUSH
24230: LD_INT 118
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: ST_TO_ADDR
24256: GO 25711
24258: LD_INT 13
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24474
24266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24267: LD_ADDR_VAR 0 2
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: LD_INT 4
24283: PUSH
24284: LD_INT 5
24286: PUSH
24287: LD_INT 8
24289: PUSH
24290: LD_INT 9
24292: PUSH
24293: LD_INT 10
24295: PUSH
24296: LD_INT 11
24298: PUSH
24299: LD_INT 12
24301: PUSH
24302: LD_INT 14
24304: PUSH
24305: LD_INT 15
24307: PUSH
24308: LD_INT 16
24310: PUSH
24311: LD_INT 17
24313: PUSH
24314: LD_INT 18
24316: PUSH
24317: LD_INT 19
24319: PUSH
24320: LD_INT 20
24322: PUSH
24323: LD_INT 21
24325: PUSH
24326: LD_INT 22
24328: PUSH
24329: LD_INT 23
24331: PUSH
24332: LD_INT 24
24334: PUSH
24335: LD_INT 25
24337: PUSH
24338: LD_INT 26
24340: PUSH
24341: LD_INT 27
24343: PUSH
24344: LD_INT 28
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: LD_INT 31
24352: PUSH
24353: LD_INT 32
24355: PUSH
24356: LD_INT 33
24358: PUSH
24359: LD_INT 34
24361: PUSH
24362: LD_INT 36
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 101
24400: PUSH
24401: LD_INT 102
24403: PUSH
24404: LD_INT 103
24406: PUSH
24407: LD_INT 104
24409: PUSH
24410: LD_INT 105
24412: PUSH
24413: LD_INT 106
24415: PUSH
24416: LD_INT 107
24418: PUSH
24419: LD_INT 108
24421: PUSH
24422: LD_INT 109
24424: PUSH
24425: LD_INT 110
24427: PUSH
24428: LD_INT 111
24430: PUSH
24431: LD_INT 112
24433: PUSH
24434: LD_INT 113
24436: PUSH
24437: LD_INT 114
24439: PUSH
24440: LD_INT 116
24442: PUSH
24443: LD_INT 117
24445: PUSH
24446: LD_INT 118
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: ST_TO_ADDR
24472: GO 25711
24474: LD_INT 14
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24482
24480: GO 24706
24482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24483: LD_ADDR_VAR 0 2
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: LD_INT 3
24496: PUSH
24497: LD_INT 4
24499: PUSH
24500: LD_INT 5
24502: PUSH
24503: LD_INT 6
24505: PUSH
24506: LD_INT 7
24508: PUSH
24509: LD_INT 8
24511: PUSH
24512: LD_INT 9
24514: PUSH
24515: LD_INT 10
24517: PUSH
24518: LD_INT 11
24520: PUSH
24521: LD_INT 12
24523: PUSH
24524: LD_INT 13
24526: PUSH
24527: LD_INT 14
24529: PUSH
24530: LD_INT 15
24532: PUSH
24533: LD_INT 16
24535: PUSH
24536: LD_INT 17
24538: PUSH
24539: LD_INT 18
24541: PUSH
24542: LD_INT 19
24544: PUSH
24545: LD_INT 20
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 22
24553: PUSH
24554: LD_INT 23
24556: PUSH
24557: LD_INT 24
24559: PUSH
24560: LD_INT 25
24562: PUSH
24563: LD_INT 26
24565: PUSH
24566: LD_INT 27
24568: PUSH
24569: LD_INT 28
24571: PUSH
24572: LD_INT 29
24574: PUSH
24575: LD_INT 30
24577: PUSH
24578: LD_INT 31
24580: PUSH
24581: LD_INT 32
24583: PUSH
24584: LD_INT 33
24586: PUSH
24587: LD_INT 34
24589: PUSH
24590: LD_INT 36
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 101
24632: PUSH
24633: LD_INT 102
24635: PUSH
24636: LD_INT 103
24638: PUSH
24639: LD_INT 104
24641: PUSH
24642: LD_INT 105
24644: PUSH
24645: LD_INT 106
24647: PUSH
24648: LD_INT 107
24650: PUSH
24651: LD_INT 108
24653: PUSH
24654: LD_INT 109
24656: PUSH
24657: LD_INT 110
24659: PUSH
24660: LD_INT 111
24662: PUSH
24663: LD_INT 112
24665: PUSH
24666: LD_INT 113
24668: PUSH
24669: LD_INT 114
24671: PUSH
24672: LD_INT 116
24674: PUSH
24675: LD_INT 117
24677: PUSH
24678: LD_INT 118
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: ST_TO_ADDR
24704: GO 25711
24706: LD_INT 15
24708: DOUBLE
24709: EQUAL
24710: IFTRUE 24714
24712: GO 24938
24714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24715: LD_ADDR_VAR 0 2
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 3
24728: PUSH
24729: LD_INT 4
24731: PUSH
24732: LD_INT 5
24734: PUSH
24735: LD_INT 6
24737: PUSH
24738: LD_INT 7
24740: PUSH
24741: LD_INT 8
24743: PUSH
24744: LD_INT 9
24746: PUSH
24747: LD_INT 10
24749: PUSH
24750: LD_INT 11
24752: PUSH
24753: LD_INT 12
24755: PUSH
24756: LD_INT 13
24758: PUSH
24759: LD_INT 14
24761: PUSH
24762: LD_INT 15
24764: PUSH
24765: LD_INT 16
24767: PUSH
24768: LD_INT 17
24770: PUSH
24771: LD_INT 18
24773: PUSH
24774: LD_INT 19
24776: PUSH
24777: LD_INT 20
24779: PUSH
24780: LD_INT 21
24782: PUSH
24783: LD_INT 22
24785: PUSH
24786: LD_INT 23
24788: PUSH
24789: LD_INT 24
24791: PUSH
24792: LD_INT 25
24794: PUSH
24795: LD_INT 26
24797: PUSH
24798: LD_INT 27
24800: PUSH
24801: LD_INT 28
24803: PUSH
24804: LD_INT 29
24806: PUSH
24807: LD_INT 30
24809: PUSH
24810: LD_INT 31
24812: PUSH
24813: LD_INT 32
24815: PUSH
24816: LD_INT 33
24818: PUSH
24819: LD_INT 34
24821: PUSH
24822: LD_INT 36
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 101
24864: PUSH
24865: LD_INT 102
24867: PUSH
24868: LD_INT 103
24870: PUSH
24871: LD_INT 104
24873: PUSH
24874: LD_INT 105
24876: PUSH
24877: LD_INT 106
24879: PUSH
24880: LD_INT 107
24882: PUSH
24883: LD_INT 108
24885: PUSH
24886: LD_INT 109
24888: PUSH
24889: LD_INT 110
24891: PUSH
24892: LD_INT 111
24894: PUSH
24895: LD_INT 112
24897: PUSH
24898: LD_INT 113
24900: PUSH
24901: LD_INT 114
24903: PUSH
24904: LD_INT 116
24906: PUSH
24907: LD_INT 117
24909: PUSH
24910: LD_INT 118
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: ST_TO_ADDR
24936: GO 25711
24938: LD_INT 16
24940: DOUBLE
24941: EQUAL
24942: IFTRUE 24946
24944: GO 25082
24946: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24947: LD_ADDR_VAR 0 2
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: LD_INT 4
24957: PUSH
24958: LD_INT 5
24960: PUSH
24961: LD_INT 7
24963: PUSH
24964: LD_INT 11
24966: PUSH
24967: LD_INT 12
24969: PUSH
24970: LD_INT 15
24972: PUSH
24973: LD_INT 16
24975: PUSH
24976: LD_INT 20
24978: PUSH
24979: LD_INT 21
24981: PUSH
24982: LD_INT 22
24984: PUSH
24985: LD_INT 23
24987: PUSH
24988: LD_INT 25
24990: PUSH
24991: LD_INT 26
24993: PUSH
24994: LD_INT 30
24996: PUSH
24997: LD_INT 31
24999: PUSH
25000: LD_INT 32
25002: PUSH
25003: LD_INT 33
25005: PUSH
25006: LD_INT 34
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 101
25032: PUSH
25033: LD_INT 102
25035: PUSH
25036: LD_INT 103
25038: PUSH
25039: LD_INT 106
25041: PUSH
25042: LD_INT 108
25044: PUSH
25045: LD_INT 112
25047: PUSH
25048: LD_INT 113
25050: PUSH
25051: LD_INT 114
25053: PUSH
25054: LD_INT 116
25056: PUSH
25057: LD_INT 117
25059: PUSH
25060: LD_INT 118
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: ST_TO_ADDR
25080: GO 25711
25082: LD_INT 17
25084: DOUBLE
25085: EQUAL
25086: IFTRUE 25090
25088: GO 25314
25090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25091: LD_ADDR_VAR 0 2
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: LD_INT 3
25104: PUSH
25105: LD_INT 4
25107: PUSH
25108: LD_INT 5
25110: PUSH
25111: LD_INT 6
25113: PUSH
25114: LD_INT 7
25116: PUSH
25117: LD_INT 8
25119: PUSH
25120: LD_INT 9
25122: PUSH
25123: LD_INT 10
25125: PUSH
25126: LD_INT 11
25128: PUSH
25129: LD_INT 12
25131: PUSH
25132: LD_INT 13
25134: PUSH
25135: LD_INT 14
25137: PUSH
25138: LD_INT 15
25140: PUSH
25141: LD_INT 16
25143: PUSH
25144: LD_INT 17
25146: PUSH
25147: LD_INT 18
25149: PUSH
25150: LD_INT 19
25152: PUSH
25153: LD_INT 20
25155: PUSH
25156: LD_INT 21
25158: PUSH
25159: LD_INT 22
25161: PUSH
25162: LD_INT 23
25164: PUSH
25165: LD_INT 24
25167: PUSH
25168: LD_INT 25
25170: PUSH
25171: LD_INT 26
25173: PUSH
25174: LD_INT 27
25176: PUSH
25177: LD_INT 28
25179: PUSH
25180: LD_INT 29
25182: PUSH
25183: LD_INT 30
25185: PUSH
25186: LD_INT 31
25188: PUSH
25189: LD_INT 32
25191: PUSH
25192: LD_INT 33
25194: PUSH
25195: LD_INT 34
25197: PUSH
25198: LD_INT 36
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 101
25240: PUSH
25241: LD_INT 102
25243: PUSH
25244: LD_INT 103
25246: PUSH
25247: LD_INT 104
25249: PUSH
25250: LD_INT 105
25252: PUSH
25253: LD_INT 106
25255: PUSH
25256: LD_INT 107
25258: PUSH
25259: LD_INT 108
25261: PUSH
25262: LD_INT 109
25264: PUSH
25265: LD_INT 110
25267: PUSH
25268: LD_INT 111
25270: PUSH
25271: LD_INT 112
25273: PUSH
25274: LD_INT 113
25276: PUSH
25277: LD_INT 114
25279: PUSH
25280: LD_INT 116
25282: PUSH
25283: LD_INT 117
25285: PUSH
25286: LD_INT 118
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: ST_TO_ADDR
25312: GO 25711
25314: LD_INT 18
25316: DOUBLE
25317: EQUAL
25318: IFTRUE 25322
25320: GO 25470
25322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25323: LD_ADDR_VAR 0 2
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: LD_INT 4
25333: PUSH
25334: LD_INT 5
25336: PUSH
25337: LD_INT 7
25339: PUSH
25340: LD_INT 11
25342: PUSH
25343: LD_INT 12
25345: PUSH
25346: LD_INT 15
25348: PUSH
25349: LD_INT 16
25351: PUSH
25352: LD_INT 20
25354: PUSH
25355: LD_INT 21
25357: PUSH
25358: LD_INT 22
25360: PUSH
25361: LD_INT 23
25363: PUSH
25364: LD_INT 25
25366: PUSH
25367: LD_INT 26
25369: PUSH
25370: LD_INT 30
25372: PUSH
25373: LD_INT 31
25375: PUSH
25376: LD_INT 32
25378: PUSH
25379: LD_INT 33
25381: PUSH
25382: LD_INT 34
25384: PUSH
25385: LD_INT 35
25387: PUSH
25388: LD_INT 36
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 101
25416: PUSH
25417: LD_INT 102
25419: PUSH
25420: LD_INT 103
25422: PUSH
25423: LD_INT 106
25425: PUSH
25426: LD_INT 108
25428: PUSH
25429: LD_INT 112
25431: PUSH
25432: LD_INT 113
25434: PUSH
25435: LD_INT 114
25437: PUSH
25438: LD_INT 115
25440: PUSH
25441: LD_INT 116
25443: PUSH
25444: LD_INT 117
25446: PUSH
25447: LD_INT 118
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: ST_TO_ADDR
25468: GO 25711
25470: LD_INT 19
25472: DOUBLE
25473: EQUAL
25474: IFTRUE 25478
25476: GO 25710
25478: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25479: LD_ADDR_VAR 0 2
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: LD_INT 2
25489: PUSH
25490: LD_INT 3
25492: PUSH
25493: LD_INT 4
25495: PUSH
25496: LD_INT 5
25498: PUSH
25499: LD_INT 6
25501: PUSH
25502: LD_INT 7
25504: PUSH
25505: LD_INT 8
25507: PUSH
25508: LD_INT 9
25510: PUSH
25511: LD_INT 10
25513: PUSH
25514: LD_INT 11
25516: PUSH
25517: LD_INT 12
25519: PUSH
25520: LD_INT 13
25522: PUSH
25523: LD_INT 14
25525: PUSH
25526: LD_INT 15
25528: PUSH
25529: LD_INT 16
25531: PUSH
25532: LD_INT 17
25534: PUSH
25535: LD_INT 18
25537: PUSH
25538: LD_INT 19
25540: PUSH
25541: LD_INT 20
25543: PUSH
25544: LD_INT 21
25546: PUSH
25547: LD_INT 22
25549: PUSH
25550: LD_INT 23
25552: PUSH
25553: LD_INT 24
25555: PUSH
25556: LD_INT 25
25558: PUSH
25559: LD_INT 26
25561: PUSH
25562: LD_INT 27
25564: PUSH
25565: LD_INT 28
25567: PUSH
25568: LD_INT 29
25570: PUSH
25571: LD_INT 30
25573: PUSH
25574: LD_INT 31
25576: PUSH
25577: LD_INT 32
25579: PUSH
25580: LD_INT 33
25582: PUSH
25583: LD_INT 34
25585: PUSH
25586: LD_INT 35
25588: PUSH
25589: LD_INT 36
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 101
25632: PUSH
25633: LD_INT 102
25635: PUSH
25636: LD_INT 103
25638: PUSH
25639: LD_INT 104
25641: PUSH
25642: LD_INT 105
25644: PUSH
25645: LD_INT 106
25647: PUSH
25648: LD_INT 107
25650: PUSH
25651: LD_INT 108
25653: PUSH
25654: LD_INT 109
25656: PUSH
25657: LD_INT 110
25659: PUSH
25660: LD_INT 111
25662: PUSH
25663: LD_INT 112
25665: PUSH
25666: LD_INT 113
25668: PUSH
25669: LD_INT 114
25671: PUSH
25672: LD_INT 115
25674: PUSH
25675: LD_INT 116
25677: PUSH
25678: LD_INT 117
25680: PUSH
25681: LD_INT 118
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: ST_TO_ADDR
25708: GO 25711
25710: POP
// end else
25711: GO 25942
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25713: LD_ADDR_VAR 0 2
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 3
25726: PUSH
25727: LD_INT 4
25729: PUSH
25730: LD_INT 5
25732: PUSH
25733: LD_INT 6
25735: PUSH
25736: LD_INT 7
25738: PUSH
25739: LD_INT 8
25741: PUSH
25742: LD_INT 9
25744: PUSH
25745: LD_INT 10
25747: PUSH
25748: LD_INT 11
25750: PUSH
25751: LD_INT 12
25753: PUSH
25754: LD_INT 13
25756: PUSH
25757: LD_INT 14
25759: PUSH
25760: LD_INT 15
25762: PUSH
25763: LD_INT 16
25765: PUSH
25766: LD_INT 17
25768: PUSH
25769: LD_INT 18
25771: PUSH
25772: LD_INT 19
25774: PUSH
25775: LD_INT 20
25777: PUSH
25778: LD_INT 21
25780: PUSH
25781: LD_INT 22
25783: PUSH
25784: LD_INT 23
25786: PUSH
25787: LD_INT 24
25789: PUSH
25790: LD_INT 25
25792: PUSH
25793: LD_INT 26
25795: PUSH
25796: LD_INT 27
25798: PUSH
25799: LD_INT 28
25801: PUSH
25802: LD_INT 29
25804: PUSH
25805: LD_INT 30
25807: PUSH
25808: LD_INT 31
25810: PUSH
25811: LD_INT 32
25813: PUSH
25814: LD_INT 33
25816: PUSH
25817: LD_INT 34
25819: PUSH
25820: LD_INT 35
25822: PUSH
25823: LD_INT 36
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 101
25866: PUSH
25867: LD_INT 102
25869: PUSH
25870: LD_INT 103
25872: PUSH
25873: LD_INT 104
25875: PUSH
25876: LD_INT 105
25878: PUSH
25879: LD_INT 106
25881: PUSH
25882: LD_INT 107
25884: PUSH
25885: LD_INT 108
25887: PUSH
25888: LD_INT 109
25890: PUSH
25891: LD_INT 110
25893: PUSH
25894: LD_INT 111
25896: PUSH
25897: LD_INT 112
25899: PUSH
25900: LD_INT 113
25902: PUSH
25903: LD_INT 114
25905: PUSH
25906: LD_INT 115
25908: PUSH
25909: LD_INT 116
25911: PUSH
25912: LD_INT 117
25914: PUSH
25915: LD_INT 118
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: ST_TO_ADDR
// if result then
25942: LD_VAR 0 2
25946: IFFALSE 26732
// begin normal :=  ;
25948: LD_ADDR_VAR 0 5
25952: PUSH
25953: LD_STRING 
25955: ST_TO_ADDR
// hardcore :=  ;
25956: LD_ADDR_VAR 0 6
25960: PUSH
25961: LD_STRING 
25963: ST_TO_ADDR
// active :=  ;
25964: LD_ADDR_VAR 0 7
25968: PUSH
25969: LD_STRING 
25971: ST_TO_ADDR
// for i = 1 to normalCounter do
25972: LD_ADDR_VAR 0 8
25976: PUSH
25977: DOUBLE
25978: LD_INT 1
25980: DEC
25981: ST_TO_ADDR
25982: LD_EXP 39
25986: PUSH
25987: FOR_TO
25988: IFFALSE 26089
// begin tmp := 0 ;
25990: LD_ADDR_VAR 0 3
25994: PUSH
25995: LD_STRING 0
25997: ST_TO_ADDR
// if result [ 1 ] then
25998: LD_VAR 0 2
26002: PUSH
26003: LD_INT 1
26005: ARRAY
26006: IFFALSE 26071
// if result [ 1 ] [ 1 ] = i then
26008: LD_VAR 0 2
26012: PUSH
26013: LD_INT 1
26015: ARRAY
26016: PUSH
26017: LD_INT 1
26019: ARRAY
26020: PUSH
26021: LD_VAR 0 8
26025: EQUAL
26026: IFFALSE 26071
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26028: LD_ADDR_VAR 0 2
26032: PUSH
26033: LD_VAR 0 2
26037: PPUSH
26038: LD_INT 1
26040: PPUSH
26041: LD_VAR 0 2
26045: PUSH
26046: LD_INT 1
26048: ARRAY
26049: PPUSH
26050: LD_INT 1
26052: PPUSH
26053: CALL_OW 3
26057: PPUSH
26058: CALL_OW 1
26062: ST_TO_ADDR
// tmp := 1 ;
26063: LD_ADDR_VAR 0 3
26067: PUSH
26068: LD_STRING 1
26070: ST_TO_ADDR
// end ; normal := normal & tmp ;
26071: LD_ADDR_VAR 0 5
26075: PUSH
26076: LD_VAR 0 5
26080: PUSH
26081: LD_VAR 0 3
26085: STR
26086: ST_TO_ADDR
// end ;
26087: GO 25987
26089: POP
26090: POP
// for i = 1 to hardcoreCounter do
26091: LD_ADDR_VAR 0 8
26095: PUSH
26096: DOUBLE
26097: LD_INT 1
26099: DEC
26100: ST_TO_ADDR
26101: LD_EXP 40
26105: PUSH
26106: FOR_TO
26107: IFFALSE 26212
// begin tmp := 0 ;
26109: LD_ADDR_VAR 0 3
26113: PUSH
26114: LD_STRING 0
26116: ST_TO_ADDR
// if result [ 2 ] then
26117: LD_VAR 0 2
26121: PUSH
26122: LD_INT 2
26124: ARRAY
26125: IFFALSE 26194
// if result [ 2 ] [ 1 ] = 100 + i then
26127: LD_VAR 0 2
26131: PUSH
26132: LD_INT 2
26134: ARRAY
26135: PUSH
26136: LD_INT 1
26138: ARRAY
26139: PUSH
26140: LD_INT 100
26142: PUSH
26143: LD_VAR 0 8
26147: PLUS
26148: EQUAL
26149: IFFALSE 26194
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26151: LD_ADDR_VAR 0 2
26155: PUSH
26156: LD_VAR 0 2
26160: PPUSH
26161: LD_INT 2
26163: PPUSH
26164: LD_VAR 0 2
26168: PUSH
26169: LD_INT 2
26171: ARRAY
26172: PPUSH
26173: LD_INT 1
26175: PPUSH
26176: CALL_OW 3
26180: PPUSH
26181: CALL_OW 1
26185: ST_TO_ADDR
// tmp := 1 ;
26186: LD_ADDR_VAR 0 3
26190: PUSH
26191: LD_STRING 1
26193: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26194: LD_ADDR_VAR 0 6
26198: PUSH
26199: LD_VAR 0 6
26203: PUSH
26204: LD_VAR 0 3
26208: STR
26209: ST_TO_ADDR
// end ;
26210: GO 26106
26212: POP
26213: POP
// if isGameLoad then
26214: LD_VAR 0 1
26218: IFFALSE 26693
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26220: LD_ADDR_VAR 0 4
26224: PUSH
26225: LD_EXP 43
26229: PUSH
26230: LD_EXP 42
26234: PUSH
26235: LD_EXP 44
26239: PUSH
26240: LD_EXP 41
26244: PUSH
26245: LD_EXP 45
26249: PUSH
26250: LD_EXP 46
26254: PUSH
26255: LD_EXP 47
26259: PUSH
26260: LD_EXP 48
26264: PUSH
26265: LD_EXP 49
26269: PUSH
26270: LD_EXP 50
26274: PUSH
26275: LD_EXP 51
26279: PUSH
26280: LD_EXP 52
26284: PUSH
26285: LD_EXP 53
26289: PUSH
26290: LD_EXP 54
26294: PUSH
26295: LD_EXP 62
26299: PUSH
26300: LD_EXP 63
26304: PUSH
26305: LD_EXP 64
26309: PUSH
26310: LD_EXP 65
26314: PUSH
26315: LD_EXP 67
26319: PUSH
26320: LD_EXP 68
26324: PUSH
26325: LD_EXP 69
26329: PUSH
26330: LD_EXP 72
26334: PUSH
26335: LD_EXP 74
26339: PUSH
26340: LD_EXP 75
26344: PUSH
26345: LD_EXP 76
26349: PUSH
26350: LD_EXP 78
26354: PUSH
26355: LD_EXP 79
26359: PUSH
26360: LD_EXP 82
26364: PUSH
26365: LD_EXP 83
26369: PUSH
26370: LD_EXP 84
26374: PUSH
26375: LD_EXP 85
26379: PUSH
26380: LD_EXP 86
26384: PUSH
26385: LD_EXP 87
26389: PUSH
26390: LD_EXP 88
26394: PUSH
26395: LD_EXP 89
26399: PUSH
26400: LD_EXP 90
26404: PUSH
26405: LD_EXP 55
26409: PUSH
26410: LD_EXP 56
26414: PUSH
26415: LD_EXP 59
26419: PUSH
26420: LD_EXP 60
26424: PUSH
26425: LD_EXP 61
26429: PUSH
26430: LD_EXP 57
26434: PUSH
26435: LD_EXP 58
26439: PUSH
26440: LD_EXP 66
26444: PUSH
26445: LD_EXP 70
26449: PUSH
26450: LD_EXP 71
26454: PUSH
26455: LD_EXP 73
26459: PUSH
26460: LD_EXP 77
26464: PUSH
26465: LD_EXP 80
26469: PUSH
26470: LD_EXP 81
26474: PUSH
26475: LD_EXP 91
26479: PUSH
26480: LD_EXP 92
26484: PUSH
26485: LD_EXP 93
26489: PUSH
26490: LD_EXP 94
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: ST_TO_ADDR
// tmp :=  ;
26551: LD_ADDR_VAR 0 3
26555: PUSH
26556: LD_STRING 
26558: ST_TO_ADDR
// for i = 1 to normalCounter do
26559: LD_ADDR_VAR 0 8
26563: PUSH
26564: DOUBLE
26565: LD_INT 1
26567: DEC
26568: ST_TO_ADDR
26569: LD_EXP 39
26573: PUSH
26574: FOR_TO
26575: IFFALSE 26611
// begin if flags [ i ] then
26577: LD_VAR 0 4
26581: PUSH
26582: LD_VAR 0 8
26586: ARRAY
26587: IFFALSE 26609
// tmp := tmp & i & ; ;
26589: LD_ADDR_VAR 0 3
26593: PUSH
26594: LD_VAR 0 3
26598: PUSH
26599: LD_VAR 0 8
26603: STR
26604: PUSH
26605: LD_STRING ;
26607: STR
26608: ST_TO_ADDR
// end ;
26609: GO 26574
26611: POP
26612: POP
// for i = 1 to hardcoreCounter do
26613: LD_ADDR_VAR 0 8
26617: PUSH
26618: DOUBLE
26619: LD_INT 1
26621: DEC
26622: ST_TO_ADDR
26623: LD_EXP 40
26627: PUSH
26628: FOR_TO
26629: IFFALSE 26675
// begin if flags [ normalCounter + i ] then
26631: LD_VAR 0 4
26635: PUSH
26636: LD_EXP 39
26640: PUSH
26641: LD_VAR 0 8
26645: PLUS
26646: ARRAY
26647: IFFALSE 26673
// tmp := tmp & ( 100 + i ) & ; ;
26649: LD_ADDR_VAR 0 3
26653: PUSH
26654: LD_VAR 0 3
26658: PUSH
26659: LD_INT 100
26661: PUSH
26662: LD_VAR 0 8
26666: PLUS
26667: STR
26668: PUSH
26669: LD_STRING ;
26671: STR
26672: ST_TO_ADDR
// end ;
26673: GO 26628
26675: POP
26676: POP
// if tmp then
26677: LD_VAR 0 3
26681: IFFALSE 26693
// active := tmp ;
26683: LD_ADDR_VAR 0 7
26687: PUSH
26688: LD_VAR 0 3
26692: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26693: LD_STRING getStreamItemsFromMission("
26695: PUSH
26696: LD_VAR 0 5
26700: STR
26701: PUSH
26702: LD_STRING ","
26704: STR
26705: PUSH
26706: LD_VAR 0 6
26710: STR
26711: PUSH
26712: LD_STRING ","
26714: STR
26715: PUSH
26716: LD_VAR 0 7
26720: STR
26721: PUSH
26722: LD_STRING ")
26724: STR
26725: PPUSH
26726: CALL_OW 559
// end else
26730: GO 26739
// ToLua ( getStreamItemsFromMission("","","") ) ;
26732: LD_STRING getStreamItemsFromMission("","","")
26734: PPUSH
26735: CALL_OW 559
// end ;
26739: LD_VAR 0 2
26743: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26744: LD_EXP 38
26748: IFFALSE 26756
26750: PUSH
26751: LD_EXP 43
26755: AND
26756: IFFALSE 26880
26758: GO 26760
26760: DISABLE
26761: LD_INT 0
26763: PPUSH
26764: PPUSH
// begin enable ;
26765: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26766: LD_ADDR_VAR 0 2
26770: PUSH
26771: LD_INT 22
26773: PUSH
26774: LD_OWVAR 2
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 34
26788: PUSH
26789: LD_INT 7
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 34
26798: PUSH
26799: LD_INT 45
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 34
26808: PUSH
26809: LD_INT 28
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 34
26818: PUSH
26819: LD_INT 47
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PPUSH
26837: CALL_OW 69
26841: ST_TO_ADDR
// if not tmp then
26842: LD_VAR 0 2
26846: NOT
26847: IFFALSE 26851
// exit ;
26849: GO 26880
// for i in tmp do
26851: LD_ADDR_VAR 0 1
26855: PUSH
26856: LD_VAR 0 2
26860: PUSH
26861: FOR_IN
26862: IFFALSE 26878
// begin SetLives ( i , 0 ) ;
26864: LD_VAR 0 1
26868: PPUSH
26869: LD_INT 0
26871: PPUSH
26872: CALL_OW 234
// end ;
26876: GO 26861
26878: POP
26879: POP
// end ;
26880: PPOPN 2
26882: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26883: LD_EXP 38
26887: IFFALSE 26895
26889: PUSH
26890: LD_EXP 44
26894: AND
26895: IFFALSE 26979
26897: GO 26899
26899: DISABLE
26900: LD_INT 0
26902: PPUSH
26903: PPUSH
// begin enable ;
26904: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26905: LD_ADDR_VAR 0 2
26909: PUSH
26910: LD_INT 22
26912: PUSH
26913: LD_OWVAR 2
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 32
26924: PUSH
26925: LD_INT 3
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PPUSH
26936: CALL_OW 69
26940: ST_TO_ADDR
// if not tmp then
26941: LD_VAR 0 2
26945: NOT
26946: IFFALSE 26950
// exit ;
26948: GO 26979
// for i in tmp do
26950: LD_ADDR_VAR 0 1
26954: PUSH
26955: LD_VAR 0 2
26959: PUSH
26960: FOR_IN
26961: IFFALSE 26977
// begin SetLives ( i , 0 ) ;
26963: LD_VAR 0 1
26967: PPUSH
26968: LD_INT 0
26970: PPUSH
26971: CALL_OW 234
// end ;
26975: GO 26960
26977: POP
26978: POP
// end ;
26979: PPOPN 2
26981: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26982: LD_EXP 38
26986: IFFALSE 26994
26988: PUSH
26989: LD_EXP 41
26993: AND
26994: IFFALSE 27087
26996: GO 26998
26998: DISABLE
26999: LD_INT 0
27001: PPUSH
// begin enable ;
27002: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27003: LD_ADDR_VAR 0 1
27007: PUSH
27008: LD_INT 22
27010: PUSH
27011: LD_OWVAR 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: LD_INT 25
27025: PUSH
27026: LD_INT 5
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 25
27035: PUSH
27036: LD_INT 9
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 25
27045: PUSH
27046: LD_INT 8
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PPUSH
27063: CALL_OW 69
27067: PUSH
27068: FOR_IN
27069: IFFALSE 27085
// begin SetClass ( i , 1 ) ;
27071: LD_VAR 0 1
27075: PPUSH
27076: LD_INT 1
27078: PPUSH
27079: CALL_OW 336
// end ;
27083: GO 27068
27085: POP
27086: POP
// end ;
27087: PPOPN 1
27089: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27090: LD_EXP 38
27094: IFFALSE 27102
27096: PUSH
27097: LD_EXP 42
27101: AND
27102: IFFALSE 27114
27104: PUSH
27105: LD_OWVAR 65
27109: PUSH
27110: LD_INT 7
27112: LESS
27113: AND
27114: IFFALSE 27128
27116: GO 27118
27118: DISABLE
// begin enable ;
27119: ENABLE
// game_speed := 7 ;
27120: LD_ADDR_OWVAR 65
27124: PUSH
27125: LD_INT 7
27127: ST_TO_ADDR
// end ;
27128: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27129: LD_EXP 38
27133: IFFALSE 27141
27135: PUSH
27136: LD_EXP 45
27140: AND
27141: IFFALSE 27343
27143: GO 27145
27145: DISABLE
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
27150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27151: LD_ADDR_VAR 0 3
27155: PUSH
27156: LD_INT 81
27158: PUSH
27159: LD_OWVAR 2
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 21
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PPUSH
27182: CALL_OW 69
27186: ST_TO_ADDR
// if not tmp then
27187: LD_VAR 0 3
27191: NOT
27192: IFFALSE 27196
// exit ;
27194: GO 27343
// if tmp > 5 then
27196: LD_VAR 0 3
27200: PUSH
27201: LD_INT 5
27203: GREATER
27204: IFFALSE 27216
// k := 5 else
27206: LD_ADDR_VAR 0 2
27210: PUSH
27211: LD_INT 5
27213: ST_TO_ADDR
27214: GO 27226
// k := tmp ;
27216: LD_ADDR_VAR 0 2
27220: PUSH
27221: LD_VAR 0 3
27225: ST_TO_ADDR
// for i := 1 to k do
27226: LD_ADDR_VAR 0 1
27230: PUSH
27231: DOUBLE
27232: LD_INT 1
27234: DEC
27235: ST_TO_ADDR
27236: LD_VAR 0 2
27240: PUSH
27241: FOR_TO
27242: IFFALSE 27341
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27244: LD_VAR 0 3
27248: PUSH
27249: LD_VAR 0 1
27253: ARRAY
27254: PPUSH
27255: LD_VAR 0 1
27259: PUSH
27260: LD_INT 4
27262: MOD
27263: PUSH
27264: LD_INT 1
27266: PLUS
27267: PPUSH
27268: CALL_OW 259
27272: PUSH
27273: LD_INT 10
27275: LESS
27276: IFFALSE 27339
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27278: LD_VAR 0 3
27282: PUSH
27283: LD_VAR 0 1
27287: ARRAY
27288: PPUSH
27289: LD_VAR 0 1
27293: PUSH
27294: LD_INT 4
27296: MOD
27297: PUSH
27298: LD_INT 1
27300: PLUS
27301: PPUSH
27302: LD_VAR 0 3
27306: PUSH
27307: LD_VAR 0 1
27311: ARRAY
27312: PPUSH
27313: LD_VAR 0 1
27317: PUSH
27318: LD_INT 4
27320: MOD
27321: PUSH
27322: LD_INT 1
27324: PLUS
27325: PPUSH
27326: CALL_OW 259
27330: PUSH
27331: LD_INT 1
27333: PLUS
27334: PPUSH
27335: CALL_OW 237
27339: GO 27241
27341: POP
27342: POP
// end ;
27343: PPOPN 3
27345: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27346: LD_EXP 38
27350: IFFALSE 27358
27352: PUSH
27353: LD_EXP 46
27357: AND
27358: IFFALSE 27378
27360: GO 27362
27362: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27363: LD_INT 4
27365: PPUSH
27366: LD_OWVAR 2
27370: PPUSH
27371: LD_INT 0
27373: PPUSH
27374: CALL_OW 324
27378: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27379: LD_EXP 38
27383: IFFALSE 27391
27385: PUSH
27386: LD_EXP 75
27390: AND
27391: IFFALSE 27411
27393: GO 27395
27395: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27396: LD_INT 19
27398: PPUSH
27399: LD_OWVAR 2
27403: PPUSH
27404: LD_INT 0
27406: PPUSH
27407: CALL_OW 324
27411: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27412: LD_EXP 38
27416: IFFALSE 27424
27418: PUSH
27419: LD_EXP 47
27423: AND
27424: IFFALSE 27526
27426: GO 27428
27428: DISABLE
27429: LD_INT 0
27431: PPUSH
27432: PPUSH
// begin enable ;
27433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_INT 22
27441: PUSH
27442: LD_OWVAR 2
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 2
27453: PUSH
27454: LD_INT 34
27456: PUSH
27457: LD_INT 11
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 34
27466: PUSH
27467: LD_INT 30
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PPUSH
27483: CALL_OW 69
27487: ST_TO_ADDR
// if not tmp then
27488: LD_VAR 0 2
27492: NOT
27493: IFFALSE 27497
// exit ;
27495: GO 27526
// for i in tmp do
27497: LD_ADDR_VAR 0 1
27501: PUSH
27502: LD_VAR 0 2
27506: PUSH
27507: FOR_IN
27508: IFFALSE 27524
// begin SetLives ( i , 0 ) ;
27510: LD_VAR 0 1
27514: PPUSH
27515: LD_INT 0
27517: PPUSH
27518: CALL_OW 234
// end ;
27522: GO 27507
27524: POP
27525: POP
// end ;
27526: PPOPN 2
27528: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27529: LD_EXP 38
27533: IFFALSE 27541
27535: PUSH
27536: LD_EXP 48
27540: AND
27541: IFFALSE 27561
27543: GO 27545
27545: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27546: LD_INT 32
27548: PPUSH
27549: LD_OWVAR 2
27553: PPUSH
27554: LD_INT 0
27556: PPUSH
27557: CALL_OW 324
27561: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27562: LD_EXP 38
27566: IFFALSE 27574
27568: PUSH
27569: LD_EXP 49
27573: AND
27574: IFFALSE 27757
27576: GO 27578
27578: DISABLE
27579: LD_INT 0
27581: PPUSH
27582: PPUSH
27583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27584: LD_ADDR_VAR 0 2
27588: PUSH
27589: LD_INT 22
27591: PUSH
27592: LD_OWVAR 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 33
27603: PUSH
27604: LD_INT 3
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PPUSH
27615: CALL_OW 69
27619: ST_TO_ADDR
// if not tmp then
27620: LD_VAR 0 2
27624: NOT
27625: IFFALSE 27629
// exit ;
27627: GO 27757
// side := 0 ;
27629: LD_ADDR_VAR 0 3
27633: PUSH
27634: LD_INT 0
27636: ST_TO_ADDR
// for i := 1 to 8 do
27637: LD_ADDR_VAR 0 1
27641: PUSH
27642: DOUBLE
27643: LD_INT 1
27645: DEC
27646: ST_TO_ADDR
27647: LD_INT 8
27649: PUSH
27650: FOR_TO
27651: IFFALSE 27701
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27653: LD_OWVAR 2
27657: PUSH
27658: LD_VAR 0 1
27662: NONEQUAL
27663: IFFALSE 27685
27665: PUSH
27666: LD_OWVAR 2
27670: PPUSH
27671: LD_VAR 0 1
27675: PPUSH
27676: CALL_OW 81
27680: PUSH
27681: LD_INT 2
27683: EQUAL
27684: AND
27685: IFFALSE 27699
// begin side := i ;
27687: LD_ADDR_VAR 0 3
27691: PUSH
27692: LD_VAR 0 1
27696: ST_TO_ADDR
// break ;
27697: GO 27701
// end ;
27699: GO 27650
27701: POP
27702: POP
// if not side then
27703: LD_VAR 0 3
27707: NOT
27708: IFFALSE 27712
// exit ;
27710: GO 27757
// for i := 1 to tmp do
27712: LD_ADDR_VAR 0 1
27716: PUSH
27717: DOUBLE
27718: LD_INT 1
27720: DEC
27721: ST_TO_ADDR
27722: LD_VAR 0 2
27726: PUSH
27727: FOR_TO
27728: IFFALSE 27755
// if Prob ( 60 ) then
27730: LD_INT 60
27732: PPUSH
27733: CALL_OW 13
27737: IFFALSE 27753
// SetSide ( i , side ) ;
27739: LD_VAR 0 1
27743: PPUSH
27744: LD_VAR 0 3
27748: PPUSH
27749: CALL_OW 235
27753: GO 27727
27755: POP
27756: POP
// end ;
27757: PPOPN 3
27759: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27760: LD_EXP 38
27764: IFFALSE 27772
27766: PUSH
27767: LD_EXP 51
27771: AND
27772: IFFALSE 27891
27774: GO 27776
27776: DISABLE
27777: LD_INT 0
27779: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27780: LD_ADDR_VAR 0 1
27784: PUSH
27785: LD_INT 22
27787: PUSH
27788: LD_OWVAR 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 21
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 3
27809: PUSH
27810: LD_INT 23
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: PPUSH
27829: CALL_OW 69
27833: PUSH
27834: FOR_IN
27835: IFFALSE 27889
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 257
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: LD_INT 3
27855: PUSH
27856: LD_INT 4
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: IN
27865: IFFALSE 27887
// SetClass ( un , rand ( 1 , 4 ) ) ;
27867: LD_VAR 0 1
27871: PPUSH
27872: LD_INT 1
27874: PPUSH
27875: LD_INT 4
27877: PPUSH
27878: CALL_OW 12
27882: PPUSH
27883: CALL_OW 336
27887: GO 27834
27889: POP
27890: POP
// end ;
27891: PPOPN 1
27893: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27894: LD_EXP 38
27898: IFFALSE 27906
27900: PUSH
27901: LD_EXP 50
27905: AND
27906: IFFALSE 27985
27908: GO 27910
27910: DISABLE
27911: LD_INT 0
27913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27914: LD_ADDR_VAR 0 1
27918: PUSH
27919: LD_INT 22
27921: PUSH
27922: LD_OWVAR 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 21
27933: PUSH
27934: LD_INT 3
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PPUSH
27945: CALL_OW 69
27949: ST_TO_ADDR
// if not tmp then
27950: LD_VAR 0 1
27954: NOT
27955: IFFALSE 27959
// exit ;
27957: GO 27985
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27959: LD_VAR 0 1
27963: PUSH
27964: LD_INT 1
27966: PPUSH
27967: LD_VAR 0 1
27971: PPUSH
27972: CALL_OW 12
27976: ARRAY
27977: PPUSH
27978: LD_INT 100
27980: PPUSH
27981: CALL_OW 234
// end ;
27985: PPOPN 1
27987: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27988: LD_EXP 38
27992: IFFALSE 28000
27994: PUSH
27995: LD_EXP 52
27999: AND
28000: IFFALSE 28098
28002: GO 28004
28004: DISABLE
28005: LD_INT 0
28007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28008: LD_ADDR_VAR 0 1
28012: PUSH
28013: LD_INT 22
28015: PUSH
28016: LD_OWVAR 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 21
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PPUSH
28039: CALL_OW 69
28043: ST_TO_ADDR
// if not tmp then
28044: LD_VAR 0 1
28048: NOT
28049: IFFALSE 28053
// exit ;
28051: GO 28098
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28053: LD_VAR 0 1
28057: PUSH
28058: LD_INT 1
28060: PPUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 12
28070: ARRAY
28071: PPUSH
28072: LD_INT 1
28074: PPUSH
28075: LD_INT 4
28077: PPUSH
28078: CALL_OW 12
28082: PPUSH
28083: LD_INT 3000
28085: PPUSH
28086: LD_INT 9000
28088: PPUSH
28089: CALL_OW 12
28093: PPUSH
28094: CALL_OW 492
// end ;
28098: PPOPN 1
28100: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28101: LD_EXP 38
28105: IFFALSE 28113
28107: PUSH
28108: LD_EXP 53
28112: AND
28113: IFFALSE 28133
28115: GO 28117
28117: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28118: LD_INT 1
28120: PPUSH
28121: LD_OWVAR 2
28125: PPUSH
28126: LD_INT 0
28128: PPUSH
28129: CALL_OW 324
28133: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28134: LD_EXP 38
28138: IFFALSE 28146
28140: PUSH
28141: LD_EXP 54
28145: AND
28146: IFFALSE 28229
28148: GO 28150
28150: DISABLE
28151: LD_INT 0
28153: PPUSH
28154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28155: LD_ADDR_VAR 0 2
28159: PUSH
28160: LD_INT 22
28162: PUSH
28163: LD_OWVAR 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 21
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PPUSH
28186: CALL_OW 69
28190: ST_TO_ADDR
// if not tmp then
28191: LD_VAR 0 2
28195: NOT
28196: IFFALSE 28200
// exit ;
28198: GO 28229
// for i in tmp do
28200: LD_ADDR_VAR 0 1
28204: PUSH
28205: LD_VAR 0 2
28209: PUSH
28210: FOR_IN
28211: IFFALSE 28227
// SetBLevel ( i , 10 ) ;
28213: LD_VAR 0 1
28217: PPUSH
28218: LD_INT 10
28220: PPUSH
28221: CALL_OW 241
28225: GO 28210
28227: POP
28228: POP
// end ;
28229: PPOPN 2
28231: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28232: LD_EXP 38
28236: IFFALSE 28244
28238: PUSH
28239: LD_EXP 55
28243: AND
28244: IFFALSE 28355
28246: GO 28248
28248: DISABLE
28249: LD_INT 0
28251: PPUSH
28252: PPUSH
28253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_INT 22
28261: PUSH
28262: LD_OWVAR 2
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 25
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PPUSH
28285: CALL_OW 69
28289: ST_TO_ADDR
// if not tmp then
28290: LD_VAR 0 3
28294: NOT
28295: IFFALSE 28299
// exit ;
28297: GO 28355
// un := tmp [ rand ( 1 , tmp ) ] ;
28299: LD_ADDR_VAR 0 2
28303: PUSH
28304: LD_VAR 0 3
28308: PUSH
28309: LD_INT 1
28311: PPUSH
28312: LD_VAR 0 3
28316: PPUSH
28317: CALL_OW 12
28321: ARRAY
28322: ST_TO_ADDR
// if Crawls ( un ) then
28323: LD_VAR 0 2
28327: PPUSH
28328: CALL_OW 318
28332: IFFALSE 28343
// ComWalk ( un ) ;
28334: LD_VAR 0 2
28338: PPUSH
28339: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28343: LD_VAR 0 2
28347: PPUSH
28348: LD_INT 5
28350: PPUSH
28351: CALL_OW 336
// end ;
28355: PPOPN 3
28357: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28358: LD_EXP 38
28362: IFFALSE 28370
28364: PUSH
28365: LD_EXP 56
28369: AND
28370: IFFALSE 28382
28372: PUSH
28373: LD_OWVAR 67
28377: PUSH
28378: LD_INT 4
28380: LESS
28381: AND
28382: IFFALSE 28401
28384: GO 28386
28386: DISABLE
// begin Difficulty := Difficulty + 1 ;
28387: LD_ADDR_OWVAR 67
28391: PUSH
28392: LD_OWVAR 67
28396: PUSH
28397: LD_INT 1
28399: PLUS
28400: ST_TO_ADDR
// end ;
28401: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28402: LD_EXP 38
28406: IFFALSE 28414
28408: PUSH
28409: LD_EXP 57
28413: AND
28414: IFFALSE 28517
28416: GO 28418
28418: DISABLE
28419: LD_INT 0
28421: PPUSH
// begin for i := 1 to 5 do
28422: LD_ADDR_VAR 0 1
28426: PUSH
28427: DOUBLE
28428: LD_INT 1
28430: DEC
28431: ST_TO_ADDR
28432: LD_INT 5
28434: PUSH
28435: FOR_TO
28436: IFFALSE 28515
// begin uc_nation := nation_nature ;
28438: LD_ADDR_OWVAR 21
28442: PUSH
28443: LD_INT 0
28445: ST_TO_ADDR
// uc_side := 0 ;
28446: LD_ADDR_OWVAR 20
28450: PUSH
28451: LD_INT 0
28453: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28454: LD_ADDR_OWVAR 29
28458: PUSH
28459: LD_INT 12
28461: PUSH
28462: LD_INT 12
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: ST_TO_ADDR
// hc_agressivity := 20 ;
28469: LD_ADDR_OWVAR 35
28473: PUSH
28474: LD_INT 20
28476: ST_TO_ADDR
// hc_class := class_tiger ;
28477: LD_ADDR_OWVAR 28
28481: PUSH
28482: LD_INT 14
28484: ST_TO_ADDR
// hc_gallery :=  ;
28485: LD_ADDR_OWVAR 33
28489: PUSH
28490: LD_STRING 
28492: ST_TO_ADDR
// hc_name :=  ;
28493: LD_ADDR_OWVAR 26
28497: PUSH
28498: LD_STRING 
28500: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28501: CALL_OW 44
28505: PPUSH
28506: LD_INT 0
28508: PPUSH
28509: CALL_OW 51
// end ;
28513: GO 28435
28515: POP
28516: POP
// end ;
28517: PPOPN 1
28519: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28520: LD_EXP 38
28524: IFFALSE 28532
28526: PUSH
28527: LD_EXP 58
28531: AND
28532: IFFALSE 28541
28534: GO 28536
28536: DISABLE
// StreamSibBomb ;
28537: CALL 28542 0 0
28541: END
// export function StreamSibBomb ; var i , x , y ; begin
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
// result := false ;
28548: LD_ADDR_VAR 0 1
28552: PUSH
28553: LD_INT 0
28555: ST_TO_ADDR
// for i := 1 to 16 do
28556: LD_ADDR_VAR 0 2
28560: PUSH
28561: DOUBLE
28562: LD_INT 1
28564: DEC
28565: ST_TO_ADDR
28566: LD_INT 16
28568: PUSH
28569: FOR_TO
28570: IFFALSE 28769
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28572: LD_ADDR_VAR 0 3
28576: PUSH
28577: LD_INT 10
28579: PUSH
28580: LD_INT 20
28582: PUSH
28583: LD_INT 30
28585: PUSH
28586: LD_INT 40
28588: PUSH
28589: LD_INT 50
28591: PUSH
28592: LD_INT 60
28594: PUSH
28595: LD_INT 70
28597: PUSH
28598: LD_INT 80
28600: PUSH
28601: LD_INT 90
28603: PUSH
28604: LD_INT 100
28606: PUSH
28607: LD_INT 110
28609: PUSH
28610: LD_INT 120
28612: PUSH
28613: LD_INT 130
28615: PUSH
28616: LD_INT 140
28618: PUSH
28619: LD_INT 150
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PPUSH
28642: LD_INT 15
28644: PPUSH
28645: CALL_OW 12
28649: ARRAY
28650: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: LD_INT 10
28658: PUSH
28659: LD_INT 20
28661: PUSH
28662: LD_INT 30
28664: PUSH
28665: LD_INT 40
28667: PUSH
28668: LD_INT 50
28670: PUSH
28671: LD_INT 60
28673: PUSH
28674: LD_INT 70
28676: PUSH
28677: LD_INT 80
28679: PUSH
28680: LD_INT 90
28682: PUSH
28683: LD_INT 100
28685: PUSH
28686: LD_INT 110
28688: PUSH
28689: LD_INT 120
28691: PUSH
28692: LD_INT 130
28694: PUSH
28695: LD_INT 140
28697: PUSH
28698: LD_INT 150
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PPUSH
28721: LD_INT 15
28723: PPUSH
28724: CALL_OW 12
28728: ARRAY
28729: ST_TO_ADDR
// if ValidHex ( x , y ) then
28730: LD_VAR 0 3
28734: PPUSH
28735: LD_VAR 0 4
28739: PPUSH
28740: CALL_OW 488
28744: IFFALSE 28767
// begin result := [ x , y ] ;
28746: LD_ADDR_VAR 0 1
28750: PUSH
28751: LD_VAR 0 3
28755: PUSH
28756: LD_VAR 0 4
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: ST_TO_ADDR
// break ;
28765: GO 28769
// end ; end ;
28767: GO 28569
28769: POP
28770: POP
// if result then
28771: LD_VAR 0 1
28775: IFFALSE 28835
// begin ToLua ( playSibBomb() ) ;
28777: LD_STRING playSibBomb()
28779: PPUSH
28780: CALL_OW 559
// wait ( 0 0$14 ) ;
28784: LD_INT 490
28786: PPUSH
28787: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28791: LD_VAR 0 1
28795: PUSH
28796: LD_INT 1
28798: ARRAY
28799: PPUSH
28800: LD_VAR 0 1
28804: PUSH
28805: LD_INT 2
28807: ARRAY
28808: PPUSH
28809: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28813: LD_VAR 0 1
28817: PUSH
28818: LD_INT 1
28820: ARRAY
28821: PPUSH
28822: LD_VAR 0 1
28826: PUSH
28827: LD_INT 2
28829: ARRAY
28830: PPUSH
28831: CALL_OW 429
// end ; end ;
28835: LD_VAR 0 1
28839: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28840: LD_EXP 38
28844: IFFALSE 28852
28846: PUSH
28847: LD_EXP 60
28851: AND
28852: IFFALSE 28864
28854: GO 28856
28856: DISABLE
// YouLost (  ) ;
28857: LD_STRING 
28859: PPUSH
28860: CALL_OW 104
28864: END
// every 0 0$1 trigger StreamModeActive and sFog do
28865: LD_EXP 38
28869: IFFALSE 28877
28871: PUSH
28872: LD_EXP 59
28876: AND
28877: IFFALSE 28891
28879: GO 28881
28881: DISABLE
// FogOff ( your_side ) ;
28882: LD_OWVAR 2
28886: PPUSH
28887: CALL_OW 344
28891: END
// every 0 0$1 trigger StreamModeActive and sSun do
28892: LD_EXP 38
28896: IFFALSE 28904
28898: PUSH
28899: LD_EXP 61
28903: AND
28904: IFFALSE 28932
28906: GO 28908
28908: DISABLE
// begin solar_recharge_percent := 0 ;
28909: LD_ADDR_OWVAR 79
28913: PUSH
28914: LD_INT 0
28916: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28917: LD_INT 10500
28919: PPUSH
28920: CALL_OW 67
// solar_recharge_percent := 100 ;
28924: LD_ADDR_OWVAR 79
28928: PUSH
28929: LD_INT 100
28931: ST_TO_ADDR
// end ;
28932: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28933: LD_EXP 38
28937: IFFALSE 28945
28939: PUSH
28940: LD_EXP 62
28944: AND
28945: IFFALSE 29184
28947: GO 28949
28949: DISABLE
28950: LD_INT 0
28952: PPUSH
28953: PPUSH
28954: PPUSH
// begin tmp := [ ] ;
28955: LD_ADDR_VAR 0 3
28959: PUSH
28960: EMPTY
28961: ST_TO_ADDR
// for i := 1 to 6 do
28962: LD_ADDR_VAR 0 1
28966: PUSH
28967: DOUBLE
28968: LD_INT 1
28970: DEC
28971: ST_TO_ADDR
28972: LD_INT 6
28974: PUSH
28975: FOR_TO
28976: IFFALSE 29081
// begin uc_nation := nation_nature ;
28978: LD_ADDR_OWVAR 21
28982: PUSH
28983: LD_INT 0
28985: ST_TO_ADDR
// uc_side := 0 ;
28986: LD_ADDR_OWVAR 20
28990: PUSH
28991: LD_INT 0
28993: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28994: LD_ADDR_OWVAR 29
28998: PUSH
28999: LD_INT 12
29001: PUSH
29002: LD_INT 12
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: ST_TO_ADDR
// hc_agressivity := 20 ;
29009: LD_ADDR_OWVAR 35
29013: PUSH
29014: LD_INT 20
29016: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29017: LD_ADDR_OWVAR 28
29021: PUSH
29022: LD_INT 17
29024: ST_TO_ADDR
// hc_gallery :=  ;
29025: LD_ADDR_OWVAR 33
29029: PUSH
29030: LD_STRING 
29032: ST_TO_ADDR
// hc_name :=  ;
29033: LD_ADDR_OWVAR 26
29037: PUSH
29038: LD_STRING 
29040: ST_TO_ADDR
// un := CreateHuman ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: CALL_OW 44
29050: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29051: LD_VAR 0 2
29055: PPUSH
29056: LD_INT 1
29058: PPUSH
29059: CALL_OW 51
// tmp := tmp ^ un ;
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_VAR 0 3
29072: PUSH
29073: LD_VAR 0 2
29077: ADD
29078: ST_TO_ADDR
// end ;
29079: GO 28975
29081: POP
29082: POP
// repeat wait ( 0 0$1 ) ;
29083: LD_INT 35
29085: PPUSH
29086: CALL_OW 67
// for un in tmp do
29090: LD_ADDR_VAR 0 2
29094: PUSH
29095: LD_VAR 0 3
29099: PUSH
29100: FOR_IN
29101: IFFALSE 29175
// begin if IsDead ( un ) then
29103: LD_VAR 0 2
29107: PPUSH
29108: CALL_OW 301
29112: IFFALSE 29132
// begin tmp := tmp diff un ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_VAR 0 3
29123: PUSH
29124: LD_VAR 0 2
29128: DIFF
29129: ST_TO_ADDR
// continue ;
29130: GO 29100
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29132: LD_VAR 0 2
29136: PPUSH
29137: LD_INT 3
29139: PUSH
29140: LD_INT 22
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PPUSH
29154: CALL_OW 69
29158: PPUSH
29159: LD_VAR 0 2
29163: PPUSH
29164: CALL_OW 74
29168: PPUSH
29169: CALL_OW 115
// end ;
29173: GO 29100
29175: POP
29176: POP
// until not tmp ;
29177: LD_VAR 0 3
29181: NOT
29182: IFFALSE 29083
// end ;
29184: PPOPN 3
29186: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29187: LD_EXP 38
29191: IFFALSE 29199
29193: PUSH
29194: LD_EXP 63
29198: AND
29199: IFFALSE 29253
29201: GO 29203
29203: DISABLE
// begin ToLua ( displayTroll(); ) ;
29204: LD_STRING displayTroll();
29206: PPUSH
29207: CALL_OW 559
// wait ( 3 3$00 ) ;
29211: LD_INT 6300
29213: PPUSH
29214: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29218: LD_STRING hideTroll();
29220: PPUSH
29221: CALL_OW 559
// wait ( 1 1$00 ) ;
29225: LD_INT 2100
29227: PPUSH
29228: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29232: LD_STRING displayTroll();
29234: PPUSH
29235: CALL_OW 559
// wait ( 1 1$00 ) ;
29239: LD_INT 2100
29241: PPUSH
29242: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29246: LD_STRING hideTroll();
29248: PPUSH
29249: CALL_OW 559
// end ;
29253: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29254: LD_EXP 38
29258: IFFALSE 29266
29260: PUSH
29261: LD_EXP 64
29265: AND
29266: IFFALSE 29329
29268: GO 29270
29270: DISABLE
29271: LD_INT 0
29273: PPUSH
// begin p := 0 ;
29274: LD_ADDR_VAR 0 1
29278: PUSH
29279: LD_INT 0
29281: ST_TO_ADDR
// repeat game_speed := 1 ;
29282: LD_ADDR_OWVAR 65
29286: PUSH
29287: LD_INT 1
29289: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29290: LD_INT 35
29292: PPUSH
29293: CALL_OW 67
// p := p + 1 ;
29297: LD_ADDR_VAR 0 1
29301: PUSH
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 1
29309: PLUS
29310: ST_TO_ADDR
// until p >= 60 ;
29311: LD_VAR 0 1
29315: PUSH
29316: LD_INT 60
29318: GREATEREQUAL
29319: IFFALSE 29282
// game_speed := 4 ;
29321: LD_ADDR_OWVAR 65
29325: PUSH
29326: LD_INT 4
29328: ST_TO_ADDR
// end ;
29329: PPOPN 1
29331: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29332: LD_EXP 38
29336: IFFALSE 29344
29338: PUSH
29339: LD_EXP 65
29343: AND
29344: IFFALSE 29490
29346: GO 29348
29348: DISABLE
29349: LD_INT 0
29351: PPUSH
29352: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29353: LD_ADDR_VAR 0 1
29357: PUSH
29358: LD_INT 22
29360: PUSH
29361: LD_OWVAR 2
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: LD_INT 30
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 30
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PPUSH
29402: CALL_OW 69
29406: ST_TO_ADDR
// if not depot then
29407: LD_VAR 0 1
29411: NOT
29412: IFFALSE 29416
// exit ;
29414: GO 29490
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29416: LD_ADDR_VAR 0 2
29420: PUSH
29421: LD_VAR 0 1
29425: PUSH
29426: LD_INT 1
29428: PPUSH
29429: LD_VAR 0 1
29433: PPUSH
29434: CALL_OW 12
29438: ARRAY
29439: PPUSH
29440: CALL_OW 274
29444: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29445: LD_VAR 0 2
29449: PPUSH
29450: LD_INT 1
29452: PPUSH
29453: LD_INT 0
29455: PPUSH
29456: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29460: LD_VAR 0 2
29464: PPUSH
29465: LD_INT 2
29467: PPUSH
29468: LD_INT 0
29470: PPUSH
29471: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29475: LD_VAR 0 2
29479: PPUSH
29480: LD_INT 3
29482: PPUSH
29483: LD_INT 0
29485: PPUSH
29486: CALL_OW 277
// end ;
29490: PPOPN 2
29492: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29493: LD_EXP 38
29497: IFFALSE 29505
29499: PUSH
29500: LD_EXP 66
29504: AND
29505: IFFALSE 29602
29507: GO 29509
29509: DISABLE
29510: LD_INT 0
29512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29513: LD_ADDR_VAR 0 1
29517: PUSH
29518: LD_INT 22
29520: PUSH
29521: LD_OWVAR 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 21
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: LD_INT 23
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: PPUSH
29562: CALL_OW 69
29566: ST_TO_ADDR
// if not tmp then
29567: LD_VAR 0 1
29571: NOT
29572: IFFALSE 29576
// exit ;
29574: GO 29602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29576: LD_VAR 0 1
29580: PUSH
29581: LD_INT 1
29583: PPUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 12
29593: ARRAY
29594: PPUSH
29595: LD_INT 200
29597: PPUSH
29598: CALL_OW 234
// end ;
29602: PPOPN 1
29604: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29605: LD_EXP 38
29609: IFFALSE 29617
29611: PUSH
29612: LD_EXP 67
29616: AND
29617: IFFALSE 29696
29619: GO 29621
29621: DISABLE
29622: LD_INT 0
29624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29625: LD_ADDR_VAR 0 1
29629: PUSH
29630: LD_INT 22
29632: PUSH
29633: LD_OWVAR 2
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 21
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PPUSH
29656: CALL_OW 69
29660: ST_TO_ADDR
// if not tmp then
29661: LD_VAR 0 1
29665: NOT
29666: IFFALSE 29670
// exit ;
29668: GO 29696
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29670: LD_VAR 0 1
29674: PUSH
29675: LD_INT 1
29677: PPUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: CALL_OW 12
29687: ARRAY
29688: PPUSH
29689: LD_INT 60
29691: PPUSH
29692: CALL_OW 234
// end ;
29696: PPOPN 1
29698: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29699: LD_EXP 38
29703: IFFALSE 29711
29705: PUSH
29706: LD_EXP 68
29710: AND
29711: IFFALSE 29810
29713: GO 29715
29715: DISABLE
29716: LD_INT 0
29718: PPUSH
29719: PPUSH
// begin enable ;
29720: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29721: LD_ADDR_VAR 0 1
29725: PUSH
29726: LD_INT 22
29728: PUSH
29729: LD_OWVAR 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 61
29740: PUSH
29741: EMPTY
29742: LIST
29743: PUSH
29744: LD_INT 33
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: PPUSH
29759: CALL_OW 69
29763: ST_TO_ADDR
// if not tmp then
29764: LD_VAR 0 1
29768: NOT
29769: IFFALSE 29773
// exit ;
29771: GO 29810
// for i in tmp do
29773: LD_ADDR_VAR 0 2
29777: PUSH
29778: LD_VAR 0 1
29782: PUSH
29783: FOR_IN
29784: IFFALSE 29808
// if IsControledBy ( i ) then
29786: LD_VAR 0 2
29790: PPUSH
29791: CALL_OW 312
29795: IFFALSE 29806
// ComUnlink ( i ) ;
29797: LD_VAR 0 2
29801: PPUSH
29802: CALL_OW 136
29806: GO 29783
29808: POP
29809: POP
// end ;
29810: PPOPN 2
29812: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29813: LD_EXP 38
29817: IFFALSE 29825
29819: PUSH
29820: LD_EXP 69
29824: AND
29825: IFFALSE 29965
29827: GO 29829
29829: DISABLE
29830: LD_INT 0
29832: PPUSH
29833: PPUSH
// begin ToLua ( displayPowell(); ) ;
29834: LD_STRING displayPowell();
29836: PPUSH
29837: CALL_OW 559
// uc_side := 0 ;
29841: LD_ADDR_OWVAR 20
29845: PUSH
29846: LD_INT 0
29848: ST_TO_ADDR
// uc_nation := 2 ;
29849: LD_ADDR_OWVAR 21
29853: PUSH
29854: LD_INT 2
29856: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29857: LD_ADDR_OWVAR 37
29861: PUSH
29862: LD_INT 14
29864: ST_TO_ADDR
// vc_engine := engine_siberite ;
29865: LD_ADDR_OWVAR 39
29869: PUSH
29870: LD_INT 3
29872: ST_TO_ADDR
// vc_control := control_apeman ;
29873: LD_ADDR_OWVAR 38
29877: PUSH
29878: LD_INT 5
29880: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29881: LD_ADDR_OWVAR 40
29885: PUSH
29886: LD_INT 29
29888: ST_TO_ADDR
// un := CreateVehicle ;
29889: LD_ADDR_VAR 0 2
29893: PUSH
29894: CALL_OW 45
29898: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29899: LD_VAR 0 2
29903: PPUSH
29904: LD_INT 1
29906: PPUSH
29907: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29911: LD_INT 35
29913: PPUSH
29914: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29918: LD_VAR 0 2
29922: PPUSH
29923: LD_INT 22
29925: PUSH
29926: LD_OWVAR 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PPUSH
29935: CALL_OW 69
29939: PPUSH
29940: LD_VAR 0 2
29944: PPUSH
29945: CALL_OW 74
29949: PPUSH
29950: CALL_OW 115
// until IsDead ( un ) ;
29954: LD_VAR 0 2
29958: PPUSH
29959: CALL_OW 301
29963: IFFALSE 29911
// end ;
29965: PPOPN 2
29967: END
// every 0 0$1 trigger StreamModeActive and sStu do
29968: LD_EXP 38
29972: IFFALSE 29980
29974: PUSH
29975: LD_EXP 77
29979: AND
29980: IFFALSE 29996
29982: GO 29984
29984: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29985: LD_STRING displayStucuk();
29987: PPUSH
29988: CALL_OW 559
// ResetFog ;
29992: CALL_OW 335
// end ;
29996: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29997: LD_EXP 38
30001: IFFALSE 30009
30003: PUSH
30004: LD_EXP 70
30008: AND
30009: IFFALSE 30150
30011: GO 30013
30013: DISABLE
30014: LD_INT 0
30016: PPUSH
30017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30018: LD_ADDR_VAR 0 2
30022: PUSH
30023: LD_INT 22
30025: PUSH
30026: LD_OWVAR 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 21
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 69
30053: ST_TO_ADDR
// if not tmp then
30054: LD_VAR 0 2
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30150
// un := tmp [ rand ( 1 , tmp ) ] ;
30063: LD_ADDR_VAR 0 1
30067: PUSH
30068: LD_VAR 0 2
30072: PUSH
30073: LD_INT 1
30075: PPUSH
30076: LD_VAR 0 2
30080: PPUSH
30081: CALL_OW 12
30085: ARRAY
30086: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30087: LD_VAR 0 1
30091: PPUSH
30092: LD_INT 0
30094: PPUSH
30095: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30099: LD_VAR 0 1
30103: PPUSH
30104: LD_OWVAR 3
30108: PUSH
30109: LD_VAR 0 1
30113: DIFF
30114: PPUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL_OW 74
30124: PPUSH
30125: CALL_OW 115
// wait ( 0 0$20 ) ;
30129: LD_INT 700
30131: PPUSH
30132: CALL_OW 67
// SetSide ( un , your_side ) ;
30136: LD_VAR 0 1
30140: PPUSH
30141: LD_OWVAR 2
30145: PPUSH
30146: CALL_OW 235
// end ;
30150: PPOPN 2
30152: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30153: LD_EXP 38
30157: IFFALSE 30165
30159: PUSH
30160: LD_EXP 71
30164: AND
30165: IFFALSE 30271
30167: GO 30169
30169: DISABLE
30170: LD_INT 0
30172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30173: LD_ADDR_VAR 0 1
30177: PUSH
30178: LD_INT 22
30180: PUSH
30181: LD_OWVAR 2
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 30
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 30
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PPUSH
30222: CALL_OW 69
30226: ST_TO_ADDR
// if not depot then
30227: LD_VAR 0 1
30231: NOT
30232: IFFALSE 30236
// exit ;
30234: GO 30271
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30236: LD_VAR 0 1
30240: PUSH
30241: LD_INT 1
30243: ARRAY
30244: PPUSH
30245: CALL_OW 250
30249: PPUSH
30250: LD_VAR 0 1
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PPUSH
30259: CALL_OW 251
30263: PPUSH
30264: LD_INT 70
30266: PPUSH
30267: CALL_OW 495
// end ;
30271: PPOPN 1
30273: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30274: LD_EXP 38
30278: IFFALSE 30286
30280: PUSH
30281: LD_EXP 72
30285: AND
30286: IFFALSE 30497
30288: GO 30290
30290: DISABLE
30291: LD_INT 0
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30298: LD_ADDR_VAR 0 5
30302: PUSH
30303: LD_INT 22
30305: PUSH
30306: LD_OWVAR 2
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 21
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PPUSH
30329: CALL_OW 69
30333: ST_TO_ADDR
// if not tmp then
30334: LD_VAR 0 5
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 30497
// for i in tmp do
30343: LD_ADDR_VAR 0 1
30347: PUSH
30348: LD_VAR 0 5
30352: PUSH
30353: FOR_IN
30354: IFFALSE 30495
// begin d := rand ( 0 , 5 ) ;
30356: LD_ADDR_VAR 0 4
30360: PUSH
30361: LD_INT 0
30363: PPUSH
30364: LD_INT 5
30366: PPUSH
30367: CALL_OW 12
30371: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30372: LD_ADDR_VAR 0 2
30376: PUSH
30377: LD_VAR 0 1
30381: PPUSH
30382: CALL_OW 250
30386: PPUSH
30387: LD_VAR 0 4
30391: PPUSH
30392: LD_INT 3
30394: PPUSH
30395: LD_INT 12
30397: PPUSH
30398: CALL_OW 12
30402: PPUSH
30403: CALL_OW 272
30407: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30408: LD_ADDR_VAR 0 3
30412: PUSH
30413: LD_VAR 0 1
30417: PPUSH
30418: CALL_OW 251
30422: PPUSH
30423: LD_VAR 0 4
30427: PPUSH
30428: LD_INT 3
30430: PPUSH
30431: LD_INT 12
30433: PPUSH
30434: CALL_OW 12
30438: PPUSH
30439: CALL_OW 273
30443: ST_TO_ADDR
// if ValidHex ( x , y ) then
30444: LD_VAR 0 2
30448: PPUSH
30449: LD_VAR 0 3
30453: PPUSH
30454: CALL_OW 488
30458: IFFALSE 30493
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30460: LD_VAR 0 1
30464: PPUSH
30465: LD_VAR 0 2
30469: PPUSH
30470: LD_VAR 0 3
30474: PPUSH
30475: LD_INT 3
30477: PPUSH
30478: LD_INT 6
30480: PPUSH
30481: CALL_OW 12
30485: PPUSH
30486: LD_INT 1
30488: PPUSH
30489: CALL_OW 483
// end ;
30493: GO 30353
30495: POP
30496: POP
// end ;
30497: PPOPN 5
30499: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30500: LD_EXP 38
30504: IFFALSE 30512
30506: PUSH
30507: LD_EXP 73
30511: AND
30512: IFFALSE 30606
30514: GO 30516
30516: DISABLE
30517: LD_INT 0
30519: PPUSH
30520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30521: LD_ADDR_VAR 0 2
30525: PUSH
30526: LD_INT 22
30528: PUSH
30529: LD_OWVAR 2
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 32
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 21
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: PPUSH
30563: CALL_OW 69
30567: ST_TO_ADDR
// if not tmp then
30568: LD_VAR 0 2
30572: NOT
30573: IFFALSE 30577
// exit ;
30575: GO 30606
// for i in tmp do
30577: LD_ADDR_VAR 0 1
30581: PUSH
30582: LD_VAR 0 2
30586: PUSH
30587: FOR_IN
30588: IFFALSE 30604
// SetFuel ( i , 0 ) ;
30590: LD_VAR 0 1
30594: PPUSH
30595: LD_INT 0
30597: PPUSH
30598: CALL_OW 240
30602: GO 30587
30604: POP
30605: POP
// end ;
30606: PPOPN 2
30608: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30609: LD_EXP 38
30613: IFFALSE 30621
30615: PUSH
30616: LD_EXP 74
30620: AND
30621: IFFALSE 30687
30623: GO 30625
30625: DISABLE
30626: LD_INT 0
30628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30629: LD_ADDR_VAR 0 1
30633: PUSH
30634: LD_INT 22
30636: PUSH
30637: LD_OWVAR 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 30
30648: PUSH
30649: LD_INT 29
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 69
30664: ST_TO_ADDR
// if not tmp then
30665: LD_VAR 0 1
30669: NOT
30670: IFFALSE 30674
// exit ;
30672: GO 30687
// DestroyUnit ( tmp [ 1 ] ) ;
30674: LD_VAR 0 1
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: CALL_OW 65
// end ;
30687: PPOPN 1
30689: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30690: LD_EXP 38
30694: IFFALSE 30702
30696: PUSH
30697: LD_EXP 76
30701: AND
30702: IFFALSE 30831
30704: GO 30706
30706: DISABLE
30707: LD_INT 0
30709: PPUSH
// begin uc_side := 0 ;
30710: LD_ADDR_OWVAR 20
30714: PUSH
30715: LD_INT 0
30717: ST_TO_ADDR
// uc_nation := nation_arabian ;
30718: LD_ADDR_OWVAR 21
30722: PUSH
30723: LD_INT 2
30725: ST_TO_ADDR
// hc_gallery :=  ;
30726: LD_ADDR_OWVAR 33
30730: PUSH
30731: LD_STRING 
30733: ST_TO_ADDR
// hc_name :=  ;
30734: LD_ADDR_OWVAR 26
30738: PUSH
30739: LD_STRING 
30741: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30742: LD_INT 1
30744: PPUSH
30745: LD_INT 11
30747: PPUSH
30748: LD_INT 10
30750: PPUSH
30751: CALL_OW 380
// un := CreateHuman ;
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: CALL_OW 44
30764: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30765: LD_VAR 0 1
30769: PPUSH
30770: LD_INT 1
30772: PPUSH
30773: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30777: LD_INT 35
30779: PPUSH
30780: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30784: LD_VAR 0 1
30788: PPUSH
30789: LD_INT 22
30791: PUSH
30792: LD_OWVAR 2
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PPUSH
30801: CALL_OW 69
30805: PPUSH
30806: LD_VAR 0 1
30810: PPUSH
30811: CALL_OW 74
30815: PPUSH
30816: CALL_OW 115
// until IsDead ( un ) ;
30820: LD_VAR 0 1
30824: PPUSH
30825: CALL_OW 301
30829: IFFALSE 30777
// end ;
30831: PPOPN 1
30833: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30834: LD_EXP 38
30838: IFFALSE 30846
30840: PUSH
30841: LD_EXP 78
30845: AND
30846: IFFALSE 30858
30848: GO 30850
30850: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30851: LD_STRING earthquake(getX(game), 0, 32)
30853: PPUSH
30854: CALL_OW 559
30858: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30859: LD_EXP 38
30863: IFFALSE 30871
30865: PUSH
30866: LD_EXP 79
30870: AND
30871: IFFALSE 30962
30873: GO 30875
30875: DISABLE
30876: LD_INT 0
30878: PPUSH
// begin enable ;
30879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30880: LD_ADDR_VAR 0 1
30884: PUSH
30885: LD_INT 22
30887: PUSH
30888: LD_OWVAR 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 21
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 33
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: LIST
30921: PPUSH
30922: CALL_OW 69
30926: ST_TO_ADDR
// if not tmp then
30927: LD_VAR 0 1
30931: NOT
30932: IFFALSE 30936
// exit ;
30934: GO 30962
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30936: LD_VAR 0 1
30940: PUSH
30941: LD_INT 1
30943: PPUSH
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL_OW 12
30953: ARRAY
30954: PPUSH
30955: LD_INT 1
30957: PPUSH
30958: CALL_OW 234
// end ;
30962: PPOPN 1
30964: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30965: LD_EXP 38
30969: IFFALSE 30977
30971: PUSH
30972: LD_EXP 80
30976: AND
30977: IFFALSE 31118
30979: GO 30981
30981: DISABLE
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
30986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 22
30994: PUSH
30995: LD_OWVAR 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 25
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PPUSH
31018: CALL_OW 69
31022: ST_TO_ADDR
// if not tmp then
31023: LD_VAR 0 3
31027: NOT
31028: IFFALSE 31032
// exit ;
31030: GO 31118
// un := tmp [ rand ( 1 , tmp ) ] ;
31032: LD_ADDR_VAR 0 2
31036: PUSH
31037: LD_VAR 0 3
31041: PUSH
31042: LD_INT 1
31044: PPUSH
31045: LD_VAR 0 3
31049: PPUSH
31050: CALL_OW 12
31054: ARRAY
31055: ST_TO_ADDR
// if Crawls ( un ) then
31056: LD_VAR 0 2
31060: PPUSH
31061: CALL_OW 318
31065: IFFALSE 31076
// ComWalk ( un ) ;
31067: LD_VAR 0 2
31071: PPUSH
31072: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31076: LD_VAR 0 2
31080: PPUSH
31081: LD_INT 9
31083: PPUSH
31084: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31088: LD_INT 28
31090: PPUSH
31091: LD_OWVAR 2
31095: PPUSH
31096: LD_INT 2
31098: PPUSH
31099: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31103: LD_INT 29
31105: PPUSH
31106: LD_OWVAR 2
31110: PPUSH
31111: LD_INT 2
31113: PPUSH
31114: CALL_OW 322
// end ;
31118: PPOPN 3
31120: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31121: LD_EXP 38
31125: IFFALSE 31133
31127: PUSH
31128: LD_EXP 81
31132: AND
31133: IFFALSE 31244
31135: GO 31137
31137: DISABLE
31138: LD_INT 0
31140: PPUSH
31141: PPUSH
31142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31143: LD_ADDR_VAR 0 3
31147: PUSH
31148: LD_INT 22
31150: PUSH
31151: LD_OWVAR 2
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 25
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PPUSH
31174: CALL_OW 69
31178: ST_TO_ADDR
// if not tmp then
31179: LD_VAR 0 3
31183: NOT
31184: IFFALSE 31188
// exit ;
31186: GO 31244
// un := tmp [ rand ( 1 , tmp ) ] ;
31188: LD_ADDR_VAR 0 2
31192: PUSH
31193: LD_VAR 0 3
31197: PUSH
31198: LD_INT 1
31200: PPUSH
31201: LD_VAR 0 3
31205: PPUSH
31206: CALL_OW 12
31210: ARRAY
31211: ST_TO_ADDR
// if Crawls ( un ) then
31212: LD_VAR 0 2
31216: PPUSH
31217: CALL_OW 318
31221: IFFALSE 31232
// ComWalk ( un ) ;
31223: LD_VAR 0 2
31227: PPUSH
31228: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31232: LD_VAR 0 2
31236: PPUSH
31237: LD_INT 8
31239: PPUSH
31240: CALL_OW 336
// end ;
31244: PPOPN 3
31246: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31247: LD_EXP 38
31251: IFFALSE 31259
31253: PUSH
31254: LD_EXP 82
31258: AND
31259: IFFALSE 31403
31261: GO 31263
31263: DISABLE
31264: LD_INT 0
31266: PPUSH
31267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31268: LD_ADDR_VAR 0 2
31272: PUSH
31273: LD_INT 22
31275: PUSH
31276: LD_OWVAR 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 21
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: LD_INT 34
31300: PUSH
31301: LD_INT 12
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 34
31310: PUSH
31311: LD_INT 51
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 34
31320: PUSH
31321: LD_INT 32
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: PPUSH
31339: CALL_OW 69
31343: ST_TO_ADDR
// if not tmp then
31344: LD_VAR 0 2
31348: NOT
31349: IFFALSE 31353
// exit ;
31351: GO 31403
// for i in tmp do
31353: LD_ADDR_VAR 0 1
31357: PUSH
31358: LD_VAR 0 2
31362: PUSH
31363: FOR_IN
31364: IFFALSE 31401
// if GetCargo ( i , mat_artifact ) = 0 then
31366: LD_VAR 0 1
31370: PPUSH
31371: LD_INT 4
31373: PPUSH
31374: CALL_OW 289
31378: PUSH
31379: LD_INT 0
31381: EQUAL
31382: IFFALSE 31399
// SetCargo ( i , mat_siberit , 100 ) ;
31384: LD_VAR 0 1
31388: PPUSH
31389: LD_INT 3
31391: PPUSH
31392: LD_INT 100
31394: PPUSH
31395: CALL_OW 290
31399: GO 31363
31401: POP
31402: POP
// end ;
31403: PPOPN 2
31405: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31406: LD_EXP 38
31410: IFFALSE 31418
31412: PUSH
31413: LD_EXP 83
31417: AND
31418: IFFALSE 31601
31420: GO 31422
31422: DISABLE
31423: LD_INT 0
31425: PPUSH
31426: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31427: LD_ADDR_VAR 0 2
31431: PUSH
31432: LD_INT 22
31434: PUSH
31435: LD_OWVAR 2
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: ST_TO_ADDR
// if not tmp then
31449: LD_VAR 0 2
31453: NOT
31454: IFFALSE 31458
// exit ;
31456: GO 31601
// for i := 1 to 2 do
31458: LD_ADDR_VAR 0 1
31462: PUSH
31463: DOUBLE
31464: LD_INT 1
31466: DEC
31467: ST_TO_ADDR
31468: LD_INT 2
31470: PUSH
31471: FOR_TO
31472: IFFALSE 31599
// begin uc_side := your_side ;
31474: LD_ADDR_OWVAR 20
31478: PUSH
31479: LD_OWVAR 2
31483: ST_TO_ADDR
// uc_nation := nation_american ;
31484: LD_ADDR_OWVAR 21
31488: PUSH
31489: LD_INT 1
31491: ST_TO_ADDR
// vc_chassis := us_morphling ;
31492: LD_ADDR_OWVAR 37
31496: PUSH
31497: LD_INT 5
31499: ST_TO_ADDR
// vc_engine := engine_siberite ;
31500: LD_ADDR_OWVAR 39
31504: PUSH
31505: LD_INT 3
31507: ST_TO_ADDR
// vc_control := control_computer ;
31508: LD_ADDR_OWVAR 38
31512: PUSH
31513: LD_INT 3
31515: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31516: LD_ADDR_OWVAR 40
31520: PUSH
31521: LD_INT 10
31523: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31524: LD_VAR 0 2
31528: PUSH
31529: LD_INT 1
31531: ARRAY
31532: PPUSH
31533: CALL_OW 310
31537: NOT
31538: IFFALSE 31585
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31540: CALL_OW 45
31544: PPUSH
31545: LD_VAR 0 2
31549: PUSH
31550: LD_INT 1
31552: ARRAY
31553: PPUSH
31554: CALL_OW 250
31558: PPUSH
31559: LD_VAR 0 2
31563: PUSH
31564: LD_INT 1
31566: ARRAY
31567: PPUSH
31568: CALL_OW 251
31572: PPUSH
31573: LD_INT 12
31575: PPUSH
31576: LD_INT 1
31578: PPUSH
31579: CALL_OW 50
31583: GO 31597
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31585: CALL_OW 45
31589: PPUSH
31590: LD_INT 1
31592: PPUSH
31593: CALL_OW 51
// end ;
31597: GO 31471
31599: POP
31600: POP
// end ;
31601: PPOPN 2
31603: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31604: LD_EXP 38
31608: IFFALSE 31616
31610: PUSH
31611: LD_EXP 84
31615: AND
31616: IFFALSE 31838
31618: GO 31620
31620: DISABLE
31621: LD_INT 0
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31629: LD_ADDR_VAR 0 6
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_OWVAR 2
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 21
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 23
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: PPUSH
31678: CALL_OW 69
31682: ST_TO_ADDR
// if not tmp then
31683: LD_VAR 0 6
31687: NOT
31688: IFFALSE 31692
// exit ;
31690: GO 31838
// s1 := rand ( 1 , 4 ) ;
31692: LD_ADDR_VAR 0 2
31696: PUSH
31697: LD_INT 1
31699: PPUSH
31700: LD_INT 4
31702: PPUSH
31703: CALL_OW 12
31707: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31708: LD_ADDR_VAR 0 4
31712: PUSH
31713: LD_VAR 0 6
31717: PUSH
31718: LD_INT 1
31720: ARRAY
31721: PPUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: CALL_OW 259
31731: ST_TO_ADDR
// if s1 = 1 then
31732: LD_VAR 0 2
31736: PUSH
31737: LD_INT 1
31739: EQUAL
31740: IFFALSE 31760
// s2 := rand ( 2 , 4 ) else
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: LD_INT 2
31749: PPUSH
31750: LD_INT 4
31752: PPUSH
31753: CALL_OW 12
31757: ST_TO_ADDR
31758: GO 31768
// s2 := 1 ;
31760: LD_ADDR_VAR 0 3
31764: PUSH
31765: LD_INT 1
31767: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31768: LD_ADDR_VAR 0 5
31772: PUSH
31773: LD_VAR 0 6
31777: PUSH
31778: LD_INT 1
31780: ARRAY
31781: PPUSH
31782: LD_VAR 0 3
31786: PPUSH
31787: CALL_OW 259
31791: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31792: LD_VAR 0 6
31796: PUSH
31797: LD_INT 1
31799: ARRAY
31800: PPUSH
31801: LD_VAR 0 2
31805: PPUSH
31806: LD_VAR 0 5
31810: PPUSH
31811: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31815: LD_VAR 0 6
31819: PUSH
31820: LD_INT 1
31822: ARRAY
31823: PPUSH
31824: LD_VAR 0 3
31828: PPUSH
31829: LD_VAR 0 4
31833: PPUSH
31834: CALL_OW 237
// end ;
31838: PPOPN 6
31840: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31841: LD_EXP 38
31845: IFFALSE 31853
31847: PUSH
31848: LD_EXP 85
31852: AND
31853: IFFALSE 31932
31855: GO 31857
31857: DISABLE
31858: LD_INT 0
31860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31861: LD_ADDR_VAR 0 1
31865: PUSH
31866: LD_INT 22
31868: PUSH
31869: LD_OWVAR 2
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 30
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PPUSH
31892: CALL_OW 69
31896: ST_TO_ADDR
// if not tmp then
31897: LD_VAR 0 1
31901: NOT
31902: IFFALSE 31906
// exit ;
31904: GO 31932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31906: LD_VAR 0 1
31910: PUSH
31911: LD_INT 1
31913: PPUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: CALL_OW 12
31923: ARRAY
31924: PPUSH
31925: LD_INT 1
31927: PPUSH
31928: CALL_OW 234
// end ;
31932: PPOPN 1
31934: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31935: LD_EXP 38
31939: IFFALSE 31947
31941: PUSH
31942: LD_EXP 86
31946: AND
31947: IFFALSE 32059
31949: GO 31951
31951: DISABLE
31952: LD_INT 0
31954: PPUSH
31955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31956: LD_ADDR_VAR 0 2
31960: PUSH
31961: LD_INT 22
31963: PUSH
31964: LD_OWVAR 2
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: LD_INT 30
31978: PUSH
31979: LD_INT 27
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 30
31988: PUSH
31989: LD_INT 26
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 30
31998: PUSH
31999: LD_INT 28
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PPUSH
32016: CALL_OW 69
32020: ST_TO_ADDR
// if not tmp then
32021: LD_VAR 0 2
32025: NOT
32026: IFFALSE 32030
// exit ;
32028: GO 32059
// for i in tmp do
32030: LD_ADDR_VAR 0 1
32034: PUSH
32035: LD_VAR 0 2
32039: PUSH
32040: FOR_IN
32041: IFFALSE 32057
// SetLives ( i , 1 ) ;
32043: LD_VAR 0 1
32047: PPUSH
32048: LD_INT 1
32050: PPUSH
32051: CALL_OW 234
32055: GO 32040
32057: POP
32058: POP
// end ;
32059: PPOPN 2
32061: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32062: LD_EXP 38
32066: IFFALSE 32074
32068: PUSH
32069: LD_EXP 87
32073: AND
32074: IFFALSE 32361
32076: GO 32078
32078: DISABLE
32079: LD_INT 0
32081: PPUSH
32082: PPUSH
32083: PPUSH
// begin i := rand ( 1 , 7 ) ;
32084: LD_ADDR_VAR 0 1
32088: PUSH
32089: LD_INT 1
32091: PPUSH
32092: LD_INT 7
32094: PPUSH
32095: CALL_OW 12
32099: ST_TO_ADDR
// case i of 1 :
32100: LD_VAR 0 1
32104: PUSH
32105: LD_INT 1
32107: DOUBLE
32108: EQUAL
32109: IFTRUE 32113
32111: GO 32123
32113: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32114: LD_STRING earthquake(getX(game), 0, 32)
32116: PPUSH
32117: CALL_OW 559
32121: GO 32361
32123: LD_INT 2
32125: DOUBLE
32126: EQUAL
32127: IFTRUE 32131
32129: GO 32145
32131: POP
// begin ToLua ( displayStucuk(); ) ;
32132: LD_STRING displayStucuk();
32134: PPUSH
32135: CALL_OW 559
// ResetFog ;
32139: CALL_OW 335
// end ; 3 :
32143: GO 32361
32145: LD_INT 3
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32153
32151: GO 32257
32153: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32154: LD_ADDR_VAR 0 2
32158: PUSH
32159: LD_INT 22
32161: PUSH
32162: LD_OWVAR 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 25
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PPUSH
32185: CALL_OW 69
32189: ST_TO_ADDR
// if not tmp then
32190: LD_VAR 0 2
32194: NOT
32195: IFFALSE 32199
// exit ;
32197: GO 32361
// un := tmp [ rand ( 1 , tmp ) ] ;
32199: LD_ADDR_VAR 0 3
32203: PUSH
32204: LD_VAR 0 2
32208: PUSH
32209: LD_INT 1
32211: PPUSH
32212: LD_VAR 0 2
32216: PPUSH
32217: CALL_OW 12
32221: ARRAY
32222: ST_TO_ADDR
// if Crawls ( un ) then
32223: LD_VAR 0 3
32227: PPUSH
32228: CALL_OW 318
32232: IFFALSE 32243
// ComWalk ( un ) ;
32234: LD_VAR 0 3
32238: PPUSH
32239: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32243: LD_VAR 0 3
32247: PPUSH
32248: LD_INT 8
32250: PPUSH
32251: CALL_OW 336
// end ; 4 :
32255: GO 32361
32257: LD_INT 4
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32339
32265: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32266: LD_ADDR_VAR 0 2
32270: PUSH
32271: LD_INT 22
32273: PUSH
32274: LD_OWVAR 2
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 30
32285: PUSH
32286: LD_INT 29
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PPUSH
32297: CALL_OW 69
32301: ST_TO_ADDR
// if not tmp then
32302: LD_VAR 0 2
32306: NOT
32307: IFFALSE 32311
// exit ;
32309: GO 32361
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32311: LD_VAR 0 2
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PPUSH
32320: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32324: LD_VAR 0 2
32328: PUSH
32329: LD_INT 1
32331: ARRAY
32332: PPUSH
32333: CALL_OW 65
// end ; 5 .. 7 :
32337: GO 32361
32339: LD_INT 5
32341: DOUBLE
32342: GREATEREQUAL
32343: IFFALSE 32351
32345: LD_INT 7
32347: DOUBLE
32348: LESSEQUAL
32349: IFTRUE 32353
32351: GO 32360
32353: POP
// StreamSibBomb ; end ;
32354: CALL 28542 0 0
32358: GO 32361
32360: POP
// end ;
32361: PPOPN 3
32363: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32364: LD_EXP 38
32368: IFFALSE 32376
32370: PUSH
32371: LD_EXP 88
32375: AND
32376: IFFALSE 32532
32378: GO 32380
32380: DISABLE
32381: LD_INT 0
32383: PPUSH
32384: PPUSH
32385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32386: LD_ADDR_VAR 0 2
32390: PUSH
32391: LD_INT 81
32393: PUSH
32394: LD_OWVAR 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 2
32405: PUSH
32406: LD_INT 21
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 21
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PPUSH
32435: CALL_OW 69
32439: ST_TO_ADDR
// if not tmp then
32440: LD_VAR 0 2
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 32532
// p := 0 ;
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 0
32456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32457: LD_INT 35
32459: PPUSH
32460: CALL_OW 67
// p := p + 1 ;
32464: LD_ADDR_VAR 0 3
32468: PUSH
32469: LD_VAR 0 3
32473: PUSH
32474: LD_INT 1
32476: PLUS
32477: ST_TO_ADDR
// for i in tmp do
32478: LD_ADDR_VAR 0 1
32482: PUSH
32483: LD_VAR 0 2
32487: PUSH
32488: FOR_IN
32489: IFFALSE 32520
// if GetLives ( i ) < 1000 then
32491: LD_VAR 0 1
32495: PPUSH
32496: CALL_OW 256
32500: PUSH
32501: LD_INT 1000
32503: LESS
32504: IFFALSE 32518
// SetLives ( i , 1000 ) ;
32506: LD_VAR 0 1
32510: PPUSH
32511: LD_INT 1000
32513: PPUSH
32514: CALL_OW 234
32518: GO 32488
32520: POP
32521: POP
// until p > 20 ;
32522: LD_VAR 0 3
32526: PUSH
32527: LD_INT 20
32529: GREATER
32530: IFFALSE 32457
// end ;
32532: PPOPN 3
32534: END
// every 0 0$1 trigger StreamModeActive and sTime do
32535: LD_EXP 38
32539: IFFALSE 32547
32541: PUSH
32542: LD_EXP 89
32546: AND
32547: IFFALSE 32582
32549: GO 32551
32551: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32552: LD_INT 28
32554: PPUSH
32555: LD_OWVAR 2
32559: PPUSH
32560: LD_INT 2
32562: PPUSH
32563: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32567: LD_INT 30
32569: PPUSH
32570: LD_OWVAR 2
32574: PPUSH
32575: LD_INT 2
32577: PPUSH
32578: CALL_OW 322
// end ;
32582: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32583: LD_EXP 38
32587: IFFALSE 32595
32589: PUSH
32590: LD_EXP 90
32594: AND
32595: IFFALSE 32716
32597: GO 32599
32599: DISABLE
32600: LD_INT 0
32602: PPUSH
32603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32604: LD_ADDR_VAR 0 2
32608: PUSH
32609: LD_INT 22
32611: PUSH
32612: LD_OWVAR 2
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 21
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 23
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: PPUSH
32653: CALL_OW 69
32657: ST_TO_ADDR
// if not tmp then
32658: LD_VAR 0 2
32662: NOT
32663: IFFALSE 32667
// exit ;
32665: GO 32716
// for i in tmp do
32667: LD_ADDR_VAR 0 1
32671: PUSH
32672: LD_VAR 0 2
32676: PUSH
32677: FOR_IN
32678: IFFALSE 32714
// begin if Crawls ( i ) then
32680: LD_VAR 0 1
32684: PPUSH
32685: CALL_OW 318
32689: IFFALSE 32700
// ComWalk ( i ) ;
32691: LD_VAR 0 1
32695: PPUSH
32696: CALL_OW 138
// SetClass ( i , 2 ) ;
32700: LD_VAR 0 1
32704: PPUSH
32705: LD_INT 2
32707: PPUSH
32708: CALL_OW 336
// end ;
32712: GO 32677
32714: POP
32715: POP
// end ;
32716: PPOPN 2
32718: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32719: LD_EXP 38
32723: IFFALSE 32731
32725: PUSH
32726: LD_EXP 91
32730: AND
32731: IFFALSE 33021
32733: GO 32735
32735: DISABLE
32736: LD_INT 0
32738: PPUSH
32739: PPUSH
32740: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32741: LD_OWVAR 2
32745: PPUSH
32746: LD_INT 9
32748: PPUSH
32749: LD_INT 1
32751: PPUSH
32752: LD_INT 1
32754: PPUSH
32755: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32759: LD_INT 9
32761: PPUSH
32762: LD_OWVAR 2
32766: PPUSH
32767: CALL_OW 343
// uc_side := 9 ;
32771: LD_ADDR_OWVAR 20
32775: PUSH
32776: LD_INT 9
32778: ST_TO_ADDR
// uc_nation := 2 ;
32779: LD_ADDR_OWVAR 21
32783: PUSH
32784: LD_INT 2
32786: ST_TO_ADDR
// hc_name := Dark Warrior ;
32787: LD_ADDR_OWVAR 26
32791: PUSH
32792: LD_STRING Dark Warrior
32794: ST_TO_ADDR
// hc_gallery :=  ;
32795: LD_ADDR_OWVAR 33
32799: PUSH
32800: LD_STRING 
32802: ST_TO_ADDR
// hc_noskilllimit := true ;
32803: LD_ADDR_OWVAR 76
32807: PUSH
32808: LD_INT 1
32810: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32811: LD_ADDR_OWVAR 31
32815: PUSH
32816: LD_INT 30
32818: PUSH
32819: LD_INT 30
32821: PUSH
32822: LD_INT 30
32824: PUSH
32825: LD_INT 30
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: ST_TO_ADDR
// un := CreateHuman ;
32834: LD_ADDR_VAR 0 3
32838: PUSH
32839: CALL_OW 44
32843: ST_TO_ADDR
// hc_noskilllimit := false ;
32844: LD_ADDR_OWVAR 76
32848: PUSH
32849: LD_INT 0
32851: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32852: LD_VAR 0 3
32856: PPUSH
32857: LD_INT 1
32859: PPUSH
32860: CALL_OW 51
// ToLua ( playRanger() ) ;
32864: LD_STRING playRanger()
32866: PPUSH
32867: CALL_OW 559
// p := 0 ;
32871: LD_ADDR_VAR 0 2
32875: PUSH
32876: LD_INT 0
32878: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32879: LD_INT 35
32881: PPUSH
32882: CALL_OW 67
// p := p + 1 ;
32886: LD_ADDR_VAR 0 2
32890: PUSH
32891: LD_VAR 0 2
32895: PUSH
32896: LD_INT 1
32898: PLUS
32899: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32900: LD_VAR 0 3
32904: PPUSH
32905: CALL_OW 256
32909: PUSH
32910: LD_INT 1000
32912: LESS
32913: IFFALSE 32927
// SetLives ( un , 1000 ) ;
32915: LD_VAR 0 3
32919: PPUSH
32920: LD_INT 1000
32922: PPUSH
32923: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32927: LD_VAR 0 3
32931: PPUSH
32932: LD_INT 81
32934: PUSH
32935: LD_OWVAR 2
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 91
32946: PUSH
32947: LD_VAR 0 3
32951: PUSH
32952: LD_INT 30
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PPUSH
32964: CALL_OW 69
32968: PPUSH
32969: LD_VAR 0 3
32973: PPUSH
32974: CALL_OW 74
32978: PPUSH
32979: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32983: LD_VAR 0 2
32987: PUSH
32988: LD_INT 80
32990: GREATER
32991: IFTRUE 33004
32993: PUSH
32994: LD_VAR 0 3
32998: PPUSH
32999: CALL_OW 301
33003: OR
33004: IFFALSE 32879
// if un then
33006: LD_VAR 0 3
33010: IFFALSE 33021
// RemoveUnit ( un ) ;
33012: LD_VAR 0 3
33016: PPUSH
33017: CALL_OW 64
// end ;
33021: PPOPN 3
33023: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33024: LD_EXP 92
33028: IFFALSE 33144
33030: GO 33032
33032: DISABLE
33033: LD_INT 0
33035: PPUSH
33036: PPUSH
33037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33038: LD_ADDR_VAR 0 2
33042: PUSH
33043: LD_INT 81
33045: PUSH
33046: LD_OWVAR 2
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 21
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PPUSH
33069: CALL_OW 69
33073: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33074: LD_STRING playComputer()
33076: PPUSH
33077: CALL_OW 559
// if not tmp then
33081: LD_VAR 0 2
33085: NOT
33086: IFFALSE 33090
// exit ;
33088: GO 33144
// for i in tmp do
33090: LD_ADDR_VAR 0 1
33094: PUSH
33095: LD_VAR 0 2
33099: PUSH
33100: FOR_IN
33101: IFFALSE 33142
// for j := 1 to 4 do
33103: LD_ADDR_VAR 0 3
33107: PUSH
33108: DOUBLE
33109: LD_INT 1
33111: DEC
33112: ST_TO_ADDR
33113: LD_INT 4
33115: PUSH
33116: FOR_TO
33117: IFFALSE 33138
// SetSkill ( i , j , 10 ) ;
33119: LD_VAR 0 1
33123: PPUSH
33124: LD_VAR 0 3
33128: PPUSH
33129: LD_INT 10
33131: PPUSH
33132: CALL_OW 237
33136: GO 33116
33138: POP
33139: POP
33140: GO 33100
33142: POP
33143: POP
// end ;
33144: PPOPN 3
33146: END
// every 0 0$1 trigger s30 do var i , tmp ;
33147: LD_EXP 93
33151: IFFALSE 33220
33153: GO 33155
33155: DISABLE
33156: LD_INT 0
33158: PPUSH
33159: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: LD_INT 22
33167: PUSH
33168: LD_OWVAR 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: ST_TO_ADDR
// if not tmp then
33182: LD_VAR 0 2
33186: NOT
33187: IFFALSE 33191
// exit ;
33189: GO 33220
// for i in tmp do
33191: LD_ADDR_VAR 0 1
33195: PUSH
33196: LD_VAR 0 2
33200: PUSH
33201: FOR_IN
33202: IFFALSE 33218
// SetLives ( i , 300 ) ;
33204: LD_VAR 0 1
33208: PPUSH
33209: LD_INT 300
33211: PPUSH
33212: CALL_OW 234
33216: GO 33201
33218: POP
33219: POP
// end ;
33220: PPOPN 2
33222: END
// every 0 0$1 trigger s60 do var i , tmp ;
33223: LD_EXP 94
33227: IFFALSE 33296
33229: GO 33231
33231: DISABLE
33232: LD_INT 0
33234: PPUSH
33235: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33236: LD_ADDR_VAR 0 2
33240: PUSH
33241: LD_INT 22
33243: PUSH
33244: LD_OWVAR 2
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PPUSH
33253: CALL_OW 69
33257: ST_TO_ADDR
// if not tmp then
33258: LD_VAR 0 2
33262: NOT
33263: IFFALSE 33267
// exit ;
33265: GO 33296
// for i in tmp do
33267: LD_ADDR_VAR 0 1
33271: PUSH
33272: LD_VAR 0 2
33276: PUSH
33277: FOR_IN
33278: IFFALSE 33294
// SetLives ( i , 600 ) ;
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_INT 600
33287: PPUSH
33288: CALL_OW 234
33292: GO 33277
33294: POP
33295: POP
// end ;
33296: PPOPN 2
33298: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33299: LD_INT 0
33301: PPUSH
// case cmd of 301 :
33302: LD_VAR 0 1
33306: PUSH
33307: LD_INT 301
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33347
33315: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33316: LD_VAR 0 6
33320: PPUSH
33321: LD_VAR 0 7
33325: PPUSH
33326: LD_VAR 0 8
33330: PPUSH
33331: LD_VAR 0 4
33335: PPUSH
33336: LD_VAR 0 5
33340: PPUSH
33341: CALL 34560 0 5
33345: GO 33468
33347: LD_INT 302
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33392
33355: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33356: LD_VAR 0 6
33360: PPUSH
33361: LD_VAR 0 7
33365: PPUSH
33366: LD_VAR 0 8
33370: PPUSH
33371: LD_VAR 0 9
33375: PPUSH
33376: LD_VAR 0 4
33380: PPUSH
33381: LD_VAR 0 5
33385: PPUSH
33386: CALL 34651 0 6
33390: GO 33468
33392: LD_INT 303
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33437
33400: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33401: LD_VAR 0 6
33405: PPUSH
33406: LD_VAR 0 7
33410: PPUSH
33411: LD_VAR 0 8
33415: PPUSH
33416: LD_VAR 0 9
33420: PPUSH
33421: LD_VAR 0 4
33425: PPUSH
33426: LD_VAR 0 5
33430: PPUSH
33431: CALL 33473 0 6
33435: GO 33468
33437: LD_INT 304
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33467
33445: POP
// hHackTeleport ( unit , x , y ) ; end ;
33446: LD_VAR 0 2
33450: PPUSH
33451: LD_VAR 0 4
33455: PPUSH
33456: LD_VAR 0 5
33460: PPUSH
33461: CALL 35244 0 3
33465: GO 33468
33467: POP
// end ;
33468: LD_VAR 0 12
33472: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33473: LD_INT 0
33475: PPUSH
33476: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33477: LD_VAR 0 1
33481: PUSH
33482: LD_INT 1
33484: LESS
33485: IFTRUE 33497
33487: PUSH
33488: LD_VAR 0 1
33492: PUSH
33493: LD_INT 3
33495: GREATER
33496: OR
33497: IFTRUE 33515
33499: PUSH
33500: LD_VAR 0 5
33504: PPUSH
33505: LD_VAR 0 6
33509: PPUSH
33510: CALL_OW 428
33514: OR
33515: IFFALSE 33519
// exit ;
33517: GO 34247
// uc_side := your_side ;
33519: LD_ADDR_OWVAR 20
33523: PUSH
33524: LD_OWVAR 2
33528: ST_TO_ADDR
// uc_nation := nation ;
33529: LD_ADDR_OWVAR 21
33533: PUSH
33534: LD_VAR 0 1
33538: ST_TO_ADDR
// bc_level = 1 ;
33539: LD_ADDR_OWVAR 43
33543: PUSH
33544: LD_INT 1
33546: ST_TO_ADDR
// case btype of 1 :
33547: LD_VAR 0 2
33551: PUSH
33552: LD_INT 1
33554: DOUBLE
33555: EQUAL
33556: IFTRUE 33560
33558: GO 33571
33560: POP
// bc_type := b_depot ; 2 :
33561: LD_ADDR_OWVAR 42
33565: PUSH
33566: LD_INT 0
33568: ST_TO_ADDR
33569: GO 34191
33571: LD_INT 2
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33579
33577: GO 33590
33579: POP
// bc_type := b_warehouse ; 3 :
33580: LD_ADDR_OWVAR 42
33584: PUSH
33585: LD_INT 1
33587: ST_TO_ADDR
33588: GO 34191
33590: LD_INT 3
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33598
33596: GO 33609
33598: POP
// bc_type := b_lab ; 4 .. 9 :
33599: LD_ADDR_OWVAR 42
33603: PUSH
33604: LD_INT 6
33606: ST_TO_ADDR
33607: GO 34191
33609: LD_INT 4
33611: DOUBLE
33612: GREATEREQUAL
33613: IFFALSE 33621
33615: LD_INT 9
33617: DOUBLE
33618: LESSEQUAL
33619: IFTRUE 33623
33621: GO 33683
33623: POP
// begin bc_type := b_lab_half ;
33624: LD_ADDR_OWVAR 42
33628: PUSH
33629: LD_INT 7
33631: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33632: LD_ADDR_OWVAR 44
33636: PUSH
33637: LD_INT 10
33639: PUSH
33640: LD_INT 11
33642: PUSH
33643: LD_INT 12
33645: PUSH
33646: LD_INT 15
33648: PUSH
33649: LD_INT 14
33651: PUSH
33652: LD_INT 13
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: PUSH
33663: LD_VAR 0 2
33667: PUSH
33668: LD_INT 3
33670: MINUS
33671: ARRAY
33672: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33673: LD_ADDR_OWVAR 45
33677: PUSH
33678: LD_INT 9
33680: ST_TO_ADDR
// end ; 10 .. 13 :
33681: GO 34191
33683: LD_INT 10
33685: DOUBLE
33686: GREATEREQUAL
33687: IFFALSE 33695
33689: LD_INT 13
33691: DOUBLE
33692: LESSEQUAL
33693: IFTRUE 33697
33695: GO 33774
33697: POP
// begin bc_type := b_lab_full ;
33698: LD_ADDR_OWVAR 42
33702: PUSH
33703: LD_INT 8
33705: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33706: LD_ADDR_OWVAR 44
33710: PUSH
33711: LD_INT 10
33713: PUSH
33714: LD_INT 12
33716: PUSH
33717: LD_INT 14
33719: PUSH
33720: LD_INT 13
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: PUSH
33729: LD_VAR 0 2
33733: PUSH
33734: LD_INT 9
33736: MINUS
33737: ARRAY
33738: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33739: LD_ADDR_OWVAR 45
33743: PUSH
33744: LD_INT 11
33746: PUSH
33747: LD_INT 15
33749: PUSH
33750: LD_INT 12
33752: PUSH
33753: LD_INT 15
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: PUSH
33762: LD_VAR 0 2
33766: PUSH
33767: LD_INT 9
33769: MINUS
33770: ARRAY
33771: ST_TO_ADDR
// end ; 14 :
33772: GO 34191
33774: LD_INT 14
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 33793
33782: POP
// bc_type := b_workshop ; 15 :
33783: LD_ADDR_OWVAR 42
33787: PUSH
33788: LD_INT 2
33790: ST_TO_ADDR
33791: GO 34191
33793: LD_INT 15
33795: DOUBLE
33796: EQUAL
33797: IFTRUE 33801
33799: GO 33812
33801: POP
// bc_type := b_factory ; 16 :
33802: LD_ADDR_OWVAR 42
33806: PUSH
33807: LD_INT 3
33809: ST_TO_ADDR
33810: GO 34191
33812: LD_INT 16
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33831
33820: POP
// bc_type := b_ext_gun ; 17 :
33821: LD_ADDR_OWVAR 42
33825: PUSH
33826: LD_INT 17
33828: ST_TO_ADDR
33829: GO 34191
33831: LD_INT 17
33833: DOUBLE
33834: EQUAL
33835: IFTRUE 33839
33837: GO 33867
33839: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33840: LD_ADDR_OWVAR 42
33844: PUSH
33845: LD_INT 19
33847: PUSH
33848: LD_INT 23
33850: PUSH
33851: LD_INT 19
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: PUSH
33859: LD_VAR 0 1
33863: ARRAY
33864: ST_TO_ADDR
33865: GO 34191
33867: LD_INT 18
33869: DOUBLE
33870: EQUAL
33871: IFTRUE 33875
33873: GO 33886
33875: POP
// bc_type := b_ext_radar ; 19 :
33876: LD_ADDR_OWVAR 42
33880: PUSH
33881: LD_INT 20
33883: ST_TO_ADDR
33884: GO 34191
33886: LD_INT 19
33888: DOUBLE
33889: EQUAL
33890: IFTRUE 33894
33892: GO 33905
33894: POP
// bc_type := b_ext_radio ; 20 :
33895: LD_ADDR_OWVAR 42
33899: PUSH
33900: LD_INT 22
33902: ST_TO_ADDR
33903: GO 34191
33905: LD_INT 20
33907: DOUBLE
33908: EQUAL
33909: IFTRUE 33913
33911: GO 33924
33913: POP
// bc_type := b_ext_siberium ; 21 :
33914: LD_ADDR_OWVAR 42
33918: PUSH
33919: LD_INT 21
33921: ST_TO_ADDR
33922: GO 34191
33924: LD_INT 21
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33943
33932: POP
// bc_type := b_ext_computer ; 22 :
33933: LD_ADDR_OWVAR 42
33937: PUSH
33938: LD_INT 24
33940: ST_TO_ADDR
33941: GO 34191
33943: LD_INT 22
33945: DOUBLE
33946: EQUAL
33947: IFTRUE 33951
33949: GO 33962
33951: POP
// bc_type := b_ext_track ; 23 :
33952: LD_ADDR_OWVAR 42
33956: PUSH
33957: LD_INT 16
33959: ST_TO_ADDR
33960: GO 34191
33962: LD_INT 23
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 33981
33970: POP
// bc_type := b_ext_laser ; 24 :
33971: LD_ADDR_OWVAR 42
33975: PUSH
33976: LD_INT 25
33978: ST_TO_ADDR
33979: GO 34191
33981: LD_INT 24
33983: DOUBLE
33984: EQUAL
33985: IFTRUE 33989
33987: GO 34000
33989: POP
// bc_type := b_control_tower ; 25 :
33990: LD_ADDR_OWVAR 42
33994: PUSH
33995: LD_INT 36
33997: ST_TO_ADDR
33998: GO 34191
34000: LD_INT 25
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34008
34006: GO 34019
34008: POP
// bc_type := b_breastwork ; 26 :
34009: LD_ADDR_OWVAR 42
34013: PUSH
34014: LD_INT 31
34016: ST_TO_ADDR
34017: GO 34191
34019: LD_INT 26
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34038
34027: POP
// bc_type := b_bunker ; 27 :
34028: LD_ADDR_OWVAR 42
34032: PUSH
34033: LD_INT 32
34035: ST_TO_ADDR
34036: GO 34191
34038: LD_INT 27
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34057
34046: POP
// bc_type := b_turret ; 28 :
34047: LD_ADDR_OWVAR 42
34051: PUSH
34052: LD_INT 33
34054: ST_TO_ADDR
34055: GO 34191
34057: LD_INT 28
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34065
34063: GO 34076
34065: POP
// bc_type := b_armoury ; 29 :
34066: LD_ADDR_OWVAR 42
34070: PUSH
34071: LD_INT 4
34073: ST_TO_ADDR
34074: GO 34191
34076: LD_INT 29
34078: DOUBLE
34079: EQUAL
34080: IFTRUE 34084
34082: GO 34095
34084: POP
// bc_type := b_barracks ; 30 :
34085: LD_ADDR_OWVAR 42
34089: PUSH
34090: LD_INT 5
34092: ST_TO_ADDR
34093: GO 34191
34095: LD_INT 30
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34114
34103: POP
// bc_type := b_solar_power ; 31 :
34104: LD_ADDR_OWVAR 42
34108: PUSH
34109: LD_INT 27
34111: ST_TO_ADDR
34112: GO 34191
34114: LD_INT 31
34116: DOUBLE
34117: EQUAL
34118: IFTRUE 34122
34120: GO 34133
34122: POP
// bc_type := b_oil_power ; 32 :
34123: LD_ADDR_OWVAR 42
34127: PUSH
34128: LD_INT 26
34130: ST_TO_ADDR
34131: GO 34191
34133: LD_INT 32
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34152
34141: POP
// bc_type := b_siberite_power ; 33 :
34142: LD_ADDR_OWVAR 42
34146: PUSH
34147: LD_INT 28
34149: ST_TO_ADDR
34150: GO 34191
34152: LD_INT 33
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34160
34158: GO 34171
34160: POP
// bc_type := b_oil_mine ; 34 :
34161: LD_ADDR_OWVAR 42
34165: PUSH
34166: LD_INT 29
34168: ST_TO_ADDR
34169: GO 34191
34171: LD_INT 34
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34179
34177: GO 34190
34179: POP
// bc_type := b_siberite_mine ; end ;
34180: LD_ADDR_OWVAR 42
34184: PUSH
34185: LD_INT 30
34187: ST_TO_ADDR
34188: GO 34191
34190: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34191: LD_ADDR_VAR 0 8
34195: PUSH
34196: LD_VAR 0 5
34200: PPUSH
34201: LD_VAR 0 6
34205: PPUSH
34206: LD_VAR 0 3
34210: PPUSH
34211: CALL_OW 47
34215: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34216: LD_OWVAR 42
34220: PUSH
34221: LD_INT 32
34223: PUSH
34224: LD_INT 33
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: IN
34231: IFFALSE 34247
// PlaceWeaponTurret ( b , weapon ) ;
34233: LD_VAR 0 8
34237: PPUSH
34238: LD_VAR 0 4
34242: PPUSH
34243: CALL_OW 431
// end ;
34247: LD_VAR 0 7
34251: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34258: LD_ADDR_VAR 0 4
34262: PUSH
34263: LD_INT 22
34265: PUSH
34266: LD_OWVAR 2
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: LD_INT 30
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 30
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PPUSH
34307: CALL_OW 69
34311: ST_TO_ADDR
// if not tmp then
34312: LD_VAR 0 4
34316: NOT
34317: IFFALSE 34321
// exit ;
34319: GO 34380
// for i in tmp do
34321: LD_ADDR_VAR 0 2
34325: PUSH
34326: LD_VAR 0 4
34330: PUSH
34331: FOR_IN
34332: IFFALSE 34378
// for j = 1 to 3 do
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: DOUBLE
34340: LD_INT 1
34342: DEC
34343: ST_TO_ADDR
34344: LD_INT 3
34346: PUSH
34347: FOR_TO
34348: IFFALSE 34374
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34350: LD_VAR 0 2
34354: PPUSH
34355: CALL_OW 274
34359: PPUSH
34360: LD_VAR 0 3
34364: PPUSH
34365: LD_INT 99999
34367: PPUSH
34368: CALL_OW 277
34372: GO 34347
34374: POP
34375: POP
34376: GO 34331
34378: POP
34379: POP
// end ;
34380: LD_VAR 0 1
34384: RET
// export function hHackSetLevel10 ; var i , j ; begin
34385: LD_INT 0
34387: PPUSH
34388: PPUSH
34389: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34390: LD_ADDR_VAR 0 2
34394: PUSH
34395: LD_INT 21
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 69
34409: PUSH
34410: FOR_IN
34411: IFFALSE 34463
// if IsSelected ( i ) then
34413: LD_VAR 0 2
34417: PPUSH
34418: CALL_OW 306
34422: IFFALSE 34461
// begin for j := 1 to 4 do
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: DOUBLE
34430: LD_INT 1
34432: DEC
34433: ST_TO_ADDR
34434: LD_INT 4
34436: PUSH
34437: FOR_TO
34438: IFFALSE 34459
// SetSkill ( i , j , 10 ) ;
34440: LD_VAR 0 2
34444: PPUSH
34445: LD_VAR 0 3
34449: PPUSH
34450: LD_INT 10
34452: PPUSH
34453: CALL_OW 237
34457: GO 34437
34459: POP
34460: POP
// end ;
34461: GO 34410
34463: POP
34464: POP
// end ;
34465: LD_VAR 0 1
34469: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34470: LD_INT 0
34472: PPUSH
34473: PPUSH
34474: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34475: LD_ADDR_VAR 0 2
34479: PUSH
34480: LD_INT 22
34482: PUSH
34483: LD_OWVAR 2
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 21
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PPUSH
34506: CALL_OW 69
34510: PUSH
34511: FOR_IN
34512: IFFALSE 34553
// begin for j := 1 to 4 do
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: DOUBLE
34520: LD_INT 1
34522: DEC
34523: ST_TO_ADDR
34524: LD_INT 4
34526: PUSH
34527: FOR_TO
34528: IFFALSE 34549
// SetSkill ( i , j , 10 ) ;
34530: LD_VAR 0 2
34534: PPUSH
34535: LD_VAR 0 3
34539: PPUSH
34540: LD_INT 10
34542: PPUSH
34543: CALL_OW 237
34547: GO 34527
34549: POP
34550: POP
// end ;
34551: GO 34511
34553: POP
34554: POP
// end ;
34555: LD_VAR 0 1
34559: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34560: LD_INT 0
34562: PPUSH
// uc_side := your_side ;
34563: LD_ADDR_OWVAR 20
34567: PUSH
34568: LD_OWVAR 2
34572: ST_TO_ADDR
// uc_nation := nation ;
34573: LD_ADDR_OWVAR 21
34577: PUSH
34578: LD_VAR 0 1
34582: ST_TO_ADDR
// InitHc ;
34583: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34587: LD_INT 0
34589: PPUSH
34590: LD_VAR 0 2
34594: PPUSH
34595: LD_VAR 0 3
34599: PPUSH
34600: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34604: LD_VAR 0 4
34608: PPUSH
34609: LD_VAR 0 5
34613: PPUSH
34614: CALL_OW 428
34618: PUSH
34619: LD_INT 0
34621: EQUAL
34622: IFFALSE 34646
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34624: CALL_OW 44
34628: PPUSH
34629: LD_VAR 0 4
34633: PPUSH
34634: LD_VAR 0 5
34638: PPUSH
34639: LD_INT 1
34641: PPUSH
34642: CALL_OW 48
// end ;
34646: LD_VAR 0 6
34650: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34651: LD_INT 0
34653: PPUSH
34654: PPUSH
// uc_side := your_side ;
34655: LD_ADDR_OWVAR 20
34659: PUSH
34660: LD_OWVAR 2
34664: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34665: LD_VAR 0 1
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 4
34681: PUSH
34682: LD_INT 5
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: IN
34692: IFFALSE 34704
// uc_nation := nation_american else
34694: LD_ADDR_OWVAR 21
34698: PUSH
34699: LD_INT 1
34701: ST_TO_ADDR
34702: GO 34747
// if chassis in [ 11 , 12 , 13 , 14 ] then
34704: LD_VAR 0 1
34708: PUSH
34709: LD_INT 11
34711: PUSH
34712: LD_INT 12
34714: PUSH
34715: LD_INT 13
34717: PUSH
34718: LD_INT 14
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: IN
34727: IFFALSE 34739
// uc_nation := nation_arabian else
34729: LD_ADDR_OWVAR 21
34733: PUSH
34734: LD_INT 2
34736: ST_TO_ADDR
34737: GO 34747
// uc_nation := nation_russian ;
34739: LD_ADDR_OWVAR 21
34743: PUSH
34744: LD_INT 3
34746: ST_TO_ADDR
// vc_chassis := chassis ;
34747: LD_ADDR_OWVAR 37
34751: PUSH
34752: LD_VAR 0 1
34756: ST_TO_ADDR
// vc_engine := engine ;
34757: LD_ADDR_OWVAR 39
34761: PUSH
34762: LD_VAR 0 2
34766: ST_TO_ADDR
// vc_control := control ;
34767: LD_ADDR_OWVAR 38
34771: PUSH
34772: LD_VAR 0 3
34776: ST_TO_ADDR
// vc_weapon := weapon ;
34777: LD_ADDR_OWVAR 40
34781: PUSH
34782: LD_VAR 0 4
34786: ST_TO_ADDR
// un := CreateVehicle ;
34787: LD_ADDR_VAR 0 8
34791: PUSH
34792: CALL_OW 45
34796: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34797: LD_VAR 0 8
34801: PPUSH
34802: LD_INT 0
34804: PPUSH
34805: LD_INT 5
34807: PPUSH
34808: CALL_OW 12
34812: PPUSH
34813: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34817: LD_VAR 0 8
34821: PPUSH
34822: LD_VAR 0 5
34826: PPUSH
34827: LD_VAR 0 6
34831: PPUSH
34832: LD_INT 1
34834: PPUSH
34835: CALL_OW 48
// end ;
34839: LD_VAR 0 7
34843: RET
// export hInvincible ; every 1 do
34844: GO 34846
34846: DISABLE
// hInvincible := [ ] ;
34847: LD_ADDR_EXP 95
34851: PUSH
34852: EMPTY
34853: ST_TO_ADDR
34854: END
// every 10 do var i ;
34855: GO 34857
34857: DISABLE
34858: LD_INT 0
34860: PPUSH
// begin enable ;
34861: ENABLE
// if not hInvincible then
34862: LD_EXP 95
34866: NOT
34867: IFFALSE 34871
// exit ;
34869: GO 34915
// for i in hInvincible do
34871: LD_ADDR_VAR 0 1
34875: PUSH
34876: LD_EXP 95
34880: PUSH
34881: FOR_IN
34882: IFFALSE 34913
// if GetLives ( i ) < 1000 then
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL_OW 256
34893: PUSH
34894: LD_INT 1000
34896: LESS
34897: IFFALSE 34911
// SetLives ( i , 1000 ) ;
34899: LD_VAR 0 1
34903: PPUSH
34904: LD_INT 1000
34906: PPUSH
34907: CALL_OW 234
34911: GO 34881
34913: POP
34914: POP
// end ;
34915: PPOPN 1
34917: END
// export function hHackInvincible ; var i ; begin
34918: LD_INT 0
34920: PPUSH
34921: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34922: LD_ADDR_VAR 0 2
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 21
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 21
34942: PUSH
34943: LD_INT 2
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: LIST
34954: PPUSH
34955: CALL_OW 69
34959: PUSH
34960: FOR_IN
34961: IFFALSE 35022
// if IsSelected ( i ) then
34963: LD_VAR 0 2
34967: PPUSH
34968: CALL_OW 306
34972: IFFALSE 35020
// begin if i in hInvincible then
34974: LD_VAR 0 2
34978: PUSH
34979: LD_EXP 95
34983: IN
34984: IFFALSE 35004
// hInvincible := hInvincible diff i else
34986: LD_ADDR_EXP 95
34990: PUSH
34991: LD_EXP 95
34995: PUSH
34996: LD_VAR 0 2
35000: DIFF
35001: ST_TO_ADDR
35002: GO 35020
// hInvincible := hInvincible union i ;
35004: LD_ADDR_EXP 95
35008: PUSH
35009: LD_EXP 95
35013: PUSH
35014: LD_VAR 0 2
35018: UNION
35019: ST_TO_ADDR
// end ;
35020: GO 34960
35022: POP
35023: POP
// end ;
35024: LD_VAR 0 1
35028: RET
// export function hHackInvisible ; var i , j ; begin
35029: LD_INT 0
35031: PPUSH
35032: PPUSH
35033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35034: LD_ADDR_VAR 0 2
35038: PUSH
35039: LD_INT 21
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PPUSH
35049: CALL_OW 69
35053: PUSH
35054: FOR_IN
35055: IFFALSE 35079
// if IsSelected ( i ) then
35057: LD_VAR 0 2
35061: PPUSH
35062: CALL_OW 306
35066: IFFALSE 35077
// ComForceInvisible ( i ) ;
35068: LD_VAR 0 2
35072: PPUSH
35073: CALL_OW 496
35077: GO 35054
35079: POP
35080: POP
// end ;
35081: LD_VAR 0 1
35085: RET
// export function hHackChangeYourSide ; begin
35086: LD_INT 0
35088: PPUSH
// if your_side = 8 then
35089: LD_OWVAR 2
35093: PUSH
35094: LD_INT 8
35096: EQUAL
35097: IFFALSE 35109
// your_side := 0 else
35099: LD_ADDR_OWVAR 2
35103: PUSH
35104: LD_INT 0
35106: ST_TO_ADDR
35107: GO 35123
// your_side := your_side + 1 ;
35109: LD_ADDR_OWVAR 2
35113: PUSH
35114: LD_OWVAR 2
35118: PUSH
35119: LD_INT 1
35121: PLUS
35122: ST_TO_ADDR
// end ;
35123: LD_VAR 0 1
35127: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35128: LD_INT 0
35130: PPUSH
35131: PPUSH
35132: PPUSH
// for i in all_units do
35133: LD_ADDR_VAR 0 2
35137: PUSH
35138: LD_OWVAR 3
35142: PUSH
35143: FOR_IN
35144: IFFALSE 35222
// if IsSelected ( i ) then
35146: LD_VAR 0 2
35150: PPUSH
35151: CALL_OW 306
35155: IFFALSE 35220
// begin j := GetSide ( i ) ;
35157: LD_ADDR_VAR 0 3
35161: PUSH
35162: LD_VAR 0 2
35166: PPUSH
35167: CALL_OW 255
35171: ST_TO_ADDR
// if j = 8 then
35172: LD_VAR 0 3
35176: PUSH
35177: LD_INT 8
35179: EQUAL
35180: IFFALSE 35192
// j := 0 else
35182: LD_ADDR_VAR 0 3
35186: PUSH
35187: LD_INT 0
35189: ST_TO_ADDR
35190: GO 35206
// j := j + 1 ;
35192: LD_ADDR_VAR 0 3
35196: PUSH
35197: LD_VAR 0 3
35201: PUSH
35202: LD_INT 1
35204: PLUS
35205: ST_TO_ADDR
// SetSide ( i , j ) ;
35206: LD_VAR 0 2
35210: PPUSH
35211: LD_VAR 0 3
35215: PPUSH
35216: CALL_OW 235
// end ;
35220: GO 35143
35222: POP
35223: POP
// end ;
35224: LD_VAR 0 1
35228: RET
// export function hHackFog ; begin
35229: LD_INT 0
35231: PPUSH
// FogOff ( true ) ;
35232: LD_INT 1
35234: PPUSH
35235: CALL_OW 344
// end ;
35239: LD_VAR 0 1
35243: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35244: LD_INT 0
35246: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35247: LD_VAR 0 1
35251: PPUSH
35252: LD_VAR 0 2
35256: PPUSH
35257: LD_VAR 0 3
35261: PPUSH
35262: LD_INT 1
35264: PPUSH
35265: LD_INT 1
35267: PPUSH
35268: CALL_OW 483
// CenterOnXY ( x , y ) ;
35272: LD_VAR 0 2
35276: PPUSH
35277: LD_VAR 0 3
35281: PPUSH
35282: CALL_OW 84
// end ;
35286: LD_VAR 0 4
35290: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35291: LD_INT 0
35293: PPUSH
35294: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35295: LD_VAR 0 1
35299: NOT
35300: IFTRUE 35319
35302: PUSH
35303: LD_VAR 0 2
35307: PPUSH
35308: LD_VAR 0 3
35312: PPUSH
35313: CALL_OW 488
35317: NOT
35318: OR
35319: IFTRUE 35354
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL_OW 266
35331: PUSH
35332: LD_INT 3
35334: NONEQUAL
35335: IFFALSE 35353
35337: PUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL_OW 247
35347: PUSH
35348: LD_INT 1
35350: EQUAL
35351: NOT
35352: AND
35353: OR
35354: IFFALSE 35358
// exit ;
35356: GO 35640
// if GetType ( factory ) = unit_human then
35358: LD_VAR 0 1
35362: PPUSH
35363: CALL_OW 247
35367: PUSH
35368: LD_INT 1
35370: EQUAL
35371: IFFALSE 35388
// factory := IsInUnit ( factory ) ;
35373: LD_ADDR_VAR 0 1
35377: PUSH
35378: LD_VAR 0 1
35382: PPUSH
35383: CALL_OW 310
35387: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL_OW 266
35397: PUSH
35398: LD_INT 3
35400: NONEQUAL
35401: IFFALSE 35405
// exit ;
35403: GO 35640
// for i := 1 to Count ( factoryWaypoints ) do
35405: LD_ADDR_VAR 0 5
35409: PUSH
35410: DOUBLE
35411: LD_INT 1
35413: DEC
35414: ST_TO_ADDR
35415: LD_EXP 96
35419: PPUSH
35420: CALL 45344 0 1
35424: PUSH
35425: FOR_TO
35426: IFFALSE 35588
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35428: LD_VAR 0 2
35432: PPUSH
35433: LD_VAR 0 3
35437: PPUSH
35438: CALL_OW 428
35442: PUSH
35443: LD_EXP 96
35447: PUSH
35448: LD_VAR 0 5
35452: ARRAY
35453: PUSH
35454: LD_INT 2
35456: ARRAY
35457: EQUAL
35458: IFFALSE 35490
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35460: LD_ADDR_EXP 96
35464: PUSH
35465: LD_EXP 96
35469: PPUSH
35470: LD_VAR 0 5
35474: PPUSH
35475: CALL_OW 3
35479: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35480: CALL 35645 0 0
// exit ;
35484: POP
35485: POP
35486: GO 35640
// end else
35488: GO 35586
// if factory = factoryWaypoints [ i ] [ 2 ] then
35490: LD_VAR 0 1
35494: PUSH
35495: LD_EXP 96
35499: PUSH
35500: LD_VAR 0 5
35504: ARRAY
35505: PUSH
35506: LD_INT 2
35508: ARRAY
35509: EQUAL
35510: IFFALSE 35586
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35512: LD_ADDR_EXP 96
35516: PUSH
35517: LD_EXP 96
35521: PPUSH
35522: LD_VAR 0 5
35526: PPUSH
35527: CALL_OW 3
35531: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35532: LD_ADDR_EXP 96
35536: PUSH
35537: LD_EXP 96
35541: PPUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: CALL_OW 255
35551: PUSH
35552: LD_VAR 0 1
35556: PUSH
35557: LD_VAR 0 2
35561: PUSH
35562: LD_VAR 0 3
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: PPUSH
35573: CALL 81310 0 2
35577: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35578: CALL 35645 0 0
// exit ;
35582: POP
35583: POP
35584: GO 35640
// end ; end ;
35586: GO 35425
35588: POP
35589: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35590: LD_ADDR_EXP 96
35594: PUSH
35595: LD_EXP 96
35599: PPUSH
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 255
35609: PUSH
35610: LD_VAR 0 1
35614: PUSH
35615: LD_VAR 0 2
35619: PUSH
35620: LD_VAR 0 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: PPUSH
35631: CALL 81310 0 2
35635: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35636: CALL 35645 0 0
// end ;
35640: LD_VAR 0 4
35644: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35645: LD_INT 0
35647: PPUSH
35648: PPUSH
35649: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35650: LD_STRING resetFactoryWaypoint();
35652: PPUSH
35653: CALL_OW 559
// if factoryWaypoints then
35657: LD_EXP 96
35661: IFFALSE 35782
// begin list := factoryWaypoints ;
35663: LD_ADDR_VAR 0 3
35667: PUSH
35668: LD_EXP 96
35672: ST_TO_ADDR
// for i := 1 to list do
35673: LD_ADDR_VAR 0 2
35677: PUSH
35678: DOUBLE
35679: LD_INT 1
35681: DEC
35682: ST_TO_ADDR
35683: LD_VAR 0 3
35687: PUSH
35688: FOR_TO
35689: IFFALSE 35780
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35691: LD_STRING setFactoryWaypointXY(
35693: PUSH
35694: LD_VAR 0 3
35698: PUSH
35699: LD_VAR 0 2
35703: ARRAY
35704: PUSH
35705: LD_INT 1
35707: ARRAY
35708: STR
35709: PUSH
35710: LD_STRING ,
35712: STR
35713: PUSH
35714: LD_VAR 0 3
35718: PUSH
35719: LD_VAR 0 2
35723: ARRAY
35724: PUSH
35725: LD_INT 2
35727: ARRAY
35728: STR
35729: PUSH
35730: LD_STRING ,
35732: STR
35733: PUSH
35734: LD_VAR 0 3
35738: PUSH
35739: LD_VAR 0 2
35743: ARRAY
35744: PUSH
35745: LD_INT 3
35747: ARRAY
35748: STR
35749: PUSH
35750: LD_STRING ,
35752: STR
35753: PUSH
35754: LD_VAR 0 3
35758: PUSH
35759: LD_VAR 0 2
35763: ARRAY
35764: PUSH
35765: LD_INT 4
35767: ARRAY
35768: STR
35769: PUSH
35770: LD_STRING )
35772: STR
35773: PPUSH
35774: CALL_OW 559
35778: GO 35688
35780: POP
35781: POP
// end ; end ;
35782: LD_VAR 0 1
35786: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35787: LD_INT 0
35789: PPUSH
// if HexInfo ( x , y ) = warehouse then
35790: LD_VAR 0 2
35794: PPUSH
35795: LD_VAR 0 3
35799: PPUSH
35800: CALL_OW 428
35804: PUSH
35805: LD_VAR 0 1
35809: EQUAL
35810: IFFALSE 35837
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35812: LD_ADDR_EXP 98
35816: PUSH
35817: LD_EXP 98
35821: PPUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: LD_INT 0
35829: PPUSH
35830: CALL_OW 1
35834: ST_TO_ADDR
35835: GO 35888
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35837: LD_ADDR_EXP 98
35841: PUSH
35842: LD_EXP 98
35846: PPUSH
35847: LD_VAR 0 1
35851: PPUSH
35852: LD_VAR 0 1
35856: PPUSH
35857: CALL_OW 255
35861: PUSH
35862: LD_VAR 0 1
35866: PUSH
35867: LD_VAR 0 2
35871: PUSH
35872: LD_VAR 0 3
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: PPUSH
35883: CALL_OW 1
35887: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35888: CALL 35897 0 0
// end ;
35892: LD_VAR 0 4
35896: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35897: LD_INT 0
35899: PPUSH
35900: PPUSH
35901: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35902: LD_STRING resetWarehouseGatheringPoints();
35904: PPUSH
35905: CALL_OW 559
// if warehouseGatheringPoints then
35909: LD_EXP 98
35913: IFFALSE 36039
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35915: LD_ADDR_VAR 0 3
35919: PUSH
35920: LD_EXP 98
35924: PPUSH
35925: CALL 85244 0 1
35929: ST_TO_ADDR
// for i := 1 to list do
35930: LD_ADDR_VAR 0 2
35934: PUSH
35935: DOUBLE
35936: LD_INT 1
35938: DEC
35939: ST_TO_ADDR
35940: LD_VAR 0 3
35944: PUSH
35945: FOR_TO
35946: IFFALSE 36037
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35948: LD_STRING setWarehouseGatheringPointXY(
35950: PUSH
35951: LD_VAR 0 3
35955: PUSH
35956: LD_VAR 0 2
35960: ARRAY
35961: PUSH
35962: LD_INT 1
35964: ARRAY
35965: STR
35966: PUSH
35967: LD_STRING ,
35969: STR
35970: PUSH
35971: LD_VAR 0 3
35975: PUSH
35976: LD_VAR 0 2
35980: ARRAY
35981: PUSH
35982: LD_INT 2
35984: ARRAY
35985: STR
35986: PUSH
35987: LD_STRING ,
35989: STR
35990: PUSH
35991: LD_VAR 0 3
35995: PUSH
35996: LD_VAR 0 2
36000: ARRAY
36001: PUSH
36002: LD_INT 3
36004: ARRAY
36005: STR
36006: PUSH
36007: LD_STRING ,
36009: STR
36010: PUSH
36011: LD_VAR 0 3
36015: PUSH
36016: LD_VAR 0 2
36020: ARRAY
36021: PUSH
36022: LD_INT 4
36024: ARRAY
36025: STR
36026: PUSH
36027: LD_STRING )
36029: STR
36030: PPUSH
36031: CALL_OW 559
36035: GO 35945
36037: POP
36038: POP
// end ; end ;
36039: LD_VAR 0 1
36043: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36044: LD_EXP 98
36048: IFFALSE 36743
36050: GO 36052
36052: DISABLE
36053: LD_INT 0
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
// begin enable ;
36064: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36065: LD_ADDR_VAR 0 3
36069: PUSH
36070: LD_EXP 98
36074: PPUSH
36075: CALL 85244 0 1
36079: ST_TO_ADDR
// if not list then
36080: LD_VAR 0 3
36084: NOT
36085: IFFALSE 36089
// exit ;
36087: GO 36743
// for i := 1 to list do
36089: LD_ADDR_VAR 0 1
36093: PUSH
36094: DOUBLE
36095: LD_INT 1
36097: DEC
36098: ST_TO_ADDR
36099: LD_VAR 0 3
36103: PUSH
36104: FOR_TO
36105: IFFALSE 36741
// begin depot := list [ i ] [ 2 ] ;
36107: LD_ADDR_VAR 0 8
36111: PUSH
36112: LD_VAR 0 3
36116: PUSH
36117: LD_VAR 0 1
36121: ARRAY
36122: PUSH
36123: LD_INT 2
36125: ARRAY
36126: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36127: LD_ADDR_VAR 0 5
36131: PUSH
36132: LD_VAR 0 3
36136: PUSH
36137: LD_VAR 0 1
36141: ARRAY
36142: PUSH
36143: LD_INT 1
36145: ARRAY
36146: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36147: LD_VAR 0 8
36151: PPUSH
36152: CALL_OW 301
36156: IFTRUE 36175
36158: PUSH
36159: LD_VAR 0 5
36163: PUSH
36164: LD_VAR 0 8
36168: PPUSH
36169: CALL_OW 255
36173: NONEQUAL
36174: OR
36175: IFFALSE 36204
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36177: LD_ADDR_EXP 98
36181: PUSH
36182: LD_EXP 98
36186: PPUSH
36187: LD_VAR 0 8
36191: PPUSH
36192: LD_INT 0
36194: PPUSH
36195: CALL_OW 1
36199: ST_TO_ADDR
// exit ;
36200: POP
36201: POP
36202: GO 36743
// end ; x := list [ i ] [ 3 ] ;
36204: LD_ADDR_VAR 0 6
36208: PUSH
36209: LD_VAR 0 3
36213: PUSH
36214: LD_VAR 0 1
36218: ARRAY
36219: PUSH
36220: LD_INT 3
36222: ARRAY
36223: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36224: LD_ADDR_VAR 0 7
36228: PUSH
36229: LD_VAR 0 3
36233: PUSH
36234: LD_VAR 0 1
36238: ARRAY
36239: PUSH
36240: LD_INT 4
36242: ARRAY
36243: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36244: LD_ADDR_VAR 0 9
36248: PUSH
36249: LD_VAR 0 6
36253: PPUSH
36254: LD_VAR 0 7
36258: PPUSH
36259: LD_INT 16
36261: PPUSH
36262: CALL 83818 0 3
36266: ST_TO_ADDR
// if not cratesNearbyPoint then
36267: LD_VAR 0 9
36271: NOT
36272: IFFALSE 36278
// exit ;
36274: POP
36275: POP
36276: GO 36743
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36278: LD_ADDR_VAR 0 4
36282: PUSH
36283: LD_INT 22
36285: PUSH
36286: LD_VAR 0 5
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 3
36297: PUSH
36298: LD_INT 60
36300: PUSH
36301: EMPTY
36302: LIST
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 91
36310: PUSH
36311: LD_VAR 0 8
36315: PUSH
36316: LD_INT 6
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: LD_INT 25
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 25
36339: PUSH
36340: LD_INT 16
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: PPUSH
36358: CALL_OW 69
36362: PUSH
36363: LD_VAR 0 8
36367: PPUSH
36368: CALL_OW 313
36372: PPUSH
36373: LD_INT 3
36375: PUSH
36376: LD_INT 60
36378: PUSH
36379: EMPTY
36380: LIST
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: LD_INT 25
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 25
36401: PUSH
36402: LD_INT 16
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PPUSH
36418: CALL_OW 72
36422: UNION
36423: ST_TO_ADDR
// if tmp then
36424: LD_VAR 0 4
36428: IFFALSE 36508
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36430: LD_ADDR_VAR 0 4
36434: PUSH
36435: LD_VAR 0 4
36439: PPUSH
36440: LD_INT 3
36442: PPUSH
36443: CALL 81625 0 2
36447: ST_TO_ADDR
// for j in tmp do
36448: LD_ADDR_VAR 0 2
36452: PUSH
36453: LD_VAR 0 4
36457: PUSH
36458: FOR_IN
36459: IFFALSE 36502
// begin if IsInUnit ( j ) then
36461: LD_VAR 0 2
36465: PPUSH
36466: CALL_OW 310
36470: IFFALSE 36481
// ComExit ( j ) ;
36472: LD_VAR 0 2
36476: PPUSH
36477: CALL 81708 0 1
// AddComCollect ( j , x , y ) ;
36481: LD_VAR 0 2
36485: PPUSH
36486: LD_VAR 0 6
36490: PPUSH
36491: LD_VAR 0 7
36495: PPUSH
36496: CALL_OW 177
// end ;
36500: GO 36458
36502: POP
36503: POP
// exit ;
36504: POP
36505: POP
36506: GO 36743
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36508: LD_ADDR_VAR 0 4
36512: PUSH
36513: LD_INT 22
36515: PUSH
36516: LD_VAR 0 5
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 91
36527: PUSH
36528: LD_VAR 0 8
36532: PUSH
36533: LD_INT 8
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 34
36546: PUSH
36547: LD_INT 12
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 34
36556: PUSH
36557: LD_INT 51
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 34
36566: PUSH
36567: LD_INT 32
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 34
36576: PUSH
36577: LD_INT 89
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: PPUSH
36596: CALL_OW 69
36600: ST_TO_ADDR
// if tmp then
36601: LD_VAR 0 4
36605: IFFALSE 36739
// begin for j in tmp do
36607: LD_ADDR_VAR 0 2
36611: PUSH
36612: LD_VAR 0 4
36616: PUSH
36617: FOR_IN
36618: IFFALSE 36737
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36620: LD_VAR 0 2
36624: PPUSH
36625: CALL_OW 262
36629: PUSH
36630: LD_INT 3
36632: EQUAL
36633: IFTRUE 36650
36635: PUSH
36636: LD_VAR 0 2
36640: PPUSH
36641: CALL_OW 261
36645: PUSH
36646: LD_INT 20
36648: GREATER
36649: OR
36650: IFFALSE 36664
36652: PUSH
36653: LD_VAR 0 2
36657: PPUSH
36658: CALL_OW 314
36662: NOT
36663: AND
36664: IFFALSE 36694
36666: PUSH
36667: LD_VAR 0 2
36671: PPUSH
36672: CALL_OW 263
36676: PUSH
36677: LD_INT 1
36679: NONEQUAL
36680: IFTRUE 36693
36682: PUSH
36683: LD_VAR 0 2
36687: PPUSH
36688: CALL_OW 311
36692: OR
36693: AND
36694: IFFALSE 36735
// begin ComCollect ( j , x , y ) ;
36696: LD_VAR 0 2
36700: PPUSH
36701: LD_VAR 0 6
36705: PPUSH
36706: LD_VAR 0 7
36710: PPUSH
36711: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36715: LD_VAR 0 2
36719: PPUSH
36720: LD_VAR 0 8
36724: PPUSH
36725: CALL_OW 172
// exit ;
36729: POP
36730: POP
36731: POP
36732: POP
36733: GO 36743
// end ;
36735: GO 36617
36737: POP
36738: POP
// end ; end ;
36739: GO 36104
36741: POP
36742: POP
// end ; end_of_file
36743: PPOPN 9
36745: END
// export function SOS_UnitDestroyed ( un ) ; begin
36746: LD_INT 0
36748: PPUSH
// ComRadiation ( un ) ;
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL 37916 0 1
// end ;
36758: LD_VAR 0 2
36762: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36763: LD_INT 0
36765: PPUSH
// ComRadiation ( un ) ;
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL 37916 0 1
// end ;
36775: LD_VAR 0 2
36779: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36780: LD_INT 0
36782: PPUSH
// end ;
36783: LD_VAR 0 4
36787: RET
// export function SOS_Command ( cmd ) ; begin
36788: LD_INT 0
36790: PPUSH
// end ;
36791: LD_VAR 0 2
36795: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36796: LD_INT 0
36798: PPUSH
// end ;
36799: LD_VAR 0 6
36803: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
36804: LD_INT 0
36806: PPUSH
36807: PPUSH
36808: PPUSH
36809: PPUSH
36810: PPUSH
// if not vehicle or not factory then
36811: LD_VAR 0 1
36815: NOT
36816: IFTRUE 36825
36818: PUSH
36819: LD_VAR 0 2
36823: NOT
36824: OR
36825: IFFALSE 36829
// exit ;
36827: GO 37491
// weapon := GetWeapon ( vehicle ) ;
36829: LD_ADDR_VAR 0 7
36833: PUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 264
36843: ST_TO_ADDR
// if weapon = ar_miner then
36844: LD_VAR 0 7
36848: PUSH
36849: LD_INT 81
36851: EQUAL
36852: IFFALSE 36909
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
36854: LD_ADDR_EXP 107
36858: PUSH
36859: LD_EXP 107
36863: PPUSH
36864: LD_EXP 107
36868: PUSH
36869: LD_INT 1
36871: PLUS
36872: PPUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 1
36882: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36883: LD_ADDR_EXP 108
36887: PUSH
36888: LD_EXP 108
36892: PPUSH
36893: LD_EXP 108
36897: PUSH
36898: LD_INT 1
36900: PLUS
36901: PPUSH
36902: EMPTY
36903: PPUSH
36904: CALL_OW 1
36908: ST_TO_ADDR
// end ; if not factoryWaypoints then
36909: LD_EXP 96
36913: NOT
36914: IFFALSE 36918
// exit ;
36916: GO 37491
// for i := 1 to Count ( factoryWaypoints ) do
36918: LD_ADDR_VAR 0 4
36922: PUSH
36923: DOUBLE
36924: LD_INT 1
36926: DEC
36927: ST_TO_ADDR
36928: LD_EXP 96
36932: PPUSH
36933: CALL 45344 0 1
36937: PUSH
36938: FOR_TO
36939: IFFALSE 37489
// if factoryWaypoints [ i ] [ 2 ] = factory then
36941: LD_EXP 96
36945: PUSH
36946: LD_VAR 0 4
36950: ARRAY
36951: PUSH
36952: LD_INT 2
36954: ARRAY
36955: PUSH
36956: LD_VAR 0 2
36960: EQUAL
36961: IFFALSE 37487
// begin if GetControl ( vehicle ) = control_manual then
36963: LD_VAR 0 1
36967: PPUSH
36968: CALL_OW 263
36972: PUSH
36973: LD_INT 1
36975: EQUAL
36976: IFFALSE 37340
// begin driver := IsDrivenBy ( vehicle ) ;
36978: LD_ADDR_VAR 0 5
36982: PUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL_OW 311
36992: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36993: LD_VAR 0 5
36997: PUSH
36998: LD_EXP 97
37002: IN
37003: IFTRUE 37017
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: LD_EXP 97
37015: IN
37016: OR
37017: IFFALSE 37023
// exit ;
37019: POP
37020: POP
37021: GO 37491
// if not HasTask ( driver ) then
37023: LD_VAR 0 5
37027: PPUSH
37028: CALL_OW 314
37032: NOT
37033: IFFALSE 37338
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
37035: LD_ADDR_EXP 97
37039: PUSH
37040: LD_EXP 97
37044: PPUSH
37045: LD_VAR 0 5
37049: PPUSH
37050: CALL 81310 0 2
37054: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
37055: LD_ADDR_EXP 97
37059: PUSH
37060: LD_EXP 97
37064: PPUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL 81310 0 2
37074: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37075: LD_ADDR_VAR 0 6
37079: PUSH
37080: LD_EXP 96
37084: PUSH
37085: LD_VAR 0 4
37089: ARRAY
37090: PUSH
37091: LD_INT 3
37093: ARRAY
37094: PPUSH
37095: LD_EXP 96
37099: PUSH
37100: LD_VAR 0 4
37104: ARRAY
37105: PUSH
37106: LD_INT 4
37108: ARRAY
37109: PPUSH
37110: CALL_OW 428
37114: ST_TO_ADDR
// if hex then
37115: LD_VAR 0 6
37119: IFFALSE 37137
// ComMoveUnit ( driver , hex ) else
37121: LD_VAR 0 5
37125: PPUSH
37126: LD_VAR 0 6
37130: PPUSH
37131: CALL_OW 112
37135: GO 37221
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
37137: LD_VAR 0 1
37141: PPUSH
37142: LD_EXP 96
37146: PUSH
37147: LD_VAR 0 4
37151: ARRAY
37152: PUSH
37153: LD_INT 3
37155: ARRAY
37156: PPUSH
37157: LD_EXP 96
37161: PUSH
37162: LD_VAR 0 4
37166: ARRAY
37167: PUSH
37168: LD_INT 4
37170: ARRAY
37171: PPUSH
37172: CALL_OW 297
37176: PUSH
37177: LD_INT 0
37179: GREATER
37180: IFFALSE 37221
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37182: LD_VAR 0 5
37186: PPUSH
37187: LD_EXP 96
37191: PUSH
37192: LD_VAR 0 4
37196: ARRAY
37197: PUSH
37198: LD_INT 3
37200: ARRAY
37201: PPUSH
37202: LD_EXP 96
37206: PUSH
37207: LD_VAR 0 4
37211: ARRAY
37212: PUSH
37213: LD_INT 4
37215: ARRAY
37216: PPUSH
37217: CALL_OW 111
// AddComExitVehicle ( driver ) ;
37221: LD_VAR 0 5
37225: PPUSH
37226: CALL_OW 181
// if Multiplayer then
37230: LD_OWVAR 4
37234: IFFALSE 37283
// begin repeat wait ( 10 ) ;
37236: LD_INT 10
37238: PPUSH
37239: CALL_OW 67
// until not IsInUnit ( driver ) ;
37243: LD_VAR 0 5
37247: PPUSH
37248: CALL_OW 310
37252: NOT
37253: IFFALSE 37236
// if not HasTask ( driver ) then
37255: LD_VAR 0 5
37259: PPUSH
37260: CALL_OW 314
37264: NOT
37265: IFFALSE 37281
// ComEnterUnit ( driver , factory ) ;
37267: LD_VAR 0 5
37271: PPUSH
37272: LD_VAR 0 2
37276: PPUSH
37277: CALL_OW 120
// end else
37281: GO 37297
// AddComEnterUnit ( driver , factory ) ;
37283: LD_VAR 0 5
37287: PPUSH
37288: LD_VAR 0 2
37292: PPUSH
37293: CALL_OW 180
// wait ( 0 0$1 ) ;
37297: LD_INT 35
37299: PPUSH
37300: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
37304: LD_ADDR_EXP 97
37308: PUSH
37309: LD_EXP 97
37313: PUSH
37314: LD_VAR 0 5
37318: DIFF
37319: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
37320: LD_ADDR_EXP 97
37324: PUSH
37325: LD_EXP 97
37329: PUSH
37330: LD_VAR 0 1
37334: DIFF
37335: ST_TO_ADDR
// break ;
37336: GO 37489
// end ; end else
37338: GO 37487
// if GetControl ( vehicle ) = control_remote then
37340: LD_VAR 0 1
37344: PPUSH
37345: CALL_OW 263
37349: PUSH
37350: LD_INT 2
37352: EQUAL
37353: IFFALSE 37439
// begin wait ( 0 0$2 ) ;
37355: LD_INT 70
37357: PPUSH
37358: CALL_OW 67
// repeat wait ( 10 ) ;
37362: LD_INT 10
37364: PPUSH
37365: CALL_OW 67
// Connect ( vehicle ) ;
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL 51622 0 1
// until IsControledBy ( vehicle ) ;
37378: LD_VAR 0 1
37382: PPUSH
37383: CALL_OW 312
37387: IFFALSE 37362
// wait ( 10 ) ;
37389: LD_INT 10
37391: PPUSH
37392: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37396: LD_VAR 0 1
37400: PPUSH
37401: LD_EXP 96
37405: PUSH
37406: LD_VAR 0 4
37410: ARRAY
37411: PUSH
37412: LD_INT 3
37414: ARRAY
37415: PPUSH
37416: LD_EXP 96
37420: PUSH
37421: LD_VAR 0 4
37425: ARRAY
37426: PUSH
37427: LD_INT 4
37429: ARRAY
37430: PPUSH
37431: CALL_OW 111
// break ;
37435: GO 37489
// end else
37437: GO 37487
// begin wait ( 0 0$3 ) ;
37439: LD_INT 105
37441: PPUSH
37442: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37446: LD_VAR 0 1
37450: PPUSH
37451: LD_EXP 96
37455: PUSH
37456: LD_VAR 0 4
37460: ARRAY
37461: PUSH
37462: LD_INT 3
37464: ARRAY
37465: PPUSH
37466: LD_EXP 96
37470: PUSH
37471: LD_VAR 0 4
37475: ARRAY
37476: PUSH
37477: LD_INT 4
37479: ARRAY
37480: PPUSH
37481: CALL_OW 111
// break ;
37485: GO 37489
// end ; end ;
37487: GO 36938
37489: POP
37490: POP
// end ;
37491: LD_VAR 0 3
37495: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37496: LD_INT 0
37498: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37499: LD_VAR 0 1
37503: PUSH
37504: LD_INT 250
37506: EQUAL
37507: IFFALSE 37524
37509: PUSH
37510: LD_VAR 0 2
37514: PPUSH
37515: CALL_OW 264
37519: PUSH
37520: LD_INT 81
37522: EQUAL
37523: AND
37524: IFFALSE 37545
// MinerPlaceMine ( unit , x , y ) ;
37526: LD_VAR 0 2
37530: PPUSH
37531: LD_VAR 0 4
37535: PPUSH
37536: LD_VAR 0 5
37540: PPUSH
37541: CALL 40826 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37545: LD_VAR 0 1
37549: PUSH
37550: LD_INT 251
37552: EQUAL
37553: IFFALSE 37570
37555: PUSH
37556: LD_VAR 0 2
37560: PPUSH
37561: CALL_OW 264
37565: PUSH
37566: LD_INT 81
37568: EQUAL
37569: AND
37570: IFFALSE 37591
// MinerDetonateMine ( unit , x , y ) ;
37572: LD_VAR 0 2
37576: PPUSH
37577: LD_VAR 0 4
37581: PPUSH
37582: LD_VAR 0 5
37586: PPUSH
37587: CALL 41233 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37591: LD_VAR 0 1
37595: PUSH
37596: LD_INT 252
37598: EQUAL
37599: IFFALSE 37616
37601: PUSH
37602: LD_VAR 0 2
37606: PPUSH
37607: CALL_OW 264
37611: PUSH
37612: LD_INT 81
37614: EQUAL
37615: AND
37616: IFFALSE 37637
// MinerCreateMinefield ( unit , x , y ) ;
37618: LD_VAR 0 2
37622: PPUSH
37623: LD_VAR 0 4
37627: PPUSH
37628: LD_VAR 0 5
37632: PPUSH
37633: CALL 41465 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37637: LD_VAR 0 1
37641: PUSH
37642: LD_INT 253
37644: EQUAL
37645: IFFALSE 37662
37647: PUSH
37648: LD_VAR 0 2
37652: PPUSH
37653: CALL_OW 257
37657: PUSH
37658: LD_INT 5
37660: EQUAL
37661: AND
37662: IFFALSE 37683
// ComBinocular ( unit , x , y ) ;
37664: LD_VAR 0 2
37668: PPUSH
37669: LD_VAR 0 4
37673: PPUSH
37674: LD_VAR 0 5
37678: PPUSH
37679: CALL 41840 0 3
// if selectedUnit then
37683: LD_VAR 0 3
37687: IFFALSE 37747
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37689: LD_VAR 0 1
37693: PUSH
37694: LD_INT 254
37696: EQUAL
37697: IFFALSE 37714
37699: PUSH
37700: LD_VAR 0 2
37704: PPUSH
37705: CALL_OW 264
37709: PUSH
37710: LD_INT 99
37712: EQUAL
37713: AND
37714: IFFALSE 37731
37716: PUSH
37717: LD_VAR 0 3
37721: PPUSH
37722: CALL_OW 263
37726: PUSH
37727: LD_INT 3
37729: EQUAL
37730: AND
37731: IFFALSE 37747
// HackDestroyVehicle ( unit , selectedUnit ) ;
37733: LD_VAR 0 2
37737: PPUSH
37738: LD_VAR 0 3
37742: PPUSH
37743: CALL 40037 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37747: LD_VAR 0 1
37751: PUSH
37752: LD_INT 255
37754: EQUAL
37755: IFFALSE 37779
37757: PUSH
37758: LD_VAR 0 2
37762: PPUSH
37763: CALL_OW 264
37767: PUSH
37768: LD_INT 14
37770: PUSH
37771: LD_INT 53
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: IN
37778: AND
37779: IFFALSE 37797
37781: PUSH
37782: LD_VAR 0 4
37786: PPUSH
37787: LD_VAR 0 5
37791: PPUSH
37792: CALL_OW 488
37796: AND
37797: IFFALSE 37821
// CutTreeXYR ( unit , x , y , 12 ) ;
37799: LD_VAR 0 2
37803: PPUSH
37804: LD_VAR 0 4
37808: PPUSH
37809: LD_VAR 0 5
37813: PPUSH
37814: LD_INT 12
37816: PPUSH
37817: CALL 38012 0 4
// if cmd = 256 then
37821: LD_VAR 0 1
37825: PUSH
37826: LD_INT 256
37828: EQUAL
37829: IFFALSE 37850
// SetFactoryWaypoint ( unit , x , y ) ;
37831: LD_VAR 0 2
37835: PPUSH
37836: LD_VAR 0 4
37840: PPUSH
37841: LD_VAR 0 5
37845: PPUSH
37846: CALL 35291 0 3
// if cmd = 257 then
37850: LD_VAR 0 1
37854: PUSH
37855: LD_INT 257
37857: EQUAL
37858: IFFALSE 37879
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37860: LD_VAR 0 2
37864: PPUSH
37865: LD_VAR 0 4
37869: PPUSH
37870: LD_VAR 0 5
37874: PPUSH
37875: CALL 35787 0 3
// if cmd = 258 then
37879: LD_VAR 0 1
37883: PUSH
37884: LD_INT 258
37886: EQUAL
37887: IFFALSE 37911
// BurnTreeXYR ( unit , x , y , 8 ) ;
37889: LD_VAR 0 2
37893: PPUSH
37894: LD_VAR 0 4
37898: PPUSH
37899: LD_VAR 0 5
37903: PPUSH
37904: LD_INT 8
37906: PPUSH
37907: CALL 38412 0 4
// end ;
37911: LD_VAR 0 6
37915: RET
// export function ComRadiation ( un ) ; var eff ; begin
37916: LD_INT 0
37918: PPUSH
37919: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL_OW 264
37929: PUSH
37930: LD_INT 91
37932: NONEQUAL
37933: IFFALSE 37937
// exit ;
37935: GO 38007
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37937: LD_INT 68
37939: PPUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL_OW 255
37949: PPUSH
37950: CALL_OW 321
37954: PUSH
37955: LD_INT 2
37957: EQUAL
37958: IFFALSE 37970
// eff := 50 else
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_INT 50
37967: ST_TO_ADDR
37968: GO 37978
// eff := 25 ;
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: LD_INT 25
37977: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37978: LD_VAR 0 1
37982: PPUSH
37983: CALL_OW 250
37987: PPUSH
37988: LD_VAR 0 1
37992: PPUSH
37993: CALL_OW 251
37997: PPUSH
37998: LD_VAR 0 3
38002: PPUSH
38003: CALL_OW 495
// end ;
38007: LD_VAR 0 2
38011: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38023: LD_VAR 0 1
38027: PPUSH
38028: CALL_OW 302
38032: NOT
38033: IFTRUE 38052
38035: PUSH
38036: LD_VAR 0 2
38040: PPUSH
38041: LD_VAR 0 3
38045: PPUSH
38046: CALL_OW 488
38050: NOT
38051: OR
38052: IFTRUE 38061
38054: PUSH
38055: LD_VAR 0 4
38059: NOT
38060: OR
38061: IFFALSE 38065
// exit ;
38063: GO 38407
// list := [ ] ;
38065: LD_ADDR_VAR 0 13
38069: PUSH
38070: EMPTY
38071: ST_TO_ADDR
// if x - r < 0 then
38072: LD_VAR 0 2
38076: PUSH
38077: LD_VAR 0 4
38081: MINUS
38082: PUSH
38083: LD_INT 0
38085: LESS
38086: IFFALSE 38098
// min_x := 0 else
38088: LD_ADDR_VAR 0 7
38092: PUSH
38093: LD_INT 0
38095: ST_TO_ADDR
38096: GO 38114
// min_x := x - r ;
38098: LD_ADDR_VAR 0 7
38102: PUSH
38103: LD_VAR 0 2
38107: PUSH
38108: LD_VAR 0 4
38112: MINUS
38113: ST_TO_ADDR
// if y - r < 0 then
38114: LD_VAR 0 3
38118: PUSH
38119: LD_VAR 0 4
38123: MINUS
38124: PUSH
38125: LD_INT 0
38127: LESS
38128: IFFALSE 38140
// min_y := 0 else
38130: LD_ADDR_VAR 0 8
38134: PUSH
38135: LD_INT 0
38137: ST_TO_ADDR
38138: GO 38156
// min_y := y - r ;
38140: LD_ADDR_VAR 0 8
38144: PUSH
38145: LD_VAR 0 3
38149: PUSH
38150: LD_VAR 0 4
38154: MINUS
38155: ST_TO_ADDR
// max_x := x + r ;
38156: LD_ADDR_VAR 0 9
38160: PUSH
38161: LD_VAR 0 2
38165: PUSH
38166: LD_VAR 0 4
38170: PLUS
38171: ST_TO_ADDR
// max_y := y + r ;
38172: LD_ADDR_VAR 0 10
38176: PUSH
38177: LD_VAR 0 3
38181: PUSH
38182: LD_VAR 0 4
38186: PLUS
38187: ST_TO_ADDR
// for _x = min_x to max_x do
38188: LD_ADDR_VAR 0 11
38192: PUSH
38193: DOUBLE
38194: LD_VAR 0 7
38198: DEC
38199: ST_TO_ADDR
38200: LD_VAR 0 9
38204: PUSH
38205: FOR_TO
38206: IFFALSE 38325
// for _y = min_y to max_y do
38208: LD_ADDR_VAR 0 12
38212: PUSH
38213: DOUBLE
38214: LD_VAR 0 8
38218: DEC
38219: ST_TO_ADDR
38220: LD_VAR 0 10
38224: PUSH
38225: FOR_TO
38226: IFFALSE 38321
// begin if not ValidHex ( _x , _y ) then
38228: LD_VAR 0 11
38232: PPUSH
38233: LD_VAR 0 12
38237: PPUSH
38238: CALL_OW 488
38242: NOT
38243: IFFALSE 38247
// continue ;
38245: GO 38225
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38247: LD_VAR 0 11
38251: PPUSH
38252: LD_VAR 0 12
38256: PPUSH
38257: CALL_OW 351
38261: IFFALSE 38279
38263: PUSH
38264: LD_VAR 0 11
38268: PPUSH
38269: LD_VAR 0 12
38273: PPUSH
38274: CALL_OW 554
38278: AND
38279: IFFALSE 38319
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38281: LD_ADDR_VAR 0 13
38285: PUSH
38286: LD_VAR 0 13
38290: PPUSH
38291: LD_VAR 0 13
38295: PUSH
38296: LD_INT 1
38298: PLUS
38299: PPUSH
38300: LD_VAR 0 11
38304: PUSH
38305: LD_VAR 0 12
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PPUSH
38314: CALL_OW 2
38318: ST_TO_ADDR
// end ;
38319: GO 38225
38321: POP
38322: POP
38323: GO 38205
38325: POP
38326: POP
// if not list then
38327: LD_VAR 0 13
38331: NOT
38332: IFFALSE 38336
// exit ;
38334: GO 38407
// for i in list do
38336: LD_ADDR_VAR 0 6
38340: PUSH
38341: LD_VAR 0 13
38345: PUSH
38346: FOR_IN
38347: IFFALSE 38405
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38349: LD_VAR 0 1
38353: PPUSH
38354: LD_STRING M
38356: PUSH
38357: LD_VAR 0 6
38361: PUSH
38362: LD_INT 1
38364: ARRAY
38365: PUSH
38366: LD_VAR 0 6
38370: PUSH
38371: LD_INT 2
38373: ARRAY
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: PPUSH
38399: CALL_OW 447
38403: GO 38346
38405: POP
38406: POP
// end ;
38407: LD_VAR 0 5
38411: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38412: LD_INT 0
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 302
38433: NOT
38434: IFTRUE 38453
38436: PUSH
38437: LD_VAR 0 2
38441: PPUSH
38442: LD_VAR 0 3
38446: PPUSH
38447: CALL_OW 488
38451: NOT
38452: OR
38453: IFTRUE 38462
38455: PUSH
38456: LD_VAR 0 4
38460: NOT
38461: OR
38462: IFFALSE 38466
// exit ;
38464: GO 38983
// list := [ ] ;
38466: LD_ADDR_VAR 0 13
38470: PUSH
38471: EMPTY
38472: ST_TO_ADDR
// if x - r < 0 then
38473: LD_VAR 0 2
38477: PUSH
38478: LD_VAR 0 4
38482: MINUS
38483: PUSH
38484: LD_INT 0
38486: LESS
38487: IFFALSE 38499
// min_x := 0 else
38489: LD_ADDR_VAR 0 7
38493: PUSH
38494: LD_INT 0
38496: ST_TO_ADDR
38497: GO 38515
// min_x := x - r ;
38499: LD_ADDR_VAR 0 7
38503: PUSH
38504: LD_VAR 0 2
38508: PUSH
38509: LD_VAR 0 4
38513: MINUS
38514: ST_TO_ADDR
// if y - r < 0 then
38515: LD_VAR 0 3
38519: PUSH
38520: LD_VAR 0 4
38524: MINUS
38525: PUSH
38526: LD_INT 0
38528: LESS
38529: IFFALSE 38541
// min_y := 0 else
38531: LD_ADDR_VAR 0 8
38535: PUSH
38536: LD_INT 0
38538: ST_TO_ADDR
38539: GO 38557
// min_y := y - r ;
38541: LD_ADDR_VAR 0 8
38545: PUSH
38546: LD_VAR 0 3
38550: PUSH
38551: LD_VAR 0 4
38555: MINUS
38556: ST_TO_ADDR
// max_x := x + r ;
38557: LD_ADDR_VAR 0 9
38561: PUSH
38562: LD_VAR 0 2
38566: PUSH
38567: LD_VAR 0 4
38571: PLUS
38572: ST_TO_ADDR
// max_y := y + r ;
38573: LD_ADDR_VAR 0 10
38577: PUSH
38578: LD_VAR 0 3
38582: PUSH
38583: LD_VAR 0 4
38587: PLUS
38588: ST_TO_ADDR
// for _x = min_x to max_x do
38589: LD_ADDR_VAR 0 11
38593: PUSH
38594: DOUBLE
38595: LD_VAR 0 7
38599: DEC
38600: ST_TO_ADDR
38601: LD_VAR 0 9
38605: PUSH
38606: FOR_TO
38607: IFFALSE 38726
// for _y = min_y to max_y do
38609: LD_ADDR_VAR 0 12
38613: PUSH
38614: DOUBLE
38615: LD_VAR 0 8
38619: DEC
38620: ST_TO_ADDR
38621: LD_VAR 0 10
38625: PUSH
38626: FOR_TO
38627: IFFALSE 38722
// begin if not ValidHex ( _x , _y ) then
38629: LD_VAR 0 11
38633: PPUSH
38634: LD_VAR 0 12
38638: PPUSH
38639: CALL_OW 488
38643: NOT
38644: IFFALSE 38648
// continue ;
38646: GO 38626
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38648: LD_VAR 0 11
38652: PPUSH
38653: LD_VAR 0 12
38657: PPUSH
38658: CALL_OW 351
38662: IFFALSE 38680
38664: PUSH
38665: LD_VAR 0 11
38669: PPUSH
38670: LD_VAR 0 12
38674: PPUSH
38675: CALL_OW 554
38679: AND
38680: IFFALSE 38720
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38682: LD_ADDR_VAR 0 13
38686: PUSH
38687: LD_VAR 0 13
38691: PPUSH
38692: LD_VAR 0 13
38696: PUSH
38697: LD_INT 1
38699: PLUS
38700: PPUSH
38701: LD_VAR 0 11
38705: PUSH
38706: LD_VAR 0 12
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PPUSH
38715: CALL_OW 2
38719: ST_TO_ADDR
// end ;
38720: GO 38626
38722: POP
38723: POP
38724: GO 38606
38726: POP
38727: POP
// if not list then
38728: LD_VAR 0 13
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 38983
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38737: LD_ADDR_VAR 0 13
38741: PUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: LD_VAR 0 13
38751: PPUSH
38752: LD_INT 1
38754: PPUSH
38755: LD_INT 1
38757: PPUSH
38758: CALL 48750 0 4
38762: ST_TO_ADDR
// ComStop ( flame ) ;
38763: LD_VAR 0 1
38767: PPUSH
38768: CALL_OW 141
// for i in list do
38772: LD_ADDR_VAR 0 6
38776: PUSH
38777: LD_VAR 0 13
38781: PUSH
38782: FOR_IN
38783: IFFALSE 38814
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38785: LD_VAR 0 1
38789: PPUSH
38790: LD_VAR 0 6
38794: PUSH
38795: LD_INT 1
38797: ARRAY
38798: PPUSH
38799: LD_VAR 0 6
38803: PUSH
38804: LD_INT 2
38806: ARRAY
38807: PPUSH
38808: CALL_OW 176
38812: GO 38782
38814: POP
38815: POP
// repeat wait ( 0 0$1 ) ;
38816: LD_INT 35
38818: PPUSH
38819: CALL_OW 67
// task := GetTaskList ( flame ) ;
38823: LD_ADDR_VAR 0 14
38827: PUSH
38828: LD_VAR 0 1
38832: PPUSH
38833: CALL_OW 437
38837: ST_TO_ADDR
// if not task then
38838: LD_VAR 0 14
38842: NOT
38843: IFFALSE 38847
// exit ;
38845: GO 38983
// if task [ 1 ] [ 1 ] <> | then
38847: LD_VAR 0 14
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: PUSH
38856: LD_INT 1
38858: ARRAY
38859: PUSH
38860: LD_STRING |
38862: NONEQUAL
38863: IFFALSE 38867
// exit ;
38865: GO 38983
// _x := task [ 1 ] [ 2 ] ;
38867: LD_ADDR_VAR 0 11
38871: PUSH
38872: LD_VAR 0 14
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PUSH
38881: LD_INT 2
38883: ARRAY
38884: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38885: LD_ADDR_VAR 0 12
38889: PUSH
38890: LD_VAR 0 14
38894: PUSH
38895: LD_INT 1
38897: ARRAY
38898: PUSH
38899: LD_INT 3
38901: ARRAY
38902: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38903: LD_VAR 0 11
38907: PPUSH
38908: LD_VAR 0 12
38912: PPUSH
38913: CALL_OW 351
38917: NOT
38918: IFTRUE 38937
38920: PUSH
38921: LD_VAR 0 11
38925: PPUSH
38926: LD_VAR 0 12
38930: PPUSH
38931: CALL_OW 554
38935: NOT
38936: OR
38937: IFFALSE 38971
// begin task := Delete ( task , 1 ) ;
38939: LD_ADDR_VAR 0 14
38943: PUSH
38944: LD_VAR 0 14
38948: PPUSH
38949: LD_INT 1
38951: PPUSH
38952: CALL_OW 3
38956: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38957: LD_VAR 0 1
38961: PPUSH
38962: LD_VAR 0 14
38966: PPUSH
38967: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 314
38980: NOT
38981: IFFALSE 38816
// end ;
38983: LD_VAR 0 5
38987: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38988: LD_EXP 100
38992: NOT
38993: IFFALSE 39043
38995: GO 38997
38997: DISABLE
// begin initHack := true ;
38998: LD_ADDR_EXP 100
39002: PUSH
39003: LD_INT 1
39005: ST_TO_ADDR
// hackTanks := [ ] ;
39006: LD_ADDR_EXP 101
39010: PUSH
39011: EMPTY
39012: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39013: LD_ADDR_EXP 102
39017: PUSH
39018: EMPTY
39019: ST_TO_ADDR
// hackLimit := 3 ;
39020: LD_ADDR_EXP 103
39024: PUSH
39025: LD_INT 3
39027: ST_TO_ADDR
// hackDist := 12 ;
39028: LD_ADDR_EXP 104
39032: PUSH
39033: LD_INT 12
39035: ST_TO_ADDR
// hackCounter := [ ] ;
39036: LD_ADDR_EXP 105
39040: PUSH
39041: EMPTY
39042: ST_TO_ADDR
// end ;
39043: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39044: LD_EXP 100
39048: IFFALSE 39066
39050: PUSH
39051: LD_INT 34
39053: PUSH
39054: LD_INT 99
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PPUSH
39061: CALL_OW 69
39065: AND
39066: IFFALSE 39319
39068: GO 39070
39070: DISABLE
39071: LD_INT 0
39073: PPUSH
39074: PPUSH
// begin enable ;
39075: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39076: LD_ADDR_VAR 0 1
39080: PUSH
39081: LD_INT 34
39083: PUSH
39084: LD_INT 99
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PPUSH
39091: CALL_OW 69
39095: PUSH
39096: FOR_IN
39097: IFFALSE 39317
// begin if not i in hackTanks then
39099: LD_VAR 0 1
39103: PUSH
39104: LD_EXP 101
39108: IN
39109: NOT
39110: IFFALSE 39193
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39112: LD_ADDR_EXP 101
39116: PUSH
39117: LD_EXP 101
39121: PPUSH
39122: LD_EXP 101
39126: PUSH
39127: LD_INT 1
39129: PLUS
39130: PPUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 1
39140: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39141: LD_ADDR_EXP 102
39145: PUSH
39146: LD_EXP 102
39150: PPUSH
39151: LD_EXP 102
39155: PUSH
39156: LD_INT 1
39158: PLUS
39159: PPUSH
39160: EMPTY
39161: PPUSH
39162: CALL_OW 1
39166: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39167: LD_ADDR_EXP 105
39171: PUSH
39172: LD_EXP 105
39176: PPUSH
39177: LD_EXP 105
39181: PUSH
39182: LD_INT 1
39184: PLUS
39185: PPUSH
39186: EMPTY
39187: PPUSH
39188: CALL_OW 1
39192: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39193: LD_VAR 0 1
39197: PPUSH
39198: CALL_OW 302
39202: NOT
39203: IFFALSE 39216
// begin HackUnlinkAll ( i ) ;
39205: LD_VAR 0 1
39209: PPUSH
39210: CALL 39322 0 1
// continue ;
39214: GO 39096
// end ; HackCheckCapturedStatus ( i ) ;
39216: LD_VAR 0 1
39220: PPUSH
39221: CALL 39767 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39225: LD_ADDR_VAR 0 2
39229: PUSH
39230: LD_INT 81
39232: PUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 255
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 33
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 91
39259: PUSH
39260: LD_VAR 0 1
39264: PUSH
39265: LD_EXP 104
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 50
39277: PUSH
39278: EMPTY
39279: LIST
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: PPUSH
39287: CALL_OW 69
39291: ST_TO_ADDR
// if not tmp then
39292: LD_VAR 0 2
39296: NOT
39297: IFFALSE 39301
// continue ;
39299: GO 39096
// HackLink ( i , tmp ) ;
39301: LD_VAR 0 1
39305: PPUSH
39306: LD_VAR 0 2
39310: PPUSH
39311: CALL 39458 0 2
// end ;
39315: GO 39096
39317: POP
39318: POP
// end ;
39319: PPOPN 2
39321: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39322: LD_INT 0
39324: PPUSH
39325: PPUSH
39326: PPUSH
// if not hack in hackTanks then
39327: LD_VAR 0 1
39331: PUSH
39332: LD_EXP 101
39336: IN
39337: NOT
39338: IFFALSE 39342
// exit ;
39340: GO 39453
// index := GetElementIndex ( hackTanks , hack ) ;
39342: LD_ADDR_VAR 0 4
39346: PUSH
39347: LD_EXP 101
39351: PPUSH
39352: LD_VAR 0 1
39356: PPUSH
39357: CALL 48045 0 2
39361: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39362: LD_EXP 102
39366: PUSH
39367: LD_VAR 0 4
39371: ARRAY
39372: IFFALSE 39453
// begin for i in hackTanksCaptured [ index ] do
39374: LD_ADDR_VAR 0 3
39378: PUSH
39379: LD_EXP 102
39383: PUSH
39384: LD_VAR 0 4
39388: ARRAY
39389: PUSH
39390: FOR_IN
39391: IFFALSE 39417
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39393: LD_VAR 0 3
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: PPUSH
39402: LD_VAR 0 3
39406: PUSH
39407: LD_INT 2
39409: ARRAY
39410: PPUSH
39411: CALL_OW 235
39415: GO 39390
39417: POP
39418: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39419: LD_ADDR_EXP 102
39423: PUSH
39424: LD_EXP 102
39428: PPUSH
39429: LD_VAR 0 4
39433: PPUSH
39434: EMPTY
39435: PPUSH
39436: CALL_OW 1
39440: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39441: LD_VAR 0 1
39445: PPUSH
39446: LD_INT 0
39448: PPUSH
39449: CALL_OW 505
// end ; end ;
39453: LD_VAR 0 2
39457: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39458: LD_INT 0
39460: PPUSH
39461: PPUSH
39462: PPUSH
// if not hack in hackTanks or not vehicles then
39463: LD_VAR 0 1
39467: PUSH
39468: LD_EXP 101
39472: IN
39473: NOT
39474: IFTRUE 39483
39476: PUSH
39477: LD_VAR 0 2
39481: NOT
39482: OR
39483: IFFALSE 39487
// exit ;
39485: GO 39762
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39487: LD_ADDR_VAR 0 2
39491: PUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: LD_VAR 0 2
39501: PPUSH
39502: LD_INT 1
39504: PPUSH
39505: LD_INT 1
39507: PPUSH
39508: CALL 48697 0 4
39512: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39513: LD_ADDR_VAR 0 5
39517: PUSH
39518: LD_EXP 101
39522: PPUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL 48045 0 2
39532: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39533: LD_EXP 102
39537: PUSH
39538: LD_VAR 0 5
39542: ARRAY
39543: PUSH
39544: LD_EXP 103
39548: LESS
39549: IFFALSE 39738
// begin for i := 1 to vehicles do
39551: LD_ADDR_VAR 0 4
39555: PUSH
39556: DOUBLE
39557: LD_INT 1
39559: DEC
39560: ST_TO_ADDR
39561: LD_VAR 0 2
39565: PUSH
39566: FOR_TO
39567: IFFALSE 39736
// begin if hackTanksCaptured [ index ] = hackLimit then
39569: LD_EXP 102
39573: PUSH
39574: LD_VAR 0 5
39578: ARRAY
39579: PUSH
39580: LD_EXP 103
39584: EQUAL
39585: IFFALSE 39589
// break ;
39587: GO 39736
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39589: LD_ADDR_EXP 105
39593: PUSH
39594: LD_EXP 105
39598: PPUSH
39599: LD_VAR 0 5
39603: PPUSH
39604: LD_EXP 105
39608: PUSH
39609: LD_VAR 0 5
39613: ARRAY
39614: PUSH
39615: LD_INT 1
39617: PLUS
39618: PPUSH
39619: CALL_OW 1
39623: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39624: LD_ADDR_EXP 102
39628: PUSH
39629: LD_EXP 102
39633: PPUSH
39634: LD_VAR 0 5
39638: PUSH
39639: LD_EXP 102
39643: PUSH
39644: LD_VAR 0 5
39648: ARRAY
39649: PUSH
39650: LD_INT 1
39652: PLUS
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PPUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_VAR 0 4
39667: ARRAY
39668: PUSH
39669: LD_VAR 0 2
39673: PUSH
39674: LD_VAR 0 4
39678: ARRAY
39679: PPUSH
39680: CALL_OW 255
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PPUSH
39689: CALL 48262 0 3
39693: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39694: LD_VAR 0 2
39698: PUSH
39699: LD_VAR 0 4
39703: ARRAY
39704: PPUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 255
39714: PPUSH
39715: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39719: LD_VAR 0 2
39723: PUSH
39724: LD_VAR 0 4
39728: ARRAY
39729: PPUSH
39730: CALL_OW 141
// end ;
39734: GO 39566
39736: POP
39737: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39738: LD_VAR 0 1
39742: PPUSH
39743: LD_EXP 102
39747: PUSH
39748: LD_VAR 0 5
39752: ARRAY
39753: PUSH
39754: LD_INT 0
39756: PLUS
39757: PPUSH
39758: CALL_OW 505
// end ;
39762: LD_VAR 0 3
39766: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39767: LD_INT 0
39769: PPUSH
39770: PPUSH
39771: PPUSH
39772: PPUSH
// if not hack in hackTanks then
39773: LD_VAR 0 1
39777: PUSH
39778: LD_EXP 101
39782: IN
39783: NOT
39784: IFFALSE 39788
// exit ;
39786: GO 40032
// index := GetElementIndex ( hackTanks , hack ) ;
39788: LD_ADDR_VAR 0 4
39792: PUSH
39793: LD_EXP 101
39797: PPUSH
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL 48045 0 2
39807: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: DOUBLE
39814: LD_EXP 102
39818: PUSH
39819: LD_VAR 0 4
39823: ARRAY
39824: INC
39825: ST_TO_ADDR
39826: LD_INT 1
39828: PUSH
39829: FOR_DOWNTO
39830: IFFALSE 40006
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39832: LD_ADDR_VAR 0 5
39836: PUSH
39837: LD_EXP 102
39841: PUSH
39842: LD_VAR 0 4
39846: ARRAY
39847: PUSH
39848: LD_VAR 0 3
39852: ARRAY
39853: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39854: LD_VAR 0 5
39858: PUSH
39859: LD_INT 1
39861: ARRAY
39862: PPUSH
39863: CALL_OW 302
39867: NOT
39868: IFTRUE 39896
39870: PUSH
39871: LD_VAR 0 5
39875: PUSH
39876: LD_INT 1
39878: ARRAY
39879: PPUSH
39880: CALL_OW 255
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 255
39894: NONEQUAL
39895: OR
39896: IFFALSE 40004
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39898: LD_VAR 0 5
39902: PUSH
39903: LD_INT 1
39905: ARRAY
39906: PPUSH
39907: CALL_OW 305
39911: IFFALSE 39939
39913: PUSH
39914: LD_VAR 0 5
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: PPUSH
39923: CALL_OW 255
39927: PUSH
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 255
39937: EQUAL
39938: AND
39939: IFFALSE 39963
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39941: LD_VAR 0 5
39945: PUSH
39946: LD_INT 1
39948: ARRAY
39949: PPUSH
39950: LD_VAR 0 5
39954: PUSH
39955: LD_INT 2
39957: ARRAY
39958: PPUSH
39959: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39963: LD_ADDR_EXP 102
39967: PUSH
39968: LD_EXP 102
39972: PPUSH
39973: LD_VAR 0 4
39977: PPUSH
39978: LD_EXP 102
39982: PUSH
39983: LD_VAR 0 4
39987: ARRAY
39988: PPUSH
39989: LD_VAR 0 3
39993: PPUSH
39994: CALL_OW 3
39998: PPUSH
39999: CALL_OW 1
40003: ST_TO_ADDR
// end ; end ;
40004: GO 39829
40006: POP
40007: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40008: LD_VAR 0 1
40012: PPUSH
40013: LD_EXP 102
40017: PUSH
40018: LD_VAR 0 4
40022: ARRAY
40023: PUSH
40024: LD_INT 0
40026: PLUS
40027: PPUSH
40028: CALL_OW 505
// end ;
40032: LD_VAR 0 2
40036: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40037: LD_INT 0
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
// if not hack in hackTanks then
40043: LD_VAR 0 1
40047: PUSH
40048: LD_EXP 101
40052: IN
40053: NOT
40054: IFFALSE 40058
// exit ;
40056: GO 40143
// index := GetElementIndex ( hackTanks , hack ) ;
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: LD_EXP 101
40067: PPUSH
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL 48045 0 2
40077: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40078: LD_ADDR_VAR 0 4
40082: PUSH
40083: DOUBLE
40084: LD_INT 1
40086: DEC
40087: ST_TO_ADDR
40088: LD_EXP 102
40092: PUSH
40093: LD_VAR 0 5
40097: ARRAY
40098: PUSH
40099: FOR_TO
40100: IFFALSE 40141
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40102: LD_EXP 102
40106: PUSH
40107: LD_VAR 0 5
40111: ARRAY
40112: PUSH
40113: LD_VAR 0 4
40117: ARRAY
40118: PUSH
40119: LD_INT 1
40121: ARRAY
40122: PUSH
40123: LD_VAR 0 2
40127: EQUAL
40128: IFFALSE 40139
// KillUnit ( vehicle ) ;
40130: LD_VAR 0 2
40134: PPUSH
40135: CALL_OW 66
40139: GO 40099
40141: POP
40142: POP
// end ;
40143: LD_VAR 0 3
40147: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
40148: LD_EXP 106
40152: NOT
40153: IFFALSE 40286
40155: GO 40157
40157: DISABLE
40158: LD_INT 0
40160: PPUSH
// begin initMiner := true ;
40161: LD_ADDR_EXP 106
40165: PUSH
40166: LD_INT 1
40168: ST_TO_ADDR
// minersList := [ ] ;
40169: LD_ADDR_EXP 107
40173: PUSH
40174: EMPTY
40175: ST_TO_ADDR
// minerMinesList := [ ] ;
40176: LD_ADDR_EXP 108
40180: PUSH
40181: EMPTY
40182: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
40183: LD_ADDR_EXP 109
40187: PUSH
40188: LD_INT 6
40190: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40191: LD_ADDR_VAR 0 1
40195: PUSH
40196: LD_INT 34
40198: PUSH
40199: LD_INT 81
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PPUSH
40206: CALL_OW 69
40210: PUSH
40211: FOR_IN
40212: IFFALSE 40284
// begin if not i in minersList then
40214: LD_VAR 0 1
40218: PUSH
40219: LD_EXP 107
40223: IN
40224: NOT
40225: IFFALSE 40282
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40227: LD_ADDR_EXP 107
40231: PUSH
40232: LD_EXP 107
40236: PPUSH
40237: LD_EXP 107
40241: PUSH
40242: LD_INT 1
40244: PLUS
40245: PPUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 1
40255: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40256: LD_ADDR_EXP 108
40260: PUSH
40261: LD_EXP 108
40265: PPUSH
40266: LD_EXP 108
40270: PUSH
40271: LD_INT 1
40273: PLUS
40274: PPUSH
40275: EMPTY
40276: PPUSH
40277: CALL_OW 1
40281: ST_TO_ADDR
// end end ;
40282: GO 40211
40284: POP
40285: POP
// end ;
40286: PPOPN 1
40288: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
40289: LD_EXP 106
40293: IFFALSE 40324
40295: PUSH
40296: LD_EXP 108
40300: PPUSH
40301: CALL 45344 0 1
40305: IFTRUE 40323
40307: PUSH
40308: LD_INT 34
40310: PUSH
40311: LD_INT 81
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PPUSH
40318: CALL_OW 69
40322: OR
40323: AND
40324: IFFALSE 40823
40326: GO 40328
40328: DISABLE
40329: LD_INT 0
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
// begin enable ;
40335: ENABLE
// for i := minerMinesList downto 1 do
40336: LD_ADDR_VAR 0 1
40340: PUSH
40341: DOUBLE
40342: LD_EXP 108
40346: INC
40347: ST_TO_ADDR
40348: LD_INT 1
40350: PUSH
40351: FOR_DOWNTO
40352: IFFALSE 40821
// begin if IsLive ( minersList [ i ] ) then
40354: LD_EXP 107
40358: PUSH
40359: LD_VAR 0 1
40363: ARRAY
40364: PPUSH
40365: CALL_OW 300
40369: IFFALSE 40402
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
40371: LD_EXP 107
40375: PUSH
40376: LD_VAR 0 1
40380: ARRAY
40381: PPUSH
40382: LD_EXP 108
40386: PUSH
40387: LD_VAR 0 1
40391: ARRAY
40392: PPUSH
40393: CALL 45344 0 1
40397: PPUSH
40398: CALL_OW 505
// if not minerMinesList [ i ] then
40402: LD_EXP 108
40406: PUSH
40407: LD_VAR 0 1
40411: ARRAY
40412: NOT
40413: IFFALSE 40417
// continue ;
40415: GO 40351
// for j := minerMinesList [ i ] downto 1 do
40417: LD_ADDR_VAR 0 2
40421: PUSH
40422: DOUBLE
40423: LD_EXP 108
40427: PUSH
40428: LD_VAR 0 1
40432: ARRAY
40433: INC
40434: ST_TO_ADDR
40435: LD_INT 1
40437: PUSH
40438: FOR_DOWNTO
40439: IFFALSE 40817
// begin side := GetSide ( minersList [ i ] ) ;
40441: LD_ADDR_VAR 0 3
40445: PUSH
40446: LD_EXP 107
40450: PUSH
40451: LD_VAR 0 1
40455: ARRAY
40456: PPUSH
40457: CALL_OW 255
40461: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
40462: LD_EXP 107
40466: PUSH
40467: LD_VAR 0 1
40471: ARRAY
40472: PPUSH
40473: CALL_OW 301
40477: IFTRUE 40497
40479: PUSH
40480: LD_EXP 107
40484: PUSH
40485: LD_VAR 0 1
40489: ARRAY
40490: PPUSH
40491: CALL_OW 305
40495: NOT
40496: OR
40497: IFFALSE 40588
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40499: LD_EXP 108
40503: PUSH
40504: LD_VAR 0 1
40508: ARRAY
40509: PUSH
40510: LD_VAR 0 2
40514: ARRAY
40515: PUSH
40516: LD_INT 1
40518: ARRAY
40519: PPUSH
40520: LD_EXP 108
40524: PUSH
40525: LD_VAR 0 1
40529: ARRAY
40530: PUSH
40531: LD_VAR 0 2
40535: ARRAY
40536: PUSH
40537: LD_INT 2
40539: ARRAY
40540: PPUSH
40541: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40545: LD_ADDR_EXP 108
40549: PUSH
40550: LD_EXP 108
40554: PPUSH
40555: LD_VAR 0 1
40559: PPUSH
40560: LD_EXP 108
40564: PUSH
40565: LD_VAR 0 1
40569: ARRAY
40570: PPUSH
40571: LD_VAR 0 2
40575: PPUSH
40576: CALL_OW 3
40580: PPUSH
40581: CALL_OW 1
40585: ST_TO_ADDR
// continue ;
40586: GO 40438
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40588: LD_ADDR_VAR 0 4
40592: PUSH
40593: LD_EXP 108
40597: PUSH
40598: LD_VAR 0 1
40602: ARRAY
40603: PUSH
40604: LD_VAR 0 2
40608: ARRAY
40609: PUSH
40610: LD_INT 1
40612: ARRAY
40613: PPUSH
40614: LD_EXP 108
40618: PUSH
40619: LD_VAR 0 1
40623: ARRAY
40624: PUSH
40625: LD_VAR 0 2
40629: ARRAY
40630: PUSH
40631: LD_INT 2
40633: ARRAY
40634: PPUSH
40635: CALL_OW 428
40639: ST_TO_ADDR
// if not tmp then
40640: LD_VAR 0 4
40644: NOT
40645: IFFALSE 40649
// continue ;
40647: GO 40438
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40649: LD_VAR 0 4
40653: PUSH
40654: LD_INT 81
40656: PUSH
40657: LD_VAR 0 3
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PPUSH
40666: CALL_OW 69
40670: IN
40671: IFFALSE 40721
40673: PUSH
40674: LD_EXP 108
40678: PUSH
40679: LD_VAR 0 1
40683: ARRAY
40684: PUSH
40685: LD_VAR 0 2
40689: ARRAY
40690: PUSH
40691: LD_INT 1
40693: ARRAY
40694: PPUSH
40695: LD_EXP 108
40699: PUSH
40700: LD_VAR 0 1
40704: ARRAY
40705: PUSH
40706: LD_VAR 0 2
40710: ARRAY
40711: PUSH
40712: LD_INT 2
40714: ARRAY
40715: PPUSH
40716: CALL_OW 458
40720: AND
40721: IFFALSE 40815
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40723: LD_EXP 108
40727: PUSH
40728: LD_VAR 0 1
40732: ARRAY
40733: PUSH
40734: LD_VAR 0 2
40738: ARRAY
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: PPUSH
40744: LD_EXP 108
40748: PUSH
40749: LD_VAR 0 1
40753: ARRAY
40754: PUSH
40755: LD_VAR 0 2
40759: ARRAY
40760: PUSH
40761: LD_INT 2
40763: ARRAY
40764: PPUSH
40765: LD_VAR 0 3
40769: PPUSH
40770: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40774: LD_ADDR_EXP 108
40778: PUSH
40779: LD_EXP 108
40783: PPUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: LD_EXP 108
40793: PUSH
40794: LD_VAR 0 1
40798: ARRAY
40799: PPUSH
40800: LD_VAR 0 2
40804: PPUSH
40805: CALL_OW 3
40809: PPUSH
40810: CALL_OW 1
40814: ST_TO_ADDR
// end ; end ;
40815: GO 40438
40817: POP
40818: POP
// end ;
40819: GO 40351
40821: POP
40822: POP
// end ;
40823: PPOPN 4
40825: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
40826: LD_INT 0
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
// result := false ;
40832: LD_ADDR_VAR 0 4
40836: PUSH
40837: LD_INT 0
40839: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40840: LD_VAR 0 1
40844: PPUSH
40845: CALL_OW 264
40849: PUSH
40850: LD_INT 81
40852: EQUAL
40853: NOT
40854: IFFALSE 40858
// exit ;
40856: GO 41228
// side := GetSide ( unit ) ;
40858: LD_ADDR_VAR 0 6
40862: PUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 255
40872: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
40873: LD_ADDR_VAR 0 5
40877: PUSH
40878: LD_EXP 107
40882: PPUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: CALL 48045 0 2
40892: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40893: LD_EXP 108
40897: PUSH
40898: LD_VAR 0 5
40902: ARRAY
40903: PUSH
40904: LD_EXP 109
40908: GREATEREQUAL
40909: IFFALSE 40913
// exit ;
40911: GO 41228
// ComMoveXY ( unit , x , y ) ;
40913: LD_VAR 0 1
40917: PPUSH
40918: LD_VAR 0 2
40922: PPUSH
40923: LD_VAR 0 3
40927: PPUSH
40928: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40932: LD_INT 35
40934: PPUSH
40935: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40939: LD_VAR 0 1
40943: PPUSH
40944: LD_VAR 0 2
40948: PPUSH
40949: LD_VAR 0 3
40953: PPUSH
40954: CALL 80091 0 3
40958: NOT
40959: IFFALSE 40972
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 314
40971: AND
40972: IFFALSE 40976
// exit ;
40974: GO 41228
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40976: LD_VAR 0 2
40980: PPUSH
40981: LD_VAR 0 3
40985: PPUSH
40986: CALL_OW 428
40990: PUSH
40991: LD_VAR 0 1
40995: EQUAL
40996: IFFALSE 41010
40998: PUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: CALL_OW 314
41008: NOT
41009: AND
41010: IFFALSE 40932
// if MineAtPos ( x , y ) then
41012: LD_VAR 0 2
41016: PPUSH
41017: LD_VAR 0 3
41021: PPUSH
41022: CALL_OW 458
41026: IFFALSE 41030
// exit ;
41028: GO 41228
// if your_side = side then
41030: LD_OWVAR 2
41034: PUSH
41035: LD_VAR 0 6
41039: EQUAL
41040: IFFALSE 41059
// PlaySoundXY ( x , y , PlantMine ) ;
41042: LD_VAR 0 2
41046: PPUSH
41047: LD_VAR 0 3
41051: PPUSH
41052: LD_STRING PlantMine
41054: PPUSH
41055: CALL_OW 366
// repeat wait ( 1 ) ;
41059: LD_INT 1
41061: PPUSH
41062: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
41066: LD_VAR 0 2
41070: PPUSH
41071: LD_VAR 0 3
41075: PPUSH
41076: LD_VAR 0 6
41080: PPUSH
41081: LD_INT 0
41083: PPUSH
41084: CALL_OW 454
41088: IFFALSE 41059
// if MineAtPos ( x , y ) then
41090: LD_VAR 0 2
41094: PPUSH
41095: LD_VAR 0 3
41099: PPUSH
41100: CALL_OW 458
41104: IFFALSE 41220
// begin for i in minerMinesList [ index ] do
41106: LD_ADDR_VAR 0 7
41110: PUSH
41111: LD_EXP 108
41115: PUSH
41116: LD_VAR 0 5
41120: ARRAY
41121: PUSH
41122: FOR_IN
41123: IFFALSE 41165
// if i [ 1 ] = x and i [ 2 ] = y then
41125: LD_VAR 0 7
41129: PUSH
41130: LD_INT 1
41132: ARRAY
41133: PUSH
41134: LD_VAR 0 2
41138: EQUAL
41139: IFFALSE 41157
41141: PUSH
41142: LD_VAR 0 7
41146: PUSH
41147: LD_INT 2
41149: ARRAY
41150: PUSH
41151: LD_VAR 0 3
41155: EQUAL
41156: AND
41157: IFFALSE 41163
// exit ;
41159: POP
41160: POP
41161: GO 41228
41163: GO 41122
41165: POP
41166: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41167: LD_ADDR_EXP 108
41171: PUSH
41172: LD_EXP 108
41176: PPUSH
41177: LD_VAR 0 5
41181: PUSH
41182: LD_EXP 108
41186: PUSH
41187: LD_VAR 0 5
41191: ARRAY
41192: PUSH
41193: LD_INT 1
41195: PLUS
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PPUSH
41201: LD_VAR 0 2
41205: PUSH
41206: LD_VAR 0 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PPUSH
41215: CALL 48262 0 3
41219: ST_TO_ADDR
// end ; result := true ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_INT 1
41227: ST_TO_ADDR
// end ;
41228: LD_VAR 0 4
41232: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
41237: PPUSH
// if not unit in minersList then
41238: LD_VAR 0 1
41242: PUSH
41243: LD_EXP 107
41247: IN
41248: NOT
41249: IFFALSE 41253
// exit ;
41251: GO 41460
// index := GetElementIndex ( minersList , unit ) ;
41253: LD_ADDR_VAR 0 6
41257: PUSH
41258: LD_EXP 107
41262: PPUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: CALL 48045 0 2
41272: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41273: LD_ADDR_VAR 0 5
41277: PUSH
41278: DOUBLE
41279: LD_EXP 108
41283: PUSH
41284: LD_VAR 0 6
41288: ARRAY
41289: INC
41290: ST_TO_ADDR
41291: LD_INT 1
41293: PUSH
41294: FOR_DOWNTO
41295: IFFALSE 41458
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41297: LD_EXP 108
41301: PUSH
41302: LD_VAR 0 6
41306: ARRAY
41307: PUSH
41308: LD_VAR 0 5
41312: ARRAY
41313: PUSH
41314: LD_INT 1
41316: ARRAY
41317: PPUSH
41318: LD_EXP 108
41322: PUSH
41323: LD_VAR 0 6
41327: ARRAY
41328: PUSH
41329: LD_VAR 0 5
41333: ARRAY
41334: PUSH
41335: LD_INT 2
41337: ARRAY
41338: PPUSH
41339: LD_VAR 0 2
41343: PPUSH
41344: LD_VAR 0 3
41348: PPUSH
41349: CALL_OW 298
41353: PUSH
41354: LD_INT 6
41356: LESS
41357: IFFALSE 41456
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41359: LD_EXP 108
41363: PUSH
41364: LD_VAR 0 6
41368: ARRAY
41369: PUSH
41370: LD_VAR 0 5
41374: ARRAY
41375: PUSH
41376: LD_INT 1
41378: ARRAY
41379: PPUSH
41380: LD_EXP 108
41384: PUSH
41385: LD_VAR 0 6
41389: ARRAY
41390: PUSH
41391: LD_VAR 0 5
41395: ARRAY
41396: PUSH
41397: LD_INT 2
41399: ARRAY
41400: PPUSH
41401: LD_VAR 0 1
41405: PPUSH
41406: CALL_OW 255
41410: PPUSH
41411: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41415: LD_ADDR_EXP 108
41419: PUSH
41420: LD_EXP 108
41424: PPUSH
41425: LD_VAR 0 6
41429: PPUSH
41430: LD_EXP 108
41434: PUSH
41435: LD_VAR 0 6
41439: ARRAY
41440: PPUSH
41441: LD_VAR 0 5
41445: PPUSH
41446: CALL_OW 3
41450: PPUSH
41451: CALL_OW 1
41455: ST_TO_ADDR
// end ; end ;
41456: GO 41294
41458: POP
41459: POP
// end ;
41460: LD_VAR 0 4
41464: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41465: LD_INT 0
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41476: LD_VAR 0 1
41480: PPUSH
41481: CALL_OW 264
41485: PUSH
41486: LD_INT 81
41488: EQUAL
41489: NOT
41490: IFTRUE 41505
41492: PUSH
41493: LD_VAR 0 1
41497: PUSH
41498: LD_EXP 107
41502: IN
41503: NOT
41504: OR
41505: IFFALSE 41509
// exit ;
41507: GO 41835
// index := GetElementIndex ( minersList , unit ) ;
41509: LD_ADDR_VAR 0 6
41513: PUSH
41514: LD_EXP 107
41518: PPUSH
41519: LD_VAR 0 1
41523: PPUSH
41524: CALL 48045 0 2
41528: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41529: LD_ADDR_VAR 0 8
41533: PUSH
41534: LD_EXP 109
41538: PUSH
41539: LD_EXP 108
41543: PUSH
41544: LD_VAR 0 6
41548: ARRAY
41549: MINUS
41550: ST_TO_ADDR
// if not minesFreeAmount then
41551: LD_VAR 0 8
41555: NOT
41556: IFFALSE 41560
// exit ;
41558: GO 41835
// tmp := [ ] ;
41560: LD_ADDR_VAR 0 7
41564: PUSH
41565: EMPTY
41566: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41567: LD_ADDR_VAR 0 5
41571: PUSH
41572: DOUBLE
41573: LD_INT 1
41575: DEC
41576: ST_TO_ADDR
41577: LD_VAR 0 8
41581: PUSH
41582: FOR_TO
41583: IFFALSE 41782
// begin _d := rand ( 0 , 5 ) ;
41585: LD_ADDR_VAR 0 11
41589: PUSH
41590: LD_INT 0
41592: PPUSH
41593: LD_INT 5
41595: PPUSH
41596: CALL_OW 12
41600: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41601: LD_ADDR_VAR 0 12
41605: PUSH
41606: LD_INT 2
41608: PPUSH
41609: LD_INT 6
41611: PPUSH
41612: CALL_OW 12
41616: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41617: LD_ADDR_VAR 0 9
41621: PUSH
41622: LD_VAR 0 2
41626: PPUSH
41627: LD_VAR 0 11
41631: PPUSH
41632: LD_VAR 0 12
41636: PPUSH
41637: CALL_OW 272
41641: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41642: LD_ADDR_VAR 0 10
41646: PUSH
41647: LD_VAR 0 3
41651: PPUSH
41652: LD_VAR 0 11
41656: PPUSH
41657: LD_VAR 0 12
41661: PPUSH
41662: CALL_OW 273
41666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41667: LD_VAR 0 9
41671: PPUSH
41672: LD_VAR 0 10
41676: PPUSH
41677: CALL_OW 488
41681: IFFALSE 41705
41683: PUSH
41684: LD_VAR 0 9
41688: PUSH
41689: LD_VAR 0 10
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_VAR 0 7
41702: IN
41703: NOT
41704: AND
41705: IFFALSE 41724
41707: PUSH
41708: LD_VAR 0 9
41712: PPUSH
41713: LD_VAR 0 10
41717: PPUSH
41718: CALL_OW 458
41722: NOT
41723: AND
41724: IFFALSE 41766
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41726: LD_ADDR_VAR 0 7
41730: PUSH
41731: LD_VAR 0 7
41735: PPUSH
41736: LD_VAR 0 7
41740: PUSH
41741: LD_INT 1
41743: PLUS
41744: PPUSH
41745: LD_VAR 0 9
41749: PUSH
41750: LD_VAR 0 10
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PPUSH
41759: CALL_OW 1
41763: ST_TO_ADDR
41764: GO 41780
// i := i - 1 ;
41766: LD_ADDR_VAR 0 5
41770: PUSH
41771: LD_VAR 0 5
41775: PUSH
41776: LD_INT 1
41778: MINUS
41779: ST_TO_ADDR
// end ;
41780: GO 41582
41782: POP
41783: POP
// for i in tmp do
41784: LD_ADDR_VAR 0 5
41788: PUSH
41789: LD_VAR 0 7
41793: PUSH
41794: FOR_IN
41795: IFFALSE 41833
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41797: LD_VAR 0 1
41801: PPUSH
41802: LD_VAR 0 5
41806: PUSH
41807: LD_INT 1
41809: ARRAY
41810: PPUSH
41811: LD_VAR 0 5
41815: PUSH
41816: LD_INT 2
41818: ARRAY
41819: PPUSH
41820: CALL 40826 0 3
41824: NOT
41825: IFFALSE 41831
// exit ;
41827: POP
41828: POP
41829: GO 41835
41831: GO 41794
41833: POP
41834: POP
// end ;
41835: LD_VAR 0 4
41839: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41840: LD_INT 0
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
// if GetClass ( unit ) <> class_sniper then
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 257
41860: PUSH
41861: LD_INT 5
41863: NONEQUAL
41864: IFFALSE 41868
// exit ;
41866: GO 42338
// dist := 8 ;
41868: LD_ADDR_VAR 0 5
41872: PUSH
41873: LD_INT 8
41875: ST_TO_ADDR
// viewRange := 12 ;
41876: LD_ADDR_VAR 0 8
41880: PUSH
41881: LD_INT 12
41883: ST_TO_ADDR
// side := GetSide ( unit ) ;
41884: LD_ADDR_VAR 0 6
41888: PUSH
41889: LD_VAR 0 1
41893: PPUSH
41894: CALL_OW 255
41898: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41899: LD_INT 61
41901: PPUSH
41902: LD_VAR 0 6
41906: PPUSH
41907: CALL_OW 321
41911: PUSH
41912: LD_INT 2
41914: EQUAL
41915: IFFALSE 41925
// viewRange := 16 ;
41917: LD_ADDR_VAR 0 8
41921: PUSH
41922: LD_INT 16
41924: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41925: LD_VAR 0 1
41929: PPUSH
41930: LD_VAR 0 2
41934: PPUSH
41935: LD_VAR 0 3
41939: PPUSH
41940: CALL_OW 297
41944: PUSH
41945: LD_VAR 0 5
41949: GREATER
41950: IFFALSE 42029
// begin ComMoveXY ( unit , x , y ) ;
41952: LD_VAR 0 1
41956: PPUSH
41957: LD_VAR 0 2
41961: PPUSH
41962: LD_VAR 0 3
41966: PPUSH
41967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41971: LD_INT 35
41973: PPUSH
41974: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41978: LD_VAR 0 1
41982: PPUSH
41983: LD_VAR 0 2
41987: PPUSH
41988: LD_VAR 0 3
41992: PPUSH
41993: CALL 80091 0 3
41997: NOT
41998: IFFALSE 42002
// exit ;
42000: GO 42338
// until GetDistUnitXY ( unit , x , y ) < dist ;
42002: LD_VAR 0 1
42006: PPUSH
42007: LD_VAR 0 2
42011: PPUSH
42012: LD_VAR 0 3
42016: PPUSH
42017: CALL_OW 297
42021: PUSH
42022: LD_VAR 0 5
42026: LESS
42027: IFFALSE 41971
// end ; ComTurnXY ( unit , x , y ) ;
42029: LD_VAR 0 1
42033: PPUSH
42034: LD_VAR 0 2
42038: PPUSH
42039: LD_VAR 0 3
42043: PPUSH
42044: CALL_OW 118
// repeat if Multiplayer then
42048: LD_OWVAR 4
42052: IFFALSE 42063
// wait ( 35 ) else
42054: LD_INT 35
42056: PPUSH
42057: CALL_OW 67
42061: GO 42070
// wait ( 5 ) ;
42063: LD_INT 5
42065: PPUSH
42066: CALL_OW 67
// _d := GetDir ( unit ) ;
42070: LD_ADDR_VAR 0 11
42074: PUSH
42075: LD_VAR 0 1
42079: PPUSH
42080: CALL_OW 254
42084: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
42085: LD_ADDR_VAR 0 7
42089: PUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: CALL_OW 250
42099: PPUSH
42100: LD_VAR 0 1
42104: PPUSH
42105: CALL_OW 251
42109: PPUSH
42110: LD_VAR 0 2
42114: PPUSH
42115: LD_VAR 0 3
42119: PPUSH
42120: CALL 82727 0 4
42124: ST_TO_ADDR
// until dir = _d ;
42125: LD_VAR 0 7
42129: PUSH
42130: LD_VAR 0 11
42134: EQUAL
42135: IFFALSE 42048
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
42137: LD_ADDR_VAR 0 9
42141: PUSH
42142: LD_VAR 0 1
42146: PPUSH
42147: CALL_OW 250
42151: PPUSH
42152: LD_VAR 0 7
42156: PPUSH
42157: LD_VAR 0 5
42161: PPUSH
42162: CALL_OW 272
42166: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
42167: LD_ADDR_VAR 0 10
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: CALL_OW 251
42181: PPUSH
42182: LD_VAR 0 7
42186: PPUSH
42187: LD_VAR 0 5
42191: PPUSH
42192: CALL_OW 273
42196: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42197: LD_VAR 0 9
42201: PPUSH
42202: LD_VAR 0 10
42206: PPUSH
42207: CALL_OW 488
42211: NOT
42212: IFFALSE 42216
// exit ;
42214: GO 42338
// ComAnimCustom ( unit , 1 ) ;
42216: LD_VAR 0 1
42220: PPUSH
42221: LD_INT 1
42223: PPUSH
42224: CALL_OW 592
// p := 0 ;
42228: LD_ADDR_VAR 0 12
42232: PUSH
42233: LD_INT 0
42235: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42236: LD_VAR 0 9
42240: PPUSH
42241: LD_VAR 0 10
42245: PPUSH
42246: LD_VAR 0 6
42250: PPUSH
42251: LD_VAR 0 8
42255: PPUSH
42256: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
42260: LD_INT 35
42262: PPUSH
42263: CALL_OW 67
// p := Inc ( p ) ;
42267: LD_ADDR_VAR 0 12
42271: PUSH
42272: LD_VAR 0 12
42276: PPUSH
42277: CALL 82683 0 1
42281: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
42282: LD_VAR 0 12
42286: PUSH
42287: LD_INT 3
42289: EQUAL
42290: IFTRUE 42304
42292: PUSH
42293: LD_VAR 0 1
42297: PPUSH
42298: CALL_OW 302
42302: NOT
42303: OR
42304: IFTRUE 42317
42306: PUSH
42307: LD_VAR 0 1
42311: PPUSH
42312: CALL_OW 301
42316: OR
42317: IFFALSE 42260
// RemoveSeeing ( _x , _y , side ) ;
42319: LD_VAR 0 9
42323: PPUSH
42324: LD_VAR 0 10
42328: PPUSH
42329: LD_VAR 0 6
42333: PPUSH
42334: CALL_OW 331
// end ;
42338: LD_VAR 0 4
42342: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
42343: LD_INT 0
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
// if not unit then
42356: LD_VAR 0 1
42360: NOT
42361: IFFALSE 42365
// exit ;
42363: GO 42636
// side := GetSide ( unit ) ;
42365: LD_ADDR_VAR 0 3
42369: PUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 255
42379: ST_TO_ADDR
// x := GetX ( unit ) ;
42380: LD_ADDR_VAR 0 5
42384: PUSH
42385: LD_VAR 0 1
42389: PPUSH
42390: CALL_OW 250
42394: ST_TO_ADDR
// y := GetY ( unit ) ;
42395: LD_ADDR_VAR 0 6
42399: PUSH
42400: LD_VAR 0 1
42404: PPUSH
42405: CALL_OW 251
42409: ST_TO_ADDR
// r := 8 ;
42410: LD_ADDR_VAR 0 4
42414: PUSH
42415: LD_INT 8
42417: ST_TO_ADDR
// if x - r < 0 then
42418: LD_VAR 0 5
42422: PUSH
42423: LD_VAR 0 4
42427: MINUS
42428: PUSH
42429: LD_INT 0
42431: LESS
42432: IFFALSE 42444
// min_x := 0 else
42434: LD_ADDR_VAR 0 7
42438: PUSH
42439: LD_INT 0
42441: ST_TO_ADDR
42442: GO 42460
// min_x := x - r ;
42444: LD_ADDR_VAR 0 7
42448: PUSH
42449: LD_VAR 0 5
42453: PUSH
42454: LD_VAR 0 4
42458: MINUS
42459: ST_TO_ADDR
// if y - r < 0 then
42460: LD_VAR 0 6
42464: PUSH
42465: LD_VAR 0 4
42469: MINUS
42470: PUSH
42471: LD_INT 0
42473: LESS
42474: IFFALSE 42486
// min_y := 0 else
42476: LD_ADDR_VAR 0 8
42480: PUSH
42481: LD_INT 0
42483: ST_TO_ADDR
42484: GO 42502
// min_y := y - r ;
42486: LD_ADDR_VAR 0 8
42490: PUSH
42491: LD_VAR 0 6
42495: PUSH
42496: LD_VAR 0 4
42500: MINUS
42501: ST_TO_ADDR
// max_x := x + r ;
42502: LD_ADDR_VAR 0 9
42506: PUSH
42507: LD_VAR 0 5
42511: PUSH
42512: LD_VAR 0 4
42516: PLUS
42517: ST_TO_ADDR
// max_y := y + r ;
42518: LD_ADDR_VAR 0 10
42522: PUSH
42523: LD_VAR 0 6
42527: PUSH
42528: LD_VAR 0 4
42532: PLUS
42533: ST_TO_ADDR
// for _x = min_x to max_x do
42534: LD_ADDR_VAR 0 11
42538: PUSH
42539: DOUBLE
42540: LD_VAR 0 7
42544: DEC
42545: ST_TO_ADDR
42546: LD_VAR 0 9
42550: PUSH
42551: FOR_TO
42552: IFFALSE 42634
// for _y = min_y to max_y do
42554: LD_ADDR_VAR 0 12
42558: PUSH
42559: DOUBLE
42560: LD_VAR 0 8
42564: DEC
42565: ST_TO_ADDR
42566: LD_VAR 0 10
42570: PUSH
42571: FOR_TO
42572: IFFALSE 42630
// begin if not ValidHex ( _x , _y ) then
42574: LD_VAR 0 11
42578: PPUSH
42579: LD_VAR 0 12
42583: PPUSH
42584: CALL_OW 488
42588: NOT
42589: IFFALSE 42593
// continue ;
42591: GO 42571
// if MineAtPos ( _x , _y ) then
42593: LD_VAR 0 11
42597: PPUSH
42598: LD_VAR 0 12
42602: PPUSH
42603: CALL_OW 458
42607: IFFALSE 42628
// ViewMineAtPos ( _x , _y , side ) ;
42609: LD_VAR 0 11
42613: PPUSH
42614: LD_VAR 0 12
42618: PPUSH
42619: LD_VAR 0 3
42623: PPUSH
42624: CALL_OW 457
// end ;
42628: GO 42571
42630: POP
42631: POP
42632: GO 42551
42634: POP
42635: POP
// end ;
42636: LD_VAR 0 2
42640: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
42641: LD_INT 0
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
// if not units then
42649: LD_VAR 0 1
42653: NOT
42654: IFFALSE 42658
// exit ;
42656: GO 43088
// scaners := [ ] ;
42658: LD_ADDR_VAR 0 6
42662: PUSH
42663: EMPTY
42664: ST_TO_ADDR
// for i in units do
42665: LD_ADDR_VAR 0 3
42669: PUSH
42670: LD_VAR 0 1
42674: PUSH
42675: FOR_IN
42676: IFFALSE 42833
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
42678: LD_VAR 0 3
42682: PPUSH
42683: CALL_OW 264
42687: PUSH
42688: LD_INT 11
42690: NONEQUAL
42691: IFTRUE 42705
42693: PUSH
42694: LD_VAR 0 3
42698: PPUSH
42699: CALL_OW 302
42703: NOT
42704: OR
42705: IFTRUE 42722
42707: PUSH
42708: LD_VAR 0 3
42712: PPUSH
42713: CALL_OW 110
42717: PUSH
42718: LD_INT 502
42720: EQUAL
42721: OR
42722: IFFALSE 42726
// continue ;
42724: GO 42675
// ComStop ( i ) ;
42726: LD_VAR 0 3
42730: PPUSH
42731: CALL_OW 141
// x := GetX ( i ) ;
42735: LD_ADDR_VAR 0 4
42739: PUSH
42740: LD_VAR 0 3
42744: PPUSH
42745: CALL_OW 250
42749: ST_TO_ADDR
// y := GetY ( i ) ;
42750: LD_ADDR_VAR 0 5
42754: PUSH
42755: LD_VAR 0 3
42759: PPUSH
42760: CALL_OW 251
42764: ST_TO_ADDR
// if GetSide ( i ) = your_side then
42765: LD_VAR 0 3
42769: PPUSH
42770: CALL_OW 255
42774: PUSH
42775: LD_OWVAR 2
42779: EQUAL
42780: IFFALSE 42799
// PlaySoundXY ( x , y , mineDetector ) ;
42782: LD_VAR 0 4
42786: PPUSH
42787: LD_VAR 0 5
42791: PPUSH
42792: LD_STRING mineDetector
42794: PPUSH
42795: CALL_OW 366
// scaners := Join ( scaners , i ) ;
42799: LD_ADDR_VAR 0 6
42803: PUSH
42804: LD_VAR 0 6
42808: PPUSH
42809: LD_VAR 0 3
42813: PPUSH
42814: CALL 81310 0 2
42818: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
42819: LD_VAR 0 3
42823: PPUSH
42824: LD_INT 502
42826: PPUSH
42827: CALL_OW 109
// end ;
42831: GO 42675
42833: POP
42834: POP
// if not scaners then
42835: LD_VAR 0 6
42839: NOT
42840: IFFALSE 42844
// exit ;
42842: GO 43088
// wait ( 3 ) ;
42844: LD_INT 3
42846: PPUSH
42847: CALL_OW 67
// timer := 6 ;
42851: LD_ADDR_VAR 0 7
42855: PUSH
42856: LD_INT 6
42858: ST_TO_ADDR
// repeat for i in scaners do
42859: LD_ADDR_VAR 0 3
42863: PUSH
42864: LD_VAR 0 6
42868: PUSH
42869: FOR_IN
42870: IFFALSE 42986
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
42872: LD_VAR 0 3
42876: PPUSH
42877: CALL_OW 302
42881: NOT
42882: IFTRUE 42895
42884: PUSH
42885: LD_VAR 0 3
42889: PPUSH
42890: CALL_OW 314
42894: OR
42895: IFTRUE 42926
42897: PUSH
42898: LD_VAR 0 3
42902: PPUSH
42903: CALL_OW 263
42907: PUSH
42908: LD_INT 1
42910: EQUAL
42911: IFFALSE 42925
42913: PUSH
42914: LD_VAR 0 3
42918: PPUSH
42919: CALL_OW 311
42923: NOT
42924: AND
42925: OR
42926: IFFALSE 42970
// begin SetUnitDisplayNumber ( i , 0 ) ;
42928: LD_VAR 0 3
42932: PPUSH
42933: LD_INT 0
42935: PPUSH
42936: CALL_OW 505
// SetTag ( i , 0 ) ;
42940: LD_VAR 0 3
42944: PPUSH
42945: LD_INT 0
42947: PPUSH
42948: CALL_OW 109
// scaners := scaners diff i ;
42952: LD_ADDR_VAR 0 6
42956: PUSH
42957: LD_VAR 0 6
42961: PUSH
42962: LD_VAR 0 3
42966: DIFF
42967: ST_TO_ADDR
// continue ;
42968: GO 42869
// end ; SetUnitDisplayNumber ( i , timer ) ;
42970: LD_VAR 0 3
42974: PPUSH
42975: LD_VAR 0 7
42979: PPUSH
42980: CALL_OW 505
// end ;
42984: GO 42869
42986: POP
42987: POP
// if not scaners then
42988: LD_VAR 0 6
42992: NOT
42993: IFFALSE 42997
// exit ;
42995: GO 43088
// timer := Dec ( timer ) ;
42997: LD_ADDR_VAR 0 7
43001: PUSH
43002: LD_VAR 0 7
43006: PPUSH
43007: CALL 82705 0 1
43011: ST_TO_ADDR
// wait ( 0 0$1 ) ;
43012: LD_INT 35
43014: PPUSH
43015: CALL_OW 67
// until timer = 0 ;
43019: LD_VAR 0 7
43023: PUSH
43024: LD_INT 0
43026: EQUAL
43027: IFFALSE 42859
// if not scaners then
43029: LD_VAR 0 6
43033: NOT
43034: IFFALSE 43038
// exit ;
43036: GO 43088
// for i in scaners do
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_VAR 0 6
43047: PUSH
43048: FOR_IN
43049: IFFALSE 43086
// begin SetUnitDisplayNumber ( i , 0 ) ;
43051: LD_VAR 0 3
43055: PPUSH
43056: LD_INT 0
43058: PPUSH
43059: CALL_OW 505
// SetTag ( i , 0 ) ;
43063: LD_VAR 0 3
43067: PPUSH
43068: LD_INT 0
43070: PPUSH
43071: CALL_OW 109
// RevealDetectorMine ( i ) ;
43075: LD_VAR 0 3
43079: PPUSH
43080: CALL 42343 0 1
// end ;
43084: GO 43048
43086: POP
43087: POP
// end ;
43088: LD_VAR 0 2
43092: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
43093: LD_INT 0
43095: PPUSH
// if p1 = mine_detector_mode then
43096: LD_VAR 0 2
43100: PUSH
43101: LD_INT 103
43103: EQUAL
43104: IFFALSE 43115
// DetectMine ( units ) ;
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL 42641 0 1
// end ; end_of_file
43115: LD_VAR 0 7
43119: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43120: LD_INT 0
43122: PPUSH
43123: PPUSH
// if exist_mode then
43124: LD_VAR 0 2
43128: IFFALSE 43174
// begin unit := CreateCharacter ( prefix & ident ) ;
43130: LD_ADDR_VAR 0 5
43134: PUSH
43135: LD_VAR 0 3
43139: PUSH
43140: LD_VAR 0 1
43144: STR
43145: PPUSH
43146: CALL_OW 34
43150: ST_TO_ADDR
// if unit then
43151: LD_VAR 0 5
43155: IFFALSE 43172
// DeleteCharacters ( prefix & ident ) ;
43157: LD_VAR 0 3
43161: PUSH
43162: LD_VAR 0 1
43166: STR
43167: PPUSH
43168: CALL_OW 40
// end else
43172: GO 43189
// unit := NewCharacter ( ident ) ;
43174: LD_ADDR_VAR 0 5
43178: PUSH
43179: LD_VAR 0 1
43183: PPUSH
43184: CALL_OW 25
43188: ST_TO_ADDR
// result := unit ;
43189: LD_ADDR_VAR 0 4
43193: PUSH
43194: LD_VAR 0 5
43198: ST_TO_ADDR
// end ;
43199: LD_VAR 0 4
43203: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
43204: LD_INT 0
43206: PPUSH
43207: PPUSH
// if exist_mode then
43208: LD_VAR 0 2
43212: IFFALSE 43237
// unit := CreateCharacter ( prefix & ident ) else
43214: LD_ADDR_VAR 0 5
43218: PUSH
43219: LD_VAR 0 3
43223: PUSH
43224: LD_VAR 0 1
43228: STR
43229: PPUSH
43230: CALL_OW 34
43234: ST_TO_ADDR
43235: GO 43252
// unit := NewCharacter ( ident ) ;
43237: LD_ADDR_VAR 0 5
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 25
43251: ST_TO_ADDR
// result := unit ;
43252: LD_ADDR_VAR 0 4
43256: PUSH
43257: LD_VAR 0 5
43261: ST_TO_ADDR
// end ;
43262: LD_VAR 0 4
43266: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43267: LD_INT 0
43269: PPUSH
43270: PPUSH
// if not side or not nation then
43271: LD_VAR 0 1
43275: NOT
43276: IFTRUE 43285
43278: PUSH
43279: LD_VAR 0 2
43283: NOT
43284: OR
43285: IFFALSE 43289
// exit ;
43287: GO 44083
// case nation of nation_american :
43289: LD_VAR 0 2
43293: PUSH
43294: LD_INT 1
43296: DOUBLE
43297: EQUAL
43298: IFTRUE 43302
43300: GO 43524
43302: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
43303: LD_ADDR_VAR 0 4
43307: PUSH
43308: LD_INT 35
43310: PUSH
43311: LD_INT 45
43313: PUSH
43314: LD_INT 46
43316: PUSH
43317: LD_INT 47
43319: PUSH
43320: LD_INT 82
43322: PUSH
43323: LD_INT 83
43325: PUSH
43326: LD_INT 84
43328: PUSH
43329: LD_INT 85
43331: PUSH
43332: LD_INT 86
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 6
43343: PUSH
43344: LD_INT 15
43346: PUSH
43347: LD_INT 16
43349: PUSH
43350: LD_INT 7
43352: PUSH
43353: LD_INT 12
43355: PUSH
43356: LD_INT 13
43358: PUSH
43359: LD_INT 10
43361: PUSH
43362: LD_INT 14
43364: PUSH
43365: LD_INT 20
43367: PUSH
43368: LD_INT 21
43370: PUSH
43371: LD_INT 22
43373: PUSH
43374: LD_INT 25
43376: PUSH
43377: LD_INT 32
43379: PUSH
43380: LD_INT 27
43382: PUSH
43383: LD_INT 36
43385: PUSH
43386: LD_INT 69
43388: PUSH
43389: LD_INT 39
43391: PUSH
43392: LD_INT 34
43394: PUSH
43395: LD_INT 40
43397: PUSH
43398: LD_INT 48
43400: PUSH
43401: LD_INT 49
43403: PUSH
43404: LD_INT 50
43406: PUSH
43407: LD_INT 51
43409: PUSH
43410: LD_INT 52
43412: PUSH
43413: LD_INT 53
43415: PUSH
43416: LD_INT 54
43418: PUSH
43419: LD_INT 55
43421: PUSH
43422: LD_INT 56
43424: PUSH
43425: LD_INT 57
43427: PUSH
43428: LD_INT 58
43430: PUSH
43431: LD_INT 59
43433: PUSH
43434: LD_INT 60
43436: PUSH
43437: LD_INT 61
43439: PUSH
43440: LD_INT 62
43442: PUSH
43443: LD_INT 80
43445: PUSH
43446: LD_INT 82
43448: PUSH
43449: LD_INT 83
43451: PUSH
43452: LD_INT 84
43454: PUSH
43455: LD_INT 85
43457: PUSH
43458: LD_INT 86
43460: PUSH
43461: LD_INT 90
43463: PUSH
43464: LD_INT 93
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
43522: GO 44005
43524: LD_INT 2
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 43766
43532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
43533: LD_ADDR_VAR 0 4
43537: PUSH
43538: LD_INT 35
43540: PUSH
43541: LD_INT 45
43543: PUSH
43544: LD_INT 46
43546: PUSH
43547: LD_INT 47
43549: PUSH
43550: LD_INT 82
43552: PUSH
43553: LD_INT 83
43555: PUSH
43556: LD_INT 84
43558: PUSH
43559: LD_INT 85
43561: PUSH
43562: LD_INT 87
43564: PUSH
43565: LD_INT 70
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 11
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: LD_INT 4
43579: PUSH
43580: LD_INT 5
43582: PUSH
43583: LD_INT 6
43585: PUSH
43586: LD_INT 15
43588: PUSH
43589: LD_INT 18
43591: PUSH
43592: LD_INT 7
43594: PUSH
43595: LD_INT 17
43597: PUSH
43598: LD_INT 8
43600: PUSH
43601: LD_INT 20
43603: PUSH
43604: LD_INT 21
43606: PUSH
43607: LD_INT 22
43609: PUSH
43610: LD_INT 72
43612: PUSH
43613: LD_INT 26
43615: PUSH
43616: LD_INT 69
43618: PUSH
43619: LD_INT 39
43621: PUSH
43622: LD_INT 40
43624: PUSH
43625: LD_INT 41
43627: PUSH
43628: LD_INT 42
43630: PUSH
43631: LD_INT 43
43633: PUSH
43634: LD_INT 48
43636: PUSH
43637: LD_INT 49
43639: PUSH
43640: LD_INT 50
43642: PUSH
43643: LD_INT 51
43645: PUSH
43646: LD_INT 52
43648: PUSH
43649: LD_INT 53
43651: PUSH
43652: LD_INT 54
43654: PUSH
43655: LD_INT 55
43657: PUSH
43658: LD_INT 56
43660: PUSH
43661: LD_INT 60
43663: PUSH
43664: LD_INT 61
43666: PUSH
43667: LD_INT 62
43669: PUSH
43670: LD_INT 66
43672: PUSH
43673: LD_INT 67
43675: PUSH
43676: LD_INT 68
43678: PUSH
43679: LD_INT 81
43681: PUSH
43682: LD_INT 82
43684: PUSH
43685: LD_INT 83
43687: PUSH
43688: LD_INT 84
43690: PUSH
43691: LD_INT 85
43693: PUSH
43694: LD_INT 87
43696: PUSH
43697: LD_INT 88
43699: PUSH
43700: LD_INT 92
43702: PUSH
43703: LD_INT 94
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: ST_TO_ADDR
43764: GO 44005
43766: LD_INT 3
43768: DOUBLE
43769: EQUAL
43770: IFTRUE 43774
43772: GO 44004
43774: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
43775: LD_ADDR_VAR 0 4
43779: PUSH
43780: LD_INT 46
43782: PUSH
43783: LD_INT 47
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 82
43794: PUSH
43795: LD_INT 83
43797: PUSH
43798: LD_INT 84
43800: PUSH
43801: LD_INT 85
43803: PUSH
43804: LD_INT 86
43806: PUSH
43807: LD_INT 11
43809: PUSH
43810: LD_INT 9
43812: PUSH
43813: LD_INT 20
43815: PUSH
43816: LD_INT 19
43818: PUSH
43819: LD_INT 21
43821: PUSH
43822: LD_INT 24
43824: PUSH
43825: LD_INT 22
43827: PUSH
43828: LD_INT 25
43830: PUSH
43831: LD_INT 28
43833: PUSH
43834: LD_INT 29
43836: PUSH
43837: LD_INT 30
43839: PUSH
43840: LD_INT 31
43842: PUSH
43843: LD_INT 37
43845: PUSH
43846: LD_INT 38
43848: PUSH
43849: LD_INT 32
43851: PUSH
43852: LD_INT 27
43854: PUSH
43855: LD_INT 33
43857: PUSH
43858: LD_INT 69
43860: PUSH
43861: LD_INT 39
43863: PUSH
43864: LD_INT 34
43866: PUSH
43867: LD_INT 40
43869: PUSH
43870: LD_INT 71
43872: PUSH
43873: LD_INT 23
43875: PUSH
43876: LD_INT 44
43878: PUSH
43879: LD_INT 48
43881: PUSH
43882: LD_INT 49
43884: PUSH
43885: LD_INT 50
43887: PUSH
43888: LD_INT 51
43890: PUSH
43891: LD_INT 52
43893: PUSH
43894: LD_INT 53
43896: PUSH
43897: LD_INT 54
43899: PUSH
43900: LD_INT 55
43902: PUSH
43903: LD_INT 56
43905: PUSH
43906: LD_INT 57
43908: PUSH
43909: LD_INT 58
43911: PUSH
43912: LD_INT 59
43914: PUSH
43915: LD_INT 63
43917: PUSH
43918: LD_INT 64
43920: PUSH
43921: LD_INT 65
43923: PUSH
43924: LD_INT 82
43926: PUSH
43927: LD_INT 83
43929: PUSH
43930: LD_INT 84
43932: PUSH
43933: LD_INT 85
43935: PUSH
43936: LD_INT 86
43938: PUSH
43939: LD_INT 89
43941: PUSH
43942: LD_INT 91
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
44002: GO 44005
44004: POP
// if state > - 1 and state < 3 then
44005: LD_VAR 0 3
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: GREATER
44014: IFFALSE 44026
44016: PUSH
44017: LD_VAR 0 3
44021: PUSH
44022: LD_INT 3
44024: LESS
44025: AND
44026: IFFALSE 44083
// for i in result do
44028: LD_ADDR_VAR 0 5
44032: PUSH
44033: LD_VAR 0 4
44037: PUSH
44038: FOR_IN
44039: IFFALSE 44081
// if GetTech ( i , side ) <> state then
44041: LD_VAR 0 5
44045: PPUSH
44046: LD_VAR 0 1
44050: PPUSH
44051: CALL_OW 321
44055: PUSH
44056: LD_VAR 0 3
44060: NONEQUAL
44061: IFFALSE 44079
// result := result diff i ;
44063: LD_ADDR_VAR 0 4
44067: PUSH
44068: LD_VAR 0 4
44072: PUSH
44073: LD_VAR 0 5
44077: DIFF
44078: ST_TO_ADDR
44079: GO 44038
44081: POP
44082: POP
// end ;
44083: LD_VAR 0 4
44087: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44088: LD_INT 0
44090: PPUSH
44091: PPUSH
44092: PPUSH
// result := true ;
44093: LD_ADDR_VAR 0 3
44097: PUSH
44098: LD_INT 1
44100: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44101: LD_ADDR_VAR 0 5
44105: PUSH
44106: LD_VAR 0 2
44110: PPUSH
44111: CALL_OW 480
44115: ST_TO_ADDR
// if not tmp then
44116: LD_VAR 0 5
44120: NOT
44121: IFFALSE 44125
// exit ;
44123: GO 44174
// for i in tmp do
44125: LD_ADDR_VAR 0 4
44129: PUSH
44130: LD_VAR 0 5
44134: PUSH
44135: FOR_IN
44136: IFFALSE 44172
// if GetTech ( i , side ) <> state_researched then
44138: LD_VAR 0 4
44142: PPUSH
44143: LD_VAR 0 1
44147: PPUSH
44148: CALL_OW 321
44152: PUSH
44153: LD_INT 2
44155: NONEQUAL
44156: IFFALSE 44170
// begin result := false ;
44158: LD_ADDR_VAR 0 3
44162: PUSH
44163: LD_INT 0
44165: ST_TO_ADDR
// exit ;
44166: POP
44167: POP
44168: GO 44174
// end ;
44170: GO 44135
44172: POP
44173: POP
// end ;
44174: LD_VAR 0 3
44178: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44179: LD_INT 0
44181: PPUSH
44182: PPUSH
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44194: LD_VAR 0 1
44198: NOT
44199: IFTRUE 44216
44201: PUSH
44202: LD_VAR 0 1
44206: PPUSH
44207: CALL_OW 257
44211: PUSH
44212: LD_INT 9
44214: NONEQUAL
44215: OR
44216: IFFALSE 44220
// exit ;
44218: GO 44799
// side := GetSide ( unit ) ;
44220: LD_ADDR_VAR 0 9
44224: PUSH
44225: LD_VAR 0 1
44229: PPUSH
44230: CALL_OW 255
44234: ST_TO_ADDR
// tech_space := tech_spacanom ;
44235: LD_ADDR_VAR 0 12
44239: PUSH
44240: LD_INT 29
44242: ST_TO_ADDR
// tech_time := tech_taurad ;
44243: LD_ADDR_VAR 0 13
44247: PUSH
44248: LD_INT 28
44250: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44251: LD_ADDR_VAR 0 11
44255: PUSH
44256: LD_VAR 0 1
44260: PPUSH
44261: CALL_OW 310
44265: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44266: LD_VAR 0 11
44270: PPUSH
44271: CALL_OW 247
44275: PUSH
44276: LD_INT 2
44278: EQUAL
44279: IFFALSE 44283
// exit ;
44281: GO 44799
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44283: LD_ADDR_VAR 0 8
44287: PUSH
44288: LD_INT 81
44290: PUSH
44291: LD_VAR 0 9
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 21
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PPUSH
44321: CALL_OW 69
44325: ST_TO_ADDR
// if not tmp then
44326: LD_VAR 0 8
44330: NOT
44331: IFFALSE 44335
// exit ;
44333: GO 44799
// if in_unit then
44335: LD_VAR 0 11
44339: IFFALSE 44363
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44341: LD_ADDR_VAR 0 10
44345: PUSH
44346: LD_VAR 0 8
44350: PPUSH
44351: LD_VAR 0 11
44355: PPUSH
44356: CALL_OW 74
44360: ST_TO_ADDR
44361: GO 44383
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44363: LD_ADDR_VAR 0 10
44367: PUSH
44368: LD_VAR 0 8
44372: PPUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 74
44382: ST_TO_ADDR
// if not enemy then
44383: LD_VAR 0 10
44387: NOT
44388: IFFALSE 44392
// exit ;
44390: GO 44799
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44392: LD_VAR 0 11
44396: IFFALSE 44418
44398: PUSH
44399: LD_VAR 0 11
44403: PPUSH
44404: LD_VAR 0 10
44408: PPUSH
44409: CALL_OW 296
44413: PUSH
44414: LD_INT 13
44416: GREATER
44417: AND
44418: IFTRUE 44440
44420: PUSH
44421: LD_VAR 0 1
44425: PPUSH
44426: LD_VAR 0 10
44430: PPUSH
44431: CALL_OW 296
44435: PUSH
44436: LD_INT 12
44438: GREATER
44439: OR
44440: IFFALSE 44444
// exit ;
44442: GO 44799
// missile := [ 1 ] ;
44444: LD_ADDR_VAR 0 14
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44455: LD_VAR 0 9
44459: PPUSH
44460: LD_VAR 0 12
44464: PPUSH
44465: CALL_OW 325
44469: IFFALSE 44498
// missile := Replace ( missile , missile + 1 , 2 ) ;
44471: LD_ADDR_VAR 0 14
44475: PUSH
44476: LD_VAR 0 14
44480: PPUSH
44481: LD_VAR 0 14
44485: PUSH
44486: LD_INT 1
44488: PLUS
44489: PPUSH
44490: LD_INT 2
44492: PPUSH
44493: CALL_OW 1
44497: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44498: LD_VAR 0 9
44502: PPUSH
44503: LD_VAR 0 13
44507: PPUSH
44508: CALL_OW 325
44512: IFFALSE 44536
44514: PUSH
44515: LD_VAR 0 10
44519: PPUSH
44520: CALL_OW 255
44524: PPUSH
44525: LD_VAR 0 13
44529: PPUSH
44530: CALL_OW 325
44534: NOT
44535: AND
44536: IFFALSE 44565
// missile := Replace ( missile , missile + 1 , 3 ) ;
44538: LD_ADDR_VAR 0 14
44542: PUSH
44543: LD_VAR 0 14
44547: PPUSH
44548: LD_VAR 0 14
44552: PUSH
44553: LD_INT 1
44555: PLUS
44556: PPUSH
44557: LD_INT 3
44559: PPUSH
44560: CALL_OW 1
44564: ST_TO_ADDR
// if missile < 2 then
44565: LD_VAR 0 14
44569: PUSH
44570: LD_INT 2
44572: LESS
44573: IFFALSE 44577
// exit ;
44575: GO 44799
// x := GetX ( enemy ) ;
44577: LD_ADDR_VAR 0 4
44581: PUSH
44582: LD_VAR 0 10
44586: PPUSH
44587: CALL_OW 250
44591: ST_TO_ADDR
// y := GetY ( enemy ) ;
44592: LD_ADDR_VAR 0 5
44596: PUSH
44597: LD_VAR 0 10
44601: PPUSH
44602: CALL_OW 251
44606: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44607: LD_ADDR_VAR 0 6
44611: PUSH
44612: LD_VAR 0 4
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PPUSH
44621: LD_INT 1
44623: PPUSH
44624: CALL_OW 12
44628: PLUS
44629: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44630: LD_ADDR_VAR 0 7
44634: PUSH
44635: LD_VAR 0 5
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PPUSH
44644: LD_INT 1
44646: PPUSH
44647: CALL_OW 12
44651: PLUS
44652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44653: LD_VAR 0 6
44657: PPUSH
44658: LD_VAR 0 7
44662: PPUSH
44663: CALL_OW 488
44667: NOT
44668: IFFALSE 44690
// begin _x := x ;
44670: LD_ADDR_VAR 0 6
44674: PUSH
44675: LD_VAR 0 4
44679: ST_TO_ADDR
// _y := y ;
44680: LD_ADDR_VAR 0 7
44684: PUSH
44685: LD_VAR 0 5
44689: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_INT 1
44697: PPUSH
44698: LD_VAR 0 14
44702: PPUSH
44703: CALL_OW 12
44707: ST_TO_ADDR
// case i of 1 :
44708: LD_VAR 0 3
44712: PUSH
44713: LD_INT 1
44715: DOUBLE
44716: EQUAL
44717: IFTRUE 44721
44719: GO 44738
44721: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44722: LD_VAR 0 1
44726: PPUSH
44727: LD_VAR 0 10
44731: PPUSH
44732: CALL_OW 115
44736: GO 44799
44738: LD_INT 2
44740: DOUBLE
44741: EQUAL
44742: IFTRUE 44746
44744: GO 44768
44746: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44747: LD_VAR 0 1
44751: PPUSH
44752: LD_VAR 0 6
44756: PPUSH
44757: LD_VAR 0 7
44761: PPUSH
44762: CALL_OW 153
44766: GO 44799
44768: LD_INT 3
44770: DOUBLE
44771: EQUAL
44772: IFTRUE 44776
44774: GO 44798
44776: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44777: LD_VAR 0 1
44781: PPUSH
44782: LD_VAR 0 6
44786: PPUSH
44787: LD_VAR 0 7
44791: PPUSH
44792: CALL_OW 154
44796: GO 44799
44798: POP
// end ;
44799: LD_VAR 0 2
44803: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44804: LD_INT 0
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
// if not unit or not building then
44812: LD_VAR 0 1
44816: NOT
44817: IFTRUE 44826
44819: PUSH
44820: LD_VAR 0 2
44824: NOT
44825: OR
44826: IFFALSE 44830
// exit ;
44828: GO 44988
// x := GetX ( building ) ;
44830: LD_ADDR_VAR 0 5
44834: PUSH
44835: LD_VAR 0 2
44839: PPUSH
44840: CALL_OW 250
44844: ST_TO_ADDR
// y := GetY ( building ) ;
44845: LD_ADDR_VAR 0 6
44849: PUSH
44850: LD_VAR 0 2
44854: PPUSH
44855: CALL_OW 251
44859: ST_TO_ADDR
// for i := 0 to 5 do
44860: LD_ADDR_VAR 0 4
44864: PUSH
44865: DOUBLE
44866: LD_INT 0
44868: DEC
44869: ST_TO_ADDR
44870: LD_INT 5
44872: PUSH
44873: FOR_TO
44874: IFFALSE 44986
// begin _x := ShiftX ( x , i , 3 ) ;
44876: LD_ADDR_VAR 0 7
44880: PUSH
44881: LD_VAR 0 5
44885: PPUSH
44886: LD_VAR 0 4
44890: PPUSH
44891: LD_INT 3
44893: PPUSH
44894: CALL_OW 272
44898: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44899: LD_ADDR_VAR 0 8
44903: PUSH
44904: LD_VAR 0 6
44908: PPUSH
44909: LD_VAR 0 4
44913: PPUSH
44914: LD_INT 3
44916: PPUSH
44917: CALL_OW 273
44921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44922: LD_VAR 0 7
44926: PPUSH
44927: LD_VAR 0 8
44931: PPUSH
44932: CALL_OW 488
44936: NOT
44937: IFFALSE 44941
// continue ;
44939: GO 44873
// if HexInfo ( _x , _y ) = 0 then
44941: LD_VAR 0 7
44945: PPUSH
44946: LD_VAR 0 8
44950: PPUSH
44951: CALL_OW 428
44955: PUSH
44956: LD_INT 0
44958: EQUAL
44959: IFFALSE 44984
// begin ComMoveXY ( unit , _x , _y ) ;
44961: LD_VAR 0 1
44965: PPUSH
44966: LD_VAR 0 7
44970: PPUSH
44971: LD_VAR 0 8
44975: PPUSH
44976: CALL_OW 111
// exit ;
44980: POP
44981: POP
44982: GO 44988
// end ; end ;
44984: GO 44873
44986: POP
44987: POP
// end ;
44988: LD_VAR 0 3
44992: RET
// export function ScanBase ( side , base_area ) ; begin
44993: LD_INT 0
44995: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44996: LD_ADDR_VAR 0 3
45000: PUSH
45001: LD_VAR 0 2
45005: PPUSH
45006: LD_INT 81
45008: PUSH
45009: LD_VAR 0 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PPUSH
45018: CALL_OW 70
45022: ST_TO_ADDR
// end ;
45023: LD_VAR 0 3
45027: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45028: LD_INT 0
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
// result := false ;
45034: LD_ADDR_VAR 0 2
45038: PUSH
45039: LD_INT 0
45041: ST_TO_ADDR
// side := GetSide ( unit ) ;
45042: LD_ADDR_VAR 0 3
45046: PUSH
45047: LD_VAR 0 1
45051: PPUSH
45052: CALL_OW 255
45056: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45057: LD_ADDR_VAR 0 4
45061: PUSH
45062: LD_VAR 0 1
45066: PPUSH
45067: CALL_OW 248
45071: ST_TO_ADDR
// case nat of 1 :
45072: LD_VAR 0 4
45076: PUSH
45077: LD_INT 1
45079: DOUBLE
45080: EQUAL
45081: IFTRUE 45085
45083: GO 45096
45085: POP
// tech := tech_lassight ; 2 :
45086: LD_ADDR_VAR 0 5
45090: PUSH
45091: LD_INT 12
45093: ST_TO_ADDR
45094: GO 45135
45096: LD_INT 2
45098: DOUBLE
45099: EQUAL
45100: IFTRUE 45104
45102: GO 45115
45104: POP
// tech := tech_mortar ; 3 :
45105: LD_ADDR_VAR 0 5
45109: PUSH
45110: LD_INT 41
45112: ST_TO_ADDR
45113: GO 45135
45115: LD_INT 3
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45123
45121: GO 45134
45123: POP
// tech := tech_bazooka ; end ;
45124: LD_ADDR_VAR 0 5
45128: PUSH
45129: LD_INT 44
45131: ST_TO_ADDR
45132: GO 45135
45134: POP
// if Researched ( side , tech ) then
45135: LD_VAR 0 3
45139: PPUSH
45140: LD_VAR 0 5
45144: PPUSH
45145: CALL_OW 325
45149: IFFALSE 45176
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45151: LD_ADDR_VAR 0 2
45155: PUSH
45156: LD_INT 5
45158: PUSH
45159: LD_INT 8
45161: PUSH
45162: LD_INT 9
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: PUSH
45170: LD_VAR 0 4
45174: ARRAY
45175: ST_TO_ADDR
// end ;
45176: LD_VAR 0 2
45180: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45181: LD_INT 0
45183: PPUSH
45184: PPUSH
45185: PPUSH
// if not mines then
45186: LD_VAR 0 2
45190: NOT
45191: IFFALSE 45195
// exit ;
45193: GO 45339
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45195: LD_ADDR_VAR 0 5
45199: PUSH
45200: LD_INT 81
45202: PUSH
45203: LD_VAR 0 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 3
45214: PUSH
45215: LD_INT 21
45217: PUSH
45218: LD_INT 3
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PPUSH
45233: CALL_OW 69
45237: ST_TO_ADDR
// for i in mines do
45238: LD_ADDR_VAR 0 4
45242: PUSH
45243: LD_VAR 0 2
45247: PUSH
45248: FOR_IN
45249: IFFALSE 45337
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45251: LD_VAR 0 4
45255: PUSH
45256: LD_INT 1
45258: ARRAY
45259: PPUSH
45260: LD_VAR 0 4
45264: PUSH
45265: LD_INT 2
45267: ARRAY
45268: PPUSH
45269: CALL_OW 458
45273: NOT
45274: IFFALSE 45278
// continue ;
45276: GO 45248
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45278: LD_VAR 0 4
45282: PUSH
45283: LD_INT 1
45285: ARRAY
45286: PPUSH
45287: LD_VAR 0 4
45291: PUSH
45292: LD_INT 2
45294: ARRAY
45295: PPUSH
45296: CALL_OW 428
45300: PUSH
45301: LD_VAR 0 5
45305: IN
45306: IFFALSE 45335
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45308: LD_VAR 0 4
45312: PUSH
45313: LD_INT 1
45315: ARRAY
45316: PPUSH
45317: LD_VAR 0 4
45321: PUSH
45322: LD_INT 2
45324: ARRAY
45325: PPUSH
45326: LD_VAR 0 1
45330: PPUSH
45331: CALL_OW 456
// end ;
45335: GO 45248
45337: POP
45338: POP
// end ;
45339: LD_VAR 0 3
45343: RET
// export function Count ( array ) ; begin
45344: LD_INT 0
45346: PPUSH
// result := array + 0 ;
45347: LD_ADDR_VAR 0 2
45351: PUSH
45352: LD_VAR 0 1
45356: PUSH
45357: LD_INT 0
45359: PLUS
45360: ST_TO_ADDR
// end ;
45361: LD_VAR 0 2
45365: RET
// export function IsEmpty ( building ) ; begin
45366: LD_INT 0
45368: PPUSH
// if not building then
45369: LD_VAR 0 1
45373: NOT
45374: IFFALSE 45378
// exit ;
45376: GO 45421
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45378: LD_ADDR_VAR 0 2
45382: PUSH
45383: LD_VAR 0 1
45387: PUSH
45388: LD_INT 22
45390: PUSH
45391: LD_VAR 0 1
45395: PPUSH
45396: CALL_OW 255
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 58
45407: PUSH
45408: EMPTY
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PPUSH
45415: CALL_OW 69
45419: IN
45420: ST_TO_ADDR
// end ;
45421: LD_VAR 0 2
45425: RET
// export function IsNotFull ( building ) ; var places ; begin
45426: LD_INT 0
45428: PPUSH
45429: PPUSH
// if not building then
45430: LD_VAR 0 1
45434: NOT
45435: IFFALSE 45439
// exit ;
45437: GO 45467
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45439: LD_ADDR_VAR 0 2
45443: PUSH
45444: LD_VAR 0 1
45448: PPUSH
45449: LD_INT 3
45451: PUSH
45452: LD_INT 62
45454: PUSH
45455: EMPTY
45456: LIST
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PPUSH
45462: CALL_OW 72
45466: ST_TO_ADDR
// end ;
45467: LD_VAR 0 2
45471: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45472: LD_INT 0
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
// tmp := [ ] ;
45478: LD_ADDR_VAR 0 3
45482: PUSH
45483: EMPTY
45484: ST_TO_ADDR
// list := [ ] ;
45485: LD_ADDR_VAR 0 5
45489: PUSH
45490: EMPTY
45491: ST_TO_ADDR
// for i = 16 to 25 do
45492: LD_ADDR_VAR 0 4
45496: PUSH
45497: DOUBLE
45498: LD_INT 16
45500: DEC
45501: ST_TO_ADDR
45502: LD_INT 25
45504: PUSH
45505: FOR_TO
45506: IFFALSE 45579
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45508: LD_ADDR_VAR 0 3
45512: PUSH
45513: LD_VAR 0 3
45517: PUSH
45518: LD_INT 22
45520: PUSH
45521: LD_VAR 0 1
45525: PPUSH
45526: CALL_OW 255
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 91
45537: PUSH
45538: LD_VAR 0 1
45542: PUSH
45543: LD_INT 6
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 30
45553: PUSH
45554: LD_VAR 0 4
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: PUSH
45568: EMPTY
45569: LIST
45570: PPUSH
45571: CALL_OW 69
45575: ADD
45576: ST_TO_ADDR
45577: GO 45505
45579: POP
45580: POP
// for i = 1 to tmp do
45581: LD_ADDR_VAR 0 4
45585: PUSH
45586: DOUBLE
45587: LD_INT 1
45589: DEC
45590: ST_TO_ADDR
45591: LD_VAR 0 3
45595: PUSH
45596: FOR_TO
45597: IFFALSE 45685
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45599: LD_ADDR_VAR 0 5
45603: PUSH
45604: LD_VAR 0 5
45608: PUSH
45609: LD_VAR 0 3
45613: PUSH
45614: LD_VAR 0 4
45618: ARRAY
45619: PPUSH
45620: CALL_OW 266
45624: PUSH
45625: LD_VAR 0 3
45629: PUSH
45630: LD_VAR 0 4
45634: ARRAY
45635: PPUSH
45636: CALL_OW 250
45640: PUSH
45641: LD_VAR 0 3
45645: PUSH
45646: LD_VAR 0 4
45650: ARRAY
45651: PPUSH
45652: CALL_OW 251
45656: PUSH
45657: LD_VAR 0 3
45661: PUSH
45662: LD_VAR 0 4
45666: ARRAY
45667: PPUSH
45668: CALL_OW 254
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: ADD
45682: ST_TO_ADDR
45683: GO 45596
45685: POP
45686: POP
// result := list ;
45687: LD_ADDR_VAR 0 2
45691: PUSH
45692: LD_VAR 0 5
45696: ST_TO_ADDR
// end ;
45697: LD_VAR 0 2
45701: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45702: LD_INT 0
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
// if not factory then
45711: LD_VAR 0 1
45715: NOT
45716: IFFALSE 45720
// exit ;
45718: GO 46323
// if control = control_apeman then
45720: LD_VAR 0 4
45724: PUSH
45725: LD_INT 5
45727: EQUAL
45728: IFFALSE 45837
// begin tmp := UnitsInside ( factory ) ;
45730: LD_ADDR_VAR 0 8
45734: PUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: CALL_OW 313
45744: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45745: LD_VAR 0 8
45749: PPUSH
45750: LD_INT 25
45752: PUSH
45753: LD_INT 12
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PPUSH
45760: CALL_OW 72
45764: NOT
45765: IFFALSE 45775
// control := control_manual ;
45767: LD_ADDR_VAR 0 4
45771: PUSH
45772: LD_INT 1
45774: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45775: LD_ADDR_VAR 0 8
45779: PUSH
45780: LD_VAR 0 1
45784: PPUSH
45785: CALL 45472 0 1
45789: ST_TO_ADDR
// if tmp then
45790: LD_VAR 0 8
45794: IFFALSE 45837
// begin for i in tmp do
45796: LD_ADDR_VAR 0 7
45800: PUSH
45801: LD_VAR 0 8
45805: PUSH
45806: FOR_IN
45807: IFFALSE 45835
// if i [ 1 ] = b_ext_radio then
45809: LD_VAR 0 7
45813: PUSH
45814: LD_INT 1
45816: ARRAY
45817: PUSH
45818: LD_INT 22
45820: EQUAL
45821: IFFALSE 45833
// begin control := control_remote ;
45823: LD_ADDR_VAR 0 4
45827: PUSH
45828: LD_INT 2
45830: ST_TO_ADDR
// break ;
45831: GO 45835
// end ;
45833: GO 45806
45835: POP
45836: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45837: LD_VAR 0 1
45841: PPUSH
45842: LD_VAR 0 2
45846: PPUSH
45847: LD_VAR 0 3
45851: PPUSH
45852: LD_VAR 0 4
45856: PPUSH
45857: LD_VAR 0 5
45861: PPUSH
45862: CALL_OW 448
45866: IFFALSE 45901
// begin result := [ chassis , engine , control , weapon ] ;
45868: LD_ADDR_VAR 0 6
45872: PUSH
45873: LD_VAR 0 2
45877: PUSH
45878: LD_VAR 0 3
45882: PUSH
45883: LD_VAR 0 4
45887: PUSH
45888: LD_VAR 0 5
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// exit ;
45899: GO 46323
// end ; _chassis := AvailableChassisList ( factory ) ;
45901: LD_ADDR_VAR 0 9
45905: PUSH
45906: LD_VAR 0 1
45910: PPUSH
45911: CALL_OW 475
45915: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45916: LD_ADDR_VAR 0 11
45920: PUSH
45921: LD_VAR 0 1
45925: PPUSH
45926: CALL_OW 476
45930: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45931: LD_ADDR_VAR 0 12
45935: PUSH
45936: LD_VAR 0 1
45940: PPUSH
45941: CALL_OW 477
45945: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45946: LD_ADDR_VAR 0 10
45950: PUSH
45951: LD_VAR 0 1
45955: PPUSH
45956: CALL_OW 478
45960: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45961: LD_VAR 0 9
45965: NOT
45966: IFTRUE 45975
45968: PUSH
45969: LD_VAR 0 11
45973: NOT
45974: OR
45975: IFTRUE 45984
45977: PUSH
45978: LD_VAR 0 12
45982: NOT
45983: OR
45984: IFTRUE 45993
45986: PUSH
45987: LD_VAR 0 10
45991: NOT
45992: OR
45993: IFFALSE 46028
// begin result := [ chassis , engine , control , weapon ] ;
45995: LD_ADDR_VAR 0 6
45999: PUSH
46000: LD_VAR 0 2
46004: PUSH
46005: LD_VAR 0 3
46009: PUSH
46010: LD_VAR 0 4
46014: PUSH
46015: LD_VAR 0 5
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// exit ;
46026: GO 46323
// end ; if not chassis in _chassis then
46028: LD_VAR 0 2
46032: PUSH
46033: LD_VAR 0 9
46037: IN
46038: NOT
46039: IFFALSE 46065
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46041: LD_ADDR_VAR 0 2
46045: PUSH
46046: LD_VAR 0 9
46050: PUSH
46051: LD_INT 1
46053: PPUSH
46054: LD_VAR 0 9
46058: PPUSH
46059: CALL_OW 12
46063: ARRAY
46064: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46065: LD_VAR 0 2
46069: PPUSH
46070: LD_VAR 0 3
46074: PPUSH
46075: CALL 46328 0 2
46079: NOT
46080: IFFALSE 46141
// repeat engine := _engine [ 1 ] ;
46082: LD_ADDR_VAR 0 3
46086: PUSH
46087: LD_VAR 0 11
46091: PUSH
46092: LD_INT 1
46094: ARRAY
46095: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46096: LD_ADDR_VAR 0 11
46100: PUSH
46101: LD_VAR 0 11
46105: PPUSH
46106: LD_INT 1
46108: PPUSH
46109: CALL_OW 3
46113: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46114: LD_VAR 0 2
46118: PPUSH
46119: LD_VAR 0 3
46123: PPUSH
46124: CALL 46328 0 2
46128: IFTRUE 46139
46130: PUSH
46131: LD_VAR 0 11
46135: PUSH
46136: EMPTY
46137: EQUAL
46138: OR
46139: IFFALSE 46082
// if not control in _control then
46141: LD_VAR 0 4
46145: PUSH
46146: LD_VAR 0 12
46150: IN
46151: NOT
46152: IFFALSE 46178
// control := _control [ rand ( 1 , _control ) ] ;
46154: LD_ADDR_VAR 0 4
46158: PUSH
46159: LD_VAR 0 12
46163: PUSH
46164: LD_INT 1
46166: PPUSH
46167: LD_VAR 0 12
46171: PPUSH
46172: CALL_OW 12
46176: ARRAY
46177: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46178: LD_VAR 0 2
46182: PPUSH
46183: LD_VAR 0 5
46187: PPUSH
46188: CALL 46550 0 2
46192: NOT
46193: IFFALSE 46254
// repeat weapon := _weapon [ 1 ] ;
46195: LD_ADDR_VAR 0 5
46199: PUSH
46200: LD_VAR 0 10
46204: PUSH
46205: LD_INT 1
46207: ARRAY
46208: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46209: LD_ADDR_VAR 0 10
46213: PUSH
46214: LD_VAR 0 10
46218: PPUSH
46219: LD_INT 1
46221: PPUSH
46222: CALL_OW 3
46226: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46227: LD_VAR 0 2
46231: PPUSH
46232: LD_VAR 0 5
46236: PPUSH
46237: CALL 46550 0 2
46241: IFTRUE 46252
46243: PUSH
46244: LD_VAR 0 10
46248: PUSH
46249: EMPTY
46250: EQUAL
46251: OR
46252: IFFALSE 46195
// result := [ ] ;
46254: LD_ADDR_VAR 0 6
46258: PUSH
46259: EMPTY
46260: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46261: LD_VAR 0 1
46265: PPUSH
46266: LD_VAR 0 2
46270: PPUSH
46271: LD_VAR 0 3
46275: PPUSH
46276: LD_VAR 0 4
46280: PPUSH
46281: LD_VAR 0 5
46285: PPUSH
46286: CALL_OW 448
46290: IFFALSE 46323
// result := [ chassis , engine , control , weapon ] ;
46292: LD_ADDR_VAR 0 6
46296: PUSH
46297: LD_VAR 0 2
46301: PUSH
46302: LD_VAR 0 3
46306: PUSH
46307: LD_VAR 0 4
46311: PUSH
46312: LD_VAR 0 5
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// end ;
46323: LD_VAR 0 6
46327: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46328: LD_INT 0
46330: PPUSH
// if not chassis or not engine then
46331: LD_VAR 0 1
46335: NOT
46336: IFTRUE 46345
46338: PUSH
46339: LD_VAR 0 2
46343: NOT
46344: OR
46345: IFFALSE 46349
// exit ;
46347: GO 46545
// case engine of engine_solar :
46349: LD_VAR 0 2
46353: PUSH
46354: LD_INT 2
46356: DOUBLE
46357: EQUAL
46358: IFTRUE 46362
46360: GO 46400
46362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46363: LD_ADDR_VAR 0 3
46367: PUSH
46368: LD_INT 11
46370: PUSH
46371: LD_INT 12
46373: PUSH
46374: LD_INT 13
46376: PUSH
46377: LD_INT 14
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 3
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: ST_TO_ADDR
46398: GO 46529
46400: LD_INT 1
46402: DOUBLE
46403: EQUAL
46404: IFTRUE 46408
46406: GO 46470
46408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46409: LD_ADDR_VAR 0 3
46413: PUSH
46414: LD_INT 11
46416: PUSH
46417: LD_INT 12
46419: PUSH
46420: LD_INT 13
46422: PUSH
46423: LD_INT 14
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 3
46434: PUSH
46435: LD_INT 4
46437: PUSH
46438: LD_INT 5
46440: PUSH
46441: LD_INT 21
46443: PUSH
46444: LD_INT 23
46446: PUSH
46447: LD_INT 22
46449: PUSH
46450: LD_INT 24
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
46468: GO 46529
46470: LD_INT 3
46472: DOUBLE
46473: EQUAL
46474: IFTRUE 46478
46476: GO 46528
46478: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46479: LD_ADDR_VAR 0 3
46483: PUSH
46484: LD_INT 13
46486: PUSH
46487: LD_INT 14
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: LD_INT 4
46498: PUSH
46499: LD_INT 5
46501: PUSH
46502: LD_INT 21
46504: PUSH
46505: LD_INT 22
46507: PUSH
46508: LD_INT 23
46510: PUSH
46511: LD_INT 24
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: ST_TO_ADDR
46526: GO 46529
46528: POP
// result := ( chassis in result ) ;
46529: LD_ADDR_VAR 0 3
46533: PUSH
46534: LD_VAR 0 1
46538: PUSH
46539: LD_VAR 0 3
46543: IN
46544: ST_TO_ADDR
// end ;
46545: LD_VAR 0 3
46549: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46550: LD_INT 0
46552: PPUSH
// if not chassis or not weapon then
46553: LD_VAR 0 1
46557: NOT
46558: IFTRUE 46567
46560: PUSH
46561: LD_VAR 0 2
46565: NOT
46566: OR
46567: IFFALSE 46571
// exit ;
46569: GO 47665
// case weapon of us_machine_gun :
46571: LD_VAR 0 2
46575: PUSH
46576: LD_INT 2
46578: DOUBLE
46579: EQUAL
46580: IFTRUE 46584
46582: GO 46614
46584: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46585: LD_ADDR_VAR 0 3
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 3
46598: PUSH
46599: LD_INT 4
46601: PUSH
46602: LD_INT 5
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: ST_TO_ADDR
46612: GO 47649
46614: LD_INT 3
46616: DOUBLE
46617: EQUAL
46618: IFTRUE 46622
46620: GO 46652
46622: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46623: LD_ADDR_VAR 0 3
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 4
46639: PUSH
46640: LD_INT 5
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
46650: GO 47649
46652: LD_INT 11
46654: DOUBLE
46655: EQUAL
46656: IFTRUE 46660
46658: GO 46690
46660: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46661: LD_ADDR_VAR 0 3
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 4
46677: PUSH
46678: LD_INT 5
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
46688: GO 47649
46690: LD_INT 4
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46724
46698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46699: LD_ADDR_VAR 0 3
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: LD_INT 4
46712: PUSH
46713: LD_INT 5
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
46722: GO 47649
46724: LD_INT 5
46726: DOUBLE
46727: EQUAL
46728: IFTRUE 46732
46730: GO 46758
46732: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46733: LD_ADDR_VAR 0 3
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: LD_INT 4
46746: PUSH
46747: LD_INT 5
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: ST_TO_ADDR
46756: GO 47649
46758: LD_INT 9
46760: DOUBLE
46761: EQUAL
46762: IFTRUE 46766
46764: GO 46792
46766: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46767: LD_ADDR_VAR 0 3
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 3
46777: PUSH
46778: LD_INT 4
46780: PUSH
46781: LD_INT 5
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
46790: GO 47649
46792: LD_INT 7
46794: DOUBLE
46795: EQUAL
46796: IFTRUE 46800
46798: GO 46826
46800: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46801: LD_ADDR_VAR 0 3
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 4
46814: PUSH
46815: LD_INT 5
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: ST_TO_ADDR
46824: GO 47649
46826: LD_INT 12
46828: DOUBLE
46829: EQUAL
46830: IFTRUE 46834
46832: GO 46860
46834: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46835: LD_ADDR_VAR 0 3
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: LD_INT 4
46848: PUSH
46849: LD_INT 5
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: ST_TO_ADDR
46858: GO 47649
46860: LD_INT 13
46862: DOUBLE
46863: EQUAL
46864: IFTRUE 46868
46866: GO 46894
46868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46869: LD_ADDR_VAR 0 3
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: LD_INT 4
46882: PUSH
46883: LD_INT 5
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
46892: GO 47649
46894: LD_INT 14
46896: DOUBLE
46897: EQUAL
46898: IFTRUE 46902
46900: GO 46920
46902: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46903: LD_ADDR_VAR 0 3
46907: PUSH
46908: LD_INT 4
46910: PUSH
46911: LD_INT 5
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: ST_TO_ADDR
46918: GO 47649
46920: LD_INT 6
46922: DOUBLE
46923: EQUAL
46924: IFTRUE 46928
46926: GO 46946
46928: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46929: LD_ADDR_VAR 0 3
46933: PUSH
46934: LD_INT 4
46936: PUSH
46937: LD_INT 5
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: ST_TO_ADDR
46944: GO 47649
46946: LD_INT 10
46948: DOUBLE
46949: EQUAL
46950: IFTRUE 46954
46952: GO 46972
46954: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46955: LD_ADDR_VAR 0 3
46959: PUSH
46960: LD_INT 4
46962: PUSH
46963: LD_INT 5
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: ST_TO_ADDR
46970: GO 47649
46972: LD_INT 22
46974: DOUBLE
46975: EQUAL
46976: IFTRUE 46980
46978: GO 47006
46980: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46981: LD_ADDR_VAR 0 3
46985: PUSH
46986: LD_INT 11
46988: PUSH
46989: LD_INT 12
46991: PUSH
46992: LD_INT 13
46994: PUSH
46995: LD_INT 14
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: ST_TO_ADDR
47004: GO 47649
47006: LD_INT 23
47008: DOUBLE
47009: EQUAL
47010: IFTRUE 47014
47012: GO 47040
47014: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47015: LD_ADDR_VAR 0 3
47019: PUSH
47020: LD_INT 11
47022: PUSH
47023: LD_INT 12
47025: PUSH
47026: LD_INT 13
47028: PUSH
47029: LD_INT 14
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
47038: GO 47649
47040: LD_INT 24
47042: DOUBLE
47043: EQUAL
47044: IFTRUE 47048
47046: GO 47074
47048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47049: LD_ADDR_VAR 0 3
47053: PUSH
47054: LD_INT 11
47056: PUSH
47057: LD_INT 12
47059: PUSH
47060: LD_INT 13
47062: PUSH
47063: LD_INT 14
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
47072: GO 47649
47074: LD_INT 30
47076: DOUBLE
47077: EQUAL
47078: IFTRUE 47082
47080: GO 47108
47082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47083: LD_ADDR_VAR 0 3
47087: PUSH
47088: LD_INT 11
47090: PUSH
47091: LD_INT 12
47093: PUSH
47094: LD_INT 13
47096: PUSH
47097: LD_INT 14
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
47106: GO 47649
47108: LD_INT 25
47110: DOUBLE
47111: EQUAL
47112: IFTRUE 47116
47114: GO 47134
47116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47117: LD_ADDR_VAR 0 3
47121: PUSH
47122: LD_INT 13
47124: PUSH
47125: LD_INT 14
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: ST_TO_ADDR
47132: GO 47649
47134: LD_INT 27
47136: DOUBLE
47137: EQUAL
47138: IFTRUE 47142
47140: GO 47160
47142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47143: LD_ADDR_VAR 0 3
47147: PUSH
47148: LD_INT 13
47150: PUSH
47151: LD_INT 14
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: ST_TO_ADDR
47158: GO 47649
47160: LD_INT 92
47162: DOUBLE
47163: EQUAL
47164: IFTRUE 47168
47166: GO 47194
47168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47169: LD_ADDR_VAR 0 3
47173: PUSH
47174: LD_INT 11
47176: PUSH
47177: LD_INT 12
47179: PUSH
47180: LD_INT 13
47182: PUSH
47183: LD_INT 14
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
47192: GO 47649
47194: LD_INT 28
47196: DOUBLE
47197: EQUAL
47198: IFTRUE 47202
47200: GO 47220
47202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47203: LD_ADDR_VAR 0 3
47207: PUSH
47208: LD_INT 13
47210: PUSH
47211: LD_INT 14
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: ST_TO_ADDR
47218: GO 47649
47220: LD_INT 29
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47246
47228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47229: LD_ADDR_VAR 0 3
47233: PUSH
47234: LD_INT 13
47236: PUSH
47237: LD_INT 14
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: ST_TO_ADDR
47244: GO 47649
47246: LD_INT 31
47248: DOUBLE
47249: EQUAL
47250: IFTRUE 47254
47252: GO 47272
47254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47255: LD_ADDR_VAR 0 3
47259: PUSH
47260: LD_INT 13
47262: PUSH
47263: LD_INT 14
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: ST_TO_ADDR
47270: GO 47649
47272: LD_INT 26
47274: DOUBLE
47275: EQUAL
47276: IFTRUE 47280
47278: GO 47298
47280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47281: LD_ADDR_VAR 0 3
47285: PUSH
47286: LD_INT 13
47288: PUSH
47289: LD_INT 14
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: ST_TO_ADDR
47296: GO 47649
47298: LD_INT 42
47300: DOUBLE
47301: EQUAL
47302: IFTRUE 47306
47304: GO 47332
47306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_INT 21
47314: PUSH
47315: LD_INT 22
47317: PUSH
47318: LD_INT 23
47320: PUSH
47321: LD_INT 24
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: ST_TO_ADDR
47330: GO 47649
47332: LD_INT 43
47334: DOUBLE
47335: EQUAL
47336: IFTRUE 47340
47338: GO 47366
47340: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47341: LD_ADDR_VAR 0 3
47345: PUSH
47346: LD_INT 21
47348: PUSH
47349: LD_INT 22
47351: PUSH
47352: LD_INT 23
47354: PUSH
47355: LD_INT 24
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: ST_TO_ADDR
47364: GO 47649
47366: LD_INT 44
47368: DOUBLE
47369: EQUAL
47370: IFTRUE 47374
47372: GO 47400
47374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47375: LD_ADDR_VAR 0 3
47379: PUSH
47380: LD_INT 21
47382: PUSH
47383: LD_INT 22
47385: PUSH
47386: LD_INT 23
47388: PUSH
47389: LD_INT 24
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: ST_TO_ADDR
47398: GO 47649
47400: LD_INT 45
47402: DOUBLE
47403: EQUAL
47404: IFTRUE 47408
47406: GO 47434
47408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47409: LD_ADDR_VAR 0 3
47413: PUSH
47414: LD_INT 21
47416: PUSH
47417: LD_INT 22
47419: PUSH
47420: LD_INT 23
47422: PUSH
47423: LD_INT 24
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
47432: GO 47649
47434: LD_INT 49
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47442
47440: GO 47468
47442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47443: LD_ADDR_VAR 0 3
47447: PUSH
47448: LD_INT 21
47450: PUSH
47451: LD_INT 22
47453: PUSH
47454: LD_INT 23
47456: PUSH
47457: LD_INT 24
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
47466: GO 47649
47468: LD_INT 51
47470: DOUBLE
47471: EQUAL
47472: IFTRUE 47476
47474: GO 47502
47476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47477: LD_ADDR_VAR 0 3
47481: PUSH
47482: LD_INT 21
47484: PUSH
47485: LD_INT 22
47487: PUSH
47488: LD_INT 23
47490: PUSH
47491: LD_INT 24
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
47500: GO 47649
47502: LD_INT 52
47504: DOUBLE
47505: EQUAL
47506: IFTRUE 47510
47508: GO 47536
47510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47511: LD_ADDR_VAR 0 3
47515: PUSH
47516: LD_INT 21
47518: PUSH
47519: LD_INT 22
47521: PUSH
47522: LD_INT 23
47524: PUSH
47525: LD_INT 24
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
47534: GO 47649
47536: LD_INT 53
47538: DOUBLE
47539: EQUAL
47540: IFTRUE 47544
47542: GO 47562
47544: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47545: LD_ADDR_VAR 0 3
47549: PUSH
47550: LD_INT 23
47552: PUSH
47553: LD_INT 24
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: ST_TO_ADDR
47560: GO 47649
47562: LD_INT 46
47564: DOUBLE
47565: EQUAL
47566: IFTRUE 47570
47568: GO 47588
47570: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47571: LD_ADDR_VAR 0 3
47575: PUSH
47576: LD_INT 23
47578: PUSH
47579: LD_INT 24
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: ST_TO_ADDR
47586: GO 47649
47588: LD_INT 47
47590: DOUBLE
47591: EQUAL
47592: IFTRUE 47596
47594: GO 47614
47596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
47597: LD_ADDR_VAR 0 3
47601: PUSH
47602: LD_INT 23
47604: PUSH
47605: LD_INT 24
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: ST_TO_ADDR
47612: GO 47649
47614: LD_INT 98
47616: DOUBLE
47617: EQUAL
47618: IFTRUE 47622
47620: GO 47648
47622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47623: LD_ADDR_VAR 0 3
47627: PUSH
47628: LD_INT 21
47630: PUSH
47631: LD_INT 22
47633: PUSH
47634: LD_INT 23
47636: PUSH
47637: LD_INT 24
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: ST_TO_ADDR
47646: GO 47649
47648: POP
// result := ( chassis in result ) ;
47649: LD_ADDR_VAR 0 3
47653: PUSH
47654: LD_VAR 0 1
47658: PUSH
47659: LD_VAR 0 3
47663: IN
47664: ST_TO_ADDR
// end ;
47665: LD_VAR 0 3
47669: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47670: LD_INT 0
47672: PPUSH
47673: PPUSH
47674: PPUSH
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
// result := array ;
47679: LD_ADDR_VAR 0 5
47683: PUSH
47684: LD_VAR 0 1
47688: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47689: LD_VAR 0 1
47693: NOT
47694: IFTRUE 47703
47696: PUSH
47697: LD_VAR 0 2
47701: NOT
47702: OR
47703: IFTRUE 47712
47705: PUSH
47706: LD_VAR 0 3
47710: NOT
47711: OR
47712: IFTRUE 47726
47714: PUSH
47715: LD_VAR 0 2
47719: PUSH
47720: LD_VAR 0 1
47724: GREATER
47725: OR
47726: IFTRUE 47740
47728: PUSH
47729: LD_VAR 0 3
47733: PUSH
47734: LD_VAR 0 1
47738: GREATER
47739: OR
47740: IFFALSE 47744
// exit ;
47742: GO 48040
// if direction then
47744: LD_VAR 0 4
47748: IFFALSE 47812
// begin d := 1 ;
47750: LD_ADDR_VAR 0 9
47754: PUSH
47755: LD_INT 1
47757: ST_TO_ADDR
// if i_from > i_to then
47758: LD_VAR 0 2
47762: PUSH
47763: LD_VAR 0 3
47767: GREATER
47768: IFFALSE 47794
// length := ( array - i_from ) + i_to else
47770: LD_ADDR_VAR 0 11
47774: PUSH
47775: LD_VAR 0 1
47779: PUSH
47780: LD_VAR 0 2
47784: MINUS
47785: PUSH
47786: LD_VAR 0 3
47790: PLUS
47791: ST_TO_ADDR
47792: GO 47810
// length := i_to - i_from ;
47794: LD_ADDR_VAR 0 11
47798: PUSH
47799: LD_VAR 0 3
47803: PUSH
47804: LD_VAR 0 2
47808: MINUS
47809: ST_TO_ADDR
// end else
47810: GO 47873
// begin d := - 1 ;
47812: LD_ADDR_VAR 0 9
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: ST_TO_ADDR
// if i_from > i_to then
47821: LD_VAR 0 2
47825: PUSH
47826: LD_VAR 0 3
47830: GREATER
47831: IFFALSE 47851
// length := i_from - i_to else
47833: LD_ADDR_VAR 0 11
47837: PUSH
47838: LD_VAR 0 2
47842: PUSH
47843: LD_VAR 0 3
47847: MINUS
47848: ST_TO_ADDR
47849: GO 47873
// length := ( array - i_to ) + i_from ;
47851: LD_ADDR_VAR 0 11
47855: PUSH
47856: LD_VAR 0 1
47860: PUSH
47861: LD_VAR 0 3
47865: MINUS
47866: PUSH
47867: LD_VAR 0 2
47871: PLUS
47872: ST_TO_ADDR
// end ; if not length then
47873: LD_VAR 0 11
47877: NOT
47878: IFFALSE 47882
// exit ;
47880: GO 48040
// tmp := array ;
47882: LD_ADDR_VAR 0 10
47886: PUSH
47887: LD_VAR 0 1
47891: ST_TO_ADDR
// for i = 1 to length do
47892: LD_ADDR_VAR 0 6
47896: PUSH
47897: DOUBLE
47898: LD_INT 1
47900: DEC
47901: ST_TO_ADDR
47902: LD_VAR 0 11
47906: PUSH
47907: FOR_TO
47908: IFFALSE 48028
// begin for j = 1 to array do
47910: LD_ADDR_VAR 0 7
47914: PUSH
47915: DOUBLE
47916: LD_INT 1
47918: DEC
47919: ST_TO_ADDR
47920: LD_VAR 0 1
47924: PUSH
47925: FOR_TO
47926: IFFALSE 48014
// begin k := j + d ;
47928: LD_ADDR_VAR 0 8
47932: PUSH
47933: LD_VAR 0 7
47937: PUSH
47938: LD_VAR 0 9
47942: PLUS
47943: ST_TO_ADDR
// if k > array then
47944: LD_VAR 0 8
47948: PUSH
47949: LD_VAR 0 1
47953: GREATER
47954: IFFALSE 47964
// k := 1 ;
47956: LD_ADDR_VAR 0 8
47960: PUSH
47961: LD_INT 1
47963: ST_TO_ADDR
// if not k then
47964: LD_VAR 0 8
47968: NOT
47969: IFFALSE 47981
// k := array ;
47971: LD_ADDR_VAR 0 8
47975: PUSH
47976: LD_VAR 0 1
47980: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47981: LD_ADDR_VAR 0 10
47985: PUSH
47986: LD_VAR 0 10
47990: PPUSH
47991: LD_VAR 0 8
47995: PPUSH
47996: LD_VAR 0 1
48000: PUSH
48001: LD_VAR 0 7
48005: ARRAY
48006: PPUSH
48007: CALL_OW 1
48011: ST_TO_ADDR
// end ;
48012: GO 47925
48014: POP
48015: POP
// array := tmp ;
48016: LD_ADDR_VAR 0 1
48020: PUSH
48021: LD_VAR 0 10
48025: ST_TO_ADDR
// end ;
48026: GO 47907
48028: POP
48029: POP
// result := array ;
48030: LD_ADDR_VAR 0 5
48034: PUSH
48035: LD_VAR 0 1
48039: ST_TO_ADDR
// end ;
48040: LD_VAR 0 5
48044: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48045: LD_INT 0
48047: PPUSH
48048: PPUSH
// result := 0 ;
48049: LD_ADDR_VAR 0 3
48053: PUSH
48054: LD_INT 0
48056: ST_TO_ADDR
// if not array or not value in array then
48057: LD_VAR 0 1
48061: NOT
48062: IFTRUE 48077
48064: PUSH
48065: LD_VAR 0 2
48069: PUSH
48070: LD_VAR 0 1
48074: IN
48075: NOT
48076: OR
48077: IFFALSE 48081
// exit ;
48079: GO 48135
// for i = 1 to array do
48081: LD_ADDR_VAR 0 4
48085: PUSH
48086: DOUBLE
48087: LD_INT 1
48089: DEC
48090: ST_TO_ADDR
48091: LD_VAR 0 1
48095: PUSH
48096: FOR_TO
48097: IFFALSE 48133
// if value = array [ i ] then
48099: LD_VAR 0 2
48103: PUSH
48104: LD_VAR 0 1
48108: PUSH
48109: LD_VAR 0 4
48113: ARRAY
48114: EQUAL
48115: IFFALSE 48131
// begin result := i ;
48117: LD_ADDR_VAR 0 3
48121: PUSH
48122: LD_VAR 0 4
48126: ST_TO_ADDR
// exit ;
48127: POP
48128: POP
48129: GO 48135
// end ;
48131: GO 48096
48133: POP
48134: POP
// end ;
48135: LD_VAR 0 3
48139: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48140: LD_INT 0
48142: PPUSH
// vc_chassis := chassis ;
48143: LD_ADDR_OWVAR 37
48147: PUSH
48148: LD_VAR 0 1
48152: ST_TO_ADDR
// vc_engine := engine ;
48153: LD_ADDR_OWVAR 39
48157: PUSH
48158: LD_VAR 0 2
48162: ST_TO_ADDR
// vc_control := control ;
48163: LD_ADDR_OWVAR 38
48167: PUSH
48168: LD_VAR 0 3
48172: ST_TO_ADDR
// vc_weapon := weapon ;
48173: LD_ADDR_OWVAR 40
48177: PUSH
48178: LD_VAR 0 4
48182: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48183: LD_ADDR_OWVAR 41
48187: PUSH
48188: LD_VAR 0 5
48192: ST_TO_ADDR
// end ;
48193: LD_VAR 0 6
48197: RET
// export function WantPlant ( unit ) ; var task ; begin
48198: LD_INT 0
48200: PPUSH
48201: PPUSH
// result := false ;
48202: LD_ADDR_VAR 0 2
48206: PUSH
48207: LD_INT 0
48209: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48210: LD_ADDR_VAR 0 3
48214: PUSH
48215: LD_VAR 0 1
48219: PPUSH
48220: CALL_OW 437
48224: ST_TO_ADDR
// if task then
48225: LD_VAR 0 3
48229: IFFALSE 48257
// if task [ 1 ] [ 1 ] = p then
48231: LD_VAR 0 3
48235: PUSH
48236: LD_INT 1
48238: ARRAY
48239: PUSH
48240: LD_INT 1
48242: ARRAY
48243: PUSH
48244: LD_STRING p
48246: EQUAL
48247: IFFALSE 48257
// result := true ;
48249: LD_ADDR_VAR 0 2
48253: PUSH
48254: LD_INT 1
48256: ST_TO_ADDR
// end ;
48257: LD_VAR 0 2
48261: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48262: LD_INT 0
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
// if pos < 1 then
48268: LD_VAR 0 2
48272: PUSH
48273: LD_INT 1
48275: LESS
48276: IFFALSE 48280
// exit ;
48278: GO 48583
// if pos = 1 then
48280: LD_VAR 0 2
48284: PUSH
48285: LD_INT 1
48287: EQUAL
48288: IFFALSE 48321
// result := Replace ( arr , pos [ 1 ] , value ) else
48290: LD_ADDR_VAR 0 4
48294: PUSH
48295: LD_VAR 0 1
48299: PPUSH
48300: LD_VAR 0 2
48304: PUSH
48305: LD_INT 1
48307: ARRAY
48308: PPUSH
48309: LD_VAR 0 3
48313: PPUSH
48314: CALL_OW 1
48318: ST_TO_ADDR
48319: GO 48583
// begin tmp := arr ;
48321: LD_ADDR_VAR 0 6
48325: PUSH
48326: LD_VAR 0 1
48330: ST_TO_ADDR
// s_arr := [ tmp ] ;
48331: LD_ADDR_VAR 0 7
48335: PUSH
48336: LD_VAR 0 6
48340: PUSH
48341: EMPTY
48342: LIST
48343: ST_TO_ADDR
// for i = 1 to pos - 1 do
48344: LD_ADDR_VAR 0 5
48348: PUSH
48349: DOUBLE
48350: LD_INT 1
48352: DEC
48353: ST_TO_ADDR
48354: LD_VAR 0 2
48358: PUSH
48359: LD_INT 1
48361: MINUS
48362: PUSH
48363: FOR_TO
48364: IFFALSE 48409
// begin tmp := tmp [ pos [ i ] ] ;
48366: LD_ADDR_VAR 0 6
48370: PUSH
48371: LD_VAR 0 6
48375: PUSH
48376: LD_VAR 0 2
48380: PUSH
48381: LD_VAR 0 5
48385: ARRAY
48386: ARRAY
48387: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48388: LD_ADDR_VAR 0 7
48392: PUSH
48393: LD_VAR 0 7
48397: PUSH
48398: LD_VAR 0 6
48402: PUSH
48403: EMPTY
48404: LIST
48405: ADD
48406: ST_TO_ADDR
// end ;
48407: GO 48363
48409: POP
48410: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48411: LD_ADDR_VAR 0 6
48415: PUSH
48416: LD_VAR 0 6
48420: PPUSH
48421: LD_VAR 0 2
48425: PUSH
48426: LD_VAR 0 2
48430: ARRAY
48431: PPUSH
48432: LD_VAR 0 3
48436: PPUSH
48437: CALL_OW 1
48441: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48442: LD_ADDR_VAR 0 7
48446: PUSH
48447: LD_VAR 0 7
48451: PPUSH
48452: LD_VAR 0 7
48456: PPUSH
48457: LD_VAR 0 6
48461: PPUSH
48462: CALL_OW 1
48466: ST_TO_ADDR
// for i = s_arr downto 2 do
48467: LD_ADDR_VAR 0 5
48471: PUSH
48472: DOUBLE
48473: LD_VAR 0 7
48477: INC
48478: ST_TO_ADDR
48479: LD_INT 2
48481: PUSH
48482: FOR_DOWNTO
48483: IFFALSE 48567
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48485: LD_ADDR_VAR 0 6
48489: PUSH
48490: LD_VAR 0 7
48494: PUSH
48495: LD_VAR 0 5
48499: PUSH
48500: LD_INT 1
48502: MINUS
48503: ARRAY
48504: PPUSH
48505: LD_VAR 0 2
48509: PUSH
48510: LD_VAR 0 5
48514: PUSH
48515: LD_INT 1
48517: MINUS
48518: ARRAY
48519: PPUSH
48520: LD_VAR 0 7
48524: PUSH
48525: LD_VAR 0 5
48529: ARRAY
48530: PPUSH
48531: CALL_OW 1
48535: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48536: LD_ADDR_VAR 0 7
48540: PUSH
48541: LD_VAR 0 7
48545: PPUSH
48546: LD_VAR 0 5
48550: PUSH
48551: LD_INT 1
48553: MINUS
48554: PPUSH
48555: LD_VAR 0 6
48559: PPUSH
48560: CALL_OW 1
48564: ST_TO_ADDR
// end ;
48565: GO 48482
48567: POP
48568: POP
// result := s_arr [ 1 ] ;
48569: LD_ADDR_VAR 0 4
48573: PUSH
48574: LD_VAR 0 7
48578: PUSH
48579: LD_INT 1
48581: ARRAY
48582: ST_TO_ADDR
// end ; end ;
48583: LD_VAR 0 4
48587: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48588: LD_INT 0
48590: PPUSH
48591: PPUSH
// if not list then
48592: LD_VAR 0 1
48596: NOT
48597: IFFALSE 48601
// exit ;
48599: GO 48692
// i := list [ pos1 ] ;
48601: LD_ADDR_VAR 0 5
48605: PUSH
48606: LD_VAR 0 1
48610: PUSH
48611: LD_VAR 0 2
48615: ARRAY
48616: ST_TO_ADDR
// if not i then
48617: LD_VAR 0 5
48621: NOT
48622: IFFALSE 48626
// exit ;
48624: GO 48692
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48626: LD_ADDR_VAR 0 1
48630: PUSH
48631: LD_VAR 0 1
48635: PPUSH
48636: LD_VAR 0 2
48640: PPUSH
48641: LD_VAR 0 1
48645: PUSH
48646: LD_VAR 0 3
48650: ARRAY
48651: PPUSH
48652: CALL_OW 1
48656: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48657: LD_ADDR_VAR 0 1
48661: PUSH
48662: LD_VAR 0 1
48666: PPUSH
48667: LD_VAR 0 3
48671: PPUSH
48672: LD_VAR 0 5
48676: PPUSH
48677: CALL_OW 1
48681: ST_TO_ADDR
// result := list ;
48682: LD_ADDR_VAR 0 4
48686: PUSH
48687: LD_VAR 0 1
48691: ST_TO_ADDR
// end ;
48692: LD_VAR 0 4
48696: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48697: LD_INT 0
48699: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48700: LD_ADDR_VAR 0 5
48704: PUSH
48705: LD_VAR 0 1
48709: PPUSH
48710: CALL_OW 250
48714: PPUSH
48715: LD_VAR 0 1
48719: PPUSH
48720: CALL_OW 251
48724: PPUSH
48725: LD_VAR 0 2
48729: PPUSH
48730: LD_VAR 0 3
48734: PPUSH
48735: LD_VAR 0 4
48739: PPUSH
48740: CALL 49122 0 5
48744: ST_TO_ADDR
// end ;
48745: LD_VAR 0 5
48749: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48750: LD_INT 0
48752: PPUSH
48753: PPUSH
48754: PPUSH
48755: PPUSH
// if not list or not unit then
48756: LD_VAR 0 2
48760: NOT
48761: IFTRUE 48770
48763: PUSH
48764: LD_VAR 0 1
48768: NOT
48769: OR
48770: IFFALSE 48774
// exit ;
48772: GO 49117
// result := [ ] ;
48774: LD_ADDR_VAR 0 5
48778: PUSH
48779: EMPTY
48780: ST_TO_ADDR
// for i in list do
48781: LD_ADDR_VAR 0 6
48785: PUSH
48786: LD_VAR 0 2
48790: PUSH
48791: FOR_IN
48792: IFFALSE 49010
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48794: LD_ADDR_VAR 0 8
48798: PUSH
48799: LD_VAR 0 1
48803: PPUSH
48804: LD_VAR 0 6
48808: PUSH
48809: LD_INT 1
48811: ARRAY
48812: PPUSH
48813: LD_VAR 0 6
48817: PUSH
48818: LD_INT 2
48820: ARRAY
48821: PPUSH
48822: CALL_OW 297
48826: ST_TO_ADDR
// if not Count ( result ) then
48827: LD_VAR 0 5
48831: PPUSH
48832: CALL 45344 0 1
48836: NOT
48837: IFFALSE 48870
// begin result := Join ( result , [ i , tmp ] ) ;
48839: LD_ADDR_VAR 0 5
48843: PUSH
48844: LD_VAR 0 5
48848: PPUSH
48849: LD_VAR 0 6
48853: PUSH
48854: LD_VAR 0 8
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PPUSH
48863: CALL 81310 0 2
48867: ST_TO_ADDR
// continue ;
48868: GO 48791
// end ; if result [ result ] [ 2 ] <= tmp then
48870: LD_VAR 0 5
48874: PUSH
48875: LD_VAR 0 5
48879: ARRAY
48880: PUSH
48881: LD_INT 2
48883: ARRAY
48884: PUSH
48885: LD_VAR 0 8
48889: LESSEQUAL
48890: IFFALSE 48923
// result := Join ( result , [ i , tmp ] ) else
48892: LD_ADDR_VAR 0 5
48896: PUSH
48897: LD_VAR 0 5
48901: PPUSH
48902: LD_VAR 0 6
48906: PUSH
48907: LD_VAR 0 8
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PPUSH
48916: CALL 81310 0 2
48920: ST_TO_ADDR
48921: GO 49008
// begin for j := 1 to Count ( result ) do
48923: LD_ADDR_VAR 0 7
48927: PUSH
48928: DOUBLE
48929: LD_INT 1
48931: DEC
48932: ST_TO_ADDR
48933: LD_VAR 0 5
48937: PPUSH
48938: CALL 45344 0 1
48942: PUSH
48943: FOR_TO
48944: IFFALSE 49006
// begin if tmp < result [ j ] [ 2 ] then
48946: LD_VAR 0 8
48950: PUSH
48951: LD_VAR 0 5
48955: PUSH
48956: LD_VAR 0 7
48960: ARRAY
48961: PUSH
48962: LD_INT 2
48964: ARRAY
48965: LESS
48966: IFFALSE 49004
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48968: LD_ADDR_VAR 0 5
48972: PUSH
48973: LD_VAR 0 5
48977: PPUSH
48978: LD_VAR 0 7
48982: PPUSH
48983: LD_VAR 0 6
48987: PUSH
48988: LD_VAR 0 8
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PPUSH
48997: CALL_OW 2
49001: ST_TO_ADDR
// break ;
49002: GO 49006
// end ; end ;
49004: GO 48943
49006: POP
49007: POP
// end ; end ;
49008: GO 48791
49010: POP
49011: POP
// if result and not asc then
49012: LD_VAR 0 5
49016: IFFALSE 49025
49018: PUSH
49019: LD_VAR 0 3
49023: NOT
49024: AND
49025: IFFALSE 49042
// result := ReverseArray ( result ) ;
49027: LD_ADDR_VAR 0 5
49031: PUSH
49032: LD_VAR 0 5
49036: PPUSH
49037: CALL 76400 0 1
49041: ST_TO_ADDR
// tmp := [ ] ;
49042: LD_ADDR_VAR 0 8
49046: PUSH
49047: EMPTY
49048: ST_TO_ADDR
// if mode then
49049: LD_VAR 0 4
49053: IFFALSE 49117
// begin for i := 1 to result do
49055: LD_ADDR_VAR 0 6
49059: PUSH
49060: DOUBLE
49061: LD_INT 1
49063: DEC
49064: ST_TO_ADDR
49065: LD_VAR 0 5
49069: PUSH
49070: FOR_TO
49071: IFFALSE 49105
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
49073: LD_ADDR_VAR 0 8
49077: PUSH
49078: LD_VAR 0 8
49082: PPUSH
49083: LD_VAR 0 5
49087: PUSH
49088: LD_VAR 0 6
49092: ARRAY
49093: PUSH
49094: LD_INT 1
49096: ARRAY
49097: PPUSH
49098: CALL 81310 0 2
49102: ST_TO_ADDR
49103: GO 49070
49105: POP
49106: POP
// result := tmp ;
49107: LD_ADDR_VAR 0 5
49111: PUSH
49112: LD_VAR 0 8
49116: ST_TO_ADDR
// end ; end ;
49117: LD_VAR 0 5
49121: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49122: LD_INT 0
49124: PPUSH
49125: PPUSH
49126: PPUSH
49127: PPUSH
// if not list then
49128: LD_VAR 0 3
49132: NOT
49133: IFFALSE 49137
// exit ;
49135: GO 49527
// result := [ ] ;
49137: LD_ADDR_VAR 0 6
49141: PUSH
49142: EMPTY
49143: ST_TO_ADDR
// for i in list do
49144: LD_ADDR_VAR 0 7
49148: PUSH
49149: LD_VAR 0 3
49153: PUSH
49154: FOR_IN
49155: IFFALSE 49357
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49157: LD_ADDR_VAR 0 9
49161: PUSH
49162: LD_VAR 0 7
49166: PPUSH
49167: LD_VAR 0 1
49171: PPUSH
49172: LD_VAR 0 2
49176: PPUSH
49177: CALL_OW 297
49181: ST_TO_ADDR
// if not result then
49182: LD_VAR 0 6
49186: NOT
49187: IFFALSE 49213
// result := [ [ i , tmp ] ] else
49189: LD_ADDR_VAR 0 6
49193: PUSH
49194: LD_VAR 0 7
49198: PUSH
49199: LD_VAR 0 9
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: EMPTY
49209: LIST
49210: ST_TO_ADDR
49211: GO 49355
// begin if result [ result ] [ 2 ] <= tmp then
49213: LD_VAR 0 6
49217: PUSH
49218: LD_VAR 0 6
49222: ARRAY
49223: PUSH
49224: LD_INT 2
49226: ARRAY
49227: PUSH
49228: LD_VAR 0 9
49232: LESSEQUAL
49233: IFFALSE 49275
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49235: LD_ADDR_VAR 0 6
49239: PUSH
49240: LD_VAR 0 6
49244: PPUSH
49245: LD_VAR 0 6
49249: PUSH
49250: LD_INT 1
49252: PLUS
49253: PPUSH
49254: LD_VAR 0 7
49258: PUSH
49259: LD_VAR 0 9
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PPUSH
49268: CALL_OW 2
49272: ST_TO_ADDR
49273: GO 49355
// for j := 1 to result do
49275: LD_ADDR_VAR 0 8
49279: PUSH
49280: DOUBLE
49281: LD_INT 1
49283: DEC
49284: ST_TO_ADDR
49285: LD_VAR 0 6
49289: PUSH
49290: FOR_TO
49291: IFFALSE 49353
// begin if tmp < result [ j ] [ 2 ] then
49293: LD_VAR 0 9
49297: PUSH
49298: LD_VAR 0 6
49302: PUSH
49303: LD_VAR 0 8
49307: ARRAY
49308: PUSH
49309: LD_INT 2
49311: ARRAY
49312: LESS
49313: IFFALSE 49351
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49315: LD_ADDR_VAR 0 6
49319: PUSH
49320: LD_VAR 0 6
49324: PPUSH
49325: LD_VAR 0 8
49329: PPUSH
49330: LD_VAR 0 7
49334: PUSH
49335: LD_VAR 0 9
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PPUSH
49344: CALL_OW 2
49348: ST_TO_ADDR
// break ;
49349: GO 49353
// end ; end ;
49351: GO 49290
49353: POP
49354: POP
// end ; end ;
49355: GO 49154
49357: POP
49358: POP
// if result and not asc then
49359: LD_VAR 0 6
49363: IFFALSE 49372
49365: PUSH
49366: LD_VAR 0 4
49370: NOT
49371: AND
49372: IFFALSE 49447
// begin tmp := result ;
49374: LD_ADDR_VAR 0 9
49378: PUSH
49379: LD_VAR 0 6
49383: ST_TO_ADDR
// for i = tmp downto 1 do
49384: LD_ADDR_VAR 0 7
49388: PUSH
49389: DOUBLE
49390: LD_VAR 0 9
49394: INC
49395: ST_TO_ADDR
49396: LD_INT 1
49398: PUSH
49399: FOR_DOWNTO
49400: IFFALSE 49445
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49402: LD_ADDR_VAR 0 6
49406: PUSH
49407: LD_VAR 0 6
49411: PPUSH
49412: LD_VAR 0 9
49416: PUSH
49417: LD_VAR 0 7
49421: MINUS
49422: PUSH
49423: LD_INT 1
49425: PLUS
49426: PPUSH
49427: LD_VAR 0 9
49431: PUSH
49432: LD_VAR 0 7
49436: ARRAY
49437: PPUSH
49438: CALL_OW 1
49442: ST_TO_ADDR
49443: GO 49399
49445: POP
49446: POP
// end ; tmp := [ ] ;
49447: LD_ADDR_VAR 0 9
49451: PUSH
49452: EMPTY
49453: ST_TO_ADDR
// if mode then
49454: LD_VAR 0 5
49458: IFFALSE 49527
// begin for i = 1 to result do
49460: LD_ADDR_VAR 0 7
49464: PUSH
49465: DOUBLE
49466: LD_INT 1
49468: DEC
49469: ST_TO_ADDR
49470: LD_VAR 0 6
49474: PUSH
49475: FOR_TO
49476: IFFALSE 49515
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49478: LD_ADDR_VAR 0 9
49482: PUSH
49483: LD_VAR 0 9
49487: PPUSH
49488: LD_VAR 0 7
49492: PPUSH
49493: LD_VAR 0 6
49497: PUSH
49498: LD_VAR 0 7
49502: ARRAY
49503: PUSH
49504: LD_INT 1
49506: ARRAY
49507: PPUSH
49508: CALL_OW 1
49512: ST_TO_ADDR
49513: GO 49475
49515: POP
49516: POP
// result := tmp ;
49517: LD_ADDR_VAR 0 6
49521: PUSH
49522: LD_VAR 0 9
49526: ST_TO_ADDR
// end ; end ;
49527: LD_VAR 0 6
49531: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49532: LD_INT 0
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49540: LD_ADDR_VAR 0 5
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: ST_TO_ADDR
// if not x or not y then
49562: LD_VAR 0 2
49566: NOT
49567: IFTRUE 49576
49569: PUSH
49570: LD_VAR 0 3
49574: NOT
49575: OR
49576: IFFALSE 49580
// exit ;
49578: GO 51236
// if not range then
49580: LD_VAR 0 4
49584: NOT
49585: IFFALSE 49595
// range := 10 ;
49587: LD_ADDR_VAR 0 4
49591: PUSH
49592: LD_INT 10
49594: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49595: LD_ADDR_VAR 0 8
49599: PUSH
49600: LD_INT 81
49602: PUSH
49603: LD_VAR 0 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 92
49614: PUSH
49615: LD_VAR 0 2
49619: PUSH
49620: LD_VAR 0 3
49624: PUSH
49625: LD_VAR 0 4
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 21
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: PPUSH
49658: CALL_OW 69
49662: ST_TO_ADDR
// if not tmp then
49663: LD_VAR 0 8
49667: NOT
49668: IFFALSE 49672
// exit ;
49670: GO 51236
// for i in tmp do
49672: LD_ADDR_VAR 0 6
49676: PUSH
49677: LD_VAR 0 8
49681: PUSH
49682: FOR_IN
49683: IFFALSE 51211
// begin points := [ 0 , 0 , 0 ] ;
49685: LD_ADDR_VAR 0 9
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// bpoints := 1 ;
49704: LD_ADDR_VAR 0 10
49708: PUSH
49709: LD_INT 1
49711: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49712: LD_VAR 0 6
49716: PPUSH
49717: CALL_OW 247
49721: PUSH
49722: LD_INT 1
49724: DOUBLE
49725: EQUAL
49726: IFTRUE 49730
49728: GO 50312
49730: POP
// begin if GetClass ( i ) = 1 then
49731: LD_VAR 0 6
49735: PPUSH
49736: CALL_OW 257
49740: PUSH
49741: LD_INT 1
49743: EQUAL
49744: IFFALSE 49765
// points := [ 10 , 5 , 3 ] ;
49746: LD_ADDR_VAR 0 9
49750: PUSH
49751: LD_INT 10
49753: PUSH
49754: LD_INT 5
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49765: LD_VAR 0 6
49769: PPUSH
49770: CALL_OW 257
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 3
49780: PUSH
49781: LD_INT 4
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: IN
49789: IFFALSE 49810
// points := [ 3 , 2 , 1 ] ;
49791: LD_ADDR_VAR 0 9
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49810: LD_VAR 0 6
49814: PPUSH
49815: CALL_OW 257
49819: PUSH
49820: LD_INT 5
49822: EQUAL
49823: IFFALSE 49844
// points := [ 130 , 5 , 2 ] ;
49825: LD_ADDR_VAR 0 9
49829: PUSH
49830: LD_INT 130
49832: PUSH
49833: LD_INT 5
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49844: LD_VAR 0 6
49848: PPUSH
49849: CALL_OW 257
49853: PUSH
49854: LD_INT 8
49856: EQUAL
49857: IFFALSE 49878
// points := [ 35 , 35 , 30 ] ;
49859: LD_ADDR_VAR 0 9
49863: PUSH
49864: LD_INT 35
49866: PUSH
49867: LD_INT 35
49869: PUSH
49870: LD_INT 30
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49878: LD_VAR 0 6
49882: PPUSH
49883: CALL_OW 257
49887: PUSH
49888: LD_INT 9
49890: EQUAL
49891: IFFALSE 49912
// points := [ 20 , 55 , 40 ] ;
49893: LD_ADDR_VAR 0 9
49897: PUSH
49898: LD_INT 20
49900: PUSH
49901: LD_INT 55
49903: PUSH
49904: LD_INT 40
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49912: LD_VAR 0 6
49916: PPUSH
49917: CALL_OW 257
49921: PUSH
49922: LD_INT 12
49924: PUSH
49925: LD_INT 16
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: IN
49932: IFFALSE 49953
// points := [ 5 , 3 , 2 ] ;
49934: LD_ADDR_VAR 0 9
49938: PUSH
49939: LD_INT 5
49941: PUSH
49942: LD_INT 3
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49953: LD_VAR 0 6
49957: PPUSH
49958: CALL_OW 257
49962: PUSH
49963: LD_INT 17
49965: EQUAL
49966: IFFALSE 49987
// points := [ 100 , 50 , 75 ] ;
49968: LD_ADDR_VAR 0 9
49972: PUSH
49973: LD_INT 100
49975: PUSH
49976: LD_INT 50
49978: PUSH
49979: LD_INT 75
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49987: LD_VAR 0 6
49991: PPUSH
49992: CALL_OW 257
49996: PUSH
49997: LD_INT 15
49999: EQUAL
50000: IFFALSE 50021
// points := [ 10 , 5 , 3 ] ;
50002: LD_ADDR_VAR 0 9
50006: PUSH
50007: LD_INT 10
50009: PUSH
50010: LD_INT 5
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50021: LD_VAR 0 6
50025: PPUSH
50026: CALL_OW 257
50030: PUSH
50031: LD_INT 14
50033: EQUAL
50034: IFFALSE 50055
// points := [ 10 , 0 , 0 ] ;
50036: LD_ADDR_VAR 0 9
50040: PUSH
50041: LD_INT 10
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50055: LD_VAR 0 6
50059: PPUSH
50060: CALL_OW 257
50064: PUSH
50065: LD_INT 11
50067: EQUAL
50068: IFFALSE 50089
// points := [ 30 , 10 , 5 ] ;
50070: LD_ADDR_VAR 0 9
50074: PUSH
50075: LD_INT 30
50077: PUSH
50078: LD_INT 10
50080: PUSH
50081: LD_INT 5
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50089: LD_VAR 0 1
50093: PPUSH
50094: LD_INT 5
50096: PPUSH
50097: CALL_OW 321
50101: PUSH
50102: LD_INT 2
50104: EQUAL
50105: IFFALSE 50122
// bpoints := bpoints * 1.8 ;
50107: LD_ADDR_VAR 0 10
50111: PUSH
50112: LD_VAR 0 10
50116: PUSH
50117: LD_REAL  1.80000000000000E+0000
50120: MUL
50121: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50122: LD_VAR 0 6
50126: PPUSH
50127: CALL_OW 257
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: LD_INT 4
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: IN
50150: IFFALSE 50170
50152: PUSH
50153: LD_VAR 0 1
50157: PPUSH
50158: LD_INT 51
50160: PPUSH
50161: CALL_OW 321
50165: PUSH
50166: LD_INT 2
50168: EQUAL
50169: AND
50170: IFFALSE 50187
// bpoints := bpoints * 1.2 ;
50172: LD_ADDR_VAR 0 10
50176: PUSH
50177: LD_VAR 0 10
50181: PUSH
50182: LD_REAL  1.20000000000000E+0000
50185: MUL
50186: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50187: LD_VAR 0 6
50191: PPUSH
50192: CALL_OW 257
50196: PUSH
50197: LD_INT 5
50199: PUSH
50200: LD_INT 7
50202: PUSH
50203: LD_INT 9
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: LIST
50210: IN
50211: IFFALSE 50231
50213: PUSH
50214: LD_VAR 0 1
50218: PPUSH
50219: LD_INT 52
50221: PPUSH
50222: CALL_OW 321
50226: PUSH
50227: LD_INT 2
50229: EQUAL
50230: AND
50231: IFFALSE 50248
// bpoints := bpoints * 1.5 ;
50233: LD_ADDR_VAR 0 10
50237: PUSH
50238: LD_VAR 0 10
50242: PUSH
50243: LD_REAL  1.50000000000000E+0000
50246: MUL
50247: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50248: LD_VAR 0 1
50252: PPUSH
50253: LD_INT 66
50255: PPUSH
50256: CALL_OW 321
50260: PUSH
50261: LD_INT 2
50263: EQUAL
50264: IFFALSE 50281
// bpoints := bpoints * 1.1 ;
50266: LD_ADDR_VAR 0 10
50270: PUSH
50271: LD_VAR 0 10
50275: PUSH
50276: LD_REAL  1.10000000000000E+0000
50279: MUL
50280: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50281: LD_ADDR_VAR 0 10
50285: PUSH
50286: LD_VAR 0 10
50290: PUSH
50291: LD_VAR 0 6
50295: PPUSH
50296: LD_INT 1
50298: PPUSH
50299: CALL_OW 259
50303: PUSH
50304: LD_REAL  1.15000000000000E+0000
50307: MUL
50308: MUL
50309: ST_TO_ADDR
// end ; unit_vehicle :
50310: GO 51140
50312: LD_INT 2
50314: DOUBLE
50315: EQUAL
50316: IFTRUE 50320
50318: GO 51128
50320: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50321: LD_VAR 0 6
50325: PPUSH
50326: CALL_OW 264
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 42
50336: PUSH
50337: LD_INT 24
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: IN
50345: IFFALSE 50366
// points := [ 25 , 5 , 3 ] ;
50347: LD_ADDR_VAR 0 9
50351: PUSH
50352: LD_INT 25
50354: PUSH
50355: LD_INT 5
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50366: LD_VAR 0 6
50370: PPUSH
50371: CALL_OW 264
50375: PUSH
50376: LD_INT 4
50378: PUSH
50379: LD_INT 43
50381: PUSH
50382: LD_INT 25
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: LIST
50389: IN
50390: IFFALSE 50411
// points := [ 40 , 15 , 5 ] ;
50392: LD_ADDR_VAR 0 9
50396: PUSH
50397: LD_INT 40
50399: PUSH
50400: LD_INT 15
50402: PUSH
50403: LD_INT 5
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50411: LD_VAR 0 6
50415: PPUSH
50416: CALL_OW 264
50420: PUSH
50421: LD_INT 3
50423: PUSH
50424: LD_INT 23
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: IN
50431: IFFALSE 50452
// points := [ 7 , 25 , 8 ] ;
50433: LD_ADDR_VAR 0 9
50437: PUSH
50438: LD_INT 7
50440: PUSH
50441: LD_INT 25
50443: PUSH
50444: LD_INT 8
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: LIST
50451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50452: LD_VAR 0 6
50456: PPUSH
50457: CALL_OW 264
50461: PUSH
50462: LD_INT 5
50464: PUSH
50465: LD_INT 27
50467: PUSH
50468: LD_INT 44
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: IN
50476: IFFALSE 50497
// points := [ 14 , 50 , 16 ] ;
50478: LD_ADDR_VAR 0 9
50482: PUSH
50483: LD_INT 14
50485: PUSH
50486: LD_INT 50
50488: PUSH
50489: LD_INT 16
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50497: LD_VAR 0 6
50501: PPUSH
50502: CALL_OW 264
50506: PUSH
50507: LD_INT 6
50509: PUSH
50510: LD_INT 46
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: IN
50517: IFFALSE 50538
// points := [ 32 , 120 , 70 ] ;
50519: LD_ADDR_VAR 0 9
50523: PUSH
50524: LD_INT 32
50526: PUSH
50527: LD_INT 120
50529: PUSH
50530: LD_INT 70
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50538: LD_VAR 0 6
50542: PPUSH
50543: CALL_OW 264
50547: PUSH
50548: LD_INT 7
50550: PUSH
50551: LD_INT 28
50553: PUSH
50554: LD_INT 45
50556: PUSH
50557: LD_INT 92
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: IN
50566: IFFALSE 50587
// points := [ 35 , 20 , 45 ] ;
50568: LD_ADDR_VAR 0 9
50572: PUSH
50573: LD_INT 35
50575: PUSH
50576: LD_INT 20
50578: PUSH
50579: LD_INT 45
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50587: LD_VAR 0 6
50591: PPUSH
50592: CALL_OW 264
50596: PUSH
50597: LD_INT 47
50599: PUSH
50600: EMPTY
50601: LIST
50602: IN
50603: IFFALSE 50624
// points := [ 67 , 45 , 75 ] ;
50605: LD_ADDR_VAR 0 9
50609: PUSH
50610: LD_INT 67
50612: PUSH
50613: LD_INT 45
50615: PUSH
50616: LD_INT 75
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50624: LD_VAR 0 6
50628: PPUSH
50629: CALL_OW 264
50633: PUSH
50634: LD_INT 26
50636: PUSH
50637: EMPTY
50638: LIST
50639: IN
50640: IFFALSE 50661
// points := [ 120 , 30 , 80 ] ;
50642: LD_ADDR_VAR 0 9
50646: PUSH
50647: LD_INT 120
50649: PUSH
50650: LD_INT 30
50652: PUSH
50653: LD_INT 80
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50661: LD_VAR 0 6
50665: PPUSH
50666: CALL_OW 264
50670: PUSH
50671: LD_INT 22
50673: PUSH
50674: EMPTY
50675: LIST
50676: IN
50677: IFFALSE 50698
// points := [ 40 , 1 , 1 ] ;
50679: LD_ADDR_VAR 0 9
50683: PUSH
50684: LD_INT 40
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50698: LD_VAR 0 6
50702: PPUSH
50703: CALL_OW 264
50707: PUSH
50708: LD_INT 29
50710: PUSH
50711: EMPTY
50712: LIST
50713: IN
50714: IFFALSE 50735
// points := [ 70 , 200 , 400 ] ;
50716: LD_ADDR_VAR 0 9
50720: PUSH
50721: LD_INT 70
50723: PUSH
50724: LD_INT 200
50726: PUSH
50727: LD_INT 400
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50735: LD_VAR 0 6
50739: PPUSH
50740: CALL_OW 264
50744: PUSH
50745: LD_INT 14
50747: PUSH
50748: LD_INT 53
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: IN
50755: IFFALSE 50776
// points := [ 40 , 10 , 20 ] ;
50757: LD_ADDR_VAR 0 9
50761: PUSH
50762: LD_INT 40
50764: PUSH
50765: LD_INT 10
50767: PUSH
50768: LD_INT 20
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50776: LD_VAR 0 6
50780: PPUSH
50781: CALL_OW 264
50785: PUSH
50786: LD_INT 9
50788: PUSH
50789: EMPTY
50790: LIST
50791: IN
50792: IFFALSE 50813
// points := [ 5 , 70 , 20 ] ;
50794: LD_ADDR_VAR 0 9
50798: PUSH
50799: LD_INT 5
50801: PUSH
50802: LD_INT 70
50804: PUSH
50805: LD_INT 20
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50813: LD_VAR 0 6
50817: PPUSH
50818: CALL_OW 264
50822: PUSH
50823: LD_INT 10
50825: PUSH
50826: EMPTY
50827: LIST
50828: IN
50829: IFFALSE 50850
// points := [ 35 , 110 , 70 ] ;
50831: LD_ADDR_VAR 0 9
50835: PUSH
50836: LD_INT 35
50838: PUSH
50839: LD_INT 110
50841: PUSH
50842: LD_INT 70
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50850: LD_VAR 0 6
50854: PPUSH
50855: CALL_OW 265
50859: PUSH
50860: LD_INT 25
50862: EQUAL
50863: IFFALSE 50884
// points := [ 80 , 65 , 100 ] ;
50865: LD_ADDR_VAR 0 9
50869: PUSH
50870: LD_INT 80
50872: PUSH
50873: LD_INT 65
50875: PUSH
50876: LD_INT 100
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50884: LD_VAR 0 6
50888: PPUSH
50889: CALL_OW 263
50893: PUSH
50894: LD_INT 1
50896: EQUAL
50897: IFFALSE 50932
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50899: LD_ADDR_VAR 0 10
50903: PUSH
50904: LD_VAR 0 10
50908: PUSH
50909: LD_VAR 0 6
50913: PPUSH
50914: CALL_OW 311
50918: PPUSH
50919: LD_INT 3
50921: PPUSH
50922: CALL_OW 259
50926: PUSH
50927: LD_INT 4
50929: MUL
50930: MUL
50931: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50932: LD_VAR 0 6
50936: PPUSH
50937: CALL_OW 263
50941: PUSH
50942: LD_INT 2
50944: EQUAL
50945: IFFALSE 50996
// begin j := IsControledBy ( i ) ;
50947: LD_ADDR_VAR 0 7
50951: PUSH
50952: LD_VAR 0 6
50956: PPUSH
50957: CALL_OW 312
50961: ST_TO_ADDR
// if j then
50962: LD_VAR 0 7
50966: IFFALSE 50996
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50968: LD_ADDR_VAR 0 10
50972: PUSH
50973: LD_VAR 0 10
50977: PUSH
50978: LD_VAR 0 7
50982: PPUSH
50983: LD_INT 3
50985: PPUSH
50986: CALL_OW 259
50990: PUSH
50991: LD_INT 3
50993: MUL
50994: MUL
50995: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50996: LD_VAR 0 6
51000: PPUSH
51001: CALL_OW 264
51005: PUSH
51006: LD_INT 5
51008: PUSH
51009: LD_INT 6
51011: PUSH
51012: LD_INT 46
51014: PUSH
51015: LD_INT 44
51017: PUSH
51018: LD_INT 47
51020: PUSH
51021: LD_INT 45
51023: PUSH
51024: LD_INT 28
51026: PUSH
51027: LD_INT 7
51029: PUSH
51030: LD_INT 27
51032: PUSH
51033: LD_INT 29
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: IN
51048: IFFALSE 51068
51050: PUSH
51051: LD_VAR 0 1
51055: PPUSH
51056: LD_INT 52
51058: PPUSH
51059: CALL_OW 321
51063: PUSH
51064: LD_INT 2
51066: EQUAL
51067: AND
51068: IFFALSE 51085
// bpoints := bpoints * 1.2 ;
51070: LD_ADDR_VAR 0 10
51074: PUSH
51075: LD_VAR 0 10
51079: PUSH
51080: LD_REAL  1.20000000000000E+0000
51083: MUL
51084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51085: LD_VAR 0 6
51089: PPUSH
51090: CALL_OW 264
51094: PUSH
51095: LD_INT 6
51097: PUSH
51098: LD_INT 46
51100: PUSH
51101: LD_INT 47
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: IN
51109: IFFALSE 51126
// bpoints := bpoints * 1.2 ;
51111: LD_ADDR_VAR 0 10
51115: PUSH
51116: LD_VAR 0 10
51120: PUSH
51121: LD_REAL  1.20000000000000E+0000
51124: MUL
51125: ST_TO_ADDR
// end ; unit_building :
51126: GO 51140
51128: LD_INT 3
51130: DOUBLE
51131: EQUAL
51132: IFTRUE 51136
51134: GO 51139
51136: POP
// ; end ;
51137: GO 51140
51139: POP
// for j = 1 to 3 do
51140: LD_ADDR_VAR 0 7
51144: PUSH
51145: DOUBLE
51146: LD_INT 1
51148: DEC
51149: ST_TO_ADDR
51150: LD_INT 3
51152: PUSH
51153: FOR_TO
51154: IFFALSE 51207
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51156: LD_ADDR_VAR 0 5
51160: PUSH
51161: LD_VAR 0 5
51165: PPUSH
51166: LD_VAR 0 7
51170: PPUSH
51171: LD_VAR 0 5
51175: PUSH
51176: LD_VAR 0 7
51180: ARRAY
51181: PUSH
51182: LD_VAR 0 9
51186: PUSH
51187: LD_VAR 0 7
51191: ARRAY
51192: PUSH
51193: LD_VAR 0 10
51197: MUL
51198: PLUS
51199: PPUSH
51200: CALL_OW 1
51204: ST_TO_ADDR
51205: GO 51153
51207: POP
51208: POP
// end ;
51209: GO 49682
51211: POP
51212: POP
// result := Replace ( result , 4 , tmp ) ;
51213: LD_ADDR_VAR 0 5
51217: PUSH
51218: LD_VAR 0 5
51222: PPUSH
51223: LD_INT 4
51225: PPUSH
51226: LD_VAR 0 8
51230: PPUSH
51231: CALL_OW 1
51235: ST_TO_ADDR
// end ;
51236: LD_VAR 0 5
51240: RET
// export function DangerAtRange ( unit , range ) ; begin
51241: LD_INT 0
51243: PPUSH
// if not unit then
51244: LD_VAR 0 1
51248: NOT
51249: IFFALSE 51253
// exit ;
51251: GO 51298
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51253: LD_ADDR_VAR 0 3
51257: PUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: CALL_OW 255
51267: PPUSH
51268: LD_VAR 0 1
51272: PPUSH
51273: CALL_OW 250
51277: PPUSH
51278: LD_VAR 0 1
51282: PPUSH
51283: CALL_OW 251
51287: PPUSH
51288: LD_VAR 0 2
51292: PPUSH
51293: CALL 49532 0 4
51297: ST_TO_ADDR
// end ;
51298: LD_VAR 0 3
51302: RET
// export function DangerInArea ( side , area ) ; begin
51303: LD_INT 0
51305: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51306: LD_ADDR_VAR 0 3
51310: PUSH
51311: LD_VAR 0 2
51315: PPUSH
51316: LD_INT 81
51318: PUSH
51319: LD_VAR 0 1
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PPUSH
51328: CALL_OW 70
51332: ST_TO_ADDR
// end ;
51333: LD_VAR 0 3
51337: RET
// export function IsExtension ( b ) ; begin
51338: LD_INT 0
51340: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51341: LD_ADDR_VAR 0 2
51345: PUSH
51346: LD_VAR 0 1
51350: PUSH
51351: LD_INT 23
51353: PUSH
51354: LD_INT 20
51356: PUSH
51357: LD_INT 22
51359: PUSH
51360: LD_INT 17
51362: PUSH
51363: LD_INT 24
51365: PUSH
51366: LD_INT 21
51368: PUSH
51369: LD_INT 19
51371: PUSH
51372: LD_INT 16
51374: PUSH
51375: LD_INT 25
51377: PUSH
51378: LD_INT 18
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: IN
51393: ST_TO_ADDR
// end ;
51394: LD_VAR 0 2
51398: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51399: LD_INT 0
51401: PPUSH
51402: PPUSH
51403: PPUSH
// result := [ ] ;
51404: LD_ADDR_VAR 0 4
51408: PUSH
51409: EMPTY
51410: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51411: LD_ADDR_VAR 0 5
51415: PUSH
51416: LD_VAR 0 2
51420: PPUSH
51421: LD_INT 21
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PPUSH
51431: CALL_OW 70
51435: ST_TO_ADDR
// if not tmp then
51436: LD_VAR 0 5
51440: NOT
51441: IFFALSE 51445
// exit ;
51443: GO 51509
// if checkLink then
51445: LD_VAR 0 3
51449: IFFALSE 51499
// begin for i in tmp do
51451: LD_ADDR_VAR 0 6
51455: PUSH
51456: LD_VAR 0 5
51460: PUSH
51461: FOR_IN
51462: IFFALSE 51497
// if GetBase ( i ) <> base then
51464: LD_VAR 0 6
51468: PPUSH
51469: CALL_OW 274
51473: PUSH
51474: LD_VAR 0 1
51478: NONEQUAL
51479: IFFALSE 51495
// ComLinkToBase ( base , i ) ;
51481: LD_VAR 0 1
51485: PPUSH
51486: LD_VAR 0 6
51490: PPUSH
51491: CALL_OW 169
51495: GO 51461
51497: POP
51498: POP
// end ; result := tmp ;
51499: LD_ADDR_VAR 0 4
51503: PUSH
51504: LD_VAR 0 5
51508: ST_TO_ADDR
// end ;
51509: LD_VAR 0 4
51513: RET
// export function ComComplete ( units , b ) ; var i ; begin
51514: LD_INT 0
51516: PPUSH
51517: PPUSH
// if not units then
51518: LD_VAR 0 1
51522: NOT
51523: IFFALSE 51527
// exit ;
51525: GO 51617
// for i in units do
51527: LD_ADDR_VAR 0 4
51531: PUSH
51532: LD_VAR 0 1
51536: PUSH
51537: FOR_IN
51538: IFFALSE 51615
// if BuildingStatus ( b ) = bs_build then
51540: LD_VAR 0 2
51544: PPUSH
51545: CALL_OW 461
51549: PUSH
51550: LD_INT 1
51552: EQUAL
51553: IFFALSE 51613
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51555: LD_VAR 0 4
51559: PPUSH
51560: LD_STRING h
51562: PUSH
51563: LD_VAR 0 2
51567: PPUSH
51568: CALL_OW 250
51572: PUSH
51573: LD_VAR 0 2
51577: PPUSH
51578: CALL_OW 251
51582: PUSH
51583: LD_VAR 0 2
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: PPUSH
51609: CALL_OW 446
51613: GO 51537
51615: POP
51616: POP
// end ;
51617: LD_VAR 0 3
51621: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51622: LD_INT 0
51624: PPUSH
51625: PPUSH
51626: PPUSH
51627: PPUSH
51628: PPUSH
51629: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51630: LD_VAR 0 1
51634: NOT
51635: IFTRUE 51652
51637: PUSH
51638: LD_VAR 0 1
51642: PPUSH
51643: CALL_OW 263
51647: PUSH
51648: LD_INT 2
51650: NONEQUAL
51651: OR
51652: IFFALSE 51656
// exit ;
51654: GO 51972
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51656: LD_ADDR_VAR 0 6
51660: PUSH
51661: LD_INT 22
51663: PUSH
51664: LD_VAR 0 1
51668: PPUSH
51669: CALL_OW 255
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 30
51683: PUSH
51684: LD_INT 36
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 34
51693: PUSH
51694: LD_INT 31
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PPUSH
51710: CALL_OW 69
51714: ST_TO_ADDR
// if not tmp then
51715: LD_VAR 0 6
51719: NOT
51720: IFFALSE 51724
// exit ;
51722: GO 51972
// result := [ ] ;
51724: LD_ADDR_VAR 0 2
51728: PUSH
51729: EMPTY
51730: ST_TO_ADDR
// for i in tmp do
51731: LD_ADDR_VAR 0 3
51735: PUSH
51736: LD_VAR 0 6
51740: PUSH
51741: FOR_IN
51742: IFFALSE 51813
// begin t := UnitsInside ( i ) ;
51744: LD_ADDR_VAR 0 4
51748: PUSH
51749: LD_VAR 0 3
51753: PPUSH
51754: CALL_OW 313
51758: ST_TO_ADDR
// if t then
51759: LD_VAR 0 4
51763: IFFALSE 51811
// for j in t do
51765: LD_ADDR_VAR 0 7
51769: PUSH
51770: LD_VAR 0 4
51774: PUSH
51775: FOR_IN
51776: IFFALSE 51809
// result := Replace ( result , result + 1 , j ) ;
51778: LD_ADDR_VAR 0 2
51782: PUSH
51783: LD_VAR 0 2
51787: PPUSH
51788: LD_VAR 0 2
51792: PUSH
51793: LD_INT 1
51795: PLUS
51796: PPUSH
51797: LD_VAR 0 7
51801: PPUSH
51802: CALL_OW 1
51806: ST_TO_ADDR
51807: GO 51775
51809: POP
51810: POP
// end ;
51811: GO 51741
51813: POP
51814: POP
// if not result then
51815: LD_VAR 0 2
51819: NOT
51820: IFFALSE 51824
// exit ;
51822: GO 51972
// mech := result [ 1 ] ;
51824: LD_ADDR_VAR 0 5
51828: PUSH
51829: LD_VAR 0 2
51833: PUSH
51834: LD_INT 1
51836: ARRAY
51837: ST_TO_ADDR
// if result > 1 then
51838: LD_VAR 0 2
51842: PUSH
51843: LD_INT 1
51845: GREATER
51846: IFFALSE 51958
// begin for i = 2 to result do
51848: LD_ADDR_VAR 0 3
51852: PUSH
51853: DOUBLE
51854: LD_INT 2
51856: DEC
51857: ST_TO_ADDR
51858: LD_VAR 0 2
51862: PUSH
51863: FOR_TO
51864: IFFALSE 51956
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51866: LD_ADDR_VAR 0 4
51870: PUSH
51871: LD_VAR 0 2
51875: PUSH
51876: LD_VAR 0 3
51880: ARRAY
51881: PPUSH
51882: LD_INT 3
51884: PPUSH
51885: CALL_OW 259
51889: PUSH
51890: LD_VAR 0 2
51894: PUSH
51895: LD_VAR 0 3
51899: ARRAY
51900: PPUSH
51901: CALL_OW 432
51905: MINUS
51906: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51907: LD_VAR 0 4
51911: PUSH
51912: LD_VAR 0 5
51916: PPUSH
51917: LD_INT 3
51919: PPUSH
51920: CALL_OW 259
51924: PUSH
51925: LD_VAR 0 5
51929: PPUSH
51930: CALL_OW 432
51934: MINUS
51935: GREATEREQUAL
51936: IFFALSE 51954
// mech := result [ i ] ;
51938: LD_ADDR_VAR 0 5
51942: PUSH
51943: LD_VAR 0 2
51947: PUSH
51948: LD_VAR 0 3
51952: ARRAY
51953: ST_TO_ADDR
// end ;
51954: GO 51863
51956: POP
51957: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51958: LD_VAR 0 1
51962: PPUSH
51963: LD_VAR 0 5
51967: PPUSH
51968: CALL_OW 135
// end ;
51972: LD_VAR 0 2
51976: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51977: LD_INT 0
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
51984: PPUSH
51985: PPUSH
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
// result := [ ] ;
51992: LD_ADDR_VAR 0 7
51996: PUSH
51997: EMPTY
51998: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 266
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: IN
52019: NOT
52020: IFFALSE 52024
// exit ;
52022: GO 53664
// if name then
52024: LD_VAR 0 3
52028: IFFALSE 52044
// SetBName ( base_dep , name ) ;
52030: LD_VAR 0 1
52034: PPUSH
52035: LD_VAR 0 3
52039: PPUSH
52040: CALL_OW 500
// base := GetBase ( base_dep ) ;
52044: LD_ADDR_VAR 0 15
52048: PUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: CALL_OW 274
52058: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52059: LD_ADDR_VAR 0 16
52063: PUSH
52064: LD_VAR 0 1
52068: PPUSH
52069: CALL_OW 255
52073: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52074: LD_ADDR_VAR 0 17
52078: PUSH
52079: LD_VAR 0 1
52083: PPUSH
52084: CALL_OW 248
52088: ST_TO_ADDR
// if sources then
52089: LD_VAR 0 5
52093: IFFALSE 52140
// for i = 1 to 3 do
52095: LD_ADDR_VAR 0 8
52099: PUSH
52100: DOUBLE
52101: LD_INT 1
52103: DEC
52104: ST_TO_ADDR
52105: LD_INT 3
52107: PUSH
52108: FOR_TO
52109: IFFALSE 52138
// AddResourceType ( base , i , sources [ i ] ) ;
52111: LD_VAR 0 15
52115: PPUSH
52116: LD_VAR 0 8
52120: PPUSH
52121: LD_VAR 0 5
52125: PUSH
52126: LD_VAR 0 8
52130: ARRAY
52131: PPUSH
52132: CALL_OW 276
52136: GO 52108
52138: POP
52139: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52140: LD_ADDR_VAR 0 18
52144: PUSH
52145: LD_VAR 0 15
52149: PPUSH
52150: LD_VAR 0 2
52154: PPUSH
52155: LD_INT 1
52157: PPUSH
52158: CALL 51399 0 3
52162: ST_TO_ADDR
// InitHc ;
52163: CALL_OW 19
// InitUc ;
52167: CALL_OW 18
// uc_side := side ;
52171: LD_ADDR_OWVAR 20
52175: PUSH
52176: LD_VAR 0 16
52180: ST_TO_ADDR
// uc_nation := nation ;
52181: LD_ADDR_OWVAR 21
52185: PUSH
52186: LD_VAR 0 17
52190: ST_TO_ADDR
// if buildings then
52191: LD_VAR 0 18
52195: IFFALSE 53523
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52197: LD_ADDR_VAR 0 19
52201: PUSH
52202: LD_VAR 0 18
52206: PPUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 30
52212: PUSH
52213: LD_INT 29
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 30
52222: PUSH
52223: LD_INT 30
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: PPUSH
52235: CALL_OW 72
52239: ST_TO_ADDR
// if tmp then
52240: LD_VAR 0 19
52244: IFFALSE 52292
// for i in tmp do
52246: LD_ADDR_VAR 0 8
52250: PUSH
52251: LD_VAR 0 19
52255: PUSH
52256: FOR_IN
52257: IFFALSE 52290
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52259: LD_VAR 0 8
52263: PPUSH
52264: CALL_OW 250
52268: PPUSH
52269: LD_VAR 0 8
52273: PPUSH
52274: CALL_OW 251
52278: PPUSH
52279: LD_VAR 0 16
52283: PPUSH
52284: CALL_OW 441
52288: GO 52256
52290: POP
52291: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52292: LD_VAR 0 18
52296: PPUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 30
52302: PUSH
52303: LD_INT 32
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 30
52312: PUSH
52313: LD_INT 33
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: PPUSH
52325: CALL_OW 72
52329: IFFALSE 52417
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52331: LD_ADDR_VAR 0 8
52335: PUSH
52336: LD_VAR 0 18
52340: PPUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 30
52346: PUSH
52347: LD_INT 32
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 30
52356: PUSH
52357: LD_INT 33
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: PPUSH
52369: CALL_OW 72
52373: PUSH
52374: FOR_IN
52375: IFFALSE 52415
// begin if not GetBWeapon ( i ) then
52377: LD_VAR 0 8
52381: PPUSH
52382: CALL_OW 269
52386: NOT
52387: IFFALSE 52413
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52389: LD_VAR 0 8
52393: PPUSH
52394: LD_VAR 0 8
52398: PPUSH
52399: LD_VAR 0 2
52403: PPUSH
52404: CALL 53669 0 2
52408: PPUSH
52409: CALL_OW 431
// end ;
52413: GO 52374
52415: POP
52416: POP
// end ; for i = 1 to personel do
52417: LD_ADDR_VAR 0 8
52421: PUSH
52422: DOUBLE
52423: LD_INT 1
52425: DEC
52426: ST_TO_ADDR
52427: LD_VAR 0 6
52431: PUSH
52432: FOR_TO
52433: IFFALSE 53503
// begin if i > 4 then
52435: LD_VAR 0 8
52439: PUSH
52440: LD_INT 4
52442: GREATER
52443: IFFALSE 52447
// break ;
52445: GO 53503
// case i of 1 :
52447: LD_VAR 0 8
52451: PUSH
52452: LD_INT 1
52454: DOUBLE
52455: EQUAL
52456: IFTRUE 52460
52458: GO 52540
52460: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52461: LD_ADDR_VAR 0 12
52465: PUSH
52466: LD_VAR 0 18
52470: PPUSH
52471: LD_INT 22
52473: PUSH
52474: LD_VAR 0 16
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 58
52485: PUSH
52486: EMPTY
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: LD_INT 30
52494: PUSH
52495: LD_INT 32
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 30
52504: PUSH
52505: LD_INT 4
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 30
52514: PUSH
52515: LD_INT 5
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: PPUSH
52533: CALL_OW 72
52537: ST_TO_ADDR
52538: GO 52762
52540: LD_INT 2
52542: DOUBLE
52543: EQUAL
52544: IFTRUE 52548
52546: GO 52610
52548: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52549: LD_ADDR_VAR 0 12
52553: PUSH
52554: LD_VAR 0 18
52558: PPUSH
52559: LD_INT 22
52561: PUSH
52562: LD_VAR 0 16
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 30
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 30
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PPUSH
52603: CALL_OW 72
52607: ST_TO_ADDR
52608: GO 52762
52610: LD_INT 3
52612: DOUBLE
52613: EQUAL
52614: IFTRUE 52618
52616: GO 52680
52618: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52619: LD_ADDR_VAR 0 12
52623: PUSH
52624: LD_VAR 0 18
52628: PPUSH
52629: LD_INT 22
52631: PUSH
52632: LD_VAR 0 16
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 30
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 30
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PPUSH
52673: CALL_OW 72
52677: ST_TO_ADDR
52678: GO 52762
52680: LD_INT 4
52682: DOUBLE
52683: EQUAL
52684: IFTRUE 52688
52686: GO 52761
52688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52689: LD_ADDR_VAR 0 12
52693: PUSH
52694: LD_VAR 0 18
52698: PPUSH
52699: LD_INT 22
52701: PUSH
52702: LD_VAR 0 16
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 30
52716: PUSH
52717: LD_INT 6
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 30
52726: PUSH
52727: LD_INT 7
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 30
52736: PUSH
52737: LD_INT 8
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PPUSH
52754: CALL_OW 72
52758: ST_TO_ADDR
52759: GO 52762
52761: POP
// if i = 1 then
52762: LD_VAR 0 8
52766: PUSH
52767: LD_INT 1
52769: EQUAL
52770: IFFALSE 52881
// begin tmp := [ ] ;
52772: LD_ADDR_VAR 0 19
52776: PUSH
52777: EMPTY
52778: ST_TO_ADDR
// for j in f do
52779: LD_ADDR_VAR 0 9
52783: PUSH
52784: LD_VAR 0 12
52788: PUSH
52789: FOR_IN
52790: IFFALSE 52863
// if GetBType ( j ) = b_bunker then
52792: LD_VAR 0 9
52796: PPUSH
52797: CALL_OW 266
52801: PUSH
52802: LD_INT 32
52804: EQUAL
52805: IFFALSE 52832
// tmp := Insert ( tmp , 1 , j ) else
52807: LD_ADDR_VAR 0 19
52811: PUSH
52812: LD_VAR 0 19
52816: PPUSH
52817: LD_INT 1
52819: PPUSH
52820: LD_VAR 0 9
52824: PPUSH
52825: CALL_OW 2
52829: ST_TO_ADDR
52830: GO 52861
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52832: LD_ADDR_VAR 0 19
52836: PUSH
52837: LD_VAR 0 19
52841: PPUSH
52842: LD_VAR 0 19
52846: PUSH
52847: LD_INT 1
52849: PLUS
52850: PPUSH
52851: LD_VAR 0 9
52855: PPUSH
52856: CALL_OW 2
52860: ST_TO_ADDR
52861: GO 52789
52863: POP
52864: POP
// if tmp then
52865: LD_VAR 0 19
52869: IFFALSE 52881
// f := tmp ;
52871: LD_ADDR_VAR 0 12
52875: PUSH
52876: LD_VAR 0 19
52880: ST_TO_ADDR
// end ; x := personel [ i ] ;
52881: LD_ADDR_VAR 0 13
52885: PUSH
52886: LD_VAR 0 6
52890: PUSH
52891: LD_VAR 0 8
52895: ARRAY
52896: ST_TO_ADDR
// if x = - 1 then
52897: LD_VAR 0 13
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: EQUAL
52906: IFFALSE 53117
// begin for j in f do
52908: LD_ADDR_VAR 0 9
52912: PUSH
52913: LD_VAR 0 12
52917: PUSH
52918: FOR_IN
52919: IFFALSE 53113
// repeat InitHc ;
52921: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52925: LD_VAR 0 9
52929: PPUSH
52930: CALL_OW 266
52934: PUSH
52935: LD_INT 5
52937: EQUAL
52938: IFFALSE 53008
// begin if UnitsInside ( j ) < 3 then
52940: LD_VAR 0 9
52944: PPUSH
52945: CALL_OW 313
52949: PUSH
52950: LD_INT 3
52952: LESS
52953: IFFALSE 52989
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52955: LD_INT 0
52957: PPUSH
52958: LD_INT 5
52960: PUSH
52961: LD_INT 8
52963: PUSH
52964: LD_INT 9
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: PUSH
52972: LD_VAR 0 17
52976: ARRAY
52977: PPUSH
52978: LD_VAR 0 4
52982: PPUSH
52983: CALL_OW 380
52987: GO 53006
// PrepareHuman ( false , i , skill ) ;
52989: LD_INT 0
52991: PPUSH
52992: LD_VAR 0 8
52996: PPUSH
52997: LD_VAR 0 4
53001: PPUSH
53002: CALL_OW 380
// end else
53006: GO 53025
// PrepareHuman ( false , i , skill ) ;
53008: LD_INT 0
53010: PPUSH
53011: LD_VAR 0 8
53015: PPUSH
53016: LD_VAR 0 4
53020: PPUSH
53021: CALL_OW 380
// un := CreateHuman ;
53025: LD_ADDR_VAR 0 14
53029: PUSH
53030: CALL_OW 44
53034: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53035: LD_ADDR_VAR 0 7
53039: PUSH
53040: LD_VAR 0 7
53044: PPUSH
53045: LD_INT 1
53047: PPUSH
53048: LD_VAR 0 14
53052: PPUSH
53053: CALL_OW 2
53057: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53058: LD_VAR 0 14
53062: PPUSH
53063: LD_VAR 0 9
53067: PPUSH
53068: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53072: LD_VAR 0 9
53076: PPUSH
53077: CALL_OW 313
53081: PUSH
53082: LD_INT 6
53084: EQUAL
53085: IFTRUE 53109
53087: PUSH
53088: LD_VAR 0 9
53092: PPUSH
53093: CALL_OW 266
53097: PUSH
53098: LD_INT 32
53100: PUSH
53101: LD_INT 31
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: IN
53108: OR
53109: IFFALSE 52921
53111: GO 52918
53113: POP
53114: POP
// end else
53115: GO 53501
// for j = 1 to x do
53117: LD_ADDR_VAR 0 9
53121: PUSH
53122: DOUBLE
53123: LD_INT 1
53125: DEC
53126: ST_TO_ADDR
53127: LD_VAR 0 13
53131: PUSH
53132: FOR_TO
53133: IFFALSE 53499
// begin InitHc ;
53135: CALL_OW 19
// if not f then
53139: LD_VAR 0 12
53143: NOT
53144: IFFALSE 53233
// begin PrepareHuman ( false , i , skill ) ;
53146: LD_INT 0
53148: PPUSH
53149: LD_VAR 0 8
53153: PPUSH
53154: LD_VAR 0 4
53158: PPUSH
53159: CALL_OW 380
// un := CreateHuman ;
53163: LD_ADDR_VAR 0 14
53167: PUSH
53168: CALL_OW 44
53172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53173: LD_ADDR_VAR 0 7
53177: PUSH
53178: LD_VAR 0 7
53182: PPUSH
53183: LD_INT 1
53185: PPUSH
53186: LD_VAR 0 14
53190: PPUSH
53191: CALL_OW 2
53195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53196: LD_VAR 0 14
53200: PPUSH
53201: LD_VAR 0 1
53205: PPUSH
53206: CALL_OW 250
53210: PPUSH
53211: LD_VAR 0 1
53215: PPUSH
53216: CALL_OW 251
53220: PPUSH
53221: LD_INT 10
53223: PPUSH
53224: LD_INT 0
53226: PPUSH
53227: CALL_OW 50
// continue ;
53231: GO 53132
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53233: LD_VAR 0 12
53237: PUSH
53238: LD_INT 1
53240: ARRAY
53241: PPUSH
53242: CALL_OW 313
53246: IFFALSE 53274
53248: PUSH
53249: LD_VAR 0 12
53253: PUSH
53254: LD_INT 1
53256: ARRAY
53257: PPUSH
53258: CALL_OW 266
53262: PUSH
53263: LD_INT 32
53265: PUSH
53266: LD_INT 31
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: IN
53273: AND
53274: IFTRUE 53295
53276: PUSH
53277: LD_VAR 0 12
53281: PUSH
53282: LD_INT 1
53284: ARRAY
53285: PPUSH
53286: CALL_OW 313
53290: PUSH
53291: LD_INT 6
53293: EQUAL
53294: OR
53295: IFFALSE 53315
// f := Delete ( f , 1 ) ;
53297: LD_ADDR_VAR 0 12
53301: PUSH
53302: LD_VAR 0 12
53306: PPUSH
53307: LD_INT 1
53309: PPUSH
53310: CALL_OW 3
53314: ST_TO_ADDR
// if not f then
53315: LD_VAR 0 12
53319: NOT
53320: IFFALSE 53338
// begin x := x + 2 ;
53322: LD_ADDR_VAR 0 13
53326: PUSH
53327: LD_VAR 0 13
53331: PUSH
53332: LD_INT 2
53334: PLUS
53335: ST_TO_ADDR
// continue ;
53336: GO 53132
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53338: LD_VAR 0 12
53342: PUSH
53343: LD_INT 1
53345: ARRAY
53346: PPUSH
53347: CALL_OW 266
53351: PUSH
53352: LD_INT 5
53354: EQUAL
53355: IFFALSE 53429
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53357: LD_VAR 0 12
53361: PUSH
53362: LD_INT 1
53364: ARRAY
53365: PPUSH
53366: CALL_OW 313
53370: PUSH
53371: LD_INT 3
53373: LESS
53374: IFFALSE 53410
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53376: LD_INT 0
53378: PPUSH
53379: LD_INT 5
53381: PUSH
53382: LD_INT 8
53384: PUSH
53385: LD_INT 9
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: PUSH
53393: LD_VAR 0 17
53397: ARRAY
53398: PPUSH
53399: LD_VAR 0 4
53403: PPUSH
53404: CALL_OW 380
53408: GO 53427
// PrepareHuman ( false , i , skill ) ;
53410: LD_INT 0
53412: PPUSH
53413: LD_VAR 0 8
53417: PPUSH
53418: LD_VAR 0 4
53422: PPUSH
53423: CALL_OW 380
// end else
53427: GO 53446
// PrepareHuman ( false , i , skill ) ;
53429: LD_INT 0
53431: PPUSH
53432: LD_VAR 0 8
53436: PPUSH
53437: LD_VAR 0 4
53441: PPUSH
53442: CALL_OW 380
// un := CreateHuman ;
53446: LD_ADDR_VAR 0 14
53450: PUSH
53451: CALL_OW 44
53455: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53456: LD_ADDR_VAR 0 7
53460: PUSH
53461: LD_VAR 0 7
53465: PPUSH
53466: LD_INT 1
53468: PPUSH
53469: LD_VAR 0 14
53473: PPUSH
53474: CALL_OW 2
53478: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53479: LD_VAR 0 14
53483: PPUSH
53484: LD_VAR 0 12
53488: PUSH
53489: LD_INT 1
53491: ARRAY
53492: PPUSH
53493: CALL_OW 52
// end ;
53497: GO 53132
53499: POP
53500: POP
// end ;
53501: GO 52432
53503: POP
53504: POP
// result := result ^ buildings ;
53505: LD_ADDR_VAR 0 7
53509: PUSH
53510: LD_VAR 0 7
53514: PUSH
53515: LD_VAR 0 18
53519: ADD
53520: ST_TO_ADDR
// end else
53521: GO 53664
// begin for i = 1 to personel do
53523: LD_ADDR_VAR 0 8
53527: PUSH
53528: DOUBLE
53529: LD_INT 1
53531: DEC
53532: ST_TO_ADDR
53533: LD_VAR 0 6
53537: PUSH
53538: FOR_TO
53539: IFFALSE 53662
// begin if i > 4 then
53541: LD_VAR 0 8
53545: PUSH
53546: LD_INT 4
53548: GREATER
53549: IFFALSE 53553
// break ;
53551: GO 53662
// x := personel [ i ] ;
53553: LD_ADDR_VAR 0 13
53557: PUSH
53558: LD_VAR 0 6
53562: PUSH
53563: LD_VAR 0 8
53567: ARRAY
53568: ST_TO_ADDR
// if x = - 1 then
53569: LD_VAR 0 13
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: EQUAL
53578: IFFALSE 53582
// continue ;
53580: GO 53538
// PrepareHuman ( false , i , skill ) ;
53582: LD_INT 0
53584: PPUSH
53585: LD_VAR 0 8
53589: PPUSH
53590: LD_VAR 0 4
53594: PPUSH
53595: CALL_OW 380
// un := CreateHuman ;
53599: LD_ADDR_VAR 0 14
53603: PUSH
53604: CALL_OW 44
53608: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53609: LD_VAR 0 14
53613: PPUSH
53614: LD_VAR 0 1
53618: PPUSH
53619: CALL_OW 250
53623: PPUSH
53624: LD_VAR 0 1
53628: PPUSH
53629: CALL_OW 251
53633: PPUSH
53634: LD_INT 10
53636: PPUSH
53637: LD_INT 0
53639: PPUSH
53640: CALL_OW 50
// result := result ^ un ;
53644: LD_ADDR_VAR 0 7
53648: PUSH
53649: LD_VAR 0 7
53653: PUSH
53654: LD_VAR 0 14
53658: ADD
53659: ST_TO_ADDR
// end ;
53660: GO 53538
53662: POP
53663: POP
// end ; end ;
53664: LD_VAR 0 7
53668: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53669: LD_INT 0
53671: PPUSH
53672: PPUSH
53673: PPUSH
53674: PPUSH
53675: PPUSH
53676: PPUSH
53677: PPUSH
53678: PPUSH
53679: PPUSH
53680: PPUSH
53681: PPUSH
53682: PPUSH
53683: PPUSH
53684: PPUSH
53685: PPUSH
53686: PPUSH
// result := false ;
53687: LD_ADDR_VAR 0 3
53691: PUSH
53692: LD_INT 0
53694: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53695: LD_VAR 0 1
53699: NOT
53700: IFTRUE 53725
53702: PUSH
53703: LD_VAR 0 1
53707: PPUSH
53708: CALL_OW 266
53712: PUSH
53713: LD_INT 32
53715: PUSH
53716: LD_INT 33
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: IN
53723: NOT
53724: OR
53725: IFFALSE 53729
// exit ;
53727: GO 54864
// nat := GetNation ( tower ) ;
53729: LD_ADDR_VAR 0 12
53733: PUSH
53734: LD_VAR 0 1
53738: PPUSH
53739: CALL_OW 248
53743: ST_TO_ADDR
// side := GetSide ( tower ) ;
53744: LD_ADDR_VAR 0 16
53748: PUSH
53749: LD_VAR 0 1
53753: PPUSH
53754: CALL_OW 255
53758: ST_TO_ADDR
// x := GetX ( tower ) ;
53759: LD_ADDR_VAR 0 10
53763: PUSH
53764: LD_VAR 0 1
53768: PPUSH
53769: CALL_OW 250
53773: ST_TO_ADDR
// y := GetY ( tower ) ;
53774: LD_ADDR_VAR 0 11
53778: PUSH
53779: LD_VAR 0 1
53783: PPUSH
53784: CALL_OW 251
53788: ST_TO_ADDR
// if not x or not y then
53789: LD_VAR 0 10
53793: NOT
53794: IFTRUE 53803
53796: PUSH
53797: LD_VAR 0 11
53801: NOT
53802: OR
53803: IFFALSE 53807
// exit ;
53805: GO 54864
// weapon := 0 ;
53807: LD_ADDR_VAR 0 18
53811: PUSH
53812: LD_INT 0
53814: ST_TO_ADDR
// fac_list := [ ] ;
53815: LD_ADDR_VAR 0 17
53819: PUSH
53820: EMPTY
53821: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53822: LD_ADDR_VAR 0 6
53826: PUSH
53827: LD_VAR 0 1
53831: PPUSH
53832: CALL_OW 274
53836: PPUSH
53837: LD_VAR 0 2
53841: PPUSH
53842: LD_INT 0
53844: PPUSH
53845: CALL 51399 0 3
53849: PPUSH
53850: LD_INT 30
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PPUSH
53860: CALL_OW 72
53864: ST_TO_ADDR
// if not factories then
53865: LD_VAR 0 6
53869: NOT
53870: IFFALSE 53874
// exit ;
53872: GO 54864
// for i in factories do
53874: LD_ADDR_VAR 0 8
53878: PUSH
53879: LD_VAR 0 6
53883: PUSH
53884: FOR_IN
53885: IFFALSE 53910
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53887: LD_ADDR_VAR 0 17
53891: PUSH
53892: LD_VAR 0 17
53896: PUSH
53897: LD_VAR 0 8
53901: PPUSH
53902: CALL_OW 478
53906: UNION
53907: ST_TO_ADDR
53908: GO 53884
53910: POP
53911: POP
// if not fac_list then
53912: LD_VAR 0 17
53916: NOT
53917: IFFALSE 53921
// exit ;
53919: GO 54864
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53921: LD_ADDR_VAR 0 5
53925: PUSH
53926: LD_INT 4
53928: PUSH
53929: LD_INT 5
53931: PUSH
53932: LD_INT 9
53934: PUSH
53935: LD_INT 10
53937: PUSH
53938: LD_INT 6
53940: PUSH
53941: LD_INT 7
53943: PUSH
53944: LD_INT 11
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 27
53958: PUSH
53959: LD_INT 28
53961: PUSH
53962: LD_INT 26
53964: PUSH
53965: LD_INT 30
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 43
53976: PUSH
53977: LD_INT 44
53979: PUSH
53980: LD_INT 46
53982: PUSH
53983: LD_INT 45
53985: PUSH
53986: LD_INT 47
53988: PUSH
53989: LD_INT 49
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: LD_VAR 0 12
54009: ARRAY
54010: ST_TO_ADDR
// list := list isect fac_list ;
54011: LD_ADDR_VAR 0 5
54015: PUSH
54016: LD_VAR 0 5
54020: PUSH
54021: LD_VAR 0 17
54025: ISECT
54026: ST_TO_ADDR
// if not list then
54027: LD_VAR 0 5
54031: NOT
54032: IFFALSE 54036
// exit ;
54034: GO 54864
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54036: LD_VAR 0 12
54040: PUSH
54041: LD_INT 3
54043: EQUAL
54044: IFFALSE 54056
54046: PUSH
54047: LD_INT 49
54049: PUSH
54050: LD_VAR 0 5
54054: IN
54055: AND
54056: IFFALSE 54076
54058: PUSH
54059: LD_INT 31
54061: PPUSH
54062: LD_VAR 0 16
54066: PPUSH
54067: CALL_OW 321
54071: PUSH
54072: LD_INT 2
54074: EQUAL
54075: AND
54076: IFFALSE 54136
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54078: LD_INT 22
54080: PUSH
54081: LD_VAR 0 16
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 35
54092: PUSH
54093: LD_INT 49
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 91
54102: PUSH
54103: LD_VAR 0 1
54107: PUSH
54108: LD_INT 10
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: PPUSH
54121: CALL_OW 69
54125: NOT
54126: IFFALSE 54136
// weapon := ru_time_lapser ;
54128: LD_ADDR_VAR 0 18
54132: PUSH
54133: LD_INT 49
54135: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54136: LD_VAR 0 12
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: IN
54151: IFFALSE 54175
54153: PUSH
54154: LD_INT 11
54156: PUSH
54157: LD_VAR 0 5
54161: IN
54162: IFTRUE 54174
54164: PUSH
54165: LD_INT 30
54167: PUSH
54168: LD_VAR 0 5
54172: IN
54173: OR
54174: AND
54175: IFFALSE 54195
54177: PUSH
54178: LD_INT 6
54180: PPUSH
54181: LD_VAR 0 16
54185: PPUSH
54186: CALL_OW 321
54190: PUSH
54191: LD_INT 2
54193: EQUAL
54194: AND
54195: IFFALSE 54362
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54197: LD_INT 22
54199: PUSH
54200: LD_VAR 0 16
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 35
54214: PUSH
54215: LD_INT 11
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 35
54224: PUSH
54225: LD_INT 30
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 91
54239: PUSH
54240: LD_VAR 0 1
54244: PUSH
54245: LD_INT 18
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: PPUSH
54258: CALL_OW 69
54262: NOT
54263: IFFALSE 54339
54265: PUSH
54266: LD_INT 22
54268: PUSH
54269: LD_VAR 0 16
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: LD_INT 30
54283: PUSH
54284: LD_INT 32
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 30
54293: PUSH
54294: LD_INT 33
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 91
54308: PUSH
54309: LD_VAR 0 1
54313: PUSH
54314: LD_INT 12
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: PUSH
54327: EMPTY
54328: LIST
54329: PPUSH
54330: CALL_OW 69
54334: PUSH
54335: LD_INT 2
54337: GREATER
54338: AND
54339: IFFALSE 54362
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54341: LD_ADDR_VAR 0 18
54345: PUSH
54346: LD_INT 11
54348: PUSH
54349: LD_INT 30
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_VAR 0 12
54360: ARRAY
54361: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54362: LD_VAR 0 18
54366: NOT
54367: IFFALSE 54387
54369: PUSH
54370: LD_INT 40
54372: PPUSH
54373: LD_VAR 0 16
54377: PPUSH
54378: CALL_OW 321
54382: PUSH
54383: LD_INT 2
54385: EQUAL
54386: AND
54387: IFFALSE 54423
54389: PUSH
54390: LD_INT 7
54392: PUSH
54393: LD_VAR 0 5
54397: IN
54398: IFTRUE 54410
54400: PUSH
54401: LD_INT 28
54403: PUSH
54404: LD_VAR 0 5
54408: IN
54409: OR
54410: IFTRUE 54422
54412: PUSH
54413: LD_INT 45
54415: PUSH
54416: LD_VAR 0 5
54420: IN
54421: OR
54422: AND
54423: IFFALSE 54677
// begin hex := GetHexInfo ( x , y ) ;
54425: LD_ADDR_VAR 0 4
54429: PUSH
54430: LD_VAR 0 10
54434: PPUSH
54435: LD_VAR 0 11
54439: PPUSH
54440: CALL_OW 546
54444: ST_TO_ADDR
// if hex [ 1 ] then
54445: LD_VAR 0 4
54449: PUSH
54450: LD_INT 1
54452: ARRAY
54453: IFFALSE 54457
// exit ;
54455: GO 54864
// height := hex [ 2 ] ;
54457: LD_ADDR_VAR 0 15
54461: PUSH
54462: LD_VAR 0 4
54466: PUSH
54467: LD_INT 2
54469: ARRAY
54470: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54471: LD_ADDR_VAR 0 14
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: LD_INT 5
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: ST_TO_ADDR
// for i in tmp do
54494: LD_ADDR_VAR 0 8
54498: PUSH
54499: LD_VAR 0 14
54503: PUSH
54504: FOR_IN
54505: IFFALSE 54675
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54507: LD_ADDR_VAR 0 9
54511: PUSH
54512: LD_VAR 0 10
54516: PPUSH
54517: LD_VAR 0 8
54521: PPUSH
54522: LD_INT 5
54524: PPUSH
54525: CALL_OW 272
54529: PUSH
54530: LD_VAR 0 11
54534: PPUSH
54535: LD_VAR 0 8
54539: PPUSH
54540: LD_INT 5
54542: PPUSH
54543: CALL_OW 273
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54552: LD_VAR 0 9
54556: PUSH
54557: LD_INT 1
54559: ARRAY
54560: PPUSH
54561: LD_VAR 0 9
54565: PUSH
54566: LD_INT 2
54568: ARRAY
54569: PPUSH
54570: CALL_OW 488
54574: IFFALSE 54673
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54576: LD_ADDR_VAR 0 4
54580: PUSH
54581: LD_VAR 0 9
54585: PUSH
54586: LD_INT 1
54588: ARRAY
54589: PPUSH
54590: LD_VAR 0 9
54594: PUSH
54595: LD_INT 2
54597: ARRAY
54598: PPUSH
54599: CALL_OW 546
54603: ST_TO_ADDR
// if hex [ 1 ] then
54604: LD_VAR 0 4
54608: PUSH
54609: LD_INT 1
54611: ARRAY
54612: IFFALSE 54616
// continue ;
54614: GO 54504
// h := hex [ 2 ] ;
54616: LD_ADDR_VAR 0 13
54620: PUSH
54621: LD_VAR 0 4
54625: PUSH
54626: LD_INT 2
54628: ARRAY
54629: ST_TO_ADDR
// if h + 7 < height then
54630: LD_VAR 0 13
54634: PUSH
54635: LD_INT 7
54637: PLUS
54638: PUSH
54639: LD_VAR 0 15
54643: LESS
54644: IFFALSE 54673
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54646: LD_ADDR_VAR 0 18
54650: PUSH
54651: LD_INT 7
54653: PUSH
54654: LD_INT 28
54656: PUSH
54657: LD_INT 45
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: PUSH
54665: LD_VAR 0 12
54669: ARRAY
54670: ST_TO_ADDR
// break ;
54671: GO 54675
// end ; end ; end ;
54673: GO 54504
54675: POP
54676: POP
// end ; if not weapon then
54677: LD_VAR 0 18
54681: NOT
54682: IFFALSE 54742
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54684: LD_ADDR_VAR 0 5
54688: PUSH
54689: LD_VAR 0 5
54693: PUSH
54694: LD_INT 11
54696: PUSH
54697: LD_INT 30
54699: PUSH
54700: LD_INT 49
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: DIFF
54708: ST_TO_ADDR
// if not list then
54709: LD_VAR 0 5
54713: NOT
54714: IFFALSE 54718
// exit ;
54716: GO 54864
// weapon := list [ rand ( 1 , list ) ] ;
54718: LD_ADDR_VAR 0 18
54722: PUSH
54723: LD_VAR 0 5
54727: PUSH
54728: LD_INT 1
54730: PPUSH
54731: LD_VAR 0 5
54735: PPUSH
54736: CALL_OW 12
54740: ARRAY
54741: ST_TO_ADDR
// end ; if weapon then
54742: LD_VAR 0 18
54746: IFFALSE 54864
// begin tmp := CostOfWeapon ( weapon ) ;
54748: LD_ADDR_VAR 0 14
54752: PUSH
54753: LD_VAR 0 18
54757: PPUSH
54758: CALL_OW 451
54762: ST_TO_ADDR
// j := GetBase ( tower ) ;
54763: LD_ADDR_VAR 0 9
54767: PUSH
54768: LD_VAR 0 1
54772: PPUSH
54773: CALL_OW 274
54777: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54778: LD_VAR 0 9
54782: PPUSH
54783: LD_INT 1
54785: PPUSH
54786: CALL_OW 275
54790: PUSH
54791: LD_VAR 0 14
54795: PUSH
54796: LD_INT 1
54798: ARRAY
54799: GREATEREQUAL
54800: IFFALSE 54826
54802: PUSH
54803: LD_VAR 0 9
54807: PPUSH
54808: LD_INT 2
54810: PPUSH
54811: CALL_OW 275
54815: PUSH
54816: LD_VAR 0 14
54820: PUSH
54821: LD_INT 2
54823: ARRAY
54824: GREATEREQUAL
54825: AND
54826: IFFALSE 54852
54828: PUSH
54829: LD_VAR 0 9
54833: PPUSH
54834: LD_INT 3
54836: PPUSH
54837: CALL_OW 275
54841: PUSH
54842: LD_VAR 0 14
54846: PUSH
54847: LD_INT 3
54849: ARRAY
54850: GREATEREQUAL
54851: AND
54852: IFFALSE 54864
// result := weapon ;
54854: LD_ADDR_VAR 0 3
54858: PUSH
54859: LD_VAR 0 18
54863: ST_TO_ADDR
// end ; end ;
54864: LD_VAR 0 3
54868: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54869: LD_INT 0
54871: PPUSH
54872: PPUSH
// result := true ;
54873: LD_ADDR_VAR 0 3
54877: PUSH
54878: LD_INT 1
54880: ST_TO_ADDR
// if array1 = array2 then
54881: LD_VAR 0 1
54885: PUSH
54886: LD_VAR 0 2
54890: EQUAL
54891: IFFALSE 54951
// begin for i = 1 to array1 do
54893: LD_ADDR_VAR 0 4
54897: PUSH
54898: DOUBLE
54899: LD_INT 1
54901: DEC
54902: ST_TO_ADDR
54903: LD_VAR 0 1
54907: PUSH
54908: FOR_TO
54909: IFFALSE 54947
// if array1 [ i ] <> array2 [ i ] then
54911: LD_VAR 0 1
54915: PUSH
54916: LD_VAR 0 4
54920: ARRAY
54921: PUSH
54922: LD_VAR 0 2
54926: PUSH
54927: LD_VAR 0 4
54931: ARRAY
54932: NONEQUAL
54933: IFFALSE 54945
// begin result := false ;
54935: LD_ADDR_VAR 0 3
54939: PUSH
54940: LD_INT 0
54942: ST_TO_ADDR
// break ;
54943: GO 54947
// end ;
54945: GO 54908
54947: POP
54948: POP
// end else
54949: GO 54959
// result := false ;
54951: LD_ADDR_VAR 0 3
54955: PUSH
54956: LD_INT 0
54958: ST_TO_ADDR
// end ;
54959: LD_VAR 0 3
54963: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54964: LD_INT 0
54966: PPUSH
54967: PPUSH
// if not array1 or not array2 then
54968: LD_VAR 0 1
54972: NOT
54973: IFTRUE 54982
54975: PUSH
54976: LD_VAR 0 2
54980: NOT
54981: OR
54982: IFFALSE 54986
// exit ;
54984: GO 55050
// result := true ;
54986: LD_ADDR_VAR 0 3
54990: PUSH
54991: LD_INT 1
54993: ST_TO_ADDR
// for i = 1 to array1 do
54994: LD_ADDR_VAR 0 4
54998: PUSH
54999: DOUBLE
55000: LD_INT 1
55002: DEC
55003: ST_TO_ADDR
55004: LD_VAR 0 1
55008: PUSH
55009: FOR_TO
55010: IFFALSE 55048
// if array1 [ i ] <> array2 [ i ] then
55012: LD_VAR 0 1
55016: PUSH
55017: LD_VAR 0 4
55021: ARRAY
55022: PUSH
55023: LD_VAR 0 2
55027: PUSH
55028: LD_VAR 0 4
55032: ARRAY
55033: NONEQUAL
55034: IFFALSE 55046
// begin result := false ;
55036: LD_ADDR_VAR 0 3
55040: PUSH
55041: LD_INT 0
55043: ST_TO_ADDR
// break ;
55044: GO 55048
// end ;
55046: GO 55009
55048: POP
55049: POP
// end ;
55050: LD_VAR 0 3
55054: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55055: LD_INT 0
55057: PPUSH
55058: PPUSH
55059: PPUSH
// pom := GetBase ( fac ) ;
55060: LD_ADDR_VAR 0 5
55064: PUSH
55065: LD_VAR 0 1
55069: PPUSH
55070: CALL_OW 274
55074: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55075: LD_ADDR_VAR 0 4
55079: PUSH
55080: LD_VAR 0 2
55084: PUSH
55085: LD_INT 1
55087: ARRAY
55088: PPUSH
55089: LD_VAR 0 2
55093: PUSH
55094: LD_INT 2
55096: ARRAY
55097: PPUSH
55098: LD_VAR 0 2
55102: PUSH
55103: LD_INT 3
55105: ARRAY
55106: PPUSH
55107: LD_VAR 0 2
55111: PUSH
55112: LD_INT 4
55114: ARRAY
55115: PPUSH
55116: CALL_OW 449
55120: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55121: LD_ADDR_VAR 0 3
55125: PUSH
55126: LD_VAR 0 5
55130: PPUSH
55131: LD_INT 1
55133: PPUSH
55134: CALL_OW 275
55138: PUSH
55139: LD_VAR 0 4
55143: PUSH
55144: LD_INT 1
55146: ARRAY
55147: GREATEREQUAL
55148: IFFALSE 55174
55150: PUSH
55151: LD_VAR 0 5
55155: PPUSH
55156: LD_INT 2
55158: PPUSH
55159: CALL_OW 275
55163: PUSH
55164: LD_VAR 0 4
55168: PUSH
55169: LD_INT 2
55171: ARRAY
55172: GREATEREQUAL
55173: AND
55174: IFFALSE 55200
55176: PUSH
55177: LD_VAR 0 5
55181: PPUSH
55182: LD_INT 3
55184: PPUSH
55185: CALL_OW 275
55189: PUSH
55190: LD_VAR 0 4
55194: PUSH
55195: LD_INT 3
55197: ARRAY
55198: GREATEREQUAL
55199: AND
55200: ST_TO_ADDR
// end ;
55201: LD_VAR 0 3
55205: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55206: LD_INT 0
55208: PPUSH
55209: PPUSH
55210: PPUSH
55211: PPUSH
// pom := GetBase ( building ) ;
55212: LD_ADDR_VAR 0 3
55216: PUSH
55217: LD_VAR 0 1
55221: PPUSH
55222: CALL_OW 274
55226: ST_TO_ADDR
// if not pom then
55227: LD_VAR 0 3
55231: NOT
55232: IFFALSE 55236
// exit ;
55234: GO 55410
// btype := GetBType ( building ) ;
55236: LD_ADDR_VAR 0 5
55240: PUSH
55241: LD_VAR 0 1
55245: PPUSH
55246: CALL_OW 266
55250: ST_TO_ADDR
// if btype = b_armoury then
55251: LD_VAR 0 5
55255: PUSH
55256: LD_INT 4
55258: EQUAL
55259: IFFALSE 55269
// btype := b_barracks ;
55261: LD_ADDR_VAR 0 5
55265: PUSH
55266: LD_INT 5
55268: ST_TO_ADDR
// if btype = b_depot then
55269: LD_VAR 0 5
55273: PUSH
55274: LD_INT 0
55276: EQUAL
55277: IFFALSE 55287
// btype := b_warehouse ;
55279: LD_ADDR_VAR 0 5
55283: PUSH
55284: LD_INT 1
55286: ST_TO_ADDR
// if btype = b_workshop then
55287: LD_VAR 0 5
55291: PUSH
55292: LD_INT 2
55294: EQUAL
55295: IFFALSE 55305
// btype := b_factory ;
55297: LD_ADDR_VAR 0 5
55301: PUSH
55302: LD_INT 3
55304: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55305: LD_ADDR_VAR 0 4
55309: PUSH
55310: LD_VAR 0 5
55314: PPUSH
55315: LD_VAR 0 1
55319: PPUSH
55320: CALL_OW 248
55324: PPUSH
55325: CALL_OW 450
55329: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55330: LD_ADDR_VAR 0 2
55334: PUSH
55335: LD_VAR 0 3
55339: PPUSH
55340: LD_INT 1
55342: PPUSH
55343: CALL_OW 275
55347: PUSH
55348: LD_VAR 0 4
55352: PUSH
55353: LD_INT 1
55355: ARRAY
55356: GREATEREQUAL
55357: IFFALSE 55383
55359: PUSH
55360: LD_VAR 0 3
55364: PPUSH
55365: LD_INT 2
55367: PPUSH
55368: CALL_OW 275
55372: PUSH
55373: LD_VAR 0 4
55377: PUSH
55378: LD_INT 2
55380: ARRAY
55381: GREATEREQUAL
55382: AND
55383: IFFALSE 55409
55385: PUSH
55386: LD_VAR 0 3
55390: PPUSH
55391: LD_INT 3
55393: PPUSH
55394: CALL_OW 275
55398: PUSH
55399: LD_VAR 0 4
55403: PUSH
55404: LD_INT 3
55406: ARRAY
55407: GREATEREQUAL
55408: AND
55409: ST_TO_ADDR
// end ;
55410: LD_VAR 0 2
55414: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55415: LD_INT 0
55417: PPUSH
55418: PPUSH
55419: PPUSH
// pom := GetBase ( building ) ;
55420: LD_ADDR_VAR 0 4
55424: PUSH
55425: LD_VAR 0 1
55429: PPUSH
55430: CALL_OW 274
55434: ST_TO_ADDR
// if not pom then
55435: LD_VAR 0 4
55439: NOT
55440: IFFALSE 55444
// exit ;
55442: GO 55549
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55444: LD_ADDR_VAR 0 5
55448: PUSH
55449: LD_VAR 0 2
55453: PPUSH
55454: LD_VAR 0 1
55458: PPUSH
55459: CALL_OW 248
55463: PPUSH
55464: CALL_OW 450
55468: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55469: LD_ADDR_VAR 0 3
55473: PUSH
55474: LD_VAR 0 4
55478: PPUSH
55479: LD_INT 1
55481: PPUSH
55482: CALL_OW 275
55486: PUSH
55487: LD_VAR 0 5
55491: PUSH
55492: LD_INT 1
55494: ARRAY
55495: GREATEREQUAL
55496: IFFALSE 55522
55498: PUSH
55499: LD_VAR 0 4
55503: PPUSH
55504: LD_INT 2
55506: PPUSH
55507: CALL_OW 275
55511: PUSH
55512: LD_VAR 0 5
55516: PUSH
55517: LD_INT 2
55519: ARRAY
55520: GREATEREQUAL
55521: AND
55522: IFFALSE 55548
55524: PUSH
55525: LD_VAR 0 4
55529: PPUSH
55530: LD_INT 3
55532: PPUSH
55533: CALL_OW 275
55537: PUSH
55538: LD_VAR 0 5
55542: PUSH
55543: LD_INT 3
55545: ARRAY
55546: GREATEREQUAL
55547: AND
55548: ST_TO_ADDR
// end ;
55549: LD_VAR 0 3
55553: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55554: LD_INT 0
55556: PPUSH
55557: PPUSH
55558: PPUSH
55559: PPUSH
55560: PPUSH
55561: PPUSH
55562: PPUSH
55563: PPUSH
55564: PPUSH
55565: PPUSH
55566: PPUSH
// result := false ;
55567: LD_ADDR_VAR 0 8
55571: PUSH
55572: LD_INT 0
55574: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55575: LD_VAR 0 5
55579: NOT
55580: IFTRUE 55589
55582: PUSH
55583: LD_VAR 0 1
55587: NOT
55588: OR
55589: IFTRUE 55598
55591: PUSH
55592: LD_VAR 0 2
55596: NOT
55597: OR
55598: IFTRUE 55607
55600: PUSH
55601: LD_VAR 0 3
55605: NOT
55606: OR
55607: IFFALSE 55611
// exit ;
55609: GO 56437
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55611: LD_ADDR_VAR 0 14
55615: PUSH
55616: LD_VAR 0 1
55620: PPUSH
55621: LD_VAR 0 2
55625: PPUSH
55626: LD_VAR 0 3
55630: PPUSH
55631: LD_VAR 0 4
55635: PPUSH
55636: LD_VAR 0 5
55640: PUSH
55641: LD_INT 1
55643: ARRAY
55644: PPUSH
55645: CALL_OW 248
55649: PPUSH
55650: LD_INT 0
55652: PPUSH
55653: CALL 57718 0 6
55657: ST_TO_ADDR
// if not hexes then
55658: LD_VAR 0 14
55662: NOT
55663: IFFALSE 55667
// exit ;
55665: GO 56437
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55667: LD_ADDR_VAR 0 17
55671: PUSH
55672: LD_VAR 0 5
55676: PPUSH
55677: LD_INT 22
55679: PUSH
55680: LD_VAR 0 13
55684: PPUSH
55685: CALL_OW 255
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 30
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 30
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PPUSH
55726: CALL_OW 72
55730: ST_TO_ADDR
// for i = 1 to hexes do
55731: LD_ADDR_VAR 0 9
55735: PUSH
55736: DOUBLE
55737: LD_INT 1
55739: DEC
55740: ST_TO_ADDR
55741: LD_VAR 0 14
55745: PUSH
55746: FOR_TO
55747: IFFALSE 56435
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55749: LD_ADDR_VAR 0 13
55753: PUSH
55754: LD_VAR 0 14
55758: PUSH
55759: LD_VAR 0 9
55763: ARRAY
55764: PUSH
55765: LD_INT 1
55767: ARRAY
55768: PPUSH
55769: LD_VAR 0 14
55773: PUSH
55774: LD_VAR 0 9
55778: ARRAY
55779: PUSH
55780: LD_INT 2
55782: ARRAY
55783: PPUSH
55784: CALL_OW 428
55788: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55789: LD_VAR 0 14
55793: PUSH
55794: LD_VAR 0 9
55798: ARRAY
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PPUSH
55804: LD_VAR 0 14
55808: PUSH
55809: LD_VAR 0 9
55813: ARRAY
55814: PUSH
55815: LD_INT 2
55817: ARRAY
55818: PPUSH
55819: CALL_OW 351
55823: IFTRUE 55862
55825: PUSH
55826: LD_VAR 0 14
55830: PUSH
55831: LD_VAR 0 9
55835: ARRAY
55836: PUSH
55837: LD_INT 1
55839: ARRAY
55840: PPUSH
55841: LD_VAR 0 14
55845: PUSH
55846: LD_VAR 0 9
55850: ARRAY
55851: PUSH
55852: LD_INT 2
55854: ARRAY
55855: PPUSH
55856: CALL_OW 488
55860: NOT
55861: OR
55862: IFTRUE 55879
55864: PUSH
55865: LD_VAR 0 13
55869: PPUSH
55870: CALL_OW 247
55874: PUSH
55875: LD_INT 3
55877: EQUAL
55878: OR
55879: IFFALSE 55885
// exit ;
55881: POP
55882: POP
55883: GO 56437
// if not tmp then
55885: LD_VAR 0 13
55889: NOT
55890: IFFALSE 55894
// continue ;
55892: GO 55746
// result := true ;
55894: LD_ADDR_VAR 0 8
55898: PUSH
55899: LD_INT 1
55901: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55902: LD_VAR 0 6
55906: IFFALSE 55923
55908: PUSH
55909: LD_VAR 0 13
55913: PPUSH
55914: CALL_OW 247
55918: PUSH
55919: LD_INT 2
55921: EQUAL
55922: AND
55923: IFFALSE 55940
55925: PUSH
55926: LD_VAR 0 13
55930: PPUSH
55931: CALL_OW 263
55935: PUSH
55936: LD_INT 1
55938: EQUAL
55939: AND
55940: IFFALSE 56104
// begin if IsDrivenBy ( tmp ) then
55942: LD_VAR 0 13
55946: PPUSH
55947: CALL_OW 311
55951: IFFALSE 55955
// continue ;
55953: GO 55746
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55955: LD_VAR 0 6
55959: PPUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 60
55965: PUSH
55966: EMPTY
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 55
55978: PUSH
55979: EMPTY
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PPUSH
55990: CALL_OW 72
55994: IFFALSE 56102
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55996: LD_ADDR_VAR 0 18
56000: PUSH
56001: LD_VAR 0 6
56005: PPUSH
56006: LD_INT 3
56008: PUSH
56009: LD_INT 60
56011: PUSH
56012: EMPTY
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 55
56024: PUSH
56025: EMPTY
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PPUSH
56036: CALL_OW 72
56040: PUSH
56041: LD_INT 1
56043: ARRAY
56044: ST_TO_ADDR
// if IsInUnit ( driver ) then
56045: LD_VAR 0 18
56049: PPUSH
56050: CALL_OW 310
56054: IFFALSE 56065
// ComExit ( driver ) ;
56056: LD_VAR 0 18
56060: PPUSH
56061: CALL 81708 0 1
// AddComEnterUnit ( driver , tmp ) ;
56065: LD_VAR 0 18
56069: PPUSH
56070: LD_VAR 0 13
56074: PPUSH
56075: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56079: LD_VAR 0 18
56083: PPUSH
56084: LD_VAR 0 7
56088: PPUSH
56089: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56093: LD_VAR 0 18
56097: PPUSH
56098: CALL_OW 181
// end ; continue ;
56102: GO 55746
// end ; if not cleaners or not tmp in cleaners then
56104: LD_VAR 0 6
56108: NOT
56109: IFTRUE 56124
56111: PUSH
56112: LD_VAR 0 13
56116: PUSH
56117: LD_VAR 0 6
56121: IN
56122: NOT
56123: OR
56124: IFFALSE 56433
// begin if dep then
56126: LD_VAR 0 17
56130: IFFALSE 56266
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56132: LD_ADDR_VAR 0 16
56136: PUSH
56137: LD_VAR 0 17
56141: PUSH
56142: LD_INT 1
56144: ARRAY
56145: PPUSH
56146: CALL_OW 250
56150: PPUSH
56151: LD_VAR 0 17
56155: PUSH
56156: LD_INT 1
56158: ARRAY
56159: PPUSH
56160: CALL_OW 254
56164: PPUSH
56165: LD_INT 5
56167: PPUSH
56168: CALL_OW 272
56172: PUSH
56173: LD_VAR 0 17
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: PPUSH
56182: CALL_OW 251
56186: PPUSH
56187: LD_VAR 0 17
56191: PUSH
56192: LD_INT 1
56194: ARRAY
56195: PPUSH
56196: CALL_OW 254
56200: PPUSH
56201: LD_INT 5
56203: PPUSH
56204: CALL_OW 273
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56213: LD_VAR 0 16
56217: PUSH
56218: LD_INT 1
56220: ARRAY
56221: PPUSH
56222: LD_VAR 0 16
56226: PUSH
56227: LD_INT 2
56229: ARRAY
56230: PPUSH
56231: CALL_OW 488
56235: IFFALSE 56266
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56237: LD_VAR 0 13
56241: PPUSH
56242: LD_VAR 0 16
56246: PUSH
56247: LD_INT 1
56249: ARRAY
56250: PPUSH
56251: LD_VAR 0 16
56255: PUSH
56256: LD_INT 2
56258: ARRAY
56259: PPUSH
56260: CALL_OW 111
// continue ;
56264: GO 55746
// end ; end ; r := GetDir ( tmp ) ;
56266: LD_ADDR_VAR 0 15
56270: PUSH
56271: LD_VAR 0 13
56275: PPUSH
56276: CALL_OW 254
56280: ST_TO_ADDR
// if r = 5 then
56281: LD_VAR 0 15
56285: PUSH
56286: LD_INT 5
56288: EQUAL
56289: IFFALSE 56299
// r := 0 ;
56291: LD_ADDR_VAR 0 15
56295: PUSH
56296: LD_INT 0
56298: ST_TO_ADDR
// for j = r to 5 do
56299: LD_ADDR_VAR 0 10
56303: PUSH
56304: DOUBLE
56305: LD_VAR 0 15
56309: DEC
56310: ST_TO_ADDR
56311: LD_INT 5
56313: PUSH
56314: FOR_TO
56315: IFFALSE 56431
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56317: LD_ADDR_VAR 0 11
56321: PUSH
56322: LD_VAR 0 13
56326: PPUSH
56327: CALL_OW 250
56331: PPUSH
56332: LD_VAR 0 10
56336: PPUSH
56337: LD_INT 2
56339: PPUSH
56340: CALL_OW 272
56344: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56345: LD_ADDR_VAR 0 12
56349: PUSH
56350: LD_VAR 0 13
56354: PPUSH
56355: CALL_OW 251
56359: PPUSH
56360: LD_VAR 0 10
56364: PPUSH
56365: LD_INT 2
56367: PPUSH
56368: CALL_OW 273
56372: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56373: LD_VAR 0 11
56377: PPUSH
56378: LD_VAR 0 12
56382: PPUSH
56383: CALL_OW 488
56387: IFFALSE 56406
56389: PUSH
56390: LD_VAR 0 11
56394: PPUSH
56395: LD_VAR 0 12
56399: PPUSH
56400: CALL_OW 428
56404: NOT
56405: AND
56406: IFFALSE 56429
// begin ComMoveXY ( tmp , _x , _y ) ;
56408: LD_VAR 0 13
56412: PPUSH
56413: LD_VAR 0 11
56417: PPUSH
56418: LD_VAR 0 12
56422: PPUSH
56423: CALL_OW 111
// break ;
56427: GO 56431
// end ; end ;
56429: GO 56314
56431: POP
56432: POP
// end ; end ;
56433: GO 55746
56435: POP
56436: POP
// end ;
56437: LD_VAR 0 8
56441: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56442: LD_INT 0
56444: PPUSH
// result := true ;
56445: LD_ADDR_VAR 0 3
56449: PUSH
56450: LD_INT 1
56452: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56453: LD_VAR 0 2
56457: PUSH
56458: LD_INT 24
56460: DOUBLE
56461: EQUAL
56462: IFTRUE 56472
56464: LD_INT 33
56466: DOUBLE
56467: EQUAL
56468: IFTRUE 56472
56470: GO 56497
56472: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56473: LD_ADDR_VAR 0 3
56477: PUSH
56478: LD_INT 32
56480: PPUSH
56481: LD_VAR 0 1
56485: PPUSH
56486: CALL_OW 321
56490: PUSH
56491: LD_INT 2
56493: EQUAL
56494: ST_TO_ADDR
56495: GO 56813
56497: LD_INT 20
56499: DOUBLE
56500: EQUAL
56501: IFTRUE 56505
56503: GO 56530
56505: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56506: LD_ADDR_VAR 0 3
56510: PUSH
56511: LD_INT 6
56513: PPUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: CALL_OW 321
56523: PUSH
56524: LD_INT 2
56526: EQUAL
56527: ST_TO_ADDR
56528: GO 56813
56530: LD_INT 22
56532: DOUBLE
56533: EQUAL
56534: IFTRUE 56544
56536: LD_INT 36
56538: DOUBLE
56539: EQUAL
56540: IFTRUE 56544
56542: GO 56569
56544: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56545: LD_ADDR_VAR 0 3
56549: PUSH
56550: LD_INT 15
56552: PPUSH
56553: LD_VAR 0 1
56557: PPUSH
56558: CALL_OW 321
56562: PUSH
56563: LD_INT 2
56565: EQUAL
56566: ST_TO_ADDR
56567: GO 56813
56569: LD_INT 30
56571: DOUBLE
56572: EQUAL
56573: IFTRUE 56577
56575: GO 56602
56577: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56578: LD_ADDR_VAR 0 3
56582: PUSH
56583: LD_INT 20
56585: PPUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: CALL_OW 321
56595: PUSH
56596: LD_INT 2
56598: EQUAL
56599: ST_TO_ADDR
56600: GO 56813
56602: LD_INT 28
56604: DOUBLE
56605: EQUAL
56606: IFTRUE 56616
56608: LD_INT 21
56610: DOUBLE
56611: EQUAL
56612: IFTRUE 56616
56614: GO 56641
56616: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56617: LD_ADDR_VAR 0 3
56621: PUSH
56622: LD_INT 21
56624: PPUSH
56625: LD_VAR 0 1
56629: PPUSH
56630: CALL_OW 321
56634: PUSH
56635: LD_INT 2
56637: EQUAL
56638: ST_TO_ADDR
56639: GO 56813
56641: LD_INT 16
56643: DOUBLE
56644: EQUAL
56645: IFTRUE 56649
56647: GO 56674
56649: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56650: LD_ADDR_VAR 0 3
56654: PUSH
56655: LD_INT 84
56657: PPUSH
56658: LD_VAR 0 1
56662: PPUSH
56663: CALL_OW 321
56667: PUSH
56668: LD_INT 2
56670: EQUAL
56671: ST_TO_ADDR
56672: GO 56813
56674: LD_INT 19
56676: DOUBLE
56677: EQUAL
56678: IFTRUE 56688
56680: LD_INT 23
56682: DOUBLE
56683: EQUAL
56684: IFTRUE 56688
56686: GO 56713
56688: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56689: LD_ADDR_VAR 0 3
56693: PUSH
56694: LD_INT 83
56696: PPUSH
56697: LD_VAR 0 1
56701: PPUSH
56702: CALL_OW 321
56706: PUSH
56707: LD_INT 2
56709: EQUAL
56710: ST_TO_ADDR
56711: GO 56813
56713: LD_INT 17
56715: DOUBLE
56716: EQUAL
56717: IFTRUE 56721
56719: GO 56746
56721: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56722: LD_ADDR_VAR 0 3
56726: PUSH
56727: LD_INT 39
56729: PPUSH
56730: LD_VAR 0 1
56734: PPUSH
56735: CALL_OW 321
56739: PUSH
56740: LD_INT 2
56742: EQUAL
56743: ST_TO_ADDR
56744: GO 56813
56746: LD_INT 18
56748: DOUBLE
56749: EQUAL
56750: IFTRUE 56754
56752: GO 56779
56754: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56755: LD_ADDR_VAR 0 3
56759: PUSH
56760: LD_INT 40
56762: PPUSH
56763: LD_VAR 0 1
56767: PPUSH
56768: CALL_OW 321
56772: PUSH
56773: LD_INT 2
56775: EQUAL
56776: ST_TO_ADDR
56777: GO 56813
56779: LD_INT 27
56781: DOUBLE
56782: EQUAL
56783: IFTRUE 56787
56785: GO 56812
56787: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56788: LD_ADDR_VAR 0 3
56792: PUSH
56793: LD_INT 35
56795: PPUSH
56796: LD_VAR 0 1
56800: PPUSH
56801: CALL_OW 321
56805: PUSH
56806: LD_INT 2
56808: EQUAL
56809: ST_TO_ADDR
56810: GO 56813
56812: POP
// end ;
56813: LD_VAR 0 3
56817: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56818: LD_INT 0
56820: PPUSH
56821: PPUSH
56822: PPUSH
56823: PPUSH
56824: PPUSH
56825: PPUSH
56826: PPUSH
56827: PPUSH
56828: PPUSH
56829: PPUSH
56830: PPUSH
// result := false ;
56831: LD_ADDR_VAR 0 6
56835: PUSH
56836: LD_INT 0
56838: ST_TO_ADDR
// if btype = b_depot then
56839: LD_VAR 0 2
56843: PUSH
56844: LD_INT 0
56846: EQUAL
56847: IFFALSE 56859
// begin result := true ;
56849: LD_ADDR_VAR 0 6
56853: PUSH
56854: LD_INT 1
56856: ST_TO_ADDR
// exit ;
56857: GO 57713
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56859: LD_VAR 0 1
56863: NOT
56864: IFTRUE 56889
56866: PUSH
56867: LD_VAR 0 1
56871: PPUSH
56872: CALL_OW 266
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: IN
56887: NOT
56888: OR
56889: IFTRUE 56898
56891: PUSH
56892: LD_VAR 0 2
56896: NOT
56897: OR
56898: IFTRUE 56934
56900: PUSH
56901: LD_VAR 0 5
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: LD_INT 4
56920: PUSH
56921: LD_INT 5
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: IN
56932: NOT
56933: OR
56934: IFTRUE 56953
56936: PUSH
56937: LD_VAR 0 3
56941: PPUSH
56942: LD_VAR 0 4
56946: PPUSH
56947: CALL_OW 488
56951: NOT
56952: OR
56953: IFFALSE 56957
// exit ;
56955: GO 57713
// side := GetSide ( depot ) ;
56957: LD_ADDR_VAR 0 9
56961: PUSH
56962: LD_VAR 0 1
56966: PPUSH
56967: CALL_OW 255
56971: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56972: LD_VAR 0 9
56976: PPUSH
56977: LD_VAR 0 2
56981: PPUSH
56982: CALL 56442 0 2
56986: NOT
56987: IFFALSE 56991
// exit ;
56989: GO 57713
// pom := GetBase ( depot ) ;
56991: LD_ADDR_VAR 0 10
56995: PUSH
56996: LD_VAR 0 1
57000: PPUSH
57001: CALL_OW 274
57005: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57006: LD_ADDR_VAR 0 11
57010: PUSH
57011: LD_VAR 0 2
57015: PPUSH
57016: LD_VAR 0 1
57020: PPUSH
57021: CALL_OW 248
57025: PPUSH
57026: CALL_OW 450
57030: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57031: LD_VAR 0 10
57035: PPUSH
57036: LD_INT 1
57038: PPUSH
57039: CALL_OW 275
57043: PUSH
57044: LD_VAR 0 11
57048: PUSH
57049: LD_INT 1
57051: ARRAY
57052: GREATEREQUAL
57053: IFFALSE 57079
57055: PUSH
57056: LD_VAR 0 10
57060: PPUSH
57061: LD_INT 2
57063: PPUSH
57064: CALL_OW 275
57068: PUSH
57069: LD_VAR 0 11
57073: PUSH
57074: LD_INT 2
57076: ARRAY
57077: GREATEREQUAL
57078: AND
57079: IFFALSE 57105
57081: PUSH
57082: LD_VAR 0 10
57086: PPUSH
57087: LD_INT 3
57089: PPUSH
57090: CALL_OW 275
57094: PUSH
57095: LD_VAR 0 11
57099: PUSH
57100: LD_INT 3
57102: ARRAY
57103: GREATEREQUAL
57104: AND
57105: NOT
57106: IFFALSE 57110
// exit ;
57108: GO 57713
// if GetBType ( depot ) = b_depot then
57110: LD_VAR 0 1
57114: PPUSH
57115: CALL_OW 266
57119: PUSH
57120: LD_INT 0
57122: EQUAL
57123: IFFALSE 57135
// dist := 28 else
57125: LD_ADDR_VAR 0 14
57129: PUSH
57130: LD_INT 28
57132: ST_TO_ADDR
57133: GO 57143
// dist := 36 ;
57135: LD_ADDR_VAR 0 14
57139: PUSH
57140: LD_INT 36
57142: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57143: LD_VAR 0 1
57147: PPUSH
57148: LD_VAR 0 3
57152: PPUSH
57153: LD_VAR 0 4
57157: PPUSH
57158: CALL_OW 297
57162: PUSH
57163: LD_VAR 0 14
57167: GREATER
57168: IFFALSE 57172
// exit ;
57170: GO 57713
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57172: LD_ADDR_VAR 0 12
57176: PUSH
57177: LD_VAR 0 2
57181: PPUSH
57182: LD_VAR 0 3
57186: PPUSH
57187: LD_VAR 0 4
57191: PPUSH
57192: LD_VAR 0 5
57196: PPUSH
57197: LD_VAR 0 1
57201: PPUSH
57202: CALL_OW 248
57206: PPUSH
57207: LD_INT 0
57209: PPUSH
57210: CALL 57718 0 6
57214: ST_TO_ADDR
// if not hexes then
57215: LD_VAR 0 12
57219: NOT
57220: IFFALSE 57224
// exit ;
57222: GO 57713
// hex := GetHexInfo ( x , y ) ;
57224: LD_ADDR_VAR 0 15
57228: PUSH
57229: LD_VAR 0 3
57233: PPUSH
57234: LD_VAR 0 4
57238: PPUSH
57239: CALL_OW 546
57243: ST_TO_ADDR
// if hex [ 1 ] then
57244: LD_VAR 0 15
57248: PUSH
57249: LD_INT 1
57251: ARRAY
57252: IFFALSE 57256
// exit ;
57254: GO 57713
// height := hex [ 2 ] ;
57256: LD_ADDR_VAR 0 13
57260: PUSH
57261: LD_VAR 0 15
57265: PUSH
57266: LD_INT 2
57268: ARRAY
57269: ST_TO_ADDR
// for i = 1 to hexes do
57270: LD_ADDR_VAR 0 7
57274: PUSH
57275: DOUBLE
57276: LD_INT 1
57278: DEC
57279: ST_TO_ADDR
57280: LD_VAR 0 12
57284: PUSH
57285: FOR_TO
57286: IFFALSE 57630
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57288: LD_VAR 0 12
57292: PUSH
57293: LD_VAR 0 7
57297: ARRAY
57298: PUSH
57299: LD_INT 1
57301: ARRAY
57302: PPUSH
57303: LD_VAR 0 12
57307: PUSH
57308: LD_VAR 0 7
57312: ARRAY
57313: PUSH
57314: LD_INT 2
57316: ARRAY
57317: PPUSH
57318: CALL_OW 488
57322: NOT
57323: IFTRUE 57365
57325: PUSH
57326: LD_VAR 0 12
57330: PUSH
57331: LD_VAR 0 7
57335: ARRAY
57336: PUSH
57337: LD_INT 1
57339: ARRAY
57340: PPUSH
57341: LD_VAR 0 12
57345: PUSH
57346: LD_VAR 0 7
57350: ARRAY
57351: PUSH
57352: LD_INT 2
57354: ARRAY
57355: PPUSH
57356: CALL_OW 428
57360: PUSH
57361: LD_INT 0
57363: GREATER
57364: OR
57365: IFTRUE 57403
57367: PUSH
57368: LD_VAR 0 12
57372: PUSH
57373: LD_VAR 0 7
57377: ARRAY
57378: PUSH
57379: LD_INT 1
57381: ARRAY
57382: PPUSH
57383: LD_VAR 0 12
57387: PUSH
57388: LD_VAR 0 7
57392: ARRAY
57393: PUSH
57394: LD_INT 2
57396: ARRAY
57397: PPUSH
57398: CALL_OW 351
57402: OR
57403: IFFALSE 57409
// exit ;
57405: POP
57406: POP
57407: GO 57713
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57409: LD_ADDR_VAR 0 8
57413: PUSH
57414: LD_VAR 0 12
57418: PUSH
57419: LD_VAR 0 7
57423: ARRAY
57424: PUSH
57425: LD_INT 1
57427: ARRAY
57428: PPUSH
57429: LD_VAR 0 12
57433: PUSH
57434: LD_VAR 0 7
57438: ARRAY
57439: PUSH
57440: LD_INT 2
57442: ARRAY
57443: PPUSH
57444: CALL_OW 546
57448: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57449: LD_VAR 0 8
57453: PUSH
57454: LD_INT 1
57456: ARRAY
57457: IFTRUE 57479
57459: PUSH
57460: LD_VAR 0 8
57464: PUSH
57465: LD_INT 2
57467: ARRAY
57468: PUSH
57469: LD_VAR 0 13
57473: PUSH
57474: LD_INT 2
57476: PLUS
57477: GREATER
57478: OR
57479: IFTRUE 57501
57481: PUSH
57482: LD_VAR 0 8
57486: PUSH
57487: LD_INT 2
57489: ARRAY
57490: PUSH
57491: LD_VAR 0 13
57495: PUSH
57496: LD_INT 2
57498: MINUS
57499: LESS
57500: OR
57501: IFTRUE 57569
57503: PUSH
57504: LD_VAR 0 8
57508: PUSH
57509: LD_INT 3
57511: ARRAY
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 8
57518: PUSH
57519: LD_INT 9
57521: PUSH
57522: LD_INT 10
57524: PUSH
57525: LD_INT 11
57527: PUSH
57528: LD_INT 12
57530: PUSH
57531: LD_INT 13
57533: PUSH
57534: LD_INT 16
57536: PUSH
57537: LD_INT 17
57539: PUSH
57540: LD_INT 18
57542: PUSH
57543: LD_INT 19
57545: PUSH
57546: LD_INT 20
57548: PUSH
57549: LD_INT 21
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: IN
57567: NOT
57568: OR
57569: IFTRUE 57582
57571: PUSH
57572: LD_VAR 0 8
57576: PUSH
57577: LD_INT 5
57579: ARRAY
57580: NOT
57581: OR
57582: IFTRUE 57622
57584: PUSH
57585: LD_VAR 0 8
57589: PUSH
57590: LD_INT 6
57592: ARRAY
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 7
57602: PUSH
57603: LD_INT 9
57605: PUSH
57606: LD_INT 10
57608: PUSH
57609: LD_INT 11
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: IN
57620: NOT
57621: OR
57622: IFFALSE 57628
// exit ;
57624: POP
57625: POP
57626: GO 57713
// end ;
57628: GO 57285
57630: POP
57631: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57632: LD_VAR 0 9
57636: PPUSH
57637: LD_VAR 0 3
57641: PPUSH
57642: LD_VAR 0 4
57646: PPUSH
57647: LD_INT 20
57649: PPUSH
57650: CALL 49532 0 4
57654: PUSH
57655: LD_INT 4
57657: ARRAY
57658: IFFALSE 57662
// exit ;
57660: GO 57713
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57662: LD_VAR 0 2
57666: PUSH
57667: LD_INT 29
57669: PUSH
57670: LD_INT 30
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: IN
57677: IFFALSE 57701
57679: PUSH
57680: LD_VAR 0 3
57684: PPUSH
57685: LD_VAR 0 4
57689: PPUSH
57690: LD_VAR 0 9
57694: PPUSH
57695: CALL_OW 440
57699: NOT
57700: AND
57701: IFFALSE 57705
// exit ;
57703: GO 57713
// result := true ;
57705: LD_ADDR_VAR 0 6
57709: PUSH
57710: LD_INT 1
57712: ST_TO_ADDR
// end ;
57713: LD_VAR 0 6
57717: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57718: LD_INT 0
57720: PPUSH
57721: PPUSH
57722: PPUSH
57723: PPUSH
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
57730: PPUSH
57731: PPUSH
57732: PPUSH
57733: PPUSH
57734: PPUSH
57735: PPUSH
57736: PPUSH
57737: PPUSH
57738: PPUSH
57739: PPUSH
57740: PPUSH
57741: PPUSH
57742: PPUSH
57743: PPUSH
57744: PPUSH
57745: PPUSH
57746: PPUSH
57747: PPUSH
57748: PPUSH
57749: PPUSH
57750: PPUSH
57751: PPUSH
57752: PPUSH
57753: PPUSH
57754: PPUSH
57755: PPUSH
57756: PPUSH
57757: PPUSH
57758: PPUSH
57759: PPUSH
57760: PPUSH
57761: PPUSH
57762: PPUSH
57763: PPUSH
57764: PPUSH
57765: PPUSH
57766: PPUSH
57767: PPUSH
57768: PPUSH
57769: PPUSH
57770: PPUSH
57771: PPUSH
57772: PPUSH
57773: PPUSH
57774: PPUSH
57775: PPUSH
57776: PPUSH
57777: PPUSH
// result = [ ] ;
57778: LD_ADDR_VAR 0 7
57782: PUSH
57783: EMPTY
57784: ST_TO_ADDR
// temp_list = [ ] ;
57785: LD_ADDR_VAR 0 9
57789: PUSH
57790: EMPTY
57791: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57792: LD_VAR 0 4
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: LD_INT 5
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: IN
57823: NOT
57824: IFTRUE 57867
57826: PUSH
57827: LD_VAR 0 1
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: IN
57842: IFFALSE 57866
57844: PUSH
57845: LD_VAR 0 5
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: IN
57864: NOT
57865: AND
57866: OR
57867: IFFALSE 57871
// exit ;
57869: GO 76270
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57871: LD_VAR 0 1
57875: PUSH
57876: LD_INT 6
57878: PUSH
57879: LD_INT 7
57881: PUSH
57882: LD_INT 8
57884: PUSH
57885: LD_INT 13
57887: PUSH
57888: LD_INT 12
57890: PUSH
57891: LD_INT 15
57893: PUSH
57894: LD_INT 11
57896: PUSH
57897: LD_INT 14
57899: PUSH
57900: LD_INT 10
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: IN
57914: IFFALSE 57924
// btype = b_lab ;
57916: LD_ADDR_VAR 0 1
57920: PUSH
57921: LD_INT 6
57923: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57924: LD_VAR 0 6
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: IN
57943: NOT
57944: IFTRUE 58012
57946: PUSH
57947: LD_VAR 0 1
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 6
57966: PUSH
57967: LD_INT 36
57969: PUSH
57970: LD_INT 4
57972: PUSH
57973: LD_INT 5
57975: PUSH
57976: LD_INT 31
57978: PUSH
57979: LD_INT 32
57981: PUSH
57982: LD_INT 33
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: IN
57998: NOT
57999: IFFALSE 58011
58001: PUSH
58002: LD_VAR 0 6
58006: PUSH
58007: LD_INT 1
58009: EQUAL
58010: AND
58011: OR
58012: IFTRUE 58044
58014: PUSH
58015: LD_VAR 0 1
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 3
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: IN
58030: NOT
58031: IFFALSE 58043
58033: PUSH
58034: LD_VAR 0 6
58038: PUSH
58039: LD_INT 2
58041: EQUAL
58042: AND
58043: OR
58044: IFFALSE 58054
// mode = 0 ;
58046: LD_ADDR_VAR 0 6
58050: PUSH
58051: LD_INT 0
58053: ST_TO_ADDR
// case mode of 0 :
58054: LD_VAR 0 6
58058: PUSH
58059: LD_INT 0
58061: DOUBLE
58062: EQUAL
58063: IFTRUE 58067
58065: GO 69520
58067: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58068: LD_ADDR_VAR 0 11
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58261: LD_ADDR_VAR 0 12
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: NEG
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58457: LD_ADDR_VAR 0 13
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58656: LD_ADDR_VAR 0 14
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58852: LD_ADDR_VAR 0 15
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 3
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59045: LD_ADDR_VAR 0 16
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: NEG
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 3
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59238: LD_ADDR_VAR 0 17
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59468: LD_ADDR_VAR 0 18
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59698: LD_ADDR_VAR 0 19
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59928: LD_ADDR_VAR 0 20
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60158: LD_ADDR_VAR 0 21
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60388: LD_ADDR_VAR 0 22
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60618: LD_ADDR_VAR 0 23
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: LD_INT 3
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60898: LD_ADDR_VAR 0 24
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61174: LD_ADDR_VAR 0 25
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 2
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 3
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61448: LD_ADDR_VAR 0 26
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61724: LD_ADDR_VAR 0 27
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: LD_INT 2
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: NEG
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62004: LD_ADDR_VAR 0 28
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 2
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 3
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62286: LD_ADDR_VAR 0 29
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: LD_INT 2
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 3
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 3
62530: NEG
62531: PUSH
62532: LD_INT 2
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62565: LD_ADDR_VAR 0 30
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: LD_INT 2
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 3
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: NEG
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62843: LD_ADDR_VAR 0 31
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: LD_INT 2
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: LD_INT 2
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: LD_INT 3
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: NEG
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63121: LD_ADDR_VAR 0 32
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: LD_INT 2
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: LD_INT 2
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 3
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: PUSH
63323: LD_INT 2
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 3
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63399: LD_ADDR_VAR 0 33
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 2
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: LD_INT 2
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 2
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 2
63565: NEG
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 3
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: LD_INT 2
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63678: LD_ADDR_VAR 0 34
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: LD_INT 2
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: LD_INT 2
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 3
63923: NEG
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63958: LD_ADDR_VAR 0 35
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 2
64049: NEG
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64070: LD_ADDR_VAR 0 36
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64182: LD_ADDR_VAR 0 37
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64294: LD_ADDR_VAR 0 38
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: LD_INT 1
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: LD_INT 1
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64406: LD_ADDR_VAR 0 39
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64518: LD_ADDR_VAR 0 40
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64630: LD_ADDR_VAR 0 41
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: LD_INT 2
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 2
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: NEG
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: LD_INT 3
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 3
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 3
64904: NEG
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: NEG
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: NEG
64928: PUSH
64929: LD_INT 2
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64980: LD_ADDR_VAR 0 42
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 2
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: PUSH
65106: LD_INT 2
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: LD_INT 3
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: LD_INT 3
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: LD_INT 3
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 3
65289: NEG
65290: PUSH
65291: LD_INT 3
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65330: LD_ADDR_VAR 0 43
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 2
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 1
65519: NEG
65520: PUSH
65521: LD_INT 3
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 3
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 2
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 3
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 3
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65678: LD_ADDR_VAR 0 44
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 2
65844: NEG
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: LD_INT 2
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: LD_INT 3
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 2
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 3
65911: PUSH
65912: LD_INT 2
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 3
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 3
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: LD_INT 3
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66028: LD_ADDR_VAR 0 45
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: LD_INT 1
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 2
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 2
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 2
66153: PUSH
66154: LD_INT 2
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: LD_INT 2
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 2
66206: NEG
66207: PUSH
66208: LD_INT 2
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: LD_INT 3
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 2
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 3
66274: PUSH
66275: LD_INT 3
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: LD_INT 3
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 3
66325: NEG
66326: PUSH
66327: LD_INT 2
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66378: LD_ADDR_VAR 0 46
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 2
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 2
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: LD_INT 1
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 2
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 2
66555: NEG
66556: PUSH
66557: LD_INT 1
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: LD_INT 1
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 3
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: LD_INT 3
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 3
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 2
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 3
66674: NEG
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66726: LD_ADDR_VAR 0 47
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 2
66841: NEG
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66877: LD_ADDR_VAR 0 48
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: LD_INT 2
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 0
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 2
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67024: LD_ADDR_VAR 0 49
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: NEG
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 1
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 2
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 2
67126: PUSH
67127: LD_INT 1
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 2
67136: PUSH
67137: LD_INT 2
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67168: LD_ADDR_VAR 0 50
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: LD_INT 0
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: LD_INT 1
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: LD_INT 1
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 2
67259: PUSH
67260: LD_INT 2
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: PUSH
67270: LD_INT 2
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 2
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: NEG
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67312: LD_ADDR_VAR 0 51
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_INT 1
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 1
67350: PUSH
67351: LD_INT 1
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: LD_INT 1
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 1
67413: NEG
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: NEG
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67459: LD_ADDR_VAR 0 52
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 1
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 1
67552: NEG
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 2
67574: NEG
67575: PUSH
67576: LD_INT 1
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: LD_INT 2
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67610: LD_ADDR_VAR 0 53
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: NEG
67692: PUSH
67693: LD_INT 2
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 0
67703: PUSH
67704: LD_INT 2
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 2
67725: PUSH
67726: LD_INT 0
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 2
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: LD_INT 1
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: NEG
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: NEG
67798: PUSH
67799: LD_INT 1
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: NEG
67810: PUSH
67811: LD_INT 2
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67840: LD_ADDR_VAR 0 54
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: LD_INT 1
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: LD_INT 1
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 1
67921: NEG
67922: PUSH
67923: LD_INT 2
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_INT 2
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: LD_INT 2
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 2
68016: NEG
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 2
68027: NEG
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 2
68039: NEG
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68070: LD_ADDR_VAR 0 55
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 1
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: LD_INT 0
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: LD_INT 1
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 1
68128: NEG
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 1
68151: NEG
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 2
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: LD_INT 1
68177: NEG
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 2
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: PUSH
68206: LD_INT 2
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: LD_INT 2
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: NEG
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 2
68246: NEG
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 2
68269: NEG
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68300: LD_ADDR_VAR 0 56
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 0
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 1
68338: PUSH
68339: LD_INT 1
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 1
68358: NEG
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: LD_INT 1
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 1
68381: NEG
68382: PUSH
68383: LD_INT 2
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: LD_INT 2
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 1
68404: PUSH
68405: LD_INT 1
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 2
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 2
68435: PUSH
68436: LD_INT 2
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: PUSH
68446: LD_INT 2
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 0
68455: PUSH
68456: LD_INT 2
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: NEG
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 2
68487: NEG
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: LD_INT 2
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68530: LD_ADDR_VAR 0 57
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: PUSH
68559: LD_INT 0
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 1
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 1
68599: NEG
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: LD_INT 2
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 2
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 2
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 2
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 1
68675: PUSH
68676: LD_INT 2
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 0
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: NEG
68696: PUSH
68697: LD_INT 1
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 2
68706: NEG
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 2
68717: NEG
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 2
68729: NEG
68730: PUSH
68731: LD_INT 2
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68760: LD_ADDR_VAR 0 58
68764: PUSH
68765: LD_INT 0
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 1
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: LD_INT 1
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 1
68818: NEG
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 1
68841: NEG
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 1
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 2
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 2
68885: PUSH
68886: LD_INT 1
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: LD_INT 2
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 2
68936: NEG
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: NEG
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: LD_INT 2
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68990: LD_ADDR_VAR 0 59
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: LD_INT 1
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 1
69048: NEG
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 1
69059: NEG
69060: PUSH
69061: LD_INT 1
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69078: LD_ADDR_VAR 0 60
69082: PUSH
69083: LD_INT 0
69085: PUSH
69086: LD_INT 0
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: LD_INT 1
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: LD_INT 1
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 1
69136: NEG
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69166: LD_ADDR_VAR 0 61
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: LD_INT 0
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: LD_INT 1
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 1
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 0
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: LD_INT 0
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: LD_INT 1
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69254: LD_ADDR_VAR 0 62
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: LD_INT 1
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: LD_INT 1
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 1
69312: NEG
69313: PUSH
69314: LD_INT 0
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: LD_INT 1
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69342: LD_ADDR_VAR 0 63
69346: PUSH
69347: LD_INT 0
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 1
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: LD_INT 1
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: LD_INT 1
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 1
69400: NEG
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 1
69411: NEG
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69430: LD_ADDR_VAR 0 64
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: LD_INT 1
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 1
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 1
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: ST_TO_ADDR
// end ; 1 :
69518: GO 75415
69520: LD_INT 1
69522: DOUBLE
69523: EQUAL
69524: IFTRUE 69528
69526: GO 72151
69528: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69529: LD_ADDR_VAR 0 11
69533: PUSH
69534: LD_INT 1
69536: NEG
69537: PUSH
69538: LD_INT 3
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 0
69548: PUSH
69549: LD_INT 3
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 1
69559: PUSH
69560: LD_INT 2
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: LIST
69572: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69573: LD_ADDR_VAR 0 12
69577: PUSH
69578: LD_INT 2
69580: PUSH
69581: LD_INT 1
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 3
69601: PUSH
69602: LD_INT 1
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: LIST
69613: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69614: LD_ADDR_VAR 0 13
69618: PUSH
69619: LD_INT 3
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 3
69631: PUSH
69632: LD_INT 3
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 2
69641: PUSH
69642: LD_INT 3
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69654: LD_ADDR_VAR 0 14
69658: PUSH
69659: LD_INT 1
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 1
69681: NEG
69682: PUSH
69683: LD_INT 2
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69695: LD_ADDR_VAR 0 15
69699: PUSH
69700: LD_INT 2
69702: NEG
69703: PUSH
69704: LD_INT 1
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 3
69713: NEG
69714: PUSH
69715: LD_INT 0
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 3
69724: NEG
69725: PUSH
69726: LD_INT 1
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69739: LD_ADDR_VAR 0 16
69743: PUSH
69744: LD_INT 2
69746: NEG
69747: PUSH
69748: LD_INT 3
69750: NEG
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 3
69758: NEG
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 3
69770: NEG
69771: PUSH
69772: LD_INT 3
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69785: LD_ADDR_VAR 0 17
69789: PUSH
69790: LD_INT 1
69792: NEG
69793: PUSH
69794: LD_INT 3
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 0
69804: PUSH
69805: LD_INT 3
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 1
69815: PUSH
69816: LD_INT 2
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: LIST
69828: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69829: LD_ADDR_VAR 0 18
69833: PUSH
69834: LD_INT 2
69836: PUSH
69837: LD_INT 1
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 3
69857: PUSH
69858: LD_INT 1
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69870: LD_ADDR_VAR 0 19
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 3
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 2
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69910: LD_ADDR_VAR 0 20
69914: PUSH
69915: LD_INT 1
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: LD_INT 3
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 1
69937: NEG
69938: PUSH
69939: LD_INT 2
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69951: LD_ADDR_VAR 0 21
69955: PUSH
69956: LD_INT 2
69958: NEG
69959: PUSH
69960: LD_INT 1
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 3
69969: NEG
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 3
69980: NEG
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69995: LD_ADDR_VAR 0 22
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: LD_INT 3
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 3
70014: NEG
70015: PUSH
70016: LD_INT 2
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: NEG
70027: PUSH
70028: LD_INT 3
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: LIST
70040: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70041: LD_ADDR_VAR 0 23
70045: PUSH
70046: LD_INT 0
70048: PUSH
70049: LD_INT 3
70051: NEG
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: LD_INT 4
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: LD_INT 3
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: LIST
70084: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70085: LD_ADDR_VAR 0 24
70089: PUSH
70090: LD_INT 3
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 3
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70126: LD_ADDR_VAR 0 25
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: LD_INT 3
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 4
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 3
70153: PUSH
70154: LD_INT 4
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70166: LD_ADDR_VAR 0 26
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 1
70183: PUSH
70184: LD_INT 4
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 1
70193: NEG
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: LIST
70206: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70207: LD_ADDR_VAR 0 27
70211: PUSH
70212: LD_INT 3
70214: NEG
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 3
70225: NEG
70226: PUSH
70227: LD_INT 1
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 4
70236: NEG
70237: PUSH
70238: LD_INT 1
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70251: LD_ADDR_VAR 0 28
70255: PUSH
70256: LD_INT 3
70258: NEG
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: NEG
70271: PUSH
70272: LD_INT 4
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 4
70282: NEG
70283: PUSH
70284: LD_INT 3
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70297: LD_ADDR_VAR 0 29
70301: PUSH
70302: LD_INT 1
70304: NEG
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 0
70316: PUSH
70317: LD_INT 3
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 1
70327: PUSH
70328: LD_INT 2
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 1
70338: NEG
70339: PUSH
70340: LD_INT 4
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 0
70350: PUSH
70351: LD_INT 4
70353: NEG
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 1
70361: PUSH
70362: LD_INT 3
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 1
70372: NEG
70373: PUSH
70374: LD_INT 5
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: LD_INT 5
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: LD_INT 4
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: LD_INT 6
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 0
70418: PUSH
70419: LD_INT 6
70421: NEG
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 1
70429: PUSH
70430: LD_INT 5
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70452: LD_ADDR_VAR 0 30
70456: PUSH
70457: LD_INT 2
70459: PUSH
70460: LD_INT 1
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 3
70470: PUSH
70471: LD_INT 0
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 3
70480: PUSH
70481: LD_INT 1
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 3
70490: PUSH
70491: LD_INT 1
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 4
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 4
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 4
70521: PUSH
70522: LD_INT 1
70524: NEG
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 5
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 5
70542: PUSH
70543: LD_INT 1
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 5
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 6
70563: PUSH
70564: LD_INT 0
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 6
70573: PUSH
70574: LD_INT 1
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70595: LD_ADDR_VAR 0 31
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: LD_INT 2
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: LD_INT 3
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: PUSH
70623: LD_INT 3
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 4
70632: PUSH
70633: LD_INT 3
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 4
70642: PUSH
70643: LD_INT 4
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 3
70652: PUSH
70653: LD_INT 4
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 5
70662: PUSH
70663: LD_INT 4
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 5
70672: PUSH
70673: LD_INT 5
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 4
70682: PUSH
70683: LD_INT 5
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 6
70692: PUSH
70693: LD_INT 5
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 6
70702: PUSH
70703: LD_INT 6
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 5
70712: PUSH
70713: LD_INT 6
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70734: LD_ADDR_VAR 0 32
70738: PUSH
70739: LD_INT 1
70741: PUSH
70742: LD_INT 3
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 3
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 1
70761: NEG
70762: PUSH
70763: LD_INT 2
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 1
70772: PUSH
70773: LD_INT 4
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: LD_INT 4
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 1
70792: NEG
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 1
70803: PUSH
70804: LD_INT 5
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 5
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 1
70823: NEG
70824: PUSH
70825: LD_INT 4
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: LD_INT 6
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: LD_INT 6
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 1
70854: NEG
70855: PUSH
70856: LD_INT 5
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70877: LD_ADDR_VAR 0 33
70881: PUSH
70882: LD_INT 2
70884: NEG
70885: PUSH
70886: LD_INT 1
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 3
70895: NEG
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 3
70906: NEG
70907: PUSH
70908: LD_INT 1
70910: NEG
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 3
70918: NEG
70919: PUSH
70920: LD_INT 1
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 4
70929: NEG
70930: PUSH
70931: LD_INT 0
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 4
70940: NEG
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 4
70952: NEG
70953: PUSH
70954: LD_INT 1
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 5
70963: NEG
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 5
70974: NEG
70975: PUSH
70976: LD_INT 1
70978: NEG
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 5
70986: NEG
70987: PUSH
70988: LD_INT 1
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 6
70997: NEG
70998: PUSH
70999: LD_INT 0
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 6
71008: NEG
71009: PUSH
71010: LD_INT 1
71012: NEG
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71032: LD_ADDR_VAR 0 34
71036: PUSH
71037: LD_INT 2
71039: NEG
71040: PUSH
71041: LD_INT 3
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 3
71051: NEG
71052: PUSH
71053: LD_INT 2
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 3
71063: NEG
71064: PUSH
71065: LD_INT 3
71067: NEG
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 3
71075: NEG
71076: PUSH
71077: LD_INT 4
71079: NEG
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 4
71087: NEG
71088: PUSH
71089: LD_INT 3
71091: NEG
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 4
71099: NEG
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 4
71111: NEG
71112: PUSH
71113: LD_INT 5
71115: NEG
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 5
71123: NEG
71124: PUSH
71125: LD_INT 4
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 5
71135: NEG
71136: PUSH
71137: LD_INT 5
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 5
71147: NEG
71148: PUSH
71149: LD_INT 6
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 6
71159: NEG
71160: PUSH
71161: LD_INT 5
71163: NEG
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 6
71171: NEG
71172: PUSH
71173: LD_INT 6
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71195: LD_ADDR_VAR 0 41
71199: PUSH
71200: LD_INT 0
71202: PUSH
71203: LD_INT 2
71205: NEG
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 1
71213: NEG
71214: PUSH
71215: LD_INT 3
71217: NEG
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: LD_INT 2
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: LIST
71238: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71239: LD_ADDR_VAR 0 42
71243: PUSH
71244: LD_INT 2
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 2
71256: PUSH
71257: LD_INT 1
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 3
71267: PUSH
71268: LD_INT 1
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71280: LD_ADDR_VAR 0 43
71284: PUSH
71285: LD_INT 2
71287: PUSH
71288: LD_INT 2
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 3
71297: PUSH
71298: LD_INT 2
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: LD_INT 3
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: LIST
71319: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71320: LD_ADDR_VAR 0 44
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: LD_INT 2
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: PUSH
71338: LD_INT 3
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 1
71347: NEG
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: LIST
71360: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71361: LD_ADDR_VAR 0 45
71365: PUSH
71366: LD_INT 2
71368: NEG
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: NEG
71380: PUSH
71381: LD_INT 1
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 3
71390: NEG
71391: PUSH
71392: LD_INT 1
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: LIST
71404: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71405: LD_ADDR_VAR 0 46
71409: PUSH
71410: LD_INT 2
71412: NEG
71413: PUSH
71414: LD_INT 2
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 2
71424: NEG
71425: PUSH
71426: LD_INT 3
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 3
71436: NEG
71437: PUSH
71438: LD_INT 2
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: LIST
71450: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71451: LD_ADDR_VAR 0 47
71455: PUSH
71456: LD_INT 2
71458: NEG
71459: PUSH
71460: LD_INT 3
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: NEG
71471: PUSH
71472: LD_INT 3
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71484: LD_ADDR_VAR 0 48
71488: PUSH
71489: LD_INT 1
71491: PUSH
71492: LD_INT 2
71494: NEG
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 2
71502: PUSH
71503: LD_INT 1
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71515: LD_ADDR_VAR 0 49
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: LD_INT 1
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 3
71532: PUSH
71533: LD_INT 2
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71544: LD_ADDR_VAR 0 50
71548: PUSH
71549: LD_INT 2
71551: PUSH
71552: LD_INT 3
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 1
71561: PUSH
71562: LD_INT 3
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71573: LD_ADDR_VAR 0 51
71577: PUSH
71578: LD_INT 1
71580: NEG
71581: PUSH
71582: LD_INT 2
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 2
71591: NEG
71592: PUSH
71593: LD_INT 1
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71604: LD_ADDR_VAR 0 52
71608: PUSH
71609: LD_INT 3
71611: NEG
71612: PUSH
71613: LD_INT 1
71615: NEG
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 3
71623: NEG
71624: PUSH
71625: LD_INT 2
71627: NEG
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71637: LD_ADDR_VAR 0 53
71641: PUSH
71642: LD_INT 1
71644: NEG
71645: PUSH
71646: LD_INT 3
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 0
71656: PUSH
71657: LD_INT 3
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 1
71667: PUSH
71668: LD_INT 2
71670: NEG
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: LIST
71680: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71681: LD_ADDR_VAR 0 54
71685: PUSH
71686: LD_INT 2
71688: PUSH
71689: LD_INT 1
71691: NEG
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 3
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 3
71709: PUSH
71710: LD_INT 1
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: LIST
71721: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71722: LD_ADDR_VAR 0 55
71726: PUSH
71727: LD_INT 3
71729: PUSH
71730: LD_INT 2
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 3
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 2
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71762: LD_ADDR_VAR 0 56
71766: PUSH
71767: LD_INT 1
71769: PUSH
71770: LD_INT 3
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 0
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: LIST
71802: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71803: LD_ADDR_VAR 0 57
71807: PUSH
71808: LD_INT 2
71810: NEG
71811: PUSH
71812: LD_INT 1
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 3
71821: NEG
71822: PUSH
71823: LD_INT 0
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 3
71832: NEG
71833: PUSH
71834: LD_INT 1
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: LIST
71846: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71847: LD_ADDR_VAR 0 58
71851: PUSH
71852: LD_INT 2
71854: NEG
71855: PUSH
71856: LD_INT 3
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 3
71866: NEG
71867: PUSH
71868: LD_INT 2
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 3
71878: NEG
71879: PUSH
71880: LD_INT 3
71882: NEG
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71893: LD_ADDR_VAR 0 59
71897: PUSH
71898: LD_INT 1
71900: NEG
71901: PUSH
71902: LD_INT 2
71904: NEG
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 0
71912: PUSH
71913: LD_INT 2
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 1
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: LIST
71936: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71937: LD_ADDR_VAR 0 60
71941: PUSH
71942: LD_INT 1
71944: PUSH
71945: LD_INT 1
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: LD_INT 0
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 2
71965: PUSH
71966: LD_INT 1
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: LIST
71977: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71978: LD_ADDR_VAR 0 61
71982: PUSH
71983: LD_INT 2
71985: PUSH
71986: LD_INT 1
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 2
71995: PUSH
71996: LD_INT 2
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 1
72005: PUSH
72006: LD_INT 2
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: LIST
72017: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72018: LD_ADDR_VAR 0 62
72022: PUSH
72023: LD_INT 1
72025: PUSH
72026: LD_INT 2
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 0
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 1
72045: NEG
72046: PUSH
72047: LD_INT 1
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: LIST
72058: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72059: LD_ADDR_VAR 0 63
72063: PUSH
72064: LD_INT 1
72066: NEG
72067: PUSH
72068: LD_INT 1
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 2
72077: NEG
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 2
72088: NEG
72089: PUSH
72090: LD_INT 1
72092: NEG
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: LIST
72102: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72103: LD_ADDR_VAR 0 64
72107: PUSH
72108: LD_INT 1
72110: NEG
72111: PUSH
72112: LD_INT 2
72114: NEG
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 2
72122: NEG
72123: PUSH
72124: LD_INT 1
72126: NEG
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 2
72134: NEG
72135: PUSH
72136: LD_INT 2
72138: NEG
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: ST_TO_ADDR
// end ; 2 :
72149: GO 75415
72151: LD_INT 2
72153: DOUBLE
72154: EQUAL
72155: IFTRUE 72159
72157: GO 75414
72159: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72160: LD_ADDR_VAR 0 29
72164: PUSH
72165: LD_INT 4
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: LD_INT 1
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 5
72188: PUSH
72189: LD_INT 0
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 5
72198: PUSH
72199: LD_INT 1
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 4
72208: PUSH
72209: LD_INT 1
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 3
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 3
72228: PUSH
72229: LD_INT 1
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 3
72239: PUSH
72240: LD_INT 2
72242: NEG
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 5
72250: PUSH
72251: LD_INT 2
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: LD_INT 3
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: LD_INT 2
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 4
72280: PUSH
72281: LD_INT 3
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 4
72290: PUSH
72291: LD_INT 4
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 3
72300: PUSH
72301: LD_INT 4
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 2
72310: PUSH
72311: LD_INT 3
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 2
72320: PUSH
72321: LD_INT 2
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 4
72330: PUSH
72331: LD_INT 2
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 2
72340: PUSH
72341: LD_INT 4
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 0
72350: PUSH
72351: LD_INT 4
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 0
72360: PUSH
72361: LD_INT 3
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 1
72370: PUSH
72371: LD_INT 4
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 1
72380: PUSH
72381: LD_INT 5
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: LD_INT 5
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: NEG
72401: PUSH
72402: LD_INT 4
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 1
72411: NEG
72412: PUSH
72413: LD_INT 3
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 2
72422: PUSH
72423: LD_INT 5
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 2
72432: NEG
72433: PUSH
72434: LD_INT 3
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 3
72443: NEG
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 3
72454: NEG
72455: PUSH
72456: LD_INT 1
72458: NEG
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 2
72466: NEG
72467: PUSH
72468: LD_INT 0
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 2
72477: NEG
72478: PUSH
72479: LD_INT 1
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 3
72488: NEG
72489: PUSH
72490: LD_INT 1
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 4
72499: NEG
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 4
72510: NEG
72511: PUSH
72512: LD_INT 1
72514: NEG
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 4
72522: NEG
72523: PUSH
72524: LD_INT 2
72526: NEG
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 2
72534: NEG
72535: PUSH
72536: LD_INT 2
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 4
72545: NEG
72546: PUSH
72547: LD_INT 4
72549: NEG
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 4
72557: NEG
72558: PUSH
72559: LD_INT 5
72561: NEG
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 3
72569: NEG
72570: PUSH
72571: LD_INT 4
72573: NEG
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 3
72581: NEG
72582: PUSH
72583: LD_INT 3
72585: NEG
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 4
72593: NEG
72594: PUSH
72595: LD_INT 3
72597: NEG
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 5
72605: NEG
72606: PUSH
72607: LD_INT 4
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 5
72617: NEG
72618: PUSH
72619: LD_INT 5
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 3
72629: NEG
72630: PUSH
72631: LD_INT 5
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 5
72641: NEG
72642: PUSH
72643: LD_INT 3
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72698: LD_ADDR_VAR 0 30
72702: PUSH
72703: LD_INT 4
72705: PUSH
72706: LD_INT 4
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 4
72715: PUSH
72716: LD_INT 3
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 5
72725: PUSH
72726: LD_INT 4
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 5
72735: PUSH
72736: LD_INT 5
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 4
72745: PUSH
72746: LD_INT 5
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 3
72755: PUSH
72756: LD_INT 4
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 3
72765: PUSH
72766: LD_INT 3
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 5
72775: PUSH
72776: LD_INT 3
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 3
72785: PUSH
72786: LD_INT 5
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 0
72795: PUSH
72796: LD_INT 3
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 0
72805: PUSH
72806: LD_INT 2
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 1
72815: PUSH
72816: LD_INT 3
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 1
72825: PUSH
72826: LD_INT 4
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: LD_INT 4
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 1
72845: NEG
72846: PUSH
72847: LD_INT 3
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 1
72856: NEG
72857: PUSH
72858: LD_INT 2
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 2
72867: PUSH
72868: LD_INT 4
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 2
72877: NEG
72878: PUSH
72879: LD_INT 2
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 4
72888: NEG
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 4
72899: NEG
72900: PUSH
72901: LD_INT 1
72903: NEG
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 3
72911: NEG
72912: PUSH
72913: LD_INT 0
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 3
72922: NEG
72923: PUSH
72924: LD_INT 1
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 4
72933: NEG
72934: PUSH
72935: LD_INT 1
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 5
72944: NEG
72945: PUSH
72946: LD_INT 0
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_INT 5
72955: NEG
72956: PUSH
72957: LD_INT 1
72959: NEG
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 5
72967: NEG
72968: PUSH
72969: LD_INT 2
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 3
72979: NEG
72980: PUSH
72981: LD_INT 2
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 3
72990: NEG
72991: PUSH
72992: LD_INT 3
72994: NEG
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 3
73002: NEG
73003: PUSH
73004: LD_INT 4
73006: NEG
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 2
73014: NEG
73015: PUSH
73016: LD_INT 3
73018: NEG
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: LD_INT 2
73026: NEG
73027: PUSH
73028: LD_INT 2
73030: NEG
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 3
73038: NEG
73039: PUSH
73040: LD_INT 2
73042: NEG
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 4
73050: NEG
73051: PUSH
73052: LD_INT 3
73054: NEG
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 4
73062: NEG
73063: PUSH
73064: LD_INT 4
73066: NEG
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 2
73074: NEG
73075: PUSH
73076: LD_INT 4
73078: NEG
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 4
73086: NEG
73087: PUSH
73088: LD_INT 2
73090: NEG
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: LD_INT 4
73101: NEG
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 0
73109: PUSH
73110: LD_INT 5
73112: NEG
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 1
73120: PUSH
73121: LD_INT 4
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 1
73131: PUSH
73132: LD_INT 3
73134: NEG
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 0
73142: PUSH
73143: LD_INT 3
73145: NEG
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 1
73153: NEG
73154: PUSH
73155: LD_INT 4
73157: NEG
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 1
73165: NEG
73166: PUSH
73167: LD_INT 5
73169: NEG
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 2
73177: PUSH
73178: LD_INT 3
73180: NEG
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 2
73188: NEG
73189: PUSH
73190: LD_INT 5
73192: NEG
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73245: LD_ADDR_VAR 0 31
73249: PUSH
73250: LD_INT 0
73252: PUSH
73253: LD_INT 4
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 0
73262: PUSH
73263: LD_INT 3
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 1
73272: PUSH
73273: LD_INT 4
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 1
73282: PUSH
73283: LD_INT 5
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 0
73292: PUSH
73293: LD_INT 5
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: LD_INT 1
73302: NEG
73303: PUSH
73304: LD_INT 4
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 1
73313: NEG
73314: PUSH
73315: LD_INT 3
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 2
73324: PUSH
73325: LD_INT 5
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 2
73334: NEG
73335: PUSH
73336: LD_INT 3
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 3
73345: NEG
73346: PUSH
73347: LD_INT 0
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 3
73356: NEG
73357: PUSH
73358: LD_INT 1
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 2
73368: NEG
73369: PUSH
73370: LD_INT 0
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: LD_INT 2
73379: NEG
73380: PUSH
73381: LD_INT 1
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 3
73390: NEG
73391: PUSH
73392: LD_INT 1
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 4
73401: NEG
73402: PUSH
73403: LD_INT 0
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 4
73412: NEG
73413: PUSH
73414: LD_INT 1
73416: NEG
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 4
73424: NEG
73425: PUSH
73426: LD_INT 2
73428: NEG
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 2
73436: NEG
73437: PUSH
73438: LD_INT 2
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 4
73447: NEG
73448: PUSH
73449: LD_INT 4
73451: NEG
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 4
73459: NEG
73460: PUSH
73461: LD_INT 5
73463: NEG
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 3
73471: NEG
73472: PUSH
73473: LD_INT 4
73475: NEG
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 3
73483: NEG
73484: PUSH
73485: LD_INT 3
73487: NEG
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 4
73495: NEG
73496: PUSH
73497: LD_INT 3
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 5
73507: NEG
73508: PUSH
73509: LD_INT 4
73511: NEG
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 5
73519: NEG
73520: PUSH
73521: LD_INT 5
73523: NEG
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 3
73531: NEG
73532: PUSH
73533: LD_INT 5
73535: NEG
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 5
73543: NEG
73544: PUSH
73545: LD_INT 3
73547: NEG
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 0
73555: PUSH
73556: LD_INT 3
73558: NEG
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 0
73566: PUSH
73567: LD_INT 4
73569: NEG
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 1
73577: PUSH
73578: LD_INT 3
73580: NEG
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 1
73588: PUSH
73589: LD_INT 2
73591: NEG
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 0
73599: PUSH
73600: LD_INT 2
73602: NEG
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 1
73610: NEG
73611: PUSH
73612: LD_INT 3
73614: NEG
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 1
73622: NEG
73623: PUSH
73624: LD_INT 4
73626: NEG
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 2
73634: PUSH
73635: LD_INT 2
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 2
73645: NEG
73646: PUSH
73647: LD_INT 4
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 4
73657: PUSH
73658: LD_INT 0
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 4
73667: PUSH
73668: LD_INT 1
73670: NEG
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 5
73678: PUSH
73679: LD_INT 0
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 5
73688: PUSH
73689: LD_INT 1
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 4
73698: PUSH
73699: LD_INT 1
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 3
73708: PUSH
73709: LD_INT 0
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 3
73718: PUSH
73719: LD_INT 1
73721: NEG
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 3
73729: PUSH
73730: LD_INT 2
73732: NEG
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 5
73740: PUSH
73741: LD_INT 2
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73795: LD_ADDR_VAR 0 32
73799: PUSH
73800: LD_INT 4
73802: NEG
73803: PUSH
73804: LD_INT 0
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 4
73813: NEG
73814: PUSH
73815: LD_INT 1
73817: NEG
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 3
73825: NEG
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 3
73836: NEG
73837: PUSH
73838: LD_INT 1
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 4
73847: NEG
73848: PUSH
73849: LD_INT 1
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 5
73858: NEG
73859: PUSH
73860: LD_INT 0
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 5
73869: NEG
73870: PUSH
73871: LD_INT 1
73873: NEG
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 5
73881: NEG
73882: PUSH
73883: LD_INT 2
73885: NEG
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PUSH
73891: LD_INT 3
73893: NEG
73894: PUSH
73895: LD_INT 2
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 3
73904: NEG
73905: PUSH
73906: LD_INT 3
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 3
73916: NEG
73917: PUSH
73918: LD_INT 4
73920: NEG
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 2
73928: NEG
73929: PUSH
73930: LD_INT 3
73932: NEG
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 2
73940: NEG
73941: PUSH
73942: LD_INT 2
73944: NEG
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 3
73952: NEG
73953: PUSH
73954: LD_INT 2
73956: NEG
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 4
73964: NEG
73965: PUSH
73966: LD_INT 3
73968: NEG
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 4
73976: NEG
73977: PUSH
73978: LD_INT 4
73980: NEG
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 2
73988: NEG
73989: PUSH
73990: LD_INT 4
73992: NEG
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: PUSH
73998: LD_INT 4
74000: NEG
74001: PUSH
74002: LD_INT 2
74004: NEG
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: LD_INT 4
74015: NEG
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: LD_INT 5
74026: NEG
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 1
74034: PUSH
74035: LD_INT 4
74037: NEG
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 1
74045: PUSH
74046: LD_INT 3
74048: NEG
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 0
74056: PUSH
74057: LD_INT 3
74059: NEG
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 1
74067: NEG
74068: PUSH
74069: LD_INT 4
74071: NEG
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 1
74079: NEG
74080: PUSH
74081: LD_INT 5
74083: NEG
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 2
74091: PUSH
74092: LD_INT 3
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 2
74102: NEG
74103: PUSH
74104: LD_INT 5
74106: NEG
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 3
74114: PUSH
74115: LD_INT 0
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 3
74124: PUSH
74125: LD_INT 1
74127: NEG
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 4
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 4
74145: PUSH
74146: LD_INT 1
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 3
74155: PUSH
74156: LD_INT 1
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: LD_INT 0
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: PUSH
74173: LD_INT 2
74175: PUSH
74176: LD_INT 1
74178: NEG
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: PUSH
74184: LD_INT 2
74186: PUSH
74187: LD_INT 2
74189: NEG
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 4
74197: PUSH
74198: LD_INT 2
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 4
74207: PUSH
74208: LD_INT 4
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 4
74217: PUSH
74218: LD_INT 3
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 5
74227: PUSH
74228: LD_INT 4
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 5
74237: PUSH
74238: LD_INT 5
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 4
74247: PUSH
74248: LD_INT 5
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_INT 3
74257: PUSH
74258: LD_INT 4
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 3
74267: PUSH
74268: LD_INT 3
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 5
74277: PUSH
74278: LD_INT 3
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 3
74287: PUSH
74288: LD_INT 5
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74342: LD_ADDR_VAR 0 33
74346: PUSH
74347: LD_INT 4
74349: NEG
74350: PUSH
74351: LD_INT 4
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 4
74361: NEG
74362: PUSH
74363: LD_INT 5
74365: NEG
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PUSH
74371: LD_INT 3
74373: NEG
74374: PUSH
74375: LD_INT 4
74377: NEG
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PUSH
74383: LD_INT 3
74385: NEG
74386: PUSH
74387: LD_INT 3
74389: NEG
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 4
74397: NEG
74398: PUSH
74399: LD_INT 3
74401: NEG
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_INT 5
74409: NEG
74410: PUSH
74411: LD_INT 4
74413: NEG
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PUSH
74419: LD_INT 5
74421: NEG
74422: PUSH
74423: LD_INT 5
74425: NEG
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 3
74433: NEG
74434: PUSH
74435: LD_INT 5
74437: NEG
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: LD_INT 5
74445: NEG
74446: PUSH
74447: LD_INT 3
74449: NEG
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 0
74457: PUSH
74458: LD_INT 3
74460: NEG
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 0
74468: PUSH
74469: LD_INT 4
74471: NEG
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: LD_INT 1
74479: PUSH
74480: LD_INT 3
74482: NEG
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 1
74490: PUSH
74491: LD_INT 2
74493: NEG
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: LD_INT 2
74504: NEG
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 1
74512: NEG
74513: PUSH
74514: LD_INT 3
74516: NEG
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 1
74524: NEG
74525: PUSH
74526: LD_INT 4
74528: NEG
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: PUSH
74534: LD_INT 2
74536: PUSH
74537: LD_INT 2
74539: NEG
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 2
74547: NEG
74548: PUSH
74549: LD_INT 4
74551: NEG
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 4
74559: PUSH
74560: LD_INT 0
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 4
74569: PUSH
74570: LD_INT 1
74572: NEG
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 5
74580: PUSH
74581: LD_INT 0
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 5
74590: PUSH
74591: LD_INT 1
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 4
74600: PUSH
74601: LD_INT 1
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: LD_INT 3
74610: PUSH
74611: LD_INT 0
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 3
74620: PUSH
74621: LD_INT 1
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 3
74631: PUSH
74632: LD_INT 2
74634: NEG
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 5
74642: PUSH
74643: LD_INT 2
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 3
74652: PUSH
74653: LD_INT 3
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: PUSH
74660: LD_INT 3
74662: PUSH
74663: LD_INT 2
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 4
74672: PUSH
74673: LD_INT 3
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: PUSH
74680: LD_INT 4
74682: PUSH
74683: LD_INT 4
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 3
74692: PUSH
74693: LD_INT 4
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 2
74702: PUSH
74703: LD_INT 3
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 2
74712: PUSH
74713: LD_INT 2
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 4
74722: PUSH
74723: LD_INT 2
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PUSH
74730: LD_INT 2
74732: PUSH
74733: LD_INT 4
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 0
74742: PUSH
74743: LD_INT 4
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 0
74752: PUSH
74753: LD_INT 3
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 1
74762: PUSH
74763: LD_INT 4
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 1
74772: PUSH
74773: LD_INT 5
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 0
74782: PUSH
74783: LD_INT 5
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: PUSH
74790: LD_INT 1
74792: NEG
74793: PUSH
74794: LD_INT 4
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 1
74803: NEG
74804: PUSH
74805: LD_INT 3
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 2
74814: PUSH
74815: LD_INT 5
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PUSH
74822: LD_INT 2
74824: NEG
74825: PUSH
74826: LD_INT 3
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74880: LD_ADDR_VAR 0 34
74884: PUSH
74885: LD_INT 0
74887: PUSH
74888: LD_INT 4
74890: NEG
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: LD_INT 0
74898: PUSH
74899: LD_INT 5
74901: NEG
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: LD_INT 1
74909: PUSH
74910: LD_INT 4
74912: NEG
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: PUSH
74918: LD_INT 1
74920: PUSH
74921: LD_INT 3
74923: NEG
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: LD_INT 3
74934: NEG
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 1
74942: NEG
74943: PUSH
74944: LD_INT 4
74946: NEG
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 1
74954: NEG
74955: PUSH
74956: LD_INT 5
74958: NEG
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 2
74966: PUSH
74967: LD_INT 3
74969: NEG
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 2
74977: NEG
74978: PUSH
74979: LD_INT 5
74981: NEG
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 3
74989: PUSH
74990: LD_INT 0
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: LD_INT 3
74999: PUSH
75000: LD_INT 1
75002: NEG
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 4
75010: PUSH
75011: LD_INT 0
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 4
75020: PUSH
75021: LD_INT 1
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 3
75030: PUSH
75031: LD_INT 1
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 2
75040: PUSH
75041: LD_INT 0
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 2
75050: PUSH
75051: LD_INT 1
75053: NEG
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: LD_INT 2
75061: PUSH
75062: LD_INT 2
75064: NEG
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: LD_INT 4
75072: PUSH
75073: LD_INT 2
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: LD_INT 4
75082: PUSH
75083: LD_INT 4
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 4
75092: PUSH
75093: LD_INT 3
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: LD_INT 5
75102: PUSH
75103: LD_INT 4
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 5
75112: PUSH
75113: LD_INT 5
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 4
75122: PUSH
75123: LD_INT 5
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 3
75132: PUSH
75133: LD_INT 4
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 3
75142: PUSH
75143: LD_INT 3
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 5
75152: PUSH
75153: LD_INT 3
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: LD_INT 5
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 0
75172: PUSH
75173: LD_INT 3
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 0
75182: PUSH
75183: LD_INT 2
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 1
75192: PUSH
75193: LD_INT 3
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: LD_INT 1
75202: PUSH
75203: LD_INT 4
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 0
75212: PUSH
75213: LD_INT 4
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 1
75222: NEG
75223: PUSH
75224: LD_INT 3
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 1
75233: NEG
75234: PUSH
75235: LD_INT 2
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: LD_INT 2
75244: PUSH
75245: LD_INT 4
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PUSH
75252: LD_INT 2
75254: NEG
75255: PUSH
75256: LD_INT 2
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 4
75265: NEG
75266: PUSH
75267: LD_INT 0
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: LD_INT 4
75276: NEG
75277: PUSH
75278: LD_INT 1
75280: NEG
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 3
75288: NEG
75289: PUSH
75290: LD_INT 0
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 3
75299: NEG
75300: PUSH
75301: LD_INT 1
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_INT 4
75310: NEG
75311: PUSH
75312: LD_INT 1
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 5
75321: NEG
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 5
75332: NEG
75333: PUSH
75334: LD_INT 1
75336: NEG
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 5
75344: NEG
75345: PUSH
75346: LD_INT 2
75348: NEG
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 3
75356: NEG
75357: PUSH
75358: LD_INT 2
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: ST_TO_ADDR
// end ; end ;
75412: GO 75415
75414: POP
// case btype of b_depot , b_warehouse :
75415: LD_VAR 0 1
75419: PUSH
75420: LD_INT 0
75422: DOUBLE
75423: EQUAL
75424: IFTRUE 75434
75426: LD_INT 1
75428: DOUBLE
75429: EQUAL
75430: IFTRUE 75434
75432: GO 75635
75434: POP
// case nation of nation_american :
75435: LD_VAR 0 5
75439: PUSH
75440: LD_INT 1
75442: DOUBLE
75443: EQUAL
75444: IFTRUE 75448
75446: GO 75504
75448: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75449: LD_ADDR_VAR 0 9
75453: PUSH
75454: LD_VAR 0 11
75458: PUSH
75459: LD_VAR 0 12
75463: PUSH
75464: LD_VAR 0 13
75468: PUSH
75469: LD_VAR 0 14
75473: PUSH
75474: LD_VAR 0 15
75478: PUSH
75479: LD_VAR 0 16
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: PUSH
75492: LD_VAR 0 4
75496: PUSH
75497: LD_INT 1
75499: PLUS
75500: ARRAY
75501: ST_TO_ADDR
75502: GO 75633
75504: LD_INT 2
75506: DOUBLE
75507: EQUAL
75508: IFTRUE 75512
75510: GO 75568
75512: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75513: LD_ADDR_VAR 0 9
75517: PUSH
75518: LD_VAR 0 17
75522: PUSH
75523: LD_VAR 0 18
75527: PUSH
75528: LD_VAR 0 19
75532: PUSH
75533: LD_VAR 0 20
75537: PUSH
75538: LD_VAR 0 21
75542: PUSH
75543: LD_VAR 0 22
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: PUSH
75556: LD_VAR 0 4
75560: PUSH
75561: LD_INT 1
75563: PLUS
75564: ARRAY
75565: ST_TO_ADDR
75566: GO 75633
75568: LD_INT 3
75570: DOUBLE
75571: EQUAL
75572: IFTRUE 75576
75574: GO 75632
75576: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75577: LD_ADDR_VAR 0 9
75581: PUSH
75582: LD_VAR 0 23
75586: PUSH
75587: LD_VAR 0 24
75591: PUSH
75592: LD_VAR 0 25
75596: PUSH
75597: LD_VAR 0 26
75601: PUSH
75602: LD_VAR 0 27
75606: PUSH
75607: LD_VAR 0 28
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: LIST
75619: PUSH
75620: LD_VAR 0 4
75624: PUSH
75625: LD_INT 1
75627: PLUS
75628: ARRAY
75629: ST_TO_ADDR
75630: GO 75633
75632: POP
75633: GO 76188
75635: LD_INT 2
75637: DOUBLE
75638: EQUAL
75639: IFTRUE 75649
75641: LD_INT 3
75643: DOUBLE
75644: EQUAL
75645: IFTRUE 75649
75647: GO 75705
75649: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75650: LD_ADDR_VAR 0 9
75654: PUSH
75655: LD_VAR 0 29
75659: PUSH
75660: LD_VAR 0 30
75664: PUSH
75665: LD_VAR 0 31
75669: PUSH
75670: LD_VAR 0 32
75674: PUSH
75675: LD_VAR 0 33
75679: PUSH
75680: LD_VAR 0 34
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: PUSH
75693: LD_VAR 0 4
75697: PUSH
75698: LD_INT 1
75700: PLUS
75701: ARRAY
75702: ST_TO_ADDR
75703: GO 76188
75705: LD_INT 16
75707: DOUBLE
75708: EQUAL
75709: IFTRUE 75767
75711: LD_INT 17
75713: DOUBLE
75714: EQUAL
75715: IFTRUE 75767
75717: LD_INT 18
75719: DOUBLE
75720: EQUAL
75721: IFTRUE 75767
75723: LD_INT 19
75725: DOUBLE
75726: EQUAL
75727: IFTRUE 75767
75729: LD_INT 22
75731: DOUBLE
75732: EQUAL
75733: IFTRUE 75767
75735: LD_INT 20
75737: DOUBLE
75738: EQUAL
75739: IFTRUE 75767
75741: LD_INT 21
75743: DOUBLE
75744: EQUAL
75745: IFTRUE 75767
75747: LD_INT 23
75749: DOUBLE
75750: EQUAL
75751: IFTRUE 75767
75753: LD_INT 24
75755: DOUBLE
75756: EQUAL
75757: IFTRUE 75767
75759: LD_INT 25
75761: DOUBLE
75762: EQUAL
75763: IFTRUE 75767
75765: GO 75823
75767: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75768: LD_ADDR_VAR 0 9
75772: PUSH
75773: LD_VAR 0 35
75777: PUSH
75778: LD_VAR 0 36
75782: PUSH
75783: LD_VAR 0 37
75787: PUSH
75788: LD_VAR 0 38
75792: PUSH
75793: LD_VAR 0 39
75797: PUSH
75798: LD_VAR 0 40
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: PUSH
75811: LD_VAR 0 4
75815: PUSH
75816: LD_INT 1
75818: PLUS
75819: ARRAY
75820: ST_TO_ADDR
75821: GO 76188
75823: LD_INT 6
75825: DOUBLE
75826: EQUAL
75827: IFTRUE 75879
75829: LD_INT 7
75831: DOUBLE
75832: EQUAL
75833: IFTRUE 75879
75835: LD_INT 8
75837: DOUBLE
75838: EQUAL
75839: IFTRUE 75879
75841: LD_INT 13
75843: DOUBLE
75844: EQUAL
75845: IFTRUE 75879
75847: LD_INT 12
75849: DOUBLE
75850: EQUAL
75851: IFTRUE 75879
75853: LD_INT 15
75855: DOUBLE
75856: EQUAL
75857: IFTRUE 75879
75859: LD_INT 11
75861: DOUBLE
75862: EQUAL
75863: IFTRUE 75879
75865: LD_INT 14
75867: DOUBLE
75868: EQUAL
75869: IFTRUE 75879
75871: LD_INT 10
75873: DOUBLE
75874: EQUAL
75875: IFTRUE 75879
75877: GO 75935
75879: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75880: LD_ADDR_VAR 0 9
75884: PUSH
75885: LD_VAR 0 41
75889: PUSH
75890: LD_VAR 0 42
75894: PUSH
75895: LD_VAR 0 43
75899: PUSH
75900: LD_VAR 0 44
75904: PUSH
75905: LD_VAR 0 45
75909: PUSH
75910: LD_VAR 0 46
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: PUSH
75923: LD_VAR 0 4
75927: PUSH
75928: LD_INT 1
75930: PLUS
75931: ARRAY
75932: ST_TO_ADDR
75933: GO 76188
75935: LD_INT 36
75937: DOUBLE
75938: EQUAL
75939: IFTRUE 75943
75941: GO 75999
75943: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75944: LD_ADDR_VAR 0 9
75948: PUSH
75949: LD_VAR 0 47
75953: PUSH
75954: LD_VAR 0 48
75958: PUSH
75959: LD_VAR 0 49
75963: PUSH
75964: LD_VAR 0 50
75968: PUSH
75969: LD_VAR 0 51
75973: PUSH
75974: LD_VAR 0 52
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: PUSH
75987: LD_VAR 0 4
75991: PUSH
75992: LD_INT 1
75994: PLUS
75995: ARRAY
75996: ST_TO_ADDR
75997: GO 76188
75999: LD_INT 4
76001: DOUBLE
76002: EQUAL
76003: IFTRUE 76025
76005: LD_INT 5
76007: DOUBLE
76008: EQUAL
76009: IFTRUE 76025
76011: LD_INT 34
76013: DOUBLE
76014: EQUAL
76015: IFTRUE 76025
76017: LD_INT 37
76019: DOUBLE
76020: EQUAL
76021: IFTRUE 76025
76023: GO 76081
76025: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76026: LD_ADDR_VAR 0 9
76030: PUSH
76031: LD_VAR 0 53
76035: PUSH
76036: LD_VAR 0 54
76040: PUSH
76041: LD_VAR 0 55
76045: PUSH
76046: LD_VAR 0 56
76050: PUSH
76051: LD_VAR 0 57
76055: PUSH
76056: LD_VAR 0 58
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: PUSH
76069: LD_VAR 0 4
76073: PUSH
76074: LD_INT 1
76076: PLUS
76077: ARRAY
76078: ST_TO_ADDR
76079: GO 76188
76081: LD_INT 31
76083: DOUBLE
76084: EQUAL
76085: IFTRUE 76131
76087: LD_INT 32
76089: DOUBLE
76090: EQUAL
76091: IFTRUE 76131
76093: LD_INT 33
76095: DOUBLE
76096: EQUAL
76097: IFTRUE 76131
76099: LD_INT 27
76101: DOUBLE
76102: EQUAL
76103: IFTRUE 76131
76105: LD_INT 26
76107: DOUBLE
76108: EQUAL
76109: IFTRUE 76131
76111: LD_INT 28
76113: DOUBLE
76114: EQUAL
76115: IFTRUE 76131
76117: LD_INT 29
76119: DOUBLE
76120: EQUAL
76121: IFTRUE 76131
76123: LD_INT 30
76125: DOUBLE
76126: EQUAL
76127: IFTRUE 76131
76129: GO 76187
76131: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76132: LD_ADDR_VAR 0 9
76136: PUSH
76137: LD_VAR 0 59
76141: PUSH
76142: LD_VAR 0 60
76146: PUSH
76147: LD_VAR 0 61
76151: PUSH
76152: LD_VAR 0 62
76156: PUSH
76157: LD_VAR 0 63
76161: PUSH
76162: LD_VAR 0 64
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: LIST
76171: LIST
76172: LIST
76173: LIST
76174: PUSH
76175: LD_VAR 0 4
76179: PUSH
76180: LD_INT 1
76182: PLUS
76183: ARRAY
76184: ST_TO_ADDR
76185: GO 76188
76187: POP
// temp_list2 = [ ] ;
76188: LD_ADDR_VAR 0 10
76192: PUSH
76193: EMPTY
76194: ST_TO_ADDR
// for i in temp_list do
76195: LD_ADDR_VAR 0 8
76199: PUSH
76200: LD_VAR 0 9
76204: PUSH
76205: FOR_IN
76206: IFFALSE 76258
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76208: LD_ADDR_VAR 0 10
76212: PUSH
76213: LD_VAR 0 10
76217: PUSH
76218: LD_VAR 0 8
76222: PUSH
76223: LD_INT 1
76225: ARRAY
76226: PUSH
76227: LD_VAR 0 2
76231: PLUS
76232: PUSH
76233: LD_VAR 0 8
76237: PUSH
76238: LD_INT 2
76240: ARRAY
76241: PUSH
76242: LD_VAR 0 3
76246: PLUS
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: EMPTY
76253: LIST
76254: ADD
76255: ST_TO_ADDR
76256: GO 76205
76258: POP
76259: POP
// result = temp_list2 ;
76260: LD_ADDR_VAR 0 7
76264: PUSH
76265: LD_VAR 0 10
76269: ST_TO_ADDR
// end ;
76270: LD_VAR 0 7
76274: RET
// export function EnemyInRange ( unit , dist ) ; begin
76275: LD_INT 0
76277: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76278: LD_ADDR_VAR 0 3
76282: PUSH
76283: LD_VAR 0 1
76287: PPUSH
76288: CALL_OW 255
76292: PPUSH
76293: LD_VAR 0 1
76297: PPUSH
76298: CALL_OW 250
76302: PPUSH
76303: LD_VAR 0 1
76307: PPUSH
76308: CALL_OW 251
76312: PPUSH
76313: LD_VAR 0 2
76317: PPUSH
76318: CALL 49532 0 4
76322: PUSH
76323: LD_INT 4
76325: ARRAY
76326: ST_TO_ADDR
// end ;
76327: LD_VAR 0 3
76331: RET
// export function PlayerSeeMe ( unit ) ; begin
76332: LD_INT 0
76334: PPUSH
// result := See ( your_side , unit ) ;
76335: LD_ADDR_VAR 0 2
76339: PUSH
76340: LD_OWVAR 2
76344: PPUSH
76345: LD_VAR 0 1
76349: PPUSH
76350: CALL_OW 292
76354: ST_TO_ADDR
// end ;
76355: LD_VAR 0 2
76359: RET
// export function ReverseDir ( unit ) ; begin
76360: LD_INT 0
76362: PPUSH
// if not unit then
76363: LD_VAR 0 1
76367: NOT
76368: IFFALSE 76372
// exit ;
76370: GO 76395
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76372: LD_ADDR_VAR 0 2
76376: PUSH
76377: LD_VAR 0 1
76381: PPUSH
76382: CALL_OW 254
76386: PUSH
76387: LD_INT 3
76389: PLUS
76390: PUSH
76391: LD_INT 6
76393: MOD
76394: ST_TO_ADDR
// end ;
76395: LD_VAR 0 2
76399: RET
// export function ReverseArray ( array ) ; var i ; begin
76400: LD_INT 0
76402: PPUSH
76403: PPUSH
// if not array then
76404: LD_VAR 0 1
76408: NOT
76409: IFFALSE 76413
// exit ;
76411: GO 76468
// result := [ ] ;
76413: LD_ADDR_VAR 0 2
76417: PUSH
76418: EMPTY
76419: ST_TO_ADDR
// for i := array downto 1 do
76420: LD_ADDR_VAR 0 3
76424: PUSH
76425: DOUBLE
76426: LD_VAR 0 1
76430: INC
76431: ST_TO_ADDR
76432: LD_INT 1
76434: PUSH
76435: FOR_DOWNTO
76436: IFFALSE 76466
// result := Join ( result , array [ i ] ) ;
76438: LD_ADDR_VAR 0 2
76442: PUSH
76443: LD_VAR 0 2
76447: PPUSH
76448: LD_VAR 0 1
76452: PUSH
76453: LD_VAR 0 3
76457: ARRAY
76458: PPUSH
76459: CALL 81310 0 2
76463: ST_TO_ADDR
76464: GO 76435
76466: POP
76467: POP
// end ;
76468: LD_VAR 0 2
76472: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76473: LD_INT 0
76475: PPUSH
76476: PPUSH
76477: PPUSH
76478: PPUSH
76479: PPUSH
76480: PPUSH
// if not unit or not hexes then
76481: LD_VAR 0 1
76485: NOT
76486: IFTRUE 76495
76488: PUSH
76489: LD_VAR 0 2
76493: NOT
76494: OR
76495: IFFALSE 76499
// exit ;
76497: GO 76622
// dist := 9999 ;
76499: LD_ADDR_VAR 0 5
76503: PUSH
76504: LD_INT 9999
76506: ST_TO_ADDR
// for i = 1 to hexes do
76507: LD_ADDR_VAR 0 4
76511: PUSH
76512: DOUBLE
76513: LD_INT 1
76515: DEC
76516: ST_TO_ADDR
76517: LD_VAR 0 2
76521: PUSH
76522: FOR_TO
76523: IFFALSE 76610
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76525: LD_ADDR_VAR 0 6
76529: PUSH
76530: LD_VAR 0 1
76534: PPUSH
76535: LD_VAR 0 2
76539: PUSH
76540: LD_VAR 0 4
76544: ARRAY
76545: PUSH
76546: LD_INT 1
76548: ARRAY
76549: PPUSH
76550: LD_VAR 0 2
76554: PUSH
76555: LD_VAR 0 4
76559: ARRAY
76560: PUSH
76561: LD_INT 2
76563: ARRAY
76564: PPUSH
76565: CALL_OW 297
76569: ST_TO_ADDR
// if tdist < dist then
76570: LD_VAR 0 6
76574: PUSH
76575: LD_VAR 0 5
76579: LESS
76580: IFFALSE 76608
// begin hex := hexes [ i ] ;
76582: LD_ADDR_VAR 0 8
76586: PUSH
76587: LD_VAR 0 2
76591: PUSH
76592: LD_VAR 0 4
76596: ARRAY
76597: ST_TO_ADDR
// dist := tdist ;
76598: LD_ADDR_VAR 0 5
76602: PUSH
76603: LD_VAR 0 6
76607: ST_TO_ADDR
// end ; end ;
76608: GO 76522
76610: POP
76611: POP
// result := hex ;
76612: LD_ADDR_VAR 0 3
76616: PUSH
76617: LD_VAR 0 8
76621: ST_TO_ADDR
// end ;
76622: LD_VAR 0 3
76626: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76627: LD_INT 0
76629: PPUSH
76630: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76631: LD_VAR 0 1
76635: NOT
76636: IFTRUE 76675
76638: PUSH
76639: LD_VAR 0 1
76643: PUSH
76644: LD_INT 21
76646: PUSH
76647: LD_INT 2
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 23
76656: PUSH
76657: LD_INT 2
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PPUSH
76668: CALL_OW 69
76672: IN
76673: NOT
76674: OR
76675: IFFALSE 76679
// exit ;
76677: GO 76726
// for i = 1 to 3 do
76679: LD_ADDR_VAR 0 3
76683: PUSH
76684: DOUBLE
76685: LD_INT 1
76687: DEC
76688: ST_TO_ADDR
76689: LD_INT 3
76691: PUSH
76692: FOR_TO
76693: IFFALSE 76724
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76695: LD_VAR 0 1
76699: PPUSH
76700: CALL_OW 250
76704: PPUSH
76705: LD_VAR 0 1
76709: PPUSH
76710: CALL_OW 251
76714: PPUSH
76715: LD_INT 1
76717: PPUSH
76718: CALL_OW 453
76722: GO 76692
76724: POP
76725: POP
// end ;
76726: LD_VAR 0 2
76730: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76731: LD_INT 0
76733: PPUSH
76734: PPUSH
76735: PPUSH
76736: PPUSH
76737: PPUSH
76738: PPUSH
// if not unit or not enemy_unit then
76739: LD_VAR 0 1
76743: NOT
76744: IFTRUE 76753
76746: PUSH
76747: LD_VAR 0 2
76751: NOT
76752: OR
76753: IFFALSE 76757
// exit ;
76755: GO 77228
// if GetLives ( i ) < 250 then
76757: LD_VAR 0 4
76761: PPUSH
76762: CALL_OW 256
76766: PUSH
76767: LD_INT 250
76769: LESS
76770: IFFALSE 76783
// begin ComAutodestruct ( i ) ;
76772: LD_VAR 0 4
76776: PPUSH
76777: CALL 76627 0 1
// exit ;
76781: GO 77228
// end ; x := GetX ( enemy_unit ) ;
76783: LD_ADDR_VAR 0 7
76787: PUSH
76788: LD_VAR 0 2
76792: PPUSH
76793: CALL_OW 250
76797: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76798: LD_ADDR_VAR 0 8
76802: PUSH
76803: LD_VAR 0 2
76807: PPUSH
76808: CALL_OW 251
76812: ST_TO_ADDR
// if not x or not y then
76813: LD_VAR 0 7
76817: NOT
76818: IFTRUE 76827
76820: PUSH
76821: LD_VAR 0 8
76825: NOT
76826: OR
76827: IFFALSE 76831
// exit ;
76829: GO 77228
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76831: LD_ADDR_VAR 0 6
76835: PUSH
76836: LD_VAR 0 7
76840: PPUSH
76841: LD_INT 0
76843: PPUSH
76844: LD_INT 4
76846: PPUSH
76847: CALL_OW 272
76851: PUSH
76852: LD_VAR 0 8
76856: PPUSH
76857: LD_INT 0
76859: PPUSH
76860: LD_INT 4
76862: PPUSH
76863: CALL_OW 273
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: LD_VAR 0 7
76876: PPUSH
76877: LD_INT 1
76879: PPUSH
76880: LD_INT 4
76882: PPUSH
76883: CALL_OW 272
76887: PUSH
76888: LD_VAR 0 8
76892: PPUSH
76893: LD_INT 1
76895: PPUSH
76896: LD_INT 4
76898: PPUSH
76899: CALL_OW 273
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_VAR 0 7
76912: PPUSH
76913: LD_INT 2
76915: PPUSH
76916: LD_INT 4
76918: PPUSH
76919: CALL_OW 272
76923: PUSH
76924: LD_VAR 0 8
76928: PPUSH
76929: LD_INT 2
76931: PPUSH
76932: LD_INT 4
76934: PPUSH
76935: CALL_OW 273
76939: PUSH
76940: EMPTY
76941: LIST
76942: LIST
76943: PUSH
76944: LD_VAR 0 7
76948: PPUSH
76949: LD_INT 3
76951: PPUSH
76952: LD_INT 4
76954: PPUSH
76955: CALL_OW 272
76959: PUSH
76960: LD_VAR 0 8
76964: PPUSH
76965: LD_INT 3
76967: PPUSH
76968: LD_INT 4
76970: PPUSH
76971: CALL_OW 273
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: PUSH
76980: LD_VAR 0 7
76984: PPUSH
76985: LD_INT 4
76987: PPUSH
76988: LD_INT 4
76990: PPUSH
76991: CALL_OW 272
76995: PUSH
76996: LD_VAR 0 8
77000: PPUSH
77001: LD_INT 4
77003: PPUSH
77004: LD_INT 4
77006: PPUSH
77007: CALL_OW 273
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PUSH
77016: LD_VAR 0 7
77020: PPUSH
77021: LD_INT 5
77023: PPUSH
77024: LD_INT 4
77026: PPUSH
77027: CALL_OW 272
77031: PUSH
77032: LD_VAR 0 8
77036: PPUSH
77037: LD_INT 5
77039: PPUSH
77040: LD_INT 4
77042: PPUSH
77043: CALL_OW 273
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: ST_TO_ADDR
// for i = tmp downto 1 do
77060: LD_ADDR_VAR 0 4
77064: PUSH
77065: DOUBLE
77066: LD_VAR 0 6
77070: INC
77071: ST_TO_ADDR
77072: LD_INT 1
77074: PUSH
77075: FOR_DOWNTO
77076: IFFALSE 77179
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77078: LD_VAR 0 6
77082: PUSH
77083: LD_VAR 0 4
77087: ARRAY
77088: PUSH
77089: LD_INT 1
77091: ARRAY
77092: PPUSH
77093: LD_VAR 0 6
77097: PUSH
77098: LD_VAR 0 4
77102: ARRAY
77103: PUSH
77104: LD_INT 2
77106: ARRAY
77107: PPUSH
77108: CALL_OW 488
77112: NOT
77113: IFTRUE 77155
77115: PUSH
77116: LD_VAR 0 6
77120: PUSH
77121: LD_VAR 0 4
77125: ARRAY
77126: PUSH
77127: LD_INT 1
77129: ARRAY
77130: PPUSH
77131: LD_VAR 0 6
77135: PUSH
77136: LD_VAR 0 4
77140: ARRAY
77141: PUSH
77142: LD_INT 2
77144: ARRAY
77145: PPUSH
77146: CALL_OW 428
77150: PUSH
77151: LD_INT 0
77153: NONEQUAL
77154: OR
77155: IFFALSE 77177
// tmp := Delete ( tmp , i ) ;
77157: LD_ADDR_VAR 0 6
77161: PUSH
77162: LD_VAR 0 6
77166: PPUSH
77167: LD_VAR 0 4
77171: PPUSH
77172: CALL_OW 3
77176: ST_TO_ADDR
77177: GO 77075
77179: POP
77180: POP
// j := GetClosestHex ( unit , tmp ) ;
77181: LD_ADDR_VAR 0 5
77185: PUSH
77186: LD_VAR 0 1
77190: PPUSH
77191: LD_VAR 0 6
77195: PPUSH
77196: CALL 76473 0 2
77200: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77201: LD_VAR 0 1
77205: PPUSH
77206: LD_VAR 0 5
77210: PUSH
77211: LD_INT 1
77213: ARRAY
77214: PPUSH
77215: LD_VAR 0 5
77219: PUSH
77220: LD_INT 2
77222: ARRAY
77223: PPUSH
77224: CALL_OW 111
// end ;
77228: LD_VAR 0 3
77232: RET
// export function PrepareApemanSoldier ( ) ; begin
77233: LD_INT 0
77235: PPUSH
// uc_nation := 0 ;
77236: LD_ADDR_OWVAR 21
77240: PUSH
77241: LD_INT 0
77243: ST_TO_ADDR
// hc_sex := sex_male ;
77244: LD_ADDR_OWVAR 27
77248: PUSH
77249: LD_INT 1
77251: ST_TO_ADDR
// hc_name :=  ;
77252: LD_ADDR_OWVAR 26
77256: PUSH
77257: LD_STRING 
77259: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77260: LD_ADDR_OWVAR 28
77264: PUSH
77265: LD_INT 15
77267: ST_TO_ADDR
// hc_gallery :=  ;
77268: LD_ADDR_OWVAR 33
77272: PUSH
77273: LD_STRING 
77275: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77276: LD_ADDR_OWVAR 31
77280: PUSH
77281: LD_INT 0
77283: PPUSH
77284: LD_INT 3
77286: PPUSH
77287: CALL_OW 12
77291: PUSH
77292: LD_INT 0
77294: PPUSH
77295: LD_INT 3
77297: PPUSH
77298: CALL_OW 12
77302: PUSH
77303: LD_INT 0
77305: PUSH
77306: LD_INT 0
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77315: LD_ADDR_OWVAR 29
77319: PUSH
77320: LD_INT 12
77322: PUSH
77323: LD_INT 12
77325: PUSH
77326: EMPTY
77327: LIST
77328: LIST
77329: ST_TO_ADDR
// end ;
77330: LD_VAR 0 1
77334: RET
// export function PrepareApemanEngineer ( ) ; begin
77335: LD_INT 0
77337: PPUSH
// uc_nation := 0 ;
77338: LD_ADDR_OWVAR 21
77342: PUSH
77343: LD_INT 0
77345: ST_TO_ADDR
// hc_sex := sex_male ;
77346: LD_ADDR_OWVAR 27
77350: PUSH
77351: LD_INT 1
77353: ST_TO_ADDR
// hc_name :=  ;
77354: LD_ADDR_OWVAR 26
77358: PUSH
77359: LD_STRING 
77361: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77362: LD_ADDR_OWVAR 28
77366: PUSH
77367: LD_INT 16
77369: ST_TO_ADDR
// hc_gallery :=  ;
77370: LD_ADDR_OWVAR 33
77374: PUSH
77375: LD_STRING 
77377: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77378: LD_ADDR_OWVAR 31
77382: PUSH
77383: LD_INT 0
77385: PPUSH
77386: LD_INT 3
77388: PPUSH
77389: CALL_OW 12
77393: PUSH
77394: LD_INT 0
77396: PPUSH
77397: LD_INT 3
77399: PPUSH
77400: CALL_OW 12
77404: PUSH
77405: LD_INT 0
77407: PUSH
77408: LD_INT 0
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: LIST
77415: LIST
77416: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77417: LD_ADDR_OWVAR 29
77421: PUSH
77422: LD_INT 12
77424: PUSH
77425: LD_INT 12
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: ST_TO_ADDR
// end ;
77432: LD_VAR 0 1
77436: RET
// export function PrepareApeman ( agressivity ) ; begin
77437: LD_INT 0
77439: PPUSH
// uc_side := 0 ;
77440: LD_ADDR_OWVAR 20
77444: PUSH
77445: LD_INT 0
77447: ST_TO_ADDR
// uc_nation := 0 ;
77448: LD_ADDR_OWVAR 21
77452: PUSH
77453: LD_INT 0
77455: ST_TO_ADDR
// hc_sex := sex_male ;
77456: LD_ADDR_OWVAR 27
77460: PUSH
77461: LD_INT 1
77463: ST_TO_ADDR
// hc_class := class_apeman ;
77464: LD_ADDR_OWVAR 28
77468: PUSH
77469: LD_INT 12
77471: ST_TO_ADDR
// hc_gallery :=  ;
77472: LD_ADDR_OWVAR 33
77476: PUSH
77477: LD_STRING 
77479: ST_TO_ADDR
// hc_name :=  ;
77480: LD_ADDR_OWVAR 26
77484: PUSH
77485: LD_STRING 
77487: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77488: LD_ADDR_OWVAR 29
77492: PUSH
77493: LD_INT 12
77495: PUSH
77496: LD_INT 12
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: ST_TO_ADDR
// if agressivity = 0 then
77503: LD_VAR 0 1
77507: PUSH
77508: LD_INT 0
77510: EQUAL
77511: IFFALSE 77523
// hc_agressivity := 0 else
77513: LD_ADDR_OWVAR 35
77517: PUSH
77518: LD_INT 0
77520: ST_TO_ADDR
77521: GO 77544
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77523: LD_ADDR_OWVAR 35
77527: PUSH
77528: LD_VAR 0 1
77532: NEG
77533: PPUSH
77534: LD_VAR 0 1
77538: PPUSH
77539: CALL_OW 12
77543: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77544: LD_ADDR_OWVAR 31
77548: PUSH
77549: LD_INT 0
77551: PPUSH
77552: LD_INT 3
77554: PPUSH
77555: CALL_OW 12
77559: PUSH
77560: LD_INT 0
77562: PPUSH
77563: LD_INT 3
77565: PPUSH
77566: CALL_OW 12
77570: PUSH
77571: LD_INT 0
77573: PUSH
77574: LD_INT 0
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: ST_TO_ADDR
// end ;
77583: LD_VAR 0 2
77587: RET
// export function PrepareTiger ( agressivity ) ; begin
77588: LD_INT 0
77590: PPUSH
// uc_side := 0 ;
77591: LD_ADDR_OWVAR 20
77595: PUSH
77596: LD_INT 0
77598: ST_TO_ADDR
// uc_nation := 0 ;
77599: LD_ADDR_OWVAR 21
77603: PUSH
77604: LD_INT 0
77606: ST_TO_ADDR
// InitHc ;
77607: CALL_OW 19
// hc_class := class_tiger ;
77611: LD_ADDR_OWVAR 28
77615: PUSH
77616: LD_INT 14
77618: ST_TO_ADDR
// hc_gallery :=  ;
77619: LD_ADDR_OWVAR 33
77623: PUSH
77624: LD_STRING 
77626: ST_TO_ADDR
// hc_name :=  ;
77627: LD_ADDR_OWVAR 26
77631: PUSH
77632: LD_STRING 
77634: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77635: LD_ADDR_OWVAR 35
77639: PUSH
77640: LD_VAR 0 1
77644: NEG
77645: PPUSH
77646: LD_VAR 0 1
77650: PPUSH
77651: CALL_OW 12
77655: ST_TO_ADDR
// end ;
77656: LD_VAR 0 2
77660: RET
// export function PrepareEnchidna ( ) ; begin
77661: LD_INT 0
77663: PPUSH
// uc_side := 0 ;
77664: LD_ADDR_OWVAR 20
77668: PUSH
77669: LD_INT 0
77671: ST_TO_ADDR
// uc_nation := 0 ;
77672: LD_ADDR_OWVAR 21
77676: PUSH
77677: LD_INT 0
77679: ST_TO_ADDR
// InitHc ;
77680: CALL_OW 19
// hc_class := class_baggie ;
77684: LD_ADDR_OWVAR 28
77688: PUSH
77689: LD_INT 13
77691: ST_TO_ADDR
// hc_gallery :=  ;
77692: LD_ADDR_OWVAR 33
77696: PUSH
77697: LD_STRING 
77699: ST_TO_ADDR
// hc_name :=  ;
77700: LD_ADDR_OWVAR 26
77704: PUSH
77705: LD_STRING 
77707: ST_TO_ADDR
// end ;
77708: LD_VAR 0 1
77712: RET
// export function PrepareFrog ( ) ; begin
77713: LD_INT 0
77715: PPUSH
// uc_side := 0 ;
77716: LD_ADDR_OWVAR 20
77720: PUSH
77721: LD_INT 0
77723: ST_TO_ADDR
// uc_nation := 0 ;
77724: LD_ADDR_OWVAR 21
77728: PUSH
77729: LD_INT 0
77731: ST_TO_ADDR
// InitHc ;
77732: CALL_OW 19
// hc_class := class_frog ;
77736: LD_ADDR_OWVAR 28
77740: PUSH
77741: LD_INT 19
77743: ST_TO_ADDR
// hc_gallery :=  ;
77744: LD_ADDR_OWVAR 33
77748: PUSH
77749: LD_STRING 
77751: ST_TO_ADDR
// hc_name :=  ;
77752: LD_ADDR_OWVAR 26
77756: PUSH
77757: LD_STRING 
77759: ST_TO_ADDR
// end ;
77760: LD_VAR 0 1
77764: RET
// export function PrepareFish ( ) ; begin
77765: LD_INT 0
77767: PPUSH
// uc_side := 0 ;
77768: LD_ADDR_OWVAR 20
77772: PUSH
77773: LD_INT 0
77775: ST_TO_ADDR
// uc_nation := 0 ;
77776: LD_ADDR_OWVAR 21
77780: PUSH
77781: LD_INT 0
77783: ST_TO_ADDR
// InitHc ;
77784: CALL_OW 19
// hc_class := class_fish ;
77788: LD_ADDR_OWVAR 28
77792: PUSH
77793: LD_INT 20
77795: ST_TO_ADDR
// hc_gallery :=  ;
77796: LD_ADDR_OWVAR 33
77800: PUSH
77801: LD_STRING 
77803: ST_TO_ADDR
// hc_name :=  ;
77804: LD_ADDR_OWVAR 26
77808: PUSH
77809: LD_STRING 
77811: ST_TO_ADDR
// end ;
77812: LD_VAR 0 1
77816: RET
// export function PrepareBird ( ) ; begin
77817: LD_INT 0
77819: PPUSH
// uc_side := 0 ;
77820: LD_ADDR_OWVAR 20
77824: PUSH
77825: LD_INT 0
77827: ST_TO_ADDR
// uc_nation := 0 ;
77828: LD_ADDR_OWVAR 21
77832: PUSH
77833: LD_INT 0
77835: ST_TO_ADDR
// InitHc ;
77836: CALL_OW 19
// hc_class := class_phororhacos ;
77840: LD_ADDR_OWVAR 28
77844: PUSH
77845: LD_INT 18
77847: ST_TO_ADDR
// hc_gallery :=  ;
77848: LD_ADDR_OWVAR 33
77852: PUSH
77853: LD_STRING 
77855: ST_TO_ADDR
// hc_name :=  ;
77856: LD_ADDR_OWVAR 26
77860: PUSH
77861: LD_STRING 
77863: ST_TO_ADDR
// end ;
77864: LD_VAR 0 1
77868: RET
// export function PrepareHorse ( ) ; begin
77869: LD_INT 0
77871: PPUSH
// uc_side := 0 ;
77872: LD_ADDR_OWVAR 20
77876: PUSH
77877: LD_INT 0
77879: ST_TO_ADDR
// uc_nation := 0 ;
77880: LD_ADDR_OWVAR 21
77884: PUSH
77885: LD_INT 0
77887: ST_TO_ADDR
// InitHc ;
77888: CALL_OW 19
// hc_class := class_horse ;
77892: LD_ADDR_OWVAR 28
77896: PUSH
77897: LD_INT 21
77899: ST_TO_ADDR
// hc_gallery :=  ;
77900: LD_ADDR_OWVAR 33
77904: PUSH
77905: LD_STRING 
77907: ST_TO_ADDR
// hc_name :=  ;
77908: LD_ADDR_OWVAR 26
77912: PUSH
77913: LD_STRING 
77915: ST_TO_ADDR
// end ;
77916: LD_VAR 0 1
77920: RET
// export function PrepareMastodont ( ) ; begin
77921: LD_INT 0
77923: PPUSH
// uc_side := 0 ;
77924: LD_ADDR_OWVAR 20
77928: PUSH
77929: LD_INT 0
77931: ST_TO_ADDR
// uc_nation := 0 ;
77932: LD_ADDR_OWVAR 21
77936: PUSH
77937: LD_INT 0
77939: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77940: LD_ADDR_OWVAR 37
77944: PUSH
77945: LD_INT 31
77947: ST_TO_ADDR
// vc_control := control_rider ;
77948: LD_ADDR_OWVAR 38
77952: PUSH
77953: LD_INT 4
77955: ST_TO_ADDR
// end ;
77956: LD_VAR 0 1
77960: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77961: LD_INT 0
77963: PPUSH
77964: PPUSH
77965: PPUSH
// uc_side = 0 ;
77966: LD_ADDR_OWVAR 20
77970: PUSH
77971: LD_INT 0
77973: ST_TO_ADDR
// uc_nation = 0 ;
77974: LD_ADDR_OWVAR 21
77978: PUSH
77979: LD_INT 0
77981: ST_TO_ADDR
// InitHc_All ( ) ;
77982: CALL_OW 584
// InitVc ;
77986: CALL_OW 20
// if mastodonts then
77990: LD_VAR 0 6
77994: IFFALSE 78061
// for i = 1 to mastodonts do
77996: LD_ADDR_VAR 0 11
78000: PUSH
78001: DOUBLE
78002: LD_INT 1
78004: DEC
78005: ST_TO_ADDR
78006: LD_VAR 0 6
78010: PUSH
78011: FOR_TO
78012: IFFALSE 78059
// begin vc_chassis := 31 ;
78014: LD_ADDR_OWVAR 37
78018: PUSH
78019: LD_INT 31
78021: ST_TO_ADDR
// vc_control := control_rider ;
78022: LD_ADDR_OWVAR 38
78026: PUSH
78027: LD_INT 4
78029: ST_TO_ADDR
// animal := CreateVehicle ;
78030: LD_ADDR_VAR 0 12
78034: PUSH
78035: CALL_OW 45
78039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78040: LD_VAR 0 12
78044: PPUSH
78045: LD_VAR 0 8
78049: PPUSH
78050: LD_INT 0
78052: PPUSH
78053: CALL 80203 0 3
// end ;
78057: GO 78011
78059: POP
78060: POP
// if horses then
78061: LD_VAR 0 5
78065: IFFALSE 78132
// for i = 1 to horses do
78067: LD_ADDR_VAR 0 11
78071: PUSH
78072: DOUBLE
78073: LD_INT 1
78075: DEC
78076: ST_TO_ADDR
78077: LD_VAR 0 5
78081: PUSH
78082: FOR_TO
78083: IFFALSE 78130
// begin hc_class := 21 ;
78085: LD_ADDR_OWVAR 28
78089: PUSH
78090: LD_INT 21
78092: ST_TO_ADDR
// hc_gallery :=  ;
78093: LD_ADDR_OWVAR 33
78097: PUSH
78098: LD_STRING 
78100: ST_TO_ADDR
// animal := CreateHuman ;
78101: LD_ADDR_VAR 0 12
78105: PUSH
78106: CALL_OW 44
78110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78111: LD_VAR 0 12
78115: PPUSH
78116: LD_VAR 0 8
78120: PPUSH
78121: LD_INT 0
78123: PPUSH
78124: CALL 80203 0 3
// end ;
78128: GO 78082
78130: POP
78131: POP
// if birds then
78132: LD_VAR 0 1
78136: IFFALSE 78203
// for i = 1 to birds do
78138: LD_ADDR_VAR 0 11
78142: PUSH
78143: DOUBLE
78144: LD_INT 1
78146: DEC
78147: ST_TO_ADDR
78148: LD_VAR 0 1
78152: PUSH
78153: FOR_TO
78154: IFFALSE 78201
// begin hc_class := 18 ;
78156: LD_ADDR_OWVAR 28
78160: PUSH
78161: LD_INT 18
78163: ST_TO_ADDR
// hc_gallery =  ;
78164: LD_ADDR_OWVAR 33
78168: PUSH
78169: LD_STRING 
78171: ST_TO_ADDR
// animal := CreateHuman ;
78172: LD_ADDR_VAR 0 12
78176: PUSH
78177: CALL_OW 44
78181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78182: LD_VAR 0 12
78186: PPUSH
78187: LD_VAR 0 8
78191: PPUSH
78192: LD_INT 0
78194: PPUSH
78195: CALL 80203 0 3
// end ;
78199: GO 78153
78201: POP
78202: POP
// if tigers then
78203: LD_VAR 0 2
78207: IFFALSE 78291
// for i = 1 to tigers do
78209: LD_ADDR_VAR 0 11
78213: PUSH
78214: DOUBLE
78215: LD_INT 1
78217: DEC
78218: ST_TO_ADDR
78219: LD_VAR 0 2
78223: PUSH
78224: FOR_TO
78225: IFFALSE 78289
// begin hc_class = class_tiger ;
78227: LD_ADDR_OWVAR 28
78231: PUSH
78232: LD_INT 14
78234: ST_TO_ADDR
// hc_gallery =  ;
78235: LD_ADDR_OWVAR 33
78239: PUSH
78240: LD_STRING 
78242: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78243: LD_ADDR_OWVAR 35
78247: PUSH
78248: LD_INT 7
78250: NEG
78251: PPUSH
78252: LD_INT 7
78254: PPUSH
78255: CALL_OW 12
78259: ST_TO_ADDR
// animal := CreateHuman ;
78260: LD_ADDR_VAR 0 12
78264: PUSH
78265: CALL_OW 44
78269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78270: LD_VAR 0 12
78274: PPUSH
78275: LD_VAR 0 8
78279: PPUSH
78280: LD_INT 0
78282: PPUSH
78283: CALL 80203 0 3
// end ;
78287: GO 78224
78289: POP
78290: POP
// if apemans then
78291: LD_VAR 0 3
78295: IFFALSE 78418
// for i = 1 to apemans do
78297: LD_ADDR_VAR 0 11
78301: PUSH
78302: DOUBLE
78303: LD_INT 1
78305: DEC
78306: ST_TO_ADDR
78307: LD_VAR 0 3
78311: PUSH
78312: FOR_TO
78313: IFFALSE 78416
// begin hc_class = class_apeman ;
78315: LD_ADDR_OWVAR 28
78319: PUSH
78320: LD_INT 12
78322: ST_TO_ADDR
// hc_gallery =  ;
78323: LD_ADDR_OWVAR 33
78327: PUSH
78328: LD_STRING 
78330: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78331: LD_ADDR_OWVAR 35
78335: PUSH
78336: LD_INT 2
78338: NEG
78339: PPUSH
78340: LD_INT 2
78342: PPUSH
78343: CALL_OW 12
78347: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78348: LD_ADDR_OWVAR 31
78352: PUSH
78353: LD_INT 1
78355: PPUSH
78356: LD_INT 3
78358: PPUSH
78359: CALL_OW 12
78363: PUSH
78364: LD_INT 1
78366: PPUSH
78367: LD_INT 3
78369: PPUSH
78370: CALL_OW 12
78374: PUSH
78375: LD_INT 0
78377: PUSH
78378: LD_INT 0
78380: PUSH
78381: EMPTY
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: ST_TO_ADDR
// animal := CreateHuman ;
78387: LD_ADDR_VAR 0 12
78391: PUSH
78392: CALL_OW 44
78396: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78397: LD_VAR 0 12
78401: PPUSH
78402: LD_VAR 0 8
78406: PPUSH
78407: LD_INT 0
78409: PPUSH
78410: CALL 80203 0 3
// end ;
78414: GO 78312
78416: POP
78417: POP
// if enchidnas then
78418: LD_VAR 0 4
78422: IFFALSE 78489
// for i = 1 to enchidnas do
78424: LD_ADDR_VAR 0 11
78428: PUSH
78429: DOUBLE
78430: LD_INT 1
78432: DEC
78433: ST_TO_ADDR
78434: LD_VAR 0 4
78438: PUSH
78439: FOR_TO
78440: IFFALSE 78487
// begin hc_class = 13 ;
78442: LD_ADDR_OWVAR 28
78446: PUSH
78447: LD_INT 13
78449: ST_TO_ADDR
// hc_gallery =  ;
78450: LD_ADDR_OWVAR 33
78454: PUSH
78455: LD_STRING 
78457: ST_TO_ADDR
// animal := CreateHuman ;
78458: LD_ADDR_VAR 0 12
78462: PUSH
78463: CALL_OW 44
78467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78468: LD_VAR 0 12
78472: PPUSH
78473: LD_VAR 0 8
78477: PPUSH
78478: LD_INT 0
78480: PPUSH
78481: CALL 80203 0 3
// end ;
78485: GO 78439
78487: POP
78488: POP
// if fishes then
78489: LD_VAR 0 7
78493: IFFALSE 78560
// for i = 1 to fishes do
78495: LD_ADDR_VAR 0 11
78499: PUSH
78500: DOUBLE
78501: LD_INT 1
78503: DEC
78504: ST_TO_ADDR
78505: LD_VAR 0 7
78509: PUSH
78510: FOR_TO
78511: IFFALSE 78558
// begin hc_class = 20 ;
78513: LD_ADDR_OWVAR 28
78517: PUSH
78518: LD_INT 20
78520: ST_TO_ADDR
// hc_gallery =  ;
78521: LD_ADDR_OWVAR 33
78525: PUSH
78526: LD_STRING 
78528: ST_TO_ADDR
// animal := CreateHuman ;
78529: LD_ADDR_VAR 0 12
78533: PUSH
78534: CALL_OW 44
78538: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78539: LD_VAR 0 12
78543: PPUSH
78544: LD_VAR 0 9
78548: PPUSH
78549: LD_INT 0
78551: PPUSH
78552: CALL 80203 0 3
// end ;
78556: GO 78510
78558: POP
78559: POP
// end ;
78560: LD_VAR 0 10
78564: RET
// export function WantHeal ( sci , unit ) ; begin
78565: LD_INT 0
78567: PPUSH
// if GetTaskList ( sci ) > 0 then
78568: LD_VAR 0 1
78572: PPUSH
78573: CALL_OW 437
78577: PUSH
78578: LD_INT 0
78580: GREATER
78581: IFFALSE 78653
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78583: LD_VAR 0 1
78587: PPUSH
78588: CALL_OW 437
78592: PUSH
78593: LD_INT 1
78595: ARRAY
78596: PUSH
78597: LD_INT 1
78599: ARRAY
78600: PUSH
78601: LD_STRING l
78603: EQUAL
78604: IFFALSE 78631
78606: PUSH
78607: LD_VAR 0 1
78611: PPUSH
78612: CALL_OW 437
78616: PUSH
78617: LD_INT 1
78619: ARRAY
78620: PUSH
78621: LD_INT 4
78623: ARRAY
78624: PUSH
78625: LD_VAR 0 2
78629: EQUAL
78630: AND
78631: IFFALSE 78643
// result := true else
78633: LD_ADDR_VAR 0 3
78637: PUSH
78638: LD_INT 1
78640: ST_TO_ADDR
78641: GO 78651
// result := false ;
78643: LD_ADDR_VAR 0 3
78647: PUSH
78648: LD_INT 0
78650: ST_TO_ADDR
// end else
78651: GO 78661
// result := false ;
78653: LD_ADDR_VAR 0 3
78657: PUSH
78658: LD_INT 0
78660: ST_TO_ADDR
// end ;
78661: LD_VAR 0 3
78665: RET
// export function HealTarget ( sci ) ; begin
78666: LD_INT 0
78668: PPUSH
// if not sci then
78669: LD_VAR 0 1
78673: NOT
78674: IFFALSE 78678
// exit ;
78676: GO 78743
// result := 0 ;
78678: LD_ADDR_VAR 0 2
78682: PUSH
78683: LD_INT 0
78685: ST_TO_ADDR
// if GetTaskList ( sci ) then
78686: LD_VAR 0 1
78690: PPUSH
78691: CALL_OW 437
78695: IFFALSE 78743
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78697: LD_VAR 0 1
78701: PPUSH
78702: CALL_OW 437
78706: PUSH
78707: LD_INT 1
78709: ARRAY
78710: PUSH
78711: LD_INT 1
78713: ARRAY
78714: PUSH
78715: LD_STRING l
78717: EQUAL
78718: IFFALSE 78743
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78720: LD_ADDR_VAR 0 2
78724: PUSH
78725: LD_VAR 0 1
78729: PPUSH
78730: CALL_OW 437
78734: PUSH
78735: LD_INT 1
78737: ARRAY
78738: PUSH
78739: LD_INT 4
78741: ARRAY
78742: ST_TO_ADDR
// end ;
78743: LD_VAR 0 2
78747: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78748: LD_INT 0
78750: PPUSH
78751: PPUSH
78752: PPUSH
78753: PPUSH
// if not base_units then
78754: LD_VAR 0 1
78758: NOT
78759: IFFALSE 78763
// exit ;
78761: GO 78850
// result := false ;
78763: LD_ADDR_VAR 0 2
78767: PUSH
78768: LD_INT 0
78770: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78771: LD_ADDR_VAR 0 5
78775: PUSH
78776: LD_VAR 0 1
78780: PPUSH
78781: LD_INT 21
78783: PUSH
78784: LD_INT 3
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: PPUSH
78791: CALL_OW 72
78795: ST_TO_ADDR
// if not tmp then
78796: LD_VAR 0 5
78800: NOT
78801: IFFALSE 78805
// exit ;
78803: GO 78850
// for i in tmp do
78805: LD_ADDR_VAR 0 3
78809: PUSH
78810: LD_VAR 0 5
78814: PUSH
78815: FOR_IN
78816: IFFALSE 78848
// begin result := EnemyInRange ( i , 22 ) ;
78818: LD_ADDR_VAR 0 2
78822: PUSH
78823: LD_VAR 0 3
78827: PPUSH
78828: LD_INT 22
78830: PPUSH
78831: CALL 76275 0 2
78835: ST_TO_ADDR
// if result then
78836: LD_VAR 0 2
78840: IFFALSE 78846
// exit ;
78842: POP
78843: POP
78844: GO 78850
// end ;
78846: GO 78815
78848: POP
78849: POP
// end ;
78850: LD_VAR 0 2
78854: RET
// export function FilterByTag ( units , tag ) ; begin
78855: LD_INT 0
78857: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78858: LD_ADDR_VAR 0 3
78862: PUSH
78863: LD_VAR 0 1
78867: PPUSH
78868: LD_INT 120
78870: PUSH
78871: LD_VAR 0 2
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PPUSH
78880: CALL_OW 72
78884: ST_TO_ADDR
// end ;
78885: LD_VAR 0 3
78889: RET
// export function IsDriver ( un ) ; begin
78890: LD_INT 0
78892: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78893: LD_ADDR_VAR 0 2
78897: PUSH
78898: LD_VAR 0 1
78902: PUSH
78903: LD_INT 55
78905: PUSH
78906: EMPTY
78907: LIST
78908: PPUSH
78909: CALL_OW 69
78913: IN
78914: ST_TO_ADDR
// end ;
78915: LD_VAR 0 2
78919: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78920: LD_INT 0
78922: PPUSH
78923: PPUSH
// list := [ ] ;
78924: LD_ADDR_VAR 0 5
78928: PUSH
78929: EMPTY
78930: ST_TO_ADDR
// case d of 0 :
78931: LD_VAR 0 3
78935: PUSH
78936: LD_INT 0
78938: DOUBLE
78939: EQUAL
78940: IFTRUE 78944
78942: GO 79077
78944: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78945: LD_ADDR_VAR 0 5
78949: PUSH
78950: LD_VAR 0 1
78954: PUSH
78955: LD_INT 4
78957: MINUS
78958: PUSH
78959: LD_VAR 0 2
78963: PUSH
78964: LD_INT 4
78966: MINUS
78967: PUSH
78968: LD_INT 2
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: LIST
78975: PUSH
78976: LD_VAR 0 1
78980: PUSH
78981: LD_INT 3
78983: MINUS
78984: PUSH
78985: LD_VAR 0 2
78989: PUSH
78990: LD_INT 1
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: LIST
78997: PUSH
78998: LD_VAR 0 1
79002: PUSH
79003: LD_INT 4
79005: PLUS
79006: PUSH
79007: LD_VAR 0 2
79011: PUSH
79012: LD_INT 4
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: LIST
79019: PUSH
79020: LD_VAR 0 1
79024: PUSH
79025: LD_INT 3
79027: PLUS
79028: PUSH
79029: LD_VAR 0 2
79033: PUSH
79034: LD_INT 3
79036: PLUS
79037: PUSH
79038: LD_INT 5
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: LIST
79045: PUSH
79046: LD_VAR 0 1
79050: PUSH
79051: LD_VAR 0 2
79055: PUSH
79056: LD_INT 4
79058: PLUS
79059: PUSH
79060: LD_INT 0
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: LIST
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: ST_TO_ADDR
// end ; 1 :
79075: GO 79775
79077: LD_INT 1
79079: DOUBLE
79080: EQUAL
79081: IFTRUE 79085
79083: GO 79218
79085: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79086: LD_ADDR_VAR 0 5
79090: PUSH
79091: LD_VAR 0 1
79095: PUSH
79096: LD_VAR 0 2
79100: PUSH
79101: LD_INT 4
79103: MINUS
79104: PUSH
79105: LD_INT 3
79107: PUSH
79108: EMPTY
79109: LIST
79110: LIST
79111: LIST
79112: PUSH
79113: LD_VAR 0 1
79117: PUSH
79118: LD_INT 3
79120: MINUS
79121: PUSH
79122: LD_VAR 0 2
79126: PUSH
79127: LD_INT 3
79129: MINUS
79130: PUSH
79131: LD_INT 2
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: LIST
79138: PUSH
79139: LD_VAR 0 1
79143: PUSH
79144: LD_INT 4
79146: MINUS
79147: PUSH
79148: LD_VAR 0 2
79152: PUSH
79153: LD_INT 1
79155: PUSH
79156: EMPTY
79157: LIST
79158: LIST
79159: LIST
79160: PUSH
79161: LD_VAR 0 1
79165: PUSH
79166: LD_VAR 0 2
79170: PUSH
79171: LD_INT 3
79173: PLUS
79174: PUSH
79175: LD_INT 0
79177: PUSH
79178: EMPTY
79179: LIST
79180: LIST
79181: LIST
79182: PUSH
79183: LD_VAR 0 1
79187: PUSH
79188: LD_INT 4
79190: PLUS
79191: PUSH
79192: LD_VAR 0 2
79196: PUSH
79197: LD_INT 4
79199: PLUS
79200: PUSH
79201: LD_INT 5
79203: PUSH
79204: EMPTY
79205: LIST
79206: LIST
79207: LIST
79208: PUSH
79209: EMPTY
79210: LIST
79211: LIST
79212: LIST
79213: LIST
79214: LIST
79215: ST_TO_ADDR
// end ; 2 :
79216: GO 79775
79218: LD_INT 2
79220: DOUBLE
79221: EQUAL
79222: IFTRUE 79226
79224: GO 79355
79226: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79227: LD_ADDR_VAR 0 5
79231: PUSH
79232: LD_VAR 0 1
79236: PUSH
79237: LD_VAR 0 2
79241: PUSH
79242: LD_INT 3
79244: MINUS
79245: PUSH
79246: LD_INT 3
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: LIST
79253: PUSH
79254: LD_VAR 0 1
79258: PUSH
79259: LD_INT 4
79261: PLUS
79262: PUSH
79263: LD_VAR 0 2
79267: PUSH
79268: LD_INT 4
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: LIST
79275: PUSH
79276: LD_VAR 0 1
79280: PUSH
79281: LD_VAR 0 2
79285: PUSH
79286: LD_INT 4
79288: PLUS
79289: PUSH
79290: LD_INT 0
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: LIST
79297: PUSH
79298: LD_VAR 0 1
79302: PUSH
79303: LD_INT 3
79305: MINUS
79306: PUSH
79307: LD_VAR 0 2
79311: PUSH
79312: LD_INT 1
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: LIST
79319: PUSH
79320: LD_VAR 0 1
79324: PUSH
79325: LD_INT 4
79327: MINUS
79328: PUSH
79329: LD_VAR 0 2
79333: PUSH
79334: LD_INT 4
79336: MINUS
79337: PUSH
79338: LD_INT 2
79340: PUSH
79341: EMPTY
79342: LIST
79343: LIST
79344: LIST
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: ST_TO_ADDR
// end ; 3 :
79353: GO 79775
79355: LD_INT 3
79357: DOUBLE
79358: EQUAL
79359: IFTRUE 79363
79361: GO 79496
79363: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79364: LD_ADDR_VAR 0 5
79368: PUSH
79369: LD_VAR 0 1
79373: PUSH
79374: LD_INT 3
79376: PLUS
79377: PUSH
79378: LD_VAR 0 2
79382: PUSH
79383: LD_INT 4
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: LIST
79390: PUSH
79391: LD_VAR 0 1
79395: PUSH
79396: LD_INT 4
79398: PLUS
79399: PUSH
79400: LD_VAR 0 2
79404: PUSH
79405: LD_INT 4
79407: PLUS
79408: PUSH
79409: LD_INT 5
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: LIST
79416: PUSH
79417: LD_VAR 0 1
79421: PUSH
79422: LD_INT 4
79424: MINUS
79425: PUSH
79426: LD_VAR 0 2
79430: PUSH
79431: LD_INT 1
79433: PUSH
79434: EMPTY
79435: LIST
79436: LIST
79437: LIST
79438: PUSH
79439: LD_VAR 0 1
79443: PUSH
79444: LD_VAR 0 2
79448: PUSH
79449: LD_INT 4
79451: MINUS
79452: PUSH
79453: LD_INT 3
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: LIST
79460: PUSH
79461: LD_VAR 0 1
79465: PUSH
79466: LD_INT 3
79468: MINUS
79469: PUSH
79470: LD_VAR 0 2
79474: PUSH
79475: LD_INT 3
79477: MINUS
79478: PUSH
79479: LD_INT 2
79481: PUSH
79482: EMPTY
79483: LIST
79484: LIST
79485: LIST
79486: PUSH
79487: EMPTY
79488: LIST
79489: LIST
79490: LIST
79491: LIST
79492: LIST
79493: ST_TO_ADDR
// end ; 4 :
79494: GO 79775
79496: LD_INT 4
79498: DOUBLE
79499: EQUAL
79500: IFTRUE 79504
79502: GO 79637
79504: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79505: LD_ADDR_VAR 0 5
79509: PUSH
79510: LD_VAR 0 1
79514: PUSH
79515: LD_VAR 0 2
79519: PUSH
79520: LD_INT 4
79522: PLUS
79523: PUSH
79524: LD_INT 0
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: LIST
79531: PUSH
79532: LD_VAR 0 1
79536: PUSH
79537: LD_INT 3
79539: PLUS
79540: PUSH
79541: LD_VAR 0 2
79545: PUSH
79546: LD_INT 3
79548: PLUS
79549: PUSH
79550: LD_INT 5
79552: PUSH
79553: EMPTY
79554: LIST
79555: LIST
79556: LIST
79557: PUSH
79558: LD_VAR 0 1
79562: PUSH
79563: LD_INT 4
79565: PLUS
79566: PUSH
79567: LD_VAR 0 2
79571: PUSH
79572: LD_INT 4
79574: PUSH
79575: EMPTY
79576: LIST
79577: LIST
79578: LIST
79579: PUSH
79580: LD_VAR 0 1
79584: PUSH
79585: LD_VAR 0 2
79589: PUSH
79590: LD_INT 3
79592: MINUS
79593: PUSH
79594: LD_INT 3
79596: PUSH
79597: EMPTY
79598: LIST
79599: LIST
79600: LIST
79601: PUSH
79602: LD_VAR 0 1
79606: PUSH
79607: LD_INT 4
79609: MINUS
79610: PUSH
79611: LD_VAR 0 2
79615: PUSH
79616: LD_INT 4
79618: MINUS
79619: PUSH
79620: LD_INT 2
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: LIST
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: ST_TO_ADDR
// end ; 5 :
79635: GO 79775
79637: LD_INT 5
79639: DOUBLE
79640: EQUAL
79641: IFTRUE 79645
79643: GO 79774
79645: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79646: LD_ADDR_VAR 0 5
79650: PUSH
79651: LD_VAR 0 1
79655: PUSH
79656: LD_INT 4
79658: MINUS
79659: PUSH
79660: LD_VAR 0 2
79664: PUSH
79665: LD_INT 1
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: LIST
79672: PUSH
79673: LD_VAR 0 1
79677: PUSH
79678: LD_VAR 0 2
79682: PUSH
79683: LD_INT 4
79685: MINUS
79686: PUSH
79687: LD_INT 3
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: LIST
79694: PUSH
79695: LD_VAR 0 1
79699: PUSH
79700: LD_INT 4
79702: PLUS
79703: PUSH
79704: LD_VAR 0 2
79708: PUSH
79709: LD_INT 4
79711: PLUS
79712: PUSH
79713: LD_INT 5
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: LIST
79720: PUSH
79721: LD_VAR 0 1
79725: PUSH
79726: LD_INT 3
79728: PLUS
79729: PUSH
79730: LD_VAR 0 2
79734: PUSH
79735: LD_INT 4
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: LIST
79742: PUSH
79743: LD_VAR 0 1
79747: PUSH
79748: LD_VAR 0 2
79752: PUSH
79753: LD_INT 3
79755: PLUS
79756: PUSH
79757: LD_INT 0
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: LIST
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: LIST
79769: LIST
79770: LIST
79771: ST_TO_ADDR
// end ; end ;
79772: GO 79775
79774: POP
// result := list ;
79775: LD_ADDR_VAR 0 4
79779: PUSH
79780: LD_VAR 0 5
79784: ST_TO_ADDR
// end ;
79785: LD_VAR 0 4
79789: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79790: LD_INT 0
79792: PPUSH
79793: PPUSH
79794: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79795: LD_VAR 0 1
79799: NOT
79800: IFTRUE 79828
79802: PUSH
79803: LD_VAR 0 2
79807: PUSH
79808: LD_INT 1
79810: PUSH
79811: LD_INT 2
79813: PUSH
79814: LD_INT 3
79816: PUSH
79817: LD_INT 4
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: LIST
79824: LIST
79825: IN
79826: NOT
79827: OR
79828: IFFALSE 79832
// exit ;
79830: GO 79915
// tmp := [ ] ;
79832: LD_ADDR_VAR 0 5
79836: PUSH
79837: EMPTY
79838: ST_TO_ADDR
// for i in units do
79839: LD_ADDR_VAR 0 4
79843: PUSH
79844: LD_VAR 0 1
79848: PUSH
79849: FOR_IN
79850: IFFALSE 79884
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79852: LD_ADDR_VAR 0 5
79856: PUSH
79857: LD_VAR 0 5
79861: PPUSH
79862: LD_VAR 0 4
79866: PPUSH
79867: LD_VAR 0 2
79871: PPUSH
79872: CALL_OW 259
79876: PPUSH
79877: CALL 81310 0 2
79881: ST_TO_ADDR
79882: GO 79849
79884: POP
79885: POP
// if not tmp then
79886: LD_VAR 0 5
79890: NOT
79891: IFFALSE 79895
// exit ;
79893: GO 79915
// result := SortListByListDesc ( units , tmp ) ;
79895: LD_ADDR_VAR 0 3
79899: PUSH
79900: LD_VAR 0 1
79904: PPUSH
79905: LD_VAR 0 5
79909: PPUSH
79910: CALL_OW 77
79914: ST_TO_ADDR
// end ;
79915: LD_VAR 0 3
79919: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79920: LD_INT 0
79922: PPUSH
79923: PPUSH
79924: PPUSH
// result := false ;
79925: LD_ADDR_VAR 0 3
79929: PUSH
79930: LD_INT 0
79932: ST_TO_ADDR
// if not building then
79933: LD_VAR 0 2
79937: NOT
79938: IFFALSE 79942
// exit ;
79940: GO 80086
// x := GetX ( building ) ;
79942: LD_ADDR_VAR 0 4
79946: PUSH
79947: LD_VAR 0 2
79951: PPUSH
79952: CALL_OW 250
79956: ST_TO_ADDR
// y := GetY ( building ) ;
79957: LD_ADDR_VAR 0 5
79961: PUSH
79962: LD_VAR 0 2
79966: PPUSH
79967: CALL_OW 251
79971: ST_TO_ADDR
// if not x or not y then
79972: LD_VAR 0 4
79976: NOT
79977: IFTRUE 79986
79979: PUSH
79980: LD_VAR 0 5
79984: NOT
79985: OR
79986: IFFALSE 79990
// exit ;
79988: GO 80086
// if GetTaskList ( unit ) then
79990: LD_VAR 0 1
79994: PPUSH
79995: CALL_OW 437
79999: IFFALSE 80086
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80001: LD_STRING e
80003: PUSH
80004: LD_VAR 0 1
80008: PPUSH
80009: CALL_OW 437
80013: PUSH
80014: LD_INT 1
80016: ARRAY
80017: PUSH
80018: LD_INT 1
80020: ARRAY
80021: EQUAL
80022: IFFALSE 80049
80024: PUSH
80025: LD_VAR 0 4
80029: PUSH
80030: LD_VAR 0 1
80034: PPUSH
80035: CALL_OW 437
80039: PUSH
80040: LD_INT 1
80042: ARRAY
80043: PUSH
80044: LD_INT 2
80046: ARRAY
80047: EQUAL
80048: AND
80049: IFFALSE 80076
80051: PUSH
80052: LD_VAR 0 5
80056: PUSH
80057: LD_VAR 0 1
80061: PPUSH
80062: CALL_OW 437
80066: PUSH
80067: LD_INT 1
80069: ARRAY
80070: PUSH
80071: LD_INT 3
80073: ARRAY
80074: EQUAL
80075: AND
80076: IFFALSE 80086
// result := true end ;
80078: LD_ADDR_VAR 0 3
80082: PUSH
80083: LD_INT 1
80085: ST_TO_ADDR
// end ;
80086: LD_VAR 0 3
80090: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80091: LD_INT 0
80093: PPUSH
// result := false ;
80094: LD_ADDR_VAR 0 4
80098: PUSH
80099: LD_INT 0
80101: ST_TO_ADDR
// if GetTaskList ( unit ) then
80102: LD_VAR 0 1
80106: PPUSH
80107: CALL_OW 437
80111: IFFALSE 80198
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80113: LD_STRING M
80115: PUSH
80116: LD_VAR 0 1
80120: PPUSH
80121: CALL_OW 437
80125: PUSH
80126: LD_INT 1
80128: ARRAY
80129: PUSH
80130: LD_INT 1
80132: ARRAY
80133: EQUAL
80134: IFFALSE 80161
80136: PUSH
80137: LD_VAR 0 2
80141: PUSH
80142: LD_VAR 0 1
80146: PPUSH
80147: CALL_OW 437
80151: PUSH
80152: LD_INT 1
80154: ARRAY
80155: PUSH
80156: LD_INT 2
80158: ARRAY
80159: EQUAL
80160: AND
80161: IFFALSE 80188
80163: PUSH
80164: LD_VAR 0 3
80168: PUSH
80169: LD_VAR 0 1
80173: PPUSH
80174: CALL_OW 437
80178: PUSH
80179: LD_INT 1
80181: ARRAY
80182: PUSH
80183: LD_INT 3
80185: ARRAY
80186: EQUAL
80187: AND
80188: IFFALSE 80198
// result := true ;
80190: LD_ADDR_VAR 0 4
80194: PUSH
80195: LD_INT 1
80197: ST_TO_ADDR
// end ; end ;
80198: LD_VAR 0 4
80202: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80203: LD_INT 0
80205: PPUSH
80206: PPUSH
80207: PPUSH
80208: PPUSH
// if not unit or not area then
80209: LD_VAR 0 1
80213: NOT
80214: IFTRUE 80223
80216: PUSH
80217: LD_VAR 0 2
80221: NOT
80222: OR
80223: IFFALSE 80227
// exit ;
80225: GO 80403
// tmp := AreaToList ( area , i ) ;
80227: LD_ADDR_VAR 0 6
80231: PUSH
80232: LD_VAR 0 2
80236: PPUSH
80237: LD_VAR 0 5
80241: PPUSH
80242: CALL_OW 517
80246: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80247: LD_ADDR_VAR 0 5
80251: PUSH
80252: DOUBLE
80253: LD_INT 1
80255: DEC
80256: ST_TO_ADDR
80257: LD_VAR 0 6
80261: PUSH
80262: LD_INT 1
80264: ARRAY
80265: PUSH
80266: FOR_TO
80267: IFFALSE 80401
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80269: LD_ADDR_VAR 0 7
80273: PUSH
80274: LD_VAR 0 6
80278: PUSH
80279: LD_INT 1
80281: ARRAY
80282: PUSH
80283: LD_VAR 0 5
80287: ARRAY
80288: PUSH
80289: LD_VAR 0 6
80293: PUSH
80294: LD_INT 2
80296: ARRAY
80297: PUSH
80298: LD_VAR 0 5
80302: ARRAY
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
80308: LD_INT 92
80310: PUSH
80311: LD_VAR 0 7
80315: PUSH
80316: LD_INT 1
80318: ARRAY
80319: PUSH
80320: LD_VAR 0 7
80324: PUSH
80325: LD_INT 2
80327: ARRAY
80328: PUSH
80329: LD_INT 2
80331: PUSH
80332: EMPTY
80333: LIST
80334: LIST
80335: LIST
80336: LIST
80337: PPUSH
80338: CALL_OW 69
80342: PUSH
80343: LD_INT 0
80345: EQUAL
80346: IFFALSE 80399
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80348: LD_VAR 0 1
80352: PPUSH
80353: LD_VAR 0 7
80357: PUSH
80358: LD_INT 1
80360: ARRAY
80361: PPUSH
80362: LD_VAR 0 7
80366: PUSH
80367: LD_INT 2
80369: ARRAY
80370: PPUSH
80371: LD_VAR 0 3
80375: PPUSH
80376: CALL_OW 48
// result := IsPlaced ( unit ) ;
80380: LD_ADDR_VAR 0 4
80384: PUSH
80385: LD_VAR 0 1
80389: PPUSH
80390: CALL_OW 305
80394: ST_TO_ADDR
// exit ;
80395: POP
80396: POP
80397: GO 80403
// end ; end ;
80399: GO 80266
80401: POP
80402: POP
// end ;
80403: LD_VAR 0 4
80407: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80408: LD_INT 0
80410: PPUSH
80411: PPUSH
80412: PPUSH
// if not side or side > 8 then
80413: LD_VAR 0 1
80417: NOT
80418: IFTRUE 80430
80420: PUSH
80421: LD_VAR 0 1
80425: PUSH
80426: LD_INT 8
80428: GREATER
80429: OR
80430: IFFALSE 80434
// exit ;
80432: GO 80621
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80434: LD_ADDR_VAR 0 4
80438: PUSH
80439: LD_INT 22
80441: PUSH
80442: LD_VAR 0 1
80446: PUSH
80447: EMPTY
80448: LIST
80449: LIST
80450: PUSH
80451: LD_INT 21
80453: PUSH
80454: LD_INT 3
80456: PUSH
80457: EMPTY
80458: LIST
80459: LIST
80460: PUSH
80461: EMPTY
80462: LIST
80463: LIST
80464: PPUSH
80465: CALL_OW 69
80469: ST_TO_ADDR
// if not tmp then
80470: LD_VAR 0 4
80474: NOT
80475: IFFALSE 80479
// exit ;
80477: GO 80621
// enable_addtolog := true ;
80479: LD_ADDR_OWVAR 81
80483: PUSH
80484: LD_INT 1
80486: ST_TO_ADDR
// AddToLog ( [ ) ;
80487: LD_STRING [
80489: PPUSH
80490: CALL_OW 561
// for i in tmp do
80494: LD_ADDR_VAR 0 3
80498: PUSH
80499: LD_VAR 0 4
80503: PUSH
80504: FOR_IN
80505: IFFALSE 80612
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80507: LD_STRING [
80509: PUSH
80510: LD_VAR 0 3
80514: PPUSH
80515: CALL_OW 266
80519: STR
80520: PUSH
80521: LD_STRING , 
80523: STR
80524: PUSH
80525: LD_VAR 0 3
80529: PPUSH
80530: CALL_OW 250
80534: STR
80535: PUSH
80536: LD_STRING , 
80538: STR
80539: PUSH
80540: LD_VAR 0 3
80544: PPUSH
80545: CALL_OW 251
80549: STR
80550: PUSH
80551: LD_STRING , 
80553: STR
80554: PUSH
80555: LD_VAR 0 3
80559: PPUSH
80560: CALL_OW 254
80564: STR
80565: PUSH
80566: LD_STRING , 
80568: STR
80569: PUSH
80570: LD_VAR 0 3
80574: PPUSH
80575: LD_INT 1
80577: PPUSH
80578: CALL_OW 268
80582: STR
80583: PUSH
80584: LD_STRING , 
80586: STR
80587: PUSH
80588: LD_VAR 0 3
80592: PPUSH
80593: LD_INT 2
80595: PPUSH
80596: CALL_OW 268
80600: STR
80601: PUSH
80602: LD_STRING ],
80604: STR
80605: PPUSH
80606: CALL_OW 561
// end ;
80610: GO 80504
80612: POP
80613: POP
// AddToLog ( ]; ) ;
80614: LD_STRING ];
80616: PPUSH
80617: CALL_OW 561
// end ;
80621: LD_VAR 0 2
80625: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80626: LD_INT 0
80628: PPUSH
80629: PPUSH
80630: PPUSH
80631: PPUSH
80632: PPUSH
// if not area or not rate or not max then
80633: LD_VAR 0 1
80637: NOT
80638: IFTRUE 80647
80640: PUSH
80641: LD_VAR 0 2
80645: NOT
80646: OR
80647: IFTRUE 80656
80649: PUSH
80650: LD_VAR 0 4
80654: NOT
80655: OR
80656: IFFALSE 80660
// exit ;
80658: GO 80849
// while 1 do
80660: LD_INT 1
80662: IFFALSE 80849
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80664: LD_ADDR_VAR 0 9
80668: PUSH
80669: LD_VAR 0 1
80673: PPUSH
80674: LD_INT 1
80676: PPUSH
80677: CALL_OW 287
80681: PUSH
80682: LD_INT 10
80684: MUL
80685: ST_TO_ADDR
// r := rate / 10 ;
80686: LD_ADDR_VAR 0 7
80690: PUSH
80691: LD_VAR 0 2
80695: PUSH
80696: LD_INT 10
80698: DIVREAL
80699: ST_TO_ADDR
// time := 1 1$00 ;
80700: LD_ADDR_VAR 0 8
80704: PUSH
80705: LD_INT 2100
80707: ST_TO_ADDR
// if amount < min then
80708: LD_VAR 0 9
80712: PUSH
80713: LD_VAR 0 3
80717: LESS
80718: IFFALSE 80736
// r := r * 2 else
80720: LD_ADDR_VAR 0 7
80724: PUSH
80725: LD_VAR 0 7
80729: PUSH
80730: LD_INT 2
80732: MUL
80733: ST_TO_ADDR
80734: GO 80762
// if amount > max then
80736: LD_VAR 0 9
80740: PUSH
80741: LD_VAR 0 4
80745: GREATER
80746: IFFALSE 80762
// r := r / 2 ;
80748: LD_ADDR_VAR 0 7
80752: PUSH
80753: LD_VAR 0 7
80757: PUSH
80758: LD_INT 2
80760: DIVREAL
80761: ST_TO_ADDR
// time := time / r ;
80762: LD_ADDR_VAR 0 8
80766: PUSH
80767: LD_VAR 0 8
80771: PUSH
80772: LD_VAR 0 7
80776: DIVREAL
80777: ST_TO_ADDR
// if time < 0 then
80778: LD_VAR 0 8
80782: PUSH
80783: LD_INT 0
80785: LESS
80786: IFFALSE 80803
// time := time * - 1 ;
80788: LD_ADDR_VAR 0 8
80792: PUSH
80793: LD_VAR 0 8
80797: PUSH
80798: LD_INT 1
80800: NEG
80801: MUL
80802: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80803: LD_VAR 0 8
80807: PUSH
80808: LD_INT 35
80810: PPUSH
80811: LD_INT 875
80813: PPUSH
80814: CALL_OW 12
80818: PLUS
80819: PPUSH
80820: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80824: LD_INT 1
80826: PPUSH
80827: LD_INT 5
80829: PPUSH
80830: CALL_OW 12
80834: PPUSH
80835: LD_VAR 0 1
80839: PPUSH
80840: LD_INT 1
80842: PPUSH
80843: CALL_OW 55
// end ;
80847: GO 80660
// end ;
80849: LD_VAR 0 5
80853: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80854: LD_INT 0
80856: PPUSH
80857: PPUSH
80858: PPUSH
80859: PPUSH
80860: PPUSH
80861: PPUSH
80862: PPUSH
80863: PPUSH
// if not turrets or not factories then
80864: LD_VAR 0 1
80868: NOT
80869: IFTRUE 80878
80871: PUSH
80872: LD_VAR 0 2
80876: NOT
80877: OR
80878: IFFALSE 80882
// exit ;
80880: GO 81189
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80882: LD_ADDR_VAR 0 10
80886: PUSH
80887: LD_INT 5
80889: PUSH
80890: LD_INT 6
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: LD_INT 2
80899: PUSH
80900: LD_INT 4
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PUSH
80907: LD_INT 3
80909: PUSH
80910: LD_INT 5
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PUSH
80917: EMPTY
80918: LIST
80919: LIST
80920: LIST
80921: PUSH
80922: LD_INT 24
80924: PUSH
80925: LD_INT 25
80927: PUSH
80928: EMPTY
80929: LIST
80930: LIST
80931: PUSH
80932: LD_INT 23
80934: PUSH
80935: LD_INT 27
80937: PUSH
80938: EMPTY
80939: LIST
80940: LIST
80941: PUSH
80942: EMPTY
80943: LIST
80944: LIST
80945: PUSH
80946: LD_INT 42
80948: PUSH
80949: LD_INT 43
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: PUSH
80956: LD_INT 44
80958: PUSH
80959: LD_INT 46
80961: PUSH
80962: EMPTY
80963: LIST
80964: LIST
80965: PUSH
80966: LD_INT 45
80968: PUSH
80969: LD_INT 47
80971: PUSH
80972: EMPTY
80973: LIST
80974: LIST
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: LIST
80980: PUSH
80981: EMPTY
80982: LIST
80983: LIST
80984: LIST
80985: ST_TO_ADDR
// result := [ ] ;
80986: LD_ADDR_VAR 0 3
80990: PUSH
80991: EMPTY
80992: ST_TO_ADDR
// for i in turrets do
80993: LD_ADDR_VAR 0 4
80997: PUSH
80998: LD_VAR 0 1
81002: PUSH
81003: FOR_IN
81004: IFFALSE 81187
// begin nat := GetNation ( i ) ;
81006: LD_ADDR_VAR 0 7
81010: PUSH
81011: LD_VAR 0 4
81015: PPUSH
81016: CALL_OW 248
81020: ST_TO_ADDR
// weapon := 0 ;
81021: LD_ADDR_VAR 0 8
81025: PUSH
81026: LD_INT 0
81028: ST_TO_ADDR
// if not nat then
81029: LD_VAR 0 7
81033: NOT
81034: IFFALSE 81038
// continue ;
81036: GO 81003
// for j in list [ nat ] do
81038: LD_ADDR_VAR 0 5
81042: PUSH
81043: LD_VAR 0 10
81047: PUSH
81048: LD_VAR 0 7
81052: ARRAY
81053: PUSH
81054: FOR_IN
81055: IFFALSE 81096
// if GetBWeapon ( i ) = j [ 1 ] then
81057: LD_VAR 0 4
81061: PPUSH
81062: CALL_OW 269
81066: PUSH
81067: LD_VAR 0 5
81071: PUSH
81072: LD_INT 1
81074: ARRAY
81075: EQUAL
81076: IFFALSE 81094
// begin weapon := j [ 2 ] ;
81078: LD_ADDR_VAR 0 8
81082: PUSH
81083: LD_VAR 0 5
81087: PUSH
81088: LD_INT 2
81090: ARRAY
81091: ST_TO_ADDR
// break ;
81092: GO 81096
// end ;
81094: GO 81054
81096: POP
81097: POP
// if not weapon then
81098: LD_VAR 0 8
81102: NOT
81103: IFFALSE 81107
// continue ;
81105: GO 81003
// for k in factories do
81107: LD_ADDR_VAR 0 6
81111: PUSH
81112: LD_VAR 0 2
81116: PUSH
81117: FOR_IN
81118: IFFALSE 81183
// begin weapons := AvailableWeaponList ( k ) ;
81120: LD_ADDR_VAR 0 9
81124: PUSH
81125: LD_VAR 0 6
81129: PPUSH
81130: CALL_OW 478
81134: ST_TO_ADDR
// if not weapons then
81135: LD_VAR 0 9
81139: NOT
81140: IFFALSE 81144
// continue ;
81142: GO 81117
// if weapon in weapons then
81144: LD_VAR 0 8
81148: PUSH
81149: LD_VAR 0 9
81153: IN
81154: IFFALSE 81181
// begin result := [ i , weapon ] ;
81156: LD_ADDR_VAR 0 3
81160: PUSH
81161: LD_VAR 0 4
81165: PUSH
81166: LD_VAR 0 8
81170: PUSH
81171: EMPTY
81172: LIST
81173: LIST
81174: ST_TO_ADDR
// exit ;
81175: POP
81176: POP
81177: POP
81178: POP
81179: GO 81189
// end ; end ;
81181: GO 81117
81183: POP
81184: POP
// end ;
81185: GO 81003
81187: POP
81188: POP
// end ;
81189: LD_VAR 0 3
81193: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81194: LD_INT 0
81196: PPUSH
// if not side or side > 8 then
81197: LD_VAR 0 3
81201: NOT
81202: IFTRUE 81214
81204: PUSH
81205: LD_VAR 0 3
81209: PUSH
81210: LD_INT 8
81212: GREATER
81213: OR
81214: IFFALSE 81218
// exit ;
81216: GO 81277
// if not range then
81218: LD_VAR 0 4
81222: NOT
81223: IFFALSE 81234
// range := - 12 ;
81225: LD_ADDR_VAR 0 4
81229: PUSH
81230: LD_INT 12
81232: NEG
81233: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81234: LD_VAR 0 1
81238: PPUSH
81239: LD_VAR 0 2
81243: PPUSH
81244: LD_VAR 0 3
81248: PPUSH
81249: LD_VAR 0 4
81253: PPUSH
81254: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81258: LD_VAR 0 1
81262: PPUSH
81263: LD_VAR 0 2
81267: PPUSH
81268: LD_VAR 0 3
81272: PPUSH
81273: CALL_OW 331
// end ;
81277: LD_VAR 0 5
81281: RET
// export function Video ( mode ) ; begin
81282: LD_INT 0
81284: PPUSH
// ingame_video = mode ;
81285: LD_ADDR_OWVAR 52
81289: PUSH
81290: LD_VAR 0 1
81294: ST_TO_ADDR
// interface_hidden = mode ;
81295: LD_ADDR_OWVAR 54
81299: PUSH
81300: LD_VAR 0 1
81304: ST_TO_ADDR
// end ;
81305: LD_VAR 0 2
81309: RET
// export function Join ( array , element ) ; begin
81310: LD_INT 0
81312: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81313: LD_ADDR_VAR 0 3
81317: PUSH
81318: LD_VAR 0 1
81322: PPUSH
81323: LD_VAR 0 1
81327: PUSH
81328: LD_INT 1
81330: PLUS
81331: PPUSH
81332: LD_VAR 0 2
81336: PPUSH
81337: CALL_OW 1
81341: ST_TO_ADDR
// end ;
81342: LD_VAR 0 3
81346: RET
// export function JoinUnion ( array , element ) ; begin
81347: LD_INT 0
81349: PPUSH
// result := array union element ;
81350: LD_ADDR_VAR 0 3
81354: PUSH
81355: LD_VAR 0 1
81359: PUSH
81360: LD_VAR 0 2
81364: UNION
81365: ST_TO_ADDR
// end ;
81366: LD_VAR 0 3
81370: RET
// export function GetBehemoths ( side ) ; begin
81371: LD_INT 0
81373: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81374: LD_ADDR_VAR 0 2
81378: PUSH
81379: LD_INT 22
81381: PUSH
81382: LD_VAR 0 1
81386: PUSH
81387: EMPTY
81388: LIST
81389: LIST
81390: PUSH
81391: LD_INT 31
81393: PUSH
81394: LD_INT 25
81396: PUSH
81397: EMPTY
81398: LIST
81399: LIST
81400: PUSH
81401: EMPTY
81402: LIST
81403: LIST
81404: PPUSH
81405: CALL_OW 69
81409: ST_TO_ADDR
// end ;
81410: LD_VAR 0 2
81414: RET
// export function Shuffle ( array ) ; var i , index ; begin
81415: LD_INT 0
81417: PPUSH
81418: PPUSH
81419: PPUSH
// result := [ ] ;
81420: LD_ADDR_VAR 0 2
81424: PUSH
81425: EMPTY
81426: ST_TO_ADDR
// if not array then
81427: LD_VAR 0 1
81431: NOT
81432: IFFALSE 81436
// exit ;
81434: GO 81535
// Randomize ;
81436: CALL_OW 10
// for i = array downto 1 do
81440: LD_ADDR_VAR 0 3
81444: PUSH
81445: DOUBLE
81446: LD_VAR 0 1
81450: INC
81451: ST_TO_ADDR
81452: LD_INT 1
81454: PUSH
81455: FOR_DOWNTO
81456: IFFALSE 81533
// begin index := rand ( 1 , array ) ;
81458: LD_ADDR_VAR 0 4
81462: PUSH
81463: LD_INT 1
81465: PPUSH
81466: LD_VAR 0 1
81470: PPUSH
81471: CALL_OW 12
81475: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81476: LD_ADDR_VAR 0 2
81480: PUSH
81481: LD_VAR 0 2
81485: PPUSH
81486: LD_VAR 0 2
81490: PUSH
81491: LD_INT 1
81493: PLUS
81494: PPUSH
81495: LD_VAR 0 1
81499: PUSH
81500: LD_VAR 0 4
81504: ARRAY
81505: PPUSH
81506: CALL_OW 2
81510: ST_TO_ADDR
// array := Delete ( array , index ) ;
81511: LD_ADDR_VAR 0 1
81515: PUSH
81516: LD_VAR 0 1
81520: PPUSH
81521: LD_VAR 0 4
81525: PPUSH
81526: CALL_OW 3
81530: ST_TO_ADDR
// end ;
81531: GO 81455
81533: POP
81534: POP
// end ;
81535: LD_VAR 0 2
81539: RET
// export function GetBaseMaterials ( base ) ; begin
81540: LD_INT 0
81542: PPUSH
// result := [ 0 , 0 , 0 ] ;
81543: LD_ADDR_VAR 0 2
81547: PUSH
81548: LD_INT 0
81550: PUSH
81551: LD_INT 0
81553: PUSH
81554: LD_INT 0
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: LIST
81561: ST_TO_ADDR
// if not base then
81562: LD_VAR 0 1
81566: NOT
81567: IFFALSE 81571
// exit ;
81569: GO 81620
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81571: LD_ADDR_VAR 0 2
81575: PUSH
81576: LD_VAR 0 1
81580: PPUSH
81581: LD_INT 1
81583: PPUSH
81584: CALL_OW 275
81588: PUSH
81589: LD_VAR 0 1
81593: PPUSH
81594: LD_INT 2
81596: PPUSH
81597: CALL_OW 275
81601: PUSH
81602: LD_VAR 0 1
81606: PPUSH
81607: LD_INT 3
81609: PPUSH
81610: CALL_OW 275
81614: PUSH
81615: EMPTY
81616: LIST
81617: LIST
81618: LIST
81619: ST_TO_ADDR
// end ;
81620: LD_VAR 0 2
81624: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81625: LD_INT 0
81627: PPUSH
81628: PPUSH
// result := array ;
81629: LD_ADDR_VAR 0 3
81633: PUSH
81634: LD_VAR 0 1
81638: ST_TO_ADDR
// if size >= result then
81639: LD_VAR 0 2
81643: PUSH
81644: LD_VAR 0 3
81648: GREATEREQUAL
81649: IFFALSE 81653
// exit ;
81651: GO 81703
// if size then
81653: LD_VAR 0 2
81657: IFFALSE 81703
// for i := array downto size do
81659: LD_ADDR_VAR 0 4
81663: PUSH
81664: DOUBLE
81665: LD_VAR 0 1
81669: INC
81670: ST_TO_ADDR
81671: LD_VAR 0 2
81675: PUSH
81676: FOR_DOWNTO
81677: IFFALSE 81701
// result := Delete ( result , result ) ;
81679: LD_ADDR_VAR 0 3
81683: PUSH
81684: LD_VAR 0 3
81688: PPUSH
81689: LD_VAR 0 3
81693: PPUSH
81694: CALL_OW 3
81698: ST_TO_ADDR
81699: GO 81676
81701: POP
81702: POP
// end ;
81703: LD_VAR 0 3
81707: RET
// export function ComExit ( unit ) ; var tmp ; begin
81708: LD_INT 0
81710: PPUSH
81711: PPUSH
// if not IsInUnit ( unit ) then
81712: LD_VAR 0 1
81716: PPUSH
81717: CALL_OW 310
81721: NOT
81722: IFFALSE 81726
// exit ;
81724: GO 81786
// tmp := IsInUnit ( unit ) ;
81726: LD_ADDR_VAR 0 3
81730: PUSH
81731: LD_VAR 0 1
81735: PPUSH
81736: CALL_OW 310
81740: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81741: LD_VAR 0 3
81745: PPUSH
81746: CALL_OW 247
81750: PUSH
81751: LD_INT 2
81753: EQUAL
81754: IFFALSE 81767
// ComExitVehicle ( unit ) else
81756: LD_VAR 0 1
81760: PPUSH
81761: CALL_OW 121
81765: GO 81776
// ComExitBuilding ( unit ) ;
81767: LD_VAR 0 1
81771: PPUSH
81772: CALL_OW 122
// result := tmp ;
81776: LD_ADDR_VAR 0 2
81780: PUSH
81781: LD_VAR 0 3
81785: ST_TO_ADDR
// end ;
81786: LD_VAR 0 2
81790: RET
// export function ComExitAll ( units ) ; var i ; begin
81791: LD_INT 0
81793: PPUSH
81794: PPUSH
// if not units then
81795: LD_VAR 0 1
81799: NOT
81800: IFFALSE 81804
// exit ;
81802: GO 81830
// for i in units do
81804: LD_ADDR_VAR 0 3
81808: PUSH
81809: LD_VAR 0 1
81813: PUSH
81814: FOR_IN
81815: IFFALSE 81828
// ComExit ( i ) ;
81817: LD_VAR 0 3
81821: PPUSH
81822: CALL 81708 0 1
81826: GO 81814
81828: POP
81829: POP
// end ;
81830: LD_VAR 0 2
81834: RET
// export function ResetHc ; begin
81835: LD_INT 0
81837: PPUSH
// InitHc ;
81838: CALL_OW 19
// hc_importance := 0 ;
81842: LD_ADDR_OWVAR 32
81846: PUSH
81847: LD_INT 0
81849: ST_TO_ADDR
// end ;
81850: LD_VAR 0 1
81854: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81855: LD_INT 0
81857: PPUSH
81858: PPUSH
81859: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81860: LD_ADDR_VAR 0 6
81864: PUSH
81865: LD_VAR 0 1
81869: PUSH
81870: LD_VAR 0 3
81874: PLUS
81875: PUSH
81876: LD_INT 2
81878: DIV
81879: ST_TO_ADDR
// if _x < 0 then
81880: LD_VAR 0 6
81884: PUSH
81885: LD_INT 0
81887: LESS
81888: IFFALSE 81905
// _x := _x * - 1 ;
81890: LD_ADDR_VAR 0 6
81894: PUSH
81895: LD_VAR 0 6
81899: PUSH
81900: LD_INT 1
81902: NEG
81903: MUL
81904: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81905: LD_ADDR_VAR 0 7
81909: PUSH
81910: LD_VAR 0 2
81914: PUSH
81915: LD_VAR 0 4
81919: PLUS
81920: PUSH
81921: LD_INT 2
81923: DIV
81924: ST_TO_ADDR
// if _y < 0 then
81925: LD_VAR 0 7
81929: PUSH
81930: LD_INT 0
81932: LESS
81933: IFFALSE 81950
// _y := _y * - 1 ;
81935: LD_ADDR_VAR 0 7
81939: PUSH
81940: LD_VAR 0 7
81944: PUSH
81945: LD_INT 1
81947: NEG
81948: MUL
81949: ST_TO_ADDR
// result := [ _x , _y ] ;
81950: LD_ADDR_VAR 0 5
81954: PUSH
81955: LD_VAR 0 6
81959: PUSH
81960: LD_VAR 0 7
81964: PUSH
81965: EMPTY
81966: LIST
81967: LIST
81968: ST_TO_ADDR
// end ;
81969: LD_VAR 0 5
81973: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81974: LD_INT 0
81976: PPUSH
81977: PPUSH
81978: PPUSH
81979: PPUSH
// task := GetTaskList ( unit ) ;
81980: LD_ADDR_VAR 0 7
81984: PUSH
81985: LD_VAR 0 1
81989: PPUSH
81990: CALL_OW 437
81994: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81995: LD_VAR 0 7
81999: NOT
82000: IFFALSE 82019
82002: PUSH
82003: LD_VAR 0 1
82007: PPUSH
82008: LD_VAR 0 2
82012: PPUSH
82013: CALL_OW 308
82017: NOT
82018: AND
82019: IFFALSE 82023
// exit ;
82021: GO 82141
// if IsInArea ( unit , area ) then
82023: LD_VAR 0 1
82027: PPUSH
82028: LD_VAR 0 2
82032: PPUSH
82033: CALL_OW 308
82037: IFFALSE 82055
// begin ComMoveToArea ( unit , goAway ) ;
82039: LD_VAR 0 1
82043: PPUSH
82044: LD_VAR 0 3
82048: PPUSH
82049: CALL_OW 113
// exit ;
82053: GO 82141
// end ; if task [ 1 ] [ 1 ] <> M then
82055: LD_VAR 0 7
82059: PUSH
82060: LD_INT 1
82062: ARRAY
82063: PUSH
82064: LD_INT 1
82066: ARRAY
82067: PUSH
82068: LD_STRING M
82070: NONEQUAL
82071: IFFALSE 82075
// exit ;
82073: GO 82141
// x := task [ 1 ] [ 2 ] ;
82075: LD_ADDR_VAR 0 5
82079: PUSH
82080: LD_VAR 0 7
82084: PUSH
82085: LD_INT 1
82087: ARRAY
82088: PUSH
82089: LD_INT 2
82091: ARRAY
82092: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82093: LD_ADDR_VAR 0 6
82097: PUSH
82098: LD_VAR 0 7
82102: PUSH
82103: LD_INT 1
82105: ARRAY
82106: PUSH
82107: LD_INT 3
82109: ARRAY
82110: ST_TO_ADDR
// if InArea ( x , y , area ) then
82111: LD_VAR 0 5
82115: PPUSH
82116: LD_VAR 0 6
82120: PPUSH
82121: LD_VAR 0 2
82125: PPUSH
82126: CALL_OW 309
82130: IFFALSE 82141
// ComStop ( unit ) ;
82132: LD_VAR 0 1
82136: PPUSH
82137: CALL_OW 141
// end ;
82141: LD_VAR 0 4
82145: RET
// export function Abs ( value ) ; begin
82146: LD_INT 0
82148: PPUSH
// result := value ;
82149: LD_ADDR_VAR 0 2
82153: PUSH
82154: LD_VAR 0 1
82158: ST_TO_ADDR
// if value < 0 then
82159: LD_VAR 0 1
82163: PUSH
82164: LD_INT 0
82166: LESS
82167: IFFALSE 82184
// result := value * - 1 ;
82169: LD_ADDR_VAR 0 2
82173: PUSH
82174: LD_VAR 0 1
82178: PUSH
82179: LD_INT 1
82181: NEG
82182: MUL
82183: ST_TO_ADDR
// end ;
82184: LD_VAR 0 2
82188: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82189: LD_INT 0
82191: PPUSH
82192: PPUSH
82193: PPUSH
82194: PPUSH
82195: PPUSH
82196: PPUSH
82197: PPUSH
82198: PPUSH
// if not unit or not building then
82199: LD_VAR 0 1
82203: NOT
82204: IFTRUE 82213
82206: PUSH
82207: LD_VAR 0 2
82211: NOT
82212: OR
82213: IFFALSE 82217
// exit ;
82215: GO 82445
// x := GetX ( building ) ;
82217: LD_ADDR_VAR 0 4
82221: PUSH
82222: LD_VAR 0 2
82226: PPUSH
82227: CALL_OW 250
82231: ST_TO_ADDR
// y := GetY ( building ) ;
82232: LD_ADDR_VAR 0 6
82236: PUSH
82237: LD_VAR 0 2
82241: PPUSH
82242: CALL_OW 251
82246: ST_TO_ADDR
// d := GetDir ( building ) ;
82247: LD_ADDR_VAR 0 8
82251: PUSH
82252: LD_VAR 0 2
82256: PPUSH
82257: CALL_OW 254
82261: ST_TO_ADDR
// r := 4 ;
82262: LD_ADDR_VAR 0 9
82266: PUSH
82267: LD_INT 4
82269: ST_TO_ADDR
// for i := 1 to 5 do
82270: LD_ADDR_VAR 0 10
82274: PUSH
82275: DOUBLE
82276: LD_INT 1
82278: DEC
82279: ST_TO_ADDR
82280: LD_INT 5
82282: PUSH
82283: FOR_TO
82284: IFFALSE 82443
// begin _x := ShiftX ( x , d , r + i ) ;
82286: LD_ADDR_VAR 0 5
82290: PUSH
82291: LD_VAR 0 4
82295: PPUSH
82296: LD_VAR 0 8
82300: PPUSH
82301: LD_VAR 0 9
82305: PUSH
82306: LD_VAR 0 10
82310: PLUS
82311: PPUSH
82312: CALL_OW 272
82316: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82317: LD_ADDR_VAR 0 7
82321: PUSH
82322: LD_VAR 0 6
82326: PPUSH
82327: LD_VAR 0 8
82331: PPUSH
82332: LD_VAR 0 9
82336: PUSH
82337: LD_VAR 0 10
82341: PLUS
82342: PPUSH
82343: CALL_OW 273
82347: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82348: LD_VAR 0 5
82352: PPUSH
82353: LD_VAR 0 7
82357: PPUSH
82358: CALL_OW 488
82362: IFFALSE 82397
82364: PUSH
82365: LD_VAR 0 5
82369: PPUSH
82370: LD_VAR 0 7
82374: PPUSH
82375: CALL_OW 428
82379: PPUSH
82380: CALL_OW 247
82384: PUSH
82385: LD_INT 3
82387: PUSH
82388: LD_INT 2
82390: PUSH
82391: EMPTY
82392: LIST
82393: LIST
82394: IN
82395: NOT
82396: AND
82397: IFFALSE 82441
// begin ComMoveXY ( unit , _x , _y ) ;
82399: LD_VAR 0 1
82403: PPUSH
82404: LD_VAR 0 5
82408: PPUSH
82409: LD_VAR 0 7
82413: PPUSH
82414: CALL_OW 111
// result := [ _x , _y ] ;
82418: LD_ADDR_VAR 0 3
82422: PUSH
82423: LD_VAR 0 5
82427: PUSH
82428: LD_VAR 0 7
82432: PUSH
82433: EMPTY
82434: LIST
82435: LIST
82436: ST_TO_ADDR
// exit ;
82437: POP
82438: POP
82439: GO 82445
// end ; end ;
82441: GO 82283
82443: POP
82444: POP
// end ;
82445: LD_VAR 0 3
82449: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82450: LD_INT 0
82452: PPUSH
82453: PPUSH
82454: PPUSH
// result := 0 ;
82455: LD_ADDR_VAR 0 3
82459: PUSH
82460: LD_INT 0
82462: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82463: LD_VAR 0 1
82467: PUSH
82468: LD_INT 0
82470: LESS
82471: IFTRUE 82483
82473: PUSH
82474: LD_VAR 0 1
82478: PUSH
82479: LD_INT 8
82481: GREATER
82482: OR
82483: IFTRUE 82495
82485: PUSH
82486: LD_VAR 0 2
82490: PUSH
82491: LD_INT 0
82493: LESS
82494: OR
82495: IFTRUE 82507
82497: PUSH
82498: LD_VAR 0 2
82502: PUSH
82503: LD_INT 8
82505: GREATER
82506: OR
82507: IFFALSE 82511
// exit ;
82509: GO 82586
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82511: LD_ADDR_VAR 0 4
82515: PUSH
82516: LD_INT 22
82518: PUSH
82519: LD_VAR 0 2
82523: PUSH
82524: EMPTY
82525: LIST
82526: LIST
82527: PPUSH
82528: CALL_OW 69
82532: PUSH
82533: FOR_IN
82534: IFFALSE 82584
// begin un := UnitShoot ( i ) ;
82536: LD_ADDR_VAR 0 5
82540: PUSH
82541: LD_VAR 0 4
82545: PPUSH
82546: CALL_OW 504
82550: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82551: LD_VAR 0 5
82555: PPUSH
82556: CALL_OW 255
82560: PUSH
82561: LD_VAR 0 1
82565: EQUAL
82566: IFFALSE 82582
// begin result := un ;
82568: LD_ADDR_VAR 0 3
82572: PUSH
82573: LD_VAR 0 5
82577: ST_TO_ADDR
// exit ;
82578: POP
82579: POP
82580: GO 82586
// end ; end ;
82582: GO 82533
82584: POP
82585: POP
// end ;
82586: LD_VAR 0 3
82590: RET
// export function GetCargoBay ( units ) ; begin
82591: LD_INT 0
82593: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82594: LD_ADDR_VAR 0 2
82598: PUSH
82599: LD_VAR 0 1
82603: PPUSH
82604: LD_INT 2
82606: PUSH
82607: LD_INT 34
82609: PUSH
82610: LD_INT 12
82612: PUSH
82613: EMPTY
82614: LIST
82615: LIST
82616: PUSH
82617: LD_INT 34
82619: PUSH
82620: LD_INT 51
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PUSH
82627: LD_INT 34
82629: PUSH
82630: LD_INT 32
82632: PUSH
82633: EMPTY
82634: LIST
82635: LIST
82636: PUSH
82637: LD_INT 34
82639: PUSH
82640: LD_INT 89
82642: PUSH
82643: EMPTY
82644: LIST
82645: LIST
82646: PUSH
82647: EMPTY
82648: LIST
82649: LIST
82650: LIST
82651: LIST
82652: LIST
82653: PPUSH
82654: CALL_OW 72
82658: ST_TO_ADDR
// end ;
82659: LD_VAR 0 2
82663: RET
// export function Negate ( value ) ; begin
82664: LD_INT 0
82666: PPUSH
// result := not value ;
82667: LD_ADDR_VAR 0 2
82671: PUSH
82672: LD_VAR 0 1
82676: NOT
82677: ST_TO_ADDR
// end ;
82678: LD_VAR 0 2
82682: RET
// export function Inc ( value ) ; begin
82683: LD_INT 0
82685: PPUSH
// result := value + 1 ;
82686: LD_ADDR_VAR 0 2
82690: PUSH
82691: LD_VAR 0 1
82695: PUSH
82696: LD_INT 1
82698: PLUS
82699: ST_TO_ADDR
// end ;
82700: LD_VAR 0 2
82704: RET
// export function Dec ( value ) ; begin
82705: LD_INT 0
82707: PPUSH
// result := value - 1 ;
82708: LD_ADDR_VAR 0 2
82712: PUSH
82713: LD_VAR 0 1
82717: PUSH
82718: LD_INT 1
82720: MINUS
82721: ST_TO_ADDR
// end ;
82722: LD_VAR 0 2
82726: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82727: LD_INT 0
82729: PPUSH
82730: PPUSH
82731: PPUSH
82732: PPUSH
82733: PPUSH
82734: PPUSH
82735: PPUSH
82736: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82737: LD_VAR 0 1
82741: PPUSH
82742: LD_VAR 0 2
82746: PPUSH
82747: CALL_OW 488
82751: NOT
82752: IFTRUE 82771
82754: PUSH
82755: LD_VAR 0 3
82759: PPUSH
82760: LD_VAR 0 4
82764: PPUSH
82765: CALL_OW 488
82769: NOT
82770: OR
82771: IFFALSE 82784
// begin result := - 1 ;
82773: LD_ADDR_VAR 0 5
82777: PUSH
82778: LD_INT 1
82780: NEG
82781: ST_TO_ADDR
// exit ;
82782: GO 83019
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82784: LD_ADDR_VAR 0 12
82788: PUSH
82789: LD_VAR 0 1
82793: PPUSH
82794: LD_VAR 0 2
82798: PPUSH
82799: LD_VAR 0 3
82803: PPUSH
82804: LD_VAR 0 4
82808: PPUSH
82809: CALL 81855 0 4
82813: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82814: LD_ADDR_VAR 0 11
82818: PUSH
82819: LD_VAR 0 1
82823: PPUSH
82824: LD_VAR 0 2
82828: PPUSH
82829: LD_VAR 0 12
82833: PUSH
82834: LD_INT 1
82836: ARRAY
82837: PPUSH
82838: LD_VAR 0 12
82842: PUSH
82843: LD_INT 2
82845: ARRAY
82846: PPUSH
82847: CALL_OW 298
82851: ST_TO_ADDR
// distance := 9999 ;
82852: LD_ADDR_VAR 0 10
82856: PUSH
82857: LD_INT 9999
82859: ST_TO_ADDR
// for i := 0 to 5 do
82860: LD_ADDR_VAR 0 6
82864: PUSH
82865: DOUBLE
82866: LD_INT 0
82868: DEC
82869: ST_TO_ADDR
82870: LD_INT 5
82872: PUSH
82873: FOR_TO
82874: IFFALSE 83017
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82876: LD_ADDR_VAR 0 7
82880: PUSH
82881: LD_VAR 0 1
82885: PPUSH
82886: LD_VAR 0 6
82890: PPUSH
82891: LD_VAR 0 11
82895: PPUSH
82896: CALL_OW 272
82900: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82901: LD_ADDR_VAR 0 8
82905: PUSH
82906: LD_VAR 0 2
82910: PPUSH
82911: LD_VAR 0 6
82915: PPUSH
82916: LD_VAR 0 11
82920: PPUSH
82921: CALL_OW 273
82925: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82926: LD_VAR 0 7
82930: PPUSH
82931: LD_VAR 0 8
82935: PPUSH
82936: CALL_OW 488
82940: NOT
82941: IFFALSE 82945
// continue ;
82943: GO 82873
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82945: LD_ADDR_VAR 0 9
82949: PUSH
82950: LD_VAR 0 12
82954: PUSH
82955: LD_INT 1
82957: ARRAY
82958: PPUSH
82959: LD_VAR 0 12
82963: PUSH
82964: LD_INT 2
82966: ARRAY
82967: PPUSH
82968: LD_VAR 0 7
82972: PPUSH
82973: LD_VAR 0 8
82977: PPUSH
82978: CALL_OW 298
82982: ST_TO_ADDR
// if tmp < distance then
82983: LD_VAR 0 9
82987: PUSH
82988: LD_VAR 0 10
82992: LESS
82993: IFFALSE 83015
// begin result := i ;
82995: LD_ADDR_VAR 0 5
82999: PUSH
83000: LD_VAR 0 6
83004: ST_TO_ADDR
// distance := tmp ;
83005: LD_ADDR_VAR 0 10
83009: PUSH
83010: LD_VAR 0 9
83014: ST_TO_ADDR
// end ; end ;
83015: GO 82873
83017: POP
83018: POP
// end ;
83019: LD_VAR 0 5
83023: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83024: LD_INT 0
83026: PPUSH
83027: PPUSH
// if not driver or not IsInUnit ( driver ) then
83028: LD_VAR 0 1
83032: NOT
83033: IFTRUE 83047
83035: PUSH
83036: LD_VAR 0 1
83040: PPUSH
83041: CALL_OW 310
83045: NOT
83046: OR
83047: IFFALSE 83051
// exit ;
83049: GO 83141
// vehicle := IsInUnit ( driver ) ;
83051: LD_ADDR_VAR 0 3
83055: PUSH
83056: LD_VAR 0 1
83060: PPUSH
83061: CALL_OW 310
83065: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83066: LD_VAR 0 1
83070: PPUSH
83071: LD_STRING \
83073: PUSH
83074: LD_INT 0
83076: PUSH
83077: LD_INT 0
83079: PUSH
83080: LD_INT 0
83082: PUSH
83083: LD_INT 0
83085: PUSH
83086: LD_INT 0
83088: PUSH
83089: LD_INT 0
83091: PUSH
83092: EMPTY
83093: LIST
83094: LIST
83095: LIST
83096: LIST
83097: LIST
83098: LIST
83099: LIST
83100: PUSH
83101: LD_STRING E
83103: PUSH
83104: LD_INT 0
83106: PUSH
83107: LD_INT 0
83109: PUSH
83110: LD_VAR 0 3
83114: PUSH
83115: LD_INT 0
83117: PUSH
83118: LD_INT 0
83120: PUSH
83121: LD_INT 0
83123: PUSH
83124: EMPTY
83125: LIST
83126: LIST
83127: LIST
83128: LIST
83129: LIST
83130: LIST
83131: LIST
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PPUSH
83137: CALL_OW 446
// end ;
83141: LD_VAR 0 2
83145: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83146: LD_INT 0
83148: PPUSH
83149: PPUSH
// if not driver or not IsInUnit ( driver ) then
83150: LD_VAR 0 1
83154: NOT
83155: IFTRUE 83169
83157: PUSH
83158: LD_VAR 0 1
83162: PPUSH
83163: CALL_OW 310
83167: NOT
83168: OR
83169: IFFALSE 83173
// exit ;
83171: GO 83263
// vehicle := IsInUnit ( driver ) ;
83173: LD_ADDR_VAR 0 3
83177: PUSH
83178: LD_VAR 0 1
83182: PPUSH
83183: CALL_OW 310
83187: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83188: LD_VAR 0 1
83192: PPUSH
83193: LD_STRING \
83195: PUSH
83196: LD_INT 0
83198: PUSH
83199: LD_INT 0
83201: PUSH
83202: LD_INT 0
83204: PUSH
83205: LD_INT 0
83207: PUSH
83208: LD_INT 0
83210: PUSH
83211: LD_INT 0
83213: PUSH
83214: EMPTY
83215: LIST
83216: LIST
83217: LIST
83218: LIST
83219: LIST
83220: LIST
83221: LIST
83222: PUSH
83223: LD_STRING E
83225: PUSH
83226: LD_INT 0
83228: PUSH
83229: LD_INT 0
83231: PUSH
83232: LD_VAR 0 3
83236: PUSH
83237: LD_INT 0
83239: PUSH
83240: LD_INT 0
83242: PUSH
83243: LD_INT 0
83245: PUSH
83246: EMPTY
83247: LIST
83248: LIST
83249: LIST
83250: LIST
83251: LIST
83252: LIST
83253: LIST
83254: PUSH
83255: EMPTY
83256: LIST
83257: LIST
83258: PPUSH
83259: CALL_OW 447
// end ;
83263: LD_VAR 0 2
83267: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83268: LD_INT 0
83270: PPUSH
83271: PPUSH
83272: PPUSH
// tmp := [ ] ;
83273: LD_ADDR_VAR 0 5
83277: PUSH
83278: EMPTY
83279: ST_TO_ADDR
// for i in units do
83280: LD_ADDR_VAR 0 4
83284: PUSH
83285: LD_VAR 0 1
83289: PUSH
83290: FOR_IN
83291: IFFALSE 83329
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83293: LD_ADDR_VAR 0 5
83297: PUSH
83298: LD_VAR 0 5
83302: PPUSH
83303: LD_VAR 0 5
83307: PUSH
83308: LD_INT 1
83310: PLUS
83311: PPUSH
83312: LD_VAR 0 4
83316: PPUSH
83317: CALL_OW 256
83321: PPUSH
83322: CALL_OW 2
83326: ST_TO_ADDR
83327: GO 83290
83329: POP
83330: POP
// if not tmp then
83331: LD_VAR 0 5
83335: NOT
83336: IFFALSE 83340
// exit ;
83338: GO 83388
// if asc then
83340: LD_VAR 0 2
83344: IFFALSE 83368
// result := SortListByListAsc ( units , tmp ) else
83346: LD_ADDR_VAR 0 3
83350: PUSH
83351: LD_VAR 0 1
83355: PPUSH
83356: LD_VAR 0 5
83360: PPUSH
83361: CALL_OW 76
83365: ST_TO_ADDR
83366: GO 83388
// result := SortListByListDesc ( units , tmp ) ;
83368: LD_ADDR_VAR 0 3
83372: PUSH
83373: LD_VAR 0 1
83377: PPUSH
83378: LD_VAR 0 5
83382: PPUSH
83383: CALL_OW 77
83387: ST_TO_ADDR
// end ;
83388: LD_VAR 0 3
83392: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83393: LD_INT 0
83395: PPUSH
83396: PPUSH
// task := GetTaskList ( mech ) ;
83397: LD_ADDR_VAR 0 4
83401: PUSH
83402: LD_VAR 0 1
83406: PPUSH
83407: CALL_OW 437
83411: ST_TO_ADDR
// if not task then
83412: LD_VAR 0 4
83416: NOT
83417: IFFALSE 83421
// exit ;
83419: GO 83465
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83421: LD_ADDR_VAR 0 3
83425: PUSH
83426: LD_VAR 0 4
83430: PUSH
83431: LD_INT 1
83433: ARRAY
83434: PUSH
83435: LD_INT 1
83437: ARRAY
83438: PUSH
83439: LD_STRING r
83441: EQUAL
83442: IFFALSE 83464
83444: PUSH
83445: LD_VAR 0 4
83449: PUSH
83450: LD_INT 1
83452: ARRAY
83453: PUSH
83454: LD_INT 4
83456: ARRAY
83457: PUSH
83458: LD_VAR 0 2
83462: EQUAL
83463: AND
83464: ST_TO_ADDR
// end ;
83465: LD_VAR 0 3
83469: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83470: LD_INT 0
83472: PPUSH
// SetDir ( unit , d ) ;
83473: LD_VAR 0 1
83477: PPUSH
83478: LD_VAR 0 4
83482: PPUSH
83483: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
83487: LD_ADDR_VAR 0 6
83491: PUSH
83492: LD_VAR 0 1
83496: PPUSH
83497: LD_VAR 0 2
83501: PPUSH
83502: LD_VAR 0 3
83506: PPUSH
83507: LD_VAR 0 5
83511: PPUSH
83512: CALL_OW 48
83516: ST_TO_ADDR
// end ;
83517: LD_VAR 0 6
83521: RET
// export function ToNaturalNumber ( number ) ; begin
83522: LD_INT 0
83524: PPUSH
// result := number div 1 ;
83525: LD_ADDR_VAR 0 2
83529: PUSH
83530: LD_VAR 0 1
83534: PUSH
83535: LD_INT 1
83537: DIV
83538: ST_TO_ADDR
// if number < 0 then
83539: LD_VAR 0 1
83543: PUSH
83544: LD_INT 0
83546: LESS
83547: IFFALSE 83557
// result := 0 ;
83549: LD_ADDR_VAR 0 2
83553: PUSH
83554: LD_INT 0
83556: ST_TO_ADDR
// end ;
83557: LD_VAR 0 2
83561: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
83562: LD_INT 0
83564: PPUSH
83565: PPUSH
83566: PPUSH
// if not buildings then
83567: LD_VAR 0 1
83571: NOT
83572: IFFALSE 83576
// exit ;
83574: GO 83691
// tmp := [ ] ;
83576: LD_ADDR_VAR 0 5
83580: PUSH
83581: EMPTY
83582: ST_TO_ADDR
// for b in buildings do
83583: LD_ADDR_VAR 0 4
83587: PUSH
83588: LD_VAR 0 1
83592: PUSH
83593: FOR_IN
83594: IFFALSE 83632
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
83596: LD_ADDR_VAR 0 5
83600: PUSH
83601: LD_VAR 0 5
83605: PPUSH
83606: LD_VAR 0 5
83610: PUSH
83611: LD_INT 1
83613: PLUS
83614: PPUSH
83615: LD_VAR 0 4
83619: PPUSH
83620: CALL_OW 266
83624: PPUSH
83625: CALL_OW 1
83629: ST_TO_ADDR
83630: GO 83593
83632: POP
83633: POP
// if not tmp then
83634: LD_VAR 0 5
83638: NOT
83639: IFFALSE 83643
// exit ;
83641: GO 83691
// if asc then
83643: LD_VAR 0 2
83647: IFFALSE 83671
// result := SortListByListAsc ( buildings , tmp ) else
83649: LD_ADDR_VAR 0 3
83653: PUSH
83654: LD_VAR 0 1
83658: PPUSH
83659: LD_VAR 0 5
83663: PPUSH
83664: CALL_OW 76
83668: ST_TO_ADDR
83669: GO 83691
// result := SortListByListDesc ( buildings , tmp ) ;
83671: LD_ADDR_VAR 0 3
83675: PUSH
83676: LD_VAR 0 1
83680: PPUSH
83681: LD_VAR 0 5
83685: PPUSH
83686: CALL_OW 77
83690: ST_TO_ADDR
// end ;
83691: LD_VAR 0 3
83695: RET
// export function SortByClass ( units , class ) ; var un ; begin
83696: LD_INT 0
83698: PPUSH
83699: PPUSH
// if not units or not class then
83700: LD_VAR 0 1
83704: NOT
83705: IFTRUE 83714
83707: PUSH
83708: LD_VAR 0 2
83712: NOT
83713: OR
83714: IFFALSE 83718
// exit ;
83716: GO 83813
// result := [ ] ;
83718: LD_ADDR_VAR 0 3
83722: PUSH
83723: EMPTY
83724: ST_TO_ADDR
// for un in units do
83725: LD_ADDR_VAR 0 4
83729: PUSH
83730: LD_VAR 0 1
83734: PUSH
83735: FOR_IN
83736: IFFALSE 83811
// if GetClass ( un ) = class then
83738: LD_VAR 0 4
83742: PPUSH
83743: CALL_OW 257
83747: PUSH
83748: LD_VAR 0 2
83752: EQUAL
83753: IFFALSE 83780
// result := Insert ( result , 1 , un ) else
83755: LD_ADDR_VAR 0 3
83759: PUSH
83760: LD_VAR 0 3
83764: PPUSH
83765: LD_INT 1
83767: PPUSH
83768: LD_VAR 0 4
83772: PPUSH
83773: CALL_OW 2
83777: ST_TO_ADDR
83778: GO 83809
// result := Replace ( result , result + 1 , un ) ;
83780: LD_ADDR_VAR 0 3
83784: PUSH
83785: LD_VAR 0 3
83789: PPUSH
83790: LD_VAR 0 3
83794: PUSH
83795: LD_INT 1
83797: PLUS
83798: PPUSH
83799: LD_VAR 0 4
83803: PPUSH
83804: CALL_OW 1
83808: ST_TO_ADDR
83809: GO 83735
83811: POP
83812: POP
// end ;
83813: LD_VAR 0 3
83817: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83818: LD_INT 0
83820: PPUSH
83821: PPUSH
83822: PPUSH
83823: PPUSH
83824: PPUSH
83825: PPUSH
83826: PPUSH
// result := [ ] ;
83827: LD_ADDR_VAR 0 4
83831: PUSH
83832: EMPTY
83833: ST_TO_ADDR
// if x - r < 0 then
83834: LD_VAR 0 1
83838: PUSH
83839: LD_VAR 0 3
83843: MINUS
83844: PUSH
83845: LD_INT 0
83847: LESS
83848: IFFALSE 83860
// min_x := 0 else
83850: LD_ADDR_VAR 0 8
83854: PUSH
83855: LD_INT 0
83857: ST_TO_ADDR
83858: GO 83876
// min_x := x - r ;
83860: LD_ADDR_VAR 0 8
83864: PUSH
83865: LD_VAR 0 1
83869: PUSH
83870: LD_VAR 0 3
83874: MINUS
83875: ST_TO_ADDR
// if y - r < 0 then
83876: LD_VAR 0 2
83880: PUSH
83881: LD_VAR 0 3
83885: MINUS
83886: PUSH
83887: LD_INT 0
83889: LESS
83890: IFFALSE 83902
// min_y := 0 else
83892: LD_ADDR_VAR 0 7
83896: PUSH
83897: LD_INT 0
83899: ST_TO_ADDR
83900: GO 83918
// min_y := y - r ;
83902: LD_ADDR_VAR 0 7
83906: PUSH
83907: LD_VAR 0 2
83911: PUSH
83912: LD_VAR 0 3
83916: MINUS
83917: ST_TO_ADDR
// max_x := x + r ;
83918: LD_ADDR_VAR 0 9
83922: PUSH
83923: LD_VAR 0 1
83927: PUSH
83928: LD_VAR 0 3
83932: PLUS
83933: ST_TO_ADDR
// max_y := y + r ;
83934: LD_ADDR_VAR 0 10
83938: PUSH
83939: LD_VAR 0 2
83943: PUSH
83944: LD_VAR 0 3
83948: PLUS
83949: ST_TO_ADDR
// for _x = min_x to max_x do
83950: LD_ADDR_VAR 0 5
83954: PUSH
83955: DOUBLE
83956: LD_VAR 0 8
83960: DEC
83961: ST_TO_ADDR
83962: LD_VAR 0 9
83966: PUSH
83967: FOR_TO
83968: IFFALSE 84069
// for _y = min_y to max_y do
83970: LD_ADDR_VAR 0 6
83974: PUSH
83975: DOUBLE
83976: LD_VAR 0 7
83980: DEC
83981: ST_TO_ADDR
83982: LD_VAR 0 10
83986: PUSH
83987: FOR_TO
83988: IFFALSE 84065
// begin if not ValidHex ( _x , _y ) then
83990: LD_VAR 0 5
83994: PPUSH
83995: LD_VAR 0 6
83999: PPUSH
84000: CALL_OW 488
84004: NOT
84005: IFFALSE 84009
// continue ;
84007: GO 83987
// if GetResourceTypeXY ( _x , _y ) then
84009: LD_VAR 0 5
84013: PPUSH
84014: LD_VAR 0 6
84018: PPUSH
84019: CALL_OW 283
84023: IFFALSE 84063
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84025: LD_ADDR_VAR 0 4
84029: PUSH
84030: LD_VAR 0 4
84034: PPUSH
84035: LD_VAR 0 4
84039: PUSH
84040: LD_INT 1
84042: PLUS
84043: PPUSH
84044: LD_VAR 0 5
84048: PUSH
84049: LD_VAR 0 6
84053: PUSH
84054: EMPTY
84055: LIST
84056: LIST
84057: PPUSH
84058: CALL_OW 1
84062: ST_TO_ADDR
// end ;
84063: GO 83987
84065: POP
84066: POP
84067: GO 83967
84069: POP
84070: POP
// end ;
84071: LD_VAR 0 4
84075: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84076: LD_INT 0
84078: PPUSH
84079: PPUSH
84080: PPUSH
84081: PPUSH
84082: PPUSH
84083: PPUSH
84084: PPUSH
84085: PPUSH
// if not units then
84086: LD_VAR 0 1
84090: NOT
84091: IFFALSE 84095
// exit ;
84093: GO 84627
// result := UnitFilter ( units , [ f_ok ] ) ;
84095: LD_ADDR_VAR 0 3
84099: PUSH
84100: LD_VAR 0 1
84104: PPUSH
84105: LD_INT 50
84107: PUSH
84108: EMPTY
84109: LIST
84110: PPUSH
84111: CALL_OW 72
84115: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84116: LD_ADDR_VAR 0 8
84120: PUSH
84121: LD_VAR 0 1
84125: PUSH
84126: LD_INT 1
84128: ARRAY
84129: PPUSH
84130: CALL_OW 255
84134: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
84135: LD_ADDR_VAR 0 10
84139: PUSH
84140: LD_INT 29
84142: PUSH
84143: LD_INT 91
84145: PUSH
84146: LD_INT 49
84148: PUSH
84149: EMPTY
84150: LIST
84151: LIST
84152: LIST
84153: ST_TO_ADDR
// if not result then
84154: LD_VAR 0 3
84158: NOT
84159: IFFALSE 84163
// exit ;
84161: GO 84627
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84163: LD_ADDR_VAR 0 5
84167: PUSH
84168: LD_INT 81
84170: PUSH
84171: LD_VAR 0 8
84175: PUSH
84176: EMPTY
84177: LIST
84178: LIST
84179: PPUSH
84180: CALL_OW 69
84184: ST_TO_ADDR
// for i in result do
84185: LD_ADDR_VAR 0 4
84189: PUSH
84190: LD_VAR 0 3
84194: PUSH
84195: FOR_IN
84196: IFFALSE 84625
// begin tag := GetTag ( i ) + 1 ;
84198: LD_ADDR_VAR 0 9
84202: PUSH
84203: LD_VAR 0 4
84207: PPUSH
84208: CALL_OW 110
84212: PUSH
84213: LD_INT 1
84215: PLUS
84216: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
84217: LD_ADDR_VAR 0 7
84221: PUSH
84222: LD_VAR 0 4
84226: PPUSH
84227: CALL_OW 250
84231: PPUSH
84232: LD_VAR 0 4
84236: PPUSH
84237: CALL_OW 251
84241: PPUSH
84242: LD_INT 4
84244: PPUSH
84245: CALL 83818 0 3
84249: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
84250: LD_VAR 0 4
84254: PPUSH
84255: CALL_OW 247
84259: PUSH
84260: LD_INT 2
84262: EQUAL
84263: IFFALSE 84275
84265: PUSH
84266: LD_VAR 0 7
84270: PUSH
84271: LD_INT 2
84273: GREATER
84274: AND
84275: IFFALSE 84295
84277: PUSH
84278: LD_VAR 0 4
84282: PPUSH
84283: CALL_OW 264
84287: PUSH
84288: LD_VAR 0 10
84292: IN
84293: NOT
84294: AND
84295: IFFALSE 84334
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84297: LD_VAR 0 4
84301: PPUSH
84302: LD_VAR 0 7
84306: PUSH
84307: LD_INT 1
84309: ARRAY
84310: PUSH
84311: LD_INT 1
84313: ARRAY
84314: PPUSH
84315: LD_VAR 0 7
84319: PUSH
84320: LD_INT 1
84322: ARRAY
84323: PUSH
84324: LD_INT 2
84326: ARRAY
84327: PPUSH
84328: CALL_OW 116
84332: GO 84623
// if path > tag then
84334: LD_VAR 0 2
84338: PUSH
84339: LD_VAR 0 9
84343: GREATER
84344: IFFALSE 84552
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84346: LD_ADDR_VAR 0 6
84350: PUSH
84351: LD_VAR 0 5
84355: PPUSH
84356: LD_INT 91
84358: PUSH
84359: LD_VAR 0 4
84363: PUSH
84364: LD_INT 8
84366: PUSH
84367: EMPTY
84368: LIST
84369: LIST
84370: LIST
84371: PPUSH
84372: CALL_OW 72
84376: ST_TO_ADDR
// if nearEnemy then
84377: LD_VAR 0 6
84381: IFFALSE 84450
// begin if GetWeapon ( i ) = ru_time_lapser then
84383: LD_VAR 0 4
84387: PPUSH
84388: CALL_OW 264
84392: PUSH
84393: LD_INT 49
84395: EQUAL
84396: IFFALSE 84424
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84398: LD_VAR 0 4
84402: PPUSH
84403: LD_VAR 0 6
84407: PPUSH
84408: LD_VAR 0 4
84412: PPUSH
84413: CALL_OW 74
84417: PPUSH
84418: CALL_OW 112
84422: GO 84448
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84424: LD_VAR 0 4
84428: PPUSH
84429: LD_VAR 0 6
84433: PPUSH
84434: LD_VAR 0 4
84438: PPUSH
84439: CALL_OW 74
84443: PPUSH
84444: CALL 85708 0 2
// end else
84448: GO 84550
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84450: LD_VAR 0 4
84454: PPUSH
84455: LD_VAR 0 2
84459: PUSH
84460: LD_VAR 0 9
84464: ARRAY
84465: PUSH
84466: LD_INT 1
84468: ARRAY
84469: PPUSH
84470: LD_VAR 0 2
84474: PUSH
84475: LD_VAR 0 9
84479: ARRAY
84480: PUSH
84481: LD_INT 2
84483: ARRAY
84484: PPUSH
84485: CALL_OW 297
84489: PUSH
84490: LD_INT 6
84492: GREATER
84493: IFFALSE 84536
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84495: LD_VAR 0 4
84499: PPUSH
84500: LD_VAR 0 2
84504: PUSH
84505: LD_VAR 0 9
84509: ARRAY
84510: PUSH
84511: LD_INT 1
84513: ARRAY
84514: PPUSH
84515: LD_VAR 0 2
84519: PUSH
84520: LD_VAR 0 9
84524: ARRAY
84525: PUSH
84526: LD_INT 2
84528: ARRAY
84529: PPUSH
84530: CALL_OW 114
84534: GO 84550
// SetTag ( i , tag ) ;
84536: LD_VAR 0 4
84540: PPUSH
84541: LD_VAR 0 9
84545: PPUSH
84546: CALL_OW 109
// end else
84550: GO 84623
// if enemy then
84552: LD_VAR 0 5
84556: IFFALSE 84623
// begin if GetWeapon ( i ) = ru_time_lapser then
84558: LD_VAR 0 4
84562: PPUSH
84563: CALL_OW 264
84567: PUSH
84568: LD_INT 49
84570: EQUAL
84571: IFFALSE 84599
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84573: LD_VAR 0 4
84577: PPUSH
84578: LD_VAR 0 5
84582: PPUSH
84583: LD_VAR 0 4
84587: PPUSH
84588: CALL_OW 74
84592: PPUSH
84593: CALL_OW 112
84597: GO 84623
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84599: LD_VAR 0 4
84603: PPUSH
84604: LD_VAR 0 5
84608: PPUSH
84609: LD_VAR 0 4
84613: PPUSH
84614: CALL_OW 74
84618: PPUSH
84619: CALL 85708 0 2
// end ; end ;
84623: GO 84195
84625: POP
84626: POP
// end ;
84627: LD_VAR 0 3
84631: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84632: LD_INT 0
84634: PPUSH
84635: PPUSH
84636: PPUSH
// if not unit or IsInUnit ( unit ) then
84637: LD_VAR 0 1
84641: NOT
84642: IFTRUE 84655
84644: PUSH
84645: LD_VAR 0 1
84649: PPUSH
84650: CALL_OW 310
84654: OR
84655: IFFALSE 84659
// exit ;
84657: GO 84750
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84659: LD_ADDR_VAR 0 4
84663: PUSH
84664: LD_VAR 0 1
84668: PPUSH
84669: CALL_OW 250
84673: PPUSH
84674: LD_VAR 0 2
84678: PPUSH
84679: LD_INT 1
84681: PPUSH
84682: CALL_OW 272
84686: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84687: LD_ADDR_VAR 0 5
84691: PUSH
84692: LD_VAR 0 1
84696: PPUSH
84697: CALL_OW 251
84701: PPUSH
84702: LD_VAR 0 2
84706: PPUSH
84707: LD_INT 1
84709: PPUSH
84710: CALL_OW 273
84714: ST_TO_ADDR
// if ValidHex ( x , y ) then
84715: LD_VAR 0 4
84719: PPUSH
84720: LD_VAR 0 5
84724: PPUSH
84725: CALL_OW 488
84729: IFFALSE 84750
// ComTurnXY ( unit , x , y ) ;
84731: LD_VAR 0 1
84735: PPUSH
84736: LD_VAR 0 4
84740: PPUSH
84741: LD_VAR 0 5
84745: PPUSH
84746: CALL_OW 118
// end ;
84750: LD_VAR 0 3
84754: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84755: LD_INT 0
84757: PPUSH
84758: PPUSH
// result := false ;
84759: LD_ADDR_VAR 0 3
84763: PUSH
84764: LD_INT 0
84766: ST_TO_ADDR
// if not units then
84767: LD_VAR 0 2
84771: NOT
84772: IFFALSE 84776
// exit ;
84774: GO 84821
// for i in units do
84776: LD_ADDR_VAR 0 4
84780: PUSH
84781: LD_VAR 0 2
84785: PUSH
84786: FOR_IN
84787: IFFALSE 84819
// if See ( side , i ) then
84789: LD_VAR 0 1
84793: PPUSH
84794: LD_VAR 0 4
84798: PPUSH
84799: CALL_OW 292
84803: IFFALSE 84817
// begin result := true ;
84805: LD_ADDR_VAR 0 3
84809: PUSH
84810: LD_INT 1
84812: ST_TO_ADDR
// exit ;
84813: POP
84814: POP
84815: GO 84821
// end ;
84817: GO 84786
84819: POP
84820: POP
// end ;
84821: LD_VAR 0 3
84825: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84826: LD_INT 0
84828: PPUSH
84829: PPUSH
84830: PPUSH
84831: PPUSH
// if not unit or not points then
84832: LD_VAR 0 1
84836: NOT
84837: IFTRUE 84846
84839: PUSH
84840: LD_VAR 0 2
84844: NOT
84845: OR
84846: IFFALSE 84850
// exit ;
84848: GO 84940
// dist := 99999 ;
84850: LD_ADDR_VAR 0 5
84854: PUSH
84855: LD_INT 99999
84857: ST_TO_ADDR
// for i in points do
84858: LD_ADDR_VAR 0 4
84862: PUSH
84863: LD_VAR 0 2
84867: PUSH
84868: FOR_IN
84869: IFFALSE 84938
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84871: LD_ADDR_VAR 0 6
84875: PUSH
84876: LD_VAR 0 1
84880: PPUSH
84881: LD_VAR 0 4
84885: PUSH
84886: LD_INT 1
84888: ARRAY
84889: PPUSH
84890: LD_VAR 0 4
84894: PUSH
84895: LD_INT 2
84897: ARRAY
84898: PPUSH
84899: CALL_OW 297
84903: ST_TO_ADDR
// if tmpDist < dist then
84904: LD_VAR 0 6
84908: PUSH
84909: LD_VAR 0 5
84913: LESS
84914: IFFALSE 84936
// begin result := i ;
84916: LD_ADDR_VAR 0 3
84920: PUSH
84921: LD_VAR 0 4
84925: ST_TO_ADDR
// dist := tmpDist ;
84926: LD_ADDR_VAR 0 5
84930: PUSH
84931: LD_VAR 0 6
84935: ST_TO_ADDR
// end ; end ;
84936: GO 84868
84938: POP
84939: POP
// end ;
84940: LD_VAR 0 3
84944: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84945: LD_INT 0
84947: PPUSH
// uc_side := side ;
84948: LD_ADDR_OWVAR 20
84952: PUSH
84953: LD_VAR 0 1
84957: ST_TO_ADDR
// uc_nation := 3 ;
84958: LD_ADDR_OWVAR 21
84962: PUSH
84963: LD_INT 3
84965: ST_TO_ADDR
// vc_chassis := 25 ;
84966: LD_ADDR_OWVAR 37
84970: PUSH
84971: LD_INT 25
84973: ST_TO_ADDR
// vc_engine := engine_siberite ;
84974: LD_ADDR_OWVAR 39
84978: PUSH
84979: LD_INT 3
84981: ST_TO_ADDR
// vc_control := control_computer ;
84982: LD_ADDR_OWVAR 38
84986: PUSH
84987: LD_INT 3
84989: ST_TO_ADDR
// vc_weapon := 59 ;
84990: LD_ADDR_OWVAR 40
84994: PUSH
84995: LD_INT 59
84997: ST_TO_ADDR
// result := CreateVehicle ;
84998: LD_ADDR_VAR 0 5
85002: PUSH
85003: CALL_OW 45
85007: ST_TO_ADDR
// SetDir ( result , d ) ;
85008: LD_VAR 0 5
85012: PPUSH
85013: LD_VAR 0 4
85017: PPUSH
85018: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
85022: LD_VAR 0 5
85026: PPUSH
85027: LD_VAR 0 2
85031: PPUSH
85032: LD_VAR 0 3
85036: PPUSH
85037: LD_INT 0
85039: PPUSH
85040: CALL_OW 48
// end ;
85044: LD_VAR 0 5
85048: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
85049: LD_INT 0
85051: PPUSH
85052: PPUSH
85053: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
85054: LD_ADDR_VAR 0 2
85058: PUSH
85059: LD_INT 0
85061: PUSH
85062: LD_INT 0
85064: PUSH
85065: LD_INT 0
85067: PUSH
85068: LD_INT 0
85070: PUSH
85071: EMPTY
85072: LIST
85073: LIST
85074: LIST
85075: LIST
85076: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
85077: LD_VAR 0 1
85081: NOT
85082: IFTRUE 85115
85084: PUSH
85085: LD_VAR 0 1
85089: PPUSH
85090: CALL_OW 264
85094: PUSH
85095: LD_INT 12
85097: PUSH
85098: LD_INT 51
85100: PUSH
85101: LD_INT 32
85103: PUSH
85104: LD_INT 89
85106: PUSH
85107: EMPTY
85108: LIST
85109: LIST
85110: LIST
85111: LIST
85112: IN
85113: NOT
85114: OR
85115: IFFALSE 85119
// exit ;
85117: GO 85217
// for i := 1 to 3 do
85119: LD_ADDR_VAR 0 3
85123: PUSH
85124: DOUBLE
85125: LD_INT 1
85127: DEC
85128: ST_TO_ADDR
85129: LD_INT 3
85131: PUSH
85132: FOR_TO
85133: IFFALSE 85215
// begin tmp := GetCargo ( cargo , i ) ;
85135: LD_ADDR_VAR 0 4
85139: PUSH
85140: LD_VAR 0 1
85144: PPUSH
85145: LD_VAR 0 3
85149: PPUSH
85150: CALL_OW 289
85154: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
85155: LD_ADDR_VAR 0 2
85159: PUSH
85160: LD_VAR 0 2
85164: PPUSH
85165: LD_VAR 0 3
85169: PPUSH
85170: LD_VAR 0 4
85174: PPUSH
85175: CALL_OW 1
85179: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
85180: LD_ADDR_VAR 0 2
85184: PUSH
85185: LD_VAR 0 2
85189: PPUSH
85190: LD_INT 4
85192: PPUSH
85193: LD_VAR 0 2
85197: PUSH
85198: LD_INT 4
85200: ARRAY
85201: PUSH
85202: LD_VAR 0 4
85206: PLUS
85207: PPUSH
85208: CALL_OW 1
85212: ST_TO_ADDR
// end ;
85213: GO 85132
85215: POP
85216: POP
// end ;
85217: LD_VAR 0 2
85221: RET
// export function Length ( array ) ; begin
85222: LD_INT 0
85224: PPUSH
// result := array + 0 ;
85225: LD_ADDR_VAR 0 2
85229: PUSH
85230: LD_VAR 0 1
85234: PUSH
85235: LD_INT 0
85237: PLUS
85238: ST_TO_ADDR
// end ;
85239: LD_VAR 0 2
85243: RET
// export function PrepareArray ( array ) ; begin
85244: LD_INT 0
85246: PPUSH
// result := array diff 0 ;
85247: LD_ADDR_VAR 0 2
85251: PUSH
85252: LD_VAR 0 1
85256: PUSH
85257: LD_INT 0
85259: DIFF
85260: ST_TO_ADDR
// if not result [ 1 ] then
85261: LD_VAR 0 2
85265: PUSH
85266: LD_INT 1
85268: ARRAY
85269: NOT
85270: IFFALSE 85290
// result := Delete ( result , 1 ) ;
85272: LD_ADDR_VAR 0 2
85276: PUSH
85277: LD_VAR 0 2
85281: PPUSH
85282: LD_INT 1
85284: PPUSH
85285: CALL_OW 3
85289: ST_TO_ADDR
// end ;
85290: LD_VAR 0 2
85294: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
85295: LD_INT 0
85297: PPUSH
85298: PPUSH
85299: PPUSH
85300: PPUSH
// sibRocketRange := 25 ;
85301: LD_ADDR_VAR 0 6
85305: PUSH
85306: LD_INT 25
85308: ST_TO_ADDR
// result := false ;
85309: LD_ADDR_VAR 0 4
85313: PUSH
85314: LD_INT 0
85316: ST_TO_ADDR
// for i := 0 to 5 do
85317: LD_ADDR_VAR 0 5
85321: PUSH
85322: DOUBLE
85323: LD_INT 0
85325: DEC
85326: ST_TO_ADDR
85327: LD_INT 5
85329: PUSH
85330: FOR_TO
85331: IFFALSE 85398
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
85333: LD_VAR 0 1
85337: PPUSH
85338: LD_VAR 0 5
85342: PPUSH
85343: LD_VAR 0 6
85347: PPUSH
85348: CALL_OW 272
85352: PPUSH
85353: LD_VAR 0 2
85357: PPUSH
85358: LD_VAR 0 5
85362: PPUSH
85363: LD_VAR 0 6
85367: PPUSH
85368: CALL_OW 273
85372: PPUSH
85373: LD_VAR 0 3
85377: PPUSH
85378: CALL_OW 309
85382: IFFALSE 85396
// begin result := true ;
85384: LD_ADDR_VAR 0 4
85388: PUSH
85389: LD_INT 1
85391: ST_TO_ADDR
// exit ;
85392: POP
85393: POP
85394: GO 85400
// end ;
85396: GO 85330
85398: POP
85399: POP
// end ;
85400: LD_VAR 0 4
85404: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
85405: LD_INT 0
85407: PPUSH
85408: PPUSH
85409: PPUSH
// if btype = b_depot then
85410: LD_VAR 0 2
85414: PUSH
85415: LD_INT 0
85417: EQUAL
85418: IFFALSE 85430
// begin result := true ;
85420: LD_ADDR_VAR 0 3
85424: PUSH
85425: LD_INT 1
85427: ST_TO_ADDR
// exit ;
85428: GO 85550
// end ; pom := GetBase ( depot ) ;
85430: LD_ADDR_VAR 0 4
85434: PUSH
85435: LD_VAR 0 1
85439: PPUSH
85440: CALL_OW 274
85444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
85445: LD_ADDR_VAR 0 5
85449: PUSH
85450: LD_VAR 0 2
85454: PPUSH
85455: LD_VAR 0 1
85459: PPUSH
85460: CALL_OW 248
85464: PPUSH
85465: CALL_OW 450
85469: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
85470: LD_ADDR_VAR 0 3
85474: PUSH
85475: LD_VAR 0 4
85479: PPUSH
85480: LD_INT 1
85482: PPUSH
85483: CALL_OW 275
85487: PUSH
85488: LD_VAR 0 5
85492: PUSH
85493: LD_INT 1
85495: ARRAY
85496: GREATEREQUAL
85497: IFFALSE 85523
85499: PUSH
85500: LD_VAR 0 4
85504: PPUSH
85505: LD_INT 2
85507: PPUSH
85508: CALL_OW 275
85512: PUSH
85513: LD_VAR 0 5
85517: PUSH
85518: LD_INT 2
85520: ARRAY
85521: GREATEREQUAL
85522: AND
85523: IFFALSE 85549
85525: PUSH
85526: LD_VAR 0 4
85530: PPUSH
85531: LD_INT 3
85533: PPUSH
85534: CALL_OW 275
85538: PUSH
85539: LD_VAR 0 5
85543: PUSH
85544: LD_INT 3
85546: ARRAY
85547: GREATEREQUAL
85548: AND
85549: ST_TO_ADDR
// end ;
85550: LD_VAR 0 3
85554: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85555: LD_INT 0
85557: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85558: LD_VAR 0 1
85562: PPUSH
85563: LD_VAR 0 2
85567: PPUSH
85568: LD_INT 0
85570: PPUSH
85571: LD_INT 0
85573: PPUSH
85574: LD_INT 1
85576: PPUSH
85577: LD_INT 0
85579: PPUSH
85580: CALL_OW 587
// end ;
85584: LD_VAR 0 3
85588: RET
// export function CenterOnNow ( unit ) ; begin
85589: LD_INT 0
85591: PPUSH
// result := IsInUnit ( unit ) ;
85592: LD_ADDR_VAR 0 2
85596: PUSH
85597: LD_VAR 0 1
85601: PPUSH
85602: CALL_OW 310
85606: ST_TO_ADDR
// if not result then
85607: LD_VAR 0 2
85611: NOT
85612: IFFALSE 85624
// result := unit ;
85614: LD_ADDR_VAR 0 2
85618: PUSH
85619: LD_VAR 0 1
85623: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85624: LD_VAR 0 1
85628: PPUSH
85629: CALL_OW 87
// end ;
85633: LD_VAR 0 2
85637: RET
// export function ComMoveHex ( unit , hex ) ; begin
85638: LD_INT 0
85640: PPUSH
// if not hex then
85641: LD_VAR 0 2
85645: NOT
85646: IFFALSE 85650
// exit ;
85648: GO 85703
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85650: LD_VAR 0 2
85654: PUSH
85655: LD_INT 1
85657: ARRAY
85658: PPUSH
85659: LD_VAR 0 2
85663: PUSH
85664: LD_INT 2
85666: ARRAY
85667: PPUSH
85668: CALL_OW 428
85672: IFFALSE 85676
// exit ;
85674: GO 85703
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85676: LD_VAR 0 1
85680: PPUSH
85681: LD_VAR 0 2
85685: PUSH
85686: LD_INT 1
85688: ARRAY
85689: PPUSH
85690: LD_VAR 0 2
85694: PUSH
85695: LD_INT 2
85697: ARRAY
85698: PPUSH
85699: CALL_OW 111
// end ;
85703: LD_VAR 0 3
85707: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85708: LD_INT 0
85710: PPUSH
85711: PPUSH
85712: PPUSH
// if not unit or not enemy then
85713: LD_VAR 0 1
85717: NOT
85718: IFTRUE 85727
85720: PUSH
85721: LD_VAR 0 2
85725: NOT
85726: OR
85727: IFFALSE 85731
// exit ;
85729: GO 85857
// x := GetX ( enemy ) ;
85731: LD_ADDR_VAR 0 4
85735: PUSH
85736: LD_VAR 0 2
85740: PPUSH
85741: CALL_OW 250
85745: ST_TO_ADDR
// y := GetY ( enemy ) ;
85746: LD_ADDR_VAR 0 5
85750: PUSH
85751: LD_VAR 0 2
85755: PPUSH
85756: CALL_OW 251
85760: ST_TO_ADDR
// if ValidHex ( x , y ) then
85761: LD_VAR 0 4
85765: PPUSH
85766: LD_VAR 0 5
85770: PPUSH
85771: CALL_OW 488
85775: IFFALSE 85857
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85777: LD_VAR 0 2
85781: PPUSH
85782: CALL_OW 247
85786: PUSH
85787: LD_INT 3
85789: PUSH
85790: LD_INT 2
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: IN
85797: IFTRUE 85820
85799: PUSH
85800: LD_VAR 0 1
85804: PPUSH
85805: CALL_OW 255
85809: PPUSH
85810: LD_VAR 0 2
85814: PPUSH
85815: CALL_OW 292
85819: OR
85820: IFFALSE 85838
// ComAttackUnit ( unit , enemy ) else
85822: LD_VAR 0 1
85826: PPUSH
85827: LD_VAR 0 2
85831: PPUSH
85832: CALL_OW 115
85836: GO 85857
// ComAgressiveMove ( unit , x , y ) ;
85838: LD_VAR 0 1
85842: PPUSH
85843: LD_VAR 0 4
85847: PPUSH
85848: LD_VAR 0 5
85852: PPUSH
85853: CALL_OW 114
// end ;
85857: LD_VAR 0 3
85861: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85862: LD_INT 0
85864: PPUSH
85865: PPUSH
85866: PPUSH
// list := AreaToList ( area , 0 ) ;
85867: LD_ADDR_VAR 0 5
85871: PUSH
85872: LD_VAR 0 1
85876: PPUSH
85877: LD_INT 0
85879: PPUSH
85880: CALL_OW 517
85884: ST_TO_ADDR
// if not list then
85885: LD_VAR 0 5
85889: NOT
85890: IFFALSE 85894
// exit ;
85892: GO 86024
// if all then
85894: LD_VAR 0 2
85898: IFFALSE 85986
// begin for i := 1 to list [ 1 ] do
85900: LD_ADDR_VAR 0 4
85904: PUSH
85905: DOUBLE
85906: LD_INT 1
85908: DEC
85909: ST_TO_ADDR
85910: LD_VAR 0 5
85914: PUSH
85915: LD_INT 1
85917: ARRAY
85918: PUSH
85919: FOR_TO
85920: IFFALSE 85982
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85922: LD_ADDR_VAR 0 3
85926: PUSH
85927: LD_VAR 0 3
85931: PPUSH
85932: LD_VAR 0 3
85936: PUSH
85937: LD_INT 1
85939: PLUS
85940: PPUSH
85941: LD_VAR 0 5
85945: PUSH
85946: LD_INT 1
85948: ARRAY
85949: PUSH
85950: LD_VAR 0 4
85954: ARRAY
85955: PUSH
85956: LD_VAR 0 5
85960: PUSH
85961: LD_INT 2
85963: ARRAY
85964: PUSH
85965: LD_VAR 0 4
85969: ARRAY
85970: PUSH
85971: EMPTY
85972: LIST
85973: LIST
85974: PPUSH
85975: CALL_OW 1
85979: ST_TO_ADDR
85980: GO 85919
85982: POP
85983: POP
// exit ;
85984: GO 86024
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85986: LD_ADDR_VAR 0 3
85990: PUSH
85991: LD_VAR 0 5
85995: PUSH
85996: LD_INT 1
85998: ARRAY
85999: PUSH
86000: LD_INT 1
86002: ARRAY
86003: PUSH
86004: LD_VAR 0 5
86008: PUSH
86009: LD_INT 2
86011: ARRAY
86012: PUSH
86013: LD_INT 1
86015: ARRAY
86016: PUSH
86017: EMPTY
86018: LIST
86019: LIST
86020: PUSH
86021: EMPTY
86022: LIST
86023: ST_TO_ADDR
// end ;
86024: LD_VAR 0 3
86028: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
86029: LD_INT 0
86031: PPUSH
86032: PPUSH
// list := AreaToList ( area , 0 ) ;
86033: LD_ADDR_VAR 0 4
86037: PUSH
86038: LD_VAR 0 1
86042: PPUSH
86043: LD_INT 0
86045: PPUSH
86046: CALL_OW 517
86050: ST_TO_ADDR
// if not list then
86051: LD_VAR 0 4
86055: NOT
86056: IFFALSE 86060
// exit ;
86058: GO 86101
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
86060: LD_ADDR_VAR 0 3
86064: PUSH
86065: LD_VAR 0 4
86069: PUSH
86070: LD_INT 1
86072: ARRAY
86073: PUSH
86074: LD_INT 1
86076: ARRAY
86077: PUSH
86078: LD_VAR 0 4
86082: PUSH
86083: LD_INT 2
86085: ARRAY
86086: PUSH
86087: LD_INT 1
86089: ARRAY
86090: PUSH
86091: LD_VAR 0 2
86095: PUSH
86096: EMPTY
86097: LIST
86098: LIST
86099: LIST
86100: ST_TO_ADDR
// end ;
86101: LD_VAR 0 3
86105: RET
// export function First ( array ) ; begin
86106: LD_INT 0
86108: PPUSH
// if not array then
86109: LD_VAR 0 1
86113: NOT
86114: IFFALSE 86118
// exit ;
86116: GO 86132
// result := array [ 1 ] ;
86118: LD_ADDR_VAR 0 2
86122: PUSH
86123: LD_VAR 0 1
86127: PUSH
86128: LD_INT 1
86130: ARRAY
86131: ST_TO_ADDR
// end ;
86132: LD_VAR 0 2
86136: RET
// export function Last ( array ) ; begin
86137: LD_INT 0
86139: PPUSH
// if not array then
86140: LD_VAR 0 1
86144: NOT
86145: IFFALSE 86149
// exit ;
86147: GO 86165
// result := array [ array ] ;
86149: LD_ADDR_VAR 0 2
86153: PUSH
86154: LD_VAR 0 1
86158: PUSH
86159: LD_VAR 0 1
86163: ARRAY
86164: ST_TO_ADDR
// end ;
86165: LD_VAR 0 2
86169: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
86170: LD_INT 0
86172: PPUSH
86173: PPUSH
// result := [ ] ;
86174: LD_ADDR_VAR 0 5
86178: PUSH
86179: EMPTY
86180: ST_TO_ADDR
// if not array then
86181: LD_VAR 0 1
86185: NOT
86186: IFFALSE 86190
// exit ;
86188: GO 86302
// for i := 1 to array do
86190: LD_ADDR_VAR 0 6
86194: PUSH
86195: DOUBLE
86196: LD_INT 1
86198: DEC
86199: ST_TO_ADDR
86200: LD_VAR 0 1
86204: PUSH
86205: FOR_TO
86206: IFFALSE 86300
// if array [ i ] [ index ] = value then
86208: LD_VAR 0 1
86212: PUSH
86213: LD_VAR 0 6
86217: ARRAY
86218: PUSH
86219: LD_VAR 0 2
86223: ARRAY
86224: PUSH
86225: LD_VAR 0 3
86229: EQUAL
86230: IFFALSE 86298
// begin if indexColumn then
86232: LD_VAR 0 4
86236: IFFALSE 86272
// result := Join ( result , array [ i ] [ indexColumn ] ) else
86238: LD_ADDR_VAR 0 5
86242: PUSH
86243: LD_VAR 0 5
86247: PPUSH
86248: LD_VAR 0 1
86252: PUSH
86253: LD_VAR 0 6
86257: ARRAY
86258: PUSH
86259: LD_VAR 0 4
86263: ARRAY
86264: PPUSH
86265: CALL 81310 0 2
86269: ST_TO_ADDR
86270: GO 86298
// result := Join ( result , array [ i ] ) ;
86272: LD_ADDR_VAR 0 5
86276: PUSH
86277: LD_VAR 0 5
86281: PPUSH
86282: LD_VAR 0 1
86286: PUSH
86287: LD_VAR 0 6
86291: ARRAY
86292: PPUSH
86293: CALL 81310 0 2
86297: ST_TO_ADDR
// end ;
86298: GO 86205
86300: POP
86301: POP
// end ;
86302: LD_VAR 0 5
86306: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
86307: LD_INT 0
86309: PPUSH
// if not vehicles or not parkingPoint then
86310: LD_VAR 0 1
86314: NOT
86315: IFTRUE 86324
86317: PUSH
86318: LD_VAR 0 2
86322: NOT
86323: OR
86324: IFFALSE 86328
// exit ;
86326: GO 86426
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
86328: LD_ADDR_VAR 0 1
86332: PUSH
86333: LD_VAR 0 1
86337: PPUSH
86338: LD_INT 50
86340: PUSH
86341: EMPTY
86342: LIST
86343: PUSH
86344: LD_INT 3
86346: PUSH
86347: LD_INT 92
86349: PUSH
86350: LD_VAR 0 2
86354: PUSH
86355: LD_INT 1
86357: ARRAY
86358: PUSH
86359: LD_VAR 0 2
86363: PUSH
86364: LD_INT 2
86366: ARRAY
86367: PUSH
86368: LD_INT 8
86370: PUSH
86371: EMPTY
86372: LIST
86373: LIST
86374: LIST
86375: LIST
86376: PUSH
86377: EMPTY
86378: LIST
86379: LIST
86380: PUSH
86381: EMPTY
86382: LIST
86383: LIST
86384: PPUSH
86385: CALL_OW 72
86389: ST_TO_ADDR
// if not vehicles then
86390: LD_VAR 0 1
86394: NOT
86395: IFFALSE 86399
// exit ;
86397: GO 86426
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
86399: LD_VAR 0 1
86403: PPUSH
86404: LD_VAR 0 2
86408: PUSH
86409: LD_INT 1
86411: ARRAY
86412: PPUSH
86413: LD_VAR 0 2
86417: PUSH
86418: LD_INT 2
86420: ARRAY
86421: PPUSH
86422: CALL_OW 111
// end ;
86426: LD_VAR 0 3
86430: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
86431: LD_INT 0
86433: PPUSH
86434: PPUSH
86435: PPUSH
// if not side or not area then
86436: LD_VAR 0 1
86440: NOT
86441: IFTRUE 86450
86443: PUSH
86444: LD_VAR 0 2
86448: NOT
86449: OR
86450: IFFALSE 86454
// exit ;
86452: GO 86573
// tmp := AreaToList ( area , 0 ) ;
86454: LD_ADDR_VAR 0 5
86458: PUSH
86459: LD_VAR 0 2
86463: PPUSH
86464: LD_INT 0
86466: PPUSH
86467: CALL_OW 517
86471: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
86472: LD_ADDR_VAR 0 4
86476: PUSH
86477: DOUBLE
86478: LD_INT 1
86480: DEC
86481: ST_TO_ADDR
86482: LD_VAR 0 5
86486: PUSH
86487: LD_INT 1
86489: ARRAY
86490: PUSH
86491: FOR_TO
86492: IFFALSE 86571
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
86494: LD_VAR 0 5
86498: PUSH
86499: LD_INT 1
86501: ARRAY
86502: PUSH
86503: LD_VAR 0 4
86507: ARRAY
86508: PPUSH
86509: LD_VAR 0 5
86513: PUSH
86514: LD_INT 2
86516: ARRAY
86517: PUSH
86518: LD_VAR 0 4
86522: ARRAY
86523: PPUSH
86524: CALL_OW 351
86528: IFFALSE 86569
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
86530: LD_VAR 0 5
86534: PUSH
86535: LD_INT 1
86537: ARRAY
86538: PUSH
86539: LD_VAR 0 4
86543: ARRAY
86544: PPUSH
86545: LD_VAR 0 5
86549: PUSH
86550: LD_INT 2
86552: ARRAY
86553: PUSH
86554: LD_VAR 0 4
86558: ARRAY
86559: PPUSH
86560: LD_VAR 0 1
86564: PPUSH
86565: CALL_OW 244
// end ;
86569: GO 86491
86571: POP
86572: POP
// end ;
86573: LD_VAR 0 3
86577: RET
// export function UniqueArray ( array ) ; var i ; begin
86578: LD_INT 0
86580: PPUSH
86581: PPUSH
// result := [ ] ;
86582: LD_ADDR_VAR 0 2
86586: PUSH
86587: EMPTY
86588: ST_TO_ADDR
// if not array then
86589: LD_VAR 0 1
86593: NOT
86594: IFFALSE 86598
// exit ;
86596: GO 86659
// for i := 1 to array do
86598: LD_ADDR_VAR 0 3
86602: PUSH
86603: DOUBLE
86604: LD_INT 1
86606: DEC
86607: ST_TO_ADDR
86608: LD_VAR 0 1
86612: PUSH
86613: FOR_TO
86614: IFFALSE 86657
// if not array [ i ] in result then
86616: LD_VAR 0 1
86620: PUSH
86621: LD_VAR 0 3
86625: ARRAY
86626: PUSH
86627: LD_VAR 0 2
86631: IN
86632: NOT
86633: IFFALSE 86655
// result := Join ( result , i ) ;
86635: LD_ADDR_VAR 0 2
86639: PUSH
86640: LD_VAR 0 2
86644: PPUSH
86645: LD_VAR 0 3
86649: PPUSH
86650: CALL 81310 0 2
86654: ST_TO_ADDR
86655: GO 86613
86657: POP
86658: POP
// end ; end_of_file
86659: LD_VAR 0 2
86663: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86664: LD_VAR 0 1
86668: PUSH
86669: LD_INT 200
86671: DOUBLE
86672: GREATEREQUAL
86673: IFFALSE 86681
86675: LD_INT 299
86677: DOUBLE
86678: LESSEQUAL
86679: IFTRUE 86683
86681: GO 86715
86683: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86684: LD_VAR 0 1
86688: PPUSH
86689: LD_VAR 0 2
86693: PPUSH
86694: LD_VAR 0 3
86698: PPUSH
86699: LD_VAR 0 4
86703: PPUSH
86704: LD_VAR 0 5
86708: PPUSH
86709: CALL 37496 0 5
86713: GO 86792
86715: LD_INT 300
86717: DOUBLE
86718: GREATEREQUAL
86719: IFFALSE 86727
86721: LD_INT 399
86723: DOUBLE
86724: LESSEQUAL
86725: IFTRUE 86729
86727: GO 86791
86729: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86730: LD_VAR 0 1
86734: PPUSH
86735: LD_VAR 0 2
86739: PPUSH
86740: LD_VAR 0 3
86744: PPUSH
86745: LD_VAR 0 4
86749: PPUSH
86750: LD_VAR 0 5
86754: PPUSH
86755: LD_VAR 0 6
86759: PPUSH
86760: LD_VAR 0 7
86764: PPUSH
86765: LD_VAR 0 8
86769: PPUSH
86770: LD_VAR 0 9
86774: PPUSH
86775: LD_VAR 0 10
86779: PPUSH
86780: LD_VAR 0 11
86784: PPUSH
86785: CALL 33299 0 11
86789: GO 86792
86791: POP
// end ;
86792: PPOPN 11
86794: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86795: LD_VAR 0 1
86799: PPUSH
86800: LD_VAR 0 2
86804: PPUSH
86805: LD_VAR 0 3
86809: PPUSH
86810: LD_VAR 0 4
86814: PPUSH
86815: LD_VAR 0 5
86819: PPUSH
86820: CALL 36796 0 5
// end ; end_of_file
86824: PPOPN 5
86826: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86827: LD_VAR 0 1
86831: PPUSH
86832: LD_VAR 0 2
86836: PPUSH
86837: LD_VAR 0 3
86841: PPUSH
86842: LD_VAR 0 4
86846: PPUSH
86847: LD_VAR 0 5
86851: PPUSH
86852: LD_VAR 0 6
86856: PPUSH
86857: CALL 20839 0 6
// end ;
86861: PPOPN 6
86863: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86864: LD_INT 0
86866: PPUSH
// begin if not units then
86867: LD_VAR 0 1
86871: NOT
86872: IFFALSE 86876
// exit ;
86874: GO 86910
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86876: LD_VAR 0 1
86880: PPUSH
86881: LD_VAR 0 2
86885: PPUSH
86886: LD_VAR 0 3
86890: PPUSH
86891: LD_VAR 0 4
86895: PPUSH
86896: LD_VAR 0 5
86900: PPUSH
86901: LD_VAR 0 6
86905: PPUSH
86906: CALL 43093 0 6
// end ;
86910: PPOPN 7
86912: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86913: CALL 20726 0 0
// end ;
86917: PPOPN 1
86919: END
