// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 6973 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2109 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5778 0 0
// PrepareRussians ;
 229: CALL 6096 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8238 0 6
// PrepareCutsceneAttack ;
 312: CALL 5830 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 593
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6514 0 2
 577: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 5
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ; if gammaCommander = 2 then
 593: LD_EXP 12
 597: PUSH
 598: LD_INT 2
 600: EQUAL
 601: IFFALSE 634
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 603: LD_ADDR_EXP 2
 607: PUSH
 608: LD_STRING 04_Brown
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 6514 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 619: LD_EXP 2
 623: PPUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// end ; if gammaCommander = 3 then
 634: LD_EXP 12
 638: PUSH
 639: LD_INT 3
 641: EQUAL
 642: IFFALSE 675
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 644: LD_ADDR_EXP 13
 648: PUSH
 649: LD_STRING VanHouten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6514 0 2
 659: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 660: LD_EXP 13
 664: PPUSH
 665: LD_INT 5
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 675: LD_ADDR_EXP 22
 679: PUSH
 680: LD_STRING Harisson
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL 6514 0 2
 690: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 691: LD_ADDR_EXP 23
 695: PUSH
 696: LD_STRING Powell
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 6514 0 2
 706: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 707: LD_STRING 04_Lisa
 709: PUSH
 710: EMPTY
 711: LIST
 712: PPUSH
 713: CALL_OW 28
 717: PUSH
 718: LD_STRING LisaInDelta
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL_OW 30
 728: NOT
 729: AND
 730: PUSH
 731: LD_STRING 07_Lisa
 733: PUSH
 734: EMPTY
 735: LIST
 736: PPUSH
 737: CALL_OW 28
 741: NOT
 742: AND
 743: IFFALSE 777
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 745: LD_ADDR_EXP 6
 749: PUSH
 750: LD_STRING 04_Lisa
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6514 0 2
 760: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 761: LD_ADDR_VAR 0 15
 765: PUSH
 766: LD_VAR 0 15
 770: PUSH
 771: LD_EXP 6
 775: ADD
 776: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 777: LD_STRING 04_Bobby
 779: PUSH
 780: EMPTY
 781: LIST
 782: PPUSH
 783: CALL_OW 28
 787: PUSH
 788: LD_STRING BobbyInDelta
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 30
 798: NOT
 799: AND
 800: PUSH
 801: LD_STRING 07_Bobby
 803: PUSH
 804: EMPTY
 805: LIST
 806: PPUSH
 807: CALL_OW 28
 811: NOT
 812: AND
 813: IFFALSE 847
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 815: LD_ADDR_EXP 4
 819: PUSH
 820: LD_STRING 04_Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6514 0 2
 830: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 831: LD_ADDR_VAR 0 15
 835: PUSH
 836: LD_VAR 0 15
 840: PUSH
 841: LD_EXP 4
 845: ADD
 846: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 847: LD_STRING 04_Cyrus
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: PUSH
 858: LD_STRING CyrusInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Cyrus
 873: PUSH
 874: EMPTY
 875: LIST
 876: PPUSH
 877: CALL_OW 28
 881: NOT
 882: AND
 883: IFFALSE 917
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 885: LD_ADDR_EXP 5
 889: PUSH
 890: LD_STRING 04_Cyrus
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 6514 0 2
 900: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
 901: LD_ADDR_VAR 0 15
 905: PUSH
 906: LD_VAR 0 15
 910: PUSH
 911: LD_EXP 5
 915: ADD
 916: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
 917: LD_STRING 04_Brown
 919: PUSH
 920: EMPTY
 921: LIST
 922: PPUSH
 923: CALL_OW 28
 927: PUSH
 928: LD_STRING BrownInDelta
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 30
 938: NOT
 939: AND
 940: PUSH
 941: LD_STRING 07_Brown
 943: PUSH
 944: EMPTY
 945: LIST
 946: PPUSH
 947: CALL_OW 28
 951: NOT
 952: AND
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_INT 2
 961: NONEQUAL
 962: AND
 963: IFFALSE 997
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
 965: LD_ADDR_EXP 2
 969: PUSH
 970: LD_STRING 04_Brown
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 6514 0 2
 980: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
 981: LD_ADDR_VAR 0 15
 985: PUSH
 986: LD_VAR 0 15
 990: PUSH
 991: LD_EXP 2
 995: ADD
 996: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
 997: LD_STRING 04_Donaldson
 999: PUSH
1000: EMPTY
1001: LIST
1002: PPUSH
1003: CALL_OW 28
1007: PUSH
1008: LD_STRING DonaldsonInDelta
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 30
1018: NOT
1019: AND
1020: PUSH
1021: LD_STRING 07_Donaldson
1023: PUSH
1024: EMPTY
1025: LIST
1026: PPUSH
1027: CALL_OW 28
1031: NOT
1032: AND
1033: PUSH
1034: LD_EXP 12
1038: PUSH
1039: LD_INT 1
1041: NONEQUAL
1042: AND
1043: IFFALSE 1077
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: LD_STRING 04_Donaldson
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6514 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 3
1075: ADD
1076: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1077: LD_ADDR_EXP 11
1081: PUSH
1082: LD_STRING 07_othersGamma
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1090: LD_ADDR_VAR 0 14
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_EXP 11
1102: MINUS
1103: ST_TO_ADDR
// if tmp then
1104: LD_VAR 0 14
1108: IFFALSE 1161
// for i = 1 to tmp do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_VAR 0 14
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1159
// begin PrepareHuman ( false , 1 , 5 ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_INT 1
1133: PPUSH
1134: LD_INT 5
1136: PPUSH
1137: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: CALL_OW 44
1155: ADD
1156: ST_TO_ADDR
// end ;
1157: GO 1125
1159: POP
1160: POP
// if HexInfo ( 61 , 29 ) = 0 then
1161: LD_INT 61
1163: PPUSH
1164: LD_INT 29
1166: PPUSH
1167: CALL_OW 428
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: IFFALSE 1206
// begin bc_type := b_barracks ;
1177: LD_ADDR_OWVAR 42
1181: PUSH
1182: LD_INT 5
1184: ST_TO_ADDR
// bc_level := 6 ;
1185: LD_ADDR_OWVAR 43
1189: PUSH
1190: LD_INT 6
1192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1193: LD_INT 61
1195: PPUSH
1196: LD_INT 29
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1206: LD_ADDR_VAR 0 13
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 30
1223: PUSH
1224: LD_INT 31
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PPUSH
1235: CALL_OW 69
1239: ST_TO_ADDR
// for i in bun do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_VAR 0 13
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1383
// begin x := GetX ( i ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 250
1267: ST_TO_ADDR
// y := GetY ( i ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 251
1282: ST_TO_ADDR
// d := GetDir ( i ) ;
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PPUSH
1293: CALL_OW 254
1297: ST_TO_ADDR
// RemoveUnit ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 64
// bc_type := b_bunker ;
1307: LD_ADDR_OWVAR 42
1311: PUSH
1312: LD_INT 32
1314: ST_TO_ADDR
// bc_level := 6 ;
1315: LD_ADDR_OWVAR 43
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1323: LD_ADDR_VAR 0 6
1327: PUSH
1328: LD_VAR 0 3
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_VAR 0 5
1342: PPUSH
1343: CALL_OW 47
1347: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1348: LD_VAR 0 6
1352: PPUSH
1353: LD_INT 5
1355: PUSH
1356: LD_INT 4
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 2
1370: MOD
1371: PUSH
1372: LD_INT 1
1374: PLUS
1375: ARRAY
1376: PPUSH
1377: CALL_OW 431
// end ;
1381: GO 1250
1383: POP
1384: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1385: LD_ADDR_VAR 0 9
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1419: LD_ADDR_VAR 0 8
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 30
1439: PUSH
1440: LD_INT 6
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 8
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1482: LD_ADDR_VAR 0 7
1486: PUSH
1487: LD_INT 22
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 30
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1516: LD_ADDR_VAR 0 12
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 30
1533: PUSH
1534: LD_INT 36
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1550: LD_ADDR_VAR 0 13
1554: PUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 30
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 30
1580: PUSH
1581: LD_INT 32
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 11
1611: PUSH
1612: LD_VAR 0 15
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1994
// begin placed := false ;
1621: LD_ADDR_VAR 0 11
1625: PUSH
1626: LD_INT 0
1628: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1629: LD_VAR 0 2
1633: PPUSH
1634: CALL_OW 257
1638: PUSH
1639: LD_INT 1
1641: EQUAL
1642: IFFALSE 1767
// begin if UnitFilter ( bun , [ f_empty ] ) then
1644: LD_VAR 0 13
1648: PPUSH
1649: LD_INT 58
1651: PUSH
1652: EMPTY
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1698
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_VAR 0 13
1670: PPUSH
1671: LD_INT 58
1673: PUSH
1674: EMPTY
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PPUSH
1686: CALL_OW 52
// placed := true ;
1690: LD_ADDR_VAR 0 11
1694: PUSH
1695: LD_INT 1
1697: ST_TO_ADDR
// end ; if arm and not placed then
1698: LD_VAR 0 9
1702: PUSH
1703: LD_VAR 0 11
1707: NOT
1708: AND
1709: IFFALSE 1767
// begin for j in arm do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 9
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; end ; if GetClass ( i ) = 3 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 3
1779: EQUAL
1780: IFFALSE 1884
// if fac then
1782: LD_VAR 0 7
1786: IFFALSE 1884
// begin if ct then
1788: LD_VAR 0 12
1792: IFFALSE 1820
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1794: LD_VAR 0 2
1798: PPUSH
1799: LD_VAR 0 12
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: CALL_OW 52
// placed := true ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// end ; if placed then
1820: LD_VAR 0 11
1824: IFFALSE 1828
// continue ;
1826: GO 1618
// for j in fac do
1828: LD_ADDR_VAR 0 10
1832: PUSH
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_IN
1839: IFFALSE 1882
// if UnitsInside ( j ) < 6 then
1841: LD_VAR 0 10
1845: PPUSH
1846: CALL_OW 313
1850: PUSH
1851: LD_INT 6
1853: LESS
1854: IFFALSE 1880
// begin PlaceHumanInUnit ( i , j ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_VAR 0 10
1865: PPUSH
1866: CALL_OW 52
// placed := true ;
1870: LD_ADDR_VAR 0 11
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// break ;
1878: GO 1882
// end ;
1880: GO 1838
1882: POP
1883: POP
// end ; if GetClass ( i ) = 4 then
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 257
1893: PUSH
1894: LD_INT 4
1896: EQUAL
1897: IFFALSE 1961
// if lab then
1899: LD_VAR 0 8
1903: IFFALSE 1961
// begin for j in lab do
1905: LD_ADDR_VAR 0 10
1909: PUSH
1910: LD_VAR 0 8
1914: PUSH
1915: FOR_IN
1916: IFFALSE 1959
// if UnitsInside ( j ) < 6 then
1918: LD_VAR 0 10
1922: PPUSH
1923: CALL_OW 313
1927: PUSH
1928: LD_INT 6
1930: LESS
1931: IFFALSE 1957
// begin PlaceHumanInUnit ( i , j ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_VAR 0 10
1942: PPUSH
1943: CALL_OW 52
// placed := true ;
1947: LD_ADDR_VAR 0 11
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// break ;
1955: GO 1959
// end ;
1957: GO 1915
1959: POP
1960: POP
// end ; if not placed then
1961: LD_VAR 0 11
1965: NOT
1966: IFFALSE 1992
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_INT 5
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// ComHold ( i ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: CALL_OW 140
// end ; end ;
1992: GO 1618
1994: POP
1995: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1996: LD_VAR 0 12
2000: PUSH
2001: LD_VAR 0 12
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 313
2014: AND
2015: IFFALSE 2104
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 33
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2102
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 12
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_VAR 0 12
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 313
2089: PPUSH
2090: CALL_OW 12
2094: ARRAY
2095: PPUSH
2096: CALL_OW 135
2100: GO 2051
2102: POP
2103: POP
// end ; end ;
2104: LD_VAR 0 1
2108: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2117: LD_INT 71
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2130: LD_ADDR_VAR 0 2
2134: PUSH
2135: LD_STRING GammaBase
2137: PPUSH
2138: EMPTY
2139: PPUSH
2140: CALL_OW 30
2144: ST_TO_ADDR
// uc_side := 1 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// uc_nation := 1 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// for i in blist do
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_VAR 0 2
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2580
// begin bc_type := i [ 1 ] ;
2174: LD_ADDR_OWVAR 42
2178: PUSH
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2188: LD_ADDR_OWVAR 43
2192: PUSH
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 5
2200: ARRAY
2201: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2202: LD_VAR 0 3
2206: PUSH
2207: LD_INT 1
2209: ARRAY
2210: PUSH
2211: LD_INT 7
2213: PUSH
2214: LD_INT 8
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: IN
2221: IFFALSE 2277
// begin bc_kind1 := i [ 7 ] ;
2223: LD_ADDR_OWVAR 44
2227: PUSH
2228: LD_VAR 0 3
2232: PUSH
2233: LD_INT 7
2235: ARRAY
2236: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2237: LD_STRING 06_remoteVehs_1
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 30
2247: PUSH
2248: LD_INT 1
2250: EQUAL
2251: IFFALSE 2263
// begin bc_kind2 := 15 ;
2253: LD_ADDR_OWVAR 45
2257: PUSH
2258: LD_INT 15
2260: ST_TO_ADDR
// end else
2261: GO 2277
// begin bc_kind2 := i [ 8 ] ;
2263: LD_ADDR_OWVAR 45
2267: PUSH
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 8
2275: ARRAY
2276: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2277: LD_OWVAR 42
2281: PUSH
2282: LD_INT 0
2284: EQUAL
2285: IFFALSE 2403
// begin bc_type := b_warehouse ;
2287: LD_ADDR_OWVAR 42
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2295: LD_ADDR_EXP 37
2299: PUSH
2300: LD_VAR 0 3
2304: PUSH
2305: LD_INT 2
2307: ARRAY
2308: PPUSH
2309: LD_VAR 0 3
2313: PUSH
2314: LD_INT 3
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 3
2322: PUSH
2323: LD_INT 4
2325: ARRAY
2326: PPUSH
2327: CALL_OW 47
2331: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2332: LD_EXP 37
2336: PPUSH
2337: LD_STRING gamma
2339: PPUSH
2340: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2344: LD_EXP 37
2348: PPUSH
2349: CALL_OW 274
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_INT 400
2359: PUSH
2360: LD_INT 350
2362: PUSH
2363: LD_INT 250
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: PUSH
2371: LD_OWVAR 67
2375: ARRAY
2376: PPUSH
2377: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2381: LD_EXP 37
2385: PPUSH
2386: CALL_OW 274
2390: PPUSH
2391: LD_INT 2
2393: PPUSH
2394: LD_INT 200
2396: PPUSH
2397: CALL_OW 277
// end else
2401: GO 2545
// begin if bc_type = 4 then
2403: LD_OWVAR 42
2407: PUSH
2408: LD_INT 4
2410: EQUAL
2411: IFFALSE 2460
// begin bc_type = 5 ;
2413: LD_ADDR_OWVAR 42
2417: PUSH
2418: LD_INT 5
2420: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 3
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 3
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 3
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: CALL_OW 47
2457: ST_TO_ADDR
// end else
2458: GO 2545
// begin bc_type := i [ 1 ] ;
2460: LD_ADDR_OWVAR 42
2464: PUSH
2465: LD_VAR 0 3
2469: PUSH
2470: LD_INT 1
2472: ARRAY
2473: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2474: LD_STRING 06_remoteVehs_1
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: CALL_OW 30
2484: PUSH
2485: LD_INT 1
2487: EQUAL
2488: PUSH
2489: LD_OWVAR 42
2493: PUSH
2494: LD_INT 7
2496: EQUAL
2497: AND
2498: IFFALSE 2508
// bc_type := b_lab_full ;
2500: LD_ADDR_OWVAR 42
2504: PUSH
2505: LD_INT 8
2507: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2508: LD_ADDR_VAR 0 4
2512: PUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 2
2520: ARRAY
2521: PPUSH
2522: LD_VAR 0 3
2526: PUSH
2527: LD_INT 3
2529: ARRAY
2530: PPUSH
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 4
2538: ARRAY
2539: PPUSH
2540: CALL_OW 47
2544: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2545: LD_VAR 0 4
2549: PPUSH
2550: CALL_OW 266
2554: PUSH
2555: LD_INT 32
2557: EQUAL
2558: IFFALSE 2578
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2560: LD_VAR 0 4
2564: PPUSH
2565: LD_VAR 0 3
2569: PUSH
2570: LD_INT 7
2572: ARRAY
2573: PPUSH
2574: CALL_OW 431
// end ;
2578: GO 2171
2580: POP
2581: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_INT 1
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 30
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: PPUSH
2606: CALL_OW 69
2610: IFFALSE 2858
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_INT 22
2619: PUSH
2620: LD_INT 1
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 30
2629: PUSH
2630: LD_INT 3
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PPUSH
2641: CALL_OW 69
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2650: LD_ADDR_VAR 0 6
2654: PUSH
2655: LD_VAR 0 4
2659: PPUSH
2660: CALL_OW 250
2664: PPUSH
2665: LD_VAR 0 4
2669: PPUSH
2670: CALL_OW 251
2674: PPUSH
2675: LD_VAR 0 4
2679: PPUSH
2680: CALL_OW 254
2684: PPUSH
2685: CALL 15920 0 3
2689: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: LD_INT 19
2697: PUSH
2698: LD_INT 17
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2705: LD_STRING 06_remoteVehs_1
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL_OW 30
2715: IFFALSE 2738
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2717: LD_ADDR_VAR 0 2
2721: PUSH
2722: LD_VAR 0 2
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_INT 20
2732: PPUSH
2733: CALL_OW 2
2737: ST_TO_ADDR
// for i in tmp do
2738: LD_ADDR_VAR 0 3
2742: PUSH
2743: LD_VAR 0 6
2747: PUSH
2748: FOR_IN
2749: IFFALSE 2856
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2751: LD_VAR 0 3
2755: PUSH
2756: LD_INT 1
2758: ARRAY
2759: PPUSH
2760: LD_VAR 0 3
2764: PUSH
2765: LD_INT 2
2767: ARRAY
2768: PPUSH
2769: CALL_OW 428
2773: PUSH
2774: LD_INT 0
2776: EQUAL
2777: IFFALSE 2854
// begin bc_type := blist [ 1 ] ;
2779: LD_ADDR_OWVAR 42
2783: PUSH
2784: LD_VAR 0 2
2788: PUSH
2789: LD_INT 1
2791: ARRAY
2792: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2793: LD_VAR 0 3
2797: PUSH
2798: LD_INT 1
2800: ARRAY
2801: PPUSH
2802: LD_VAR 0 3
2806: PUSH
2807: LD_INT 2
2809: ARRAY
2810: PPUSH
2811: LD_VAR 0 3
2815: PUSH
2816: LD_INT 3
2818: ARRAY
2819: PPUSH
2820: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: LD_VAR 0 2
2833: PPUSH
2834: LD_INT 1
2836: PPUSH
2837: CALL_OW 3
2841: ST_TO_ADDR
// if blist = 0 then
2842: LD_VAR 0 2
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 2854
// break ;
2852: GO 2856
// end ;
2854: GO 2748
2856: POP
2857: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2858: LD_STRING 06_remoteVehs_1
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 30
2868: PUSH
2869: LD_INT 1
2871: EQUAL
2872: IFFALSE 3076
// begin bc_type = 36 ;
2874: LD_ADDR_OWVAR 42
2878: PUSH
2879: LD_INT 36
2881: ST_TO_ADDR
// bc_level = 4 ;
2882: LD_ADDR_OWVAR 43
2886: PUSH
2887: LD_INT 4
2889: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2890: LD_INT 62
2892: PPUSH
2893: LD_INT 12
2895: PPUSH
2896: LD_INT 3
2898: PPUSH
2899: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2903: LD_ADDR_VAR 0 3
2907: PUSH
2908: DOUBLE
2909: LD_INT 1
2911: DEC
2912: ST_TO_ADDR
2913: LD_INT 3
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 2
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: PUSH
2927: LD_OWVAR 67
2931: ARRAY
2932: PUSH
2933: FOR_TO
2934: IFFALSE 3074
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2936: LD_ADDR_OWVAR 37
2940: PUSH
2941: LD_INT 3
2943: PUSH
2944: LD_INT 2
2946: PUSH
2947: LD_INT 3
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 1
2956: PPUSH
2957: LD_INT 2
2959: PPUSH
2960: CALL_OW 12
2964: ARRAY
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: ST_TO_ADDR
// vc_engine = 1 ;
2980: LD_ADDR_OWVAR 39
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// vc_control = 2 ;
2988: LD_ADDR_OWVAR 38
2992: PUSH
2993: LD_INT 2
2995: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2996: LD_ADDR_OWVAR 40
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: LD_INT 4
3006: PUSH
3007: LD_INT 5
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 12
3025: ARRAY
3026: ST_TO_ADDR
// veh = CreateVehicle ;
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: CALL_OW 45
3036: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3037: LD_VAR 0 5
3041: PPUSH
3042: LD_EXP 37
3046: PPUSH
3047: CALL_OW 250
3051: PPUSH
3052: LD_EXP 37
3056: PPUSH
3057: CALL_OW 251
3061: PPUSH
3062: LD_INT 7
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: CALL_OW 50
// end ;
3072: GO 2933
3074: POP
3075: POP
// end ; end ;
3076: LD_VAR 0 1
3080: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3081: LD_INT 0
3083: PPUSH
3084: PPUSH
3085: PPUSH
3086: PPUSH
// uc_side = 1 ;
3087: LD_ADDR_OWVAR 20
3091: PUSH
3092: LD_INT 1
3094: ST_TO_ADDR
// uc_nation = 1 ;
3095: LD_ADDR_OWVAR 21
3099: PUSH
3100: LD_INT 1
3102: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3103: LD_ADDR_EXP 14
3107: PUSH
3108: LD_STRING 06c_Denis
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: CALL 6514 0 2
3118: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3119: LD_EXP 14
3123: PPUSH
3124: LD_INT 4
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3134: LD_ADDR_EXP 15
3138: PUSH
3139: LD_STRING 06c_Joan
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: CALL 6514 0 2
3149: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3150: LD_EXP 15
3154: PPUSH
3155: LD_INT 4
3157: PPUSH
3158: LD_INT 0
3160: PPUSH
3161: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3165: LD_STRING GladstoneIn07
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 30
3175: NOT
3176: IFFALSE 3244
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3178: LD_ADDR_EXP 8
3182: PUSH
3183: LD_STRING 06c_Gladstone
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL 6514 0 2
3193: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3194: LD_EXP 8
3198: NOT
3199: PUSH
3200: LD_STRING GladstoneStayInDelta
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 30
3210: AND
3211: IFFALSE 3229
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3213: LD_ADDR_EXP 8
3217: PUSH
3218: LD_STRING 05_Gladstone
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: CALL 6514 0 2
3228: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3229: LD_EXP 8
3233: PPUSH
3234: LD_INT 4
3236: PPUSH
3237: LD_INT 0
3239: PPUSH
3240: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3244: LD_STRING LisaStayInDelta
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 30
3254: IFFALSE 3287
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3256: LD_ADDR_EXP 6
3260: PUSH
3261: LD_STRING 05_Lisa
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: CALL 6514 0 2
3271: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3272: LD_EXP 6
3276: PPUSH
3277: LD_INT 4
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3287: LD_STRING BobbyStayInDelta
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 30
3297: IFFALSE 3330
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3299: LD_ADDR_EXP 4
3303: PUSH
3304: LD_STRING 05_Bobby
3306: PPUSH
3307: LD_INT 1
3309: PPUSH
3310: CALL 6514 0 2
3314: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3315: LD_EXP 4
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3330: LD_STRING CyrusStayInDelta
3332: PPUSH
3333: LD_INT 0
3335: PPUSH
3336: CALL_OW 30
3340: IFFALSE 3373
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3342: LD_ADDR_EXP 5
3346: PUSH
3347: LD_STRING 05_Cyrus
3349: PPUSH
3350: LD_INT 1
3352: PPUSH
3353: CALL 6514 0 2
3357: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3358: LD_EXP 5
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3373: LD_STRING BrownStayInDelta
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 30
3383: IFFALSE 3416
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3385: LD_ADDR_EXP 2
3389: PUSH
3390: LD_STRING 05_Brown
3392: PPUSH
3393: LD_INT 1
3395: PPUSH
3396: CALL 6514 0 2
3400: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3401: LD_EXP 2
3405: PPUSH
3406: LD_INT 4
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3416: LD_STRING DonaldsonStayInDelta
3418: PPUSH
3419: LD_INT 0
3421: PPUSH
3422: CALL_OW 30
3426: IFFALSE 3459
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3428: LD_ADDR_EXP 3
3432: PUSH
3433: LD_STRING 05_Donaldson
3435: PPUSH
3436: LD_INT 1
3438: PPUSH
3439: CALL 6514 0 2
3443: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3444: LD_EXP 3
3448: PPUSH
3449: LD_INT 4
3451: PPUSH
3452: LD_INT 0
3454: PPUSH
3455: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: LD_STRING OtherStayInDelta
3466: PPUSH
3467: CALL_OW 31
3471: ST_TO_ADDR
// if other then
3472: LD_VAR 0 4
3476: IFFALSE 3521
// for j = 1 to other do
3478: LD_ADDR_VAR 0 3
3482: PUSH
3483: DOUBLE
3484: LD_INT 1
3486: DEC
3487: ST_TO_ADDR
3488: LD_VAR 0 4
3492: PUSH
3493: FOR_TO
3494: IFFALSE 3519
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3496: LD_VAR 0 4
3500: PUSH
3501: LD_VAR 0 3
3505: ARRAY
3506: PPUSH
3507: LD_INT 4
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL_OW 49
3517: GO 3493
3519: POP
3520: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_STRING 06_other_apemans
3528: PPUSH
3529: CALL_OW 31
3533: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3534: LD_VAR 0 4
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: LD_INT 4
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: PUSH
3553: LD_OWVAR 67
3557: ARRAY
3558: GREATEREQUAL
3559: IFFALSE 3588
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: LD_INT 5
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: ST_TO_ADDR
3586: GO 3598
// j := other ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 4
3597: ST_TO_ADDR
// for i = 1 to j do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_VAR 0 3
3612: PUSH
3613: FOR_TO
3614: IFFALSE 3639
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3616: LD_VAR 0 4
3620: PUSH
3621: LD_VAR 0 2
3625: ARRAY
3626: PPUSH
3627: LD_INT 4
3629: PPUSH
3630: LD_INT 0
3632: PPUSH
3633: CALL_OW 49
3637: GO 3613
3639: POP
3640: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3641: LD_INT 4
3643: PPUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 1
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 21
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PPUSH
3668: CALL_OW 70
3672: PPUSH
3673: LD_INT 53
3675: PPUSH
3676: LD_INT 19
3678: PPUSH
3679: CALL_OW 111
// firstAttack = 1 ;
3683: LD_ADDR_EXP 33
3687: PUSH
3688: LD_INT 1
3690: ST_TO_ADDR
// end ;
3691: LD_VAR 0 1
3695: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3696: LD_INT 0
3698: PPUSH
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3703: LD_ADDR_VAR 0 4
3707: PUSH
3708: LD_STRING 07_vehicles
3710: PPUSH
3711: EMPTY
3712: PPUSH
3713: CALL_OW 30
3717: ST_TO_ADDR
// uc_side = 1 ;
3718: LD_ADDR_OWVAR 20
3722: PUSH
3723: LD_INT 1
3725: ST_TO_ADDR
// uc_nation = 1 ;
3726: LD_ADDR_OWVAR 21
3730: PUSH
3731: LD_INT 1
3733: ST_TO_ADDR
// if vehicles > 0 then
3734: LD_VAR 0 4
3738: PUSH
3739: LD_INT 0
3741: GREATER
3742: IFFALSE 3881
// begin for i = 1 to vehicles do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3879
// begin vc_chassis = vehicles [ i ] ;
3762: LD_ADDR_OWVAR 37
3766: PUSH
3767: LD_VAR 0 4
3771: PUSH
3772: LD_VAR 0 2
3776: ARRAY
3777: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3778: LD_ADDR_OWVAR 39
3782: PUSH
3783: LD_VAR 0 4
3787: PUSH
3788: LD_VAR 0 2
3792: PUSH
3793: LD_INT 1
3795: PLUS
3796: ARRAY
3797: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3798: LD_ADDR_OWVAR 38
3802: PUSH
3803: LD_VAR 0 4
3807: PUSH
3808: LD_VAR 0 2
3812: PUSH
3813: LD_INT 2
3815: PLUS
3816: ARRAY
3817: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3818: LD_ADDR_OWVAR 40
3822: PUSH
3823: LD_VAR 0 4
3827: PUSH
3828: LD_VAR 0 2
3832: PUSH
3833: LD_INT 3
3835: PLUS
3836: ARRAY
3837: ST_TO_ADDR
// veh = CreateVehicle ;
3838: LD_ADDR_VAR 0 5
3842: PUSH
3843: CALL_OW 45
3847: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3848: LD_VAR 0 5
3852: PPUSH
3853: LD_INT 4
3855: PPUSH
3856: LD_INT 0
3858: PPUSH
3859: CALL_OW 49
// i = i + 3 ;
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: LD_VAR 0 2
3872: PUSH
3873: LD_INT 3
3875: PLUS
3876: ST_TO_ADDR
// end ;
3877: GO 3759
3879: POP
3880: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3881: LD_ADDR_EXP 1
3885: PUSH
3886: LD_EXP 43
3890: PUSH
3891: LD_STRING JMM
3893: STR
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL 6514 0 2
3902: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3903: LD_EXP 12
3907: PUSH
3908: LD_INT 1
3910: EQUAL
3911: PUSH
3912: LD_EXP 12
3916: PUSH
3917: LD_INT 3
3919: EQUAL
3920: OR
3921: PUSH
3922: LD_EXP 2
3926: NOT
3927: AND
3928: IFFALSE 3952
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3930: LD_ADDR_EXP 2
3934: PUSH
3935: LD_EXP 43
3939: PUSH
3940: LD_STRING Brown
3942: STR
3943: PPUSH
3944: LD_INT 1
3946: PPUSH
3947: CALL 6514 0 2
3951: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
3952: LD_EXP 12
3956: PUSH
3957: LD_INT 2
3959: EQUAL
3960: PUSH
3961: LD_EXP 12
3965: PUSH
3966: LD_INT 3
3968: EQUAL
3969: OR
3970: PUSH
3971: LD_EXP 3
3975: NOT
3976: AND
3977: IFFALSE 4001
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3979: LD_ADDR_EXP 3
3983: PUSH
3984: LD_EXP 43
3988: PUSH
3989: LD_STRING Donaldson
3991: STR
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: CALL 6514 0 2
4000: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4001: LD_EXP 2
4005: PUSH
4006: LD_EXP 12
4010: PUSH
4011: LD_INT 2
4013: NONEQUAL
4014: AND
4015: IFFALSE 4032
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4017: LD_EXP 2
4021: PPUSH
4022: LD_INT 4
4024: PPUSH
4025: LD_INT 0
4027: PPUSH
4028: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4032: LD_EXP 3
4036: PUSH
4037: LD_EXP 12
4041: PUSH
4042: LD_INT 1
4044: NONEQUAL
4045: AND
4046: IFFALSE 4063
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4048: LD_EXP 3
4052: PPUSH
4053: LD_INT 4
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4063: LD_ADDR_VAR 0 5
4067: PUSH
4068: LD_INT 4
4070: PPUSH
4071: LD_INT 22
4073: PUSH
4074: LD_INT 1
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PUSH
4081: LD_INT 21
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 58
4093: PUSH
4094: EMPTY
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 70
4106: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4107: LD_ADDR_EXP 1
4111: PUSH
4112: LD_EXP 43
4116: PUSH
4117: LD_STRING JMM
4119: STR
4120: PPUSH
4121: LD_INT 1
4123: PPUSH
4124: CALL 6514 0 2
4128: ST_TO_ADDR
// if veh > 0 then
4129: LD_VAR 0 5
4133: PUSH
4134: LD_INT 0
4136: GREATER
4137: IFFALSE 4159
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4139: LD_EXP 1
4143: PPUSH
4144: LD_VAR 0 5
4148: PUSH
4149: LD_INT 1
4151: ARRAY
4152: PPUSH
4153: CALL_OW 52
// end else
4157: GO 4174
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4159: LD_EXP 1
4163: PPUSH
4164: LD_INT 4
4166: PPUSH
4167: LD_INT 0
4169: PPUSH
4170: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4174: LD_ADDR_VAR 0 5
4178: PUSH
4179: LD_INT 4
4181: PPUSH
4182: LD_INT 22
4184: PUSH
4185: LD_INT 1
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 21
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 58
4204: PUSH
4205: EMPTY
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 70
4217: ST_TO_ADDR
// if not Bobby then
4218: LD_EXP 4
4222: NOT
4223: IFFALSE 4292
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4225: LD_ADDR_EXP 4
4229: PUSH
4230: LD_EXP 43
4234: PUSH
4235: LD_STRING Bobby
4237: STR
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL 6514 0 2
4246: ST_TO_ADDR
// if veh > 0 then
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 0
4254: GREATER
4255: IFFALSE 4277
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4257: LD_EXP 4
4261: PPUSH
4262: LD_VAR 0 5
4266: PUSH
4267: LD_INT 1
4269: ARRAY
4270: PPUSH
4271: CALL_OW 52
// end else
4275: GO 4292
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4277: LD_EXP 4
4281: PPUSH
4282: LD_INT 4
4284: PPUSH
4285: LD_INT 0
4287: PPUSH
4288: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4292: LD_ADDR_VAR 0 5
4296: PUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 1
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 2
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 58
4322: PUSH
4323: EMPTY
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: PPUSH
4331: CALL_OW 70
4335: ST_TO_ADDR
// if not Cyrus then
4336: LD_EXP 5
4340: NOT
4341: IFFALSE 4410
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4343: LD_ADDR_EXP 5
4347: PUSH
4348: LD_EXP 43
4352: PUSH
4353: LD_STRING Cyrus
4355: STR
4356: PPUSH
4357: LD_INT 1
4359: PPUSH
4360: CALL 6514 0 2
4364: ST_TO_ADDR
// if veh > 0 then
4365: LD_VAR 0 5
4369: PUSH
4370: LD_INT 0
4372: GREATER
4373: IFFALSE 4395
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4375: LD_EXP 5
4379: PPUSH
4380: LD_VAR 0 5
4384: PUSH
4385: LD_INT 1
4387: ARRAY
4388: PPUSH
4389: CALL_OW 52
// end else
4393: GO 4410
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4395: LD_EXP 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4410: LD_ADDR_VAR 0 5
4414: PUSH
4415: LD_INT 4
4417: PPUSH
4418: LD_INT 22
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 21
4430: PUSH
4431: LD_INT 2
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 58
4440: PUSH
4441: EMPTY
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: PPUSH
4449: CALL_OW 70
4453: ST_TO_ADDR
// if not Lisa then
4454: LD_EXP 6
4458: NOT
4459: IFFALSE 4528
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4461: LD_ADDR_EXP 6
4465: PUSH
4466: LD_EXP 43
4470: PUSH
4471: LD_STRING Lisa
4473: STR
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: CALL 6514 0 2
4482: ST_TO_ADDR
// if veh > 0 then
4483: LD_VAR 0 5
4487: PUSH
4488: LD_INT 0
4490: GREATER
4491: IFFALSE 4513
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4493: LD_EXP 6
4497: PPUSH
4498: LD_VAR 0 5
4502: PUSH
4503: LD_INT 1
4505: ARRAY
4506: PPUSH
4507: CALL_OW 52
// end else
4511: GO 4528
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4513: LD_EXP 6
4517: PPUSH
4518: LD_INT 4
4520: PPUSH
4521: LD_INT 0
4523: PPUSH
4524: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4528: LD_ADDR_VAR 0 5
4532: PUSH
4533: LD_INT 4
4535: PPUSH
4536: LD_INT 22
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 21
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 58
4558: PUSH
4559: EMPTY
4560: LIST
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 70
4571: ST_TO_ADDR
// if not Frank then
4572: LD_EXP 7
4576: NOT
4577: IFFALSE 4646
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4579: LD_ADDR_EXP 7
4583: PUSH
4584: LD_EXP 43
4588: PUSH
4589: LD_STRING Frank
4591: STR
4592: PPUSH
4593: LD_INT 1
4595: PPUSH
4596: CALL 6514 0 2
4600: ST_TO_ADDR
// if veh > 0 then
4601: LD_VAR 0 5
4605: PUSH
4606: LD_INT 0
4608: GREATER
4609: IFFALSE 4631
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4611: LD_EXP 7
4615: PPUSH
4616: LD_VAR 0 5
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: PPUSH
4625: CALL_OW 52
// end else
4629: GO 4646
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4631: LD_EXP 7
4635: PPUSH
4636: LD_INT 4
4638: PPUSH
4639: LD_INT 0
4641: PPUSH
4642: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4646: LD_ADDR_VAR 0 5
4650: PUSH
4651: LD_INT 4
4653: PPUSH
4654: LD_INT 22
4656: PUSH
4657: LD_INT 1
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 21
4666: PUSH
4667: LD_INT 2
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 58
4676: PUSH
4677: EMPTY
4678: LIST
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 70
4689: ST_TO_ADDR
// if not Gladstone then
4690: LD_EXP 8
4694: NOT
4695: IFFALSE 4764
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4697: LD_ADDR_EXP 8
4701: PUSH
4702: LD_EXP 43
4706: PUSH
4707: LD_STRING Gladstone
4709: STR
4710: PPUSH
4711: LD_INT 1
4713: PPUSH
4714: CALL 6514 0 2
4718: ST_TO_ADDR
// if veh > 0 then
4719: LD_VAR 0 5
4723: PUSH
4724: LD_INT 0
4726: GREATER
4727: IFFALSE 4749
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4729: LD_EXP 8
4733: PPUSH
4734: LD_VAR 0 5
4738: PUSH
4739: LD_INT 1
4741: ARRAY
4742: PPUSH
4743: CALL_OW 52
// end else
4747: GO 4764
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4749: LD_EXP 8
4753: PPUSH
4754: LD_INT 4
4756: PPUSH
4757: LD_INT 0
4759: PPUSH
4760: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4764: LD_ADDR_VAR 0 5
4768: PUSH
4769: LD_INT 4
4771: PPUSH
4772: LD_INT 22
4774: PUSH
4775: LD_INT 1
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 21
4784: PUSH
4785: LD_INT 2
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 58
4794: PUSH
4795: EMPTY
4796: LIST
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: PPUSH
4803: CALL_OW 70
4807: ST_TO_ADDR
// if not Kikuchi then
4808: LD_EXP 9
4812: NOT
4813: IFFALSE 4882
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4815: LD_ADDR_EXP 9
4819: PUSH
4820: LD_EXP 43
4824: PUSH
4825: LD_STRING Kikuchi
4827: STR
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL 6514 0 2
4836: ST_TO_ADDR
// if veh > 0 then
4837: LD_VAR 0 5
4841: PUSH
4842: LD_INT 0
4844: GREATER
4845: IFFALSE 4867
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4847: LD_EXP 9
4851: PPUSH
4852: LD_VAR 0 5
4856: PUSH
4857: LD_INT 1
4859: ARRAY
4860: PPUSH
4861: CALL_OW 52
// end else
4865: GO 4882
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4867: LD_EXP 9
4871: PPUSH
4872: LD_INT 4
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4882: LD_ADDR_VAR 0 5
4886: PUSH
4887: LD_INT 4
4889: PPUSH
4890: LD_INT 22
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 21
4902: PUSH
4903: LD_INT 2
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 58
4912: PUSH
4913: EMPTY
4914: LIST
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: PPUSH
4921: CALL_OW 70
4925: ST_TO_ADDR
// if not Khatam then
4926: LD_EXP 10
4930: NOT
4931: IFFALSE 5000
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
4933: LD_ADDR_EXP 10
4937: PUSH
4938: LD_EXP 43
4942: PUSH
4943: LD_STRING Khatam
4945: STR
4946: PPUSH
4947: LD_INT 1
4949: PPUSH
4950: CALL 6514 0 2
4954: ST_TO_ADDR
// if veh > 0 then
4955: LD_VAR 0 5
4959: PUSH
4960: LD_INT 0
4962: GREATER
4963: IFFALSE 4985
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
4965: LD_EXP 10
4969: PPUSH
4970: LD_VAR 0 5
4974: PUSH
4975: LD_INT 1
4977: ARRAY
4978: PPUSH
4979: CALL_OW 52
// end else
4983: GO 5000
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
4985: LD_EXP 10
4989: PPUSH
4990: LD_INT 4
4992: PPUSH
4993: LD_INT 0
4995: PPUSH
4996: CALL_OW 49
// end ; end ; other = CreateCharacterSet ( 07c_others ) ;
5000: LD_ADDR_VAR 0 3
5004: PUSH
5005: LD_STRING 07c_others
5007: PPUSH
5008: CALL_OW 31
5012: ST_TO_ADDR
// for i in other do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: LD_VAR 0 3
5022: PUSH
5023: FOR_IN
5024: IFFALSE 5117
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: LD_INT 4
5033: PPUSH
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 21
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: LD_INT 58
5056: PUSH
5057: EMPTY
5058: LIST
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 70
5069: ST_TO_ADDR
// if veh > 0 then
5070: LD_VAR 0 5
5074: PUSH
5075: LD_INT 0
5077: GREATER
5078: IFFALSE 5100
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: CALL_OW 52
// end else
5098: GO 5115
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5100: LD_VAR 0 2
5104: PPUSH
5105: LD_INT 4
5107: PPUSH
5108: LD_INT 0
5110: PPUSH
5111: CALL_OW 49
// end ; end ;
5115: GO 5023
5117: POP
5118: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5119: LD_INT 4
5121: PPUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: EMPTY
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: PPUSH
5140: LD_INT 53
5142: PPUSH
5143: LD_INT 19
5145: PPUSH
5146: CALL_OW 111
// end ;
5150: LD_VAR 0 1
5154: RET
// export function PrepareSikorsky ; begin
5155: LD_INT 0
5157: PPUSH
// uc_side = 4 ;
5158: LD_ADDR_OWVAR 20
5162: PUSH
5163: LD_INT 4
5165: ST_TO_ADDR
// uc_nation = 1 ;
5166: LD_ADDR_OWVAR 21
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5174: LD_ADDR_EXP 16
5178: PUSH
5179: LD_STRING Sikorski
5181: PPUSH
5182: LD_INT 0
5184: PPUSH
5185: CALL 6514 0 2
5189: ST_TO_ADDR
// vc_engine = 1 ;
5190: LD_ADDR_OWVAR 39
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// vc_control = 1 ;
5198: LD_ADDR_OWVAR 38
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5206: LD_ADDR_OWVAR 40
5210: PUSH
5211: LD_INT 5
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: LD_INT 4
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_OWVAR 67
5229: ARRAY
5230: ST_TO_ADDR
// vc_chassis = 4 ;
5231: LD_ADDR_OWVAR 37
5235: PUSH
5236: LD_INT 4
5238: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5239: LD_ADDR_EXP 17
5243: PUSH
5244: CALL_OW 45
5248: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5249: LD_EXP 17
5253: PPUSH
5254: LD_INT 9
5256: PPUSH
5257: LD_INT 0
5259: PPUSH
5260: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5264: LD_EXP 16
5268: PPUSH
5269: LD_EXP 17
5273: PPUSH
5274: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5278: LD_EXP 17
5282: PPUSH
5283: LD_INT 5
5285: PPUSH
5286: CALL_OW 113
// end ;
5290: LD_VAR 0 1
5294: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5295: LD_INT 0
5297: PPUSH
5298: PPUSH
5299: PPUSH
5300: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5301: LD_ADDR_VAR 0 2
5305: PUSH
5306: DOUBLE
5307: LD_INT 1
5309: DEC
5310: ST_TO_ADDR
5311: LD_INT 8
5313: PUSH
5314: LD_INT 7
5316: PUSH
5317: LD_INT 7
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: LD_OWVAR 67
5329: ARRAY
5330: PUSH
5331: FOR_TO
5332: IFFALSE 5429
// begin uc_side = 4 ;
5334: LD_ADDR_OWVAR 20
5338: PUSH
5339: LD_INT 4
5341: ST_TO_ADDR
// uc_nation = 1 ;
5342: LD_ADDR_OWVAR 21
5346: PUSH
5347: LD_INT 1
5349: ST_TO_ADDR
// hc_name =  ;
5350: LD_ADDR_OWVAR 26
5354: PUSH
5355: LD_STRING 
5357: ST_TO_ADDR
// hc_gallery =  ;
5358: LD_ADDR_OWVAR 33
5362: PUSH
5363: LD_STRING 
5365: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5366: LD_INT 0
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 5
5374: PPUSH
5375: LD_INT 8
5377: PPUSH
5378: CALL_OW 12
5382: PPUSH
5383: CALL_OW 380
// un = CreateHuman ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: CALL_OW 44
5396: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 9
5404: PPUSH
5405: LD_INT 0
5407: PPUSH
5408: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: LD_INT 53
5419: PPUSH
5420: LD_INT 23
5422: PPUSH
5423: CALL_OW 111
// end ;
5427: GO 5331
5429: POP
5430: POP
// for i = 1 to 3 do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_INT 3
5443: PUSH
5444: FOR_TO
5445: IFFALSE 5542
// begin uc_side = 4 ;
5447: LD_ADDR_OWVAR 20
5451: PUSH
5452: LD_INT 4
5454: ST_TO_ADDR
// uc_nation = 1 ;
5455: LD_ADDR_OWVAR 21
5459: PUSH
5460: LD_INT 1
5462: ST_TO_ADDR
// hc_name =  ;
5463: LD_ADDR_OWVAR 26
5467: PUSH
5468: LD_STRING 
5470: ST_TO_ADDR
// hc_gallery =  ;
5471: LD_ADDR_OWVAR 33
5475: PUSH
5476: LD_STRING 
5478: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5479: LD_INT 0
5481: PPUSH
5482: LD_INT 4
5484: PPUSH
5485: LD_INT 5
5487: PPUSH
5488: LD_INT 8
5490: PPUSH
5491: CALL_OW 12
5495: PPUSH
5496: CALL_OW 380
// un = CreateHuman ;
5500: LD_ADDR_VAR 0 3
5504: PUSH
5505: CALL_OW 44
5509: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5510: LD_VAR 0 3
5514: PPUSH
5515: LD_INT 9
5517: PPUSH
5518: LD_INT 0
5520: PPUSH
5521: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5525: LD_VAR 0 3
5529: PPUSH
5530: LD_INT 53
5532: PPUSH
5533: LD_INT 23
5535: PPUSH
5536: CALL_OW 111
// end ;
5540: GO 5444
5542: POP
5543: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5544: LD_ADDR_VAR 0 2
5548: PUSH
5549: DOUBLE
5550: LD_INT 1
5552: DEC
5553: ST_TO_ADDR
5554: LD_INT 9
5556: PUSH
5557: LD_INT 8
5559: PUSH
5560: LD_INT 7
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: PUSH
5568: LD_OWVAR 67
5572: ARRAY
5573: PUSH
5574: FOR_TO
5575: IFFALSE 5771
// begin uc_side = 4 ;
5577: LD_ADDR_OWVAR 20
5581: PUSH
5582: LD_INT 4
5584: ST_TO_ADDR
// uc_nation = 1 ;
5585: LD_ADDR_OWVAR 21
5589: PUSH
5590: LD_INT 1
5592: ST_TO_ADDR
// vc_engine = 1 ;
5593: LD_ADDR_OWVAR 39
5597: PUSH
5598: LD_INT 1
5600: ST_TO_ADDR
// vc_control = 1 ;
5601: LD_ADDR_OWVAR 38
5605: PUSH
5606: LD_INT 1
5608: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5609: LD_ADDR_OWVAR 40
5613: PUSH
5614: LD_INT 3
5616: PUSH
5617: LD_INT 4
5619: PUSH
5620: LD_INT 5
5622: PUSH
5623: LD_INT 6
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 1
5634: PPUSH
5635: LD_INT 4
5637: PPUSH
5638: CALL_OW 12
5642: ARRAY
5643: ST_TO_ADDR
// vc_chassis = 4 ;
5644: LD_ADDR_OWVAR 37
5648: PUSH
5649: LD_INT 4
5651: ST_TO_ADDR
// veh = CreateVehicle ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: CALL_OW 45
5661: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5662: LD_VAR 0 4
5666: PPUSH
5667: LD_INT 9
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: CALL_OW 49
// hc_name =  ;
5677: LD_ADDR_OWVAR 26
5681: PUSH
5682: LD_STRING 
5684: ST_TO_ADDR
// hc_gallery =  ;
5685: LD_ADDR_OWVAR 33
5689: PUSH
5690: LD_STRING 
5692: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5693: LD_INT 0
5695: PPUSH
5696: LD_INT 3
5698: PPUSH
5699: LD_INT 5
5701: PPUSH
5702: LD_INT 8
5704: PPUSH
5705: CALL_OW 12
5709: PPUSH
5710: CALL_OW 380
// un = CreateHuman ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: CALL_OW 44
5723: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5724: LD_VAR 0 3
5728: PPUSH
5729: LD_VAR 0 4
5733: PPUSH
5734: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5738: LD_VAR 0 4
5742: PUSH
5743: LD_VAR 0 3
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PPUSH
5752: LD_INT 53
5754: PPUSH
5755: LD_INT 23
5757: PPUSH
5758: CALL_OW 111
// wait ( 0 0$5 ) ;
5762: LD_INT 175
5764: PPUSH
5765: CALL_OW 67
// end ;
5769: GO 5574
5771: POP
5772: POP
// end ; end_of_file
5773: LD_VAR 0 1
5777: RET
// export function PrepareRussianCommander ; begin
5778: LD_INT 0
5780: PPUSH
// uc_side = 3 ;
5781: LD_ADDR_OWVAR 20
5785: PUSH
5786: LD_INT 3
5788: ST_TO_ADDR
// uc_nation = 3 ;
5789: LD_ADDR_OWVAR 21
5793: PUSH
5794: LD_INT 3
5796: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5797: LD_ADDR_EXP 24
5801: PUSH
5802: LD_STRING Borodin
5804: PPUSH
5805: CALL_OW 25
5809: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5810: LD_EXP 24
5814: PPUSH
5815: LD_INT 25
5817: PPUSH
5818: LD_INT 0
5820: PPUSH
5821: CALL_OW 49
// end ;
5825: LD_VAR 0 1
5829: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5830: LD_INT 0
5832: PPUSH
5833: PPUSH
5834: PPUSH
5835: PPUSH
// for i = 1 to 10 do
5836: LD_ADDR_VAR 0 2
5840: PUSH
5841: DOUBLE
5842: LD_INT 1
5844: DEC
5845: ST_TO_ADDR
5846: LD_INT 10
5848: PUSH
5849: FOR_TO
5850: IFFALSE 5924
// begin uc_side = 6 ;
5852: LD_ADDR_OWVAR 20
5856: PUSH
5857: LD_INT 6
5859: ST_TO_ADDR
// uc_nation = 3 ;
5860: LD_ADDR_OWVAR 21
5864: PUSH
5865: LD_INT 3
5867: ST_TO_ADDR
// hc_gallery =  ;
5868: LD_ADDR_OWVAR 33
5872: PUSH
5873: LD_STRING 
5875: ST_TO_ADDR
// hc_name =  ;
5876: LD_ADDR_OWVAR 26
5880: PUSH
5881: LD_STRING 
5883: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5884: LD_INT 0
5886: PPUSH
5887: LD_INT 1
5889: PPUSH
5890: LD_INT 3
5892: PPUSH
5893: CALL_OW 380
// un = CreateHuman ;
5897: LD_ADDR_VAR 0 3
5901: PUSH
5902: CALL_OW 44
5906: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5907: LD_VAR 0 3
5911: PPUSH
5912: LD_INT 1
5914: PPUSH
5915: LD_INT 0
5917: PPUSH
5918: CALL_OW 49
// end ;
5922: GO 5849
5924: POP
5925: POP
// for i = 1 to 3 do
5926: LD_ADDR_VAR 0 2
5930: PUSH
5931: DOUBLE
5932: LD_INT 1
5934: DEC
5935: ST_TO_ADDR
5936: LD_INT 3
5938: PUSH
5939: FOR_TO
5940: IFFALSE 6089
// begin uc_side = 6 ;
5942: LD_ADDR_OWVAR 20
5946: PUSH
5947: LD_INT 6
5949: ST_TO_ADDR
// uc_nation = 3 ;
5950: LD_ADDR_OWVAR 21
5954: PUSH
5955: LD_INT 3
5957: ST_TO_ADDR
// vc_engine = 1 ;
5958: LD_ADDR_OWVAR 39
5962: PUSH
5963: LD_INT 1
5965: ST_TO_ADDR
// vc_control = 1 ;
5966: LD_ADDR_OWVAR 38
5970: PUSH
5971: LD_INT 1
5973: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5974: LD_ADDR_OWVAR 40
5978: PUSH
5979: LD_INT 43
5981: PUSH
5982: LD_INT 44
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: LD_INT 1
5991: PPUSH
5992: LD_INT 2
5994: PPUSH
5995: CALL_OW 12
5999: ARRAY
6000: ST_TO_ADDR
// vc_chassis = 22 ;
6001: LD_ADDR_OWVAR 37
6005: PUSH
6006: LD_INT 22
6008: ST_TO_ADDR
// veh = CreateVehicle ;
6009: LD_ADDR_VAR 0 4
6013: PUSH
6014: CALL_OW 45
6018: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6019: LD_VAR 0 4
6023: PPUSH
6024: LD_INT 2
6026: PPUSH
6027: LD_INT 0
6029: PPUSH
6030: CALL_OW 49
// hc_gallery =  ;
6034: LD_ADDR_OWVAR 33
6038: PUSH
6039: LD_STRING 
6041: ST_TO_ADDR
// hc_name =  ;
6042: LD_ADDR_OWVAR 26
6046: PUSH
6047: LD_STRING 
6049: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6050: LD_INT 0
6052: PPUSH
6053: LD_INT 3
6055: PPUSH
6056: LD_INT 4
6058: PPUSH
6059: CALL_OW 380
// un = CreateHuman ;
6063: LD_ADDR_VAR 0 3
6067: PUSH
6068: CALL_OW 44
6072: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6073: LD_VAR 0 3
6077: PPUSH
6078: LD_VAR 0 4
6082: PPUSH
6083: CALL_OW 52
// end ;
6087: GO 5939
6089: POP
6090: POP
// end ;
6091: LD_VAR 0 1
6095: RET
// export function PrepareRussians ; var i , un ; begin
6096: LD_INT 0
6098: PPUSH
6099: PPUSH
6100: PPUSH
// for i = 1 to 14 do
6101: LD_ADDR_VAR 0 2
6105: PUSH
6106: DOUBLE
6107: LD_INT 1
6109: DEC
6110: ST_TO_ADDR
6111: LD_INT 14
6113: PUSH
6114: FOR_TO
6115: IFFALSE 6201
// begin uc_side = 3 ;
6117: LD_ADDR_OWVAR 20
6121: PUSH
6122: LD_INT 3
6124: ST_TO_ADDR
// uc_nation = 3 ;
6125: LD_ADDR_OWVAR 21
6129: PUSH
6130: LD_INT 3
6132: ST_TO_ADDR
// hc_gallery =  ;
6133: LD_ADDR_OWVAR 33
6137: PUSH
6138: LD_STRING 
6140: ST_TO_ADDR
// hc_name =  ;
6141: LD_ADDR_OWVAR 26
6145: PUSH
6146: LD_STRING 
6148: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6149: LD_INT 0
6151: PPUSH
6152: LD_INT 1
6154: PPUSH
6155: LD_EXP 25
6159: PPUSH
6160: LD_EXP 26
6164: PPUSH
6165: CALL_OW 12
6169: PPUSH
6170: CALL_OW 380
// un = CreateHuman ;
6174: LD_ADDR_VAR 0 3
6178: PUSH
6179: CALL_OW 44
6183: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6184: LD_VAR 0 3
6188: PPUSH
6189: LD_INT 3
6191: PPUSH
6192: LD_INT 0
6194: PPUSH
6195: CALL_OW 49
// end ;
6199: GO 6114
6201: POP
6202: POP
// for i = 1 to 6 do
6203: LD_ADDR_VAR 0 2
6207: PUSH
6208: DOUBLE
6209: LD_INT 1
6211: DEC
6212: ST_TO_ADDR
6213: LD_INT 6
6215: PUSH
6216: FOR_TO
6217: IFFALSE 6303
// begin uc_side = 3 ;
6219: LD_ADDR_OWVAR 20
6223: PUSH
6224: LD_INT 3
6226: ST_TO_ADDR
// uc_nation = 3 ;
6227: LD_ADDR_OWVAR 21
6231: PUSH
6232: LD_INT 3
6234: ST_TO_ADDR
// hc_gallery =  ;
6235: LD_ADDR_OWVAR 33
6239: PUSH
6240: LD_STRING 
6242: ST_TO_ADDR
// hc_name =  ;
6243: LD_ADDR_OWVAR 26
6247: PUSH
6248: LD_STRING 
6250: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6251: LD_INT 0
6253: PPUSH
6254: LD_INT 2
6256: PPUSH
6257: LD_EXP 25
6261: PPUSH
6262: LD_EXP 26
6266: PPUSH
6267: CALL_OW 12
6271: PPUSH
6272: CALL_OW 380
// un = CreateHuman ;
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: CALL_OW 44
6285: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6286: LD_VAR 0 3
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: CALL_OW 49
// end ;
6301: GO 6216
6303: POP
6304: POP
// for i = 1 to 6 do
6305: LD_ADDR_VAR 0 2
6309: PUSH
6310: DOUBLE
6311: LD_INT 1
6313: DEC
6314: ST_TO_ADDR
6315: LD_INT 6
6317: PUSH
6318: FOR_TO
6319: IFFALSE 6405
// begin uc_side = 3 ;
6321: LD_ADDR_OWVAR 20
6325: PUSH
6326: LD_INT 3
6328: ST_TO_ADDR
// uc_nation = 3 ;
6329: LD_ADDR_OWVAR 21
6333: PUSH
6334: LD_INT 3
6336: ST_TO_ADDR
// hc_gallery =  ;
6337: LD_ADDR_OWVAR 33
6341: PUSH
6342: LD_STRING 
6344: ST_TO_ADDR
// hc_name =  ;
6345: LD_ADDR_OWVAR 26
6349: PUSH
6350: LD_STRING 
6352: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6353: LD_INT 0
6355: PPUSH
6356: LD_INT 3
6358: PPUSH
6359: LD_EXP 25
6363: PPUSH
6364: LD_EXP 26
6368: PPUSH
6369: CALL_OW 12
6373: PPUSH
6374: CALL_OW 380
// un = CreateHuman ;
6378: LD_ADDR_VAR 0 3
6382: PUSH
6383: CALL_OW 44
6387: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6388: LD_VAR 0 3
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 0
6398: PPUSH
6399: CALL_OW 49
// end ;
6403: GO 6318
6405: POP
6406: POP
// for i = 1 to 4 do
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: DOUBLE
6413: LD_INT 1
6415: DEC
6416: ST_TO_ADDR
6417: LD_INT 4
6419: PUSH
6420: FOR_TO
6421: IFFALSE 6507
// begin uc_side = 3 ;
6423: LD_ADDR_OWVAR 20
6427: PUSH
6428: LD_INT 3
6430: ST_TO_ADDR
// uc_nation = 3 ;
6431: LD_ADDR_OWVAR 21
6435: PUSH
6436: LD_INT 3
6438: ST_TO_ADDR
// hc_gallery =  ;
6439: LD_ADDR_OWVAR 33
6443: PUSH
6444: LD_STRING 
6446: ST_TO_ADDR
// hc_name =  ;
6447: LD_ADDR_OWVAR 26
6451: PUSH
6452: LD_STRING 
6454: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6455: LD_INT 0
6457: PPUSH
6458: LD_INT 4
6460: PPUSH
6461: LD_EXP 25
6465: PPUSH
6466: LD_EXP 26
6470: PPUSH
6471: CALL_OW 12
6475: PPUSH
6476: CALL_OW 380
// un = CreateHuman ;
6480: LD_ADDR_VAR 0 3
6484: PUSH
6485: CALL_OW 44
6489: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6490: LD_VAR 0 3
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: LD_INT 0
6500: PPUSH
6501: CALL_OW 49
// end ;
6505: GO 6420
6507: POP
6508: POP
// end ; end_of_file
6509: LD_VAR 0 1
6513: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6514: LD_INT 0
6516: PPUSH
6517: PPUSH
// if exist_mode then
6518: LD_VAR 0 2
6522: IFFALSE 6541
// unit := CreateCharacter ( ident ) else
6524: LD_ADDR_VAR 0 4
6528: PUSH
6529: LD_VAR 0 1
6533: PPUSH
6534: CALL_OW 34
6538: ST_TO_ADDR
6539: GO 6556
// unit := NewCharacter ( ident ) ;
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_VAR 0 1
6550: PPUSH
6551: CALL_OW 25
6555: ST_TO_ADDR
// result := unit ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: LD_VAR 0 4
6565: ST_TO_ADDR
// end ;
6566: LD_VAR 0 3
6570: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6571: LD_INT 0
6573: PPUSH
6574: PPUSH
6575: PPUSH
// rnd = rand ( 1 , characters ) ;
6576: LD_ADDR_VAR 0 6
6580: PUSH
6581: LD_INT 1
6583: PPUSH
6584: LD_VAR 0 1
6588: PPUSH
6589: CALL_OW 12
6593: ST_TO_ADDR
// for i = 1 to characters do
6594: LD_ADDR_VAR 0 5
6598: PUSH
6599: DOUBLE
6600: LD_INT 1
6602: DEC
6603: ST_TO_ADDR
6604: LD_VAR 0 1
6608: PUSH
6609: FOR_TO
6610: IFFALSE 6720
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6612: LD_VAR 0 5
6616: PUSH
6617: LD_VAR 0 6
6621: EQUAL
6622: PUSH
6623: LD_VAR 0 1
6627: PUSH
6628: LD_VAR 0 5
6632: ARRAY
6633: PPUSH
6634: CALL_OW 258
6638: PUSH
6639: LD_INT 1
6641: EQUAL
6642: AND
6643: IFFALSE 6665
// Say ( characters [ i ] , dialogMID ) ;
6645: LD_VAR 0 1
6649: PUSH
6650: LD_VAR 0 5
6654: ARRAY
6655: PPUSH
6656: LD_VAR 0 2
6660: PPUSH
6661: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6665: LD_VAR 0 5
6669: PUSH
6670: LD_VAR 0 6
6674: EQUAL
6675: PUSH
6676: LD_VAR 0 1
6680: PUSH
6681: LD_VAR 0 5
6685: ARRAY
6686: PPUSH
6687: CALL_OW 258
6691: PUSH
6692: LD_INT 2
6694: EQUAL
6695: AND
6696: IFFALSE 6718
// Say ( characters [ i ] , dialogFID ) ;
6698: LD_VAR 0 1
6702: PUSH
6703: LD_VAR 0 5
6707: ARRAY
6708: PPUSH
6709: LD_VAR 0 3
6713: PPUSH
6714: CALL_OW 88
// end ;
6718: GO 6609
6720: POP
6721: POP
// end ;
6722: LD_VAR 0 4
6726: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6727: LD_INT 0
6729: PPUSH
6730: PPUSH
6731: PPUSH
// uc_side := GetSide ( b ) ;
6732: LD_ADDR_OWVAR 20
6736: PUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: CALL_OW 255
6746: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6747: LD_ADDR_OWVAR 21
6751: PUSH
6752: LD_VAR 0 2
6756: PPUSH
6757: CALL_OW 248
6761: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6762: LD_INT 0
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: LD_VAR 0 1
6772: PPUSH
6773: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6777: LD_ADDR_VAR 0 5
6781: PUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 254
6791: PUSH
6792: LD_INT 3
6794: MINUS
6795: ST_TO_ADDR
// if dir < 0 then
6796: LD_VAR 0 5
6800: PUSH
6801: LD_INT 0
6803: LESS
6804: IFFALSE 6820
// dir := 6 + dir ;
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: LD_INT 6
6813: PUSH
6814: LD_VAR 0 5
6818: PLUS
6819: ST_TO_ADDR
// un := CreateHuman ;
6820: LD_ADDR_VAR 0 4
6824: PUSH
6825: CALL_OW 44
6829: ST_TO_ADDR
// SetDir ( un , dir ) ;
6830: LD_VAR 0 4
6834: PPUSH
6835: LD_VAR 0 5
6839: PPUSH
6840: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6844: LD_VAR 0 4
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: LD_VAR 0 3
6862: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6863: LD_INT 0
6865: PPUSH
6866: PPUSH
6867: PPUSH
6868: PPUSH
// for i = 1 to count do
6869: LD_ADDR_VAR 0 8
6873: PUSH
6874: DOUBLE
6875: LD_INT 1
6877: DEC
6878: ST_TO_ADDR
6879: LD_VAR 0 6
6883: PUSH
6884: FOR_TO
6885: IFFALSE 6966
// begin uc_side = side ;
6887: LD_ADDR_OWVAR 20
6891: PUSH
6892: LD_VAR 0 1
6896: ST_TO_ADDR
// uc_nation = nation ;
6897: LD_ADDR_OWVAR 21
6901: PUSH
6902: LD_VAR 0 2
6906: ST_TO_ADDR
// hc_gallery =  ;
6907: LD_ADDR_OWVAR 33
6911: PUSH
6912: LD_STRING 
6914: ST_TO_ADDR
// hc_name =  ;
6915: LD_ADDR_OWVAR 26
6919: PUSH
6920: LD_STRING 
6922: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6923: LD_INT 0
6925: PPUSH
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_VAR 0 4
6935: PPUSH
6936: CALL_OW 380
// un = CreateHuman ;
6940: LD_ADDR_VAR 0 10
6944: PUSH
6945: CALL_OW 44
6949: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6950: LD_VAR 0 10
6954: PPUSH
6955: LD_VAR 0 3
6959: PPUSH
6960: CALL_OW 52
// end ;
6964: GO 6884
6966: POP
6967: POP
// end ;
6968: LD_VAR 0 7
6972: RET
// export function PrepareDifficulty ; begin
6973: LD_INT 0
6975: PPUSH
// if Difficulty = 1 then
6976: LD_OWVAR 67
6980: PUSH
6981: LD_INT 1
6983: EQUAL
6984: IFFALSE 7002
// begin RuSolMinLevel = 4 ;
6986: LD_ADDR_EXP 25
6990: PUSH
6991: LD_INT 4
6993: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6994: LD_ADDR_EXP 26
6998: PUSH
6999: LD_INT 6
7001: ST_TO_ADDR
// end ; if Difficulty = 2 then
7002: LD_OWVAR 67
7006: PUSH
7007: LD_INT 2
7009: EQUAL
7010: IFFALSE 7080
// begin RuSolMinLevel = 5 ;
7012: LD_ADDR_EXP 25
7016: PUSH
7017: LD_INT 5
7019: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7020: LD_ADDR_EXP 26
7024: PUSH
7025: LD_INT 6
7027: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7028: LD_INT 51
7030: PPUSH
7031: LD_INT 3
7033: PPUSH
7034: LD_INT 1
7036: PPUSH
7037: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7041: LD_INT 57
7043: PPUSH
7044: LD_INT 3
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7054: LD_INT 57
7056: PPUSH
7057: LD_INT 6
7059: PPUSH
7060: LD_INT 2
7062: PPUSH
7063: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7067: LD_INT 51
7069: PPUSH
7070: LD_INT 6
7072: PPUSH
7073: LD_INT 2
7075: PPUSH
7076: CALL_OW 322
// end ; if Difficulty = 3 then
7080: LD_OWVAR 67
7084: PUSH
7085: LD_INT 3
7087: EQUAL
7088: IFFALSE 7171
// begin RuSolMinLevel = 5 ;
7090: LD_ADDR_EXP 25
7094: PUSH
7095: LD_INT 5
7097: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7098: LD_ADDR_EXP 26
7102: PUSH
7103: LD_INT 6
7105: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7106: LD_INT 57
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7119: LD_INT 51
7121: PPUSH
7122: LD_INT 3
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7132: LD_INT 52
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 1
7140: PPUSH
7141: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7145: LD_INT 57
7147: PPUSH
7148: LD_INT 6
7150: PPUSH
7151: LD_INT 2
7153: PPUSH
7154: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7158: LD_INT 52
7160: PPUSH
7161: LD_INT 6
7163: PPUSH
7164: LD_INT 2
7166: PPUSH
7167: CALL_OW 322
// end ; end ;
7171: LD_VAR 0 1
7175: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7176: LD_INT 0
7178: PPUSH
7179: PPUSH
7180: PPUSH
7181: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7182: LD_ADDR_VAR 0 3
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 25
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PPUSH
7211: CALL_OW 69
7215: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7216: LD_ADDR_VAR 0 4
7220: PUSH
7221: LD_INT 4
7223: PUSH
7224: LD_INT 75
7226: PUSH
7227: LD_INT 79
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 4
7241: PUSH
7242: LD_INT 113
7244: PUSH
7245: LD_INT 94
7247: PUSH
7248: LD_INT 4
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 29
7259: PUSH
7260: LD_INT 106
7262: PUSH
7263: LD_INT 97
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 26
7277: PUSH
7278: LD_INT 93
7280: PUSH
7281: LD_INT 97
7283: PUSH
7284: LD_INT 5
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 100
7298: PUSH
7299: LD_INT 89
7301: PUSH
7302: LD_INT 3
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 17
7313: PUSH
7314: LD_INT 96
7316: PUSH
7317: LD_INT 89
7319: PUSH
7320: LD_INT 1
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 32
7331: PUSH
7332: LD_INT 78
7334: PUSH
7335: LD_INT 94
7337: PUSH
7338: LD_INT 1
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 32
7349: PUSH
7350: LD_INT 95
7352: PUSH
7353: LD_INT 82
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 32
7367: PUSH
7368: LD_INT 104
7370: PUSH
7371: LD_INT 85
7373: PUSH
7374: LD_INT 2
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 32
7385: PUSH
7386: LD_INT 81
7388: PUSH
7389: LD_INT 78
7391: PUSH
7392: LD_INT 2
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 33
7403: PUSH
7404: LD_INT 109
7406: PUSH
7407: LD_INT 90
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 33
7421: PUSH
7422: LD_INT 88
7424: PUSH
7425: LD_INT 79
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 33
7439: PUSH
7440: LD_INT 76
7442: PUSH
7443: LD_INT 87
7445: PUSH
7446: LD_INT 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 26
7457: PUSH
7458: LD_INT 96
7460: PUSH
7461: LD_INT 97
7463: PUSH
7464: LD_INT 5
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 26
7475: PUSH
7476: LD_INT 85
7478: PUSH
7479: LD_INT 84
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 6
7493: PUSH
7494: LD_INT 88
7496: PUSH
7497: LD_INT 95
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 19
7511: PUSH
7512: LD_INT 103
7514: PUSH
7515: LD_INT 89
7517: PUSH
7518: LD_INT 4
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 16
7529: PUSH
7530: LD_INT 97
7532: PUSH
7533: LD_INT 86
7535: PUSH
7536: LD_INT 2
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 24
7547: PUSH
7548: LD_INT 100
7550: PUSH
7551: LD_INT 85
7553: PUSH
7554: LD_INT 3
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// for i := 1 to buildingsTab do
7584: LD_ADDR_VAR 0 2
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_VAR 0 4
7598: PUSH
7599: FOR_TO
7600: IFFALSE 7673
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_VAR 0 4
7611: PUSH
7612: LD_VAR 0 2
7616: ARRAY
7617: PUSH
7618: LD_INT 1
7620: ARRAY
7621: PPUSH
7622: LD_VAR 0 4
7626: PUSH
7627: LD_VAR 0 2
7631: ARRAY
7632: PUSH
7633: LD_INT 2
7635: ARRAY
7636: PPUSH
7637: LD_VAR 0 4
7641: PUSH
7642: LD_VAR 0 2
7646: ARRAY
7647: PUSH
7648: LD_INT 3
7650: ARRAY
7651: PPUSH
7652: LD_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: ARRAY
7662: PUSH
7663: LD_INT 4
7665: ARRAY
7666: PPUSH
7667: CALL_OW 205
7671: GO 7599
7673: POP
7674: POP
// end ;
7675: LD_VAR 0 1
7679: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7680: LD_INT 0
7682: PPUSH
7683: PPUSH
// for i in charactersList do
7684: LD_ADDR_VAR 0 4
7688: PUSH
7689: LD_VAR 0 1
7693: PUSH
7694: FOR_IN
7695: IFFALSE 7724
// begin if IsOk ( i ) then
7697: LD_VAR 0 4
7701: PPUSH
7702: CALL_OW 302
7706: IFFALSE 7722
// SaveCharacters ( i , ident ) ;
7708: LD_VAR 0 4
7712: PPUSH
7713: LD_VAR 0 2
7717: PPUSH
7718: CALL_OW 38
// end ;
7722: GO 7694
7724: POP
7725: POP
// end ;
7726: LD_VAR 0 3
7730: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7731: LD_INT 0
7733: PPUSH
7734: PPUSH
7735: PPUSH
7736: PPUSH
// for i = 1 to 72 do
7737: LD_ADDR_VAR 0 5
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_INT 72
7749: PUSH
7750: FOR_TO
7751: IFFALSE 7809
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7753: LD_VAR 0 5
7757: PPUSH
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 321
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: PUSH
7772: LD_VAR 0 5
7776: PPUSH
7777: LD_VAR 0 3
7781: PPUSH
7782: CALL_OW 482
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: AND
7791: IFFALSE 7807
// AddComResearch ( lab , i ) ;
7793: LD_VAR 0 2
7797: PPUSH
7798: LD_VAR 0 5
7802: PPUSH
7803: CALL_OW 184
7807: GO 7750
7809: POP
7810: POP
// end ;
7811: LD_VAR 0 4
7815: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7816: LD_INT 0
7818: PPUSH
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
7823: PPUSH
7824: PPUSH
7825: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7826: LD_ADDR_VAR 0 6
7830: PUSH
7831: LD_VAR 0 2
7835: PPUSH
7836: LD_INT 22
7838: PUSH
7839: LD_VAR 0 1
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 56
7850: PUSH
7851: EMPTY
7852: LIST
7853: PUSH
7854: LD_INT 24
7856: PUSH
7857: LD_INT 700
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 3
7866: PUSH
7867: LD_INT 60
7869: PUSH
7870: EMPTY
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 2
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 25
7892: PUSH
7893: LD_INT 5
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 25
7902: PUSH
7903: LD_INT 8
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 25
7912: PUSH
7913: LD_INT 9
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 70
7938: PUSH
7939: LD_EXP 24
7943: PUSH
7944: EMPTY
7945: LIST
7946: DIFF
7947: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7948: LD_ADDR_VAR 0 7
7952: PUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: LD_INT 22
7960: PUSH
7961: LD_VAR 0 1
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 30
7972: PUSH
7973: LD_INT 32
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 58
7982: PUSH
7983: EMPTY
7984: LIST
7985: PUSH
7986: LD_INT 24
7988: PUSH
7989: LD_INT 251
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 70
8006: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8007: LD_ADDR_VAR 0 9
8011: PUSH
8012: LD_VAR 0 2
8016: PPUSH
8017: LD_INT 22
8019: PUSH
8020: LD_VAR 0 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: LD_INT 30
8034: PUSH
8035: LD_INT 4
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 5
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 24
8059: PUSH
8060: LD_INT 251
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 70
8076: ST_TO_ADDR
// if barrackList > 0 then
8077: LD_VAR 0 9
8081: PUSH
8082: LD_INT 0
8084: GREATER
8085: IFFALSE 8233
// begin if turretList = 0 then
8087: LD_VAR 0 7
8091: PUSH
8092: LD_INT 0
8094: EQUAL
8095: IFFALSE 8137
// begin if soldiers_list > 0 then
8097: LD_VAR 0 6
8101: PUSH
8102: LD_INT 0
8104: GREATER
8105: IFFALSE 8135
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8107: LD_VAR 0 6
8111: PPUSH
8112: LD_VAR 0 9
8116: PUSH
8117: LD_INT 1
8119: PPUSH
8120: LD_VAR 0 9
8124: PPUSH
8125: CALL_OW 12
8129: ARRAY
8130: PPUSH
8131: CALL_OW 120
// end else
8135: GO 8233
// begin for i in barrackList do
8137: LD_ADDR_VAR 0 4
8141: PUSH
8142: LD_VAR 0 9
8146: PUSH
8147: FOR_IN
8148: IFFALSE 8231
// begin insideUnits = UnitsInside ( i ) ;
8150: LD_ADDR_VAR 0 10
8154: PUSH
8155: LD_VAR 0 4
8159: PPUSH
8160: CALL_OW 313
8164: ST_TO_ADDR
// if insideUnits > 0 then
8165: LD_VAR 0 10
8169: PUSH
8170: LD_INT 0
8172: GREATER
8173: IFFALSE 8197
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8175: LD_VAR 0 10
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PPUSH
8184: LD_VAR 0 7
8188: PUSH
8189: LD_INT 1
8191: ARRAY
8192: PPUSH
8193: CALL_OW 120
// if soldiers_list > 0 then
8197: LD_VAR 0 6
8201: PUSH
8202: LD_INT 0
8204: GREATER
8205: IFFALSE 8229
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8207: LD_VAR 0 6
8211: PUSH
8212: LD_INT 1
8214: ARRAY
8215: PPUSH
8216: LD_VAR 0 7
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: CALL_OW 120
// end ;
8229: GO 8147
8231: POP
8232: POP
// end ; end ; end ;
8233: LD_VAR 0 3
8237: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
// for i = 1 to infantryCount do
8246: LD_ADDR_VAR 0 8
8250: PUSH
8251: DOUBLE
8252: LD_INT 1
8254: DEC
8255: ST_TO_ADDR
8256: LD_VAR 0 5
8260: PUSH
8261: FOR_TO
8262: IFFALSE 8378
// begin uc_side = side ;
8264: LD_ADDR_OWVAR 20
8268: PUSH
8269: LD_VAR 0 1
8273: ST_TO_ADDR
// uc_nation = nation ;
8274: LD_ADDR_OWVAR 21
8278: PUSH
8279: LD_VAR 0 3
8283: ST_TO_ADDR
// hc_class = 1 ;
8284: LD_ADDR_OWVAR 28
8288: PUSH
8289: LD_INT 1
8291: ST_TO_ADDR
// hc_name =  ;
8292: LD_ADDR_OWVAR 26
8296: PUSH
8297: LD_STRING 
8299: ST_TO_ADDR
// hc_gallery =  ;
8300: LD_ADDR_OWVAR 33
8304: PUSH
8305: LD_STRING 
8307: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8308: LD_INT 0
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_EXP 25
8318: PPUSH
8319: LD_EXP 26
8323: PPUSH
8324: CALL_OW 12
8328: PPUSH
8329: CALL_OW 380
// un = CreateHuman ;
8333: LD_ADDR_VAR 0 10
8337: PUSH
8338: CALL_OW 44
8342: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8343: LD_VAR 0 10
8347: PPUSH
8348: LD_VAR 0 2
8352: PPUSH
8353: LD_INT 0
8355: PPUSH
8356: CALL_OW 49
// defenders_list = defenders_list ^ un ;
8360: LD_ADDR_EXP 32
8364: PUSH
8365: LD_EXP 32
8369: PUSH
8370: LD_VAR 0 10
8374: ADD
8375: ST_TO_ADDR
// end ;
8376: GO 8261
8378: POP
8379: POP
// for i = 1 to vehCount do
8380: LD_ADDR_VAR 0 8
8384: PUSH
8385: DOUBLE
8386: LD_INT 1
8388: DEC
8389: ST_TO_ADDR
8390: LD_VAR 0 6
8394: PUSH
8395: FOR_TO
8396: IFFALSE 8603
// begin uc_side = side ;
8398: LD_ADDR_OWVAR 20
8402: PUSH
8403: LD_VAR 0 1
8407: ST_TO_ADDR
// uc_nation = nation ;
8408: LD_ADDR_OWVAR 21
8412: PUSH
8413: LD_VAR 0 3
8417: ST_TO_ADDR
// vc_Chassis = 22 ;
8418: LD_ADDR_OWVAR 37
8422: PUSH
8423: LD_INT 22
8425: ST_TO_ADDR
// vc_engine = 1 ;
8426: LD_ADDR_OWVAR 39
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// vc_control = 1 ;
8434: LD_ADDR_OWVAR 38
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8442: LD_ADDR_OWVAR 40
8446: PUSH
8447: LD_INT 43
8449: PUSH
8450: LD_INT 44
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 1
8459: PPUSH
8460: LD_INT 2
8462: PPUSH
8463: CALL_OW 12
8467: ARRAY
8468: ST_TO_ADDR
// veh = CreateVehicle ;
8469: LD_ADDR_VAR 0 12
8473: PUSH
8474: CALL_OW 45
8478: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8479: LD_VAR 0 12
8483: PPUSH
8484: LD_VAR 0 2
8488: PPUSH
8489: LD_INT 0
8491: PPUSH
8492: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8496: LD_ADDR_EXP 32
8500: PUSH
8501: LD_EXP 32
8505: PUSH
8506: LD_VAR 0 12
8510: ADD
8511: ST_TO_ADDR
// hc_class = 3 ;
8512: LD_ADDR_OWVAR 28
8516: PUSH
8517: LD_INT 3
8519: ST_TO_ADDR
// hc_name =  ;
8520: LD_ADDR_OWVAR 26
8524: PUSH
8525: LD_STRING 
8527: ST_TO_ADDR
// hc_gallery =  ;
8528: LD_ADDR_OWVAR 33
8532: PUSH
8533: LD_STRING 
8535: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8536: LD_INT 0
8538: PPUSH
8539: LD_INT 3
8541: PPUSH
8542: LD_EXP 25
8546: PPUSH
8547: LD_EXP 26
8551: PPUSH
8552: CALL_OW 12
8556: PPUSH
8557: CALL_OW 380
// un = CreateHuman ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: CALL_OW 44
8570: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8571: LD_VAR 0 10
8575: PPUSH
8576: LD_VAR 0 12
8580: PPUSH
8581: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8585: LD_ADDR_EXP 32
8589: PUSH
8590: LD_EXP 32
8594: PUSH
8595: LD_VAR 0 10
8599: ADD
8600: ST_TO_ADDR
// end ;
8601: GO 8395
8603: POP
8604: POP
// end ;
8605: LD_VAR 0 7
8609: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8610: LD_INT 0
8612: PPUSH
8613: PPUSH
8614: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8615: LD_VAR 0 2
8619: PPUSH
8620: LD_INT 22
8622: PUSH
8623: LD_VAR 0 1
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: PPUSH
8635: CALL_OW 70
8639: PUSH
8640: LD_INT 0
8642: EQUAL
8643: PUSH
8644: LD_EXP 32
8648: PUSH
8649: LD_INT 0
8651: GREATER
8652: AND
8653: IFFALSE 8682
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8655: LD_EXP 32
8659: PPUSH
8660: LD_INT 65
8662: PPUSH
8663: LD_INT 68
8665: PPUSH
8666: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8670: LD_EXP 32
8674: PPUSH
8675: LD_INT 100
8677: PPUSH
8678: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8682: LD_VAR 0 2
8686: PPUSH
8687: LD_INT 22
8689: PUSH
8690: LD_VAR 0 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: EMPTY
8700: LIST
8701: PPUSH
8702: CALL_OW 70
8706: PUSH
8707: LD_INT 0
8709: GREATER
8710: PUSH
8711: LD_EXP 32
8715: PUSH
8716: LD_INT 0
8718: GREATER
8719: AND
8720: IFFALSE 8799
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8722: LD_EXP 32
8726: PPUSH
8727: LD_VAR 0 2
8731: PPUSH
8732: LD_INT 22
8734: PUSH
8735: LD_VAR 0 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: PPUSH
8747: CALL_OW 70
8751: PUSH
8752: LD_INT 1
8754: ARRAY
8755: PPUSH
8756: CALL_OW 250
8760: PPUSH
8761: LD_VAR 0 2
8765: PPUSH
8766: LD_INT 22
8768: PUSH
8769: LD_VAR 0 1
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: PPUSH
8781: CALL_OW 70
8785: PUSH
8786: LD_INT 1
8788: ARRAY
8789: PPUSH
8790: CALL_OW 251
8794: PPUSH
8795: CALL_OW 114
// end ;
8799: LD_VAR 0 3
8803: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8804: LD_INT 0
8806: PPUSH
8807: PPUSH
8808: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8809: LD_INT 22
8811: PUSH
8812: LD_VAR 0 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 21
8823: PUSH
8824: LD_INT 2
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 69
8839: PUSH
8840: LD_VAR 0 3
8844: LESSEQUAL
8845: IFFALSE 8953
// begin for i = 1 to vehCount do
8847: LD_ADDR_VAR 0 9
8851: PUSH
8852: DOUBLE
8853: LD_INT 1
8855: DEC
8856: ST_TO_ADDR
8857: LD_VAR 0 3
8861: PUSH
8862: FOR_TO
8863: IFFALSE 8951
// begin weapon = weaponTab [ i ] ;
8865: LD_ADDR_VAR 0 10
8869: PUSH
8870: LD_VAR 0 4
8874: PUSH
8875: LD_VAR 0 9
8879: ARRAY
8880: ST_TO_ADDR
// if weapon = 46 then
8881: LD_VAR 0 10
8885: PUSH
8886: LD_INT 46
8888: EQUAL
8889: IFFALSE 8920
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8891: LD_VAR 0 2
8895: PPUSH
8896: LD_INT 24
8898: PPUSH
8899: LD_VAR 0 5
8903: PPUSH
8904: LD_VAR 0 6
8908: PPUSH
8909: LD_VAR 0 10
8913: PPUSH
8914: CALL_OW 185
// end else
8918: GO 8949
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8920: LD_VAR 0 2
8924: PPUSH
8925: LD_VAR 0 7
8929: PPUSH
8930: LD_VAR 0 5
8934: PPUSH
8935: LD_VAR 0 6
8939: PPUSH
8940: LD_VAR 0 10
8944: PPUSH
8945: CALL_OW 185
// end ; end ;
8949: GO 8862
8951: POP
8952: POP
// end ; end ;
8953: LD_VAR 0 8
8957: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
8958: LD_INT 0
8960: PPUSH
8961: PPUSH
8962: PPUSH
8963: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8964: LD_ADDR_VAR 0 8
8968: PUSH
8969: LD_INT 22
8971: PUSH
8972: LD_VAR 0 1
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 21
8983: PUSH
8984: LD_INT 2
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: LD_INT 24
8996: PUSH
8997: LD_INT 650
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 69
9017: ST_TO_ADDR
// if damageVehicles > 0 then
9018: LD_VAR 0 8
9022: PUSH
9023: LD_INT 0
9025: GREATER
9026: IFFALSE 9047
// ComMoveXY ( damageVehicles , repX , repY ) ;
9028: LD_VAR 0 8
9032: PPUSH
9033: LD_VAR 0 3
9037: PPUSH
9038: LD_VAR 0 4
9042: PPUSH
9043: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9047: LD_VAR 0 8
9051: PPUSH
9052: LD_INT 95
9054: PUSH
9055: LD_VAR 0 2
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 3
9066: PUSH
9067: LD_INT 58
9069: PUSH
9070: EMPTY
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 0
9088: GREATER
9089: IFFALSE 9156
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9091: LD_ADDR_VAR 0 6
9095: PUSH
9096: LD_VAR 0 8
9100: PPUSH
9101: LD_INT 95
9103: PUSH
9104: LD_VAR 0 2
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 3
9115: PUSH
9116: LD_INT 58
9118: PUSH
9119: EMPTY
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PPUSH
9130: CALL_OW 72
9134: PUSH
9135: FOR_IN
9136: IFFALSE 9154
// ComExitVehicle ( UnitsInside ( i ) ) ;
9138: LD_VAR 0 6
9142: PPUSH
9143: CALL_OW 313
9147: PPUSH
9148: CALL_OW 121
9152: GO 9135
9154: POP
9155: POP
// end ;
9156: LD_VAR 0 5
9160: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
9165: PPUSH
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9170: LD_ADDR_VAR 0 8
9174: PUSH
9175: LD_INT 22
9177: PUSH
9178: LD_VAR 0 1
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: LD_INT 21
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 24
9199: PUSH
9200: LD_INT 250
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 3
9209: PUSH
9210: LD_INT 58
9212: PUSH
9213: EMPTY
9214: LIST
9215: PUSH
9216: LD_INT 2
9218: PUSH
9219: LD_INT 34
9221: PUSH
9222: LD_INT 43
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 34
9231: PUSH
9232: LD_INT 44
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: LD_INT 34
9241: PUSH
9242: LD_INT 46
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: PPUSH
9266: CALL_OW 69
9270: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9271: LD_INT 22
9273: PUSH
9274: LD_VAR 0 1
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 21
9285: PUSH
9286: LD_INT 2
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 24
9295: PUSH
9296: LD_INT 1000
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 3
9305: PUSH
9306: LD_INT 58
9308: PUSH
9309: EMPTY
9310: LIST
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: LD_INT 34
9317: PUSH
9318: LD_INT 43
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 34
9327: PUSH
9328: LD_INT 44
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: LD_INT 34
9337: PUSH
9338: LD_INT 46
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: PPUSH
9362: CALL_OW 69
9366: PUSH
9367: LD_INT 5
9369: PUSH
9370: LD_INT 6
9372: PUSH
9373: LD_INT 7
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: LD_OWVAR 67
9385: ARRAY
9386: GREATEREQUAL
9387: IFFALSE 9952
// repeat wait ( 0 0$1 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9396: LD_ADDR_VAR 0 8
9400: PUSH
9401: LD_INT 22
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 2
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 24
9425: PUSH
9426: LD_INT 250
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 34
9438: PUSH
9439: LD_INT 43
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 34
9448: PUSH
9449: LD_INT 44
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 34
9458: PUSH
9459: LD_INT 46
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: LD_INT 58
9477: PUSH
9478: EMPTY
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: PPUSH
9492: CALL_OW 69
9496: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 95
9511: PUSH
9512: LD_VAR 0 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 69
9529: NOT
9530: PUSH
9531: LD_VAR 0 11
9535: PUSH
9536: LD_INT 0
9538: EQUAL
9539: AND
9540: IFFALSE 9595
// for i := 1 to wayX do
9542: LD_ADDR_VAR 0 6
9546: PUSH
9547: DOUBLE
9548: LD_INT 1
9550: DEC
9551: ST_TO_ADDR
9552: LD_VAR 0 3
9556: PUSH
9557: FOR_TO
9558: IFFALSE 9593
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9560: LD_VAR 0 8
9564: PPUSH
9565: LD_VAR 0 3
9569: PUSH
9570: LD_VAR 0 6
9574: ARRAY
9575: PPUSH
9576: LD_VAR 0 4
9580: PUSH
9581: LD_VAR 0 6
9585: ARRAY
9586: PPUSH
9587: CALL_OW 114
9591: GO 9557
9593: POP
9594: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9595: LD_INT 22
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 95
9609: PUSH
9610: LD_VAR 0 2
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PPUSH
9623: CALL_OW 69
9627: IFFALSE 9851
// begin seeEnemy = 1 ;
9629: LD_ADDR_VAR 0 11
9633: PUSH
9634: LD_INT 1
9636: ST_TO_ADDR
// for j in vehiclesOK do
9637: LD_ADDR_VAR 0 7
9641: PUSH
9642: LD_VAR 0 8
9646: PUSH
9647: FOR_IN
9648: IFFALSE 9849
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9650: LD_ADDR_VAR 0 9
9654: PUSH
9655: LD_INT 81
9657: PUSH
9658: LD_VAR 0 1
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 101
9669: PUSH
9670: LD_INT 1
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 69
9685: PPUSH
9686: LD_VAR 0 7
9690: PPUSH
9691: CALL_OW 74
9695: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9696: LD_ADDR_VAR 0 10
9700: PUSH
9701: LD_INT 81
9703: PUSH
9704: LD_VAR 0 1
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 101
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 2
9725: PUSH
9726: LD_INT 59
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: LD_INT 21
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: LD_INT 21
9744: PUSH
9745: LD_INT 2
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: PPUSH
9766: CALL_OW 69
9770: PPUSH
9771: LD_VAR 0 7
9775: PPUSH
9776: CALL_OW 74
9780: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9781: LD_VAR 0 7
9785: PPUSH
9786: LD_VAR 0 9
9790: PPUSH
9791: CALL_OW 296
9795: PUSH
9796: LD_INT 8
9798: PLUS
9799: PUSH
9800: LD_VAR 0 7
9804: PPUSH
9805: LD_VAR 0 10
9809: PPUSH
9810: CALL_OW 296
9814: LESS
9815: IFFALSE 9833
// ComAttackUnit ( j , target1 ) else
9817: LD_VAR 0 7
9821: PPUSH
9822: LD_VAR 0 9
9826: PPUSH
9827: CALL_OW 115
9831: GO 9847
// ComAttackUnit ( j , target2 ) ;
9833: LD_VAR 0 7
9837: PPUSH
9838: LD_VAR 0 10
9842: PPUSH
9843: CALL_OW 115
// end ;
9847: GO 9647
9849: POP
9850: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9851: LD_INT 22
9853: PUSH
9854: LD_VAR 0 1
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 2
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 24
9875: PUSH
9876: LD_INT 250
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: LD_INT 34
9888: PUSH
9889: LD_INT 43
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 34
9898: PUSH
9899: LD_INT 44
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 34
9908: PUSH
9909: LD_INT 46
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 3
9924: PUSH
9925: LD_INT 58
9927: PUSH
9928: EMPTY
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: PPUSH
9942: CALL_OW 69
9946: PUSH
9947: LD_INT 0
9949: EQUAL
9950: IFFALSE 9389
// seeEnemy = 0 ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 0
9959: ST_TO_ADDR
// end ;
9960: LD_VAR 0 5
9964: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
9965: LD_INT 0
9967: PPUSH
9968: PPUSH
9969: PPUSH
9970: PPUSH
9971: PPUSH
9972: PPUSH
// repeat wait ( 0 0$1 ) ;
9973: LD_INT 35
9975: PPUSH
9976: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
9980: LD_ADDR_VAR 0 7
9984: PUSH
9985: LD_INT 22
9987: PUSH
9988: LD_VAR 0 1
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 21
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 24
10009: PUSH
10010: LD_INT 651
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 69
10026: ST_TO_ADDR
// for j in vehiclesOK do
10027: LD_ADDR_VAR 0 4
10031: PUSH
10032: LD_VAR 0 7
10036: PUSH
10037: FOR_IN
10038: IFFALSE 10239
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10040: LD_ADDR_VAR 0 5
10044: PUSH
10045: LD_INT 81
10047: PUSH
10048: LD_VAR 0 1
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PUSH
10057: LD_INT 101
10059: PUSH
10060: LD_INT 1
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 69
10075: PPUSH
10076: LD_VAR 0 4
10080: PPUSH
10081: CALL_OW 74
10085: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10086: LD_ADDR_VAR 0 6
10090: PUSH
10091: LD_INT 81
10093: PUSH
10094: LD_VAR 0 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 101
10105: PUSH
10106: LD_INT 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 2
10115: PUSH
10116: LD_INT 59
10118: PUSH
10119: EMPTY
10120: LIST
10121: PUSH
10122: LD_INT 21
10124: PUSH
10125: LD_INT 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 21
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: PPUSH
10156: CALL_OW 69
10160: PPUSH
10161: LD_VAR 0 4
10165: PPUSH
10166: CALL_OW 74
10170: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10171: LD_VAR 0 4
10175: PPUSH
10176: LD_VAR 0 5
10180: PPUSH
10181: CALL_OW 296
10185: PUSH
10186: LD_INT 8
10188: PLUS
10189: PUSH
10190: LD_VAR 0 4
10194: PPUSH
10195: LD_VAR 0 6
10199: PPUSH
10200: CALL_OW 296
10204: LESS
10205: IFFALSE 10223
// ComAttackUnit ( j , target1 ) else
10207: LD_VAR 0 4
10211: PPUSH
10212: LD_VAR 0 5
10216: PPUSH
10217: CALL_OW 115
10221: GO 10237
// ComAttackUnit ( j , target2 ) ;
10223: LD_VAR 0 4
10227: PPUSH
10228: LD_VAR 0 6
10232: PPUSH
10233: CALL_OW 115
// end ;
10237: GO 10037
10239: POP
10240: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10241: LD_INT 22
10243: PUSH
10244: LD_VAR 0 1
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 24
10265: PUSH
10266: LD_INT 250
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: PUSH
10283: LD_INT 0
10285: EQUAL
10286: IFFALSE 9973
// end ;
10288: LD_VAR 0 2
10292: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10293: LD_INT 0
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
10299: PPUSH
10300: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10301: LD_ADDR_VAR 0 8
10305: PUSH
10306: LD_VAR 0 2
10310: PPUSH
10311: CALL_OW 313
10315: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10316: LD_ADDR_VAR 0 9
10320: PUSH
10321: LD_VAR 0 3
10325: PPUSH
10326: LD_INT 22
10328: PUSH
10329: LD_VAR 0 1
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 25
10340: PUSH
10341: LD_INT 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 24
10350: PUSH
10351: LD_INT 750
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 3
10360: PUSH
10361: LD_INT 54
10363: PUSH
10364: EMPTY
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: PPUSH
10377: CALL_OW 70
10381: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10382: LD_ADDR_VAR 0 6
10386: PUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 22
10394: PUSH
10395: LD_VAR 0 1
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 21
10406: PUSH
10407: LD_INT 3
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: LD_INT 24
10419: PUSH
10420: LD_INT 1000
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 70
10443: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10444: LD_VAR 0 6
10448: NOT
10449: PUSH
10450: LD_INT 22
10452: PUSH
10453: LD_VAR 0 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 24
10474: PUSH
10475: LD_INT 250
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: NOT
10492: AND
10493: IFFALSE 10497
// exit ;
10495: GO 10679
// if buildings_list > 0 and engineerOkInside then
10497: LD_VAR 0 6
10501: PUSH
10502: LD_INT 0
10504: GREATER
10505: PUSH
10506: LD_VAR 0 8
10510: AND
10511: IFFALSE 10522
// ComExitBuilding ( engineerOkInside ) ;
10513: LD_VAR 0 8
10517: PPUSH
10518: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10522: LD_VAR 0 6
10526: PUSH
10527: LD_INT 0
10529: GREATER
10530: PUSH
10531: LD_VAR 0 9
10535: PUSH
10536: LD_INT 0
10538: GREATER
10539: AND
10540: IFFALSE 10560
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10542: LD_VAR 0 9
10546: PPUSH
10547: LD_VAR 0 6
10551: PUSH
10552: LD_INT 1
10554: ARRAY
10555: PPUSH
10556: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10560: LD_VAR 0 6
10564: PUSH
10565: LD_INT 0
10567: EQUAL
10568: PUSH
10569: LD_VAR 0 4
10573: PUSH
10574: LD_INT 0
10576: EQUAL
10577: AND
10578: PUSH
10579: LD_VAR 0 9
10583: PUSH
10584: LD_INT 0
10586: GREATER
10587: AND
10588: IFFALSE 10604
// ComEnterUnit ( engineerOkOutside , building ) ;
10590: LD_VAR 0 9
10594: PPUSH
10595: LD_VAR 0 2
10599: PPUSH
10600: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10604: LD_VAR 0 9
10608: PUSH
10609: LD_INT 0
10611: GREATER
10612: PUSH
10613: LD_VAR 0 6
10617: PUSH
10618: LD_INT 0
10620: EQUAL
10621: AND
10622: PUSH
10623: LD_VAR 0 4
10627: PUSH
10628: LD_INT 0
10630: GREATER
10631: AND
10632: IFFALSE 10679
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10634: LD_VAR 0 9
10638: PPUSH
10639: LD_VAR 0 4
10643: PUSH
10644: LD_INT 1
10646: ARRAY
10647: PPUSH
10648: LD_VAR 0 4
10652: PUSH
10653: LD_INT 2
10655: ARRAY
10656: PPUSH
10657: LD_VAR 0 4
10661: PUSH
10662: LD_INT 3
10664: ARRAY
10665: PPUSH
10666: LD_VAR 0 4
10670: PUSH
10671: LD_INT 4
10673: ARRAY
10674: PPUSH
10675: CALL_OW 145
// end ;
10679: LD_VAR 0 5
10683: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10684: LD_INT 0
10686: PPUSH
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10695: LD_ADDR_VAR 0 6
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_VAR 0 1
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 25
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 23
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 24
10734: PUSH
10735: LD_INT 251
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: PPUSH
10748: CALL_OW 69
10752: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10753: LD_ADDR_VAR 0 7
10757: PUSH
10758: LD_VAR 0 3
10762: PPUSH
10763: LD_INT 22
10765: PUSH
10766: LD_VAR 0 1
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 23
10777: PUSH
10778: LD_INT 2
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 25
10787: PUSH
10788: LD_INT 4
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 50
10797: PUSH
10798: EMPTY
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 70
10811: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10812: LD_ADDR_VAR 0 10
10816: PUSH
10817: LD_VAR 0 3
10821: PPUSH
10822: LD_INT 22
10824: PUSH
10825: LD_VAR 0 1
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 21
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 3
10846: PUSH
10847: LD_INT 25
10849: PUSH
10850: LD_INT 3
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 3
10863: PUSH
10864: LD_INT 24
10866: PUSH
10867: LD_INT 750
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 70
10888: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10889: LD_ADDR_VAR 0 11
10893: PUSH
10894: LD_VAR 0 2
10898: PPUSH
10899: LD_INT 22
10901: PUSH
10902: LD_VAR 0 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: LD_INT 21
10913: PUSH
10914: LD_INT 1
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 3
10923: PUSH
10924: LD_INT 25
10926: PUSH
10927: LD_INT 3
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 3
10940: PUSH
10941: LD_INT 24
10943: PUSH
10944: LD_INT 1000
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PPUSH
10961: CALL_OW 70
10965: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10966: LD_VAR 0 10
10970: NOT
10971: PUSH
10972: LD_VAR 0 11
10976: NOT
10977: AND
10978: PUSH
10979: LD_VAR 0 6
10983: NOT
10984: AND
10985: IFFALSE 10989
// exit ;
10987: GO 11223
// if damageUnits > 0 and sci_list > 0 then
10989: LD_VAR 0 10
10993: PUSH
10994: LD_INT 0
10996: GREATER
10997: PUSH
10998: LD_VAR 0 6
11002: PUSH
11003: LD_INT 0
11005: GREATER
11006: AND
11007: IFFALSE 11023
// ComMoveToArea ( damageUnits , healArea ) ;
11009: LD_VAR 0 10
11013: PPUSH
11014: LD_VAR 0 2
11018: PPUSH
11019: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11023: LD_VAR 0 11
11027: PUSH
11028: LD_INT 0
11030: GREATER
11031: PUSH
11032: LD_VAR 0 6
11036: PUSH
11037: LD_INT 0
11039: GREATER
11040: AND
11041: IFFALSE 11052
// ComExitBuilding ( sci_list ) ;
11043: LD_VAR 0 6
11047: PPUSH
11048: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11052: LD_VAR 0 11
11056: PUSH
11057: LD_INT 0
11059: GREATER
11060: PUSH
11061: LD_VAR 0 7
11065: PUSH
11066: LD_INT 0
11068: GREATER
11069: AND
11070: IFFALSE 11090
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11072: LD_VAR 0 7
11076: PPUSH
11077: LD_VAR 0 11
11081: PUSH
11082: LD_INT 1
11084: ARRAY
11085: PPUSH
11086: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11090: LD_VAR 0 10
11094: PUSH
11095: LD_INT 0
11097: EQUAL
11098: PUSH
11099: LD_VAR 0 11
11103: PUSH
11104: LD_INT 0
11106: EQUAL
11107: AND
11108: PUSH
11109: LD_VAR 0 7
11113: PUSH
11114: LD_INT 0
11116: GREATER
11117: AND
11118: IFFALSE 11223
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11120: LD_ADDR_VAR 0 12
11124: PUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 8
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11167: LD_ADDR_VAR 0 13
11171: PUSH
11172: LD_INT 1
11174: PPUSH
11175: LD_VAR 0 12
11179: PPUSH
11180: CALL_OW 12
11184: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11185: LD_VAR 0 7
11189: PPUSH
11190: LD_INT 3
11192: PUSH
11193: LD_INT 60
11195: PUSH
11196: EMPTY
11197: LIST
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 72
11207: PPUSH
11208: LD_VAR 0 12
11212: PUSH
11213: LD_VAR 0 13
11217: ARRAY
11218: PPUSH
11219: CALL_OW 120
// end ; end ;
11223: LD_VAR 0 5
11227: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11228: LD_INT 0
11230: PPUSH
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11235: LD_ADDR_VAR 0 6
11239: PUSH
11240: LD_INT 22
11242: PUSH
11243: LD_VAR 0 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 30
11257: PUSH
11258: LD_INT 31
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 30
11267: PUSH
11268: LD_INT 32
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 30
11277: PUSH
11278: LD_INT 33
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 30
11287: PUSH
11288: LD_INT 4
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 30
11297: PUSH
11298: LD_INT 5
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11322: LD_ADDR_VAR 0 7
11326: PUSH
11327: LD_INT 22
11329: PUSH
11330: LD_VAR 0 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 21
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 58
11351: PUSH
11352: EMPTY
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 69
11364: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11365: LD_VAR 0 6
11369: PUSH
11370: LD_INT 0
11372: GREATER
11373: PUSH
11374: LD_VAR 0 7
11378: PUSH
11379: LD_INT 0
11381: GREATER
11382: AND
11383: IFFALSE 11453
// begin for i in turretsList do
11385: LD_ADDR_VAR 0 4
11389: PUSH
11390: LD_VAR 0 6
11394: PUSH
11395: FOR_IN
11396: IFFALSE 11451
// begin for j in enemyBuildings do
11398: LD_ADDR_VAR 0 5
11402: PUSH
11403: LD_VAR 0 7
11407: PUSH
11408: FOR_IN
11409: IFFALSE 11447
// begin if GetDistUnits ( i , j ) < 20 then
11411: LD_VAR 0 4
11415: PPUSH
11416: LD_VAR 0 5
11420: PPUSH
11421: CALL_OW 296
11425: PUSH
11426: LD_INT 20
11428: LESS
11429: IFFALSE 11445
// begin ComAttackUnit ( i , j ) ;
11431: LD_VAR 0 4
11435: PPUSH
11436: LD_VAR 0 5
11440: PPUSH
11441: CALL_OW 115
// end ; end ;
11445: GO 11408
11447: POP
11448: POP
// end ;
11449: GO 11395
11451: POP
11452: POP
// end ; end ;
11453: LD_VAR 0 3
11457: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11458: LD_INT 0
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
// for i = 1 to medicCount do
11471: LD_ADDR_VAR 0 14
11475: PUSH
11476: DOUBLE
11477: LD_INT 1
11479: DEC
11480: ST_TO_ADDR
11481: LD_VAR 0 7
11485: PUSH
11486: FOR_TO
11487: IFFALSE 11569
// begin uc_side = side ;
11489: LD_ADDR_OWVAR 20
11493: PUSH
11494: LD_VAR 0 1
11498: ST_TO_ADDR
// uc_nation = nation ;
11499: LD_ADDR_OWVAR 21
11503: PUSH
11504: LD_VAR 0 2
11508: ST_TO_ADDR
// hc_name =  ;
11509: LD_ADDR_OWVAR 26
11513: PUSH
11514: LD_STRING 
11516: ST_TO_ADDR
// hc_gallery =  ;
11517: LD_ADDR_OWVAR 33
11521: PUSH
11522: LD_STRING 
11524: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11525: LD_INT 0
11527: PPUSH
11528: LD_INT 4
11530: PPUSH
11531: LD_VAR 0 8
11535: PPUSH
11536: CALL_OW 380
// un = CreateHuman ;
11540: LD_ADDR_VAR 0 16
11544: PUSH
11545: CALL_OW 44
11549: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11550: LD_VAR 0 16
11554: PPUSH
11555: LD_VAR 0 9
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 49
// end ;
11567: GO 11486
11569: POP
11570: POP
// for i = 1 to soldierCount do
11571: LD_ADDR_VAR 0 14
11575: PUSH
11576: DOUBLE
11577: LD_INT 1
11579: DEC
11580: ST_TO_ADDR
11581: LD_VAR 0 3
11585: PUSH
11586: FOR_TO
11587: IFFALSE 11669
// begin uc_side = side ;
11589: LD_ADDR_OWVAR 20
11593: PUSH
11594: LD_VAR 0 1
11598: ST_TO_ADDR
// uc_nation = nation ;
11599: LD_ADDR_OWVAR 21
11603: PUSH
11604: LD_VAR 0 2
11608: ST_TO_ADDR
// hc_name =  ;
11609: LD_ADDR_OWVAR 26
11613: PUSH
11614: LD_STRING 
11616: ST_TO_ADDR
// hc_gallery =  ;
11617: LD_ADDR_OWVAR 33
11621: PUSH
11622: LD_STRING 
11624: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11625: LD_INT 0
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: LD_VAR 0 8
11635: PPUSH
11636: CALL_OW 380
// un = CreateHuman ;
11640: LD_ADDR_VAR 0 16
11644: PUSH
11645: CALL_OW 44
11649: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11650: LD_VAR 0 16
11654: PPUSH
11655: LD_VAR 0 9
11659: PPUSH
11660: LD_INT 0
11662: PPUSH
11663: CALL_OW 49
// end ;
11667: GO 11586
11669: POP
11670: POP
// for i = 1 to sniperCount do
11671: LD_ADDR_VAR 0 14
11675: PUSH
11676: DOUBLE
11677: LD_INT 1
11679: DEC
11680: ST_TO_ADDR
11681: LD_VAR 0 4
11685: PUSH
11686: FOR_TO
11687: IFFALSE 11769
// begin uc_side = side ;
11689: LD_ADDR_OWVAR 20
11693: PUSH
11694: LD_VAR 0 1
11698: ST_TO_ADDR
// uc_nation = nation ;
11699: LD_ADDR_OWVAR 21
11703: PUSH
11704: LD_VAR 0 2
11708: ST_TO_ADDR
// hc_name =  ;
11709: LD_ADDR_OWVAR 26
11713: PUSH
11714: LD_STRING 
11716: ST_TO_ADDR
// hc_gallery =  ;
11717: LD_ADDR_OWVAR 33
11721: PUSH
11722: LD_STRING 
11724: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11725: LD_INT 0
11727: PPUSH
11728: LD_INT 5
11730: PPUSH
11731: LD_VAR 0 8
11735: PPUSH
11736: CALL_OW 380
// un = CreateHuman ;
11740: LD_ADDR_VAR 0 16
11744: PUSH
11745: CALL_OW 44
11749: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11750: LD_VAR 0 16
11754: PPUSH
11755: LD_VAR 0 9
11759: PPUSH
11760: LD_INT 0
11762: PPUSH
11763: CALL_OW 49
// end ;
11767: GO 11686
11769: POP
11770: POP
// for i = 1 to bazookCount do
11771: LD_ADDR_VAR 0 14
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_VAR 0 5
11785: PUSH
11786: FOR_TO
11787: IFFALSE 11869
// begin uc_side = side ;
11789: LD_ADDR_OWVAR 20
11793: PUSH
11794: LD_VAR 0 1
11798: ST_TO_ADDR
// uc_nation = nation ;
11799: LD_ADDR_OWVAR 21
11803: PUSH
11804: LD_VAR 0 2
11808: ST_TO_ADDR
// hc_name =  ;
11809: LD_ADDR_OWVAR 26
11813: PUSH
11814: LD_STRING 
11816: ST_TO_ADDR
// hc_gallery =  ;
11817: LD_ADDR_OWVAR 33
11821: PUSH
11822: LD_STRING 
11824: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11825: LD_INT 0
11827: PPUSH
11828: LD_INT 9
11830: PPUSH
11831: LD_VAR 0 8
11835: PPUSH
11836: CALL_OW 380
// un = CreateHuman ;
11840: LD_ADDR_VAR 0 16
11844: PUSH
11845: CALL_OW 44
11849: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11850: LD_VAR 0 16
11854: PPUSH
11855: LD_VAR 0 9
11859: PPUSH
11860: LD_INT 0
11862: PPUSH
11863: CALL_OW 49
// end ;
11867: GO 11786
11869: POP
11870: POP
// for i = 1 to mortalCount do
11871: LD_ADDR_VAR 0 14
11875: PUSH
11876: DOUBLE
11877: LD_INT 1
11879: DEC
11880: ST_TO_ADDR
11881: LD_VAR 0 6
11885: PUSH
11886: FOR_TO
11887: IFFALSE 11969
// begin uc_side = side ;
11889: LD_ADDR_OWVAR 20
11893: PUSH
11894: LD_VAR 0 1
11898: ST_TO_ADDR
// uc_nation = nation ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_VAR 0 2
11908: ST_TO_ADDR
// hc_name =  ;
11909: LD_ADDR_OWVAR 26
11913: PUSH
11914: LD_STRING 
11916: ST_TO_ADDR
// hc_gallery =  ;
11917: LD_ADDR_OWVAR 33
11921: PUSH
11922: LD_STRING 
11924: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11925: LD_INT 0
11927: PPUSH
11928: LD_INT 8
11930: PPUSH
11931: LD_VAR 0 8
11935: PPUSH
11936: CALL_OW 380
// un = CreateHuman ;
11940: LD_ADDR_VAR 0 16
11944: PUSH
11945: CALL_OW 44
11949: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11950: LD_VAR 0 16
11954: PPUSH
11955: LD_VAR 0 9
11959: PPUSH
11960: LD_INT 0
11962: PPUSH
11963: CALL_OW 49
// end ;
11967: GO 11886
11969: POP
11970: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11971: LD_ADDR_VAR 0 19
11975: PUSH
11976: LD_INT 22
11978: PUSH
11979: LD_VAR 0 1
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 25
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 25
12003: PUSH
12004: LD_INT 5
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 8
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 25
12023: PUSH
12024: LD_INT 9
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12047: LD_ADDR_VAR 0 18
12051: PUSH
12052: LD_INT 22
12054: PUSH
12055: LD_VAR 0 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 25
12066: PUSH
12067: LD_INT 4
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PPUSH
12078: CALL_OW 69
12082: ST_TO_ADDR
// for i in medic_list do
12083: LD_ADDR_VAR 0 14
12087: PUSH
12088: LD_VAR 0 18
12092: PUSH
12093: FOR_IN
12094: IFFALSE 12112
// ComMoveToArea ( i , healArea ) ;
12096: LD_VAR 0 14
12100: PPUSH
12101: LD_VAR 0 10
12105: PPUSH
12106: CALL_OW 113
12110: GO 12093
12112: POP
12113: POP
// if strategy = 1 then
12114: LD_VAR 0 12
12118: PUSH
12119: LD_INT 1
12121: EQUAL
12122: IFFALSE 12668
// begin repeat wait ( 0 0$3 ) ;
12124: LD_INT 105
12126: PPUSH
12127: CALL_OW 67
// for i in soldiersOK_list do
12131: LD_ADDR_VAR 0 14
12135: PUSH
12136: LD_VAR 0 19
12140: PUSH
12141: FOR_IN
12142: IFFALSE 12206
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12144: LD_VAR 0 14
12148: PPUSH
12149: LD_INT 91
12151: PPUSH
12152: LD_INT 63
12154: PPUSH
12155: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12159: LD_VAR 0 14
12163: PPUSH
12164: LD_INT 101
12166: PPUSH
12167: LD_INT 53
12169: PPUSH
12170: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12174: LD_VAR 0 14
12178: PPUSH
12179: LD_INT 75
12181: PPUSH
12182: LD_INT 23
12184: PPUSH
12185: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12189: LD_VAR 0 14
12193: PPUSH
12194: LD_INT 78
12196: PPUSH
12197: LD_INT 8
12199: PPUSH
12200: CALL_OW 174
// end ;
12204: GO 12141
12206: POP
12207: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12208: LD_INT 12
12210: PPUSH
12211: LD_INT 22
12213: PUSH
12214: LD_VAR 0 1
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 70
12227: PUSH
12228: LD_INT 2
12230: GREATER
12231: IFFALSE 12124
// repeat wait ( 0 0$1 ) ;
12233: LD_INT 35
12235: PPUSH
12236: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12240: LD_ADDR_VAR 0 17
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_VAR 0 1
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 1
12259: PUSH
12260: LD_INT 3
12262: PUSH
12263: LD_INT 24
12265: PUSH
12266: LD_INT 550
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 24
12279: PUSH
12280: LD_INT 250
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 69
12300: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12301: LD_ADDR_VAR 0 19
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: LD_INT 25
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 5
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 8
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 9
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 24
12370: PUSH
12371: LD_INT 1000
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 69
12387: ST_TO_ADDR
// if medicCount > 0 then
12388: LD_VAR 0 7
12392: PUSH
12393: LD_INT 0
12395: GREATER
12396: IFFALSE 12470
// begin if damageUnit_list > 0 then
12398: LD_VAR 0 17
12402: PUSH
12403: LD_INT 0
12405: GREATER
12406: IFFALSE 12470
// begin for i in damageUnit_list do
12408: LD_ADDR_VAR 0 14
12412: PUSH
12413: LD_VAR 0 17
12417: PUSH
12418: FOR_IN
12419: IFFALSE 12468
// begin ComMoveToArea ( i , healArea ) ;
12421: LD_VAR 0 14
12425: PPUSH
12426: LD_VAR 0 10
12430: PPUSH
12431: CALL_OW 113
// for j in medic_list do
12435: LD_ADDR_VAR 0 15
12439: PUSH
12440: LD_VAR 0 18
12444: PUSH
12445: FOR_IN
12446: IFFALSE 12464
// AddComHeal ( j , i ) ;
12448: LD_VAR 0 15
12452: PPUSH
12453: LD_VAR 0 14
12457: PPUSH
12458: CALL_OW 188
12462: GO 12445
12464: POP
12465: POP
// end ;
12466: GO 12418
12468: POP
12469: POP
// end ; end ; for i in soldiersOK_list do
12470: LD_ADDR_VAR 0 14
12474: PUSH
12475: LD_VAR 0 19
12479: PUSH
12480: FOR_IN
12481: IFFALSE 12657
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12483: LD_ADDR_VAR 0 22
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_VAR 0 11
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 69
12504: PPUSH
12505: LD_VAR 0 14
12509: PPUSH
12510: CALL_OW 74
12514: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12515: LD_ADDR_VAR 0 23
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_VAR 0 11
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: LD_INT 59
12537: PUSH
12538: EMPTY
12539: LIST
12540: PUSH
12541: LD_INT 21
12543: PUSH
12544: LD_INT 1
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 21
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: PPUSH
12574: CALL_OW 69
12578: PPUSH
12579: LD_VAR 0 14
12583: PPUSH
12584: CALL_OW 74
12588: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12589: LD_VAR 0 14
12593: PPUSH
12594: LD_VAR 0 22
12598: PPUSH
12599: CALL_OW 296
12603: PUSH
12604: LD_INT 6
12606: PLUS
12607: PUSH
12608: LD_VAR 0 14
12612: PPUSH
12613: LD_VAR 0 23
12617: PPUSH
12618: CALL_OW 296
12622: LESS
12623: IFFALSE 12641
// begin ComAttackUnit ( i , target1 ) ;
12625: LD_VAR 0 14
12629: PPUSH
12630: LD_VAR 0 22
12634: PPUSH
12635: CALL_OW 115
// end else
12639: GO 12655
// begin ComAttackUnit ( i , target2 ) ;
12641: LD_VAR 0 14
12645: PPUSH
12646: LD_VAR 0 23
12650: PPUSH
12651: CALL_OW 115
// end ; end ;
12655: GO 12480
12657: POP
12658: POP
// until soldiersOK_list = [ ] ;
12659: LD_VAR 0 19
12663: PUSH
12664: EMPTY
12665: EQUAL
12666: IFFALSE 12233
// end ; if strategy = 2 then
12668: LD_VAR 0 12
12672: PUSH
12673: LD_INT 2
12675: EQUAL
12676: IFFALSE 13192
// begin repeat wait ( 0 0$1 ) ;
12678: LD_INT 35
12680: PPUSH
12681: CALL_OW 67
// for i in soldiersOK_list do
12685: LD_ADDR_VAR 0 14
12689: PUSH
12690: LD_VAR 0 19
12694: PUSH
12695: FOR_IN
12696: IFFALSE 12730
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12698: LD_VAR 0 14
12702: PPUSH
12703: LD_INT 91
12705: PPUSH
12706: LD_INT 63
12708: PPUSH
12709: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12713: LD_VAR 0 14
12717: PPUSH
12718: LD_INT 75
12720: PPUSH
12721: LD_INT 33
12723: PPUSH
12724: CALL_OW 174
// end ;
12728: GO 12695
12730: POP
12731: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12732: LD_INT 13
12734: PPUSH
12735: LD_INT 22
12737: PUSH
12738: LD_VAR 0 1
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PPUSH
12747: CALL_OW 70
12751: PUSH
12752: LD_INT 2
12754: GREATER
12755: IFFALSE 12678
// repeat wait ( 0 0$3 ) ;
12757: LD_INT 105
12759: PPUSH
12760: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12764: LD_ADDR_VAR 0 17
12768: PUSH
12769: LD_INT 22
12771: PUSH
12772: LD_VAR 0 1
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 1
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: LD_INT 24
12789: PUSH
12790: LD_INT 550
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 24
12803: PUSH
12804: LD_INT 250
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PPUSH
12820: CALL_OW 69
12824: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12825: LD_ADDR_VAR 0 19
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_VAR 0 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: LD_INT 25
12847: PUSH
12848: LD_INT 1
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: LD_INT 5
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 25
12867: PUSH
12868: LD_INT 8
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 25
12877: PUSH
12878: LD_INT 9
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 24
12894: PUSH
12895: LD_INT 1000
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: ST_TO_ADDR
// if medicCount > 0 then
12912: LD_VAR 0 7
12916: PUSH
12917: LD_INT 0
12919: GREATER
12920: IFFALSE 12994
// begin if damageUnit_list > 0 then
12922: LD_VAR 0 17
12926: PUSH
12927: LD_INT 0
12929: GREATER
12930: IFFALSE 12994
// begin for i in damageUnit_list do
12932: LD_ADDR_VAR 0 14
12936: PUSH
12937: LD_VAR 0 17
12941: PUSH
12942: FOR_IN
12943: IFFALSE 12992
// begin ComMoveToArea ( i , healArea ) ;
12945: LD_VAR 0 14
12949: PPUSH
12950: LD_VAR 0 10
12954: PPUSH
12955: CALL_OW 113
// for j in medic_list do
12959: LD_ADDR_VAR 0 15
12963: PUSH
12964: LD_VAR 0 18
12968: PUSH
12969: FOR_IN
12970: IFFALSE 12988
// AddComHeal ( j , i ) ;
12972: LD_VAR 0 15
12976: PPUSH
12977: LD_VAR 0 14
12981: PPUSH
12982: CALL_OW 188
12986: GO 12969
12988: POP
12989: POP
// end ;
12990: GO 12942
12992: POP
12993: POP
// end ; end ; for i in soldiersOK_list do
12994: LD_ADDR_VAR 0 14
12998: PUSH
12999: LD_VAR 0 19
13003: PUSH
13004: FOR_IN
13005: IFFALSE 13181
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13007: LD_ADDR_VAR 0 22
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_VAR 0 11
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: PPUSH
13029: LD_VAR 0 14
13033: PPUSH
13034: CALL_OW 74
13038: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13039: LD_ADDR_VAR 0 23
13043: PUSH
13044: LD_INT 22
13046: PUSH
13047: LD_VAR 0 11
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 2
13058: PUSH
13059: LD_INT 59
13061: PUSH
13062: EMPTY
13063: LIST
13064: PUSH
13065: LD_INT 21
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 21
13077: PUSH
13078: LD_INT 2
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: PPUSH
13098: CALL_OW 69
13102: PPUSH
13103: LD_VAR 0 14
13107: PPUSH
13108: CALL_OW 74
13112: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13113: LD_VAR 0 14
13117: PPUSH
13118: LD_VAR 0 22
13122: PPUSH
13123: CALL_OW 296
13127: PUSH
13128: LD_INT 6
13130: PLUS
13131: PUSH
13132: LD_VAR 0 14
13136: PPUSH
13137: LD_VAR 0 23
13141: PPUSH
13142: CALL_OW 296
13146: LESS
13147: IFFALSE 13165
// begin ComAttackUnit ( i , target1 ) ;
13149: LD_VAR 0 14
13153: PPUSH
13154: LD_VAR 0 22
13158: PPUSH
13159: CALL_OW 115
// end else
13163: GO 13179
// begin ComAttackUnit ( i , target2 ) ;
13165: LD_VAR 0 14
13169: PPUSH
13170: LD_VAR 0 23
13174: PPUSH
13175: CALL_OW 115
// end ; end ;
13179: GO 13004
13181: POP
13182: POP
// until soldiersOK_list = [ ] ;
13183: LD_VAR 0 19
13187: PUSH
13188: EMPTY
13189: EQUAL
13190: IFFALSE 12757
// end ; if strategy = 3 then
13192: LD_VAR 0 12
13196: PUSH
13197: LD_INT 3
13199: EQUAL
13200: IFFALSE 13746
// begin repeat wait ( 0 0$3 ) ;
13202: LD_INT 105
13204: PPUSH
13205: CALL_OW 67
// for i in soldiersOK_list do
13209: LD_ADDR_VAR 0 14
13213: PUSH
13214: LD_VAR 0 19
13218: PUSH
13219: FOR_IN
13220: IFFALSE 13284
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13222: LD_VAR 0 14
13226: PPUSH
13227: LD_INT 63
13229: PPUSH
13230: LD_INT 71
13232: PPUSH
13233: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13237: LD_VAR 0 14
13241: PPUSH
13242: LD_INT 35
13244: PPUSH
13245: LD_INT 44
13247: PPUSH
13248: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13252: LD_VAR 0 14
13256: PPUSH
13257: LD_INT 23
13259: PPUSH
13260: LD_INT 18
13262: PPUSH
13263: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13267: LD_VAR 0 14
13271: PPUSH
13272: LD_INT 26
13274: PPUSH
13275: LD_INT 12
13277: PPUSH
13278: CALL_OW 174
// end ;
13282: GO 13219
13284: POP
13285: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13286: LD_INT 14
13288: PPUSH
13289: LD_INT 22
13291: PUSH
13292: LD_VAR 0 1
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 70
13305: PUSH
13306: LD_INT 2
13308: GREATER
13309: IFFALSE 13202
// repeat wait ( 0 0$1 ) ;
13311: LD_INT 35
13313: PPUSH
13314: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13318: LD_ADDR_VAR 0 17
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_VAR 0 1
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 1
13337: PUSH
13338: LD_INT 3
13340: PUSH
13341: LD_INT 24
13343: PUSH
13344: LD_INT 550
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 24
13357: PUSH
13358: LD_INT 250
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 69
13378: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13379: LD_ADDR_VAR 0 19
13383: PUSH
13384: LD_INT 22
13386: PUSH
13387: LD_VAR 0 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: LD_INT 25
13401: PUSH
13402: LD_INT 1
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 25
13411: PUSH
13412: LD_INT 5
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 8
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 25
13431: PUSH
13432: LD_INT 9
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 24
13448: PUSH
13449: LD_INT 1000
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: LIST
13460: PPUSH
13461: CALL_OW 69
13465: ST_TO_ADDR
// if medicCount > 0 then
13466: LD_VAR 0 7
13470: PUSH
13471: LD_INT 0
13473: GREATER
13474: IFFALSE 13548
// begin if damageUnit_list > 0 then
13476: LD_VAR 0 17
13480: PUSH
13481: LD_INT 0
13483: GREATER
13484: IFFALSE 13548
// begin for i in damageUnit_list do
13486: LD_ADDR_VAR 0 14
13490: PUSH
13491: LD_VAR 0 17
13495: PUSH
13496: FOR_IN
13497: IFFALSE 13546
// begin ComMoveToArea ( i , healArea ) ;
13499: LD_VAR 0 14
13503: PPUSH
13504: LD_VAR 0 10
13508: PPUSH
13509: CALL_OW 113
// for j in medic_list do
13513: LD_ADDR_VAR 0 15
13517: PUSH
13518: LD_VAR 0 18
13522: PUSH
13523: FOR_IN
13524: IFFALSE 13542
// AddComHeal ( j , i ) ;
13526: LD_VAR 0 15
13530: PPUSH
13531: LD_VAR 0 14
13535: PPUSH
13536: CALL_OW 188
13540: GO 13523
13542: POP
13543: POP
// end ;
13544: GO 13496
13546: POP
13547: POP
// end ; end ; for i in soldiersOK_list do
13548: LD_ADDR_VAR 0 14
13552: PUSH
13553: LD_VAR 0 19
13557: PUSH
13558: FOR_IN
13559: IFFALSE 13735
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13561: LD_ADDR_VAR 0 22
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_VAR 0 11
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PPUSH
13578: CALL_OW 69
13582: PPUSH
13583: LD_VAR 0 14
13587: PPUSH
13588: CALL_OW 74
13592: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13593: LD_ADDR_VAR 0 23
13597: PUSH
13598: LD_INT 22
13600: PUSH
13601: LD_VAR 0 11
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 2
13612: PUSH
13613: LD_INT 59
13615: PUSH
13616: EMPTY
13617: LIST
13618: PUSH
13619: LD_INT 21
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: EMPTY
13650: LIST
13651: PPUSH
13652: CALL_OW 69
13656: PPUSH
13657: LD_VAR 0 14
13661: PPUSH
13662: CALL_OW 74
13666: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13667: LD_VAR 0 14
13671: PPUSH
13672: LD_VAR 0 22
13676: PPUSH
13677: CALL_OW 296
13681: PUSH
13682: LD_INT 6
13684: PLUS
13685: PUSH
13686: LD_VAR 0 14
13690: PPUSH
13691: LD_VAR 0 23
13695: PPUSH
13696: CALL_OW 296
13700: LESS
13701: IFFALSE 13719
// begin ComAttackUnit ( i , target1 ) ;
13703: LD_VAR 0 14
13707: PPUSH
13708: LD_VAR 0 22
13712: PPUSH
13713: CALL_OW 115
// end else
13717: GO 13733
// begin ComAttackUnit ( i , target2 ) ;
13719: LD_VAR 0 14
13723: PPUSH
13724: LD_VAR 0 23
13728: PPUSH
13729: CALL_OW 115
// end ; end ;
13733: GO 13558
13735: POP
13736: POP
// until soldiersOK_list = [ ] ;
13737: LD_VAR 0 19
13741: PUSH
13742: EMPTY
13743: EQUAL
13744: IFFALSE 13311
// end ; end ;
13746: LD_VAR 0 13
13750: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13751: LD_INT 0
13753: PPUSH
13754: PPUSH
13755: PPUSH
13756: PPUSH
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
13763: PPUSH
// amChassisTab = [ ] ;
13764: LD_ADDR_VAR 0 19
13768: PUSH
13769: EMPTY
13770: ST_TO_ADDR
// arChassisTab = [ ] ;
13771: LD_ADDR_VAR 0 18
13775: PUSH
13776: EMPTY
13777: ST_TO_ADDR
// ruChassisTab = [ ] ;
13778: LD_ADDR_VAR 0 17
13782: PUSH
13783: EMPTY
13784: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13785: LD_INT 35
13787: PPUSH
13788: CALL_OW 67
// if nation = 1 then
13792: LD_VAR 0 5
13796: PUSH
13797: LD_INT 1
13799: EQUAL
13800: IFFALSE 14291
// begin uc_side = side ;
13802: LD_ADDR_OWVAR 20
13806: PUSH
13807: LD_VAR 0 2
13811: ST_TO_ADDR
// uc_nation = nation ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_VAR 0 5
13821: ST_TO_ADDR
// vc_engine = vehengine ;
13822: LD_ADDR_OWVAR 39
13826: PUSH
13827: LD_VAR 0 6
13831: ST_TO_ADDR
// vc_control = vehcontrol ;
13832: LD_ADDR_OWVAR 38
13836: PUSH
13837: LD_VAR 0 7
13841: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13842: LD_ADDR_OWVAR 40
13846: PUSH
13847: LD_VAR 0 10
13851: PUSH
13852: LD_INT 1
13854: PPUSH
13855: LD_VAR 0 10
13859: PPUSH
13860: CALL_OW 12
13864: ARRAY
13865: ST_TO_ADDR
// for j = 1 to AMWeapon do
13866: LD_ADDR_VAR 0 14
13870: PUSH
13871: DOUBLE
13872: LD_INT 1
13874: DEC
13875: ST_TO_ADDR
13876: LD_VAR 0 10
13880: PUSH
13881: FOR_TO
13882: IFFALSE 14183
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13884: LD_VAR 0 10
13888: PUSH
13889: LD_VAR 0 14
13893: ARRAY
13894: PUSH
13895: LD_INT 2
13897: EQUAL
13898: PUSH
13899: LD_VAR 0 10
13903: PUSH
13904: LD_VAR 0 14
13908: ARRAY
13909: PUSH
13910: LD_INT 3
13912: EQUAL
13913: OR
13914: IFFALSE 13967
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13916: LD_ADDR_VAR 0 19
13920: PUSH
13921: LD_INT 1
13923: PUSH
13924: LD_INT 2
13926: PUSH
13927: LD_INT 3
13929: PUSH
13930: LD_INT 4
13932: PUSH
13933: LD_INT 5
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13943: LD_ADDR_OWVAR 37
13947: PUSH
13948: LD_VAR 0 19
13952: PUSH
13953: LD_INT 1
13955: PPUSH
13956: LD_VAR 0 19
13960: PPUSH
13961: CALL_OW 12
13965: ARRAY
13966: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13967: LD_VAR 0 10
13971: PUSH
13972: LD_VAR 0 14
13976: ARRAY
13977: PUSH
13978: LD_INT 4
13980: EQUAL
13981: PUSH
13982: LD_VAR 0 10
13986: PUSH
13987: LD_VAR 0 14
13991: ARRAY
13992: PUSH
13993: LD_INT 5
13995: EQUAL
13996: OR
13997: PUSH
13998: LD_VAR 0 10
14002: PUSH
14003: LD_VAR 0 14
14007: ARRAY
14008: PUSH
14009: LD_INT 9
14011: EQUAL
14012: OR
14013: PUSH
14014: LD_VAR 0 10
14018: PUSH
14019: LD_VAR 0 14
14023: ARRAY
14024: PUSH
14025: LD_INT 11
14027: EQUAL
14028: OR
14029: PUSH
14030: LD_VAR 0 10
14034: PUSH
14035: LD_VAR 0 14
14039: ARRAY
14040: PUSH
14041: LD_INT 7
14043: EQUAL
14044: OR
14045: IFFALSE 14094
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14047: LD_ADDR_VAR 0 19
14051: PUSH
14052: LD_INT 2
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: LD_INT 4
14060: PUSH
14061: LD_INT 5
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14070: LD_ADDR_OWVAR 37
14074: PUSH
14075: LD_VAR 0 19
14079: PUSH
14080: LD_INT 1
14082: PPUSH
14083: LD_VAR 0 19
14087: PPUSH
14088: CALL_OW 12
14092: ARRAY
14093: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14094: LD_VAR 0 10
14098: PUSH
14099: LD_VAR 0 14
14103: ARRAY
14104: PUSH
14105: LD_INT 8
14107: EQUAL
14108: PUSH
14109: LD_VAR 0 10
14113: PUSH
14114: LD_VAR 0 14
14118: ARRAY
14119: PUSH
14120: LD_INT 6
14122: EQUAL
14123: OR
14124: PUSH
14125: LD_VAR 0 10
14129: PUSH
14130: LD_VAR 0 14
14134: ARRAY
14135: PUSH
14136: LD_INT 10
14138: EQUAL
14139: OR
14140: IFFALSE 14181
// begin amChassisTab = [ 4 , 5 ] ;
14142: LD_ADDR_VAR 0 19
14146: PUSH
14147: LD_INT 4
14149: PUSH
14150: LD_INT 5
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14157: LD_ADDR_OWVAR 37
14161: PUSH
14162: LD_VAR 0 19
14166: PUSH
14167: LD_INT 1
14169: PPUSH
14170: LD_VAR 0 19
14174: PPUSH
14175: CALL_OW 12
14179: ARRAY
14180: ST_TO_ADDR
// end ; end ;
14181: GO 13881
14183: POP
14184: POP
// veh = CreateVehicle ;
14185: LD_ADDR_VAR 0 16
14189: PUSH
14190: CALL_OW 45
14194: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14195: LD_VAR 0 16
14199: PPUSH
14200: LD_VAR 0 1
14204: PPUSH
14205: LD_INT 0
14207: PPUSH
14208: CALL_OW 49
// if vehControl = 1 then
14212: LD_VAR 0 7
14216: PUSH
14217: LD_INT 1
14219: EQUAL
14220: IFFALSE 14277
// begin hc_gallery =  ;
14222: LD_ADDR_OWVAR 33
14226: PUSH
14227: LD_STRING 
14229: ST_TO_ADDR
// hc_name =  ;
14230: LD_ADDR_OWVAR 26
14234: PUSH
14235: LD_STRING 
14237: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14238: LD_INT 0
14240: PPUSH
14241: LD_INT 3
14243: PPUSH
14244: LD_VAR 0 4
14248: PPUSH
14249: CALL_OW 380
// un = CreateHuman ;
14253: LD_ADDR_VAR 0 15
14257: PUSH
14258: CALL_OW 44
14262: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14263: LD_VAR 0 15
14267: PPUSH
14268: LD_VAR 0 16
14272: PPUSH
14273: CALL_OW 52
// end ; i = i + 1 ;
14277: LD_ADDR_VAR 0 13
14281: PUSH
14282: LD_VAR 0 13
14286: PUSH
14287: LD_INT 1
14289: PLUS
14290: ST_TO_ADDR
// end ; if nation = 2 then
14291: LD_VAR 0 5
14295: PUSH
14296: LD_INT 2
14298: EQUAL
14299: IFFALSE 14723
// begin uc_side = side ;
14301: LD_ADDR_OWVAR 20
14305: PUSH
14306: LD_VAR 0 2
14310: ST_TO_ADDR
// uc_nation = nation ;
14311: LD_ADDR_OWVAR 21
14315: PUSH
14316: LD_VAR 0 5
14320: ST_TO_ADDR
// vc_engine = vehengine ;
14321: LD_ADDR_OWVAR 39
14325: PUSH
14326: LD_VAR 0 6
14330: ST_TO_ADDR
// vc_control = vehcontrol ;
14331: LD_ADDR_OWVAR 38
14335: PUSH
14336: LD_VAR 0 7
14340: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14341: LD_ADDR_OWVAR 40
14345: PUSH
14346: LD_VAR 0 9
14350: PUSH
14351: LD_INT 1
14353: PPUSH
14354: LD_VAR 0 9
14358: PPUSH
14359: CALL_OW 12
14363: ARRAY
14364: ST_TO_ADDR
// for j = 1 to ARWeapons do
14365: LD_ADDR_VAR 0 14
14369: PUSH
14370: DOUBLE
14371: LD_INT 1
14373: DEC
14374: ST_TO_ADDR
14375: LD_VAR 0 9
14379: PUSH
14380: FOR_TO
14381: IFFALSE 14615
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14383: LD_VAR 0 9
14387: PUSH
14388: LD_VAR 0 14
14392: ARRAY
14393: PUSH
14394: LD_INT 24
14396: EQUAL
14397: PUSH
14398: LD_VAR 0 9
14402: PUSH
14403: LD_VAR 0 14
14407: ARRAY
14408: PUSH
14409: LD_INT 22
14411: EQUAL
14412: OR
14413: PUSH
14414: LD_VAR 0 9
14418: PUSH
14419: LD_VAR 0 14
14423: ARRAY
14424: PUSH
14425: LD_INT 23
14427: EQUAL
14428: OR
14429: PUSH
14430: LD_VAR 0 9
14434: PUSH
14435: LD_VAR 0 14
14439: ARRAY
14440: PUSH
14441: LD_INT 30
14443: EQUAL
14444: OR
14445: IFFALSE 14494
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14447: LD_ADDR_VAR 0 18
14451: PUSH
14452: LD_INT 11
14454: PUSH
14455: LD_INT 12
14457: PUSH
14458: LD_INT 13
14460: PUSH
14461: LD_INT 14
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14470: LD_ADDR_OWVAR 37
14474: PUSH
14475: LD_VAR 0 18
14479: PUSH
14480: LD_INT 1
14482: PPUSH
14483: LD_VAR 0 18
14487: PPUSH
14488: CALL_OW 12
14492: ARRAY
14493: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14494: LD_VAR 0 9
14498: PUSH
14499: LD_VAR 0 14
14503: ARRAY
14504: PUSH
14505: LD_INT 29
14507: EQUAL
14508: PUSH
14509: LD_VAR 0 9
14513: PUSH
14514: LD_VAR 0 14
14518: ARRAY
14519: PUSH
14520: LD_INT 28
14522: EQUAL
14523: OR
14524: PUSH
14525: LD_VAR 0 9
14529: PUSH
14530: LD_VAR 0 14
14534: ARRAY
14535: PUSH
14536: LD_INT 27
14538: EQUAL
14539: OR
14540: PUSH
14541: LD_VAR 0 9
14545: PUSH
14546: LD_VAR 0 14
14550: ARRAY
14551: PUSH
14552: LD_INT 26
14554: EQUAL
14555: OR
14556: PUSH
14557: LD_VAR 0 9
14561: PUSH
14562: LD_VAR 0 14
14566: ARRAY
14567: PUSH
14568: LD_INT 25
14570: EQUAL
14571: OR
14572: IFFALSE 14613
// begin arChassisTab = [ 13 , 14 ] ;
14574: LD_ADDR_VAR 0 18
14578: PUSH
14579: LD_INT 13
14581: PUSH
14582: LD_INT 14
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14589: LD_ADDR_OWVAR 37
14593: PUSH
14594: LD_VAR 0 18
14598: PUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_VAR 0 18
14606: PPUSH
14607: CALL_OW 12
14611: ARRAY
14612: ST_TO_ADDR
// end ; end ;
14613: GO 14380
14615: POP
14616: POP
// veh = CreateVehicle ;
14617: LD_ADDR_VAR 0 16
14621: PUSH
14622: CALL_OW 45
14626: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14627: LD_VAR 0 16
14631: PPUSH
14632: LD_VAR 0 1
14636: PPUSH
14637: LD_INT 0
14639: PPUSH
14640: CALL_OW 49
// if vehcontrol = 1 then
14644: LD_VAR 0 7
14648: PUSH
14649: LD_INT 1
14651: EQUAL
14652: IFFALSE 14709
// begin hc_gallery =  ;
14654: LD_ADDR_OWVAR 33
14658: PUSH
14659: LD_STRING 
14661: ST_TO_ADDR
// hc_name =  ;
14662: LD_ADDR_OWVAR 26
14666: PUSH
14667: LD_STRING 
14669: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14670: LD_INT 0
14672: PPUSH
14673: LD_INT 3
14675: PPUSH
14676: LD_VAR 0 4
14680: PPUSH
14681: CALL_OW 380
// un = CreateHuman ;
14685: LD_ADDR_VAR 0 15
14689: PUSH
14690: CALL_OW 44
14694: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14695: LD_VAR 0 15
14699: PPUSH
14700: LD_VAR 0 16
14704: PPUSH
14705: CALL_OW 52
// end ; i = i + 1 ;
14709: LD_ADDR_VAR 0 13
14713: PUSH
14714: LD_VAR 0 13
14718: PUSH
14719: LD_INT 1
14721: PLUS
14722: ST_TO_ADDR
// end ; if nation = 3 then
14723: LD_VAR 0 5
14727: PUSH
14728: LD_INT 3
14730: EQUAL
14731: IFFALSE 15123
// begin uc_side = side ;
14733: LD_ADDR_OWVAR 20
14737: PUSH
14738: LD_VAR 0 2
14742: ST_TO_ADDR
// uc_nation = nation ;
14743: LD_ADDR_OWVAR 21
14747: PUSH
14748: LD_VAR 0 5
14752: ST_TO_ADDR
// vc_engine = vehengine ;
14753: LD_ADDR_OWVAR 39
14757: PUSH
14758: LD_VAR 0 6
14762: ST_TO_ADDR
// vc_control = vehcontrol ;
14763: LD_ADDR_OWVAR 38
14767: PUSH
14768: LD_VAR 0 7
14772: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14773: LD_ADDR_OWVAR 40
14777: PUSH
14778: LD_VAR 0 8
14782: PUSH
14783: LD_INT 1
14785: PPUSH
14786: LD_VAR 0 8
14790: PPUSH
14791: CALL_OW 12
14795: ARRAY
14796: ST_TO_ADDR
// for j = 1 to RuWeapons do
14797: LD_ADDR_VAR 0 14
14801: PUSH
14802: DOUBLE
14803: LD_INT 1
14805: DEC
14806: ST_TO_ADDR
14807: LD_VAR 0 8
14811: PUSH
14812: FOR_TO
14813: IFFALSE 15015
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14815: LD_VAR 0 8
14819: PUSH
14820: LD_VAR 0 14
14824: ARRAY
14825: PUSH
14826: LD_INT 42
14828: EQUAL
14829: PUSH
14830: LD_VAR 0 8
14834: PUSH
14835: LD_VAR 0 14
14839: ARRAY
14840: PUSH
14841: LD_INT 43
14843: EQUAL
14844: OR
14845: PUSH
14846: LD_VAR 0 8
14850: PUSH
14851: LD_VAR 0 14
14855: ARRAY
14856: PUSH
14857: LD_INT 44
14859: EQUAL
14860: OR
14861: PUSH
14862: LD_VAR 0 8
14866: PUSH
14867: LD_VAR 0 14
14871: ARRAY
14872: PUSH
14873: LD_INT 45
14875: EQUAL
14876: OR
14877: PUSH
14878: LD_VAR 0 8
14882: PUSH
14883: LD_VAR 0 14
14887: ARRAY
14888: PUSH
14889: LD_INT 49
14891: EQUAL
14892: OR
14893: IFFALSE 14942
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14895: LD_ADDR_VAR 0 17
14899: PUSH
14900: LD_INT 21
14902: PUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 23
14908: PUSH
14909: LD_INT 24
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14918: LD_ADDR_OWVAR 37
14922: PUSH
14923: LD_VAR 0 17
14927: PUSH
14928: LD_INT 1
14930: PPUSH
14931: LD_VAR 0 17
14935: PPUSH
14936: CALL_OW 12
14940: ARRAY
14941: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14942: LD_VAR 0 8
14946: PUSH
14947: LD_VAR 0 14
14951: ARRAY
14952: PUSH
14953: LD_INT 46
14955: EQUAL
14956: PUSH
14957: LD_VAR 0 8
14961: PUSH
14962: LD_VAR 0 14
14966: ARRAY
14967: PUSH
14968: LD_INT 47
14970: EQUAL
14971: OR
14972: IFFALSE 15013
// begin ruChassisTab = [ 23 , 24 ] ;
14974: LD_ADDR_VAR 0 17
14978: PUSH
14979: LD_INT 23
14981: PUSH
14982: LD_INT 24
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14989: LD_ADDR_OWVAR 37
14993: PUSH
14994: LD_VAR 0 17
14998: PUSH
14999: LD_INT 1
15001: PPUSH
15002: LD_VAR 0 17
15006: PPUSH
15007: CALL_OW 12
15011: ARRAY
15012: ST_TO_ADDR
// end ; end ;
15013: GO 14812
15015: POP
15016: POP
// veh = CreateVehicle ;
15017: LD_ADDR_VAR 0 16
15021: PUSH
15022: CALL_OW 45
15026: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15027: LD_VAR 0 16
15031: PPUSH
15032: LD_VAR 0 1
15036: PPUSH
15037: LD_INT 0
15039: PPUSH
15040: CALL_OW 49
// if vehcontrol = 1 then
15044: LD_VAR 0 7
15048: PUSH
15049: LD_INT 1
15051: EQUAL
15052: IFFALSE 15109
// begin hc_gallery =  ;
15054: LD_ADDR_OWVAR 33
15058: PUSH
15059: LD_STRING 
15061: ST_TO_ADDR
// hc_name =  ;
15062: LD_ADDR_OWVAR 26
15066: PUSH
15067: LD_STRING 
15069: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15070: LD_INT 0
15072: PPUSH
15073: LD_INT 3
15075: PPUSH
15076: LD_VAR 0 4
15080: PPUSH
15081: CALL_OW 380
// un = CreateHuman ;
15085: LD_ADDR_VAR 0 15
15089: PUSH
15090: CALL_OW 44
15094: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15095: LD_VAR 0 15
15099: PPUSH
15100: LD_VAR 0 16
15104: PPUSH
15105: CALL_OW 52
// end ; i = i + 1 ;
15109: LD_ADDR_VAR 0 13
15113: PUSH
15114: LD_VAR 0 13
15118: PUSH
15119: LD_INT 1
15121: PLUS
15122: ST_TO_ADDR
// end ; until i = vehCount ;
15123: LD_VAR 0 13
15127: PUSH
15128: LD_VAR 0 3
15132: EQUAL
15133: IFFALSE 13785
// repeat wait ( 0 0$1 ) ;
15135: LD_INT 35
15137: PPUSH
15138: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15142: LD_ADDR_VAR 0 20
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_VAR 0 2
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 21
15161: PUSH
15162: LD_INT 2
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 24
15171: PUSH
15172: LD_INT 250
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: ST_TO_ADDR
// if vehicleOK_list > 0 then
15189: LD_VAR 0 20
15193: PUSH
15194: LD_INT 0
15196: GREATER
15197: IFFALSE 15388
// begin for i in vehicleOK_list do
15199: LD_ADDR_VAR 0 13
15203: PUSH
15204: LD_VAR 0 20
15208: PUSH
15209: FOR_IN
15210: IFFALSE 15386
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15212: LD_ADDR_VAR 0 21
15216: PUSH
15217: LD_INT 22
15219: PUSH
15220: LD_VAR 0 11
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 69
15233: PPUSH
15234: LD_VAR 0 13
15238: PPUSH
15239: CALL_OW 74
15243: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15244: LD_ADDR_VAR 0 22
15248: PUSH
15249: LD_INT 22
15251: PUSH
15252: LD_VAR 0 11
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 2
15263: PUSH
15264: LD_INT 59
15266: PUSH
15267: EMPTY
15268: LIST
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 1
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 21
15282: PUSH
15283: LD_INT 2
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: PPUSH
15303: CALL_OW 69
15307: PPUSH
15308: LD_VAR 0 13
15312: PPUSH
15313: CALL_OW 74
15317: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15318: LD_VAR 0 13
15322: PPUSH
15323: LD_VAR 0 21
15327: PPUSH
15328: CALL_OW 296
15332: PUSH
15333: LD_INT 6
15335: PLUS
15336: PUSH
15337: LD_VAR 0 13
15341: PPUSH
15342: LD_VAR 0 22
15346: PPUSH
15347: CALL_OW 296
15351: LESS
15352: IFFALSE 15370
// begin ComAttackUnit ( i , target1 ) ;
15354: LD_VAR 0 13
15358: PPUSH
15359: LD_VAR 0 21
15363: PPUSH
15364: CALL_OW 115
// end else
15368: GO 15384
// begin ComAttackUnit ( i , target2 ) ;
15370: LD_VAR 0 13
15374: PPUSH
15375: LD_VAR 0 22
15379: PPUSH
15380: CALL_OW 115
// end ; end ;
15384: GO 15209
15386: POP
15387: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15388: LD_INT 22
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 2
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 24
15412: PUSH
15413: LD_INT 250
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: PPUSH
15425: CALL_OW 69
15429: PUSH
15430: LD_INT 0
15432: EQUAL
15433: IFFALSE 15135
// end ;
15435: LD_VAR 0 12
15439: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15440: LD_INT 0
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15450: LD_ADDR_VAR 0 7
15454: PUSH
15455: LD_INT 22
15457: PUSH
15458: LD_VAR 0 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 1
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: LD_INT 24
15475: PUSH
15476: LD_INT 550
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 24
15489: PUSH
15490: LD_INT 250
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15511: LD_ADDR_VAR 0 8
15515: PUSH
15516: LD_INT 22
15518: PUSH
15519: LD_VAR 0 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 2
15530: PUSH
15531: LD_INT 25
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 25
15543: PUSH
15544: LD_INT 5
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 25
15553: PUSH
15554: LD_INT 8
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 25
15563: PUSH
15564: LD_INT 9
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 24
15580: PUSH
15581: LD_INT 1000
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: PPUSH
15593: CALL_OW 69
15597: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15598: LD_ADDR_VAR 0 9
15602: PUSH
15603: LD_INT 22
15605: PUSH
15606: LD_VAR 0 1
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 25
15617: PUSH
15618: LD_INT 4
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 69
15633: ST_TO_ADDR
// if medicCount > 0 then
15634: LD_VAR 0 9
15638: PUSH
15639: LD_INT 0
15641: GREATER
15642: IFFALSE 15716
// begin if damageUnit_list > 0 then
15644: LD_VAR 0 7
15648: PUSH
15649: LD_INT 0
15651: GREATER
15652: IFFALSE 15716
// begin for i in damageUnit_list do
15654: LD_ADDR_VAR 0 5
15658: PUSH
15659: LD_VAR 0 7
15663: PUSH
15664: FOR_IN
15665: IFFALSE 15714
// begin ComMoveToArea ( i , healArea ) ;
15667: LD_VAR 0 5
15671: PPUSH
15672: LD_VAR 0 2
15676: PPUSH
15677: CALL_OW 113
// for j in medicCount do
15681: LD_ADDR_VAR 0 6
15685: PUSH
15686: LD_VAR 0 9
15690: PUSH
15691: FOR_IN
15692: IFFALSE 15710
// AddComHeal ( j , i ) ;
15694: LD_VAR 0 6
15698: PPUSH
15699: LD_VAR 0 5
15703: PPUSH
15704: CALL_OW 188
15708: GO 15691
15710: POP
15711: POP
// end ;
15712: GO 15664
15714: POP
15715: POP
// end ; end ; if soldiersOK_list > 0 then
15716: LD_VAR 0 8
15720: PUSH
15721: LD_INT 0
15723: GREATER
15724: IFFALSE 15915
// begin for i in soldiersOK_list do
15726: LD_ADDR_VAR 0 5
15730: PUSH
15731: LD_VAR 0 8
15735: PUSH
15736: FOR_IN
15737: IFFALSE 15913
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15739: LD_ADDR_VAR 0 10
15743: PUSH
15744: LD_INT 22
15746: PUSH
15747: LD_VAR 0 3
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 69
15760: PPUSH
15761: LD_VAR 0 5
15765: PPUSH
15766: CALL_OW 74
15770: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15771: LD_ADDR_VAR 0 11
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_VAR 0 3
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 2
15790: PUSH
15791: LD_INT 59
15793: PUSH
15794: EMPTY
15795: LIST
15796: PUSH
15797: LD_INT 21
15799: PUSH
15800: LD_INT 1
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 21
15809: PUSH
15810: LD_INT 2
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: PPUSH
15830: CALL_OW 69
15834: PPUSH
15835: LD_VAR 0 5
15839: PPUSH
15840: CALL_OW 74
15844: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15845: LD_VAR 0 5
15849: PPUSH
15850: LD_VAR 0 10
15854: PPUSH
15855: CALL_OW 296
15859: PUSH
15860: LD_INT 8
15862: PLUS
15863: PUSH
15864: LD_VAR 0 5
15868: PPUSH
15869: LD_VAR 0 11
15873: PPUSH
15874: CALL_OW 296
15878: LESS
15879: IFFALSE 15897
// begin ComAttackUnit ( i , target1 ) ;
15881: LD_VAR 0 5
15885: PPUSH
15886: LD_VAR 0 10
15890: PPUSH
15891: CALL_OW 115
// end else
15895: GO 15911
// begin ComAttackUnit ( i , target2 ) ;
15897: LD_VAR 0 5
15901: PPUSH
15902: LD_VAR 0 11
15906: PPUSH
15907: CALL_OW 115
// end ; end ;
15911: GO 15736
15913: POP
15914: POP
// end ; end ;
15915: LD_VAR 0 4
15919: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15920: LD_INT 0
15922: PPUSH
15923: PPUSH
// list := [ ] ;
15924: LD_ADDR_VAR 0 5
15928: PUSH
15929: EMPTY
15930: ST_TO_ADDR
// case d of 0 :
15931: LD_VAR 0 3
15935: PUSH
15936: LD_INT 0
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 16077
15944: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15945: LD_ADDR_VAR 0 5
15949: PUSH
15950: LD_VAR 0 1
15954: PUSH
15955: LD_INT 4
15957: MINUS
15958: PUSH
15959: LD_VAR 0 2
15963: PUSH
15964: LD_INT 4
15966: MINUS
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: LD_VAR 0 1
15980: PUSH
15981: LD_INT 3
15983: MINUS
15984: PUSH
15985: LD_VAR 0 2
15989: PUSH
15990: LD_INT 1
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: PUSH
15998: LD_VAR 0 1
16002: PUSH
16003: LD_INT 4
16005: PLUS
16006: PUSH
16007: LD_VAR 0 2
16011: PUSH
16012: LD_INT 4
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: LD_VAR 0 1
16024: PUSH
16025: LD_INT 3
16027: PLUS
16028: PUSH
16029: LD_VAR 0 2
16033: PUSH
16034: LD_INT 3
16036: PLUS
16037: PUSH
16038: LD_INT 5
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: PUSH
16046: LD_VAR 0 1
16050: PUSH
16051: LD_VAR 0 2
16055: PUSH
16056: LD_INT 4
16058: PLUS
16059: PUSH
16060: LD_INT 0
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: ST_TO_ADDR
// end ; 1 :
16075: GO 16775
16077: LD_INT 1
16079: DOUBLE
16080: EQUAL
16081: IFTRUE 16085
16083: GO 16218
16085: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16086: LD_ADDR_VAR 0 5
16090: PUSH
16091: LD_VAR 0 1
16095: PUSH
16096: LD_VAR 0 2
16100: PUSH
16101: LD_INT 4
16103: MINUS
16104: PUSH
16105: LD_INT 3
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: LD_VAR 0 1
16117: PUSH
16118: LD_INT 3
16120: MINUS
16121: PUSH
16122: LD_VAR 0 2
16126: PUSH
16127: LD_INT 3
16129: MINUS
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: LD_VAR 0 1
16143: PUSH
16144: LD_INT 4
16146: MINUS
16147: PUSH
16148: LD_VAR 0 2
16152: PUSH
16153: LD_INT 1
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: PUSH
16161: LD_VAR 0 1
16165: PUSH
16166: LD_VAR 0 2
16170: PUSH
16171: LD_INT 3
16173: PLUS
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: PUSH
16183: LD_VAR 0 1
16187: PUSH
16188: LD_INT 4
16190: PLUS
16191: PUSH
16192: LD_VAR 0 2
16196: PUSH
16197: LD_INT 4
16199: PLUS
16200: PUSH
16201: LD_INT 5
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// end ; 2 :
16216: GO 16775
16218: LD_INT 2
16220: DOUBLE
16221: EQUAL
16222: IFTRUE 16226
16224: GO 16355
16226: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16227: LD_ADDR_VAR 0 5
16231: PUSH
16232: LD_VAR 0 1
16236: PUSH
16237: LD_VAR 0 2
16241: PUSH
16242: LD_INT 3
16244: MINUS
16245: PUSH
16246: LD_INT 3
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: PUSH
16254: LD_VAR 0 1
16258: PUSH
16259: LD_INT 4
16261: PLUS
16262: PUSH
16263: LD_VAR 0 2
16267: PUSH
16268: LD_INT 4
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: PUSH
16276: LD_VAR 0 1
16280: PUSH
16281: LD_VAR 0 2
16285: PUSH
16286: LD_INT 4
16288: PLUS
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: PUSH
16298: LD_VAR 0 1
16302: PUSH
16303: LD_INT 3
16305: MINUS
16306: PUSH
16307: LD_VAR 0 2
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: PUSH
16320: LD_VAR 0 1
16324: PUSH
16325: LD_INT 4
16327: MINUS
16328: PUSH
16329: LD_VAR 0 2
16333: PUSH
16334: LD_INT 4
16336: MINUS
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: LIST
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: ST_TO_ADDR
// end ; 3 :
16353: GO 16775
16355: LD_INT 3
16357: DOUBLE
16358: EQUAL
16359: IFTRUE 16363
16361: GO 16496
16363: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16364: LD_ADDR_VAR 0 5
16368: PUSH
16369: LD_VAR 0 1
16373: PUSH
16374: LD_INT 3
16376: PLUS
16377: PUSH
16378: LD_VAR 0 2
16382: PUSH
16383: LD_INT 4
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: LD_VAR 0 1
16395: PUSH
16396: LD_INT 4
16398: PLUS
16399: PUSH
16400: LD_VAR 0 2
16404: PUSH
16405: LD_INT 4
16407: PLUS
16408: PUSH
16409: LD_INT 5
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: PUSH
16417: LD_VAR 0 1
16421: PUSH
16422: LD_INT 4
16424: MINUS
16425: PUSH
16426: LD_VAR 0 2
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: LD_VAR 0 2
16448: PUSH
16449: LD_INT 4
16451: MINUS
16452: PUSH
16453: LD_INT 3
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: LD_VAR 0 1
16465: PUSH
16466: LD_INT 3
16468: MINUS
16469: PUSH
16470: LD_VAR 0 2
16474: PUSH
16475: LD_INT 3
16477: MINUS
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: ST_TO_ADDR
// end ; 4 :
16494: GO 16775
16496: LD_INT 4
16498: DOUBLE
16499: EQUAL
16500: IFTRUE 16504
16502: GO 16637
16504: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16505: LD_ADDR_VAR 0 5
16509: PUSH
16510: LD_VAR 0 1
16514: PUSH
16515: LD_VAR 0 2
16519: PUSH
16520: LD_INT 4
16522: PLUS
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: LD_VAR 0 1
16536: PUSH
16537: LD_INT 3
16539: PLUS
16540: PUSH
16541: LD_VAR 0 2
16545: PUSH
16546: LD_INT 3
16548: PLUS
16549: PUSH
16550: LD_INT 5
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: PUSH
16558: LD_VAR 0 1
16562: PUSH
16563: LD_INT 3
16565: PLUS
16566: PUSH
16567: LD_VAR 0 2
16571: PUSH
16572: LD_INT 4
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: PUSH
16580: LD_VAR 0 1
16584: PUSH
16585: LD_VAR 0 2
16589: PUSH
16590: LD_INT 3
16592: MINUS
16593: PUSH
16594: LD_INT 3
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_VAR 0 1
16606: PUSH
16607: LD_INT 4
16609: MINUS
16610: PUSH
16611: LD_VAR 0 2
16615: PUSH
16616: LD_INT 4
16618: MINUS
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: ST_TO_ADDR
// end ; 5 :
16635: GO 16775
16637: LD_INT 5
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16774
16645: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16646: LD_ADDR_VAR 0 5
16650: PUSH
16651: LD_VAR 0 1
16655: PUSH
16656: LD_INT 4
16658: MINUS
16659: PUSH
16660: LD_VAR 0 2
16664: PUSH
16665: LD_INT 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: PUSH
16673: LD_VAR 0 1
16677: PUSH
16678: LD_VAR 0 2
16682: PUSH
16683: LD_INT 4
16685: MINUS
16686: PUSH
16687: LD_INT 3
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: LD_VAR 0 1
16699: PUSH
16700: LD_INT 4
16702: PLUS
16703: PUSH
16704: LD_VAR 0 2
16708: PUSH
16709: LD_INT 4
16711: PLUS
16712: PUSH
16713: LD_INT 5
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: LD_VAR 0 1
16725: PUSH
16726: LD_INT 3
16728: PLUS
16729: PUSH
16730: LD_VAR 0 2
16734: PUSH
16735: LD_INT 4
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: LD_VAR 0 1
16747: PUSH
16748: LD_VAR 0 2
16752: PUSH
16753: LD_INT 3
16755: PLUS
16756: PUSH
16757: LD_INT 0
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: ST_TO_ADDR
// end ; end ;
16772: GO 16775
16774: POP
// result := list ;
16775: LD_ADDR_VAR 0 4
16779: PUSH
16780: LD_VAR 0 5
16784: ST_TO_ADDR
// end ; end_of_file
16785: LD_VAR 0 4
16789: RET
// every 1 do var i ;
16790: GO 16792
16792: DISABLE
16793: LD_INT 0
16795: PPUSH
// begin InGameOn ;
16796: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16800: LD_INT 53
16802: PPUSH
16803: LD_INT 40
16805: PPUSH
16806: CALL_OW 84
// wait ( 0 0$5 ) ;
16810: LD_INT 175
16812: PPUSH
16813: CALL_OW 67
// if gammaCommander = 1 then
16817: LD_EXP 12
16821: PUSH
16822: LD_INT 1
16824: EQUAL
16825: IFFALSE 16836
// CenterNowOnUnits ( Donaldson ) ;
16827: LD_EXP 3
16831: PPUSH
16832: CALL_OW 87
// if gammaCommander = 2 then
16836: LD_EXP 12
16840: PUSH
16841: LD_INT 2
16843: EQUAL
16844: IFFALSE 16855
// CenterNowOnUnits ( Brown ) ;
16846: LD_EXP 2
16850: PPUSH
16851: CALL_OW 87
// if gammaCommander = 3 then
16855: LD_EXP 12
16859: PUSH
16860: LD_INT 3
16862: EQUAL
16863: IFFALSE 16874
// CenterNowOnUnits ( Houten ) ;
16865: LD_EXP 13
16869: PPUSH
16870: CALL_OW 87
// if gammaCommander = 1 then
16874: LD_EXP 12
16878: PUSH
16879: LD_INT 1
16881: EQUAL
16882: IFFALSE 16896
// Say ( Donaldson , D1-Don-1 ) ;
16884: LD_EXP 3
16888: PPUSH
16889: LD_STRING D1-Don-1
16891: PPUSH
16892: CALL_OW 88
// if gammaCommander = 2 then
16896: LD_EXP 12
16900: PUSH
16901: LD_INT 2
16903: EQUAL
16904: IFFALSE 16918
// Say ( Brown , D1-Brown-1 ) ;
16906: LD_EXP 2
16910: PPUSH
16911: LD_STRING D1-Brown-1
16913: PPUSH
16914: CALL_OW 88
// if gammaCommander = 3 then
16918: LD_EXP 12
16922: PUSH
16923: LD_INT 3
16925: EQUAL
16926: IFFALSE 16940
// Say ( Houten , D1-VanH-1 ) ;
16928: LD_EXP 13
16932: PPUSH
16933: LD_STRING D1-VanH-1
16935: PPUSH
16936: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
16940: LD_EXP 22
16944: PPUSH
16945: LD_STRING D1-Har-1
16947: PPUSH
16948: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
16952: LD_INT 53
16954: PPUSH
16955: LD_INT 40
16957: PPUSH
16958: CALL_OW 84
// if gammaCommander = 1 then
16962: LD_EXP 12
16966: PUSH
16967: LD_INT 1
16969: EQUAL
16970: IFFALSE 16984
// Say ( Donaldson , D1-Don-2 ) ;
16972: LD_EXP 3
16976: PPUSH
16977: LD_STRING D1-Don-2
16979: PPUSH
16980: CALL_OW 88
// if gammaCommander = 2 then
16984: LD_EXP 12
16988: PUSH
16989: LD_INT 2
16991: EQUAL
16992: IFFALSE 17006
// Say ( Brown , D1-Brown-2 ) ;
16994: LD_EXP 2
16998: PPUSH
16999: LD_STRING D1-Brown-2
17001: PPUSH
17002: CALL_OW 88
// if gammaCommander = 3 then
17006: LD_EXP 12
17010: PUSH
17011: LD_INT 3
17013: EQUAL
17014: IFFALSE 17028
// Say ( Houten , D1-VanH-2 ) ;
17016: LD_EXP 13
17020: PPUSH
17021: LD_STRING D1-VanH-2
17023: PPUSH
17024: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17028: LD_EXP 22
17032: PPUSH
17033: LD_STRING D1-Har-2
17035: PPUSH
17036: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17040: LD_INT 22
17042: PUSH
17043: LD_INT 1
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 33
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 61
17062: PUSH
17063: EMPTY
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: PPUSH
17071: CALL_OW 69
17075: IFFALSE 17140
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17077: LD_ADDR_VAR 0 1
17081: PUSH
17082: LD_INT 22
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 33
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 61
17104: PUSH
17105: EMPTY
17106: LIST
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 69
17117: PUSH
17118: FOR_IN
17119: IFFALSE 17138
// ComAgressiveMove ( i , 70 , 41 ) ;
17121: LD_VAR 0 1
17125: PPUSH
17126: LD_INT 70
17128: PPUSH
17129: LD_INT 41
17131: PPUSH
17132: CALL_OW 114
17136: GO 17118
17138: POP
17139: POP
// repeat wait ( 0 0$1 ) ;
17140: LD_INT 35
17142: PPUSH
17143: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_INT 22
17154: PUSH
17155: LD_INT 6
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: EMPTY
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17190
// ComAgressiveMove ( i , 54 , 20 ) ;
17173: LD_VAR 0 1
17177: PPUSH
17178: LD_INT 54
17180: PPUSH
17181: LD_INT 20
17183: PPUSH
17184: CALL_OW 114
17188: GO 17170
17190: POP
17191: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17192: LD_ADDR_VAR 0 1
17196: PUSH
17197: LD_INT 22
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 25
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 3
17219: PUSH
17220: LD_INT 54
17222: PUSH
17223: EMPTY
17224: LIST
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL_OW 69
17239: PUSH
17240: FOR_IN
17241: IFFALSE 17275
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17243: LD_VAR 0 1
17247: PPUSH
17248: LD_INT 70
17250: PPUSH
17251: LD_INT 41
17253: PPUSH
17254: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17258: LD_VAR 0 1
17262: PPUSH
17263: LD_INT 46
17265: PPUSH
17266: LD_INT 39
17268: PPUSH
17269: CALL_OW 174
// end ;
17273: GO 17240
17275: POP
17276: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17277: LD_ADDR_VAR 0 1
17281: PUSH
17282: LD_INT 22
17284: PUSH
17285: LD_INT 1
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 21
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: LD_INT 24
17307: PUSH
17308: LD_INT 500
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17363
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: LD_EXP 37
17341: PPUSH
17342: CALL_OW 250
17346: PPUSH
17347: LD_EXP 37
17351: PPUSH
17352: CALL_OW 251
17356: PPUSH
17357: CALL_OW 111
17361: GO 17329
17363: POP
17364: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17365: LD_INT 22
17367: PUSH
17368: LD_INT 6
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 21
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 250
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: PUSH
17405: LD_INT 6
17407: LESS
17408: IFFALSE 17140
// InGameOff ;
17410: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17414: LD_STRING M1
17416: PPUSH
17417: CALL_OW 337
// SaveForQuickRestart ;
17421: CALL_OW 22
// startCutscene = 0 ;
17425: LD_ADDR_EXP 38
17429: PUSH
17430: LD_INT 0
17432: ST_TO_ADDR
// end ;
17433: PPOPN 1
17435: END
// every 1 1$0 do
17436: GO 17438
17438: DISABLE
// begin PrepareSupportFromDelta ;
17439: CALL 3081 0 0
// firstAttack = 1 ;
17443: LD_ADDR_EXP 33
17447: PUSH
17448: LD_INT 1
17450: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17451: LD_EXP 8
17455: PPUSH
17456: CALL_OW 302
17460: IFFALSE 17476
// begin Say ( Gladstone , D2-Glad-1 ) ;
17462: LD_EXP 8
17466: PPUSH
17467: LD_STRING D2-Glad-1
17469: PPUSH
17470: CALL_OW 88
// end else
17474: GO 17578
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17476: LD_INT 4
17478: PPUSH
17479: LD_INT 22
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 21
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: LD_INT 25
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 25
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 25
17524: PUSH
17525: LD_INT 3
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 25
17534: PUSH
17535: LD_INT 4
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: PPUSH
17554: CALL_OW 70
17558: PUSH
17559: LD_EXP 15
17563: PUSH
17564: EMPTY
17565: LIST
17566: DIFF
17567: PPUSH
17568: LD_STRING D2-Sol1-1
17570: PPUSH
17571: LD_STRING D2-FSol1-1
17573: PPUSH
17574: CALL 6571 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17578: LD_EXP 3
17582: PPUSH
17583: CALL_OW 302
17587: PUSH
17588: LD_EXP 12
17592: PUSH
17593: LD_INT 1
17595: EQUAL
17596: AND
17597: IFFALSE 17611
// Say ( Donaldson , D2-Don-1 ) ;
17599: LD_EXP 3
17603: PPUSH
17604: LD_STRING D2-Don-1
17606: PPUSH
17607: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17611: LD_EXP 2
17615: PPUSH
17616: CALL_OW 302
17620: PUSH
17621: LD_EXP 12
17625: PUSH
17626: LD_INT 2
17628: EQUAL
17629: AND
17630: IFFALSE 17644
// Say ( Brown , D2-Brown-1 ) ;
17632: LD_EXP 2
17636: PPUSH
17637: LD_STRING D2-Brown-1
17639: PPUSH
17640: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17644: LD_EXP 13
17648: PPUSH
17649: CALL_OW 302
17653: PUSH
17654: LD_EXP 12
17658: PUSH
17659: LD_INT 3
17661: EQUAL
17662: AND
17663: IFFALSE 17677
// Say ( Houten , D2-VanH-1 ) ;
17665: LD_EXP 13
17669: PPUSH
17670: LD_STRING D2-VanH-1
17672: PPUSH
17673: CALL_OW 88
// end ;
17677: END
// every 0 0$1 do
17678: GO 17680
17680: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
17681: LD_STRING 07_time
17683: PPUSH
17684: LD_INT 12600
17686: PPUSH
17687: CALL_OW 30
17691: PUSH
17692: LD_INT 3
17694: DIV
17695: PPUSH
17696: CALL_OW 67
// PrepareMacmillanSquad ;
17700: CALL 3696 0 0
// CenterNowOnUnits ( JMM ) ;
17704: LD_EXP 1
17708: PPUSH
17709: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17713: LD_EXP 1
17717: PPUSH
17718: LD_STRING D3-JMM-1
17720: PPUSH
17721: CALL_OW 88
// JMMArrive = 1 ;
17725: LD_ADDR_EXP 39
17729: PUSH
17730: LD_INT 1
17732: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17733: LD_EXP 3
17737: PPUSH
17738: CALL_OW 302
17742: PUSH
17743: LD_EXP 12
17747: PUSH
17748: LD_INT 1
17750: EQUAL
17751: AND
17752: IFFALSE 17768
// begin Say ( Donaldson , D3-Don-1 ) ;
17754: LD_EXP 3
17758: PPUSH
17759: LD_STRING D3-Don-1
17761: PPUSH
17762: CALL_OW 88
// end else
17766: GO 17820
// begin if gammaCommander = 1 then
17768: LD_EXP 12
17772: PUSH
17773: LD_INT 1
17775: EQUAL
17776: IFFALSE 17820
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17778: LD_EXP 11
17782: PPUSH
17783: LD_INT 26
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 72
17797: PPUSH
17798: LD_STRING D3-Sol1-1
17800: PPUSH
17801: LD_STRING D3-Sol1-1
17803: PPUSH
17804: CALL 6571 0 3
// Say ( JMM , D3-JMM-2 ) ;
17808: LD_EXP 1
17812: PPUSH
17813: LD_STRING D3-JMM-2
17815: PPUSH
17816: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17820: LD_EXP 2
17824: PPUSH
17825: CALL_OW 302
17829: PUSH
17830: LD_EXP 12
17834: PUSH
17835: LD_INT 2
17837: EQUAL
17838: AND
17839: IFFALSE 17855
// begin Say ( Brown , D3-Brown-1 ) ;
17841: LD_EXP 2
17845: PPUSH
17846: LD_STRING D3-Brown-1
17848: PPUSH
17849: CALL_OW 88
// end else
17853: GO 17907
// begin if gammaCommander = 2 then
17855: LD_EXP 12
17859: PUSH
17860: LD_INT 2
17862: EQUAL
17863: IFFALSE 17907
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17865: LD_EXP 11
17869: PPUSH
17870: LD_INT 26
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 72
17884: PPUSH
17885: LD_STRING D3-Sol1-1a
17887: PPUSH
17888: LD_STRING D3-Sol1-1a
17890: PPUSH
17891: CALL 6571 0 3
// Say ( JMM , D3-JMM-2 ) ;
17895: LD_EXP 1
17899: PPUSH
17900: LD_STRING D3-JMM-2
17902: PPUSH
17903: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17907: LD_EXP 13
17911: PPUSH
17912: CALL_OW 302
17916: PUSH
17917: LD_EXP 12
17921: PUSH
17922: LD_INT 3
17924: EQUAL
17925: AND
17926: IFFALSE 17942
// begin Say ( Houten , D3-VanH-1 ) ;
17928: LD_EXP 13
17932: PPUSH
17933: LD_STRING D3-VanH-1
17935: PPUSH
17936: CALL_OW 88
// end else
17940: GO 17994
// begin if gammaCommander = 3 then
17942: LD_EXP 12
17946: PUSH
17947: LD_INT 3
17949: EQUAL
17950: IFFALSE 17994
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17952: LD_EXP 11
17956: PPUSH
17957: LD_INT 26
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 72
17971: PPUSH
17972: LD_STRING D3-Sol1-1b
17974: PPUSH
17975: LD_STRING D3-Sol1-1b
17977: PPUSH
17978: CALL 6571 0 3
// Say ( JMM , D3-JMM-2 ) ;
17982: LD_EXP 1
17986: PPUSH
17987: LD_STRING D3-JMM-2
17989: PPUSH
17990: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17994: LD_EXP 15
17998: PPUSH
17999: CALL_OW 302
18003: IFFALSE 18031
// begin Say ( Joan , D3a-Joan-1 ) ;
18005: LD_EXP 15
18009: PPUSH
18010: LD_STRING D3a-Joan-1
18012: PPUSH
18013: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18017: LD_EXP 1
18021: PPUSH
18022: LD_STRING D3a-JMM-1
18024: PPUSH
18025: CALL_OW 88
// end else
18029: GO 18373
// if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18031: LD_STRING 06_JoanStatus_1
18033: PPUSH
18034: LD_INT 0
18036: PPUSH
18037: CALL_OW 30
18041: PUSH
18042: LD_INT 1
18044: EQUAL
18045: IFFALSE 18373
// begin Say ( JMM , D3b-JMM-1 ) ;
18047: LD_EXP 1
18051: PPUSH
18052: LD_STRING D3b-JMM-1
18054: PPUSH
18055: CALL_OW 88
// if gammaCommander = 1 then
18059: LD_EXP 12
18063: PUSH
18064: LD_INT 1
18066: EQUAL
18067: IFFALSE 18124
// if IsOK ( Donaldson ) then
18069: LD_EXP 3
18073: PPUSH
18074: CALL_OW 302
18078: IFFALSE 18094
// Say ( Donaldson , D3b-Don-1 ) else
18080: LD_EXP 3
18084: PPUSH
18085: LD_STRING D3b-Don-1
18087: PPUSH
18088: CALL_OW 88
18092: GO 18124
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18094: LD_EXP 11
18098: PPUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 72
18113: PPUSH
18114: LD_STRING D3b-Sol1-1
18116: PPUSH
18117: LD_STRING D3b-Sol1-1
18119: PPUSH
18120: CALL 6571 0 3
// if gammaCommander = 2 then
18124: LD_EXP 12
18128: PUSH
18129: LD_INT 2
18131: EQUAL
18132: IFFALSE 18189
// if IsOk ( Brown ) then
18134: LD_EXP 2
18138: PPUSH
18139: CALL_OW 302
18143: IFFALSE 18159
// Say ( Brown , D3b-Brown-1 ) else
18145: LD_EXP 2
18149: PPUSH
18150: LD_STRING D3b-Brown-1
18152: PPUSH
18153: CALL_OW 88
18157: GO 18189
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18159: LD_EXP 11
18163: PPUSH
18164: LD_INT 26
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 72
18178: PPUSH
18179: LD_STRING D3b-Sol1-1
18181: PPUSH
18182: LD_STRING D3b-Sol1-1
18184: PPUSH
18185: CALL 6571 0 3
// if gammaCommander = 3 then
18189: LD_EXP 12
18193: PUSH
18194: LD_INT 3
18196: EQUAL
18197: IFFALSE 18254
// if IsOk ( Houten ) then
18199: LD_EXP 13
18203: PPUSH
18204: CALL_OW 302
18208: IFFALSE 18224
// Say ( Houten , D3b-VanH-1 ) else
18210: LD_EXP 13
18214: PPUSH
18215: LD_STRING D3b-VanH-1
18217: PPUSH
18218: CALL_OW 88
18222: GO 18254
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18224: LD_EXP 11
18228: PPUSH
18229: LD_INT 26
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PPUSH
18239: CALL_OW 72
18243: PPUSH
18244: LD_STRING D3b-Sol1-1
18246: PPUSH
18247: LD_STRING D3b-Sol1-1
18249: PPUSH
18250: CALL 6571 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
18254: LD_EXP 11
18258: PPUSH
18259: LD_INT 26
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 72
18273: PUSH
18274: LD_EXP 12
18278: PUSH
18279: LD_INT 1
18281: EQUAL
18282: PUSH
18283: LD_EXP 3
18287: PPUSH
18288: CALL_OW 302
18292: AND
18293: OR
18294: PUSH
18295: LD_EXP 12
18299: PUSH
18300: LD_INT 2
18302: EQUAL
18303: PUSH
18304: LD_EXP 2
18308: PPUSH
18309: CALL_OW 302
18313: AND
18314: OR
18315: PUSH
18316: LD_EXP 12
18320: PUSH
18321: LD_INT 3
18323: EQUAL
18324: PUSH
18325: LD_EXP 13
18329: PPUSH
18330: CALL_OW 302
18334: AND
18335: OR
18336: IFFALSE 18350
// Say ( JMM , D3b-JMM-2 ) ;
18338: LD_EXP 1
18342: PPUSH
18343: LD_STRING D3b-JMM-2
18345: PPUSH
18346: CALL_OW 88
// if IsOK ( Lisa ) then
18350: LD_EXP 6
18354: PPUSH
18355: CALL_OW 302
18359: IFFALSE 18373
// Say ( Lisa , D3b-Lisa-2 ) ;
18361: LD_EXP 6
18365: PPUSH
18366: LD_STRING D3b-Lisa-2
18368: PPUSH
18369: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18373: LD_INT 22
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 21
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 26
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 2
18405: PUSH
18406: LD_INT 25
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 25
18418: PUSH
18419: LD_INT 2
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 25
18428: PUSH
18429: LD_INT 3
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 25
18438: PUSH
18439: LD_INT 4
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: PPUSH
18459: CALL_OW 69
18463: PUSH
18464: LD_EXP 1
18468: PUSH
18469: EMPTY
18470: LIST
18471: DIFF
18472: PPUSH
18473: LD_STRING DCa-Sol1-1
18475: PPUSH
18476: LD_STRING DCa-Sol1-1
18478: PPUSH
18479: CALL 6571 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18483: LD_EXP 1
18487: PPUSH
18488: LD_STRING DCb-JMM-1
18490: PPUSH
18491: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18495: LD_INT 22
18497: PUSH
18498: LD_INT 1
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 21
18507: PUSH
18508: LD_INT 1
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 26
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: LD_INT 25
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 25
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 25
18550: PUSH
18551: LD_INT 3
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 25
18560: PUSH
18561: LD_INT 4
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: PUSH
18586: LD_EXP 1
18590: PUSH
18591: EMPTY
18592: LIST
18593: DIFF
18594: PPUSH
18595: LD_STRING DCb-Sol1-1
18597: PPUSH
18598: LD_STRING DCb-Sol1-1
18600: PPUSH
18601: CALL 6571 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18605: LD_EXP 1
18609: PPUSH
18610: LD_STRING DCb-JMM-2
18612: PPUSH
18613: CALL_OW 88
// secondAttack = 1 ;
18617: LD_ADDR_EXP 34
18621: PUSH
18622: LD_INT 1
18624: ST_TO_ADDR
// end ;
18625: END
// every 0 0$01 trigger JMMArrive = 1 do
18626: LD_EXP 39
18630: PUSH
18631: LD_INT 1
18633: EQUAL
18634: IFFALSE 18714
18636: GO 18638
18638: DISABLE
// begin wait ( 3 3$0 ) ;
18639: LD_INT 6300
18641: PPUSH
18642: CALL_OW 67
// DialogueOn ;
18646: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18650: LD_EXP 23
18654: PPUSH
18655: LD_STRING D4-Pow-1
18657: PPUSH
18658: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18662: LD_EXP 1
18666: PPUSH
18667: LD_STRING D4-JMM-1
18669: PPUSH
18670: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18674: LD_EXP 23
18678: PPUSH
18679: LD_STRING D4-Pow-2
18681: PPUSH
18682: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18686: LD_EXP 1
18690: PPUSH
18691: LD_STRING D4-JMM-2
18693: PPUSH
18694: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18698: LD_EXP 23
18702: PPUSH
18703: LD_STRING D4-Pow-3
18705: PPUSH
18706: CALL_OW 94
// DialogueOff ;
18710: CALL_OW 7
// end ;
18714: END
// every 0 0$01 trigger JMMArrive = 1 do
18715: LD_EXP 39
18719: PUSH
18720: LD_INT 1
18722: EQUAL
18723: IFFALSE 18755
18725: GO 18727
18727: DISABLE
// begin wait ( 8 8$0 ) ;
18728: LD_INT 16800
18730: PPUSH
18731: CALL_OW 67
// DialogueOn ;
18735: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18739: LD_EXP 23
18743: PPUSH
18744: LD_STRING D4a-Pow-1
18746: PPUSH
18747: CALL_OW 94
// DialogueOff ;
18751: CALL_OW 7
// end ;
18755: END
// every 0 0$01 trigger JMMArrive = 1 do
18756: LD_EXP 39
18760: PUSH
18761: LD_INT 1
18763: EQUAL
18764: IFFALSE 18809
18766: GO 18768
18768: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18769: LD_INT 21000
18771: PUSH
18772: LD_INT 25200
18774: PUSH
18775: LD_INT 31500
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PUSH
18783: LD_OWVAR 67
18787: ARRAY
18788: PPUSH
18789: CALL_OW 67
// PrepareSikorsky ;
18793: CALL 5155 0 0
// SikorskyArrive = 1 ;
18797: LD_ADDR_EXP 18
18801: PUSH
18802: LD_INT 1
18804: ST_TO_ADDR
// PrepareSikorskyArmy ;
18805: CALL 5295 0 0
// end ;
18809: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18810: LD_EXP 17
18814: PPUSH
18815: LD_INT 5
18817: PPUSH
18818: CALL_OW 308
18822: IFFALSE 19014
18824: GO 18826
18826: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18827: LD_EXP 17
18831: PPUSH
18832: CALL_OW 87
// DialogueOn ;
18836: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18840: LD_EXP 16
18844: PPUSH
18845: LD_STRING D5-Sik-1
18847: PPUSH
18848: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
18852: LD_EXP 1
18856: PPUSH
18857: LD_STRING D5-JMM-1a
18859: PPUSH
18860: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18864: LD_EXP 16
18868: PPUSH
18869: LD_STRING D5-Sik-2
18871: PPUSH
18872: CALL_OW 88
// case query ( QSikorski ) of 1 :
18876: LD_STRING QSikorski
18878: PPUSH
18879: CALL_OW 97
18883: PUSH
18884: LD_INT 1
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18915
18892: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18893: LD_EXP 16
18897: PPUSH
18898: LD_STRING D5a-Sik-1
18900: PPUSH
18901: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
18905: LD_ADDR_EXP 19
18909: PUSH
18910: LD_INT 2100
18912: ST_TO_ADDR
// end ; 2 :
18913: GO 19002
18915: LD_INT 2
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18946
18923: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18924: LD_EXP 16
18928: PPUSH
18929: LD_STRING D5b-Sik-1
18931: PPUSH
18932: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18936: LD_ADDR_EXP 19
18940: PUSH
18941: LD_INT 10500
18943: ST_TO_ADDR
// end ; 3 :
18944: GO 19002
18946: LD_INT 3
18948: DOUBLE
18949: EQUAL
18950: IFTRUE 18954
18952: GO 19001
18954: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18955: LD_EXP 16
18959: PPUSH
18960: LD_STRING D5c-Sik-1
18962: PPUSH
18963: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18967: LD_EXP 1
18971: PPUSH
18972: LD_STRING D5c-JMM-1
18974: PPUSH
18975: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18979: LD_EXP 16
18983: PPUSH
18984: LD_STRING D5c-Sik-2
18986: PPUSH
18987: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18991: LD_ADDR_EXP 19
18995: PUSH
18996: LD_INT 10500
18998: ST_TO_ADDR
// end ; end ;
18999: GO 19002
19001: POP
// DialogueOff ;
19002: CALL_OW 7
// timerStatus = 1 ;
19006: LD_ADDR_EXP 35
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// end ;
19014: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19015: LD_EXP 19
19019: PUSH
19020: LD_INT 35
19022: LESS
19023: IFFALSE 19071
19025: GO 19027
19027: DISABLE
// begin timerStatus = 0 ;
19028: LD_ADDR_EXP 35
19032: PUSH
19033: LD_INT 0
19035: ST_TO_ADDR
// DialogueOn ;
19036: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19040: LD_EXP 16
19044: PPUSH
19045: LD_STRING D6-Sik-1
19047: PPUSH
19048: CALL_OW 88
// DialogueOff ;
19052: CALL_OW 7
// SikorskyAI = 1 ;
19056: LD_ADDR_EXP 20
19060: PUSH
19061: LD_INT 1
19063: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19064: LD_STRING M2
19066: PPUSH
19067: CALL_OW 337
// end ;
19071: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19072: LD_EXP 17
19076: PPUSH
19077: LD_INT 18
19079: PPUSH
19080: CALL_OW 308
19084: IFFALSE 19168
19086: GO 19088
19088: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19089: LD_EXP 16
19093: PPUSH
19094: LD_STRING D7-Sik-1
19096: PPUSH
19097: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19101: LD_EXP 1
19105: PPUSH
19106: LD_INT 24
19108: PPUSH
19109: CALL_OW 308
19113: PUSH
19114: LD_EXP 1
19118: PPUSH
19119: CALL_OW 310
19123: OR
19124: IFFALSE 19148
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19126: LD_EXP 16
19130: PPUSH
19131: LD_STRING D7a-Sik-1
19133: PPUSH
19134: CALL_OW 88
// SikorskyStatus = 1 ;
19138: LD_ADDR_EXP 21
19142: PUSH
19143: LD_INT 1
19145: ST_TO_ADDR
// end else
19146: GO 19168
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19148: LD_EXP 16
19152: PPUSH
19153: LD_STRING D7b-Sik-1
19155: PPUSH
19156: CALL_OW 88
// SikorskyStatus = 2 ;
19160: LD_ADDR_EXP 21
19164: PUSH
19165: LD_INT 2
19167: ST_TO_ADDR
// end ; end ;
19168: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19169: LD_EXP 36
19173: PUSH
19174: LD_INT 1
19176: EQUAL
19177: IFFALSE 19286
19179: GO 19181
19181: DISABLE
19182: LD_INT 0
19184: PPUSH
// begin enable ;
19185: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_INT 22
19193: PUSH
19194: LD_INT 3
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PPUSH
19201: CALL_OW 69
19205: PUSH
19206: FOR_IN
19207: IFFALSE 19234
// if IsInArea ( i , RussianEscape ) then
19209: LD_VAR 0 1
19213: PPUSH
19214: LD_INT 22
19216: PPUSH
19217: CALL_OW 308
19221: IFFALSE 19232
// RemoveUnit ( i ) ;
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 64
19232: GO 19206
19234: POP
19235: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19236: LD_ADDR_VAR 0 1
19240: PUSH
19241: LD_INT 22
19243: PUSH
19244: LD_INT 6
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 69
19255: PUSH
19256: FOR_IN
19257: IFFALSE 19284
// if IsInArea ( i , RussianEscape ) then
19259: LD_VAR 0 1
19263: PPUSH
19264: LD_INT 22
19266: PPUSH
19267: CALL_OW 308
19271: IFFALSE 19282
// RemoveUnit ( i ) ;
19273: LD_VAR 0 1
19277: PPUSH
19278: CALL_OW 64
19282: GO 19256
19284: POP
19285: POP
// end ; end_of_file
19286: PPOPN 1
19288: END
// on BuildingComplete ( building ) do var tmp , un ;
19289: LD_INT 0
19291: PPUSH
19292: PPUSH
// begin if GetSide ( building ) = 3 then
19293: LD_VAR 0 1
19297: PPUSH
19298: CALL_OW 255
19302: PUSH
19303: LD_INT 3
19305: EQUAL
19306: IFFALSE 19793
// begin if GetBType ( building ) = b_depot then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 266
19317: PUSH
19318: LD_INT 0
19320: EQUAL
19321: IFFALSE 19389
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 274
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: LD_INT 5000
19338: PPUSH
19339: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL_OW 274
19352: PPUSH
19353: LD_INT 2
19355: PPUSH
19356: LD_INT 5000
19358: PPUSH
19359: CALL_OW 277
// SetBName ( building , konev ) ;
19363: LD_VAR 0 1
19367: PPUSH
19368: LD_STRING konev
19370: PPUSH
19371: CALL_OW 500
// ruDepot = building ;
19375: LD_ADDR_EXP 28
19379: PUSH
19380: LD_VAR 0 1
19384: ST_TO_ADDR
// BuildRussianBase ;
19385: CALL 7176 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19389: LD_VAR 0 1
19393: PPUSH
19394: CALL_OW 266
19398: PUSH
19399: LD_INT 0
19401: EQUAL
19402: PUSH
19403: LD_VAR 0 1
19407: PPUSH
19408: CALL_OW 266
19412: PUSH
19413: LD_INT 2
19415: EQUAL
19416: OR
19417: PUSH
19418: LD_VAR 0 1
19422: PPUSH
19423: CALL_OW 266
19427: PUSH
19428: LD_INT 4
19430: EQUAL
19431: OR
19432: IFFALSE 19443
// ComUpgrade ( building ) ;
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 146
// if GetBType ( building ) = b_lab then
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 266
19452: PUSH
19453: LD_INT 6
19455: EQUAL
19456: IFFALSE 19507
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19458: LD_VAR 0 1
19462: PPUSH
19463: LD_INT 10
19465: PPUSH
19466: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_INT 12
19477: PPUSH
19478: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19482: LD_INT 3
19484: PPUSH
19485: LD_VAR 0 1
19489: PPUSH
19490: LD_INT 3
19492: PPUSH
19493: CALL 7731 0 3
// ruLab = building ;
19497: LD_ADDR_EXP 29
19501: PUSH
19502: LD_VAR 0 1
19506: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 266
19516: PUSH
19517: LD_INT 32
19519: EQUAL
19520: IFFALSE 19638
// begin uc_side = 3 ;
19522: LD_ADDR_OWVAR 20
19526: PUSH
19527: LD_INT 3
19529: ST_TO_ADDR
// uc_nation = 3 ;
19530: LD_ADDR_OWVAR 21
19534: PUSH
19535: LD_INT 3
19537: ST_TO_ADDR
// hc_gallery =  ;
19538: LD_ADDR_OWVAR 33
19542: PUSH
19543: LD_STRING 
19545: ST_TO_ADDR
// hc_name =  ;
19546: LD_ADDR_OWVAR 26
19550: PUSH
19551: LD_STRING 
19553: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19554: LD_INT 0
19556: PPUSH
19557: LD_INT 1
19559: PPUSH
19560: LD_EXP 25
19564: PPUSH
19565: LD_EXP 26
19569: PPUSH
19570: CALL_OW 12
19574: PPUSH
19575: CALL_OW 380
// un = CreateHuman ;
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: CALL_OW 44
19588: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19589: LD_VAR 0 3
19593: PPUSH
19594: LD_VAR 0 1
19598: PPUSH
19599: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19603: LD_VAR 0 1
19607: PPUSH
19608: LD_INT 43
19610: PUSH
19611: LD_INT 44
19613: PUSH
19614: LD_INT 46
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 1
19624: PPUSH
19625: LD_INT 3
19627: PPUSH
19628: CALL_OW 12
19632: ARRAY
19633: PPUSH
19634: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 266
19647: PUSH
19648: LD_INT 33
19650: EQUAL
19651: IFFALSE 19688
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19653: LD_VAR 0 1
19657: PPUSH
19658: LD_INT 43
19660: PUSH
19661: LD_INT 44
19663: PUSH
19664: LD_INT 46
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 1
19674: PPUSH
19675: LD_INT 3
19677: PPUSH
19678: CALL_OW 12
19682: ARRAY
19683: PPUSH
19684: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19688: LD_VAR 0 1
19692: PPUSH
19693: CALL_OW 266
19697: PUSH
19698: LD_INT 24
19700: EQUAL
19701: IFFALSE 19711
// russianAI = 1 ;
19703: LD_ADDR_EXP 27
19707: PUSH
19708: LD_INT 1
19710: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19711: LD_EXP 31
19715: PUSH
19716: LD_INT 0
19718: GREATER
19719: IFFALSE 19793
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19721: LD_ADDR_EXP 31
19725: PUSH
19726: LD_EXP 31
19730: PPUSH
19731: LD_INT 1
19733: PPUSH
19734: CALL_OW 3
19738: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19739: LD_ADDR_EXP 31
19743: PUSH
19744: LD_EXP 31
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: CALL_OW 3
19756: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19757: LD_ADDR_EXP 31
19761: PUSH
19762: LD_EXP 31
19766: PPUSH
19767: LD_INT 1
19769: PPUSH
19770: CALL_OW 3
19774: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19775: LD_ADDR_EXP 31
19779: PUSH
19780: LD_EXP 31
19784: PPUSH
19785: LD_INT 1
19787: PPUSH
19788: CALL_OW 3
19792: ST_TO_ADDR
// end ; end ; end ;
19793: PPOPN 3
19795: END
// on UpgradeComplete ( building ) do var i ;
19796: LD_INT 0
19798: PPUSH
// begin if GetSide ( building ) = 3 then
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 255
19808: PUSH
19809: LD_INT 3
19811: EQUAL
19812: IFFALSE 19993
// begin if GetBType ( building ) = b_factory then
19814: LD_VAR 0 1
19818: PPUSH
19819: CALL_OW 266
19823: PUSH
19824: LD_INT 3
19826: EQUAL
19827: IFFALSE 19894
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 25
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 69
19862: PUSH
19863: FOR_IN
19864: IFFALSE 19882
// ComEnterUnit ( i , building ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: LD_VAR 0 1
19875: PPUSH
19876: CALL_OW 120
19880: GO 19863
19882: POP
19883: POP
// ruFab = building ;
19884: LD_ADDR_EXP 30
19888: PUSH
19889: LD_VAR 0 1
19893: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19894: LD_VAR 0 1
19898: PPUSH
19899: CALL_OW 266
19903: PUSH
19904: LD_INT 8
19906: EQUAL
19907: IFFALSE 19964
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19909: LD_ADDR_VAR 0 2
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_INT 3
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 25
19926: PUSH
19927: LD_INT 4
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: PUSH
19943: FOR_IN
19944: IFFALSE 19962
// ComEnterUnit ( i , building ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 1
19955: PPUSH
19956: CALL_OW 120
19960: GO 19943
19962: POP
19963: POP
// if GetBType ( building ) = b_warehouse then
19964: LD_VAR 0 1
19968: PPUSH
19969: CALL_OW 266
19973: PUSH
19974: LD_INT 1
19976: EQUAL
19977: IFFALSE 19993
// begin ComEnterUnit ( Borodin , building ) ;
19979: LD_EXP 24
19983: PPUSH
19984: LD_VAR 0 1
19988: PPUSH
19989: CALL_OW 120
// end ; end ; end ;
19993: PPOPN 2
19995: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 247
20005: PUSH
20006: LD_INT 2
20008: EQUAL
20009: PUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: CALL_OW 263
20019: PUSH
20020: LD_INT 3
20022: EQUAL
20023: AND
20024: PUSH
20025: LD_EXP 41
20029: PUSH
20030: LD_INT 0
20032: EQUAL
20033: AND
20034: IFFALSE 20152
// begin varEvent1 = 1 ;
20036: LD_ADDR_EXP 41
20040: PUSH
20041: LD_INT 1
20043: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20044: LD_VAR 0 1
20048: PPUSH
20049: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20053: LD_INT 22
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 21
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 25
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 25
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 25
20098: PUSH
20099: LD_INT 3
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 25
20108: PUSH
20109: LD_INT 4
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: PPUSH
20128: CALL_OW 69
20132: PUSH
20133: LD_EXP 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: DIFF
20141: PPUSH
20142: LD_STRING DC-Sol1-1
20144: PPUSH
20145: LD_STRING DC-FSol1-1
20147: PPUSH
20148: CALL 6571 0 3
// end ; end ;
20152: PPOPN 1
20154: END
// on UnitDestroyed ( unit ) do var i ;
20155: LD_INT 0
20157: PPUSH
// begin if GetSide ( unit ) = 3 then
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 255
20167: PUSH
20168: LD_INT 3
20170: EQUAL
20171: IFFALSE 20941
// begin if GetType ( unit ) = unit_building then
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 247
20182: PUSH
20183: LD_INT 3
20185: EQUAL
20186: IFFALSE 20878
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20188: LD_VAR 0 1
20192: PPUSH
20193: CALL_OW 266
20197: PUSH
20198: LD_INT 31
20200: EQUAL
20201: PUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 266
20211: PUSH
20212: LD_INT 32
20214: EQUAL
20215: OR
20216: PUSH
20217: LD_VAR 0 1
20221: PPUSH
20222: CALL_OW 266
20226: PUSH
20227: LD_INT 36
20229: EQUAL
20230: OR
20231: PUSH
20232: LD_VAR 0 1
20236: PPUSH
20237: CALL_OW 266
20241: PUSH
20242: LD_INT 0
20244: EQUAL
20245: OR
20246: PUSH
20247: LD_VAR 0 1
20251: PPUSH
20252: CALL_OW 266
20256: PUSH
20257: LD_INT 24
20259: EQUAL
20260: OR
20261: PUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 266
20271: PUSH
20272: LD_INT 17
20274: EQUAL
20275: OR
20276: PUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL_OW 266
20286: PUSH
20287: LD_INT 25
20289: EQUAL
20290: OR
20291: PUSH
20292: LD_VAR 0 1
20296: PPUSH
20297: CALL_OW 266
20301: PUSH
20302: LD_INT 19
20304: EQUAL
20305: OR
20306: PUSH
20307: LD_VAR 0 1
20311: PPUSH
20312: CALL_OW 266
20316: PUSH
20317: LD_INT 20
20319: EQUAL
20320: OR
20321: PUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 266
20331: PUSH
20332: LD_INT 18
20334: EQUAL
20335: OR
20336: PUSH
20337: LD_VAR 0 1
20341: PPUSH
20342: CALL_OW 266
20346: PUSH
20347: LD_INT 21
20349: EQUAL
20350: OR
20351: PUSH
20352: LD_VAR 0 1
20356: PPUSH
20357: CALL_OW 266
20361: PUSH
20362: LD_INT 23
20364: EQUAL
20365: OR
20366: PUSH
20367: LD_VAR 0 1
20371: PPUSH
20372: CALL_OW 266
20376: PUSH
20377: LD_INT 16
20379: EQUAL
20380: OR
20381: PUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 266
20391: PUSH
20392: LD_INT 6
20394: EQUAL
20395: OR
20396: PUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: CALL_OW 266
20406: PUSH
20407: LD_INT 29
20409: EQUAL
20410: OR
20411: PUSH
20412: LD_VAR 0 1
20416: PPUSH
20417: CALL_OW 266
20421: PUSH
20422: LD_INT 26
20424: EQUAL
20425: OR
20426: PUSH
20427: LD_VAR 0 1
20431: PPUSH
20432: CALL_OW 266
20436: PUSH
20437: LD_INT 30
20439: EQUAL
20440: OR
20441: PUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 266
20451: PUSH
20452: LD_INT 28
20454: EQUAL
20455: OR
20456: PUSH
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 266
20466: PUSH
20467: LD_INT 27
20469: EQUAL
20470: OR
20471: PUSH
20472: LD_VAR 0 1
20476: PPUSH
20477: CALL_OW 266
20481: PUSH
20482: LD_INT 33
20484: EQUAL
20485: OR
20486: PUSH
20487: LD_VAR 0 1
20491: PPUSH
20492: CALL_OW 266
20496: PUSH
20497: LD_INT 2
20499: EQUAL
20500: OR
20501: PUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: CALL_OW 266
20511: PUSH
20512: LD_INT 4
20514: EQUAL
20515: OR
20516: IFFALSE 20602
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20518: LD_ADDR_EXP 31
20522: PUSH
20523: LD_EXP 31
20527: PUSH
20528: LD_VAR 0 1
20532: PPUSH
20533: CALL_OW 266
20537: ADD
20538: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20539: LD_ADDR_EXP 31
20543: PUSH
20544: LD_EXP 31
20548: PUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: CALL_OW 250
20558: ADD
20559: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20560: LD_ADDR_EXP 31
20564: PUSH
20565: LD_EXP 31
20569: PUSH
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL_OW 251
20579: ADD
20580: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20581: LD_ADDR_EXP 31
20585: PUSH
20586: LD_EXP 31
20590: PUSH
20591: LD_VAR 0 1
20595: PPUSH
20596: CALL_OW 254
20600: ADD
20601: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20602: LD_VAR 0 1
20606: PPUSH
20607: CALL_OW 266
20611: PUSH
20612: LD_INT 1
20614: EQUAL
20615: IFFALSE 20694
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20617: LD_ADDR_EXP 31
20621: PUSH
20622: LD_EXP 31
20626: PUSH
20627: LD_INT 0
20629: ADD
20630: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20631: LD_ADDR_EXP 31
20635: PUSH
20636: LD_EXP 31
20640: PUSH
20641: LD_VAR 0 1
20645: PPUSH
20646: CALL_OW 250
20650: ADD
20651: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20652: LD_ADDR_EXP 31
20656: PUSH
20657: LD_EXP 31
20661: PUSH
20662: LD_VAR 0 1
20666: PPUSH
20667: CALL_OW 251
20671: ADD
20672: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20673: LD_ADDR_EXP 31
20677: PUSH
20678: LD_EXP 31
20682: PUSH
20683: LD_VAR 0 1
20687: PPUSH
20688: CALL_OW 254
20692: ADD
20693: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 3
20706: EQUAL
20707: IFFALSE 20786
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20709: LD_ADDR_EXP 31
20713: PUSH
20714: LD_EXP 31
20718: PUSH
20719: LD_INT 2
20721: ADD
20722: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20723: LD_ADDR_EXP 31
20727: PUSH
20728: LD_EXP 31
20732: PUSH
20733: LD_VAR 0 1
20737: PPUSH
20738: CALL_OW 250
20742: ADD
20743: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20744: LD_ADDR_EXP 31
20748: PUSH
20749: LD_EXP 31
20753: PUSH
20754: LD_VAR 0 1
20758: PPUSH
20759: CALL_OW 251
20763: ADD
20764: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20765: LD_ADDR_EXP 31
20769: PUSH
20770: LD_EXP 31
20774: PUSH
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 254
20784: ADD
20785: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 266
20795: PUSH
20796: LD_INT 5
20798: EQUAL
20799: IFFALSE 20878
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20801: LD_ADDR_EXP 31
20805: PUSH
20806: LD_EXP 31
20810: PUSH
20811: LD_INT 4
20813: ADD
20814: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20815: LD_ADDR_EXP 31
20819: PUSH
20820: LD_EXP 31
20824: PUSH
20825: LD_VAR 0 1
20829: PPUSH
20830: CALL_OW 250
20834: ADD
20835: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20836: LD_ADDR_EXP 31
20840: PUSH
20841: LD_EXP 31
20845: PUSH
20846: LD_VAR 0 1
20850: PPUSH
20851: CALL_OW 251
20855: ADD
20856: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20857: LD_ADDR_EXP 31
20861: PUSH
20862: LD_EXP 31
20866: PUSH
20867: LD_VAR 0 1
20871: PPUSH
20872: CALL_OW 254
20876: ADD
20877: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20878: LD_VAR 0 1
20882: PPUSH
20883: CALL_OW 247
20887: PUSH
20888: LD_INT 1
20890: EQUAL
20891: IFFALSE 20941
// begin for i in defenders_list do
20893: LD_ADDR_VAR 0 2
20897: PUSH
20898: LD_EXP 32
20902: PUSH
20903: FOR_IN
20904: IFFALSE 20939
// if i = unit then
20906: LD_VAR 0 2
20910: PUSH
20911: LD_VAR 0 1
20915: EQUAL
20916: IFFALSE 20937
// defenders_list = defenders_list diff [ unit ] ;
20918: LD_ADDR_EXP 32
20922: PUSH
20923: LD_EXP 32
20927: PUSH
20928: LD_VAR 0 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: DIFF
20936: ST_TO_ADDR
20937: GO 20903
20939: POP
20940: POP
// end ; end ; end ; end_of_file
20941: PPOPN 2
20943: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20944: GO 20946
20946: DISABLE
20947: LD_INT 0
20949: PPUSH
// begin enemyWayX = [ ] ;
20950: LD_ADDR_EXP 45
20954: PUSH
20955: EMPTY
20956: ST_TO_ADDR
// enemyWayY = [ ] ;
20957: LD_ADDR_EXP 46
20961: PUSH
20962: EMPTY
20963: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
20964: LD_ADDR_VAR 0 1
20968: PUSH
20969: LD_INT 1
20971: PPUSH
20972: LD_INT 3
20974: PPUSH
20975: CALL_OW 12
20979: ST_TO_ADDR
// if rnd = 1 then
20980: LD_VAR 0 1
20984: PUSH
20985: LD_INT 1
20987: EQUAL
20988: IFFALSE 21028
// begin enemyWayX = [ 73 , 46 , 29 ] ;
20990: LD_ADDR_EXP 45
20994: PUSH
20995: LD_INT 73
20997: PUSH
20998: LD_INT 46
21000: PUSH
21001: LD_INT 29
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: LIST
21008: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21009: LD_ADDR_EXP 46
21013: PUSH
21014: LD_INT 71
21016: PUSH
21017: LD_INT 43
21019: PUSH
21020: LD_INT 29
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: ST_TO_ADDR
// end ; if rnd = 2 then
21028: LD_VAR 0 1
21032: PUSH
21033: LD_INT 2
21035: EQUAL
21036: IFFALSE 21060
// begin enemyWayX = [ 64 ] ;
21038: LD_ADDR_EXP 45
21042: PUSH
21043: LD_INT 64
21045: PUSH
21046: EMPTY
21047: LIST
21048: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21049: LD_ADDR_EXP 46
21053: PUSH
21054: LD_INT 43
21056: PUSH
21057: EMPTY
21058: LIST
21059: ST_TO_ADDR
// end ; if rnd = 3 then
21060: LD_VAR 0 1
21064: PUSH
21065: LD_INT 3
21067: EQUAL
21068: IFFALSE 21092
// begin enemyWayX = [ 80 ] ;
21070: LD_ADDR_EXP 45
21074: PUSH
21075: LD_INT 80
21077: PUSH
21078: EMPTY
21079: LIST
21080: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21081: LD_ADDR_EXP 46
21085: PUSH
21086: LD_INT 28
21088: PUSH
21089: EMPTY
21090: LIST
21091: ST_TO_ADDR
// end ; enable ;
21092: ENABLE
// end ;
21093: PPOPN 1
21095: END
// every 0 0$1 do
21096: GO 21098
21098: DISABLE
// begin enable ;
21099: ENABLE
// if escapeAvalaible = 0 then
21100: LD_EXP 36
21104: PUSH
21105: LD_INT 0
21107: EQUAL
21108: IFFALSE 21120
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21110: LD_INT 3
21112: PPUSH
21113: LD_INT 6
21115: PPUSH
21116: CALL 7816 0 2
// if escapeAvalaible = 0 then
21120: LD_EXP 36
21124: PUSH
21125: LD_INT 0
21127: EQUAL
21128: IFFALSE 21140
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21130: LD_INT 1
21132: PPUSH
21133: LD_INT 24
21135: PPUSH
21136: CALL 8610 0 2
// if russianAI = 1 then
21140: LD_EXP 27
21144: PUSH
21145: LD_INT 1
21147: EQUAL
21148: IFFALSE 21218
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21150: LD_INT 3
21152: PPUSH
21153: LD_INT 7
21155: PPUSH
21156: LD_INT 6
21158: PPUSH
21159: LD_EXP 29
21163: PPUSH
21164: CALL 10684 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21168: LD_INT 3
21170: PPUSH
21171: LD_EXP 28
21175: PPUSH
21176: LD_INT 6
21178: PPUSH
21179: LD_EXP 31
21183: PPUSH
21184: CALL 10293 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21188: LD_INT 3
21190: PPUSH
21191: LD_INT 26
21193: PPUSH
21194: LD_EXP 45
21198: PPUSH
21199: LD_EXP 46
21203: PPUSH
21204: CALL 9161 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21208: LD_INT 3
21210: PPUSH
21211: LD_INT 1
21213: PPUSH
21214: CALL 11228 0 2
// end ; if SikorskyArrive = 1 then
21218: LD_EXP 18
21222: PUSH
21223: LD_INT 1
21225: EQUAL
21226: IFFALSE 21244
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21228: LD_INT 3
21230: PPUSH
21231: LD_INT 10
21233: PPUSH
21234: LD_INT 53
21236: PPUSH
21237: LD_INT 59
21239: PPUSH
21240: CALL 8958 0 4
// end ;
21244: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21245: LD_EXP 27
21249: PUSH
21250: LD_INT 1
21252: EQUAL
21253: IFFALSE 21529
21255: GO 21257
21257: DISABLE
21258: LD_INT 0
21260: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21261: LD_ADDR_VAR 0 1
21265: PUSH
21266: LD_INT 22
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 21
21278: PUSH
21279: LD_INT 3
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 30
21288: PUSH
21289: LD_INT 32
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 3
21298: PUSH
21299: LD_INT 2
21301: PUSH
21302: LD_INT 35
21304: PUSH
21305: LD_INT 43
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 35
21314: PUSH
21315: LD_INT 44
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 35
21324: PUSH
21325: LD_INT 46
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: PPUSH
21348: CALL_OW 69
21352: PUSH
21353: FOR_IN
21354: IFFALSE 21393
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21356: LD_VAR 0 1
21360: PPUSH
21361: LD_INT 43
21363: PUSH
21364: LD_INT 44
21366: PUSH
21367: LD_INT 46
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: PPUSH
21378: LD_INT 3
21380: PPUSH
21381: CALL_OW 12
21385: ARRAY
21386: PPUSH
21387: CALL_OW 431
21391: GO 21353
21393: POP
21394: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21395: LD_ADDR_VAR 0 1
21399: PUSH
21400: LD_INT 22
21402: PUSH
21403: LD_INT 3
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 21
21412: PUSH
21413: LD_INT 3
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 30
21422: PUSH
21423: LD_INT 33
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 3
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 35
21438: PUSH
21439: LD_INT 43
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 35
21448: PUSH
21449: LD_INT 44
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 35
21458: PUSH
21459: LD_INT 46
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: PUSH
21487: FOR_IN
21488: IFFALSE 21527
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21490: LD_VAR 0 1
21494: PPUSH
21495: LD_INT 43
21497: PUSH
21498: LD_INT 44
21500: PUSH
21501: LD_INT 46
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PPUSH
21512: LD_INT 3
21514: PPUSH
21515: CALL_OW 12
21519: ARRAY
21520: PPUSH
21521: CALL_OW 431
21525: GO 21487
21527: POP
21528: POP
// end ;
21529: PPOPN 1
21531: END
// every 0 0$1 trigger SikorskyAI = 1 do
21532: LD_EXP 20
21536: PUSH
21537: LD_INT 1
21539: EQUAL
21540: IFFALSE 21575
21542: GO 21544
21544: DISABLE
// begin enable ;
21545: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21546: LD_INT 4
21548: PPUSH
21549: LD_INT 10
21551: PPUSH
21552: LD_INT 93
21554: PPUSH
21555: LD_INT 93
21557: PPUSH
21558: CALL 8958 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21562: LD_INT 4
21564: PPUSH
21565: LD_INT 11
21567: PPUSH
21568: LD_INT 3
21570: PPUSH
21571: CALL 15440 0 3
// end ;
21575: END
// every 0 0$1 trigger SikorskyAI = 1 do
21576: LD_EXP 20
21580: PUSH
21581: LD_INT 1
21583: EQUAL
21584: IFFALSE 21596
21586: GO 21588
21588: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21589: LD_INT 4
21591: PPUSH
21592: CALL 9965 0 1
21596: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21597: LD_EXP 27
21601: PUSH
21602: LD_INT 1
21604: EQUAL
21605: PUSH
21606: LD_EXP 30
21610: PPUSH
21611: CALL_OW 302
21615: AND
21616: PUSH
21617: LD_EXP 30
21621: PPUSH
21622: CALL_OW 255
21626: PUSH
21627: LD_INT 3
21629: EQUAL
21630: AND
21631: PUSH
21632: LD_INT 22
21634: PUSH
21635: LD_INT 3
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 21
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 33
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: PUSH
21672: LD_INT 0
21674: EQUAL
21675: AND
21676: IFFALSE 21910
21678: GO 21680
21680: DISABLE
// begin enable ;
21681: ENABLE
// if Difficulty = 1 then
21682: LD_OWVAR 67
21686: PUSH
21687: LD_INT 1
21689: EQUAL
21690: IFFALSE 21758
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21692: LD_INT 3
21694: PPUSH
21695: LD_EXP 30
21699: PPUSH
21700: LD_INT 5
21702: PPUSH
21703: LD_INT 8
21705: PPUSH
21706: CALL_OW 12
21710: PPUSH
21711: LD_INT 43
21713: PUSH
21714: LD_INT 43
21716: PUSH
21717: LD_INT 43
21719: PUSH
21720: LD_INT 43
21722: PUSH
21723: LD_INT 44
21725: PUSH
21726: LD_INT 44
21728: PUSH
21729: LD_INT 44
21731: PUSH
21732: LD_INT 46
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: PPUSH
21745: LD_INT 1
21747: PPUSH
21748: LD_INT 3
21750: PPUSH
21751: LD_INT 24
21753: PPUSH
21754: CALL 8804 0 7
// if Difficulty = 2 then
21758: LD_OWVAR 67
21762: PUSH
21763: LD_INT 2
21765: EQUAL
21766: IFFALSE 21834
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
21768: LD_INT 3
21770: PPUSH
21771: LD_EXP 30
21775: PPUSH
21776: LD_INT 6
21778: PPUSH
21779: LD_INT 8
21781: PPUSH
21782: CALL_OW 12
21786: PPUSH
21787: LD_INT 43
21789: PUSH
21790: LD_INT 43
21792: PUSH
21793: LD_INT 44
21795: PUSH
21796: LD_INT 44
21798: PUSH
21799: LD_INT 44
21801: PUSH
21802: LD_INT 44
21804: PUSH
21805: LD_INT 46
21807: PUSH
21808: LD_INT 46
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PPUSH
21821: LD_INT 1
21823: PPUSH
21824: LD_INT 3
21826: PPUSH
21827: LD_INT 24
21829: PPUSH
21830: CALL 8804 0 7
// if Difficulty = 3 then
21834: LD_OWVAR 67
21838: PUSH
21839: LD_INT 3
21841: EQUAL
21842: IFFALSE 21910
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
21844: LD_INT 3
21846: PPUSH
21847: LD_EXP 30
21851: PPUSH
21852: LD_INT 7
21854: PPUSH
21855: LD_INT 8
21857: PPUSH
21858: CALL_OW 12
21862: PPUSH
21863: LD_INT 43
21865: PUSH
21866: LD_INT 43
21868: PUSH
21869: LD_INT 44
21871: PUSH
21872: LD_INT 44
21874: PUSH
21875: LD_INT 44
21877: PUSH
21878: LD_INT 46
21880: PUSH
21881: LD_INT 46
21883: PUSH
21884: LD_INT 46
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: PPUSH
21897: LD_INT 1
21899: PPUSH
21900: LD_INT 3
21902: PPUSH
21903: LD_INT 24
21905: PPUSH
21906: CALL 8804 0 7
// end ;
21910: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
21911: LD_EXP 38
21915: PUSH
21916: LD_INT 1
21918: EQUAL
21919: IFFALSE 22001
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
21927: LD_ADDR_VAR 0 1
21931: PUSH
21932: LD_INT 22
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 21
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 3
21954: PUSH
21955: LD_INT 24
21957: PUSH
21958: LD_INT 650
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: LIST
21973: PPUSH
21974: CALL_OW 69
21978: PUSH
21979: FOR_IN
21980: IFFALSE 21999
// ComMoveXY ( i , 51 , 12 ) ;
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_INT 51
21989: PPUSH
21990: LD_INT 12
21992: PPUSH
21993: CALL_OW 111
21997: GO 21979
21999: POP
22000: POP
// end ; end_of_file
22001: PPOPN 1
22003: END
// every 3 3$20 trigger firstAttack = 1 do
22004: LD_EXP 33
22008: PUSH
22009: LD_INT 1
22011: EQUAL
22012: IFFALSE 22118
22014: GO 22016
22016: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22017: LD_INT 6
22019: PPUSH
22020: LD_INT 3
22022: PPUSH
22023: LD_INT 5
22025: PPUSH
22026: LD_INT 6
22028: PPUSH
22029: CALL_OW 12
22033: PUSH
22034: LD_INT 5
22036: PPUSH
22037: LD_INT 6
22039: PPUSH
22040: CALL_OW 12
22044: PUSH
22045: LD_INT 5
22047: PPUSH
22048: LD_INT 6
22050: PPUSH
22051: CALL_OW 12
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: LD_OWVAR 67
22065: ARRAY
22066: PPUSH
22067: LD_INT 0
22069: PPUSH
22070: LD_INT 0
22072: PPUSH
22073: LD_INT 0
22075: PPUSH
22076: LD_INT 0
22078: PPUSH
22079: LD_EXP 25
22083: PPUSH
22084: LD_EXP 26
22088: PPUSH
22089: CALL_OW 12
22093: PPUSH
22094: LD_INT 16
22096: PPUSH
22097: LD_INT 7
22099: PPUSH
22100: LD_INT 1
22102: PPUSH
22103: LD_INT 1
22105: PPUSH
22106: LD_INT 3
22108: PPUSH
22109: CALL_OW 12
22113: PPUSH
22114: CALL 11458 0 12
22118: END
// every 3 3$40 trigger firstAttack = 1 do
22119: LD_EXP 33
22123: PUSH
22124: LD_INT 1
22126: EQUAL
22127: IFFALSE 22219
22129: GO 22131
22131: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22132: LD_INT 16
22134: PPUSH
22135: LD_INT 6
22137: PPUSH
22138: LD_INT 3
22140: PPUSH
22141: LD_INT 4
22143: PPUSH
22144: CALL_OW 12
22148: PUSH
22149: LD_INT 4
22151: PPUSH
22152: LD_INT 5
22154: PPUSH
22155: CALL_OW 12
22159: PUSH
22160: LD_INT 5
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: LD_OWVAR 67
22172: ARRAY
22173: PPUSH
22174: LD_EXP 25
22178: PPUSH
22179: LD_EXP 26
22183: PPUSH
22184: CALL_OW 12
22188: PPUSH
22189: LD_INT 3
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: LD_INT 3
22197: PPUSH
22198: LD_INT 44
22200: PUSH
22201: LD_INT 46
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PPUSH
22208: EMPTY
22209: PPUSH
22210: EMPTY
22211: PPUSH
22212: LD_INT 1
22214: PPUSH
22215: CALL 13751 0 11
22219: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22220: LD_EXP 33
22224: PUSH
22225: LD_INT 1
22227: EQUAL
22228: PUSH
22229: LD_EXP 39
22233: PUSH
22234: LD_INT 0
22236: EQUAL
22237: AND
22238: IFFALSE 22344
22240: GO 22242
22242: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22243: LD_INT 6
22245: PPUSH
22246: LD_INT 3
22248: PPUSH
22249: LD_INT 5
22251: PPUSH
22252: LD_INT 6
22254: PPUSH
22255: CALL_OW 12
22259: PUSH
22260: LD_INT 5
22262: PPUSH
22263: LD_INT 6
22265: PPUSH
22266: CALL_OW 12
22270: PUSH
22271: LD_INT 5
22273: PPUSH
22274: LD_INT 6
22276: PPUSH
22277: CALL_OW 12
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: LIST
22286: PUSH
22287: LD_OWVAR 67
22291: ARRAY
22292: PPUSH
22293: LD_INT 0
22295: PPUSH
22296: LD_INT 0
22298: PPUSH
22299: LD_INT 0
22301: PPUSH
22302: LD_INT 0
22304: PPUSH
22305: LD_EXP 25
22309: PPUSH
22310: LD_EXP 26
22314: PPUSH
22315: CALL_OW 12
22319: PPUSH
22320: LD_INT 16
22322: PPUSH
22323: LD_INT 7
22325: PPUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: LD_INT 3
22334: PPUSH
22335: CALL_OW 12
22339: PPUSH
22340: CALL 11458 0 12
22344: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22345: LD_EXP 33
22349: PUSH
22350: LD_INT 1
22352: EQUAL
22353: PUSH
22354: LD_EXP 39
22358: PUSH
22359: LD_INT 0
22361: EQUAL
22362: AND
22363: IFFALSE 22459
22365: GO 22367
22367: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22368: LD_INT 16
22370: PPUSH
22371: LD_INT 6
22373: PPUSH
22374: LD_INT 5
22376: PPUSH
22377: LD_INT 6
22379: PPUSH
22380: CALL_OW 12
22384: PUSH
22385: LD_INT 6
22387: PPUSH
22388: LD_INT 7
22390: PPUSH
22391: CALL_OW 12
22395: PUSH
22396: LD_INT 7
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: PUSH
22404: LD_OWVAR 67
22408: ARRAY
22409: PPUSH
22410: LD_EXP 25
22414: PPUSH
22415: LD_EXP 26
22419: PPUSH
22420: CALL_OW 12
22424: PPUSH
22425: LD_INT 3
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: LD_INT 43
22436: PUSH
22437: LD_INT 44
22439: PUSH
22440: LD_INT 46
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: LIST
22447: PPUSH
22448: EMPTY
22449: PPUSH
22450: EMPTY
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: CALL 13751 0 11
22459: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22460: LD_EXP 33
22464: PUSH
22465: LD_INT 1
22467: EQUAL
22468: PUSH
22469: LD_EXP 39
22473: PUSH
22474: LD_INT 0
22476: EQUAL
22477: AND
22478: IFFALSE 22554
22480: GO 22482
22482: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22483: LD_INT 16
22485: PPUSH
22486: LD_INT 6
22488: PPUSH
22489: LD_INT 5
22491: PUSH
22492: LD_INT 6
22494: PUSH
22495: LD_INT 7
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: PUSH
22503: LD_OWVAR 67
22507: ARRAY
22508: PPUSH
22509: LD_EXP 25
22513: PPUSH
22514: LD_EXP 26
22518: PPUSH
22519: CALL_OW 12
22523: PPUSH
22524: LD_INT 3
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 3
22532: PPUSH
22533: LD_INT 44
22535: PUSH
22536: LD_INT 46
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PPUSH
22543: EMPTY
22544: PPUSH
22545: EMPTY
22546: PPUSH
22547: LD_INT 1
22549: PPUSH
22550: CALL 13751 0 11
22554: END
// every 1 1$00 trigger secondAttack = 1 do
22555: LD_EXP 34
22559: PUSH
22560: LD_INT 1
22562: EQUAL
22563: IFFALSE 22669
22565: GO 22567
22567: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22568: LD_INT 6
22570: PPUSH
22571: LD_INT 3
22573: PPUSH
22574: LD_INT 4
22576: PPUSH
22577: LD_INT 7
22579: PPUSH
22580: CALL_OW 12
22584: PUSH
22585: LD_INT 6
22587: PPUSH
22588: LD_INT 7
22590: PPUSH
22591: CALL_OW 12
22595: PUSH
22596: LD_INT 6
22598: PPUSH
22599: LD_INT 10
22601: PPUSH
22602: CALL_OW 12
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: LD_OWVAR 67
22616: ARRAY
22617: PPUSH
22618: LD_INT 0
22620: PPUSH
22621: LD_INT 0
22623: PPUSH
22624: LD_INT 0
22626: PPUSH
22627: LD_INT 0
22629: PPUSH
22630: LD_EXP 25
22634: PPUSH
22635: LD_EXP 26
22639: PPUSH
22640: CALL_OW 12
22644: PPUSH
22645: LD_INT 16
22647: PPUSH
22648: LD_INT 7
22650: PPUSH
22651: LD_INT 1
22653: PPUSH
22654: LD_INT 1
22656: PPUSH
22657: LD_INT 3
22659: PPUSH
22660: CALL_OW 12
22664: PPUSH
22665: CALL 11458 0 12
22669: END
// every 1 1$00 trigger secondAttack = 1 do
22670: LD_EXP 34
22674: PUSH
22675: LD_INT 1
22677: EQUAL
22678: IFFALSE 22782
22680: GO 22682
22682: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22683: LD_INT 16
22685: PPUSH
22686: LD_INT 6
22688: PPUSH
22689: LD_INT 5
22691: PPUSH
22692: LD_INT 8
22694: PPUSH
22695: CALL_OW 12
22699: PUSH
22700: LD_INT 6
22702: PPUSH
22703: LD_INT 9
22705: PPUSH
22706: CALL_OW 12
22710: PUSH
22711: LD_INT 7
22713: PPUSH
22714: LD_INT 9
22716: PPUSH
22717: CALL_OW 12
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_OWVAR 67
22731: ARRAY
22732: PPUSH
22733: LD_EXP 25
22737: PPUSH
22738: LD_EXP 26
22742: PPUSH
22743: CALL_OW 12
22747: PPUSH
22748: LD_INT 3
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: LD_INT 3
22756: PPUSH
22757: LD_INT 43
22759: PUSH
22760: LD_INT 44
22762: PUSH
22763: LD_INT 46
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: PPUSH
22771: EMPTY
22772: PPUSH
22773: EMPTY
22774: PPUSH
22775: LD_INT 1
22777: PPUSH
22778: CALL 13751 0 11
22782: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22783: LD_EXP 18
22787: PUSH
22788: LD_INT 0
22790: EQUAL
22791: IFFALSE 22897
22793: GO 22795
22795: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22796: LD_INT 6
22798: PPUSH
22799: LD_INT 3
22801: PPUSH
22802: LD_INT 8
22804: PPUSH
22805: LD_INT 9
22807: PPUSH
22808: CALL_OW 12
22812: PUSH
22813: LD_INT 7
22815: PPUSH
22816: LD_INT 10
22818: PPUSH
22819: CALL_OW 12
22823: PUSH
22824: LD_INT 8
22826: PPUSH
22827: LD_INT 10
22829: PPUSH
22830: CALL_OW 12
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: PUSH
22840: LD_OWVAR 67
22844: ARRAY
22845: PPUSH
22846: LD_INT 0
22848: PPUSH
22849: LD_INT 0
22851: PPUSH
22852: LD_INT 0
22854: PPUSH
22855: LD_INT 0
22857: PPUSH
22858: LD_EXP 25
22862: PPUSH
22863: LD_EXP 26
22867: PPUSH
22868: CALL_OW 12
22872: PPUSH
22873: LD_INT 16
22875: PPUSH
22876: LD_INT 7
22878: PPUSH
22879: LD_INT 1
22881: PPUSH
22882: LD_INT 1
22884: PPUSH
22885: LD_INT 3
22887: PPUSH
22888: CALL_OW 12
22892: PPUSH
22893: CALL 11458 0 12
22897: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22898: LD_EXP 18
22902: PUSH
22903: LD_INT 0
22905: EQUAL
22906: IFFALSE 23006
22908: GO 22910
22910: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22911: LD_INT 16
22913: PPUSH
22914: LD_INT 6
22916: PPUSH
22917: LD_INT 5
22919: PPUSH
22920: LD_INT 8
22922: PPUSH
22923: CALL_OW 12
22927: PUSH
22928: LD_INT 6
22930: PPUSH
22931: LD_INT 9
22933: PPUSH
22934: CALL_OW 12
22938: PUSH
22939: LD_INT 7
22941: PPUSH
22942: LD_INT 9
22944: PPUSH
22945: CALL_OW 12
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: LD_OWVAR 67
22959: ARRAY
22960: PPUSH
22961: LD_EXP 25
22965: PPUSH
22966: LD_EXP 26
22970: PPUSH
22971: CALL_OW 12
22975: PPUSH
22976: LD_INT 3
22978: PPUSH
22979: LD_INT 1
22981: PPUSH
22982: LD_INT 3
22984: PPUSH
22985: LD_INT 44
22987: PUSH
22988: LD_INT 46
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PPUSH
22995: EMPTY
22996: PPUSH
22997: EMPTY
22998: PPUSH
22999: LD_INT 1
23001: PPUSH
23002: CALL 13751 0 11
23006: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23007: LD_EXP 18
23011: PUSH
23012: LD_INT 0
23014: EQUAL
23015: IFFALSE 23121
23017: GO 23019
23019: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23020: LD_INT 6
23022: PPUSH
23023: LD_INT 3
23025: PPUSH
23026: LD_INT 8
23028: PPUSH
23029: LD_INT 9
23031: PPUSH
23032: CALL_OW 12
23036: PUSH
23037: LD_INT 7
23039: PPUSH
23040: LD_INT 10
23042: PPUSH
23043: CALL_OW 12
23047: PUSH
23048: LD_INT 8
23050: PPUSH
23051: LD_INT 10
23053: PPUSH
23054: CALL_OW 12
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: LD_OWVAR 67
23068: ARRAY
23069: PPUSH
23070: LD_INT 0
23072: PPUSH
23073: LD_INT 0
23075: PPUSH
23076: LD_INT 0
23078: PPUSH
23079: LD_INT 0
23081: PPUSH
23082: LD_EXP 25
23086: PPUSH
23087: LD_EXP 26
23091: PPUSH
23092: CALL_OW 12
23096: PPUSH
23097: LD_INT 16
23099: PPUSH
23100: LD_INT 7
23102: PPUSH
23103: LD_INT 1
23105: PPUSH
23106: LD_INT 1
23108: PPUSH
23109: LD_INT 3
23111: PPUSH
23112: CALL_OW 12
23116: PPUSH
23117: CALL 11458 0 12
23121: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23122: LD_EXP 18
23126: PUSH
23127: LD_INT 0
23129: EQUAL
23130: IFFALSE 23230
23132: GO 23134
23134: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23135: LD_INT 16
23137: PPUSH
23138: LD_INT 6
23140: PPUSH
23141: LD_INT 5
23143: PPUSH
23144: LD_INT 8
23146: PPUSH
23147: CALL_OW 12
23151: PUSH
23152: LD_INT 6
23154: PPUSH
23155: LD_INT 9
23157: PPUSH
23158: CALL_OW 12
23162: PUSH
23163: LD_INT 7
23165: PPUSH
23166: LD_INT 9
23168: PPUSH
23169: CALL_OW 12
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: PUSH
23179: LD_OWVAR 67
23183: ARRAY
23184: PPUSH
23185: LD_EXP 25
23189: PPUSH
23190: LD_EXP 26
23194: PPUSH
23195: CALL_OW 12
23199: PPUSH
23200: LD_INT 3
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: LD_INT 3
23208: PPUSH
23209: LD_INT 44
23211: PUSH
23212: LD_INT 46
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PPUSH
23219: EMPTY
23220: PPUSH
23221: EMPTY
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: CALL 13751 0 11
23230: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23231: LD_EXP 18
23235: PUSH
23236: LD_INT 0
23238: EQUAL
23239: IFFALSE 23345
23241: GO 23243
23243: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23244: LD_INT 6
23246: PPUSH
23247: LD_INT 3
23249: PPUSH
23250: LD_INT 8
23252: PPUSH
23253: LD_INT 9
23255: PPUSH
23256: CALL_OW 12
23260: PUSH
23261: LD_INT 7
23263: PPUSH
23264: LD_INT 10
23266: PPUSH
23267: CALL_OW 12
23271: PUSH
23272: LD_INT 8
23274: PPUSH
23275: LD_INT 10
23277: PPUSH
23278: CALL_OW 12
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: PUSH
23288: LD_OWVAR 67
23292: ARRAY
23293: PPUSH
23294: LD_INT 0
23296: PPUSH
23297: LD_INT 0
23299: PPUSH
23300: LD_INT 0
23302: PPUSH
23303: LD_INT 0
23305: PPUSH
23306: LD_EXP 25
23310: PPUSH
23311: LD_EXP 26
23315: PPUSH
23316: CALL_OW 12
23320: PPUSH
23321: LD_INT 16
23323: PPUSH
23324: LD_INT 7
23326: PPUSH
23327: LD_INT 1
23329: PPUSH
23330: LD_INT 1
23332: PPUSH
23333: LD_INT 3
23335: PPUSH
23336: CALL_OW 12
23340: PPUSH
23341: CALL 11458 0 12
23345: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23346: LD_EXP 18
23350: PUSH
23351: LD_INT 0
23353: EQUAL
23354: IFFALSE 23454
23356: GO 23358
23358: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23359: LD_INT 16
23361: PPUSH
23362: LD_INT 6
23364: PPUSH
23365: LD_INT 5
23367: PPUSH
23368: LD_INT 8
23370: PPUSH
23371: CALL_OW 12
23375: PUSH
23376: LD_INT 6
23378: PPUSH
23379: LD_INT 9
23381: PPUSH
23382: CALL_OW 12
23386: PUSH
23387: LD_INT 7
23389: PPUSH
23390: LD_INT 9
23392: PPUSH
23393: CALL_OW 12
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: LIST
23402: PUSH
23403: LD_OWVAR 67
23407: ARRAY
23408: PPUSH
23409: LD_EXP 25
23413: PPUSH
23414: LD_EXP 26
23418: PPUSH
23419: CALL_OW 12
23423: PPUSH
23424: LD_INT 3
23426: PPUSH
23427: LD_INT 1
23429: PPUSH
23430: LD_INT 3
23432: PPUSH
23433: LD_INT 44
23435: PUSH
23436: LD_INT 46
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PPUSH
23443: EMPTY
23444: PPUSH
23445: EMPTY
23446: PPUSH
23447: LD_INT 1
23449: PPUSH
23450: CALL 13751 0 11
23454: END
// every 0 0$1 trigger timerStatus = 1 do
23455: LD_EXP 35
23459: PUSH
23460: LD_INT 1
23462: EQUAL
23463: IFFALSE 23500
23465: GO 23467
23467: DISABLE
// begin enable ;
23468: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23469: LD_ADDR_OWVAR 47
23473: PUSH
23474: LD_STRING #Am08-1
23476: PUSH
23477: LD_EXP 19
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23486: LD_ADDR_EXP 19
23490: PUSH
23491: LD_EXP 19
23495: PUSH
23496: LD_INT 35
23498: MINUS
23499: ST_TO_ADDR
// end ; end_of_file
23500: END
// every 1 1$0 do
23501: GO 23503
23503: DISABLE
// begin if supply <= 13 and supply > 7 then
23504: LD_EXP 40
23508: PUSH
23509: LD_INT 13
23511: LESSEQUAL
23512: PUSH
23513: LD_EXP 40
23517: PUSH
23518: LD_INT 7
23520: GREATER
23521: AND
23522: IFFALSE 23545
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23524: LD_INT 3
23526: PPUSH
23527: LD_INT 5
23529: PPUSH
23530: CALL_OW 12
23534: PPUSH
23535: LD_INT 5
23537: PPUSH
23538: LD_INT 1
23540: PPUSH
23541: CALL_OW 55
// if supply <= 7 and supply > 4 then
23545: LD_EXP 40
23549: PUSH
23550: LD_INT 7
23552: LESSEQUAL
23553: PUSH
23554: LD_EXP 40
23558: PUSH
23559: LD_INT 4
23561: GREATER
23562: AND
23563: IFFALSE 23586
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23565: LD_INT 3
23567: PPUSH
23568: LD_INT 5
23570: PPUSH
23571: CALL_OW 12
23575: PPUSH
23576: LD_INT 20
23578: PPUSH
23579: LD_INT 1
23581: PPUSH
23582: CALL_OW 55
// if supply <= 4 and supply > 0 then
23586: LD_EXP 40
23590: PUSH
23591: LD_INT 4
23593: LESSEQUAL
23594: PUSH
23595: LD_EXP 40
23599: PUSH
23600: LD_INT 0
23602: GREATER
23603: AND
23604: IFFALSE 23627
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23606: LD_INT 3
23608: PPUSH
23609: LD_INT 5
23611: PPUSH
23612: CALL_OW 12
23616: PPUSH
23617: LD_INT 21
23619: PPUSH
23620: LD_INT 1
23622: PPUSH
23623: CALL_OW 55
// if supply > 0 then
23627: LD_EXP 40
23631: PUSH
23632: LD_INT 0
23634: GREATER
23635: IFFALSE 23652
// begin supply = supply - 1 ;
23637: LD_ADDR_EXP 40
23641: PUSH
23642: LD_EXP 40
23646: PUSH
23647: LD_INT 1
23649: MINUS
23650: ST_TO_ADDR
// enable ;
23651: ENABLE
// end ; end ; end_of_file
23652: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23653: LD_EXP 39
23657: PUSH
23658: LD_INT 1
23660: EQUAL
23661: PUSH
23662: LD_EXP 1
23666: PPUSH
23667: CALL_OW 301
23671: AND
23672: IFFALSE 23684
23674: GO 23676
23676: DISABLE
// YouLost ( JMM ) ;
23677: LD_STRING JMM
23679: PPUSH
23680: CALL_OW 104
23684: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23685: LD_EXP 18
23689: PUSH
23690: LD_INT 1
23692: EQUAL
23693: PUSH
23694: LD_EXP 16
23698: PPUSH
23699: CALL_OW 301
23703: AND
23704: IFFALSE 23736
23706: GO 23708
23708: DISABLE
// begin DialogueOn ;
23709: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23713: LD_EXP 23
23717: PPUSH
23718: LD_STRING D8a-Pow-1
23720: PPUSH
23721: CALL_OW 94
// DialogueOff ;
23725: CALL_OW 7
// YouLost ( Dismissed ) ;
23729: LD_STRING Dismissed
23731: PPUSH
23732: CALL_OW 104
// end ;
23736: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23737: LD_EXP 37
23741: PPUSH
23742: CALL_OW 301
23746: IFFALSE 23758
23748: GO 23750
23750: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23751: LD_STRING Destroyed
23753: PPUSH
23754: CALL_OW 104
23758: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23759: LD_EXP 24
23763: PPUSH
23764: CALL_OW 301
23768: IFFALSE 24113
23770: GO 23772
23772: DISABLE
23773: LD_INT 0
23775: PPUSH
// begin russianAI = 0 ;
23776: LD_ADDR_EXP 27
23780: PUSH
23781: LD_INT 0
23783: ST_TO_ADDR
// escapeAvalaible = 1 ;
23784: LD_ADDR_EXP 36
23788: PUSH
23789: LD_INT 1
23791: ST_TO_ADDR
// InGameOn ;
23792: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23796: LD_INT 3
23798: PPUSH
23799: LD_INT 1
23801: PPUSH
23802: LD_INT 1
23804: PPUSH
23805: LD_INT 0
23807: PPUSH
23808: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23812: LD_INT 6
23814: PPUSH
23815: LD_INT 1
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: LD_INT 0
23823: PPUSH
23824: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
23828: LD_INT 3
23830: PPUSH
23831: LD_INT 1
23833: PPUSH
23834: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
23838: LD_INT 97
23840: PPUSH
23841: LD_INT 91
23843: PPUSH
23844: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23848: LD_INT 22
23850: PUSH
23851: LD_INT 3
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 21
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PPUSH
23872: CALL_OW 69
23876: PPUSH
23877: CALL_OW 121
// wait ( 0 0$01 ) ;
23881: LD_INT 35
23883: PPUSH
23884: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23888: LD_INT 22
23890: PUSH
23891: LD_INT 3
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 21
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PPUSH
23912: CALL_OW 69
23916: PPUSH
23917: LD_INT 124
23919: PPUSH
23920: LD_INT 98
23922: PPUSH
23923: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
23927: LD_INT 22
23929: PUSH
23930: LD_INT 6
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 21
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PPUSH
23951: CALL_OW 69
23955: PPUSH
23956: CALL_OW 121
// wait ( 0 0$01 ) ;
23960: LD_INT 35
23962: PPUSH
23963: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23967: LD_INT 22
23969: PUSH
23970: LD_INT 6
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 21
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PPUSH
23991: CALL_OW 69
23995: PPUSH
23996: LD_INT 124
23998: PPUSH
23999: LD_INT 98
24001: PPUSH
24002: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24006: LD_INT 22
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 21
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: PPUSH
24035: LD_INT 124
24037: PPUSH
24038: LD_INT 98
24040: PPUSH
24041: CALL_OW 114
// wait ( 0 0$4 ) ;
24045: LD_INT 140
24047: PPUSH
24048: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24052: LD_INT 124
24054: PPUSH
24055: LD_INT 98
24057: PPUSH
24058: CALL_OW 84
// if SikorskyStatus = 1 then
24062: LD_EXP 21
24066: PUSH
24067: LD_INT 1
24069: EQUAL
24070: IFFALSE 24084
// begin Say ( Sikorski , D9-Sik-1 ) ;
24072: LD_EXP 16
24076: PPUSH
24077: LD_STRING D9-Sik-1
24079: PPUSH
24080: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24084: LD_EXP 21
24088: PUSH
24089: LD_INT 2
24091: EQUAL
24092: IFFALSE 24113
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24094: LD_EXP 23
24098: PPUSH
24099: LD_STRING D8b-Pow-1
24101: PPUSH
24102: CALL_OW 94
// YouLost ( Dismissed ) ;
24106: LD_STRING Dismissed
24108: PPUSH
24109: CALL_OW 104
// end ; end ;
24113: PPOPN 1
24115: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
24116: LD_INT 23
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 21
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 24
24138: PUSH
24139: LD_INT 250
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: PPUSH
24151: CALL_OW 69
24155: PUSH
24156: LD_INT 0
24158: EQUAL
24159: IFFALSE 24168
24161: GO 24163
24163: DISABLE
// FinishMission ;
24164: CALL 24169 0 0
24168: END
// export function FinishMission ; var tmp ; begin
24169: LD_INT 0
24171: PPUSH
24172: PPUSH
// AddMedal ( med1 , 1 ) ;
24173: LD_STRING med1
24175: PPUSH
24176: LD_INT 1
24178: PPUSH
24179: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24183: LD_STRING med2
24185: PPUSH
24186: LD_INT 1
24188: PPUSH
24189: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24193: LD_STRING perfect
24195: PPUSH
24196: LD_INT 1
24198: PPUSH
24199: CALL_OW 101
// GiveMedals ( Main ) ;
24203: LD_STRING Main
24205: PPUSH
24206: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24210: LD_INT 22
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 23
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 2
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 25
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 25
24265: PUSH
24266: LD_INT 3
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 25
24275: PUSH
24276: LD_INT 4
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: PPUSH
24296: CALL_OW 69
24300: PPUSH
24301: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24305: LD_EXP 1
24309: PPUSH
24310: LD_EXP 42
24314: PUSH
24315: LD_STRING JMM
24317: STR
24318: PPUSH
24319: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24323: LD_EXP 2
24327: PPUSH
24328: LD_EXP 42
24332: PUSH
24333: LD_STRING Brown
24335: STR
24336: PPUSH
24337: CALL 7680 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24341: LD_EXP 3
24345: PPUSH
24346: LD_EXP 42
24350: PUSH
24351: LD_STRING Donaldson
24353: STR
24354: PPUSH
24355: CALL 7680 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24359: LD_EXP 4
24363: PPUSH
24364: LD_EXP 42
24368: PUSH
24369: LD_STRING Bobby
24371: STR
24372: PPUSH
24373: CALL 7680 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24377: LD_EXP 5
24381: PPUSH
24382: LD_EXP 42
24386: PUSH
24387: LD_STRING Cyrus
24389: STR
24390: PPUSH
24391: CALL 7680 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24395: LD_EXP 6
24399: PPUSH
24400: LD_EXP 42
24404: PUSH
24405: LD_STRING Lisa
24407: STR
24408: PPUSH
24409: CALL 7680 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24413: LD_EXP 7
24417: PPUSH
24418: LD_EXP 42
24422: PUSH
24423: LD_STRING Frank
24425: STR
24426: PPUSH
24427: CALL 7680 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24431: LD_EXP 8
24435: PPUSH
24436: LD_EXP 42
24440: PUSH
24441: LD_STRING Gladstone
24443: STR
24444: PPUSH
24445: CALL 7680 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24449: LD_EXP 9
24453: PPUSH
24454: LD_EXP 42
24458: PUSH
24459: LD_STRING Kikuchi
24461: STR
24462: PPUSH
24463: CALL 7680 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24467: LD_EXP 14
24471: PPUSH
24472: LD_EXP 42
24476: PUSH
24477: LD_STRING Denis
24479: STR
24480: PPUSH
24481: CALL 7680 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24485: LD_EXP 15
24489: PPUSH
24490: LD_EXP 42
24494: PUSH
24495: LD_STRING Joan
24497: STR
24498: PPUSH
24499: CALL 7680 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24503: LD_EXP 10
24507: PPUSH
24508: LD_EXP 42
24512: PUSH
24513: LD_STRING Khatam
24515: STR
24516: PPUSH
24517: CALL 7680 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24521: LD_EXP 13
24525: PPUSH
24526: LD_EXP 42
24530: PUSH
24531: LD_STRING Houten
24533: STR
24534: PPUSH
24535: CALL 7680 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24539: LD_INT 50
24541: PUSH
24542: EMPTY
24543: LIST
24544: PUSH
24545: LD_INT 22
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 21
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 2
24567: PUSH
24568: LD_INT 25
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 25
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 25
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 25
24600: PUSH
24601: LD_INT 4
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: PPUSH
24621: CALL_OW 69
24625: PUSH
24626: LD_EXP 1
24630: PUSH
24631: LD_EXP 2
24635: PUSH
24636: LD_EXP 3
24640: PUSH
24641: LD_EXP 4
24645: PUSH
24646: LD_EXP 5
24650: PUSH
24651: LD_EXP 6
24655: PUSH
24656: LD_EXP 7
24660: PUSH
24661: LD_EXP 8
24665: PUSH
24666: LD_EXP 9
24670: PUSH
24671: LD_EXP 14
24675: PUSH
24676: LD_EXP 15
24680: PUSH
24681: LD_EXP 13
24685: PUSH
24686: LD_EXP 10
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: DIFF
24706: PPUSH
24707: LD_STRING 08_other_survivors
24709: PPUSH
24710: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
24714: LD_INT 23
24716: PPUSH
24717: CALL 24730 0 1
// YouWin ;
24721: CALL_OW 103
// end ;
24725: LD_VAR 0 1
24729: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24730: LD_INT 0
24732: PPUSH
24733: PPUSH
24734: PPUSH
24735: PPUSH
// gammaBase = [ ] ;
24736: LD_ADDR_VAR 0 4
24740: PUSH
24741: EMPTY
24742: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24743: LD_ADDR_VAR 0 5
24747: PUSH
24748: LD_VAR 0 1
24752: PPUSH
24753: LD_INT 22
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 21
24765: PUSH
24766: LD_INT 3
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 50
24775: PUSH
24776: EMPTY
24777: LIST
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: PPUSH
24784: CALL_OW 70
24788: ST_TO_ADDR
// for i in buildings do
24789: LD_ADDR_VAR 0 3
24793: PUSH
24794: LD_VAR 0 5
24798: PUSH
24799: FOR_IN
24800: IFFALSE 25237
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24802: LD_VAR 0 3
24806: PPUSH
24807: CALL_OW 266
24811: PUSH
24812: LD_INT 6
24814: PUSH
24815: LD_INT 7
24817: PUSH
24818: LD_INT 8
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: IN
24826: IFFALSE 24940
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24828: LD_ADDR_VAR 0 4
24832: PUSH
24833: LD_VAR 0 4
24837: PUSH
24838: LD_VAR 0 3
24842: PPUSH
24843: CALL_OW 266
24847: PUSH
24848: LD_VAR 0 3
24852: PPUSH
24853: CALL_OW 250
24857: PUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: CALL_OW 251
24867: PUSH
24868: LD_VAR 0 3
24872: PPUSH
24873: CALL_OW 254
24877: PUSH
24878: LD_VAR 0 3
24882: PPUSH
24883: CALL_OW 267
24887: PUSH
24888: LD_VAR 0 3
24892: PPUSH
24893: CALL_OW 248
24897: PUSH
24898: LD_VAR 0 3
24902: PPUSH
24903: LD_INT 1
24905: PPUSH
24906: CALL_OW 268
24910: PUSH
24911: LD_VAR 0 3
24915: PPUSH
24916: LD_INT 2
24918: PPUSH
24919: CALL_OW 268
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: ADD
24937: ST_TO_ADDR
24938: GO 25235
// if GetBType ( i ) = b_bunker then
24940: LD_VAR 0 3
24944: PPUSH
24945: CALL_OW 266
24949: PUSH
24950: LD_INT 32
24952: EQUAL
24953: IFFALSE 25050
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24955: LD_ADDR_VAR 0 4
24959: PUSH
24960: LD_VAR 0 4
24964: PUSH
24965: LD_VAR 0 3
24969: PPUSH
24970: CALL_OW 266
24974: PUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: CALL_OW 250
24984: PUSH
24985: LD_VAR 0 3
24989: PPUSH
24990: CALL_OW 251
24994: PUSH
24995: LD_VAR 0 3
24999: PPUSH
25000: CALL_OW 254
25004: PUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: CALL_OW 267
25014: PUSH
25015: LD_VAR 0 3
25019: PPUSH
25020: CALL_OW 248
25024: PUSH
25025: LD_VAR 0 3
25029: PPUSH
25030: CALL_OW 269
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: ADD
25047: ST_TO_ADDR
25048: GO 25235
// if GetBType ( i ) = b_factory then
25050: LD_VAR 0 3
25054: PPUSH
25055: CALL_OW 266
25059: PUSH
25060: LD_INT 3
25062: EQUAL
25063: IFFALSE 25153
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25065: LD_ADDR_VAR 0 4
25069: PUSH
25070: LD_VAR 0 4
25074: PPUSH
25075: LD_INT 1
25077: PPUSH
25078: LD_VAR 0 3
25082: PPUSH
25083: CALL_OW 266
25087: PUSH
25088: LD_VAR 0 3
25092: PPUSH
25093: CALL_OW 250
25097: PUSH
25098: LD_VAR 0 3
25102: PPUSH
25103: CALL_OW 251
25107: PUSH
25108: LD_VAR 0 3
25112: PPUSH
25113: CALL_OW 254
25117: PUSH
25118: LD_VAR 0 3
25122: PPUSH
25123: CALL_OW 267
25127: PUSH
25128: LD_VAR 0 3
25132: PPUSH
25133: CALL_OW 248
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: PPUSH
25146: CALL_OW 2
25150: ST_TO_ADDR
25151: GO 25235
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25153: LD_ADDR_VAR 0 4
25157: PUSH
25158: LD_VAR 0 4
25162: PUSH
25163: LD_VAR 0 3
25167: PPUSH
25168: CALL_OW 266
25172: PUSH
25173: LD_VAR 0 3
25177: PPUSH
25178: CALL_OW 250
25182: PUSH
25183: LD_VAR 0 3
25187: PPUSH
25188: CALL_OW 251
25192: PUSH
25193: LD_VAR 0 3
25197: PPUSH
25198: CALL_OW 254
25202: PUSH
25203: LD_VAR 0 3
25207: PPUSH
25208: CALL_OW 267
25212: PUSH
25213: LD_VAR 0 3
25217: PPUSH
25218: CALL_OW 248
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: ADD
25234: ST_TO_ADDR
// end ;
25235: GO 24799
25237: POP
25238: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25239: LD_VAR 0 4
25243: PPUSH
25244: LD_STRING 08_GammaBase
25246: PPUSH
25247: CALL_OW 39
// end ;
25251: LD_VAR 0 2
25255: RET
