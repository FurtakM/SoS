// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9069 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 74234 0 9
// Action ;
  79: CALL 15318 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 40252 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 40252 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 40252 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 40252 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 40252 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 40252 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 40252 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 77544 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 40252 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 40252 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 77544 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 40252 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 40252 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 77544 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 40252 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 77544 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 40252 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 77544 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 40252 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 77544 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 40252 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 77544 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 40252 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 77544 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 77544 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 48183 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 75191 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 53311 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 53311 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 53311 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 53311 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 40252 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 40252 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 40252 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 40252 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 40252 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 40252 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 40252 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 40252 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 40252 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 40252 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 77544 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 40252 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 40252 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 40252 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 40252 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 40252 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 40252 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 40252 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 40252 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 40252 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 40252 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 77544 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 77544 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 40252 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9055
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8759
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8759
// begin ComMoveXY ( i , 52 , 50 ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_INT 52
8737: PPUSH
8738: LD_INT 50
8740: PPUSH
8741: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_EXP 31
8754: PPUSH
8755: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 256
8768: PUSH
8769: LD_INT 600
8771: GREATEREQUAL
8772: PUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 110
8782: NOT
8783: AND
8784: IFFALSE 8810
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_VAR 0 4
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 74
8805: PPUSH
8806: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 256
8819: PUSH
8820: LD_INT 600
8822: LESS
8823: PUSH
8824: LD_VAR 0 2
8828: PPUSH
8829: CALL_OW 110
8833: NOT
8834: AND
8835: IFFALSE 8911
// begin SetTag ( i , 1 ) ;
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8849: LD_ADDR_VAR 0 6
8853: PUSH
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 5
8863: PPUSH
8864: CALL 80888 0 2
8868: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 6
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 40
8903: PPUSH
8904: LD_INT 49
8906: PPUSH
8907: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL_OW 110
8920: PUSH
8921: LD_INT 1
8923: EQUAL
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 40
8932: PPUSH
8933: LD_INT 49
8935: PPUSH
8936: CALL_OW 297
8940: PUSH
8941: LD_INT 9
8943: LESS
8944: AND
8945: PUSH
8946: LD_VAR 0 3
8950: AND
8951: IFFALSE 9053
// begin ComExitVehicle ( tmp ) ;
8953: LD_VAR 0 3
8957: PPUSH
8958: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PPUSH
8972: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8976: LD_INT 35
8978: PPUSH
8979: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 256
8992: PUSH
8993: LD_INT 1000
8995: EQUAL
8996: IFFALSE 8976
// ComEnterUnit ( tmp , i ) ;
8998: LD_VAR 0 3
9002: PPUSH
9003: LD_VAR 0 2
9007: PPUSH
9008: CALL_OW 120
// if GetFuel ( i ) <= 40 then
9012: LD_VAR 0 2
9016: PPUSH
9017: CALL_OW 261
9021: PUSH
9022: LD_INT 40
9024: LESSEQUAL
9025: IFFALSE 9041
// SetTag ( i , 2 ) else
9027: LD_VAR 0 2
9031: PPUSH
9032: LD_INT 2
9034: PPUSH
9035: CALL_OW 109
9039: GO 9053
// SetTag ( i , 0 ) ;
9041: LD_VAR 0 2
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 109
// end ; end ;
9053: GO 8615
9055: POP
9056: POP
// until not filter ;
9057: LD_VAR 0 7
9061: NOT
9062: IFFALSE 8598
// end ; end_of_file
9064: LD_VAR 0 1
9068: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9092: LD_ADDR_EXP 33
9096: PUSH
9097: LD_INT 8
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 14
9105: PUSH
9106: LD_INT 17
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PUSH
9115: LD_OWVAR 67
9119: ARRAY
9120: ST_TO_ADDR
// ruMobile := [ ] ;
9121: LD_ADDR_EXP 34
9125: PUSH
9126: EMPTY
9127: ST_TO_ADDR
// ruBuildList := [ ] ;
9128: LD_ADDR_EXP 35
9132: PUSH
9133: EMPTY
9134: ST_TO_ADDR
// russianAttackers := [ ] ;
9135: LD_ADDR_EXP 36
9139: PUSH
9140: EMPTY
9141: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_INT 43
9149: PUSH
9150: LD_INT 44
9152: PUSH
9153: LD_INT 46
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// if Difficulty > 2 then
9161: LD_OWVAR 67
9165: PUSH
9166: LD_INT 2
9168: GREATER
9169: IFFALSE 9192
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9171: LD_ADDR_VAR 0 5
9175: PUSH
9176: LD_VAR 0 5
9180: PUSH
9181: LD_INT 45
9183: PUSH
9184: LD_INT 46
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: ADD
9191: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9192: LD_ADDR_EXP 32
9196: PUSH
9197: LD_STRING Borodin
9199: PPUSH
9200: CALL_OW 25
9204: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9205: LD_EXP 32
9209: PPUSH
9210: LD_INT 28
9212: PPUSH
9213: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9217: LD_INT 28
9219: PPUSH
9220: CALL_OW 274
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_INT 3000
9230: PUSH
9231: LD_INT 4000
9233: PUSH
9234: LD_INT 5000
9236: PUSH
9237: LD_INT 6000
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: LD_OWVAR 67
9250: ARRAY
9251: PPUSH
9252: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9256: LD_INT 28
9258: PPUSH
9259: CALL_OW 274
9263: PPUSH
9264: LD_INT 2
9266: PPUSH
9267: LD_INT 1000
9269: PPUSH
9270: CALL_OW 277
// if Difficulty > 2 then
9274: LD_OWVAR 67
9278: PUSH
9279: LD_INT 2
9281: GREATER
9282: IFFALSE 9406
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9284: LD_ADDR_VAR 0 4
9288: PUSH
9289: LD_INT 99
9291: PUSH
9292: LD_INT 130
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 121
9305: PUSH
9306: LD_INT 127
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 117
9319: PUSH
9320: LD_INT 121
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: ST_TO_ADDR
// for i in tmp do
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_VAR 0 4
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9404
// begin bc_type := b_turret ;
9349: LD_ADDR_OWVAR 42
9353: PUSH
9354: LD_INT 33
9356: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9357: LD_ADDR_OWVAR 43
9361: PUSH
9362: LD_INT 2
9364: PUSH
9365: LD_OWVAR 67
9369: PLUS
9370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9371: LD_VAR 0 2
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: LD_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ARRAY
9388: PPUSH
9389: LD_VAR 0 2
9393: PUSH
9394: LD_INT 3
9396: ARRAY
9397: PPUSH
9398: CALL_OW 47
// end ;
9402: GO 9346
9404: POP
9405: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: PUSH
9440: FOR_IN
9441: IFFALSE 9463
// SetBLevel ( i , 2 + Difficulty ) ;
9443: LD_VAR 0 2
9447: PPUSH
9448: LD_INT 2
9450: PUSH
9451: LD_OWVAR 67
9455: PLUS
9456: PPUSH
9457: CALL_OW 241
9461: GO 9440
9463: POP
9464: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 30
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 30
9495: PUSH
9496: LD_INT 33
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 69
9516: ST_TO_ADDR
// for i in tmp do
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_VAR 0 4
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9560
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9530: LD_VAR 0 2
9534: PPUSH
9535: LD_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 5
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: PPUSH
9554: CALL_OW 431
9558: GO 9527
9560: POP
9561: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 30
9579: PUSH
9580: LD_INT 32
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9646
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9599: LD_INT 0
9601: PPUSH
9602: LD_INT 5
9604: PUSH
9605: LD_INT 6
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: LD_INT 8
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_OWVAR 67
9624: ARRAY
9625: PPUSH
9626: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9630: CALL_OW 44
9634: PPUSH
9635: LD_VAR 0 2
9639: PPUSH
9640: CALL_OW 52
// end ;
9644: GO 9596
9646: POP
9647: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_INT 22
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9773
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9685: LD_ADDR_VAR 0 3
9689: PUSH
9690: DOUBLE
9691: LD_INT 1
9693: DEC
9694: ST_TO_ADDR
9695: LD_INT 2
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_OWVAR 67
9717: ARRAY
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9769
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9722: LD_INT 0
9724: PPUSH
9725: LD_INT 5
9727: PUSH
9728: LD_INT 6
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 8
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: LD_OWVAR 67
9747: ARRAY
9748: PPUSH
9749: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9753: CALL_OW 44
9757: PPUSH
9758: LD_VAR 0 2
9762: PPUSH
9763: CALL_OW 52
// end ;
9767: GO 9719
9769: POP
9770: POP
// end ;
9771: GO 9682
9773: POP
9774: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9775: LD_ADDR_VAR 0 2
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 3
9787: PUSH
9788: LD_INT 4
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: LD_INT 5
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: LD_OWVAR 67
9807: ARRAY
9808: PUSH
9809: FOR_TO
9810: IFFALSE 9857
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9812: LD_INT 0
9814: PPUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 5
9823: PUSH
9824: LD_INT 6
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_OWVAR 67
9837: ARRAY
9838: PPUSH
9839: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9843: CALL_OW 44
9847: PPUSH
9848: LD_INT 28
9850: PPUSH
9851: CALL_OW 52
// end ;
9855: GO 9809
9857: POP
9858: POP
// for i := 1 to 2 do
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: DOUBLE
9865: LD_INT 1
9867: DEC
9868: ST_TO_ADDR
9869: LD_INT 2
9871: PUSH
9872: FOR_TO
9873: IFFALSE 9907
// begin PrepareScientist ( false , 6 ) ;
9875: LD_INT 0
9877: PPUSH
9878: LD_INT 6
9880: PPUSH
9881: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9885: CALL_OW 44
9889: PPUSH
9890: LD_INT 81
9892: PPUSH
9893: LD_INT 93
9895: PPUSH
9896: CALL_OW 428
9900: PPUSH
9901: CALL_OW 52
// end ;
9905: GO 9872
9907: POP
9908: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9909: LD_INT 22
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 51
9920: PPUSH
9921: LD_INT 100
9923: PPUSH
9924: CALL 45092 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9928: CALL_OW 45
9932: PPUSH
9933: LD_INT 91
9935: PPUSH
9936: LD_INT 94
9938: PPUSH
9939: LD_INT 3
9941: PPUSH
9942: LD_INT 0
9944: PPUSH
9945: CALL_OW 50
// for i := 1 to 2 do
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: DOUBLE
9955: LD_INT 1
9957: DEC
9958: ST_TO_ADDR
9959: LD_INT 2
9961: PUSH
9962: FOR_TO
9963: IFFALSE 10007
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9965: LD_INT 22
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: LD_INT 3
9973: PPUSH
9974: LD_INT 52
9976: PPUSH
9977: LD_INT 100
9979: PPUSH
9980: CALL 45092 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9984: CALL_OW 45
9988: PPUSH
9989: LD_INT 91
9991: PPUSH
9992: LD_INT 94
9994: PPUSH
9995: LD_INT 4
9997: PPUSH
9998: LD_INT 0
10000: PPUSH
10001: CALL_OW 50
// end ;
10005: GO 9962
10007: POP
10008: POP
// end ;
10009: LD_VAR 0 1
10013: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
// uc_side := 3 ;
10021: LD_ADDR_OWVAR 20
10025: PUSH
10026: LD_INT 3
10028: ST_TO_ADDR
// uc_nation := 3 ;
10029: LD_ADDR_OWVAR 21
10033: PUSH
10034: LD_INT 3
10036: ST_TO_ADDR
// for i := 1 to 4 do
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_INT 4
10049: PUSH
10050: FOR_TO
10051: IFFALSE 10178
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10053: LD_INT 22
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: LD_INT 42
10064: PUSH
10065: LD_INT 43
10067: PUSH
10068: LD_INT 44
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 1
10078: PPUSH
10079: LD_INT 3
10081: PPUSH
10082: CALL_OW 12
10086: ARRAY
10087: PPUSH
10088: LD_INT 40
10090: PPUSH
10091: CALL 45092 0 5
// veh := CreateVehicle ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10105: LD_VAR 0 4
10109: PPUSH
10110: LD_INT 5
10112: PPUSH
10113: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10117: LD_VAR 0 4
10121: PPUSH
10122: LD_INT 7
10124: PPUSH
10125: LD_INT 0
10127: PPUSH
10128: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10132: LD_INT 0
10134: PPUSH
10135: LD_INT 5
10137: PPUSH
10138: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10142: CALL_OW 44
10146: PPUSH
10147: LD_VAR 0 4
10151: PPUSH
10152: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10156: LD_ADDR_VAR 0 5
10160: PUSH
10161: LD_VAR 0 5
10165: PPUSH
10166: LD_VAR 0 4
10170: PPUSH
10171: CALL 77544 0 2
10175: ST_TO_ADDR
// end ;
10176: GO 10050
10178: POP
10179: POP
// for i := 1 to 3 do
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: DOUBLE
10186: LD_INT 1
10188: DEC
10189: ST_TO_ADDR
10190: LD_INT 3
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10321
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10196: LD_INT 22
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_INT 42
10207: PUSH
10208: LD_INT 43
10210: PUSH
10211: LD_INT 44
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 12
10229: ARRAY
10230: PPUSH
10231: LD_INT 40
10233: PPUSH
10234: CALL 45092 0 5
// veh := CreateVehicle ;
10238: LD_ADDR_VAR 0 4
10242: PUSH
10243: CALL_OW 45
10247: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10248: LD_VAR 0 4
10252: PPUSH
10253: LD_INT 5
10255: PPUSH
10256: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10260: LD_VAR 0 4
10264: PPUSH
10265: LD_INT 8
10267: PPUSH
10268: LD_INT 0
10270: PPUSH
10271: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10275: LD_INT 0
10277: PPUSH
10278: LD_INT 5
10280: PPUSH
10281: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10285: CALL_OW 44
10289: PPUSH
10290: LD_VAR 0 4
10294: PPUSH
10295: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10299: LD_ADDR_VAR 0 5
10303: PUSH
10304: LD_VAR 0 5
10308: PPUSH
10309: LD_VAR 0 4
10313: PPUSH
10314: CALL 77544 0 2
10318: ST_TO_ADDR
// end ;
10319: GO 10193
10321: POP
10322: POP
// for i := 1 to 2 do
10323: LD_ADDR_VAR 0 2
10327: PUSH
10328: DOUBLE
10329: LD_INT 1
10331: DEC
10332: ST_TO_ADDR
10333: LD_INT 2
10335: PUSH
10336: FOR_TO
10337: IFFALSE 10396
// begin PrepareSoldier ( false , 5 ) ;
10339: LD_INT 0
10341: PPUSH
10342: LD_INT 5
10344: PPUSH
10345: CALL_OW 381
// un := CreateHuman ;
10349: LD_ADDR_VAR 0 3
10353: PUSH
10354: CALL_OW 44
10358: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 8
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10374: LD_ADDR_VAR 0 5
10378: PUSH
10379: LD_VAR 0 5
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: CALL 77544 0 2
10393: ST_TO_ADDR
// end ;
10394: GO 10336
10396: POP
10397: POP
// for i in tmp do
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_VAR 0 5
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10428
// ComAgressiveMove ( i , 51 , 16 ) ;
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 51
10418: PPUSH
10419: LD_INT 16
10421: PPUSH
10422: CALL_OW 114
10426: GO 10408
10428: POP
10429: POP
// end ;
10430: LD_VAR 0 1
10434: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10435: LD_EXP 34
10439: IFFALSE 11014
10441: GO 10443
10443: DISABLE
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
10448: PPUSH
// begin enable ;
10449: ENABLE
// if not ruMobile then
10450: LD_EXP 34
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 11014
// for i in ruMobile do
10459: LD_ADDR_VAR 0 1
10463: PUSH
10464: LD_EXP 34
10468: PUSH
10469: FOR_IN
10470: IFFALSE 11012
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 302
10481: NOT
10482: PUSH
10483: LD_VAR 0 1
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 3
10495: NONEQUAL
10496: OR
10497: IFFALSE 10517
// begin ruMobile := ruMobile diff i ;
10499: LD_ADDR_EXP 34
10503: PUSH
10504: LD_EXP 34
10508: PUSH
10509: LD_VAR 0 1
10513: DIFF
10514: ST_TO_ADDR
// continue ;
10515: GO 10469
// end ; if GetTag ( i ) = 300 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 110
10526: PUSH
10527: LD_INT 300
10529: EQUAL
10530: IFFALSE 10645
// begin if GetFuel ( i ) < 50 then
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 261
10541: PUSH
10542: LD_INT 50
10544: LESS
10545: IFFALSE 10604
// begin ComMoveXY ( i , 93 , 100 ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: LD_INT 93
10554: PPUSH
10555: LD_INT 100
10557: PPUSH
10558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10562: LD_INT 35
10564: PPUSH
10565: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10569: LD_VAR 0 1
10573: PPUSH
10574: LD_INT 93
10576: PPUSH
10577: LD_INT 100
10579: PPUSH
10580: CALL_OW 297
10584: PUSH
10585: LD_INT 4
10587: LESS
10588: IFFALSE 10562
// SetFuel ( i , 100 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 100
10597: PPUSH
10598: CALL_OW 240
// end else
10602: GO 10645
// if not IsInArea ( i , ruParkingArea ) then
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 308
10616: NOT
10617: IFFALSE 10633
// ComMoveToArea ( i , ruParkingArea ) else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 10
10626: PPUSH
10627: CALL_OW 113
10631: GO 10645
// SetTag ( i , 301 ) ;
10633: LD_VAR 0 1
10637: PPUSH
10638: LD_INT 301
10640: PPUSH
10641: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_INT 301
10657: EQUAL
10658: IFFALSE 10788
// begin if GetLives ( i ) < 1000 then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 256
10669: PUSH
10670: LD_INT 1000
10672: LESS
10673: IFFALSE 10765
// begin if not IsDrivenBy ( i ) then
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 311
10684: NOT
10685: IFFALSE 10689
// continue ;
10687: GO 10469
// mech := IsDrivenBy ( i ) ;
10689: LD_ADDR_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: PPUSH
10699: CALL_OW 311
10703: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10713: LD_VAR 0 2
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10727: LD_INT 35
10729: PPUSH
10730: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 256
10743: PUSH
10744: LD_INT 1000
10746: EQUAL
10747: IFFALSE 10727
// ComEnterUnit ( mech , i ) ;
10749: LD_VAR 0 2
10753: PPUSH
10754: LD_VAR 0 1
10758: PPUSH
10759: CALL_OW 120
// end else
10763: GO 10788
// if IsDrivenBy ( i ) then
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 311
10774: IFFALSE 10788
// SetTag ( i , 0 ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 0
10783: PPUSH
10784: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 110
10797: PUSH
10798: LD_INT 300
10800: LESS
10801: IFFALSE 11010
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10803: LD_ADDR_VAR 0 3
10807: PUSH
10808: LD_INT 11
10810: PPUSH
10811: LD_INT 81
10813: PUSH
10814: LD_INT 3
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 70
10825: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 256
10835: PUSH
10836: LD_INT 650
10838: LESS
10839: IFFALSE 10864
// begin ComStop ( i ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 141
// SetTag ( i , 300 ) ;
10850: LD_VAR 0 1
10854: PPUSH
10855: LD_INT 300
10857: PPUSH
10858: CALL_OW 109
// continue ;
10862: GO 10469
// end ; if enemy then
10864: LD_VAR 0 3
10868: IFFALSE 10908
// begin if not HasTask ( i ) then
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 314
10879: NOT
10880: IFFALSE 10906
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 74
10901: PPUSH
10902: CALL_OW 115
// end else
10906: GO 11010
// if ruMobile > 2 then
10908: LD_EXP 34
10912: PUSH
10913: LD_INT 2
10915: GREATER
10916: IFFALSE 11010
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 69
10937: ST_TO_ADDR
// if enemy then
10938: LD_VAR 0 3
10942: IFFALSE 11010
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_INT 116
10951: PUSH
10952: LD_INT 95
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 84
10961: PUSH
10962: LD_INT 68
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 58
10971: PUSH
10972: LD_INT 53
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 44
10981: PUSH
10982: LD_INT 35
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 45
10991: PUSH
10992: LD_INT 23
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL 80148 0 2
// end ; end ; end ;
11010: GO 10469
11012: POP
11013: POP
// end ;
11014: PPOPN 3
11016: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11017: LD_INT 3
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 32
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PPUSH
11048: CALL_OW 69
11052: IFFALSE 11136
11054: GO 11056
11056: DISABLE
11057: LD_INT 0
11059: PPUSH
// begin enable ;
11060: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 69
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11134
// if GetFuel ( i ) < 3 then
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 261
11114: PUSH
11115: LD_INT 3
11117: LESS
11118: IFFALSE 11132
// SetFuel ( i , 3 ) ;
11120: LD_VAR 0 1
11124: PPUSH
11125: LD_INT 3
11127: PPUSH
11128: CALL_OW 240
11132: GO 11102
11134: POP
11135: POP
// end ;
11136: PPOPN 1
11138: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11139: LD_INT 29
11141: PPUSH
11142: CALL_OW 302
11146: PUSH
11147: LD_INT 29
11149: PPUSH
11150: CALL_OW 461
11154: PUSH
11155: LD_INT 2
11157: EQUAL
11158: AND
11159: IFFALSE 11392
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
// begin enable ;
11168: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11169: LD_ADDR_VAR 0 1
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 23
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_INT 4
11197: PPUSH
11198: CALL_OW 12
11202: ARRAY
11203: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11204: LD_ADDR_VAR 0 2
11208: PUSH
11209: LD_INT 42
11211: PUSH
11212: LD_INT 44
11214: PUSH
11215: LD_INT 43
11217: PUSH
11218: LD_INT 46
11220: PUSH
11221: LD_INT 45
11223: PUSH
11224: LD_INT 46
11226: PUSH
11227: LD_INT 45
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: LD_OWVAR 67
11243: PUSH
11244: LD_INT 0
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: CALL_OW 12
11254: PLUS
11255: ARRAY
11256: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11257: LD_VAR 0 1
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 22
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: IN
11272: PUSH
11273: LD_VAR 0 2
11277: PUSH
11278: LD_INT 46
11280: EQUAL
11281: AND
11282: IFFALSE 11311
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11284: LD_ADDR_VAR 0 2
11288: PUSH
11289: LD_INT 44
11291: PUSH
11292: LD_INT 45
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 1
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: CALL_OW 12
11309: ARRAY
11310: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 25200
11318: PUSH
11319: LD_INT 23100
11321: PUSH
11322: LD_INT 21000
11324: PUSH
11325: LD_INT 18900
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESS
11340: IFFALSE 11369
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: LD_INT 44
11349: PUSH
11350: LD_INT 43
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 1
11359: PPUSH
11360: LD_INT 2
11362: PPUSH
11363: CALL_OW 12
11367: ARRAY
11368: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11369: LD_INT 29
11371: PPUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL_OW 185
// end ;
11392: PPOPN 2
11394: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11395: LD_INT 28
11397: PPUSH
11398: CALL_OW 302
11402: IFFALSE 12994
11404: GO 11406
11406: DISABLE
11407: LD_INT 0
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
// begin enable ;
11422: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_INT 12
11430: PPUSH
11431: LD_INT 3
11433: PUSH
11434: LD_INT 24
11436: PUSH
11437: LD_INT 1000
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 70
11466: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 25
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PPUSH
11496: CALL_OW 69
11500: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 34
11518: PUSH
11519: LD_INT 52
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11535: LD_ADDR_VAR 0 8
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: CALL_OW 69
11568: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11569: LD_ADDR_VAR 0 9
11573: PUSH
11574: LD_INT 81
11576: PPUSH
11577: LD_INT 93
11579: PPUSH
11580: CALL_OW 428
11584: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11585: LD_ADDR_VAR 0 10
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 30
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 50
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: LD_INT 58
11618: PUSH
11619: EMPTY
11620: LIST
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 120
11627: PUSH
11628: LD_INT 701
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11651: LD_ADDR_VAR 0 12
11655: PUSH
11656: LD_INT 22
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 30
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 50
11678: PUSH
11679: EMPTY
11680: LIST
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: LD_INT 62
11687: PUSH
11688: EMPTY
11689: LIST
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// if emptyTowers then
11706: LD_VAR 0 10
11710: IFFALSE 11971
// begin for i in emptyTowers do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_VAR 0 10
11721: PUSH
11722: FOR_IN
11723: IFFALSE 11967
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11725: LD_ADDR_VAR 0 11
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 54
11745: PUSH
11746: EMPTY
11747: LIST
11748: PUSH
11749: LD_INT 95
11751: PUSH
11752: LD_INT 12
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 50
11776: PUSH
11777: EMPTY
11778: LIST
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 120
11785: PUSH
11786: LD_INT 701
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if not sol then
11809: LD_VAR 0 11
11813: NOT
11814: IFFALSE 11818
// break ;
11816: GO 11967
// for j in sol do
11818: LD_ADDR_VAR 0 2
11822: PUSH
11823: LD_VAR 0 11
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11880
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11831: LD_VAR 0 2
11835: PPUSH
11836: CALL_OW 310
11840: PUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: CALL_OW 310
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_INT 32
11858: EQUAL
11859: AND
11860: IFFALSE 11878
// sol := sol diff j ;
11862: LD_ADDR_VAR 0 11
11866: PUSH
11867: LD_VAR 0 11
11871: PUSH
11872: LD_VAR 0 2
11876: DIFF
11877: ST_TO_ADDR
11878: GO 11828
11880: POP
11881: POP
// if not sol then
11882: LD_VAR 0 11
11886: NOT
11887: IFFALSE 11891
// break ;
11889: GO 11967
// if IsInUnit ( sol [ 1 ] ) then
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL_OW 310
11904: IFFALSE 11919
// ComExit ( sol [ 1 ] ) ;
11906: LD_VAR 0 11
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL 77942 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11919: LD_VAR 0 11
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: LD_INT 701
11930: PPUSH
11931: CALL_OW 109
// SetTag ( i , 701 ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 701
11942: PPUSH
11943: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11947: LD_VAR 0 11
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 180
// end ;
11965: GO 11722
11967: POP
11968: POP
// end else
11969: GO 12217
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11971: LD_VAR 0 11
11975: PPUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 54
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: LD_INT 95
11987: PUSH
11988: LD_INT 12
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 72
12004: IFFALSE 12217
// begin if barracks then
12006: LD_VAR 0 12
12010: IFFALSE 12078
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_VAR 0 11
12021: PPUSH
12022: LD_INT 3
12024: PUSH
12025: LD_INT 54
12027: PUSH
12028: EMPTY
12029: LIST
12030: PUSH
12031: LD_INT 95
12033: PUSH
12034: LD_INT 12
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 72
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12074
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 12
12063: PUSH
12064: LD_INT 1
12066: ARRAY
12067: PPUSH
12068: CALL_OW 120
12072: GO 12051
12074: POP
12075: POP
// end else
12076: GO 12217
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12078: LD_INT 12
12080: PPUSH
12081: LD_INT 81
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 70
12095: IFFALSE 12217
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_VAR 0 11
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: LD_INT 95
12118: PUSH
12119: LD_INT 12
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12215
// begin SetTag ( i , 702 ) ;
12139: LD_VAR 0 1
12143: PPUSH
12144: LD_INT 702
12146: PPUSH
12147: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12151: LD_ADDR_VAR 0 13
12155: PUSH
12156: LD_INT 12
12158: PPUSH
12159: LD_INT 81
12161: PUSH
12162: LD_INT 3
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 70
12173: PPUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 74
12183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12184: LD_VAR 0 1
12188: PPUSH
12189: LD_VAR 0 13
12193: PPUSH
12194: CALL_OW 250
12198: PPUSH
12199: LD_VAR 0 13
12203: PPUSH
12204: CALL_OW 251
12208: PPUSH
12209: CALL_OW 114
// end ;
12213: GO 12136
12215: POP
12216: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12217: LD_ADDR_VAR 0 3
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 95
12234: PUSH
12235: LD_INT 11
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 50
12244: PUSH
12245: EMPTY
12246: LIST
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 120
12260: PUSH
12261: LD_INT 702
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if tmp then
12280: LD_VAR 0 3
12284: IFFALSE 12330
// for i in tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12328
// begin ComMoveXY ( i , 90 , 94 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 90
12306: PPUSH
12307: LD_INT 94
12309: PPUSH
12310: CALL_OW 111
// SetTag ( i , 0 ) ;
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 109
// end ;
12326: GO 12296
12328: POP
12329: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12330: LD_VAR 0 8
12334: PUSH
12335: LD_VAR 0 5
12339: PPUSH
12340: LD_INT 120
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: AND
12355: IFFALSE 12368
// ComExitAll ( sci ) else
12357: LD_VAR 0 8
12361: PPUSH
12362: CALL 78025 0 1
12366: GO 12441
// if sci then
12368: LD_VAR 0 8
12372: IFFALSE 12441
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12374: LD_VAR 0 8
12378: PPUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 54
12384: PUSH
12385: EMPTY
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: PUSH
12397: LD_VAR 0 9
12401: PPUSH
12402: CALL_OW 302
12406: AND
12407: IFFALSE 12441
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12409: LD_VAR 0 8
12413: PPUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 54
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 72
12431: PPUSH
12432: LD_VAR 0 9
12436: PPUSH
12437: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12441: LD_VAR 0 6
12445: PPUSH
12446: LD_INT 50
12448: PUSH
12449: EMPTY
12450: LIST
12451: PPUSH
12452: CALL_OW 72
12456: PUSH
12457: LD_VAR 0 4
12461: AND
12462: IFFALSE 12493
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12464: LD_VAR 0 6
12468: PPUSH
12469: LD_INT 50
12471: PUSH
12472: EMPTY
12473: LIST
12474: PPUSH
12475: CALL_OW 72
12479: PPUSH
12480: LD_VAR 0 4
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PPUSH
12489: CALL_OW 130
// if eng then
12493: LD_VAR 0 5
12497: IFFALSE 12994
// begin for i in eng do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_VAR 0 5
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12992
// begin tag := GetTag ( i ) ;
12512: LD_ADDR_VAR 0 7
12516: PUSH
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL_OW 110
12526: ST_TO_ADDR
// case tag of 0 :
12527: LD_VAR 0 7
12531: PUSH
12532: LD_INT 0
12534: DOUBLE
12535: EQUAL
12536: IFTRUE 12540
12538: GO 12751
12540: POP
// begin if b then
12541: LD_VAR 0 4
12545: IFFALSE 12561
// begin SetTag ( i , 1 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 109
// continue ;
12559: GO 12509
// end ; if not ruBuildList then
12561: LD_EXP 35
12565: NOT
12566: IFFALSE 12582
// ComEnterUnit ( i , ruDep ) else
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_INT 28
12575: PPUSH
12576: CALL_OW 120
12580: GO 12749
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12582: LD_INT 11
12584: PPUSH
12585: LD_INT 81
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PPUSH
12595: CALL_OW 70
12599: PUSH
12600: LD_INT 0
12602: EQUAL
12603: PUSH
12604: LD_INT 28
12606: PPUSH
12607: LD_EXP 35
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_EXP 35
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PUSH
12629: LD_INT 2
12631: ARRAY
12632: PPUSH
12633: LD_EXP 35
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PUSH
12642: LD_INT 3
12644: ARRAY
12645: PPUSH
12646: LD_EXP 35
12650: PUSH
12651: LD_INT 1
12653: ARRAY
12654: PUSH
12655: LD_INT 4
12657: ARRAY
12658: PPUSH
12659: CALL 53311 0 5
12663: AND
12664: IFFALSE 12749
// begin if IsInUnit ( i ) then
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL_OW 310
12675: IFFALSE 12688
// ComExitBuilding ( i ) else
12677: LD_VAR 0 1
12681: PPUSH
12682: CALL_OW 122
12686: GO 12749
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_EXP 35
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: LD_EXP 35
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PUSH
12715: LD_INT 2
12717: ARRAY
12718: PPUSH
12719: LD_EXP 35
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PUSH
12728: LD_INT 3
12730: ARRAY
12731: PPUSH
12732: LD_EXP 35
12736: PUSH
12737: LD_INT 1
12739: ARRAY
12740: PUSH
12741: LD_INT 4
12743: ARRAY
12744: PPUSH
12745: CALL_OW 145
// end ; end ; 1 :
12749: GO 12948
12751: LD_INT 1
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12862
12759: POP
// begin if not b then
12760: LD_VAR 0 4
12764: NOT
12765: IFFALSE 12781
// begin SetTag ( i , 0 ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 109
// continue ;
12779: GO 12509
// end ; if IsInUnit ( i ) then
12781: LD_VAR 0 1
12785: PPUSH
12786: CALL_OW 310
12790: IFFALSE 12801
// ComExitBuilding ( i ) ;
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 122
// if GetLives ( i ) < 650 then
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 256
12810: PUSH
12811: LD_INT 650
12813: LESS
12814: IFFALSE 12830
// begin SetTag ( i , 2 ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 2
12823: PPUSH
12824: CALL_OW 109
// continue ;
12828: GO 12509
// end ; if b then
12830: LD_VAR 0 4
12834: IFFALSE 12860
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 74
12855: PPUSH
12856: CALL_OW 130
// end ; 2 :
12860: GO 12948
12862: LD_INT 2
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12947
12870: POP
// begin if GetLives ( i ) = 1000 then
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 256
12880: PUSH
12881: LD_INT 1000
12883: EQUAL
12884: IFFALSE 12900
// begin SetTag ( i , 1 ) ;
12886: LD_VAR 0 1
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 109
// continue ;
12898: GO 12509
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_INT 84
12907: PPUSH
12908: LD_INT 93
12910: PPUSH
12911: CALL_OW 297
12915: PUSH
12916: LD_INT 6
12918: GREATER
12919: IFFALSE 12945
// begin ComMoveXY ( i , 84 , 93 ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: LD_INT 84
12928: PPUSH
12929: LD_INT 93
12931: PPUSH
12932: CALL_OW 111
// AddComHold ( i ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 200
// end ; end ; end ;
12945: GO 12948
12947: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_INT 12
12955: PPUSH
12956: CALL_OW 308
12960: NOT
12961: PUSH
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 310
12971: NOT
12972: AND
12973: IFFALSE 12990
// ComMoveXY ( i , 91 , 95 ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_INT 91
12982: PPUSH
12983: LD_INT 95
12985: PPUSH
12986: CALL_OW 111
// end ;
12990: GO 12509
12992: POP
12993: POP
// end ; end ;
12994: PPOPN 13
12996: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12997: LD_INT 0
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: DOUBLE
13011: LD_INT 1
13013: DEC
13014: ST_TO_ADDR
13015: LD_INT 3
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 6
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: LD_OWVAR 67
13037: ARRAY
13038: PUSH
13039: LD_VAR 0 1
13043: PLUS
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13363
// begin uc_side := 6 ;
13048: LD_ADDR_OWVAR 20
13052: PUSH
13053: LD_INT 6
13055: ST_TO_ADDR
// uc_nation := 3 ;
13056: LD_ADDR_OWVAR 21
13060: PUSH
13061: LD_INT 3
13063: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 21
13071: PUSH
13072: LD_INT 22
13074: PUSH
13075: LD_INT 23
13077: PUSH
13078: LD_INT 24
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 4
13092: PPUSH
13093: CALL_OW 12
13097: ARRAY
13098: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13099: LD_ADDR_VAR 0 7
13103: PUSH
13104: LD_INT 42
13106: PUSH
13107: LD_INT 44
13109: PUSH
13110: LD_INT 43
13112: PUSH
13113: LD_INT 46
13115: PUSH
13116: LD_INT 45
13118: PUSH
13119: LD_INT 46
13121: PUSH
13122: LD_INT 45
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_OWVAR 67
13138: PUSH
13139: LD_INT 0
13141: PPUSH
13142: LD_INT 3
13144: PPUSH
13145: CALL_OW 12
13149: PLUS
13150: ARRAY
13151: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13152: LD_VAR 0 6
13156: PUSH
13157: LD_INT 21
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: IN
13167: PUSH
13168: LD_VAR 0 7
13172: PUSH
13173: LD_INT 46
13175: EQUAL
13176: AND
13177: IFFALSE 13206
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13179: LD_ADDR_VAR 0 7
13183: PUSH
13184: LD_INT 44
13186: PUSH
13187: LD_INT 45
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 2
13199: PPUSH
13200: CALL_OW 12
13204: ARRAY
13205: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13206: LD_OWVAR 1
13210: PUSH
13211: LD_INT 31500
13213: PUSH
13214: LD_INT 27300
13216: PUSH
13217: LD_INT 23100
13219: PUSH
13220: LD_INT 18900
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: LD_OWVAR 67
13233: ARRAY
13234: LESS
13235: IFFALSE 13268
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13237: LD_ADDR_VAR 0 7
13241: PUSH
13242: LD_INT 44
13244: PUSH
13245: LD_INT 43
13247: PUSH
13248: LD_INT 42
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 1
13258: PPUSH
13259: LD_INT 3
13261: PPUSH
13262: CALL_OW 12
13266: ARRAY
13267: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13268: LD_VAR 0 6
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: LD_VAR 0 7
13283: PPUSH
13284: LD_INT 90
13286: PPUSH
13287: CALL 45092 0 5
// un := CreateVehicle ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: CALL_OW 45
13300: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_INT 140
13308: PPUSH
13309: LD_INT 146
13311: PPUSH
13312: LD_INT 0
13314: PPUSH
13315: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_INT 131
13326: PPUSH
13327: LD_INT 128
13329: PPUSH
13330: CALL_OW 111
// wait ( 0 0$3 ) ;
13334: LD_INT 105
13336: PPUSH
13337: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13341: LD_ADDR_VAR 0 5
13345: PUSH
13346: LD_VAR 0 5
13350: PPUSH
13351: LD_VAR 0 4
13355: PPUSH
13356: CALL 77544 0 2
13360: ST_TO_ADDR
// end ;
13361: GO 13045
13363: POP
13364: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13365: LD_ADDR_EXP 36
13369: PUSH
13370: LD_EXP 36
13374: PPUSH
13375: LD_VAR 0 5
13379: PPUSH
13380: CALL 77581 0 2
13384: ST_TO_ADDR
// end ;
13385: LD_VAR 0 2
13389: RET
// every 0 0$3 trigger russianAttackers do
13390: LD_EXP 36
13394: IFFALSE 13477
13396: GO 13398
13398: DISABLE
// begin enable ;
13399: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13400: LD_EXP 36
13404: PPUSH
13405: LD_INT 126
13407: PUSH
13408: LD_INT 108
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 107
13417: PUSH
13418: LD_INT 85
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 82
13427: PUSH
13428: LD_INT 62
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 73
13437: PUSH
13438: LD_INT 46
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 62
13447: PUSH
13448: LD_INT 31
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 52
13457: PUSH
13458: LD_INT 17
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL 80148 0 2
// end ; end_of_file
13477: END
// on SailEvent ( event ) do begin if event = 1 then
13478: LD_VAR 0 1
13482: PUSH
13483: LD_INT 1
13485: EQUAL
13486: IFFALSE 13501
// PrepareRussianAttack ( Difficulty + 3 ) ;
13488: LD_OWVAR 67
13492: PUSH
13493: LD_INT 3
13495: PLUS
13496: PPUSH
13497: CALL 12997 0 1
// end ;
13501: PPOPN 1
13503: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13504: LD_VAR 0 1
13508: PUSH
13509: LD_EXP 28
13513: EQUAL
13514: PUSH
13515: LD_VAR 0 2
13519: PUSH
13520: LD_INT 1
13522: EQUAL
13523: AND
13524: IFFALSE 13530
// SikorskiKilledInAction ;
13526: CALL 18647 0 0
// end ;
13530: PPOPN 3
13532: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13533: LD_INT 0
13535: PPUSH
13536: PPUSH
13537: PPUSH
13538: PPUSH
13539: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL 35963 0 1
// if un = JMM then
13549: LD_VAR 0 1
13553: PUSH
13554: LD_EXP 14
13558: EQUAL
13559: IFFALSE 13568
// YouLost ( JMM ) ;
13561: LD_STRING JMM
13563: PPUSH
13564: CALL_OW 104
// if un = Sikorski then
13568: LD_VAR 0 1
13572: PUSH
13573: LD_EXP 28
13577: EQUAL
13578: IFFALSE 13604
// if sikorskiStatus = 0 then
13580: LD_EXP 9
13584: PUSH
13585: LD_INT 0
13587: EQUAL
13588: IFFALSE 13596
// SikorskiKilledInAction else
13590: CALL 18647 0 0
13594: GO 13604
// sikorskiIsKilled := true ;
13596: LD_ADDR_EXP 10
13600: PUSH
13601: LD_INT 1
13603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 255
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 248
13627: PUSH
13628: LD_INT 1
13630: EQUAL
13631: AND
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 266
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: IN
13653: AND
13654: IFFALSE 13663
// YouLost ( Destroyed ) ;
13656: LD_STRING Destroyed
13658: PPUSH
13659: CALL_OW 104
// if un = ruDep then
13663: LD_VAR 0 1
13667: PUSH
13668: LD_INT 28
13670: EQUAL
13671: IFFALSE 13805
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_INT 22
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13803
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: LD_INT 11
13717: PPUSH
13718: LD_INT 81
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 70
13732: PPUSH
13733: LD_VAR 0 2
13737: PPUSH
13738: CALL_OW 74
13742: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 310
13752: PPUSH
13753: CALL_OW 266
13757: PUSH
13758: LD_INT 32
13760: EQUAL
13761: IFFALSE 13801
// begin ComExitBuilding ( i ) ;
13763: LD_VAR 0 2
13767: PPUSH
13768: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13772: LD_VAR 0 2
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: CALL_OW 250
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: CALL_OW 251
13796: PPUSH
13797: CALL_OW 174
// end ; end ;
13801: GO 13707
13803: POP
13804: POP
// end ; if un in ruMobile then
13805: LD_VAR 0 1
13809: PUSH
13810: LD_EXP 34
13814: IN
13815: IFFALSE 13833
// ruMobile := ruMobile diff un ;
13817: LD_ADDR_EXP 34
13821: PUSH
13822: LD_EXP 34
13826: PUSH
13827: LD_VAR 0 1
13831: DIFF
13832: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 3
13845: EQUAL
13846: IFFALSE 14481
// begin if GetType ( un ) = unit_building then
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 247
13857: PUSH
13858: LD_INT 3
13860: EQUAL
13861: IFFALSE 13997
// begin btype := GetBType ( un ) ;
13863: LD_ADDR_VAR 0 6
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: CALL_OW 266
13877: ST_TO_ADDR
// if btype = b_warehouse then
13878: LD_VAR 0 6
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: IFFALSE 13896
// btype := b_depot ;
13888: LD_ADDR_VAR 0 6
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// if btype = b_barracks then
13896: LD_VAR 0 6
13900: PUSH
13901: LD_INT 5
13903: EQUAL
13904: IFFALSE 13914
// btype := b_armoury ;
13906: LD_ADDR_VAR 0 6
13910: PUSH
13911: LD_INT 4
13913: ST_TO_ADDR
// if btype = b_lab_full then
13914: LD_VAR 0 6
13918: PUSH
13919: LD_INT 8
13921: EQUAL
13922: IFFALSE 13932
// btype := b_lab ;
13924: LD_ADDR_VAR 0 6
13928: PUSH
13929: LD_INT 6
13931: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
13932: LD_ADDR_EXP 35
13936: PUSH
13937: LD_EXP 35
13941: PPUSH
13942: LD_EXP 35
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: PPUSH
13951: LD_VAR 0 6
13955: PUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 250
13965: PUSH
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 251
13975: PUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 254
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 1
13996: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 247
14006: PUSH
14007: LD_INT 2
14009: EQUAL
14010: IFFALSE 14285
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 264
14021: PUSH
14022: LD_INT 52
14024: PUSH
14025: LD_INT 51
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: IN
14032: IFFALSE 14062
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14034: LD_INT 29
14036: PPUSH
14037: LD_INT 22
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: LD_INT 3
14045: PPUSH
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 264
14055: PPUSH
14056: CALL_OW 185
// end else
14060: GO 14285
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14062: LD_ADDR_VAR 0 4
14066: PUSH
14067: LD_INT 21
14069: PUSH
14070: LD_INT 22
14072: PUSH
14073: LD_INT 23
14075: PUSH
14076: LD_INT 24
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 1
14087: PPUSH
14088: LD_INT 4
14090: PPUSH
14091: CALL_OW 12
14095: ARRAY
14096: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14097: LD_ADDR_VAR 0 5
14101: PUSH
14102: LD_INT 42
14104: PUSH
14105: LD_INT 44
14107: PUSH
14108: LD_INT 43
14110: PUSH
14111: LD_INT 46
14113: PUSH
14114: LD_INT 45
14116: PUSH
14117: LD_INT 46
14119: PUSH
14120: LD_INT 45
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: LD_OWVAR 67
14136: PUSH
14137: LD_INT 0
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 12
14147: PLUS
14148: ARRAY
14149: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14150: LD_VAR 0 4
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: IN
14165: PUSH
14166: LD_VAR 0 5
14170: PUSH
14171: LD_INT 46
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14177: LD_ADDR_VAR 0 5
14181: PUSH
14182: LD_INT 44
14184: PUSH
14185: LD_INT 45
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 1
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: CALL_OW 12
14202: ARRAY
14203: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14204: LD_OWVAR 1
14208: PUSH
14209: LD_INT 31500
14211: PUSH
14212: LD_INT 27300
14214: PUSH
14215: LD_INT 23100
14217: PUSH
14218: LD_INT 21000
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: LD_OWVAR 67
14231: ARRAY
14232: LESS
14233: IFFALSE 14262
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: LD_INT 44
14242: PUSH
14243: LD_INT 43
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 1
14252: PPUSH
14253: LD_INT 2
14255: PPUSH
14256: CALL_OW 12
14260: ARRAY
14261: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14262: LD_INT 29
14264: PPUSH
14265: LD_VAR 0 4
14269: PPUSH
14270: LD_INT 1
14272: PPUSH
14273: LD_INT 1
14275: PPUSH
14276: LD_VAR 0 5
14280: PPUSH
14281: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 257
14294: PUSH
14295: LD_INT 3
14297: EQUAL
14298: IFFALSE 14481
// begin killMechCounter := Inc ( killMechCounter ) ;
14300: LD_ADDR_EXP 12
14304: PUSH
14305: LD_EXP 12
14309: PPUSH
14310: CALL 78905 0 1
14314: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14315: LD_EXP 33
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: PUSH
14324: LD_INT 29
14326: PPUSH
14327: CALL_OW 302
14331: NOT
14332: OR
14333: IFFALSE 14337
// exit ;
14335: GO 14481
// ruMechCounter := Dec ( ruMechCounter ) ;
14337: LD_ADDR_EXP 33
14341: PUSH
14342: LD_EXP 33
14346: PPUSH
14347: CALL 78927 0 1
14351: ST_TO_ADDR
// uc_side := 3 ;
14352: LD_ADDR_OWVAR 20
14356: PUSH
14357: LD_INT 3
14359: ST_TO_ADDR
// uc_nation := 3 ;
14360: LD_ADDR_OWVAR 21
14364: PUSH
14365: LD_INT 3
14367: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14368: LD_INT 0
14370: PPUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: LD_OWVAR 67
14393: ARRAY
14394: PPUSH
14395: CALL_OW 383
// tmp := CreateHuman ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: CALL_OW 44
14408: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 145
14416: PPUSH
14417: LD_INT 133
14419: PPUSH
14420: LD_INT 0
14422: PPUSH
14423: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14427: LD_VAR 0 3
14431: PPUSH
14432: LD_INT 29
14434: PPUSH
14435: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14439: LD_INT 35
14441: PPUSH
14442: CALL_OW 67
// if not HasTask ( tmp ) then
14446: LD_VAR 0 3
14450: PPUSH
14451: CALL_OW 314
14455: NOT
14456: IFFALSE 14470
// ComEnterUnit ( tmp , ruFac ) ;
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 29
14465: PPUSH
14466: CALL_OW 120
// until IsInUnit ( tmp ) ;
14470: LD_VAR 0 3
14474: PPUSH
14475: CALL_OW 310
14479: IFFALSE 14439
// end ; end ; end ;
14481: PPOPN 6
14483: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: PUSH
14494: LD_INT 4
14496: EQUAL
14497: IFFALSE 14514
// ComMoveXY ( driver , 40 , 47 ) ;
14499: LD_VAR 0 1
14503: PPUSH
14504: LD_INT 40
14506: PPUSH
14507: LD_INT 47
14509: PPUSH
14510: CALL_OW 111
// if GetSide ( driver ) = 3 then
14514: LD_VAR 0 1
14518: PPUSH
14519: CALL_OW 255
14523: PUSH
14524: LD_INT 3
14526: EQUAL
14527: IFFALSE 14741
// begin ComMoveXY ( driver , 90 , 97 ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_INT 90
14536: PPUSH
14537: LD_INT 97
14539: PPUSH
14540: CALL_OW 111
// if IsOk ( ruFac ) then
14544: LD_INT 29
14546: PPUSH
14547: CALL_OW 302
14551: IFFALSE 14665
// begin repeat wait ( 0 0$1 ) ;
14553: LD_INT 35
14555: PPUSH
14556: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14560: LD_INT 29
14562: PPUSH
14563: CALL_OW 313
14567: PUSH
14568: LD_INT 6
14570: LESS
14571: PUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: CALL_OW 301
14581: OR
14582: IFFALSE 14553
// if IsDead ( driver ) then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 301
14593: IFFALSE 14597
// exit ;
14595: GO 14741
// repeat wait ( 0 0$10 ) ;
14597: LD_INT 350
14599: PPUSH
14600: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 314
14613: NOT
14614: PUSH
14615: LD_INT 29
14617: PPUSH
14618: CALL_OW 313
14622: PUSH
14623: LD_INT 6
14625: LESS
14626: AND
14627: IFFALSE 14641
// ComEnterUnit ( driver , ruFac ) ;
14629: LD_VAR 0 1
14633: PPUSH
14634: LD_INT 29
14636: PPUSH
14637: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 301
14650: PUSH
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 310
14660: OR
14661: IFFALSE 14597
// end else
14663: GO 14741
// begin ComMoveXY ( driver , 142 , 148 ) ;
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 142
14672: PPUSH
14673: LD_INT 148
14675: PPUSH
14676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14680: LD_INT 35
14682: PPUSH
14683: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 301
14696: PUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 142
14704: PPUSH
14705: LD_INT 148
14707: PPUSH
14708: CALL_OW 307
14712: OR
14713: IFFALSE 14680
// if IsAt ( driver , 142 , 148 ) then
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 142
14722: PPUSH
14723: LD_INT 148
14725: PPUSH
14726: CALL_OW 307
14730: IFFALSE 14741
// RemoveUnit ( driver ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 64
// end ; end ; end ;
14741: PPOPN 4
14743: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14744: LD_VAR 0 2
14748: PPUSH
14749: CALL_OW 257
14753: PUSH
14754: LD_INT 3
14756: EQUAL
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: AND
14772: PUSH
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 29
14780: EQUAL
14781: AND
14782: IFFALSE 14796
// SetLives ( un , 1000 ) ;
14784: LD_VAR 0 2
14788: PPUSH
14789: LD_INT 1000
14791: PPUSH
14792: CALL_OW 234
// if GetTag ( b ) = 701 then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 110
14805: PUSH
14806: LD_INT 701
14808: EQUAL
14809: IFFALSE 14835
// begin SetTag ( b , 0 ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_INT 0
14818: PPUSH
14819: CALL_OW 109
// SetTag ( un , 0 ) ;
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_INT 0
14830: PPUSH
14831: CALL_OW 109
// end ; end ;
14835: PPOPN 2
14837: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 255
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 6
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: IN
14858: PUSH
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 263
14868: PUSH
14869: LD_INT 3
14871: EQUAL
14872: AND
14873: PUSH
14874: LD_EXP 7
14878: NOT
14879: AND
14880: IFFALSE 14899
// begin seenComputer := true ;
14882: LD_ADDR_EXP 7
14886: PUSH
14887: LD_INT 1
14889: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL 17838 0 1
// end ; end ;
14899: PPOPN 1
14901: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14902: LD_INT 0
14904: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL 36083 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 255
14928: PUSH
14929: LD_INT 3
14931: EQUAL
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 263
14942: PUSH
14943: LD_INT 1
14945: EQUAL
14946: AND
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 264
14957: PUSH
14958: LD_INT 42
14960: PUSH
14961: LD_INT 43
14963: PUSH
14964: LD_INT 44
14966: PUSH
14967: LD_INT 46
14969: PUSH
14970: LD_INT 45
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: IN
14980: AND
14981: IFFALSE 15011
// begin SetTag ( vehicle , 300 ) ;
14983: LD_VAR 0 1
14987: PPUSH
14988: LD_INT 300
14990: PPUSH
14991: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14995: LD_ADDR_EXP 34
14999: PUSH
15000: LD_EXP 34
15004: PUSH
15005: LD_VAR 0 1
15009: UNION
15010: ST_TO_ADDR
// end ; end ;
15011: PPOPN 3
15013: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15014: LD_INT 0
15016: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15017: LD_VAR 0 2
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 13
15029: PPUSH
15030: CALL_OW 309
15034: IFFALSE 15165
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15036: LD_ADDR_VAR 0 6
15040: PUSH
15041: LD_INT 22
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 50
15053: PUSH
15054: EMPTY
15055: LIST
15056: PUSH
15057: LD_INT 34
15059: PUSH
15060: LD_INT 51
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// if not cargo then
15077: LD_VAR 0 6
15081: NOT
15082: IFFALSE 15086
// exit ;
15084: GO 15165
// wait ( 0 0$5 ) ;
15086: LD_INT 175
15088: PPUSH
15089: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15093: LD_VAR 0 6
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: LD_INT 28
15104: PPUSH
15105: CALL_OW 296
15109: PUSH
15110: LD_INT 6
15112: LESS
15113: PUSH
15114: LD_VAR 0 6
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: CALL_OW 261
15127: PUSH
15128: LD_INT 50
15130: LESS
15131: AND
15132: IFFALSE 15146
// ComMoveUnit ( cargo , ruDep ) ;
15134: LD_VAR 0 6
15138: PPUSH
15139: LD_INT 28
15141: PPUSH
15142: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15146: LD_VAR 0 6
15150: PPUSH
15151: LD_VAR 0 2
15155: PPUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: CALL_OW 177
// end ; end ;
15165: PPOPN 6
15167: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 264
15177: PUSH
15178: LD_INT 45
15180: EQUAL
15181: IFFALSE 15198
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15183: LD_ADDR_EXP 11
15187: PUSH
15188: LD_EXP 11
15192: PPUSH
15193: CALL 78905 0 1
15197: ST_TO_ADDR
// end ;
15198: PPOPN 4
15200: END
// on BuildingComplete ( b ) do var i , tmp ;
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
// begin if GetSide ( b ) = 3 then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 255
15214: PUSH
15215: LD_INT 3
15217: EQUAL
15218: IFFALSE 15315
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15220: LD_ADDR_EXP 35
15224: PUSH
15225: LD_EXP 35
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 3
15237: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 266
15247: PUSH
15248: LD_INT 4
15250: EQUAL
15251: IFFALSE 15262
// ComUpgrade ( b ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 266
15271: PUSH
15272: LD_INT 32
15274: PUSH
15275: LD_INT 33
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: IN
15282: IFFALSE 15315
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 46
15291: PUSH
15292: LD_INT 45
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 12
15309: ARRAY
15310: PPUSH
15311: CALL_OW 208
// end ; end ; end_of_file
15315: PPOPN 3
15317: END
// export function Action ; var i , tmp , un , inUnit ; begin
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
// Video ( true ) ;
15325: LD_INT 1
15327: PPUSH
15328: CALL 77516 0 1
// invincibleMode := true ;
15332: LD_ADDR_EXP 5
15336: PUSH
15337: LD_INT 1
15339: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15340: LD_INT 50
15342: PPUSH
15343: LD_INT 12
15345: PPUSH
15346: LD_INT 1
15348: PPUSH
15349: LD_INT 56
15351: NEG
15352: PPUSH
15353: CALL 77430 0 4
// CenterOnXY ( 50 , 12 ) ;
15357: LD_INT 50
15359: PPUSH
15360: LD_INT 12
15362: PPUSH
15363: CALL_OW 84
// wait ( 0 0$3 ) ;
15367: LD_INT 105
15369: PPUSH
15370: CALL_OW 67
// PrepareStartRussianAttack ;
15374: CALL 10014 0 0
// CenterOnXY ( 66 , 47 ) ;
15378: LD_INT 66
15380: PPUSH
15381: LD_INT 47
15383: PPUSH
15384: CALL_OW 84
// wait ( 0 0$5 ) ;
15388: LD_INT 175
15390: PPUSH
15391: CALL_OW 67
// case gammaCommander of 1 :
15395: LD_EXP 13
15399: PUSH
15400: LD_INT 1
15402: DOUBLE
15403: EQUAL
15404: IFTRUE 15408
15406: GO 15423
15408: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15409: LD_EXP 16
15413: PPUSH
15414: LD_STRING D1-Don-1
15416: PPUSH
15417: CALL_OW 88
15421: GO 15470
15423: LD_INT 2
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15431
15429: GO 15446
15431: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15432: LD_EXP 15
15436: PPUSH
15437: LD_STRING D1-Brown-1
15439: PPUSH
15440: CALL_OW 88
15444: GO 15470
15446: LD_INT 3
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15469
15454: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15455: LD_EXP 25
15459: PPUSH
15460: LD_STRING D1-VanH-1
15462: PPUSH
15463: CALL_OW 88
15467: GO 15470
15469: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15470: LD_ADDR_VAR 0 3
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 33
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 61
15497: PUSH
15498: EMPTY
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// if tmp then
15511: LD_VAR 0 3
15515: IFFALSE 15532
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 74
15524: PPUSH
15525: LD_INT 44
15527: PPUSH
15528: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: PUSH
15566: LD_EXP 16
15570: PUSH
15571: LD_EXP 15
15575: PUSH
15576: LD_EXP 25
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: DIFF
15586: ST_TO_ADDR
// if tmp then
15587: LD_VAR 0 3
15591: IFFALSE 15669
// for i in tmp do
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_VAR 0 3
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15667
// begin inUnit := IsInUnit ( i ) ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_VAR 0 2
15615: PPUSH
15616: CALL_OW 310
15620: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15621: LD_VAR 0 5
15625: PUSH
15626: LD_VAR 0 5
15630: PPUSH
15631: CALL_OW 266
15635: PUSH
15636: LD_INT 32
15638: PUSH
15639: LD_INT 31
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: IN
15646: AND
15647: IFFALSE 15665
// tmp := tmp diff i ;
15649: LD_ADDR_VAR 0 3
15653: PUSH
15654: LD_VAR 0 3
15658: PUSH
15659: LD_VAR 0 2
15663: DIFF
15664: ST_TO_ADDR
// end ;
15665: GO 15603
15667: POP
15668: POP
// if tmp then
15669: LD_VAR 0 3
15673: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15675: LD_VAR 0 3
15679: PPUSH
15680: CALL 78025 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 74
15691: PPUSH
15692: LD_INT 44
15694: PPUSH
15695: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15699: LD_ADDR_VAR 0 3
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 25
15716: PUSH
15717: LD_INT 4
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 69
15732: ST_TO_ADDR
// if tmp then
15733: LD_VAR 0 3
15737: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL 78025 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 66
15755: PPUSH
15756: LD_INT 28
15758: PPUSH
15759: CALL_OW 171
// end ; end ; game_speed := 4 ;
15763: LD_ADDR_OWVAR 65
15767: PUSH
15768: LD_INT 4
15770: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15771: LD_INT 70
15773: PPUSH
15774: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15778: LD_EXP 29
15782: PPUSH
15783: LD_STRING D1-Har-1
15785: PPUSH
15786: CALL_OW 94
// case gammaCommander of 1 :
15790: LD_EXP 13
15794: PUSH
15795: LD_INT 1
15797: DOUBLE
15798: EQUAL
15799: IFTRUE 15803
15801: GO 15818
15803: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15804: LD_EXP 16
15808: PPUSH
15809: LD_STRING D1-Don-2
15811: PPUSH
15812: CALL_OW 88
15816: GO 15865
15818: LD_INT 2
15820: DOUBLE
15821: EQUAL
15822: IFTRUE 15826
15824: GO 15841
15826: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15827: LD_EXP 15
15831: PPUSH
15832: LD_STRING D1-Brown-2
15834: PPUSH
15835: CALL_OW 88
15839: GO 15865
15841: LD_INT 3
15843: DOUBLE
15844: EQUAL
15845: IFTRUE 15849
15847: GO 15864
15849: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15850: LD_EXP 25
15854: PPUSH
15855: LD_STRING D1-VanH-2
15857: PPUSH
15858: CALL_OW 88
15862: GO 15865
15864: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15865: LD_EXP 29
15869: PPUSH
15870: LD_STRING D1-Har-2
15872: PPUSH
15873: CALL_OW 94
// invincibleMode := false ;
15877: LD_ADDR_EXP 5
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// Video ( false ) ;
15885: LD_INT 0
15887: PPUSH
15888: CALL 77516 0 1
// ChangeMissionObjectives ( M1 ) ;
15892: LD_STRING M1
15894: PPUSH
15895: CALL_OW 337
// SaveForQuickRestart ;
15899: CALL_OW 22
// wait ( 2 2$30 ) ;
15903: LD_INT 5250
15905: PPUSH
15906: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15910: LD_INT 1
15912: PPUSH
15913: CALL 12997 0 1
// wait ( 4 4$30 ) ;
15917: LD_INT 9450
15919: PPUSH
15920: CALL_OW 67
// if Difficulty > 1 then
15924: LD_OWVAR 67
15928: PUSH
15929: LD_INT 1
15931: GREATER
15932: IFFALSE 15941
// PrepareRussianAttack ( 2 ) ;
15934: LD_INT 2
15936: PPUSH
15937: CALL 12997 0 1
// if Difficulty > 2 then
15941: LD_OWVAR 67
15945: PUSH
15946: LD_INT 2
15948: GREATER
15949: IFFALSE 16108
// begin for i := 1 to 4 do
15951: LD_ADDR_VAR 0 2
15955: PUSH
15956: DOUBLE
15957: LD_INT 1
15959: DEC
15960: ST_TO_ADDR
15961: LD_INT 4
15963: PUSH
15964: FOR_TO
15965: IFFALSE 16050
// begin uc_side := 6 ;
15967: LD_ADDR_OWVAR 20
15971: PUSH
15972: LD_INT 6
15974: ST_TO_ADDR
// uc_nation := 3 ;
15975: LD_ADDR_OWVAR 21
15979: PUSH
15980: LD_INT 3
15982: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15983: LD_INT 0
15985: PPUSH
15986: LD_INT 7
15988: PPUSH
15989: CALL_OW 381
// un := CreateHuman ;
15993: LD_ADDR_VAR 0 4
15997: PUSH
15998: CALL_OW 44
16002: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16003: LD_VAR 0 4
16007: PPUSH
16008: LD_INT 122
16010: PPUSH
16011: LD_INT 89
16013: PPUSH
16014: LD_INT 3
16016: PPUSH
16017: LD_INT 0
16019: PPUSH
16020: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16024: LD_VAR 0 4
16028: PPUSH
16029: LD_INT 88
16031: PPUSH
16032: LD_INT 42
16034: PPUSH
16035: CALL_OW 114
// AddComHold ( un ) ;
16039: LD_VAR 0 4
16043: PPUSH
16044: CALL_OW 200
// end ;
16048: GO 15964
16050: POP
16051: POP
// PrepareScientist ( false , 6 ) ;
16052: LD_INT 0
16054: PPUSH
16055: LD_INT 6
16057: PPUSH
16058: CALL_OW 384
// un := CreateHuman ;
16062: LD_ADDR_VAR 0 4
16066: PUSH
16067: CALL_OW 44
16071: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16072: LD_VAR 0 4
16076: PPUSH
16077: LD_INT 122
16079: PPUSH
16080: LD_INT 89
16082: PPUSH
16083: LD_INT 3
16085: PPUSH
16086: LD_INT 0
16088: PPUSH
16089: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16093: LD_VAR 0 4
16097: PPUSH
16098: LD_INT 91
16100: PPUSH
16101: LD_INT 48
16103: PPUSH
16104: CALL_OW 111
// end ; end ;
16108: LD_VAR 0 1
16112: RET
// every 0 0$1 trigger invincibleMode do var i ;
16113: LD_EXP 5
16117: IFFALSE 16214
16119: GO 16121
16121: DISABLE
16122: LD_INT 0
16124: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16125: LD_ADDR_VAR 0 1
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: LD_INT 21
16145: PUSH
16146: LD_INT 3
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 21
16155: PUSH
16156: LD_INT 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: LD_INT 24
16173: PUSH
16174: LD_INT 900
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16212
// SetLives ( i , 900 ) ;
16198: LD_VAR 0 1
16202: PPUSH
16203: LD_INT 900
16205: PPUSH
16206: CALL_OW 234
16210: GO 16195
16212: POP
16213: POP
// end ;
16214: PPOPN 1
16216: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16217: LD_OWVAR 1
16221: PUSH
16222: LD_INT 14700
16224: GREATER
16225: IFFALSE 17835
16227: GO 16229
16229: DISABLE
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
// begin PrepareSupportFromDelta ;
16234: CALL 4052 0 0
// deltaSupport := true ;
16238: LD_ADDR_EXP 6
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// dialog := false ;
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16254: LD_EXP 21
16258: PPUSH
16259: CALL_OW 302
16263: IFFALSE 16285
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_EXP 21
16274: PPUSH
16275: LD_STRING D2-Glad-1
16277: PPUSH
16278: CALL_OW 88
16282: ST_TO_ADDR
16283: GO 16367
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 120
16302: PUSH
16303: LD_INT 107
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 23
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: PUSH
16341: LD_EXP 27
16345: PUSH
16346: LD_EXP 26
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: DIFF
16355: PPUSH
16356: LD_STRING D2-Sol1-1
16358: PPUSH
16359: LD_STRING D2-FSol1-1
16361: PPUSH
16362: CALL 20026 0 3
16366: ST_TO_ADDR
// if dialog then
16367: LD_VAR 0 1
16371: IFFALSE 16472
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16373: LD_EXP 16
16377: PPUSH
16378: CALL_OW 302
16382: PUSH
16383: LD_EXP 13
16387: PUSH
16388: LD_INT 1
16390: EQUAL
16391: AND
16392: IFFALSE 16406
// Say ( Donaldson , D2-Don-1 ) ;
16394: LD_EXP 16
16398: PPUSH
16399: LD_STRING D2-Don-1
16401: PPUSH
16402: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16406: LD_EXP 15
16410: PPUSH
16411: CALL_OW 302
16415: PUSH
16416: LD_EXP 13
16420: PUSH
16421: LD_INT 2
16423: EQUAL
16424: AND
16425: IFFALSE 16439
// Say ( Brown , D2-Brown-1 ) ;
16427: LD_EXP 15
16431: PPUSH
16432: LD_STRING D2-Brown-1
16434: PPUSH
16435: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16439: LD_EXP 25
16443: PPUSH
16444: CALL_OW 302
16448: PUSH
16449: LD_EXP 13
16453: PUSH
16454: LD_INT 3
16456: EQUAL
16457: AND
16458: IFFALSE 16472
// Say ( Houten , D2-VanH-1 ) ;
16460: LD_EXP 25
16464: PPUSH
16465: LD_STRING D2-VanH-1
16467: PPUSH
16468: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16472: LD_INT 3
16474: PPUSH
16475: CALL 12997 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16479: LD_STRING 07_time
16481: PPUSH
16482: LD_INT 18900
16484: PPUSH
16485: CALL_OW 30
16489: PUSH
16490: LD_INT 3
16492: DIV
16493: PPUSH
16494: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16498: LD_INT 34
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 321
16508: PUSH
16509: LD_INT 2
16511: EQUAL
16512: IFFALSE 16521
// SetAchievement ( ACH_HEAVYGUN ) ;
16514: LD_STRING ACH_HEAVYGUN
16516: PPUSH
16517: CALL_OW 543
// PrepareMacmillanSquad ;
16521: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16525: LD_INT 35
16527: PPUSH
16528: CALL_OW 67
// DialogueOn ;
16532: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16536: LD_EXP 14
16540: PPUSH
16541: CALL_OW 87
// dwait ( 0 0$2 ) ;
16545: LD_INT 70
16547: PPUSH
16548: CALL_OW 68
// DialogueOff ;
16552: CALL_OW 7
// wait ( 0 0$10 ) ;
16556: LD_INT 350
16558: PPUSH
16559: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16563: LD_INT 1
16565: PPUSH
16566: CALL_OW 427
// p := 0 ;
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16578: LD_INT 35
16580: PPUSH
16581: CALL_OW 67
// p := Inc ( p ) ;
16585: LD_ADDR_VAR 0 2
16589: PUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL 78905 0 1
16599: ST_TO_ADDR
// if p > 300 then
16600: LD_VAR 0 2
16604: PUSH
16605: LD_INT 300
16607: GREATER
16608: IFFALSE 16612
// exit ;
16610: GO 17835
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16612: LD_EXP 14
16616: PPUSH
16617: LD_INT 15
16619: PPUSH
16620: CALL_OW 308
16624: PUSH
16625: LD_EXP 14
16629: PPUSH
16630: CALL_OW 310
16634: PPUSH
16635: LD_INT 15
16637: PPUSH
16638: CALL_OW 308
16642: OR
16643: PUSH
16644: LD_EXP 14
16648: PPUSH
16649: LD_EXP 27
16653: PPUSH
16654: CALL_OW 296
16658: PUSH
16659: LD_INT 10
16661: LESS
16662: OR
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: PUSH
16677: LD_INT 120
16679: PUSH
16680: LD_INT 106
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 120
16689: PUSH
16690: LD_INT 107
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 91
16704: PUSH
16705: LD_EXP 14
16709: PUSH
16710: LD_INT 12
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: OR
16728: IFFALSE 16578
// DialogueOn ;
16730: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16734: LD_EXP 14
16738: PPUSH
16739: LD_STRING D3-JMM-1
16741: PPUSH
16742: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16746: LD_EXP 16
16750: PPUSH
16751: CALL_OW 302
16755: PUSH
16756: LD_EXP 13
16760: PUSH
16761: LD_INT 1
16763: EQUAL
16764: AND
16765: IFFALSE 16781
// Say ( Donaldson , D3-Don-1 ) else
16767: LD_EXP 16
16771: PPUSH
16772: LD_STRING D3-Don-1
16774: PPUSH
16775: CALL_OW 88
16779: GO 16877
// begin if gammaCommander = 1 then
16781: LD_EXP 13
16785: PUSH
16786: LD_INT 1
16788: EQUAL
16789: IFFALSE 16877
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16791: LD_INT 22
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 23
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 120
16823: PUSH
16824: LD_INT 106
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 26
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: PPUSH
16848: CALL_OW 69
16852: PPUSH
16853: LD_STRING D3-Sol1-1
16855: PPUSH
16856: LD_STRING 
16858: PPUSH
16859: CALL 20026 0 3
16863: IFFALSE 16877
// Say ( JMM , D3-JMM-2 ) ;
16865: LD_EXP 14
16869: PPUSH
16870: LD_STRING D3-JMM-2
16872: PPUSH
16873: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16877: LD_EXP 15
16881: PPUSH
16882: CALL_OW 302
16886: PUSH
16887: LD_EXP 13
16891: PUSH
16892: LD_INT 2
16894: EQUAL
16895: AND
16896: IFFALSE 16912
// Say ( Brown , D3-Brown-1 ) else
16898: LD_EXP 15
16902: PPUSH
16903: LD_STRING D3-Brown-1
16905: PPUSH
16906: CALL_OW 88
16910: GO 17008
// begin if gammaCommander = 2 then
16912: LD_EXP 13
16916: PUSH
16917: LD_INT 2
16919: EQUAL
16920: IFFALSE 17008
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16922: LD_INT 22
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 21
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 23
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 120
16954: PUSH
16955: LD_INT 106
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 26
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 69
16983: PPUSH
16984: LD_STRING D3-Sol1-1a
16986: PPUSH
16987: LD_STRING 
16989: PPUSH
16990: CALL 20026 0 3
16994: IFFALSE 17008
// Say ( JMM , D3-JMM-2 ) ;
16996: LD_EXP 14
17000: PPUSH
17001: LD_STRING D3-JMM-2
17003: PPUSH
17004: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17008: LD_EXP 25
17012: PPUSH
17013: CALL_OW 302
17017: PUSH
17018: LD_EXP 13
17022: PUSH
17023: LD_INT 3
17025: EQUAL
17026: AND
17027: IFFALSE 17043
// Say ( Houten , D3-VanH-1 ) else
17029: LD_EXP 25
17033: PPUSH
17034: LD_STRING D3-VanH-1
17036: PPUSH
17037: CALL_OW 88
17041: GO 17139
// begin if gammaCommander = 3 then
17043: LD_EXP 13
17047: PUSH
17048: LD_INT 3
17050: EQUAL
17051: IFFALSE 17139
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17053: LD_INT 22
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 21
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 23
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 120
17085: PUSH
17086: LD_INT 106
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 26
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: PPUSH
17115: LD_STRING D3-Sol1-1b
17117: PPUSH
17118: LD_STRING 
17120: PPUSH
17121: CALL 20026 0 3
17125: IFFALSE 17139
// Say ( JMM , D3-JMM-2 ) ;
17127: LD_EXP 14
17131: PPUSH
17132: LD_STRING D3-JMM-2
17134: PPUSH
17135: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17139: LD_EXP 27
17143: PPUSH
17144: CALL_OW 302
17148: IFFALSE 17176
// begin Say ( Joan , D3a-Joan-1 ) ;
17150: LD_EXP 27
17154: PPUSH
17155: LD_STRING D3a-Joan-1
17157: PPUSH
17158: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17162: LD_EXP 14
17166: PPUSH
17167: LD_STRING D3a-JMM-1
17169: PPUSH
17170: CALL_OW 88
// end else
17174: GO 17610
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17176: LD_STRING 06_JoanStatus_1
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: CALL_OW 30
17186: PUSH
17187: LD_INT 1
17189: EQUAL
17190: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-1 ) ;
17192: LD_EXP 14
17196: PPUSH
17197: LD_STRING D3b-JMM-1
17199: PPUSH
17200: CALL_OW 88
// dialog := false ;
17204: LD_ADDR_VAR 0 1
17208: PUSH
17209: LD_INT 0
17211: ST_TO_ADDR
// if gammaCommander = 1 then
17212: LD_EXP 13
17216: PUSH
17217: LD_INT 1
17219: EQUAL
17220: IFFALSE 17331
// if IsOK ( Donaldson ) then
17222: LD_EXP 16
17226: PPUSH
17227: CALL_OW 302
17231: IFFALSE 17253
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17233: LD_ADDR_VAR 0 1
17237: PUSH
17238: LD_EXP 16
17242: PPUSH
17243: LD_STRING D3b-Don-1
17245: PPUSH
17246: CALL_OW 88
17250: ST_TO_ADDR
17251: GO 17331
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: LD_INT 22
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 21
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 23
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 120
17290: PUSH
17291: LD_INT 106
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: PPUSH
17320: LD_STRING D3b-Sol1-1
17322: PPUSH
17323: LD_STRING 
17325: PPUSH
17326: CALL 20026 0 3
17330: ST_TO_ADDR
// if gammaCommander = 2 then
17331: LD_EXP 13
17335: PUSH
17336: LD_INT 2
17338: EQUAL
17339: IFFALSE 17450
// if IsOk ( Brown ) then
17341: LD_EXP 15
17345: PPUSH
17346: CALL_OW 302
17350: IFFALSE 17372
// dialog := Say ( Brown , D3b-Brown-1 ) else
17352: LD_ADDR_VAR 0 1
17356: PUSH
17357: LD_EXP 15
17361: PPUSH
17362: LD_STRING D3b-Brown-1
17364: PPUSH
17365: CALL_OW 88
17369: ST_TO_ADDR
17370: GO 17450
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17372: LD_ADDR_VAR 0 1
17376: PUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 23
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 120
17409: PUSH
17410: LD_INT 106
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 26
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PPUSH
17439: LD_STRING D3b-Sol1-1
17441: PPUSH
17442: LD_STRING 
17444: PPUSH
17445: CALL 20026 0 3
17449: ST_TO_ADDR
// if gammaCommander = 3 then
17450: LD_EXP 13
17454: PUSH
17455: LD_INT 3
17457: EQUAL
17458: IFFALSE 17569
// if IsOk ( Houten ) then
17460: LD_EXP 25
17464: PPUSH
17465: CALL_OW 302
17469: IFFALSE 17491
// dialog := Say ( Houten , D3b-VanH-1 ) else
17471: LD_ADDR_VAR 0 1
17475: PUSH
17476: LD_EXP 25
17480: PPUSH
17481: LD_STRING D3b-VanH-1
17483: PPUSH
17484: CALL_OW 88
17488: ST_TO_ADDR
17489: GO 17569
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 21
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 120
17528: PUSH
17529: LD_INT 106
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 26
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PPUSH
17558: LD_STRING D3b-Sol1-1
17560: PPUSH
17561: LD_STRING 
17563: PPUSH
17564: CALL 20026 0 3
17568: ST_TO_ADDR
// if dialog then
17569: LD_VAR 0 1
17573: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-2 ) ;
17575: LD_EXP 14
17579: PPUSH
17580: LD_STRING D3b-JMM-2
17582: PPUSH
17583: CALL_OW 88
// if IsOK ( Lisa ) then
17587: LD_EXP 19
17591: PPUSH
17592: CALL_OW 302
17596: IFFALSE 17610
// Say ( Lisa , D3b-Lisa-2 ) ;
17598: LD_EXP 19
17602: PPUSH
17603: LD_STRING D3b-Lisa-2
17605: PPUSH
17606: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17610: LD_EXP 7
17614: NOT
17615: IFFALSE 17623
// begin DialogueOff ;
17617: CALL_OW 7
// exit ;
17621: GO 17835
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17623: LD_INT 22
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 23
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 120
17658: PUSH
17659: LD_INT 106
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 120
17668: PUSH
17669: LD_INT 107
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 26
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: PPUSH
17698: CALL_OW 69
17702: PPUSH
17703: LD_STRING DCa-Sol1-1
17705: PPUSH
17706: LD_STRING 
17708: PPUSH
17709: CALL 20026 0 3
17713: IFFALSE 17727
// Say ( JMM , DCb-JMM-1 ) ;
17715: LD_EXP 14
17719: PPUSH
17720: LD_STRING DCb-JMM-1
17722: PPUSH
17723: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17727: LD_INT 22
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 120
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 120
17772: PUSH
17773: LD_INT 107
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 26
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_STRING DCb-Sol1-1
17809: PPUSH
17810: LD_STRING 
17812: PPUSH
17813: CALL 20026 0 3
17817: IFFALSE 17831
// Say ( JMM , DCb-JMM-2 ) ;
17819: LD_EXP 14
17823: PPUSH
17824: LD_STRING DCb-JMM-2
17826: PPUSH
17827: CALL_OW 88
// DialogueOff ;
17831: CALL_OW 7
// end ;
17835: PPOPN 2
17837: END
// export function DialogSeenComputer ( un ) ; begin
17838: LD_INT 0
17840: PPUSH
// if jmmArrival then
17841: LD_EXP 8
17845: IFFALSE 17849
// exit ;
17847: GO 17915
// CenterOnUnits ( un ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17858: LD_INT 22
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 120
17873: PUSH
17874: LD_INT 106
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 120
17883: PUSH
17884: LD_INT 107
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PPUSH
17905: LD_STRING DC-Sol1-1
17907: PPUSH
17908: LD_STRING DC-FSol1-1
17910: PPUSH
17911: CALL 20026 0 3
// end ;
17915: LD_VAR 0 2
17919: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17920: LD_EXP 8
17924: PUSH
17925: LD_OWVAR 1
17929: PUSH
17930: LD_INT 48300
17932: GREATEREQUAL
17933: AND
17934: PUSH
17935: LD_EXP 14
17939: PPUSH
17940: CALL_OW 302
17944: AND
17945: IFFALSE 18431
17947: GO 17949
17949: DISABLE
// begin wait ( 2 2$00 ) ;
17950: LD_INT 4200
17952: PPUSH
17953: CALL_OW 67
// DialogueOn ;
17957: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17961: LD_EXP 30
17965: PPUSH
17966: LD_STRING D4-Pow-1
17968: PPUSH
17969: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17973: LD_EXP 14
17977: PPUSH
17978: LD_STRING D4-JMM-1
17980: PPUSH
17981: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17985: LD_EXP 30
17989: PPUSH
17990: LD_STRING D4-Pow-2
17992: PPUSH
17993: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17997: LD_EXP 14
18001: PPUSH
18002: LD_STRING D4-JMM-2
18004: PPUSH
18005: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18009: LD_EXP 30
18013: PPUSH
18014: LD_STRING D4-Pow-3
18016: PPUSH
18017: CALL_OW 94
// DialogueOff ;
18021: CALL_OW 7
// wait ( 1 1$00 ) ;
18025: LD_INT 2100
18027: PPUSH
18028: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 427
// wait ( 7 7$30 ) ;
18039: LD_INT 15750
18041: PPUSH
18042: CALL_OW 67
// DialogueOn ;
18046: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18050: LD_EXP 30
18054: PPUSH
18055: LD_STRING D4a-Pow-1
18057: PPUSH
18058: CALL_OW 94
// DialogueOff ;
18062: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18066: LD_INT 1
18068: PPUSH
18069: CALL_OW 427
// SikorskiCounter ;
18073: CALL 19810 0 0
// PrepareSikorsky ;
18077: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18081: LD_EXP 28
18085: PPUSH
18086: CALL_OW 87
// DialogueOn ;
18090: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18094: LD_EXP 28
18098: PPUSH
18099: LD_STRING D5-Sik-1
18101: PPUSH
18102: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18106: LD_INT 11
18108: PPUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 70
18123: PUSH
18124: LD_INT 1
18126: GREATER
18127: PUSH
18128: LD_INT 28
18130: PPUSH
18131: CALL_OW 302
18135: NOT
18136: OR
18137: PUSH
18138: LD_INT 28
18140: PPUSH
18141: CALL_OW 255
18145: PUSH
18146: LD_INT 1
18148: EQUAL
18149: OR
18150: IFFALSE 18202
// begin Say ( JMM , D5-JMM-1 ) ;
18152: LD_EXP 14
18156: PPUSH
18157: LD_STRING D5-JMM-1
18159: PPUSH
18160: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18164: LD_EXP 28
18168: PPUSH
18169: LD_STRING D7a-Sik-1
18171: PPUSH
18172: CALL_OW 88
// DialogueOff ;
18176: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18180: LD_STRING M2
18182: PPUSH
18183: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18187: LD_INT 1
18189: PPUSH
18190: CALL_OW 427
// SikorskiAttack ;
18194: CALL 7861 0 0
// exit ;
18198: GO 18431
// end else
18200: GO 18247
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18202: LD_INT 15
18204: PPUSH
18205: LD_INT 81
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 70
18219: IFFALSE 18235
// Say ( JMM , D5-JMM-1b ) else
18221: LD_EXP 14
18225: PPUSH
18226: LD_STRING D5-JMM-1b
18228: PPUSH
18229: CALL_OW 88
18233: GO 18247
// Say ( JMM , D5-JMM-1a ) ;
18235: LD_EXP 14
18239: PPUSH
18240: LD_STRING D5-JMM-1a
18242: PPUSH
18243: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18247: LD_EXP 28
18251: PPUSH
18252: LD_STRING D5-Sik-2
18254: PPUSH
18255: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18259: LD_STRING QSikorski
18261: PPUSH
18262: CALL_OW 97
18266: PUSH
18267: LD_INT 1
18269: DOUBLE
18270: EQUAL
18271: IFTRUE 18275
18273: GO 18298
18275: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18276: LD_EXP 28
18280: PPUSH
18281: LD_STRING D5a-Sik-1
18283: PPUSH
18284: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18288: LD_ADDR_EXP 4
18292: PUSH
18293: LD_INT 2100
18295: ST_TO_ADDR
// end ; 2 :
18296: GO 18385
18298: LD_INT 2
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18329
18306: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18307: LD_EXP 28
18311: PPUSH
18312: LD_STRING D5b-Sik-1
18314: PPUSH
18315: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18319: LD_ADDR_EXP 4
18323: PUSH
18324: LD_INT 10500
18326: ST_TO_ADDR
// end ; 3 :
18327: GO 18385
18329: LD_INT 3
18331: DOUBLE
18332: EQUAL
18333: IFTRUE 18337
18335: GO 18384
18337: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18338: LD_EXP 28
18342: PPUSH
18343: LD_STRING D5c-Sik-1
18345: PPUSH
18346: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18350: LD_EXP 14
18354: PPUSH
18355: LD_STRING D5c-JMM-1
18357: PPUSH
18358: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18362: LD_EXP 28
18366: PPUSH
18367: LD_STRING D5c-Sik-2
18369: PPUSH
18370: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18374: LD_ADDR_EXP 4
18378: PUSH
18379: LD_INT 10500
18381: ST_TO_ADDR
// end ; end ;
18382: GO 18385
18384: POP
// DialogueOff ;
18385: CALL_OW 7
// SikorskiWaitCounter ;
18389: CALL 19873 0 0
// DialogueOn ;
18393: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18397: LD_EXP 28
18401: PPUSH
18402: LD_STRING D6-Sik-1
18404: PPUSH
18405: CALL_OW 88
// DialogueOff ;
18409: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18413: LD_STRING M2
18415: PPUSH
18416: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 427
// SikorskiAttack ;
18427: CALL 7861 0 0
// end ;
18431: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18432: LD_INT 11
18434: PPUSH
18435: LD_INT 22
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 70
18449: PUSH
18450: LD_INT 2
18452: GREATER
18453: IFFALSE 18646
18455: GO 18457
18457: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18458: LD_EXP 28
18462: PPUSH
18463: LD_STRING D7-Sik-1
18465: PPUSH
18466: CALL_OW 88
// wait ( 0 0$10 ) ;
18470: LD_INT 350
18472: PPUSH
18473: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18477: LD_EXP 14
18481: PPUSH
18482: LD_INT 11
18484: PPUSH
18485: CALL_OW 308
18489: PUSH
18490: LD_EXP 14
18494: PPUSH
18495: CALL_OW 310
18499: PPUSH
18500: LD_INT 11
18502: PPUSH
18503: CALL_OW 308
18507: OR
18508: IFFALSE 18532
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18510: LD_EXP 28
18514: PPUSH
18515: LD_STRING D7a-Sik-1
18517: PPUSH
18518: CALL_OW 88
// sikorskiStatus := 1 ;
18522: LD_ADDR_EXP 9
18526: PUSH
18527: LD_INT 1
18529: ST_TO_ADDR
// end else
18530: GO 18552
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18532: LD_EXP 28
18536: PPUSH
18537: LD_STRING D7b-Sik-1
18539: PPUSH
18540: CALL_OW 88
// sikorskiStatus := 0 ;
18544: LD_ADDR_EXP 9
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18552: LD_INT 1575
18554: PPUSH
18555: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18559: LD_EXP 14
18563: PPUSH
18564: LD_INT 11
18566: PPUSH
18567: CALL_OW 308
18571: PUSH
18572: LD_EXP 14
18576: PPUSH
18577: CALL_OW 310
18581: PPUSH
18582: LD_INT 11
18584: PPUSH
18585: CALL_OW 308
18589: OR
18590: PUSH
18591: LD_EXP 14
18595: PPUSH
18596: CALL_OW 302
18600: NOT
18601: OR
18602: IFFALSE 18626
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18604: LD_EXP 28
18608: PPUSH
18609: LD_STRING D7a-Sik-1
18611: PPUSH
18612: CALL_OW 88
// sikorskiStatus := 1 ;
18616: LD_ADDR_EXP 9
18620: PUSH
18621: LD_INT 1
18623: ST_TO_ADDR
// end else
18624: GO 18646
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18626: LD_EXP 28
18630: PPUSH
18631: LD_STRING D7b-Sik-1
18633: PPUSH
18634: CALL_OW 88
// sikorskiStatus := 0 ;
18638: LD_ADDR_EXP 9
18642: PUSH
18643: LD_INT 0
18645: ST_TO_ADDR
// end ; end ;
18646: END
// export function SikorskiKilledInAction ; begin
18647: LD_INT 0
18649: PPUSH
// wait ( 0 0$2 ) ;
18650: LD_INT 70
18652: PPUSH
18653: CALL_OW 67
// DialogueOn ;
18657: CALL_OW 6
// dwait ( 0 0$1 ) ;
18661: LD_INT 35
18663: PPUSH
18664: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18668: LD_EXP 30
18672: PPUSH
18673: LD_STRING D8b-Pow-1
18675: PPUSH
18676: CALL_OW 94
// YouLost ( Dismissed ) ;
18680: LD_STRING Dismissed
18682: PPUSH
18683: CALL_OW 104
// DialogueOff ;
18687: CALL_OW 7
// end ;
18691: LD_VAR 0 1
18695: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18696: LD_EXP 8
18700: PUSH
18701: LD_INT 28
18703: PPUSH
18704: CALL_OW 301
18708: AND
18709: PUSH
18710: LD_EXP 32
18714: PPUSH
18715: CALL_OW 301
18719: AND
18720: PUSH
18721: LD_INT 22
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 50
18733: PUSH
18734: EMPTY
18735: LIST
18736: PUSH
18737: LD_INT 30
18739: PUSH
18740: LD_INT 5
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: PUSH
18757: LD_INT 0
18759: EQUAL
18760: AND
18761: IFFALSE 19807
18763: GO 18765
18765: DISABLE
18766: LD_INT 0
18768: PPUSH
18769: PPUSH
18770: PPUSH
// begin Video ( true ) ;
18771: LD_INT 1
18773: PPUSH
18774: CALL 77516 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18778: LD_INT 104
18780: PPUSH
18781: LD_INT 108
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_INT 36
18789: NEG
18790: PPUSH
18791: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18795: LD_INT 104
18797: PPUSH
18798: LD_INT 108
18800: PPUSH
18801: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18805: LD_ADDR_VAR 0 2
18809: PUSH
18810: LD_INT 22
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 24
18835: PUSH
18836: LD_INT 249
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: ST_TO_ADDR
// if tmp then
18857: LD_VAR 0 2
18861: IFFALSE 18892
// for i in tmp do
18863: LD_ADDR_VAR 0 1
18867: PUSH
18868: LD_VAR 0 2
18872: PUSH
18873: FOR_IN
18874: IFFALSE 18890
// SetLives ( i , 249 ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_INT 249
18883: PPUSH
18884: CALL_OW 234
18888: GO 18873
18890: POP
18891: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18892: LD_ADDR_VAR 0 1
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_INT 3
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18970
// begin ComExit ( i ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 77942 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 131
18945: PPUSH
18946: LD_INT 127
18948: PPUSH
18949: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_INT 141
18960: PPUSH
18961: LD_INT 147
18963: PPUSH
18964: CALL_OW 171
// end ;
18968: GO 18926
18970: POP
18971: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18972: LD_INT 81
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: LD_INT 21
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: PPUSH
19008: LD_INT 131
19010: PPUSH
19011: LD_INT 127
19013: PPUSH
19014: CALL_OW 174
// wait ( 0 0$08 ) ;
19018: LD_INT 280
19020: PPUSH
19021: CALL_OW 67
// DialogueOn ;
19025: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19029: LD_EXP 9
19033: PUSH
19034: LD_INT 1
19036: EQUAL
19037: PUSH
19038: LD_EXP 28
19042: PPUSH
19043: CALL_OW 302
19047: AND
19048: IFFALSE 19062
// Say ( Sikorski , D9-Sik-1 ) ;
19050: LD_EXP 28
19054: PPUSH
19055: LD_STRING D9-Sik-1
19057: PPUSH
19058: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19062: LD_INT 22
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PUSH
19077: LD_INT 0
19079: EQUAL
19080: PUSH
19081: LD_EXP 3
19085: AND
19086: IFFALSE 19095
// SetAchievement ( ACH_BLITZKRIEG ) ;
19088: LD_STRING ACH_BLITZKRIEG
19090: PPUSH
19091: CALL_OW 543
// if tick <= 45 45$10 then
19095: LD_OWVAR 1
19099: PUSH
19100: LD_INT 94850
19102: LESSEQUAL
19103: IFFALSE 19119
// begin wait ( 3 ) ;
19105: LD_INT 3
19107: PPUSH
19108: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19112: LD_STRING ACH_ASPEED_8
19114: PPUSH
19115: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19119: LD_STRING med1
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19129: LD_STRING med2
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 101
// if sikorskiStatus = 1 then
19139: LD_EXP 9
19143: PUSH
19144: LD_INT 1
19146: EQUAL
19147: IFFALSE 19161
// AddMedal ( perfect , 1 ) else
19149: LD_STRING perfect
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 101
19159: GO 19172
// AddMedal ( perfect , - 1 ) ;
19161: LD_STRING perfect
19163: PPUSH
19164: LD_INT 1
19166: NEG
19167: PPUSH
19168: CALL_OW 101
// if Difficulty >= 3 then
19172: LD_OWVAR 67
19176: PUSH
19177: LD_INT 3
19179: GREATEREQUAL
19180: IFFALSE 19192
// SetAchievementEX ( ACH_AMER , 8 ) ;
19182: LD_STRING ACH_AMER
19184: PPUSH
19185: LD_INT 8
19187: PPUSH
19188: CALL_OW 564
// GiveMedals ( Main ) ;
19192: LD_STRING Main
19194: PPUSH
19195: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19199: LD_INT 22
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 23
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: PPUSH
19239: CALL_OW 43
// prefix := 08_ ;
19243: LD_ADDR_VAR 0 3
19247: PUSH
19248: LD_STRING 08_
19250: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19251: LD_EXP 14
19255: PPUSH
19256: LD_VAR 0 3
19260: PUSH
19261: LD_STRING JMM
19263: STR
19264: PPUSH
19265: CALL_OW 38
// if IsLive ( Brown ) then
19269: LD_EXP 15
19273: PPUSH
19274: CALL_OW 300
19278: IFFALSE 19298
// SaveCharacters ( Brown , prefix & Brown ) ;
19280: LD_EXP 15
19284: PPUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_STRING Brown
19292: STR
19293: PPUSH
19294: CALL_OW 38
// if IsLive ( Donaldson ) then
19298: LD_EXP 16
19302: PPUSH
19303: CALL_OW 300
19307: IFFALSE 19327
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19309: LD_EXP 16
19313: PPUSH
19314: LD_VAR 0 3
19318: PUSH
19319: LD_STRING Donaldson
19321: STR
19322: PPUSH
19323: CALL_OW 38
// if IsLive ( Bobby ) then
19327: LD_EXP 17
19331: PPUSH
19332: CALL_OW 300
19336: IFFALSE 19356
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19338: LD_EXP 17
19342: PPUSH
19343: LD_VAR 0 3
19347: PUSH
19348: LD_STRING Bobby
19350: STR
19351: PPUSH
19352: CALL_OW 38
// if IsLive ( Cyrus ) then
19356: LD_EXP 18
19360: PPUSH
19361: CALL_OW 300
19365: IFFALSE 19385
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19367: LD_EXP 18
19371: PPUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_STRING Cyrus
19379: STR
19380: PPUSH
19381: CALL_OW 38
// if IsLive ( Lisa ) then
19385: LD_EXP 19
19389: PPUSH
19390: CALL_OW 300
19394: IFFALSE 19414
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19396: LD_EXP 19
19400: PPUSH
19401: LD_VAR 0 3
19405: PUSH
19406: LD_STRING Lisa
19408: STR
19409: PPUSH
19410: CALL_OW 38
// if IsLive ( Frank ) then
19414: LD_EXP 20
19418: PPUSH
19419: CALL_OW 300
19423: IFFALSE 19443
// SaveCharacters ( Frank , prefix & Frank ) ;
19425: LD_EXP 20
19429: PPUSH
19430: LD_VAR 0 3
19434: PUSH
19435: LD_STRING Frank
19437: STR
19438: PPUSH
19439: CALL_OW 38
// if IsLive ( Gladstone ) then
19443: LD_EXP 21
19447: PPUSH
19448: CALL_OW 300
19452: IFFALSE 19472
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19454: LD_EXP 21
19458: PPUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_STRING Gladstone
19466: STR
19467: PPUSH
19468: CALL_OW 38
// if IsLive ( Kikuchi ) then
19472: LD_EXP 22
19476: PPUSH
19477: CALL_OW 300
19481: IFFALSE 19501
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19483: LD_EXP 22
19487: PPUSH
19488: LD_VAR 0 3
19492: PUSH
19493: LD_STRING Kikuchi
19495: STR
19496: PPUSH
19497: CALL_OW 38
// if IsLive ( Denis ) then
19501: LD_EXP 26
19505: PPUSH
19506: CALL_OW 300
19510: IFFALSE 19530
// SaveCharacters ( Denis , prefix & Denis ) ;
19512: LD_EXP 26
19516: PPUSH
19517: LD_VAR 0 3
19521: PUSH
19522: LD_STRING Denis
19524: STR
19525: PPUSH
19526: CALL_OW 38
// if IsLive ( Joan ) then
19530: LD_EXP 27
19534: PPUSH
19535: CALL_OW 300
19539: IFFALSE 19561
// SaveCharacters ( Joan , prefix & Joan ) else
19541: LD_EXP 27
19545: PPUSH
19546: LD_VAR 0 3
19550: PUSH
19551: LD_STRING Joan
19553: STR
19554: PPUSH
19555: CALL_OW 38
19559: GO 19568
// DeleteCharacters ( Joan ) ;
19561: LD_STRING Joan
19563: PPUSH
19564: CALL_OW 40
// if IsLive ( Khatam ) then
19568: LD_EXP 23
19572: PPUSH
19573: CALL_OW 300
19577: IFFALSE 19597
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19579: LD_EXP 23
19583: PPUSH
19584: LD_VAR 0 3
19588: PUSH
19589: LD_STRING Khatam
19591: STR
19592: PPUSH
19593: CALL_OW 38
// if IsLive ( Houten ) then
19597: LD_EXP 25
19601: PPUSH
19602: CALL_OW 300
19606: IFFALSE 19626
// SaveCharacters ( Houten , prefix & Houten ) ;
19608: LD_EXP 25
19612: PPUSH
19613: LD_VAR 0 3
19617: PUSH
19618: LD_STRING Houten
19620: STR
19621: PPUSH
19622: CALL_OW 38
// if IsLive ( Mike ) then
19626: LD_EXP 24
19630: PPUSH
19631: CALL_OW 300
19635: IFFALSE 19655
// SaveCharacters ( Mike , prefix & Mike ) ;
19637: LD_EXP 24
19641: PPUSH
19642: LD_VAR 0 3
19646: PUSH
19647: LD_STRING Mike
19649: STR
19650: PPUSH
19651: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19655: LD_INT 22
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 21
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 23
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: PPUSH
19690: CALL_OW 69
19694: PUSH
19695: LD_EXP 14
19699: PUSH
19700: LD_EXP 15
19704: PUSH
19705: LD_EXP 16
19709: PUSH
19710: LD_EXP 17
19714: PUSH
19715: LD_EXP 18
19719: PUSH
19720: LD_EXP 19
19724: PUSH
19725: LD_EXP 20
19729: PUSH
19730: LD_EXP 21
19734: PUSH
19735: LD_EXP 22
19739: PUSH
19740: LD_EXP 26
19744: PUSH
19745: LD_EXP 27
19749: PUSH
19750: LD_EXP 25
19754: PUSH
19755: LD_EXP 23
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: DIFF
19775: PPUSH
19776: LD_STRING 08_other_survivors
19778: PPUSH
19779: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19783: LD_INT 15
19785: PPUSH
19786: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19790: LD_EXP 10
19794: NOT
19795: PPUSH
19796: LD_STRING 08_SikorskiStatus
19798: PPUSH
19799: CALL_OW 39
// YouWin ;
19803: CALL_OW 103
// end ; end_of_file
19807: PPOPN 3
19809: END
// export function SikorskiCounter ; begin
19810: LD_INT 0
19812: PPUSH
// repeat wait ( 0 0$1 ) ;
19813: LD_INT 35
19815: PPUSH
19816: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19820: LD_ADDR_OWVAR 47
19824: PUSH
19825: LD_STRING #Am08-2
19827: PUSH
19828: LD_EXP 3
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19837: LD_ADDR_EXP 3
19841: PUSH
19842: LD_EXP 3
19846: PUSH
19847: LD_INT 35
19849: MINUS
19850: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19851: LD_EXP 3
19855: PUSH
19856: LD_INT 0
19858: EQUAL
19859: IFFALSE 19813
// display_strings := [ ] ;
19861: LD_ADDR_OWVAR 47
19865: PUSH
19866: EMPTY
19867: ST_TO_ADDR
// end ;
19868: LD_VAR 0 1
19872: RET
// export function SikorskiWaitCounter ; begin
19873: LD_INT 0
19875: PPUSH
// repeat wait ( 0 0$1 ) ;
19876: LD_INT 35
19878: PPUSH
19879: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19883: LD_ADDR_OWVAR 47
19887: PUSH
19888: LD_STRING #Am08-1
19890: PUSH
19891: LD_EXP 4
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19900: LD_ADDR_EXP 4
19904: PUSH
19905: LD_EXP 4
19909: PUSH
19910: LD_INT 35
19912: MINUS
19913: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19914: LD_EXP 4
19918: PUSH
19919: LD_INT 0
19921: EQUAL
19922: IFFALSE 19876
// display_strings := [ ] ;
19924: LD_ADDR_OWVAR 47
19928: PUSH
19929: EMPTY
19930: ST_TO_ADDR
// end ; end_of_file
19931: LD_VAR 0 1
19935: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19936: LD_EXP 3
19940: IFFALSE 19980
19942: GO 19944
19944: DISABLE
// begin enable ;
19945: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19946: LD_INT 14
19948: PPUSH
19949: CALL_OW 435
19953: PUSH
19954: LD_INT 10
19956: LESS
19957: IFFALSE 19980
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19959: LD_INT 1
19961: PPUSH
19962: LD_INT 5
19964: PPUSH
19965: CALL_OW 12
19969: PPUSH
19970: LD_INT 14
19972: PPUSH
19973: LD_INT 1
19975: PPUSH
19976: CALL_OW 55
// end ;
19980: END
// every 0 0$55 trigger sikorskiArriveCounter do
19981: LD_EXP 3
19985: IFFALSE 20025
19987: GO 19989
19989: DISABLE
// begin enable ;
19990: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19991: LD_INT 13
19993: PPUSH
19994: CALL_OW 435
19998: PUSH
19999: LD_INT 10
20001: LESS
20002: IFFALSE 20025
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20004: LD_INT 1
20006: PPUSH
20007: LD_INT 5
20009: PPUSH
20010: CALL_OW 12
20014: PPUSH
20015: LD_INT 13
20017: PPUSH
20018: LD_INT 1
20020: PPUSH
20021: CALL_OW 55
// end ; end_of_file
20025: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20026: LD_INT 0
20028: PPUSH
20029: PPUSH
// if not units then
20030: LD_VAR 0 1
20034: NOT
20035: IFFALSE 20039
// exit ;
20037: GO 20164
// result := false ;
20039: LD_ADDR_VAR 0 4
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20047: LD_ADDR_VAR 0 5
20051: PUSH
20052: LD_VAR 0 1
20056: PPUSH
20057: LD_INT 26
20059: PUSH
20060: LD_INT 1
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PPUSH
20067: CALL_OW 72
20071: ST_TO_ADDR
// if tmp then
20072: LD_VAR 0 5
20076: IFFALSE 20102
// result := Say ( tmp [ 1 ] , menDialog ) ;
20078: LD_ADDR_VAR 0 4
20082: PUSH
20083: LD_VAR 0 5
20087: PUSH
20088: LD_INT 1
20090: ARRAY
20091: PPUSH
20092: LD_VAR 0 2
20096: PPUSH
20097: CALL_OW 88
20101: ST_TO_ADDR
// if not result then
20102: LD_VAR 0 4
20106: NOT
20107: IFFALSE 20164
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20109: LD_ADDR_VAR 0 5
20113: PUSH
20114: LD_VAR 0 1
20118: PPUSH
20119: LD_INT 26
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PPUSH
20129: CALL_OW 72
20133: ST_TO_ADDR
// if tmp then
20134: LD_VAR 0 5
20138: IFFALSE 20164
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20140: LD_ADDR_VAR 0 4
20144: PUSH
20145: LD_VAR 0 5
20149: PUSH
20150: LD_INT 1
20152: ARRAY
20153: PPUSH
20154: LD_VAR 0 3
20158: PPUSH
20159: CALL_OW 88
20163: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20164: LD_VAR 0 4
20168: RET
// export globalGameSaveCounter ; every 0 0$1 do
20169: GO 20171
20171: DISABLE
// begin enable ;
20172: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20173: LD_STRING updateTimer(
20175: PUSH
20176: LD_OWVAR 1
20180: STR
20181: PUSH
20182: LD_STRING );
20184: STR
20185: PPUSH
20186: CALL_OW 559
// end ;
20190: END
// every 0 0$1 do
20191: GO 20193
20193: DISABLE
// begin globalGameSaveCounter := 0 ;
20194: LD_ADDR_EXP 37
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20202: LD_STRING setGameSaveCounter(0)
20204: PPUSH
20205: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20209: LD_STRING initStreamRollete();
20211: PPUSH
20212: CALL_OW 559
// InitStreamMode ;
20216: CALL 21542 0 0
// DefineStreamItems ( false ) ;
20220: LD_INT 0
20222: PPUSH
20223: CALL 22006 0 1
// end ;
20227: END
// export function SOS_MapStart ( ) ; begin
20228: LD_INT 0
20230: PPUSH
// if streamModeActive then
20231: LD_EXP 38
20235: IFFALSE 20244
// DefineStreamItems ( true ) ;
20237: LD_INT 1
20239: PPUSH
20240: CALL 22006 0 1
// UpdateLuaVariables ( ) ;
20244: CALL 20261 0 0
// UpdateFactoryWaypoints ( ) ;
20248: CALL 34867 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20252: CALL 35124 0 0
// end ;
20256: LD_VAR 0 1
20260: RET
// function UpdateLuaVariables ( ) ; begin
20261: LD_INT 0
20263: PPUSH
// if globalGameSaveCounter then
20264: LD_EXP 37
20268: IFFALSE 20302
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20270: LD_ADDR_EXP 37
20274: PUSH
20275: LD_EXP 37
20279: PPUSH
20280: CALL 78905 0 1
20284: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20285: LD_STRING setGameSaveCounter(
20287: PUSH
20288: LD_EXP 37
20292: STR
20293: PUSH
20294: LD_STRING )
20296: STR
20297: PPUSH
20298: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20302: LD_STRING setGameDifficulty(
20304: PUSH
20305: LD_OWVAR 67
20309: STR
20310: PUSH
20311: LD_STRING )
20313: STR
20314: PPUSH
20315: CALL_OW 559
// end ;
20319: LD_VAR 0 1
20323: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20324: LD_INT 0
20326: PPUSH
// if p2 = stream_mode then
20327: LD_VAR 0 2
20331: PUSH
20332: LD_INT 100
20334: EQUAL
20335: IFFALSE 21338
// begin if not StreamModeActive then
20337: LD_EXP 38
20341: NOT
20342: IFFALSE 20352
// StreamModeActive := true ;
20344: LD_ADDR_EXP 38
20348: PUSH
20349: LD_INT 1
20351: ST_TO_ADDR
// if p3 = 0 then
20352: LD_VAR 0 3
20356: PUSH
20357: LD_INT 0
20359: EQUAL
20360: IFFALSE 20366
// InitStreamMode ;
20362: CALL 21542 0 0
// if p3 = 1 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 1
20373: EQUAL
20374: IFFALSE 20384
// sRocket := true ;
20376: LD_ADDR_EXP 43
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 2 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 2
20391: EQUAL
20392: IFFALSE 20402
// sSpeed := true ;
20394: LD_ADDR_EXP 42
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 3 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 3
20409: EQUAL
20410: IFFALSE 20420
// sEngine := true ;
20412: LD_ADDR_EXP 44
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 4 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 4
20427: EQUAL
20428: IFFALSE 20438
// sSpec := true ;
20430: LD_ADDR_EXP 41
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 5 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 5
20445: EQUAL
20446: IFFALSE 20456
// sLevel := true ;
20448: LD_ADDR_EXP 45
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 6 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 6
20463: EQUAL
20464: IFFALSE 20474
// sArmoury := true ;
20466: LD_ADDR_EXP 46
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 7 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 7
20481: EQUAL
20482: IFFALSE 20492
// sRadar := true ;
20484: LD_ADDR_EXP 47
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 8 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 8
20499: EQUAL
20500: IFFALSE 20510
// sBunker := true ;
20502: LD_ADDR_EXP 48
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 9 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 9
20517: EQUAL
20518: IFFALSE 20528
// sHack := true ;
20520: LD_ADDR_EXP 49
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 10 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 10
20535: EQUAL
20536: IFFALSE 20546
// sFire := true ;
20538: LD_ADDR_EXP 50
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 11 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 11
20553: EQUAL
20554: IFFALSE 20564
// sRefresh := true ;
20556: LD_ADDR_EXP 51
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 12 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 12
20571: EQUAL
20572: IFFALSE 20582
// sExp := true ;
20574: LD_ADDR_EXP 52
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 13 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 13
20589: EQUAL
20590: IFFALSE 20600
// sDepot := true ;
20592: LD_ADDR_EXP 53
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 14 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 14
20607: EQUAL
20608: IFFALSE 20618
// sFlag := true ;
20610: LD_ADDR_EXP 54
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// if p3 = 15 then
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 15
20625: EQUAL
20626: IFFALSE 20636
// sKamikadze := true ;
20628: LD_ADDR_EXP 62
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// if p3 = 16 then
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 16
20643: EQUAL
20644: IFFALSE 20654
// sTroll := true ;
20646: LD_ADDR_EXP 63
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if p3 = 17 then
20654: LD_VAR 0 3
20658: PUSH
20659: LD_INT 17
20661: EQUAL
20662: IFFALSE 20672
// sSlow := true ;
20664: LD_ADDR_EXP 64
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// if p3 = 18 then
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 18
20679: EQUAL
20680: IFFALSE 20690
// sLack := true ;
20682: LD_ADDR_EXP 65
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// if p3 = 19 then
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 19
20697: EQUAL
20698: IFFALSE 20708
// sTank := true ;
20700: LD_ADDR_EXP 67
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// if p3 = 20 then
20708: LD_VAR 0 3
20712: PUSH
20713: LD_INT 20
20715: EQUAL
20716: IFFALSE 20726
// sRemote := true ;
20718: LD_ADDR_EXP 68
20722: PUSH
20723: LD_INT 1
20725: ST_TO_ADDR
// if p3 = 21 then
20726: LD_VAR 0 3
20730: PUSH
20731: LD_INT 21
20733: EQUAL
20734: IFFALSE 20744
// sPowell := true ;
20736: LD_ADDR_EXP 69
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if p3 = 22 then
20744: LD_VAR 0 3
20748: PUSH
20749: LD_INT 22
20751: EQUAL
20752: IFFALSE 20762
// sTeleport := true ;
20754: LD_ADDR_EXP 72
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if p3 = 23 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 23
20769: EQUAL
20770: IFFALSE 20780
// sOilTower := true ;
20772: LD_ADDR_EXP 74
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if p3 = 24 then
20780: LD_VAR 0 3
20784: PUSH
20785: LD_INT 24
20787: EQUAL
20788: IFFALSE 20798
// sShovel := true ;
20790: LD_ADDR_EXP 75
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// if p3 = 25 then
20798: LD_VAR 0 3
20802: PUSH
20803: LD_INT 25
20805: EQUAL
20806: IFFALSE 20816
// sSheik := true ;
20808: LD_ADDR_EXP 76
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 26 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 26
20823: EQUAL
20824: IFFALSE 20834
// sEarthquake := true ;
20826: LD_ADDR_EXP 78
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 27 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 27
20841: EQUAL
20842: IFFALSE 20852
// sAI := true ;
20844: LD_ADDR_EXP 79
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// if p3 = 28 then
20852: LD_VAR 0 3
20856: PUSH
20857: LD_INT 28
20859: EQUAL
20860: IFFALSE 20870
// sCargo := true ;
20862: LD_ADDR_EXP 82
20866: PUSH
20867: LD_INT 1
20869: ST_TO_ADDR
// if p3 = 29 then
20870: LD_VAR 0 3
20874: PUSH
20875: LD_INT 29
20877: EQUAL
20878: IFFALSE 20888
// sDLaser := true ;
20880: LD_ADDR_EXP 83
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// if p3 = 30 then
20888: LD_VAR 0 3
20892: PUSH
20893: LD_INT 30
20895: EQUAL
20896: IFFALSE 20906
// sExchange := true ;
20898: LD_ADDR_EXP 84
20902: PUSH
20903: LD_INT 1
20905: ST_TO_ADDR
// if p3 = 31 then
20906: LD_VAR 0 3
20910: PUSH
20911: LD_INT 31
20913: EQUAL
20914: IFFALSE 20924
// sFac := true ;
20916: LD_ADDR_EXP 85
20920: PUSH
20921: LD_INT 1
20923: ST_TO_ADDR
// if p3 = 32 then
20924: LD_VAR 0 3
20928: PUSH
20929: LD_INT 32
20931: EQUAL
20932: IFFALSE 20942
// sPower := true ;
20934: LD_ADDR_EXP 86
20938: PUSH
20939: LD_INT 1
20941: ST_TO_ADDR
// if p3 = 33 then
20942: LD_VAR 0 3
20946: PUSH
20947: LD_INT 33
20949: EQUAL
20950: IFFALSE 20960
// sRandom := true ;
20952: LD_ADDR_EXP 87
20956: PUSH
20957: LD_INT 1
20959: ST_TO_ADDR
// if p3 = 34 then
20960: LD_VAR 0 3
20964: PUSH
20965: LD_INT 34
20967: EQUAL
20968: IFFALSE 20978
// sShield := true ;
20970: LD_ADDR_EXP 88
20974: PUSH
20975: LD_INT 1
20977: ST_TO_ADDR
// if p3 = 35 then
20978: LD_VAR 0 3
20982: PUSH
20983: LD_INT 35
20985: EQUAL
20986: IFFALSE 20996
// sTime := true ;
20988: LD_ADDR_EXP 89
20992: PUSH
20993: LD_INT 1
20995: ST_TO_ADDR
// if p3 = 36 then
20996: LD_VAR 0 3
21000: PUSH
21001: LD_INT 36
21003: EQUAL
21004: IFFALSE 21014
// sTools := true ;
21006: LD_ADDR_EXP 90
21010: PUSH
21011: LD_INT 1
21013: ST_TO_ADDR
// if p3 = 101 then
21014: LD_VAR 0 3
21018: PUSH
21019: LD_INT 101
21021: EQUAL
21022: IFFALSE 21032
// sSold := true ;
21024: LD_ADDR_EXP 55
21028: PUSH
21029: LD_INT 1
21031: ST_TO_ADDR
// if p3 = 102 then
21032: LD_VAR 0 3
21036: PUSH
21037: LD_INT 102
21039: EQUAL
21040: IFFALSE 21050
// sDiff := true ;
21042: LD_ADDR_EXP 56
21046: PUSH
21047: LD_INT 1
21049: ST_TO_ADDR
// if p3 = 103 then
21050: LD_VAR 0 3
21054: PUSH
21055: LD_INT 103
21057: EQUAL
21058: IFFALSE 21068
// sFog := true ;
21060: LD_ADDR_EXP 59
21064: PUSH
21065: LD_INT 1
21067: ST_TO_ADDR
// if p3 = 104 then
21068: LD_VAR 0 3
21072: PUSH
21073: LD_INT 104
21075: EQUAL
21076: IFFALSE 21086
// sReset := true ;
21078: LD_ADDR_EXP 60
21082: PUSH
21083: LD_INT 1
21085: ST_TO_ADDR
// if p3 = 105 then
21086: LD_VAR 0 3
21090: PUSH
21091: LD_INT 105
21093: EQUAL
21094: IFFALSE 21104
// sSun := true ;
21096: LD_ADDR_EXP 61
21100: PUSH
21101: LD_INT 1
21103: ST_TO_ADDR
// if p3 = 106 then
21104: LD_VAR 0 3
21108: PUSH
21109: LD_INT 106
21111: EQUAL
21112: IFFALSE 21122
// sTiger := true ;
21114: LD_ADDR_EXP 57
21118: PUSH
21119: LD_INT 1
21121: ST_TO_ADDR
// if p3 = 107 then
21122: LD_VAR 0 3
21126: PUSH
21127: LD_INT 107
21129: EQUAL
21130: IFFALSE 21140
// sBomb := true ;
21132: LD_ADDR_EXP 58
21136: PUSH
21137: LD_INT 1
21139: ST_TO_ADDR
// if p3 = 108 then
21140: LD_VAR 0 3
21144: PUSH
21145: LD_INT 108
21147: EQUAL
21148: IFFALSE 21158
// sWound := true ;
21150: LD_ADDR_EXP 66
21154: PUSH
21155: LD_INT 1
21157: ST_TO_ADDR
// if p3 = 109 then
21158: LD_VAR 0 3
21162: PUSH
21163: LD_INT 109
21165: EQUAL
21166: IFFALSE 21176
// sBetray := true ;
21168: LD_ADDR_EXP 70
21172: PUSH
21173: LD_INT 1
21175: ST_TO_ADDR
// if p3 = 110 then
21176: LD_VAR 0 3
21180: PUSH
21181: LD_INT 110
21183: EQUAL
21184: IFFALSE 21194
// sContamin := true ;
21186: LD_ADDR_EXP 71
21190: PUSH
21191: LD_INT 1
21193: ST_TO_ADDR
// if p3 = 111 then
21194: LD_VAR 0 3
21198: PUSH
21199: LD_INT 111
21201: EQUAL
21202: IFFALSE 21212
// sOil := true ;
21204: LD_ADDR_EXP 73
21208: PUSH
21209: LD_INT 1
21211: ST_TO_ADDR
// if p3 = 112 then
21212: LD_VAR 0 3
21216: PUSH
21217: LD_INT 112
21219: EQUAL
21220: IFFALSE 21230
// sStu := true ;
21222: LD_ADDR_EXP 77
21226: PUSH
21227: LD_INT 1
21229: ST_TO_ADDR
// if p3 = 113 then
21230: LD_VAR 0 3
21234: PUSH
21235: LD_INT 113
21237: EQUAL
21238: IFFALSE 21248
// sBazooka := true ;
21240: LD_ADDR_EXP 80
21244: PUSH
21245: LD_INT 1
21247: ST_TO_ADDR
// if p3 = 114 then
21248: LD_VAR 0 3
21252: PUSH
21253: LD_INT 114
21255: EQUAL
21256: IFFALSE 21266
// sMortar := true ;
21258: LD_ADDR_EXP 81
21262: PUSH
21263: LD_INT 1
21265: ST_TO_ADDR
// if p3 = 115 then
21266: LD_VAR 0 3
21270: PUSH
21271: LD_INT 115
21273: EQUAL
21274: IFFALSE 21284
// sRanger := true ;
21276: LD_ADDR_EXP 91
21280: PUSH
21281: LD_INT 1
21283: ST_TO_ADDR
// if p3 = 116 then
21284: LD_VAR 0 3
21288: PUSH
21289: LD_INT 116
21291: EQUAL
21292: IFFALSE 21302
// sComputer := true ;
21294: LD_ADDR_EXP 92
21298: PUSH
21299: LD_INT 1
21301: ST_TO_ADDR
// if p3 = 117 then
21302: LD_VAR 0 3
21306: PUSH
21307: LD_INT 117
21309: EQUAL
21310: IFFALSE 21320
// s30 := true ;
21312: LD_ADDR_EXP 93
21316: PUSH
21317: LD_INT 1
21319: ST_TO_ADDR
// if p3 = 118 then
21320: LD_VAR 0 3
21324: PUSH
21325: LD_INT 118
21327: EQUAL
21328: IFFALSE 21338
// s60 := true ;
21330: LD_ADDR_EXP 94
21334: PUSH
21335: LD_INT 1
21337: ST_TO_ADDR
// end ; if p2 = hack_mode then
21338: LD_VAR 0 2
21342: PUSH
21343: LD_INT 101
21345: EQUAL
21346: IFFALSE 21474
// begin case p3 of 1 :
21348: LD_VAR 0 3
21352: PUSH
21353: LD_INT 1
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21368
21361: POP
// hHackUnlimitedResources ; 2 :
21362: CALL 33613 0 0
21366: GO 21474
21368: LD_INT 2
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21383
21376: POP
// hHackSetLevel10 ; 3 :
21377: CALL 33746 0 0
21381: GO 21474
21383: LD_INT 3
21385: DOUBLE
21386: EQUAL
21387: IFTRUE 21391
21389: GO 21398
21391: POP
// hHackSetLevel10YourUnits ; 4 :
21392: CALL 33831 0 0
21396: GO 21474
21398: LD_INT 4
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21413
21406: POP
// hHackInvincible ; 5 :
21407: CALL 34279 0 0
21411: GO 21474
21413: LD_INT 5
21415: DOUBLE
21416: EQUAL
21417: IFTRUE 21421
21419: GO 21428
21421: POP
// hHackInvisible ; 6 :
21422: CALL 34390 0 0
21426: GO 21474
21428: LD_INT 6
21430: DOUBLE
21431: EQUAL
21432: IFTRUE 21436
21434: GO 21443
21436: POP
// hHackChangeYourSide ; 7 :
21437: CALL 34447 0 0
21441: GO 21474
21443: LD_INT 7
21445: DOUBLE
21446: EQUAL
21447: IFTRUE 21451
21449: GO 21458
21451: POP
// hHackChangeUnitSide ; 8 :
21452: CALL 34489 0 0
21456: GO 21474
21458: LD_INT 8
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21473
21466: POP
// hHackFog ; end ;
21467: CALL 34590 0 0
21471: GO 21474
21473: POP
// end ; if p2 = game_save_mode then
21474: LD_VAR 0 2
21478: PUSH
21479: LD_INT 102
21481: EQUAL
21482: IFFALSE 21537
// begin if p3 = 1 then
21484: LD_VAR 0 3
21488: PUSH
21489: LD_INT 1
21491: EQUAL
21492: IFFALSE 21504
// globalGameSaveCounter := p4 ;
21494: LD_ADDR_EXP 37
21498: PUSH
21499: LD_VAR 0 4
21503: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21504: LD_VAR 0 3
21508: PUSH
21509: LD_INT 2
21511: EQUAL
21512: PUSH
21513: LD_EXP 37
21517: AND
21518: IFFALSE 21537
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21520: LD_STRING setGameSaveCounter(
21522: PUSH
21523: LD_EXP 37
21527: STR
21528: PUSH
21529: LD_STRING )
21531: STR
21532: PPUSH
21533: CALL_OW 559
// end ; end ;
21537: LD_VAR 0 7
21541: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21542: LD_INT 0
21544: PPUSH
// streamModeActive := false ;
21545: LD_ADDR_EXP 38
21549: PUSH
21550: LD_INT 0
21552: ST_TO_ADDR
// normalCounter := 36 ;
21553: LD_ADDR_EXP 39
21557: PUSH
21558: LD_INT 36
21560: ST_TO_ADDR
// hardcoreCounter := 18 ;
21561: LD_ADDR_EXP 40
21565: PUSH
21566: LD_INT 18
21568: ST_TO_ADDR
// sRocket := false ;
21569: LD_ADDR_EXP 43
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
// sSpeed := false ;
21577: LD_ADDR_EXP 42
21581: PUSH
21582: LD_INT 0
21584: ST_TO_ADDR
// sEngine := false ;
21585: LD_ADDR_EXP 44
21589: PUSH
21590: LD_INT 0
21592: ST_TO_ADDR
// sSpec := false ;
21593: LD_ADDR_EXP 41
21597: PUSH
21598: LD_INT 0
21600: ST_TO_ADDR
// sLevel := false ;
21601: LD_ADDR_EXP 45
21605: PUSH
21606: LD_INT 0
21608: ST_TO_ADDR
// sArmoury := false ;
21609: LD_ADDR_EXP 46
21613: PUSH
21614: LD_INT 0
21616: ST_TO_ADDR
// sRadar := false ;
21617: LD_ADDR_EXP 47
21621: PUSH
21622: LD_INT 0
21624: ST_TO_ADDR
// sBunker := false ;
21625: LD_ADDR_EXP 48
21629: PUSH
21630: LD_INT 0
21632: ST_TO_ADDR
// sHack := false ;
21633: LD_ADDR_EXP 49
21637: PUSH
21638: LD_INT 0
21640: ST_TO_ADDR
// sFire := false ;
21641: LD_ADDR_EXP 50
21645: PUSH
21646: LD_INT 0
21648: ST_TO_ADDR
// sRefresh := false ;
21649: LD_ADDR_EXP 51
21653: PUSH
21654: LD_INT 0
21656: ST_TO_ADDR
// sExp := false ;
21657: LD_ADDR_EXP 52
21661: PUSH
21662: LD_INT 0
21664: ST_TO_ADDR
// sDepot := false ;
21665: LD_ADDR_EXP 53
21669: PUSH
21670: LD_INT 0
21672: ST_TO_ADDR
// sFlag := false ;
21673: LD_ADDR_EXP 54
21677: PUSH
21678: LD_INT 0
21680: ST_TO_ADDR
// sKamikadze := false ;
21681: LD_ADDR_EXP 62
21685: PUSH
21686: LD_INT 0
21688: ST_TO_ADDR
// sTroll := false ;
21689: LD_ADDR_EXP 63
21693: PUSH
21694: LD_INT 0
21696: ST_TO_ADDR
// sSlow := false ;
21697: LD_ADDR_EXP 64
21701: PUSH
21702: LD_INT 0
21704: ST_TO_ADDR
// sLack := false ;
21705: LD_ADDR_EXP 65
21709: PUSH
21710: LD_INT 0
21712: ST_TO_ADDR
// sTank := false ;
21713: LD_ADDR_EXP 67
21717: PUSH
21718: LD_INT 0
21720: ST_TO_ADDR
// sRemote := false ;
21721: LD_ADDR_EXP 68
21725: PUSH
21726: LD_INT 0
21728: ST_TO_ADDR
// sPowell := false ;
21729: LD_ADDR_EXP 69
21733: PUSH
21734: LD_INT 0
21736: ST_TO_ADDR
// sTeleport := false ;
21737: LD_ADDR_EXP 72
21741: PUSH
21742: LD_INT 0
21744: ST_TO_ADDR
// sOilTower := false ;
21745: LD_ADDR_EXP 74
21749: PUSH
21750: LD_INT 0
21752: ST_TO_ADDR
// sShovel := false ;
21753: LD_ADDR_EXP 75
21757: PUSH
21758: LD_INT 0
21760: ST_TO_ADDR
// sSheik := false ;
21761: LD_ADDR_EXP 76
21765: PUSH
21766: LD_INT 0
21768: ST_TO_ADDR
// sEarthquake := false ;
21769: LD_ADDR_EXP 78
21773: PUSH
21774: LD_INT 0
21776: ST_TO_ADDR
// sAI := false ;
21777: LD_ADDR_EXP 79
21781: PUSH
21782: LD_INT 0
21784: ST_TO_ADDR
// sCargo := false ;
21785: LD_ADDR_EXP 82
21789: PUSH
21790: LD_INT 0
21792: ST_TO_ADDR
// sDLaser := false ;
21793: LD_ADDR_EXP 83
21797: PUSH
21798: LD_INT 0
21800: ST_TO_ADDR
// sExchange := false ;
21801: LD_ADDR_EXP 84
21805: PUSH
21806: LD_INT 0
21808: ST_TO_ADDR
// sFac := false ;
21809: LD_ADDR_EXP 85
21813: PUSH
21814: LD_INT 0
21816: ST_TO_ADDR
// sPower := false ;
21817: LD_ADDR_EXP 86
21821: PUSH
21822: LD_INT 0
21824: ST_TO_ADDR
// sRandom := false ;
21825: LD_ADDR_EXP 87
21829: PUSH
21830: LD_INT 0
21832: ST_TO_ADDR
// sShield := false ;
21833: LD_ADDR_EXP 88
21837: PUSH
21838: LD_INT 0
21840: ST_TO_ADDR
// sTime := false ;
21841: LD_ADDR_EXP 89
21845: PUSH
21846: LD_INT 0
21848: ST_TO_ADDR
// sTools := false ;
21849: LD_ADDR_EXP 90
21853: PUSH
21854: LD_INT 0
21856: ST_TO_ADDR
// sSold := false ;
21857: LD_ADDR_EXP 55
21861: PUSH
21862: LD_INT 0
21864: ST_TO_ADDR
// sDiff := false ;
21865: LD_ADDR_EXP 56
21869: PUSH
21870: LD_INT 0
21872: ST_TO_ADDR
// sFog := false ;
21873: LD_ADDR_EXP 59
21877: PUSH
21878: LD_INT 0
21880: ST_TO_ADDR
// sReset := false ;
21881: LD_ADDR_EXP 60
21885: PUSH
21886: LD_INT 0
21888: ST_TO_ADDR
// sSun := false ;
21889: LD_ADDR_EXP 61
21893: PUSH
21894: LD_INT 0
21896: ST_TO_ADDR
// sTiger := false ;
21897: LD_ADDR_EXP 57
21901: PUSH
21902: LD_INT 0
21904: ST_TO_ADDR
// sBomb := false ;
21905: LD_ADDR_EXP 58
21909: PUSH
21910: LD_INT 0
21912: ST_TO_ADDR
// sWound := false ;
21913: LD_ADDR_EXP 66
21917: PUSH
21918: LD_INT 0
21920: ST_TO_ADDR
// sBetray := false ;
21921: LD_ADDR_EXP 70
21925: PUSH
21926: LD_INT 0
21928: ST_TO_ADDR
// sContamin := false ;
21929: LD_ADDR_EXP 71
21933: PUSH
21934: LD_INT 0
21936: ST_TO_ADDR
// sOil := false ;
21937: LD_ADDR_EXP 73
21941: PUSH
21942: LD_INT 0
21944: ST_TO_ADDR
// sStu := false ;
21945: LD_ADDR_EXP 77
21949: PUSH
21950: LD_INT 0
21952: ST_TO_ADDR
// sBazooka := false ;
21953: LD_ADDR_EXP 80
21957: PUSH
21958: LD_INT 0
21960: ST_TO_ADDR
// sMortar := false ;
21961: LD_ADDR_EXP 81
21965: PUSH
21966: LD_INT 0
21968: ST_TO_ADDR
// sRanger := false ;
21969: LD_ADDR_EXP 91
21973: PUSH
21974: LD_INT 0
21976: ST_TO_ADDR
// sComputer := false ;
21977: LD_ADDR_EXP 92
21981: PUSH
21982: LD_INT 0
21984: ST_TO_ADDR
// s30 := false ;
21985: LD_ADDR_EXP 93
21989: PUSH
21990: LD_INT 0
21992: ST_TO_ADDR
// s60 := false ;
21993: LD_ADDR_EXP 94
21997: PUSH
21998: LD_INT 0
22000: ST_TO_ADDR
// end ;
22001: LD_VAR 0 1
22005: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22006: LD_INT 0
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
22012: PPUSH
22013: PPUSH
22014: PPUSH
// result := [ ] ;
22015: LD_ADDR_VAR 0 2
22019: PUSH
22020: EMPTY
22021: ST_TO_ADDR
// if campaign_id = 1 then
22022: LD_OWVAR 69
22026: PUSH
22027: LD_INT 1
22029: EQUAL
22030: IFFALSE 25196
// begin case mission_number of 1 :
22032: LD_OWVAR 70
22036: PUSH
22037: LD_INT 1
22039: DOUBLE
22040: EQUAL
22041: IFTRUE 22045
22043: GO 22121
22045: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_INT 2
22053: PUSH
22054: LD_INT 4
22056: PUSH
22057: LD_INT 11
22059: PUSH
22060: LD_INT 12
22062: PUSH
22063: LD_INT 15
22065: PUSH
22066: LD_INT 16
22068: PUSH
22069: LD_INT 22
22071: PUSH
22072: LD_INT 23
22074: PUSH
22075: LD_INT 26
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 101
22091: PUSH
22092: LD_INT 102
22094: PUSH
22095: LD_INT 106
22097: PUSH
22098: LD_INT 116
22100: PUSH
22101: LD_INT 117
22103: PUSH
22104: LD_INT 118
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: ST_TO_ADDR
22119: GO 25194
22121: LD_INT 2
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22213
22129: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: LD_INT 11
22143: PUSH
22144: LD_INT 12
22146: PUSH
22147: LD_INT 15
22149: PUSH
22150: LD_INT 16
22152: PUSH
22153: LD_INT 22
22155: PUSH
22156: LD_INT 23
22158: PUSH
22159: LD_INT 26
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 101
22175: PUSH
22176: LD_INT 102
22178: PUSH
22179: LD_INT 105
22181: PUSH
22182: LD_INT 106
22184: PUSH
22185: LD_INT 108
22187: PUSH
22188: LD_INT 116
22190: PUSH
22191: LD_INT 117
22193: PUSH
22194: LD_INT 118
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: ST_TO_ADDR
22211: GO 25194
22213: LD_INT 3
22215: DOUBLE
22216: EQUAL
22217: IFTRUE 22221
22219: GO 22309
22221: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22222: LD_ADDR_VAR 0 2
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: LD_INT 4
22232: PUSH
22233: LD_INT 5
22235: PUSH
22236: LD_INT 11
22238: PUSH
22239: LD_INT 12
22241: PUSH
22242: LD_INT 15
22244: PUSH
22245: LD_INT 16
22247: PUSH
22248: LD_INT 22
22250: PUSH
22251: LD_INT 26
22253: PUSH
22254: LD_INT 36
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 101
22271: PUSH
22272: LD_INT 102
22274: PUSH
22275: LD_INT 105
22277: PUSH
22278: LD_INT 106
22280: PUSH
22281: LD_INT 108
22283: PUSH
22284: LD_INT 116
22286: PUSH
22287: LD_INT 117
22289: PUSH
22290: LD_INT 118
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: ST_TO_ADDR
22307: GO 25194
22309: LD_INT 4
22311: DOUBLE
22312: EQUAL
22313: IFTRUE 22317
22315: GO 22413
22317: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22318: LD_ADDR_VAR 0 2
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: LD_INT 4
22328: PUSH
22329: LD_INT 5
22331: PUSH
22332: LD_INT 8
22334: PUSH
22335: LD_INT 11
22337: PUSH
22338: LD_INT 12
22340: PUSH
22341: LD_INT 15
22343: PUSH
22344: LD_INT 16
22346: PUSH
22347: LD_INT 22
22349: PUSH
22350: LD_INT 23
22352: PUSH
22353: LD_INT 26
22355: PUSH
22356: LD_INT 36
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 101
22375: PUSH
22376: LD_INT 102
22378: PUSH
22379: LD_INT 105
22381: PUSH
22382: LD_INT 106
22384: PUSH
22385: LD_INT 108
22387: PUSH
22388: LD_INT 116
22390: PUSH
22391: LD_INT 117
22393: PUSH
22394: LD_INT 118
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: ST_TO_ADDR
22411: GO 25194
22413: LD_INT 5
22415: DOUBLE
22416: EQUAL
22417: IFTRUE 22421
22419: GO 22533
22421: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22422: LD_ADDR_VAR 0 2
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: LD_INT 4
22432: PUSH
22433: LD_INT 5
22435: PUSH
22436: LD_INT 6
22438: PUSH
22439: LD_INT 8
22441: PUSH
22442: LD_INT 11
22444: PUSH
22445: LD_INT 12
22447: PUSH
22448: LD_INT 15
22450: PUSH
22451: LD_INT 16
22453: PUSH
22454: LD_INT 22
22456: PUSH
22457: LD_INT 23
22459: PUSH
22460: LD_INT 25
22462: PUSH
22463: LD_INT 26
22465: PUSH
22466: LD_INT 36
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 101
22487: PUSH
22488: LD_INT 102
22490: PUSH
22491: LD_INT 105
22493: PUSH
22494: LD_INT 106
22496: PUSH
22497: LD_INT 108
22499: PUSH
22500: LD_INT 109
22502: PUSH
22503: LD_INT 112
22505: PUSH
22506: LD_INT 116
22508: PUSH
22509: LD_INT 117
22511: PUSH
22512: LD_INT 118
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 25194
22533: LD_INT 6
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22673
22541: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 4
22552: PUSH
22553: LD_INT 5
22555: PUSH
22556: LD_INT 6
22558: PUSH
22559: LD_INT 8
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 12
22567: PUSH
22568: LD_INT 15
22570: PUSH
22571: LD_INT 16
22573: PUSH
22574: LD_INT 20
22576: PUSH
22577: LD_INT 21
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 23
22585: PUSH
22586: LD_INT 25
22588: PUSH
22589: LD_INT 26
22591: PUSH
22592: LD_INT 30
22594: PUSH
22595: LD_INT 31
22597: PUSH
22598: LD_INT 32
22600: PUSH
22601: LD_INT 36
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 101
22627: PUSH
22628: LD_INT 102
22630: PUSH
22631: LD_INT 105
22633: PUSH
22634: LD_INT 106
22636: PUSH
22637: LD_INT 108
22639: PUSH
22640: LD_INT 109
22642: PUSH
22643: LD_INT 112
22645: PUSH
22646: LD_INT 116
22648: PUSH
22649: LD_INT 117
22651: PUSH
22652: LD_INT 118
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: ST_TO_ADDR
22671: GO 25194
22673: LD_INT 7
22675: DOUBLE
22676: EQUAL
22677: IFTRUE 22681
22679: GO 22793
22681: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22682: LD_ADDR_VAR 0 2
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 4
22692: PUSH
22693: LD_INT 5
22695: PUSH
22696: LD_INT 7
22698: PUSH
22699: LD_INT 11
22701: PUSH
22702: LD_INT 12
22704: PUSH
22705: LD_INT 15
22707: PUSH
22708: LD_INT 16
22710: PUSH
22711: LD_INT 20
22713: PUSH
22714: LD_INT 21
22716: PUSH
22717: LD_INT 22
22719: PUSH
22720: LD_INT 23
22722: PUSH
22723: LD_INT 25
22725: PUSH
22726: LD_INT 26
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 101
22747: PUSH
22748: LD_INT 102
22750: PUSH
22751: LD_INT 103
22753: PUSH
22754: LD_INT 105
22756: PUSH
22757: LD_INT 106
22759: PUSH
22760: LD_INT 108
22762: PUSH
22763: LD_INT 112
22765: PUSH
22766: LD_INT 116
22768: PUSH
22769: LD_INT 117
22771: PUSH
22772: LD_INT 118
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: ST_TO_ADDR
22791: GO 25194
22793: LD_INT 8
22795: DOUBLE
22796: EQUAL
22797: IFTRUE 22801
22799: GO 22941
22801: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22802: LD_ADDR_VAR 0 2
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: LD_INT 6
22818: PUSH
22819: LD_INT 7
22821: PUSH
22822: LD_INT 8
22824: PUSH
22825: LD_INT 11
22827: PUSH
22828: LD_INT 12
22830: PUSH
22831: LD_INT 15
22833: PUSH
22834: LD_INT 16
22836: PUSH
22837: LD_INT 20
22839: PUSH
22840: LD_INT 21
22842: PUSH
22843: LD_INT 22
22845: PUSH
22846: LD_INT 23
22848: PUSH
22849: LD_INT 25
22851: PUSH
22852: LD_INT 26
22854: PUSH
22855: LD_INT 30
22857: PUSH
22858: LD_INT 31
22860: PUSH
22861: LD_INT 32
22863: PUSH
22864: LD_INT 36
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 101
22891: PUSH
22892: LD_INT 102
22894: PUSH
22895: LD_INT 103
22897: PUSH
22898: LD_INT 105
22900: PUSH
22901: LD_INT 106
22903: PUSH
22904: LD_INT 108
22906: PUSH
22907: LD_INT 109
22909: PUSH
22910: LD_INT 112
22912: PUSH
22913: LD_INT 116
22915: PUSH
22916: LD_INT 117
22918: PUSH
22919: LD_INT 118
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: ST_TO_ADDR
22939: GO 25194
22941: LD_INT 9
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 23097
22949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22950: LD_ADDR_VAR 0 2
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 4
22960: PUSH
22961: LD_INT 5
22963: PUSH
22964: LD_INT 6
22966: PUSH
22967: LD_INT 7
22969: PUSH
22970: LD_INT 8
22972: PUSH
22973: LD_INT 11
22975: PUSH
22976: LD_INT 12
22978: PUSH
22979: LD_INT 15
22981: PUSH
22982: LD_INT 16
22984: PUSH
22985: LD_INT 20
22987: PUSH
22988: LD_INT 21
22990: PUSH
22991: LD_INT 22
22993: PUSH
22994: LD_INT 23
22996: PUSH
22997: LD_INT 25
22999: PUSH
23000: LD_INT 26
23002: PUSH
23003: LD_INT 28
23005: PUSH
23006: LD_INT 30
23008: PUSH
23009: LD_INT 31
23011: PUSH
23012: LD_INT 32
23014: PUSH
23015: LD_INT 36
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 101
23043: PUSH
23044: LD_INT 102
23046: PUSH
23047: LD_INT 103
23049: PUSH
23050: LD_INT 105
23052: PUSH
23053: LD_INT 106
23055: PUSH
23056: LD_INT 108
23058: PUSH
23059: LD_INT 109
23061: PUSH
23062: LD_INT 112
23064: PUSH
23065: LD_INT 114
23067: PUSH
23068: LD_INT 116
23070: PUSH
23071: LD_INT 117
23073: PUSH
23074: LD_INT 118
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: ST_TO_ADDR
23095: GO 25194
23097: LD_INT 10
23099: DOUBLE
23100: EQUAL
23101: IFTRUE 23105
23103: GO 23301
23105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23106: LD_ADDR_VAR 0 2
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: LD_INT 4
23116: PUSH
23117: LD_INT 5
23119: PUSH
23120: LD_INT 6
23122: PUSH
23123: LD_INT 7
23125: PUSH
23126: LD_INT 8
23128: PUSH
23129: LD_INT 9
23131: PUSH
23132: LD_INT 10
23134: PUSH
23135: LD_INT 11
23137: PUSH
23138: LD_INT 12
23140: PUSH
23141: LD_INT 13
23143: PUSH
23144: LD_INT 14
23146: PUSH
23147: LD_INT 15
23149: PUSH
23150: LD_INT 16
23152: PUSH
23153: LD_INT 17
23155: PUSH
23156: LD_INT 18
23158: PUSH
23159: LD_INT 19
23161: PUSH
23162: LD_INT 20
23164: PUSH
23165: LD_INT 21
23167: PUSH
23168: LD_INT 22
23170: PUSH
23171: LD_INT 23
23173: PUSH
23174: LD_INT 24
23176: PUSH
23177: LD_INT 25
23179: PUSH
23180: LD_INT 26
23182: PUSH
23183: LD_INT 28
23185: PUSH
23186: LD_INT 30
23188: PUSH
23189: LD_INT 31
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: LD_INT 36
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 101
23231: PUSH
23232: LD_INT 102
23234: PUSH
23235: LD_INT 103
23237: PUSH
23238: LD_INT 104
23240: PUSH
23241: LD_INT 105
23243: PUSH
23244: LD_INT 106
23246: PUSH
23247: LD_INT 107
23249: PUSH
23250: LD_INT 108
23252: PUSH
23253: LD_INT 109
23255: PUSH
23256: LD_INT 110
23258: PUSH
23259: LD_INT 111
23261: PUSH
23262: LD_INT 112
23264: PUSH
23265: LD_INT 114
23267: PUSH
23268: LD_INT 116
23270: PUSH
23271: LD_INT 117
23273: PUSH
23274: LD_INT 118
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: ST_TO_ADDR
23299: GO 25194
23301: LD_INT 11
23303: DOUBLE
23304: EQUAL
23305: IFTRUE 23309
23307: GO 23513
23309: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23310: LD_ADDR_VAR 0 2
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: LD_INT 4
23323: PUSH
23324: LD_INT 5
23326: PUSH
23327: LD_INT 6
23329: PUSH
23330: LD_INT 7
23332: PUSH
23333: LD_INT 8
23335: PUSH
23336: LD_INT 9
23338: PUSH
23339: LD_INT 10
23341: PUSH
23342: LD_INT 11
23344: PUSH
23345: LD_INT 12
23347: PUSH
23348: LD_INT 13
23350: PUSH
23351: LD_INT 14
23353: PUSH
23354: LD_INT 15
23356: PUSH
23357: LD_INT 16
23359: PUSH
23360: LD_INT 17
23362: PUSH
23363: LD_INT 18
23365: PUSH
23366: LD_INT 19
23368: PUSH
23369: LD_INT 20
23371: PUSH
23372: LD_INT 21
23374: PUSH
23375: LD_INT 22
23377: PUSH
23378: LD_INT 23
23380: PUSH
23381: LD_INT 24
23383: PUSH
23384: LD_INT 25
23386: PUSH
23387: LD_INT 26
23389: PUSH
23390: LD_INT 28
23392: PUSH
23393: LD_INT 30
23395: PUSH
23396: LD_INT 31
23398: PUSH
23399: LD_INT 32
23401: PUSH
23402: LD_INT 34
23404: PUSH
23405: LD_INT 36
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 101
23443: PUSH
23444: LD_INT 102
23446: PUSH
23447: LD_INT 103
23449: PUSH
23450: LD_INT 104
23452: PUSH
23453: LD_INT 105
23455: PUSH
23456: LD_INT 106
23458: PUSH
23459: LD_INT 107
23461: PUSH
23462: LD_INT 108
23464: PUSH
23465: LD_INT 109
23467: PUSH
23468: LD_INT 110
23470: PUSH
23471: LD_INT 111
23473: PUSH
23474: LD_INT 112
23476: PUSH
23477: LD_INT 114
23479: PUSH
23480: LD_INT 116
23482: PUSH
23483: LD_INT 117
23485: PUSH
23486: LD_INT 118
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: ST_TO_ADDR
23511: GO 25194
23513: LD_INT 12
23515: DOUBLE
23516: EQUAL
23517: IFTRUE 23521
23519: GO 23741
23521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23522: LD_ADDR_VAR 0 2
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 3
23535: PUSH
23536: LD_INT 4
23538: PUSH
23539: LD_INT 5
23541: PUSH
23542: LD_INT 6
23544: PUSH
23545: LD_INT 7
23547: PUSH
23548: LD_INT 8
23550: PUSH
23551: LD_INT 9
23553: PUSH
23554: LD_INT 10
23556: PUSH
23557: LD_INT 11
23559: PUSH
23560: LD_INT 12
23562: PUSH
23563: LD_INT 13
23565: PUSH
23566: LD_INT 14
23568: PUSH
23569: LD_INT 15
23571: PUSH
23572: LD_INT 16
23574: PUSH
23575: LD_INT 17
23577: PUSH
23578: LD_INT 18
23580: PUSH
23581: LD_INT 19
23583: PUSH
23584: LD_INT 20
23586: PUSH
23587: LD_INT 21
23589: PUSH
23590: LD_INT 22
23592: PUSH
23593: LD_INT 23
23595: PUSH
23596: LD_INT 24
23598: PUSH
23599: LD_INT 25
23601: PUSH
23602: LD_INT 26
23604: PUSH
23605: LD_INT 27
23607: PUSH
23608: LD_INT 28
23610: PUSH
23611: LD_INT 30
23613: PUSH
23614: LD_INT 31
23616: PUSH
23617: LD_INT 32
23619: PUSH
23620: LD_INT 33
23622: PUSH
23623: LD_INT 34
23625: PUSH
23626: LD_INT 36
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 101
23667: PUSH
23668: LD_INT 102
23670: PUSH
23671: LD_INT 103
23673: PUSH
23674: LD_INT 104
23676: PUSH
23677: LD_INT 105
23679: PUSH
23680: LD_INT 106
23682: PUSH
23683: LD_INT 107
23685: PUSH
23686: LD_INT 108
23688: PUSH
23689: LD_INT 109
23691: PUSH
23692: LD_INT 110
23694: PUSH
23695: LD_INT 111
23697: PUSH
23698: LD_INT 112
23700: PUSH
23701: LD_INT 113
23703: PUSH
23704: LD_INT 114
23706: PUSH
23707: LD_INT 116
23709: PUSH
23710: LD_INT 117
23712: PUSH
23713: LD_INT 118
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: ST_TO_ADDR
23739: GO 25194
23741: LD_INT 13
23743: DOUBLE
23744: EQUAL
23745: IFTRUE 23749
23747: GO 23957
23749: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23750: LD_ADDR_VAR 0 2
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: LD_INT 4
23766: PUSH
23767: LD_INT 5
23769: PUSH
23770: LD_INT 8
23772: PUSH
23773: LD_INT 9
23775: PUSH
23776: LD_INT 10
23778: PUSH
23779: LD_INT 11
23781: PUSH
23782: LD_INT 12
23784: PUSH
23785: LD_INT 14
23787: PUSH
23788: LD_INT 15
23790: PUSH
23791: LD_INT 16
23793: PUSH
23794: LD_INT 17
23796: PUSH
23797: LD_INT 18
23799: PUSH
23800: LD_INT 19
23802: PUSH
23803: LD_INT 20
23805: PUSH
23806: LD_INT 21
23808: PUSH
23809: LD_INT 22
23811: PUSH
23812: LD_INT 23
23814: PUSH
23815: LD_INT 24
23817: PUSH
23818: LD_INT 25
23820: PUSH
23821: LD_INT 26
23823: PUSH
23824: LD_INT 27
23826: PUSH
23827: LD_INT 28
23829: PUSH
23830: LD_INT 30
23832: PUSH
23833: LD_INT 31
23835: PUSH
23836: LD_INT 32
23838: PUSH
23839: LD_INT 33
23841: PUSH
23842: LD_INT 34
23844: PUSH
23845: LD_INT 36
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 101
23883: PUSH
23884: LD_INT 102
23886: PUSH
23887: LD_INT 103
23889: PUSH
23890: LD_INT 104
23892: PUSH
23893: LD_INT 105
23895: PUSH
23896: LD_INT 106
23898: PUSH
23899: LD_INT 107
23901: PUSH
23902: LD_INT 108
23904: PUSH
23905: LD_INT 109
23907: PUSH
23908: LD_INT 110
23910: PUSH
23911: LD_INT 111
23913: PUSH
23914: LD_INT 112
23916: PUSH
23917: LD_INT 113
23919: PUSH
23920: LD_INT 114
23922: PUSH
23923: LD_INT 116
23925: PUSH
23926: LD_INT 117
23928: PUSH
23929: LD_INT 118
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: ST_TO_ADDR
23955: GO 25194
23957: LD_INT 14
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 24189
23965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23966: LD_ADDR_VAR 0 2
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: LD_INT 4
23982: PUSH
23983: LD_INT 5
23985: PUSH
23986: LD_INT 6
23988: PUSH
23989: LD_INT 7
23991: PUSH
23992: LD_INT 8
23994: PUSH
23995: LD_INT 9
23997: PUSH
23998: LD_INT 10
24000: PUSH
24001: LD_INT 11
24003: PUSH
24004: LD_INT 12
24006: PUSH
24007: LD_INT 13
24009: PUSH
24010: LD_INT 14
24012: PUSH
24013: LD_INT 15
24015: PUSH
24016: LD_INT 16
24018: PUSH
24019: LD_INT 17
24021: PUSH
24022: LD_INT 18
24024: PUSH
24025: LD_INT 19
24027: PUSH
24028: LD_INT 20
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: LD_INT 22
24036: PUSH
24037: LD_INT 23
24039: PUSH
24040: LD_INT 24
24042: PUSH
24043: LD_INT 25
24045: PUSH
24046: LD_INT 26
24048: PUSH
24049: LD_INT 27
24051: PUSH
24052: LD_INT 28
24054: PUSH
24055: LD_INT 29
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 31
24063: PUSH
24064: LD_INT 32
24066: PUSH
24067: LD_INT 33
24069: PUSH
24070: LD_INT 34
24072: PUSH
24073: LD_INT 36
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 101
24115: PUSH
24116: LD_INT 102
24118: PUSH
24119: LD_INT 103
24121: PUSH
24122: LD_INT 104
24124: PUSH
24125: LD_INT 105
24127: PUSH
24128: LD_INT 106
24130: PUSH
24131: LD_INT 107
24133: PUSH
24134: LD_INT 108
24136: PUSH
24137: LD_INT 109
24139: PUSH
24140: LD_INT 110
24142: PUSH
24143: LD_INT 111
24145: PUSH
24146: LD_INT 112
24148: PUSH
24149: LD_INT 113
24151: PUSH
24152: LD_INT 114
24154: PUSH
24155: LD_INT 116
24157: PUSH
24158: LD_INT 117
24160: PUSH
24161: LD_INT 118
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: ST_TO_ADDR
24187: GO 25194
24189: LD_INT 15
24191: DOUBLE
24192: EQUAL
24193: IFTRUE 24197
24195: GO 24421
24197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24198: LD_ADDR_VAR 0 2
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: LD_INT 2
24208: PUSH
24209: LD_INT 3
24211: PUSH
24212: LD_INT 4
24214: PUSH
24215: LD_INT 5
24217: PUSH
24218: LD_INT 6
24220: PUSH
24221: LD_INT 7
24223: PUSH
24224: LD_INT 8
24226: PUSH
24227: LD_INT 9
24229: PUSH
24230: LD_INT 10
24232: PUSH
24233: LD_INT 11
24235: PUSH
24236: LD_INT 12
24238: PUSH
24239: LD_INT 13
24241: PUSH
24242: LD_INT 14
24244: PUSH
24245: LD_INT 15
24247: PUSH
24248: LD_INT 16
24250: PUSH
24251: LD_INT 17
24253: PUSH
24254: LD_INT 18
24256: PUSH
24257: LD_INT 19
24259: PUSH
24260: LD_INT 20
24262: PUSH
24263: LD_INT 21
24265: PUSH
24266: LD_INT 22
24268: PUSH
24269: LD_INT 23
24271: PUSH
24272: LD_INT 24
24274: PUSH
24275: LD_INT 25
24277: PUSH
24278: LD_INT 26
24280: PUSH
24281: LD_INT 27
24283: PUSH
24284: LD_INT 28
24286: PUSH
24287: LD_INT 29
24289: PUSH
24290: LD_INT 30
24292: PUSH
24293: LD_INT 31
24295: PUSH
24296: LD_INT 32
24298: PUSH
24299: LD_INT 33
24301: PUSH
24302: LD_INT 34
24304: PUSH
24305: LD_INT 36
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 101
24347: PUSH
24348: LD_INT 102
24350: PUSH
24351: LD_INT 103
24353: PUSH
24354: LD_INT 104
24356: PUSH
24357: LD_INT 105
24359: PUSH
24360: LD_INT 106
24362: PUSH
24363: LD_INT 107
24365: PUSH
24366: LD_INT 108
24368: PUSH
24369: LD_INT 109
24371: PUSH
24372: LD_INT 110
24374: PUSH
24375: LD_INT 111
24377: PUSH
24378: LD_INT 112
24380: PUSH
24381: LD_INT 113
24383: PUSH
24384: LD_INT 114
24386: PUSH
24387: LD_INT 116
24389: PUSH
24390: LD_INT 117
24392: PUSH
24393: LD_INT 118
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: ST_TO_ADDR
24419: GO 25194
24421: LD_INT 16
24423: DOUBLE
24424: EQUAL
24425: IFTRUE 24429
24427: GO 24565
24429: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24430: LD_ADDR_VAR 0 2
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 4
24440: PUSH
24441: LD_INT 5
24443: PUSH
24444: LD_INT 7
24446: PUSH
24447: LD_INT 11
24449: PUSH
24450: LD_INT 12
24452: PUSH
24453: LD_INT 15
24455: PUSH
24456: LD_INT 16
24458: PUSH
24459: LD_INT 20
24461: PUSH
24462: LD_INT 21
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_INT 23
24470: PUSH
24471: LD_INT 25
24473: PUSH
24474: LD_INT 26
24476: PUSH
24477: LD_INT 30
24479: PUSH
24480: LD_INT 31
24482: PUSH
24483: LD_INT 32
24485: PUSH
24486: LD_INT 33
24488: PUSH
24489: LD_INT 34
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 101
24515: PUSH
24516: LD_INT 102
24518: PUSH
24519: LD_INT 103
24521: PUSH
24522: LD_INT 106
24524: PUSH
24525: LD_INT 108
24527: PUSH
24528: LD_INT 112
24530: PUSH
24531: LD_INT 113
24533: PUSH
24534: LD_INT 114
24536: PUSH
24537: LD_INT 116
24539: PUSH
24540: LD_INT 117
24542: PUSH
24543: LD_INT 118
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: ST_TO_ADDR
24563: GO 25194
24565: LD_INT 17
24567: DOUBLE
24568: EQUAL
24569: IFTRUE 24573
24571: GO 24797
24573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24574: LD_ADDR_VAR 0 2
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 4
24590: PUSH
24591: LD_INT 5
24593: PUSH
24594: LD_INT 6
24596: PUSH
24597: LD_INT 7
24599: PUSH
24600: LD_INT 8
24602: PUSH
24603: LD_INT 9
24605: PUSH
24606: LD_INT 10
24608: PUSH
24609: LD_INT 11
24611: PUSH
24612: LD_INT 12
24614: PUSH
24615: LD_INT 13
24617: PUSH
24618: LD_INT 14
24620: PUSH
24621: LD_INT 15
24623: PUSH
24624: LD_INT 16
24626: PUSH
24627: LD_INT 17
24629: PUSH
24630: LD_INT 18
24632: PUSH
24633: LD_INT 19
24635: PUSH
24636: LD_INT 20
24638: PUSH
24639: LD_INT 21
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_INT 23
24647: PUSH
24648: LD_INT 24
24650: PUSH
24651: LD_INT 25
24653: PUSH
24654: LD_INT 26
24656: PUSH
24657: LD_INT 27
24659: PUSH
24660: LD_INT 28
24662: PUSH
24663: LD_INT 29
24665: PUSH
24666: LD_INT 30
24668: PUSH
24669: LD_INT 31
24671: PUSH
24672: LD_INT 32
24674: PUSH
24675: LD_INT 33
24677: PUSH
24678: LD_INT 34
24680: PUSH
24681: LD_INT 36
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 101
24723: PUSH
24724: LD_INT 102
24726: PUSH
24727: LD_INT 103
24729: PUSH
24730: LD_INT 104
24732: PUSH
24733: LD_INT 105
24735: PUSH
24736: LD_INT 106
24738: PUSH
24739: LD_INT 107
24741: PUSH
24742: LD_INT 108
24744: PUSH
24745: LD_INT 109
24747: PUSH
24748: LD_INT 110
24750: PUSH
24751: LD_INT 111
24753: PUSH
24754: LD_INT 112
24756: PUSH
24757: LD_INT 113
24759: PUSH
24760: LD_INT 114
24762: PUSH
24763: LD_INT 116
24765: PUSH
24766: LD_INT 117
24768: PUSH
24769: LD_INT 118
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: ST_TO_ADDR
24795: GO 25194
24797: LD_INT 18
24799: DOUBLE
24800: EQUAL
24801: IFTRUE 24805
24803: GO 24953
24805: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24806: LD_ADDR_VAR 0 2
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 4
24816: PUSH
24817: LD_INT 5
24819: PUSH
24820: LD_INT 7
24822: PUSH
24823: LD_INT 11
24825: PUSH
24826: LD_INT 12
24828: PUSH
24829: LD_INT 15
24831: PUSH
24832: LD_INT 16
24834: PUSH
24835: LD_INT 20
24837: PUSH
24838: LD_INT 21
24840: PUSH
24841: LD_INT 22
24843: PUSH
24844: LD_INT 23
24846: PUSH
24847: LD_INT 25
24849: PUSH
24850: LD_INT 26
24852: PUSH
24853: LD_INT 30
24855: PUSH
24856: LD_INT 31
24858: PUSH
24859: LD_INT 32
24861: PUSH
24862: LD_INT 33
24864: PUSH
24865: LD_INT 34
24867: PUSH
24868: LD_INT 35
24870: PUSH
24871: LD_INT 36
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 101
24899: PUSH
24900: LD_INT 102
24902: PUSH
24903: LD_INT 103
24905: PUSH
24906: LD_INT 106
24908: PUSH
24909: LD_INT 108
24911: PUSH
24912: LD_INT 112
24914: PUSH
24915: LD_INT 113
24917: PUSH
24918: LD_INT 114
24920: PUSH
24921: LD_INT 115
24923: PUSH
24924: LD_INT 116
24926: PUSH
24927: LD_INT 117
24929: PUSH
24930: LD_INT 118
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: ST_TO_ADDR
24951: GO 25194
24953: LD_INT 19
24955: DOUBLE
24956: EQUAL
24957: IFTRUE 24961
24959: GO 25193
24961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24962: LD_ADDR_VAR 0 2
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 3
24975: PUSH
24976: LD_INT 4
24978: PUSH
24979: LD_INT 5
24981: PUSH
24982: LD_INT 6
24984: PUSH
24985: LD_INT 7
24987: PUSH
24988: LD_INT 8
24990: PUSH
24991: LD_INT 9
24993: PUSH
24994: LD_INT 10
24996: PUSH
24997: LD_INT 11
24999: PUSH
25000: LD_INT 12
25002: PUSH
25003: LD_INT 13
25005: PUSH
25006: LD_INT 14
25008: PUSH
25009: LD_INT 15
25011: PUSH
25012: LD_INT 16
25014: PUSH
25015: LD_INT 17
25017: PUSH
25018: LD_INT 18
25020: PUSH
25021: LD_INT 19
25023: PUSH
25024: LD_INT 20
25026: PUSH
25027: LD_INT 21
25029: PUSH
25030: LD_INT 22
25032: PUSH
25033: LD_INT 23
25035: PUSH
25036: LD_INT 24
25038: PUSH
25039: LD_INT 25
25041: PUSH
25042: LD_INT 26
25044: PUSH
25045: LD_INT 27
25047: PUSH
25048: LD_INT 28
25050: PUSH
25051: LD_INT 29
25053: PUSH
25054: LD_INT 30
25056: PUSH
25057: LD_INT 31
25059: PUSH
25060: LD_INT 32
25062: PUSH
25063: LD_INT 33
25065: PUSH
25066: LD_INT 34
25068: PUSH
25069: LD_INT 35
25071: PUSH
25072: LD_INT 36
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 101
25115: PUSH
25116: LD_INT 102
25118: PUSH
25119: LD_INT 103
25121: PUSH
25122: LD_INT 104
25124: PUSH
25125: LD_INT 105
25127: PUSH
25128: LD_INT 106
25130: PUSH
25131: LD_INT 107
25133: PUSH
25134: LD_INT 108
25136: PUSH
25137: LD_INT 109
25139: PUSH
25140: LD_INT 110
25142: PUSH
25143: LD_INT 111
25145: PUSH
25146: LD_INT 112
25148: PUSH
25149: LD_INT 113
25151: PUSH
25152: LD_INT 114
25154: PUSH
25155: LD_INT 115
25157: PUSH
25158: LD_INT 116
25160: PUSH
25161: LD_INT 117
25163: PUSH
25164: LD_INT 118
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: ST_TO_ADDR
25191: GO 25194
25193: POP
// end else
25194: GO 25425
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25196: LD_ADDR_VAR 0 2
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: LD_INT 2
25206: PUSH
25207: LD_INT 3
25209: PUSH
25210: LD_INT 4
25212: PUSH
25213: LD_INT 5
25215: PUSH
25216: LD_INT 6
25218: PUSH
25219: LD_INT 7
25221: PUSH
25222: LD_INT 8
25224: PUSH
25225: LD_INT 9
25227: PUSH
25228: LD_INT 10
25230: PUSH
25231: LD_INT 11
25233: PUSH
25234: LD_INT 12
25236: PUSH
25237: LD_INT 13
25239: PUSH
25240: LD_INT 14
25242: PUSH
25243: LD_INT 15
25245: PUSH
25246: LD_INT 16
25248: PUSH
25249: LD_INT 17
25251: PUSH
25252: LD_INT 18
25254: PUSH
25255: LD_INT 19
25257: PUSH
25258: LD_INT 20
25260: PUSH
25261: LD_INT 21
25263: PUSH
25264: LD_INT 22
25266: PUSH
25267: LD_INT 23
25269: PUSH
25270: LD_INT 24
25272: PUSH
25273: LD_INT 25
25275: PUSH
25276: LD_INT 26
25278: PUSH
25279: LD_INT 27
25281: PUSH
25282: LD_INT 28
25284: PUSH
25285: LD_INT 29
25287: PUSH
25288: LD_INT 30
25290: PUSH
25291: LD_INT 31
25293: PUSH
25294: LD_INT 32
25296: PUSH
25297: LD_INT 33
25299: PUSH
25300: LD_INT 34
25302: PUSH
25303: LD_INT 35
25305: PUSH
25306: LD_INT 36
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 101
25349: PUSH
25350: LD_INT 102
25352: PUSH
25353: LD_INT 103
25355: PUSH
25356: LD_INT 104
25358: PUSH
25359: LD_INT 105
25361: PUSH
25362: LD_INT 106
25364: PUSH
25365: LD_INT 107
25367: PUSH
25368: LD_INT 108
25370: PUSH
25371: LD_INT 109
25373: PUSH
25374: LD_INT 110
25376: PUSH
25377: LD_INT 111
25379: PUSH
25380: LD_INT 112
25382: PUSH
25383: LD_INT 113
25385: PUSH
25386: LD_INT 114
25388: PUSH
25389: LD_INT 115
25391: PUSH
25392: LD_INT 116
25394: PUSH
25395: LD_INT 117
25397: PUSH
25398: LD_INT 118
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: ST_TO_ADDR
// if result then
25425: LD_VAR 0 2
25429: IFFALSE 26215
// begin normal :=  ;
25431: LD_ADDR_VAR 0 5
25435: PUSH
25436: LD_STRING 
25438: ST_TO_ADDR
// hardcore :=  ;
25439: LD_ADDR_VAR 0 6
25443: PUSH
25444: LD_STRING 
25446: ST_TO_ADDR
// active :=  ;
25447: LD_ADDR_VAR 0 7
25451: PUSH
25452: LD_STRING 
25454: ST_TO_ADDR
// for i = 1 to normalCounter do
25455: LD_ADDR_VAR 0 8
25459: PUSH
25460: DOUBLE
25461: LD_INT 1
25463: DEC
25464: ST_TO_ADDR
25465: LD_EXP 39
25469: PUSH
25470: FOR_TO
25471: IFFALSE 25572
// begin tmp := 0 ;
25473: LD_ADDR_VAR 0 3
25477: PUSH
25478: LD_STRING 0
25480: ST_TO_ADDR
// if result [ 1 ] then
25481: LD_VAR 0 2
25485: PUSH
25486: LD_INT 1
25488: ARRAY
25489: IFFALSE 25554
// if result [ 1 ] [ 1 ] = i then
25491: LD_VAR 0 2
25495: PUSH
25496: LD_INT 1
25498: ARRAY
25499: PUSH
25500: LD_INT 1
25502: ARRAY
25503: PUSH
25504: LD_VAR 0 8
25508: EQUAL
25509: IFFALSE 25554
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25511: LD_ADDR_VAR 0 2
25515: PUSH
25516: LD_VAR 0 2
25520: PPUSH
25521: LD_INT 1
25523: PPUSH
25524: LD_VAR 0 2
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PPUSH
25533: LD_INT 1
25535: PPUSH
25536: CALL_OW 3
25540: PPUSH
25541: CALL_OW 1
25545: ST_TO_ADDR
// tmp := 1 ;
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_STRING 1
25553: ST_TO_ADDR
// end ; normal := normal & tmp ;
25554: LD_ADDR_VAR 0 5
25558: PUSH
25559: LD_VAR 0 5
25563: PUSH
25564: LD_VAR 0 3
25568: STR
25569: ST_TO_ADDR
// end ;
25570: GO 25470
25572: POP
25573: POP
// for i = 1 to hardcoreCounter do
25574: LD_ADDR_VAR 0 8
25578: PUSH
25579: DOUBLE
25580: LD_INT 1
25582: DEC
25583: ST_TO_ADDR
25584: LD_EXP 40
25588: PUSH
25589: FOR_TO
25590: IFFALSE 25695
// begin tmp := 0 ;
25592: LD_ADDR_VAR 0 3
25596: PUSH
25597: LD_STRING 0
25599: ST_TO_ADDR
// if result [ 2 ] then
25600: LD_VAR 0 2
25604: PUSH
25605: LD_INT 2
25607: ARRAY
25608: IFFALSE 25677
// if result [ 2 ] [ 1 ] = 100 + i then
25610: LD_VAR 0 2
25614: PUSH
25615: LD_INT 2
25617: ARRAY
25618: PUSH
25619: LD_INT 1
25621: ARRAY
25622: PUSH
25623: LD_INT 100
25625: PUSH
25626: LD_VAR 0 8
25630: PLUS
25631: EQUAL
25632: IFFALSE 25677
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25634: LD_ADDR_VAR 0 2
25638: PUSH
25639: LD_VAR 0 2
25643: PPUSH
25644: LD_INT 2
25646: PPUSH
25647: LD_VAR 0 2
25651: PUSH
25652: LD_INT 2
25654: ARRAY
25655: PPUSH
25656: LD_INT 1
25658: PPUSH
25659: CALL_OW 3
25663: PPUSH
25664: CALL_OW 1
25668: ST_TO_ADDR
// tmp := 1 ;
25669: LD_ADDR_VAR 0 3
25673: PUSH
25674: LD_STRING 1
25676: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25677: LD_ADDR_VAR 0 6
25681: PUSH
25682: LD_VAR 0 6
25686: PUSH
25687: LD_VAR 0 3
25691: STR
25692: ST_TO_ADDR
// end ;
25693: GO 25589
25695: POP
25696: POP
// if isGameLoad then
25697: LD_VAR 0 1
25701: IFFALSE 26176
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25703: LD_ADDR_VAR 0 4
25707: PUSH
25708: LD_EXP 43
25712: PUSH
25713: LD_EXP 42
25717: PUSH
25718: LD_EXP 44
25722: PUSH
25723: LD_EXP 41
25727: PUSH
25728: LD_EXP 45
25732: PUSH
25733: LD_EXP 46
25737: PUSH
25738: LD_EXP 47
25742: PUSH
25743: LD_EXP 48
25747: PUSH
25748: LD_EXP 49
25752: PUSH
25753: LD_EXP 50
25757: PUSH
25758: LD_EXP 51
25762: PUSH
25763: LD_EXP 52
25767: PUSH
25768: LD_EXP 53
25772: PUSH
25773: LD_EXP 54
25777: PUSH
25778: LD_EXP 62
25782: PUSH
25783: LD_EXP 63
25787: PUSH
25788: LD_EXP 64
25792: PUSH
25793: LD_EXP 65
25797: PUSH
25798: LD_EXP 67
25802: PUSH
25803: LD_EXP 68
25807: PUSH
25808: LD_EXP 69
25812: PUSH
25813: LD_EXP 72
25817: PUSH
25818: LD_EXP 74
25822: PUSH
25823: LD_EXP 75
25827: PUSH
25828: LD_EXP 76
25832: PUSH
25833: LD_EXP 78
25837: PUSH
25838: LD_EXP 79
25842: PUSH
25843: LD_EXP 82
25847: PUSH
25848: LD_EXP 83
25852: PUSH
25853: LD_EXP 84
25857: PUSH
25858: LD_EXP 85
25862: PUSH
25863: LD_EXP 86
25867: PUSH
25868: LD_EXP 87
25872: PUSH
25873: LD_EXP 88
25877: PUSH
25878: LD_EXP 89
25882: PUSH
25883: LD_EXP 90
25887: PUSH
25888: LD_EXP 55
25892: PUSH
25893: LD_EXP 56
25897: PUSH
25898: LD_EXP 59
25902: PUSH
25903: LD_EXP 60
25907: PUSH
25908: LD_EXP 61
25912: PUSH
25913: LD_EXP 57
25917: PUSH
25918: LD_EXP 58
25922: PUSH
25923: LD_EXP 66
25927: PUSH
25928: LD_EXP 70
25932: PUSH
25933: LD_EXP 71
25937: PUSH
25938: LD_EXP 73
25942: PUSH
25943: LD_EXP 77
25947: PUSH
25948: LD_EXP 80
25952: PUSH
25953: LD_EXP 81
25957: PUSH
25958: LD_EXP 91
25962: PUSH
25963: LD_EXP 92
25967: PUSH
25968: LD_EXP 93
25972: PUSH
25973: LD_EXP 94
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: ST_TO_ADDR
// tmp :=  ;
26034: LD_ADDR_VAR 0 3
26038: PUSH
26039: LD_STRING 
26041: ST_TO_ADDR
// for i = 1 to normalCounter do
26042: LD_ADDR_VAR 0 8
26046: PUSH
26047: DOUBLE
26048: LD_INT 1
26050: DEC
26051: ST_TO_ADDR
26052: LD_EXP 39
26056: PUSH
26057: FOR_TO
26058: IFFALSE 26094
// begin if flags [ i ] then
26060: LD_VAR 0 4
26064: PUSH
26065: LD_VAR 0 8
26069: ARRAY
26070: IFFALSE 26092
// tmp := tmp & i & ; ;
26072: LD_ADDR_VAR 0 3
26076: PUSH
26077: LD_VAR 0 3
26081: PUSH
26082: LD_VAR 0 8
26086: STR
26087: PUSH
26088: LD_STRING ;
26090: STR
26091: ST_TO_ADDR
// end ;
26092: GO 26057
26094: POP
26095: POP
// for i = 1 to hardcoreCounter do
26096: LD_ADDR_VAR 0 8
26100: PUSH
26101: DOUBLE
26102: LD_INT 1
26104: DEC
26105: ST_TO_ADDR
26106: LD_EXP 40
26110: PUSH
26111: FOR_TO
26112: IFFALSE 26158
// begin if flags [ normalCounter + i ] then
26114: LD_VAR 0 4
26118: PUSH
26119: LD_EXP 39
26123: PUSH
26124: LD_VAR 0 8
26128: PLUS
26129: ARRAY
26130: IFFALSE 26156
// tmp := tmp & ( 100 + i ) & ; ;
26132: LD_ADDR_VAR 0 3
26136: PUSH
26137: LD_VAR 0 3
26141: PUSH
26142: LD_INT 100
26144: PUSH
26145: LD_VAR 0 8
26149: PLUS
26150: STR
26151: PUSH
26152: LD_STRING ;
26154: STR
26155: ST_TO_ADDR
// end ;
26156: GO 26111
26158: POP
26159: POP
// if tmp then
26160: LD_VAR 0 3
26164: IFFALSE 26176
// active := tmp ;
26166: LD_ADDR_VAR 0 7
26170: PUSH
26171: LD_VAR 0 3
26175: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26176: LD_STRING getStreamItemsFromMission("
26178: PUSH
26179: LD_VAR 0 5
26183: STR
26184: PUSH
26185: LD_STRING ","
26187: STR
26188: PUSH
26189: LD_VAR 0 6
26193: STR
26194: PUSH
26195: LD_STRING ","
26197: STR
26198: PUSH
26199: LD_VAR 0 7
26203: STR
26204: PUSH
26205: LD_STRING ")
26207: STR
26208: PPUSH
26209: CALL_OW 559
// end else
26213: GO 26222
// ToLua ( getStreamItemsFromMission("","","") ) ;
26215: LD_STRING getStreamItemsFromMission("","","")
26217: PPUSH
26218: CALL_OW 559
// end ;
26222: LD_VAR 0 2
26226: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26227: LD_EXP 38
26231: PUSH
26232: LD_EXP 43
26236: AND
26237: IFFALSE 26361
26239: GO 26241
26241: DISABLE
26242: LD_INT 0
26244: PPUSH
26245: PPUSH
// begin enable ;
26246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26247: LD_ADDR_VAR 0 2
26251: PUSH
26252: LD_INT 22
26254: PUSH
26255: LD_OWVAR 2
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: LD_INT 34
26269: PUSH
26270: LD_INT 7
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 34
26279: PUSH
26280: LD_INT 45
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 34
26289: PUSH
26290: LD_INT 28
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 34
26299: PUSH
26300: LD_INT 47
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PPUSH
26318: CALL_OW 69
26322: ST_TO_ADDR
// if not tmp then
26323: LD_VAR 0 2
26327: NOT
26328: IFFALSE 26332
// exit ;
26330: GO 26361
// for i in tmp do
26332: LD_ADDR_VAR 0 1
26336: PUSH
26337: LD_VAR 0 2
26341: PUSH
26342: FOR_IN
26343: IFFALSE 26359
// begin SetLives ( i , 0 ) ;
26345: LD_VAR 0 1
26349: PPUSH
26350: LD_INT 0
26352: PPUSH
26353: CALL_OW 234
// end ;
26357: GO 26342
26359: POP
26360: POP
// end ;
26361: PPOPN 2
26363: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26364: LD_EXP 38
26368: PUSH
26369: LD_EXP 44
26373: AND
26374: IFFALSE 26458
26376: GO 26378
26378: DISABLE
26379: LD_INT 0
26381: PPUSH
26382: PPUSH
// begin enable ;
26383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26384: LD_ADDR_VAR 0 2
26388: PUSH
26389: LD_INT 22
26391: PUSH
26392: LD_OWVAR 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 32
26403: PUSH
26404: LD_INT 3
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PPUSH
26415: CALL_OW 69
26419: ST_TO_ADDR
// if not tmp then
26420: LD_VAR 0 2
26424: NOT
26425: IFFALSE 26429
// exit ;
26427: GO 26458
// for i in tmp do
26429: LD_ADDR_VAR 0 1
26433: PUSH
26434: LD_VAR 0 2
26438: PUSH
26439: FOR_IN
26440: IFFALSE 26456
// begin SetLives ( i , 0 ) ;
26442: LD_VAR 0 1
26446: PPUSH
26447: LD_INT 0
26449: PPUSH
26450: CALL_OW 234
// end ;
26454: GO 26439
26456: POP
26457: POP
// end ;
26458: PPOPN 2
26460: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26461: LD_EXP 38
26465: PUSH
26466: LD_EXP 41
26470: AND
26471: IFFALSE 26564
26473: GO 26475
26475: DISABLE
26476: LD_INT 0
26478: PPUSH
// begin enable ;
26479: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26480: LD_ADDR_VAR 0 1
26484: PUSH
26485: LD_INT 22
26487: PUSH
26488: LD_OWVAR 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 25
26502: PUSH
26503: LD_INT 5
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 25
26512: PUSH
26513: LD_INT 9
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 25
26522: PUSH
26523: LD_INT 8
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PPUSH
26540: CALL_OW 69
26544: PUSH
26545: FOR_IN
26546: IFFALSE 26562
// begin SetClass ( i , 1 ) ;
26548: LD_VAR 0 1
26552: PPUSH
26553: LD_INT 1
26555: PPUSH
26556: CALL_OW 336
// end ;
26560: GO 26545
26562: POP
26563: POP
// end ;
26564: PPOPN 1
26566: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26567: LD_EXP 38
26571: PUSH
26572: LD_EXP 42
26576: AND
26577: PUSH
26578: LD_OWVAR 65
26582: PUSH
26583: LD_INT 7
26585: LESS
26586: AND
26587: IFFALSE 26601
26589: GO 26591
26591: DISABLE
// begin enable ;
26592: ENABLE
// game_speed := 7 ;
26593: LD_ADDR_OWVAR 65
26597: PUSH
26598: LD_INT 7
26600: ST_TO_ADDR
// end ;
26601: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26602: LD_EXP 38
26606: PUSH
26607: LD_EXP 45
26611: AND
26612: IFFALSE 26814
26614: GO 26616
26616: DISABLE
26617: LD_INT 0
26619: PPUSH
26620: PPUSH
26621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 81
26629: PUSH
26630: LD_OWVAR 2
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 21
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PPUSH
26653: CALL_OW 69
26657: ST_TO_ADDR
// if not tmp then
26658: LD_VAR 0 3
26662: NOT
26663: IFFALSE 26667
// exit ;
26665: GO 26814
// if tmp > 5 then
26667: LD_VAR 0 3
26671: PUSH
26672: LD_INT 5
26674: GREATER
26675: IFFALSE 26687
// k := 5 else
26677: LD_ADDR_VAR 0 2
26681: PUSH
26682: LD_INT 5
26684: ST_TO_ADDR
26685: GO 26697
// k := tmp ;
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: LD_VAR 0 3
26696: ST_TO_ADDR
// for i := 1 to k do
26697: LD_ADDR_VAR 0 1
26701: PUSH
26702: DOUBLE
26703: LD_INT 1
26705: DEC
26706: ST_TO_ADDR
26707: LD_VAR 0 2
26711: PUSH
26712: FOR_TO
26713: IFFALSE 26812
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26715: LD_VAR 0 3
26719: PUSH
26720: LD_VAR 0 1
26724: ARRAY
26725: PPUSH
26726: LD_VAR 0 1
26730: PUSH
26731: LD_INT 4
26733: MOD
26734: PUSH
26735: LD_INT 1
26737: PLUS
26738: PPUSH
26739: CALL_OW 259
26743: PUSH
26744: LD_INT 10
26746: LESS
26747: IFFALSE 26810
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26749: LD_VAR 0 3
26753: PUSH
26754: LD_VAR 0 1
26758: ARRAY
26759: PPUSH
26760: LD_VAR 0 1
26764: PUSH
26765: LD_INT 4
26767: MOD
26768: PUSH
26769: LD_INT 1
26771: PLUS
26772: PPUSH
26773: LD_VAR 0 3
26777: PUSH
26778: LD_VAR 0 1
26782: ARRAY
26783: PPUSH
26784: LD_VAR 0 1
26788: PUSH
26789: LD_INT 4
26791: MOD
26792: PUSH
26793: LD_INT 1
26795: PLUS
26796: PPUSH
26797: CALL_OW 259
26801: PUSH
26802: LD_INT 1
26804: PLUS
26805: PPUSH
26806: CALL_OW 237
26810: GO 26712
26812: POP
26813: POP
// end ;
26814: PPOPN 3
26816: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26817: LD_EXP 38
26821: PUSH
26822: LD_EXP 46
26826: AND
26827: IFFALSE 26847
26829: GO 26831
26831: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26832: LD_INT 4
26834: PPUSH
26835: LD_OWVAR 2
26839: PPUSH
26840: LD_INT 0
26842: PPUSH
26843: CALL_OW 324
26847: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26848: LD_EXP 38
26852: PUSH
26853: LD_EXP 75
26857: AND
26858: IFFALSE 26878
26860: GO 26862
26862: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26863: LD_INT 19
26865: PPUSH
26866: LD_OWVAR 2
26870: PPUSH
26871: LD_INT 0
26873: PPUSH
26874: CALL_OW 324
26878: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26879: LD_EXP 38
26883: PUSH
26884: LD_EXP 47
26888: AND
26889: IFFALSE 26991
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
// begin enable ;
26898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 34
26921: PUSH
26922: LD_INT 11
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 34
26931: PUSH
26932: LD_INT 30
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PPUSH
26948: CALL_OW 69
26952: ST_TO_ADDR
// if not tmp then
26953: LD_VAR 0 2
26957: NOT
26958: IFFALSE 26962
// exit ;
26960: GO 26991
// for i in tmp do
26962: LD_ADDR_VAR 0 1
26966: PUSH
26967: LD_VAR 0 2
26971: PUSH
26972: FOR_IN
26973: IFFALSE 26989
// begin SetLives ( i , 0 ) ;
26975: LD_VAR 0 1
26979: PPUSH
26980: LD_INT 0
26982: PPUSH
26983: CALL_OW 234
// end ;
26987: GO 26972
26989: POP
26990: POP
// end ;
26991: PPOPN 2
26993: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26994: LD_EXP 38
26998: PUSH
26999: LD_EXP 48
27003: AND
27004: IFFALSE 27024
27006: GO 27008
27008: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27009: LD_INT 32
27011: PPUSH
27012: LD_OWVAR 2
27016: PPUSH
27017: LD_INT 0
27019: PPUSH
27020: CALL_OW 324
27024: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27025: LD_EXP 38
27029: PUSH
27030: LD_EXP 49
27034: AND
27035: IFFALSE 27216
27037: GO 27039
27039: DISABLE
27040: LD_INT 0
27042: PPUSH
27043: PPUSH
27044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27045: LD_ADDR_VAR 0 2
27049: PUSH
27050: LD_INT 22
27052: PUSH
27053: LD_OWVAR 2
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 33
27064: PUSH
27065: LD_INT 3
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PPUSH
27076: CALL_OW 69
27080: ST_TO_ADDR
// if not tmp then
27081: LD_VAR 0 2
27085: NOT
27086: IFFALSE 27090
// exit ;
27088: GO 27216
// side := 0 ;
27090: LD_ADDR_VAR 0 3
27094: PUSH
27095: LD_INT 0
27097: ST_TO_ADDR
// for i := 1 to 8 do
27098: LD_ADDR_VAR 0 1
27102: PUSH
27103: DOUBLE
27104: LD_INT 1
27106: DEC
27107: ST_TO_ADDR
27108: LD_INT 8
27110: PUSH
27111: FOR_TO
27112: IFFALSE 27160
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27114: LD_OWVAR 2
27118: PUSH
27119: LD_VAR 0 1
27123: NONEQUAL
27124: PUSH
27125: LD_OWVAR 2
27129: PPUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL_OW 81
27139: PUSH
27140: LD_INT 2
27142: EQUAL
27143: AND
27144: IFFALSE 27158
// begin side := i ;
27146: LD_ADDR_VAR 0 3
27150: PUSH
27151: LD_VAR 0 1
27155: ST_TO_ADDR
// break ;
27156: GO 27160
// end ;
27158: GO 27111
27160: POP
27161: POP
// if not side then
27162: LD_VAR 0 3
27166: NOT
27167: IFFALSE 27171
// exit ;
27169: GO 27216
// for i := 1 to tmp do
27171: LD_ADDR_VAR 0 1
27175: PUSH
27176: DOUBLE
27177: LD_INT 1
27179: DEC
27180: ST_TO_ADDR
27181: LD_VAR 0 2
27185: PUSH
27186: FOR_TO
27187: IFFALSE 27214
// if Prob ( 60 ) then
27189: LD_INT 60
27191: PPUSH
27192: CALL_OW 13
27196: IFFALSE 27212
// SetSide ( i , side ) ;
27198: LD_VAR 0 1
27202: PPUSH
27203: LD_VAR 0 3
27207: PPUSH
27208: CALL_OW 235
27212: GO 27186
27214: POP
27215: POP
// end ;
27216: PPOPN 3
27218: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27219: LD_EXP 38
27223: PUSH
27224: LD_EXP 51
27228: AND
27229: IFFALSE 27348
27231: GO 27233
27233: DISABLE
27234: LD_INT 0
27236: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_INT 22
27244: PUSH
27245: LD_OWVAR 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 21
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: PUSH
27267: LD_INT 23
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: PPUSH
27286: CALL_OW 69
27290: PUSH
27291: FOR_IN
27292: IFFALSE 27346
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27294: LD_VAR 0 1
27298: PPUSH
27299: CALL_OW 257
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: LD_INT 4
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: IN
27322: IFFALSE 27344
// SetClass ( un , rand ( 1 , 4 ) ) ;
27324: LD_VAR 0 1
27328: PPUSH
27329: LD_INT 1
27331: PPUSH
27332: LD_INT 4
27334: PPUSH
27335: CALL_OW 12
27339: PPUSH
27340: CALL_OW 336
27344: GO 27291
27346: POP
27347: POP
// end ;
27348: PPOPN 1
27350: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27351: LD_EXP 38
27355: PUSH
27356: LD_EXP 50
27360: AND
27361: IFFALSE 27440
27363: GO 27365
27365: DISABLE
27366: LD_INT 0
27368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27369: LD_ADDR_VAR 0 1
27373: PUSH
27374: LD_INT 22
27376: PUSH
27377: LD_OWVAR 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 21
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PPUSH
27400: CALL_OW 69
27404: ST_TO_ADDR
// if not tmp then
27405: LD_VAR 0 1
27409: NOT
27410: IFFALSE 27414
// exit ;
27412: GO 27440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27414: LD_VAR 0 1
27418: PUSH
27419: LD_INT 1
27421: PPUSH
27422: LD_VAR 0 1
27426: PPUSH
27427: CALL_OW 12
27431: ARRAY
27432: PPUSH
27433: LD_INT 100
27435: PPUSH
27436: CALL_OW 234
// end ;
27440: PPOPN 1
27442: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27443: LD_EXP 38
27447: PUSH
27448: LD_EXP 52
27452: AND
27453: IFFALSE 27551
27455: GO 27457
27457: DISABLE
27458: LD_INT 0
27460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27461: LD_ADDR_VAR 0 1
27465: PUSH
27466: LD_INT 22
27468: PUSH
27469: LD_OWVAR 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 21
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PPUSH
27492: CALL_OW 69
27496: ST_TO_ADDR
// if not tmp then
27497: LD_VAR 0 1
27501: NOT
27502: IFFALSE 27506
// exit ;
27504: GO 27551
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27506: LD_VAR 0 1
27510: PUSH
27511: LD_INT 1
27513: PPUSH
27514: LD_VAR 0 1
27518: PPUSH
27519: CALL_OW 12
27523: ARRAY
27524: PPUSH
27525: LD_INT 1
27527: PPUSH
27528: LD_INT 4
27530: PPUSH
27531: CALL_OW 12
27535: PPUSH
27536: LD_INT 3000
27538: PPUSH
27539: LD_INT 9000
27541: PPUSH
27542: CALL_OW 12
27546: PPUSH
27547: CALL_OW 492
// end ;
27551: PPOPN 1
27553: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27554: LD_EXP 38
27558: PUSH
27559: LD_EXP 53
27563: AND
27564: IFFALSE 27584
27566: GO 27568
27568: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27569: LD_INT 1
27571: PPUSH
27572: LD_OWVAR 2
27576: PPUSH
27577: LD_INT 0
27579: PPUSH
27580: CALL_OW 324
27584: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27585: LD_EXP 38
27589: PUSH
27590: LD_EXP 54
27594: AND
27595: IFFALSE 27678
27597: GO 27599
27599: DISABLE
27600: LD_INT 0
27602: PPUSH
27603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27604: LD_ADDR_VAR 0 2
27608: PUSH
27609: LD_INT 22
27611: PUSH
27612: LD_OWVAR 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 21
27623: PUSH
27624: LD_INT 3
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 69
27639: ST_TO_ADDR
// if not tmp then
27640: LD_VAR 0 2
27644: NOT
27645: IFFALSE 27649
// exit ;
27647: GO 27678
// for i in tmp do
27649: LD_ADDR_VAR 0 1
27653: PUSH
27654: LD_VAR 0 2
27658: PUSH
27659: FOR_IN
27660: IFFALSE 27676
// SetBLevel ( i , 10 ) ;
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_INT 10
27669: PPUSH
27670: CALL_OW 241
27674: GO 27659
27676: POP
27677: POP
// end ;
27678: PPOPN 2
27680: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27681: LD_EXP 38
27685: PUSH
27686: LD_EXP 55
27690: AND
27691: IFFALSE 27802
27693: GO 27695
27695: DISABLE
27696: LD_INT 0
27698: PPUSH
27699: PPUSH
27700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_INT 22
27708: PUSH
27709: LD_OWVAR 2
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 25
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 69
27736: ST_TO_ADDR
// if not tmp then
27737: LD_VAR 0 3
27741: NOT
27742: IFFALSE 27746
// exit ;
27744: GO 27802
// un := tmp [ rand ( 1 , tmp ) ] ;
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: LD_VAR 0 3
27755: PUSH
27756: LD_INT 1
27758: PPUSH
27759: LD_VAR 0 3
27763: PPUSH
27764: CALL_OW 12
27768: ARRAY
27769: ST_TO_ADDR
// if Crawls ( un ) then
27770: LD_VAR 0 2
27774: PPUSH
27775: CALL_OW 318
27779: IFFALSE 27790
// ComWalk ( un ) ;
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27790: LD_VAR 0 2
27794: PPUSH
27795: LD_INT 5
27797: PPUSH
27798: CALL_OW 336
// end ;
27802: PPOPN 3
27804: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27805: LD_EXP 38
27809: PUSH
27810: LD_EXP 56
27814: AND
27815: PUSH
27816: LD_OWVAR 67
27820: PUSH
27821: LD_INT 4
27823: LESS
27824: AND
27825: IFFALSE 27844
27827: GO 27829
27829: DISABLE
// begin Difficulty := Difficulty + 1 ;
27830: LD_ADDR_OWVAR 67
27834: PUSH
27835: LD_OWVAR 67
27839: PUSH
27840: LD_INT 1
27842: PLUS
27843: ST_TO_ADDR
// end ;
27844: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27845: LD_EXP 38
27849: PUSH
27850: LD_EXP 57
27854: AND
27855: IFFALSE 27958
27857: GO 27859
27859: DISABLE
27860: LD_INT 0
27862: PPUSH
// begin for i := 1 to 5 do
27863: LD_ADDR_VAR 0 1
27867: PUSH
27868: DOUBLE
27869: LD_INT 1
27871: DEC
27872: ST_TO_ADDR
27873: LD_INT 5
27875: PUSH
27876: FOR_TO
27877: IFFALSE 27956
// begin uc_nation := nation_nature ;
27879: LD_ADDR_OWVAR 21
27883: PUSH
27884: LD_INT 0
27886: ST_TO_ADDR
// uc_side := 0 ;
27887: LD_ADDR_OWVAR 20
27891: PUSH
27892: LD_INT 0
27894: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27895: LD_ADDR_OWVAR 29
27899: PUSH
27900: LD_INT 12
27902: PUSH
27903: LD_INT 12
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: ST_TO_ADDR
// hc_agressivity := 20 ;
27910: LD_ADDR_OWVAR 35
27914: PUSH
27915: LD_INT 20
27917: ST_TO_ADDR
// hc_class := class_tiger ;
27918: LD_ADDR_OWVAR 28
27922: PUSH
27923: LD_INT 14
27925: ST_TO_ADDR
// hc_gallery :=  ;
27926: LD_ADDR_OWVAR 33
27930: PUSH
27931: LD_STRING 
27933: ST_TO_ADDR
// hc_name :=  ;
27934: LD_ADDR_OWVAR 26
27938: PUSH
27939: LD_STRING 
27941: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27942: CALL_OW 44
27946: PPUSH
27947: LD_INT 0
27949: PPUSH
27950: CALL_OW 51
// end ;
27954: GO 27876
27956: POP
27957: POP
// end ;
27958: PPOPN 1
27960: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27961: LD_EXP 38
27965: PUSH
27966: LD_EXP 58
27970: AND
27971: IFFALSE 27980
27973: GO 27975
27975: DISABLE
// StreamSibBomb ;
27976: CALL 27981 0 0
27980: END
// export function StreamSibBomb ; var i , x , y ; begin
27981: LD_INT 0
27983: PPUSH
27984: PPUSH
27985: PPUSH
27986: PPUSH
// result := false ;
27987: LD_ADDR_VAR 0 1
27991: PUSH
27992: LD_INT 0
27994: ST_TO_ADDR
// for i := 1 to 16 do
27995: LD_ADDR_VAR 0 2
27999: PUSH
28000: DOUBLE
28001: LD_INT 1
28003: DEC
28004: ST_TO_ADDR
28005: LD_INT 16
28007: PUSH
28008: FOR_TO
28009: IFFALSE 28208
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28011: LD_ADDR_VAR 0 3
28015: PUSH
28016: LD_INT 10
28018: PUSH
28019: LD_INT 20
28021: PUSH
28022: LD_INT 30
28024: PUSH
28025: LD_INT 40
28027: PUSH
28028: LD_INT 50
28030: PUSH
28031: LD_INT 60
28033: PUSH
28034: LD_INT 70
28036: PUSH
28037: LD_INT 80
28039: PUSH
28040: LD_INT 90
28042: PUSH
28043: LD_INT 100
28045: PUSH
28046: LD_INT 110
28048: PUSH
28049: LD_INT 120
28051: PUSH
28052: LD_INT 130
28054: PUSH
28055: LD_INT 140
28057: PUSH
28058: LD_INT 150
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: PPUSH
28081: LD_INT 15
28083: PPUSH
28084: CALL_OW 12
28088: ARRAY
28089: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28090: LD_ADDR_VAR 0 4
28094: PUSH
28095: LD_INT 10
28097: PUSH
28098: LD_INT 20
28100: PUSH
28101: LD_INT 30
28103: PUSH
28104: LD_INT 40
28106: PUSH
28107: LD_INT 50
28109: PUSH
28110: LD_INT 60
28112: PUSH
28113: LD_INT 70
28115: PUSH
28116: LD_INT 80
28118: PUSH
28119: LD_INT 90
28121: PUSH
28122: LD_INT 100
28124: PUSH
28125: LD_INT 110
28127: PUSH
28128: LD_INT 120
28130: PUSH
28131: LD_INT 130
28133: PUSH
28134: LD_INT 140
28136: PUSH
28137: LD_INT 150
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PPUSH
28160: LD_INT 15
28162: PPUSH
28163: CALL_OW 12
28167: ARRAY
28168: ST_TO_ADDR
// if ValidHex ( x , y ) then
28169: LD_VAR 0 3
28173: PPUSH
28174: LD_VAR 0 4
28178: PPUSH
28179: CALL_OW 488
28183: IFFALSE 28206
// begin result := [ x , y ] ;
28185: LD_ADDR_VAR 0 1
28189: PUSH
28190: LD_VAR 0 3
28194: PUSH
28195: LD_VAR 0 4
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: ST_TO_ADDR
// break ;
28204: GO 28208
// end ; end ;
28206: GO 28008
28208: POP
28209: POP
// if result then
28210: LD_VAR 0 1
28214: IFFALSE 28274
// begin ToLua ( playSibBomb() ) ;
28216: LD_STRING playSibBomb()
28218: PPUSH
28219: CALL_OW 559
// wait ( 0 0$14 ) ;
28223: LD_INT 490
28225: PPUSH
28226: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28230: LD_VAR 0 1
28234: PUSH
28235: LD_INT 1
28237: ARRAY
28238: PPUSH
28239: LD_VAR 0 1
28243: PUSH
28244: LD_INT 2
28246: ARRAY
28247: PPUSH
28248: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28252: LD_VAR 0 1
28256: PUSH
28257: LD_INT 1
28259: ARRAY
28260: PPUSH
28261: LD_VAR 0 1
28265: PUSH
28266: LD_INT 2
28268: ARRAY
28269: PPUSH
28270: CALL_OW 429
// end ; end ;
28274: LD_VAR 0 1
28278: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28279: LD_EXP 38
28283: PUSH
28284: LD_EXP 60
28288: AND
28289: IFFALSE 28301
28291: GO 28293
28293: DISABLE
// YouLost (  ) ;
28294: LD_STRING 
28296: PPUSH
28297: CALL_OW 104
28301: END
// every 0 0$1 trigger StreamModeActive and sFog do
28302: LD_EXP 38
28306: PUSH
28307: LD_EXP 59
28311: AND
28312: IFFALSE 28326
28314: GO 28316
28316: DISABLE
// FogOff ( your_side ) ;
28317: LD_OWVAR 2
28321: PPUSH
28322: CALL_OW 344
28326: END
// every 0 0$1 trigger StreamModeActive and sSun do
28327: LD_EXP 38
28331: PUSH
28332: LD_EXP 61
28336: AND
28337: IFFALSE 28365
28339: GO 28341
28341: DISABLE
// begin solar_recharge_percent := 0 ;
28342: LD_ADDR_OWVAR 79
28346: PUSH
28347: LD_INT 0
28349: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28350: LD_INT 10500
28352: PPUSH
28353: CALL_OW 67
// solar_recharge_percent := 100 ;
28357: LD_ADDR_OWVAR 79
28361: PUSH
28362: LD_INT 100
28364: ST_TO_ADDR
// end ;
28365: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28366: LD_EXP 38
28370: PUSH
28371: LD_EXP 62
28375: AND
28376: IFFALSE 28615
28378: GO 28380
28380: DISABLE
28381: LD_INT 0
28383: PPUSH
28384: PPUSH
28385: PPUSH
// begin tmp := [ ] ;
28386: LD_ADDR_VAR 0 3
28390: PUSH
28391: EMPTY
28392: ST_TO_ADDR
// for i := 1 to 6 do
28393: LD_ADDR_VAR 0 1
28397: PUSH
28398: DOUBLE
28399: LD_INT 1
28401: DEC
28402: ST_TO_ADDR
28403: LD_INT 6
28405: PUSH
28406: FOR_TO
28407: IFFALSE 28512
// begin uc_nation := nation_nature ;
28409: LD_ADDR_OWVAR 21
28413: PUSH
28414: LD_INT 0
28416: ST_TO_ADDR
// uc_side := 0 ;
28417: LD_ADDR_OWVAR 20
28421: PUSH
28422: LD_INT 0
28424: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28425: LD_ADDR_OWVAR 29
28429: PUSH
28430: LD_INT 12
28432: PUSH
28433: LD_INT 12
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: ST_TO_ADDR
// hc_agressivity := 20 ;
28440: LD_ADDR_OWVAR 35
28444: PUSH
28445: LD_INT 20
28447: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28448: LD_ADDR_OWVAR 28
28452: PUSH
28453: LD_INT 17
28455: ST_TO_ADDR
// hc_gallery :=  ;
28456: LD_ADDR_OWVAR 33
28460: PUSH
28461: LD_STRING 
28463: ST_TO_ADDR
// hc_name :=  ;
28464: LD_ADDR_OWVAR 26
28468: PUSH
28469: LD_STRING 
28471: ST_TO_ADDR
// un := CreateHuman ;
28472: LD_ADDR_VAR 0 2
28476: PUSH
28477: CALL_OW 44
28481: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: CALL_OW 51
// tmp := tmp ^ un ;
28494: LD_ADDR_VAR 0 3
28498: PUSH
28499: LD_VAR 0 3
28503: PUSH
28504: LD_VAR 0 2
28508: ADD
28509: ST_TO_ADDR
// end ;
28510: GO 28406
28512: POP
28513: POP
// repeat wait ( 0 0$1 ) ;
28514: LD_INT 35
28516: PPUSH
28517: CALL_OW 67
// for un in tmp do
28521: LD_ADDR_VAR 0 2
28525: PUSH
28526: LD_VAR 0 3
28530: PUSH
28531: FOR_IN
28532: IFFALSE 28606
// begin if IsDead ( un ) then
28534: LD_VAR 0 2
28538: PPUSH
28539: CALL_OW 301
28543: IFFALSE 28563
// begin tmp := tmp diff un ;
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_VAR 0 3
28554: PUSH
28555: LD_VAR 0 2
28559: DIFF
28560: ST_TO_ADDR
// continue ;
28561: GO 28531
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28563: LD_VAR 0 2
28567: PPUSH
28568: LD_INT 3
28570: PUSH
28571: LD_INT 22
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PPUSH
28585: CALL_OW 69
28589: PPUSH
28590: LD_VAR 0 2
28594: PPUSH
28595: CALL_OW 74
28599: PPUSH
28600: CALL_OW 115
// end ;
28604: GO 28531
28606: POP
28607: POP
// until not tmp ;
28608: LD_VAR 0 3
28612: NOT
28613: IFFALSE 28514
// end ;
28615: PPOPN 3
28617: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28618: LD_EXP 38
28622: PUSH
28623: LD_EXP 63
28627: AND
28628: IFFALSE 28682
28630: GO 28632
28632: DISABLE
// begin ToLua ( displayTroll(); ) ;
28633: LD_STRING displayTroll();
28635: PPUSH
28636: CALL_OW 559
// wait ( 3 3$00 ) ;
28640: LD_INT 6300
28642: PPUSH
28643: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28647: LD_STRING hideTroll();
28649: PPUSH
28650: CALL_OW 559
// wait ( 1 1$00 ) ;
28654: LD_INT 2100
28656: PPUSH
28657: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28661: LD_STRING displayTroll();
28663: PPUSH
28664: CALL_OW 559
// wait ( 1 1$00 ) ;
28668: LD_INT 2100
28670: PPUSH
28671: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28675: LD_STRING hideTroll();
28677: PPUSH
28678: CALL_OW 559
// end ;
28682: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28683: LD_EXP 38
28687: PUSH
28688: LD_EXP 64
28692: AND
28693: IFFALSE 28756
28695: GO 28697
28697: DISABLE
28698: LD_INT 0
28700: PPUSH
// begin p := 0 ;
28701: LD_ADDR_VAR 0 1
28705: PUSH
28706: LD_INT 0
28708: ST_TO_ADDR
// repeat game_speed := 1 ;
28709: LD_ADDR_OWVAR 65
28713: PUSH
28714: LD_INT 1
28716: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28717: LD_INT 35
28719: PPUSH
28720: CALL_OW 67
// p := p + 1 ;
28724: LD_ADDR_VAR 0 1
28728: PUSH
28729: LD_VAR 0 1
28733: PUSH
28734: LD_INT 1
28736: PLUS
28737: ST_TO_ADDR
// until p >= 60 ;
28738: LD_VAR 0 1
28742: PUSH
28743: LD_INT 60
28745: GREATEREQUAL
28746: IFFALSE 28709
// game_speed := 4 ;
28748: LD_ADDR_OWVAR 65
28752: PUSH
28753: LD_INT 4
28755: ST_TO_ADDR
// end ;
28756: PPOPN 1
28758: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28759: LD_EXP 38
28763: PUSH
28764: LD_EXP 65
28768: AND
28769: IFFALSE 28915
28771: GO 28773
28773: DISABLE
28774: LD_INT 0
28776: PPUSH
28777: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28778: LD_ADDR_VAR 0 1
28782: PUSH
28783: LD_INT 22
28785: PUSH
28786: LD_OWVAR 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: LD_INT 30
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 30
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL_OW 69
28831: ST_TO_ADDR
// if not depot then
28832: LD_VAR 0 1
28836: NOT
28837: IFFALSE 28841
// exit ;
28839: GO 28915
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28841: LD_ADDR_VAR 0 2
28845: PUSH
28846: LD_VAR 0 1
28850: PUSH
28851: LD_INT 1
28853: PPUSH
28854: LD_VAR 0 1
28858: PPUSH
28859: CALL_OW 12
28863: ARRAY
28864: PPUSH
28865: CALL_OW 274
28869: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28870: LD_VAR 0 2
28874: PPUSH
28875: LD_INT 1
28877: PPUSH
28878: LD_INT 0
28880: PPUSH
28881: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28885: LD_VAR 0 2
28889: PPUSH
28890: LD_INT 2
28892: PPUSH
28893: LD_INT 0
28895: PPUSH
28896: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28900: LD_VAR 0 2
28904: PPUSH
28905: LD_INT 3
28907: PPUSH
28908: LD_INT 0
28910: PPUSH
28911: CALL_OW 277
// end ;
28915: PPOPN 2
28917: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28918: LD_EXP 38
28922: PUSH
28923: LD_EXP 66
28927: AND
28928: IFFALSE 29025
28930: GO 28932
28932: DISABLE
28933: LD_INT 0
28935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28936: LD_ADDR_VAR 0 1
28940: PUSH
28941: LD_INT 22
28943: PUSH
28944: LD_OWVAR 2
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 21
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 3
28965: PUSH
28966: LD_INT 23
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: PPUSH
28985: CALL_OW 69
28989: ST_TO_ADDR
// if not tmp then
28990: LD_VAR 0 1
28994: NOT
28995: IFFALSE 28999
// exit ;
28997: GO 29025
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28999: LD_VAR 0 1
29003: PUSH
29004: LD_INT 1
29006: PPUSH
29007: LD_VAR 0 1
29011: PPUSH
29012: CALL_OW 12
29016: ARRAY
29017: PPUSH
29018: LD_INT 200
29020: PPUSH
29021: CALL_OW 234
// end ;
29025: PPOPN 1
29027: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29028: LD_EXP 38
29032: PUSH
29033: LD_EXP 67
29037: AND
29038: IFFALSE 29117
29040: GO 29042
29042: DISABLE
29043: LD_INT 0
29045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29046: LD_ADDR_VAR 0 1
29050: PUSH
29051: LD_INT 22
29053: PUSH
29054: LD_OWVAR 2
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 21
29065: PUSH
29066: LD_INT 2
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PPUSH
29077: CALL_OW 69
29081: ST_TO_ADDR
// if not tmp then
29082: LD_VAR 0 1
29086: NOT
29087: IFFALSE 29091
// exit ;
29089: GO 29117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29091: LD_VAR 0 1
29095: PUSH
29096: LD_INT 1
29098: PPUSH
29099: LD_VAR 0 1
29103: PPUSH
29104: CALL_OW 12
29108: ARRAY
29109: PPUSH
29110: LD_INT 60
29112: PPUSH
29113: CALL_OW 234
// end ;
29117: PPOPN 1
29119: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29120: LD_EXP 38
29124: PUSH
29125: LD_EXP 68
29129: AND
29130: IFFALSE 29229
29132: GO 29134
29134: DISABLE
29135: LD_INT 0
29137: PPUSH
29138: PPUSH
// begin enable ;
29139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29140: LD_ADDR_VAR 0 1
29144: PUSH
29145: LD_INT 22
29147: PUSH
29148: LD_OWVAR 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 61
29159: PUSH
29160: EMPTY
29161: LIST
29162: PUSH
29163: LD_INT 33
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: PPUSH
29178: CALL_OW 69
29182: ST_TO_ADDR
// if not tmp then
29183: LD_VAR 0 1
29187: NOT
29188: IFFALSE 29192
// exit ;
29190: GO 29229
// for i in tmp do
29192: LD_ADDR_VAR 0 2
29196: PUSH
29197: LD_VAR 0 1
29201: PUSH
29202: FOR_IN
29203: IFFALSE 29227
// if IsControledBy ( i ) then
29205: LD_VAR 0 2
29209: PPUSH
29210: CALL_OW 312
29214: IFFALSE 29225
// ComUnlink ( i ) ;
29216: LD_VAR 0 2
29220: PPUSH
29221: CALL_OW 136
29225: GO 29202
29227: POP
29228: POP
// end ;
29229: PPOPN 2
29231: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29232: LD_EXP 38
29236: PUSH
29237: LD_EXP 69
29241: AND
29242: IFFALSE 29382
29244: GO 29246
29246: DISABLE
29247: LD_INT 0
29249: PPUSH
29250: PPUSH
// begin ToLua ( displayPowell(); ) ;
29251: LD_STRING displayPowell();
29253: PPUSH
29254: CALL_OW 559
// uc_side := 0 ;
29258: LD_ADDR_OWVAR 20
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// uc_nation := 2 ;
29266: LD_ADDR_OWVAR 21
29270: PUSH
29271: LD_INT 2
29273: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29274: LD_ADDR_OWVAR 37
29278: PUSH
29279: LD_INT 14
29281: ST_TO_ADDR
// vc_engine := engine_siberite ;
29282: LD_ADDR_OWVAR 39
29286: PUSH
29287: LD_INT 3
29289: ST_TO_ADDR
// vc_control := control_apeman ;
29290: LD_ADDR_OWVAR 38
29294: PUSH
29295: LD_INT 5
29297: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29298: LD_ADDR_OWVAR 40
29302: PUSH
29303: LD_INT 29
29305: ST_TO_ADDR
// un := CreateVehicle ;
29306: LD_ADDR_VAR 0 2
29310: PUSH
29311: CALL_OW 45
29315: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29316: LD_VAR 0 2
29320: PPUSH
29321: LD_INT 1
29323: PPUSH
29324: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29328: LD_INT 35
29330: PPUSH
29331: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29335: LD_VAR 0 2
29339: PPUSH
29340: LD_INT 22
29342: PUSH
29343: LD_OWVAR 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PPUSH
29352: CALL_OW 69
29356: PPUSH
29357: LD_VAR 0 2
29361: PPUSH
29362: CALL_OW 74
29366: PPUSH
29367: CALL_OW 115
// until IsDead ( un ) ;
29371: LD_VAR 0 2
29375: PPUSH
29376: CALL_OW 301
29380: IFFALSE 29328
// end ;
29382: PPOPN 2
29384: END
// every 0 0$1 trigger StreamModeActive and sStu do
29385: LD_EXP 38
29389: PUSH
29390: LD_EXP 77
29394: AND
29395: IFFALSE 29411
29397: GO 29399
29399: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29400: LD_STRING displayStucuk();
29402: PPUSH
29403: CALL_OW 559
// ResetFog ;
29407: CALL_OW 335
// end ;
29411: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29412: LD_EXP 38
29416: PUSH
29417: LD_EXP 70
29421: AND
29422: IFFALSE 29563
29424: GO 29426
29426: DISABLE
29427: LD_INT 0
29429: PPUSH
29430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29431: LD_ADDR_VAR 0 2
29435: PUSH
29436: LD_INT 22
29438: PUSH
29439: LD_OWVAR 2
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 21
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PPUSH
29462: CALL_OW 69
29466: ST_TO_ADDR
// if not tmp then
29467: LD_VAR 0 2
29471: NOT
29472: IFFALSE 29476
// exit ;
29474: GO 29563
// un := tmp [ rand ( 1 , tmp ) ] ;
29476: LD_ADDR_VAR 0 1
29480: PUSH
29481: LD_VAR 0 2
29485: PUSH
29486: LD_INT 1
29488: PPUSH
29489: LD_VAR 0 2
29493: PPUSH
29494: CALL_OW 12
29498: ARRAY
29499: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29500: LD_VAR 0 1
29504: PPUSH
29505: LD_INT 0
29507: PPUSH
29508: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29512: LD_VAR 0 1
29516: PPUSH
29517: LD_OWVAR 3
29521: PUSH
29522: LD_VAR 0 1
29526: DIFF
29527: PPUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 74
29537: PPUSH
29538: CALL_OW 115
// wait ( 0 0$20 ) ;
29542: LD_INT 700
29544: PPUSH
29545: CALL_OW 67
// SetSide ( un , your_side ) ;
29549: LD_VAR 0 1
29553: PPUSH
29554: LD_OWVAR 2
29558: PPUSH
29559: CALL_OW 235
// end ;
29563: PPOPN 2
29565: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29566: LD_EXP 38
29570: PUSH
29571: LD_EXP 71
29575: AND
29576: IFFALSE 29682
29578: GO 29580
29580: DISABLE
29581: LD_INT 0
29583: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29584: LD_ADDR_VAR 0 1
29588: PUSH
29589: LD_INT 22
29591: PUSH
29592: LD_OWVAR 2
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 30
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 30
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PPUSH
29633: CALL_OW 69
29637: ST_TO_ADDR
// if not depot then
29638: LD_VAR 0 1
29642: NOT
29643: IFFALSE 29647
// exit ;
29645: GO 29682
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29647: LD_VAR 0 1
29651: PUSH
29652: LD_INT 1
29654: ARRAY
29655: PPUSH
29656: CALL_OW 250
29660: PPUSH
29661: LD_VAR 0 1
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PPUSH
29670: CALL_OW 251
29674: PPUSH
29675: LD_INT 70
29677: PPUSH
29678: CALL_OW 495
// end ;
29682: PPOPN 1
29684: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29685: LD_EXP 38
29689: PUSH
29690: LD_EXP 72
29694: AND
29695: IFFALSE 29906
29697: GO 29699
29699: DISABLE
29700: LD_INT 0
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
29706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29707: LD_ADDR_VAR 0 5
29711: PUSH
29712: LD_INT 22
29714: PUSH
29715: LD_OWVAR 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 21
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PPUSH
29738: CALL_OW 69
29742: ST_TO_ADDR
// if not tmp then
29743: LD_VAR 0 5
29747: NOT
29748: IFFALSE 29752
// exit ;
29750: GO 29906
// for i in tmp do
29752: LD_ADDR_VAR 0 1
29756: PUSH
29757: LD_VAR 0 5
29761: PUSH
29762: FOR_IN
29763: IFFALSE 29904
// begin d := rand ( 0 , 5 ) ;
29765: LD_ADDR_VAR 0 4
29769: PUSH
29770: LD_INT 0
29772: PPUSH
29773: LD_INT 5
29775: PPUSH
29776: CALL_OW 12
29780: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29781: LD_ADDR_VAR 0 2
29785: PUSH
29786: LD_VAR 0 1
29790: PPUSH
29791: CALL_OW 250
29795: PPUSH
29796: LD_VAR 0 4
29800: PPUSH
29801: LD_INT 3
29803: PPUSH
29804: LD_INT 12
29806: PPUSH
29807: CALL_OW 12
29811: PPUSH
29812: CALL_OW 272
29816: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29817: LD_ADDR_VAR 0 3
29821: PUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 251
29831: PPUSH
29832: LD_VAR 0 4
29836: PPUSH
29837: LD_INT 3
29839: PPUSH
29840: LD_INT 12
29842: PPUSH
29843: CALL_OW 12
29847: PPUSH
29848: CALL_OW 273
29852: ST_TO_ADDR
// if ValidHex ( x , y ) then
29853: LD_VAR 0 2
29857: PPUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: CALL_OW 488
29867: IFFALSE 29902
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29869: LD_VAR 0 1
29873: PPUSH
29874: LD_VAR 0 2
29878: PPUSH
29879: LD_VAR 0 3
29883: PPUSH
29884: LD_INT 3
29886: PPUSH
29887: LD_INT 6
29889: PPUSH
29890: CALL_OW 12
29894: PPUSH
29895: LD_INT 1
29897: PPUSH
29898: CALL_OW 483
// end ;
29902: GO 29762
29904: POP
29905: POP
// end ;
29906: PPOPN 5
29908: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29909: LD_EXP 38
29913: PUSH
29914: LD_EXP 73
29918: AND
29919: IFFALSE 30013
29921: GO 29923
29923: DISABLE
29924: LD_INT 0
29926: PPUSH
29927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29928: LD_ADDR_VAR 0 2
29932: PUSH
29933: LD_INT 22
29935: PUSH
29936: LD_OWVAR 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 32
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 21
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: PPUSH
29970: CALL_OW 69
29974: ST_TO_ADDR
// if not tmp then
29975: LD_VAR 0 2
29979: NOT
29980: IFFALSE 29984
// exit ;
29982: GO 30013
// for i in tmp do
29984: LD_ADDR_VAR 0 1
29988: PUSH
29989: LD_VAR 0 2
29993: PUSH
29994: FOR_IN
29995: IFFALSE 30011
// SetFuel ( i , 0 ) ;
29997: LD_VAR 0 1
30001: PPUSH
30002: LD_INT 0
30004: PPUSH
30005: CALL_OW 240
30009: GO 29994
30011: POP
30012: POP
// end ;
30013: PPOPN 2
30015: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30016: LD_EXP 38
30020: PUSH
30021: LD_EXP 74
30025: AND
30026: IFFALSE 30092
30028: GO 30030
30030: DISABLE
30031: LD_INT 0
30033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30034: LD_ADDR_VAR 0 1
30038: PUSH
30039: LD_INT 22
30041: PUSH
30042: LD_OWVAR 2
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 30
30053: PUSH
30054: LD_INT 29
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PPUSH
30065: CALL_OW 69
30069: ST_TO_ADDR
// if not tmp then
30070: LD_VAR 0 1
30074: NOT
30075: IFFALSE 30079
// exit ;
30077: GO 30092
// DestroyUnit ( tmp [ 1 ] ) ;
30079: LD_VAR 0 1
30083: PUSH
30084: LD_INT 1
30086: ARRAY
30087: PPUSH
30088: CALL_OW 65
// end ;
30092: PPOPN 1
30094: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30095: LD_EXP 38
30099: PUSH
30100: LD_EXP 76
30104: AND
30105: IFFALSE 30234
30107: GO 30109
30109: DISABLE
30110: LD_INT 0
30112: PPUSH
// begin uc_side := 0 ;
30113: LD_ADDR_OWVAR 20
30117: PUSH
30118: LD_INT 0
30120: ST_TO_ADDR
// uc_nation := nation_arabian ;
30121: LD_ADDR_OWVAR 21
30125: PUSH
30126: LD_INT 2
30128: ST_TO_ADDR
// hc_gallery :=  ;
30129: LD_ADDR_OWVAR 33
30133: PUSH
30134: LD_STRING 
30136: ST_TO_ADDR
// hc_name :=  ;
30137: LD_ADDR_OWVAR 26
30141: PUSH
30142: LD_STRING 
30144: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30145: LD_INT 1
30147: PPUSH
30148: LD_INT 11
30150: PPUSH
30151: LD_INT 10
30153: PPUSH
30154: CALL_OW 380
// un := CreateHuman ;
30158: LD_ADDR_VAR 0 1
30162: PUSH
30163: CALL_OW 44
30167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30168: LD_VAR 0 1
30172: PPUSH
30173: LD_INT 1
30175: PPUSH
30176: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30180: LD_INT 35
30182: PPUSH
30183: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30187: LD_VAR 0 1
30191: PPUSH
30192: LD_INT 22
30194: PUSH
30195: LD_OWVAR 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PPUSH
30204: CALL_OW 69
30208: PPUSH
30209: LD_VAR 0 1
30213: PPUSH
30214: CALL_OW 74
30218: PPUSH
30219: CALL_OW 115
// until IsDead ( un ) ;
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 301
30232: IFFALSE 30180
// end ;
30234: PPOPN 1
30236: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30237: LD_EXP 38
30241: PUSH
30242: LD_EXP 78
30246: AND
30247: IFFALSE 30259
30249: GO 30251
30251: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30252: LD_STRING earthquake(getX(game), 0, 32)
30254: PPUSH
30255: CALL_OW 559
30259: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30260: LD_EXP 38
30264: PUSH
30265: LD_EXP 79
30269: AND
30270: IFFALSE 30361
30272: GO 30274
30274: DISABLE
30275: LD_INT 0
30277: PPUSH
// begin enable ;
30278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30279: LD_ADDR_VAR 0 1
30283: PUSH
30284: LD_INT 22
30286: PUSH
30287: LD_OWVAR 2
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 21
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 33
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: PPUSH
30321: CALL_OW 69
30325: ST_TO_ADDR
// if not tmp then
30326: LD_VAR 0 1
30330: NOT
30331: IFFALSE 30335
// exit ;
30333: GO 30361
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30335: LD_VAR 0 1
30339: PUSH
30340: LD_INT 1
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 12
30352: ARRAY
30353: PPUSH
30354: LD_INT 1
30356: PPUSH
30357: CALL_OW 234
// end ;
30361: PPOPN 1
30363: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30364: LD_EXP 38
30368: PUSH
30369: LD_EXP 80
30373: AND
30374: IFFALSE 30515
30376: GO 30378
30378: DISABLE
30379: LD_INT 0
30381: PPUSH
30382: PPUSH
30383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30384: LD_ADDR_VAR 0 3
30388: PUSH
30389: LD_INT 22
30391: PUSH
30392: LD_OWVAR 2
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 25
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PPUSH
30415: CALL_OW 69
30419: ST_TO_ADDR
// if not tmp then
30420: LD_VAR 0 3
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 30515
// un := tmp [ rand ( 1 , tmp ) ] ;
30429: LD_ADDR_VAR 0 2
30433: PUSH
30434: LD_VAR 0 3
30438: PUSH
30439: LD_INT 1
30441: PPUSH
30442: LD_VAR 0 3
30446: PPUSH
30447: CALL_OW 12
30451: ARRAY
30452: ST_TO_ADDR
// if Crawls ( un ) then
30453: LD_VAR 0 2
30457: PPUSH
30458: CALL_OW 318
30462: IFFALSE 30473
// ComWalk ( un ) ;
30464: LD_VAR 0 2
30468: PPUSH
30469: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30473: LD_VAR 0 2
30477: PPUSH
30478: LD_INT 9
30480: PPUSH
30481: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30485: LD_INT 28
30487: PPUSH
30488: LD_OWVAR 2
30492: PPUSH
30493: LD_INT 2
30495: PPUSH
30496: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30500: LD_INT 29
30502: PPUSH
30503: LD_OWVAR 2
30507: PPUSH
30508: LD_INT 2
30510: PPUSH
30511: CALL_OW 322
// end ;
30515: PPOPN 3
30517: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30518: LD_EXP 38
30522: PUSH
30523: LD_EXP 81
30527: AND
30528: IFFALSE 30639
30530: GO 30532
30532: DISABLE
30533: LD_INT 0
30535: PPUSH
30536: PPUSH
30537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30538: LD_ADDR_VAR 0 3
30542: PUSH
30543: LD_INT 22
30545: PUSH
30546: LD_OWVAR 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 25
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PPUSH
30569: CALL_OW 69
30573: ST_TO_ADDR
// if not tmp then
30574: LD_VAR 0 3
30578: NOT
30579: IFFALSE 30583
// exit ;
30581: GO 30639
// un := tmp [ rand ( 1 , tmp ) ] ;
30583: LD_ADDR_VAR 0 2
30587: PUSH
30588: LD_VAR 0 3
30592: PUSH
30593: LD_INT 1
30595: PPUSH
30596: LD_VAR 0 3
30600: PPUSH
30601: CALL_OW 12
30605: ARRAY
30606: ST_TO_ADDR
// if Crawls ( un ) then
30607: LD_VAR 0 2
30611: PPUSH
30612: CALL_OW 318
30616: IFFALSE 30627
// ComWalk ( un ) ;
30618: LD_VAR 0 2
30622: PPUSH
30623: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30627: LD_VAR 0 2
30631: PPUSH
30632: LD_INT 8
30634: PPUSH
30635: CALL_OW 336
// end ;
30639: PPOPN 3
30641: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30642: LD_EXP 38
30646: PUSH
30647: LD_EXP 82
30651: AND
30652: IFFALSE 30796
30654: GO 30656
30656: DISABLE
30657: LD_INT 0
30659: PPUSH
30660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30661: LD_ADDR_VAR 0 2
30665: PUSH
30666: LD_INT 22
30668: PUSH
30669: LD_OWVAR 2
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 21
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 34
30693: PUSH
30694: LD_INT 12
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 34
30703: PUSH
30704: LD_INT 51
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 34
30713: PUSH
30714: LD_INT 32
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: PPUSH
30732: CALL_OW 69
30736: ST_TO_ADDR
// if not tmp then
30737: LD_VAR 0 2
30741: NOT
30742: IFFALSE 30746
// exit ;
30744: GO 30796
// for i in tmp do
30746: LD_ADDR_VAR 0 1
30750: PUSH
30751: LD_VAR 0 2
30755: PUSH
30756: FOR_IN
30757: IFFALSE 30794
// if GetCargo ( i , mat_artifact ) = 0 then
30759: LD_VAR 0 1
30763: PPUSH
30764: LD_INT 4
30766: PPUSH
30767: CALL_OW 289
30771: PUSH
30772: LD_INT 0
30774: EQUAL
30775: IFFALSE 30792
// SetCargo ( i , mat_siberit , 100 ) ;
30777: LD_VAR 0 1
30781: PPUSH
30782: LD_INT 3
30784: PPUSH
30785: LD_INT 100
30787: PPUSH
30788: CALL_OW 290
30792: GO 30756
30794: POP
30795: POP
// end ;
30796: PPOPN 2
30798: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30799: LD_EXP 38
30803: PUSH
30804: LD_EXP 83
30808: AND
30809: IFFALSE 30992
30811: GO 30813
30813: DISABLE
30814: LD_INT 0
30816: PPUSH
30817: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30818: LD_ADDR_VAR 0 2
30822: PUSH
30823: LD_INT 22
30825: PUSH
30826: LD_OWVAR 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PPUSH
30835: CALL_OW 69
30839: ST_TO_ADDR
// if not tmp then
30840: LD_VAR 0 2
30844: NOT
30845: IFFALSE 30849
// exit ;
30847: GO 30992
// for i := 1 to 2 do
30849: LD_ADDR_VAR 0 1
30853: PUSH
30854: DOUBLE
30855: LD_INT 1
30857: DEC
30858: ST_TO_ADDR
30859: LD_INT 2
30861: PUSH
30862: FOR_TO
30863: IFFALSE 30990
// begin uc_side := your_side ;
30865: LD_ADDR_OWVAR 20
30869: PUSH
30870: LD_OWVAR 2
30874: ST_TO_ADDR
// uc_nation := nation_american ;
30875: LD_ADDR_OWVAR 21
30879: PUSH
30880: LD_INT 1
30882: ST_TO_ADDR
// vc_chassis := us_morphling ;
30883: LD_ADDR_OWVAR 37
30887: PUSH
30888: LD_INT 5
30890: ST_TO_ADDR
// vc_engine := engine_siberite ;
30891: LD_ADDR_OWVAR 39
30895: PUSH
30896: LD_INT 3
30898: ST_TO_ADDR
// vc_control := control_computer ;
30899: LD_ADDR_OWVAR 38
30903: PUSH
30904: LD_INT 3
30906: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30907: LD_ADDR_OWVAR 40
30911: PUSH
30912: LD_INT 10
30914: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30915: LD_VAR 0 2
30919: PUSH
30920: LD_INT 1
30922: ARRAY
30923: PPUSH
30924: CALL_OW 310
30928: NOT
30929: IFFALSE 30976
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30931: CALL_OW 45
30935: PPUSH
30936: LD_VAR 0 2
30940: PUSH
30941: LD_INT 1
30943: ARRAY
30944: PPUSH
30945: CALL_OW 250
30949: PPUSH
30950: LD_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: ARRAY
30958: PPUSH
30959: CALL_OW 251
30963: PPUSH
30964: LD_INT 12
30966: PPUSH
30967: LD_INT 1
30969: PPUSH
30970: CALL_OW 50
30974: GO 30988
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30976: CALL_OW 45
30980: PPUSH
30981: LD_INT 1
30983: PPUSH
30984: CALL_OW 51
// end ;
30988: GO 30862
30990: POP
30991: POP
// end ;
30992: PPOPN 2
30994: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30995: LD_EXP 38
30999: PUSH
31000: LD_EXP 84
31004: AND
31005: IFFALSE 31227
31007: GO 31009
31009: DISABLE
31010: LD_INT 0
31012: PPUSH
31013: PPUSH
31014: PPUSH
31015: PPUSH
31016: PPUSH
31017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31018: LD_ADDR_VAR 0 6
31022: PUSH
31023: LD_INT 22
31025: PUSH
31026: LD_OWVAR 2
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 21
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: LD_INT 23
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: PPUSH
31067: CALL_OW 69
31071: ST_TO_ADDR
// if not tmp then
31072: LD_VAR 0 6
31076: NOT
31077: IFFALSE 31081
// exit ;
31079: GO 31227
// s1 := rand ( 1 , 4 ) ;
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 1
31088: PPUSH
31089: LD_INT 4
31091: PPUSH
31092: CALL_OW 12
31096: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31097: LD_ADDR_VAR 0 4
31101: PUSH
31102: LD_VAR 0 6
31106: PUSH
31107: LD_INT 1
31109: ARRAY
31110: PPUSH
31111: LD_VAR 0 2
31115: PPUSH
31116: CALL_OW 259
31120: ST_TO_ADDR
// if s1 = 1 then
31121: LD_VAR 0 2
31125: PUSH
31126: LD_INT 1
31128: EQUAL
31129: IFFALSE 31149
// s2 := rand ( 2 , 4 ) else
31131: LD_ADDR_VAR 0 3
31135: PUSH
31136: LD_INT 2
31138: PPUSH
31139: LD_INT 4
31141: PPUSH
31142: CALL_OW 12
31146: ST_TO_ADDR
31147: GO 31157
// s2 := 1 ;
31149: LD_ADDR_VAR 0 3
31153: PUSH
31154: LD_INT 1
31156: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31157: LD_ADDR_VAR 0 5
31161: PUSH
31162: LD_VAR 0 6
31166: PUSH
31167: LD_INT 1
31169: ARRAY
31170: PPUSH
31171: LD_VAR 0 3
31175: PPUSH
31176: CALL_OW 259
31180: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31181: LD_VAR 0 6
31185: PUSH
31186: LD_INT 1
31188: ARRAY
31189: PPUSH
31190: LD_VAR 0 2
31194: PPUSH
31195: LD_VAR 0 5
31199: PPUSH
31200: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31204: LD_VAR 0 6
31208: PUSH
31209: LD_INT 1
31211: ARRAY
31212: PPUSH
31213: LD_VAR 0 3
31217: PPUSH
31218: LD_VAR 0 4
31222: PPUSH
31223: CALL_OW 237
// end ;
31227: PPOPN 6
31229: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31230: LD_EXP 38
31234: PUSH
31235: LD_EXP 85
31239: AND
31240: IFFALSE 31319
31242: GO 31244
31244: DISABLE
31245: LD_INT 0
31247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31248: LD_ADDR_VAR 0 1
31252: PUSH
31253: LD_INT 22
31255: PUSH
31256: LD_OWVAR 2
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 30
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PPUSH
31279: CALL_OW 69
31283: ST_TO_ADDR
// if not tmp then
31284: LD_VAR 0 1
31288: NOT
31289: IFFALSE 31293
// exit ;
31291: GO 31319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31293: LD_VAR 0 1
31297: PUSH
31298: LD_INT 1
31300: PPUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 12
31310: ARRAY
31311: PPUSH
31312: LD_INT 1
31314: PPUSH
31315: CALL_OW 234
// end ;
31319: PPOPN 1
31321: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31322: LD_EXP 38
31326: PUSH
31327: LD_EXP 86
31331: AND
31332: IFFALSE 31444
31334: GO 31336
31336: DISABLE
31337: LD_INT 0
31339: PPUSH
31340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31341: LD_ADDR_VAR 0 2
31345: PUSH
31346: LD_INT 22
31348: PUSH
31349: LD_OWVAR 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 30
31363: PUSH
31364: LD_INT 27
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 30
31373: PUSH
31374: LD_INT 26
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 30
31383: PUSH
31384: LD_INT 28
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PPUSH
31401: CALL_OW 69
31405: ST_TO_ADDR
// if not tmp then
31406: LD_VAR 0 2
31410: NOT
31411: IFFALSE 31415
// exit ;
31413: GO 31444
// for i in tmp do
31415: LD_ADDR_VAR 0 1
31419: PUSH
31420: LD_VAR 0 2
31424: PUSH
31425: FOR_IN
31426: IFFALSE 31442
// SetLives ( i , 1 ) ;
31428: LD_VAR 0 1
31432: PPUSH
31433: LD_INT 1
31435: PPUSH
31436: CALL_OW 234
31440: GO 31425
31442: POP
31443: POP
// end ;
31444: PPOPN 2
31446: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31447: LD_EXP 38
31451: PUSH
31452: LD_EXP 87
31456: AND
31457: IFFALSE 31744
31459: GO 31461
31461: DISABLE
31462: LD_INT 0
31464: PPUSH
31465: PPUSH
31466: PPUSH
// begin i := rand ( 1 , 7 ) ;
31467: LD_ADDR_VAR 0 1
31471: PUSH
31472: LD_INT 1
31474: PPUSH
31475: LD_INT 7
31477: PPUSH
31478: CALL_OW 12
31482: ST_TO_ADDR
// case i of 1 :
31483: LD_VAR 0 1
31487: PUSH
31488: LD_INT 1
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31506
31496: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31497: LD_STRING earthquake(getX(game), 0, 32)
31499: PPUSH
31500: CALL_OW 559
31504: GO 31744
31506: LD_INT 2
31508: DOUBLE
31509: EQUAL
31510: IFTRUE 31514
31512: GO 31528
31514: POP
// begin ToLua ( displayStucuk(); ) ;
31515: LD_STRING displayStucuk();
31517: PPUSH
31518: CALL_OW 559
// ResetFog ;
31522: CALL_OW 335
// end ; 3 :
31526: GO 31744
31528: LD_INT 3
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31640
31536: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31537: LD_ADDR_VAR 0 2
31541: PUSH
31542: LD_INT 22
31544: PUSH
31545: LD_OWVAR 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 25
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 69
31572: ST_TO_ADDR
// if not tmp then
31573: LD_VAR 0 2
31577: NOT
31578: IFFALSE 31582
// exit ;
31580: GO 31744
// un := tmp [ rand ( 1 , tmp ) ] ;
31582: LD_ADDR_VAR 0 3
31586: PUSH
31587: LD_VAR 0 2
31591: PUSH
31592: LD_INT 1
31594: PPUSH
31595: LD_VAR 0 2
31599: PPUSH
31600: CALL_OW 12
31604: ARRAY
31605: ST_TO_ADDR
// if Crawls ( un ) then
31606: LD_VAR 0 3
31610: PPUSH
31611: CALL_OW 318
31615: IFFALSE 31626
// ComWalk ( un ) ;
31617: LD_VAR 0 3
31621: PPUSH
31622: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31626: LD_VAR 0 3
31630: PPUSH
31631: LD_INT 8
31633: PPUSH
31634: CALL_OW 336
// end ; 4 :
31638: GO 31744
31640: LD_INT 4
31642: DOUBLE
31643: EQUAL
31644: IFTRUE 31648
31646: GO 31722
31648: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31649: LD_ADDR_VAR 0 2
31653: PUSH
31654: LD_INT 22
31656: PUSH
31657: LD_OWVAR 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 30
31668: PUSH
31669: LD_INT 29
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PPUSH
31680: CALL_OW 69
31684: ST_TO_ADDR
// if not tmp then
31685: LD_VAR 0 2
31689: NOT
31690: IFFALSE 31694
// exit ;
31692: GO 31744
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31694: LD_VAR 0 2
31698: PUSH
31699: LD_INT 1
31701: ARRAY
31702: PPUSH
31703: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31707: LD_VAR 0 2
31711: PUSH
31712: LD_INT 1
31714: ARRAY
31715: PPUSH
31716: CALL_OW 65
// end ; 5 .. 7 :
31720: GO 31744
31722: LD_INT 5
31724: DOUBLE
31725: GREATEREQUAL
31726: IFFALSE 31734
31728: LD_INT 7
31730: DOUBLE
31731: LESSEQUAL
31732: IFTRUE 31736
31734: GO 31743
31736: POP
// StreamSibBomb ; end ;
31737: CALL 27981 0 0
31741: GO 31744
31743: POP
// end ;
31744: PPOPN 3
31746: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31747: LD_EXP 38
31751: PUSH
31752: LD_EXP 88
31756: AND
31757: IFFALSE 31913
31759: GO 31761
31761: DISABLE
31762: LD_INT 0
31764: PPUSH
31765: PPUSH
31766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31767: LD_ADDR_VAR 0 2
31771: PUSH
31772: LD_INT 81
31774: PUSH
31775: LD_OWVAR 2
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: LD_INT 21
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 21
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PPUSH
31816: CALL_OW 69
31820: ST_TO_ADDR
// if not tmp then
31821: LD_VAR 0 2
31825: NOT
31826: IFFALSE 31830
// exit ;
31828: GO 31913
// p := 0 ;
31830: LD_ADDR_VAR 0 3
31834: PUSH
31835: LD_INT 0
31837: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31838: LD_INT 35
31840: PPUSH
31841: CALL_OW 67
// p := p + 1 ;
31845: LD_ADDR_VAR 0 3
31849: PUSH
31850: LD_VAR 0 3
31854: PUSH
31855: LD_INT 1
31857: PLUS
31858: ST_TO_ADDR
// for i in tmp do
31859: LD_ADDR_VAR 0 1
31863: PUSH
31864: LD_VAR 0 2
31868: PUSH
31869: FOR_IN
31870: IFFALSE 31901
// if GetLives ( i ) < 1000 then
31872: LD_VAR 0 1
31876: PPUSH
31877: CALL_OW 256
31881: PUSH
31882: LD_INT 1000
31884: LESS
31885: IFFALSE 31899
// SetLives ( i , 1000 ) ;
31887: LD_VAR 0 1
31891: PPUSH
31892: LD_INT 1000
31894: PPUSH
31895: CALL_OW 234
31899: GO 31869
31901: POP
31902: POP
// until p > 20 ;
31903: LD_VAR 0 3
31907: PUSH
31908: LD_INT 20
31910: GREATER
31911: IFFALSE 31838
// end ;
31913: PPOPN 3
31915: END
// every 0 0$1 trigger StreamModeActive and sTime do
31916: LD_EXP 38
31920: PUSH
31921: LD_EXP 89
31925: AND
31926: IFFALSE 31961
31928: GO 31930
31930: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31931: LD_INT 28
31933: PPUSH
31934: LD_OWVAR 2
31938: PPUSH
31939: LD_INT 2
31941: PPUSH
31942: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31946: LD_INT 30
31948: PPUSH
31949: LD_OWVAR 2
31953: PPUSH
31954: LD_INT 2
31956: PPUSH
31957: CALL_OW 322
// end ;
31961: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31962: LD_EXP 38
31966: PUSH
31967: LD_EXP 90
31971: AND
31972: IFFALSE 32093
31974: GO 31976
31976: DISABLE
31977: LD_INT 0
31979: PPUSH
31980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31981: LD_ADDR_VAR 0 2
31985: PUSH
31986: LD_INT 22
31988: PUSH
31989: LD_OWVAR 2
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 21
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: LD_INT 23
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: PPUSH
32030: CALL_OW 69
32034: ST_TO_ADDR
// if not tmp then
32035: LD_VAR 0 2
32039: NOT
32040: IFFALSE 32044
// exit ;
32042: GO 32093
// for i in tmp do
32044: LD_ADDR_VAR 0 1
32048: PUSH
32049: LD_VAR 0 2
32053: PUSH
32054: FOR_IN
32055: IFFALSE 32091
// begin if Crawls ( i ) then
32057: LD_VAR 0 1
32061: PPUSH
32062: CALL_OW 318
32066: IFFALSE 32077
// ComWalk ( i ) ;
32068: LD_VAR 0 1
32072: PPUSH
32073: CALL_OW 138
// SetClass ( i , 2 ) ;
32077: LD_VAR 0 1
32081: PPUSH
32082: LD_INT 2
32084: PPUSH
32085: CALL_OW 336
// end ;
32089: GO 32054
32091: POP
32092: POP
// end ;
32093: PPOPN 2
32095: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32096: LD_EXP 38
32100: PUSH
32101: LD_EXP 91
32105: AND
32106: IFFALSE 32394
32108: GO 32110
32110: DISABLE
32111: LD_INT 0
32113: PPUSH
32114: PPUSH
32115: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32116: LD_OWVAR 2
32120: PPUSH
32121: LD_INT 9
32123: PPUSH
32124: LD_INT 1
32126: PPUSH
32127: LD_INT 1
32129: PPUSH
32130: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32134: LD_INT 9
32136: PPUSH
32137: LD_OWVAR 2
32141: PPUSH
32142: CALL_OW 343
// uc_side := 9 ;
32146: LD_ADDR_OWVAR 20
32150: PUSH
32151: LD_INT 9
32153: ST_TO_ADDR
// uc_nation := 2 ;
32154: LD_ADDR_OWVAR 21
32158: PUSH
32159: LD_INT 2
32161: ST_TO_ADDR
// hc_name := Dark Warrior ;
32162: LD_ADDR_OWVAR 26
32166: PUSH
32167: LD_STRING Dark Warrior
32169: ST_TO_ADDR
// hc_gallery :=  ;
32170: LD_ADDR_OWVAR 33
32174: PUSH
32175: LD_STRING 
32177: ST_TO_ADDR
// hc_noskilllimit := true ;
32178: LD_ADDR_OWVAR 76
32182: PUSH
32183: LD_INT 1
32185: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32186: LD_ADDR_OWVAR 31
32190: PUSH
32191: LD_INT 30
32193: PUSH
32194: LD_INT 30
32196: PUSH
32197: LD_INT 30
32199: PUSH
32200: LD_INT 30
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: ST_TO_ADDR
// un := CreateHuman ;
32209: LD_ADDR_VAR 0 3
32213: PUSH
32214: CALL_OW 44
32218: ST_TO_ADDR
// hc_noskilllimit := false ;
32219: LD_ADDR_OWVAR 76
32223: PUSH
32224: LD_INT 0
32226: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32227: LD_VAR 0 3
32231: PPUSH
32232: LD_INT 1
32234: PPUSH
32235: CALL_OW 51
// ToLua ( playRanger() ) ;
32239: LD_STRING playRanger()
32241: PPUSH
32242: CALL_OW 559
// p := 0 ;
32246: LD_ADDR_VAR 0 2
32250: PUSH
32251: LD_INT 0
32253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32254: LD_INT 35
32256: PPUSH
32257: CALL_OW 67
// p := p + 1 ;
32261: LD_ADDR_VAR 0 2
32265: PUSH
32266: LD_VAR 0 2
32270: PUSH
32271: LD_INT 1
32273: PLUS
32274: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32275: LD_VAR 0 3
32279: PPUSH
32280: CALL_OW 256
32284: PUSH
32285: LD_INT 1000
32287: LESS
32288: IFFALSE 32302
// SetLives ( un , 1000 ) ;
32290: LD_VAR 0 3
32294: PPUSH
32295: LD_INT 1000
32297: PPUSH
32298: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32302: LD_VAR 0 3
32306: PPUSH
32307: LD_INT 81
32309: PUSH
32310: LD_OWVAR 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 91
32321: PUSH
32322: LD_VAR 0 3
32326: PUSH
32327: LD_INT 30
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PPUSH
32339: CALL_OW 69
32343: PPUSH
32344: LD_VAR 0 3
32348: PPUSH
32349: CALL_OW 74
32353: PPUSH
32354: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32358: LD_VAR 0 2
32362: PUSH
32363: LD_INT 80
32365: GREATER
32366: PUSH
32367: LD_VAR 0 3
32371: PPUSH
32372: CALL_OW 301
32376: OR
32377: IFFALSE 32254
// if un then
32379: LD_VAR 0 3
32383: IFFALSE 32394
// RemoveUnit ( un ) ;
32385: LD_VAR 0 3
32389: PPUSH
32390: CALL_OW 64
// end ;
32394: PPOPN 3
32396: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32397: LD_EXP 92
32401: IFFALSE 32517
32403: GO 32405
32405: DISABLE
32406: LD_INT 0
32408: PPUSH
32409: PPUSH
32410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32411: LD_ADDR_VAR 0 2
32415: PUSH
32416: LD_INT 81
32418: PUSH
32419: LD_OWVAR 2
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 21
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PPUSH
32442: CALL_OW 69
32446: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32447: LD_STRING playComputer()
32449: PPUSH
32450: CALL_OW 559
// if not tmp then
32454: LD_VAR 0 2
32458: NOT
32459: IFFALSE 32463
// exit ;
32461: GO 32517
// for i in tmp do
32463: LD_ADDR_VAR 0 1
32467: PUSH
32468: LD_VAR 0 2
32472: PUSH
32473: FOR_IN
32474: IFFALSE 32515
// for j := 1 to 4 do
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: DOUBLE
32482: LD_INT 1
32484: DEC
32485: ST_TO_ADDR
32486: LD_INT 4
32488: PUSH
32489: FOR_TO
32490: IFFALSE 32511
// SetSkill ( i , j , 10 ) ;
32492: LD_VAR 0 1
32496: PPUSH
32497: LD_VAR 0 3
32501: PPUSH
32502: LD_INT 10
32504: PPUSH
32505: CALL_OW 237
32509: GO 32489
32511: POP
32512: POP
32513: GO 32473
32515: POP
32516: POP
// end ;
32517: PPOPN 3
32519: END
// every 0 0$1 trigger s30 do var i , tmp ;
32520: LD_EXP 93
32524: IFFALSE 32593
32526: GO 32528
32528: DISABLE
32529: LD_INT 0
32531: PPUSH
32532: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32533: LD_ADDR_VAR 0 2
32537: PUSH
32538: LD_INT 22
32540: PUSH
32541: LD_OWVAR 2
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PPUSH
32550: CALL_OW 69
32554: ST_TO_ADDR
// if not tmp then
32555: LD_VAR 0 2
32559: NOT
32560: IFFALSE 32564
// exit ;
32562: GO 32593
// for i in tmp do
32564: LD_ADDR_VAR 0 1
32568: PUSH
32569: LD_VAR 0 2
32573: PUSH
32574: FOR_IN
32575: IFFALSE 32591
// SetLives ( i , 300 ) ;
32577: LD_VAR 0 1
32581: PPUSH
32582: LD_INT 300
32584: PPUSH
32585: CALL_OW 234
32589: GO 32574
32591: POP
32592: POP
// end ;
32593: PPOPN 2
32595: END
// every 0 0$1 trigger s60 do var i , tmp ;
32596: LD_EXP 94
32600: IFFALSE 32669
32602: GO 32604
32604: DISABLE
32605: LD_INT 0
32607: PPUSH
32608: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32609: LD_ADDR_VAR 0 2
32613: PUSH
32614: LD_INT 22
32616: PUSH
32617: LD_OWVAR 2
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PPUSH
32626: CALL_OW 69
32630: ST_TO_ADDR
// if not tmp then
32631: LD_VAR 0 2
32635: NOT
32636: IFFALSE 32640
// exit ;
32638: GO 32669
// for i in tmp do
32640: LD_ADDR_VAR 0 1
32644: PUSH
32645: LD_VAR 0 2
32649: PUSH
32650: FOR_IN
32651: IFFALSE 32667
// SetLives ( i , 600 ) ;
32653: LD_VAR 0 1
32657: PPUSH
32658: LD_INT 600
32660: PPUSH
32661: CALL_OW 234
32665: GO 32650
32667: POP
32668: POP
// end ;
32669: PPOPN 2
32671: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32672: LD_INT 0
32674: PPUSH
// case cmd of 301 :
32675: LD_VAR 0 1
32679: PUSH
32680: LD_INT 301
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32720
32688: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32689: LD_VAR 0 6
32693: PPUSH
32694: LD_VAR 0 7
32698: PPUSH
32699: LD_VAR 0 8
32703: PPUSH
32704: LD_VAR 0 4
32708: PPUSH
32709: LD_VAR 0 5
32713: PPUSH
32714: CALL 33921 0 5
32718: GO 32841
32720: LD_INT 302
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32765
32728: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32729: LD_VAR 0 6
32733: PPUSH
32734: LD_VAR 0 7
32738: PPUSH
32739: LD_VAR 0 8
32743: PPUSH
32744: LD_VAR 0 9
32748: PPUSH
32749: LD_VAR 0 4
32753: PPUSH
32754: LD_VAR 0 5
32758: PPUSH
32759: CALL 34012 0 6
32763: GO 32841
32765: LD_INT 303
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32810
32773: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32774: LD_VAR 0 6
32778: PPUSH
32779: LD_VAR 0 7
32783: PPUSH
32784: LD_VAR 0 8
32788: PPUSH
32789: LD_VAR 0 9
32793: PPUSH
32794: LD_VAR 0 4
32798: PPUSH
32799: LD_VAR 0 5
32803: PPUSH
32804: CALL 32846 0 6
32808: GO 32841
32810: LD_INT 304
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32840
32818: POP
// hHackTeleport ( unit , x , y ) ; end ;
32819: LD_VAR 0 2
32823: PPUSH
32824: LD_VAR 0 4
32828: PPUSH
32829: LD_VAR 0 5
32833: PPUSH
32834: CALL 34605 0 3
32838: GO 32841
32840: POP
// end ;
32841: LD_VAR 0 12
32845: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32846: LD_INT 0
32848: PPUSH
32849: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32850: LD_VAR 0 1
32854: PUSH
32855: LD_INT 1
32857: LESS
32858: PUSH
32859: LD_VAR 0 1
32863: PUSH
32864: LD_INT 3
32866: GREATER
32867: OR
32868: PUSH
32869: LD_VAR 0 5
32873: PPUSH
32874: LD_VAR 0 6
32878: PPUSH
32879: CALL_OW 428
32883: OR
32884: IFFALSE 32888
// exit ;
32886: GO 33608
// uc_side := your_side ;
32888: LD_ADDR_OWVAR 20
32892: PUSH
32893: LD_OWVAR 2
32897: ST_TO_ADDR
// uc_nation := nation ;
32898: LD_ADDR_OWVAR 21
32902: PUSH
32903: LD_VAR 0 1
32907: ST_TO_ADDR
// bc_level = 1 ;
32908: LD_ADDR_OWVAR 43
32912: PUSH
32913: LD_INT 1
32915: ST_TO_ADDR
// case btype of 1 :
32916: LD_VAR 0 2
32920: PUSH
32921: LD_INT 1
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32940
32929: POP
// bc_type := b_depot ; 2 :
32930: LD_ADDR_OWVAR 42
32934: PUSH
32935: LD_INT 0
32937: ST_TO_ADDR
32938: GO 33552
32940: LD_INT 2
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32948
32946: GO 32959
32948: POP
// bc_type := b_warehouse ; 3 :
32949: LD_ADDR_OWVAR 42
32953: PUSH
32954: LD_INT 1
32956: ST_TO_ADDR
32957: GO 33552
32959: LD_INT 3
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32967
32965: GO 32978
32967: POP
// bc_type := b_lab ; 4 .. 9 :
32968: LD_ADDR_OWVAR 42
32972: PUSH
32973: LD_INT 6
32975: ST_TO_ADDR
32976: GO 33552
32978: LD_INT 4
32980: DOUBLE
32981: GREATEREQUAL
32982: IFFALSE 32990
32984: LD_INT 9
32986: DOUBLE
32987: LESSEQUAL
32988: IFTRUE 32992
32990: GO 33044
32992: POP
// begin bc_type := b_lab_half ;
32993: LD_ADDR_OWVAR 42
32997: PUSH
32998: LD_INT 7
33000: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33001: LD_ADDR_OWVAR 44
33005: PUSH
33006: LD_INT 10
33008: PUSH
33009: LD_INT 11
33011: PUSH
33012: LD_INT 12
33014: PUSH
33015: LD_INT 15
33017: PUSH
33018: LD_INT 14
33020: PUSH
33021: LD_INT 13
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: PUSH
33032: LD_VAR 0 2
33036: PUSH
33037: LD_INT 3
33039: MINUS
33040: ARRAY
33041: ST_TO_ADDR
// end ; 10 .. 13 :
33042: GO 33552
33044: LD_INT 10
33046: DOUBLE
33047: GREATEREQUAL
33048: IFFALSE 33056
33050: LD_INT 13
33052: DOUBLE
33053: LESSEQUAL
33054: IFTRUE 33058
33056: GO 33135
33058: POP
// begin bc_type := b_lab_full ;
33059: LD_ADDR_OWVAR 42
33063: PUSH
33064: LD_INT 8
33066: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33067: LD_ADDR_OWVAR 44
33071: PUSH
33072: LD_INT 10
33074: PUSH
33075: LD_INT 12
33077: PUSH
33078: LD_INT 14
33080: PUSH
33081: LD_INT 13
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: PUSH
33090: LD_VAR 0 2
33094: PUSH
33095: LD_INT 9
33097: MINUS
33098: ARRAY
33099: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33100: LD_ADDR_OWVAR 45
33104: PUSH
33105: LD_INT 11
33107: PUSH
33108: LD_INT 15
33110: PUSH
33111: LD_INT 12
33113: PUSH
33114: LD_INT 15
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: PUSH
33123: LD_VAR 0 2
33127: PUSH
33128: LD_INT 9
33130: MINUS
33131: ARRAY
33132: ST_TO_ADDR
// end ; 14 :
33133: GO 33552
33135: LD_INT 14
33137: DOUBLE
33138: EQUAL
33139: IFTRUE 33143
33141: GO 33154
33143: POP
// bc_type := b_workshop ; 15 :
33144: LD_ADDR_OWVAR 42
33148: PUSH
33149: LD_INT 2
33151: ST_TO_ADDR
33152: GO 33552
33154: LD_INT 15
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33173
33162: POP
// bc_type := b_factory ; 16 :
33163: LD_ADDR_OWVAR 42
33167: PUSH
33168: LD_INT 3
33170: ST_TO_ADDR
33171: GO 33552
33173: LD_INT 16
33175: DOUBLE
33176: EQUAL
33177: IFTRUE 33181
33179: GO 33192
33181: POP
// bc_type := b_ext_gun ; 17 :
33182: LD_ADDR_OWVAR 42
33186: PUSH
33187: LD_INT 17
33189: ST_TO_ADDR
33190: GO 33552
33192: LD_INT 17
33194: DOUBLE
33195: EQUAL
33196: IFTRUE 33200
33198: GO 33228
33200: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33201: LD_ADDR_OWVAR 42
33205: PUSH
33206: LD_INT 19
33208: PUSH
33209: LD_INT 23
33211: PUSH
33212: LD_INT 19
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: PUSH
33220: LD_VAR 0 1
33224: ARRAY
33225: ST_TO_ADDR
33226: GO 33552
33228: LD_INT 18
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 33247
33236: POP
// bc_type := b_ext_radar ; 19 :
33237: LD_ADDR_OWVAR 42
33241: PUSH
33242: LD_INT 20
33244: ST_TO_ADDR
33245: GO 33552
33247: LD_INT 19
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33255
33253: GO 33266
33255: POP
// bc_type := b_ext_radio ; 20 :
33256: LD_ADDR_OWVAR 42
33260: PUSH
33261: LD_INT 22
33263: ST_TO_ADDR
33264: GO 33552
33266: LD_INT 20
33268: DOUBLE
33269: EQUAL
33270: IFTRUE 33274
33272: GO 33285
33274: POP
// bc_type := b_ext_siberium ; 21 :
33275: LD_ADDR_OWVAR 42
33279: PUSH
33280: LD_INT 21
33282: ST_TO_ADDR
33283: GO 33552
33285: LD_INT 21
33287: DOUBLE
33288: EQUAL
33289: IFTRUE 33293
33291: GO 33304
33293: POP
// bc_type := b_ext_computer ; 22 :
33294: LD_ADDR_OWVAR 42
33298: PUSH
33299: LD_INT 24
33301: ST_TO_ADDR
33302: GO 33552
33304: LD_INT 22
33306: DOUBLE
33307: EQUAL
33308: IFTRUE 33312
33310: GO 33323
33312: POP
// bc_type := b_ext_track ; 23 :
33313: LD_ADDR_OWVAR 42
33317: PUSH
33318: LD_INT 16
33320: ST_TO_ADDR
33321: GO 33552
33323: LD_INT 23
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33331
33329: GO 33342
33331: POP
// bc_type := b_ext_laser ; 24 :
33332: LD_ADDR_OWVAR 42
33336: PUSH
33337: LD_INT 25
33339: ST_TO_ADDR
33340: GO 33552
33342: LD_INT 24
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33361
33350: POP
// bc_type := b_control_tower ; 25 :
33351: LD_ADDR_OWVAR 42
33355: PUSH
33356: LD_INT 36
33358: ST_TO_ADDR
33359: GO 33552
33361: LD_INT 25
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33380
33369: POP
// bc_type := b_breastwork ; 26 :
33370: LD_ADDR_OWVAR 42
33374: PUSH
33375: LD_INT 31
33377: ST_TO_ADDR
33378: GO 33552
33380: LD_INT 26
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33399
33388: POP
// bc_type := b_bunker ; 27 :
33389: LD_ADDR_OWVAR 42
33393: PUSH
33394: LD_INT 32
33396: ST_TO_ADDR
33397: GO 33552
33399: LD_INT 27
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33407
33405: GO 33418
33407: POP
// bc_type := b_turret ; 28 :
33408: LD_ADDR_OWVAR 42
33412: PUSH
33413: LD_INT 33
33415: ST_TO_ADDR
33416: GO 33552
33418: LD_INT 28
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33437
33426: POP
// bc_type := b_armoury ; 29 :
33427: LD_ADDR_OWVAR 42
33431: PUSH
33432: LD_INT 4
33434: ST_TO_ADDR
33435: GO 33552
33437: LD_INT 29
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33456
33445: POP
// bc_type := b_barracks ; 30 :
33446: LD_ADDR_OWVAR 42
33450: PUSH
33451: LD_INT 5
33453: ST_TO_ADDR
33454: GO 33552
33456: LD_INT 30
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33475
33464: POP
// bc_type := b_solar_power ; 31 :
33465: LD_ADDR_OWVAR 42
33469: PUSH
33470: LD_INT 27
33472: ST_TO_ADDR
33473: GO 33552
33475: LD_INT 31
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33483
33481: GO 33494
33483: POP
// bc_type := b_oil_power ; 32 :
33484: LD_ADDR_OWVAR 42
33488: PUSH
33489: LD_INT 26
33491: ST_TO_ADDR
33492: GO 33552
33494: LD_INT 32
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33513
33502: POP
// bc_type := b_siberite_power ; 33 :
33503: LD_ADDR_OWVAR 42
33507: PUSH
33508: LD_INT 28
33510: ST_TO_ADDR
33511: GO 33552
33513: LD_INT 33
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33532
33521: POP
// bc_type := b_oil_mine ; 34 :
33522: LD_ADDR_OWVAR 42
33526: PUSH
33527: LD_INT 29
33529: ST_TO_ADDR
33530: GO 33552
33532: LD_INT 34
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33540
33538: GO 33551
33540: POP
// bc_type := b_siberite_mine ; end ;
33541: LD_ADDR_OWVAR 42
33545: PUSH
33546: LD_INT 30
33548: ST_TO_ADDR
33549: GO 33552
33551: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33552: LD_ADDR_VAR 0 8
33556: PUSH
33557: LD_VAR 0 5
33561: PPUSH
33562: LD_VAR 0 6
33566: PPUSH
33567: LD_VAR 0 3
33571: PPUSH
33572: CALL_OW 47
33576: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33577: LD_OWVAR 42
33581: PUSH
33582: LD_INT 32
33584: PUSH
33585: LD_INT 33
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: IN
33592: IFFALSE 33608
// PlaceWeaponTurret ( b , weapon ) ;
33594: LD_VAR 0 8
33598: PPUSH
33599: LD_VAR 0 4
33603: PPUSH
33604: CALL_OW 431
// end ;
33608: LD_VAR 0 7
33612: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33613: LD_INT 0
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33619: LD_ADDR_VAR 0 4
33623: PUSH
33624: LD_INT 22
33626: PUSH
33627: LD_OWVAR 2
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 30
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 30
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 69
33672: ST_TO_ADDR
// if not tmp then
33673: LD_VAR 0 4
33677: NOT
33678: IFFALSE 33682
// exit ;
33680: GO 33741
// for i in tmp do
33682: LD_ADDR_VAR 0 2
33686: PUSH
33687: LD_VAR 0 4
33691: PUSH
33692: FOR_IN
33693: IFFALSE 33739
// for j = 1 to 3 do
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: DOUBLE
33701: LD_INT 1
33703: DEC
33704: ST_TO_ADDR
33705: LD_INT 3
33707: PUSH
33708: FOR_TO
33709: IFFALSE 33735
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33711: LD_VAR 0 2
33715: PPUSH
33716: CALL_OW 274
33720: PPUSH
33721: LD_VAR 0 3
33725: PPUSH
33726: LD_INT 99999
33728: PPUSH
33729: CALL_OW 277
33733: GO 33708
33735: POP
33736: POP
33737: GO 33692
33739: POP
33740: POP
// end ;
33741: LD_VAR 0 1
33745: RET
// export function hHackSetLevel10 ; var i , j ; begin
33746: LD_INT 0
33748: PPUSH
33749: PPUSH
33750: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33751: LD_ADDR_VAR 0 2
33755: PUSH
33756: LD_INT 21
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PPUSH
33766: CALL_OW 69
33770: PUSH
33771: FOR_IN
33772: IFFALSE 33824
// if IsSelected ( i ) then
33774: LD_VAR 0 2
33778: PPUSH
33779: CALL_OW 306
33783: IFFALSE 33822
// begin for j := 1 to 4 do
33785: LD_ADDR_VAR 0 3
33789: PUSH
33790: DOUBLE
33791: LD_INT 1
33793: DEC
33794: ST_TO_ADDR
33795: LD_INT 4
33797: PUSH
33798: FOR_TO
33799: IFFALSE 33820
// SetSkill ( i , j , 10 ) ;
33801: LD_VAR 0 2
33805: PPUSH
33806: LD_VAR 0 3
33810: PPUSH
33811: LD_INT 10
33813: PPUSH
33814: CALL_OW 237
33818: GO 33798
33820: POP
33821: POP
// end ;
33822: GO 33771
33824: POP
33825: POP
// end ;
33826: LD_VAR 0 1
33830: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33831: LD_INT 0
33833: PPUSH
33834: PPUSH
33835: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33836: LD_ADDR_VAR 0 2
33840: PUSH
33841: LD_INT 22
33843: PUSH
33844: LD_OWVAR 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 21
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PPUSH
33867: CALL_OW 69
33871: PUSH
33872: FOR_IN
33873: IFFALSE 33914
// begin for j := 1 to 4 do
33875: LD_ADDR_VAR 0 3
33879: PUSH
33880: DOUBLE
33881: LD_INT 1
33883: DEC
33884: ST_TO_ADDR
33885: LD_INT 4
33887: PUSH
33888: FOR_TO
33889: IFFALSE 33910
// SetSkill ( i , j , 10 ) ;
33891: LD_VAR 0 2
33895: PPUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: LD_INT 10
33903: PPUSH
33904: CALL_OW 237
33908: GO 33888
33910: POP
33911: POP
// end ;
33912: GO 33872
33914: POP
33915: POP
// end ;
33916: LD_VAR 0 1
33920: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33921: LD_INT 0
33923: PPUSH
// uc_side := your_side ;
33924: LD_ADDR_OWVAR 20
33928: PUSH
33929: LD_OWVAR 2
33933: ST_TO_ADDR
// uc_nation := nation ;
33934: LD_ADDR_OWVAR 21
33938: PUSH
33939: LD_VAR 0 1
33943: ST_TO_ADDR
// InitHc ;
33944: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33948: LD_INT 0
33950: PPUSH
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33965: LD_VAR 0 4
33969: PPUSH
33970: LD_VAR 0 5
33974: PPUSH
33975: CALL_OW 428
33979: PUSH
33980: LD_INT 0
33982: EQUAL
33983: IFFALSE 34007
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33985: CALL_OW 44
33989: PPUSH
33990: LD_VAR 0 4
33994: PPUSH
33995: LD_VAR 0 5
33999: PPUSH
34000: LD_INT 1
34002: PPUSH
34003: CALL_OW 48
// end ;
34007: LD_VAR 0 6
34011: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34012: LD_INT 0
34014: PPUSH
34015: PPUSH
// uc_side := your_side ;
34016: LD_ADDR_OWVAR 20
34020: PUSH
34021: LD_OWVAR 2
34025: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34026: LD_VAR 0 1
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: LD_INT 4
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: IN
34053: IFFALSE 34065
// uc_nation := nation_american else
34055: LD_ADDR_OWVAR 21
34059: PUSH
34060: LD_INT 1
34062: ST_TO_ADDR
34063: GO 34108
// if chassis in [ 11 , 12 , 13 , 14 ] then
34065: LD_VAR 0 1
34069: PUSH
34070: LD_INT 11
34072: PUSH
34073: LD_INT 12
34075: PUSH
34076: LD_INT 13
34078: PUSH
34079: LD_INT 14
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: IN
34088: IFFALSE 34100
// uc_nation := nation_arabian else
34090: LD_ADDR_OWVAR 21
34094: PUSH
34095: LD_INT 2
34097: ST_TO_ADDR
34098: GO 34108
// uc_nation := nation_russian ;
34100: LD_ADDR_OWVAR 21
34104: PUSH
34105: LD_INT 3
34107: ST_TO_ADDR
// vc_chassis := chassis ;
34108: LD_ADDR_OWVAR 37
34112: PUSH
34113: LD_VAR 0 1
34117: ST_TO_ADDR
// vc_engine := engine ;
34118: LD_ADDR_OWVAR 39
34122: PUSH
34123: LD_VAR 0 2
34127: ST_TO_ADDR
// vc_control := control ;
34128: LD_ADDR_OWVAR 38
34132: PUSH
34133: LD_VAR 0 3
34137: ST_TO_ADDR
// vc_weapon := weapon ;
34138: LD_ADDR_OWVAR 40
34142: PUSH
34143: LD_VAR 0 4
34147: ST_TO_ADDR
// un := CreateVehicle ;
34148: LD_ADDR_VAR 0 8
34152: PUSH
34153: CALL_OW 45
34157: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34158: LD_VAR 0 8
34162: PPUSH
34163: LD_INT 0
34165: PPUSH
34166: LD_INT 5
34168: PPUSH
34169: CALL_OW 12
34173: PPUSH
34174: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34178: LD_VAR 0 8
34182: PPUSH
34183: LD_VAR 0 5
34187: PPUSH
34188: LD_VAR 0 6
34192: PPUSH
34193: LD_INT 1
34195: PPUSH
34196: CALL_OW 48
// end ;
34200: LD_VAR 0 7
34204: RET
// export hInvincible ; every 1 do
34205: GO 34207
34207: DISABLE
// hInvincible := [ ] ;
34208: LD_ADDR_EXP 95
34212: PUSH
34213: EMPTY
34214: ST_TO_ADDR
34215: END
// every 10 do var i ;
34216: GO 34218
34218: DISABLE
34219: LD_INT 0
34221: PPUSH
// begin enable ;
34222: ENABLE
// if not hInvincible then
34223: LD_EXP 95
34227: NOT
34228: IFFALSE 34232
// exit ;
34230: GO 34276
// for i in hInvincible do
34232: LD_ADDR_VAR 0 1
34236: PUSH
34237: LD_EXP 95
34241: PUSH
34242: FOR_IN
34243: IFFALSE 34274
// if GetLives ( i ) < 1000 then
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL_OW 256
34254: PUSH
34255: LD_INT 1000
34257: LESS
34258: IFFALSE 34272
// SetLives ( i , 1000 ) ;
34260: LD_VAR 0 1
34264: PPUSH
34265: LD_INT 1000
34267: PPUSH
34268: CALL_OW 234
34272: GO 34242
34274: POP
34275: POP
// end ;
34276: PPOPN 1
34278: END
// export function hHackInvincible ; var i ; begin
34279: LD_INT 0
34281: PPUSH
34282: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34283: LD_ADDR_VAR 0 2
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 21
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 21
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: PPUSH
34316: CALL_OW 69
34320: PUSH
34321: FOR_IN
34322: IFFALSE 34383
// if IsSelected ( i ) then
34324: LD_VAR 0 2
34328: PPUSH
34329: CALL_OW 306
34333: IFFALSE 34381
// begin if i in hInvincible then
34335: LD_VAR 0 2
34339: PUSH
34340: LD_EXP 95
34344: IN
34345: IFFALSE 34365
// hInvincible := hInvincible diff i else
34347: LD_ADDR_EXP 95
34351: PUSH
34352: LD_EXP 95
34356: PUSH
34357: LD_VAR 0 2
34361: DIFF
34362: ST_TO_ADDR
34363: GO 34381
// hInvincible := hInvincible union i ;
34365: LD_ADDR_EXP 95
34369: PUSH
34370: LD_EXP 95
34374: PUSH
34375: LD_VAR 0 2
34379: UNION
34380: ST_TO_ADDR
// end ;
34381: GO 34321
34383: POP
34384: POP
// end ;
34385: LD_VAR 0 1
34389: RET
// export function hHackInvisible ; var i , j ; begin
34390: LD_INT 0
34392: PPUSH
34393: PPUSH
34394: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34395: LD_ADDR_VAR 0 2
34399: PUSH
34400: LD_INT 21
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PPUSH
34410: CALL_OW 69
34414: PUSH
34415: FOR_IN
34416: IFFALSE 34440
// if IsSelected ( i ) then
34418: LD_VAR 0 2
34422: PPUSH
34423: CALL_OW 306
34427: IFFALSE 34438
// ComForceInvisible ( i ) ;
34429: LD_VAR 0 2
34433: PPUSH
34434: CALL_OW 496
34438: GO 34415
34440: POP
34441: POP
// end ;
34442: LD_VAR 0 1
34446: RET
// export function hHackChangeYourSide ; begin
34447: LD_INT 0
34449: PPUSH
// if your_side = 8 then
34450: LD_OWVAR 2
34454: PUSH
34455: LD_INT 8
34457: EQUAL
34458: IFFALSE 34470
// your_side := 0 else
34460: LD_ADDR_OWVAR 2
34464: PUSH
34465: LD_INT 0
34467: ST_TO_ADDR
34468: GO 34484
// your_side := your_side + 1 ;
34470: LD_ADDR_OWVAR 2
34474: PUSH
34475: LD_OWVAR 2
34479: PUSH
34480: LD_INT 1
34482: PLUS
34483: ST_TO_ADDR
// end ;
34484: LD_VAR 0 1
34488: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34489: LD_INT 0
34491: PPUSH
34492: PPUSH
34493: PPUSH
// for i in all_units do
34494: LD_ADDR_VAR 0 2
34498: PUSH
34499: LD_OWVAR 3
34503: PUSH
34504: FOR_IN
34505: IFFALSE 34583
// if IsSelected ( i ) then
34507: LD_VAR 0 2
34511: PPUSH
34512: CALL_OW 306
34516: IFFALSE 34581
// begin j := GetSide ( i ) ;
34518: LD_ADDR_VAR 0 3
34522: PUSH
34523: LD_VAR 0 2
34527: PPUSH
34528: CALL_OW 255
34532: ST_TO_ADDR
// if j = 8 then
34533: LD_VAR 0 3
34537: PUSH
34538: LD_INT 8
34540: EQUAL
34541: IFFALSE 34553
// j := 0 else
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_INT 0
34550: ST_TO_ADDR
34551: GO 34567
// j := j + 1 ;
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_VAR 0 3
34562: PUSH
34563: LD_INT 1
34565: PLUS
34566: ST_TO_ADDR
// SetSide ( i , j ) ;
34567: LD_VAR 0 2
34571: PPUSH
34572: LD_VAR 0 3
34576: PPUSH
34577: CALL_OW 235
// end ;
34581: GO 34504
34583: POP
34584: POP
// end ;
34585: LD_VAR 0 1
34589: RET
// export function hHackFog ; begin
34590: LD_INT 0
34592: PPUSH
// FogOff ( true ) ;
34593: LD_INT 1
34595: PPUSH
34596: CALL_OW 344
// end ;
34600: LD_VAR 0 1
34604: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34605: LD_INT 0
34607: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34608: LD_VAR 0 1
34612: PPUSH
34613: LD_VAR 0 2
34617: PPUSH
34618: LD_VAR 0 3
34622: PPUSH
34623: LD_INT 1
34625: PPUSH
34626: LD_INT 1
34628: PPUSH
34629: CALL_OW 483
// CenterOnXY ( x , y ) ;
34633: LD_VAR 0 2
34637: PPUSH
34638: LD_VAR 0 3
34642: PPUSH
34643: CALL_OW 84
// end ;
34647: LD_VAR 0 4
34651: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34652: LD_INT 0
34654: PPUSH
34655: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34656: LD_VAR 0 1
34660: NOT
34661: PUSH
34662: LD_VAR 0 2
34666: PPUSH
34667: LD_VAR 0 3
34671: PPUSH
34672: CALL_OW 488
34676: NOT
34677: OR
34678: PUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL_OW 266
34688: PUSH
34689: LD_INT 3
34691: NONEQUAL
34692: PUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 247
34702: PUSH
34703: LD_INT 1
34705: EQUAL
34706: NOT
34707: AND
34708: OR
34709: IFFALSE 34713
// exit ;
34711: GO 34862
// if GetType ( factory ) = unit_human then
34713: LD_VAR 0 1
34717: PPUSH
34718: CALL_OW 247
34722: PUSH
34723: LD_INT 1
34725: EQUAL
34726: IFFALSE 34743
// factory := IsInUnit ( factory ) ;
34728: LD_ADDR_VAR 0 1
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 310
34742: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34743: LD_VAR 0 1
34747: PPUSH
34748: CALL_OW 266
34752: PUSH
34753: LD_INT 3
34755: NONEQUAL
34756: IFFALSE 34760
// exit ;
34758: GO 34862
// if HexInfo ( x , y ) = factory then
34760: LD_VAR 0 2
34764: PPUSH
34765: LD_VAR 0 3
34769: PPUSH
34770: CALL_OW 428
34774: PUSH
34775: LD_VAR 0 1
34779: EQUAL
34780: IFFALSE 34807
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34782: LD_ADDR_EXP 96
34786: PUSH
34787: LD_EXP 96
34791: PPUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: LD_INT 0
34799: PPUSH
34800: CALL_OW 1
34804: ST_TO_ADDR
34805: GO 34858
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34807: LD_ADDR_EXP 96
34811: PUSH
34812: LD_EXP 96
34816: PPUSH
34817: LD_VAR 0 1
34821: PPUSH
34822: LD_VAR 0 1
34826: PPUSH
34827: CALL_OW 255
34831: PUSH
34832: LD_VAR 0 1
34836: PUSH
34837: LD_VAR 0 2
34841: PUSH
34842: LD_VAR 0 3
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: PPUSH
34853: CALL_OW 1
34857: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34858: CALL 34867 0 0
// end ;
34862: LD_VAR 0 4
34866: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
34871: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34872: LD_STRING resetFactoryWaypoint();
34874: PPUSH
34875: CALL_OW 559
// if factoryWaypoints then
34879: LD_EXP 96
34883: IFFALSE 35009
// begin list := PrepareArray ( factoryWaypoints ) ;
34885: LD_ADDR_VAR 0 3
34889: PUSH
34890: LD_EXP 96
34894: PPUSH
34895: CALL 81302 0 1
34899: ST_TO_ADDR
// for i := 1 to list do
34900: LD_ADDR_VAR 0 2
34904: PUSH
34905: DOUBLE
34906: LD_INT 1
34908: DEC
34909: ST_TO_ADDR
34910: LD_VAR 0 3
34914: PUSH
34915: FOR_TO
34916: IFFALSE 35007
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34918: LD_STRING setFactoryWaypointXY(
34920: PUSH
34921: LD_VAR 0 3
34925: PUSH
34926: LD_VAR 0 2
34930: ARRAY
34931: PUSH
34932: LD_INT 1
34934: ARRAY
34935: STR
34936: PUSH
34937: LD_STRING ,
34939: STR
34940: PUSH
34941: LD_VAR 0 3
34945: PUSH
34946: LD_VAR 0 2
34950: ARRAY
34951: PUSH
34952: LD_INT 2
34954: ARRAY
34955: STR
34956: PUSH
34957: LD_STRING ,
34959: STR
34960: PUSH
34961: LD_VAR 0 3
34965: PUSH
34966: LD_VAR 0 2
34970: ARRAY
34971: PUSH
34972: LD_INT 3
34974: ARRAY
34975: STR
34976: PUSH
34977: LD_STRING ,
34979: STR
34980: PUSH
34981: LD_VAR 0 3
34985: PUSH
34986: LD_VAR 0 2
34990: ARRAY
34991: PUSH
34992: LD_INT 4
34994: ARRAY
34995: STR
34996: PUSH
34997: LD_STRING )
34999: STR
35000: PPUSH
35001: CALL_OW 559
35005: GO 34915
35007: POP
35008: POP
// end ; end ;
35009: LD_VAR 0 1
35013: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35014: LD_INT 0
35016: PPUSH
// if HexInfo ( x , y ) = warehouse then
35017: LD_VAR 0 2
35021: PPUSH
35022: LD_VAR 0 3
35026: PPUSH
35027: CALL_OW 428
35031: PUSH
35032: LD_VAR 0 1
35036: EQUAL
35037: IFFALSE 35064
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35039: LD_ADDR_EXP 97
35043: PUSH
35044: LD_EXP 97
35048: PPUSH
35049: LD_VAR 0 1
35053: PPUSH
35054: LD_INT 0
35056: PPUSH
35057: CALL_OW 1
35061: ST_TO_ADDR
35062: GO 35115
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35064: LD_ADDR_EXP 97
35068: PUSH
35069: LD_EXP 97
35073: PPUSH
35074: LD_VAR 0 1
35078: PPUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 255
35088: PUSH
35089: LD_VAR 0 1
35093: PUSH
35094: LD_VAR 0 2
35098: PUSH
35099: LD_VAR 0 3
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: PPUSH
35110: CALL_OW 1
35114: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35115: CALL 35124 0 0
// end ;
35119: LD_VAR 0 4
35123: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35124: LD_INT 0
35126: PPUSH
35127: PPUSH
35128: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35129: LD_STRING resetWarehouseGatheringPoints();
35131: PPUSH
35132: CALL_OW 559
// if warehouseGatheringPoints then
35136: LD_EXP 97
35140: IFFALSE 35266
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_EXP 97
35151: PPUSH
35152: CALL 81302 0 1
35156: ST_TO_ADDR
// for i := 1 to list do
35157: LD_ADDR_VAR 0 2
35161: PUSH
35162: DOUBLE
35163: LD_INT 1
35165: DEC
35166: ST_TO_ADDR
35167: LD_VAR 0 3
35171: PUSH
35172: FOR_TO
35173: IFFALSE 35264
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35175: LD_STRING setWarehouseGatheringPointXY(
35177: PUSH
35178: LD_VAR 0 3
35182: PUSH
35183: LD_VAR 0 2
35187: ARRAY
35188: PUSH
35189: LD_INT 1
35191: ARRAY
35192: STR
35193: PUSH
35194: LD_STRING ,
35196: STR
35197: PUSH
35198: LD_VAR 0 3
35202: PUSH
35203: LD_VAR 0 2
35207: ARRAY
35208: PUSH
35209: LD_INT 2
35211: ARRAY
35212: STR
35213: PUSH
35214: LD_STRING ,
35216: STR
35217: PUSH
35218: LD_VAR 0 3
35222: PUSH
35223: LD_VAR 0 2
35227: ARRAY
35228: PUSH
35229: LD_INT 3
35231: ARRAY
35232: STR
35233: PUSH
35234: LD_STRING ,
35236: STR
35237: PUSH
35238: LD_VAR 0 3
35242: PUSH
35243: LD_VAR 0 2
35247: ARRAY
35248: PUSH
35249: LD_INT 4
35251: ARRAY
35252: STR
35253: PUSH
35254: LD_STRING )
35256: STR
35257: PPUSH
35258: CALL_OW 559
35262: GO 35172
35264: POP
35265: POP
// end ; end ;
35266: LD_VAR 0 1
35270: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35271: LD_EXP 97
35275: IFFALSE 35960
35277: GO 35279
35279: DISABLE
35280: LD_INT 0
35282: PPUSH
35283: PPUSH
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
35288: PPUSH
35289: PPUSH
35290: PPUSH
// begin enable ;
35291: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35292: LD_ADDR_VAR 0 3
35296: PUSH
35297: LD_EXP 97
35301: PPUSH
35302: CALL 81302 0 1
35306: ST_TO_ADDR
// if not list then
35307: LD_VAR 0 3
35311: NOT
35312: IFFALSE 35316
// exit ;
35314: GO 35960
// for i := 1 to list do
35316: LD_ADDR_VAR 0 1
35320: PUSH
35321: DOUBLE
35322: LD_INT 1
35324: DEC
35325: ST_TO_ADDR
35326: LD_VAR 0 3
35330: PUSH
35331: FOR_TO
35332: IFFALSE 35958
// begin depot := list [ i ] [ 2 ] ;
35334: LD_ADDR_VAR 0 8
35338: PUSH
35339: LD_VAR 0 3
35343: PUSH
35344: LD_VAR 0 1
35348: ARRAY
35349: PUSH
35350: LD_INT 2
35352: ARRAY
35353: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35354: LD_ADDR_VAR 0 5
35358: PUSH
35359: LD_VAR 0 3
35363: PUSH
35364: LD_VAR 0 1
35368: ARRAY
35369: PUSH
35370: LD_INT 1
35372: ARRAY
35373: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35374: LD_VAR 0 8
35378: PPUSH
35379: CALL_OW 301
35383: PUSH
35384: LD_VAR 0 5
35388: PUSH
35389: LD_VAR 0 8
35393: PPUSH
35394: CALL_OW 255
35398: NONEQUAL
35399: OR
35400: IFFALSE 35429
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35402: LD_ADDR_EXP 97
35406: PUSH
35407: LD_EXP 97
35411: PPUSH
35412: LD_VAR 0 8
35416: PPUSH
35417: LD_INT 0
35419: PPUSH
35420: CALL_OW 1
35424: ST_TO_ADDR
// exit ;
35425: POP
35426: POP
35427: GO 35960
// end ; x := list [ i ] [ 3 ] ;
35429: LD_ADDR_VAR 0 6
35433: PUSH
35434: LD_VAR 0 3
35438: PUSH
35439: LD_VAR 0 1
35443: ARRAY
35444: PUSH
35445: LD_INT 3
35447: ARRAY
35448: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35449: LD_ADDR_VAR 0 7
35453: PUSH
35454: LD_VAR 0 3
35458: PUSH
35459: LD_VAR 0 1
35463: ARRAY
35464: PUSH
35465: LD_INT 4
35467: ARRAY
35468: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35469: LD_ADDR_VAR 0 9
35473: PUSH
35474: LD_VAR 0 6
35478: PPUSH
35479: LD_VAR 0 7
35483: PPUSH
35484: LD_INT 16
35486: PPUSH
35487: CALL 79890 0 3
35491: ST_TO_ADDR
// if not cratesNearbyPoint then
35492: LD_VAR 0 9
35496: NOT
35497: IFFALSE 35503
// exit ;
35499: POP
35500: POP
35501: GO 35960
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35503: LD_ADDR_VAR 0 4
35507: PUSH
35508: LD_INT 22
35510: PUSH
35511: LD_VAR 0 5
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: PUSH
35523: LD_INT 60
35525: PUSH
35526: EMPTY
35527: LIST
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 91
35535: PUSH
35536: LD_VAR 0 8
35540: PUSH
35541: LD_INT 6
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 25
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 25
35564: PUSH
35565: LD_INT 16
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: PPUSH
35583: CALL_OW 69
35587: PUSH
35588: LD_VAR 0 8
35592: PPUSH
35593: CALL_OW 313
35597: PPUSH
35598: LD_INT 3
35600: PUSH
35601: LD_INT 60
35603: PUSH
35604: EMPTY
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: LD_INT 25
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 25
35626: PUSH
35627: LD_INT 16
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PPUSH
35643: CALL_OW 72
35647: UNION
35648: ST_TO_ADDR
// if tmp then
35649: LD_VAR 0 4
35653: IFFALSE 35733
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35655: LD_ADDR_VAR 0 4
35659: PUSH
35660: LD_VAR 0 4
35664: PPUSH
35665: LD_INT 3
35667: PPUSH
35668: CALL 77859 0 2
35672: ST_TO_ADDR
// for j in tmp do
35673: LD_ADDR_VAR 0 2
35677: PUSH
35678: LD_VAR 0 4
35682: PUSH
35683: FOR_IN
35684: IFFALSE 35727
// begin if IsInUnit ( j ) then
35686: LD_VAR 0 2
35690: PPUSH
35691: CALL_OW 310
35695: IFFALSE 35706
// ComExit ( j ) ;
35697: LD_VAR 0 2
35701: PPUSH
35702: CALL 77942 0 1
// AddComCollect ( j , x , y ) ;
35706: LD_VAR 0 2
35710: PPUSH
35711: LD_VAR 0 6
35715: PPUSH
35716: LD_VAR 0 7
35720: PPUSH
35721: CALL_OW 177
// end ;
35725: GO 35683
35727: POP
35728: POP
// exit ;
35729: POP
35730: POP
35731: GO 35960
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35733: LD_ADDR_VAR 0 4
35737: PUSH
35738: LD_INT 22
35740: PUSH
35741: LD_VAR 0 5
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 91
35752: PUSH
35753: LD_VAR 0 8
35757: PUSH
35758: LD_INT 8
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: LD_INT 34
35771: PUSH
35772: LD_INT 12
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 34
35781: PUSH
35782: LD_INT 51
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 34
35791: PUSH
35792: LD_INT 32
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 34
35801: PUSH
35802: LD_INT 89
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: PPUSH
35821: CALL_OW 69
35825: ST_TO_ADDR
// if tmp then
35826: LD_VAR 0 4
35830: IFFALSE 35956
// begin for j in tmp do
35832: LD_ADDR_VAR 0 2
35836: PUSH
35837: LD_VAR 0 4
35841: PUSH
35842: FOR_IN
35843: IFFALSE 35954
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35845: LD_VAR 0 2
35849: PPUSH
35850: CALL_OW 262
35854: PUSH
35855: LD_INT 3
35857: EQUAL
35858: PUSH
35859: LD_VAR 0 2
35863: PPUSH
35864: CALL_OW 261
35868: PUSH
35869: LD_INT 20
35871: GREATER
35872: OR
35873: PUSH
35874: LD_VAR 0 2
35878: PPUSH
35879: CALL_OW 314
35883: NOT
35884: AND
35885: PUSH
35886: LD_VAR 0 2
35890: PPUSH
35891: CALL_OW 263
35895: PUSH
35896: LD_INT 1
35898: NONEQUAL
35899: PUSH
35900: LD_VAR 0 2
35904: PPUSH
35905: CALL_OW 311
35909: OR
35910: AND
35911: IFFALSE 35952
// begin ComCollect ( j , x , y ) ;
35913: LD_VAR 0 2
35917: PPUSH
35918: LD_VAR 0 6
35922: PPUSH
35923: LD_VAR 0 7
35927: PPUSH
35928: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35932: LD_VAR 0 2
35936: PPUSH
35937: LD_VAR 0 8
35941: PPUSH
35942: CALL_OW 172
// exit ;
35946: POP
35947: POP
35948: POP
35949: POP
35950: GO 35960
// end ;
35952: GO 35842
35954: POP
35955: POP
// end ; end ;
35956: GO 35331
35958: POP
35959: POP
// end ; end_of_file
35960: PPOPN 9
35962: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35963: LD_INT 0
35965: PPUSH
35966: PPUSH
35967: PPUSH
35968: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35969: LD_VAR 0 1
35973: PPUSH
35974: CALL_OW 264
35978: PUSH
35979: LD_INT 91
35981: EQUAL
35982: IFFALSE 36054
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35984: LD_INT 68
35986: PPUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 255
35996: PPUSH
35997: CALL_OW 321
36001: PUSH
36002: LD_INT 2
36004: EQUAL
36005: IFFALSE 36017
// eff := 70 else
36007: LD_ADDR_VAR 0 4
36011: PUSH
36012: LD_INT 70
36014: ST_TO_ADDR
36015: GO 36025
// eff := 30 ;
36017: LD_ADDR_VAR 0 4
36021: PUSH
36022: LD_INT 30
36024: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36025: LD_VAR 0 1
36029: PPUSH
36030: CALL_OW 250
36034: PPUSH
36035: LD_VAR 0 1
36039: PPUSH
36040: CALL_OW 251
36044: PPUSH
36045: LD_VAR 0 4
36049: PPUSH
36050: CALL_OW 495
// end ; end ;
36054: LD_VAR 0 2
36058: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36059: LD_INT 0
36061: PPUSH
// end ;
36062: LD_VAR 0 4
36066: RET
// export function SOS_Command ( cmd ) ; begin
36067: LD_INT 0
36069: PPUSH
// end ;
36070: LD_VAR 0 2
36074: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36075: LD_INT 0
36077: PPUSH
// end ;
36078: LD_VAR 0 6
36082: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36083: LD_INT 0
36085: PPUSH
36086: PPUSH
// if not vehicle or not factory then
36087: LD_VAR 0 1
36091: NOT
36092: PUSH
36093: LD_VAR 0 2
36097: NOT
36098: OR
36099: IFFALSE 36103
// exit ;
36101: GO 36334
// if factoryWaypoints >= factory then
36103: LD_EXP 96
36107: PUSH
36108: LD_VAR 0 2
36112: GREATEREQUAL
36113: IFFALSE 36334
// if factoryWaypoints [ factory ] then
36115: LD_EXP 96
36119: PUSH
36120: LD_VAR 0 2
36124: ARRAY
36125: IFFALSE 36334
// begin if GetControl ( vehicle ) = control_manual then
36127: LD_VAR 0 1
36131: PPUSH
36132: CALL_OW 263
36136: PUSH
36137: LD_INT 1
36139: EQUAL
36140: IFFALSE 36221
// begin driver := IsDrivenBy ( vehicle ) ;
36142: LD_ADDR_VAR 0 4
36146: PUSH
36147: LD_VAR 0 1
36151: PPUSH
36152: CALL_OW 311
36156: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36157: LD_VAR 0 4
36161: PPUSH
36162: LD_EXP 96
36166: PUSH
36167: LD_VAR 0 2
36171: ARRAY
36172: PUSH
36173: LD_INT 3
36175: ARRAY
36176: PPUSH
36177: LD_EXP 96
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 4
36190: ARRAY
36191: PPUSH
36192: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36196: LD_VAR 0 4
36200: PPUSH
36201: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36205: LD_VAR 0 4
36209: PPUSH
36210: LD_VAR 0 2
36214: PPUSH
36215: CALL_OW 180
// end else
36219: GO 36334
// if GetControl ( vehicle ) = control_remote then
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 263
36230: PUSH
36231: LD_INT 2
36233: EQUAL
36234: IFFALSE 36295
// begin wait ( 0 0$2 ) ;
36236: LD_INT 70
36238: PPUSH
36239: CALL_OW 67
// if Connect ( vehicle ) then
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL 48183 0 1
36252: IFFALSE 36293
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36254: LD_VAR 0 1
36258: PPUSH
36259: LD_EXP 96
36263: PUSH
36264: LD_VAR 0 2
36268: ARRAY
36269: PUSH
36270: LD_INT 3
36272: ARRAY
36273: PPUSH
36274: LD_EXP 96
36278: PUSH
36279: LD_VAR 0 2
36283: ARRAY
36284: PUSH
36285: LD_INT 4
36287: ARRAY
36288: PPUSH
36289: CALL_OW 171
// end else
36293: GO 36334
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36295: LD_VAR 0 1
36299: PPUSH
36300: LD_EXP 96
36304: PUSH
36305: LD_VAR 0 2
36309: ARRAY
36310: PUSH
36311: LD_INT 3
36313: ARRAY
36314: PPUSH
36315: LD_EXP 96
36319: PUSH
36320: LD_VAR 0 2
36324: ARRAY
36325: PUSH
36326: LD_INT 4
36328: ARRAY
36329: PPUSH
36330: CALL_OW 171
// end ; end ;
36334: LD_VAR 0 3
36338: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36339: LD_INT 0
36341: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36342: LD_VAR 0 1
36346: PUSH
36347: LD_INT 250
36349: EQUAL
36350: PUSH
36351: LD_VAR 0 2
36355: PPUSH
36356: CALL_OW 264
36360: PUSH
36361: LD_INT 81
36363: EQUAL
36364: AND
36365: IFFALSE 36386
// MinerPlaceMine ( unit , x , y ) ;
36367: LD_VAR 0 2
36371: PPUSH
36372: LD_VAR 0 4
36376: PPUSH
36377: LD_VAR 0 5
36381: PPUSH
36382: CALL 38771 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36386: LD_VAR 0 1
36390: PUSH
36391: LD_INT 251
36393: EQUAL
36394: PUSH
36395: LD_VAR 0 2
36399: PPUSH
36400: CALL_OW 264
36404: PUSH
36405: LD_INT 81
36407: EQUAL
36408: AND
36409: IFFALSE 36430
// MinerDetonateMine ( unit , x , y ) ;
36411: LD_VAR 0 2
36415: PPUSH
36416: LD_VAR 0 4
36420: PPUSH
36421: LD_VAR 0 5
36425: PPUSH
36426: CALL 39046 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36430: LD_VAR 0 1
36434: PUSH
36435: LD_INT 252
36437: EQUAL
36438: PUSH
36439: LD_VAR 0 2
36443: PPUSH
36444: CALL_OW 264
36448: PUSH
36449: LD_INT 81
36451: EQUAL
36452: AND
36453: IFFALSE 36474
// MinerCreateMinefield ( unit , x , y ) ;
36455: LD_VAR 0 2
36459: PPUSH
36460: LD_VAR 0 4
36464: PPUSH
36465: LD_VAR 0 5
36469: PPUSH
36470: CALL 39463 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36474: LD_VAR 0 1
36478: PUSH
36479: LD_INT 253
36481: EQUAL
36482: PUSH
36483: LD_VAR 0 2
36487: PPUSH
36488: CALL_OW 257
36492: PUSH
36493: LD_INT 5
36495: EQUAL
36496: AND
36497: IFFALSE 36518
// ComBinocular ( unit , x , y ) ;
36499: LD_VAR 0 2
36503: PPUSH
36504: LD_VAR 0 4
36508: PPUSH
36509: LD_VAR 0 5
36513: PPUSH
36514: CALL 39832 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36518: LD_VAR 0 1
36522: PUSH
36523: LD_INT 254
36525: EQUAL
36526: PUSH
36527: LD_VAR 0 2
36531: PPUSH
36532: CALL_OW 264
36536: PUSH
36537: LD_INT 99
36539: EQUAL
36540: AND
36541: PUSH
36542: LD_VAR 0 3
36546: PPUSH
36547: CALL_OW 263
36551: PUSH
36552: LD_INT 3
36554: EQUAL
36555: AND
36556: IFFALSE 36572
// HackDestroyVehicle ( unit , selectedUnit ) ;
36558: LD_VAR 0 2
36562: PPUSH
36563: LD_VAR 0 3
36567: PPUSH
36568: CALL 38135 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36572: LD_VAR 0 1
36576: PUSH
36577: LD_INT 255
36579: EQUAL
36580: PUSH
36581: LD_VAR 0 2
36585: PPUSH
36586: CALL_OW 264
36590: PUSH
36591: LD_INT 14
36593: PUSH
36594: LD_INT 53
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: IN
36601: AND
36602: PUSH
36603: LD_VAR 0 4
36607: PPUSH
36608: LD_VAR 0 5
36612: PPUSH
36613: CALL_OW 488
36617: AND
36618: IFFALSE 36642
// CutTreeXYR ( unit , x , y , 12 ) ;
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 4
36629: PPUSH
36630: LD_VAR 0 5
36634: PPUSH
36635: LD_INT 12
36637: PPUSH
36638: CALL 36705 0 4
// if cmd = 256 then
36642: LD_VAR 0 1
36646: PUSH
36647: LD_INT 256
36649: EQUAL
36650: IFFALSE 36671
// SetFactoryWaypoint ( unit , x , y ) ;
36652: LD_VAR 0 2
36656: PPUSH
36657: LD_VAR 0 4
36661: PPUSH
36662: LD_VAR 0 5
36666: PPUSH
36667: CALL 34652 0 3
// if cmd = 257 then
36671: LD_VAR 0 1
36675: PUSH
36676: LD_INT 257
36678: EQUAL
36679: IFFALSE 36700
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36681: LD_VAR 0 2
36685: PPUSH
36686: LD_VAR 0 4
36690: PPUSH
36691: LD_VAR 0 5
36695: PPUSH
36696: CALL 35014 0 3
// end ;
36700: LD_VAR 0 6
36704: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36705: LD_INT 0
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36716: LD_VAR 0 1
36720: NOT
36721: PUSH
36722: LD_VAR 0 2
36726: PPUSH
36727: LD_VAR 0 3
36731: PPUSH
36732: CALL_OW 488
36736: NOT
36737: OR
36738: PUSH
36739: LD_VAR 0 4
36743: NOT
36744: OR
36745: IFFALSE 36749
// exit ;
36747: GO 37089
// list := [ ] ;
36749: LD_ADDR_VAR 0 13
36753: PUSH
36754: EMPTY
36755: ST_TO_ADDR
// if x - r < 0 then
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 4
36765: MINUS
36766: PUSH
36767: LD_INT 0
36769: LESS
36770: IFFALSE 36782
// min_x := 0 else
36772: LD_ADDR_VAR 0 7
36776: PUSH
36777: LD_INT 0
36779: ST_TO_ADDR
36780: GO 36798
// min_x := x - r ;
36782: LD_ADDR_VAR 0 7
36786: PUSH
36787: LD_VAR 0 2
36791: PUSH
36792: LD_VAR 0 4
36796: MINUS
36797: ST_TO_ADDR
// if y - r < 0 then
36798: LD_VAR 0 3
36802: PUSH
36803: LD_VAR 0 4
36807: MINUS
36808: PUSH
36809: LD_INT 0
36811: LESS
36812: IFFALSE 36824
// min_y := 0 else
36814: LD_ADDR_VAR 0 8
36818: PUSH
36819: LD_INT 0
36821: ST_TO_ADDR
36822: GO 36840
// min_y := y - r ;
36824: LD_ADDR_VAR 0 8
36828: PUSH
36829: LD_VAR 0 3
36833: PUSH
36834: LD_VAR 0 4
36838: MINUS
36839: ST_TO_ADDR
// max_x := x + r ;
36840: LD_ADDR_VAR 0 9
36844: PUSH
36845: LD_VAR 0 2
36849: PUSH
36850: LD_VAR 0 4
36854: PLUS
36855: ST_TO_ADDR
// max_y := y + r ;
36856: LD_ADDR_VAR 0 10
36860: PUSH
36861: LD_VAR 0 3
36865: PUSH
36866: LD_VAR 0 4
36870: PLUS
36871: ST_TO_ADDR
// for _x = min_x to max_x do
36872: LD_ADDR_VAR 0 11
36876: PUSH
36877: DOUBLE
36878: LD_VAR 0 7
36882: DEC
36883: ST_TO_ADDR
36884: LD_VAR 0 9
36888: PUSH
36889: FOR_TO
36890: IFFALSE 37007
// for _y = min_y to max_y do
36892: LD_ADDR_VAR 0 12
36896: PUSH
36897: DOUBLE
36898: LD_VAR 0 8
36902: DEC
36903: ST_TO_ADDR
36904: LD_VAR 0 10
36908: PUSH
36909: FOR_TO
36910: IFFALSE 37003
// begin if not ValidHex ( _x , _y ) then
36912: LD_VAR 0 11
36916: PPUSH
36917: LD_VAR 0 12
36921: PPUSH
36922: CALL_OW 488
36926: NOT
36927: IFFALSE 36931
// continue ;
36929: GO 36909
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36931: LD_VAR 0 11
36935: PPUSH
36936: LD_VAR 0 12
36940: PPUSH
36941: CALL_OW 351
36945: PUSH
36946: LD_VAR 0 11
36950: PPUSH
36951: LD_VAR 0 12
36955: PPUSH
36956: CALL_OW 554
36960: AND
36961: IFFALSE 37001
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36963: LD_ADDR_VAR 0 13
36967: PUSH
36968: LD_VAR 0 13
36972: PPUSH
36973: LD_VAR 0 13
36977: PUSH
36978: LD_INT 1
36980: PLUS
36981: PPUSH
36982: LD_VAR 0 11
36986: PUSH
36987: LD_VAR 0 12
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PPUSH
36996: CALL_OW 2
37000: ST_TO_ADDR
// end ;
37001: GO 36909
37003: POP
37004: POP
37005: GO 36889
37007: POP
37008: POP
// if not list then
37009: LD_VAR 0 13
37013: NOT
37014: IFFALSE 37018
// exit ;
37016: GO 37089
// for i in list do
37018: LD_ADDR_VAR 0 6
37022: PUSH
37023: LD_VAR 0 13
37027: PUSH
37028: FOR_IN
37029: IFFALSE 37087
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37031: LD_VAR 0 1
37035: PPUSH
37036: LD_STRING M
37038: PUSH
37039: LD_VAR 0 6
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: PUSH
37048: LD_VAR 0 6
37052: PUSH
37053: LD_INT 2
37055: ARRAY
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: PUSH
37078: EMPTY
37079: LIST
37080: PPUSH
37081: CALL_OW 447
37085: GO 37028
37087: POP
37088: POP
// end ;
37089: LD_VAR 0 5
37093: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37094: LD_EXP 99
37098: NOT
37099: IFFALSE 37149
37101: GO 37103
37103: DISABLE
// begin initHack := true ;
37104: LD_ADDR_EXP 99
37108: PUSH
37109: LD_INT 1
37111: ST_TO_ADDR
// hackTanks := [ ] ;
37112: LD_ADDR_EXP 100
37116: PUSH
37117: EMPTY
37118: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37119: LD_ADDR_EXP 101
37123: PUSH
37124: EMPTY
37125: ST_TO_ADDR
// hackLimit := 3 ;
37126: LD_ADDR_EXP 102
37130: PUSH
37131: LD_INT 3
37133: ST_TO_ADDR
// hackDist := 12 ;
37134: LD_ADDR_EXP 103
37138: PUSH
37139: LD_INT 12
37141: ST_TO_ADDR
// hackCounter := [ ] ;
37142: LD_ADDR_EXP 104
37146: PUSH
37147: EMPTY
37148: ST_TO_ADDR
// end ;
37149: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37150: LD_EXP 99
37154: PUSH
37155: LD_INT 34
37157: PUSH
37158: LD_INT 99
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PPUSH
37165: CALL_OW 69
37169: AND
37170: IFFALSE 37423
37172: GO 37174
37174: DISABLE
37175: LD_INT 0
37177: PPUSH
37178: PPUSH
// begin enable ;
37179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37180: LD_ADDR_VAR 0 1
37184: PUSH
37185: LD_INT 34
37187: PUSH
37188: LD_INT 99
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PPUSH
37195: CALL_OW 69
37199: PUSH
37200: FOR_IN
37201: IFFALSE 37421
// begin if not i in hackTanks then
37203: LD_VAR 0 1
37207: PUSH
37208: LD_EXP 100
37212: IN
37213: NOT
37214: IFFALSE 37297
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37216: LD_ADDR_EXP 100
37220: PUSH
37221: LD_EXP 100
37225: PPUSH
37226: LD_EXP 100
37230: PUSH
37231: LD_INT 1
37233: PLUS
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 1
37244: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37245: LD_ADDR_EXP 101
37249: PUSH
37250: LD_EXP 101
37254: PPUSH
37255: LD_EXP 101
37259: PUSH
37260: LD_INT 1
37262: PLUS
37263: PPUSH
37264: EMPTY
37265: PPUSH
37266: CALL_OW 1
37270: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37271: LD_ADDR_EXP 104
37275: PUSH
37276: LD_EXP 104
37280: PPUSH
37281: LD_EXP 104
37285: PUSH
37286: LD_INT 1
37288: PLUS
37289: PPUSH
37290: EMPTY
37291: PPUSH
37292: CALL_OW 1
37296: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 302
37306: NOT
37307: IFFALSE 37320
// begin HackUnlinkAll ( i ) ;
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL 37426 0 1
// continue ;
37318: GO 37200
// end ; HackCheckCapturedStatus ( i ) ;
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL 37869 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37329: LD_ADDR_VAR 0 2
37333: PUSH
37334: LD_INT 81
37336: PUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: CALL_OW 255
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 33
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 91
37363: PUSH
37364: LD_VAR 0 1
37368: PUSH
37369: LD_EXP 103
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 50
37381: PUSH
37382: EMPTY
37383: LIST
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: PPUSH
37391: CALL_OW 69
37395: ST_TO_ADDR
// if not tmp then
37396: LD_VAR 0 2
37400: NOT
37401: IFFALSE 37405
// continue ;
37403: GO 37200
// HackLink ( i , tmp ) ;
37405: LD_VAR 0 1
37409: PPUSH
37410: LD_VAR 0 2
37414: PPUSH
37415: CALL 37562 0 2
// end ;
37419: GO 37200
37421: POP
37422: POP
// end ;
37423: PPOPN 2
37425: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37426: LD_INT 0
37428: PPUSH
37429: PPUSH
37430: PPUSH
// if not hack in hackTanks then
37431: LD_VAR 0 1
37435: PUSH
37436: LD_EXP 100
37440: IN
37441: NOT
37442: IFFALSE 37446
// exit ;
37444: GO 37557
// index := GetElementIndex ( hackTanks , hack ) ;
37446: LD_ADDR_VAR 0 4
37450: PUSH
37451: LD_EXP 100
37455: PPUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL 44999 0 2
37465: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37466: LD_EXP 101
37470: PUSH
37471: LD_VAR 0 4
37475: ARRAY
37476: IFFALSE 37557
// begin for i in hackTanksCaptured [ index ] do
37478: LD_ADDR_VAR 0 3
37482: PUSH
37483: LD_EXP 101
37487: PUSH
37488: LD_VAR 0 4
37492: ARRAY
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37521
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37497: LD_VAR 0 3
37501: PUSH
37502: LD_INT 1
37504: ARRAY
37505: PPUSH
37506: LD_VAR 0 3
37510: PUSH
37511: LD_INT 2
37513: ARRAY
37514: PPUSH
37515: CALL_OW 235
37519: GO 37494
37521: POP
37522: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37523: LD_ADDR_EXP 101
37527: PUSH
37528: LD_EXP 101
37532: PPUSH
37533: LD_VAR 0 4
37537: PPUSH
37538: EMPTY
37539: PPUSH
37540: CALL_OW 1
37544: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37545: LD_VAR 0 1
37549: PPUSH
37550: LD_INT 0
37552: PPUSH
37553: CALL_OW 505
// end ; end ;
37557: LD_VAR 0 2
37561: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37562: LD_INT 0
37564: PPUSH
37565: PPUSH
37566: PPUSH
// if not hack in hackTanks or not vehicles then
37567: LD_VAR 0 1
37571: PUSH
37572: LD_EXP 100
37576: IN
37577: NOT
37578: PUSH
37579: LD_VAR 0 2
37583: NOT
37584: OR
37585: IFFALSE 37589
// exit ;
37587: GO 37864
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37589: LD_ADDR_VAR 0 2
37593: PUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: LD_VAR 0 2
37603: PPUSH
37604: LD_INT 1
37606: PPUSH
37607: LD_INT 1
37609: PPUSH
37610: CALL 45649 0 4
37614: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37615: LD_ADDR_VAR 0 5
37619: PUSH
37620: LD_EXP 100
37624: PPUSH
37625: LD_VAR 0 1
37629: PPUSH
37630: CALL 44999 0 2
37634: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37635: LD_EXP 101
37639: PUSH
37640: LD_VAR 0 5
37644: ARRAY
37645: PUSH
37646: LD_EXP 102
37650: LESS
37651: IFFALSE 37840
// begin for i := 1 to vehicles do
37653: LD_ADDR_VAR 0 4
37657: PUSH
37658: DOUBLE
37659: LD_INT 1
37661: DEC
37662: ST_TO_ADDR
37663: LD_VAR 0 2
37667: PUSH
37668: FOR_TO
37669: IFFALSE 37838
// begin if hackTanksCaptured [ index ] = hackLimit then
37671: LD_EXP 101
37675: PUSH
37676: LD_VAR 0 5
37680: ARRAY
37681: PUSH
37682: LD_EXP 102
37686: EQUAL
37687: IFFALSE 37691
// break ;
37689: GO 37838
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37691: LD_ADDR_EXP 104
37695: PUSH
37696: LD_EXP 104
37700: PPUSH
37701: LD_VAR 0 5
37705: PPUSH
37706: LD_EXP 104
37710: PUSH
37711: LD_VAR 0 5
37715: ARRAY
37716: PUSH
37717: LD_INT 1
37719: PLUS
37720: PPUSH
37721: CALL_OW 1
37725: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37726: LD_ADDR_EXP 101
37730: PUSH
37731: LD_EXP 101
37735: PPUSH
37736: LD_VAR 0 5
37740: PUSH
37741: LD_EXP 101
37745: PUSH
37746: LD_VAR 0 5
37750: ARRAY
37751: PUSH
37752: LD_INT 1
37754: PLUS
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PPUSH
37760: LD_VAR 0 2
37764: PUSH
37765: LD_VAR 0 4
37769: ARRAY
37770: PUSH
37771: LD_VAR 0 2
37775: PUSH
37776: LD_VAR 0 4
37780: ARRAY
37781: PPUSH
37782: CALL_OW 255
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PPUSH
37791: CALL 45214 0 3
37795: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37796: LD_VAR 0 2
37800: PUSH
37801: LD_VAR 0 4
37805: ARRAY
37806: PPUSH
37807: LD_VAR 0 1
37811: PPUSH
37812: CALL_OW 255
37816: PPUSH
37817: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37821: LD_VAR 0 2
37825: PUSH
37826: LD_VAR 0 4
37830: ARRAY
37831: PPUSH
37832: CALL_OW 141
// end ;
37836: GO 37668
37838: POP
37839: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37840: LD_VAR 0 1
37844: PPUSH
37845: LD_EXP 101
37849: PUSH
37850: LD_VAR 0 5
37854: ARRAY
37855: PUSH
37856: LD_INT 0
37858: PLUS
37859: PPUSH
37860: CALL_OW 505
// end ;
37864: LD_VAR 0 3
37868: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37869: LD_INT 0
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
// if not hack in hackTanks then
37875: LD_VAR 0 1
37879: PUSH
37880: LD_EXP 100
37884: IN
37885: NOT
37886: IFFALSE 37890
// exit ;
37888: GO 38130
// index := GetElementIndex ( hackTanks , hack ) ;
37890: LD_ADDR_VAR 0 4
37894: PUSH
37895: LD_EXP 100
37899: PPUSH
37900: LD_VAR 0 1
37904: PPUSH
37905: CALL 44999 0 2
37909: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37910: LD_ADDR_VAR 0 3
37914: PUSH
37915: DOUBLE
37916: LD_EXP 101
37920: PUSH
37921: LD_VAR 0 4
37925: ARRAY
37926: INC
37927: ST_TO_ADDR
37928: LD_INT 1
37930: PUSH
37931: FOR_DOWNTO
37932: IFFALSE 38104
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37934: LD_ADDR_VAR 0 5
37938: PUSH
37939: LD_EXP 101
37943: PUSH
37944: LD_VAR 0 4
37948: ARRAY
37949: PUSH
37950: LD_VAR 0 3
37954: ARRAY
37955: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37956: LD_VAR 0 5
37960: PUSH
37961: LD_INT 1
37963: ARRAY
37964: PPUSH
37965: CALL_OW 302
37969: NOT
37970: PUSH
37971: LD_VAR 0 5
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: CALL_OW 255
37984: PUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 255
37994: NONEQUAL
37995: OR
37996: IFFALSE 38102
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37998: LD_VAR 0 5
38002: PUSH
38003: LD_INT 1
38005: ARRAY
38006: PPUSH
38007: CALL_OW 305
38011: PUSH
38012: LD_VAR 0 5
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: PPUSH
38021: CALL_OW 255
38025: PUSH
38026: LD_VAR 0 1
38030: PPUSH
38031: CALL_OW 255
38035: EQUAL
38036: AND
38037: IFFALSE 38061
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38039: LD_VAR 0 5
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PPUSH
38048: LD_VAR 0 5
38052: PUSH
38053: LD_INT 2
38055: ARRAY
38056: PPUSH
38057: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38061: LD_ADDR_EXP 101
38065: PUSH
38066: LD_EXP 101
38070: PPUSH
38071: LD_VAR 0 4
38075: PPUSH
38076: LD_EXP 101
38080: PUSH
38081: LD_VAR 0 4
38085: ARRAY
38086: PPUSH
38087: LD_VAR 0 3
38091: PPUSH
38092: CALL_OW 3
38096: PPUSH
38097: CALL_OW 1
38101: ST_TO_ADDR
// end ; end ;
38102: GO 37931
38104: POP
38105: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38106: LD_VAR 0 1
38110: PPUSH
38111: LD_EXP 101
38115: PUSH
38116: LD_VAR 0 4
38120: ARRAY
38121: PUSH
38122: LD_INT 0
38124: PLUS
38125: PPUSH
38126: CALL_OW 505
// end ;
38130: LD_VAR 0 2
38134: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38135: LD_INT 0
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
// if not hack in hackTanks then
38141: LD_VAR 0 1
38145: PUSH
38146: LD_EXP 100
38150: IN
38151: NOT
38152: IFFALSE 38156
// exit ;
38154: GO 38241
// index := GetElementIndex ( hackTanks , hack ) ;
38156: LD_ADDR_VAR 0 5
38160: PUSH
38161: LD_EXP 100
38165: PPUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL 44999 0 2
38175: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38176: LD_ADDR_VAR 0 4
38180: PUSH
38181: DOUBLE
38182: LD_INT 1
38184: DEC
38185: ST_TO_ADDR
38186: LD_EXP 101
38190: PUSH
38191: LD_VAR 0 5
38195: ARRAY
38196: PUSH
38197: FOR_TO
38198: IFFALSE 38239
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38200: LD_EXP 101
38204: PUSH
38205: LD_VAR 0 5
38209: ARRAY
38210: PUSH
38211: LD_VAR 0 4
38215: ARRAY
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: PUSH
38221: LD_VAR 0 2
38225: EQUAL
38226: IFFALSE 38237
// KillUnit ( vehicle ) ;
38228: LD_VAR 0 2
38232: PPUSH
38233: CALL_OW 66
38237: GO 38197
38239: POP
38240: POP
// end ;
38241: LD_VAR 0 3
38245: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38246: LD_EXP 105
38250: NOT
38251: IFFALSE 38286
38253: GO 38255
38255: DISABLE
// begin initMiner := true ;
38256: LD_ADDR_EXP 105
38260: PUSH
38261: LD_INT 1
38263: ST_TO_ADDR
// minersList := [ ] ;
38264: LD_ADDR_EXP 106
38268: PUSH
38269: EMPTY
38270: ST_TO_ADDR
// minerMinesList := [ ] ;
38271: LD_ADDR_EXP 107
38275: PUSH
38276: EMPTY
38277: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38278: LD_ADDR_EXP 108
38282: PUSH
38283: LD_INT 5
38285: ST_TO_ADDR
// end ;
38286: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38287: LD_EXP 105
38291: PUSH
38292: LD_INT 34
38294: PUSH
38295: LD_INT 81
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PPUSH
38302: CALL_OW 69
38306: AND
38307: IFFALSE 38768
38309: GO 38311
38311: DISABLE
38312: LD_INT 0
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
// begin enable ;
38318: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38319: LD_ADDR_VAR 0 1
38323: PUSH
38324: LD_INT 34
38326: PUSH
38327: LD_INT 81
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PPUSH
38334: CALL_OW 69
38338: PUSH
38339: FOR_IN
38340: IFFALSE 38412
// begin if not i in minersList then
38342: LD_VAR 0 1
38346: PUSH
38347: LD_EXP 106
38351: IN
38352: NOT
38353: IFFALSE 38410
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38355: LD_ADDR_EXP 106
38359: PUSH
38360: LD_EXP 106
38364: PPUSH
38365: LD_EXP 106
38369: PUSH
38370: LD_INT 1
38372: PLUS
38373: PPUSH
38374: LD_VAR 0 1
38378: PPUSH
38379: CALL_OW 1
38383: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38384: LD_ADDR_EXP 107
38388: PUSH
38389: LD_EXP 107
38393: PPUSH
38394: LD_EXP 107
38398: PUSH
38399: LD_INT 1
38401: PLUS
38402: PPUSH
38403: EMPTY
38404: PPUSH
38405: CALL_OW 1
38409: ST_TO_ADDR
// end end ;
38410: GO 38339
38412: POP
38413: POP
// for i := minerMinesList downto 1 do
38414: LD_ADDR_VAR 0 1
38418: PUSH
38419: DOUBLE
38420: LD_EXP 107
38424: INC
38425: ST_TO_ADDR
38426: LD_INT 1
38428: PUSH
38429: FOR_DOWNTO
38430: IFFALSE 38766
// begin if IsLive ( minersList [ i ] ) then
38432: LD_EXP 106
38436: PUSH
38437: LD_VAR 0 1
38441: ARRAY
38442: PPUSH
38443: CALL_OW 300
38447: IFFALSE 38475
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38449: LD_EXP 106
38453: PUSH
38454: LD_VAR 0 1
38458: ARRAY
38459: PPUSH
38460: LD_EXP 107
38464: PUSH
38465: LD_VAR 0 1
38469: ARRAY
38470: PPUSH
38471: CALL_OW 505
// if not minerMinesList [ i ] then
38475: LD_EXP 107
38479: PUSH
38480: LD_VAR 0 1
38484: ARRAY
38485: NOT
38486: IFFALSE 38490
// continue ;
38488: GO 38429
// for j := minerMinesList [ i ] downto 1 do
38490: LD_ADDR_VAR 0 2
38494: PUSH
38495: DOUBLE
38496: LD_EXP 107
38500: PUSH
38501: LD_VAR 0 1
38505: ARRAY
38506: INC
38507: ST_TO_ADDR
38508: LD_INT 1
38510: PUSH
38511: FOR_DOWNTO
38512: IFFALSE 38762
// begin side := GetSide ( minersList [ i ] ) ;
38514: LD_ADDR_VAR 0 3
38518: PUSH
38519: LD_EXP 106
38523: PUSH
38524: LD_VAR 0 1
38528: ARRAY
38529: PPUSH
38530: CALL_OW 255
38534: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38535: LD_ADDR_VAR 0 4
38539: PUSH
38540: LD_EXP 107
38544: PUSH
38545: LD_VAR 0 1
38549: ARRAY
38550: PUSH
38551: LD_VAR 0 2
38555: ARRAY
38556: PUSH
38557: LD_INT 1
38559: ARRAY
38560: PPUSH
38561: LD_EXP 107
38565: PUSH
38566: LD_VAR 0 1
38570: ARRAY
38571: PUSH
38572: LD_VAR 0 2
38576: ARRAY
38577: PUSH
38578: LD_INT 2
38580: ARRAY
38581: PPUSH
38582: CALL_OW 428
38586: ST_TO_ADDR
// if not tmp then
38587: LD_VAR 0 4
38591: NOT
38592: IFFALSE 38596
// continue ;
38594: GO 38511
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38596: LD_VAR 0 4
38600: PUSH
38601: LD_INT 81
38603: PUSH
38604: LD_VAR 0 3
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PPUSH
38613: CALL_OW 69
38617: IN
38618: PUSH
38619: LD_EXP 107
38623: PUSH
38624: LD_VAR 0 1
38628: ARRAY
38629: PUSH
38630: LD_VAR 0 2
38634: ARRAY
38635: PUSH
38636: LD_INT 1
38638: ARRAY
38639: PPUSH
38640: LD_EXP 107
38644: PUSH
38645: LD_VAR 0 1
38649: ARRAY
38650: PUSH
38651: LD_VAR 0 2
38655: ARRAY
38656: PUSH
38657: LD_INT 2
38659: ARRAY
38660: PPUSH
38661: CALL_OW 458
38665: AND
38666: IFFALSE 38760
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38668: LD_EXP 107
38672: PUSH
38673: LD_VAR 0 1
38677: ARRAY
38678: PUSH
38679: LD_VAR 0 2
38683: ARRAY
38684: PUSH
38685: LD_INT 1
38687: ARRAY
38688: PPUSH
38689: LD_EXP 107
38693: PUSH
38694: LD_VAR 0 1
38698: ARRAY
38699: PUSH
38700: LD_VAR 0 2
38704: ARRAY
38705: PUSH
38706: LD_INT 2
38708: ARRAY
38709: PPUSH
38710: LD_VAR 0 3
38714: PPUSH
38715: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38719: LD_ADDR_EXP 107
38723: PUSH
38724: LD_EXP 107
38728: PPUSH
38729: LD_VAR 0 1
38733: PPUSH
38734: LD_EXP 107
38738: PUSH
38739: LD_VAR 0 1
38743: ARRAY
38744: PPUSH
38745: LD_VAR 0 2
38749: PPUSH
38750: CALL_OW 3
38754: PPUSH
38755: CALL_OW 1
38759: ST_TO_ADDR
// end ; end ;
38760: GO 38511
38762: POP
38763: POP
// end ;
38764: GO 38429
38766: POP
38767: POP
// end ;
38768: PPOPN 4
38770: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38771: LD_INT 0
38773: PPUSH
38774: PPUSH
// result := false ;
38775: LD_ADDR_VAR 0 4
38779: PUSH
38780: LD_INT 0
38782: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 264
38792: PUSH
38793: LD_INT 81
38795: EQUAL
38796: NOT
38797: IFFALSE 38801
// exit ;
38799: GO 39041
// index := GetElementIndex ( minersList , unit ) ;
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_EXP 106
38810: PPUSH
38811: LD_VAR 0 1
38815: PPUSH
38816: CALL 44999 0 2
38820: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38821: LD_EXP 107
38825: PUSH
38826: LD_VAR 0 5
38830: ARRAY
38831: PUSH
38832: LD_EXP 108
38836: GREATEREQUAL
38837: IFFALSE 38841
// exit ;
38839: GO 39041
// ComMoveXY ( unit , x , y ) ;
38841: LD_VAR 0 1
38845: PPUSH
38846: LD_VAR 0 2
38850: PPUSH
38851: LD_VAR 0 3
38855: PPUSH
38856: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38860: LD_INT 35
38862: PPUSH
38863: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38867: LD_VAR 0 1
38871: PPUSH
38872: LD_VAR 0 2
38876: PPUSH
38877: LD_VAR 0 3
38881: PPUSH
38882: CALL 76354 0 3
38886: NOT
38887: PUSH
38888: LD_VAR 0 1
38892: PPUSH
38893: CALL_OW 314
38897: AND
38898: IFFALSE 38902
// exit ;
38900: GO 39041
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38902: LD_VAR 0 2
38906: PPUSH
38907: LD_VAR 0 3
38911: PPUSH
38912: CALL_OW 428
38916: PUSH
38917: LD_VAR 0 1
38921: EQUAL
38922: PUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 314
38932: NOT
38933: AND
38934: IFFALSE 38860
// PlaySoundXY ( x , y , PlantMine ) ;
38936: LD_VAR 0 2
38940: PPUSH
38941: LD_VAR 0 3
38945: PPUSH
38946: LD_STRING PlantMine
38948: PPUSH
38949: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38953: LD_VAR 0 2
38957: PPUSH
38958: LD_VAR 0 3
38962: PPUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: CALL_OW 255
38972: PPUSH
38973: LD_INT 0
38975: PPUSH
38976: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38980: LD_ADDR_EXP 107
38984: PUSH
38985: LD_EXP 107
38989: PPUSH
38990: LD_VAR 0 5
38994: PUSH
38995: LD_EXP 107
38999: PUSH
39000: LD_VAR 0 5
39004: ARRAY
39005: PUSH
39006: LD_INT 1
39008: PLUS
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PPUSH
39014: LD_VAR 0 2
39018: PUSH
39019: LD_VAR 0 3
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PPUSH
39028: CALL 45214 0 3
39032: ST_TO_ADDR
// result := true ;
39033: LD_ADDR_VAR 0 4
39037: PUSH
39038: LD_INT 1
39040: ST_TO_ADDR
// end ;
39041: LD_VAR 0 4
39045: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39046: LD_INT 0
39048: PPUSH
39049: PPUSH
39050: PPUSH
// if not unit in minersList then
39051: LD_VAR 0 1
39055: PUSH
39056: LD_EXP 106
39060: IN
39061: NOT
39062: IFFALSE 39066
// exit ;
39064: GO 39458
// index := GetElementIndex ( minersList , unit ) ;
39066: LD_ADDR_VAR 0 6
39070: PUSH
39071: LD_EXP 106
39075: PPUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL 44999 0 2
39085: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39086: LD_ADDR_VAR 0 5
39090: PUSH
39091: DOUBLE
39092: LD_EXP 107
39096: PUSH
39097: LD_VAR 0 6
39101: ARRAY
39102: INC
39103: ST_TO_ADDR
39104: LD_INT 1
39106: PUSH
39107: FOR_DOWNTO
39108: IFFALSE 39269
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39110: LD_EXP 107
39114: PUSH
39115: LD_VAR 0 6
39119: ARRAY
39120: PUSH
39121: LD_VAR 0 5
39125: ARRAY
39126: PUSH
39127: LD_INT 1
39129: ARRAY
39130: PUSH
39131: LD_VAR 0 2
39135: EQUAL
39136: PUSH
39137: LD_EXP 107
39141: PUSH
39142: LD_VAR 0 6
39146: ARRAY
39147: PUSH
39148: LD_VAR 0 5
39152: ARRAY
39153: PUSH
39154: LD_INT 2
39156: ARRAY
39157: PUSH
39158: LD_VAR 0 3
39162: EQUAL
39163: AND
39164: IFFALSE 39267
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39166: LD_EXP 107
39170: PUSH
39171: LD_VAR 0 6
39175: ARRAY
39176: PUSH
39177: LD_VAR 0 5
39181: ARRAY
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: PPUSH
39187: LD_EXP 107
39191: PUSH
39192: LD_VAR 0 6
39196: ARRAY
39197: PUSH
39198: LD_VAR 0 5
39202: ARRAY
39203: PUSH
39204: LD_INT 2
39206: ARRAY
39207: PPUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 255
39217: PPUSH
39218: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39222: LD_ADDR_EXP 107
39226: PUSH
39227: LD_EXP 107
39231: PPUSH
39232: LD_VAR 0 6
39236: PPUSH
39237: LD_EXP 107
39241: PUSH
39242: LD_VAR 0 6
39246: ARRAY
39247: PPUSH
39248: LD_VAR 0 5
39252: PPUSH
39253: CALL_OW 3
39257: PPUSH
39258: CALL_OW 1
39262: ST_TO_ADDR
// exit ;
39263: POP
39264: POP
39265: GO 39458
// end ; end ;
39267: GO 39107
39269: POP
39270: POP
// for i := minerMinesList [ index ] downto 1 do
39271: LD_ADDR_VAR 0 5
39275: PUSH
39276: DOUBLE
39277: LD_EXP 107
39281: PUSH
39282: LD_VAR 0 6
39286: ARRAY
39287: INC
39288: ST_TO_ADDR
39289: LD_INT 1
39291: PUSH
39292: FOR_DOWNTO
39293: IFFALSE 39456
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39295: LD_EXP 107
39299: PUSH
39300: LD_VAR 0 6
39304: ARRAY
39305: PUSH
39306: LD_VAR 0 5
39310: ARRAY
39311: PUSH
39312: LD_INT 1
39314: ARRAY
39315: PPUSH
39316: LD_EXP 107
39320: PUSH
39321: LD_VAR 0 6
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 5
39331: ARRAY
39332: PUSH
39333: LD_INT 2
39335: ARRAY
39336: PPUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: LD_VAR 0 3
39346: PPUSH
39347: CALL_OW 298
39351: PUSH
39352: LD_INT 6
39354: LESS
39355: IFFALSE 39454
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39357: LD_EXP 107
39361: PUSH
39362: LD_VAR 0 6
39366: ARRAY
39367: PUSH
39368: LD_VAR 0 5
39372: ARRAY
39373: PUSH
39374: LD_INT 1
39376: ARRAY
39377: PPUSH
39378: LD_EXP 107
39382: PUSH
39383: LD_VAR 0 6
39387: ARRAY
39388: PUSH
39389: LD_VAR 0 5
39393: ARRAY
39394: PUSH
39395: LD_INT 2
39397: ARRAY
39398: PPUSH
39399: LD_VAR 0 1
39403: PPUSH
39404: CALL_OW 255
39408: PPUSH
39409: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39413: LD_ADDR_EXP 107
39417: PUSH
39418: LD_EXP 107
39422: PPUSH
39423: LD_VAR 0 6
39427: PPUSH
39428: LD_EXP 107
39432: PUSH
39433: LD_VAR 0 6
39437: ARRAY
39438: PPUSH
39439: LD_VAR 0 5
39443: PPUSH
39444: CALL_OW 3
39448: PPUSH
39449: CALL_OW 1
39453: ST_TO_ADDR
// end ; end ;
39454: GO 39292
39456: POP
39457: POP
// end ;
39458: LD_VAR 0 4
39462: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39463: LD_INT 0
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 264
39483: PUSH
39484: LD_INT 81
39486: EQUAL
39487: NOT
39488: PUSH
39489: LD_VAR 0 1
39493: PUSH
39494: LD_EXP 106
39498: IN
39499: NOT
39500: OR
39501: IFFALSE 39505
// exit ;
39503: GO 39827
// index := GetElementIndex ( minersList , unit ) ;
39505: LD_ADDR_VAR 0 6
39509: PUSH
39510: LD_EXP 106
39514: PPUSH
39515: LD_VAR 0 1
39519: PPUSH
39520: CALL 44999 0 2
39524: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39525: LD_ADDR_VAR 0 8
39529: PUSH
39530: LD_EXP 108
39534: PUSH
39535: LD_EXP 107
39539: PUSH
39540: LD_VAR 0 6
39544: ARRAY
39545: MINUS
39546: ST_TO_ADDR
// if not minesFreeAmount then
39547: LD_VAR 0 8
39551: NOT
39552: IFFALSE 39556
// exit ;
39554: GO 39827
// tmp := [ ] ;
39556: LD_ADDR_VAR 0 7
39560: PUSH
39561: EMPTY
39562: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39563: LD_ADDR_VAR 0 5
39567: PUSH
39568: DOUBLE
39569: LD_INT 1
39571: DEC
39572: ST_TO_ADDR
39573: LD_VAR 0 8
39577: PUSH
39578: FOR_TO
39579: IFFALSE 39774
// begin _d := rand ( 0 , 5 ) ;
39581: LD_ADDR_VAR 0 11
39585: PUSH
39586: LD_INT 0
39588: PPUSH
39589: LD_INT 5
39591: PPUSH
39592: CALL_OW 12
39596: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39597: LD_ADDR_VAR 0 12
39601: PUSH
39602: LD_INT 2
39604: PPUSH
39605: LD_INT 6
39607: PPUSH
39608: CALL_OW 12
39612: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39613: LD_ADDR_VAR 0 9
39617: PUSH
39618: LD_VAR 0 2
39622: PPUSH
39623: LD_VAR 0 11
39627: PPUSH
39628: LD_VAR 0 12
39632: PPUSH
39633: CALL_OW 272
39637: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39638: LD_ADDR_VAR 0 10
39642: PUSH
39643: LD_VAR 0 3
39647: PPUSH
39648: LD_VAR 0 11
39652: PPUSH
39653: LD_VAR 0 12
39657: PPUSH
39658: CALL_OW 273
39662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39663: LD_VAR 0 9
39667: PPUSH
39668: LD_VAR 0 10
39672: PPUSH
39673: CALL_OW 488
39677: PUSH
39678: LD_VAR 0 9
39682: PUSH
39683: LD_VAR 0 10
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_VAR 0 7
39696: IN
39697: NOT
39698: AND
39699: PUSH
39700: LD_VAR 0 9
39704: PPUSH
39705: LD_VAR 0 10
39709: PPUSH
39710: CALL_OW 458
39714: NOT
39715: AND
39716: IFFALSE 39758
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39718: LD_ADDR_VAR 0 7
39722: PUSH
39723: LD_VAR 0 7
39727: PPUSH
39728: LD_VAR 0 7
39732: PUSH
39733: LD_INT 1
39735: PLUS
39736: PPUSH
39737: LD_VAR 0 9
39741: PUSH
39742: LD_VAR 0 10
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PPUSH
39751: CALL_OW 1
39755: ST_TO_ADDR
39756: GO 39772
// i := i - 1 ;
39758: LD_ADDR_VAR 0 5
39762: PUSH
39763: LD_VAR 0 5
39767: PUSH
39768: LD_INT 1
39770: MINUS
39771: ST_TO_ADDR
// end ;
39772: GO 39578
39774: POP
39775: POP
// for i in tmp do
39776: LD_ADDR_VAR 0 5
39780: PUSH
39781: LD_VAR 0 7
39785: PUSH
39786: FOR_IN
39787: IFFALSE 39825
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39789: LD_VAR 0 1
39793: PPUSH
39794: LD_VAR 0 5
39798: PUSH
39799: LD_INT 1
39801: ARRAY
39802: PPUSH
39803: LD_VAR 0 5
39807: PUSH
39808: LD_INT 2
39810: ARRAY
39811: PPUSH
39812: CALL 38771 0 3
39816: NOT
39817: IFFALSE 39823
// exit ;
39819: POP
39820: POP
39821: GO 39827
39823: GO 39786
39825: POP
39826: POP
// end ;
39827: LD_VAR 0 4
39831: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39832: LD_INT 0
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
// if not GetClass ( unit ) = class_sniper then
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 257
39850: PUSH
39851: LD_INT 5
39853: EQUAL
39854: NOT
39855: IFFALSE 39859
// exit ;
39857: GO 40247
// dist := 8 ;
39859: LD_ADDR_VAR 0 5
39863: PUSH
39864: LD_INT 8
39866: ST_TO_ADDR
// viewRange := 12 ;
39867: LD_ADDR_VAR 0 7
39871: PUSH
39872: LD_INT 12
39874: ST_TO_ADDR
// side := GetSide ( unit ) ;
39875: LD_ADDR_VAR 0 6
39879: PUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 255
39889: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39890: LD_INT 61
39892: PPUSH
39893: LD_VAR 0 6
39897: PPUSH
39898: CALL_OW 321
39902: PUSH
39903: LD_INT 2
39905: EQUAL
39906: IFFALSE 39916
// viewRange := 16 ;
39908: LD_ADDR_VAR 0 7
39912: PUSH
39913: LD_INT 16
39915: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39916: LD_VAR 0 1
39920: PPUSH
39921: LD_VAR 0 2
39925: PPUSH
39926: LD_VAR 0 3
39930: PPUSH
39931: CALL_OW 297
39935: PUSH
39936: LD_VAR 0 5
39940: GREATER
39941: IFFALSE 40020
// begin ComMoveXY ( unit , x , y ) ;
39943: LD_VAR 0 1
39947: PPUSH
39948: LD_VAR 0 2
39952: PPUSH
39953: LD_VAR 0 3
39957: PPUSH
39958: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39962: LD_INT 35
39964: PPUSH
39965: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39969: LD_VAR 0 1
39973: PPUSH
39974: LD_VAR 0 2
39978: PPUSH
39979: LD_VAR 0 3
39983: PPUSH
39984: CALL 76354 0 3
39988: NOT
39989: IFFALSE 39993
// exit ;
39991: GO 40247
// until GetDistUnitXY ( unit , x , y ) < dist ;
39993: LD_VAR 0 1
39997: PPUSH
39998: LD_VAR 0 2
40002: PPUSH
40003: LD_VAR 0 3
40007: PPUSH
40008: CALL_OW 297
40012: PUSH
40013: LD_VAR 0 5
40017: LESS
40018: IFFALSE 39962
// end ; ComTurnXY ( unit , x , y ) ;
40020: LD_VAR 0 1
40024: PPUSH
40025: LD_VAR 0 2
40029: PPUSH
40030: LD_VAR 0 3
40034: PPUSH
40035: CALL_OW 118
// wait ( 5 ) ;
40039: LD_INT 5
40041: PPUSH
40042: CALL_OW 67
// _d := GetDir ( unit ) ;
40046: LD_ADDR_VAR 0 10
40050: PUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 254
40060: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40061: LD_ADDR_VAR 0 8
40065: PUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 250
40075: PPUSH
40076: LD_VAR 0 10
40080: PPUSH
40081: LD_VAR 0 5
40085: PPUSH
40086: CALL_OW 272
40090: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40091: LD_ADDR_VAR 0 9
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 251
40105: PPUSH
40106: LD_VAR 0 10
40110: PPUSH
40111: LD_VAR 0 5
40115: PPUSH
40116: CALL_OW 273
40120: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40121: LD_VAR 0 8
40125: PPUSH
40126: LD_VAR 0 9
40130: PPUSH
40131: CALL_OW 488
40135: NOT
40136: IFFALSE 40140
// exit ;
40138: GO 40247
// ComAnimCustom ( unit , 1 ) ;
40140: LD_VAR 0 1
40144: PPUSH
40145: LD_INT 1
40147: PPUSH
40148: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40152: LD_VAR 0 8
40156: PPUSH
40157: LD_VAR 0 9
40161: PPUSH
40162: LD_VAR 0 6
40166: PPUSH
40167: LD_VAR 0 7
40171: PPUSH
40172: CALL_OW 330
// repeat wait ( 1 ) ;
40176: LD_INT 1
40178: PPUSH
40179: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40183: LD_VAR 0 1
40187: PPUSH
40188: CALL_OW 316
40192: PUSH
40193: LD_VAR 0 1
40197: PPUSH
40198: CALL_OW 314
40202: OR
40203: PUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: CALL_OW 302
40213: NOT
40214: OR
40215: PUSH
40216: LD_VAR 0 1
40220: PPUSH
40221: CALL_OW 301
40225: OR
40226: IFFALSE 40176
// RemoveSeeing ( _x , _y , side ) ;
40228: LD_VAR 0 8
40232: PPUSH
40233: LD_VAR 0 9
40237: PPUSH
40238: LD_VAR 0 6
40242: PPUSH
40243: CALL_OW 331
// end ; end_of_file
40247: LD_VAR 0 4
40251: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40252: LD_INT 0
40254: PPUSH
40255: PPUSH
// if exist_mode then
40256: LD_VAR 0 2
40260: IFFALSE 40285
// unit := CreateCharacter ( prefix & ident ) else
40262: LD_ADDR_VAR 0 5
40266: PUSH
40267: LD_VAR 0 3
40271: PUSH
40272: LD_VAR 0 1
40276: STR
40277: PPUSH
40278: CALL_OW 34
40282: ST_TO_ADDR
40283: GO 40300
// unit := NewCharacter ( ident ) ;
40285: LD_ADDR_VAR 0 5
40289: PUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 25
40299: ST_TO_ADDR
// result := unit ;
40300: LD_ADDR_VAR 0 4
40304: PUSH
40305: LD_VAR 0 5
40309: ST_TO_ADDR
// end ;
40310: LD_VAR 0 4
40314: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40315: LD_INT 0
40317: PPUSH
40318: PPUSH
// if not side or not nation then
40319: LD_VAR 0 1
40323: NOT
40324: PUSH
40325: LD_VAR 0 2
40329: NOT
40330: OR
40331: IFFALSE 40335
// exit ;
40333: GO 41103
// case nation of nation_american :
40335: LD_VAR 0 2
40339: PUSH
40340: LD_INT 1
40342: DOUBLE
40343: EQUAL
40344: IFTRUE 40348
40346: GO 40562
40348: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40349: LD_ADDR_VAR 0 4
40353: PUSH
40354: LD_INT 35
40356: PUSH
40357: LD_INT 45
40359: PUSH
40360: LD_INT 46
40362: PUSH
40363: LD_INT 47
40365: PUSH
40366: LD_INT 82
40368: PUSH
40369: LD_INT 83
40371: PUSH
40372: LD_INT 84
40374: PUSH
40375: LD_INT 85
40377: PUSH
40378: LD_INT 86
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 6
40389: PUSH
40390: LD_INT 15
40392: PUSH
40393: LD_INT 16
40395: PUSH
40396: LD_INT 7
40398: PUSH
40399: LD_INT 12
40401: PUSH
40402: LD_INT 13
40404: PUSH
40405: LD_INT 10
40407: PUSH
40408: LD_INT 14
40410: PUSH
40411: LD_INT 20
40413: PUSH
40414: LD_INT 21
40416: PUSH
40417: LD_INT 22
40419: PUSH
40420: LD_INT 25
40422: PUSH
40423: LD_INT 32
40425: PUSH
40426: LD_INT 27
40428: PUSH
40429: LD_INT 36
40431: PUSH
40432: LD_INT 69
40434: PUSH
40435: LD_INT 39
40437: PUSH
40438: LD_INT 34
40440: PUSH
40441: LD_INT 40
40443: PUSH
40444: LD_INT 48
40446: PUSH
40447: LD_INT 49
40449: PUSH
40450: LD_INT 50
40452: PUSH
40453: LD_INT 51
40455: PUSH
40456: LD_INT 52
40458: PUSH
40459: LD_INT 53
40461: PUSH
40462: LD_INT 54
40464: PUSH
40465: LD_INT 55
40467: PUSH
40468: LD_INT 56
40470: PUSH
40471: LD_INT 57
40473: PUSH
40474: LD_INT 58
40476: PUSH
40477: LD_INT 59
40479: PUSH
40480: LD_INT 60
40482: PUSH
40483: LD_INT 61
40485: PUSH
40486: LD_INT 62
40488: PUSH
40489: LD_INT 80
40491: PUSH
40492: LD_INT 82
40494: PUSH
40495: LD_INT 83
40497: PUSH
40498: LD_INT 84
40500: PUSH
40501: LD_INT 85
40503: PUSH
40504: LD_INT 86
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: ST_TO_ADDR
40560: GO 41027
40562: LD_INT 2
40564: DOUBLE
40565: EQUAL
40566: IFTRUE 40570
40568: GO 40796
40570: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40571: LD_ADDR_VAR 0 4
40575: PUSH
40576: LD_INT 35
40578: PUSH
40579: LD_INT 45
40581: PUSH
40582: LD_INT 46
40584: PUSH
40585: LD_INT 47
40587: PUSH
40588: LD_INT 82
40590: PUSH
40591: LD_INT 83
40593: PUSH
40594: LD_INT 84
40596: PUSH
40597: LD_INT 85
40599: PUSH
40600: LD_INT 87
40602: PUSH
40603: LD_INT 70
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 11
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: LD_INT 4
40617: PUSH
40618: LD_INT 5
40620: PUSH
40621: LD_INT 6
40623: PUSH
40624: LD_INT 15
40626: PUSH
40627: LD_INT 18
40629: PUSH
40630: LD_INT 7
40632: PUSH
40633: LD_INT 17
40635: PUSH
40636: LD_INT 8
40638: PUSH
40639: LD_INT 20
40641: PUSH
40642: LD_INT 21
40644: PUSH
40645: LD_INT 22
40647: PUSH
40648: LD_INT 72
40650: PUSH
40651: LD_INT 26
40653: PUSH
40654: LD_INT 69
40656: PUSH
40657: LD_INT 39
40659: PUSH
40660: LD_INT 40
40662: PUSH
40663: LD_INT 41
40665: PUSH
40666: LD_INT 42
40668: PUSH
40669: LD_INT 43
40671: PUSH
40672: LD_INT 48
40674: PUSH
40675: LD_INT 49
40677: PUSH
40678: LD_INT 50
40680: PUSH
40681: LD_INT 51
40683: PUSH
40684: LD_INT 52
40686: PUSH
40687: LD_INT 53
40689: PUSH
40690: LD_INT 54
40692: PUSH
40693: LD_INT 55
40695: PUSH
40696: LD_INT 56
40698: PUSH
40699: LD_INT 60
40701: PUSH
40702: LD_INT 61
40704: PUSH
40705: LD_INT 62
40707: PUSH
40708: LD_INT 66
40710: PUSH
40711: LD_INT 67
40713: PUSH
40714: LD_INT 68
40716: PUSH
40717: LD_INT 81
40719: PUSH
40720: LD_INT 82
40722: PUSH
40723: LD_INT 83
40725: PUSH
40726: LD_INT 84
40728: PUSH
40729: LD_INT 85
40731: PUSH
40732: LD_INT 87
40734: PUSH
40735: LD_INT 88
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: ST_TO_ADDR
40794: GO 41027
40796: LD_INT 3
40798: DOUBLE
40799: EQUAL
40800: IFTRUE 40804
40802: GO 41026
40804: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40805: LD_ADDR_VAR 0 4
40809: PUSH
40810: LD_INT 46
40812: PUSH
40813: LD_INT 47
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 82
40824: PUSH
40825: LD_INT 83
40827: PUSH
40828: LD_INT 84
40830: PUSH
40831: LD_INT 85
40833: PUSH
40834: LD_INT 86
40836: PUSH
40837: LD_INT 11
40839: PUSH
40840: LD_INT 9
40842: PUSH
40843: LD_INT 20
40845: PUSH
40846: LD_INT 19
40848: PUSH
40849: LD_INT 21
40851: PUSH
40852: LD_INT 24
40854: PUSH
40855: LD_INT 22
40857: PUSH
40858: LD_INT 25
40860: PUSH
40861: LD_INT 28
40863: PUSH
40864: LD_INT 29
40866: PUSH
40867: LD_INT 30
40869: PUSH
40870: LD_INT 31
40872: PUSH
40873: LD_INT 37
40875: PUSH
40876: LD_INT 38
40878: PUSH
40879: LD_INT 32
40881: PUSH
40882: LD_INT 27
40884: PUSH
40885: LD_INT 33
40887: PUSH
40888: LD_INT 69
40890: PUSH
40891: LD_INT 39
40893: PUSH
40894: LD_INT 34
40896: PUSH
40897: LD_INT 40
40899: PUSH
40900: LD_INT 71
40902: PUSH
40903: LD_INT 23
40905: PUSH
40906: LD_INT 44
40908: PUSH
40909: LD_INT 48
40911: PUSH
40912: LD_INT 49
40914: PUSH
40915: LD_INT 50
40917: PUSH
40918: LD_INT 51
40920: PUSH
40921: LD_INT 52
40923: PUSH
40924: LD_INT 53
40926: PUSH
40927: LD_INT 54
40929: PUSH
40930: LD_INT 55
40932: PUSH
40933: LD_INT 56
40935: PUSH
40936: LD_INT 57
40938: PUSH
40939: LD_INT 58
40941: PUSH
40942: LD_INT 59
40944: PUSH
40945: LD_INT 63
40947: PUSH
40948: LD_INT 64
40950: PUSH
40951: LD_INT 65
40953: PUSH
40954: LD_INT 82
40956: PUSH
40957: LD_INT 83
40959: PUSH
40960: LD_INT 84
40962: PUSH
40963: LD_INT 85
40965: PUSH
40966: LD_INT 86
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: ST_TO_ADDR
41024: GO 41027
41026: POP
// if state > - 1 and state < 3 then
41027: LD_VAR 0 3
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: GREATER
41036: PUSH
41037: LD_VAR 0 3
41041: PUSH
41042: LD_INT 3
41044: LESS
41045: AND
41046: IFFALSE 41103
// for i in result do
41048: LD_ADDR_VAR 0 5
41052: PUSH
41053: LD_VAR 0 4
41057: PUSH
41058: FOR_IN
41059: IFFALSE 41101
// if GetTech ( i , side ) <> state then
41061: LD_VAR 0 5
41065: PPUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 321
41075: PUSH
41076: LD_VAR 0 3
41080: NONEQUAL
41081: IFFALSE 41099
// result := result diff i ;
41083: LD_ADDR_VAR 0 4
41087: PUSH
41088: LD_VAR 0 4
41092: PUSH
41093: LD_VAR 0 5
41097: DIFF
41098: ST_TO_ADDR
41099: GO 41058
41101: POP
41102: POP
// end ;
41103: LD_VAR 0 4
41107: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41108: LD_INT 0
41110: PPUSH
41111: PPUSH
41112: PPUSH
// result := true ;
41113: LD_ADDR_VAR 0 3
41117: PUSH
41118: LD_INT 1
41120: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41121: LD_ADDR_VAR 0 5
41125: PUSH
41126: LD_VAR 0 2
41130: PPUSH
41131: CALL_OW 480
41135: ST_TO_ADDR
// if not tmp then
41136: LD_VAR 0 5
41140: NOT
41141: IFFALSE 41145
// exit ;
41143: GO 41194
// for i in tmp do
41145: LD_ADDR_VAR 0 4
41149: PUSH
41150: LD_VAR 0 5
41154: PUSH
41155: FOR_IN
41156: IFFALSE 41192
// if GetTech ( i , side ) <> state_researched then
41158: LD_VAR 0 4
41162: PPUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 321
41172: PUSH
41173: LD_INT 2
41175: NONEQUAL
41176: IFFALSE 41190
// begin result := false ;
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: LD_INT 0
41185: ST_TO_ADDR
// exit ;
41186: POP
41187: POP
41188: GO 41194
// end ;
41190: GO 41155
41192: POP
41193: POP
// end ;
41194: LD_VAR 0 3
41198: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41199: LD_INT 0
41201: PPUSH
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41214: LD_VAR 0 1
41218: NOT
41219: PUSH
41220: LD_VAR 0 1
41224: PPUSH
41225: CALL_OW 257
41229: PUSH
41230: LD_INT 9
41232: NONEQUAL
41233: OR
41234: IFFALSE 41238
// exit ;
41236: GO 41811
// side := GetSide ( unit ) ;
41238: LD_ADDR_VAR 0 9
41242: PUSH
41243: LD_VAR 0 1
41247: PPUSH
41248: CALL_OW 255
41252: ST_TO_ADDR
// tech_space := tech_spacanom ;
41253: LD_ADDR_VAR 0 12
41257: PUSH
41258: LD_INT 29
41260: ST_TO_ADDR
// tech_time := tech_taurad ;
41261: LD_ADDR_VAR 0 13
41265: PUSH
41266: LD_INT 28
41268: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41269: LD_ADDR_VAR 0 11
41273: PUSH
41274: LD_VAR 0 1
41278: PPUSH
41279: CALL_OW 310
41283: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41284: LD_VAR 0 11
41288: PPUSH
41289: CALL_OW 247
41293: PUSH
41294: LD_INT 2
41296: EQUAL
41297: IFFALSE 41301
// exit ;
41299: GO 41811
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41301: LD_ADDR_VAR 0 8
41305: PUSH
41306: LD_INT 81
41308: PUSH
41309: LD_VAR 0 9
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: LD_INT 21
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PPUSH
41339: CALL_OW 69
41343: ST_TO_ADDR
// if not tmp then
41344: LD_VAR 0 8
41348: NOT
41349: IFFALSE 41353
// exit ;
41351: GO 41811
// if in_unit then
41353: LD_VAR 0 11
41357: IFFALSE 41381
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41359: LD_ADDR_VAR 0 10
41363: PUSH
41364: LD_VAR 0 8
41368: PPUSH
41369: LD_VAR 0 11
41373: PPUSH
41374: CALL_OW 74
41378: ST_TO_ADDR
41379: GO 41401
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41381: LD_ADDR_VAR 0 10
41385: PUSH
41386: LD_VAR 0 8
41390: PPUSH
41391: LD_VAR 0 1
41395: PPUSH
41396: CALL_OW 74
41400: ST_TO_ADDR
// if not enemy then
41401: LD_VAR 0 10
41405: NOT
41406: IFFALSE 41410
// exit ;
41408: GO 41811
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41410: LD_VAR 0 11
41414: PUSH
41415: LD_VAR 0 11
41419: PPUSH
41420: LD_VAR 0 10
41424: PPUSH
41425: CALL_OW 296
41429: PUSH
41430: LD_INT 13
41432: GREATER
41433: AND
41434: PUSH
41435: LD_VAR 0 1
41439: PPUSH
41440: LD_VAR 0 10
41444: PPUSH
41445: CALL_OW 296
41449: PUSH
41450: LD_INT 12
41452: GREATER
41453: OR
41454: IFFALSE 41458
// exit ;
41456: GO 41811
// missile := [ 1 ] ;
41458: LD_ADDR_VAR 0 14
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41469: LD_VAR 0 9
41473: PPUSH
41474: LD_VAR 0 12
41478: PPUSH
41479: CALL_OW 325
41483: IFFALSE 41512
// missile := Replace ( missile , missile + 1 , 2 ) ;
41485: LD_ADDR_VAR 0 14
41489: PUSH
41490: LD_VAR 0 14
41494: PPUSH
41495: LD_VAR 0 14
41499: PUSH
41500: LD_INT 1
41502: PLUS
41503: PPUSH
41504: LD_INT 2
41506: PPUSH
41507: CALL_OW 1
41511: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41512: LD_VAR 0 9
41516: PPUSH
41517: LD_VAR 0 13
41521: PPUSH
41522: CALL_OW 325
41526: PUSH
41527: LD_VAR 0 10
41531: PPUSH
41532: CALL_OW 255
41536: PPUSH
41537: LD_VAR 0 13
41541: PPUSH
41542: CALL_OW 325
41546: NOT
41547: AND
41548: IFFALSE 41577
// missile := Replace ( missile , missile + 1 , 3 ) ;
41550: LD_ADDR_VAR 0 14
41554: PUSH
41555: LD_VAR 0 14
41559: PPUSH
41560: LD_VAR 0 14
41564: PUSH
41565: LD_INT 1
41567: PLUS
41568: PPUSH
41569: LD_INT 3
41571: PPUSH
41572: CALL_OW 1
41576: ST_TO_ADDR
// if missile < 2 then
41577: LD_VAR 0 14
41581: PUSH
41582: LD_INT 2
41584: LESS
41585: IFFALSE 41589
// exit ;
41587: GO 41811
// x := GetX ( enemy ) ;
41589: LD_ADDR_VAR 0 4
41593: PUSH
41594: LD_VAR 0 10
41598: PPUSH
41599: CALL_OW 250
41603: ST_TO_ADDR
// y := GetY ( enemy ) ;
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_VAR 0 10
41613: PPUSH
41614: CALL_OW 251
41618: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41619: LD_ADDR_VAR 0 6
41623: PUSH
41624: LD_VAR 0 4
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PPUSH
41633: LD_INT 1
41635: PPUSH
41636: CALL_OW 12
41640: PLUS
41641: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41642: LD_ADDR_VAR 0 7
41646: PUSH
41647: LD_VAR 0 5
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PPUSH
41656: LD_INT 1
41658: PPUSH
41659: CALL_OW 12
41663: PLUS
41664: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41665: LD_VAR 0 6
41669: PPUSH
41670: LD_VAR 0 7
41674: PPUSH
41675: CALL_OW 488
41679: NOT
41680: IFFALSE 41702
// begin _x := x ;
41682: LD_ADDR_VAR 0 6
41686: PUSH
41687: LD_VAR 0 4
41691: ST_TO_ADDR
// _y := y ;
41692: LD_ADDR_VAR 0 7
41696: PUSH
41697: LD_VAR 0 5
41701: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41702: LD_ADDR_VAR 0 3
41706: PUSH
41707: LD_INT 1
41709: PPUSH
41710: LD_VAR 0 14
41714: PPUSH
41715: CALL_OW 12
41719: ST_TO_ADDR
// case i of 1 :
41720: LD_VAR 0 3
41724: PUSH
41725: LD_INT 1
41727: DOUBLE
41728: EQUAL
41729: IFTRUE 41733
41731: GO 41750
41733: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41734: LD_VAR 0 1
41738: PPUSH
41739: LD_VAR 0 10
41743: PPUSH
41744: CALL_OW 115
41748: GO 41811
41750: LD_INT 2
41752: DOUBLE
41753: EQUAL
41754: IFTRUE 41758
41756: GO 41780
41758: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41759: LD_VAR 0 1
41763: PPUSH
41764: LD_VAR 0 6
41768: PPUSH
41769: LD_VAR 0 7
41773: PPUSH
41774: CALL_OW 153
41778: GO 41811
41780: LD_INT 3
41782: DOUBLE
41783: EQUAL
41784: IFTRUE 41788
41786: GO 41810
41788: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41789: LD_VAR 0 1
41793: PPUSH
41794: LD_VAR 0 6
41798: PPUSH
41799: LD_VAR 0 7
41803: PPUSH
41804: CALL_OW 154
41808: GO 41811
41810: POP
// end ;
41811: LD_VAR 0 2
41815: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41816: LD_INT 0
41818: PPUSH
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
// if not unit or not building then
41824: LD_VAR 0 1
41828: NOT
41829: PUSH
41830: LD_VAR 0 2
41834: NOT
41835: OR
41836: IFFALSE 41840
// exit ;
41838: GO 41998
// x := GetX ( building ) ;
41840: LD_ADDR_VAR 0 5
41844: PUSH
41845: LD_VAR 0 2
41849: PPUSH
41850: CALL_OW 250
41854: ST_TO_ADDR
// y := GetY ( building ) ;
41855: LD_ADDR_VAR 0 6
41859: PUSH
41860: LD_VAR 0 2
41864: PPUSH
41865: CALL_OW 251
41869: ST_TO_ADDR
// for i = 0 to 5 do
41870: LD_ADDR_VAR 0 4
41874: PUSH
41875: DOUBLE
41876: LD_INT 0
41878: DEC
41879: ST_TO_ADDR
41880: LD_INT 5
41882: PUSH
41883: FOR_TO
41884: IFFALSE 41996
// begin _x := ShiftX ( x , i , 3 ) ;
41886: LD_ADDR_VAR 0 7
41890: PUSH
41891: LD_VAR 0 5
41895: PPUSH
41896: LD_VAR 0 4
41900: PPUSH
41901: LD_INT 3
41903: PPUSH
41904: CALL_OW 272
41908: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41909: LD_ADDR_VAR 0 8
41913: PUSH
41914: LD_VAR 0 6
41918: PPUSH
41919: LD_VAR 0 4
41923: PPUSH
41924: LD_INT 3
41926: PPUSH
41927: CALL_OW 273
41931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41932: LD_VAR 0 7
41936: PPUSH
41937: LD_VAR 0 8
41941: PPUSH
41942: CALL_OW 488
41946: NOT
41947: IFFALSE 41951
// continue ;
41949: GO 41883
// if HexInfo ( _x , _y ) = 0 then
41951: LD_VAR 0 7
41955: PPUSH
41956: LD_VAR 0 8
41960: PPUSH
41961: CALL_OW 428
41965: PUSH
41966: LD_INT 0
41968: EQUAL
41969: IFFALSE 41994
// begin ComMoveXY ( unit , _x , _y ) ;
41971: LD_VAR 0 1
41975: PPUSH
41976: LD_VAR 0 7
41980: PPUSH
41981: LD_VAR 0 8
41985: PPUSH
41986: CALL_OW 111
// exit ;
41990: POP
41991: POP
41992: GO 41998
// end ; end ;
41994: GO 41883
41996: POP
41997: POP
// end ;
41998: LD_VAR 0 3
42002: RET
// export function ScanBase ( side , base_area ) ; begin
42003: LD_INT 0
42005: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42006: LD_ADDR_VAR 0 3
42010: PUSH
42011: LD_VAR 0 2
42015: PPUSH
42016: LD_INT 81
42018: PUSH
42019: LD_VAR 0 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PPUSH
42028: CALL_OW 70
42032: ST_TO_ADDR
// end ;
42033: LD_VAR 0 3
42037: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42038: LD_INT 0
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
// result := false ;
42044: LD_ADDR_VAR 0 2
42048: PUSH
42049: LD_INT 0
42051: ST_TO_ADDR
// side := GetSide ( unit ) ;
42052: LD_ADDR_VAR 0 3
42056: PUSH
42057: LD_VAR 0 1
42061: PPUSH
42062: CALL_OW 255
42066: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42067: LD_ADDR_VAR 0 4
42071: PUSH
42072: LD_VAR 0 1
42076: PPUSH
42077: CALL_OW 248
42081: ST_TO_ADDR
// case nat of 1 :
42082: LD_VAR 0 4
42086: PUSH
42087: LD_INT 1
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42095
42093: GO 42106
42095: POP
// tech := tech_lassight ; 2 :
42096: LD_ADDR_VAR 0 5
42100: PUSH
42101: LD_INT 12
42103: ST_TO_ADDR
42104: GO 42145
42106: LD_INT 2
42108: DOUBLE
42109: EQUAL
42110: IFTRUE 42114
42112: GO 42125
42114: POP
// tech := tech_mortar ; 3 :
42115: LD_ADDR_VAR 0 5
42119: PUSH
42120: LD_INT 41
42122: ST_TO_ADDR
42123: GO 42145
42125: LD_INT 3
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42144
42133: POP
// tech := tech_bazooka ; end ;
42134: LD_ADDR_VAR 0 5
42138: PUSH
42139: LD_INT 44
42141: ST_TO_ADDR
42142: GO 42145
42144: POP
// if Researched ( side , tech ) then
42145: LD_VAR 0 3
42149: PPUSH
42150: LD_VAR 0 5
42154: PPUSH
42155: CALL_OW 325
42159: IFFALSE 42186
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42161: LD_ADDR_VAR 0 2
42165: PUSH
42166: LD_INT 5
42168: PUSH
42169: LD_INT 8
42171: PUSH
42172: LD_INT 9
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: PUSH
42180: LD_VAR 0 4
42184: ARRAY
42185: ST_TO_ADDR
// end ;
42186: LD_VAR 0 2
42190: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42191: LD_INT 0
42193: PPUSH
42194: PPUSH
42195: PPUSH
// if not mines then
42196: LD_VAR 0 2
42200: NOT
42201: IFFALSE 42205
// exit ;
42203: GO 42349
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42205: LD_ADDR_VAR 0 5
42209: PUSH
42210: LD_INT 81
42212: PUSH
42213: LD_VAR 0 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 3
42224: PUSH
42225: LD_INT 21
42227: PUSH
42228: LD_INT 3
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PPUSH
42243: CALL_OW 69
42247: ST_TO_ADDR
// for i in mines do
42248: LD_ADDR_VAR 0 4
42252: PUSH
42253: LD_VAR 0 2
42257: PUSH
42258: FOR_IN
42259: IFFALSE 42347
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42261: LD_VAR 0 4
42265: PUSH
42266: LD_INT 1
42268: ARRAY
42269: PPUSH
42270: LD_VAR 0 4
42274: PUSH
42275: LD_INT 2
42277: ARRAY
42278: PPUSH
42279: CALL_OW 458
42283: NOT
42284: IFFALSE 42288
// continue ;
42286: GO 42258
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42288: LD_VAR 0 4
42292: PUSH
42293: LD_INT 1
42295: ARRAY
42296: PPUSH
42297: LD_VAR 0 4
42301: PUSH
42302: LD_INT 2
42304: ARRAY
42305: PPUSH
42306: CALL_OW 428
42310: PUSH
42311: LD_VAR 0 5
42315: IN
42316: IFFALSE 42345
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42318: LD_VAR 0 4
42322: PUSH
42323: LD_INT 1
42325: ARRAY
42326: PPUSH
42327: LD_VAR 0 4
42331: PUSH
42332: LD_INT 2
42334: ARRAY
42335: PPUSH
42336: LD_VAR 0 1
42340: PPUSH
42341: CALL_OW 456
// end ;
42345: GO 42258
42347: POP
42348: POP
// end ;
42349: LD_VAR 0 3
42353: RET
// export function Count ( array ) ; begin
42354: LD_INT 0
42356: PPUSH
// result := array + 0 ;
42357: LD_ADDR_VAR 0 2
42361: PUSH
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 0
42369: PLUS
42370: ST_TO_ADDR
// end ;
42371: LD_VAR 0 2
42375: RET
// export function IsEmpty ( building ) ; begin
42376: LD_INT 0
42378: PPUSH
// if not building then
42379: LD_VAR 0 1
42383: NOT
42384: IFFALSE 42388
// exit ;
42386: GO 42431
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42388: LD_ADDR_VAR 0 2
42392: PUSH
42393: LD_VAR 0 1
42397: PUSH
42398: LD_INT 22
42400: PUSH
42401: LD_VAR 0 1
42405: PPUSH
42406: CALL_OW 255
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 58
42417: PUSH
42418: EMPTY
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PPUSH
42425: CALL_OW 69
42429: IN
42430: ST_TO_ADDR
// end ;
42431: LD_VAR 0 2
42435: RET
// export function IsNotFull ( building ) ; var places ; begin
42436: LD_INT 0
42438: PPUSH
42439: PPUSH
// if not building then
42440: LD_VAR 0 1
42444: NOT
42445: IFFALSE 42449
// exit ;
42447: GO 42477
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42449: LD_ADDR_VAR 0 2
42453: PUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: LD_INT 3
42461: PUSH
42462: LD_INT 62
42464: PUSH
42465: EMPTY
42466: LIST
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PPUSH
42472: CALL_OW 72
42476: ST_TO_ADDR
// end ;
42477: LD_VAR 0 2
42481: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42482: LD_INT 0
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
// tmp := [ ] ;
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: EMPTY
42494: ST_TO_ADDR
// list := [ ] ;
42495: LD_ADDR_VAR 0 5
42499: PUSH
42500: EMPTY
42501: ST_TO_ADDR
// for i = 16 to 25 do
42502: LD_ADDR_VAR 0 4
42506: PUSH
42507: DOUBLE
42508: LD_INT 16
42510: DEC
42511: ST_TO_ADDR
42512: LD_INT 25
42514: PUSH
42515: FOR_TO
42516: IFFALSE 42589
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_VAR 0 3
42527: PUSH
42528: LD_INT 22
42530: PUSH
42531: LD_VAR 0 1
42535: PPUSH
42536: CALL_OW 255
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 91
42547: PUSH
42548: LD_VAR 0 1
42552: PUSH
42553: LD_INT 6
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 30
42563: PUSH
42564: LD_VAR 0 4
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: LIST
42577: PUSH
42578: EMPTY
42579: LIST
42580: PPUSH
42581: CALL_OW 69
42585: ADD
42586: ST_TO_ADDR
42587: GO 42515
42589: POP
42590: POP
// for i = 1 to tmp do
42591: LD_ADDR_VAR 0 4
42595: PUSH
42596: DOUBLE
42597: LD_INT 1
42599: DEC
42600: ST_TO_ADDR
42601: LD_VAR 0 3
42605: PUSH
42606: FOR_TO
42607: IFFALSE 42695
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42609: LD_ADDR_VAR 0 5
42613: PUSH
42614: LD_VAR 0 5
42618: PUSH
42619: LD_VAR 0 3
42623: PUSH
42624: LD_VAR 0 4
42628: ARRAY
42629: PPUSH
42630: CALL_OW 266
42634: PUSH
42635: LD_VAR 0 3
42639: PUSH
42640: LD_VAR 0 4
42644: ARRAY
42645: PPUSH
42646: CALL_OW 250
42650: PUSH
42651: LD_VAR 0 3
42655: PUSH
42656: LD_VAR 0 4
42660: ARRAY
42661: PPUSH
42662: CALL_OW 251
42666: PUSH
42667: LD_VAR 0 3
42671: PUSH
42672: LD_VAR 0 4
42676: ARRAY
42677: PPUSH
42678: CALL_OW 254
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: PUSH
42689: EMPTY
42690: LIST
42691: ADD
42692: ST_TO_ADDR
42693: GO 42606
42695: POP
42696: POP
// result := list ;
42697: LD_ADDR_VAR 0 2
42701: PUSH
42702: LD_VAR 0 5
42706: ST_TO_ADDR
// end ;
42707: LD_VAR 0 2
42711: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42712: LD_INT 0
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
// if not factory then
42721: LD_VAR 0 1
42725: NOT
42726: IFFALSE 42730
// exit ;
42728: GO 43323
// if control = control_apeman then
42730: LD_VAR 0 4
42734: PUSH
42735: LD_INT 5
42737: EQUAL
42738: IFFALSE 42847
// begin tmp := UnitsInside ( factory ) ;
42740: LD_ADDR_VAR 0 8
42744: PUSH
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 313
42754: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42755: LD_VAR 0 8
42759: PPUSH
42760: LD_INT 25
42762: PUSH
42763: LD_INT 12
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PPUSH
42770: CALL_OW 72
42774: NOT
42775: IFFALSE 42785
// control := control_manual ;
42777: LD_ADDR_VAR 0 4
42781: PUSH
42782: LD_INT 1
42784: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42785: LD_ADDR_VAR 0 8
42789: PUSH
42790: LD_VAR 0 1
42794: PPUSH
42795: CALL 42482 0 1
42799: ST_TO_ADDR
// if tmp then
42800: LD_VAR 0 8
42804: IFFALSE 42847
// begin for i in tmp do
42806: LD_ADDR_VAR 0 7
42810: PUSH
42811: LD_VAR 0 8
42815: PUSH
42816: FOR_IN
42817: IFFALSE 42845
// if i [ 1 ] = b_ext_radio then
42819: LD_VAR 0 7
42823: PUSH
42824: LD_INT 1
42826: ARRAY
42827: PUSH
42828: LD_INT 22
42830: EQUAL
42831: IFFALSE 42843
// begin control := control_remote ;
42833: LD_ADDR_VAR 0 4
42837: PUSH
42838: LD_INT 2
42840: ST_TO_ADDR
// break ;
42841: GO 42845
// end ;
42843: GO 42816
42845: POP
42846: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42847: LD_VAR 0 1
42851: PPUSH
42852: LD_VAR 0 2
42856: PPUSH
42857: LD_VAR 0 3
42861: PPUSH
42862: LD_VAR 0 4
42866: PPUSH
42867: LD_VAR 0 5
42871: PPUSH
42872: CALL_OW 448
42876: IFFALSE 42911
// begin result := [ chassis , engine , control , weapon ] ;
42878: LD_ADDR_VAR 0 6
42882: PUSH
42883: LD_VAR 0 2
42887: PUSH
42888: LD_VAR 0 3
42892: PUSH
42893: LD_VAR 0 4
42897: PUSH
42898: LD_VAR 0 5
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// exit ;
42909: GO 43323
// end ; _chassis := AvailableChassisList ( factory ) ;
42911: LD_ADDR_VAR 0 9
42915: PUSH
42916: LD_VAR 0 1
42920: PPUSH
42921: CALL_OW 475
42925: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42926: LD_ADDR_VAR 0 11
42930: PUSH
42931: LD_VAR 0 1
42935: PPUSH
42936: CALL_OW 476
42940: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42941: LD_ADDR_VAR 0 12
42945: PUSH
42946: LD_VAR 0 1
42950: PPUSH
42951: CALL_OW 477
42955: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42956: LD_ADDR_VAR 0 10
42960: PUSH
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 478
42970: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42971: LD_VAR 0 9
42975: NOT
42976: PUSH
42977: LD_VAR 0 11
42981: NOT
42982: OR
42983: PUSH
42984: LD_VAR 0 12
42988: NOT
42989: OR
42990: PUSH
42991: LD_VAR 0 10
42995: NOT
42996: OR
42997: IFFALSE 43032
// begin result := [ chassis , engine , control , weapon ] ;
42999: LD_ADDR_VAR 0 6
43003: PUSH
43004: LD_VAR 0 2
43008: PUSH
43009: LD_VAR 0 3
43013: PUSH
43014: LD_VAR 0 4
43018: PUSH
43019: LD_VAR 0 5
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// exit ;
43030: GO 43323
// end ; if not chassis in _chassis then
43032: LD_VAR 0 2
43036: PUSH
43037: LD_VAR 0 9
43041: IN
43042: NOT
43043: IFFALSE 43069
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43045: LD_ADDR_VAR 0 2
43049: PUSH
43050: LD_VAR 0 9
43054: PUSH
43055: LD_INT 1
43057: PPUSH
43058: LD_VAR 0 9
43062: PPUSH
43063: CALL_OW 12
43067: ARRAY
43068: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43069: LD_VAR 0 2
43073: PPUSH
43074: LD_VAR 0 3
43078: PPUSH
43079: CALL 43328 0 2
43083: NOT
43084: IFFALSE 43143
// repeat engine := _engine [ 1 ] ;
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_VAR 0 11
43095: PUSH
43096: LD_INT 1
43098: ARRAY
43099: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43100: LD_ADDR_VAR 0 11
43104: PUSH
43105: LD_VAR 0 11
43109: PPUSH
43110: LD_INT 1
43112: PPUSH
43113: CALL_OW 3
43117: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43118: LD_VAR 0 2
43122: PPUSH
43123: LD_VAR 0 3
43127: PPUSH
43128: CALL 43328 0 2
43132: PUSH
43133: LD_VAR 0 11
43137: PUSH
43138: EMPTY
43139: EQUAL
43140: OR
43141: IFFALSE 43086
// if not control in _control then
43143: LD_VAR 0 4
43147: PUSH
43148: LD_VAR 0 12
43152: IN
43153: NOT
43154: IFFALSE 43180
// control := _control [ rand ( 1 , _control ) ] ;
43156: LD_ADDR_VAR 0 4
43160: PUSH
43161: LD_VAR 0 12
43165: PUSH
43166: LD_INT 1
43168: PPUSH
43169: LD_VAR 0 12
43173: PPUSH
43174: CALL_OW 12
43178: ARRAY
43179: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43180: LD_VAR 0 2
43184: PPUSH
43185: LD_VAR 0 5
43189: PPUSH
43190: CALL 43548 0 2
43194: NOT
43195: IFFALSE 43254
// repeat weapon := _weapon [ 1 ] ;
43197: LD_ADDR_VAR 0 5
43201: PUSH
43202: LD_VAR 0 10
43206: PUSH
43207: LD_INT 1
43209: ARRAY
43210: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43211: LD_ADDR_VAR 0 10
43215: PUSH
43216: LD_VAR 0 10
43220: PPUSH
43221: LD_INT 1
43223: PPUSH
43224: CALL_OW 3
43228: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43229: LD_VAR 0 2
43233: PPUSH
43234: LD_VAR 0 5
43238: PPUSH
43239: CALL 43548 0 2
43243: PUSH
43244: LD_VAR 0 10
43248: PUSH
43249: EMPTY
43250: EQUAL
43251: OR
43252: IFFALSE 43197
// result := [ ] ;
43254: LD_ADDR_VAR 0 6
43258: PUSH
43259: EMPTY
43260: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43261: LD_VAR 0 1
43265: PPUSH
43266: LD_VAR 0 2
43270: PPUSH
43271: LD_VAR 0 3
43275: PPUSH
43276: LD_VAR 0 4
43280: PPUSH
43281: LD_VAR 0 5
43285: PPUSH
43286: CALL_OW 448
43290: IFFALSE 43323
// result := [ chassis , engine , control , weapon ] ;
43292: LD_ADDR_VAR 0 6
43296: PUSH
43297: LD_VAR 0 2
43301: PUSH
43302: LD_VAR 0 3
43306: PUSH
43307: LD_VAR 0 4
43311: PUSH
43312: LD_VAR 0 5
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: ST_TO_ADDR
// end ;
43323: LD_VAR 0 6
43327: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43328: LD_INT 0
43330: PPUSH
// if not chassis or not engine then
43331: LD_VAR 0 1
43335: NOT
43336: PUSH
43337: LD_VAR 0 2
43341: NOT
43342: OR
43343: IFFALSE 43347
// exit ;
43345: GO 43543
// case engine of engine_solar :
43347: LD_VAR 0 2
43351: PUSH
43352: LD_INT 2
43354: DOUBLE
43355: EQUAL
43356: IFTRUE 43360
43358: GO 43398
43360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43361: LD_ADDR_VAR 0 3
43365: PUSH
43366: LD_INT 11
43368: PUSH
43369: LD_INT 12
43371: PUSH
43372: LD_INT 13
43374: PUSH
43375: LD_INT 14
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 3
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
43396: GO 43527
43398: LD_INT 1
43400: DOUBLE
43401: EQUAL
43402: IFTRUE 43406
43404: GO 43468
43406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43407: LD_ADDR_VAR 0 3
43411: PUSH
43412: LD_INT 11
43414: PUSH
43415: LD_INT 12
43417: PUSH
43418: LD_INT 13
43420: PUSH
43421: LD_INT 14
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: LD_INT 5
43438: PUSH
43439: LD_INT 21
43441: PUSH
43442: LD_INT 23
43444: PUSH
43445: LD_INT 22
43447: PUSH
43448: LD_INT 24
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
43466: GO 43527
43468: LD_INT 3
43470: DOUBLE
43471: EQUAL
43472: IFTRUE 43476
43474: GO 43526
43476: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43477: LD_ADDR_VAR 0 3
43481: PUSH
43482: LD_INT 13
43484: PUSH
43485: LD_INT 14
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: LD_INT 4
43496: PUSH
43497: LD_INT 5
43499: PUSH
43500: LD_INT 21
43502: PUSH
43503: LD_INT 22
43505: PUSH
43506: LD_INT 23
43508: PUSH
43509: LD_INT 24
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: ST_TO_ADDR
43524: GO 43527
43526: POP
// result := ( chassis in result ) ;
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_VAR 0 1
43536: PUSH
43537: LD_VAR 0 3
43541: IN
43542: ST_TO_ADDR
// end ;
43543: LD_VAR 0 3
43547: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43548: LD_INT 0
43550: PPUSH
// if not chassis or not weapon then
43551: LD_VAR 0 1
43555: NOT
43556: PUSH
43557: LD_VAR 0 2
43561: NOT
43562: OR
43563: IFFALSE 43567
// exit ;
43565: GO 44627
// case weapon of us_machine_gun :
43567: LD_VAR 0 2
43571: PUSH
43572: LD_INT 2
43574: DOUBLE
43575: EQUAL
43576: IFTRUE 43580
43578: GO 43610
43580: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43581: LD_ADDR_VAR 0 3
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 3
43594: PUSH
43595: LD_INT 4
43597: PUSH
43598: LD_INT 5
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: ST_TO_ADDR
43608: GO 44611
43610: LD_INT 3
43612: DOUBLE
43613: EQUAL
43614: IFTRUE 43618
43616: GO 43648
43618: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 3
43632: PUSH
43633: LD_INT 4
43635: PUSH
43636: LD_INT 5
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
43646: GO 44611
43648: LD_INT 11
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43686
43656: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 3
43670: PUSH
43671: LD_INT 4
43673: PUSH
43674: LD_INT 5
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
43684: GO 44611
43686: LD_INT 4
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43694
43692: GO 43720
43694: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43695: LD_ADDR_VAR 0 3
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: LD_INT 4
43708: PUSH
43709: LD_INT 5
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
43718: GO 44611
43720: LD_INT 5
43722: DOUBLE
43723: EQUAL
43724: IFTRUE 43728
43726: GO 43754
43728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43729: LD_ADDR_VAR 0 3
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 4
43742: PUSH
43743: LD_INT 5
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
43752: GO 44611
43754: LD_INT 9
43756: DOUBLE
43757: EQUAL
43758: IFTRUE 43762
43760: GO 43788
43762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43763: LD_ADDR_VAR 0 3
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 4
43776: PUSH
43777: LD_INT 5
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: ST_TO_ADDR
43786: GO 44611
43788: LD_INT 7
43790: DOUBLE
43791: EQUAL
43792: IFTRUE 43796
43794: GO 43822
43796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43797: LD_ADDR_VAR 0 3
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: LD_INT 4
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: ST_TO_ADDR
43820: GO 44611
43822: LD_INT 12
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 43856
43830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 4
43844: PUSH
43845: LD_INT 5
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: ST_TO_ADDR
43854: GO 44611
43856: LD_INT 13
43858: DOUBLE
43859: EQUAL
43860: IFTRUE 43864
43862: GO 43890
43864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43865: LD_ADDR_VAR 0 3
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 3
43875: PUSH
43876: LD_INT 4
43878: PUSH
43879: LD_INT 5
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
43888: GO 44611
43890: LD_INT 14
43892: DOUBLE
43893: EQUAL
43894: IFTRUE 43898
43896: GO 43916
43898: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43899: LD_ADDR_VAR 0 3
43903: PUSH
43904: LD_INT 4
43906: PUSH
43907: LD_INT 5
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: ST_TO_ADDR
43914: GO 44611
43916: LD_INT 6
43918: DOUBLE
43919: EQUAL
43920: IFTRUE 43924
43922: GO 43942
43924: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43925: LD_ADDR_VAR 0 3
43929: PUSH
43930: LD_INT 4
43932: PUSH
43933: LD_INT 5
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: ST_TO_ADDR
43940: GO 44611
43942: LD_INT 10
43944: DOUBLE
43945: EQUAL
43946: IFTRUE 43950
43948: GO 43968
43950: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43951: LD_ADDR_VAR 0 3
43955: PUSH
43956: LD_INT 4
43958: PUSH
43959: LD_INT 5
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: ST_TO_ADDR
43966: GO 44611
43968: LD_INT 22
43970: DOUBLE
43971: EQUAL
43972: IFTRUE 43976
43974: GO 44002
43976: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43977: LD_ADDR_VAR 0 3
43981: PUSH
43982: LD_INT 11
43984: PUSH
43985: LD_INT 12
43987: PUSH
43988: LD_INT 13
43990: PUSH
43991: LD_INT 14
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
44000: GO 44611
44002: LD_INT 23
44004: DOUBLE
44005: EQUAL
44006: IFTRUE 44010
44008: GO 44036
44010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44011: LD_ADDR_VAR 0 3
44015: PUSH
44016: LD_INT 11
44018: PUSH
44019: LD_INT 12
44021: PUSH
44022: LD_INT 13
44024: PUSH
44025: LD_INT 14
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
44034: GO 44611
44036: LD_INT 24
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44070
44044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_INT 11
44052: PUSH
44053: LD_INT 12
44055: PUSH
44056: LD_INT 13
44058: PUSH
44059: LD_INT 14
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: ST_TO_ADDR
44068: GO 44611
44070: LD_INT 30
44072: DOUBLE
44073: EQUAL
44074: IFTRUE 44078
44076: GO 44104
44078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44079: LD_ADDR_VAR 0 3
44083: PUSH
44084: LD_INT 11
44086: PUSH
44087: LD_INT 12
44089: PUSH
44090: LD_INT 13
44092: PUSH
44093: LD_INT 14
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
44102: GO 44611
44104: LD_INT 25
44106: DOUBLE
44107: EQUAL
44108: IFTRUE 44112
44110: GO 44130
44112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44113: LD_ADDR_VAR 0 3
44117: PUSH
44118: LD_INT 13
44120: PUSH
44121: LD_INT 14
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: ST_TO_ADDR
44128: GO 44611
44130: LD_INT 27
44132: DOUBLE
44133: EQUAL
44134: IFTRUE 44138
44136: GO 44156
44138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44139: LD_ADDR_VAR 0 3
44143: PUSH
44144: LD_INT 13
44146: PUSH
44147: LD_INT 14
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: ST_TO_ADDR
44154: GO 44611
44156: LD_INT 92
44158: DOUBLE
44159: EQUAL
44160: IFTRUE 44164
44162: GO 44190
44164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44165: LD_ADDR_VAR 0 3
44169: PUSH
44170: LD_INT 11
44172: PUSH
44173: LD_INT 12
44175: PUSH
44176: LD_INT 13
44178: PUSH
44179: LD_INT 14
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: ST_TO_ADDR
44188: GO 44611
44190: LD_INT 28
44192: DOUBLE
44193: EQUAL
44194: IFTRUE 44198
44196: GO 44216
44198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44199: LD_ADDR_VAR 0 3
44203: PUSH
44204: LD_INT 13
44206: PUSH
44207: LD_INT 14
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: ST_TO_ADDR
44214: GO 44611
44216: LD_INT 29
44218: DOUBLE
44219: EQUAL
44220: IFTRUE 44224
44222: GO 44242
44224: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44225: LD_ADDR_VAR 0 3
44229: PUSH
44230: LD_INT 13
44232: PUSH
44233: LD_INT 14
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: ST_TO_ADDR
44240: GO 44611
44242: LD_INT 31
44244: DOUBLE
44245: EQUAL
44246: IFTRUE 44250
44248: GO 44268
44250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44251: LD_ADDR_VAR 0 3
44255: PUSH
44256: LD_INT 13
44258: PUSH
44259: LD_INT 14
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: ST_TO_ADDR
44266: GO 44611
44268: LD_INT 26
44270: DOUBLE
44271: EQUAL
44272: IFTRUE 44276
44274: GO 44294
44276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44277: LD_ADDR_VAR 0 3
44281: PUSH
44282: LD_INT 13
44284: PUSH
44285: LD_INT 14
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: ST_TO_ADDR
44292: GO 44611
44294: LD_INT 42
44296: DOUBLE
44297: EQUAL
44298: IFTRUE 44302
44300: GO 44328
44302: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44303: LD_ADDR_VAR 0 3
44307: PUSH
44308: LD_INT 21
44310: PUSH
44311: LD_INT 22
44313: PUSH
44314: LD_INT 23
44316: PUSH
44317: LD_INT 24
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: ST_TO_ADDR
44326: GO 44611
44328: LD_INT 43
44330: DOUBLE
44331: EQUAL
44332: IFTRUE 44336
44334: GO 44362
44336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44337: LD_ADDR_VAR 0 3
44341: PUSH
44342: LD_INT 21
44344: PUSH
44345: LD_INT 22
44347: PUSH
44348: LD_INT 23
44350: PUSH
44351: LD_INT 24
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: ST_TO_ADDR
44360: GO 44611
44362: LD_INT 44
44364: DOUBLE
44365: EQUAL
44366: IFTRUE 44370
44368: GO 44396
44370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44371: LD_ADDR_VAR 0 3
44375: PUSH
44376: LD_INT 21
44378: PUSH
44379: LD_INT 22
44381: PUSH
44382: LD_INT 23
44384: PUSH
44385: LD_INT 24
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: ST_TO_ADDR
44394: GO 44611
44396: LD_INT 45
44398: DOUBLE
44399: EQUAL
44400: IFTRUE 44404
44402: GO 44430
44404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44405: LD_ADDR_VAR 0 3
44409: PUSH
44410: LD_INT 21
44412: PUSH
44413: LD_INT 22
44415: PUSH
44416: LD_INT 23
44418: PUSH
44419: LD_INT 24
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
44428: GO 44611
44430: LD_INT 49
44432: DOUBLE
44433: EQUAL
44434: IFTRUE 44438
44436: GO 44464
44438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44439: LD_ADDR_VAR 0 3
44443: PUSH
44444: LD_INT 21
44446: PUSH
44447: LD_INT 22
44449: PUSH
44450: LD_INT 23
44452: PUSH
44453: LD_INT 24
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: ST_TO_ADDR
44462: GO 44611
44464: LD_INT 51
44466: DOUBLE
44467: EQUAL
44468: IFTRUE 44472
44470: GO 44498
44472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: LD_INT 21
44480: PUSH
44481: LD_INT 22
44483: PUSH
44484: LD_INT 23
44486: PUSH
44487: LD_INT 24
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
44496: GO 44611
44498: LD_INT 52
44500: DOUBLE
44501: EQUAL
44502: IFTRUE 44506
44504: GO 44532
44506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44507: LD_ADDR_VAR 0 3
44511: PUSH
44512: LD_INT 21
44514: PUSH
44515: LD_INT 22
44517: PUSH
44518: LD_INT 23
44520: PUSH
44521: LD_INT 24
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
44530: GO 44611
44532: LD_INT 53
44534: DOUBLE
44535: EQUAL
44536: IFTRUE 44540
44538: GO 44558
44540: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44541: LD_ADDR_VAR 0 3
44545: PUSH
44546: LD_INT 23
44548: PUSH
44549: LD_INT 24
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: ST_TO_ADDR
44556: GO 44611
44558: LD_INT 46
44560: DOUBLE
44561: EQUAL
44562: IFTRUE 44566
44564: GO 44584
44566: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44567: LD_ADDR_VAR 0 3
44571: PUSH
44572: LD_INT 23
44574: PUSH
44575: LD_INT 24
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: ST_TO_ADDR
44582: GO 44611
44584: LD_INT 47
44586: DOUBLE
44587: EQUAL
44588: IFTRUE 44592
44590: GO 44610
44592: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44593: LD_ADDR_VAR 0 3
44597: PUSH
44598: LD_INT 23
44600: PUSH
44601: LD_INT 24
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: ST_TO_ADDR
44608: GO 44611
44610: POP
// result := ( chassis in result ) ;
44611: LD_ADDR_VAR 0 3
44615: PUSH
44616: LD_VAR 0 1
44620: PUSH
44621: LD_VAR 0 3
44625: IN
44626: ST_TO_ADDR
// end ;
44627: LD_VAR 0 3
44631: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44632: LD_INT 0
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
// result := array ;
44641: LD_ADDR_VAR 0 5
44645: PUSH
44646: LD_VAR 0 1
44650: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44651: LD_VAR 0 1
44655: NOT
44656: PUSH
44657: LD_VAR 0 2
44661: NOT
44662: OR
44663: PUSH
44664: LD_VAR 0 3
44668: NOT
44669: OR
44670: PUSH
44671: LD_VAR 0 2
44675: PUSH
44676: LD_VAR 0 1
44680: GREATER
44681: OR
44682: PUSH
44683: LD_VAR 0 3
44687: PUSH
44688: LD_VAR 0 1
44692: GREATER
44693: OR
44694: IFFALSE 44698
// exit ;
44696: GO 44994
// if direction then
44698: LD_VAR 0 4
44702: IFFALSE 44766
// begin d := 1 ;
44704: LD_ADDR_VAR 0 9
44708: PUSH
44709: LD_INT 1
44711: ST_TO_ADDR
// if i_from > i_to then
44712: LD_VAR 0 2
44716: PUSH
44717: LD_VAR 0 3
44721: GREATER
44722: IFFALSE 44748
// length := ( array - i_from ) + i_to else
44724: LD_ADDR_VAR 0 11
44728: PUSH
44729: LD_VAR 0 1
44733: PUSH
44734: LD_VAR 0 2
44738: MINUS
44739: PUSH
44740: LD_VAR 0 3
44744: PLUS
44745: ST_TO_ADDR
44746: GO 44764
// length := i_to - i_from ;
44748: LD_ADDR_VAR 0 11
44752: PUSH
44753: LD_VAR 0 3
44757: PUSH
44758: LD_VAR 0 2
44762: MINUS
44763: ST_TO_ADDR
// end else
44764: GO 44827
// begin d := - 1 ;
44766: LD_ADDR_VAR 0 9
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: ST_TO_ADDR
// if i_from > i_to then
44775: LD_VAR 0 2
44779: PUSH
44780: LD_VAR 0 3
44784: GREATER
44785: IFFALSE 44805
// length := i_from - i_to else
44787: LD_ADDR_VAR 0 11
44791: PUSH
44792: LD_VAR 0 2
44796: PUSH
44797: LD_VAR 0 3
44801: MINUS
44802: ST_TO_ADDR
44803: GO 44827
// length := ( array - i_to ) + i_from ;
44805: LD_ADDR_VAR 0 11
44809: PUSH
44810: LD_VAR 0 1
44814: PUSH
44815: LD_VAR 0 3
44819: MINUS
44820: PUSH
44821: LD_VAR 0 2
44825: PLUS
44826: ST_TO_ADDR
// end ; if not length then
44827: LD_VAR 0 11
44831: NOT
44832: IFFALSE 44836
// exit ;
44834: GO 44994
// tmp := array ;
44836: LD_ADDR_VAR 0 10
44840: PUSH
44841: LD_VAR 0 1
44845: ST_TO_ADDR
// for i = 1 to length do
44846: LD_ADDR_VAR 0 6
44850: PUSH
44851: DOUBLE
44852: LD_INT 1
44854: DEC
44855: ST_TO_ADDR
44856: LD_VAR 0 11
44860: PUSH
44861: FOR_TO
44862: IFFALSE 44982
// begin for j = 1 to array do
44864: LD_ADDR_VAR 0 7
44868: PUSH
44869: DOUBLE
44870: LD_INT 1
44872: DEC
44873: ST_TO_ADDR
44874: LD_VAR 0 1
44878: PUSH
44879: FOR_TO
44880: IFFALSE 44968
// begin k := j + d ;
44882: LD_ADDR_VAR 0 8
44886: PUSH
44887: LD_VAR 0 7
44891: PUSH
44892: LD_VAR 0 9
44896: PLUS
44897: ST_TO_ADDR
// if k > array then
44898: LD_VAR 0 8
44902: PUSH
44903: LD_VAR 0 1
44907: GREATER
44908: IFFALSE 44918
// k := 1 ;
44910: LD_ADDR_VAR 0 8
44914: PUSH
44915: LD_INT 1
44917: ST_TO_ADDR
// if not k then
44918: LD_VAR 0 8
44922: NOT
44923: IFFALSE 44935
// k := array ;
44925: LD_ADDR_VAR 0 8
44929: PUSH
44930: LD_VAR 0 1
44934: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44935: LD_ADDR_VAR 0 10
44939: PUSH
44940: LD_VAR 0 10
44944: PPUSH
44945: LD_VAR 0 8
44949: PPUSH
44950: LD_VAR 0 1
44954: PUSH
44955: LD_VAR 0 7
44959: ARRAY
44960: PPUSH
44961: CALL_OW 1
44965: ST_TO_ADDR
// end ;
44966: GO 44879
44968: POP
44969: POP
// array := tmp ;
44970: LD_ADDR_VAR 0 1
44974: PUSH
44975: LD_VAR 0 10
44979: ST_TO_ADDR
// end ;
44980: GO 44861
44982: POP
44983: POP
// result := array ;
44984: LD_ADDR_VAR 0 5
44988: PUSH
44989: LD_VAR 0 1
44993: ST_TO_ADDR
// end ;
44994: LD_VAR 0 5
44998: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44999: LD_INT 0
45001: PPUSH
45002: PPUSH
// result := 0 ;
45003: LD_ADDR_VAR 0 3
45007: PUSH
45008: LD_INT 0
45010: ST_TO_ADDR
// if not array or not value in array then
45011: LD_VAR 0 1
45015: NOT
45016: PUSH
45017: LD_VAR 0 2
45021: PUSH
45022: LD_VAR 0 1
45026: IN
45027: NOT
45028: OR
45029: IFFALSE 45033
// exit ;
45031: GO 45087
// for i = 1 to array do
45033: LD_ADDR_VAR 0 4
45037: PUSH
45038: DOUBLE
45039: LD_INT 1
45041: DEC
45042: ST_TO_ADDR
45043: LD_VAR 0 1
45047: PUSH
45048: FOR_TO
45049: IFFALSE 45085
// if value = array [ i ] then
45051: LD_VAR 0 2
45055: PUSH
45056: LD_VAR 0 1
45060: PUSH
45061: LD_VAR 0 4
45065: ARRAY
45066: EQUAL
45067: IFFALSE 45083
// begin result := i ;
45069: LD_ADDR_VAR 0 3
45073: PUSH
45074: LD_VAR 0 4
45078: ST_TO_ADDR
// exit ;
45079: POP
45080: POP
45081: GO 45087
// end ;
45083: GO 45048
45085: POP
45086: POP
// end ;
45087: LD_VAR 0 3
45091: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45092: LD_INT 0
45094: PPUSH
// vc_chassis := chassis ;
45095: LD_ADDR_OWVAR 37
45099: PUSH
45100: LD_VAR 0 1
45104: ST_TO_ADDR
// vc_engine := engine ;
45105: LD_ADDR_OWVAR 39
45109: PUSH
45110: LD_VAR 0 2
45114: ST_TO_ADDR
// vc_control := control ;
45115: LD_ADDR_OWVAR 38
45119: PUSH
45120: LD_VAR 0 3
45124: ST_TO_ADDR
// vc_weapon := weapon ;
45125: LD_ADDR_OWVAR 40
45129: PUSH
45130: LD_VAR 0 4
45134: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45135: LD_ADDR_OWVAR 41
45139: PUSH
45140: LD_VAR 0 5
45144: ST_TO_ADDR
// end ;
45145: LD_VAR 0 6
45149: RET
// export function WantPlant ( unit ) ; var task ; begin
45150: LD_INT 0
45152: PPUSH
45153: PPUSH
// result := false ;
45154: LD_ADDR_VAR 0 2
45158: PUSH
45159: LD_INT 0
45161: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45162: LD_ADDR_VAR 0 3
45166: PUSH
45167: LD_VAR 0 1
45171: PPUSH
45172: CALL_OW 437
45176: ST_TO_ADDR
// if task then
45177: LD_VAR 0 3
45181: IFFALSE 45209
// if task [ 1 ] [ 1 ] = p then
45183: LD_VAR 0 3
45187: PUSH
45188: LD_INT 1
45190: ARRAY
45191: PUSH
45192: LD_INT 1
45194: ARRAY
45195: PUSH
45196: LD_STRING p
45198: EQUAL
45199: IFFALSE 45209
// result := true ;
45201: LD_ADDR_VAR 0 2
45205: PUSH
45206: LD_INT 1
45208: ST_TO_ADDR
// end ;
45209: LD_VAR 0 2
45213: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45214: LD_INT 0
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
// if pos < 1 then
45220: LD_VAR 0 2
45224: PUSH
45225: LD_INT 1
45227: LESS
45228: IFFALSE 45232
// exit ;
45230: GO 45535
// if pos = 1 then
45232: LD_VAR 0 2
45236: PUSH
45237: LD_INT 1
45239: EQUAL
45240: IFFALSE 45273
// result := Replace ( arr , pos [ 1 ] , value ) else
45242: LD_ADDR_VAR 0 4
45246: PUSH
45247: LD_VAR 0 1
45251: PPUSH
45252: LD_VAR 0 2
45256: PUSH
45257: LD_INT 1
45259: ARRAY
45260: PPUSH
45261: LD_VAR 0 3
45265: PPUSH
45266: CALL_OW 1
45270: ST_TO_ADDR
45271: GO 45535
// begin tmp := arr ;
45273: LD_ADDR_VAR 0 6
45277: PUSH
45278: LD_VAR 0 1
45282: ST_TO_ADDR
// s_arr := [ tmp ] ;
45283: LD_ADDR_VAR 0 7
45287: PUSH
45288: LD_VAR 0 6
45292: PUSH
45293: EMPTY
45294: LIST
45295: ST_TO_ADDR
// for i = 1 to pos - 1 do
45296: LD_ADDR_VAR 0 5
45300: PUSH
45301: DOUBLE
45302: LD_INT 1
45304: DEC
45305: ST_TO_ADDR
45306: LD_VAR 0 2
45310: PUSH
45311: LD_INT 1
45313: MINUS
45314: PUSH
45315: FOR_TO
45316: IFFALSE 45361
// begin tmp := tmp [ pos [ i ] ] ;
45318: LD_ADDR_VAR 0 6
45322: PUSH
45323: LD_VAR 0 6
45327: PUSH
45328: LD_VAR 0 2
45332: PUSH
45333: LD_VAR 0 5
45337: ARRAY
45338: ARRAY
45339: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45340: LD_ADDR_VAR 0 7
45344: PUSH
45345: LD_VAR 0 7
45349: PUSH
45350: LD_VAR 0 6
45354: PUSH
45355: EMPTY
45356: LIST
45357: ADD
45358: ST_TO_ADDR
// end ;
45359: GO 45315
45361: POP
45362: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45363: LD_ADDR_VAR 0 6
45367: PUSH
45368: LD_VAR 0 6
45372: PPUSH
45373: LD_VAR 0 2
45377: PUSH
45378: LD_VAR 0 2
45382: ARRAY
45383: PPUSH
45384: LD_VAR 0 3
45388: PPUSH
45389: CALL_OW 1
45393: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45394: LD_ADDR_VAR 0 7
45398: PUSH
45399: LD_VAR 0 7
45403: PPUSH
45404: LD_VAR 0 7
45408: PPUSH
45409: LD_VAR 0 6
45413: PPUSH
45414: CALL_OW 1
45418: ST_TO_ADDR
// for i = s_arr downto 2 do
45419: LD_ADDR_VAR 0 5
45423: PUSH
45424: DOUBLE
45425: LD_VAR 0 7
45429: INC
45430: ST_TO_ADDR
45431: LD_INT 2
45433: PUSH
45434: FOR_DOWNTO
45435: IFFALSE 45519
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45437: LD_ADDR_VAR 0 6
45441: PUSH
45442: LD_VAR 0 7
45446: PUSH
45447: LD_VAR 0 5
45451: PUSH
45452: LD_INT 1
45454: MINUS
45455: ARRAY
45456: PPUSH
45457: LD_VAR 0 2
45461: PUSH
45462: LD_VAR 0 5
45466: PUSH
45467: LD_INT 1
45469: MINUS
45470: ARRAY
45471: PPUSH
45472: LD_VAR 0 7
45476: PUSH
45477: LD_VAR 0 5
45481: ARRAY
45482: PPUSH
45483: CALL_OW 1
45487: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45488: LD_ADDR_VAR 0 7
45492: PUSH
45493: LD_VAR 0 7
45497: PPUSH
45498: LD_VAR 0 5
45502: PUSH
45503: LD_INT 1
45505: MINUS
45506: PPUSH
45507: LD_VAR 0 6
45511: PPUSH
45512: CALL_OW 1
45516: ST_TO_ADDR
// end ;
45517: GO 45434
45519: POP
45520: POP
// result := s_arr [ 1 ] ;
45521: LD_ADDR_VAR 0 4
45525: PUSH
45526: LD_VAR 0 7
45530: PUSH
45531: LD_INT 1
45533: ARRAY
45534: ST_TO_ADDR
// end ; end ;
45535: LD_VAR 0 4
45539: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45540: LD_INT 0
45542: PPUSH
45543: PPUSH
// if not list then
45544: LD_VAR 0 1
45548: NOT
45549: IFFALSE 45553
// exit ;
45551: GO 45644
// i := list [ pos1 ] ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 1
45562: PUSH
45563: LD_VAR 0 2
45567: ARRAY
45568: ST_TO_ADDR
// if not i then
45569: LD_VAR 0 5
45573: NOT
45574: IFFALSE 45578
// exit ;
45576: GO 45644
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45578: LD_ADDR_VAR 0 1
45582: PUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: LD_VAR 0 2
45592: PPUSH
45593: LD_VAR 0 1
45597: PUSH
45598: LD_VAR 0 3
45602: ARRAY
45603: PPUSH
45604: CALL_OW 1
45608: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45609: LD_ADDR_VAR 0 1
45613: PUSH
45614: LD_VAR 0 1
45618: PPUSH
45619: LD_VAR 0 3
45623: PPUSH
45624: LD_VAR 0 5
45628: PPUSH
45629: CALL_OW 1
45633: ST_TO_ADDR
// result := list ;
45634: LD_ADDR_VAR 0 4
45638: PUSH
45639: LD_VAR 0 1
45643: ST_TO_ADDR
// end ;
45644: LD_VAR 0 4
45648: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45649: LD_INT 0
45651: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45652: LD_ADDR_VAR 0 5
45656: PUSH
45657: LD_VAR 0 1
45661: PPUSH
45662: CALL_OW 250
45666: PPUSH
45667: LD_VAR 0 1
45671: PPUSH
45672: CALL_OW 251
45676: PPUSH
45677: LD_VAR 0 2
45681: PPUSH
45682: LD_VAR 0 3
45686: PPUSH
45687: LD_VAR 0 4
45691: PPUSH
45692: CALL 45702 0 5
45696: ST_TO_ADDR
// end ;
45697: LD_VAR 0 5
45701: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45702: LD_INT 0
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
// if not list then
45708: LD_VAR 0 3
45712: NOT
45713: IFFALSE 45717
// exit ;
45715: GO 46105
// result := [ ] ;
45717: LD_ADDR_VAR 0 6
45721: PUSH
45722: EMPTY
45723: ST_TO_ADDR
// for i in list do
45724: LD_ADDR_VAR 0 7
45728: PUSH
45729: LD_VAR 0 3
45733: PUSH
45734: FOR_IN
45735: IFFALSE 45937
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45737: LD_ADDR_VAR 0 9
45741: PUSH
45742: LD_VAR 0 7
45746: PPUSH
45747: LD_VAR 0 1
45751: PPUSH
45752: LD_VAR 0 2
45756: PPUSH
45757: CALL_OW 297
45761: ST_TO_ADDR
// if not result then
45762: LD_VAR 0 6
45766: NOT
45767: IFFALSE 45793
// result := [ [ i , tmp ] ] else
45769: LD_ADDR_VAR 0 6
45773: PUSH
45774: LD_VAR 0 7
45778: PUSH
45779: LD_VAR 0 9
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: ST_TO_ADDR
45791: GO 45935
// begin if result [ result ] [ 2 ] < tmp then
45793: LD_VAR 0 6
45797: PUSH
45798: LD_VAR 0 6
45802: ARRAY
45803: PUSH
45804: LD_INT 2
45806: ARRAY
45807: PUSH
45808: LD_VAR 0 9
45812: LESS
45813: IFFALSE 45855
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45815: LD_ADDR_VAR 0 6
45819: PUSH
45820: LD_VAR 0 6
45824: PPUSH
45825: LD_VAR 0 6
45829: PUSH
45830: LD_INT 1
45832: PLUS
45833: PPUSH
45834: LD_VAR 0 7
45838: PUSH
45839: LD_VAR 0 9
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PPUSH
45848: CALL_OW 2
45852: ST_TO_ADDR
45853: GO 45935
// for j = 1 to result do
45855: LD_ADDR_VAR 0 8
45859: PUSH
45860: DOUBLE
45861: LD_INT 1
45863: DEC
45864: ST_TO_ADDR
45865: LD_VAR 0 6
45869: PUSH
45870: FOR_TO
45871: IFFALSE 45933
// begin if tmp < result [ j ] [ 2 ] then
45873: LD_VAR 0 9
45877: PUSH
45878: LD_VAR 0 6
45882: PUSH
45883: LD_VAR 0 8
45887: ARRAY
45888: PUSH
45889: LD_INT 2
45891: ARRAY
45892: LESS
45893: IFFALSE 45931
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45895: LD_ADDR_VAR 0 6
45899: PUSH
45900: LD_VAR 0 6
45904: PPUSH
45905: LD_VAR 0 8
45909: PPUSH
45910: LD_VAR 0 7
45914: PUSH
45915: LD_VAR 0 9
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PPUSH
45924: CALL_OW 2
45928: ST_TO_ADDR
// break ;
45929: GO 45933
// end ; end ;
45931: GO 45870
45933: POP
45934: POP
// end ; end ;
45935: GO 45734
45937: POP
45938: POP
// if result and not asc then
45939: LD_VAR 0 6
45943: PUSH
45944: LD_VAR 0 4
45948: NOT
45949: AND
45950: IFFALSE 46025
// begin tmp := result ;
45952: LD_ADDR_VAR 0 9
45956: PUSH
45957: LD_VAR 0 6
45961: ST_TO_ADDR
// for i = tmp downto 1 do
45962: LD_ADDR_VAR 0 7
45966: PUSH
45967: DOUBLE
45968: LD_VAR 0 9
45972: INC
45973: ST_TO_ADDR
45974: LD_INT 1
45976: PUSH
45977: FOR_DOWNTO
45978: IFFALSE 46023
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45980: LD_ADDR_VAR 0 6
45984: PUSH
45985: LD_VAR 0 6
45989: PPUSH
45990: LD_VAR 0 9
45994: PUSH
45995: LD_VAR 0 7
45999: MINUS
46000: PUSH
46001: LD_INT 1
46003: PLUS
46004: PPUSH
46005: LD_VAR 0 9
46009: PUSH
46010: LD_VAR 0 7
46014: ARRAY
46015: PPUSH
46016: CALL_OW 1
46020: ST_TO_ADDR
46021: GO 45977
46023: POP
46024: POP
// end ; tmp := [ ] ;
46025: LD_ADDR_VAR 0 9
46029: PUSH
46030: EMPTY
46031: ST_TO_ADDR
// if mode then
46032: LD_VAR 0 5
46036: IFFALSE 46105
// begin for i = 1 to result do
46038: LD_ADDR_VAR 0 7
46042: PUSH
46043: DOUBLE
46044: LD_INT 1
46046: DEC
46047: ST_TO_ADDR
46048: LD_VAR 0 6
46052: PUSH
46053: FOR_TO
46054: IFFALSE 46093
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46056: LD_ADDR_VAR 0 9
46060: PUSH
46061: LD_VAR 0 9
46065: PPUSH
46066: LD_VAR 0 7
46070: PPUSH
46071: LD_VAR 0 6
46075: PUSH
46076: LD_VAR 0 7
46080: ARRAY
46081: PUSH
46082: LD_INT 1
46084: ARRAY
46085: PPUSH
46086: CALL_OW 1
46090: ST_TO_ADDR
46091: GO 46053
46093: POP
46094: POP
// result := tmp ;
46095: LD_ADDR_VAR 0 6
46099: PUSH
46100: LD_VAR 0 9
46104: ST_TO_ADDR
// end ; end ;
46105: LD_VAR 0 6
46109: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46110: LD_INT 0
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46118: LD_ADDR_VAR 0 5
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: ST_TO_ADDR
// if not x or not y then
46140: LD_VAR 0 2
46144: NOT
46145: PUSH
46146: LD_VAR 0 3
46150: NOT
46151: OR
46152: IFFALSE 46156
// exit ;
46154: GO 47806
// if not range then
46156: LD_VAR 0 4
46160: NOT
46161: IFFALSE 46171
// range := 10 ;
46163: LD_ADDR_VAR 0 4
46167: PUSH
46168: LD_INT 10
46170: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46171: LD_ADDR_VAR 0 8
46175: PUSH
46176: LD_INT 81
46178: PUSH
46179: LD_VAR 0 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 92
46190: PUSH
46191: LD_VAR 0 2
46195: PUSH
46196: LD_VAR 0 3
46200: PUSH
46201: LD_VAR 0 4
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: LD_INT 21
46217: PUSH
46218: LD_INT 3
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: PPUSH
46234: CALL_OW 69
46238: ST_TO_ADDR
// if not tmp then
46239: LD_VAR 0 8
46243: NOT
46244: IFFALSE 46248
// exit ;
46246: GO 47806
// for i in tmp do
46248: LD_ADDR_VAR 0 6
46252: PUSH
46253: LD_VAR 0 8
46257: PUSH
46258: FOR_IN
46259: IFFALSE 47781
// begin points := [ 0 , 0 , 0 ] ;
46261: LD_ADDR_VAR 0 9
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// bpoints := 1 ;
46280: LD_ADDR_VAR 0 10
46284: PUSH
46285: LD_INT 1
46287: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46288: LD_VAR 0 6
46292: PPUSH
46293: CALL_OW 247
46297: PUSH
46298: LD_INT 1
46300: DOUBLE
46301: EQUAL
46302: IFTRUE 46306
46304: GO 46884
46306: POP
// begin if GetClass ( i ) = 1 then
46307: LD_VAR 0 6
46311: PPUSH
46312: CALL_OW 257
46316: PUSH
46317: LD_INT 1
46319: EQUAL
46320: IFFALSE 46341
// points := [ 10 , 5 , 3 ] ;
46322: LD_ADDR_VAR 0 9
46326: PUSH
46327: LD_INT 10
46329: PUSH
46330: LD_INT 5
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46341: LD_VAR 0 6
46345: PPUSH
46346: CALL_OW 257
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: LD_INT 4
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: IN
46365: IFFALSE 46386
// points := [ 3 , 2 , 1 ] ;
46367: LD_ADDR_VAR 0 9
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46386: LD_VAR 0 6
46390: PPUSH
46391: CALL_OW 257
46395: PUSH
46396: LD_INT 5
46398: EQUAL
46399: IFFALSE 46420
// points := [ 130 , 5 , 2 ] ;
46401: LD_ADDR_VAR 0 9
46405: PUSH
46406: LD_INT 130
46408: PUSH
46409: LD_INT 5
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46420: LD_VAR 0 6
46424: PPUSH
46425: CALL_OW 257
46429: PUSH
46430: LD_INT 8
46432: EQUAL
46433: IFFALSE 46454
// points := [ 35 , 35 , 30 ] ;
46435: LD_ADDR_VAR 0 9
46439: PUSH
46440: LD_INT 35
46442: PUSH
46443: LD_INT 35
46445: PUSH
46446: LD_INT 30
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46454: LD_VAR 0 6
46458: PPUSH
46459: CALL_OW 257
46463: PUSH
46464: LD_INT 9
46466: EQUAL
46467: IFFALSE 46488
// points := [ 20 , 55 , 40 ] ;
46469: LD_ADDR_VAR 0 9
46473: PUSH
46474: LD_INT 20
46476: PUSH
46477: LD_INT 55
46479: PUSH
46480: LD_INT 40
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46488: LD_VAR 0 6
46492: PPUSH
46493: CALL_OW 257
46497: PUSH
46498: LD_INT 12
46500: PUSH
46501: LD_INT 16
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: IN
46508: IFFALSE 46529
// points := [ 5 , 3 , 2 ] ;
46510: LD_ADDR_VAR 0 9
46514: PUSH
46515: LD_INT 5
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46529: LD_VAR 0 6
46533: PPUSH
46534: CALL_OW 257
46538: PUSH
46539: LD_INT 17
46541: EQUAL
46542: IFFALSE 46563
// points := [ 100 , 50 , 75 ] ;
46544: LD_ADDR_VAR 0 9
46548: PUSH
46549: LD_INT 100
46551: PUSH
46552: LD_INT 50
46554: PUSH
46555: LD_INT 75
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46563: LD_VAR 0 6
46567: PPUSH
46568: CALL_OW 257
46572: PUSH
46573: LD_INT 15
46575: EQUAL
46576: IFFALSE 46597
// points := [ 10 , 5 , 3 ] ;
46578: LD_ADDR_VAR 0 9
46582: PUSH
46583: LD_INT 10
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: LD_INT 3
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46597: LD_VAR 0 6
46601: PPUSH
46602: CALL_OW 257
46606: PUSH
46607: LD_INT 14
46609: EQUAL
46610: IFFALSE 46631
// points := [ 10 , 0 , 0 ] ;
46612: LD_ADDR_VAR 0 9
46616: PUSH
46617: LD_INT 10
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46631: LD_VAR 0 6
46635: PPUSH
46636: CALL_OW 257
46640: PUSH
46641: LD_INT 11
46643: EQUAL
46644: IFFALSE 46665
// points := [ 30 , 10 , 5 ] ;
46646: LD_ADDR_VAR 0 9
46650: PUSH
46651: LD_INT 30
46653: PUSH
46654: LD_INT 10
46656: PUSH
46657: LD_INT 5
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46665: LD_VAR 0 1
46669: PPUSH
46670: LD_INT 5
46672: PPUSH
46673: CALL_OW 321
46677: PUSH
46678: LD_INT 2
46680: EQUAL
46681: IFFALSE 46698
// bpoints := bpoints * 1.8 ;
46683: LD_ADDR_VAR 0 10
46687: PUSH
46688: LD_VAR 0 10
46692: PUSH
46693: LD_REAL  1.80000000000000E+0000
46696: MUL
46697: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46698: LD_VAR 0 6
46702: PPUSH
46703: CALL_OW 257
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: LD_INT 4
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: IN
46726: PUSH
46727: LD_VAR 0 1
46731: PPUSH
46732: LD_INT 51
46734: PPUSH
46735: CALL_OW 321
46739: PUSH
46740: LD_INT 2
46742: EQUAL
46743: AND
46744: IFFALSE 46761
// bpoints := bpoints * 1.2 ;
46746: LD_ADDR_VAR 0 10
46750: PUSH
46751: LD_VAR 0 10
46755: PUSH
46756: LD_REAL  1.20000000000000E+0000
46759: MUL
46760: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46761: LD_VAR 0 6
46765: PPUSH
46766: CALL_OW 257
46770: PUSH
46771: LD_INT 5
46773: PUSH
46774: LD_INT 7
46776: PUSH
46777: LD_INT 9
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: LIST
46784: IN
46785: PUSH
46786: LD_VAR 0 1
46790: PPUSH
46791: LD_INT 52
46793: PPUSH
46794: CALL_OW 321
46798: PUSH
46799: LD_INT 2
46801: EQUAL
46802: AND
46803: IFFALSE 46820
// bpoints := bpoints * 1.5 ;
46805: LD_ADDR_VAR 0 10
46809: PUSH
46810: LD_VAR 0 10
46814: PUSH
46815: LD_REAL  1.50000000000000E+0000
46818: MUL
46819: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46820: LD_VAR 0 1
46824: PPUSH
46825: LD_INT 66
46827: PPUSH
46828: CALL_OW 321
46832: PUSH
46833: LD_INT 2
46835: EQUAL
46836: IFFALSE 46853
// bpoints := bpoints * 1.1 ;
46838: LD_ADDR_VAR 0 10
46842: PUSH
46843: LD_VAR 0 10
46847: PUSH
46848: LD_REAL  1.10000000000000E+0000
46851: MUL
46852: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46853: LD_ADDR_VAR 0 10
46857: PUSH
46858: LD_VAR 0 10
46862: PUSH
46863: LD_VAR 0 6
46867: PPUSH
46868: LD_INT 1
46870: PPUSH
46871: CALL_OW 259
46875: PUSH
46876: LD_REAL  1.15000000000000E+0000
46879: MUL
46880: MUL
46881: ST_TO_ADDR
// end ; unit_vehicle :
46882: GO 47710
46884: LD_INT 2
46886: DOUBLE
46887: EQUAL
46888: IFTRUE 46892
46890: GO 47698
46892: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46893: LD_VAR 0 6
46897: PPUSH
46898: CALL_OW 264
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 42
46908: PUSH
46909: LD_INT 24
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: IN
46917: IFFALSE 46938
// points := [ 25 , 5 , 3 ] ;
46919: LD_ADDR_VAR 0 9
46923: PUSH
46924: LD_INT 25
46926: PUSH
46927: LD_INT 5
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46938: LD_VAR 0 6
46942: PPUSH
46943: CALL_OW 264
46947: PUSH
46948: LD_INT 4
46950: PUSH
46951: LD_INT 43
46953: PUSH
46954: LD_INT 25
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: IN
46962: IFFALSE 46983
// points := [ 40 , 15 , 5 ] ;
46964: LD_ADDR_VAR 0 9
46968: PUSH
46969: LD_INT 40
46971: PUSH
46972: LD_INT 15
46974: PUSH
46975: LD_INT 5
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46983: LD_VAR 0 6
46987: PPUSH
46988: CALL_OW 264
46992: PUSH
46993: LD_INT 3
46995: PUSH
46996: LD_INT 23
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: IN
47003: IFFALSE 47024
// points := [ 7 , 25 , 8 ] ;
47005: LD_ADDR_VAR 0 9
47009: PUSH
47010: LD_INT 7
47012: PUSH
47013: LD_INT 25
47015: PUSH
47016: LD_INT 8
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47024: LD_VAR 0 6
47028: PPUSH
47029: CALL_OW 264
47033: PUSH
47034: LD_INT 5
47036: PUSH
47037: LD_INT 27
47039: PUSH
47040: LD_INT 44
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: IN
47048: IFFALSE 47069
// points := [ 14 , 50 , 16 ] ;
47050: LD_ADDR_VAR 0 9
47054: PUSH
47055: LD_INT 14
47057: PUSH
47058: LD_INT 50
47060: PUSH
47061: LD_INT 16
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47069: LD_VAR 0 6
47073: PPUSH
47074: CALL_OW 264
47078: PUSH
47079: LD_INT 6
47081: PUSH
47082: LD_INT 46
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: IN
47089: IFFALSE 47110
// points := [ 32 , 120 , 70 ] ;
47091: LD_ADDR_VAR 0 9
47095: PUSH
47096: LD_INT 32
47098: PUSH
47099: LD_INT 120
47101: PUSH
47102: LD_INT 70
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47110: LD_VAR 0 6
47114: PPUSH
47115: CALL_OW 264
47119: PUSH
47120: LD_INT 7
47122: PUSH
47123: LD_INT 28
47125: PUSH
47126: LD_INT 45
47128: PUSH
47129: LD_INT 92
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: IN
47138: IFFALSE 47159
// points := [ 35 , 20 , 45 ] ;
47140: LD_ADDR_VAR 0 9
47144: PUSH
47145: LD_INT 35
47147: PUSH
47148: LD_INT 20
47150: PUSH
47151: LD_INT 45
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47159: LD_VAR 0 6
47163: PPUSH
47164: CALL_OW 264
47168: PUSH
47169: LD_INT 47
47171: PUSH
47172: EMPTY
47173: LIST
47174: IN
47175: IFFALSE 47196
// points := [ 67 , 45 , 75 ] ;
47177: LD_ADDR_VAR 0 9
47181: PUSH
47182: LD_INT 67
47184: PUSH
47185: LD_INT 45
47187: PUSH
47188: LD_INT 75
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47196: LD_VAR 0 6
47200: PPUSH
47201: CALL_OW 264
47205: PUSH
47206: LD_INT 26
47208: PUSH
47209: EMPTY
47210: LIST
47211: IN
47212: IFFALSE 47233
// points := [ 120 , 30 , 80 ] ;
47214: LD_ADDR_VAR 0 9
47218: PUSH
47219: LD_INT 120
47221: PUSH
47222: LD_INT 30
47224: PUSH
47225: LD_INT 80
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: LIST
47232: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47233: LD_VAR 0 6
47237: PPUSH
47238: CALL_OW 264
47242: PUSH
47243: LD_INT 22
47245: PUSH
47246: EMPTY
47247: LIST
47248: IN
47249: IFFALSE 47270
// points := [ 40 , 1 , 1 ] ;
47251: LD_ADDR_VAR 0 9
47255: PUSH
47256: LD_INT 40
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47270: LD_VAR 0 6
47274: PPUSH
47275: CALL_OW 264
47279: PUSH
47280: LD_INT 29
47282: PUSH
47283: EMPTY
47284: LIST
47285: IN
47286: IFFALSE 47307
// points := [ 70 , 200 , 400 ] ;
47288: LD_ADDR_VAR 0 9
47292: PUSH
47293: LD_INT 70
47295: PUSH
47296: LD_INT 200
47298: PUSH
47299: LD_INT 400
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47307: LD_VAR 0 6
47311: PPUSH
47312: CALL_OW 264
47316: PUSH
47317: LD_INT 14
47319: PUSH
47320: LD_INT 53
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: IN
47327: IFFALSE 47348
// points := [ 40 , 10 , 20 ] ;
47329: LD_ADDR_VAR 0 9
47333: PUSH
47334: LD_INT 40
47336: PUSH
47337: LD_INT 10
47339: PUSH
47340: LD_INT 20
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47348: LD_VAR 0 6
47352: PPUSH
47353: CALL_OW 264
47357: PUSH
47358: LD_INT 9
47360: PUSH
47361: EMPTY
47362: LIST
47363: IN
47364: IFFALSE 47385
// points := [ 5 , 70 , 20 ] ;
47366: LD_ADDR_VAR 0 9
47370: PUSH
47371: LD_INT 5
47373: PUSH
47374: LD_INT 70
47376: PUSH
47377: LD_INT 20
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47385: LD_VAR 0 6
47389: PPUSH
47390: CALL_OW 264
47394: PUSH
47395: LD_INT 10
47397: PUSH
47398: EMPTY
47399: LIST
47400: IN
47401: IFFALSE 47422
// points := [ 35 , 110 , 70 ] ;
47403: LD_ADDR_VAR 0 9
47407: PUSH
47408: LD_INT 35
47410: PUSH
47411: LD_INT 110
47413: PUSH
47414: LD_INT 70
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47422: LD_VAR 0 6
47426: PPUSH
47427: CALL_OW 265
47431: PUSH
47432: LD_INT 25
47434: EQUAL
47435: IFFALSE 47456
// points := [ 80 , 65 , 100 ] ;
47437: LD_ADDR_VAR 0 9
47441: PUSH
47442: LD_INT 80
47444: PUSH
47445: LD_INT 65
47447: PUSH
47448: LD_INT 100
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47456: LD_VAR 0 6
47460: PPUSH
47461: CALL_OW 263
47465: PUSH
47466: LD_INT 1
47468: EQUAL
47469: IFFALSE 47504
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47471: LD_ADDR_VAR 0 10
47475: PUSH
47476: LD_VAR 0 10
47480: PUSH
47481: LD_VAR 0 6
47485: PPUSH
47486: CALL_OW 311
47490: PPUSH
47491: LD_INT 3
47493: PPUSH
47494: CALL_OW 259
47498: PUSH
47499: LD_INT 4
47501: MUL
47502: MUL
47503: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47504: LD_VAR 0 6
47508: PPUSH
47509: CALL_OW 263
47513: PUSH
47514: LD_INT 2
47516: EQUAL
47517: IFFALSE 47568
// begin j := IsControledBy ( i ) ;
47519: LD_ADDR_VAR 0 7
47523: PUSH
47524: LD_VAR 0 6
47528: PPUSH
47529: CALL_OW 312
47533: ST_TO_ADDR
// if j then
47534: LD_VAR 0 7
47538: IFFALSE 47568
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47540: LD_ADDR_VAR 0 10
47544: PUSH
47545: LD_VAR 0 10
47549: PUSH
47550: LD_VAR 0 7
47554: PPUSH
47555: LD_INT 3
47557: PPUSH
47558: CALL_OW 259
47562: PUSH
47563: LD_INT 3
47565: MUL
47566: MUL
47567: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47568: LD_VAR 0 6
47572: PPUSH
47573: CALL_OW 264
47577: PUSH
47578: LD_INT 5
47580: PUSH
47581: LD_INT 6
47583: PUSH
47584: LD_INT 46
47586: PUSH
47587: LD_INT 44
47589: PUSH
47590: LD_INT 47
47592: PUSH
47593: LD_INT 45
47595: PUSH
47596: LD_INT 28
47598: PUSH
47599: LD_INT 7
47601: PUSH
47602: LD_INT 27
47604: PUSH
47605: LD_INT 29
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: IN
47620: PUSH
47621: LD_VAR 0 1
47625: PPUSH
47626: LD_INT 52
47628: PPUSH
47629: CALL_OW 321
47633: PUSH
47634: LD_INT 2
47636: EQUAL
47637: AND
47638: IFFALSE 47655
// bpoints := bpoints * 1.2 ;
47640: LD_ADDR_VAR 0 10
47644: PUSH
47645: LD_VAR 0 10
47649: PUSH
47650: LD_REAL  1.20000000000000E+0000
47653: MUL
47654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47655: LD_VAR 0 6
47659: PPUSH
47660: CALL_OW 264
47664: PUSH
47665: LD_INT 6
47667: PUSH
47668: LD_INT 46
47670: PUSH
47671: LD_INT 47
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: IN
47679: IFFALSE 47696
// bpoints := bpoints * 1.2 ;
47681: LD_ADDR_VAR 0 10
47685: PUSH
47686: LD_VAR 0 10
47690: PUSH
47691: LD_REAL  1.20000000000000E+0000
47694: MUL
47695: ST_TO_ADDR
// end ; unit_building :
47696: GO 47710
47698: LD_INT 3
47700: DOUBLE
47701: EQUAL
47702: IFTRUE 47706
47704: GO 47709
47706: POP
// ; end ;
47707: GO 47710
47709: POP
// for j = 1 to 3 do
47710: LD_ADDR_VAR 0 7
47714: PUSH
47715: DOUBLE
47716: LD_INT 1
47718: DEC
47719: ST_TO_ADDR
47720: LD_INT 3
47722: PUSH
47723: FOR_TO
47724: IFFALSE 47777
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47726: LD_ADDR_VAR 0 5
47730: PUSH
47731: LD_VAR 0 5
47735: PPUSH
47736: LD_VAR 0 7
47740: PPUSH
47741: LD_VAR 0 5
47745: PUSH
47746: LD_VAR 0 7
47750: ARRAY
47751: PUSH
47752: LD_VAR 0 9
47756: PUSH
47757: LD_VAR 0 7
47761: ARRAY
47762: PUSH
47763: LD_VAR 0 10
47767: MUL
47768: PLUS
47769: PPUSH
47770: CALL_OW 1
47774: ST_TO_ADDR
47775: GO 47723
47777: POP
47778: POP
// end ;
47779: GO 46258
47781: POP
47782: POP
// result := Replace ( result , 4 , tmp ) ;
47783: LD_ADDR_VAR 0 5
47787: PUSH
47788: LD_VAR 0 5
47792: PPUSH
47793: LD_INT 4
47795: PPUSH
47796: LD_VAR 0 8
47800: PPUSH
47801: CALL_OW 1
47805: ST_TO_ADDR
// end ;
47806: LD_VAR 0 5
47810: RET
// export function DangerAtRange ( unit , range ) ; begin
47811: LD_INT 0
47813: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47814: LD_ADDR_VAR 0 3
47818: PUSH
47819: LD_VAR 0 1
47823: PPUSH
47824: CALL_OW 255
47828: PPUSH
47829: LD_VAR 0 1
47833: PPUSH
47834: CALL_OW 250
47838: PPUSH
47839: LD_VAR 0 1
47843: PPUSH
47844: CALL_OW 251
47848: PPUSH
47849: LD_VAR 0 2
47853: PPUSH
47854: CALL 46110 0 4
47858: ST_TO_ADDR
// end ;
47859: LD_VAR 0 3
47863: RET
// export function DangerInArea ( side , area ) ; begin
47864: LD_INT 0
47866: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: LD_VAR 0 2
47876: PPUSH
47877: LD_INT 81
47879: PUSH
47880: LD_VAR 0 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PPUSH
47889: CALL_OW 70
47893: ST_TO_ADDR
// end ;
47894: LD_VAR 0 3
47898: RET
// export function IsExtension ( b ) ; begin
47899: LD_INT 0
47901: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47902: LD_ADDR_VAR 0 2
47906: PUSH
47907: LD_VAR 0 1
47911: PUSH
47912: LD_INT 23
47914: PUSH
47915: LD_INT 20
47917: PUSH
47918: LD_INT 22
47920: PUSH
47921: LD_INT 17
47923: PUSH
47924: LD_INT 24
47926: PUSH
47927: LD_INT 21
47929: PUSH
47930: LD_INT 19
47932: PUSH
47933: LD_INT 16
47935: PUSH
47936: LD_INT 25
47938: PUSH
47939: LD_INT 18
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: IN
47954: ST_TO_ADDR
// end ;
47955: LD_VAR 0 2
47959: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47960: LD_INT 0
47962: PPUSH
47963: PPUSH
47964: PPUSH
// result := [ ] ;
47965: LD_ADDR_VAR 0 4
47969: PUSH
47970: EMPTY
47971: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47972: LD_ADDR_VAR 0 5
47976: PUSH
47977: LD_VAR 0 2
47981: PPUSH
47982: LD_INT 21
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PPUSH
47992: CALL_OW 70
47996: ST_TO_ADDR
// if not tmp then
47997: LD_VAR 0 5
48001: NOT
48002: IFFALSE 48006
// exit ;
48004: GO 48070
// if checkLink then
48006: LD_VAR 0 3
48010: IFFALSE 48060
// begin for i in tmp do
48012: LD_ADDR_VAR 0 6
48016: PUSH
48017: LD_VAR 0 5
48021: PUSH
48022: FOR_IN
48023: IFFALSE 48058
// if GetBase ( i ) <> base then
48025: LD_VAR 0 6
48029: PPUSH
48030: CALL_OW 274
48034: PUSH
48035: LD_VAR 0 1
48039: NONEQUAL
48040: IFFALSE 48056
// ComLinkToBase ( base , i ) ;
48042: LD_VAR 0 1
48046: PPUSH
48047: LD_VAR 0 6
48051: PPUSH
48052: CALL_OW 169
48056: GO 48022
48058: POP
48059: POP
// end ; result := tmp ;
48060: LD_ADDR_VAR 0 4
48064: PUSH
48065: LD_VAR 0 5
48069: ST_TO_ADDR
// end ;
48070: LD_VAR 0 4
48074: RET
// export function ComComplete ( units , b ) ; var i ; begin
48075: LD_INT 0
48077: PPUSH
48078: PPUSH
// if not units then
48079: LD_VAR 0 1
48083: NOT
48084: IFFALSE 48088
// exit ;
48086: GO 48178
// for i in units do
48088: LD_ADDR_VAR 0 4
48092: PUSH
48093: LD_VAR 0 1
48097: PUSH
48098: FOR_IN
48099: IFFALSE 48176
// if BuildingStatus ( b ) = bs_build then
48101: LD_VAR 0 2
48105: PPUSH
48106: CALL_OW 461
48110: PUSH
48111: LD_INT 1
48113: EQUAL
48114: IFFALSE 48174
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48116: LD_VAR 0 4
48120: PPUSH
48121: LD_STRING h
48123: PUSH
48124: LD_VAR 0 2
48128: PPUSH
48129: CALL_OW 250
48133: PUSH
48134: LD_VAR 0 2
48138: PPUSH
48139: CALL_OW 251
48143: PUSH
48144: LD_VAR 0 2
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: PPUSH
48170: CALL_OW 446
48174: GO 48098
48176: POP
48177: POP
// end ;
48178: LD_VAR 0 3
48182: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48183: LD_INT 0
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48191: LD_VAR 0 1
48195: NOT
48196: PUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: CALL_OW 263
48206: PUSH
48207: LD_INT 2
48209: NONEQUAL
48210: OR
48211: IFFALSE 48215
// exit ;
48213: GO 48531
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48215: LD_ADDR_VAR 0 6
48219: PUSH
48220: LD_INT 22
48222: PUSH
48223: LD_VAR 0 1
48227: PPUSH
48228: CALL_OW 255
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 30
48242: PUSH
48243: LD_INT 36
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 34
48252: PUSH
48253: LD_INT 31
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PPUSH
48269: CALL_OW 69
48273: ST_TO_ADDR
// if not tmp then
48274: LD_VAR 0 6
48278: NOT
48279: IFFALSE 48283
// exit ;
48281: GO 48531
// result := [ ] ;
48283: LD_ADDR_VAR 0 2
48287: PUSH
48288: EMPTY
48289: ST_TO_ADDR
// for i in tmp do
48290: LD_ADDR_VAR 0 3
48294: PUSH
48295: LD_VAR 0 6
48299: PUSH
48300: FOR_IN
48301: IFFALSE 48372
// begin t := UnitsInside ( i ) ;
48303: LD_ADDR_VAR 0 4
48307: PUSH
48308: LD_VAR 0 3
48312: PPUSH
48313: CALL_OW 313
48317: ST_TO_ADDR
// if t then
48318: LD_VAR 0 4
48322: IFFALSE 48370
// for j in t do
48324: LD_ADDR_VAR 0 7
48328: PUSH
48329: LD_VAR 0 4
48333: PUSH
48334: FOR_IN
48335: IFFALSE 48368
// result := Replace ( result , result + 1 , j ) ;
48337: LD_ADDR_VAR 0 2
48341: PUSH
48342: LD_VAR 0 2
48346: PPUSH
48347: LD_VAR 0 2
48351: PUSH
48352: LD_INT 1
48354: PLUS
48355: PPUSH
48356: LD_VAR 0 7
48360: PPUSH
48361: CALL_OW 1
48365: ST_TO_ADDR
48366: GO 48334
48368: POP
48369: POP
// end ;
48370: GO 48300
48372: POP
48373: POP
// if not result then
48374: LD_VAR 0 2
48378: NOT
48379: IFFALSE 48383
// exit ;
48381: GO 48531
// mech := result [ 1 ] ;
48383: LD_ADDR_VAR 0 5
48387: PUSH
48388: LD_VAR 0 2
48392: PUSH
48393: LD_INT 1
48395: ARRAY
48396: ST_TO_ADDR
// if result > 1 then
48397: LD_VAR 0 2
48401: PUSH
48402: LD_INT 1
48404: GREATER
48405: IFFALSE 48517
// begin for i = 2 to result do
48407: LD_ADDR_VAR 0 3
48411: PUSH
48412: DOUBLE
48413: LD_INT 2
48415: DEC
48416: ST_TO_ADDR
48417: LD_VAR 0 2
48421: PUSH
48422: FOR_TO
48423: IFFALSE 48515
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48425: LD_ADDR_VAR 0 4
48429: PUSH
48430: LD_VAR 0 2
48434: PUSH
48435: LD_VAR 0 3
48439: ARRAY
48440: PPUSH
48441: LD_INT 3
48443: PPUSH
48444: CALL_OW 259
48448: PUSH
48449: LD_VAR 0 2
48453: PUSH
48454: LD_VAR 0 3
48458: ARRAY
48459: PPUSH
48460: CALL_OW 432
48464: MINUS
48465: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48466: LD_VAR 0 4
48470: PUSH
48471: LD_VAR 0 5
48475: PPUSH
48476: LD_INT 3
48478: PPUSH
48479: CALL_OW 259
48483: PUSH
48484: LD_VAR 0 5
48488: PPUSH
48489: CALL_OW 432
48493: MINUS
48494: GREATEREQUAL
48495: IFFALSE 48513
// mech := result [ i ] ;
48497: LD_ADDR_VAR 0 5
48501: PUSH
48502: LD_VAR 0 2
48506: PUSH
48507: LD_VAR 0 3
48511: ARRAY
48512: ST_TO_ADDR
// end ;
48513: GO 48422
48515: POP
48516: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48517: LD_VAR 0 1
48521: PPUSH
48522: LD_VAR 0 5
48526: PPUSH
48527: CALL_OW 135
// end ;
48531: LD_VAR 0 2
48535: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48536: LD_INT 0
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
48547: PPUSH
48548: PPUSH
48549: PPUSH
48550: PPUSH
// result := [ ] ;
48551: LD_ADDR_VAR 0 7
48555: PUSH
48556: EMPTY
48557: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48558: LD_VAR 0 1
48562: PPUSH
48563: CALL_OW 266
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: IN
48578: NOT
48579: IFFALSE 48583
// exit ;
48581: GO 50217
// if name then
48583: LD_VAR 0 3
48587: IFFALSE 48603
// SetBName ( base_dep , name ) ;
48589: LD_VAR 0 1
48593: PPUSH
48594: LD_VAR 0 3
48598: PPUSH
48599: CALL_OW 500
// base := GetBase ( base_dep ) ;
48603: LD_ADDR_VAR 0 15
48607: PUSH
48608: LD_VAR 0 1
48612: PPUSH
48613: CALL_OW 274
48617: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48618: LD_ADDR_VAR 0 16
48622: PUSH
48623: LD_VAR 0 1
48627: PPUSH
48628: CALL_OW 255
48632: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48633: LD_ADDR_VAR 0 17
48637: PUSH
48638: LD_VAR 0 1
48642: PPUSH
48643: CALL_OW 248
48647: ST_TO_ADDR
// if sources then
48648: LD_VAR 0 5
48652: IFFALSE 48699
// for i = 1 to 3 do
48654: LD_ADDR_VAR 0 8
48658: PUSH
48659: DOUBLE
48660: LD_INT 1
48662: DEC
48663: ST_TO_ADDR
48664: LD_INT 3
48666: PUSH
48667: FOR_TO
48668: IFFALSE 48697
// AddResourceType ( base , i , sources [ i ] ) ;
48670: LD_VAR 0 15
48674: PPUSH
48675: LD_VAR 0 8
48679: PPUSH
48680: LD_VAR 0 5
48684: PUSH
48685: LD_VAR 0 8
48689: ARRAY
48690: PPUSH
48691: CALL_OW 276
48695: GO 48667
48697: POP
48698: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48699: LD_ADDR_VAR 0 18
48703: PUSH
48704: LD_VAR 0 15
48708: PPUSH
48709: LD_VAR 0 2
48713: PPUSH
48714: LD_INT 1
48716: PPUSH
48717: CALL 47960 0 3
48721: ST_TO_ADDR
// InitHc ;
48722: CALL_OW 19
// InitUc ;
48726: CALL_OW 18
// uc_side := side ;
48730: LD_ADDR_OWVAR 20
48734: PUSH
48735: LD_VAR 0 16
48739: ST_TO_ADDR
// uc_nation := nation ;
48740: LD_ADDR_OWVAR 21
48744: PUSH
48745: LD_VAR 0 17
48749: ST_TO_ADDR
// if buildings then
48750: LD_VAR 0 18
48754: IFFALSE 50076
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48756: LD_ADDR_VAR 0 19
48760: PUSH
48761: LD_VAR 0 18
48765: PPUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 30
48771: PUSH
48772: LD_INT 29
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 30
48781: PUSH
48782: LD_INT 30
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: PPUSH
48794: CALL_OW 72
48798: ST_TO_ADDR
// if tmp then
48799: LD_VAR 0 19
48803: IFFALSE 48851
// for i in tmp do
48805: LD_ADDR_VAR 0 8
48809: PUSH
48810: LD_VAR 0 19
48814: PUSH
48815: FOR_IN
48816: IFFALSE 48849
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48818: LD_VAR 0 8
48822: PPUSH
48823: CALL_OW 250
48827: PPUSH
48828: LD_VAR 0 8
48832: PPUSH
48833: CALL_OW 251
48837: PPUSH
48838: LD_VAR 0 16
48842: PPUSH
48843: CALL_OW 441
48847: GO 48815
48849: POP
48850: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48851: LD_VAR 0 18
48855: PPUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 30
48861: PUSH
48862: LD_INT 32
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 30
48871: PUSH
48872: LD_INT 33
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: PPUSH
48884: CALL_OW 72
48888: IFFALSE 48976
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48890: LD_ADDR_VAR 0 8
48894: PUSH
48895: LD_VAR 0 18
48899: PPUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 30
48905: PUSH
48906: LD_INT 32
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 30
48915: PUSH
48916: LD_INT 33
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: PPUSH
48928: CALL_OW 72
48932: PUSH
48933: FOR_IN
48934: IFFALSE 48974
// begin if not GetBWeapon ( i ) then
48936: LD_VAR 0 8
48940: PPUSH
48941: CALL_OW 269
48945: NOT
48946: IFFALSE 48972
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48948: LD_VAR 0 8
48952: PPUSH
48953: LD_VAR 0 8
48957: PPUSH
48958: LD_VAR 0 2
48962: PPUSH
48963: CALL 50222 0 2
48967: PPUSH
48968: CALL_OW 431
// end ;
48972: GO 48933
48974: POP
48975: POP
// end ; for i = 1 to personel do
48976: LD_ADDR_VAR 0 8
48980: PUSH
48981: DOUBLE
48982: LD_INT 1
48984: DEC
48985: ST_TO_ADDR
48986: LD_VAR 0 6
48990: PUSH
48991: FOR_TO
48992: IFFALSE 50056
// begin if i > 4 then
48994: LD_VAR 0 8
48998: PUSH
48999: LD_INT 4
49001: GREATER
49002: IFFALSE 49006
// break ;
49004: GO 50056
// case i of 1 :
49006: LD_VAR 0 8
49010: PUSH
49011: LD_INT 1
49013: DOUBLE
49014: EQUAL
49015: IFTRUE 49019
49017: GO 49099
49019: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49020: LD_ADDR_VAR 0 12
49024: PUSH
49025: LD_VAR 0 18
49029: PPUSH
49030: LD_INT 22
49032: PUSH
49033: LD_VAR 0 16
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 58
49044: PUSH
49045: EMPTY
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 30
49053: PUSH
49054: LD_INT 32
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 30
49063: PUSH
49064: LD_INT 4
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 30
49073: PUSH
49074: LD_INT 5
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: PPUSH
49092: CALL_OW 72
49096: ST_TO_ADDR
49097: GO 49321
49099: LD_INT 2
49101: DOUBLE
49102: EQUAL
49103: IFTRUE 49107
49105: GO 49169
49107: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49108: LD_ADDR_VAR 0 12
49112: PUSH
49113: LD_VAR 0 18
49117: PPUSH
49118: LD_INT 22
49120: PUSH
49121: LD_VAR 0 16
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 30
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 30
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PPUSH
49162: CALL_OW 72
49166: ST_TO_ADDR
49167: GO 49321
49169: LD_INT 3
49171: DOUBLE
49172: EQUAL
49173: IFTRUE 49177
49175: GO 49239
49177: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49178: LD_ADDR_VAR 0 12
49182: PUSH
49183: LD_VAR 0 18
49187: PPUSH
49188: LD_INT 22
49190: PUSH
49191: LD_VAR 0 16
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 30
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 30
49215: PUSH
49216: LD_INT 3
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PPUSH
49232: CALL_OW 72
49236: ST_TO_ADDR
49237: GO 49321
49239: LD_INT 4
49241: DOUBLE
49242: EQUAL
49243: IFTRUE 49247
49245: GO 49320
49247: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49248: LD_ADDR_VAR 0 12
49252: PUSH
49253: LD_VAR 0 18
49257: PPUSH
49258: LD_INT 22
49260: PUSH
49261: LD_VAR 0 16
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 30
49275: PUSH
49276: LD_INT 6
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 30
49285: PUSH
49286: LD_INT 7
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 30
49295: PUSH
49296: LD_INT 8
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PPUSH
49313: CALL_OW 72
49317: ST_TO_ADDR
49318: GO 49321
49320: POP
// if i = 1 then
49321: LD_VAR 0 8
49325: PUSH
49326: LD_INT 1
49328: EQUAL
49329: IFFALSE 49440
// begin tmp := [ ] ;
49331: LD_ADDR_VAR 0 19
49335: PUSH
49336: EMPTY
49337: ST_TO_ADDR
// for j in f do
49338: LD_ADDR_VAR 0 9
49342: PUSH
49343: LD_VAR 0 12
49347: PUSH
49348: FOR_IN
49349: IFFALSE 49422
// if GetBType ( j ) = b_bunker then
49351: LD_VAR 0 9
49355: PPUSH
49356: CALL_OW 266
49360: PUSH
49361: LD_INT 32
49363: EQUAL
49364: IFFALSE 49391
// tmp := Insert ( tmp , 1 , j ) else
49366: LD_ADDR_VAR 0 19
49370: PUSH
49371: LD_VAR 0 19
49375: PPUSH
49376: LD_INT 1
49378: PPUSH
49379: LD_VAR 0 9
49383: PPUSH
49384: CALL_OW 2
49388: ST_TO_ADDR
49389: GO 49420
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49391: LD_ADDR_VAR 0 19
49395: PUSH
49396: LD_VAR 0 19
49400: PPUSH
49401: LD_VAR 0 19
49405: PUSH
49406: LD_INT 1
49408: PLUS
49409: PPUSH
49410: LD_VAR 0 9
49414: PPUSH
49415: CALL_OW 2
49419: ST_TO_ADDR
49420: GO 49348
49422: POP
49423: POP
// if tmp then
49424: LD_VAR 0 19
49428: IFFALSE 49440
// f := tmp ;
49430: LD_ADDR_VAR 0 12
49434: PUSH
49435: LD_VAR 0 19
49439: ST_TO_ADDR
// end ; x := personel [ i ] ;
49440: LD_ADDR_VAR 0 13
49444: PUSH
49445: LD_VAR 0 6
49449: PUSH
49450: LD_VAR 0 8
49454: ARRAY
49455: ST_TO_ADDR
// if x = - 1 then
49456: LD_VAR 0 13
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: EQUAL
49465: IFFALSE 49674
// begin for j in f do
49467: LD_ADDR_VAR 0 9
49471: PUSH
49472: LD_VAR 0 12
49476: PUSH
49477: FOR_IN
49478: IFFALSE 49670
// repeat InitHc ;
49480: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49484: LD_VAR 0 9
49488: PPUSH
49489: CALL_OW 266
49493: PUSH
49494: LD_INT 5
49496: EQUAL
49497: IFFALSE 49567
// begin if UnitsInside ( j ) < 3 then
49499: LD_VAR 0 9
49503: PPUSH
49504: CALL_OW 313
49508: PUSH
49509: LD_INT 3
49511: LESS
49512: IFFALSE 49548
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49514: LD_INT 0
49516: PPUSH
49517: LD_INT 5
49519: PUSH
49520: LD_INT 8
49522: PUSH
49523: LD_INT 9
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: PUSH
49531: LD_VAR 0 17
49535: ARRAY
49536: PPUSH
49537: LD_VAR 0 4
49541: PPUSH
49542: CALL_OW 380
49546: GO 49565
// PrepareHuman ( false , i , skill ) ;
49548: LD_INT 0
49550: PPUSH
49551: LD_VAR 0 8
49555: PPUSH
49556: LD_VAR 0 4
49560: PPUSH
49561: CALL_OW 380
// end else
49565: GO 49584
// PrepareHuman ( false , i , skill ) ;
49567: LD_INT 0
49569: PPUSH
49570: LD_VAR 0 8
49574: PPUSH
49575: LD_VAR 0 4
49579: PPUSH
49580: CALL_OW 380
// un := CreateHuman ;
49584: LD_ADDR_VAR 0 14
49588: PUSH
49589: CALL_OW 44
49593: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49594: LD_ADDR_VAR 0 7
49598: PUSH
49599: LD_VAR 0 7
49603: PPUSH
49604: LD_INT 1
49606: PPUSH
49607: LD_VAR 0 14
49611: PPUSH
49612: CALL_OW 2
49616: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49617: LD_VAR 0 14
49621: PPUSH
49622: LD_VAR 0 9
49626: PPUSH
49627: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49631: LD_VAR 0 9
49635: PPUSH
49636: CALL_OW 313
49640: PUSH
49641: LD_INT 6
49643: EQUAL
49644: PUSH
49645: LD_VAR 0 9
49649: PPUSH
49650: CALL_OW 266
49654: PUSH
49655: LD_INT 32
49657: PUSH
49658: LD_INT 31
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: IN
49665: OR
49666: IFFALSE 49480
49668: GO 49477
49670: POP
49671: POP
// end else
49672: GO 50054
// for j = 1 to x do
49674: LD_ADDR_VAR 0 9
49678: PUSH
49679: DOUBLE
49680: LD_INT 1
49682: DEC
49683: ST_TO_ADDR
49684: LD_VAR 0 13
49688: PUSH
49689: FOR_TO
49690: IFFALSE 50052
// begin InitHc ;
49692: CALL_OW 19
// if not f then
49696: LD_VAR 0 12
49700: NOT
49701: IFFALSE 49790
// begin PrepareHuman ( false , i , skill ) ;
49703: LD_INT 0
49705: PPUSH
49706: LD_VAR 0 8
49710: PPUSH
49711: LD_VAR 0 4
49715: PPUSH
49716: CALL_OW 380
// un := CreateHuman ;
49720: LD_ADDR_VAR 0 14
49724: PUSH
49725: CALL_OW 44
49729: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49730: LD_ADDR_VAR 0 7
49734: PUSH
49735: LD_VAR 0 7
49739: PPUSH
49740: LD_INT 1
49742: PPUSH
49743: LD_VAR 0 14
49747: PPUSH
49748: CALL_OW 2
49752: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49753: LD_VAR 0 14
49757: PPUSH
49758: LD_VAR 0 1
49762: PPUSH
49763: CALL_OW 250
49767: PPUSH
49768: LD_VAR 0 1
49772: PPUSH
49773: CALL_OW 251
49777: PPUSH
49778: LD_INT 10
49780: PPUSH
49781: LD_INT 0
49783: PPUSH
49784: CALL_OW 50
// continue ;
49788: GO 49689
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49790: LD_VAR 0 12
49794: PUSH
49795: LD_INT 1
49797: ARRAY
49798: PPUSH
49799: CALL_OW 313
49803: PUSH
49804: LD_VAR 0 12
49808: PUSH
49809: LD_INT 1
49811: ARRAY
49812: PPUSH
49813: CALL_OW 266
49817: PUSH
49818: LD_INT 32
49820: PUSH
49821: LD_INT 31
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: IN
49828: AND
49829: PUSH
49830: LD_VAR 0 12
49834: PUSH
49835: LD_INT 1
49837: ARRAY
49838: PPUSH
49839: CALL_OW 313
49843: PUSH
49844: LD_INT 6
49846: EQUAL
49847: OR
49848: IFFALSE 49868
// f := Delete ( f , 1 ) ;
49850: LD_ADDR_VAR 0 12
49854: PUSH
49855: LD_VAR 0 12
49859: PPUSH
49860: LD_INT 1
49862: PPUSH
49863: CALL_OW 3
49867: ST_TO_ADDR
// if not f then
49868: LD_VAR 0 12
49872: NOT
49873: IFFALSE 49891
// begin x := x + 2 ;
49875: LD_ADDR_VAR 0 13
49879: PUSH
49880: LD_VAR 0 13
49884: PUSH
49885: LD_INT 2
49887: PLUS
49888: ST_TO_ADDR
// continue ;
49889: GO 49689
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49891: LD_VAR 0 12
49895: PUSH
49896: LD_INT 1
49898: ARRAY
49899: PPUSH
49900: CALL_OW 266
49904: PUSH
49905: LD_INT 5
49907: EQUAL
49908: IFFALSE 49982
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49910: LD_VAR 0 12
49914: PUSH
49915: LD_INT 1
49917: ARRAY
49918: PPUSH
49919: CALL_OW 313
49923: PUSH
49924: LD_INT 3
49926: LESS
49927: IFFALSE 49963
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49929: LD_INT 0
49931: PPUSH
49932: LD_INT 5
49934: PUSH
49935: LD_INT 8
49937: PUSH
49938: LD_INT 9
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: PUSH
49946: LD_VAR 0 17
49950: ARRAY
49951: PPUSH
49952: LD_VAR 0 4
49956: PPUSH
49957: CALL_OW 380
49961: GO 49980
// PrepareHuman ( false , i , skill ) ;
49963: LD_INT 0
49965: PPUSH
49966: LD_VAR 0 8
49970: PPUSH
49971: LD_VAR 0 4
49975: PPUSH
49976: CALL_OW 380
// end else
49980: GO 49999
// PrepareHuman ( false , i , skill ) ;
49982: LD_INT 0
49984: PPUSH
49985: LD_VAR 0 8
49989: PPUSH
49990: LD_VAR 0 4
49994: PPUSH
49995: CALL_OW 380
// un := CreateHuman ;
49999: LD_ADDR_VAR 0 14
50003: PUSH
50004: CALL_OW 44
50008: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50009: LD_ADDR_VAR 0 7
50013: PUSH
50014: LD_VAR 0 7
50018: PPUSH
50019: LD_INT 1
50021: PPUSH
50022: LD_VAR 0 14
50026: PPUSH
50027: CALL_OW 2
50031: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50032: LD_VAR 0 14
50036: PPUSH
50037: LD_VAR 0 12
50041: PUSH
50042: LD_INT 1
50044: ARRAY
50045: PPUSH
50046: CALL_OW 52
// end ;
50050: GO 49689
50052: POP
50053: POP
// end ;
50054: GO 48991
50056: POP
50057: POP
// result := result ^ buildings ;
50058: LD_ADDR_VAR 0 7
50062: PUSH
50063: LD_VAR 0 7
50067: PUSH
50068: LD_VAR 0 18
50072: ADD
50073: ST_TO_ADDR
// end else
50074: GO 50217
// begin for i = 1 to personel do
50076: LD_ADDR_VAR 0 8
50080: PUSH
50081: DOUBLE
50082: LD_INT 1
50084: DEC
50085: ST_TO_ADDR
50086: LD_VAR 0 6
50090: PUSH
50091: FOR_TO
50092: IFFALSE 50215
// begin if i > 4 then
50094: LD_VAR 0 8
50098: PUSH
50099: LD_INT 4
50101: GREATER
50102: IFFALSE 50106
// break ;
50104: GO 50215
// x := personel [ i ] ;
50106: LD_ADDR_VAR 0 13
50110: PUSH
50111: LD_VAR 0 6
50115: PUSH
50116: LD_VAR 0 8
50120: ARRAY
50121: ST_TO_ADDR
// if x = - 1 then
50122: LD_VAR 0 13
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: EQUAL
50131: IFFALSE 50135
// continue ;
50133: GO 50091
// PrepareHuman ( false , i , skill ) ;
50135: LD_INT 0
50137: PPUSH
50138: LD_VAR 0 8
50142: PPUSH
50143: LD_VAR 0 4
50147: PPUSH
50148: CALL_OW 380
// un := CreateHuman ;
50152: LD_ADDR_VAR 0 14
50156: PUSH
50157: CALL_OW 44
50161: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50162: LD_VAR 0 14
50166: PPUSH
50167: LD_VAR 0 1
50171: PPUSH
50172: CALL_OW 250
50176: PPUSH
50177: LD_VAR 0 1
50181: PPUSH
50182: CALL_OW 251
50186: PPUSH
50187: LD_INT 10
50189: PPUSH
50190: LD_INT 0
50192: PPUSH
50193: CALL_OW 50
// result := result ^ un ;
50197: LD_ADDR_VAR 0 7
50201: PUSH
50202: LD_VAR 0 7
50206: PUSH
50207: LD_VAR 0 14
50211: ADD
50212: ST_TO_ADDR
// end ;
50213: GO 50091
50215: POP
50216: POP
// end ; end ;
50217: LD_VAR 0 7
50221: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50222: LD_INT 0
50224: PPUSH
50225: PPUSH
50226: PPUSH
50227: PPUSH
50228: PPUSH
50229: PPUSH
50230: PPUSH
50231: PPUSH
50232: PPUSH
50233: PPUSH
50234: PPUSH
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
50239: PPUSH
// result := false ;
50240: LD_ADDR_VAR 0 3
50244: PUSH
50245: LD_INT 0
50247: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50248: LD_VAR 0 1
50252: NOT
50253: PUSH
50254: LD_VAR 0 1
50258: PPUSH
50259: CALL_OW 266
50263: PUSH
50264: LD_INT 32
50266: PUSH
50267: LD_INT 33
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: IN
50274: NOT
50275: OR
50276: IFFALSE 50280
// exit ;
50278: GO 51389
// nat := GetNation ( tower ) ;
50280: LD_ADDR_VAR 0 12
50284: PUSH
50285: LD_VAR 0 1
50289: PPUSH
50290: CALL_OW 248
50294: ST_TO_ADDR
// side := GetSide ( tower ) ;
50295: LD_ADDR_VAR 0 16
50299: PUSH
50300: LD_VAR 0 1
50304: PPUSH
50305: CALL_OW 255
50309: ST_TO_ADDR
// x := GetX ( tower ) ;
50310: LD_ADDR_VAR 0 10
50314: PUSH
50315: LD_VAR 0 1
50319: PPUSH
50320: CALL_OW 250
50324: ST_TO_ADDR
// y := GetY ( tower ) ;
50325: LD_ADDR_VAR 0 11
50329: PUSH
50330: LD_VAR 0 1
50334: PPUSH
50335: CALL_OW 251
50339: ST_TO_ADDR
// if not x or not y then
50340: LD_VAR 0 10
50344: NOT
50345: PUSH
50346: LD_VAR 0 11
50350: NOT
50351: OR
50352: IFFALSE 50356
// exit ;
50354: GO 51389
// weapon := 0 ;
50356: LD_ADDR_VAR 0 18
50360: PUSH
50361: LD_INT 0
50363: ST_TO_ADDR
// fac_list := [ ] ;
50364: LD_ADDR_VAR 0 17
50368: PUSH
50369: EMPTY
50370: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50371: LD_ADDR_VAR 0 6
50375: PUSH
50376: LD_VAR 0 1
50380: PPUSH
50381: CALL_OW 274
50385: PPUSH
50386: LD_VAR 0 2
50390: PPUSH
50391: LD_INT 0
50393: PPUSH
50394: CALL 47960 0 3
50398: PPUSH
50399: LD_INT 30
50401: PUSH
50402: LD_INT 3
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PPUSH
50409: CALL_OW 72
50413: ST_TO_ADDR
// if not factories then
50414: LD_VAR 0 6
50418: NOT
50419: IFFALSE 50423
// exit ;
50421: GO 51389
// for i in factories do
50423: LD_ADDR_VAR 0 8
50427: PUSH
50428: LD_VAR 0 6
50432: PUSH
50433: FOR_IN
50434: IFFALSE 50459
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50436: LD_ADDR_VAR 0 17
50440: PUSH
50441: LD_VAR 0 17
50445: PUSH
50446: LD_VAR 0 8
50450: PPUSH
50451: CALL_OW 478
50455: UNION
50456: ST_TO_ADDR
50457: GO 50433
50459: POP
50460: POP
// if not fac_list then
50461: LD_VAR 0 17
50465: NOT
50466: IFFALSE 50470
// exit ;
50468: GO 51389
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50470: LD_ADDR_VAR 0 5
50474: PUSH
50475: LD_INT 4
50477: PUSH
50478: LD_INT 5
50480: PUSH
50481: LD_INT 9
50483: PUSH
50484: LD_INT 10
50486: PUSH
50487: LD_INT 6
50489: PUSH
50490: LD_INT 7
50492: PUSH
50493: LD_INT 11
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 27
50507: PUSH
50508: LD_INT 28
50510: PUSH
50511: LD_INT 26
50513: PUSH
50514: LD_INT 30
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 43
50525: PUSH
50526: LD_INT 44
50528: PUSH
50529: LD_INT 46
50531: PUSH
50532: LD_INT 45
50534: PUSH
50535: LD_INT 47
50537: PUSH
50538: LD_INT 49
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: PUSH
50554: LD_VAR 0 12
50558: ARRAY
50559: ST_TO_ADDR
// list := list isect fac_list ;
50560: LD_ADDR_VAR 0 5
50564: PUSH
50565: LD_VAR 0 5
50569: PUSH
50570: LD_VAR 0 17
50574: ISECT
50575: ST_TO_ADDR
// if not list then
50576: LD_VAR 0 5
50580: NOT
50581: IFFALSE 50585
// exit ;
50583: GO 51389
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50585: LD_VAR 0 12
50589: PUSH
50590: LD_INT 3
50592: EQUAL
50593: PUSH
50594: LD_INT 49
50596: PUSH
50597: LD_VAR 0 5
50601: IN
50602: AND
50603: PUSH
50604: LD_INT 31
50606: PPUSH
50607: LD_VAR 0 16
50611: PPUSH
50612: CALL_OW 321
50616: PUSH
50617: LD_INT 2
50619: EQUAL
50620: AND
50621: IFFALSE 50681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50623: LD_INT 22
50625: PUSH
50626: LD_VAR 0 16
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 35
50637: PUSH
50638: LD_INT 49
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 91
50647: PUSH
50648: LD_VAR 0 1
50652: PUSH
50653: LD_INT 10
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: PPUSH
50666: CALL_OW 69
50670: NOT
50671: IFFALSE 50681
// weapon := ru_time_lapser ;
50673: LD_ADDR_VAR 0 18
50677: PUSH
50678: LD_INT 49
50680: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50681: LD_VAR 0 12
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: IN
50696: PUSH
50697: LD_INT 11
50699: PUSH
50700: LD_VAR 0 5
50704: IN
50705: PUSH
50706: LD_INT 30
50708: PUSH
50709: LD_VAR 0 5
50713: IN
50714: OR
50715: AND
50716: PUSH
50717: LD_INT 6
50719: PPUSH
50720: LD_VAR 0 16
50724: PPUSH
50725: CALL_OW 321
50729: PUSH
50730: LD_INT 2
50732: EQUAL
50733: AND
50734: IFFALSE 50899
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50736: LD_INT 22
50738: PUSH
50739: LD_VAR 0 16
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 35
50753: PUSH
50754: LD_INT 11
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 35
50763: PUSH
50764: LD_INT 30
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 91
50778: PUSH
50779: LD_VAR 0 1
50783: PUSH
50784: LD_INT 18
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: PPUSH
50797: CALL_OW 69
50801: NOT
50802: PUSH
50803: LD_INT 22
50805: PUSH
50806: LD_VAR 0 16
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 30
50820: PUSH
50821: LD_INT 32
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 30
50830: PUSH
50831: LD_INT 33
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 91
50845: PUSH
50846: LD_VAR 0 1
50850: PUSH
50851: LD_INT 12
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: PUSH
50864: EMPTY
50865: LIST
50866: PPUSH
50867: CALL_OW 69
50871: PUSH
50872: LD_INT 2
50874: GREATER
50875: AND
50876: IFFALSE 50899
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50878: LD_ADDR_VAR 0 18
50882: PUSH
50883: LD_INT 11
50885: PUSH
50886: LD_INT 30
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_VAR 0 12
50897: ARRAY
50898: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50899: LD_VAR 0 18
50903: NOT
50904: PUSH
50905: LD_INT 40
50907: PPUSH
50908: LD_VAR 0 16
50912: PPUSH
50913: CALL_OW 321
50917: PUSH
50918: LD_INT 2
50920: EQUAL
50921: AND
50922: PUSH
50923: LD_INT 7
50925: PUSH
50926: LD_VAR 0 5
50930: IN
50931: PUSH
50932: LD_INT 28
50934: PUSH
50935: LD_VAR 0 5
50939: IN
50940: OR
50941: PUSH
50942: LD_INT 45
50944: PUSH
50945: LD_VAR 0 5
50949: IN
50950: OR
50951: AND
50952: IFFALSE 51206
// begin hex := GetHexInfo ( x , y ) ;
50954: LD_ADDR_VAR 0 4
50958: PUSH
50959: LD_VAR 0 10
50963: PPUSH
50964: LD_VAR 0 11
50968: PPUSH
50969: CALL_OW 546
50973: ST_TO_ADDR
// if hex [ 1 ] then
50974: LD_VAR 0 4
50978: PUSH
50979: LD_INT 1
50981: ARRAY
50982: IFFALSE 50986
// exit ;
50984: GO 51389
// height := hex [ 2 ] ;
50986: LD_ADDR_VAR 0 15
50990: PUSH
50991: LD_VAR 0 4
50995: PUSH
50996: LD_INT 2
50998: ARRAY
50999: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51000: LD_ADDR_VAR 0 14
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 5
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: ST_TO_ADDR
// for i in tmp do
51023: LD_ADDR_VAR 0 8
51027: PUSH
51028: LD_VAR 0 14
51032: PUSH
51033: FOR_IN
51034: IFFALSE 51204
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51036: LD_ADDR_VAR 0 9
51040: PUSH
51041: LD_VAR 0 10
51045: PPUSH
51046: LD_VAR 0 8
51050: PPUSH
51051: LD_INT 5
51053: PPUSH
51054: CALL_OW 272
51058: PUSH
51059: LD_VAR 0 11
51063: PPUSH
51064: LD_VAR 0 8
51068: PPUSH
51069: LD_INT 5
51071: PPUSH
51072: CALL_OW 273
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51081: LD_VAR 0 9
51085: PUSH
51086: LD_INT 1
51088: ARRAY
51089: PPUSH
51090: LD_VAR 0 9
51094: PUSH
51095: LD_INT 2
51097: ARRAY
51098: PPUSH
51099: CALL_OW 488
51103: IFFALSE 51202
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51105: LD_ADDR_VAR 0 4
51109: PUSH
51110: LD_VAR 0 9
51114: PUSH
51115: LD_INT 1
51117: ARRAY
51118: PPUSH
51119: LD_VAR 0 9
51123: PUSH
51124: LD_INT 2
51126: ARRAY
51127: PPUSH
51128: CALL_OW 546
51132: ST_TO_ADDR
// if hex [ 1 ] then
51133: LD_VAR 0 4
51137: PUSH
51138: LD_INT 1
51140: ARRAY
51141: IFFALSE 51145
// continue ;
51143: GO 51033
// h := hex [ 2 ] ;
51145: LD_ADDR_VAR 0 13
51149: PUSH
51150: LD_VAR 0 4
51154: PUSH
51155: LD_INT 2
51157: ARRAY
51158: ST_TO_ADDR
// if h + 7 < height then
51159: LD_VAR 0 13
51163: PUSH
51164: LD_INT 7
51166: PLUS
51167: PUSH
51168: LD_VAR 0 15
51172: LESS
51173: IFFALSE 51202
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51175: LD_ADDR_VAR 0 18
51179: PUSH
51180: LD_INT 7
51182: PUSH
51183: LD_INT 28
51185: PUSH
51186: LD_INT 45
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: PUSH
51194: LD_VAR 0 12
51198: ARRAY
51199: ST_TO_ADDR
// break ;
51200: GO 51204
// end ; end ; end ;
51202: GO 51033
51204: POP
51205: POP
// end ; if not weapon then
51206: LD_VAR 0 18
51210: NOT
51211: IFFALSE 51271
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51213: LD_ADDR_VAR 0 5
51217: PUSH
51218: LD_VAR 0 5
51222: PUSH
51223: LD_INT 11
51225: PUSH
51226: LD_INT 30
51228: PUSH
51229: LD_INT 49
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: DIFF
51237: ST_TO_ADDR
// if not list then
51238: LD_VAR 0 5
51242: NOT
51243: IFFALSE 51247
// exit ;
51245: GO 51389
// weapon := list [ rand ( 1 , list ) ] ;
51247: LD_ADDR_VAR 0 18
51251: PUSH
51252: LD_VAR 0 5
51256: PUSH
51257: LD_INT 1
51259: PPUSH
51260: LD_VAR 0 5
51264: PPUSH
51265: CALL_OW 12
51269: ARRAY
51270: ST_TO_ADDR
// end ; if weapon then
51271: LD_VAR 0 18
51275: IFFALSE 51389
// begin tmp := CostOfWeapon ( weapon ) ;
51277: LD_ADDR_VAR 0 14
51281: PUSH
51282: LD_VAR 0 18
51286: PPUSH
51287: CALL_OW 451
51291: ST_TO_ADDR
// j := GetBase ( tower ) ;
51292: LD_ADDR_VAR 0 9
51296: PUSH
51297: LD_VAR 0 1
51301: PPUSH
51302: CALL_OW 274
51306: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51307: LD_VAR 0 9
51311: PPUSH
51312: LD_INT 1
51314: PPUSH
51315: CALL_OW 275
51319: PUSH
51320: LD_VAR 0 14
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: GREATEREQUAL
51329: PUSH
51330: LD_VAR 0 9
51334: PPUSH
51335: LD_INT 2
51337: PPUSH
51338: CALL_OW 275
51342: PUSH
51343: LD_VAR 0 14
51347: PUSH
51348: LD_INT 2
51350: ARRAY
51351: GREATEREQUAL
51352: AND
51353: PUSH
51354: LD_VAR 0 9
51358: PPUSH
51359: LD_INT 3
51361: PPUSH
51362: CALL_OW 275
51366: PUSH
51367: LD_VAR 0 14
51371: PUSH
51372: LD_INT 3
51374: ARRAY
51375: GREATEREQUAL
51376: AND
51377: IFFALSE 51389
// result := weapon ;
51379: LD_ADDR_VAR 0 3
51383: PUSH
51384: LD_VAR 0 18
51388: ST_TO_ADDR
// end ; end ;
51389: LD_VAR 0 3
51393: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51394: LD_INT 0
51396: PPUSH
51397: PPUSH
// result := true ;
51398: LD_ADDR_VAR 0 3
51402: PUSH
51403: LD_INT 1
51405: ST_TO_ADDR
// if array1 = array2 then
51406: LD_VAR 0 1
51410: PUSH
51411: LD_VAR 0 2
51415: EQUAL
51416: IFFALSE 51476
// begin for i = 1 to array1 do
51418: LD_ADDR_VAR 0 4
51422: PUSH
51423: DOUBLE
51424: LD_INT 1
51426: DEC
51427: ST_TO_ADDR
51428: LD_VAR 0 1
51432: PUSH
51433: FOR_TO
51434: IFFALSE 51472
// if array1 [ i ] <> array2 [ i ] then
51436: LD_VAR 0 1
51440: PUSH
51441: LD_VAR 0 4
51445: ARRAY
51446: PUSH
51447: LD_VAR 0 2
51451: PUSH
51452: LD_VAR 0 4
51456: ARRAY
51457: NONEQUAL
51458: IFFALSE 51470
// begin result := false ;
51460: LD_ADDR_VAR 0 3
51464: PUSH
51465: LD_INT 0
51467: ST_TO_ADDR
// break ;
51468: GO 51472
// end ;
51470: GO 51433
51472: POP
51473: POP
// end else
51474: GO 51484
// result := false ;
51476: LD_ADDR_VAR 0 3
51480: PUSH
51481: LD_INT 0
51483: ST_TO_ADDR
// end ;
51484: LD_VAR 0 3
51488: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
// if not array1 or not array2 then
51493: LD_VAR 0 1
51497: NOT
51498: PUSH
51499: LD_VAR 0 2
51503: NOT
51504: OR
51505: IFFALSE 51509
// exit ;
51507: GO 51573
// result := true ;
51509: LD_ADDR_VAR 0 3
51513: PUSH
51514: LD_INT 1
51516: ST_TO_ADDR
// for i = 1 to array1 do
51517: LD_ADDR_VAR 0 4
51521: PUSH
51522: DOUBLE
51523: LD_INT 1
51525: DEC
51526: ST_TO_ADDR
51527: LD_VAR 0 1
51531: PUSH
51532: FOR_TO
51533: IFFALSE 51571
// if array1 [ i ] <> array2 [ i ] then
51535: LD_VAR 0 1
51539: PUSH
51540: LD_VAR 0 4
51544: ARRAY
51545: PUSH
51546: LD_VAR 0 2
51550: PUSH
51551: LD_VAR 0 4
51555: ARRAY
51556: NONEQUAL
51557: IFFALSE 51569
// begin result := false ;
51559: LD_ADDR_VAR 0 3
51563: PUSH
51564: LD_INT 0
51566: ST_TO_ADDR
// break ;
51567: GO 51571
// end ;
51569: GO 51532
51571: POP
51572: POP
// end ;
51573: LD_VAR 0 3
51577: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51578: LD_INT 0
51580: PPUSH
51581: PPUSH
51582: PPUSH
// pom := GetBase ( fac ) ;
51583: LD_ADDR_VAR 0 5
51587: PUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: CALL_OW 274
51597: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51598: LD_ADDR_VAR 0 4
51602: PUSH
51603: LD_VAR 0 2
51607: PUSH
51608: LD_INT 1
51610: ARRAY
51611: PPUSH
51612: LD_VAR 0 2
51616: PUSH
51617: LD_INT 2
51619: ARRAY
51620: PPUSH
51621: LD_VAR 0 2
51625: PUSH
51626: LD_INT 3
51628: ARRAY
51629: PPUSH
51630: LD_VAR 0 2
51634: PUSH
51635: LD_INT 4
51637: ARRAY
51638: PPUSH
51639: CALL_OW 449
51643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_VAR 0 5
51653: PPUSH
51654: LD_INT 1
51656: PPUSH
51657: CALL_OW 275
51661: PUSH
51662: LD_VAR 0 4
51666: PUSH
51667: LD_INT 1
51669: ARRAY
51670: GREATEREQUAL
51671: PUSH
51672: LD_VAR 0 5
51676: PPUSH
51677: LD_INT 2
51679: PPUSH
51680: CALL_OW 275
51684: PUSH
51685: LD_VAR 0 4
51689: PUSH
51690: LD_INT 2
51692: ARRAY
51693: GREATEREQUAL
51694: AND
51695: PUSH
51696: LD_VAR 0 5
51700: PPUSH
51701: LD_INT 3
51703: PPUSH
51704: CALL_OW 275
51708: PUSH
51709: LD_VAR 0 4
51713: PUSH
51714: LD_INT 3
51716: ARRAY
51717: GREATEREQUAL
51718: AND
51719: ST_TO_ADDR
// end ;
51720: LD_VAR 0 3
51724: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51725: LD_INT 0
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
// pom := GetBase ( building ) ;
51731: LD_ADDR_VAR 0 3
51735: PUSH
51736: LD_VAR 0 1
51740: PPUSH
51741: CALL_OW 274
51745: ST_TO_ADDR
// if not pom then
51746: LD_VAR 0 3
51750: NOT
51751: IFFALSE 51755
// exit ;
51753: GO 51925
// btype := GetBType ( building ) ;
51755: LD_ADDR_VAR 0 5
51759: PUSH
51760: LD_VAR 0 1
51764: PPUSH
51765: CALL_OW 266
51769: ST_TO_ADDR
// if btype = b_armoury then
51770: LD_VAR 0 5
51774: PUSH
51775: LD_INT 4
51777: EQUAL
51778: IFFALSE 51788
// btype := b_barracks ;
51780: LD_ADDR_VAR 0 5
51784: PUSH
51785: LD_INT 5
51787: ST_TO_ADDR
// if btype = b_depot then
51788: LD_VAR 0 5
51792: PUSH
51793: LD_INT 0
51795: EQUAL
51796: IFFALSE 51806
// btype := b_warehouse ;
51798: LD_ADDR_VAR 0 5
51802: PUSH
51803: LD_INT 1
51805: ST_TO_ADDR
// if btype = b_workshop then
51806: LD_VAR 0 5
51810: PUSH
51811: LD_INT 2
51813: EQUAL
51814: IFFALSE 51824
// btype := b_factory ;
51816: LD_ADDR_VAR 0 5
51820: PUSH
51821: LD_INT 3
51823: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51824: LD_ADDR_VAR 0 4
51828: PUSH
51829: LD_VAR 0 5
51833: PPUSH
51834: LD_VAR 0 1
51838: PPUSH
51839: CALL_OW 248
51843: PPUSH
51844: CALL_OW 450
51848: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51849: LD_ADDR_VAR 0 2
51853: PUSH
51854: LD_VAR 0 3
51858: PPUSH
51859: LD_INT 1
51861: PPUSH
51862: CALL_OW 275
51866: PUSH
51867: LD_VAR 0 4
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: GREATEREQUAL
51876: PUSH
51877: LD_VAR 0 3
51881: PPUSH
51882: LD_INT 2
51884: PPUSH
51885: CALL_OW 275
51889: PUSH
51890: LD_VAR 0 4
51894: PUSH
51895: LD_INT 2
51897: ARRAY
51898: GREATEREQUAL
51899: AND
51900: PUSH
51901: LD_VAR 0 3
51905: PPUSH
51906: LD_INT 3
51908: PPUSH
51909: CALL_OW 275
51913: PUSH
51914: LD_VAR 0 4
51918: PUSH
51919: LD_INT 3
51921: ARRAY
51922: GREATEREQUAL
51923: AND
51924: ST_TO_ADDR
// end ;
51925: LD_VAR 0 2
51929: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51930: LD_INT 0
51932: PPUSH
51933: PPUSH
51934: PPUSH
// pom := GetBase ( building ) ;
51935: LD_ADDR_VAR 0 4
51939: PUSH
51940: LD_VAR 0 1
51944: PPUSH
51945: CALL_OW 274
51949: ST_TO_ADDR
// if not pom then
51950: LD_VAR 0 4
51954: NOT
51955: IFFALSE 51959
// exit ;
51957: GO 52060
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51959: LD_ADDR_VAR 0 5
51963: PUSH
51964: LD_VAR 0 2
51968: PPUSH
51969: LD_VAR 0 1
51973: PPUSH
51974: CALL_OW 248
51978: PPUSH
51979: CALL_OW 450
51983: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51984: LD_ADDR_VAR 0 3
51988: PUSH
51989: LD_VAR 0 4
51993: PPUSH
51994: LD_INT 1
51996: PPUSH
51997: CALL_OW 275
52001: PUSH
52002: LD_VAR 0 5
52006: PUSH
52007: LD_INT 1
52009: ARRAY
52010: GREATEREQUAL
52011: PUSH
52012: LD_VAR 0 4
52016: PPUSH
52017: LD_INT 2
52019: PPUSH
52020: CALL_OW 275
52024: PUSH
52025: LD_VAR 0 5
52029: PUSH
52030: LD_INT 2
52032: ARRAY
52033: GREATEREQUAL
52034: AND
52035: PUSH
52036: LD_VAR 0 4
52040: PPUSH
52041: LD_INT 3
52043: PPUSH
52044: CALL_OW 275
52048: PUSH
52049: LD_VAR 0 5
52053: PUSH
52054: LD_INT 3
52056: ARRAY
52057: GREATEREQUAL
52058: AND
52059: ST_TO_ADDR
// end ;
52060: LD_VAR 0 3
52064: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52065: LD_INT 0
52067: PPUSH
52068: PPUSH
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
// result := false ;
52078: LD_ADDR_VAR 0 8
52082: PUSH
52083: LD_INT 0
52085: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52086: LD_VAR 0 5
52090: NOT
52091: PUSH
52092: LD_VAR 0 1
52096: NOT
52097: OR
52098: PUSH
52099: LD_VAR 0 2
52103: NOT
52104: OR
52105: PUSH
52106: LD_VAR 0 3
52110: NOT
52111: OR
52112: IFFALSE 52116
// exit ;
52114: GO 52930
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52116: LD_ADDR_VAR 0 14
52120: PUSH
52121: LD_VAR 0 1
52125: PPUSH
52126: LD_VAR 0 2
52130: PPUSH
52131: LD_VAR 0 3
52135: PPUSH
52136: LD_VAR 0 4
52140: PPUSH
52141: LD_VAR 0 5
52145: PUSH
52146: LD_INT 1
52148: ARRAY
52149: PPUSH
52150: CALL_OW 248
52154: PPUSH
52155: LD_INT 0
52157: PPUSH
52158: CALL 54163 0 6
52162: ST_TO_ADDR
// if not hexes then
52163: LD_VAR 0 14
52167: NOT
52168: IFFALSE 52172
// exit ;
52170: GO 52930
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52172: LD_ADDR_VAR 0 17
52176: PUSH
52177: LD_VAR 0 5
52181: PPUSH
52182: LD_INT 22
52184: PUSH
52185: LD_VAR 0 13
52189: PPUSH
52190: CALL_OW 255
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 30
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 30
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PPUSH
52231: CALL_OW 72
52235: ST_TO_ADDR
// for i = 1 to hexes do
52236: LD_ADDR_VAR 0 9
52240: PUSH
52241: DOUBLE
52242: LD_INT 1
52244: DEC
52245: ST_TO_ADDR
52246: LD_VAR 0 14
52250: PUSH
52251: FOR_TO
52252: IFFALSE 52928
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52254: LD_ADDR_VAR 0 13
52258: PUSH
52259: LD_VAR 0 14
52263: PUSH
52264: LD_VAR 0 9
52268: ARRAY
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: PPUSH
52274: LD_VAR 0 14
52278: PUSH
52279: LD_VAR 0 9
52283: ARRAY
52284: PUSH
52285: LD_INT 2
52287: ARRAY
52288: PPUSH
52289: CALL_OW 428
52293: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52294: LD_VAR 0 14
52298: PUSH
52299: LD_VAR 0 9
52303: ARRAY
52304: PUSH
52305: LD_INT 1
52307: ARRAY
52308: PPUSH
52309: LD_VAR 0 14
52313: PUSH
52314: LD_VAR 0 9
52318: ARRAY
52319: PUSH
52320: LD_INT 2
52322: ARRAY
52323: PPUSH
52324: CALL_OW 351
52328: PUSH
52329: LD_VAR 0 14
52333: PUSH
52334: LD_VAR 0 9
52338: ARRAY
52339: PUSH
52340: LD_INT 1
52342: ARRAY
52343: PPUSH
52344: LD_VAR 0 14
52348: PUSH
52349: LD_VAR 0 9
52353: ARRAY
52354: PUSH
52355: LD_INT 2
52357: ARRAY
52358: PPUSH
52359: CALL_OW 488
52363: NOT
52364: OR
52365: PUSH
52366: LD_VAR 0 13
52370: PPUSH
52371: CALL_OW 247
52375: PUSH
52376: LD_INT 3
52378: EQUAL
52379: OR
52380: IFFALSE 52386
// exit ;
52382: POP
52383: POP
52384: GO 52930
// if not tmp then
52386: LD_VAR 0 13
52390: NOT
52391: IFFALSE 52395
// continue ;
52393: GO 52251
// result := true ;
52395: LD_ADDR_VAR 0 8
52399: PUSH
52400: LD_INT 1
52402: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52403: LD_VAR 0 6
52407: PUSH
52408: LD_VAR 0 13
52412: PPUSH
52413: CALL_OW 247
52417: PUSH
52418: LD_INT 2
52420: EQUAL
52421: AND
52422: PUSH
52423: LD_VAR 0 13
52427: PPUSH
52428: CALL_OW 263
52432: PUSH
52433: LD_INT 1
52435: EQUAL
52436: AND
52437: IFFALSE 52601
// begin if IsDrivenBy ( tmp ) then
52439: LD_VAR 0 13
52443: PPUSH
52444: CALL_OW 311
52448: IFFALSE 52452
// continue ;
52450: GO 52251
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52452: LD_VAR 0 6
52456: PPUSH
52457: LD_INT 3
52459: PUSH
52460: LD_INT 60
52462: PUSH
52463: EMPTY
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: PUSH
52473: LD_INT 55
52475: PUSH
52476: EMPTY
52477: LIST
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PPUSH
52487: CALL_OW 72
52491: IFFALSE 52599
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52493: LD_ADDR_VAR 0 18
52497: PUSH
52498: LD_VAR 0 6
52502: PPUSH
52503: LD_INT 3
52505: PUSH
52506: LD_INT 60
52508: PUSH
52509: EMPTY
52510: LIST
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: LD_INT 55
52521: PUSH
52522: EMPTY
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PPUSH
52533: CALL_OW 72
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: ST_TO_ADDR
// if IsInUnit ( driver ) then
52542: LD_VAR 0 18
52546: PPUSH
52547: CALL_OW 310
52551: IFFALSE 52562
// ComExit ( driver ) ;
52553: LD_VAR 0 18
52557: PPUSH
52558: CALL 77942 0 1
// AddComEnterUnit ( driver , tmp ) ;
52562: LD_VAR 0 18
52566: PPUSH
52567: LD_VAR 0 13
52571: PPUSH
52572: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52576: LD_VAR 0 18
52580: PPUSH
52581: LD_VAR 0 7
52585: PPUSH
52586: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52590: LD_VAR 0 18
52594: PPUSH
52595: CALL_OW 181
// end ; continue ;
52599: GO 52251
// end ; if not cleaners or not tmp in cleaners then
52601: LD_VAR 0 6
52605: NOT
52606: PUSH
52607: LD_VAR 0 13
52611: PUSH
52612: LD_VAR 0 6
52616: IN
52617: NOT
52618: OR
52619: IFFALSE 52926
// begin if dep then
52621: LD_VAR 0 17
52625: IFFALSE 52761
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52627: LD_ADDR_VAR 0 16
52631: PUSH
52632: LD_VAR 0 17
52636: PUSH
52637: LD_INT 1
52639: ARRAY
52640: PPUSH
52641: CALL_OW 250
52645: PPUSH
52646: LD_VAR 0 17
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: PPUSH
52655: CALL_OW 254
52659: PPUSH
52660: LD_INT 5
52662: PPUSH
52663: CALL_OW 272
52667: PUSH
52668: LD_VAR 0 17
52672: PUSH
52673: LD_INT 1
52675: ARRAY
52676: PPUSH
52677: CALL_OW 251
52681: PPUSH
52682: LD_VAR 0 17
52686: PUSH
52687: LD_INT 1
52689: ARRAY
52690: PPUSH
52691: CALL_OW 254
52695: PPUSH
52696: LD_INT 5
52698: PPUSH
52699: CALL_OW 273
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52708: LD_VAR 0 16
52712: PUSH
52713: LD_INT 1
52715: ARRAY
52716: PPUSH
52717: LD_VAR 0 16
52721: PUSH
52722: LD_INT 2
52724: ARRAY
52725: PPUSH
52726: CALL_OW 488
52730: IFFALSE 52761
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52732: LD_VAR 0 13
52736: PPUSH
52737: LD_VAR 0 16
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PPUSH
52746: LD_VAR 0 16
52750: PUSH
52751: LD_INT 2
52753: ARRAY
52754: PPUSH
52755: CALL_OW 111
// continue ;
52759: GO 52251
// end ; end ; r := GetDir ( tmp ) ;
52761: LD_ADDR_VAR 0 15
52765: PUSH
52766: LD_VAR 0 13
52770: PPUSH
52771: CALL_OW 254
52775: ST_TO_ADDR
// if r = 5 then
52776: LD_VAR 0 15
52780: PUSH
52781: LD_INT 5
52783: EQUAL
52784: IFFALSE 52794
// r := 0 ;
52786: LD_ADDR_VAR 0 15
52790: PUSH
52791: LD_INT 0
52793: ST_TO_ADDR
// for j = r to 5 do
52794: LD_ADDR_VAR 0 10
52798: PUSH
52799: DOUBLE
52800: LD_VAR 0 15
52804: DEC
52805: ST_TO_ADDR
52806: LD_INT 5
52808: PUSH
52809: FOR_TO
52810: IFFALSE 52924
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52812: LD_ADDR_VAR 0 11
52816: PUSH
52817: LD_VAR 0 13
52821: PPUSH
52822: CALL_OW 250
52826: PPUSH
52827: LD_VAR 0 10
52831: PPUSH
52832: LD_INT 2
52834: PPUSH
52835: CALL_OW 272
52839: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52840: LD_ADDR_VAR 0 12
52844: PUSH
52845: LD_VAR 0 13
52849: PPUSH
52850: CALL_OW 251
52854: PPUSH
52855: LD_VAR 0 10
52859: PPUSH
52860: LD_INT 2
52862: PPUSH
52863: CALL_OW 273
52867: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52868: LD_VAR 0 11
52872: PPUSH
52873: LD_VAR 0 12
52877: PPUSH
52878: CALL_OW 488
52882: PUSH
52883: LD_VAR 0 11
52887: PPUSH
52888: LD_VAR 0 12
52892: PPUSH
52893: CALL_OW 428
52897: NOT
52898: AND
52899: IFFALSE 52922
// begin ComMoveXY ( tmp , _x , _y ) ;
52901: LD_VAR 0 13
52905: PPUSH
52906: LD_VAR 0 11
52910: PPUSH
52911: LD_VAR 0 12
52915: PPUSH
52916: CALL_OW 111
// break ;
52920: GO 52924
// end ; end ;
52922: GO 52809
52924: POP
52925: POP
// end ; end ;
52926: GO 52251
52928: POP
52929: POP
// end ;
52930: LD_VAR 0 8
52934: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52935: LD_INT 0
52937: PPUSH
// result := true ;
52938: LD_ADDR_VAR 0 3
52942: PUSH
52943: LD_INT 1
52945: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52946: LD_VAR 0 2
52950: PUSH
52951: LD_INT 24
52953: DOUBLE
52954: EQUAL
52955: IFTRUE 52965
52957: LD_INT 33
52959: DOUBLE
52960: EQUAL
52961: IFTRUE 52965
52963: GO 52990
52965: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52966: LD_ADDR_VAR 0 3
52970: PUSH
52971: LD_INT 32
52973: PPUSH
52974: LD_VAR 0 1
52978: PPUSH
52979: CALL_OW 321
52983: PUSH
52984: LD_INT 2
52986: EQUAL
52987: ST_TO_ADDR
52988: GO 53306
52990: LD_INT 20
52992: DOUBLE
52993: EQUAL
52994: IFTRUE 52998
52996: GO 53023
52998: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52999: LD_ADDR_VAR 0 3
53003: PUSH
53004: LD_INT 6
53006: PPUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: CALL_OW 321
53016: PUSH
53017: LD_INT 2
53019: EQUAL
53020: ST_TO_ADDR
53021: GO 53306
53023: LD_INT 22
53025: DOUBLE
53026: EQUAL
53027: IFTRUE 53037
53029: LD_INT 36
53031: DOUBLE
53032: EQUAL
53033: IFTRUE 53037
53035: GO 53062
53037: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53038: LD_ADDR_VAR 0 3
53042: PUSH
53043: LD_INT 15
53045: PPUSH
53046: LD_VAR 0 1
53050: PPUSH
53051: CALL_OW 321
53055: PUSH
53056: LD_INT 2
53058: EQUAL
53059: ST_TO_ADDR
53060: GO 53306
53062: LD_INT 30
53064: DOUBLE
53065: EQUAL
53066: IFTRUE 53070
53068: GO 53095
53070: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53071: LD_ADDR_VAR 0 3
53075: PUSH
53076: LD_INT 20
53078: PPUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 321
53088: PUSH
53089: LD_INT 2
53091: EQUAL
53092: ST_TO_ADDR
53093: GO 53306
53095: LD_INT 28
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53109
53101: LD_INT 21
53103: DOUBLE
53104: EQUAL
53105: IFTRUE 53109
53107: GO 53134
53109: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53110: LD_ADDR_VAR 0 3
53114: PUSH
53115: LD_INT 21
53117: PPUSH
53118: LD_VAR 0 1
53122: PPUSH
53123: CALL_OW 321
53127: PUSH
53128: LD_INT 2
53130: EQUAL
53131: ST_TO_ADDR
53132: GO 53306
53134: LD_INT 16
53136: DOUBLE
53137: EQUAL
53138: IFTRUE 53142
53140: GO 53167
53142: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53143: LD_ADDR_VAR 0 3
53147: PUSH
53148: LD_INT 84
53150: PPUSH
53151: LD_VAR 0 1
53155: PPUSH
53156: CALL_OW 321
53160: PUSH
53161: LD_INT 2
53163: EQUAL
53164: ST_TO_ADDR
53165: GO 53306
53167: LD_INT 19
53169: DOUBLE
53170: EQUAL
53171: IFTRUE 53181
53173: LD_INT 23
53175: DOUBLE
53176: EQUAL
53177: IFTRUE 53181
53179: GO 53206
53181: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53182: LD_ADDR_VAR 0 3
53186: PUSH
53187: LD_INT 83
53189: PPUSH
53190: LD_VAR 0 1
53194: PPUSH
53195: CALL_OW 321
53199: PUSH
53200: LD_INT 2
53202: EQUAL
53203: ST_TO_ADDR
53204: GO 53306
53206: LD_INT 17
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53239
53214: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53215: LD_ADDR_VAR 0 3
53219: PUSH
53220: LD_INT 39
53222: PPUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: CALL_OW 321
53232: PUSH
53233: LD_INT 2
53235: EQUAL
53236: ST_TO_ADDR
53237: GO 53306
53239: LD_INT 18
53241: DOUBLE
53242: EQUAL
53243: IFTRUE 53247
53245: GO 53272
53247: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53248: LD_ADDR_VAR 0 3
53252: PUSH
53253: LD_INT 40
53255: PPUSH
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 321
53265: PUSH
53266: LD_INT 2
53268: EQUAL
53269: ST_TO_ADDR
53270: GO 53306
53272: LD_INT 27
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53280
53278: GO 53305
53280: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53281: LD_ADDR_VAR 0 3
53285: PUSH
53286: LD_INT 35
53288: PPUSH
53289: LD_VAR 0 1
53293: PPUSH
53294: CALL_OW 321
53298: PUSH
53299: LD_INT 2
53301: EQUAL
53302: ST_TO_ADDR
53303: GO 53306
53305: POP
// end ;
53306: LD_VAR 0 3
53310: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53311: LD_INT 0
53313: PPUSH
53314: PPUSH
53315: PPUSH
53316: PPUSH
53317: PPUSH
53318: PPUSH
53319: PPUSH
53320: PPUSH
53321: PPUSH
53322: PPUSH
53323: PPUSH
// result := false ;
53324: LD_ADDR_VAR 0 6
53328: PUSH
53329: LD_INT 0
53331: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53332: LD_VAR 0 1
53336: NOT
53337: PUSH
53338: LD_VAR 0 1
53342: PPUSH
53343: CALL_OW 266
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: IN
53358: NOT
53359: OR
53360: PUSH
53361: LD_VAR 0 2
53365: NOT
53366: OR
53367: PUSH
53368: LD_VAR 0 5
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 4
53387: PUSH
53388: LD_INT 5
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: IN
53399: NOT
53400: OR
53401: PUSH
53402: LD_VAR 0 3
53406: PPUSH
53407: LD_VAR 0 4
53411: PPUSH
53412: CALL_OW 488
53416: NOT
53417: OR
53418: IFFALSE 53422
// exit ;
53420: GO 54158
// side := GetSide ( depot ) ;
53422: LD_ADDR_VAR 0 9
53426: PUSH
53427: LD_VAR 0 1
53431: PPUSH
53432: CALL_OW 255
53436: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53437: LD_VAR 0 9
53441: PPUSH
53442: LD_VAR 0 2
53446: PPUSH
53447: CALL 52935 0 2
53451: NOT
53452: IFFALSE 53456
// exit ;
53454: GO 54158
// pom := GetBase ( depot ) ;
53456: LD_ADDR_VAR 0 10
53460: PUSH
53461: LD_VAR 0 1
53465: PPUSH
53466: CALL_OW 274
53470: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53471: LD_ADDR_VAR 0 11
53475: PUSH
53476: LD_VAR 0 2
53480: PPUSH
53481: LD_VAR 0 1
53485: PPUSH
53486: CALL_OW 248
53490: PPUSH
53491: CALL_OW 450
53495: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53496: LD_VAR 0 10
53500: PPUSH
53501: LD_INT 1
53503: PPUSH
53504: CALL_OW 275
53508: PUSH
53509: LD_VAR 0 11
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: GREATEREQUAL
53518: PUSH
53519: LD_VAR 0 10
53523: PPUSH
53524: LD_INT 2
53526: PPUSH
53527: CALL_OW 275
53531: PUSH
53532: LD_VAR 0 11
53536: PUSH
53537: LD_INT 2
53539: ARRAY
53540: GREATEREQUAL
53541: AND
53542: PUSH
53543: LD_VAR 0 10
53547: PPUSH
53548: LD_INT 3
53550: PPUSH
53551: CALL_OW 275
53555: PUSH
53556: LD_VAR 0 11
53560: PUSH
53561: LD_INT 3
53563: ARRAY
53564: GREATEREQUAL
53565: AND
53566: NOT
53567: IFFALSE 53571
// exit ;
53569: GO 54158
// if GetBType ( depot ) = b_depot then
53571: LD_VAR 0 1
53575: PPUSH
53576: CALL_OW 266
53580: PUSH
53581: LD_INT 0
53583: EQUAL
53584: IFFALSE 53596
// dist := 28 else
53586: LD_ADDR_VAR 0 14
53590: PUSH
53591: LD_INT 28
53593: ST_TO_ADDR
53594: GO 53604
// dist := 36 ;
53596: LD_ADDR_VAR 0 14
53600: PUSH
53601: LD_INT 36
53603: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53604: LD_VAR 0 1
53608: PPUSH
53609: LD_VAR 0 3
53613: PPUSH
53614: LD_VAR 0 4
53618: PPUSH
53619: CALL_OW 297
53623: PUSH
53624: LD_VAR 0 14
53628: GREATER
53629: IFFALSE 53633
// exit ;
53631: GO 54158
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53633: LD_ADDR_VAR 0 12
53637: PUSH
53638: LD_VAR 0 2
53642: PPUSH
53643: LD_VAR 0 3
53647: PPUSH
53648: LD_VAR 0 4
53652: PPUSH
53653: LD_VAR 0 5
53657: PPUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: CALL_OW 248
53667: PPUSH
53668: LD_INT 0
53670: PPUSH
53671: CALL 54163 0 6
53675: ST_TO_ADDR
// if not hexes then
53676: LD_VAR 0 12
53680: NOT
53681: IFFALSE 53685
// exit ;
53683: GO 54158
// hex := GetHexInfo ( x , y ) ;
53685: LD_ADDR_VAR 0 15
53689: PUSH
53690: LD_VAR 0 3
53694: PPUSH
53695: LD_VAR 0 4
53699: PPUSH
53700: CALL_OW 546
53704: ST_TO_ADDR
// if hex [ 1 ] then
53705: LD_VAR 0 15
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: IFFALSE 53717
// exit ;
53715: GO 54158
// height := hex [ 2 ] ;
53717: LD_ADDR_VAR 0 13
53721: PUSH
53722: LD_VAR 0 15
53726: PUSH
53727: LD_INT 2
53729: ARRAY
53730: ST_TO_ADDR
// for i = 1 to hexes do
53731: LD_ADDR_VAR 0 7
53735: PUSH
53736: DOUBLE
53737: LD_INT 1
53739: DEC
53740: ST_TO_ADDR
53741: LD_VAR 0 12
53745: PUSH
53746: FOR_TO
53747: IFFALSE 54077
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53749: LD_VAR 0 12
53753: PUSH
53754: LD_VAR 0 7
53758: ARRAY
53759: PUSH
53760: LD_INT 1
53762: ARRAY
53763: PPUSH
53764: LD_VAR 0 12
53768: PUSH
53769: LD_VAR 0 7
53773: ARRAY
53774: PUSH
53775: LD_INT 2
53777: ARRAY
53778: PPUSH
53779: CALL_OW 488
53783: NOT
53784: PUSH
53785: LD_VAR 0 12
53789: PUSH
53790: LD_VAR 0 7
53794: ARRAY
53795: PUSH
53796: LD_INT 1
53798: ARRAY
53799: PPUSH
53800: LD_VAR 0 12
53804: PUSH
53805: LD_VAR 0 7
53809: ARRAY
53810: PUSH
53811: LD_INT 2
53813: ARRAY
53814: PPUSH
53815: CALL_OW 428
53819: PUSH
53820: LD_INT 0
53822: GREATER
53823: OR
53824: PUSH
53825: LD_VAR 0 12
53829: PUSH
53830: LD_VAR 0 7
53834: ARRAY
53835: PUSH
53836: LD_INT 1
53838: ARRAY
53839: PPUSH
53840: LD_VAR 0 12
53844: PUSH
53845: LD_VAR 0 7
53849: ARRAY
53850: PUSH
53851: LD_INT 2
53853: ARRAY
53854: PPUSH
53855: CALL_OW 351
53859: OR
53860: IFFALSE 53866
// exit ;
53862: POP
53863: POP
53864: GO 54158
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53866: LD_ADDR_VAR 0 8
53870: PUSH
53871: LD_VAR 0 12
53875: PUSH
53876: LD_VAR 0 7
53880: ARRAY
53881: PUSH
53882: LD_INT 1
53884: ARRAY
53885: PPUSH
53886: LD_VAR 0 12
53890: PUSH
53891: LD_VAR 0 7
53895: ARRAY
53896: PUSH
53897: LD_INT 2
53899: ARRAY
53900: PPUSH
53901: CALL_OW 546
53905: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53906: LD_VAR 0 8
53910: PUSH
53911: LD_INT 1
53913: ARRAY
53914: PUSH
53915: LD_VAR 0 8
53919: PUSH
53920: LD_INT 2
53922: ARRAY
53923: PUSH
53924: LD_VAR 0 13
53928: PUSH
53929: LD_INT 2
53931: PLUS
53932: GREATER
53933: OR
53934: PUSH
53935: LD_VAR 0 8
53939: PUSH
53940: LD_INT 2
53942: ARRAY
53943: PUSH
53944: LD_VAR 0 13
53948: PUSH
53949: LD_INT 2
53951: MINUS
53952: LESS
53953: OR
53954: PUSH
53955: LD_VAR 0 8
53959: PUSH
53960: LD_INT 3
53962: ARRAY
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 8
53969: PUSH
53970: LD_INT 9
53972: PUSH
53973: LD_INT 10
53975: PUSH
53976: LD_INT 11
53978: PUSH
53979: LD_INT 12
53981: PUSH
53982: LD_INT 13
53984: PUSH
53985: LD_INT 16
53987: PUSH
53988: LD_INT 17
53990: PUSH
53991: LD_INT 18
53993: PUSH
53994: LD_INT 19
53996: PUSH
53997: LD_INT 20
53999: PUSH
54000: LD_INT 21
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: IN
54018: NOT
54019: OR
54020: PUSH
54021: LD_VAR 0 8
54025: PUSH
54026: LD_INT 5
54028: ARRAY
54029: NOT
54030: OR
54031: PUSH
54032: LD_VAR 0 8
54036: PUSH
54037: LD_INT 6
54039: ARRAY
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 7
54049: PUSH
54050: LD_INT 9
54052: PUSH
54053: LD_INT 10
54055: PUSH
54056: LD_INT 11
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: IN
54067: NOT
54068: OR
54069: IFFALSE 54075
// exit ;
54071: POP
54072: POP
54073: GO 54158
// end ;
54075: GO 53746
54077: POP
54078: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54079: LD_VAR 0 9
54083: PPUSH
54084: LD_VAR 0 3
54088: PPUSH
54089: LD_VAR 0 4
54093: PPUSH
54094: LD_INT 20
54096: PPUSH
54097: CALL 46110 0 4
54101: PUSH
54102: LD_INT 4
54104: ARRAY
54105: IFFALSE 54109
// exit ;
54107: GO 54158
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54109: LD_VAR 0 2
54113: PUSH
54114: LD_INT 29
54116: PUSH
54117: LD_INT 30
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: IN
54124: PUSH
54125: LD_VAR 0 3
54129: PPUSH
54130: LD_VAR 0 4
54134: PPUSH
54135: LD_VAR 0 9
54139: PPUSH
54140: CALL_OW 440
54144: NOT
54145: AND
54146: IFFALSE 54150
// exit ;
54148: GO 54158
// result := true ;
54150: LD_ADDR_VAR 0 6
54154: PUSH
54155: LD_INT 1
54157: ST_TO_ADDR
// end ;
54158: LD_VAR 0 6
54162: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54163: LD_INT 0
54165: PPUSH
54166: PPUSH
54167: PPUSH
54168: PPUSH
54169: PPUSH
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
54174: PPUSH
54175: PPUSH
54176: PPUSH
54177: PPUSH
54178: PPUSH
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
54185: PPUSH
54186: PPUSH
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
54192: PPUSH
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
54222: PPUSH
// result = [ ] ;
54223: LD_ADDR_VAR 0 7
54227: PUSH
54228: EMPTY
54229: ST_TO_ADDR
// temp_list = [ ] ;
54230: LD_ADDR_VAR 0 9
54234: PUSH
54235: EMPTY
54236: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54237: LD_VAR 0 4
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 4
54256: PUSH
54257: LD_INT 5
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: IN
54268: NOT
54269: PUSH
54270: LD_VAR 0 1
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: IN
54285: PUSH
54286: LD_VAR 0 5
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: IN
54305: NOT
54306: AND
54307: OR
54308: IFFALSE 54312
// exit ;
54310: GO 72703
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54312: LD_VAR 0 1
54316: PUSH
54317: LD_INT 6
54319: PUSH
54320: LD_INT 7
54322: PUSH
54323: LD_INT 8
54325: PUSH
54326: LD_INT 13
54328: PUSH
54329: LD_INT 12
54331: PUSH
54332: LD_INT 15
54334: PUSH
54335: LD_INT 11
54337: PUSH
54338: LD_INT 14
54340: PUSH
54341: LD_INT 10
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: IN
54355: IFFALSE 54365
// btype = b_lab ;
54357: LD_ADDR_VAR 0 1
54361: PUSH
54362: LD_INT 6
54364: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54365: LD_VAR 0 6
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: IN
54384: NOT
54385: PUSH
54386: LD_VAR 0 1
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: LD_INT 6
54405: PUSH
54406: LD_INT 36
54408: PUSH
54409: LD_INT 4
54411: PUSH
54412: LD_INT 5
54414: PUSH
54415: LD_INT 31
54417: PUSH
54418: LD_INT 32
54420: PUSH
54421: LD_INT 33
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: IN
54437: NOT
54438: PUSH
54439: LD_VAR 0 6
54443: PUSH
54444: LD_INT 1
54446: EQUAL
54447: AND
54448: OR
54449: PUSH
54450: LD_VAR 0 1
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 3
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: IN
54465: NOT
54466: PUSH
54467: LD_VAR 0 6
54471: PUSH
54472: LD_INT 2
54474: EQUAL
54475: AND
54476: OR
54477: IFFALSE 54487
// mode = 0 ;
54479: LD_ADDR_VAR 0 6
54483: PUSH
54484: LD_INT 0
54486: ST_TO_ADDR
// case mode of 0 :
54487: LD_VAR 0 6
54491: PUSH
54492: LD_INT 0
54494: DOUBLE
54495: EQUAL
54496: IFTRUE 54500
54498: GO 65953
54500: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54501: LD_ADDR_VAR 0 11
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54694: LD_ADDR_VAR 0 12
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54890: LD_ADDR_VAR 0 13
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 3
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55089: LD_ADDR_VAR 0 14
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 3
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55285: LD_ADDR_VAR 0 15
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55478: LD_ADDR_VAR 0 16
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55671: LD_ADDR_VAR 0 17
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55901: LD_ADDR_VAR 0 18
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56131: LD_ADDR_VAR 0 19
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56361: LD_ADDR_VAR 0 20
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56591: LD_ADDR_VAR 0 21
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56821: LD_ADDR_VAR 0 22
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57051: LD_ADDR_VAR 0 23
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57331: LD_ADDR_VAR 0 24
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57607: LD_ADDR_VAR 0 25
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 3
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57881: LD_ADDR_VAR 0 26
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: LD_INT 3
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58157: LD_ADDR_VAR 0 27
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58437: LD_ADDR_VAR 0 28
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 3
58684: NEG
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58719: LD_ADDR_VAR 0 29
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58998: LD_ADDR_VAR 0 30
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 3
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59276: LD_ADDR_VAR 0 31
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 3
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59554: LD_ADDR_VAR 0 32
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 3
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59832: LD_ADDR_VAR 0 33
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 3
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60111: LD_ADDR_VAR 0 34
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: LD_INT 2
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60391: LD_ADDR_VAR 0 35
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60503: LD_ADDR_VAR 0 36
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60615: LD_ADDR_VAR 0 37
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60727: LD_ADDR_VAR 0 38
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60839: LD_ADDR_VAR 0 39
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60951: LD_ADDR_VAR 0 40
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61063: LD_ADDR_VAR 0 41
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61413: LD_ADDR_VAR 0 42
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: LD_INT 3
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 3
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 3
61722: NEG
61723: PUSH
61724: LD_INT 3
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61763: LD_ADDR_VAR 0 43
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 3
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 3
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 2
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: NEG
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62111: LD_ADDR_VAR 0 44
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 3
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 3
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: LD_INT 3
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 3
62385: NEG
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 3
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62461: LD_ADDR_VAR 0 45
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 2
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 3
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 3
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 3
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 3
62707: PUSH
62708: LD_INT 3
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: LD_INT 3
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 3
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: LD_INT 3
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62811: LD_ADDR_VAR 0 46
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 2
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 3
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 3
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: NEG
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 3
63107: NEG
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 3
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63159: LD_ADDR_VAR 0 47
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63310: LD_ADDR_VAR 0 48
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63457: LD_ADDR_VAR 0 49
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 2
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63601: LD_ADDR_VAR 0 50
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 2
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63745: LD_ADDR_VAR 0 51
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 2
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 2
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63892: LD_ADDR_VAR 0 52
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 1
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: LD_INT 2
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64043: LD_ADDR_VAR 0 53
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: LD_INT 1
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: LD_INT 2
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: NEG
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64273: LD_ADDR_VAR 0 54
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: LD_INT 1
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: LD_INT 2
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 2
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 2
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 2
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: NEG
64473: PUSH
64474: LD_INT 2
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64503: LD_ADDR_VAR 0 55
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 2
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 2
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: NEG
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 2
64702: NEG
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64733: LD_ADDR_VAR 0 56
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 2
64932: NEG
64933: PUSH
64934: LD_INT 2
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64963: LD_ADDR_VAR 0 57
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: LD_INT 2
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: LD_INT 2
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 2
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: LD_INT 1
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: LD_INT 2
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65193: LD_ADDR_VAR 0 58
65197: PUSH
65198: LD_INT 0
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: LD_INT 1
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: LD_INT 2
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: PUSH
65298: LD_INT 1
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 2
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: NEG
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: LD_INT 2
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65423: LD_ADDR_VAR 0 59
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65511: LD_ADDR_VAR 0 60
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65599: LD_ADDR_VAR 0 61
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: NEG
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: LD_INT 1
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65687: LD_ADDR_VAR 0 62
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 1
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65775: LD_ADDR_VAR 0 63
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65863: LD_ADDR_VAR 0 64
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 1
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: ST_TO_ADDR
// end ; 1 :
65951: GO 71848
65953: LD_INT 1
65955: DOUBLE
65956: EQUAL
65957: IFTRUE 65961
65959: GO 68584
65961: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65962: LD_ADDR_VAR 0 11
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 3
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: LD_INT 3
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66006: LD_ADDR_VAR 0 12
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: LIST
66046: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66047: LD_ADDR_VAR 0 13
66051: PUSH
66052: LD_INT 3
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 3
66064: PUSH
66065: LD_INT 3
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: LD_INT 3
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66087: LD_ADDR_VAR 0 14
66091: PUSH
66092: LD_INT 1
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 3
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: LIST
66127: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66128: LD_ADDR_VAR 0 15
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 3
66146: NEG
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66172: LD_ADDR_VAR 0 16
66176: PUSH
66177: LD_INT 2
66179: NEG
66180: PUSH
66181: LD_INT 3
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: LD_INT 2
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 3
66203: NEG
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66218: LD_ADDR_VAR 0 17
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: LD_INT 3
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66262: LD_ADDR_VAR 0 18
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 1
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 3
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66303: LD_ADDR_VAR 0 19
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 3
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 2
66330: PUSH
66331: LD_INT 3
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66343: LD_ADDR_VAR 0 20
66347: PUSH
66348: LD_INT 1
66350: PUSH
66351: LD_INT 3
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: LD_INT 3
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66384: LD_ADDR_VAR 0 21
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 3
66402: NEG
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 3
66413: NEG
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66428: LD_ADDR_VAR 0 22
66432: PUSH
66433: LD_INT 2
66435: NEG
66436: PUSH
66437: LD_INT 3
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 3
66447: NEG
66448: PUSH
66449: LD_INT 2
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 3
66459: NEG
66460: PUSH
66461: LD_INT 3
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: LIST
66473: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66474: LD_ADDR_VAR 0 23
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: LD_INT 4
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66518: LD_ADDR_VAR 0 24
66522: PUSH
66523: LD_INT 3
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 3
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: LIST
66558: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66559: LD_ADDR_VAR 0 25
66563: PUSH
66564: LD_INT 3
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: LD_INT 4
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66599: LD_ADDR_VAR 0 26
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66640: LD_ADDR_VAR 0 27
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 3
66658: NEG
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 4
66669: NEG
66670: PUSH
66671: LD_INT 1
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: LIST
66683: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66684: LD_ADDR_VAR 0 28
66688: PUSH
66689: LD_INT 3
66691: NEG
66692: PUSH
66693: LD_INT 3
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: LD_INT 4
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 4
66715: NEG
66716: PUSH
66717: LD_INT 3
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66730: LD_ADDR_VAR 0 29
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: LD_INT 3
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: LD_INT 3
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: LD_INT 2
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: PUSH
66773: LD_INT 4
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: LD_INT 4
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: LD_INT 3
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: LD_INT 5
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 5
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: LD_INT 4
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: NEG
66840: PUSH
66841: LD_INT 6
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: LD_INT 6
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: LD_INT 5
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66885: LD_ADDR_VAR 0 30
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 3
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 3
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 4
66954: PUSH
66955: LD_INT 1
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 5
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 5
66975: PUSH
66976: LD_INT 1
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 5
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 6
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 6
67006: PUSH
67007: LD_INT 1
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67028: LD_ADDR_VAR 0 31
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: LD_INT 2
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 3
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: LD_INT 3
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 4
67065: PUSH
67066: LD_INT 3
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 4
67075: PUSH
67076: LD_INT 4
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 3
67085: PUSH
67086: LD_INT 4
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 5
67095: PUSH
67096: LD_INT 4
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 5
67105: PUSH
67106: LD_INT 5
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 4
67115: PUSH
67116: LD_INT 5
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 6
67125: PUSH
67126: LD_INT 5
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 6
67135: PUSH
67136: LD_INT 6
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: LD_INT 6
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67167: LD_ADDR_VAR 0 32
67171: PUSH
67172: LD_INT 1
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: PUSH
67206: LD_INT 4
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 4
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: NEG
67226: PUSH
67227: LD_INT 3
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: LD_INT 5
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_INT 5
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: LD_INT 4
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 6
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: LD_INT 6
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 5
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67310: LD_ADDR_VAR 0 33
67314: PUSH
67315: LD_INT 2
67317: NEG
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 3
67328: NEG
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 3
67351: NEG
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 4
67362: NEG
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 4
67373: NEG
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 5
67396: NEG
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 5
67407: NEG
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 5
67419: NEG
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 6
67430: NEG
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 6
67441: NEG
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67465: LD_ADDR_VAR 0 34
67469: PUSH
67470: LD_INT 2
67472: NEG
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 3
67484: NEG
67485: PUSH
67486: LD_INT 2
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 3
67496: NEG
67497: PUSH
67498: LD_INT 3
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 3
67508: NEG
67509: PUSH
67510: LD_INT 4
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 4
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 4
67532: NEG
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 4
67544: NEG
67545: PUSH
67546: LD_INT 5
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 5
67556: NEG
67557: PUSH
67558: LD_INT 4
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 5
67568: NEG
67569: PUSH
67570: LD_INT 5
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 5
67580: NEG
67581: PUSH
67582: LD_INT 6
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 6
67592: NEG
67593: PUSH
67594: LD_INT 5
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 6
67604: NEG
67605: PUSH
67606: LD_INT 6
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67628: LD_ADDR_VAR 0 41
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: LD_INT 2
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 2
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: LIST
67671: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67672: LD_ADDR_VAR 0 42
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: LD_INT 1
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: LIST
67712: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67713: LD_ADDR_VAR 0 43
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 3
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: LIST
67752: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67753: LD_ADDR_VAR 0 44
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: LD_INT 2
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 1
67780: NEG
67781: PUSH
67782: LD_INT 2
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67794: LD_ADDR_VAR 0 45
67798: PUSH
67799: LD_INT 2
67801: NEG
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: LD_INT 1
67827: NEG
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: LIST
67837: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67838: LD_ADDR_VAR 0 46
67842: PUSH
67843: LD_INT 2
67845: NEG
67846: PUSH
67847: LD_INT 2
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: LD_INT 3
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: LD_INT 2
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: LIST
67883: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67884: LD_ADDR_VAR 0 47
67888: PUSH
67889: LD_INT 2
67891: NEG
67892: PUSH
67893: LD_INT 3
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: NEG
67904: PUSH
67905: LD_INT 3
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67917: LD_ADDR_VAR 0 48
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: LD_INT 1
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67948: LD_ADDR_VAR 0 49
67952: PUSH
67953: LD_INT 3
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: LD_INT 2
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67977: LD_ADDR_VAR 0 50
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: LD_INT 3
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 1
67994: PUSH
67995: LD_INT 3
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68006: LD_ADDR_VAR 0 51
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 2
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 2
68024: NEG
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68037: LD_ADDR_VAR 0 52
68041: PUSH
68042: LD_INT 3
68044: NEG
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 3
68056: NEG
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68070: LD_ADDR_VAR 0 53
68074: PUSH
68075: LD_INT 1
68077: NEG
68078: PUSH
68079: LD_INT 3
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_INT 3
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: LD_INT 2
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68114: LD_ADDR_VAR 0 54
68118: PUSH
68119: LD_INT 2
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: LIST
68154: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68155: LD_ADDR_VAR 0 55
68159: PUSH
68160: LD_INT 3
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 3
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 2
68182: PUSH
68183: LD_INT 3
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68195: LD_ADDR_VAR 0 56
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 3
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: LD_INT 2
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: LIST
68235: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68236: LD_ADDR_VAR 0 57
68240: PUSH
68241: LD_INT 2
68243: NEG
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 3
68254: NEG
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 3
68265: NEG
68266: PUSH
68267: LD_INT 1
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68280: LD_ADDR_VAR 0 58
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: LD_INT 3
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 3
68299: NEG
68300: PUSH
68301: LD_INT 2
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: LD_INT 3
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68326: LD_ADDR_VAR 0 59
68330: PUSH
68331: LD_INT 1
68333: NEG
68334: PUSH
68335: LD_INT 2
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: LD_INT 2
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68370: LD_ADDR_VAR 0 60
68374: PUSH
68375: LD_INT 1
68377: PUSH
68378: LD_INT 1
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 2
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 2
68398: PUSH
68399: LD_INT 1
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68411: LD_ADDR_VAR 0 61
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68451: LD_ADDR_VAR 0 62
68455: PUSH
68456: LD_INT 1
68458: PUSH
68459: LD_INT 2
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 0
68468: PUSH
68469: LD_INT 2
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 1
68478: NEG
68479: PUSH
68480: LD_INT 1
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: LIST
68491: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68492: LD_ADDR_VAR 0 63
68496: PUSH
68497: LD_INT 1
68499: NEG
68500: PUSH
68501: LD_INT 1
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 2
68510: NEG
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: NEG
68522: PUSH
68523: LD_INT 1
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68536: LD_ADDR_VAR 0 64
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 2
68555: NEG
68556: PUSH
68557: LD_INT 1
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 2
68567: NEG
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: LIST
68581: ST_TO_ADDR
// end ; 2 :
68582: GO 71848
68584: LD_INT 2
68586: DOUBLE
68587: EQUAL
68588: IFTRUE 68592
68590: GO 71847
68592: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68593: LD_ADDR_VAR 0 29
68597: PUSH
68598: LD_INT 4
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 4
68610: PUSH
68611: LD_INT 1
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 5
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 5
68631: PUSH
68632: LD_INT 1
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 4
68641: PUSH
68642: LD_INT 1
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 3
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: LD_INT 1
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 3
68672: PUSH
68673: LD_INT 2
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 5
68683: PUSH
68684: LD_INT 2
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: LD_INT 3
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 3
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 4
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 4
68723: PUSH
68724: LD_INT 4
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: PUSH
68734: LD_INT 4
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 2
68753: PUSH
68754: LD_INT 2
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 4
68763: PUSH
68764: LD_INT 2
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 2
68773: PUSH
68774: LD_INT 4
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: LD_INT 4
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 1
68803: PUSH
68804: LD_INT 4
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: LD_INT 5
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: LD_INT 5
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: LD_INT 4
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 1
68844: NEG
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: LD_INT 5
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 2
68865: NEG
68866: PUSH
68867: LD_INT 3
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 3
68876: NEG
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 3
68887: NEG
68888: PUSH
68889: LD_INT 1
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 2
68899: NEG
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 2
68910: NEG
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 3
68921: NEG
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 4
68943: NEG
68944: PUSH
68945: LD_INT 1
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 4
68955: NEG
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: LD_INT 2
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 4
68978: NEG
68979: PUSH
68980: LD_INT 4
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 4
68990: NEG
68991: PUSH
68992: LD_INT 5
68994: NEG
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: LD_INT 4
69006: NEG
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 3
69014: NEG
69015: PUSH
69016: LD_INT 3
69018: NEG
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 5
69038: NEG
69039: PUSH
69040: LD_INT 4
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 5
69050: NEG
69051: PUSH
69052: LD_INT 5
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 3
69062: NEG
69063: PUSH
69064: LD_INT 5
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 5
69074: NEG
69075: PUSH
69076: LD_INT 3
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69131: LD_ADDR_VAR 0 30
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 4
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 5
69158: PUSH
69159: LD_INT 4
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 5
69168: PUSH
69169: LD_INT 5
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 4
69178: PUSH
69179: LD_INT 5
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: LD_INT 4
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: LD_INT 3
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 5
69208: PUSH
69209: LD_INT 3
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 3
69218: PUSH
69219: LD_INT 5
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 0
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: LD_INT 3
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 1
69258: PUSH
69259: LD_INT 4
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: LD_INT 4
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 1
69278: NEG
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 1
69289: NEG
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 2
69300: PUSH
69301: LD_INT 4
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: LD_INT 2
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 4
69321: NEG
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 4
69332: NEG
69333: PUSH
69334: LD_INT 1
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 3
69344: NEG
69345: PUSH
69346: LD_INT 0
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 3
69355: NEG
69356: PUSH
69357: LD_INT 1
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 4
69366: NEG
69367: PUSH
69368: LD_INT 1
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 5
69377: NEG
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 5
69388: NEG
69389: PUSH
69390: LD_INT 1
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 5
69400: NEG
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 3
69412: NEG
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 3
69423: NEG
69424: PUSH
69425: LD_INT 3
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: LD_INT 4
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: LD_INT 3
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 2
69459: NEG
69460: PUSH
69461: LD_INT 2
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 3
69471: NEG
69472: PUSH
69473: LD_INT 2
69475: NEG
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 4
69483: NEG
69484: PUSH
69485: LD_INT 3
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 4
69495: NEG
69496: PUSH
69497: LD_INT 4
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 2
69507: NEG
69508: PUSH
69509: LD_INT 4
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 4
69519: NEG
69520: PUSH
69521: LD_INT 2
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 0
69531: PUSH
69532: LD_INT 4
69534: NEG
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 0
69542: PUSH
69543: LD_INT 5
69545: NEG
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: LD_INT 4
69556: NEG
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 1
69564: PUSH
69565: LD_INT 3
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: LD_INT 3
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: LD_INT 4
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: NEG
69599: PUSH
69600: LD_INT 5
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: LD_INT 3
69613: NEG
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 2
69621: NEG
69622: PUSH
69623: LD_INT 5
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69678: LD_ADDR_VAR 0 31
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_INT 4
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: LD_INT 4
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: LD_INT 5
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: LD_INT 5
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 1
69735: NEG
69736: PUSH
69737: LD_INT 4
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 1
69746: NEG
69747: PUSH
69748: LD_INT 3
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 2
69757: PUSH
69758: LD_INT 5
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 2
69767: NEG
69768: PUSH
69769: LD_INT 3
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 3
69778: NEG
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: LD_INT 1
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 2
69801: NEG
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 2
69812: NEG
69813: PUSH
69814: LD_INT 1
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: LD_INT 1
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 4
69834: NEG
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 4
69845: NEG
69846: PUSH
69847: LD_INT 1
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 4
69857: NEG
69858: PUSH
69859: LD_INT 2
69861: NEG
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 2
69869: NEG
69870: PUSH
69871: LD_INT 2
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 4
69880: NEG
69881: PUSH
69882: LD_INT 4
69884: NEG
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 4
69892: NEG
69893: PUSH
69894: LD_INT 5
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 3
69904: NEG
69905: PUSH
69906: LD_INT 4
69908: NEG
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 3
69916: NEG
69917: PUSH
69918: LD_INT 3
69920: NEG
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 4
69928: NEG
69929: PUSH
69930: LD_INT 3
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 5
69940: NEG
69941: PUSH
69942: LD_INT 4
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 5
69952: NEG
69953: PUSH
69954: LD_INT 5
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 3
69964: NEG
69965: PUSH
69966: LD_INT 5
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 5
69976: NEG
69977: PUSH
69978: LD_INT 3
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: LD_INT 3
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: LD_INT 4
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: LD_INT 3
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 1
70021: PUSH
70022: LD_INT 2
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: LD_INT 2
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 1
70043: NEG
70044: PUSH
70045: LD_INT 3
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: LD_INT 4
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: LD_INT 2
70070: NEG
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 2
70078: NEG
70079: PUSH
70080: LD_INT 4
70082: NEG
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 4
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 4
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 5
70111: PUSH
70112: LD_INT 0
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 5
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: LD_INT 1
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 3
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: LD_INT 1
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: LD_INT 2
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 5
70173: PUSH
70174: LD_INT 2
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70228: LD_ADDR_VAR 0 32
70232: PUSH
70233: LD_INT 4
70235: NEG
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 4
70246: NEG
70247: PUSH
70248: LD_INT 1
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 3
70258: NEG
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 3
70269: NEG
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 4
70280: NEG
70281: PUSH
70282: LD_INT 1
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 5
70291: NEG
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 5
70302: NEG
70303: PUSH
70304: LD_INT 1
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 5
70314: NEG
70315: PUSH
70316: LD_INT 2
70318: NEG
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 3
70326: NEG
70327: PUSH
70328: LD_INT 2
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 3
70337: NEG
70338: PUSH
70339: LD_INT 3
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 3
70349: NEG
70350: PUSH
70351: LD_INT 4
70353: NEG
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 2
70361: NEG
70362: PUSH
70363: LD_INT 3
70365: NEG
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 2
70373: NEG
70374: PUSH
70375: LD_INT 2
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 3
70385: NEG
70386: PUSH
70387: LD_INT 2
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 4
70397: NEG
70398: PUSH
70399: LD_INT 3
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 4
70409: NEG
70410: PUSH
70411: LD_INT 4
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 2
70421: NEG
70422: PUSH
70423: LD_INT 4
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 4
70433: NEG
70434: PUSH
70435: LD_INT 2
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: LD_INT 4
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: LD_INT 5
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: LD_INT 4
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 1
70478: PUSH
70479: LD_INT 3
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: LD_INT 3
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 1
70512: NEG
70513: PUSH
70514: LD_INT 5
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 2
70524: PUSH
70525: LD_INT 3
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 2
70535: NEG
70536: PUSH
70537: LD_INT 5
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 3
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 3
70557: PUSH
70558: LD_INT 1
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 4
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: LD_INT 1
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 2
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 2
70608: PUSH
70609: LD_INT 1
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 2
70619: PUSH
70620: LD_INT 2
70622: NEG
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 4
70630: PUSH
70631: LD_INT 2
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 4
70640: PUSH
70641: LD_INT 4
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 4
70650: PUSH
70651: LD_INT 3
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 5
70660: PUSH
70661: LD_INT 4
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 5
70670: PUSH
70671: LD_INT 5
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 4
70680: PUSH
70681: LD_INT 5
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 3
70690: PUSH
70691: LD_INT 4
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 3
70700: PUSH
70701: LD_INT 3
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 5
70710: PUSH
70711: LD_INT 3
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 3
70720: PUSH
70721: LD_INT 5
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70775: LD_ADDR_VAR 0 33
70779: PUSH
70780: LD_INT 4
70782: NEG
70783: PUSH
70784: LD_INT 4
70786: NEG
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 4
70794: NEG
70795: PUSH
70796: LD_INT 5
70798: NEG
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 3
70806: NEG
70807: PUSH
70808: LD_INT 4
70810: NEG
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: LD_INT 3
70822: NEG
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 4
70830: NEG
70831: PUSH
70832: LD_INT 3
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 5
70842: NEG
70843: PUSH
70844: LD_INT 4
70846: NEG
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 5
70854: NEG
70855: PUSH
70856: LD_INT 5
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 3
70866: NEG
70867: PUSH
70868: LD_INT 5
70870: NEG
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 5
70878: NEG
70879: PUSH
70880: LD_INT 3
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 0
70890: PUSH
70891: LD_INT 3
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: LD_INT 4
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 1
70912: PUSH
70913: LD_INT 3
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 1
70923: PUSH
70924: LD_INT 2
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 2
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: LD_INT 3
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 1
70957: NEG
70958: PUSH
70959: LD_INT 4
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 2
70969: PUSH
70970: LD_INT 2
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 2
70980: NEG
70981: PUSH
70982: LD_INT 4
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 4
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 4
71002: PUSH
71003: LD_INT 1
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 5
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 5
71023: PUSH
71024: LD_INT 1
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 4
71033: PUSH
71034: LD_INT 1
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 3
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 3
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 3
71064: PUSH
71065: LD_INT 2
71067: NEG
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 5
71075: PUSH
71076: LD_INT 2
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 3
71085: PUSH
71086: LD_INT 3
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 3
71095: PUSH
71096: LD_INT 2
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 4
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 4
71115: PUSH
71116: LD_INT 4
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 3
71125: PUSH
71126: LD_INT 4
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 2
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 2
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 4
71155: PUSH
71156: LD_INT 2
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 2
71165: PUSH
71166: LD_INT 4
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 0
71175: PUSH
71176: LD_INT 4
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: LD_INT 3
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: LD_INT 4
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 1
71205: PUSH
71206: LD_INT 5
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 0
71215: PUSH
71216: LD_INT 5
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: NEG
71226: PUSH
71227: LD_INT 4
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 1
71236: NEG
71237: PUSH
71238: LD_INT 3
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 2
71247: PUSH
71248: LD_INT 5
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 2
71257: NEG
71258: PUSH
71259: LD_INT 3
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71313: LD_ADDR_VAR 0 34
71317: PUSH
71318: LD_INT 0
71320: PUSH
71321: LD_INT 4
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: LD_INT 5
71334: NEG
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 1
71342: PUSH
71343: LD_INT 4
71345: NEG
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 1
71353: PUSH
71354: LD_INT 3
71356: NEG
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 0
71364: PUSH
71365: LD_INT 3
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 1
71375: NEG
71376: PUSH
71377: LD_INT 4
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 1
71387: NEG
71388: PUSH
71389: LD_INT 5
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 2
71399: PUSH
71400: LD_INT 3
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 2
71410: NEG
71411: PUSH
71412: LD_INT 5
71414: NEG
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 3
71422: PUSH
71423: LD_INT 0
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 3
71432: PUSH
71433: LD_INT 1
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 4
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 4
71453: PUSH
71454: LD_INT 1
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 2
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: PUSH
71484: LD_INT 1
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 2
71494: PUSH
71495: LD_INT 2
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 4
71505: PUSH
71506: LD_INT 2
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: LD_INT 4
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 4
71525: PUSH
71526: LD_INT 3
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 5
71535: PUSH
71536: LD_INT 4
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 5
71545: PUSH
71546: LD_INT 5
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 4
71555: PUSH
71556: LD_INT 5
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 3
71565: PUSH
71566: LD_INT 4
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 3
71575: PUSH
71576: LD_INT 3
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 5
71585: PUSH
71586: LD_INT 3
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 3
71595: PUSH
71596: LD_INT 5
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 0
71605: PUSH
71606: LD_INT 3
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: LD_INT 2
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 1
71625: PUSH
71626: LD_INT 3
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 1
71635: PUSH
71636: LD_INT 4
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 0
71645: PUSH
71646: LD_INT 4
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 1
71655: NEG
71656: PUSH
71657: LD_INT 3
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 1
71666: NEG
71667: PUSH
71668: LD_INT 2
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 2
71677: PUSH
71678: LD_INT 4
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 4
71698: NEG
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 4
71709: NEG
71710: PUSH
71711: LD_INT 1
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 3
71721: NEG
71722: PUSH
71723: LD_INT 0
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 3
71732: NEG
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 4
71743: NEG
71744: PUSH
71745: LD_INT 1
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 5
71754: NEG
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 5
71765: NEG
71766: PUSH
71767: LD_INT 1
71769: NEG
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 5
71777: NEG
71778: PUSH
71779: LD_INT 2
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 3
71789: NEG
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: ST_TO_ADDR
// end ; end ;
71845: GO 71848
71847: POP
// case btype of b_depot , b_warehouse :
71848: LD_VAR 0 1
71852: PUSH
71853: LD_INT 0
71855: DOUBLE
71856: EQUAL
71857: IFTRUE 71867
71859: LD_INT 1
71861: DOUBLE
71862: EQUAL
71863: IFTRUE 71867
71865: GO 72068
71867: POP
// case nation of nation_american :
71868: LD_VAR 0 5
71872: PUSH
71873: LD_INT 1
71875: DOUBLE
71876: EQUAL
71877: IFTRUE 71881
71879: GO 71937
71881: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71882: LD_ADDR_VAR 0 9
71886: PUSH
71887: LD_VAR 0 11
71891: PUSH
71892: LD_VAR 0 12
71896: PUSH
71897: LD_VAR 0 13
71901: PUSH
71902: LD_VAR 0 14
71906: PUSH
71907: LD_VAR 0 15
71911: PUSH
71912: LD_VAR 0 16
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: PUSH
71925: LD_VAR 0 4
71929: PUSH
71930: LD_INT 1
71932: PLUS
71933: ARRAY
71934: ST_TO_ADDR
71935: GO 72066
71937: LD_INT 2
71939: DOUBLE
71940: EQUAL
71941: IFTRUE 71945
71943: GO 72001
71945: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71946: LD_ADDR_VAR 0 9
71950: PUSH
71951: LD_VAR 0 17
71955: PUSH
71956: LD_VAR 0 18
71960: PUSH
71961: LD_VAR 0 19
71965: PUSH
71966: LD_VAR 0 20
71970: PUSH
71971: LD_VAR 0 21
71975: PUSH
71976: LD_VAR 0 22
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: PUSH
71989: LD_VAR 0 4
71993: PUSH
71994: LD_INT 1
71996: PLUS
71997: ARRAY
71998: ST_TO_ADDR
71999: GO 72066
72001: LD_INT 3
72003: DOUBLE
72004: EQUAL
72005: IFTRUE 72009
72007: GO 72065
72009: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72010: LD_ADDR_VAR 0 9
72014: PUSH
72015: LD_VAR 0 23
72019: PUSH
72020: LD_VAR 0 24
72024: PUSH
72025: LD_VAR 0 25
72029: PUSH
72030: LD_VAR 0 26
72034: PUSH
72035: LD_VAR 0 27
72039: PUSH
72040: LD_VAR 0 28
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: PUSH
72053: LD_VAR 0 4
72057: PUSH
72058: LD_INT 1
72060: PLUS
72061: ARRAY
72062: ST_TO_ADDR
72063: GO 72066
72065: POP
72066: GO 72621
72068: LD_INT 2
72070: DOUBLE
72071: EQUAL
72072: IFTRUE 72082
72074: LD_INT 3
72076: DOUBLE
72077: EQUAL
72078: IFTRUE 72082
72080: GO 72138
72082: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72083: LD_ADDR_VAR 0 9
72087: PUSH
72088: LD_VAR 0 29
72092: PUSH
72093: LD_VAR 0 30
72097: PUSH
72098: LD_VAR 0 31
72102: PUSH
72103: LD_VAR 0 32
72107: PUSH
72108: LD_VAR 0 33
72112: PUSH
72113: LD_VAR 0 34
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: PUSH
72126: LD_VAR 0 4
72130: PUSH
72131: LD_INT 1
72133: PLUS
72134: ARRAY
72135: ST_TO_ADDR
72136: GO 72621
72138: LD_INT 16
72140: DOUBLE
72141: EQUAL
72142: IFTRUE 72200
72144: LD_INT 17
72146: DOUBLE
72147: EQUAL
72148: IFTRUE 72200
72150: LD_INT 18
72152: DOUBLE
72153: EQUAL
72154: IFTRUE 72200
72156: LD_INT 19
72158: DOUBLE
72159: EQUAL
72160: IFTRUE 72200
72162: LD_INT 22
72164: DOUBLE
72165: EQUAL
72166: IFTRUE 72200
72168: LD_INT 20
72170: DOUBLE
72171: EQUAL
72172: IFTRUE 72200
72174: LD_INT 21
72176: DOUBLE
72177: EQUAL
72178: IFTRUE 72200
72180: LD_INT 23
72182: DOUBLE
72183: EQUAL
72184: IFTRUE 72200
72186: LD_INT 24
72188: DOUBLE
72189: EQUAL
72190: IFTRUE 72200
72192: LD_INT 25
72194: DOUBLE
72195: EQUAL
72196: IFTRUE 72200
72198: GO 72256
72200: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72201: LD_ADDR_VAR 0 9
72205: PUSH
72206: LD_VAR 0 35
72210: PUSH
72211: LD_VAR 0 36
72215: PUSH
72216: LD_VAR 0 37
72220: PUSH
72221: LD_VAR 0 38
72225: PUSH
72226: LD_VAR 0 39
72230: PUSH
72231: LD_VAR 0 40
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: PUSH
72244: LD_VAR 0 4
72248: PUSH
72249: LD_INT 1
72251: PLUS
72252: ARRAY
72253: ST_TO_ADDR
72254: GO 72621
72256: LD_INT 6
72258: DOUBLE
72259: EQUAL
72260: IFTRUE 72312
72262: LD_INT 7
72264: DOUBLE
72265: EQUAL
72266: IFTRUE 72312
72268: LD_INT 8
72270: DOUBLE
72271: EQUAL
72272: IFTRUE 72312
72274: LD_INT 13
72276: DOUBLE
72277: EQUAL
72278: IFTRUE 72312
72280: LD_INT 12
72282: DOUBLE
72283: EQUAL
72284: IFTRUE 72312
72286: LD_INT 15
72288: DOUBLE
72289: EQUAL
72290: IFTRUE 72312
72292: LD_INT 11
72294: DOUBLE
72295: EQUAL
72296: IFTRUE 72312
72298: LD_INT 14
72300: DOUBLE
72301: EQUAL
72302: IFTRUE 72312
72304: LD_INT 10
72306: DOUBLE
72307: EQUAL
72308: IFTRUE 72312
72310: GO 72368
72312: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72313: LD_ADDR_VAR 0 9
72317: PUSH
72318: LD_VAR 0 41
72322: PUSH
72323: LD_VAR 0 42
72327: PUSH
72328: LD_VAR 0 43
72332: PUSH
72333: LD_VAR 0 44
72337: PUSH
72338: LD_VAR 0 45
72342: PUSH
72343: LD_VAR 0 46
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: PUSH
72356: LD_VAR 0 4
72360: PUSH
72361: LD_INT 1
72363: PLUS
72364: ARRAY
72365: ST_TO_ADDR
72366: GO 72621
72368: LD_INT 36
72370: DOUBLE
72371: EQUAL
72372: IFTRUE 72376
72374: GO 72432
72376: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72377: LD_ADDR_VAR 0 9
72381: PUSH
72382: LD_VAR 0 47
72386: PUSH
72387: LD_VAR 0 48
72391: PUSH
72392: LD_VAR 0 49
72396: PUSH
72397: LD_VAR 0 50
72401: PUSH
72402: LD_VAR 0 51
72406: PUSH
72407: LD_VAR 0 52
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: PUSH
72420: LD_VAR 0 4
72424: PUSH
72425: LD_INT 1
72427: PLUS
72428: ARRAY
72429: ST_TO_ADDR
72430: GO 72621
72432: LD_INT 4
72434: DOUBLE
72435: EQUAL
72436: IFTRUE 72458
72438: LD_INT 5
72440: DOUBLE
72441: EQUAL
72442: IFTRUE 72458
72444: LD_INT 34
72446: DOUBLE
72447: EQUAL
72448: IFTRUE 72458
72450: LD_INT 37
72452: DOUBLE
72453: EQUAL
72454: IFTRUE 72458
72456: GO 72514
72458: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72459: LD_ADDR_VAR 0 9
72463: PUSH
72464: LD_VAR 0 53
72468: PUSH
72469: LD_VAR 0 54
72473: PUSH
72474: LD_VAR 0 55
72478: PUSH
72479: LD_VAR 0 56
72483: PUSH
72484: LD_VAR 0 57
72488: PUSH
72489: LD_VAR 0 58
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: PUSH
72502: LD_VAR 0 4
72506: PUSH
72507: LD_INT 1
72509: PLUS
72510: ARRAY
72511: ST_TO_ADDR
72512: GO 72621
72514: LD_INT 31
72516: DOUBLE
72517: EQUAL
72518: IFTRUE 72564
72520: LD_INT 32
72522: DOUBLE
72523: EQUAL
72524: IFTRUE 72564
72526: LD_INT 33
72528: DOUBLE
72529: EQUAL
72530: IFTRUE 72564
72532: LD_INT 27
72534: DOUBLE
72535: EQUAL
72536: IFTRUE 72564
72538: LD_INT 26
72540: DOUBLE
72541: EQUAL
72542: IFTRUE 72564
72544: LD_INT 28
72546: DOUBLE
72547: EQUAL
72548: IFTRUE 72564
72550: LD_INT 29
72552: DOUBLE
72553: EQUAL
72554: IFTRUE 72564
72556: LD_INT 30
72558: DOUBLE
72559: EQUAL
72560: IFTRUE 72564
72562: GO 72620
72564: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72565: LD_ADDR_VAR 0 9
72569: PUSH
72570: LD_VAR 0 59
72574: PUSH
72575: LD_VAR 0 60
72579: PUSH
72580: LD_VAR 0 61
72584: PUSH
72585: LD_VAR 0 62
72589: PUSH
72590: LD_VAR 0 63
72594: PUSH
72595: LD_VAR 0 64
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: PUSH
72608: LD_VAR 0 4
72612: PUSH
72613: LD_INT 1
72615: PLUS
72616: ARRAY
72617: ST_TO_ADDR
72618: GO 72621
72620: POP
// temp_list2 = [ ] ;
72621: LD_ADDR_VAR 0 10
72625: PUSH
72626: EMPTY
72627: ST_TO_ADDR
// for i in temp_list do
72628: LD_ADDR_VAR 0 8
72632: PUSH
72633: LD_VAR 0 9
72637: PUSH
72638: FOR_IN
72639: IFFALSE 72691
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72641: LD_ADDR_VAR 0 10
72645: PUSH
72646: LD_VAR 0 10
72650: PUSH
72651: LD_VAR 0 8
72655: PUSH
72656: LD_INT 1
72658: ARRAY
72659: PUSH
72660: LD_VAR 0 2
72664: PLUS
72665: PUSH
72666: LD_VAR 0 8
72670: PUSH
72671: LD_INT 2
72673: ARRAY
72674: PUSH
72675: LD_VAR 0 3
72679: PLUS
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: EMPTY
72686: LIST
72687: ADD
72688: ST_TO_ADDR
72689: GO 72638
72691: POP
72692: POP
// result = temp_list2 ;
72693: LD_ADDR_VAR 0 7
72697: PUSH
72698: LD_VAR 0 10
72702: ST_TO_ADDR
// end ;
72703: LD_VAR 0 7
72707: RET
// export function EnemyInRange ( unit , dist ) ; begin
72708: LD_INT 0
72710: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72711: LD_ADDR_VAR 0 3
72715: PUSH
72716: LD_VAR 0 1
72720: PPUSH
72721: CALL_OW 255
72725: PPUSH
72726: LD_VAR 0 1
72730: PPUSH
72731: CALL_OW 250
72735: PPUSH
72736: LD_VAR 0 1
72740: PPUSH
72741: CALL_OW 251
72745: PPUSH
72746: LD_VAR 0 2
72750: PPUSH
72751: CALL 46110 0 4
72755: PUSH
72756: LD_INT 4
72758: ARRAY
72759: ST_TO_ADDR
// end ;
72760: LD_VAR 0 3
72764: RET
// export function PlayerSeeMe ( unit ) ; begin
72765: LD_INT 0
72767: PPUSH
// result := See ( your_side , unit ) ;
72768: LD_ADDR_VAR 0 2
72772: PUSH
72773: LD_OWVAR 2
72777: PPUSH
72778: LD_VAR 0 1
72782: PPUSH
72783: CALL_OW 292
72787: ST_TO_ADDR
// end ;
72788: LD_VAR 0 2
72792: RET
// export function ReverseDir ( unit ) ; begin
72793: LD_INT 0
72795: PPUSH
// if not unit then
72796: LD_VAR 0 1
72800: NOT
72801: IFFALSE 72805
// exit ;
72803: GO 72828
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72805: LD_ADDR_VAR 0 2
72809: PUSH
72810: LD_VAR 0 1
72814: PPUSH
72815: CALL_OW 254
72819: PUSH
72820: LD_INT 3
72822: PLUS
72823: PUSH
72824: LD_INT 6
72826: MOD
72827: ST_TO_ADDR
// end ;
72828: LD_VAR 0 2
72832: RET
// export function ReverseArray ( array ) ; var i ; begin
72833: LD_INT 0
72835: PPUSH
72836: PPUSH
// if not array then
72837: LD_VAR 0 1
72841: NOT
72842: IFFALSE 72846
// exit ;
72844: GO 72901
// result := [ ] ;
72846: LD_ADDR_VAR 0 2
72850: PUSH
72851: EMPTY
72852: ST_TO_ADDR
// for i := array downto 1 do
72853: LD_ADDR_VAR 0 3
72857: PUSH
72858: DOUBLE
72859: LD_VAR 0 1
72863: INC
72864: ST_TO_ADDR
72865: LD_INT 1
72867: PUSH
72868: FOR_DOWNTO
72869: IFFALSE 72899
// result := Join ( result , array [ i ] ) ;
72871: LD_ADDR_VAR 0 2
72875: PUSH
72876: LD_VAR 0 2
72880: PPUSH
72881: LD_VAR 0 1
72885: PUSH
72886: LD_VAR 0 3
72890: ARRAY
72891: PPUSH
72892: CALL 77544 0 2
72896: ST_TO_ADDR
72897: GO 72868
72899: POP
72900: POP
// end ;
72901: LD_VAR 0 2
72905: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72906: LD_INT 0
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
72912: PPUSH
72913: PPUSH
// if not unit or not hexes then
72914: LD_VAR 0 1
72918: NOT
72919: PUSH
72920: LD_VAR 0 2
72924: NOT
72925: OR
72926: IFFALSE 72930
// exit ;
72928: GO 73053
// dist := 9999 ;
72930: LD_ADDR_VAR 0 5
72934: PUSH
72935: LD_INT 9999
72937: ST_TO_ADDR
// for i = 1 to hexes do
72938: LD_ADDR_VAR 0 4
72942: PUSH
72943: DOUBLE
72944: LD_INT 1
72946: DEC
72947: ST_TO_ADDR
72948: LD_VAR 0 2
72952: PUSH
72953: FOR_TO
72954: IFFALSE 73041
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72956: LD_ADDR_VAR 0 6
72960: PUSH
72961: LD_VAR 0 1
72965: PPUSH
72966: LD_VAR 0 2
72970: PUSH
72971: LD_VAR 0 4
72975: ARRAY
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PPUSH
72981: LD_VAR 0 2
72985: PUSH
72986: LD_VAR 0 4
72990: ARRAY
72991: PUSH
72992: LD_INT 2
72994: ARRAY
72995: PPUSH
72996: CALL_OW 297
73000: ST_TO_ADDR
// if tdist < dist then
73001: LD_VAR 0 6
73005: PUSH
73006: LD_VAR 0 5
73010: LESS
73011: IFFALSE 73039
// begin hex := hexes [ i ] ;
73013: LD_ADDR_VAR 0 8
73017: PUSH
73018: LD_VAR 0 2
73022: PUSH
73023: LD_VAR 0 4
73027: ARRAY
73028: ST_TO_ADDR
// dist := tdist ;
73029: LD_ADDR_VAR 0 5
73033: PUSH
73034: LD_VAR 0 6
73038: ST_TO_ADDR
// end ; end ;
73039: GO 72953
73041: POP
73042: POP
// result := hex ;
73043: LD_ADDR_VAR 0 3
73047: PUSH
73048: LD_VAR 0 8
73052: ST_TO_ADDR
// end ;
73053: LD_VAR 0 3
73057: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73058: LD_INT 0
73060: PPUSH
73061: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73062: LD_VAR 0 1
73066: NOT
73067: PUSH
73068: LD_VAR 0 1
73072: PUSH
73073: LD_INT 21
73075: PUSH
73076: LD_INT 2
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 23
73085: PUSH
73086: LD_INT 2
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PPUSH
73097: CALL_OW 69
73101: IN
73102: NOT
73103: OR
73104: IFFALSE 73108
// exit ;
73106: GO 73155
// for i = 1 to 3 do
73108: LD_ADDR_VAR 0 3
73112: PUSH
73113: DOUBLE
73114: LD_INT 1
73116: DEC
73117: ST_TO_ADDR
73118: LD_INT 3
73120: PUSH
73121: FOR_TO
73122: IFFALSE 73153
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73124: LD_VAR 0 1
73128: PPUSH
73129: CALL_OW 250
73133: PPUSH
73134: LD_VAR 0 1
73138: PPUSH
73139: CALL_OW 251
73143: PPUSH
73144: LD_INT 1
73146: PPUSH
73147: CALL_OW 453
73151: GO 73121
73153: POP
73154: POP
// end ;
73155: LD_VAR 0 2
73159: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73160: LD_INT 0
73162: PPUSH
73163: PPUSH
73164: PPUSH
73165: PPUSH
73166: PPUSH
73167: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73168: LD_VAR 0 1
73172: NOT
73173: PUSH
73174: LD_VAR 0 2
73178: NOT
73179: OR
73180: PUSH
73181: LD_VAR 0 1
73185: PPUSH
73186: CALL_OW 314
73190: OR
73191: IFFALSE 73195
// exit ;
73193: GO 73662
// if GetLives ( i ) < 250 then
73195: LD_VAR 0 4
73199: PPUSH
73200: CALL_OW 256
73204: PUSH
73205: LD_INT 250
73207: LESS
73208: IFFALSE 73221
// begin ComAutodestruct ( i ) ;
73210: LD_VAR 0 4
73214: PPUSH
73215: CALL 73058 0 1
// exit ;
73219: GO 73662
// end ; x := GetX ( enemy_unit ) ;
73221: LD_ADDR_VAR 0 7
73225: PUSH
73226: LD_VAR 0 2
73230: PPUSH
73231: CALL_OW 250
73235: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73236: LD_ADDR_VAR 0 8
73240: PUSH
73241: LD_VAR 0 2
73245: PPUSH
73246: CALL_OW 251
73250: ST_TO_ADDR
// if not x or not y then
73251: LD_VAR 0 7
73255: NOT
73256: PUSH
73257: LD_VAR 0 8
73261: NOT
73262: OR
73263: IFFALSE 73267
// exit ;
73265: GO 73662
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73267: LD_ADDR_VAR 0 6
73271: PUSH
73272: LD_VAR 0 7
73276: PPUSH
73277: LD_INT 0
73279: PPUSH
73280: LD_INT 4
73282: PPUSH
73283: CALL_OW 272
73287: PUSH
73288: LD_VAR 0 8
73292: PPUSH
73293: LD_INT 0
73295: PPUSH
73296: LD_INT 4
73298: PPUSH
73299: CALL_OW 273
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_VAR 0 7
73312: PPUSH
73313: LD_INT 1
73315: PPUSH
73316: LD_INT 4
73318: PPUSH
73319: CALL_OW 272
73323: PUSH
73324: LD_VAR 0 8
73328: PPUSH
73329: LD_INT 1
73331: PPUSH
73332: LD_INT 4
73334: PPUSH
73335: CALL_OW 273
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_VAR 0 7
73348: PPUSH
73349: LD_INT 2
73351: PPUSH
73352: LD_INT 4
73354: PPUSH
73355: CALL_OW 272
73359: PUSH
73360: LD_VAR 0 8
73364: PPUSH
73365: LD_INT 2
73367: PPUSH
73368: LD_INT 4
73370: PPUSH
73371: CALL_OW 273
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_VAR 0 7
73384: PPUSH
73385: LD_INT 3
73387: PPUSH
73388: LD_INT 4
73390: PPUSH
73391: CALL_OW 272
73395: PUSH
73396: LD_VAR 0 8
73400: PPUSH
73401: LD_INT 3
73403: PPUSH
73404: LD_INT 4
73406: PPUSH
73407: CALL_OW 273
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_VAR 0 7
73420: PPUSH
73421: LD_INT 4
73423: PPUSH
73424: LD_INT 4
73426: PPUSH
73427: CALL_OW 272
73431: PUSH
73432: LD_VAR 0 8
73436: PPUSH
73437: LD_INT 4
73439: PPUSH
73440: LD_INT 4
73442: PPUSH
73443: CALL_OW 273
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_VAR 0 7
73456: PPUSH
73457: LD_INT 5
73459: PPUSH
73460: LD_INT 4
73462: PPUSH
73463: CALL_OW 272
73467: PUSH
73468: LD_VAR 0 8
73472: PPUSH
73473: LD_INT 5
73475: PPUSH
73476: LD_INT 4
73478: PPUSH
73479: CALL_OW 273
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: ST_TO_ADDR
// for i = tmp downto 1 do
73496: LD_ADDR_VAR 0 4
73500: PUSH
73501: DOUBLE
73502: LD_VAR 0 6
73506: INC
73507: ST_TO_ADDR
73508: LD_INT 1
73510: PUSH
73511: FOR_DOWNTO
73512: IFFALSE 73613
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73514: LD_VAR 0 6
73518: PUSH
73519: LD_VAR 0 4
73523: ARRAY
73524: PUSH
73525: LD_INT 1
73527: ARRAY
73528: PPUSH
73529: LD_VAR 0 6
73533: PUSH
73534: LD_VAR 0 4
73538: ARRAY
73539: PUSH
73540: LD_INT 2
73542: ARRAY
73543: PPUSH
73544: CALL_OW 488
73548: NOT
73549: PUSH
73550: LD_VAR 0 6
73554: PUSH
73555: LD_VAR 0 4
73559: ARRAY
73560: PUSH
73561: LD_INT 1
73563: ARRAY
73564: PPUSH
73565: LD_VAR 0 6
73569: PUSH
73570: LD_VAR 0 4
73574: ARRAY
73575: PUSH
73576: LD_INT 2
73578: ARRAY
73579: PPUSH
73580: CALL_OW 428
73584: PUSH
73585: LD_INT 0
73587: NONEQUAL
73588: OR
73589: IFFALSE 73611
// tmp := Delete ( tmp , i ) ;
73591: LD_ADDR_VAR 0 6
73595: PUSH
73596: LD_VAR 0 6
73600: PPUSH
73601: LD_VAR 0 4
73605: PPUSH
73606: CALL_OW 3
73610: ST_TO_ADDR
73611: GO 73511
73613: POP
73614: POP
// j := GetClosestHex ( unit , tmp ) ;
73615: LD_ADDR_VAR 0 5
73619: PUSH
73620: LD_VAR 0 1
73624: PPUSH
73625: LD_VAR 0 6
73629: PPUSH
73630: CALL 72906 0 2
73634: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73635: LD_VAR 0 1
73639: PPUSH
73640: LD_VAR 0 5
73644: PUSH
73645: LD_INT 1
73647: ARRAY
73648: PPUSH
73649: LD_VAR 0 5
73653: PUSH
73654: LD_INT 2
73656: ARRAY
73657: PPUSH
73658: CALL_OW 111
// end ;
73662: LD_VAR 0 3
73666: RET
// export function PrepareApemanSoldier ( ) ; begin
73667: LD_INT 0
73669: PPUSH
// uc_nation := 0 ;
73670: LD_ADDR_OWVAR 21
73674: PUSH
73675: LD_INT 0
73677: ST_TO_ADDR
// hc_sex := sex_male ;
73678: LD_ADDR_OWVAR 27
73682: PUSH
73683: LD_INT 1
73685: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73686: LD_ADDR_OWVAR 28
73690: PUSH
73691: LD_INT 15
73693: ST_TO_ADDR
// hc_gallery :=  ;
73694: LD_ADDR_OWVAR 33
73698: PUSH
73699: LD_STRING 
73701: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73702: LD_ADDR_OWVAR 31
73706: PUSH
73707: LD_INT 0
73709: PPUSH
73710: LD_INT 3
73712: PPUSH
73713: CALL_OW 12
73717: PUSH
73718: LD_INT 0
73720: PPUSH
73721: LD_INT 3
73723: PPUSH
73724: CALL_OW 12
73728: PUSH
73729: LD_INT 0
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: ST_TO_ADDR
// end ;
73741: LD_VAR 0 1
73745: RET
// export function PrepareApemanEngineer ( ) ; begin
73746: LD_INT 0
73748: PPUSH
// uc_nation := 0 ;
73749: LD_ADDR_OWVAR 21
73753: PUSH
73754: LD_INT 0
73756: ST_TO_ADDR
// hc_sex := sex_male ;
73757: LD_ADDR_OWVAR 27
73761: PUSH
73762: LD_INT 1
73764: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73765: LD_ADDR_OWVAR 28
73769: PUSH
73770: LD_INT 16
73772: ST_TO_ADDR
// hc_gallery :=  ;
73773: LD_ADDR_OWVAR 33
73777: PUSH
73778: LD_STRING 
73780: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73781: LD_ADDR_OWVAR 31
73785: PUSH
73786: LD_INT 0
73788: PPUSH
73789: LD_INT 3
73791: PPUSH
73792: CALL_OW 12
73796: PUSH
73797: LD_INT 0
73799: PPUSH
73800: LD_INT 3
73802: PPUSH
73803: CALL_OW 12
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: ST_TO_ADDR
// end ;
73820: LD_VAR 0 1
73824: RET
// export function PrepareApeman ( agressivity ) ; begin
73825: LD_INT 0
73827: PPUSH
// uc_side := 0 ;
73828: LD_ADDR_OWVAR 20
73832: PUSH
73833: LD_INT 0
73835: ST_TO_ADDR
// uc_nation := 0 ;
73836: LD_ADDR_OWVAR 21
73840: PUSH
73841: LD_INT 0
73843: ST_TO_ADDR
// hc_sex := sex_male ;
73844: LD_ADDR_OWVAR 27
73848: PUSH
73849: LD_INT 1
73851: ST_TO_ADDR
// hc_class := class_apeman ;
73852: LD_ADDR_OWVAR 28
73856: PUSH
73857: LD_INT 12
73859: ST_TO_ADDR
// hc_gallery :=  ;
73860: LD_ADDR_OWVAR 33
73864: PUSH
73865: LD_STRING 
73867: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73868: LD_ADDR_OWVAR 35
73872: PUSH
73873: LD_VAR 0 1
73877: NEG
73878: PPUSH
73879: LD_VAR 0 1
73883: PPUSH
73884: CALL_OW 12
73888: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73889: LD_ADDR_OWVAR 31
73893: PUSH
73894: LD_INT 0
73896: PPUSH
73897: LD_INT 3
73899: PPUSH
73900: CALL_OW 12
73904: PUSH
73905: LD_INT 0
73907: PPUSH
73908: LD_INT 3
73910: PPUSH
73911: CALL_OW 12
73915: PUSH
73916: LD_INT 0
73918: PUSH
73919: LD_INT 0
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: ST_TO_ADDR
// end ;
73928: LD_VAR 0 2
73932: RET
// export function PrepareTiger ( agressivity ) ; begin
73933: LD_INT 0
73935: PPUSH
// uc_side := 0 ;
73936: LD_ADDR_OWVAR 20
73940: PUSH
73941: LD_INT 0
73943: ST_TO_ADDR
// uc_nation := 0 ;
73944: LD_ADDR_OWVAR 21
73948: PUSH
73949: LD_INT 0
73951: ST_TO_ADDR
// hc_class := class_tiger ;
73952: LD_ADDR_OWVAR 28
73956: PUSH
73957: LD_INT 14
73959: ST_TO_ADDR
// hc_gallery :=  ;
73960: LD_ADDR_OWVAR 33
73964: PUSH
73965: LD_STRING 
73967: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73968: LD_ADDR_OWVAR 35
73972: PUSH
73973: LD_VAR 0 1
73977: NEG
73978: PPUSH
73979: LD_VAR 0 1
73983: PPUSH
73984: CALL_OW 12
73988: ST_TO_ADDR
// end ;
73989: LD_VAR 0 2
73993: RET
// export function PrepareEnchidna ( ) ; begin
73994: LD_INT 0
73996: PPUSH
// uc_side := 0 ;
73997: LD_ADDR_OWVAR 20
74001: PUSH
74002: LD_INT 0
74004: ST_TO_ADDR
// uc_nation := 0 ;
74005: LD_ADDR_OWVAR 21
74009: PUSH
74010: LD_INT 0
74012: ST_TO_ADDR
// hc_class := class_baggie ;
74013: LD_ADDR_OWVAR 28
74017: PUSH
74018: LD_INT 13
74020: ST_TO_ADDR
// hc_gallery :=  ;
74021: LD_ADDR_OWVAR 33
74025: PUSH
74026: LD_STRING 
74028: ST_TO_ADDR
// end ;
74029: LD_VAR 0 1
74033: RET
// export function PrepareFrog ( ) ; begin
74034: LD_INT 0
74036: PPUSH
// uc_side := 0 ;
74037: LD_ADDR_OWVAR 20
74041: PUSH
74042: LD_INT 0
74044: ST_TO_ADDR
// uc_nation := 0 ;
74045: LD_ADDR_OWVAR 21
74049: PUSH
74050: LD_INT 0
74052: ST_TO_ADDR
// hc_class := class_frog ;
74053: LD_ADDR_OWVAR 28
74057: PUSH
74058: LD_INT 19
74060: ST_TO_ADDR
// hc_gallery :=  ;
74061: LD_ADDR_OWVAR 33
74065: PUSH
74066: LD_STRING 
74068: ST_TO_ADDR
// end ;
74069: LD_VAR 0 1
74073: RET
// export function PrepareFish ( ) ; begin
74074: LD_INT 0
74076: PPUSH
// uc_side := 0 ;
74077: LD_ADDR_OWVAR 20
74081: PUSH
74082: LD_INT 0
74084: ST_TO_ADDR
// uc_nation := 0 ;
74085: LD_ADDR_OWVAR 21
74089: PUSH
74090: LD_INT 0
74092: ST_TO_ADDR
// hc_class := class_fish ;
74093: LD_ADDR_OWVAR 28
74097: PUSH
74098: LD_INT 20
74100: ST_TO_ADDR
// hc_gallery :=  ;
74101: LD_ADDR_OWVAR 33
74105: PUSH
74106: LD_STRING 
74108: ST_TO_ADDR
// end ;
74109: LD_VAR 0 1
74113: RET
// export function PrepareBird ( ) ; begin
74114: LD_INT 0
74116: PPUSH
// uc_side := 0 ;
74117: LD_ADDR_OWVAR 20
74121: PUSH
74122: LD_INT 0
74124: ST_TO_ADDR
// uc_nation := 0 ;
74125: LD_ADDR_OWVAR 21
74129: PUSH
74130: LD_INT 0
74132: ST_TO_ADDR
// hc_class := class_phororhacos ;
74133: LD_ADDR_OWVAR 28
74137: PUSH
74138: LD_INT 18
74140: ST_TO_ADDR
// hc_gallery :=  ;
74141: LD_ADDR_OWVAR 33
74145: PUSH
74146: LD_STRING 
74148: ST_TO_ADDR
// end ;
74149: LD_VAR 0 1
74153: RET
// export function PrepareHorse ( ) ; begin
74154: LD_INT 0
74156: PPUSH
// uc_side := 0 ;
74157: LD_ADDR_OWVAR 20
74161: PUSH
74162: LD_INT 0
74164: ST_TO_ADDR
// uc_nation := 0 ;
74165: LD_ADDR_OWVAR 21
74169: PUSH
74170: LD_INT 0
74172: ST_TO_ADDR
// hc_class := class_horse ;
74173: LD_ADDR_OWVAR 28
74177: PUSH
74178: LD_INT 21
74180: ST_TO_ADDR
// hc_gallery :=  ;
74181: LD_ADDR_OWVAR 33
74185: PUSH
74186: LD_STRING 
74188: ST_TO_ADDR
// end ;
74189: LD_VAR 0 1
74193: RET
// export function PrepareMastodont ( ) ; begin
74194: LD_INT 0
74196: PPUSH
// uc_side := 0 ;
74197: LD_ADDR_OWVAR 20
74201: PUSH
74202: LD_INT 0
74204: ST_TO_ADDR
// uc_nation := 0 ;
74205: LD_ADDR_OWVAR 21
74209: PUSH
74210: LD_INT 0
74212: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74213: LD_ADDR_OWVAR 37
74217: PUSH
74218: LD_INT 31
74220: ST_TO_ADDR
// vc_control := control_rider ;
74221: LD_ADDR_OWVAR 38
74225: PUSH
74226: LD_INT 4
74228: ST_TO_ADDR
// end ;
74229: LD_VAR 0 1
74233: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74234: LD_INT 0
74236: PPUSH
74237: PPUSH
74238: PPUSH
// uc_side = 0 ;
74239: LD_ADDR_OWVAR 20
74243: PUSH
74244: LD_INT 0
74246: ST_TO_ADDR
// uc_nation = 0 ;
74247: LD_ADDR_OWVAR 21
74251: PUSH
74252: LD_INT 0
74254: ST_TO_ADDR
// InitHc_All ( ) ;
74255: CALL_OW 584
// InitVc ;
74259: CALL_OW 20
// if mastodonts then
74263: LD_VAR 0 6
74267: IFFALSE 74334
// for i = 1 to mastodonts do
74269: LD_ADDR_VAR 0 11
74273: PUSH
74274: DOUBLE
74275: LD_INT 1
74277: DEC
74278: ST_TO_ADDR
74279: LD_VAR 0 6
74283: PUSH
74284: FOR_TO
74285: IFFALSE 74332
// begin vc_chassis := 31 ;
74287: LD_ADDR_OWVAR 37
74291: PUSH
74292: LD_INT 31
74294: ST_TO_ADDR
// vc_control := control_rider ;
74295: LD_ADDR_OWVAR 38
74299: PUSH
74300: LD_INT 4
74302: ST_TO_ADDR
// animal := CreateVehicle ;
74303: LD_ADDR_VAR 0 12
74307: PUSH
74308: CALL_OW 45
74312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74313: LD_VAR 0 12
74317: PPUSH
74318: LD_VAR 0 8
74322: PPUSH
74323: LD_INT 0
74325: PPUSH
74326: CALL 76462 0 3
// end ;
74330: GO 74284
74332: POP
74333: POP
// if horses then
74334: LD_VAR 0 5
74338: IFFALSE 74405
// for i = 1 to horses do
74340: LD_ADDR_VAR 0 11
74344: PUSH
74345: DOUBLE
74346: LD_INT 1
74348: DEC
74349: ST_TO_ADDR
74350: LD_VAR 0 5
74354: PUSH
74355: FOR_TO
74356: IFFALSE 74403
// begin hc_class := 21 ;
74358: LD_ADDR_OWVAR 28
74362: PUSH
74363: LD_INT 21
74365: ST_TO_ADDR
// hc_gallery :=  ;
74366: LD_ADDR_OWVAR 33
74370: PUSH
74371: LD_STRING 
74373: ST_TO_ADDR
// animal := CreateHuman ;
74374: LD_ADDR_VAR 0 12
74378: PUSH
74379: CALL_OW 44
74383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74384: LD_VAR 0 12
74388: PPUSH
74389: LD_VAR 0 8
74393: PPUSH
74394: LD_INT 0
74396: PPUSH
74397: CALL 76462 0 3
// end ;
74401: GO 74355
74403: POP
74404: POP
// if birds then
74405: LD_VAR 0 1
74409: IFFALSE 74476
// for i = 1 to birds do
74411: LD_ADDR_VAR 0 11
74415: PUSH
74416: DOUBLE
74417: LD_INT 1
74419: DEC
74420: ST_TO_ADDR
74421: LD_VAR 0 1
74425: PUSH
74426: FOR_TO
74427: IFFALSE 74474
// begin hc_class = 18 ;
74429: LD_ADDR_OWVAR 28
74433: PUSH
74434: LD_INT 18
74436: ST_TO_ADDR
// hc_gallery =  ;
74437: LD_ADDR_OWVAR 33
74441: PUSH
74442: LD_STRING 
74444: ST_TO_ADDR
// animal := CreateHuman ;
74445: LD_ADDR_VAR 0 12
74449: PUSH
74450: CALL_OW 44
74454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74455: LD_VAR 0 12
74459: PPUSH
74460: LD_VAR 0 8
74464: PPUSH
74465: LD_INT 0
74467: PPUSH
74468: CALL 76462 0 3
// end ;
74472: GO 74426
74474: POP
74475: POP
// if tigers then
74476: LD_VAR 0 2
74480: IFFALSE 74564
// for i = 1 to tigers do
74482: LD_ADDR_VAR 0 11
74486: PUSH
74487: DOUBLE
74488: LD_INT 1
74490: DEC
74491: ST_TO_ADDR
74492: LD_VAR 0 2
74496: PUSH
74497: FOR_TO
74498: IFFALSE 74562
// begin hc_class = class_tiger ;
74500: LD_ADDR_OWVAR 28
74504: PUSH
74505: LD_INT 14
74507: ST_TO_ADDR
// hc_gallery =  ;
74508: LD_ADDR_OWVAR 33
74512: PUSH
74513: LD_STRING 
74515: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74516: LD_ADDR_OWVAR 35
74520: PUSH
74521: LD_INT 7
74523: NEG
74524: PPUSH
74525: LD_INT 7
74527: PPUSH
74528: CALL_OW 12
74532: ST_TO_ADDR
// animal := CreateHuman ;
74533: LD_ADDR_VAR 0 12
74537: PUSH
74538: CALL_OW 44
74542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74543: LD_VAR 0 12
74547: PPUSH
74548: LD_VAR 0 8
74552: PPUSH
74553: LD_INT 0
74555: PPUSH
74556: CALL 76462 0 3
// end ;
74560: GO 74497
74562: POP
74563: POP
// if apemans then
74564: LD_VAR 0 3
74568: IFFALSE 74691
// for i = 1 to apemans do
74570: LD_ADDR_VAR 0 11
74574: PUSH
74575: DOUBLE
74576: LD_INT 1
74578: DEC
74579: ST_TO_ADDR
74580: LD_VAR 0 3
74584: PUSH
74585: FOR_TO
74586: IFFALSE 74689
// begin hc_class = class_apeman ;
74588: LD_ADDR_OWVAR 28
74592: PUSH
74593: LD_INT 12
74595: ST_TO_ADDR
// hc_gallery =  ;
74596: LD_ADDR_OWVAR 33
74600: PUSH
74601: LD_STRING 
74603: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74604: LD_ADDR_OWVAR 35
74608: PUSH
74609: LD_INT 2
74611: NEG
74612: PPUSH
74613: LD_INT 2
74615: PPUSH
74616: CALL_OW 12
74620: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74621: LD_ADDR_OWVAR 31
74625: PUSH
74626: LD_INT 1
74628: PPUSH
74629: LD_INT 3
74631: PPUSH
74632: CALL_OW 12
74636: PUSH
74637: LD_INT 1
74639: PPUSH
74640: LD_INT 3
74642: PPUSH
74643: CALL_OW 12
74647: PUSH
74648: LD_INT 0
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: ST_TO_ADDR
// animal := CreateHuman ;
74660: LD_ADDR_VAR 0 12
74664: PUSH
74665: CALL_OW 44
74669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74670: LD_VAR 0 12
74674: PPUSH
74675: LD_VAR 0 8
74679: PPUSH
74680: LD_INT 0
74682: PPUSH
74683: CALL 76462 0 3
// end ;
74687: GO 74585
74689: POP
74690: POP
// if enchidnas then
74691: LD_VAR 0 4
74695: IFFALSE 74762
// for i = 1 to enchidnas do
74697: LD_ADDR_VAR 0 11
74701: PUSH
74702: DOUBLE
74703: LD_INT 1
74705: DEC
74706: ST_TO_ADDR
74707: LD_VAR 0 4
74711: PUSH
74712: FOR_TO
74713: IFFALSE 74760
// begin hc_class = 13 ;
74715: LD_ADDR_OWVAR 28
74719: PUSH
74720: LD_INT 13
74722: ST_TO_ADDR
// hc_gallery =  ;
74723: LD_ADDR_OWVAR 33
74727: PUSH
74728: LD_STRING 
74730: ST_TO_ADDR
// animal := CreateHuman ;
74731: LD_ADDR_VAR 0 12
74735: PUSH
74736: CALL_OW 44
74740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74741: LD_VAR 0 12
74745: PPUSH
74746: LD_VAR 0 8
74750: PPUSH
74751: LD_INT 0
74753: PPUSH
74754: CALL 76462 0 3
// end ;
74758: GO 74712
74760: POP
74761: POP
// if fishes then
74762: LD_VAR 0 7
74766: IFFALSE 74833
// for i = 1 to fishes do
74768: LD_ADDR_VAR 0 11
74772: PUSH
74773: DOUBLE
74774: LD_INT 1
74776: DEC
74777: ST_TO_ADDR
74778: LD_VAR 0 7
74782: PUSH
74783: FOR_TO
74784: IFFALSE 74831
// begin hc_class = 20 ;
74786: LD_ADDR_OWVAR 28
74790: PUSH
74791: LD_INT 20
74793: ST_TO_ADDR
// hc_gallery =  ;
74794: LD_ADDR_OWVAR 33
74798: PUSH
74799: LD_STRING 
74801: ST_TO_ADDR
// animal := CreateHuman ;
74802: LD_ADDR_VAR 0 12
74806: PUSH
74807: CALL_OW 44
74811: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74812: LD_VAR 0 12
74816: PPUSH
74817: LD_VAR 0 9
74821: PPUSH
74822: LD_INT 0
74824: PPUSH
74825: CALL 76462 0 3
// end ;
74829: GO 74783
74831: POP
74832: POP
// end ;
74833: LD_VAR 0 10
74837: RET
// export function WantHeal ( sci , unit ) ; begin
74838: LD_INT 0
74840: PPUSH
// if GetTaskList ( sci ) > 0 then
74841: LD_VAR 0 1
74845: PPUSH
74846: CALL_OW 437
74850: PUSH
74851: LD_INT 0
74853: GREATER
74854: IFFALSE 74924
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74856: LD_VAR 0 1
74860: PPUSH
74861: CALL_OW 437
74865: PUSH
74866: LD_INT 1
74868: ARRAY
74869: PUSH
74870: LD_INT 1
74872: ARRAY
74873: PUSH
74874: LD_STRING l
74876: EQUAL
74877: PUSH
74878: LD_VAR 0 1
74882: PPUSH
74883: CALL_OW 437
74887: PUSH
74888: LD_INT 1
74890: ARRAY
74891: PUSH
74892: LD_INT 4
74894: ARRAY
74895: PUSH
74896: LD_VAR 0 2
74900: EQUAL
74901: AND
74902: IFFALSE 74914
// result := true else
74904: LD_ADDR_VAR 0 3
74908: PUSH
74909: LD_INT 1
74911: ST_TO_ADDR
74912: GO 74922
// result := false ;
74914: LD_ADDR_VAR 0 3
74918: PUSH
74919: LD_INT 0
74921: ST_TO_ADDR
// end else
74922: GO 74932
// result := false ;
74924: LD_ADDR_VAR 0 3
74928: PUSH
74929: LD_INT 0
74931: ST_TO_ADDR
// end ;
74932: LD_VAR 0 3
74936: RET
// export function HealTarget ( sci ) ; begin
74937: LD_INT 0
74939: PPUSH
// if not sci then
74940: LD_VAR 0 1
74944: NOT
74945: IFFALSE 74949
// exit ;
74947: GO 75014
// result := 0 ;
74949: LD_ADDR_VAR 0 2
74953: PUSH
74954: LD_INT 0
74956: ST_TO_ADDR
// if GetTaskList ( sci ) then
74957: LD_VAR 0 1
74961: PPUSH
74962: CALL_OW 437
74966: IFFALSE 75014
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74968: LD_VAR 0 1
74972: PPUSH
74973: CALL_OW 437
74977: PUSH
74978: LD_INT 1
74980: ARRAY
74981: PUSH
74982: LD_INT 1
74984: ARRAY
74985: PUSH
74986: LD_STRING l
74988: EQUAL
74989: IFFALSE 75014
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74991: LD_ADDR_VAR 0 2
74995: PUSH
74996: LD_VAR 0 1
75000: PPUSH
75001: CALL_OW 437
75005: PUSH
75006: LD_INT 1
75008: ARRAY
75009: PUSH
75010: LD_INT 4
75012: ARRAY
75013: ST_TO_ADDR
// end ;
75014: LD_VAR 0 2
75018: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75019: LD_INT 0
75021: PPUSH
75022: PPUSH
75023: PPUSH
75024: PPUSH
// if not base_units then
75025: LD_VAR 0 1
75029: NOT
75030: IFFALSE 75034
// exit ;
75032: GO 75121
// result := false ;
75034: LD_ADDR_VAR 0 2
75038: PUSH
75039: LD_INT 0
75041: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75042: LD_ADDR_VAR 0 5
75046: PUSH
75047: LD_VAR 0 1
75051: PPUSH
75052: LD_INT 21
75054: PUSH
75055: LD_INT 3
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PPUSH
75062: CALL_OW 72
75066: ST_TO_ADDR
// if not tmp then
75067: LD_VAR 0 5
75071: NOT
75072: IFFALSE 75076
// exit ;
75074: GO 75121
// for i in tmp do
75076: LD_ADDR_VAR 0 3
75080: PUSH
75081: LD_VAR 0 5
75085: PUSH
75086: FOR_IN
75087: IFFALSE 75119
// begin result := EnemyInRange ( i , 22 ) ;
75089: LD_ADDR_VAR 0 2
75093: PUSH
75094: LD_VAR 0 3
75098: PPUSH
75099: LD_INT 22
75101: PPUSH
75102: CALL 72708 0 2
75106: ST_TO_ADDR
// if result then
75107: LD_VAR 0 2
75111: IFFALSE 75117
// exit ;
75113: POP
75114: POP
75115: GO 75121
// end ;
75117: GO 75086
75119: POP
75120: POP
// end ;
75121: LD_VAR 0 2
75125: RET
// export function FilterByTag ( units , tag ) ; begin
75126: LD_INT 0
75128: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75129: LD_ADDR_VAR 0 3
75133: PUSH
75134: LD_VAR 0 1
75138: PPUSH
75139: LD_INT 120
75141: PUSH
75142: LD_VAR 0 2
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PPUSH
75151: CALL_OW 72
75155: ST_TO_ADDR
// end ;
75156: LD_VAR 0 3
75160: RET
// export function IsDriver ( un ) ; begin
75161: LD_INT 0
75163: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75164: LD_ADDR_VAR 0 2
75168: PUSH
75169: LD_VAR 0 1
75173: PUSH
75174: LD_INT 55
75176: PUSH
75177: EMPTY
75178: LIST
75179: PPUSH
75180: CALL_OW 69
75184: IN
75185: ST_TO_ADDR
// end ;
75186: LD_VAR 0 2
75190: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75191: LD_INT 0
75193: PPUSH
75194: PPUSH
// list := [ ] ;
75195: LD_ADDR_VAR 0 5
75199: PUSH
75200: EMPTY
75201: ST_TO_ADDR
// case d of 0 :
75202: LD_VAR 0 3
75206: PUSH
75207: LD_INT 0
75209: DOUBLE
75210: EQUAL
75211: IFTRUE 75215
75213: GO 75348
75215: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75216: LD_ADDR_VAR 0 5
75220: PUSH
75221: LD_VAR 0 1
75225: PUSH
75226: LD_INT 4
75228: MINUS
75229: PUSH
75230: LD_VAR 0 2
75234: PUSH
75235: LD_INT 4
75237: MINUS
75238: PUSH
75239: LD_INT 2
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: LIST
75246: PUSH
75247: LD_VAR 0 1
75251: PUSH
75252: LD_INT 3
75254: MINUS
75255: PUSH
75256: LD_VAR 0 2
75260: PUSH
75261: LD_INT 1
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: LIST
75268: PUSH
75269: LD_VAR 0 1
75273: PUSH
75274: LD_INT 4
75276: PLUS
75277: PUSH
75278: LD_VAR 0 2
75282: PUSH
75283: LD_INT 4
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: LIST
75290: PUSH
75291: LD_VAR 0 1
75295: PUSH
75296: LD_INT 3
75298: PLUS
75299: PUSH
75300: LD_VAR 0 2
75304: PUSH
75305: LD_INT 3
75307: PLUS
75308: PUSH
75309: LD_INT 5
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: LIST
75316: PUSH
75317: LD_VAR 0 1
75321: PUSH
75322: LD_VAR 0 2
75326: PUSH
75327: LD_INT 4
75329: PLUS
75330: PUSH
75331: LD_INT 0
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: LIST
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: ST_TO_ADDR
// end ; 1 :
75346: GO 76046
75348: LD_INT 1
75350: DOUBLE
75351: EQUAL
75352: IFTRUE 75356
75354: GO 75489
75356: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75357: LD_ADDR_VAR 0 5
75361: PUSH
75362: LD_VAR 0 1
75366: PUSH
75367: LD_VAR 0 2
75371: PUSH
75372: LD_INT 4
75374: MINUS
75375: PUSH
75376: LD_INT 3
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: LIST
75383: PUSH
75384: LD_VAR 0 1
75388: PUSH
75389: LD_INT 3
75391: MINUS
75392: PUSH
75393: LD_VAR 0 2
75397: PUSH
75398: LD_INT 3
75400: MINUS
75401: PUSH
75402: LD_INT 2
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: LIST
75409: PUSH
75410: LD_VAR 0 1
75414: PUSH
75415: LD_INT 4
75417: MINUS
75418: PUSH
75419: LD_VAR 0 2
75423: PUSH
75424: LD_INT 1
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: PUSH
75432: LD_VAR 0 1
75436: PUSH
75437: LD_VAR 0 2
75441: PUSH
75442: LD_INT 3
75444: PLUS
75445: PUSH
75446: LD_INT 0
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: LIST
75453: PUSH
75454: LD_VAR 0 1
75458: PUSH
75459: LD_INT 4
75461: PLUS
75462: PUSH
75463: LD_VAR 0 2
75467: PUSH
75468: LD_INT 4
75470: PLUS
75471: PUSH
75472: LD_INT 5
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: LIST
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: ST_TO_ADDR
// end ; 2 :
75487: GO 76046
75489: LD_INT 2
75491: DOUBLE
75492: EQUAL
75493: IFTRUE 75497
75495: GO 75626
75497: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75498: LD_ADDR_VAR 0 5
75502: PUSH
75503: LD_VAR 0 1
75507: PUSH
75508: LD_VAR 0 2
75512: PUSH
75513: LD_INT 3
75515: MINUS
75516: PUSH
75517: LD_INT 3
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: LIST
75524: PUSH
75525: LD_VAR 0 1
75529: PUSH
75530: LD_INT 4
75532: PLUS
75533: PUSH
75534: LD_VAR 0 2
75538: PUSH
75539: LD_INT 4
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: LIST
75546: PUSH
75547: LD_VAR 0 1
75551: PUSH
75552: LD_VAR 0 2
75556: PUSH
75557: LD_INT 4
75559: PLUS
75560: PUSH
75561: LD_INT 0
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: LIST
75568: PUSH
75569: LD_VAR 0 1
75573: PUSH
75574: LD_INT 3
75576: MINUS
75577: PUSH
75578: LD_VAR 0 2
75582: PUSH
75583: LD_INT 1
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: PUSH
75591: LD_VAR 0 1
75595: PUSH
75596: LD_INT 4
75598: MINUS
75599: PUSH
75600: LD_VAR 0 2
75604: PUSH
75605: LD_INT 4
75607: MINUS
75608: PUSH
75609: LD_INT 2
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: LIST
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: ST_TO_ADDR
// end ; 3 :
75624: GO 76046
75626: LD_INT 3
75628: DOUBLE
75629: EQUAL
75630: IFTRUE 75634
75632: GO 75767
75634: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75635: LD_ADDR_VAR 0 5
75639: PUSH
75640: LD_VAR 0 1
75644: PUSH
75645: LD_INT 3
75647: PLUS
75648: PUSH
75649: LD_VAR 0 2
75653: PUSH
75654: LD_INT 4
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: LIST
75661: PUSH
75662: LD_VAR 0 1
75666: PUSH
75667: LD_INT 4
75669: PLUS
75670: PUSH
75671: LD_VAR 0 2
75675: PUSH
75676: LD_INT 4
75678: PLUS
75679: PUSH
75680: LD_INT 5
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: LIST
75687: PUSH
75688: LD_VAR 0 1
75692: PUSH
75693: LD_INT 4
75695: MINUS
75696: PUSH
75697: LD_VAR 0 2
75701: PUSH
75702: LD_INT 1
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: LIST
75709: PUSH
75710: LD_VAR 0 1
75714: PUSH
75715: LD_VAR 0 2
75719: PUSH
75720: LD_INT 4
75722: MINUS
75723: PUSH
75724: LD_INT 3
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: LIST
75731: PUSH
75732: LD_VAR 0 1
75736: PUSH
75737: LD_INT 3
75739: MINUS
75740: PUSH
75741: LD_VAR 0 2
75745: PUSH
75746: LD_INT 3
75748: MINUS
75749: PUSH
75750: LD_INT 2
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: LIST
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: ST_TO_ADDR
// end ; 4 :
75765: GO 76046
75767: LD_INT 4
75769: DOUBLE
75770: EQUAL
75771: IFTRUE 75775
75773: GO 75908
75775: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75776: LD_ADDR_VAR 0 5
75780: PUSH
75781: LD_VAR 0 1
75785: PUSH
75786: LD_VAR 0 2
75790: PUSH
75791: LD_INT 4
75793: PLUS
75794: PUSH
75795: LD_INT 0
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: LIST
75802: PUSH
75803: LD_VAR 0 1
75807: PUSH
75808: LD_INT 3
75810: PLUS
75811: PUSH
75812: LD_VAR 0 2
75816: PUSH
75817: LD_INT 3
75819: PLUS
75820: PUSH
75821: LD_INT 5
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: LIST
75828: PUSH
75829: LD_VAR 0 1
75833: PUSH
75834: LD_INT 4
75836: PLUS
75837: PUSH
75838: LD_VAR 0 2
75842: PUSH
75843: LD_INT 4
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: LIST
75850: PUSH
75851: LD_VAR 0 1
75855: PUSH
75856: LD_VAR 0 2
75860: PUSH
75861: LD_INT 3
75863: MINUS
75864: PUSH
75865: LD_INT 3
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: LIST
75872: PUSH
75873: LD_VAR 0 1
75877: PUSH
75878: LD_INT 4
75880: MINUS
75881: PUSH
75882: LD_VAR 0 2
75886: PUSH
75887: LD_INT 4
75889: MINUS
75890: PUSH
75891: LD_INT 2
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: LIST
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: ST_TO_ADDR
// end ; 5 :
75906: GO 76046
75908: LD_INT 5
75910: DOUBLE
75911: EQUAL
75912: IFTRUE 75916
75914: GO 76045
75916: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75917: LD_ADDR_VAR 0 5
75921: PUSH
75922: LD_VAR 0 1
75926: PUSH
75927: LD_INT 4
75929: MINUS
75930: PUSH
75931: LD_VAR 0 2
75935: PUSH
75936: LD_INT 1
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: LIST
75943: PUSH
75944: LD_VAR 0 1
75948: PUSH
75949: LD_VAR 0 2
75953: PUSH
75954: LD_INT 4
75956: MINUS
75957: PUSH
75958: LD_INT 3
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: LIST
75965: PUSH
75966: LD_VAR 0 1
75970: PUSH
75971: LD_INT 4
75973: PLUS
75974: PUSH
75975: LD_VAR 0 2
75979: PUSH
75980: LD_INT 4
75982: PLUS
75983: PUSH
75984: LD_INT 5
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: LIST
75991: PUSH
75992: LD_VAR 0 1
75996: PUSH
75997: LD_INT 3
75999: PLUS
76000: PUSH
76001: LD_VAR 0 2
76005: PUSH
76006: LD_INT 4
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: LIST
76013: PUSH
76014: LD_VAR 0 1
76018: PUSH
76019: LD_VAR 0 2
76023: PUSH
76024: LD_INT 3
76026: PLUS
76027: PUSH
76028: LD_INT 0
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: LIST
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: ST_TO_ADDR
// end ; end ;
76043: GO 76046
76045: POP
// result := list ;
76046: LD_ADDR_VAR 0 4
76050: PUSH
76051: LD_VAR 0 5
76055: ST_TO_ADDR
// end ;
76056: LD_VAR 0 4
76060: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76061: LD_INT 0
76063: PPUSH
76064: PPUSH
76065: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76066: LD_VAR 0 1
76070: NOT
76071: PUSH
76072: LD_VAR 0 2
76076: PUSH
76077: LD_INT 1
76079: PUSH
76080: LD_INT 2
76082: PUSH
76083: LD_INT 3
76085: PUSH
76086: LD_INT 4
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: IN
76095: NOT
76096: OR
76097: IFFALSE 76101
// exit ;
76099: GO 76184
// tmp := [ ] ;
76101: LD_ADDR_VAR 0 5
76105: PUSH
76106: EMPTY
76107: ST_TO_ADDR
// for i in units do
76108: LD_ADDR_VAR 0 4
76112: PUSH
76113: LD_VAR 0 1
76117: PUSH
76118: FOR_IN
76119: IFFALSE 76153
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76121: LD_ADDR_VAR 0 5
76125: PUSH
76126: LD_VAR 0 5
76130: PPUSH
76131: LD_VAR 0 4
76135: PPUSH
76136: LD_VAR 0 2
76140: PPUSH
76141: CALL_OW 259
76145: PPUSH
76146: CALL 77544 0 2
76150: ST_TO_ADDR
76151: GO 76118
76153: POP
76154: POP
// if not tmp then
76155: LD_VAR 0 5
76159: NOT
76160: IFFALSE 76164
// exit ;
76162: GO 76184
// result := SortListByListDesc ( units , tmp ) ;
76164: LD_ADDR_VAR 0 3
76168: PUSH
76169: LD_VAR 0 1
76173: PPUSH
76174: LD_VAR 0 5
76178: PPUSH
76179: CALL_OW 77
76183: ST_TO_ADDR
// end ;
76184: LD_VAR 0 3
76188: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76189: LD_INT 0
76191: PPUSH
76192: PPUSH
76193: PPUSH
// result := false ;
76194: LD_ADDR_VAR 0 3
76198: PUSH
76199: LD_INT 0
76201: ST_TO_ADDR
// if not building then
76202: LD_VAR 0 2
76206: NOT
76207: IFFALSE 76211
// exit ;
76209: GO 76349
// x := GetX ( building ) ;
76211: LD_ADDR_VAR 0 4
76215: PUSH
76216: LD_VAR 0 2
76220: PPUSH
76221: CALL_OW 250
76225: ST_TO_ADDR
// y := GetY ( building ) ;
76226: LD_ADDR_VAR 0 5
76230: PUSH
76231: LD_VAR 0 2
76235: PPUSH
76236: CALL_OW 251
76240: ST_TO_ADDR
// if not x or not y then
76241: LD_VAR 0 4
76245: NOT
76246: PUSH
76247: LD_VAR 0 5
76251: NOT
76252: OR
76253: IFFALSE 76257
// exit ;
76255: GO 76349
// if GetTaskList ( unit ) then
76257: LD_VAR 0 1
76261: PPUSH
76262: CALL_OW 437
76266: IFFALSE 76349
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76268: LD_STRING e
76270: PUSH
76271: LD_VAR 0 1
76275: PPUSH
76276: CALL_OW 437
76280: PUSH
76281: LD_INT 1
76283: ARRAY
76284: PUSH
76285: LD_INT 1
76287: ARRAY
76288: EQUAL
76289: PUSH
76290: LD_VAR 0 4
76294: PUSH
76295: LD_VAR 0 1
76299: PPUSH
76300: CALL_OW 437
76304: PUSH
76305: LD_INT 1
76307: ARRAY
76308: PUSH
76309: LD_INT 2
76311: ARRAY
76312: EQUAL
76313: AND
76314: PUSH
76315: LD_VAR 0 5
76319: PUSH
76320: LD_VAR 0 1
76324: PPUSH
76325: CALL_OW 437
76329: PUSH
76330: LD_INT 1
76332: ARRAY
76333: PUSH
76334: LD_INT 3
76336: ARRAY
76337: EQUAL
76338: AND
76339: IFFALSE 76349
// result := true end ;
76341: LD_ADDR_VAR 0 3
76345: PUSH
76346: LD_INT 1
76348: ST_TO_ADDR
// end ;
76349: LD_VAR 0 3
76353: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76354: LD_INT 0
76356: PPUSH
// result := false ;
76357: LD_ADDR_VAR 0 4
76361: PUSH
76362: LD_INT 0
76364: ST_TO_ADDR
// if GetTaskList ( unit ) then
76365: LD_VAR 0 1
76369: PPUSH
76370: CALL_OW 437
76374: IFFALSE 76457
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76376: LD_STRING M
76378: PUSH
76379: LD_VAR 0 1
76383: PPUSH
76384: CALL_OW 437
76388: PUSH
76389: LD_INT 1
76391: ARRAY
76392: PUSH
76393: LD_INT 1
76395: ARRAY
76396: EQUAL
76397: PUSH
76398: LD_VAR 0 2
76402: PUSH
76403: LD_VAR 0 1
76407: PPUSH
76408: CALL_OW 437
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PUSH
76417: LD_INT 2
76419: ARRAY
76420: EQUAL
76421: AND
76422: PUSH
76423: LD_VAR 0 3
76427: PUSH
76428: LD_VAR 0 1
76432: PPUSH
76433: CALL_OW 437
76437: PUSH
76438: LD_INT 1
76440: ARRAY
76441: PUSH
76442: LD_INT 3
76444: ARRAY
76445: EQUAL
76446: AND
76447: IFFALSE 76457
// result := true ;
76449: LD_ADDR_VAR 0 4
76453: PUSH
76454: LD_INT 1
76456: ST_TO_ADDR
// end ; end ;
76457: LD_VAR 0 4
76461: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76462: LD_INT 0
76464: PPUSH
76465: PPUSH
76466: PPUSH
76467: PPUSH
// if not unit or not area then
76468: LD_VAR 0 1
76472: NOT
76473: PUSH
76474: LD_VAR 0 2
76478: NOT
76479: OR
76480: IFFALSE 76484
// exit ;
76482: GO 76647
// tmp := AreaToList ( area , i ) ;
76484: LD_ADDR_VAR 0 6
76488: PUSH
76489: LD_VAR 0 2
76493: PPUSH
76494: LD_VAR 0 5
76498: PPUSH
76499: CALL_OW 517
76503: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76504: LD_ADDR_VAR 0 5
76508: PUSH
76509: DOUBLE
76510: LD_INT 1
76512: DEC
76513: ST_TO_ADDR
76514: LD_VAR 0 6
76518: PUSH
76519: LD_INT 1
76521: ARRAY
76522: PUSH
76523: FOR_TO
76524: IFFALSE 76645
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76526: LD_ADDR_VAR 0 7
76530: PUSH
76531: LD_VAR 0 6
76535: PUSH
76536: LD_INT 1
76538: ARRAY
76539: PUSH
76540: LD_VAR 0 5
76544: ARRAY
76545: PUSH
76546: LD_VAR 0 6
76550: PUSH
76551: LD_INT 2
76553: ARRAY
76554: PUSH
76555: LD_VAR 0 5
76559: ARRAY
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76565: LD_INT 92
76567: PUSH
76568: LD_VAR 0 7
76572: PUSH
76573: LD_INT 1
76575: ARRAY
76576: PUSH
76577: LD_VAR 0 7
76581: PUSH
76582: LD_INT 2
76584: ARRAY
76585: PUSH
76586: LD_INT 3
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: LIST
76593: LIST
76594: PPUSH
76595: CALL_OW 69
76599: PUSH
76600: LD_INT 0
76602: EQUAL
76603: IFFALSE 76643
// begin PlaceUnitArea ( unit , area , mode ) ;
76605: LD_VAR 0 1
76609: PPUSH
76610: LD_VAR 0 2
76614: PPUSH
76615: LD_VAR 0 3
76619: PPUSH
76620: CALL_OW 49
// result := IsPlaced ( unit ) ;
76624: LD_ADDR_VAR 0 4
76628: PUSH
76629: LD_VAR 0 1
76633: PPUSH
76634: CALL_OW 305
76638: ST_TO_ADDR
// exit ;
76639: POP
76640: POP
76641: GO 76647
// end ; end ;
76643: GO 76523
76645: POP
76646: POP
// end ;
76647: LD_VAR 0 4
76651: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76652: LD_INT 0
76654: PPUSH
76655: PPUSH
76656: PPUSH
// if not side or side > 8 then
76657: LD_VAR 0 1
76661: NOT
76662: PUSH
76663: LD_VAR 0 1
76667: PUSH
76668: LD_INT 8
76670: GREATER
76671: OR
76672: IFFALSE 76676
// exit ;
76674: GO 76863
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76676: LD_ADDR_VAR 0 4
76680: PUSH
76681: LD_INT 22
76683: PUSH
76684: LD_VAR 0 1
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: LD_INT 21
76695: PUSH
76696: LD_INT 3
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PPUSH
76707: CALL_OW 69
76711: ST_TO_ADDR
// if not tmp then
76712: LD_VAR 0 4
76716: NOT
76717: IFFALSE 76721
// exit ;
76719: GO 76863
// enable_addtolog := true ;
76721: LD_ADDR_OWVAR 81
76725: PUSH
76726: LD_INT 1
76728: ST_TO_ADDR
// AddToLog ( [ ) ;
76729: LD_STRING [
76731: PPUSH
76732: CALL_OW 561
// for i in tmp do
76736: LD_ADDR_VAR 0 3
76740: PUSH
76741: LD_VAR 0 4
76745: PUSH
76746: FOR_IN
76747: IFFALSE 76854
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76749: LD_STRING [
76751: PUSH
76752: LD_VAR 0 3
76756: PPUSH
76757: CALL_OW 266
76761: STR
76762: PUSH
76763: LD_STRING , 
76765: STR
76766: PUSH
76767: LD_VAR 0 3
76771: PPUSH
76772: CALL_OW 250
76776: STR
76777: PUSH
76778: LD_STRING , 
76780: STR
76781: PUSH
76782: LD_VAR 0 3
76786: PPUSH
76787: CALL_OW 251
76791: STR
76792: PUSH
76793: LD_STRING , 
76795: STR
76796: PUSH
76797: LD_VAR 0 3
76801: PPUSH
76802: CALL_OW 254
76806: STR
76807: PUSH
76808: LD_STRING , 
76810: STR
76811: PUSH
76812: LD_VAR 0 3
76816: PPUSH
76817: LD_INT 1
76819: PPUSH
76820: CALL_OW 268
76824: STR
76825: PUSH
76826: LD_STRING , 
76828: STR
76829: PUSH
76830: LD_VAR 0 3
76834: PPUSH
76835: LD_INT 2
76837: PPUSH
76838: CALL_OW 268
76842: STR
76843: PUSH
76844: LD_STRING ],
76846: STR
76847: PPUSH
76848: CALL_OW 561
// end ;
76852: GO 76746
76854: POP
76855: POP
// AddToLog ( ]; ) ;
76856: LD_STRING ];
76858: PPUSH
76859: CALL_OW 561
// end ;
76863: LD_VAR 0 2
76867: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76868: LD_INT 0
76870: PPUSH
76871: PPUSH
76872: PPUSH
76873: PPUSH
76874: PPUSH
// if not area or not rate or not max then
76875: LD_VAR 0 1
76879: NOT
76880: PUSH
76881: LD_VAR 0 2
76885: NOT
76886: OR
76887: PUSH
76888: LD_VAR 0 4
76892: NOT
76893: OR
76894: IFFALSE 76898
// exit ;
76896: GO 77087
// while 1 do
76898: LD_INT 1
76900: IFFALSE 77087
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76902: LD_ADDR_VAR 0 9
76906: PUSH
76907: LD_VAR 0 1
76911: PPUSH
76912: LD_INT 1
76914: PPUSH
76915: CALL_OW 287
76919: PUSH
76920: LD_INT 10
76922: MUL
76923: ST_TO_ADDR
// r := rate / 10 ;
76924: LD_ADDR_VAR 0 7
76928: PUSH
76929: LD_VAR 0 2
76933: PUSH
76934: LD_INT 10
76936: DIVREAL
76937: ST_TO_ADDR
// time := 1 1$00 ;
76938: LD_ADDR_VAR 0 8
76942: PUSH
76943: LD_INT 2100
76945: ST_TO_ADDR
// if amount < min then
76946: LD_VAR 0 9
76950: PUSH
76951: LD_VAR 0 3
76955: LESS
76956: IFFALSE 76974
// r := r * 2 else
76958: LD_ADDR_VAR 0 7
76962: PUSH
76963: LD_VAR 0 7
76967: PUSH
76968: LD_INT 2
76970: MUL
76971: ST_TO_ADDR
76972: GO 77000
// if amount > max then
76974: LD_VAR 0 9
76978: PUSH
76979: LD_VAR 0 4
76983: GREATER
76984: IFFALSE 77000
// r := r / 2 ;
76986: LD_ADDR_VAR 0 7
76990: PUSH
76991: LD_VAR 0 7
76995: PUSH
76996: LD_INT 2
76998: DIVREAL
76999: ST_TO_ADDR
// time := time / r ;
77000: LD_ADDR_VAR 0 8
77004: PUSH
77005: LD_VAR 0 8
77009: PUSH
77010: LD_VAR 0 7
77014: DIVREAL
77015: ST_TO_ADDR
// if time < 0 then
77016: LD_VAR 0 8
77020: PUSH
77021: LD_INT 0
77023: LESS
77024: IFFALSE 77041
// time := time * - 1 ;
77026: LD_ADDR_VAR 0 8
77030: PUSH
77031: LD_VAR 0 8
77035: PUSH
77036: LD_INT 1
77038: NEG
77039: MUL
77040: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77041: LD_VAR 0 8
77045: PUSH
77046: LD_INT 35
77048: PPUSH
77049: LD_INT 875
77051: PPUSH
77052: CALL_OW 12
77056: PLUS
77057: PPUSH
77058: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77062: LD_INT 1
77064: PPUSH
77065: LD_INT 5
77067: PPUSH
77068: CALL_OW 12
77072: PPUSH
77073: LD_VAR 0 1
77077: PPUSH
77078: LD_INT 1
77080: PPUSH
77081: CALL_OW 55
// end ;
77085: GO 76898
// end ;
77087: LD_VAR 0 5
77091: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77092: LD_INT 0
77094: PPUSH
77095: PPUSH
77096: PPUSH
77097: PPUSH
77098: PPUSH
77099: PPUSH
77100: PPUSH
77101: PPUSH
// if not turrets or not factories then
77102: LD_VAR 0 1
77106: NOT
77107: PUSH
77108: LD_VAR 0 2
77112: NOT
77113: OR
77114: IFFALSE 77118
// exit ;
77116: GO 77425
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77118: LD_ADDR_VAR 0 10
77122: PUSH
77123: LD_INT 5
77125: PUSH
77126: LD_INT 6
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: PUSH
77133: LD_INT 2
77135: PUSH
77136: LD_INT 4
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 3
77145: PUSH
77146: LD_INT 5
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: LIST
77157: PUSH
77158: LD_INT 24
77160: PUSH
77161: LD_INT 25
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: LD_INT 23
77170: PUSH
77171: LD_INT 27
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: LD_INT 42
77184: PUSH
77185: LD_INT 43
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: PUSH
77192: LD_INT 44
77194: PUSH
77195: LD_INT 46
77197: PUSH
77198: EMPTY
77199: LIST
77200: LIST
77201: PUSH
77202: LD_INT 45
77204: PUSH
77205: LD_INT 47
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: LIST
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: LIST
77221: ST_TO_ADDR
// result := [ ] ;
77222: LD_ADDR_VAR 0 3
77226: PUSH
77227: EMPTY
77228: ST_TO_ADDR
// for i in turrets do
77229: LD_ADDR_VAR 0 4
77233: PUSH
77234: LD_VAR 0 1
77238: PUSH
77239: FOR_IN
77240: IFFALSE 77423
// begin nat := GetNation ( i ) ;
77242: LD_ADDR_VAR 0 7
77246: PUSH
77247: LD_VAR 0 4
77251: PPUSH
77252: CALL_OW 248
77256: ST_TO_ADDR
// weapon := 0 ;
77257: LD_ADDR_VAR 0 8
77261: PUSH
77262: LD_INT 0
77264: ST_TO_ADDR
// if not nat then
77265: LD_VAR 0 7
77269: NOT
77270: IFFALSE 77274
// continue ;
77272: GO 77239
// for j in list [ nat ] do
77274: LD_ADDR_VAR 0 5
77278: PUSH
77279: LD_VAR 0 10
77283: PUSH
77284: LD_VAR 0 7
77288: ARRAY
77289: PUSH
77290: FOR_IN
77291: IFFALSE 77332
// if GetBWeapon ( i ) = j [ 1 ] then
77293: LD_VAR 0 4
77297: PPUSH
77298: CALL_OW 269
77302: PUSH
77303: LD_VAR 0 5
77307: PUSH
77308: LD_INT 1
77310: ARRAY
77311: EQUAL
77312: IFFALSE 77330
// begin weapon := j [ 2 ] ;
77314: LD_ADDR_VAR 0 8
77318: PUSH
77319: LD_VAR 0 5
77323: PUSH
77324: LD_INT 2
77326: ARRAY
77327: ST_TO_ADDR
// break ;
77328: GO 77332
// end ;
77330: GO 77290
77332: POP
77333: POP
// if not weapon then
77334: LD_VAR 0 8
77338: NOT
77339: IFFALSE 77343
// continue ;
77341: GO 77239
// for k in factories do
77343: LD_ADDR_VAR 0 6
77347: PUSH
77348: LD_VAR 0 2
77352: PUSH
77353: FOR_IN
77354: IFFALSE 77419
// begin weapons := AvailableWeaponList ( k ) ;
77356: LD_ADDR_VAR 0 9
77360: PUSH
77361: LD_VAR 0 6
77365: PPUSH
77366: CALL_OW 478
77370: ST_TO_ADDR
// if not weapons then
77371: LD_VAR 0 9
77375: NOT
77376: IFFALSE 77380
// continue ;
77378: GO 77353
// if weapon in weapons then
77380: LD_VAR 0 8
77384: PUSH
77385: LD_VAR 0 9
77389: IN
77390: IFFALSE 77417
// begin result := [ i , weapon ] ;
77392: LD_ADDR_VAR 0 3
77396: PUSH
77397: LD_VAR 0 4
77401: PUSH
77402: LD_VAR 0 8
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: ST_TO_ADDR
// exit ;
77411: POP
77412: POP
77413: POP
77414: POP
77415: GO 77425
// end ; end ;
77417: GO 77353
77419: POP
77420: POP
// end ;
77421: GO 77239
77423: POP
77424: POP
// end ;
77425: LD_VAR 0 3
77429: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77430: LD_INT 0
77432: PPUSH
// if not side or side > 8 then
77433: LD_VAR 0 3
77437: NOT
77438: PUSH
77439: LD_VAR 0 3
77443: PUSH
77444: LD_INT 8
77446: GREATER
77447: OR
77448: IFFALSE 77452
// exit ;
77450: GO 77511
// if not range then
77452: LD_VAR 0 4
77456: NOT
77457: IFFALSE 77468
// range := - 12 ;
77459: LD_ADDR_VAR 0 4
77463: PUSH
77464: LD_INT 12
77466: NEG
77467: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77468: LD_VAR 0 1
77472: PPUSH
77473: LD_VAR 0 2
77477: PPUSH
77478: LD_VAR 0 3
77482: PPUSH
77483: LD_VAR 0 4
77487: PPUSH
77488: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77492: LD_VAR 0 1
77496: PPUSH
77497: LD_VAR 0 2
77501: PPUSH
77502: LD_VAR 0 3
77506: PPUSH
77507: CALL_OW 331
// end ;
77511: LD_VAR 0 5
77515: RET
// export function Video ( mode ) ; begin
77516: LD_INT 0
77518: PPUSH
// ingame_video = mode ;
77519: LD_ADDR_OWVAR 52
77523: PUSH
77524: LD_VAR 0 1
77528: ST_TO_ADDR
// interface_hidden = mode ;
77529: LD_ADDR_OWVAR 54
77533: PUSH
77534: LD_VAR 0 1
77538: ST_TO_ADDR
// end ;
77539: LD_VAR 0 2
77543: RET
// export function Join ( array , element ) ; begin
77544: LD_INT 0
77546: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77547: LD_ADDR_VAR 0 3
77551: PUSH
77552: LD_VAR 0 1
77556: PPUSH
77557: LD_VAR 0 1
77561: PUSH
77562: LD_INT 1
77564: PLUS
77565: PPUSH
77566: LD_VAR 0 2
77570: PPUSH
77571: CALL_OW 1
77575: ST_TO_ADDR
// end ;
77576: LD_VAR 0 3
77580: RET
// export function JoinUnion ( array , element ) ; begin
77581: LD_INT 0
77583: PPUSH
// result := array union element ;
77584: LD_ADDR_VAR 0 3
77588: PUSH
77589: LD_VAR 0 1
77593: PUSH
77594: LD_VAR 0 2
77598: UNION
77599: ST_TO_ADDR
// end ;
77600: LD_VAR 0 3
77604: RET
// export function GetBehemoths ( side ) ; begin
77605: LD_INT 0
77607: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77608: LD_ADDR_VAR 0 2
77612: PUSH
77613: LD_INT 22
77615: PUSH
77616: LD_VAR 0 1
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: LD_INT 31
77627: PUSH
77628: LD_INT 25
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PPUSH
77639: CALL_OW 69
77643: ST_TO_ADDR
// end ;
77644: LD_VAR 0 2
77648: RET
// export function Shuffle ( array ) ; var i , index ; begin
77649: LD_INT 0
77651: PPUSH
77652: PPUSH
77653: PPUSH
// result := [ ] ;
77654: LD_ADDR_VAR 0 2
77658: PUSH
77659: EMPTY
77660: ST_TO_ADDR
// if not array then
77661: LD_VAR 0 1
77665: NOT
77666: IFFALSE 77670
// exit ;
77668: GO 77769
// Randomize ;
77670: CALL_OW 10
// for i = array downto 1 do
77674: LD_ADDR_VAR 0 3
77678: PUSH
77679: DOUBLE
77680: LD_VAR 0 1
77684: INC
77685: ST_TO_ADDR
77686: LD_INT 1
77688: PUSH
77689: FOR_DOWNTO
77690: IFFALSE 77767
// begin index := rand ( 1 , array ) ;
77692: LD_ADDR_VAR 0 4
77696: PUSH
77697: LD_INT 1
77699: PPUSH
77700: LD_VAR 0 1
77704: PPUSH
77705: CALL_OW 12
77709: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77710: LD_ADDR_VAR 0 2
77714: PUSH
77715: LD_VAR 0 2
77719: PPUSH
77720: LD_VAR 0 2
77724: PUSH
77725: LD_INT 1
77727: PLUS
77728: PPUSH
77729: LD_VAR 0 1
77733: PUSH
77734: LD_VAR 0 4
77738: ARRAY
77739: PPUSH
77740: CALL_OW 2
77744: ST_TO_ADDR
// array := Delete ( array , index ) ;
77745: LD_ADDR_VAR 0 1
77749: PUSH
77750: LD_VAR 0 1
77754: PPUSH
77755: LD_VAR 0 4
77759: PPUSH
77760: CALL_OW 3
77764: ST_TO_ADDR
// end ;
77765: GO 77689
77767: POP
77768: POP
// end ;
77769: LD_VAR 0 2
77773: RET
// export function GetBaseMaterials ( base ) ; begin
77774: LD_INT 0
77776: PPUSH
// result := [ 0 , 0 , 0 ] ;
77777: LD_ADDR_VAR 0 2
77781: PUSH
77782: LD_INT 0
77784: PUSH
77785: LD_INT 0
77787: PUSH
77788: LD_INT 0
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: LIST
77795: ST_TO_ADDR
// if not base then
77796: LD_VAR 0 1
77800: NOT
77801: IFFALSE 77805
// exit ;
77803: GO 77854
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77805: LD_ADDR_VAR 0 2
77809: PUSH
77810: LD_VAR 0 1
77814: PPUSH
77815: LD_INT 1
77817: PPUSH
77818: CALL_OW 275
77822: PUSH
77823: LD_VAR 0 1
77827: PPUSH
77828: LD_INT 2
77830: PPUSH
77831: CALL_OW 275
77835: PUSH
77836: LD_VAR 0 1
77840: PPUSH
77841: LD_INT 3
77843: PPUSH
77844: CALL_OW 275
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: LIST
77853: ST_TO_ADDR
// end ;
77854: LD_VAR 0 2
77858: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77859: LD_INT 0
77861: PPUSH
77862: PPUSH
// result := array ;
77863: LD_ADDR_VAR 0 3
77867: PUSH
77868: LD_VAR 0 1
77872: ST_TO_ADDR
// if size >= result then
77873: LD_VAR 0 2
77877: PUSH
77878: LD_VAR 0 3
77882: GREATEREQUAL
77883: IFFALSE 77887
// exit ;
77885: GO 77937
// if size then
77887: LD_VAR 0 2
77891: IFFALSE 77937
// for i := array downto size do
77893: LD_ADDR_VAR 0 4
77897: PUSH
77898: DOUBLE
77899: LD_VAR 0 1
77903: INC
77904: ST_TO_ADDR
77905: LD_VAR 0 2
77909: PUSH
77910: FOR_DOWNTO
77911: IFFALSE 77935
// result := Delete ( result , result ) ;
77913: LD_ADDR_VAR 0 3
77917: PUSH
77918: LD_VAR 0 3
77922: PPUSH
77923: LD_VAR 0 3
77927: PPUSH
77928: CALL_OW 3
77932: ST_TO_ADDR
77933: GO 77910
77935: POP
77936: POP
// end ;
77937: LD_VAR 0 3
77941: RET
// export function ComExit ( unit ) ; var tmp ; begin
77942: LD_INT 0
77944: PPUSH
77945: PPUSH
// if not IsInUnit ( unit ) then
77946: LD_VAR 0 1
77950: PPUSH
77951: CALL_OW 310
77955: NOT
77956: IFFALSE 77960
// exit ;
77958: GO 78020
// tmp := IsInUnit ( unit ) ;
77960: LD_ADDR_VAR 0 3
77964: PUSH
77965: LD_VAR 0 1
77969: PPUSH
77970: CALL_OW 310
77974: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77975: LD_VAR 0 3
77979: PPUSH
77980: CALL_OW 247
77984: PUSH
77985: LD_INT 2
77987: EQUAL
77988: IFFALSE 78001
// ComExitVehicle ( unit ) else
77990: LD_VAR 0 1
77994: PPUSH
77995: CALL_OW 121
77999: GO 78010
// ComExitBuilding ( unit ) ;
78001: LD_VAR 0 1
78005: PPUSH
78006: CALL_OW 122
// result := tmp ;
78010: LD_ADDR_VAR 0 2
78014: PUSH
78015: LD_VAR 0 3
78019: ST_TO_ADDR
// end ;
78020: LD_VAR 0 2
78024: RET
// export function ComExitAll ( units ) ; var i ; begin
78025: LD_INT 0
78027: PPUSH
78028: PPUSH
// if not units then
78029: LD_VAR 0 1
78033: NOT
78034: IFFALSE 78038
// exit ;
78036: GO 78064
// for i in units do
78038: LD_ADDR_VAR 0 3
78042: PUSH
78043: LD_VAR 0 1
78047: PUSH
78048: FOR_IN
78049: IFFALSE 78062
// ComExit ( i ) ;
78051: LD_VAR 0 3
78055: PPUSH
78056: CALL 77942 0 1
78060: GO 78048
78062: POP
78063: POP
// end ;
78064: LD_VAR 0 2
78068: RET
// export function ResetHc ; begin
78069: LD_INT 0
78071: PPUSH
// InitHc ;
78072: CALL_OW 19
// hc_importance := 0 ;
78076: LD_ADDR_OWVAR 32
78080: PUSH
78081: LD_INT 0
78083: ST_TO_ADDR
// end ;
78084: LD_VAR 0 1
78088: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78089: LD_INT 0
78091: PPUSH
78092: PPUSH
78093: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78094: LD_ADDR_VAR 0 6
78098: PUSH
78099: LD_VAR 0 1
78103: PUSH
78104: LD_VAR 0 3
78108: PLUS
78109: PUSH
78110: LD_INT 2
78112: DIV
78113: ST_TO_ADDR
// if _x < 0 then
78114: LD_VAR 0 6
78118: PUSH
78119: LD_INT 0
78121: LESS
78122: IFFALSE 78139
// _x := _x * - 1 ;
78124: LD_ADDR_VAR 0 6
78128: PUSH
78129: LD_VAR 0 6
78133: PUSH
78134: LD_INT 1
78136: NEG
78137: MUL
78138: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78139: LD_ADDR_VAR 0 7
78143: PUSH
78144: LD_VAR 0 2
78148: PUSH
78149: LD_VAR 0 4
78153: PLUS
78154: PUSH
78155: LD_INT 2
78157: DIV
78158: ST_TO_ADDR
// if _y < 0 then
78159: LD_VAR 0 7
78163: PUSH
78164: LD_INT 0
78166: LESS
78167: IFFALSE 78184
// _y := _y * - 1 ;
78169: LD_ADDR_VAR 0 7
78173: PUSH
78174: LD_VAR 0 7
78178: PUSH
78179: LD_INT 1
78181: NEG
78182: MUL
78183: ST_TO_ADDR
// result := [ _x , _y ] ;
78184: LD_ADDR_VAR 0 5
78188: PUSH
78189: LD_VAR 0 6
78193: PUSH
78194: LD_VAR 0 7
78198: PUSH
78199: EMPTY
78200: LIST
78201: LIST
78202: ST_TO_ADDR
// end ;
78203: LD_VAR 0 5
78207: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78208: LD_INT 0
78210: PPUSH
78211: PPUSH
78212: PPUSH
78213: PPUSH
// task := GetTaskList ( unit ) ;
78214: LD_ADDR_VAR 0 7
78218: PUSH
78219: LD_VAR 0 1
78223: PPUSH
78224: CALL_OW 437
78228: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78229: LD_VAR 0 7
78233: NOT
78234: PUSH
78235: LD_VAR 0 1
78239: PPUSH
78240: LD_VAR 0 2
78244: PPUSH
78245: CALL_OW 308
78249: NOT
78250: AND
78251: IFFALSE 78255
// exit ;
78253: GO 78373
// if IsInArea ( unit , area ) then
78255: LD_VAR 0 1
78259: PPUSH
78260: LD_VAR 0 2
78264: PPUSH
78265: CALL_OW 308
78269: IFFALSE 78287
// begin ComMoveToArea ( unit , goAway ) ;
78271: LD_VAR 0 1
78275: PPUSH
78276: LD_VAR 0 3
78280: PPUSH
78281: CALL_OW 113
// exit ;
78285: GO 78373
// end ; if task [ 1 ] [ 1 ] <> M then
78287: LD_VAR 0 7
78291: PUSH
78292: LD_INT 1
78294: ARRAY
78295: PUSH
78296: LD_INT 1
78298: ARRAY
78299: PUSH
78300: LD_STRING M
78302: NONEQUAL
78303: IFFALSE 78307
// exit ;
78305: GO 78373
// x := task [ 1 ] [ 2 ] ;
78307: LD_ADDR_VAR 0 5
78311: PUSH
78312: LD_VAR 0 7
78316: PUSH
78317: LD_INT 1
78319: ARRAY
78320: PUSH
78321: LD_INT 2
78323: ARRAY
78324: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78325: LD_ADDR_VAR 0 6
78329: PUSH
78330: LD_VAR 0 7
78334: PUSH
78335: LD_INT 1
78337: ARRAY
78338: PUSH
78339: LD_INT 3
78341: ARRAY
78342: ST_TO_ADDR
// if InArea ( x , y , area ) then
78343: LD_VAR 0 5
78347: PPUSH
78348: LD_VAR 0 6
78352: PPUSH
78353: LD_VAR 0 2
78357: PPUSH
78358: CALL_OW 309
78362: IFFALSE 78373
// ComStop ( unit ) ;
78364: LD_VAR 0 1
78368: PPUSH
78369: CALL_OW 141
// end ;
78373: LD_VAR 0 4
78377: RET
// export function Abs ( value ) ; begin
78378: LD_INT 0
78380: PPUSH
// result := value ;
78381: LD_ADDR_VAR 0 2
78385: PUSH
78386: LD_VAR 0 1
78390: ST_TO_ADDR
// if value < 0 then
78391: LD_VAR 0 1
78395: PUSH
78396: LD_INT 0
78398: LESS
78399: IFFALSE 78416
// result := value * - 1 ;
78401: LD_ADDR_VAR 0 2
78405: PUSH
78406: LD_VAR 0 1
78410: PUSH
78411: LD_INT 1
78413: NEG
78414: MUL
78415: ST_TO_ADDR
// end ;
78416: LD_VAR 0 2
78420: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78421: LD_INT 0
78423: PPUSH
78424: PPUSH
78425: PPUSH
78426: PPUSH
78427: PPUSH
78428: PPUSH
78429: PPUSH
78430: PPUSH
// if not unit or not building then
78431: LD_VAR 0 1
78435: NOT
78436: PUSH
78437: LD_VAR 0 2
78441: NOT
78442: OR
78443: IFFALSE 78447
// exit ;
78445: GO 78673
// x := GetX ( building ) ;
78447: LD_ADDR_VAR 0 4
78451: PUSH
78452: LD_VAR 0 2
78456: PPUSH
78457: CALL_OW 250
78461: ST_TO_ADDR
// y := GetY ( building ) ;
78462: LD_ADDR_VAR 0 6
78466: PUSH
78467: LD_VAR 0 2
78471: PPUSH
78472: CALL_OW 251
78476: ST_TO_ADDR
// d := GetDir ( building ) ;
78477: LD_ADDR_VAR 0 8
78481: PUSH
78482: LD_VAR 0 2
78486: PPUSH
78487: CALL_OW 254
78491: ST_TO_ADDR
// r := 4 ;
78492: LD_ADDR_VAR 0 9
78496: PUSH
78497: LD_INT 4
78499: ST_TO_ADDR
// for i := 1 to 5 do
78500: LD_ADDR_VAR 0 10
78504: PUSH
78505: DOUBLE
78506: LD_INT 1
78508: DEC
78509: ST_TO_ADDR
78510: LD_INT 5
78512: PUSH
78513: FOR_TO
78514: IFFALSE 78671
// begin _x := ShiftX ( x , d , r + i ) ;
78516: LD_ADDR_VAR 0 5
78520: PUSH
78521: LD_VAR 0 4
78525: PPUSH
78526: LD_VAR 0 8
78530: PPUSH
78531: LD_VAR 0 9
78535: PUSH
78536: LD_VAR 0 10
78540: PLUS
78541: PPUSH
78542: CALL_OW 272
78546: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78547: LD_ADDR_VAR 0 7
78551: PUSH
78552: LD_VAR 0 6
78556: PPUSH
78557: LD_VAR 0 8
78561: PPUSH
78562: LD_VAR 0 9
78566: PUSH
78567: LD_VAR 0 10
78571: PLUS
78572: PPUSH
78573: CALL_OW 273
78577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78578: LD_VAR 0 5
78582: PPUSH
78583: LD_VAR 0 7
78587: PPUSH
78588: CALL_OW 488
78592: PUSH
78593: LD_VAR 0 5
78597: PPUSH
78598: LD_VAR 0 7
78602: PPUSH
78603: CALL_OW 428
78607: PPUSH
78608: CALL_OW 247
78612: PUSH
78613: LD_INT 3
78615: PUSH
78616: LD_INT 2
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: IN
78623: NOT
78624: AND
78625: IFFALSE 78669
// begin ComMoveXY ( unit , _x , _y ) ;
78627: LD_VAR 0 1
78631: PPUSH
78632: LD_VAR 0 5
78636: PPUSH
78637: LD_VAR 0 7
78641: PPUSH
78642: CALL_OW 111
// result := [ _x , _y ] ;
78646: LD_ADDR_VAR 0 3
78650: PUSH
78651: LD_VAR 0 5
78655: PUSH
78656: LD_VAR 0 7
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: ST_TO_ADDR
// exit ;
78665: POP
78666: POP
78667: GO 78673
// end ; end ;
78669: GO 78513
78671: POP
78672: POP
// end ;
78673: LD_VAR 0 3
78677: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78678: LD_INT 0
78680: PPUSH
78681: PPUSH
78682: PPUSH
// result := 0 ;
78683: LD_ADDR_VAR 0 3
78687: PUSH
78688: LD_INT 0
78690: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78691: LD_VAR 0 1
78695: PUSH
78696: LD_INT 0
78698: LESS
78699: PUSH
78700: LD_VAR 0 1
78704: PUSH
78705: LD_INT 8
78707: GREATER
78708: OR
78709: PUSH
78710: LD_VAR 0 2
78714: PUSH
78715: LD_INT 0
78717: LESS
78718: OR
78719: PUSH
78720: LD_VAR 0 2
78724: PUSH
78725: LD_INT 8
78727: GREATER
78728: OR
78729: IFFALSE 78733
// exit ;
78731: GO 78808
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78733: LD_ADDR_VAR 0 4
78737: PUSH
78738: LD_INT 22
78740: PUSH
78741: LD_VAR 0 2
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PPUSH
78750: CALL_OW 69
78754: PUSH
78755: FOR_IN
78756: IFFALSE 78806
// begin un := UnitShoot ( i ) ;
78758: LD_ADDR_VAR 0 5
78762: PUSH
78763: LD_VAR 0 4
78767: PPUSH
78768: CALL_OW 504
78772: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78773: LD_VAR 0 5
78777: PPUSH
78778: CALL_OW 255
78782: PUSH
78783: LD_VAR 0 1
78787: EQUAL
78788: IFFALSE 78804
// begin result := un ;
78790: LD_ADDR_VAR 0 3
78794: PUSH
78795: LD_VAR 0 5
78799: ST_TO_ADDR
// exit ;
78800: POP
78801: POP
78802: GO 78808
// end ; end ;
78804: GO 78755
78806: POP
78807: POP
// end ;
78808: LD_VAR 0 3
78812: RET
// export function GetCargoBay ( units ) ; begin
78813: LD_INT 0
78815: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78816: LD_ADDR_VAR 0 2
78820: PUSH
78821: LD_VAR 0 1
78825: PPUSH
78826: LD_INT 2
78828: PUSH
78829: LD_INT 34
78831: PUSH
78832: LD_INT 12
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 34
78841: PUSH
78842: LD_INT 51
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: PUSH
78849: LD_INT 34
78851: PUSH
78852: LD_INT 32
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 34
78861: PUSH
78862: LD_INT 89
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: EMPTY
78870: LIST
78871: LIST
78872: LIST
78873: LIST
78874: LIST
78875: PPUSH
78876: CALL_OW 72
78880: ST_TO_ADDR
// end ;
78881: LD_VAR 0 2
78885: RET
// export function Negate ( value ) ; begin
78886: LD_INT 0
78888: PPUSH
// result := not value ;
78889: LD_ADDR_VAR 0 2
78893: PUSH
78894: LD_VAR 0 1
78898: NOT
78899: ST_TO_ADDR
// end ;
78900: LD_VAR 0 2
78904: RET
// export function Inc ( value ) ; begin
78905: LD_INT 0
78907: PPUSH
// result := value + 1 ;
78908: LD_ADDR_VAR 0 2
78912: PUSH
78913: LD_VAR 0 1
78917: PUSH
78918: LD_INT 1
78920: PLUS
78921: ST_TO_ADDR
// end ;
78922: LD_VAR 0 2
78926: RET
// export function Dec ( value ) ; begin
78927: LD_INT 0
78929: PPUSH
// result := value - 1 ;
78930: LD_ADDR_VAR 0 2
78934: PUSH
78935: LD_VAR 0 1
78939: PUSH
78940: LD_INT 1
78942: MINUS
78943: ST_TO_ADDR
// end ;
78944: LD_VAR 0 2
78948: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78949: LD_INT 0
78951: PPUSH
78952: PPUSH
78953: PPUSH
78954: PPUSH
78955: PPUSH
78956: PPUSH
78957: PPUSH
78958: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78959: LD_VAR 0 1
78963: PPUSH
78964: LD_VAR 0 2
78968: PPUSH
78969: CALL_OW 488
78973: NOT
78974: PUSH
78975: LD_VAR 0 3
78979: PPUSH
78980: LD_VAR 0 4
78984: PPUSH
78985: CALL_OW 488
78989: NOT
78990: OR
78991: IFFALSE 79004
// begin result := - 1 ;
78993: LD_ADDR_VAR 0 5
78997: PUSH
78998: LD_INT 1
79000: NEG
79001: ST_TO_ADDR
// exit ;
79002: GO 79239
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79004: LD_ADDR_VAR 0 12
79008: PUSH
79009: LD_VAR 0 1
79013: PPUSH
79014: LD_VAR 0 2
79018: PPUSH
79019: LD_VAR 0 3
79023: PPUSH
79024: LD_VAR 0 4
79028: PPUSH
79029: CALL 78089 0 4
79033: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79034: LD_ADDR_VAR 0 11
79038: PUSH
79039: LD_VAR 0 1
79043: PPUSH
79044: LD_VAR 0 2
79048: PPUSH
79049: LD_VAR 0 12
79053: PUSH
79054: LD_INT 1
79056: ARRAY
79057: PPUSH
79058: LD_VAR 0 12
79062: PUSH
79063: LD_INT 2
79065: ARRAY
79066: PPUSH
79067: CALL_OW 298
79071: ST_TO_ADDR
// distance := 9999 ;
79072: LD_ADDR_VAR 0 10
79076: PUSH
79077: LD_INT 9999
79079: ST_TO_ADDR
// for i := 0 to 5 do
79080: LD_ADDR_VAR 0 6
79084: PUSH
79085: DOUBLE
79086: LD_INT 0
79088: DEC
79089: ST_TO_ADDR
79090: LD_INT 5
79092: PUSH
79093: FOR_TO
79094: IFFALSE 79237
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79096: LD_ADDR_VAR 0 7
79100: PUSH
79101: LD_VAR 0 1
79105: PPUSH
79106: LD_VAR 0 6
79110: PPUSH
79111: LD_VAR 0 11
79115: PPUSH
79116: CALL_OW 272
79120: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79121: LD_ADDR_VAR 0 8
79125: PUSH
79126: LD_VAR 0 2
79130: PPUSH
79131: LD_VAR 0 6
79135: PPUSH
79136: LD_VAR 0 11
79140: PPUSH
79141: CALL_OW 273
79145: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79146: LD_VAR 0 7
79150: PPUSH
79151: LD_VAR 0 8
79155: PPUSH
79156: CALL_OW 488
79160: NOT
79161: IFFALSE 79165
// continue ;
79163: GO 79093
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79165: LD_ADDR_VAR 0 9
79169: PUSH
79170: LD_VAR 0 12
79174: PUSH
79175: LD_INT 1
79177: ARRAY
79178: PPUSH
79179: LD_VAR 0 12
79183: PUSH
79184: LD_INT 2
79186: ARRAY
79187: PPUSH
79188: LD_VAR 0 7
79192: PPUSH
79193: LD_VAR 0 8
79197: PPUSH
79198: CALL_OW 298
79202: ST_TO_ADDR
// if tmp < distance then
79203: LD_VAR 0 9
79207: PUSH
79208: LD_VAR 0 10
79212: LESS
79213: IFFALSE 79235
// begin result := i ;
79215: LD_ADDR_VAR 0 5
79219: PUSH
79220: LD_VAR 0 6
79224: ST_TO_ADDR
// distance := tmp ;
79225: LD_ADDR_VAR 0 10
79229: PUSH
79230: LD_VAR 0 9
79234: ST_TO_ADDR
// end ; end ;
79235: GO 79093
79237: POP
79238: POP
// end ;
79239: LD_VAR 0 5
79243: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79244: LD_INT 0
79246: PPUSH
79247: PPUSH
// if not driver or not IsInUnit ( driver ) then
79248: LD_VAR 0 1
79252: NOT
79253: PUSH
79254: LD_VAR 0 1
79258: PPUSH
79259: CALL_OW 310
79263: NOT
79264: OR
79265: IFFALSE 79269
// exit ;
79267: GO 79359
// vehicle := IsInUnit ( driver ) ;
79269: LD_ADDR_VAR 0 3
79273: PUSH
79274: LD_VAR 0 1
79278: PPUSH
79279: CALL_OW 310
79283: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79284: LD_VAR 0 1
79288: PPUSH
79289: LD_STRING \
79291: PUSH
79292: LD_INT 0
79294: PUSH
79295: LD_INT 0
79297: PUSH
79298: LD_INT 0
79300: PUSH
79301: LD_INT 0
79303: PUSH
79304: LD_INT 0
79306: PUSH
79307: LD_INT 0
79309: PUSH
79310: EMPTY
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: PUSH
79319: LD_STRING E
79321: PUSH
79322: LD_INT 0
79324: PUSH
79325: LD_INT 0
79327: PUSH
79328: LD_VAR 0 3
79332: PUSH
79333: LD_INT 0
79335: PUSH
79336: LD_INT 0
79338: PUSH
79339: LD_INT 0
79341: PUSH
79342: EMPTY
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: PUSH
79351: EMPTY
79352: LIST
79353: LIST
79354: PPUSH
79355: CALL_OW 446
// end ;
79359: LD_VAR 0 2
79363: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79364: LD_INT 0
79366: PPUSH
79367: PPUSH
// if not driver or not IsInUnit ( driver ) then
79368: LD_VAR 0 1
79372: NOT
79373: PUSH
79374: LD_VAR 0 1
79378: PPUSH
79379: CALL_OW 310
79383: NOT
79384: OR
79385: IFFALSE 79389
// exit ;
79387: GO 79479
// vehicle := IsInUnit ( driver ) ;
79389: LD_ADDR_VAR 0 3
79393: PUSH
79394: LD_VAR 0 1
79398: PPUSH
79399: CALL_OW 310
79403: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79404: LD_VAR 0 1
79408: PPUSH
79409: LD_STRING \
79411: PUSH
79412: LD_INT 0
79414: PUSH
79415: LD_INT 0
79417: PUSH
79418: LD_INT 0
79420: PUSH
79421: LD_INT 0
79423: PUSH
79424: LD_INT 0
79426: PUSH
79427: LD_INT 0
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: LIST
79434: LIST
79435: LIST
79436: LIST
79437: LIST
79438: PUSH
79439: LD_STRING E
79441: PUSH
79442: LD_INT 0
79444: PUSH
79445: LD_INT 0
79447: PUSH
79448: LD_VAR 0 3
79452: PUSH
79453: LD_INT 0
79455: PUSH
79456: LD_INT 0
79458: PUSH
79459: LD_INT 0
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: LIST
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PPUSH
79475: CALL_OW 447
// end ;
79479: LD_VAR 0 2
79483: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79484: LD_INT 0
79486: PPUSH
79487: PPUSH
79488: PPUSH
// tmp := [ ] ;
79489: LD_ADDR_VAR 0 5
79493: PUSH
79494: EMPTY
79495: ST_TO_ADDR
// for i in units do
79496: LD_ADDR_VAR 0 4
79500: PUSH
79501: LD_VAR 0 1
79505: PUSH
79506: FOR_IN
79507: IFFALSE 79545
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79509: LD_ADDR_VAR 0 5
79513: PUSH
79514: LD_VAR 0 5
79518: PPUSH
79519: LD_VAR 0 5
79523: PUSH
79524: LD_INT 1
79526: PLUS
79527: PPUSH
79528: LD_VAR 0 4
79532: PPUSH
79533: CALL_OW 256
79537: PPUSH
79538: CALL_OW 2
79542: ST_TO_ADDR
79543: GO 79506
79545: POP
79546: POP
// if not tmp then
79547: LD_VAR 0 5
79551: NOT
79552: IFFALSE 79556
// exit ;
79554: GO 79604
// if asc then
79556: LD_VAR 0 2
79560: IFFALSE 79584
// result := SortListByListAsc ( units , tmp ) else
79562: LD_ADDR_VAR 0 3
79566: PUSH
79567: LD_VAR 0 1
79571: PPUSH
79572: LD_VAR 0 5
79576: PPUSH
79577: CALL_OW 76
79581: ST_TO_ADDR
79582: GO 79604
// result := SortListByListDesc ( units , tmp ) ;
79584: LD_ADDR_VAR 0 3
79588: PUSH
79589: LD_VAR 0 1
79593: PPUSH
79594: LD_VAR 0 5
79598: PPUSH
79599: CALL_OW 77
79603: ST_TO_ADDR
// end ;
79604: LD_VAR 0 3
79608: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79609: LD_INT 0
79611: PPUSH
79612: PPUSH
// task := GetTaskList ( mech ) ;
79613: LD_ADDR_VAR 0 4
79617: PUSH
79618: LD_VAR 0 1
79622: PPUSH
79623: CALL_OW 437
79627: ST_TO_ADDR
// if not task then
79628: LD_VAR 0 4
79632: NOT
79633: IFFALSE 79637
// exit ;
79635: GO 79679
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79637: LD_ADDR_VAR 0 3
79641: PUSH
79642: LD_VAR 0 4
79646: PUSH
79647: LD_INT 1
79649: ARRAY
79650: PUSH
79651: LD_INT 1
79653: ARRAY
79654: PUSH
79655: LD_STRING r
79657: EQUAL
79658: PUSH
79659: LD_VAR 0 4
79663: PUSH
79664: LD_INT 1
79666: ARRAY
79667: PUSH
79668: LD_INT 4
79670: ARRAY
79671: PUSH
79672: LD_VAR 0 2
79676: EQUAL
79677: AND
79678: ST_TO_ADDR
// end ;
79679: LD_VAR 0 3
79683: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79684: LD_INT 0
79686: PPUSH
// SetDir ( unit , d ) ;
79687: LD_VAR 0 1
79691: PPUSH
79692: LD_VAR 0 4
79696: PPUSH
79697: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79701: LD_VAR 0 1
79705: PPUSH
79706: LD_VAR 0 2
79710: PPUSH
79711: LD_VAR 0 3
79715: PPUSH
79716: LD_VAR 0 5
79720: PPUSH
79721: CALL_OW 48
// end ;
79725: LD_VAR 0 6
79729: RET
// export function ToNaturalNumber ( number ) ; begin
79730: LD_INT 0
79732: PPUSH
// result := number div 1 ;
79733: LD_ADDR_VAR 0 2
79737: PUSH
79738: LD_VAR 0 1
79742: PUSH
79743: LD_INT 1
79745: DIV
79746: ST_TO_ADDR
// if number < 0 then
79747: LD_VAR 0 1
79751: PUSH
79752: LD_INT 0
79754: LESS
79755: IFFALSE 79765
// result := 0 ;
79757: LD_ADDR_VAR 0 2
79761: PUSH
79762: LD_INT 0
79764: ST_TO_ADDR
// end ;
79765: LD_VAR 0 2
79769: RET
// export function SortByClass ( units , class ) ; var un ; begin
79770: LD_INT 0
79772: PPUSH
79773: PPUSH
// if not units or not class then
79774: LD_VAR 0 1
79778: NOT
79779: PUSH
79780: LD_VAR 0 2
79784: NOT
79785: OR
79786: IFFALSE 79790
// exit ;
79788: GO 79885
// result := [ ] ;
79790: LD_ADDR_VAR 0 3
79794: PUSH
79795: EMPTY
79796: ST_TO_ADDR
// for un in units do
79797: LD_ADDR_VAR 0 4
79801: PUSH
79802: LD_VAR 0 1
79806: PUSH
79807: FOR_IN
79808: IFFALSE 79883
// if GetClass ( un ) = class then
79810: LD_VAR 0 4
79814: PPUSH
79815: CALL_OW 257
79819: PUSH
79820: LD_VAR 0 2
79824: EQUAL
79825: IFFALSE 79852
// result := Insert ( result , 1 , un ) else
79827: LD_ADDR_VAR 0 3
79831: PUSH
79832: LD_VAR 0 3
79836: PPUSH
79837: LD_INT 1
79839: PPUSH
79840: LD_VAR 0 4
79844: PPUSH
79845: CALL_OW 2
79849: ST_TO_ADDR
79850: GO 79881
// result := Replace ( result , result + 1 , un ) ;
79852: LD_ADDR_VAR 0 3
79856: PUSH
79857: LD_VAR 0 3
79861: PPUSH
79862: LD_VAR 0 3
79866: PUSH
79867: LD_INT 1
79869: PLUS
79870: PPUSH
79871: LD_VAR 0 4
79875: PPUSH
79876: CALL_OW 1
79880: ST_TO_ADDR
79881: GO 79807
79883: POP
79884: POP
// end ;
79885: LD_VAR 0 3
79889: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79890: LD_INT 0
79892: PPUSH
79893: PPUSH
79894: PPUSH
79895: PPUSH
79896: PPUSH
79897: PPUSH
79898: PPUSH
// result := [ ] ;
79899: LD_ADDR_VAR 0 4
79903: PUSH
79904: EMPTY
79905: ST_TO_ADDR
// if x - r < 0 then
79906: LD_VAR 0 1
79910: PUSH
79911: LD_VAR 0 3
79915: MINUS
79916: PUSH
79917: LD_INT 0
79919: LESS
79920: IFFALSE 79932
// min_x := 0 else
79922: LD_ADDR_VAR 0 8
79926: PUSH
79927: LD_INT 0
79929: ST_TO_ADDR
79930: GO 79948
// min_x := x - r ;
79932: LD_ADDR_VAR 0 8
79936: PUSH
79937: LD_VAR 0 1
79941: PUSH
79942: LD_VAR 0 3
79946: MINUS
79947: ST_TO_ADDR
// if y - r < 0 then
79948: LD_VAR 0 2
79952: PUSH
79953: LD_VAR 0 3
79957: MINUS
79958: PUSH
79959: LD_INT 0
79961: LESS
79962: IFFALSE 79974
// min_y := 0 else
79964: LD_ADDR_VAR 0 7
79968: PUSH
79969: LD_INT 0
79971: ST_TO_ADDR
79972: GO 79990
// min_y := y - r ;
79974: LD_ADDR_VAR 0 7
79978: PUSH
79979: LD_VAR 0 2
79983: PUSH
79984: LD_VAR 0 3
79988: MINUS
79989: ST_TO_ADDR
// max_x := x + r ;
79990: LD_ADDR_VAR 0 9
79994: PUSH
79995: LD_VAR 0 1
79999: PUSH
80000: LD_VAR 0 3
80004: PLUS
80005: ST_TO_ADDR
// max_y := y + r ;
80006: LD_ADDR_VAR 0 10
80010: PUSH
80011: LD_VAR 0 2
80015: PUSH
80016: LD_VAR 0 3
80020: PLUS
80021: ST_TO_ADDR
// for _x = min_x to max_x do
80022: LD_ADDR_VAR 0 5
80026: PUSH
80027: DOUBLE
80028: LD_VAR 0 8
80032: DEC
80033: ST_TO_ADDR
80034: LD_VAR 0 9
80038: PUSH
80039: FOR_TO
80040: IFFALSE 80141
// for _y = min_y to max_y do
80042: LD_ADDR_VAR 0 6
80046: PUSH
80047: DOUBLE
80048: LD_VAR 0 7
80052: DEC
80053: ST_TO_ADDR
80054: LD_VAR 0 10
80058: PUSH
80059: FOR_TO
80060: IFFALSE 80137
// begin if not ValidHex ( _x , _y ) then
80062: LD_VAR 0 5
80066: PPUSH
80067: LD_VAR 0 6
80071: PPUSH
80072: CALL_OW 488
80076: NOT
80077: IFFALSE 80081
// continue ;
80079: GO 80059
// if GetResourceTypeXY ( _x , _y ) then
80081: LD_VAR 0 5
80085: PPUSH
80086: LD_VAR 0 6
80090: PPUSH
80091: CALL_OW 283
80095: IFFALSE 80135
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80097: LD_ADDR_VAR 0 4
80101: PUSH
80102: LD_VAR 0 4
80106: PPUSH
80107: LD_VAR 0 4
80111: PUSH
80112: LD_INT 1
80114: PLUS
80115: PPUSH
80116: LD_VAR 0 5
80120: PUSH
80121: LD_VAR 0 6
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: PPUSH
80130: CALL_OW 1
80134: ST_TO_ADDR
// end ;
80135: GO 80059
80137: POP
80138: POP
80139: GO 80039
80141: POP
80142: POP
// end ;
80143: LD_VAR 0 4
80147: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80148: LD_INT 0
80150: PPUSH
80151: PPUSH
80152: PPUSH
80153: PPUSH
80154: PPUSH
80155: PPUSH
80156: PPUSH
80157: PPUSH
// if not units then
80158: LD_VAR 0 1
80162: NOT
80163: IFFALSE 80167
// exit ;
80165: GO 80691
// result := UnitFilter ( units , [ f_ok ] ) ;
80167: LD_ADDR_VAR 0 3
80171: PUSH
80172: LD_VAR 0 1
80176: PPUSH
80177: LD_INT 50
80179: PUSH
80180: EMPTY
80181: LIST
80182: PPUSH
80183: CALL_OW 72
80187: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80188: LD_ADDR_VAR 0 8
80192: PUSH
80193: LD_VAR 0 1
80197: PUSH
80198: LD_INT 1
80200: ARRAY
80201: PPUSH
80202: CALL_OW 255
80206: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80207: LD_ADDR_VAR 0 10
80211: PUSH
80212: LD_INT 29
80214: PUSH
80215: LD_INT 91
80217: PUSH
80218: LD_INT 49
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: LIST
80225: ST_TO_ADDR
// if not result then
80226: LD_VAR 0 3
80230: NOT
80231: IFFALSE 80235
// exit ;
80233: GO 80691
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80235: LD_ADDR_VAR 0 5
80239: PUSH
80240: LD_INT 81
80242: PUSH
80243: LD_VAR 0 8
80247: PUSH
80248: EMPTY
80249: LIST
80250: LIST
80251: PPUSH
80252: CALL_OW 69
80256: ST_TO_ADDR
// for i in result do
80257: LD_ADDR_VAR 0 4
80261: PUSH
80262: LD_VAR 0 3
80266: PUSH
80267: FOR_IN
80268: IFFALSE 80689
// begin tag := GetTag ( i ) + 1 ;
80270: LD_ADDR_VAR 0 9
80274: PUSH
80275: LD_VAR 0 4
80279: PPUSH
80280: CALL_OW 110
80284: PUSH
80285: LD_INT 1
80287: PLUS
80288: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80289: LD_ADDR_VAR 0 7
80293: PUSH
80294: LD_VAR 0 4
80298: PPUSH
80299: CALL_OW 250
80303: PPUSH
80304: LD_VAR 0 4
80308: PPUSH
80309: CALL_OW 251
80313: PPUSH
80314: LD_INT 6
80316: PPUSH
80317: CALL 79890 0 3
80321: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80322: LD_VAR 0 4
80326: PPUSH
80327: CALL_OW 247
80331: PUSH
80332: LD_INT 2
80334: EQUAL
80335: PUSH
80336: LD_VAR 0 7
80340: AND
80341: PUSH
80342: LD_VAR 0 4
80346: PPUSH
80347: CALL_OW 264
80351: PUSH
80352: LD_VAR 0 10
80356: IN
80357: NOT
80358: AND
80359: IFFALSE 80398
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80361: LD_VAR 0 4
80365: PPUSH
80366: LD_VAR 0 7
80370: PUSH
80371: LD_INT 1
80373: ARRAY
80374: PUSH
80375: LD_INT 1
80377: ARRAY
80378: PPUSH
80379: LD_VAR 0 7
80383: PUSH
80384: LD_INT 1
80386: ARRAY
80387: PUSH
80388: LD_INT 2
80390: ARRAY
80391: PPUSH
80392: CALL_OW 116
80396: GO 80687
// if path > tag then
80398: LD_VAR 0 2
80402: PUSH
80403: LD_VAR 0 9
80407: GREATER
80408: IFFALSE 80616
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80410: LD_ADDR_VAR 0 6
80414: PUSH
80415: LD_VAR 0 5
80419: PPUSH
80420: LD_INT 91
80422: PUSH
80423: LD_VAR 0 4
80427: PUSH
80428: LD_INT 8
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: LIST
80435: PPUSH
80436: CALL_OW 72
80440: ST_TO_ADDR
// if nearEnemy then
80441: LD_VAR 0 6
80445: IFFALSE 80514
// begin if GetWeapon ( i ) = ru_time_lapser then
80447: LD_VAR 0 4
80451: PPUSH
80452: CALL_OW 264
80456: PUSH
80457: LD_INT 49
80459: EQUAL
80460: IFFALSE 80488
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80462: LD_VAR 0 4
80466: PPUSH
80467: LD_VAR 0 6
80471: PPUSH
80472: LD_VAR 0 4
80476: PPUSH
80477: CALL_OW 74
80481: PPUSH
80482: CALL_OW 112
80486: GO 80512
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80488: LD_VAR 0 4
80492: PPUSH
80493: LD_VAR 0 6
80497: PPUSH
80498: LD_VAR 0 4
80502: PPUSH
80503: CALL_OW 74
80507: PPUSH
80508: CALL_OW 115
// end else
80512: GO 80614
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80514: LD_VAR 0 4
80518: PPUSH
80519: LD_VAR 0 2
80523: PUSH
80524: LD_VAR 0 9
80528: ARRAY
80529: PUSH
80530: LD_INT 1
80532: ARRAY
80533: PPUSH
80534: LD_VAR 0 2
80538: PUSH
80539: LD_VAR 0 9
80543: ARRAY
80544: PUSH
80545: LD_INT 2
80547: ARRAY
80548: PPUSH
80549: CALL_OW 297
80553: PUSH
80554: LD_INT 6
80556: GREATER
80557: IFFALSE 80600
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80559: LD_VAR 0 4
80563: PPUSH
80564: LD_VAR 0 2
80568: PUSH
80569: LD_VAR 0 9
80573: ARRAY
80574: PUSH
80575: LD_INT 1
80577: ARRAY
80578: PPUSH
80579: LD_VAR 0 2
80583: PUSH
80584: LD_VAR 0 9
80588: ARRAY
80589: PUSH
80590: LD_INT 2
80592: ARRAY
80593: PPUSH
80594: CALL_OW 114
80598: GO 80614
// SetTag ( i , tag ) ;
80600: LD_VAR 0 4
80604: PPUSH
80605: LD_VAR 0 9
80609: PPUSH
80610: CALL_OW 109
// end else
80614: GO 80687
// if enemy then
80616: LD_VAR 0 5
80620: IFFALSE 80687
// begin if GetWeapon ( i ) = ru_time_lapser then
80622: LD_VAR 0 4
80626: PPUSH
80627: CALL_OW 264
80631: PUSH
80632: LD_INT 49
80634: EQUAL
80635: IFFALSE 80663
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80637: LD_VAR 0 4
80641: PPUSH
80642: LD_VAR 0 5
80646: PPUSH
80647: LD_VAR 0 4
80651: PPUSH
80652: CALL_OW 74
80656: PPUSH
80657: CALL_OW 112
80661: GO 80687
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80663: LD_VAR 0 4
80667: PPUSH
80668: LD_VAR 0 5
80672: PPUSH
80673: LD_VAR 0 4
80677: PPUSH
80678: CALL_OW 74
80682: PPUSH
80683: CALL_OW 115
// end ; end ;
80687: GO 80267
80689: POP
80690: POP
// end ;
80691: LD_VAR 0 3
80695: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80696: LD_INT 0
80698: PPUSH
80699: PPUSH
80700: PPUSH
// if not unit or IsInUnit ( unit ) then
80701: LD_VAR 0 1
80705: NOT
80706: PUSH
80707: LD_VAR 0 1
80711: PPUSH
80712: CALL_OW 310
80716: OR
80717: IFFALSE 80721
// exit ;
80719: GO 80812
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80721: LD_ADDR_VAR 0 4
80725: PUSH
80726: LD_VAR 0 1
80730: PPUSH
80731: CALL_OW 250
80735: PPUSH
80736: LD_VAR 0 2
80740: PPUSH
80741: LD_INT 1
80743: PPUSH
80744: CALL_OW 272
80748: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80749: LD_ADDR_VAR 0 5
80753: PUSH
80754: LD_VAR 0 1
80758: PPUSH
80759: CALL_OW 251
80763: PPUSH
80764: LD_VAR 0 2
80768: PPUSH
80769: LD_INT 1
80771: PPUSH
80772: CALL_OW 273
80776: ST_TO_ADDR
// if ValidHex ( x , y ) then
80777: LD_VAR 0 4
80781: PPUSH
80782: LD_VAR 0 5
80786: PPUSH
80787: CALL_OW 488
80791: IFFALSE 80812
// ComTurnXY ( unit , x , y ) ;
80793: LD_VAR 0 1
80797: PPUSH
80798: LD_VAR 0 4
80802: PPUSH
80803: LD_VAR 0 5
80807: PPUSH
80808: CALL_OW 118
// end ;
80812: LD_VAR 0 3
80816: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80817: LD_INT 0
80819: PPUSH
80820: PPUSH
// result := false ;
80821: LD_ADDR_VAR 0 3
80825: PUSH
80826: LD_INT 0
80828: ST_TO_ADDR
// if not units then
80829: LD_VAR 0 2
80833: NOT
80834: IFFALSE 80838
// exit ;
80836: GO 80883
// for i in units do
80838: LD_ADDR_VAR 0 4
80842: PUSH
80843: LD_VAR 0 2
80847: PUSH
80848: FOR_IN
80849: IFFALSE 80881
// if See ( side , i ) then
80851: LD_VAR 0 1
80855: PPUSH
80856: LD_VAR 0 4
80860: PPUSH
80861: CALL_OW 292
80865: IFFALSE 80879
// begin result := true ;
80867: LD_ADDR_VAR 0 3
80871: PUSH
80872: LD_INT 1
80874: ST_TO_ADDR
// exit ;
80875: POP
80876: POP
80877: GO 80883
// end ;
80879: GO 80848
80881: POP
80882: POP
// end ;
80883: LD_VAR 0 3
80887: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80888: LD_INT 0
80890: PPUSH
80891: PPUSH
80892: PPUSH
80893: PPUSH
// if not unit or not points then
80894: LD_VAR 0 1
80898: NOT
80899: PUSH
80900: LD_VAR 0 2
80904: NOT
80905: OR
80906: IFFALSE 80910
// exit ;
80908: GO 81000
// dist := 99999 ;
80910: LD_ADDR_VAR 0 5
80914: PUSH
80915: LD_INT 99999
80917: ST_TO_ADDR
// for i in points do
80918: LD_ADDR_VAR 0 4
80922: PUSH
80923: LD_VAR 0 2
80927: PUSH
80928: FOR_IN
80929: IFFALSE 80998
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80931: LD_ADDR_VAR 0 6
80935: PUSH
80936: LD_VAR 0 1
80940: PPUSH
80941: LD_VAR 0 4
80945: PUSH
80946: LD_INT 1
80948: ARRAY
80949: PPUSH
80950: LD_VAR 0 4
80954: PUSH
80955: LD_INT 2
80957: ARRAY
80958: PPUSH
80959: CALL_OW 297
80963: ST_TO_ADDR
// if tmpDist < dist then
80964: LD_VAR 0 6
80968: PUSH
80969: LD_VAR 0 5
80973: LESS
80974: IFFALSE 80996
// begin result := i ;
80976: LD_ADDR_VAR 0 3
80980: PUSH
80981: LD_VAR 0 4
80985: ST_TO_ADDR
// dist := tmpDist ;
80986: LD_ADDR_VAR 0 5
80990: PUSH
80991: LD_VAR 0 6
80995: ST_TO_ADDR
// end ; end ;
80996: GO 80928
80998: POP
80999: POP
// end ;
81000: LD_VAR 0 3
81004: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81005: LD_INT 0
81007: PPUSH
// uc_side := side ;
81008: LD_ADDR_OWVAR 20
81012: PUSH
81013: LD_VAR 0 1
81017: ST_TO_ADDR
// uc_nation := 3 ;
81018: LD_ADDR_OWVAR 21
81022: PUSH
81023: LD_INT 3
81025: ST_TO_ADDR
// vc_chassis := 25 ;
81026: LD_ADDR_OWVAR 37
81030: PUSH
81031: LD_INT 25
81033: ST_TO_ADDR
// vc_engine := engine_siberite ;
81034: LD_ADDR_OWVAR 39
81038: PUSH
81039: LD_INT 3
81041: ST_TO_ADDR
// vc_control := control_computer ;
81042: LD_ADDR_OWVAR 38
81046: PUSH
81047: LD_INT 3
81049: ST_TO_ADDR
// vc_weapon := 59 ;
81050: LD_ADDR_OWVAR 40
81054: PUSH
81055: LD_INT 59
81057: ST_TO_ADDR
// result := CreateVehicle ;
81058: LD_ADDR_VAR 0 5
81062: PUSH
81063: CALL_OW 45
81067: ST_TO_ADDR
// SetDir ( result , d ) ;
81068: LD_VAR 0 5
81072: PPUSH
81073: LD_VAR 0 4
81077: PPUSH
81078: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81082: LD_VAR 0 5
81086: PPUSH
81087: LD_VAR 0 2
81091: PPUSH
81092: LD_VAR 0 3
81096: PPUSH
81097: LD_INT 0
81099: PPUSH
81100: CALL_OW 48
// end ;
81104: LD_VAR 0 5
81108: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81109: LD_INT 0
81111: PPUSH
81112: PPUSH
81113: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81114: LD_ADDR_VAR 0 2
81118: PUSH
81119: LD_INT 0
81121: PUSH
81122: LD_INT 0
81124: PUSH
81125: LD_INT 0
81127: PUSH
81128: LD_INT 0
81130: PUSH
81131: EMPTY
81132: LIST
81133: LIST
81134: LIST
81135: LIST
81136: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81137: LD_VAR 0 1
81141: NOT
81142: PUSH
81143: LD_VAR 0 1
81147: PPUSH
81148: CALL_OW 264
81152: PUSH
81153: LD_INT 12
81155: PUSH
81156: LD_INT 51
81158: PUSH
81159: LD_INT 32
81161: PUSH
81162: LD_INT 89
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: LIST
81169: LIST
81170: IN
81171: NOT
81172: OR
81173: IFFALSE 81177
// exit ;
81175: GO 81275
// for i := 1 to 3 do
81177: LD_ADDR_VAR 0 3
81181: PUSH
81182: DOUBLE
81183: LD_INT 1
81185: DEC
81186: ST_TO_ADDR
81187: LD_INT 3
81189: PUSH
81190: FOR_TO
81191: IFFALSE 81273
// begin tmp := GetCargo ( cargo , i ) ;
81193: LD_ADDR_VAR 0 4
81197: PUSH
81198: LD_VAR 0 1
81202: PPUSH
81203: LD_VAR 0 3
81207: PPUSH
81208: CALL_OW 289
81212: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81213: LD_ADDR_VAR 0 2
81217: PUSH
81218: LD_VAR 0 2
81222: PPUSH
81223: LD_VAR 0 3
81227: PPUSH
81228: LD_VAR 0 4
81232: PPUSH
81233: CALL_OW 1
81237: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81238: LD_ADDR_VAR 0 2
81242: PUSH
81243: LD_VAR 0 2
81247: PPUSH
81248: LD_INT 4
81250: PPUSH
81251: LD_VAR 0 2
81255: PUSH
81256: LD_INT 4
81258: ARRAY
81259: PUSH
81260: LD_VAR 0 4
81264: PLUS
81265: PPUSH
81266: CALL_OW 1
81270: ST_TO_ADDR
// end ;
81271: GO 81190
81273: POP
81274: POP
// end ;
81275: LD_VAR 0 2
81279: RET
// export function Length ( array ) ; begin
81280: LD_INT 0
81282: PPUSH
// result := array + 0 ;
81283: LD_ADDR_VAR 0 2
81287: PUSH
81288: LD_VAR 0 1
81292: PUSH
81293: LD_INT 0
81295: PLUS
81296: ST_TO_ADDR
// end ;
81297: LD_VAR 0 2
81301: RET
// export function PrepareArray ( array ) ; begin
81302: LD_INT 0
81304: PPUSH
// result := array diff 0 ;
81305: LD_ADDR_VAR 0 2
81309: PUSH
81310: LD_VAR 0 1
81314: PUSH
81315: LD_INT 0
81317: DIFF
81318: ST_TO_ADDR
// if not result [ 1 ] then
81319: LD_VAR 0 2
81323: PUSH
81324: LD_INT 1
81326: ARRAY
81327: NOT
81328: IFFALSE 81348
// result := Delete ( result , 1 ) ;
81330: LD_ADDR_VAR 0 2
81334: PUSH
81335: LD_VAR 0 2
81339: PPUSH
81340: LD_INT 1
81342: PPUSH
81343: CALL_OW 3
81347: ST_TO_ADDR
// end ;
81348: LD_VAR 0 2
81352: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81353: LD_INT 0
81355: PPUSH
81356: PPUSH
81357: PPUSH
81358: PPUSH
// sibRocketRange := 25 ;
81359: LD_ADDR_VAR 0 6
81363: PUSH
81364: LD_INT 25
81366: ST_TO_ADDR
// result := false ;
81367: LD_ADDR_VAR 0 4
81371: PUSH
81372: LD_INT 0
81374: ST_TO_ADDR
// for i := 0 to 5 do
81375: LD_ADDR_VAR 0 5
81379: PUSH
81380: DOUBLE
81381: LD_INT 0
81383: DEC
81384: ST_TO_ADDR
81385: LD_INT 5
81387: PUSH
81388: FOR_TO
81389: IFFALSE 81456
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81391: LD_VAR 0 1
81395: PPUSH
81396: LD_VAR 0 5
81400: PPUSH
81401: LD_VAR 0 6
81405: PPUSH
81406: CALL_OW 272
81410: PPUSH
81411: LD_VAR 0 2
81415: PPUSH
81416: LD_VAR 0 5
81420: PPUSH
81421: LD_VAR 0 6
81425: PPUSH
81426: CALL_OW 273
81430: PPUSH
81431: LD_VAR 0 3
81435: PPUSH
81436: CALL_OW 309
81440: IFFALSE 81454
// begin result := true ;
81442: LD_ADDR_VAR 0 4
81446: PUSH
81447: LD_INT 1
81449: ST_TO_ADDR
// exit ;
81450: POP
81451: POP
81452: GO 81458
// end ;
81454: GO 81388
81456: POP
81457: POP
// end ;
81458: LD_VAR 0 4
81462: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81463: LD_INT 0
81465: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81466: LD_VAR 0 1
81470: PPUSH
81471: LD_VAR 0 2
81475: PPUSH
81476: LD_INT 0
81478: PPUSH
81479: LD_INT 0
81481: PPUSH
81482: LD_INT 1
81484: PPUSH
81485: LD_INT 0
81487: PPUSH
81488: CALL_OW 587
// end ;
81492: LD_VAR 0 3
81496: RET
// export function CenterOnNow ( unit ) ; begin
81497: LD_INT 0
81499: PPUSH
// result := IsInUnit ( unit ) ;
81500: LD_ADDR_VAR 0 2
81504: PUSH
81505: LD_VAR 0 1
81509: PPUSH
81510: CALL_OW 310
81514: ST_TO_ADDR
// if not result then
81515: LD_VAR 0 2
81519: NOT
81520: IFFALSE 81532
// result := unit ;
81522: LD_ADDR_VAR 0 2
81526: PUSH
81527: LD_VAR 0 1
81531: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81532: LD_VAR 0 1
81536: PPUSH
81537: CALL_OW 87
// end ; end_of_file
81541: LD_VAR 0 2
81545: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81546: LD_VAR 0 1
81550: PUSH
81551: LD_INT 200
81553: DOUBLE
81554: GREATEREQUAL
81555: IFFALSE 81563
81557: LD_INT 299
81559: DOUBLE
81560: LESSEQUAL
81561: IFTRUE 81565
81563: GO 81597
81565: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81566: LD_VAR 0 1
81570: PPUSH
81571: LD_VAR 0 2
81575: PPUSH
81576: LD_VAR 0 3
81580: PPUSH
81581: LD_VAR 0 4
81585: PPUSH
81586: LD_VAR 0 5
81590: PPUSH
81591: CALL 36339 0 5
81595: GO 81674
81597: LD_INT 300
81599: DOUBLE
81600: GREATEREQUAL
81601: IFFALSE 81609
81603: LD_INT 399
81605: DOUBLE
81606: LESSEQUAL
81607: IFTRUE 81611
81609: GO 81673
81611: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81612: LD_VAR 0 1
81616: PPUSH
81617: LD_VAR 0 2
81621: PPUSH
81622: LD_VAR 0 3
81626: PPUSH
81627: LD_VAR 0 4
81631: PPUSH
81632: LD_VAR 0 5
81636: PPUSH
81637: LD_VAR 0 6
81641: PPUSH
81642: LD_VAR 0 7
81646: PPUSH
81647: LD_VAR 0 8
81651: PPUSH
81652: LD_VAR 0 9
81656: PPUSH
81657: LD_VAR 0 10
81661: PPUSH
81662: LD_VAR 0 11
81666: PPUSH
81667: CALL 32672 0 11
81671: GO 81674
81673: POP
// end ;
81674: PPOPN 11
81676: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81677: LD_VAR 0 1
81681: PPUSH
81682: LD_VAR 0 2
81686: PPUSH
81687: LD_VAR 0 3
81691: PPUSH
81692: LD_VAR 0 4
81696: PPUSH
81697: LD_VAR 0 5
81701: PPUSH
81702: CALL 36075 0 5
// end ; end_of_file
81706: PPOPN 5
81708: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81709: LD_VAR 0 1
81713: PPUSH
81714: LD_VAR 0 2
81718: PPUSH
81719: LD_VAR 0 3
81723: PPUSH
81724: LD_VAR 0 4
81728: PPUSH
81729: LD_VAR 0 5
81733: PPUSH
81734: LD_VAR 0 6
81738: PPUSH
81739: CALL 20324 0 6
// end ;
81743: PPOPN 6
81745: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81746: LD_INT 0
81748: PPUSH
// begin if not units then
81749: LD_VAR 0 1
81753: NOT
81754: IFFALSE 81758
// exit ;
81756: GO 81758
// end ;
81758: PPOPN 7
81760: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81761: CALL 20228 0 0
// end ;
81765: PPOPN 1
81767: END
