// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7608 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareBase ;
 224: CALL 2587 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6379 0 0
// PrepareRussians ;
 236: CALL 6697 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 9018 0 6
// PrepareCutsceneAttack ;
 319: CALL 6431 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 660
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING 04_Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 7115 0 2
 629: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 630: LD_EXP 3
 634: PPUSH
 635: LD_INT 54
 637: PPUSH
 638: LD_INT 25
 640: PPUSH
 641: LD_INT 8
 643: PPUSH
 644: LD_INT 0
 646: PPUSH
 647: CALL_OW 50
// ComHold ( Donaldson ) ;
 651: LD_EXP 3
 655: PPUSH
 656: CALL_OW 140
// end ; if gammaCommander = 2 then
 660: LD_EXP 12
 664: PUSH
 665: LD_INT 2
 667: EQUAL
 668: IFFALSE 716
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 670: LD_ADDR_EXP 2
 674: PUSH
 675: LD_STRING 04_Brown
 677: PPUSH
 678: LD_INT 1
 680: PPUSH
 681: CALL 7115 0 2
 685: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 686: LD_EXP 2
 690: PPUSH
 691: LD_INT 54
 693: PPUSH
 694: LD_INT 25
 696: PPUSH
 697: LD_INT 8
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 50
// ComHold ( Brown ) ;
 707: LD_EXP 2
 711: PPUSH
 712: CALL_OW 140
// end ; if gammaCommander = 3 then
 716: LD_EXP 12
 720: PUSH
 721: LD_INT 3
 723: EQUAL
 724: IFFALSE 772
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_STRING VanHouten
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: CALL 7115 0 2
 741: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 742: LD_EXP 13
 746: PPUSH
 747: LD_INT 54
 749: PPUSH
 750: LD_INT 25
 752: PPUSH
 753: LD_INT 8
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 50
// ComHold ( Houten ) ;
 763: LD_EXP 13
 767: PPUSH
 768: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 772: LD_ADDR_EXP 22
 776: PUSH
 777: LD_STRING Harisson
 779: PPUSH
 780: LD_INT 0
 782: PPUSH
 783: CALL 7115 0 2
 787: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 788: LD_ADDR_EXP 23
 792: PUSH
 793: LD_STRING Powell
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: CALL 7115 0 2
 803: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 804: LD_STRING 04_Lisa
 806: PUSH
 807: EMPTY
 808: LIST
 809: PPUSH
 810: CALL_OW 28
 814: PUSH
 815: LD_STRING LisaInDelta
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 30
 825: NOT
 826: AND
 827: PUSH
 828: LD_STRING 07_Lisa
 830: PUSH
 831: EMPTY
 832: LIST
 833: PPUSH
 834: CALL_OW 28
 838: NOT
 839: AND
 840: IFFALSE 876
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 842: LD_ADDR_EXP 6
 846: PUSH
 847: LD_STRING 04_Lisa
 849: PPUSH
 850: LD_INT 1
 852: PPUSH
 853: CALL 7115 0 2
 857: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 858: LD_ADDR_VAR 0 15
 862: PUSH
 863: LD_VAR 0 15
 867: PUSH
 868: LD_EXP 6
 872: ADD
 873: ST_TO_ADDR
// end else
 874: GO 928
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 876: LD_EXP 6
 880: NOT
 881: PUSH
 882: LD_STRING LisaIn07
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 30
 892: NOT
 893: AND
 894: IFFALSE 928
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 896: LD_ADDR_EXP 6
 900: PUSH
 901: LD_STRING 07_Lisa
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL 7115 0 2
 911: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 912: LD_ADDR_VAR 0 15
 916: PUSH
 917: LD_VAR 0 15
 921: PUSH
 922: LD_EXP 6
 926: ADD
 927: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 928: LD_STRING 04_Bobby
 930: PUSH
 931: EMPTY
 932: LIST
 933: PPUSH
 934: CALL_OW 28
 938: PUSH
 939: LD_STRING BobbyInDelta
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 30
 949: NOT
 950: AND
 951: PUSH
 952: LD_STRING 07_Bobby
 954: PUSH
 955: EMPTY
 956: LIST
 957: PPUSH
 958: CALL_OW 28
 962: NOT
 963: AND
 964: IFFALSE 1000
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 966: LD_ADDR_EXP 4
 970: PUSH
 971: LD_STRING 04_Bobby
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: CALL 7115 0 2
 981: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 982: LD_ADDR_VAR 0 15
 986: PUSH
 987: LD_VAR 0 15
 991: PUSH
 992: LD_EXP 4
 996: ADD
 997: ST_TO_ADDR
// end else
 998: GO 1052
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1000: LD_EXP 4
1004: NOT
1005: PUSH
1006: LD_STRING BobbyIn07
1008: PPUSH
1009: LD_INT 0
1011: PPUSH
1012: CALL_OW 30
1016: NOT
1017: AND
1018: IFFALSE 1052
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
1020: LD_ADDR_EXP 4
1024: PUSH
1025: LD_STRING 07_Bobby
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL 7115 0 2
1035: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1036: LD_ADDR_VAR 0 15
1040: PUSH
1041: LD_VAR 0 15
1045: PUSH
1046: LD_EXP 4
1050: ADD
1051: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1052: LD_STRING 04_Cyrus
1054: PUSH
1055: EMPTY
1056: LIST
1057: PPUSH
1058: CALL_OW 28
1062: PUSH
1063: LD_STRING CyrusInDelta
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 30
1073: NOT
1074: AND
1075: PUSH
1076: LD_STRING 07_Cyrus
1078: PUSH
1079: EMPTY
1080: LIST
1081: PPUSH
1082: CALL_OW 28
1086: NOT
1087: AND
1088: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1090: LD_ADDR_EXP 5
1094: PUSH
1095: LD_STRING 04_Cyrus
1097: PPUSH
1098: LD_INT 1
1100: PPUSH
1101: CALL 7115 0 2
1105: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1106: LD_ADDR_VAR 0 15
1110: PUSH
1111: LD_VAR 0 15
1115: PUSH
1116: LD_EXP 5
1120: ADD
1121: ST_TO_ADDR
// end else
1122: GO 1176
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1124: LD_EXP 5
1128: NOT
1129: PUSH
1130: LD_STRING CyrusIn07
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 30
1140: NOT
1141: AND
1142: IFFALSE 1176
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1144: LD_ADDR_EXP 5
1148: PUSH
1149: LD_STRING 07_Cyrus
1151: PPUSH
1152: LD_INT 1
1154: PPUSH
1155: CALL 7115 0 2
1159: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1160: LD_ADDR_VAR 0 15
1164: PUSH
1165: LD_VAR 0 15
1169: PUSH
1170: LD_EXP 5
1174: ADD
1175: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1176: LD_STRING 04_Brown
1178: PUSH
1179: EMPTY
1180: LIST
1181: PPUSH
1182: CALL_OW 28
1186: PUSH
1187: LD_STRING BrownInDelta
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: CALL_OW 30
1197: NOT
1198: AND
1199: PUSH
1200: LD_STRING 07_Brown
1202: PUSH
1203: EMPTY
1204: LIST
1205: PPUSH
1206: CALL_OW 28
1210: NOT
1211: AND
1212: PUSH
1213: LD_EXP 12
1217: PUSH
1218: LD_INT 2
1220: NONEQUAL
1221: AND
1222: IFFALSE 1258
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1224: LD_ADDR_EXP 2
1228: PUSH
1229: LD_STRING 04_Brown
1231: PPUSH
1232: LD_INT 1
1234: PPUSH
1235: CALL 7115 0 2
1239: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1240: LD_ADDR_VAR 0 15
1244: PUSH
1245: LD_VAR 0 15
1249: PUSH
1250: LD_EXP 2
1254: ADD
1255: ST_TO_ADDR
// end else
1256: GO 1320
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1258: LD_EXP 2
1262: NOT
1263: PUSH
1264: LD_STRING BrownIn07
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 30
1274: NOT
1275: AND
1276: PUSH
1277: LD_EXP 12
1281: PUSH
1282: LD_INT 2
1284: NONEQUAL
1285: AND
1286: IFFALSE 1320
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1288: LD_ADDR_EXP 2
1292: PUSH
1293: LD_STRING 07_Brown
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL 7115 0 2
1303: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1304: LD_ADDR_VAR 0 15
1308: PUSH
1309: LD_VAR 0 15
1313: PUSH
1314: LD_EXP 2
1318: ADD
1319: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1320: LD_STRING 04_Donaldson
1322: PUSH
1323: EMPTY
1324: LIST
1325: PPUSH
1326: CALL_OW 28
1330: PUSH
1331: LD_STRING DonaldsonInDelta
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: AND
1343: PUSH
1344: LD_STRING 07_Donaldson
1346: PUSH
1347: EMPTY
1348: LIST
1349: PPUSH
1350: CALL_OW 28
1354: NOT
1355: AND
1356: PUSH
1357: LD_EXP 12
1361: PUSH
1362: LD_INT 1
1364: NONEQUAL
1365: AND
1366: IFFALSE 1402
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1368: LD_ADDR_EXP 3
1372: PUSH
1373: LD_STRING 04_Donaldson
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 7115 0 2
1383: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1384: LD_ADDR_VAR 0 15
1388: PUSH
1389: LD_VAR 0 15
1393: PUSH
1394: LD_EXP 3
1398: ADD
1399: ST_TO_ADDR
// end else
1400: GO 1464
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1402: LD_EXP 3
1406: NOT
1407: PUSH
1408: LD_STRING DonaldsonIn07
1410: PPUSH
1411: LD_INT 0
1413: PPUSH
1414: CALL_OW 30
1418: NOT
1419: AND
1420: PUSH
1421: LD_EXP 12
1425: PUSH
1426: LD_INT 1
1428: NONEQUAL
1429: AND
1430: IFFALSE 1464
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1432: LD_ADDR_EXP 3
1436: PUSH
1437: LD_STRING 07_Donaldson
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 7115 0 2
1447: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1448: LD_ADDR_VAR 0 15
1452: PUSH
1453: LD_VAR 0 15
1457: PUSH
1458: LD_EXP 3
1462: ADD
1463: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1464: LD_STRING KhatamIn07
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 30
1474: NOT
1475: IFFALSE 1509
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1477: LD_ADDR_EXP 10
1481: PUSH
1482: LD_STRING 07_Khatam
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: CALL 7115 0 2
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 10
1507: ADD
1508: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1509: LD_ADDR_EXP 11
1513: PUSH
1514: LD_STRING 07_othersGamma
1516: PPUSH
1517: CALL_OW 31
1521: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1522: LD_ADDR_VAR 0 14
1526: PUSH
1527: LD_INT 8
1529: PUSH
1530: LD_EXP 11
1534: MINUS
1535: ST_TO_ADDR
// if tmp then
1536: LD_VAR 0 14
1540: IFFALSE 1593
// for i = 1 to tmp do
1542: LD_ADDR_VAR 0 2
1546: PUSH
1547: DOUBLE
1548: LD_INT 1
1550: DEC
1551: ST_TO_ADDR
1552: LD_VAR 0 14
1556: PUSH
1557: FOR_TO
1558: IFFALSE 1591
// begin PrepareHuman ( false , 1 , 5 ) ;
1560: LD_INT 0
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: LD_INT 5
1568: PPUSH
1569: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1573: LD_ADDR_EXP 11
1577: PUSH
1578: LD_EXP 11
1582: PUSH
1583: CALL_OW 44
1587: ADD
1588: ST_TO_ADDR
// end ;
1589: GO 1557
1591: POP
1592: POP
// if HexInfo ( 61 , 29 ) = 0 then
1593: LD_INT 61
1595: PPUSH
1596: LD_INT 29
1598: PPUSH
1599: CALL_OW 428
1603: PUSH
1604: LD_INT 0
1606: EQUAL
1607: IFFALSE 1638
// begin bc_type := b_barracks ;
1609: LD_ADDR_OWVAR 42
1613: PUSH
1614: LD_INT 5
1616: ST_TO_ADDR
// bc_level := 6 ;
1617: LD_ADDR_OWVAR 43
1621: PUSH
1622: LD_INT 6
1624: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1625: LD_INT 61
1627: PPUSH
1628: LD_INT 29
1630: PPUSH
1631: LD_INT 5
1633: PPUSH
1634: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1638: LD_ADDR_VAR 0 13
1642: PUSH
1643: LD_INT 22
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 30
1655: PUSH
1656: LD_INT 31
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: CALL_OW 69
1671: ST_TO_ADDR
// for i in bun do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: LD_VAR 0 13
1681: PUSH
1682: FOR_IN
1683: IFFALSE 1815
// begin x := GetX ( i ) ;
1685: LD_ADDR_VAR 0 3
1689: PUSH
1690: LD_VAR 0 2
1694: PPUSH
1695: CALL_OW 250
1699: ST_TO_ADDR
// y := GetY ( i ) ;
1700: LD_ADDR_VAR 0 4
1704: PUSH
1705: LD_VAR 0 2
1709: PPUSH
1710: CALL_OW 251
1714: ST_TO_ADDR
// d := GetDir ( i ) ;
1715: LD_ADDR_VAR 0 5
1719: PUSH
1720: LD_VAR 0 2
1724: PPUSH
1725: CALL_OW 254
1729: ST_TO_ADDR
// RemoveUnit ( i ) ;
1730: LD_VAR 0 2
1734: PPUSH
1735: CALL_OW 64
// bc_type := b_bunker ;
1739: LD_ADDR_OWVAR 42
1743: PUSH
1744: LD_INT 32
1746: ST_TO_ADDR
// bc_level := 6 ;
1747: LD_ADDR_OWVAR 43
1751: PUSH
1752: LD_INT 6
1754: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1755: LD_ADDR_VAR 0 6
1759: PUSH
1760: LD_VAR 0 3
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: LD_VAR 0 5
1774: PPUSH
1775: CALL_OW 47
1779: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1780: LD_VAR 0 6
1784: PPUSH
1785: LD_INT 5
1787: PUSH
1788: LD_INT 4
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: PUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 2
1802: MOD
1803: PUSH
1804: LD_INT 1
1806: PLUS
1807: ARRAY
1808: PPUSH
1809: CALL_OW 431
// end ;
1813: GO 1682
1815: POP
1816: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1817: LD_ADDR_VAR 0 9
1821: PUSH
1822: LD_INT 22
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 30
1834: PUSH
1835: LD_INT 5
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PPUSH
1846: CALL_OW 69
1850: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1851: LD_ADDR_VAR 0 8
1855: PUSH
1856: LD_INT 22
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 6
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 30
1881: PUSH
1882: LD_INT 7
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 30
1891: PUSH
1892: LD_INT 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PPUSH
1909: CALL_OW 69
1913: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1914: LD_ADDR_VAR 0 7
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 30
1931: PUSH
1932: LD_INT 3
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1948: LD_ADDR_VAR 0 12
1952: PUSH
1953: LD_INT 22
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 30
1965: PUSH
1966: LD_INT 36
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1982: LD_ADDR_VAR 0 13
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 30
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 30
2012: PUSH
2013: LD_INT 32
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: LD_EXP 11
2043: PUSH
2044: LD_VAR 0 15
2048: ADD
2049: PUSH
2050: FOR_IN
2051: IFFALSE 2472
// begin placed := false ;
2053: LD_ADDR_VAR 0 11
2057: PUSH
2058: LD_INT 0
2060: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 257
2070: PUSH
2071: LD_INT 1
2073: EQUAL
2074: IFFALSE 2199
// begin if UnitFilter ( bun , [ f_empty ] ) then
2076: LD_VAR 0 13
2080: PPUSH
2081: LD_INT 58
2083: PUSH
2084: EMPTY
2085: LIST
2086: PPUSH
2087: CALL_OW 72
2091: IFFALSE 2130
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2093: LD_VAR 0 2
2097: PPUSH
2098: LD_VAR 0 13
2102: PPUSH
2103: LD_INT 58
2105: PUSH
2106: EMPTY
2107: LIST
2108: PPUSH
2109: CALL_OW 72
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: PPUSH
2118: CALL_OW 52
// placed := true ;
2122: LD_ADDR_VAR 0 11
2126: PUSH
2127: LD_INT 1
2129: ST_TO_ADDR
// end ; if arm and not placed then
2130: LD_VAR 0 9
2134: PUSH
2135: LD_VAR 0 11
2139: NOT
2140: AND
2141: IFFALSE 2199
// begin for j in arm do
2143: LD_ADDR_VAR 0 10
2147: PUSH
2148: LD_VAR 0 9
2152: PUSH
2153: FOR_IN
2154: IFFALSE 2197
// if UnitsInside ( j ) < 6 then
2156: LD_VAR 0 10
2160: PPUSH
2161: CALL_OW 313
2165: PUSH
2166: LD_INT 6
2168: LESS
2169: IFFALSE 2195
// begin PlaceHumanInUnit ( i , j ) ;
2171: LD_VAR 0 2
2175: PPUSH
2176: LD_VAR 0 10
2180: PPUSH
2181: CALL_OW 52
// placed := true ;
2185: LD_ADDR_VAR 0 11
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// break ;
2193: GO 2197
// end ;
2195: GO 2153
2197: POP
2198: POP
// end ; end ; if GetClass ( i ) = 2 then
2199: LD_VAR 0 2
2203: PPUSH
2204: CALL_OW 257
2208: PUSH
2209: LD_INT 2
2211: EQUAL
2212: IFFALSE 2245
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: LD_INT 20
2224: PPUSH
2225: LD_INT 6
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 50
// placed := true ;
2235: LD_ADDR_VAR 0 11
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// continue ;
2243: GO 2050
// end ; if GetClass ( i ) = 3 then
2245: LD_VAR 0 2
2249: PPUSH
2250: CALL_OW 257
2254: PUSH
2255: LD_INT 3
2257: EQUAL
2258: IFFALSE 2362
// if fac then
2260: LD_VAR 0 7
2264: IFFALSE 2362
// begin if ct then
2266: LD_VAR 0 12
2270: IFFALSE 2298
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2272: LD_VAR 0 2
2276: PPUSH
2277: LD_VAR 0 12
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 52
// placed := true ;
2290: LD_ADDR_VAR 0 11
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// end ; if placed then
2298: LD_VAR 0 11
2302: IFFALSE 2306
// continue ;
2304: GO 2050
// for j in fac do
2306: LD_ADDR_VAR 0 10
2310: PUSH
2311: LD_VAR 0 7
2315: PUSH
2316: FOR_IN
2317: IFFALSE 2360
// if UnitsInside ( j ) < 6 then
2319: LD_VAR 0 10
2323: PPUSH
2324: CALL_OW 313
2328: PUSH
2329: LD_INT 6
2331: LESS
2332: IFFALSE 2358
// begin PlaceHumanInUnit ( i , j ) ;
2334: LD_VAR 0 2
2338: PPUSH
2339: LD_VAR 0 10
2343: PPUSH
2344: CALL_OW 52
// placed := true ;
2348: LD_ADDR_VAR 0 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// break ;
2356: GO 2360
// end ;
2358: GO 2316
2360: POP
2361: POP
// end ; if GetClass ( i ) = 4 then
2362: LD_VAR 0 2
2366: PPUSH
2367: CALL_OW 257
2371: PUSH
2372: LD_INT 4
2374: EQUAL
2375: IFFALSE 2439
// if lab then
2377: LD_VAR 0 8
2381: IFFALSE 2439
// begin for j in lab do
2383: LD_ADDR_VAR 0 10
2387: PUSH
2388: LD_VAR 0 8
2392: PUSH
2393: FOR_IN
2394: IFFALSE 2437
// if UnitsInside ( j ) < 6 then
2396: LD_VAR 0 10
2400: PPUSH
2401: CALL_OW 313
2405: PUSH
2406: LD_INT 6
2408: LESS
2409: IFFALSE 2435
// begin PlaceHumanInUnit ( i , j ) ;
2411: LD_VAR 0 2
2415: PPUSH
2416: LD_VAR 0 10
2420: PPUSH
2421: CALL_OW 52
// placed := true ;
2425: LD_ADDR_VAR 0 11
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// break ;
2433: GO 2437
// end ;
2435: GO 2393
2437: POP
2438: POP
// end ; if not placed then
2439: LD_VAR 0 11
2443: NOT
2444: IFFALSE 2470
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 5
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: CALL_OW 49
// ComHold ( i ) ;
2461: LD_VAR 0 2
2465: PPUSH
2466: CALL_OW 140
// end ; end ;
2470: GO 2050
2472: POP
2473: POP
// if ct then
2474: LD_VAR 0 12
2478: IFFALSE 2582
// if UnitsInside ( ct [ 1 ] ) then
2480: LD_VAR 0 12
2484: PUSH
2485: LD_INT 1
2487: ARRAY
2488: PPUSH
2489: CALL_OW 313
2493: IFFALSE 2582
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2495: LD_ADDR_VAR 0 2
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 1
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 33
2512: PUSH
2513: LD_INT 2
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 69
2528: PUSH
2529: FOR_IN
2530: IFFALSE 2580
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2532: LD_VAR 0 2
2536: PPUSH
2537: LD_VAR 0 12
2541: PUSH
2542: LD_INT 1
2544: ARRAY
2545: PPUSH
2546: CALL_OW 313
2550: PUSH
2551: LD_INT 1
2553: PPUSH
2554: LD_VAR 0 12
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 313
2567: PPUSH
2568: CALL_OW 12
2572: ARRAY
2573: PPUSH
2574: CALL_OW 135
2578: GO 2529
2580: POP
2581: POP
// end ; end ;
2582: LD_VAR 0 1
2586: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2587: LD_INT 0
2589: PPUSH
2590: PPUSH
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2595: LD_INT 71
2597: PPUSH
2598: LD_INT 5
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: LD_STRING GammaBase
2615: PPUSH
2616: EMPTY
2617: PPUSH
2618: CALL_OW 30
2622: ST_TO_ADDR
// if not blist then
2623: LD_VAR 0 2
2627: NOT
2628: IFFALSE 2668
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2630: LD_ADDR_VAR 0 2
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: LD_INT 52
2640: PUSH
2641: LD_INT 12
2643: PUSH
2644: LD_INT 3
2646: PUSH
2647: LD_INT 3
2649: PUSH
2650: LD_INT 0
2652: PUSH
2653: LD_INT 0
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: ST_TO_ADDR
// uc_side := 1 ;
2668: LD_ADDR_OWVAR 20
2672: PUSH
2673: LD_INT 1
2675: ST_TO_ADDR
// uc_nation := 1 ;
2676: LD_ADDR_OWVAR 21
2680: PUSH
2681: LD_INT 1
2683: ST_TO_ADDR
// bc_kind1 := - 1 ;
2684: LD_ADDR_OWVAR 44
2688: PUSH
2689: LD_INT 1
2691: NEG
2692: ST_TO_ADDR
// bc_kind2 := - 1 ;
2693: LD_ADDR_OWVAR 45
2697: PUSH
2698: LD_INT 1
2700: NEG
2701: ST_TO_ADDR
// for i in blist do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: LD_VAR 0 2
2711: PUSH
2712: FOR_IN
2713: IFFALSE 2993
// begin bc_type := i [ 1 ] ;
2715: LD_ADDR_OWVAR 42
2719: PUSH
2720: LD_VAR 0 3
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2729: LD_ADDR_OWVAR 43
2733: PUSH
2734: LD_VAR 0 3
2738: PUSH
2739: LD_INT 5
2741: ARRAY
2742: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2743: LD_OWVAR 42
2747: PUSH
2748: LD_INT 6
2750: PUSH
2751: LD_INT 7
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: IN
2758: IFFALSE 2828
// begin bc_type := b_lab_half ;
2760: LD_ADDR_OWVAR 42
2764: PUSH
2765: LD_INT 7
2767: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2768: LD_STRING 06_remoteVehs_1
2770: PPUSH
2771: LD_INT 0
2773: PPUSH
2774: CALL_OW 30
2778: IFFALSE 2828
// begin if i [ 7 ] > 9 then
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 7
2787: ARRAY
2788: PUSH
2789: LD_INT 9
2791: GREATER
2792: IFFALSE 2820
// begin bc_type := b_lab_full ;
2794: LD_ADDR_OWVAR 42
2798: PUSH
2799: LD_INT 8
2801: ST_TO_ADDR
// bc_kind1 := 10 ;
2802: LD_ADDR_OWVAR 44
2806: PUSH
2807: LD_INT 10
2809: ST_TO_ADDR
// bc_kind2 := 15 ;
2810: LD_ADDR_OWVAR 45
2814: PUSH
2815: LD_INT 15
2817: ST_TO_ADDR
// end else
2818: GO 2828
// bc_kind1 := 15 ;
2820: LD_ADDR_OWVAR 44
2824: PUSH
2825: LD_INT 15
2827: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2828: LD_OWVAR 42
2832: PUSH
2833: LD_INT 2
2835: EQUAL
2836: IFFALSE 2846
// bc_type := b_factory ;
2838: LD_ADDR_OWVAR 42
2842: PUSH
2843: LD_INT 3
2845: ST_TO_ADDR
// if bc_type = b_depot then
2846: LD_OWVAR 42
2850: PUSH
2851: LD_INT 0
2853: EQUAL
2854: IFFALSE 2903
// begin bc_type := b_warehouse ;
2856: LD_ADDR_OWVAR 42
2860: PUSH
2861: LD_INT 1
2863: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2864: LD_ADDR_EXP 37
2868: PUSH
2869: LD_VAR 0 3
2873: PUSH
2874: LD_INT 2
2876: ARRAY
2877: PPUSH
2878: LD_VAR 0 3
2882: PUSH
2883: LD_INT 3
2885: ARRAY
2886: PPUSH
2887: LD_VAR 0 3
2891: PUSH
2892: LD_INT 4
2894: ARRAY
2895: PPUSH
2896: CALL_OW 47
2900: ST_TO_ADDR
// continue ;
2901: GO 2712
// end ; if bc_type = b_armoury then
2903: LD_OWVAR 42
2907: PUSH
2908: LD_INT 4
2910: EQUAL
2911: IFFALSE 2921
// bc_type = b_barracks ;
2913: LD_ADDR_OWVAR 42
2917: PUSH
2918: LD_INT 5
2920: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2921: LD_ADDR_VAR 0 4
2925: PUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 2
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 3
2942: ARRAY
2943: PPUSH
2944: LD_VAR 0 3
2948: PUSH
2949: LD_INT 4
2951: ARRAY
2952: PPUSH
2953: CALL_OW 47
2957: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2958: LD_VAR 0 4
2962: PPUSH
2963: CALL_OW 266
2967: PUSH
2968: LD_INT 32
2970: EQUAL
2971: IFFALSE 2991
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2973: LD_VAR 0 4
2977: PPUSH
2978: LD_VAR 0 3
2982: PUSH
2983: LD_INT 7
2985: ARRAY
2986: PPUSH
2987: CALL_OW 431
// end ;
2991: GO 2712
2993: POP
2994: POP
// if not amDepot then
2995: LD_EXP 37
2999: NOT
3000: IFFALSE 3037
// begin bc_type := b_warehouse ;
3002: LD_ADDR_OWVAR 42
3006: PUSH
3007: LD_INT 1
3009: ST_TO_ADDR
// bc_level := 6 ;
3010: LD_ADDR_OWVAR 43
3014: PUSH
3015: LD_INT 6
3017: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3018: LD_ADDR_EXP 37
3022: PUSH
3023: LD_INT 52
3025: PPUSH
3026: LD_INT 12
3028: PPUSH
3029: LD_INT 3
3031: PPUSH
3032: CALL_OW 47
3036: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3037: LD_EXP 37
3041: PPUSH
3042: LD_STRING gamma
3044: PPUSH
3045: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3049: LD_EXP 37
3053: PPUSH
3054: CALL_OW 274
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: LD_INT 500
3064: PUSH
3065: LD_INT 420
3067: PUSH
3068: LD_INT 350
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_OWVAR 67
3080: ARRAY
3081: PPUSH
3082: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 274
3095: PPUSH
3096: LD_INT 2
3098: PPUSH
3099: LD_INT 200
3101: PPUSH
3102: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3106: LD_INT 22
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 30
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 69
3134: IFFALSE 3382
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_INT 22
3143: PUSH
3144: LD_INT 1
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 30
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3174: LD_ADDR_VAR 0 6
3178: PUSH
3179: LD_VAR 0 4
3183: PPUSH
3184: CALL_OW 250
3188: PPUSH
3189: LD_VAR 0 4
3193: PPUSH
3194: CALL_OW 251
3198: PPUSH
3199: LD_VAR 0 4
3203: PPUSH
3204: CALL_OW 254
3208: PPUSH
3209: CALL 16930 0 3
3213: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: LD_INT 19
3221: PUSH
3222: LD_INT 17
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3229: LD_STRING 06_remoteVehs_1
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL_OW 30
3239: IFFALSE 3262
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3241: LD_ADDR_VAR 0 2
3245: PUSH
3246: LD_VAR 0 2
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: LD_INT 22
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// for i in tmp do
3262: LD_ADDR_VAR 0 3
3266: PUSH
3267: LD_VAR 0 6
3271: PUSH
3272: FOR_IN
3273: IFFALSE 3380
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: LD_VAR 0 3
3288: PUSH
3289: LD_INT 2
3291: ARRAY
3292: PPUSH
3293: CALL_OW 428
3297: PUSH
3298: LD_INT 0
3300: EQUAL
3301: IFFALSE 3378
// begin bc_type := blist [ 1 ] ;
3303: LD_ADDR_OWVAR 42
3307: PUSH
3308: LD_VAR 0 2
3312: PUSH
3313: LD_INT 1
3315: ARRAY
3316: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3317: LD_VAR 0 3
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_VAR 0 3
3330: PUSH
3331: LD_INT 2
3333: ARRAY
3334: PPUSH
3335: LD_VAR 0 3
3339: PUSH
3340: LD_INT 3
3342: ARRAY
3343: PPUSH
3344: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3348: LD_ADDR_VAR 0 2
3352: PUSH
3353: LD_VAR 0 2
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: CALL_OW 3
3365: ST_TO_ADDR
// if blist = 0 then
3366: LD_VAR 0 2
3370: PUSH
3371: LD_INT 0
3373: EQUAL
3374: IFFALSE 3378
// break ;
3376: GO 3380
// end ;
3378: GO 3272
3380: POP
3381: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3382: LD_STRING 06_remoteVehs_1
3384: PPUSH
3385: LD_INT 0
3387: PPUSH
3388: CALL_OW 30
3392: IFFALSE 3851
// begin bc_type = 36 ;
3394: LD_ADDR_OWVAR 42
3398: PUSH
3399: LD_INT 36
3401: ST_TO_ADDR
// bc_level = 4 ;
3402: LD_ADDR_OWVAR 43
3406: PUSH
3407: LD_INT 4
3409: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3410: LD_EXP 37
3414: PPUSH
3415: LD_INT 36
3417: PPUSH
3418: LD_INT 62
3420: PPUSH
3421: LD_INT 12
3423: PPUSH
3424: LD_INT 3
3426: PPUSH
3427: LD_INT 0
3429: PPUSH
3430: CALL 17800 0 6
3434: PUSH
3435: LD_INT 92
3437: PUSH
3438: LD_INT 62
3440: PUSH
3441: LD_INT 12
3443: PUSH
3444: LD_INT 3
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: NOT
3458: AND
3459: IFFALSE 3476
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3461: LD_INT 62
3463: PPUSH
3464: LD_INT 12
3466: PPUSH
3467: LD_INT 3
3469: PPUSH
3470: CALL_OW 47
3474: GO 3647
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3476: LD_EXP 37
3480: PPUSH
3481: LD_INT 36
3483: PPUSH
3484: LD_INT 37
3486: PPUSH
3487: LD_INT 18
3489: PPUSH
3490: LD_INT 2
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: CALL 17800 0 6
3500: PUSH
3501: LD_INT 92
3503: PUSH
3504: LD_INT 37
3506: PUSH
3507: LD_INT 18
3509: PUSH
3510: LD_INT 3
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 69
3523: NOT
3524: AND
3525: IFFALSE 3542
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3527: LD_INT 37
3529: PPUSH
3530: LD_INT 18
3532: PPUSH
3533: LD_INT 2
3535: PPUSH
3536: CALL_OW 47
3540: GO 3647
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3542: LD_EXP 37
3546: PPUSH
3547: LD_INT 36
3549: PPUSH
3550: LD_INT 66
3552: PPUSH
3553: LD_INT 14
3555: PPUSH
3556: LD_INT 4
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL 17800 0 6
3566: PUSH
3567: LD_INT 92
3569: PUSH
3570: LD_INT 66
3572: PUSH
3573: LD_INT 14
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 69
3589: NOT
3590: AND
3591: IFFALSE 3608
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3593: LD_INT 66
3595: PPUSH
3596: LD_INT 14
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: CALL_OW 47
3606: GO 3647
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3608: LD_EXP 37
3612: PPUSH
3613: LD_INT 36
3615: PPUSH
3616: LD_INT 74
3618: PPUSH
3619: LD_INT 26
3621: PPUSH
3622: LD_INT 4
3624: PPUSH
3625: LD_INT 0
3627: PPUSH
3628: CALL 17800 0 6
3632: IFFALSE 3647
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3634: LD_INT 74
3636: PPUSH
3637: LD_INT 26
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3647: LD_INT 22
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 36
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PPUSH
3671: CALL_OW 69
3675: NOT
3676: IFFALSE 3680
// exit ;
3678: GO 3851
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: DOUBLE
3686: LD_INT 1
3688: DEC
3689: ST_TO_ADDR
3690: LD_INT 3
3692: PUSH
3693: LD_INT 2
3695: PUSH
3696: LD_INT 2
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: LIST
3703: PUSH
3704: LD_OWVAR 67
3708: ARRAY
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3849
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3713: LD_ADDR_OWVAR 37
3717: PUSH
3718: LD_INT 3
3720: PUSH
3721: LD_INT 2
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: PUSH
3743: LD_INT 2
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_OWVAR 67
3755: ARRAY
3756: ST_TO_ADDR
// vc_engine = 1 ;
3757: LD_ADDR_OWVAR 39
3761: PUSH
3762: LD_INT 1
3764: ST_TO_ADDR
// vc_control = 2 ;
3765: LD_ADDR_OWVAR 38
3769: PUSH
3770: LD_INT 2
3772: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3773: LD_ADDR_OWVAR 40
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 4
3783: PUSH
3784: LD_INT 5
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: PUSH
3792: LD_INT 1
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 12
3802: ARRAY
3803: ST_TO_ADDR
// veh = CreateVehicle ;
3804: LD_ADDR_VAR 0 5
3808: PUSH
3809: CALL_OW 45
3813: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3814: LD_VAR 0 5
3818: PPUSH
3819: LD_INT 4
3821: PPUSH
3822: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_INT 56
3833: PPUSH
3834: LD_INT 17
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_INT 0
3842: PPUSH
3843: CALL_OW 50
// end ;
3847: GO 3710
3849: POP
3850: POP
// end ; end ;
3851: LD_VAR 0 1
3855: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3856: LD_INT 0
3858: PPUSH
3859: PPUSH
3860: PPUSH
3861: PPUSH
// uc_side = 1 ;
3862: LD_ADDR_OWVAR 20
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// uc_nation = 1 ;
3870: LD_ADDR_OWVAR 21
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3878: LD_ADDR_EXP 14
3882: PUSH
3883: LD_STRING 06c_Denis
3885: PPUSH
3886: LD_INT 1
3888: PPUSH
3889: CALL 7115 0 2
3893: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3894: LD_EXP 14
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_INT 0
3904: PPUSH
3905: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3909: LD_ADDR_EXP 15
3913: PUSH
3914: LD_STRING 06c_Joan
3916: PPUSH
3917: LD_INT 1
3919: PPUSH
3920: CALL 7115 0 2
3924: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3925: LD_EXP 15
3929: PPUSH
3930: LD_INT 4
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3940: LD_STRING GladstoneIn07
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: CALL_OW 30
3950: NOT
3951: IFFALSE 4019
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3953: LD_ADDR_EXP 8
3957: PUSH
3958: LD_STRING 06c_Gladstone
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: CALL 7115 0 2
3968: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3969: LD_EXP 8
3973: NOT
3974: PUSH
3975: LD_STRING GladstoneStayInDelta
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 30
3985: AND
3986: IFFALSE 4004
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3988: LD_ADDR_EXP 8
3992: PUSH
3993: LD_STRING 05_Gladstone
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: CALL 7115 0 2
4003: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4004: LD_EXP 8
4008: PPUSH
4009: LD_INT 4
4011: PPUSH
4012: LD_INT 0
4014: PPUSH
4015: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4019: LD_STRING LisaStayInDelta
4021: PPUSH
4022: LD_INT 0
4024: PPUSH
4025: CALL_OW 30
4029: IFFALSE 4062
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
4031: LD_ADDR_EXP 6
4035: PUSH
4036: LD_STRING 05_Lisa
4038: PPUSH
4039: LD_INT 1
4041: PPUSH
4042: CALL 7115 0 2
4046: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4047: LD_EXP 6
4051: PPUSH
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4062: LD_STRING BobbyStayInDelta
4064: PPUSH
4065: LD_INT 0
4067: PPUSH
4068: CALL_OW 30
4072: IFFALSE 4105
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4074: LD_ADDR_EXP 4
4078: PUSH
4079: LD_STRING 05_Bobby
4081: PPUSH
4082: LD_INT 1
4084: PPUSH
4085: CALL 7115 0 2
4089: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4090: LD_EXP 4
4094: PPUSH
4095: LD_INT 4
4097: PPUSH
4098: LD_INT 0
4100: PPUSH
4101: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4105: LD_STRING CyrusStayInDelta
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 30
4115: IFFALSE 4148
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4117: LD_ADDR_EXP 5
4121: PUSH
4122: LD_STRING 05_Cyrus
4124: PPUSH
4125: LD_INT 1
4127: PPUSH
4128: CALL 7115 0 2
4132: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4133: LD_EXP 5
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4148: LD_STRING BrownStayInDelta
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 30
4158: IFFALSE 4191
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4160: LD_ADDR_EXP 2
4164: PUSH
4165: LD_STRING 05_Brown
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: CALL 7115 0 2
4175: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4176: LD_EXP 2
4180: PPUSH
4181: LD_INT 4
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4191: LD_STRING DonaldsonStayInDelta
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL_OW 30
4201: IFFALSE 4234
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4203: LD_ADDR_EXP 3
4207: PUSH
4208: LD_STRING 05_Donaldson
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: CALL 7115 0 2
4218: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4219: LD_EXP 3
4223: PPUSH
4224: LD_INT 4
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4234: LD_ADDR_VAR 0 4
4238: PUSH
4239: LD_STRING OthersStayInDelta
4241: PPUSH
4242: CALL_OW 31
4246: ST_TO_ADDR
// if other > 2 then
4247: LD_VAR 0 4
4251: PUSH
4252: LD_INT 2
4254: GREATER
4255: IFFALSE 4300
// begin for j = 1 to 2 do
4257: LD_ADDR_VAR 0 3
4261: PUSH
4262: DOUBLE
4263: LD_INT 1
4265: DEC
4266: ST_TO_ADDR
4267: LD_INT 2
4269: PUSH
4270: FOR_TO
4271: IFFALSE 4296
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4273: LD_VAR 0 4
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PPUSH
4284: LD_INT 4
4286: PPUSH
4287: LD_INT 0
4289: PPUSH
4290: CALL_OW 49
4294: GO 4270
4296: POP
4297: POP
// end else
4298: GO 4343
// begin for j = 1 to other do
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: DOUBLE
4306: LD_INT 1
4308: DEC
4309: ST_TO_ADDR
4310: LD_VAR 0 4
4314: PUSH
4315: FOR_TO
4316: IFFALSE 4341
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4318: LD_VAR 0 4
4322: PUSH
4323: LD_VAR 0 3
4327: ARRAY
4328: PPUSH
4329: LD_INT 4
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
4339: GO 4315
4341: POP
4342: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4343: LD_ADDR_VAR 0 4
4347: PUSH
4348: LD_STRING 06_other_apemans
4350: PPUSH
4351: CALL_OW 31
4355: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4356: LD_VAR 0 4
4360: PUSH
4361: LD_INT 5
4363: PUSH
4364: LD_INT 4
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: PUSH
4375: LD_OWVAR 67
4379: ARRAY
4380: GREATEREQUAL
4381: IFFALSE 4410
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_OWVAR 67
4406: ARRAY
4407: ST_TO_ADDR
4408: GO 4420
// j := other ;
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: LD_VAR 0 4
4419: ST_TO_ADDR
// for i = 1 to j do
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: DOUBLE
4426: LD_INT 1
4428: DEC
4429: ST_TO_ADDR
4430: LD_VAR 0 3
4434: PUSH
4435: FOR_TO
4436: IFFALSE 4461
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4438: LD_VAR 0 4
4442: PUSH
4443: LD_VAR 0 2
4447: ARRAY
4448: PPUSH
4449: LD_INT 4
4451: PPUSH
4452: LD_INT 0
4454: PPUSH
4455: CALL_OW 49
4459: GO 4435
4461: POP
4462: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4463: LD_INT 4
4465: PPUSH
4466: LD_INT 22
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 21
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 70
4494: PPUSH
4495: LD_INT 53
4497: PPUSH
4498: LD_INT 19
4500: PPUSH
4501: CALL_OW 111
// firstAttack = 1 ;
4505: LD_ADDR_EXP 33
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// end ;
4513: LD_VAR 0 1
4517: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4518: LD_INT 0
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
4524: PPUSH
4525: PPUSH
4526: PPUSH
4527: PPUSH
4528: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4529: LD_ADDR_VAR 0 8
4533: PUSH
4534: LD_STRING 07_vehicles
4536: PPUSH
4537: EMPTY
4538: PPUSH
4539: CALL_OW 30
4543: ST_TO_ADDR
// macmilan_squad := [ ] ;
4544: LD_ADDR_EXP 42
4548: PUSH
4549: EMPTY
4550: ST_TO_ADDR
// tmp_vehs := [ ] ;
4551: LD_ADDR_VAR 0 7
4555: PUSH
4556: EMPTY
4557: ST_TO_ADDR
// uc_side := 1 ;
4558: LD_ADDR_OWVAR 20
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// uc_nation := 1 ;
4566: LD_ADDR_OWVAR 21
4570: PUSH
4571: LD_INT 1
4573: ST_TO_ADDR
// if vehicles then
4574: LD_VAR 0 8
4578: IFFALSE 4737
// begin k := 1 ;
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4588: LD_ADDR_VAR 0 2
4592: PUSH
4593: DOUBLE
4594: LD_INT 1
4596: DEC
4597: ST_TO_ADDR
4598: LD_VAR 0 8
4602: PUSH
4603: LD_INT 4
4605: DIV
4606: PUSH
4607: FOR_TO
4608: IFFALSE 4735
// begin vc_chassis = vehicles [ k ] ;
4610: LD_ADDR_OWVAR 37
4614: PUSH
4615: LD_VAR 0 8
4619: PUSH
4620: LD_VAR 0 3
4624: ARRAY
4625: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4626: LD_ADDR_OWVAR 39
4630: PUSH
4631: LD_VAR 0 8
4635: PUSH
4636: LD_VAR 0 3
4640: PUSH
4641: LD_INT 1
4643: PLUS
4644: ARRAY
4645: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4646: LD_ADDR_OWVAR 38
4650: PUSH
4651: LD_VAR 0 8
4655: PUSH
4656: LD_VAR 0 3
4660: PUSH
4661: LD_INT 2
4663: PLUS
4664: ARRAY
4665: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4666: LD_ADDR_OWVAR 40
4670: PUSH
4671: LD_VAR 0 8
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: LD_INT 3
4683: PLUS
4684: ARRAY
4685: ST_TO_ADDR
// k := k + 4 ;
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: LD_VAR 0 3
4695: PUSH
4696: LD_INT 4
4698: PLUS
4699: ST_TO_ADDR
// veh := CreateVehicle ;
4700: LD_ADDR_VAR 0 9
4704: PUSH
4705: CALL_OW 45
4709: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4710: LD_ADDR_VAR 0 7
4714: PUSH
4715: LD_VAR 0 7
4719: PPUSH
4720: LD_INT 1
4722: PPUSH
4723: LD_VAR 0 9
4727: PPUSH
4728: CALL_OW 2
4732: ST_TO_ADDR
// end ;
4733: GO 4607
4735: POP
4736: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4737: LD_ADDR_EXP 1
4741: PUSH
4742: LD_EXP 44
4746: PUSH
4747: LD_STRING JMM
4749: STR
4750: PPUSH
4751: LD_INT 1
4753: PPUSH
4754: CALL 7115 0 2
4758: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4759: LD_EXP 12
4763: PUSH
4764: LD_INT 1
4766: EQUAL
4767: PUSH
4768: LD_EXP 12
4772: PUSH
4773: LD_INT 3
4775: EQUAL
4776: OR
4777: PUSH
4778: LD_EXP 2
4782: NOT
4783: AND
4784: IFFALSE 4837
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4786: LD_ADDR_EXP 2
4790: PUSH
4791: LD_EXP 44
4795: PUSH
4796: LD_STRING Brown
4798: STR
4799: PPUSH
4800: LD_INT 1
4802: PPUSH
4803: CALL 7115 0 2
4807: ST_TO_ADDR
// if Brown then
4808: LD_EXP 2
4812: IFFALSE 4837
// tmp := Insert ( tmp , 1 , Brown ) ;
4814: LD_ADDR_VAR 0 6
4818: PUSH
4819: LD_VAR 0 6
4823: PPUSH
4824: LD_INT 1
4826: PPUSH
4827: LD_EXP 2
4831: PPUSH
4832: CALL_OW 2
4836: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4837: LD_EXP 12
4841: PUSH
4842: LD_INT 2
4844: EQUAL
4845: PUSH
4846: LD_EXP 12
4850: PUSH
4851: LD_INT 3
4853: EQUAL
4854: OR
4855: PUSH
4856: LD_EXP 3
4860: NOT
4861: AND
4862: IFFALSE 4915
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4864: LD_ADDR_EXP 3
4868: PUSH
4869: LD_EXP 44
4873: PUSH
4874: LD_STRING Donaldson
4876: STR
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: CALL 7115 0 2
4885: ST_TO_ADDR
// if Donaldson then
4886: LD_EXP 3
4890: IFFALSE 4915
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4892: LD_ADDR_VAR 0 6
4896: PUSH
4897: LD_VAR 0 6
4901: PPUSH
4902: LD_INT 1
4904: PPUSH
4905: LD_EXP 3
4909: PPUSH
4910: CALL_OW 2
4914: ST_TO_ADDR
// end ; if not Bobby then
4915: LD_EXP 4
4919: NOT
4920: IFFALSE 4973
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4922: LD_ADDR_EXP 4
4926: PUSH
4927: LD_EXP 44
4931: PUSH
4932: LD_STRING Bobby
4934: STR
4935: PPUSH
4936: LD_INT 1
4938: PPUSH
4939: CALL 7115 0 2
4943: ST_TO_ADDR
// if Bobby then
4944: LD_EXP 4
4948: IFFALSE 4973
// tmp := Insert ( tmp , 1 , Bobby ) ;
4950: LD_ADDR_VAR 0 6
4954: PUSH
4955: LD_VAR 0 6
4959: PPUSH
4960: LD_INT 1
4962: PPUSH
4963: LD_EXP 4
4967: PPUSH
4968: CALL_OW 2
4972: ST_TO_ADDR
// end ; if not Cyrus then
4973: LD_EXP 5
4977: NOT
4978: IFFALSE 5031
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4980: LD_ADDR_EXP 5
4984: PUSH
4985: LD_EXP 44
4989: PUSH
4990: LD_STRING Cyrus
4992: STR
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: CALL 7115 0 2
5001: ST_TO_ADDR
// if Cyrus then
5002: LD_EXP 5
5006: IFFALSE 5031
// tmp := Insert ( tmp , 1 , Cyrus ) ;
5008: LD_ADDR_VAR 0 6
5012: PUSH
5013: LD_VAR 0 6
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: LD_EXP 5
5025: PPUSH
5026: CALL_OW 2
5030: ST_TO_ADDR
// end ; if not Lisa then
5031: LD_EXP 6
5035: NOT
5036: IFFALSE 5089
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5038: LD_ADDR_EXP 6
5042: PUSH
5043: LD_EXP 44
5047: PUSH
5048: LD_STRING Lisa
5050: STR
5051: PPUSH
5052: LD_INT 1
5054: PPUSH
5055: CALL 7115 0 2
5059: ST_TO_ADDR
// if Lisa then
5060: LD_EXP 6
5064: IFFALSE 5089
// tmp := Insert ( tmp , 1 , Lisa ) ;
5066: LD_ADDR_VAR 0 6
5070: PUSH
5071: LD_VAR 0 6
5075: PPUSH
5076: LD_INT 1
5078: PPUSH
5079: LD_EXP 6
5083: PPUSH
5084: CALL_OW 2
5088: ST_TO_ADDR
// end ; if not Frank then
5089: LD_EXP 7
5093: NOT
5094: IFFALSE 5147
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5096: LD_ADDR_EXP 7
5100: PUSH
5101: LD_EXP 44
5105: PUSH
5106: LD_STRING Frank
5108: STR
5109: PPUSH
5110: LD_INT 1
5112: PPUSH
5113: CALL 7115 0 2
5117: ST_TO_ADDR
// if Frank then
5118: LD_EXP 7
5122: IFFALSE 5147
// tmp := Insert ( tmp , 1 , Frank ) ;
5124: LD_ADDR_VAR 0 6
5128: PUSH
5129: LD_VAR 0 6
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_EXP 7
5141: PPUSH
5142: CALL_OW 2
5146: ST_TO_ADDR
// end ; if not Kikuchi then
5147: LD_EXP 9
5151: NOT
5152: IFFALSE 5205
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5154: LD_ADDR_EXP 9
5158: PUSH
5159: LD_EXP 44
5163: PUSH
5164: LD_STRING Kikuchi
5166: STR
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL 7115 0 2
5175: ST_TO_ADDR
// if Kikuchi then
5176: LD_EXP 9
5180: IFFALSE 5205
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5182: LD_ADDR_VAR 0 6
5186: PUSH
5187: LD_VAR 0 6
5191: PPUSH
5192: LD_INT 1
5194: PPUSH
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 2
5204: ST_TO_ADDR
// end ; if not Gladstone then
5205: LD_EXP 8
5209: NOT
5210: IFFALSE 5263
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5212: LD_ADDR_EXP 8
5216: PUSH
5217: LD_EXP 44
5221: PUSH
5222: LD_STRING Gladstone
5224: STR
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL 7115 0 2
5233: ST_TO_ADDR
// if Gladstone then
5234: LD_EXP 8
5238: IFFALSE 5263
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5240: LD_ADDR_VAR 0 6
5244: PUSH
5245: LD_VAR 0 6
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: LD_EXP 8
5257: PPUSH
5258: CALL_OW 2
5262: ST_TO_ADDR
// end ; if not Khatam then
5263: LD_EXP 10
5267: NOT
5268: IFFALSE 5321
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5270: LD_ADDR_EXP 10
5274: PUSH
5275: LD_EXP 44
5279: PUSH
5280: LD_STRING Khatam
5282: STR
5283: PPUSH
5284: LD_INT 1
5286: PPUSH
5287: CALL 7115 0 2
5291: ST_TO_ADDR
// if Khatam then
5292: LD_EXP 10
5296: IFFALSE 5321
// tmp := Insert ( tmp , 1 , Khatam ) ;
5298: LD_ADDR_VAR 0 6
5302: PUSH
5303: LD_VAR 0 6
5307: PPUSH
5308: LD_INT 1
5310: PPUSH
5311: LD_EXP 10
5315: PPUSH
5316: CALL_OW 2
5320: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5321: LD_ADDR_VAR 0 5
5325: PUSH
5326: LD_STRING 07c_others
5328: PPUSH
5329: CALL_OW 31
5333: ST_TO_ADDR
// macmilan_squad := others ;
5334: LD_ADDR_EXP 42
5338: PUSH
5339: LD_VAR 0 5
5343: ST_TO_ADDR
// if others then
5344: LD_VAR 0 5
5348: IFFALSE 5436
// for i in others do
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_VAR 0 5
5359: PUSH
5360: FOR_IN
5361: IFFALSE 5434
// if GetClass ( i ) = 3 then
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 257
5372: PUSH
5373: LD_INT 3
5375: EQUAL
5376: IFFALSE 5403
// tmp := Insert ( tmp , 1 , i ) else
5378: LD_ADDR_VAR 0 6
5382: PUSH
5383: LD_VAR 0 6
5387: PPUSH
5388: LD_INT 1
5390: PPUSH
5391: LD_VAR 0 2
5395: PPUSH
5396: CALL_OW 2
5400: ST_TO_ADDR
5401: GO 5432
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5403: LD_ADDR_VAR 0 6
5407: PUSH
5408: LD_VAR 0 6
5412: PPUSH
5413: LD_VAR 0 6
5417: PUSH
5418: LD_INT 1
5420: PLUS
5421: PPUSH
5422: LD_VAR 0 2
5426: PPUSH
5427: CALL_OW 2
5431: ST_TO_ADDR
5432: GO 5360
5434: POP
5435: POP
// wait ( 0 0$1 ) ;
5436: LD_INT 35
5438: PPUSH
5439: CALL_OW 67
// for i in tmp do
5443: LD_ADDR_VAR 0 2
5447: PUSH
5448: LD_VAR 0 6
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5606
// begin SetDir ( i , 3 ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_INT 3
5463: PPUSH
5464: CALL_OW 233
// if tmp_vehs then
5468: LD_VAR 0 7
5472: IFFALSE 5547
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5474: LD_VAR 0 7
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PPUSH
5483: LD_INT 3
5485: PPUSH
5486: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5490: LD_VAR 0 7
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: PPUSH
5499: LD_INT 4
5501: PPUSH
5502: LD_INT 0
5504: PPUSH
5505: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5509: LD_VAR 0 2
5513: PPUSH
5514: LD_VAR 0 7
5518: PUSH
5519: LD_INT 1
5521: ARRAY
5522: PPUSH
5523: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5527: LD_ADDR_VAR 0 7
5531: PUSH
5532: LD_VAR 0 7
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 3
5544: ST_TO_ADDR
// end else
5545: GO 5562
// PlaceUnitArea ( i , GammaSupport , false ) ;
5547: LD_VAR 0 2
5551: PPUSH
5552: LD_INT 4
5554: PPUSH
5555: LD_INT 0
5557: PPUSH
5558: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 77
5569: PPUSH
5570: LD_INT 16
5572: PPUSH
5573: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5584: LD_INT 4
5586: PPUSH
5587: LD_INT 22
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PPUSH
5597: CALL_OW 70
5601: NOT
5602: IFFALSE 5577
// end ;
5604: GO 5453
5606: POP
5607: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5608: LD_EXP 1
5612: PPUSH
5613: LD_INT 4
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5623: LD_EXP 1
5627: PPUSH
5628: LD_INT 77
5630: PPUSH
5631: LD_INT 16
5633: PPUSH
5634: CALL_OW 111
// end ;
5638: LD_VAR 0 1
5642: RET
// export function PrepareSikorsky ; begin
5643: LD_INT 0
5645: PPUSH
// uc_side = 4 ;
5646: LD_ADDR_OWVAR 20
5650: PUSH
5651: LD_INT 4
5653: ST_TO_ADDR
// uc_nation = 1 ;
5654: LD_ADDR_OWVAR 21
5658: PUSH
5659: LD_INT 1
5661: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5662: LD_ADDR_EXP 16
5666: PUSH
5667: LD_STRING Sikorski
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: CALL 7115 0 2
5677: ST_TO_ADDR
// vc_engine = 1 ;
5678: LD_ADDR_OWVAR 39
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// vc_control = 1 ;
5686: LD_ADDR_OWVAR 38
5690: PUSH
5691: LD_INT 1
5693: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5694: LD_ADDR_OWVAR 40
5698: PUSH
5699: LD_INT 5
5701: PUSH
5702: LD_INT 3
5704: PUSH
5705: LD_INT 4
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: PUSH
5713: LD_OWVAR 67
5717: ARRAY
5718: ST_TO_ADDR
// vc_chassis = 4 ;
5719: LD_ADDR_OWVAR 37
5723: PUSH
5724: LD_INT 4
5726: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5727: LD_ADDR_EXP 17
5731: PUSH
5732: CALL_OW 45
5736: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5737: LD_EXP 17
5741: PPUSH
5742: LD_INT 3
5744: PPUSH
5745: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5749: LD_INT 35
5751: PPUSH
5752: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5756: LD_EXP 17
5760: PPUSH
5761: LD_INT 18
5763: PPUSH
5764: LD_INT 5
5766: PPUSH
5767: LD_INT 0
5769: PPUSH
5770: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5774: LD_EXP 17
5778: PPUSH
5779: CALL_OW 305
5783: IFFALSE 5749
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5785: LD_EXP 16
5789: PPUSH
5790: LD_EXP 17
5794: PPUSH
5795: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5799: LD_EXP 17
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: CALL_OW 113
// end ;
5811: LD_VAR 0 1
5815: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
// InitHc ;
5822: CALL_OW 19
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: DOUBLE
5832: LD_INT 1
5834: DEC
5835: ST_TO_ADDR
5836: LD_INT 8
5838: PUSH
5839: LD_INT 7
5841: PUSH
5842: LD_INT 7
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: PUSH
5850: LD_OWVAR 67
5854: ARRAY
5855: PUSH
5856: FOR_TO
5857: IFFALSE 5973
// begin uc_side = 4 ;
5859: LD_ADDR_OWVAR 20
5863: PUSH
5864: LD_INT 4
5866: ST_TO_ADDR
// uc_nation = 1 ;
5867: LD_ADDR_OWVAR 21
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// hc_name =  ;
5875: LD_ADDR_OWVAR 26
5879: PUSH
5880: LD_STRING 
5882: ST_TO_ADDR
// hc_gallery =  ;
5883: LD_ADDR_OWVAR 33
5887: PUSH
5888: LD_STRING 
5890: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5891: LD_INT 0
5893: PPUSH
5894: LD_INT 1
5896: PPUSH
5897: LD_INT 5
5899: PPUSH
5900: LD_INT 8
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: CALL_OW 380
// un = CreateHuman ;
5912: LD_ADDR_VAR 0 3
5916: PUSH
5917: CALL_OW 44
5921: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5922: LD_VAR 0 3
5926: PPUSH
5927: LD_INT 3
5929: PPUSH
5930: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5934: LD_VAR 0 3
5938: PPUSH
5939: LD_INT 9
5941: PPUSH
5942: LD_INT 0
5944: PPUSH
5945: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5949: LD_VAR 0 3
5953: PPUSH
5954: LD_INT 53
5956: PPUSH
5957: LD_INT 23
5959: PPUSH
5960: CALL_OW 111
// wait ( 0 0$1 ) ;
5964: LD_INT 35
5966: PPUSH
5967: CALL_OW 67
// end ;
5971: GO 5856
5973: POP
5974: POP
// for i = 1 to 3 do
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: DOUBLE
5981: LD_INT 1
5983: DEC
5984: ST_TO_ADDR
5985: LD_INT 3
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6105
// begin uc_side = 4 ;
5991: LD_ADDR_OWVAR 20
5995: PUSH
5996: LD_INT 4
5998: ST_TO_ADDR
// uc_nation = 1 ;
5999: LD_ADDR_OWVAR 21
6003: PUSH
6004: LD_INT 1
6006: ST_TO_ADDR
// hc_name =  ;
6007: LD_ADDR_OWVAR 26
6011: PUSH
6012: LD_STRING 
6014: ST_TO_ADDR
// hc_gallery =  ;
6015: LD_ADDR_OWVAR 33
6019: PUSH
6020: LD_STRING 
6022: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6023: LD_INT 0
6025: PPUSH
6026: LD_INT 4
6028: PPUSH
6029: LD_INT 5
6031: PPUSH
6032: LD_INT 8
6034: PPUSH
6035: CALL_OW 12
6039: PPUSH
6040: CALL_OW 380
// un = CreateHuman ;
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: CALL_OW 44
6053: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6054: LD_VAR 0 3
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6066: LD_VAR 0 3
6070: PPUSH
6071: LD_INT 9
6073: PPUSH
6074: LD_INT 0
6076: PPUSH
6077: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6081: LD_VAR 0 3
6085: PPUSH
6086: LD_INT 53
6088: PPUSH
6089: LD_INT 23
6091: PPUSH
6092: CALL_OW 111
// wait ( 0 0$1 ) ;
6096: LD_INT 35
6098: PPUSH
6099: CALL_OW 67
// end ;
6103: GO 5988
6105: POP
6106: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6107: LD_ADDR_VAR 0 2
6111: PUSH
6112: DOUBLE
6113: LD_INT 1
6115: DEC
6116: ST_TO_ADDR
6117: LD_INT 9
6119: PUSH
6120: LD_INT 8
6122: PUSH
6123: LD_INT 7
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_OWVAR 67
6135: ARRAY
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6372
// begin uc_side = 4 ;
6140: LD_ADDR_OWVAR 20
6144: PUSH
6145: LD_INT 4
6147: ST_TO_ADDR
// uc_nation = 1 ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_INT 1
6155: ST_TO_ADDR
// vc_engine = 1 ;
6156: LD_ADDR_OWVAR 39
6160: PUSH
6161: LD_INT 1
6163: ST_TO_ADDR
// vc_control = 1 ;
6164: LD_ADDR_OWVAR 38
6168: PUSH
6169: LD_INT 1
6171: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6172: LD_ADDR_OWVAR 40
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: LD_INT 4
6182: PUSH
6183: LD_INT 5
6185: PUSH
6186: LD_INT 6
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_VAR 0 2
6199: PUSH
6200: LD_INT 4
6202: MOD
6203: PUSH
6204: LD_INT 1
6206: PLUS
6207: ARRAY
6208: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6209: LD_ADDR_OWVAR 37
6213: PUSH
6214: LD_INT 3
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 4
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_VAR 0 2
6236: PUSH
6237: LD_INT 4
6239: MOD
6240: PUSH
6241: LD_INT 1
6243: PLUS
6244: ARRAY
6245: ST_TO_ADDR
// veh = CreateVehicle ;
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: CALL_OW 45
6255: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6256: LD_VAR 0 4
6260: PPUSH
6261: LD_INT 3
6263: PPUSH
6264: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6268: LD_VAR 0 4
6272: PPUSH
6273: LD_INT 9
6275: PPUSH
6276: LD_INT 0
6278: PPUSH
6279: CALL_OW 49
// InitHc ;
6283: CALL_OW 19
// hc_name =  ;
6287: LD_ADDR_OWVAR 26
6291: PUSH
6292: LD_STRING 
6294: ST_TO_ADDR
// hc_gallery =  ;
6295: LD_ADDR_OWVAR 33
6299: PUSH
6300: LD_STRING 
6302: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6303: LD_INT 0
6305: PPUSH
6306: LD_INT 3
6308: PPUSH
6309: LD_INT 5
6311: PPUSH
6312: LD_INT 8
6314: PPUSH
6315: CALL_OW 12
6319: PPUSH
6320: CALL_OW 380
// un = CreateHuman ;
6324: LD_ADDR_VAR 0 3
6328: PUSH
6329: CALL_OW 44
6333: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6334: LD_VAR 0 3
6338: PPUSH
6339: LD_VAR 0 4
6343: PPUSH
6344: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6348: LD_VAR 0 3
6352: PPUSH
6353: LD_INT 53
6355: PPUSH
6356: LD_INT 23
6358: PPUSH
6359: CALL_OW 111
// wait ( 0 0$5 ) ;
6363: LD_INT 175
6365: PPUSH
6366: CALL_OW 67
// end ;
6370: GO 6137
6372: POP
6373: POP
// end ; end_of_file
6374: LD_VAR 0 1
6378: RET
// export function PrepareRussianCommander ; begin
6379: LD_INT 0
6381: PPUSH
// uc_side = 3 ;
6382: LD_ADDR_OWVAR 20
6386: PUSH
6387: LD_INT 3
6389: ST_TO_ADDR
// uc_nation = 3 ;
6390: LD_ADDR_OWVAR 21
6394: PUSH
6395: LD_INT 3
6397: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6398: LD_ADDR_EXP 24
6402: PUSH
6403: LD_STRING Borodin
6405: PPUSH
6406: CALL_OW 25
6410: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6411: LD_EXP 24
6415: PPUSH
6416: LD_INT 25
6418: PPUSH
6419: LD_INT 0
6421: PPUSH
6422: CALL_OW 49
// end ;
6426: LD_VAR 0 1
6430: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6431: LD_INT 0
6433: PPUSH
6434: PPUSH
6435: PPUSH
6436: PPUSH
// for i = 1 to 10 do
6437: LD_ADDR_VAR 0 2
6441: PUSH
6442: DOUBLE
6443: LD_INT 1
6445: DEC
6446: ST_TO_ADDR
6447: LD_INT 10
6449: PUSH
6450: FOR_TO
6451: IFFALSE 6525
// begin uc_side = 6 ;
6453: LD_ADDR_OWVAR 20
6457: PUSH
6458: LD_INT 6
6460: ST_TO_ADDR
// uc_nation = 3 ;
6461: LD_ADDR_OWVAR 21
6465: PUSH
6466: LD_INT 3
6468: ST_TO_ADDR
// hc_gallery =  ;
6469: LD_ADDR_OWVAR 33
6473: PUSH
6474: LD_STRING 
6476: ST_TO_ADDR
// hc_name =  ;
6477: LD_ADDR_OWVAR 26
6481: PUSH
6482: LD_STRING 
6484: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: LD_INT 3
6493: PPUSH
6494: CALL_OW 380
// un = CreateHuman ;
6498: LD_ADDR_VAR 0 3
6502: PUSH
6503: CALL_OW 44
6507: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6508: LD_VAR 0 3
6512: PPUSH
6513: LD_INT 1
6515: PPUSH
6516: LD_INT 0
6518: PPUSH
6519: CALL_OW 49
// end ;
6523: GO 6450
6525: POP
6526: POP
// for i = 1 to 3 do
6527: LD_ADDR_VAR 0 2
6531: PUSH
6532: DOUBLE
6533: LD_INT 1
6535: DEC
6536: ST_TO_ADDR
6537: LD_INT 3
6539: PUSH
6540: FOR_TO
6541: IFFALSE 6690
// begin uc_side = 6 ;
6543: LD_ADDR_OWVAR 20
6547: PUSH
6548: LD_INT 6
6550: ST_TO_ADDR
// uc_nation = 3 ;
6551: LD_ADDR_OWVAR 21
6555: PUSH
6556: LD_INT 3
6558: ST_TO_ADDR
// vc_engine = 1 ;
6559: LD_ADDR_OWVAR 39
6563: PUSH
6564: LD_INT 1
6566: ST_TO_ADDR
// vc_control = 1 ;
6567: LD_ADDR_OWVAR 38
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6575: LD_ADDR_OWVAR 40
6579: PUSH
6580: LD_INT 43
6582: PUSH
6583: LD_INT 44
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 1
6592: PPUSH
6593: LD_INT 2
6595: PPUSH
6596: CALL_OW 12
6600: ARRAY
6601: ST_TO_ADDR
// vc_chassis = 22 ;
6602: LD_ADDR_OWVAR 37
6606: PUSH
6607: LD_INT 22
6609: ST_TO_ADDR
// veh = CreateVehicle ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: CALL_OW 45
6619: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6620: LD_VAR 0 4
6624: PPUSH
6625: LD_INT 2
6627: PPUSH
6628: LD_INT 0
6630: PPUSH
6631: CALL_OW 49
// hc_gallery =  ;
6635: LD_ADDR_OWVAR 33
6639: PUSH
6640: LD_STRING 
6642: ST_TO_ADDR
// hc_name =  ;
6643: LD_ADDR_OWVAR 26
6647: PUSH
6648: LD_STRING 
6650: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6651: LD_INT 0
6653: PPUSH
6654: LD_INT 3
6656: PPUSH
6657: LD_INT 4
6659: PPUSH
6660: CALL_OW 380
// un = CreateHuman ;
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: CALL_OW 44
6673: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6674: LD_VAR 0 3
6678: PPUSH
6679: LD_VAR 0 4
6683: PPUSH
6684: CALL_OW 52
// end ;
6688: GO 6540
6690: POP
6691: POP
// end ;
6692: LD_VAR 0 1
6696: RET
// export function PrepareRussians ; var i , un ; begin
6697: LD_INT 0
6699: PPUSH
6700: PPUSH
6701: PPUSH
// for i = 1 to 8 do
6702: LD_ADDR_VAR 0 2
6706: PUSH
6707: DOUBLE
6708: LD_INT 1
6710: DEC
6711: ST_TO_ADDR
6712: LD_INT 8
6714: PUSH
6715: FOR_TO
6716: IFFALSE 6802
// begin uc_side = 3 ;
6718: LD_ADDR_OWVAR 20
6722: PUSH
6723: LD_INT 3
6725: ST_TO_ADDR
// uc_nation = 3 ;
6726: LD_ADDR_OWVAR 21
6730: PUSH
6731: LD_INT 3
6733: ST_TO_ADDR
// hc_gallery =  ;
6734: LD_ADDR_OWVAR 33
6738: PUSH
6739: LD_STRING 
6741: ST_TO_ADDR
// hc_name =  ;
6742: LD_ADDR_OWVAR 26
6746: PUSH
6747: LD_STRING 
6749: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6750: LD_INT 0
6752: PPUSH
6753: LD_INT 1
6755: PPUSH
6756: LD_EXP 25
6760: PPUSH
6761: LD_EXP 26
6765: PPUSH
6766: CALL_OW 12
6770: PPUSH
6771: CALL_OW 380
// un = CreateHuman ;
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: CALL_OW 44
6784: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6785: LD_VAR 0 3
6789: PPUSH
6790: LD_INT 3
6792: PPUSH
6793: LD_INT 0
6795: PPUSH
6796: CALL_OW 49
// end ;
6800: GO 6715
6802: POP
6803: POP
// for i = 1 to 4 do
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: DOUBLE
6810: LD_INT 1
6812: DEC
6813: ST_TO_ADDR
6814: LD_INT 4
6816: PUSH
6817: FOR_TO
6818: IFFALSE 6904
// begin uc_side = 3 ;
6820: LD_ADDR_OWVAR 20
6824: PUSH
6825: LD_INT 3
6827: ST_TO_ADDR
// uc_nation = 3 ;
6828: LD_ADDR_OWVAR 21
6832: PUSH
6833: LD_INT 3
6835: ST_TO_ADDR
// hc_gallery =  ;
6836: LD_ADDR_OWVAR 33
6840: PUSH
6841: LD_STRING 
6843: ST_TO_ADDR
// hc_name =  ;
6844: LD_ADDR_OWVAR 26
6848: PUSH
6849: LD_STRING 
6851: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6852: LD_INT 0
6854: PPUSH
6855: LD_INT 2
6857: PPUSH
6858: LD_EXP 25
6862: PPUSH
6863: LD_EXP 26
6867: PPUSH
6868: CALL_OW 12
6872: PPUSH
6873: CALL_OW 380
// un = CreateHuman ;
6877: LD_ADDR_VAR 0 3
6881: PUSH
6882: CALL_OW 44
6886: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6887: LD_VAR 0 3
6891: PPUSH
6892: LD_INT 3
6894: PPUSH
6895: LD_INT 0
6897: PPUSH
6898: CALL_OW 49
// end ;
6902: GO 6817
6904: POP
6905: POP
// for i = 1 to 3 do
6906: LD_ADDR_VAR 0 2
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_INT 3
6918: PUSH
6919: FOR_TO
6920: IFFALSE 7006
// begin uc_side = 3 ;
6922: LD_ADDR_OWVAR 20
6926: PUSH
6927: LD_INT 3
6929: ST_TO_ADDR
// uc_nation = 3 ;
6930: LD_ADDR_OWVAR 21
6934: PUSH
6935: LD_INT 3
6937: ST_TO_ADDR
// hc_gallery =  ;
6938: LD_ADDR_OWVAR 33
6942: PUSH
6943: LD_STRING 
6945: ST_TO_ADDR
// hc_name =  ;
6946: LD_ADDR_OWVAR 26
6950: PUSH
6951: LD_STRING 
6953: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6954: LD_INT 0
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_EXP 25
6964: PPUSH
6965: LD_EXP 26
6969: PPUSH
6970: CALL_OW 12
6974: PPUSH
6975: CALL_OW 380
// un = CreateHuman ;
6979: LD_ADDR_VAR 0 3
6983: PUSH
6984: CALL_OW 44
6988: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6989: LD_VAR 0 3
6993: PPUSH
6994: LD_INT 3
6996: PPUSH
6997: LD_INT 0
6999: PPUSH
7000: CALL_OW 49
// end ;
7004: GO 6919
7006: POP
7007: POP
// for i = 1 to 2 do
7008: LD_ADDR_VAR 0 2
7012: PUSH
7013: DOUBLE
7014: LD_INT 1
7016: DEC
7017: ST_TO_ADDR
7018: LD_INT 2
7020: PUSH
7021: FOR_TO
7022: IFFALSE 7108
// begin uc_side = 3 ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_INT 3
7031: ST_TO_ADDR
// uc_nation = 3 ;
7032: LD_ADDR_OWVAR 21
7036: PUSH
7037: LD_INT 3
7039: ST_TO_ADDR
// hc_gallery =  ;
7040: LD_ADDR_OWVAR 33
7044: PUSH
7045: LD_STRING 
7047: ST_TO_ADDR
// hc_name =  ;
7048: LD_ADDR_OWVAR 26
7052: PUSH
7053: LD_STRING 
7055: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7056: LD_INT 0
7058: PPUSH
7059: LD_INT 4
7061: PPUSH
7062: LD_EXP 25
7066: PPUSH
7067: LD_EXP 26
7071: PPUSH
7072: CALL_OW 12
7076: PPUSH
7077: CALL_OW 380
// un = CreateHuman ;
7081: LD_ADDR_VAR 0 3
7085: PUSH
7086: CALL_OW 44
7090: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 3
7098: PPUSH
7099: LD_INT 0
7101: PPUSH
7102: CALL_OW 49
// end ;
7106: GO 7021
7108: POP
7109: POP
// end ; end_of_file
7110: LD_VAR 0 1
7114: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7115: LD_INT 0
7117: PPUSH
7118: PPUSH
// if exist_mode then
7119: LD_VAR 0 2
7123: IFFALSE 7142
// unit := CreateCharacter ( ident ) else
7125: LD_ADDR_VAR 0 4
7129: PUSH
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 34
7139: ST_TO_ADDR
7140: GO 7157
// unit := NewCharacter ( ident ) ;
7142: LD_ADDR_VAR 0 4
7146: PUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 25
7156: ST_TO_ADDR
// result := unit ;
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: LD_VAR 0 4
7166: ST_TO_ADDR
// end ;
7167: LD_VAR 0 3
7171: RET
// export function Video ( mode ) ; begin
7172: LD_INT 0
7174: PPUSH
// ingame_video = mode ;
7175: LD_ADDR_OWVAR 52
7179: PUSH
7180: LD_VAR 0 1
7184: ST_TO_ADDR
// interface_hidden = mode ;
7185: LD_ADDR_OWVAR 54
7189: PUSH
7190: LD_VAR 0 1
7194: ST_TO_ADDR
// end ;
7195: LD_VAR 0 2
7199: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7200: LD_INT 0
7202: PPUSH
7203: PPUSH
7204: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7205: LD_ADDR_VAR 0 1
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: LD_EXP 1
7219: PUSH
7220: LD_EXP 2
7224: PUSH
7225: LD_EXP 3
7229: PUSH
7230: LD_EXP 4
7234: PUSH
7235: LD_EXP 5
7239: PUSH
7240: LD_EXP 6
7244: PUSH
7245: LD_EXP 7
7249: PUSH
7250: LD_EXP 8
7254: PUSH
7255: LD_EXP 9
7259: PUSH
7260: LD_EXP 10
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: DIFF
7277: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: LD_VAR 0 1
7287: PUSH
7288: LD_INT 1
7290: PPUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 12
7300: ARRAY
7301: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7302: LD_VAR 0 6
7306: PPUSH
7307: CALL_OW 258
7311: PUSH
7312: LD_INT 1
7314: EQUAL
7315: IFFALSE 7333
// Say ( speaker , dialogMID ) else
7317: LD_VAR 0 6
7321: PPUSH
7322: LD_VAR 0 2
7326: PPUSH
7327: CALL_OW 88
7331: GO 7347
// Say ( speaker , dialogFID ) ;
7333: LD_VAR 0 6
7337: PPUSH
7338: LD_VAR 0 3
7342: PPUSH
7343: CALL_OW 88
// result := speaker ;
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: LD_VAR 0 6
7356: ST_TO_ADDR
// end ;
7357: LD_VAR 0 4
7361: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7362: LD_INT 0
7364: PPUSH
7365: PPUSH
7366: PPUSH
// uc_side := GetSide ( b ) ;
7367: LD_ADDR_OWVAR 20
7371: PUSH
7372: LD_VAR 0 2
7376: PPUSH
7377: CALL_OW 255
7381: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7382: LD_ADDR_OWVAR 21
7386: PUSH
7387: LD_VAR 0 2
7391: PPUSH
7392: CALL_OW 248
7396: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7397: LD_INT 0
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: LD_VAR 0 1
7407: PPUSH
7408: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7412: LD_ADDR_VAR 0 5
7416: PUSH
7417: LD_VAR 0 2
7421: PPUSH
7422: CALL_OW 254
7426: PUSH
7427: LD_INT 3
7429: MINUS
7430: ST_TO_ADDR
// if dir < 0 then
7431: LD_VAR 0 5
7435: PUSH
7436: LD_INT 0
7438: LESS
7439: IFFALSE 7455
// dir := 6 + dir ;
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_INT 6
7448: PUSH
7449: LD_VAR 0 5
7453: PLUS
7454: ST_TO_ADDR
// un := CreateHuman ;
7455: LD_ADDR_VAR 0 4
7459: PUSH
7460: CALL_OW 44
7464: ST_TO_ADDR
// SetDir ( un , dir ) ;
7465: LD_VAR 0 4
7469: PPUSH
7470: LD_VAR 0 5
7474: PPUSH
7475: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7479: LD_VAR 0 4
7483: PPUSH
7484: LD_VAR 0 2
7488: PPUSH
7489: CALL_OW 52
// end ;
7493: LD_VAR 0 3
7497: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
// for i = 1 to count do
7504: LD_ADDR_VAR 0 8
7508: PUSH
7509: DOUBLE
7510: LD_INT 1
7512: DEC
7513: ST_TO_ADDR
7514: LD_VAR 0 6
7518: PUSH
7519: FOR_TO
7520: IFFALSE 7601
// begin uc_side = side ;
7522: LD_ADDR_OWVAR 20
7526: PUSH
7527: LD_VAR 0 1
7531: ST_TO_ADDR
// uc_nation = nation ;
7532: LD_ADDR_OWVAR 21
7536: PUSH
7537: LD_VAR 0 2
7541: ST_TO_ADDR
// hc_gallery =  ;
7542: LD_ADDR_OWVAR 33
7546: PUSH
7547: LD_STRING 
7549: ST_TO_ADDR
// hc_name =  ;
7550: LD_ADDR_OWVAR 26
7554: PUSH
7555: LD_STRING 
7557: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7558: LD_INT 0
7560: PPUSH
7561: LD_VAR 0 5
7565: PPUSH
7566: LD_VAR 0 4
7570: PPUSH
7571: CALL_OW 380
// un = CreateHuman ;
7575: LD_ADDR_VAR 0 10
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7585: LD_VAR 0 10
7589: PPUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 52
// end ;
7599: GO 7519
7601: POP
7602: POP
// end ;
7603: LD_VAR 0 7
7607: RET
// export function PrepareDifficulty ; begin
7608: LD_INT 0
7610: PPUSH
// if Difficulty = 1 then
7611: LD_OWVAR 67
7615: PUSH
7616: LD_INT 1
7618: EQUAL
7619: IFFALSE 7637
// begin RuSolMinLevel = 3 ;
7621: LD_ADDR_EXP 25
7625: PUSH
7626: LD_INT 3
7628: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7629: LD_ADDR_EXP 26
7633: PUSH
7634: LD_INT 5
7636: ST_TO_ADDR
// end ; if Difficulty = 2 then
7637: LD_OWVAR 67
7641: PUSH
7642: LD_INT 2
7644: EQUAL
7645: IFFALSE 7715
// begin RuSolMinLevel = 5 ;
7647: LD_ADDR_EXP 25
7651: PUSH
7652: LD_INT 5
7654: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7655: LD_ADDR_EXP 26
7659: PUSH
7660: LD_INT 6
7662: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7663: LD_INT 51
7665: PPUSH
7666: LD_INT 3
7668: PPUSH
7669: LD_INT 1
7671: PPUSH
7672: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7676: LD_INT 57
7678: PPUSH
7679: LD_INT 3
7681: PPUSH
7682: LD_INT 1
7684: PPUSH
7685: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7689: LD_INT 57
7691: PPUSH
7692: LD_INT 6
7694: PPUSH
7695: LD_INT 2
7697: PPUSH
7698: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7702: LD_INT 51
7704: PPUSH
7705: LD_INT 6
7707: PPUSH
7708: LD_INT 2
7710: PPUSH
7711: CALL_OW 322
// end ; if Difficulty = 3 then
7715: LD_OWVAR 67
7719: PUSH
7720: LD_INT 3
7722: EQUAL
7723: IFFALSE 7806
// begin RuSolMinLevel = 5 ;
7725: LD_ADDR_EXP 25
7729: PUSH
7730: LD_INT 5
7732: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7733: LD_ADDR_EXP 26
7737: PUSH
7738: LD_INT 6
7740: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7741: LD_INT 57
7743: PPUSH
7744: LD_INT 3
7746: PPUSH
7747: LD_INT 1
7749: PPUSH
7750: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7754: LD_INT 51
7756: PPUSH
7757: LD_INT 3
7759: PPUSH
7760: LD_INT 1
7762: PPUSH
7763: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7767: LD_INT 52
7769: PPUSH
7770: LD_INT 3
7772: PPUSH
7773: LD_INT 1
7775: PPUSH
7776: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7780: LD_INT 57
7782: PPUSH
7783: LD_INT 6
7785: PPUSH
7786: LD_INT 2
7788: PPUSH
7789: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7793: LD_INT 52
7795: PPUSH
7796: LD_INT 6
7798: PPUSH
7799: LD_INT 2
7801: PPUSH
7802: CALL_OW 322
// end ; end ;
7806: LD_VAR 0 1
7810: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7811: LD_INT 0
7813: PPUSH
7814: PPUSH
7815: PPUSH
7816: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7817: LD_ADDR_VAR 0 3
7821: PUSH
7822: LD_INT 22
7824: PUSH
7825: LD_INT 3
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 25
7834: PUSH
7835: LD_INT 2
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PPUSH
7846: CALL_OW 69
7850: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7851: LD_ADDR_VAR 0 4
7855: PUSH
7856: LD_INT 4
7858: PUSH
7859: LD_INT 75
7861: PUSH
7862: LD_INT 79
7864: PUSH
7865: LD_INT 2
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 4
7876: PUSH
7877: LD_INT 113
7879: PUSH
7880: LD_INT 94
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 29
7894: PUSH
7895: LD_INT 106
7897: PUSH
7898: LD_INT 97
7900: PUSH
7901: LD_INT 3
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 26
7912: PUSH
7913: LD_INT 93
7915: PUSH
7916: LD_INT 97
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 2
7930: PUSH
7931: LD_INT 100
7933: PUSH
7934: LD_INT 89
7936: PUSH
7937: LD_INT 3
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 17
7948: PUSH
7949: LD_INT 96
7951: PUSH
7952: LD_INT 89
7954: PUSH
7955: LD_INT 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 32
7966: PUSH
7967: LD_INT 78
7969: PUSH
7970: LD_INT 94
7972: PUSH
7973: LD_INT 1
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 32
7984: PUSH
7985: LD_INT 95
7987: PUSH
7988: LD_INT 82
7990: PUSH
7991: LD_INT 3
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: LD_INT 104
8005: PUSH
8006: LD_INT 85
8008: PUSH
8009: LD_INT 2
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 32
8020: PUSH
8021: LD_INT 81
8023: PUSH
8024: LD_INT 78
8026: PUSH
8027: LD_INT 2
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 33
8038: PUSH
8039: LD_INT 109
8041: PUSH
8042: LD_INT 90
8044: PUSH
8045: LD_INT 3
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 33
8056: PUSH
8057: LD_INT 88
8059: PUSH
8060: LD_INT 79
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 33
8074: PUSH
8075: LD_INT 76
8077: PUSH
8078: LD_INT 87
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 26
8092: PUSH
8093: LD_INT 96
8095: PUSH
8096: LD_INT 97
8098: PUSH
8099: LD_INT 5
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 26
8110: PUSH
8111: LD_INT 85
8113: PUSH
8114: LD_INT 84
8116: PUSH
8117: LD_INT 2
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 6
8128: PUSH
8129: LD_INT 88
8131: PUSH
8132: LD_INT 95
8134: PUSH
8135: LD_INT 0
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 19
8146: PUSH
8147: LD_INT 103
8149: PUSH
8150: LD_INT 89
8152: PUSH
8153: LD_INT 4
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: PUSH
8162: LD_INT 16
8164: PUSH
8165: LD_INT 97
8167: PUSH
8168: LD_INT 86
8170: PUSH
8171: LD_INT 2
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 24
8182: PUSH
8183: LD_INT 100
8185: PUSH
8186: LD_INT 85
8188: PUSH
8189: LD_INT 3
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: ST_TO_ADDR
// for i := 1 to buildingsTab do
8219: LD_ADDR_VAR 0 2
8223: PUSH
8224: DOUBLE
8225: LD_INT 1
8227: DEC
8228: ST_TO_ADDR
8229: LD_VAR 0 4
8233: PUSH
8234: FOR_TO
8235: IFFALSE 8308
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8237: LD_VAR 0 3
8241: PPUSH
8242: LD_VAR 0 4
8246: PUSH
8247: LD_VAR 0 2
8251: ARRAY
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: LD_VAR 0 4
8261: PUSH
8262: LD_VAR 0 2
8266: ARRAY
8267: PUSH
8268: LD_INT 2
8270: ARRAY
8271: PPUSH
8272: LD_VAR 0 4
8276: PUSH
8277: LD_VAR 0 2
8281: ARRAY
8282: PUSH
8283: LD_INT 3
8285: ARRAY
8286: PPUSH
8287: LD_VAR 0 4
8291: PUSH
8292: LD_VAR 0 2
8296: ARRAY
8297: PUSH
8298: LD_INT 4
8300: ARRAY
8301: PPUSH
8302: CALL_OW 205
8306: GO 8234
8308: POP
8309: POP
// end ;
8310: LD_VAR 0 1
8314: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
// for i in charactersList do
8319: LD_ADDR_VAR 0 4
8323: PUSH
8324: LD_VAR 0 1
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8348
// SaveCharacters ( i , ident ) ;
8332: LD_VAR 0 4
8336: PPUSH
8337: LD_VAR 0 2
8341: PPUSH
8342: CALL_OW 38
8346: GO 8329
8348: POP
8349: POP
// end ;
8350: LD_VAR 0 3
8354: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8355: LD_INT 0
8357: PPUSH
8358: PPUSH
8359: PPUSH
8360: PPUSH
8361: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8362: LD_ADDR_VAR 0 8
8366: PUSH
8367: LD_INT 48
8369: PUSH
8370: LD_INT 49
8372: PUSH
8373: LD_INT 50
8375: PUSH
8376: LD_INT 20
8378: PUSH
8379: LD_INT 1
8381: PUSH
8382: LD_INT 51
8384: PUSH
8385: LD_INT 52
8387: PUSH
8388: LD_INT 69
8390: PUSH
8391: LD_INT 39
8393: PUSH
8394: LD_INT 34
8396: PUSH
8397: LD_INT 40
8399: PUSH
8400: LD_INT 53
8402: PUSH
8403: LD_INT 71
8405: PUSH
8406: LD_INT 57
8408: PUSH
8409: LD_INT 58
8411: PUSH
8412: LD_INT 44
8414: PUSH
8415: LD_INT 32
8417: PUSH
8418: LD_INT 27
8420: PUSH
8421: LD_INT 23
8423: PUSH
8424: LD_INT 33
8426: PUSH
8427: LD_INT 59
8429: PUSH
8430: LD_INT 54
8432: PUSH
8433: LD_INT 55
8435: PUSH
8436: LD_INT 56
8438: PUSH
8439: LD_INT 63
8441: PUSH
8442: LD_INT 64
8444: PUSH
8445: LD_INT 65
8447: PUSH
8448: LD_INT 30
8450: PUSH
8451: LD_INT 31
8453: PUSH
8454: LD_INT 21
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_INT 25
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8497: LD_ADDR_VAR 0 5
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_VAR 0 8
8511: PUSH
8512: FOR_TO
8513: IFFALSE 8589
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8515: LD_VAR 0 8
8519: PUSH
8520: LD_VAR 0 5
8524: ARRAY
8525: PPUSH
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 321
8535: PUSH
8536: LD_INT 1
8538: EQUAL
8539: PUSH
8540: LD_VAR 0 8
8544: PUSH
8545: LD_VAR 0 5
8549: ARRAY
8550: PPUSH
8551: LD_VAR 0 3
8555: PPUSH
8556: CALL_OW 482
8560: PUSH
8561: LD_INT 1
8563: EQUAL
8564: AND
8565: IFFALSE 8587
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8567: LD_VAR 0 2
8571: PPUSH
8572: LD_VAR 0 8
8576: PUSH
8577: LD_VAR 0 5
8581: ARRAY
8582: PPUSH
8583: CALL_OW 184
8587: GO 8512
8589: POP
8590: POP
// end ;
8591: LD_VAR 0 4
8595: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8596: LD_INT 0
8598: PPUSH
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
8603: PPUSH
8604: PPUSH
8605: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8606: LD_ADDR_VAR 0 6
8610: PUSH
8611: LD_VAR 0 2
8615: PPUSH
8616: LD_INT 22
8618: PUSH
8619: LD_VAR 0 1
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 56
8630: PUSH
8631: EMPTY
8632: LIST
8633: PUSH
8634: LD_INT 24
8636: PUSH
8637: LD_INT 700
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: LD_INT 60
8649: PUSH
8650: EMPTY
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: LD_INT 25
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 25
8682: PUSH
8683: LD_INT 8
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 25
8692: PUSH
8693: LD_INT 9
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 70
8718: PUSH
8719: LD_EXP 24
8723: PUSH
8724: EMPTY
8725: LIST
8726: DIFF
8727: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8728: LD_ADDR_VAR 0 7
8732: PUSH
8733: LD_VAR 0 2
8737: PPUSH
8738: LD_INT 22
8740: PUSH
8741: LD_VAR 0 1
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 30
8752: PUSH
8753: LD_INT 32
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 58
8762: PUSH
8763: EMPTY
8764: LIST
8765: PUSH
8766: LD_INT 24
8768: PUSH
8769: LD_INT 251
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PPUSH
8782: CALL_OW 70
8786: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8787: LD_ADDR_VAR 0 9
8791: PUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: LD_INT 22
8799: PUSH
8800: LD_VAR 0 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 2
8811: PUSH
8812: LD_INT 30
8814: PUSH
8815: LD_INT 4
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 30
8824: PUSH
8825: LD_INT 5
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: PUSH
8837: LD_INT 24
8839: PUSH
8840: LD_INT 251
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 70
8856: ST_TO_ADDR
// if barrackList > 0 then
8857: LD_VAR 0 9
8861: PUSH
8862: LD_INT 0
8864: GREATER
8865: IFFALSE 9013
// begin if turretList = 0 then
8867: LD_VAR 0 7
8871: PUSH
8872: LD_INT 0
8874: EQUAL
8875: IFFALSE 8917
// begin if soldiers_list > 0 then
8877: LD_VAR 0 6
8881: PUSH
8882: LD_INT 0
8884: GREATER
8885: IFFALSE 8915
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8887: LD_VAR 0 6
8891: PPUSH
8892: LD_VAR 0 9
8896: PUSH
8897: LD_INT 1
8899: PPUSH
8900: LD_VAR 0 9
8904: PPUSH
8905: CALL_OW 12
8909: ARRAY
8910: PPUSH
8911: CALL_OW 120
// end else
8915: GO 9013
// begin for i in barrackList do
8917: LD_ADDR_VAR 0 4
8921: PUSH
8922: LD_VAR 0 9
8926: PUSH
8927: FOR_IN
8928: IFFALSE 9011
// begin insideUnits = UnitsInside ( i ) ;
8930: LD_ADDR_VAR 0 10
8934: PUSH
8935: LD_VAR 0 4
8939: PPUSH
8940: CALL_OW 313
8944: ST_TO_ADDR
// if insideUnits > 0 then
8945: LD_VAR 0 10
8949: PUSH
8950: LD_INT 0
8952: GREATER
8953: IFFALSE 8977
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8955: LD_VAR 0 10
8959: PUSH
8960: LD_INT 1
8962: ARRAY
8963: PPUSH
8964: LD_VAR 0 7
8968: PUSH
8969: LD_INT 1
8971: ARRAY
8972: PPUSH
8973: CALL_OW 120
// if soldiers_list > 0 then
8977: LD_VAR 0 6
8981: PUSH
8982: LD_INT 0
8984: GREATER
8985: IFFALSE 9009
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 1
8994: ARRAY
8995: PPUSH
8996: LD_VAR 0 7
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: CALL_OW 120
// end ;
9009: GO 8927
9011: POP
9012: POP
// end ; end ; end ;
9013: LD_VAR 0 3
9017: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9018: LD_INT 0
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
// for i = 1 to vehCount do
9026: LD_ADDR_VAR 0 8
9030: PUSH
9031: DOUBLE
9032: LD_INT 1
9034: DEC
9035: ST_TO_ADDR
9036: LD_VAR 0 6
9040: PUSH
9041: FOR_TO
9042: IFFALSE 9249
// begin uc_side = side ;
9044: LD_ADDR_OWVAR 20
9048: PUSH
9049: LD_VAR 0 1
9053: ST_TO_ADDR
// uc_nation = nation ;
9054: LD_ADDR_OWVAR 21
9058: PUSH
9059: LD_VAR 0 3
9063: ST_TO_ADDR
// vc_Chassis = 22 ;
9064: LD_ADDR_OWVAR 37
9068: PUSH
9069: LD_INT 22
9071: ST_TO_ADDR
// vc_engine = 1 ;
9072: LD_ADDR_OWVAR 39
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// vc_control = 1 ;
9080: LD_ADDR_OWVAR 38
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9088: LD_ADDR_OWVAR 40
9092: PUSH
9093: LD_INT 43
9095: PUSH
9096: LD_INT 44
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 1
9105: PPUSH
9106: LD_INT 2
9108: PPUSH
9109: CALL_OW 12
9113: ARRAY
9114: ST_TO_ADDR
// veh = CreateVehicle ;
9115: LD_ADDR_VAR 0 12
9119: PUSH
9120: CALL_OW 45
9124: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9125: LD_VAR 0 12
9129: PPUSH
9130: LD_VAR 0 2
9134: PPUSH
9135: LD_INT 0
9137: PPUSH
9138: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9142: LD_ADDR_EXP 32
9146: PUSH
9147: LD_EXP 32
9151: PUSH
9152: LD_VAR 0 12
9156: ADD
9157: ST_TO_ADDR
// hc_class = 3 ;
9158: LD_ADDR_OWVAR 28
9162: PUSH
9163: LD_INT 3
9165: ST_TO_ADDR
// hc_name =  ;
9166: LD_ADDR_OWVAR 26
9170: PUSH
9171: LD_STRING 
9173: ST_TO_ADDR
// hc_gallery =  ;
9174: LD_ADDR_OWVAR 33
9178: PUSH
9179: LD_STRING 
9181: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9182: LD_INT 0
9184: PPUSH
9185: LD_INT 3
9187: PPUSH
9188: LD_EXP 25
9192: PPUSH
9193: LD_EXP 26
9197: PPUSH
9198: CALL_OW 12
9202: PPUSH
9203: CALL_OW 380
// un = CreateHuman ;
9207: LD_ADDR_VAR 0 10
9211: PUSH
9212: CALL_OW 44
9216: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9217: LD_VAR 0 10
9221: PPUSH
9222: LD_VAR 0 12
9226: PPUSH
9227: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9231: LD_ADDR_EXP 32
9235: PUSH
9236: LD_EXP 32
9240: PUSH
9241: LD_VAR 0 10
9245: ADD
9246: ST_TO_ADDR
// end ;
9247: GO 9041
9249: POP
9250: POP
// end ;
9251: LD_VAR 0 7
9255: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9256: LD_INT 0
9258: PPUSH
9259: PPUSH
9260: PPUSH
9261: PPUSH
9262: PPUSH
9263: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9264: LD_VAR 0 2
9268: PPUSH
9269: LD_INT 22
9271: PUSH
9272: LD_VAR 0 1
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: PPUSH
9284: CALL_OW 70
9288: PUSH
9289: LD_INT 0
9291: EQUAL
9292: PUSH
9293: LD_EXP 32
9297: AND
9298: IFFALSE 9585
// begin for i in defenders_list do
9300: LD_ADDR_VAR 0 4
9304: PUSH
9305: LD_EXP 32
9309: PUSH
9310: FOR_IN
9311: IFFALSE 9583
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9313: LD_VAR 0 4
9317: PPUSH
9318: LD_INT 63
9320: PPUSH
9321: LD_INT 75
9323: PPUSH
9324: CALL_OW 297
9328: PUSH
9329: LD_INT 8
9331: GREATER
9332: PUSH
9333: LD_VAR 0 4
9337: PPUSH
9338: CALL_OW 314
9342: NOT
9343: AND
9344: IFFALSE 9363
// ComMoveXY ( i , 63 , 75 ) else
9346: LD_VAR 0 4
9350: PPUSH
9351: LD_INT 63
9353: PPUSH
9354: LD_INT 75
9356: PPUSH
9357: CALL_OW 111
9361: GO 9581
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9363: LD_VAR 0 4
9367: PPUSH
9368: CALL_OW 257
9372: PUSH
9373: LD_INT 3
9375: EQUAL
9376: PUSH
9377: LD_VAR 0 4
9381: PPUSH
9382: CALL_OW 310
9386: NOT
9387: AND
9388: PUSH
9389: LD_VAR 0 4
9393: PPUSH
9394: CALL_OW 314
9398: NOT
9399: AND
9400: IFFALSE 9453
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9402: LD_VAR 0 4
9406: PPUSH
9407: LD_EXP 32
9411: PPUSH
9412: LD_INT 58
9414: PUSH
9415: EMPTY
9416: LIST
9417: PUSH
9418: LD_INT 24
9420: PUSH
9421: LD_INT 1000
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 72
9436: PPUSH
9437: LD_VAR 0 4
9441: PPUSH
9442: CALL_OW 74
9446: PPUSH
9447: CALL_OW 120
9451: GO 9581
// if GetFuel ( i ) < 100 then
9453: LD_VAR 0 4
9457: PPUSH
9458: CALL_OW 261
9462: PUSH
9463: LD_INT 100
9465: LESS
9466: IFFALSE 9482
// SetFuel ( defenders_list , 100 ) else
9468: LD_EXP 32
9472: PPUSH
9473: LD_INT 100
9475: PPUSH
9476: CALL_OW 240
9480: GO 9581
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9482: LD_VAR 0 4
9486: PPUSH
9487: CALL_OW 263
9491: PUSH
9492: LD_INT 1
9494: EQUAL
9495: PUSH
9496: LD_VAR 0 4
9500: PPUSH
9501: CALL_OW 256
9505: PUSH
9506: LD_INT 990
9508: LESS
9509: AND
9510: IFFALSE 9581
// begin veh := i ;
9512: LD_ADDR_VAR 0 7
9516: PUSH
9517: LD_VAR 0 4
9521: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9522: LD_ADDR_VAR 0 8
9526: PUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL_OW 311
9536: ST_TO_ADDR
// if veh then
9537: LD_VAR 0 7
9541: IFFALSE 9581
// begin ComMoveXY ( i , 63 , 75 ) ;
9543: LD_VAR 0 4
9547: PPUSH
9548: LD_INT 63
9550: PPUSH
9551: LD_INT 75
9553: PPUSH
9554: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9558: LD_VAR 0 7
9562: PPUSH
9563: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9567: LD_VAR 0 8
9571: PPUSH
9572: LD_VAR 0 7
9576: PPUSH
9577: CALL_OW 189
// end ; end ; end ;
9581: GO 9310
9583: POP
9584: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9585: LD_ADDR_VAR 0 6
9589: PUSH
9590: LD_VAR 0 2
9594: PPUSH
9595: LD_INT 22
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: PPUSH
9610: CALL_OW 70
9614: ST_TO_ADDR
// if tmp and defenders_list then
9615: LD_VAR 0 6
9619: PUSH
9620: LD_EXP 32
9624: AND
9625: IFFALSE 9794
// for i in defenders_list do
9627: LD_ADDR_VAR 0 4
9631: PUSH
9632: LD_EXP 32
9636: PUSH
9637: FOR_IN
9638: IFFALSE 9792
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9640: LD_VAR 0 4
9644: PPUSH
9645: CALL_OW 257
9649: PUSH
9650: LD_INT 3
9652: EQUAL
9653: PUSH
9654: LD_VAR 0 4
9658: PPUSH
9659: CALL_OW 310
9663: NOT
9664: AND
9665: IFFALSE 9704
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9667: LD_VAR 0 4
9671: PPUSH
9672: LD_EXP 32
9676: PPUSH
9677: LD_INT 58
9679: PUSH
9680: EMPTY
9681: LIST
9682: PPUSH
9683: CALL_OW 72
9687: PPUSH
9688: LD_VAR 0 4
9692: PPUSH
9693: CALL_OW 74
9697: PPUSH
9698: CALL_OW 120
9702: GO 9790
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9704: LD_VAR 0 4
9708: PPUSH
9709: CALL_OW 314
9713: NOT
9714: PUSH
9715: LD_VAR 0 4
9719: PPUSH
9720: LD_VAR 0 2
9724: PPUSH
9725: CALL_OW 308
9729: AND
9730: IFFALSE 9758
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9732: LD_VAR 0 4
9736: PPUSH
9737: LD_VAR 0 6
9741: PPUSH
9742: LD_VAR 0 4
9746: PPUSH
9747: CALL_OW 74
9751: PPUSH
9752: CALL_OW 115
9756: GO 9790
// if not IsInArea ( i , defenseArea ) then
9758: LD_VAR 0 4
9762: PPUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: CALL_OW 308
9772: NOT
9773: IFFALSE 9790
// ComMoveXY ( i , 63 , 75 ) ;
9775: LD_VAR 0 4
9779: PPUSH
9780: LD_INT 63
9782: PPUSH
9783: LD_INT 75
9785: PPUSH
9786: CALL_OW 111
// end ;
9790: GO 9637
9792: POP
9793: POP
// end ;
9794: LD_VAR 0 3
9798: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9799: LD_INT 0
9801: PPUSH
9802: PPUSH
9803: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9804: LD_INT 22
9806: PUSH
9807: LD_VAR 0 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 21
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PPUSH
9830: CALL_OW 69
9834: PUSH
9835: LD_VAR 0 3
9839: LESSEQUAL
9840: IFFALSE 9948
// begin for i = 1 to vehCount do
9842: LD_ADDR_VAR 0 9
9846: PUSH
9847: DOUBLE
9848: LD_INT 1
9850: DEC
9851: ST_TO_ADDR
9852: LD_VAR 0 3
9856: PUSH
9857: FOR_TO
9858: IFFALSE 9946
// begin weapon = weaponTab [ i ] ;
9860: LD_ADDR_VAR 0 10
9864: PUSH
9865: LD_VAR 0 4
9869: PUSH
9870: LD_VAR 0 9
9874: ARRAY
9875: ST_TO_ADDR
// if weapon = 46 then
9876: LD_VAR 0 10
9880: PUSH
9881: LD_INT 46
9883: EQUAL
9884: IFFALSE 9915
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9886: LD_VAR 0 2
9890: PPUSH
9891: LD_INT 24
9893: PPUSH
9894: LD_VAR 0 5
9898: PPUSH
9899: LD_VAR 0 6
9903: PPUSH
9904: LD_VAR 0 10
9908: PPUSH
9909: CALL_OW 185
// end else
9913: GO 9944
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9915: LD_VAR 0 2
9919: PPUSH
9920: LD_VAR 0 7
9924: PPUSH
9925: LD_VAR 0 5
9929: PPUSH
9930: LD_VAR 0 6
9934: PPUSH
9935: LD_VAR 0 10
9939: PPUSH
9940: CALL_OW 185
// end ; end ;
9944: GO 9857
9946: POP
9947: POP
// end ; end ;
9948: LD_VAR 0 8
9952: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9953: LD_INT 0
9955: PPUSH
9956: PPUSH
9957: PPUSH
9958: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9959: LD_ADDR_VAR 0 8
9963: PUSH
9964: LD_INT 22
9966: PUSH
9967: LD_VAR 0 1
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 21
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 3
9988: PUSH
9989: LD_INT 24
9991: PUSH
9992: LD_INT 650
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: PPUSH
10008: CALL_OW 69
10012: ST_TO_ADDR
// if damageVehicles > 0 then
10013: LD_VAR 0 8
10017: PUSH
10018: LD_INT 0
10020: GREATER
10021: IFFALSE 10042
// ComMoveXY ( damageVehicles , repX , repY ) ;
10023: LD_VAR 0 8
10027: PPUSH
10028: LD_VAR 0 3
10032: PPUSH
10033: LD_VAR 0 4
10037: PPUSH
10038: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10042: LD_VAR 0 8
10046: PPUSH
10047: LD_INT 95
10049: PUSH
10050: LD_VAR 0 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 58
10064: PUSH
10065: EMPTY
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 72
10080: PUSH
10081: LD_INT 0
10083: GREATER
10084: IFFALSE 10151
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10086: LD_ADDR_VAR 0 6
10090: PUSH
10091: LD_VAR 0 8
10095: PPUSH
10096: LD_INT 95
10098: PUSH
10099: LD_VAR 0 2
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 3
10110: PUSH
10111: LD_INT 58
10113: PUSH
10114: EMPTY
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PPUSH
10125: CALL_OW 72
10129: PUSH
10130: FOR_IN
10131: IFFALSE 10149
// ComExitVehicle ( UnitsInside ( i ) ) ;
10133: LD_VAR 0 6
10137: PPUSH
10138: CALL_OW 313
10142: PPUSH
10143: CALL_OW 121
10147: GO 10130
10149: POP
10150: POP
// end ;
10151: LD_VAR 0 5
10155: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10156: LD_INT 0
10158: PPUSH
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10165: LD_ADDR_VAR 0 8
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_VAR 0 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 21
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 24
10194: PUSH
10195: LD_INT 250
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 58
10207: PUSH
10208: EMPTY
10209: LIST
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 34
10216: PUSH
10217: LD_INT 43
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 44
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 46
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10266: LD_INT 22
10268: PUSH
10269: LD_VAR 0 1
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 24
10290: PUSH
10291: LD_INT 1000
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 3
10300: PUSH
10301: LD_INT 58
10303: PUSH
10304: EMPTY
10305: LIST
10306: PUSH
10307: LD_INT 2
10309: PUSH
10310: LD_INT 34
10312: PUSH
10313: LD_INT 43
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 34
10322: PUSH
10323: LD_INT 44
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 34
10332: PUSH
10333: LD_INT 46
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 69
10361: PUSH
10362: LD_INT 5
10364: PUSH
10365: LD_INT 6
10367: PUSH
10368: LD_INT 7
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: LD_OWVAR 67
10380: ARRAY
10381: GREATEREQUAL
10382: IFFALSE 10947
// repeat wait ( 0 0$1 ) ;
10384: LD_INT 35
10386: PPUSH
10387: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10391: LD_ADDR_VAR 0 8
10395: PUSH
10396: LD_INT 22
10398: PUSH
10399: LD_VAR 0 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 21
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 24
10420: PUSH
10421: LD_INT 250
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 2
10430: PUSH
10431: LD_INT 34
10433: PUSH
10434: LD_INT 43
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 34
10443: PUSH
10444: LD_INT 44
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 34
10453: PUSH
10454: LD_INT 46
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 3
10469: PUSH
10470: LD_INT 58
10472: PUSH
10473: EMPTY
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10492: LD_INT 22
10494: PUSH
10495: LD_VAR 0 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 95
10506: PUSH
10507: LD_VAR 0 2
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 69
10524: NOT
10525: PUSH
10526: LD_VAR 0 11
10530: PUSH
10531: LD_INT 0
10533: EQUAL
10534: AND
10535: IFFALSE 10590
// for i := 1 to wayX do
10537: LD_ADDR_VAR 0 6
10541: PUSH
10542: DOUBLE
10543: LD_INT 1
10545: DEC
10546: ST_TO_ADDR
10547: LD_VAR 0 3
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10588
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10555: LD_VAR 0 8
10559: PPUSH
10560: LD_VAR 0 3
10564: PUSH
10565: LD_VAR 0 6
10569: ARRAY
10570: PPUSH
10571: LD_VAR 0 4
10575: PUSH
10576: LD_VAR 0 6
10580: ARRAY
10581: PPUSH
10582: CALL_OW 114
10586: GO 10552
10588: POP
10589: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10590: LD_INT 22
10592: PUSH
10593: LD_VAR 0 1
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 95
10604: PUSH
10605: LD_VAR 0 2
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PPUSH
10618: CALL_OW 69
10622: IFFALSE 10846
// begin seeEnemy = 1 ;
10624: LD_ADDR_VAR 0 11
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// for j in vehiclesOK do
10632: LD_ADDR_VAR 0 7
10636: PUSH
10637: LD_VAR 0 8
10641: PUSH
10642: FOR_IN
10643: IFFALSE 10844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10645: LD_ADDR_VAR 0 9
10649: PUSH
10650: LD_INT 81
10652: PUSH
10653: LD_VAR 0 1
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 101
10664: PUSH
10665: LD_INT 1
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PPUSH
10676: CALL_OW 69
10680: PPUSH
10681: LD_VAR 0 7
10685: PPUSH
10686: CALL_OW 74
10690: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10691: LD_ADDR_VAR 0 10
10695: PUSH
10696: LD_INT 81
10698: PUSH
10699: LD_VAR 0 1
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 101
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 59
10723: PUSH
10724: EMPTY
10725: LIST
10726: PUSH
10727: LD_INT 21
10729: PUSH
10730: LD_INT 1
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 21
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: EMPTY
10759: LIST
10760: PPUSH
10761: CALL_OW 69
10765: PPUSH
10766: LD_VAR 0 7
10770: PPUSH
10771: CALL_OW 74
10775: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10776: LD_VAR 0 7
10780: PPUSH
10781: LD_VAR 0 9
10785: PPUSH
10786: CALL_OW 296
10790: PUSH
10791: LD_INT 8
10793: PLUS
10794: PUSH
10795: LD_VAR 0 7
10799: PPUSH
10800: LD_VAR 0 10
10804: PPUSH
10805: CALL_OW 296
10809: LESS
10810: IFFALSE 10828
// ComAttackUnit ( j , target1 ) else
10812: LD_VAR 0 7
10816: PPUSH
10817: LD_VAR 0 9
10821: PPUSH
10822: CALL_OW 115
10826: GO 10842
// ComAttackUnit ( j , target2 ) ;
10828: LD_VAR 0 7
10832: PPUSH
10833: LD_VAR 0 10
10837: PPUSH
10838: CALL_OW 115
// end ;
10842: GO 10642
10844: POP
10845: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10846: LD_INT 22
10848: PUSH
10849: LD_VAR 0 1
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 21
10860: PUSH
10861: LD_INT 2
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 24
10870: PUSH
10871: LD_INT 250
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 2
10880: PUSH
10881: LD_INT 34
10883: PUSH
10884: LD_INT 43
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 34
10893: PUSH
10894: LD_INT 44
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 34
10903: PUSH
10904: LD_INT 46
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: LD_INT 58
10922: PUSH
10923: EMPTY
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: PPUSH
10937: CALL_OW 69
10941: PUSH
10942: LD_INT 0
10944: EQUAL
10945: IFFALSE 10384
// seeEnemy = 0 ;
10947: LD_ADDR_VAR 0 11
10951: PUSH
10952: LD_INT 0
10954: ST_TO_ADDR
// end ;
10955: LD_VAR 0 5
10959: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10960: LD_INT 0
10962: PPUSH
10963: PPUSH
10964: PPUSH
10965: PPUSH
10966: PPUSH
10967: PPUSH
// repeat wait ( 0 0$1 ) ;
10968: LD_INT 35
10970: PPUSH
10971: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10975: LD_ADDR_VAR 0 7
10979: PUSH
10980: LD_INT 22
10982: PUSH
10983: LD_VAR 0 1
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 21
10994: PUSH
10995: LD_INT 2
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 24
11004: PUSH
11005: LD_INT 651
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 69
11021: ST_TO_ADDR
// for j in vehiclesOK do
11022: LD_ADDR_VAR 0 4
11026: PUSH
11027: LD_VAR 0 7
11031: PUSH
11032: FOR_IN
11033: IFFALSE 11234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11035: LD_ADDR_VAR 0 5
11039: PUSH
11040: LD_INT 81
11042: PUSH
11043: LD_VAR 0 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 101
11054: PUSH
11055: LD_INT 1
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 69
11070: PPUSH
11071: LD_VAR 0 4
11075: PPUSH
11076: CALL_OW 74
11080: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11081: LD_ADDR_VAR 0 6
11085: PUSH
11086: LD_INT 81
11088: PUSH
11089: LD_VAR 0 1
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 101
11100: PUSH
11101: LD_INT 1
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 2
11110: PUSH
11111: LD_INT 59
11113: PUSH
11114: EMPTY
11115: LIST
11116: PUSH
11117: LD_INT 21
11119: PUSH
11120: LD_INT 1
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 21
11129: PUSH
11130: LD_INT 2
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PPUSH
11156: LD_VAR 0 4
11160: PPUSH
11161: CALL_OW 74
11165: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11166: LD_VAR 0 4
11170: PPUSH
11171: LD_VAR 0 5
11175: PPUSH
11176: CALL_OW 296
11180: PUSH
11181: LD_INT 8
11183: PLUS
11184: PUSH
11185: LD_VAR 0 4
11189: PPUSH
11190: LD_VAR 0 6
11194: PPUSH
11195: CALL_OW 296
11199: LESS
11200: IFFALSE 11218
// ComAttackUnit ( j , target1 ) else
11202: LD_VAR 0 4
11206: PPUSH
11207: LD_VAR 0 5
11211: PPUSH
11212: CALL_OW 115
11216: GO 11232
// ComAttackUnit ( j , target2 ) ;
11218: LD_VAR 0 4
11222: PPUSH
11223: LD_VAR 0 6
11227: PPUSH
11228: CALL_OW 115
// end ;
11232: GO 11032
11234: POP
11235: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11236: LD_INT 22
11238: PUSH
11239: LD_VAR 0 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 21
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 24
11260: PUSH
11261: LD_INT 250
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 69
11277: PUSH
11278: LD_INT 0
11280: EQUAL
11281: IFFALSE 10968
// end ;
11283: LD_VAR 0 2
11287: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11288: LD_INT 0
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
11295: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11296: LD_ADDR_VAR 0 8
11300: PUSH
11301: LD_VAR 0 2
11305: PPUSH
11306: CALL_OW 313
11310: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11311: LD_ADDR_VAR 0 9
11315: PUSH
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 22
11323: PUSH
11324: LD_VAR 0 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 25
11335: PUSH
11336: LD_INT 2
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 24
11345: PUSH
11346: LD_INT 750
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 3
11355: PUSH
11356: LD_INT 54
11358: PUSH
11359: EMPTY
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: PPUSH
11372: CALL_OW 70
11376: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11377: LD_ADDR_VAR 0 6
11381: PUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: LD_INT 22
11389: PUSH
11390: LD_VAR 0 1
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 21
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 3
11411: PUSH
11412: LD_INT 24
11414: PUSH
11415: LD_INT 1000
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: PPUSH
11434: CALL_OW 70
11438: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11439: LD_VAR 0 6
11443: NOT
11444: PUSH
11445: LD_INT 22
11447: PUSH
11448: LD_VAR 0 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 2
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 24
11469: PUSH
11470: LD_INT 250
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: PPUSH
11482: CALL_OW 69
11486: NOT
11487: AND
11488: IFFALSE 11492
// exit ;
11490: GO 11689
// if buildings_list > 0 and engineerOkInside then
11492: LD_VAR 0 6
11496: PUSH
11497: LD_INT 0
11499: GREATER
11500: PUSH
11501: LD_VAR 0 8
11505: AND
11506: IFFALSE 11532
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11508: LD_VAR 0 8
11512: PPUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PPUSH
11523: CALL_OW 72
11527: PPUSH
11528: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11532: LD_VAR 0 6
11536: PUSH
11537: LD_INT 0
11539: GREATER
11540: PUSH
11541: LD_VAR 0 9
11545: PUSH
11546: LD_INT 0
11548: GREATER
11549: AND
11550: IFFALSE 11570
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11552: LD_VAR 0 9
11556: PPUSH
11557: LD_VAR 0 6
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11570: LD_VAR 0 6
11574: PUSH
11575: LD_INT 0
11577: EQUAL
11578: PUSH
11579: LD_VAR 0 4
11583: PUSH
11584: LD_INT 0
11586: EQUAL
11587: AND
11588: PUSH
11589: LD_VAR 0 9
11593: PUSH
11594: LD_INT 0
11596: GREATER
11597: AND
11598: IFFALSE 11614
// ComEnterUnit ( engineerOkOutside , building ) ;
11600: LD_VAR 0 9
11604: PPUSH
11605: LD_VAR 0 2
11609: PPUSH
11610: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11614: LD_VAR 0 9
11618: PUSH
11619: LD_INT 0
11621: GREATER
11622: PUSH
11623: LD_VAR 0 6
11627: PUSH
11628: LD_INT 0
11630: EQUAL
11631: AND
11632: PUSH
11633: LD_VAR 0 4
11637: PUSH
11638: LD_INT 0
11640: GREATER
11641: AND
11642: IFFALSE 11689
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11644: LD_VAR 0 9
11648: PPUSH
11649: LD_VAR 0 4
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: LD_VAR 0 4
11662: PUSH
11663: LD_INT 2
11665: ARRAY
11666: PPUSH
11667: LD_VAR 0 4
11671: PUSH
11672: LD_INT 3
11674: ARRAY
11675: PPUSH
11676: LD_VAR 0 4
11680: PUSH
11681: LD_INT 4
11683: ARRAY
11684: PPUSH
11685: CALL_OW 145
// end ;
11689: LD_VAR 0 5
11693: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11694: LD_INT 0
11696: PPUSH
11697: PPUSH
11698: PPUSH
11699: PPUSH
11700: PPUSH
11701: PPUSH
11702: PPUSH
11703: PPUSH
11704: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11705: LD_ADDR_VAR 0 6
11709: PUSH
11710: LD_INT 22
11712: PUSH
11713: LD_VAR 0 1
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 25
11724: PUSH
11725: LD_INT 4
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 23
11734: PUSH
11735: LD_INT 2
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 24
11744: PUSH
11745: LD_INT 251
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 69
11762: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11763: LD_ADDR_VAR 0 7
11767: PUSH
11768: LD_VAR 0 3
11772: PPUSH
11773: LD_INT 22
11775: PUSH
11776: LD_VAR 0 1
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 23
11787: PUSH
11788: LD_INT 2
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 4
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 50
11807: PUSH
11808: EMPTY
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 70
11821: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11822: LD_ADDR_VAR 0 10
11826: PUSH
11827: LD_VAR 0 3
11831: PPUSH
11832: LD_INT 22
11834: PUSH
11835: LD_VAR 0 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 21
11846: PUSH
11847: LD_INT 1
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 3
11856: PUSH
11857: LD_INT 25
11859: PUSH
11860: LD_INT 3
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 3
11873: PUSH
11874: LD_INT 24
11876: PUSH
11877: LD_INT 750
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 70
11898: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11899: LD_ADDR_VAR 0 11
11903: PUSH
11904: LD_VAR 0 2
11908: PPUSH
11909: LD_INT 22
11911: PUSH
11912: LD_VAR 0 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: LD_INT 25
11936: PUSH
11937: LD_INT 3
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 3
11950: PUSH
11951: LD_INT 24
11953: PUSH
11954: LD_INT 1000
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 70
11975: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11976: LD_VAR 0 10
11980: NOT
11981: PUSH
11982: LD_VAR 0 11
11986: NOT
11987: AND
11988: PUSH
11989: LD_VAR 0 6
11993: NOT
11994: AND
11995: IFFALSE 11999
// exit ;
11997: GO 12233
// if damageUnits > 0 and sci_list > 0 then
11999: LD_VAR 0 10
12003: PUSH
12004: LD_INT 0
12006: GREATER
12007: PUSH
12008: LD_VAR 0 6
12012: PUSH
12013: LD_INT 0
12015: GREATER
12016: AND
12017: IFFALSE 12033
// ComMoveToArea ( damageUnits , healArea ) ;
12019: LD_VAR 0 10
12023: PPUSH
12024: LD_VAR 0 2
12028: PPUSH
12029: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12033: LD_VAR 0 11
12037: PUSH
12038: LD_INT 0
12040: GREATER
12041: PUSH
12042: LD_VAR 0 6
12046: PUSH
12047: LD_INT 0
12049: GREATER
12050: AND
12051: IFFALSE 12062
// ComExitBuilding ( sci_list ) ;
12053: LD_VAR 0 6
12057: PPUSH
12058: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12062: LD_VAR 0 11
12066: PUSH
12067: LD_INT 0
12069: GREATER
12070: PUSH
12071: LD_VAR 0 7
12075: PUSH
12076: LD_INT 0
12078: GREATER
12079: AND
12080: IFFALSE 12100
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12082: LD_VAR 0 7
12086: PPUSH
12087: LD_VAR 0 11
12091: PUSH
12092: LD_INT 1
12094: ARRAY
12095: PPUSH
12096: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12100: LD_VAR 0 10
12104: PUSH
12105: LD_INT 0
12107: EQUAL
12108: PUSH
12109: LD_VAR 0 11
12113: PUSH
12114: LD_INT 0
12116: EQUAL
12117: AND
12118: PUSH
12119: LD_VAR 0 7
12123: PUSH
12124: LD_INT 0
12126: GREATER
12127: AND
12128: IFFALSE 12233
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12130: LD_ADDR_VAR 0 12
12134: PUSH
12135: LD_INT 22
12137: PUSH
12138: LD_VAR 0 1
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 21
12149: PUSH
12150: LD_INT 3
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 30
12159: PUSH
12160: LD_INT 8
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 69
12176: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12177: LD_ADDR_VAR 0 13
12181: PUSH
12182: LD_INT 1
12184: PPUSH
12185: LD_VAR 0 12
12189: PPUSH
12190: CALL_OW 12
12194: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12195: LD_VAR 0 7
12199: PPUSH
12200: LD_INT 3
12202: PUSH
12203: LD_INT 60
12205: PUSH
12206: EMPTY
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: PPUSH
12218: LD_VAR 0 12
12222: PUSH
12223: LD_VAR 0 13
12227: ARRAY
12228: PPUSH
12229: CALL_OW 120
// end ; end ;
12233: LD_VAR 0 5
12237: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
12242: PPUSH
12243: PPUSH
12244: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12245: LD_ADDR_VAR 0 6
12249: PUSH
12250: LD_INT 22
12252: PUSH
12253: LD_VAR 0 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 2
12264: PUSH
12265: LD_INT 30
12267: PUSH
12268: LD_INT 31
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 30
12277: PUSH
12278: LD_INT 32
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 30
12287: PUSH
12288: LD_INT 33
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 30
12297: PUSH
12298: LD_INT 4
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 30
12307: PUSH
12308: LD_INT 5
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12332: LD_ADDR_VAR 0 7
12336: PUSH
12337: LD_INT 22
12339: PUSH
12340: LD_VAR 0 2
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 21
12351: PUSH
12352: LD_INT 3
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 58
12361: PUSH
12362: EMPTY
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12375: LD_VAR 0 6
12379: PUSH
12380: LD_INT 0
12382: GREATER
12383: PUSH
12384: LD_VAR 0 7
12388: PUSH
12389: LD_INT 0
12391: GREATER
12392: AND
12393: IFFALSE 12463
// begin for i in turretsList do
12395: LD_ADDR_VAR 0 4
12399: PUSH
12400: LD_VAR 0 6
12404: PUSH
12405: FOR_IN
12406: IFFALSE 12461
// begin for j in enemyBuildings do
12408: LD_ADDR_VAR 0 5
12412: PUSH
12413: LD_VAR 0 7
12417: PUSH
12418: FOR_IN
12419: IFFALSE 12457
// begin if GetDistUnits ( i , j ) < 20 then
12421: LD_VAR 0 4
12425: PPUSH
12426: LD_VAR 0 5
12430: PPUSH
12431: CALL_OW 296
12435: PUSH
12436: LD_INT 20
12438: LESS
12439: IFFALSE 12455
// begin ComAttackUnit ( i , j ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_VAR 0 5
12450: PPUSH
12451: CALL_OW 115
// end ; end ;
12455: GO 12418
12457: POP
12458: POP
// end ;
12459: GO 12405
12461: POP
12462: POP
// end ; end ;
12463: LD_VAR 0 3
12467: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12468: LD_INT 0
12470: PPUSH
12471: PPUSH
12472: PPUSH
12473: PPUSH
12474: PPUSH
12475: PPUSH
12476: PPUSH
12477: PPUSH
12478: PPUSH
12479: PPUSH
12480: PPUSH
// for i = 1 to medicCount do
12481: LD_ADDR_VAR 0 14
12485: PUSH
12486: DOUBLE
12487: LD_INT 1
12489: DEC
12490: ST_TO_ADDR
12491: LD_VAR 0 7
12495: PUSH
12496: FOR_TO
12497: IFFALSE 12579
// begin uc_side = side ;
12499: LD_ADDR_OWVAR 20
12503: PUSH
12504: LD_VAR 0 1
12508: ST_TO_ADDR
// uc_nation = nation ;
12509: LD_ADDR_OWVAR 21
12513: PUSH
12514: LD_VAR 0 2
12518: ST_TO_ADDR
// hc_name =  ;
12519: LD_ADDR_OWVAR 26
12523: PUSH
12524: LD_STRING 
12526: ST_TO_ADDR
// hc_gallery =  ;
12527: LD_ADDR_OWVAR 33
12531: PUSH
12532: LD_STRING 
12534: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12535: LD_INT 0
12537: PPUSH
12538: LD_INT 4
12540: PPUSH
12541: LD_VAR 0 8
12545: PPUSH
12546: CALL_OW 380
// un = CreateHuman ;
12550: LD_ADDR_VAR 0 16
12554: PUSH
12555: CALL_OW 44
12559: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12560: LD_VAR 0 16
12564: PPUSH
12565: LD_VAR 0 9
12569: PPUSH
12570: LD_INT 0
12572: PPUSH
12573: CALL_OW 49
// end ;
12577: GO 12496
12579: POP
12580: POP
// for i = 1 to soldierCount do
12581: LD_ADDR_VAR 0 14
12585: PUSH
12586: DOUBLE
12587: LD_INT 1
12589: DEC
12590: ST_TO_ADDR
12591: LD_VAR 0 3
12595: PUSH
12596: FOR_TO
12597: IFFALSE 12679
// begin uc_side = side ;
12599: LD_ADDR_OWVAR 20
12603: PUSH
12604: LD_VAR 0 1
12608: ST_TO_ADDR
// uc_nation = nation ;
12609: LD_ADDR_OWVAR 21
12613: PUSH
12614: LD_VAR 0 2
12618: ST_TO_ADDR
// hc_name =  ;
12619: LD_ADDR_OWVAR 26
12623: PUSH
12624: LD_STRING 
12626: ST_TO_ADDR
// hc_gallery =  ;
12627: LD_ADDR_OWVAR 33
12631: PUSH
12632: LD_STRING 
12634: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12635: LD_INT 0
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: LD_VAR 0 8
12645: PPUSH
12646: CALL_OW 380
// un = CreateHuman ;
12650: LD_ADDR_VAR 0 16
12654: PUSH
12655: CALL_OW 44
12659: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12660: LD_VAR 0 16
12664: PPUSH
12665: LD_VAR 0 9
12669: PPUSH
12670: LD_INT 0
12672: PPUSH
12673: CALL_OW 49
// end ;
12677: GO 12596
12679: POP
12680: POP
// for i = 1 to sniperCount do
12681: LD_ADDR_VAR 0 14
12685: PUSH
12686: DOUBLE
12687: LD_INT 1
12689: DEC
12690: ST_TO_ADDR
12691: LD_VAR 0 4
12695: PUSH
12696: FOR_TO
12697: IFFALSE 12779
// begin uc_side = side ;
12699: LD_ADDR_OWVAR 20
12703: PUSH
12704: LD_VAR 0 1
12708: ST_TO_ADDR
// uc_nation = nation ;
12709: LD_ADDR_OWVAR 21
12713: PUSH
12714: LD_VAR 0 2
12718: ST_TO_ADDR
// hc_name =  ;
12719: LD_ADDR_OWVAR 26
12723: PUSH
12724: LD_STRING 
12726: ST_TO_ADDR
// hc_gallery =  ;
12727: LD_ADDR_OWVAR 33
12731: PUSH
12732: LD_STRING 
12734: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12735: LD_INT 0
12737: PPUSH
12738: LD_INT 5
12740: PPUSH
12741: LD_VAR 0 8
12745: PPUSH
12746: CALL_OW 380
// un = CreateHuman ;
12750: LD_ADDR_VAR 0 16
12754: PUSH
12755: CALL_OW 44
12759: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12760: LD_VAR 0 16
12764: PPUSH
12765: LD_VAR 0 9
12769: PPUSH
12770: LD_INT 0
12772: PPUSH
12773: CALL_OW 49
// end ;
12777: GO 12696
12779: POP
12780: POP
// for i = 1 to bazookCount do
12781: LD_ADDR_VAR 0 14
12785: PUSH
12786: DOUBLE
12787: LD_INT 1
12789: DEC
12790: ST_TO_ADDR
12791: LD_VAR 0 5
12795: PUSH
12796: FOR_TO
12797: IFFALSE 12879
// begin uc_side = side ;
12799: LD_ADDR_OWVAR 20
12803: PUSH
12804: LD_VAR 0 1
12808: ST_TO_ADDR
// uc_nation = nation ;
12809: LD_ADDR_OWVAR 21
12813: PUSH
12814: LD_VAR 0 2
12818: ST_TO_ADDR
// hc_name =  ;
12819: LD_ADDR_OWVAR 26
12823: PUSH
12824: LD_STRING 
12826: ST_TO_ADDR
// hc_gallery =  ;
12827: LD_ADDR_OWVAR 33
12831: PUSH
12832: LD_STRING 
12834: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12835: LD_INT 0
12837: PPUSH
12838: LD_INT 9
12840: PPUSH
12841: LD_VAR 0 8
12845: PPUSH
12846: CALL_OW 380
// un = CreateHuman ;
12850: LD_ADDR_VAR 0 16
12854: PUSH
12855: CALL_OW 44
12859: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12860: LD_VAR 0 16
12864: PPUSH
12865: LD_VAR 0 9
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 49
// end ;
12877: GO 12796
12879: POP
12880: POP
// for i = 1 to mortalCount do
12881: LD_ADDR_VAR 0 14
12885: PUSH
12886: DOUBLE
12887: LD_INT 1
12889: DEC
12890: ST_TO_ADDR
12891: LD_VAR 0 6
12895: PUSH
12896: FOR_TO
12897: IFFALSE 12979
// begin uc_side = side ;
12899: LD_ADDR_OWVAR 20
12903: PUSH
12904: LD_VAR 0 1
12908: ST_TO_ADDR
// uc_nation = nation ;
12909: LD_ADDR_OWVAR 21
12913: PUSH
12914: LD_VAR 0 2
12918: ST_TO_ADDR
// hc_name =  ;
12919: LD_ADDR_OWVAR 26
12923: PUSH
12924: LD_STRING 
12926: ST_TO_ADDR
// hc_gallery =  ;
12927: LD_ADDR_OWVAR 33
12931: PUSH
12932: LD_STRING 
12934: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12935: LD_INT 0
12937: PPUSH
12938: LD_INT 8
12940: PPUSH
12941: LD_VAR 0 8
12945: PPUSH
12946: CALL_OW 380
// un = CreateHuman ;
12950: LD_ADDR_VAR 0 16
12954: PUSH
12955: CALL_OW 44
12959: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12960: LD_VAR 0 16
12964: PPUSH
12965: LD_VAR 0 9
12969: PPUSH
12970: LD_INT 0
12972: PPUSH
12973: CALL_OW 49
// end ;
12977: GO 12896
12979: POP
12980: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12981: LD_ADDR_VAR 0 19
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_VAR 0 1
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 25
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 25
13013: PUSH
13014: LD_INT 5
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 25
13023: PUSH
13024: LD_INT 8
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 25
13033: PUSH
13034: LD_INT 9
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 69
13056: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13057: LD_ADDR_VAR 0 18
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_VAR 0 1
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 25
13076: PUSH
13077: LD_INT 4
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 69
13092: ST_TO_ADDR
// for i in medic_list do
13093: LD_ADDR_VAR 0 14
13097: PUSH
13098: LD_VAR 0 18
13102: PUSH
13103: FOR_IN
13104: IFFALSE 13122
// ComMoveToArea ( i , healArea ) ;
13106: LD_VAR 0 14
13110: PPUSH
13111: LD_VAR 0 10
13115: PPUSH
13116: CALL_OW 113
13120: GO 13103
13122: POP
13123: POP
// if strategy = 1 then
13124: LD_VAR 0 12
13128: PUSH
13129: LD_INT 1
13131: EQUAL
13132: IFFALSE 13678
// begin repeat wait ( 0 0$3 ) ;
13134: LD_INT 105
13136: PPUSH
13137: CALL_OW 67
// for i in soldiersOK_list do
13141: LD_ADDR_VAR 0 14
13145: PUSH
13146: LD_VAR 0 19
13150: PUSH
13151: FOR_IN
13152: IFFALSE 13216
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13154: LD_VAR 0 14
13158: PPUSH
13159: LD_INT 91
13161: PPUSH
13162: LD_INT 63
13164: PPUSH
13165: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13169: LD_VAR 0 14
13173: PPUSH
13174: LD_INT 101
13176: PPUSH
13177: LD_INT 53
13179: PPUSH
13180: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13184: LD_VAR 0 14
13188: PPUSH
13189: LD_INT 75
13191: PPUSH
13192: LD_INT 23
13194: PPUSH
13195: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13199: LD_VAR 0 14
13203: PPUSH
13204: LD_INT 78
13206: PPUSH
13207: LD_INT 8
13209: PPUSH
13210: CALL_OW 174
// end ;
13214: GO 13151
13216: POP
13217: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13218: LD_INT 12
13220: PPUSH
13221: LD_INT 22
13223: PUSH
13224: LD_VAR 0 1
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 70
13237: PUSH
13238: LD_INT 2
13240: GREATER
13241: IFFALSE 13134
// repeat wait ( 0 0$1 ) ;
13243: LD_INT 35
13245: PPUSH
13246: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13250: LD_ADDR_VAR 0 17
13254: PUSH
13255: LD_INT 22
13257: PUSH
13258: LD_VAR 0 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 1
13269: PUSH
13270: LD_INT 3
13272: PUSH
13273: LD_INT 24
13275: PUSH
13276: LD_INT 550
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 24
13289: PUSH
13290: LD_INT 250
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PPUSH
13306: CALL_OW 69
13310: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13311: LD_ADDR_VAR 0 19
13315: PUSH
13316: LD_INT 22
13318: PUSH
13319: LD_VAR 0 1
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 2
13330: PUSH
13331: LD_INT 25
13333: PUSH
13334: LD_INT 1
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 5
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 25
13353: PUSH
13354: LD_INT 8
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 25
13363: PUSH
13364: LD_INT 9
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 24
13380: PUSH
13381: LD_INT 1000
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: PPUSH
13393: CALL_OW 69
13397: ST_TO_ADDR
// if medicCount > 0 then
13398: LD_VAR 0 7
13402: PUSH
13403: LD_INT 0
13405: GREATER
13406: IFFALSE 13480
// begin if damageUnit_list > 0 then
13408: LD_VAR 0 17
13412: PUSH
13413: LD_INT 0
13415: GREATER
13416: IFFALSE 13480
// begin for i in damageUnit_list do
13418: LD_ADDR_VAR 0 14
13422: PUSH
13423: LD_VAR 0 17
13427: PUSH
13428: FOR_IN
13429: IFFALSE 13478
// begin ComMoveToArea ( i , healArea ) ;
13431: LD_VAR 0 14
13435: PPUSH
13436: LD_VAR 0 10
13440: PPUSH
13441: CALL_OW 113
// for j in medic_list do
13445: LD_ADDR_VAR 0 15
13449: PUSH
13450: LD_VAR 0 18
13454: PUSH
13455: FOR_IN
13456: IFFALSE 13474
// AddComHeal ( j , i ) ;
13458: LD_VAR 0 15
13462: PPUSH
13463: LD_VAR 0 14
13467: PPUSH
13468: CALL_OW 188
13472: GO 13455
13474: POP
13475: POP
// end ;
13476: GO 13428
13478: POP
13479: POP
// end ; end ; for i in soldiersOK_list do
13480: LD_ADDR_VAR 0 14
13484: PUSH
13485: LD_VAR 0 19
13489: PUSH
13490: FOR_IN
13491: IFFALSE 13667
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13493: LD_ADDR_VAR 0 22
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_VAR 0 11
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 69
13514: PPUSH
13515: LD_VAR 0 14
13519: PPUSH
13520: CALL_OW 74
13524: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13525: LD_ADDR_VAR 0 23
13529: PUSH
13530: LD_INT 22
13532: PUSH
13533: LD_VAR 0 11
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 2
13544: PUSH
13545: LD_INT 59
13547: PUSH
13548: EMPTY
13549: LIST
13550: PUSH
13551: LD_INT 21
13553: PUSH
13554: LD_INT 1
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 21
13563: PUSH
13564: LD_INT 2
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: PPUSH
13584: CALL_OW 69
13588: PPUSH
13589: LD_VAR 0 14
13593: PPUSH
13594: CALL_OW 74
13598: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13599: LD_VAR 0 14
13603: PPUSH
13604: LD_VAR 0 22
13608: PPUSH
13609: CALL_OW 296
13613: PUSH
13614: LD_INT 6
13616: PLUS
13617: PUSH
13618: LD_VAR 0 14
13622: PPUSH
13623: LD_VAR 0 23
13627: PPUSH
13628: CALL_OW 296
13632: LESS
13633: IFFALSE 13651
// begin ComAttackUnit ( i , target1 ) ;
13635: LD_VAR 0 14
13639: PPUSH
13640: LD_VAR 0 22
13644: PPUSH
13645: CALL_OW 115
// end else
13649: GO 13665
// begin ComAttackUnit ( i , target2 ) ;
13651: LD_VAR 0 14
13655: PPUSH
13656: LD_VAR 0 23
13660: PPUSH
13661: CALL_OW 115
// end ; end ;
13665: GO 13490
13667: POP
13668: POP
// until soldiersOK_list = [ ] ;
13669: LD_VAR 0 19
13673: PUSH
13674: EMPTY
13675: EQUAL
13676: IFFALSE 13243
// end ; if strategy = 2 then
13678: LD_VAR 0 12
13682: PUSH
13683: LD_INT 2
13685: EQUAL
13686: IFFALSE 14202
// begin repeat wait ( 0 0$1 ) ;
13688: LD_INT 35
13690: PPUSH
13691: CALL_OW 67
// for i in soldiersOK_list do
13695: LD_ADDR_VAR 0 14
13699: PUSH
13700: LD_VAR 0 19
13704: PUSH
13705: FOR_IN
13706: IFFALSE 13740
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13708: LD_VAR 0 14
13712: PPUSH
13713: LD_INT 91
13715: PPUSH
13716: LD_INT 63
13718: PPUSH
13719: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13723: LD_VAR 0 14
13727: PPUSH
13728: LD_INT 75
13730: PPUSH
13731: LD_INT 33
13733: PPUSH
13734: CALL_OW 174
// end ;
13738: GO 13705
13740: POP
13741: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13742: LD_INT 13
13744: PPUSH
13745: LD_INT 22
13747: PUSH
13748: LD_VAR 0 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PPUSH
13757: CALL_OW 70
13761: PUSH
13762: LD_INT 2
13764: GREATER
13765: IFFALSE 13688
// repeat wait ( 0 0$3 ) ;
13767: LD_INT 105
13769: PPUSH
13770: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13774: LD_ADDR_VAR 0 17
13778: PUSH
13779: LD_INT 22
13781: PUSH
13782: LD_VAR 0 1
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 1
13793: PUSH
13794: LD_INT 3
13796: PUSH
13797: LD_INT 24
13799: PUSH
13800: LD_INT 550
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 24
13813: PUSH
13814: LD_INT 250
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PPUSH
13830: CALL_OW 69
13834: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13835: LD_ADDR_VAR 0 19
13839: PUSH
13840: LD_INT 22
13842: PUSH
13843: LD_VAR 0 1
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 2
13854: PUSH
13855: LD_INT 25
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 5
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 25
13877: PUSH
13878: LD_INT 8
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: LD_INT 25
13887: PUSH
13888: LD_INT 9
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 24
13904: PUSH
13905: LD_INT 1000
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: ST_TO_ADDR
// if medicCount > 0 then
13922: LD_VAR 0 7
13926: PUSH
13927: LD_INT 0
13929: GREATER
13930: IFFALSE 14004
// begin if damageUnit_list > 0 then
13932: LD_VAR 0 17
13936: PUSH
13937: LD_INT 0
13939: GREATER
13940: IFFALSE 14004
// begin for i in damageUnit_list do
13942: LD_ADDR_VAR 0 14
13946: PUSH
13947: LD_VAR 0 17
13951: PUSH
13952: FOR_IN
13953: IFFALSE 14002
// begin ComMoveToArea ( i , healArea ) ;
13955: LD_VAR 0 14
13959: PPUSH
13960: LD_VAR 0 10
13964: PPUSH
13965: CALL_OW 113
// for j in medic_list do
13969: LD_ADDR_VAR 0 15
13973: PUSH
13974: LD_VAR 0 18
13978: PUSH
13979: FOR_IN
13980: IFFALSE 13998
// AddComHeal ( j , i ) ;
13982: LD_VAR 0 15
13986: PPUSH
13987: LD_VAR 0 14
13991: PPUSH
13992: CALL_OW 188
13996: GO 13979
13998: POP
13999: POP
// end ;
14000: GO 13952
14002: POP
14003: POP
// end ; end ; for i in soldiersOK_list do
14004: LD_ADDR_VAR 0 14
14008: PUSH
14009: LD_VAR 0 19
14013: PUSH
14014: FOR_IN
14015: IFFALSE 14191
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14017: LD_ADDR_VAR 0 22
14021: PUSH
14022: LD_INT 22
14024: PUSH
14025: LD_VAR 0 11
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: PPUSH
14039: LD_VAR 0 14
14043: PPUSH
14044: CALL_OW 74
14048: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14049: LD_ADDR_VAR 0 23
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_VAR 0 11
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 2
14068: PUSH
14069: LD_INT 59
14071: PUSH
14072: EMPTY
14073: LIST
14074: PUSH
14075: LD_INT 21
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 21
14087: PUSH
14088: LD_INT 2
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: PPUSH
14108: CALL_OW 69
14112: PPUSH
14113: LD_VAR 0 14
14117: PPUSH
14118: CALL_OW 74
14122: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14123: LD_VAR 0 14
14127: PPUSH
14128: LD_VAR 0 22
14132: PPUSH
14133: CALL_OW 296
14137: PUSH
14138: LD_INT 6
14140: PLUS
14141: PUSH
14142: LD_VAR 0 14
14146: PPUSH
14147: LD_VAR 0 23
14151: PPUSH
14152: CALL_OW 296
14156: LESS
14157: IFFALSE 14175
// begin ComAttackUnit ( i , target1 ) ;
14159: LD_VAR 0 14
14163: PPUSH
14164: LD_VAR 0 22
14168: PPUSH
14169: CALL_OW 115
// end else
14173: GO 14189
// begin ComAttackUnit ( i , target2 ) ;
14175: LD_VAR 0 14
14179: PPUSH
14180: LD_VAR 0 23
14184: PPUSH
14185: CALL_OW 115
// end ; end ;
14189: GO 14014
14191: POP
14192: POP
// until soldiersOK_list = [ ] ;
14193: LD_VAR 0 19
14197: PUSH
14198: EMPTY
14199: EQUAL
14200: IFFALSE 13767
// end ; if strategy = 3 then
14202: LD_VAR 0 12
14206: PUSH
14207: LD_INT 3
14209: EQUAL
14210: IFFALSE 14756
// begin repeat wait ( 0 0$3 ) ;
14212: LD_INT 105
14214: PPUSH
14215: CALL_OW 67
// for i in soldiersOK_list do
14219: LD_ADDR_VAR 0 14
14223: PUSH
14224: LD_VAR 0 19
14228: PUSH
14229: FOR_IN
14230: IFFALSE 14294
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14232: LD_VAR 0 14
14236: PPUSH
14237: LD_INT 63
14239: PPUSH
14240: LD_INT 71
14242: PPUSH
14243: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14247: LD_VAR 0 14
14251: PPUSH
14252: LD_INT 35
14254: PPUSH
14255: LD_INT 44
14257: PPUSH
14258: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14262: LD_VAR 0 14
14266: PPUSH
14267: LD_INT 23
14269: PPUSH
14270: LD_INT 18
14272: PPUSH
14273: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14277: LD_VAR 0 14
14281: PPUSH
14282: LD_INT 26
14284: PPUSH
14285: LD_INT 12
14287: PPUSH
14288: CALL_OW 174
// end ;
14292: GO 14229
14294: POP
14295: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14296: LD_INT 14
14298: PPUSH
14299: LD_INT 22
14301: PUSH
14302: LD_VAR 0 1
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 70
14315: PUSH
14316: LD_INT 2
14318: GREATER
14319: IFFALSE 14212
// repeat wait ( 0 0$1 ) ;
14321: LD_INT 35
14323: PPUSH
14324: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14328: LD_ADDR_VAR 0 17
14332: PUSH
14333: LD_INT 22
14335: PUSH
14336: LD_VAR 0 1
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: LD_INT 3
14350: PUSH
14351: LD_INT 24
14353: PUSH
14354: LD_INT 550
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 24
14367: PUSH
14368: LD_INT 250
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14389: LD_ADDR_VAR 0 19
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_VAR 0 1
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 2
14408: PUSH
14409: LD_INT 25
14411: PUSH
14412: LD_INT 1
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 25
14421: PUSH
14422: LD_INT 5
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 25
14431: PUSH
14432: LD_INT 8
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 25
14441: PUSH
14442: LD_INT 9
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 24
14458: PUSH
14459: LD_INT 1000
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 69
14475: ST_TO_ADDR
// if medicCount > 0 then
14476: LD_VAR 0 7
14480: PUSH
14481: LD_INT 0
14483: GREATER
14484: IFFALSE 14558
// begin if damageUnit_list > 0 then
14486: LD_VAR 0 17
14490: PUSH
14491: LD_INT 0
14493: GREATER
14494: IFFALSE 14558
// begin for i in damageUnit_list do
14496: LD_ADDR_VAR 0 14
14500: PUSH
14501: LD_VAR 0 17
14505: PUSH
14506: FOR_IN
14507: IFFALSE 14556
// begin ComMoveToArea ( i , healArea ) ;
14509: LD_VAR 0 14
14513: PPUSH
14514: LD_VAR 0 10
14518: PPUSH
14519: CALL_OW 113
// for j in medic_list do
14523: LD_ADDR_VAR 0 15
14527: PUSH
14528: LD_VAR 0 18
14532: PUSH
14533: FOR_IN
14534: IFFALSE 14552
// AddComHeal ( j , i ) ;
14536: LD_VAR 0 15
14540: PPUSH
14541: LD_VAR 0 14
14545: PPUSH
14546: CALL_OW 188
14550: GO 14533
14552: POP
14553: POP
// end ;
14554: GO 14506
14556: POP
14557: POP
// end ; end ; for i in soldiersOK_list do
14558: LD_ADDR_VAR 0 14
14562: PUSH
14563: LD_VAR 0 19
14567: PUSH
14568: FOR_IN
14569: IFFALSE 14745
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14571: LD_ADDR_VAR 0 22
14575: PUSH
14576: LD_INT 22
14578: PUSH
14579: LD_VAR 0 11
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PPUSH
14588: CALL_OW 69
14592: PPUSH
14593: LD_VAR 0 14
14597: PPUSH
14598: CALL_OW 74
14602: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14603: LD_ADDR_VAR 0 23
14607: PUSH
14608: LD_INT 22
14610: PUSH
14611: LD_VAR 0 11
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 2
14622: PUSH
14623: LD_INT 59
14625: PUSH
14626: EMPTY
14627: LIST
14628: PUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 1
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 2
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: EMPTY
14660: LIST
14661: PPUSH
14662: CALL_OW 69
14666: PPUSH
14667: LD_VAR 0 14
14671: PPUSH
14672: CALL_OW 74
14676: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14677: LD_VAR 0 14
14681: PPUSH
14682: LD_VAR 0 22
14686: PPUSH
14687: CALL_OW 296
14691: PUSH
14692: LD_INT 6
14694: PLUS
14695: PUSH
14696: LD_VAR 0 14
14700: PPUSH
14701: LD_VAR 0 23
14705: PPUSH
14706: CALL_OW 296
14710: LESS
14711: IFFALSE 14729
// begin ComAttackUnit ( i , target1 ) ;
14713: LD_VAR 0 14
14717: PPUSH
14718: LD_VAR 0 22
14722: PPUSH
14723: CALL_OW 115
// end else
14727: GO 14743
// begin ComAttackUnit ( i , target2 ) ;
14729: LD_VAR 0 14
14733: PPUSH
14734: LD_VAR 0 23
14738: PPUSH
14739: CALL_OW 115
// end ; end ;
14743: GO 14568
14745: POP
14746: POP
// until soldiersOK_list = [ ] ;
14747: LD_VAR 0 19
14751: PUSH
14752: EMPTY
14753: EQUAL
14754: IFFALSE 14321
// end ; end ;
14756: LD_VAR 0 13
14760: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14761: LD_INT 0
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
14770: PPUSH
14771: PPUSH
14772: PPUSH
14773: PPUSH
// amChassisTab = [ ] ;
14774: LD_ADDR_VAR 0 19
14778: PUSH
14779: EMPTY
14780: ST_TO_ADDR
// arChassisTab = [ ] ;
14781: LD_ADDR_VAR 0 18
14785: PUSH
14786: EMPTY
14787: ST_TO_ADDR
// ruChassisTab = [ ] ;
14788: LD_ADDR_VAR 0 17
14792: PUSH
14793: EMPTY
14794: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14795: LD_INT 35
14797: PPUSH
14798: CALL_OW 67
// if nation = 1 then
14802: LD_VAR 0 5
14806: PUSH
14807: LD_INT 1
14809: EQUAL
14810: IFFALSE 15301
// begin uc_side = side ;
14812: LD_ADDR_OWVAR 20
14816: PUSH
14817: LD_VAR 0 2
14821: ST_TO_ADDR
// uc_nation = nation ;
14822: LD_ADDR_OWVAR 21
14826: PUSH
14827: LD_VAR 0 5
14831: ST_TO_ADDR
// vc_engine = vehengine ;
14832: LD_ADDR_OWVAR 39
14836: PUSH
14837: LD_VAR 0 6
14841: ST_TO_ADDR
// vc_control = vehcontrol ;
14842: LD_ADDR_OWVAR 38
14846: PUSH
14847: LD_VAR 0 7
14851: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14852: LD_ADDR_OWVAR 40
14856: PUSH
14857: LD_VAR 0 10
14861: PUSH
14862: LD_INT 1
14864: PPUSH
14865: LD_VAR 0 10
14869: PPUSH
14870: CALL_OW 12
14874: ARRAY
14875: ST_TO_ADDR
// for j = 1 to AMWeapon do
14876: LD_ADDR_VAR 0 14
14880: PUSH
14881: DOUBLE
14882: LD_INT 1
14884: DEC
14885: ST_TO_ADDR
14886: LD_VAR 0 10
14890: PUSH
14891: FOR_TO
14892: IFFALSE 15193
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14894: LD_VAR 0 10
14898: PUSH
14899: LD_VAR 0 14
14903: ARRAY
14904: PUSH
14905: LD_INT 2
14907: EQUAL
14908: PUSH
14909: LD_VAR 0 10
14913: PUSH
14914: LD_VAR 0 14
14918: ARRAY
14919: PUSH
14920: LD_INT 3
14922: EQUAL
14923: OR
14924: IFFALSE 14977
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14926: LD_ADDR_VAR 0 19
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: LD_INT 2
14936: PUSH
14937: LD_INT 3
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: LD_INT 5
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14953: LD_ADDR_OWVAR 37
14957: PUSH
14958: LD_VAR 0 19
14962: PUSH
14963: LD_INT 1
14965: PPUSH
14966: LD_VAR 0 19
14970: PPUSH
14971: CALL_OW 12
14975: ARRAY
14976: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14977: LD_VAR 0 10
14981: PUSH
14982: LD_VAR 0 14
14986: ARRAY
14987: PUSH
14988: LD_INT 4
14990: EQUAL
14991: PUSH
14992: LD_VAR 0 10
14996: PUSH
14997: LD_VAR 0 14
15001: ARRAY
15002: PUSH
15003: LD_INT 5
15005: EQUAL
15006: OR
15007: PUSH
15008: LD_VAR 0 10
15012: PUSH
15013: LD_VAR 0 14
15017: ARRAY
15018: PUSH
15019: LD_INT 9
15021: EQUAL
15022: OR
15023: PUSH
15024: LD_VAR 0 10
15028: PUSH
15029: LD_VAR 0 14
15033: ARRAY
15034: PUSH
15035: LD_INT 11
15037: EQUAL
15038: OR
15039: PUSH
15040: LD_VAR 0 10
15044: PUSH
15045: LD_VAR 0 14
15049: ARRAY
15050: PUSH
15051: LD_INT 7
15053: EQUAL
15054: OR
15055: IFFALSE 15104
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15057: LD_ADDR_VAR 0 19
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: LD_INT 3
15067: PUSH
15068: LD_INT 4
15070: PUSH
15071: LD_INT 5
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15080: LD_ADDR_OWVAR 37
15084: PUSH
15085: LD_VAR 0 19
15089: PUSH
15090: LD_INT 1
15092: PPUSH
15093: LD_VAR 0 19
15097: PPUSH
15098: CALL_OW 12
15102: ARRAY
15103: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15104: LD_VAR 0 10
15108: PUSH
15109: LD_VAR 0 14
15113: ARRAY
15114: PUSH
15115: LD_INT 8
15117: EQUAL
15118: PUSH
15119: LD_VAR 0 10
15123: PUSH
15124: LD_VAR 0 14
15128: ARRAY
15129: PUSH
15130: LD_INT 6
15132: EQUAL
15133: OR
15134: PUSH
15135: LD_VAR 0 10
15139: PUSH
15140: LD_VAR 0 14
15144: ARRAY
15145: PUSH
15146: LD_INT 10
15148: EQUAL
15149: OR
15150: IFFALSE 15191
// begin amChassisTab = [ 4 , 5 ] ;
15152: LD_ADDR_VAR 0 19
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: LD_INT 5
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15167: LD_ADDR_OWVAR 37
15171: PUSH
15172: LD_VAR 0 19
15176: PUSH
15177: LD_INT 1
15179: PPUSH
15180: LD_VAR 0 19
15184: PPUSH
15185: CALL_OW 12
15189: ARRAY
15190: ST_TO_ADDR
// end ; end ;
15191: GO 14891
15193: POP
15194: POP
// veh = CreateVehicle ;
15195: LD_ADDR_VAR 0 16
15199: PUSH
15200: CALL_OW 45
15204: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15205: LD_VAR 0 16
15209: PPUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: LD_INT 0
15217: PPUSH
15218: CALL_OW 49
// if vehControl = 1 then
15222: LD_VAR 0 7
15226: PUSH
15227: LD_INT 1
15229: EQUAL
15230: IFFALSE 15287
// begin hc_gallery =  ;
15232: LD_ADDR_OWVAR 33
15236: PUSH
15237: LD_STRING 
15239: ST_TO_ADDR
// hc_name =  ;
15240: LD_ADDR_OWVAR 26
15244: PUSH
15245: LD_STRING 
15247: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15248: LD_INT 0
15250: PPUSH
15251: LD_INT 3
15253: PPUSH
15254: LD_VAR 0 4
15258: PPUSH
15259: CALL_OW 380
// un = CreateHuman ;
15263: LD_ADDR_VAR 0 15
15267: PUSH
15268: CALL_OW 44
15272: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15273: LD_VAR 0 15
15277: PPUSH
15278: LD_VAR 0 16
15282: PPUSH
15283: CALL_OW 52
// end ; i = i + 1 ;
15287: LD_ADDR_VAR 0 13
15291: PUSH
15292: LD_VAR 0 13
15296: PUSH
15297: LD_INT 1
15299: PLUS
15300: ST_TO_ADDR
// end ; if nation = 2 then
15301: LD_VAR 0 5
15305: PUSH
15306: LD_INT 2
15308: EQUAL
15309: IFFALSE 15733
// begin uc_side = side ;
15311: LD_ADDR_OWVAR 20
15315: PUSH
15316: LD_VAR 0 2
15320: ST_TO_ADDR
// uc_nation = nation ;
15321: LD_ADDR_OWVAR 21
15325: PUSH
15326: LD_VAR 0 5
15330: ST_TO_ADDR
// vc_engine = vehengine ;
15331: LD_ADDR_OWVAR 39
15335: PUSH
15336: LD_VAR 0 6
15340: ST_TO_ADDR
// vc_control = vehcontrol ;
15341: LD_ADDR_OWVAR 38
15345: PUSH
15346: LD_VAR 0 7
15350: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15351: LD_ADDR_OWVAR 40
15355: PUSH
15356: LD_VAR 0 9
15360: PUSH
15361: LD_INT 1
15363: PPUSH
15364: LD_VAR 0 9
15368: PPUSH
15369: CALL_OW 12
15373: ARRAY
15374: ST_TO_ADDR
// for j = 1 to ARWeapons do
15375: LD_ADDR_VAR 0 14
15379: PUSH
15380: DOUBLE
15381: LD_INT 1
15383: DEC
15384: ST_TO_ADDR
15385: LD_VAR 0 9
15389: PUSH
15390: FOR_TO
15391: IFFALSE 15625
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15393: LD_VAR 0 9
15397: PUSH
15398: LD_VAR 0 14
15402: ARRAY
15403: PUSH
15404: LD_INT 24
15406: EQUAL
15407: PUSH
15408: LD_VAR 0 9
15412: PUSH
15413: LD_VAR 0 14
15417: ARRAY
15418: PUSH
15419: LD_INT 22
15421: EQUAL
15422: OR
15423: PUSH
15424: LD_VAR 0 9
15428: PUSH
15429: LD_VAR 0 14
15433: ARRAY
15434: PUSH
15435: LD_INT 23
15437: EQUAL
15438: OR
15439: PUSH
15440: LD_VAR 0 9
15444: PUSH
15445: LD_VAR 0 14
15449: ARRAY
15450: PUSH
15451: LD_INT 30
15453: EQUAL
15454: OR
15455: IFFALSE 15504
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15457: LD_ADDR_VAR 0 18
15461: PUSH
15462: LD_INT 11
15464: PUSH
15465: LD_INT 12
15467: PUSH
15468: LD_INT 13
15470: PUSH
15471: LD_INT 14
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15480: LD_ADDR_OWVAR 37
15484: PUSH
15485: LD_VAR 0 18
15489: PUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_VAR 0 18
15497: PPUSH
15498: CALL_OW 12
15502: ARRAY
15503: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15504: LD_VAR 0 9
15508: PUSH
15509: LD_VAR 0 14
15513: ARRAY
15514: PUSH
15515: LD_INT 29
15517: EQUAL
15518: PUSH
15519: LD_VAR 0 9
15523: PUSH
15524: LD_VAR 0 14
15528: ARRAY
15529: PUSH
15530: LD_INT 28
15532: EQUAL
15533: OR
15534: PUSH
15535: LD_VAR 0 9
15539: PUSH
15540: LD_VAR 0 14
15544: ARRAY
15545: PUSH
15546: LD_INT 27
15548: EQUAL
15549: OR
15550: PUSH
15551: LD_VAR 0 9
15555: PUSH
15556: LD_VAR 0 14
15560: ARRAY
15561: PUSH
15562: LD_INT 26
15564: EQUAL
15565: OR
15566: PUSH
15567: LD_VAR 0 9
15571: PUSH
15572: LD_VAR 0 14
15576: ARRAY
15577: PUSH
15578: LD_INT 25
15580: EQUAL
15581: OR
15582: IFFALSE 15623
// begin arChassisTab = [ 13 , 14 ] ;
15584: LD_ADDR_VAR 0 18
15588: PUSH
15589: LD_INT 13
15591: PUSH
15592: LD_INT 14
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15599: LD_ADDR_OWVAR 37
15603: PUSH
15604: LD_VAR 0 18
15608: PUSH
15609: LD_INT 1
15611: PPUSH
15612: LD_VAR 0 18
15616: PPUSH
15617: CALL_OW 12
15621: ARRAY
15622: ST_TO_ADDR
// end ; end ;
15623: GO 15390
15625: POP
15626: POP
// veh = CreateVehicle ;
15627: LD_ADDR_VAR 0 16
15631: PUSH
15632: CALL_OW 45
15636: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15637: LD_VAR 0 16
15641: PPUSH
15642: LD_VAR 0 1
15646: PPUSH
15647: LD_INT 0
15649: PPUSH
15650: CALL_OW 49
// if vehcontrol = 1 then
15654: LD_VAR 0 7
15658: PUSH
15659: LD_INT 1
15661: EQUAL
15662: IFFALSE 15719
// begin hc_gallery =  ;
15664: LD_ADDR_OWVAR 33
15668: PUSH
15669: LD_STRING 
15671: ST_TO_ADDR
// hc_name =  ;
15672: LD_ADDR_OWVAR 26
15676: PUSH
15677: LD_STRING 
15679: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15680: LD_INT 0
15682: PPUSH
15683: LD_INT 3
15685: PPUSH
15686: LD_VAR 0 4
15690: PPUSH
15691: CALL_OW 380
// un = CreateHuman ;
15695: LD_ADDR_VAR 0 15
15699: PUSH
15700: CALL_OW 44
15704: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15705: LD_VAR 0 15
15709: PPUSH
15710: LD_VAR 0 16
15714: PPUSH
15715: CALL_OW 52
// end ; i = i + 1 ;
15719: LD_ADDR_VAR 0 13
15723: PUSH
15724: LD_VAR 0 13
15728: PUSH
15729: LD_INT 1
15731: PLUS
15732: ST_TO_ADDR
// end ; if nation = 3 then
15733: LD_VAR 0 5
15737: PUSH
15738: LD_INT 3
15740: EQUAL
15741: IFFALSE 16133
// begin uc_side = side ;
15743: LD_ADDR_OWVAR 20
15747: PUSH
15748: LD_VAR 0 2
15752: ST_TO_ADDR
// uc_nation = nation ;
15753: LD_ADDR_OWVAR 21
15757: PUSH
15758: LD_VAR 0 5
15762: ST_TO_ADDR
// vc_engine = vehengine ;
15763: LD_ADDR_OWVAR 39
15767: PUSH
15768: LD_VAR 0 6
15772: ST_TO_ADDR
// vc_control = vehcontrol ;
15773: LD_ADDR_OWVAR 38
15777: PUSH
15778: LD_VAR 0 7
15782: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15783: LD_ADDR_OWVAR 40
15787: PUSH
15788: LD_VAR 0 8
15792: PUSH
15793: LD_INT 1
15795: PPUSH
15796: LD_VAR 0 8
15800: PPUSH
15801: CALL_OW 12
15805: ARRAY
15806: ST_TO_ADDR
// for j = 1 to RuWeapons do
15807: LD_ADDR_VAR 0 14
15811: PUSH
15812: DOUBLE
15813: LD_INT 1
15815: DEC
15816: ST_TO_ADDR
15817: LD_VAR 0 8
15821: PUSH
15822: FOR_TO
15823: IFFALSE 16025
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15825: LD_VAR 0 8
15829: PUSH
15830: LD_VAR 0 14
15834: ARRAY
15835: PUSH
15836: LD_INT 42
15838: EQUAL
15839: PUSH
15840: LD_VAR 0 8
15844: PUSH
15845: LD_VAR 0 14
15849: ARRAY
15850: PUSH
15851: LD_INT 43
15853: EQUAL
15854: OR
15855: PUSH
15856: LD_VAR 0 8
15860: PUSH
15861: LD_VAR 0 14
15865: ARRAY
15866: PUSH
15867: LD_INT 44
15869: EQUAL
15870: OR
15871: PUSH
15872: LD_VAR 0 8
15876: PUSH
15877: LD_VAR 0 14
15881: ARRAY
15882: PUSH
15883: LD_INT 45
15885: EQUAL
15886: OR
15887: PUSH
15888: LD_VAR 0 8
15892: PUSH
15893: LD_VAR 0 14
15897: ARRAY
15898: PUSH
15899: LD_INT 49
15901: EQUAL
15902: OR
15903: IFFALSE 15952
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15905: LD_ADDR_VAR 0 17
15909: PUSH
15910: LD_INT 21
15912: PUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 23
15918: PUSH
15919: LD_INT 24
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15928: LD_ADDR_OWVAR 37
15932: PUSH
15933: LD_VAR 0 17
15937: PUSH
15938: LD_INT 1
15940: PPUSH
15941: LD_VAR 0 17
15945: PPUSH
15946: CALL_OW 12
15950: ARRAY
15951: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15952: LD_VAR 0 8
15956: PUSH
15957: LD_VAR 0 14
15961: ARRAY
15962: PUSH
15963: LD_INT 46
15965: EQUAL
15966: PUSH
15967: LD_VAR 0 8
15971: PUSH
15972: LD_VAR 0 14
15976: ARRAY
15977: PUSH
15978: LD_INT 47
15980: EQUAL
15981: OR
15982: IFFALSE 16023
// begin ruChassisTab = [ 23 , 24 ] ;
15984: LD_ADDR_VAR 0 17
15988: PUSH
15989: LD_INT 23
15991: PUSH
15992: LD_INT 24
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15999: LD_ADDR_OWVAR 37
16003: PUSH
16004: LD_VAR 0 17
16008: PUSH
16009: LD_INT 1
16011: PPUSH
16012: LD_VAR 0 17
16016: PPUSH
16017: CALL_OW 12
16021: ARRAY
16022: ST_TO_ADDR
// end ; end ;
16023: GO 15822
16025: POP
16026: POP
// veh = CreateVehicle ;
16027: LD_ADDR_VAR 0 16
16031: PUSH
16032: CALL_OW 45
16036: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16037: LD_VAR 0 16
16041: PPUSH
16042: LD_VAR 0 1
16046: PPUSH
16047: LD_INT 0
16049: PPUSH
16050: CALL_OW 49
// if vehcontrol = 1 then
16054: LD_VAR 0 7
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: IFFALSE 16119
// begin hc_gallery =  ;
16064: LD_ADDR_OWVAR 33
16068: PUSH
16069: LD_STRING 
16071: ST_TO_ADDR
// hc_name =  ;
16072: LD_ADDR_OWVAR 26
16076: PUSH
16077: LD_STRING 
16079: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16080: LD_INT 0
16082: PPUSH
16083: LD_INT 3
16085: PPUSH
16086: LD_VAR 0 4
16090: PPUSH
16091: CALL_OW 380
// un = CreateHuman ;
16095: LD_ADDR_VAR 0 15
16099: PUSH
16100: CALL_OW 44
16104: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16105: LD_VAR 0 15
16109: PPUSH
16110: LD_VAR 0 16
16114: PPUSH
16115: CALL_OW 52
// end ; i = i + 1 ;
16119: LD_ADDR_VAR 0 13
16123: PUSH
16124: LD_VAR 0 13
16128: PUSH
16129: LD_INT 1
16131: PLUS
16132: ST_TO_ADDR
// end ; until i = vehCount ;
16133: LD_VAR 0 13
16137: PUSH
16138: LD_VAR 0 3
16142: EQUAL
16143: IFFALSE 14795
// repeat wait ( 0 0$1 ) ;
16145: LD_INT 35
16147: PPUSH
16148: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16152: LD_ADDR_VAR 0 20
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_VAR 0 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 21
16171: PUSH
16172: LD_INT 2
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 24
16181: PUSH
16182: LD_INT 250
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: PPUSH
16194: CALL_OW 69
16198: ST_TO_ADDR
// if vehicleOK_list > 0 then
16199: LD_VAR 0 20
16203: PUSH
16204: LD_INT 0
16206: GREATER
16207: IFFALSE 16398
// begin for i in vehicleOK_list do
16209: LD_ADDR_VAR 0 13
16213: PUSH
16214: LD_VAR 0 20
16218: PUSH
16219: FOR_IN
16220: IFFALSE 16396
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16222: LD_ADDR_VAR 0 21
16226: PUSH
16227: LD_INT 22
16229: PUSH
16230: LD_VAR 0 11
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PPUSH
16239: CALL_OW 69
16243: PPUSH
16244: LD_VAR 0 13
16248: PPUSH
16249: CALL_OW 74
16253: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16254: LD_ADDR_VAR 0 22
16258: PUSH
16259: LD_INT 22
16261: PUSH
16262: LD_VAR 0 11
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: LD_INT 59
16276: PUSH
16277: EMPTY
16278: LIST
16279: PUSH
16280: LD_INT 21
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 2
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: PPUSH
16313: CALL_OW 69
16317: PPUSH
16318: LD_VAR 0 13
16322: PPUSH
16323: CALL_OW 74
16327: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16328: LD_VAR 0 13
16332: PPUSH
16333: LD_VAR 0 21
16337: PPUSH
16338: CALL_OW 296
16342: PUSH
16343: LD_INT 6
16345: PLUS
16346: PUSH
16347: LD_VAR 0 13
16351: PPUSH
16352: LD_VAR 0 22
16356: PPUSH
16357: CALL_OW 296
16361: LESS
16362: IFFALSE 16380
// begin ComAttackUnit ( i , target1 ) ;
16364: LD_VAR 0 13
16368: PPUSH
16369: LD_VAR 0 21
16373: PPUSH
16374: CALL_OW 115
// end else
16378: GO 16394
// begin ComAttackUnit ( i , target2 ) ;
16380: LD_VAR 0 13
16384: PPUSH
16385: LD_VAR 0 22
16389: PPUSH
16390: CALL_OW 115
// end ; end ;
16394: GO 16219
16396: POP
16397: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16398: LD_INT 22
16400: PUSH
16401: LD_VAR 0 2
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 21
16412: PUSH
16413: LD_INT 2
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 24
16422: PUSH
16423: LD_INT 250
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: LIST
16434: PPUSH
16435: CALL_OW 69
16439: PUSH
16440: LD_INT 0
16442: EQUAL
16443: IFFALSE 16145
// end ;
16445: LD_VAR 0 12
16449: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16450: LD_INT 0
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16460: LD_ADDR_VAR 0 7
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_VAR 0 1
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: LD_INT 3
16482: PUSH
16483: LD_INT 24
16485: PUSH
16486: LD_INT 550
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 24
16499: PUSH
16500: LD_INT 250
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16521: LD_ADDR_VAR 0 8
16525: PUSH
16526: LD_INT 22
16528: PUSH
16529: LD_VAR 0 1
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 2
16540: PUSH
16541: LD_INT 25
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 25
16553: PUSH
16554: LD_INT 5
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 25
16563: PUSH
16564: LD_INT 8
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 25
16573: PUSH
16574: LD_INT 9
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 24
16590: PUSH
16591: LD_INT 1000
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16608: LD_ADDR_VAR 0 9
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_VAR 0 1
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 25
16627: PUSH
16628: LD_INT 4
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PPUSH
16639: CALL_OW 69
16643: ST_TO_ADDR
// if medicCount > 0 then
16644: LD_VAR 0 9
16648: PUSH
16649: LD_INT 0
16651: GREATER
16652: IFFALSE 16726
// begin if damageUnit_list > 0 then
16654: LD_VAR 0 7
16658: PUSH
16659: LD_INT 0
16661: GREATER
16662: IFFALSE 16726
// begin for i in damageUnit_list do
16664: LD_ADDR_VAR 0 5
16668: PUSH
16669: LD_VAR 0 7
16673: PUSH
16674: FOR_IN
16675: IFFALSE 16724
// begin ComMoveToArea ( i , healArea ) ;
16677: LD_VAR 0 5
16681: PPUSH
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 113
// for j in medicCount do
16691: LD_ADDR_VAR 0 6
16695: PUSH
16696: LD_VAR 0 9
16700: PUSH
16701: FOR_IN
16702: IFFALSE 16720
// AddComHeal ( j , i ) ;
16704: LD_VAR 0 6
16708: PPUSH
16709: LD_VAR 0 5
16713: PPUSH
16714: CALL_OW 188
16718: GO 16701
16720: POP
16721: POP
// end ;
16722: GO 16674
16724: POP
16725: POP
// end ; end ; if soldiersOK_list > 0 then
16726: LD_VAR 0 8
16730: PUSH
16731: LD_INT 0
16733: GREATER
16734: IFFALSE 16925
// begin for i in soldiersOK_list do
16736: LD_ADDR_VAR 0 5
16740: PUSH
16741: LD_VAR 0 8
16745: PUSH
16746: FOR_IN
16747: IFFALSE 16923
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16749: LD_ADDR_VAR 0 10
16753: PUSH
16754: LD_INT 22
16756: PUSH
16757: LD_VAR 0 3
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PPUSH
16766: CALL_OW 69
16770: PPUSH
16771: LD_VAR 0 5
16775: PPUSH
16776: CALL_OW 74
16780: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16781: LD_ADDR_VAR 0 11
16785: PUSH
16786: LD_INT 22
16788: PUSH
16789: LD_VAR 0 3
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 2
16800: PUSH
16801: LD_INT 59
16803: PUSH
16804: EMPTY
16805: LIST
16806: PUSH
16807: LD_INT 21
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 21
16819: PUSH
16820: LD_INT 2
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: PPUSH
16840: CALL_OW 69
16844: PPUSH
16845: LD_VAR 0 5
16849: PPUSH
16850: CALL_OW 74
16854: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16855: LD_VAR 0 5
16859: PPUSH
16860: LD_VAR 0 10
16864: PPUSH
16865: CALL_OW 296
16869: PUSH
16870: LD_INT 8
16872: PLUS
16873: PUSH
16874: LD_VAR 0 5
16878: PPUSH
16879: LD_VAR 0 11
16883: PPUSH
16884: CALL_OW 296
16888: LESS
16889: IFFALSE 16907
// begin ComAttackUnit ( i , target1 ) ;
16891: LD_VAR 0 5
16895: PPUSH
16896: LD_VAR 0 10
16900: PPUSH
16901: CALL_OW 115
// end else
16905: GO 16921
// begin ComAttackUnit ( i , target2 ) ;
16907: LD_VAR 0 5
16911: PPUSH
16912: LD_VAR 0 11
16916: PPUSH
16917: CALL_OW 115
// end ; end ;
16921: GO 16746
16923: POP
16924: POP
// end ; end ;
16925: LD_VAR 0 4
16929: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16930: LD_INT 0
16932: PPUSH
16933: PPUSH
// list := [ ] ;
16934: LD_ADDR_VAR 0 5
16938: PUSH
16939: EMPTY
16940: ST_TO_ADDR
// case d of 0 :
16941: LD_VAR 0 3
16945: PUSH
16946: LD_INT 0
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 17087
16954: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16955: LD_ADDR_VAR 0 5
16959: PUSH
16960: LD_VAR 0 1
16964: PUSH
16965: LD_INT 4
16967: MINUS
16968: PUSH
16969: LD_VAR 0 2
16973: PUSH
16974: LD_INT 4
16976: MINUS
16977: PUSH
16978: LD_INT 2
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: PUSH
16986: LD_VAR 0 1
16990: PUSH
16991: LD_INT 3
16993: MINUS
16994: PUSH
16995: LD_VAR 0 2
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: PUSH
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 4
17015: PLUS
17016: PUSH
17017: LD_VAR 0 2
17021: PUSH
17022: LD_INT 4
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: LIST
17029: PUSH
17030: LD_VAR 0 1
17034: PUSH
17035: LD_INT 3
17037: PLUS
17038: PUSH
17039: LD_VAR 0 2
17043: PUSH
17044: LD_INT 3
17046: PLUS
17047: PUSH
17048: LD_INT 5
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: LD_VAR 0 1
17060: PUSH
17061: LD_VAR 0 2
17065: PUSH
17066: LD_INT 4
17068: PLUS
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: ST_TO_ADDR
// end ; 1 :
17085: GO 17785
17087: LD_INT 1
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17228
17095: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
17096: LD_ADDR_VAR 0 5
17100: PUSH
17101: LD_VAR 0 1
17105: PUSH
17106: LD_VAR 0 2
17110: PUSH
17111: LD_INT 4
17113: MINUS
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: PUSH
17123: LD_VAR 0 1
17127: PUSH
17128: LD_INT 3
17130: MINUS
17131: PUSH
17132: LD_VAR 0 2
17136: PUSH
17137: LD_INT 3
17139: MINUS
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: PUSH
17149: LD_VAR 0 1
17153: PUSH
17154: LD_INT 4
17156: MINUS
17157: PUSH
17158: LD_VAR 0 2
17162: PUSH
17163: LD_INT 1
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: PUSH
17171: LD_VAR 0 1
17175: PUSH
17176: LD_VAR 0 2
17180: PUSH
17181: LD_INT 3
17183: PLUS
17184: PUSH
17185: LD_INT 0
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_VAR 0 1
17197: PUSH
17198: LD_INT 4
17200: PLUS
17201: PUSH
17202: LD_VAR 0 2
17206: PUSH
17207: LD_INT 4
17209: PLUS
17210: PUSH
17211: LD_INT 5
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: ST_TO_ADDR
// end ; 2 :
17226: GO 17785
17228: LD_INT 2
17230: DOUBLE
17231: EQUAL
17232: IFTRUE 17236
17234: GO 17365
17236: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17237: LD_ADDR_VAR 0 5
17241: PUSH
17242: LD_VAR 0 1
17246: PUSH
17247: LD_VAR 0 2
17251: PUSH
17252: LD_INT 3
17254: MINUS
17255: PUSH
17256: LD_INT 3
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: PUSH
17264: LD_VAR 0 1
17268: PUSH
17269: LD_INT 4
17271: PLUS
17272: PUSH
17273: LD_VAR 0 2
17277: PUSH
17278: LD_INT 4
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: LIST
17285: PUSH
17286: LD_VAR 0 1
17290: PUSH
17291: LD_VAR 0 2
17295: PUSH
17296: LD_INT 4
17298: PLUS
17299: PUSH
17300: LD_INT 0
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: PUSH
17308: LD_VAR 0 1
17312: PUSH
17313: LD_INT 3
17315: MINUS
17316: PUSH
17317: LD_VAR 0 2
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: PUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 4
17337: MINUS
17338: PUSH
17339: LD_VAR 0 2
17343: PUSH
17344: LD_INT 4
17346: MINUS
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: ST_TO_ADDR
// end ; 3 :
17363: GO 17785
17365: LD_INT 3
17367: DOUBLE
17368: EQUAL
17369: IFTRUE 17373
17371: GO 17506
17373: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17374: LD_ADDR_VAR 0 5
17378: PUSH
17379: LD_VAR 0 1
17383: PUSH
17384: LD_INT 3
17386: PLUS
17387: PUSH
17388: LD_VAR 0 2
17392: PUSH
17393: LD_INT 4
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: PUSH
17401: LD_VAR 0 1
17405: PUSH
17406: LD_INT 4
17408: PLUS
17409: PUSH
17410: LD_VAR 0 2
17414: PUSH
17415: LD_INT 4
17417: PLUS
17418: PUSH
17419: LD_INT 5
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: PUSH
17427: LD_VAR 0 1
17431: PUSH
17432: LD_INT 4
17434: MINUS
17435: PUSH
17436: LD_VAR 0 2
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: PUSH
17449: LD_VAR 0 1
17453: PUSH
17454: LD_VAR 0 2
17458: PUSH
17459: LD_INT 4
17461: MINUS
17462: PUSH
17463: LD_INT 3
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_VAR 0 1
17475: PUSH
17476: LD_INT 3
17478: MINUS
17479: PUSH
17480: LD_VAR 0 2
17484: PUSH
17485: LD_INT 3
17487: MINUS
17488: PUSH
17489: LD_INT 2
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: ST_TO_ADDR
// end ; 4 :
17504: GO 17785
17506: LD_INT 4
17508: DOUBLE
17509: EQUAL
17510: IFTRUE 17514
17512: GO 17647
17514: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17515: LD_ADDR_VAR 0 5
17519: PUSH
17520: LD_VAR 0 1
17524: PUSH
17525: LD_VAR 0 2
17529: PUSH
17530: LD_INT 4
17532: PLUS
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: PUSH
17542: LD_VAR 0 1
17546: PUSH
17547: LD_INT 3
17549: PLUS
17550: PUSH
17551: LD_VAR 0 2
17555: PUSH
17556: LD_INT 3
17558: PLUS
17559: PUSH
17560: LD_INT 5
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: PUSH
17568: LD_VAR 0 1
17572: PUSH
17573: LD_INT 3
17575: PLUS
17576: PUSH
17577: LD_VAR 0 2
17581: PUSH
17582: LD_INT 4
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: PUSH
17590: LD_VAR 0 1
17594: PUSH
17595: LD_VAR 0 2
17599: PUSH
17600: LD_INT 3
17602: MINUS
17603: PUSH
17604: LD_INT 3
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_VAR 0 1
17616: PUSH
17617: LD_INT 4
17619: MINUS
17620: PUSH
17621: LD_VAR 0 2
17625: PUSH
17626: LD_INT 4
17628: MINUS
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: ST_TO_ADDR
// end ; 5 :
17645: GO 17785
17647: LD_INT 5
17649: DOUBLE
17650: EQUAL
17651: IFTRUE 17655
17653: GO 17784
17655: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17656: LD_ADDR_VAR 0 5
17660: PUSH
17661: LD_VAR 0 1
17665: PUSH
17666: LD_INT 4
17668: MINUS
17669: PUSH
17670: LD_VAR 0 2
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: LIST
17682: PUSH
17683: LD_VAR 0 1
17687: PUSH
17688: LD_VAR 0 2
17692: PUSH
17693: LD_INT 4
17695: MINUS
17696: PUSH
17697: LD_INT 3
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: PUSH
17705: LD_VAR 0 1
17709: PUSH
17710: LD_INT 4
17712: PLUS
17713: PUSH
17714: LD_VAR 0 2
17718: PUSH
17719: LD_INT 4
17721: PLUS
17722: PUSH
17723: LD_INT 5
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: LIST
17730: PUSH
17731: LD_VAR 0 1
17735: PUSH
17736: LD_INT 3
17738: PLUS
17739: PUSH
17740: LD_VAR 0 2
17744: PUSH
17745: LD_INT 4
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: PUSH
17753: LD_VAR 0 1
17757: PUSH
17758: LD_VAR 0 2
17762: PUSH
17763: LD_INT 3
17765: PLUS
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: ST_TO_ADDR
// end ; end ;
17782: GO 17785
17784: POP
// result := list ;
17785: LD_ADDR_VAR 0 4
17789: PUSH
17790: LD_VAR 0 5
17794: ST_TO_ADDR
// end ;
17795: LD_VAR 0 4
17799: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17800: LD_INT 0
17802: PPUSH
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
17809: PPUSH
17810: PPUSH
// result := false ;
17811: LD_ADDR_VAR 0 7
17815: PUSH
17816: LD_INT 0
17818: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17819: LD_VAR 0 1
17823: NOT
17824: PUSH
17825: LD_VAR 0 1
17829: PPUSH
17830: CALL_OW 266
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: IN
17845: NOT
17846: OR
17847: PUSH
17848: LD_VAR 0 2
17852: NOT
17853: OR
17854: PUSH
17855: LD_VAR 0 5
17859: PUSH
17860: LD_INT 0
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: LD_INT 2
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: LD_INT 4
17874: PUSH
17875: LD_INT 5
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: IN
17886: NOT
17887: OR
17888: PUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: LD_VAR 0 4
17898: PPUSH
17899: CALL_OW 488
17903: NOT
17904: OR
17905: IFFALSE 17909
// exit ;
17907: GO 18590
// pom := GetBase ( bdepot ) ;
17909: LD_ADDR_VAR 0 10
17913: PUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 274
17923: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17924: LD_ADDR_VAR 0 11
17928: PUSH
17929: LD_VAR 0 2
17933: PPUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 248
17943: PPUSH
17944: CALL_OW 450
17948: ST_TO_ADDR
// if check_cost then
17949: LD_VAR 0 6
17953: IFFALSE 18030
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17955: LD_VAR 0 10
17959: PPUSH
17960: LD_INT 1
17962: PPUSH
17963: CALL_OW 275
17967: PUSH
17968: LD_VAR 0 11
17972: PUSH
17973: LD_INT 1
17975: ARRAY
17976: GREATEREQUAL
17977: PUSH
17978: LD_VAR 0 10
17982: PPUSH
17983: LD_INT 2
17985: PPUSH
17986: CALL_OW 275
17990: PUSH
17991: LD_VAR 0 11
17995: PUSH
17996: LD_INT 2
17998: ARRAY
17999: GREATEREQUAL
18000: AND
18001: PUSH
18002: LD_VAR 0 10
18006: PPUSH
18007: LD_INT 3
18009: PPUSH
18010: CALL_OW 275
18014: PUSH
18015: LD_VAR 0 11
18019: PUSH
18020: LD_INT 3
18022: ARRAY
18023: GREATEREQUAL
18024: AND
18025: NOT
18026: IFFALSE 18030
// exit ;
18028: GO 18590
// if GetBType ( bdepot ) = b_depot then
18030: LD_VAR 0 1
18034: PPUSH
18035: CALL_OW 266
18039: PUSH
18040: LD_INT 0
18042: EQUAL
18043: IFFALSE 18055
// dist := 28 else
18045: LD_ADDR_VAR 0 14
18049: PUSH
18050: LD_INT 28
18052: ST_TO_ADDR
18053: GO 18063
// dist := 36 ;
18055: LD_ADDR_VAR 0 14
18059: PUSH
18060: LD_INT 36
18062: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
18063: LD_VAR 0 1
18067: PPUSH
18068: LD_VAR 0 3
18072: PPUSH
18073: LD_VAR 0 4
18077: PPUSH
18078: CALL_OW 297
18082: PUSH
18083: LD_VAR 0 14
18087: GREATER
18088: IFFALSE 18092
// exit ;
18090: GO 18590
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18092: LD_ADDR_VAR 0 12
18096: PUSH
18097: LD_VAR 0 2
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_VAR 0 4
18111: PPUSH
18112: LD_VAR 0 5
18116: PPUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: CALL_OW 248
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: CALL 18595 0 6
18134: ST_TO_ADDR
// if not hexes then
18135: LD_VAR 0 12
18139: NOT
18140: IFFALSE 18144
// exit ;
18142: GO 18590
// hex := GetHexInfo ( x , y ) ;
18144: LD_ADDR_VAR 0 15
18148: PUSH
18149: LD_VAR 0 3
18153: PPUSH
18154: LD_VAR 0 4
18158: PPUSH
18159: CALL_OW 546
18163: ST_TO_ADDR
// if hex [ 1 ] then
18164: LD_VAR 0 15
18168: PUSH
18169: LD_INT 1
18171: ARRAY
18172: IFFALSE 18176
// exit ;
18174: GO 18590
// height := hex [ 2 ] ;
18176: LD_ADDR_VAR 0 13
18180: PUSH
18181: LD_VAR 0 15
18185: PUSH
18186: LD_INT 2
18188: ARRAY
18189: ST_TO_ADDR
// for i = 1 to hexes do
18190: LD_ADDR_VAR 0 8
18194: PUSH
18195: DOUBLE
18196: LD_INT 1
18198: DEC
18199: ST_TO_ADDR
18200: LD_VAR 0 12
18204: PUSH
18205: FOR_TO
18206: IFFALSE 18534
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18208: LD_VAR 0 12
18212: PUSH
18213: LD_VAR 0 8
18217: ARRAY
18218: PUSH
18219: LD_INT 1
18221: ARRAY
18222: PPUSH
18223: LD_VAR 0 12
18227: PUSH
18228: LD_VAR 0 8
18232: ARRAY
18233: PUSH
18234: LD_INT 2
18236: ARRAY
18237: PPUSH
18238: CALL_OW 488
18242: NOT
18243: IFFALSE 18247
// continue ;
18245: GO 18205
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18247: LD_ADDR_VAR 0 9
18251: PUSH
18252: LD_VAR 0 12
18256: PUSH
18257: LD_VAR 0 8
18261: ARRAY
18262: PUSH
18263: LD_INT 1
18265: ARRAY
18266: PPUSH
18267: LD_VAR 0 12
18271: PUSH
18272: LD_VAR 0 8
18276: ARRAY
18277: PUSH
18278: LD_INT 2
18280: ARRAY
18281: PPUSH
18282: CALL_OW 546
18286: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18287: LD_VAR 0 9
18291: PUSH
18292: LD_INT 1
18294: ARRAY
18295: PUSH
18296: LD_VAR 0 9
18300: PUSH
18301: LD_INT 2
18303: ARRAY
18304: PUSH
18305: LD_VAR 0 13
18309: PUSH
18310: LD_INT 2
18312: PLUS
18313: GREATER
18314: OR
18315: PUSH
18316: LD_VAR 0 9
18320: PUSH
18321: LD_INT 2
18323: ARRAY
18324: PUSH
18325: LD_VAR 0 13
18329: PUSH
18330: LD_INT 2
18332: MINUS
18333: LESS
18334: OR
18335: PUSH
18336: LD_VAR 0 9
18340: PUSH
18341: LD_INT 3
18343: ARRAY
18344: PUSH
18345: LD_INT 0
18347: PUSH
18348: LD_INT 8
18350: PUSH
18351: LD_INT 9
18353: PUSH
18354: LD_INT 10
18356: PUSH
18357: LD_INT 11
18359: PUSH
18360: LD_INT 12
18362: PUSH
18363: LD_INT 13
18365: PUSH
18366: LD_INT 16
18368: PUSH
18369: LD_INT 17
18371: PUSH
18372: LD_INT 18
18374: PUSH
18375: LD_INT 19
18377: PUSH
18378: LD_INT 20
18380: PUSH
18381: LD_INT 21
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: IN
18399: NOT
18400: OR
18401: PUSH
18402: LD_VAR 0 9
18406: PUSH
18407: LD_INT 5
18409: ARRAY
18410: NOT
18411: OR
18412: PUSH
18413: LD_VAR 0 9
18417: PUSH
18418: LD_INT 6
18420: ARRAY
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 7
18430: PUSH
18431: LD_INT 9
18433: PUSH
18434: LD_INT 10
18436: PUSH
18437: LD_INT 11
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: IN
18448: NOT
18449: OR
18450: PUSH
18451: LD_VAR 0 12
18455: PUSH
18456: LD_VAR 0 8
18460: ARRAY
18461: PUSH
18462: LD_INT 1
18464: ARRAY
18465: PPUSH
18466: LD_VAR 0 12
18470: PUSH
18471: LD_VAR 0 8
18475: ARRAY
18476: PUSH
18477: LD_INT 2
18479: ARRAY
18480: PPUSH
18481: CALL_OW 428
18485: PUSH
18486: LD_INT 0
18488: GREATER
18489: OR
18490: PUSH
18491: LD_VAR 0 12
18495: PUSH
18496: LD_VAR 0 8
18500: ARRAY
18501: PUSH
18502: LD_INT 1
18504: ARRAY
18505: PPUSH
18506: LD_VAR 0 12
18510: PUSH
18511: LD_VAR 0 8
18515: ARRAY
18516: PUSH
18517: LD_INT 2
18519: ARRAY
18520: PPUSH
18521: CALL_OW 351
18525: OR
18526: IFFALSE 18532
// exit ;
18528: POP
18529: POP
18530: GO 18590
// end ;
18532: GO 18205
18534: POP
18535: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18536: LD_VAR 0 2
18540: PUSH
18541: LD_INT 29
18543: PUSH
18544: LD_INT 30
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: IN
18551: PUSH
18552: LD_VAR 0 3
18556: PPUSH
18557: LD_VAR 0 4
18561: PPUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 255
18571: PPUSH
18572: CALL_OW 440
18576: NOT
18577: AND
18578: IFFALSE 18582
// exit ;
18580: GO 18590
// result := true ;
18582: LD_ADDR_VAR 0 7
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// end ;
18590: LD_VAR 0 7
18594: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18595: LD_INT 0
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
18610: PPUSH
18611: PPUSH
18612: PPUSH
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
18628: PPUSH
18629: PPUSH
18630: PPUSH
18631: PPUSH
18632: PPUSH
18633: PPUSH
18634: PPUSH
18635: PPUSH
18636: PPUSH
18637: PPUSH
18638: PPUSH
18639: PPUSH
18640: PPUSH
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
18647: PPUSH
18648: PPUSH
18649: PPUSH
18650: PPUSH
18651: PPUSH
18652: PPUSH
18653: PPUSH
18654: PPUSH
// result = [ ] ;
18655: LD_ADDR_VAR 0 7
18659: PUSH
18660: EMPTY
18661: ST_TO_ADDR
// temp_list = [ ] ;
18662: LD_ADDR_VAR 0 9
18666: PUSH
18667: EMPTY
18668: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18669: LD_VAR 0 4
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: LD_INT 4
18688: PUSH
18689: LD_INT 5
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: IN
18700: NOT
18701: PUSH
18702: LD_VAR 0 1
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: IN
18717: PUSH
18718: LD_VAR 0 5
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: LD_INT 2
18728: PUSH
18729: LD_INT 3
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: IN
18737: NOT
18738: AND
18739: OR
18740: IFFALSE 18744
// exit ;
18742: GO 37129
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18744: LD_VAR 0 1
18748: PUSH
18749: LD_INT 6
18751: PUSH
18752: LD_INT 7
18754: PUSH
18755: LD_INT 8
18757: PUSH
18758: LD_INT 13
18760: PUSH
18761: LD_INT 12
18763: PUSH
18764: LD_INT 15
18766: PUSH
18767: LD_INT 11
18769: PUSH
18770: LD_INT 14
18772: PUSH
18773: LD_INT 10
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: IN
18787: IFFALSE 18797
// btype = b_lab ;
18789: LD_ADDR_VAR 0 1
18793: PUSH
18794: LD_INT 6
18796: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18797: LD_VAR 0 6
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: IN
18816: NOT
18817: PUSH
18818: LD_VAR 0 1
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 3
18834: PUSH
18835: LD_INT 6
18837: PUSH
18838: LD_INT 36
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: LD_INT 31
18849: PUSH
18850: LD_INT 32
18852: PUSH
18853: LD_INT 33
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: IN
18869: NOT
18870: PUSH
18871: LD_VAR 0 6
18875: PUSH
18876: LD_INT 1
18878: EQUAL
18879: AND
18880: OR
18881: PUSH
18882: LD_VAR 0 1
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 3
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: IN
18897: NOT
18898: PUSH
18899: LD_VAR 0 6
18903: PUSH
18904: LD_INT 2
18906: EQUAL
18907: AND
18908: OR
18909: IFFALSE 18919
// mode = 0 ;
18911: LD_ADDR_VAR 0 6
18915: PUSH
18916: LD_INT 0
18918: ST_TO_ADDR
// case mode of 0 :
18919: LD_VAR 0 6
18923: PUSH
18924: LD_INT 0
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 30385
18932: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18933: LD_ADDR_VAR 0 11
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: LD_INT 3
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19126: LD_ADDR_VAR 0 12
19130: PUSH
19131: LD_INT 0
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: LD_INT 1
19146: NEG
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 1
19184: NEG
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 1
19195: NEG
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 0
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 2
19249: NEG
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: NEG
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 2
19272: NEG
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 3
19283: NEG
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 3
19294: NEG
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19322: LD_ADDR_VAR 0 13
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: NEG
19404: PUSH
19405: LD_INT 2
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 2
19445: NEG
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: NEG
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: NEG
19470: PUSH
19471: LD_INT 3
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 3
19481: NEG
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 3
19493: NEG
19494: PUSH
19495: LD_INT 3
19497: NEG
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19521: LD_ADDR_VAR 0 14
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 2
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: LD_INT 1
19628: NEG
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: NEG
19668: PUSH
19669: LD_INT 3
19671: NEG
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: LD_INT 3
19682: NEG
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: LD_INT 2
19693: NEG
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19717: LD_ADDR_VAR 0 15
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 2
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 2
19840: NEG
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 3
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19910: LD_ADDR_VAR 0 16
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: LD_INT 1
19930: NEG
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: NEG
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: NEG
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: LD_INT 2
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 3
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 3
20067: PUSH
20068: LD_INT 3
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: LD_INT 3
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20103: LD_ADDR_VAR 0 17
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: LD_INT 1
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: LD_INT 1
20176: NEG
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: NEG
20185: PUSH
20186: LD_INT 2
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 0
20196: PUSH
20197: LD_INT 2
20199: NEG
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 2
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 2
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: LD_INT 2
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 2
20279: NEG
20280: PUSH
20281: LD_INT 0
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 2
20290: NEG
20291: PUSH
20292: LD_INT 1
20294: NEG
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: LD_INT 2
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20333: LD_ADDR_VAR 0 18
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: LD_INT 0
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 0
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: NEG
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: LD_INT 2
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: LD_INT 2
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: LD_INT 1
20440: NEG
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 1
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 1
20498: NEG
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: NEG
20533: PUSH
20534: LD_INT 2
20536: NEG
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20563: LD_ADDR_VAR 0 19
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: NEG
20645: PUSH
20646: LD_INT 2
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 1
20728: NEG
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 2
20739: NEG
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 2
20750: NEG
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: LD_INT 2
20766: NEG
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20793: LD_ADDR_VAR 0 20
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: LD_INT 1
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: LD_INT 2
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 0
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 2
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 2
20969: NEG
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: NEG
20993: PUSH
20994: LD_INT 2
20996: NEG
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21023: LD_ADDR_VAR 0 21
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: LD_INT 1
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: NEG
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 1
21104: NEG
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: LD_INT 2
21119: NEG
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 2
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 2
21199: NEG
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: LD_INT 1
21214: NEG
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: NEG
21223: PUSH
21224: LD_INT 2
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21253: LD_ADDR_VAR 0 22
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: LD_INT 1
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: LD_INT 2
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: LD_INT 2
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 1
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: NEG
21419: PUSH
21420: LD_INT 1
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 2
21429: NEG
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 2
21440: NEG
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: NEG
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21483: LD_ADDR_VAR 0 23
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: LD_INT 0
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: NEG
21565: PUSH
21566: LD_INT 2
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 2
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 1
21648: NEG
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 2
21659: NEG
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: LD_INT 1
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: LD_INT 2
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 2
21694: NEG
21695: PUSH
21696: LD_INT 3
21698: NEG
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: NEG
21707: PUSH
21708: LD_INT 3
21710: NEG
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: LD_INT 2
21721: NEG
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 2
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21763: LD_ADDR_VAR 0 24
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: LD_INT 0
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: LD_INT 1
21836: NEG
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 1
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: LD_INT 1
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 2
21939: NEG
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 2
21950: NEG
21951: PUSH
21952: LD_INT 1
21954: NEG
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: LD_INT 2
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: LD_INT 2
21977: NEG
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 2
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 3
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: LD_INT 2
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22039: LD_ADDR_VAR 0 25
22043: PUSH
22044: LD_INT 0
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 0
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: LD_INT 2
22124: NEG
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 2
22215: NEG
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 2
22226: NEG
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 2
22238: NEG
22239: PUSH
22240: LD_INT 2
22242: NEG
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22313: LD_ADDR_VAR 0 26
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 2
22489: NEG
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 2
22500: NEG
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: LD_INT 2
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: LD_INT 3
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: NEG
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22589: LD_ADDR_VAR 0 27
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: NEG
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: LD_INT 2
22685: NEG
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 2
22765: NEG
22766: PUSH
22767: LD_INT 0
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 2
22776: NEG
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: LD_INT 2
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 2
22811: NEG
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 3
22822: NEG
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 3
22834: NEG
22835: PUSH
22836: LD_INT 2
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22869: LD_ADDR_VAR 0 28
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: NEG
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 2
23056: NEG
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: LD_INT 3
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 3
23096: NEG
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 3
23104: NEG
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 3
23116: NEG
23117: PUSH
23118: LD_INT 2
23120: NEG
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23151: LD_ADDR_VAR 0 29
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: LD_INT 0
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 0
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 2
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 2
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: LD_INT 1
23258: NEG
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: LD_INT 1
23321: NEG
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 2
23341: NEG
23342: PUSH
23343: LD_INT 3
23345: NEG
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 3
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: LD_INT 3
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 3
23395: NEG
23396: PUSH
23397: LD_INT 2
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23430: LD_ADDR_VAR 0 30
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 1
23488: NEG
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: NEG
23512: PUSH
23513: LD_INT 2
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: LD_INT 1
23537: NEG
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 2
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 2
23596: NEG
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 2
23607: NEG
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 3
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 3
23642: PUSH
23643: LD_INT 2
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 3
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 2
23662: NEG
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 3
23673: NEG
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23708: LD_ADDR_VAR 0 31
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 0
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: NEG
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 0
23852: PUSH
23853: LD_INT 2
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: NEG
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 2
23885: NEG
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: LD_INT 3
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 3
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 3
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 3
23951: NEG
23952: PUSH
23953: LD_INT 2
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23986: LD_ADDR_VAR 0 32
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: LD_INT 0
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: LD_INT 2
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 0
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 2
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 1
24141: NEG
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: NEG
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 2
24163: NEG
24164: PUSH
24165: LD_INT 1
24167: NEG
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: LD_INT 3
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: LD_INT 2
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 3
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: PUSH
24209: LD_INT 3
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 2
24218: NEG
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 3
24229: NEG
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24264: LD_ADDR_VAR 0 33
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: NEG
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: LD_INT 2
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: LD_INT 3
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 3
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 3
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: LD_INT 2
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 3
24508: NEG
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24543: LD_ADDR_VAR 0 34
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: NEG
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: LD_INT 3
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 2
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 3
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: LD_INT 3
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 2
24777: NEG
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 3
24788: NEG
24789: PUSH
24790: LD_INT 1
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24823: LD_ADDR_VAR 0 35
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24935: LD_ADDR_VAR 0 36
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 2
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25047: LD_ADDR_VAR 0 37
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: NEG
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25159: LD_ADDR_VAR 0 38
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 2
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: LD_INT 1
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25271: LD_ADDR_VAR 0 39
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25383: LD_ADDR_VAR 0 40
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25495: LD_ADDR_VAR 0 41
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 2
25650: NEG
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 2
25685: NEG
25686: PUSH
25687: LD_INT 3
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 2
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 3
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 3
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 3
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 3
25738: PUSH
25739: LD_INT 3
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: LD_INT 3
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: NEG
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 3
25769: NEG
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 3
25780: NEG
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: NEG
25793: PUSH
25794: LD_INT 2
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 3
25804: NEG
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25845: LD_ADDR_VAR 0 42
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 2
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: NEG
26036: PUSH
26037: LD_INT 3
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: LD_INT 3
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 3
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 3
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 3
26091: PUSH
26092: LD_INT 3
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 2
26101: PUSH
26102: LD_INT 3
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: LD_INT 3
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: LD_INT 3
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: NEG
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: NEG
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 3
26154: NEG
26155: PUSH
26156: LD_INT 3
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26195: LD_ADDR_VAR 0 43
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 3
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 3
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 3
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 3
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 3
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 2
26480: NEG
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 3
26491: NEG
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 3
26502: NEG
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26543: LD_ADDR_VAR 0 44
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 2
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: LD_INT 2
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: LD_INT 3
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 3
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 3
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 3
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 3
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 3
26817: NEG
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 3
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 3
26840: NEG
26841: PUSH
26842: LD_INT 2
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 3
26852: NEG
26853: PUSH
26854: LD_INT 3
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26893: LD_ADDR_VAR 0 45
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: NEG
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 2
27071: NEG
27072: PUSH
27073: LD_INT 2
27075: NEG
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: LD_INT 3
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: LD_INT 3
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 3
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 3
27139: PUSH
27140: LD_INT 3
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: LD_INT 3
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: LD_INT 3
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 3
27190: NEG
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 3
27202: NEG
27203: PUSH
27204: LD_INT 3
27206: NEG
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27243: LD_ADDR_VAR 0 46
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 2
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 3
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 3
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 2
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 2
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 3
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 3
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 3
27539: NEG
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 3
27550: NEG
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27591: LD_ADDR_VAR 0 47
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 0
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: LD_INT 2
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: LD_INT 2
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: NEG
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: LD_INT 2
27722: NEG
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27742: LD_ADDR_VAR 0 48
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27889: LD_ADDR_VAR 0 49
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28033: LD_ADDR_VAR 0 50
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: LD_INT 2
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28177: LD_ADDR_VAR 0 51
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 2
28289: NEG
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: NEG
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28324: LD_ADDR_VAR 0 52
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: LD_INT 2
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 2
28439: NEG
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28475: LD_ADDR_VAR 0 53
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 1
28556: NEG
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: LD_INT 2
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28705: LD_ADDR_VAR 0 54
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: LD_INT 1
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 2
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: LD_INT 2
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 2
28881: NEG
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: NEG
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28935: LD_ADDR_VAR 0 55
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: LD_INT 0
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 2
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: LD_INT 2
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29165: LD_ADDR_VAR 0 56
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 2
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: NEG
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: NEG
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: NEG
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29395: LD_ADDR_VAR 0 57
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: LD_INT 2
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 2
29571: NEG
29572: PUSH
29573: LD_INT 0
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: LD_INT 2
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29625: LD_ADDR_VAR 0 58
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 0
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: LD_INT 2
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: LD_INT 2
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 2
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: NEG
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 2
29812: NEG
29813: PUSH
29814: LD_INT 1
29816: NEG
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 2
29824: NEG
29825: PUSH
29826: LD_INT 2
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29855: LD_ADDR_VAR 0 59
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29943: LD_ADDR_VAR 0 60
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: NEG
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: LD_INT 1
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30031: LD_ADDR_VAR 0 61
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30119: LD_ADDR_VAR 0 62
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30207: LD_ADDR_VAR 0 63
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30295: LD_ADDR_VAR 0 64
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: LD_INT 0
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: ST_TO_ADDR
// end ; 1 :
30383: GO 36280
30385: LD_INT 1
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 33016
30393: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30394: LD_ADDR_VAR 0 11
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: LD_INT 3
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: LD_INT 3
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30438: LD_ADDR_VAR 0 12
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30479: LD_ADDR_VAR 0 13
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30519: LD_ADDR_VAR 0 14
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30560: LD_ADDR_VAR 0 15
30564: PUSH
30565: LD_INT 2
30567: NEG
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: NEG
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 3
30589: NEG
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30604: LD_ADDR_VAR 0 16
30608: PUSH
30609: LD_INT 2
30611: NEG
30612: PUSH
30613: LD_INT 3
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: NEG
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 3
30635: NEG
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30650: LD_ADDR_VAR 0 17
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: LD_INT 3
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: LD_INT 2
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30694: LD_ADDR_VAR 0 18
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30735: LD_ADDR_VAR 0 19
30739: PUSH
30740: LD_INT 3
30742: PUSH
30743: LD_INT 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 3
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: LD_INT 3
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30775: LD_ADDR_VAR 0 20
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30816: LD_ADDR_VAR 0 21
30820: PUSH
30821: LD_INT 2
30823: NEG
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 3
30834: NEG
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 3
30845: NEG
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30860: LD_ADDR_VAR 0 22
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: NEG
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 3
30891: NEG
30892: PUSH
30893: LD_INT 3
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30906: LD_ADDR_VAR 0 23
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 3
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30950: LD_ADDR_VAR 0 24
30954: PUSH
30955: LD_INT 3
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 4
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30991: LD_ADDR_VAR 0 25
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: LD_INT 3
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 4
31008: PUSH
31009: LD_INT 3
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 3
31018: PUSH
31019: LD_INT 4
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31031: LD_ADDR_VAR 0 26
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 3
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: LD_INT 4
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31072: LD_ADDR_VAR 0 27
31076: PUSH
31077: LD_INT 3
31079: NEG
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 3
31090: NEG
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 4
31101: NEG
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31116: LD_ADDR_VAR 0 28
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: LD_INT 3
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 4
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 4
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31162: LD_ADDR_VAR 0 29
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 3
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 4
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: LD_INT 4
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 3
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 5
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 5
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 4
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 6
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 6
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 5
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31317: LD_ADDR_VAR 0 30
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 3
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: LD_INT 1
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 4
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 4
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 4
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 5
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 5
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 6
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 6
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31460: LD_ADDR_VAR 0 31
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: LD_INT 3
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 3
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 4
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 4
31507: PUSH
31508: LD_INT 4
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 3
31517: PUSH
31518: LD_INT 4
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 5
31527: PUSH
31528: LD_INT 4
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 5
31537: PUSH
31538: LD_INT 5
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 4
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 6
31557: PUSH
31558: LD_INT 5
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 6
31567: PUSH
31568: LD_INT 6
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 5
31577: PUSH
31578: LD_INT 6
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31599: LD_ADDR_VAR 0 32
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 4
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 4
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 5
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 5
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 4
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 6
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 6
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: LD_INT 5
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31742: LD_ADDR_VAR 0 33
31746: PUSH
31747: LD_INT 2
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: NEG
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 4
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 4
31817: NEG
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 5
31828: NEG
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 5
31839: NEG
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 5
31851: NEG
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 6
31862: NEG
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 6
31873: NEG
31874: PUSH
31875: LD_INT 1
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31897: LD_ADDR_VAR 0 34
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 3
31916: NEG
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: LD_INT 3
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: LD_INT 4
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 4
31952: NEG
31953: PUSH
31954: LD_INT 3
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 4
31964: NEG
31965: PUSH
31966: LD_INT 4
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 4
31976: NEG
31977: PUSH
31978: LD_INT 5
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 5
31988: NEG
31989: PUSH
31990: LD_INT 4
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 5
32000: NEG
32001: PUSH
32002: LD_INT 5
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 5
32012: NEG
32013: PUSH
32014: LD_INT 6
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 6
32024: NEG
32025: PUSH
32026: LD_INT 5
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 6
32036: NEG
32037: PUSH
32038: LD_INT 6
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32060: LD_ADDR_VAR 0 41
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 3
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32104: LD_ADDR_VAR 0 42
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 3
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32145: LD_ADDR_VAR 0 43
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 3
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32185: LD_ADDR_VAR 0 44
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 2
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32226: LD_ADDR_VAR 0 45
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 3
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32270: LD_ADDR_VAR 0 46
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: NEG
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 3
32301: NEG
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32316: LD_ADDR_VAR 0 47
32320: PUSH
32321: LD_INT 2
32323: NEG
32324: PUSH
32325: LD_INT 3
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: LD_INT 3
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32349: LD_ADDR_VAR 0 48
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32380: LD_ADDR_VAR 0 49
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 3
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32409: LD_ADDR_VAR 0 50
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32438: LD_ADDR_VAR 0 51
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: NEG
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32469: LD_ADDR_VAR 0 52
32473: PUSH
32474: LD_INT 3
32476: NEG
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: NEG
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32502: LD_ADDR_VAR 0 53
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: LD_INT 3
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32546: LD_ADDR_VAR 0 54
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 3
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32587: LD_ADDR_VAR 0 55
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32627: LD_ADDR_VAR 0 56
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: LD_INT 3
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32668: LD_ADDR_VAR 0 57
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32712: LD_ADDR_VAR 0 58
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: LD_INT 3
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 3
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: LD_INT 3
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32758: LD_ADDR_VAR 0 59
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32802: LD_ADDR_VAR 0 60
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: LIST
32842: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32843: LD_ADDR_VAR 0 61
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32883: LD_ADDR_VAR 0 62
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32924: LD_ADDR_VAR 0 63
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32968: LD_ADDR_VAR 0 64
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 2
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// end ; 2 :
33014: GO 36280
33016: LD_INT 2
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 36279
33024: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33025: LD_ADDR_VAR 0 29
33029: PUSH
33030: LD_INT 4
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 4
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 5
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 4
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 5
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 4
33145: PUSH
33146: LD_INT 3
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 4
33155: PUSH
33156: LD_INT 4
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: LD_INT 4
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 4
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 4
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 4
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: LD_INT 4
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: LD_INT 5
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: LD_INT 5
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: LD_INT 4
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 3
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: LD_INT 3
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 3
33308: NEG
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: LD_INT 1
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 2
33331: NEG
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 4
33364: NEG
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 4
33375: NEG
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 4
33387: NEG
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: LD_INT 2
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 4
33410: NEG
33411: PUSH
33412: LD_INT 4
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 4
33422: NEG
33423: PUSH
33424: LD_INT 5
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: LD_INT 4
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: LD_INT 3
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 4
33458: NEG
33459: PUSH
33460: LD_INT 3
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 5
33470: NEG
33471: PUSH
33472: LD_INT 4
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 5
33482: NEG
33483: PUSH
33484: LD_INT 5
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: NEG
33495: PUSH
33496: LD_INT 5
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 5
33506: NEG
33507: PUSH
33508: LD_INT 3
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33563: LD_ADDR_VAR 0 30
33567: PUSH
33568: LD_INT 4
33570: PUSH
33571: LD_INT 4
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: LD_INT 4
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 5
33600: PUSH
33601: LD_INT 5
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 4
33610: PUSH
33611: LD_INT 5
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: LD_INT 4
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 3
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 5
33640: PUSH
33641: LD_INT 3
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: LD_INT 5
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 3
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 3
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 4
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 4
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: LD_INT 3
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: LD_INT 4
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 4
33753: NEG
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 4
33764: NEG
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 3
33776: NEG
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 3
33787: NEG
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 4
33798: NEG
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 5
33809: NEG
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 5
33820: NEG
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 5
33832: NEG
33833: PUSH
33834: LD_INT 2
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: LD_INT 3
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 3
33867: NEG
33868: PUSH
33869: LD_INT 4
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: LD_INT 3
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 4
33915: NEG
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 4
33927: NEG
33928: PUSH
33929: LD_INT 4
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 4
33951: NEG
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 4
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 5
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: LD_INT 4
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: LD_INT 3
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 3
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: LD_INT 4
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 5
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 3
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 5
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34110: LD_ADDR_VAR 0 31
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 3
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: LD_INT 4
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: LD_INT 5
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 5
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: LD_INT 4
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: LD_INT 5
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: LD_INT 3
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 3
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 2
34244: NEG
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 3
34255: NEG
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 4
34266: NEG
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 4
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 4
34289: NEG
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 4
34312: NEG
34313: PUSH
34314: LD_INT 4
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 4
34324: NEG
34325: PUSH
34326: LD_INT 5
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 3
34336: NEG
34337: PUSH
34338: LD_INT 4
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 3
34348: NEG
34349: PUSH
34350: LD_INT 3
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 4
34360: NEG
34361: PUSH
34362: LD_INT 3
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 5
34372: NEG
34373: PUSH
34374: LD_INT 4
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 5
34384: NEG
34385: PUSH
34386: LD_INT 5
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 3
34396: NEG
34397: PUSH
34398: LD_INT 5
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 5
34408: NEG
34409: PUSH
34410: LD_INT 3
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: LD_INT 3
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: LD_INT 4
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 3
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 2
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: LD_INT 3
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: LD_INT 4
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 2
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: NEG
34511: PUSH
34512: LD_INT 4
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 4
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 5
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 5
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 4
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 3
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 5
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34660: LD_ADDR_VAR 0 32
34664: PUSH
34665: LD_INT 4
34667: NEG
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 4
34678: NEG
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 3
34690: NEG
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 3
34701: NEG
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 4
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 5
34723: NEG
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 5
34734: NEG
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 5
34746: NEG
34747: PUSH
34748: LD_INT 2
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 3
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: LD_INT 3
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 3
34781: NEG
34782: PUSH
34783: LD_INT 4
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 3
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: LD_INT 2
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 4
34829: NEG
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 4
34841: NEG
34842: PUSH
34843: LD_INT 4
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 2
34853: NEG
34854: PUSH
34855: LD_INT 4
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 4
34865: NEG
34866: PUSH
34867: LD_INT 2
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 4
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 5
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 4
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 3
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 3
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 4
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: LD_INT 5
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: LD_INT 3
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: LD_INT 5
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 3
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 4
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 3
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 4
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 4
35072: PUSH
35073: LD_INT 4
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 4
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 5
35092: PUSH
35093: LD_INT 4
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 5
35102: PUSH
35103: LD_INT 5
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 4
35112: PUSH
35113: LD_INT 5
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 3
35122: PUSH
35123: LD_INT 4
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 3
35132: PUSH
35133: LD_INT 3
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 5
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 3
35152: PUSH
35153: LD_INT 5
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35207: LD_ADDR_VAR 0 33
35211: PUSH
35212: LD_INT 4
35214: NEG
35215: PUSH
35216: LD_INT 4
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 4
35226: NEG
35227: PUSH
35228: LD_INT 5
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 3
35238: NEG
35239: PUSH
35240: LD_INT 4
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 4
35262: NEG
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 5
35274: NEG
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 5
35286: NEG
35287: PUSH
35288: LD_INT 5
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 3
35298: NEG
35299: PUSH
35300: LD_INT 5
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 5
35310: NEG
35311: PUSH
35312: LD_INT 3
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 3
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 4
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 3
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 3
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: LD_INT 4
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: LD_INT 2
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 2
35412: NEG
35413: PUSH
35414: LD_INT 4
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 4
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 4
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 5
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 5
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 4
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: LD_INT 2
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 5
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 3
35517: PUSH
35518: LD_INT 3
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 3
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 4
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 4
35547: PUSH
35548: LD_INT 4
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 3
35557: PUSH
35558: LD_INT 4
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 4
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 4
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 4
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 4
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 5
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 5
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 4
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: NEG
35669: PUSH
35670: LD_INT 3
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: LD_INT 5
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: LD_INT 3
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35745: LD_ADDR_VAR 0 34
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 4
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 5
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: LD_INT 4
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: LD_INT 3
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 3
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: LD_INT 4
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 5
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 3
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: LD_INT 5
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 4
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 4
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 3
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: LD_INT 2
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 4
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 4
35947: PUSH
35948: LD_INT 4
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 4
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 5
35967: PUSH
35968: LD_INT 4
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 5
35977: PUSH
35978: LD_INT 5
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 4
35987: PUSH
35988: LD_INT 5
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 3
35997: PUSH
35998: LD_INT 4
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 3
36007: PUSH
36008: LD_INT 3
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 5
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 3
36027: PUSH
36028: LD_INT 5
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 3
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 4
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 4
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: LD_INT 4
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 4
36130: NEG
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 4
36141: NEG
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 3
36153: NEG
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: LD_INT 1
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 4
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 5
36186: NEG
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 5
36197: NEG
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 5
36209: NEG
36210: PUSH
36211: LD_INT 2
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 3
36221: NEG
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: ST_TO_ADDR
// end ; end ;
36277: GO 36280
36279: POP
// case btype of b_depot , b_warehouse :
36280: LD_VAR 0 1
36284: PUSH
36285: LD_INT 0
36287: DOUBLE
36288: EQUAL
36289: IFTRUE 36299
36291: LD_INT 1
36293: DOUBLE
36294: EQUAL
36295: IFTRUE 36299
36297: GO 36500
36299: POP
// case nation of nation_american :
36300: LD_VAR 0 5
36304: PUSH
36305: LD_INT 1
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36369
36313: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36314: LD_ADDR_VAR 0 9
36318: PUSH
36319: LD_VAR 0 11
36323: PUSH
36324: LD_VAR 0 12
36328: PUSH
36329: LD_VAR 0 13
36333: PUSH
36334: LD_VAR 0 14
36338: PUSH
36339: LD_VAR 0 15
36343: PUSH
36344: LD_VAR 0 16
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: LD_VAR 0 4
36361: PUSH
36362: LD_INT 1
36364: PLUS
36365: ARRAY
36366: ST_TO_ADDR
36367: GO 36498
36369: LD_INT 2
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36433
36377: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36378: LD_ADDR_VAR 0 9
36382: PUSH
36383: LD_VAR 0 17
36387: PUSH
36388: LD_VAR 0 18
36392: PUSH
36393: LD_VAR 0 19
36397: PUSH
36398: LD_VAR 0 20
36402: PUSH
36403: LD_VAR 0 21
36407: PUSH
36408: LD_VAR 0 22
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: PUSH
36421: LD_VAR 0 4
36425: PUSH
36426: LD_INT 1
36428: PLUS
36429: ARRAY
36430: ST_TO_ADDR
36431: GO 36498
36433: LD_INT 3
36435: DOUBLE
36436: EQUAL
36437: IFTRUE 36441
36439: GO 36497
36441: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36442: LD_ADDR_VAR 0 9
36446: PUSH
36447: LD_VAR 0 23
36451: PUSH
36452: LD_VAR 0 24
36456: PUSH
36457: LD_VAR 0 25
36461: PUSH
36462: LD_VAR 0 26
36466: PUSH
36467: LD_VAR 0 27
36471: PUSH
36472: LD_VAR 0 28
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: PUSH
36485: LD_VAR 0 4
36489: PUSH
36490: LD_INT 1
36492: PLUS
36493: ARRAY
36494: ST_TO_ADDR
36495: GO 36498
36497: POP
36498: GO 37047
36500: LD_INT 2
36502: DOUBLE
36503: EQUAL
36504: IFTRUE 36514
36506: LD_INT 3
36508: DOUBLE
36509: EQUAL
36510: IFTRUE 36514
36512: GO 36570
36514: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36515: LD_ADDR_VAR 0 9
36519: PUSH
36520: LD_VAR 0 29
36524: PUSH
36525: LD_VAR 0 30
36529: PUSH
36530: LD_VAR 0 31
36534: PUSH
36535: LD_VAR 0 32
36539: PUSH
36540: LD_VAR 0 33
36544: PUSH
36545: LD_VAR 0 34
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: PUSH
36558: LD_VAR 0 4
36562: PUSH
36563: LD_INT 1
36565: PLUS
36566: ARRAY
36567: ST_TO_ADDR
36568: GO 37047
36570: LD_INT 16
36572: DOUBLE
36573: EQUAL
36574: IFTRUE 36626
36576: LD_INT 17
36578: DOUBLE
36579: EQUAL
36580: IFTRUE 36626
36582: LD_INT 18
36584: DOUBLE
36585: EQUAL
36586: IFTRUE 36626
36588: LD_INT 19
36590: DOUBLE
36591: EQUAL
36592: IFTRUE 36626
36594: LD_INT 20
36596: DOUBLE
36597: EQUAL
36598: IFTRUE 36626
36600: LD_INT 21
36602: DOUBLE
36603: EQUAL
36604: IFTRUE 36626
36606: LD_INT 23
36608: DOUBLE
36609: EQUAL
36610: IFTRUE 36626
36612: LD_INT 24
36614: DOUBLE
36615: EQUAL
36616: IFTRUE 36626
36618: LD_INT 25
36620: DOUBLE
36621: EQUAL
36622: IFTRUE 36626
36624: GO 36682
36626: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36627: LD_ADDR_VAR 0 9
36631: PUSH
36632: LD_VAR 0 35
36636: PUSH
36637: LD_VAR 0 36
36641: PUSH
36642: LD_VAR 0 37
36646: PUSH
36647: LD_VAR 0 38
36651: PUSH
36652: LD_VAR 0 39
36656: PUSH
36657: LD_VAR 0 40
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: PUSH
36670: LD_VAR 0 4
36674: PUSH
36675: LD_INT 1
36677: PLUS
36678: ARRAY
36679: ST_TO_ADDR
36680: GO 37047
36682: LD_INT 6
36684: DOUBLE
36685: EQUAL
36686: IFTRUE 36738
36688: LD_INT 7
36690: DOUBLE
36691: EQUAL
36692: IFTRUE 36738
36694: LD_INT 8
36696: DOUBLE
36697: EQUAL
36698: IFTRUE 36738
36700: LD_INT 13
36702: DOUBLE
36703: EQUAL
36704: IFTRUE 36738
36706: LD_INT 12
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36738
36712: LD_INT 15
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36738
36718: LD_INT 11
36720: DOUBLE
36721: EQUAL
36722: IFTRUE 36738
36724: LD_INT 14
36726: DOUBLE
36727: EQUAL
36728: IFTRUE 36738
36730: LD_INT 10
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36794
36738: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36739: LD_ADDR_VAR 0 9
36743: PUSH
36744: LD_VAR 0 41
36748: PUSH
36749: LD_VAR 0 42
36753: PUSH
36754: LD_VAR 0 43
36758: PUSH
36759: LD_VAR 0 44
36763: PUSH
36764: LD_VAR 0 45
36768: PUSH
36769: LD_VAR 0 46
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: PUSH
36782: LD_VAR 0 4
36786: PUSH
36787: LD_INT 1
36789: PLUS
36790: ARRAY
36791: ST_TO_ADDR
36792: GO 37047
36794: LD_INT 36
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36802
36800: GO 36858
36802: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36803: LD_ADDR_VAR 0 9
36807: PUSH
36808: LD_VAR 0 47
36812: PUSH
36813: LD_VAR 0 48
36817: PUSH
36818: LD_VAR 0 49
36822: PUSH
36823: LD_VAR 0 50
36827: PUSH
36828: LD_VAR 0 51
36832: PUSH
36833: LD_VAR 0 52
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: PUSH
36846: LD_VAR 0 4
36850: PUSH
36851: LD_INT 1
36853: PLUS
36854: ARRAY
36855: ST_TO_ADDR
36856: GO 37047
36858: LD_INT 4
36860: DOUBLE
36861: EQUAL
36862: IFTRUE 36884
36864: LD_INT 5
36866: DOUBLE
36867: EQUAL
36868: IFTRUE 36884
36870: LD_INT 34
36872: DOUBLE
36873: EQUAL
36874: IFTRUE 36884
36876: LD_INT 37
36878: DOUBLE
36879: EQUAL
36880: IFTRUE 36884
36882: GO 36940
36884: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36885: LD_ADDR_VAR 0 9
36889: PUSH
36890: LD_VAR 0 53
36894: PUSH
36895: LD_VAR 0 54
36899: PUSH
36900: LD_VAR 0 55
36904: PUSH
36905: LD_VAR 0 56
36909: PUSH
36910: LD_VAR 0 57
36914: PUSH
36915: LD_VAR 0 58
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: PUSH
36928: LD_VAR 0 4
36932: PUSH
36933: LD_INT 1
36935: PLUS
36936: ARRAY
36937: ST_TO_ADDR
36938: GO 37047
36940: LD_INT 31
36942: DOUBLE
36943: EQUAL
36944: IFTRUE 36990
36946: LD_INT 32
36948: DOUBLE
36949: EQUAL
36950: IFTRUE 36990
36952: LD_INT 33
36954: DOUBLE
36955: EQUAL
36956: IFTRUE 36990
36958: LD_INT 27
36960: DOUBLE
36961: EQUAL
36962: IFTRUE 36990
36964: LD_INT 26
36966: DOUBLE
36967: EQUAL
36968: IFTRUE 36990
36970: LD_INT 28
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36990
36976: LD_INT 29
36978: DOUBLE
36979: EQUAL
36980: IFTRUE 36990
36982: LD_INT 30
36984: DOUBLE
36985: EQUAL
36986: IFTRUE 36990
36988: GO 37046
36990: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36991: LD_ADDR_VAR 0 9
36995: PUSH
36996: LD_VAR 0 59
37000: PUSH
37001: LD_VAR 0 60
37005: PUSH
37006: LD_VAR 0 61
37010: PUSH
37011: LD_VAR 0 62
37015: PUSH
37016: LD_VAR 0 63
37020: PUSH
37021: LD_VAR 0 64
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: PUSH
37034: LD_VAR 0 4
37038: PUSH
37039: LD_INT 1
37041: PLUS
37042: ARRAY
37043: ST_TO_ADDR
37044: GO 37047
37046: POP
// temp_list2 = [ ] ;
37047: LD_ADDR_VAR 0 10
37051: PUSH
37052: EMPTY
37053: ST_TO_ADDR
// for i in temp_list do
37054: LD_ADDR_VAR 0 8
37058: PUSH
37059: LD_VAR 0 9
37063: PUSH
37064: FOR_IN
37065: IFFALSE 37117
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37067: LD_ADDR_VAR 0 10
37071: PUSH
37072: LD_VAR 0 10
37076: PUSH
37077: LD_VAR 0 8
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: PUSH
37086: LD_VAR 0 2
37090: PLUS
37091: PUSH
37092: LD_VAR 0 8
37096: PUSH
37097: LD_INT 2
37099: ARRAY
37100: PUSH
37101: LD_VAR 0 3
37105: PLUS
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: ADD
37114: ST_TO_ADDR
37115: GO 37064
37117: POP
37118: POP
// result = temp_list2 ;
37119: LD_ADDR_VAR 0 7
37123: PUSH
37124: LD_VAR 0 10
37128: ST_TO_ADDR
// end ;
37129: LD_VAR 0 7
37133: RET
// export function GetDriverVehicle ( unit ) ; begin
37134: LD_INT 0
37136: PPUSH
// if not unit then
37137: LD_VAR 0 1
37141: NOT
37142: IFFALSE 37146
// exit ;
37144: GO 37184
// result := IsInUnit ( unit ) ;
37146: LD_ADDR_VAR 0 2
37150: PUSH
37151: LD_VAR 0 1
37155: PPUSH
37156: CALL_OW 310
37160: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
37161: LD_VAR 0 2
37165: PPUSH
37166: CALL_OW 247
37170: PUSH
37171: LD_INT 2
37173: NONEQUAL
37174: IFFALSE 37184
// result := 0 ;
37176: LD_ADDR_VAR 0 2
37180: PUSH
37181: LD_INT 0
37183: ST_TO_ADDR
// end ; end_of_file
37184: LD_VAR 0 2
37188: RET
// every 1 do var i ;
37189: GO 37191
37191: DISABLE
37192: LD_INT 0
37194: PPUSH
// begin Video ( true ) ;
37195: LD_INT 1
37197: PPUSH
37198: CALL 7172 0 1
// CenterOnXY ( 53 , 40 ) ;
37202: LD_INT 53
37204: PPUSH
37205: LD_INT 40
37207: PPUSH
37208: CALL_OW 84
// wait ( 0 0$5 ) ;
37212: LD_INT 175
37214: PPUSH
37215: CALL_OW 67
// if gammaCommander = 1 then
37219: LD_EXP 12
37223: PUSH
37224: LD_INT 1
37226: EQUAL
37227: IFFALSE 37241
// Say ( Donaldson , D1-Don-1 ) ;
37229: LD_EXP 3
37233: PPUSH
37234: LD_STRING D1-Don-1
37236: PPUSH
37237: CALL_OW 88
// if gammaCommander = 2 then
37241: LD_EXP 12
37245: PUSH
37246: LD_INT 2
37248: EQUAL
37249: IFFALSE 37263
// Say ( Brown , D1-Brown-1 ) ;
37251: LD_EXP 2
37255: PPUSH
37256: LD_STRING D1-Brown-1
37258: PPUSH
37259: CALL_OW 88
// if gammaCommander = 3 then
37263: LD_EXP 12
37267: PUSH
37268: LD_INT 3
37270: EQUAL
37271: IFFALSE 37285
// Say ( Houten , D1-VanH-1 ) ;
37273: LD_EXP 13
37277: PPUSH
37278: LD_STRING D1-VanH-1
37280: PPUSH
37281: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37285: LD_EXP 22
37289: PPUSH
37290: LD_STRING D1-Har-1
37292: PPUSH
37293: CALL_OW 94
// if gammaCommander = 1 then
37297: LD_EXP 12
37301: PUSH
37302: LD_INT 1
37304: EQUAL
37305: IFFALSE 37319
// Say ( Donaldson , D1-Don-2 ) ;
37307: LD_EXP 3
37311: PPUSH
37312: LD_STRING D1-Don-2
37314: PPUSH
37315: CALL_OW 88
// if gammaCommander = 2 then
37319: LD_EXP 12
37323: PUSH
37324: LD_INT 2
37326: EQUAL
37327: IFFALSE 37341
// Say ( Brown , D1-Brown-2 ) ;
37329: LD_EXP 2
37333: PPUSH
37334: LD_STRING D1-Brown-2
37336: PPUSH
37337: CALL_OW 88
// if gammaCommander = 3 then
37341: LD_EXP 12
37345: PUSH
37346: LD_INT 3
37348: EQUAL
37349: IFFALSE 37363
// Say ( Houten , D1-VanH-2 ) ;
37351: LD_EXP 13
37355: PPUSH
37356: LD_STRING D1-VanH-2
37358: PPUSH
37359: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37363: LD_EXP 22
37367: PPUSH
37368: LD_STRING D1-Har-2
37370: PPUSH
37371: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37375: LD_INT 22
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 33
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 61
37397: PUSH
37398: EMPTY
37399: LIST
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: PPUSH
37406: CALL_OW 69
37410: IFFALSE 37475
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37412: LD_ADDR_VAR 0 1
37416: PUSH
37417: LD_INT 22
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 33
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 61
37439: PUSH
37440: EMPTY
37441: LIST
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: PPUSH
37448: CALL_OW 69
37452: PUSH
37453: FOR_IN
37454: IFFALSE 37473
// ComAgressiveMove ( i , 70 , 41 ) ;
37456: LD_VAR 0 1
37460: PPUSH
37461: LD_INT 70
37463: PPUSH
37464: LD_INT 41
37466: PPUSH
37467: CALL_OW 114
37471: GO 37453
37473: POP
37474: POP
// repeat wait ( 0 0$1 ) ;
37475: LD_INT 35
37477: PPUSH
37478: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37482: LD_ADDR_VAR 0 1
37486: PUSH
37487: LD_INT 22
37489: PUSH
37490: LD_INT 6
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: EMPTY
37498: LIST
37499: PPUSH
37500: CALL_OW 69
37504: PUSH
37505: FOR_IN
37506: IFFALSE 37525
// ComAgressiveMove ( i , 54 , 20 ) ;
37508: LD_VAR 0 1
37512: PPUSH
37513: LD_INT 54
37515: PPUSH
37516: LD_INT 20
37518: PPUSH
37519: CALL_OW 114
37523: GO 37505
37525: POP
37526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37527: LD_ADDR_VAR 0 1
37531: PUSH
37532: LD_INT 22
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 25
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 3
37554: PUSH
37555: LD_INT 54
37557: PUSH
37558: EMPTY
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: LIST
37569: PPUSH
37570: CALL_OW 69
37574: PUSH
37575: FOR_IN
37576: IFFALSE 37610
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37578: LD_VAR 0 1
37582: PPUSH
37583: LD_INT 70
37585: PPUSH
37586: LD_INT 41
37588: PPUSH
37589: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37593: LD_VAR 0 1
37597: PPUSH
37598: LD_INT 46
37600: PPUSH
37601: LD_INT 39
37603: PPUSH
37604: CALL_OW 174
// end ;
37608: GO 37575
37610: POP
37611: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37612: LD_ADDR_VAR 0 1
37616: PUSH
37617: LD_INT 22
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 21
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: LD_INT 24
37642: PUSH
37643: LD_INT 500
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: PPUSH
37659: CALL_OW 69
37663: PUSH
37664: FOR_IN
37665: IFFALSE 37698
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37667: LD_VAR 0 1
37671: PPUSH
37672: LD_EXP 37
37676: PPUSH
37677: CALL_OW 250
37681: PPUSH
37682: LD_EXP 37
37686: PPUSH
37687: CALL_OW 251
37691: PPUSH
37692: CALL_OW 111
37696: GO 37664
37698: POP
37699: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37700: LD_INT 22
37702: PUSH
37703: LD_INT 6
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 21
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 24
37722: PUSH
37723: LD_INT 250
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: LIST
37734: PPUSH
37735: CALL_OW 69
37739: PUSH
37740: LD_INT 5
37742: LESS
37743: IFFALSE 37475
// Video ( false ) ;
37745: LD_INT 0
37747: PPUSH
37748: CALL 7172 0 1
// ChangeMissionObjectives ( M1 ) ;
37752: LD_STRING M1
37754: PPUSH
37755: CALL_OW 337
// SaveForQuickRestart ;
37759: CALL_OW 22
// startCutscene = 0 ;
37763: LD_ADDR_EXP 38
37767: PUSH
37768: LD_INT 0
37770: ST_TO_ADDR
// end ;
37771: PPOPN 1
37773: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37774: LD_EXP 38
37778: IFFALSE 37869
37780: GO 37782
37782: DISABLE
37783: LD_INT 0
37785: PPUSH
37786: PPUSH
// begin enable ;
37787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37788: LD_ADDR_VAR 0 1
37792: PUSH
37793: LD_INT 22
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 21
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 3
37815: PUSH
37816: LD_INT 24
37818: PUSH
37819: LD_INT 700
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: PPUSH
37835: CALL_OW 69
37839: ST_TO_ADDR
// for i in tmp do
37840: LD_ADDR_VAR 0 2
37844: PUSH
37845: LD_VAR 0 1
37849: PUSH
37850: FOR_IN
37851: IFFALSE 37867
// SetLives ( i , 700 ) ;
37853: LD_VAR 0 2
37857: PPUSH
37858: LD_INT 700
37860: PPUSH
37861: CALL_OW 234
37865: GO 37850
37867: POP
37868: POP
// end ;
37869: PPOPN 2
37871: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 do
37872: LD_INT 22
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 101
37884: PUSH
37885: LD_INT 6
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PPUSH
37896: CALL_OW 69
37900: PUSH
37901: LD_INT 0
37903: EQUAL
37904: IFFALSE 38153
37906: GO 37908
37908: DISABLE
// begin PrepareSupportFromDelta ;
37909: CALL 3856 0 0
// firstAttack = 1 ;
37913: LD_ADDR_EXP 33
37917: PUSH
37918: LD_INT 1
37920: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37921: LD_EXP 8
37925: PPUSH
37926: CALL_OW 302
37930: IFFALSE 37946
// Say ( Gladstone , D2-Glad-1 ) else
37932: LD_EXP 8
37936: PPUSH
37937: LD_STRING D2-Glad-1
37939: PPUSH
37940: CALL_OW 88
37944: GO 38054
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37946: LD_INT 4
37948: PPUSH
37949: LD_INT 22
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 21
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 25
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 25
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 25
37994: PUSH
37995: LD_INT 3
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 25
38004: PUSH
38005: LD_INT 4
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: PPUSH
38024: CALL_OW 70
38028: PUSH
38029: LD_EXP 15
38033: PUSH
38034: LD_EXP 14
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: DIFF
38043: PPUSH
38044: LD_STRING D2-Sol1-1
38046: PPUSH
38047: LD_STRING D2-FSol1-1
38049: PPUSH
38050: CALL 7200 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38054: LD_EXP 3
38058: PPUSH
38059: CALL_OW 302
38063: PUSH
38064: LD_EXP 12
38068: PUSH
38069: LD_INT 1
38071: EQUAL
38072: AND
38073: IFFALSE 38087
// Say ( Donaldson , D2-Don-1 ) ;
38075: LD_EXP 3
38079: PPUSH
38080: LD_STRING D2-Don-1
38082: PPUSH
38083: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
38087: LD_EXP 2
38091: PPUSH
38092: CALL_OW 302
38096: PUSH
38097: LD_EXP 12
38101: PUSH
38102: LD_INT 2
38104: EQUAL
38105: AND
38106: IFFALSE 38120
// Say ( Brown , D2-Brown-1 ) ;
38108: LD_EXP 2
38112: PPUSH
38113: LD_STRING D2-Brown-1
38115: PPUSH
38116: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
38120: LD_EXP 13
38124: PPUSH
38125: CALL_OW 302
38129: PUSH
38130: LD_EXP 12
38134: PUSH
38135: LD_INT 3
38137: EQUAL
38138: AND
38139: IFFALSE 38153
// Say ( Houten , D2-VanH-1 ) ;
38141: LD_EXP 13
38145: PPUSH
38146: LD_STRING D2-VanH-1
38148: PPUSH
38149: CALL_OW 88
// end ;
38153: END
// every 0 0$1 do var none ;
38154: GO 38156
38156: DISABLE
38157: LD_INT 0
38159: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38160: LD_STRING 07_time
38162: PPUSH
38163: LD_INT 12600
38165: PPUSH
38166: CALL_OW 30
38170: PUSH
38171: LD_INT 3
38173: DIV
38174: PPUSH
38175: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
38179: LD_INT 34
38181: PPUSH
38182: LD_INT 1
38184: PPUSH
38185: CALL_OW 321
38189: PUSH
38190: LD_INT 2
38192: EQUAL
38193: IFFALSE 38202
// SetAchievement ( ACH_HEAVYGUN ) ;
38195: LD_STRING ACH_HEAVYGUN
38197: PPUSH
38198: CALL_OW 543
// PrepareMacmillanSquad ;
38202: CALL 4518 0 0
// CenterNowOnUnits ( JMM ) ;
38206: LD_EXP 1
38210: PPUSH
38211: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38215: LD_EXP 1
38219: PPUSH
38220: LD_STRING D3-JMM-1
38222: PPUSH
38223: CALL_OW 88
// JMMArrive = 1 ;
38227: LD_ADDR_EXP 39
38231: PUSH
38232: LD_INT 1
38234: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38235: LD_EXP 3
38239: PPUSH
38240: CALL_OW 302
38244: PUSH
38245: LD_EXP 12
38249: PUSH
38250: LD_INT 1
38252: EQUAL
38253: AND
38254: IFFALSE 38270
// begin Say ( Donaldson , D3-Don-1 ) ;
38256: LD_EXP 3
38260: PPUSH
38261: LD_STRING D3-Don-1
38263: PPUSH
38264: CALL_OW 88
// end else
38268: GO 38322
// begin if gammaCommander = 1 then
38270: LD_EXP 12
38274: PUSH
38275: LD_INT 1
38277: EQUAL
38278: IFFALSE 38322
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38280: LD_EXP 11
38284: PPUSH
38285: LD_INT 26
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PPUSH
38295: CALL_OW 72
38299: PPUSH
38300: LD_STRING D3-Sol1-1
38302: PPUSH
38303: LD_STRING D3-Sol1-1
38305: PPUSH
38306: CALL 7200 0 3
// Say ( JMM , D3-JMM-2 ) ;
38310: LD_EXP 1
38314: PPUSH
38315: LD_STRING D3-JMM-2
38317: PPUSH
38318: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38322: LD_EXP 2
38326: PPUSH
38327: CALL_OW 302
38331: PUSH
38332: LD_EXP 12
38336: PUSH
38337: LD_INT 2
38339: EQUAL
38340: AND
38341: IFFALSE 38357
// begin Say ( Brown , D3-Brown-1 ) ;
38343: LD_EXP 2
38347: PPUSH
38348: LD_STRING D3-Brown-1
38350: PPUSH
38351: CALL_OW 88
// end else
38355: GO 38409
// begin if gammaCommander = 2 then
38357: LD_EXP 12
38361: PUSH
38362: LD_INT 2
38364: EQUAL
38365: IFFALSE 38409
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38367: LD_EXP 11
38371: PPUSH
38372: LD_INT 26
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PPUSH
38382: CALL_OW 72
38386: PPUSH
38387: LD_STRING D3-Sol1-1a
38389: PPUSH
38390: LD_STRING D3-Sol1-1a
38392: PPUSH
38393: CALL 7200 0 3
// Say ( JMM , D3-JMM-2 ) ;
38397: LD_EXP 1
38401: PPUSH
38402: LD_STRING D3-JMM-2
38404: PPUSH
38405: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38409: LD_EXP 13
38413: PPUSH
38414: CALL_OW 302
38418: PUSH
38419: LD_EXP 12
38423: PUSH
38424: LD_INT 3
38426: EQUAL
38427: AND
38428: IFFALSE 38444
// begin Say ( Houten , D3-VanH-1 ) ;
38430: LD_EXP 13
38434: PPUSH
38435: LD_STRING D3-VanH-1
38437: PPUSH
38438: CALL_OW 88
// end else
38442: GO 38496
// begin if gammaCommander = 3 then
38444: LD_EXP 12
38448: PUSH
38449: LD_INT 3
38451: EQUAL
38452: IFFALSE 38496
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38454: LD_EXP 11
38458: PPUSH
38459: LD_INT 26
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PPUSH
38469: CALL_OW 72
38473: PPUSH
38474: LD_STRING D3-Sol1-1b
38476: PPUSH
38477: LD_STRING D3-Sol1-1b
38479: PPUSH
38480: CALL 7200 0 3
// Say ( JMM , D3-JMM-2 ) ;
38484: LD_EXP 1
38488: PPUSH
38489: LD_STRING D3-JMM-2
38491: PPUSH
38492: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38496: LD_EXP 15
38500: PPUSH
38501: CALL_OW 302
38505: IFFALSE 38533
// begin Say ( Joan , D3a-Joan-1 ) ;
38507: LD_EXP 15
38511: PPUSH
38512: LD_STRING D3a-Joan-1
38514: PPUSH
38515: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38519: LD_EXP 1
38523: PPUSH
38524: LD_STRING D3a-JMM-1
38526: PPUSH
38527: CALL_OW 88
// end else
38531: GO 38875
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38533: LD_STRING 06_JoanStatus_1
38535: PPUSH
38536: LD_INT 0
38538: PPUSH
38539: CALL_OW 30
38543: PUSH
38544: LD_INT 1
38546: EQUAL
38547: IFFALSE 38875
// begin Say ( JMM , D3b-JMM-1 ) ;
38549: LD_EXP 1
38553: PPUSH
38554: LD_STRING D3b-JMM-1
38556: PPUSH
38557: CALL_OW 88
// if gammaCommander = 1 then
38561: LD_EXP 12
38565: PUSH
38566: LD_INT 1
38568: EQUAL
38569: IFFALSE 38626
// if IsOK ( Donaldson ) then
38571: LD_EXP 3
38575: PPUSH
38576: CALL_OW 302
38580: IFFALSE 38596
// Say ( Donaldson , D3b-Don-1 ) else
38582: LD_EXP 3
38586: PPUSH
38587: LD_STRING D3b-Don-1
38589: PPUSH
38590: CALL_OW 88
38594: GO 38626
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38596: LD_EXP 11
38600: PPUSH
38601: LD_INT 26
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PPUSH
38611: CALL_OW 72
38615: PPUSH
38616: LD_STRING D3b-Sol1-1
38618: PPUSH
38619: LD_STRING D3b-Sol1-1
38621: PPUSH
38622: CALL 7200 0 3
// if gammaCommander = 2 then
38626: LD_EXP 12
38630: PUSH
38631: LD_INT 2
38633: EQUAL
38634: IFFALSE 38691
// if IsOk ( Brown ) then
38636: LD_EXP 2
38640: PPUSH
38641: CALL_OW 302
38645: IFFALSE 38661
// Say ( Brown , D3b-Brown-1 ) else
38647: LD_EXP 2
38651: PPUSH
38652: LD_STRING D3b-Brown-1
38654: PPUSH
38655: CALL_OW 88
38659: GO 38691
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38661: LD_EXP 11
38665: PPUSH
38666: LD_INT 26
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PPUSH
38676: CALL_OW 72
38680: PPUSH
38681: LD_STRING D3b-Sol1-1
38683: PPUSH
38684: LD_STRING D3b-Sol1-1
38686: PPUSH
38687: CALL 7200 0 3
// if gammaCommander = 3 then
38691: LD_EXP 12
38695: PUSH
38696: LD_INT 3
38698: EQUAL
38699: IFFALSE 38756
// if IsOk ( Houten ) then
38701: LD_EXP 13
38705: PPUSH
38706: CALL_OW 302
38710: IFFALSE 38726
// Say ( Houten , D3b-VanH-1 ) else
38712: LD_EXP 13
38716: PPUSH
38717: LD_STRING D3b-VanH-1
38719: PPUSH
38720: CALL_OW 88
38724: GO 38756
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38726: LD_EXP 11
38730: PPUSH
38731: LD_INT 26
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PPUSH
38741: CALL_OW 72
38745: PPUSH
38746: LD_STRING D3b-Sol1-1
38748: PPUSH
38749: LD_STRING D3b-Sol1-1
38751: PPUSH
38752: CALL 7200 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38756: LD_EXP 11
38760: PPUSH
38761: LD_INT 26
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PPUSH
38771: CALL_OW 72
38775: PUSH
38776: LD_EXP 12
38780: PUSH
38781: LD_INT 1
38783: EQUAL
38784: PUSH
38785: LD_EXP 3
38789: PPUSH
38790: CALL_OW 302
38794: AND
38795: OR
38796: PUSH
38797: LD_EXP 12
38801: PUSH
38802: LD_INT 2
38804: EQUAL
38805: PUSH
38806: LD_EXP 2
38810: PPUSH
38811: CALL_OW 302
38815: AND
38816: OR
38817: PUSH
38818: LD_EXP 12
38822: PUSH
38823: LD_INT 3
38825: EQUAL
38826: PUSH
38827: LD_EXP 13
38831: PPUSH
38832: CALL_OW 302
38836: AND
38837: OR
38838: IFFALSE 38852
// Say ( JMM , D3b-JMM-2 ) ;
38840: LD_EXP 1
38844: PPUSH
38845: LD_STRING D3b-JMM-2
38847: PPUSH
38848: CALL_OW 88
// if IsOK ( Lisa ) then
38852: LD_EXP 6
38856: PPUSH
38857: CALL_OW 302
38861: IFFALSE 38875
// Say ( Lisa , D3b-Lisa-2 ) ;
38863: LD_EXP 6
38867: PPUSH
38868: LD_STRING D3b-Lisa-2
38870: PPUSH
38871: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
38875: LD_ADDR_VAR 0 1
38879: PUSH
38880: LD_EXP 1
38884: PUSH
38885: LD_EXP 2
38889: PUSH
38890: LD_EXP 3
38894: PUSH
38895: LD_EXP 4
38899: PUSH
38900: LD_EXP 5
38904: PUSH
38905: LD_EXP 6
38909: PUSH
38910: LD_EXP 7
38914: PUSH
38915: LD_EXP 8
38919: PUSH
38920: LD_EXP 9
38924: PUSH
38925: LD_EXP 10
38929: PUSH
38930: LD_EXP 15
38934: PUSH
38935: LD_EXP 14
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: PUSH
38954: LD_EXP 42
38958: ADD
38959: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38960: LD_INT 22
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 21
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 26
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 25
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 25
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 25
39015: PUSH
39016: LD_INT 3
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 25
39025: PUSH
39026: LD_INT 4
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: PPUSH
39046: CALL_OW 69
39050: PUSH
39051: LD_VAR 0 1
39055: DIFF
39056: PPUSH
39057: LD_STRING DCa-Sol1-1
39059: PPUSH
39060: LD_STRING DCa-Sol1-1
39062: PPUSH
39063: CALL 7200 0 3
// Say ( JMM , DCb-JMM-1 ) ;
39067: LD_EXP 1
39071: PPUSH
39072: LD_STRING DCb-JMM-1
39074: PPUSH
39075: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
39079: LD_INT 22
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 21
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 26
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 25
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 25
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 25
39134: PUSH
39135: LD_INT 3
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 25
39144: PUSH
39145: LD_INT 4
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: PPUSH
39165: CALL_OW 69
39169: PUSH
39170: LD_VAR 0 1
39174: DIFF
39175: PPUSH
39176: LD_STRING DCb-Sol1-1
39178: PPUSH
39179: LD_STRING DCb-Sol1-1
39181: PPUSH
39182: CALL 7200 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39186: LD_EXP 1
39190: PPUSH
39191: LD_STRING DCb-JMM-2
39193: PPUSH
39194: CALL_OW 88
// secondAttack = 1 ;
39198: LD_ADDR_EXP 34
39202: PUSH
39203: LD_INT 1
39205: ST_TO_ADDR
// end ;
39206: PPOPN 1
39208: END
// every 0 0$01 trigger JMMArrive = 1 do
39209: LD_EXP 39
39213: PUSH
39214: LD_INT 1
39216: EQUAL
39217: IFFALSE 39297
39219: GO 39221
39221: DISABLE
// begin wait ( 3 3$0 ) ;
39222: LD_INT 6300
39224: PPUSH
39225: CALL_OW 67
// DialogueOn ;
39229: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39233: LD_EXP 23
39237: PPUSH
39238: LD_STRING D4-Pow-1
39240: PPUSH
39241: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39245: LD_EXP 1
39249: PPUSH
39250: LD_STRING D4-JMM-1
39252: PPUSH
39253: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39257: LD_EXP 23
39261: PPUSH
39262: LD_STRING D4-Pow-2
39264: PPUSH
39265: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39269: LD_EXP 1
39273: PPUSH
39274: LD_STRING D4-JMM-2
39276: PPUSH
39277: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39281: LD_EXP 23
39285: PPUSH
39286: LD_STRING D4-Pow-3
39288: PPUSH
39289: CALL_OW 94
// DialogueOff ;
39293: CALL_OW 7
// end ;
39297: END
// every 0 0$01 trigger JMMArrive = 1 do
39298: LD_EXP 39
39302: PUSH
39303: LD_INT 1
39305: EQUAL
39306: IFFALSE 39338
39308: GO 39310
39310: DISABLE
// begin wait ( 8 8$0 ) ;
39311: LD_INT 16800
39313: PPUSH
39314: CALL_OW 67
// DialogueOn ;
39318: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39322: LD_EXP 23
39326: PPUSH
39327: LD_STRING D4a-Pow-1
39329: PPUSH
39330: CALL_OW 94
// DialogueOff ;
39334: CALL_OW 7
// end ;
39338: END
// every 0 0$01 trigger JMMArrive = 1 do
39339: LD_EXP 39
39343: PUSH
39344: LD_INT 1
39346: EQUAL
39347: IFFALSE 39392
39349: GO 39351
39351: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39352: LD_INT 21000
39354: PUSH
39355: LD_INT 25200
39357: PUSH
39358: LD_INT 31500
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: PUSH
39366: LD_OWVAR 67
39370: ARRAY
39371: PPUSH
39372: CALL_OW 67
// PrepareSikorsky ;
39376: CALL 5643 0 0
// SikorskyArrive = 1 ;
39380: LD_ADDR_EXP 18
39384: PUSH
39385: LD_INT 1
39387: ST_TO_ADDR
// PrepareSikorskyArmy ;
39388: CALL 5816 0 0
// end ;
39392: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39393: LD_EXP 17
39397: PPUSH
39398: LD_INT 5
39400: PPUSH
39401: CALL_OW 308
39405: IFFALSE 39597
39407: GO 39409
39409: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39410: LD_EXP 17
39414: PPUSH
39415: CALL_OW 87
// DialogueOn ;
39419: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39423: LD_EXP 16
39427: PPUSH
39428: LD_STRING D5-Sik-1
39430: PPUSH
39431: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39435: LD_EXP 1
39439: PPUSH
39440: LD_STRING D5-JMM-1a
39442: PPUSH
39443: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39447: LD_EXP 16
39451: PPUSH
39452: LD_STRING D5-Sik-2
39454: PPUSH
39455: CALL_OW 88
// case query ( QSikorski ) of 1 :
39459: LD_STRING QSikorski
39461: PPUSH
39462: CALL_OW 97
39466: PUSH
39467: LD_INT 1
39469: DOUBLE
39470: EQUAL
39471: IFTRUE 39475
39473: GO 39498
39475: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39476: LD_EXP 16
39480: PPUSH
39481: LD_STRING D5a-Sik-1
39483: PPUSH
39484: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39488: LD_ADDR_EXP 19
39492: PUSH
39493: LD_INT 2100
39495: ST_TO_ADDR
// end ; 2 :
39496: GO 39585
39498: LD_INT 2
39500: DOUBLE
39501: EQUAL
39502: IFTRUE 39506
39504: GO 39529
39506: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39507: LD_EXP 16
39511: PPUSH
39512: LD_STRING D5b-Sik-1
39514: PPUSH
39515: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39519: LD_ADDR_EXP 19
39523: PUSH
39524: LD_INT 10500
39526: ST_TO_ADDR
// end ; 3 :
39527: GO 39585
39529: LD_INT 3
39531: DOUBLE
39532: EQUAL
39533: IFTRUE 39537
39535: GO 39584
39537: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39538: LD_EXP 16
39542: PPUSH
39543: LD_STRING D5c-Sik-1
39545: PPUSH
39546: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39550: LD_EXP 1
39554: PPUSH
39555: LD_STRING D5c-JMM-1
39557: PPUSH
39558: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39562: LD_EXP 16
39566: PPUSH
39567: LD_STRING D5c-Sik-2
39569: PPUSH
39570: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39574: LD_ADDR_EXP 19
39578: PUSH
39579: LD_INT 10500
39581: ST_TO_ADDR
// end ; end ;
39582: GO 39585
39584: POP
// DialogueOff ;
39585: CALL_OW 7
// timerStatus = 1 ;
39589: LD_ADDR_EXP 35
39593: PUSH
39594: LD_INT 1
39596: ST_TO_ADDR
// end ;
39597: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39598: LD_EXP 19
39602: PUSH
39603: LD_INT 35
39605: LESS
39606: IFFALSE 39654
39608: GO 39610
39610: DISABLE
// begin timerStatus = 0 ;
39611: LD_ADDR_EXP 35
39615: PUSH
39616: LD_INT 0
39618: ST_TO_ADDR
// DialogueOn ;
39619: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39623: LD_EXP 16
39627: PPUSH
39628: LD_STRING D6-Sik-1
39630: PPUSH
39631: CALL_OW 88
// DialogueOff ;
39635: CALL_OW 7
// SikorskyAI = 1 ;
39639: LD_ADDR_EXP 20
39643: PUSH
39644: LD_INT 1
39646: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39647: LD_STRING M2
39649: PPUSH
39650: CALL_OW 337
// end ;
39654: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39655: LD_EXP 17
39659: PPUSH
39660: LD_INT 18
39662: PPUSH
39663: CALL_OW 308
39667: IFFALSE 39777
39669: GO 39671
39671: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39672: LD_EXP 16
39676: PPUSH
39677: LD_STRING D7-Sik-1
39679: PPUSH
39680: CALL_OW 88
// wait ( 0 0$10 ) ;
39684: LD_INT 350
39686: PPUSH
39687: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
39691: LD_EXP 1
39695: PPUSH
39696: LD_INT 24
39698: PPUSH
39699: CALL_OW 308
39703: PUSH
39704: LD_EXP 1
39708: PPUSH
39709: CALL 37134 0 1
39713: PUSH
39714: LD_EXP 1
39718: PPUSH
39719: CALL 37134 0 1
39723: PPUSH
39724: LD_INT 24
39726: PPUSH
39727: CALL_OW 308
39731: AND
39732: OR
39733: IFFALSE 39757
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39735: LD_EXP 16
39739: PPUSH
39740: LD_STRING D7a-Sik-1
39742: PPUSH
39743: CALL_OW 88
// SikorskyStatus = 1 ;
39747: LD_ADDR_EXP 21
39751: PUSH
39752: LD_INT 1
39754: ST_TO_ADDR
// end else
39755: GO 39777
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39757: LD_EXP 16
39761: PPUSH
39762: LD_STRING D7b-Sik-1
39764: PPUSH
39765: CALL_OW 88
// SikorskyStatus = 2 ;
39769: LD_ADDR_EXP 21
39773: PUSH
39774: LD_INT 2
39776: ST_TO_ADDR
// end ; end ;
39777: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39778: LD_EXP 36
39782: PUSH
39783: LD_INT 1
39785: EQUAL
39786: IFFALSE 39895
39788: GO 39790
39790: DISABLE
39791: LD_INT 0
39793: PPUSH
// begin enable ;
39794: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39795: LD_ADDR_VAR 0 1
39799: PUSH
39800: LD_INT 22
39802: PUSH
39803: LD_INT 3
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PPUSH
39810: CALL_OW 69
39814: PUSH
39815: FOR_IN
39816: IFFALSE 39843
// if IsInArea ( i , RussianEscape ) then
39818: LD_VAR 0 1
39822: PPUSH
39823: LD_INT 22
39825: PPUSH
39826: CALL_OW 308
39830: IFFALSE 39841
// RemoveUnit ( i ) ;
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL_OW 64
39841: GO 39815
39843: POP
39844: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39845: LD_ADDR_VAR 0 1
39849: PUSH
39850: LD_INT 22
39852: PUSH
39853: LD_INT 6
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PPUSH
39860: CALL_OW 69
39864: PUSH
39865: FOR_IN
39866: IFFALSE 39893
// if IsInArea ( i , RussianEscape ) then
39868: LD_VAR 0 1
39872: PPUSH
39873: LD_INT 22
39875: PPUSH
39876: CALL_OW 308
39880: IFFALSE 39891
// RemoveUnit ( i ) ;
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 64
39891: GO 39865
39893: POP
39894: POP
// end ; end_of_file
39895: PPOPN 1
39897: END
// on BuildingComplete ( building ) do var tmp , un ;
39898: LD_INT 0
39900: PPUSH
39901: PPUSH
// begin if GetSide ( building ) = 3 then
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 255
39911: PUSH
39912: LD_INT 3
39914: EQUAL
39915: IFFALSE 40452
// begin if GetBType ( building ) = b_depot then
39917: LD_VAR 0 1
39921: PPUSH
39922: CALL_OW 266
39926: PUSH
39927: LD_INT 0
39929: EQUAL
39930: IFFALSE 39998
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 274
39941: PPUSH
39942: LD_INT 1
39944: PPUSH
39945: LD_INT 5000
39947: PPUSH
39948: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39952: LD_VAR 0 1
39956: PPUSH
39957: CALL_OW 274
39961: PPUSH
39962: LD_INT 2
39964: PPUSH
39965: LD_INT 5000
39967: PPUSH
39968: CALL_OW 277
// SetBName ( building , konev ) ;
39972: LD_VAR 0 1
39976: PPUSH
39977: LD_STRING konev
39979: PPUSH
39980: CALL_OW 500
// ruDepot = building ;
39984: LD_ADDR_EXP 28
39988: PUSH
39989: LD_VAR 0 1
39993: ST_TO_ADDR
// BuildRussianBase ;
39994: CALL 7811 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 266
40007: PUSH
40008: LD_INT 0
40010: EQUAL
40011: PUSH
40012: LD_VAR 0 1
40016: PPUSH
40017: CALL_OW 266
40021: PUSH
40022: LD_INT 2
40024: EQUAL
40025: OR
40026: PUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 266
40036: PUSH
40037: LD_INT 4
40039: EQUAL
40040: OR
40041: IFFALSE 40052
// ComUpgrade ( building ) ;
40043: LD_VAR 0 1
40047: PPUSH
40048: CALL_OW 146
// if GetBType ( building ) = b_lab then
40052: LD_VAR 0 1
40056: PPUSH
40057: CALL_OW 266
40061: PUSH
40062: LD_INT 6
40064: EQUAL
40065: IFFALSE 40116
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
40067: LD_VAR 0 1
40071: PPUSH
40072: LD_INT 10
40074: PPUSH
40075: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
40079: LD_VAR 0 1
40083: PPUSH
40084: LD_INT 12
40086: PPUSH
40087: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
40091: LD_INT 3
40093: PPUSH
40094: LD_VAR 0 1
40098: PPUSH
40099: LD_INT 3
40101: PPUSH
40102: CALL 8355 0 3
// ruLab = building ;
40106: LD_ADDR_EXP 29
40110: PUSH
40111: LD_VAR 0 1
40115: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
40116: LD_VAR 0 1
40120: PPUSH
40121: CALL_OW 266
40125: PUSH
40126: LD_INT 32
40128: EQUAL
40129: IFFALSE 40247
// begin uc_side = 3 ;
40131: LD_ADDR_OWVAR 20
40135: PUSH
40136: LD_INT 3
40138: ST_TO_ADDR
// uc_nation = 3 ;
40139: LD_ADDR_OWVAR 21
40143: PUSH
40144: LD_INT 3
40146: ST_TO_ADDR
// hc_gallery =  ;
40147: LD_ADDR_OWVAR 33
40151: PUSH
40152: LD_STRING 
40154: ST_TO_ADDR
// hc_name =  ;
40155: LD_ADDR_OWVAR 26
40159: PUSH
40160: LD_STRING 
40162: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40163: LD_INT 0
40165: PPUSH
40166: LD_INT 1
40168: PPUSH
40169: LD_EXP 25
40173: PPUSH
40174: LD_EXP 26
40178: PPUSH
40179: CALL_OW 12
40183: PPUSH
40184: CALL_OW 380
// un = CreateHuman ;
40188: LD_ADDR_VAR 0 3
40192: PUSH
40193: CALL_OW 44
40197: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40198: LD_VAR 0 3
40202: PPUSH
40203: LD_VAR 0 1
40207: PPUSH
40208: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40212: LD_VAR 0 1
40216: PPUSH
40217: LD_INT 43
40219: PUSH
40220: LD_INT 44
40222: PUSH
40223: LD_INT 46
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PPUSH
40234: LD_INT 3
40236: PPUSH
40237: CALL_OW 12
40241: ARRAY
40242: PPUSH
40243: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 266
40256: PUSH
40257: LD_INT 33
40259: EQUAL
40260: IFFALSE 40297
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40262: LD_VAR 0 1
40266: PPUSH
40267: LD_INT 43
40269: PUSH
40270: LD_INT 44
40272: PUSH
40273: LD_INT 46
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PPUSH
40284: LD_INT 3
40286: PPUSH
40287: CALL_OW 12
40291: ARRAY
40292: PPUSH
40293: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40297: LD_VAR 0 1
40301: PPUSH
40302: CALL_OW 266
40306: PUSH
40307: LD_INT 32
40309: EQUAL
40310: IFFALSE 40347
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40312: LD_VAR 0 1
40316: PPUSH
40317: LD_INT 43
40319: PUSH
40320: LD_INT 44
40322: PUSH
40323: LD_INT 46
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PPUSH
40334: LD_INT 3
40336: PPUSH
40337: CALL_OW 12
40341: ARRAY
40342: PPUSH
40343: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40347: LD_VAR 0 1
40351: PPUSH
40352: CALL_OW 266
40356: PUSH
40357: LD_INT 24
40359: EQUAL
40360: IFFALSE 40370
// russianAI = 1 ;
40362: LD_ADDR_EXP 27
40366: PUSH
40367: LD_INT 1
40369: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40370: LD_EXP 31
40374: PUSH
40375: LD_INT 0
40377: GREATER
40378: IFFALSE 40452
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40380: LD_ADDR_EXP 31
40384: PUSH
40385: LD_EXP 31
40389: PPUSH
40390: LD_INT 1
40392: PPUSH
40393: CALL_OW 3
40397: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40398: LD_ADDR_EXP 31
40402: PUSH
40403: LD_EXP 31
40407: PPUSH
40408: LD_INT 1
40410: PPUSH
40411: CALL_OW 3
40415: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40416: LD_ADDR_EXP 31
40420: PUSH
40421: LD_EXP 31
40425: PPUSH
40426: LD_INT 1
40428: PPUSH
40429: CALL_OW 3
40433: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40434: LD_ADDR_EXP 31
40438: PUSH
40439: LD_EXP 31
40443: PPUSH
40444: LD_INT 1
40446: PPUSH
40447: CALL_OW 3
40451: ST_TO_ADDR
// end ; end ; end ;
40452: PPOPN 3
40454: END
// on UpgradeComplete ( building ) do var i ;
40455: LD_INT 0
40457: PPUSH
// begin if GetSide ( building ) = 3 then
40458: LD_VAR 0 1
40462: PPUSH
40463: CALL_OW 255
40467: PUSH
40468: LD_INT 3
40470: EQUAL
40471: IFFALSE 40652
// begin if GetBType ( building ) = b_factory then
40473: LD_VAR 0 1
40477: PPUSH
40478: CALL_OW 266
40482: PUSH
40483: LD_INT 3
40485: EQUAL
40486: IFFALSE 40553
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40488: LD_ADDR_VAR 0 2
40492: PUSH
40493: LD_INT 22
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 25
40505: PUSH
40506: LD_INT 3
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PPUSH
40517: CALL_OW 69
40521: PUSH
40522: FOR_IN
40523: IFFALSE 40541
// ComEnterUnit ( i , building ) ;
40525: LD_VAR 0 2
40529: PPUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 120
40539: GO 40522
40541: POP
40542: POP
// ruFab = building ;
40543: LD_ADDR_EXP 30
40547: PUSH
40548: LD_VAR 0 1
40552: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40553: LD_VAR 0 1
40557: PPUSH
40558: CALL_OW 266
40562: PUSH
40563: LD_INT 8
40565: EQUAL
40566: IFFALSE 40623
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40568: LD_ADDR_VAR 0 2
40572: PUSH
40573: LD_INT 22
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 25
40585: PUSH
40586: LD_INT 4
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PPUSH
40597: CALL_OW 69
40601: PUSH
40602: FOR_IN
40603: IFFALSE 40621
// ComEnterUnit ( i , building ) ;
40605: LD_VAR 0 2
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 120
40619: GO 40602
40621: POP
40622: POP
// if GetBType ( building ) = b_warehouse then
40623: LD_VAR 0 1
40627: PPUSH
40628: CALL_OW 266
40632: PUSH
40633: LD_INT 1
40635: EQUAL
40636: IFFALSE 40652
// begin ComEnterUnit ( Borodin , building ) ;
40638: LD_EXP 24
40642: PPUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 120
// end ; end ; end ;
40652: PPOPN 2
40654: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40655: LD_VAR 0 1
40659: PPUSH
40660: CALL_OW 247
40664: PUSH
40665: LD_INT 2
40667: EQUAL
40668: PUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 263
40678: PUSH
40679: LD_INT 3
40681: EQUAL
40682: AND
40683: PUSH
40684: LD_EXP 41
40688: PUSH
40689: LD_INT 0
40691: EQUAL
40692: AND
40693: IFFALSE 40811
// begin varEvent1 = 1 ;
40695: LD_ADDR_EXP 41
40699: PUSH
40700: LD_INT 1
40702: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40712: LD_INT 22
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 21
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: LD_INT 25
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 25
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 25
40757: PUSH
40758: LD_INT 3
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 25
40767: PUSH
40768: LD_INT 4
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: PPUSH
40787: CALL_OW 69
40791: PUSH
40792: LD_EXP 1
40796: PUSH
40797: EMPTY
40798: LIST
40799: DIFF
40800: PPUSH
40801: LD_STRING DC-Sol1-1
40803: PPUSH
40804: LD_STRING DC-FSol1-1
40806: PPUSH
40807: CALL 7200 0 3
// end ; end ;
40811: PPOPN 1
40813: END
// on UnitDestroyed ( unit ) do var i ;
40814: LD_INT 0
40816: PPUSH
// begin if unit = Joan then
40817: LD_VAR 0 1
40821: PUSH
40822: LD_EXP 15
40826: EQUAL
40827: IFFALSE 40836
// DeleteCharacters ( Joan ) ;
40829: LD_STRING Joan
40831: PPUSH
40832: CALL_OW 40
// if GetSide ( unit ) = 3 then
40836: LD_VAR 0 1
40840: PPUSH
40841: CALL_OW 255
40845: PUSH
40846: LD_INT 3
40848: EQUAL
40849: IFFALSE 41619
// begin if GetType ( unit ) = unit_building then
40851: LD_VAR 0 1
40855: PPUSH
40856: CALL_OW 247
40860: PUSH
40861: LD_INT 3
40863: EQUAL
40864: IFFALSE 41556
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40866: LD_VAR 0 1
40870: PPUSH
40871: CALL_OW 266
40875: PUSH
40876: LD_INT 31
40878: EQUAL
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 266
40889: PUSH
40890: LD_INT 32
40892: EQUAL
40893: OR
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: CALL_OW 266
40904: PUSH
40905: LD_INT 36
40907: EQUAL
40908: OR
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 266
40919: PUSH
40920: LD_INT 0
40922: EQUAL
40923: OR
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 266
40934: PUSH
40935: LD_INT 24
40937: EQUAL
40938: OR
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 266
40949: PUSH
40950: LD_INT 17
40952: EQUAL
40953: OR
40954: PUSH
40955: LD_VAR 0 1
40959: PPUSH
40960: CALL_OW 266
40964: PUSH
40965: LD_INT 25
40967: EQUAL
40968: OR
40969: PUSH
40970: LD_VAR 0 1
40974: PPUSH
40975: CALL_OW 266
40979: PUSH
40980: LD_INT 19
40982: EQUAL
40983: OR
40984: PUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 266
40994: PUSH
40995: LD_INT 20
40997: EQUAL
40998: OR
40999: PUSH
41000: LD_VAR 0 1
41004: PPUSH
41005: CALL_OW 266
41009: PUSH
41010: LD_INT 18
41012: EQUAL
41013: OR
41014: PUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 266
41024: PUSH
41025: LD_INT 21
41027: EQUAL
41028: OR
41029: PUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 266
41039: PUSH
41040: LD_INT 23
41042: EQUAL
41043: OR
41044: PUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: CALL_OW 266
41054: PUSH
41055: LD_INT 16
41057: EQUAL
41058: OR
41059: PUSH
41060: LD_VAR 0 1
41064: PPUSH
41065: CALL_OW 266
41069: PUSH
41070: LD_INT 6
41072: EQUAL
41073: OR
41074: PUSH
41075: LD_VAR 0 1
41079: PPUSH
41080: CALL_OW 266
41084: PUSH
41085: LD_INT 29
41087: EQUAL
41088: OR
41089: PUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: CALL_OW 266
41099: PUSH
41100: LD_INT 26
41102: EQUAL
41103: OR
41104: PUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: CALL_OW 266
41114: PUSH
41115: LD_INT 30
41117: EQUAL
41118: OR
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 266
41129: PUSH
41130: LD_INT 28
41132: EQUAL
41133: OR
41134: PUSH
41135: LD_VAR 0 1
41139: PPUSH
41140: CALL_OW 266
41144: PUSH
41145: LD_INT 27
41147: EQUAL
41148: OR
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 266
41159: PUSH
41160: LD_INT 33
41162: EQUAL
41163: OR
41164: PUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: CALL_OW 266
41174: PUSH
41175: LD_INT 2
41177: EQUAL
41178: OR
41179: PUSH
41180: LD_VAR 0 1
41184: PPUSH
41185: CALL_OW 266
41189: PUSH
41190: LD_INT 4
41192: EQUAL
41193: OR
41194: IFFALSE 41280
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
41196: LD_ADDR_EXP 31
41200: PUSH
41201: LD_EXP 31
41205: PUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: CALL_OW 266
41215: ADD
41216: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41217: LD_ADDR_EXP 31
41221: PUSH
41222: LD_EXP 31
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 250
41236: ADD
41237: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41238: LD_ADDR_EXP 31
41242: PUSH
41243: LD_EXP 31
41247: PUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 251
41257: ADD
41258: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41259: LD_ADDR_EXP 31
41263: PUSH
41264: LD_EXP 31
41268: PUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 254
41278: ADD
41279: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41280: LD_VAR 0 1
41284: PPUSH
41285: CALL_OW 266
41289: PUSH
41290: LD_INT 1
41292: EQUAL
41293: IFFALSE 41372
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41295: LD_ADDR_EXP 31
41299: PUSH
41300: LD_EXP 31
41304: PUSH
41305: LD_INT 0
41307: ADD
41308: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41309: LD_ADDR_EXP 31
41313: PUSH
41314: LD_EXP 31
41318: PUSH
41319: LD_VAR 0 1
41323: PPUSH
41324: CALL_OW 250
41328: ADD
41329: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41330: LD_ADDR_EXP 31
41334: PUSH
41335: LD_EXP 31
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 251
41349: ADD
41350: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41351: LD_ADDR_EXP 31
41355: PUSH
41356: LD_EXP 31
41360: PUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL_OW 254
41370: ADD
41371: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41372: LD_VAR 0 1
41376: PPUSH
41377: CALL_OW 266
41381: PUSH
41382: LD_INT 3
41384: EQUAL
41385: IFFALSE 41464
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41387: LD_ADDR_EXP 31
41391: PUSH
41392: LD_EXP 31
41396: PUSH
41397: LD_INT 2
41399: ADD
41400: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41401: LD_ADDR_EXP 31
41405: PUSH
41406: LD_EXP 31
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 250
41420: ADD
41421: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41422: LD_ADDR_EXP 31
41426: PUSH
41427: LD_EXP 31
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 251
41441: ADD
41442: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41443: LD_ADDR_EXP 31
41447: PUSH
41448: LD_EXP 31
41452: PUSH
41453: LD_VAR 0 1
41457: PPUSH
41458: CALL_OW 254
41462: ADD
41463: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41464: LD_VAR 0 1
41468: PPUSH
41469: CALL_OW 266
41473: PUSH
41474: LD_INT 5
41476: EQUAL
41477: IFFALSE 41556
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41479: LD_ADDR_EXP 31
41483: PUSH
41484: LD_EXP 31
41488: PUSH
41489: LD_INT 4
41491: ADD
41492: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41493: LD_ADDR_EXP 31
41497: PUSH
41498: LD_EXP 31
41502: PUSH
41503: LD_VAR 0 1
41507: PPUSH
41508: CALL_OW 250
41512: ADD
41513: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41514: LD_ADDR_EXP 31
41518: PUSH
41519: LD_EXP 31
41523: PUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 251
41533: ADD
41534: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41535: LD_ADDR_EXP 31
41539: PUSH
41540: LD_EXP 31
41544: PUSH
41545: LD_VAR 0 1
41549: PPUSH
41550: CALL_OW 254
41554: ADD
41555: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41556: LD_VAR 0 1
41560: PPUSH
41561: CALL_OW 247
41565: PUSH
41566: LD_INT 1
41568: EQUAL
41569: IFFALSE 41619
// begin for i in defenders_list do
41571: LD_ADDR_VAR 0 2
41575: PUSH
41576: LD_EXP 32
41580: PUSH
41581: FOR_IN
41582: IFFALSE 41617
// if i = unit then
41584: LD_VAR 0 2
41588: PUSH
41589: LD_VAR 0 1
41593: EQUAL
41594: IFFALSE 41615
// defenders_list = defenders_list diff [ unit ] ;
41596: LD_ADDR_EXP 32
41600: PUSH
41601: LD_EXP 32
41605: PUSH
41606: LD_VAR 0 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: DIFF
41614: ST_TO_ADDR
41615: GO 41581
41617: POP
41618: POP
// end ; end ; end ;
41619: PPOPN 2
41621: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
41622: LD_VAR 0 1
41626: PPUSH
41627: CALL 46411 0 1
// end ; end_of_file
41631: PPOPN 1
41633: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41634: GO 41636
41636: DISABLE
41637: LD_INT 0
41639: PPUSH
// begin enemyWayX = [ ] ;
41640: LD_ADDR_EXP 46
41644: PUSH
41645: EMPTY
41646: ST_TO_ADDR
// enemyWayY = [ ] ;
41647: LD_ADDR_EXP 47
41651: PUSH
41652: EMPTY
41653: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41654: LD_ADDR_VAR 0 1
41658: PUSH
41659: LD_INT 1
41661: PPUSH
41662: LD_INT 3
41664: PPUSH
41665: CALL_OW 12
41669: ST_TO_ADDR
// if rnd = 1 then
41670: LD_VAR 0 1
41674: PUSH
41675: LD_INT 1
41677: EQUAL
41678: IFFALSE 41718
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41680: LD_ADDR_EXP 46
41684: PUSH
41685: LD_INT 73
41687: PUSH
41688: LD_INT 46
41690: PUSH
41691: LD_INT 29
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: LIST
41698: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41699: LD_ADDR_EXP 47
41703: PUSH
41704: LD_INT 71
41706: PUSH
41707: LD_INT 43
41709: PUSH
41710: LD_INT 29
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
// end ; if rnd = 2 then
41718: LD_VAR 0 1
41722: PUSH
41723: LD_INT 2
41725: EQUAL
41726: IFFALSE 41750
// begin enemyWayX = [ 64 ] ;
41728: LD_ADDR_EXP 46
41732: PUSH
41733: LD_INT 64
41735: PUSH
41736: EMPTY
41737: LIST
41738: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41739: LD_ADDR_EXP 47
41743: PUSH
41744: LD_INT 43
41746: PUSH
41747: EMPTY
41748: LIST
41749: ST_TO_ADDR
// end ; if rnd = 3 then
41750: LD_VAR 0 1
41754: PUSH
41755: LD_INT 3
41757: EQUAL
41758: IFFALSE 41782
// begin enemyWayX = [ 80 ] ;
41760: LD_ADDR_EXP 46
41764: PUSH
41765: LD_INT 80
41767: PUSH
41768: EMPTY
41769: LIST
41770: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41771: LD_ADDR_EXP 47
41775: PUSH
41776: LD_INT 28
41778: PUSH
41779: EMPTY
41780: LIST
41781: ST_TO_ADDR
// end ; enable ;
41782: ENABLE
// end ;
41783: PPOPN 1
41785: END
// every 0 0$1 do
41786: GO 41788
41788: DISABLE
// begin enable ;
41789: ENABLE
// if escapeAvalaible = 0 then
41790: LD_EXP 36
41794: PUSH
41795: LD_INT 0
41797: EQUAL
41798: IFFALSE 41810
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41800: LD_INT 3
41802: PPUSH
41803: LD_INT 6
41805: PPUSH
41806: CALL 8596 0 2
// if escapeAvalaible = 0 then
41810: LD_EXP 36
41814: PUSH
41815: LD_INT 0
41817: EQUAL
41818: IFFALSE 41830
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41820: LD_INT 1
41822: PPUSH
41823: LD_INT 24
41825: PPUSH
41826: CALL 9256 0 2
// if russianAI = 1 then
41830: LD_EXP 27
41834: PUSH
41835: LD_INT 1
41837: EQUAL
41838: IFFALSE 41908
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41840: LD_INT 3
41842: PPUSH
41843: LD_INT 7
41845: PPUSH
41846: LD_INT 6
41848: PPUSH
41849: LD_EXP 29
41853: PPUSH
41854: CALL 11694 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41858: LD_INT 3
41860: PPUSH
41861: LD_EXP 28
41865: PPUSH
41866: LD_INT 6
41868: PPUSH
41869: LD_EXP 31
41873: PPUSH
41874: CALL 11288 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41878: LD_INT 3
41880: PPUSH
41881: LD_INT 26
41883: PPUSH
41884: LD_EXP 46
41888: PPUSH
41889: LD_EXP 47
41893: PPUSH
41894: CALL 10156 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41898: LD_INT 3
41900: PPUSH
41901: LD_INT 1
41903: PPUSH
41904: CALL 12238 0 2
// end ; if SikorskyArrive = 1 then
41908: LD_EXP 18
41912: PUSH
41913: LD_INT 1
41915: EQUAL
41916: IFFALSE 41934
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41918: LD_INT 3
41920: PPUSH
41921: LD_INT 10
41923: PPUSH
41924: LD_INT 53
41926: PPUSH
41927: LD_INT 59
41929: PPUSH
41930: CALL 9953 0 4
// end ;
41934: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41935: LD_EXP 27
41939: PUSH
41940: LD_INT 1
41942: EQUAL
41943: IFFALSE 42219
41945: GO 41947
41947: DISABLE
41948: LD_INT 0
41950: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41951: LD_ADDR_VAR 0 1
41955: PUSH
41956: LD_INT 22
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 21
41968: PUSH
41969: LD_INT 3
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 30
41978: PUSH
41979: LD_INT 32
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: LD_INT 35
41994: PUSH
41995: LD_INT 43
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 35
42004: PUSH
42005: LD_INT 44
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 35
42014: PUSH
42015: LD_INT 46
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: PPUSH
42038: CALL_OW 69
42042: PUSH
42043: FOR_IN
42044: IFFALSE 42083
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42046: LD_VAR 0 1
42050: PPUSH
42051: LD_INT 43
42053: PUSH
42054: LD_INT 44
42056: PUSH
42057: LD_INT 46
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PPUSH
42068: LD_INT 3
42070: PPUSH
42071: CALL_OW 12
42075: ARRAY
42076: PPUSH
42077: CALL_OW 431
42081: GO 42043
42083: POP
42084: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
42085: LD_ADDR_VAR 0 1
42089: PUSH
42090: LD_INT 22
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 21
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 30
42112: PUSH
42113: LD_INT 33
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 3
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: LD_INT 35
42128: PUSH
42129: LD_INT 43
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 35
42138: PUSH
42139: LD_INT 44
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 35
42148: PUSH
42149: LD_INT 46
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: PPUSH
42172: CALL_OW 69
42176: PUSH
42177: FOR_IN
42178: IFFALSE 42217
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42180: LD_VAR 0 1
42184: PPUSH
42185: LD_INT 43
42187: PUSH
42188: LD_INT 44
42190: PUSH
42191: LD_INT 46
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PPUSH
42202: LD_INT 3
42204: PPUSH
42205: CALL_OW 12
42209: ARRAY
42210: PPUSH
42211: CALL_OW 431
42215: GO 42177
42217: POP
42218: POP
// end ;
42219: PPOPN 1
42221: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
42222: LD_EXP 24
42226: PPUSH
42227: CALL_OW 310
42231: NOT
42232: PUSH
42233: LD_EXP 28
42237: PPUSH
42238: CALL_OW 302
42242: AND
42243: PUSH
42244: LD_EXP 28
42248: PPUSH
42249: CALL_OW 255
42253: PUSH
42254: LD_INT 3
42256: EQUAL
42257: AND
42258: IFFALSE 42278
42260: GO 42262
42262: DISABLE
// begin enable ;
42263: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42264: LD_EXP 24
42268: PPUSH
42269: LD_EXP 28
42273: PPUSH
42274: CALL_OW 120
// end ;
42278: END
// every 0 0$1 trigger SikorskyAI = 1 do
42279: LD_EXP 20
42283: PUSH
42284: LD_INT 1
42286: EQUAL
42287: IFFALSE 42322
42289: GO 42291
42291: DISABLE
// begin enable ;
42292: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42293: LD_INT 4
42295: PPUSH
42296: LD_INT 10
42298: PPUSH
42299: LD_INT 93
42301: PPUSH
42302: LD_INT 93
42304: PPUSH
42305: CALL 9953 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42309: LD_INT 4
42311: PPUSH
42312: LD_INT 11
42314: PPUSH
42315: LD_INT 3
42317: PPUSH
42318: CALL 16450 0 3
// end ;
42322: END
// every 0 0$1 trigger SikorskyAI = 1 do
42323: LD_EXP 20
42327: PUSH
42328: LD_INT 1
42330: EQUAL
42331: IFFALSE 42343
42333: GO 42335
42335: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42336: LD_INT 4
42338: PPUSH
42339: CALL 10960 0 1
42343: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42344: LD_EXP 27
42348: PUSH
42349: LD_INT 1
42351: EQUAL
42352: PUSH
42353: LD_EXP 30
42357: PPUSH
42358: CALL_OW 302
42362: AND
42363: PUSH
42364: LD_EXP 30
42368: PPUSH
42369: CALL_OW 255
42373: PUSH
42374: LD_INT 3
42376: EQUAL
42377: AND
42378: PUSH
42379: LD_INT 22
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 21
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 33
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: PPUSH
42414: CALL_OW 69
42418: PUSH
42419: LD_INT 0
42421: EQUAL
42422: AND
42423: IFFALSE 42657
42425: GO 42427
42427: DISABLE
// begin enable ;
42428: ENABLE
// if Difficulty = 1 then
42429: LD_OWVAR 67
42433: PUSH
42434: LD_INT 1
42436: EQUAL
42437: IFFALSE 42505
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42439: LD_INT 3
42441: PPUSH
42442: LD_EXP 30
42446: PPUSH
42447: LD_INT 5
42449: PPUSH
42450: LD_INT 8
42452: PPUSH
42453: CALL_OW 12
42457: PPUSH
42458: LD_INT 43
42460: PUSH
42461: LD_INT 43
42463: PUSH
42464: LD_INT 43
42466: PUSH
42467: LD_INT 43
42469: PUSH
42470: LD_INT 44
42472: PUSH
42473: LD_INT 44
42475: PUSH
42476: LD_INT 44
42478: PUSH
42479: LD_INT 46
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: PPUSH
42492: LD_INT 1
42494: PPUSH
42495: LD_INT 3
42497: PPUSH
42498: LD_INT 24
42500: PPUSH
42501: CALL 9799 0 7
// if Difficulty = 2 then
42505: LD_OWVAR 67
42509: PUSH
42510: LD_INT 2
42512: EQUAL
42513: IFFALSE 42581
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42515: LD_INT 3
42517: PPUSH
42518: LD_EXP 30
42522: PPUSH
42523: LD_INT 6
42525: PPUSH
42526: LD_INT 8
42528: PPUSH
42529: CALL_OW 12
42533: PPUSH
42534: LD_INT 43
42536: PUSH
42537: LD_INT 43
42539: PUSH
42540: LD_INT 44
42542: PUSH
42543: LD_INT 44
42545: PUSH
42546: LD_INT 44
42548: PUSH
42549: LD_INT 44
42551: PUSH
42552: LD_INT 46
42554: PUSH
42555: LD_INT 46
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: PPUSH
42568: LD_INT 1
42570: PPUSH
42571: LD_INT 3
42573: PPUSH
42574: LD_INT 24
42576: PPUSH
42577: CALL 9799 0 7
// if Difficulty = 3 then
42581: LD_OWVAR 67
42585: PUSH
42586: LD_INT 3
42588: EQUAL
42589: IFFALSE 42657
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42591: LD_INT 3
42593: PPUSH
42594: LD_EXP 30
42598: PPUSH
42599: LD_INT 7
42601: PPUSH
42602: LD_INT 8
42604: PPUSH
42605: CALL_OW 12
42609: PPUSH
42610: LD_INT 43
42612: PUSH
42613: LD_INT 43
42615: PUSH
42616: LD_INT 44
42618: PUSH
42619: LD_INT 44
42621: PUSH
42622: LD_INT 44
42624: PUSH
42625: LD_INT 46
42627: PUSH
42628: LD_INT 46
42630: PUSH
42631: LD_INT 46
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: PPUSH
42644: LD_INT 1
42646: PPUSH
42647: LD_INT 3
42649: PPUSH
42650: LD_INT 24
42652: PPUSH
42653: CALL 9799 0 7
// end ;
42657: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42658: LD_EXP 38
42662: PUSH
42663: LD_INT 1
42665: EQUAL
42666: IFFALSE 42748
42668: GO 42670
42670: DISABLE
42671: LD_INT 0
42673: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42674: LD_ADDR_VAR 0 1
42678: PUSH
42679: LD_INT 22
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 21
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: LD_INT 24
42704: PUSH
42705: LD_INT 650
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: PPUSH
42721: CALL_OW 69
42725: PUSH
42726: FOR_IN
42727: IFFALSE 42746
// ComMoveXY ( i , 51 , 12 ) ;
42729: LD_VAR 0 1
42733: PPUSH
42734: LD_INT 51
42736: PPUSH
42737: LD_INT 12
42739: PPUSH
42740: CALL_OW 111
42744: GO 42726
42746: POP
42747: POP
// end ; end_of_file
42748: PPOPN 1
42750: END
// every 1 1$20 trigger firstAttack = 1 do
42751: LD_EXP 33
42755: PUSH
42756: LD_INT 1
42758: EQUAL
42759: IFFALSE 42865
42761: GO 42763
42763: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42764: LD_INT 6
42766: PPUSH
42767: LD_INT 3
42769: PPUSH
42770: LD_INT 3
42772: PPUSH
42773: LD_INT 4
42775: PPUSH
42776: CALL_OW 12
42780: PUSH
42781: LD_INT 4
42783: PPUSH
42784: LD_INT 6
42786: PPUSH
42787: CALL_OW 12
42791: PUSH
42792: LD_INT 5
42794: PPUSH
42795: LD_INT 6
42797: PPUSH
42798: CALL_OW 12
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: PUSH
42808: LD_OWVAR 67
42812: ARRAY
42813: PPUSH
42814: LD_INT 0
42816: PPUSH
42817: LD_INT 0
42819: PPUSH
42820: LD_INT 0
42822: PPUSH
42823: LD_INT 0
42825: PPUSH
42826: LD_EXP 25
42830: PPUSH
42831: LD_EXP 26
42835: PPUSH
42836: CALL_OW 12
42840: PPUSH
42841: LD_INT 16
42843: PPUSH
42844: LD_INT 7
42846: PPUSH
42847: LD_INT 1
42849: PPUSH
42850: LD_INT 1
42852: PPUSH
42853: LD_INT 3
42855: PPUSH
42856: CALL_OW 12
42860: PPUSH
42861: CALL 12468 0 12
42865: END
// every 1 1$40 trigger firstAttack = 1 do
42866: LD_EXP 33
42870: PUSH
42871: LD_INT 1
42873: EQUAL
42874: IFFALSE 42966
42876: GO 42878
42878: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42879: LD_INT 16
42881: PPUSH
42882: LD_INT 6
42884: PPUSH
42885: LD_INT 3
42887: PPUSH
42888: LD_INT 4
42890: PPUSH
42891: CALL_OW 12
42895: PUSH
42896: LD_INT 4
42898: PPUSH
42899: LD_INT 5
42901: PPUSH
42902: CALL_OW 12
42906: PUSH
42907: LD_INT 5
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: LD_OWVAR 67
42919: ARRAY
42920: PPUSH
42921: LD_EXP 25
42925: PPUSH
42926: LD_EXP 26
42930: PPUSH
42931: CALL_OW 12
42935: PPUSH
42936: LD_INT 3
42938: PPUSH
42939: LD_INT 1
42941: PPUSH
42942: LD_INT 3
42944: PPUSH
42945: LD_INT 44
42947: PUSH
42948: LD_INT 46
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PPUSH
42955: EMPTY
42956: PPUSH
42957: EMPTY
42958: PPUSH
42959: LD_INT 1
42961: PPUSH
42962: CALL 14761 0 11
42966: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
42967: LD_EXP 33
42971: PUSH
42972: LD_INT 1
42974: EQUAL
42975: PUSH
42976: LD_EXP 39
42980: PUSH
42981: LD_INT 0
42983: EQUAL
42984: AND
42985: IFFALSE 43091
42987: GO 42989
42989: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42990: LD_INT 6
42992: PPUSH
42993: LD_INT 3
42995: PPUSH
42996: LD_INT 4
42998: PPUSH
42999: LD_INT 5
43001: PPUSH
43002: CALL_OW 12
43006: PUSH
43007: LD_INT 5
43009: PPUSH
43010: LD_INT 6
43012: PPUSH
43013: CALL_OW 12
43017: PUSH
43018: LD_INT 5
43020: PPUSH
43021: LD_INT 6
43023: PPUSH
43024: CALL_OW 12
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: PUSH
43034: LD_OWVAR 67
43038: ARRAY
43039: PPUSH
43040: LD_INT 0
43042: PPUSH
43043: LD_INT 0
43045: PPUSH
43046: LD_INT 0
43048: PPUSH
43049: LD_INT 0
43051: PPUSH
43052: LD_EXP 25
43056: PPUSH
43057: LD_EXP 26
43061: PPUSH
43062: CALL_OW 12
43066: PPUSH
43067: LD_INT 16
43069: PPUSH
43070: LD_INT 7
43072: PPUSH
43073: LD_INT 1
43075: PPUSH
43076: LD_INT 1
43078: PPUSH
43079: LD_INT 3
43081: PPUSH
43082: CALL_OW 12
43086: PPUSH
43087: CALL 12468 0 12
43091: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
43092: LD_EXP 33
43096: PUSH
43097: LD_INT 1
43099: EQUAL
43100: PUSH
43101: LD_EXP 39
43105: PUSH
43106: LD_INT 0
43108: EQUAL
43109: AND
43110: IFFALSE 43206
43112: GO 43114
43114: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43115: LD_INT 16
43117: PPUSH
43118: LD_INT 6
43120: PPUSH
43121: LD_INT 4
43123: PPUSH
43124: LD_INT 5
43126: PPUSH
43127: CALL_OW 12
43131: PUSH
43132: LD_INT 6
43134: PPUSH
43135: LD_INT 7
43137: PPUSH
43138: CALL_OW 12
43142: PUSH
43143: LD_INT 7
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: LIST
43150: PUSH
43151: LD_OWVAR 67
43155: ARRAY
43156: PPUSH
43157: LD_EXP 25
43161: PPUSH
43162: LD_EXP 26
43166: PPUSH
43167: CALL_OW 12
43171: PPUSH
43172: LD_INT 3
43174: PPUSH
43175: LD_INT 1
43177: PPUSH
43178: LD_INT 3
43180: PPUSH
43181: LD_INT 43
43183: PUSH
43184: LD_INT 44
43186: PUSH
43187: LD_INT 46
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: PPUSH
43195: EMPTY
43196: PPUSH
43197: EMPTY
43198: PPUSH
43199: LD_INT 1
43201: PPUSH
43202: CALL 14761 0 11
43206: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
43207: LD_EXP 33
43211: PUSH
43212: LD_INT 1
43214: EQUAL
43215: PUSH
43216: LD_EXP 39
43220: PUSH
43221: LD_INT 0
43223: EQUAL
43224: AND
43225: IFFALSE 43321
43227: GO 43229
43229: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43230: LD_INT 16
43232: PPUSH
43233: LD_INT 6
43235: PPUSH
43236: LD_INT 4
43238: PPUSH
43239: LD_INT 5
43241: PPUSH
43242: CALL_OW 12
43246: PUSH
43247: LD_INT 6
43249: PPUSH
43250: LD_INT 7
43252: PPUSH
43253: CALL_OW 12
43257: PUSH
43258: LD_INT 7
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: PUSH
43266: LD_OWVAR 67
43270: ARRAY
43271: PPUSH
43272: LD_EXP 25
43276: PPUSH
43277: LD_EXP 26
43281: PPUSH
43282: CALL_OW 12
43286: PPUSH
43287: LD_INT 3
43289: PPUSH
43290: LD_INT 1
43292: PPUSH
43293: LD_INT 3
43295: PPUSH
43296: LD_INT 43
43298: PUSH
43299: LD_INT 44
43301: PUSH
43302: LD_INT 46
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: PPUSH
43310: EMPTY
43311: PPUSH
43312: EMPTY
43313: PPUSH
43314: LD_INT 1
43316: PPUSH
43317: CALL 14761 0 11
43321: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43322: LD_EXP 33
43326: PUSH
43327: LD_INT 1
43329: EQUAL
43330: PUSH
43331: LD_EXP 39
43335: PUSH
43336: LD_INT 0
43338: EQUAL
43339: AND
43340: IFFALSE 43416
43342: GO 43344
43344: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43345: LD_INT 16
43347: PPUSH
43348: LD_INT 6
43350: PPUSH
43351: LD_INT 4
43353: PUSH
43354: LD_INT 6
43356: PUSH
43357: LD_INT 7
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: PUSH
43365: LD_OWVAR 67
43369: ARRAY
43370: PPUSH
43371: LD_EXP 25
43375: PPUSH
43376: LD_EXP 26
43380: PPUSH
43381: CALL_OW 12
43385: PPUSH
43386: LD_INT 3
43388: PPUSH
43389: LD_INT 1
43391: PPUSH
43392: LD_INT 3
43394: PPUSH
43395: LD_INT 44
43397: PUSH
43398: LD_INT 46
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PPUSH
43405: EMPTY
43406: PPUSH
43407: EMPTY
43408: PPUSH
43409: LD_INT 1
43411: PPUSH
43412: CALL 14761 0 11
43416: END
// every 1 1$00 trigger secondAttack = 1 do
43417: LD_EXP 34
43421: PUSH
43422: LD_INT 1
43424: EQUAL
43425: IFFALSE 43507
43427: GO 43429
43429: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43430: LD_INT 6
43432: PPUSH
43433: LD_INT 3
43435: PPUSH
43436: LD_INT 3
43438: PUSH
43439: LD_INT 4
43441: PUSH
43442: LD_INT 5
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: PUSH
43450: LD_OWVAR 67
43454: ARRAY
43455: PPUSH
43456: LD_INT 0
43458: PPUSH
43459: LD_INT 0
43461: PPUSH
43462: LD_INT 0
43464: PPUSH
43465: LD_INT 0
43467: PPUSH
43468: LD_EXP 25
43472: PPUSH
43473: LD_EXP 26
43477: PPUSH
43478: CALL_OW 12
43482: PPUSH
43483: LD_INT 16
43485: PPUSH
43486: LD_INT 7
43488: PPUSH
43489: LD_INT 1
43491: PPUSH
43492: LD_INT 1
43494: PPUSH
43495: LD_INT 3
43497: PPUSH
43498: CALL_OW 12
43502: PPUSH
43503: CALL 12468 0 12
43507: END
// every 1 1$00 trigger secondAttack = 1 do
43508: LD_EXP 34
43512: PUSH
43513: LD_INT 1
43515: EQUAL
43516: IFFALSE 43620
43518: GO 43520
43520: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43521: LD_INT 16
43523: PPUSH
43524: LD_INT 6
43526: PPUSH
43527: LD_INT 5
43529: PPUSH
43530: LD_INT 6
43532: PPUSH
43533: CALL_OW 12
43537: PUSH
43538: LD_INT 6
43540: PPUSH
43541: LD_INT 9
43543: PPUSH
43544: CALL_OW 12
43548: PUSH
43549: LD_INT 7
43551: PPUSH
43552: LD_INT 9
43554: PPUSH
43555: CALL_OW 12
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: PUSH
43565: LD_OWVAR 67
43569: ARRAY
43570: PPUSH
43571: LD_EXP 25
43575: PPUSH
43576: LD_EXP 26
43580: PPUSH
43581: CALL_OW 12
43585: PPUSH
43586: LD_INT 3
43588: PPUSH
43589: LD_INT 1
43591: PPUSH
43592: LD_INT 3
43594: PPUSH
43595: LD_INT 43
43597: PUSH
43598: LD_INT 44
43600: PUSH
43601: LD_INT 46
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: PPUSH
43609: EMPTY
43610: PPUSH
43611: EMPTY
43612: PPUSH
43613: LD_INT 1
43615: PPUSH
43616: CALL 14761 0 11
43620: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43621: LD_EXP 18
43625: PUSH
43626: LD_INT 0
43628: EQUAL
43629: IFFALSE 43711
43631: GO 43633
43633: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43634: LD_INT 6
43636: PPUSH
43637: LD_INT 3
43639: PPUSH
43640: LD_INT 3
43642: PUSH
43643: LD_INT 4
43645: PUSH
43646: LD_INT 5
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: PUSH
43654: LD_OWVAR 67
43658: ARRAY
43659: PPUSH
43660: LD_INT 0
43662: PPUSH
43663: LD_INT 0
43665: PPUSH
43666: LD_INT 0
43668: PPUSH
43669: LD_INT 0
43671: PPUSH
43672: LD_EXP 25
43676: PPUSH
43677: LD_EXP 26
43681: PPUSH
43682: CALL_OW 12
43686: PPUSH
43687: LD_INT 16
43689: PPUSH
43690: LD_INT 7
43692: PPUSH
43693: LD_INT 1
43695: PPUSH
43696: LD_INT 1
43698: PPUSH
43699: LD_INT 3
43701: PPUSH
43702: CALL_OW 12
43706: PPUSH
43707: CALL 12468 0 12
43711: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43712: LD_EXP 18
43716: PUSH
43717: LD_INT 0
43719: EQUAL
43720: IFFALSE 43820
43722: GO 43724
43724: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43725: LD_INT 16
43727: PPUSH
43728: LD_INT 6
43730: PPUSH
43731: LD_INT 5
43733: PPUSH
43734: LD_INT 6
43736: PPUSH
43737: CALL_OW 12
43741: PUSH
43742: LD_INT 6
43744: PPUSH
43745: LD_INT 9
43747: PPUSH
43748: CALL_OW 12
43752: PUSH
43753: LD_INT 7
43755: PPUSH
43756: LD_INT 9
43758: PPUSH
43759: CALL_OW 12
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: PUSH
43769: LD_OWVAR 67
43773: ARRAY
43774: PPUSH
43775: LD_EXP 25
43779: PPUSH
43780: LD_EXP 26
43784: PPUSH
43785: CALL_OW 12
43789: PPUSH
43790: LD_INT 3
43792: PPUSH
43793: LD_INT 1
43795: PPUSH
43796: LD_INT 3
43798: PPUSH
43799: LD_INT 44
43801: PUSH
43802: LD_INT 46
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PPUSH
43809: EMPTY
43810: PPUSH
43811: EMPTY
43812: PPUSH
43813: LD_INT 1
43815: PPUSH
43816: CALL 14761 0 11
43820: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43821: LD_EXP 18
43825: PUSH
43826: LD_INT 0
43828: EQUAL
43829: IFFALSE 43911
43831: GO 43833
43833: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43834: LD_INT 6
43836: PPUSH
43837: LD_INT 3
43839: PPUSH
43840: LD_INT 3
43842: PUSH
43843: LD_INT 4
43845: PUSH
43846: LD_INT 5
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: PUSH
43854: LD_OWVAR 67
43858: ARRAY
43859: PPUSH
43860: LD_INT 0
43862: PPUSH
43863: LD_INT 0
43865: PPUSH
43866: LD_INT 0
43868: PPUSH
43869: LD_INT 0
43871: PPUSH
43872: LD_EXP 25
43876: PPUSH
43877: LD_EXP 26
43881: PPUSH
43882: CALL_OW 12
43886: PPUSH
43887: LD_INT 16
43889: PPUSH
43890: LD_INT 7
43892: PPUSH
43893: LD_INT 1
43895: PPUSH
43896: LD_INT 1
43898: PPUSH
43899: LD_INT 3
43901: PPUSH
43902: CALL_OW 12
43906: PPUSH
43907: CALL 12468 0 12
43911: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43912: LD_EXP 18
43916: PUSH
43917: LD_INT 0
43919: EQUAL
43920: IFFALSE 44020
43922: GO 43924
43924: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43925: LD_INT 16
43927: PPUSH
43928: LD_INT 6
43930: PPUSH
43931: LD_INT 5
43933: PPUSH
43934: LD_INT 6
43936: PPUSH
43937: CALL_OW 12
43941: PUSH
43942: LD_INT 6
43944: PPUSH
43945: LD_INT 9
43947: PPUSH
43948: CALL_OW 12
43952: PUSH
43953: LD_INT 7
43955: PPUSH
43956: LD_INT 9
43958: PPUSH
43959: CALL_OW 12
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: PUSH
43969: LD_OWVAR 67
43973: ARRAY
43974: PPUSH
43975: LD_EXP 25
43979: PPUSH
43980: LD_EXP 26
43984: PPUSH
43985: CALL_OW 12
43989: PPUSH
43990: LD_INT 3
43992: PPUSH
43993: LD_INT 1
43995: PPUSH
43996: LD_INT 3
43998: PPUSH
43999: LD_INT 44
44001: PUSH
44002: LD_INT 46
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PPUSH
44009: EMPTY
44010: PPUSH
44011: EMPTY
44012: PPUSH
44013: LD_INT 1
44015: PPUSH
44016: CALL 14761 0 11
44020: END
// every 35 35$0 trigger SikorskyArrive = 0 do
44021: LD_EXP 18
44025: PUSH
44026: LD_INT 0
44028: EQUAL
44029: IFFALSE 44111
44031: GO 44033
44033: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
44034: LD_INT 6
44036: PPUSH
44037: LD_INT 3
44039: PPUSH
44040: LD_INT 3
44042: PUSH
44043: LD_INT 4
44045: PUSH
44046: LD_INT 5
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: PUSH
44054: LD_OWVAR 67
44058: ARRAY
44059: PPUSH
44060: LD_INT 0
44062: PPUSH
44063: LD_INT 0
44065: PPUSH
44066: LD_INT 0
44068: PPUSH
44069: LD_INT 0
44071: PPUSH
44072: LD_EXP 25
44076: PPUSH
44077: LD_EXP 26
44081: PPUSH
44082: CALL_OW 12
44086: PPUSH
44087: LD_INT 16
44089: PPUSH
44090: LD_INT 7
44092: PPUSH
44093: LD_INT 1
44095: PPUSH
44096: LD_INT 1
44098: PPUSH
44099: LD_INT 3
44101: PPUSH
44102: CALL_OW 12
44106: PPUSH
44107: CALL 12468 0 12
44111: END
// every 35 35$0 trigger SikorskyArrive = 0 do
44112: LD_EXP 18
44116: PUSH
44117: LD_INT 0
44119: EQUAL
44120: IFFALSE 44220
44122: GO 44124
44124: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
44125: LD_INT 16
44127: PPUSH
44128: LD_INT 6
44130: PPUSH
44131: LD_INT 5
44133: PPUSH
44134: LD_INT 6
44136: PPUSH
44137: CALL_OW 12
44141: PUSH
44142: LD_INT 6
44144: PPUSH
44145: LD_INT 9
44147: PPUSH
44148: CALL_OW 12
44152: PUSH
44153: LD_INT 7
44155: PPUSH
44156: LD_INT 9
44158: PPUSH
44159: CALL_OW 12
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: PUSH
44169: LD_OWVAR 67
44173: ARRAY
44174: PPUSH
44175: LD_EXP 25
44179: PPUSH
44180: LD_EXP 26
44184: PPUSH
44185: CALL_OW 12
44189: PPUSH
44190: LD_INT 3
44192: PPUSH
44193: LD_INT 1
44195: PPUSH
44196: LD_INT 3
44198: PPUSH
44199: LD_INT 44
44201: PUSH
44202: LD_INT 46
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PPUSH
44209: EMPTY
44210: PPUSH
44211: EMPTY
44212: PPUSH
44213: LD_INT 1
44215: PPUSH
44216: CALL 14761 0 11
44220: END
// every 0 0$1 trigger timerStatus = 1 do
44221: LD_EXP 35
44225: PUSH
44226: LD_INT 1
44228: EQUAL
44229: IFFALSE 44289
44231: GO 44233
44233: DISABLE
// begin repeat wait ( 0 0$1 ) ;
44234: LD_INT 35
44236: PPUSH
44237: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
44241: LD_ADDR_OWVAR 47
44245: PUSH
44246: LD_STRING #Am08-1
44248: PUSH
44249: LD_EXP 19
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
44258: LD_ADDR_EXP 19
44262: PUSH
44263: LD_EXP 19
44267: PUSH
44268: LD_INT 35
44270: MINUS
44271: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
44272: LD_EXP 19
44276: PUSH
44277: LD_INT 0
44279: EQUAL
44280: IFFALSE 44234
// display_strings := [ ] ;
44282: LD_ADDR_OWVAR 47
44286: PUSH
44287: EMPTY
44288: ST_TO_ADDR
// end ; end_of_file
44289: END
// every 1 1$0 do
44290: GO 44292
44292: DISABLE
// begin if supply <= 13 and supply > 7 then
44293: LD_EXP 40
44297: PUSH
44298: LD_INT 13
44300: LESSEQUAL
44301: PUSH
44302: LD_EXP 40
44306: PUSH
44307: LD_INT 7
44309: GREATER
44310: AND
44311: IFFALSE 44334
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44313: LD_INT 3
44315: PPUSH
44316: LD_INT 5
44318: PPUSH
44319: CALL_OW 12
44323: PPUSH
44324: LD_INT 5
44326: PPUSH
44327: LD_INT 1
44329: PPUSH
44330: CALL_OW 55
// if supply <= 7 and supply > 4 then
44334: LD_EXP 40
44338: PUSH
44339: LD_INT 7
44341: LESSEQUAL
44342: PUSH
44343: LD_EXP 40
44347: PUSH
44348: LD_INT 4
44350: GREATER
44351: AND
44352: IFFALSE 44375
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44354: LD_INT 3
44356: PPUSH
44357: LD_INT 5
44359: PPUSH
44360: CALL_OW 12
44364: PPUSH
44365: LD_INT 20
44367: PPUSH
44368: LD_INT 1
44370: PPUSH
44371: CALL_OW 55
// if supply <= 4 and supply > 0 then
44375: LD_EXP 40
44379: PUSH
44380: LD_INT 4
44382: LESSEQUAL
44383: PUSH
44384: LD_EXP 40
44388: PUSH
44389: LD_INT 0
44391: GREATER
44392: AND
44393: IFFALSE 44416
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44395: LD_INT 3
44397: PPUSH
44398: LD_INT 5
44400: PPUSH
44401: CALL_OW 12
44405: PPUSH
44406: LD_INT 21
44408: PPUSH
44409: LD_INT 1
44411: PPUSH
44412: CALL_OW 55
// if supply > 0 then
44416: LD_EXP 40
44420: PUSH
44421: LD_INT 0
44423: GREATER
44424: IFFALSE 44441
// begin supply = supply - 1 ;
44426: LD_ADDR_EXP 40
44430: PUSH
44431: LD_EXP 40
44435: PUSH
44436: LD_INT 1
44438: MINUS
44439: ST_TO_ADDR
// enable ;
44440: ENABLE
// end ; end ; end_of_file
44441: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44442: LD_EXP 39
44446: PUSH
44447: LD_INT 1
44449: EQUAL
44450: PUSH
44451: LD_EXP 1
44455: PPUSH
44456: CALL_OW 301
44460: AND
44461: IFFALSE 44473
44463: GO 44465
44465: DISABLE
// YouLost ( JMM ) ;
44466: LD_STRING JMM
44468: PPUSH
44469: CALL_OW 104
44473: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44474: LD_EXP 18
44478: PUSH
44479: LD_INT 1
44481: EQUAL
44482: PUSH
44483: LD_EXP 16
44487: PPUSH
44488: CALL_OW 301
44492: AND
44493: IFFALSE 44525
44495: GO 44497
44497: DISABLE
// begin DialogueOn ;
44498: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44502: LD_EXP 23
44506: PPUSH
44507: LD_STRING D8a-Pow-1
44509: PPUSH
44510: CALL_OW 94
// DialogueOff ;
44514: CALL_OW 7
// YouLost ( Dismissed ) ;
44518: LD_STRING Dismissed
44520: PPUSH
44521: CALL_OW 104
// end ;
44525: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44526: LD_INT 22
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 30
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 30
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PPUSH
44568: CALL_OW 69
44572: PUSH
44573: LD_INT 0
44575: EQUAL
44576: IFFALSE 44588
44578: GO 44580
44580: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44581: LD_STRING Destroyed
44583: PPUSH
44584: CALL_OW 104
44588: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44589: LD_EXP 24
44593: PPUSH
44594: CALL_OW 301
44598: PUSH
44599: LD_INT 22
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 21
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PPUSH
44623: CALL_OW 69
44627: PUSH
44628: LD_INT 7
44630: PUSH
44631: LD_INT 6
44633: PUSH
44634: LD_INT 5
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: PUSH
44642: LD_OWVAR 67
44646: ARRAY
44647: LESS
44648: AND
44649: PUSH
44650: LD_EXP 1
44654: PPUSH
44655: CALL_OW 305
44659: AND
44660: IFFALSE 45108
44662: GO 44664
44664: DISABLE
44665: LD_INT 0
44667: PPUSH
44668: PPUSH
// begin russianAI = 0 ;
44669: LD_ADDR_EXP 27
44673: PUSH
44674: LD_INT 0
44676: ST_TO_ADDR
// escapeAvalaible = 1 ;
44677: LD_ADDR_EXP 36
44681: PUSH
44682: LD_INT 1
44684: ST_TO_ADDR
// InGameOn ;
44685: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44689: LD_INT 3
44691: PPUSH
44692: LD_INT 1
44694: PPUSH
44695: LD_INT 1
44697: PPUSH
44698: LD_INT 0
44700: PPUSH
44701: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44705: LD_INT 6
44707: PPUSH
44708: LD_INT 1
44710: PPUSH
44711: LD_INT 1
44713: PPUSH
44714: LD_INT 0
44716: PPUSH
44717: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44721: LD_INT 3
44723: PPUSH
44724: LD_INT 1
44726: PPUSH
44727: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44731: LD_INT 97
44733: PPUSH
44734: LD_INT 91
44736: PPUSH
44737: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44741: LD_INT 22
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 21
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PPUSH
44765: CALL_OW 69
44769: PPUSH
44770: CALL_OW 121
// wait ( 0 0$01 ) ;
44774: LD_INT 35
44776: PPUSH
44777: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44781: LD_INT 22
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 21
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PPUSH
44805: CALL_OW 69
44809: PPUSH
44810: LD_INT 124
44812: PPUSH
44813: LD_INT 98
44815: PPUSH
44816: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44820: LD_INT 22
44822: PUSH
44823: LD_INT 6
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 21
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PPUSH
44844: CALL_OW 69
44848: PPUSH
44849: CALL_OW 121
// wait ( 0 0$01 ) ;
44853: LD_INT 35
44855: PPUSH
44856: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44860: LD_INT 22
44862: PUSH
44863: LD_INT 6
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 21
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PPUSH
44884: CALL_OW 69
44888: PPUSH
44889: LD_INT 124
44891: PPUSH
44892: LD_INT 98
44894: PPUSH
44895: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44899: LD_INT 22
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 21
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 54
44924: PUSH
44925: EMPTY
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: PPUSH
44937: CALL_OW 69
44941: PPUSH
44942: LD_INT 124
44944: PPUSH
44945: LD_INT 98
44947: PPUSH
44948: CALL_OW 114
// wait ( 0 0$4 ) ;
44952: LD_INT 140
44954: PPUSH
44955: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44959: LD_INT 124
44961: PPUSH
44962: LD_INT 98
44964: PPUSH
44965: CALL_OW 84
// if SikorskyStatus = 1 then
44969: LD_EXP 21
44973: PUSH
44974: LD_INT 1
44976: EQUAL
44977: IFFALSE 44991
// begin Say ( Sikorski , D9-Sik-1 ) ;
44979: LD_EXP 16
44983: PPUSH
44984: LD_STRING D9-Sik-1
44986: PPUSH
44987: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44991: LD_EXP 21
44995: PUSH
44996: LD_INT 2
44998: EQUAL
44999: IFFALSE 45020
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
45001: LD_EXP 23
45005: PPUSH
45006: LD_STRING D8b-Pow-1
45008: PPUSH
45009: CALL_OW 94
// YouLost ( Dismissed ) ;
45013: LD_STRING Dismissed
45015: PPUSH
45016: CALL_OW 104
// end ; p := 0 0$0 ;
45020: LD_ADDR_VAR 0 2
45024: PUSH
45025: LD_INT 0
45027: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45028: LD_INT 35
45030: PPUSH
45031: CALL_OW 67
// p := p + 0 0$1 ;
45035: LD_ADDR_VAR 0 2
45039: PUSH
45040: LD_VAR 0 2
45044: PUSH
45045: LD_INT 35
45047: PLUS
45048: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
45049: LD_INT 23
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 21
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 24
45071: PUSH
45072: LD_INT 250
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: LIST
45083: PPUSH
45084: CALL_OW 69
45088: PUSH
45089: LD_INT 0
45091: EQUAL
45092: PUSH
45093: LD_VAR 0 2
45097: PUSH
45098: LD_INT 245
45100: GREATEREQUAL
45101: OR
45102: IFFALSE 45028
// FinishMission ;
45104: CALL 45111 0 0
// end ;
45108: PPOPN 2
45110: END
// export function FinishMission ; var tmp ; begin
45111: LD_INT 0
45113: PPUSH
45114: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
45115: LD_INT 22
45117: PUSH
45118: LD_INT 4
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PPUSH
45125: CALL_OW 69
45129: PUSH
45130: LD_INT 0
45132: EQUAL
45133: IFFALSE 45142
// SetAchievement ( ACH_BLITZKRIEG ) ;
45135: LD_STRING ACH_BLITZKRIEG
45137: PPUSH
45138: CALL_OW 543
// if tick <= 25 25$00 then
45142: LD_OWVAR 1
45146: PUSH
45147: LD_INT 52500
45149: LESSEQUAL
45150: IFFALSE 45166
// begin wait ( 3 ) ;
45152: LD_INT 3
45154: PPUSH
45155: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
45159: LD_STRING ACH_ASPEED_8
45161: PPUSH
45162: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
45166: LD_STRING med1
45168: PPUSH
45169: LD_INT 1
45171: PPUSH
45172: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
45176: LD_STRING med2
45178: PPUSH
45179: LD_INT 1
45181: PPUSH
45182: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
45186: LD_STRING perfect
45188: PPUSH
45189: LD_INT 1
45191: PPUSH
45192: CALL_OW 101
// if Difficulty = 3 then
45196: LD_OWVAR 67
45200: PUSH
45201: LD_INT 3
45203: EQUAL
45204: IFFALSE 45216
// SetAchievementEX ( ACH_AMER , 8 ) ;
45206: LD_STRING ACH_AMER
45208: PPUSH
45209: LD_INT 8
45211: PPUSH
45212: CALL_OW 564
// GiveMedals ( Main ) ;
45216: LD_STRING Main
45218: PPUSH
45219: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45223: LD_INT 22
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 23
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 21
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 25
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 25
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 25
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 25
45288: PUSH
45289: LD_INT 4
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: PPUSH
45309: CALL_OW 69
45313: PPUSH
45314: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45318: LD_EXP 1
45322: PPUSH
45323: LD_EXP 43
45327: PUSH
45328: LD_STRING JMM
45330: STR
45331: PPUSH
45332: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
45336: LD_EXP 2
45340: PPUSH
45341: LD_EXP 43
45345: PUSH
45346: LD_STRING Brown
45348: STR
45349: PPUSH
45350: CALL 8315 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45354: LD_EXP 3
45358: PPUSH
45359: LD_EXP 43
45363: PUSH
45364: LD_STRING Donaldson
45366: STR
45367: PPUSH
45368: CALL 8315 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45372: LD_EXP 4
45376: PPUSH
45377: LD_EXP 43
45381: PUSH
45382: LD_STRING Bobby
45384: STR
45385: PPUSH
45386: CALL 8315 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45390: LD_EXP 5
45394: PPUSH
45395: LD_EXP 43
45399: PUSH
45400: LD_STRING Cyrus
45402: STR
45403: PPUSH
45404: CALL 8315 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45408: LD_EXP 6
45412: PPUSH
45413: LD_EXP 43
45417: PUSH
45418: LD_STRING Lisa
45420: STR
45421: PPUSH
45422: CALL 8315 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45426: LD_EXP 7
45430: PPUSH
45431: LD_EXP 43
45435: PUSH
45436: LD_STRING Frank
45438: STR
45439: PPUSH
45440: CALL 8315 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45444: LD_EXP 8
45448: PPUSH
45449: LD_EXP 43
45453: PUSH
45454: LD_STRING Gladstone
45456: STR
45457: PPUSH
45458: CALL 8315 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45462: LD_EXP 9
45466: PPUSH
45467: LD_EXP 43
45471: PUSH
45472: LD_STRING Kikuchi
45474: STR
45475: PPUSH
45476: CALL 8315 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45480: LD_EXP 14
45484: PPUSH
45485: LD_EXP 43
45489: PUSH
45490: LD_STRING Denis
45492: STR
45493: PPUSH
45494: CALL 8315 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45498: LD_EXP 15
45502: PPUSH
45503: LD_EXP 43
45507: PUSH
45508: LD_STRING Joan
45510: STR
45511: PPUSH
45512: CALL 8315 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45516: LD_EXP 10
45520: PPUSH
45521: LD_EXP 43
45525: PUSH
45526: LD_STRING Khatam
45528: STR
45529: PPUSH
45530: CALL 8315 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45534: LD_EXP 13
45538: PPUSH
45539: LD_EXP 43
45543: PUSH
45544: LD_STRING Houten
45546: STR
45547: PPUSH
45548: CALL 8315 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45552: LD_INT 50
45554: PUSH
45555: EMPTY
45556: LIST
45557: PUSH
45558: LD_INT 22
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 21
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: LD_INT 25
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 25
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 25
45603: PUSH
45604: LD_INT 3
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 25
45613: PUSH
45614: LD_INT 4
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: PPUSH
45634: CALL_OW 69
45638: PUSH
45639: LD_EXP 1
45643: PUSH
45644: LD_EXP 2
45648: PUSH
45649: LD_EXP 3
45653: PUSH
45654: LD_EXP 4
45658: PUSH
45659: LD_EXP 5
45663: PUSH
45664: LD_EXP 6
45668: PUSH
45669: LD_EXP 7
45673: PUSH
45674: LD_EXP 8
45678: PUSH
45679: LD_EXP 9
45683: PUSH
45684: LD_EXP 14
45688: PUSH
45689: LD_EXP 15
45693: PUSH
45694: LD_EXP 13
45698: PUSH
45699: LD_EXP 10
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: DIFF
45719: PPUSH
45720: LD_STRING 08_other_survivors
45722: PPUSH
45723: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45727: LD_INT 23
45729: PPUSH
45730: CALL 45743 0 1
// YouWin ;
45734: CALL_OW 103
// end ;
45738: LD_VAR 0 1
45742: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45743: LD_INT 0
45745: PPUSH
45746: PPUSH
45747: PPUSH
45748: PPUSH
// gammaBase = [ ] ;
45749: LD_ADDR_VAR 0 4
45753: PUSH
45754: EMPTY
45755: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45756: LD_ADDR_VAR 0 5
45760: PUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: LD_INT 22
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 21
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 50
45788: PUSH
45789: EMPTY
45790: LIST
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: PPUSH
45797: CALL_OW 70
45801: ST_TO_ADDR
// for i in buildings do
45802: LD_ADDR_VAR 0 3
45806: PUSH
45807: LD_VAR 0 5
45811: PUSH
45812: FOR_IN
45813: IFFALSE 46250
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45815: LD_VAR 0 3
45819: PPUSH
45820: CALL_OW 266
45824: PUSH
45825: LD_INT 6
45827: PUSH
45828: LD_INT 7
45830: PUSH
45831: LD_INT 8
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: IN
45839: IFFALSE 45953
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45841: LD_ADDR_VAR 0 4
45845: PUSH
45846: LD_VAR 0 4
45850: PUSH
45851: LD_VAR 0 3
45855: PPUSH
45856: CALL_OW 266
45860: PUSH
45861: LD_VAR 0 3
45865: PPUSH
45866: CALL_OW 250
45870: PUSH
45871: LD_VAR 0 3
45875: PPUSH
45876: CALL_OW 251
45880: PUSH
45881: LD_VAR 0 3
45885: PPUSH
45886: CALL_OW 254
45890: PUSH
45891: LD_VAR 0 3
45895: PPUSH
45896: CALL_OW 267
45900: PUSH
45901: LD_VAR 0 3
45905: PPUSH
45906: CALL_OW 248
45910: PUSH
45911: LD_VAR 0 3
45915: PPUSH
45916: LD_INT 1
45918: PPUSH
45919: CALL_OW 268
45923: PUSH
45924: LD_VAR 0 3
45928: PPUSH
45929: LD_INT 2
45931: PPUSH
45932: CALL_OW 268
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: ADD
45950: ST_TO_ADDR
45951: GO 46248
// if GetBType ( i ) = b_bunker then
45953: LD_VAR 0 3
45957: PPUSH
45958: CALL_OW 266
45962: PUSH
45963: LD_INT 32
45965: EQUAL
45966: IFFALSE 46063
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45968: LD_ADDR_VAR 0 4
45972: PUSH
45973: LD_VAR 0 4
45977: PUSH
45978: LD_VAR 0 3
45982: PPUSH
45983: CALL_OW 266
45987: PUSH
45988: LD_VAR 0 3
45992: PPUSH
45993: CALL_OW 250
45997: PUSH
45998: LD_VAR 0 3
46002: PPUSH
46003: CALL_OW 251
46007: PUSH
46008: LD_VAR 0 3
46012: PPUSH
46013: CALL_OW 254
46017: PUSH
46018: LD_VAR 0 3
46022: PPUSH
46023: CALL_OW 267
46027: PUSH
46028: LD_VAR 0 3
46032: PPUSH
46033: CALL_OW 248
46037: PUSH
46038: LD_VAR 0 3
46042: PPUSH
46043: CALL_OW 269
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: PUSH
46057: EMPTY
46058: LIST
46059: ADD
46060: ST_TO_ADDR
46061: GO 46248
// if GetBType ( i ) = b_factory then
46063: LD_VAR 0 3
46067: PPUSH
46068: CALL_OW 266
46072: PUSH
46073: LD_INT 3
46075: EQUAL
46076: IFFALSE 46166
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
46078: LD_ADDR_VAR 0 4
46082: PUSH
46083: LD_VAR 0 4
46087: PPUSH
46088: LD_INT 1
46090: PPUSH
46091: LD_VAR 0 3
46095: PPUSH
46096: CALL_OW 266
46100: PUSH
46101: LD_VAR 0 3
46105: PPUSH
46106: CALL_OW 250
46110: PUSH
46111: LD_VAR 0 3
46115: PPUSH
46116: CALL_OW 251
46120: PUSH
46121: LD_VAR 0 3
46125: PPUSH
46126: CALL_OW 254
46130: PUSH
46131: LD_VAR 0 3
46135: PPUSH
46136: CALL_OW 267
46140: PUSH
46141: LD_VAR 0 3
46145: PPUSH
46146: CALL_OW 248
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: PPUSH
46159: CALL_OW 2
46163: ST_TO_ADDR
46164: GO 46248
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
46166: LD_ADDR_VAR 0 4
46170: PUSH
46171: LD_VAR 0 4
46175: PUSH
46176: LD_VAR 0 3
46180: PPUSH
46181: CALL_OW 266
46185: PUSH
46186: LD_VAR 0 3
46190: PPUSH
46191: CALL_OW 250
46195: PUSH
46196: LD_VAR 0 3
46200: PPUSH
46201: CALL_OW 251
46205: PUSH
46206: LD_VAR 0 3
46210: PPUSH
46211: CALL_OW 254
46215: PUSH
46216: LD_VAR 0 3
46220: PPUSH
46221: CALL_OW 267
46225: PUSH
46226: LD_VAR 0 3
46230: PPUSH
46231: CALL_OW 248
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: PUSH
46244: EMPTY
46245: LIST
46246: ADD
46247: ST_TO_ADDR
// end ;
46248: GO 45812
46250: POP
46251: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
46252: LD_VAR 0 4
46256: PPUSH
46257: LD_STRING 08_GammaBase
46259: PPUSH
46260: CALL_OW 39
// end ; end_of_file
46264: LD_VAR 0 2
46268: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
46269: GO 46271
46271: DISABLE
// begin ru_radar := 98 ;
46272: LD_ADDR_EXP 48
46276: PUSH
46277: LD_INT 98
46279: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
46280: LD_ADDR_EXP 49
46284: PUSH
46285: LD_INT 89
46287: ST_TO_ADDR
// us_hack := 99 ;
46288: LD_ADDR_EXP 50
46292: PUSH
46293: LD_INT 99
46295: ST_TO_ADDR
// us_artillery := 97 ;
46296: LD_ADDR_EXP 51
46300: PUSH
46301: LD_INT 97
46303: ST_TO_ADDR
// ar_bio_bomb := 91 ;
46304: LD_ADDR_EXP 52
46308: PUSH
46309: LD_INT 91
46311: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
46312: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
46313: LD_INT 0
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
46319: LD_VAR 0 1
46323: PPUSH
46324: CALL_OW 264
46328: PUSH
46329: LD_EXP 52
46333: EQUAL
46334: IFFALSE 46406
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
46336: LD_INT 68
46338: PPUSH
46339: LD_VAR 0 1
46343: PPUSH
46344: CALL_OW 255
46348: PPUSH
46349: CALL_OW 321
46353: PUSH
46354: LD_INT 2
46356: EQUAL
46357: IFFALSE 46369
// eff := 70 else
46359: LD_ADDR_VAR 0 6
46363: PUSH
46364: LD_INT 70
46366: ST_TO_ADDR
46367: GO 46377
// eff := 30 ;
46369: LD_ADDR_VAR 0 6
46373: PUSH
46374: LD_INT 30
46376: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
46377: LD_VAR 0 1
46381: PPUSH
46382: CALL_OW 250
46386: PPUSH
46387: LD_VAR 0 1
46391: PPUSH
46392: CALL_OW 251
46396: PPUSH
46397: LD_VAR 0 6
46401: PPUSH
46402: CALL_OW 495
// end ; end ;
46406: LD_VAR 0 4
46410: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
46411: LD_INT 0
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
// if cmd = 124 then
46419: LD_VAR 0 1
46423: PUSH
46424: LD_INT 124
46426: EQUAL
46427: IFFALSE 46633
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
46429: LD_ADDR_VAR 0 5
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: LD_INT 34
46439: PUSH
46440: LD_INT 53
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 34
46449: PUSH
46450: LD_INT 14
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: PPUSH
46462: CALL_OW 69
46466: ST_TO_ADDR
// if not tmp then
46467: LD_VAR 0 5
46471: NOT
46472: IFFALSE 46476
// exit ;
46474: GO 46633
// for i in tmp do
46476: LD_ADDR_VAR 0 3
46480: PUSH
46481: LD_VAR 0 5
46485: PUSH
46486: FOR_IN
46487: IFFALSE 46631
// begin taskList := GetTaskList ( i ) ;
46489: LD_ADDR_VAR 0 6
46493: PUSH
46494: LD_VAR 0 3
46498: PPUSH
46499: CALL_OW 437
46503: ST_TO_ADDR
// if not taskList then
46504: LD_VAR 0 6
46508: NOT
46509: IFFALSE 46513
// continue ;
46511: GO 46486
// for j = 1 to taskList do
46513: LD_ADDR_VAR 0 4
46517: PUSH
46518: DOUBLE
46519: LD_INT 1
46521: DEC
46522: ST_TO_ADDR
46523: LD_VAR 0 6
46527: PUSH
46528: FOR_TO
46529: IFFALSE 46627
// if taskList [ j ] [ 1 ] = | then
46531: LD_VAR 0 6
46535: PUSH
46536: LD_VAR 0 4
46540: ARRAY
46541: PUSH
46542: LD_INT 1
46544: ARRAY
46545: PUSH
46546: LD_STRING |
46548: EQUAL
46549: IFFALSE 46625
// begin _taskList := Delete ( taskList , 1 ) ;
46551: LD_ADDR_VAR 0 7
46555: PUSH
46556: LD_VAR 0 6
46560: PPUSH
46561: LD_INT 1
46563: PPUSH
46564: CALL_OW 3
46568: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
46569: LD_VAR 0 3
46573: PPUSH
46574: LD_VAR 0 7
46578: PPUSH
46579: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
46583: LD_VAR 0 3
46587: PPUSH
46588: LD_VAR 0 6
46592: PUSH
46593: LD_VAR 0 4
46597: ARRAY
46598: PUSH
46599: LD_INT 2
46601: ARRAY
46602: PPUSH
46603: LD_VAR 0 6
46607: PUSH
46608: LD_VAR 0 4
46612: ARRAY
46613: PUSH
46614: LD_INT 3
46616: ARRAY
46617: PPUSH
46618: LD_INT 8
46620: PPUSH
46621: CALL 46638 0 4
// end ;
46625: GO 46528
46627: POP
46628: POP
// end ;
46629: GO 46486
46631: POP
46632: POP
// end ; end ;
46633: LD_VAR 0 2
46637: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46638: LD_INT 0
46640: PPUSH
46641: PPUSH
46642: PPUSH
46643: PPUSH
46644: PPUSH
46645: PPUSH
46646: PPUSH
46647: PPUSH
46648: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46649: LD_VAR 0 1
46653: NOT
46654: PUSH
46655: LD_VAR 0 2
46659: PPUSH
46660: LD_VAR 0 3
46664: PPUSH
46665: CALL_OW 488
46669: NOT
46670: OR
46671: PUSH
46672: LD_VAR 0 4
46676: NOT
46677: OR
46678: IFFALSE 46682
// exit ;
46680: GO 47022
// list := [ ] ;
46682: LD_ADDR_VAR 0 13
46686: PUSH
46687: EMPTY
46688: ST_TO_ADDR
// if x - r < 0 then
46689: LD_VAR 0 2
46693: PUSH
46694: LD_VAR 0 4
46698: MINUS
46699: PUSH
46700: LD_INT 0
46702: LESS
46703: IFFALSE 46715
// min_x := 0 else
46705: LD_ADDR_VAR 0 7
46709: PUSH
46710: LD_INT 0
46712: ST_TO_ADDR
46713: GO 46731
// min_x := x - r ;
46715: LD_ADDR_VAR 0 7
46719: PUSH
46720: LD_VAR 0 2
46724: PUSH
46725: LD_VAR 0 4
46729: MINUS
46730: ST_TO_ADDR
// if y - r < 0 then
46731: LD_VAR 0 3
46735: PUSH
46736: LD_VAR 0 4
46740: MINUS
46741: PUSH
46742: LD_INT 0
46744: LESS
46745: IFFALSE 46757
// min_y := 0 else
46747: LD_ADDR_VAR 0 8
46751: PUSH
46752: LD_INT 0
46754: ST_TO_ADDR
46755: GO 46773
// min_y := y - r ;
46757: LD_ADDR_VAR 0 8
46761: PUSH
46762: LD_VAR 0 3
46766: PUSH
46767: LD_VAR 0 4
46771: MINUS
46772: ST_TO_ADDR
// max_x := x + r ;
46773: LD_ADDR_VAR 0 9
46777: PUSH
46778: LD_VAR 0 2
46782: PUSH
46783: LD_VAR 0 4
46787: PLUS
46788: ST_TO_ADDR
// max_y := y + r ;
46789: LD_ADDR_VAR 0 10
46793: PUSH
46794: LD_VAR 0 3
46798: PUSH
46799: LD_VAR 0 4
46803: PLUS
46804: ST_TO_ADDR
// for _x = min_x to max_x do
46805: LD_ADDR_VAR 0 11
46809: PUSH
46810: DOUBLE
46811: LD_VAR 0 7
46815: DEC
46816: ST_TO_ADDR
46817: LD_VAR 0 9
46821: PUSH
46822: FOR_TO
46823: IFFALSE 46940
// for _y = min_y to max_y do
46825: LD_ADDR_VAR 0 12
46829: PUSH
46830: DOUBLE
46831: LD_VAR 0 8
46835: DEC
46836: ST_TO_ADDR
46837: LD_VAR 0 10
46841: PUSH
46842: FOR_TO
46843: IFFALSE 46936
// begin if not ValidHex ( _x , _y ) then
46845: LD_VAR 0 11
46849: PPUSH
46850: LD_VAR 0 12
46854: PPUSH
46855: CALL_OW 488
46859: NOT
46860: IFFALSE 46864
// continue ;
46862: GO 46842
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46864: LD_VAR 0 11
46868: PPUSH
46869: LD_VAR 0 12
46873: PPUSH
46874: CALL_OW 351
46878: PUSH
46879: LD_VAR 0 11
46883: PPUSH
46884: LD_VAR 0 12
46888: PPUSH
46889: CALL_OW 554
46893: AND
46894: IFFALSE 46934
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46896: LD_ADDR_VAR 0 13
46900: PUSH
46901: LD_VAR 0 13
46905: PPUSH
46906: LD_VAR 0 13
46910: PUSH
46911: LD_INT 1
46913: PLUS
46914: PPUSH
46915: LD_VAR 0 11
46919: PUSH
46920: LD_VAR 0 12
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PPUSH
46929: CALL_OW 2
46933: ST_TO_ADDR
// end ;
46934: GO 46842
46936: POP
46937: POP
46938: GO 46822
46940: POP
46941: POP
// if not list then
46942: LD_VAR 0 13
46946: NOT
46947: IFFALSE 46951
// exit ;
46949: GO 47022
// for i in list do
46951: LD_ADDR_VAR 0 6
46955: PUSH
46956: LD_VAR 0 13
46960: PUSH
46961: FOR_IN
46962: IFFALSE 47020
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46964: LD_VAR 0 1
46968: PPUSH
46969: LD_STRING M
46971: PUSH
46972: LD_VAR 0 6
46976: PUSH
46977: LD_INT 1
46979: ARRAY
46980: PUSH
46981: LD_VAR 0 6
46985: PUSH
46986: LD_INT 2
46988: ARRAY
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: PUSH
47011: EMPTY
47012: LIST
47013: PPUSH
47014: CALL_OW 447
47018: GO 46961
47020: POP
47021: POP
// end ;
47022: LD_VAR 0 5
47026: RET
