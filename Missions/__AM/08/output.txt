// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7563 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareBase ;
 224: CALL 2542 0 0
// PrepareHeroes ;
 228: CALL 526 0 0
// PrepareRussianCommander ;
 232: CALL 6334 0 0
// PrepareRussians ;
 236: CALL 6652 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 8973 0 6
// PrepareCutsceneAttack ;
 319: CALL 6386 0 0
// end ;
 323: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 324: LD_EXP 45
 328: PUSH
 329: LD_INT 1
 331: EQUAL
 332: IFFALSE 523
 334: GO 336
 336: DISABLE
 337: LD_INT 0
 339: PPUSH
// begin enable ;
 340: ENABLE
// fogoff ( true ) ;
 341: LD_INT 1
 343: PPUSH
 344: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 21
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PPUSH
 377: CALL_OW 69
 381: PUSH
 382: FOR_IN
 383: IFFALSE 399
// SetLives ( i , 1000 ) ;
 385: LD_VAR 0 1
 389: PPUSH
 390: LD_INT 1000
 392: PPUSH
 393: CALL_OW 234
 397: GO 382
 399: POP
 400: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 401: LD_ADDR_VAR 0 1
 405: PUSH
 406: LD_INT 22
 408: PUSH
 409: LD_INT 1
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 30
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: FOR_IN
 436: IFFALSE 460
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 438: LD_VAR 0 1
 442: PPUSH
 443: CALL_OW 274
 447: PPUSH
 448: LD_INT 1
 450: PPUSH
 451: LD_INT 9999
 453: PPUSH
 454: CALL_OW 277
 458: GO 435
 460: POP
 461: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 462: LD_ADDR_VAR 0 1
 466: PUSH
 467: LD_INT 22
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 30
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: FOR_IN
 497: IFFALSE 521
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: LD_INT 9999
 514: PPUSH
 515: CALL_OW 277
 519: GO 496
 521: POP
 522: POP
// end ; end_of_file
 523: PPOPN 1
 525: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 526: LD_INT 0
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
 540: PPUSH
 541: PPUSH
 542: PPUSH
// uc_side = 1 ;
 543: LD_ADDR_OWVAR 20
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// uc_nation = 1 ;
 551: LD_ADDR_OWVAR 21
 555: PUSH
 556: LD_INT 1
 558: ST_TO_ADDR
// if gammaCommander = 1 then
 559: LD_EXP 12
 563: PUSH
 564: LD_INT 1
 566: EQUAL
 567: IFFALSE 615
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 569: LD_ADDR_EXP 3
 573: PUSH
 574: LD_STRING 04_Donaldson
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL 7070 0 2
 584: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 585: LD_EXP 3
 589: PPUSH
 590: LD_INT 54
 592: PPUSH
 593: LD_INT 25
 595: PPUSH
 596: LD_INT 8
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// ComHold ( Donaldson ) ;
 606: LD_EXP 3
 610: PPUSH
 611: CALL_OW 140
// end ; if gammaCommander = 2 then
 615: LD_EXP 12
 619: PUSH
 620: LD_INT 2
 622: EQUAL
 623: IFFALSE 671
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_STRING 04_Brown
 632: PPUSH
 633: LD_INT 1
 635: PPUSH
 636: CALL 7070 0 2
 640: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 641: LD_EXP 2
 645: PPUSH
 646: LD_INT 54
 648: PPUSH
 649: LD_INT 25
 651: PPUSH
 652: LD_INT 8
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: CALL_OW 50
// ComHold ( Brown ) ;
 662: LD_EXP 2
 666: PPUSH
 667: CALL_OW 140
// end ; if gammaCommander = 3 then
 671: LD_EXP 12
 675: PUSH
 676: LD_INT 3
 678: EQUAL
 679: IFFALSE 727
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 681: LD_ADDR_EXP 13
 685: PUSH
 686: LD_STRING VanHouten
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 7070 0 2
 696: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 697: LD_EXP 13
 701: PPUSH
 702: LD_INT 54
 704: PPUSH
 705: LD_INT 25
 707: PPUSH
 708: LD_INT 8
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 50
// ComHold ( Houten ) ;
 718: LD_EXP 13
 722: PPUSH
 723: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 727: LD_ADDR_EXP 22
 731: PUSH
 732: LD_STRING Harisson
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL 7070 0 2
 742: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 743: LD_ADDR_EXP 23
 747: PUSH
 748: LD_STRING Powell
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL 7070 0 2
 758: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 759: LD_STRING 04_Lisa
 761: PUSH
 762: EMPTY
 763: LIST
 764: PPUSH
 765: CALL_OW 28
 769: PUSH
 770: LD_STRING LisaInDelta
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 30
 780: NOT
 781: AND
 782: PUSH
 783: LD_STRING 07_Lisa
 785: PUSH
 786: EMPTY
 787: LIST
 788: PPUSH
 789: CALL_OW 28
 793: NOT
 794: AND
 795: IFFALSE 831
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 797: LD_ADDR_EXP 6
 801: PUSH
 802: LD_STRING 04_Lisa
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL 7070 0 2
 812: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 813: LD_ADDR_VAR 0 15
 817: PUSH
 818: LD_VAR 0 15
 822: PUSH
 823: LD_EXP 6
 827: ADD
 828: ST_TO_ADDR
// end else
 829: GO 883
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 831: LD_EXP 6
 835: NOT
 836: PUSH
 837: LD_STRING LisaIn07
 839: PPUSH
 840: LD_INT 0
 842: PPUSH
 843: CALL_OW 30
 847: NOT
 848: AND
 849: IFFALSE 883
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 851: LD_ADDR_EXP 6
 855: PUSH
 856: LD_STRING 07_Lisa
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: CALL 7070 0 2
 866: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 867: LD_ADDR_VAR 0 15
 871: PUSH
 872: LD_VAR 0 15
 876: PUSH
 877: LD_EXP 6
 881: ADD
 882: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 883: LD_STRING 04_Bobby
 885: PUSH
 886: EMPTY
 887: LIST
 888: PPUSH
 889: CALL_OW 28
 893: PUSH
 894: LD_STRING BobbyInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: NOT
 905: AND
 906: PUSH
 907: LD_STRING 07_Bobby
 909: PUSH
 910: EMPTY
 911: LIST
 912: PPUSH
 913: CALL_OW 28
 917: NOT
 918: AND
 919: IFFALSE 955
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 921: LD_ADDR_EXP 4
 925: PUSH
 926: LD_STRING 04_Bobby
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: CALL 7070 0 2
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 4
 951: ADD
 952: ST_TO_ADDR
// end else
 953: GO 1007
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 955: LD_EXP 4
 959: NOT
 960: PUSH
 961: LD_STRING BobbyIn07
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: CALL_OW 30
 971: NOT
 972: AND
 973: IFFALSE 1007
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 975: LD_ADDR_EXP 4
 979: PUSH
 980: LD_STRING 07_Bobby
 982: PPUSH
 983: LD_INT 1
 985: PPUSH
 986: CALL 7070 0 2
 990: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 991: LD_ADDR_VAR 0 15
 995: PUSH
 996: LD_VAR 0 15
1000: PUSH
1001: LD_EXP 4
1005: ADD
1006: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1007: LD_STRING 04_Cyrus
1009: PUSH
1010: EMPTY
1011: LIST
1012: PPUSH
1013: CALL_OW 28
1017: PUSH
1018: LD_STRING CyrusInDelta
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: NOT
1029: AND
1030: PUSH
1031: LD_STRING 07_Cyrus
1033: PUSH
1034: EMPTY
1035: LIST
1036: PPUSH
1037: CALL_OW 28
1041: NOT
1042: AND
1043: IFFALSE 1079
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1045: LD_ADDR_EXP 5
1049: PUSH
1050: LD_STRING 04_Cyrus
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 7070 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 5
1075: ADD
1076: ST_TO_ADDR
// end else
1077: GO 1131
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1079: LD_EXP 5
1083: NOT
1084: PUSH
1085: LD_STRING CyrusIn07
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 30
1095: NOT
1096: AND
1097: IFFALSE 1131
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1099: LD_ADDR_EXP 5
1103: PUSH
1104: LD_STRING 07_Cyrus
1106: PPUSH
1107: LD_INT 1
1109: PPUSH
1110: CALL 7070 0 2
1114: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1115: LD_ADDR_VAR 0 15
1119: PUSH
1120: LD_VAR 0 15
1124: PUSH
1125: LD_EXP 5
1129: ADD
1130: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1131: LD_STRING 04_Brown
1133: PUSH
1134: EMPTY
1135: LIST
1136: PPUSH
1137: CALL_OW 28
1141: PUSH
1142: LD_STRING BrownInDelta
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 30
1152: NOT
1153: AND
1154: PUSH
1155: LD_STRING 07_Brown
1157: PUSH
1158: EMPTY
1159: LIST
1160: PPUSH
1161: CALL_OW 28
1165: NOT
1166: AND
1167: PUSH
1168: LD_EXP 12
1172: PUSH
1173: LD_INT 2
1175: NONEQUAL
1176: AND
1177: IFFALSE 1213
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1179: LD_ADDR_EXP 2
1183: PUSH
1184: LD_STRING 04_Brown
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: CALL 7070 0 2
1194: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1195: LD_ADDR_VAR 0 15
1199: PUSH
1200: LD_VAR 0 15
1204: PUSH
1205: LD_EXP 2
1209: ADD
1210: ST_TO_ADDR
// end else
1211: GO 1275
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1213: LD_EXP 2
1217: NOT
1218: PUSH
1219: LD_STRING BrownIn07
1221: PPUSH
1222: LD_INT 0
1224: PPUSH
1225: CALL_OW 30
1229: NOT
1230: AND
1231: PUSH
1232: LD_EXP 12
1236: PUSH
1237: LD_INT 2
1239: NONEQUAL
1240: AND
1241: IFFALSE 1275
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1243: LD_ADDR_EXP 2
1247: PUSH
1248: LD_STRING 07_Brown
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL 7070 0 2
1258: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1259: LD_ADDR_VAR 0 15
1263: PUSH
1264: LD_VAR 0 15
1268: PUSH
1269: LD_EXP 2
1273: ADD
1274: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1275: LD_STRING 04_Donaldson
1277: PUSH
1278: EMPTY
1279: LIST
1280: PPUSH
1281: CALL_OW 28
1285: PUSH
1286: LD_STRING DonaldsonInDelta
1288: PPUSH
1289: LD_INT 0
1291: PPUSH
1292: CALL_OW 30
1296: NOT
1297: AND
1298: PUSH
1299: LD_STRING 07_Donaldson
1301: PUSH
1302: EMPTY
1303: LIST
1304: PPUSH
1305: CALL_OW 28
1309: NOT
1310: AND
1311: PUSH
1312: LD_EXP 12
1316: PUSH
1317: LD_INT 1
1319: NONEQUAL
1320: AND
1321: IFFALSE 1357
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1323: LD_ADDR_EXP 3
1327: PUSH
1328: LD_STRING 04_Donaldson
1330: PPUSH
1331: LD_INT 1
1333: PPUSH
1334: CALL 7070 0 2
1338: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1339: LD_ADDR_VAR 0 15
1343: PUSH
1344: LD_VAR 0 15
1348: PUSH
1349: LD_EXP 3
1353: ADD
1354: ST_TO_ADDR
// end else
1355: GO 1419
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1357: LD_EXP 3
1361: NOT
1362: PUSH
1363: LD_STRING DonaldsonIn07
1365: PPUSH
1366: LD_INT 0
1368: PPUSH
1369: CALL_OW 30
1373: NOT
1374: AND
1375: PUSH
1376: LD_EXP 12
1380: PUSH
1381: LD_INT 1
1383: NONEQUAL
1384: AND
1385: IFFALSE 1419
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1387: LD_ADDR_EXP 3
1391: PUSH
1392: LD_STRING 07_Donaldson
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL 7070 0 2
1402: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1403: LD_ADDR_VAR 0 15
1407: PUSH
1408: LD_VAR 0 15
1412: PUSH
1413: LD_EXP 3
1417: ADD
1418: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1419: LD_STRING KhatamIn07
1421: PPUSH
1422: LD_INT 0
1424: PPUSH
1425: CALL_OW 30
1429: NOT
1430: IFFALSE 1464
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING 07_Khatam
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 7070 0 2
1447: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1448: LD_ADDR_VAR 0 15
1452: PUSH
1453: LD_VAR 0 15
1457: PUSH
1458: LD_EXP 10
1462: ADD
1463: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1464: LD_ADDR_EXP 11
1468: PUSH
1469: LD_STRING 07_othersGamma
1471: PPUSH
1472: CALL_OW 31
1476: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1477: LD_ADDR_VAR 0 14
1481: PUSH
1482: LD_INT 8
1484: PUSH
1485: LD_EXP 11
1489: MINUS
1490: ST_TO_ADDR
// if tmp then
1491: LD_VAR 0 14
1495: IFFALSE 1548
// for i = 1 to tmp do
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_VAR 0 14
1511: PUSH
1512: FOR_TO
1513: IFFALSE 1546
// begin PrepareHuman ( false , 1 , 5 ) ;
1515: LD_INT 0
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: LD_INT 5
1523: PPUSH
1524: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1528: LD_ADDR_EXP 11
1532: PUSH
1533: LD_EXP 11
1537: PUSH
1538: CALL_OW 44
1542: ADD
1543: ST_TO_ADDR
// end ;
1544: GO 1512
1546: POP
1547: POP
// if HexInfo ( 61 , 29 ) = 0 then
1548: LD_INT 61
1550: PPUSH
1551: LD_INT 29
1553: PPUSH
1554: CALL_OW 428
1558: PUSH
1559: LD_INT 0
1561: EQUAL
1562: IFFALSE 1593
// begin bc_type := b_barracks ;
1564: LD_ADDR_OWVAR 42
1568: PUSH
1569: LD_INT 5
1571: ST_TO_ADDR
// bc_level := 6 ;
1572: LD_ADDR_OWVAR 43
1576: PUSH
1577: LD_INT 6
1579: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1580: LD_INT 61
1582: PPUSH
1583: LD_INT 29
1585: PPUSH
1586: LD_INT 5
1588: PPUSH
1589: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1593: LD_ADDR_VAR 0 13
1597: PUSH
1598: LD_INT 22
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: LD_INT 30
1610: PUSH
1611: LD_INT 31
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PPUSH
1622: CALL_OW 69
1626: ST_TO_ADDR
// for i in bun do
1627: LD_ADDR_VAR 0 2
1631: PUSH
1632: LD_VAR 0 13
1636: PUSH
1637: FOR_IN
1638: IFFALSE 1770
// begin x := GetX ( i ) ;
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: LD_VAR 0 2
1649: PPUSH
1650: CALL_OW 250
1654: ST_TO_ADDR
// y := GetY ( i ) ;
1655: LD_ADDR_VAR 0 4
1659: PUSH
1660: LD_VAR 0 2
1664: PPUSH
1665: CALL_OW 251
1669: ST_TO_ADDR
// d := GetDir ( i ) ;
1670: LD_ADDR_VAR 0 5
1674: PUSH
1675: LD_VAR 0 2
1679: PPUSH
1680: CALL_OW 254
1684: ST_TO_ADDR
// RemoveUnit ( i ) ;
1685: LD_VAR 0 2
1689: PPUSH
1690: CALL_OW 64
// bc_type := b_bunker ;
1694: LD_ADDR_OWVAR 42
1698: PUSH
1699: LD_INT 32
1701: ST_TO_ADDR
// bc_level := 6 ;
1702: LD_ADDR_OWVAR 43
1706: PUSH
1707: LD_INT 6
1709: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1710: LD_ADDR_VAR 0 6
1714: PUSH
1715: LD_VAR 0 3
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: LD_VAR 0 5
1729: PPUSH
1730: CALL_OW 47
1734: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1735: LD_VAR 0 6
1739: PPUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_VAR 0 2
1754: PUSH
1755: LD_INT 2
1757: MOD
1758: PUSH
1759: LD_INT 1
1761: PLUS
1762: ARRAY
1763: PPUSH
1764: CALL_OW 431
// end ;
1768: GO 1637
1770: POP
1771: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1772: LD_ADDR_VAR 0 9
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 30
1789: PUSH
1790: LD_INT 5
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PPUSH
1801: CALL_OW 69
1805: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1806: LD_ADDR_VAR 0 8
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 1
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 2
1823: PUSH
1824: LD_INT 30
1826: PUSH
1827: LD_INT 6
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 30
1836: PUSH
1837: LD_INT 7
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 30
1846: PUSH
1847: LD_INT 8
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1869: LD_ADDR_VAR 0 7
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 3
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1903: LD_ADDR_VAR 0 12
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 30
1920: PUSH
1921: LD_INT 36
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PPUSH
1932: CALL_OW 69
1936: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1937: LD_ADDR_VAR 0 13
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: LD_INT 30
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 30
1967: PUSH
1968: LD_INT 32
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PPUSH
1984: CALL_OW 69
1988: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_EXP 11
1998: PUSH
1999: LD_VAR 0 15
2003: ADD
2004: PUSH
2005: FOR_IN
2006: IFFALSE 2427
// begin placed := false ;
2008: LD_ADDR_VAR 0 11
2012: PUSH
2013: LD_INT 0
2015: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2016: LD_VAR 0 2
2020: PPUSH
2021: CALL_OW 257
2025: PUSH
2026: LD_INT 1
2028: EQUAL
2029: IFFALSE 2154
// begin if UnitFilter ( bun , [ f_empty ] ) then
2031: LD_VAR 0 13
2035: PPUSH
2036: LD_INT 58
2038: PUSH
2039: EMPTY
2040: LIST
2041: PPUSH
2042: CALL_OW 72
2046: IFFALSE 2085
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_VAR 0 13
2057: PPUSH
2058: LD_INT 58
2060: PUSH
2061: EMPTY
2062: LIST
2063: PPUSH
2064: CALL_OW 72
2068: PUSH
2069: LD_INT 1
2071: ARRAY
2072: PPUSH
2073: CALL_OW 52
// placed := true ;
2077: LD_ADDR_VAR 0 11
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// end ; if arm and not placed then
2085: LD_VAR 0 9
2089: PUSH
2090: LD_VAR 0 11
2094: NOT
2095: AND
2096: IFFALSE 2154
// begin for j in arm do
2098: LD_ADDR_VAR 0 10
2102: PUSH
2103: LD_VAR 0 9
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2152
// if UnitsInside ( j ) < 6 then
2111: LD_VAR 0 10
2115: PPUSH
2116: CALL_OW 313
2120: PUSH
2121: LD_INT 6
2123: LESS
2124: IFFALSE 2150
// begin PlaceHumanInUnit ( i , j ) ;
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_VAR 0 10
2135: PPUSH
2136: CALL_OW 52
// placed := true ;
2140: LD_ADDR_VAR 0 11
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// break ;
2148: GO 2152
// end ;
2150: GO 2108
2152: POP
2153: POP
// end ; end ; if GetClass ( i ) = 2 then
2154: LD_VAR 0 2
2158: PPUSH
2159: CALL_OW 257
2163: PUSH
2164: LD_INT 2
2166: EQUAL
2167: IFFALSE 2200
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 52
2176: PPUSH
2177: LD_INT 20
2179: PPUSH
2180: LD_INT 6
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 50
// placed := true ;
2190: LD_ADDR_VAR 0 11
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// continue ;
2198: GO 2005
// end ; if GetClass ( i ) = 3 then
2200: LD_VAR 0 2
2204: PPUSH
2205: CALL_OW 257
2209: PUSH
2210: LD_INT 3
2212: EQUAL
2213: IFFALSE 2317
// if fac then
2215: LD_VAR 0 7
2219: IFFALSE 2317
// begin if ct then
2221: LD_VAR 0 12
2225: IFFALSE 2253
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2227: LD_VAR 0 2
2231: PPUSH
2232: LD_VAR 0 12
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PPUSH
2241: CALL_OW 52
// placed := true ;
2245: LD_ADDR_VAR 0 11
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// end ; if placed then
2253: LD_VAR 0 11
2257: IFFALSE 2261
// continue ;
2259: GO 2005
// for j in fac do
2261: LD_ADDR_VAR 0 10
2265: PUSH
2266: LD_VAR 0 7
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 10
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 10
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 11
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; if GetClass ( i ) = 4 then
2317: LD_VAR 0 2
2321: PPUSH
2322: CALL_OW 257
2326: PUSH
2327: LD_INT 4
2329: EQUAL
2330: IFFALSE 2394
// if lab then
2332: LD_VAR 0 8
2336: IFFALSE 2394
// begin for j in lab do
2338: LD_ADDR_VAR 0 10
2342: PUSH
2343: LD_VAR 0 8
2347: PUSH
2348: FOR_IN
2349: IFFALSE 2392
// if UnitsInside ( j ) < 6 then
2351: LD_VAR 0 10
2355: PPUSH
2356: CALL_OW 313
2360: PUSH
2361: LD_INT 6
2363: LESS
2364: IFFALSE 2390
// begin PlaceHumanInUnit ( i , j ) ;
2366: LD_VAR 0 2
2370: PPUSH
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 52
// placed := true ;
2380: LD_ADDR_VAR 0 11
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// break ;
2388: GO 2392
// end ;
2390: GO 2348
2392: POP
2393: POP
// end ; if not placed then
2394: LD_VAR 0 11
2398: NOT
2399: IFFALSE 2425
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2401: LD_VAR 0 2
2405: PPUSH
2406: LD_INT 5
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: CALL_OW 49
// ComHold ( i ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 140
// end ; end ;
2425: GO 2005
2427: POP
2428: POP
// if ct then
2429: LD_VAR 0 12
2433: IFFALSE 2537
// if UnitsInside ( ct [ 1 ] ) then
2435: LD_VAR 0 12
2439: PUSH
2440: LD_INT 1
2442: ARRAY
2443: PPUSH
2444: CALL_OW 313
2448: IFFALSE 2537
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2450: LD_ADDR_VAR 0 2
2454: PUSH
2455: LD_INT 22
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 33
2467: PUSH
2468: LD_INT 2
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PPUSH
2479: CALL_OW 69
2483: PUSH
2484: FOR_IN
2485: IFFALSE 2535
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2487: LD_VAR 0 2
2491: PPUSH
2492: LD_VAR 0 12
2496: PUSH
2497: LD_INT 1
2499: ARRAY
2500: PPUSH
2501: CALL_OW 313
2505: PUSH
2506: LD_INT 1
2508: PPUSH
2509: LD_VAR 0 12
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PPUSH
2518: CALL_OW 313
2522: PPUSH
2523: CALL_OW 12
2527: ARRAY
2528: PPUSH
2529: CALL_OW 135
2533: GO 2484
2535: POP
2536: POP
// end ; end ;
2537: LD_VAR 0 1
2541: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2542: LD_INT 0
2544: PPUSH
2545: PPUSH
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2550: LD_INT 71
2552: PPUSH
2553: LD_INT 5
2555: PPUSH
2556: LD_INT 1
2558: PPUSH
2559: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2563: LD_ADDR_VAR 0 2
2567: PUSH
2568: LD_STRING GammaBase
2570: PPUSH
2571: EMPTY
2572: PPUSH
2573: CALL_OW 30
2577: ST_TO_ADDR
// if not blist then
2578: LD_VAR 0 2
2582: NOT
2583: IFFALSE 2623
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2585: LD_ADDR_VAR 0 2
2589: PUSH
2590: LD_INT 1
2592: PUSH
2593: LD_INT 52
2595: PUSH
2596: LD_INT 12
2598: PUSH
2599: LD_INT 3
2601: PUSH
2602: LD_INT 3
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: LD_INT 0
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: ST_TO_ADDR
// uc_side := 1 ;
2623: LD_ADDR_OWVAR 20
2627: PUSH
2628: LD_INT 1
2630: ST_TO_ADDR
// uc_nation := 1 ;
2631: LD_ADDR_OWVAR 21
2635: PUSH
2636: LD_INT 1
2638: ST_TO_ADDR
// bc_kind1 := - 1 ;
2639: LD_ADDR_OWVAR 44
2643: PUSH
2644: LD_INT 1
2646: NEG
2647: ST_TO_ADDR
// bc_kind2 := - 1 ;
2648: LD_ADDR_OWVAR 45
2652: PUSH
2653: LD_INT 1
2655: NEG
2656: ST_TO_ADDR
// for i in blist do
2657: LD_ADDR_VAR 0 3
2661: PUSH
2662: LD_VAR 0 2
2666: PUSH
2667: FOR_IN
2668: IFFALSE 2948
// begin bc_type := i [ 1 ] ;
2670: LD_ADDR_OWVAR 42
2674: PUSH
2675: LD_VAR 0 3
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2684: LD_ADDR_OWVAR 43
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_INT 5
2696: ARRAY
2697: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2698: LD_OWVAR 42
2702: PUSH
2703: LD_INT 6
2705: PUSH
2706: LD_INT 7
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: IN
2713: IFFALSE 2783
// begin bc_type := b_lab_half ;
2715: LD_ADDR_OWVAR 42
2719: PUSH
2720: LD_INT 7
2722: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2723: LD_STRING 06_remoteVehs_1
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 30
2733: IFFALSE 2783
// begin if i [ 7 ] > 9 then
2735: LD_VAR 0 3
2739: PUSH
2740: LD_INT 7
2742: ARRAY
2743: PUSH
2744: LD_INT 9
2746: GREATER
2747: IFFALSE 2775
// begin bc_type := b_lab_full ;
2749: LD_ADDR_OWVAR 42
2753: PUSH
2754: LD_INT 8
2756: ST_TO_ADDR
// bc_kind1 := 10 ;
2757: LD_ADDR_OWVAR 44
2761: PUSH
2762: LD_INT 10
2764: ST_TO_ADDR
// bc_kind2 := 15 ;
2765: LD_ADDR_OWVAR 45
2769: PUSH
2770: LD_INT 15
2772: ST_TO_ADDR
// end else
2773: GO 2783
// bc_kind1 := 15 ;
2775: LD_ADDR_OWVAR 44
2779: PUSH
2780: LD_INT 15
2782: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2783: LD_OWVAR 42
2787: PUSH
2788: LD_INT 2
2790: EQUAL
2791: IFFALSE 2801
// bc_type := b_factory ;
2793: LD_ADDR_OWVAR 42
2797: PUSH
2798: LD_INT 3
2800: ST_TO_ADDR
// if bc_type = b_depot then
2801: LD_OWVAR 42
2805: PUSH
2806: LD_INT 0
2808: EQUAL
2809: IFFALSE 2858
// begin bc_type := b_warehouse ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 1
2818: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2819: LD_ADDR_EXP 37
2823: PUSH
2824: LD_VAR 0 3
2828: PUSH
2829: LD_INT 2
2831: ARRAY
2832: PPUSH
2833: LD_VAR 0 3
2837: PUSH
2838: LD_INT 3
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 3
2846: PUSH
2847: LD_INT 4
2849: ARRAY
2850: PPUSH
2851: CALL_OW 47
2855: ST_TO_ADDR
// continue ;
2856: GO 2667
// end ; if bc_type = b_armoury then
2858: LD_OWVAR 42
2862: PUSH
2863: LD_INT 4
2865: EQUAL
2866: IFFALSE 2876
// bc_type = b_barracks ;
2868: LD_ADDR_OWVAR 42
2872: PUSH
2873: LD_INT 5
2875: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2876: LD_ADDR_VAR 0 4
2880: PUSH
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 2
2888: ARRAY
2889: PPUSH
2890: LD_VAR 0 3
2894: PUSH
2895: LD_INT 3
2897: ARRAY
2898: PPUSH
2899: LD_VAR 0 3
2903: PUSH
2904: LD_INT 4
2906: ARRAY
2907: PPUSH
2908: CALL_OW 47
2912: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2913: LD_VAR 0 4
2917: PPUSH
2918: CALL_OW 266
2922: PUSH
2923: LD_INT 32
2925: EQUAL
2926: IFFALSE 2946
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 7
2940: ARRAY
2941: PPUSH
2942: CALL_OW 431
// end ;
2946: GO 2667
2948: POP
2949: POP
// if not amDepot then
2950: LD_EXP 37
2954: NOT
2955: IFFALSE 2992
// begin bc_type := b_warehouse ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// bc_level := 6 ;
2965: LD_ADDR_OWVAR 43
2969: PUSH
2970: LD_INT 6
2972: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2973: LD_ADDR_EXP 37
2977: PUSH
2978: LD_INT 52
2980: PPUSH
2981: LD_INT 12
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: CALL_OW 47
2991: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
2992: LD_EXP 37
2996: PPUSH
2997: LD_STRING gamma
2999: PPUSH
3000: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3004: LD_EXP 37
3008: PPUSH
3009: CALL_OW 274
3013: PPUSH
3014: LD_INT 1
3016: PPUSH
3017: LD_INT 500
3019: PUSH
3020: LD_INT 420
3022: PUSH
3023: LD_INT 350
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: LD_OWVAR 67
3035: ARRAY
3036: PPUSH
3037: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3041: LD_EXP 37
3045: PPUSH
3046: CALL_OW 274
3050: PPUSH
3051: LD_INT 2
3053: PPUSH
3054: LD_INT 200
3056: PPUSH
3057: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3061: LD_INT 22
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: LD_INT 30
3073: PUSH
3074: LD_INT 3
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 69
3089: IFFALSE 3337
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 30
3108: PUSH
3109: LD_INT 3
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 69
3124: PUSH
3125: LD_INT 1
3127: ARRAY
3128: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3129: LD_ADDR_VAR 0 6
3133: PUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: CALL_OW 250
3143: PPUSH
3144: LD_VAR 0 4
3148: PPUSH
3149: CALL_OW 251
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 254
3163: PPUSH
3164: CALL 16885 0 3
3168: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_INT 19
3176: PUSH
3177: LD_INT 17
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3184: LD_STRING 06_remoteVehs_1
3186: PPUSH
3187: LD_INT 0
3189: PPUSH
3190: CALL_OW 30
3194: IFFALSE 3217
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3196: LD_ADDR_VAR 0 2
3200: PUSH
3201: LD_VAR 0 2
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_INT 22
3211: PPUSH
3212: CALL_OW 2
3216: ST_TO_ADDR
// for i in tmp do
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: LD_VAR 0 6
3226: PUSH
3227: FOR_IN
3228: IFFALSE 3335
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PPUSH
3239: LD_VAR 0 3
3243: PUSH
3244: LD_INT 2
3246: ARRAY
3247: PPUSH
3248: CALL_OW 428
3252: PUSH
3253: LD_INT 0
3255: EQUAL
3256: IFFALSE 3333
// begin bc_type := blist [ 1 ] ;
3258: LD_ADDR_OWVAR 42
3262: PUSH
3263: LD_VAR 0 2
3267: PUSH
3268: LD_INT 1
3270: ARRAY
3271: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3272: LD_VAR 0 3
3276: PUSH
3277: LD_INT 1
3279: ARRAY
3280: PPUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 2
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PUSH
3295: LD_INT 3
3297: ARRAY
3298: PPUSH
3299: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3303: LD_ADDR_VAR 0 2
3307: PUSH
3308: LD_VAR 0 2
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 3
3320: ST_TO_ADDR
// if blist = 0 then
3321: LD_VAR 0 2
3325: PUSH
3326: LD_INT 0
3328: EQUAL
3329: IFFALSE 3333
// break ;
3331: GO 3335
// end ;
3333: GO 3227
3335: POP
3336: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3337: LD_STRING 06_remoteVehs_1
3339: PPUSH
3340: LD_INT 0
3342: PPUSH
3343: CALL_OW 30
3347: IFFALSE 3806
// begin bc_type = 36 ;
3349: LD_ADDR_OWVAR 42
3353: PUSH
3354: LD_INT 36
3356: ST_TO_ADDR
// bc_level = 4 ;
3357: LD_ADDR_OWVAR 43
3361: PUSH
3362: LD_INT 4
3364: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3365: LD_EXP 37
3369: PPUSH
3370: LD_INT 36
3372: PPUSH
3373: LD_INT 62
3375: PPUSH
3376: LD_INT 12
3378: PPUSH
3379: LD_INT 3
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL 17755 0 6
3389: PUSH
3390: LD_INT 92
3392: PUSH
3393: LD_INT 62
3395: PUSH
3396: LD_INT 12
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PPUSH
3408: CALL_OW 69
3412: NOT
3413: AND
3414: IFFALSE 3431
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3416: LD_INT 62
3418: PPUSH
3419: LD_INT 12
3421: PPUSH
3422: LD_INT 3
3424: PPUSH
3425: CALL_OW 47
3429: GO 3602
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3431: LD_EXP 37
3435: PPUSH
3436: LD_INT 36
3438: PPUSH
3439: LD_INT 37
3441: PPUSH
3442: LD_INT 18
3444: PPUSH
3445: LD_INT 2
3447: PPUSH
3448: LD_INT 0
3450: PPUSH
3451: CALL 17755 0 6
3455: PUSH
3456: LD_INT 92
3458: PUSH
3459: LD_INT 37
3461: PUSH
3462: LD_INT 18
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 69
3478: NOT
3479: AND
3480: IFFALSE 3497
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3482: LD_INT 37
3484: PPUSH
3485: LD_INT 18
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 47
3495: GO 3602
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3497: LD_EXP 37
3501: PPUSH
3502: LD_INT 36
3504: PPUSH
3505: LD_INT 66
3507: PPUSH
3508: LD_INT 14
3510: PPUSH
3511: LD_INT 4
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: CALL 17755 0 6
3521: PUSH
3522: LD_INT 92
3524: PUSH
3525: LD_INT 66
3527: PUSH
3528: LD_INT 14
3530: PUSH
3531: LD_INT 3
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: PPUSH
3540: CALL_OW 69
3544: NOT
3545: AND
3546: IFFALSE 3563
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3548: LD_INT 66
3550: PPUSH
3551: LD_INT 14
3553: PPUSH
3554: LD_INT 4
3556: PPUSH
3557: CALL_OW 47
3561: GO 3602
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3563: LD_EXP 37
3567: PPUSH
3568: LD_INT 36
3570: PPUSH
3571: LD_INT 74
3573: PPUSH
3574: LD_INT 26
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL 17755 0 6
3587: IFFALSE 3602
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3589: LD_INT 74
3591: PPUSH
3592: LD_INT 26
3594: PPUSH
3595: LD_INT 4
3597: PPUSH
3598: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3602: LD_INT 22
3604: PUSH
3605: LD_INT 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 30
3614: PUSH
3615: LD_INT 36
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PPUSH
3626: CALL_OW 69
3630: NOT
3631: IFFALSE 3635
// exit ;
3633: GO 3806
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3635: LD_ADDR_VAR 0 3
3639: PUSH
3640: DOUBLE
3641: LD_INT 1
3643: DEC
3644: ST_TO_ADDR
3645: LD_INT 3
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 2
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: PUSH
3659: LD_OWVAR 67
3663: ARRAY
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3804
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3668: LD_ADDR_OWVAR 37
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 1
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 12
3696: ARRAY
3697: PUSH
3698: LD_INT 2
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: LD_OWVAR 67
3710: ARRAY
3711: ST_TO_ADDR
// vc_engine = 1 ;
3712: LD_ADDR_OWVAR 39
3716: PUSH
3717: LD_INT 1
3719: ST_TO_ADDR
// vc_control = 2 ;
3720: LD_ADDR_OWVAR 38
3724: PUSH
3725: LD_INT 2
3727: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3728: LD_ADDR_OWVAR 40
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 4
3738: PUSH
3739: LD_INT 5
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 12
3757: ARRAY
3758: ST_TO_ADDR
// veh = CreateVehicle ;
3759: LD_ADDR_VAR 0 5
3763: PUSH
3764: CALL_OW 45
3768: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3769: LD_VAR 0 5
3773: PPUSH
3774: LD_INT 4
3776: PPUSH
3777: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_INT 56
3788: PPUSH
3789: LD_INT 17
3791: PPUSH
3792: LD_INT 9
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: CALL_OW 50
// end ;
3802: GO 3665
3804: POP
3805: POP
// end ; end ;
3806: LD_VAR 0 1
3810: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3811: LD_INT 0
3813: PPUSH
3814: PPUSH
3815: PPUSH
3816: PPUSH
// uc_side = 1 ;
3817: LD_ADDR_OWVAR 20
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// uc_nation = 1 ;
3825: LD_ADDR_OWVAR 21
3829: PUSH
3830: LD_INT 1
3832: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3833: LD_ADDR_EXP 14
3837: PUSH
3838: LD_STRING 06c_Denis
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL 7070 0 2
3848: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3849: LD_EXP 14
3853: PPUSH
3854: LD_INT 4
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3864: LD_ADDR_EXP 15
3868: PUSH
3869: LD_STRING 06c_Joan
3871: PPUSH
3872: LD_INT 1
3874: PPUSH
3875: CALL 7070 0 2
3879: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3880: LD_EXP 15
3884: PPUSH
3885: LD_INT 4
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3895: LD_STRING GladstoneIn07
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 30
3905: NOT
3906: IFFALSE 3974
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3908: LD_ADDR_EXP 8
3912: PUSH
3913: LD_STRING 06c_Gladstone
3915: PPUSH
3916: LD_INT 1
3918: PPUSH
3919: CALL 7070 0 2
3923: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3924: LD_EXP 8
3928: NOT
3929: PUSH
3930: LD_STRING GladstoneStayInDelta
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 30
3940: AND
3941: IFFALSE 3959
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3943: LD_ADDR_EXP 8
3947: PUSH
3948: LD_STRING 05_Gladstone
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: CALL 7070 0 2
3958: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3959: LD_EXP 8
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3974: LD_STRING LisaStayInDelta
3976: PPUSH
3977: LD_INT 0
3979: PPUSH
3980: CALL_OW 30
3984: IFFALSE 4017
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3986: LD_ADDR_EXP 6
3990: PUSH
3991: LD_STRING 05_Lisa
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: CALL 7070 0 2
4001: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4002: LD_EXP 6
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_INT 0
4012: PPUSH
4013: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4017: LD_STRING BobbyStayInDelta
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: CALL_OW 30
4027: IFFALSE 4060
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4029: LD_ADDR_EXP 4
4033: PUSH
4034: LD_STRING 05_Bobby
4036: PPUSH
4037: LD_INT 1
4039: PPUSH
4040: CALL 7070 0 2
4044: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4045: LD_EXP 4
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 0
4055: PPUSH
4056: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4060: LD_STRING CyrusStayInDelta
4062: PPUSH
4063: LD_INT 0
4065: PPUSH
4066: CALL_OW 30
4070: IFFALSE 4103
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4072: LD_ADDR_EXP 5
4076: PUSH
4077: LD_STRING 05_Cyrus
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: CALL 7070 0 2
4087: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4088: LD_EXP 5
4092: PPUSH
4093: LD_INT 4
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4103: LD_STRING BrownStayInDelta
4105: PPUSH
4106: LD_INT 0
4108: PPUSH
4109: CALL_OW 30
4113: IFFALSE 4146
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4115: LD_ADDR_EXP 2
4119: PUSH
4120: LD_STRING 05_Brown
4122: PPUSH
4123: LD_INT 1
4125: PPUSH
4126: CALL 7070 0 2
4130: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: LD_INT 0
4141: PPUSH
4142: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4146: LD_STRING DonaldsonStayInDelta
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 30
4156: IFFALSE 4189
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4158: LD_ADDR_EXP 3
4162: PUSH
4163: LD_STRING 05_Donaldson
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: CALL 7070 0 2
4173: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4174: LD_EXP 3
4178: PPUSH
4179: LD_INT 4
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4189: LD_ADDR_VAR 0 4
4193: PUSH
4194: LD_STRING OthersStayInDelta
4196: PPUSH
4197: CALL_OW 31
4201: ST_TO_ADDR
// if other > 2 then
4202: LD_VAR 0 4
4206: PUSH
4207: LD_INT 2
4209: GREATER
4210: IFFALSE 4255
// begin for j = 1 to 2 do
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: DOUBLE
4218: LD_INT 1
4220: DEC
4221: ST_TO_ADDR
4222: LD_INT 2
4224: PUSH
4225: FOR_TO
4226: IFFALSE 4251
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4228: LD_VAR 0 4
4232: PUSH
4233: LD_VAR 0 3
4237: ARRAY
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
4249: GO 4225
4251: POP
4252: POP
// end else
4253: GO 4298
// begin for j = 1 to other do
4255: LD_ADDR_VAR 0 3
4259: PUSH
4260: DOUBLE
4261: LD_INT 1
4263: DEC
4264: ST_TO_ADDR
4265: LD_VAR 0 4
4269: PUSH
4270: FOR_TO
4271: IFFALSE 4296
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4273: LD_VAR 0 4
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PPUSH
4284: LD_INT 4
4286: PPUSH
4287: LD_INT 0
4289: PPUSH
4290: CALL_OW 49
4294: GO 4270
4296: POP
4297: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4298: LD_ADDR_VAR 0 4
4302: PUSH
4303: LD_STRING 06_other_apemans
4305: PPUSH
4306: CALL_OW 31
4310: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4311: LD_VAR 0 4
4315: PUSH
4316: LD_INT 5
4318: PUSH
4319: LD_INT 4
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_OWVAR 67
4334: ARRAY
4335: GREATEREQUAL
4336: IFFALSE 4365
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: LD_INT 5
4345: PUSH
4346: LD_INT 4
4348: PUSH
4349: LD_INT 3
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: LD_OWVAR 67
4361: ARRAY
4362: ST_TO_ADDR
4363: GO 4375
// j := other ;
4365: LD_ADDR_VAR 0 3
4369: PUSH
4370: LD_VAR 0 4
4374: ST_TO_ADDR
// for i = 1 to j do
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: DOUBLE
4381: LD_INT 1
4383: DEC
4384: ST_TO_ADDR
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4416
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4393: LD_VAR 0 4
4397: PUSH
4398: LD_VAR 0 2
4402: ARRAY
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
4414: GO 4390
4416: POP
4417: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4418: LD_INT 4
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 1
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 70
4449: PPUSH
4450: LD_INT 53
4452: PPUSH
4453: LD_INT 19
4455: PPUSH
4456: CALL_OW 111
// firstAttack = 1 ;
4460: LD_ADDR_EXP 33
4464: PUSH
4465: LD_INT 1
4467: ST_TO_ADDR
// end ;
4468: LD_VAR 0 1
4472: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4473: LD_INT 0
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4484: LD_ADDR_VAR 0 8
4488: PUSH
4489: LD_STRING 07_vehicles
4491: PPUSH
4492: EMPTY
4493: PPUSH
4494: CALL_OW 30
4498: ST_TO_ADDR
// macmilan_squad := [ ] ;
4499: LD_ADDR_EXP 42
4503: PUSH
4504: EMPTY
4505: ST_TO_ADDR
// tmp_vehs := [ ] ;
4506: LD_ADDR_VAR 0 7
4510: PUSH
4511: EMPTY
4512: ST_TO_ADDR
// uc_side := 1 ;
4513: LD_ADDR_OWVAR 20
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// uc_nation := 1 ;
4521: LD_ADDR_OWVAR 21
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if vehicles then
4529: LD_VAR 0 8
4533: IFFALSE 4692
// begin k := 1 ;
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: DOUBLE
4549: LD_INT 1
4551: DEC
4552: ST_TO_ADDR
4553: LD_VAR 0 8
4557: PUSH
4558: LD_INT 4
4560: DIV
4561: PUSH
4562: FOR_TO
4563: IFFALSE 4690
// begin vc_chassis = vehicles [ k ] ;
4565: LD_ADDR_OWVAR 37
4569: PUSH
4570: LD_VAR 0 8
4574: PUSH
4575: LD_VAR 0 3
4579: ARRAY
4580: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4581: LD_ADDR_OWVAR 39
4585: PUSH
4586: LD_VAR 0 8
4590: PUSH
4591: LD_VAR 0 3
4595: PUSH
4596: LD_INT 1
4598: PLUS
4599: ARRAY
4600: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4601: LD_ADDR_OWVAR 38
4605: PUSH
4606: LD_VAR 0 8
4610: PUSH
4611: LD_VAR 0 3
4615: PUSH
4616: LD_INT 2
4618: PLUS
4619: ARRAY
4620: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4621: LD_ADDR_OWVAR 40
4625: PUSH
4626: LD_VAR 0 8
4630: PUSH
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 3
4638: PLUS
4639: ARRAY
4640: ST_TO_ADDR
// k := k + 4 ;
4641: LD_ADDR_VAR 0 3
4645: PUSH
4646: LD_VAR 0 3
4650: PUSH
4651: LD_INT 4
4653: PLUS
4654: ST_TO_ADDR
// veh := CreateVehicle ;
4655: LD_ADDR_VAR 0 9
4659: PUSH
4660: CALL_OW 45
4664: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4665: LD_ADDR_VAR 0 7
4669: PUSH
4670: LD_VAR 0 7
4674: PPUSH
4675: LD_INT 1
4677: PPUSH
4678: LD_VAR 0 9
4682: PPUSH
4683: CALL_OW 2
4687: ST_TO_ADDR
// end ;
4688: GO 4562
4690: POP
4691: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4692: LD_ADDR_EXP 1
4696: PUSH
4697: LD_EXP 44
4701: PUSH
4702: LD_STRING JMM
4704: STR
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: CALL 7070 0 2
4713: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4714: LD_EXP 12
4718: PUSH
4719: LD_INT 1
4721: EQUAL
4722: PUSH
4723: LD_EXP 12
4727: PUSH
4728: LD_INT 3
4730: EQUAL
4731: OR
4732: PUSH
4733: LD_EXP 2
4737: NOT
4738: AND
4739: IFFALSE 4792
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4741: LD_ADDR_EXP 2
4745: PUSH
4746: LD_EXP 44
4750: PUSH
4751: LD_STRING Brown
4753: STR
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: CALL 7070 0 2
4762: ST_TO_ADDR
// if Brown then
4763: LD_EXP 2
4767: IFFALSE 4792
// tmp := Insert ( tmp , 1 , Brown ) ;
4769: LD_ADDR_VAR 0 6
4773: PUSH
4774: LD_VAR 0 6
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: LD_EXP 2
4786: PPUSH
4787: CALL_OW 2
4791: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4792: LD_EXP 12
4796: PUSH
4797: LD_INT 2
4799: EQUAL
4800: PUSH
4801: LD_EXP 12
4805: PUSH
4806: LD_INT 3
4808: EQUAL
4809: OR
4810: PUSH
4811: LD_EXP 3
4815: NOT
4816: AND
4817: IFFALSE 4870
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4819: LD_ADDR_EXP 3
4823: PUSH
4824: LD_EXP 44
4828: PUSH
4829: LD_STRING Donaldson
4831: STR
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL 7070 0 2
4840: ST_TO_ADDR
// if Donaldson then
4841: LD_EXP 3
4845: IFFALSE 4870
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4847: LD_ADDR_VAR 0 6
4851: PUSH
4852: LD_VAR 0 6
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: LD_EXP 3
4864: PPUSH
4865: CALL_OW 2
4869: ST_TO_ADDR
// end ; if not Bobby then
4870: LD_EXP 4
4874: NOT
4875: IFFALSE 4928
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4877: LD_ADDR_EXP 4
4881: PUSH
4882: LD_EXP 44
4886: PUSH
4887: LD_STRING Bobby
4889: STR
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: CALL 7070 0 2
4898: ST_TO_ADDR
// if Bobby then
4899: LD_EXP 4
4903: IFFALSE 4928
// tmp := Insert ( tmp , 1 , Bobby ) ;
4905: LD_ADDR_VAR 0 6
4909: PUSH
4910: LD_VAR 0 6
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: LD_EXP 4
4922: PPUSH
4923: CALL_OW 2
4927: ST_TO_ADDR
// end ; if not Cyrus then
4928: LD_EXP 5
4932: NOT
4933: IFFALSE 4986
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4935: LD_ADDR_EXP 5
4939: PUSH
4940: LD_EXP 44
4944: PUSH
4945: LD_STRING Cyrus
4947: STR
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL 7070 0 2
4956: ST_TO_ADDR
// if Cyrus then
4957: LD_EXP 5
4961: IFFALSE 4986
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4963: LD_ADDR_VAR 0 6
4967: PUSH
4968: LD_VAR 0 6
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: LD_EXP 5
4980: PPUSH
4981: CALL_OW 2
4985: ST_TO_ADDR
// end ; if not Lisa then
4986: LD_EXP 6
4990: NOT
4991: IFFALSE 5044
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4993: LD_ADDR_EXP 6
4997: PUSH
4998: LD_EXP 44
5002: PUSH
5003: LD_STRING Lisa
5005: STR
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL 7070 0 2
5014: ST_TO_ADDR
// if Lisa then
5015: LD_EXP 6
5019: IFFALSE 5044
// tmp := Insert ( tmp , 1 , Lisa ) ;
5021: LD_ADDR_VAR 0 6
5025: PUSH
5026: LD_VAR 0 6
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_EXP 6
5038: PPUSH
5039: CALL_OW 2
5043: ST_TO_ADDR
// end ; if not Frank then
5044: LD_EXP 7
5048: NOT
5049: IFFALSE 5102
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5051: LD_ADDR_EXP 7
5055: PUSH
5056: LD_EXP 44
5060: PUSH
5061: LD_STRING Frank
5063: STR
5064: PPUSH
5065: LD_INT 1
5067: PPUSH
5068: CALL 7070 0 2
5072: ST_TO_ADDR
// if Frank then
5073: LD_EXP 7
5077: IFFALSE 5102
// tmp := Insert ( tmp , 1 , Frank ) ;
5079: LD_ADDR_VAR 0 6
5083: PUSH
5084: LD_VAR 0 6
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_EXP 7
5096: PPUSH
5097: CALL_OW 2
5101: ST_TO_ADDR
// end ; if not Kikuchi then
5102: LD_EXP 9
5106: NOT
5107: IFFALSE 5160
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5109: LD_ADDR_EXP 9
5113: PUSH
5114: LD_EXP 44
5118: PUSH
5119: LD_STRING Kikuchi
5121: STR
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: CALL 7070 0 2
5130: ST_TO_ADDR
// if Kikuchi then
5131: LD_EXP 9
5135: IFFALSE 5160
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5137: LD_ADDR_VAR 0 6
5141: PUSH
5142: LD_VAR 0 6
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: LD_EXP 9
5154: PPUSH
5155: CALL_OW 2
5159: ST_TO_ADDR
// end ; if not Gladstone then
5160: LD_EXP 8
5164: NOT
5165: IFFALSE 5218
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5167: LD_ADDR_EXP 8
5171: PUSH
5172: LD_EXP 44
5176: PUSH
5177: LD_STRING Gladstone
5179: STR
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL 7070 0 2
5188: ST_TO_ADDR
// if Gladstone then
5189: LD_EXP 8
5193: IFFALSE 5218
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5195: LD_ADDR_VAR 0 6
5199: PUSH
5200: LD_VAR 0 6
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: LD_EXP 8
5212: PPUSH
5213: CALL_OW 2
5217: ST_TO_ADDR
// end ; if not Khatam then
5218: LD_EXP 10
5222: NOT
5223: IFFALSE 5276
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5225: LD_ADDR_EXP 10
5229: PUSH
5230: LD_EXP 44
5234: PUSH
5235: LD_STRING Khatam
5237: STR
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: CALL 7070 0 2
5246: ST_TO_ADDR
// if Khatam then
5247: LD_EXP 10
5251: IFFALSE 5276
// tmp := Insert ( tmp , 1 , Khatam ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 6
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: LD_EXP 10
5270: PPUSH
5271: CALL_OW 2
5275: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5276: LD_ADDR_VAR 0 5
5280: PUSH
5281: LD_STRING 07c_others
5283: PPUSH
5284: CALL_OW 31
5288: ST_TO_ADDR
// macmilan_squad := others ;
5289: LD_ADDR_EXP 42
5293: PUSH
5294: LD_VAR 0 5
5298: ST_TO_ADDR
// if others then
5299: LD_VAR 0 5
5303: IFFALSE 5391
// for i in others do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: LD_VAR 0 5
5314: PUSH
5315: FOR_IN
5316: IFFALSE 5389
// if GetClass ( i ) = 3 then
5318: LD_VAR 0 2
5322: PPUSH
5323: CALL_OW 257
5327: PUSH
5328: LD_INT 3
5330: EQUAL
5331: IFFALSE 5358
// tmp := Insert ( tmp , 1 , i ) else
5333: LD_ADDR_VAR 0 6
5337: PUSH
5338: LD_VAR 0 6
5342: PPUSH
5343: LD_INT 1
5345: PPUSH
5346: LD_VAR 0 2
5350: PPUSH
5351: CALL_OW 2
5355: ST_TO_ADDR
5356: GO 5387
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5358: LD_ADDR_VAR 0 6
5362: PUSH
5363: LD_VAR 0 6
5367: PPUSH
5368: LD_VAR 0 6
5372: PUSH
5373: LD_INT 1
5375: PLUS
5376: PPUSH
5377: LD_VAR 0 2
5381: PPUSH
5382: CALL_OW 2
5386: ST_TO_ADDR
5387: GO 5315
5389: POP
5390: POP
// wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// for i in tmp do
5398: LD_ADDR_VAR 0 2
5402: PUSH
5403: LD_VAR 0 6
5407: PUSH
5408: FOR_IN
5409: IFFALSE 5561
// begin SetDir ( i , 3 ) ;
5411: LD_VAR 0 2
5415: PPUSH
5416: LD_INT 3
5418: PPUSH
5419: CALL_OW 233
// if tmp_vehs then
5423: LD_VAR 0 7
5427: IFFALSE 5502
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5429: LD_VAR 0 7
5433: PUSH
5434: LD_INT 1
5436: ARRAY
5437: PPUSH
5438: LD_INT 3
5440: PPUSH
5441: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_INT 4
5456: PPUSH
5457: LD_INT 0
5459: PPUSH
5460: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5464: LD_VAR 0 2
5468: PPUSH
5469: LD_VAR 0 7
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5482: LD_ADDR_VAR 0 7
5486: PUSH
5487: LD_VAR 0 7
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: CALL_OW 3
5499: ST_TO_ADDR
// end else
5500: GO 5517
// PlaceUnitArea ( i , GammaSupport , false ) ;
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 4
5509: PPUSH
5510: LD_INT 0
5512: PPUSH
5513: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_INT 77
5524: PPUSH
5525: LD_INT 16
5527: PPUSH
5528: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5532: LD_INT 35
5534: PPUSH
5535: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5539: LD_INT 4
5541: PPUSH
5542: LD_INT 22
5544: PUSH
5545: LD_INT 1
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 70
5556: NOT
5557: IFFALSE 5532
// end ;
5559: GO 5408
5561: POP
5562: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_INT 4
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5578: LD_EXP 1
5582: PPUSH
5583: LD_INT 77
5585: PPUSH
5586: LD_INT 16
5588: PPUSH
5589: CALL_OW 111
// end ;
5593: LD_VAR 0 1
5597: RET
// export function PrepareSikorsky ; begin
5598: LD_INT 0
5600: PPUSH
// uc_side = 4 ;
5601: LD_ADDR_OWVAR 20
5605: PUSH
5606: LD_INT 4
5608: ST_TO_ADDR
// uc_nation = 1 ;
5609: LD_ADDR_OWVAR 21
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5617: LD_ADDR_EXP 16
5621: PUSH
5622: LD_STRING Sikorski
5624: PPUSH
5625: LD_INT 0
5627: PPUSH
5628: CALL 7070 0 2
5632: ST_TO_ADDR
// vc_engine = 1 ;
5633: LD_ADDR_OWVAR 39
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// vc_control = 1 ;
5641: LD_ADDR_OWVAR 38
5645: PUSH
5646: LD_INT 1
5648: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5649: LD_ADDR_OWVAR 40
5653: PUSH
5654: LD_INT 5
5656: PUSH
5657: LD_INT 3
5659: PUSH
5660: LD_INT 4
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: LIST
5667: PUSH
5668: LD_OWVAR 67
5672: ARRAY
5673: ST_TO_ADDR
// vc_chassis = 4 ;
5674: LD_ADDR_OWVAR 37
5678: PUSH
5679: LD_INT 4
5681: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5682: LD_ADDR_EXP 17
5686: PUSH
5687: CALL_OW 45
5691: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5692: LD_EXP 17
5696: PPUSH
5697: LD_INT 3
5699: PPUSH
5700: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5704: LD_INT 35
5706: PPUSH
5707: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5711: LD_EXP 17
5715: PPUSH
5716: LD_INT 18
5718: PPUSH
5719: LD_INT 5
5721: PPUSH
5722: LD_INT 0
5724: PPUSH
5725: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5729: LD_EXP 17
5733: PPUSH
5734: CALL_OW 305
5738: IFFALSE 5704
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5740: LD_EXP 16
5744: PPUSH
5745: LD_EXP 17
5749: PPUSH
5750: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5754: LD_EXP 17
5758: PPUSH
5759: LD_INT 5
5761: PPUSH
5762: CALL_OW 113
// end ;
5766: LD_VAR 0 1
5770: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
// InitHc ;
5777: CALL_OW 19
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5781: LD_ADDR_VAR 0 2
5785: PUSH
5786: DOUBLE
5787: LD_INT 1
5789: DEC
5790: ST_TO_ADDR
5791: LD_INT 8
5793: PUSH
5794: LD_INT 7
5796: PUSH
5797: LD_INT 7
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: PUSH
5805: LD_OWVAR 67
5809: ARRAY
5810: PUSH
5811: FOR_TO
5812: IFFALSE 5928
// begin uc_side = 4 ;
5814: LD_ADDR_OWVAR 20
5818: PUSH
5819: LD_INT 4
5821: ST_TO_ADDR
// uc_nation = 1 ;
5822: LD_ADDR_OWVAR 21
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// hc_name =  ;
5830: LD_ADDR_OWVAR 26
5834: PUSH
5835: LD_STRING 
5837: ST_TO_ADDR
// hc_gallery =  ;
5838: LD_ADDR_OWVAR 33
5842: PUSH
5843: LD_STRING 
5845: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5846: LD_INT 0
5848: PPUSH
5849: LD_INT 1
5851: PPUSH
5852: LD_INT 5
5854: PPUSH
5855: LD_INT 8
5857: PPUSH
5858: CALL_OW 12
5862: PPUSH
5863: CALL_OW 380
// un = CreateHuman ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: CALL_OW 44
5876: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5877: LD_VAR 0 3
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5889: LD_VAR 0 3
5893: PPUSH
5894: LD_INT 9
5896: PPUSH
5897: LD_INT 0
5899: PPUSH
5900: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5904: LD_VAR 0 3
5908: PPUSH
5909: LD_INT 53
5911: PPUSH
5912: LD_INT 23
5914: PPUSH
5915: CALL_OW 111
// wait ( 0 0$1 ) ;
5919: LD_INT 35
5921: PPUSH
5922: CALL_OW 67
// end ;
5926: GO 5811
5928: POP
5929: POP
// for i = 1 to 3 do
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_INT 3
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6060
// begin uc_side = 4 ;
5946: LD_ADDR_OWVAR 20
5950: PUSH
5951: LD_INT 4
5953: ST_TO_ADDR
// uc_nation = 1 ;
5954: LD_ADDR_OWVAR 21
5958: PUSH
5959: LD_INT 1
5961: ST_TO_ADDR
// hc_name =  ;
5962: LD_ADDR_OWVAR 26
5966: PUSH
5967: LD_STRING 
5969: ST_TO_ADDR
// hc_gallery =  ;
5970: LD_ADDR_OWVAR 33
5974: PUSH
5975: LD_STRING 
5977: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5978: LD_INT 0
5980: PPUSH
5981: LD_INT 4
5983: PPUSH
5984: LD_INT 5
5986: PPUSH
5987: LD_INT 8
5989: PPUSH
5990: CALL_OW 12
5994: PPUSH
5995: CALL_OW 380
// un = CreateHuman ;
5999: LD_ADDR_VAR 0 3
6003: PUSH
6004: CALL_OW 44
6008: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6009: LD_VAR 0 3
6013: PPUSH
6014: LD_INT 3
6016: PPUSH
6017: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6021: LD_VAR 0 3
6025: PPUSH
6026: LD_INT 9
6028: PPUSH
6029: LD_INT 0
6031: PPUSH
6032: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 53
6043: PPUSH
6044: LD_INT 23
6046: PPUSH
6047: CALL_OW 111
// wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// end ;
6058: GO 5943
6060: POP
6061: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6062: LD_ADDR_VAR 0 2
6066: PUSH
6067: DOUBLE
6068: LD_INT 1
6070: DEC
6071: ST_TO_ADDR
6072: LD_INT 9
6074: PUSH
6075: LD_INT 8
6077: PUSH
6078: LD_INT 7
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_OWVAR 67
6090: ARRAY
6091: PUSH
6092: FOR_TO
6093: IFFALSE 6327
// begin uc_side = 4 ;
6095: LD_ADDR_OWVAR 20
6099: PUSH
6100: LD_INT 4
6102: ST_TO_ADDR
// uc_nation = 1 ;
6103: LD_ADDR_OWVAR 21
6107: PUSH
6108: LD_INT 1
6110: ST_TO_ADDR
// vc_engine = 1 ;
6111: LD_ADDR_OWVAR 39
6115: PUSH
6116: LD_INT 1
6118: ST_TO_ADDR
// vc_control = 1 ;
6119: LD_ADDR_OWVAR 38
6123: PUSH
6124: LD_INT 1
6126: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6127: LD_ADDR_OWVAR 40
6131: PUSH
6132: LD_INT 7
6134: PUSH
6135: LD_INT 4
6137: PUSH
6138: LD_INT 5
6140: PUSH
6141: LD_INT 6
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: PUSH
6150: LD_VAR 0 2
6154: PUSH
6155: LD_INT 4
6157: MOD
6158: PUSH
6159: LD_INT 1
6161: PLUS
6162: ARRAY
6163: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6164: LD_ADDR_OWVAR 37
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 4
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: PUSH
6187: LD_VAR 0 2
6191: PUSH
6192: LD_INT 4
6194: MOD
6195: PUSH
6196: LD_INT 1
6198: PLUS
6199: ARRAY
6200: ST_TO_ADDR
// veh = CreateVehicle ;
6201: LD_ADDR_VAR 0 4
6205: PUSH
6206: CALL_OW 45
6210: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6211: LD_VAR 0 4
6215: PPUSH
6216: LD_INT 3
6218: PPUSH
6219: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6223: LD_VAR 0 4
6227: PPUSH
6228: LD_INT 9
6230: PPUSH
6231: LD_INT 0
6233: PPUSH
6234: CALL_OW 49
// InitHc ;
6238: CALL_OW 19
// hc_name =  ;
6242: LD_ADDR_OWVAR 26
6246: PUSH
6247: LD_STRING 
6249: ST_TO_ADDR
// hc_gallery =  ;
6250: LD_ADDR_OWVAR 33
6254: PUSH
6255: LD_STRING 
6257: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6258: LD_INT 0
6260: PPUSH
6261: LD_INT 3
6263: PPUSH
6264: LD_INT 5
6266: PPUSH
6267: LD_INT 8
6269: PPUSH
6270: CALL_OW 12
6274: PPUSH
6275: CALL_OW 380
// un = CreateHuman ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: CALL_OW 44
6288: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6289: LD_VAR 0 3
6293: PPUSH
6294: LD_VAR 0 4
6298: PPUSH
6299: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6303: LD_VAR 0 3
6307: PPUSH
6308: LD_INT 53
6310: PPUSH
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 111
// wait ( 0 0$5 ) ;
6318: LD_INT 175
6320: PPUSH
6321: CALL_OW 67
// end ;
6325: GO 6092
6327: POP
6328: POP
// end ; end_of_file
6329: LD_VAR 0 1
6333: RET
// export function PrepareRussianCommander ; begin
6334: LD_INT 0
6336: PPUSH
// uc_side = 3 ;
6337: LD_ADDR_OWVAR 20
6341: PUSH
6342: LD_INT 3
6344: ST_TO_ADDR
// uc_nation = 3 ;
6345: LD_ADDR_OWVAR 21
6349: PUSH
6350: LD_INT 3
6352: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6353: LD_ADDR_EXP 24
6357: PUSH
6358: LD_STRING Borodin
6360: PPUSH
6361: CALL_OW 25
6365: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6366: LD_EXP 24
6370: PPUSH
6371: LD_INT 25
6373: PPUSH
6374: LD_INT 0
6376: PPUSH
6377: CALL_OW 49
// end ;
6381: LD_VAR 0 1
6385: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6386: LD_INT 0
6388: PPUSH
6389: PPUSH
6390: PPUSH
6391: PPUSH
// for i = 1 to 10 do
6392: LD_ADDR_VAR 0 2
6396: PUSH
6397: DOUBLE
6398: LD_INT 1
6400: DEC
6401: ST_TO_ADDR
6402: LD_INT 10
6404: PUSH
6405: FOR_TO
6406: IFFALSE 6480
// begin uc_side = 6 ;
6408: LD_ADDR_OWVAR 20
6412: PUSH
6413: LD_INT 6
6415: ST_TO_ADDR
// uc_nation = 3 ;
6416: LD_ADDR_OWVAR 21
6420: PUSH
6421: LD_INT 3
6423: ST_TO_ADDR
// hc_gallery =  ;
6424: LD_ADDR_OWVAR 33
6428: PUSH
6429: LD_STRING 
6431: ST_TO_ADDR
// hc_name =  ;
6432: LD_ADDR_OWVAR 26
6436: PUSH
6437: LD_STRING 
6439: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6440: LD_INT 0
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: LD_INT 3
6448: PPUSH
6449: CALL_OW 380
// un = CreateHuman ;
6453: LD_ADDR_VAR 0 3
6457: PUSH
6458: CALL_OW 44
6462: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6463: LD_VAR 0 3
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: CALL_OW 49
// end ;
6478: GO 6405
6480: POP
6481: POP
// for i = 1 to 3 do
6482: LD_ADDR_VAR 0 2
6486: PUSH
6487: DOUBLE
6488: LD_INT 1
6490: DEC
6491: ST_TO_ADDR
6492: LD_INT 3
6494: PUSH
6495: FOR_TO
6496: IFFALSE 6645
// begin uc_side = 6 ;
6498: LD_ADDR_OWVAR 20
6502: PUSH
6503: LD_INT 6
6505: ST_TO_ADDR
// uc_nation = 3 ;
6506: LD_ADDR_OWVAR 21
6510: PUSH
6511: LD_INT 3
6513: ST_TO_ADDR
// vc_engine = 1 ;
6514: LD_ADDR_OWVAR 39
6518: PUSH
6519: LD_INT 1
6521: ST_TO_ADDR
// vc_control = 1 ;
6522: LD_ADDR_OWVAR 38
6526: PUSH
6527: LD_INT 1
6529: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6530: LD_ADDR_OWVAR 40
6534: PUSH
6535: LD_INT 43
6537: PUSH
6538: LD_INT 44
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 1
6547: PPUSH
6548: LD_INT 2
6550: PPUSH
6551: CALL_OW 12
6555: ARRAY
6556: ST_TO_ADDR
// vc_chassis = 22 ;
6557: LD_ADDR_OWVAR 37
6561: PUSH
6562: LD_INT 22
6564: ST_TO_ADDR
// veh = CreateVehicle ;
6565: LD_ADDR_VAR 0 4
6569: PUSH
6570: CALL_OW 45
6574: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6575: LD_VAR 0 4
6579: PPUSH
6580: LD_INT 2
6582: PPUSH
6583: LD_INT 0
6585: PPUSH
6586: CALL_OW 49
// hc_gallery =  ;
6590: LD_ADDR_OWVAR 33
6594: PUSH
6595: LD_STRING 
6597: ST_TO_ADDR
// hc_name =  ;
6598: LD_ADDR_OWVAR 26
6602: PUSH
6603: LD_STRING 
6605: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6606: LD_INT 0
6608: PPUSH
6609: LD_INT 3
6611: PPUSH
6612: LD_INT 4
6614: PPUSH
6615: CALL_OW 380
// un = CreateHuman ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: CALL_OW 44
6628: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6629: LD_VAR 0 3
6633: PPUSH
6634: LD_VAR 0 4
6638: PPUSH
6639: CALL_OW 52
// end ;
6643: GO 6495
6645: POP
6646: POP
// end ;
6647: LD_VAR 0 1
6651: RET
// export function PrepareRussians ; var i , un ; begin
6652: LD_INT 0
6654: PPUSH
6655: PPUSH
6656: PPUSH
// for i = 1 to 8 do
6657: LD_ADDR_VAR 0 2
6661: PUSH
6662: DOUBLE
6663: LD_INT 1
6665: DEC
6666: ST_TO_ADDR
6667: LD_INT 8
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6757
// begin uc_side = 3 ;
6673: LD_ADDR_OWVAR 20
6677: PUSH
6678: LD_INT 3
6680: ST_TO_ADDR
// uc_nation = 3 ;
6681: LD_ADDR_OWVAR 21
6685: PUSH
6686: LD_INT 3
6688: ST_TO_ADDR
// hc_gallery =  ;
6689: LD_ADDR_OWVAR 33
6693: PUSH
6694: LD_STRING 
6696: ST_TO_ADDR
// hc_name =  ;
6697: LD_ADDR_OWVAR 26
6701: PUSH
6702: LD_STRING 
6704: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6705: LD_INT 0
6707: PPUSH
6708: LD_INT 1
6710: PPUSH
6711: LD_EXP 25
6715: PPUSH
6716: LD_EXP 26
6720: PPUSH
6721: CALL_OW 12
6725: PPUSH
6726: CALL_OW 380
// un = CreateHuman ;
6730: LD_ADDR_VAR 0 3
6734: PUSH
6735: CALL_OW 44
6739: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6740: LD_VAR 0 3
6744: PPUSH
6745: LD_INT 3
6747: PPUSH
6748: LD_INT 0
6750: PPUSH
6751: CALL_OW 49
// end ;
6755: GO 6670
6757: POP
6758: POP
// for i = 1 to 4 do
6759: LD_ADDR_VAR 0 2
6763: PUSH
6764: DOUBLE
6765: LD_INT 1
6767: DEC
6768: ST_TO_ADDR
6769: LD_INT 4
6771: PUSH
6772: FOR_TO
6773: IFFALSE 6859
// begin uc_side = 3 ;
6775: LD_ADDR_OWVAR 20
6779: PUSH
6780: LD_INT 3
6782: ST_TO_ADDR
// uc_nation = 3 ;
6783: LD_ADDR_OWVAR 21
6787: PUSH
6788: LD_INT 3
6790: ST_TO_ADDR
// hc_gallery =  ;
6791: LD_ADDR_OWVAR 33
6795: PUSH
6796: LD_STRING 
6798: ST_TO_ADDR
// hc_name =  ;
6799: LD_ADDR_OWVAR 26
6803: PUSH
6804: LD_STRING 
6806: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6807: LD_INT 0
6809: PPUSH
6810: LD_INT 2
6812: PPUSH
6813: LD_EXP 25
6817: PPUSH
6818: LD_EXP 26
6822: PPUSH
6823: CALL_OW 12
6827: PPUSH
6828: CALL_OW 380
// un = CreateHuman ;
6832: LD_ADDR_VAR 0 3
6836: PUSH
6837: CALL_OW 44
6841: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6842: LD_VAR 0 3
6846: PPUSH
6847: LD_INT 3
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: CALL_OW 49
// end ;
6857: GO 6772
6859: POP
6860: POP
// for i = 1 to 3 do
6861: LD_ADDR_VAR 0 2
6865: PUSH
6866: DOUBLE
6867: LD_INT 1
6869: DEC
6870: ST_TO_ADDR
6871: LD_INT 3
6873: PUSH
6874: FOR_TO
6875: IFFALSE 6961
// begin uc_side = 3 ;
6877: LD_ADDR_OWVAR 20
6881: PUSH
6882: LD_INT 3
6884: ST_TO_ADDR
// uc_nation = 3 ;
6885: LD_ADDR_OWVAR 21
6889: PUSH
6890: LD_INT 3
6892: ST_TO_ADDR
// hc_gallery =  ;
6893: LD_ADDR_OWVAR 33
6897: PUSH
6898: LD_STRING 
6900: ST_TO_ADDR
// hc_name =  ;
6901: LD_ADDR_OWVAR 26
6905: PUSH
6906: LD_STRING 
6908: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6909: LD_INT 0
6911: PPUSH
6912: LD_INT 3
6914: PPUSH
6915: LD_EXP 25
6919: PPUSH
6920: LD_EXP 26
6924: PPUSH
6925: CALL_OW 12
6929: PPUSH
6930: CALL_OW 380
// un = CreateHuman ;
6934: LD_ADDR_VAR 0 3
6938: PUSH
6939: CALL_OW 44
6943: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6944: LD_VAR 0 3
6948: PPUSH
6949: LD_INT 3
6951: PPUSH
6952: LD_INT 0
6954: PPUSH
6955: CALL_OW 49
// end ;
6959: GO 6874
6961: POP
6962: POP
// for i = 1 to 2 do
6963: LD_ADDR_VAR 0 2
6967: PUSH
6968: DOUBLE
6969: LD_INT 1
6971: DEC
6972: ST_TO_ADDR
6973: LD_INT 2
6975: PUSH
6976: FOR_TO
6977: IFFALSE 7063
// begin uc_side = 3 ;
6979: LD_ADDR_OWVAR 20
6983: PUSH
6984: LD_INT 3
6986: ST_TO_ADDR
// uc_nation = 3 ;
6987: LD_ADDR_OWVAR 21
6991: PUSH
6992: LD_INT 3
6994: ST_TO_ADDR
// hc_gallery =  ;
6995: LD_ADDR_OWVAR 33
6999: PUSH
7000: LD_STRING 
7002: ST_TO_ADDR
// hc_name =  ;
7003: LD_ADDR_OWVAR 26
7007: PUSH
7008: LD_STRING 
7010: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7011: LD_INT 0
7013: PPUSH
7014: LD_INT 4
7016: PPUSH
7017: LD_EXP 25
7021: PPUSH
7022: LD_EXP 26
7026: PPUSH
7027: CALL_OW 12
7031: PPUSH
7032: CALL_OW 380
// un = CreateHuman ;
7036: LD_ADDR_VAR 0 3
7040: PUSH
7041: CALL_OW 44
7045: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7046: LD_VAR 0 3
7050: PPUSH
7051: LD_INT 3
7053: PPUSH
7054: LD_INT 0
7056: PPUSH
7057: CALL_OW 49
// end ;
7061: GO 6976
7063: POP
7064: POP
// end ; end_of_file
7065: LD_VAR 0 1
7069: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
// if exist_mode then
7074: LD_VAR 0 2
7078: IFFALSE 7097
// unit := CreateCharacter ( ident ) else
7080: LD_ADDR_VAR 0 4
7084: PUSH
7085: LD_VAR 0 1
7089: PPUSH
7090: CALL_OW 34
7094: ST_TO_ADDR
7095: GO 7112
// unit := NewCharacter ( ident ) ;
7097: LD_ADDR_VAR 0 4
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 25
7111: ST_TO_ADDR
// result := unit ;
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: LD_VAR 0 4
7121: ST_TO_ADDR
// end ;
7122: LD_VAR 0 3
7126: RET
// export function Video ( mode ) ; begin
7127: LD_INT 0
7129: PPUSH
// ingame_video = mode ;
7130: LD_ADDR_OWVAR 52
7134: PUSH
7135: LD_VAR 0 1
7139: ST_TO_ADDR
// interface_hidden = mode ;
7140: LD_ADDR_OWVAR 54
7144: PUSH
7145: LD_VAR 0 1
7149: ST_TO_ADDR
// end ;
7150: LD_VAR 0 2
7154: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7155: LD_INT 0
7157: PPUSH
7158: PPUSH
7159: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7160: LD_ADDR_VAR 0 1
7164: PUSH
7165: LD_VAR 0 1
7169: PUSH
7170: LD_EXP 1
7174: PUSH
7175: LD_EXP 2
7179: PUSH
7180: LD_EXP 3
7184: PUSH
7185: LD_EXP 4
7189: PUSH
7190: LD_EXP 5
7194: PUSH
7195: LD_EXP 6
7199: PUSH
7200: LD_EXP 7
7204: PUSH
7205: LD_EXP 8
7209: PUSH
7210: LD_EXP 9
7214: PUSH
7215: LD_EXP 10
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: DIFF
7232: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7233: LD_ADDR_VAR 0 6
7237: PUSH
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: PPUSH
7246: LD_VAR 0 1
7250: PPUSH
7251: CALL_OW 12
7255: ARRAY
7256: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7257: LD_VAR 0 6
7261: PPUSH
7262: CALL_OW 258
7266: PUSH
7267: LD_INT 1
7269: EQUAL
7270: IFFALSE 7288
// Say ( speaker , dialogMID ) else
7272: LD_VAR 0 6
7276: PPUSH
7277: LD_VAR 0 2
7281: PPUSH
7282: CALL_OW 88
7286: GO 7302
// Say ( speaker , dialogFID ) ;
7288: LD_VAR 0 6
7292: PPUSH
7293: LD_VAR 0 3
7297: PPUSH
7298: CALL_OW 88
// result := speaker ;
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: LD_VAR 0 6
7311: ST_TO_ADDR
// end ;
7312: LD_VAR 0 4
7316: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7317: LD_INT 0
7319: PPUSH
7320: PPUSH
7321: PPUSH
// uc_side := GetSide ( b ) ;
7322: LD_ADDR_OWVAR 20
7326: PUSH
7327: LD_VAR 0 2
7331: PPUSH
7332: CALL_OW 255
7336: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7337: LD_ADDR_OWVAR 21
7341: PUSH
7342: LD_VAR 0 2
7346: PPUSH
7347: CALL_OW 248
7351: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_VAR 0 1
7362: PPUSH
7363: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7367: LD_ADDR_VAR 0 5
7371: PUSH
7372: LD_VAR 0 2
7376: PPUSH
7377: CALL_OW 254
7381: PUSH
7382: LD_INT 3
7384: MINUS
7385: ST_TO_ADDR
// if dir < 0 then
7386: LD_VAR 0 5
7390: PUSH
7391: LD_INT 0
7393: LESS
7394: IFFALSE 7410
// dir := 6 + dir ;
7396: LD_ADDR_VAR 0 5
7400: PUSH
7401: LD_INT 6
7403: PUSH
7404: LD_VAR 0 5
7408: PLUS
7409: ST_TO_ADDR
// un := CreateHuman ;
7410: LD_ADDR_VAR 0 4
7414: PUSH
7415: CALL_OW 44
7419: ST_TO_ADDR
// SetDir ( un , dir ) ;
7420: LD_VAR 0 4
7424: PPUSH
7425: LD_VAR 0 5
7429: PPUSH
7430: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7434: LD_VAR 0 4
7438: PPUSH
7439: LD_VAR 0 2
7443: PPUSH
7444: CALL_OW 52
// end ;
7448: LD_VAR 0 3
7452: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
// for i = 1 to count do
7459: LD_ADDR_VAR 0 8
7463: PUSH
7464: DOUBLE
7465: LD_INT 1
7467: DEC
7468: ST_TO_ADDR
7469: LD_VAR 0 6
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7556
// begin uc_side = side ;
7477: LD_ADDR_OWVAR 20
7481: PUSH
7482: LD_VAR 0 1
7486: ST_TO_ADDR
// uc_nation = nation ;
7487: LD_ADDR_OWVAR 21
7491: PUSH
7492: LD_VAR 0 2
7496: ST_TO_ADDR
// hc_gallery =  ;
7497: LD_ADDR_OWVAR 33
7501: PUSH
7502: LD_STRING 
7504: ST_TO_ADDR
// hc_name =  ;
7505: LD_ADDR_OWVAR 26
7509: PUSH
7510: LD_STRING 
7512: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7513: LD_INT 0
7515: PPUSH
7516: LD_VAR 0 5
7520: PPUSH
7521: LD_VAR 0 4
7525: PPUSH
7526: CALL_OW 380
// un = CreateHuman ;
7530: LD_ADDR_VAR 0 10
7534: PUSH
7535: CALL_OW 44
7539: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7540: LD_VAR 0 10
7544: PPUSH
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 52
// end ;
7554: GO 7474
7556: POP
7557: POP
// end ;
7558: LD_VAR 0 7
7562: RET
// export function PrepareDifficulty ; begin
7563: LD_INT 0
7565: PPUSH
// if Difficulty = 1 then
7566: LD_OWVAR 67
7570: PUSH
7571: LD_INT 1
7573: EQUAL
7574: IFFALSE 7592
// begin RuSolMinLevel = 4 ;
7576: LD_ADDR_EXP 25
7580: PUSH
7581: LD_INT 4
7583: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7584: LD_ADDR_EXP 26
7588: PUSH
7589: LD_INT 6
7591: ST_TO_ADDR
// end ; if Difficulty = 2 then
7592: LD_OWVAR 67
7596: PUSH
7597: LD_INT 2
7599: EQUAL
7600: IFFALSE 7670
// begin RuSolMinLevel = 5 ;
7602: LD_ADDR_EXP 25
7606: PUSH
7607: LD_INT 5
7609: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7610: LD_ADDR_EXP 26
7614: PUSH
7615: LD_INT 6
7617: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7618: LD_INT 51
7620: PPUSH
7621: LD_INT 3
7623: PPUSH
7624: LD_INT 1
7626: PPUSH
7627: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7631: LD_INT 57
7633: PPUSH
7634: LD_INT 3
7636: PPUSH
7637: LD_INT 1
7639: PPUSH
7640: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7644: LD_INT 57
7646: PPUSH
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 2
7652: PPUSH
7653: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7657: LD_INT 51
7659: PPUSH
7660: LD_INT 6
7662: PPUSH
7663: LD_INT 2
7665: PPUSH
7666: CALL_OW 322
// end ; if Difficulty = 3 then
7670: LD_OWVAR 67
7674: PUSH
7675: LD_INT 3
7677: EQUAL
7678: IFFALSE 7761
// begin RuSolMinLevel = 5 ;
7680: LD_ADDR_EXP 25
7684: PUSH
7685: LD_INT 5
7687: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7688: LD_ADDR_EXP 26
7692: PUSH
7693: LD_INT 6
7695: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7696: LD_INT 57
7698: PPUSH
7699: LD_INT 3
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7709: LD_INT 51
7711: PPUSH
7712: LD_INT 3
7714: PPUSH
7715: LD_INT 1
7717: PPUSH
7718: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7722: LD_INT 52
7724: PPUSH
7725: LD_INT 3
7727: PPUSH
7728: LD_INT 1
7730: PPUSH
7731: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7735: LD_INT 57
7737: PPUSH
7738: LD_INT 6
7740: PPUSH
7741: LD_INT 2
7743: PPUSH
7744: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7748: LD_INT 52
7750: PPUSH
7751: LD_INT 6
7753: PPUSH
7754: LD_INT 2
7756: PPUSH
7757: CALL_OW 322
// end ; end ;
7761: LD_VAR 0 1
7765: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7766: LD_INT 0
7768: PPUSH
7769: PPUSH
7770: PPUSH
7771: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7772: LD_ADDR_VAR 0 3
7776: PUSH
7777: LD_INT 22
7779: PUSH
7780: LD_INT 3
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 25
7789: PUSH
7790: LD_INT 2
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7806: LD_ADDR_VAR 0 4
7810: PUSH
7811: LD_INT 4
7813: PUSH
7814: LD_INT 75
7816: PUSH
7817: LD_INT 79
7819: PUSH
7820: LD_INT 2
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 4
7831: PUSH
7832: LD_INT 113
7834: PUSH
7835: LD_INT 94
7837: PUSH
7838: LD_INT 4
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 29
7849: PUSH
7850: LD_INT 106
7852: PUSH
7853: LD_INT 97
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 26
7867: PUSH
7868: LD_INT 93
7870: PUSH
7871: LD_INT 97
7873: PUSH
7874: LD_INT 5
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 2
7885: PUSH
7886: LD_INT 100
7888: PUSH
7889: LD_INT 89
7891: PUSH
7892: LD_INT 3
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 17
7903: PUSH
7904: LD_INT 96
7906: PUSH
7907: LD_INT 89
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 32
7921: PUSH
7922: LD_INT 78
7924: PUSH
7925: LD_INT 94
7927: PUSH
7928: LD_INT 1
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 32
7939: PUSH
7940: LD_INT 95
7942: PUSH
7943: LD_INT 82
7945: PUSH
7946: LD_INT 3
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 32
7957: PUSH
7958: LD_INT 104
7960: PUSH
7961: LD_INT 85
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 32
7975: PUSH
7976: LD_INT 81
7978: PUSH
7979: LD_INT 78
7981: PUSH
7982: LD_INT 2
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 33
7993: PUSH
7994: LD_INT 109
7996: PUSH
7997: LD_INT 90
7999: PUSH
8000: LD_INT 3
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 33
8011: PUSH
8012: LD_INT 88
8014: PUSH
8015: LD_INT 79
8017: PUSH
8018: LD_INT 3
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 33
8029: PUSH
8030: LD_INT 76
8032: PUSH
8033: LD_INT 87
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 26
8047: PUSH
8048: LD_INT 96
8050: PUSH
8051: LD_INT 97
8053: PUSH
8054: LD_INT 5
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 26
8065: PUSH
8066: LD_INT 85
8068: PUSH
8069: LD_INT 84
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 6
8083: PUSH
8084: LD_INT 88
8086: PUSH
8087: LD_INT 95
8089: PUSH
8090: LD_INT 0
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 19
8101: PUSH
8102: LD_INT 103
8104: PUSH
8105: LD_INT 89
8107: PUSH
8108: LD_INT 4
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 16
8119: PUSH
8120: LD_INT 97
8122: PUSH
8123: LD_INT 86
8125: PUSH
8126: LD_INT 2
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 24
8137: PUSH
8138: LD_INT 100
8140: PUSH
8141: LD_INT 85
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: ST_TO_ADDR
// for i := 1 to buildingsTab do
8174: LD_ADDR_VAR 0 2
8178: PUSH
8179: DOUBLE
8180: LD_INT 1
8182: DEC
8183: ST_TO_ADDR
8184: LD_VAR 0 4
8188: PUSH
8189: FOR_TO
8190: IFFALSE 8263
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8192: LD_VAR 0 3
8196: PPUSH
8197: LD_VAR 0 4
8201: PUSH
8202: LD_VAR 0 2
8206: ARRAY
8207: PUSH
8208: LD_INT 1
8210: ARRAY
8211: PPUSH
8212: LD_VAR 0 4
8216: PUSH
8217: LD_VAR 0 2
8221: ARRAY
8222: PUSH
8223: LD_INT 2
8225: ARRAY
8226: PPUSH
8227: LD_VAR 0 4
8231: PUSH
8232: LD_VAR 0 2
8236: ARRAY
8237: PUSH
8238: LD_INT 3
8240: ARRAY
8241: PPUSH
8242: LD_VAR 0 4
8246: PUSH
8247: LD_VAR 0 2
8251: ARRAY
8252: PUSH
8253: LD_INT 4
8255: ARRAY
8256: PPUSH
8257: CALL_OW 205
8261: GO 8189
8263: POP
8264: POP
// end ;
8265: LD_VAR 0 1
8269: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8270: LD_INT 0
8272: PPUSH
8273: PPUSH
// for i in charactersList do
8274: LD_ADDR_VAR 0 4
8278: PUSH
8279: LD_VAR 0 1
8283: PUSH
8284: FOR_IN
8285: IFFALSE 8303
// SaveCharacters ( i , ident ) ;
8287: LD_VAR 0 4
8291: PPUSH
8292: LD_VAR 0 2
8296: PPUSH
8297: CALL_OW 38
8301: GO 8284
8303: POP
8304: POP
// end ;
8305: LD_VAR 0 3
8309: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8310: LD_INT 0
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8317: LD_ADDR_VAR 0 8
8321: PUSH
8322: LD_INT 48
8324: PUSH
8325: LD_INT 49
8327: PUSH
8328: LD_INT 50
8330: PUSH
8331: LD_INT 20
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 51
8339: PUSH
8340: LD_INT 52
8342: PUSH
8343: LD_INT 69
8345: PUSH
8346: LD_INT 39
8348: PUSH
8349: LD_INT 34
8351: PUSH
8352: LD_INT 40
8354: PUSH
8355: LD_INT 53
8357: PUSH
8358: LD_INT 71
8360: PUSH
8361: LD_INT 57
8363: PUSH
8364: LD_INT 58
8366: PUSH
8367: LD_INT 44
8369: PUSH
8370: LD_INT 32
8372: PUSH
8373: LD_INT 27
8375: PUSH
8376: LD_INT 23
8378: PUSH
8379: LD_INT 33
8381: PUSH
8382: LD_INT 59
8384: PUSH
8385: LD_INT 54
8387: PUSH
8388: LD_INT 55
8390: PUSH
8391: LD_INT 56
8393: PUSH
8394: LD_INT 63
8396: PUSH
8397: LD_INT 64
8399: PUSH
8400: LD_INT 65
8402: PUSH
8403: LD_INT 30
8405: PUSH
8406: LD_INT 31
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 22
8414: PUSH
8415: LD_INT 25
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8452: LD_ADDR_VAR 0 5
8456: PUSH
8457: DOUBLE
8458: LD_INT 1
8460: DEC
8461: ST_TO_ADDR
8462: LD_VAR 0 8
8466: PUSH
8467: FOR_TO
8468: IFFALSE 8544
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8470: LD_VAR 0 8
8474: PUSH
8475: LD_VAR 0 5
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 321
8490: PUSH
8491: LD_INT 1
8493: EQUAL
8494: PUSH
8495: LD_VAR 0 8
8499: PUSH
8500: LD_VAR 0 5
8504: ARRAY
8505: PPUSH
8506: LD_VAR 0 3
8510: PPUSH
8511: CALL_OW 482
8515: PUSH
8516: LD_INT 1
8518: EQUAL
8519: AND
8520: IFFALSE 8542
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8522: LD_VAR 0 2
8526: PPUSH
8527: LD_VAR 0 8
8531: PUSH
8532: LD_VAR 0 5
8536: ARRAY
8537: PPUSH
8538: CALL_OW 184
8542: GO 8467
8544: POP
8545: POP
// end ;
8546: LD_VAR 0 4
8550: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8551: LD_INT 0
8553: PPUSH
8554: PPUSH
8555: PPUSH
8556: PPUSH
8557: PPUSH
8558: PPUSH
8559: PPUSH
8560: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8561: LD_ADDR_VAR 0 6
8565: PUSH
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_INT 22
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PUSH
8583: LD_INT 56
8585: PUSH
8586: EMPTY
8587: LIST
8588: PUSH
8589: LD_INT 24
8591: PUSH
8592: LD_INT 700
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 3
8601: PUSH
8602: LD_INT 60
8604: PUSH
8605: EMPTY
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 25
8617: PUSH
8618: LD_INT 1
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 25
8637: PUSH
8638: LD_INT 8
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 25
8647: PUSH
8648: LD_INT 9
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 70
8673: PUSH
8674: LD_EXP 24
8678: PUSH
8679: EMPTY
8680: LIST
8681: DIFF
8682: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8683: LD_ADDR_VAR 0 7
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: LD_INT 22
8695: PUSH
8696: LD_VAR 0 1
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 30
8707: PUSH
8708: LD_INT 32
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: LD_INT 58
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 251
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 70
8741: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_VAR 0 2
8751: PPUSH
8752: LD_INT 22
8754: PUSH
8755: LD_VAR 0 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 2
8766: PUSH
8767: LD_INT 30
8769: PUSH
8770: LD_INT 4
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 30
8779: PUSH
8780: LD_INT 5
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 24
8794: PUSH
8795: LD_INT 251
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 70
8811: ST_TO_ADDR
// if barrackList > 0 then
8812: LD_VAR 0 9
8816: PUSH
8817: LD_INT 0
8819: GREATER
8820: IFFALSE 8968
// begin if turretList = 0 then
8822: LD_VAR 0 7
8826: PUSH
8827: LD_INT 0
8829: EQUAL
8830: IFFALSE 8872
// begin if soldiers_list > 0 then
8832: LD_VAR 0 6
8836: PUSH
8837: LD_INT 0
8839: GREATER
8840: IFFALSE 8870
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8842: LD_VAR 0 6
8846: PPUSH
8847: LD_VAR 0 9
8851: PUSH
8852: LD_INT 1
8854: PPUSH
8855: LD_VAR 0 9
8859: PPUSH
8860: CALL_OW 12
8864: ARRAY
8865: PPUSH
8866: CALL_OW 120
// end else
8870: GO 8968
// begin for i in barrackList do
8872: LD_ADDR_VAR 0 4
8876: PUSH
8877: LD_VAR 0 9
8881: PUSH
8882: FOR_IN
8883: IFFALSE 8966
// begin insideUnits = UnitsInside ( i ) ;
8885: LD_ADDR_VAR 0 10
8889: PUSH
8890: LD_VAR 0 4
8894: PPUSH
8895: CALL_OW 313
8899: ST_TO_ADDR
// if insideUnits > 0 then
8900: LD_VAR 0 10
8904: PUSH
8905: LD_INT 0
8907: GREATER
8908: IFFALSE 8932
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8910: LD_VAR 0 10
8914: PUSH
8915: LD_INT 1
8917: ARRAY
8918: PPUSH
8919: LD_VAR 0 7
8923: PUSH
8924: LD_INT 1
8926: ARRAY
8927: PPUSH
8928: CALL_OW 120
// if soldiers_list > 0 then
8932: LD_VAR 0 6
8936: PUSH
8937: LD_INT 0
8939: GREATER
8940: IFFALSE 8964
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8942: LD_VAR 0 6
8946: PUSH
8947: LD_INT 1
8949: ARRAY
8950: PPUSH
8951: LD_VAR 0 7
8955: PUSH
8956: LD_INT 1
8958: ARRAY
8959: PPUSH
8960: CALL_OW 120
// end ;
8964: GO 8882
8966: POP
8967: POP
// end ; end ; end ;
8968: LD_VAR 0 3
8972: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8973: LD_INT 0
8975: PPUSH
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
// for i = 1 to vehCount do
8981: LD_ADDR_VAR 0 8
8985: PUSH
8986: DOUBLE
8987: LD_INT 1
8989: DEC
8990: ST_TO_ADDR
8991: LD_VAR 0 6
8995: PUSH
8996: FOR_TO
8997: IFFALSE 9204
// begin uc_side = side ;
8999: LD_ADDR_OWVAR 20
9003: PUSH
9004: LD_VAR 0 1
9008: ST_TO_ADDR
// uc_nation = nation ;
9009: LD_ADDR_OWVAR 21
9013: PUSH
9014: LD_VAR 0 3
9018: ST_TO_ADDR
// vc_Chassis = 22 ;
9019: LD_ADDR_OWVAR 37
9023: PUSH
9024: LD_INT 22
9026: ST_TO_ADDR
// vc_engine = 1 ;
9027: LD_ADDR_OWVAR 39
9031: PUSH
9032: LD_INT 1
9034: ST_TO_ADDR
// vc_control = 1 ;
9035: LD_ADDR_OWVAR 38
9039: PUSH
9040: LD_INT 1
9042: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9043: LD_ADDR_OWVAR 40
9047: PUSH
9048: LD_INT 43
9050: PUSH
9051: LD_INT 44
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 1
9060: PPUSH
9061: LD_INT 2
9063: PPUSH
9064: CALL_OW 12
9068: ARRAY
9069: ST_TO_ADDR
// veh = CreateVehicle ;
9070: LD_ADDR_VAR 0 12
9074: PUSH
9075: CALL_OW 45
9079: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9080: LD_VAR 0 12
9084: PPUSH
9085: LD_VAR 0 2
9089: PPUSH
9090: LD_INT 0
9092: PPUSH
9093: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9097: LD_ADDR_EXP 32
9101: PUSH
9102: LD_EXP 32
9106: PUSH
9107: LD_VAR 0 12
9111: ADD
9112: ST_TO_ADDR
// hc_class = 3 ;
9113: LD_ADDR_OWVAR 28
9117: PUSH
9118: LD_INT 3
9120: ST_TO_ADDR
// hc_name =  ;
9121: LD_ADDR_OWVAR 26
9125: PUSH
9126: LD_STRING 
9128: ST_TO_ADDR
// hc_gallery =  ;
9129: LD_ADDR_OWVAR 33
9133: PUSH
9134: LD_STRING 
9136: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9137: LD_INT 0
9139: PPUSH
9140: LD_INT 3
9142: PPUSH
9143: LD_EXP 25
9147: PPUSH
9148: LD_EXP 26
9152: PPUSH
9153: CALL_OW 12
9157: PPUSH
9158: CALL_OW 380
// un = CreateHuman ;
9162: LD_ADDR_VAR 0 10
9166: PUSH
9167: CALL_OW 44
9171: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9172: LD_VAR 0 10
9176: PPUSH
9177: LD_VAR 0 12
9181: PPUSH
9182: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9186: LD_ADDR_EXP 32
9190: PUSH
9191: LD_EXP 32
9195: PUSH
9196: LD_VAR 0 10
9200: ADD
9201: ST_TO_ADDR
// end ;
9202: GO 8996
9204: POP
9205: POP
// end ;
9206: LD_VAR 0 7
9210: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9211: LD_INT 0
9213: PPUSH
9214: PPUSH
9215: PPUSH
9216: PPUSH
9217: PPUSH
9218: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9219: LD_VAR 0 2
9223: PPUSH
9224: LD_INT 22
9226: PUSH
9227: LD_VAR 0 1
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: PPUSH
9239: CALL_OW 70
9243: PUSH
9244: LD_INT 0
9246: EQUAL
9247: PUSH
9248: LD_EXP 32
9252: AND
9253: IFFALSE 9540
// begin for i in defenders_list do
9255: LD_ADDR_VAR 0 4
9259: PUSH
9260: LD_EXP 32
9264: PUSH
9265: FOR_IN
9266: IFFALSE 9538
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 63
9275: PPUSH
9276: LD_INT 75
9278: PPUSH
9279: CALL_OW 297
9283: PUSH
9284: LD_INT 8
9286: GREATER
9287: PUSH
9288: LD_VAR 0 4
9292: PPUSH
9293: CALL_OW 314
9297: NOT
9298: AND
9299: IFFALSE 9318
// ComMoveXY ( i , 63 , 75 ) else
9301: LD_VAR 0 4
9305: PPUSH
9306: LD_INT 63
9308: PPUSH
9309: LD_INT 75
9311: PPUSH
9312: CALL_OW 111
9316: GO 9536
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9318: LD_VAR 0 4
9322: PPUSH
9323: CALL_OW 257
9327: PUSH
9328: LD_INT 3
9330: EQUAL
9331: PUSH
9332: LD_VAR 0 4
9336: PPUSH
9337: CALL_OW 310
9341: NOT
9342: AND
9343: PUSH
9344: LD_VAR 0 4
9348: PPUSH
9349: CALL_OW 314
9353: NOT
9354: AND
9355: IFFALSE 9408
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9357: LD_VAR 0 4
9361: PPUSH
9362: LD_EXP 32
9366: PPUSH
9367: LD_INT 58
9369: PUSH
9370: EMPTY
9371: LIST
9372: PUSH
9373: LD_INT 24
9375: PUSH
9376: LD_INT 1000
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PPUSH
9387: CALL_OW 72
9391: PPUSH
9392: LD_VAR 0 4
9396: PPUSH
9397: CALL_OW 74
9401: PPUSH
9402: CALL_OW 120
9406: GO 9536
// if GetFuel ( i ) < 100 then
9408: LD_VAR 0 4
9412: PPUSH
9413: CALL_OW 261
9417: PUSH
9418: LD_INT 100
9420: LESS
9421: IFFALSE 9437
// SetFuel ( defenders_list , 100 ) else
9423: LD_EXP 32
9427: PPUSH
9428: LD_INT 100
9430: PPUSH
9431: CALL_OW 240
9435: GO 9536
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9437: LD_VAR 0 4
9441: PPUSH
9442: CALL_OW 263
9446: PUSH
9447: LD_INT 1
9449: EQUAL
9450: PUSH
9451: LD_VAR 0 4
9455: PPUSH
9456: CALL_OW 256
9460: PUSH
9461: LD_INT 990
9463: LESS
9464: AND
9465: IFFALSE 9536
// begin veh := i ;
9467: LD_ADDR_VAR 0 7
9471: PUSH
9472: LD_VAR 0 4
9476: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9477: LD_ADDR_VAR 0 8
9481: PUSH
9482: LD_VAR 0 4
9486: PPUSH
9487: CALL_OW 311
9491: ST_TO_ADDR
// if veh then
9492: LD_VAR 0 7
9496: IFFALSE 9536
// begin ComMoveXY ( i , 63 , 75 ) ;
9498: LD_VAR 0 4
9502: PPUSH
9503: LD_INT 63
9505: PPUSH
9506: LD_INT 75
9508: PPUSH
9509: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9513: LD_VAR 0 7
9517: PPUSH
9518: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9522: LD_VAR 0 8
9526: PPUSH
9527: LD_VAR 0 7
9531: PPUSH
9532: CALL_OW 189
// end ; end ; end ;
9536: GO 9265
9538: POP
9539: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 2
9549: PPUSH
9550: LD_INT 22
9552: PUSH
9553: LD_VAR 0 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: PPUSH
9565: CALL_OW 70
9569: ST_TO_ADDR
// if tmp and defenders_list then
9570: LD_VAR 0 6
9574: PUSH
9575: LD_EXP 32
9579: AND
9580: IFFALSE 9749
// for i in defenders_list do
9582: LD_ADDR_VAR 0 4
9586: PUSH
9587: LD_EXP 32
9591: PUSH
9592: FOR_IN
9593: IFFALSE 9747
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9595: LD_VAR 0 4
9599: PPUSH
9600: CALL_OW 257
9604: PUSH
9605: LD_INT 3
9607: EQUAL
9608: PUSH
9609: LD_VAR 0 4
9613: PPUSH
9614: CALL_OW 310
9618: NOT
9619: AND
9620: IFFALSE 9659
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9622: LD_VAR 0 4
9626: PPUSH
9627: LD_EXP 32
9631: PPUSH
9632: LD_INT 58
9634: PUSH
9635: EMPTY
9636: LIST
9637: PPUSH
9638: CALL_OW 72
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 74
9652: PPUSH
9653: CALL_OW 120
9657: GO 9745
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9659: LD_VAR 0 4
9663: PPUSH
9664: CALL_OW 314
9668: NOT
9669: PUSH
9670: LD_VAR 0 4
9674: PPUSH
9675: LD_VAR 0 2
9679: PPUSH
9680: CALL_OW 308
9684: AND
9685: IFFALSE 9713
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9687: LD_VAR 0 4
9691: PPUSH
9692: LD_VAR 0 6
9696: PPUSH
9697: LD_VAR 0 4
9701: PPUSH
9702: CALL_OW 74
9706: PPUSH
9707: CALL_OW 115
9711: GO 9745
// if not IsInArea ( i , defenseArea ) then
9713: LD_VAR 0 4
9717: PPUSH
9718: LD_VAR 0 2
9722: PPUSH
9723: CALL_OW 308
9727: NOT
9728: IFFALSE 9745
// ComMoveXY ( i , 63 , 75 ) ;
9730: LD_VAR 0 4
9734: PPUSH
9735: LD_INT 63
9737: PPUSH
9738: LD_INT 75
9740: PPUSH
9741: CALL_OW 111
// end ;
9745: GO 9592
9747: POP
9748: POP
// end ;
9749: LD_VAR 0 3
9753: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9754: LD_INT 0
9756: PPUSH
9757: PPUSH
9758: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9759: LD_INT 22
9761: PUSH
9762: LD_VAR 0 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 21
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: CALL_OW 69
9789: PUSH
9790: LD_VAR 0 3
9794: LESSEQUAL
9795: IFFALSE 9903
// begin for i = 1 to vehCount do
9797: LD_ADDR_VAR 0 9
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_VAR 0 3
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9901
// begin weapon = weaponTab [ i ] ;
9815: LD_ADDR_VAR 0 10
9819: PUSH
9820: LD_VAR 0 4
9824: PUSH
9825: LD_VAR 0 9
9829: ARRAY
9830: ST_TO_ADDR
// if weapon = 46 then
9831: LD_VAR 0 10
9835: PUSH
9836: LD_INT 46
9838: EQUAL
9839: IFFALSE 9870
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_INT 24
9848: PPUSH
9849: LD_VAR 0 5
9853: PPUSH
9854: LD_VAR 0 6
9858: PPUSH
9859: LD_VAR 0 10
9863: PPUSH
9864: CALL_OW 185
// end else
9868: GO 9899
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9870: LD_VAR 0 2
9874: PPUSH
9875: LD_VAR 0 7
9879: PPUSH
9880: LD_VAR 0 5
9884: PPUSH
9885: LD_VAR 0 6
9889: PPUSH
9890: LD_VAR 0 10
9894: PPUSH
9895: CALL_OW 185
// end ; end ;
9899: GO 9812
9901: POP
9902: POP
// end ; end ;
9903: LD_VAR 0 8
9907: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9908: LD_INT 0
9910: PPUSH
9911: PPUSH
9912: PPUSH
9913: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9914: LD_ADDR_VAR 0 8
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_VAR 0 1
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 21
9933: PUSH
9934: LD_INT 2
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 3
9943: PUSH
9944: LD_INT 24
9946: PUSH
9947: LD_INT 650
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: PPUSH
9963: CALL_OW 69
9967: ST_TO_ADDR
// if damageVehicles > 0 then
9968: LD_VAR 0 8
9972: PUSH
9973: LD_INT 0
9975: GREATER
9976: IFFALSE 9997
// ComMoveXY ( damageVehicles , repX , repY ) ;
9978: LD_VAR 0 8
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: LD_VAR 0 4
9992: PPUSH
9993: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9997: LD_VAR 0 8
10001: PPUSH
10002: LD_INT 95
10004: PUSH
10005: LD_VAR 0 2
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: LD_INT 58
10019: PUSH
10020: EMPTY
10021: LIST
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PPUSH
10031: CALL_OW 72
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: IFFALSE 10106
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10041: LD_ADDR_VAR 0 6
10045: PUSH
10046: LD_VAR 0 8
10050: PPUSH
10051: LD_INT 95
10053: PUSH
10054: LD_VAR 0 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 58
10068: PUSH
10069: EMPTY
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 72
10084: PUSH
10085: FOR_IN
10086: IFFALSE 10104
// ComExitVehicle ( UnitsInside ( i ) ) ;
10088: LD_VAR 0 6
10092: PPUSH
10093: CALL_OW 313
10097: PPUSH
10098: CALL_OW 121
10102: GO 10085
10104: POP
10105: POP
// end ;
10106: LD_VAR 0 5
10110: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
10115: PPUSH
10116: PPUSH
10117: PPUSH
10118: PPUSH
10119: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10120: LD_ADDR_VAR 0 8
10124: PUSH
10125: LD_INT 22
10127: PUSH
10128: LD_VAR 0 1
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 21
10139: PUSH
10140: LD_INT 2
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 24
10149: PUSH
10150: LD_INT 250
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 3
10159: PUSH
10160: LD_INT 58
10162: PUSH
10163: EMPTY
10164: LIST
10165: PUSH
10166: LD_INT 2
10168: PUSH
10169: LD_INT 34
10171: PUSH
10172: LD_INT 43
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 34
10181: PUSH
10182: LD_INT 44
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 34
10191: PUSH
10192: LD_INT 46
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL_OW 69
10220: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10221: LD_INT 22
10223: PUSH
10224: LD_VAR 0 1
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 21
10235: PUSH
10236: LD_INT 2
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 24
10245: PUSH
10246: LD_INT 1000
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 3
10255: PUSH
10256: LD_INT 58
10258: PUSH
10259: EMPTY
10260: LIST
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: LD_INT 34
10267: PUSH
10268: LD_INT 43
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 34
10277: PUSH
10278: LD_INT 44
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 34
10287: PUSH
10288: LD_INT 46
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_INT 5
10319: PUSH
10320: LD_INT 6
10322: PUSH
10323: LD_INT 7
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: PUSH
10331: LD_OWVAR 67
10335: ARRAY
10336: GREATEREQUAL
10337: IFFALSE 10902
// repeat wait ( 0 0$1 ) ;
10339: LD_INT 35
10341: PPUSH
10342: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10346: LD_ADDR_VAR 0 8
10350: PUSH
10351: LD_INT 22
10353: PUSH
10354: LD_VAR 0 1
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 21
10365: PUSH
10366: LD_INT 2
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 24
10375: PUSH
10376: LD_INT 250
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: LD_INT 34
10388: PUSH
10389: LD_INT 43
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 34
10398: PUSH
10399: LD_INT 44
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 34
10408: PUSH
10409: LD_INT 46
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: LD_INT 58
10427: PUSH
10428: EMPTY
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10447: LD_INT 22
10449: PUSH
10450: LD_VAR 0 1
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 95
10461: PUSH
10462: LD_VAR 0 2
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 69
10479: NOT
10480: PUSH
10481: LD_VAR 0 11
10485: PUSH
10486: LD_INT 0
10488: EQUAL
10489: AND
10490: IFFALSE 10545
// for i := 1 to wayX do
10492: LD_ADDR_VAR 0 6
10496: PUSH
10497: DOUBLE
10498: LD_INT 1
10500: DEC
10501: ST_TO_ADDR
10502: LD_VAR 0 3
10506: PUSH
10507: FOR_TO
10508: IFFALSE 10543
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10510: LD_VAR 0 8
10514: PPUSH
10515: LD_VAR 0 3
10519: PUSH
10520: LD_VAR 0 6
10524: ARRAY
10525: PPUSH
10526: LD_VAR 0 4
10530: PUSH
10531: LD_VAR 0 6
10535: ARRAY
10536: PPUSH
10537: CALL_OW 114
10541: GO 10507
10543: POP
10544: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10545: LD_INT 22
10547: PUSH
10548: LD_VAR 0 1
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 95
10559: PUSH
10560: LD_VAR 0 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PPUSH
10573: CALL_OW 69
10577: IFFALSE 10801
// begin seeEnemy = 1 ;
10579: LD_ADDR_VAR 0 11
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// for j in vehiclesOK do
10587: LD_ADDR_VAR 0 7
10591: PUSH
10592: LD_VAR 0 8
10596: PUSH
10597: FOR_IN
10598: IFFALSE 10799
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10600: LD_ADDR_VAR 0 9
10604: PUSH
10605: LD_INT 81
10607: PUSH
10608: LD_VAR 0 1
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 101
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PPUSH
10636: LD_VAR 0 7
10640: PPUSH
10641: CALL_OW 74
10645: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10646: LD_ADDR_VAR 0 10
10650: PUSH
10651: LD_INT 81
10653: PUSH
10654: LD_VAR 0 1
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 101
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 2
10675: PUSH
10676: LD_INT 59
10678: PUSH
10679: EMPTY
10680: LIST
10681: PUSH
10682: LD_INT 21
10684: PUSH
10685: LD_INT 1
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: PPUSH
10716: CALL_OW 69
10720: PPUSH
10721: LD_VAR 0 7
10725: PPUSH
10726: CALL_OW 74
10730: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10731: LD_VAR 0 7
10735: PPUSH
10736: LD_VAR 0 9
10740: PPUSH
10741: CALL_OW 296
10745: PUSH
10746: LD_INT 8
10748: PLUS
10749: PUSH
10750: LD_VAR 0 7
10754: PPUSH
10755: LD_VAR 0 10
10759: PPUSH
10760: CALL_OW 296
10764: LESS
10765: IFFALSE 10783
// ComAttackUnit ( j , target1 ) else
10767: LD_VAR 0 7
10771: PPUSH
10772: LD_VAR 0 9
10776: PPUSH
10777: CALL_OW 115
10781: GO 10797
// ComAttackUnit ( j , target2 ) ;
10783: LD_VAR 0 7
10787: PPUSH
10788: LD_VAR 0 10
10792: PPUSH
10793: CALL_OW 115
// end ;
10797: GO 10597
10799: POP
10800: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10801: LD_INT 22
10803: PUSH
10804: LD_VAR 0 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 24
10825: PUSH
10826: LD_INT 250
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 43
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 44
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 46
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: LD_INT 3
10874: PUSH
10875: LD_INT 58
10877: PUSH
10878: EMPTY
10879: LIST
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 69
10896: PUSH
10897: LD_INT 0
10899: EQUAL
10900: IFFALSE 10339
// seeEnemy = 0 ;
10902: LD_ADDR_VAR 0 11
10906: PUSH
10907: LD_INT 0
10909: ST_TO_ADDR
// end ;
10910: LD_VAR 0 5
10914: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
10922: PPUSH
// repeat wait ( 0 0$1 ) ;
10923: LD_INT 35
10925: PPUSH
10926: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10930: LD_ADDR_VAR 0 7
10934: PUSH
10935: LD_INT 22
10937: PUSH
10938: LD_VAR 0 1
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 2
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 24
10959: PUSH
10960: LD_INT 651
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: PPUSH
10972: CALL_OW 69
10976: ST_TO_ADDR
// for j in vehiclesOK do
10977: LD_ADDR_VAR 0 4
10981: PUSH
10982: LD_VAR 0 7
10986: PUSH
10987: FOR_IN
10988: IFFALSE 11189
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10990: LD_ADDR_VAR 0 5
10994: PUSH
10995: LD_INT 81
10997: PUSH
10998: LD_VAR 0 1
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 101
11009: PUSH
11010: LD_INT 1
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PPUSH
11021: CALL_OW 69
11025: PPUSH
11026: LD_VAR 0 4
11030: PPUSH
11031: CALL_OW 74
11035: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11036: LD_ADDR_VAR 0 6
11040: PUSH
11041: LD_INT 81
11043: PUSH
11044: LD_VAR 0 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 101
11055: PUSH
11056: LD_INT 1
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 59
11068: PUSH
11069: EMPTY
11070: LIST
11071: PUSH
11072: LD_INT 21
11074: PUSH
11075: LD_INT 1
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 21
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: PPUSH
11106: CALL_OW 69
11110: PPUSH
11111: LD_VAR 0 4
11115: PPUSH
11116: CALL_OW 74
11120: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11121: LD_VAR 0 4
11125: PPUSH
11126: LD_VAR 0 5
11130: PPUSH
11131: CALL_OW 296
11135: PUSH
11136: LD_INT 8
11138: PLUS
11139: PUSH
11140: LD_VAR 0 4
11144: PPUSH
11145: LD_VAR 0 6
11149: PPUSH
11150: CALL_OW 296
11154: LESS
11155: IFFALSE 11173
// ComAttackUnit ( j , target1 ) else
11157: LD_VAR 0 4
11161: PPUSH
11162: LD_VAR 0 5
11166: PPUSH
11167: CALL_OW 115
11171: GO 11187
// ComAttackUnit ( j , target2 ) ;
11173: LD_VAR 0 4
11177: PPUSH
11178: LD_VAR 0 6
11182: PPUSH
11183: CALL_OW 115
// end ;
11187: GO 10987
11189: POP
11190: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11191: LD_INT 22
11193: PUSH
11194: LD_VAR 0 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 21
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 24
11215: PUSH
11216: LD_INT 250
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 69
11232: PUSH
11233: LD_INT 0
11235: EQUAL
11236: IFFALSE 10923
// end ;
11238: LD_VAR 0 2
11242: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11243: LD_INT 0
11245: PPUSH
11246: PPUSH
11247: PPUSH
11248: PPUSH
11249: PPUSH
11250: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11251: LD_ADDR_VAR 0 8
11255: PUSH
11256: LD_VAR 0 2
11260: PPUSH
11261: CALL_OW 313
11265: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11266: LD_ADDR_VAR 0 9
11270: PUSH
11271: LD_VAR 0 3
11275: PPUSH
11276: LD_INT 22
11278: PUSH
11279: LD_VAR 0 1
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 24
11300: PUSH
11301: LD_INT 750
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: LD_INT 54
11313: PUSH
11314: EMPTY
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 70
11331: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11332: LD_ADDR_VAR 0 6
11336: PUSH
11337: LD_VAR 0 3
11341: PPUSH
11342: LD_INT 22
11344: PUSH
11345: LD_VAR 0 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 21
11356: PUSH
11357: LD_INT 3
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: LD_INT 24
11369: PUSH
11370: LD_INT 1000
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: PUSH
11386: EMPTY
11387: LIST
11388: PPUSH
11389: CALL_OW 70
11393: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11394: LD_VAR 0 6
11398: NOT
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: LD_VAR 0 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 25
11414: PUSH
11415: LD_INT 2
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 24
11424: PUSH
11425: LD_INT 250
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: NOT
11442: AND
11443: IFFALSE 11447
// exit ;
11445: GO 11644
// if buildings_list > 0 and engineerOkInside then
11447: LD_VAR 0 6
11451: PUSH
11452: LD_INT 0
11454: GREATER
11455: PUSH
11456: LD_VAR 0 8
11460: AND
11461: IFFALSE 11487
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11463: LD_VAR 0 8
11467: PPUSH
11468: LD_INT 25
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 72
11482: PPUSH
11483: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11487: LD_VAR 0 6
11491: PUSH
11492: LD_INT 0
11494: GREATER
11495: PUSH
11496: LD_VAR 0 9
11500: PUSH
11501: LD_INT 0
11503: GREATER
11504: AND
11505: IFFALSE 11525
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11507: LD_VAR 0 9
11511: PPUSH
11512: LD_VAR 0 6
11516: PUSH
11517: LD_INT 1
11519: ARRAY
11520: PPUSH
11521: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11525: LD_VAR 0 6
11529: PUSH
11530: LD_INT 0
11532: EQUAL
11533: PUSH
11534: LD_VAR 0 4
11538: PUSH
11539: LD_INT 0
11541: EQUAL
11542: AND
11543: PUSH
11544: LD_VAR 0 9
11548: PUSH
11549: LD_INT 0
11551: GREATER
11552: AND
11553: IFFALSE 11569
// ComEnterUnit ( engineerOkOutside , building ) ;
11555: LD_VAR 0 9
11559: PPUSH
11560: LD_VAR 0 2
11564: PPUSH
11565: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11569: LD_VAR 0 9
11573: PUSH
11574: LD_INT 0
11576: GREATER
11577: PUSH
11578: LD_VAR 0 6
11582: PUSH
11583: LD_INT 0
11585: EQUAL
11586: AND
11587: PUSH
11588: LD_VAR 0 4
11592: PUSH
11593: LD_INT 0
11595: GREATER
11596: AND
11597: IFFALSE 11644
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11599: LD_VAR 0 9
11603: PPUSH
11604: LD_VAR 0 4
11608: PUSH
11609: LD_INT 1
11611: ARRAY
11612: PPUSH
11613: LD_VAR 0 4
11617: PUSH
11618: LD_INT 2
11620: ARRAY
11621: PPUSH
11622: LD_VAR 0 4
11626: PUSH
11627: LD_INT 3
11629: ARRAY
11630: PPUSH
11631: LD_VAR 0 4
11635: PUSH
11636: LD_INT 4
11638: ARRAY
11639: PPUSH
11640: CALL_OW 145
// end ;
11644: LD_VAR 0 5
11648: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11649: LD_INT 0
11651: PPUSH
11652: PPUSH
11653: PPUSH
11654: PPUSH
11655: PPUSH
11656: PPUSH
11657: PPUSH
11658: PPUSH
11659: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11660: LD_ADDR_VAR 0 6
11664: PUSH
11665: LD_INT 22
11667: PUSH
11668: LD_VAR 0 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 25
11679: PUSH
11680: LD_INT 4
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 24
11699: PUSH
11700: LD_INT 251
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PPUSH
11713: CALL_OW 69
11717: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11718: LD_ADDR_VAR 0 7
11722: PUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 22
11730: PUSH
11731: LD_VAR 0 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 23
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 25
11752: PUSH
11753: LD_INT 4
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 50
11762: PUSH
11763: EMPTY
11764: LIST
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: PPUSH
11772: CALL_OW 70
11776: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11777: LD_ADDR_VAR 0 10
11781: PUSH
11782: LD_VAR 0 3
11786: PPUSH
11787: LD_INT 22
11789: PUSH
11790: LD_VAR 0 1
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 21
11801: PUSH
11802: LD_INT 1
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 3
11811: PUSH
11812: LD_INT 25
11814: PUSH
11815: LD_INT 3
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 3
11828: PUSH
11829: LD_INT 24
11831: PUSH
11832: LD_INT 750
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 70
11853: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11854: LD_ADDR_VAR 0 11
11858: PUSH
11859: LD_VAR 0 2
11863: PPUSH
11864: LD_INT 22
11866: PUSH
11867: LD_VAR 0 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 3
11888: PUSH
11889: LD_INT 25
11891: PUSH
11892: LD_INT 3
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 3
11905: PUSH
11906: LD_INT 24
11908: PUSH
11909: LD_INT 1000
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 70
11930: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11931: LD_VAR 0 10
11935: NOT
11936: PUSH
11937: LD_VAR 0 11
11941: NOT
11942: AND
11943: PUSH
11944: LD_VAR 0 6
11948: NOT
11949: AND
11950: IFFALSE 11954
// exit ;
11952: GO 12188
// if damageUnits > 0 and sci_list > 0 then
11954: LD_VAR 0 10
11958: PUSH
11959: LD_INT 0
11961: GREATER
11962: PUSH
11963: LD_VAR 0 6
11967: PUSH
11968: LD_INT 0
11970: GREATER
11971: AND
11972: IFFALSE 11988
// ComMoveToArea ( damageUnits , healArea ) ;
11974: LD_VAR 0 10
11978: PPUSH
11979: LD_VAR 0 2
11983: PPUSH
11984: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11988: LD_VAR 0 11
11992: PUSH
11993: LD_INT 0
11995: GREATER
11996: PUSH
11997: LD_VAR 0 6
12001: PUSH
12002: LD_INT 0
12004: GREATER
12005: AND
12006: IFFALSE 12017
// ComExitBuilding ( sci_list ) ;
12008: LD_VAR 0 6
12012: PPUSH
12013: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12017: LD_VAR 0 11
12021: PUSH
12022: LD_INT 0
12024: GREATER
12025: PUSH
12026: LD_VAR 0 7
12030: PUSH
12031: LD_INT 0
12033: GREATER
12034: AND
12035: IFFALSE 12055
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12037: LD_VAR 0 7
12041: PPUSH
12042: LD_VAR 0 11
12046: PUSH
12047: LD_INT 1
12049: ARRAY
12050: PPUSH
12051: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12055: LD_VAR 0 10
12059: PUSH
12060: LD_INT 0
12062: EQUAL
12063: PUSH
12064: LD_VAR 0 11
12068: PUSH
12069: LD_INT 0
12071: EQUAL
12072: AND
12073: PUSH
12074: LD_VAR 0 7
12078: PUSH
12079: LD_INT 0
12081: GREATER
12082: AND
12083: IFFALSE 12188
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12085: LD_ADDR_VAR 0 12
12089: PUSH
12090: LD_INT 22
12092: PUSH
12093: LD_VAR 0 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 21
12104: PUSH
12105: LD_INT 3
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: LD_INT 8
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12132: LD_ADDR_VAR 0 13
12136: PUSH
12137: LD_INT 1
12139: PPUSH
12140: LD_VAR 0 12
12144: PPUSH
12145: CALL_OW 12
12149: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12150: LD_VAR 0 7
12154: PPUSH
12155: LD_INT 3
12157: PUSH
12158: LD_INT 60
12160: PUSH
12161: EMPTY
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 72
12172: PPUSH
12173: LD_VAR 0 12
12177: PUSH
12178: LD_VAR 0 13
12182: ARRAY
12183: PPUSH
12184: CALL_OW 120
// end ; end ;
12188: LD_VAR 0 5
12192: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12193: LD_INT 0
12195: PPUSH
12196: PPUSH
12197: PPUSH
12198: PPUSH
12199: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12200: LD_ADDR_VAR 0 6
12204: PUSH
12205: LD_INT 22
12207: PUSH
12208: LD_VAR 0 1
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 2
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 31
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: LD_INT 32
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 30
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 30
12252: PUSH
12253: LD_INT 4
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 30
12262: PUSH
12263: LD_INT 5
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12287: LD_ADDR_VAR 0 7
12291: PUSH
12292: LD_INT 22
12294: PUSH
12295: LD_VAR 0 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 21
12306: PUSH
12307: LD_INT 3
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 58
12316: PUSH
12317: EMPTY
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12330: LD_VAR 0 6
12334: PUSH
12335: LD_INT 0
12337: GREATER
12338: PUSH
12339: LD_VAR 0 7
12343: PUSH
12344: LD_INT 0
12346: GREATER
12347: AND
12348: IFFALSE 12418
// begin for i in turretsList do
12350: LD_ADDR_VAR 0 4
12354: PUSH
12355: LD_VAR 0 6
12359: PUSH
12360: FOR_IN
12361: IFFALSE 12416
// begin for j in enemyBuildings do
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_VAR 0 7
12372: PUSH
12373: FOR_IN
12374: IFFALSE 12412
// begin if GetDistUnits ( i , j ) < 20 then
12376: LD_VAR 0 4
12380: PPUSH
12381: LD_VAR 0 5
12385: PPUSH
12386: CALL_OW 296
12390: PUSH
12391: LD_INT 20
12393: LESS
12394: IFFALSE 12410
// begin ComAttackUnit ( i , j ) ;
12396: LD_VAR 0 4
12400: PPUSH
12401: LD_VAR 0 5
12405: PPUSH
12406: CALL_OW 115
// end ; end ;
12410: GO 12373
12412: POP
12413: POP
// end ;
12414: GO 12360
12416: POP
12417: POP
// end ; end ;
12418: LD_VAR 0 3
12422: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12423: LD_INT 0
12425: PPUSH
12426: PPUSH
12427: PPUSH
12428: PPUSH
12429: PPUSH
12430: PPUSH
12431: PPUSH
12432: PPUSH
12433: PPUSH
12434: PPUSH
12435: PPUSH
// for i = 1 to medicCount do
12436: LD_ADDR_VAR 0 14
12440: PUSH
12441: DOUBLE
12442: LD_INT 1
12444: DEC
12445: ST_TO_ADDR
12446: LD_VAR 0 7
12450: PUSH
12451: FOR_TO
12452: IFFALSE 12534
// begin uc_side = side ;
12454: LD_ADDR_OWVAR 20
12458: PUSH
12459: LD_VAR 0 1
12463: ST_TO_ADDR
// uc_nation = nation ;
12464: LD_ADDR_OWVAR 21
12468: PUSH
12469: LD_VAR 0 2
12473: ST_TO_ADDR
// hc_name =  ;
12474: LD_ADDR_OWVAR 26
12478: PUSH
12479: LD_STRING 
12481: ST_TO_ADDR
// hc_gallery =  ;
12482: LD_ADDR_OWVAR 33
12486: PUSH
12487: LD_STRING 
12489: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12490: LD_INT 0
12492: PPUSH
12493: LD_INT 4
12495: PPUSH
12496: LD_VAR 0 8
12500: PPUSH
12501: CALL_OW 380
// un = CreateHuman ;
12505: LD_ADDR_VAR 0 16
12509: PUSH
12510: CALL_OW 44
12514: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12515: LD_VAR 0 16
12519: PPUSH
12520: LD_VAR 0 9
12524: PPUSH
12525: LD_INT 0
12527: PPUSH
12528: CALL_OW 49
// end ;
12532: GO 12451
12534: POP
12535: POP
// for i = 1 to soldierCount do
12536: LD_ADDR_VAR 0 14
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_VAR 0 3
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12634
// begin uc_side = side ;
12554: LD_ADDR_OWVAR 20
12558: PUSH
12559: LD_VAR 0 1
12563: ST_TO_ADDR
// uc_nation = nation ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_VAR 0 2
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// hc_gallery =  ;
12582: LD_ADDR_OWVAR 33
12586: PUSH
12587: LD_STRING 
12589: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12590: LD_INT 0
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: LD_VAR 0 8
12600: PPUSH
12601: CALL_OW 380
// un = CreateHuman ;
12605: LD_ADDR_VAR 0 16
12609: PUSH
12610: CALL_OW 44
12614: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12615: LD_VAR 0 16
12619: PPUSH
12620: LD_VAR 0 9
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12551
12634: POP
12635: POP
// for i = 1 to sniperCount do
12636: LD_ADDR_VAR 0 14
12640: PUSH
12641: DOUBLE
12642: LD_INT 1
12644: DEC
12645: ST_TO_ADDR
12646: LD_VAR 0 4
12650: PUSH
12651: FOR_TO
12652: IFFALSE 12734
// begin uc_side = side ;
12654: LD_ADDR_OWVAR 20
12658: PUSH
12659: LD_VAR 0 1
12663: ST_TO_ADDR
// uc_nation = nation ;
12664: LD_ADDR_OWVAR 21
12668: PUSH
12669: LD_VAR 0 2
12673: ST_TO_ADDR
// hc_name =  ;
12674: LD_ADDR_OWVAR 26
12678: PUSH
12679: LD_STRING 
12681: ST_TO_ADDR
// hc_gallery =  ;
12682: LD_ADDR_OWVAR 33
12686: PUSH
12687: LD_STRING 
12689: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12690: LD_INT 0
12692: PPUSH
12693: LD_INT 5
12695: PPUSH
12696: LD_VAR 0 8
12700: PPUSH
12701: CALL_OW 380
// un = CreateHuman ;
12705: LD_ADDR_VAR 0 16
12709: PUSH
12710: CALL_OW 44
12714: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12715: LD_VAR 0 16
12719: PPUSH
12720: LD_VAR 0 9
12724: PPUSH
12725: LD_INT 0
12727: PPUSH
12728: CALL_OW 49
// end ;
12732: GO 12651
12734: POP
12735: POP
// for i = 1 to bazookCount do
12736: LD_ADDR_VAR 0 14
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_VAR 0 5
12750: PUSH
12751: FOR_TO
12752: IFFALSE 12834
// begin uc_side = side ;
12754: LD_ADDR_OWVAR 20
12758: PUSH
12759: LD_VAR 0 1
12763: ST_TO_ADDR
// uc_nation = nation ;
12764: LD_ADDR_OWVAR 21
12768: PUSH
12769: LD_VAR 0 2
12773: ST_TO_ADDR
// hc_name =  ;
12774: LD_ADDR_OWVAR 26
12778: PUSH
12779: LD_STRING 
12781: ST_TO_ADDR
// hc_gallery =  ;
12782: LD_ADDR_OWVAR 33
12786: PUSH
12787: LD_STRING 
12789: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12790: LD_INT 0
12792: PPUSH
12793: LD_INT 9
12795: PPUSH
12796: LD_VAR 0 8
12800: PPUSH
12801: CALL_OW 380
// un = CreateHuman ;
12805: LD_ADDR_VAR 0 16
12809: PUSH
12810: CALL_OW 44
12814: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12815: LD_VAR 0 16
12819: PPUSH
12820: LD_VAR 0 9
12824: PPUSH
12825: LD_INT 0
12827: PPUSH
12828: CALL_OW 49
// end ;
12832: GO 12751
12834: POP
12835: POP
// for i = 1 to mortalCount do
12836: LD_ADDR_VAR 0 14
12840: PUSH
12841: DOUBLE
12842: LD_INT 1
12844: DEC
12845: ST_TO_ADDR
12846: LD_VAR 0 6
12850: PUSH
12851: FOR_TO
12852: IFFALSE 12934
// begin uc_side = side ;
12854: LD_ADDR_OWVAR 20
12858: PUSH
12859: LD_VAR 0 1
12863: ST_TO_ADDR
// uc_nation = nation ;
12864: LD_ADDR_OWVAR 21
12868: PUSH
12869: LD_VAR 0 2
12873: ST_TO_ADDR
// hc_name =  ;
12874: LD_ADDR_OWVAR 26
12878: PUSH
12879: LD_STRING 
12881: ST_TO_ADDR
// hc_gallery =  ;
12882: LD_ADDR_OWVAR 33
12886: PUSH
12887: LD_STRING 
12889: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12890: LD_INT 0
12892: PPUSH
12893: LD_INT 8
12895: PPUSH
12896: LD_VAR 0 8
12900: PPUSH
12901: CALL_OW 380
// un = CreateHuman ;
12905: LD_ADDR_VAR 0 16
12909: PUSH
12910: CALL_OW 44
12914: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12915: LD_VAR 0 16
12919: PPUSH
12920: LD_VAR 0 9
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL_OW 49
// end ;
12932: GO 12851
12934: POP
12935: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12936: LD_ADDR_VAR 0 19
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_VAR 0 1
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: LD_INT 25
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 25
12968: PUSH
12969: LD_INT 5
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 25
12978: PUSH
12979: LD_INT 8
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 25
12988: PUSH
12989: LD_INT 9
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13012: LD_ADDR_VAR 0 18
13016: PUSH
13017: LD_INT 22
13019: PUSH
13020: LD_VAR 0 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 25
13031: PUSH
13032: LD_INT 4
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PPUSH
13043: CALL_OW 69
13047: ST_TO_ADDR
// for i in medic_list do
13048: LD_ADDR_VAR 0 14
13052: PUSH
13053: LD_VAR 0 18
13057: PUSH
13058: FOR_IN
13059: IFFALSE 13077
// ComMoveToArea ( i , healArea ) ;
13061: LD_VAR 0 14
13065: PPUSH
13066: LD_VAR 0 10
13070: PPUSH
13071: CALL_OW 113
13075: GO 13058
13077: POP
13078: POP
// if strategy = 1 then
13079: LD_VAR 0 12
13083: PUSH
13084: LD_INT 1
13086: EQUAL
13087: IFFALSE 13633
// begin repeat wait ( 0 0$3 ) ;
13089: LD_INT 105
13091: PPUSH
13092: CALL_OW 67
// for i in soldiersOK_list do
13096: LD_ADDR_VAR 0 14
13100: PUSH
13101: LD_VAR 0 19
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13171
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13109: LD_VAR 0 14
13113: PPUSH
13114: LD_INT 91
13116: PPUSH
13117: LD_INT 63
13119: PPUSH
13120: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13124: LD_VAR 0 14
13128: PPUSH
13129: LD_INT 101
13131: PPUSH
13132: LD_INT 53
13134: PPUSH
13135: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13139: LD_VAR 0 14
13143: PPUSH
13144: LD_INT 75
13146: PPUSH
13147: LD_INT 23
13149: PPUSH
13150: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13154: LD_VAR 0 14
13158: PPUSH
13159: LD_INT 78
13161: PPUSH
13162: LD_INT 8
13164: PPUSH
13165: CALL_OW 174
// end ;
13169: GO 13106
13171: POP
13172: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13173: LD_INT 12
13175: PPUSH
13176: LD_INT 22
13178: PUSH
13179: LD_VAR 0 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PPUSH
13188: CALL_OW 70
13192: PUSH
13193: LD_INT 2
13195: GREATER
13196: IFFALSE 13089
// repeat wait ( 0 0$1 ) ;
13198: LD_INT 35
13200: PPUSH
13201: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13205: LD_ADDR_VAR 0 17
13209: PUSH
13210: LD_INT 22
13212: PUSH
13213: LD_VAR 0 1
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 1
13224: PUSH
13225: LD_INT 3
13227: PUSH
13228: LD_INT 24
13230: PUSH
13231: LD_INT 550
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 24
13244: PUSH
13245: LD_INT 250
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PPUSH
13261: CALL_OW 69
13265: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13266: LD_ADDR_VAR 0 19
13270: PUSH
13271: LD_INT 22
13273: PUSH
13274: LD_VAR 0 1
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 2
13285: PUSH
13286: LD_INT 25
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 25
13298: PUSH
13299: LD_INT 5
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 25
13308: PUSH
13309: LD_INT 8
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 9
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 24
13335: PUSH
13336: LD_INT 1000
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: PPUSH
13348: CALL_OW 69
13352: ST_TO_ADDR
// if medicCount > 0 then
13353: LD_VAR 0 7
13357: PUSH
13358: LD_INT 0
13360: GREATER
13361: IFFALSE 13435
// begin if damageUnit_list > 0 then
13363: LD_VAR 0 17
13367: PUSH
13368: LD_INT 0
13370: GREATER
13371: IFFALSE 13435
// begin for i in damageUnit_list do
13373: LD_ADDR_VAR 0 14
13377: PUSH
13378: LD_VAR 0 17
13382: PUSH
13383: FOR_IN
13384: IFFALSE 13433
// begin ComMoveToArea ( i , healArea ) ;
13386: LD_VAR 0 14
13390: PPUSH
13391: LD_VAR 0 10
13395: PPUSH
13396: CALL_OW 113
// for j in medic_list do
13400: LD_ADDR_VAR 0 15
13404: PUSH
13405: LD_VAR 0 18
13409: PUSH
13410: FOR_IN
13411: IFFALSE 13429
// AddComHeal ( j , i ) ;
13413: LD_VAR 0 15
13417: PPUSH
13418: LD_VAR 0 14
13422: PPUSH
13423: CALL_OW 188
13427: GO 13410
13429: POP
13430: POP
// end ;
13431: GO 13383
13433: POP
13434: POP
// end ; end ; for i in soldiersOK_list do
13435: LD_ADDR_VAR 0 14
13439: PUSH
13440: LD_VAR 0 19
13444: PUSH
13445: FOR_IN
13446: IFFALSE 13622
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13448: LD_ADDR_VAR 0 22
13452: PUSH
13453: LD_INT 22
13455: PUSH
13456: LD_VAR 0 11
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: PPUSH
13470: LD_VAR 0 14
13474: PPUSH
13475: CALL_OW 74
13479: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13480: LD_ADDR_VAR 0 23
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_VAR 0 11
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 2
13499: PUSH
13500: LD_INT 59
13502: PUSH
13503: EMPTY
13504: LIST
13505: PUSH
13506: LD_INT 21
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 21
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: PPUSH
13544: LD_VAR 0 14
13548: PPUSH
13549: CALL_OW 74
13553: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13554: LD_VAR 0 14
13558: PPUSH
13559: LD_VAR 0 22
13563: PPUSH
13564: CALL_OW 296
13568: PUSH
13569: LD_INT 6
13571: PLUS
13572: PUSH
13573: LD_VAR 0 14
13577: PPUSH
13578: LD_VAR 0 23
13582: PPUSH
13583: CALL_OW 296
13587: LESS
13588: IFFALSE 13606
// begin ComAttackUnit ( i , target1 ) ;
13590: LD_VAR 0 14
13594: PPUSH
13595: LD_VAR 0 22
13599: PPUSH
13600: CALL_OW 115
// end else
13604: GO 13620
// begin ComAttackUnit ( i , target2 ) ;
13606: LD_VAR 0 14
13610: PPUSH
13611: LD_VAR 0 23
13615: PPUSH
13616: CALL_OW 115
// end ; end ;
13620: GO 13445
13622: POP
13623: POP
// until soldiersOK_list = [ ] ;
13624: LD_VAR 0 19
13628: PUSH
13629: EMPTY
13630: EQUAL
13631: IFFALSE 13198
// end ; if strategy = 2 then
13633: LD_VAR 0 12
13637: PUSH
13638: LD_INT 2
13640: EQUAL
13641: IFFALSE 14157
// begin repeat wait ( 0 0$1 ) ;
13643: LD_INT 35
13645: PPUSH
13646: CALL_OW 67
// for i in soldiersOK_list do
13650: LD_ADDR_VAR 0 14
13654: PUSH
13655: LD_VAR 0 19
13659: PUSH
13660: FOR_IN
13661: IFFALSE 13695
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13663: LD_VAR 0 14
13667: PPUSH
13668: LD_INT 91
13670: PPUSH
13671: LD_INT 63
13673: PPUSH
13674: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13678: LD_VAR 0 14
13682: PPUSH
13683: LD_INT 75
13685: PPUSH
13686: LD_INT 33
13688: PPUSH
13689: CALL_OW 174
// end ;
13693: GO 13660
13695: POP
13696: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13697: LD_INT 13
13699: PPUSH
13700: LD_INT 22
13702: PUSH
13703: LD_VAR 0 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PPUSH
13712: CALL_OW 70
13716: PUSH
13717: LD_INT 2
13719: GREATER
13720: IFFALSE 13643
// repeat wait ( 0 0$3 ) ;
13722: LD_INT 105
13724: PPUSH
13725: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13729: LD_ADDR_VAR 0 17
13733: PUSH
13734: LD_INT 22
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: LD_INT 24
13754: PUSH
13755: LD_INT 550
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 24
13768: PUSH
13769: LD_INT 250
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PPUSH
13785: CALL_OW 69
13789: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13790: LD_ADDR_VAR 0 19
13794: PUSH
13795: LD_INT 22
13797: PUSH
13798: LD_VAR 0 1
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 2
13809: PUSH
13810: LD_INT 25
13812: PUSH
13813: LD_INT 1
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 25
13822: PUSH
13823: LD_INT 5
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 25
13832: PUSH
13833: LD_INT 8
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 25
13842: PUSH
13843: LD_INT 9
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 24
13859: PUSH
13860: LD_INT 1000
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: ST_TO_ADDR
// if medicCount > 0 then
13877: LD_VAR 0 7
13881: PUSH
13882: LD_INT 0
13884: GREATER
13885: IFFALSE 13959
// begin if damageUnit_list > 0 then
13887: LD_VAR 0 17
13891: PUSH
13892: LD_INT 0
13894: GREATER
13895: IFFALSE 13959
// begin for i in damageUnit_list do
13897: LD_ADDR_VAR 0 14
13901: PUSH
13902: LD_VAR 0 17
13906: PUSH
13907: FOR_IN
13908: IFFALSE 13957
// begin ComMoveToArea ( i , healArea ) ;
13910: LD_VAR 0 14
13914: PPUSH
13915: LD_VAR 0 10
13919: PPUSH
13920: CALL_OW 113
// for j in medic_list do
13924: LD_ADDR_VAR 0 15
13928: PUSH
13929: LD_VAR 0 18
13933: PUSH
13934: FOR_IN
13935: IFFALSE 13953
// AddComHeal ( j , i ) ;
13937: LD_VAR 0 15
13941: PPUSH
13942: LD_VAR 0 14
13946: PPUSH
13947: CALL_OW 188
13951: GO 13934
13953: POP
13954: POP
// end ;
13955: GO 13907
13957: POP
13958: POP
// end ; end ; for i in soldiersOK_list do
13959: LD_ADDR_VAR 0 14
13963: PUSH
13964: LD_VAR 0 19
13968: PUSH
13969: FOR_IN
13970: IFFALSE 14146
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13972: LD_ADDR_VAR 0 22
13976: PUSH
13977: LD_INT 22
13979: PUSH
13980: LD_VAR 0 11
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PPUSH
13989: CALL_OW 69
13993: PPUSH
13994: LD_VAR 0 14
13998: PPUSH
13999: CALL_OW 74
14003: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14004: LD_ADDR_VAR 0 23
14008: PUSH
14009: LD_INT 22
14011: PUSH
14012: LD_VAR 0 11
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 59
14026: PUSH
14027: EMPTY
14028: LIST
14029: PUSH
14030: LD_INT 21
14032: PUSH
14033: LD_INT 1
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 2
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: PPUSH
14063: CALL_OW 69
14067: PPUSH
14068: LD_VAR 0 14
14072: PPUSH
14073: CALL_OW 74
14077: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14078: LD_VAR 0 14
14082: PPUSH
14083: LD_VAR 0 22
14087: PPUSH
14088: CALL_OW 296
14092: PUSH
14093: LD_INT 6
14095: PLUS
14096: PUSH
14097: LD_VAR 0 14
14101: PPUSH
14102: LD_VAR 0 23
14106: PPUSH
14107: CALL_OW 296
14111: LESS
14112: IFFALSE 14130
// begin ComAttackUnit ( i , target1 ) ;
14114: LD_VAR 0 14
14118: PPUSH
14119: LD_VAR 0 22
14123: PPUSH
14124: CALL_OW 115
// end else
14128: GO 14144
// begin ComAttackUnit ( i , target2 ) ;
14130: LD_VAR 0 14
14134: PPUSH
14135: LD_VAR 0 23
14139: PPUSH
14140: CALL_OW 115
// end ; end ;
14144: GO 13969
14146: POP
14147: POP
// until soldiersOK_list = [ ] ;
14148: LD_VAR 0 19
14152: PUSH
14153: EMPTY
14154: EQUAL
14155: IFFALSE 13722
// end ; if strategy = 3 then
14157: LD_VAR 0 12
14161: PUSH
14162: LD_INT 3
14164: EQUAL
14165: IFFALSE 14711
// begin repeat wait ( 0 0$3 ) ;
14167: LD_INT 105
14169: PPUSH
14170: CALL_OW 67
// for i in soldiersOK_list do
14174: LD_ADDR_VAR 0 14
14178: PUSH
14179: LD_VAR 0 19
14183: PUSH
14184: FOR_IN
14185: IFFALSE 14249
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14187: LD_VAR 0 14
14191: PPUSH
14192: LD_INT 63
14194: PPUSH
14195: LD_INT 71
14197: PPUSH
14198: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14202: LD_VAR 0 14
14206: PPUSH
14207: LD_INT 35
14209: PPUSH
14210: LD_INT 44
14212: PPUSH
14213: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14217: LD_VAR 0 14
14221: PPUSH
14222: LD_INT 23
14224: PPUSH
14225: LD_INT 18
14227: PPUSH
14228: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14232: LD_VAR 0 14
14236: PPUSH
14237: LD_INT 26
14239: PPUSH
14240: LD_INT 12
14242: PPUSH
14243: CALL_OW 174
// end ;
14247: GO 14184
14249: POP
14250: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14251: LD_INT 14
14253: PPUSH
14254: LD_INT 22
14256: PUSH
14257: LD_VAR 0 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 70
14270: PUSH
14271: LD_INT 2
14273: GREATER
14274: IFFALSE 14167
// repeat wait ( 0 0$1 ) ;
14276: LD_INT 35
14278: PPUSH
14279: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14283: LD_ADDR_VAR 0 17
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_VAR 0 1
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 1
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 24
14308: PUSH
14309: LD_INT 550
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 24
14322: PUSH
14323: LD_INT 250
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 69
14343: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14344: LD_ADDR_VAR 0 19
14348: PUSH
14349: LD_INT 22
14351: PUSH
14352: LD_VAR 0 1
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 25
14376: PUSH
14377: LD_INT 5
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 25
14386: PUSH
14387: LD_INT 8
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 25
14396: PUSH
14397: LD_INT 9
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 24
14413: PUSH
14414: LD_INT 1000
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: PPUSH
14426: CALL_OW 69
14430: ST_TO_ADDR
// if medicCount > 0 then
14431: LD_VAR 0 7
14435: PUSH
14436: LD_INT 0
14438: GREATER
14439: IFFALSE 14513
// begin if damageUnit_list > 0 then
14441: LD_VAR 0 17
14445: PUSH
14446: LD_INT 0
14448: GREATER
14449: IFFALSE 14513
// begin for i in damageUnit_list do
14451: LD_ADDR_VAR 0 14
14455: PUSH
14456: LD_VAR 0 17
14460: PUSH
14461: FOR_IN
14462: IFFALSE 14511
// begin ComMoveToArea ( i , healArea ) ;
14464: LD_VAR 0 14
14468: PPUSH
14469: LD_VAR 0 10
14473: PPUSH
14474: CALL_OW 113
// for j in medic_list do
14478: LD_ADDR_VAR 0 15
14482: PUSH
14483: LD_VAR 0 18
14487: PUSH
14488: FOR_IN
14489: IFFALSE 14507
// AddComHeal ( j , i ) ;
14491: LD_VAR 0 15
14495: PPUSH
14496: LD_VAR 0 14
14500: PPUSH
14501: CALL_OW 188
14505: GO 14488
14507: POP
14508: POP
// end ;
14509: GO 14461
14511: POP
14512: POP
// end ; end ; for i in soldiersOK_list do
14513: LD_ADDR_VAR 0 14
14517: PUSH
14518: LD_VAR 0 19
14522: PUSH
14523: FOR_IN
14524: IFFALSE 14700
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14526: LD_ADDR_VAR 0 22
14530: PUSH
14531: LD_INT 22
14533: PUSH
14534: LD_VAR 0 11
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PPUSH
14543: CALL_OW 69
14547: PPUSH
14548: LD_VAR 0 14
14552: PPUSH
14553: CALL_OW 74
14557: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14558: LD_ADDR_VAR 0 23
14562: PUSH
14563: LD_INT 22
14565: PUSH
14566: LD_VAR 0 11
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: LD_INT 59
14580: PUSH
14581: EMPTY
14582: LIST
14583: PUSH
14584: LD_INT 21
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 21
14596: PUSH
14597: LD_INT 2
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: PPUSH
14617: CALL_OW 69
14621: PPUSH
14622: LD_VAR 0 14
14626: PPUSH
14627: CALL_OW 74
14631: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14632: LD_VAR 0 14
14636: PPUSH
14637: LD_VAR 0 22
14641: PPUSH
14642: CALL_OW 296
14646: PUSH
14647: LD_INT 6
14649: PLUS
14650: PUSH
14651: LD_VAR 0 14
14655: PPUSH
14656: LD_VAR 0 23
14660: PPUSH
14661: CALL_OW 296
14665: LESS
14666: IFFALSE 14684
// begin ComAttackUnit ( i , target1 ) ;
14668: LD_VAR 0 14
14672: PPUSH
14673: LD_VAR 0 22
14677: PPUSH
14678: CALL_OW 115
// end else
14682: GO 14698
// begin ComAttackUnit ( i , target2 ) ;
14684: LD_VAR 0 14
14688: PPUSH
14689: LD_VAR 0 23
14693: PPUSH
14694: CALL_OW 115
// end ; end ;
14698: GO 14523
14700: POP
14701: POP
// until soldiersOK_list = [ ] ;
14702: LD_VAR 0 19
14706: PUSH
14707: EMPTY
14708: EQUAL
14709: IFFALSE 14276
// end ; end ;
14711: LD_VAR 0 13
14715: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14716: LD_INT 0
14718: PPUSH
14719: PPUSH
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
14725: PPUSH
14726: PPUSH
14727: PPUSH
14728: PPUSH
// amChassisTab = [ ] ;
14729: LD_ADDR_VAR 0 19
14733: PUSH
14734: EMPTY
14735: ST_TO_ADDR
// arChassisTab = [ ] ;
14736: LD_ADDR_VAR 0 18
14740: PUSH
14741: EMPTY
14742: ST_TO_ADDR
// ruChassisTab = [ ] ;
14743: LD_ADDR_VAR 0 17
14747: PUSH
14748: EMPTY
14749: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14750: LD_INT 35
14752: PPUSH
14753: CALL_OW 67
// if nation = 1 then
14757: LD_VAR 0 5
14761: PUSH
14762: LD_INT 1
14764: EQUAL
14765: IFFALSE 15256
// begin uc_side = side ;
14767: LD_ADDR_OWVAR 20
14771: PUSH
14772: LD_VAR 0 2
14776: ST_TO_ADDR
// uc_nation = nation ;
14777: LD_ADDR_OWVAR 21
14781: PUSH
14782: LD_VAR 0 5
14786: ST_TO_ADDR
// vc_engine = vehengine ;
14787: LD_ADDR_OWVAR 39
14791: PUSH
14792: LD_VAR 0 6
14796: ST_TO_ADDR
// vc_control = vehcontrol ;
14797: LD_ADDR_OWVAR 38
14801: PUSH
14802: LD_VAR 0 7
14806: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14807: LD_ADDR_OWVAR 40
14811: PUSH
14812: LD_VAR 0 10
14816: PUSH
14817: LD_INT 1
14819: PPUSH
14820: LD_VAR 0 10
14824: PPUSH
14825: CALL_OW 12
14829: ARRAY
14830: ST_TO_ADDR
// for j = 1 to AMWeapon do
14831: LD_ADDR_VAR 0 14
14835: PUSH
14836: DOUBLE
14837: LD_INT 1
14839: DEC
14840: ST_TO_ADDR
14841: LD_VAR 0 10
14845: PUSH
14846: FOR_TO
14847: IFFALSE 15148
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14849: LD_VAR 0 10
14853: PUSH
14854: LD_VAR 0 14
14858: ARRAY
14859: PUSH
14860: LD_INT 2
14862: EQUAL
14863: PUSH
14864: LD_VAR 0 10
14868: PUSH
14869: LD_VAR 0 14
14873: ARRAY
14874: PUSH
14875: LD_INT 3
14877: EQUAL
14878: OR
14879: IFFALSE 14932
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14881: LD_ADDR_VAR 0 19
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: LD_INT 2
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14908: LD_ADDR_OWVAR 37
14912: PUSH
14913: LD_VAR 0 19
14917: PUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_VAR 0 19
14925: PPUSH
14926: CALL_OW 12
14930: ARRAY
14931: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14932: LD_VAR 0 10
14936: PUSH
14937: LD_VAR 0 14
14941: ARRAY
14942: PUSH
14943: LD_INT 4
14945: EQUAL
14946: PUSH
14947: LD_VAR 0 10
14951: PUSH
14952: LD_VAR 0 14
14956: ARRAY
14957: PUSH
14958: LD_INT 5
14960: EQUAL
14961: OR
14962: PUSH
14963: LD_VAR 0 10
14967: PUSH
14968: LD_VAR 0 14
14972: ARRAY
14973: PUSH
14974: LD_INT 9
14976: EQUAL
14977: OR
14978: PUSH
14979: LD_VAR 0 10
14983: PUSH
14984: LD_VAR 0 14
14988: ARRAY
14989: PUSH
14990: LD_INT 11
14992: EQUAL
14993: OR
14994: PUSH
14995: LD_VAR 0 10
14999: PUSH
15000: LD_VAR 0 14
15004: ARRAY
15005: PUSH
15006: LD_INT 7
15008: EQUAL
15009: OR
15010: IFFALSE 15059
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15012: LD_ADDR_VAR 0 19
15016: PUSH
15017: LD_INT 2
15019: PUSH
15020: LD_INT 3
15022: PUSH
15023: LD_INT 4
15025: PUSH
15026: LD_INT 5
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15035: LD_ADDR_OWVAR 37
15039: PUSH
15040: LD_VAR 0 19
15044: PUSH
15045: LD_INT 1
15047: PPUSH
15048: LD_VAR 0 19
15052: PPUSH
15053: CALL_OW 12
15057: ARRAY
15058: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15059: LD_VAR 0 10
15063: PUSH
15064: LD_VAR 0 14
15068: ARRAY
15069: PUSH
15070: LD_INT 8
15072: EQUAL
15073: PUSH
15074: LD_VAR 0 10
15078: PUSH
15079: LD_VAR 0 14
15083: ARRAY
15084: PUSH
15085: LD_INT 6
15087: EQUAL
15088: OR
15089: PUSH
15090: LD_VAR 0 10
15094: PUSH
15095: LD_VAR 0 14
15099: ARRAY
15100: PUSH
15101: LD_INT 10
15103: EQUAL
15104: OR
15105: IFFALSE 15146
// begin amChassisTab = [ 4 , 5 ] ;
15107: LD_ADDR_VAR 0 19
15111: PUSH
15112: LD_INT 4
15114: PUSH
15115: LD_INT 5
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15122: LD_ADDR_OWVAR 37
15126: PUSH
15127: LD_VAR 0 19
15131: PUSH
15132: LD_INT 1
15134: PPUSH
15135: LD_VAR 0 19
15139: PPUSH
15140: CALL_OW 12
15144: ARRAY
15145: ST_TO_ADDR
// end ; end ;
15146: GO 14846
15148: POP
15149: POP
// veh = CreateVehicle ;
15150: LD_ADDR_VAR 0 16
15154: PUSH
15155: CALL_OW 45
15159: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15160: LD_VAR 0 16
15164: PPUSH
15165: LD_VAR 0 1
15169: PPUSH
15170: LD_INT 0
15172: PPUSH
15173: CALL_OW 49
// if vehControl = 1 then
15177: LD_VAR 0 7
15181: PUSH
15182: LD_INT 1
15184: EQUAL
15185: IFFALSE 15242
// begin hc_gallery =  ;
15187: LD_ADDR_OWVAR 33
15191: PUSH
15192: LD_STRING 
15194: ST_TO_ADDR
// hc_name =  ;
15195: LD_ADDR_OWVAR 26
15199: PUSH
15200: LD_STRING 
15202: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15203: LD_INT 0
15205: PPUSH
15206: LD_INT 3
15208: PPUSH
15209: LD_VAR 0 4
15213: PPUSH
15214: CALL_OW 380
// un = CreateHuman ;
15218: LD_ADDR_VAR 0 15
15222: PUSH
15223: CALL_OW 44
15227: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15228: LD_VAR 0 15
15232: PPUSH
15233: LD_VAR 0 16
15237: PPUSH
15238: CALL_OW 52
// end ; i = i + 1 ;
15242: LD_ADDR_VAR 0 13
15246: PUSH
15247: LD_VAR 0 13
15251: PUSH
15252: LD_INT 1
15254: PLUS
15255: ST_TO_ADDR
// end ; if nation = 2 then
15256: LD_VAR 0 5
15260: PUSH
15261: LD_INT 2
15263: EQUAL
15264: IFFALSE 15688
// begin uc_side = side ;
15266: LD_ADDR_OWVAR 20
15270: PUSH
15271: LD_VAR 0 2
15275: ST_TO_ADDR
// uc_nation = nation ;
15276: LD_ADDR_OWVAR 21
15280: PUSH
15281: LD_VAR 0 5
15285: ST_TO_ADDR
// vc_engine = vehengine ;
15286: LD_ADDR_OWVAR 39
15290: PUSH
15291: LD_VAR 0 6
15295: ST_TO_ADDR
// vc_control = vehcontrol ;
15296: LD_ADDR_OWVAR 38
15300: PUSH
15301: LD_VAR 0 7
15305: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15306: LD_ADDR_OWVAR 40
15310: PUSH
15311: LD_VAR 0 9
15315: PUSH
15316: LD_INT 1
15318: PPUSH
15319: LD_VAR 0 9
15323: PPUSH
15324: CALL_OW 12
15328: ARRAY
15329: ST_TO_ADDR
// for j = 1 to ARWeapons do
15330: LD_ADDR_VAR 0 14
15334: PUSH
15335: DOUBLE
15336: LD_INT 1
15338: DEC
15339: ST_TO_ADDR
15340: LD_VAR 0 9
15344: PUSH
15345: FOR_TO
15346: IFFALSE 15580
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15348: LD_VAR 0 9
15352: PUSH
15353: LD_VAR 0 14
15357: ARRAY
15358: PUSH
15359: LD_INT 24
15361: EQUAL
15362: PUSH
15363: LD_VAR 0 9
15367: PUSH
15368: LD_VAR 0 14
15372: ARRAY
15373: PUSH
15374: LD_INT 22
15376: EQUAL
15377: OR
15378: PUSH
15379: LD_VAR 0 9
15383: PUSH
15384: LD_VAR 0 14
15388: ARRAY
15389: PUSH
15390: LD_INT 23
15392: EQUAL
15393: OR
15394: PUSH
15395: LD_VAR 0 9
15399: PUSH
15400: LD_VAR 0 14
15404: ARRAY
15405: PUSH
15406: LD_INT 30
15408: EQUAL
15409: OR
15410: IFFALSE 15459
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15412: LD_ADDR_VAR 0 18
15416: PUSH
15417: LD_INT 11
15419: PUSH
15420: LD_INT 12
15422: PUSH
15423: LD_INT 13
15425: PUSH
15426: LD_INT 14
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15435: LD_ADDR_OWVAR 37
15439: PUSH
15440: LD_VAR 0 18
15444: PUSH
15445: LD_INT 1
15447: PPUSH
15448: LD_VAR 0 18
15452: PPUSH
15453: CALL_OW 12
15457: ARRAY
15458: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15459: LD_VAR 0 9
15463: PUSH
15464: LD_VAR 0 14
15468: ARRAY
15469: PUSH
15470: LD_INT 29
15472: EQUAL
15473: PUSH
15474: LD_VAR 0 9
15478: PUSH
15479: LD_VAR 0 14
15483: ARRAY
15484: PUSH
15485: LD_INT 28
15487: EQUAL
15488: OR
15489: PUSH
15490: LD_VAR 0 9
15494: PUSH
15495: LD_VAR 0 14
15499: ARRAY
15500: PUSH
15501: LD_INT 27
15503: EQUAL
15504: OR
15505: PUSH
15506: LD_VAR 0 9
15510: PUSH
15511: LD_VAR 0 14
15515: ARRAY
15516: PUSH
15517: LD_INT 26
15519: EQUAL
15520: OR
15521: PUSH
15522: LD_VAR 0 9
15526: PUSH
15527: LD_VAR 0 14
15531: ARRAY
15532: PUSH
15533: LD_INT 25
15535: EQUAL
15536: OR
15537: IFFALSE 15578
// begin arChassisTab = [ 13 , 14 ] ;
15539: LD_ADDR_VAR 0 18
15543: PUSH
15544: LD_INT 13
15546: PUSH
15547: LD_INT 14
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15554: LD_ADDR_OWVAR 37
15558: PUSH
15559: LD_VAR 0 18
15563: PUSH
15564: LD_INT 1
15566: PPUSH
15567: LD_VAR 0 18
15571: PPUSH
15572: CALL_OW 12
15576: ARRAY
15577: ST_TO_ADDR
// end ; end ;
15578: GO 15345
15580: POP
15581: POP
// veh = CreateVehicle ;
15582: LD_ADDR_VAR 0 16
15586: PUSH
15587: CALL_OW 45
15591: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15592: LD_VAR 0 16
15596: PPUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: LD_INT 0
15604: PPUSH
15605: CALL_OW 49
// if vehcontrol = 1 then
15609: LD_VAR 0 7
15613: PUSH
15614: LD_INT 1
15616: EQUAL
15617: IFFALSE 15674
// begin hc_gallery =  ;
15619: LD_ADDR_OWVAR 33
15623: PUSH
15624: LD_STRING 
15626: ST_TO_ADDR
// hc_name =  ;
15627: LD_ADDR_OWVAR 26
15631: PUSH
15632: LD_STRING 
15634: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15635: LD_INT 0
15637: PPUSH
15638: LD_INT 3
15640: PPUSH
15641: LD_VAR 0 4
15645: PPUSH
15646: CALL_OW 380
// un = CreateHuman ;
15650: LD_ADDR_VAR 0 15
15654: PUSH
15655: CALL_OW 44
15659: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15660: LD_VAR 0 15
15664: PPUSH
15665: LD_VAR 0 16
15669: PPUSH
15670: CALL_OW 52
// end ; i = i + 1 ;
15674: LD_ADDR_VAR 0 13
15678: PUSH
15679: LD_VAR 0 13
15683: PUSH
15684: LD_INT 1
15686: PLUS
15687: ST_TO_ADDR
// end ; if nation = 3 then
15688: LD_VAR 0 5
15692: PUSH
15693: LD_INT 3
15695: EQUAL
15696: IFFALSE 16088
// begin uc_side = side ;
15698: LD_ADDR_OWVAR 20
15702: PUSH
15703: LD_VAR 0 2
15707: ST_TO_ADDR
// uc_nation = nation ;
15708: LD_ADDR_OWVAR 21
15712: PUSH
15713: LD_VAR 0 5
15717: ST_TO_ADDR
// vc_engine = vehengine ;
15718: LD_ADDR_OWVAR 39
15722: PUSH
15723: LD_VAR 0 6
15727: ST_TO_ADDR
// vc_control = vehcontrol ;
15728: LD_ADDR_OWVAR 38
15732: PUSH
15733: LD_VAR 0 7
15737: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15738: LD_ADDR_OWVAR 40
15742: PUSH
15743: LD_VAR 0 8
15747: PUSH
15748: LD_INT 1
15750: PPUSH
15751: LD_VAR 0 8
15755: PPUSH
15756: CALL_OW 12
15760: ARRAY
15761: ST_TO_ADDR
// for j = 1 to RuWeapons do
15762: LD_ADDR_VAR 0 14
15766: PUSH
15767: DOUBLE
15768: LD_INT 1
15770: DEC
15771: ST_TO_ADDR
15772: LD_VAR 0 8
15776: PUSH
15777: FOR_TO
15778: IFFALSE 15980
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15780: LD_VAR 0 8
15784: PUSH
15785: LD_VAR 0 14
15789: ARRAY
15790: PUSH
15791: LD_INT 42
15793: EQUAL
15794: PUSH
15795: LD_VAR 0 8
15799: PUSH
15800: LD_VAR 0 14
15804: ARRAY
15805: PUSH
15806: LD_INT 43
15808: EQUAL
15809: OR
15810: PUSH
15811: LD_VAR 0 8
15815: PUSH
15816: LD_VAR 0 14
15820: ARRAY
15821: PUSH
15822: LD_INT 44
15824: EQUAL
15825: OR
15826: PUSH
15827: LD_VAR 0 8
15831: PUSH
15832: LD_VAR 0 14
15836: ARRAY
15837: PUSH
15838: LD_INT 45
15840: EQUAL
15841: OR
15842: PUSH
15843: LD_VAR 0 8
15847: PUSH
15848: LD_VAR 0 14
15852: ARRAY
15853: PUSH
15854: LD_INT 49
15856: EQUAL
15857: OR
15858: IFFALSE 15907
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15860: LD_ADDR_VAR 0 17
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 22
15870: PUSH
15871: LD_INT 23
15873: PUSH
15874: LD_INT 24
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15883: LD_ADDR_OWVAR 37
15887: PUSH
15888: LD_VAR 0 17
15892: PUSH
15893: LD_INT 1
15895: PPUSH
15896: LD_VAR 0 17
15900: PPUSH
15901: CALL_OW 12
15905: ARRAY
15906: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15907: LD_VAR 0 8
15911: PUSH
15912: LD_VAR 0 14
15916: ARRAY
15917: PUSH
15918: LD_INT 46
15920: EQUAL
15921: PUSH
15922: LD_VAR 0 8
15926: PUSH
15927: LD_VAR 0 14
15931: ARRAY
15932: PUSH
15933: LD_INT 47
15935: EQUAL
15936: OR
15937: IFFALSE 15978
// begin ruChassisTab = [ 23 , 24 ] ;
15939: LD_ADDR_VAR 0 17
15943: PUSH
15944: LD_INT 23
15946: PUSH
15947: LD_INT 24
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15954: LD_ADDR_OWVAR 37
15958: PUSH
15959: LD_VAR 0 17
15963: PUSH
15964: LD_INT 1
15966: PPUSH
15967: LD_VAR 0 17
15971: PPUSH
15972: CALL_OW 12
15976: ARRAY
15977: ST_TO_ADDR
// end ; end ;
15978: GO 15777
15980: POP
15981: POP
// veh = CreateVehicle ;
15982: LD_ADDR_VAR 0 16
15986: PUSH
15987: CALL_OW 45
15991: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15992: LD_VAR 0 16
15996: PPUSH
15997: LD_VAR 0 1
16001: PPUSH
16002: LD_INT 0
16004: PPUSH
16005: CALL_OW 49
// if vehcontrol = 1 then
16009: LD_VAR 0 7
16013: PUSH
16014: LD_INT 1
16016: EQUAL
16017: IFFALSE 16074
// begin hc_gallery =  ;
16019: LD_ADDR_OWVAR 33
16023: PUSH
16024: LD_STRING 
16026: ST_TO_ADDR
// hc_name =  ;
16027: LD_ADDR_OWVAR 26
16031: PUSH
16032: LD_STRING 
16034: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16035: LD_INT 0
16037: PPUSH
16038: LD_INT 3
16040: PPUSH
16041: LD_VAR 0 4
16045: PPUSH
16046: CALL_OW 380
// un = CreateHuman ;
16050: LD_ADDR_VAR 0 15
16054: PUSH
16055: CALL_OW 44
16059: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16060: LD_VAR 0 15
16064: PPUSH
16065: LD_VAR 0 16
16069: PPUSH
16070: CALL_OW 52
// end ; i = i + 1 ;
16074: LD_ADDR_VAR 0 13
16078: PUSH
16079: LD_VAR 0 13
16083: PUSH
16084: LD_INT 1
16086: PLUS
16087: ST_TO_ADDR
// end ; until i = vehCount ;
16088: LD_VAR 0 13
16092: PUSH
16093: LD_VAR 0 3
16097: EQUAL
16098: IFFALSE 14750
// repeat wait ( 0 0$1 ) ;
16100: LD_INT 35
16102: PPUSH
16103: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16107: LD_ADDR_VAR 0 20
16111: PUSH
16112: LD_INT 22
16114: PUSH
16115: LD_VAR 0 2
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 21
16126: PUSH
16127: LD_INT 2
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 24
16136: PUSH
16137: LD_INT 250
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: PPUSH
16149: CALL_OW 69
16153: ST_TO_ADDR
// if vehicleOK_list > 0 then
16154: LD_VAR 0 20
16158: PUSH
16159: LD_INT 0
16161: GREATER
16162: IFFALSE 16353
// begin for i in vehicleOK_list do
16164: LD_ADDR_VAR 0 13
16168: PUSH
16169: LD_VAR 0 20
16173: PUSH
16174: FOR_IN
16175: IFFALSE 16351
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16177: LD_ADDR_VAR 0 21
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_VAR 0 11
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PPUSH
16194: CALL_OW 69
16198: PPUSH
16199: LD_VAR 0 13
16203: PPUSH
16204: CALL_OW 74
16208: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16209: LD_ADDR_VAR 0 22
16213: PUSH
16214: LD_INT 22
16216: PUSH
16217: LD_VAR 0 11
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: LD_INT 59
16231: PUSH
16232: EMPTY
16233: LIST
16234: PUSH
16235: LD_INT 21
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 21
16247: PUSH
16248: LD_INT 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: PPUSH
16268: CALL_OW 69
16272: PPUSH
16273: LD_VAR 0 13
16277: PPUSH
16278: CALL_OW 74
16282: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16283: LD_VAR 0 13
16287: PPUSH
16288: LD_VAR 0 21
16292: PPUSH
16293: CALL_OW 296
16297: PUSH
16298: LD_INT 6
16300: PLUS
16301: PUSH
16302: LD_VAR 0 13
16306: PPUSH
16307: LD_VAR 0 22
16311: PPUSH
16312: CALL_OW 296
16316: LESS
16317: IFFALSE 16335
// begin ComAttackUnit ( i , target1 ) ;
16319: LD_VAR 0 13
16323: PPUSH
16324: LD_VAR 0 21
16328: PPUSH
16329: CALL_OW 115
// end else
16333: GO 16349
// begin ComAttackUnit ( i , target2 ) ;
16335: LD_VAR 0 13
16339: PPUSH
16340: LD_VAR 0 22
16344: PPUSH
16345: CALL_OW 115
// end ; end ;
16349: GO 16174
16351: POP
16352: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16353: LD_INT 22
16355: PUSH
16356: LD_VAR 0 2
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 21
16367: PUSH
16368: LD_INT 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 24
16377: PUSH
16378: LD_INT 250
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 69
16394: PUSH
16395: LD_INT 0
16397: EQUAL
16398: IFFALSE 16100
// end ;
16400: LD_VAR 0 12
16404: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16405: LD_INT 0
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16415: LD_ADDR_VAR 0 7
16419: PUSH
16420: LD_INT 22
16422: PUSH
16423: LD_VAR 0 1
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: LD_INT 3
16437: PUSH
16438: LD_INT 24
16440: PUSH
16441: LD_INT 550
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 24
16454: PUSH
16455: LD_INT 250
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PPUSH
16471: CALL_OW 69
16475: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16476: LD_ADDR_VAR 0 8
16480: PUSH
16481: LD_INT 22
16483: PUSH
16484: LD_VAR 0 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: LD_INT 25
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 25
16508: PUSH
16509: LD_INT 5
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 25
16518: PUSH
16519: LD_INT 8
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 25
16528: PUSH
16529: LD_INT 9
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 24
16545: PUSH
16546: LD_INT 1000
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16563: LD_ADDR_VAR 0 9
16567: PUSH
16568: LD_INT 22
16570: PUSH
16571: LD_VAR 0 1
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 25
16582: PUSH
16583: LD_INT 4
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PPUSH
16594: CALL_OW 69
16598: ST_TO_ADDR
// if medicCount > 0 then
16599: LD_VAR 0 9
16603: PUSH
16604: LD_INT 0
16606: GREATER
16607: IFFALSE 16681
// begin if damageUnit_list > 0 then
16609: LD_VAR 0 7
16613: PUSH
16614: LD_INT 0
16616: GREATER
16617: IFFALSE 16681
// begin for i in damageUnit_list do
16619: LD_ADDR_VAR 0 5
16623: PUSH
16624: LD_VAR 0 7
16628: PUSH
16629: FOR_IN
16630: IFFALSE 16679
// begin ComMoveToArea ( i , healArea ) ;
16632: LD_VAR 0 5
16636: PPUSH
16637: LD_VAR 0 2
16641: PPUSH
16642: CALL_OW 113
// for j in medicCount do
16646: LD_ADDR_VAR 0 6
16650: PUSH
16651: LD_VAR 0 9
16655: PUSH
16656: FOR_IN
16657: IFFALSE 16675
// AddComHeal ( j , i ) ;
16659: LD_VAR 0 6
16663: PPUSH
16664: LD_VAR 0 5
16668: PPUSH
16669: CALL_OW 188
16673: GO 16656
16675: POP
16676: POP
// end ;
16677: GO 16629
16679: POP
16680: POP
// end ; end ; if soldiersOK_list > 0 then
16681: LD_VAR 0 8
16685: PUSH
16686: LD_INT 0
16688: GREATER
16689: IFFALSE 16880
// begin for i in soldiersOK_list do
16691: LD_ADDR_VAR 0 5
16695: PUSH
16696: LD_VAR 0 8
16700: PUSH
16701: FOR_IN
16702: IFFALSE 16878
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16704: LD_ADDR_VAR 0 10
16708: PUSH
16709: LD_INT 22
16711: PUSH
16712: LD_VAR 0 3
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PPUSH
16721: CALL_OW 69
16725: PPUSH
16726: LD_VAR 0 5
16730: PPUSH
16731: CALL_OW 74
16735: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16736: LD_ADDR_VAR 0 11
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_VAR 0 3
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 59
16758: PUSH
16759: EMPTY
16760: LIST
16761: PUSH
16762: LD_INT 21
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 21
16774: PUSH
16775: LD_INT 2
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: PPUSH
16795: CALL_OW 69
16799: PPUSH
16800: LD_VAR 0 5
16804: PPUSH
16805: CALL_OW 74
16809: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16810: LD_VAR 0 5
16814: PPUSH
16815: LD_VAR 0 10
16819: PPUSH
16820: CALL_OW 296
16824: PUSH
16825: LD_INT 8
16827: PLUS
16828: PUSH
16829: LD_VAR 0 5
16833: PPUSH
16834: LD_VAR 0 11
16838: PPUSH
16839: CALL_OW 296
16843: LESS
16844: IFFALSE 16862
// begin ComAttackUnit ( i , target1 ) ;
16846: LD_VAR 0 5
16850: PPUSH
16851: LD_VAR 0 10
16855: PPUSH
16856: CALL_OW 115
// end else
16860: GO 16876
// begin ComAttackUnit ( i , target2 ) ;
16862: LD_VAR 0 5
16866: PPUSH
16867: LD_VAR 0 11
16871: PPUSH
16872: CALL_OW 115
// end ; end ;
16876: GO 16701
16878: POP
16879: POP
// end ; end ;
16880: LD_VAR 0 4
16884: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16885: LD_INT 0
16887: PPUSH
16888: PPUSH
// list := [ ] ;
16889: LD_ADDR_VAR 0 5
16893: PUSH
16894: EMPTY
16895: ST_TO_ADDR
// case d of 0 :
16896: LD_VAR 0 3
16900: PUSH
16901: LD_INT 0
16903: DOUBLE
16904: EQUAL
16905: IFTRUE 16909
16907: GO 17042
16909: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16910: LD_ADDR_VAR 0 5
16914: PUSH
16915: LD_VAR 0 1
16919: PUSH
16920: LD_INT 4
16922: MINUS
16923: PUSH
16924: LD_VAR 0 2
16928: PUSH
16929: LD_INT 4
16931: MINUS
16932: PUSH
16933: LD_INT 2
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_VAR 0 1
16945: PUSH
16946: LD_INT 3
16948: MINUS
16949: PUSH
16950: LD_VAR 0 2
16954: PUSH
16955: LD_INT 1
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: PUSH
16963: LD_VAR 0 1
16967: PUSH
16968: LD_INT 4
16970: PLUS
16971: PUSH
16972: LD_VAR 0 2
16976: PUSH
16977: LD_INT 4
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: PUSH
16985: LD_VAR 0 1
16989: PUSH
16990: LD_INT 3
16992: PLUS
16993: PUSH
16994: LD_VAR 0 2
16998: PUSH
16999: LD_INT 3
17001: PLUS
17002: PUSH
17003: LD_INT 5
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: PUSH
17011: LD_VAR 0 1
17015: PUSH
17016: LD_VAR 0 2
17020: PUSH
17021: LD_INT 4
17023: PLUS
17024: PUSH
17025: LD_INT 0
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: ST_TO_ADDR
// end ; 1 :
17040: GO 17740
17042: LD_INT 1
17044: DOUBLE
17045: EQUAL
17046: IFTRUE 17050
17048: GO 17183
17050: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
17051: LD_ADDR_VAR 0 5
17055: PUSH
17056: LD_VAR 0 1
17060: PUSH
17061: LD_VAR 0 2
17065: PUSH
17066: LD_INT 4
17068: MINUS
17069: PUSH
17070: LD_INT 3
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: LD_VAR 0 1
17082: PUSH
17083: LD_INT 3
17085: MINUS
17086: PUSH
17087: LD_VAR 0 2
17091: PUSH
17092: LD_INT 3
17094: MINUS
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: LD_VAR 0 1
17108: PUSH
17109: LD_INT 4
17111: MINUS
17112: PUSH
17113: LD_VAR 0 2
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: LD_VAR 0 1
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_INT 3
17138: PLUS
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: PUSH
17148: LD_VAR 0 1
17152: PUSH
17153: LD_INT 4
17155: PLUS
17156: PUSH
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 4
17164: PLUS
17165: PUSH
17166: LD_INT 5
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: ST_TO_ADDR
// end ; 2 :
17181: GO 17740
17183: LD_INT 2
17185: DOUBLE
17186: EQUAL
17187: IFTRUE 17191
17189: GO 17320
17191: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17192: LD_ADDR_VAR 0 5
17196: PUSH
17197: LD_VAR 0 1
17201: PUSH
17202: LD_VAR 0 2
17206: PUSH
17207: LD_INT 3
17209: MINUS
17210: PUSH
17211: LD_INT 3
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: PUSH
17219: LD_VAR 0 1
17223: PUSH
17224: LD_INT 4
17226: PLUS
17227: PUSH
17228: LD_VAR 0 2
17232: PUSH
17233: LD_INT 4
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: LD_VAR 0 1
17245: PUSH
17246: LD_VAR 0 2
17250: PUSH
17251: LD_INT 4
17253: PLUS
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: PUSH
17263: LD_VAR 0 1
17267: PUSH
17268: LD_INT 3
17270: MINUS
17271: PUSH
17272: LD_VAR 0 2
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: LD_VAR 0 1
17289: PUSH
17290: LD_INT 4
17292: MINUS
17293: PUSH
17294: LD_VAR 0 2
17298: PUSH
17299: LD_INT 4
17301: MINUS
17302: PUSH
17303: LD_INT 2
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: ST_TO_ADDR
// end ; 3 :
17318: GO 17740
17320: LD_INT 3
17322: DOUBLE
17323: EQUAL
17324: IFTRUE 17328
17326: GO 17461
17328: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17329: LD_ADDR_VAR 0 5
17333: PUSH
17334: LD_VAR 0 1
17338: PUSH
17339: LD_INT 3
17341: PLUS
17342: PUSH
17343: LD_VAR 0 2
17347: PUSH
17348: LD_INT 4
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: LD_VAR 0 1
17360: PUSH
17361: LD_INT 4
17363: PLUS
17364: PUSH
17365: LD_VAR 0 2
17369: PUSH
17370: LD_INT 4
17372: PLUS
17373: PUSH
17374: LD_INT 5
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: PUSH
17382: LD_VAR 0 1
17386: PUSH
17387: LD_INT 4
17389: MINUS
17390: PUSH
17391: LD_VAR 0 2
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: LIST
17403: PUSH
17404: LD_VAR 0 1
17408: PUSH
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 4
17416: MINUS
17417: PUSH
17418: LD_INT 3
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: LD_VAR 0 1
17430: PUSH
17431: LD_INT 3
17433: MINUS
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 3
17442: MINUS
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: ST_TO_ADDR
// end ; 4 :
17459: GO 17740
17461: LD_INT 4
17463: DOUBLE
17464: EQUAL
17465: IFTRUE 17469
17467: GO 17602
17469: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17470: LD_ADDR_VAR 0 5
17474: PUSH
17475: LD_VAR 0 1
17479: PUSH
17480: LD_VAR 0 2
17484: PUSH
17485: LD_INT 4
17487: PLUS
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_VAR 0 1
17501: PUSH
17502: LD_INT 3
17504: PLUS
17505: PUSH
17506: LD_VAR 0 2
17510: PUSH
17511: LD_INT 3
17513: PLUS
17514: PUSH
17515: LD_INT 5
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: PUSH
17523: LD_VAR 0 1
17527: PUSH
17528: LD_INT 3
17530: PLUS
17531: PUSH
17532: LD_VAR 0 2
17536: PUSH
17537: LD_INT 4
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: PUSH
17545: LD_VAR 0 1
17549: PUSH
17550: LD_VAR 0 2
17554: PUSH
17555: LD_INT 3
17557: MINUS
17558: PUSH
17559: LD_INT 3
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: LD_VAR 0 1
17571: PUSH
17572: LD_INT 4
17574: MINUS
17575: PUSH
17576: LD_VAR 0 2
17580: PUSH
17581: LD_INT 4
17583: MINUS
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: ST_TO_ADDR
// end ; 5 :
17600: GO 17740
17602: LD_INT 5
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17739
17610: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17611: LD_ADDR_VAR 0 5
17615: PUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 4
17623: MINUS
17624: PUSH
17625: LD_VAR 0 2
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: LD_VAR 0 1
17642: PUSH
17643: LD_VAR 0 2
17647: PUSH
17648: LD_INT 4
17650: MINUS
17651: PUSH
17652: LD_INT 3
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: LD_VAR 0 1
17664: PUSH
17665: LD_INT 4
17667: PLUS
17668: PUSH
17669: LD_VAR 0 2
17673: PUSH
17674: LD_INT 4
17676: PLUS
17677: PUSH
17678: LD_INT 5
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: PUSH
17686: LD_VAR 0 1
17690: PUSH
17691: LD_INT 3
17693: PLUS
17694: PUSH
17695: LD_VAR 0 2
17699: PUSH
17700: LD_INT 4
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: LD_VAR 0 1
17712: PUSH
17713: LD_VAR 0 2
17717: PUSH
17718: LD_INT 3
17720: PLUS
17721: PUSH
17722: LD_INT 0
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: ST_TO_ADDR
// end ; end ;
17737: GO 17740
17739: POP
// result := list ;
17740: LD_ADDR_VAR 0 4
17744: PUSH
17745: LD_VAR 0 5
17749: ST_TO_ADDR
// end ;
17750: LD_VAR 0 4
17754: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17755: LD_INT 0
17757: PPUSH
17758: PPUSH
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
// result := false ;
17766: LD_ADDR_VAR 0 7
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17774: LD_VAR 0 1
17778: NOT
17779: PUSH
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 266
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: IN
17800: NOT
17801: OR
17802: PUSH
17803: LD_VAR 0 2
17807: NOT
17808: OR
17809: PUSH
17810: LD_VAR 0 5
17814: PUSH
17815: LD_INT 0
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: LD_INT 3
17826: PUSH
17827: LD_INT 4
17829: PUSH
17830: LD_INT 5
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: IN
17841: NOT
17842: OR
17843: PUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: LD_VAR 0 4
17853: PPUSH
17854: CALL_OW 488
17858: NOT
17859: OR
17860: IFFALSE 17864
// exit ;
17862: GO 18545
// pom := GetBase ( bdepot ) ;
17864: LD_ADDR_VAR 0 10
17868: PUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 274
17878: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17879: LD_ADDR_VAR 0 11
17883: PUSH
17884: LD_VAR 0 2
17888: PPUSH
17889: LD_VAR 0 1
17893: PPUSH
17894: CALL_OW 248
17898: PPUSH
17899: CALL_OW 450
17903: ST_TO_ADDR
// if check_cost then
17904: LD_VAR 0 6
17908: IFFALSE 17985
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17910: LD_VAR 0 10
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 275
17922: PUSH
17923: LD_VAR 0 11
17927: PUSH
17928: LD_INT 1
17930: ARRAY
17931: GREATEREQUAL
17932: PUSH
17933: LD_VAR 0 10
17937: PPUSH
17938: LD_INT 2
17940: PPUSH
17941: CALL_OW 275
17945: PUSH
17946: LD_VAR 0 11
17950: PUSH
17951: LD_INT 2
17953: ARRAY
17954: GREATEREQUAL
17955: AND
17956: PUSH
17957: LD_VAR 0 10
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: CALL_OW 275
17969: PUSH
17970: LD_VAR 0 11
17974: PUSH
17975: LD_INT 3
17977: ARRAY
17978: GREATEREQUAL
17979: AND
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 18545
// if GetBType ( bdepot ) = b_depot then
17985: LD_VAR 0 1
17989: PPUSH
17990: CALL_OW 266
17994: PUSH
17995: LD_INT 0
17997: EQUAL
17998: IFFALSE 18010
// dist := 28 else
18000: LD_ADDR_VAR 0 14
18004: PUSH
18005: LD_INT 28
18007: ST_TO_ADDR
18008: GO 18018
// dist := 36 ;
18010: LD_ADDR_VAR 0 14
18014: PUSH
18015: LD_INT 36
18017: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
18018: LD_VAR 0 1
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: LD_VAR 0 4
18032: PPUSH
18033: CALL_OW 297
18037: PUSH
18038: LD_VAR 0 14
18042: GREATER
18043: IFFALSE 18047
// exit ;
18045: GO 18545
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18047: LD_ADDR_VAR 0 12
18051: PUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_VAR 0 4
18066: PPUSH
18067: LD_VAR 0 5
18071: PPUSH
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 248
18081: PPUSH
18082: LD_INT 0
18084: PPUSH
18085: CALL 18550 0 6
18089: ST_TO_ADDR
// if not hexes then
18090: LD_VAR 0 12
18094: NOT
18095: IFFALSE 18099
// exit ;
18097: GO 18545
// hex := GetHexInfo ( x , y ) ;
18099: LD_ADDR_VAR 0 15
18103: PUSH
18104: LD_VAR 0 3
18108: PPUSH
18109: LD_VAR 0 4
18113: PPUSH
18114: CALL_OW 546
18118: ST_TO_ADDR
// if hex [ 1 ] then
18119: LD_VAR 0 15
18123: PUSH
18124: LD_INT 1
18126: ARRAY
18127: IFFALSE 18131
// exit ;
18129: GO 18545
// height := hex [ 2 ] ;
18131: LD_ADDR_VAR 0 13
18135: PUSH
18136: LD_VAR 0 15
18140: PUSH
18141: LD_INT 2
18143: ARRAY
18144: ST_TO_ADDR
// for i = 1 to hexes do
18145: LD_ADDR_VAR 0 8
18149: PUSH
18150: DOUBLE
18151: LD_INT 1
18153: DEC
18154: ST_TO_ADDR
18155: LD_VAR 0 12
18159: PUSH
18160: FOR_TO
18161: IFFALSE 18489
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18163: LD_VAR 0 12
18167: PUSH
18168: LD_VAR 0 8
18172: ARRAY
18173: PUSH
18174: LD_INT 1
18176: ARRAY
18177: PPUSH
18178: LD_VAR 0 12
18182: PUSH
18183: LD_VAR 0 8
18187: ARRAY
18188: PUSH
18189: LD_INT 2
18191: ARRAY
18192: PPUSH
18193: CALL_OW 488
18197: NOT
18198: IFFALSE 18202
// continue ;
18200: GO 18160
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18202: LD_ADDR_VAR 0 9
18206: PUSH
18207: LD_VAR 0 12
18211: PUSH
18212: LD_VAR 0 8
18216: ARRAY
18217: PUSH
18218: LD_INT 1
18220: ARRAY
18221: PPUSH
18222: LD_VAR 0 12
18226: PUSH
18227: LD_VAR 0 8
18231: ARRAY
18232: PUSH
18233: LD_INT 2
18235: ARRAY
18236: PPUSH
18237: CALL_OW 546
18241: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18242: LD_VAR 0 9
18246: PUSH
18247: LD_INT 1
18249: ARRAY
18250: PUSH
18251: LD_VAR 0 9
18255: PUSH
18256: LD_INT 2
18258: ARRAY
18259: PUSH
18260: LD_VAR 0 13
18264: PUSH
18265: LD_INT 2
18267: PLUS
18268: GREATER
18269: OR
18270: PUSH
18271: LD_VAR 0 9
18275: PUSH
18276: LD_INT 2
18278: ARRAY
18279: PUSH
18280: LD_VAR 0 13
18284: PUSH
18285: LD_INT 2
18287: MINUS
18288: LESS
18289: OR
18290: PUSH
18291: LD_VAR 0 9
18295: PUSH
18296: LD_INT 3
18298: ARRAY
18299: PUSH
18300: LD_INT 0
18302: PUSH
18303: LD_INT 8
18305: PUSH
18306: LD_INT 9
18308: PUSH
18309: LD_INT 10
18311: PUSH
18312: LD_INT 11
18314: PUSH
18315: LD_INT 12
18317: PUSH
18318: LD_INT 13
18320: PUSH
18321: LD_INT 16
18323: PUSH
18324: LD_INT 17
18326: PUSH
18327: LD_INT 18
18329: PUSH
18330: LD_INT 19
18332: PUSH
18333: LD_INT 20
18335: PUSH
18336: LD_INT 21
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: IN
18354: NOT
18355: OR
18356: PUSH
18357: LD_VAR 0 9
18361: PUSH
18362: LD_INT 5
18364: ARRAY
18365: NOT
18366: OR
18367: PUSH
18368: LD_VAR 0 9
18372: PUSH
18373: LD_INT 6
18375: ARRAY
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: LD_INT 2
18382: PUSH
18383: LD_INT 7
18385: PUSH
18386: LD_INT 9
18388: PUSH
18389: LD_INT 10
18391: PUSH
18392: LD_INT 11
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: IN
18403: NOT
18404: OR
18405: PUSH
18406: LD_VAR 0 12
18410: PUSH
18411: LD_VAR 0 8
18415: ARRAY
18416: PUSH
18417: LD_INT 1
18419: ARRAY
18420: PPUSH
18421: LD_VAR 0 12
18425: PUSH
18426: LD_VAR 0 8
18430: ARRAY
18431: PUSH
18432: LD_INT 2
18434: ARRAY
18435: PPUSH
18436: CALL_OW 428
18440: PUSH
18441: LD_INT 0
18443: GREATER
18444: OR
18445: PUSH
18446: LD_VAR 0 12
18450: PUSH
18451: LD_VAR 0 8
18455: ARRAY
18456: PUSH
18457: LD_INT 1
18459: ARRAY
18460: PPUSH
18461: LD_VAR 0 12
18465: PUSH
18466: LD_VAR 0 8
18470: ARRAY
18471: PUSH
18472: LD_INT 2
18474: ARRAY
18475: PPUSH
18476: CALL_OW 351
18480: OR
18481: IFFALSE 18487
// exit ;
18483: POP
18484: POP
18485: GO 18545
// end ;
18487: GO 18160
18489: POP
18490: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18491: LD_VAR 0 2
18495: PUSH
18496: LD_INT 29
18498: PUSH
18499: LD_INT 30
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: IN
18506: PUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_VAR 0 4
18516: PPUSH
18517: LD_VAR 0 1
18521: PPUSH
18522: CALL_OW 255
18526: PPUSH
18527: CALL_OW 440
18531: NOT
18532: AND
18533: IFFALSE 18537
// exit ;
18535: GO 18545
// result := true ;
18537: LD_ADDR_VAR 0 7
18541: PUSH
18542: LD_INT 1
18544: ST_TO_ADDR
// end ;
18545: LD_VAR 0 7
18549: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18550: LD_INT 0
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
18578: PPUSH
18579: PPUSH
18580: PPUSH
18581: PPUSH
18582: PPUSH
18583: PPUSH
18584: PPUSH
18585: PPUSH
18586: PPUSH
18587: PPUSH
18588: PPUSH
18589: PPUSH
18590: PPUSH
18591: PPUSH
18592: PPUSH
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
// result = [ ] ;
18610: LD_ADDR_VAR 0 7
18614: PUSH
18615: EMPTY
18616: ST_TO_ADDR
// temp_list = [ ] ;
18617: LD_ADDR_VAR 0 9
18621: PUSH
18622: EMPTY
18623: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18624: LD_VAR 0 4
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: LD_INT 3
18640: PUSH
18641: LD_INT 4
18643: PUSH
18644: LD_INT 5
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: IN
18655: NOT
18656: PUSH
18657: LD_VAR 0 1
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: IN
18672: PUSH
18673: LD_VAR 0 5
18677: PUSH
18678: LD_INT 1
18680: PUSH
18681: LD_INT 2
18683: PUSH
18684: LD_INT 3
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: IN
18692: NOT
18693: AND
18694: OR
18695: IFFALSE 18699
// exit ;
18697: GO 37084
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18699: LD_VAR 0 1
18703: PUSH
18704: LD_INT 6
18706: PUSH
18707: LD_INT 7
18709: PUSH
18710: LD_INT 8
18712: PUSH
18713: LD_INT 13
18715: PUSH
18716: LD_INT 12
18718: PUSH
18719: LD_INT 15
18721: PUSH
18722: LD_INT 11
18724: PUSH
18725: LD_INT 14
18727: PUSH
18728: LD_INT 10
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: IN
18742: IFFALSE 18752
// btype = b_lab ;
18744: LD_ADDR_VAR 0 1
18748: PUSH
18749: LD_INT 6
18751: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18752: LD_VAR 0 6
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: IN
18771: NOT
18772: PUSH
18773: LD_VAR 0 1
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: LD_INT 1
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: LD_INT 3
18789: PUSH
18790: LD_INT 6
18792: PUSH
18793: LD_INT 36
18795: PUSH
18796: LD_INT 4
18798: PUSH
18799: LD_INT 5
18801: PUSH
18802: LD_INT 31
18804: PUSH
18805: LD_INT 32
18807: PUSH
18808: LD_INT 33
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: IN
18824: NOT
18825: PUSH
18826: LD_VAR 0 6
18830: PUSH
18831: LD_INT 1
18833: EQUAL
18834: AND
18835: OR
18836: PUSH
18837: LD_VAR 0 1
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: LD_INT 3
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: IN
18852: NOT
18853: PUSH
18854: LD_VAR 0 6
18858: PUSH
18859: LD_INT 2
18861: EQUAL
18862: AND
18863: OR
18864: IFFALSE 18874
// mode = 0 ;
18866: LD_ADDR_VAR 0 6
18870: PUSH
18871: LD_INT 0
18873: ST_TO_ADDR
// case mode of 0 :
18874: LD_VAR 0 6
18878: PUSH
18879: LD_INT 0
18881: DOUBLE
18882: EQUAL
18883: IFTRUE 18887
18885: GO 30340
18887: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18888: LD_ADDR_VAR 0 11
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: LD_INT 2
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 2
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: NEG
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: LD_INT 3
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: LD_INT 3
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19081: LD_ADDR_VAR 0 12
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: LD_INT 1
19101: NEG
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: PUSH
19152: LD_INT 1
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 2
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 2
19227: NEG
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 3
19238: NEG
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 3
19249: NEG
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19277: LD_ADDR_VAR 0 13
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: LD_INT 2
19362: NEG
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 2
19400: NEG
19401: PUSH
19402: LD_INT 1
19404: NEG
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: NEG
19413: PUSH
19414: LD_INT 2
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 2
19424: NEG
19425: PUSH
19426: LD_INT 3
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 3
19436: NEG
19437: PUSH
19438: LD_INT 2
19440: NEG
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 3
19448: NEG
19449: PUSH
19450: LD_INT 3
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19476: LD_ADDR_VAR 0 14
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 1
19496: NEG
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: LD_INT 1
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: NEG
19558: PUSH
19559: LD_INT 2
19561: NEG
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 2
19572: NEG
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: LD_INT 2
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 3
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: LD_INT 3
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19672: LD_ADDR_VAR 0 15
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 2
19795: NEG
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 3
19829: PUSH
19830: LD_INT 0
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19865: LD_ADDR_VAR 0 16
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: LD_INT 1
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 1
19934: NEG
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: LD_INT 2
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 2
19988: NEG
19989: PUSH
19990: LD_INT 1
19992: NEG
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 3
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: LD_INT 3
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: LD_INT 3
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20058: LD_ADDR_VAR 0 17
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: LD_INT 1
20078: NEG
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: PUSH
20087: LD_INT 0
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: NEG
20128: PUSH
20129: LD_INT 1
20131: NEG
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: LD_INT 2
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 2
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 0
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: NEG
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: NEG
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: NEG
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20288: LD_ADDR_VAR 0 18
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: NEG
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 2
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 2
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20518: LD_ADDR_VAR 0 19
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: LD_INT 1
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: NEG
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 1
20591: NEG
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: LD_INT 2
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: LD_INT 2
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: LD_INT 1
20625: NEG
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 2
20643: PUSH
20644: LD_INT 1
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: LD_INT 0
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20748: LD_ADDR_VAR 0 20
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 0
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 0
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: NEG
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: NEG
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20978: LD_ADDR_VAR 0 21
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: LD_INT 2
21063: NEG
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 2
21074: NEG
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 2
21154: NEG
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 2
21165: NEG
21166: PUSH
21167: LD_INT 1
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: NEG
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21208: LD_ADDR_VAR 0 22
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: LD_INT 0
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 2
21395: NEG
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 2
21407: NEG
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21438: LD_ADDR_VAR 0 23
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 2
21523: NEG
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 2
21534: NEG
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 2
21573: PUSH
21574: LD_INT 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: NEG
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: NEG
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 2
21637: NEG
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: LD_INT 3
21653: NEG
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: LD_INT 3
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: LD_INT 2
21676: NEG
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 2
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21718: LD_ADDR_VAR 0 24
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 1
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: LD_INT 2
21803: NEG
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: LD_INT 2
21814: NEG
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: NEG
21895: PUSH
21896: LD_INT 0
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 2
21905: NEG
21906: PUSH
21907: LD_INT 1
21909: NEG
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 2
21917: NEG
21918: PUSH
21919: LD_INT 2
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 2
21932: NEG
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 3
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 2
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21994: LD_ADDR_VAR 0 25
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 2
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 2
22129: PUSH
22130: LD_INT 2
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 2
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: NEG
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 2
22181: NEG
22182: PUSH
22183: LD_INT 1
22185: NEG
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 2
22193: NEG
22194: PUSH
22195: LD_INT 2
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 3
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 3
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: LD_INT 3
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: LD_INT 3
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22268: LD_ADDR_VAR 0 26
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: LD_INT 0
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 1
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 2
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 2
22364: NEG
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: LD_INT 2
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: NEG
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 2
22455: NEG
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 2
22467: NEG
22468: PUSH
22469: LD_INT 2
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 3
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: LD_INT 3
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22544: LD_ADDR_VAR 0 27
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 0
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: LD_INT 1
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: LD_INT 1
22617: NEG
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: LD_INT 2
22629: NEG
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: LD_INT 2
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 0
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: LD_INT 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 0
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: NEG
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: NEG
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 3
22777: NEG
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 3
22789: NEG
22790: PUSH
22791: LD_INT 2
22793: NEG
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22824: LD_ADDR_VAR 0 28
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: NEG
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 2
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: NEG
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 2
23011: NEG
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: NEG
23024: PUSH
23025: LD_INT 2
23027: NEG
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: LD_INT 3
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 3
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 3
23059: NEG
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 3
23071: NEG
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23106: LD_ADDR_VAR 0 29
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: LD_INT 0
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 1
23126: NEG
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: LD_INT 0
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 1
23187: NEG
23188: PUSH
23189: LD_INT 2
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: LD_INT 2
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 1
23213: NEG
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 2
23221: PUSH
23222: LD_INT 0
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 1
23261: NEG
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 2
23284: NEG
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 2
23296: NEG
23297: PUSH
23298: LD_INT 3
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 2
23308: PUSH
23309: LD_INT 1
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 3
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 3
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 3
23350: NEG
23351: PUSH
23352: LD_INT 2
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23385: LD_ADDR_VAR 0 30
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: LD_INT 2
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: NEG
23575: PUSH
23576: LD_INT 3
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 1
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 3
23597: PUSH
23598: LD_INT 2
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 2
23617: NEG
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 3
23628: NEG
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23663: LD_ADDR_VAR 0 31
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: NEG
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: LD_INT 2
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 2
23828: NEG
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 2
23840: NEG
23841: PUSH
23842: LD_INT 2
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: NEG
23853: PUSH
23854: LD_INT 3
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 2
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 3
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 3
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 3
23906: NEG
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23941: LD_ADDR_VAR 0 32
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 1
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: LD_INT 2
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: LD_INT 2
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: NEG
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 2
24118: NEG
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: LD_INT 3
24134: NEG
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: LD_INT 2
24145: NEG
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 2
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 2
24173: NEG
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 3
24184: NEG
24185: PUSH
24186: LD_INT 1
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24219: LD_ADDR_VAR 0 33
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: NEG
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: NEG
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: LD_INT 2
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 1
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: LD_INT 2
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: NEG
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 2
24385: NEG
24386: PUSH
24387: LD_INT 1
24389: NEG
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: LD_INT 2
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 2
24409: NEG
24410: PUSH
24411: LD_INT 3
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 3
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 3
24463: NEG
24464: PUSH
24465: LD_INT 2
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24498: LD_ADDR_VAR 0 34
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: NEG
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 1
24567: NEG
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: NEG
24580: PUSH
24581: LD_INT 2
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 2
24665: NEG
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: LD_INT 3
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: LD_INT 2
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: LD_INT 3
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 2
24732: NEG
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 3
24743: NEG
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24778: LD_ADDR_VAR 0 35
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: NEG
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: NEG
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24890: LD_ADDR_VAR 0 36
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25002: LD_ADDR_VAR 0 37
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25114: LD_ADDR_VAR 0 38
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25226: LD_ADDR_VAR 0 39
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25338: LD_ADDR_VAR 0 40
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25450: LD_ADDR_VAR 0 41
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 3
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 3
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: NEG
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 3
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 3
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 3
25759: NEG
25760: PUSH
25761: LD_INT 3
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25800: LD_ADDR_VAR 0 42
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 2
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 2
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: LD_INT 3
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: LD_INT 3
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: LD_INT 3
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: LD_INT 3
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 3
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: LD_INT 3
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: LD_INT 3
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 3
26097: NEG
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 3
26109: NEG
26110: PUSH
26111: LD_INT 3
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26150: LD_ADDR_VAR 0 43
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 2
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 2
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 3
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 3
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 3
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 3
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 3
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 3
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 3
26446: NEG
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 3
26457: NEG
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26498: LD_ADDR_VAR 0 44
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: LD_INT 2
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 2
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 2
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 2
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 2
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 2
26664: NEG
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: LD_INT 2
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: NEG
26689: PUSH
26690: LD_INT 3
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 3
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: LD_INT 3
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: LD_INT 3
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 2
26761: NEG
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 3
26772: NEG
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 3
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 3
26795: NEG
26796: PUSH
26797: LD_INT 2
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 3
26807: NEG
26808: PUSH
26809: LD_INT 3
26811: NEG
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26848: LD_ADDR_VAR 0 45
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: NEG
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 2
27026: NEG
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 2
27038: NEG
27039: PUSH
27040: LD_INT 3
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 3
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: LD_INT 3
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 2
27104: PUSH
27105: LD_INT 3
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 3
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 3
27157: NEG
27158: PUSH
27159: LD_INT 3
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27198: LD_ADDR_VAR 0 46
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: LD_INT 3
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 3
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 3
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: LD_INT 3
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 3
27494: NEG
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 3
27505: NEG
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27546: LD_ADDR_VAR 0 47
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 0
27639: PUSH
27640: LD_INT 2
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27697: LD_ADDR_VAR 0 48
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 1
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27844: LD_ADDR_VAR 0 49
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27988: LD_ADDR_VAR 0 50
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28132: LD_ADDR_VAR 0 51
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 2
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: NEG
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28279: LD_ADDR_VAR 0 52
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 2
28394: NEG
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: NEG
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28430: LD_ADDR_VAR 0 53
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 2
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 2
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: NEG
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28660: LD_ADDR_VAR 0 54
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 2
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 2
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28890: LD_ADDR_VAR 0 55
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 2
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 2
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 2
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: NEG
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29120: LD_ADDR_VAR 0 56
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 2
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 2
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: NEG
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29350: LD_ADDR_VAR 0 57
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 1
29408: NEG
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: LD_INT 1
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: LD_INT 2
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 2
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 2
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: NEG
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29580: LD_ADDR_VAR 0 58
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: LD_INT 1
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: LD_INT 0
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 1
29661: NEG
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 2
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: LD_INT 2
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 2
29756: NEG
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 2
29779: NEG
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29810: LD_ADDR_VAR 0 59
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29898: LD_ADDR_VAR 0 60
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29986: LD_ADDR_VAR 0 61
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30074: LD_ADDR_VAR 0 62
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: NEG
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30162: LD_ADDR_VAR 0 63
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30250: LD_ADDR_VAR 0 64
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
// end ; 1 :
30338: GO 36235
30340: LD_INT 1
30342: DOUBLE
30343: EQUAL
30344: IFTRUE 30348
30346: GO 32971
30348: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30349: LD_ADDR_VAR 0 11
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 3
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 3
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30393: LD_ADDR_VAR 0 12
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30434: LD_ADDR_VAR 0 13
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 3
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30474: LD_ADDR_VAR 0 14
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 3
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: NEG
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30515: LD_ADDR_VAR 0 15
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 3
30544: NEG
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: LIST
30558: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30559: LD_ADDR_VAR 0 16
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: LD_INT 3
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: NEG
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 3
30590: NEG
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30605: LD_ADDR_VAR 0 17
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: LD_INT 3
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: LD_INT 3
30627: NEG
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: LD_INT 2
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30649: LD_ADDR_VAR 0 18
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30690: LD_ADDR_VAR 0 19
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 3
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30730: LD_ADDR_VAR 0 20
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30771: LD_ADDR_VAR 0 21
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: NEG
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 3
30800: NEG
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30815: LD_ADDR_VAR 0 22
30819: PUSH
30820: LD_INT 2
30822: NEG
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 3
30834: NEG
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 3
30846: NEG
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30861: LD_ADDR_VAR 0 23
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: LD_INT 4
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30905: LD_ADDR_VAR 0 24
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: LD_INT 0
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 3
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 4
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30946: LD_ADDR_VAR 0 25
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 4
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: LD_INT 4
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30986: LD_ADDR_VAR 0 26
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: LD_INT 3
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: LD_INT 4
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31027: LD_ADDR_VAR 0 27
31031: PUSH
31032: LD_INT 3
31034: NEG
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 4
31056: NEG
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31071: LD_ADDR_VAR 0 28
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: LD_INT 3
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 3
31090: NEG
31091: PUSH
31092: LD_INT 4
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 4
31102: NEG
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31117: LD_ADDR_VAR 0 29
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 3
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: LD_INT 3
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: LD_INT 2
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 4
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 4
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 5
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 0
31204: PUSH
31205: LD_INT 5
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 4
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 6
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 6
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: PUSH
31250: LD_INT 5
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31272: LD_ADDR_VAR 0 30
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 1
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 4
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 4
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 4
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 5
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 5
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 5
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 6
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 6
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31415: LD_ADDR_VAR 0 31
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: LD_INT 3
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 4
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 4
31462: PUSH
31463: LD_INT 4
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 3
31472: PUSH
31473: LD_INT 4
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 5
31482: PUSH
31483: LD_INT 4
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 5
31492: PUSH
31493: LD_INT 5
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 4
31502: PUSH
31503: LD_INT 5
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 6
31512: PUSH
31513: LD_INT 5
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 6
31522: PUSH
31523: LD_INT 6
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 5
31532: PUSH
31533: LD_INT 6
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31554: LD_ADDR_VAR 0 32
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 3
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: LD_INT 4
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 4
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 5
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 5
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 4
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 6
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 6
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 5
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31697: LD_ADDR_VAR 0 33
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: NEG
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 3
31726: NEG
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 4
31749: NEG
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 4
31760: NEG
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 4
31772: NEG
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 5
31783: NEG
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 5
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 5
31806: NEG
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 6
31817: NEG
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 6
31828: NEG
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31852: LD_ADDR_VAR 0 34
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: NEG
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 3
31883: NEG
31884: PUSH
31885: LD_INT 3
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 3
31895: NEG
31896: PUSH
31897: LD_INT 4
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 4
31907: NEG
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 4
31919: NEG
31920: PUSH
31921: LD_INT 4
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 4
31931: NEG
31932: PUSH
31933: LD_INT 5
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 5
31943: NEG
31944: PUSH
31945: LD_INT 4
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 5
31955: NEG
31956: PUSH
31957: LD_INT 5
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 5
31967: NEG
31968: PUSH
31969: LD_INT 6
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 6
31979: NEG
31980: PUSH
31981: LD_INT 5
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 6
31991: NEG
31992: PUSH
31993: LD_INT 6
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32015: LD_ADDR_VAR 0 41
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32059: LD_ADDR_VAR 0 42
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32100: LD_ADDR_VAR 0 43
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32140: LD_ADDR_VAR 0 44
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32181: LD_ADDR_VAR 0 45
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 3
32210: NEG
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32225: LD_ADDR_VAR 0 46
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: LD_INT 2
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 3
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 3
32256: NEG
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32271: LD_ADDR_VAR 0 47
32275: PUSH
32276: LD_INT 2
32278: NEG
32279: PUSH
32280: LD_INT 3
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: LD_INT 3
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32304: LD_ADDR_VAR 0 48
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32335: LD_ADDR_VAR 0 49
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32364: LD_ADDR_VAR 0 50
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: LD_INT 3
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: LD_INT 3
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32393: LD_ADDR_VAR 0 51
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32424: LD_ADDR_VAR 0 52
32428: PUSH
32429: LD_INT 3
32431: NEG
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 3
32443: NEG
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32457: LD_ADDR_VAR 0 53
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: LD_INT 3
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32501: LD_ADDR_VAR 0 54
32505: PUSH
32506: LD_INT 2
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32542: LD_ADDR_VAR 0 55
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 3
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: LIST
32581: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32582: LD_ADDR_VAR 0 56
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 3
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 3
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32623: LD_ADDR_VAR 0 57
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32667: LD_ADDR_VAR 0 58
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 3
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: NEG
32699: PUSH
32700: LD_INT 3
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32713: LD_ADDR_VAR 0 59
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32757: LD_ADDR_VAR 0 60
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32798: LD_ADDR_VAR 0 61
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32838: LD_ADDR_VAR 0 62
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32879: LD_ADDR_VAR 0 63
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: LIST
32922: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32923: LD_ADDR_VAR 0 64
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: ST_TO_ADDR
// end ; 2 :
32969: GO 36235
32971: LD_INT 2
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32979
32977: GO 36234
32979: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32980: LD_ADDR_VAR 0 29
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 4
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 5
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 5
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 5
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 3
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 4
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 4
33110: PUSH
33111: LD_INT 4
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 3
33120: PUSH
33121: LD_INT 4
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 4
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 4
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: LD_INT 4
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 4
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 5
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 4
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: LD_INT 3
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 5
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: LD_INT 3
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 3
33274: NEG
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 2
33286: NEG
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 3
33308: NEG
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 4
33319: NEG
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 4
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 4
33342: NEG
33343: PUSH
33344: LD_INT 2
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 4
33365: NEG
33366: PUSH
33367: LD_INT 4
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 4
33377: NEG
33378: PUSH
33379: LD_INT 5
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 3
33389: NEG
33390: PUSH
33391: LD_INT 4
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: NEG
33402: PUSH
33403: LD_INT 3
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 4
33413: NEG
33414: PUSH
33415: LD_INT 3
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 5
33425: NEG
33426: PUSH
33427: LD_INT 4
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 5
33437: NEG
33438: PUSH
33439: LD_INT 5
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 3
33449: NEG
33450: PUSH
33451: LD_INT 5
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 5
33461: NEG
33462: PUSH
33463: LD_INT 3
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33518: LD_ADDR_VAR 0 30
33522: PUSH
33523: LD_INT 4
33525: PUSH
33526: LD_INT 4
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 4
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 5
33545: PUSH
33546: LD_INT 4
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 5
33555: PUSH
33556: LD_INT 5
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 5
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 5
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 5
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 4
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 3
33731: NEG
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 3
33742: NEG
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 4
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 5
33764: NEG
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 5
33775: NEG
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 5
33787: NEG
33788: PUSH
33789: LD_INT 2
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 3
33810: NEG
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 3
33822: NEG
33823: PUSH
33824: LD_INT 4
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: LD_INT 3
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 4
33870: NEG
33871: PUSH
33872: LD_INT 3
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 4
33882: NEG
33883: PUSH
33884: LD_INT 4
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 4
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 4
33906: NEG
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 4
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: LD_INT 5
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 3
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 4
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 5
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 3
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: LD_INT 5
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34065: LD_ADDR_VAR 0 31
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: LD_INT 4
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: LD_INT 4
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 5
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 5
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: LD_INT 4
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: LD_INT 3
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: LD_INT 5
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: LD_INT 3
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 3
34176: NEG
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 4
34221: NEG
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 4
34232: NEG
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 4
34244: NEG
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 4
34267: NEG
34268: PUSH
34269: LD_INT 4
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 4
34279: NEG
34280: PUSH
34281: LD_INT 5
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: NEG
34292: PUSH
34293: LD_INT 4
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 3
34303: NEG
34304: PUSH
34305: LD_INT 3
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 4
34315: NEG
34316: PUSH
34317: LD_INT 3
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 5
34327: NEG
34328: PUSH
34329: LD_INT 4
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 5
34339: NEG
34340: PUSH
34341: LD_INT 5
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: NEG
34352: PUSH
34353: LD_INT 5
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 5
34363: NEG
34364: PUSH
34365: LD_INT 3
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: LD_INT 3
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 4
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: LD_INT 3
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 3
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: LD_INT 4
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: LD_INT 2
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 4
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 4
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 4
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 5
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 5
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 4
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 3
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 3
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 5
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34615: LD_ADDR_VAR 0 32
34619: PUSH
34620: LD_INT 4
34622: NEG
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 4
34633: NEG
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: NEG
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 4
34667: NEG
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 5
34678: NEG
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 5
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 5
34701: NEG
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 3
34713: NEG
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 3
34724: NEG
34725: PUSH
34726: LD_INT 3
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: NEG
34737: PUSH
34738: LD_INT 4
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: LD_INT 3
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: NEG
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 3
34772: NEG
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 4
34784: NEG
34785: PUSH
34786: LD_INT 3
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 4
34796: NEG
34797: PUSH
34798: LD_INT 4
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 4
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 4
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 4
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 5
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 4
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 3
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 3
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 4
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: LD_INT 5
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 3
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: LD_INT 5
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 3
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 4
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 4
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 3
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 4
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 4
35027: PUSH
35028: LD_INT 4
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 4
35037: PUSH
35038: LD_INT 3
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 5
35047: PUSH
35048: LD_INT 4
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 5
35057: PUSH
35058: LD_INT 5
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 4
35067: PUSH
35068: LD_INT 5
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: LD_INT 4
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 3
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 5
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: LD_INT 5
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35162: LD_ADDR_VAR 0 33
35166: PUSH
35167: LD_INT 4
35169: NEG
35170: PUSH
35171: LD_INT 4
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 4
35181: NEG
35182: PUSH
35183: LD_INT 5
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 3
35193: NEG
35194: PUSH
35195: LD_INT 4
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 3
35205: NEG
35206: PUSH
35207: LD_INT 3
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 4
35217: NEG
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 5
35229: NEG
35230: PUSH
35231: LD_INT 4
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 5
35241: NEG
35242: PUSH
35243: LD_INT 5
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 3
35253: NEG
35254: PUSH
35255: LD_INT 5
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 5
35265: NEG
35266: PUSH
35267: LD_INT 3
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 3
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 4
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 3
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: LD_INT 4
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 4
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 4
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 4
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 5
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 5
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 4
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 3
35451: PUSH
35452: LD_INT 2
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 5
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 3
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 4
35492: PUSH
35493: LD_INT 3
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 4
35502: PUSH
35503: LD_INT 4
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: LD_INT 4
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 3
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 4
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 4
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 4
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 4
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 5
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 5
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: LD_INT 4
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 3
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: LD_INT 5
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: NEG
35645: PUSH
35646: LD_INT 3
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35700: LD_ADDR_VAR 0 34
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 4
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: LD_INT 5
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: LD_INT 4
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: LD_INT 3
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 3
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: LD_INT 4
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 5
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: NEG
35798: PUSH
35799: LD_INT 5
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 3
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 4
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 4
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 2
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: LD_INT 2
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 4
35892: PUSH
35893: LD_INT 2
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 4
35902: PUSH
35903: LD_INT 4
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 4
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 5
35922: PUSH
35923: LD_INT 4
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 5
35932: PUSH
35933: LD_INT 5
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 4
35942: PUSH
35943: LD_INT 5
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 4
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: LD_INT 3
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 5
35972: PUSH
35973: LD_INT 3
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: LD_INT 5
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 3
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: LD_INT 3
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 4
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: LD_INT 4
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: LD_INT 4
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 4
36085: NEG
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 4
36096: NEG
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 3
36108: NEG
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 3
36119: NEG
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 4
36130: NEG
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 5
36141: NEG
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 5
36152: NEG
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 5
36164: NEG
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 3
36176: NEG
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: ST_TO_ADDR
// end ; end ;
36232: GO 36235
36234: POP
// case btype of b_depot , b_warehouse :
36235: LD_VAR 0 1
36239: PUSH
36240: LD_INT 0
36242: DOUBLE
36243: EQUAL
36244: IFTRUE 36254
36246: LD_INT 1
36248: DOUBLE
36249: EQUAL
36250: IFTRUE 36254
36252: GO 36455
36254: POP
// case nation of nation_american :
36255: LD_VAR 0 5
36259: PUSH
36260: LD_INT 1
36262: DOUBLE
36263: EQUAL
36264: IFTRUE 36268
36266: GO 36324
36268: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36269: LD_ADDR_VAR 0 9
36273: PUSH
36274: LD_VAR 0 11
36278: PUSH
36279: LD_VAR 0 12
36283: PUSH
36284: LD_VAR 0 13
36288: PUSH
36289: LD_VAR 0 14
36293: PUSH
36294: LD_VAR 0 15
36298: PUSH
36299: LD_VAR 0 16
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: PUSH
36312: LD_VAR 0 4
36316: PUSH
36317: LD_INT 1
36319: PLUS
36320: ARRAY
36321: ST_TO_ADDR
36322: GO 36453
36324: LD_INT 2
36326: DOUBLE
36327: EQUAL
36328: IFTRUE 36332
36330: GO 36388
36332: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36333: LD_ADDR_VAR 0 9
36337: PUSH
36338: LD_VAR 0 17
36342: PUSH
36343: LD_VAR 0 18
36347: PUSH
36348: LD_VAR 0 19
36352: PUSH
36353: LD_VAR 0 20
36357: PUSH
36358: LD_VAR 0 21
36362: PUSH
36363: LD_VAR 0 22
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: PUSH
36376: LD_VAR 0 4
36380: PUSH
36381: LD_INT 1
36383: PLUS
36384: ARRAY
36385: ST_TO_ADDR
36386: GO 36453
36388: LD_INT 3
36390: DOUBLE
36391: EQUAL
36392: IFTRUE 36396
36394: GO 36452
36396: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36397: LD_ADDR_VAR 0 9
36401: PUSH
36402: LD_VAR 0 23
36406: PUSH
36407: LD_VAR 0 24
36411: PUSH
36412: LD_VAR 0 25
36416: PUSH
36417: LD_VAR 0 26
36421: PUSH
36422: LD_VAR 0 27
36426: PUSH
36427: LD_VAR 0 28
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: PUSH
36440: LD_VAR 0 4
36444: PUSH
36445: LD_INT 1
36447: PLUS
36448: ARRAY
36449: ST_TO_ADDR
36450: GO 36453
36452: POP
36453: GO 37002
36455: LD_INT 2
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36469
36461: LD_INT 3
36463: DOUBLE
36464: EQUAL
36465: IFTRUE 36469
36467: GO 36525
36469: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36470: LD_ADDR_VAR 0 9
36474: PUSH
36475: LD_VAR 0 29
36479: PUSH
36480: LD_VAR 0 30
36484: PUSH
36485: LD_VAR 0 31
36489: PUSH
36490: LD_VAR 0 32
36494: PUSH
36495: LD_VAR 0 33
36499: PUSH
36500: LD_VAR 0 34
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: PUSH
36513: LD_VAR 0 4
36517: PUSH
36518: LD_INT 1
36520: PLUS
36521: ARRAY
36522: ST_TO_ADDR
36523: GO 37002
36525: LD_INT 16
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36581
36531: LD_INT 17
36533: DOUBLE
36534: EQUAL
36535: IFTRUE 36581
36537: LD_INT 18
36539: DOUBLE
36540: EQUAL
36541: IFTRUE 36581
36543: LD_INT 19
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36581
36549: LD_INT 20
36551: DOUBLE
36552: EQUAL
36553: IFTRUE 36581
36555: LD_INT 21
36557: DOUBLE
36558: EQUAL
36559: IFTRUE 36581
36561: LD_INT 23
36563: DOUBLE
36564: EQUAL
36565: IFTRUE 36581
36567: LD_INT 24
36569: DOUBLE
36570: EQUAL
36571: IFTRUE 36581
36573: LD_INT 25
36575: DOUBLE
36576: EQUAL
36577: IFTRUE 36581
36579: GO 36637
36581: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36582: LD_ADDR_VAR 0 9
36586: PUSH
36587: LD_VAR 0 35
36591: PUSH
36592: LD_VAR 0 36
36596: PUSH
36597: LD_VAR 0 37
36601: PUSH
36602: LD_VAR 0 38
36606: PUSH
36607: LD_VAR 0 39
36611: PUSH
36612: LD_VAR 0 40
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: PUSH
36625: LD_VAR 0 4
36629: PUSH
36630: LD_INT 1
36632: PLUS
36633: ARRAY
36634: ST_TO_ADDR
36635: GO 37002
36637: LD_INT 6
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36693
36643: LD_INT 7
36645: DOUBLE
36646: EQUAL
36647: IFTRUE 36693
36649: LD_INT 8
36651: DOUBLE
36652: EQUAL
36653: IFTRUE 36693
36655: LD_INT 13
36657: DOUBLE
36658: EQUAL
36659: IFTRUE 36693
36661: LD_INT 12
36663: DOUBLE
36664: EQUAL
36665: IFTRUE 36693
36667: LD_INT 15
36669: DOUBLE
36670: EQUAL
36671: IFTRUE 36693
36673: LD_INT 11
36675: DOUBLE
36676: EQUAL
36677: IFTRUE 36693
36679: LD_INT 14
36681: DOUBLE
36682: EQUAL
36683: IFTRUE 36693
36685: LD_INT 10
36687: DOUBLE
36688: EQUAL
36689: IFTRUE 36693
36691: GO 36749
36693: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36694: LD_ADDR_VAR 0 9
36698: PUSH
36699: LD_VAR 0 41
36703: PUSH
36704: LD_VAR 0 42
36708: PUSH
36709: LD_VAR 0 43
36713: PUSH
36714: LD_VAR 0 44
36718: PUSH
36719: LD_VAR 0 45
36723: PUSH
36724: LD_VAR 0 46
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: PUSH
36737: LD_VAR 0 4
36741: PUSH
36742: LD_INT 1
36744: PLUS
36745: ARRAY
36746: ST_TO_ADDR
36747: GO 37002
36749: LD_INT 36
36751: DOUBLE
36752: EQUAL
36753: IFTRUE 36757
36755: GO 36813
36757: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36758: LD_ADDR_VAR 0 9
36762: PUSH
36763: LD_VAR 0 47
36767: PUSH
36768: LD_VAR 0 48
36772: PUSH
36773: LD_VAR 0 49
36777: PUSH
36778: LD_VAR 0 50
36782: PUSH
36783: LD_VAR 0 51
36787: PUSH
36788: LD_VAR 0 52
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: PUSH
36801: LD_VAR 0 4
36805: PUSH
36806: LD_INT 1
36808: PLUS
36809: ARRAY
36810: ST_TO_ADDR
36811: GO 37002
36813: LD_INT 4
36815: DOUBLE
36816: EQUAL
36817: IFTRUE 36839
36819: LD_INT 5
36821: DOUBLE
36822: EQUAL
36823: IFTRUE 36839
36825: LD_INT 34
36827: DOUBLE
36828: EQUAL
36829: IFTRUE 36839
36831: LD_INT 37
36833: DOUBLE
36834: EQUAL
36835: IFTRUE 36839
36837: GO 36895
36839: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36840: LD_ADDR_VAR 0 9
36844: PUSH
36845: LD_VAR 0 53
36849: PUSH
36850: LD_VAR 0 54
36854: PUSH
36855: LD_VAR 0 55
36859: PUSH
36860: LD_VAR 0 56
36864: PUSH
36865: LD_VAR 0 57
36869: PUSH
36870: LD_VAR 0 58
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: PUSH
36883: LD_VAR 0 4
36887: PUSH
36888: LD_INT 1
36890: PLUS
36891: ARRAY
36892: ST_TO_ADDR
36893: GO 37002
36895: LD_INT 31
36897: DOUBLE
36898: EQUAL
36899: IFTRUE 36945
36901: LD_INT 32
36903: DOUBLE
36904: EQUAL
36905: IFTRUE 36945
36907: LD_INT 33
36909: DOUBLE
36910: EQUAL
36911: IFTRUE 36945
36913: LD_INT 27
36915: DOUBLE
36916: EQUAL
36917: IFTRUE 36945
36919: LD_INT 26
36921: DOUBLE
36922: EQUAL
36923: IFTRUE 36945
36925: LD_INT 28
36927: DOUBLE
36928: EQUAL
36929: IFTRUE 36945
36931: LD_INT 29
36933: DOUBLE
36934: EQUAL
36935: IFTRUE 36945
36937: LD_INT 30
36939: DOUBLE
36940: EQUAL
36941: IFTRUE 36945
36943: GO 37001
36945: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36946: LD_ADDR_VAR 0 9
36950: PUSH
36951: LD_VAR 0 59
36955: PUSH
36956: LD_VAR 0 60
36960: PUSH
36961: LD_VAR 0 61
36965: PUSH
36966: LD_VAR 0 62
36970: PUSH
36971: LD_VAR 0 63
36975: PUSH
36976: LD_VAR 0 64
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: PUSH
36989: LD_VAR 0 4
36993: PUSH
36994: LD_INT 1
36996: PLUS
36997: ARRAY
36998: ST_TO_ADDR
36999: GO 37002
37001: POP
// temp_list2 = [ ] ;
37002: LD_ADDR_VAR 0 10
37006: PUSH
37007: EMPTY
37008: ST_TO_ADDR
// for i in temp_list do
37009: LD_ADDR_VAR 0 8
37013: PUSH
37014: LD_VAR 0 9
37018: PUSH
37019: FOR_IN
37020: IFFALSE 37072
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37022: LD_ADDR_VAR 0 10
37026: PUSH
37027: LD_VAR 0 10
37031: PUSH
37032: LD_VAR 0 8
37036: PUSH
37037: LD_INT 1
37039: ARRAY
37040: PUSH
37041: LD_VAR 0 2
37045: PLUS
37046: PUSH
37047: LD_VAR 0 8
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: PUSH
37056: LD_VAR 0 3
37060: PLUS
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: EMPTY
37067: LIST
37068: ADD
37069: ST_TO_ADDR
37070: GO 37019
37072: POP
37073: POP
// result = temp_list2 ;
37074: LD_ADDR_VAR 0 7
37078: PUSH
37079: LD_VAR 0 10
37083: ST_TO_ADDR
// end ;
37084: LD_VAR 0 7
37088: RET
// export function GetDriverVehicle ( unit ) ; begin
37089: LD_INT 0
37091: PPUSH
// if not unit then
37092: LD_VAR 0 1
37096: NOT
37097: IFFALSE 37101
// exit ;
37099: GO 37139
// result := IsInUnit ( unit ) ;
37101: LD_ADDR_VAR 0 2
37105: PUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 310
37115: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
37116: LD_VAR 0 2
37120: PPUSH
37121: CALL_OW 247
37125: PUSH
37126: LD_INT 2
37128: NONEQUAL
37129: IFFALSE 37139
// result := 0 ;
37131: LD_ADDR_VAR 0 2
37135: PUSH
37136: LD_INT 0
37138: ST_TO_ADDR
// end ; end_of_file
37139: LD_VAR 0 2
37143: RET
// every 1 do var i ;
37144: GO 37146
37146: DISABLE
37147: LD_INT 0
37149: PPUSH
// begin Video ( true ) ;
37150: LD_INT 1
37152: PPUSH
37153: CALL 7127 0 1
// CenterOnXY ( 53 , 40 ) ;
37157: LD_INT 53
37159: PPUSH
37160: LD_INT 40
37162: PPUSH
37163: CALL_OW 84
// wait ( 0 0$5 ) ;
37167: LD_INT 175
37169: PPUSH
37170: CALL_OW 67
// if gammaCommander = 1 then
37174: LD_EXP 12
37178: PUSH
37179: LD_INT 1
37181: EQUAL
37182: IFFALSE 37196
// Say ( Donaldson , D1-Don-1 ) ;
37184: LD_EXP 3
37188: PPUSH
37189: LD_STRING D1-Don-1
37191: PPUSH
37192: CALL_OW 88
// if gammaCommander = 2 then
37196: LD_EXP 12
37200: PUSH
37201: LD_INT 2
37203: EQUAL
37204: IFFALSE 37218
// Say ( Brown , D1-Brown-1 ) ;
37206: LD_EXP 2
37210: PPUSH
37211: LD_STRING D1-Brown-1
37213: PPUSH
37214: CALL_OW 88
// if gammaCommander = 3 then
37218: LD_EXP 12
37222: PUSH
37223: LD_INT 3
37225: EQUAL
37226: IFFALSE 37240
// Say ( Houten , D1-VanH-1 ) ;
37228: LD_EXP 13
37232: PPUSH
37233: LD_STRING D1-VanH-1
37235: PPUSH
37236: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37240: LD_EXP 22
37244: PPUSH
37245: LD_STRING D1-Har-1
37247: PPUSH
37248: CALL_OW 94
// if gammaCommander = 1 then
37252: LD_EXP 12
37256: PUSH
37257: LD_INT 1
37259: EQUAL
37260: IFFALSE 37274
// Say ( Donaldson , D1-Don-2 ) ;
37262: LD_EXP 3
37266: PPUSH
37267: LD_STRING D1-Don-2
37269: PPUSH
37270: CALL_OW 88
// if gammaCommander = 2 then
37274: LD_EXP 12
37278: PUSH
37279: LD_INT 2
37281: EQUAL
37282: IFFALSE 37296
// Say ( Brown , D1-Brown-2 ) ;
37284: LD_EXP 2
37288: PPUSH
37289: LD_STRING D1-Brown-2
37291: PPUSH
37292: CALL_OW 88
// if gammaCommander = 3 then
37296: LD_EXP 12
37300: PUSH
37301: LD_INT 3
37303: EQUAL
37304: IFFALSE 37318
// Say ( Houten , D1-VanH-2 ) ;
37306: LD_EXP 13
37310: PPUSH
37311: LD_STRING D1-VanH-2
37313: PPUSH
37314: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37318: LD_EXP 22
37322: PPUSH
37323: LD_STRING D1-Har-2
37325: PPUSH
37326: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37330: LD_INT 22
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 33
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 61
37352: PUSH
37353: EMPTY
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: PPUSH
37361: CALL_OW 69
37365: IFFALSE 37430
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37367: LD_ADDR_VAR 0 1
37371: PUSH
37372: LD_INT 22
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 33
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 61
37394: PUSH
37395: EMPTY
37396: LIST
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: PPUSH
37403: CALL_OW 69
37407: PUSH
37408: FOR_IN
37409: IFFALSE 37428
// ComAgressiveMove ( i , 70 , 41 ) ;
37411: LD_VAR 0 1
37415: PPUSH
37416: LD_INT 70
37418: PPUSH
37419: LD_INT 41
37421: PPUSH
37422: CALL_OW 114
37426: GO 37408
37428: POP
37429: POP
// repeat wait ( 0 0$1 ) ;
37430: LD_INT 35
37432: PPUSH
37433: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37437: LD_ADDR_VAR 0 1
37441: PUSH
37442: LD_INT 22
37444: PUSH
37445: LD_INT 6
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: PPUSH
37455: CALL_OW 69
37459: PUSH
37460: FOR_IN
37461: IFFALSE 37480
// ComAgressiveMove ( i , 54 , 20 ) ;
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_INT 54
37470: PPUSH
37471: LD_INT 20
37473: PPUSH
37474: CALL_OW 114
37478: GO 37460
37480: POP
37481: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37482: LD_ADDR_VAR 0 1
37486: PUSH
37487: LD_INT 22
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 25
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 3
37509: PUSH
37510: LD_INT 54
37512: PUSH
37513: EMPTY
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: PPUSH
37525: CALL_OW 69
37529: PUSH
37530: FOR_IN
37531: IFFALSE 37565
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37533: LD_VAR 0 1
37537: PPUSH
37538: LD_INT 70
37540: PPUSH
37541: LD_INT 41
37543: PPUSH
37544: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37548: LD_VAR 0 1
37552: PPUSH
37553: LD_INT 46
37555: PPUSH
37556: LD_INT 39
37558: PPUSH
37559: CALL_OW 174
// end ;
37563: GO 37530
37565: POP
37566: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37567: LD_ADDR_VAR 0 1
37571: PUSH
37572: LD_INT 22
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 21
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: LD_INT 24
37597: PUSH
37598: LD_INT 500
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: PPUSH
37614: CALL_OW 69
37618: PUSH
37619: FOR_IN
37620: IFFALSE 37653
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37622: LD_VAR 0 1
37626: PPUSH
37627: LD_EXP 37
37631: PPUSH
37632: CALL_OW 250
37636: PPUSH
37637: LD_EXP 37
37641: PPUSH
37642: CALL_OW 251
37646: PPUSH
37647: CALL_OW 111
37651: GO 37619
37653: POP
37654: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37655: LD_INT 22
37657: PUSH
37658: LD_INT 6
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 21
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 24
37677: PUSH
37678: LD_INT 250
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: PPUSH
37690: CALL_OW 69
37694: PUSH
37695: LD_INT 5
37697: LESS
37698: IFFALSE 37430
// Video ( false ) ;
37700: LD_INT 0
37702: PPUSH
37703: CALL 7127 0 1
// ChangeMissionObjectives ( M1 ) ;
37707: LD_STRING M1
37709: PPUSH
37710: CALL_OW 337
// SaveForQuickRestart ;
37714: CALL_OW 22
// startCutscene = 0 ;
37718: LD_ADDR_EXP 38
37722: PUSH
37723: LD_INT 0
37725: ST_TO_ADDR
// end ;
37726: PPOPN 1
37728: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37729: LD_EXP 38
37733: IFFALSE 37824
37735: GO 37737
37737: DISABLE
37738: LD_INT 0
37740: PPUSH
37741: PPUSH
// begin enable ;
37742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37743: LD_ADDR_VAR 0 1
37747: PUSH
37748: LD_INT 22
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 21
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 3
37770: PUSH
37771: LD_INT 24
37773: PUSH
37774: LD_INT 700
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: PPUSH
37790: CALL_OW 69
37794: ST_TO_ADDR
// for i in tmp do
37795: LD_ADDR_VAR 0 2
37799: PUSH
37800: LD_VAR 0 1
37804: PUSH
37805: FOR_IN
37806: IFFALSE 37822
// SetLives ( i , 700 ) ;
37808: LD_VAR 0 2
37812: PPUSH
37813: LD_INT 700
37815: PPUSH
37816: CALL_OW 234
37820: GO 37805
37822: POP
37823: POP
// end ;
37824: PPOPN 2
37826: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 do
37827: LD_INT 22
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 101
37839: PUSH
37840: LD_INT 6
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PPUSH
37851: CALL_OW 69
37855: PUSH
37856: LD_INT 0
37858: EQUAL
37859: IFFALSE 38108
37861: GO 37863
37863: DISABLE
// begin PrepareSupportFromDelta ;
37864: CALL 3811 0 0
// firstAttack = 1 ;
37868: LD_ADDR_EXP 33
37872: PUSH
37873: LD_INT 1
37875: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37876: LD_EXP 8
37880: PPUSH
37881: CALL_OW 302
37885: IFFALSE 37901
// Say ( Gladstone , D2-Glad-1 ) else
37887: LD_EXP 8
37891: PPUSH
37892: LD_STRING D2-Glad-1
37894: PPUSH
37895: CALL_OW 88
37899: GO 38009
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37901: LD_INT 4
37903: PPUSH
37904: LD_INT 22
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 21
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 25
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 25
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 25
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 25
37959: PUSH
37960: LD_INT 4
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: LIST
37978: PPUSH
37979: CALL_OW 70
37983: PUSH
37984: LD_EXP 15
37988: PUSH
37989: LD_EXP 14
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: DIFF
37998: PPUSH
37999: LD_STRING D2-Sol1-1
38001: PPUSH
38002: LD_STRING D2-FSol1-1
38004: PPUSH
38005: CALL 7155 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38009: LD_EXP 3
38013: PPUSH
38014: CALL_OW 302
38018: PUSH
38019: LD_EXP 12
38023: PUSH
38024: LD_INT 1
38026: EQUAL
38027: AND
38028: IFFALSE 38042
// Say ( Donaldson , D2-Don-1 ) ;
38030: LD_EXP 3
38034: PPUSH
38035: LD_STRING D2-Don-1
38037: PPUSH
38038: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
38042: LD_EXP 2
38046: PPUSH
38047: CALL_OW 302
38051: PUSH
38052: LD_EXP 12
38056: PUSH
38057: LD_INT 2
38059: EQUAL
38060: AND
38061: IFFALSE 38075
// Say ( Brown , D2-Brown-1 ) ;
38063: LD_EXP 2
38067: PPUSH
38068: LD_STRING D2-Brown-1
38070: PPUSH
38071: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
38075: LD_EXP 13
38079: PPUSH
38080: CALL_OW 302
38084: PUSH
38085: LD_EXP 12
38089: PUSH
38090: LD_INT 3
38092: EQUAL
38093: AND
38094: IFFALSE 38108
// Say ( Houten , D2-VanH-1 ) ;
38096: LD_EXP 13
38100: PPUSH
38101: LD_STRING D2-VanH-1
38103: PPUSH
38104: CALL_OW 88
// end ;
38108: END
// every 0 0$1 do var none ;
38109: GO 38111
38111: DISABLE
38112: LD_INT 0
38114: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38115: LD_STRING 07_time
38117: PPUSH
38118: LD_INT 12600
38120: PPUSH
38121: CALL_OW 30
38125: PUSH
38126: LD_INT 3
38128: DIV
38129: PPUSH
38130: CALL_OW 67
// PrepareMacmillanSquad ;
38134: CALL 4473 0 0
// CenterNowOnUnits ( JMM ) ;
38138: LD_EXP 1
38142: PPUSH
38143: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38147: LD_EXP 1
38151: PPUSH
38152: LD_STRING D3-JMM-1
38154: PPUSH
38155: CALL_OW 88
// JMMArrive = 1 ;
38159: LD_ADDR_EXP 39
38163: PUSH
38164: LD_INT 1
38166: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38167: LD_EXP 3
38171: PPUSH
38172: CALL_OW 302
38176: PUSH
38177: LD_EXP 12
38181: PUSH
38182: LD_INT 1
38184: EQUAL
38185: AND
38186: IFFALSE 38202
// begin Say ( Donaldson , D3-Don-1 ) ;
38188: LD_EXP 3
38192: PPUSH
38193: LD_STRING D3-Don-1
38195: PPUSH
38196: CALL_OW 88
// end else
38200: GO 38254
// begin if gammaCommander = 1 then
38202: LD_EXP 12
38206: PUSH
38207: LD_INT 1
38209: EQUAL
38210: IFFALSE 38254
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38212: LD_EXP 11
38216: PPUSH
38217: LD_INT 26
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PPUSH
38227: CALL_OW 72
38231: PPUSH
38232: LD_STRING D3-Sol1-1
38234: PPUSH
38235: LD_STRING D3-Sol1-1
38237: PPUSH
38238: CALL 7155 0 3
// Say ( JMM , D3-JMM-2 ) ;
38242: LD_EXP 1
38246: PPUSH
38247: LD_STRING D3-JMM-2
38249: PPUSH
38250: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38254: LD_EXP 2
38258: PPUSH
38259: CALL_OW 302
38263: PUSH
38264: LD_EXP 12
38268: PUSH
38269: LD_INT 2
38271: EQUAL
38272: AND
38273: IFFALSE 38289
// begin Say ( Brown , D3-Brown-1 ) ;
38275: LD_EXP 2
38279: PPUSH
38280: LD_STRING D3-Brown-1
38282: PPUSH
38283: CALL_OW 88
// end else
38287: GO 38341
// begin if gammaCommander = 2 then
38289: LD_EXP 12
38293: PUSH
38294: LD_INT 2
38296: EQUAL
38297: IFFALSE 38341
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38299: LD_EXP 11
38303: PPUSH
38304: LD_INT 26
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PPUSH
38314: CALL_OW 72
38318: PPUSH
38319: LD_STRING D3-Sol1-1a
38321: PPUSH
38322: LD_STRING D3-Sol1-1a
38324: PPUSH
38325: CALL 7155 0 3
// Say ( JMM , D3-JMM-2 ) ;
38329: LD_EXP 1
38333: PPUSH
38334: LD_STRING D3-JMM-2
38336: PPUSH
38337: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38341: LD_EXP 13
38345: PPUSH
38346: CALL_OW 302
38350: PUSH
38351: LD_EXP 12
38355: PUSH
38356: LD_INT 3
38358: EQUAL
38359: AND
38360: IFFALSE 38376
// begin Say ( Houten , D3-VanH-1 ) ;
38362: LD_EXP 13
38366: PPUSH
38367: LD_STRING D3-VanH-1
38369: PPUSH
38370: CALL_OW 88
// end else
38374: GO 38428
// begin if gammaCommander = 3 then
38376: LD_EXP 12
38380: PUSH
38381: LD_INT 3
38383: EQUAL
38384: IFFALSE 38428
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38386: LD_EXP 11
38390: PPUSH
38391: LD_INT 26
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PPUSH
38401: CALL_OW 72
38405: PPUSH
38406: LD_STRING D3-Sol1-1b
38408: PPUSH
38409: LD_STRING D3-Sol1-1b
38411: PPUSH
38412: CALL 7155 0 3
// Say ( JMM , D3-JMM-2 ) ;
38416: LD_EXP 1
38420: PPUSH
38421: LD_STRING D3-JMM-2
38423: PPUSH
38424: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38428: LD_EXP 15
38432: PPUSH
38433: CALL_OW 302
38437: IFFALSE 38465
// begin Say ( Joan , D3a-Joan-1 ) ;
38439: LD_EXP 15
38443: PPUSH
38444: LD_STRING D3a-Joan-1
38446: PPUSH
38447: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38451: LD_EXP 1
38455: PPUSH
38456: LD_STRING D3a-JMM-1
38458: PPUSH
38459: CALL_OW 88
// end else
38463: GO 38807
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38465: LD_STRING 06_JoanStatus_1
38467: PPUSH
38468: LD_INT 0
38470: PPUSH
38471: CALL_OW 30
38475: PUSH
38476: LD_INT 1
38478: EQUAL
38479: IFFALSE 38807
// begin Say ( JMM , D3b-JMM-1 ) ;
38481: LD_EXP 1
38485: PPUSH
38486: LD_STRING D3b-JMM-1
38488: PPUSH
38489: CALL_OW 88
// if gammaCommander = 1 then
38493: LD_EXP 12
38497: PUSH
38498: LD_INT 1
38500: EQUAL
38501: IFFALSE 38558
// if IsOK ( Donaldson ) then
38503: LD_EXP 3
38507: PPUSH
38508: CALL_OW 302
38512: IFFALSE 38528
// Say ( Donaldson , D3b-Don-1 ) else
38514: LD_EXP 3
38518: PPUSH
38519: LD_STRING D3b-Don-1
38521: PPUSH
38522: CALL_OW 88
38526: GO 38558
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38528: LD_EXP 11
38532: PPUSH
38533: LD_INT 26
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PPUSH
38543: CALL_OW 72
38547: PPUSH
38548: LD_STRING D3b-Sol1-1
38550: PPUSH
38551: LD_STRING D3b-Sol1-1
38553: PPUSH
38554: CALL 7155 0 3
// if gammaCommander = 2 then
38558: LD_EXP 12
38562: PUSH
38563: LD_INT 2
38565: EQUAL
38566: IFFALSE 38623
// if IsOk ( Brown ) then
38568: LD_EXP 2
38572: PPUSH
38573: CALL_OW 302
38577: IFFALSE 38593
// Say ( Brown , D3b-Brown-1 ) else
38579: LD_EXP 2
38583: PPUSH
38584: LD_STRING D3b-Brown-1
38586: PPUSH
38587: CALL_OW 88
38591: GO 38623
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38593: LD_EXP 11
38597: PPUSH
38598: LD_INT 26
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PPUSH
38608: CALL_OW 72
38612: PPUSH
38613: LD_STRING D3b-Sol1-1
38615: PPUSH
38616: LD_STRING D3b-Sol1-1
38618: PPUSH
38619: CALL 7155 0 3
// if gammaCommander = 3 then
38623: LD_EXP 12
38627: PUSH
38628: LD_INT 3
38630: EQUAL
38631: IFFALSE 38688
// if IsOk ( Houten ) then
38633: LD_EXP 13
38637: PPUSH
38638: CALL_OW 302
38642: IFFALSE 38658
// Say ( Houten , D3b-VanH-1 ) else
38644: LD_EXP 13
38648: PPUSH
38649: LD_STRING D3b-VanH-1
38651: PPUSH
38652: CALL_OW 88
38656: GO 38688
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38658: LD_EXP 11
38662: PPUSH
38663: LD_INT 26
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PPUSH
38673: CALL_OW 72
38677: PPUSH
38678: LD_STRING D3b-Sol1-1
38680: PPUSH
38681: LD_STRING D3b-Sol1-1
38683: PPUSH
38684: CALL 7155 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38688: LD_EXP 11
38692: PPUSH
38693: LD_INT 26
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PPUSH
38703: CALL_OW 72
38707: PUSH
38708: LD_EXP 12
38712: PUSH
38713: LD_INT 1
38715: EQUAL
38716: PUSH
38717: LD_EXP 3
38721: PPUSH
38722: CALL_OW 302
38726: AND
38727: OR
38728: PUSH
38729: LD_EXP 12
38733: PUSH
38734: LD_INT 2
38736: EQUAL
38737: PUSH
38738: LD_EXP 2
38742: PPUSH
38743: CALL_OW 302
38747: AND
38748: OR
38749: PUSH
38750: LD_EXP 12
38754: PUSH
38755: LD_INT 3
38757: EQUAL
38758: PUSH
38759: LD_EXP 13
38763: PPUSH
38764: CALL_OW 302
38768: AND
38769: OR
38770: IFFALSE 38784
// Say ( JMM , D3b-JMM-2 ) ;
38772: LD_EXP 1
38776: PPUSH
38777: LD_STRING D3b-JMM-2
38779: PPUSH
38780: CALL_OW 88
// if IsOK ( Lisa ) then
38784: LD_EXP 6
38788: PPUSH
38789: CALL_OW 302
38793: IFFALSE 38807
// Say ( Lisa , D3b-Lisa-2 ) ;
38795: LD_EXP 6
38799: PPUSH
38800: LD_STRING D3b-Lisa-2
38802: PPUSH
38803: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
38807: LD_ADDR_VAR 0 1
38811: PUSH
38812: LD_EXP 1
38816: PUSH
38817: LD_EXP 2
38821: PUSH
38822: LD_EXP 3
38826: PUSH
38827: LD_EXP 4
38831: PUSH
38832: LD_EXP 5
38836: PUSH
38837: LD_EXP 6
38841: PUSH
38842: LD_EXP 7
38846: PUSH
38847: LD_EXP 8
38851: PUSH
38852: LD_EXP 9
38856: PUSH
38857: LD_EXP 10
38861: PUSH
38862: LD_EXP 15
38866: PUSH
38867: LD_EXP 14
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: PUSH
38886: LD_EXP 42
38890: ADD
38891: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38892: LD_INT 22
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 21
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 26
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 25
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 25
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 25
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 25
38957: PUSH
38958: LD_INT 4
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: PPUSH
38978: CALL_OW 69
38982: PUSH
38983: LD_VAR 0 1
38987: DIFF
38988: PPUSH
38989: LD_STRING DCa-Sol1-1
38991: PPUSH
38992: LD_STRING DCa-Sol1-1
38994: PPUSH
38995: CALL 7155 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38999: LD_EXP 1
39003: PPUSH
39004: LD_STRING DCb-JMM-1
39006: PPUSH
39007: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
39011: LD_INT 22
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 21
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 26
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: LD_INT 25
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 25
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 25
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 25
39076: PUSH
39077: LD_INT 4
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: PPUSH
39097: CALL_OW 69
39101: PUSH
39102: LD_VAR 0 1
39106: DIFF
39107: PPUSH
39108: LD_STRING DCb-Sol1-1
39110: PPUSH
39111: LD_STRING DCb-Sol1-1
39113: PPUSH
39114: CALL 7155 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39118: LD_EXP 1
39122: PPUSH
39123: LD_STRING DCb-JMM-2
39125: PPUSH
39126: CALL_OW 88
// secondAttack = 1 ;
39130: LD_ADDR_EXP 34
39134: PUSH
39135: LD_INT 1
39137: ST_TO_ADDR
// end ;
39138: PPOPN 1
39140: END
// every 0 0$01 trigger JMMArrive = 1 do
39141: LD_EXP 39
39145: PUSH
39146: LD_INT 1
39148: EQUAL
39149: IFFALSE 39229
39151: GO 39153
39153: DISABLE
// begin wait ( 3 3$0 ) ;
39154: LD_INT 6300
39156: PPUSH
39157: CALL_OW 67
// DialogueOn ;
39161: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39165: LD_EXP 23
39169: PPUSH
39170: LD_STRING D4-Pow-1
39172: PPUSH
39173: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39177: LD_EXP 1
39181: PPUSH
39182: LD_STRING D4-JMM-1
39184: PPUSH
39185: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39189: LD_EXP 23
39193: PPUSH
39194: LD_STRING D4-Pow-2
39196: PPUSH
39197: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39201: LD_EXP 1
39205: PPUSH
39206: LD_STRING D4-JMM-2
39208: PPUSH
39209: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39213: LD_EXP 23
39217: PPUSH
39218: LD_STRING D4-Pow-3
39220: PPUSH
39221: CALL_OW 94
// DialogueOff ;
39225: CALL_OW 7
// end ;
39229: END
// every 0 0$01 trigger JMMArrive = 1 do
39230: LD_EXP 39
39234: PUSH
39235: LD_INT 1
39237: EQUAL
39238: IFFALSE 39270
39240: GO 39242
39242: DISABLE
// begin wait ( 8 8$0 ) ;
39243: LD_INT 16800
39245: PPUSH
39246: CALL_OW 67
// DialogueOn ;
39250: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39254: LD_EXP 23
39258: PPUSH
39259: LD_STRING D4a-Pow-1
39261: PPUSH
39262: CALL_OW 94
// DialogueOff ;
39266: CALL_OW 7
// end ;
39270: END
// every 0 0$01 trigger JMMArrive = 1 do
39271: LD_EXP 39
39275: PUSH
39276: LD_INT 1
39278: EQUAL
39279: IFFALSE 39324
39281: GO 39283
39283: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39284: LD_INT 21000
39286: PUSH
39287: LD_INT 25200
39289: PUSH
39290: LD_INT 31500
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: PUSH
39298: LD_OWVAR 67
39302: ARRAY
39303: PPUSH
39304: CALL_OW 67
// PrepareSikorsky ;
39308: CALL 5598 0 0
// SikorskyArrive = 1 ;
39312: LD_ADDR_EXP 18
39316: PUSH
39317: LD_INT 1
39319: ST_TO_ADDR
// PrepareSikorskyArmy ;
39320: CALL 5771 0 0
// end ;
39324: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39325: LD_EXP 17
39329: PPUSH
39330: LD_INT 5
39332: PPUSH
39333: CALL_OW 308
39337: IFFALSE 39529
39339: GO 39341
39341: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39342: LD_EXP 17
39346: PPUSH
39347: CALL_OW 87
// DialogueOn ;
39351: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39355: LD_EXP 16
39359: PPUSH
39360: LD_STRING D5-Sik-1
39362: PPUSH
39363: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39367: LD_EXP 1
39371: PPUSH
39372: LD_STRING D5-JMM-1a
39374: PPUSH
39375: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39379: LD_EXP 16
39383: PPUSH
39384: LD_STRING D5-Sik-2
39386: PPUSH
39387: CALL_OW 88
// case query ( QSikorski ) of 1 :
39391: LD_STRING QSikorski
39393: PPUSH
39394: CALL_OW 97
39398: PUSH
39399: LD_INT 1
39401: DOUBLE
39402: EQUAL
39403: IFTRUE 39407
39405: GO 39430
39407: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39408: LD_EXP 16
39412: PPUSH
39413: LD_STRING D5a-Sik-1
39415: PPUSH
39416: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39420: LD_ADDR_EXP 19
39424: PUSH
39425: LD_INT 2100
39427: ST_TO_ADDR
// end ; 2 :
39428: GO 39517
39430: LD_INT 2
39432: DOUBLE
39433: EQUAL
39434: IFTRUE 39438
39436: GO 39461
39438: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39439: LD_EXP 16
39443: PPUSH
39444: LD_STRING D5b-Sik-1
39446: PPUSH
39447: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39451: LD_ADDR_EXP 19
39455: PUSH
39456: LD_INT 10500
39458: ST_TO_ADDR
// end ; 3 :
39459: GO 39517
39461: LD_INT 3
39463: DOUBLE
39464: EQUAL
39465: IFTRUE 39469
39467: GO 39516
39469: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39470: LD_EXP 16
39474: PPUSH
39475: LD_STRING D5c-Sik-1
39477: PPUSH
39478: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39482: LD_EXP 1
39486: PPUSH
39487: LD_STRING D5c-JMM-1
39489: PPUSH
39490: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39494: LD_EXP 16
39498: PPUSH
39499: LD_STRING D5c-Sik-2
39501: PPUSH
39502: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39506: LD_ADDR_EXP 19
39510: PUSH
39511: LD_INT 10500
39513: ST_TO_ADDR
// end ; end ;
39514: GO 39517
39516: POP
// DialogueOff ;
39517: CALL_OW 7
// timerStatus = 1 ;
39521: LD_ADDR_EXP 35
39525: PUSH
39526: LD_INT 1
39528: ST_TO_ADDR
// end ;
39529: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39530: LD_EXP 19
39534: PUSH
39535: LD_INT 35
39537: LESS
39538: IFFALSE 39586
39540: GO 39542
39542: DISABLE
// begin timerStatus = 0 ;
39543: LD_ADDR_EXP 35
39547: PUSH
39548: LD_INT 0
39550: ST_TO_ADDR
// DialogueOn ;
39551: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39555: LD_EXP 16
39559: PPUSH
39560: LD_STRING D6-Sik-1
39562: PPUSH
39563: CALL_OW 88
// DialogueOff ;
39567: CALL_OW 7
// SikorskyAI = 1 ;
39571: LD_ADDR_EXP 20
39575: PUSH
39576: LD_INT 1
39578: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39579: LD_STRING M2
39581: PPUSH
39582: CALL_OW 337
// end ;
39586: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39587: LD_EXP 17
39591: PPUSH
39592: LD_INT 18
39594: PPUSH
39595: CALL_OW 308
39599: IFFALSE 39709
39601: GO 39603
39603: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39604: LD_EXP 16
39608: PPUSH
39609: LD_STRING D7-Sik-1
39611: PPUSH
39612: CALL_OW 88
// wait ( 0 0$10 ) ;
39616: LD_INT 350
39618: PPUSH
39619: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
39623: LD_EXP 1
39627: PPUSH
39628: LD_INT 24
39630: PPUSH
39631: CALL_OW 308
39635: PUSH
39636: LD_EXP 1
39640: PPUSH
39641: CALL 37089 0 1
39645: PUSH
39646: LD_EXP 1
39650: PPUSH
39651: CALL 37089 0 1
39655: PPUSH
39656: LD_INT 24
39658: PPUSH
39659: CALL_OW 308
39663: AND
39664: OR
39665: IFFALSE 39689
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39667: LD_EXP 16
39671: PPUSH
39672: LD_STRING D7a-Sik-1
39674: PPUSH
39675: CALL_OW 88
// SikorskyStatus = 1 ;
39679: LD_ADDR_EXP 21
39683: PUSH
39684: LD_INT 1
39686: ST_TO_ADDR
// end else
39687: GO 39709
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39689: LD_EXP 16
39693: PPUSH
39694: LD_STRING D7b-Sik-1
39696: PPUSH
39697: CALL_OW 88
// SikorskyStatus = 2 ;
39701: LD_ADDR_EXP 21
39705: PUSH
39706: LD_INT 2
39708: ST_TO_ADDR
// end ; end ;
39709: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39710: LD_EXP 36
39714: PUSH
39715: LD_INT 1
39717: EQUAL
39718: IFFALSE 39827
39720: GO 39722
39722: DISABLE
39723: LD_INT 0
39725: PPUSH
// begin enable ;
39726: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39727: LD_ADDR_VAR 0 1
39731: PUSH
39732: LD_INT 22
39734: PUSH
39735: LD_INT 3
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PPUSH
39742: CALL_OW 69
39746: PUSH
39747: FOR_IN
39748: IFFALSE 39775
// if IsInArea ( i , RussianEscape ) then
39750: LD_VAR 0 1
39754: PPUSH
39755: LD_INT 22
39757: PPUSH
39758: CALL_OW 308
39762: IFFALSE 39773
// RemoveUnit ( i ) ;
39764: LD_VAR 0 1
39768: PPUSH
39769: CALL_OW 64
39773: GO 39747
39775: POP
39776: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39777: LD_ADDR_VAR 0 1
39781: PUSH
39782: LD_INT 22
39784: PUSH
39785: LD_INT 6
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PPUSH
39792: CALL_OW 69
39796: PUSH
39797: FOR_IN
39798: IFFALSE 39825
// if IsInArea ( i , RussianEscape ) then
39800: LD_VAR 0 1
39804: PPUSH
39805: LD_INT 22
39807: PPUSH
39808: CALL_OW 308
39812: IFFALSE 39823
// RemoveUnit ( i ) ;
39814: LD_VAR 0 1
39818: PPUSH
39819: CALL_OW 64
39823: GO 39797
39825: POP
39826: POP
// end ; end_of_file
39827: PPOPN 1
39829: END
// on BuildingComplete ( building ) do var tmp , un ;
39830: LD_INT 0
39832: PPUSH
39833: PPUSH
// begin if GetSide ( building ) = 3 then
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 255
39843: PUSH
39844: LD_INT 3
39846: EQUAL
39847: IFFALSE 40384
// begin if GetBType ( building ) = b_depot then
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 266
39858: PUSH
39859: LD_INT 0
39861: EQUAL
39862: IFFALSE 39930
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 274
39873: PPUSH
39874: LD_INT 1
39876: PPUSH
39877: LD_INT 5000
39879: PPUSH
39880: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39884: LD_VAR 0 1
39888: PPUSH
39889: CALL_OW 274
39893: PPUSH
39894: LD_INT 2
39896: PPUSH
39897: LD_INT 5000
39899: PPUSH
39900: CALL_OW 277
// SetBName ( building , konev ) ;
39904: LD_VAR 0 1
39908: PPUSH
39909: LD_STRING konev
39911: PPUSH
39912: CALL_OW 500
// ruDepot = building ;
39916: LD_ADDR_EXP 28
39920: PUSH
39921: LD_VAR 0 1
39925: ST_TO_ADDR
// BuildRussianBase ;
39926: CALL 7766 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39930: LD_VAR 0 1
39934: PPUSH
39935: CALL_OW 266
39939: PUSH
39940: LD_INT 0
39942: EQUAL
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 266
39953: PUSH
39954: LD_INT 2
39956: EQUAL
39957: OR
39958: PUSH
39959: LD_VAR 0 1
39963: PPUSH
39964: CALL_OW 266
39968: PUSH
39969: LD_INT 4
39971: EQUAL
39972: OR
39973: IFFALSE 39984
// ComUpgrade ( building ) ;
39975: LD_VAR 0 1
39979: PPUSH
39980: CALL_OW 146
// if GetBType ( building ) = b_lab then
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 266
39993: PUSH
39994: LD_INT 6
39996: EQUAL
39997: IFFALSE 40048
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39999: LD_VAR 0 1
40003: PPUSH
40004: LD_INT 10
40006: PPUSH
40007: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
40011: LD_VAR 0 1
40015: PPUSH
40016: LD_INT 12
40018: PPUSH
40019: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
40023: LD_INT 3
40025: PPUSH
40026: LD_VAR 0 1
40030: PPUSH
40031: LD_INT 3
40033: PPUSH
40034: CALL 8310 0 3
// ruLab = building ;
40038: LD_ADDR_EXP 29
40042: PUSH
40043: LD_VAR 0 1
40047: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
40048: LD_VAR 0 1
40052: PPUSH
40053: CALL_OW 266
40057: PUSH
40058: LD_INT 32
40060: EQUAL
40061: IFFALSE 40179
// begin uc_side = 3 ;
40063: LD_ADDR_OWVAR 20
40067: PUSH
40068: LD_INT 3
40070: ST_TO_ADDR
// uc_nation = 3 ;
40071: LD_ADDR_OWVAR 21
40075: PUSH
40076: LD_INT 3
40078: ST_TO_ADDR
// hc_gallery =  ;
40079: LD_ADDR_OWVAR 33
40083: PUSH
40084: LD_STRING 
40086: ST_TO_ADDR
// hc_name =  ;
40087: LD_ADDR_OWVAR 26
40091: PUSH
40092: LD_STRING 
40094: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40095: LD_INT 0
40097: PPUSH
40098: LD_INT 1
40100: PPUSH
40101: LD_EXP 25
40105: PPUSH
40106: LD_EXP 26
40110: PPUSH
40111: CALL_OW 12
40115: PPUSH
40116: CALL_OW 380
// un = CreateHuman ;
40120: LD_ADDR_VAR 0 3
40124: PUSH
40125: CALL_OW 44
40129: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40130: LD_VAR 0 3
40134: PPUSH
40135: LD_VAR 0 1
40139: PPUSH
40140: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40144: LD_VAR 0 1
40148: PPUSH
40149: LD_INT 43
40151: PUSH
40152: LD_INT 44
40154: PUSH
40155: LD_INT 46
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PPUSH
40166: LD_INT 3
40168: PPUSH
40169: CALL_OW 12
40173: ARRAY
40174: PPUSH
40175: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40179: LD_VAR 0 1
40183: PPUSH
40184: CALL_OW 266
40188: PUSH
40189: LD_INT 33
40191: EQUAL
40192: IFFALSE 40229
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_INT 43
40201: PUSH
40202: LD_INT 44
40204: PUSH
40205: LD_INT 46
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: PPUSH
40216: LD_INT 3
40218: PPUSH
40219: CALL_OW 12
40223: ARRAY
40224: PPUSH
40225: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40229: LD_VAR 0 1
40233: PPUSH
40234: CALL_OW 266
40238: PUSH
40239: LD_INT 32
40241: EQUAL
40242: IFFALSE 40279
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40244: LD_VAR 0 1
40248: PPUSH
40249: LD_INT 43
40251: PUSH
40252: LD_INT 44
40254: PUSH
40255: LD_INT 46
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PPUSH
40266: LD_INT 3
40268: PPUSH
40269: CALL_OW 12
40273: ARRAY
40274: PPUSH
40275: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40279: LD_VAR 0 1
40283: PPUSH
40284: CALL_OW 266
40288: PUSH
40289: LD_INT 24
40291: EQUAL
40292: IFFALSE 40302
// russianAI = 1 ;
40294: LD_ADDR_EXP 27
40298: PUSH
40299: LD_INT 1
40301: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40302: LD_EXP 31
40306: PUSH
40307: LD_INT 0
40309: GREATER
40310: IFFALSE 40384
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40312: LD_ADDR_EXP 31
40316: PUSH
40317: LD_EXP 31
40321: PPUSH
40322: LD_INT 1
40324: PPUSH
40325: CALL_OW 3
40329: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40330: LD_ADDR_EXP 31
40334: PUSH
40335: LD_EXP 31
40339: PPUSH
40340: LD_INT 1
40342: PPUSH
40343: CALL_OW 3
40347: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40348: LD_ADDR_EXP 31
40352: PUSH
40353: LD_EXP 31
40357: PPUSH
40358: LD_INT 1
40360: PPUSH
40361: CALL_OW 3
40365: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40366: LD_ADDR_EXP 31
40370: PUSH
40371: LD_EXP 31
40375: PPUSH
40376: LD_INT 1
40378: PPUSH
40379: CALL_OW 3
40383: ST_TO_ADDR
// end ; end ; end ;
40384: PPOPN 3
40386: END
// on UpgradeComplete ( building ) do var i ;
40387: LD_INT 0
40389: PPUSH
// begin if GetSide ( building ) = 3 then
40390: LD_VAR 0 1
40394: PPUSH
40395: CALL_OW 255
40399: PUSH
40400: LD_INT 3
40402: EQUAL
40403: IFFALSE 40584
// begin if GetBType ( building ) = b_factory then
40405: LD_VAR 0 1
40409: PPUSH
40410: CALL_OW 266
40414: PUSH
40415: LD_INT 3
40417: EQUAL
40418: IFFALSE 40485
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40420: LD_ADDR_VAR 0 2
40424: PUSH
40425: LD_INT 22
40427: PUSH
40428: LD_INT 3
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 25
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PPUSH
40449: CALL_OW 69
40453: PUSH
40454: FOR_IN
40455: IFFALSE 40473
// ComEnterUnit ( i , building ) ;
40457: LD_VAR 0 2
40461: PPUSH
40462: LD_VAR 0 1
40466: PPUSH
40467: CALL_OW 120
40471: GO 40454
40473: POP
40474: POP
// ruFab = building ;
40475: LD_ADDR_EXP 30
40479: PUSH
40480: LD_VAR 0 1
40484: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40485: LD_VAR 0 1
40489: PPUSH
40490: CALL_OW 266
40494: PUSH
40495: LD_INT 8
40497: EQUAL
40498: IFFALSE 40555
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40500: LD_ADDR_VAR 0 2
40504: PUSH
40505: LD_INT 22
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 25
40517: PUSH
40518: LD_INT 4
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PPUSH
40529: CALL_OW 69
40533: PUSH
40534: FOR_IN
40535: IFFALSE 40553
// ComEnterUnit ( i , building ) ;
40537: LD_VAR 0 2
40541: PPUSH
40542: LD_VAR 0 1
40546: PPUSH
40547: CALL_OW 120
40551: GO 40534
40553: POP
40554: POP
// if GetBType ( building ) = b_warehouse then
40555: LD_VAR 0 1
40559: PPUSH
40560: CALL_OW 266
40564: PUSH
40565: LD_INT 1
40567: EQUAL
40568: IFFALSE 40584
// begin ComEnterUnit ( Borodin , building ) ;
40570: LD_EXP 24
40574: PPUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 120
// end ; end ; end ;
40584: PPOPN 2
40586: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40587: LD_VAR 0 1
40591: PPUSH
40592: CALL_OW 247
40596: PUSH
40597: LD_INT 2
40599: EQUAL
40600: PUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 263
40610: PUSH
40611: LD_INT 3
40613: EQUAL
40614: AND
40615: PUSH
40616: LD_EXP 41
40620: PUSH
40621: LD_INT 0
40623: EQUAL
40624: AND
40625: IFFALSE 40743
// begin varEvent1 = 1 ;
40627: LD_ADDR_EXP 41
40631: PUSH
40632: LD_INT 1
40634: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40644: LD_INT 22
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 21
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 25
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 25
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 25
40689: PUSH
40690: LD_INT 3
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 25
40699: PUSH
40700: LD_INT 4
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: PPUSH
40719: CALL_OW 69
40723: PUSH
40724: LD_EXP 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: DIFF
40732: PPUSH
40733: LD_STRING DC-Sol1-1
40735: PPUSH
40736: LD_STRING DC-FSol1-1
40738: PPUSH
40739: CALL 7155 0 3
// end ; end ;
40743: PPOPN 1
40745: END
// on UnitDestroyed ( unit ) do var i ;
40746: LD_INT 0
40748: PPUSH
// begin if unit = Joan then
40749: LD_VAR 0 1
40753: PUSH
40754: LD_EXP 15
40758: EQUAL
40759: IFFALSE 40768
// DeleteCharacters ( Joan ) ;
40761: LD_STRING Joan
40763: PPUSH
40764: CALL_OW 40
// if GetSide ( unit ) = 3 then
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 255
40777: PUSH
40778: LD_INT 3
40780: EQUAL
40781: IFFALSE 41551
// begin if GetType ( unit ) = unit_building then
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 247
40792: PUSH
40793: LD_INT 3
40795: EQUAL
40796: IFFALSE 41488
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 266
40807: PUSH
40808: LD_INT 31
40810: EQUAL
40811: PUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 266
40821: PUSH
40822: LD_INT 32
40824: EQUAL
40825: OR
40826: PUSH
40827: LD_VAR 0 1
40831: PPUSH
40832: CALL_OW 266
40836: PUSH
40837: LD_INT 36
40839: EQUAL
40840: OR
40841: PUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 266
40851: PUSH
40852: LD_INT 0
40854: EQUAL
40855: OR
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 266
40866: PUSH
40867: LD_INT 24
40869: EQUAL
40870: OR
40871: PUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 266
40881: PUSH
40882: LD_INT 17
40884: EQUAL
40885: OR
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 266
40896: PUSH
40897: LD_INT 25
40899: EQUAL
40900: OR
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 266
40911: PUSH
40912: LD_INT 19
40914: EQUAL
40915: OR
40916: PUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 266
40926: PUSH
40927: LD_INT 20
40929: EQUAL
40930: OR
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 266
40941: PUSH
40942: LD_INT 18
40944: EQUAL
40945: OR
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 266
40956: PUSH
40957: LD_INT 21
40959: EQUAL
40960: OR
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 266
40971: PUSH
40972: LD_INT 23
40974: EQUAL
40975: OR
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 266
40986: PUSH
40987: LD_INT 16
40989: EQUAL
40990: OR
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 266
41001: PUSH
41002: LD_INT 6
41004: EQUAL
41005: OR
41006: PUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 266
41016: PUSH
41017: LD_INT 29
41019: EQUAL
41020: OR
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 266
41031: PUSH
41032: LD_INT 26
41034: EQUAL
41035: OR
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 266
41046: PUSH
41047: LD_INT 30
41049: EQUAL
41050: OR
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 266
41061: PUSH
41062: LD_INT 28
41064: EQUAL
41065: OR
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 266
41076: PUSH
41077: LD_INT 27
41079: EQUAL
41080: OR
41081: PUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: CALL_OW 266
41091: PUSH
41092: LD_INT 33
41094: EQUAL
41095: OR
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 266
41106: PUSH
41107: LD_INT 2
41109: EQUAL
41110: OR
41111: PUSH
41112: LD_VAR 0 1
41116: PPUSH
41117: CALL_OW 266
41121: PUSH
41122: LD_INT 4
41124: EQUAL
41125: OR
41126: IFFALSE 41212
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
41128: LD_ADDR_EXP 31
41132: PUSH
41133: LD_EXP 31
41137: PUSH
41138: LD_VAR 0 1
41142: PPUSH
41143: CALL_OW 266
41147: ADD
41148: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41149: LD_ADDR_EXP 31
41153: PUSH
41154: LD_EXP 31
41158: PUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 250
41168: ADD
41169: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41170: LD_ADDR_EXP 31
41174: PUSH
41175: LD_EXP 31
41179: PUSH
41180: LD_VAR 0 1
41184: PPUSH
41185: CALL_OW 251
41189: ADD
41190: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41191: LD_ADDR_EXP 31
41195: PUSH
41196: LD_EXP 31
41200: PUSH
41201: LD_VAR 0 1
41205: PPUSH
41206: CALL_OW 254
41210: ADD
41211: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41212: LD_VAR 0 1
41216: PPUSH
41217: CALL_OW 266
41221: PUSH
41222: LD_INT 1
41224: EQUAL
41225: IFFALSE 41304
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41227: LD_ADDR_EXP 31
41231: PUSH
41232: LD_EXP 31
41236: PUSH
41237: LD_INT 0
41239: ADD
41240: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41241: LD_ADDR_EXP 31
41245: PUSH
41246: LD_EXP 31
41250: PUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: CALL_OW 250
41260: ADD
41261: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41262: LD_ADDR_EXP 31
41266: PUSH
41267: LD_EXP 31
41271: PUSH
41272: LD_VAR 0 1
41276: PPUSH
41277: CALL_OW 251
41281: ADD
41282: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41283: LD_ADDR_EXP 31
41287: PUSH
41288: LD_EXP 31
41292: PUSH
41293: LD_VAR 0 1
41297: PPUSH
41298: CALL_OW 254
41302: ADD
41303: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41304: LD_VAR 0 1
41308: PPUSH
41309: CALL_OW 266
41313: PUSH
41314: LD_INT 3
41316: EQUAL
41317: IFFALSE 41396
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41319: LD_ADDR_EXP 31
41323: PUSH
41324: LD_EXP 31
41328: PUSH
41329: LD_INT 2
41331: ADD
41332: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41333: LD_ADDR_EXP 31
41337: PUSH
41338: LD_EXP 31
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 250
41352: ADD
41353: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41354: LD_ADDR_EXP 31
41358: PUSH
41359: LD_EXP 31
41363: PUSH
41364: LD_VAR 0 1
41368: PPUSH
41369: CALL_OW 251
41373: ADD
41374: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41375: LD_ADDR_EXP 31
41379: PUSH
41380: LD_EXP 31
41384: PUSH
41385: LD_VAR 0 1
41389: PPUSH
41390: CALL_OW 254
41394: ADD
41395: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 266
41405: PUSH
41406: LD_INT 5
41408: EQUAL
41409: IFFALSE 41488
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41411: LD_ADDR_EXP 31
41415: PUSH
41416: LD_EXP 31
41420: PUSH
41421: LD_INT 4
41423: ADD
41424: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41425: LD_ADDR_EXP 31
41429: PUSH
41430: LD_EXP 31
41434: PUSH
41435: LD_VAR 0 1
41439: PPUSH
41440: CALL_OW 250
41444: ADD
41445: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41446: LD_ADDR_EXP 31
41450: PUSH
41451: LD_EXP 31
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: CALL_OW 251
41465: ADD
41466: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41467: LD_ADDR_EXP 31
41471: PUSH
41472: LD_EXP 31
41476: PUSH
41477: LD_VAR 0 1
41481: PPUSH
41482: CALL_OW 254
41486: ADD
41487: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41488: LD_VAR 0 1
41492: PPUSH
41493: CALL_OW 247
41497: PUSH
41498: LD_INT 1
41500: EQUAL
41501: IFFALSE 41551
// begin for i in defenders_list do
41503: LD_ADDR_VAR 0 2
41507: PUSH
41508: LD_EXP 32
41512: PUSH
41513: FOR_IN
41514: IFFALSE 41549
// if i = unit then
41516: LD_VAR 0 2
41520: PUSH
41521: LD_VAR 0 1
41525: EQUAL
41526: IFFALSE 41547
// defenders_list = defenders_list diff [ unit ] ;
41528: LD_ADDR_EXP 32
41532: PUSH
41533: LD_EXP 32
41537: PUSH
41538: LD_VAR 0 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: DIFF
41546: ST_TO_ADDR
41547: GO 41513
41549: POP
41550: POP
// end ; end ; end ;
41551: PPOPN 2
41553: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
41554: LD_VAR 0 1
41558: PPUSH
41559: CALL 46272 0 1
// end ; end_of_file
41563: PPOPN 1
41565: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41566: GO 41568
41568: DISABLE
41569: LD_INT 0
41571: PPUSH
// begin enemyWayX = [ ] ;
41572: LD_ADDR_EXP 46
41576: PUSH
41577: EMPTY
41578: ST_TO_ADDR
// enemyWayY = [ ] ;
41579: LD_ADDR_EXP 47
41583: PUSH
41584: EMPTY
41585: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41586: LD_ADDR_VAR 0 1
41590: PUSH
41591: LD_INT 1
41593: PPUSH
41594: LD_INT 3
41596: PPUSH
41597: CALL_OW 12
41601: ST_TO_ADDR
// if rnd = 1 then
41602: LD_VAR 0 1
41606: PUSH
41607: LD_INT 1
41609: EQUAL
41610: IFFALSE 41650
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41612: LD_ADDR_EXP 46
41616: PUSH
41617: LD_INT 73
41619: PUSH
41620: LD_INT 46
41622: PUSH
41623: LD_INT 29
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41631: LD_ADDR_EXP 47
41635: PUSH
41636: LD_INT 71
41638: PUSH
41639: LD_INT 43
41641: PUSH
41642: LD_INT 29
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: LIST
41649: ST_TO_ADDR
// end ; if rnd = 2 then
41650: LD_VAR 0 1
41654: PUSH
41655: LD_INT 2
41657: EQUAL
41658: IFFALSE 41682
// begin enemyWayX = [ 64 ] ;
41660: LD_ADDR_EXP 46
41664: PUSH
41665: LD_INT 64
41667: PUSH
41668: EMPTY
41669: LIST
41670: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41671: LD_ADDR_EXP 47
41675: PUSH
41676: LD_INT 43
41678: PUSH
41679: EMPTY
41680: LIST
41681: ST_TO_ADDR
// end ; if rnd = 3 then
41682: LD_VAR 0 1
41686: PUSH
41687: LD_INT 3
41689: EQUAL
41690: IFFALSE 41714
// begin enemyWayX = [ 80 ] ;
41692: LD_ADDR_EXP 46
41696: PUSH
41697: LD_INT 80
41699: PUSH
41700: EMPTY
41701: LIST
41702: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41703: LD_ADDR_EXP 47
41707: PUSH
41708: LD_INT 28
41710: PUSH
41711: EMPTY
41712: LIST
41713: ST_TO_ADDR
// end ; enable ;
41714: ENABLE
// end ;
41715: PPOPN 1
41717: END
// every 0 0$1 do
41718: GO 41720
41720: DISABLE
// begin enable ;
41721: ENABLE
// if escapeAvalaible = 0 then
41722: LD_EXP 36
41726: PUSH
41727: LD_INT 0
41729: EQUAL
41730: IFFALSE 41742
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41732: LD_INT 3
41734: PPUSH
41735: LD_INT 6
41737: PPUSH
41738: CALL 8551 0 2
// if escapeAvalaible = 0 then
41742: LD_EXP 36
41746: PUSH
41747: LD_INT 0
41749: EQUAL
41750: IFFALSE 41762
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41752: LD_INT 1
41754: PPUSH
41755: LD_INT 24
41757: PPUSH
41758: CALL 9211 0 2
// if russianAI = 1 then
41762: LD_EXP 27
41766: PUSH
41767: LD_INT 1
41769: EQUAL
41770: IFFALSE 41840
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41772: LD_INT 3
41774: PPUSH
41775: LD_INT 7
41777: PPUSH
41778: LD_INT 6
41780: PPUSH
41781: LD_EXP 29
41785: PPUSH
41786: CALL 11649 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41790: LD_INT 3
41792: PPUSH
41793: LD_EXP 28
41797: PPUSH
41798: LD_INT 6
41800: PPUSH
41801: LD_EXP 31
41805: PPUSH
41806: CALL 11243 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41810: LD_INT 3
41812: PPUSH
41813: LD_INT 26
41815: PPUSH
41816: LD_EXP 46
41820: PPUSH
41821: LD_EXP 47
41825: PPUSH
41826: CALL 10111 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41830: LD_INT 3
41832: PPUSH
41833: LD_INT 1
41835: PPUSH
41836: CALL 12193 0 2
// end ; if SikorskyArrive = 1 then
41840: LD_EXP 18
41844: PUSH
41845: LD_INT 1
41847: EQUAL
41848: IFFALSE 41866
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41850: LD_INT 3
41852: PPUSH
41853: LD_INT 10
41855: PPUSH
41856: LD_INT 53
41858: PPUSH
41859: LD_INT 59
41861: PPUSH
41862: CALL 9908 0 4
// end ;
41866: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41867: LD_EXP 27
41871: PUSH
41872: LD_INT 1
41874: EQUAL
41875: IFFALSE 42151
41877: GO 41879
41879: DISABLE
41880: LD_INT 0
41882: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41883: LD_ADDR_VAR 0 1
41887: PUSH
41888: LD_INT 22
41890: PUSH
41891: LD_INT 3
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 21
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 30
41910: PUSH
41911: LD_INT 32
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 35
41926: PUSH
41927: LD_INT 43
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 35
41936: PUSH
41937: LD_INT 44
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 35
41946: PUSH
41947: LD_INT 46
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: PPUSH
41970: CALL_OW 69
41974: PUSH
41975: FOR_IN
41976: IFFALSE 42015
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41978: LD_VAR 0 1
41982: PPUSH
41983: LD_INT 43
41985: PUSH
41986: LD_INT 44
41988: PUSH
41989: LD_INT 46
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PPUSH
42000: LD_INT 3
42002: PPUSH
42003: CALL_OW 12
42007: ARRAY
42008: PPUSH
42009: CALL_OW 431
42013: GO 41975
42015: POP
42016: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
42017: LD_ADDR_VAR 0 1
42021: PUSH
42022: LD_INT 22
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 21
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 30
42044: PUSH
42045: LD_INT 33
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 35
42060: PUSH
42061: LD_INT 43
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 35
42070: PUSH
42071: LD_INT 44
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 35
42080: PUSH
42081: LD_INT 46
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: PPUSH
42104: CALL_OW 69
42108: PUSH
42109: FOR_IN
42110: IFFALSE 42149
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42112: LD_VAR 0 1
42116: PPUSH
42117: LD_INT 43
42119: PUSH
42120: LD_INT 44
42122: PUSH
42123: LD_INT 46
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PPUSH
42134: LD_INT 3
42136: PPUSH
42137: CALL_OW 12
42141: ARRAY
42142: PPUSH
42143: CALL_OW 431
42147: GO 42109
42149: POP
42150: POP
// end ;
42151: PPOPN 1
42153: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
42154: LD_EXP 24
42158: PPUSH
42159: CALL_OW 310
42163: NOT
42164: PUSH
42165: LD_EXP 28
42169: PPUSH
42170: CALL_OW 302
42174: AND
42175: PUSH
42176: LD_EXP 28
42180: PPUSH
42181: CALL_OW 255
42185: PUSH
42186: LD_INT 3
42188: EQUAL
42189: AND
42190: IFFALSE 42210
42192: GO 42194
42194: DISABLE
// begin enable ;
42195: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42196: LD_EXP 24
42200: PPUSH
42201: LD_EXP 28
42205: PPUSH
42206: CALL_OW 120
// end ;
42210: END
// every 0 0$1 trigger SikorskyAI = 1 do
42211: LD_EXP 20
42215: PUSH
42216: LD_INT 1
42218: EQUAL
42219: IFFALSE 42254
42221: GO 42223
42223: DISABLE
// begin enable ;
42224: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42225: LD_INT 4
42227: PPUSH
42228: LD_INT 10
42230: PPUSH
42231: LD_INT 93
42233: PPUSH
42234: LD_INT 93
42236: PPUSH
42237: CALL 9908 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42241: LD_INT 4
42243: PPUSH
42244: LD_INT 11
42246: PPUSH
42247: LD_INT 3
42249: PPUSH
42250: CALL 16405 0 3
// end ;
42254: END
// every 0 0$1 trigger SikorskyAI = 1 do
42255: LD_EXP 20
42259: PUSH
42260: LD_INT 1
42262: EQUAL
42263: IFFALSE 42275
42265: GO 42267
42267: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42268: LD_INT 4
42270: PPUSH
42271: CALL 10915 0 1
42275: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42276: LD_EXP 27
42280: PUSH
42281: LD_INT 1
42283: EQUAL
42284: PUSH
42285: LD_EXP 30
42289: PPUSH
42290: CALL_OW 302
42294: AND
42295: PUSH
42296: LD_EXP 30
42300: PPUSH
42301: CALL_OW 255
42305: PUSH
42306: LD_INT 3
42308: EQUAL
42309: AND
42310: PUSH
42311: LD_INT 22
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 21
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 33
42333: PUSH
42334: LD_INT 3
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: PPUSH
42346: CALL_OW 69
42350: PUSH
42351: LD_INT 0
42353: EQUAL
42354: AND
42355: IFFALSE 42589
42357: GO 42359
42359: DISABLE
// begin enable ;
42360: ENABLE
// if Difficulty = 1 then
42361: LD_OWVAR 67
42365: PUSH
42366: LD_INT 1
42368: EQUAL
42369: IFFALSE 42437
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42371: LD_INT 3
42373: PPUSH
42374: LD_EXP 30
42378: PPUSH
42379: LD_INT 5
42381: PPUSH
42382: LD_INT 8
42384: PPUSH
42385: CALL_OW 12
42389: PPUSH
42390: LD_INT 43
42392: PUSH
42393: LD_INT 43
42395: PUSH
42396: LD_INT 43
42398: PUSH
42399: LD_INT 43
42401: PUSH
42402: LD_INT 44
42404: PUSH
42405: LD_INT 44
42407: PUSH
42408: LD_INT 44
42410: PUSH
42411: LD_INT 46
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: PPUSH
42424: LD_INT 1
42426: PPUSH
42427: LD_INT 3
42429: PPUSH
42430: LD_INT 24
42432: PPUSH
42433: CALL 9754 0 7
// if Difficulty = 2 then
42437: LD_OWVAR 67
42441: PUSH
42442: LD_INT 2
42444: EQUAL
42445: IFFALSE 42513
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42447: LD_INT 3
42449: PPUSH
42450: LD_EXP 30
42454: PPUSH
42455: LD_INT 6
42457: PPUSH
42458: LD_INT 8
42460: PPUSH
42461: CALL_OW 12
42465: PPUSH
42466: LD_INT 43
42468: PUSH
42469: LD_INT 43
42471: PUSH
42472: LD_INT 44
42474: PUSH
42475: LD_INT 44
42477: PUSH
42478: LD_INT 44
42480: PUSH
42481: LD_INT 44
42483: PUSH
42484: LD_INT 46
42486: PUSH
42487: LD_INT 46
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: PPUSH
42500: LD_INT 1
42502: PPUSH
42503: LD_INT 3
42505: PPUSH
42506: LD_INT 24
42508: PPUSH
42509: CALL 9754 0 7
// if Difficulty = 3 then
42513: LD_OWVAR 67
42517: PUSH
42518: LD_INT 3
42520: EQUAL
42521: IFFALSE 42589
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42523: LD_INT 3
42525: PPUSH
42526: LD_EXP 30
42530: PPUSH
42531: LD_INT 7
42533: PPUSH
42534: LD_INT 8
42536: PPUSH
42537: CALL_OW 12
42541: PPUSH
42542: LD_INT 43
42544: PUSH
42545: LD_INT 43
42547: PUSH
42548: LD_INT 44
42550: PUSH
42551: LD_INT 44
42553: PUSH
42554: LD_INT 44
42556: PUSH
42557: LD_INT 46
42559: PUSH
42560: LD_INT 46
42562: PUSH
42563: LD_INT 46
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: PPUSH
42576: LD_INT 1
42578: PPUSH
42579: LD_INT 3
42581: PPUSH
42582: LD_INT 24
42584: PPUSH
42585: CALL 9754 0 7
// end ;
42589: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42590: LD_EXP 38
42594: PUSH
42595: LD_INT 1
42597: EQUAL
42598: IFFALSE 42680
42600: GO 42602
42602: DISABLE
42603: LD_INT 0
42605: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42606: LD_ADDR_VAR 0 1
42610: PUSH
42611: LD_INT 22
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 21
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: LD_INT 24
42636: PUSH
42637: LD_INT 650
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: LIST
42652: PPUSH
42653: CALL_OW 69
42657: PUSH
42658: FOR_IN
42659: IFFALSE 42678
// ComMoveXY ( i , 51 , 12 ) ;
42661: LD_VAR 0 1
42665: PPUSH
42666: LD_INT 51
42668: PPUSH
42669: LD_INT 12
42671: PPUSH
42672: CALL_OW 111
42676: GO 42658
42678: POP
42679: POP
// end ; end_of_file
42680: PPOPN 1
42682: END
// every 1 1$20 trigger firstAttack = 1 do
42683: LD_EXP 33
42687: PUSH
42688: LD_INT 1
42690: EQUAL
42691: IFFALSE 42797
42693: GO 42695
42695: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42696: LD_INT 6
42698: PPUSH
42699: LD_INT 3
42701: PPUSH
42702: LD_INT 5
42704: PPUSH
42705: LD_INT 6
42707: PPUSH
42708: CALL_OW 12
42712: PUSH
42713: LD_INT 5
42715: PPUSH
42716: LD_INT 6
42718: PPUSH
42719: CALL_OW 12
42723: PUSH
42724: LD_INT 5
42726: PPUSH
42727: LD_INT 6
42729: PPUSH
42730: CALL_OW 12
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: PUSH
42740: LD_OWVAR 67
42744: ARRAY
42745: PPUSH
42746: LD_INT 0
42748: PPUSH
42749: LD_INT 0
42751: PPUSH
42752: LD_INT 0
42754: PPUSH
42755: LD_INT 0
42757: PPUSH
42758: LD_EXP 25
42762: PPUSH
42763: LD_EXP 26
42767: PPUSH
42768: CALL_OW 12
42772: PPUSH
42773: LD_INT 16
42775: PPUSH
42776: LD_INT 7
42778: PPUSH
42779: LD_INT 1
42781: PPUSH
42782: LD_INT 1
42784: PPUSH
42785: LD_INT 3
42787: PPUSH
42788: CALL_OW 12
42792: PPUSH
42793: CALL 12423 0 12
42797: END
// every 1 1$40 trigger firstAttack = 1 do
42798: LD_EXP 33
42802: PUSH
42803: LD_INT 1
42805: EQUAL
42806: IFFALSE 42898
42808: GO 42810
42810: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42811: LD_INT 16
42813: PPUSH
42814: LD_INT 6
42816: PPUSH
42817: LD_INT 3
42819: PPUSH
42820: LD_INT 4
42822: PPUSH
42823: CALL_OW 12
42827: PUSH
42828: LD_INT 4
42830: PPUSH
42831: LD_INT 5
42833: PPUSH
42834: CALL_OW 12
42838: PUSH
42839: LD_INT 5
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: PUSH
42847: LD_OWVAR 67
42851: ARRAY
42852: PPUSH
42853: LD_EXP 25
42857: PPUSH
42858: LD_EXP 26
42862: PPUSH
42863: CALL_OW 12
42867: PPUSH
42868: LD_INT 3
42870: PPUSH
42871: LD_INT 1
42873: PPUSH
42874: LD_INT 3
42876: PPUSH
42877: LD_INT 44
42879: PUSH
42880: LD_INT 46
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PPUSH
42887: EMPTY
42888: PPUSH
42889: EMPTY
42890: PPUSH
42891: LD_INT 1
42893: PPUSH
42894: CALL 14716 0 11
42898: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
42899: LD_EXP 33
42903: PUSH
42904: LD_INT 1
42906: EQUAL
42907: PUSH
42908: LD_EXP 39
42912: PUSH
42913: LD_INT 0
42915: EQUAL
42916: AND
42917: IFFALSE 43023
42919: GO 42921
42921: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42922: LD_INT 6
42924: PPUSH
42925: LD_INT 3
42927: PPUSH
42928: LD_INT 5
42930: PPUSH
42931: LD_INT 6
42933: PPUSH
42934: CALL_OW 12
42938: PUSH
42939: LD_INT 5
42941: PPUSH
42942: LD_INT 6
42944: PPUSH
42945: CALL_OW 12
42949: PUSH
42950: LD_INT 5
42952: PPUSH
42953: LD_INT 6
42955: PPUSH
42956: CALL_OW 12
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: PUSH
42966: LD_OWVAR 67
42970: ARRAY
42971: PPUSH
42972: LD_INT 0
42974: PPUSH
42975: LD_INT 0
42977: PPUSH
42978: LD_INT 0
42980: PPUSH
42981: LD_INT 0
42983: PPUSH
42984: LD_EXP 25
42988: PPUSH
42989: LD_EXP 26
42993: PPUSH
42994: CALL_OW 12
42998: PPUSH
42999: LD_INT 16
43001: PPUSH
43002: LD_INT 7
43004: PPUSH
43005: LD_INT 1
43007: PPUSH
43008: LD_INT 1
43010: PPUSH
43011: LD_INT 3
43013: PPUSH
43014: CALL_OW 12
43018: PPUSH
43019: CALL 12423 0 12
43023: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
43024: LD_EXP 33
43028: PUSH
43029: LD_INT 1
43031: EQUAL
43032: PUSH
43033: LD_EXP 39
43037: PUSH
43038: LD_INT 0
43040: EQUAL
43041: AND
43042: IFFALSE 43138
43044: GO 43046
43046: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43047: LD_INT 16
43049: PPUSH
43050: LD_INT 6
43052: PPUSH
43053: LD_INT 5
43055: PPUSH
43056: LD_INT 6
43058: PPUSH
43059: CALL_OW 12
43063: PUSH
43064: LD_INT 6
43066: PPUSH
43067: LD_INT 7
43069: PPUSH
43070: CALL_OW 12
43074: PUSH
43075: LD_INT 7
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: PUSH
43083: LD_OWVAR 67
43087: ARRAY
43088: PPUSH
43089: LD_EXP 25
43093: PPUSH
43094: LD_EXP 26
43098: PPUSH
43099: CALL_OW 12
43103: PPUSH
43104: LD_INT 3
43106: PPUSH
43107: LD_INT 1
43109: PPUSH
43110: LD_INT 3
43112: PPUSH
43113: LD_INT 43
43115: PUSH
43116: LD_INT 44
43118: PUSH
43119: LD_INT 46
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: LIST
43126: PPUSH
43127: EMPTY
43128: PPUSH
43129: EMPTY
43130: PPUSH
43131: LD_INT 1
43133: PPUSH
43134: CALL 14716 0 11
43138: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
43139: LD_EXP 33
43143: PUSH
43144: LD_INT 1
43146: EQUAL
43147: PUSH
43148: LD_EXP 39
43152: PUSH
43153: LD_INT 0
43155: EQUAL
43156: AND
43157: IFFALSE 43253
43159: GO 43161
43161: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43162: LD_INT 16
43164: PPUSH
43165: LD_INT 6
43167: PPUSH
43168: LD_INT 5
43170: PPUSH
43171: LD_INT 6
43173: PPUSH
43174: CALL_OW 12
43178: PUSH
43179: LD_INT 6
43181: PPUSH
43182: LD_INT 7
43184: PPUSH
43185: CALL_OW 12
43189: PUSH
43190: LD_INT 7
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: PUSH
43198: LD_OWVAR 67
43202: ARRAY
43203: PPUSH
43204: LD_EXP 25
43208: PPUSH
43209: LD_EXP 26
43213: PPUSH
43214: CALL_OW 12
43218: PPUSH
43219: LD_INT 3
43221: PPUSH
43222: LD_INT 1
43224: PPUSH
43225: LD_INT 3
43227: PPUSH
43228: LD_INT 43
43230: PUSH
43231: LD_INT 44
43233: PUSH
43234: LD_INT 46
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: PPUSH
43242: EMPTY
43243: PPUSH
43244: EMPTY
43245: PPUSH
43246: LD_INT 1
43248: PPUSH
43249: CALL 14716 0 11
43253: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43254: LD_EXP 33
43258: PUSH
43259: LD_INT 1
43261: EQUAL
43262: PUSH
43263: LD_EXP 39
43267: PUSH
43268: LD_INT 0
43270: EQUAL
43271: AND
43272: IFFALSE 43348
43274: GO 43276
43276: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43277: LD_INT 16
43279: PPUSH
43280: LD_INT 6
43282: PPUSH
43283: LD_INT 5
43285: PUSH
43286: LD_INT 6
43288: PUSH
43289: LD_INT 7
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: PUSH
43297: LD_OWVAR 67
43301: ARRAY
43302: PPUSH
43303: LD_EXP 25
43307: PPUSH
43308: LD_EXP 26
43312: PPUSH
43313: CALL_OW 12
43317: PPUSH
43318: LD_INT 3
43320: PPUSH
43321: LD_INT 1
43323: PPUSH
43324: LD_INT 3
43326: PPUSH
43327: LD_INT 44
43329: PUSH
43330: LD_INT 46
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PPUSH
43337: EMPTY
43338: PPUSH
43339: EMPTY
43340: PPUSH
43341: LD_INT 1
43343: PPUSH
43344: CALL 14716 0 11
43348: END
// every 1 1$00 trigger secondAttack = 1 do
43349: LD_EXP 34
43353: PUSH
43354: LD_INT 1
43356: EQUAL
43357: IFFALSE 43439
43359: GO 43361
43361: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43362: LD_INT 6
43364: PPUSH
43365: LD_INT 3
43367: PPUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: LD_INT 5
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: PUSH
43382: LD_OWVAR 67
43386: ARRAY
43387: PPUSH
43388: LD_INT 0
43390: PPUSH
43391: LD_INT 0
43393: PPUSH
43394: LD_INT 0
43396: PPUSH
43397: LD_INT 0
43399: PPUSH
43400: LD_EXP 25
43404: PPUSH
43405: LD_EXP 26
43409: PPUSH
43410: CALL_OW 12
43414: PPUSH
43415: LD_INT 16
43417: PPUSH
43418: LD_INT 7
43420: PPUSH
43421: LD_INT 1
43423: PPUSH
43424: LD_INT 1
43426: PPUSH
43427: LD_INT 3
43429: PPUSH
43430: CALL_OW 12
43434: PPUSH
43435: CALL 12423 0 12
43439: END
// every 1 1$00 trigger secondAttack = 1 do
43440: LD_EXP 34
43444: PUSH
43445: LD_INT 1
43447: EQUAL
43448: IFFALSE 43552
43450: GO 43452
43452: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43453: LD_INT 16
43455: PPUSH
43456: LD_INT 6
43458: PPUSH
43459: LD_INT 5
43461: PPUSH
43462: LD_INT 8
43464: PPUSH
43465: CALL_OW 12
43469: PUSH
43470: LD_INT 6
43472: PPUSH
43473: LD_INT 9
43475: PPUSH
43476: CALL_OW 12
43480: PUSH
43481: LD_INT 7
43483: PPUSH
43484: LD_INT 9
43486: PPUSH
43487: CALL_OW 12
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: PUSH
43497: LD_OWVAR 67
43501: ARRAY
43502: PPUSH
43503: LD_EXP 25
43507: PPUSH
43508: LD_EXP 26
43512: PPUSH
43513: CALL_OW 12
43517: PPUSH
43518: LD_INT 3
43520: PPUSH
43521: LD_INT 1
43523: PPUSH
43524: LD_INT 3
43526: PPUSH
43527: LD_INT 43
43529: PUSH
43530: LD_INT 44
43532: PUSH
43533: LD_INT 46
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: LIST
43540: PPUSH
43541: EMPTY
43542: PPUSH
43543: EMPTY
43544: PPUSH
43545: LD_INT 1
43547: PPUSH
43548: CALL 14716 0 11
43552: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43553: LD_EXP 18
43557: PUSH
43558: LD_INT 0
43560: EQUAL
43561: IFFALSE 43643
43563: GO 43565
43565: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43566: LD_INT 6
43568: PPUSH
43569: LD_INT 3
43571: PPUSH
43572: LD_INT 3
43574: PUSH
43575: LD_INT 4
43577: PUSH
43578: LD_INT 5
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: PUSH
43586: LD_OWVAR 67
43590: ARRAY
43591: PPUSH
43592: LD_INT 0
43594: PPUSH
43595: LD_INT 0
43597: PPUSH
43598: LD_INT 0
43600: PPUSH
43601: LD_INT 0
43603: PPUSH
43604: LD_EXP 25
43608: PPUSH
43609: LD_EXP 26
43613: PPUSH
43614: CALL_OW 12
43618: PPUSH
43619: LD_INT 16
43621: PPUSH
43622: LD_INT 7
43624: PPUSH
43625: LD_INT 1
43627: PPUSH
43628: LD_INT 1
43630: PPUSH
43631: LD_INT 3
43633: PPUSH
43634: CALL_OW 12
43638: PPUSH
43639: CALL 12423 0 12
43643: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43644: LD_EXP 18
43648: PUSH
43649: LD_INT 0
43651: EQUAL
43652: IFFALSE 43752
43654: GO 43656
43656: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43657: LD_INT 16
43659: PPUSH
43660: LD_INT 6
43662: PPUSH
43663: LD_INT 5
43665: PPUSH
43666: LD_INT 8
43668: PPUSH
43669: CALL_OW 12
43673: PUSH
43674: LD_INT 6
43676: PPUSH
43677: LD_INT 9
43679: PPUSH
43680: CALL_OW 12
43684: PUSH
43685: LD_INT 7
43687: PPUSH
43688: LD_INT 9
43690: PPUSH
43691: CALL_OW 12
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: PUSH
43701: LD_OWVAR 67
43705: ARRAY
43706: PPUSH
43707: LD_EXP 25
43711: PPUSH
43712: LD_EXP 26
43716: PPUSH
43717: CALL_OW 12
43721: PPUSH
43722: LD_INT 3
43724: PPUSH
43725: LD_INT 1
43727: PPUSH
43728: LD_INT 3
43730: PPUSH
43731: LD_INT 44
43733: PUSH
43734: LD_INT 46
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PPUSH
43741: EMPTY
43742: PPUSH
43743: EMPTY
43744: PPUSH
43745: LD_INT 1
43747: PPUSH
43748: CALL 14716 0 11
43752: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43753: LD_EXP 18
43757: PUSH
43758: LD_INT 0
43760: EQUAL
43761: IFFALSE 43843
43763: GO 43765
43765: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43766: LD_INT 6
43768: PPUSH
43769: LD_INT 3
43771: PPUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 4
43777: PUSH
43778: LD_INT 5
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: PUSH
43786: LD_OWVAR 67
43790: ARRAY
43791: PPUSH
43792: LD_INT 0
43794: PPUSH
43795: LD_INT 0
43797: PPUSH
43798: LD_INT 0
43800: PPUSH
43801: LD_INT 0
43803: PPUSH
43804: LD_EXP 25
43808: PPUSH
43809: LD_EXP 26
43813: PPUSH
43814: CALL_OW 12
43818: PPUSH
43819: LD_INT 16
43821: PPUSH
43822: LD_INT 7
43824: PPUSH
43825: LD_INT 1
43827: PPUSH
43828: LD_INT 1
43830: PPUSH
43831: LD_INT 3
43833: PPUSH
43834: CALL_OW 12
43838: PPUSH
43839: CALL 12423 0 12
43843: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43844: LD_EXP 18
43848: PUSH
43849: LD_INT 0
43851: EQUAL
43852: IFFALSE 43952
43854: GO 43856
43856: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43857: LD_INT 16
43859: PPUSH
43860: LD_INT 6
43862: PPUSH
43863: LD_INT 5
43865: PPUSH
43866: LD_INT 8
43868: PPUSH
43869: CALL_OW 12
43873: PUSH
43874: LD_INT 6
43876: PPUSH
43877: LD_INT 9
43879: PPUSH
43880: CALL_OW 12
43884: PUSH
43885: LD_INT 7
43887: PPUSH
43888: LD_INT 9
43890: PPUSH
43891: CALL_OW 12
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: PUSH
43901: LD_OWVAR 67
43905: ARRAY
43906: PPUSH
43907: LD_EXP 25
43911: PPUSH
43912: LD_EXP 26
43916: PPUSH
43917: CALL_OW 12
43921: PPUSH
43922: LD_INT 3
43924: PPUSH
43925: LD_INT 1
43927: PPUSH
43928: LD_INT 3
43930: PPUSH
43931: LD_INT 44
43933: PUSH
43934: LD_INT 46
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PPUSH
43941: EMPTY
43942: PPUSH
43943: EMPTY
43944: PPUSH
43945: LD_INT 1
43947: PPUSH
43948: CALL 14716 0 11
43952: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43953: LD_EXP 18
43957: PUSH
43958: LD_INT 0
43960: EQUAL
43961: IFFALSE 44043
43963: GO 43965
43965: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43966: LD_INT 6
43968: PPUSH
43969: LD_INT 3
43971: PPUSH
43972: LD_INT 3
43974: PUSH
43975: LD_INT 4
43977: PUSH
43978: LD_INT 5
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: PUSH
43986: LD_OWVAR 67
43990: ARRAY
43991: PPUSH
43992: LD_INT 0
43994: PPUSH
43995: LD_INT 0
43997: PPUSH
43998: LD_INT 0
44000: PPUSH
44001: LD_INT 0
44003: PPUSH
44004: LD_EXP 25
44008: PPUSH
44009: LD_EXP 26
44013: PPUSH
44014: CALL_OW 12
44018: PPUSH
44019: LD_INT 16
44021: PPUSH
44022: LD_INT 7
44024: PPUSH
44025: LD_INT 1
44027: PPUSH
44028: LD_INT 1
44030: PPUSH
44031: LD_INT 3
44033: PPUSH
44034: CALL_OW 12
44038: PPUSH
44039: CALL 12423 0 12
44043: END
// every 35 35$0 trigger SikorskyArrive = 0 do
44044: LD_EXP 18
44048: PUSH
44049: LD_INT 0
44051: EQUAL
44052: IFFALSE 44152
44054: GO 44056
44056: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
44057: LD_INT 16
44059: PPUSH
44060: LD_INT 6
44062: PPUSH
44063: LD_INT 5
44065: PPUSH
44066: LD_INT 8
44068: PPUSH
44069: CALL_OW 12
44073: PUSH
44074: LD_INT 6
44076: PPUSH
44077: LD_INT 9
44079: PPUSH
44080: CALL_OW 12
44084: PUSH
44085: LD_INT 7
44087: PPUSH
44088: LD_INT 9
44090: PPUSH
44091: CALL_OW 12
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: PUSH
44101: LD_OWVAR 67
44105: ARRAY
44106: PPUSH
44107: LD_EXP 25
44111: PPUSH
44112: LD_EXP 26
44116: PPUSH
44117: CALL_OW 12
44121: PPUSH
44122: LD_INT 3
44124: PPUSH
44125: LD_INT 1
44127: PPUSH
44128: LD_INT 3
44130: PPUSH
44131: LD_INT 44
44133: PUSH
44134: LD_INT 46
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PPUSH
44141: EMPTY
44142: PPUSH
44143: EMPTY
44144: PPUSH
44145: LD_INT 1
44147: PPUSH
44148: CALL 14716 0 11
44152: END
// every 0 0$1 trigger timerStatus = 1 do
44153: LD_EXP 35
44157: PUSH
44158: LD_INT 1
44160: EQUAL
44161: IFFALSE 44221
44163: GO 44165
44165: DISABLE
// begin repeat wait ( 0 0$1 ) ;
44166: LD_INT 35
44168: PPUSH
44169: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
44173: LD_ADDR_OWVAR 47
44177: PUSH
44178: LD_STRING #Am08-1
44180: PUSH
44181: LD_EXP 19
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
44190: LD_ADDR_EXP 19
44194: PUSH
44195: LD_EXP 19
44199: PUSH
44200: LD_INT 35
44202: MINUS
44203: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
44204: LD_EXP 19
44208: PUSH
44209: LD_INT 0
44211: EQUAL
44212: IFFALSE 44166
// display_strings := [ ] ;
44214: LD_ADDR_OWVAR 47
44218: PUSH
44219: EMPTY
44220: ST_TO_ADDR
// end ; end_of_file
44221: END
// every 1 1$0 do
44222: GO 44224
44224: DISABLE
// begin if supply <= 13 and supply > 7 then
44225: LD_EXP 40
44229: PUSH
44230: LD_INT 13
44232: LESSEQUAL
44233: PUSH
44234: LD_EXP 40
44238: PUSH
44239: LD_INT 7
44241: GREATER
44242: AND
44243: IFFALSE 44266
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44245: LD_INT 3
44247: PPUSH
44248: LD_INT 5
44250: PPUSH
44251: CALL_OW 12
44255: PPUSH
44256: LD_INT 5
44258: PPUSH
44259: LD_INT 1
44261: PPUSH
44262: CALL_OW 55
// if supply <= 7 and supply > 4 then
44266: LD_EXP 40
44270: PUSH
44271: LD_INT 7
44273: LESSEQUAL
44274: PUSH
44275: LD_EXP 40
44279: PUSH
44280: LD_INT 4
44282: GREATER
44283: AND
44284: IFFALSE 44307
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44286: LD_INT 3
44288: PPUSH
44289: LD_INT 5
44291: PPUSH
44292: CALL_OW 12
44296: PPUSH
44297: LD_INT 20
44299: PPUSH
44300: LD_INT 1
44302: PPUSH
44303: CALL_OW 55
// if supply <= 4 and supply > 0 then
44307: LD_EXP 40
44311: PUSH
44312: LD_INT 4
44314: LESSEQUAL
44315: PUSH
44316: LD_EXP 40
44320: PUSH
44321: LD_INT 0
44323: GREATER
44324: AND
44325: IFFALSE 44348
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44327: LD_INT 3
44329: PPUSH
44330: LD_INT 5
44332: PPUSH
44333: CALL_OW 12
44337: PPUSH
44338: LD_INT 21
44340: PPUSH
44341: LD_INT 1
44343: PPUSH
44344: CALL_OW 55
// if supply > 0 then
44348: LD_EXP 40
44352: PUSH
44353: LD_INT 0
44355: GREATER
44356: IFFALSE 44373
// begin supply = supply - 1 ;
44358: LD_ADDR_EXP 40
44362: PUSH
44363: LD_EXP 40
44367: PUSH
44368: LD_INT 1
44370: MINUS
44371: ST_TO_ADDR
// enable ;
44372: ENABLE
// end ; end ; end_of_file
44373: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44374: LD_EXP 39
44378: PUSH
44379: LD_INT 1
44381: EQUAL
44382: PUSH
44383: LD_EXP 1
44387: PPUSH
44388: CALL_OW 301
44392: AND
44393: IFFALSE 44405
44395: GO 44397
44397: DISABLE
// YouLost ( JMM ) ;
44398: LD_STRING JMM
44400: PPUSH
44401: CALL_OW 104
44405: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44406: LD_EXP 18
44410: PUSH
44411: LD_INT 1
44413: EQUAL
44414: PUSH
44415: LD_EXP 16
44419: PPUSH
44420: CALL_OW 301
44424: AND
44425: IFFALSE 44457
44427: GO 44429
44429: DISABLE
// begin DialogueOn ;
44430: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44434: LD_EXP 23
44438: PPUSH
44439: LD_STRING D8a-Pow-1
44441: PPUSH
44442: CALL_OW 94
// DialogueOff ;
44446: CALL_OW 7
// YouLost ( Dismissed ) ;
44450: LD_STRING Dismissed
44452: PPUSH
44453: CALL_OW 104
// end ;
44457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44458: LD_INT 22
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 30
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 30
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PPUSH
44500: CALL_OW 69
44504: PUSH
44505: LD_INT 0
44507: EQUAL
44508: IFFALSE 44520
44510: GO 44512
44512: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44513: LD_STRING Destroyed
44515: PPUSH
44516: CALL_OW 104
44520: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44521: LD_EXP 24
44525: PPUSH
44526: CALL_OW 301
44530: PUSH
44531: LD_INT 22
44533: PUSH
44534: LD_INT 3
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 21
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PPUSH
44555: CALL_OW 69
44559: PUSH
44560: LD_INT 7
44562: PUSH
44563: LD_INT 6
44565: PUSH
44566: LD_INT 5
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: PUSH
44574: LD_OWVAR 67
44578: ARRAY
44579: LESS
44580: AND
44581: PUSH
44582: LD_EXP 1
44586: PPUSH
44587: CALL_OW 305
44591: AND
44592: IFFALSE 45040
44594: GO 44596
44596: DISABLE
44597: LD_INT 0
44599: PPUSH
44600: PPUSH
// begin russianAI = 0 ;
44601: LD_ADDR_EXP 27
44605: PUSH
44606: LD_INT 0
44608: ST_TO_ADDR
// escapeAvalaible = 1 ;
44609: LD_ADDR_EXP 36
44613: PUSH
44614: LD_INT 1
44616: ST_TO_ADDR
// InGameOn ;
44617: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44621: LD_INT 3
44623: PPUSH
44624: LD_INT 1
44626: PPUSH
44627: LD_INT 1
44629: PPUSH
44630: LD_INT 0
44632: PPUSH
44633: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44637: LD_INT 6
44639: PPUSH
44640: LD_INT 1
44642: PPUSH
44643: LD_INT 1
44645: PPUSH
44646: LD_INT 0
44648: PPUSH
44649: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44653: LD_INT 3
44655: PPUSH
44656: LD_INT 1
44658: PPUSH
44659: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44663: LD_INT 97
44665: PPUSH
44666: LD_INT 91
44668: PPUSH
44669: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44673: LD_INT 22
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 21
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PPUSH
44697: CALL_OW 69
44701: PPUSH
44702: CALL_OW 121
// wait ( 0 0$01 ) ;
44706: LD_INT 35
44708: PPUSH
44709: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44713: LD_INT 22
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 21
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PPUSH
44737: CALL_OW 69
44741: PPUSH
44742: LD_INT 124
44744: PPUSH
44745: LD_INT 98
44747: PPUSH
44748: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44752: LD_INT 22
44754: PUSH
44755: LD_INT 6
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 21
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PPUSH
44776: CALL_OW 69
44780: PPUSH
44781: CALL_OW 121
// wait ( 0 0$01 ) ;
44785: LD_INT 35
44787: PPUSH
44788: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44792: LD_INT 22
44794: PUSH
44795: LD_INT 6
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 21
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PPUSH
44816: CALL_OW 69
44820: PPUSH
44821: LD_INT 124
44823: PPUSH
44824: LD_INT 98
44826: PPUSH
44827: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44831: LD_INT 22
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 21
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 3
44853: PUSH
44854: LD_INT 54
44856: PUSH
44857: EMPTY
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: PPUSH
44869: CALL_OW 69
44873: PPUSH
44874: LD_INT 124
44876: PPUSH
44877: LD_INT 98
44879: PPUSH
44880: CALL_OW 114
// wait ( 0 0$4 ) ;
44884: LD_INT 140
44886: PPUSH
44887: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44891: LD_INT 124
44893: PPUSH
44894: LD_INT 98
44896: PPUSH
44897: CALL_OW 84
// if SikorskyStatus = 1 then
44901: LD_EXP 21
44905: PUSH
44906: LD_INT 1
44908: EQUAL
44909: IFFALSE 44923
// begin Say ( Sikorski , D9-Sik-1 ) ;
44911: LD_EXP 16
44915: PPUSH
44916: LD_STRING D9-Sik-1
44918: PPUSH
44919: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44923: LD_EXP 21
44927: PUSH
44928: LD_INT 2
44930: EQUAL
44931: IFFALSE 44952
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44933: LD_EXP 23
44937: PPUSH
44938: LD_STRING D8b-Pow-1
44940: PPUSH
44941: CALL_OW 94
// YouLost ( Dismissed ) ;
44945: LD_STRING Dismissed
44947: PPUSH
44948: CALL_OW 104
// end ; p := 0 0$0 ;
44952: LD_ADDR_VAR 0 2
44956: PUSH
44957: LD_INT 0
44959: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44960: LD_INT 35
44962: PPUSH
44963: CALL_OW 67
// p := p + 0 0$1 ;
44967: LD_ADDR_VAR 0 2
44971: PUSH
44972: LD_VAR 0 2
44976: PUSH
44977: LD_INT 35
44979: PLUS
44980: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44981: LD_INT 23
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 21
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 24
45003: PUSH
45004: LD_INT 250
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: PPUSH
45016: CALL_OW 69
45020: PUSH
45021: LD_INT 0
45023: EQUAL
45024: PUSH
45025: LD_VAR 0 2
45029: PUSH
45030: LD_INT 245
45032: GREATEREQUAL
45033: OR
45034: IFFALSE 44960
// FinishMission ;
45036: CALL 45043 0 0
// end ;
45040: PPOPN 2
45042: END
// export function FinishMission ; var tmp ; begin
45043: LD_INT 0
45045: PPUSH
45046: PPUSH
// AddMedal ( med1 , 1 ) ;
45047: LD_STRING med1
45049: PPUSH
45050: LD_INT 1
45052: PPUSH
45053: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
45057: LD_STRING med2
45059: PPUSH
45060: LD_INT 1
45062: PPUSH
45063: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
45067: LD_STRING perfect
45069: PPUSH
45070: LD_INT 1
45072: PPUSH
45073: CALL_OW 101
// GiveMedals ( Main ) ;
45077: LD_STRING Main
45079: PPUSH
45080: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45084: LD_INT 22
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 23
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 21
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 25
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 25
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 25
45139: PUSH
45140: LD_INT 3
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 25
45149: PUSH
45150: LD_INT 4
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: PPUSH
45170: CALL_OW 69
45174: PPUSH
45175: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45179: LD_EXP 1
45183: PPUSH
45184: LD_EXP 43
45188: PUSH
45189: LD_STRING JMM
45191: STR
45192: PPUSH
45193: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
45197: LD_EXP 2
45201: PPUSH
45202: LD_EXP 43
45206: PUSH
45207: LD_STRING Brown
45209: STR
45210: PPUSH
45211: CALL 8270 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45215: LD_EXP 3
45219: PPUSH
45220: LD_EXP 43
45224: PUSH
45225: LD_STRING Donaldson
45227: STR
45228: PPUSH
45229: CALL 8270 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45233: LD_EXP 4
45237: PPUSH
45238: LD_EXP 43
45242: PUSH
45243: LD_STRING Bobby
45245: STR
45246: PPUSH
45247: CALL 8270 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45251: LD_EXP 5
45255: PPUSH
45256: LD_EXP 43
45260: PUSH
45261: LD_STRING Cyrus
45263: STR
45264: PPUSH
45265: CALL 8270 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45269: LD_EXP 6
45273: PPUSH
45274: LD_EXP 43
45278: PUSH
45279: LD_STRING Lisa
45281: STR
45282: PPUSH
45283: CALL 8270 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45287: LD_EXP 7
45291: PPUSH
45292: LD_EXP 43
45296: PUSH
45297: LD_STRING Frank
45299: STR
45300: PPUSH
45301: CALL 8270 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45305: LD_EXP 8
45309: PPUSH
45310: LD_EXP 43
45314: PUSH
45315: LD_STRING Gladstone
45317: STR
45318: PPUSH
45319: CALL 8270 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45323: LD_EXP 9
45327: PPUSH
45328: LD_EXP 43
45332: PUSH
45333: LD_STRING Kikuchi
45335: STR
45336: PPUSH
45337: CALL 8270 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45341: LD_EXP 14
45345: PPUSH
45346: LD_EXP 43
45350: PUSH
45351: LD_STRING Denis
45353: STR
45354: PPUSH
45355: CALL 8270 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45359: LD_EXP 15
45363: PPUSH
45364: LD_EXP 43
45368: PUSH
45369: LD_STRING Joan
45371: STR
45372: PPUSH
45373: CALL 8270 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45377: LD_EXP 10
45381: PPUSH
45382: LD_EXP 43
45386: PUSH
45387: LD_STRING Khatam
45389: STR
45390: PPUSH
45391: CALL 8270 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45395: LD_EXP 13
45399: PPUSH
45400: LD_EXP 43
45404: PUSH
45405: LD_STRING Houten
45407: STR
45408: PPUSH
45409: CALL 8270 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45413: LD_INT 50
45415: PUSH
45416: EMPTY
45417: LIST
45418: PUSH
45419: LD_INT 22
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 21
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 25
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 25
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 25
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 25
45474: PUSH
45475: LD_INT 4
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: PPUSH
45495: CALL_OW 69
45499: PUSH
45500: LD_EXP 1
45504: PUSH
45505: LD_EXP 2
45509: PUSH
45510: LD_EXP 3
45514: PUSH
45515: LD_EXP 4
45519: PUSH
45520: LD_EXP 5
45524: PUSH
45525: LD_EXP 6
45529: PUSH
45530: LD_EXP 7
45534: PUSH
45535: LD_EXP 8
45539: PUSH
45540: LD_EXP 9
45544: PUSH
45545: LD_EXP 14
45549: PUSH
45550: LD_EXP 15
45554: PUSH
45555: LD_EXP 13
45559: PUSH
45560: LD_EXP 10
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: DIFF
45580: PPUSH
45581: LD_STRING 08_other_survivors
45583: PPUSH
45584: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45588: LD_INT 23
45590: PPUSH
45591: CALL 45604 0 1
// YouWin ;
45595: CALL_OW 103
// end ;
45599: LD_VAR 0 1
45603: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45604: LD_INT 0
45606: PPUSH
45607: PPUSH
45608: PPUSH
45609: PPUSH
// gammaBase = [ ] ;
45610: LD_ADDR_VAR 0 4
45614: PUSH
45615: EMPTY
45616: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45617: LD_ADDR_VAR 0 5
45621: PUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: LD_INT 22
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 21
45639: PUSH
45640: LD_INT 3
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 50
45649: PUSH
45650: EMPTY
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: PPUSH
45658: CALL_OW 70
45662: ST_TO_ADDR
// for i in buildings do
45663: LD_ADDR_VAR 0 3
45667: PUSH
45668: LD_VAR 0 5
45672: PUSH
45673: FOR_IN
45674: IFFALSE 46111
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45676: LD_VAR 0 3
45680: PPUSH
45681: CALL_OW 266
45685: PUSH
45686: LD_INT 6
45688: PUSH
45689: LD_INT 7
45691: PUSH
45692: LD_INT 8
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: IN
45700: IFFALSE 45814
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45702: LD_ADDR_VAR 0 4
45706: PUSH
45707: LD_VAR 0 4
45711: PUSH
45712: LD_VAR 0 3
45716: PPUSH
45717: CALL_OW 266
45721: PUSH
45722: LD_VAR 0 3
45726: PPUSH
45727: CALL_OW 250
45731: PUSH
45732: LD_VAR 0 3
45736: PPUSH
45737: CALL_OW 251
45741: PUSH
45742: LD_VAR 0 3
45746: PPUSH
45747: CALL_OW 254
45751: PUSH
45752: LD_VAR 0 3
45756: PPUSH
45757: CALL_OW 267
45761: PUSH
45762: LD_VAR 0 3
45766: PPUSH
45767: CALL_OW 248
45771: PUSH
45772: LD_VAR 0 3
45776: PPUSH
45777: LD_INT 1
45779: PPUSH
45780: CALL_OW 268
45784: PUSH
45785: LD_VAR 0 3
45789: PPUSH
45790: LD_INT 2
45792: PPUSH
45793: CALL_OW 268
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: PUSH
45808: EMPTY
45809: LIST
45810: ADD
45811: ST_TO_ADDR
45812: GO 46109
// if GetBType ( i ) = b_bunker then
45814: LD_VAR 0 3
45818: PPUSH
45819: CALL_OW 266
45823: PUSH
45824: LD_INT 32
45826: EQUAL
45827: IFFALSE 45924
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45829: LD_ADDR_VAR 0 4
45833: PUSH
45834: LD_VAR 0 4
45838: PUSH
45839: LD_VAR 0 3
45843: PPUSH
45844: CALL_OW 266
45848: PUSH
45849: LD_VAR 0 3
45853: PPUSH
45854: CALL_OW 250
45858: PUSH
45859: LD_VAR 0 3
45863: PPUSH
45864: CALL_OW 251
45868: PUSH
45869: LD_VAR 0 3
45873: PPUSH
45874: CALL_OW 254
45878: PUSH
45879: LD_VAR 0 3
45883: PPUSH
45884: CALL_OW 267
45888: PUSH
45889: LD_VAR 0 3
45893: PPUSH
45894: CALL_OW 248
45898: PUSH
45899: LD_VAR 0 3
45903: PPUSH
45904: CALL_OW 269
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: PUSH
45918: EMPTY
45919: LIST
45920: ADD
45921: ST_TO_ADDR
45922: GO 46109
// if GetBType ( i ) = b_factory then
45924: LD_VAR 0 3
45928: PPUSH
45929: CALL_OW 266
45933: PUSH
45934: LD_INT 3
45936: EQUAL
45937: IFFALSE 46027
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45939: LD_ADDR_VAR 0 4
45943: PUSH
45944: LD_VAR 0 4
45948: PPUSH
45949: LD_INT 1
45951: PPUSH
45952: LD_VAR 0 3
45956: PPUSH
45957: CALL_OW 266
45961: PUSH
45962: LD_VAR 0 3
45966: PPUSH
45967: CALL_OW 250
45971: PUSH
45972: LD_VAR 0 3
45976: PPUSH
45977: CALL_OW 251
45981: PUSH
45982: LD_VAR 0 3
45986: PPUSH
45987: CALL_OW 254
45991: PUSH
45992: LD_VAR 0 3
45996: PPUSH
45997: CALL_OW 267
46001: PUSH
46002: LD_VAR 0 3
46006: PPUSH
46007: CALL_OW 248
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: PPUSH
46020: CALL_OW 2
46024: ST_TO_ADDR
46025: GO 46109
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
46027: LD_ADDR_VAR 0 4
46031: PUSH
46032: LD_VAR 0 4
46036: PUSH
46037: LD_VAR 0 3
46041: PPUSH
46042: CALL_OW 266
46046: PUSH
46047: LD_VAR 0 3
46051: PPUSH
46052: CALL_OW 250
46056: PUSH
46057: LD_VAR 0 3
46061: PPUSH
46062: CALL_OW 251
46066: PUSH
46067: LD_VAR 0 3
46071: PPUSH
46072: CALL_OW 254
46076: PUSH
46077: LD_VAR 0 3
46081: PPUSH
46082: CALL_OW 267
46086: PUSH
46087: LD_VAR 0 3
46091: PPUSH
46092: CALL_OW 248
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: ADD
46108: ST_TO_ADDR
// end ;
46109: GO 45673
46111: POP
46112: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
46113: LD_VAR 0 4
46117: PPUSH
46118: LD_STRING 08_GammaBase
46120: PPUSH
46121: CALL_OW 39
// end ; end_of_file
46125: LD_VAR 0 2
46129: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
46130: GO 46132
46132: DISABLE
// begin ru_radar := 98 ;
46133: LD_ADDR_EXP 48
46137: PUSH
46138: LD_INT 98
46140: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
46141: LD_ADDR_EXP 49
46145: PUSH
46146: LD_INT 89
46148: ST_TO_ADDR
// us_hack := 99 ;
46149: LD_ADDR_EXP 50
46153: PUSH
46154: LD_INT 99
46156: ST_TO_ADDR
// us_artillery := 97 ;
46157: LD_ADDR_EXP 51
46161: PUSH
46162: LD_INT 97
46164: ST_TO_ADDR
// ar_bio_bomb := 91 ;
46165: LD_ADDR_EXP 52
46169: PUSH
46170: LD_INT 91
46172: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
46173: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
46174: LD_INT 0
46176: PPUSH
46177: PPUSH
46178: PPUSH
46179: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
46180: LD_VAR 0 1
46184: PPUSH
46185: CALL_OW 264
46189: PUSH
46190: LD_EXP 52
46194: EQUAL
46195: IFFALSE 46267
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
46197: LD_INT 68
46199: PPUSH
46200: LD_VAR 0 1
46204: PPUSH
46205: CALL_OW 255
46209: PPUSH
46210: CALL_OW 321
46214: PUSH
46215: LD_INT 2
46217: EQUAL
46218: IFFALSE 46230
// eff := 70 else
46220: LD_ADDR_VAR 0 6
46224: PUSH
46225: LD_INT 70
46227: ST_TO_ADDR
46228: GO 46238
// eff := 30 ;
46230: LD_ADDR_VAR 0 6
46234: PUSH
46235: LD_INT 30
46237: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
46238: LD_VAR 0 1
46242: PPUSH
46243: CALL_OW 250
46247: PPUSH
46248: LD_VAR 0 1
46252: PPUSH
46253: CALL_OW 251
46257: PPUSH
46258: LD_VAR 0 6
46262: PPUSH
46263: CALL_OW 495
// end ; end ;
46267: LD_VAR 0 4
46271: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
46272: LD_INT 0
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
// if cmd = 124 then
46280: LD_VAR 0 1
46284: PUSH
46285: LD_INT 124
46287: EQUAL
46288: IFFALSE 46494
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
46290: LD_ADDR_VAR 0 5
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: LD_INT 34
46300: PUSH
46301: LD_INT 53
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 34
46310: PUSH
46311: LD_INT 14
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: PPUSH
46323: CALL_OW 69
46327: ST_TO_ADDR
// if not tmp then
46328: LD_VAR 0 5
46332: NOT
46333: IFFALSE 46337
// exit ;
46335: GO 46494
// for i in tmp do
46337: LD_ADDR_VAR 0 3
46341: PUSH
46342: LD_VAR 0 5
46346: PUSH
46347: FOR_IN
46348: IFFALSE 46492
// begin taskList := GetTaskList ( i ) ;
46350: LD_ADDR_VAR 0 6
46354: PUSH
46355: LD_VAR 0 3
46359: PPUSH
46360: CALL_OW 437
46364: ST_TO_ADDR
// if not taskList then
46365: LD_VAR 0 6
46369: NOT
46370: IFFALSE 46374
// continue ;
46372: GO 46347
// for j = 1 to taskList do
46374: LD_ADDR_VAR 0 4
46378: PUSH
46379: DOUBLE
46380: LD_INT 1
46382: DEC
46383: ST_TO_ADDR
46384: LD_VAR 0 6
46388: PUSH
46389: FOR_TO
46390: IFFALSE 46488
// if taskList [ j ] [ 1 ] = | then
46392: LD_VAR 0 6
46396: PUSH
46397: LD_VAR 0 4
46401: ARRAY
46402: PUSH
46403: LD_INT 1
46405: ARRAY
46406: PUSH
46407: LD_STRING |
46409: EQUAL
46410: IFFALSE 46486
// begin _taskList := Delete ( taskList , 1 ) ;
46412: LD_ADDR_VAR 0 7
46416: PUSH
46417: LD_VAR 0 6
46421: PPUSH
46422: LD_INT 1
46424: PPUSH
46425: CALL_OW 3
46429: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
46430: LD_VAR 0 3
46434: PPUSH
46435: LD_VAR 0 7
46439: PPUSH
46440: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
46444: LD_VAR 0 3
46448: PPUSH
46449: LD_VAR 0 6
46453: PUSH
46454: LD_VAR 0 4
46458: ARRAY
46459: PUSH
46460: LD_INT 2
46462: ARRAY
46463: PPUSH
46464: LD_VAR 0 6
46468: PUSH
46469: LD_VAR 0 4
46473: ARRAY
46474: PUSH
46475: LD_INT 3
46477: ARRAY
46478: PPUSH
46479: LD_INT 8
46481: PPUSH
46482: CALL 46499 0 4
// end ;
46486: GO 46389
46488: POP
46489: POP
// end ;
46490: GO 46347
46492: POP
46493: POP
// end ; end ;
46494: LD_VAR 0 2
46498: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46499: LD_INT 0
46501: PPUSH
46502: PPUSH
46503: PPUSH
46504: PPUSH
46505: PPUSH
46506: PPUSH
46507: PPUSH
46508: PPUSH
46509: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46510: LD_VAR 0 1
46514: NOT
46515: PUSH
46516: LD_VAR 0 2
46520: PPUSH
46521: LD_VAR 0 3
46525: PPUSH
46526: CALL_OW 488
46530: NOT
46531: OR
46532: PUSH
46533: LD_VAR 0 4
46537: NOT
46538: OR
46539: IFFALSE 46543
// exit ;
46541: GO 46883
// list := [ ] ;
46543: LD_ADDR_VAR 0 13
46547: PUSH
46548: EMPTY
46549: ST_TO_ADDR
// if x - r < 0 then
46550: LD_VAR 0 2
46554: PUSH
46555: LD_VAR 0 4
46559: MINUS
46560: PUSH
46561: LD_INT 0
46563: LESS
46564: IFFALSE 46576
// min_x := 0 else
46566: LD_ADDR_VAR 0 7
46570: PUSH
46571: LD_INT 0
46573: ST_TO_ADDR
46574: GO 46592
// min_x := x - r ;
46576: LD_ADDR_VAR 0 7
46580: PUSH
46581: LD_VAR 0 2
46585: PUSH
46586: LD_VAR 0 4
46590: MINUS
46591: ST_TO_ADDR
// if y - r < 0 then
46592: LD_VAR 0 3
46596: PUSH
46597: LD_VAR 0 4
46601: MINUS
46602: PUSH
46603: LD_INT 0
46605: LESS
46606: IFFALSE 46618
// min_y := 0 else
46608: LD_ADDR_VAR 0 8
46612: PUSH
46613: LD_INT 0
46615: ST_TO_ADDR
46616: GO 46634
// min_y := y - r ;
46618: LD_ADDR_VAR 0 8
46622: PUSH
46623: LD_VAR 0 3
46627: PUSH
46628: LD_VAR 0 4
46632: MINUS
46633: ST_TO_ADDR
// max_x := x + r ;
46634: LD_ADDR_VAR 0 9
46638: PUSH
46639: LD_VAR 0 2
46643: PUSH
46644: LD_VAR 0 4
46648: PLUS
46649: ST_TO_ADDR
// max_y := y + r ;
46650: LD_ADDR_VAR 0 10
46654: PUSH
46655: LD_VAR 0 3
46659: PUSH
46660: LD_VAR 0 4
46664: PLUS
46665: ST_TO_ADDR
// for _x = min_x to max_x do
46666: LD_ADDR_VAR 0 11
46670: PUSH
46671: DOUBLE
46672: LD_VAR 0 7
46676: DEC
46677: ST_TO_ADDR
46678: LD_VAR 0 9
46682: PUSH
46683: FOR_TO
46684: IFFALSE 46801
// for _y = min_y to max_y do
46686: LD_ADDR_VAR 0 12
46690: PUSH
46691: DOUBLE
46692: LD_VAR 0 8
46696: DEC
46697: ST_TO_ADDR
46698: LD_VAR 0 10
46702: PUSH
46703: FOR_TO
46704: IFFALSE 46797
// begin if not ValidHex ( _x , _y ) then
46706: LD_VAR 0 11
46710: PPUSH
46711: LD_VAR 0 12
46715: PPUSH
46716: CALL_OW 488
46720: NOT
46721: IFFALSE 46725
// continue ;
46723: GO 46703
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46725: LD_VAR 0 11
46729: PPUSH
46730: LD_VAR 0 12
46734: PPUSH
46735: CALL_OW 351
46739: PUSH
46740: LD_VAR 0 11
46744: PPUSH
46745: LD_VAR 0 12
46749: PPUSH
46750: CALL_OW 554
46754: AND
46755: IFFALSE 46795
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46757: LD_ADDR_VAR 0 13
46761: PUSH
46762: LD_VAR 0 13
46766: PPUSH
46767: LD_VAR 0 13
46771: PUSH
46772: LD_INT 1
46774: PLUS
46775: PPUSH
46776: LD_VAR 0 11
46780: PUSH
46781: LD_VAR 0 12
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PPUSH
46790: CALL_OW 2
46794: ST_TO_ADDR
// end ;
46795: GO 46703
46797: POP
46798: POP
46799: GO 46683
46801: POP
46802: POP
// if not list then
46803: LD_VAR 0 13
46807: NOT
46808: IFFALSE 46812
// exit ;
46810: GO 46883
// for i in list do
46812: LD_ADDR_VAR 0 6
46816: PUSH
46817: LD_VAR 0 13
46821: PUSH
46822: FOR_IN
46823: IFFALSE 46881
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46825: LD_VAR 0 1
46829: PPUSH
46830: LD_STRING M
46832: PUSH
46833: LD_VAR 0 6
46837: PUSH
46838: LD_INT 1
46840: ARRAY
46841: PUSH
46842: LD_VAR 0 6
46846: PUSH
46847: LD_INT 2
46849: ARRAY
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: PPUSH
46875: CALL_OW 447
46879: GO 46822
46881: POP
46882: POP
// end ;
46883: LD_VAR 0 5
46887: RET
