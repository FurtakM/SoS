// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7730 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareGammaBase ;
 224: CALL 2635 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6586 0 0
// PrepareRussians ;
 236: CALL 6904 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 9140 0 6
// PrepareCutsceneAttack ;
 319: CALL 6638 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 663
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_STRING 04_
 627: PPUSH
 628: CALL 44320 0 3
 632: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 633: LD_EXP 3
 637: PPUSH
 638: LD_INT 54
 640: PPUSH
 641: LD_INT 25
 643: PPUSH
 644: LD_INT 8
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 50
// ComHold ( Donaldson ) ;
 654: LD_EXP 3
 658: PPUSH
 659: CALL_OW 140
// end ; if gammaCommander = 2 then
 663: LD_EXP 12
 667: PUSH
 668: LD_INT 2
 670: EQUAL
 671: IFFALSE 722
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 673: LD_ADDR_EXP 2
 677: PUSH
 678: LD_STRING Brown
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_STRING 04_
 686: PPUSH
 687: CALL 44320 0 3
 691: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 54
 699: PPUSH
 700: LD_INT 25
 702: PPUSH
 703: LD_INT 8
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 50
// ComHold ( Brown ) ;
 713: LD_EXP 2
 717: PPUSH
 718: CALL_OW 140
// end ; if gammaCommander = 3 then
 722: LD_EXP 12
 726: PUSH
 727: LD_INT 3
 729: EQUAL
 730: IFFALSE 781
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 732: LD_ADDR_EXP 13
 736: PUSH
 737: LD_STRING VanHouten
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: LD_STRING 
 745: PPUSH
 746: CALL 44320 0 3
 750: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_INT 54
 758: PPUSH
 759: LD_INT 25
 761: PPUSH
 762: LD_INT 8
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 50
// ComHold ( Houten ) ;
 772: LD_EXP 13
 776: PPUSH
 777: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_STRING Harisson
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 44320 0 3
 799: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 23
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 44320 0 3
 818: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 819: LD_STRING 04_Lisa
 821: PUSH
 822: EMPTY
 823: LIST
 824: PPUSH
 825: CALL_OW 28
 829: PUSH
 830: LD_STRING LisaInDelta
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: PUSH
 843: LD_STRING 07_Lisa
 845: PUSH
 846: EMPTY
 847: LIST
 848: PPUSH
 849: CALL_OW 28
 853: NOT
 854: AND
 855: IFFALSE 894
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 857: LD_ADDR_EXP 6
 861: PUSH
 862: LD_STRING Lisa
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 04_
 870: PPUSH
 871: CALL 44320 0 3
 875: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 876: LD_ADDR_VAR 0 15
 880: PUSH
 881: LD_VAR 0 15
 885: PUSH
 886: LD_EXP 6
 890: ADD
 891: ST_TO_ADDR
// end else
 892: GO 949
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 894: LD_EXP 6
 898: NOT
 899: PUSH
 900: LD_STRING LisaIn07
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: NOT
 911: AND
 912: IFFALSE 949
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 914: LD_ADDR_EXP 6
 918: PUSH
 919: LD_STRING Lisa
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_STRING 07_
 927: PPUSH
 928: CALL 44320 0 3
 932: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 933: LD_ADDR_VAR 0 15
 937: PUSH
 938: LD_VAR 0 15
 942: PUSH
 943: LD_EXP 6
 947: ADD
 948: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 949: LD_STRING 04_Bobby
 951: PUSH
 952: EMPTY
 953: LIST
 954: PPUSH
 955: CALL_OW 28
 959: PUSH
 960: LD_STRING BobbyInDelta
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: NOT
 971: AND
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PUSH
 976: EMPTY
 977: LIST
 978: PPUSH
 979: CALL_OW 28
 983: NOT
 984: AND
 985: IFFALSE 1024
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 987: LD_ADDR_EXP 4
 991: PUSH
 992: LD_STRING Bobby
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_STRING 04_
1000: PPUSH
1001: CALL 44320 0 3
1005: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1006: LD_ADDR_VAR 0 15
1010: PUSH
1011: LD_VAR 0 15
1015: PUSH
1016: LD_EXP 4
1020: ADD
1021: ST_TO_ADDR
// end else
1022: GO 1079
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1024: LD_EXP 4
1028: NOT
1029: PUSH
1030: LD_STRING BobbyIn07
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: CALL_OW 30
1040: NOT
1041: AND
1042: IFFALSE 1079
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1044: LD_ADDR_EXP 4
1048: PUSH
1049: LD_STRING Bobby
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_STRING 07_
1057: PPUSH
1058: CALL 44320 0 3
1062: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1063: LD_ADDR_VAR 0 15
1067: PUSH
1068: LD_VAR 0 15
1072: PUSH
1073: LD_EXP 4
1077: ADD
1078: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1079: LD_STRING 04_Cyrus
1081: PUSH
1082: EMPTY
1083: LIST
1084: PPUSH
1085: CALL_OW 28
1089: PUSH
1090: LD_STRING CyrusInDelta
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 30
1100: NOT
1101: AND
1102: PUSH
1103: LD_STRING 07_Cyrus
1105: PUSH
1106: EMPTY
1107: LIST
1108: PPUSH
1109: CALL_OW 28
1113: NOT
1114: AND
1115: IFFALSE 1154
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1117: LD_ADDR_EXP 5
1121: PUSH
1122: LD_STRING Cyrus
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: LD_STRING 04_
1130: PPUSH
1131: CALL 44320 0 3
1135: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1136: LD_ADDR_VAR 0 15
1140: PUSH
1141: LD_VAR 0 15
1145: PUSH
1146: LD_EXP 5
1150: ADD
1151: ST_TO_ADDR
// end else
1152: GO 1209
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1154: LD_EXP 5
1158: NOT
1159: PUSH
1160: LD_STRING CyrusIn07
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: NOT
1171: AND
1172: IFFALSE 1209
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1174: LD_ADDR_EXP 5
1178: PUSH
1179: LD_STRING Cyrus
1181: PPUSH
1182: LD_INT 1
1184: PPUSH
1185: LD_STRING 07_
1187: PPUSH
1188: CALL 44320 0 3
1192: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1193: LD_ADDR_VAR 0 15
1197: PUSH
1198: LD_VAR 0 15
1202: PUSH
1203: LD_EXP 5
1207: ADD
1208: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1209: LD_STRING 04_Brown
1211: PUSH
1212: EMPTY
1213: LIST
1214: PPUSH
1215: CALL_OW 28
1219: PUSH
1220: LD_STRING BrownInDelta
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 30
1230: NOT
1231: AND
1232: PUSH
1233: LD_STRING 07_Brown
1235: PUSH
1236: EMPTY
1237: LIST
1238: PPUSH
1239: CALL_OW 28
1243: NOT
1244: AND
1245: PUSH
1246: LD_EXP 12
1250: PUSH
1251: LD_INT 2
1253: NONEQUAL
1254: AND
1255: IFFALSE 1294
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1257: LD_ADDR_EXP 2
1261: PUSH
1262: LD_STRING Brown
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_STRING 04_
1270: PPUSH
1271: CALL 44320 0 3
1275: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1276: LD_ADDR_VAR 0 15
1280: PUSH
1281: LD_VAR 0 15
1285: PUSH
1286: LD_EXP 2
1290: ADD
1291: ST_TO_ADDR
// end else
1292: GO 1359
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1294: LD_EXP 2
1298: NOT
1299: PUSH
1300: LD_STRING BrownIn07
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 30
1310: NOT
1311: AND
1312: PUSH
1313: LD_EXP 12
1317: PUSH
1318: LD_INT 2
1320: NONEQUAL
1321: AND
1322: IFFALSE 1359
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1324: LD_ADDR_EXP 2
1328: PUSH
1329: LD_STRING Brown
1331: PPUSH
1332: LD_INT 1
1334: PPUSH
1335: LD_STRING 07_
1337: PPUSH
1338: CALL 44320 0 3
1342: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1343: LD_ADDR_VAR 0 15
1347: PUSH
1348: LD_VAR 0 15
1352: PUSH
1353: LD_EXP 2
1357: ADD
1358: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1359: LD_STRING 04_Donaldson
1361: PUSH
1362: EMPTY
1363: LIST
1364: PPUSH
1365: CALL_OW 28
1369: PUSH
1370: LD_STRING DonaldsonInDelta
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 30
1380: NOT
1381: AND
1382: PUSH
1383: LD_STRING 07_Donaldson
1385: PUSH
1386: EMPTY
1387: LIST
1388: PPUSH
1389: CALL_OW 28
1393: NOT
1394: AND
1395: PUSH
1396: LD_EXP 12
1400: PUSH
1401: LD_INT 1
1403: NONEQUAL
1404: AND
1405: IFFALSE 1444
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1407: LD_ADDR_EXP 3
1411: PUSH
1412: LD_STRING Donaldson
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_STRING 04_
1420: PPUSH
1421: CALL 44320 0 3
1425: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1426: LD_ADDR_VAR 0 15
1430: PUSH
1431: LD_VAR 0 15
1435: PUSH
1436: LD_EXP 3
1440: ADD
1441: ST_TO_ADDR
// end else
1442: GO 1509
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1444: LD_EXP 3
1448: NOT
1449: PUSH
1450: LD_STRING DonaldsonIn07
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 30
1460: NOT
1461: AND
1462: PUSH
1463: LD_EXP 12
1467: PUSH
1468: LD_INT 1
1470: NONEQUAL
1471: AND
1472: IFFALSE 1509
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1474: LD_ADDR_EXP 3
1478: PUSH
1479: LD_STRING Donaldson
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: LD_STRING 07_
1487: PPUSH
1488: CALL 44320 0 3
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 3
1507: ADD
1508: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1509: LD_STRING KhatamIn07
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 30
1519: NOT
1520: IFFALSE 1557
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1522: LD_ADDR_EXP 10
1526: PUSH
1527: LD_STRING Khatam
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_STRING 07_
1535: PPUSH
1536: CALL 44320 0 3
1540: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1541: LD_ADDR_VAR 0 15
1545: PUSH
1546: LD_VAR 0 15
1550: PUSH
1551: LD_EXP 10
1555: ADD
1556: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1557: LD_ADDR_EXP 11
1561: PUSH
1562: LD_STRING 07_othersGamma
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_INT 8
1577: PUSH
1578: LD_EXP 11
1582: MINUS
1583: ST_TO_ADDR
// if tmp then
1584: LD_VAR 0 14
1588: IFFALSE 1641
// for i = 1 to tmp do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 14
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1639
// begin PrepareHuman ( false , 1 , 5 ) ;
1608: LD_INT 0
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 5
1616: PPUSH
1617: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1621: LD_ADDR_EXP 11
1625: PUSH
1626: LD_EXP 11
1630: PUSH
1631: CALL_OW 44
1635: ADD
1636: ST_TO_ADDR
// end ;
1637: GO 1605
1639: POP
1640: POP
// if HexInfo ( 61 , 29 ) = 0 then
1641: LD_INT 61
1643: PPUSH
1644: LD_INT 29
1646: PPUSH
1647: CALL_OW 428
1651: PUSH
1652: LD_INT 0
1654: EQUAL
1655: IFFALSE 1686
// begin bc_type := b_barracks ;
1657: LD_ADDR_OWVAR 42
1661: PUSH
1662: LD_INT 5
1664: ST_TO_ADDR
// bc_level := 6 ;
1665: LD_ADDR_OWVAR 43
1669: PUSH
1670: LD_INT 6
1672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1673: LD_INT 61
1675: PPUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_INT 5
1681: PPUSH
1682: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1686: LD_ADDR_VAR 0 13
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 31
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PPUSH
1715: CALL_OW 69
1719: ST_TO_ADDR
// for i in bun do
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 13
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1863
// begin x := GetX ( i ) ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: LD_VAR 0 2
1742: PPUSH
1743: CALL_OW 250
1747: ST_TO_ADDR
// y := GetY ( i ) ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: LD_VAR 0 2
1757: PPUSH
1758: CALL_OW 251
1762: ST_TO_ADDR
// d := GetDir ( i ) ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 2
1772: PPUSH
1773: CALL_OW 254
1777: ST_TO_ADDR
// RemoveUnit ( i ) ;
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 64
// bc_type := b_bunker ;
1787: LD_ADDR_OWVAR 42
1791: PUSH
1792: LD_INT 32
1794: ST_TO_ADDR
// bc_level := 6 ;
1795: LD_ADDR_OWVAR 43
1799: PUSH
1800: LD_INT 6
1802: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1803: LD_ADDR_VAR 0 6
1807: PUSH
1808: LD_VAR 0 3
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_VAR 0 5
1822: PPUSH
1823: CALL_OW 47
1827: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1828: LD_VAR 0 6
1832: PPUSH
1833: LD_INT 5
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_VAR 0 2
1847: PUSH
1848: LD_INT 2
1850: MOD
1851: PUSH
1852: LD_INT 1
1854: PLUS
1855: ARRAY
1856: PPUSH
1857: CALL_OW 431
// end ;
1861: GO 1730
1863: POP
1864: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1865: LD_ADDR_VAR 0 9
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 69
1898: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1899: LD_ADDR_VAR 0 8
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_INT 1
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 6
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 7
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 8
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 30
1979: PUSH
1980: LD_INT 3
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1996: LD_ADDR_VAR 0 12
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 36
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2030: LD_ADDR_VAR 0 13
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 30
2060: PUSH
2061: LD_INT 32
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PPUSH
2077: CALL_OW 69
2081: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_EXP 11
2091: PUSH
2092: LD_VAR 0 15
2096: ADD
2097: PUSH
2098: FOR_IN
2099: IFFALSE 2520
// begin placed := false ;
2101: LD_ADDR_VAR 0 11
2105: PUSH
2106: LD_INT 0
2108: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: IFFALSE 2247
// begin if UnitFilter ( bun , [ f_empty ] ) then
2124: LD_VAR 0 13
2128: PPUSH
2129: LD_INT 58
2131: PUSH
2132: EMPTY
2133: LIST
2134: PPUSH
2135: CALL_OW 72
2139: IFFALSE 2178
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2141: LD_VAR 0 2
2145: PPUSH
2146: LD_VAR 0 13
2150: PPUSH
2151: LD_INT 58
2153: PUSH
2154: EMPTY
2155: LIST
2156: PPUSH
2157: CALL_OW 72
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PPUSH
2166: CALL_OW 52
// placed := true ;
2170: LD_ADDR_VAR 0 11
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// end ; if arm and not placed then
2178: LD_VAR 0 9
2182: PUSH
2183: LD_VAR 0 11
2187: NOT
2188: AND
2189: IFFALSE 2247
// begin for j in arm do
2191: LD_ADDR_VAR 0 10
2195: PUSH
2196: LD_VAR 0 9
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2245
// if UnitsInside ( j ) < 6 then
2204: LD_VAR 0 10
2208: PPUSH
2209: CALL_OW 313
2213: PUSH
2214: LD_INT 6
2216: LESS
2217: IFFALSE 2243
// begin PlaceHumanInUnit ( i , j ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_VAR 0 10
2228: PPUSH
2229: CALL_OW 52
// placed := true ;
2233: LD_ADDR_VAR 0 11
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// break ;
2241: GO 2245
// end ;
2243: GO 2201
2245: POP
2246: POP
// end ; end ; if GetClass ( i ) = 2 then
2247: LD_VAR 0 2
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 2
2259: EQUAL
2260: IFFALSE 2293
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 52
2269: PPUSH
2270: LD_INT 20
2272: PPUSH
2273: LD_INT 6
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 50
// placed := true ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// continue ;
2291: GO 2098
// end ; if GetClass ( i ) = 3 then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 3
2305: EQUAL
2306: IFFALSE 2410
// if fac then
2308: LD_VAR 0 7
2312: IFFALSE 2410
// begin if ct then
2314: LD_VAR 0 12
2318: IFFALSE 2346
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: LD_VAR 0 12
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 52
// placed := true ;
2338: LD_ADDR_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// end ; if placed then
2346: LD_VAR 0 11
2350: IFFALSE 2354
// continue ;
2352: GO 2098
// for j in fac do
2354: LD_ADDR_VAR 0 10
2358: PUSH
2359: LD_VAR 0 7
2363: PUSH
2364: FOR_IN
2365: IFFALSE 2408
// if UnitsInside ( j ) < 6 then
2367: LD_VAR 0 10
2371: PPUSH
2372: CALL_OW 313
2376: PUSH
2377: LD_INT 6
2379: LESS
2380: IFFALSE 2406
// begin PlaceHumanInUnit ( i , j ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 10
2391: PPUSH
2392: CALL_OW 52
// placed := true ;
2396: LD_ADDR_VAR 0 11
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// break ;
2404: GO 2408
// end ;
2406: GO 2364
2408: POP
2409: POP
// end ; if GetClass ( i ) = 4 then
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL_OW 257
2419: PUSH
2420: LD_INT 4
2422: EQUAL
2423: IFFALSE 2487
// if lab then
2425: LD_VAR 0 8
2429: IFFALSE 2487
// begin for j in lab do
2431: LD_ADDR_VAR 0 10
2435: PUSH
2436: LD_VAR 0 8
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2485
// if UnitsInside ( j ) < 6 then
2444: LD_VAR 0 10
2448: PPUSH
2449: CALL_OW 313
2453: PUSH
2454: LD_INT 6
2456: LESS
2457: IFFALSE 2483
// begin PlaceHumanInUnit ( i , j ) ;
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_VAR 0 10
2468: PPUSH
2469: CALL_OW 52
// placed := true ;
2473: LD_ADDR_VAR 0 11
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// break ;
2481: GO 2485
// end ;
2483: GO 2441
2485: POP
2486: POP
// end ; if not placed then
2487: LD_VAR 0 11
2491: NOT
2492: IFFALSE 2518
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_INT 5
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: CALL_OW 49
// ComHold ( i ) ;
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 140
// end ; end ;
2518: GO 2098
2520: POP
2521: POP
// if ct then
2522: LD_VAR 0 12
2526: IFFALSE 2630
// if UnitsInside ( ct [ 1 ] ) then
2528: LD_VAR 0 12
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: CALL_OW 313
2541: IFFALSE 2630
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 33
2560: PUSH
2561: LD_INT 2
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2628
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_VAR 0 12
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: CALL_OW 313
2598: PUSH
2599: LD_INT 1
2601: PPUSH
2602: LD_VAR 0 12
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 313
2615: PPUSH
2616: CALL_OW 12
2620: ARRAY
2621: PPUSH
2622: CALL_OW 135
2626: GO 2577
2628: POP
2629: POP
// end ; end ;
2630: LD_VAR 0 1
2634: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2635: LD_INT 0
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2643: LD_INT 71
2645: PPUSH
2646: LD_INT 5
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: LD_STRING GammaBase
2663: PPUSH
2664: EMPTY
2665: PPUSH
2666: CALL_OW 30
2670: ST_TO_ADDR
// if not blist then
2671: LD_VAR 0 2
2675: NOT
2676: IFFALSE 2716
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: LD_INT 52
2688: PUSH
2689: LD_INT 12
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: ST_TO_ADDR
// uc_side := 1 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// uc_nation := 1 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// bc_kind1 := - 1 ;
2732: LD_ADDR_OWVAR 44
2736: PUSH
2737: LD_INT 1
2739: NEG
2740: ST_TO_ADDR
// bc_kind2 := - 1 ;
2741: LD_ADDR_OWVAR 45
2745: PUSH
2746: LD_INT 1
2748: NEG
2749: ST_TO_ADDR
// for i in blist do
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 2
2759: PUSH
2760: FOR_IN
2761: IFFALSE 3037
// begin bc_type := i [ 1 ] ;
2763: LD_ADDR_OWVAR 42
2767: PUSH
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2777: LD_ADDR_OWVAR 43
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 5
2789: ARRAY
2790: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2791: LD_OWVAR 42
2795: PUSH
2796: LD_INT 6
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: IN
2806: IFFALSE 2872
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2808: LD_STRING 06_remoteVehs_1
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 30
2818: NOT
2819: IFFALSE 2847
// begin bc_type := b_lab_full ;
2821: LD_ADDR_OWVAR 42
2825: PUSH
2826: LD_INT 8
2828: ST_TO_ADDR
// bc_kind1 := 10 ;
2829: LD_ADDR_OWVAR 44
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// bc_kind2 := 15 ;
2837: LD_ADDR_OWVAR 45
2841: PUSH
2842: LD_INT 15
2844: ST_TO_ADDR
// end else
2845: GO 2872
// begin bc_type := b_lab_half ;
2847: LD_ADDR_OWVAR 42
2851: PUSH
2852: LD_INT 7
2854: ST_TO_ADDR
// bc_kind1 := 10 ;
2855: LD_ADDR_OWVAR 44
2859: PUSH
2860: LD_INT 10
2862: ST_TO_ADDR
// bc_kind2 := - 1 ;
2863: LD_ADDR_OWVAR 45
2867: PUSH
2868: LD_INT 1
2870: NEG
2871: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2872: LD_OWVAR 42
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: IFFALSE 2890
// bc_type := b_factory ;
2882: LD_ADDR_OWVAR 42
2886: PUSH
2887: LD_INT 3
2889: ST_TO_ADDR
// if bc_type = b_depot then
2890: LD_OWVAR 42
2894: PUSH
2895: LD_INT 0
2897: EQUAL
2898: IFFALSE 2947
// begin bc_type := b_warehouse ;
2900: LD_ADDR_OWVAR 42
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2908: LD_ADDR_EXP 37
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_INT 3
2929: ARRAY
2930: PPUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_INT 4
2938: ARRAY
2939: PPUSH
2940: CALL_OW 47
2944: ST_TO_ADDR
// continue ;
2945: GO 2760
// end ; if bc_type = b_armoury then
2947: LD_OWVAR 42
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2965
// bc_type = b_barracks ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 5
2964: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2965: LD_ADDR_VAR 0 4
2969: PUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 4
2995: ARRAY
2996: PPUSH
2997: CALL_OW 47
3001: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3002: LD_VAR 0 4
3006: PPUSH
3007: CALL_OW 266
3011: PUSH
3012: LD_INT 32
3014: EQUAL
3015: IFFALSE 3035
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3017: LD_VAR 0 4
3021: PPUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_INT 7
3029: ARRAY
3030: PPUSH
3031: CALL_OW 431
// end ;
3035: GO 2760
3037: POP
3038: POP
// if not amDepot then
3039: LD_EXP 37
3043: NOT
3044: IFFALSE 3081
// begin bc_type := b_warehouse ;
3046: LD_ADDR_OWVAR 42
3050: PUSH
3051: LD_INT 1
3053: ST_TO_ADDR
// bc_level := 6 ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_INT 6
3061: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3062: LD_ADDR_EXP 37
3066: PUSH
3067: LD_INT 52
3069: PPUSH
3070: LD_INT 12
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 47
3080: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3081: LD_EXP 37
3085: PPUSH
3086: LD_STRING gamma
3088: PPUSH
3089: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3093: LD_EXP 37
3097: PPUSH
3098: CALL_OW 274
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: LD_INT 500
3108: PUSH
3109: LD_INT 420
3111: PUSH
3112: LD_INT 350
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_OWVAR 67
3124: ARRAY
3125: PPUSH
3126: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3130: LD_EXP 37
3134: PPUSH
3135: CALL_OW 274
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: LD_INT 200
3145: PPUSH
3146: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3150: LD_INT 22
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: IFFALSE 3426
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 30
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3218: LD_ADDR_VAR 0 6
3222: PUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: CALL_OW 250
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 251
3242: PPUSH
3243: LD_VAR 0 4
3247: PPUSH
3248: CALL_OW 254
3252: PPUSH
3253: CALL 78693 0 3
3257: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3258: LD_ADDR_VAR 0 2
3262: PUSH
3263: LD_INT 19
3265: PUSH
3266: LD_INT 17
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3273: LD_STRING 06_remoteVehs_1
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 30
3283: IFFALSE 3306
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: LD_VAR 0 2
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 22
3300: PPUSH
3301: CALL_OW 2
3305: ST_TO_ADDR
// for i in tmp do
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_VAR 0 6
3315: PUSH
3316: FOR_IN
3317: IFFALSE 3424
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3319: LD_VAR 0 3
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: CALL_OW 428
3341: PUSH
3342: LD_INT 0
3344: EQUAL
3345: IFFALSE 3422
// begin bc_type := blist [ 1 ] ;
3347: LD_ADDR_OWVAR 42
3351: PUSH
3352: LD_VAR 0 2
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 1
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 3
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_INT 3
3386: ARRAY
3387: PPUSH
3388: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: LD_VAR 0 2
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 3
3409: ST_TO_ADDR
// if blist = 0 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 0
3417: EQUAL
3418: IFFALSE 3422
// break ;
3420: GO 3424
// end ;
3422: GO 3316
3424: POP
3425: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3426: LD_STRING 06_remoteVehs_1
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 30
3436: IFFALSE 3895
// begin bc_type = 36 ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_INT 36
3445: ST_TO_ADDR
// bc_level = 4 ;
3446: LD_ADDR_OWVAR 43
3450: PUSH
3451: LD_INT 4
3453: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3454: LD_EXP 37
3458: PPUSH
3459: LD_INT 36
3461: PPUSH
3462: LD_INT 62
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: LD_INT 0
3473: PPUSH
3474: CALL 17107 0 6
3478: PUSH
3479: LD_INT 92
3481: PUSH
3482: LD_INT 62
3484: PUSH
3485: LD_INT 12
3487: PUSH
3488: LD_INT 3
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PPUSH
3497: CALL_OW 69
3501: NOT
3502: AND
3503: IFFALSE 3520
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3505: LD_INT 62
3507: PPUSH
3508: LD_INT 12
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: CALL_OW 47
3518: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3520: LD_EXP 37
3524: PPUSH
3525: LD_INT 36
3527: PPUSH
3528: LD_INT 37
3530: PPUSH
3531: LD_INT 18
3533: PPUSH
3534: LD_INT 2
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: CALL 17107 0 6
3544: PUSH
3545: LD_INT 92
3547: PUSH
3548: LD_INT 37
3550: PUSH
3551: LD_INT 18
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 69
3567: NOT
3568: AND
3569: IFFALSE 3586
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3571: LD_INT 37
3573: PPUSH
3574: LD_INT 18
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 47
3584: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3586: LD_EXP 37
3590: PPUSH
3591: LD_INT 36
3593: PPUSH
3594: LD_INT 66
3596: PPUSH
3597: LD_INT 14
3599: PPUSH
3600: LD_INT 4
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 17107 0 6
3610: PUSH
3611: LD_INT 92
3613: PUSH
3614: LD_INT 66
3616: PUSH
3617: LD_INT 14
3619: PUSH
3620: LD_INT 3
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: NOT
3634: AND
3635: IFFALSE 3652
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3637: LD_INT 66
3639: PPUSH
3640: LD_INT 14
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: CALL_OW 47
3650: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3652: LD_EXP 37
3656: PPUSH
3657: LD_INT 36
3659: PPUSH
3660: LD_INT 74
3662: PPUSH
3663: LD_INT 26
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_INT 0
3671: PPUSH
3672: CALL 17107 0 6
3676: IFFALSE 3691
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3678: LD_INT 74
3680: PPUSH
3681: LD_INT 26
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3691: LD_INT 22
3693: PUSH
3694: LD_INT 1
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 30
3703: PUSH
3704: LD_INT 36
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: NOT
3720: IFFALSE 3724
// exit ;
3722: GO 3895
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_INT 3
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: LD_OWVAR 67
3752: ARRAY
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3893
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3757: LD_ADDR_OWVAR 37
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 1
3777: PPUSH
3778: LD_INT 2
3780: PPUSH
3781: CALL_OW 12
3785: ARRAY
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: ST_TO_ADDR
// vc_engine = 1 ;
3801: LD_ADDR_OWVAR 39
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// vc_control = 2 ;
3809: LD_ADDR_OWVAR 38
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3817: LD_ADDR_OWVAR 40
3821: PUSH
3822: LD_INT 3
3824: PUSH
3825: LD_INT 4
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 3
3841: PPUSH
3842: CALL_OW 12
3846: ARRAY
3847: ST_TO_ADDR
// veh = CreateVehicle ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: CALL_OW 45
3857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 4
3865: PPUSH
3866: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_INT 56
3877: PPUSH
3878: LD_INT 17
3880: PPUSH
3881: LD_INT 9
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// end ;
3891: GO 3754
3893: POP
3894: POP
// end ; end ;
3895: LD_VAR 0 1
3899: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
// uc_side = 1 ;
3906: LD_ADDR_OWVAR 20
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// uc_nation = 1 ;
3914: LD_ADDR_OWVAR 21
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3922: LD_ADDR_EXP 14
3926: PUSH
3927: LD_STRING Denis
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_STRING 06c_
3935: PPUSH
3936: CALL 44320 0 3
3940: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3941: LD_EXP 14
3945: PPUSH
3946: LD_INT 4
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3956: LD_ADDR_EXP 15
3960: PUSH
3961: LD_STRING Joan
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: LD_STRING 06c_
3969: PPUSH
3970: CALL 44320 0 3
3974: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3975: LD_EXP 15
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3990: LD_STRING GladstoneIn07
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 30
4000: NOT
4001: IFFALSE 4075
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4003: LD_ADDR_EXP 8
4007: PUSH
4008: LD_STRING Gladstone
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 06c_
4016: PPUSH
4017: CALL 44320 0 3
4021: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4022: LD_EXP 8
4026: NOT
4027: PUSH
4028: LD_STRING GladstoneStayInDelta
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 30
4038: AND
4039: IFFALSE 4060
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4041: LD_ADDR_EXP 8
4045: PUSH
4046: LD_STRING Gladstone
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_STRING 05_
4054: PPUSH
4055: CALL 44320 0 3
4059: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4075: LD_STRING LisaStayInDelta
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: CALL_OW 30
4085: IFFALSE 4121
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4087: LD_ADDR_EXP 6
4091: PUSH
4092: LD_STRING Lisa
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_STRING 05_
4100: PPUSH
4101: CALL 44320 0 3
4105: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4106: LD_EXP 6
4110: PPUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4121: LD_STRING BobbyStayInDelta
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 30
4131: IFFALSE 4167
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_STRING Bobby
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_STRING 05_
4146: PPUSH
4147: CALL 44320 0 3
4151: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4152: LD_EXP 4
4156: PPUSH
4157: LD_INT 4
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4167: LD_STRING CyrusStayInDelta
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 30
4177: IFFALSE 4213
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4179: LD_ADDR_EXP 5
4183: PUSH
4184: LD_STRING Cyrus
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_STRING 05_
4192: PPUSH
4193: CALL 44320 0 3
4197: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4198: LD_EXP 5
4202: PPUSH
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4213: LD_STRING BrownStayInDelta
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 30
4223: IFFALSE 4259
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4225: LD_ADDR_EXP 2
4229: PUSH
4230: LD_STRING Brown
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: LD_STRING 05_
4238: PPUSH
4239: CALL 44320 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4244: LD_EXP 2
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4259: LD_STRING DonaldsonStayInDelta
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: IFFALSE 4305
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4271: LD_ADDR_EXP 3
4275: PUSH
4276: LD_STRING Donaldson
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_STRING 05_
4284: PPUSH
4285: CALL 44320 0 3
4289: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4290: LD_EXP 3
4294: PPUSH
4295: LD_INT 4
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_STRING OthersStayInDelta
4312: PPUSH
4313: CALL_OW 31
4317: ST_TO_ADDR
// if other > 2 then
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 2
4325: GREATER
4326: IFFALSE 4371
// begin for j = 1 to 2 do
4328: LD_ADDR_VAR 0 3
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 2
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4367
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4344: LD_VAR 0 4
4348: PUSH
4349: LD_VAR 0 3
4353: ARRAY
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
4365: GO 4341
4367: POP
4368: POP
// end else
4369: GO 4414
// begin for j = 1 to other do
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 4
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4412
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4389: LD_VAR 0 4
4393: PUSH
4394: LD_VAR 0 3
4398: ARRAY
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
4410: GO 4386
4412: POP
4413: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4414: LD_ADDR_VAR 0 4
4418: PUSH
4419: LD_STRING 06_other_apemans
4421: PPUSH
4422: CALL_OW 31
4426: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4427: LD_VAR 0 4
4431: PUSH
4432: LD_INT 5
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_OWVAR 67
4450: ARRAY
4451: GREATEREQUAL
4452: IFFALSE 4481
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 5
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: ST_TO_ADDR
4479: GO 4491
// j := other ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_VAR 0 4
4490: ST_TO_ADDR
// for i = 1 to j do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 3
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4532
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4509: LD_VAR 0 4
4513: PUSH
4514: LD_VAR 0 2
4518: ARRAY
4519: PPUSH
4520: LD_INT 4
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
4530: GO 4506
4532: POP
4533: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: PPUSH
4566: LD_INT 53
4568: PPUSH
4569: LD_INT 19
4571: PPUSH
4572: CALL_OW 111
// firstAttack = 1 ;
4576: LD_ADDR_EXP 33
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 1
4588: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4589: LD_INT 0
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_STRING 07_vehicles
4607: PPUSH
4608: EMPTY
4609: PPUSH
4610: CALL_OW 30
4614: ST_TO_ADDR
// macmilan_squad := [ ] ;
4615: LD_ADDR_EXP 42
4619: PUSH
4620: EMPTY
4621: ST_TO_ADDR
// tmp := [ ] ;
4622: LD_ADDR_VAR 0 6
4626: PUSH
4627: EMPTY
4628: ST_TO_ADDR
// tmp_vehs := [ ] ;
4629: LD_ADDR_VAR 0 7
4633: PUSH
4634: EMPTY
4635: ST_TO_ADDR
// uc_side := 1 ;
4636: LD_ADDR_OWVAR 20
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// uc_nation := 1 ;
4644: LD_ADDR_OWVAR 21
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if vehicles then
4652: LD_VAR 0 8
4656: IFFALSE 4815
// begin k := 1 ;
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 1
4665: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_VAR 0 8
4680: PUSH
4681: LD_INT 4
4683: DIV
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4813
// begin vc_chassis = vehicles [ k ] ;
4688: LD_ADDR_OWVAR 37
4692: PUSH
4693: LD_VAR 0 8
4697: PUSH
4698: LD_VAR 0 3
4702: ARRAY
4703: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4704: LD_ADDR_OWVAR 39
4708: PUSH
4709: LD_VAR 0 8
4713: PUSH
4714: LD_VAR 0 3
4718: PUSH
4719: LD_INT 1
4721: PLUS
4722: ARRAY
4723: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4724: LD_ADDR_OWVAR 38
4728: PUSH
4729: LD_VAR 0 8
4733: PUSH
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 2
4741: PLUS
4742: ARRAY
4743: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4744: LD_ADDR_OWVAR 40
4748: PUSH
4749: LD_VAR 0 8
4753: PUSH
4754: LD_VAR 0 3
4758: PUSH
4759: LD_INT 3
4761: PLUS
4762: ARRAY
4763: ST_TO_ADDR
// k := k + 4 ;
4764: LD_ADDR_VAR 0 3
4768: PUSH
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 4
4776: PLUS
4777: ST_TO_ADDR
// veh := CreateVehicle ;
4778: LD_ADDR_VAR 0 9
4782: PUSH
4783: CALL_OW 45
4787: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4788: LD_ADDR_VAR 0 7
4792: PUSH
4793: LD_VAR 0 7
4797: PPUSH
4798: LD_INT 1
4800: PPUSH
4801: LD_VAR 0 9
4805: PPUSH
4806: CALL_OW 2
4810: ST_TO_ADDR
// end ;
4811: GO 4685
4813: POP
4814: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4815: LD_ADDR_EXP 1
4819: PUSH
4820: LD_STRING JMM
4822: PPUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_EXP 44
4830: PPUSH
4831: CALL 44320 0 3
4835: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4836: LD_EXP 12
4840: PUSH
4841: LD_INT 1
4843: EQUAL
4844: PUSH
4845: LD_EXP 12
4849: PUSH
4850: LD_INT 3
4852: EQUAL
4853: OR
4854: PUSH
4855: LD_EXP 2
4859: NOT
4860: AND
4861: IFFALSE 4919
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4863: LD_ADDR_EXP 2
4867: PUSH
4868: LD_STRING Brown
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_EXP 44
4878: PPUSH
4879: CALL 44320 0 3
4883: ST_TO_ADDR
// if Brown then
4884: LD_EXP 2
4888: IFFALSE 4919
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4890: LD_ADDR_VAR 0 6
4894: PUSH
4895: LD_VAR 0 6
4899: PPUSH
4900: LD_VAR 0 6
4904: PUSH
4905: LD_INT 1
4907: PLUS
4908: PPUSH
4909: LD_EXP 2
4913: PPUSH
4914: CALL_OW 1
4918: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4919: LD_EXP 12
4923: PUSH
4924: LD_INT 2
4926: EQUAL
4927: PUSH
4928: LD_EXP 12
4932: PUSH
4933: LD_INT 3
4935: EQUAL
4936: OR
4937: PUSH
4938: LD_EXP 3
4942: NOT
4943: AND
4944: IFFALSE 5002
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4946: LD_ADDR_EXP 3
4950: PUSH
4951: LD_STRING Donaldson
4953: PPUSH
4954: LD_INT 1
4956: PPUSH
4957: LD_EXP 44
4961: PPUSH
4962: CALL 44320 0 3
4966: ST_TO_ADDR
// if Donaldson then
4967: LD_EXP 3
4971: IFFALSE 5002
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_VAR 0 6
4982: PPUSH
4983: LD_VAR 0 6
4987: PUSH
4988: LD_INT 1
4990: PLUS
4991: PPUSH
4992: LD_EXP 3
4996: PPUSH
4997: CALL_OW 1
5001: ST_TO_ADDR
// end ; if not Bobby then
5002: LD_EXP 4
5006: NOT
5007: IFFALSE 5065
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5009: LD_ADDR_EXP 4
5013: PUSH
5014: LD_STRING Bobby
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_EXP 44
5024: PPUSH
5025: CALL 44320 0 3
5029: ST_TO_ADDR
// if Bobby then
5030: LD_EXP 4
5034: IFFALSE 5065
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_VAR 0 6
5045: PPUSH
5046: LD_VAR 0 6
5050: PUSH
5051: LD_INT 1
5053: PLUS
5054: PPUSH
5055: LD_EXP 4
5059: PPUSH
5060: CALL_OW 1
5064: ST_TO_ADDR
// end ; if not Cyrus then
5065: LD_EXP 5
5069: NOT
5070: IFFALSE 5128
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5072: LD_ADDR_EXP 5
5076: PUSH
5077: LD_STRING Cyrus
5079: PPUSH
5080: LD_INT 1
5082: PPUSH
5083: LD_EXP 44
5087: PPUSH
5088: CALL 44320 0 3
5092: ST_TO_ADDR
// if Cyrus then
5093: LD_EXP 5
5097: IFFALSE 5128
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5099: LD_ADDR_VAR 0 6
5103: PUSH
5104: LD_VAR 0 6
5108: PPUSH
5109: LD_VAR 0 6
5113: PUSH
5114: LD_INT 1
5116: PLUS
5117: PPUSH
5118: LD_EXP 5
5122: PPUSH
5123: CALL_OW 1
5127: ST_TO_ADDR
// end ; if not Lisa then
5128: LD_EXP 6
5132: NOT
5133: IFFALSE 5191
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5135: LD_ADDR_EXP 6
5139: PUSH
5140: LD_STRING Lisa
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: LD_EXP 44
5150: PPUSH
5151: CALL 44320 0 3
5155: ST_TO_ADDR
// if Lisa then
5156: LD_EXP 6
5160: IFFALSE 5191
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5162: LD_ADDR_VAR 0 6
5166: PUSH
5167: LD_VAR 0 6
5171: PPUSH
5172: LD_VAR 0 6
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: PPUSH
5181: LD_EXP 6
5185: PPUSH
5186: CALL_OW 1
5190: ST_TO_ADDR
// end ; if not Frank then
5191: LD_EXP 7
5195: NOT
5196: IFFALSE 5254
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5198: LD_ADDR_EXP 7
5202: PUSH
5203: LD_STRING Frank
5205: PPUSH
5206: LD_INT 1
5208: PPUSH
5209: LD_EXP 44
5213: PPUSH
5214: CALL 44320 0 3
5218: ST_TO_ADDR
// if Frank then
5219: LD_EXP 7
5223: IFFALSE 5254
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5225: LD_ADDR_VAR 0 6
5229: PUSH
5230: LD_VAR 0 6
5234: PPUSH
5235: LD_VAR 0 6
5239: PUSH
5240: LD_INT 1
5242: PLUS
5243: PPUSH
5244: LD_EXP 7
5248: PPUSH
5249: CALL_OW 1
5253: ST_TO_ADDR
// end ; if not Kikuchi then
5254: LD_EXP 9
5258: NOT
5259: IFFALSE 5317
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5261: LD_ADDR_EXP 9
5265: PUSH
5266: LD_STRING Kikuchi
5268: PPUSH
5269: LD_INT 1
5271: PPUSH
5272: LD_EXP 44
5276: PPUSH
5277: CALL 44320 0 3
5281: ST_TO_ADDR
// if Kikuchi then
5282: LD_EXP 9
5286: IFFALSE 5317
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5288: LD_ADDR_VAR 0 6
5292: PUSH
5293: LD_VAR 0 6
5297: PPUSH
5298: LD_VAR 0 6
5302: PUSH
5303: LD_INT 1
5305: PLUS
5306: PPUSH
5307: LD_EXP 9
5311: PPUSH
5312: CALL_OW 1
5316: ST_TO_ADDR
// end ; if not Gladstone then
5317: LD_EXP 8
5321: NOT
5322: IFFALSE 5380
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5324: LD_ADDR_EXP 8
5328: PUSH
5329: LD_STRING Gladstone
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_EXP 44
5339: PPUSH
5340: CALL 44320 0 3
5344: ST_TO_ADDR
// if Gladstone then
5345: LD_EXP 8
5349: IFFALSE 5380
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5351: LD_ADDR_VAR 0 6
5355: PUSH
5356: LD_VAR 0 6
5360: PPUSH
5361: LD_VAR 0 6
5365: PUSH
5366: LD_INT 1
5368: PLUS
5369: PPUSH
5370: LD_EXP 8
5374: PPUSH
5375: CALL_OW 1
5379: ST_TO_ADDR
// end ; if not Khatam then
5380: LD_EXP 10
5384: NOT
5385: IFFALSE 5443
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5387: LD_ADDR_EXP 10
5391: PUSH
5392: LD_STRING Khatam
5394: PPUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_EXP 44
5402: PPUSH
5403: CALL 44320 0 3
5407: ST_TO_ADDR
// if Khatam then
5408: LD_EXP 10
5412: IFFALSE 5443
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5414: LD_ADDR_VAR 0 6
5418: PUSH
5419: LD_VAR 0 6
5423: PPUSH
5424: LD_VAR 0 6
5428: PUSH
5429: LD_INT 1
5431: PLUS
5432: PPUSH
5433: LD_EXP 10
5437: PPUSH
5438: CALL_OW 1
5442: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5443: LD_ADDR_VAR 0 5
5447: PUSH
5448: LD_STRING 07c_others
5450: PPUSH
5451: CALL_OW 31
5455: ST_TO_ADDR
// macmilan_squad := others ;
5456: LD_ADDR_EXP 42
5460: PUSH
5461: LD_VAR 0 5
5465: ST_TO_ADDR
// if others then
5466: LD_VAR 0 5
5470: IFFALSE 5558
// for i in others do
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: FOR_IN
5483: IFFALSE 5556
// if GetClass ( i ) = 3 then
5485: LD_VAR 0 2
5489: PPUSH
5490: CALL_OW 257
5494: PUSH
5495: LD_INT 3
5497: EQUAL
5498: IFFALSE 5525
// tmp := Insert ( tmp , 1 , i ) else
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_VAR 0 6
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: LD_VAR 0 2
5517: PPUSH
5518: CALL_OW 2
5522: ST_TO_ADDR
5523: GO 5554
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5525: LD_ADDR_VAR 0 6
5529: PUSH
5530: LD_VAR 0 6
5534: PPUSH
5535: LD_VAR 0 6
5539: PUSH
5540: LD_INT 1
5542: PLUS
5543: PPUSH
5544: LD_VAR 0 2
5548: PPUSH
5549: CALL_OW 1
5553: ST_TO_ADDR
5554: GO 5482
5556: POP
5557: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5558: LD_INT 4
5560: PPUSH
5561: LD_INT 21
5563: PUSH
5564: LD_INT 3
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PPUSH
5571: CALL_OW 70
5575: IFFALSE 5616
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5614
// RemoveUnit ( i ) ;
5603: LD_VAR 0 2
5607: PPUSH
5608: CALL_OW 64
5612: GO 5600
5614: POP
5615: POP
// wait ( 0 0$1 ) ;
5616: LD_INT 35
5618: PPUSH
5619: CALL_OW 67
// if tmp then
5623: LD_VAR 0 6
5627: IFFALSE 5812
// begin for i in tmp do
5629: LD_ADDR_VAR 0 2
5633: PUSH
5634: LD_VAR 0 6
5638: PUSH
5639: FOR_IN
5640: IFFALSE 5810
// begin SetDir ( i , 3 ) ;
5642: LD_VAR 0 2
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: CALL_OW 233
// if tmp_vehs then
5654: LD_VAR 0 7
5658: IFFALSE 5736
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5660: LD_VAR 0 7
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: LD_INT 3
5671: PPUSH
5672: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5676: LD_VAR 0 7
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_INT 78
5687: PPUSH
5688: LD_INT 5
5690: PPUSH
5691: LD_INT 0
5693: PPUSH
5694: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_VAR 0 7
5707: PUSH
5708: LD_INT 1
5710: ARRAY
5711: PPUSH
5712: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5716: LD_ADDR_VAR 0 7
5720: PUSH
5721: LD_VAR 0 7
5725: PPUSH
5726: LD_INT 1
5728: PPUSH
5729: CALL_OW 3
5733: ST_TO_ADDR
// end else
5734: GO 5751
// PlaceUnitArea ( i , GammaSupport , false ) ;
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 4
5743: PPUSH
5744: LD_INT 0
5746: PPUSH
5747: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5751: LD_VAR 0 2
5755: PPUSH
5756: LD_INT 77
5758: PPUSH
5759: LD_INT 16
5761: PPUSH
5762: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5766: LD_VAR 0 2
5770: PPUSH
5771: LD_INT 65
5773: PPUSH
5774: LD_INT 24
5776: PPUSH
5777: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5781: LD_INT 35
5783: PPUSH
5784: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5788: LD_INT 4
5790: PPUSH
5791: LD_INT 22
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PPUSH
5801: CALL_OW 70
5805: NOT
5806: IFFALSE 5781
// end ;
5808: GO 5639
5810: POP
5811: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5812: LD_EXP 1
5816: PPUSH
5817: LD_INT 4
5819: PPUSH
5820: LD_INT 0
5822: PPUSH
5823: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5827: LD_EXP 1
5831: PPUSH
5832: LD_INT 77
5834: PPUSH
5835: LD_INT 16
5837: PPUSH
5838: CALL_OW 111
// end ;
5842: LD_VAR 0 1
5846: RET
// export function PrepareSikorsky ; begin
5847: LD_INT 0
5849: PPUSH
// uc_side = 4 ;
5850: LD_ADDR_OWVAR 20
5854: PUSH
5855: LD_INT 4
5857: ST_TO_ADDR
// uc_nation = 1 ;
5858: LD_ADDR_OWVAR 21
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5866: LD_ADDR_EXP 16
5870: PUSH
5871: LD_STRING Sikorski
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: LD_STRING 
5879: PPUSH
5880: CALL 44320 0 3
5884: ST_TO_ADDR
// vc_engine = 1 ;
5885: LD_ADDR_OWVAR 39
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// vc_control = 1 ;
5893: LD_ADDR_OWVAR 38
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5901: LD_ADDR_OWVAR 40
5905: PUSH
5906: LD_INT 5
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: LD_INT 4
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PUSH
5920: LD_OWVAR 67
5924: ARRAY
5925: ST_TO_ADDR
// vc_chassis = 4 ;
5926: LD_ADDR_OWVAR 37
5930: PUSH
5931: LD_INT 4
5933: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5934: LD_ADDR_EXP 17
5938: PUSH
5939: CALL_OW 45
5943: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5944: LD_EXP 17
5948: PPUSH
5949: LD_INT 3
5951: PPUSH
5952: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5956: LD_INT 35
5958: PPUSH
5959: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5963: LD_EXP 17
5967: PPUSH
5968: LD_INT 18
5970: PPUSH
5971: LD_INT 5
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5981: LD_EXP 17
5985: PPUSH
5986: CALL_OW 305
5990: IFFALSE 5956
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5992: LD_EXP 16
5996: PPUSH
5997: LD_EXP 17
6001: PPUSH
6002: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6006: LD_EXP 17
6010: PPUSH
6011: LD_INT 5
6013: PPUSH
6014: CALL_OW 113
// end ;
6018: LD_VAR 0 1
6022: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6023: LD_INT 0
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
// InitHc ;
6029: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
6033: LD_ADDR_VAR 0 2
6037: PUSH
6038: DOUBLE
6039: LD_INT 1
6041: DEC
6042: ST_TO_ADDR
6043: LD_INT 5
6045: PUSH
6046: LD_INT 4
6048: PUSH
6049: LD_INT 4
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: PUSH
6057: LD_OWVAR 67
6061: ARRAY
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6180
// begin uc_side = 4 ;
6066: LD_ADDR_OWVAR 20
6070: PUSH
6071: LD_INT 4
6073: ST_TO_ADDR
// uc_nation = 1 ;
6074: LD_ADDR_OWVAR 21
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// hc_name =  ;
6082: LD_ADDR_OWVAR 26
6086: PUSH
6087: LD_STRING 
6089: ST_TO_ADDR
// hc_gallery =  ;
6090: LD_ADDR_OWVAR 33
6094: PUSH
6095: LD_STRING 
6097: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 5
6106: PPUSH
6107: LD_INT 8
6109: PPUSH
6110: CALL_OW 12
6114: PPUSH
6115: CALL_OW 380
// un = CreateHuman ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: CALL_OW 44
6128: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6129: LD_VAR 0 3
6133: PPUSH
6134: LD_INT 3
6136: PPUSH
6137: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6141: LD_VAR 0 3
6145: PPUSH
6146: LD_INT 9
6148: PPUSH
6149: LD_INT 0
6151: PPUSH
6152: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6156: LD_VAR 0 3
6160: PPUSH
6161: LD_INT 53
6163: PPUSH
6164: LD_INT 23
6166: PPUSH
6167: CALL_OW 111
// wait ( 0 0$1 ) ;
6171: LD_INT 35
6173: PPUSH
6174: CALL_OW 67
// end ;
6178: GO 6063
6180: POP
6181: POP
// for i = 1 to 2 do
6182: LD_ADDR_VAR 0 2
6186: PUSH
6187: DOUBLE
6188: LD_INT 1
6190: DEC
6191: ST_TO_ADDR
6192: LD_INT 2
6194: PUSH
6195: FOR_TO
6196: IFFALSE 6312
// begin uc_side = 4 ;
6198: LD_ADDR_OWVAR 20
6202: PUSH
6203: LD_INT 4
6205: ST_TO_ADDR
// uc_nation = 1 ;
6206: LD_ADDR_OWVAR 21
6210: PUSH
6211: LD_INT 1
6213: ST_TO_ADDR
// hc_name =  ;
6214: LD_ADDR_OWVAR 26
6218: PUSH
6219: LD_STRING 
6221: ST_TO_ADDR
// hc_gallery =  ;
6222: LD_ADDR_OWVAR 33
6226: PUSH
6227: LD_STRING 
6229: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6230: LD_INT 0
6232: PPUSH
6233: LD_INT 4
6235: PPUSH
6236: LD_INT 5
6238: PPUSH
6239: LD_INT 8
6241: PPUSH
6242: CALL_OW 12
6246: PPUSH
6247: CALL_OW 380
// un = CreateHuman ;
6251: LD_ADDR_VAR 0 3
6255: PUSH
6256: CALL_OW 44
6260: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6261: LD_VAR 0 3
6265: PPUSH
6266: LD_INT 3
6268: PPUSH
6269: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6273: LD_VAR 0 3
6277: PPUSH
6278: LD_INT 9
6280: PPUSH
6281: LD_INT 0
6283: PPUSH
6284: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6288: LD_VAR 0 3
6292: PPUSH
6293: LD_INT 53
6295: PPUSH
6296: LD_INT 23
6298: PPUSH
6299: CALL_OW 111
// wait ( 0 0$1 ) ;
6303: LD_INT 35
6305: PPUSH
6306: CALL_OW 67
// end ;
6310: GO 6195
6312: POP
6313: POP
// for i = 1 to [ 5 , 5 , 4 ] [ Difficulty ] do
6314: LD_ADDR_VAR 0 2
6318: PUSH
6319: DOUBLE
6320: LD_INT 1
6322: DEC
6323: ST_TO_ADDR
6324: LD_INT 5
6326: PUSH
6327: LD_INT 5
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_OWVAR 67
6342: ARRAY
6343: PUSH
6344: FOR_TO
6345: IFFALSE 6579
// begin uc_side = 4 ;
6347: LD_ADDR_OWVAR 20
6351: PUSH
6352: LD_INT 4
6354: ST_TO_ADDR
// uc_nation = 1 ;
6355: LD_ADDR_OWVAR 21
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// vc_engine = 1 ;
6363: LD_ADDR_OWVAR 39
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// vc_control = 1 ;
6371: LD_ADDR_OWVAR 38
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6379: LD_ADDR_OWVAR 40
6383: PUSH
6384: LD_INT 7
6386: PUSH
6387: LD_INT 4
6389: PUSH
6390: LD_INT 5
6392: PUSH
6393: LD_INT 6
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: LD_VAR 0 2
6406: PUSH
6407: LD_INT 4
6409: MOD
6410: PUSH
6411: LD_INT 1
6413: PLUS
6414: ARRAY
6415: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6416: LD_ADDR_OWVAR 37
6420: PUSH
6421: LD_INT 3
6423: PUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: LD_VAR 0 2
6443: PUSH
6444: LD_INT 4
6446: MOD
6447: PUSH
6448: LD_INT 1
6450: PLUS
6451: ARRAY
6452: ST_TO_ADDR
// veh = CreateVehicle ;
6453: LD_ADDR_VAR 0 4
6457: PUSH
6458: CALL_OW 45
6462: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6463: LD_VAR 0 4
6467: PPUSH
6468: LD_INT 3
6470: PPUSH
6471: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6475: LD_VAR 0 4
6479: PPUSH
6480: LD_INT 9
6482: PPUSH
6483: LD_INT 0
6485: PPUSH
6486: CALL_OW 49
// InitHc ;
6490: CALL_OW 19
// hc_name =  ;
6494: LD_ADDR_OWVAR 26
6498: PUSH
6499: LD_STRING 
6501: ST_TO_ADDR
// hc_gallery =  ;
6502: LD_ADDR_OWVAR 33
6506: PUSH
6507: LD_STRING 
6509: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6510: LD_INT 0
6512: PPUSH
6513: LD_INT 3
6515: PPUSH
6516: LD_INT 5
6518: PPUSH
6519: LD_INT 8
6521: PPUSH
6522: CALL_OW 12
6526: PPUSH
6527: CALL_OW 380
// un = CreateHuman ;
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: CALL_OW 44
6540: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6541: LD_VAR 0 3
6545: PPUSH
6546: LD_VAR 0 4
6550: PPUSH
6551: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6555: LD_VAR 0 3
6559: PPUSH
6560: LD_INT 53
6562: PPUSH
6563: LD_INT 23
6565: PPUSH
6566: CALL_OW 111
// wait ( 0 0$5 ) ;
6570: LD_INT 175
6572: PPUSH
6573: CALL_OW 67
// end ;
6577: GO 6344
6579: POP
6580: POP
// end ; end_of_file
6581: LD_VAR 0 1
6585: RET
// export function PrepareRussianCommander ; begin
6586: LD_INT 0
6588: PPUSH
// uc_side = 3 ;
6589: LD_ADDR_OWVAR 20
6593: PUSH
6594: LD_INT 3
6596: ST_TO_ADDR
// uc_nation = 3 ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: LD_INT 3
6604: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6605: LD_ADDR_EXP 24
6609: PUSH
6610: LD_STRING Borodin
6612: PPUSH
6613: CALL_OW 25
6617: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6618: LD_EXP 24
6622: PPUSH
6623: LD_INT 25
6625: PPUSH
6626: LD_INT 0
6628: PPUSH
6629: CALL_OW 49
// end ;
6633: LD_VAR 0 1
6637: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6638: LD_INT 0
6640: PPUSH
6641: PPUSH
6642: PPUSH
6643: PPUSH
// for i = 1 to 10 do
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_INT 10
6656: PUSH
6657: FOR_TO
6658: IFFALSE 6732
// begin uc_side = 6 ;
6660: LD_ADDR_OWVAR 20
6664: PUSH
6665: LD_INT 6
6667: ST_TO_ADDR
// uc_nation = 3 ;
6668: LD_ADDR_OWVAR 21
6672: PUSH
6673: LD_INT 3
6675: ST_TO_ADDR
// hc_gallery =  ;
6676: LD_ADDR_OWVAR 33
6680: PUSH
6681: LD_STRING 
6683: ST_TO_ADDR
// hc_name =  ;
6684: LD_ADDR_OWVAR 26
6688: PUSH
6689: LD_STRING 
6691: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6692: LD_INT 0
6694: PPUSH
6695: LD_INT 1
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: CALL_OW 380
// un = CreateHuman ;
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: CALL_OW 44
6714: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6715: LD_VAR 0 3
6719: PPUSH
6720: LD_INT 1
6722: PPUSH
6723: LD_INT 0
6725: PPUSH
6726: CALL_OW 49
// end ;
6730: GO 6657
6732: POP
6733: POP
// for i = 1 to 3 do
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: DOUBLE
6740: LD_INT 1
6742: DEC
6743: ST_TO_ADDR
6744: LD_INT 3
6746: PUSH
6747: FOR_TO
6748: IFFALSE 6897
// begin uc_side = 6 ;
6750: LD_ADDR_OWVAR 20
6754: PUSH
6755: LD_INT 6
6757: ST_TO_ADDR
// uc_nation = 3 ;
6758: LD_ADDR_OWVAR 21
6762: PUSH
6763: LD_INT 3
6765: ST_TO_ADDR
// vc_engine = 1 ;
6766: LD_ADDR_OWVAR 39
6770: PUSH
6771: LD_INT 1
6773: ST_TO_ADDR
// vc_control = 1 ;
6774: LD_ADDR_OWVAR 38
6778: PUSH
6779: LD_INT 1
6781: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6782: LD_ADDR_OWVAR 40
6786: PUSH
6787: LD_INT 43
6789: PUSH
6790: LD_INT 44
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 2
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// vc_chassis = 22 ;
6809: LD_ADDR_OWVAR 37
6813: PUSH
6814: LD_INT 22
6816: ST_TO_ADDR
// veh = CreateVehicle ;
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: CALL_OW 45
6826: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6827: LD_VAR 0 4
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: LD_INT 0
6837: PPUSH
6838: CALL_OW 49
// hc_gallery =  ;
6842: LD_ADDR_OWVAR 33
6846: PUSH
6847: LD_STRING 
6849: ST_TO_ADDR
// hc_name =  ;
6850: LD_ADDR_OWVAR 26
6854: PUSH
6855: LD_STRING 
6857: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 3
6863: PPUSH
6864: LD_INT 4
6866: PPUSH
6867: CALL_OW 380
// un = CreateHuman ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6881: LD_VAR 0 3
6885: PPUSH
6886: LD_VAR 0 4
6890: PPUSH
6891: CALL_OW 52
// end ;
6895: GO 6747
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 1
6903: RET
// export function PrepareRussians ; var i , un ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
// for i = 1 to 8 do
6909: LD_ADDR_VAR 0 2
6913: PUSH
6914: DOUBLE
6915: LD_INT 1
6917: DEC
6918: ST_TO_ADDR
6919: LD_INT 8
6921: PUSH
6922: FOR_TO
6923: IFFALSE 7009
// begin uc_side = 3 ;
6925: LD_ADDR_OWVAR 20
6929: PUSH
6930: LD_INT 3
6932: ST_TO_ADDR
// uc_nation = 3 ;
6933: LD_ADDR_OWVAR 21
6937: PUSH
6938: LD_INT 3
6940: ST_TO_ADDR
// hc_gallery =  ;
6941: LD_ADDR_OWVAR 33
6945: PUSH
6946: LD_STRING 
6948: ST_TO_ADDR
// hc_name =  ;
6949: LD_ADDR_OWVAR 26
6953: PUSH
6954: LD_STRING 
6956: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6957: LD_INT 0
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_EXP 25
6967: PPUSH
6968: LD_EXP 26
6972: PPUSH
6973: CALL_OW 12
6977: PPUSH
6978: CALL_OW 380
// un = CreateHuman ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: CALL_OW 44
6991: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6992: LD_VAR 0 3
6996: PPUSH
6997: LD_INT 3
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 49
// end ;
7007: GO 6922
7009: POP
7010: POP
// for i = 1 to 4 do
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 4
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7111
// begin uc_side = 3 ;
7027: LD_ADDR_OWVAR 20
7031: PUSH
7032: LD_INT 3
7034: ST_TO_ADDR
// uc_nation = 3 ;
7035: LD_ADDR_OWVAR 21
7039: PUSH
7040: LD_INT 3
7042: ST_TO_ADDR
// hc_gallery =  ;
7043: LD_ADDR_OWVAR 33
7047: PUSH
7048: LD_STRING 
7050: ST_TO_ADDR
// hc_name =  ;
7051: LD_ADDR_OWVAR 26
7055: PUSH
7056: LD_STRING 
7058: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7059: LD_INT 0
7061: PPUSH
7062: LD_INT 2
7064: PPUSH
7065: LD_EXP 25
7069: PPUSH
7070: LD_EXP 26
7074: PPUSH
7075: CALL_OW 12
7079: PPUSH
7080: CALL_OW 380
// un = CreateHuman ;
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: CALL_OW 44
7093: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7094: LD_VAR 0 3
7098: PPUSH
7099: LD_INT 3
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL_OW 49
// end ;
7109: GO 7024
7111: POP
7112: POP
// for i = 1 to 3 do
7113: LD_ADDR_VAR 0 2
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_INT 3
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7213
// begin uc_side = 3 ;
7129: LD_ADDR_OWVAR 20
7133: PUSH
7134: LD_INT 3
7136: ST_TO_ADDR
// uc_nation = 3 ;
7137: LD_ADDR_OWVAR 21
7141: PUSH
7142: LD_INT 3
7144: ST_TO_ADDR
// hc_gallery =  ;
7145: LD_ADDR_OWVAR 33
7149: PUSH
7150: LD_STRING 
7152: ST_TO_ADDR
// hc_name =  ;
7153: LD_ADDR_OWVAR 26
7157: PUSH
7158: LD_STRING 
7160: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7161: LD_INT 0
7163: PPUSH
7164: LD_INT 3
7166: PPUSH
7167: LD_EXP 25
7171: PPUSH
7172: LD_EXP 26
7176: PPUSH
7177: CALL_OW 12
7181: PPUSH
7182: CALL_OW 380
// un = CreateHuman ;
7186: LD_ADDR_VAR 0 3
7190: PUSH
7191: CALL_OW 44
7195: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7196: LD_VAR 0 3
7200: PPUSH
7201: LD_INT 3
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 49
// end ;
7211: GO 7126
7213: POP
7214: POP
// for i = 1 to 2 do
7215: LD_ADDR_VAR 0 2
7219: PUSH
7220: DOUBLE
7221: LD_INT 1
7223: DEC
7224: ST_TO_ADDR
7225: LD_INT 2
7227: PUSH
7228: FOR_TO
7229: IFFALSE 7315
// begin uc_side = 3 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 3
7238: ST_TO_ADDR
// uc_nation = 3 ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 3
7246: ST_TO_ADDR
// hc_gallery =  ;
7247: LD_ADDR_OWVAR 33
7251: PUSH
7252: LD_STRING 
7254: ST_TO_ADDR
// hc_name =  ;
7255: LD_ADDR_OWVAR 26
7259: PUSH
7260: LD_STRING 
7262: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_EXP 25
7273: PPUSH
7274: LD_EXP 26
7278: PPUSH
7279: CALL_OW 12
7283: PPUSH
7284: CALL_OW 380
// un = CreateHuman ;
7288: LD_ADDR_VAR 0 3
7292: PUSH
7293: CALL_OW 44
7297: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7298: LD_VAR 0 3
7302: PPUSH
7303: LD_INT 3
7305: PPUSH
7306: LD_INT 0
7308: PPUSH
7309: CALL_OW 49
// end ;
7313: GO 7228
7315: POP
7316: POP
// end ; end_of_file
7317: LD_VAR 0 1
7321: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7322: LD_INT 0
7324: PPUSH
7325: PPUSH
7326: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7327: LD_ADDR_VAR 0 1
7331: PUSH
7332: LD_VAR 0 1
7336: PUSH
7337: LD_EXP 1
7341: PUSH
7342: LD_EXP 2
7346: PUSH
7347: LD_EXP 3
7351: PUSH
7352: LD_EXP 4
7356: PUSH
7357: LD_EXP 5
7361: PUSH
7362: LD_EXP 6
7366: PUSH
7367: LD_EXP 7
7371: PUSH
7372: LD_EXP 8
7376: PUSH
7377: LD_EXP 9
7381: PUSH
7382: LD_EXP 10
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: DIFF
7399: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7400: LD_ADDR_VAR 0 6
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: LD_INT 1
7412: PPUSH
7413: LD_VAR 0 1
7417: PPUSH
7418: CALL_OW 12
7422: ARRAY
7423: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 258
7433: PUSH
7434: LD_INT 1
7436: EQUAL
7437: IFFALSE 7455
// Say ( speaker , dialogMID ) else
7439: LD_VAR 0 6
7443: PPUSH
7444: LD_VAR 0 2
7448: PPUSH
7449: CALL_OW 88
7453: GO 7469
// Say ( speaker , dialogFID ) ;
7455: LD_VAR 0 6
7459: PPUSH
7460: LD_VAR 0 3
7464: PPUSH
7465: CALL_OW 88
// result := speaker ;
7469: LD_ADDR_VAR 0 4
7473: PUSH
7474: LD_VAR 0 6
7478: ST_TO_ADDR
// end ;
7479: LD_VAR 0 4
7483: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7484: LD_INT 0
7486: PPUSH
7487: PPUSH
7488: PPUSH
// uc_side := GetSide ( b ) ;
7489: LD_ADDR_OWVAR 20
7493: PUSH
7494: LD_VAR 0 2
7498: PPUSH
7499: CALL_OW 255
7503: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7504: LD_ADDR_OWVAR 21
7508: PUSH
7509: LD_VAR 0 2
7513: PPUSH
7514: CALL_OW 248
7518: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7519: LD_INT 0
7521: PPUSH
7522: LD_INT 1
7524: PPUSH
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7534: LD_ADDR_VAR 0 5
7538: PUSH
7539: LD_VAR 0 2
7543: PPUSH
7544: CALL_OW 254
7548: PUSH
7549: LD_INT 3
7551: MINUS
7552: ST_TO_ADDR
// if dir < 0 then
7553: LD_VAR 0 5
7557: PUSH
7558: LD_INT 0
7560: LESS
7561: IFFALSE 7577
// dir := 6 + dir ;
7563: LD_ADDR_VAR 0 5
7567: PUSH
7568: LD_INT 6
7570: PUSH
7571: LD_VAR 0 5
7575: PLUS
7576: ST_TO_ADDR
// un := CreateHuman ;
7577: LD_ADDR_VAR 0 4
7581: PUSH
7582: CALL_OW 44
7586: ST_TO_ADDR
// SetDir ( un , dir ) ;
7587: LD_VAR 0 4
7591: PPUSH
7592: LD_VAR 0 5
7596: PPUSH
7597: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7601: LD_VAR 0 4
7605: PPUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: CALL_OW 52
// end ;
7615: LD_VAR 0 3
7619: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
7624: PPUSH
7625: PPUSH
// for i = 1 to count do
7626: LD_ADDR_VAR 0 8
7630: PUSH
7631: DOUBLE
7632: LD_INT 1
7634: DEC
7635: ST_TO_ADDR
7636: LD_VAR 0 6
7640: PUSH
7641: FOR_TO
7642: IFFALSE 7723
// begin uc_side = side ;
7644: LD_ADDR_OWVAR 20
7648: PUSH
7649: LD_VAR 0 1
7653: ST_TO_ADDR
// uc_nation = nation ;
7654: LD_ADDR_OWVAR 21
7658: PUSH
7659: LD_VAR 0 2
7663: ST_TO_ADDR
// hc_gallery =  ;
7664: LD_ADDR_OWVAR 33
7668: PUSH
7669: LD_STRING 
7671: ST_TO_ADDR
// hc_name =  ;
7672: LD_ADDR_OWVAR 26
7676: PUSH
7677: LD_STRING 
7679: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7680: LD_INT 0
7682: PPUSH
7683: LD_VAR 0 5
7687: PPUSH
7688: LD_VAR 0 4
7692: PPUSH
7693: CALL_OW 380
// un = CreateHuman ;
7697: LD_ADDR_VAR 0 10
7701: PUSH
7702: CALL_OW 44
7706: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7707: LD_VAR 0 10
7711: PPUSH
7712: LD_VAR 0 3
7716: PPUSH
7717: CALL_OW 52
// end ;
7721: GO 7641
7723: POP
7724: POP
// end ;
7725: LD_VAR 0 7
7729: RET
// export function PrepareDifficulty ; begin
7730: LD_INT 0
7732: PPUSH
// if Difficulty = 1 then
7733: LD_OWVAR 67
7737: PUSH
7738: LD_INT 1
7740: EQUAL
7741: IFFALSE 7759
// begin RuSolMinLevel = 3 ;
7743: LD_ADDR_EXP 25
7747: PUSH
7748: LD_INT 3
7750: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7751: LD_ADDR_EXP 26
7755: PUSH
7756: LD_INT 5
7758: ST_TO_ADDR
// end ; if Difficulty = 2 then
7759: LD_OWVAR 67
7763: PUSH
7764: LD_INT 2
7766: EQUAL
7767: IFFALSE 7837
// begin RuSolMinLevel = 5 ;
7769: LD_ADDR_EXP 25
7773: PUSH
7774: LD_INT 5
7776: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7777: LD_ADDR_EXP 26
7781: PUSH
7782: LD_INT 6
7784: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7785: LD_INT 51
7787: PPUSH
7788: LD_INT 3
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7798: LD_INT 57
7800: PPUSH
7801: LD_INT 3
7803: PPUSH
7804: LD_INT 1
7806: PPUSH
7807: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7811: LD_INT 57
7813: PPUSH
7814: LD_INT 6
7816: PPUSH
7817: LD_INT 2
7819: PPUSH
7820: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7824: LD_INT 51
7826: PPUSH
7827: LD_INT 6
7829: PPUSH
7830: LD_INT 2
7832: PPUSH
7833: CALL_OW 322
// end ; if Difficulty = 3 then
7837: LD_OWVAR 67
7841: PUSH
7842: LD_INT 3
7844: EQUAL
7845: IFFALSE 7928
// begin RuSolMinLevel = 5 ;
7847: LD_ADDR_EXP 25
7851: PUSH
7852: LD_INT 5
7854: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7855: LD_ADDR_EXP 26
7859: PUSH
7860: LD_INT 6
7862: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7863: LD_INT 57
7865: PPUSH
7866: LD_INT 3
7868: PPUSH
7869: LD_INT 1
7871: PPUSH
7872: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7876: LD_INT 51
7878: PPUSH
7879: LD_INT 3
7881: PPUSH
7882: LD_INT 1
7884: PPUSH
7885: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7889: LD_INT 52
7891: PPUSH
7892: LD_INT 3
7894: PPUSH
7895: LD_INT 1
7897: PPUSH
7898: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7902: LD_INT 57
7904: PPUSH
7905: LD_INT 6
7907: PPUSH
7908: LD_INT 2
7910: PPUSH
7911: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7915: LD_INT 52
7917: PPUSH
7918: LD_INT 6
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: CALL_OW 322
// end ; end ;
7928: LD_VAR 0 1
7932: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7933: LD_INT 0
7935: PPUSH
7936: PPUSH
7937: PPUSH
7938: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_INT 3
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 25
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7973: LD_ADDR_VAR 0 4
7977: PUSH
7978: LD_INT 4
7980: PUSH
7981: LD_INT 75
7983: PUSH
7984: LD_INT 79
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 4
7998: PUSH
7999: LD_INT 113
8001: PUSH
8002: LD_INT 94
8004: PUSH
8005: LD_INT 4
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 29
8016: PUSH
8017: LD_INT 106
8019: PUSH
8020: LD_INT 97
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 26
8034: PUSH
8035: LD_INT 93
8037: PUSH
8038: LD_INT 97
8040: PUSH
8041: LD_INT 5
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 100
8055: PUSH
8056: LD_INT 89
8058: PUSH
8059: LD_INT 3
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 17
8070: PUSH
8071: LD_INT 96
8073: PUSH
8074: LD_INT 89
8076: PUSH
8077: LD_INT 1
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 32
8088: PUSH
8089: LD_INT 78
8091: PUSH
8092: LD_INT 94
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 32
8106: PUSH
8107: LD_INT 95
8109: PUSH
8110: LD_INT 82
8112: PUSH
8113: LD_INT 3
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 32
8124: PUSH
8125: LD_INT 104
8127: PUSH
8128: LD_INT 85
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 32
8142: PUSH
8143: LD_INT 81
8145: PUSH
8146: LD_INT 78
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 33
8160: PUSH
8161: LD_INT 109
8163: PUSH
8164: LD_INT 90
8166: PUSH
8167: LD_INT 3
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 33
8178: PUSH
8179: LD_INT 88
8181: PUSH
8182: LD_INT 79
8184: PUSH
8185: LD_INT 3
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 33
8196: PUSH
8197: LD_INT 76
8199: PUSH
8200: LD_INT 87
8202: PUSH
8203: LD_INT 1
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 26
8214: PUSH
8215: LD_INT 96
8217: PUSH
8218: LD_INT 97
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 26
8232: PUSH
8233: LD_INT 85
8235: PUSH
8236: LD_INT 84
8238: PUSH
8239: LD_INT 2
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 6
8250: PUSH
8251: LD_INT 88
8253: PUSH
8254: LD_INT 95
8256: PUSH
8257: LD_INT 0
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 19
8268: PUSH
8269: LD_INT 103
8271: PUSH
8272: LD_INT 89
8274: PUSH
8275: LD_INT 4
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 16
8286: PUSH
8287: LD_INT 97
8289: PUSH
8290: LD_INT 86
8292: PUSH
8293: LD_INT 2
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 24
8304: PUSH
8305: LD_INT 100
8307: PUSH
8308: LD_INT 85
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: ST_TO_ADDR
// for i := 1 to buildingsTab do
8341: LD_ADDR_VAR 0 2
8345: PUSH
8346: DOUBLE
8347: LD_INT 1
8349: DEC
8350: ST_TO_ADDR
8351: LD_VAR 0 4
8355: PUSH
8356: FOR_TO
8357: IFFALSE 8430
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8359: LD_VAR 0 3
8363: PPUSH
8364: LD_VAR 0 4
8368: PUSH
8369: LD_VAR 0 2
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: LD_VAR 0 4
8383: PUSH
8384: LD_VAR 0 2
8388: ARRAY
8389: PUSH
8390: LD_INT 2
8392: ARRAY
8393: PPUSH
8394: LD_VAR 0 4
8398: PUSH
8399: LD_VAR 0 2
8403: ARRAY
8404: PUSH
8405: LD_INT 3
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 4
8413: PUSH
8414: LD_VAR 0 2
8418: ARRAY
8419: PUSH
8420: LD_INT 4
8422: ARRAY
8423: PPUSH
8424: CALL_OW 205
8428: GO 8356
8430: POP
8431: POP
// end ;
8432: LD_VAR 0 1
8436: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8437: LD_INT 0
8439: PPUSH
8440: PPUSH
// for i in charactersList do
8441: LD_ADDR_VAR 0 4
8445: PUSH
8446: LD_VAR 0 1
8450: PUSH
8451: FOR_IN
8452: IFFALSE 8470
// SaveCharacters ( i , ident ) ;
8454: LD_VAR 0 4
8458: PPUSH
8459: LD_VAR 0 2
8463: PPUSH
8464: CALL_OW 38
8468: GO 8451
8470: POP
8471: POP
// end ;
8472: LD_VAR 0 3
8476: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
8483: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8484: LD_ADDR_VAR 0 8
8488: PUSH
8489: LD_INT 48
8491: PUSH
8492: LD_INT 49
8494: PUSH
8495: LD_INT 50
8497: PUSH
8498: LD_INT 20
8500: PUSH
8501: LD_INT 1
8503: PUSH
8504: LD_INT 51
8506: PUSH
8507: LD_INT 52
8509: PUSH
8510: LD_INT 69
8512: PUSH
8513: LD_INT 39
8515: PUSH
8516: LD_INT 34
8518: PUSH
8519: LD_INT 40
8521: PUSH
8522: LD_INT 53
8524: PUSH
8525: LD_INT 71
8527: PUSH
8528: LD_INT 57
8530: PUSH
8531: LD_INT 58
8533: PUSH
8534: LD_INT 44
8536: PUSH
8537: LD_INT 32
8539: PUSH
8540: LD_INT 27
8542: PUSH
8543: LD_INT 23
8545: PUSH
8546: LD_INT 33
8548: PUSH
8549: LD_INT 59
8551: PUSH
8552: LD_INT 54
8554: PUSH
8555: LD_INT 55
8557: PUSH
8558: LD_INT 56
8560: PUSH
8561: LD_INT 63
8563: PUSH
8564: LD_INT 64
8566: PUSH
8567: LD_INT 65
8569: PUSH
8570: LD_INT 30
8572: PUSH
8573: LD_INT 31
8575: PUSH
8576: LD_INT 21
8578: PUSH
8579: LD_INT 22
8581: PUSH
8582: LD_INT 25
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8619: LD_ADDR_VAR 0 5
8623: PUSH
8624: DOUBLE
8625: LD_INT 1
8627: DEC
8628: ST_TO_ADDR
8629: LD_VAR 0 8
8633: PUSH
8634: FOR_TO
8635: IFFALSE 8711
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8637: LD_VAR 0 8
8641: PUSH
8642: LD_VAR 0 5
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 1
8652: PPUSH
8653: CALL_OW 321
8657: PUSH
8658: LD_INT 1
8660: EQUAL
8661: PUSH
8662: LD_VAR 0 8
8666: PUSH
8667: LD_VAR 0 5
8671: ARRAY
8672: PPUSH
8673: LD_VAR 0 3
8677: PPUSH
8678: CALL_OW 482
8682: PUSH
8683: LD_INT 1
8685: EQUAL
8686: AND
8687: IFFALSE 8709
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 8
8698: PUSH
8699: LD_VAR 0 5
8703: ARRAY
8704: PPUSH
8705: CALL_OW 184
8709: GO 8634
8711: POP
8712: POP
// end ;
8713: LD_VAR 0 4
8717: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8718: LD_INT 0
8720: PPUSH
8721: PPUSH
8722: PPUSH
8723: PPUSH
8724: PPUSH
8725: PPUSH
8726: PPUSH
8727: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8728: LD_ADDR_VAR 0 6
8732: PUSH
8733: LD_VAR 0 2
8737: PPUSH
8738: LD_INT 22
8740: PUSH
8741: LD_VAR 0 1
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 56
8752: PUSH
8753: EMPTY
8754: LIST
8755: PUSH
8756: LD_INT 24
8758: PUSH
8759: LD_INT 700
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 3
8768: PUSH
8769: LD_INT 60
8771: PUSH
8772: EMPTY
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 2
8781: PUSH
8782: LD_INT 25
8784: PUSH
8785: LD_INT 1
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 25
8804: PUSH
8805: LD_INT 8
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 25
8814: PUSH
8815: LD_INT 9
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 70
8840: PUSH
8841: LD_EXP 24
8845: PUSH
8846: EMPTY
8847: LIST
8848: DIFF
8849: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8850: LD_ADDR_VAR 0 7
8854: PUSH
8855: LD_VAR 0 2
8859: PPUSH
8860: LD_INT 22
8862: PUSH
8863: LD_VAR 0 1
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 30
8874: PUSH
8875: LD_INT 32
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 58
8884: PUSH
8885: EMPTY
8886: LIST
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 251
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 70
8908: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8909: LD_ADDR_VAR 0 9
8913: PUSH
8914: LD_VAR 0 2
8918: PPUSH
8919: LD_INT 22
8921: PUSH
8922: LD_VAR 0 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: LD_INT 30
8936: PUSH
8937: LD_INT 4
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 30
8946: PUSH
8947: LD_INT 5
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 24
8961: PUSH
8962: LD_INT 251
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: PPUSH
8974: CALL_OW 70
8978: ST_TO_ADDR
// if barrackList > 0 then
8979: LD_VAR 0 9
8983: PUSH
8984: LD_INT 0
8986: GREATER
8987: IFFALSE 9135
// begin if turretList = 0 then
8989: LD_VAR 0 7
8993: PUSH
8994: LD_INT 0
8996: EQUAL
8997: IFFALSE 9039
// begin if soldiers_list > 0 then
8999: LD_VAR 0 6
9003: PUSH
9004: LD_INT 0
9006: GREATER
9007: IFFALSE 9037
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9009: LD_VAR 0 6
9013: PPUSH
9014: LD_VAR 0 9
9018: PUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_VAR 0 9
9026: PPUSH
9027: CALL_OW 12
9031: ARRAY
9032: PPUSH
9033: CALL_OW 120
// end else
9037: GO 9135
// begin for i in barrackList do
9039: LD_ADDR_VAR 0 4
9043: PUSH
9044: LD_VAR 0 9
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9133
// begin insideUnits = UnitsInside ( i ) ;
9052: LD_ADDR_VAR 0 10
9056: PUSH
9057: LD_VAR 0 4
9061: PPUSH
9062: CALL_OW 313
9066: ST_TO_ADDR
// if insideUnits > 0 then
9067: LD_VAR 0 10
9071: PUSH
9072: LD_INT 0
9074: GREATER
9075: IFFALSE 9099
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9077: LD_VAR 0 10
9081: PUSH
9082: LD_INT 1
9084: ARRAY
9085: PPUSH
9086: LD_VAR 0 7
9090: PUSH
9091: LD_INT 1
9093: ARRAY
9094: PPUSH
9095: CALL_OW 120
// if soldiers_list > 0 then
9099: LD_VAR 0 6
9103: PUSH
9104: LD_INT 0
9106: GREATER
9107: IFFALSE 9131
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9109: LD_VAR 0 6
9113: PUSH
9114: LD_INT 1
9116: ARRAY
9117: PPUSH
9118: LD_VAR 0 7
9122: PUSH
9123: LD_INT 1
9125: ARRAY
9126: PPUSH
9127: CALL_OW 120
// end ;
9131: GO 9049
9133: POP
9134: POP
// end ; end ; end ;
9135: LD_VAR 0 3
9139: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9140: LD_INT 0
9142: PPUSH
9143: PPUSH
9144: PPUSH
9145: PPUSH
9146: PPUSH
9147: PPUSH
// for i = 1 to vehCount do
9148: LD_ADDR_VAR 0 8
9152: PUSH
9153: DOUBLE
9154: LD_INT 1
9156: DEC
9157: ST_TO_ADDR
9158: LD_VAR 0 6
9162: PUSH
9163: FOR_TO
9164: IFFALSE 9371
// begin uc_side = side ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_VAR 0 1
9175: ST_TO_ADDR
// uc_nation = nation ;
9176: LD_ADDR_OWVAR 21
9180: PUSH
9181: LD_VAR 0 3
9185: ST_TO_ADDR
// vc_Chassis = 22 ;
9186: LD_ADDR_OWVAR 37
9190: PUSH
9191: LD_INT 22
9193: ST_TO_ADDR
// vc_engine = 1 ;
9194: LD_ADDR_OWVAR 39
9198: PUSH
9199: LD_INT 1
9201: ST_TO_ADDR
// vc_control = 1 ;
9202: LD_ADDR_OWVAR 38
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9210: LD_ADDR_OWVAR 40
9214: PUSH
9215: LD_INT 43
9217: PUSH
9218: LD_INT 44
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_INT 2
9230: PPUSH
9231: CALL_OW 12
9235: ARRAY
9236: ST_TO_ADDR
// veh = CreateVehicle ;
9237: LD_ADDR_VAR 0 12
9241: PUSH
9242: CALL_OW 45
9246: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9247: LD_VAR 0 12
9251: PPUSH
9252: LD_VAR 0 2
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9264: LD_ADDR_EXP 32
9268: PUSH
9269: LD_EXP 32
9273: PUSH
9274: LD_VAR 0 12
9278: ADD
9279: ST_TO_ADDR
// hc_class = 3 ;
9280: LD_ADDR_OWVAR 28
9284: PUSH
9285: LD_INT 3
9287: ST_TO_ADDR
// hc_name =  ;
9288: LD_ADDR_OWVAR 26
9292: PUSH
9293: LD_STRING 
9295: ST_TO_ADDR
// hc_gallery =  ;
9296: LD_ADDR_OWVAR 33
9300: PUSH
9301: LD_STRING 
9303: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9304: LD_INT 0
9306: PPUSH
9307: LD_INT 3
9309: PPUSH
9310: LD_EXP 25
9314: PPUSH
9315: LD_EXP 26
9319: PPUSH
9320: CALL_OW 12
9324: PPUSH
9325: CALL_OW 380
// un = CreateHuman ;
9329: LD_ADDR_VAR 0 10
9333: PUSH
9334: CALL_OW 44
9338: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9339: LD_VAR 0 10
9343: PPUSH
9344: LD_VAR 0 12
9348: PPUSH
9349: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9353: LD_ADDR_EXP 32
9357: PUSH
9358: LD_EXP 32
9362: PUSH
9363: LD_VAR 0 10
9367: ADD
9368: ST_TO_ADDR
// end ;
9369: GO 9163
9371: POP
9372: POP
// end ;
9373: LD_VAR 0 7
9377: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9378: LD_INT 0
9380: PPUSH
9381: PPUSH
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9386: LD_VAR 0 2
9390: PPUSH
9391: LD_INT 22
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: PPUSH
9406: CALL_OW 70
9410: PUSH
9411: LD_INT 0
9413: EQUAL
9414: PUSH
9415: LD_EXP 32
9419: AND
9420: IFFALSE 9707
// begin for i in defenders_list do
9422: LD_ADDR_VAR 0 4
9426: PUSH
9427: LD_EXP 32
9431: PUSH
9432: FOR_IN
9433: IFFALSE 9705
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9435: LD_VAR 0 4
9439: PPUSH
9440: LD_INT 63
9442: PPUSH
9443: LD_INT 75
9445: PPUSH
9446: CALL_OW 297
9450: PUSH
9451: LD_INT 8
9453: GREATER
9454: PUSH
9455: LD_VAR 0 4
9459: PPUSH
9460: CALL_OW 314
9464: NOT
9465: AND
9466: IFFALSE 9485
// ComMoveXY ( i , 63 , 75 ) else
9468: LD_VAR 0 4
9472: PPUSH
9473: LD_INT 63
9475: PPUSH
9476: LD_INT 75
9478: PPUSH
9479: CALL_OW 111
9483: GO 9703
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9485: LD_VAR 0 4
9489: PPUSH
9490: CALL_OW 257
9494: PUSH
9495: LD_INT 3
9497: EQUAL
9498: PUSH
9499: LD_VAR 0 4
9503: PPUSH
9504: CALL_OW 310
9508: NOT
9509: AND
9510: PUSH
9511: LD_VAR 0 4
9515: PPUSH
9516: CALL_OW 314
9520: NOT
9521: AND
9522: IFFALSE 9575
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9524: LD_VAR 0 4
9528: PPUSH
9529: LD_EXP 32
9533: PPUSH
9534: LD_INT 58
9536: PUSH
9537: EMPTY
9538: LIST
9539: PUSH
9540: LD_INT 24
9542: PUSH
9543: LD_INT 1000
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PPUSH
9554: CALL_OW 72
9558: PPUSH
9559: LD_VAR 0 4
9563: PPUSH
9564: CALL_OW 74
9568: PPUSH
9569: CALL_OW 120
9573: GO 9703
// if GetFuel ( i ) < 100 then
9575: LD_VAR 0 4
9579: PPUSH
9580: CALL_OW 261
9584: PUSH
9585: LD_INT 100
9587: LESS
9588: IFFALSE 9604
// SetFuel ( defenders_list , 100 ) else
9590: LD_EXP 32
9594: PPUSH
9595: LD_INT 100
9597: PPUSH
9598: CALL_OW 240
9602: GO 9703
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9604: LD_VAR 0 4
9608: PPUSH
9609: CALL_OW 263
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: PUSH
9618: LD_VAR 0 4
9622: PPUSH
9623: CALL_OW 256
9627: PUSH
9628: LD_INT 990
9630: LESS
9631: AND
9632: IFFALSE 9703
// begin veh := i ;
9634: LD_ADDR_VAR 0 7
9638: PUSH
9639: LD_VAR 0 4
9643: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9644: LD_ADDR_VAR 0 8
9648: PUSH
9649: LD_VAR 0 4
9653: PPUSH
9654: CALL_OW 311
9658: ST_TO_ADDR
// if veh then
9659: LD_VAR 0 7
9663: IFFALSE 9703
// begin ComMoveXY ( i , 63 , 75 ) ;
9665: LD_VAR 0 4
9669: PPUSH
9670: LD_INT 63
9672: PPUSH
9673: LD_INT 75
9675: PPUSH
9676: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9689: LD_VAR 0 8
9693: PPUSH
9694: LD_VAR 0 7
9698: PPUSH
9699: CALL_OW 189
// end ; end ; end ;
9703: GO 9432
9705: POP
9706: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9707: LD_ADDR_VAR 0 6
9711: PUSH
9712: LD_VAR 0 2
9716: PPUSH
9717: LD_INT 22
9719: PUSH
9720: LD_VAR 0 1
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: PPUSH
9732: CALL_OW 70
9736: ST_TO_ADDR
// if tmp and defenders_list then
9737: LD_VAR 0 6
9741: PUSH
9742: LD_EXP 32
9746: AND
9747: IFFALSE 9916
// for i in defenders_list do
9749: LD_ADDR_VAR 0 4
9753: PUSH
9754: LD_EXP 32
9758: PUSH
9759: FOR_IN
9760: IFFALSE 9914
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9762: LD_VAR 0 4
9766: PPUSH
9767: CALL_OW 257
9771: PUSH
9772: LD_INT 3
9774: EQUAL
9775: PUSH
9776: LD_VAR 0 4
9780: PPUSH
9781: CALL_OW 310
9785: NOT
9786: AND
9787: IFFALSE 9826
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9789: LD_VAR 0 4
9793: PPUSH
9794: LD_EXP 32
9798: PPUSH
9799: LD_INT 58
9801: PUSH
9802: EMPTY
9803: LIST
9804: PPUSH
9805: CALL_OW 72
9809: PPUSH
9810: LD_VAR 0 4
9814: PPUSH
9815: CALL_OW 74
9819: PPUSH
9820: CALL_OW 120
9824: GO 9912
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9826: LD_VAR 0 4
9830: PPUSH
9831: CALL_OW 314
9835: NOT
9836: PUSH
9837: LD_VAR 0 4
9841: PPUSH
9842: LD_VAR 0 2
9846: PPUSH
9847: CALL_OW 308
9851: AND
9852: IFFALSE 9880
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9854: LD_VAR 0 4
9858: PPUSH
9859: LD_VAR 0 6
9863: PPUSH
9864: LD_VAR 0 4
9868: PPUSH
9869: CALL_OW 74
9873: PPUSH
9874: CALL_OW 115
9878: GO 9912
// if not IsInArea ( i , defenseArea ) then
9880: LD_VAR 0 4
9884: PPUSH
9885: LD_VAR 0 2
9889: PPUSH
9890: CALL_OW 308
9894: NOT
9895: IFFALSE 9912
// ComMoveXY ( i , 63 , 75 ) ;
9897: LD_VAR 0 4
9901: PPUSH
9902: LD_INT 63
9904: PPUSH
9905: LD_INT 75
9907: PPUSH
9908: CALL_OW 111
// end ;
9912: GO 9759
9914: POP
9915: POP
// end ;
9916: LD_VAR 0 3
9920: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9921: LD_INT 0
9923: PPUSH
9924: PPUSH
9925: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9926: LD_INT 22
9928: PUSH
9929: LD_VAR 0 1
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 21
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 69
9956: PUSH
9957: LD_VAR 0 3
9961: LESSEQUAL
9962: IFFALSE 10070
// begin for i = 1 to vehCount do
9964: LD_ADDR_VAR 0 9
9968: PUSH
9969: DOUBLE
9970: LD_INT 1
9972: DEC
9973: ST_TO_ADDR
9974: LD_VAR 0 3
9978: PUSH
9979: FOR_TO
9980: IFFALSE 10068
// begin weapon = weaponTab [ i ] ;
9982: LD_ADDR_VAR 0 10
9986: PUSH
9987: LD_VAR 0 4
9991: PUSH
9992: LD_VAR 0 9
9996: ARRAY
9997: ST_TO_ADDR
// if weapon = 46 then
9998: LD_VAR 0 10
10002: PUSH
10003: LD_INT 46
10005: EQUAL
10006: IFFALSE 10037
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10008: LD_VAR 0 2
10012: PPUSH
10013: LD_INT 24
10015: PPUSH
10016: LD_VAR 0 5
10020: PPUSH
10021: LD_VAR 0 6
10025: PPUSH
10026: LD_VAR 0 10
10030: PPUSH
10031: CALL_OW 185
// end else
10035: GO 10066
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10037: LD_VAR 0 2
10041: PPUSH
10042: LD_VAR 0 7
10046: PPUSH
10047: LD_VAR 0 5
10051: PPUSH
10052: LD_VAR 0 6
10056: PPUSH
10057: LD_VAR 0 10
10061: PPUSH
10062: CALL_OW 185
// end ; end ;
10066: GO 9979
10068: POP
10069: POP
// end ; end ;
10070: LD_VAR 0 8
10074: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10075: LD_INT 0
10077: PPUSH
10078: PPUSH
10079: PPUSH
10080: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10081: LD_ADDR_VAR 0 8
10085: PUSH
10086: LD_INT 22
10088: PUSH
10089: LD_VAR 0 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 21
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 3
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: LD_INT 650
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 69
10134: ST_TO_ADDR
// if damageVehicles > 0 then
10135: LD_VAR 0 8
10139: PUSH
10140: LD_INT 0
10142: GREATER
10143: IFFALSE 10164
// ComMoveXY ( damageVehicles , repX , repY ) ;
10145: LD_VAR 0 8
10149: PPUSH
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_VAR 0 4
10159: PPUSH
10160: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10164: LD_VAR 0 8
10168: PPUSH
10169: LD_INT 95
10171: PUSH
10172: LD_VAR 0 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 3
10183: PUSH
10184: LD_INT 58
10186: PUSH
10187: EMPTY
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 72
10202: PUSH
10203: LD_INT 0
10205: GREATER
10206: IFFALSE 10273
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10208: LD_ADDR_VAR 0 6
10212: PUSH
10213: LD_VAR 0 8
10217: PPUSH
10218: LD_INT 95
10220: PUSH
10221: LD_VAR 0 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: LD_INT 58
10235: PUSH
10236: EMPTY
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PPUSH
10247: CALL_OW 72
10251: PUSH
10252: FOR_IN
10253: IFFALSE 10271
// ComExitVehicle ( UnitsInside ( i ) ) ;
10255: LD_VAR 0 6
10259: PPUSH
10260: CALL_OW 313
10264: PPUSH
10265: CALL_OW 121
10269: GO 10252
10271: POP
10272: POP
// end ;
10273: LD_VAR 0 5
10277: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10278: LD_INT 0
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
10284: PPUSH
10285: PPUSH
10286: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10287: LD_ADDR_VAR 0 8
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_VAR 0 1
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 21
10306: PUSH
10307: LD_INT 2
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 24
10316: PUSH
10317: LD_INT 250
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: LD_INT 58
10329: PUSH
10330: EMPTY
10331: LIST
10332: PUSH
10333: LD_INT 2
10335: PUSH
10336: LD_INT 34
10338: PUSH
10339: LD_INT 43
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 34
10348: PUSH
10349: LD_INT 44
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 34
10358: PUSH
10359: LD_INT 46
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PPUSH
10383: CALL_OW 69
10387: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10388: LD_INT 22
10390: PUSH
10391: LD_VAR 0 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 21
10402: PUSH
10403: LD_INT 2
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 24
10412: PUSH
10413: LD_INT 1000
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 3
10422: PUSH
10423: LD_INT 58
10425: PUSH
10426: EMPTY
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 43
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 34
10444: PUSH
10445: LD_INT 44
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 46
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 69
10483: PUSH
10484: LD_INT 5
10486: PUSH
10487: LD_INT 6
10489: PUSH
10490: LD_INT 7
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: LD_OWVAR 67
10502: ARRAY
10503: GREATEREQUAL
10504: IFFALSE 11069
// repeat wait ( 0 0$1 ) ;
10506: LD_INT 35
10508: PPUSH
10509: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10513: LD_ADDR_VAR 0 8
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_VAR 0 1
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 21
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 24
10542: PUSH
10543: LD_INT 250
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: LD_INT 34
10555: PUSH
10556: LD_INT 43
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 34
10565: PUSH
10566: LD_INT 44
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 34
10575: PUSH
10576: LD_INT 46
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 3
10591: PUSH
10592: LD_INT 58
10594: PUSH
10595: EMPTY
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 69
10613: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10614: LD_INT 22
10616: PUSH
10617: LD_VAR 0 1
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 95
10628: PUSH
10629: LD_VAR 0 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: NOT
10647: PUSH
10648: LD_VAR 0 11
10652: PUSH
10653: LD_INT 0
10655: EQUAL
10656: AND
10657: IFFALSE 10712
// for i := 1 to wayX do
10659: LD_ADDR_VAR 0 6
10663: PUSH
10664: DOUBLE
10665: LD_INT 1
10667: DEC
10668: ST_TO_ADDR
10669: LD_VAR 0 3
10673: PUSH
10674: FOR_TO
10675: IFFALSE 10710
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10677: LD_VAR 0 8
10681: PPUSH
10682: LD_VAR 0 3
10686: PUSH
10687: LD_VAR 0 6
10691: ARRAY
10692: PPUSH
10693: LD_VAR 0 4
10697: PUSH
10698: LD_VAR 0 6
10702: ARRAY
10703: PPUSH
10704: CALL_OW 114
10708: GO 10674
10710: POP
10711: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10712: LD_INT 22
10714: PUSH
10715: LD_VAR 0 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 95
10726: PUSH
10727: LD_VAR 0 2
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: IFFALSE 10968
// begin seeEnemy = 1 ;
10746: LD_ADDR_VAR 0 11
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
// for j in vehiclesOK do
10754: LD_ADDR_VAR 0 7
10758: PUSH
10759: LD_VAR 0 8
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10966
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10767: LD_ADDR_VAR 0 9
10771: PUSH
10772: LD_INT 81
10774: PUSH
10775: LD_VAR 0 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 101
10786: PUSH
10787: LD_INT 1
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 69
10802: PPUSH
10803: LD_VAR 0 7
10807: PPUSH
10808: CALL_OW 74
10812: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10813: LD_ADDR_VAR 0 10
10817: PUSH
10818: LD_INT 81
10820: PUSH
10821: LD_VAR 0 1
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 101
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 59
10845: PUSH
10846: EMPTY
10847: LIST
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 1
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: PPUSH
10883: CALL_OW 69
10887: PPUSH
10888: LD_VAR 0 7
10892: PPUSH
10893: CALL_OW 74
10897: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10898: LD_VAR 0 7
10902: PPUSH
10903: LD_VAR 0 9
10907: PPUSH
10908: CALL_OW 296
10912: PUSH
10913: LD_INT 8
10915: PLUS
10916: PUSH
10917: LD_VAR 0 7
10921: PPUSH
10922: LD_VAR 0 10
10926: PPUSH
10927: CALL_OW 296
10931: LESS
10932: IFFALSE 10950
// ComAttackUnit ( j , target1 ) else
10934: LD_VAR 0 7
10938: PPUSH
10939: LD_VAR 0 9
10943: PPUSH
10944: CALL_OW 115
10948: GO 10964
// ComAttackUnit ( j , target2 ) ;
10950: LD_VAR 0 7
10954: PPUSH
10955: LD_VAR 0 10
10959: PPUSH
10960: CALL_OW 115
// end ;
10964: GO 10764
10966: POP
10967: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10968: LD_INT 22
10970: PUSH
10971: LD_VAR 0 1
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 21
10982: PUSH
10983: LD_INT 2
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 24
10992: PUSH
10993: LD_INT 250
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: LD_INT 34
11005: PUSH
11006: LD_INT 43
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 44
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 34
11025: PUSH
11026: LD_INT 46
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 3
11041: PUSH
11042: LD_INT 58
11044: PUSH
11045: EMPTY
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: LD_INT 0
11066: EQUAL
11067: IFFALSE 10506
// seeEnemy = 0 ;
11069: LD_ADDR_VAR 0 11
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// end ;
11077: LD_VAR 0 5
11081: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11082: LD_INT 0
11084: PPUSH
11085: PPUSH
11086: PPUSH
11087: PPUSH
11088: PPUSH
11089: PPUSH
// repeat wait ( 0 0$1 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11097: LD_ADDR_VAR 0 7
11101: PUSH
11102: LD_INT 22
11104: PUSH
11105: LD_VAR 0 1
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 21
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 24
11126: PUSH
11127: LD_INT 651
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: PPUSH
11139: CALL_OW 69
11143: ST_TO_ADDR
// for j in vehiclesOK do
11144: LD_ADDR_VAR 0 4
11148: PUSH
11149: LD_VAR 0 7
11153: PUSH
11154: FOR_IN
11155: IFFALSE 11356
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11157: LD_ADDR_VAR 0 5
11161: PUSH
11162: LD_INT 81
11164: PUSH
11165: LD_VAR 0 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 101
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PPUSH
11188: CALL_OW 69
11192: PPUSH
11193: LD_VAR 0 4
11197: PPUSH
11198: CALL_OW 74
11202: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11203: LD_ADDR_VAR 0 6
11207: PUSH
11208: LD_INT 81
11210: PUSH
11211: LD_VAR 0 1
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 101
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 2
11232: PUSH
11233: LD_INT 59
11235: PUSH
11236: EMPTY
11237: LIST
11238: PUSH
11239: LD_INT 21
11241: PUSH
11242: LD_INT 1
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 21
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: PPUSH
11273: CALL_OW 69
11277: PPUSH
11278: LD_VAR 0 4
11282: PPUSH
11283: CALL_OW 74
11287: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11288: LD_VAR 0 4
11292: PPUSH
11293: LD_VAR 0 5
11297: PPUSH
11298: CALL_OW 296
11302: PUSH
11303: LD_INT 8
11305: PLUS
11306: PUSH
11307: LD_VAR 0 4
11311: PPUSH
11312: LD_VAR 0 6
11316: PPUSH
11317: CALL_OW 296
11321: LESS
11322: IFFALSE 11340
// ComAttackUnit ( j , target1 ) else
11324: LD_VAR 0 4
11328: PPUSH
11329: LD_VAR 0 5
11333: PPUSH
11334: CALL_OW 115
11338: GO 11354
// ComAttackUnit ( j , target2 ) ;
11340: LD_VAR 0 4
11344: PPUSH
11345: LD_VAR 0 6
11349: PPUSH
11350: CALL_OW 115
// end ;
11354: GO 11154
11356: POP
11357: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 24
11382: PUSH
11383: LD_INT 250
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 69
11399: PUSH
11400: LD_INT 0
11402: EQUAL
11403: IFFALSE 11090
// end ;
11405: LD_VAR 0 2
11409: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11410: LD_INT 0
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11418: LD_ADDR_VAR 0 8
11422: PUSH
11423: LD_VAR 0 2
11427: PPUSH
11428: CALL_OW 313
11432: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11433: LD_ADDR_VAR 0 9
11437: PUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 22
11445: PUSH
11446: LD_VAR 0 1
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 24
11467: PUSH
11468: LD_INT 750
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: LD_INT 54
11480: PUSH
11481: EMPTY
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 70
11498: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11499: LD_ADDR_VAR 0 6
11503: PUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: LD_INT 22
11511: PUSH
11512: LD_VAR 0 1
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 21
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 1000
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: PPUSH
11556: CALL_OW 70
11560: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11561: LD_VAR 0 6
11565: NOT
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_VAR 0 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 25
11581: PUSH
11582: LD_INT 2
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 250
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: PPUSH
11604: CALL_OW 69
11608: NOT
11609: AND
11610: IFFALSE 11614
// exit ;
11612: GO 11811
// if buildings_list > 0 and engineerOkInside then
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 0
11621: GREATER
11622: PUSH
11623: LD_VAR 0 8
11627: AND
11628: IFFALSE 11654
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11630: LD_VAR 0 8
11634: PPUSH
11635: LD_INT 25
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 72
11649: PPUSH
11650: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11654: LD_VAR 0 6
11658: PUSH
11659: LD_INT 0
11661: GREATER
11662: PUSH
11663: LD_VAR 0 9
11667: PUSH
11668: LD_INT 0
11670: GREATER
11671: AND
11672: IFFALSE 11692
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11674: LD_VAR 0 9
11678: PPUSH
11679: LD_VAR 0 6
11683: PUSH
11684: LD_INT 1
11686: ARRAY
11687: PPUSH
11688: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11692: LD_VAR 0 6
11696: PUSH
11697: LD_INT 0
11699: EQUAL
11700: PUSH
11701: LD_VAR 0 4
11705: PUSH
11706: LD_INT 0
11708: EQUAL
11709: AND
11710: PUSH
11711: LD_VAR 0 9
11715: PUSH
11716: LD_INT 0
11718: GREATER
11719: AND
11720: IFFALSE 11736
// ComEnterUnit ( engineerOkOutside , building ) ;
11722: LD_VAR 0 9
11726: PPUSH
11727: LD_VAR 0 2
11731: PPUSH
11732: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11736: LD_VAR 0 9
11740: PUSH
11741: LD_INT 0
11743: GREATER
11744: PUSH
11745: LD_VAR 0 6
11749: PUSH
11750: LD_INT 0
11752: EQUAL
11753: AND
11754: PUSH
11755: LD_VAR 0 4
11759: PUSH
11760: LD_INT 0
11762: GREATER
11763: AND
11764: IFFALSE 11811
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11766: LD_VAR 0 9
11770: PPUSH
11771: LD_VAR 0 4
11775: PUSH
11776: LD_INT 1
11778: ARRAY
11779: PPUSH
11780: LD_VAR 0 4
11784: PUSH
11785: LD_INT 2
11787: ARRAY
11788: PPUSH
11789: LD_VAR 0 4
11793: PUSH
11794: LD_INT 3
11796: ARRAY
11797: PPUSH
11798: LD_VAR 0 4
11802: PUSH
11803: LD_INT 4
11805: ARRAY
11806: PPUSH
11807: CALL_OW 145
// end ;
11811: LD_VAR 0 5
11815: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11816: LD_INT 0
11818: PPUSH
11819: PPUSH
11820: PPUSH
11821: PPUSH
11822: PPUSH
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11827: LD_ADDR_VAR 0 6
11831: PUSH
11832: LD_INT 22
11834: PUSH
11835: LD_VAR 0 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 25
11846: PUSH
11847: LD_INT 4
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 23
11856: PUSH
11857: LD_INT 2
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 24
11866: PUSH
11867: LD_INT 251
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11885: LD_ADDR_VAR 0 7
11889: PUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 22
11897: PUSH
11898: LD_VAR 0 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 4
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PPUSH
11939: CALL_OW 70
11943: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11944: LD_ADDR_VAR 0 10
11948: PUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: LD_INT 22
11956: PUSH
11957: LD_VAR 0 1
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 21
11968: PUSH
11969: LD_INT 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 25
11981: PUSH
11982: LD_INT 3
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 3
11995: PUSH
11996: LD_INT 24
11998: PUSH
11999: LD_INT 750
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 70
12020: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12021: LD_ADDR_VAR 0 11
12025: PUSH
12026: LD_VAR 0 2
12030: PPUSH
12031: LD_INT 22
12033: PUSH
12034: LD_VAR 0 1
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 21
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: LD_INT 25
12058: PUSH
12059: LD_INT 3
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 3
12072: PUSH
12073: LD_INT 24
12075: PUSH
12076: LD_INT 1000
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 70
12097: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12098: LD_VAR 0 10
12102: NOT
12103: PUSH
12104: LD_VAR 0 11
12108: NOT
12109: AND
12110: PUSH
12111: LD_VAR 0 6
12115: NOT
12116: AND
12117: IFFALSE 12121
// exit ;
12119: GO 12355
// if damageUnits > 0 and sci_list > 0 then
12121: LD_VAR 0 10
12125: PUSH
12126: LD_INT 0
12128: GREATER
12129: PUSH
12130: LD_VAR 0 6
12134: PUSH
12135: LD_INT 0
12137: GREATER
12138: AND
12139: IFFALSE 12155
// ComMoveToArea ( damageUnits , healArea ) ;
12141: LD_VAR 0 10
12145: PPUSH
12146: LD_VAR 0 2
12150: PPUSH
12151: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12155: LD_VAR 0 11
12159: PUSH
12160: LD_INT 0
12162: GREATER
12163: PUSH
12164: LD_VAR 0 6
12168: PUSH
12169: LD_INT 0
12171: GREATER
12172: AND
12173: IFFALSE 12184
// ComExitBuilding ( sci_list ) ;
12175: LD_VAR 0 6
12179: PPUSH
12180: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12184: LD_VAR 0 11
12188: PUSH
12189: LD_INT 0
12191: GREATER
12192: PUSH
12193: LD_VAR 0 7
12197: PUSH
12198: LD_INT 0
12200: GREATER
12201: AND
12202: IFFALSE 12222
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12204: LD_VAR 0 7
12208: PPUSH
12209: LD_VAR 0 11
12213: PUSH
12214: LD_INT 1
12216: ARRAY
12217: PPUSH
12218: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12222: LD_VAR 0 10
12226: PUSH
12227: LD_INT 0
12229: EQUAL
12230: PUSH
12231: LD_VAR 0 11
12235: PUSH
12236: LD_INT 0
12238: EQUAL
12239: AND
12240: PUSH
12241: LD_VAR 0 7
12245: PUSH
12246: LD_INT 0
12248: GREATER
12249: AND
12250: IFFALSE 12355
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12252: LD_ADDR_VAR 0 12
12256: PUSH
12257: LD_INT 22
12259: PUSH
12260: LD_VAR 0 1
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 21
12271: PUSH
12272: LD_INT 3
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 30
12281: PUSH
12282: LD_INT 8
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: PPUSH
12294: CALL_OW 69
12298: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12299: LD_ADDR_VAR 0 13
12303: PUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_VAR 0 12
12311: PPUSH
12312: CALL_OW 12
12316: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12317: LD_VAR 0 7
12321: PPUSH
12322: LD_INT 3
12324: PUSH
12325: LD_INT 60
12327: PUSH
12328: EMPTY
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: PPUSH
12340: LD_VAR 0 12
12344: PUSH
12345: LD_VAR 0 13
12349: ARRAY
12350: PPUSH
12351: CALL_OW 120
// end ; end ;
12355: LD_VAR 0 5
12359: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12360: LD_INT 0
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
12366: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12367: LD_ADDR_VAR 0 6
12371: PUSH
12372: LD_INT 22
12374: PUSH
12375: LD_VAR 0 1
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: LD_INT 30
12389: PUSH
12390: LD_INT 31
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 32
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 33
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 30
12419: PUSH
12420: LD_INT 4
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_INT 5
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PPUSH
12449: CALL_OW 69
12453: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12454: LD_ADDR_VAR 0 7
12458: PUSH
12459: LD_INT 22
12461: PUSH
12462: LD_VAR 0 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 21
12473: PUSH
12474: LD_INT 3
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 58
12483: PUSH
12484: EMPTY
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 69
12496: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12497: LD_VAR 0 6
12501: PUSH
12502: LD_INT 0
12504: GREATER
12505: PUSH
12506: LD_VAR 0 7
12510: PUSH
12511: LD_INT 0
12513: GREATER
12514: AND
12515: IFFALSE 12585
// begin for i in turretsList do
12517: LD_ADDR_VAR 0 4
12521: PUSH
12522: LD_VAR 0 6
12526: PUSH
12527: FOR_IN
12528: IFFALSE 12583
// begin for j in enemyBuildings do
12530: LD_ADDR_VAR 0 5
12534: PUSH
12535: LD_VAR 0 7
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12579
// begin if GetDistUnits ( i , j ) < 20 then
12543: LD_VAR 0 4
12547: PPUSH
12548: LD_VAR 0 5
12552: PPUSH
12553: CALL_OW 296
12557: PUSH
12558: LD_INT 20
12560: LESS
12561: IFFALSE 12577
// begin ComAttackUnit ( i , j ) ;
12563: LD_VAR 0 4
12567: PPUSH
12568: LD_VAR 0 5
12572: PPUSH
12573: CALL_OW 115
// end ; end ;
12577: GO 12540
12579: POP
12580: POP
// end ;
12581: GO 12527
12583: POP
12584: POP
// end ; end ;
12585: LD_VAR 0 3
12589: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
12597: PPUSH
12598: PPUSH
12599: PPUSH
12600: PPUSH
12601: PPUSH
12602: PPUSH
// for i = 1 to medicCount do
12603: LD_ADDR_VAR 0 14
12607: PUSH
12608: DOUBLE
12609: LD_INT 1
12611: DEC
12612: ST_TO_ADDR
12613: LD_VAR 0 7
12617: PUSH
12618: FOR_TO
12619: IFFALSE 12701
// begin uc_side = side ;
12621: LD_ADDR_OWVAR 20
12625: PUSH
12626: LD_VAR 0 1
12630: ST_TO_ADDR
// uc_nation = nation ;
12631: LD_ADDR_OWVAR 21
12635: PUSH
12636: LD_VAR 0 2
12640: ST_TO_ADDR
// hc_name =  ;
12641: LD_ADDR_OWVAR 26
12645: PUSH
12646: LD_STRING 
12648: ST_TO_ADDR
// hc_gallery =  ;
12649: LD_ADDR_OWVAR 33
12653: PUSH
12654: LD_STRING 
12656: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12657: LD_INT 0
12659: PPUSH
12660: LD_INT 4
12662: PPUSH
12663: LD_VAR 0 8
12667: PPUSH
12668: CALL_OW 380
// un = CreateHuman ;
12672: LD_ADDR_VAR 0 16
12676: PUSH
12677: CALL_OW 44
12681: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12682: LD_VAR 0 16
12686: PPUSH
12687: LD_VAR 0 9
12691: PPUSH
12692: LD_INT 0
12694: PPUSH
12695: CALL_OW 49
// end ;
12699: GO 12618
12701: POP
12702: POP
// for i = 1 to soldierCount do
12703: LD_ADDR_VAR 0 14
12707: PUSH
12708: DOUBLE
12709: LD_INT 1
12711: DEC
12712: ST_TO_ADDR
12713: LD_VAR 0 3
12717: PUSH
12718: FOR_TO
12719: IFFALSE 12801
// begin uc_side = side ;
12721: LD_ADDR_OWVAR 20
12725: PUSH
12726: LD_VAR 0 1
12730: ST_TO_ADDR
// uc_nation = nation ;
12731: LD_ADDR_OWVAR 21
12735: PUSH
12736: LD_VAR 0 2
12740: ST_TO_ADDR
// hc_name =  ;
12741: LD_ADDR_OWVAR 26
12745: PUSH
12746: LD_STRING 
12748: ST_TO_ADDR
// hc_gallery =  ;
12749: LD_ADDR_OWVAR 33
12753: PUSH
12754: LD_STRING 
12756: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_VAR 0 8
12767: PPUSH
12768: CALL_OW 380
// un = CreateHuman ;
12772: LD_ADDR_VAR 0 16
12776: PUSH
12777: CALL_OW 44
12781: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12782: LD_VAR 0 16
12786: PPUSH
12787: LD_VAR 0 9
12791: PPUSH
12792: LD_INT 0
12794: PPUSH
12795: CALL_OW 49
// end ;
12799: GO 12718
12801: POP
12802: POP
// for i = 1 to sniperCount do
12803: LD_ADDR_VAR 0 14
12807: PUSH
12808: DOUBLE
12809: LD_INT 1
12811: DEC
12812: ST_TO_ADDR
12813: LD_VAR 0 4
12817: PUSH
12818: FOR_TO
12819: IFFALSE 12901
// begin uc_side = side ;
12821: LD_ADDR_OWVAR 20
12825: PUSH
12826: LD_VAR 0 1
12830: ST_TO_ADDR
// uc_nation = nation ;
12831: LD_ADDR_OWVAR 21
12835: PUSH
12836: LD_VAR 0 2
12840: ST_TO_ADDR
// hc_name =  ;
12841: LD_ADDR_OWVAR 26
12845: PUSH
12846: LD_STRING 
12848: ST_TO_ADDR
// hc_gallery =  ;
12849: LD_ADDR_OWVAR 33
12853: PUSH
12854: LD_STRING 
12856: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12857: LD_INT 0
12859: PPUSH
12860: LD_INT 5
12862: PPUSH
12863: LD_VAR 0 8
12867: PPUSH
12868: CALL_OW 380
// un = CreateHuman ;
12872: LD_ADDR_VAR 0 16
12876: PUSH
12877: CALL_OW 44
12881: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12882: LD_VAR 0 16
12886: PPUSH
12887: LD_VAR 0 9
12891: PPUSH
12892: LD_INT 0
12894: PPUSH
12895: CALL_OW 49
// end ;
12899: GO 12818
12901: POP
12902: POP
// for i = 1 to bazookCount do
12903: LD_ADDR_VAR 0 14
12907: PUSH
12908: DOUBLE
12909: LD_INT 1
12911: DEC
12912: ST_TO_ADDR
12913: LD_VAR 0 5
12917: PUSH
12918: FOR_TO
12919: IFFALSE 13001
// begin uc_side = side ;
12921: LD_ADDR_OWVAR 20
12925: PUSH
12926: LD_VAR 0 1
12930: ST_TO_ADDR
// uc_nation = nation ;
12931: LD_ADDR_OWVAR 21
12935: PUSH
12936: LD_VAR 0 2
12940: ST_TO_ADDR
// hc_name =  ;
12941: LD_ADDR_OWVAR 26
12945: PUSH
12946: LD_STRING 
12948: ST_TO_ADDR
// hc_gallery =  ;
12949: LD_ADDR_OWVAR 33
12953: PUSH
12954: LD_STRING 
12956: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12957: LD_INT 0
12959: PPUSH
12960: LD_INT 9
12962: PPUSH
12963: LD_VAR 0 8
12967: PPUSH
12968: CALL_OW 380
// un = CreateHuman ;
12972: LD_ADDR_VAR 0 16
12976: PUSH
12977: CALL_OW 44
12981: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12982: LD_VAR 0 16
12986: PPUSH
12987: LD_VAR 0 9
12991: PPUSH
12992: LD_INT 0
12994: PPUSH
12995: CALL_OW 49
// end ;
12999: GO 12918
13001: POP
13002: POP
// for i = 1 to mortalCount do
13003: LD_ADDR_VAR 0 14
13007: PUSH
13008: DOUBLE
13009: LD_INT 1
13011: DEC
13012: ST_TO_ADDR
13013: LD_VAR 0 6
13017: PUSH
13018: FOR_TO
13019: IFFALSE 13101
// begin uc_side = side ;
13021: LD_ADDR_OWVAR 20
13025: PUSH
13026: LD_VAR 0 1
13030: ST_TO_ADDR
// uc_nation = nation ;
13031: LD_ADDR_OWVAR 21
13035: PUSH
13036: LD_VAR 0 2
13040: ST_TO_ADDR
// hc_name =  ;
13041: LD_ADDR_OWVAR 26
13045: PUSH
13046: LD_STRING 
13048: ST_TO_ADDR
// hc_gallery =  ;
13049: LD_ADDR_OWVAR 33
13053: PUSH
13054: LD_STRING 
13056: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13057: LD_INT 0
13059: PPUSH
13060: LD_INT 8
13062: PPUSH
13063: LD_VAR 0 8
13067: PPUSH
13068: CALL_OW 380
// un = CreateHuman ;
13072: LD_ADDR_VAR 0 16
13076: PUSH
13077: CALL_OW 44
13081: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13082: LD_VAR 0 16
13086: PPUSH
13087: LD_VAR 0 9
13091: PPUSH
13092: LD_INT 0
13094: PPUSH
13095: CALL_OW 49
// end ;
13099: GO 13018
13101: POP
13102: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13103: LD_ADDR_VAR 0 19
13107: PUSH
13108: LD_INT 22
13110: PUSH
13111: LD_VAR 0 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 25
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 25
13135: PUSH
13136: LD_INT 5
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 25
13145: PUSH
13146: LD_INT 8
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 25
13155: PUSH
13156: LD_INT 9
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13179: LD_ADDR_VAR 0 18
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 25
13198: PUSH
13199: LD_INT 4
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PPUSH
13210: CALL_OW 69
13214: ST_TO_ADDR
// for i in medic_list do
13215: LD_ADDR_VAR 0 14
13219: PUSH
13220: LD_VAR 0 18
13224: PUSH
13225: FOR_IN
13226: IFFALSE 13244
// ComMoveToArea ( i , healArea ) ;
13228: LD_VAR 0 14
13232: PPUSH
13233: LD_VAR 0 10
13237: PPUSH
13238: CALL_OW 113
13242: GO 13225
13244: POP
13245: POP
// if strategy = 1 then
13246: LD_VAR 0 12
13250: PUSH
13251: LD_INT 1
13253: EQUAL
13254: IFFALSE 13800
// begin repeat wait ( 0 0$3 ) ;
13256: LD_INT 105
13258: PPUSH
13259: CALL_OW 67
// for i in soldiersOK_list do
13263: LD_ADDR_VAR 0 14
13267: PUSH
13268: LD_VAR 0 19
13272: PUSH
13273: FOR_IN
13274: IFFALSE 13338
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13276: LD_VAR 0 14
13280: PPUSH
13281: LD_INT 91
13283: PPUSH
13284: LD_INT 63
13286: PPUSH
13287: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13291: LD_VAR 0 14
13295: PPUSH
13296: LD_INT 101
13298: PPUSH
13299: LD_INT 53
13301: PPUSH
13302: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13306: LD_VAR 0 14
13310: PPUSH
13311: LD_INT 75
13313: PPUSH
13314: LD_INT 23
13316: PPUSH
13317: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13321: LD_VAR 0 14
13325: PPUSH
13326: LD_INT 78
13328: PPUSH
13329: LD_INT 8
13331: PPUSH
13332: CALL_OW 174
// end ;
13336: GO 13273
13338: POP
13339: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13340: LD_INT 12
13342: PPUSH
13343: LD_INT 22
13345: PUSH
13346: LD_VAR 0 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PPUSH
13355: CALL_OW 70
13359: PUSH
13360: LD_INT 2
13362: GREATER
13363: IFFALSE 13256
// repeat wait ( 0 0$1 ) ;
13365: LD_INT 35
13367: PPUSH
13368: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13372: LD_ADDR_VAR 0 17
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: LD_INT 3
13394: PUSH
13395: LD_INT 24
13397: PUSH
13398: LD_INT 550
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 24
13411: PUSH
13412: LD_INT 250
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 69
13432: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13433: LD_ADDR_VAR 0 19
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_VAR 0 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 25
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 25
13465: PUSH
13466: LD_INT 5
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 25
13475: PUSH
13476: LD_INT 8
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 9
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 24
13502: PUSH
13503: LD_INT 1000
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: ST_TO_ADDR
// if medicCount > 0 then
13520: LD_VAR 0 7
13524: PUSH
13525: LD_INT 0
13527: GREATER
13528: IFFALSE 13602
// begin if damageUnit_list > 0 then
13530: LD_VAR 0 17
13534: PUSH
13535: LD_INT 0
13537: GREATER
13538: IFFALSE 13602
// begin for i in damageUnit_list do
13540: LD_ADDR_VAR 0 14
13544: PUSH
13545: LD_VAR 0 17
13549: PUSH
13550: FOR_IN
13551: IFFALSE 13600
// begin ComMoveToArea ( i , healArea ) ;
13553: LD_VAR 0 14
13557: PPUSH
13558: LD_VAR 0 10
13562: PPUSH
13563: CALL_OW 113
// for j in medic_list do
13567: LD_ADDR_VAR 0 15
13571: PUSH
13572: LD_VAR 0 18
13576: PUSH
13577: FOR_IN
13578: IFFALSE 13596
// AddComHeal ( j , i ) ;
13580: LD_VAR 0 15
13584: PPUSH
13585: LD_VAR 0 14
13589: PPUSH
13590: CALL_OW 188
13594: GO 13577
13596: POP
13597: POP
// end ;
13598: GO 13550
13600: POP
13601: POP
// end ; end ; for i in soldiersOK_list do
13602: LD_ADDR_VAR 0 14
13606: PUSH
13607: LD_VAR 0 19
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13789
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13615: LD_ADDR_VAR 0 22
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_VAR 0 11
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL_OW 69
13636: PPUSH
13637: LD_VAR 0 14
13641: PPUSH
13642: CALL_OW 74
13646: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13647: LD_ADDR_VAR 0 23
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_VAR 0 11
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 59
13669: PUSH
13670: EMPTY
13671: LIST
13672: PUSH
13673: LD_INT 21
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 21
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PPUSH
13711: LD_VAR 0 14
13715: PPUSH
13716: CALL_OW 74
13720: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13721: LD_VAR 0 14
13725: PPUSH
13726: LD_VAR 0 22
13730: PPUSH
13731: CALL_OW 296
13735: PUSH
13736: LD_INT 6
13738: PLUS
13739: PUSH
13740: LD_VAR 0 14
13744: PPUSH
13745: LD_VAR 0 23
13749: PPUSH
13750: CALL_OW 296
13754: LESS
13755: IFFALSE 13773
// begin ComAttackUnit ( i , target1 ) ;
13757: LD_VAR 0 14
13761: PPUSH
13762: LD_VAR 0 22
13766: PPUSH
13767: CALL_OW 115
// end else
13771: GO 13787
// begin ComAttackUnit ( i , target2 ) ;
13773: LD_VAR 0 14
13777: PPUSH
13778: LD_VAR 0 23
13782: PPUSH
13783: CALL_OW 115
// end ; end ;
13787: GO 13612
13789: POP
13790: POP
// until soldiersOK_list = [ ] ;
13791: LD_VAR 0 19
13795: PUSH
13796: EMPTY
13797: EQUAL
13798: IFFALSE 13365
// end ; if strategy = 2 then
13800: LD_VAR 0 12
13804: PUSH
13805: LD_INT 2
13807: EQUAL
13808: IFFALSE 14324
// begin repeat wait ( 0 0$1 ) ;
13810: LD_INT 35
13812: PPUSH
13813: CALL_OW 67
// for i in soldiersOK_list do
13817: LD_ADDR_VAR 0 14
13821: PUSH
13822: LD_VAR 0 19
13826: PUSH
13827: FOR_IN
13828: IFFALSE 13862
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13830: LD_VAR 0 14
13834: PPUSH
13835: LD_INT 91
13837: PPUSH
13838: LD_INT 63
13840: PPUSH
13841: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13845: LD_VAR 0 14
13849: PPUSH
13850: LD_INT 75
13852: PPUSH
13853: LD_INT 33
13855: PPUSH
13856: CALL_OW 174
// end ;
13860: GO 13827
13862: POP
13863: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13864: LD_INT 13
13866: PPUSH
13867: LD_INT 22
13869: PUSH
13870: LD_VAR 0 1
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PPUSH
13879: CALL_OW 70
13883: PUSH
13884: LD_INT 2
13886: GREATER
13887: IFFALSE 13810
// repeat wait ( 0 0$3 ) ;
13889: LD_INT 105
13891: PPUSH
13892: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13896: LD_ADDR_VAR 0 17
13900: PUSH
13901: LD_INT 22
13903: PUSH
13904: LD_VAR 0 1
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: LD_INT 3
13918: PUSH
13919: LD_INT 24
13921: PUSH
13922: LD_INT 550
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 24
13935: PUSH
13936: LD_INT 250
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PPUSH
13952: CALL_OW 69
13956: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13957: LD_ADDR_VAR 0 19
13961: PUSH
13962: LD_INT 22
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 2
13976: PUSH
13977: LD_INT 25
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 25
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 25
13999: PUSH
14000: LD_INT 8
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 25
14009: PUSH
14010: LD_INT 9
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: PUSH
14024: LD_INT 24
14026: PUSH
14027: LD_INT 1000
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: ST_TO_ADDR
// if medicCount > 0 then
14044: LD_VAR 0 7
14048: PUSH
14049: LD_INT 0
14051: GREATER
14052: IFFALSE 14126
// begin if damageUnit_list > 0 then
14054: LD_VAR 0 17
14058: PUSH
14059: LD_INT 0
14061: GREATER
14062: IFFALSE 14126
// begin for i in damageUnit_list do
14064: LD_ADDR_VAR 0 14
14068: PUSH
14069: LD_VAR 0 17
14073: PUSH
14074: FOR_IN
14075: IFFALSE 14124
// begin ComMoveToArea ( i , healArea ) ;
14077: LD_VAR 0 14
14081: PPUSH
14082: LD_VAR 0 10
14086: PPUSH
14087: CALL_OW 113
// for j in medic_list do
14091: LD_ADDR_VAR 0 15
14095: PUSH
14096: LD_VAR 0 18
14100: PUSH
14101: FOR_IN
14102: IFFALSE 14120
// AddComHeal ( j , i ) ;
14104: LD_VAR 0 15
14108: PPUSH
14109: LD_VAR 0 14
14113: PPUSH
14114: CALL_OW 188
14118: GO 14101
14120: POP
14121: POP
// end ;
14122: GO 14074
14124: POP
14125: POP
// end ; end ; for i in soldiersOK_list do
14126: LD_ADDR_VAR 0 14
14130: PUSH
14131: LD_VAR 0 19
14135: PUSH
14136: FOR_IN
14137: IFFALSE 14313
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14139: LD_ADDR_VAR 0 22
14143: PUSH
14144: LD_INT 22
14146: PUSH
14147: LD_VAR 0 11
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: PPUSH
14161: LD_VAR 0 14
14165: PPUSH
14166: CALL_OW 74
14170: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14171: LD_ADDR_VAR 0 23
14175: PUSH
14176: LD_INT 22
14178: PUSH
14179: LD_VAR 0 11
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: LD_INT 59
14193: PUSH
14194: EMPTY
14195: LIST
14196: PUSH
14197: LD_INT 21
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_VAR 0 14
14239: PPUSH
14240: CALL_OW 74
14244: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14245: LD_VAR 0 14
14249: PPUSH
14250: LD_VAR 0 22
14254: PPUSH
14255: CALL_OW 296
14259: PUSH
14260: LD_INT 6
14262: PLUS
14263: PUSH
14264: LD_VAR 0 14
14268: PPUSH
14269: LD_VAR 0 23
14273: PPUSH
14274: CALL_OW 296
14278: LESS
14279: IFFALSE 14297
// begin ComAttackUnit ( i , target1 ) ;
14281: LD_VAR 0 14
14285: PPUSH
14286: LD_VAR 0 22
14290: PPUSH
14291: CALL_OW 115
// end else
14295: GO 14311
// begin ComAttackUnit ( i , target2 ) ;
14297: LD_VAR 0 14
14301: PPUSH
14302: LD_VAR 0 23
14306: PPUSH
14307: CALL_OW 115
// end ; end ;
14311: GO 14136
14313: POP
14314: POP
// until soldiersOK_list = [ ] ;
14315: LD_VAR 0 19
14319: PUSH
14320: EMPTY
14321: EQUAL
14322: IFFALSE 13889
// end ; if strategy = 3 then
14324: LD_VAR 0 12
14328: PUSH
14329: LD_INT 3
14331: EQUAL
14332: IFFALSE 14878
// begin repeat wait ( 0 0$3 ) ;
14334: LD_INT 105
14336: PPUSH
14337: CALL_OW 67
// for i in soldiersOK_list do
14341: LD_ADDR_VAR 0 14
14345: PUSH
14346: LD_VAR 0 19
14350: PUSH
14351: FOR_IN
14352: IFFALSE 14416
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14354: LD_VAR 0 14
14358: PPUSH
14359: LD_INT 63
14361: PPUSH
14362: LD_INT 71
14364: PPUSH
14365: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14369: LD_VAR 0 14
14373: PPUSH
14374: LD_INT 35
14376: PPUSH
14377: LD_INT 44
14379: PPUSH
14380: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14384: LD_VAR 0 14
14388: PPUSH
14389: LD_INT 23
14391: PPUSH
14392: LD_INT 18
14394: PPUSH
14395: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14399: LD_VAR 0 14
14403: PPUSH
14404: LD_INT 26
14406: PPUSH
14407: LD_INT 12
14409: PPUSH
14410: CALL_OW 174
// end ;
14414: GO 14351
14416: POP
14417: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14418: LD_INT 14
14420: PPUSH
14421: LD_INT 22
14423: PUSH
14424: LD_VAR 0 1
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PPUSH
14433: CALL_OW 70
14437: PUSH
14438: LD_INT 2
14440: GREATER
14441: IFFALSE 14334
// repeat wait ( 0 0$1 ) ;
14443: LD_INT 35
14445: PPUSH
14446: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14450: LD_ADDR_VAR 0 17
14454: PUSH
14455: LD_INT 22
14457: PUSH
14458: LD_VAR 0 1
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: LD_INT 24
14475: PUSH
14476: LD_INT 550
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 24
14489: PUSH
14490: LD_INT 250
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PPUSH
14506: CALL_OW 69
14510: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14511: LD_ADDR_VAR 0 19
14515: PUSH
14516: LD_INT 22
14518: PUSH
14519: LD_VAR 0 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 25
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 25
14543: PUSH
14544: LD_INT 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 8
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 25
14563: PUSH
14564: LD_INT 9
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 24
14580: PUSH
14581: LD_INT 1000
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PPUSH
14593: CALL_OW 69
14597: ST_TO_ADDR
// if medicCount > 0 then
14598: LD_VAR 0 7
14602: PUSH
14603: LD_INT 0
14605: GREATER
14606: IFFALSE 14680
// begin if damageUnit_list > 0 then
14608: LD_VAR 0 17
14612: PUSH
14613: LD_INT 0
14615: GREATER
14616: IFFALSE 14680
// begin for i in damageUnit_list do
14618: LD_ADDR_VAR 0 14
14622: PUSH
14623: LD_VAR 0 17
14627: PUSH
14628: FOR_IN
14629: IFFALSE 14678
// begin ComMoveToArea ( i , healArea ) ;
14631: LD_VAR 0 14
14635: PPUSH
14636: LD_VAR 0 10
14640: PPUSH
14641: CALL_OW 113
// for j in medic_list do
14645: LD_ADDR_VAR 0 15
14649: PUSH
14650: LD_VAR 0 18
14654: PUSH
14655: FOR_IN
14656: IFFALSE 14674
// AddComHeal ( j , i ) ;
14658: LD_VAR 0 15
14662: PPUSH
14663: LD_VAR 0 14
14667: PPUSH
14668: CALL_OW 188
14672: GO 14655
14674: POP
14675: POP
// end ;
14676: GO 14628
14678: POP
14679: POP
// end ; end ; for i in soldiersOK_list do
14680: LD_ADDR_VAR 0 14
14684: PUSH
14685: LD_VAR 0 19
14689: PUSH
14690: FOR_IN
14691: IFFALSE 14867
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14693: LD_ADDR_VAR 0 22
14697: PUSH
14698: LD_INT 22
14700: PUSH
14701: LD_VAR 0 11
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 69
14714: PPUSH
14715: LD_VAR 0 14
14719: PPUSH
14720: CALL_OW 74
14724: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14725: LD_ADDR_VAR 0 23
14729: PUSH
14730: LD_INT 22
14732: PUSH
14733: LD_VAR 0 11
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: LD_INT 59
14747: PUSH
14748: EMPTY
14749: LIST
14750: PUSH
14751: LD_INT 21
14753: PUSH
14754: LD_INT 1
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 21
14763: PUSH
14764: LD_INT 2
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: PPUSH
14784: CALL_OW 69
14788: PPUSH
14789: LD_VAR 0 14
14793: PPUSH
14794: CALL_OW 74
14798: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14799: LD_VAR 0 14
14803: PPUSH
14804: LD_VAR 0 22
14808: PPUSH
14809: CALL_OW 296
14813: PUSH
14814: LD_INT 6
14816: PLUS
14817: PUSH
14818: LD_VAR 0 14
14822: PPUSH
14823: LD_VAR 0 23
14827: PPUSH
14828: CALL_OW 296
14832: LESS
14833: IFFALSE 14851
// begin ComAttackUnit ( i , target1 ) ;
14835: LD_VAR 0 14
14839: PPUSH
14840: LD_VAR 0 22
14844: PPUSH
14845: CALL_OW 115
// end else
14849: GO 14865
// begin ComAttackUnit ( i , target2 ) ;
14851: LD_VAR 0 14
14855: PPUSH
14856: LD_VAR 0 23
14860: PPUSH
14861: CALL_OW 115
// end ; end ;
14865: GO 14690
14867: POP
14868: POP
// until soldiersOK_list = [ ] ;
14869: LD_VAR 0 19
14873: PUSH
14874: EMPTY
14875: EQUAL
14876: IFFALSE 14443
// end ; end ;
14878: LD_VAR 0 13
14882: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14883: LD_INT 0
14885: PPUSH
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
14891: PPUSH
14892: PPUSH
14893: PPUSH
14894: PPUSH
14895: PPUSH
// amChassisTab = [ ] ;
14896: LD_ADDR_VAR 0 19
14900: PUSH
14901: EMPTY
14902: ST_TO_ADDR
// arChassisTab = [ ] ;
14903: LD_ADDR_VAR 0 18
14907: PUSH
14908: EMPTY
14909: ST_TO_ADDR
// ruChassisTab = [ ] ;
14910: LD_ADDR_VAR 0 17
14914: PUSH
14915: EMPTY
14916: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14917: LD_INT 35
14919: PPUSH
14920: CALL_OW 67
// if nation = 1 then
14924: LD_VAR 0 5
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 15423
// begin uc_side = side ;
14934: LD_ADDR_OWVAR 20
14938: PUSH
14939: LD_VAR 0 2
14943: ST_TO_ADDR
// uc_nation = nation ;
14944: LD_ADDR_OWVAR 21
14948: PUSH
14949: LD_VAR 0 5
14953: ST_TO_ADDR
// vc_engine = vehengine ;
14954: LD_ADDR_OWVAR 39
14958: PUSH
14959: LD_VAR 0 6
14963: ST_TO_ADDR
// vc_control = vehcontrol ;
14964: LD_ADDR_OWVAR 38
14968: PUSH
14969: LD_VAR 0 7
14973: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14974: LD_ADDR_OWVAR 40
14978: PUSH
14979: LD_VAR 0 10
14983: PUSH
14984: LD_INT 1
14986: PPUSH
14987: LD_VAR 0 10
14991: PPUSH
14992: CALL_OW 12
14996: ARRAY
14997: ST_TO_ADDR
// for j = 1 to AMWeapon do
14998: LD_ADDR_VAR 0 14
15002: PUSH
15003: DOUBLE
15004: LD_INT 1
15006: DEC
15007: ST_TO_ADDR
15008: LD_VAR 0 10
15012: PUSH
15013: FOR_TO
15014: IFFALSE 15315
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15016: LD_VAR 0 10
15020: PUSH
15021: LD_VAR 0 14
15025: ARRAY
15026: PUSH
15027: LD_INT 2
15029: EQUAL
15030: PUSH
15031: LD_VAR 0 10
15035: PUSH
15036: LD_VAR 0 14
15040: ARRAY
15041: PUSH
15042: LD_INT 3
15044: EQUAL
15045: OR
15046: IFFALSE 15099
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15048: LD_ADDR_VAR 0 19
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: LD_INT 3
15061: PUSH
15062: LD_INT 4
15064: PUSH
15065: LD_INT 5
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15075: LD_ADDR_OWVAR 37
15079: PUSH
15080: LD_VAR 0 19
15084: PUSH
15085: LD_INT 1
15087: PPUSH
15088: LD_VAR 0 19
15092: PPUSH
15093: CALL_OW 12
15097: ARRAY
15098: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15099: LD_VAR 0 10
15103: PUSH
15104: LD_VAR 0 14
15108: ARRAY
15109: PUSH
15110: LD_INT 4
15112: EQUAL
15113: PUSH
15114: LD_VAR 0 10
15118: PUSH
15119: LD_VAR 0 14
15123: ARRAY
15124: PUSH
15125: LD_INT 5
15127: EQUAL
15128: OR
15129: PUSH
15130: LD_VAR 0 10
15134: PUSH
15135: LD_VAR 0 14
15139: ARRAY
15140: PUSH
15141: LD_INT 9
15143: EQUAL
15144: OR
15145: PUSH
15146: LD_VAR 0 10
15150: PUSH
15151: LD_VAR 0 14
15155: ARRAY
15156: PUSH
15157: LD_INT 11
15159: EQUAL
15160: OR
15161: PUSH
15162: LD_VAR 0 10
15166: PUSH
15167: LD_VAR 0 14
15171: ARRAY
15172: PUSH
15173: LD_INT 7
15175: EQUAL
15176: OR
15177: IFFALSE 15226
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15179: LD_ADDR_VAR 0 19
15183: PUSH
15184: LD_INT 2
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: LD_INT 4
15192: PUSH
15193: LD_INT 5
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15202: LD_ADDR_OWVAR 37
15206: PUSH
15207: LD_VAR 0 19
15211: PUSH
15212: LD_INT 1
15214: PPUSH
15215: LD_VAR 0 19
15219: PPUSH
15220: CALL_OW 12
15224: ARRAY
15225: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15226: LD_VAR 0 10
15230: PUSH
15231: LD_VAR 0 14
15235: ARRAY
15236: PUSH
15237: LD_INT 8
15239: EQUAL
15240: PUSH
15241: LD_VAR 0 10
15245: PUSH
15246: LD_VAR 0 14
15250: ARRAY
15251: PUSH
15252: LD_INT 6
15254: EQUAL
15255: OR
15256: PUSH
15257: LD_VAR 0 10
15261: PUSH
15262: LD_VAR 0 14
15266: ARRAY
15267: PUSH
15268: LD_INT 10
15270: EQUAL
15271: OR
15272: IFFALSE 15313
// begin amChassisTab = [ 4 , 5 ] ;
15274: LD_ADDR_VAR 0 19
15278: PUSH
15279: LD_INT 4
15281: PUSH
15282: LD_INT 5
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15289: LD_ADDR_OWVAR 37
15293: PUSH
15294: LD_VAR 0 19
15298: PUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_VAR 0 19
15306: PPUSH
15307: CALL_OW 12
15311: ARRAY
15312: ST_TO_ADDR
// end ; end ;
15313: GO 15013
15315: POP
15316: POP
// veh = CreateVehicle ;
15317: LD_ADDR_VAR 0 16
15321: PUSH
15322: CALL_OW 45
15326: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15327: LD_VAR 0 16
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: LD_INT 0
15339: PPUSH
15340: CALL_OW 49
// if vehControl = 1 then
15344: LD_VAR 0 7
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: IFFALSE 15409
// begin hc_gallery =  ;
15354: LD_ADDR_OWVAR 33
15358: PUSH
15359: LD_STRING 
15361: ST_TO_ADDR
// hc_name =  ;
15362: LD_ADDR_OWVAR 26
15366: PUSH
15367: LD_STRING 
15369: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15370: LD_INT 0
15372: PPUSH
15373: LD_INT 3
15375: PPUSH
15376: LD_VAR 0 4
15380: PPUSH
15381: CALL_OW 380
// un = CreateHuman ;
15385: LD_ADDR_VAR 0 15
15389: PUSH
15390: CALL_OW 44
15394: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15395: LD_VAR 0 15
15399: PPUSH
15400: LD_VAR 0 16
15404: PPUSH
15405: CALL_OW 52
// end ; i = i + 1 ;
15409: LD_ADDR_VAR 0 13
15413: PUSH
15414: LD_VAR 0 13
15418: PUSH
15419: LD_INT 1
15421: PLUS
15422: ST_TO_ADDR
// end ; if nation = 2 then
15423: LD_VAR 0 5
15427: PUSH
15428: LD_INT 2
15430: EQUAL
15431: IFFALSE 15855
// begin uc_side = side ;
15433: LD_ADDR_OWVAR 20
15437: PUSH
15438: LD_VAR 0 2
15442: ST_TO_ADDR
// uc_nation = nation ;
15443: LD_ADDR_OWVAR 21
15447: PUSH
15448: LD_VAR 0 5
15452: ST_TO_ADDR
// vc_engine = vehengine ;
15453: LD_ADDR_OWVAR 39
15457: PUSH
15458: LD_VAR 0 6
15462: ST_TO_ADDR
// vc_control = vehcontrol ;
15463: LD_ADDR_OWVAR 38
15467: PUSH
15468: LD_VAR 0 7
15472: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15473: LD_ADDR_OWVAR 40
15477: PUSH
15478: LD_VAR 0 9
15482: PUSH
15483: LD_INT 1
15485: PPUSH
15486: LD_VAR 0 9
15490: PPUSH
15491: CALL_OW 12
15495: ARRAY
15496: ST_TO_ADDR
// for j = 1 to ARWeapons do
15497: LD_ADDR_VAR 0 14
15501: PUSH
15502: DOUBLE
15503: LD_INT 1
15505: DEC
15506: ST_TO_ADDR
15507: LD_VAR 0 9
15511: PUSH
15512: FOR_TO
15513: IFFALSE 15747
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15515: LD_VAR 0 9
15519: PUSH
15520: LD_VAR 0 14
15524: ARRAY
15525: PUSH
15526: LD_INT 24
15528: EQUAL
15529: PUSH
15530: LD_VAR 0 9
15534: PUSH
15535: LD_VAR 0 14
15539: ARRAY
15540: PUSH
15541: LD_INT 22
15543: EQUAL
15544: OR
15545: PUSH
15546: LD_VAR 0 9
15550: PUSH
15551: LD_VAR 0 14
15555: ARRAY
15556: PUSH
15557: LD_INT 23
15559: EQUAL
15560: OR
15561: PUSH
15562: LD_VAR 0 9
15566: PUSH
15567: LD_VAR 0 14
15571: ARRAY
15572: PUSH
15573: LD_INT 30
15575: EQUAL
15576: OR
15577: IFFALSE 15626
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15579: LD_ADDR_VAR 0 18
15583: PUSH
15584: LD_INT 11
15586: PUSH
15587: LD_INT 12
15589: PUSH
15590: LD_INT 13
15592: PUSH
15593: LD_INT 14
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15602: LD_ADDR_OWVAR 37
15606: PUSH
15607: LD_VAR 0 18
15611: PUSH
15612: LD_INT 1
15614: PPUSH
15615: LD_VAR 0 18
15619: PPUSH
15620: CALL_OW 12
15624: ARRAY
15625: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15626: LD_VAR 0 9
15630: PUSH
15631: LD_VAR 0 14
15635: ARRAY
15636: PUSH
15637: LD_INT 29
15639: EQUAL
15640: PUSH
15641: LD_VAR 0 9
15645: PUSH
15646: LD_VAR 0 14
15650: ARRAY
15651: PUSH
15652: LD_INT 28
15654: EQUAL
15655: OR
15656: PUSH
15657: LD_VAR 0 9
15661: PUSH
15662: LD_VAR 0 14
15666: ARRAY
15667: PUSH
15668: LD_INT 27
15670: EQUAL
15671: OR
15672: PUSH
15673: LD_VAR 0 9
15677: PUSH
15678: LD_VAR 0 14
15682: ARRAY
15683: PUSH
15684: LD_INT 26
15686: EQUAL
15687: OR
15688: PUSH
15689: LD_VAR 0 9
15693: PUSH
15694: LD_VAR 0 14
15698: ARRAY
15699: PUSH
15700: LD_INT 25
15702: EQUAL
15703: OR
15704: IFFALSE 15745
// begin arChassisTab = [ 13 , 14 ] ;
15706: LD_ADDR_VAR 0 18
15710: PUSH
15711: LD_INT 13
15713: PUSH
15714: LD_INT 14
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15721: LD_ADDR_OWVAR 37
15725: PUSH
15726: LD_VAR 0 18
15730: PUSH
15731: LD_INT 1
15733: PPUSH
15734: LD_VAR 0 18
15738: PPUSH
15739: CALL_OW 12
15743: ARRAY
15744: ST_TO_ADDR
// end ; end ;
15745: GO 15512
15747: POP
15748: POP
// veh = CreateVehicle ;
15749: LD_ADDR_VAR 0 16
15753: PUSH
15754: CALL_OW 45
15758: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15759: LD_VAR 0 16
15763: PPUSH
15764: LD_VAR 0 1
15768: PPUSH
15769: LD_INT 0
15771: PPUSH
15772: CALL_OW 49
// if vehcontrol = 1 then
15776: LD_VAR 0 7
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 15841
// begin hc_gallery =  ;
15786: LD_ADDR_OWVAR 33
15790: PUSH
15791: LD_STRING 
15793: ST_TO_ADDR
// hc_name =  ;
15794: LD_ADDR_OWVAR 26
15798: PUSH
15799: LD_STRING 
15801: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15802: LD_INT 0
15804: PPUSH
15805: LD_INT 3
15807: PPUSH
15808: LD_VAR 0 4
15812: PPUSH
15813: CALL_OW 380
// un = CreateHuman ;
15817: LD_ADDR_VAR 0 15
15821: PUSH
15822: CALL_OW 44
15826: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15827: LD_VAR 0 15
15831: PPUSH
15832: LD_VAR 0 16
15836: PPUSH
15837: CALL_OW 52
// end ; i = i + 1 ;
15841: LD_ADDR_VAR 0 13
15845: PUSH
15846: LD_VAR 0 13
15850: PUSH
15851: LD_INT 1
15853: PLUS
15854: ST_TO_ADDR
// end ; if nation = 3 then
15855: LD_VAR 0 5
15859: PUSH
15860: LD_INT 3
15862: EQUAL
15863: IFFALSE 16255
// begin uc_side = side ;
15865: LD_ADDR_OWVAR 20
15869: PUSH
15870: LD_VAR 0 2
15874: ST_TO_ADDR
// uc_nation = nation ;
15875: LD_ADDR_OWVAR 21
15879: PUSH
15880: LD_VAR 0 5
15884: ST_TO_ADDR
// vc_engine = vehengine ;
15885: LD_ADDR_OWVAR 39
15889: PUSH
15890: LD_VAR 0 6
15894: ST_TO_ADDR
// vc_control = vehcontrol ;
15895: LD_ADDR_OWVAR 38
15899: PUSH
15900: LD_VAR 0 7
15904: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15905: LD_ADDR_OWVAR 40
15909: PUSH
15910: LD_VAR 0 8
15914: PUSH
15915: LD_INT 1
15917: PPUSH
15918: LD_VAR 0 8
15922: PPUSH
15923: CALL_OW 12
15927: ARRAY
15928: ST_TO_ADDR
// for j = 1 to RuWeapons do
15929: LD_ADDR_VAR 0 14
15933: PUSH
15934: DOUBLE
15935: LD_INT 1
15937: DEC
15938: ST_TO_ADDR
15939: LD_VAR 0 8
15943: PUSH
15944: FOR_TO
15945: IFFALSE 16147
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15947: LD_VAR 0 8
15951: PUSH
15952: LD_VAR 0 14
15956: ARRAY
15957: PUSH
15958: LD_INT 42
15960: EQUAL
15961: PUSH
15962: LD_VAR 0 8
15966: PUSH
15967: LD_VAR 0 14
15971: ARRAY
15972: PUSH
15973: LD_INT 43
15975: EQUAL
15976: OR
15977: PUSH
15978: LD_VAR 0 8
15982: PUSH
15983: LD_VAR 0 14
15987: ARRAY
15988: PUSH
15989: LD_INT 44
15991: EQUAL
15992: OR
15993: PUSH
15994: LD_VAR 0 8
15998: PUSH
15999: LD_VAR 0 14
16003: ARRAY
16004: PUSH
16005: LD_INT 45
16007: EQUAL
16008: OR
16009: PUSH
16010: LD_VAR 0 8
16014: PUSH
16015: LD_VAR 0 14
16019: ARRAY
16020: PUSH
16021: LD_INT 49
16023: EQUAL
16024: OR
16025: IFFALSE 16074
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16027: LD_ADDR_VAR 0 17
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_INT 23
16040: PUSH
16041: LD_INT 24
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16050: LD_ADDR_OWVAR 37
16054: PUSH
16055: LD_VAR 0 17
16059: PUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_VAR 0 17
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16074: LD_VAR 0 8
16078: PUSH
16079: LD_VAR 0 14
16083: ARRAY
16084: PUSH
16085: LD_INT 46
16087: EQUAL
16088: PUSH
16089: LD_VAR 0 8
16093: PUSH
16094: LD_VAR 0 14
16098: ARRAY
16099: PUSH
16100: LD_INT 47
16102: EQUAL
16103: OR
16104: IFFALSE 16145
// begin ruChassisTab = [ 23 , 24 ] ;
16106: LD_ADDR_VAR 0 17
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 24
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16121: LD_ADDR_OWVAR 37
16125: PUSH
16126: LD_VAR 0 17
16130: PUSH
16131: LD_INT 1
16133: PPUSH
16134: LD_VAR 0 17
16138: PPUSH
16139: CALL_OW 12
16143: ARRAY
16144: ST_TO_ADDR
// end ; end ;
16145: GO 15944
16147: POP
16148: POP
// veh = CreateVehicle ;
16149: LD_ADDR_VAR 0 16
16153: PUSH
16154: CALL_OW 45
16158: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16159: LD_VAR 0 16
16163: PPUSH
16164: LD_VAR 0 1
16168: PPUSH
16169: LD_INT 0
16171: PPUSH
16172: CALL_OW 49
// if vehcontrol = 1 then
16176: LD_VAR 0 7
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: IFFALSE 16241
// begin hc_gallery =  ;
16186: LD_ADDR_OWVAR 33
16190: PUSH
16191: LD_STRING 
16193: ST_TO_ADDR
// hc_name =  ;
16194: LD_ADDR_OWVAR 26
16198: PUSH
16199: LD_STRING 
16201: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16202: LD_INT 0
16204: PPUSH
16205: LD_INT 3
16207: PPUSH
16208: LD_VAR 0 4
16212: PPUSH
16213: CALL_OW 380
// un = CreateHuman ;
16217: LD_ADDR_VAR 0 15
16221: PUSH
16222: CALL_OW 44
16226: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16227: LD_VAR 0 15
16231: PPUSH
16232: LD_VAR 0 16
16236: PPUSH
16237: CALL_OW 52
// end ; i = i + 1 ;
16241: LD_ADDR_VAR 0 13
16245: PUSH
16246: LD_VAR 0 13
16250: PUSH
16251: LD_INT 1
16253: PLUS
16254: ST_TO_ADDR
// end ; until i = vehCount ;
16255: LD_VAR 0 13
16259: PUSH
16260: LD_VAR 0 3
16264: EQUAL
16265: IFFALSE 14917
// repeat wait ( 0 0$1 ) ;
16267: LD_INT 35
16269: PPUSH
16270: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16274: LD_ADDR_VAR 0 20
16278: PUSH
16279: LD_INT 22
16281: PUSH
16282: LD_VAR 0 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 21
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 250
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// if vehicleOK_list > 0 then
16321: LD_VAR 0 20
16325: PUSH
16326: LD_INT 0
16328: GREATER
16329: IFFALSE 16520
// begin for i in vehicleOK_list do
16331: LD_ADDR_VAR 0 13
16335: PUSH
16336: LD_VAR 0 20
16340: PUSH
16341: FOR_IN
16342: IFFALSE 16518
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16344: LD_ADDR_VAR 0 21
16348: PUSH
16349: LD_INT 22
16351: PUSH
16352: LD_VAR 0 11
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PPUSH
16361: CALL_OW 69
16365: PPUSH
16366: LD_VAR 0 13
16370: PPUSH
16371: CALL_OW 74
16375: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16376: LD_ADDR_VAR 0 22
16380: PUSH
16381: LD_INT 22
16383: PUSH
16384: LD_VAR 0 11
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 2
16395: PUSH
16396: LD_INT 59
16398: PUSH
16399: EMPTY
16400: LIST
16401: PUSH
16402: LD_INT 21
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 21
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: PPUSH
16435: CALL_OW 69
16439: PPUSH
16440: LD_VAR 0 13
16444: PPUSH
16445: CALL_OW 74
16449: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16450: LD_VAR 0 13
16454: PPUSH
16455: LD_VAR 0 21
16459: PPUSH
16460: CALL_OW 296
16464: PUSH
16465: LD_INT 6
16467: PLUS
16468: PUSH
16469: LD_VAR 0 13
16473: PPUSH
16474: LD_VAR 0 22
16478: PPUSH
16479: CALL_OW 296
16483: LESS
16484: IFFALSE 16502
// begin ComAttackUnit ( i , target1 ) ;
16486: LD_VAR 0 13
16490: PPUSH
16491: LD_VAR 0 21
16495: PPUSH
16496: CALL_OW 115
// end else
16500: GO 16516
// begin ComAttackUnit ( i , target2 ) ;
16502: LD_VAR 0 13
16506: PPUSH
16507: LD_VAR 0 22
16511: PPUSH
16512: CALL_OW 115
// end ; end ;
16516: GO 16341
16518: POP
16519: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16520: LD_INT 22
16522: PUSH
16523: LD_VAR 0 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 2
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 24
16544: PUSH
16545: LD_INT 250
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: PUSH
16562: LD_INT 0
16564: EQUAL
16565: IFFALSE 16267
// end ;
16567: LD_VAR 0 12
16571: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
16576: PPUSH
16577: PPUSH
16578: PPUSH
16579: PPUSH
16580: PPUSH
16581: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16582: LD_ADDR_VAR 0 7
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_VAR 0 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: LD_INT 24
16607: PUSH
16608: LD_INT 550
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 24
16621: PUSH
16622: LD_INT 250
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16643: LD_ADDR_VAR 0 8
16647: PUSH
16648: LD_INT 22
16650: PUSH
16651: LD_VAR 0 1
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 25
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 25
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 25
16685: PUSH
16686: LD_INT 8
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 25
16695: PUSH
16696: LD_INT 9
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 24
16712: PUSH
16713: LD_INT 1000
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 69
16729: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16730: LD_ADDR_VAR 0 9
16734: PUSH
16735: LD_INT 22
16737: PUSH
16738: LD_VAR 0 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 25
16749: PUSH
16750: LD_INT 4
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PPUSH
16761: CALL_OW 69
16765: ST_TO_ADDR
// if medicCount > 0 then
16766: LD_VAR 0 9
16770: PUSH
16771: LD_INT 0
16773: GREATER
16774: IFFALSE 16848
// begin if damageUnit_list > 0 then
16776: LD_VAR 0 7
16780: PUSH
16781: LD_INT 0
16783: GREATER
16784: IFFALSE 16848
// begin for i in damageUnit_list do
16786: LD_ADDR_VAR 0 5
16790: PUSH
16791: LD_VAR 0 7
16795: PUSH
16796: FOR_IN
16797: IFFALSE 16846
// begin ComMoveToArea ( i , healArea ) ;
16799: LD_VAR 0 5
16803: PPUSH
16804: LD_VAR 0 2
16808: PPUSH
16809: CALL_OW 113
// for j in medicCount do
16813: LD_ADDR_VAR 0 6
16817: PUSH
16818: LD_VAR 0 9
16822: PUSH
16823: FOR_IN
16824: IFFALSE 16842
// AddComHeal ( j , i ) ;
16826: LD_VAR 0 6
16830: PPUSH
16831: LD_VAR 0 5
16835: PPUSH
16836: CALL_OW 188
16840: GO 16823
16842: POP
16843: POP
// end ;
16844: GO 16796
16846: POP
16847: POP
// end ; end ; if soldiersOK_list > 0 then
16848: LD_VAR 0 8
16852: PUSH
16853: LD_INT 0
16855: GREATER
16856: IFFALSE 17047
// begin for i in soldiersOK_list do
16858: LD_ADDR_VAR 0 5
16862: PUSH
16863: LD_VAR 0 8
16867: PUSH
16868: FOR_IN
16869: IFFALSE 17045
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16871: LD_ADDR_VAR 0 10
16875: PUSH
16876: LD_INT 22
16878: PUSH
16879: LD_VAR 0 3
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PPUSH
16888: CALL_OW 69
16892: PPUSH
16893: LD_VAR 0 5
16897: PPUSH
16898: CALL_OW 74
16902: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16903: LD_ADDR_VAR 0 11
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_VAR 0 3
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: LD_INT 59
16925: PUSH
16926: EMPTY
16927: LIST
16928: PUSH
16929: LD_INT 21
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 21
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: EMPTY
16960: LIST
16961: PPUSH
16962: CALL_OW 69
16966: PPUSH
16967: LD_VAR 0 5
16971: PPUSH
16972: CALL_OW 74
16976: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16977: LD_VAR 0 5
16981: PPUSH
16982: LD_VAR 0 10
16986: PPUSH
16987: CALL_OW 296
16991: PUSH
16992: LD_INT 8
16994: PLUS
16995: PUSH
16996: LD_VAR 0 5
17000: PPUSH
17001: LD_VAR 0 11
17005: PPUSH
17006: CALL_OW 296
17010: LESS
17011: IFFALSE 17029
// begin ComAttackUnit ( i , target1 ) ;
17013: LD_VAR 0 5
17017: PPUSH
17018: LD_VAR 0 10
17022: PPUSH
17023: CALL_OW 115
// end else
17027: GO 17043
// begin ComAttackUnit ( i , target2 ) ;
17029: LD_VAR 0 5
17033: PPUSH
17034: LD_VAR 0 11
17038: PPUSH
17039: CALL_OW 115
// end ; end ;
17043: GO 16868
17045: POP
17046: POP
// end ; end ;
17047: LD_VAR 0 4
17051: RET
// export function GetDriverVehicle ( unit ) ; begin
17052: LD_INT 0
17054: PPUSH
// if not unit then
17055: LD_VAR 0 1
17059: NOT
17060: IFFALSE 17064
// exit ;
17062: GO 17102
// result := IsInUnit ( unit ) ;
17064: LD_ADDR_VAR 0 2
17068: PUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 310
17078: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17079: LD_VAR 0 2
17083: PPUSH
17084: CALL_OW 247
17088: PUSH
17089: LD_INT 2
17091: NONEQUAL
17092: IFFALSE 17102
// result := 0 ;
17094: LD_ADDR_VAR 0 2
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// end ;
17102: LD_VAR 0 2
17106: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17107: LD_INT 0
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
// result := false ;
17118: LD_ADDR_VAR 0 7
17122: PUSH
17123: LD_INT 0
17125: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17126: LD_VAR 0 1
17130: NOT
17131: PUSH
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 266
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: IN
17152: NOT
17153: OR
17154: PUSH
17155: LD_VAR 0 2
17159: NOT
17160: OR
17161: PUSH
17162: LD_VAR 0 5
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: LD_INT 2
17175: PUSH
17176: LD_INT 3
17178: PUSH
17179: LD_INT 4
17181: PUSH
17182: LD_INT 5
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: IN
17193: NOT
17194: OR
17195: PUSH
17196: LD_VAR 0 3
17200: PPUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: CALL_OW 488
17210: NOT
17211: OR
17212: IFFALSE 17216
// exit ;
17214: GO 17897
// pom := GetBase ( bdepot ) ;
17216: LD_ADDR_VAR 0 10
17220: PUSH
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL_OW 274
17230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17231: LD_ADDR_VAR 0 11
17235: PUSH
17236: LD_VAR 0 2
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 248
17250: PPUSH
17251: CALL_OW 450
17255: ST_TO_ADDR
// if check_cost then
17256: LD_VAR 0 6
17260: IFFALSE 17337
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17262: LD_VAR 0 10
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: CALL_OW 275
17274: PUSH
17275: LD_VAR 0 11
17279: PUSH
17280: LD_INT 1
17282: ARRAY
17283: GREATEREQUAL
17284: PUSH
17285: LD_VAR 0 10
17289: PPUSH
17290: LD_INT 2
17292: PPUSH
17293: CALL_OW 275
17297: PUSH
17298: LD_VAR 0 11
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: GREATEREQUAL
17307: AND
17308: PUSH
17309: LD_VAR 0 10
17313: PPUSH
17314: LD_INT 3
17316: PPUSH
17317: CALL_OW 275
17321: PUSH
17322: LD_VAR 0 11
17326: PUSH
17327: LD_INT 3
17329: ARRAY
17330: GREATEREQUAL
17331: AND
17332: NOT
17333: IFFALSE 17337
// exit ;
17335: GO 17897
// if GetBType ( bdepot ) = b_depot then
17337: LD_VAR 0 1
17341: PPUSH
17342: CALL_OW 266
17346: PUSH
17347: LD_INT 0
17349: EQUAL
17350: IFFALSE 17362
// dist := 28 else
17352: LD_ADDR_VAR 0 14
17356: PUSH
17357: LD_INT 28
17359: ST_TO_ADDR
17360: GO 17370
// dist := 36 ;
17362: LD_ADDR_VAR 0 14
17366: PUSH
17367: LD_INT 36
17369: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17370: LD_VAR 0 1
17374: PPUSH
17375: LD_VAR 0 3
17379: PPUSH
17380: LD_VAR 0 4
17384: PPUSH
17385: CALL_OW 297
17389: PUSH
17390: LD_VAR 0 14
17394: GREATER
17395: IFFALSE 17399
// exit ;
17397: GO 17897
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17399: LD_ADDR_VAR 0 12
17403: PUSH
17404: LD_VAR 0 2
17408: PPUSH
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_VAR 0 4
17418: PPUSH
17419: LD_VAR 0 5
17423: PPUSH
17424: LD_VAR 0 1
17428: PPUSH
17429: CALL_OW 248
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: CALL 58261 0 6
17441: ST_TO_ADDR
// if not hexes then
17442: LD_VAR 0 12
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17897
// hex := GetHexInfo ( x , y ) ;
17451: LD_ADDR_VAR 0 15
17455: PUSH
17456: LD_VAR 0 3
17460: PPUSH
17461: LD_VAR 0 4
17465: PPUSH
17466: CALL_OW 546
17470: ST_TO_ADDR
// if hex [ 1 ] then
17471: LD_VAR 0 15
17475: PUSH
17476: LD_INT 1
17478: ARRAY
17479: IFFALSE 17483
// exit ;
17481: GO 17897
// height := hex [ 2 ] ;
17483: LD_ADDR_VAR 0 13
17487: PUSH
17488: LD_VAR 0 15
17492: PUSH
17493: LD_INT 2
17495: ARRAY
17496: ST_TO_ADDR
// for i = 1 to hexes do
17497: LD_ADDR_VAR 0 8
17501: PUSH
17502: DOUBLE
17503: LD_INT 1
17505: DEC
17506: ST_TO_ADDR
17507: LD_VAR 0 12
17511: PUSH
17512: FOR_TO
17513: IFFALSE 17841
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17515: LD_VAR 0 12
17519: PUSH
17520: LD_VAR 0 8
17524: ARRAY
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: LD_VAR 0 12
17534: PUSH
17535: LD_VAR 0 8
17539: ARRAY
17540: PUSH
17541: LD_INT 2
17543: ARRAY
17544: PPUSH
17545: CALL_OW 488
17549: NOT
17550: IFFALSE 17554
// continue ;
17552: GO 17512
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17554: LD_ADDR_VAR 0 9
17558: PUSH
17559: LD_VAR 0 12
17563: PUSH
17564: LD_VAR 0 8
17568: ARRAY
17569: PUSH
17570: LD_INT 1
17572: ARRAY
17573: PPUSH
17574: LD_VAR 0 12
17578: PUSH
17579: LD_VAR 0 8
17583: ARRAY
17584: PUSH
17585: LD_INT 2
17587: ARRAY
17588: PPUSH
17589: CALL_OW 546
17593: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17594: LD_VAR 0 9
17598: PUSH
17599: LD_INT 1
17601: ARRAY
17602: PUSH
17603: LD_VAR 0 9
17607: PUSH
17608: LD_INT 2
17610: ARRAY
17611: PUSH
17612: LD_VAR 0 13
17616: PUSH
17617: LD_INT 2
17619: PLUS
17620: GREATER
17621: OR
17622: PUSH
17623: LD_VAR 0 9
17627: PUSH
17628: LD_INT 2
17630: ARRAY
17631: PUSH
17632: LD_VAR 0 13
17636: PUSH
17637: LD_INT 2
17639: MINUS
17640: LESS
17641: OR
17642: PUSH
17643: LD_VAR 0 9
17647: PUSH
17648: LD_INT 3
17650: ARRAY
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: LD_INT 8
17657: PUSH
17658: LD_INT 9
17660: PUSH
17661: LD_INT 10
17663: PUSH
17664: LD_INT 11
17666: PUSH
17667: LD_INT 12
17669: PUSH
17670: LD_INT 13
17672: PUSH
17673: LD_INT 16
17675: PUSH
17676: LD_INT 17
17678: PUSH
17679: LD_INT 18
17681: PUSH
17682: LD_INT 19
17684: PUSH
17685: LD_INT 20
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: IN
17706: NOT
17707: OR
17708: PUSH
17709: LD_VAR 0 9
17713: PUSH
17714: LD_INT 5
17716: ARRAY
17717: NOT
17718: OR
17719: PUSH
17720: LD_VAR 0 9
17724: PUSH
17725: LD_INT 6
17727: ARRAY
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: LD_INT 7
17737: PUSH
17738: LD_INT 9
17740: PUSH
17741: LD_INT 10
17743: PUSH
17744: LD_INT 11
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: IN
17755: NOT
17756: OR
17757: PUSH
17758: LD_VAR 0 12
17762: PUSH
17763: LD_VAR 0 8
17767: ARRAY
17768: PUSH
17769: LD_INT 1
17771: ARRAY
17772: PPUSH
17773: LD_VAR 0 12
17777: PUSH
17778: LD_VAR 0 8
17782: ARRAY
17783: PUSH
17784: LD_INT 2
17786: ARRAY
17787: PPUSH
17788: CALL_OW 428
17792: PUSH
17793: LD_INT 0
17795: GREATER
17796: OR
17797: PUSH
17798: LD_VAR 0 12
17802: PUSH
17803: LD_VAR 0 8
17807: ARRAY
17808: PUSH
17809: LD_INT 1
17811: ARRAY
17812: PPUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 2
17826: ARRAY
17827: PPUSH
17828: CALL_OW 351
17832: OR
17833: IFFALSE 17839
// exit ;
17835: POP
17836: POP
17837: GO 17897
// end ;
17839: GO 17512
17841: POP
17842: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17843: LD_VAR 0 2
17847: PUSH
17848: LD_INT 29
17850: PUSH
17851: LD_INT 30
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: IN
17858: PUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_VAR 0 4
17868: PPUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 255
17878: PPUSH
17879: CALL_OW 440
17883: NOT
17884: AND
17885: IFFALSE 17889
// exit ;
17887: GO 17897
// result := true ;
17889: LD_ADDR_VAR 0 7
17893: PUSH
17894: LD_INT 1
17896: ST_TO_ADDR
// end ; end_of_file
17897: LD_VAR 0 7
17901: RET
// every 1 do var i ;
17902: GO 17904
17904: DISABLE
17905: LD_INT 0
17907: PPUSH
// begin Video ( true ) ;
17908: LD_INT 1
17910: PPUSH
17911: CALL 81029 0 1
// CenterOnXY ( 53 , 40 ) ;
17915: LD_INT 53
17917: PPUSH
17918: LD_INT 40
17920: PPUSH
17921: CALL_OW 84
// wait ( 0 0$5 ) ;
17925: LD_INT 175
17927: PPUSH
17928: CALL_OW 67
// if gammaCommander = 1 then
17932: LD_EXP 12
17936: PUSH
17937: LD_INT 1
17939: EQUAL
17940: IFFALSE 17954
// Say ( Donaldson , D1-Don-1 ) ;
17942: LD_EXP 3
17946: PPUSH
17947: LD_STRING D1-Don-1
17949: PPUSH
17950: CALL_OW 88
// if gammaCommander = 2 then
17954: LD_EXP 12
17958: PUSH
17959: LD_INT 2
17961: EQUAL
17962: IFFALSE 17976
// Say ( Brown , D1-Brown-1 ) ;
17964: LD_EXP 2
17968: PPUSH
17969: LD_STRING D1-Brown-1
17971: PPUSH
17972: CALL_OW 88
// if gammaCommander = 3 then
17976: LD_EXP 12
17980: PUSH
17981: LD_INT 3
17983: EQUAL
17984: IFFALSE 17998
// Say ( Houten , D1-VanH-1 ) ;
17986: LD_EXP 13
17990: PPUSH
17991: LD_STRING D1-VanH-1
17993: PPUSH
17994: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17998: LD_EXP 22
18002: PPUSH
18003: LD_STRING D1-Har-1
18005: PPUSH
18006: CALL_OW 94
// if gammaCommander = 1 then
18010: LD_EXP 12
18014: PUSH
18015: LD_INT 1
18017: EQUAL
18018: IFFALSE 18032
// Say ( Donaldson , D1-Don-2 ) ;
18020: LD_EXP 3
18024: PPUSH
18025: LD_STRING D1-Don-2
18027: PPUSH
18028: CALL_OW 88
// if gammaCommander = 2 then
18032: LD_EXP 12
18036: PUSH
18037: LD_INT 2
18039: EQUAL
18040: IFFALSE 18054
// Say ( Brown , D1-Brown-2 ) ;
18042: LD_EXP 2
18046: PPUSH
18047: LD_STRING D1-Brown-2
18049: PPUSH
18050: CALL_OW 88
// if gammaCommander = 3 then
18054: LD_EXP 12
18058: PUSH
18059: LD_INT 3
18061: EQUAL
18062: IFFALSE 18076
// Say ( Houten , D1-VanH-2 ) ;
18064: LD_EXP 13
18068: PPUSH
18069: LD_STRING D1-VanH-2
18071: PPUSH
18072: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18076: LD_EXP 22
18080: PPUSH
18081: LD_STRING D1-Har-2
18083: PPUSH
18084: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18088: LD_INT 22
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 33
18100: PUSH
18101: LD_INT 2
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 61
18110: PUSH
18111: EMPTY
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 69
18123: IFFALSE 18188
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18125: LD_ADDR_VAR 0 1
18129: PUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 33
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 61
18152: PUSH
18153: EMPTY
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18186
// ComAgressiveMove ( i , 70 , 41 ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_INT 70
18176: PPUSH
18177: LD_INT 41
18179: PPUSH
18180: CALL_OW 114
18184: GO 18166
18186: POP
18187: POP
// repeat wait ( 0 0$1 ) ;
18188: LD_INT 35
18190: PPUSH
18191: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18195: LD_ADDR_VAR 0 1
18199: PUSH
18200: LD_INT 22
18202: PUSH
18203: LD_INT 6
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: PPUSH
18213: CALL_OW 69
18217: PUSH
18218: FOR_IN
18219: IFFALSE 18238
// ComAgressiveMove ( i , 54 , 20 ) ;
18221: LD_VAR 0 1
18225: PPUSH
18226: LD_INT 54
18228: PPUSH
18229: LD_INT 20
18231: PPUSH
18232: CALL_OW 114
18236: GO 18218
18238: POP
18239: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18240: LD_ADDR_VAR 0 1
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 25
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 3
18267: PUSH
18268: LD_INT 54
18270: PUSH
18271: EMPTY
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: PPUSH
18283: CALL_OW 69
18287: PUSH
18288: FOR_IN
18289: IFFALSE 18323
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18291: LD_VAR 0 1
18295: PPUSH
18296: LD_INT 70
18298: PPUSH
18299: LD_INT 41
18301: PPUSH
18302: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18306: LD_VAR 0 1
18310: PPUSH
18311: LD_INT 46
18313: PPUSH
18314: LD_INT 39
18316: PPUSH
18317: CALL_OW 174
// end ;
18321: GO 18288
18323: POP
18324: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: LD_INT 22
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 21
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: LD_INT 24
18355: PUSH
18356: LD_INT 500
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: PPUSH
18372: CALL_OW 69
18376: PUSH
18377: FOR_IN
18378: IFFALSE 18411
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18380: LD_VAR 0 1
18384: PPUSH
18385: LD_EXP 37
18389: PPUSH
18390: CALL_OW 250
18394: PPUSH
18395: LD_EXP 37
18399: PPUSH
18400: CALL_OW 251
18404: PPUSH
18405: CALL_OW 111
18409: GO 18377
18411: POP
18412: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18413: LD_INT 22
18415: PUSH
18416: LD_INT 6
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 21
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 24
18435: PUSH
18436: LD_INT 250
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 69
18452: PUSH
18453: LD_INT 5
18455: LESS
18456: IFFALSE 18188
// Video ( false ) ;
18458: LD_INT 0
18460: PPUSH
18461: CALL 81029 0 1
// ChangeMissionObjectives ( M1 ) ;
18465: LD_STRING M1
18467: PPUSH
18468: CALL_OW 337
// wait ( 0 0$2 ) ;
18472: LD_INT 70
18474: PPUSH
18475: CALL_OW 67
// SaveForQuickRestart ;
18479: CALL_OW 22
// startCutscene = 0 ;
18483: LD_ADDR_EXP 38
18487: PUSH
18488: LD_INT 0
18490: ST_TO_ADDR
// end ;
18491: PPOPN 1
18493: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18494: LD_EXP 38
18498: IFFALSE 18589
18500: GO 18502
18502: DISABLE
18503: LD_INT 0
18505: PPUSH
18506: PPUSH
// begin enable ;
18507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18508: LD_ADDR_VAR 0 1
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 21
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 3
18535: PUSH
18536: LD_INT 24
18538: PUSH
18539: LD_INT 700
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: ST_TO_ADDR
// for i in tmp do
18560: LD_ADDR_VAR 0 2
18564: PUSH
18565: LD_VAR 0 1
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18587
// SetLives ( i , 700 ) ;
18573: LD_VAR 0 2
18577: PPUSH
18578: LD_INT 700
18580: PPUSH
18581: CALL_OW 234
18585: GO 18570
18587: POP
18588: POP
// end ;
18589: PPOPN 2
18591: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18592: LD_INT 22
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 101
18604: PUSH
18605: LD_INT 6
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PPUSH
18616: CALL_OW 69
18620: PUSH
18621: LD_INT 0
18623: EQUAL
18624: PUSH
18625: LD_OWVAR 1
18629: PUSH
18630: LD_INT 6300
18632: GREATER
18633: OR
18634: IFFALSE 18883
18636: GO 18638
18638: DISABLE
// begin PrepareSupportFromDelta ;
18639: CALL 3900 0 0
// firstAttack = 1 ;
18643: LD_ADDR_EXP 33
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18651: LD_EXP 8
18655: PPUSH
18656: CALL_OW 302
18660: IFFALSE 18676
// Say ( Gladstone , D2-Glad-1 ) else
18662: LD_EXP 8
18666: PPUSH
18667: LD_STRING D2-Glad-1
18669: PPUSH
18670: CALL_OW 88
18674: GO 18784
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18676: LD_INT 4
18678: PPUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 21
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 25
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 25
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 25
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 25
18734: PUSH
18735: LD_INT 4
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 70
18758: PUSH
18759: LD_EXP 15
18763: PUSH
18764: LD_EXP 14
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: DIFF
18773: PPUSH
18774: LD_STRING D2-Sol1-1
18776: PPUSH
18777: LD_STRING D2-FSol1-1
18779: PPUSH
18780: CALL 7322 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18784: LD_EXP 3
18788: PPUSH
18789: CALL_OW 302
18793: PUSH
18794: LD_EXP 12
18798: PUSH
18799: LD_INT 1
18801: EQUAL
18802: AND
18803: IFFALSE 18817
// Say ( Donaldson , D2-Don-1 ) ;
18805: LD_EXP 3
18809: PPUSH
18810: LD_STRING D2-Don-1
18812: PPUSH
18813: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18817: LD_EXP 2
18821: PPUSH
18822: CALL_OW 302
18826: PUSH
18827: LD_EXP 12
18831: PUSH
18832: LD_INT 2
18834: EQUAL
18835: AND
18836: IFFALSE 18850
// Say ( Brown , D2-Brown-1 ) ;
18838: LD_EXP 2
18842: PPUSH
18843: LD_STRING D2-Brown-1
18845: PPUSH
18846: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18850: LD_EXP 13
18854: PPUSH
18855: CALL_OW 302
18859: PUSH
18860: LD_EXP 12
18864: PUSH
18865: LD_INT 3
18867: EQUAL
18868: AND
18869: IFFALSE 18883
// Say ( Houten , D2-VanH-1 ) ;
18871: LD_EXP 13
18875: PPUSH
18876: LD_STRING D2-VanH-1
18878: PPUSH
18879: CALL_OW 88
// end ;
18883: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18884: LD_OWVAR 1
18888: PUSH
18889: LD_INT 6300
18891: GREATER
18892: IFFALSE 19946
18894: GO 18896
18896: DISABLE
18897: LD_INT 0
18899: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18900: LD_STRING 07_time
18902: PPUSH
18903: LD_INT 12600
18905: PPUSH
18906: CALL_OW 30
18910: PUSH
18911: LD_INT 3
18913: DIV
18914: PPUSH
18915: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18919: LD_INT 34
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 321
18929: PUSH
18930: LD_INT 2
18932: EQUAL
18933: IFFALSE 18942
// SetAchievement ( ACH_HEAVYGUN ) ;
18935: LD_STRING ACH_HEAVYGUN
18937: PPUSH
18938: CALL_OW 543
// PrepareMacmillanSquad ;
18942: CALL 4589 0 0
// CenterNowOnUnits ( JMM ) ;
18946: LD_EXP 1
18950: PPUSH
18951: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
18955: LD_EXP 1
18959: PPUSH
18960: LD_STRING D3-JMM-1
18962: PPUSH
18963: CALL_OW 88
// JMMArrive = 1 ;
18967: LD_ADDR_EXP 39
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18975: LD_EXP 3
18979: PPUSH
18980: CALL_OW 302
18984: PUSH
18985: LD_EXP 12
18989: PUSH
18990: LD_INT 1
18992: EQUAL
18993: AND
18994: IFFALSE 19010
// begin Say ( Donaldson , D3-Don-1 ) ;
18996: LD_EXP 3
19000: PPUSH
19001: LD_STRING D3-Don-1
19003: PPUSH
19004: CALL_OW 88
// end else
19008: GO 19062
// begin if gammaCommander = 1 then
19010: LD_EXP 12
19014: PUSH
19015: LD_INT 1
19017: EQUAL
19018: IFFALSE 19062
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19020: LD_EXP 11
19024: PPUSH
19025: LD_INT 26
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PPUSH
19035: CALL_OW 72
19039: PPUSH
19040: LD_STRING D3-Sol1-1
19042: PPUSH
19043: LD_STRING D3-Sol1-1
19045: PPUSH
19046: CALL 7322 0 3
// Say ( JMM , D3-JMM-2 ) ;
19050: LD_EXP 1
19054: PPUSH
19055: LD_STRING D3-JMM-2
19057: PPUSH
19058: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19062: LD_EXP 2
19066: PPUSH
19067: CALL_OW 302
19071: PUSH
19072: LD_EXP 12
19076: PUSH
19077: LD_INT 2
19079: EQUAL
19080: AND
19081: IFFALSE 19097
// begin Say ( Brown , D3-Brown-1 ) ;
19083: LD_EXP 2
19087: PPUSH
19088: LD_STRING D3-Brown-1
19090: PPUSH
19091: CALL_OW 88
// end else
19095: GO 19149
// begin if gammaCommander = 2 then
19097: LD_EXP 12
19101: PUSH
19102: LD_INT 2
19104: EQUAL
19105: IFFALSE 19149
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19107: LD_EXP 11
19111: PPUSH
19112: LD_INT 26
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 72
19126: PPUSH
19127: LD_STRING D3-Sol1-1a
19129: PPUSH
19130: LD_STRING D3-Sol1-1a
19132: PPUSH
19133: CALL 7322 0 3
// Say ( JMM , D3-JMM-2 ) ;
19137: LD_EXP 1
19141: PPUSH
19142: LD_STRING D3-JMM-2
19144: PPUSH
19145: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19149: LD_EXP 13
19153: PPUSH
19154: CALL_OW 302
19158: PUSH
19159: LD_EXP 12
19163: PUSH
19164: LD_INT 3
19166: EQUAL
19167: AND
19168: IFFALSE 19184
// begin Say ( Houten , D3-VanH-1 ) ;
19170: LD_EXP 13
19174: PPUSH
19175: LD_STRING D3-VanH-1
19177: PPUSH
19178: CALL_OW 88
// end else
19182: GO 19236
// begin if gammaCommander = 3 then
19184: LD_EXP 12
19188: PUSH
19189: LD_INT 3
19191: EQUAL
19192: IFFALSE 19236
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19194: LD_EXP 11
19198: PPUSH
19199: LD_INT 26
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 72
19213: PPUSH
19214: LD_STRING D3-Sol1-1b
19216: PPUSH
19217: LD_STRING D3-Sol1-1b
19219: PPUSH
19220: CALL 7322 0 3
// Say ( JMM , D3-JMM-2 ) ;
19224: LD_EXP 1
19228: PPUSH
19229: LD_STRING D3-JMM-2
19231: PPUSH
19232: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19236: LD_EXP 15
19240: PPUSH
19241: CALL_OW 302
19245: IFFALSE 19273
// begin Say ( Joan , D3a-Joan-1 ) ;
19247: LD_EXP 15
19251: PPUSH
19252: LD_STRING D3a-Joan-1
19254: PPUSH
19255: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19259: LD_EXP 1
19263: PPUSH
19264: LD_STRING D3a-JMM-1
19266: PPUSH
19267: CALL_OW 88
// end else
19271: GO 19615
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19273: LD_STRING 06_JoanStatus_1
19275: PPUSH
19276: LD_INT 0
19278: PPUSH
19279: CALL_OW 30
19283: PUSH
19284: LD_INT 1
19286: EQUAL
19287: IFFALSE 19615
// begin Say ( JMM , D3b-JMM-1 ) ;
19289: LD_EXP 1
19293: PPUSH
19294: LD_STRING D3b-JMM-1
19296: PPUSH
19297: CALL_OW 88
// if gammaCommander = 1 then
19301: LD_EXP 12
19305: PUSH
19306: LD_INT 1
19308: EQUAL
19309: IFFALSE 19366
// if IsOK ( Donaldson ) then
19311: LD_EXP 3
19315: PPUSH
19316: CALL_OW 302
19320: IFFALSE 19336
// Say ( Donaldson , D3b-Don-1 ) else
19322: LD_EXP 3
19326: PPUSH
19327: LD_STRING D3b-Don-1
19329: PPUSH
19330: CALL_OW 88
19334: GO 19366
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19336: LD_EXP 11
19340: PPUSH
19341: LD_INT 26
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PPUSH
19351: CALL_OW 72
19355: PPUSH
19356: LD_STRING D3b-Sol1-1
19358: PPUSH
19359: LD_STRING D3b-Sol1-1
19361: PPUSH
19362: CALL 7322 0 3
// if gammaCommander = 2 then
19366: LD_EXP 12
19370: PUSH
19371: LD_INT 2
19373: EQUAL
19374: IFFALSE 19431
// if IsOk ( Brown ) then
19376: LD_EXP 2
19380: PPUSH
19381: CALL_OW 302
19385: IFFALSE 19401
// Say ( Brown , D3b-Brown-1 ) else
19387: LD_EXP 2
19391: PPUSH
19392: LD_STRING D3b-Brown-1
19394: PPUSH
19395: CALL_OW 88
19399: GO 19431
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19401: LD_EXP 11
19405: PPUSH
19406: LD_INT 26
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PPUSH
19416: CALL_OW 72
19420: PPUSH
19421: LD_STRING D3b-Sol1-1
19423: PPUSH
19424: LD_STRING D3b-Sol1-1
19426: PPUSH
19427: CALL 7322 0 3
// if gammaCommander = 3 then
19431: LD_EXP 12
19435: PUSH
19436: LD_INT 3
19438: EQUAL
19439: IFFALSE 19496
// if IsOk ( Houten ) then
19441: LD_EXP 13
19445: PPUSH
19446: CALL_OW 302
19450: IFFALSE 19466
// Say ( Houten , D3b-VanH-1 ) else
19452: LD_EXP 13
19456: PPUSH
19457: LD_STRING D3b-VanH-1
19459: PPUSH
19460: CALL_OW 88
19464: GO 19496
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19466: LD_EXP 11
19470: PPUSH
19471: LD_INT 26
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PPUSH
19481: CALL_OW 72
19485: PPUSH
19486: LD_STRING D3b-Sol1-1
19488: PPUSH
19489: LD_STRING D3b-Sol1-1
19491: PPUSH
19492: CALL 7322 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19496: LD_EXP 11
19500: PPUSH
19501: LD_INT 26
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PPUSH
19511: CALL_OW 72
19515: PUSH
19516: LD_EXP 12
19520: PUSH
19521: LD_INT 1
19523: EQUAL
19524: PUSH
19525: LD_EXP 3
19529: PPUSH
19530: CALL_OW 302
19534: AND
19535: OR
19536: PUSH
19537: LD_EXP 12
19541: PUSH
19542: LD_INT 2
19544: EQUAL
19545: PUSH
19546: LD_EXP 2
19550: PPUSH
19551: CALL_OW 302
19555: AND
19556: OR
19557: PUSH
19558: LD_EXP 12
19562: PUSH
19563: LD_INT 3
19565: EQUAL
19566: PUSH
19567: LD_EXP 13
19571: PPUSH
19572: CALL_OW 302
19576: AND
19577: OR
19578: IFFALSE 19592
// Say ( JMM , D3b-JMM-2 ) ;
19580: LD_EXP 1
19584: PPUSH
19585: LD_STRING D3b-JMM-2
19587: PPUSH
19588: CALL_OW 88
// if IsOK ( Lisa ) then
19592: LD_EXP 6
19596: PPUSH
19597: CALL_OW 302
19601: IFFALSE 19615
// Say ( Lisa , D3b-Lisa-2 ) ;
19603: LD_EXP 6
19607: PPUSH
19608: LD_STRING D3b-Lisa-2
19610: PPUSH
19611: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_EXP 1
19624: PUSH
19625: LD_EXP 2
19629: PUSH
19630: LD_EXP 3
19634: PUSH
19635: LD_EXP 4
19639: PUSH
19640: LD_EXP 5
19644: PUSH
19645: LD_EXP 6
19649: PUSH
19650: LD_EXP 7
19654: PUSH
19655: LD_EXP 8
19659: PUSH
19660: LD_EXP 9
19664: PUSH
19665: LD_EXP 10
19669: PUSH
19670: LD_EXP 15
19674: PUSH
19675: LD_EXP 14
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: PUSH
19694: LD_EXP 42
19698: ADD
19699: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19700: LD_INT 22
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 21
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 26
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 25
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 25
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 25
19765: PUSH
19766: LD_INT 4
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: PPUSH
19786: CALL_OW 69
19790: PUSH
19791: LD_VAR 0 1
19795: DIFF
19796: PPUSH
19797: LD_STRING DCa-Sol1-1
19799: PPUSH
19800: LD_STRING DCa-Sol1-1
19802: PPUSH
19803: CALL 7322 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19807: LD_EXP 1
19811: PPUSH
19812: LD_STRING DCb-JMM-1
19814: PPUSH
19815: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19819: LD_INT 22
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 21
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 26
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 25
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 25
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 25
19874: PUSH
19875: LD_INT 3
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 25
19884: PUSH
19885: LD_INT 4
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: PPUSH
19905: CALL_OW 69
19909: PUSH
19910: LD_VAR 0 1
19914: DIFF
19915: PPUSH
19916: LD_STRING DCb-Sol1-1
19918: PPUSH
19919: LD_STRING DCb-Sol1-1
19921: PPUSH
19922: CALL 7322 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19926: LD_EXP 1
19930: PPUSH
19931: LD_STRING DCb-JMM-2
19933: PPUSH
19934: CALL_OW 88
// secondAttack = 1 ;
19938: LD_ADDR_EXP 34
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// end ;
19946: PPOPN 1
19948: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
19949: LD_EXP 39
19953: PUSH
19954: LD_INT 1
19956: EQUAL
19957: PUSH
19958: LD_OWVAR 1
19962: PUSH
19963: LD_INT 37800
19965: GREATEREQUAL
19966: AND
19967: IFFALSE 20040
19969: GO 19971
19971: DISABLE
// begin DialogueOn ;
19972: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
19976: LD_EXP 23
19980: PPUSH
19981: LD_STRING D4-Pow-1
19983: PPUSH
19984: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
19988: LD_EXP 1
19992: PPUSH
19993: LD_STRING D4-JMM-1
19995: PPUSH
19996: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20000: LD_EXP 23
20004: PPUSH
20005: LD_STRING D4-Pow-2
20007: PPUSH
20008: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20012: LD_EXP 1
20016: PPUSH
20017: LD_STRING D4-JMM-2
20019: PPUSH
20020: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20024: LD_EXP 23
20028: PPUSH
20029: LD_STRING D4-Pow-3
20031: PPUSH
20032: CALL_OW 94
// DialogueOff ;
20036: CALL_OW 7
// end ;
20040: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20041: LD_EXP 39
20045: PUSH
20046: LD_INT 1
20048: EQUAL
20049: PUSH
20050: LD_OWVAR 1
20054: PUSH
20055: LD_INT 50400
20057: GREATEREQUAL
20058: AND
20059: IFFALSE 20084
20061: GO 20063
20063: DISABLE
// begin DialogueOn ;
20064: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20068: LD_EXP 23
20072: PPUSH
20073: LD_STRING D4a-Pow-1
20075: PPUSH
20076: CALL_OW 94
// DialogueOff ;
20080: CALL_OW 7
// end ;
20084: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20085: LD_EXP 39
20089: PUSH
20090: LD_INT 1
20092: EQUAL
20093: PUSH
20094: LD_OWVAR 1
20098: PUSH
20099: LD_INT 73500
20101: GREATEREQUAL
20102: AND
20103: IFFALSE 20124
20105: GO 20107
20107: DISABLE
// begin PrepareSikorsky ;
20108: CALL 5847 0 0
// SikorskyArrive = 1 ;
20112: LD_ADDR_EXP 18
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// PrepareSikorskyArmy ;
20120: CALL 6023 0 0
// end ;
20124: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20125: LD_EXP 17
20129: PPUSH
20130: LD_INT 5
20132: PPUSH
20133: CALL_OW 308
20137: IFFALSE 20329
20139: GO 20141
20141: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20142: LD_EXP 17
20146: PPUSH
20147: CALL_OW 87
// DialogueOn ;
20151: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20155: LD_EXP 16
20159: PPUSH
20160: LD_STRING D5-Sik-1
20162: PPUSH
20163: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20167: LD_EXP 1
20171: PPUSH
20172: LD_STRING D5-JMM-1a
20174: PPUSH
20175: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20179: LD_EXP 16
20183: PPUSH
20184: LD_STRING D5-Sik-2
20186: PPUSH
20187: CALL_OW 88
// case query ( QSikorski ) of 1 :
20191: LD_STRING QSikorski
20193: PPUSH
20194: CALL_OW 97
20198: PUSH
20199: LD_INT 1
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20230
20207: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20208: LD_EXP 16
20212: PPUSH
20213: LD_STRING D5a-Sik-1
20215: PPUSH
20216: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20220: LD_ADDR_EXP 19
20224: PUSH
20225: LD_INT 2100
20227: ST_TO_ADDR
// end ; 2 :
20228: GO 20317
20230: LD_INT 2
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20261
20238: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20239: LD_EXP 16
20243: PPUSH
20244: LD_STRING D5b-Sik-1
20246: PPUSH
20247: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20251: LD_ADDR_EXP 19
20255: PUSH
20256: LD_INT 10500
20258: ST_TO_ADDR
// end ; 3 :
20259: GO 20317
20261: LD_INT 3
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20316
20269: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20270: LD_EXP 16
20274: PPUSH
20275: LD_STRING D5c-Sik-1
20277: PPUSH
20278: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20282: LD_EXP 1
20286: PPUSH
20287: LD_STRING D5c-JMM-1
20289: PPUSH
20290: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5c-Sik-2
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; end ;
20314: GO 20317
20316: POP
// DialogueOff ;
20317: CALL_OW 7
// timerStatus = 1 ;
20321: LD_ADDR_EXP 35
20325: PUSH
20326: LD_INT 1
20328: ST_TO_ADDR
// end ;
20329: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20330: LD_EXP 19
20334: PUSH
20335: LD_INT 35
20337: LESS
20338: IFFALSE 20386
20340: GO 20342
20342: DISABLE
// begin timerStatus = 0 ;
20343: LD_ADDR_EXP 35
20347: PUSH
20348: LD_INT 0
20350: ST_TO_ADDR
// DialogueOn ;
20351: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20355: LD_EXP 16
20359: PPUSH
20360: LD_STRING D6-Sik-1
20362: PPUSH
20363: CALL_OW 88
// DialogueOff ;
20367: CALL_OW 7
// SikorskyAI = 1 ;
20371: LD_ADDR_EXP 20
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20379: LD_STRING M2
20381: PPUSH
20382: CALL_OW 337
// end ;
20386: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20387: LD_EXP 17
20391: PPUSH
20392: LD_INT 18
20394: PPUSH
20395: CALL_OW 308
20399: IFFALSE 20509
20401: GO 20403
20403: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20404: LD_EXP 16
20408: PPUSH
20409: LD_STRING D7-Sik-1
20411: PPUSH
20412: CALL_OW 88
// wait ( 0 0$10 ) ;
20416: LD_INT 350
20418: PPUSH
20419: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20423: LD_EXP 1
20427: PPUSH
20428: LD_INT 24
20430: PPUSH
20431: CALL_OW 308
20435: PUSH
20436: LD_EXP 1
20440: PPUSH
20441: CALL 17052 0 1
20445: PUSH
20446: LD_EXP 1
20450: PPUSH
20451: CALL 17052 0 1
20455: PPUSH
20456: LD_INT 24
20458: PPUSH
20459: CALL_OW 308
20463: AND
20464: OR
20465: IFFALSE 20489
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20467: LD_EXP 16
20471: PPUSH
20472: LD_STRING D7a-Sik-1
20474: PPUSH
20475: CALL_OW 88
// SikorskyStatus = 1 ;
20479: LD_ADDR_EXP 21
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// end else
20487: GO 20509
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20489: LD_EXP 16
20493: PPUSH
20494: LD_STRING D7b-Sik-1
20496: PPUSH
20497: CALL_OW 88
// SikorskyStatus = 2 ;
20501: LD_ADDR_EXP 21
20505: PUSH
20506: LD_INT 2
20508: ST_TO_ADDR
// end ; end ; end_of_file
20509: END
// on BuildingComplete ( building ) do var tmp , un ;
20510: LD_INT 0
20512: PPUSH
20513: PPUSH
// begin if GetSide ( building ) = 3 then
20514: LD_VAR 0 1
20518: PPUSH
20519: CALL_OW 255
20523: PUSH
20524: LD_INT 3
20526: EQUAL
20527: IFFALSE 21064
// begin if GetBType ( building ) = b_depot then
20529: LD_VAR 0 1
20533: PPUSH
20534: CALL_OW 266
20538: PUSH
20539: LD_INT 0
20541: EQUAL
20542: IFFALSE 20610
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL_OW 274
20553: PPUSH
20554: LD_INT 1
20556: PPUSH
20557: LD_INT 5000
20559: PPUSH
20560: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 274
20573: PPUSH
20574: LD_INT 2
20576: PPUSH
20577: LD_INT 5000
20579: PPUSH
20580: CALL_OW 277
// SetBName ( building , konev ) ;
20584: LD_VAR 0 1
20588: PPUSH
20589: LD_STRING konev
20591: PPUSH
20592: CALL_OW 500
// ruDepot = building ;
20596: LD_ADDR_EXP 28
20600: PUSH
20601: LD_VAR 0 1
20605: ST_TO_ADDR
// BuildRussianBase ;
20606: CALL 7933 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20610: LD_VAR 0 1
20614: PPUSH
20615: CALL_OW 266
20619: PUSH
20620: LD_INT 0
20622: EQUAL
20623: PUSH
20624: LD_VAR 0 1
20628: PPUSH
20629: CALL_OW 266
20633: PUSH
20634: LD_INT 2
20636: EQUAL
20637: OR
20638: PUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 266
20648: PUSH
20649: LD_INT 4
20651: EQUAL
20652: OR
20653: IFFALSE 20664
// ComUpgrade ( building ) ;
20655: LD_VAR 0 1
20659: PPUSH
20660: CALL_OW 146
// if GetBType ( building ) = b_lab then
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 266
20673: PUSH
20674: LD_INT 6
20676: EQUAL
20677: IFFALSE 20728
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_INT 10
20686: PPUSH
20687: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20691: LD_VAR 0 1
20695: PPUSH
20696: LD_INT 12
20698: PPUSH
20699: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20703: LD_INT 3
20705: PPUSH
20706: LD_VAR 0 1
20710: PPUSH
20711: LD_INT 3
20713: PPUSH
20714: CALL 8477 0 3
// ruLab = building ;
20718: LD_ADDR_EXP 29
20722: PUSH
20723: LD_VAR 0 1
20727: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20728: LD_VAR 0 1
20732: PPUSH
20733: CALL_OW 266
20737: PUSH
20738: LD_INT 32
20740: EQUAL
20741: IFFALSE 20859
// begin uc_side = 3 ;
20743: LD_ADDR_OWVAR 20
20747: PUSH
20748: LD_INT 3
20750: ST_TO_ADDR
// uc_nation = 3 ;
20751: LD_ADDR_OWVAR 21
20755: PUSH
20756: LD_INT 3
20758: ST_TO_ADDR
// hc_gallery =  ;
20759: LD_ADDR_OWVAR 33
20763: PUSH
20764: LD_STRING 
20766: ST_TO_ADDR
// hc_name =  ;
20767: LD_ADDR_OWVAR 26
20771: PUSH
20772: LD_STRING 
20774: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20775: LD_INT 0
20777: PPUSH
20778: LD_INT 1
20780: PPUSH
20781: LD_EXP 25
20785: PPUSH
20786: LD_EXP 26
20790: PPUSH
20791: CALL_OW 12
20795: PPUSH
20796: CALL_OW 380
// un = CreateHuman ;
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: CALL_OW 44
20809: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20810: LD_VAR 0 3
20814: PPUSH
20815: LD_VAR 0 1
20819: PPUSH
20820: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20824: LD_VAR 0 1
20828: PPUSH
20829: LD_INT 43
20831: PUSH
20832: LD_INT 44
20834: PUSH
20835: LD_INT 46
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: PPUSH
20846: LD_INT 3
20848: PPUSH
20849: CALL_OW 12
20853: ARRAY
20854: PPUSH
20855: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 266
20868: PUSH
20869: LD_INT 33
20871: EQUAL
20872: IFFALSE 20909
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20874: LD_VAR 0 1
20878: PPUSH
20879: LD_INT 43
20881: PUSH
20882: LD_INT 44
20884: PUSH
20885: LD_INT 46
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PPUSH
20896: LD_INT 3
20898: PPUSH
20899: CALL_OW 12
20903: ARRAY
20904: PPUSH
20905: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 266
20918: PUSH
20919: LD_INT 32
20921: EQUAL
20922: IFFALSE 20959
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20924: LD_VAR 0 1
20928: PPUSH
20929: LD_INT 43
20931: PUSH
20932: LD_INT 44
20934: PUSH
20935: LD_INT 46
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: PPUSH
20946: LD_INT 3
20948: PPUSH
20949: CALL_OW 12
20953: ARRAY
20954: PPUSH
20955: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20959: LD_VAR 0 1
20963: PPUSH
20964: CALL_OW 266
20968: PUSH
20969: LD_INT 24
20971: EQUAL
20972: IFFALSE 20982
// russianAI = 1 ;
20974: LD_ADDR_EXP 27
20978: PUSH
20979: LD_INT 1
20981: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20982: LD_EXP 31
20986: PUSH
20987: LD_INT 0
20989: GREATER
20990: IFFALSE 21064
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20992: LD_ADDR_EXP 31
20996: PUSH
20997: LD_EXP 31
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: CALL_OW 3
21009: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21010: LD_ADDR_EXP 31
21014: PUSH
21015: LD_EXP 31
21019: PPUSH
21020: LD_INT 1
21022: PPUSH
21023: CALL_OW 3
21027: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21028: LD_ADDR_EXP 31
21032: PUSH
21033: LD_EXP 31
21037: PPUSH
21038: LD_INT 1
21040: PPUSH
21041: CALL_OW 3
21045: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21046: LD_ADDR_EXP 31
21050: PUSH
21051: LD_EXP 31
21055: PPUSH
21056: LD_INT 1
21058: PPUSH
21059: CALL_OW 3
21063: ST_TO_ADDR
// end ; end ; end ;
21064: PPOPN 3
21066: END
// on UpgradeComplete ( building ) do var i ;
21067: LD_INT 0
21069: PPUSH
// begin if GetSide ( building ) = 3 then
21070: LD_VAR 0 1
21074: PPUSH
21075: CALL_OW 255
21079: PUSH
21080: LD_INT 3
21082: EQUAL
21083: IFFALSE 21264
// begin if GetBType ( building ) = b_factory then
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 266
21094: PUSH
21095: LD_INT 3
21097: EQUAL
21098: IFFALSE 21165
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 22
21107: PUSH
21108: LD_INT 3
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 25
21117: PUSH
21118: LD_INT 3
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PPUSH
21129: CALL_OW 69
21133: PUSH
21134: FOR_IN
21135: IFFALSE 21153
// ComEnterUnit ( i , building ) ;
21137: LD_VAR 0 2
21141: PPUSH
21142: LD_VAR 0 1
21146: PPUSH
21147: CALL_OW 120
21151: GO 21134
21153: POP
21154: POP
// ruFab = building ;
21155: LD_ADDR_EXP 30
21159: PUSH
21160: LD_VAR 0 1
21164: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21165: LD_VAR 0 1
21169: PPUSH
21170: CALL_OW 266
21174: PUSH
21175: LD_INT 8
21177: EQUAL
21178: IFFALSE 21235
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21180: LD_ADDR_VAR 0 2
21184: PUSH
21185: LD_INT 22
21187: PUSH
21188: LD_INT 3
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 25
21197: PUSH
21198: LD_INT 4
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 69
21213: PUSH
21214: FOR_IN
21215: IFFALSE 21233
// ComEnterUnit ( i , building ) ;
21217: LD_VAR 0 2
21221: PPUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 120
21231: GO 21214
21233: POP
21234: POP
// if GetBType ( building ) = b_warehouse then
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 266
21244: PUSH
21245: LD_INT 1
21247: EQUAL
21248: IFFALSE 21264
// begin ComEnterUnit ( Borodin , building ) ;
21250: LD_EXP 24
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 120
// end ; end ; end ;
21264: PPOPN 2
21266: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL_OW 247
21276: PUSH
21277: LD_INT 2
21279: EQUAL
21280: PUSH
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 263
21290: PUSH
21291: LD_INT 3
21293: EQUAL
21294: AND
21295: PUSH
21296: LD_EXP 41
21300: PUSH
21301: LD_INT 0
21303: EQUAL
21304: AND
21305: IFFALSE 21423
// begin varEvent1 = 1 ;
21307: LD_ADDR_EXP 41
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21315: LD_VAR 0 1
21319: PPUSH
21320: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21324: LD_INT 22
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 21
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 25
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 25
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 25
21369: PUSH
21370: LD_INT 3
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 25
21379: PUSH
21380: LD_INT 4
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: PUSH
21404: LD_EXP 1
21408: PUSH
21409: EMPTY
21410: LIST
21411: DIFF
21412: PPUSH
21413: LD_STRING DC-Sol1-1
21415: PPUSH
21416: LD_STRING DC-FSol1-1
21418: PPUSH
21419: CALL 7322 0 3
// end ; end ;
21423: PPOPN 1
21425: END
// on UnitDestroyed ( unit ) do var i ;
21426: LD_INT 0
21428: PPUSH
// begin if unit = Joan then
21429: LD_VAR 0 1
21433: PUSH
21434: LD_EXP 15
21438: EQUAL
21439: IFFALSE 21448
// DeleteCharacters ( Joan ) ;
21441: LD_STRING Joan
21443: PPUSH
21444: CALL_OW 40
// if GetSide ( unit ) = 3 then
21448: LD_VAR 0 1
21452: PPUSH
21453: CALL_OW 255
21457: PUSH
21458: LD_INT 3
21460: EQUAL
21461: IFFALSE 22231
// begin if GetType ( unit ) = unit_building then
21463: LD_VAR 0 1
21467: PPUSH
21468: CALL_OW 247
21472: PUSH
21473: LD_INT 3
21475: EQUAL
21476: IFFALSE 22168
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21478: LD_VAR 0 1
21482: PPUSH
21483: CALL_OW 266
21487: PUSH
21488: LD_INT 31
21490: EQUAL
21491: PUSH
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL_OW 266
21501: PUSH
21502: LD_INT 32
21504: EQUAL
21505: OR
21506: PUSH
21507: LD_VAR 0 1
21511: PPUSH
21512: CALL_OW 266
21516: PUSH
21517: LD_INT 36
21519: EQUAL
21520: OR
21521: PUSH
21522: LD_VAR 0 1
21526: PPUSH
21527: CALL_OW 266
21531: PUSH
21532: LD_INT 0
21534: EQUAL
21535: OR
21536: PUSH
21537: LD_VAR 0 1
21541: PPUSH
21542: CALL_OW 266
21546: PUSH
21547: LD_INT 24
21549: EQUAL
21550: OR
21551: PUSH
21552: LD_VAR 0 1
21556: PPUSH
21557: CALL_OW 266
21561: PUSH
21562: LD_INT 17
21564: EQUAL
21565: OR
21566: PUSH
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 266
21576: PUSH
21577: LD_INT 25
21579: EQUAL
21580: OR
21581: PUSH
21582: LD_VAR 0 1
21586: PPUSH
21587: CALL_OW 266
21591: PUSH
21592: LD_INT 19
21594: EQUAL
21595: OR
21596: PUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 266
21606: PUSH
21607: LD_INT 20
21609: EQUAL
21610: OR
21611: PUSH
21612: LD_VAR 0 1
21616: PPUSH
21617: CALL_OW 266
21621: PUSH
21622: LD_INT 18
21624: EQUAL
21625: OR
21626: PUSH
21627: LD_VAR 0 1
21631: PPUSH
21632: CALL_OW 266
21636: PUSH
21637: LD_INT 21
21639: EQUAL
21640: OR
21641: PUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 266
21651: PUSH
21652: LD_INT 23
21654: EQUAL
21655: OR
21656: PUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 266
21666: PUSH
21667: LD_INT 16
21669: EQUAL
21670: OR
21671: PUSH
21672: LD_VAR 0 1
21676: PPUSH
21677: CALL_OW 266
21681: PUSH
21682: LD_INT 6
21684: EQUAL
21685: OR
21686: PUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 266
21696: PUSH
21697: LD_INT 29
21699: EQUAL
21700: OR
21701: PUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL_OW 266
21711: PUSH
21712: LD_INT 26
21714: EQUAL
21715: OR
21716: PUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 266
21726: PUSH
21727: LD_INT 30
21729: EQUAL
21730: OR
21731: PUSH
21732: LD_VAR 0 1
21736: PPUSH
21737: CALL_OW 266
21741: PUSH
21742: LD_INT 28
21744: EQUAL
21745: OR
21746: PUSH
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 266
21756: PUSH
21757: LD_INT 27
21759: EQUAL
21760: OR
21761: PUSH
21762: LD_VAR 0 1
21766: PPUSH
21767: CALL_OW 266
21771: PUSH
21772: LD_INT 33
21774: EQUAL
21775: OR
21776: PUSH
21777: LD_VAR 0 1
21781: PPUSH
21782: CALL_OW 266
21786: PUSH
21787: LD_INT 2
21789: EQUAL
21790: OR
21791: PUSH
21792: LD_VAR 0 1
21796: PPUSH
21797: CALL_OW 266
21801: PUSH
21802: LD_INT 4
21804: EQUAL
21805: OR
21806: IFFALSE 21892
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21808: LD_ADDR_EXP 31
21812: PUSH
21813: LD_EXP 31
21817: PUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: CALL_OW 266
21827: ADD
21828: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21829: LD_ADDR_EXP 31
21833: PUSH
21834: LD_EXP 31
21838: PUSH
21839: LD_VAR 0 1
21843: PPUSH
21844: CALL_OW 250
21848: ADD
21849: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21850: LD_ADDR_EXP 31
21854: PUSH
21855: LD_EXP 31
21859: PUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 251
21869: ADD
21870: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21871: LD_ADDR_EXP 31
21875: PUSH
21876: LD_EXP 31
21880: PUSH
21881: LD_VAR 0 1
21885: PPUSH
21886: CALL_OW 254
21890: ADD
21891: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21892: LD_VAR 0 1
21896: PPUSH
21897: CALL_OW 266
21901: PUSH
21902: LD_INT 1
21904: EQUAL
21905: IFFALSE 21984
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21907: LD_ADDR_EXP 31
21911: PUSH
21912: LD_EXP 31
21916: PUSH
21917: LD_INT 0
21919: ADD
21920: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21921: LD_ADDR_EXP 31
21925: PUSH
21926: LD_EXP 31
21930: PUSH
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL_OW 250
21940: ADD
21941: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21942: LD_ADDR_EXP 31
21946: PUSH
21947: LD_EXP 31
21951: PUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 251
21961: ADD
21962: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21963: LD_ADDR_EXP 31
21967: PUSH
21968: LD_EXP 31
21972: PUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 254
21982: ADD
21983: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 266
21993: PUSH
21994: LD_INT 3
21996: EQUAL
21997: IFFALSE 22076
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21999: LD_ADDR_EXP 31
22003: PUSH
22004: LD_EXP 31
22008: PUSH
22009: LD_INT 2
22011: ADD
22012: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22013: LD_ADDR_EXP 31
22017: PUSH
22018: LD_EXP 31
22022: PUSH
22023: LD_VAR 0 1
22027: PPUSH
22028: CALL_OW 250
22032: ADD
22033: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22034: LD_ADDR_EXP 31
22038: PUSH
22039: LD_EXP 31
22043: PUSH
22044: LD_VAR 0 1
22048: PPUSH
22049: CALL_OW 251
22053: ADD
22054: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22055: LD_ADDR_EXP 31
22059: PUSH
22060: LD_EXP 31
22064: PUSH
22065: LD_VAR 0 1
22069: PPUSH
22070: CALL_OW 254
22074: ADD
22075: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 266
22085: PUSH
22086: LD_INT 5
22088: EQUAL
22089: IFFALSE 22168
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22091: LD_ADDR_EXP 31
22095: PUSH
22096: LD_EXP 31
22100: PUSH
22101: LD_INT 4
22103: ADD
22104: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22105: LD_ADDR_EXP 31
22109: PUSH
22110: LD_EXP 31
22114: PUSH
22115: LD_VAR 0 1
22119: PPUSH
22120: CALL_OW 250
22124: ADD
22125: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22126: LD_ADDR_EXP 31
22130: PUSH
22131: LD_EXP 31
22135: PUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 251
22145: ADD
22146: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22147: LD_ADDR_EXP 31
22151: PUSH
22152: LD_EXP 31
22156: PUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 254
22166: ADD
22167: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22168: LD_VAR 0 1
22172: PPUSH
22173: CALL_OW 247
22177: PUSH
22178: LD_INT 1
22180: EQUAL
22181: IFFALSE 22231
// begin for i in defenders_list do
22183: LD_ADDR_VAR 0 2
22187: PUSH
22188: LD_EXP 32
22192: PUSH
22193: FOR_IN
22194: IFFALSE 22229
// if i = unit then
22196: LD_VAR 0 2
22200: PUSH
22201: LD_VAR 0 1
22205: EQUAL
22206: IFFALSE 22227
// defenders_list = defenders_list diff [ unit ] ;
22208: LD_ADDR_EXP 32
22212: PUSH
22213: LD_EXP 32
22217: PUSH
22218: LD_VAR 0 1
22222: PUSH
22223: EMPTY
22224: LIST
22225: DIFF
22226: ST_TO_ADDR
22227: GO 22193
22229: POP
22230: POP
// end ; end ; end ;
22231: PPOPN 2
22233: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL 40411 0 1
// end ; end_of_file
22243: PPOPN 1
22245: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22246: GO 22248
22248: DISABLE
22249: LD_INT 0
22251: PPUSH
// begin enemyWayX = [ ] ;
22252: LD_ADDR_EXP 46
22256: PUSH
22257: EMPTY
22258: ST_TO_ADDR
// enemyWayY = [ ] ;
22259: LD_ADDR_EXP 47
22263: PUSH
22264: EMPTY
22265: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22266: LD_ADDR_VAR 0 1
22270: PUSH
22271: LD_INT 1
22273: PPUSH
22274: LD_INT 3
22276: PPUSH
22277: CALL_OW 12
22281: ST_TO_ADDR
// if rnd = 1 then
22282: LD_VAR 0 1
22286: PUSH
22287: LD_INT 1
22289: EQUAL
22290: IFFALSE 22330
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22292: LD_ADDR_EXP 46
22296: PUSH
22297: LD_INT 73
22299: PUSH
22300: LD_INT 46
22302: PUSH
22303: LD_INT 29
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: LIST
22310: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22311: LD_ADDR_EXP 47
22315: PUSH
22316: LD_INT 71
22318: PUSH
22319: LD_INT 43
22321: PUSH
22322: LD_INT 29
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: ST_TO_ADDR
// end ; if rnd = 2 then
22330: LD_VAR 0 1
22334: PUSH
22335: LD_INT 2
22337: EQUAL
22338: IFFALSE 22362
// begin enemyWayX = [ 64 ] ;
22340: LD_ADDR_EXP 46
22344: PUSH
22345: LD_INT 64
22347: PUSH
22348: EMPTY
22349: LIST
22350: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22351: LD_ADDR_EXP 47
22355: PUSH
22356: LD_INT 43
22358: PUSH
22359: EMPTY
22360: LIST
22361: ST_TO_ADDR
// end ; if rnd = 3 then
22362: LD_VAR 0 1
22366: PUSH
22367: LD_INT 3
22369: EQUAL
22370: IFFALSE 22394
// begin enemyWayX = [ 80 ] ;
22372: LD_ADDR_EXP 46
22376: PUSH
22377: LD_INT 80
22379: PUSH
22380: EMPTY
22381: LIST
22382: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22383: LD_ADDR_EXP 47
22387: PUSH
22388: LD_INT 28
22390: PUSH
22391: EMPTY
22392: LIST
22393: ST_TO_ADDR
// end ; enable ;
22394: ENABLE
// end ;
22395: PPOPN 1
22397: END
// every 0 0$1 do
22398: GO 22400
22400: DISABLE
// begin enable ;
22401: ENABLE
// if escapeAvalaible = 0 then
22402: LD_EXP 36
22406: PUSH
22407: LD_INT 0
22409: EQUAL
22410: IFFALSE 22422
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22412: LD_INT 3
22414: PPUSH
22415: LD_INT 6
22417: PPUSH
22418: CALL 8718 0 2
// if escapeAvalaible = 0 then
22422: LD_EXP 36
22426: PUSH
22427: LD_INT 0
22429: EQUAL
22430: IFFALSE 22442
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22432: LD_INT 1
22434: PPUSH
22435: LD_INT 24
22437: PPUSH
22438: CALL 9378 0 2
// if russianAI = 1 then
22442: LD_EXP 27
22446: PUSH
22447: LD_INT 1
22449: EQUAL
22450: IFFALSE 22520
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22452: LD_INT 3
22454: PPUSH
22455: LD_INT 7
22457: PPUSH
22458: LD_INT 6
22460: PPUSH
22461: LD_EXP 29
22465: PPUSH
22466: CALL 11816 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22470: LD_INT 3
22472: PPUSH
22473: LD_EXP 28
22477: PPUSH
22478: LD_INT 6
22480: PPUSH
22481: LD_EXP 31
22485: PPUSH
22486: CALL 11410 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22490: LD_INT 3
22492: PPUSH
22493: LD_INT 26
22495: PPUSH
22496: LD_EXP 46
22500: PPUSH
22501: LD_EXP 47
22505: PPUSH
22506: CALL 10278 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22510: LD_INT 3
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: CALL 12360 0 2
// end ; if SikorskyArrive = 1 then
22520: LD_EXP 18
22524: PUSH
22525: LD_INT 1
22527: EQUAL
22528: IFFALSE 22546
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22530: LD_INT 3
22532: PPUSH
22533: LD_INT 10
22535: PPUSH
22536: LD_INT 53
22538: PPUSH
22539: LD_INT 59
22541: PPUSH
22542: CALL 10075 0 4
// end ;
22546: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22547: LD_EXP 27
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: IFFALSE 22831
22557: GO 22559
22559: DISABLE
22560: LD_INT 0
22562: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22563: LD_ADDR_VAR 0 1
22567: PUSH
22568: LD_INT 22
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 21
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 30
22590: PUSH
22591: LD_INT 32
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 3
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 35
22606: PUSH
22607: LD_INT 43
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 35
22616: PUSH
22617: LD_INT 44
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 35
22626: PUSH
22627: LD_INT 46
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 69
22654: PUSH
22655: FOR_IN
22656: IFFALSE 22695
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22658: LD_VAR 0 1
22662: PPUSH
22663: LD_INT 43
22665: PUSH
22666: LD_INT 44
22668: PUSH
22669: LD_INT 46
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PPUSH
22680: LD_INT 3
22682: PPUSH
22683: CALL_OW 12
22687: ARRAY
22688: PPUSH
22689: CALL_OW 431
22693: GO 22655
22695: POP
22696: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22697: LD_ADDR_VAR 0 1
22701: PUSH
22702: LD_INT 22
22704: PUSH
22705: LD_INT 3
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 21
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 30
22724: PUSH
22725: LD_INT 33
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 3
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 35
22740: PUSH
22741: LD_INT 43
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 35
22750: PUSH
22751: LD_INT 44
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 35
22760: PUSH
22761: LD_INT 46
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 69
22788: PUSH
22789: FOR_IN
22790: IFFALSE 22829
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_INT 43
22799: PUSH
22800: LD_INT 44
22802: PUSH
22803: LD_INT 46
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PPUSH
22814: LD_INT 3
22816: PPUSH
22817: CALL_OW 12
22821: ARRAY
22822: PPUSH
22823: CALL_OW 431
22827: GO 22789
22829: POP
22830: POP
// end ;
22831: PPOPN 1
22833: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22834: LD_EXP 24
22838: PPUSH
22839: CALL_OW 310
22843: NOT
22844: PUSH
22845: LD_EXP 28
22849: PPUSH
22850: CALL_OW 302
22854: AND
22855: PUSH
22856: LD_EXP 28
22860: PPUSH
22861: CALL_OW 255
22865: PUSH
22866: LD_INT 3
22868: EQUAL
22869: AND
22870: IFFALSE 22890
22872: GO 22874
22874: DISABLE
// begin enable ;
22875: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22876: LD_EXP 24
22880: PPUSH
22881: LD_EXP 28
22885: PPUSH
22886: CALL_OW 120
// end ;
22890: END
// every 0 0$1 trigger SikorskyAI = 1 do
22891: LD_EXP 20
22895: PUSH
22896: LD_INT 1
22898: EQUAL
22899: IFFALSE 22934
22901: GO 22903
22903: DISABLE
// begin enable ;
22904: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22905: LD_INT 4
22907: PPUSH
22908: LD_INT 10
22910: PPUSH
22911: LD_INT 93
22913: PPUSH
22914: LD_INT 93
22916: PPUSH
22917: CALL 10075 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22921: LD_INT 4
22923: PPUSH
22924: LD_INT 11
22926: PPUSH
22927: LD_INT 3
22929: PPUSH
22930: CALL 16572 0 3
// end ;
22934: END
// every 0 0$1 trigger SikorskyAI = 1 do
22935: LD_EXP 20
22939: PUSH
22940: LD_INT 1
22942: EQUAL
22943: IFFALSE 22955
22945: GO 22947
22947: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
22948: LD_INT 4
22950: PPUSH
22951: CALL 11082 0 1
22955: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22956: LD_EXP 27
22960: PUSH
22961: LD_INT 1
22963: EQUAL
22964: PUSH
22965: LD_EXP 30
22969: PPUSH
22970: CALL_OW 302
22974: AND
22975: PUSH
22976: LD_EXP 30
22980: PPUSH
22981: CALL_OW 255
22985: PUSH
22986: LD_INT 3
22988: EQUAL
22989: AND
22990: PUSH
22991: LD_INT 22
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 21
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 33
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: PPUSH
23026: CALL_OW 69
23030: PUSH
23031: LD_INT 0
23033: EQUAL
23034: AND
23035: IFFALSE 23269
23037: GO 23039
23039: DISABLE
// begin enable ;
23040: ENABLE
// if Difficulty = 1 then
23041: LD_OWVAR 67
23045: PUSH
23046: LD_INT 1
23048: EQUAL
23049: IFFALSE 23117
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23051: LD_INT 3
23053: PPUSH
23054: LD_EXP 30
23058: PPUSH
23059: LD_INT 5
23061: PPUSH
23062: LD_INT 8
23064: PPUSH
23065: CALL_OW 12
23069: PPUSH
23070: LD_INT 43
23072: PUSH
23073: LD_INT 43
23075: PUSH
23076: LD_INT 43
23078: PUSH
23079: LD_INT 43
23081: PUSH
23082: LD_INT 44
23084: PUSH
23085: LD_INT 44
23087: PUSH
23088: LD_INT 44
23090: PUSH
23091: LD_INT 46
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: PPUSH
23104: LD_INT 1
23106: PPUSH
23107: LD_INT 3
23109: PPUSH
23110: LD_INT 24
23112: PPUSH
23113: CALL 9921 0 7
// if Difficulty = 2 then
23117: LD_OWVAR 67
23121: PUSH
23122: LD_INT 2
23124: EQUAL
23125: IFFALSE 23193
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23127: LD_INT 3
23129: PPUSH
23130: LD_EXP 30
23134: PPUSH
23135: LD_INT 6
23137: PPUSH
23138: LD_INT 8
23140: PPUSH
23141: CALL_OW 12
23145: PPUSH
23146: LD_INT 43
23148: PUSH
23149: LD_INT 43
23151: PUSH
23152: LD_INT 44
23154: PUSH
23155: LD_INT 44
23157: PUSH
23158: LD_INT 44
23160: PUSH
23161: LD_INT 44
23163: PUSH
23164: LD_INT 46
23166: PUSH
23167: LD_INT 46
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PPUSH
23180: LD_INT 1
23182: PPUSH
23183: LD_INT 3
23185: PPUSH
23186: LD_INT 24
23188: PPUSH
23189: CALL 9921 0 7
// if Difficulty = 3 then
23193: LD_OWVAR 67
23197: PUSH
23198: LD_INT 3
23200: EQUAL
23201: IFFALSE 23269
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23203: LD_INT 3
23205: PPUSH
23206: LD_EXP 30
23210: PPUSH
23211: LD_INT 7
23213: PPUSH
23214: LD_INT 8
23216: PPUSH
23217: CALL_OW 12
23221: PPUSH
23222: LD_INT 43
23224: PUSH
23225: LD_INT 43
23227: PUSH
23228: LD_INT 44
23230: PUSH
23231: LD_INT 44
23233: PUSH
23234: LD_INT 44
23236: PUSH
23237: LD_INT 46
23239: PUSH
23240: LD_INT 46
23242: PUSH
23243: LD_INT 46
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: PPUSH
23256: LD_INT 1
23258: PPUSH
23259: LD_INT 3
23261: PPUSH
23262: LD_INT 24
23264: PPUSH
23265: CALL 9921 0 7
// end ;
23269: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23270: LD_EXP 38
23274: PUSH
23275: LD_INT 1
23277: EQUAL
23278: IFFALSE 23360
23280: GO 23282
23282: DISABLE
23283: LD_INT 0
23285: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23286: LD_ADDR_VAR 0 1
23290: PUSH
23291: LD_INT 22
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 21
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 3
23313: PUSH
23314: LD_INT 24
23316: PUSH
23317: LD_INT 650
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: PPUSH
23333: CALL_OW 69
23337: PUSH
23338: FOR_IN
23339: IFFALSE 23358
// ComMoveXY ( i , 51 , 12 ) ;
23341: LD_VAR 0 1
23345: PPUSH
23346: LD_INT 51
23348: PPUSH
23349: LD_INT 12
23351: PPUSH
23352: CALL_OW 111
23356: GO 23338
23358: POP
23359: POP
// end ; end_of_file
23360: PPOPN 1
23362: END
// every 1 1$20 trigger firstAttack = 1 do
23363: LD_EXP 33
23367: PUSH
23368: LD_INT 1
23370: EQUAL
23371: IFFALSE 23477
23373: GO 23375
23375: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23376: LD_INT 6
23378: PPUSH
23379: LD_INT 3
23381: PPUSH
23382: LD_INT 3
23384: PPUSH
23385: LD_INT 4
23387: PPUSH
23388: CALL_OW 12
23392: PUSH
23393: LD_INT 4
23395: PPUSH
23396: LD_INT 6
23398: PPUSH
23399: CALL_OW 12
23403: PUSH
23404: LD_INT 5
23406: PPUSH
23407: LD_INT 6
23409: PPUSH
23410: CALL_OW 12
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: PUSH
23420: LD_OWVAR 67
23424: ARRAY
23425: PPUSH
23426: LD_INT 0
23428: PPUSH
23429: LD_INT 0
23431: PPUSH
23432: LD_INT 0
23434: PPUSH
23435: LD_INT 0
23437: PPUSH
23438: LD_EXP 25
23442: PPUSH
23443: LD_EXP 26
23447: PPUSH
23448: CALL_OW 12
23452: PPUSH
23453: LD_INT 16
23455: PPUSH
23456: LD_INT 7
23458: PPUSH
23459: LD_INT 1
23461: PPUSH
23462: LD_INT 1
23464: PPUSH
23465: LD_INT 3
23467: PPUSH
23468: CALL_OW 12
23472: PPUSH
23473: CALL 12590 0 12
23477: END
// every 1 1$40 trigger firstAttack = 1 do
23478: LD_EXP 33
23482: PUSH
23483: LD_INT 1
23485: EQUAL
23486: IFFALSE 23578
23488: GO 23490
23490: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23491: LD_INT 16
23493: PPUSH
23494: LD_INT 6
23496: PPUSH
23497: LD_INT 3
23499: PPUSH
23500: LD_INT 4
23502: PPUSH
23503: CALL_OW 12
23507: PUSH
23508: LD_INT 4
23510: PPUSH
23511: LD_INT 5
23513: PPUSH
23514: CALL_OW 12
23518: PUSH
23519: LD_INT 5
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: PUSH
23527: LD_OWVAR 67
23531: ARRAY
23532: PPUSH
23533: LD_EXP 25
23537: PPUSH
23538: LD_EXP 26
23542: PPUSH
23543: CALL_OW 12
23547: PPUSH
23548: LD_INT 3
23550: PPUSH
23551: LD_INT 1
23553: PPUSH
23554: LD_INT 3
23556: PPUSH
23557: LD_INT 44
23559: PUSH
23560: LD_INT 46
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PPUSH
23567: EMPTY
23568: PPUSH
23569: EMPTY
23570: PPUSH
23571: LD_INT 1
23573: PPUSH
23574: CALL 14883 0 11
23578: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23579: LD_EXP 33
23583: PUSH
23584: LD_INT 1
23586: EQUAL
23587: PUSH
23588: LD_EXP 39
23592: PUSH
23593: LD_INT 0
23595: EQUAL
23596: AND
23597: IFFALSE 23703
23599: GO 23601
23601: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23602: LD_INT 6
23604: PPUSH
23605: LD_INT 3
23607: PPUSH
23608: LD_INT 4
23610: PPUSH
23611: LD_INT 5
23613: PPUSH
23614: CALL_OW 12
23618: PUSH
23619: LD_INT 5
23621: PPUSH
23622: LD_INT 6
23624: PPUSH
23625: CALL_OW 12
23629: PUSH
23630: LD_INT 5
23632: PPUSH
23633: LD_INT 6
23635: PPUSH
23636: CALL_OW 12
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: PUSH
23646: LD_OWVAR 67
23650: ARRAY
23651: PPUSH
23652: LD_INT 0
23654: PPUSH
23655: LD_INT 0
23657: PPUSH
23658: LD_INT 0
23660: PPUSH
23661: LD_INT 0
23663: PPUSH
23664: LD_EXP 25
23668: PPUSH
23669: LD_EXP 26
23673: PPUSH
23674: CALL_OW 12
23678: PPUSH
23679: LD_INT 16
23681: PPUSH
23682: LD_INT 7
23684: PPUSH
23685: LD_INT 1
23687: PPUSH
23688: LD_INT 1
23690: PPUSH
23691: LD_INT 3
23693: PPUSH
23694: CALL_OW 12
23698: PPUSH
23699: CALL 12590 0 12
23703: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23704: LD_EXP 33
23708: PUSH
23709: LD_INT 1
23711: EQUAL
23712: PUSH
23713: LD_EXP 39
23717: PUSH
23718: LD_INT 0
23720: EQUAL
23721: AND
23722: IFFALSE 23818
23724: GO 23726
23726: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23727: LD_INT 16
23729: PPUSH
23730: LD_INT 6
23732: PPUSH
23733: LD_INT 4
23735: PPUSH
23736: LD_INT 5
23738: PPUSH
23739: CALL_OW 12
23743: PUSH
23744: LD_INT 6
23746: PPUSH
23747: LD_INT 7
23749: PPUSH
23750: CALL_OW 12
23754: PUSH
23755: LD_INT 7
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: LD_OWVAR 67
23767: ARRAY
23768: PPUSH
23769: LD_EXP 25
23773: PPUSH
23774: LD_EXP 26
23778: PPUSH
23779: CALL_OW 12
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: LD_INT 1
23789: PPUSH
23790: LD_INT 3
23792: PPUSH
23793: LD_INT 43
23795: PUSH
23796: LD_INT 44
23798: PUSH
23799: LD_INT 46
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: PPUSH
23807: EMPTY
23808: PPUSH
23809: EMPTY
23810: PPUSH
23811: LD_INT 1
23813: PPUSH
23814: CALL 14883 0 11
23818: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23819: LD_EXP 33
23823: PUSH
23824: LD_INT 1
23826: EQUAL
23827: PUSH
23828: LD_EXP 39
23832: PUSH
23833: LD_INT 0
23835: EQUAL
23836: AND
23837: IFFALSE 23933
23839: GO 23841
23841: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23842: LD_INT 16
23844: PPUSH
23845: LD_INT 6
23847: PPUSH
23848: LD_INT 4
23850: PPUSH
23851: LD_INT 5
23853: PPUSH
23854: CALL_OW 12
23858: PUSH
23859: LD_INT 6
23861: PPUSH
23862: LD_INT 7
23864: PPUSH
23865: CALL_OW 12
23869: PUSH
23870: LD_INT 7
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PUSH
23878: LD_OWVAR 67
23882: ARRAY
23883: PPUSH
23884: LD_EXP 25
23888: PPUSH
23889: LD_EXP 26
23893: PPUSH
23894: CALL_OW 12
23898: PPUSH
23899: LD_INT 3
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: LD_INT 3
23907: PPUSH
23908: LD_INT 43
23910: PUSH
23911: LD_INT 44
23913: PUSH
23914: LD_INT 46
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: PPUSH
23922: EMPTY
23923: PPUSH
23924: EMPTY
23925: PPUSH
23926: LD_INT 1
23928: PPUSH
23929: CALL 14883 0 11
23933: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
23934: LD_EXP 33
23938: PUSH
23939: LD_INT 1
23941: EQUAL
23942: PUSH
23943: LD_EXP 39
23947: PUSH
23948: LD_INT 0
23950: EQUAL
23951: AND
23952: IFFALSE 24028
23954: GO 23956
23956: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23957: LD_INT 16
23959: PPUSH
23960: LD_INT 6
23962: PPUSH
23963: LD_INT 4
23965: PUSH
23966: LD_INT 6
23968: PUSH
23969: LD_INT 7
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: LD_OWVAR 67
23981: ARRAY
23982: PPUSH
23983: LD_EXP 25
23987: PPUSH
23988: LD_EXP 26
23992: PPUSH
23993: CALL_OW 12
23997: PPUSH
23998: LD_INT 3
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: LD_INT 3
24006: PPUSH
24007: LD_INT 44
24009: PUSH
24010: LD_INT 46
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PPUSH
24017: EMPTY
24018: PPUSH
24019: EMPTY
24020: PPUSH
24021: LD_INT 1
24023: PPUSH
24024: CALL 14883 0 11
24028: END
// every 1 1$00 trigger secondAttack = 1 do
24029: LD_EXP 34
24033: PUSH
24034: LD_INT 1
24036: EQUAL
24037: IFFALSE 24119
24039: GO 24041
24041: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24042: LD_INT 6
24044: PPUSH
24045: LD_INT 3
24047: PPUSH
24048: LD_INT 3
24050: PUSH
24051: LD_INT 4
24053: PUSH
24054: LD_INT 5
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: LD_OWVAR 67
24066: ARRAY
24067: PPUSH
24068: LD_INT 0
24070: PPUSH
24071: LD_INT 0
24073: PPUSH
24074: LD_INT 0
24076: PPUSH
24077: LD_INT 0
24079: PPUSH
24080: LD_EXP 25
24084: PPUSH
24085: LD_EXP 26
24089: PPUSH
24090: CALL_OW 12
24094: PPUSH
24095: LD_INT 16
24097: PPUSH
24098: LD_INT 7
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: LD_INT 1
24106: PPUSH
24107: LD_INT 3
24109: PPUSH
24110: CALL_OW 12
24114: PPUSH
24115: CALL 12590 0 12
24119: END
// every 1 1$00 trigger secondAttack = 1 do
24120: LD_EXP 34
24124: PUSH
24125: LD_INT 1
24127: EQUAL
24128: IFFALSE 24232
24130: GO 24132
24132: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24133: LD_INT 16
24135: PPUSH
24136: LD_INT 6
24138: PPUSH
24139: LD_INT 5
24141: PPUSH
24142: LD_INT 6
24144: PPUSH
24145: CALL_OW 12
24149: PUSH
24150: LD_INT 6
24152: PPUSH
24153: LD_INT 9
24155: PPUSH
24156: CALL_OW 12
24160: PUSH
24161: LD_INT 7
24163: PPUSH
24164: LD_INT 9
24166: PPUSH
24167: CALL_OW 12
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: PUSH
24177: LD_OWVAR 67
24181: ARRAY
24182: PPUSH
24183: LD_EXP 25
24187: PPUSH
24188: LD_EXP 26
24192: PPUSH
24193: CALL_OW 12
24197: PPUSH
24198: LD_INT 3
24200: PPUSH
24201: LD_INT 1
24203: PPUSH
24204: LD_INT 3
24206: PPUSH
24207: LD_INT 43
24209: PUSH
24210: LD_INT 44
24212: PUSH
24213: LD_INT 46
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: PPUSH
24221: EMPTY
24222: PPUSH
24223: EMPTY
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: CALL 14883 0 11
24232: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24233: LD_EXP 18
24237: PUSH
24238: LD_INT 0
24240: EQUAL
24241: IFFALSE 24323
24243: GO 24245
24245: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24246: LD_INT 6
24248: PPUSH
24249: LD_INT 3
24251: PPUSH
24252: LD_INT 3
24254: PUSH
24255: LD_INT 4
24257: PUSH
24258: LD_INT 5
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PUSH
24266: LD_OWVAR 67
24270: ARRAY
24271: PPUSH
24272: LD_INT 0
24274: PPUSH
24275: LD_INT 0
24277: PPUSH
24278: LD_INT 0
24280: PPUSH
24281: LD_INT 0
24283: PPUSH
24284: LD_EXP 25
24288: PPUSH
24289: LD_EXP 26
24293: PPUSH
24294: CALL_OW 12
24298: PPUSH
24299: LD_INT 16
24301: PPUSH
24302: LD_INT 7
24304: PPUSH
24305: LD_INT 1
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: LD_INT 3
24313: PPUSH
24314: CALL_OW 12
24318: PPUSH
24319: CALL 12590 0 12
24323: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24324: LD_EXP 18
24328: PUSH
24329: LD_INT 0
24331: EQUAL
24332: IFFALSE 24432
24334: GO 24336
24336: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24337: LD_INT 16
24339: PPUSH
24340: LD_INT 6
24342: PPUSH
24343: LD_INT 5
24345: PPUSH
24346: LD_INT 6
24348: PPUSH
24349: CALL_OW 12
24353: PUSH
24354: LD_INT 6
24356: PPUSH
24357: LD_INT 9
24359: PPUSH
24360: CALL_OW 12
24364: PUSH
24365: LD_INT 7
24367: PPUSH
24368: LD_INT 9
24370: PPUSH
24371: CALL_OW 12
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: LD_OWVAR 67
24385: ARRAY
24386: PPUSH
24387: LD_EXP 25
24391: PPUSH
24392: LD_EXP 26
24396: PPUSH
24397: CALL_OW 12
24401: PPUSH
24402: LD_INT 3
24404: PPUSH
24405: LD_INT 1
24407: PPUSH
24408: LD_INT 3
24410: PPUSH
24411: LD_INT 44
24413: PUSH
24414: LD_INT 46
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PPUSH
24421: EMPTY
24422: PPUSH
24423: EMPTY
24424: PPUSH
24425: LD_INT 1
24427: PPUSH
24428: CALL 14883 0 11
24432: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24433: LD_EXP 18
24437: PUSH
24438: LD_INT 0
24440: EQUAL
24441: IFFALSE 24523
24443: GO 24445
24445: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24446: LD_INT 6
24448: PPUSH
24449: LD_INT 3
24451: PPUSH
24452: LD_INT 3
24454: PUSH
24455: LD_INT 4
24457: PUSH
24458: LD_INT 5
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: PUSH
24466: LD_OWVAR 67
24470: ARRAY
24471: PPUSH
24472: LD_INT 0
24474: PPUSH
24475: LD_INT 0
24477: PPUSH
24478: LD_INT 0
24480: PPUSH
24481: LD_INT 0
24483: PPUSH
24484: LD_EXP 25
24488: PPUSH
24489: LD_EXP 26
24493: PPUSH
24494: CALL_OW 12
24498: PPUSH
24499: LD_INT 16
24501: PPUSH
24502: LD_INT 7
24504: PPUSH
24505: LD_INT 1
24507: PPUSH
24508: LD_INT 1
24510: PPUSH
24511: LD_INT 3
24513: PPUSH
24514: CALL_OW 12
24518: PPUSH
24519: CALL 12590 0 12
24523: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24524: LD_EXP 18
24528: PUSH
24529: LD_INT 0
24531: EQUAL
24532: IFFALSE 24632
24534: GO 24536
24536: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24537: LD_INT 16
24539: PPUSH
24540: LD_INT 6
24542: PPUSH
24543: LD_INT 5
24545: PPUSH
24546: LD_INT 6
24548: PPUSH
24549: CALL_OW 12
24553: PUSH
24554: LD_INT 6
24556: PPUSH
24557: LD_INT 9
24559: PPUSH
24560: CALL_OW 12
24564: PUSH
24565: LD_INT 7
24567: PPUSH
24568: LD_INT 9
24570: PPUSH
24571: CALL_OW 12
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: PUSH
24581: LD_OWVAR 67
24585: ARRAY
24586: PPUSH
24587: LD_EXP 25
24591: PPUSH
24592: LD_EXP 26
24596: PPUSH
24597: CALL_OW 12
24601: PPUSH
24602: LD_INT 3
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: LD_INT 3
24610: PPUSH
24611: LD_INT 44
24613: PUSH
24614: LD_INT 46
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PPUSH
24621: EMPTY
24622: PPUSH
24623: EMPTY
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: CALL 14883 0 11
24632: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24633: LD_EXP 18
24637: PUSH
24638: LD_INT 0
24640: EQUAL
24641: IFFALSE 24723
24643: GO 24645
24645: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24646: LD_INT 6
24648: PPUSH
24649: LD_INT 3
24651: PPUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 4
24657: PUSH
24658: LD_INT 5
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: PUSH
24666: LD_OWVAR 67
24670: ARRAY
24671: PPUSH
24672: LD_INT 0
24674: PPUSH
24675: LD_INT 0
24677: PPUSH
24678: LD_INT 0
24680: PPUSH
24681: LD_INT 0
24683: PPUSH
24684: LD_EXP 25
24688: PPUSH
24689: LD_EXP 26
24693: PPUSH
24694: CALL_OW 12
24698: PPUSH
24699: LD_INT 16
24701: PPUSH
24702: LD_INT 7
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: LD_INT 1
24710: PPUSH
24711: LD_INT 3
24713: PPUSH
24714: CALL_OW 12
24718: PPUSH
24719: CALL 12590 0 12
24723: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24724: LD_EXP 18
24728: PUSH
24729: LD_INT 0
24731: EQUAL
24732: IFFALSE 24808
24734: GO 24736
24736: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24737: LD_INT 16
24739: PPUSH
24740: LD_INT 6
24742: PPUSH
24743: LD_INT 7
24745: PUSH
24746: LD_INT 8
24748: PUSH
24749: LD_INT 9
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: PUSH
24757: LD_OWVAR 67
24761: ARRAY
24762: PPUSH
24763: LD_EXP 25
24767: PPUSH
24768: LD_EXP 26
24772: PPUSH
24773: CALL_OW 12
24777: PPUSH
24778: LD_INT 3
24780: PPUSH
24781: LD_INT 1
24783: PPUSH
24784: LD_INT 3
24786: PPUSH
24787: LD_INT 44
24789: PUSH
24790: LD_INT 46
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PPUSH
24797: EMPTY
24798: PPUSH
24799: EMPTY
24800: PPUSH
24801: LD_INT 1
24803: PPUSH
24804: CALL 14883 0 11
24808: END
// every 0 0$1 trigger timerStatus = 1 do
24809: LD_EXP 35
24813: PUSH
24814: LD_INT 1
24816: EQUAL
24817: IFFALSE 24877
24819: GO 24821
24821: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24822: LD_INT 35
24824: PPUSH
24825: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24829: LD_ADDR_OWVAR 47
24833: PUSH
24834: LD_STRING #Am08-1
24836: PUSH
24837: LD_EXP 19
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24846: LD_ADDR_EXP 19
24850: PUSH
24851: LD_EXP 19
24855: PUSH
24856: LD_INT 35
24858: MINUS
24859: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24860: LD_EXP 19
24864: PUSH
24865: LD_INT 0
24867: EQUAL
24868: IFFALSE 24822
// display_strings := [ ] ;
24870: LD_ADDR_OWVAR 47
24874: PUSH
24875: EMPTY
24876: ST_TO_ADDR
// end ; end_of_file
24877: END
// every 1 1$0 do
24878: GO 24880
24880: DISABLE
// begin if supply <= 13 and supply > 7 then
24881: LD_EXP 40
24885: PUSH
24886: LD_INT 13
24888: LESSEQUAL
24889: PUSH
24890: LD_EXP 40
24894: PUSH
24895: LD_INT 7
24897: GREATER
24898: AND
24899: IFFALSE 24922
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
24901: LD_INT 3
24903: PPUSH
24904: LD_INT 5
24906: PPUSH
24907: CALL_OW 12
24911: PPUSH
24912: LD_INT 5
24914: PPUSH
24915: LD_INT 1
24917: PPUSH
24918: CALL_OW 55
// if supply <= 7 and supply > 4 then
24922: LD_EXP 40
24926: PUSH
24927: LD_INT 7
24929: LESSEQUAL
24930: PUSH
24931: LD_EXP 40
24935: PUSH
24936: LD_INT 4
24938: GREATER
24939: AND
24940: IFFALSE 24963
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
24942: LD_INT 3
24944: PPUSH
24945: LD_INT 5
24947: PPUSH
24948: CALL_OW 12
24952: PPUSH
24953: LD_INT 20
24955: PPUSH
24956: LD_INT 1
24958: PPUSH
24959: CALL_OW 55
// if supply <= 4 and supply > 0 then
24963: LD_EXP 40
24967: PUSH
24968: LD_INT 4
24970: LESSEQUAL
24971: PUSH
24972: LD_EXP 40
24976: PUSH
24977: LD_INT 0
24979: GREATER
24980: AND
24981: IFFALSE 25004
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
24983: LD_INT 3
24985: PPUSH
24986: LD_INT 5
24988: PPUSH
24989: CALL_OW 12
24993: PPUSH
24994: LD_INT 21
24996: PPUSH
24997: LD_INT 1
24999: PPUSH
25000: CALL_OW 55
// if supply > 0 then
25004: LD_EXP 40
25008: PUSH
25009: LD_INT 0
25011: GREATER
25012: IFFALSE 25029
// begin supply = supply - 1 ;
25014: LD_ADDR_EXP 40
25018: PUSH
25019: LD_EXP 40
25023: PUSH
25024: LD_INT 1
25026: MINUS
25027: ST_TO_ADDR
// enable ;
25028: ENABLE
// end ; end ; end_of_file
25029: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25030: LD_EXP 39
25034: PUSH
25035: LD_INT 1
25037: EQUAL
25038: PUSH
25039: LD_EXP 1
25043: PPUSH
25044: CALL_OW 301
25048: AND
25049: IFFALSE 25061
25051: GO 25053
25053: DISABLE
// YouLost ( JMM ) ;
25054: LD_STRING JMM
25056: PPUSH
25057: CALL_OW 104
25061: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25062: LD_EXP 18
25066: PUSH
25067: LD_INT 1
25069: EQUAL
25070: PUSH
25071: LD_EXP 16
25075: PPUSH
25076: CALL_OW 301
25080: AND
25081: IFFALSE 25113
25083: GO 25085
25085: DISABLE
// begin DialogueOn ;
25086: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25090: LD_EXP 23
25094: PPUSH
25095: LD_STRING D8a-Pow-1
25097: PPUSH
25098: CALL_OW 94
// DialogueOff ;
25102: CALL_OW 7
// YouLost ( Dismissed ) ;
25106: LD_STRING Dismissed
25108: PPUSH
25109: CALL_OW 104
// end ;
25113: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25114: LD_INT 22
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: LD_INT 30
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 30
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: PUSH
25161: LD_INT 0
25163: EQUAL
25164: IFFALSE 25176
25166: GO 25168
25168: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25169: LD_STRING Destroyed
25171: PPUSH
25172: CALL_OW 104
25176: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25177: LD_EXP 24
25181: PPUSH
25182: CALL_OW 301
25186: PUSH
25187: LD_INT 22
25189: PUSH
25190: LD_INT 3
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 21
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PPUSH
25211: CALL_OW 69
25215: PUSH
25216: LD_INT 7
25218: PUSH
25219: LD_INT 6
25221: PUSH
25222: LD_INT 5
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: PUSH
25230: LD_OWVAR 67
25234: ARRAY
25235: LESS
25236: AND
25237: PUSH
25238: LD_EXP 1
25242: PPUSH
25243: CALL_OW 305
25247: AND
25248: IFFALSE 25804
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
25256: PPUSH
25257: PPUSH
// begin russianAI = 0 ;
25258: LD_ADDR_EXP 27
25262: PUSH
25263: LD_INT 0
25265: ST_TO_ADDR
// escapeAvalaible = 1 ;
25266: LD_ADDR_EXP 36
25270: PUSH
25271: LD_INT 1
25273: ST_TO_ADDR
// Video ( true ) ;
25274: LD_INT 1
25276: PPUSH
25277: CALL 81029 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25281: LD_INT 3
25283: PPUSH
25284: LD_INT 1
25286: PPUSH
25287: LD_INT 1
25289: PPUSH
25290: LD_INT 0
25292: PPUSH
25293: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25297: LD_INT 6
25299: PPUSH
25300: LD_INT 1
25302: PPUSH
25303: LD_INT 1
25305: PPUSH
25306: LD_INT 0
25308: PPUSH
25309: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25313: LD_INT 3
25315: PPUSH
25316: LD_INT 1
25318: PPUSH
25319: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25323: LD_INT 97
25325: PPUSH
25326: LD_INT 91
25328: PPUSH
25329: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25333: LD_INT 22
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 21
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PPUSH
25357: CALL_OW 69
25361: PPUSH
25362: CALL_OW 121
// wait ( 0 0$01 ) ;
25366: LD_INT 35
25368: PPUSH
25369: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25373: LD_INT 22
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 21
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PPUSH
25397: CALL_OW 69
25401: PPUSH
25402: LD_INT 124
25404: PPUSH
25405: LD_INT 98
25407: PPUSH
25408: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25412: LD_INT 22
25414: PUSH
25415: LD_INT 6
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 21
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PPUSH
25436: CALL_OW 69
25440: PPUSH
25441: CALL_OW 121
// wait ( 0 0$01 ) ;
25445: LD_INT 35
25447: PPUSH
25448: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25452: LD_INT 22
25454: PUSH
25455: LD_INT 6
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 21
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 69
25480: PPUSH
25481: LD_INT 124
25483: PPUSH
25484: LD_INT 98
25486: PPUSH
25487: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25491: LD_INT 22
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 21
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: LD_INT 54
25516: PUSH
25517: EMPTY
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: PPUSH
25529: CALL_OW 69
25533: PPUSH
25534: LD_INT 124
25536: PPUSH
25537: LD_INT 98
25539: PPUSH
25540: CALL_OW 114
// wait ( 0 0$4 ) ;
25544: LD_INT 140
25546: PPUSH
25547: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25551: LD_INT 124
25553: PPUSH
25554: LD_INT 98
25556: PPUSH
25557: CALL_OW 84
// if SikorskyStatus = 1 then
25561: LD_EXP 21
25565: PUSH
25566: LD_INT 1
25568: EQUAL
25569: IFFALSE 25583
// Say ( Sikorski , D9-Sik-1 ) ;
25571: LD_EXP 16
25575: PPUSH
25576: LD_STRING D9-Sik-1
25578: PPUSH
25579: CALL_OW 88
// if SikorskyStatus = 2 then
25583: LD_EXP 21
25587: PUSH
25588: LD_INT 2
25590: EQUAL
25591: IFFALSE 25612
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25593: LD_EXP 23
25597: PPUSH
25598: LD_STRING D8b-Pow-1
25600: PPUSH
25601: CALL_OW 94
// YouLost ( Dismissed ) ;
25605: LD_STRING Dismissed
25607: PPUSH
25608: CALL_OW 104
// end ; p := 0 0$0 ;
25612: LD_ADDR_VAR 0 3
25616: PUSH
25617: LD_INT 0
25619: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25620: LD_ADDR_VAR 0 2
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 22
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 22
25640: PUSH
25641: LD_INT 6
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 21
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25672: LD_INT 35
25674: PPUSH
25675: CALL_OW 67
// p := p + 0 0$1 ;
25679: LD_ADDR_VAR 0 3
25683: PUSH
25684: LD_VAR 0 3
25688: PUSH
25689: LD_INT 35
25691: PLUS
25692: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_INT 22
25700: PPUSH
25701: CALL_OW 113
// for i in tmp do
25705: LD_ADDR_VAR 0 1
25709: PUSH
25710: LD_VAR 0 2
25714: PUSH
25715: FOR_IN
25716: IFFALSE 25743
// if IsInArea ( i , RussianEscape ) then
25718: LD_VAR 0 1
25722: PPUSH
25723: LD_INT 22
25725: PPUSH
25726: CALL_OW 308
25730: IFFALSE 25741
// RemoveUnit ( i ) ;
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 64
25741: GO 25715
25743: POP
25744: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25745: LD_INT 23
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 21
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 24
25767: PUSH
25768: LD_INT 250
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 69
25784: PUSH
25785: LD_INT 0
25787: EQUAL
25788: PUSH
25789: LD_VAR 0 3
25793: PUSH
25794: LD_INT 245
25796: GREATEREQUAL
25797: OR
25798: IFFALSE 25672
// FinishMission ;
25800: CALL 25807 0 0
// end ;
25804: PPOPN 3
25806: END
// export function FinishMission ; var tmp ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25811: LD_INT 22
25813: PUSH
25814: LD_INT 4
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PPUSH
25821: CALL_OW 69
25825: PUSH
25826: LD_INT 0
25828: EQUAL
25829: IFFALSE 25838
// SetAchievement ( ACH_BLITZKRIEG ) ;
25831: LD_STRING ACH_BLITZKRIEG
25833: PPUSH
25834: CALL_OW 543
// if tick <= 25 25$00 then
25838: LD_OWVAR 1
25842: PUSH
25843: LD_INT 52500
25845: LESSEQUAL
25846: IFFALSE 25862
// begin wait ( 3 ) ;
25848: LD_INT 3
25850: PPUSH
25851: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25855: LD_STRING ACH_ASPEED_8
25857: PPUSH
25858: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25862: LD_STRING med1
25864: PPUSH
25865: LD_INT 1
25867: PPUSH
25868: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25872: LD_STRING med2
25874: PPUSH
25875: LD_INT 1
25877: PPUSH
25878: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25882: LD_STRING perfect
25884: PPUSH
25885: LD_INT 1
25887: PPUSH
25888: CALL_OW 101
// if Difficulty = 3 then
25892: LD_OWVAR 67
25896: PUSH
25897: LD_INT 3
25899: EQUAL
25900: IFFALSE 25912
// SetAchievementEX ( ACH_AMER , 8 ) ;
25902: LD_STRING ACH_AMER
25904: PPUSH
25905: LD_INT 8
25907: PPUSH
25908: CALL_OW 564
// GiveMedals ( Main ) ;
25912: LD_STRING Main
25914: PPUSH
25915: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
25919: LD_INT 22
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 23
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 21
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: LD_INT 25
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 25
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 25
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 25
25984: PUSH
25985: LD_INT 4
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL_OW 69
26009: PPUSH
26010: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26014: LD_EXP 1
26018: PPUSH
26019: LD_EXP 43
26023: PUSH
26024: LD_STRING JMM
26026: STR
26027: PPUSH
26028: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26032: LD_EXP 2
26036: PPUSH
26037: LD_EXP 43
26041: PUSH
26042: LD_STRING Brown
26044: STR
26045: PPUSH
26046: CALL 8437 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26050: LD_EXP 3
26054: PPUSH
26055: LD_EXP 43
26059: PUSH
26060: LD_STRING Donaldson
26062: STR
26063: PPUSH
26064: CALL 8437 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26068: LD_EXP 4
26072: PPUSH
26073: LD_EXP 43
26077: PUSH
26078: LD_STRING Bobby
26080: STR
26081: PPUSH
26082: CALL 8437 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26086: LD_EXP 5
26090: PPUSH
26091: LD_EXP 43
26095: PUSH
26096: LD_STRING Cyrus
26098: STR
26099: PPUSH
26100: CALL 8437 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26104: LD_EXP 6
26108: PPUSH
26109: LD_EXP 43
26113: PUSH
26114: LD_STRING Lisa
26116: STR
26117: PPUSH
26118: CALL 8437 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26122: LD_EXP 7
26126: PPUSH
26127: LD_EXP 43
26131: PUSH
26132: LD_STRING Frank
26134: STR
26135: PPUSH
26136: CALL 8437 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26140: LD_EXP 8
26144: PPUSH
26145: LD_EXP 43
26149: PUSH
26150: LD_STRING Gladstone
26152: STR
26153: PPUSH
26154: CALL 8437 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26158: LD_EXP 9
26162: PPUSH
26163: LD_EXP 43
26167: PUSH
26168: LD_STRING Kikuchi
26170: STR
26171: PPUSH
26172: CALL 8437 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26176: LD_EXP 14
26180: PPUSH
26181: LD_EXP 43
26185: PUSH
26186: LD_STRING Denis
26188: STR
26189: PPUSH
26190: CALL 8437 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26194: LD_EXP 15
26198: PPUSH
26199: LD_EXP 43
26203: PUSH
26204: LD_STRING Joan
26206: STR
26207: PPUSH
26208: CALL 8437 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26212: LD_EXP 10
26216: PPUSH
26217: LD_EXP 43
26221: PUSH
26222: LD_STRING Khatam
26224: STR
26225: PPUSH
26226: CALL 8437 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26230: LD_EXP 13
26234: PPUSH
26235: LD_EXP 43
26239: PUSH
26240: LD_STRING Houten
26242: STR
26243: PPUSH
26244: CALL 8437 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26248: LD_INT 50
26250: PUSH
26251: EMPTY
26252: LIST
26253: PUSH
26254: LD_INT 22
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 21
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: LD_INT 25
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 25
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 25
26299: PUSH
26300: LD_INT 3
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 25
26309: PUSH
26310: LD_INT 4
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: PPUSH
26330: CALL_OW 69
26334: PUSH
26335: LD_EXP 1
26339: PUSH
26340: LD_EXP 2
26344: PUSH
26345: LD_EXP 3
26349: PUSH
26350: LD_EXP 4
26354: PUSH
26355: LD_EXP 5
26359: PUSH
26360: LD_EXP 6
26364: PUSH
26365: LD_EXP 7
26369: PUSH
26370: LD_EXP 8
26374: PUSH
26375: LD_EXP 9
26379: PUSH
26380: LD_EXP 14
26384: PUSH
26385: LD_EXP 15
26389: PUSH
26390: LD_EXP 13
26394: PUSH
26395: LD_EXP 10
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: DIFF
26415: PPUSH
26416: LD_STRING 08_other_survivors
26418: PPUSH
26419: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26423: LD_INT 23
26425: PPUSH
26426: CALL 26439 0 1
// YouWin ;
26430: CALL_OW 103
// end ;
26434: LD_VAR 0 1
26438: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26439: LD_INT 0
26441: PPUSH
26442: PPUSH
26443: PPUSH
26444: PPUSH
// gammaBase = [ ] ;
26445: LD_ADDR_VAR 0 4
26449: PUSH
26450: EMPTY
26451: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26452: LD_ADDR_VAR 0 5
26456: PUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_INT 22
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 21
26474: PUSH
26475: LD_INT 3
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 50
26484: PUSH
26485: EMPTY
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: PPUSH
26493: CALL_OW 70
26497: ST_TO_ADDR
// for i in buildings do
26498: LD_ADDR_VAR 0 3
26502: PUSH
26503: LD_VAR 0 5
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26946
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26511: LD_VAR 0 3
26515: PPUSH
26516: CALL_OW 266
26520: PUSH
26521: LD_INT 6
26523: PUSH
26524: LD_INT 7
26526: PUSH
26527: LD_INT 8
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: IN
26535: IFFALSE 26649
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26537: LD_ADDR_VAR 0 4
26541: PUSH
26542: LD_VAR 0 4
26546: PUSH
26547: LD_VAR 0 3
26551: PPUSH
26552: CALL_OW 266
26556: PUSH
26557: LD_VAR 0 3
26561: PPUSH
26562: CALL_OW 250
26566: PUSH
26567: LD_VAR 0 3
26571: PPUSH
26572: CALL_OW 251
26576: PUSH
26577: LD_VAR 0 3
26581: PPUSH
26582: CALL_OW 254
26586: PUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: CALL_OW 267
26596: PUSH
26597: LD_VAR 0 3
26601: PPUSH
26602: CALL_OW 248
26606: PUSH
26607: LD_VAR 0 3
26611: PPUSH
26612: LD_INT 1
26614: PPUSH
26615: CALL_OW 268
26619: PUSH
26620: LD_VAR 0 3
26624: PPUSH
26625: LD_INT 2
26627: PPUSH
26628: CALL_OW 268
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: ADD
26646: ST_TO_ADDR
26647: GO 26944
// if GetBType ( i ) = b_bunker then
26649: LD_VAR 0 3
26653: PPUSH
26654: CALL_OW 266
26658: PUSH
26659: LD_INT 32
26661: EQUAL
26662: IFFALSE 26759
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26664: LD_ADDR_VAR 0 4
26668: PUSH
26669: LD_VAR 0 4
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 266
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 250
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 251
26703: PUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 254
26713: PUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: CALL_OW 267
26723: PUSH
26724: LD_VAR 0 3
26728: PPUSH
26729: CALL_OW 248
26733: PUSH
26734: LD_VAR 0 3
26738: PPUSH
26739: CALL_OW 269
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: ADD
26756: ST_TO_ADDR
26757: GO 26944
// if GetBType ( i ) = b_factory then
26759: LD_VAR 0 3
26763: PPUSH
26764: CALL_OW 266
26768: PUSH
26769: LD_INT 3
26771: EQUAL
26772: IFFALSE 26862
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26774: LD_ADDR_VAR 0 4
26778: PUSH
26779: LD_VAR 0 4
26783: PPUSH
26784: LD_INT 1
26786: PPUSH
26787: LD_VAR 0 3
26791: PPUSH
26792: CALL_OW 266
26796: PUSH
26797: LD_VAR 0 3
26801: PPUSH
26802: CALL_OW 250
26806: PUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: CALL_OW 251
26816: PUSH
26817: LD_VAR 0 3
26821: PPUSH
26822: CALL_OW 254
26826: PUSH
26827: LD_VAR 0 3
26831: PPUSH
26832: CALL_OW 267
26836: PUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 248
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 2
26859: ST_TO_ADDR
26860: GO 26944
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26862: LD_ADDR_VAR 0 4
26866: PUSH
26867: LD_VAR 0 4
26871: PUSH
26872: LD_VAR 0 3
26876: PPUSH
26877: CALL_OW 266
26881: PUSH
26882: LD_VAR 0 3
26886: PPUSH
26887: CALL_OW 250
26891: PUSH
26892: LD_VAR 0 3
26896: PPUSH
26897: CALL_OW 251
26901: PUSH
26902: LD_VAR 0 3
26906: PPUSH
26907: CALL_OW 254
26911: PUSH
26912: LD_VAR 0 3
26916: PPUSH
26917: CALL_OW 267
26921: PUSH
26922: LD_VAR 0 3
26926: PPUSH
26927: CALL_OW 248
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: ADD
26943: ST_TO_ADDR
// end ;
26944: GO 26508
26946: POP
26947: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
26948: LD_VAR 0 4
26952: PPUSH
26953: LD_STRING 08_GammaBase
26955: PPUSH
26956: CALL_OW 39
// end ; end_of_file
26960: LD_VAR 0 2
26964: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
26965: LD_INT 0
26967: PPUSH
// ar_miner := 81 ;
26968: LD_ADDR_EXP 55
26972: PUSH
26973: LD_INT 81
26975: ST_TO_ADDR
// ar_crane := 88 ;
26976: LD_ADDR_EXP 54
26980: PUSH
26981: LD_INT 88
26983: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
26984: LD_ADDR_EXP 49
26988: PUSH
26989: LD_INT 89
26991: ST_TO_ADDR
// us_hack := 99 ;
26992: LD_ADDR_EXP 50
26996: PUSH
26997: LD_INT 99
26999: ST_TO_ADDR
// us_artillery := 97 ;
27000: LD_ADDR_EXP 51
27004: PUSH
27005: LD_INT 97
27007: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27008: LD_ADDR_EXP 52
27012: PUSH
27013: LD_INT 91
27015: ST_TO_ADDR
// ar_mortar := 92 ;
27016: LD_ADDR_EXP 53
27020: PUSH
27021: LD_INT 92
27023: ST_TO_ADDR
// ru_radar := 98 ;
27024: LD_ADDR_EXP 48
27028: PUSH
27029: LD_INT 98
27031: ST_TO_ADDR
// tech_Artillery := 80 ;
27032: LD_ADDR_EXP 56
27036: PUSH
27037: LD_INT 80
27039: ST_TO_ADDR
// tech_RadMat := 81 ;
27040: LD_ADDR_EXP 57
27044: PUSH
27045: LD_INT 81
27047: ST_TO_ADDR
// tech_BasicTools := 82 ;
27048: LD_ADDR_EXP 58
27052: PUSH
27053: LD_INT 82
27055: ST_TO_ADDR
// tech_Cargo := 83 ;
27056: LD_ADDR_EXP 59
27060: PUSH
27061: LD_INT 83
27063: ST_TO_ADDR
// tech_Track := 84 ;
27064: LD_ADDR_EXP 60
27068: PUSH
27069: LD_INT 84
27071: ST_TO_ADDR
// tech_Crane := 85 ;
27072: LD_ADDR_EXP 61
27076: PUSH
27077: LD_INT 85
27079: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27080: LD_ADDR_EXP 62
27084: PUSH
27085: LD_INT 86
27087: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27088: LD_ADDR_EXP 63
27092: PUSH
27093: LD_INT 87
27095: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27096: LD_ADDR_EXP 64
27100: PUSH
27101: LD_INT 88
27103: ST_TO_ADDR
// class_mastodont := 31 ;
27104: LD_ADDR_EXP 65
27108: PUSH
27109: LD_INT 31
27111: ST_TO_ADDR
// class_horse := 21 ;
27112: LD_ADDR_EXP 66
27116: PUSH
27117: LD_INT 21
27119: ST_TO_ADDR
// end ;
27120: LD_VAR 0 1
27124: RET
// every 1 do
27125: GO 27127
27127: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27128: CALL 26965 0 0
27132: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27133: LD_INT 0
27135: PPUSH
// if p2 = 100 then
27136: LD_VAR 0 2
27140: PUSH
27141: LD_INT 100
27143: EQUAL
27144: IFFALSE 28093
// begin if not StreamModeActive then
27146: LD_EXP 67
27150: NOT
27151: IFFALSE 27161
// StreamModeActive := true ;
27153: LD_ADDR_EXP 67
27157: PUSH
27158: LD_INT 1
27160: ST_TO_ADDR
// if p3 = 0 then
27161: LD_VAR 0 3
27165: PUSH
27166: LD_INT 0
27168: EQUAL
27169: IFFALSE 27175
// InitStreamMode ;
27171: CALL 28253 0 0
// if p3 = 1 then
27175: LD_VAR 0 3
27179: PUSH
27180: LD_INT 1
27182: EQUAL
27183: IFFALSE 27193
// sRocket := true ;
27185: LD_ADDR_EXP 72
27189: PUSH
27190: LD_INT 1
27192: ST_TO_ADDR
// if p3 = 2 then
27193: LD_VAR 0 3
27197: PUSH
27198: LD_INT 2
27200: EQUAL
27201: IFFALSE 27211
// sSpeed := true ;
27203: LD_ADDR_EXP 71
27207: PUSH
27208: LD_INT 1
27210: ST_TO_ADDR
// if p3 = 3 then
27211: LD_VAR 0 3
27215: PUSH
27216: LD_INT 3
27218: EQUAL
27219: IFFALSE 27229
// sEngine := true ;
27221: LD_ADDR_EXP 73
27225: PUSH
27226: LD_INT 1
27228: ST_TO_ADDR
// if p3 = 4 then
27229: LD_VAR 0 3
27233: PUSH
27234: LD_INT 4
27236: EQUAL
27237: IFFALSE 27247
// sSpec := true ;
27239: LD_ADDR_EXP 70
27243: PUSH
27244: LD_INT 1
27246: ST_TO_ADDR
// if p3 = 5 then
27247: LD_VAR 0 3
27251: PUSH
27252: LD_INT 5
27254: EQUAL
27255: IFFALSE 27265
// sLevel := true ;
27257: LD_ADDR_EXP 74
27261: PUSH
27262: LD_INT 1
27264: ST_TO_ADDR
// if p3 = 6 then
27265: LD_VAR 0 3
27269: PUSH
27270: LD_INT 6
27272: EQUAL
27273: IFFALSE 27283
// sArmoury := true ;
27275: LD_ADDR_EXP 75
27279: PUSH
27280: LD_INT 1
27282: ST_TO_ADDR
// if p3 = 7 then
27283: LD_VAR 0 3
27287: PUSH
27288: LD_INT 7
27290: EQUAL
27291: IFFALSE 27301
// sRadar := true ;
27293: LD_ADDR_EXP 76
27297: PUSH
27298: LD_INT 1
27300: ST_TO_ADDR
// if p3 = 8 then
27301: LD_VAR 0 3
27305: PUSH
27306: LD_INT 8
27308: EQUAL
27309: IFFALSE 27319
// sBunker := true ;
27311: LD_ADDR_EXP 77
27315: PUSH
27316: LD_INT 1
27318: ST_TO_ADDR
// if p3 = 9 then
27319: LD_VAR 0 3
27323: PUSH
27324: LD_INT 9
27326: EQUAL
27327: IFFALSE 27337
// sHack := true ;
27329: LD_ADDR_EXP 78
27333: PUSH
27334: LD_INT 1
27336: ST_TO_ADDR
// if p3 = 10 then
27337: LD_VAR 0 3
27341: PUSH
27342: LD_INT 10
27344: EQUAL
27345: IFFALSE 27355
// sFire := true ;
27347: LD_ADDR_EXP 79
27351: PUSH
27352: LD_INT 1
27354: ST_TO_ADDR
// if p3 = 11 then
27355: LD_VAR 0 3
27359: PUSH
27360: LD_INT 11
27362: EQUAL
27363: IFFALSE 27373
// sRefresh := true ;
27365: LD_ADDR_EXP 80
27369: PUSH
27370: LD_INT 1
27372: ST_TO_ADDR
// if p3 = 12 then
27373: LD_VAR 0 3
27377: PUSH
27378: LD_INT 12
27380: EQUAL
27381: IFFALSE 27391
// sExp := true ;
27383: LD_ADDR_EXP 81
27387: PUSH
27388: LD_INT 1
27390: ST_TO_ADDR
// if p3 = 13 then
27391: LD_VAR 0 3
27395: PUSH
27396: LD_INT 13
27398: EQUAL
27399: IFFALSE 27409
// sDepot := true ;
27401: LD_ADDR_EXP 82
27405: PUSH
27406: LD_INT 1
27408: ST_TO_ADDR
// if p3 = 14 then
27409: LD_VAR 0 3
27413: PUSH
27414: LD_INT 14
27416: EQUAL
27417: IFFALSE 27427
// sFlag := true ;
27419: LD_ADDR_EXP 83
27423: PUSH
27424: LD_INT 1
27426: ST_TO_ADDR
// if p3 = 15 then
27427: LD_VAR 0 3
27431: PUSH
27432: LD_INT 15
27434: EQUAL
27435: IFFALSE 27445
// sKamikadze := true ;
27437: LD_ADDR_EXP 91
27441: PUSH
27442: LD_INT 1
27444: ST_TO_ADDR
// if p3 = 16 then
27445: LD_VAR 0 3
27449: PUSH
27450: LD_INT 16
27452: EQUAL
27453: IFFALSE 27463
// sTroll := true ;
27455: LD_ADDR_EXP 92
27459: PUSH
27460: LD_INT 1
27462: ST_TO_ADDR
// if p3 = 17 then
27463: LD_VAR 0 3
27467: PUSH
27468: LD_INT 17
27470: EQUAL
27471: IFFALSE 27481
// sSlow := true ;
27473: LD_ADDR_EXP 93
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// if p3 = 18 then
27481: LD_VAR 0 3
27485: PUSH
27486: LD_INT 18
27488: EQUAL
27489: IFFALSE 27499
// sLack := true ;
27491: LD_ADDR_EXP 94
27495: PUSH
27496: LD_INT 1
27498: ST_TO_ADDR
// if p3 = 19 then
27499: LD_VAR 0 3
27503: PUSH
27504: LD_INT 19
27506: EQUAL
27507: IFFALSE 27517
// sTank := true ;
27509: LD_ADDR_EXP 96
27513: PUSH
27514: LD_INT 1
27516: ST_TO_ADDR
// if p3 = 20 then
27517: LD_VAR 0 3
27521: PUSH
27522: LD_INT 20
27524: EQUAL
27525: IFFALSE 27535
// sRemote := true ;
27527: LD_ADDR_EXP 97
27531: PUSH
27532: LD_INT 1
27534: ST_TO_ADDR
// if p3 = 21 then
27535: LD_VAR 0 3
27539: PUSH
27540: LD_INT 21
27542: EQUAL
27543: IFFALSE 27553
// sPowell := true ;
27545: LD_ADDR_EXP 98
27549: PUSH
27550: LD_INT 1
27552: ST_TO_ADDR
// if p3 = 22 then
27553: LD_VAR 0 3
27557: PUSH
27558: LD_INT 22
27560: EQUAL
27561: IFFALSE 27571
// sTeleport := true ;
27563: LD_ADDR_EXP 101
27567: PUSH
27568: LD_INT 1
27570: ST_TO_ADDR
// if p3 = 23 then
27571: LD_VAR 0 3
27575: PUSH
27576: LD_INT 23
27578: EQUAL
27579: IFFALSE 27589
// sOilTower := true ;
27581: LD_ADDR_EXP 103
27585: PUSH
27586: LD_INT 1
27588: ST_TO_ADDR
// if p3 = 24 then
27589: LD_VAR 0 3
27593: PUSH
27594: LD_INT 24
27596: EQUAL
27597: IFFALSE 27607
// sShovel := true ;
27599: LD_ADDR_EXP 104
27603: PUSH
27604: LD_INT 1
27606: ST_TO_ADDR
// if p3 = 25 then
27607: LD_VAR 0 3
27611: PUSH
27612: LD_INT 25
27614: EQUAL
27615: IFFALSE 27625
// sSheik := true ;
27617: LD_ADDR_EXP 105
27621: PUSH
27622: LD_INT 1
27624: ST_TO_ADDR
// if p3 = 26 then
27625: LD_VAR 0 3
27629: PUSH
27630: LD_INT 26
27632: EQUAL
27633: IFFALSE 27643
// sEarthquake := true ;
27635: LD_ADDR_EXP 107
27639: PUSH
27640: LD_INT 1
27642: ST_TO_ADDR
// if p3 = 27 then
27643: LD_VAR 0 3
27647: PUSH
27648: LD_INT 27
27650: EQUAL
27651: IFFALSE 27661
// sAI := true ;
27653: LD_ADDR_EXP 108
27657: PUSH
27658: LD_INT 1
27660: ST_TO_ADDR
// if p3 = 28 then
27661: LD_VAR 0 3
27665: PUSH
27666: LD_INT 28
27668: EQUAL
27669: IFFALSE 27679
// sCargo := true ;
27671: LD_ADDR_EXP 111
27675: PUSH
27676: LD_INT 1
27678: ST_TO_ADDR
// if p3 = 29 then
27679: LD_VAR 0 3
27683: PUSH
27684: LD_INT 29
27686: EQUAL
27687: IFFALSE 27697
// sDLaser := true ;
27689: LD_ADDR_EXP 112
27693: PUSH
27694: LD_INT 1
27696: ST_TO_ADDR
// if p3 = 30 then
27697: LD_VAR 0 3
27701: PUSH
27702: LD_INT 30
27704: EQUAL
27705: IFFALSE 27715
// sExchange := true ;
27707: LD_ADDR_EXP 113
27711: PUSH
27712: LD_INT 1
27714: ST_TO_ADDR
// if p3 = 31 then
27715: LD_VAR 0 3
27719: PUSH
27720: LD_INT 31
27722: EQUAL
27723: IFFALSE 27733
// sFac := true ;
27725: LD_ADDR_EXP 114
27729: PUSH
27730: LD_INT 1
27732: ST_TO_ADDR
// if p3 = 32 then
27733: LD_VAR 0 3
27737: PUSH
27738: LD_INT 32
27740: EQUAL
27741: IFFALSE 27751
// sPower := true ;
27743: LD_ADDR_EXP 115
27747: PUSH
27748: LD_INT 1
27750: ST_TO_ADDR
// if p3 = 33 then
27751: LD_VAR 0 3
27755: PUSH
27756: LD_INT 33
27758: EQUAL
27759: IFFALSE 27769
// sRandom := true ;
27761: LD_ADDR_EXP 116
27765: PUSH
27766: LD_INT 1
27768: ST_TO_ADDR
// if p3 = 34 then
27769: LD_VAR 0 3
27773: PUSH
27774: LD_INT 34
27776: EQUAL
27777: IFFALSE 27787
// sShield := true ;
27779: LD_ADDR_EXP 117
27783: PUSH
27784: LD_INT 1
27786: ST_TO_ADDR
// if p3 = 35 then
27787: LD_VAR 0 3
27791: PUSH
27792: LD_INT 35
27794: EQUAL
27795: IFFALSE 27805
// sTime := true ;
27797: LD_ADDR_EXP 118
27801: PUSH
27802: LD_INT 1
27804: ST_TO_ADDR
// if p3 = 36 then
27805: LD_VAR 0 3
27809: PUSH
27810: LD_INT 36
27812: EQUAL
27813: IFFALSE 27823
// sTools := true ;
27815: LD_ADDR_EXP 119
27819: PUSH
27820: LD_INT 1
27822: ST_TO_ADDR
// if p3 = 101 then
27823: LD_VAR 0 3
27827: PUSH
27828: LD_INT 101
27830: EQUAL
27831: IFFALSE 27841
// sSold := true ;
27833: LD_ADDR_EXP 84
27837: PUSH
27838: LD_INT 1
27840: ST_TO_ADDR
// if p3 = 102 then
27841: LD_VAR 0 3
27845: PUSH
27846: LD_INT 102
27848: EQUAL
27849: IFFALSE 27859
// sDiff := true ;
27851: LD_ADDR_EXP 85
27855: PUSH
27856: LD_INT 1
27858: ST_TO_ADDR
// if p3 = 103 then
27859: LD_VAR 0 3
27863: PUSH
27864: LD_INT 103
27866: EQUAL
27867: IFFALSE 27877
// sFog := true ;
27869: LD_ADDR_EXP 88
27873: PUSH
27874: LD_INT 1
27876: ST_TO_ADDR
// if p3 = 104 then
27877: LD_VAR 0 3
27881: PUSH
27882: LD_INT 104
27884: EQUAL
27885: IFFALSE 27895
// sReset := true ;
27887: LD_ADDR_EXP 89
27891: PUSH
27892: LD_INT 1
27894: ST_TO_ADDR
// if p3 = 105 then
27895: LD_VAR 0 3
27899: PUSH
27900: LD_INT 105
27902: EQUAL
27903: IFFALSE 27913
// sSun := true ;
27905: LD_ADDR_EXP 90
27909: PUSH
27910: LD_INT 1
27912: ST_TO_ADDR
// if p3 = 106 then
27913: LD_VAR 0 3
27917: PUSH
27918: LD_INT 106
27920: EQUAL
27921: IFFALSE 27931
// sTiger := true ;
27923: LD_ADDR_EXP 86
27927: PUSH
27928: LD_INT 1
27930: ST_TO_ADDR
// if p3 = 107 then
27931: LD_VAR 0 3
27935: PUSH
27936: LD_INT 107
27938: EQUAL
27939: IFFALSE 27949
// sBomb := true ;
27941: LD_ADDR_EXP 87
27945: PUSH
27946: LD_INT 1
27948: ST_TO_ADDR
// if p3 = 108 then
27949: LD_VAR 0 3
27953: PUSH
27954: LD_INT 108
27956: EQUAL
27957: IFFALSE 27967
// sWound := true ;
27959: LD_ADDR_EXP 95
27963: PUSH
27964: LD_INT 1
27966: ST_TO_ADDR
// if p3 = 109 then
27967: LD_VAR 0 3
27971: PUSH
27972: LD_INT 109
27974: EQUAL
27975: IFFALSE 27985
// sBetray := true ;
27977: LD_ADDR_EXP 99
27981: PUSH
27982: LD_INT 1
27984: ST_TO_ADDR
// if p3 = 110 then
27985: LD_VAR 0 3
27989: PUSH
27990: LD_INT 110
27992: EQUAL
27993: IFFALSE 28003
// sContamin := true ;
27995: LD_ADDR_EXP 100
27999: PUSH
28000: LD_INT 1
28002: ST_TO_ADDR
// if p3 = 111 then
28003: LD_VAR 0 3
28007: PUSH
28008: LD_INT 111
28010: EQUAL
28011: IFFALSE 28021
// sOil := true ;
28013: LD_ADDR_EXP 102
28017: PUSH
28018: LD_INT 1
28020: ST_TO_ADDR
// if p3 = 112 then
28021: LD_VAR 0 3
28025: PUSH
28026: LD_INT 112
28028: EQUAL
28029: IFFALSE 28039
// sStu := true ;
28031: LD_ADDR_EXP 106
28035: PUSH
28036: LD_INT 1
28038: ST_TO_ADDR
// if p3 = 113 then
28039: LD_VAR 0 3
28043: PUSH
28044: LD_INT 113
28046: EQUAL
28047: IFFALSE 28057
// sBazooka := true ;
28049: LD_ADDR_EXP 109
28053: PUSH
28054: LD_INT 1
28056: ST_TO_ADDR
// if p3 = 114 then
28057: LD_VAR 0 3
28061: PUSH
28062: LD_INT 114
28064: EQUAL
28065: IFFALSE 28075
// sMortar := true ;
28067: LD_ADDR_EXP 110
28071: PUSH
28072: LD_INT 1
28074: ST_TO_ADDR
// if p3 = 115 then
28075: LD_VAR 0 3
28079: PUSH
28080: LD_INT 115
28082: EQUAL
28083: IFFALSE 28093
// sRanger := true ;
28085: LD_ADDR_EXP 120
28089: PUSH
28090: LD_INT 1
28092: ST_TO_ADDR
// end ; if p2 = 101 then
28093: LD_VAR 0 2
28097: PUSH
28098: LD_INT 101
28100: EQUAL
28101: IFFALSE 28229
// begin case p3 of 1 :
28103: LD_VAR 0 3
28107: PUSH
28108: LD_INT 1
28110: DOUBLE
28111: EQUAL
28112: IFTRUE 28116
28114: GO 28123
28116: POP
// hHackUnlimitedResources ; 2 :
28117: CALL 39266 0 0
28121: GO 28229
28123: LD_INT 2
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28138
28131: POP
// hHackSetLevel10 ; 3 :
28132: CALL 39399 0 0
28136: GO 28229
28138: LD_INT 3
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28153
28146: POP
// hHackSetLevel10YourUnits ; 4 :
28147: CALL 39484 0 0
28151: GO 28229
28153: LD_INT 4
28155: DOUBLE
28156: EQUAL
28157: IFTRUE 28161
28159: GO 28168
28161: POP
// hHackInvincible ; 5 :
28162: CALL 39932 0 0
28166: GO 28229
28168: LD_INT 5
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28183
28176: POP
// hHackInvisible ; 6 :
28177: CALL 40043 0 0
28181: GO 28229
28183: LD_INT 6
28185: DOUBLE
28186: EQUAL
28187: IFTRUE 28191
28189: GO 28198
28191: POP
// hHackChangeYourSide ; 7 :
28192: CALL 40100 0 0
28196: GO 28229
28198: LD_INT 7
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28206
28204: GO 28213
28206: POP
// hHackChangeUnitSide ; 8 :
28207: CALL 40142 0 0
28211: GO 28229
28213: LD_INT 8
28215: DOUBLE
28216: EQUAL
28217: IFTRUE 28221
28219: GO 28228
28221: POP
// hHackFog ; end ;
28222: CALL 40243 0 0
28226: GO 28229
28228: POP
// end ; end ;
28229: LD_VAR 0 7
28233: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28234: GO 28236
28236: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28237: LD_STRING initStreamRollete();
28239: PPUSH
28240: CALL_OW 559
// InitStreamMode ;
28244: CALL 28253 0 0
// DefineStreamItems ( ) ;
28248: CALL 28693 0 0
// end ;
28252: END
// function InitStreamMode ; begin
28253: LD_INT 0
28255: PPUSH
// streamModeActive := false ;
28256: LD_ADDR_EXP 67
28260: PUSH
28261: LD_INT 0
28263: ST_TO_ADDR
// normalCounter := 36 ;
28264: LD_ADDR_EXP 68
28268: PUSH
28269: LD_INT 36
28271: ST_TO_ADDR
// hardcoreCounter := 16 ;
28272: LD_ADDR_EXP 69
28276: PUSH
28277: LD_INT 16
28279: ST_TO_ADDR
// sRocket := false ;
28280: LD_ADDR_EXP 72
28284: PUSH
28285: LD_INT 0
28287: ST_TO_ADDR
// sSpeed := false ;
28288: LD_ADDR_EXP 71
28292: PUSH
28293: LD_INT 0
28295: ST_TO_ADDR
// sEngine := false ;
28296: LD_ADDR_EXP 73
28300: PUSH
28301: LD_INT 0
28303: ST_TO_ADDR
// sSpec := false ;
28304: LD_ADDR_EXP 70
28308: PUSH
28309: LD_INT 0
28311: ST_TO_ADDR
// sLevel := false ;
28312: LD_ADDR_EXP 74
28316: PUSH
28317: LD_INT 0
28319: ST_TO_ADDR
// sArmoury := false ;
28320: LD_ADDR_EXP 75
28324: PUSH
28325: LD_INT 0
28327: ST_TO_ADDR
// sRadar := false ;
28328: LD_ADDR_EXP 76
28332: PUSH
28333: LD_INT 0
28335: ST_TO_ADDR
// sBunker := false ;
28336: LD_ADDR_EXP 77
28340: PUSH
28341: LD_INT 0
28343: ST_TO_ADDR
// sHack := false ;
28344: LD_ADDR_EXP 78
28348: PUSH
28349: LD_INT 0
28351: ST_TO_ADDR
// sFire := false ;
28352: LD_ADDR_EXP 79
28356: PUSH
28357: LD_INT 0
28359: ST_TO_ADDR
// sRefresh := false ;
28360: LD_ADDR_EXP 80
28364: PUSH
28365: LD_INT 0
28367: ST_TO_ADDR
// sExp := false ;
28368: LD_ADDR_EXP 81
28372: PUSH
28373: LD_INT 0
28375: ST_TO_ADDR
// sDepot := false ;
28376: LD_ADDR_EXP 82
28380: PUSH
28381: LD_INT 0
28383: ST_TO_ADDR
// sFlag := false ;
28384: LD_ADDR_EXP 83
28388: PUSH
28389: LD_INT 0
28391: ST_TO_ADDR
// sKamikadze := false ;
28392: LD_ADDR_EXP 91
28396: PUSH
28397: LD_INT 0
28399: ST_TO_ADDR
// sTroll := false ;
28400: LD_ADDR_EXP 92
28404: PUSH
28405: LD_INT 0
28407: ST_TO_ADDR
// sSlow := false ;
28408: LD_ADDR_EXP 93
28412: PUSH
28413: LD_INT 0
28415: ST_TO_ADDR
// sLack := false ;
28416: LD_ADDR_EXP 94
28420: PUSH
28421: LD_INT 0
28423: ST_TO_ADDR
// sTank := false ;
28424: LD_ADDR_EXP 96
28428: PUSH
28429: LD_INT 0
28431: ST_TO_ADDR
// sRemote := false ;
28432: LD_ADDR_EXP 97
28436: PUSH
28437: LD_INT 0
28439: ST_TO_ADDR
// sPowell := false ;
28440: LD_ADDR_EXP 98
28444: PUSH
28445: LD_INT 0
28447: ST_TO_ADDR
// sTeleport := false ;
28448: LD_ADDR_EXP 101
28452: PUSH
28453: LD_INT 0
28455: ST_TO_ADDR
// sOilTower := false ;
28456: LD_ADDR_EXP 103
28460: PUSH
28461: LD_INT 0
28463: ST_TO_ADDR
// sShovel := false ;
28464: LD_ADDR_EXP 104
28468: PUSH
28469: LD_INT 0
28471: ST_TO_ADDR
// sSheik := false ;
28472: LD_ADDR_EXP 105
28476: PUSH
28477: LD_INT 0
28479: ST_TO_ADDR
// sEarthquake := false ;
28480: LD_ADDR_EXP 107
28484: PUSH
28485: LD_INT 0
28487: ST_TO_ADDR
// sAI := false ;
28488: LD_ADDR_EXP 108
28492: PUSH
28493: LD_INT 0
28495: ST_TO_ADDR
// sCargo := false ;
28496: LD_ADDR_EXP 111
28500: PUSH
28501: LD_INT 0
28503: ST_TO_ADDR
// sDLaser := false ;
28504: LD_ADDR_EXP 112
28508: PUSH
28509: LD_INT 0
28511: ST_TO_ADDR
// sExchange := false ;
28512: LD_ADDR_EXP 113
28516: PUSH
28517: LD_INT 0
28519: ST_TO_ADDR
// sFac := false ;
28520: LD_ADDR_EXP 114
28524: PUSH
28525: LD_INT 0
28527: ST_TO_ADDR
// sPower := false ;
28528: LD_ADDR_EXP 115
28532: PUSH
28533: LD_INT 0
28535: ST_TO_ADDR
// sRandom := false ;
28536: LD_ADDR_EXP 116
28540: PUSH
28541: LD_INT 0
28543: ST_TO_ADDR
// sShield := false ;
28544: LD_ADDR_EXP 117
28548: PUSH
28549: LD_INT 0
28551: ST_TO_ADDR
// sTime := false ;
28552: LD_ADDR_EXP 118
28556: PUSH
28557: LD_INT 0
28559: ST_TO_ADDR
// sTools := false ;
28560: LD_ADDR_EXP 119
28564: PUSH
28565: LD_INT 0
28567: ST_TO_ADDR
// sSold := false ;
28568: LD_ADDR_EXP 84
28572: PUSH
28573: LD_INT 0
28575: ST_TO_ADDR
// sDiff := false ;
28576: LD_ADDR_EXP 85
28580: PUSH
28581: LD_INT 0
28583: ST_TO_ADDR
// sFog := false ;
28584: LD_ADDR_EXP 88
28588: PUSH
28589: LD_INT 0
28591: ST_TO_ADDR
// sReset := false ;
28592: LD_ADDR_EXP 89
28596: PUSH
28597: LD_INT 0
28599: ST_TO_ADDR
// sSun := false ;
28600: LD_ADDR_EXP 90
28604: PUSH
28605: LD_INT 0
28607: ST_TO_ADDR
// sTiger := false ;
28608: LD_ADDR_EXP 86
28612: PUSH
28613: LD_INT 0
28615: ST_TO_ADDR
// sBomb := false ;
28616: LD_ADDR_EXP 87
28620: PUSH
28621: LD_INT 0
28623: ST_TO_ADDR
// sWound := false ;
28624: LD_ADDR_EXP 95
28628: PUSH
28629: LD_INT 0
28631: ST_TO_ADDR
// sBetray := false ;
28632: LD_ADDR_EXP 99
28636: PUSH
28637: LD_INT 0
28639: ST_TO_ADDR
// sContamin := false ;
28640: LD_ADDR_EXP 100
28644: PUSH
28645: LD_INT 0
28647: ST_TO_ADDR
// sOil := false ;
28648: LD_ADDR_EXP 102
28652: PUSH
28653: LD_INT 0
28655: ST_TO_ADDR
// sStu := false ;
28656: LD_ADDR_EXP 106
28660: PUSH
28661: LD_INT 0
28663: ST_TO_ADDR
// sBazooka := false ;
28664: LD_ADDR_EXP 109
28668: PUSH
28669: LD_INT 0
28671: ST_TO_ADDR
// sMortar := false ;
28672: LD_ADDR_EXP 110
28676: PUSH
28677: LD_INT 0
28679: ST_TO_ADDR
// sRanger := false ;
28680: LD_ADDR_EXP 120
28684: PUSH
28685: LD_INT 0
28687: ST_TO_ADDR
// end ;
28688: LD_VAR 0 1
28692: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28693: LD_INT 0
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
// result := [ ] ;
28700: LD_ADDR_VAR 0 1
28704: PUSH
28705: EMPTY
28706: ST_TO_ADDR
// if campaign_id = 1 then
28707: LD_OWVAR 69
28711: PUSH
28712: LD_INT 1
28714: EQUAL
28715: IFFALSE 31653
// begin case mission_number of 1 :
28717: LD_OWVAR 70
28721: PUSH
28722: LD_INT 1
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28794
28730: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28731: LD_ADDR_VAR 0 1
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 11
28744: PUSH
28745: LD_INT 12
28747: PUSH
28748: LD_INT 15
28750: PUSH
28751: LD_INT 16
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_INT 23
28759: PUSH
28760: LD_INT 26
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 101
28776: PUSH
28777: LD_INT 102
28779: PUSH
28780: LD_INT 106
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: ST_TO_ADDR
28792: GO 31651
28794: LD_INT 2
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28874
28802: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28803: LD_ADDR_VAR 0 1
28807: PUSH
28808: LD_INT 2
28810: PUSH
28811: LD_INT 4
28813: PUSH
28814: LD_INT 11
28816: PUSH
28817: LD_INT 12
28819: PUSH
28820: LD_INT 15
28822: PUSH
28823: LD_INT 16
28825: PUSH
28826: LD_INT 22
28828: PUSH
28829: LD_INT 23
28831: PUSH
28832: LD_INT 26
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 101
28848: PUSH
28849: LD_INT 102
28851: PUSH
28852: LD_INT 105
28854: PUSH
28855: LD_INT 106
28857: PUSH
28858: LD_INT 108
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: ST_TO_ADDR
28872: GO 31651
28874: LD_INT 3
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28958
28882: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 4
28893: PUSH
28894: LD_INT 5
28896: PUSH
28897: LD_INT 11
28899: PUSH
28900: LD_INT 12
28902: PUSH
28903: LD_INT 15
28905: PUSH
28906: LD_INT 16
28908: PUSH
28909: LD_INT 22
28911: PUSH
28912: LD_INT 26
28914: PUSH
28915: LD_INT 36
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 101
28932: PUSH
28933: LD_INT 102
28935: PUSH
28936: LD_INT 105
28938: PUSH
28939: LD_INT 106
28941: PUSH
28942: LD_INT 108
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: ST_TO_ADDR
28956: GO 31651
28958: LD_INT 4
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28966
28964: GO 29050
28966: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
28967: LD_ADDR_VAR 0 1
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 4
28977: PUSH
28978: LD_INT 5
28980: PUSH
28981: LD_INT 8
28983: PUSH
28984: LD_INT 11
28986: PUSH
28987: LD_INT 12
28989: PUSH
28990: LD_INT 15
28992: PUSH
28993: LD_INT 16
28995: PUSH
28996: LD_INT 22
28998: PUSH
28999: LD_INT 23
29001: PUSH
29002: LD_INT 26
29004: PUSH
29005: LD_INT 36
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 101
29024: PUSH
29025: LD_INT 102
29027: PUSH
29028: LD_INT 105
29030: PUSH
29031: LD_INT 106
29033: PUSH
29034: LD_INT 108
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: ST_TO_ADDR
29048: GO 31651
29050: LD_INT 5
29052: DOUBLE
29053: EQUAL
29054: IFTRUE 29058
29056: GO 29158
29058: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
29059: LD_ADDR_VAR 0 1
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: LD_INT 4
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: LD_INT 6
29075: PUSH
29076: LD_INT 8
29078: PUSH
29079: LD_INT 11
29081: PUSH
29082: LD_INT 12
29084: PUSH
29085: LD_INT 15
29087: PUSH
29088: LD_INT 16
29090: PUSH
29091: LD_INT 22
29093: PUSH
29094: LD_INT 23
29096: PUSH
29097: LD_INT 25
29099: PUSH
29100: LD_INT 26
29102: PUSH
29103: LD_INT 36
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 101
29124: PUSH
29125: LD_INT 102
29127: PUSH
29128: LD_INT 105
29130: PUSH
29131: LD_INT 106
29133: PUSH
29134: LD_INT 108
29136: PUSH
29137: LD_INT 109
29139: PUSH
29140: LD_INT 112
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: ST_TO_ADDR
29156: GO 31651
29158: LD_INT 6
29160: DOUBLE
29161: EQUAL
29162: IFTRUE 29166
29164: GO 29286
29166: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29167: LD_ADDR_VAR 0 1
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 4
29177: PUSH
29178: LD_INT 5
29180: PUSH
29181: LD_INT 6
29183: PUSH
29184: LD_INT 8
29186: PUSH
29187: LD_INT 11
29189: PUSH
29190: LD_INT 12
29192: PUSH
29193: LD_INT 15
29195: PUSH
29196: LD_INT 16
29198: PUSH
29199: LD_INT 20
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 22
29207: PUSH
29208: LD_INT 23
29210: PUSH
29211: LD_INT 25
29213: PUSH
29214: LD_INT 26
29216: PUSH
29217: LD_INT 30
29219: PUSH
29220: LD_INT 31
29222: PUSH
29223: LD_INT 32
29225: PUSH
29226: LD_INT 36
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 101
29252: PUSH
29253: LD_INT 102
29255: PUSH
29256: LD_INT 105
29258: PUSH
29259: LD_INT 106
29261: PUSH
29262: LD_INT 108
29264: PUSH
29265: LD_INT 109
29267: PUSH
29268: LD_INT 112
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: ST_TO_ADDR
29284: GO 31651
29286: LD_INT 7
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29394
29294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29295: LD_ADDR_VAR 0 1
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: LD_INT 4
29305: PUSH
29306: LD_INT 5
29308: PUSH
29309: LD_INT 7
29311: PUSH
29312: LD_INT 11
29314: PUSH
29315: LD_INT 12
29317: PUSH
29318: LD_INT 15
29320: PUSH
29321: LD_INT 16
29323: PUSH
29324: LD_INT 20
29326: PUSH
29327: LD_INT 21
29329: PUSH
29330: LD_INT 22
29332: PUSH
29333: LD_INT 23
29335: PUSH
29336: LD_INT 25
29338: PUSH
29339: LD_INT 26
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 101
29360: PUSH
29361: LD_INT 102
29363: PUSH
29364: LD_INT 103
29366: PUSH
29367: LD_INT 105
29369: PUSH
29370: LD_INT 106
29372: PUSH
29373: LD_INT 108
29375: PUSH
29376: LD_INT 112
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: ST_TO_ADDR
29392: GO 31651
29394: LD_INT 8
29396: DOUBLE
29397: EQUAL
29398: IFTRUE 29402
29400: GO 29530
29402: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29403: LD_ADDR_VAR 0 1
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: LD_INT 4
29413: PUSH
29414: LD_INT 5
29416: PUSH
29417: LD_INT 6
29419: PUSH
29420: LD_INT 7
29422: PUSH
29423: LD_INT 8
29425: PUSH
29426: LD_INT 11
29428: PUSH
29429: LD_INT 12
29431: PUSH
29432: LD_INT 15
29434: PUSH
29435: LD_INT 16
29437: PUSH
29438: LD_INT 20
29440: PUSH
29441: LD_INT 21
29443: PUSH
29444: LD_INT 22
29446: PUSH
29447: LD_INT 23
29449: PUSH
29450: LD_INT 25
29452: PUSH
29453: LD_INT 26
29455: PUSH
29456: LD_INT 30
29458: PUSH
29459: LD_INT 31
29461: PUSH
29462: LD_INT 32
29464: PUSH
29465: LD_INT 36
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 101
29492: PUSH
29493: LD_INT 102
29495: PUSH
29496: LD_INT 103
29498: PUSH
29499: LD_INT 105
29501: PUSH
29502: LD_INT 106
29504: PUSH
29505: LD_INT 108
29507: PUSH
29508: LD_INT 109
29510: PUSH
29511: LD_INT 112
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: ST_TO_ADDR
29528: GO 31651
29530: LD_INT 9
29532: DOUBLE
29533: EQUAL
29534: IFTRUE 29538
29536: GO 29674
29538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: LD_INT 4
29549: PUSH
29550: LD_INT 5
29552: PUSH
29553: LD_INT 6
29555: PUSH
29556: LD_INT 7
29558: PUSH
29559: LD_INT 8
29561: PUSH
29562: LD_INT 11
29564: PUSH
29565: LD_INT 12
29567: PUSH
29568: LD_INT 15
29570: PUSH
29571: LD_INT 16
29573: PUSH
29574: LD_INT 20
29576: PUSH
29577: LD_INT 21
29579: PUSH
29580: LD_INT 22
29582: PUSH
29583: LD_INT 23
29585: PUSH
29586: LD_INT 25
29588: PUSH
29589: LD_INT 26
29591: PUSH
29592: LD_INT 28
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 31
29600: PUSH
29601: LD_INT 32
29603: PUSH
29604: LD_INT 36
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 101
29632: PUSH
29633: LD_INT 102
29635: PUSH
29636: LD_INT 103
29638: PUSH
29639: LD_INT 105
29641: PUSH
29642: LD_INT 106
29644: PUSH
29645: LD_INT 108
29647: PUSH
29648: LD_INT 109
29650: PUSH
29651: LD_INT 112
29653: PUSH
29654: LD_INT 114
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: ST_TO_ADDR
29672: GO 31651
29674: LD_INT 10
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29866
29682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29683: LD_ADDR_VAR 0 1
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 4
29693: PUSH
29694: LD_INT 5
29696: PUSH
29697: LD_INT 6
29699: PUSH
29700: LD_INT 7
29702: PUSH
29703: LD_INT 8
29705: PUSH
29706: LD_INT 9
29708: PUSH
29709: LD_INT 10
29711: PUSH
29712: LD_INT 11
29714: PUSH
29715: LD_INT 12
29717: PUSH
29718: LD_INT 13
29720: PUSH
29721: LD_INT 14
29723: PUSH
29724: LD_INT 15
29726: PUSH
29727: LD_INT 16
29729: PUSH
29730: LD_INT 17
29732: PUSH
29733: LD_INT 18
29735: PUSH
29736: LD_INT 19
29738: PUSH
29739: LD_INT 20
29741: PUSH
29742: LD_INT 21
29744: PUSH
29745: LD_INT 22
29747: PUSH
29748: LD_INT 23
29750: PUSH
29751: LD_INT 24
29753: PUSH
29754: LD_INT 25
29756: PUSH
29757: LD_INT 26
29759: PUSH
29760: LD_INT 28
29762: PUSH
29763: LD_INT 30
29765: PUSH
29766: LD_INT 31
29768: PUSH
29769: LD_INT 32
29771: PUSH
29772: LD_INT 36
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 101
29808: PUSH
29809: LD_INT 102
29811: PUSH
29812: LD_INT 103
29814: PUSH
29815: LD_INT 104
29817: PUSH
29818: LD_INT 105
29820: PUSH
29821: LD_INT 106
29823: PUSH
29824: LD_INT 107
29826: PUSH
29827: LD_INT 108
29829: PUSH
29830: LD_INT 109
29832: PUSH
29833: LD_INT 110
29835: PUSH
29836: LD_INT 111
29838: PUSH
29839: LD_INT 112
29841: PUSH
29842: LD_INT 114
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: ST_TO_ADDR
29864: GO 31651
29866: LD_INT 11
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 30066
29874: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29875: LD_ADDR_VAR 0 1
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 4
29888: PUSH
29889: LD_INT 5
29891: PUSH
29892: LD_INT 6
29894: PUSH
29895: LD_INT 7
29897: PUSH
29898: LD_INT 8
29900: PUSH
29901: LD_INT 9
29903: PUSH
29904: LD_INT 10
29906: PUSH
29907: LD_INT 11
29909: PUSH
29910: LD_INT 12
29912: PUSH
29913: LD_INT 13
29915: PUSH
29916: LD_INT 14
29918: PUSH
29919: LD_INT 15
29921: PUSH
29922: LD_INT 16
29924: PUSH
29925: LD_INT 17
29927: PUSH
29928: LD_INT 18
29930: PUSH
29931: LD_INT 19
29933: PUSH
29934: LD_INT 20
29936: PUSH
29937: LD_INT 21
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_INT 23
29945: PUSH
29946: LD_INT 24
29948: PUSH
29949: LD_INT 25
29951: PUSH
29952: LD_INT 26
29954: PUSH
29955: LD_INT 28
29957: PUSH
29958: LD_INT 30
29960: PUSH
29961: LD_INT 31
29963: PUSH
29964: LD_INT 32
29966: PUSH
29967: LD_INT 34
29969: PUSH
29970: LD_INT 36
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 101
30008: PUSH
30009: LD_INT 102
30011: PUSH
30012: LD_INT 103
30014: PUSH
30015: LD_INT 104
30017: PUSH
30018: LD_INT 105
30020: PUSH
30021: LD_INT 106
30023: PUSH
30024: LD_INT 107
30026: PUSH
30027: LD_INT 108
30029: PUSH
30030: LD_INT 109
30032: PUSH
30033: LD_INT 110
30035: PUSH
30036: LD_INT 111
30038: PUSH
30039: LD_INT 112
30041: PUSH
30042: LD_INT 114
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: ST_TO_ADDR
30064: GO 31651
30066: LD_INT 12
30068: DOUBLE
30069: EQUAL
30070: IFTRUE 30074
30072: GO 30282
30074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30075: LD_ADDR_VAR 0 1
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: LD_INT 4
30091: PUSH
30092: LD_INT 5
30094: PUSH
30095: LD_INT 6
30097: PUSH
30098: LD_INT 7
30100: PUSH
30101: LD_INT 8
30103: PUSH
30104: LD_INT 9
30106: PUSH
30107: LD_INT 10
30109: PUSH
30110: LD_INT 11
30112: PUSH
30113: LD_INT 12
30115: PUSH
30116: LD_INT 13
30118: PUSH
30119: LD_INT 14
30121: PUSH
30122: LD_INT 15
30124: PUSH
30125: LD_INT 16
30127: PUSH
30128: LD_INT 17
30130: PUSH
30131: LD_INT 18
30133: PUSH
30134: LD_INT 19
30136: PUSH
30137: LD_INT 20
30139: PUSH
30140: LD_INT 21
30142: PUSH
30143: LD_INT 22
30145: PUSH
30146: LD_INT 23
30148: PUSH
30149: LD_INT 24
30151: PUSH
30152: LD_INT 25
30154: PUSH
30155: LD_INT 26
30157: PUSH
30158: LD_INT 27
30160: PUSH
30161: LD_INT 28
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 31
30169: PUSH
30170: LD_INT 32
30172: PUSH
30173: LD_INT 33
30175: PUSH
30176: LD_INT 34
30178: PUSH
30179: LD_INT 36
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 101
30220: PUSH
30221: LD_INT 102
30223: PUSH
30224: LD_INT 103
30226: PUSH
30227: LD_INT 104
30229: PUSH
30230: LD_INT 105
30232: PUSH
30233: LD_INT 106
30235: PUSH
30236: LD_INT 107
30238: PUSH
30239: LD_INT 108
30241: PUSH
30242: LD_INT 109
30244: PUSH
30245: LD_INT 110
30247: PUSH
30248: LD_INT 111
30250: PUSH
30251: LD_INT 112
30253: PUSH
30254: LD_INT 113
30256: PUSH
30257: LD_INT 114
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: ST_TO_ADDR
30280: GO 31651
30282: LD_INT 13
30284: DOUBLE
30285: EQUAL
30286: IFTRUE 30290
30288: GO 30486
30290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30291: LD_ADDR_VAR 0 1
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 4
30307: PUSH
30308: LD_INT 5
30310: PUSH
30311: LD_INT 8
30313: PUSH
30314: LD_INT 9
30316: PUSH
30317: LD_INT 10
30319: PUSH
30320: LD_INT 11
30322: PUSH
30323: LD_INT 12
30325: PUSH
30326: LD_INT 14
30328: PUSH
30329: LD_INT 15
30331: PUSH
30332: LD_INT 16
30334: PUSH
30335: LD_INT 17
30337: PUSH
30338: LD_INT 18
30340: PUSH
30341: LD_INT 19
30343: PUSH
30344: LD_INT 20
30346: PUSH
30347: LD_INT 21
30349: PUSH
30350: LD_INT 22
30352: PUSH
30353: LD_INT 23
30355: PUSH
30356: LD_INT 24
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 26
30364: PUSH
30365: LD_INT 27
30367: PUSH
30368: LD_INT 28
30370: PUSH
30371: LD_INT 30
30373: PUSH
30374: LD_INT 31
30376: PUSH
30377: LD_INT 32
30379: PUSH
30380: LD_INT 33
30382: PUSH
30383: LD_INT 34
30385: PUSH
30386: LD_INT 36
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 101
30424: PUSH
30425: LD_INT 102
30427: PUSH
30428: LD_INT 103
30430: PUSH
30431: LD_INT 104
30433: PUSH
30434: LD_INT 105
30436: PUSH
30437: LD_INT 106
30439: PUSH
30440: LD_INT 107
30442: PUSH
30443: LD_INT 108
30445: PUSH
30446: LD_INT 109
30448: PUSH
30449: LD_INT 110
30451: PUSH
30452: LD_INT 111
30454: PUSH
30455: LD_INT 112
30457: PUSH
30458: LD_INT 113
30460: PUSH
30461: LD_INT 114
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: ST_TO_ADDR
30484: GO 31651
30486: LD_INT 14
30488: DOUBLE
30489: EQUAL
30490: IFTRUE 30494
30492: GO 30706
30494: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30495: LD_ADDR_VAR 0 1
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: LD_INT 4
30511: PUSH
30512: LD_INT 5
30514: PUSH
30515: LD_INT 6
30517: PUSH
30518: LD_INT 7
30520: PUSH
30521: LD_INT 8
30523: PUSH
30524: LD_INT 9
30526: PUSH
30527: LD_INT 10
30529: PUSH
30530: LD_INT 11
30532: PUSH
30533: LD_INT 12
30535: PUSH
30536: LD_INT 13
30538: PUSH
30539: LD_INT 14
30541: PUSH
30542: LD_INT 15
30544: PUSH
30545: LD_INT 16
30547: PUSH
30548: LD_INT 17
30550: PUSH
30551: LD_INT 18
30553: PUSH
30554: LD_INT 19
30556: PUSH
30557: LD_INT 20
30559: PUSH
30560: LD_INT 21
30562: PUSH
30563: LD_INT 22
30565: PUSH
30566: LD_INT 23
30568: PUSH
30569: LD_INT 24
30571: PUSH
30572: LD_INT 25
30574: PUSH
30575: LD_INT 26
30577: PUSH
30578: LD_INT 27
30580: PUSH
30581: LD_INT 28
30583: PUSH
30584: LD_INT 29
30586: PUSH
30587: LD_INT 30
30589: PUSH
30590: LD_INT 31
30592: PUSH
30593: LD_INT 32
30595: PUSH
30596: LD_INT 33
30598: PUSH
30599: LD_INT 34
30601: PUSH
30602: LD_INT 36
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 101
30644: PUSH
30645: LD_INT 102
30647: PUSH
30648: LD_INT 103
30650: PUSH
30651: LD_INT 104
30653: PUSH
30654: LD_INT 105
30656: PUSH
30657: LD_INT 106
30659: PUSH
30660: LD_INT 107
30662: PUSH
30663: LD_INT 108
30665: PUSH
30666: LD_INT 109
30668: PUSH
30669: LD_INT 110
30671: PUSH
30672: LD_INT 111
30674: PUSH
30675: LD_INT 112
30677: PUSH
30678: LD_INT 113
30680: PUSH
30681: LD_INT 114
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: ST_TO_ADDR
30704: GO 31651
30706: LD_INT 15
30708: DOUBLE
30709: EQUAL
30710: IFTRUE 30714
30712: GO 30926
30714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30715: LD_ADDR_VAR 0 1
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 5
30734: PUSH
30735: LD_INT 6
30737: PUSH
30738: LD_INT 7
30740: PUSH
30741: LD_INT 8
30743: PUSH
30744: LD_INT 9
30746: PUSH
30747: LD_INT 10
30749: PUSH
30750: LD_INT 11
30752: PUSH
30753: LD_INT 12
30755: PUSH
30756: LD_INT 13
30758: PUSH
30759: LD_INT 14
30761: PUSH
30762: LD_INT 15
30764: PUSH
30765: LD_INT 16
30767: PUSH
30768: LD_INT 17
30770: PUSH
30771: LD_INT 18
30773: PUSH
30774: LD_INT 19
30776: PUSH
30777: LD_INT 20
30779: PUSH
30780: LD_INT 21
30782: PUSH
30783: LD_INT 22
30785: PUSH
30786: LD_INT 23
30788: PUSH
30789: LD_INT 24
30791: PUSH
30792: LD_INT 25
30794: PUSH
30795: LD_INT 26
30797: PUSH
30798: LD_INT 27
30800: PUSH
30801: LD_INT 28
30803: PUSH
30804: LD_INT 29
30806: PUSH
30807: LD_INT 30
30809: PUSH
30810: LD_INT 31
30812: PUSH
30813: LD_INT 32
30815: PUSH
30816: LD_INT 33
30818: PUSH
30819: LD_INT 34
30821: PUSH
30822: LD_INT 36
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 101
30864: PUSH
30865: LD_INT 102
30867: PUSH
30868: LD_INT 103
30870: PUSH
30871: LD_INT 104
30873: PUSH
30874: LD_INT 105
30876: PUSH
30877: LD_INT 106
30879: PUSH
30880: LD_INT 107
30882: PUSH
30883: LD_INT 108
30885: PUSH
30886: LD_INT 109
30888: PUSH
30889: LD_INT 110
30891: PUSH
30892: LD_INT 111
30894: PUSH
30895: LD_INT 112
30897: PUSH
30898: LD_INT 113
30900: PUSH
30901: LD_INT 114
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: ST_TO_ADDR
30924: GO 31651
30926: LD_INT 16
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 31058
30934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
30935: LD_ADDR_VAR 0 1
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: LD_INT 4
30945: PUSH
30946: LD_INT 5
30948: PUSH
30949: LD_INT 7
30951: PUSH
30952: LD_INT 11
30954: PUSH
30955: LD_INT 12
30957: PUSH
30958: LD_INT 15
30960: PUSH
30961: LD_INT 16
30963: PUSH
30964: LD_INT 20
30966: PUSH
30967: LD_INT 21
30969: PUSH
30970: LD_INT 22
30972: PUSH
30973: LD_INT 23
30975: PUSH
30976: LD_INT 25
30978: PUSH
30979: LD_INT 26
30981: PUSH
30982: LD_INT 30
30984: PUSH
30985: LD_INT 31
30987: PUSH
30988: LD_INT 32
30990: PUSH
30991: LD_INT 33
30993: PUSH
30994: LD_INT 34
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 101
31020: PUSH
31021: LD_INT 102
31023: PUSH
31024: LD_INT 103
31026: PUSH
31027: LD_INT 106
31029: PUSH
31030: LD_INT 108
31032: PUSH
31033: LD_INT 112
31035: PUSH
31036: LD_INT 113
31038: PUSH
31039: LD_INT 114
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: ST_TO_ADDR
31056: GO 31651
31058: LD_INT 17
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31278
31066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
31067: LD_ADDR_VAR 0 1
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 3
31080: PUSH
31081: LD_INT 4
31083: PUSH
31084: LD_INT 5
31086: PUSH
31087: LD_INT 6
31089: PUSH
31090: LD_INT 7
31092: PUSH
31093: LD_INT 8
31095: PUSH
31096: LD_INT 9
31098: PUSH
31099: LD_INT 10
31101: PUSH
31102: LD_INT 11
31104: PUSH
31105: LD_INT 12
31107: PUSH
31108: LD_INT 13
31110: PUSH
31111: LD_INT 14
31113: PUSH
31114: LD_INT 15
31116: PUSH
31117: LD_INT 16
31119: PUSH
31120: LD_INT 17
31122: PUSH
31123: LD_INT 18
31125: PUSH
31126: LD_INT 19
31128: PUSH
31129: LD_INT 20
31131: PUSH
31132: LD_INT 21
31134: PUSH
31135: LD_INT 22
31137: PUSH
31138: LD_INT 23
31140: PUSH
31141: LD_INT 24
31143: PUSH
31144: LD_INT 25
31146: PUSH
31147: LD_INT 26
31149: PUSH
31150: LD_INT 27
31152: PUSH
31153: LD_INT 28
31155: PUSH
31156: LD_INT 29
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 31
31164: PUSH
31165: LD_INT 32
31167: PUSH
31168: LD_INT 33
31170: PUSH
31171: LD_INT 34
31173: PUSH
31174: LD_INT 36
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 101
31216: PUSH
31217: LD_INT 102
31219: PUSH
31220: LD_INT 103
31222: PUSH
31223: LD_INT 104
31225: PUSH
31226: LD_INT 105
31228: PUSH
31229: LD_INT 106
31231: PUSH
31232: LD_INT 107
31234: PUSH
31235: LD_INT 108
31237: PUSH
31238: LD_INT 109
31240: PUSH
31241: LD_INT 110
31243: PUSH
31244: LD_INT 111
31246: PUSH
31247: LD_INT 112
31249: PUSH
31250: LD_INT 113
31252: PUSH
31253: LD_INT 114
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: ST_TO_ADDR
31276: GO 31651
31278: LD_INT 18
31280: DOUBLE
31281: EQUAL
31282: IFTRUE 31286
31284: GO 31422
31286: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31287: LD_ADDR_VAR 0 1
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 4
31297: PUSH
31298: LD_INT 5
31300: PUSH
31301: LD_INT 7
31303: PUSH
31304: LD_INT 11
31306: PUSH
31307: LD_INT 12
31309: PUSH
31310: LD_INT 15
31312: PUSH
31313: LD_INT 16
31315: PUSH
31316: LD_INT 20
31318: PUSH
31319: LD_INT 21
31321: PUSH
31322: LD_INT 22
31324: PUSH
31325: LD_INT 23
31327: PUSH
31328: LD_INT 25
31330: PUSH
31331: LD_INT 26
31333: PUSH
31334: LD_INT 30
31336: PUSH
31337: LD_INT 31
31339: PUSH
31340: LD_INT 32
31342: PUSH
31343: LD_INT 33
31345: PUSH
31346: LD_INT 34
31348: PUSH
31349: LD_INT 35
31351: PUSH
31352: LD_INT 36
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 101
31380: PUSH
31381: LD_INT 102
31383: PUSH
31384: LD_INT 103
31386: PUSH
31387: LD_INT 106
31389: PUSH
31390: LD_INT 108
31392: PUSH
31393: LD_INT 112
31395: PUSH
31396: LD_INT 113
31398: PUSH
31399: LD_INT 114
31401: PUSH
31402: LD_INT 115
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: ST_TO_ADDR
31420: GO 31651
31422: LD_INT 19
31424: DOUBLE
31425: EQUAL
31426: IFTRUE 31430
31428: GO 31650
31430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31431: LD_ADDR_VAR 0 1
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: LD_INT 3
31444: PUSH
31445: LD_INT 4
31447: PUSH
31448: LD_INT 5
31450: PUSH
31451: LD_INT 6
31453: PUSH
31454: LD_INT 7
31456: PUSH
31457: LD_INT 8
31459: PUSH
31460: LD_INT 9
31462: PUSH
31463: LD_INT 10
31465: PUSH
31466: LD_INT 11
31468: PUSH
31469: LD_INT 12
31471: PUSH
31472: LD_INT 13
31474: PUSH
31475: LD_INT 14
31477: PUSH
31478: LD_INT 15
31480: PUSH
31481: LD_INT 16
31483: PUSH
31484: LD_INT 17
31486: PUSH
31487: LD_INT 18
31489: PUSH
31490: LD_INT 19
31492: PUSH
31493: LD_INT 20
31495: PUSH
31496: LD_INT 21
31498: PUSH
31499: LD_INT 22
31501: PUSH
31502: LD_INT 23
31504: PUSH
31505: LD_INT 24
31507: PUSH
31508: LD_INT 25
31510: PUSH
31511: LD_INT 26
31513: PUSH
31514: LD_INT 27
31516: PUSH
31517: LD_INT 28
31519: PUSH
31520: LD_INT 29
31522: PUSH
31523: LD_INT 30
31525: PUSH
31526: LD_INT 31
31528: PUSH
31529: LD_INT 32
31531: PUSH
31532: LD_INT 33
31534: PUSH
31535: LD_INT 34
31537: PUSH
31538: LD_INT 35
31540: PUSH
31541: LD_INT 36
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 101
31584: PUSH
31585: LD_INT 102
31587: PUSH
31588: LD_INT 103
31590: PUSH
31591: LD_INT 104
31593: PUSH
31594: LD_INT 105
31596: PUSH
31597: LD_INT 106
31599: PUSH
31600: LD_INT 107
31602: PUSH
31603: LD_INT 108
31605: PUSH
31606: LD_INT 109
31608: PUSH
31609: LD_INT 110
31611: PUSH
31612: LD_INT 111
31614: PUSH
31615: LD_INT 112
31617: PUSH
31618: LD_INT 113
31620: PUSH
31621: LD_INT 114
31623: PUSH
31624: LD_INT 115
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: ST_TO_ADDR
31648: GO 31651
31650: POP
// end else
31651: GO 31870
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31653: LD_ADDR_VAR 0 1
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 2
31663: PUSH
31664: LD_INT 3
31666: PUSH
31667: LD_INT 4
31669: PUSH
31670: LD_INT 5
31672: PUSH
31673: LD_INT 6
31675: PUSH
31676: LD_INT 7
31678: PUSH
31679: LD_INT 8
31681: PUSH
31682: LD_INT 9
31684: PUSH
31685: LD_INT 10
31687: PUSH
31688: LD_INT 11
31690: PUSH
31691: LD_INT 12
31693: PUSH
31694: LD_INT 13
31696: PUSH
31697: LD_INT 14
31699: PUSH
31700: LD_INT 15
31702: PUSH
31703: LD_INT 16
31705: PUSH
31706: LD_INT 17
31708: PUSH
31709: LD_INT 18
31711: PUSH
31712: LD_INT 19
31714: PUSH
31715: LD_INT 20
31717: PUSH
31718: LD_INT 21
31720: PUSH
31721: LD_INT 22
31723: PUSH
31724: LD_INT 23
31726: PUSH
31727: LD_INT 24
31729: PUSH
31730: LD_INT 25
31732: PUSH
31733: LD_INT 26
31735: PUSH
31736: LD_INT 27
31738: PUSH
31739: LD_INT 28
31741: PUSH
31742: LD_INT 29
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: LD_INT 31
31750: PUSH
31751: LD_INT 32
31753: PUSH
31754: LD_INT 33
31756: PUSH
31757: LD_INT 34
31759: PUSH
31760: LD_INT 35
31762: PUSH
31763: LD_INT 36
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 101
31806: PUSH
31807: LD_INT 102
31809: PUSH
31810: LD_INT 103
31812: PUSH
31813: LD_INT 104
31815: PUSH
31816: LD_INT 105
31818: PUSH
31819: LD_INT 106
31821: PUSH
31822: LD_INT 107
31824: PUSH
31825: LD_INT 108
31827: PUSH
31828: LD_INT 109
31830: PUSH
31831: LD_INT 110
31833: PUSH
31834: LD_INT 111
31836: PUSH
31837: LD_INT 112
31839: PUSH
31840: LD_INT 113
31842: PUSH
31843: LD_INT 114
31845: PUSH
31846: LD_INT 115
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// if result then
31870: LD_VAR 0 1
31874: IFFALSE 32163
// begin normal :=  ;
31876: LD_ADDR_VAR 0 3
31880: PUSH
31881: LD_STRING 
31883: ST_TO_ADDR
// hardcore :=  ;
31884: LD_ADDR_VAR 0 4
31888: PUSH
31889: LD_STRING 
31891: ST_TO_ADDR
// for i = 1 to normalCounter do
31892: LD_ADDR_VAR 0 5
31896: PUSH
31897: DOUBLE
31898: LD_INT 1
31900: DEC
31901: ST_TO_ADDR
31902: LD_EXP 68
31906: PUSH
31907: FOR_TO
31908: IFFALSE 32009
// begin tmp := 0 ;
31910: LD_ADDR_VAR 0 2
31914: PUSH
31915: LD_STRING 0
31917: ST_TO_ADDR
// if result [ 1 ] then
31918: LD_VAR 0 1
31922: PUSH
31923: LD_INT 1
31925: ARRAY
31926: IFFALSE 31991
// if result [ 1 ] [ 1 ] = i then
31928: LD_VAR 0 1
31932: PUSH
31933: LD_INT 1
31935: ARRAY
31936: PUSH
31937: LD_INT 1
31939: ARRAY
31940: PUSH
31941: LD_VAR 0 5
31945: EQUAL
31946: IFFALSE 31991
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
31948: LD_ADDR_VAR 0 1
31952: PUSH
31953: LD_VAR 0 1
31957: PPUSH
31958: LD_INT 1
31960: PPUSH
31961: LD_VAR 0 1
31965: PUSH
31966: LD_INT 1
31968: ARRAY
31969: PPUSH
31970: LD_INT 1
31972: PPUSH
31973: CALL_OW 3
31977: PPUSH
31978: CALL_OW 1
31982: ST_TO_ADDR
// tmp := 1 ;
31983: LD_ADDR_VAR 0 2
31987: PUSH
31988: LD_STRING 1
31990: ST_TO_ADDR
// end ; normal := normal & tmp ;
31991: LD_ADDR_VAR 0 3
31995: PUSH
31996: LD_VAR 0 3
32000: PUSH
32001: LD_VAR 0 2
32005: STR
32006: ST_TO_ADDR
// end ;
32007: GO 31907
32009: POP
32010: POP
// for i = 1 to hardcoreCounter do
32011: LD_ADDR_VAR 0 5
32015: PUSH
32016: DOUBLE
32017: LD_INT 1
32019: DEC
32020: ST_TO_ADDR
32021: LD_EXP 69
32025: PUSH
32026: FOR_TO
32027: IFFALSE 32132
// begin tmp := 0 ;
32029: LD_ADDR_VAR 0 2
32033: PUSH
32034: LD_STRING 0
32036: ST_TO_ADDR
// if result [ 2 ] then
32037: LD_VAR 0 1
32041: PUSH
32042: LD_INT 2
32044: ARRAY
32045: IFFALSE 32114
// if result [ 2 ] [ 1 ] = 100 + i then
32047: LD_VAR 0 1
32051: PUSH
32052: LD_INT 2
32054: ARRAY
32055: PUSH
32056: LD_INT 1
32058: ARRAY
32059: PUSH
32060: LD_INT 100
32062: PUSH
32063: LD_VAR 0 5
32067: PLUS
32068: EQUAL
32069: IFFALSE 32114
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32071: LD_ADDR_VAR 0 1
32075: PUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: LD_INT 2
32083: PPUSH
32084: LD_VAR 0 1
32088: PUSH
32089: LD_INT 2
32091: ARRAY
32092: PPUSH
32093: LD_INT 1
32095: PPUSH
32096: CALL_OW 3
32100: PPUSH
32101: CALL_OW 1
32105: ST_TO_ADDR
// tmp := 1 ;
32106: LD_ADDR_VAR 0 2
32110: PUSH
32111: LD_STRING 1
32113: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32114: LD_ADDR_VAR 0 4
32118: PUSH
32119: LD_VAR 0 4
32123: PUSH
32124: LD_VAR 0 2
32128: STR
32129: ST_TO_ADDR
// end ;
32130: GO 32026
32132: POP
32133: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32134: LD_STRING getStreamItemsFromMission("
32136: PUSH
32137: LD_VAR 0 3
32141: STR
32142: PUSH
32143: LD_STRING ","
32145: STR
32146: PUSH
32147: LD_VAR 0 4
32151: STR
32152: PUSH
32153: LD_STRING ")
32155: STR
32156: PPUSH
32157: CALL_OW 559
// end else
32161: GO 32170
// ToLua ( getStreamItemsFromMission("","") ) ;
32163: LD_STRING getStreamItemsFromMission("","")
32165: PPUSH
32166: CALL_OW 559
// end ;
32170: LD_VAR 0 1
32174: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32175: LD_EXP 67
32179: PUSH
32180: LD_EXP 72
32184: AND
32185: IFFALSE 32309
32187: GO 32189
32189: DISABLE
32190: LD_INT 0
32192: PPUSH
32193: PPUSH
// begin enable ;
32194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32195: LD_ADDR_VAR 0 2
32199: PUSH
32200: LD_INT 22
32202: PUSH
32203: LD_OWVAR 2
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 34
32217: PUSH
32218: LD_INT 7
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 34
32227: PUSH
32228: LD_INT 45
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 34
32237: PUSH
32238: LD_INT 28
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 34
32247: PUSH
32248: LD_INT 47
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PPUSH
32266: CALL_OW 69
32270: ST_TO_ADDR
// if not tmp then
32271: LD_VAR 0 2
32275: NOT
32276: IFFALSE 32280
// exit ;
32278: GO 32309
// for i in tmp do
32280: LD_ADDR_VAR 0 1
32284: PUSH
32285: LD_VAR 0 2
32289: PUSH
32290: FOR_IN
32291: IFFALSE 32307
// begin SetLives ( i , 0 ) ;
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_INT 0
32300: PPUSH
32301: CALL_OW 234
// end ;
32305: GO 32290
32307: POP
32308: POP
// end ;
32309: PPOPN 2
32311: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32312: LD_EXP 67
32316: PUSH
32317: LD_EXP 73
32321: AND
32322: IFFALSE 32406
32324: GO 32326
32326: DISABLE
32327: LD_INT 0
32329: PPUSH
32330: PPUSH
// begin enable ;
32331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_INT 22
32339: PUSH
32340: LD_OWVAR 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 32
32351: PUSH
32352: LD_INT 3
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PPUSH
32363: CALL_OW 69
32367: ST_TO_ADDR
// if not tmp then
32368: LD_VAR 0 2
32372: NOT
32373: IFFALSE 32377
// exit ;
32375: GO 32406
// for i in tmp do
32377: LD_ADDR_VAR 0 1
32381: PUSH
32382: LD_VAR 0 2
32386: PUSH
32387: FOR_IN
32388: IFFALSE 32404
// begin SetLives ( i , 0 ) ;
32390: LD_VAR 0 1
32394: PPUSH
32395: LD_INT 0
32397: PPUSH
32398: CALL_OW 234
// end ;
32402: GO 32387
32404: POP
32405: POP
// end ;
32406: PPOPN 2
32408: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32409: LD_EXP 67
32413: PUSH
32414: LD_EXP 70
32418: AND
32419: IFFALSE 32512
32421: GO 32423
32423: DISABLE
32424: LD_INT 0
32426: PPUSH
// begin enable ;
32427: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32428: LD_ADDR_VAR 0 1
32432: PUSH
32433: LD_INT 22
32435: PUSH
32436: LD_OWVAR 2
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 25
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 25
32460: PUSH
32461: LD_INT 9
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 25
32470: PUSH
32471: LD_INT 8
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PPUSH
32488: CALL_OW 69
32492: PUSH
32493: FOR_IN
32494: IFFALSE 32510
// begin SetClass ( i , 1 ) ;
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_INT 1
32503: PPUSH
32504: CALL_OW 336
// end ;
32508: GO 32493
32510: POP
32511: POP
// end ;
32512: PPOPN 1
32514: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32515: LD_EXP 67
32519: PUSH
32520: LD_EXP 71
32524: AND
32525: PUSH
32526: LD_OWVAR 65
32530: PUSH
32531: LD_INT 7
32533: LESS
32534: AND
32535: IFFALSE 32549
32537: GO 32539
32539: DISABLE
// begin enable ;
32540: ENABLE
// game_speed := 7 ;
32541: LD_ADDR_OWVAR 65
32545: PUSH
32546: LD_INT 7
32548: ST_TO_ADDR
// end ;
32549: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32550: LD_EXP 67
32554: PUSH
32555: LD_EXP 74
32559: AND
32560: IFFALSE 32762
32562: GO 32564
32564: DISABLE
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
32569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32570: LD_ADDR_VAR 0 3
32574: PUSH
32575: LD_INT 81
32577: PUSH
32578: LD_OWVAR 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 21
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PPUSH
32601: CALL_OW 69
32605: ST_TO_ADDR
// if not tmp then
32606: LD_VAR 0 3
32610: NOT
32611: IFFALSE 32615
// exit ;
32613: GO 32762
// if tmp > 5 then
32615: LD_VAR 0 3
32619: PUSH
32620: LD_INT 5
32622: GREATER
32623: IFFALSE 32635
// k := 5 else
32625: LD_ADDR_VAR 0 2
32629: PUSH
32630: LD_INT 5
32632: ST_TO_ADDR
32633: GO 32645
// k := tmp ;
32635: LD_ADDR_VAR 0 2
32639: PUSH
32640: LD_VAR 0 3
32644: ST_TO_ADDR
// for i := 1 to k do
32645: LD_ADDR_VAR 0 1
32649: PUSH
32650: DOUBLE
32651: LD_INT 1
32653: DEC
32654: ST_TO_ADDR
32655: LD_VAR 0 2
32659: PUSH
32660: FOR_TO
32661: IFFALSE 32760
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32663: LD_VAR 0 3
32667: PUSH
32668: LD_VAR 0 1
32672: ARRAY
32673: PPUSH
32674: LD_VAR 0 1
32678: PUSH
32679: LD_INT 4
32681: MOD
32682: PUSH
32683: LD_INT 1
32685: PLUS
32686: PPUSH
32687: CALL_OW 259
32691: PUSH
32692: LD_INT 10
32694: LESS
32695: IFFALSE 32758
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32697: LD_VAR 0 3
32701: PUSH
32702: LD_VAR 0 1
32706: ARRAY
32707: PPUSH
32708: LD_VAR 0 1
32712: PUSH
32713: LD_INT 4
32715: MOD
32716: PUSH
32717: LD_INT 1
32719: PLUS
32720: PPUSH
32721: LD_VAR 0 3
32725: PUSH
32726: LD_VAR 0 1
32730: ARRAY
32731: PPUSH
32732: LD_VAR 0 1
32736: PUSH
32737: LD_INT 4
32739: MOD
32740: PUSH
32741: LD_INT 1
32743: PLUS
32744: PPUSH
32745: CALL_OW 259
32749: PUSH
32750: LD_INT 1
32752: PLUS
32753: PPUSH
32754: CALL_OW 237
32758: GO 32660
32760: POP
32761: POP
// end ;
32762: PPOPN 3
32764: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32765: LD_EXP 67
32769: PUSH
32770: LD_EXP 75
32774: AND
32775: IFFALSE 32795
32777: GO 32779
32779: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32780: LD_INT 4
32782: PPUSH
32783: LD_OWVAR 2
32787: PPUSH
32788: LD_INT 0
32790: PPUSH
32791: CALL_OW 324
32795: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32796: LD_EXP 67
32800: PUSH
32801: LD_EXP 104
32805: AND
32806: IFFALSE 32826
32808: GO 32810
32810: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32811: LD_INT 19
32813: PPUSH
32814: LD_OWVAR 2
32818: PPUSH
32819: LD_INT 0
32821: PPUSH
32822: CALL_OW 324
32826: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32827: LD_EXP 67
32831: PUSH
32832: LD_EXP 76
32836: AND
32837: IFFALSE 32939
32839: GO 32841
32841: DISABLE
32842: LD_INT 0
32844: PPUSH
32845: PPUSH
// begin enable ;
32846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32847: LD_ADDR_VAR 0 2
32851: PUSH
32852: LD_INT 22
32854: PUSH
32855: LD_OWVAR 2
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 34
32869: PUSH
32870: LD_INT 11
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 34
32879: PUSH
32880: LD_INT 30
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PPUSH
32896: CALL_OW 69
32900: ST_TO_ADDR
// if not tmp then
32901: LD_VAR 0 2
32905: NOT
32906: IFFALSE 32910
// exit ;
32908: GO 32939
// for i in tmp do
32910: LD_ADDR_VAR 0 1
32914: PUSH
32915: LD_VAR 0 2
32919: PUSH
32920: FOR_IN
32921: IFFALSE 32937
// begin SetLives ( i , 0 ) ;
32923: LD_VAR 0 1
32927: PPUSH
32928: LD_INT 0
32930: PPUSH
32931: CALL_OW 234
// end ;
32935: GO 32920
32937: POP
32938: POP
// end ;
32939: PPOPN 2
32941: END
// every 0 0$1 trigger StreamModeActive and sBunker do
32942: LD_EXP 67
32946: PUSH
32947: LD_EXP 77
32951: AND
32952: IFFALSE 32972
32954: GO 32956
32956: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
32957: LD_INT 32
32959: PPUSH
32960: LD_OWVAR 2
32964: PPUSH
32965: LD_INT 0
32967: PPUSH
32968: CALL_OW 324
32972: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
32973: LD_EXP 67
32977: PUSH
32978: LD_EXP 78
32982: AND
32983: IFFALSE 33164
32985: GO 32987
32987: DISABLE
32988: LD_INT 0
32990: PPUSH
32991: PPUSH
32992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
32993: LD_ADDR_VAR 0 2
32997: PUSH
32998: LD_INT 22
33000: PUSH
33001: LD_OWVAR 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 33
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PPUSH
33024: CALL_OW 69
33028: ST_TO_ADDR
// if not tmp then
33029: LD_VAR 0 2
33033: NOT
33034: IFFALSE 33038
// exit ;
33036: GO 33164
// side := 0 ;
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: LD_INT 0
33045: ST_TO_ADDR
// for i := 1 to 8 do
33046: LD_ADDR_VAR 0 1
33050: PUSH
33051: DOUBLE
33052: LD_INT 1
33054: DEC
33055: ST_TO_ADDR
33056: LD_INT 8
33058: PUSH
33059: FOR_TO
33060: IFFALSE 33108
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33062: LD_OWVAR 2
33066: PUSH
33067: LD_VAR 0 1
33071: NONEQUAL
33072: PUSH
33073: LD_OWVAR 2
33077: PPUSH
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 81
33087: PUSH
33088: LD_INT 2
33090: EQUAL
33091: AND
33092: IFFALSE 33106
// begin side := i ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_VAR 0 1
33103: ST_TO_ADDR
// break ;
33104: GO 33108
// end ;
33106: GO 33059
33108: POP
33109: POP
// if not side then
33110: LD_VAR 0 3
33114: NOT
33115: IFFALSE 33119
// exit ;
33117: GO 33164
// for i := 1 to tmp do
33119: LD_ADDR_VAR 0 1
33123: PUSH
33124: DOUBLE
33125: LD_INT 1
33127: DEC
33128: ST_TO_ADDR
33129: LD_VAR 0 2
33133: PUSH
33134: FOR_TO
33135: IFFALSE 33162
// if Prob ( 60 ) then
33137: LD_INT 60
33139: PPUSH
33140: CALL_OW 13
33144: IFFALSE 33160
// SetSide ( i , side ) ;
33146: LD_VAR 0 1
33150: PPUSH
33151: LD_VAR 0 3
33155: PPUSH
33156: CALL_OW 235
33160: GO 33134
33162: POP
33163: POP
// end ;
33164: PPOPN 3
33166: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33167: LD_EXP 67
33171: PUSH
33172: LD_EXP 80
33176: AND
33177: IFFALSE 33296
33179: GO 33181
33181: DISABLE
33182: LD_INT 0
33184: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33185: LD_ADDR_VAR 0 1
33189: PUSH
33190: LD_INT 22
33192: PUSH
33193: LD_OWVAR 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 21
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: LD_INT 23
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: PPUSH
33234: CALL_OW 69
33238: PUSH
33239: FOR_IN
33240: IFFALSE 33294
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33242: LD_VAR 0 1
33246: PPUSH
33247: CALL_OW 257
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 4
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: IN
33270: IFFALSE 33292
// SetClass ( un , rand ( 1 , 4 ) ) ;
33272: LD_VAR 0 1
33276: PPUSH
33277: LD_INT 1
33279: PPUSH
33280: LD_INT 4
33282: PPUSH
33283: CALL_OW 12
33287: PPUSH
33288: CALL_OW 336
33292: GO 33239
33294: POP
33295: POP
// end ;
33296: PPOPN 1
33298: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33299: LD_EXP 67
33303: PUSH
33304: LD_EXP 79
33308: AND
33309: IFFALSE 33388
33311: GO 33313
33313: DISABLE
33314: LD_INT 0
33316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33317: LD_ADDR_VAR 0 1
33321: PUSH
33322: LD_INT 22
33324: PUSH
33325: LD_OWVAR 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 21
33336: PUSH
33337: LD_INT 3
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PPUSH
33348: CALL_OW 69
33352: ST_TO_ADDR
// if not tmp then
33353: LD_VAR 0 1
33357: NOT
33358: IFFALSE 33362
// exit ;
33360: GO 33388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33362: LD_VAR 0 1
33366: PUSH
33367: LD_INT 1
33369: PPUSH
33370: LD_VAR 0 1
33374: PPUSH
33375: CALL_OW 12
33379: ARRAY
33380: PPUSH
33381: LD_INT 100
33383: PPUSH
33384: CALL_OW 234
// end ;
33388: PPOPN 1
33390: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33391: LD_EXP 67
33395: PUSH
33396: LD_EXP 81
33400: AND
33401: IFFALSE 33499
33403: GO 33405
33405: DISABLE
33406: LD_INT 0
33408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33409: LD_ADDR_VAR 0 1
33413: PUSH
33414: LD_INT 22
33416: PUSH
33417: LD_OWVAR 2
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 21
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PPUSH
33440: CALL_OW 69
33444: ST_TO_ADDR
// if not tmp then
33445: LD_VAR 0 1
33449: NOT
33450: IFFALSE 33454
// exit ;
33452: GO 33499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33454: LD_VAR 0 1
33458: PUSH
33459: LD_INT 1
33461: PPUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 12
33471: ARRAY
33472: PPUSH
33473: LD_INT 1
33475: PPUSH
33476: LD_INT 4
33478: PPUSH
33479: CALL_OW 12
33483: PPUSH
33484: LD_INT 3000
33486: PPUSH
33487: LD_INT 9000
33489: PPUSH
33490: CALL_OW 12
33494: PPUSH
33495: CALL_OW 492
// end ;
33499: PPOPN 1
33501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33502: LD_EXP 67
33506: PUSH
33507: LD_EXP 82
33511: AND
33512: IFFALSE 33532
33514: GO 33516
33516: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33517: LD_INT 1
33519: PPUSH
33520: LD_OWVAR 2
33524: PPUSH
33525: LD_INT 0
33527: PPUSH
33528: CALL_OW 324
33532: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33533: LD_EXP 67
33537: PUSH
33538: LD_EXP 83
33542: AND
33543: IFFALSE 33626
33545: GO 33547
33547: DISABLE
33548: LD_INT 0
33550: PPUSH
33551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33552: LD_ADDR_VAR 0 2
33556: PUSH
33557: LD_INT 22
33559: PUSH
33560: LD_OWVAR 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 21
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PPUSH
33583: CALL_OW 69
33587: ST_TO_ADDR
// if not tmp then
33588: LD_VAR 0 2
33592: NOT
33593: IFFALSE 33597
// exit ;
33595: GO 33626
// for i in tmp do
33597: LD_ADDR_VAR 0 1
33601: PUSH
33602: LD_VAR 0 2
33606: PUSH
33607: FOR_IN
33608: IFFALSE 33624
// SetBLevel ( i , 10 ) ;
33610: LD_VAR 0 1
33614: PPUSH
33615: LD_INT 10
33617: PPUSH
33618: CALL_OW 241
33622: GO 33607
33624: POP
33625: POP
// end ;
33626: PPOPN 2
33628: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33629: LD_EXP 67
33633: PUSH
33634: LD_EXP 84
33638: AND
33639: IFFALSE 33750
33641: GO 33643
33643: DISABLE
33644: LD_INT 0
33646: PPUSH
33647: PPUSH
33648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 22
33656: PUSH
33657: LD_OWVAR 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 25
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PPUSH
33680: CALL_OW 69
33684: ST_TO_ADDR
// if not tmp then
33685: LD_VAR 0 3
33689: NOT
33690: IFFALSE 33694
// exit ;
33692: GO 33750
// un := tmp [ rand ( 1 , tmp ) ] ;
33694: LD_ADDR_VAR 0 2
33698: PUSH
33699: LD_VAR 0 3
33703: PUSH
33704: LD_INT 1
33706: PPUSH
33707: LD_VAR 0 3
33711: PPUSH
33712: CALL_OW 12
33716: ARRAY
33717: ST_TO_ADDR
// if Crawls ( un ) then
33718: LD_VAR 0 2
33722: PPUSH
33723: CALL_OW 318
33727: IFFALSE 33738
// ComWalk ( un ) ;
33729: LD_VAR 0 2
33733: PPUSH
33734: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33738: LD_VAR 0 2
33742: PPUSH
33743: LD_INT 5
33745: PPUSH
33746: CALL_OW 336
// end ;
33750: PPOPN 3
33752: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33753: LD_EXP 67
33757: PUSH
33758: LD_EXP 85
33762: AND
33763: PUSH
33764: LD_OWVAR 67
33768: PUSH
33769: LD_INT 3
33771: LESS
33772: AND
33773: IFFALSE 33792
33775: GO 33777
33777: DISABLE
// Difficulty := Difficulty + 1 ;
33778: LD_ADDR_OWVAR 67
33782: PUSH
33783: LD_OWVAR 67
33787: PUSH
33788: LD_INT 1
33790: PLUS
33791: ST_TO_ADDR
33792: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33793: LD_EXP 67
33797: PUSH
33798: LD_EXP 86
33802: AND
33803: IFFALSE 33906
33805: GO 33807
33807: DISABLE
33808: LD_INT 0
33810: PPUSH
// begin for i := 1 to 5 do
33811: LD_ADDR_VAR 0 1
33815: PUSH
33816: DOUBLE
33817: LD_INT 1
33819: DEC
33820: ST_TO_ADDR
33821: LD_INT 5
33823: PUSH
33824: FOR_TO
33825: IFFALSE 33904
// begin uc_nation := nation_nature ;
33827: LD_ADDR_OWVAR 21
33831: PUSH
33832: LD_INT 0
33834: ST_TO_ADDR
// uc_side := 0 ;
33835: LD_ADDR_OWVAR 20
33839: PUSH
33840: LD_INT 0
33842: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33843: LD_ADDR_OWVAR 29
33847: PUSH
33848: LD_INT 12
33850: PUSH
33851: LD_INT 12
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: ST_TO_ADDR
// hc_agressivity := 20 ;
33858: LD_ADDR_OWVAR 35
33862: PUSH
33863: LD_INT 20
33865: ST_TO_ADDR
// hc_class := class_tiger ;
33866: LD_ADDR_OWVAR 28
33870: PUSH
33871: LD_INT 14
33873: ST_TO_ADDR
// hc_gallery :=  ;
33874: LD_ADDR_OWVAR 33
33878: PUSH
33879: LD_STRING 
33881: ST_TO_ADDR
// hc_name :=  ;
33882: LD_ADDR_OWVAR 26
33886: PUSH
33887: LD_STRING 
33889: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33890: CALL_OW 44
33894: PPUSH
33895: LD_INT 0
33897: PPUSH
33898: CALL_OW 51
// end ;
33902: GO 33824
33904: POP
33905: POP
// end ;
33906: PPOPN 1
33908: END
// every 0 0$1 trigger StreamModeActive and sBomb do
33909: LD_EXP 67
33913: PUSH
33914: LD_EXP 87
33918: AND
33919: IFFALSE 33928
33921: GO 33923
33923: DISABLE
// StreamSibBomb ;
33924: CALL 33929 0 0
33928: END
// export function StreamSibBomb ; var i , x , y ; begin
33929: LD_INT 0
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
// result := false ;
33935: LD_ADDR_VAR 0 1
33939: PUSH
33940: LD_INT 0
33942: ST_TO_ADDR
// for i := 1 to 16 do
33943: LD_ADDR_VAR 0 2
33947: PUSH
33948: DOUBLE
33949: LD_INT 1
33951: DEC
33952: ST_TO_ADDR
33953: LD_INT 16
33955: PUSH
33956: FOR_TO
33957: IFFALSE 34156
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33959: LD_ADDR_VAR 0 3
33963: PUSH
33964: LD_INT 10
33966: PUSH
33967: LD_INT 20
33969: PUSH
33970: LD_INT 30
33972: PUSH
33973: LD_INT 40
33975: PUSH
33976: LD_INT 50
33978: PUSH
33979: LD_INT 60
33981: PUSH
33982: LD_INT 70
33984: PUSH
33985: LD_INT 80
33987: PUSH
33988: LD_INT 90
33990: PUSH
33991: LD_INT 100
33993: PUSH
33994: LD_INT 110
33996: PUSH
33997: LD_INT 120
33999: PUSH
34000: LD_INT 130
34002: PUSH
34003: LD_INT 140
34005: PUSH
34006: LD_INT 150
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: PPUSH
34029: LD_INT 15
34031: PPUSH
34032: CALL_OW 12
34036: ARRAY
34037: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34038: LD_ADDR_VAR 0 4
34042: PUSH
34043: LD_INT 10
34045: PUSH
34046: LD_INT 20
34048: PUSH
34049: LD_INT 30
34051: PUSH
34052: LD_INT 40
34054: PUSH
34055: LD_INT 50
34057: PUSH
34058: LD_INT 60
34060: PUSH
34061: LD_INT 70
34063: PUSH
34064: LD_INT 80
34066: PUSH
34067: LD_INT 90
34069: PUSH
34070: LD_INT 100
34072: PUSH
34073: LD_INT 110
34075: PUSH
34076: LD_INT 120
34078: PUSH
34079: LD_INT 130
34081: PUSH
34082: LD_INT 140
34084: PUSH
34085: LD_INT 150
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: PPUSH
34108: LD_INT 15
34110: PPUSH
34111: CALL_OW 12
34115: ARRAY
34116: ST_TO_ADDR
// if ValidHex ( x , y ) then
34117: LD_VAR 0 3
34121: PPUSH
34122: LD_VAR 0 4
34126: PPUSH
34127: CALL_OW 488
34131: IFFALSE 34154
// begin result := [ x , y ] ;
34133: LD_ADDR_VAR 0 1
34137: PUSH
34138: LD_VAR 0 3
34142: PUSH
34143: LD_VAR 0 4
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// break ;
34152: GO 34156
// end ; end ;
34154: GO 33956
34156: POP
34157: POP
// if result then
34158: LD_VAR 0 1
34162: IFFALSE 34222
// begin ToLua ( playSibBomb() ) ;
34164: LD_STRING playSibBomb()
34166: PPUSH
34167: CALL_OW 559
// wait ( 0 0$14 ) ;
34171: LD_INT 490
34173: PPUSH
34174: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34178: LD_VAR 0 1
34182: PUSH
34183: LD_INT 1
34185: ARRAY
34186: PPUSH
34187: LD_VAR 0 1
34191: PUSH
34192: LD_INT 2
34194: ARRAY
34195: PPUSH
34196: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34200: LD_VAR 0 1
34204: PUSH
34205: LD_INT 1
34207: ARRAY
34208: PPUSH
34209: LD_VAR 0 1
34213: PUSH
34214: LD_INT 2
34216: ARRAY
34217: PPUSH
34218: CALL_OW 429
// end ; end ;
34222: LD_VAR 0 1
34226: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34227: LD_EXP 67
34231: PUSH
34232: LD_EXP 89
34236: AND
34237: IFFALSE 34249
34239: GO 34241
34241: DISABLE
// YouLost (  ) ;
34242: LD_STRING 
34244: PPUSH
34245: CALL_OW 104
34249: END
// every 0 0$1 trigger StreamModeActive and sFog do
34250: LD_EXP 67
34254: PUSH
34255: LD_EXP 88
34259: AND
34260: IFFALSE 34274
34262: GO 34264
34264: DISABLE
// FogOff ( your_side ) ;
34265: LD_OWVAR 2
34269: PPUSH
34270: CALL_OW 344
34274: END
// every 0 0$1 trigger StreamModeActive and sSun do
34275: LD_EXP 67
34279: PUSH
34280: LD_EXP 90
34284: AND
34285: IFFALSE 34313
34287: GO 34289
34289: DISABLE
// begin solar_recharge_percent := 0 ;
34290: LD_ADDR_OWVAR 79
34294: PUSH
34295: LD_INT 0
34297: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34298: LD_INT 10500
34300: PPUSH
34301: CALL_OW 67
// solar_recharge_percent := 100 ;
34305: LD_ADDR_OWVAR 79
34309: PUSH
34310: LD_INT 100
34312: ST_TO_ADDR
// end ;
34313: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34314: LD_EXP 67
34318: PUSH
34319: LD_EXP 91
34323: AND
34324: IFFALSE 34563
34326: GO 34328
34328: DISABLE
34329: LD_INT 0
34331: PPUSH
34332: PPUSH
34333: PPUSH
// begin tmp := [ ] ;
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: EMPTY
34340: ST_TO_ADDR
// for i := 1 to 6 do
34341: LD_ADDR_VAR 0 1
34345: PUSH
34346: DOUBLE
34347: LD_INT 1
34349: DEC
34350: ST_TO_ADDR
34351: LD_INT 6
34353: PUSH
34354: FOR_TO
34355: IFFALSE 34460
// begin uc_nation := nation_nature ;
34357: LD_ADDR_OWVAR 21
34361: PUSH
34362: LD_INT 0
34364: ST_TO_ADDR
// uc_side := 0 ;
34365: LD_ADDR_OWVAR 20
34369: PUSH
34370: LD_INT 0
34372: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34373: LD_ADDR_OWVAR 29
34377: PUSH
34378: LD_INT 12
34380: PUSH
34381: LD_INT 12
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// hc_agressivity := 20 ;
34388: LD_ADDR_OWVAR 35
34392: PUSH
34393: LD_INT 20
34395: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34396: LD_ADDR_OWVAR 28
34400: PUSH
34401: LD_INT 17
34403: ST_TO_ADDR
// hc_gallery :=  ;
34404: LD_ADDR_OWVAR 33
34408: PUSH
34409: LD_STRING 
34411: ST_TO_ADDR
// hc_name :=  ;
34412: LD_ADDR_OWVAR 26
34416: PUSH
34417: LD_STRING 
34419: ST_TO_ADDR
// un := CreateHuman ;
34420: LD_ADDR_VAR 0 2
34424: PUSH
34425: CALL_OW 44
34429: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34430: LD_VAR 0 2
34434: PPUSH
34435: LD_INT 1
34437: PPUSH
34438: CALL_OW 51
// tmp := tmp ^ un ;
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_VAR 0 3
34451: PUSH
34452: LD_VAR 0 2
34456: ADD
34457: ST_TO_ADDR
// end ;
34458: GO 34354
34460: POP
34461: POP
// repeat wait ( 0 0$1 ) ;
34462: LD_INT 35
34464: PPUSH
34465: CALL_OW 67
// for un in tmp do
34469: LD_ADDR_VAR 0 2
34473: PUSH
34474: LD_VAR 0 3
34478: PUSH
34479: FOR_IN
34480: IFFALSE 34554
// begin if IsDead ( un ) then
34482: LD_VAR 0 2
34486: PPUSH
34487: CALL_OW 301
34491: IFFALSE 34511
// begin tmp := tmp diff un ;
34493: LD_ADDR_VAR 0 3
34497: PUSH
34498: LD_VAR 0 3
34502: PUSH
34503: LD_VAR 0 2
34507: DIFF
34508: ST_TO_ADDR
// continue ;
34509: GO 34479
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34511: LD_VAR 0 2
34515: PPUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 22
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PPUSH
34533: CALL_OW 69
34537: PPUSH
34538: LD_VAR 0 2
34542: PPUSH
34543: CALL_OW 74
34547: PPUSH
34548: CALL_OW 115
// end ;
34552: GO 34479
34554: POP
34555: POP
// until not tmp ;
34556: LD_VAR 0 3
34560: NOT
34561: IFFALSE 34462
// end ;
34563: PPOPN 3
34565: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34566: LD_EXP 67
34570: PUSH
34571: LD_EXP 92
34575: AND
34576: IFFALSE 34630
34578: GO 34580
34580: DISABLE
// begin ToLua ( displayTroll(); ) ;
34581: LD_STRING displayTroll();
34583: PPUSH
34584: CALL_OW 559
// wait ( 3 3$00 ) ;
34588: LD_INT 6300
34590: PPUSH
34591: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34595: LD_STRING hideTroll();
34597: PPUSH
34598: CALL_OW 559
// wait ( 1 1$00 ) ;
34602: LD_INT 2100
34604: PPUSH
34605: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34609: LD_STRING displayTroll();
34611: PPUSH
34612: CALL_OW 559
// wait ( 1 1$00 ) ;
34616: LD_INT 2100
34618: PPUSH
34619: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34623: LD_STRING hideTroll();
34625: PPUSH
34626: CALL_OW 559
// end ;
34630: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34631: LD_EXP 67
34635: PUSH
34636: LD_EXP 93
34640: AND
34641: IFFALSE 34704
34643: GO 34645
34645: DISABLE
34646: LD_INT 0
34648: PPUSH
// begin p := 0 ;
34649: LD_ADDR_VAR 0 1
34653: PUSH
34654: LD_INT 0
34656: ST_TO_ADDR
// repeat game_speed := 1 ;
34657: LD_ADDR_OWVAR 65
34661: PUSH
34662: LD_INT 1
34664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34665: LD_INT 35
34667: PPUSH
34668: CALL_OW 67
// p := p + 1 ;
34672: LD_ADDR_VAR 0 1
34676: PUSH
34677: LD_VAR 0 1
34681: PUSH
34682: LD_INT 1
34684: PLUS
34685: ST_TO_ADDR
// until p >= 60 ;
34686: LD_VAR 0 1
34690: PUSH
34691: LD_INT 60
34693: GREATEREQUAL
34694: IFFALSE 34657
// game_speed := 4 ;
34696: LD_ADDR_OWVAR 65
34700: PUSH
34701: LD_INT 4
34703: ST_TO_ADDR
// end ;
34704: PPOPN 1
34706: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34707: LD_EXP 67
34711: PUSH
34712: LD_EXP 94
34716: AND
34717: IFFALSE 34863
34719: GO 34721
34721: DISABLE
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34726: LD_ADDR_VAR 0 1
34730: PUSH
34731: LD_INT 22
34733: PUSH
34734: LD_OWVAR 2
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 30
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 30
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PPUSH
34775: CALL_OW 69
34779: ST_TO_ADDR
// if not depot then
34780: LD_VAR 0 1
34784: NOT
34785: IFFALSE 34789
// exit ;
34787: GO 34863
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34789: LD_ADDR_VAR 0 2
34793: PUSH
34794: LD_VAR 0 1
34798: PUSH
34799: LD_INT 1
34801: PPUSH
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 12
34811: ARRAY
34812: PPUSH
34813: CALL_OW 274
34817: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_INT 1
34825: PPUSH
34826: LD_INT 0
34828: PPUSH
34829: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34833: LD_VAR 0 2
34837: PPUSH
34838: LD_INT 2
34840: PPUSH
34841: LD_INT 0
34843: PPUSH
34844: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34848: LD_VAR 0 2
34852: PPUSH
34853: LD_INT 3
34855: PPUSH
34856: LD_INT 0
34858: PPUSH
34859: CALL_OW 277
// end ;
34863: PPOPN 2
34865: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34866: LD_EXP 67
34870: PUSH
34871: LD_EXP 95
34875: AND
34876: IFFALSE 34973
34878: GO 34880
34880: DISABLE
34881: LD_INT 0
34883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34884: LD_ADDR_VAR 0 1
34888: PUSH
34889: LD_INT 22
34891: PUSH
34892: LD_OWVAR 2
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 21
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 3
34913: PUSH
34914: LD_INT 23
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: PPUSH
34933: CALL_OW 69
34937: ST_TO_ADDR
// if not tmp then
34938: LD_VAR 0 1
34942: NOT
34943: IFFALSE 34947
// exit ;
34945: GO 34973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
34947: LD_VAR 0 1
34951: PUSH
34952: LD_INT 1
34954: PPUSH
34955: LD_VAR 0 1
34959: PPUSH
34960: CALL_OW 12
34964: ARRAY
34965: PPUSH
34966: LD_INT 200
34968: PPUSH
34969: CALL_OW 234
// end ;
34973: PPOPN 1
34975: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
34976: LD_EXP 67
34980: PUSH
34981: LD_EXP 96
34985: AND
34986: IFFALSE 35065
34988: GO 34990
34990: DISABLE
34991: LD_INT 0
34993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
34994: LD_ADDR_VAR 0 1
34998: PUSH
34999: LD_INT 22
35001: PUSH
35002: LD_OWVAR 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 21
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PPUSH
35025: CALL_OW 69
35029: ST_TO_ADDR
// if not tmp then
35030: LD_VAR 0 1
35034: NOT
35035: IFFALSE 35039
// exit ;
35037: GO 35065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35039: LD_VAR 0 1
35043: PUSH
35044: LD_INT 1
35046: PPUSH
35047: LD_VAR 0 1
35051: PPUSH
35052: CALL_OW 12
35056: ARRAY
35057: PPUSH
35058: LD_INT 60
35060: PPUSH
35061: CALL_OW 234
// end ;
35065: PPOPN 1
35067: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35068: LD_EXP 67
35072: PUSH
35073: LD_EXP 97
35077: AND
35078: IFFALSE 35177
35080: GO 35082
35082: DISABLE
35083: LD_INT 0
35085: PPUSH
35086: PPUSH
// begin enable ;
35087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35088: LD_ADDR_VAR 0 1
35092: PUSH
35093: LD_INT 22
35095: PUSH
35096: LD_OWVAR 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 61
35107: PUSH
35108: EMPTY
35109: LIST
35110: PUSH
35111: LD_INT 33
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: PPUSH
35126: CALL_OW 69
35130: ST_TO_ADDR
// if not tmp then
35131: LD_VAR 0 1
35135: NOT
35136: IFFALSE 35140
// exit ;
35138: GO 35177
// for i in tmp do
35140: LD_ADDR_VAR 0 2
35144: PUSH
35145: LD_VAR 0 1
35149: PUSH
35150: FOR_IN
35151: IFFALSE 35175
// if IsControledBy ( i ) then
35153: LD_VAR 0 2
35157: PPUSH
35158: CALL_OW 312
35162: IFFALSE 35173
// ComUnlink ( i ) ;
35164: LD_VAR 0 2
35168: PPUSH
35169: CALL_OW 136
35173: GO 35150
35175: POP
35176: POP
// end ;
35177: PPOPN 2
35179: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35180: LD_EXP 67
35184: PUSH
35185: LD_EXP 98
35189: AND
35190: IFFALSE 35330
35192: GO 35194
35194: DISABLE
35195: LD_INT 0
35197: PPUSH
35198: PPUSH
// begin ToLua ( displayPowell(); ) ;
35199: LD_STRING displayPowell();
35201: PPUSH
35202: CALL_OW 559
// uc_side := 0 ;
35206: LD_ADDR_OWVAR 20
35210: PUSH
35211: LD_INT 0
35213: ST_TO_ADDR
// uc_nation := 2 ;
35214: LD_ADDR_OWVAR 21
35218: PUSH
35219: LD_INT 2
35221: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35222: LD_ADDR_OWVAR 37
35226: PUSH
35227: LD_INT 14
35229: ST_TO_ADDR
// vc_engine := engine_siberite ;
35230: LD_ADDR_OWVAR 39
35234: PUSH
35235: LD_INT 3
35237: ST_TO_ADDR
// vc_control := control_apeman ;
35238: LD_ADDR_OWVAR 38
35242: PUSH
35243: LD_INT 5
35245: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35246: LD_ADDR_OWVAR 40
35250: PUSH
35251: LD_INT 29
35253: ST_TO_ADDR
// un := CreateVehicle ;
35254: LD_ADDR_VAR 0 2
35258: PUSH
35259: CALL_OW 45
35263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35264: LD_VAR 0 2
35268: PPUSH
35269: LD_INT 1
35271: PPUSH
35272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35276: LD_INT 35
35278: PPUSH
35279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35283: LD_VAR 0 2
35287: PPUSH
35288: LD_INT 22
35290: PUSH
35291: LD_OWVAR 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PPUSH
35300: CALL_OW 69
35304: PPUSH
35305: LD_VAR 0 2
35309: PPUSH
35310: CALL_OW 74
35314: PPUSH
35315: CALL_OW 115
// until IsDead ( un ) ;
35319: LD_VAR 0 2
35323: PPUSH
35324: CALL_OW 301
35328: IFFALSE 35276
// end ;
35330: PPOPN 2
35332: END
// every 0 0$1 trigger StreamModeActive and sStu do
35333: LD_EXP 67
35337: PUSH
35338: LD_EXP 106
35342: AND
35343: IFFALSE 35359
35345: GO 35347
35347: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35348: LD_STRING displayStucuk();
35350: PPUSH
35351: CALL_OW 559
// ResetFog ;
35355: CALL_OW 335
// end ;
35359: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35360: LD_EXP 67
35364: PUSH
35365: LD_EXP 99
35369: AND
35370: IFFALSE 35511
35372: GO 35374
35374: DISABLE
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35379: LD_ADDR_VAR 0 2
35383: PUSH
35384: LD_INT 22
35386: PUSH
35387: LD_OWVAR 2
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 21
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PPUSH
35410: CALL_OW 69
35414: ST_TO_ADDR
// if not tmp then
35415: LD_VAR 0 2
35419: NOT
35420: IFFALSE 35424
// exit ;
35422: GO 35511
// un := tmp [ rand ( 1 , tmp ) ] ;
35424: LD_ADDR_VAR 0 1
35428: PUSH
35429: LD_VAR 0 2
35433: PUSH
35434: LD_INT 1
35436: PPUSH
35437: LD_VAR 0 2
35441: PPUSH
35442: CALL_OW 12
35446: ARRAY
35447: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35448: LD_VAR 0 1
35452: PPUSH
35453: LD_INT 0
35455: PPUSH
35456: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35460: LD_VAR 0 1
35464: PPUSH
35465: LD_OWVAR 3
35469: PUSH
35470: LD_VAR 0 1
35474: DIFF
35475: PPUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL_OW 74
35485: PPUSH
35486: CALL_OW 115
// wait ( 0 0$20 ) ;
35490: LD_INT 700
35492: PPUSH
35493: CALL_OW 67
// SetSide ( un , your_side ) ;
35497: LD_VAR 0 1
35501: PPUSH
35502: LD_OWVAR 2
35506: PPUSH
35507: CALL_OW 235
// end ;
35511: PPOPN 2
35513: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35514: LD_EXP 67
35518: PUSH
35519: LD_EXP 100
35523: AND
35524: IFFALSE 35630
35526: GO 35528
35528: DISABLE
35529: LD_INT 0
35531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35532: LD_ADDR_VAR 0 1
35536: PUSH
35537: LD_INT 22
35539: PUSH
35540: LD_OWVAR 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 30
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 30
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PPUSH
35581: CALL_OW 69
35585: ST_TO_ADDR
// if not depot then
35586: LD_VAR 0 1
35590: NOT
35591: IFFALSE 35595
// exit ;
35593: GO 35630
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35595: LD_VAR 0 1
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: PPUSH
35604: CALL_OW 250
35608: PPUSH
35609: LD_VAR 0 1
35613: PUSH
35614: LD_INT 1
35616: ARRAY
35617: PPUSH
35618: CALL_OW 251
35622: PPUSH
35623: LD_INT 70
35625: PPUSH
35626: CALL_OW 495
// end ;
35630: PPOPN 1
35632: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35633: LD_EXP 67
35637: PUSH
35638: LD_EXP 101
35642: AND
35643: IFFALSE 35854
35645: GO 35647
35647: DISABLE
35648: LD_INT 0
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35655: LD_ADDR_VAR 0 5
35659: PUSH
35660: LD_INT 22
35662: PUSH
35663: LD_OWVAR 2
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 21
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PPUSH
35686: CALL_OW 69
35690: ST_TO_ADDR
// if not tmp then
35691: LD_VAR 0 5
35695: NOT
35696: IFFALSE 35700
// exit ;
35698: GO 35854
// for i in tmp do
35700: LD_ADDR_VAR 0 1
35704: PUSH
35705: LD_VAR 0 5
35709: PUSH
35710: FOR_IN
35711: IFFALSE 35852
// begin d := rand ( 0 , 5 ) ;
35713: LD_ADDR_VAR 0 4
35717: PUSH
35718: LD_INT 0
35720: PPUSH
35721: LD_INT 5
35723: PPUSH
35724: CALL_OW 12
35728: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35729: LD_ADDR_VAR 0 2
35733: PUSH
35734: LD_VAR 0 1
35738: PPUSH
35739: CALL_OW 250
35743: PPUSH
35744: LD_VAR 0 4
35748: PPUSH
35749: LD_INT 3
35751: PPUSH
35752: LD_INT 12
35754: PPUSH
35755: CALL_OW 12
35759: PPUSH
35760: CALL_OW 272
35764: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35765: LD_ADDR_VAR 0 3
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 251
35779: PPUSH
35780: LD_VAR 0 4
35784: PPUSH
35785: LD_INT 3
35787: PPUSH
35788: LD_INT 12
35790: PPUSH
35791: CALL_OW 12
35795: PPUSH
35796: CALL_OW 273
35800: ST_TO_ADDR
// if ValidHex ( x , y ) then
35801: LD_VAR 0 2
35805: PPUSH
35806: LD_VAR 0 3
35810: PPUSH
35811: CALL_OW 488
35815: IFFALSE 35850
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35817: LD_VAR 0 1
35821: PPUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: LD_VAR 0 3
35831: PPUSH
35832: LD_INT 3
35834: PPUSH
35835: LD_INT 6
35837: PPUSH
35838: CALL_OW 12
35842: PPUSH
35843: LD_INT 1
35845: PPUSH
35846: CALL_OW 483
// end ;
35850: GO 35710
35852: POP
35853: POP
// end ;
35854: PPOPN 5
35856: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35857: LD_EXP 67
35861: PUSH
35862: LD_EXP 102
35866: AND
35867: IFFALSE 35961
35869: GO 35871
35871: DISABLE
35872: LD_INT 0
35874: PPUSH
35875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35876: LD_ADDR_VAR 0 2
35880: PUSH
35881: LD_INT 22
35883: PUSH
35884: LD_OWVAR 2
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 32
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 21
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: PPUSH
35918: CALL_OW 69
35922: ST_TO_ADDR
// if not tmp then
35923: LD_VAR 0 2
35927: NOT
35928: IFFALSE 35932
// exit ;
35930: GO 35961
// for i in tmp do
35932: LD_ADDR_VAR 0 1
35936: PUSH
35937: LD_VAR 0 2
35941: PUSH
35942: FOR_IN
35943: IFFALSE 35959
// SetFuel ( i , 0 ) ;
35945: LD_VAR 0 1
35949: PPUSH
35950: LD_INT 0
35952: PPUSH
35953: CALL_OW 240
35957: GO 35942
35959: POP
35960: POP
// end ;
35961: PPOPN 2
35963: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
35964: LD_EXP 67
35968: PUSH
35969: LD_EXP 103
35973: AND
35974: IFFALSE 36040
35976: GO 35978
35978: DISABLE
35979: LD_INT 0
35981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35982: LD_ADDR_VAR 0 1
35986: PUSH
35987: LD_INT 22
35989: PUSH
35990: LD_OWVAR 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 30
36001: PUSH
36002: LD_INT 29
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PPUSH
36013: CALL_OW 69
36017: ST_TO_ADDR
// if not tmp then
36018: LD_VAR 0 1
36022: NOT
36023: IFFALSE 36027
// exit ;
36025: GO 36040
// DestroyUnit ( tmp [ 1 ] ) ;
36027: LD_VAR 0 1
36031: PUSH
36032: LD_INT 1
36034: ARRAY
36035: PPUSH
36036: CALL_OW 65
// end ;
36040: PPOPN 1
36042: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36043: LD_EXP 67
36047: PUSH
36048: LD_EXP 105
36052: AND
36053: IFFALSE 36182
36055: GO 36057
36057: DISABLE
36058: LD_INT 0
36060: PPUSH
// begin uc_side := 0 ;
36061: LD_ADDR_OWVAR 20
36065: PUSH
36066: LD_INT 0
36068: ST_TO_ADDR
// uc_nation := nation_arabian ;
36069: LD_ADDR_OWVAR 21
36073: PUSH
36074: LD_INT 2
36076: ST_TO_ADDR
// hc_gallery :=  ;
36077: LD_ADDR_OWVAR 33
36081: PUSH
36082: LD_STRING 
36084: ST_TO_ADDR
// hc_name :=  ;
36085: LD_ADDR_OWVAR 26
36089: PUSH
36090: LD_STRING 
36092: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36093: LD_INT 1
36095: PPUSH
36096: LD_INT 11
36098: PPUSH
36099: LD_INT 10
36101: PPUSH
36102: CALL_OW 380
// un := CreateHuman ;
36106: LD_ADDR_VAR 0 1
36110: PUSH
36111: CALL_OW 44
36115: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36116: LD_VAR 0 1
36120: PPUSH
36121: LD_INT 1
36123: PPUSH
36124: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36128: LD_INT 35
36130: PPUSH
36131: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36135: LD_VAR 0 1
36139: PPUSH
36140: LD_INT 22
36142: PUSH
36143: LD_OWVAR 2
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PPUSH
36152: CALL_OW 69
36156: PPUSH
36157: LD_VAR 0 1
36161: PPUSH
36162: CALL_OW 74
36166: PPUSH
36167: CALL_OW 115
// until IsDead ( un ) ;
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 301
36180: IFFALSE 36128
// end ;
36182: PPOPN 1
36184: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36185: LD_EXP 67
36189: PUSH
36190: LD_EXP 107
36194: AND
36195: IFFALSE 36207
36197: GO 36199
36199: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36200: LD_STRING earthquake(getX(game), 0, 32)
36202: PPUSH
36203: CALL_OW 559
36207: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36208: LD_EXP 67
36212: PUSH
36213: LD_EXP 108
36217: AND
36218: IFFALSE 36309
36220: GO 36222
36222: DISABLE
36223: LD_INT 0
36225: PPUSH
// begin enable ;
36226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36227: LD_ADDR_VAR 0 1
36231: PUSH
36232: LD_INT 22
36234: PUSH
36235: LD_OWVAR 2
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 21
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 33
36256: PUSH
36257: LD_INT 3
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: PPUSH
36269: CALL_OW 69
36273: ST_TO_ADDR
// if not tmp then
36274: LD_VAR 0 1
36278: NOT
36279: IFFALSE 36283
// exit ;
36281: GO 36309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36283: LD_VAR 0 1
36287: PUSH
36288: LD_INT 1
36290: PPUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 12
36300: ARRAY
36301: PPUSH
36302: LD_INT 1
36304: PPUSH
36305: CALL_OW 234
// end ;
36309: PPOPN 1
36311: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36312: LD_EXP 67
36316: PUSH
36317: LD_EXP 109
36321: AND
36322: IFFALSE 36463
36324: GO 36326
36326: DISABLE
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
36331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: LD_INT 22
36339: PUSH
36340: LD_OWVAR 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 25
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PPUSH
36363: CALL_OW 69
36367: ST_TO_ADDR
// if not tmp then
36368: LD_VAR 0 3
36372: NOT
36373: IFFALSE 36377
// exit ;
36375: GO 36463
// un := tmp [ rand ( 1 , tmp ) ] ;
36377: LD_ADDR_VAR 0 2
36381: PUSH
36382: LD_VAR 0 3
36386: PUSH
36387: LD_INT 1
36389: PPUSH
36390: LD_VAR 0 3
36394: PPUSH
36395: CALL_OW 12
36399: ARRAY
36400: ST_TO_ADDR
// if Crawls ( un ) then
36401: LD_VAR 0 2
36405: PPUSH
36406: CALL_OW 318
36410: IFFALSE 36421
// ComWalk ( un ) ;
36412: LD_VAR 0 2
36416: PPUSH
36417: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36421: LD_VAR 0 2
36425: PPUSH
36426: LD_INT 9
36428: PPUSH
36429: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36433: LD_INT 28
36435: PPUSH
36436: LD_OWVAR 2
36440: PPUSH
36441: LD_INT 2
36443: PPUSH
36444: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36448: LD_INT 29
36450: PPUSH
36451: LD_OWVAR 2
36455: PPUSH
36456: LD_INT 2
36458: PPUSH
36459: CALL_OW 322
// end ;
36463: PPOPN 3
36465: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36466: LD_EXP 67
36470: PUSH
36471: LD_EXP 110
36475: AND
36476: IFFALSE 36587
36478: GO 36480
36480: DISABLE
36481: LD_INT 0
36483: PPUSH
36484: PPUSH
36485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: LD_INT 22
36493: PUSH
36494: LD_OWVAR 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 25
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PPUSH
36517: CALL_OW 69
36521: ST_TO_ADDR
// if not tmp then
36522: LD_VAR 0 3
36526: NOT
36527: IFFALSE 36531
// exit ;
36529: GO 36587
// un := tmp [ rand ( 1 , tmp ) ] ;
36531: LD_ADDR_VAR 0 2
36535: PUSH
36536: LD_VAR 0 3
36540: PUSH
36541: LD_INT 1
36543: PPUSH
36544: LD_VAR 0 3
36548: PPUSH
36549: CALL_OW 12
36553: ARRAY
36554: ST_TO_ADDR
// if Crawls ( un ) then
36555: LD_VAR 0 2
36559: PPUSH
36560: CALL_OW 318
36564: IFFALSE 36575
// ComWalk ( un ) ;
36566: LD_VAR 0 2
36570: PPUSH
36571: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36575: LD_VAR 0 2
36579: PPUSH
36580: LD_INT 8
36582: PPUSH
36583: CALL_OW 336
// end ;
36587: PPOPN 3
36589: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36590: LD_EXP 67
36594: PUSH
36595: LD_EXP 111
36599: AND
36600: IFFALSE 36744
36602: GO 36604
36604: DISABLE
36605: LD_INT 0
36607: PPUSH
36608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36609: LD_ADDR_VAR 0 2
36613: PUSH
36614: LD_INT 22
36616: PUSH
36617: LD_OWVAR 2
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 21
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 34
36641: PUSH
36642: LD_INT 12
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 34
36651: PUSH
36652: LD_INT 51
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 34
36661: PUSH
36662: LD_INT 32
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: PPUSH
36680: CALL_OW 69
36684: ST_TO_ADDR
// if not tmp then
36685: LD_VAR 0 2
36689: NOT
36690: IFFALSE 36694
// exit ;
36692: GO 36744
// for i in tmp do
36694: LD_ADDR_VAR 0 1
36698: PUSH
36699: LD_VAR 0 2
36703: PUSH
36704: FOR_IN
36705: IFFALSE 36742
// if GetCargo ( i , mat_artifact ) = 0 then
36707: LD_VAR 0 1
36711: PPUSH
36712: LD_INT 4
36714: PPUSH
36715: CALL_OW 289
36719: PUSH
36720: LD_INT 0
36722: EQUAL
36723: IFFALSE 36740
// SetCargo ( i , mat_siberit , 100 ) ;
36725: LD_VAR 0 1
36729: PPUSH
36730: LD_INT 3
36732: PPUSH
36733: LD_INT 100
36735: PPUSH
36736: CALL_OW 290
36740: GO 36704
36742: POP
36743: POP
// end ;
36744: PPOPN 2
36746: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36747: LD_EXP 67
36751: PUSH
36752: LD_EXP 112
36756: AND
36757: IFFALSE 36940
36759: GO 36761
36761: DISABLE
36762: LD_INT 0
36764: PPUSH
36765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36766: LD_ADDR_VAR 0 2
36770: PUSH
36771: LD_INT 22
36773: PUSH
36774: LD_OWVAR 2
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PPUSH
36783: CALL_OW 69
36787: ST_TO_ADDR
// if not tmp then
36788: LD_VAR 0 2
36792: NOT
36793: IFFALSE 36797
// exit ;
36795: GO 36940
// for i := 1 to 2 do
36797: LD_ADDR_VAR 0 1
36801: PUSH
36802: DOUBLE
36803: LD_INT 1
36805: DEC
36806: ST_TO_ADDR
36807: LD_INT 2
36809: PUSH
36810: FOR_TO
36811: IFFALSE 36938
// begin uc_side := your_side ;
36813: LD_ADDR_OWVAR 20
36817: PUSH
36818: LD_OWVAR 2
36822: ST_TO_ADDR
// uc_nation := nation_american ;
36823: LD_ADDR_OWVAR 21
36827: PUSH
36828: LD_INT 1
36830: ST_TO_ADDR
// vc_chassis := us_morphling ;
36831: LD_ADDR_OWVAR 37
36835: PUSH
36836: LD_INT 5
36838: ST_TO_ADDR
// vc_engine := engine_siberite ;
36839: LD_ADDR_OWVAR 39
36843: PUSH
36844: LD_INT 3
36846: ST_TO_ADDR
// vc_control := control_computer ;
36847: LD_ADDR_OWVAR 38
36851: PUSH
36852: LD_INT 3
36854: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36855: LD_ADDR_OWVAR 40
36859: PUSH
36860: LD_INT 10
36862: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36863: LD_VAR 0 2
36867: PUSH
36868: LD_INT 1
36870: ARRAY
36871: PPUSH
36872: CALL_OW 310
36876: NOT
36877: IFFALSE 36924
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36879: CALL_OW 45
36883: PPUSH
36884: LD_VAR 0 2
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: PPUSH
36893: CALL_OW 250
36897: PPUSH
36898: LD_VAR 0 2
36902: PUSH
36903: LD_INT 1
36905: ARRAY
36906: PPUSH
36907: CALL_OW 251
36911: PPUSH
36912: LD_INT 12
36914: PPUSH
36915: LD_INT 1
36917: PPUSH
36918: CALL_OW 50
36922: GO 36936
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36924: CALL_OW 45
36928: PPUSH
36929: LD_INT 1
36931: PPUSH
36932: CALL_OW 51
// end ;
36936: GO 36810
36938: POP
36939: POP
// end ;
36940: PPOPN 2
36942: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
36943: LD_EXP 67
36947: PUSH
36948: LD_EXP 113
36952: AND
36953: IFFALSE 37175
36955: GO 36957
36957: DISABLE
36958: LD_INT 0
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36966: LD_ADDR_VAR 0 6
36970: PUSH
36971: LD_INT 22
36973: PUSH
36974: LD_OWVAR 2
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 21
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 3
36995: PUSH
36996: LD_INT 23
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: PPUSH
37015: CALL_OW 69
37019: ST_TO_ADDR
// if not tmp then
37020: LD_VAR 0 6
37024: NOT
37025: IFFALSE 37029
// exit ;
37027: GO 37175
// s1 := rand ( 1 , 4 ) ;
37029: LD_ADDR_VAR 0 2
37033: PUSH
37034: LD_INT 1
37036: PPUSH
37037: LD_INT 4
37039: PPUSH
37040: CALL_OW 12
37044: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37045: LD_ADDR_VAR 0 4
37049: PUSH
37050: LD_VAR 0 6
37054: PUSH
37055: LD_INT 1
37057: ARRAY
37058: PPUSH
37059: LD_VAR 0 2
37063: PPUSH
37064: CALL_OW 259
37068: ST_TO_ADDR
// if s1 = 1 then
37069: LD_VAR 0 2
37073: PUSH
37074: LD_INT 1
37076: EQUAL
37077: IFFALSE 37097
// s2 := rand ( 2 , 4 ) else
37079: LD_ADDR_VAR 0 3
37083: PUSH
37084: LD_INT 2
37086: PPUSH
37087: LD_INT 4
37089: PPUSH
37090: CALL_OW 12
37094: ST_TO_ADDR
37095: GO 37105
// s2 := 1 ;
37097: LD_ADDR_VAR 0 3
37101: PUSH
37102: LD_INT 1
37104: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37105: LD_ADDR_VAR 0 5
37109: PUSH
37110: LD_VAR 0 6
37114: PUSH
37115: LD_INT 1
37117: ARRAY
37118: PPUSH
37119: LD_VAR 0 3
37123: PPUSH
37124: CALL_OW 259
37128: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37129: LD_VAR 0 6
37133: PUSH
37134: LD_INT 1
37136: ARRAY
37137: PPUSH
37138: LD_VAR 0 2
37142: PPUSH
37143: LD_VAR 0 5
37147: PPUSH
37148: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37152: LD_VAR 0 6
37156: PUSH
37157: LD_INT 1
37159: ARRAY
37160: PPUSH
37161: LD_VAR 0 3
37165: PPUSH
37166: LD_VAR 0 4
37170: PPUSH
37171: CALL_OW 237
// end ;
37175: PPOPN 6
37177: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37178: LD_EXP 67
37182: PUSH
37183: LD_EXP 114
37187: AND
37188: IFFALSE 37267
37190: GO 37192
37192: DISABLE
37193: LD_INT 0
37195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37196: LD_ADDR_VAR 0 1
37200: PUSH
37201: LD_INT 22
37203: PUSH
37204: LD_OWVAR 2
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 30
37215: PUSH
37216: LD_INT 3
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PPUSH
37227: CALL_OW 69
37231: ST_TO_ADDR
// if not tmp then
37232: LD_VAR 0 1
37236: NOT
37237: IFFALSE 37241
// exit ;
37239: GO 37267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37241: LD_VAR 0 1
37245: PUSH
37246: LD_INT 1
37248: PPUSH
37249: LD_VAR 0 1
37253: PPUSH
37254: CALL_OW 12
37258: ARRAY
37259: PPUSH
37260: LD_INT 1
37262: PPUSH
37263: CALL_OW 234
// end ;
37267: PPOPN 1
37269: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37270: LD_EXP 67
37274: PUSH
37275: LD_EXP 115
37279: AND
37280: IFFALSE 37392
37282: GO 37284
37284: DISABLE
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37289: LD_ADDR_VAR 0 2
37293: PUSH
37294: LD_INT 22
37296: PUSH
37297: LD_OWVAR 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 30
37311: PUSH
37312: LD_INT 27
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 30
37321: PUSH
37322: LD_INT 26
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 30
37331: PUSH
37332: LD_INT 28
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PPUSH
37349: CALL_OW 69
37353: ST_TO_ADDR
// if not tmp then
37354: LD_VAR 0 2
37358: NOT
37359: IFFALSE 37363
// exit ;
37361: GO 37392
// for i in tmp do
37363: LD_ADDR_VAR 0 1
37367: PUSH
37368: LD_VAR 0 2
37372: PUSH
37373: FOR_IN
37374: IFFALSE 37390
// SetLives ( i , 1 ) ;
37376: LD_VAR 0 1
37380: PPUSH
37381: LD_INT 1
37383: PPUSH
37384: CALL_OW 234
37388: GO 37373
37390: POP
37391: POP
// end ;
37392: PPOPN 2
37394: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37395: LD_EXP 67
37399: PUSH
37400: LD_EXP 116
37404: AND
37405: IFFALSE 37679
37407: GO 37409
37409: DISABLE
37410: LD_INT 0
37412: PPUSH
37413: PPUSH
37414: PPUSH
// begin i := rand ( 1 , 7 ) ;
37415: LD_ADDR_VAR 0 1
37419: PUSH
37420: LD_INT 1
37422: PPUSH
37423: LD_INT 7
37425: PPUSH
37426: CALL_OW 12
37430: ST_TO_ADDR
// case i of 1 :
37431: LD_VAR 0 1
37435: PUSH
37436: LD_INT 1
37438: DOUBLE
37439: EQUAL
37440: IFTRUE 37444
37442: GO 37454
37444: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37445: LD_STRING earthquake(getX(game), 0, 32)
37447: PPUSH
37448: CALL_OW 559
37452: GO 37679
37454: LD_INT 2
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37476
37462: POP
// begin ToLua ( displayStucuk(); ) ;
37463: LD_STRING displayStucuk();
37465: PPUSH
37466: CALL_OW 559
// ResetFog ;
37470: CALL_OW 335
// end ; 3 :
37474: GO 37679
37476: LD_INT 3
37478: DOUBLE
37479: EQUAL
37480: IFTRUE 37484
37482: GO 37588
37484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37485: LD_ADDR_VAR 0 2
37489: PUSH
37490: LD_INT 22
37492: PUSH
37493: LD_OWVAR 2
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 25
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PPUSH
37516: CALL_OW 69
37520: ST_TO_ADDR
// if not tmp then
37521: LD_VAR 0 2
37525: NOT
37526: IFFALSE 37530
// exit ;
37528: GO 37679
// un := tmp [ rand ( 1 , tmp ) ] ;
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_VAR 0 2
37539: PUSH
37540: LD_INT 1
37542: PPUSH
37543: LD_VAR 0 2
37547: PPUSH
37548: CALL_OW 12
37552: ARRAY
37553: ST_TO_ADDR
// if Crawls ( un ) then
37554: LD_VAR 0 3
37558: PPUSH
37559: CALL_OW 318
37563: IFFALSE 37574
// ComWalk ( un ) ;
37565: LD_VAR 0 3
37569: PPUSH
37570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37574: LD_VAR 0 3
37578: PPUSH
37579: LD_INT 8
37581: PPUSH
37582: CALL_OW 336
// end ; 4 :
37586: GO 37679
37588: LD_INT 4
37590: DOUBLE
37591: EQUAL
37592: IFTRUE 37596
37594: GO 37657
37596: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37597: LD_ADDR_VAR 0 2
37601: PUSH
37602: LD_INT 22
37604: PUSH
37605: LD_OWVAR 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 30
37616: PUSH
37617: LD_INT 29
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PPUSH
37628: CALL_OW 69
37632: ST_TO_ADDR
// if not tmp then
37633: LD_VAR 0 2
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 37679
// DestroyUnit ( tmp [ 1 ] ) ;
37642: LD_VAR 0 2
37646: PUSH
37647: LD_INT 1
37649: ARRAY
37650: PPUSH
37651: CALL_OW 65
// end ; 5 .. 7 :
37655: GO 37679
37657: LD_INT 5
37659: DOUBLE
37660: GREATEREQUAL
37661: IFFALSE 37669
37663: LD_INT 7
37665: DOUBLE
37666: LESSEQUAL
37667: IFTRUE 37671
37669: GO 37678
37671: POP
// StreamSibBomb ; end ;
37672: CALL 33929 0 0
37676: GO 37679
37678: POP
// end ;
37679: PPOPN 3
37681: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37682: LD_EXP 67
37686: PUSH
37687: LD_EXP 117
37691: AND
37692: IFFALSE 37848
37694: GO 37696
37696: DISABLE
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37702: LD_ADDR_VAR 0 2
37706: PUSH
37707: LD_INT 81
37709: PUSH
37710: LD_OWVAR 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: LD_INT 21
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 21
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PPUSH
37751: CALL_OW 69
37755: ST_TO_ADDR
// if not tmp then
37756: LD_VAR 0 2
37760: NOT
37761: IFFALSE 37765
// exit ;
37763: GO 37848
// p := 0 ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_INT 0
37772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37773: LD_INT 35
37775: PPUSH
37776: CALL_OW 67
// p := p + 1 ;
37780: LD_ADDR_VAR 0 3
37784: PUSH
37785: LD_VAR 0 3
37789: PUSH
37790: LD_INT 1
37792: PLUS
37793: ST_TO_ADDR
// for i in tmp do
37794: LD_ADDR_VAR 0 1
37798: PUSH
37799: LD_VAR 0 2
37803: PUSH
37804: FOR_IN
37805: IFFALSE 37836
// if GetLives ( i ) < 1000 then
37807: LD_VAR 0 1
37811: PPUSH
37812: CALL_OW 256
37816: PUSH
37817: LD_INT 1000
37819: LESS
37820: IFFALSE 37834
// SetLives ( i , 1000 ) ;
37822: LD_VAR 0 1
37826: PPUSH
37827: LD_INT 1000
37829: PPUSH
37830: CALL_OW 234
37834: GO 37804
37836: POP
37837: POP
// until p > 20 ;
37838: LD_VAR 0 3
37842: PUSH
37843: LD_INT 20
37845: GREATER
37846: IFFALSE 37773
// end ;
37848: PPOPN 3
37850: END
// every 0 0$1 trigger StreamModeActive and sTime do
37851: LD_EXP 67
37855: PUSH
37856: LD_EXP 118
37860: AND
37861: IFFALSE 37896
37863: GO 37865
37865: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37866: LD_INT 28
37868: PPUSH
37869: LD_OWVAR 2
37873: PPUSH
37874: LD_INT 2
37876: PPUSH
37877: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37881: LD_INT 30
37883: PPUSH
37884: LD_OWVAR 2
37888: PPUSH
37889: LD_INT 2
37891: PPUSH
37892: CALL_OW 322
// end ;
37896: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
37897: LD_EXP 67
37901: PUSH
37902: LD_EXP 119
37906: AND
37907: IFFALSE 38028
37909: GO 37911
37911: DISABLE
37912: LD_INT 0
37914: PPUSH
37915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37916: LD_ADDR_VAR 0 2
37920: PUSH
37921: LD_INT 22
37923: PUSH
37924: LD_OWVAR 2
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 21
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 3
37945: PUSH
37946: LD_INT 23
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: PPUSH
37965: CALL_OW 69
37969: ST_TO_ADDR
// if not tmp then
37970: LD_VAR 0 2
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 38028
// for i in tmp do
37979: LD_ADDR_VAR 0 1
37983: PUSH
37984: LD_VAR 0 2
37988: PUSH
37989: FOR_IN
37990: IFFALSE 38026
// begin if Crawls ( i ) then
37992: LD_VAR 0 1
37996: PPUSH
37997: CALL_OW 318
38001: IFFALSE 38012
// ComWalk ( i ) ;
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 138
// SetClass ( i , 2 ) ;
38012: LD_VAR 0 1
38016: PPUSH
38017: LD_INT 2
38019: PPUSH
38020: CALL_OW 336
// end ;
38024: GO 37989
38026: POP
38027: POP
// end ;
38028: PPOPN 2
38030: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38031: LD_EXP 67
38035: PUSH
38036: LD_EXP 120
38040: AND
38041: IFFALSE 38322
38043: GO 38045
38045: DISABLE
38046: LD_INT 0
38048: PPUSH
38049: PPUSH
38050: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38051: LD_OWVAR 2
38055: PPUSH
38056: LD_INT 9
38058: PPUSH
38059: LD_INT 1
38061: PPUSH
38062: LD_INT 1
38064: PPUSH
38065: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38069: LD_INT 9
38071: PPUSH
38072: LD_OWVAR 2
38076: PPUSH
38077: CALL_OW 343
// uc_side := 9 ;
38081: LD_ADDR_OWVAR 20
38085: PUSH
38086: LD_INT 9
38088: ST_TO_ADDR
// uc_nation := 2 ;
38089: LD_ADDR_OWVAR 21
38093: PUSH
38094: LD_INT 2
38096: ST_TO_ADDR
// hc_name := Dark Warrior ;
38097: LD_ADDR_OWVAR 26
38101: PUSH
38102: LD_STRING Dark Warrior
38104: ST_TO_ADDR
// hc_gallery :=  ;
38105: LD_ADDR_OWVAR 33
38109: PUSH
38110: LD_STRING 
38112: ST_TO_ADDR
// hc_noskilllimit := true ;
38113: LD_ADDR_OWVAR 76
38117: PUSH
38118: LD_INT 1
38120: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38121: LD_ADDR_OWVAR 31
38125: PUSH
38126: LD_INT 30
38128: PUSH
38129: LD_INT 30
38131: PUSH
38132: LD_INT 30
38134: PUSH
38135: LD_INT 30
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: ST_TO_ADDR
// un := CreateHuman ;
38144: LD_ADDR_VAR 0 3
38148: PUSH
38149: CALL_OW 44
38153: ST_TO_ADDR
// hc_noskilllimit := false ;
38154: LD_ADDR_OWVAR 76
38158: PUSH
38159: LD_INT 0
38161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38162: LD_VAR 0 3
38166: PPUSH
38167: LD_INT 1
38169: PPUSH
38170: CALL_OW 51
// p := 0 ;
38174: LD_ADDR_VAR 0 2
38178: PUSH
38179: LD_INT 0
38181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38182: LD_INT 35
38184: PPUSH
38185: CALL_OW 67
// p := p + 1 ;
38189: LD_ADDR_VAR 0 2
38193: PUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_INT 1
38201: PLUS
38202: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38203: LD_VAR 0 3
38207: PPUSH
38208: CALL_OW 256
38212: PUSH
38213: LD_INT 1000
38215: LESS
38216: IFFALSE 38230
// SetLives ( un , 1000 ) ;
38218: LD_VAR 0 3
38222: PPUSH
38223: LD_INT 1000
38225: PPUSH
38226: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38230: LD_VAR 0 3
38234: PPUSH
38235: LD_INT 81
38237: PUSH
38238: LD_OWVAR 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 91
38249: PUSH
38250: LD_VAR 0 3
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PPUSH
38267: CALL_OW 69
38271: PPUSH
38272: LD_VAR 0 3
38276: PPUSH
38277: CALL_OW 74
38281: PPUSH
38282: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38286: LD_VAR 0 2
38290: PUSH
38291: LD_INT 60
38293: GREATER
38294: PUSH
38295: LD_VAR 0 3
38299: PPUSH
38300: CALL_OW 301
38304: OR
38305: IFFALSE 38182
// if un then
38307: LD_VAR 0 3
38311: IFFALSE 38322
// RemoveUnit ( un ) ;
38313: LD_VAR 0 3
38317: PPUSH
38318: CALL_OW 64
// end ;
38322: PPOPN 3
38324: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38325: LD_INT 0
38327: PPUSH
// case cmd of 301 :
38328: LD_VAR 0 1
38332: PUSH
38333: LD_INT 301
38335: DOUBLE
38336: EQUAL
38337: IFTRUE 38341
38339: GO 38373
38341: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
38342: LD_VAR 0 6
38346: PPUSH
38347: LD_VAR 0 7
38351: PPUSH
38352: LD_VAR 0 8
38356: PPUSH
38357: LD_VAR 0 4
38361: PPUSH
38362: LD_VAR 0 5
38366: PPUSH
38367: CALL 39574 0 5
38371: GO 38494
38373: LD_INT 302
38375: DOUBLE
38376: EQUAL
38377: IFTRUE 38381
38379: GO 38418
38381: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
38382: LD_VAR 0 6
38386: PPUSH
38387: LD_VAR 0 7
38391: PPUSH
38392: LD_VAR 0 8
38396: PPUSH
38397: LD_VAR 0 9
38401: PPUSH
38402: LD_VAR 0 4
38406: PPUSH
38407: LD_VAR 0 5
38411: PPUSH
38412: CALL 39665 0 6
38416: GO 38494
38418: LD_INT 303
38420: DOUBLE
38421: EQUAL
38422: IFTRUE 38426
38424: GO 38463
38426: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
38427: LD_VAR 0 6
38431: PPUSH
38432: LD_VAR 0 7
38436: PPUSH
38437: LD_VAR 0 8
38441: PPUSH
38442: LD_VAR 0 9
38446: PPUSH
38447: LD_VAR 0 4
38451: PPUSH
38452: LD_VAR 0 5
38456: PPUSH
38457: CALL 38499 0 6
38461: GO 38494
38463: LD_INT 304
38465: DOUBLE
38466: EQUAL
38467: IFTRUE 38471
38469: GO 38493
38471: POP
// hHackTeleport ( unit , x , y ) ; end ;
38472: LD_VAR 0 2
38476: PPUSH
38477: LD_VAR 0 4
38481: PPUSH
38482: LD_VAR 0 5
38486: PPUSH
38487: CALL 40258 0 3
38491: GO 38494
38493: POP
// end ;
38494: LD_VAR 0 12
38498: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
38499: LD_INT 0
38501: PPUSH
38502: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
38503: LD_VAR 0 1
38507: PUSH
38508: LD_INT 1
38510: LESS
38511: PUSH
38512: LD_VAR 0 1
38516: PUSH
38517: LD_INT 3
38519: GREATER
38520: OR
38521: PUSH
38522: LD_VAR 0 5
38526: PPUSH
38527: LD_VAR 0 6
38531: PPUSH
38532: CALL_OW 428
38536: OR
38537: IFFALSE 38541
// exit ;
38539: GO 39261
// uc_side := your_side ;
38541: LD_ADDR_OWVAR 20
38545: PUSH
38546: LD_OWVAR 2
38550: ST_TO_ADDR
// uc_nation := nation ;
38551: LD_ADDR_OWVAR 21
38555: PUSH
38556: LD_VAR 0 1
38560: ST_TO_ADDR
// bc_level = 1 ;
38561: LD_ADDR_OWVAR 43
38565: PUSH
38566: LD_INT 1
38568: ST_TO_ADDR
// case btype of 1 :
38569: LD_VAR 0 2
38573: PUSH
38574: LD_INT 1
38576: DOUBLE
38577: EQUAL
38578: IFTRUE 38582
38580: GO 38593
38582: POP
// bc_type := b_depot ; 2 :
38583: LD_ADDR_OWVAR 42
38587: PUSH
38588: LD_INT 0
38590: ST_TO_ADDR
38591: GO 39205
38593: LD_INT 2
38595: DOUBLE
38596: EQUAL
38597: IFTRUE 38601
38599: GO 38612
38601: POP
// bc_type := b_warehouse ; 3 :
38602: LD_ADDR_OWVAR 42
38606: PUSH
38607: LD_INT 1
38609: ST_TO_ADDR
38610: GO 39205
38612: LD_INT 3
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38620
38618: GO 38631
38620: POP
// bc_type := b_lab ; 4 .. 9 :
38621: LD_ADDR_OWVAR 42
38625: PUSH
38626: LD_INT 6
38628: ST_TO_ADDR
38629: GO 39205
38631: LD_INT 4
38633: DOUBLE
38634: GREATEREQUAL
38635: IFFALSE 38643
38637: LD_INT 9
38639: DOUBLE
38640: LESSEQUAL
38641: IFTRUE 38645
38643: GO 38697
38645: POP
// begin bc_type := b_lab_half ;
38646: LD_ADDR_OWVAR 42
38650: PUSH
38651: LD_INT 7
38653: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
38654: LD_ADDR_OWVAR 44
38658: PUSH
38659: LD_INT 10
38661: PUSH
38662: LD_INT 11
38664: PUSH
38665: LD_INT 12
38667: PUSH
38668: LD_INT 15
38670: PUSH
38671: LD_INT 14
38673: PUSH
38674: LD_INT 13
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_INT 3
38692: MINUS
38693: ARRAY
38694: ST_TO_ADDR
// end ; 10 .. 13 :
38695: GO 39205
38697: LD_INT 10
38699: DOUBLE
38700: GREATEREQUAL
38701: IFFALSE 38709
38703: LD_INT 13
38705: DOUBLE
38706: LESSEQUAL
38707: IFTRUE 38711
38709: GO 38788
38711: POP
// begin bc_type := b_lab_full ;
38712: LD_ADDR_OWVAR 42
38716: PUSH
38717: LD_INT 8
38719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
38720: LD_ADDR_OWVAR 44
38724: PUSH
38725: LD_INT 10
38727: PUSH
38728: LD_INT 12
38730: PUSH
38731: LD_INT 14
38733: PUSH
38734: LD_INT 13
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: PUSH
38743: LD_VAR 0 2
38747: PUSH
38748: LD_INT 9
38750: MINUS
38751: ARRAY
38752: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
38753: LD_ADDR_OWVAR 45
38757: PUSH
38758: LD_INT 11
38760: PUSH
38761: LD_INT 15
38763: PUSH
38764: LD_INT 12
38766: PUSH
38767: LD_INT 15
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: LD_INT 9
38783: MINUS
38784: ARRAY
38785: ST_TO_ADDR
// end ; 14 :
38786: GO 39205
38788: LD_INT 14
38790: DOUBLE
38791: EQUAL
38792: IFTRUE 38796
38794: GO 38807
38796: POP
// bc_type := b_workshop ; 15 :
38797: LD_ADDR_OWVAR 42
38801: PUSH
38802: LD_INT 2
38804: ST_TO_ADDR
38805: GO 39205
38807: LD_INT 15
38809: DOUBLE
38810: EQUAL
38811: IFTRUE 38815
38813: GO 38826
38815: POP
// bc_type := b_factory ; 16 :
38816: LD_ADDR_OWVAR 42
38820: PUSH
38821: LD_INT 3
38823: ST_TO_ADDR
38824: GO 39205
38826: LD_INT 16
38828: DOUBLE
38829: EQUAL
38830: IFTRUE 38834
38832: GO 38845
38834: POP
// bc_type := b_ext_gun ; 17 :
38835: LD_ADDR_OWVAR 42
38839: PUSH
38840: LD_INT 17
38842: ST_TO_ADDR
38843: GO 39205
38845: LD_INT 17
38847: DOUBLE
38848: EQUAL
38849: IFTRUE 38853
38851: GO 38881
38853: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
38854: LD_ADDR_OWVAR 42
38858: PUSH
38859: LD_INT 19
38861: PUSH
38862: LD_INT 23
38864: PUSH
38865: LD_INT 19
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: PUSH
38873: LD_VAR 0 1
38877: ARRAY
38878: ST_TO_ADDR
38879: GO 39205
38881: LD_INT 18
38883: DOUBLE
38884: EQUAL
38885: IFTRUE 38889
38887: GO 38900
38889: POP
// bc_type := b_ext_radar ; 19 :
38890: LD_ADDR_OWVAR 42
38894: PUSH
38895: LD_INT 20
38897: ST_TO_ADDR
38898: GO 39205
38900: LD_INT 19
38902: DOUBLE
38903: EQUAL
38904: IFTRUE 38908
38906: GO 38919
38908: POP
// bc_type := b_ext_radio ; 20 :
38909: LD_ADDR_OWVAR 42
38913: PUSH
38914: LD_INT 22
38916: ST_TO_ADDR
38917: GO 39205
38919: LD_INT 20
38921: DOUBLE
38922: EQUAL
38923: IFTRUE 38927
38925: GO 38938
38927: POP
// bc_type := b_ext_siberium ; 21 :
38928: LD_ADDR_OWVAR 42
38932: PUSH
38933: LD_INT 21
38935: ST_TO_ADDR
38936: GO 39205
38938: LD_INT 21
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 38957
38946: POP
// bc_type := b_ext_computer ; 22 :
38947: LD_ADDR_OWVAR 42
38951: PUSH
38952: LD_INT 24
38954: ST_TO_ADDR
38955: GO 39205
38957: LD_INT 22
38959: DOUBLE
38960: EQUAL
38961: IFTRUE 38965
38963: GO 38976
38965: POP
// bc_type := b_ext_track ; 23 :
38966: LD_ADDR_OWVAR 42
38970: PUSH
38971: LD_INT 16
38973: ST_TO_ADDR
38974: GO 39205
38976: LD_INT 23
38978: DOUBLE
38979: EQUAL
38980: IFTRUE 38984
38982: GO 38995
38984: POP
// bc_type := b_ext_laser ; 24 :
38985: LD_ADDR_OWVAR 42
38989: PUSH
38990: LD_INT 25
38992: ST_TO_ADDR
38993: GO 39205
38995: LD_INT 24
38997: DOUBLE
38998: EQUAL
38999: IFTRUE 39003
39001: GO 39014
39003: POP
// bc_type := b_control_tower ; 25 :
39004: LD_ADDR_OWVAR 42
39008: PUSH
39009: LD_INT 36
39011: ST_TO_ADDR
39012: GO 39205
39014: LD_INT 25
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39022
39020: GO 39033
39022: POP
// bc_type := b_breastwork ; 26 :
39023: LD_ADDR_OWVAR 42
39027: PUSH
39028: LD_INT 31
39030: ST_TO_ADDR
39031: GO 39205
39033: LD_INT 26
39035: DOUBLE
39036: EQUAL
39037: IFTRUE 39041
39039: GO 39052
39041: POP
// bc_type := b_bunker ; 27 :
39042: LD_ADDR_OWVAR 42
39046: PUSH
39047: LD_INT 32
39049: ST_TO_ADDR
39050: GO 39205
39052: LD_INT 27
39054: DOUBLE
39055: EQUAL
39056: IFTRUE 39060
39058: GO 39071
39060: POP
// bc_type := b_turret ; 28 :
39061: LD_ADDR_OWVAR 42
39065: PUSH
39066: LD_INT 33
39068: ST_TO_ADDR
39069: GO 39205
39071: LD_INT 28
39073: DOUBLE
39074: EQUAL
39075: IFTRUE 39079
39077: GO 39090
39079: POP
// bc_type := b_armoury ; 29 :
39080: LD_ADDR_OWVAR 42
39084: PUSH
39085: LD_INT 4
39087: ST_TO_ADDR
39088: GO 39205
39090: LD_INT 29
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39098
39096: GO 39109
39098: POP
// bc_type := b_barracks ; 30 :
39099: LD_ADDR_OWVAR 42
39103: PUSH
39104: LD_INT 5
39106: ST_TO_ADDR
39107: GO 39205
39109: LD_INT 30
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39128
39117: POP
// bc_type := b_solar_power ; 31 :
39118: LD_ADDR_OWVAR 42
39122: PUSH
39123: LD_INT 27
39125: ST_TO_ADDR
39126: GO 39205
39128: LD_INT 31
39130: DOUBLE
39131: EQUAL
39132: IFTRUE 39136
39134: GO 39147
39136: POP
// bc_type := b_oil_power ; 32 :
39137: LD_ADDR_OWVAR 42
39141: PUSH
39142: LD_INT 26
39144: ST_TO_ADDR
39145: GO 39205
39147: LD_INT 32
39149: DOUBLE
39150: EQUAL
39151: IFTRUE 39155
39153: GO 39166
39155: POP
// bc_type := b_siberite_power ; 33 :
39156: LD_ADDR_OWVAR 42
39160: PUSH
39161: LD_INT 28
39163: ST_TO_ADDR
39164: GO 39205
39166: LD_INT 33
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39185
39174: POP
// bc_type := b_oil_mine ; 34 :
39175: LD_ADDR_OWVAR 42
39179: PUSH
39180: LD_INT 29
39182: ST_TO_ADDR
39183: GO 39205
39185: LD_INT 34
39187: DOUBLE
39188: EQUAL
39189: IFTRUE 39193
39191: GO 39204
39193: POP
// bc_type := b_siberite_mine ; end ;
39194: LD_ADDR_OWVAR 42
39198: PUSH
39199: LD_INT 30
39201: ST_TO_ADDR
39202: GO 39205
39204: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39205: LD_ADDR_VAR 0 8
39209: PUSH
39210: LD_VAR 0 5
39214: PPUSH
39215: LD_VAR 0 6
39219: PPUSH
39220: LD_VAR 0 3
39224: PPUSH
39225: CALL_OW 47
39229: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39230: LD_OWVAR 42
39234: PUSH
39235: LD_INT 32
39237: PUSH
39238: LD_INT 33
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: IN
39245: IFFALSE 39261
// PlaceWeaponTurret ( b , weapon ) ;
39247: LD_VAR 0 8
39251: PPUSH
39252: LD_VAR 0 4
39256: PPUSH
39257: CALL_OW 431
// end ;
39261: LD_VAR 0 7
39265: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39266: LD_INT 0
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39272: LD_ADDR_VAR 0 4
39276: PUSH
39277: LD_INT 22
39279: PUSH
39280: LD_OWVAR 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 30
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 30
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PPUSH
39321: CALL_OW 69
39325: ST_TO_ADDR
// if not tmp then
39326: LD_VAR 0 4
39330: NOT
39331: IFFALSE 39335
// exit ;
39333: GO 39394
// for i in tmp do
39335: LD_ADDR_VAR 0 2
39339: PUSH
39340: LD_VAR 0 4
39344: PUSH
39345: FOR_IN
39346: IFFALSE 39392
// for j = 1 to 3 do
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: DOUBLE
39354: LD_INT 1
39356: DEC
39357: ST_TO_ADDR
39358: LD_INT 3
39360: PUSH
39361: FOR_TO
39362: IFFALSE 39388
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
39364: LD_VAR 0 2
39368: PPUSH
39369: CALL_OW 274
39373: PPUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: LD_INT 99999
39381: PPUSH
39382: CALL_OW 277
39386: GO 39361
39388: POP
39389: POP
39390: GO 39345
39392: POP
39393: POP
// end ;
39394: LD_VAR 0 1
39398: RET
// export function hHackSetLevel10 ; var i , j ; begin
39399: LD_INT 0
39401: PPUSH
39402: PPUSH
39403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39404: LD_ADDR_VAR 0 2
39408: PUSH
39409: LD_INT 21
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PPUSH
39419: CALL_OW 69
39423: PUSH
39424: FOR_IN
39425: IFFALSE 39477
// if IsSelected ( i ) then
39427: LD_VAR 0 2
39431: PPUSH
39432: CALL_OW 306
39436: IFFALSE 39475
// begin for j := 1 to 4 do
39438: LD_ADDR_VAR 0 3
39442: PUSH
39443: DOUBLE
39444: LD_INT 1
39446: DEC
39447: ST_TO_ADDR
39448: LD_INT 4
39450: PUSH
39451: FOR_TO
39452: IFFALSE 39473
// SetSkill ( i , j , 10 ) ;
39454: LD_VAR 0 2
39458: PPUSH
39459: LD_VAR 0 3
39463: PPUSH
39464: LD_INT 10
39466: PPUSH
39467: CALL_OW 237
39471: GO 39451
39473: POP
39474: POP
// end ;
39475: GO 39424
39477: POP
39478: POP
// end ;
39479: LD_VAR 0 1
39483: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
39484: LD_INT 0
39486: PPUSH
39487: PPUSH
39488: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
39489: LD_ADDR_VAR 0 2
39493: PUSH
39494: LD_INT 22
39496: PUSH
39497: LD_OWVAR 2
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 21
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PPUSH
39520: CALL_OW 69
39524: PUSH
39525: FOR_IN
39526: IFFALSE 39567
// begin for j := 1 to 4 do
39528: LD_ADDR_VAR 0 3
39532: PUSH
39533: DOUBLE
39534: LD_INT 1
39536: DEC
39537: ST_TO_ADDR
39538: LD_INT 4
39540: PUSH
39541: FOR_TO
39542: IFFALSE 39563
// SetSkill ( i , j , 10 ) ;
39544: LD_VAR 0 2
39548: PPUSH
39549: LD_VAR 0 3
39553: PPUSH
39554: LD_INT 10
39556: PPUSH
39557: CALL_OW 237
39561: GO 39541
39563: POP
39564: POP
// end ;
39565: GO 39525
39567: POP
39568: POP
// end ;
39569: LD_VAR 0 1
39573: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
39574: LD_INT 0
39576: PPUSH
// uc_side := your_side ;
39577: LD_ADDR_OWVAR 20
39581: PUSH
39582: LD_OWVAR 2
39586: ST_TO_ADDR
// uc_nation := nation ;
39587: LD_ADDR_OWVAR 21
39591: PUSH
39592: LD_VAR 0 1
39596: ST_TO_ADDR
// InitHc ;
39597: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
39601: LD_INT 0
39603: PPUSH
39604: LD_VAR 0 2
39608: PPUSH
39609: LD_VAR 0 3
39613: PPUSH
39614: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
39618: LD_VAR 0 4
39622: PPUSH
39623: LD_VAR 0 5
39627: PPUSH
39628: CALL_OW 428
39632: PUSH
39633: LD_INT 0
39635: EQUAL
39636: IFFALSE 39660
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
39638: CALL_OW 44
39642: PPUSH
39643: LD_VAR 0 4
39647: PPUSH
39648: LD_VAR 0 5
39652: PPUSH
39653: LD_INT 1
39655: PPUSH
39656: CALL_OW 48
// end ;
39660: LD_VAR 0 6
39664: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
39665: LD_INT 0
39667: PPUSH
39668: PPUSH
// uc_side := your_side ;
39669: LD_ADDR_OWVAR 20
39673: PUSH
39674: LD_OWVAR 2
39678: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
39679: LD_VAR 0 1
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: LD_INT 4
39695: PUSH
39696: LD_INT 5
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: IN
39706: IFFALSE 39718
// uc_nation := nation_american else
39708: LD_ADDR_OWVAR 21
39712: PUSH
39713: LD_INT 1
39715: ST_TO_ADDR
39716: GO 39761
// if chassis in [ 11 , 12 , 13 , 14 ] then
39718: LD_VAR 0 1
39722: PUSH
39723: LD_INT 11
39725: PUSH
39726: LD_INT 12
39728: PUSH
39729: LD_INT 13
39731: PUSH
39732: LD_INT 14
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: IN
39741: IFFALSE 39753
// uc_nation := nation_arabian else
39743: LD_ADDR_OWVAR 21
39747: PUSH
39748: LD_INT 2
39750: ST_TO_ADDR
39751: GO 39761
// uc_nation := nation_russian ;
39753: LD_ADDR_OWVAR 21
39757: PUSH
39758: LD_INT 3
39760: ST_TO_ADDR
// vc_chassis := chassis ;
39761: LD_ADDR_OWVAR 37
39765: PUSH
39766: LD_VAR 0 1
39770: ST_TO_ADDR
// vc_engine := engine ;
39771: LD_ADDR_OWVAR 39
39775: PUSH
39776: LD_VAR 0 2
39780: ST_TO_ADDR
// vc_control := control ;
39781: LD_ADDR_OWVAR 38
39785: PUSH
39786: LD_VAR 0 3
39790: ST_TO_ADDR
// vc_weapon := weapon ;
39791: LD_ADDR_OWVAR 40
39795: PUSH
39796: LD_VAR 0 4
39800: ST_TO_ADDR
// un := CreateVehicle ;
39801: LD_ADDR_VAR 0 8
39805: PUSH
39806: CALL_OW 45
39810: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
39811: LD_VAR 0 8
39815: PPUSH
39816: LD_INT 0
39818: PPUSH
39819: LD_INT 5
39821: PPUSH
39822: CALL_OW 12
39826: PPUSH
39827: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
39831: LD_VAR 0 8
39835: PPUSH
39836: LD_VAR 0 5
39840: PPUSH
39841: LD_VAR 0 6
39845: PPUSH
39846: LD_INT 1
39848: PPUSH
39849: CALL_OW 48
// end ;
39853: LD_VAR 0 7
39857: RET
// export hInvincible ; every 1 do
39858: GO 39860
39860: DISABLE
// hInvincible := [ ] ;
39861: LD_ADDR_EXP 121
39865: PUSH
39866: EMPTY
39867: ST_TO_ADDR
39868: END
// every 10 do var i ;
39869: GO 39871
39871: DISABLE
39872: LD_INT 0
39874: PPUSH
// begin enable ;
39875: ENABLE
// if not hInvincible then
39876: LD_EXP 121
39880: NOT
39881: IFFALSE 39885
// exit ;
39883: GO 39929
// for i in hInvincible do
39885: LD_ADDR_VAR 0 1
39889: PUSH
39890: LD_EXP 121
39894: PUSH
39895: FOR_IN
39896: IFFALSE 39927
// if GetLives ( i ) < 1000 then
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 256
39907: PUSH
39908: LD_INT 1000
39910: LESS
39911: IFFALSE 39925
// SetLives ( i , 1000 ) ;
39913: LD_VAR 0 1
39917: PPUSH
39918: LD_INT 1000
39920: PPUSH
39921: CALL_OW 234
39925: GO 39895
39927: POP
39928: POP
// end ;
39929: PPOPN 1
39931: END
// export function hHackInvincible ; var i ; begin
39932: LD_INT 0
39934: PPUSH
39935: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
39936: LD_ADDR_VAR 0 2
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 21
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 21
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: PPUSH
39969: CALL_OW 69
39973: PUSH
39974: FOR_IN
39975: IFFALSE 40036
// if IsSelected ( i ) then
39977: LD_VAR 0 2
39981: PPUSH
39982: CALL_OW 306
39986: IFFALSE 40034
// begin if i in hInvincible then
39988: LD_VAR 0 2
39992: PUSH
39993: LD_EXP 121
39997: IN
39998: IFFALSE 40018
// hInvincible := hInvincible diff i else
40000: LD_ADDR_EXP 121
40004: PUSH
40005: LD_EXP 121
40009: PUSH
40010: LD_VAR 0 2
40014: DIFF
40015: ST_TO_ADDR
40016: GO 40034
// hInvincible := hInvincible union i ;
40018: LD_ADDR_EXP 121
40022: PUSH
40023: LD_EXP 121
40027: PUSH
40028: LD_VAR 0 2
40032: UNION
40033: ST_TO_ADDR
// end ;
40034: GO 39974
40036: POP
40037: POP
// end ;
40038: LD_VAR 0 1
40042: RET
// export function hHackInvisible ; var i , j ; begin
40043: LD_INT 0
40045: PPUSH
40046: PPUSH
40047: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40048: LD_ADDR_VAR 0 2
40052: PUSH
40053: LD_INT 21
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PPUSH
40063: CALL_OW 69
40067: PUSH
40068: FOR_IN
40069: IFFALSE 40093
// if IsSelected ( i ) then
40071: LD_VAR 0 2
40075: PPUSH
40076: CALL_OW 306
40080: IFFALSE 40091
// ComForceInvisible ( i ) ;
40082: LD_VAR 0 2
40086: PPUSH
40087: CALL_OW 496
40091: GO 40068
40093: POP
40094: POP
// end ;
40095: LD_VAR 0 1
40099: RET
// export function hHackChangeYourSide ; begin
40100: LD_INT 0
40102: PPUSH
// if your_side = 8 then
40103: LD_OWVAR 2
40107: PUSH
40108: LD_INT 8
40110: EQUAL
40111: IFFALSE 40123
// your_side := 0 else
40113: LD_ADDR_OWVAR 2
40117: PUSH
40118: LD_INT 0
40120: ST_TO_ADDR
40121: GO 40137
// your_side := your_side + 1 ;
40123: LD_ADDR_OWVAR 2
40127: PUSH
40128: LD_OWVAR 2
40132: PUSH
40133: LD_INT 1
40135: PLUS
40136: ST_TO_ADDR
// end ;
40137: LD_VAR 0 1
40141: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40142: LD_INT 0
40144: PPUSH
40145: PPUSH
40146: PPUSH
// for i in all_units do
40147: LD_ADDR_VAR 0 2
40151: PUSH
40152: LD_OWVAR 3
40156: PUSH
40157: FOR_IN
40158: IFFALSE 40236
// if IsSelected ( i ) then
40160: LD_VAR 0 2
40164: PPUSH
40165: CALL_OW 306
40169: IFFALSE 40234
// begin j := GetSide ( i ) ;
40171: LD_ADDR_VAR 0 3
40175: PUSH
40176: LD_VAR 0 2
40180: PPUSH
40181: CALL_OW 255
40185: ST_TO_ADDR
// if j = 8 then
40186: LD_VAR 0 3
40190: PUSH
40191: LD_INT 8
40193: EQUAL
40194: IFFALSE 40206
// j := 0 else
40196: LD_ADDR_VAR 0 3
40200: PUSH
40201: LD_INT 0
40203: ST_TO_ADDR
40204: GO 40220
// j := j + 1 ;
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: LD_VAR 0 3
40215: PUSH
40216: LD_INT 1
40218: PLUS
40219: ST_TO_ADDR
// SetSide ( i , j ) ;
40220: LD_VAR 0 2
40224: PPUSH
40225: LD_VAR 0 3
40229: PPUSH
40230: CALL_OW 235
// end ;
40234: GO 40157
40236: POP
40237: POP
// end ;
40238: LD_VAR 0 1
40242: RET
// export function hHackFog ; begin
40243: LD_INT 0
40245: PPUSH
// FogOff ( true ) ;
40246: LD_INT 1
40248: PPUSH
40249: CALL_OW 344
// end ;
40253: LD_VAR 0 1
40257: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40258: LD_INT 0
40260: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40261: LD_VAR 0 1
40265: PPUSH
40266: LD_VAR 0 2
40270: PPUSH
40271: LD_VAR 0 3
40275: PPUSH
40276: LD_INT 1
40278: PPUSH
40279: LD_INT 1
40281: PPUSH
40282: CALL_OW 483
// CenterOnXY ( x , y ) ;
40286: LD_VAR 0 2
40290: PPUSH
40291: LD_VAR 0 3
40295: PPUSH
40296: CALL_OW 84
// end ; end_of_file
40300: LD_VAR 0 4
40304: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40305: LD_INT 0
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 264
40320: PUSH
40321: LD_EXP 52
40325: EQUAL
40326: IFFALSE 40398
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40328: LD_INT 68
40330: PPUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 255
40340: PPUSH
40341: CALL_OW 321
40345: PUSH
40346: LD_INT 2
40348: EQUAL
40349: IFFALSE 40361
// eff := 70 else
40351: LD_ADDR_VAR 0 4
40355: PUSH
40356: LD_INT 70
40358: ST_TO_ADDR
40359: GO 40369
// eff := 30 ;
40361: LD_ADDR_VAR 0 4
40365: PUSH
40366: LD_INT 30
40368: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40369: LD_VAR 0 1
40373: PPUSH
40374: CALL_OW 250
40378: PPUSH
40379: LD_VAR 0 1
40383: PPUSH
40384: CALL_OW 251
40388: PPUSH
40389: LD_VAR 0 4
40393: PPUSH
40394: CALL_OW 495
// end ; end ;
40398: LD_VAR 0 2
40402: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40403: LD_INT 0
40405: PPUSH
// end ;
40406: LD_VAR 0 4
40410: RET
// export function SOS_Command ( cmd ) ; begin
40411: LD_INT 0
40413: PPUSH
// end ;
40414: LD_VAR 0 2
40418: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
40419: LD_INT 0
40421: PPUSH
// if cmd = 121 then
40422: LD_VAR 0 1
40426: PUSH
40427: LD_INT 121
40429: EQUAL
40430: IFFALSE 40432
// end ;
40432: LD_VAR 0 6
40436: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40437: LD_INT 0
40439: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40440: LD_VAR 0 1
40444: PUSH
40445: LD_INT 250
40447: EQUAL
40448: PUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: CALL_OW 264
40458: PUSH
40459: LD_EXP 55
40463: EQUAL
40464: AND
40465: IFFALSE 40486
// MinerPlaceMine ( unit , x , y ) ;
40467: LD_VAR 0 2
40471: PPUSH
40472: LD_VAR 0 4
40476: PPUSH
40477: LD_VAR 0 5
40481: PPUSH
40482: CALL 42835 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40486: LD_VAR 0 1
40490: PUSH
40491: LD_INT 251
40493: EQUAL
40494: PUSH
40495: LD_VAR 0 2
40499: PPUSH
40500: CALL_OW 264
40504: PUSH
40505: LD_EXP 55
40509: EQUAL
40510: AND
40511: IFFALSE 40532
// MinerDetonateMine ( unit , x , y ) ;
40513: LD_VAR 0 2
40517: PPUSH
40518: LD_VAR 0 4
40522: PPUSH
40523: LD_VAR 0 5
40527: PPUSH
40528: CALL 43112 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 252
40539: EQUAL
40540: PUSH
40541: LD_VAR 0 2
40545: PPUSH
40546: CALL_OW 264
40550: PUSH
40551: LD_EXP 55
40555: EQUAL
40556: AND
40557: IFFALSE 40578
// MinerCreateMinefield ( unit , x , y ) ;
40559: LD_VAR 0 2
40563: PPUSH
40564: LD_VAR 0 4
40568: PPUSH
40569: LD_VAR 0 5
40573: PPUSH
40574: CALL 43529 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40578: LD_VAR 0 1
40582: PUSH
40583: LD_INT 253
40585: EQUAL
40586: PUSH
40587: LD_VAR 0 2
40591: PPUSH
40592: CALL_OW 257
40596: PUSH
40597: LD_INT 5
40599: EQUAL
40600: AND
40601: IFFALSE 40622
// ComBinocular ( unit , x , y ) ;
40603: LD_VAR 0 2
40607: PPUSH
40608: LD_VAR 0 4
40612: PPUSH
40613: LD_VAR 0 5
40617: PPUSH
40618: CALL 43900 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40622: LD_VAR 0 1
40626: PUSH
40627: LD_INT 254
40629: EQUAL
40630: PUSH
40631: LD_VAR 0 2
40635: PPUSH
40636: CALL_OW 264
40640: PUSH
40641: LD_EXP 50
40645: EQUAL
40646: AND
40647: PUSH
40648: LD_VAR 0 3
40652: PPUSH
40653: CALL_OW 263
40657: PUSH
40658: LD_INT 3
40660: EQUAL
40661: AND
40662: IFFALSE 40678
// HackDestroyVehicle ( unit , selectedUnit ) ;
40664: LD_VAR 0 2
40668: PPUSH
40669: LD_VAR 0 3
40673: PPUSH
40674: CALL 42195 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40678: LD_VAR 0 1
40682: PUSH
40683: LD_INT 255
40685: EQUAL
40686: PUSH
40687: LD_VAR 0 2
40691: PPUSH
40692: CALL_OW 264
40696: PUSH
40697: LD_INT 14
40699: PUSH
40700: LD_INT 53
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: IN
40707: AND
40708: PUSH
40709: LD_VAR 0 4
40713: PPUSH
40714: LD_VAR 0 5
40718: PPUSH
40719: CALL_OW 488
40723: AND
40724: IFFALSE 40748
// CutTreeXYR ( unit , x , y , 12 ) ;
40726: LD_VAR 0 2
40730: PPUSH
40731: LD_VAR 0 4
40735: PPUSH
40736: LD_VAR 0 5
40740: PPUSH
40741: LD_INT 12
40743: PPUSH
40744: CALL 40761 0 4
// end ;
40748: LD_VAR 0 6
40752: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
40753: LD_INT 0
40755: PPUSH
// end ;
40756: LD_VAR 0 4
40760: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40761: LD_INT 0
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40772: LD_VAR 0 1
40776: NOT
40777: PUSH
40778: LD_VAR 0 2
40782: PPUSH
40783: LD_VAR 0 3
40787: PPUSH
40788: CALL_OW 488
40792: NOT
40793: OR
40794: PUSH
40795: LD_VAR 0 4
40799: NOT
40800: OR
40801: IFFALSE 40805
// exit ;
40803: GO 41145
// list := [ ] ;
40805: LD_ADDR_VAR 0 13
40809: PUSH
40810: EMPTY
40811: ST_TO_ADDR
// if x - r < 0 then
40812: LD_VAR 0 2
40816: PUSH
40817: LD_VAR 0 4
40821: MINUS
40822: PUSH
40823: LD_INT 0
40825: LESS
40826: IFFALSE 40838
// min_x := 0 else
40828: LD_ADDR_VAR 0 7
40832: PUSH
40833: LD_INT 0
40835: ST_TO_ADDR
40836: GO 40854
// min_x := x - r ;
40838: LD_ADDR_VAR 0 7
40842: PUSH
40843: LD_VAR 0 2
40847: PUSH
40848: LD_VAR 0 4
40852: MINUS
40853: ST_TO_ADDR
// if y - r < 0 then
40854: LD_VAR 0 3
40858: PUSH
40859: LD_VAR 0 4
40863: MINUS
40864: PUSH
40865: LD_INT 0
40867: LESS
40868: IFFALSE 40880
// min_y := 0 else
40870: LD_ADDR_VAR 0 8
40874: PUSH
40875: LD_INT 0
40877: ST_TO_ADDR
40878: GO 40896
// min_y := y - r ;
40880: LD_ADDR_VAR 0 8
40884: PUSH
40885: LD_VAR 0 3
40889: PUSH
40890: LD_VAR 0 4
40894: MINUS
40895: ST_TO_ADDR
// max_x := x + r ;
40896: LD_ADDR_VAR 0 9
40900: PUSH
40901: LD_VAR 0 2
40905: PUSH
40906: LD_VAR 0 4
40910: PLUS
40911: ST_TO_ADDR
// max_y := y + r ;
40912: LD_ADDR_VAR 0 10
40916: PUSH
40917: LD_VAR 0 3
40921: PUSH
40922: LD_VAR 0 4
40926: PLUS
40927: ST_TO_ADDR
// for _x = min_x to max_x do
40928: LD_ADDR_VAR 0 11
40932: PUSH
40933: DOUBLE
40934: LD_VAR 0 7
40938: DEC
40939: ST_TO_ADDR
40940: LD_VAR 0 9
40944: PUSH
40945: FOR_TO
40946: IFFALSE 41063
// for _y = min_y to max_y do
40948: LD_ADDR_VAR 0 12
40952: PUSH
40953: DOUBLE
40954: LD_VAR 0 8
40958: DEC
40959: ST_TO_ADDR
40960: LD_VAR 0 10
40964: PUSH
40965: FOR_TO
40966: IFFALSE 41059
// begin if not ValidHex ( _x , _y ) then
40968: LD_VAR 0 11
40972: PPUSH
40973: LD_VAR 0 12
40977: PPUSH
40978: CALL_OW 488
40982: NOT
40983: IFFALSE 40987
// continue ;
40985: GO 40965
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40987: LD_VAR 0 11
40991: PPUSH
40992: LD_VAR 0 12
40996: PPUSH
40997: CALL_OW 351
41001: PUSH
41002: LD_VAR 0 11
41006: PPUSH
41007: LD_VAR 0 12
41011: PPUSH
41012: CALL_OW 554
41016: AND
41017: IFFALSE 41057
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41019: LD_ADDR_VAR 0 13
41023: PUSH
41024: LD_VAR 0 13
41028: PPUSH
41029: LD_VAR 0 13
41033: PUSH
41034: LD_INT 1
41036: PLUS
41037: PPUSH
41038: LD_VAR 0 11
41042: PUSH
41043: LD_VAR 0 12
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PPUSH
41052: CALL_OW 2
41056: ST_TO_ADDR
// end ;
41057: GO 40965
41059: POP
41060: POP
41061: GO 40945
41063: POP
41064: POP
// if not list then
41065: LD_VAR 0 13
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41145
// for i in list do
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: LD_VAR 0 13
41083: PUSH
41084: FOR_IN
41085: IFFALSE 41143
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41087: LD_VAR 0 1
41091: PPUSH
41092: LD_STRING M
41094: PUSH
41095: LD_VAR 0 6
41099: PUSH
41100: LD_INT 1
41102: ARRAY
41103: PUSH
41104: LD_VAR 0 6
41108: PUSH
41109: LD_INT 2
41111: ARRAY
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: PPUSH
41137: CALL_OW 447
41141: GO 41084
41143: POP
41144: POP
// end ;
41145: LD_VAR 0 5
41149: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41150: LD_EXP 124
41154: NOT
41155: IFFALSE 41205
41157: GO 41159
41159: DISABLE
// begin initHack := true ;
41160: LD_ADDR_EXP 124
41164: PUSH
41165: LD_INT 1
41167: ST_TO_ADDR
// hackTanks := [ ] ;
41168: LD_ADDR_EXP 125
41172: PUSH
41173: EMPTY
41174: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41175: LD_ADDR_EXP 126
41179: PUSH
41180: EMPTY
41181: ST_TO_ADDR
// hackLimit := 3 ;
41182: LD_ADDR_EXP 127
41186: PUSH
41187: LD_INT 3
41189: ST_TO_ADDR
// hackDist := 12 ;
41190: LD_ADDR_EXP 128
41194: PUSH
41195: LD_INT 12
41197: ST_TO_ADDR
// hackCounter := [ ] ;
41198: LD_ADDR_EXP 129
41202: PUSH
41203: EMPTY
41204: ST_TO_ADDR
// end ;
41205: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41206: LD_EXP 124
41210: PUSH
41211: LD_INT 34
41213: PUSH
41214: LD_EXP 50
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PPUSH
41223: CALL_OW 69
41227: AND
41228: IFFALSE 41483
41230: GO 41232
41232: DISABLE
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
// begin enable ;
41237: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41238: LD_ADDR_VAR 0 1
41242: PUSH
41243: LD_INT 34
41245: PUSH
41246: LD_EXP 50
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PPUSH
41255: CALL_OW 69
41259: PUSH
41260: FOR_IN
41261: IFFALSE 41481
// begin if not i in hackTanks then
41263: LD_VAR 0 1
41267: PUSH
41268: LD_EXP 125
41272: IN
41273: NOT
41274: IFFALSE 41357
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41276: LD_ADDR_EXP 125
41280: PUSH
41281: LD_EXP 125
41285: PPUSH
41286: LD_EXP 125
41290: PUSH
41291: LD_INT 1
41293: PLUS
41294: PPUSH
41295: LD_VAR 0 1
41299: PPUSH
41300: CALL_OW 1
41304: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41305: LD_ADDR_EXP 126
41309: PUSH
41310: LD_EXP 126
41314: PPUSH
41315: LD_EXP 126
41319: PUSH
41320: LD_INT 1
41322: PLUS
41323: PPUSH
41324: EMPTY
41325: PPUSH
41326: CALL_OW 1
41330: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41331: LD_ADDR_EXP 129
41335: PUSH
41336: LD_EXP 129
41340: PPUSH
41341: LD_EXP 129
41345: PUSH
41346: LD_INT 1
41348: PLUS
41349: PPUSH
41350: EMPTY
41351: PPUSH
41352: CALL_OW 1
41356: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41357: LD_VAR 0 1
41361: PPUSH
41362: CALL_OW 302
41366: NOT
41367: IFFALSE 41380
// begin HackUnlinkAll ( i ) ;
41369: LD_VAR 0 1
41373: PPUSH
41374: CALL 41486 0 1
// continue ;
41378: GO 41260
// end ; HackCheckCapturedStatus ( i ) ;
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL 41929 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41389: LD_ADDR_VAR 0 2
41393: PUSH
41394: LD_INT 81
41396: PUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: CALL_OW 255
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 33
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 91
41423: PUSH
41424: LD_VAR 0 1
41428: PUSH
41429: LD_EXP 128
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 50
41441: PUSH
41442: EMPTY
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: PPUSH
41451: CALL_OW 69
41455: ST_TO_ADDR
// if not tmp then
41456: LD_VAR 0 2
41460: NOT
41461: IFFALSE 41465
// continue ;
41463: GO 41260
// HackLink ( i , tmp ) ;
41465: LD_VAR 0 1
41469: PPUSH
41470: LD_VAR 0 2
41474: PPUSH
41475: CALL 41622 0 2
// end ;
41479: GO 41260
41481: POP
41482: POP
// end ;
41483: PPOPN 2
41485: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41486: LD_INT 0
41488: PPUSH
41489: PPUSH
41490: PPUSH
// if not hack in hackTanks then
41491: LD_VAR 0 1
41495: PUSH
41496: LD_EXP 125
41500: IN
41501: NOT
41502: IFFALSE 41506
// exit ;
41504: GO 41617
// index := GetElementIndex ( hackTanks , hack ) ;
41506: LD_ADDR_VAR 0 4
41510: PUSH
41511: LD_EXP 125
41515: PPUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL 49091 0 2
41525: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41526: LD_EXP 126
41530: PUSH
41531: LD_VAR 0 4
41535: ARRAY
41536: IFFALSE 41617
// begin for i in hackTanksCaptured [ index ] do
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_EXP 126
41547: PUSH
41548: LD_VAR 0 4
41552: ARRAY
41553: PUSH
41554: FOR_IN
41555: IFFALSE 41581
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41557: LD_VAR 0 3
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: PPUSH
41566: LD_VAR 0 3
41570: PUSH
41571: LD_INT 2
41573: ARRAY
41574: PPUSH
41575: CALL_OW 235
41579: GO 41554
41581: POP
41582: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41583: LD_ADDR_EXP 126
41587: PUSH
41588: LD_EXP 126
41592: PPUSH
41593: LD_VAR 0 4
41597: PPUSH
41598: EMPTY
41599: PPUSH
41600: CALL_OW 1
41604: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41605: LD_VAR 0 1
41609: PPUSH
41610: LD_INT 0
41612: PPUSH
41613: CALL_OW 505
// end ; end ;
41617: LD_VAR 0 2
41621: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41622: LD_INT 0
41624: PPUSH
41625: PPUSH
41626: PPUSH
// if not hack in hackTanks or not vehicles then
41627: LD_VAR 0 1
41631: PUSH
41632: LD_EXP 125
41636: IN
41637: NOT
41638: PUSH
41639: LD_VAR 0 2
41643: NOT
41644: OR
41645: IFFALSE 41649
// exit ;
41647: GO 41924
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41649: LD_ADDR_VAR 0 2
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: LD_VAR 0 2
41663: PPUSH
41664: LD_INT 1
41666: PPUSH
41667: LD_INT 1
41669: PPUSH
41670: CALL 49741 0 4
41674: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41675: LD_ADDR_VAR 0 5
41679: PUSH
41680: LD_EXP 125
41684: PPUSH
41685: LD_VAR 0 1
41689: PPUSH
41690: CALL 49091 0 2
41694: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41695: LD_EXP 126
41699: PUSH
41700: LD_VAR 0 5
41704: ARRAY
41705: PUSH
41706: LD_EXP 127
41710: LESS
41711: IFFALSE 41900
// begin for i := 1 to vehicles do
41713: LD_ADDR_VAR 0 4
41717: PUSH
41718: DOUBLE
41719: LD_INT 1
41721: DEC
41722: ST_TO_ADDR
41723: LD_VAR 0 2
41727: PUSH
41728: FOR_TO
41729: IFFALSE 41898
// begin if hackTanksCaptured [ index ] = hackLimit then
41731: LD_EXP 126
41735: PUSH
41736: LD_VAR 0 5
41740: ARRAY
41741: PUSH
41742: LD_EXP 127
41746: EQUAL
41747: IFFALSE 41751
// break ;
41749: GO 41898
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41751: LD_ADDR_EXP 129
41755: PUSH
41756: LD_EXP 129
41760: PPUSH
41761: LD_VAR 0 5
41765: PPUSH
41766: LD_EXP 129
41770: PUSH
41771: LD_VAR 0 5
41775: ARRAY
41776: PUSH
41777: LD_INT 1
41779: PLUS
41780: PPUSH
41781: CALL_OW 1
41785: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41786: LD_ADDR_EXP 126
41790: PUSH
41791: LD_EXP 126
41795: PPUSH
41796: LD_VAR 0 5
41800: PUSH
41801: LD_EXP 126
41805: PUSH
41806: LD_VAR 0 5
41810: ARRAY
41811: PUSH
41812: LD_INT 1
41814: PLUS
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PPUSH
41820: LD_VAR 0 2
41824: PUSH
41825: LD_VAR 0 4
41829: ARRAY
41830: PUSH
41831: LD_VAR 0 2
41835: PUSH
41836: LD_VAR 0 4
41840: ARRAY
41841: PPUSH
41842: CALL_OW 255
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PPUSH
41851: CALL 49306 0 3
41855: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41856: LD_VAR 0 2
41860: PUSH
41861: LD_VAR 0 4
41865: ARRAY
41866: PPUSH
41867: LD_VAR 0 1
41871: PPUSH
41872: CALL_OW 255
41876: PPUSH
41877: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41881: LD_VAR 0 2
41885: PUSH
41886: LD_VAR 0 4
41890: ARRAY
41891: PPUSH
41892: CALL_OW 141
// end ;
41896: GO 41728
41898: POP
41899: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_EXP 126
41909: PUSH
41910: LD_VAR 0 5
41914: ARRAY
41915: PUSH
41916: LD_INT 0
41918: PLUS
41919: PPUSH
41920: CALL_OW 505
// end ;
41924: LD_VAR 0 3
41928: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41929: LD_INT 0
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
// if not hack in hackTanks then
41935: LD_VAR 0 1
41939: PUSH
41940: LD_EXP 125
41944: IN
41945: NOT
41946: IFFALSE 41950
// exit ;
41948: GO 42190
// index := GetElementIndex ( hackTanks , hack ) ;
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_EXP 125
41959: PPUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL 49091 0 2
41969: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41970: LD_ADDR_VAR 0 3
41974: PUSH
41975: DOUBLE
41976: LD_EXP 126
41980: PUSH
41981: LD_VAR 0 4
41985: ARRAY
41986: INC
41987: ST_TO_ADDR
41988: LD_INT 1
41990: PUSH
41991: FOR_DOWNTO
41992: IFFALSE 42164
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41994: LD_ADDR_VAR 0 5
41998: PUSH
41999: LD_EXP 126
42003: PUSH
42004: LD_VAR 0 4
42008: ARRAY
42009: PUSH
42010: LD_VAR 0 3
42014: ARRAY
42015: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
42016: LD_VAR 0 5
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: PPUSH
42025: CALL_OW 302
42029: NOT
42030: PUSH
42031: LD_VAR 0 5
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: PPUSH
42040: CALL_OW 255
42044: PUSH
42045: LD_VAR 0 1
42049: PPUSH
42050: CALL_OW 255
42054: NONEQUAL
42055: OR
42056: IFFALSE 42162
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
42058: LD_VAR 0 5
42062: PUSH
42063: LD_INT 1
42065: ARRAY
42066: PPUSH
42067: CALL_OW 305
42071: PUSH
42072: LD_VAR 0 5
42076: PUSH
42077: LD_INT 1
42079: ARRAY
42080: PPUSH
42081: CALL_OW 255
42085: PUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: CALL_OW 255
42095: EQUAL
42096: AND
42097: IFFALSE 42121
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42099: LD_VAR 0 5
42103: PUSH
42104: LD_INT 1
42106: ARRAY
42107: PPUSH
42108: LD_VAR 0 5
42112: PUSH
42113: LD_INT 2
42115: ARRAY
42116: PPUSH
42117: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42121: LD_ADDR_EXP 126
42125: PUSH
42126: LD_EXP 126
42130: PPUSH
42131: LD_VAR 0 4
42135: PPUSH
42136: LD_EXP 126
42140: PUSH
42141: LD_VAR 0 4
42145: ARRAY
42146: PPUSH
42147: LD_VAR 0 3
42151: PPUSH
42152: CALL_OW 3
42156: PPUSH
42157: CALL_OW 1
42161: ST_TO_ADDR
// end ; end ;
42162: GO 41991
42164: POP
42165: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42166: LD_VAR 0 1
42170: PPUSH
42171: LD_EXP 126
42175: PUSH
42176: LD_VAR 0 4
42180: ARRAY
42181: PUSH
42182: LD_INT 0
42184: PLUS
42185: PPUSH
42186: CALL_OW 505
// end ;
42190: LD_VAR 0 2
42194: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42195: LD_INT 0
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
// if not hack in hackTanks then
42201: LD_VAR 0 1
42205: PUSH
42206: LD_EXP 125
42210: IN
42211: NOT
42212: IFFALSE 42216
// exit ;
42214: GO 42301
// index := GetElementIndex ( hackTanks , hack ) ;
42216: LD_ADDR_VAR 0 5
42220: PUSH
42221: LD_EXP 125
42225: PPUSH
42226: LD_VAR 0 1
42230: PPUSH
42231: CALL 49091 0 2
42235: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42236: LD_ADDR_VAR 0 4
42240: PUSH
42241: DOUBLE
42242: LD_INT 1
42244: DEC
42245: ST_TO_ADDR
42246: LD_EXP 126
42250: PUSH
42251: LD_VAR 0 5
42255: ARRAY
42256: PUSH
42257: FOR_TO
42258: IFFALSE 42299
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42260: LD_EXP 126
42264: PUSH
42265: LD_VAR 0 5
42269: ARRAY
42270: PUSH
42271: LD_VAR 0 4
42275: ARRAY
42276: PUSH
42277: LD_INT 1
42279: ARRAY
42280: PUSH
42281: LD_VAR 0 2
42285: EQUAL
42286: IFFALSE 42297
// KillUnit ( vehicle ) ;
42288: LD_VAR 0 2
42292: PPUSH
42293: CALL_OW 66
42297: GO 42257
42299: POP
42300: POP
// end ;
42301: LD_VAR 0 3
42305: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42306: LD_EXP 130
42310: NOT
42311: IFFALSE 42346
42313: GO 42315
42315: DISABLE
// begin initMiner := true ;
42316: LD_ADDR_EXP 130
42320: PUSH
42321: LD_INT 1
42323: ST_TO_ADDR
// minersList := [ ] ;
42324: LD_ADDR_EXP 131
42328: PUSH
42329: EMPTY
42330: ST_TO_ADDR
// minerMinesList := [ ] ;
42331: LD_ADDR_EXP 132
42335: PUSH
42336: EMPTY
42337: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42338: LD_ADDR_EXP 133
42342: PUSH
42343: LD_INT 5
42345: ST_TO_ADDR
// end ;
42346: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42347: LD_EXP 130
42351: PUSH
42352: LD_INT 34
42354: PUSH
42355: LD_EXP 55
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PPUSH
42364: CALL_OW 69
42368: AND
42369: IFFALSE 42832
42371: GO 42373
42373: DISABLE
42374: LD_INT 0
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
// begin enable ;
42380: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42381: LD_ADDR_VAR 0 1
42385: PUSH
42386: LD_INT 34
42388: PUSH
42389: LD_EXP 55
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PPUSH
42398: CALL_OW 69
42402: PUSH
42403: FOR_IN
42404: IFFALSE 42476
// begin if not i in minersList then
42406: LD_VAR 0 1
42410: PUSH
42411: LD_EXP 131
42415: IN
42416: NOT
42417: IFFALSE 42474
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42419: LD_ADDR_EXP 131
42423: PUSH
42424: LD_EXP 131
42428: PPUSH
42429: LD_EXP 131
42433: PUSH
42434: LD_INT 1
42436: PLUS
42437: PPUSH
42438: LD_VAR 0 1
42442: PPUSH
42443: CALL_OW 1
42447: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42448: LD_ADDR_EXP 132
42452: PUSH
42453: LD_EXP 132
42457: PPUSH
42458: LD_EXP 132
42462: PUSH
42463: LD_INT 1
42465: PLUS
42466: PPUSH
42467: EMPTY
42468: PPUSH
42469: CALL_OW 1
42473: ST_TO_ADDR
// end end ;
42474: GO 42403
42476: POP
42477: POP
// for i := minerMinesList downto 1 do
42478: LD_ADDR_VAR 0 1
42482: PUSH
42483: DOUBLE
42484: LD_EXP 132
42488: INC
42489: ST_TO_ADDR
42490: LD_INT 1
42492: PUSH
42493: FOR_DOWNTO
42494: IFFALSE 42830
// begin if IsLive ( minersList [ i ] ) then
42496: LD_EXP 131
42500: PUSH
42501: LD_VAR 0 1
42505: ARRAY
42506: PPUSH
42507: CALL_OW 300
42511: IFFALSE 42539
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42513: LD_EXP 131
42517: PUSH
42518: LD_VAR 0 1
42522: ARRAY
42523: PPUSH
42524: LD_EXP 132
42528: PUSH
42529: LD_VAR 0 1
42533: ARRAY
42534: PPUSH
42535: CALL_OW 505
// if not minerMinesList [ i ] then
42539: LD_EXP 132
42543: PUSH
42544: LD_VAR 0 1
42548: ARRAY
42549: NOT
42550: IFFALSE 42554
// continue ;
42552: GO 42493
// for j := minerMinesList [ i ] downto 1 do
42554: LD_ADDR_VAR 0 2
42558: PUSH
42559: DOUBLE
42560: LD_EXP 132
42564: PUSH
42565: LD_VAR 0 1
42569: ARRAY
42570: INC
42571: ST_TO_ADDR
42572: LD_INT 1
42574: PUSH
42575: FOR_DOWNTO
42576: IFFALSE 42826
// begin side := GetSide ( minersList [ i ] ) ;
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_EXP 131
42587: PUSH
42588: LD_VAR 0 1
42592: ARRAY
42593: PPUSH
42594: CALL_OW 255
42598: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42599: LD_ADDR_VAR 0 4
42603: PUSH
42604: LD_EXP 132
42608: PUSH
42609: LD_VAR 0 1
42613: ARRAY
42614: PUSH
42615: LD_VAR 0 2
42619: ARRAY
42620: PUSH
42621: LD_INT 1
42623: ARRAY
42624: PPUSH
42625: LD_EXP 132
42629: PUSH
42630: LD_VAR 0 1
42634: ARRAY
42635: PUSH
42636: LD_VAR 0 2
42640: ARRAY
42641: PUSH
42642: LD_INT 2
42644: ARRAY
42645: PPUSH
42646: CALL_OW 428
42650: ST_TO_ADDR
// if not tmp then
42651: LD_VAR 0 4
42655: NOT
42656: IFFALSE 42660
// continue ;
42658: GO 42575
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42660: LD_VAR 0 4
42664: PUSH
42665: LD_INT 81
42667: PUSH
42668: LD_VAR 0 3
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 69
42681: IN
42682: PUSH
42683: LD_EXP 132
42687: PUSH
42688: LD_VAR 0 1
42692: ARRAY
42693: PUSH
42694: LD_VAR 0 2
42698: ARRAY
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PPUSH
42704: LD_EXP 132
42708: PUSH
42709: LD_VAR 0 1
42713: ARRAY
42714: PUSH
42715: LD_VAR 0 2
42719: ARRAY
42720: PUSH
42721: LD_INT 2
42723: ARRAY
42724: PPUSH
42725: CALL_OW 458
42729: AND
42730: IFFALSE 42824
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42732: LD_EXP 132
42736: PUSH
42737: LD_VAR 0 1
42741: ARRAY
42742: PUSH
42743: LD_VAR 0 2
42747: ARRAY
42748: PUSH
42749: LD_INT 1
42751: ARRAY
42752: PPUSH
42753: LD_EXP 132
42757: PUSH
42758: LD_VAR 0 1
42762: ARRAY
42763: PUSH
42764: LD_VAR 0 2
42768: ARRAY
42769: PUSH
42770: LD_INT 2
42772: ARRAY
42773: PPUSH
42774: LD_VAR 0 3
42778: PPUSH
42779: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42783: LD_ADDR_EXP 132
42787: PUSH
42788: LD_EXP 132
42792: PPUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: LD_EXP 132
42802: PUSH
42803: LD_VAR 0 1
42807: ARRAY
42808: PPUSH
42809: LD_VAR 0 2
42813: PPUSH
42814: CALL_OW 3
42818: PPUSH
42819: CALL_OW 1
42823: ST_TO_ADDR
// end ; end ;
42824: GO 42575
42826: POP
42827: POP
// end ;
42828: GO 42493
42830: POP
42831: POP
// end ;
42832: PPOPN 4
42834: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42835: LD_INT 0
42837: PPUSH
42838: PPUSH
// result := false ;
42839: LD_ADDR_VAR 0 4
42843: PUSH
42844: LD_INT 0
42846: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42847: LD_VAR 0 1
42851: PPUSH
42852: CALL_OW 264
42856: PUSH
42857: LD_EXP 55
42861: EQUAL
42862: NOT
42863: IFFALSE 42867
// exit ;
42865: GO 43107
// index := GetElementIndex ( minersList , unit ) ;
42867: LD_ADDR_VAR 0 5
42871: PUSH
42872: LD_EXP 131
42876: PPUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL 49091 0 2
42886: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42887: LD_EXP 132
42891: PUSH
42892: LD_VAR 0 5
42896: ARRAY
42897: PUSH
42898: LD_EXP 133
42902: GREATEREQUAL
42903: IFFALSE 42907
// exit ;
42905: GO 43107
// ComMoveXY ( unit , x , y ) ;
42907: LD_VAR 0 1
42911: PPUSH
42912: LD_VAR 0 2
42916: PPUSH
42917: LD_VAR 0 3
42921: PPUSH
42922: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42926: LD_INT 35
42928: PPUSH
42929: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42933: LD_VAR 0 1
42937: PPUSH
42938: LD_VAR 0 2
42942: PPUSH
42943: LD_VAR 0 3
42947: PPUSH
42948: CALL 79863 0 3
42952: NOT
42953: PUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 314
42963: AND
42964: IFFALSE 42968
// exit ;
42966: GO 43107
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42968: LD_VAR 0 2
42972: PPUSH
42973: LD_VAR 0 3
42977: PPUSH
42978: CALL_OW 428
42982: PUSH
42983: LD_VAR 0 1
42987: EQUAL
42988: PUSH
42989: LD_VAR 0 1
42993: PPUSH
42994: CALL_OW 314
42998: NOT
42999: AND
43000: IFFALSE 42926
// PlaySoundXY ( x , y , PlantMine ) ;
43002: LD_VAR 0 2
43006: PPUSH
43007: LD_VAR 0 3
43011: PPUSH
43012: LD_STRING PlantMine
43014: PPUSH
43015: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
43019: LD_VAR 0 2
43023: PPUSH
43024: LD_VAR 0 3
43028: PPUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 255
43038: PPUSH
43039: LD_INT 0
43041: PPUSH
43042: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
43046: LD_ADDR_EXP 132
43050: PUSH
43051: LD_EXP 132
43055: PPUSH
43056: LD_VAR 0 5
43060: PUSH
43061: LD_EXP 132
43065: PUSH
43066: LD_VAR 0 5
43070: ARRAY
43071: PUSH
43072: LD_INT 1
43074: PLUS
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PPUSH
43080: LD_VAR 0 2
43084: PUSH
43085: LD_VAR 0 3
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PPUSH
43094: CALL 49306 0 3
43098: ST_TO_ADDR
// result := true ;
43099: LD_ADDR_VAR 0 4
43103: PUSH
43104: LD_INT 1
43106: ST_TO_ADDR
// end ;
43107: LD_VAR 0 4
43111: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43112: LD_INT 0
43114: PPUSH
43115: PPUSH
43116: PPUSH
// if not unit in minersList then
43117: LD_VAR 0 1
43121: PUSH
43122: LD_EXP 131
43126: IN
43127: NOT
43128: IFFALSE 43132
// exit ;
43130: GO 43524
// index := GetElementIndex ( minersList , unit ) ;
43132: LD_ADDR_VAR 0 6
43136: PUSH
43137: LD_EXP 131
43141: PPUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL 49091 0 2
43151: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43152: LD_ADDR_VAR 0 5
43156: PUSH
43157: DOUBLE
43158: LD_EXP 132
43162: PUSH
43163: LD_VAR 0 6
43167: ARRAY
43168: INC
43169: ST_TO_ADDR
43170: LD_INT 1
43172: PUSH
43173: FOR_DOWNTO
43174: IFFALSE 43335
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43176: LD_EXP 132
43180: PUSH
43181: LD_VAR 0 6
43185: ARRAY
43186: PUSH
43187: LD_VAR 0 5
43191: ARRAY
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: PUSH
43197: LD_VAR 0 2
43201: EQUAL
43202: PUSH
43203: LD_EXP 132
43207: PUSH
43208: LD_VAR 0 6
43212: ARRAY
43213: PUSH
43214: LD_VAR 0 5
43218: ARRAY
43219: PUSH
43220: LD_INT 2
43222: ARRAY
43223: PUSH
43224: LD_VAR 0 3
43228: EQUAL
43229: AND
43230: IFFALSE 43333
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43232: LD_EXP 132
43236: PUSH
43237: LD_VAR 0 6
43241: ARRAY
43242: PUSH
43243: LD_VAR 0 5
43247: ARRAY
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: PPUSH
43253: LD_EXP 132
43257: PUSH
43258: LD_VAR 0 6
43262: ARRAY
43263: PUSH
43264: LD_VAR 0 5
43268: ARRAY
43269: PUSH
43270: LD_INT 2
43272: ARRAY
43273: PPUSH
43274: LD_VAR 0 1
43278: PPUSH
43279: CALL_OW 255
43283: PPUSH
43284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43288: LD_ADDR_EXP 132
43292: PUSH
43293: LD_EXP 132
43297: PPUSH
43298: LD_VAR 0 6
43302: PPUSH
43303: LD_EXP 132
43307: PUSH
43308: LD_VAR 0 6
43312: ARRAY
43313: PPUSH
43314: LD_VAR 0 5
43318: PPUSH
43319: CALL_OW 3
43323: PPUSH
43324: CALL_OW 1
43328: ST_TO_ADDR
// exit ;
43329: POP
43330: POP
43331: GO 43524
// end ; end ;
43333: GO 43173
43335: POP
43336: POP
// for i := minerMinesList [ index ] downto 1 do
43337: LD_ADDR_VAR 0 5
43341: PUSH
43342: DOUBLE
43343: LD_EXP 132
43347: PUSH
43348: LD_VAR 0 6
43352: ARRAY
43353: INC
43354: ST_TO_ADDR
43355: LD_INT 1
43357: PUSH
43358: FOR_DOWNTO
43359: IFFALSE 43522
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43361: LD_EXP 132
43365: PUSH
43366: LD_VAR 0 6
43370: ARRAY
43371: PUSH
43372: LD_VAR 0 5
43376: ARRAY
43377: PUSH
43378: LD_INT 1
43380: ARRAY
43381: PPUSH
43382: LD_EXP 132
43386: PUSH
43387: LD_VAR 0 6
43391: ARRAY
43392: PUSH
43393: LD_VAR 0 5
43397: ARRAY
43398: PUSH
43399: LD_INT 2
43401: ARRAY
43402: PPUSH
43403: LD_VAR 0 2
43407: PPUSH
43408: LD_VAR 0 3
43412: PPUSH
43413: CALL_OW 298
43417: PUSH
43418: LD_INT 6
43420: LESS
43421: IFFALSE 43520
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43423: LD_EXP 132
43427: PUSH
43428: LD_VAR 0 6
43432: ARRAY
43433: PUSH
43434: LD_VAR 0 5
43438: ARRAY
43439: PUSH
43440: LD_INT 1
43442: ARRAY
43443: PPUSH
43444: LD_EXP 132
43448: PUSH
43449: LD_VAR 0 6
43453: ARRAY
43454: PUSH
43455: LD_VAR 0 5
43459: ARRAY
43460: PUSH
43461: LD_INT 2
43463: ARRAY
43464: PPUSH
43465: LD_VAR 0 1
43469: PPUSH
43470: CALL_OW 255
43474: PPUSH
43475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43479: LD_ADDR_EXP 132
43483: PUSH
43484: LD_EXP 132
43488: PPUSH
43489: LD_VAR 0 6
43493: PPUSH
43494: LD_EXP 132
43498: PUSH
43499: LD_VAR 0 6
43503: ARRAY
43504: PPUSH
43505: LD_VAR 0 5
43509: PPUSH
43510: CALL_OW 3
43514: PPUSH
43515: CALL_OW 1
43519: ST_TO_ADDR
// end ; end ;
43520: GO 43358
43522: POP
43523: POP
// end ;
43524: LD_VAR 0 4
43528: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43529: LD_INT 0
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 264
43549: PUSH
43550: LD_EXP 55
43554: EQUAL
43555: NOT
43556: PUSH
43557: LD_VAR 0 1
43561: PUSH
43562: LD_EXP 131
43566: IN
43567: NOT
43568: OR
43569: IFFALSE 43573
// exit ;
43571: GO 43895
// index := GetElementIndex ( minersList , unit ) ;
43573: LD_ADDR_VAR 0 6
43577: PUSH
43578: LD_EXP 131
43582: PPUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: CALL 49091 0 2
43592: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43593: LD_ADDR_VAR 0 8
43597: PUSH
43598: LD_EXP 133
43602: PUSH
43603: LD_EXP 132
43607: PUSH
43608: LD_VAR 0 6
43612: ARRAY
43613: MINUS
43614: ST_TO_ADDR
// if not minesFreeAmount then
43615: LD_VAR 0 8
43619: NOT
43620: IFFALSE 43624
// exit ;
43622: GO 43895
// tmp := [ ] ;
43624: LD_ADDR_VAR 0 7
43628: PUSH
43629: EMPTY
43630: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43631: LD_ADDR_VAR 0 5
43635: PUSH
43636: DOUBLE
43637: LD_INT 1
43639: DEC
43640: ST_TO_ADDR
43641: LD_VAR 0 8
43645: PUSH
43646: FOR_TO
43647: IFFALSE 43842
// begin _d := rand ( 0 , 5 ) ;
43649: LD_ADDR_VAR 0 11
43653: PUSH
43654: LD_INT 0
43656: PPUSH
43657: LD_INT 5
43659: PPUSH
43660: CALL_OW 12
43664: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43665: LD_ADDR_VAR 0 12
43669: PUSH
43670: LD_INT 2
43672: PPUSH
43673: LD_INT 6
43675: PPUSH
43676: CALL_OW 12
43680: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43681: LD_ADDR_VAR 0 9
43685: PUSH
43686: LD_VAR 0 2
43690: PPUSH
43691: LD_VAR 0 11
43695: PPUSH
43696: LD_VAR 0 12
43700: PPUSH
43701: CALL_OW 272
43705: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43706: LD_ADDR_VAR 0 10
43710: PUSH
43711: LD_VAR 0 3
43715: PPUSH
43716: LD_VAR 0 11
43720: PPUSH
43721: LD_VAR 0 12
43725: PPUSH
43726: CALL_OW 273
43730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43731: LD_VAR 0 9
43735: PPUSH
43736: LD_VAR 0 10
43740: PPUSH
43741: CALL_OW 488
43745: PUSH
43746: LD_VAR 0 9
43750: PUSH
43751: LD_VAR 0 10
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_VAR 0 7
43764: IN
43765: NOT
43766: AND
43767: PUSH
43768: LD_VAR 0 9
43772: PPUSH
43773: LD_VAR 0 10
43777: PPUSH
43778: CALL_OW 458
43782: NOT
43783: AND
43784: IFFALSE 43826
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43786: LD_ADDR_VAR 0 7
43790: PUSH
43791: LD_VAR 0 7
43795: PPUSH
43796: LD_VAR 0 7
43800: PUSH
43801: LD_INT 1
43803: PLUS
43804: PPUSH
43805: LD_VAR 0 9
43809: PUSH
43810: LD_VAR 0 10
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PPUSH
43819: CALL_OW 1
43823: ST_TO_ADDR
43824: GO 43840
// i := i - 1 ;
43826: LD_ADDR_VAR 0 5
43830: PUSH
43831: LD_VAR 0 5
43835: PUSH
43836: LD_INT 1
43838: MINUS
43839: ST_TO_ADDR
// end ;
43840: GO 43646
43842: POP
43843: POP
// for i in tmp do
43844: LD_ADDR_VAR 0 5
43848: PUSH
43849: LD_VAR 0 7
43853: PUSH
43854: FOR_IN
43855: IFFALSE 43893
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43857: LD_VAR 0 1
43861: PPUSH
43862: LD_VAR 0 5
43866: PUSH
43867: LD_INT 1
43869: ARRAY
43870: PPUSH
43871: LD_VAR 0 5
43875: PUSH
43876: LD_INT 2
43878: ARRAY
43879: PPUSH
43880: CALL 42835 0 3
43884: NOT
43885: IFFALSE 43891
// exit ;
43887: POP
43888: POP
43889: GO 43895
43891: GO 43854
43893: POP
43894: POP
// end ;
43895: LD_VAR 0 4
43899: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
// if not GetClass ( unit ) = class_sniper then
43909: LD_VAR 0 1
43913: PPUSH
43914: CALL_OW 257
43918: PUSH
43919: LD_INT 5
43921: EQUAL
43922: NOT
43923: IFFALSE 43927
// exit ;
43925: GO 44315
// dist := 8 ;
43927: LD_ADDR_VAR 0 5
43931: PUSH
43932: LD_INT 8
43934: ST_TO_ADDR
// viewRange := 12 ;
43935: LD_ADDR_VAR 0 7
43939: PUSH
43940: LD_INT 12
43942: ST_TO_ADDR
// side := GetSide ( unit ) ;
43943: LD_ADDR_VAR 0 6
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: CALL_OW 255
43957: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43958: LD_INT 61
43960: PPUSH
43961: LD_VAR 0 6
43965: PPUSH
43966: CALL_OW 321
43970: PUSH
43971: LD_INT 2
43973: EQUAL
43974: IFFALSE 43984
// viewRange := 16 ;
43976: LD_ADDR_VAR 0 7
43980: PUSH
43981: LD_INT 16
43983: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43984: LD_VAR 0 1
43988: PPUSH
43989: LD_VAR 0 2
43993: PPUSH
43994: LD_VAR 0 3
43998: PPUSH
43999: CALL_OW 297
44003: PUSH
44004: LD_VAR 0 5
44008: GREATER
44009: IFFALSE 44088
// begin ComMoveXY ( unit , x , y ) ;
44011: LD_VAR 0 1
44015: PPUSH
44016: LD_VAR 0 2
44020: PPUSH
44021: LD_VAR 0 3
44025: PPUSH
44026: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44030: LD_INT 35
44032: PPUSH
44033: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
44037: LD_VAR 0 1
44041: PPUSH
44042: LD_VAR 0 2
44046: PPUSH
44047: LD_VAR 0 3
44051: PPUSH
44052: CALL 79863 0 3
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44315
// until GetDistUnitXY ( unit , x , y ) < dist ;
44061: LD_VAR 0 1
44065: PPUSH
44066: LD_VAR 0 2
44070: PPUSH
44071: LD_VAR 0 3
44075: PPUSH
44076: CALL_OW 297
44080: PUSH
44081: LD_VAR 0 5
44085: LESS
44086: IFFALSE 44030
// end ; ComTurnXY ( unit , x , y ) ;
44088: LD_VAR 0 1
44092: PPUSH
44093: LD_VAR 0 2
44097: PPUSH
44098: LD_VAR 0 3
44102: PPUSH
44103: CALL_OW 118
// wait ( 5 ) ;
44107: LD_INT 5
44109: PPUSH
44110: CALL_OW 67
// _d := GetDir ( unit ) ;
44114: LD_ADDR_VAR 0 10
44118: PUSH
44119: LD_VAR 0 1
44123: PPUSH
44124: CALL_OW 254
44128: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44129: LD_ADDR_VAR 0 8
44133: PUSH
44134: LD_VAR 0 1
44138: PPUSH
44139: CALL_OW 250
44143: PPUSH
44144: LD_VAR 0 10
44148: PPUSH
44149: LD_VAR 0 5
44153: PPUSH
44154: CALL_OW 272
44158: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44159: LD_ADDR_VAR 0 9
44163: PUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 251
44173: PPUSH
44174: LD_VAR 0 10
44178: PPUSH
44179: LD_VAR 0 5
44183: PPUSH
44184: CALL_OW 273
44188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44189: LD_VAR 0 8
44193: PPUSH
44194: LD_VAR 0 9
44198: PPUSH
44199: CALL_OW 488
44203: NOT
44204: IFFALSE 44208
// exit ;
44206: GO 44315
// ComAnimCustom ( unit , 1 ) ;
44208: LD_VAR 0 1
44212: PPUSH
44213: LD_INT 1
44215: PPUSH
44216: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44220: LD_VAR 0 8
44224: PPUSH
44225: LD_VAR 0 9
44229: PPUSH
44230: LD_VAR 0 6
44234: PPUSH
44235: LD_VAR 0 7
44239: PPUSH
44240: CALL_OW 330
// repeat wait ( 1 ) ;
44244: LD_INT 1
44246: PPUSH
44247: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 316
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 314
44270: OR
44271: PUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 302
44281: NOT
44282: OR
44283: PUSH
44284: LD_VAR 0 1
44288: PPUSH
44289: CALL_OW 301
44293: OR
44294: IFFALSE 44244
// RemoveSeeing ( _x , _y , side ) ;
44296: LD_VAR 0 8
44300: PPUSH
44301: LD_VAR 0 9
44305: PPUSH
44306: LD_VAR 0 6
44310: PPUSH
44311: CALL_OW 331
// end ; end_of_file
44315: LD_VAR 0 4
44319: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44320: LD_INT 0
44322: PPUSH
44323: PPUSH
// if exist_mode then
44324: LD_VAR 0 2
44328: IFFALSE 44353
// unit := CreateCharacter ( prefix & ident ) else
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: LD_VAR 0 3
44339: PUSH
44340: LD_VAR 0 1
44344: STR
44345: PPUSH
44346: CALL_OW 34
44350: ST_TO_ADDR
44351: GO 44368
// unit := NewCharacter ( ident ) ;
44353: LD_ADDR_VAR 0 5
44357: PUSH
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 25
44367: ST_TO_ADDR
// result := unit ;
44368: LD_ADDR_VAR 0 4
44372: PUSH
44373: LD_VAR 0 5
44377: ST_TO_ADDR
// end ;
44378: LD_VAR 0 4
44382: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44383: LD_INT 0
44385: PPUSH
44386: PPUSH
// if not side or not nation then
44387: LD_VAR 0 1
44391: NOT
44392: PUSH
44393: LD_VAR 0 2
44397: NOT
44398: OR
44399: IFFALSE 44403
// exit ;
44401: GO 45171
// case nation of nation_american :
44403: LD_VAR 0 2
44407: PUSH
44408: LD_INT 1
44410: DOUBLE
44411: EQUAL
44412: IFTRUE 44416
44414: GO 44630
44416: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44417: LD_ADDR_VAR 0 4
44421: PUSH
44422: LD_INT 35
44424: PUSH
44425: LD_INT 45
44427: PUSH
44428: LD_INT 46
44430: PUSH
44431: LD_INT 47
44433: PUSH
44434: LD_INT 82
44436: PUSH
44437: LD_INT 83
44439: PUSH
44440: LD_INT 84
44442: PUSH
44443: LD_INT 85
44445: PUSH
44446: LD_INT 86
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 6
44457: PUSH
44458: LD_INT 15
44460: PUSH
44461: LD_INT 16
44463: PUSH
44464: LD_INT 7
44466: PUSH
44467: LD_INT 12
44469: PUSH
44470: LD_INT 13
44472: PUSH
44473: LD_INT 10
44475: PUSH
44476: LD_INT 14
44478: PUSH
44479: LD_INT 20
44481: PUSH
44482: LD_INT 21
44484: PUSH
44485: LD_INT 22
44487: PUSH
44488: LD_INT 25
44490: PUSH
44491: LD_INT 32
44493: PUSH
44494: LD_INT 27
44496: PUSH
44497: LD_INT 36
44499: PUSH
44500: LD_INT 69
44502: PUSH
44503: LD_INT 39
44505: PUSH
44506: LD_INT 34
44508: PUSH
44509: LD_INT 40
44511: PUSH
44512: LD_INT 48
44514: PUSH
44515: LD_INT 49
44517: PUSH
44518: LD_INT 50
44520: PUSH
44521: LD_INT 51
44523: PUSH
44524: LD_INT 52
44526: PUSH
44527: LD_INT 53
44529: PUSH
44530: LD_INT 54
44532: PUSH
44533: LD_INT 55
44535: PUSH
44536: LD_INT 56
44538: PUSH
44539: LD_INT 57
44541: PUSH
44542: LD_INT 58
44544: PUSH
44545: LD_INT 59
44547: PUSH
44548: LD_INT 60
44550: PUSH
44551: LD_INT 61
44553: PUSH
44554: LD_INT 62
44556: PUSH
44557: LD_INT 80
44559: PUSH
44560: LD_INT 82
44562: PUSH
44563: LD_INT 83
44565: PUSH
44566: LD_INT 84
44568: PUSH
44569: LD_INT 85
44571: PUSH
44572: LD_INT 86
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
44628: GO 45095
44630: LD_INT 2
44632: DOUBLE
44633: EQUAL
44634: IFTRUE 44638
44636: GO 44864
44638: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44639: LD_ADDR_VAR 0 4
44643: PUSH
44644: LD_INT 35
44646: PUSH
44647: LD_INT 45
44649: PUSH
44650: LD_INT 46
44652: PUSH
44653: LD_INT 47
44655: PUSH
44656: LD_INT 82
44658: PUSH
44659: LD_INT 83
44661: PUSH
44662: LD_INT 84
44664: PUSH
44665: LD_INT 85
44667: PUSH
44668: LD_INT 87
44670: PUSH
44671: LD_INT 70
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 11
44679: PUSH
44680: LD_INT 3
44682: PUSH
44683: LD_INT 4
44685: PUSH
44686: LD_INT 5
44688: PUSH
44689: LD_INT 6
44691: PUSH
44692: LD_INT 15
44694: PUSH
44695: LD_INT 18
44697: PUSH
44698: LD_INT 7
44700: PUSH
44701: LD_INT 17
44703: PUSH
44704: LD_INT 8
44706: PUSH
44707: LD_INT 20
44709: PUSH
44710: LD_INT 21
44712: PUSH
44713: LD_INT 22
44715: PUSH
44716: LD_INT 72
44718: PUSH
44719: LD_INT 26
44721: PUSH
44722: LD_INT 69
44724: PUSH
44725: LD_INT 39
44727: PUSH
44728: LD_INT 40
44730: PUSH
44731: LD_INT 41
44733: PUSH
44734: LD_INT 42
44736: PUSH
44737: LD_INT 43
44739: PUSH
44740: LD_INT 48
44742: PUSH
44743: LD_INT 49
44745: PUSH
44746: LD_INT 50
44748: PUSH
44749: LD_INT 51
44751: PUSH
44752: LD_INT 52
44754: PUSH
44755: LD_INT 53
44757: PUSH
44758: LD_INT 54
44760: PUSH
44761: LD_INT 55
44763: PUSH
44764: LD_INT 56
44766: PUSH
44767: LD_INT 60
44769: PUSH
44770: LD_INT 61
44772: PUSH
44773: LD_INT 62
44775: PUSH
44776: LD_INT 66
44778: PUSH
44779: LD_INT 67
44781: PUSH
44782: LD_INT 68
44784: PUSH
44785: LD_INT 81
44787: PUSH
44788: LD_INT 82
44790: PUSH
44791: LD_INT 83
44793: PUSH
44794: LD_INT 84
44796: PUSH
44797: LD_INT 85
44799: PUSH
44800: LD_INT 87
44802: PUSH
44803: LD_INT 88
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
44862: GO 45095
44864: LD_INT 3
44866: DOUBLE
44867: EQUAL
44868: IFTRUE 44872
44870: GO 45094
44872: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44873: LD_ADDR_VAR 0 4
44877: PUSH
44878: LD_INT 46
44880: PUSH
44881: LD_INT 47
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 82
44892: PUSH
44893: LD_INT 83
44895: PUSH
44896: LD_INT 84
44898: PUSH
44899: LD_INT 85
44901: PUSH
44902: LD_INT 86
44904: PUSH
44905: LD_INT 11
44907: PUSH
44908: LD_INT 9
44910: PUSH
44911: LD_INT 20
44913: PUSH
44914: LD_INT 19
44916: PUSH
44917: LD_INT 21
44919: PUSH
44920: LD_INT 24
44922: PUSH
44923: LD_INT 22
44925: PUSH
44926: LD_INT 25
44928: PUSH
44929: LD_INT 28
44931: PUSH
44932: LD_INT 29
44934: PUSH
44935: LD_INT 30
44937: PUSH
44938: LD_INT 31
44940: PUSH
44941: LD_INT 37
44943: PUSH
44944: LD_INT 38
44946: PUSH
44947: LD_INT 32
44949: PUSH
44950: LD_INT 27
44952: PUSH
44953: LD_INT 33
44955: PUSH
44956: LD_INT 69
44958: PUSH
44959: LD_INT 39
44961: PUSH
44962: LD_INT 34
44964: PUSH
44965: LD_INT 40
44967: PUSH
44968: LD_INT 71
44970: PUSH
44971: LD_INT 23
44973: PUSH
44974: LD_INT 44
44976: PUSH
44977: LD_INT 48
44979: PUSH
44980: LD_INT 49
44982: PUSH
44983: LD_INT 50
44985: PUSH
44986: LD_INT 51
44988: PUSH
44989: LD_INT 52
44991: PUSH
44992: LD_INT 53
44994: PUSH
44995: LD_INT 54
44997: PUSH
44998: LD_INT 55
45000: PUSH
45001: LD_INT 56
45003: PUSH
45004: LD_INT 57
45006: PUSH
45007: LD_INT 58
45009: PUSH
45010: LD_INT 59
45012: PUSH
45013: LD_INT 63
45015: PUSH
45016: LD_INT 64
45018: PUSH
45019: LD_INT 65
45021: PUSH
45022: LD_INT 82
45024: PUSH
45025: LD_INT 83
45027: PUSH
45028: LD_INT 84
45030: PUSH
45031: LD_INT 85
45033: PUSH
45034: LD_INT 86
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
45092: GO 45095
45094: POP
// if state > - 1 and state < 3 then
45095: LD_VAR 0 3
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: GREATER
45104: PUSH
45105: LD_VAR 0 3
45109: PUSH
45110: LD_INT 3
45112: LESS
45113: AND
45114: IFFALSE 45171
// for i in result do
45116: LD_ADDR_VAR 0 5
45120: PUSH
45121: LD_VAR 0 4
45125: PUSH
45126: FOR_IN
45127: IFFALSE 45169
// if GetTech ( i , side ) <> state then
45129: LD_VAR 0 5
45133: PPUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 321
45143: PUSH
45144: LD_VAR 0 3
45148: NONEQUAL
45149: IFFALSE 45167
// result := result diff i ;
45151: LD_ADDR_VAR 0 4
45155: PUSH
45156: LD_VAR 0 4
45160: PUSH
45161: LD_VAR 0 5
45165: DIFF
45166: ST_TO_ADDR
45167: GO 45126
45169: POP
45170: POP
// end ;
45171: LD_VAR 0 4
45175: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45176: LD_INT 0
45178: PPUSH
45179: PPUSH
45180: PPUSH
// result := true ;
45181: LD_ADDR_VAR 0 3
45185: PUSH
45186: LD_INT 1
45188: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45189: LD_ADDR_VAR 0 5
45193: PUSH
45194: LD_VAR 0 2
45198: PPUSH
45199: CALL_OW 480
45203: ST_TO_ADDR
// if not tmp then
45204: LD_VAR 0 5
45208: NOT
45209: IFFALSE 45213
// exit ;
45211: GO 45262
// for i in tmp do
45213: LD_ADDR_VAR 0 4
45217: PUSH
45218: LD_VAR 0 5
45222: PUSH
45223: FOR_IN
45224: IFFALSE 45260
// if GetTech ( i , side ) <> state_researched then
45226: LD_VAR 0 4
45230: PPUSH
45231: LD_VAR 0 1
45235: PPUSH
45236: CALL_OW 321
45240: PUSH
45241: LD_INT 2
45243: NONEQUAL
45244: IFFALSE 45258
// begin result := false ;
45246: LD_ADDR_VAR 0 3
45250: PUSH
45251: LD_INT 0
45253: ST_TO_ADDR
// exit ;
45254: POP
45255: POP
45256: GO 45262
// end ;
45258: GO 45223
45260: POP
45261: POP
// end ;
45262: LD_VAR 0 3
45266: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45267: LD_INT 0
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
45280: PPUSH
45281: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45282: LD_VAR 0 1
45286: NOT
45287: PUSH
45288: LD_VAR 0 1
45292: PPUSH
45293: CALL_OW 257
45297: PUSH
45298: LD_INT 9
45300: NONEQUAL
45301: OR
45302: IFFALSE 45306
// exit ;
45304: GO 45879
// side := GetSide ( unit ) ;
45306: LD_ADDR_VAR 0 9
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: CALL_OW 255
45320: ST_TO_ADDR
// tech_space := tech_spacanom ;
45321: LD_ADDR_VAR 0 12
45325: PUSH
45326: LD_INT 29
45328: ST_TO_ADDR
// tech_time := tech_taurad ;
45329: LD_ADDR_VAR 0 13
45333: PUSH
45334: LD_INT 28
45336: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45337: LD_ADDR_VAR 0 11
45341: PUSH
45342: LD_VAR 0 1
45346: PPUSH
45347: CALL_OW 310
45351: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45352: LD_VAR 0 11
45356: PPUSH
45357: CALL_OW 247
45361: PUSH
45362: LD_INT 2
45364: EQUAL
45365: IFFALSE 45369
// exit ;
45367: GO 45879
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45369: LD_ADDR_VAR 0 8
45373: PUSH
45374: LD_INT 81
45376: PUSH
45377: LD_VAR 0 9
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 3
45388: PUSH
45389: LD_INT 21
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PPUSH
45407: CALL_OW 69
45411: ST_TO_ADDR
// if not tmp then
45412: LD_VAR 0 8
45416: NOT
45417: IFFALSE 45421
// exit ;
45419: GO 45879
// if in_unit then
45421: LD_VAR 0 11
45425: IFFALSE 45449
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45427: LD_ADDR_VAR 0 10
45431: PUSH
45432: LD_VAR 0 8
45436: PPUSH
45437: LD_VAR 0 11
45441: PPUSH
45442: CALL_OW 74
45446: ST_TO_ADDR
45447: GO 45469
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45449: LD_ADDR_VAR 0 10
45453: PUSH
45454: LD_VAR 0 8
45458: PPUSH
45459: LD_VAR 0 1
45463: PPUSH
45464: CALL_OW 74
45468: ST_TO_ADDR
// if not enemy then
45469: LD_VAR 0 10
45473: NOT
45474: IFFALSE 45478
// exit ;
45476: GO 45879
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45478: LD_VAR 0 11
45482: PUSH
45483: LD_VAR 0 11
45487: PPUSH
45488: LD_VAR 0 10
45492: PPUSH
45493: CALL_OW 296
45497: PUSH
45498: LD_INT 13
45500: GREATER
45501: AND
45502: PUSH
45503: LD_VAR 0 1
45507: PPUSH
45508: LD_VAR 0 10
45512: PPUSH
45513: CALL_OW 296
45517: PUSH
45518: LD_INT 12
45520: GREATER
45521: OR
45522: IFFALSE 45526
// exit ;
45524: GO 45879
// missile := [ 1 ] ;
45526: LD_ADDR_VAR 0 14
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45537: LD_VAR 0 9
45541: PPUSH
45542: LD_VAR 0 12
45546: PPUSH
45547: CALL_OW 325
45551: IFFALSE 45580
// missile := Insert ( missile , missile + 1 , 2 ) ;
45553: LD_ADDR_VAR 0 14
45557: PUSH
45558: LD_VAR 0 14
45562: PPUSH
45563: LD_VAR 0 14
45567: PUSH
45568: LD_INT 1
45570: PLUS
45571: PPUSH
45572: LD_INT 2
45574: PPUSH
45575: CALL_OW 2
45579: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45580: LD_VAR 0 9
45584: PPUSH
45585: LD_VAR 0 13
45589: PPUSH
45590: CALL_OW 325
45594: PUSH
45595: LD_VAR 0 10
45599: PPUSH
45600: CALL_OW 255
45604: PPUSH
45605: LD_VAR 0 13
45609: PPUSH
45610: CALL_OW 325
45614: NOT
45615: AND
45616: IFFALSE 45645
// missile := Insert ( missile , missile + 1 , 3 ) ;
45618: LD_ADDR_VAR 0 14
45622: PUSH
45623: LD_VAR 0 14
45627: PPUSH
45628: LD_VAR 0 14
45632: PUSH
45633: LD_INT 1
45635: PLUS
45636: PPUSH
45637: LD_INT 3
45639: PPUSH
45640: CALL_OW 2
45644: ST_TO_ADDR
// if missile < 2 then
45645: LD_VAR 0 14
45649: PUSH
45650: LD_INT 2
45652: LESS
45653: IFFALSE 45657
// exit ;
45655: GO 45879
// x := GetX ( enemy ) ;
45657: LD_ADDR_VAR 0 4
45661: PUSH
45662: LD_VAR 0 10
45666: PPUSH
45667: CALL_OW 250
45671: ST_TO_ADDR
// y := GetY ( enemy ) ;
45672: LD_ADDR_VAR 0 5
45676: PUSH
45677: LD_VAR 0 10
45681: PPUSH
45682: CALL_OW 251
45686: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45687: LD_ADDR_VAR 0 6
45691: PUSH
45692: LD_VAR 0 4
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PPUSH
45701: LD_INT 1
45703: PPUSH
45704: CALL_OW 12
45708: PLUS
45709: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45710: LD_ADDR_VAR 0 7
45714: PUSH
45715: LD_VAR 0 5
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PPUSH
45724: LD_INT 1
45726: PPUSH
45727: CALL_OW 12
45731: PLUS
45732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45733: LD_VAR 0 6
45737: PPUSH
45738: LD_VAR 0 7
45742: PPUSH
45743: CALL_OW 488
45747: NOT
45748: IFFALSE 45770
// begin _x := x ;
45750: LD_ADDR_VAR 0 6
45754: PUSH
45755: LD_VAR 0 4
45759: ST_TO_ADDR
// _y := y ;
45760: LD_ADDR_VAR 0 7
45764: PUSH
45765: LD_VAR 0 5
45769: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45770: LD_ADDR_VAR 0 3
45774: PUSH
45775: LD_INT 1
45777: PPUSH
45778: LD_VAR 0 14
45782: PPUSH
45783: CALL_OW 12
45787: ST_TO_ADDR
// case i of 1 :
45788: LD_VAR 0 3
45792: PUSH
45793: LD_INT 1
45795: DOUBLE
45796: EQUAL
45797: IFTRUE 45801
45799: GO 45818
45801: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45802: LD_VAR 0 1
45806: PPUSH
45807: LD_VAR 0 10
45811: PPUSH
45812: CALL_OW 115
45816: GO 45879
45818: LD_INT 2
45820: DOUBLE
45821: EQUAL
45822: IFTRUE 45826
45824: GO 45848
45826: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_VAR 0 6
45836: PPUSH
45837: LD_VAR 0 7
45841: PPUSH
45842: CALL_OW 153
45846: GO 45879
45848: LD_INT 3
45850: DOUBLE
45851: EQUAL
45852: IFTRUE 45856
45854: GO 45878
45856: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45857: LD_VAR 0 1
45861: PPUSH
45862: LD_VAR 0 6
45866: PPUSH
45867: LD_VAR 0 7
45871: PPUSH
45872: CALL_OW 154
45876: GO 45879
45878: POP
// end ;
45879: LD_VAR 0 2
45883: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45884: LD_INT 0
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
// if not unit or not building then
45892: LD_VAR 0 1
45896: NOT
45897: PUSH
45898: LD_VAR 0 2
45902: NOT
45903: OR
45904: IFFALSE 45908
// exit ;
45906: GO 46066
// x := GetX ( building ) ;
45908: LD_ADDR_VAR 0 5
45912: PUSH
45913: LD_VAR 0 2
45917: PPUSH
45918: CALL_OW 250
45922: ST_TO_ADDR
// y := GetY ( building ) ;
45923: LD_ADDR_VAR 0 6
45927: PUSH
45928: LD_VAR 0 2
45932: PPUSH
45933: CALL_OW 251
45937: ST_TO_ADDR
// for i = 0 to 5 do
45938: LD_ADDR_VAR 0 4
45942: PUSH
45943: DOUBLE
45944: LD_INT 0
45946: DEC
45947: ST_TO_ADDR
45948: LD_INT 5
45950: PUSH
45951: FOR_TO
45952: IFFALSE 46064
// begin _x := ShiftX ( x , i , 3 ) ;
45954: LD_ADDR_VAR 0 7
45958: PUSH
45959: LD_VAR 0 5
45963: PPUSH
45964: LD_VAR 0 4
45968: PPUSH
45969: LD_INT 3
45971: PPUSH
45972: CALL_OW 272
45976: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45977: LD_ADDR_VAR 0 8
45981: PUSH
45982: LD_VAR 0 6
45986: PPUSH
45987: LD_VAR 0 4
45991: PPUSH
45992: LD_INT 3
45994: PPUSH
45995: CALL_OW 273
45999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46000: LD_VAR 0 7
46004: PPUSH
46005: LD_VAR 0 8
46009: PPUSH
46010: CALL_OW 488
46014: NOT
46015: IFFALSE 46019
// continue ;
46017: GO 45951
// if HexInfo ( _x , _y ) = 0 then
46019: LD_VAR 0 7
46023: PPUSH
46024: LD_VAR 0 8
46028: PPUSH
46029: CALL_OW 428
46033: PUSH
46034: LD_INT 0
46036: EQUAL
46037: IFFALSE 46062
// begin ComMoveXY ( unit , _x , _y ) ;
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_VAR 0 7
46048: PPUSH
46049: LD_VAR 0 8
46053: PPUSH
46054: CALL_OW 111
// exit ;
46058: POP
46059: POP
46060: GO 46066
// end ; end ;
46062: GO 45951
46064: POP
46065: POP
// end ;
46066: LD_VAR 0 3
46070: RET
// export function ScanBase ( side , base_area ) ; begin
46071: LD_INT 0
46073: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46074: LD_ADDR_VAR 0 3
46078: PUSH
46079: LD_VAR 0 2
46083: PPUSH
46084: LD_INT 81
46086: PUSH
46087: LD_VAR 0 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 70
46100: ST_TO_ADDR
// end ;
46101: LD_VAR 0 3
46105: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46106: LD_INT 0
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
// result := false ;
46112: LD_ADDR_VAR 0 2
46116: PUSH
46117: LD_INT 0
46119: ST_TO_ADDR
// side := GetSide ( unit ) ;
46120: LD_ADDR_VAR 0 3
46124: PUSH
46125: LD_VAR 0 1
46129: PPUSH
46130: CALL_OW 255
46134: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46135: LD_ADDR_VAR 0 4
46139: PUSH
46140: LD_VAR 0 1
46144: PPUSH
46145: CALL_OW 248
46149: ST_TO_ADDR
// case nat of 1 :
46150: LD_VAR 0 4
46154: PUSH
46155: LD_INT 1
46157: DOUBLE
46158: EQUAL
46159: IFTRUE 46163
46161: GO 46174
46163: POP
// tech := tech_lassight ; 2 :
46164: LD_ADDR_VAR 0 5
46168: PUSH
46169: LD_INT 12
46171: ST_TO_ADDR
46172: GO 46213
46174: LD_INT 2
46176: DOUBLE
46177: EQUAL
46178: IFTRUE 46182
46180: GO 46193
46182: POP
// tech := tech_mortar ; 3 :
46183: LD_ADDR_VAR 0 5
46187: PUSH
46188: LD_INT 41
46190: ST_TO_ADDR
46191: GO 46213
46193: LD_INT 3
46195: DOUBLE
46196: EQUAL
46197: IFTRUE 46201
46199: GO 46212
46201: POP
// tech := tech_bazooka ; end ;
46202: LD_ADDR_VAR 0 5
46206: PUSH
46207: LD_INT 44
46209: ST_TO_ADDR
46210: GO 46213
46212: POP
// if Researched ( side , tech ) then
46213: LD_VAR 0 3
46217: PPUSH
46218: LD_VAR 0 5
46222: PPUSH
46223: CALL_OW 325
46227: IFFALSE 46254
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46229: LD_ADDR_VAR 0 2
46233: PUSH
46234: LD_INT 5
46236: PUSH
46237: LD_INT 8
46239: PUSH
46240: LD_INT 9
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: PUSH
46248: LD_VAR 0 4
46252: ARRAY
46253: ST_TO_ADDR
// end ;
46254: LD_VAR 0 2
46258: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46259: LD_INT 0
46261: PPUSH
46262: PPUSH
46263: PPUSH
// if not mines then
46264: LD_VAR 0 2
46268: NOT
46269: IFFALSE 46273
// exit ;
46271: GO 46417
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46273: LD_ADDR_VAR 0 5
46277: PUSH
46278: LD_INT 81
46280: PUSH
46281: LD_VAR 0 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 21
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PPUSH
46311: CALL_OW 69
46315: ST_TO_ADDR
// for i in mines do
46316: LD_ADDR_VAR 0 4
46320: PUSH
46321: LD_VAR 0 2
46325: PUSH
46326: FOR_IN
46327: IFFALSE 46415
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46329: LD_VAR 0 4
46333: PUSH
46334: LD_INT 1
46336: ARRAY
46337: PPUSH
46338: LD_VAR 0 4
46342: PUSH
46343: LD_INT 2
46345: ARRAY
46346: PPUSH
46347: CALL_OW 458
46351: NOT
46352: IFFALSE 46356
// continue ;
46354: GO 46326
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46356: LD_VAR 0 4
46360: PUSH
46361: LD_INT 1
46363: ARRAY
46364: PPUSH
46365: LD_VAR 0 4
46369: PUSH
46370: LD_INT 2
46372: ARRAY
46373: PPUSH
46374: CALL_OW 428
46378: PUSH
46379: LD_VAR 0 5
46383: IN
46384: IFFALSE 46413
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46386: LD_VAR 0 4
46390: PUSH
46391: LD_INT 1
46393: ARRAY
46394: PPUSH
46395: LD_VAR 0 4
46399: PUSH
46400: LD_INT 2
46402: ARRAY
46403: PPUSH
46404: LD_VAR 0 1
46408: PPUSH
46409: CALL_OW 456
// end ;
46413: GO 46326
46415: POP
46416: POP
// end ;
46417: LD_VAR 0 3
46421: RET
// export function Count ( array ) ; var i ; begin
46422: LD_INT 0
46424: PPUSH
46425: PPUSH
// result := 0 ;
46426: LD_ADDR_VAR 0 2
46430: PUSH
46431: LD_INT 0
46433: ST_TO_ADDR
// for i in array do
46434: LD_ADDR_VAR 0 3
46438: PUSH
46439: LD_VAR 0 1
46443: PUSH
46444: FOR_IN
46445: IFFALSE 46469
// if i then
46447: LD_VAR 0 3
46451: IFFALSE 46467
// result := result + 1 ;
46453: LD_ADDR_VAR 0 2
46457: PUSH
46458: LD_VAR 0 2
46462: PUSH
46463: LD_INT 1
46465: PLUS
46466: ST_TO_ADDR
46467: GO 46444
46469: POP
46470: POP
// end ;
46471: LD_VAR 0 2
46475: RET
// export function IsEmpty ( building ) ; begin
46476: LD_INT 0
46478: PPUSH
// if not building then
46479: LD_VAR 0 1
46483: NOT
46484: IFFALSE 46488
// exit ;
46486: GO 46531
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46488: LD_ADDR_VAR 0 2
46492: PUSH
46493: LD_VAR 0 1
46497: PUSH
46498: LD_INT 22
46500: PUSH
46501: LD_VAR 0 1
46505: PPUSH
46506: CALL_OW 255
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 58
46517: PUSH
46518: EMPTY
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PPUSH
46525: CALL_OW 69
46529: IN
46530: ST_TO_ADDR
// end ;
46531: LD_VAR 0 2
46535: RET
// export function IsNotFull ( building ) ; begin
46536: LD_INT 0
46538: PPUSH
// if not building then
46539: LD_VAR 0 1
46543: NOT
46544: IFFALSE 46548
// exit ;
46546: GO 46567
// result := UnitsInside ( building ) < 6 ;
46548: LD_ADDR_VAR 0 2
46552: PUSH
46553: LD_VAR 0 1
46557: PPUSH
46558: CALL_OW 313
46562: PUSH
46563: LD_INT 6
46565: LESS
46566: ST_TO_ADDR
// end ;
46567: LD_VAR 0 2
46571: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46572: LD_INT 0
46574: PPUSH
46575: PPUSH
46576: PPUSH
46577: PPUSH
// tmp := [ ] ;
46578: LD_ADDR_VAR 0 3
46582: PUSH
46583: EMPTY
46584: ST_TO_ADDR
// list := [ ] ;
46585: LD_ADDR_VAR 0 5
46589: PUSH
46590: EMPTY
46591: ST_TO_ADDR
// for i = 16 to 25 do
46592: LD_ADDR_VAR 0 4
46596: PUSH
46597: DOUBLE
46598: LD_INT 16
46600: DEC
46601: ST_TO_ADDR
46602: LD_INT 25
46604: PUSH
46605: FOR_TO
46606: IFFALSE 46679
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46608: LD_ADDR_VAR 0 3
46612: PUSH
46613: LD_VAR 0 3
46617: PUSH
46618: LD_INT 22
46620: PUSH
46621: LD_VAR 0 1
46625: PPUSH
46626: CALL_OW 255
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 91
46637: PUSH
46638: LD_VAR 0 1
46642: PUSH
46643: LD_INT 6
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 30
46653: PUSH
46654: LD_VAR 0 4
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: PPUSH
46671: CALL_OW 69
46675: ADD
46676: ST_TO_ADDR
46677: GO 46605
46679: POP
46680: POP
// for i = 1 to tmp do
46681: LD_ADDR_VAR 0 4
46685: PUSH
46686: DOUBLE
46687: LD_INT 1
46689: DEC
46690: ST_TO_ADDR
46691: LD_VAR 0 3
46695: PUSH
46696: FOR_TO
46697: IFFALSE 46785
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46699: LD_ADDR_VAR 0 5
46703: PUSH
46704: LD_VAR 0 5
46708: PUSH
46709: LD_VAR 0 3
46713: PUSH
46714: LD_VAR 0 4
46718: ARRAY
46719: PPUSH
46720: CALL_OW 266
46724: PUSH
46725: LD_VAR 0 3
46729: PUSH
46730: LD_VAR 0 4
46734: ARRAY
46735: PPUSH
46736: CALL_OW 250
46740: PUSH
46741: LD_VAR 0 3
46745: PUSH
46746: LD_VAR 0 4
46750: ARRAY
46751: PPUSH
46752: CALL_OW 251
46756: PUSH
46757: LD_VAR 0 3
46761: PUSH
46762: LD_VAR 0 4
46766: ARRAY
46767: PPUSH
46768: CALL_OW 254
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: PUSH
46779: EMPTY
46780: LIST
46781: ADD
46782: ST_TO_ADDR
46783: GO 46696
46785: POP
46786: POP
// result := list ;
46787: LD_ADDR_VAR 0 2
46791: PUSH
46792: LD_VAR 0 5
46796: ST_TO_ADDR
// end ;
46797: LD_VAR 0 2
46801: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46802: LD_INT 0
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
// if not factory then
46811: LD_VAR 0 1
46815: NOT
46816: IFFALSE 46820
// exit ;
46818: GO 47413
// if control = control_apeman then
46820: LD_VAR 0 4
46824: PUSH
46825: LD_INT 5
46827: EQUAL
46828: IFFALSE 46937
// begin tmp := UnitsInside ( factory ) ;
46830: LD_ADDR_VAR 0 8
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 313
46844: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46845: LD_VAR 0 8
46849: PPUSH
46850: LD_INT 25
46852: PUSH
46853: LD_INT 12
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PPUSH
46860: CALL_OW 72
46864: NOT
46865: IFFALSE 46875
// control := control_manual ;
46867: LD_ADDR_VAR 0 4
46871: PUSH
46872: LD_INT 1
46874: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46875: LD_ADDR_VAR 0 8
46879: PUSH
46880: LD_VAR 0 1
46884: PPUSH
46885: CALL 46572 0 1
46889: ST_TO_ADDR
// if tmp then
46890: LD_VAR 0 8
46894: IFFALSE 46937
// begin for i in tmp do
46896: LD_ADDR_VAR 0 7
46900: PUSH
46901: LD_VAR 0 8
46905: PUSH
46906: FOR_IN
46907: IFFALSE 46935
// if i [ 1 ] = b_ext_radio then
46909: LD_VAR 0 7
46913: PUSH
46914: LD_INT 1
46916: ARRAY
46917: PUSH
46918: LD_INT 22
46920: EQUAL
46921: IFFALSE 46933
// begin control := control_remote ;
46923: LD_ADDR_VAR 0 4
46927: PUSH
46928: LD_INT 2
46930: ST_TO_ADDR
// break ;
46931: GO 46935
// end ;
46933: GO 46906
46935: POP
46936: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46937: LD_VAR 0 1
46941: PPUSH
46942: LD_VAR 0 2
46946: PPUSH
46947: LD_VAR 0 3
46951: PPUSH
46952: LD_VAR 0 4
46956: PPUSH
46957: LD_VAR 0 5
46961: PPUSH
46962: CALL_OW 448
46966: IFFALSE 47001
// begin result := [ chassis , engine , control , weapon ] ;
46968: LD_ADDR_VAR 0 6
46972: PUSH
46973: LD_VAR 0 2
46977: PUSH
46978: LD_VAR 0 3
46982: PUSH
46983: LD_VAR 0 4
46987: PUSH
46988: LD_VAR 0 5
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: ST_TO_ADDR
// exit ;
46999: GO 47413
// end ; _chassis := AvailableChassisList ( factory ) ;
47001: LD_ADDR_VAR 0 9
47005: PUSH
47006: LD_VAR 0 1
47010: PPUSH
47011: CALL_OW 475
47015: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47016: LD_ADDR_VAR 0 11
47020: PUSH
47021: LD_VAR 0 1
47025: PPUSH
47026: CALL_OW 476
47030: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47031: LD_ADDR_VAR 0 12
47035: PUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 477
47045: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47046: LD_ADDR_VAR 0 10
47050: PUSH
47051: LD_VAR 0 1
47055: PPUSH
47056: CALL_OW 478
47060: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47061: LD_VAR 0 9
47065: NOT
47066: PUSH
47067: LD_VAR 0 11
47071: NOT
47072: OR
47073: PUSH
47074: LD_VAR 0 12
47078: NOT
47079: OR
47080: PUSH
47081: LD_VAR 0 10
47085: NOT
47086: OR
47087: IFFALSE 47122
// begin result := [ chassis , engine , control , weapon ] ;
47089: LD_ADDR_VAR 0 6
47093: PUSH
47094: LD_VAR 0 2
47098: PUSH
47099: LD_VAR 0 3
47103: PUSH
47104: LD_VAR 0 4
47108: PUSH
47109: LD_VAR 0 5
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: ST_TO_ADDR
// exit ;
47120: GO 47413
// end ; if not chassis in _chassis then
47122: LD_VAR 0 2
47126: PUSH
47127: LD_VAR 0 9
47131: IN
47132: NOT
47133: IFFALSE 47159
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47135: LD_ADDR_VAR 0 2
47139: PUSH
47140: LD_VAR 0 9
47144: PUSH
47145: LD_INT 1
47147: PPUSH
47148: LD_VAR 0 9
47152: PPUSH
47153: CALL_OW 12
47157: ARRAY
47158: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47159: LD_VAR 0 2
47163: PPUSH
47164: LD_VAR 0 3
47168: PPUSH
47169: CALL 47418 0 2
47173: NOT
47174: IFFALSE 47233
// repeat engine := _engine [ 1 ] ;
47176: LD_ADDR_VAR 0 3
47180: PUSH
47181: LD_VAR 0 11
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47190: LD_ADDR_VAR 0 11
47194: PUSH
47195: LD_VAR 0 11
47199: PPUSH
47200: LD_INT 1
47202: PPUSH
47203: CALL_OW 3
47207: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47208: LD_VAR 0 2
47212: PPUSH
47213: LD_VAR 0 3
47217: PPUSH
47218: CALL 47418 0 2
47222: PUSH
47223: LD_VAR 0 11
47227: PUSH
47228: EMPTY
47229: EQUAL
47230: OR
47231: IFFALSE 47176
// if not control in _control then
47233: LD_VAR 0 4
47237: PUSH
47238: LD_VAR 0 12
47242: IN
47243: NOT
47244: IFFALSE 47270
// control := _control [ rand ( 1 , _control ) ] ;
47246: LD_ADDR_VAR 0 4
47250: PUSH
47251: LD_VAR 0 12
47255: PUSH
47256: LD_INT 1
47258: PPUSH
47259: LD_VAR 0 12
47263: PPUSH
47264: CALL_OW 12
47268: ARRAY
47269: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47270: LD_VAR 0 2
47274: PPUSH
47275: LD_VAR 0 5
47279: PPUSH
47280: CALL 47638 0 2
47284: NOT
47285: IFFALSE 47344
// repeat weapon := _weapon [ 1 ] ;
47287: LD_ADDR_VAR 0 5
47291: PUSH
47292: LD_VAR 0 10
47296: PUSH
47297: LD_INT 1
47299: ARRAY
47300: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47301: LD_ADDR_VAR 0 10
47305: PUSH
47306: LD_VAR 0 10
47310: PPUSH
47311: LD_INT 1
47313: PPUSH
47314: CALL_OW 3
47318: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47319: LD_VAR 0 2
47323: PPUSH
47324: LD_VAR 0 5
47328: PPUSH
47329: CALL 47638 0 2
47333: PUSH
47334: LD_VAR 0 10
47338: PUSH
47339: EMPTY
47340: EQUAL
47341: OR
47342: IFFALSE 47287
// result := [ ] ;
47344: LD_ADDR_VAR 0 6
47348: PUSH
47349: EMPTY
47350: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47351: LD_VAR 0 1
47355: PPUSH
47356: LD_VAR 0 2
47360: PPUSH
47361: LD_VAR 0 3
47365: PPUSH
47366: LD_VAR 0 4
47370: PPUSH
47371: LD_VAR 0 5
47375: PPUSH
47376: CALL_OW 448
47380: IFFALSE 47413
// result := [ chassis , engine , control , weapon ] ;
47382: LD_ADDR_VAR 0 6
47386: PUSH
47387: LD_VAR 0 2
47391: PUSH
47392: LD_VAR 0 3
47396: PUSH
47397: LD_VAR 0 4
47401: PUSH
47402: LD_VAR 0 5
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
// end ;
47413: LD_VAR 0 6
47417: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47418: LD_INT 0
47420: PPUSH
// if not chassis or not engine then
47421: LD_VAR 0 1
47425: NOT
47426: PUSH
47427: LD_VAR 0 2
47431: NOT
47432: OR
47433: IFFALSE 47437
// exit ;
47435: GO 47633
// case engine of engine_solar :
47437: LD_VAR 0 2
47441: PUSH
47442: LD_INT 2
47444: DOUBLE
47445: EQUAL
47446: IFTRUE 47450
47448: GO 47488
47450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47451: LD_ADDR_VAR 0 3
47455: PUSH
47456: LD_INT 11
47458: PUSH
47459: LD_INT 12
47461: PUSH
47462: LD_INT 13
47464: PUSH
47465: LD_INT 14
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: ST_TO_ADDR
47486: GO 47617
47488: LD_INT 1
47490: DOUBLE
47491: EQUAL
47492: IFTRUE 47496
47494: GO 47558
47496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47497: LD_ADDR_VAR 0 3
47501: PUSH
47502: LD_INT 11
47504: PUSH
47505: LD_INT 12
47507: PUSH
47508: LD_INT 13
47510: PUSH
47511: LD_INT 14
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: LD_INT 4
47525: PUSH
47526: LD_INT 5
47528: PUSH
47529: LD_INT 21
47531: PUSH
47532: LD_INT 23
47534: PUSH
47535: LD_INT 22
47537: PUSH
47538: LD_INT 24
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
47556: GO 47617
47558: LD_INT 3
47560: DOUBLE
47561: EQUAL
47562: IFTRUE 47566
47564: GO 47616
47566: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47567: LD_ADDR_VAR 0 3
47571: PUSH
47572: LD_INT 13
47574: PUSH
47575: LD_INT 14
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 4
47586: PUSH
47587: LD_INT 5
47589: PUSH
47590: LD_INT 21
47592: PUSH
47593: LD_INT 22
47595: PUSH
47596: LD_INT 23
47598: PUSH
47599: LD_INT 24
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: ST_TO_ADDR
47614: GO 47617
47616: POP
// result := ( chassis in result ) ;
47617: LD_ADDR_VAR 0 3
47621: PUSH
47622: LD_VAR 0 1
47626: PUSH
47627: LD_VAR 0 3
47631: IN
47632: ST_TO_ADDR
// end ;
47633: LD_VAR 0 3
47637: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47638: LD_INT 0
47640: PPUSH
// if not chassis or not weapon then
47641: LD_VAR 0 1
47645: NOT
47646: PUSH
47647: LD_VAR 0 2
47651: NOT
47652: OR
47653: IFFALSE 47657
// exit ;
47655: GO 48719
// case weapon of us_machine_gun :
47657: LD_VAR 0 2
47661: PUSH
47662: LD_INT 2
47664: DOUBLE
47665: EQUAL
47666: IFTRUE 47670
47668: GO 47700
47670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: LD_INT 5
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
47698: GO 48703
47700: LD_INT 3
47702: DOUBLE
47703: EQUAL
47704: IFTRUE 47708
47706: GO 47738
47708: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47709: LD_ADDR_VAR 0 3
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 4
47725: PUSH
47726: LD_INT 5
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: ST_TO_ADDR
47736: GO 48703
47738: LD_INT 11
47740: DOUBLE
47741: EQUAL
47742: IFTRUE 47746
47744: GO 47776
47746: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47747: LD_ADDR_VAR 0 3
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 4
47763: PUSH
47764: LD_INT 5
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: ST_TO_ADDR
47774: GO 48703
47776: LD_INT 4
47778: DOUBLE
47779: EQUAL
47780: IFTRUE 47784
47782: GO 47810
47784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47785: LD_ADDR_VAR 0 3
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: LD_INT 4
47798: PUSH
47799: LD_INT 5
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
47808: GO 48703
47810: LD_INT 5
47812: DOUBLE
47813: EQUAL
47814: IFTRUE 47818
47816: GO 47844
47818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47819: LD_ADDR_VAR 0 3
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: LD_INT 4
47832: PUSH
47833: LD_INT 5
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: ST_TO_ADDR
47842: GO 48703
47844: LD_INT 9
47846: DOUBLE
47847: EQUAL
47848: IFTRUE 47852
47850: GO 47878
47852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47853: LD_ADDR_VAR 0 3
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 4
47866: PUSH
47867: LD_INT 5
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
47876: GO 48703
47878: LD_INT 7
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47886
47884: GO 47912
47886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47887: LD_ADDR_VAR 0 3
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: LD_INT 4
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: ST_TO_ADDR
47910: GO 48703
47912: LD_INT 12
47914: DOUBLE
47915: EQUAL
47916: IFTRUE 47920
47918: GO 47946
47920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47921: LD_ADDR_VAR 0 3
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 4
47934: PUSH
47935: LD_INT 5
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
47944: GO 48703
47946: LD_INT 13
47948: DOUBLE
47949: EQUAL
47950: IFTRUE 47954
47952: GO 47980
47954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 3
47965: PUSH
47966: LD_INT 4
47968: PUSH
47969: LD_INT 5
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: ST_TO_ADDR
47978: GO 48703
47980: LD_INT 14
47982: DOUBLE
47983: EQUAL
47984: IFTRUE 47988
47986: GO 48006
47988: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47989: LD_ADDR_VAR 0 3
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: ST_TO_ADDR
48004: GO 48703
48006: LD_INT 6
48008: DOUBLE
48009: EQUAL
48010: IFTRUE 48014
48012: GO 48032
48014: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48015: LD_ADDR_VAR 0 3
48019: PUSH
48020: LD_INT 4
48022: PUSH
48023: LD_INT 5
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: ST_TO_ADDR
48030: GO 48703
48032: LD_INT 10
48034: DOUBLE
48035: EQUAL
48036: IFTRUE 48040
48038: GO 48058
48040: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48041: LD_ADDR_VAR 0 3
48045: PUSH
48046: LD_INT 4
48048: PUSH
48049: LD_INT 5
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: ST_TO_ADDR
48056: GO 48703
48058: LD_INT 22
48060: DOUBLE
48061: EQUAL
48062: IFTRUE 48066
48064: GO 48092
48066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48067: LD_ADDR_VAR 0 3
48071: PUSH
48072: LD_INT 11
48074: PUSH
48075: LD_INT 12
48077: PUSH
48078: LD_INT 13
48080: PUSH
48081: LD_INT 14
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
48090: GO 48703
48092: LD_INT 23
48094: DOUBLE
48095: EQUAL
48096: IFTRUE 48100
48098: GO 48126
48100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48101: LD_ADDR_VAR 0 3
48105: PUSH
48106: LD_INT 11
48108: PUSH
48109: LD_INT 12
48111: PUSH
48112: LD_INT 13
48114: PUSH
48115: LD_INT 14
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: ST_TO_ADDR
48124: GO 48703
48126: LD_INT 24
48128: DOUBLE
48129: EQUAL
48130: IFTRUE 48134
48132: GO 48160
48134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48135: LD_ADDR_VAR 0 3
48139: PUSH
48140: LD_INT 11
48142: PUSH
48143: LD_INT 12
48145: PUSH
48146: LD_INT 13
48148: PUSH
48149: LD_INT 14
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
48158: GO 48703
48160: LD_INT 30
48162: DOUBLE
48163: EQUAL
48164: IFTRUE 48168
48166: GO 48194
48168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48169: LD_ADDR_VAR 0 3
48173: PUSH
48174: LD_INT 11
48176: PUSH
48177: LD_INT 12
48179: PUSH
48180: LD_INT 13
48182: PUSH
48183: LD_INT 14
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
48192: GO 48703
48194: LD_INT 25
48196: DOUBLE
48197: EQUAL
48198: IFTRUE 48202
48200: GO 48220
48202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48203: LD_ADDR_VAR 0 3
48207: PUSH
48208: LD_INT 13
48210: PUSH
48211: LD_INT 14
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: ST_TO_ADDR
48218: GO 48703
48220: LD_INT 27
48222: DOUBLE
48223: EQUAL
48224: IFTRUE 48228
48226: GO 48246
48228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48229: LD_ADDR_VAR 0 3
48233: PUSH
48234: LD_INT 13
48236: PUSH
48237: LD_INT 14
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: ST_TO_ADDR
48244: GO 48703
48246: LD_EXP 53
48250: DOUBLE
48251: EQUAL
48252: IFTRUE 48256
48254: GO 48282
48256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48257: LD_ADDR_VAR 0 3
48261: PUSH
48262: LD_INT 11
48264: PUSH
48265: LD_INT 12
48267: PUSH
48268: LD_INT 13
48270: PUSH
48271: LD_INT 14
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: ST_TO_ADDR
48280: GO 48703
48282: LD_INT 28
48284: DOUBLE
48285: EQUAL
48286: IFTRUE 48290
48288: GO 48308
48290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48291: LD_ADDR_VAR 0 3
48295: PUSH
48296: LD_INT 13
48298: PUSH
48299: LD_INT 14
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: ST_TO_ADDR
48306: GO 48703
48308: LD_INT 29
48310: DOUBLE
48311: EQUAL
48312: IFTRUE 48316
48314: GO 48334
48316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48317: LD_ADDR_VAR 0 3
48321: PUSH
48322: LD_INT 13
48324: PUSH
48325: LD_INT 14
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: ST_TO_ADDR
48332: GO 48703
48334: LD_INT 31
48336: DOUBLE
48337: EQUAL
48338: IFTRUE 48342
48340: GO 48360
48342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48343: LD_ADDR_VAR 0 3
48347: PUSH
48348: LD_INT 13
48350: PUSH
48351: LD_INT 14
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: ST_TO_ADDR
48358: GO 48703
48360: LD_INT 26
48362: DOUBLE
48363: EQUAL
48364: IFTRUE 48368
48366: GO 48386
48368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48369: LD_ADDR_VAR 0 3
48373: PUSH
48374: LD_INT 13
48376: PUSH
48377: LD_INT 14
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: ST_TO_ADDR
48384: GO 48703
48386: LD_INT 42
48388: DOUBLE
48389: EQUAL
48390: IFTRUE 48394
48392: GO 48420
48394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48395: LD_ADDR_VAR 0 3
48399: PUSH
48400: LD_INT 21
48402: PUSH
48403: LD_INT 22
48405: PUSH
48406: LD_INT 23
48408: PUSH
48409: LD_INT 24
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
48418: GO 48703
48420: LD_INT 43
48422: DOUBLE
48423: EQUAL
48424: IFTRUE 48428
48426: GO 48454
48428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48429: LD_ADDR_VAR 0 3
48433: PUSH
48434: LD_INT 21
48436: PUSH
48437: LD_INT 22
48439: PUSH
48440: LD_INT 23
48442: PUSH
48443: LD_INT 24
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
48452: GO 48703
48454: LD_INT 44
48456: DOUBLE
48457: EQUAL
48458: IFTRUE 48462
48460: GO 48488
48462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48463: LD_ADDR_VAR 0 3
48467: PUSH
48468: LD_INT 21
48470: PUSH
48471: LD_INT 22
48473: PUSH
48474: LD_INT 23
48476: PUSH
48477: LD_INT 24
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
48486: GO 48703
48488: LD_INT 45
48490: DOUBLE
48491: EQUAL
48492: IFTRUE 48496
48494: GO 48522
48496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48497: LD_ADDR_VAR 0 3
48501: PUSH
48502: LD_INT 21
48504: PUSH
48505: LD_INT 22
48507: PUSH
48508: LD_INT 23
48510: PUSH
48511: LD_INT 24
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
48520: GO 48703
48522: LD_INT 49
48524: DOUBLE
48525: EQUAL
48526: IFTRUE 48530
48528: GO 48556
48530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48531: LD_ADDR_VAR 0 3
48535: PUSH
48536: LD_INT 21
48538: PUSH
48539: LD_INT 22
48541: PUSH
48542: LD_INT 23
48544: PUSH
48545: LD_INT 24
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
48554: GO 48703
48556: LD_INT 51
48558: DOUBLE
48559: EQUAL
48560: IFTRUE 48564
48562: GO 48590
48564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48565: LD_ADDR_VAR 0 3
48569: PUSH
48570: LD_INT 21
48572: PUSH
48573: LD_INT 22
48575: PUSH
48576: LD_INT 23
48578: PUSH
48579: LD_INT 24
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
48588: GO 48703
48590: LD_INT 52
48592: DOUBLE
48593: EQUAL
48594: IFTRUE 48598
48596: GO 48624
48598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48599: LD_ADDR_VAR 0 3
48603: PUSH
48604: LD_INT 21
48606: PUSH
48607: LD_INT 22
48609: PUSH
48610: LD_INT 23
48612: PUSH
48613: LD_INT 24
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: ST_TO_ADDR
48622: GO 48703
48624: LD_INT 53
48626: DOUBLE
48627: EQUAL
48628: IFTRUE 48632
48630: GO 48650
48632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48633: LD_ADDR_VAR 0 3
48637: PUSH
48638: LD_INT 23
48640: PUSH
48641: LD_INT 24
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: ST_TO_ADDR
48648: GO 48703
48650: LD_INT 46
48652: DOUBLE
48653: EQUAL
48654: IFTRUE 48658
48656: GO 48676
48658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48659: LD_ADDR_VAR 0 3
48663: PUSH
48664: LD_INT 23
48666: PUSH
48667: LD_INT 24
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: ST_TO_ADDR
48674: GO 48703
48676: LD_INT 47
48678: DOUBLE
48679: EQUAL
48680: IFTRUE 48684
48682: GO 48702
48684: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48685: LD_ADDR_VAR 0 3
48689: PUSH
48690: LD_INT 23
48692: PUSH
48693: LD_INT 24
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: ST_TO_ADDR
48700: GO 48703
48702: POP
// result := ( chassis in result ) ;
48703: LD_ADDR_VAR 0 3
48707: PUSH
48708: LD_VAR 0 1
48712: PUSH
48713: LD_VAR 0 3
48717: IN
48718: ST_TO_ADDR
// end ;
48719: LD_VAR 0 3
48723: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48724: LD_INT 0
48726: PPUSH
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
// result := array ;
48733: LD_ADDR_VAR 0 5
48737: PUSH
48738: LD_VAR 0 1
48742: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48743: LD_VAR 0 1
48747: NOT
48748: PUSH
48749: LD_VAR 0 2
48753: NOT
48754: OR
48755: PUSH
48756: LD_VAR 0 3
48760: NOT
48761: OR
48762: PUSH
48763: LD_VAR 0 2
48767: PUSH
48768: LD_VAR 0 1
48772: GREATER
48773: OR
48774: PUSH
48775: LD_VAR 0 3
48779: PUSH
48780: LD_VAR 0 1
48784: GREATER
48785: OR
48786: IFFALSE 48790
// exit ;
48788: GO 49086
// if direction then
48790: LD_VAR 0 4
48794: IFFALSE 48858
// begin d := 1 ;
48796: LD_ADDR_VAR 0 9
48800: PUSH
48801: LD_INT 1
48803: ST_TO_ADDR
// if i_from > i_to then
48804: LD_VAR 0 2
48808: PUSH
48809: LD_VAR 0 3
48813: GREATER
48814: IFFALSE 48840
// length := ( array - i_from ) + i_to else
48816: LD_ADDR_VAR 0 11
48820: PUSH
48821: LD_VAR 0 1
48825: PUSH
48826: LD_VAR 0 2
48830: MINUS
48831: PUSH
48832: LD_VAR 0 3
48836: PLUS
48837: ST_TO_ADDR
48838: GO 48856
// length := i_to - i_from ;
48840: LD_ADDR_VAR 0 11
48844: PUSH
48845: LD_VAR 0 3
48849: PUSH
48850: LD_VAR 0 2
48854: MINUS
48855: ST_TO_ADDR
// end else
48856: GO 48919
// begin d := - 1 ;
48858: LD_ADDR_VAR 0 9
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: ST_TO_ADDR
// if i_from > i_to then
48867: LD_VAR 0 2
48871: PUSH
48872: LD_VAR 0 3
48876: GREATER
48877: IFFALSE 48897
// length := i_from - i_to else
48879: LD_ADDR_VAR 0 11
48883: PUSH
48884: LD_VAR 0 2
48888: PUSH
48889: LD_VAR 0 3
48893: MINUS
48894: ST_TO_ADDR
48895: GO 48919
// length := ( array - i_to ) + i_from ;
48897: LD_ADDR_VAR 0 11
48901: PUSH
48902: LD_VAR 0 1
48906: PUSH
48907: LD_VAR 0 3
48911: MINUS
48912: PUSH
48913: LD_VAR 0 2
48917: PLUS
48918: ST_TO_ADDR
// end ; if not length then
48919: LD_VAR 0 11
48923: NOT
48924: IFFALSE 48928
// exit ;
48926: GO 49086
// tmp := array ;
48928: LD_ADDR_VAR 0 10
48932: PUSH
48933: LD_VAR 0 1
48937: ST_TO_ADDR
// for i = 1 to length do
48938: LD_ADDR_VAR 0 6
48942: PUSH
48943: DOUBLE
48944: LD_INT 1
48946: DEC
48947: ST_TO_ADDR
48948: LD_VAR 0 11
48952: PUSH
48953: FOR_TO
48954: IFFALSE 49074
// begin for j = 1 to array do
48956: LD_ADDR_VAR 0 7
48960: PUSH
48961: DOUBLE
48962: LD_INT 1
48964: DEC
48965: ST_TO_ADDR
48966: LD_VAR 0 1
48970: PUSH
48971: FOR_TO
48972: IFFALSE 49060
// begin k := j + d ;
48974: LD_ADDR_VAR 0 8
48978: PUSH
48979: LD_VAR 0 7
48983: PUSH
48984: LD_VAR 0 9
48988: PLUS
48989: ST_TO_ADDR
// if k > array then
48990: LD_VAR 0 8
48994: PUSH
48995: LD_VAR 0 1
48999: GREATER
49000: IFFALSE 49010
// k := 1 ;
49002: LD_ADDR_VAR 0 8
49006: PUSH
49007: LD_INT 1
49009: ST_TO_ADDR
// if not k then
49010: LD_VAR 0 8
49014: NOT
49015: IFFALSE 49027
// k := array ;
49017: LD_ADDR_VAR 0 8
49021: PUSH
49022: LD_VAR 0 1
49026: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49027: LD_ADDR_VAR 0 10
49031: PUSH
49032: LD_VAR 0 10
49036: PPUSH
49037: LD_VAR 0 8
49041: PPUSH
49042: LD_VAR 0 1
49046: PUSH
49047: LD_VAR 0 7
49051: ARRAY
49052: PPUSH
49053: CALL_OW 1
49057: ST_TO_ADDR
// end ;
49058: GO 48971
49060: POP
49061: POP
// array := tmp ;
49062: LD_ADDR_VAR 0 1
49066: PUSH
49067: LD_VAR 0 10
49071: ST_TO_ADDR
// end ;
49072: GO 48953
49074: POP
49075: POP
// result := array ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_VAR 0 1
49085: ST_TO_ADDR
// end ;
49086: LD_VAR 0 5
49090: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49091: LD_INT 0
49093: PPUSH
49094: PPUSH
// result := 0 ;
49095: LD_ADDR_VAR 0 3
49099: PUSH
49100: LD_INT 0
49102: ST_TO_ADDR
// if not array or not value in array then
49103: LD_VAR 0 1
49107: NOT
49108: PUSH
49109: LD_VAR 0 2
49113: PUSH
49114: LD_VAR 0 1
49118: IN
49119: NOT
49120: OR
49121: IFFALSE 49125
// exit ;
49123: GO 49179
// for i = 1 to array do
49125: LD_ADDR_VAR 0 4
49129: PUSH
49130: DOUBLE
49131: LD_INT 1
49133: DEC
49134: ST_TO_ADDR
49135: LD_VAR 0 1
49139: PUSH
49140: FOR_TO
49141: IFFALSE 49177
// if value = array [ i ] then
49143: LD_VAR 0 2
49147: PUSH
49148: LD_VAR 0 1
49152: PUSH
49153: LD_VAR 0 4
49157: ARRAY
49158: EQUAL
49159: IFFALSE 49175
// begin result := i ;
49161: LD_ADDR_VAR 0 3
49165: PUSH
49166: LD_VAR 0 4
49170: ST_TO_ADDR
// exit ;
49171: POP
49172: POP
49173: GO 49179
// end ;
49175: GO 49140
49177: POP
49178: POP
// end ;
49179: LD_VAR 0 3
49183: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49184: LD_INT 0
49186: PPUSH
// vc_chassis := chassis ;
49187: LD_ADDR_OWVAR 37
49191: PUSH
49192: LD_VAR 0 1
49196: ST_TO_ADDR
// vc_engine := engine ;
49197: LD_ADDR_OWVAR 39
49201: PUSH
49202: LD_VAR 0 2
49206: ST_TO_ADDR
// vc_control := control ;
49207: LD_ADDR_OWVAR 38
49211: PUSH
49212: LD_VAR 0 3
49216: ST_TO_ADDR
// vc_weapon := weapon ;
49217: LD_ADDR_OWVAR 40
49221: PUSH
49222: LD_VAR 0 4
49226: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49227: LD_ADDR_OWVAR 41
49231: PUSH
49232: LD_VAR 0 5
49236: ST_TO_ADDR
// end ;
49237: LD_VAR 0 6
49241: RET
// export function WantPlant ( unit ) ; var task ; begin
49242: LD_INT 0
49244: PPUSH
49245: PPUSH
// result := false ;
49246: LD_ADDR_VAR 0 2
49250: PUSH
49251: LD_INT 0
49253: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49254: LD_ADDR_VAR 0 3
49258: PUSH
49259: LD_VAR 0 1
49263: PPUSH
49264: CALL_OW 437
49268: ST_TO_ADDR
// if task then
49269: LD_VAR 0 3
49273: IFFALSE 49301
// if task [ 1 ] [ 1 ] = p then
49275: LD_VAR 0 3
49279: PUSH
49280: LD_INT 1
49282: ARRAY
49283: PUSH
49284: LD_INT 1
49286: ARRAY
49287: PUSH
49288: LD_STRING p
49290: EQUAL
49291: IFFALSE 49301
// result := true ;
49293: LD_ADDR_VAR 0 2
49297: PUSH
49298: LD_INT 1
49300: ST_TO_ADDR
// end ;
49301: LD_VAR 0 2
49305: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49306: LD_INT 0
49308: PPUSH
49309: PPUSH
49310: PPUSH
49311: PPUSH
// if pos < 1 then
49312: LD_VAR 0 2
49316: PUSH
49317: LD_INT 1
49319: LESS
49320: IFFALSE 49324
// exit ;
49322: GO 49627
// if pos = 1 then
49324: LD_VAR 0 2
49328: PUSH
49329: LD_INT 1
49331: EQUAL
49332: IFFALSE 49365
// result := Replace ( arr , pos [ 1 ] , value ) else
49334: LD_ADDR_VAR 0 4
49338: PUSH
49339: LD_VAR 0 1
49343: PPUSH
49344: LD_VAR 0 2
49348: PUSH
49349: LD_INT 1
49351: ARRAY
49352: PPUSH
49353: LD_VAR 0 3
49357: PPUSH
49358: CALL_OW 1
49362: ST_TO_ADDR
49363: GO 49627
// begin tmp := arr ;
49365: LD_ADDR_VAR 0 6
49369: PUSH
49370: LD_VAR 0 1
49374: ST_TO_ADDR
// s_arr := [ tmp ] ;
49375: LD_ADDR_VAR 0 7
49379: PUSH
49380: LD_VAR 0 6
49384: PUSH
49385: EMPTY
49386: LIST
49387: ST_TO_ADDR
// for i = 1 to pos - 1 do
49388: LD_ADDR_VAR 0 5
49392: PUSH
49393: DOUBLE
49394: LD_INT 1
49396: DEC
49397: ST_TO_ADDR
49398: LD_VAR 0 2
49402: PUSH
49403: LD_INT 1
49405: MINUS
49406: PUSH
49407: FOR_TO
49408: IFFALSE 49453
// begin tmp := tmp [ pos [ i ] ] ;
49410: LD_ADDR_VAR 0 6
49414: PUSH
49415: LD_VAR 0 6
49419: PUSH
49420: LD_VAR 0 2
49424: PUSH
49425: LD_VAR 0 5
49429: ARRAY
49430: ARRAY
49431: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49432: LD_ADDR_VAR 0 7
49436: PUSH
49437: LD_VAR 0 7
49441: PUSH
49442: LD_VAR 0 6
49446: PUSH
49447: EMPTY
49448: LIST
49449: ADD
49450: ST_TO_ADDR
// end ;
49451: GO 49407
49453: POP
49454: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49455: LD_ADDR_VAR 0 6
49459: PUSH
49460: LD_VAR 0 6
49464: PPUSH
49465: LD_VAR 0 2
49469: PUSH
49470: LD_VAR 0 2
49474: ARRAY
49475: PPUSH
49476: LD_VAR 0 3
49480: PPUSH
49481: CALL_OW 1
49485: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49486: LD_ADDR_VAR 0 7
49490: PUSH
49491: LD_VAR 0 7
49495: PPUSH
49496: LD_VAR 0 7
49500: PPUSH
49501: LD_VAR 0 6
49505: PPUSH
49506: CALL_OW 1
49510: ST_TO_ADDR
// for i = s_arr downto 2 do
49511: LD_ADDR_VAR 0 5
49515: PUSH
49516: DOUBLE
49517: LD_VAR 0 7
49521: INC
49522: ST_TO_ADDR
49523: LD_INT 2
49525: PUSH
49526: FOR_DOWNTO
49527: IFFALSE 49611
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49529: LD_ADDR_VAR 0 6
49533: PUSH
49534: LD_VAR 0 7
49538: PUSH
49539: LD_VAR 0 5
49543: PUSH
49544: LD_INT 1
49546: MINUS
49547: ARRAY
49548: PPUSH
49549: LD_VAR 0 2
49553: PUSH
49554: LD_VAR 0 5
49558: PUSH
49559: LD_INT 1
49561: MINUS
49562: ARRAY
49563: PPUSH
49564: LD_VAR 0 7
49568: PUSH
49569: LD_VAR 0 5
49573: ARRAY
49574: PPUSH
49575: CALL_OW 1
49579: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49580: LD_ADDR_VAR 0 7
49584: PUSH
49585: LD_VAR 0 7
49589: PPUSH
49590: LD_VAR 0 5
49594: PUSH
49595: LD_INT 1
49597: MINUS
49598: PPUSH
49599: LD_VAR 0 6
49603: PPUSH
49604: CALL_OW 1
49608: ST_TO_ADDR
// end ;
49609: GO 49526
49611: POP
49612: POP
// result := s_arr [ 1 ] ;
49613: LD_ADDR_VAR 0 4
49617: PUSH
49618: LD_VAR 0 7
49622: PUSH
49623: LD_INT 1
49625: ARRAY
49626: ST_TO_ADDR
// end ; end ;
49627: LD_VAR 0 4
49631: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49632: LD_INT 0
49634: PPUSH
49635: PPUSH
// if not list then
49636: LD_VAR 0 1
49640: NOT
49641: IFFALSE 49645
// exit ;
49643: GO 49736
// i := list [ pos1 ] ;
49645: LD_ADDR_VAR 0 5
49649: PUSH
49650: LD_VAR 0 1
49654: PUSH
49655: LD_VAR 0 2
49659: ARRAY
49660: ST_TO_ADDR
// if not i then
49661: LD_VAR 0 5
49665: NOT
49666: IFFALSE 49670
// exit ;
49668: GO 49736
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49670: LD_ADDR_VAR 0 1
49674: PUSH
49675: LD_VAR 0 1
49679: PPUSH
49680: LD_VAR 0 2
49684: PPUSH
49685: LD_VAR 0 1
49689: PUSH
49690: LD_VAR 0 3
49694: ARRAY
49695: PPUSH
49696: CALL_OW 1
49700: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49701: LD_ADDR_VAR 0 1
49705: PUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: LD_VAR 0 3
49715: PPUSH
49716: LD_VAR 0 5
49720: PPUSH
49721: CALL_OW 1
49725: ST_TO_ADDR
// result := list ;
49726: LD_ADDR_VAR 0 4
49730: PUSH
49731: LD_VAR 0 1
49735: ST_TO_ADDR
// end ;
49736: LD_VAR 0 4
49740: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49741: LD_INT 0
49743: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49744: LD_ADDR_VAR 0 5
49748: PUSH
49749: LD_VAR 0 1
49753: PPUSH
49754: CALL_OW 250
49758: PPUSH
49759: LD_VAR 0 1
49763: PPUSH
49764: CALL_OW 251
49768: PPUSH
49769: LD_VAR 0 2
49773: PPUSH
49774: LD_VAR 0 3
49778: PPUSH
49779: LD_VAR 0 4
49783: PPUSH
49784: CALL 49794 0 5
49788: ST_TO_ADDR
// end ;
49789: LD_VAR 0 5
49793: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49794: LD_INT 0
49796: PPUSH
49797: PPUSH
49798: PPUSH
49799: PPUSH
// if not list then
49800: LD_VAR 0 3
49804: NOT
49805: IFFALSE 49809
// exit ;
49807: GO 50197
// result := [ ] ;
49809: LD_ADDR_VAR 0 6
49813: PUSH
49814: EMPTY
49815: ST_TO_ADDR
// for i in list do
49816: LD_ADDR_VAR 0 7
49820: PUSH
49821: LD_VAR 0 3
49825: PUSH
49826: FOR_IN
49827: IFFALSE 50029
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49829: LD_ADDR_VAR 0 9
49833: PUSH
49834: LD_VAR 0 7
49838: PPUSH
49839: LD_VAR 0 1
49843: PPUSH
49844: LD_VAR 0 2
49848: PPUSH
49849: CALL_OW 297
49853: ST_TO_ADDR
// if not result then
49854: LD_VAR 0 6
49858: NOT
49859: IFFALSE 49885
// result := [ [ i , tmp ] ] else
49861: LD_ADDR_VAR 0 6
49865: PUSH
49866: LD_VAR 0 7
49870: PUSH
49871: LD_VAR 0 9
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: ST_TO_ADDR
49883: GO 50027
// begin if result [ result ] [ 2 ] < tmp then
49885: LD_VAR 0 6
49889: PUSH
49890: LD_VAR 0 6
49894: ARRAY
49895: PUSH
49896: LD_INT 2
49898: ARRAY
49899: PUSH
49900: LD_VAR 0 9
49904: LESS
49905: IFFALSE 49947
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49907: LD_ADDR_VAR 0 6
49911: PUSH
49912: LD_VAR 0 6
49916: PPUSH
49917: LD_VAR 0 6
49921: PUSH
49922: LD_INT 1
49924: PLUS
49925: PPUSH
49926: LD_VAR 0 7
49930: PUSH
49931: LD_VAR 0 9
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PPUSH
49940: CALL_OW 2
49944: ST_TO_ADDR
49945: GO 50027
// for j = 1 to result do
49947: LD_ADDR_VAR 0 8
49951: PUSH
49952: DOUBLE
49953: LD_INT 1
49955: DEC
49956: ST_TO_ADDR
49957: LD_VAR 0 6
49961: PUSH
49962: FOR_TO
49963: IFFALSE 50025
// begin if tmp < result [ j ] [ 2 ] then
49965: LD_VAR 0 9
49969: PUSH
49970: LD_VAR 0 6
49974: PUSH
49975: LD_VAR 0 8
49979: ARRAY
49980: PUSH
49981: LD_INT 2
49983: ARRAY
49984: LESS
49985: IFFALSE 50023
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49987: LD_ADDR_VAR 0 6
49991: PUSH
49992: LD_VAR 0 6
49996: PPUSH
49997: LD_VAR 0 8
50001: PPUSH
50002: LD_VAR 0 7
50006: PUSH
50007: LD_VAR 0 9
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PPUSH
50016: CALL_OW 2
50020: ST_TO_ADDR
// break ;
50021: GO 50025
// end ; end ;
50023: GO 49962
50025: POP
50026: POP
// end ; end ;
50027: GO 49826
50029: POP
50030: POP
// if result and not asc then
50031: LD_VAR 0 6
50035: PUSH
50036: LD_VAR 0 4
50040: NOT
50041: AND
50042: IFFALSE 50117
// begin tmp := result ;
50044: LD_ADDR_VAR 0 9
50048: PUSH
50049: LD_VAR 0 6
50053: ST_TO_ADDR
// for i = tmp downto 1 do
50054: LD_ADDR_VAR 0 7
50058: PUSH
50059: DOUBLE
50060: LD_VAR 0 9
50064: INC
50065: ST_TO_ADDR
50066: LD_INT 1
50068: PUSH
50069: FOR_DOWNTO
50070: IFFALSE 50115
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50072: LD_ADDR_VAR 0 6
50076: PUSH
50077: LD_VAR 0 6
50081: PPUSH
50082: LD_VAR 0 9
50086: PUSH
50087: LD_VAR 0 7
50091: MINUS
50092: PUSH
50093: LD_INT 1
50095: PLUS
50096: PPUSH
50097: LD_VAR 0 9
50101: PUSH
50102: LD_VAR 0 7
50106: ARRAY
50107: PPUSH
50108: CALL_OW 1
50112: ST_TO_ADDR
50113: GO 50069
50115: POP
50116: POP
// end ; tmp := [ ] ;
50117: LD_ADDR_VAR 0 9
50121: PUSH
50122: EMPTY
50123: ST_TO_ADDR
// if mode then
50124: LD_VAR 0 5
50128: IFFALSE 50197
// begin for i = 1 to result do
50130: LD_ADDR_VAR 0 7
50134: PUSH
50135: DOUBLE
50136: LD_INT 1
50138: DEC
50139: ST_TO_ADDR
50140: LD_VAR 0 6
50144: PUSH
50145: FOR_TO
50146: IFFALSE 50185
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50148: LD_ADDR_VAR 0 9
50152: PUSH
50153: LD_VAR 0 9
50157: PPUSH
50158: LD_VAR 0 7
50162: PPUSH
50163: LD_VAR 0 6
50167: PUSH
50168: LD_VAR 0 7
50172: ARRAY
50173: PUSH
50174: LD_INT 1
50176: ARRAY
50177: PPUSH
50178: CALL_OW 1
50182: ST_TO_ADDR
50183: GO 50145
50185: POP
50186: POP
// result := tmp ;
50187: LD_ADDR_VAR 0 6
50191: PUSH
50192: LD_VAR 0 9
50196: ST_TO_ADDR
// end ; end ;
50197: LD_VAR 0 6
50201: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50202: LD_INT 0
50204: PPUSH
50205: PPUSH
50206: PPUSH
50207: PPUSH
50208: PPUSH
50209: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50210: LD_ADDR_VAR 0 5
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: ST_TO_ADDR
// if not x or not y then
50232: LD_VAR 0 2
50236: NOT
50237: PUSH
50238: LD_VAR 0 3
50242: NOT
50243: OR
50244: IFFALSE 50248
// exit ;
50246: GO 51900
// if not range then
50248: LD_VAR 0 4
50252: NOT
50253: IFFALSE 50263
// range := 10 ;
50255: LD_ADDR_VAR 0 4
50259: PUSH
50260: LD_INT 10
50262: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50263: LD_ADDR_VAR 0 8
50267: PUSH
50268: LD_INT 81
50270: PUSH
50271: LD_VAR 0 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 92
50282: PUSH
50283: LD_VAR 0 2
50287: PUSH
50288: LD_VAR 0 3
50292: PUSH
50293: LD_VAR 0 4
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: LD_INT 21
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: PPUSH
50326: CALL_OW 69
50330: ST_TO_ADDR
// if not tmp then
50331: LD_VAR 0 8
50335: NOT
50336: IFFALSE 50340
// exit ;
50338: GO 51900
// for i in tmp do
50340: LD_ADDR_VAR 0 6
50344: PUSH
50345: LD_VAR 0 8
50349: PUSH
50350: FOR_IN
50351: IFFALSE 51875
// begin points := [ 0 , 0 , 0 ] ;
50353: LD_ADDR_VAR 0 9
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// bpoints := 1 ;
50372: LD_ADDR_VAR 0 10
50376: PUSH
50377: LD_INT 1
50379: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50380: LD_VAR 0 6
50384: PPUSH
50385: CALL_OW 247
50389: PUSH
50390: LD_INT 1
50392: DOUBLE
50393: EQUAL
50394: IFTRUE 50398
50396: GO 50976
50398: POP
// begin if GetClass ( i ) = 1 then
50399: LD_VAR 0 6
50403: PPUSH
50404: CALL_OW 257
50408: PUSH
50409: LD_INT 1
50411: EQUAL
50412: IFFALSE 50433
// points := [ 10 , 5 , 3 ] ;
50414: LD_ADDR_VAR 0 9
50418: PUSH
50419: LD_INT 10
50421: PUSH
50422: LD_INT 5
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50433: LD_VAR 0 6
50437: PPUSH
50438: CALL_OW 257
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: LD_INT 4
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: IN
50457: IFFALSE 50478
// points := [ 3 , 2 , 1 ] ;
50459: LD_ADDR_VAR 0 9
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50478: LD_VAR 0 6
50482: PPUSH
50483: CALL_OW 257
50487: PUSH
50488: LD_INT 5
50490: EQUAL
50491: IFFALSE 50512
// points := [ 130 , 5 , 2 ] ;
50493: LD_ADDR_VAR 0 9
50497: PUSH
50498: LD_INT 130
50500: PUSH
50501: LD_INT 5
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: LIST
50511: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50512: LD_VAR 0 6
50516: PPUSH
50517: CALL_OW 257
50521: PUSH
50522: LD_INT 8
50524: EQUAL
50525: IFFALSE 50546
// points := [ 35 , 35 , 30 ] ;
50527: LD_ADDR_VAR 0 9
50531: PUSH
50532: LD_INT 35
50534: PUSH
50535: LD_INT 35
50537: PUSH
50538: LD_INT 30
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50546: LD_VAR 0 6
50550: PPUSH
50551: CALL_OW 257
50555: PUSH
50556: LD_INT 9
50558: EQUAL
50559: IFFALSE 50580
// points := [ 20 , 55 , 40 ] ;
50561: LD_ADDR_VAR 0 9
50565: PUSH
50566: LD_INT 20
50568: PUSH
50569: LD_INT 55
50571: PUSH
50572: LD_INT 40
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50580: LD_VAR 0 6
50584: PPUSH
50585: CALL_OW 257
50589: PUSH
50590: LD_INT 12
50592: PUSH
50593: LD_INT 16
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: IN
50600: IFFALSE 50621
// points := [ 5 , 3 , 2 ] ;
50602: LD_ADDR_VAR 0 9
50606: PUSH
50607: LD_INT 5
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: LIST
50620: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50621: LD_VAR 0 6
50625: PPUSH
50626: CALL_OW 257
50630: PUSH
50631: LD_INT 17
50633: EQUAL
50634: IFFALSE 50655
// points := [ 100 , 50 , 75 ] ;
50636: LD_ADDR_VAR 0 9
50640: PUSH
50641: LD_INT 100
50643: PUSH
50644: LD_INT 50
50646: PUSH
50647: LD_INT 75
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50655: LD_VAR 0 6
50659: PPUSH
50660: CALL_OW 257
50664: PUSH
50665: LD_INT 15
50667: EQUAL
50668: IFFALSE 50689
// points := [ 10 , 5 , 3 ] ;
50670: LD_ADDR_VAR 0 9
50674: PUSH
50675: LD_INT 10
50677: PUSH
50678: LD_INT 5
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50689: LD_VAR 0 6
50693: PPUSH
50694: CALL_OW 257
50698: PUSH
50699: LD_INT 14
50701: EQUAL
50702: IFFALSE 50723
// points := [ 10 , 0 , 0 ] ;
50704: LD_ADDR_VAR 0 9
50708: PUSH
50709: LD_INT 10
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50723: LD_VAR 0 6
50727: PPUSH
50728: CALL_OW 257
50732: PUSH
50733: LD_INT 11
50735: EQUAL
50736: IFFALSE 50757
// points := [ 30 , 10 , 5 ] ;
50738: LD_ADDR_VAR 0 9
50742: PUSH
50743: LD_INT 30
50745: PUSH
50746: LD_INT 10
50748: PUSH
50749: LD_INT 5
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50757: LD_VAR 0 1
50761: PPUSH
50762: LD_INT 5
50764: PPUSH
50765: CALL_OW 321
50769: PUSH
50770: LD_INT 2
50772: EQUAL
50773: IFFALSE 50790
// bpoints := bpoints * 1.8 ;
50775: LD_ADDR_VAR 0 10
50779: PUSH
50780: LD_VAR 0 10
50784: PUSH
50785: LD_REAL  1.80000000000000E+0000
50788: MUL
50789: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50790: LD_VAR 0 6
50794: PPUSH
50795: CALL_OW 257
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 4
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: IN
50818: PUSH
50819: LD_VAR 0 1
50823: PPUSH
50824: LD_INT 51
50826: PPUSH
50827: CALL_OW 321
50831: PUSH
50832: LD_INT 2
50834: EQUAL
50835: AND
50836: IFFALSE 50853
// bpoints := bpoints * 1.2 ;
50838: LD_ADDR_VAR 0 10
50842: PUSH
50843: LD_VAR 0 10
50847: PUSH
50848: LD_REAL  1.20000000000000E+0000
50851: MUL
50852: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50853: LD_VAR 0 6
50857: PPUSH
50858: CALL_OW 257
50862: PUSH
50863: LD_INT 5
50865: PUSH
50866: LD_INT 7
50868: PUSH
50869: LD_INT 9
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: IN
50877: PUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: LD_INT 52
50885: PPUSH
50886: CALL_OW 321
50890: PUSH
50891: LD_INT 2
50893: EQUAL
50894: AND
50895: IFFALSE 50912
// bpoints := bpoints * 1.5 ;
50897: LD_ADDR_VAR 0 10
50901: PUSH
50902: LD_VAR 0 10
50906: PUSH
50907: LD_REAL  1.50000000000000E+0000
50910: MUL
50911: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50912: LD_VAR 0 1
50916: PPUSH
50917: LD_INT 66
50919: PPUSH
50920: CALL_OW 321
50924: PUSH
50925: LD_INT 2
50927: EQUAL
50928: IFFALSE 50945
// bpoints := bpoints * 1.1 ;
50930: LD_ADDR_VAR 0 10
50934: PUSH
50935: LD_VAR 0 10
50939: PUSH
50940: LD_REAL  1.10000000000000E+0000
50943: MUL
50944: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50945: LD_ADDR_VAR 0 10
50949: PUSH
50950: LD_VAR 0 10
50954: PUSH
50955: LD_VAR 0 6
50959: PPUSH
50960: LD_INT 1
50962: PPUSH
50963: CALL_OW 259
50967: PUSH
50968: LD_REAL  1.15000000000000E+0000
50971: MUL
50972: MUL
50973: ST_TO_ADDR
// end ; unit_vehicle :
50974: GO 51804
50976: LD_INT 2
50978: DOUBLE
50979: EQUAL
50980: IFTRUE 50984
50982: GO 51792
50984: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50985: LD_VAR 0 6
50989: PPUSH
50990: CALL_OW 264
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 42
51000: PUSH
51001: LD_INT 24
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: IN
51009: IFFALSE 51030
// points := [ 25 , 5 , 3 ] ;
51011: LD_ADDR_VAR 0 9
51015: PUSH
51016: LD_INT 25
51018: PUSH
51019: LD_INT 5
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51030: LD_VAR 0 6
51034: PPUSH
51035: CALL_OW 264
51039: PUSH
51040: LD_INT 4
51042: PUSH
51043: LD_INT 43
51045: PUSH
51046: LD_INT 25
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: IN
51054: IFFALSE 51075
// points := [ 40 , 15 , 5 ] ;
51056: LD_ADDR_VAR 0 9
51060: PUSH
51061: LD_INT 40
51063: PUSH
51064: LD_INT 15
51066: PUSH
51067: LD_INT 5
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: LIST
51074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51075: LD_VAR 0 6
51079: PPUSH
51080: CALL_OW 264
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: LD_INT 23
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: IN
51095: IFFALSE 51116
// points := [ 7 , 25 , 8 ] ;
51097: LD_ADDR_VAR 0 9
51101: PUSH
51102: LD_INT 7
51104: PUSH
51105: LD_INT 25
51107: PUSH
51108: LD_INT 8
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51116: LD_VAR 0 6
51120: PPUSH
51121: CALL_OW 264
51125: PUSH
51126: LD_INT 5
51128: PUSH
51129: LD_INT 27
51131: PUSH
51132: LD_INT 44
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: IN
51140: IFFALSE 51161
// points := [ 14 , 50 , 16 ] ;
51142: LD_ADDR_VAR 0 9
51146: PUSH
51147: LD_INT 14
51149: PUSH
51150: LD_INT 50
51152: PUSH
51153: LD_INT 16
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51161: LD_VAR 0 6
51165: PPUSH
51166: CALL_OW 264
51170: PUSH
51171: LD_INT 6
51173: PUSH
51174: LD_INT 46
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: IN
51181: IFFALSE 51202
// points := [ 32 , 120 , 70 ] ;
51183: LD_ADDR_VAR 0 9
51187: PUSH
51188: LD_INT 32
51190: PUSH
51191: LD_INT 120
51193: PUSH
51194: LD_INT 70
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
51202: LD_VAR 0 6
51206: PPUSH
51207: CALL_OW 264
51211: PUSH
51212: LD_INT 7
51214: PUSH
51215: LD_INT 28
51217: PUSH
51218: LD_INT 45
51220: PUSH
51221: LD_EXP 53
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: IN
51232: IFFALSE 51253
// points := [ 35 , 20 , 45 ] ;
51234: LD_ADDR_VAR 0 9
51238: PUSH
51239: LD_INT 35
51241: PUSH
51242: LD_INT 20
51244: PUSH
51245: LD_INT 45
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51253: LD_VAR 0 6
51257: PPUSH
51258: CALL_OW 264
51262: PUSH
51263: LD_INT 47
51265: PUSH
51266: EMPTY
51267: LIST
51268: IN
51269: IFFALSE 51290
// points := [ 67 , 45 , 75 ] ;
51271: LD_ADDR_VAR 0 9
51275: PUSH
51276: LD_INT 67
51278: PUSH
51279: LD_INT 45
51281: PUSH
51282: LD_INT 75
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51290: LD_VAR 0 6
51294: PPUSH
51295: CALL_OW 264
51299: PUSH
51300: LD_INT 26
51302: PUSH
51303: EMPTY
51304: LIST
51305: IN
51306: IFFALSE 51327
// points := [ 120 , 30 , 80 ] ;
51308: LD_ADDR_VAR 0 9
51312: PUSH
51313: LD_INT 120
51315: PUSH
51316: LD_INT 30
51318: PUSH
51319: LD_INT 80
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51327: LD_VAR 0 6
51331: PPUSH
51332: CALL_OW 264
51336: PUSH
51337: LD_INT 22
51339: PUSH
51340: EMPTY
51341: LIST
51342: IN
51343: IFFALSE 51364
// points := [ 40 , 1 , 1 ] ;
51345: LD_ADDR_VAR 0 9
51349: PUSH
51350: LD_INT 40
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51364: LD_VAR 0 6
51368: PPUSH
51369: CALL_OW 264
51373: PUSH
51374: LD_INT 29
51376: PUSH
51377: EMPTY
51378: LIST
51379: IN
51380: IFFALSE 51401
// points := [ 70 , 200 , 400 ] ;
51382: LD_ADDR_VAR 0 9
51386: PUSH
51387: LD_INT 70
51389: PUSH
51390: LD_INT 200
51392: PUSH
51393: LD_INT 400
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51401: LD_VAR 0 6
51405: PPUSH
51406: CALL_OW 264
51410: PUSH
51411: LD_INT 14
51413: PUSH
51414: LD_INT 53
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: IN
51421: IFFALSE 51442
// points := [ 40 , 10 , 20 ] ;
51423: LD_ADDR_VAR 0 9
51427: PUSH
51428: LD_INT 40
51430: PUSH
51431: LD_INT 10
51433: PUSH
51434: LD_INT 20
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51442: LD_VAR 0 6
51446: PPUSH
51447: CALL_OW 264
51451: PUSH
51452: LD_INT 9
51454: PUSH
51455: EMPTY
51456: LIST
51457: IN
51458: IFFALSE 51479
// points := [ 5 , 70 , 20 ] ;
51460: LD_ADDR_VAR 0 9
51464: PUSH
51465: LD_INT 5
51467: PUSH
51468: LD_INT 70
51470: PUSH
51471: LD_INT 20
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51479: LD_VAR 0 6
51483: PPUSH
51484: CALL_OW 264
51488: PUSH
51489: LD_INT 10
51491: PUSH
51492: EMPTY
51493: LIST
51494: IN
51495: IFFALSE 51516
// points := [ 35 , 110 , 70 ] ;
51497: LD_ADDR_VAR 0 9
51501: PUSH
51502: LD_INT 35
51504: PUSH
51505: LD_INT 110
51507: PUSH
51508: LD_INT 70
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51516: LD_VAR 0 6
51520: PPUSH
51521: CALL_OW 265
51525: PUSH
51526: LD_INT 25
51528: EQUAL
51529: IFFALSE 51550
// points := [ 80 , 65 , 100 ] ;
51531: LD_ADDR_VAR 0 9
51535: PUSH
51536: LD_INT 80
51538: PUSH
51539: LD_INT 65
51541: PUSH
51542: LD_INT 100
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51550: LD_VAR 0 6
51554: PPUSH
51555: CALL_OW 263
51559: PUSH
51560: LD_INT 1
51562: EQUAL
51563: IFFALSE 51598
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51565: LD_ADDR_VAR 0 10
51569: PUSH
51570: LD_VAR 0 10
51574: PUSH
51575: LD_VAR 0 6
51579: PPUSH
51580: CALL_OW 311
51584: PPUSH
51585: LD_INT 3
51587: PPUSH
51588: CALL_OW 259
51592: PUSH
51593: LD_INT 4
51595: MUL
51596: MUL
51597: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51598: LD_VAR 0 6
51602: PPUSH
51603: CALL_OW 263
51607: PUSH
51608: LD_INT 2
51610: EQUAL
51611: IFFALSE 51662
// begin j := IsControledBy ( i ) ;
51613: LD_ADDR_VAR 0 7
51617: PUSH
51618: LD_VAR 0 6
51622: PPUSH
51623: CALL_OW 312
51627: ST_TO_ADDR
// if j then
51628: LD_VAR 0 7
51632: IFFALSE 51662
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51634: LD_ADDR_VAR 0 10
51638: PUSH
51639: LD_VAR 0 10
51643: PUSH
51644: LD_VAR 0 7
51648: PPUSH
51649: LD_INT 3
51651: PPUSH
51652: CALL_OW 259
51656: PUSH
51657: LD_INT 3
51659: MUL
51660: MUL
51661: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51662: LD_VAR 0 6
51666: PPUSH
51667: CALL_OW 264
51671: PUSH
51672: LD_INT 5
51674: PUSH
51675: LD_INT 6
51677: PUSH
51678: LD_INT 46
51680: PUSH
51681: LD_INT 44
51683: PUSH
51684: LD_INT 47
51686: PUSH
51687: LD_INT 45
51689: PUSH
51690: LD_INT 28
51692: PUSH
51693: LD_INT 7
51695: PUSH
51696: LD_INT 27
51698: PUSH
51699: LD_INT 29
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: IN
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: LD_INT 52
51722: PPUSH
51723: CALL_OW 321
51727: PUSH
51728: LD_INT 2
51730: EQUAL
51731: AND
51732: IFFALSE 51749
// bpoints := bpoints * 1.2 ;
51734: LD_ADDR_VAR 0 10
51738: PUSH
51739: LD_VAR 0 10
51743: PUSH
51744: LD_REAL  1.20000000000000E+0000
51747: MUL
51748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51749: LD_VAR 0 6
51753: PPUSH
51754: CALL_OW 264
51758: PUSH
51759: LD_INT 6
51761: PUSH
51762: LD_INT 46
51764: PUSH
51765: LD_INT 47
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: IN
51773: IFFALSE 51790
// bpoints := bpoints * 1.2 ;
51775: LD_ADDR_VAR 0 10
51779: PUSH
51780: LD_VAR 0 10
51784: PUSH
51785: LD_REAL  1.20000000000000E+0000
51788: MUL
51789: ST_TO_ADDR
// end ; unit_building :
51790: GO 51804
51792: LD_INT 3
51794: DOUBLE
51795: EQUAL
51796: IFTRUE 51800
51798: GO 51803
51800: POP
// ; end ;
51801: GO 51804
51803: POP
// for j = 1 to 3 do
51804: LD_ADDR_VAR 0 7
51808: PUSH
51809: DOUBLE
51810: LD_INT 1
51812: DEC
51813: ST_TO_ADDR
51814: LD_INT 3
51816: PUSH
51817: FOR_TO
51818: IFFALSE 51871
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51820: LD_ADDR_VAR 0 5
51824: PUSH
51825: LD_VAR 0 5
51829: PPUSH
51830: LD_VAR 0 7
51834: PPUSH
51835: LD_VAR 0 5
51839: PUSH
51840: LD_VAR 0 7
51844: ARRAY
51845: PUSH
51846: LD_VAR 0 9
51850: PUSH
51851: LD_VAR 0 7
51855: ARRAY
51856: PUSH
51857: LD_VAR 0 10
51861: MUL
51862: PLUS
51863: PPUSH
51864: CALL_OW 1
51868: ST_TO_ADDR
51869: GO 51817
51871: POP
51872: POP
// end ;
51873: GO 50350
51875: POP
51876: POP
// result := Replace ( result , 4 , tmp ) ;
51877: LD_ADDR_VAR 0 5
51881: PUSH
51882: LD_VAR 0 5
51886: PPUSH
51887: LD_INT 4
51889: PPUSH
51890: LD_VAR 0 8
51894: PPUSH
51895: CALL_OW 1
51899: ST_TO_ADDR
// end ;
51900: LD_VAR 0 5
51904: RET
// export function DangerAtRange ( unit , range ) ; begin
51905: LD_INT 0
51907: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51908: LD_ADDR_VAR 0 3
51912: PUSH
51913: LD_VAR 0 1
51917: PPUSH
51918: CALL_OW 255
51922: PPUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: CALL_OW 250
51932: PPUSH
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 251
51942: PPUSH
51943: LD_VAR 0 2
51947: PPUSH
51948: CALL 50202 0 4
51952: ST_TO_ADDR
// end ;
51953: LD_VAR 0 3
51957: RET
// export function DangerInArea ( side , area ) ; begin
51958: LD_INT 0
51960: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51961: LD_ADDR_VAR 0 3
51965: PUSH
51966: LD_VAR 0 2
51970: PPUSH
51971: LD_INT 81
51973: PUSH
51974: LD_VAR 0 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PPUSH
51983: CALL_OW 70
51987: ST_TO_ADDR
// end ;
51988: LD_VAR 0 3
51992: RET
// export function IsExtension ( b ) ; begin
51993: LD_INT 0
51995: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51996: LD_ADDR_VAR 0 2
52000: PUSH
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 23
52008: PUSH
52009: LD_INT 20
52011: PUSH
52012: LD_INT 22
52014: PUSH
52015: LD_INT 17
52017: PUSH
52018: LD_INT 24
52020: PUSH
52021: LD_INT 21
52023: PUSH
52024: LD_INT 19
52026: PUSH
52027: LD_INT 16
52029: PUSH
52030: LD_INT 25
52032: PUSH
52033: LD_INT 18
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: IN
52048: ST_TO_ADDR
// end ;
52049: LD_VAR 0 2
52053: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52054: LD_INT 0
52056: PPUSH
52057: PPUSH
52058: PPUSH
// result := [ ] ;
52059: LD_ADDR_VAR 0 4
52063: PUSH
52064: EMPTY
52065: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52066: LD_ADDR_VAR 0 5
52070: PUSH
52071: LD_VAR 0 2
52075: PPUSH
52076: LD_INT 21
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PPUSH
52086: CALL_OW 70
52090: ST_TO_ADDR
// if not tmp then
52091: LD_VAR 0 5
52095: NOT
52096: IFFALSE 52100
// exit ;
52098: GO 52164
// if checkLink then
52100: LD_VAR 0 3
52104: IFFALSE 52154
// begin for i in tmp do
52106: LD_ADDR_VAR 0 6
52110: PUSH
52111: LD_VAR 0 5
52115: PUSH
52116: FOR_IN
52117: IFFALSE 52152
// if GetBase ( i ) <> base then
52119: LD_VAR 0 6
52123: PPUSH
52124: CALL_OW 274
52128: PUSH
52129: LD_VAR 0 1
52133: NONEQUAL
52134: IFFALSE 52150
// ComLinkToBase ( base , i ) ;
52136: LD_VAR 0 1
52140: PPUSH
52141: LD_VAR 0 6
52145: PPUSH
52146: CALL_OW 169
52150: GO 52116
52152: POP
52153: POP
// end ; result := tmp ;
52154: LD_ADDR_VAR 0 4
52158: PUSH
52159: LD_VAR 0 5
52163: ST_TO_ADDR
// end ;
52164: LD_VAR 0 4
52168: RET
// export function ComComplete ( units , b ) ; var i ; begin
52169: LD_INT 0
52171: PPUSH
52172: PPUSH
// if not units then
52173: LD_VAR 0 1
52177: NOT
52178: IFFALSE 52182
// exit ;
52180: GO 52272
// for i in units do
52182: LD_ADDR_VAR 0 4
52186: PUSH
52187: LD_VAR 0 1
52191: PUSH
52192: FOR_IN
52193: IFFALSE 52270
// if BuildingStatus ( b ) = bs_build then
52195: LD_VAR 0 2
52199: PPUSH
52200: CALL_OW 461
52204: PUSH
52205: LD_INT 1
52207: EQUAL
52208: IFFALSE 52268
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52210: LD_VAR 0 4
52214: PPUSH
52215: LD_STRING h
52217: PUSH
52218: LD_VAR 0 2
52222: PPUSH
52223: CALL_OW 250
52227: PUSH
52228: LD_VAR 0 2
52232: PPUSH
52233: CALL_OW 251
52237: PUSH
52238: LD_VAR 0 2
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: PPUSH
52264: CALL_OW 446
52268: GO 52192
52270: POP
52271: POP
// end ;
52272: LD_VAR 0 3
52276: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52277: LD_INT 0
52279: PPUSH
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
52284: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
52285: LD_VAR 0 1
52289: NOT
52290: PUSH
52291: LD_VAR 0 1
52295: PPUSH
52296: CALL_OW 263
52300: PUSH
52301: LD_INT 2
52303: NONEQUAL
52304: OR
52305: IFFALSE 52309
// exit ;
52307: GO 52625
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52309: LD_ADDR_VAR 0 6
52313: PUSH
52314: LD_INT 22
52316: PUSH
52317: LD_VAR 0 1
52321: PPUSH
52322: CALL_OW 255
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 30
52336: PUSH
52337: LD_INT 36
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 34
52346: PUSH
52347: LD_INT 31
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: LIST
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PPUSH
52363: CALL_OW 69
52367: ST_TO_ADDR
// if not tmp then
52368: LD_VAR 0 6
52372: NOT
52373: IFFALSE 52377
// exit ;
52375: GO 52625
// result := [ ] ;
52377: LD_ADDR_VAR 0 2
52381: PUSH
52382: EMPTY
52383: ST_TO_ADDR
// for i in tmp do
52384: LD_ADDR_VAR 0 3
52388: PUSH
52389: LD_VAR 0 6
52393: PUSH
52394: FOR_IN
52395: IFFALSE 52466
// begin t := UnitsInside ( i ) ;
52397: LD_ADDR_VAR 0 4
52401: PUSH
52402: LD_VAR 0 3
52406: PPUSH
52407: CALL_OW 313
52411: ST_TO_ADDR
// if t then
52412: LD_VAR 0 4
52416: IFFALSE 52464
// for j in t do
52418: LD_ADDR_VAR 0 7
52422: PUSH
52423: LD_VAR 0 4
52427: PUSH
52428: FOR_IN
52429: IFFALSE 52462
// result := Replace ( result , result + 1 , j ) ;
52431: LD_ADDR_VAR 0 2
52435: PUSH
52436: LD_VAR 0 2
52440: PPUSH
52441: LD_VAR 0 2
52445: PUSH
52446: LD_INT 1
52448: PLUS
52449: PPUSH
52450: LD_VAR 0 7
52454: PPUSH
52455: CALL_OW 1
52459: ST_TO_ADDR
52460: GO 52428
52462: POP
52463: POP
// end ;
52464: GO 52394
52466: POP
52467: POP
// if not result then
52468: LD_VAR 0 2
52472: NOT
52473: IFFALSE 52477
// exit ;
52475: GO 52625
// mech := result [ 1 ] ;
52477: LD_ADDR_VAR 0 5
52481: PUSH
52482: LD_VAR 0 2
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: ST_TO_ADDR
// if result > 1 then
52491: LD_VAR 0 2
52495: PUSH
52496: LD_INT 1
52498: GREATER
52499: IFFALSE 52611
// begin for i = 2 to result do
52501: LD_ADDR_VAR 0 3
52505: PUSH
52506: DOUBLE
52507: LD_INT 2
52509: DEC
52510: ST_TO_ADDR
52511: LD_VAR 0 2
52515: PUSH
52516: FOR_TO
52517: IFFALSE 52609
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52519: LD_ADDR_VAR 0 4
52523: PUSH
52524: LD_VAR 0 2
52528: PUSH
52529: LD_VAR 0 3
52533: ARRAY
52534: PPUSH
52535: LD_INT 3
52537: PPUSH
52538: CALL_OW 259
52542: PUSH
52543: LD_VAR 0 2
52547: PUSH
52548: LD_VAR 0 3
52552: ARRAY
52553: PPUSH
52554: CALL_OW 432
52558: MINUS
52559: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52560: LD_VAR 0 4
52564: PUSH
52565: LD_VAR 0 5
52569: PPUSH
52570: LD_INT 3
52572: PPUSH
52573: CALL_OW 259
52577: PUSH
52578: LD_VAR 0 5
52582: PPUSH
52583: CALL_OW 432
52587: MINUS
52588: GREATEREQUAL
52589: IFFALSE 52607
// mech := result [ i ] ;
52591: LD_ADDR_VAR 0 5
52595: PUSH
52596: LD_VAR 0 2
52600: PUSH
52601: LD_VAR 0 3
52605: ARRAY
52606: ST_TO_ADDR
// end ;
52607: GO 52516
52609: POP
52610: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52611: LD_VAR 0 1
52615: PPUSH
52616: LD_VAR 0 5
52620: PPUSH
52621: CALL_OW 135
// end ;
52625: LD_VAR 0 2
52629: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52630: LD_INT 0
52632: PPUSH
52633: PPUSH
52634: PPUSH
52635: PPUSH
52636: PPUSH
52637: PPUSH
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
52644: PPUSH
// result := [ ] ;
52645: LD_ADDR_VAR 0 7
52649: PUSH
52650: EMPTY
52651: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52652: LD_VAR 0 1
52656: PPUSH
52657: CALL_OW 266
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: IN
52672: NOT
52673: IFFALSE 52677
// exit ;
52675: GO 54311
// if name then
52677: LD_VAR 0 3
52681: IFFALSE 52697
// SetBName ( base_dep , name ) ;
52683: LD_VAR 0 1
52687: PPUSH
52688: LD_VAR 0 3
52692: PPUSH
52693: CALL_OW 500
// base := GetBase ( base_dep ) ;
52697: LD_ADDR_VAR 0 15
52701: PUSH
52702: LD_VAR 0 1
52706: PPUSH
52707: CALL_OW 274
52711: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52712: LD_ADDR_VAR 0 16
52716: PUSH
52717: LD_VAR 0 1
52721: PPUSH
52722: CALL_OW 255
52726: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52727: LD_ADDR_VAR 0 17
52731: PUSH
52732: LD_VAR 0 1
52736: PPUSH
52737: CALL_OW 248
52741: ST_TO_ADDR
// if sources then
52742: LD_VAR 0 5
52746: IFFALSE 52793
// for i = 1 to 3 do
52748: LD_ADDR_VAR 0 8
52752: PUSH
52753: DOUBLE
52754: LD_INT 1
52756: DEC
52757: ST_TO_ADDR
52758: LD_INT 3
52760: PUSH
52761: FOR_TO
52762: IFFALSE 52791
// AddResourceType ( base , i , sources [ i ] ) ;
52764: LD_VAR 0 15
52768: PPUSH
52769: LD_VAR 0 8
52773: PPUSH
52774: LD_VAR 0 5
52778: PUSH
52779: LD_VAR 0 8
52783: ARRAY
52784: PPUSH
52785: CALL_OW 276
52789: GO 52761
52791: POP
52792: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52793: LD_ADDR_VAR 0 18
52797: PUSH
52798: LD_VAR 0 15
52802: PPUSH
52803: LD_VAR 0 2
52807: PPUSH
52808: LD_INT 1
52810: PPUSH
52811: CALL 52054 0 3
52815: ST_TO_ADDR
// InitHc ;
52816: CALL_OW 19
// InitUc ;
52820: CALL_OW 18
// uc_side := side ;
52824: LD_ADDR_OWVAR 20
52828: PUSH
52829: LD_VAR 0 16
52833: ST_TO_ADDR
// uc_nation := nation ;
52834: LD_ADDR_OWVAR 21
52838: PUSH
52839: LD_VAR 0 17
52843: ST_TO_ADDR
// if buildings then
52844: LD_VAR 0 18
52848: IFFALSE 54170
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52850: LD_ADDR_VAR 0 19
52854: PUSH
52855: LD_VAR 0 18
52859: PPUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 30
52865: PUSH
52866: LD_INT 29
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 30
52875: PUSH
52876: LD_INT 30
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: PPUSH
52888: CALL_OW 72
52892: ST_TO_ADDR
// if tmp then
52893: LD_VAR 0 19
52897: IFFALSE 52945
// for i in tmp do
52899: LD_ADDR_VAR 0 8
52903: PUSH
52904: LD_VAR 0 19
52908: PUSH
52909: FOR_IN
52910: IFFALSE 52943
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52912: LD_VAR 0 8
52916: PPUSH
52917: CALL_OW 250
52921: PPUSH
52922: LD_VAR 0 8
52926: PPUSH
52927: CALL_OW 251
52931: PPUSH
52932: LD_VAR 0 16
52936: PPUSH
52937: CALL_OW 441
52941: GO 52909
52943: POP
52944: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52945: LD_VAR 0 18
52949: PPUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 30
52955: PUSH
52956: LD_INT 32
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 30
52965: PUSH
52966: LD_INT 33
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: PPUSH
52978: CALL_OW 72
52982: IFFALSE 53070
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52984: LD_ADDR_VAR 0 8
52988: PUSH
52989: LD_VAR 0 18
52993: PPUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 30
52999: PUSH
53000: LD_INT 32
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 30
53009: PUSH
53010: LD_INT 33
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: PPUSH
53022: CALL_OW 72
53026: PUSH
53027: FOR_IN
53028: IFFALSE 53068
// begin if not GetBWeapon ( i ) then
53030: LD_VAR 0 8
53034: PPUSH
53035: CALL_OW 269
53039: NOT
53040: IFFALSE 53066
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53042: LD_VAR 0 8
53046: PPUSH
53047: LD_VAR 0 8
53051: PPUSH
53052: LD_VAR 0 2
53056: PPUSH
53057: CALL 54316 0 2
53061: PPUSH
53062: CALL_OW 431
// end ;
53066: GO 53027
53068: POP
53069: POP
// end ; for i = 1 to personel do
53070: LD_ADDR_VAR 0 8
53074: PUSH
53075: DOUBLE
53076: LD_INT 1
53078: DEC
53079: ST_TO_ADDR
53080: LD_VAR 0 6
53084: PUSH
53085: FOR_TO
53086: IFFALSE 54150
// begin if i > 4 then
53088: LD_VAR 0 8
53092: PUSH
53093: LD_INT 4
53095: GREATER
53096: IFFALSE 53100
// break ;
53098: GO 54150
// case i of 1 :
53100: LD_VAR 0 8
53104: PUSH
53105: LD_INT 1
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53113
53111: GO 53193
53113: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53114: LD_ADDR_VAR 0 12
53118: PUSH
53119: LD_VAR 0 18
53123: PPUSH
53124: LD_INT 22
53126: PUSH
53127: LD_VAR 0 16
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 58
53138: PUSH
53139: EMPTY
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: LD_INT 30
53147: PUSH
53148: LD_INT 32
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 30
53157: PUSH
53158: LD_INT 4
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 30
53167: PUSH
53168: LD_INT 5
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: PPUSH
53186: CALL_OW 72
53190: ST_TO_ADDR
53191: GO 53415
53193: LD_INT 2
53195: DOUBLE
53196: EQUAL
53197: IFTRUE 53201
53199: GO 53263
53201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53202: LD_ADDR_VAR 0 12
53206: PUSH
53207: LD_VAR 0 18
53211: PPUSH
53212: LD_INT 22
53214: PUSH
53215: LD_VAR 0 16
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 30
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 30
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PPUSH
53256: CALL_OW 72
53260: ST_TO_ADDR
53261: GO 53415
53263: LD_INT 3
53265: DOUBLE
53266: EQUAL
53267: IFTRUE 53271
53269: GO 53333
53271: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53272: LD_ADDR_VAR 0 12
53276: PUSH
53277: LD_VAR 0 18
53281: PPUSH
53282: LD_INT 22
53284: PUSH
53285: LD_VAR 0 16
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 30
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 30
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PPUSH
53326: CALL_OW 72
53330: ST_TO_ADDR
53331: GO 53415
53333: LD_INT 4
53335: DOUBLE
53336: EQUAL
53337: IFTRUE 53341
53339: GO 53414
53341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53342: LD_ADDR_VAR 0 12
53346: PUSH
53347: LD_VAR 0 18
53351: PPUSH
53352: LD_INT 22
53354: PUSH
53355: LD_VAR 0 16
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 30
53369: PUSH
53370: LD_INT 6
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 30
53379: PUSH
53380: LD_INT 7
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 30
53389: PUSH
53390: LD_INT 8
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PPUSH
53407: CALL_OW 72
53411: ST_TO_ADDR
53412: GO 53415
53414: POP
// if i = 1 then
53415: LD_VAR 0 8
53419: PUSH
53420: LD_INT 1
53422: EQUAL
53423: IFFALSE 53534
// begin tmp := [ ] ;
53425: LD_ADDR_VAR 0 19
53429: PUSH
53430: EMPTY
53431: ST_TO_ADDR
// for j in f do
53432: LD_ADDR_VAR 0 9
53436: PUSH
53437: LD_VAR 0 12
53441: PUSH
53442: FOR_IN
53443: IFFALSE 53516
// if GetBType ( j ) = b_bunker then
53445: LD_VAR 0 9
53449: PPUSH
53450: CALL_OW 266
53454: PUSH
53455: LD_INT 32
53457: EQUAL
53458: IFFALSE 53485
// tmp := Insert ( tmp , 1 , j ) else
53460: LD_ADDR_VAR 0 19
53464: PUSH
53465: LD_VAR 0 19
53469: PPUSH
53470: LD_INT 1
53472: PPUSH
53473: LD_VAR 0 9
53477: PPUSH
53478: CALL_OW 2
53482: ST_TO_ADDR
53483: GO 53514
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53485: LD_ADDR_VAR 0 19
53489: PUSH
53490: LD_VAR 0 19
53494: PPUSH
53495: LD_VAR 0 19
53499: PUSH
53500: LD_INT 1
53502: PLUS
53503: PPUSH
53504: LD_VAR 0 9
53508: PPUSH
53509: CALL_OW 2
53513: ST_TO_ADDR
53514: GO 53442
53516: POP
53517: POP
// if tmp then
53518: LD_VAR 0 19
53522: IFFALSE 53534
// f := tmp ;
53524: LD_ADDR_VAR 0 12
53528: PUSH
53529: LD_VAR 0 19
53533: ST_TO_ADDR
// end ; x := personel [ i ] ;
53534: LD_ADDR_VAR 0 13
53538: PUSH
53539: LD_VAR 0 6
53543: PUSH
53544: LD_VAR 0 8
53548: ARRAY
53549: ST_TO_ADDR
// if x = - 1 then
53550: LD_VAR 0 13
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: EQUAL
53559: IFFALSE 53768
// begin for j in f do
53561: LD_ADDR_VAR 0 9
53565: PUSH
53566: LD_VAR 0 12
53570: PUSH
53571: FOR_IN
53572: IFFALSE 53764
// repeat InitHc ;
53574: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53578: LD_VAR 0 9
53582: PPUSH
53583: CALL_OW 266
53587: PUSH
53588: LD_INT 5
53590: EQUAL
53591: IFFALSE 53661
// begin if UnitsInside ( j ) < 3 then
53593: LD_VAR 0 9
53597: PPUSH
53598: CALL_OW 313
53602: PUSH
53603: LD_INT 3
53605: LESS
53606: IFFALSE 53642
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53608: LD_INT 0
53610: PPUSH
53611: LD_INT 5
53613: PUSH
53614: LD_INT 8
53616: PUSH
53617: LD_INT 9
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: PUSH
53625: LD_VAR 0 17
53629: ARRAY
53630: PPUSH
53631: LD_VAR 0 4
53635: PPUSH
53636: CALL_OW 380
53640: GO 53659
// PrepareHuman ( false , i , skill ) ;
53642: LD_INT 0
53644: PPUSH
53645: LD_VAR 0 8
53649: PPUSH
53650: LD_VAR 0 4
53654: PPUSH
53655: CALL_OW 380
// end else
53659: GO 53678
// PrepareHuman ( false , i , skill ) ;
53661: LD_INT 0
53663: PPUSH
53664: LD_VAR 0 8
53668: PPUSH
53669: LD_VAR 0 4
53673: PPUSH
53674: CALL_OW 380
// un := CreateHuman ;
53678: LD_ADDR_VAR 0 14
53682: PUSH
53683: CALL_OW 44
53687: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53688: LD_ADDR_VAR 0 7
53692: PUSH
53693: LD_VAR 0 7
53697: PPUSH
53698: LD_INT 1
53700: PPUSH
53701: LD_VAR 0 14
53705: PPUSH
53706: CALL_OW 2
53710: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53711: LD_VAR 0 14
53715: PPUSH
53716: LD_VAR 0 9
53720: PPUSH
53721: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53725: LD_VAR 0 9
53729: PPUSH
53730: CALL_OW 313
53734: PUSH
53735: LD_INT 6
53737: EQUAL
53738: PUSH
53739: LD_VAR 0 9
53743: PPUSH
53744: CALL_OW 266
53748: PUSH
53749: LD_INT 32
53751: PUSH
53752: LD_INT 31
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: IN
53759: OR
53760: IFFALSE 53574
53762: GO 53571
53764: POP
53765: POP
// end else
53766: GO 54148
// for j = 1 to x do
53768: LD_ADDR_VAR 0 9
53772: PUSH
53773: DOUBLE
53774: LD_INT 1
53776: DEC
53777: ST_TO_ADDR
53778: LD_VAR 0 13
53782: PUSH
53783: FOR_TO
53784: IFFALSE 54146
// begin InitHc ;
53786: CALL_OW 19
// if not f then
53790: LD_VAR 0 12
53794: NOT
53795: IFFALSE 53884
// begin PrepareHuman ( false , i , skill ) ;
53797: LD_INT 0
53799: PPUSH
53800: LD_VAR 0 8
53804: PPUSH
53805: LD_VAR 0 4
53809: PPUSH
53810: CALL_OW 380
// un := CreateHuman ;
53814: LD_ADDR_VAR 0 14
53818: PUSH
53819: CALL_OW 44
53823: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53824: LD_ADDR_VAR 0 7
53828: PUSH
53829: LD_VAR 0 7
53833: PPUSH
53834: LD_INT 1
53836: PPUSH
53837: LD_VAR 0 14
53841: PPUSH
53842: CALL_OW 2
53846: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53847: LD_VAR 0 14
53851: PPUSH
53852: LD_VAR 0 1
53856: PPUSH
53857: CALL_OW 250
53861: PPUSH
53862: LD_VAR 0 1
53866: PPUSH
53867: CALL_OW 251
53871: PPUSH
53872: LD_INT 10
53874: PPUSH
53875: LD_INT 0
53877: PPUSH
53878: CALL_OW 50
// continue ;
53882: GO 53783
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53884: LD_VAR 0 12
53888: PUSH
53889: LD_INT 1
53891: ARRAY
53892: PPUSH
53893: CALL_OW 313
53897: PUSH
53898: LD_VAR 0 12
53902: PUSH
53903: LD_INT 1
53905: ARRAY
53906: PPUSH
53907: CALL_OW 266
53911: PUSH
53912: LD_INT 32
53914: PUSH
53915: LD_INT 31
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: IN
53922: AND
53923: PUSH
53924: LD_VAR 0 12
53928: PUSH
53929: LD_INT 1
53931: ARRAY
53932: PPUSH
53933: CALL_OW 313
53937: PUSH
53938: LD_INT 6
53940: EQUAL
53941: OR
53942: IFFALSE 53962
// f := Delete ( f , 1 ) ;
53944: LD_ADDR_VAR 0 12
53948: PUSH
53949: LD_VAR 0 12
53953: PPUSH
53954: LD_INT 1
53956: PPUSH
53957: CALL_OW 3
53961: ST_TO_ADDR
// if not f then
53962: LD_VAR 0 12
53966: NOT
53967: IFFALSE 53985
// begin x := x + 2 ;
53969: LD_ADDR_VAR 0 13
53973: PUSH
53974: LD_VAR 0 13
53978: PUSH
53979: LD_INT 2
53981: PLUS
53982: ST_TO_ADDR
// continue ;
53983: GO 53783
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53985: LD_VAR 0 12
53989: PUSH
53990: LD_INT 1
53992: ARRAY
53993: PPUSH
53994: CALL_OW 266
53998: PUSH
53999: LD_INT 5
54001: EQUAL
54002: IFFALSE 54076
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54004: LD_VAR 0 12
54008: PUSH
54009: LD_INT 1
54011: ARRAY
54012: PPUSH
54013: CALL_OW 313
54017: PUSH
54018: LD_INT 3
54020: LESS
54021: IFFALSE 54057
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54023: LD_INT 0
54025: PPUSH
54026: LD_INT 5
54028: PUSH
54029: LD_INT 8
54031: PUSH
54032: LD_INT 9
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: PUSH
54040: LD_VAR 0 17
54044: ARRAY
54045: PPUSH
54046: LD_VAR 0 4
54050: PPUSH
54051: CALL_OW 380
54055: GO 54074
// PrepareHuman ( false , i , skill ) ;
54057: LD_INT 0
54059: PPUSH
54060: LD_VAR 0 8
54064: PPUSH
54065: LD_VAR 0 4
54069: PPUSH
54070: CALL_OW 380
// end else
54074: GO 54093
// PrepareHuman ( false , i , skill ) ;
54076: LD_INT 0
54078: PPUSH
54079: LD_VAR 0 8
54083: PPUSH
54084: LD_VAR 0 4
54088: PPUSH
54089: CALL_OW 380
// un := CreateHuman ;
54093: LD_ADDR_VAR 0 14
54097: PUSH
54098: CALL_OW 44
54102: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54103: LD_ADDR_VAR 0 7
54107: PUSH
54108: LD_VAR 0 7
54112: PPUSH
54113: LD_INT 1
54115: PPUSH
54116: LD_VAR 0 14
54120: PPUSH
54121: CALL_OW 2
54125: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54126: LD_VAR 0 14
54130: PPUSH
54131: LD_VAR 0 12
54135: PUSH
54136: LD_INT 1
54138: ARRAY
54139: PPUSH
54140: CALL_OW 52
// end ;
54144: GO 53783
54146: POP
54147: POP
// end ;
54148: GO 53085
54150: POP
54151: POP
// result := result ^ buildings ;
54152: LD_ADDR_VAR 0 7
54156: PUSH
54157: LD_VAR 0 7
54161: PUSH
54162: LD_VAR 0 18
54166: ADD
54167: ST_TO_ADDR
// end else
54168: GO 54311
// begin for i = 1 to personel do
54170: LD_ADDR_VAR 0 8
54174: PUSH
54175: DOUBLE
54176: LD_INT 1
54178: DEC
54179: ST_TO_ADDR
54180: LD_VAR 0 6
54184: PUSH
54185: FOR_TO
54186: IFFALSE 54309
// begin if i > 4 then
54188: LD_VAR 0 8
54192: PUSH
54193: LD_INT 4
54195: GREATER
54196: IFFALSE 54200
// break ;
54198: GO 54309
// x := personel [ i ] ;
54200: LD_ADDR_VAR 0 13
54204: PUSH
54205: LD_VAR 0 6
54209: PUSH
54210: LD_VAR 0 8
54214: ARRAY
54215: ST_TO_ADDR
// if x = - 1 then
54216: LD_VAR 0 13
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: EQUAL
54225: IFFALSE 54229
// continue ;
54227: GO 54185
// PrepareHuman ( false , i , skill ) ;
54229: LD_INT 0
54231: PPUSH
54232: LD_VAR 0 8
54236: PPUSH
54237: LD_VAR 0 4
54241: PPUSH
54242: CALL_OW 380
// un := CreateHuman ;
54246: LD_ADDR_VAR 0 14
54250: PUSH
54251: CALL_OW 44
54255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54256: LD_VAR 0 14
54260: PPUSH
54261: LD_VAR 0 1
54265: PPUSH
54266: CALL_OW 250
54270: PPUSH
54271: LD_VAR 0 1
54275: PPUSH
54276: CALL_OW 251
54280: PPUSH
54281: LD_INT 10
54283: PPUSH
54284: LD_INT 0
54286: PPUSH
54287: CALL_OW 50
// result := result ^ un ;
54291: LD_ADDR_VAR 0 7
54295: PUSH
54296: LD_VAR 0 7
54300: PUSH
54301: LD_VAR 0 14
54305: ADD
54306: ST_TO_ADDR
// end ;
54307: GO 54185
54309: POP
54310: POP
// end ; end ;
54311: LD_VAR 0 7
54315: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54316: LD_INT 0
54318: PPUSH
54319: PPUSH
54320: PPUSH
54321: PPUSH
54322: PPUSH
54323: PPUSH
54324: PPUSH
54325: PPUSH
54326: PPUSH
54327: PPUSH
54328: PPUSH
54329: PPUSH
54330: PPUSH
54331: PPUSH
54332: PPUSH
54333: PPUSH
// result := false ;
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_INT 0
54341: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54342: LD_VAR 0 1
54346: NOT
54347: PUSH
54348: LD_VAR 0 1
54352: PPUSH
54353: CALL_OW 266
54357: PUSH
54358: LD_INT 32
54360: PUSH
54361: LD_INT 33
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: IN
54368: NOT
54369: OR
54370: IFFALSE 54374
// exit ;
54372: GO 55483
// nat := GetNation ( tower ) ;
54374: LD_ADDR_VAR 0 12
54378: PUSH
54379: LD_VAR 0 1
54383: PPUSH
54384: CALL_OW 248
54388: ST_TO_ADDR
// side := GetSide ( tower ) ;
54389: LD_ADDR_VAR 0 16
54393: PUSH
54394: LD_VAR 0 1
54398: PPUSH
54399: CALL_OW 255
54403: ST_TO_ADDR
// x := GetX ( tower ) ;
54404: LD_ADDR_VAR 0 10
54408: PUSH
54409: LD_VAR 0 1
54413: PPUSH
54414: CALL_OW 250
54418: ST_TO_ADDR
// y := GetY ( tower ) ;
54419: LD_ADDR_VAR 0 11
54423: PUSH
54424: LD_VAR 0 1
54428: PPUSH
54429: CALL_OW 251
54433: ST_TO_ADDR
// if not x or not y then
54434: LD_VAR 0 10
54438: NOT
54439: PUSH
54440: LD_VAR 0 11
54444: NOT
54445: OR
54446: IFFALSE 54450
// exit ;
54448: GO 55483
// weapon := 0 ;
54450: LD_ADDR_VAR 0 18
54454: PUSH
54455: LD_INT 0
54457: ST_TO_ADDR
// fac_list := [ ] ;
54458: LD_ADDR_VAR 0 17
54462: PUSH
54463: EMPTY
54464: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54465: LD_ADDR_VAR 0 6
54469: PUSH
54470: LD_VAR 0 1
54474: PPUSH
54475: CALL_OW 274
54479: PPUSH
54480: LD_VAR 0 2
54484: PPUSH
54485: LD_INT 0
54487: PPUSH
54488: CALL 52054 0 3
54492: PPUSH
54493: LD_INT 30
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PPUSH
54503: CALL_OW 72
54507: ST_TO_ADDR
// if not factories then
54508: LD_VAR 0 6
54512: NOT
54513: IFFALSE 54517
// exit ;
54515: GO 55483
// for i in factories do
54517: LD_ADDR_VAR 0 8
54521: PUSH
54522: LD_VAR 0 6
54526: PUSH
54527: FOR_IN
54528: IFFALSE 54553
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54530: LD_ADDR_VAR 0 17
54534: PUSH
54535: LD_VAR 0 17
54539: PUSH
54540: LD_VAR 0 8
54544: PPUSH
54545: CALL_OW 478
54549: UNION
54550: ST_TO_ADDR
54551: GO 54527
54553: POP
54554: POP
// if not fac_list then
54555: LD_VAR 0 17
54559: NOT
54560: IFFALSE 54564
// exit ;
54562: GO 55483
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54564: LD_ADDR_VAR 0 5
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: LD_INT 5
54574: PUSH
54575: LD_INT 9
54577: PUSH
54578: LD_INT 10
54580: PUSH
54581: LD_INT 6
54583: PUSH
54584: LD_INT 7
54586: PUSH
54587: LD_INT 11
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 27
54601: PUSH
54602: LD_INT 28
54604: PUSH
54605: LD_INT 26
54607: PUSH
54608: LD_INT 30
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 43
54619: PUSH
54620: LD_INT 44
54622: PUSH
54623: LD_INT 46
54625: PUSH
54626: LD_INT 45
54628: PUSH
54629: LD_INT 47
54631: PUSH
54632: LD_INT 49
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: PUSH
54648: LD_VAR 0 12
54652: ARRAY
54653: ST_TO_ADDR
// list := list isect fac_list ;
54654: LD_ADDR_VAR 0 5
54658: PUSH
54659: LD_VAR 0 5
54663: PUSH
54664: LD_VAR 0 17
54668: ISECT
54669: ST_TO_ADDR
// if not list then
54670: LD_VAR 0 5
54674: NOT
54675: IFFALSE 54679
// exit ;
54677: GO 55483
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54679: LD_VAR 0 12
54683: PUSH
54684: LD_INT 3
54686: EQUAL
54687: PUSH
54688: LD_INT 49
54690: PUSH
54691: LD_VAR 0 5
54695: IN
54696: AND
54697: PUSH
54698: LD_INT 31
54700: PPUSH
54701: LD_VAR 0 16
54705: PPUSH
54706: CALL_OW 321
54710: PUSH
54711: LD_INT 2
54713: EQUAL
54714: AND
54715: IFFALSE 54775
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54717: LD_INT 22
54719: PUSH
54720: LD_VAR 0 16
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 35
54731: PUSH
54732: LD_INT 49
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 91
54741: PUSH
54742: LD_VAR 0 1
54746: PUSH
54747: LD_INT 10
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: PPUSH
54760: CALL_OW 69
54764: NOT
54765: IFFALSE 54775
// weapon := ru_time_lapser ;
54767: LD_ADDR_VAR 0 18
54771: PUSH
54772: LD_INT 49
54774: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54775: LD_VAR 0 12
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: IN
54790: PUSH
54791: LD_INT 11
54793: PUSH
54794: LD_VAR 0 5
54798: IN
54799: PUSH
54800: LD_INT 30
54802: PUSH
54803: LD_VAR 0 5
54807: IN
54808: OR
54809: AND
54810: PUSH
54811: LD_INT 6
54813: PPUSH
54814: LD_VAR 0 16
54818: PPUSH
54819: CALL_OW 321
54823: PUSH
54824: LD_INT 2
54826: EQUAL
54827: AND
54828: IFFALSE 54993
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54830: LD_INT 22
54832: PUSH
54833: LD_VAR 0 16
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 35
54847: PUSH
54848: LD_INT 11
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 35
54857: PUSH
54858: LD_INT 30
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 91
54872: PUSH
54873: LD_VAR 0 1
54877: PUSH
54878: LD_INT 18
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: PPUSH
54891: CALL_OW 69
54895: NOT
54896: PUSH
54897: LD_INT 22
54899: PUSH
54900: LD_VAR 0 16
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 30
54914: PUSH
54915: LD_INT 32
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 30
54924: PUSH
54925: LD_INT 33
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 91
54939: PUSH
54940: LD_VAR 0 1
54944: PUSH
54945: LD_INT 12
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: PUSH
54958: EMPTY
54959: LIST
54960: PPUSH
54961: CALL_OW 69
54965: PUSH
54966: LD_INT 2
54968: GREATER
54969: AND
54970: IFFALSE 54993
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54972: LD_ADDR_VAR 0 18
54976: PUSH
54977: LD_INT 11
54979: PUSH
54980: LD_INT 30
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_VAR 0 12
54991: ARRAY
54992: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54993: LD_VAR 0 18
54997: NOT
54998: PUSH
54999: LD_INT 40
55001: PPUSH
55002: LD_VAR 0 16
55006: PPUSH
55007: CALL_OW 321
55011: PUSH
55012: LD_INT 2
55014: EQUAL
55015: AND
55016: PUSH
55017: LD_INT 7
55019: PUSH
55020: LD_VAR 0 5
55024: IN
55025: PUSH
55026: LD_INT 28
55028: PUSH
55029: LD_VAR 0 5
55033: IN
55034: OR
55035: PUSH
55036: LD_INT 45
55038: PUSH
55039: LD_VAR 0 5
55043: IN
55044: OR
55045: AND
55046: IFFALSE 55300
// begin hex := GetHexInfo ( x , y ) ;
55048: LD_ADDR_VAR 0 4
55052: PUSH
55053: LD_VAR 0 10
55057: PPUSH
55058: LD_VAR 0 11
55062: PPUSH
55063: CALL_OW 546
55067: ST_TO_ADDR
// if hex [ 1 ] then
55068: LD_VAR 0 4
55072: PUSH
55073: LD_INT 1
55075: ARRAY
55076: IFFALSE 55080
// exit ;
55078: GO 55483
// height := hex [ 2 ] ;
55080: LD_ADDR_VAR 0 15
55084: PUSH
55085: LD_VAR 0 4
55089: PUSH
55090: LD_INT 2
55092: ARRAY
55093: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55094: LD_ADDR_VAR 0 14
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: LD_INT 5
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// for i in tmp do
55117: LD_ADDR_VAR 0 8
55121: PUSH
55122: LD_VAR 0 14
55126: PUSH
55127: FOR_IN
55128: IFFALSE 55298
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55130: LD_ADDR_VAR 0 9
55134: PUSH
55135: LD_VAR 0 10
55139: PPUSH
55140: LD_VAR 0 8
55144: PPUSH
55145: LD_INT 5
55147: PPUSH
55148: CALL_OW 272
55152: PUSH
55153: LD_VAR 0 11
55157: PPUSH
55158: LD_VAR 0 8
55162: PPUSH
55163: LD_INT 5
55165: PPUSH
55166: CALL_OW 273
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55175: LD_VAR 0 9
55179: PUSH
55180: LD_INT 1
55182: ARRAY
55183: PPUSH
55184: LD_VAR 0 9
55188: PUSH
55189: LD_INT 2
55191: ARRAY
55192: PPUSH
55193: CALL_OW 488
55197: IFFALSE 55296
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55199: LD_ADDR_VAR 0 4
55203: PUSH
55204: LD_VAR 0 9
55208: PUSH
55209: LD_INT 1
55211: ARRAY
55212: PPUSH
55213: LD_VAR 0 9
55217: PUSH
55218: LD_INT 2
55220: ARRAY
55221: PPUSH
55222: CALL_OW 546
55226: ST_TO_ADDR
// if hex [ 1 ] then
55227: LD_VAR 0 4
55231: PUSH
55232: LD_INT 1
55234: ARRAY
55235: IFFALSE 55239
// continue ;
55237: GO 55127
// h := hex [ 2 ] ;
55239: LD_ADDR_VAR 0 13
55243: PUSH
55244: LD_VAR 0 4
55248: PUSH
55249: LD_INT 2
55251: ARRAY
55252: ST_TO_ADDR
// if h + 7 < height then
55253: LD_VAR 0 13
55257: PUSH
55258: LD_INT 7
55260: PLUS
55261: PUSH
55262: LD_VAR 0 15
55266: LESS
55267: IFFALSE 55296
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55269: LD_ADDR_VAR 0 18
55273: PUSH
55274: LD_INT 7
55276: PUSH
55277: LD_INT 28
55279: PUSH
55280: LD_INT 45
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: PUSH
55288: LD_VAR 0 12
55292: ARRAY
55293: ST_TO_ADDR
// break ;
55294: GO 55298
// end ; end ; end ;
55296: GO 55127
55298: POP
55299: POP
// end ; if not weapon then
55300: LD_VAR 0 18
55304: NOT
55305: IFFALSE 55365
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55307: LD_ADDR_VAR 0 5
55311: PUSH
55312: LD_VAR 0 5
55316: PUSH
55317: LD_INT 11
55319: PUSH
55320: LD_INT 30
55322: PUSH
55323: LD_INT 49
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: DIFF
55331: ST_TO_ADDR
// if not list then
55332: LD_VAR 0 5
55336: NOT
55337: IFFALSE 55341
// exit ;
55339: GO 55483
// weapon := list [ rand ( 1 , list ) ] ;
55341: LD_ADDR_VAR 0 18
55345: PUSH
55346: LD_VAR 0 5
55350: PUSH
55351: LD_INT 1
55353: PPUSH
55354: LD_VAR 0 5
55358: PPUSH
55359: CALL_OW 12
55363: ARRAY
55364: ST_TO_ADDR
// end ; if weapon then
55365: LD_VAR 0 18
55369: IFFALSE 55483
// begin tmp := CostOfWeapon ( weapon ) ;
55371: LD_ADDR_VAR 0 14
55375: PUSH
55376: LD_VAR 0 18
55380: PPUSH
55381: CALL_OW 451
55385: ST_TO_ADDR
// j := GetBase ( tower ) ;
55386: LD_ADDR_VAR 0 9
55390: PUSH
55391: LD_VAR 0 1
55395: PPUSH
55396: CALL_OW 274
55400: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55401: LD_VAR 0 9
55405: PPUSH
55406: LD_INT 1
55408: PPUSH
55409: CALL_OW 275
55413: PUSH
55414: LD_VAR 0 14
55418: PUSH
55419: LD_INT 1
55421: ARRAY
55422: GREATEREQUAL
55423: PUSH
55424: LD_VAR 0 9
55428: PPUSH
55429: LD_INT 2
55431: PPUSH
55432: CALL_OW 275
55436: PUSH
55437: LD_VAR 0 14
55441: PUSH
55442: LD_INT 2
55444: ARRAY
55445: GREATEREQUAL
55446: AND
55447: PUSH
55448: LD_VAR 0 9
55452: PPUSH
55453: LD_INT 3
55455: PPUSH
55456: CALL_OW 275
55460: PUSH
55461: LD_VAR 0 14
55465: PUSH
55466: LD_INT 3
55468: ARRAY
55469: GREATEREQUAL
55470: AND
55471: IFFALSE 55483
// result := weapon ;
55473: LD_ADDR_VAR 0 3
55477: PUSH
55478: LD_VAR 0 18
55482: ST_TO_ADDR
// end ; end ;
55483: LD_VAR 0 3
55487: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55488: LD_INT 0
55490: PPUSH
55491: PPUSH
// result := true ;
55492: LD_ADDR_VAR 0 3
55496: PUSH
55497: LD_INT 1
55499: ST_TO_ADDR
// if array1 = array2 then
55500: LD_VAR 0 1
55504: PUSH
55505: LD_VAR 0 2
55509: EQUAL
55510: IFFALSE 55570
// begin for i = 1 to array1 do
55512: LD_ADDR_VAR 0 4
55516: PUSH
55517: DOUBLE
55518: LD_INT 1
55520: DEC
55521: ST_TO_ADDR
55522: LD_VAR 0 1
55526: PUSH
55527: FOR_TO
55528: IFFALSE 55566
// if array1 [ i ] <> array2 [ i ] then
55530: LD_VAR 0 1
55534: PUSH
55535: LD_VAR 0 4
55539: ARRAY
55540: PUSH
55541: LD_VAR 0 2
55545: PUSH
55546: LD_VAR 0 4
55550: ARRAY
55551: NONEQUAL
55552: IFFALSE 55564
// begin result := false ;
55554: LD_ADDR_VAR 0 3
55558: PUSH
55559: LD_INT 0
55561: ST_TO_ADDR
// break ;
55562: GO 55566
// end ;
55564: GO 55527
55566: POP
55567: POP
// end else
55568: GO 55578
// result := false ;
55570: LD_ADDR_VAR 0 3
55574: PUSH
55575: LD_INT 0
55577: ST_TO_ADDR
// end ;
55578: LD_VAR 0 3
55582: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55583: LD_INT 0
55585: PPUSH
55586: PPUSH
// if not array1 or not array2 then
55587: LD_VAR 0 1
55591: NOT
55592: PUSH
55593: LD_VAR 0 2
55597: NOT
55598: OR
55599: IFFALSE 55603
// exit ;
55601: GO 55667
// result := true ;
55603: LD_ADDR_VAR 0 3
55607: PUSH
55608: LD_INT 1
55610: ST_TO_ADDR
// for i = 1 to array1 do
55611: LD_ADDR_VAR 0 4
55615: PUSH
55616: DOUBLE
55617: LD_INT 1
55619: DEC
55620: ST_TO_ADDR
55621: LD_VAR 0 1
55625: PUSH
55626: FOR_TO
55627: IFFALSE 55665
// if array1 [ i ] <> array2 [ i ] then
55629: LD_VAR 0 1
55633: PUSH
55634: LD_VAR 0 4
55638: ARRAY
55639: PUSH
55640: LD_VAR 0 2
55644: PUSH
55645: LD_VAR 0 4
55649: ARRAY
55650: NONEQUAL
55651: IFFALSE 55663
// begin result := false ;
55653: LD_ADDR_VAR 0 3
55657: PUSH
55658: LD_INT 0
55660: ST_TO_ADDR
// break ;
55661: GO 55665
// end ;
55663: GO 55626
55665: POP
55666: POP
// end ;
55667: LD_VAR 0 3
55671: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55672: LD_INT 0
55674: PPUSH
55675: PPUSH
55676: PPUSH
// pom := GetBase ( fac ) ;
55677: LD_ADDR_VAR 0 5
55681: PUSH
55682: LD_VAR 0 1
55686: PPUSH
55687: CALL_OW 274
55691: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55692: LD_ADDR_VAR 0 4
55696: PUSH
55697: LD_VAR 0 2
55701: PUSH
55702: LD_INT 1
55704: ARRAY
55705: PPUSH
55706: LD_VAR 0 2
55710: PUSH
55711: LD_INT 2
55713: ARRAY
55714: PPUSH
55715: LD_VAR 0 2
55719: PUSH
55720: LD_INT 3
55722: ARRAY
55723: PPUSH
55724: LD_VAR 0 2
55728: PUSH
55729: LD_INT 4
55731: ARRAY
55732: PPUSH
55733: CALL_OW 449
55737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55738: LD_ADDR_VAR 0 3
55742: PUSH
55743: LD_VAR 0 5
55747: PPUSH
55748: LD_INT 1
55750: PPUSH
55751: CALL_OW 275
55755: PUSH
55756: LD_VAR 0 4
55760: PUSH
55761: LD_INT 1
55763: ARRAY
55764: GREATEREQUAL
55765: PUSH
55766: LD_VAR 0 5
55770: PPUSH
55771: LD_INT 2
55773: PPUSH
55774: CALL_OW 275
55778: PUSH
55779: LD_VAR 0 4
55783: PUSH
55784: LD_INT 2
55786: ARRAY
55787: GREATEREQUAL
55788: AND
55789: PUSH
55790: LD_VAR 0 5
55794: PPUSH
55795: LD_INT 3
55797: PPUSH
55798: CALL_OW 275
55802: PUSH
55803: LD_VAR 0 4
55807: PUSH
55808: LD_INT 3
55810: ARRAY
55811: GREATEREQUAL
55812: AND
55813: ST_TO_ADDR
// end ;
55814: LD_VAR 0 3
55818: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55819: LD_INT 0
55821: PPUSH
55822: PPUSH
55823: PPUSH
55824: PPUSH
// pom := GetBase ( building ) ;
55825: LD_ADDR_VAR 0 3
55829: PUSH
55830: LD_VAR 0 1
55834: PPUSH
55835: CALL_OW 274
55839: ST_TO_ADDR
// if not pom then
55840: LD_VAR 0 3
55844: NOT
55845: IFFALSE 55849
// exit ;
55847: GO 56019
// btype := GetBType ( building ) ;
55849: LD_ADDR_VAR 0 5
55853: PUSH
55854: LD_VAR 0 1
55858: PPUSH
55859: CALL_OW 266
55863: ST_TO_ADDR
// if btype = b_armoury then
55864: LD_VAR 0 5
55868: PUSH
55869: LD_INT 4
55871: EQUAL
55872: IFFALSE 55882
// btype := b_barracks ;
55874: LD_ADDR_VAR 0 5
55878: PUSH
55879: LD_INT 5
55881: ST_TO_ADDR
// if btype = b_depot then
55882: LD_VAR 0 5
55886: PUSH
55887: LD_INT 0
55889: EQUAL
55890: IFFALSE 55900
// btype := b_warehouse ;
55892: LD_ADDR_VAR 0 5
55896: PUSH
55897: LD_INT 1
55899: ST_TO_ADDR
// if btype = b_workshop then
55900: LD_VAR 0 5
55904: PUSH
55905: LD_INT 2
55907: EQUAL
55908: IFFALSE 55918
// btype := b_factory ;
55910: LD_ADDR_VAR 0 5
55914: PUSH
55915: LD_INT 3
55917: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55918: LD_ADDR_VAR 0 4
55922: PUSH
55923: LD_VAR 0 5
55927: PPUSH
55928: LD_VAR 0 1
55932: PPUSH
55933: CALL_OW 248
55937: PPUSH
55938: CALL_OW 450
55942: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55943: LD_ADDR_VAR 0 2
55947: PUSH
55948: LD_VAR 0 3
55952: PPUSH
55953: LD_INT 1
55955: PPUSH
55956: CALL_OW 275
55960: PUSH
55961: LD_VAR 0 4
55965: PUSH
55966: LD_INT 1
55968: ARRAY
55969: GREATEREQUAL
55970: PUSH
55971: LD_VAR 0 3
55975: PPUSH
55976: LD_INT 2
55978: PPUSH
55979: CALL_OW 275
55983: PUSH
55984: LD_VAR 0 4
55988: PUSH
55989: LD_INT 2
55991: ARRAY
55992: GREATEREQUAL
55993: AND
55994: PUSH
55995: LD_VAR 0 3
55999: PPUSH
56000: LD_INT 3
56002: PPUSH
56003: CALL_OW 275
56007: PUSH
56008: LD_VAR 0 4
56012: PUSH
56013: LD_INT 3
56015: ARRAY
56016: GREATEREQUAL
56017: AND
56018: ST_TO_ADDR
// end ;
56019: LD_VAR 0 2
56023: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56024: LD_INT 0
56026: PPUSH
56027: PPUSH
56028: PPUSH
// pom := GetBase ( building ) ;
56029: LD_ADDR_VAR 0 4
56033: PUSH
56034: LD_VAR 0 1
56038: PPUSH
56039: CALL_OW 274
56043: ST_TO_ADDR
// if not pom then
56044: LD_VAR 0 4
56048: NOT
56049: IFFALSE 56053
// exit ;
56051: GO 56154
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56053: LD_ADDR_VAR 0 5
56057: PUSH
56058: LD_VAR 0 2
56062: PPUSH
56063: LD_VAR 0 1
56067: PPUSH
56068: CALL_OW 248
56072: PPUSH
56073: CALL_OW 450
56077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56078: LD_ADDR_VAR 0 3
56082: PUSH
56083: LD_VAR 0 4
56087: PPUSH
56088: LD_INT 1
56090: PPUSH
56091: CALL_OW 275
56095: PUSH
56096: LD_VAR 0 5
56100: PUSH
56101: LD_INT 1
56103: ARRAY
56104: GREATEREQUAL
56105: PUSH
56106: LD_VAR 0 4
56110: PPUSH
56111: LD_INT 2
56113: PPUSH
56114: CALL_OW 275
56118: PUSH
56119: LD_VAR 0 5
56123: PUSH
56124: LD_INT 2
56126: ARRAY
56127: GREATEREQUAL
56128: AND
56129: PUSH
56130: LD_VAR 0 4
56134: PPUSH
56135: LD_INT 3
56137: PPUSH
56138: CALL_OW 275
56142: PUSH
56143: LD_VAR 0 5
56147: PUSH
56148: LD_INT 3
56150: ARRAY
56151: GREATEREQUAL
56152: AND
56153: ST_TO_ADDR
// end ;
56154: LD_VAR 0 3
56158: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56159: LD_INT 0
56161: PPUSH
56162: PPUSH
56163: PPUSH
56164: PPUSH
56165: PPUSH
56166: PPUSH
56167: PPUSH
56168: PPUSH
56169: PPUSH
56170: PPUSH
56171: PPUSH
// result := false ;
56172: LD_ADDR_VAR 0 8
56176: PUSH
56177: LD_INT 0
56179: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56180: LD_VAR 0 5
56184: NOT
56185: PUSH
56186: LD_VAR 0 1
56190: NOT
56191: OR
56192: PUSH
56193: LD_VAR 0 2
56197: NOT
56198: OR
56199: PUSH
56200: LD_VAR 0 3
56204: NOT
56205: OR
56206: IFFALSE 56210
// exit ;
56208: GO 57024
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56210: LD_ADDR_VAR 0 14
56214: PUSH
56215: LD_VAR 0 1
56219: PPUSH
56220: LD_VAR 0 2
56224: PPUSH
56225: LD_VAR 0 3
56229: PPUSH
56230: LD_VAR 0 4
56234: PPUSH
56235: LD_VAR 0 5
56239: PUSH
56240: LD_INT 1
56242: ARRAY
56243: PPUSH
56244: CALL_OW 248
56248: PPUSH
56249: LD_INT 0
56251: PPUSH
56252: CALL 58261 0 6
56256: ST_TO_ADDR
// if not hexes then
56257: LD_VAR 0 14
56261: NOT
56262: IFFALSE 56266
// exit ;
56264: GO 57024
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56266: LD_ADDR_VAR 0 17
56270: PUSH
56271: LD_VAR 0 5
56275: PPUSH
56276: LD_INT 22
56278: PUSH
56279: LD_VAR 0 13
56283: PPUSH
56284: CALL_OW 255
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 30
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 30
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PPUSH
56325: CALL_OW 72
56329: ST_TO_ADDR
// for i = 1 to hexes do
56330: LD_ADDR_VAR 0 9
56334: PUSH
56335: DOUBLE
56336: LD_INT 1
56338: DEC
56339: ST_TO_ADDR
56340: LD_VAR 0 14
56344: PUSH
56345: FOR_TO
56346: IFFALSE 57022
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56348: LD_ADDR_VAR 0 13
56352: PUSH
56353: LD_VAR 0 14
56357: PUSH
56358: LD_VAR 0 9
56362: ARRAY
56363: PUSH
56364: LD_INT 1
56366: ARRAY
56367: PPUSH
56368: LD_VAR 0 14
56372: PUSH
56373: LD_VAR 0 9
56377: ARRAY
56378: PUSH
56379: LD_INT 2
56381: ARRAY
56382: PPUSH
56383: CALL_OW 428
56387: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56388: LD_VAR 0 14
56392: PUSH
56393: LD_VAR 0 9
56397: ARRAY
56398: PUSH
56399: LD_INT 1
56401: ARRAY
56402: PPUSH
56403: LD_VAR 0 14
56407: PUSH
56408: LD_VAR 0 9
56412: ARRAY
56413: PUSH
56414: LD_INT 2
56416: ARRAY
56417: PPUSH
56418: CALL_OW 351
56422: PUSH
56423: LD_VAR 0 14
56427: PUSH
56428: LD_VAR 0 9
56432: ARRAY
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PPUSH
56438: LD_VAR 0 14
56442: PUSH
56443: LD_VAR 0 9
56447: ARRAY
56448: PUSH
56449: LD_INT 2
56451: ARRAY
56452: PPUSH
56453: CALL_OW 488
56457: NOT
56458: OR
56459: PUSH
56460: LD_VAR 0 13
56464: PPUSH
56465: CALL_OW 247
56469: PUSH
56470: LD_INT 3
56472: EQUAL
56473: OR
56474: IFFALSE 56480
// exit ;
56476: POP
56477: POP
56478: GO 57024
// if not tmp then
56480: LD_VAR 0 13
56484: NOT
56485: IFFALSE 56489
// continue ;
56487: GO 56345
// result := true ;
56489: LD_ADDR_VAR 0 8
56493: PUSH
56494: LD_INT 1
56496: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56497: LD_VAR 0 6
56501: PUSH
56502: LD_VAR 0 13
56506: PPUSH
56507: CALL_OW 247
56511: PUSH
56512: LD_INT 2
56514: EQUAL
56515: AND
56516: PUSH
56517: LD_VAR 0 13
56521: PPUSH
56522: CALL_OW 263
56526: PUSH
56527: LD_INT 1
56529: EQUAL
56530: AND
56531: IFFALSE 56695
// begin if IsDrivenBy ( tmp ) then
56533: LD_VAR 0 13
56537: PPUSH
56538: CALL_OW 311
56542: IFFALSE 56546
// continue ;
56544: GO 56345
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56546: LD_VAR 0 6
56550: PPUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 60
56556: PUSH
56557: EMPTY
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: LD_INT 55
56569: PUSH
56570: EMPTY
56571: LIST
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PPUSH
56581: CALL_OW 72
56585: IFFALSE 56693
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56587: LD_ADDR_VAR 0 18
56591: PUSH
56592: LD_VAR 0 6
56596: PPUSH
56597: LD_INT 3
56599: PUSH
56600: LD_INT 60
56602: PUSH
56603: EMPTY
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: LD_INT 55
56615: PUSH
56616: EMPTY
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PPUSH
56627: CALL_OW 72
56631: PUSH
56632: LD_INT 1
56634: ARRAY
56635: ST_TO_ADDR
// if IsInUnit ( driver ) then
56636: LD_VAR 0 18
56640: PPUSH
56641: CALL_OW 310
56645: IFFALSE 56656
// ComExit ( driver ) ;
56647: LD_VAR 0 18
56651: PPUSH
56652: CALL 81445 0 1
// AddComEnterUnit ( driver , tmp ) ;
56656: LD_VAR 0 18
56660: PPUSH
56661: LD_VAR 0 13
56665: PPUSH
56666: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56670: LD_VAR 0 18
56674: PPUSH
56675: LD_VAR 0 7
56679: PPUSH
56680: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56684: LD_VAR 0 18
56688: PPUSH
56689: CALL_OW 181
// end ; continue ;
56693: GO 56345
// end ; if not cleaners or not tmp in cleaners then
56695: LD_VAR 0 6
56699: NOT
56700: PUSH
56701: LD_VAR 0 13
56705: PUSH
56706: LD_VAR 0 6
56710: IN
56711: NOT
56712: OR
56713: IFFALSE 57020
// begin if dep then
56715: LD_VAR 0 17
56719: IFFALSE 56855
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56721: LD_ADDR_VAR 0 16
56725: PUSH
56726: LD_VAR 0 17
56730: PUSH
56731: LD_INT 1
56733: ARRAY
56734: PPUSH
56735: CALL_OW 250
56739: PPUSH
56740: LD_VAR 0 17
56744: PUSH
56745: LD_INT 1
56747: ARRAY
56748: PPUSH
56749: CALL_OW 254
56753: PPUSH
56754: LD_INT 5
56756: PPUSH
56757: CALL_OW 272
56761: PUSH
56762: LD_VAR 0 17
56766: PUSH
56767: LD_INT 1
56769: ARRAY
56770: PPUSH
56771: CALL_OW 251
56775: PPUSH
56776: LD_VAR 0 17
56780: PUSH
56781: LD_INT 1
56783: ARRAY
56784: PPUSH
56785: CALL_OW 254
56789: PPUSH
56790: LD_INT 5
56792: PPUSH
56793: CALL_OW 273
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56802: LD_VAR 0 16
56806: PUSH
56807: LD_INT 1
56809: ARRAY
56810: PPUSH
56811: LD_VAR 0 16
56815: PUSH
56816: LD_INT 2
56818: ARRAY
56819: PPUSH
56820: CALL_OW 488
56824: IFFALSE 56855
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56826: LD_VAR 0 13
56830: PPUSH
56831: LD_VAR 0 16
56835: PUSH
56836: LD_INT 1
56838: ARRAY
56839: PPUSH
56840: LD_VAR 0 16
56844: PUSH
56845: LD_INT 2
56847: ARRAY
56848: PPUSH
56849: CALL_OW 111
// continue ;
56853: GO 56345
// end ; end ; r := GetDir ( tmp ) ;
56855: LD_ADDR_VAR 0 15
56859: PUSH
56860: LD_VAR 0 13
56864: PPUSH
56865: CALL_OW 254
56869: ST_TO_ADDR
// if r = 5 then
56870: LD_VAR 0 15
56874: PUSH
56875: LD_INT 5
56877: EQUAL
56878: IFFALSE 56888
// r := 0 ;
56880: LD_ADDR_VAR 0 15
56884: PUSH
56885: LD_INT 0
56887: ST_TO_ADDR
// for j = r to 5 do
56888: LD_ADDR_VAR 0 10
56892: PUSH
56893: DOUBLE
56894: LD_VAR 0 15
56898: DEC
56899: ST_TO_ADDR
56900: LD_INT 5
56902: PUSH
56903: FOR_TO
56904: IFFALSE 57018
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56906: LD_ADDR_VAR 0 11
56910: PUSH
56911: LD_VAR 0 13
56915: PPUSH
56916: CALL_OW 250
56920: PPUSH
56921: LD_VAR 0 10
56925: PPUSH
56926: LD_INT 2
56928: PPUSH
56929: CALL_OW 272
56933: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56934: LD_ADDR_VAR 0 12
56938: PUSH
56939: LD_VAR 0 13
56943: PPUSH
56944: CALL_OW 251
56948: PPUSH
56949: LD_VAR 0 10
56953: PPUSH
56954: LD_INT 2
56956: PPUSH
56957: CALL_OW 273
56961: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56962: LD_VAR 0 11
56966: PPUSH
56967: LD_VAR 0 12
56971: PPUSH
56972: CALL_OW 488
56976: PUSH
56977: LD_VAR 0 11
56981: PPUSH
56982: LD_VAR 0 12
56986: PPUSH
56987: CALL_OW 428
56991: NOT
56992: AND
56993: IFFALSE 57016
// begin ComMoveXY ( tmp , _x , _y ) ;
56995: LD_VAR 0 13
56999: PPUSH
57000: LD_VAR 0 11
57004: PPUSH
57005: LD_VAR 0 12
57009: PPUSH
57010: CALL_OW 111
// break ;
57014: GO 57018
// end ; end ;
57016: GO 56903
57018: POP
57019: POP
// end ; end ;
57020: GO 56345
57022: POP
57023: POP
// end ;
57024: LD_VAR 0 8
57028: RET
// export function BuildingTechInvented ( side , btype ) ; begin
57029: LD_INT 0
57031: PPUSH
// result := true ;
57032: LD_ADDR_VAR 0 3
57036: PUSH
57037: LD_INT 1
57039: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
57040: LD_VAR 0 2
57044: PUSH
57045: LD_INT 24
57047: DOUBLE
57048: EQUAL
57049: IFTRUE 57059
57051: LD_INT 33
57053: DOUBLE
57054: EQUAL
57055: IFTRUE 57059
57057: GO 57084
57059: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
57060: LD_ADDR_VAR 0 3
57064: PUSH
57065: LD_INT 32
57067: PPUSH
57068: LD_VAR 0 1
57072: PPUSH
57073: CALL_OW 321
57077: PUSH
57078: LD_INT 2
57080: EQUAL
57081: ST_TO_ADDR
57082: GO 57404
57084: LD_INT 20
57086: DOUBLE
57087: EQUAL
57088: IFTRUE 57092
57090: GO 57117
57092: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
57093: LD_ADDR_VAR 0 3
57097: PUSH
57098: LD_INT 6
57100: PPUSH
57101: LD_VAR 0 1
57105: PPUSH
57106: CALL_OW 321
57110: PUSH
57111: LD_INT 2
57113: EQUAL
57114: ST_TO_ADDR
57115: GO 57404
57117: LD_INT 22
57119: DOUBLE
57120: EQUAL
57121: IFTRUE 57131
57123: LD_INT 36
57125: DOUBLE
57126: EQUAL
57127: IFTRUE 57131
57129: GO 57156
57131: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
57132: LD_ADDR_VAR 0 3
57136: PUSH
57137: LD_INT 15
57139: PPUSH
57140: LD_VAR 0 1
57144: PPUSH
57145: CALL_OW 321
57149: PUSH
57150: LD_INT 2
57152: EQUAL
57153: ST_TO_ADDR
57154: GO 57404
57156: LD_INT 30
57158: DOUBLE
57159: EQUAL
57160: IFTRUE 57164
57162: GO 57189
57164: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
57165: LD_ADDR_VAR 0 3
57169: PUSH
57170: LD_INT 20
57172: PPUSH
57173: LD_VAR 0 1
57177: PPUSH
57178: CALL_OW 321
57182: PUSH
57183: LD_INT 2
57185: EQUAL
57186: ST_TO_ADDR
57187: GO 57404
57189: LD_INT 28
57191: DOUBLE
57192: EQUAL
57193: IFTRUE 57203
57195: LD_INT 21
57197: DOUBLE
57198: EQUAL
57199: IFTRUE 57203
57201: GO 57228
57203: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
57204: LD_ADDR_VAR 0 3
57208: PUSH
57209: LD_INT 21
57211: PPUSH
57212: LD_VAR 0 1
57216: PPUSH
57217: CALL_OW 321
57221: PUSH
57222: LD_INT 2
57224: EQUAL
57225: ST_TO_ADDR
57226: GO 57404
57228: LD_INT 16
57230: DOUBLE
57231: EQUAL
57232: IFTRUE 57236
57234: GO 57263
57236: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57237: LD_ADDR_VAR 0 3
57241: PUSH
57242: LD_EXP 60
57246: PPUSH
57247: LD_VAR 0 1
57251: PPUSH
57252: CALL_OW 321
57256: PUSH
57257: LD_INT 2
57259: EQUAL
57260: ST_TO_ADDR
57261: GO 57404
57263: LD_INT 19
57265: DOUBLE
57266: EQUAL
57267: IFTRUE 57277
57269: LD_INT 23
57271: DOUBLE
57272: EQUAL
57273: IFTRUE 57277
57275: GO 57304
57277: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
57278: LD_ADDR_VAR 0 3
57282: PUSH
57283: LD_EXP 59
57287: PPUSH
57288: LD_VAR 0 1
57292: PPUSH
57293: CALL_OW 321
57297: PUSH
57298: LD_INT 2
57300: EQUAL
57301: ST_TO_ADDR
57302: GO 57404
57304: LD_INT 17
57306: DOUBLE
57307: EQUAL
57308: IFTRUE 57312
57310: GO 57337
57312: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
57313: LD_ADDR_VAR 0 3
57317: PUSH
57318: LD_INT 39
57320: PPUSH
57321: LD_VAR 0 1
57325: PPUSH
57326: CALL_OW 321
57330: PUSH
57331: LD_INT 2
57333: EQUAL
57334: ST_TO_ADDR
57335: GO 57404
57337: LD_INT 18
57339: DOUBLE
57340: EQUAL
57341: IFTRUE 57345
57343: GO 57370
57345: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
57346: LD_ADDR_VAR 0 3
57350: PUSH
57351: LD_INT 40
57353: PPUSH
57354: LD_VAR 0 1
57358: PPUSH
57359: CALL_OW 321
57363: PUSH
57364: LD_INT 2
57366: EQUAL
57367: ST_TO_ADDR
57368: GO 57404
57370: LD_INT 27
57372: DOUBLE
57373: EQUAL
57374: IFTRUE 57378
57376: GO 57403
57378: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
57379: LD_ADDR_VAR 0 3
57383: PUSH
57384: LD_INT 35
57386: PPUSH
57387: LD_VAR 0 1
57391: PPUSH
57392: CALL_OW 321
57396: PUSH
57397: LD_INT 2
57399: EQUAL
57400: ST_TO_ADDR
57401: GO 57404
57403: POP
// end ;
57404: LD_VAR 0 3
57408: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
57409: LD_INT 0
57411: PPUSH
57412: PPUSH
57413: PPUSH
57414: PPUSH
57415: PPUSH
57416: PPUSH
57417: PPUSH
57418: PPUSH
57419: PPUSH
57420: PPUSH
57421: PPUSH
// result := false ;
57422: LD_ADDR_VAR 0 6
57426: PUSH
57427: LD_INT 0
57429: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57430: LD_VAR 0 1
57434: NOT
57435: PUSH
57436: LD_VAR 0 1
57440: PPUSH
57441: CALL_OW 266
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: IN
57456: NOT
57457: OR
57458: PUSH
57459: LD_VAR 0 2
57463: NOT
57464: OR
57465: PUSH
57466: LD_VAR 0 5
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: LD_INT 5
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: IN
57497: NOT
57498: OR
57499: PUSH
57500: LD_VAR 0 3
57504: PPUSH
57505: LD_VAR 0 4
57509: PPUSH
57510: CALL_OW 488
57514: NOT
57515: OR
57516: IFFALSE 57520
// exit ;
57518: GO 58256
// side := GetSide ( depot ) ;
57520: LD_ADDR_VAR 0 9
57524: PUSH
57525: LD_VAR 0 1
57529: PPUSH
57530: CALL_OW 255
57534: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57535: LD_VAR 0 9
57539: PPUSH
57540: LD_VAR 0 2
57544: PPUSH
57545: CALL 57029 0 2
57549: NOT
57550: IFFALSE 57554
// exit ;
57552: GO 58256
// pom := GetBase ( depot ) ;
57554: LD_ADDR_VAR 0 10
57558: PUSH
57559: LD_VAR 0 1
57563: PPUSH
57564: CALL_OW 274
57568: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57569: LD_ADDR_VAR 0 11
57573: PUSH
57574: LD_VAR 0 2
57578: PPUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: CALL_OW 248
57588: PPUSH
57589: CALL_OW 450
57593: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57594: LD_VAR 0 10
57598: PPUSH
57599: LD_INT 1
57601: PPUSH
57602: CALL_OW 275
57606: PUSH
57607: LD_VAR 0 11
57611: PUSH
57612: LD_INT 1
57614: ARRAY
57615: GREATEREQUAL
57616: PUSH
57617: LD_VAR 0 10
57621: PPUSH
57622: LD_INT 2
57624: PPUSH
57625: CALL_OW 275
57629: PUSH
57630: LD_VAR 0 11
57634: PUSH
57635: LD_INT 2
57637: ARRAY
57638: GREATEREQUAL
57639: AND
57640: PUSH
57641: LD_VAR 0 10
57645: PPUSH
57646: LD_INT 3
57648: PPUSH
57649: CALL_OW 275
57653: PUSH
57654: LD_VAR 0 11
57658: PUSH
57659: LD_INT 3
57661: ARRAY
57662: GREATEREQUAL
57663: AND
57664: NOT
57665: IFFALSE 57669
// exit ;
57667: GO 58256
// if GetBType ( depot ) = b_depot then
57669: LD_VAR 0 1
57673: PPUSH
57674: CALL_OW 266
57678: PUSH
57679: LD_INT 0
57681: EQUAL
57682: IFFALSE 57694
// dist := 28 else
57684: LD_ADDR_VAR 0 14
57688: PUSH
57689: LD_INT 28
57691: ST_TO_ADDR
57692: GO 57702
// dist := 36 ;
57694: LD_ADDR_VAR 0 14
57698: PUSH
57699: LD_INT 36
57701: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57702: LD_VAR 0 1
57706: PPUSH
57707: LD_VAR 0 3
57711: PPUSH
57712: LD_VAR 0 4
57716: PPUSH
57717: CALL_OW 297
57721: PUSH
57722: LD_VAR 0 14
57726: GREATER
57727: IFFALSE 57731
// exit ;
57729: GO 58256
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57731: LD_ADDR_VAR 0 12
57735: PUSH
57736: LD_VAR 0 2
57740: PPUSH
57741: LD_VAR 0 3
57745: PPUSH
57746: LD_VAR 0 4
57750: PPUSH
57751: LD_VAR 0 5
57755: PPUSH
57756: LD_VAR 0 1
57760: PPUSH
57761: CALL_OW 248
57765: PPUSH
57766: LD_INT 0
57768: PPUSH
57769: CALL 58261 0 6
57773: ST_TO_ADDR
// if not hexes then
57774: LD_VAR 0 12
57778: NOT
57779: IFFALSE 57783
// exit ;
57781: GO 58256
// hex := GetHexInfo ( x , y ) ;
57783: LD_ADDR_VAR 0 15
57787: PUSH
57788: LD_VAR 0 3
57792: PPUSH
57793: LD_VAR 0 4
57797: PPUSH
57798: CALL_OW 546
57802: ST_TO_ADDR
// if hex [ 1 ] then
57803: LD_VAR 0 15
57807: PUSH
57808: LD_INT 1
57810: ARRAY
57811: IFFALSE 57815
// exit ;
57813: GO 58256
// height := hex [ 2 ] ;
57815: LD_ADDR_VAR 0 13
57819: PUSH
57820: LD_VAR 0 15
57824: PUSH
57825: LD_INT 2
57827: ARRAY
57828: ST_TO_ADDR
// for i = 1 to hexes do
57829: LD_ADDR_VAR 0 7
57833: PUSH
57834: DOUBLE
57835: LD_INT 1
57837: DEC
57838: ST_TO_ADDR
57839: LD_VAR 0 12
57843: PUSH
57844: FOR_TO
57845: IFFALSE 58175
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57847: LD_VAR 0 12
57851: PUSH
57852: LD_VAR 0 7
57856: ARRAY
57857: PUSH
57858: LD_INT 1
57860: ARRAY
57861: PPUSH
57862: LD_VAR 0 12
57866: PUSH
57867: LD_VAR 0 7
57871: ARRAY
57872: PUSH
57873: LD_INT 2
57875: ARRAY
57876: PPUSH
57877: CALL_OW 488
57881: NOT
57882: PUSH
57883: LD_VAR 0 12
57887: PUSH
57888: LD_VAR 0 7
57892: ARRAY
57893: PUSH
57894: LD_INT 1
57896: ARRAY
57897: PPUSH
57898: LD_VAR 0 12
57902: PUSH
57903: LD_VAR 0 7
57907: ARRAY
57908: PUSH
57909: LD_INT 2
57911: ARRAY
57912: PPUSH
57913: CALL_OW 428
57917: PUSH
57918: LD_INT 0
57920: GREATER
57921: OR
57922: PUSH
57923: LD_VAR 0 12
57927: PUSH
57928: LD_VAR 0 7
57932: ARRAY
57933: PUSH
57934: LD_INT 1
57936: ARRAY
57937: PPUSH
57938: LD_VAR 0 12
57942: PUSH
57943: LD_VAR 0 7
57947: ARRAY
57948: PUSH
57949: LD_INT 2
57951: ARRAY
57952: PPUSH
57953: CALL_OW 351
57957: OR
57958: IFFALSE 57964
// exit ;
57960: POP
57961: POP
57962: GO 58256
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57964: LD_ADDR_VAR 0 8
57968: PUSH
57969: LD_VAR 0 12
57973: PUSH
57974: LD_VAR 0 7
57978: ARRAY
57979: PUSH
57980: LD_INT 1
57982: ARRAY
57983: PPUSH
57984: LD_VAR 0 12
57988: PUSH
57989: LD_VAR 0 7
57993: ARRAY
57994: PUSH
57995: LD_INT 2
57997: ARRAY
57998: PPUSH
57999: CALL_OW 546
58003: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58004: LD_VAR 0 8
58008: PUSH
58009: LD_INT 1
58011: ARRAY
58012: PUSH
58013: LD_VAR 0 8
58017: PUSH
58018: LD_INT 2
58020: ARRAY
58021: PUSH
58022: LD_VAR 0 13
58026: PUSH
58027: LD_INT 2
58029: PLUS
58030: GREATER
58031: OR
58032: PUSH
58033: LD_VAR 0 8
58037: PUSH
58038: LD_INT 2
58040: ARRAY
58041: PUSH
58042: LD_VAR 0 13
58046: PUSH
58047: LD_INT 2
58049: MINUS
58050: LESS
58051: OR
58052: PUSH
58053: LD_VAR 0 8
58057: PUSH
58058: LD_INT 3
58060: ARRAY
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 8
58067: PUSH
58068: LD_INT 9
58070: PUSH
58071: LD_INT 10
58073: PUSH
58074: LD_INT 11
58076: PUSH
58077: LD_INT 12
58079: PUSH
58080: LD_INT 13
58082: PUSH
58083: LD_INT 16
58085: PUSH
58086: LD_INT 17
58088: PUSH
58089: LD_INT 18
58091: PUSH
58092: LD_INT 19
58094: PUSH
58095: LD_INT 20
58097: PUSH
58098: LD_INT 21
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: IN
58116: NOT
58117: OR
58118: PUSH
58119: LD_VAR 0 8
58123: PUSH
58124: LD_INT 5
58126: ARRAY
58127: NOT
58128: OR
58129: PUSH
58130: LD_VAR 0 8
58134: PUSH
58135: LD_INT 6
58137: ARRAY
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 7
58147: PUSH
58148: LD_INT 9
58150: PUSH
58151: LD_INT 10
58153: PUSH
58154: LD_INT 11
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: IN
58165: NOT
58166: OR
58167: IFFALSE 58173
// exit ;
58169: POP
58170: POP
58171: GO 58256
// end ;
58173: GO 57844
58175: POP
58176: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58177: LD_VAR 0 9
58181: PPUSH
58182: LD_VAR 0 3
58186: PPUSH
58187: LD_VAR 0 4
58191: PPUSH
58192: LD_INT 20
58194: PPUSH
58195: CALL 50202 0 4
58199: PUSH
58200: LD_INT 4
58202: ARRAY
58203: IFFALSE 58207
// exit ;
58205: GO 58256
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58207: LD_VAR 0 2
58211: PUSH
58212: LD_INT 29
58214: PUSH
58215: LD_INT 30
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: IN
58222: PUSH
58223: LD_VAR 0 3
58227: PPUSH
58228: LD_VAR 0 4
58232: PPUSH
58233: LD_VAR 0 9
58237: PPUSH
58238: CALL_OW 440
58242: NOT
58243: AND
58244: IFFALSE 58248
// exit ;
58246: GO 58256
// result := true ;
58248: LD_ADDR_VAR 0 6
58252: PUSH
58253: LD_INT 1
58255: ST_TO_ADDR
// end ;
58256: LD_VAR 0 6
58260: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58261: LD_INT 0
58263: PPUSH
58264: PPUSH
58265: PPUSH
58266: PPUSH
58267: PPUSH
58268: PPUSH
58269: PPUSH
58270: PPUSH
58271: PPUSH
58272: PPUSH
58273: PPUSH
58274: PPUSH
58275: PPUSH
58276: PPUSH
58277: PPUSH
58278: PPUSH
58279: PPUSH
58280: PPUSH
58281: PPUSH
58282: PPUSH
58283: PPUSH
58284: PPUSH
58285: PPUSH
58286: PPUSH
58287: PPUSH
58288: PPUSH
58289: PPUSH
58290: PPUSH
58291: PPUSH
58292: PPUSH
58293: PPUSH
58294: PPUSH
58295: PPUSH
58296: PPUSH
58297: PPUSH
58298: PPUSH
58299: PPUSH
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
58308: PPUSH
58309: PPUSH
58310: PPUSH
58311: PPUSH
58312: PPUSH
58313: PPUSH
58314: PPUSH
58315: PPUSH
58316: PPUSH
58317: PPUSH
58318: PPUSH
58319: PPUSH
58320: PPUSH
// result = [ ] ;
58321: LD_ADDR_VAR 0 7
58325: PUSH
58326: EMPTY
58327: ST_TO_ADDR
// temp_list = [ ] ;
58328: LD_ADDR_VAR 0 9
58332: PUSH
58333: EMPTY
58334: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58335: LD_VAR 0 4
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: LD_INT 5
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: IN
58366: NOT
58367: PUSH
58368: LD_VAR 0 1
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: IN
58383: PUSH
58384: LD_VAR 0 5
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: IN
58403: NOT
58404: AND
58405: OR
58406: IFFALSE 58410
// exit ;
58408: GO 76801
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58410: LD_VAR 0 1
58414: PUSH
58415: LD_INT 6
58417: PUSH
58418: LD_INT 7
58420: PUSH
58421: LD_INT 8
58423: PUSH
58424: LD_INT 13
58426: PUSH
58427: LD_INT 12
58429: PUSH
58430: LD_INT 15
58432: PUSH
58433: LD_INT 11
58435: PUSH
58436: LD_INT 14
58438: PUSH
58439: LD_INT 10
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: IN
58453: IFFALSE 58463
// btype = b_lab ;
58455: LD_ADDR_VAR 0 1
58459: PUSH
58460: LD_INT 6
58462: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58463: LD_VAR 0 6
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: IN
58482: NOT
58483: PUSH
58484: LD_VAR 0 1
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: LD_INT 3
58500: PUSH
58501: LD_INT 6
58503: PUSH
58504: LD_INT 36
58506: PUSH
58507: LD_INT 4
58509: PUSH
58510: LD_INT 5
58512: PUSH
58513: LD_INT 31
58515: PUSH
58516: LD_INT 32
58518: PUSH
58519: LD_INT 33
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: IN
58535: NOT
58536: PUSH
58537: LD_VAR 0 6
58541: PUSH
58542: LD_INT 1
58544: EQUAL
58545: AND
58546: OR
58547: PUSH
58548: LD_VAR 0 1
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 3
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: IN
58563: NOT
58564: PUSH
58565: LD_VAR 0 6
58569: PUSH
58570: LD_INT 2
58572: EQUAL
58573: AND
58574: OR
58575: IFFALSE 58585
// mode = 0 ;
58577: LD_ADDR_VAR 0 6
58581: PUSH
58582: LD_INT 0
58584: ST_TO_ADDR
// case mode of 0 :
58585: LD_VAR 0 6
58589: PUSH
58590: LD_INT 0
58592: DOUBLE
58593: EQUAL
58594: IFTRUE 58598
58596: GO 70051
58598: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58599: LD_ADDR_VAR 0 11
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58792: LD_ADDR_VAR 0 12
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58988: LD_ADDR_VAR 0 13
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: NEG
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59187: LD_ADDR_VAR 0 14
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59383: LD_ADDR_VAR 0 15
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59576: LD_ADDR_VAR 0 16
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 3
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59769: LD_ADDR_VAR 0 17
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59999: LD_ADDR_VAR 0 18
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60229: LD_ADDR_VAR 0 19
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60459: LD_ADDR_VAR 0 20
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60689: LD_ADDR_VAR 0 21
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: NEG
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60919: LD_ADDR_VAR 0 22
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61149: LD_ADDR_VAR 0 23
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: LD_INT 3
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 2
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61429: LD_ADDR_VAR 0 24
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61705: LD_ADDR_VAR 0 25
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61979: LD_ADDR_VAR 0 26
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 3
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62255: LD_ADDR_VAR 0 27
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 2
62477: NEG
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: NEG
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 3
62500: NEG
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62535: LD_ADDR_VAR 0 28
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 2
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: NEG
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: LD_INT 3
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 3
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62817: LD_ADDR_VAR 0 29
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: LD_INT 2
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: LD_INT 1
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 3
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 3
63061: NEG
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63096: LD_ADDR_VAR 0 30
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: NEG
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 2
63273: NEG
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 3
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63374: LD_ADDR_VAR 0 31
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: LD_INT 2
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: LD_INT 3
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 3
63617: NEG
63618: PUSH
63619: LD_INT 2
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63652: LD_ADDR_VAR 0 32
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 2
63818: NEG
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 2
63829: NEG
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 3
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 2
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 3
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 3
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63930: LD_ADDR_VAR 0 33
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: LD_INT 2
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: LD_INT 2
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: LD_INT 1
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: LD_INT 3
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 3
64174: NEG
64175: PUSH
64176: LD_INT 2
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64209: LD_ADDR_VAR 0 34
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 2
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: LD_INT 3
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 2
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 3
64454: NEG
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64489: LD_ADDR_VAR 0 35
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: PUSH
64571: LD_INT 1
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64601: LD_ADDR_VAR 0 36
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: LD_INT 2
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64713: LD_ADDR_VAR 0 37
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64825: LD_ADDR_VAR 0 38
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64937: LD_ADDR_VAR 0 39
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: LD_INT 2
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65049: LD_ADDR_VAR 0 40
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 1
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: NEG
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65161: LD_ADDR_VAR 0 41
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 1
65242: NEG
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 2
65316: NEG
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 2
65327: NEG
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: LD_INT 2
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 2
65351: NEG
65352: PUSH
65353: LD_INT 3
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 2
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: LD_INT 2
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 3
65435: NEG
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 3
65446: NEG
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: NEG
65459: PUSH
65460: LD_INT 2
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: LD_INT 3
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65511: LD_ADDR_VAR 0 42
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: LD_INT 1
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 2
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: LD_INT 2
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: NEG
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: NEG
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: LD_INT 3
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 3
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 2
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 3
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 3
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: LD_INT 3
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: LD_INT 2
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 3
65808: NEG
65809: PUSH
65810: LD_INT 2
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: LD_INT 3
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65861: LD_ADDR_VAR 0 43
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: LD_INT 2
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: LD_INT 2
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 2
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 2
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 2
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: LD_INT 1
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: NEG
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: LD_INT 1
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66209: LD_ADDR_VAR 0 44
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 2
66364: NEG
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 2
66387: NEG
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: LD_INT 3
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: LD_INT 2
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: LD_INT 3
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: NEG
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: NEG
66507: PUSH
66508: LD_INT 2
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: LD_INT 3
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66559: LD_ADDR_VAR 0 45
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 1
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: LD_INT 2
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: PUSH
66675: LD_INT 1
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 2
66684: PUSH
66685: LD_INT 2
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: NEG
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: NEG
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: LD_INT 2
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 2
66749: NEG
66750: PUSH
66751: LD_INT 3
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: LD_INT 3
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: LD_INT 3
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 3
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 3
66805: PUSH
66806: LD_INT 3
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: LD_INT 3
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 3
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 3
66856: NEG
66857: PUSH
66858: LD_INT 2
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: NEG
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66909: LD_ADDR_VAR 0 46
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: LD_INT 2
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: LD_INT 1
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 2
67075: NEG
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: NEG
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 1
67121: PUSH
67122: LD_INT 2
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 2
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 1
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: NEG
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 2
67194: NEG
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: NEG
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67257: LD_ADDR_VAR 0 47
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: LD_INT 2
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 2
67384: NEG
67385: PUSH
67386: LD_INT 2
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67408: LD_ADDR_VAR 0 48
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: LD_INT 2
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: LD_INT 2
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67555: LD_ADDR_VAR 0 49
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 1
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 1
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 2
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 2
67657: PUSH
67658: LD_INT 1
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67699: LD_ADDR_VAR 0 50
67703: PUSH
67704: LD_INT 0
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 1
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: LD_INT 1
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 2
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: LD_INT 2
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67843: LD_ADDR_VAR 0 51
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: LD_INT 1
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 1
67912: NEG
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: LD_INT 2
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: LD_INT 1
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 2
67955: NEG
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67990: LD_ADDR_VAR 0 52
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 0
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 1
68059: NEG
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: NEG
68072: PUSH
68073: LD_INT 2
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: NEG
68084: PUSH
68085: LD_INT 1
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 2
68094: NEG
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 2
68105: NEG
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: LD_INT 2
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68141: LD_ADDR_VAR 0 53
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 1
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 1
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 0
68234: PUSH
68235: LD_INT 2
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: LD_INT 1
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 2
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: LD_INT 2
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: LD_INT 2
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: LD_INT 2
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: NEG
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 2
68328: NEG
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 2
68340: NEG
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68371: LD_ADDR_VAR 0 54
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: LD_INT 1
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 1
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: LD_INT 1
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 1
68440: NEG
68441: PUSH
68442: LD_INT 1
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: LD_INT 2
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 0
68464: PUSH
68465: LD_INT 2
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 1
68475: PUSH
68476: LD_INT 1
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 2
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 2
68496: PUSH
68497: LD_INT 1
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: PUSH
68507: LD_INT 2
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 2
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: LD_INT 2
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: LD_INT 1
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 2
68570: NEG
68571: PUSH
68572: LD_INT 2
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68601: LD_ADDR_VAR 0 55
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 1
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: LD_INT 1
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 1
68670: NEG
68671: PUSH
68672: LD_INT 1
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: LD_INT 2
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 2
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: LD_INT 1
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 2
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 2
68726: PUSH
68727: LD_INT 1
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 2
68736: PUSH
68737: LD_INT 2
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: PUSH
68747: LD_INT 2
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 2
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 1
68766: NEG
68767: PUSH
68768: LD_INT 1
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: NEG
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68831: LD_ADDR_VAR 0 56
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 1
68900: NEG
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: LD_INT 2
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: LD_INT 2
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: PUSH
68936: LD_INT 1
68938: NEG
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: LD_INT 0
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 2
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: LD_INT 1
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 2
69007: NEG
69008: PUSH
69009: LD_INT 0
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 2
69030: NEG
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69061: LD_ADDR_VAR 0 57
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: LD_INT 1
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 1
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 1
69130: NEG
69131: PUSH
69132: LD_INT 1
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: LD_INT 2
69146: NEG
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: LD_INT 2
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 1
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 2
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 2
69186: PUSH
69187: LD_INT 1
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 2
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 2
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 1
69226: NEG
69227: PUSH
69228: LD_INT 1
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 2
69237: NEG
69238: PUSH
69239: LD_INT 0
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 2
69248: NEG
69249: PUSH
69250: LD_INT 1
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: LD_INT 2
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69291: LD_ADDR_VAR 0 58
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 1
69329: PUSH
69330: LD_INT 1
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 0
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: NEG
69350: PUSH
69351: LD_INT 0
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 1
69360: NEG
69361: PUSH
69362: LD_INT 1
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 1
69372: NEG
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 1
69395: PUSH
69396: LD_INT 1
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: PUSH
69427: LD_INT 2
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 1
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 1
69456: NEG
69457: PUSH
69458: LD_INT 1
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 2
69467: NEG
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 2
69478: NEG
69479: PUSH
69480: LD_INT 1
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 2
69490: NEG
69491: PUSH
69492: LD_INT 2
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69521: LD_ADDR_VAR 0 59
69525: PUSH
69526: LD_INT 0
69528: PUSH
69529: LD_INT 0
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: LD_INT 1
69541: NEG
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 1
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 0
69569: PUSH
69570: LD_INT 1
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: NEG
69580: PUSH
69581: LD_INT 0
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: NEG
69591: PUSH
69592: LD_INT 1
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69609: LD_ADDR_VAR 0 60
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_INT 1
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 1
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: LD_INT 1
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: LD_INT 1
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 1
69667: NEG
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 1
69678: NEG
69679: PUSH
69680: LD_INT 1
69682: NEG
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69697: LD_ADDR_VAR 0 61
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: LD_INT 0
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: LD_INT 1
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 1
69725: PUSH
69726: LD_INT 0
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 1
69735: PUSH
69736: LD_INT 1
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 1
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 1
69755: NEG
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 1
69766: NEG
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69785: LD_ADDR_VAR 0 62
69789: PUSH
69790: LD_INT 0
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: LD_INT 0
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 1
69843: NEG
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 1
69854: NEG
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69873: LD_ADDR_VAR 0 63
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: LD_INT 0
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 1
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: LD_INT 1
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 0
69921: PUSH
69922: LD_INT 1
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 1
69931: NEG
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 1
69942: NEG
69943: PUSH
69944: LD_INT 1
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69961: LD_ADDR_VAR 0 64
69965: PUSH
69966: LD_INT 0
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 0
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 1
69989: PUSH
69990: LD_INT 0
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 1
69999: PUSH
70000: LD_INT 1
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 1
70019: NEG
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: LD_INT 1
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: ST_TO_ADDR
// end ; 1 :
70049: GO 75946
70051: LD_INT 1
70053: DOUBLE
70054: EQUAL
70055: IFTRUE 70059
70057: GO 72682
70059: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70060: LD_ADDR_VAR 0 11
70064: PUSH
70065: LD_INT 1
70067: NEG
70068: PUSH
70069: LD_INT 3
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: LD_INT 3
70082: NEG
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 1
70090: PUSH
70091: LD_INT 2
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: LIST
70103: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70104: LD_ADDR_VAR 0 12
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: LD_INT 1
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 3
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: LIST
70144: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70145: LD_ADDR_VAR 0 13
70149: PUSH
70150: LD_INT 3
70152: PUSH
70153: LD_INT 2
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: LD_INT 3
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: LD_INT 3
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: LIST
70184: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70185: LD_ADDR_VAR 0 14
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: LD_INT 3
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: LD_INT 3
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: LD_INT 2
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: LIST
70225: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70226: LD_ADDR_VAR 0 15
70230: PUSH
70231: LD_INT 2
70233: NEG
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 3
70244: NEG
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 3
70255: NEG
70256: PUSH
70257: LD_INT 1
70259: NEG
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70270: LD_ADDR_VAR 0 16
70274: PUSH
70275: LD_INT 2
70277: NEG
70278: PUSH
70279: LD_INT 3
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 3
70289: NEG
70290: PUSH
70291: LD_INT 2
70293: NEG
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: NEG
70302: PUSH
70303: LD_INT 3
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: LIST
70315: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70316: LD_ADDR_VAR 0 17
70320: PUSH
70321: LD_INT 1
70323: NEG
70324: PUSH
70325: LD_INT 3
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: LD_INT 3
70338: NEG
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: LD_INT 2
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: LIST
70359: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70360: LD_ADDR_VAR 0 18
70364: PUSH
70365: LD_INT 2
70367: PUSH
70368: LD_INT 1
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 3
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 3
70388: PUSH
70389: LD_INT 1
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: LIST
70400: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70401: LD_ADDR_VAR 0 19
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: LD_INT 2
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 3
70418: PUSH
70419: LD_INT 3
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 2
70428: PUSH
70429: LD_INT 3
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: LIST
70440: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70441: LD_ADDR_VAR 0 20
70445: PUSH
70446: LD_INT 1
70448: PUSH
70449: LD_INT 3
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 1
70468: NEG
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: LIST
70481: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70482: LD_ADDR_VAR 0 21
70486: PUSH
70487: LD_INT 2
70489: NEG
70490: PUSH
70491: LD_INT 1
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 3
70500: NEG
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 3
70511: NEG
70512: PUSH
70513: LD_INT 1
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: LIST
70525: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70526: LD_ADDR_VAR 0 22
70530: PUSH
70531: LD_INT 2
70533: NEG
70534: PUSH
70535: LD_INT 3
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: NEG
70546: PUSH
70547: LD_INT 2
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 3
70557: NEG
70558: PUSH
70559: LD_INT 3
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: LIST
70571: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70572: LD_ADDR_VAR 0 23
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 3
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: NEG
70591: PUSH
70592: LD_INT 4
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: LD_INT 3
70605: NEG
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: LIST
70615: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70616: LD_ADDR_VAR 0 24
70620: PUSH
70621: LD_INT 3
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 3
70633: PUSH
70634: LD_INT 1
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 4
70644: PUSH
70645: LD_INT 1
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: LIST
70656: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70657: LD_ADDR_VAR 0 25
70661: PUSH
70662: LD_INT 3
70664: PUSH
70665: LD_INT 3
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: LD_INT 3
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 3
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: LIST
70696: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70697: LD_ADDR_VAR 0 26
70701: PUSH
70702: LD_INT 0
70704: PUSH
70705: LD_INT 3
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: LD_INT 4
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 1
70724: NEG
70725: PUSH
70726: LD_INT 3
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: LIST
70737: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70738: LD_ADDR_VAR 0 27
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 3
70756: NEG
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: LD_INT 1
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70782: LD_ADDR_VAR 0 28
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: LD_INT 3
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: LD_INT 4
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: LD_INT 3
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70828: LD_ADDR_VAR 0 29
70832: PUSH
70833: LD_INT 1
70835: NEG
70836: PUSH
70837: LD_INT 3
70839: NEG
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 0
70847: PUSH
70848: LD_INT 3
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 1
70858: PUSH
70859: LD_INT 2
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 1
70869: NEG
70870: PUSH
70871: LD_INT 4
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 0
70881: PUSH
70882: LD_INT 4
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 1
70892: PUSH
70893: LD_INT 3
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 1
70903: NEG
70904: PUSH
70905: LD_INT 5
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: LD_INT 5
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: LD_INT 4
70929: NEG
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 1
70937: NEG
70938: PUSH
70939: LD_INT 6
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 0
70949: PUSH
70950: LD_INT 6
70952: NEG
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 1
70960: PUSH
70961: LD_INT 5
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70983: LD_ADDR_VAR 0 30
70987: PUSH
70988: LD_INT 2
70990: PUSH
70991: LD_INT 1
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 3
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 3
71011: PUSH
71012: LD_INT 1
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 3
71021: PUSH
71022: LD_INT 1
71024: NEG
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 4
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 4
71042: PUSH
71043: LD_INT 1
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 4
71052: PUSH
71053: LD_INT 1
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 5
71063: PUSH
71064: LD_INT 0
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 5
71073: PUSH
71074: LD_INT 1
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 5
71083: PUSH
71084: LD_INT 1
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 6
71094: PUSH
71095: LD_INT 0
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 6
71104: PUSH
71105: LD_INT 1
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71126: LD_ADDR_VAR 0 31
71130: PUSH
71131: LD_INT 3
71133: PUSH
71134: LD_INT 2
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 3
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 2
71153: PUSH
71154: LD_INT 3
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 4
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 4
71173: PUSH
71174: LD_INT 4
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 3
71183: PUSH
71184: LD_INT 4
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 5
71193: PUSH
71194: LD_INT 4
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 5
71203: PUSH
71204: LD_INT 5
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 4
71213: PUSH
71214: LD_INT 5
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 6
71223: PUSH
71224: LD_INT 5
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 6
71233: PUSH
71234: LD_INT 6
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 5
71243: PUSH
71244: LD_INT 6
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71265: LD_ADDR_VAR 0 32
71269: PUSH
71270: LD_INT 1
71272: PUSH
71273: LD_INT 3
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 0
71282: PUSH
71283: LD_INT 3
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 1
71292: NEG
71293: PUSH
71294: LD_INT 2
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 1
71303: PUSH
71304: LD_INT 4
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 0
71313: PUSH
71314: LD_INT 4
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 1
71323: NEG
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 1
71334: PUSH
71335: LD_INT 5
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 0
71344: PUSH
71345: LD_INT 5
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 1
71354: NEG
71355: PUSH
71356: LD_INT 4
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 1
71365: PUSH
71366: LD_INT 6
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: LD_INT 6
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 1
71385: NEG
71386: PUSH
71387: LD_INT 5
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71408: LD_ADDR_VAR 0 33
71412: PUSH
71413: LD_INT 2
71415: NEG
71416: PUSH
71417: LD_INT 1
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 3
71426: NEG
71427: PUSH
71428: LD_INT 0
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 3
71437: NEG
71438: PUSH
71439: LD_INT 1
71441: NEG
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 3
71449: NEG
71450: PUSH
71451: LD_INT 1
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 4
71460: NEG
71461: PUSH
71462: LD_INT 0
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 4
71471: NEG
71472: PUSH
71473: LD_INT 1
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 4
71483: NEG
71484: PUSH
71485: LD_INT 1
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 5
71494: NEG
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 5
71505: NEG
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 5
71517: NEG
71518: PUSH
71519: LD_INT 1
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 6
71528: NEG
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 6
71539: NEG
71540: PUSH
71541: LD_INT 1
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71563: LD_ADDR_VAR 0 34
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: LD_INT 3
71574: NEG
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: LD_INT 3
71582: NEG
71583: PUSH
71584: LD_INT 2
71586: NEG
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 3
71594: NEG
71595: PUSH
71596: LD_INT 3
71598: NEG
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 3
71606: NEG
71607: PUSH
71608: LD_INT 4
71610: NEG
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 4
71618: NEG
71619: PUSH
71620: LD_INT 3
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 4
71630: NEG
71631: PUSH
71632: LD_INT 4
71634: NEG
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 4
71642: NEG
71643: PUSH
71644: LD_INT 5
71646: NEG
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 5
71654: NEG
71655: PUSH
71656: LD_INT 4
71658: NEG
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 5
71666: NEG
71667: PUSH
71668: LD_INT 5
71670: NEG
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 5
71678: NEG
71679: PUSH
71680: LD_INT 6
71682: NEG
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 6
71690: NEG
71691: PUSH
71692: LD_INT 5
71694: NEG
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 6
71702: NEG
71703: PUSH
71704: LD_INT 6
71706: NEG
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71726: LD_ADDR_VAR 0 41
71730: PUSH
71731: LD_INT 0
71733: PUSH
71734: LD_INT 2
71736: NEG
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 1
71744: NEG
71745: PUSH
71746: LD_INT 3
71748: NEG
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 1
71756: PUSH
71757: LD_INT 2
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: LIST
71769: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71770: LD_ADDR_VAR 0 42
71774: PUSH
71775: LD_INT 2
71777: PUSH
71778: LD_INT 0
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 2
71787: PUSH
71788: LD_INT 1
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 3
71798: PUSH
71799: LD_INT 1
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: LIST
71810: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71811: LD_ADDR_VAR 0 43
71815: PUSH
71816: LD_INT 2
71818: PUSH
71819: LD_INT 2
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 3
71828: PUSH
71829: LD_INT 2
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 2
71838: PUSH
71839: LD_INT 3
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: LIST
71850: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71851: LD_ADDR_VAR 0 44
71855: PUSH
71856: LD_INT 0
71858: PUSH
71859: LD_INT 2
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 1
71868: PUSH
71869: LD_INT 3
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 1
71878: NEG
71879: PUSH
71880: LD_INT 2
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71892: LD_ADDR_VAR 0 45
71896: PUSH
71897: LD_INT 2
71899: NEG
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 2
71910: NEG
71911: PUSH
71912: LD_INT 1
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 3
71921: NEG
71922: PUSH
71923: LD_INT 1
71925: NEG
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71936: LD_ADDR_VAR 0 46
71940: PUSH
71941: LD_INT 2
71943: NEG
71944: PUSH
71945: LD_INT 2
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 2
71955: NEG
71956: PUSH
71957: LD_INT 3
71959: NEG
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 3
71967: NEG
71968: PUSH
71969: LD_INT 2
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: LIST
71981: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71982: LD_ADDR_VAR 0 47
71986: PUSH
71987: LD_INT 2
71989: NEG
71990: PUSH
71991: LD_INT 3
71993: NEG
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 1
72001: NEG
72002: PUSH
72003: LD_INT 3
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72015: LD_ADDR_VAR 0 48
72019: PUSH
72020: LD_INT 1
72022: PUSH
72023: LD_INT 2
72025: NEG
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 2
72033: PUSH
72034: LD_INT 1
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72046: LD_ADDR_VAR 0 49
72050: PUSH
72051: LD_INT 3
72053: PUSH
72054: LD_INT 1
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 3
72063: PUSH
72064: LD_INT 2
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72075: LD_ADDR_VAR 0 50
72079: PUSH
72080: LD_INT 2
72082: PUSH
72083: LD_INT 3
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 1
72092: PUSH
72093: LD_INT 3
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72104: LD_ADDR_VAR 0 51
72108: PUSH
72109: LD_INT 1
72111: NEG
72112: PUSH
72113: LD_INT 2
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 2
72122: NEG
72123: PUSH
72124: LD_INT 1
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72135: LD_ADDR_VAR 0 52
72139: PUSH
72140: LD_INT 3
72142: NEG
72143: PUSH
72144: LD_INT 1
72146: NEG
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 3
72154: NEG
72155: PUSH
72156: LD_INT 2
72158: NEG
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72168: LD_ADDR_VAR 0 53
72172: PUSH
72173: LD_INT 1
72175: NEG
72176: PUSH
72177: LD_INT 3
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: LD_INT 3
72190: NEG
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 1
72198: PUSH
72199: LD_INT 2
72201: NEG
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: LIST
72211: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72212: LD_ADDR_VAR 0 54
72216: PUSH
72217: LD_INT 2
72219: PUSH
72220: LD_INT 1
72222: NEG
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 3
72230: PUSH
72231: LD_INT 0
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 3
72240: PUSH
72241: LD_INT 1
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: LIST
72252: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72253: LD_ADDR_VAR 0 55
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: LD_INT 2
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: LD_INT 3
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 2
72280: PUSH
72281: LD_INT 3
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: LIST
72292: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72293: LD_ADDR_VAR 0 56
72297: PUSH
72298: LD_INT 1
72300: PUSH
72301: LD_INT 3
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 0
72310: PUSH
72311: LD_INT 3
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 1
72320: NEG
72321: PUSH
72322: LD_INT 2
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72334: LD_ADDR_VAR 0 57
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: LD_INT 1
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 3
72352: NEG
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 3
72363: NEG
72364: PUSH
72365: LD_INT 1
72367: NEG
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: LIST
72377: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72378: LD_ADDR_VAR 0 58
72382: PUSH
72383: LD_INT 2
72385: NEG
72386: PUSH
72387: LD_INT 3
72389: NEG
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 3
72397: NEG
72398: PUSH
72399: LD_INT 2
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 3
72409: NEG
72410: PUSH
72411: LD_INT 3
72413: NEG
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: LIST
72423: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72424: LD_ADDR_VAR 0 59
72428: PUSH
72429: LD_INT 1
72431: NEG
72432: PUSH
72433: LD_INT 2
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 2
72446: NEG
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 1
72454: PUSH
72455: LD_INT 1
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: LIST
72467: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72468: LD_ADDR_VAR 0 60
72472: PUSH
72473: LD_INT 1
72475: PUSH
72476: LD_INT 1
72478: NEG
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 2
72486: PUSH
72487: LD_INT 0
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 2
72496: PUSH
72497: LD_INT 1
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: LIST
72508: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72509: LD_ADDR_VAR 0 61
72513: PUSH
72514: LD_INT 2
72516: PUSH
72517: LD_INT 1
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: PUSH
72527: LD_INT 2
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 1
72536: PUSH
72537: LD_INT 2
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: LIST
72548: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72549: LD_ADDR_VAR 0 62
72553: PUSH
72554: LD_INT 1
72556: PUSH
72557: LD_INT 2
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: LD_INT 2
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 1
72576: NEG
72577: PUSH
72578: LD_INT 1
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72590: LD_ADDR_VAR 0 63
72594: PUSH
72595: LD_INT 1
72597: NEG
72598: PUSH
72599: LD_INT 1
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 2
72608: NEG
72609: PUSH
72610: LD_INT 0
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 2
72619: NEG
72620: PUSH
72621: LD_INT 1
72623: NEG
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: LIST
72633: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72634: LD_ADDR_VAR 0 64
72638: PUSH
72639: LD_INT 1
72641: NEG
72642: PUSH
72643: LD_INT 2
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 2
72653: NEG
72654: PUSH
72655: LD_INT 1
72657: NEG
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 2
72665: NEG
72666: PUSH
72667: LD_INT 2
72669: NEG
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: LIST
72679: ST_TO_ADDR
// end ; 2 :
72680: GO 75946
72682: LD_INT 2
72684: DOUBLE
72685: EQUAL
72686: IFTRUE 72690
72688: GO 75945
72690: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72691: LD_ADDR_VAR 0 29
72695: PUSH
72696: LD_INT 4
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 4
72708: PUSH
72709: LD_INT 1
72711: NEG
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 5
72719: PUSH
72720: LD_INT 0
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 5
72729: PUSH
72730: LD_INT 1
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 4
72739: PUSH
72740: LD_INT 1
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 3
72749: PUSH
72750: LD_INT 0
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 3
72759: PUSH
72760: LD_INT 1
72762: NEG
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 3
72770: PUSH
72771: LD_INT 2
72773: NEG
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 5
72781: PUSH
72782: LD_INT 2
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 3
72791: PUSH
72792: LD_INT 3
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 3
72801: PUSH
72802: LD_INT 2
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 4
72811: PUSH
72812: LD_INT 3
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 4
72821: PUSH
72822: LD_INT 4
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 3
72831: PUSH
72832: LD_INT 4
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 2
72841: PUSH
72842: LD_INT 3
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: LD_INT 2
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 4
72861: PUSH
72862: LD_INT 2
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: PUSH
72869: LD_INT 2
72871: PUSH
72872: LD_INT 4
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 0
72881: PUSH
72882: LD_INT 4
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 0
72891: PUSH
72892: LD_INT 3
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 1
72901: PUSH
72902: LD_INT 4
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 1
72911: PUSH
72912: LD_INT 5
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 0
72921: PUSH
72922: LD_INT 5
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 1
72931: NEG
72932: PUSH
72933: LD_INT 4
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 1
72942: NEG
72943: PUSH
72944: LD_INT 3
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 2
72953: PUSH
72954: LD_INT 5
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 2
72963: NEG
72964: PUSH
72965: LD_INT 3
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 3
72974: NEG
72975: PUSH
72976: LD_INT 0
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 3
72985: NEG
72986: PUSH
72987: LD_INT 1
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 2
72997: NEG
72998: PUSH
72999: LD_INT 0
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 2
73008: NEG
73009: PUSH
73010: LD_INT 1
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 3
73019: NEG
73020: PUSH
73021: LD_INT 1
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 4
73030: NEG
73031: PUSH
73032: LD_INT 0
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 4
73041: NEG
73042: PUSH
73043: LD_INT 1
73045: NEG
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 4
73053: NEG
73054: PUSH
73055: LD_INT 2
73057: NEG
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 2
73065: NEG
73066: PUSH
73067: LD_INT 2
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 4
73076: NEG
73077: PUSH
73078: LD_INT 4
73080: NEG
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 4
73088: NEG
73089: PUSH
73090: LD_INT 5
73092: NEG
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_INT 3
73100: NEG
73101: PUSH
73102: LD_INT 4
73104: NEG
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 3
73112: NEG
73113: PUSH
73114: LD_INT 3
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 4
73124: NEG
73125: PUSH
73126: LD_INT 3
73128: NEG
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 5
73136: NEG
73137: PUSH
73138: LD_INT 4
73140: NEG
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 5
73148: NEG
73149: PUSH
73150: LD_INT 5
73152: NEG
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 3
73160: NEG
73161: PUSH
73162: LD_INT 5
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 5
73172: NEG
73173: PUSH
73174: LD_INT 3
73176: NEG
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73229: LD_ADDR_VAR 0 30
73233: PUSH
73234: LD_INT 4
73236: PUSH
73237: LD_INT 4
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 4
73246: PUSH
73247: LD_INT 3
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: LD_INT 5
73256: PUSH
73257: LD_INT 4
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: PUSH
73264: LD_INT 5
73266: PUSH
73267: LD_INT 5
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 4
73276: PUSH
73277: LD_INT 5
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 3
73286: PUSH
73287: LD_INT 4
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 3
73296: PUSH
73297: LD_INT 3
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 5
73306: PUSH
73307: LD_INT 3
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 3
73316: PUSH
73317: LD_INT 5
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 0
73326: PUSH
73327: LD_INT 3
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 0
73336: PUSH
73337: LD_INT 2
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 1
73346: PUSH
73347: LD_INT 3
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 1
73356: PUSH
73357: LD_INT 4
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 0
73366: PUSH
73367: LD_INT 4
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 1
73376: NEG
73377: PUSH
73378: LD_INT 3
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 1
73387: NEG
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 2
73398: PUSH
73399: LD_INT 4
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 2
73408: NEG
73409: PUSH
73410: LD_INT 2
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 4
73419: NEG
73420: PUSH
73421: LD_INT 0
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 4
73430: NEG
73431: PUSH
73432: LD_INT 1
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 3
73442: NEG
73443: PUSH
73444: LD_INT 0
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 3
73453: NEG
73454: PUSH
73455: LD_INT 1
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 4
73464: NEG
73465: PUSH
73466: LD_INT 1
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 5
73475: NEG
73476: PUSH
73477: LD_INT 0
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 5
73486: NEG
73487: PUSH
73488: LD_INT 1
73490: NEG
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 5
73498: NEG
73499: PUSH
73500: LD_INT 2
73502: NEG
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 3
73510: NEG
73511: PUSH
73512: LD_INT 2
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 3
73521: NEG
73522: PUSH
73523: LD_INT 3
73525: NEG
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 3
73533: NEG
73534: PUSH
73535: LD_INT 4
73537: NEG
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: LD_INT 2
73545: NEG
73546: PUSH
73547: LD_INT 3
73549: NEG
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: LD_INT 2
73557: NEG
73558: PUSH
73559: LD_INT 2
73561: NEG
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 3
73569: NEG
73570: PUSH
73571: LD_INT 2
73573: NEG
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 4
73581: NEG
73582: PUSH
73583: LD_INT 3
73585: NEG
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 4
73593: NEG
73594: PUSH
73595: LD_INT 4
73597: NEG
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 2
73605: NEG
73606: PUSH
73607: LD_INT 4
73609: NEG
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 4
73617: NEG
73618: PUSH
73619: LD_INT 2
73621: NEG
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 0
73629: PUSH
73630: LD_INT 4
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: LD_INT 5
73643: NEG
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 1
73651: PUSH
73652: LD_INT 4
73654: NEG
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 1
73662: PUSH
73663: LD_INT 3
73665: NEG
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 0
73673: PUSH
73674: LD_INT 3
73676: NEG
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 1
73684: NEG
73685: PUSH
73686: LD_INT 4
73688: NEG
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: LD_INT 1
73696: NEG
73697: PUSH
73698: LD_INT 5
73700: NEG
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 2
73708: PUSH
73709: LD_INT 3
73711: NEG
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 2
73719: NEG
73720: PUSH
73721: LD_INT 5
73723: NEG
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73776: LD_ADDR_VAR 0 31
73780: PUSH
73781: LD_INT 0
73783: PUSH
73784: LD_INT 4
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 0
73793: PUSH
73794: LD_INT 3
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 1
73803: PUSH
73804: LD_INT 4
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 1
73813: PUSH
73814: LD_INT 5
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: PUSH
73821: LD_INT 0
73823: PUSH
73824: LD_INT 5
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: PUSH
73831: LD_INT 1
73833: NEG
73834: PUSH
73835: LD_INT 4
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 1
73844: NEG
73845: PUSH
73846: LD_INT 3
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: PUSH
73853: LD_INT 2
73855: PUSH
73856: LD_INT 5
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: PUSH
73863: LD_INT 2
73865: NEG
73866: PUSH
73867: LD_INT 3
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PUSH
73874: LD_INT 3
73876: NEG
73877: PUSH
73878: LD_INT 0
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 3
73887: NEG
73888: PUSH
73889: LD_INT 1
73891: NEG
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 2
73899: NEG
73900: PUSH
73901: LD_INT 0
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 2
73910: NEG
73911: PUSH
73912: LD_INT 1
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 3
73921: NEG
73922: PUSH
73923: LD_INT 1
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 4
73932: NEG
73933: PUSH
73934: LD_INT 0
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 4
73943: NEG
73944: PUSH
73945: LD_INT 1
73947: NEG
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PUSH
73953: LD_INT 4
73955: NEG
73956: PUSH
73957: LD_INT 2
73959: NEG
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: PUSH
73965: LD_INT 2
73967: NEG
73968: PUSH
73969: LD_INT 2
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 4
73978: NEG
73979: PUSH
73980: LD_INT 4
73982: NEG
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: LD_INT 4
73990: NEG
73991: PUSH
73992: LD_INT 5
73994: NEG
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 3
74002: NEG
74003: PUSH
74004: LD_INT 4
74006: NEG
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PUSH
74012: LD_INT 3
74014: NEG
74015: PUSH
74016: LD_INT 3
74018: NEG
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: LD_INT 4
74026: NEG
74027: PUSH
74028: LD_INT 3
74030: NEG
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 5
74038: NEG
74039: PUSH
74040: LD_INT 4
74042: NEG
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 5
74050: NEG
74051: PUSH
74052: LD_INT 5
74054: NEG
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 3
74062: NEG
74063: PUSH
74064: LD_INT 5
74066: NEG
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 5
74074: NEG
74075: PUSH
74076: LD_INT 3
74078: NEG
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 0
74086: PUSH
74087: LD_INT 3
74089: NEG
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 0
74097: PUSH
74098: LD_INT 4
74100: NEG
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 1
74108: PUSH
74109: LD_INT 3
74111: NEG
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 1
74119: PUSH
74120: LD_INT 2
74122: NEG
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 0
74130: PUSH
74131: LD_INT 2
74133: NEG
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 1
74141: NEG
74142: PUSH
74143: LD_INT 3
74145: NEG
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: PUSH
74151: LD_INT 1
74153: NEG
74154: PUSH
74155: LD_INT 4
74157: NEG
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: LD_INT 2
74168: NEG
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: LD_INT 2
74176: NEG
74177: PUSH
74178: LD_INT 4
74180: NEG
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 4
74188: PUSH
74189: LD_INT 0
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 4
74198: PUSH
74199: LD_INT 1
74201: NEG
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 5
74209: PUSH
74210: LD_INT 0
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 5
74219: PUSH
74220: LD_INT 1
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 4
74229: PUSH
74230: LD_INT 1
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 3
74239: PUSH
74240: LD_INT 0
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 3
74249: PUSH
74250: LD_INT 1
74252: NEG
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 3
74260: PUSH
74261: LD_INT 2
74263: NEG
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_INT 5
74271: PUSH
74272: LD_INT 2
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74326: LD_ADDR_VAR 0 32
74330: PUSH
74331: LD_INT 4
74333: NEG
74334: PUSH
74335: LD_INT 0
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: PUSH
74342: LD_INT 4
74344: NEG
74345: PUSH
74346: LD_INT 1
74348: NEG
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 3
74356: NEG
74357: PUSH
74358: LD_INT 0
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 3
74367: NEG
74368: PUSH
74369: LD_INT 1
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 4
74378: NEG
74379: PUSH
74380: LD_INT 1
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 5
74389: NEG
74390: PUSH
74391: LD_INT 0
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: PUSH
74398: LD_INT 5
74400: NEG
74401: PUSH
74402: LD_INT 1
74404: NEG
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: PUSH
74410: LD_INT 5
74412: NEG
74413: PUSH
74414: LD_INT 2
74416: NEG
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 3
74424: NEG
74425: PUSH
74426: LD_INT 2
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 3
74435: NEG
74436: PUSH
74437: LD_INT 3
74439: NEG
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 3
74447: NEG
74448: PUSH
74449: LD_INT 4
74451: NEG
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 2
74459: NEG
74460: PUSH
74461: LD_INT 3
74463: NEG
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 2
74471: NEG
74472: PUSH
74473: LD_INT 2
74475: NEG
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 3
74483: NEG
74484: PUSH
74485: LD_INT 2
74487: NEG
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PUSH
74493: LD_INT 4
74495: NEG
74496: PUSH
74497: LD_INT 3
74499: NEG
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 4
74507: NEG
74508: PUSH
74509: LD_INT 4
74511: NEG
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 2
74519: NEG
74520: PUSH
74521: LD_INT 4
74523: NEG
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 4
74531: NEG
74532: PUSH
74533: LD_INT 2
74535: NEG
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 0
74543: PUSH
74544: LD_INT 4
74546: NEG
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 0
74554: PUSH
74555: LD_INT 5
74557: NEG
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 1
74565: PUSH
74566: LD_INT 4
74568: NEG
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 1
74576: PUSH
74577: LD_INT 3
74579: NEG
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 0
74587: PUSH
74588: LD_INT 3
74590: NEG
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: LD_INT 1
74598: NEG
74599: PUSH
74600: LD_INT 4
74602: NEG
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: LD_INT 1
74610: NEG
74611: PUSH
74612: LD_INT 5
74614: NEG
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 2
74622: PUSH
74623: LD_INT 3
74625: NEG
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 2
74633: NEG
74634: PUSH
74635: LD_INT 5
74637: NEG
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 3
74645: PUSH
74646: LD_INT 0
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 3
74655: PUSH
74656: LD_INT 1
74658: NEG
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 4
74666: PUSH
74667: LD_INT 0
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 4
74676: PUSH
74677: LD_INT 1
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: LD_INT 3
74686: PUSH
74687: LD_INT 1
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 2
74696: PUSH
74697: LD_INT 0
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 2
74706: PUSH
74707: LD_INT 1
74709: NEG
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 2
74717: PUSH
74718: LD_INT 2
74720: NEG
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 4
74728: PUSH
74729: LD_INT 2
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 4
74738: PUSH
74739: LD_INT 4
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PUSH
74746: LD_INT 4
74748: PUSH
74749: LD_INT 3
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 5
74758: PUSH
74759: LD_INT 4
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: LD_INT 5
74768: PUSH
74769: LD_INT 5
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: LD_INT 4
74778: PUSH
74779: LD_INT 5
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 3
74788: PUSH
74789: LD_INT 4
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PUSH
74796: LD_INT 3
74798: PUSH
74799: LD_INT 3
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: PUSH
74806: LD_INT 5
74808: PUSH
74809: LD_INT 3
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 3
74818: PUSH
74819: LD_INT 5
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74873: LD_ADDR_VAR 0 33
74877: PUSH
74878: LD_INT 4
74880: NEG
74881: PUSH
74882: LD_INT 4
74884: NEG
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: PUSH
74890: LD_INT 4
74892: NEG
74893: PUSH
74894: LD_INT 5
74896: NEG
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 3
74904: NEG
74905: PUSH
74906: LD_INT 4
74908: NEG
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PUSH
74914: LD_INT 3
74916: NEG
74917: PUSH
74918: LD_INT 3
74920: NEG
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: PUSH
74926: LD_INT 4
74928: NEG
74929: PUSH
74930: LD_INT 3
74932: NEG
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: PUSH
74938: LD_INT 5
74940: NEG
74941: PUSH
74942: LD_INT 4
74944: NEG
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 5
74952: NEG
74953: PUSH
74954: LD_INT 5
74956: NEG
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 3
74964: NEG
74965: PUSH
74966: LD_INT 5
74968: NEG
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: PUSH
74974: LD_INT 5
74976: NEG
74977: PUSH
74978: LD_INT 3
74980: NEG
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_INT 0
74988: PUSH
74989: LD_INT 3
74991: NEG
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: LD_INT 0
74999: PUSH
75000: LD_INT 4
75002: NEG
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 1
75010: PUSH
75011: LD_INT 3
75013: NEG
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 1
75021: PUSH
75022: LD_INT 2
75024: NEG
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 0
75032: PUSH
75033: LD_INT 2
75035: NEG
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 1
75043: NEG
75044: PUSH
75045: LD_INT 3
75047: NEG
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: LD_INT 1
75055: NEG
75056: PUSH
75057: LD_INT 4
75059: NEG
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PUSH
75065: LD_INT 2
75067: PUSH
75068: LD_INT 2
75070: NEG
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PUSH
75076: LD_INT 2
75078: NEG
75079: PUSH
75080: LD_INT 4
75082: NEG
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PUSH
75088: LD_INT 4
75090: PUSH
75091: LD_INT 0
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 4
75100: PUSH
75101: LD_INT 1
75103: NEG
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 5
75111: PUSH
75112: LD_INT 0
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 5
75121: PUSH
75122: LD_INT 1
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 4
75131: PUSH
75132: LD_INT 1
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PUSH
75139: LD_INT 3
75141: PUSH
75142: LD_INT 0
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: LD_INT 3
75151: PUSH
75152: LD_INT 1
75154: NEG
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: LD_INT 2
75165: NEG
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 5
75173: PUSH
75174: LD_INT 2
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 3
75183: PUSH
75184: LD_INT 3
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 3
75193: PUSH
75194: LD_INT 2
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 4
75203: PUSH
75204: LD_INT 3
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 4
75213: PUSH
75214: LD_INT 4
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 3
75223: PUSH
75224: LD_INT 4
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 2
75233: PUSH
75234: LD_INT 3
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 2
75243: PUSH
75244: LD_INT 2
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 4
75253: PUSH
75254: LD_INT 2
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 2
75263: PUSH
75264: LD_INT 4
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 0
75273: PUSH
75274: LD_INT 4
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 0
75283: PUSH
75284: LD_INT 3
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: PUSH
75291: LD_INT 1
75293: PUSH
75294: LD_INT 4
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PUSH
75301: LD_INT 1
75303: PUSH
75304: LD_INT 5
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PUSH
75311: LD_INT 0
75313: PUSH
75314: LD_INT 5
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: PUSH
75321: LD_INT 1
75323: NEG
75324: PUSH
75325: LD_INT 4
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 1
75334: NEG
75335: PUSH
75336: LD_INT 3
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 2
75345: PUSH
75346: LD_INT 5
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 2
75355: NEG
75356: PUSH
75357: LD_INT 3
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75411: LD_ADDR_VAR 0 34
75415: PUSH
75416: LD_INT 0
75418: PUSH
75419: LD_INT 4
75421: NEG
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: LD_INT 0
75429: PUSH
75430: LD_INT 5
75432: NEG
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 1
75440: PUSH
75441: LD_INT 4
75443: NEG
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: LD_INT 1
75451: PUSH
75452: LD_INT 3
75454: NEG
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 0
75462: PUSH
75463: LD_INT 3
75465: NEG
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 1
75473: NEG
75474: PUSH
75475: LD_INT 4
75477: NEG
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: PUSH
75483: LD_INT 1
75485: NEG
75486: PUSH
75487: LD_INT 5
75489: NEG
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 2
75497: PUSH
75498: LD_INT 3
75500: NEG
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PUSH
75506: LD_INT 2
75508: NEG
75509: PUSH
75510: LD_INT 5
75512: NEG
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 3
75520: PUSH
75521: LD_INT 0
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: LD_INT 3
75530: PUSH
75531: LD_INT 1
75533: NEG
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: LD_INT 4
75541: PUSH
75542: LD_INT 0
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 4
75551: PUSH
75552: LD_INT 1
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: PUSH
75559: LD_INT 3
75561: PUSH
75562: LD_INT 1
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 2
75571: PUSH
75572: LD_INT 0
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 2
75581: PUSH
75582: LD_INT 1
75584: NEG
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 2
75592: PUSH
75593: LD_INT 2
75595: NEG
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PUSH
75601: LD_INT 4
75603: PUSH
75604: LD_INT 2
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: PUSH
75611: LD_INT 4
75613: PUSH
75614: LD_INT 4
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: PUSH
75621: LD_INT 4
75623: PUSH
75624: LD_INT 3
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: LD_INT 5
75633: PUSH
75634: LD_INT 4
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: PUSH
75641: LD_INT 5
75643: PUSH
75644: LD_INT 5
75646: PUSH
75647: EMPTY
75648: LIST
75649: LIST
75650: PUSH
75651: LD_INT 4
75653: PUSH
75654: LD_INT 5
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 3
75663: PUSH
75664: LD_INT 4
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: PUSH
75671: LD_INT 3
75673: PUSH
75674: LD_INT 3
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: LD_INT 5
75683: PUSH
75684: LD_INT 3
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PUSH
75691: LD_INT 3
75693: PUSH
75694: LD_INT 5
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: PUSH
75701: LD_INT 0
75703: PUSH
75704: LD_INT 3
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 0
75713: PUSH
75714: LD_INT 2
75716: PUSH
75717: EMPTY
75718: LIST
75719: LIST
75720: PUSH
75721: LD_INT 1
75723: PUSH
75724: LD_INT 3
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: LD_INT 1
75733: PUSH
75734: LD_INT 4
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: PUSH
75741: LD_INT 0
75743: PUSH
75744: LD_INT 4
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 1
75753: NEG
75754: PUSH
75755: LD_INT 3
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 1
75764: NEG
75765: PUSH
75766: LD_INT 2
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 2
75775: PUSH
75776: LD_INT 4
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 2
75785: NEG
75786: PUSH
75787: LD_INT 2
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 4
75796: NEG
75797: PUSH
75798: LD_INT 0
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 4
75807: NEG
75808: PUSH
75809: LD_INT 1
75811: NEG
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 3
75819: NEG
75820: PUSH
75821: LD_INT 0
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 3
75830: NEG
75831: PUSH
75832: LD_INT 1
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 4
75841: NEG
75842: PUSH
75843: LD_INT 1
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: LD_INT 5
75852: NEG
75853: PUSH
75854: LD_INT 0
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: LD_INT 5
75863: NEG
75864: PUSH
75865: LD_INT 1
75867: NEG
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PUSH
75873: LD_INT 5
75875: NEG
75876: PUSH
75877: LD_INT 2
75879: NEG
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 3
75887: NEG
75888: PUSH
75889: LD_INT 2
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: ST_TO_ADDR
// end ; end ;
75943: GO 75946
75945: POP
// case btype of b_depot , b_warehouse :
75946: LD_VAR 0 1
75950: PUSH
75951: LD_INT 0
75953: DOUBLE
75954: EQUAL
75955: IFTRUE 75965
75957: LD_INT 1
75959: DOUBLE
75960: EQUAL
75961: IFTRUE 75965
75963: GO 76166
75965: POP
// case nation of nation_american :
75966: LD_VAR 0 5
75970: PUSH
75971: LD_INT 1
75973: DOUBLE
75974: EQUAL
75975: IFTRUE 75979
75977: GO 76035
75979: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75980: LD_ADDR_VAR 0 9
75984: PUSH
75985: LD_VAR 0 11
75989: PUSH
75990: LD_VAR 0 12
75994: PUSH
75995: LD_VAR 0 13
75999: PUSH
76000: LD_VAR 0 14
76004: PUSH
76005: LD_VAR 0 15
76009: PUSH
76010: LD_VAR 0 16
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: PUSH
76023: LD_VAR 0 4
76027: PUSH
76028: LD_INT 1
76030: PLUS
76031: ARRAY
76032: ST_TO_ADDR
76033: GO 76164
76035: LD_INT 2
76037: DOUBLE
76038: EQUAL
76039: IFTRUE 76043
76041: GO 76099
76043: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
76044: LD_ADDR_VAR 0 9
76048: PUSH
76049: LD_VAR 0 17
76053: PUSH
76054: LD_VAR 0 18
76058: PUSH
76059: LD_VAR 0 19
76063: PUSH
76064: LD_VAR 0 20
76068: PUSH
76069: LD_VAR 0 21
76073: PUSH
76074: LD_VAR 0 22
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: PUSH
76087: LD_VAR 0 4
76091: PUSH
76092: LD_INT 1
76094: PLUS
76095: ARRAY
76096: ST_TO_ADDR
76097: GO 76164
76099: LD_INT 3
76101: DOUBLE
76102: EQUAL
76103: IFTRUE 76107
76105: GO 76163
76107: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76108: LD_ADDR_VAR 0 9
76112: PUSH
76113: LD_VAR 0 23
76117: PUSH
76118: LD_VAR 0 24
76122: PUSH
76123: LD_VAR 0 25
76127: PUSH
76128: LD_VAR 0 26
76132: PUSH
76133: LD_VAR 0 27
76137: PUSH
76138: LD_VAR 0 28
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: PUSH
76151: LD_VAR 0 4
76155: PUSH
76156: LD_INT 1
76158: PLUS
76159: ARRAY
76160: ST_TO_ADDR
76161: GO 76164
76163: POP
76164: GO 76719
76166: LD_INT 2
76168: DOUBLE
76169: EQUAL
76170: IFTRUE 76180
76172: LD_INT 3
76174: DOUBLE
76175: EQUAL
76176: IFTRUE 76180
76178: GO 76236
76180: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76181: LD_ADDR_VAR 0 9
76185: PUSH
76186: LD_VAR 0 29
76190: PUSH
76191: LD_VAR 0 30
76195: PUSH
76196: LD_VAR 0 31
76200: PUSH
76201: LD_VAR 0 32
76205: PUSH
76206: LD_VAR 0 33
76210: PUSH
76211: LD_VAR 0 34
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: PUSH
76224: LD_VAR 0 4
76228: PUSH
76229: LD_INT 1
76231: PLUS
76232: ARRAY
76233: ST_TO_ADDR
76234: GO 76719
76236: LD_INT 16
76238: DOUBLE
76239: EQUAL
76240: IFTRUE 76298
76242: LD_INT 17
76244: DOUBLE
76245: EQUAL
76246: IFTRUE 76298
76248: LD_INT 18
76250: DOUBLE
76251: EQUAL
76252: IFTRUE 76298
76254: LD_INT 19
76256: DOUBLE
76257: EQUAL
76258: IFTRUE 76298
76260: LD_INT 22
76262: DOUBLE
76263: EQUAL
76264: IFTRUE 76298
76266: LD_INT 20
76268: DOUBLE
76269: EQUAL
76270: IFTRUE 76298
76272: LD_INT 21
76274: DOUBLE
76275: EQUAL
76276: IFTRUE 76298
76278: LD_INT 23
76280: DOUBLE
76281: EQUAL
76282: IFTRUE 76298
76284: LD_INT 24
76286: DOUBLE
76287: EQUAL
76288: IFTRUE 76298
76290: LD_INT 25
76292: DOUBLE
76293: EQUAL
76294: IFTRUE 76298
76296: GO 76354
76298: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76299: LD_ADDR_VAR 0 9
76303: PUSH
76304: LD_VAR 0 35
76308: PUSH
76309: LD_VAR 0 36
76313: PUSH
76314: LD_VAR 0 37
76318: PUSH
76319: LD_VAR 0 38
76323: PUSH
76324: LD_VAR 0 39
76328: PUSH
76329: LD_VAR 0 40
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: PUSH
76342: LD_VAR 0 4
76346: PUSH
76347: LD_INT 1
76349: PLUS
76350: ARRAY
76351: ST_TO_ADDR
76352: GO 76719
76354: LD_INT 6
76356: DOUBLE
76357: EQUAL
76358: IFTRUE 76410
76360: LD_INT 7
76362: DOUBLE
76363: EQUAL
76364: IFTRUE 76410
76366: LD_INT 8
76368: DOUBLE
76369: EQUAL
76370: IFTRUE 76410
76372: LD_INT 13
76374: DOUBLE
76375: EQUAL
76376: IFTRUE 76410
76378: LD_INT 12
76380: DOUBLE
76381: EQUAL
76382: IFTRUE 76410
76384: LD_INT 15
76386: DOUBLE
76387: EQUAL
76388: IFTRUE 76410
76390: LD_INT 11
76392: DOUBLE
76393: EQUAL
76394: IFTRUE 76410
76396: LD_INT 14
76398: DOUBLE
76399: EQUAL
76400: IFTRUE 76410
76402: LD_INT 10
76404: DOUBLE
76405: EQUAL
76406: IFTRUE 76410
76408: GO 76466
76410: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
76411: LD_ADDR_VAR 0 9
76415: PUSH
76416: LD_VAR 0 41
76420: PUSH
76421: LD_VAR 0 42
76425: PUSH
76426: LD_VAR 0 43
76430: PUSH
76431: LD_VAR 0 44
76435: PUSH
76436: LD_VAR 0 45
76440: PUSH
76441: LD_VAR 0 46
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: PUSH
76454: LD_VAR 0 4
76458: PUSH
76459: LD_INT 1
76461: PLUS
76462: ARRAY
76463: ST_TO_ADDR
76464: GO 76719
76466: LD_INT 36
76468: DOUBLE
76469: EQUAL
76470: IFTRUE 76474
76472: GO 76530
76474: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76475: LD_ADDR_VAR 0 9
76479: PUSH
76480: LD_VAR 0 47
76484: PUSH
76485: LD_VAR 0 48
76489: PUSH
76490: LD_VAR 0 49
76494: PUSH
76495: LD_VAR 0 50
76499: PUSH
76500: LD_VAR 0 51
76504: PUSH
76505: LD_VAR 0 52
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: PUSH
76518: LD_VAR 0 4
76522: PUSH
76523: LD_INT 1
76525: PLUS
76526: ARRAY
76527: ST_TO_ADDR
76528: GO 76719
76530: LD_INT 4
76532: DOUBLE
76533: EQUAL
76534: IFTRUE 76556
76536: LD_INT 5
76538: DOUBLE
76539: EQUAL
76540: IFTRUE 76556
76542: LD_INT 34
76544: DOUBLE
76545: EQUAL
76546: IFTRUE 76556
76548: LD_INT 37
76550: DOUBLE
76551: EQUAL
76552: IFTRUE 76556
76554: GO 76612
76556: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76557: LD_ADDR_VAR 0 9
76561: PUSH
76562: LD_VAR 0 53
76566: PUSH
76567: LD_VAR 0 54
76571: PUSH
76572: LD_VAR 0 55
76576: PUSH
76577: LD_VAR 0 56
76581: PUSH
76582: LD_VAR 0 57
76586: PUSH
76587: LD_VAR 0 58
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: PUSH
76600: LD_VAR 0 4
76604: PUSH
76605: LD_INT 1
76607: PLUS
76608: ARRAY
76609: ST_TO_ADDR
76610: GO 76719
76612: LD_INT 31
76614: DOUBLE
76615: EQUAL
76616: IFTRUE 76662
76618: LD_INT 32
76620: DOUBLE
76621: EQUAL
76622: IFTRUE 76662
76624: LD_INT 33
76626: DOUBLE
76627: EQUAL
76628: IFTRUE 76662
76630: LD_INT 27
76632: DOUBLE
76633: EQUAL
76634: IFTRUE 76662
76636: LD_INT 26
76638: DOUBLE
76639: EQUAL
76640: IFTRUE 76662
76642: LD_INT 28
76644: DOUBLE
76645: EQUAL
76646: IFTRUE 76662
76648: LD_INT 29
76650: DOUBLE
76651: EQUAL
76652: IFTRUE 76662
76654: LD_INT 30
76656: DOUBLE
76657: EQUAL
76658: IFTRUE 76662
76660: GO 76718
76662: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76663: LD_ADDR_VAR 0 9
76667: PUSH
76668: LD_VAR 0 59
76672: PUSH
76673: LD_VAR 0 60
76677: PUSH
76678: LD_VAR 0 61
76682: PUSH
76683: LD_VAR 0 62
76687: PUSH
76688: LD_VAR 0 63
76692: PUSH
76693: LD_VAR 0 64
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: PUSH
76706: LD_VAR 0 4
76710: PUSH
76711: LD_INT 1
76713: PLUS
76714: ARRAY
76715: ST_TO_ADDR
76716: GO 76719
76718: POP
// temp_list2 = [ ] ;
76719: LD_ADDR_VAR 0 10
76723: PUSH
76724: EMPTY
76725: ST_TO_ADDR
// for i in temp_list do
76726: LD_ADDR_VAR 0 8
76730: PUSH
76731: LD_VAR 0 9
76735: PUSH
76736: FOR_IN
76737: IFFALSE 76789
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76739: LD_ADDR_VAR 0 10
76743: PUSH
76744: LD_VAR 0 10
76748: PUSH
76749: LD_VAR 0 8
76753: PUSH
76754: LD_INT 1
76756: ARRAY
76757: PUSH
76758: LD_VAR 0 2
76762: PLUS
76763: PUSH
76764: LD_VAR 0 8
76768: PUSH
76769: LD_INT 2
76771: ARRAY
76772: PUSH
76773: LD_VAR 0 3
76777: PLUS
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: EMPTY
76784: LIST
76785: ADD
76786: ST_TO_ADDR
76787: GO 76736
76789: POP
76790: POP
// result = temp_list2 ;
76791: LD_ADDR_VAR 0 7
76795: PUSH
76796: LD_VAR 0 10
76800: ST_TO_ADDR
// end ;
76801: LD_VAR 0 7
76805: RET
// export function EnemyInRange ( unit , dist ) ; begin
76806: LD_INT 0
76808: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76809: LD_ADDR_VAR 0 3
76813: PUSH
76814: LD_VAR 0 1
76818: PPUSH
76819: CALL_OW 255
76823: PPUSH
76824: LD_VAR 0 1
76828: PPUSH
76829: CALL_OW 250
76833: PPUSH
76834: LD_VAR 0 1
76838: PPUSH
76839: CALL_OW 251
76843: PPUSH
76844: LD_VAR 0 2
76848: PPUSH
76849: CALL 50202 0 4
76853: PUSH
76854: LD_INT 4
76856: ARRAY
76857: ST_TO_ADDR
// end ;
76858: LD_VAR 0 3
76862: RET
// export function PlayerSeeMe ( unit ) ; begin
76863: LD_INT 0
76865: PPUSH
// result := See ( your_side , unit ) ;
76866: LD_ADDR_VAR 0 2
76870: PUSH
76871: LD_OWVAR 2
76875: PPUSH
76876: LD_VAR 0 1
76880: PPUSH
76881: CALL_OW 292
76885: ST_TO_ADDR
// end ;
76886: LD_VAR 0 2
76890: RET
// export function ReverseDir ( unit ) ; begin
76891: LD_INT 0
76893: PPUSH
// if not unit then
76894: LD_VAR 0 1
76898: NOT
76899: IFFALSE 76903
// exit ;
76901: GO 76926
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76903: LD_ADDR_VAR 0 2
76907: PUSH
76908: LD_VAR 0 1
76912: PPUSH
76913: CALL_OW 254
76917: PUSH
76918: LD_INT 3
76920: PLUS
76921: PUSH
76922: LD_INT 6
76924: MOD
76925: ST_TO_ADDR
// end ;
76926: LD_VAR 0 2
76930: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
76931: LD_INT 0
76933: PPUSH
76934: PPUSH
76935: PPUSH
76936: PPUSH
76937: PPUSH
// if not hexes then
76938: LD_VAR 0 2
76942: NOT
76943: IFFALSE 76947
// exit ;
76945: GO 77095
// dist := 9999 ;
76947: LD_ADDR_VAR 0 5
76951: PUSH
76952: LD_INT 9999
76954: ST_TO_ADDR
// for i = 1 to hexes do
76955: LD_ADDR_VAR 0 4
76959: PUSH
76960: DOUBLE
76961: LD_INT 1
76963: DEC
76964: ST_TO_ADDR
76965: LD_VAR 0 2
76969: PUSH
76970: FOR_TO
76971: IFFALSE 77083
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
76973: LD_VAR 0 1
76977: PPUSH
76978: LD_VAR 0 2
76982: PUSH
76983: LD_VAR 0 4
76987: ARRAY
76988: PUSH
76989: LD_INT 1
76991: ARRAY
76992: PPUSH
76993: LD_VAR 0 2
76997: PUSH
76998: LD_VAR 0 4
77002: ARRAY
77003: PUSH
77004: LD_INT 2
77006: ARRAY
77007: PPUSH
77008: CALL_OW 297
77012: PUSH
77013: LD_VAR 0 5
77017: LESS
77018: IFFALSE 77081
// begin hex := hexes [ i ] ;
77020: LD_ADDR_VAR 0 7
77024: PUSH
77025: LD_VAR 0 2
77029: PUSH
77030: LD_VAR 0 4
77034: ARRAY
77035: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77036: LD_ADDR_VAR 0 5
77040: PUSH
77041: LD_VAR 0 1
77045: PPUSH
77046: LD_VAR 0 2
77050: PUSH
77051: LD_VAR 0 4
77055: ARRAY
77056: PUSH
77057: LD_INT 1
77059: ARRAY
77060: PPUSH
77061: LD_VAR 0 2
77065: PUSH
77066: LD_VAR 0 4
77070: ARRAY
77071: PUSH
77072: LD_INT 2
77074: ARRAY
77075: PPUSH
77076: CALL_OW 297
77080: ST_TO_ADDR
// end ; end ;
77081: GO 76970
77083: POP
77084: POP
// result := hex ;
77085: LD_ADDR_VAR 0 3
77089: PUSH
77090: LD_VAR 0 7
77094: ST_TO_ADDR
// end ;
77095: LD_VAR 0 3
77099: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77100: LD_INT 0
77102: PPUSH
77103: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77104: LD_VAR 0 1
77108: NOT
77109: PUSH
77110: LD_VAR 0 1
77114: PUSH
77115: LD_INT 21
77117: PUSH
77118: LD_INT 2
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: LD_INT 23
77127: PUSH
77128: LD_INT 2
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PPUSH
77139: CALL_OW 69
77143: IN
77144: NOT
77145: OR
77146: IFFALSE 77150
// exit ;
77148: GO 77197
// for i = 1 to 3 do
77150: LD_ADDR_VAR 0 3
77154: PUSH
77155: DOUBLE
77156: LD_INT 1
77158: DEC
77159: ST_TO_ADDR
77160: LD_INT 3
77162: PUSH
77163: FOR_TO
77164: IFFALSE 77195
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77166: LD_VAR 0 1
77170: PPUSH
77171: CALL_OW 250
77175: PPUSH
77176: LD_VAR 0 1
77180: PPUSH
77181: CALL_OW 251
77185: PPUSH
77186: LD_INT 1
77188: PPUSH
77189: CALL_OW 453
77193: GO 77163
77195: POP
77196: POP
// end ;
77197: LD_VAR 0 2
77201: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77202: LD_INT 0
77204: PPUSH
77205: PPUSH
77206: PPUSH
77207: PPUSH
77208: PPUSH
77209: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77210: LD_VAR 0 1
77214: NOT
77215: PUSH
77216: LD_VAR 0 2
77220: NOT
77221: OR
77222: PUSH
77223: LD_VAR 0 1
77227: PPUSH
77228: CALL_OW 314
77232: OR
77233: IFFALSE 77237
// exit ;
77235: GO 77678
// x := GetX ( enemy_unit ) ;
77237: LD_ADDR_VAR 0 7
77241: PUSH
77242: LD_VAR 0 2
77246: PPUSH
77247: CALL_OW 250
77251: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77252: LD_ADDR_VAR 0 8
77256: PUSH
77257: LD_VAR 0 2
77261: PPUSH
77262: CALL_OW 251
77266: ST_TO_ADDR
// if not x or not y then
77267: LD_VAR 0 7
77271: NOT
77272: PUSH
77273: LD_VAR 0 8
77277: NOT
77278: OR
77279: IFFALSE 77283
// exit ;
77281: GO 77678
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77283: LD_ADDR_VAR 0 6
77287: PUSH
77288: LD_VAR 0 7
77292: PPUSH
77293: LD_INT 0
77295: PPUSH
77296: LD_INT 4
77298: PPUSH
77299: CALL_OW 272
77303: PUSH
77304: LD_VAR 0 8
77308: PPUSH
77309: LD_INT 0
77311: PPUSH
77312: LD_INT 4
77314: PPUSH
77315: CALL_OW 273
77319: PUSH
77320: EMPTY
77321: LIST
77322: LIST
77323: PUSH
77324: LD_VAR 0 7
77328: PPUSH
77329: LD_INT 1
77331: PPUSH
77332: LD_INT 4
77334: PPUSH
77335: CALL_OW 272
77339: PUSH
77340: LD_VAR 0 8
77344: PPUSH
77345: LD_INT 1
77347: PPUSH
77348: LD_INT 4
77350: PPUSH
77351: CALL_OW 273
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PUSH
77360: LD_VAR 0 7
77364: PPUSH
77365: LD_INT 2
77367: PPUSH
77368: LD_INT 4
77370: PPUSH
77371: CALL_OW 272
77375: PUSH
77376: LD_VAR 0 8
77380: PPUSH
77381: LD_INT 2
77383: PPUSH
77384: LD_INT 4
77386: PPUSH
77387: CALL_OW 273
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: PUSH
77396: LD_VAR 0 7
77400: PPUSH
77401: LD_INT 3
77403: PPUSH
77404: LD_INT 4
77406: PPUSH
77407: CALL_OW 272
77411: PUSH
77412: LD_VAR 0 8
77416: PPUSH
77417: LD_INT 3
77419: PPUSH
77420: LD_INT 4
77422: PPUSH
77423: CALL_OW 273
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_VAR 0 7
77436: PPUSH
77437: LD_INT 4
77439: PPUSH
77440: LD_INT 4
77442: PPUSH
77443: CALL_OW 272
77447: PUSH
77448: LD_VAR 0 8
77452: PPUSH
77453: LD_INT 4
77455: PPUSH
77456: LD_INT 4
77458: PPUSH
77459: CALL_OW 273
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: LD_VAR 0 7
77472: PPUSH
77473: LD_INT 5
77475: PPUSH
77476: LD_INT 4
77478: PPUSH
77479: CALL_OW 272
77483: PUSH
77484: LD_VAR 0 8
77488: PPUSH
77489: LD_INT 5
77491: PPUSH
77492: LD_INT 4
77494: PPUSH
77495: CALL_OW 273
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: EMPTY
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: ST_TO_ADDR
// for i = tmp downto 1 do
77512: LD_ADDR_VAR 0 4
77516: PUSH
77517: DOUBLE
77518: LD_VAR 0 6
77522: INC
77523: ST_TO_ADDR
77524: LD_INT 1
77526: PUSH
77527: FOR_DOWNTO
77528: IFFALSE 77629
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77530: LD_VAR 0 6
77534: PUSH
77535: LD_VAR 0 4
77539: ARRAY
77540: PUSH
77541: LD_INT 1
77543: ARRAY
77544: PPUSH
77545: LD_VAR 0 6
77549: PUSH
77550: LD_VAR 0 4
77554: ARRAY
77555: PUSH
77556: LD_INT 2
77558: ARRAY
77559: PPUSH
77560: CALL_OW 488
77564: NOT
77565: PUSH
77566: LD_VAR 0 6
77570: PUSH
77571: LD_VAR 0 4
77575: ARRAY
77576: PUSH
77577: LD_INT 1
77579: ARRAY
77580: PPUSH
77581: LD_VAR 0 6
77585: PUSH
77586: LD_VAR 0 4
77590: ARRAY
77591: PUSH
77592: LD_INT 2
77594: ARRAY
77595: PPUSH
77596: CALL_OW 428
77600: PUSH
77601: LD_INT 0
77603: NONEQUAL
77604: OR
77605: IFFALSE 77627
// tmp := Delete ( tmp , i ) ;
77607: LD_ADDR_VAR 0 6
77611: PUSH
77612: LD_VAR 0 6
77616: PPUSH
77617: LD_VAR 0 4
77621: PPUSH
77622: CALL_OW 3
77626: ST_TO_ADDR
77627: GO 77527
77629: POP
77630: POP
// j := GetClosestHex ( unit , tmp ) ;
77631: LD_ADDR_VAR 0 5
77635: PUSH
77636: LD_VAR 0 1
77640: PPUSH
77641: LD_VAR 0 6
77645: PPUSH
77646: CALL 76931 0 2
77650: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77651: LD_VAR 0 1
77655: PPUSH
77656: LD_VAR 0 5
77660: PUSH
77661: LD_INT 1
77663: ARRAY
77664: PPUSH
77665: LD_VAR 0 5
77669: PUSH
77670: LD_INT 2
77672: ARRAY
77673: PPUSH
77674: CALL_OW 111
// end ;
77678: LD_VAR 0 3
77682: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77683: LD_INT 0
77685: PPUSH
77686: PPUSH
77687: PPUSH
// uc_side = 0 ;
77688: LD_ADDR_OWVAR 20
77692: PUSH
77693: LD_INT 0
77695: ST_TO_ADDR
// uc_nation = 0 ;
77696: LD_ADDR_OWVAR 21
77700: PUSH
77701: LD_INT 0
77703: ST_TO_ADDR
// InitHc_All ( ) ;
77704: CALL_OW 584
// InitVc ;
77708: CALL_OW 20
// if mastodonts then
77712: LD_VAR 0 6
77716: IFFALSE 77783
// for i = 1 to mastodonts do
77718: LD_ADDR_VAR 0 11
77722: PUSH
77723: DOUBLE
77724: LD_INT 1
77726: DEC
77727: ST_TO_ADDR
77728: LD_VAR 0 6
77732: PUSH
77733: FOR_TO
77734: IFFALSE 77781
// begin vc_chassis := 31 ;
77736: LD_ADDR_OWVAR 37
77740: PUSH
77741: LD_INT 31
77743: ST_TO_ADDR
// vc_control := control_rider ;
77744: LD_ADDR_OWVAR 38
77748: PUSH
77749: LD_INT 4
77751: ST_TO_ADDR
// animal := CreateVehicle ;
77752: LD_ADDR_VAR 0 12
77756: PUSH
77757: CALL_OW 45
77761: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77762: LD_VAR 0 12
77766: PPUSH
77767: LD_VAR 0 8
77771: PPUSH
77772: LD_INT 0
77774: PPUSH
77775: CALL 79971 0 3
// end ;
77779: GO 77733
77781: POP
77782: POP
// if horses then
77783: LD_VAR 0 5
77787: IFFALSE 77854
// for i = 1 to horses do
77789: LD_ADDR_VAR 0 11
77793: PUSH
77794: DOUBLE
77795: LD_INT 1
77797: DEC
77798: ST_TO_ADDR
77799: LD_VAR 0 5
77803: PUSH
77804: FOR_TO
77805: IFFALSE 77852
// begin hc_class := 21 ;
77807: LD_ADDR_OWVAR 28
77811: PUSH
77812: LD_INT 21
77814: ST_TO_ADDR
// hc_gallery :=  ;
77815: LD_ADDR_OWVAR 33
77819: PUSH
77820: LD_STRING 
77822: ST_TO_ADDR
// animal := CreateHuman ;
77823: LD_ADDR_VAR 0 12
77827: PUSH
77828: CALL_OW 44
77832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77833: LD_VAR 0 12
77837: PPUSH
77838: LD_VAR 0 8
77842: PPUSH
77843: LD_INT 0
77845: PPUSH
77846: CALL 79971 0 3
// end ;
77850: GO 77804
77852: POP
77853: POP
// if birds then
77854: LD_VAR 0 1
77858: IFFALSE 77925
// for i = 1 to birds do
77860: LD_ADDR_VAR 0 11
77864: PUSH
77865: DOUBLE
77866: LD_INT 1
77868: DEC
77869: ST_TO_ADDR
77870: LD_VAR 0 1
77874: PUSH
77875: FOR_TO
77876: IFFALSE 77923
// begin hc_class = 18 ;
77878: LD_ADDR_OWVAR 28
77882: PUSH
77883: LD_INT 18
77885: ST_TO_ADDR
// hc_gallery =  ;
77886: LD_ADDR_OWVAR 33
77890: PUSH
77891: LD_STRING 
77893: ST_TO_ADDR
// animal := CreateHuman ;
77894: LD_ADDR_VAR 0 12
77898: PUSH
77899: CALL_OW 44
77903: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77904: LD_VAR 0 12
77908: PPUSH
77909: LD_VAR 0 8
77913: PPUSH
77914: LD_INT 0
77916: PPUSH
77917: CALL 79971 0 3
// end ;
77921: GO 77875
77923: POP
77924: POP
// if tigers then
77925: LD_VAR 0 2
77929: IFFALSE 78013
// for i = 1 to tigers do
77931: LD_ADDR_VAR 0 11
77935: PUSH
77936: DOUBLE
77937: LD_INT 1
77939: DEC
77940: ST_TO_ADDR
77941: LD_VAR 0 2
77945: PUSH
77946: FOR_TO
77947: IFFALSE 78011
// begin hc_class = class_tiger ;
77949: LD_ADDR_OWVAR 28
77953: PUSH
77954: LD_INT 14
77956: ST_TO_ADDR
// hc_gallery =  ;
77957: LD_ADDR_OWVAR 33
77961: PUSH
77962: LD_STRING 
77964: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77965: LD_ADDR_OWVAR 35
77969: PUSH
77970: LD_INT 7
77972: NEG
77973: PPUSH
77974: LD_INT 7
77976: PPUSH
77977: CALL_OW 12
77981: ST_TO_ADDR
// animal := CreateHuman ;
77982: LD_ADDR_VAR 0 12
77986: PUSH
77987: CALL_OW 44
77991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77992: LD_VAR 0 12
77996: PPUSH
77997: LD_VAR 0 8
78001: PPUSH
78002: LD_INT 0
78004: PPUSH
78005: CALL 79971 0 3
// end ;
78009: GO 77946
78011: POP
78012: POP
// if apemans then
78013: LD_VAR 0 3
78017: IFFALSE 78140
// for i = 1 to apemans do
78019: LD_ADDR_VAR 0 11
78023: PUSH
78024: DOUBLE
78025: LD_INT 1
78027: DEC
78028: ST_TO_ADDR
78029: LD_VAR 0 3
78033: PUSH
78034: FOR_TO
78035: IFFALSE 78138
// begin hc_class = class_apeman ;
78037: LD_ADDR_OWVAR 28
78041: PUSH
78042: LD_INT 12
78044: ST_TO_ADDR
// hc_gallery =  ;
78045: LD_ADDR_OWVAR 33
78049: PUSH
78050: LD_STRING 
78052: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78053: LD_ADDR_OWVAR 35
78057: PUSH
78058: LD_INT 2
78060: NEG
78061: PPUSH
78062: LD_INT 2
78064: PPUSH
78065: CALL_OW 12
78069: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78070: LD_ADDR_OWVAR 31
78074: PUSH
78075: LD_INT 1
78077: PPUSH
78078: LD_INT 3
78080: PPUSH
78081: CALL_OW 12
78085: PUSH
78086: LD_INT 1
78088: PPUSH
78089: LD_INT 3
78091: PPUSH
78092: CALL_OW 12
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: LD_INT 0
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: ST_TO_ADDR
// animal := CreateHuman ;
78109: LD_ADDR_VAR 0 12
78113: PUSH
78114: CALL_OW 44
78118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78119: LD_VAR 0 12
78123: PPUSH
78124: LD_VAR 0 8
78128: PPUSH
78129: LD_INT 0
78131: PPUSH
78132: CALL 79971 0 3
// end ;
78136: GO 78034
78138: POP
78139: POP
// if enchidnas then
78140: LD_VAR 0 4
78144: IFFALSE 78211
// for i = 1 to enchidnas do
78146: LD_ADDR_VAR 0 11
78150: PUSH
78151: DOUBLE
78152: LD_INT 1
78154: DEC
78155: ST_TO_ADDR
78156: LD_VAR 0 4
78160: PUSH
78161: FOR_TO
78162: IFFALSE 78209
// begin hc_class = 13 ;
78164: LD_ADDR_OWVAR 28
78168: PUSH
78169: LD_INT 13
78171: ST_TO_ADDR
// hc_gallery =  ;
78172: LD_ADDR_OWVAR 33
78176: PUSH
78177: LD_STRING 
78179: ST_TO_ADDR
// animal := CreateHuman ;
78180: LD_ADDR_VAR 0 12
78184: PUSH
78185: CALL_OW 44
78189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78190: LD_VAR 0 12
78194: PPUSH
78195: LD_VAR 0 8
78199: PPUSH
78200: LD_INT 0
78202: PPUSH
78203: CALL 79971 0 3
// end ;
78207: GO 78161
78209: POP
78210: POP
// if fishes then
78211: LD_VAR 0 7
78215: IFFALSE 78282
// for i = 1 to fishes do
78217: LD_ADDR_VAR 0 11
78221: PUSH
78222: DOUBLE
78223: LD_INT 1
78225: DEC
78226: ST_TO_ADDR
78227: LD_VAR 0 7
78231: PUSH
78232: FOR_TO
78233: IFFALSE 78280
// begin hc_class = 20 ;
78235: LD_ADDR_OWVAR 28
78239: PUSH
78240: LD_INT 20
78242: ST_TO_ADDR
// hc_gallery =  ;
78243: LD_ADDR_OWVAR 33
78247: PUSH
78248: LD_STRING 
78250: ST_TO_ADDR
// animal := CreateHuman ;
78251: LD_ADDR_VAR 0 12
78255: PUSH
78256: CALL_OW 44
78260: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78261: LD_VAR 0 12
78265: PPUSH
78266: LD_VAR 0 9
78270: PPUSH
78271: LD_INT 0
78273: PPUSH
78274: CALL 79971 0 3
// end ;
78278: GO 78232
78280: POP
78281: POP
// end ;
78282: LD_VAR 0 10
78286: RET
// export function WantHeal ( sci , unit ) ; begin
78287: LD_INT 0
78289: PPUSH
// if GetTaskList ( sci ) > 0 then
78290: LD_VAR 0 1
78294: PPUSH
78295: CALL_OW 437
78299: PUSH
78300: LD_INT 0
78302: GREATER
78303: IFFALSE 78373
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78305: LD_VAR 0 1
78309: PPUSH
78310: CALL_OW 437
78314: PUSH
78315: LD_INT 1
78317: ARRAY
78318: PUSH
78319: LD_INT 1
78321: ARRAY
78322: PUSH
78323: LD_STRING l
78325: EQUAL
78326: PUSH
78327: LD_VAR 0 1
78331: PPUSH
78332: CALL_OW 437
78336: PUSH
78337: LD_INT 1
78339: ARRAY
78340: PUSH
78341: LD_INT 4
78343: ARRAY
78344: PUSH
78345: LD_VAR 0 2
78349: EQUAL
78350: AND
78351: IFFALSE 78363
// result := true else
78353: LD_ADDR_VAR 0 3
78357: PUSH
78358: LD_INT 1
78360: ST_TO_ADDR
78361: GO 78371
// result := false ;
78363: LD_ADDR_VAR 0 3
78367: PUSH
78368: LD_INT 0
78370: ST_TO_ADDR
// end else
78371: GO 78381
// result := false ;
78373: LD_ADDR_VAR 0 3
78377: PUSH
78378: LD_INT 0
78380: ST_TO_ADDR
// end ;
78381: LD_VAR 0 3
78385: RET
// export function HealTarget ( sci ) ; begin
78386: LD_INT 0
78388: PPUSH
// if not sci then
78389: LD_VAR 0 1
78393: NOT
78394: IFFALSE 78398
// exit ;
78396: GO 78463
// result := 0 ;
78398: LD_ADDR_VAR 0 2
78402: PUSH
78403: LD_INT 0
78405: ST_TO_ADDR
// if GetTaskList ( sci ) then
78406: LD_VAR 0 1
78410: PPUSH
78411: CALL_OW 437
78415: IFFALSE 78463
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78417: LD_VAR 0 1
78421: PPUSH
78422: CALL_OW 437
78426: PUSH
78427: LD_INT 1
78429: ARRAY
78430: PUSH
78431: LD_INT 1
78433: ARRAY
78434: PUSH
78435: LD_STRING l
78437: EQUAL
78438: IFFALSE 78463
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78440: LD_ADDR_VAR 0 2
78444: PUSH
78445: LD_VAR 0 1
78449: PPUSH
78450: CALL_OW 437
78454: PUSH
78455: LD_INT 1
78457: ARRAY
78458: PUSH
78459: LD_INT 4
78461: ARRAY
78462: ST_TO_ADDR
// end ;
78463: LD_VAR 0 2
78467: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78468: LD_INT 0
78470: PPUSH
78471: PPUSH
78472: PPUSH
78473: PPUSH
// if not base_units then
78474: LD_VAR 0 1
78478: NOT
78479: IFFALSE 78483
// exit ;
78481: GO 78570
// result := false ;
78483: LD_ADDR_VAR 0 2
78487: PUSH
78488: LD_INT 0
78490: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78491: LD_ADDR_VAR 0 5
78495: PUSH
78496: LD_VAR 0 1
78500: PPUSH
78501: LD_INT 21
78503: PUSH
78504: LD_INT 3
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: PPUSH
78511: CALL_OW 72
78515: ST_TO_ADDR
// if not tmp then
78516: LD_VAR 0 5
78520: NOT
78521: IFFALSE 78525
// exit ;
78523: GO 78570
// for i in tmp do
78525: LD_ADDR_VAR 0 3
78529: PUSH
78530: LD_VAR 0 5
78534: PUSH
78535: FOR_IN
78536: IFFALSE 78568
// begin result := EnemyInRange ( i , 22 ) ;
78538: LD_ADDR_VAR 0 2
78542: PUSH
78543: LD_VAR 0 3
78547: PPUSH
78548: LD_INT 22
78550: PPUSH
78551: CALL 76806 0 2
78555: ST_TO_ADDR
// if result then
78556: LD_VAR 0 2
78560: IFFALSE 78566
// exit ;
78562: POP
78563: POP
78564: GO 78570
// end ;
78566: GO 78535
78568: POP
78569: POP
// end ;
78570: LD_VAR 0 2
78574: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
78575: LD_INT 0
78577: PPUSH
78578: PPUSH
// if not units then
78579: LD_VAR 0 1
78583: NOT
78584: IFFALSE 78588
// exit ;
78586: GO 78658
// result := [ ] ;
78588: LD_ADDR_VAR 0 3
78592: PUSH
78593: EMPTY
78594: ST_TO_ADDR
// for i in units do
78595: LD_ADDR_VAR 0 4
78599: PUSH
78600: LD_VAR 0 1
78604: PUSH
78605: FOR_IN
78606: IFFALSE 78656
// if GetTag ( i ) = tag then
78608: LD_VAR 0 4
78612: PPUSH
78613: CALL_OW 110
78617: PUSH
78618: LD_VAR 0 2
78622: EQUAL
78623: IFFALSE 78654
// result := Insert ( result , result + 1 , i ) ;
78625: LD_ADDR_VAR 0 3
78629: PUSH
78630: LD_VAR 0 3
78634: PPUSH
78635: LD_VAR 0 3
78639: PUSH
78640: LD_INT 1
78642: PLUS
78643: PPUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: CALL_OW 2
78653: ST_TO_ADDR
78654: GO 78605
78656: POP
78657: POP
// end ;
78658: LD_VAR 0 3
78662: RET
// export function IsDriver ( un ) ; begin
78663: LD_INT 0
78665: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78666: LD_ADDR_VAR 0 2
78670: PUSH
78671: LD_VAR 0 1
78675: PUSH
78676: LD_INT 55
78678: PUSH
78679: EMPTY
78680: LIST
78681: PPUSH
78682: CALL_OW 69
78686: IN
78687: ST_TO_ADDR
// end ;
78688: LD_VAR 0 2
78692: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78693: LD_INT 0
78695: PPUSH
78696: PPUSH
// list := [ ] ;
78697: LD_ADDR_VAR 0 5
78701: PUSH
78702: EMPTY
78703: ST_TO_ADDR
// case d of 0 :
78704: LD_VAR 0 3
78708: PUSH
78709: LD_INT 0
78711: DOUBLE
78712: EQUAL
78713: IFTRUE 78717
78715: GO 78850
78717: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78718: LD_ADDR_VAR 0 5
78722: PUSH
78723: LD_VAR 0 1
78727: PUSH
78728: LD_INT 4
78730: MINUS
78731: PUSH
78732: LD_VAR 0 2
78736: PUSH
78737: LD_INT 4
78739: MINUS
78740: PUSH
78741: LD_INT 2
78743: PUSH
78744: EMPTY
78745: LIST
78746: LIST
78747: LIST
78748: PUSH
78749: LD_VAR 0 1
78753: PUSH
78754: LD_INT 3
78756: MINUS
78757: PUSH
78758: LD_VAR 0 2
78762: PUSH
78763: LD_INT 1
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: LIST
78770: PUSH
78771: LD_VAR 0 1
78775: PUSH
78776: LD_INT 4
78778: PLUS
78779: PUSH
78780: LD_VAR 0 2
78784: PUSH
78785: LD_INT 4
78787: PUSH
78788: EMPTY
78789: LIST
78790: LIST
78791: LIST
78792: PUSH
78793: LD_VAR 0 1
78797: PUSH
78798: LD_INT 3
78800: PLUS
78801: PUSH
78802: LD_VAR 0 2
78806: PUSH
78807: LD_INT 3
78809: PLUS
78810: PUSH
78811: LD_INT 5
78813: PUSH
78814: EMPTY
78815: LIST
78816: LIST
78817: LIST
78818: PUSH
78819: LD_VAR 0 1
78823: PUSH
78824: LD_VAR 0 2
78828: PUSH
78829: LD_INT 4
78831: PLUS
78832: PUSH
78833: LD_INT 0
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: LIST
78840: PUSH
78841: EMPTY
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: ST_TO_ADDR
// end ; 1 :
78848: GO 79548
78850: LD_INT 1
78852: DOUBLE
78853: EQUAL
78854: IFTRUE 78858
78856: GO 78991
78858: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78859: LD_ADDR_VAR 0 5
78863: PUSH
78864: LD_VAR 0 1
78868: PUSH
78869: LD_VAR 0 2
78873: PUSH
78874: LD_INT 4
78876: MINUS
78877: PUSH
78878: LD_INT 3
78880: PUSH
78881: EMPTY
78882: LIST
78883: LIST
78884: LIST
78885: PUSH
78886: LD_VAR 0 1
78890: PUSH
78891: LD_INT 3
78893: MINUS
78894: PUSH
78895: LD_VAR 0 2
78899: PUSH
78900: LD_INT 3
78902: MINUS
78903: PUSH
78904: LD_INT 2
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: LIST
78911: PUSH
78912: LD_VAR 0 1
78916: PUSH
78917: LD_INT 4
78919: MINUS
78920: PUSH
78921: LD_VAR 0 2
78925: PUSH
78926: LD_INT 1
78928: PUSH
78929: EMPTY
78930: LIST
78931: LIST
78932: LIST
78933: PUSH
78934: LD_VAR 0 1
78938: PUSH
78939: LD_VAR 0 2
78943: PUSH
78944: LD_INT 3
78946: PLUS
78947: PUSH
78948: LD_INT 0
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: PUSH
78956: LD_VAR 0 1
78960: PUSH
78961: LD_INT 4
78963: PLUS
78964: PUSH
78965: LD_VAR 0 2
78969: PUSH
78970: LD_INT 4
78972: PLUS
78973: PUSH
78974: LD_INT 5
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: LIST
78981: PUSH
78982: EMPTY
78983: LIST
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: ST_TO_ADDR
// end ; 2 :
78989: GO 79548
78991: LD_INT 2
78993: DOUBLE
78994: EQUAL
78995: IFTRUE 78999
78997: GO 79128
78999: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79000: LD_ADDR_VAR 0 5
79004: PUSH
79005: LD_VAR 0 1
79009: PUSH
79010: LD_VAR 0 2
79014: PUSH
79015: LD_INT 3
79017: MINUS
79018: PUSH
79019: LD_INT 3
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: LIST
79026: PUSH
79027: LD_VAR 0 1
79031: PUSH
79032: LD_INT 4
79034: PLUS
79035: PUSH
79036: LD_VAR 0 2
79040: PUSH
79041: LD_INT 4
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: LIST
79048: PUSH
79049: LD_VAR 0 1
79053: PUSH
79054: LD_VAR 0 2
79058: PUSH
79059: LD_INT 4
79061: PLUS
79062: PUSH
79063: LD_INT 0
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: LIST
79070: PUSH
79071: LD_VAR 0 1
79075: PUSH
79076: LD_INT 3
79078: MINUS
79079: PUSH
79080: LD_VAR 0 2
79084: PUSH
79085: LD_INT 1
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: LIST
79092: PUSH
79093: LD_VAR 0 1
79097: PUSH
79098: LD_INT 4
79100: MINUS
79101: PUSH
79102: LD_VAR 0 2
79106: PUSH
79107: LD_INT 4
79109: MINUS
79110: PUSH
79111: LD_INT 2
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: LIST
79118: PUSH
79119: EMPTY
79120: LIST
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: ST_TO_ADDR
// end ; 3 :
79126: GO 79548
79128: LD_INT 3
79130: DOUBLE
79131: EQUAL
79132: IFTRUE 79136
79134: GO 79269
79136: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79137: LD_ADDR_VAR 0 5
79141: PUSH
79142: LD_VAR 0 1
79146: PUSH
79147: LD_INT 3
79149: PLUS
79150: PUSH
79151: LD_VAR 0 2
79155: PUSH
79156: LD_INT 4
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: LIST
79163: PUSH
79164: LD_VAR 0 1
79168: PUSH
79169: LD_INT 4
79171: PLUS
79172: PUSH
79173: LD_VAR 0 2
79177: PUSH
79178: LD_INT 4
79180: PLUS
79181: PUSH
79182: LD_INT 5
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: LIST
79189: PUSH
79190: LD_VAR 0 1
79194: PUSH
79195: LD_INT 4
79197: MINUS
79198: PUSH
79199: LD_VAR 0 2
79203: PUSH
79204: LD_INT 1
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: LIST
79211: PUSH
79212: LD_VAR 0 1
79216: PUSH
79217: LD_VAR 0 2
79221: PUSH
79222: LD_INT 4
79224: MINUS
79225: PUSH
79226: LD_INT 3
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: LIST
79233: PUSH
79234: LD_VAR 0 1
79238: PUSH
79239: LD_INT 3
79241: MINUS
79242: PUSH
79243: LD_VAR 0 2
79247: PUSH
79248: LD_INT 3
79250: MINUS
79251: PUSH
79252: LD_INT 2
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: LIST
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: LIST
79264: LIST
79265: LIST
79266: ST_TO_ADDR
// end ; 4 :
79267: GO 79548
79269: LD_INT 4
79271: DOUBLE
79272: EQUAL
79273: IFTRUE 79277
79275: GO 79410
79277: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79278: LD_ADDR_VAR 0 5
79282: PUSH
79283: LD_VAR 0 1
79287: PUSH
79288: LD_VAR 0 2
79292: PUSH
79293: LD_INT 4
79295: PLUS
79296: PUSH
79297: LD_INT 0
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: LIST
79304: PUSH
79305: LD_VAR 0 1
79309: PUSH
79310: LD_INT 3
79312: PLUS
79313: PUSH
79314: LD_VAR 0 2
79318: PUSH
79319: LD_INT 3
79321: PLUS
79322: PUSH
79323: LD_INT 5
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: LIST
79330: PUSH
79331: LD_VAR 0 1
79335: PUSH
79336: LD_INT 4
79338: PLUS
79339: PUSH
79340: LD_VAR 0 2
79344: PUSH
79345: LD_INT 4
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: LIST
79352: PUSH
79353: LD_VAR 0 1
79357: PUSH
79358: LD_VAR 0 2
79362: PUSH
79363: LD_INT 3
79365: MINUS
79366: PUSH
79367: LD_INT 3
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: LIST
79374: PUSH
79375: LD_VAR 0 1
79379: PUSH
79380: LD_INT 4
79382: MINUS
79383: PUSH
79384: LD_VAR 0 2
79388: PUSH
79389: LD_INT 4
79391: MINUS
79392: PUSH
79393: LD_INT 2
79395: PUSH
79396: EMPTY
79397: LIST
79398: LIST
79399: LIST
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: LIST
79405: LIST
79406: LIST
79407: ST_TO_ADDR
// end ; 5 :
79408: GO 79548
79410: LD_INT 5
79412: DOUBLE
79413: EQUAL
79414: IFTRUE 79418
79416: GO 79547
79418: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79419: LD_ADDR_VAR 0 5
79423: PUSH
79424: LD_VAR 0 1
79428: PUSH
79429: LD_INT 4
79431: MINUS
79432: PUSH
79433: LD_VAR 0 2
79437: PUSH
79438: LD_INT 1
79440: PUSH
79441: EMPTY
79442: LIST
79443: LIST
79444: LIST
79445: PUSH
79446: LD_VAR 0 1
79450: PUSH
79451: LD_VAR 0 2
79455: PUSH
79456: LD_INT 4
79458: MINUS
79459: PUSH
79460: LD_INT 3
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: LIST
79467: PUSH
79468: LD_VAR 0 1
79472: PUSH
79473: LD_INT 4
79475: PLUS
79476: PUSH
79477: LD_VAR 0 2
79481: PUSH
79482: LD_INT 4
79484: PLUS
79485: PUSH
79486: LD_INT 5
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: LIST
79493: PUSH
79494: LD_VAR 0 1
79498: PUSH
79499: LD_INT 3
79501: PLUS
79502: PUSH
79503: LD_VAR 0 2
79507: PUSH
79508: LD_INT 4
79510: PUSH
79511: EMPTY
79512: LIST
79513: LIST
79514: LIST
79515: PUSH
79516: LD_VAR 0 1
79520: PUSH
79521: LD_VAR 0 2
79525: PUSH
79526: LD_INT 3
79528: PLUS
79529: PUSH
79530: LD_INT 0
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: LIST
79537: PUSH
79538: EMPTY
79539: LIST
79540: LIST
79541: LIST
79542: LIST
79543: LIST
79544: ST_TO_ADDR
// end ; end ;
79545: GO 79548
79547: POP
// result := list ;
79548: LD_ADDR_VAR 0 4
79552: PUSH
79553: LD_VAR 0 5
79557: ST_TO_ADDR
// end ;
79558: LD_VAR 0 4
79562: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79563: LD_INT 0
79565: PPUSH
79566: PPUSH
79567: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79568: LD_VAR 0 1
79572: NOT
79573: PUSH
79574: LD_VAR 0 2
79578: PUSH
79579: LD_INT 1
79581: PUSH
79582: LD_INT 2
79584: PUSH
79585: LD_INT 3
79587: PUSH
79588: LD_INT 4
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: LIST
79595: LIST
79596: IN
79597: NOT
79598: OR
79599: IFFALSE 79603
// exit ;
79601: GO 79695
// tmp := [ ] ;
79603: LD_ADDR_VAR 0 5
79607: PUSH
79608: EMPTY
79609: ST_TO_ADDR
// for i in units do
79610: LD_ADDR_VAR 0 4
79614: PUSH
79615: LD_VAR 0 1
79619: PUSH
79620: FOR_IN
79621: IFFALSE 79664
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
79623: LD_ADDR_VAR 0 5
79627: PUSH
79628: LD_VAR 0 5
79632: PPUSH
79633: LD_VAR 0 5
79637: PUSH
79638: LD_INT 1
79640: PLUS
79641: PPUSH
79642: LD_VAR 0 4
79646: PPUSH
79647: LD_VAR 0 2
79651: PPUSH
79652: CALL_OW 259
79656: PPUSH
79657: CALL_OW 2
79661: ST_TO_ADDR
79662: GO 79620
79664: POP
79665: POP
// if not tmp then
79666: LD_VAR 0 5
79670: NOT
79671: IFFALSE 79675
// exit ;
79673: GO 79695
// result := SortListByListDesc ( units , tmp ) ;
79675: LD_ADDR_VAR 0 3
79679: PUSH
79680: LD_VAR 0 1
79684: PPUSH
79685: LD_VAR 0 5
79689: PPUSH
79690: CALL_OW 77
79694: ST_TO_ADDR
// end ;
79695: LD_VAR 0 3
79699: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79700: LD_INT 0
79702: PPUSH
79703: PPUSH
79704: PPUSH
// result := false ;
79705: LD_ADDR_VAR 0 3
79709: PUSH
79710: LD_INT 0
79712: ST_TO_ADDR
// x := GetX ( building ) ;
79713: LD_ADDR_VAR 0 4
79717: PUSH
79718: LD_VAR 0 2
79722: PPUSH
79723: CALL_OW 250
79727: ST_TO_ADDR
// y := GetY ( building ) ;
79728: LD_ADDR_VAR 0 5
79732: PUSH
79733: LD_VAR 0 2
79737: PPUSH
79738: CALL_OW 251
79742: ST_TO_ADDR
// if not building or not x or not y then
79743: LD_VAR 0 2
79747: NOT
79748: PUSH
79749: LD_VAR 0 4
79753: NOT
79754: OR
79755: PUSH
79756: LD_VAR 0 5
79760: NOT
79761: OR
79762: IFFALSE 79766
// exit ;
79764: GO 79858
// if GetTaskList ( unit ) then
79766: LD_VAR 0 1
79770: PPUSH
79771: CALL_OW 437
79775: IFFALSE 79858
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79777: LD_STRING e
79779: PUSH
79780: LD_VAR 0 1
79784: PPUSH
79785: CALL_OW 437
79789: PUSH
79790: LD_INT 1
79792: ARRAY
79793: PUSH
79794: LD_INT 1
79796: ARRAY
79797: EQUAL
79798: PUSH
79799: LD_VAR 0 4
79803: PUSH
79804: LD_VAR 0 1
79808: PPUSH
79809: CALL_OW 437
79813: PUSH
79814: LD_INT 1
79816: ARRAY
79817: PUSH
79818: LD_INT 2
79820: ARRAY
79821: EQUAL
79822: AND
79823: PUSH
79824: LD_VAR 0 5
79828: PUSH
79829: LD_VAR 0 1
79833: PPUSH
79834: CALL_OW 437
79838: PUSH
79839: LD_INT 1
79841: ARRAY
79842: PUSH
79843: LD_INT 3
79845: ARRAY
79846: EQUAL
79847: AND
79848: IFFALSE 79858
// result := true end ;
79850: LD_ADDR_VAR 0 3
79854: PUSH
79855: LD_INT 1
79857: ST_TO_ADDR
// end ;
79858: LD_VAR 0 3
79862: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79863: LD_INT 0
79865: PPUSH
// result := false ;
79866: LD_ADDR_VAR 0 4
79870: PUSH
79871: LD_INT 0
79873: ST_TO_ADDR
// if GetTaskList ( unit ) then
79874: LD_VAR 0 1
79878: PPUSH
79879: CALL_OW 437
79883: IFFALSE 79966
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79885: LD_STRING M
79887: PUSH
79888: LD_VAR 0 1
79892: PPUSH
79893: CALL_OW 437
79897: PUSH
79898: LD_INT 1
79900: ARRAY
79901: PUSH
79902: LD_INT 1
79904: ARRAY
79905: EQUAL
79906: PUSH
79907: LD_VAR 0 2
79911: PUSH
79912: LD_VAR 0 1
79916: PPUSH
79917: CALL_OW 437
79921: PUSH
79922: LD_INT 1
79924: ARRAY
79925: PUSH
79926: LD_INT 2
79928: ARRAY
79929: EQUAL
79930: AND
79931: PUSH
79932: LD_VAR 0 3
79936: PUSH
79937: LD_VAR 0 1
79941: PPUSH
79942: CALL_OW 437
79946: PUSH
79947: LD_INT 1
79949: ARRAY
79950: PUSH
79951: LD_INT 3
79953: ARRAY
79954: EQUAL
79955: AND
79956: IFFALSE 79966
// result := true ;
79958: LD_ADDR_VAR 0 4
79962: PUSH
79963: LD_INT 1
79965: ST_TO_ADDR
// end ; end ;
79966: LD_VAR 0 4
79970: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79971: LD_INT 0
79973: PPUSH
79974: PPUSH
79975: PPUSH
79976: PPUSH
// if not unit or not area then
79977: LD_VAR 0 1
79981: NOT
79982: PUSH
79983: LD_VAR 0 2
79987: NOT
79988: OR
79989: IFFALSE 79993
// exit ;
79991: GO 80157
// tmp := AreaToList ( area , i ) ;
79993: LD_ADDR_VAR 0 6
79997: PUSH
79998: LD_VAR 0 2
80002: PPUSH
80003: LD_VAR 0 5
80007: PPUSH
80008: CALL_OW 517
80012: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80013: LD_ADDR_VAR 0 5
80017: PUSH
80018: DOUBLE
80019: LD_INT 1
80021: DEC
80022: ST_TO_ADDR
80023: LD_VAR 0 6
80027: PUSH
80028: LD_INT 1
80030: ARRAY
80031: PUSH
80032: FOR_TO
80033: IFFALSE 80155
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80035: LD_ADDR_VAR 0 7
80039: PUSH
80040: LD_VAR 0 6
80044: PUSH
80045: LD_INT 1
80047: ARRAY
80048: PUSH
80049: LD_VAR 0 5
80053: ARRAY
80054: PUSH
80055: LD_VAR 0 6
80059: PUSH
80060: LD_INT 2
80062: ARRAY
80063: PUSH
80064: LD_VAR 0 5
80068: ARRAY
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80074: LD_VAR 0 7
80078: PUSH
80079: LD_INT 1
80081: ARRAY
80082: PPUSH
80083: LD_VAR 0 7
80087: PUSH
80088: LD_INT 2
80090: ARRAY
80091: PPUSH
80092: CALL_OW 428
80096: PUSH
80097: LD_INT 0
80099: EQUAL
80100: IFFALSE 80153
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80102: LD_VAR 0 1
80106: PPUSH
80107: LD_VAR 0 7
80111: PUSH
80112: LD_INT 1
80114: ARRAY
80115: PPUSH
80116: LD_VAR 0 7
80120: PUSH
80121: LD_INT 2
80123: ARRAY
80124: PPUSH
80125: LD_VAR 0 3
80129: PPUSH
80130: CALL_OW 48
// result := IsPlaced ( unit ) ;
80134: LD_ADDR_VAR 0 4
80138: PUSH
80139: LD_VAR 0 1
80143: PPUSH
80144: CALL_OW 305
80148: ST_TO_ADDR
// exit ;
80149: POP
80150: POP
80151: GO 80157
// end ; end ;
80153: GO 80032
80155: POP
80156: POP
// end ;
80157: LD_VAR 0 4
80161: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80162: LD_INT 0
80164: PPUSH
80165: PPUSH
80166: PPUSH
// if not side or side > 8 then
80167: LD_VAR 0 1
80171: NOT
80172: PUSH
80173: LD_VAR 0 1
80177: PUSH
80178: LD_INT 8
80180: GREATER
80181: OR
80182: IFFALSE 80186
// exit ;
80184: GO 80373
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80186: LD_ADDR_VAR 0 4
80190: PUSH
80191: LD_INT 22
80193: PUSH
80194: LD_VAR 0 1
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: PUSH
80203: LD_INT 21
80205: PUSH
80206: LD_INT 3
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PPUSH
80217: CALL_OW 69
80221: ST_TO_ADDR
// if not tmp then
80222: LD_VAR 0 4
80226: NOT
80227: IFFALSE 80231
// exit ;
80229: GO 80373
// enable_addtolog := true ;
80231: LD_ADDR_OWVAR 81
80235: PUSH
80236: LD_INT 1
80238: ST_TO_ADDR
// AddToLog ( [ ) ;
80239: LD_STRING [
80241: PPUSH
80242: CALL_OW 561
// for i in tmp do
80246: LD_ADDR_VAR 0 3
80250: PUSH
80251: LD_VAR 0 4
80255: PUSH
80256: FOR_IN
80257: IFFALSE 80364
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80259: LD_STRING [
80261: PUSH
80262: LD_VAR 0 3
80266: PPUSH
80267: CALL_OW 266
80271: STR
80272: PUSH
80273: LD_STRING , 
80275: STR
80276: PUSH
80277: LD_VAR 0 3
80281: PPUSH
80282: CALL_OW 250
80286: STR
80287: PUSH
80288: LD_STRING , 
80290: STR
80291: PUSH
80292: LD_VAR 0 3
80296: PPUSH
80297: CALL_OW 251
80301: STR
80302: PUSH
80303: LD_STRING , 
80305: STR
80306: PUSH
80307: LD_VAR 0 3
80311: PPUSH
80312: CALL_OW 254
80316: STR
80317: PUSH
80318: LD_STRING , 
80320: STR
80321: PUSH
80322: LD_VAR 0 3
80326: PPUSH
80327: LD_INT 1
80329: PPUSH
80330: CALL_OW 268
80334: STR
80335: PUSH
80336: LD_STRING , 
80338: STR
80339: PUSH
80340: LD_VAR 0 3
80344: PPUSH
80345: LD_INT 2
80347: PPUSH
80348: CALL_OW 268
80352: STR
80353: PUSH
80354: LD_STRING ],
80356: STR
80357: PPUSH
80358: CALL_OW 561
// end ;
80362: GO 80256
80364: POP
80365: POP
// AddToLog ( ]; ) ;
80366: LD_STRING ];
80368: PPUSH
80369: CALL_OW 561
// end ;
80373: LD_VAR 0 2
80377: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80378: LD_INT 0
80380: PPUSH
80381: PPUSH
80382: PPUSH
80383: PPUSH
80384: PPUSH
// if not area or not rate or not max then
80385: LD_VAR 0 1
80389: NOT
80390: PUSH
80391: LD_VAR 0 2
80395: NOT
80396: OR
80397: PUSH
80398: LD_VAR 0 4
80402: NOT
80403: OR
80404: IFFALSE 80408
// exit ;
80406: GO 80600
// while 1 do
80408: LD_INT 1
80410: IFFALSE 80600
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80412: LD_ADDR_VAR 0 9
80416: PUSH
80417: LD_VAR 0 1
80421: PPUSH
80422: LD_INT 1
80424: PPUSH
80425: CALL_OW 287
80429: PUSH
80430: LD_INT 10
80432: MUL
80433: ST_TO_ADDR
// r := rate / 10 ;
80434: LD_ADDR_VAR 0 7
80438: PUSH
80439: LD_VAR 0 2
80443: PUSH
80444: LD_INT 10
80446: DIVREAL
80447: ST_TO_ADDR
// time := 1 1$00 ;
80448: LD_ADDR_VAR 0 8
80452: PUSH
80453: LD_INT 2100
80455: ST_TO_ADDR
// if amount < min then
80456: LD_VAR 0 9
80460: PUSH
80461: LD_VAR 0 3
80465: LESS
80466: IFFALSE 80484
// r := r * 2 else
80468: LD_ADDR_VAR 0 7
80472: PUSH
80473: LD_VAR 0 7
80477: PUSH
80478: LD_INT 2
80480: MUL
80481: ST_TO_ADDR
80482: GO 80510
// if amount > max then
80484: LD_VAR 0 9
80488: PUSH
80489: LD_VAR 0 4
80493: GREATER
80494: IFFALSE 80510
// r := r / 2 ;
80496: LD_ADDR_VAR 0 7
80500: PUSH
80501: LD_VAR 0 7
80505: PUSH
80506: LD_INT 2
80508: DIVREAL
80509: ST_TO_ADDR
// time := time / r ;
80510: LD_ADDR_VAR 0 8
80514: PUSH
80515: LD_VAR 0 8
80519: PUSH
80520: LD_VAR 0 7
80524: DIVREAL
80525: ST_TO_ADDR
// if time < 0 then
80526: LD_VAR 0 8
80530: PUSH
80531: LD_INT 0
80533: LESS
80534: IFFALSE 80551
// time := time * - 1 ;
80536: LD_ADDR_VAR 0 8
80540: PUSH
80541: LD_VAR 0 8
80545: PUSH
80546: LD_INT 1
80548: NEG
80549: MUL
80550: ST_TO_ADDR
// wait ( time ) ;
80551: LD_VAR 0 8
80555: PPUSH
80556: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
80560: LD_INT 35
80562: PPUSH
80563: LD_INT 875
80565: PPUSH
80566: CALL_OW 12
80570: PPUSH
80571: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80575: LD_INT 1
80577: PPUSH
80578: LD_INT 5
80580: PPUSH
80581: CALL_OW 12
80585: PPUSH
80586: LD_VAR 0 1
80590: PPUSH
80591: LD_INT 1
80593: PPUSH
80594: CALL_OW 55
// end ;
80598: GO 80408
// end ;
80600: LD_VAR 0 5
80604: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80605: LD_INT 0
80607: PPUSH
80608: PPUSH
80609: PPUSH
80610: PPUSH
80611: PPUSH
80612: PPUSH
80613: PPUSH
80614: PPUSH
// if not turrets or not factories then
80615: LD_VAR 0 1
80619: NOT
80620: PUSH
80621: LD_VAR 0 2
80625: NOT
80626: OR
80627: IFFALSE 80631
// exit ;
80629: GO 80938
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80631: LD_ADDR_VAR 0 10
80635: PUSH
80636: LD_INT 5
80638: PUSH
80639: LD_INT 6
80641: PUSH
80642: EMPTY
80643: LIST
80644: LIST
80645: PUSH
80646: LD_INT 2
80648: PUSH
80649: LD_INT 4
80651: PUSH
80652: EMPTY
80653: LIST
80654: LIST
80655: PUSH
80656: LD_INT 3
80658: PUSH
80659: LD_INT 5
80661: PUSH
80662: EMPTY
80663: LIST
80664: LIST
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: LIST
80670: PUSH
80671: LD_INT 24
80673: PUSH
80674: LD_INT 25
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PUSH
80681: LD_INT 23
80683: PUSH
80684: LD_INT 27
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: PUSH
80691: EMPTY
80692: LIST
80693: LIST
80694: PUSH
80695: LD_INT 42
80697: PUSH
80698: LD_INT 43
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: PUSH
80705: LD_INT 44
80707: PUSH
80708: LD_INT 46
80710: PUSH
80711: EMPTY
80712: LIST
80713: LIST
80714: PUSH
80715: LD_INT 45
80717: PUSH
80718: LD_INT 47
80720: PUSH
80721: EMPTY
80722: LIST
80723: LIST
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: LIST
80729: PUSH
80730: EMPTY
80731: LIST
80732: LIST
80733: LIST
80734: ST_TO_ADDR
// result := [ ] ;
80735: LD_ADDR_VAR 0 3
80739: PUSH
80740: EMPTY
80741: ST_TO_ADDR
// for i in turrets do
80742: LD_ADDR_VAR 0 4
80746: PUSH
80747: LD_VAR 0 1
80751: PUSH
80752: FOR_IN
80753: IFFALSE 80936
// begin nat := GetNation ( i ) ;
80755: LD_ADDR_VAR 0 7
80759: PUSH
80760: LD_VAR 0 4
80764: PPUSH
80765: CALL_OW 248
80769: ST_TO_ADDR
// weapon := 0 ;
80770: LD_ADDR_VAR 0 8
80774: PUSH
80775: LD_INT 0
80777: ST_TO_ADDR
// if not nat then
80778: LD_VAR 0 7
80782: NOT
80783: IFFALSE 80787
// continue ;
80785: GO 80752
// for j in list [ nat ] do
80787: LD_ADDR_VAR 0 5
80791: PUSH
80792: LD_VAR 0 10
80796: PUSH
80797: LD_VAR 0 7
80801: ARRAY
80802: PUSH
80803: FOR_IN
80804: IFFALSE 80845
// if GetBWeapon ( i ) = j [ 1 ] then
80806: LD_VAR 0 4
80810: PPUSH
80811: CALL_OW 269
80815: PUSH
80816: LD_VAR 0 5
80820: PUSH
80821: LD_INT 1
80823: ARRAY
80824: EQUAL
80825: IFFALSE 80843
// begin weapon := j [ 2 ] ;
80827: LD_ADDR_VAR 0 8
80831: PUSH
80832: LD_VAR 0 5
80836: PUSH
80837: LD_INT 2
80839: ARRAY
80840: ST_TO_ADDR
// break ;
80841: GO 80845
// end ;
80843: GO 80803
80845: POP
80846: POP
// if not weapon then
80847: LD_VAR 0 8
80851: NOT
80852: IFFALSE 80856
// continue ;
80854: GO 80752
// for k in factories do
80856: LD_ADDR_VAR 0 6
80860: PUSH
80861: LD_VAR 0 2
80865: PUSH
80866: FOR_IN
80867: IFFALSE 80932
// begin weapons := AvailableWeaponList ( k ) ;
80869: LD_ADDR_VAR 0 9
80873: PUSH
80874: LD_VAR 0 6
80878: PPUSH
80879: CALL_OW 478
80883: ST_TO_ADDR
// if not weapons then
80884: LD_VAR 0 9
80888: NOT
80889: IFFALSE 80893
// continue ;
80891: GO 80866
// if weapon in weapons then
80893: LD_VAR 0 8
80897: PUSH
80898: LD_VAR 0 9
80902: IN
80903: IFFALSE 80930
// begin result := [ i , weapon ] ;
80905: LD_ADDR_VAR 0 3
80909: PUSH
80910: LD_VAR 0 4
80914: PUSH
80915: LD_VAR 0 8
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: ST_TO_ADDR
// exit ;
80924: POP
80925: POP
80926: POP
80927: POP
80928: GO 80938
// end ; end ;
80930: GO 80866
80932: POP
80933: POP
// end ;
80934: GO 80752
80936: POP
80937: POP
// end ;
80938: LD_VAR 0 3
80942: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80943: LD_INT 0
80945: PPUSH
// if not side or side > 8 then
80946: LD_VAR 0 3
80950: NOT
80951: PUSH
80952: LD_VAR 0 3
80956: PUSH
80957: LD_INT 8
80959: GREATER
80960: OR
80961: IFFALSE 80965
// exit ;
80963: GO 81024
// if not range then
80965: LD_VAR 0 4
80969: NOT
80970: IFFALSE 80981
// range := - 12 ;
80972: LD_ADDR_VAR 0 4
80976: PUSH
80977: LD_INT 12
80979: NEG
80980: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80981: LD_VAR 0 1
80985: PPUSH
80986: LD_VAR 0 2
80990: PPUSH
80991: LD_VAR 0 3
80995: PPUSH
80996: LD_VAR 0 4
81000: PPUSH
81001: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81005: LD_VAR 0 1
81009: PPUSH
81010: LD_VAR 0 2
81014: PPUSH
81015: LD_VAR 0 3
81019: PPUSH
81020: CALL_OW 331
// end ;
81024: LD_VAR 0 5
81028: RET
// export function Video ( mode ) ; begin
81029: LD_INT 0
81031: PPUSH
// ingame_video = mode ;
81032: LD_ADDR_OWVAR 52
81036: PUSH
81037: LD_VAR 0 1
81041: ST_TO_ADDR
// interface_hidden = mode ;
81042: LD_ADDR_OWVAR 54
81046: PUSH
81047: LD_VAR 0 1
81051: ST_TO_ADDR
// end ;
81052: LD_VAR 0 2
81056: RET
// export function Join ( array , element ) ; begin
81057: LD_INT 0
81059: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81060: LD_ADDR_VAR 0 3
81064: PUSH
81065: LD_VAR 0 1
81069: PPUSH
81070: LD_VAR 0 1
81074: PUSH
81075: LD_INT 1
81077: PLUS
81078: PPUSH
81079: LD_VAR 0 2
81083: PPUSH
81084: CALL_OW 1
81088: ST_TO_ADDR
// end ;
81089: LD_VAR 0 3
81093: RET
// export function JoinUnion ( array , element ) ; begin
81094: LD_INT 0
81096: PPUSH
// result := array union element ;
81097: LD_ADDR_VAR 0 3
81101: PUSH
81102: LD_VAR 0 1
81106: PUSH
81107: LD_VAR 0 2
81111: UNION
81112: ST_TO_ADDR
// end ;
81113: LD_VAR 0 3
81117: RET
// export function GetBehemoths ( side ) ; begin
81118: LD_INT 0
81120: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
81121: LD_ADDR_VAR 0 2
81125: PUSH
81126: LD_INT 22
81128: PUSH
81129: LD_VAR 0 1
81133: PUSH
81134: EMPTY
81135: LIST
81136: LIST
81137: PUSH
81138: LD_INT 31
81140: PUSH
81141: LD_INT 25
81143: PUSH
81144: EMPTY
81145: LIST
81146: LIST
81147: PUSH
81148: EMPTY
81149: LIST
81150: LIST
81151: PPUSH
81152: CALL_OW 69
81156: ST_TO_ADDR
// end ;
81157: LD_VAR 0 2
81161: RET
// export function Shuffle ( array ) ; var i , index ; begin
81162: LD_INT 0
81164: PPUSH
81165: PPUSH
81166: PPUSH
// result := [ ] ;
81167: LD_ADDR_VAR 0 2
81171: PUSH
81172: EMPTY
81173: ST_TO_ADDR
// if not array then
81174: LD_VAR 0 1
81178: NOT
81179: IFFALSE 81183
// exit ;
81181: GO 81282
// Randomize ;
81183: CALL_OW 10
// for i = array downto 1 do
81187: LD_ADDR_VAR 0 3
81191: PUSH
81192: DOUBLE
81193: LD_VAR 0 1
81197: INC
81198: ST_TO_ADDR
81199: LD_INT 1
81201: PUSH
81202: FOR_DOWNTO
81203: IFFALSE 81280
// begin index := rand ( 1 , array ) ;
81205: LD_ADDR_VAR 0 4
81209: PUSH
81210: LD_INT 1
81212: PPUSH
81213: LD_VAR 0 1
81217: PPUSH
81218: CALL_OW 12
81222: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81223: LD_ADDR_VAR 0 2
81227: PUSH
81228: LD_VAR 0 2
81232: PPUSH
81233: LD_VAR 0 2
81237: PUSH
81238: LD_INT 1
81240: PLUS
81241: PPUSH
81242: LD_VAR 0 1
81246: PUSH
81247: LD_VAR 0 4
81251: ARRAY
81252: PPUSH
81253: CALL_OW 2
81257: ST_TO_ADDR
// array := Delete ( array , index ) ;
81258: LD_ADDR_VAR 0 1
81262: PUSH
81263: LD_VAR 0 1
81267: PPUSH
81268: LD_VAR 0 4
81272: PPUSH
81273: CALL_OW 3
81277: ST_TO_ADDR
// end ;
81278: GO 81202
81280: POP
81281: POP
// end ;
81282: LD_VAR 0 2
81286: RET
// export function GetBaseMaterials ( base ) ; begin
81287: LD_INT 0
81289: PPUSH
// result := [ 0 , 0 , 0 ] ;
81290: LD_ADDR_VAR 0 2
81294: PUSH
81295: LD_INT 0
81297: PUSH
81298: LD_INT 0
81300: PUSH
81301: LD_INT 0
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: LIST
81308: ST_TO_ADDR
// if not base then
81309: LD_VAR 0 1
81313: NOT
81314: IFFALSE 81318
// exit ;
81316: GO 81367
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81318: LD_ADDR_VAR 0 2
81322: PUSH
81323: LD_VAR 0 1
81327: PPUSH
81328: LD_INT 1
81330: PPUSH
81331: CALL_OW 275
81335: PUSH
81336: LD_VAR 0 1
81340: PPUSH
81341: LD_INT 2
81343: PPUSH
81344: CALL_OW 275
81348: PUSH
81349: LD_VAR 0 1
81353: PPUSH
81354: LD_INT 3
81356: PPUSH
81357: CALL_OW 275
81361: PUSH
81362: EMPTY
81363: LIST
81364: LIST
81365: LIST
81366: ST_TO_ADDR
// end ;
81367: LD_VAR 0 2
81371: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81372: LD_INT 0
81374: PPUSH
81375: PPUSH
// result := array ;
81376: LD_ADDR_VAR 0 3
81380: PUSH
81381: LD_VAR 0 1
81385: ST_TO_ADDR
// if size > 0 then
81386: LD_VAR 0 2
81390: PUSH
81391: LD_INT 0
81393: GREATER
81394: IFFALSE 81440
// for i := array downto size do
81396: LD_ADDR_VAR 0 4
81400: PUSH
81401: DOUBLE
81402: LD_VAR 0 1
81406: INC
81407: ST_TO_ADDR
81408: LD_VAR 0 2
81412: PUSH
81413: FOR_DOWNTO
81414: IFFALSE 81438
// result := Delete ( result , result ) ;
81416: LD_ADDR_VAR 0 3
81420: PUSH
81421: LD_VAR 0 3
81425: PPUSH
81426: LD_VAR 0 3
81430: PPUSH
81431: CALL_OW 3
81435: ST_TO_ADDR
81436: GO 81413
81438: POP
81439: POP
// end ;
81440: LD_VAR 0 3
81444: RET
// export function ComExit ( unit ) ; var tmp ; begin
81445: LD_INT 0
81447: PPUSH
81448: PPUSH
// if not IsInUnit ( unit ) then
81449: LD_VAR 0 1
81453: PPUSH
81454: CALL_OW 310
81458: NOT
81459: IFFALSE 81463
// exit ;
81461: GO 81523
// tmp := IsInUnit ( unit ) ;
81463: LD_ADDR_VAR 0 3
81467: PUSH
81468: LD_VAR 0 1
81472: PPUSH
81473: CALL_OW 310
81477: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81478: LD_VAR 0 3
81482: PPUSH
81483: CALL_OW 247
81487: PUSH
81488: LD_INT 2
81490: EQUAL
81491: IFFALSE 81504
// ComExitVehicle ( unit ) else
81493: LD_VAR 0 1
81497: PPUSH
81498: CALL_OW 121
81502: GO 81513
// ComExitBuilding ( unit ) ;
81504: LD_VAR 0 1
81508: PPUSH
81509: CALL_OW 122
// result := tmp ;
81513: LD_ADDR_VAR 0 2
81517: PUSH
81518: LD_VAR 0 3
81522: ST_TO_ADDR
// end ;
81523: LD_VAR 0 2
81527: RET
// export function ComExitAll ( units ) ; var i ; begin
81528: LD_INT 0
81530: PPUSH
81531: PPUSH
// if not units then
81532: LD_VAR 0 1
81536: NOT
81537: IFFALSE 81541
// exit ;
81539: GO 81567
// for i in units do
81541: LD_ADDR_VAR 0 3
81545: PUSH
81546: LD_VAR 0 1
81550: PUSH
81551: FOR_IN
81552: IFFALSE 81565
// ComExit ( i ) ;
81554: LD_VAR 0 3
81558: PPUSH
81559: CALL 81445 0 1
81563: GO 81551
81565: POP
81566: POP
// end ;
81567: LD_VAR 0 2
81571: RET
// export function ResetHc ; begin
81572: LD_INT 0
81574: PPUSH
// InitHc ;
81575: CALL_OW 19
// hc_importance := 0 ;
81579: LD_ADDR_OWVAR 32
81583: PUSH
81584: LD_INT 0
81586: ST_TO_ADDR
// end ;
81587: LD_VAR 0 1
81591: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81592: LD_INT 0
81594: PPUSH
81595: PPUSH
81596: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81597: LD_ADDR_VAR 0 6
81601: PUSH
81602: LD_VAR 0 1
81606: PUSH
81607: LD_VAR 0 3
81611: PLUS
81612: PUSH
81613: LD_INT 2
81615: DIV
81616: ST_TO_ADDR
// if _x < 0 then
81617: LD_VAR 0 6
81621: PUSH
81622: LD_INT 0
81624: LESS
81625: IFFALSE 81642
// _x := _x * - 1 ;
81627: LD_ADDR_VAR 0 6
81631: PUSH
81632: LD_VAR 0 6
81636: PUSH
81637: LD_INT 1
81639: NEG
81640: MUL
81641: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81642: LD_ADDR_VAR 0 7
81646: PUSH
81647: LD_VAR 0 2
81651: PUSH
81652: LD_VAR 0 4
81656: PLUS
81657: PUSH
81658: LD_INT 2
81660: DIV
81661: ST_TO_ADDR
// if _y < 0 then
81662: LD_VAR 0 7
81666: PUSH
81667: LD_INT 0
81669: LESS
81670: IFFALSE 81687
// _y := _y * - 1 ;
81672: LD_ADDR_VAR 0 7
81676: PUSH
81677: LD_VAR 0 7
81681: PUSH
81682: LD_INT 1
81684: NEG
81685: MUL
81686: ST_TO_ADDR
// result := [ _x , _y ] ;
81687: LD_ADDR_VAR 0 5
81691: PUSH
81692: LD_VAR 0 6
81696: PUSH
81697: LD_VAR 0 7
81701: PUSH
81702: EMPTY
81703: LIST
81704: LIST
81705: ST_TO_ADDR
// end ;
81706: LD_VAR 0 5
81710: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81711: LD_INT 0
81713: PPUSH
81714: PPUSH
81715: PPUSH
81716: PPUSH
// task := GetTaskList ( unit ) ;
81717: LD_ADDR_VAR 0 7
81721: PUSH
81722: LD_VAR 0 1
81726: PPUSH
81727: CALL_OW 437
81731: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81732: LD_VAR 0 7
81736: NOT
81737: PUSH
81738: LD_VAR 0 1
81742: PPUSH
81743: LD_VAR 0 2
81747: PPUSH
81748: CALL_OW 308
81752: NOT
81753: AND
81754: IFFALSE 81758
// exit ;
81756: GO 81876
// if IsInArea ( unit , area ) then
81758: LD_VAR 0 1
81762: PPUSH
81763: LD_VAR 0 2
81767: PPUSH
81768: CALL_OW 308
81772: IFFALSE 81790
// begin ComMoveToArea ( unit , goAway ) ;
81774: LD_VAR 0 1
81778: PPUSH
81779: LD_VAR 0 3
81783: PPUSH
81784: CALL_OW 113
// exit ;
81788: GO 81876
// end ; if task [ 1 ] [ 1 ] <> M then
81790: LD_VAR 0 7
81794: PUSH
81795: LD_INT 1
81797: ARRAY
81798: PUSH
81799: LD_INT 1
81801: ARRAY
81802: PUSH
81803: LD_STRING M
81805: NONEQUAL
81806: IFFALSE 81810
// exit ;
81808: GO 81876
// x := task [ 1 ] [ 2 ] ;
81810: LD_ADDR_VAR 0 5
81814: PUSH
81815: LD_VAR 0 7
81819: PUSH
81820: LD_INT 1
81822: ARRAY
81823: PUSH
81824: LD_INT 2
81826: ARRAY
81827: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81828: LD_ADDR_VAR 0 6
81832: PUSH
81833: LD_VAR 0 7
81837: PUSH
81838: LD_INT 1
81840: ARRAY
81841: PUSH
81842: LD_INT 3
81844: ARRAY
81845: ST_TO_ADDR
// if InArea ( x , y , area ) then
81846: LD_VAR 0 5
81850: PPUSH
81851: LD_VAR 0 6
81855: PPUSH
81856: LD_VAR 0 2
81860: PPUSH
81861: CALL_OW 309
81865: IFFALSE 81876
// ComStop ( unit ) ;
81867: LD_VAR 0 1
81871: PPUSH
81872: CALL_OW 141
// end ;
81876: LD_VAR 0 4
81880: RET
// export function Abs ( value ) ; begin
81881: LD_INT 0
81883: PPUSH
// result := value ;
81884: LD_ADDR_VAR 0 2
81888: PUSH
81889: LD_VAR 0 1
81893: ST_TO_ADDR
// if value < 0 then
81894: LD_VAR 0 1
81898: PUSH
81899: LD_INT 0
81901: LESS
81902: IFFALSE 81919
// result := value * - 1 ;
81904: LD_ADDR_VAR 0 2
81908: PUSH
81909: LD_VAR 0 1
81913: PUSH
81914: LD_INT 1
81916: NEG
81917: MUL
81918: ST_TO_ADDR
// end ;
81919: LD_VAR 0 2
81923: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81924: LD_INT 0
81926: PPUSH
81927: PPUSH
81928: PPUSH
81929: PPUSH
81930: PPUSH
81931: PPUSH
81932: PPUSH
81933: PPUSH
// if not unit or not building then
81934: LD_VAR 0 1
81938: NOT
81939: PUSH
81940: LD_VAR 0 2
81944: NOT
81945: OR
81946: IFFALSE 81950
// exit ;
81948: GO 82176
// x := GetX ( building ) ;
81950: LD_ADDR_VAR 0 4
81954: PUSH
81955: LD_VAR 0 2
81959: PPUSH
81960: CALL_OW 250
81964: ST_TO_ADDR
// y := GetY ( building ) ;
81965: LD_ADDR_VAR 0 6
81969: PUSH
81970: LD_VAR 0 2
81974: PPUSH
81975: CALL_OW 251
81979: ST_TO_ADDR
// d := GetDir ( building ) ;
81980: LD_ADDR_VAR 0 8
81984: PUSH
81985: LD_VAR 0 2
81989: PPUSH
81990: CALL_OW 254
81994: ST_TO_ADDR
// r := 4 ;
81995: LD_ADDR_VAR 0 9
81999: PUSH
82000: LD_INT 4
82002: ST_TO_ADDR
// for i := 1 to 5 do
82003: LD_ADDR_VAR 0 10
82007: PUSH
82008: DOUBLE
82009: LD_INT 1
82011: DEC
82012: ST_TO_ADDR
82013: LD_INT 5
82015: PUSH
82016: FOR_TO
82017: IFFALSE 82174
// begin _x := ShiftX ( x , d , r + i ) ;
82019: LD_ADDR_VAR 0 5
82023: PUSH
82024: LD_VAR 0 4
82028: PPUSH
82029: LD_VAR 0 8
82033: PPUSH
82034: LD_VAR 0 9
82038: PUSH
82039: LD_VAR 0 10
82043: PLUS
82044: PPUSH
82045: CALL_OW 272
82049: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82050: LD_ADDR_VAR 0 7
82054: PUSH
82055: LD_VAR 0 6
82059: PPUSH
82060: LD_VAR 0 8
82064: PPUSH
82065: LD_VAR 0 9
82069: PUSH
82070: LD_VAR 0 10
82074: PLUS
82075: PPUSH
82076: CALL_OW 273
82080: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82081: LD_VAR 0 5
82085: PPUSH
82086: LD_VAR 0 7
82090: PPUSH
82091: CALL_OW 488
82095: PUSH
82096: LD_VAR 0 5
82100: PPUSH
82101: LD_VAR 0 7
82105: PPUSH
82106: CALL_OW 428
82110: PPUSH
82111: CALL_OW 247
82115: PUSH
82116: LD_INT 3
82118: PUSH
82119: LD_INT 2
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: IN
82126: NOT
82127: AND
82128: IFFALSE 82172
// begin ComMoveXY ( unit , _x , _y ) ;
82130: LD_VAR 0 1
82134: PPUSH
82135: LD_VAR 0 5
82139: PPUSH
82140: LD_VAR 0 7
82144: PPUSH
82145: CALL_OW 111
// result := [ _x , _y ] ;
82149: LD_ADDR_VAR 0 3
82153: PUSH
82154: LD_VAR 0 5
82158: PUSH
82159: LD_VAR 0 7
82163: PUSH
82164: EMPTY
82165: LIST
82166: LIST
82167: ST_TO_ADDR
// exit ;
82168: POP
82169: POP
82170: GO 82176
// end ; end ;
82172: GO 82016
82174: POP
82175: POP
// end ;
82176: LD_VAR 0 3
82180: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82181: LD_INT 0
82183: PPUSH
82184: PPUSH
82185: PPUSH
// result := 0 ;
82186: LD_ADDR_VAR 0 3
82190: PUSH
82191: LD_INT 0
82193: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82194: LD_VAR 0 1
82198: PUSH
82199: LD_INT 0
82201: LESS
82202: PUSH
82203: LD_VAR 0 1
82207: PUSH
82208: LD_INT 8
82210: GREATER
82211: OR
82212: PUSH
82213: LD_VAR 0 2
82217: PUSH
82218: LD_INT 0
82220: LESS
82221: OR
82222: PUSH
82223: LD_VAR 0 2
82227: PUSH
82228: LD_INT 8
82230: GREATER
82231: OR
82232: IFFALSE 82236
// exit ;
82234: GO 82311
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82236: LD_ADDR_VAR 0 4
82240: PUSH
82241: LD_INT 22
82243: PUSH
82244: LD_VAR 0 2
82248: PUSH
82249: EMPTY
82250: LIST
82251: LIST
82252: PPUSH
82253: CALL_OW 69
82257: PUSH
82258: FOR_IN
82259: IFFALSE 82309
// begin un := UnitShoot ( i ) ;
82261: LD_ADDR_VAR 0 5
82265: PUSH
82266: LD_VAR 0 4
82270: PPUSH
82271: CALL_OW 504
82275: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82276: LD_VAR 0 5
82280: PPUSH
82281: CALL_OW 255
82285: PUSH
82286: LD_VAR 0 1
82290: EQUAL
82291: IFFALSE 82307
// begin result := un ;
82293: LD_ADDR_VAR 0 3
82297: PUSH
82298: LD_VAR 0 5
82302: ST_TO_ADDR
// exit ;
82303: POP
82304: POP
82305: GO 82311
// end ; end ;
82307: GO 82258
82309: POP
82310: POP
// end ;
82311: LD_VAR 0 3
82315: RET
// export function GetCargoBay ( units ) ; begin
82316: LD_INT 0
82318: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82319: LD_ADDR_VAR 0 2
82323: PUSH
82324: LD_VAR 0 1
82328: PPUSH
82329: LD_INT 2
82331: PUSH
82332: LD_INT 34
82334: PUSH
82335: LD_INT 12
82337: PUSH
82338: EMPTY
82339: LIST
82340: LIST
82341: PUSH
82342: LD_INT 34
82344: PUSH
82345: LD_INT 51
82347: PUSH
82348: EMPTY
82349: LIST
82350: LIST
82351: PUSH
82352: LD_INT 34
82354: PUSH
82355: LD_INT 32
82357: PUSH
82358: EMPTY
82359: LIST
82360: LIST
82361: PUSH
82362: LD_INT 34
82364: PUSH
82365: LD_EXP 49
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: PUSH
82374: EMPTY
82375: LIST
82376: LIST
82377: LIST
82378: LIST
82379: LIST
82380: PPUSH
82381: CALL_OW 72
82385: ST_TO_ADDR
// end ;
82386: LD_VAR 0 2
82390: RET
// export function Negate ( value ) ; begin
82391: LD_INT 0
82393: PPUSH
// result := not value ;
82394: LD_ADDR_VAR 0 2
82398: PUSH
82399: LD_VAR 0 1
82403: NOT
82404: ST_TO_ADDR
// end ;
82405: LD_VAR 0 2
82409: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
82410: LD_INT 0
82412: PPUSH
// if x1 = x2 then
82413: LD_VAR 0 1
82417: PUSH
82418: LD_VAR 0 3
82422: EQUAL
82423: IFFALSE 82457
// begin if y1 > y2 then
82425: LD_VAR 0 2
82429: PUSH
82430: LD_VAR 0 4
82434: GREATER
82435: IFFALSE 82447
// result := 0 else
82437: LD_ADDR_VAR 0 5
82441: PUSH
82442: LD_INT 0
82444: ST_TO_ADDR
82445: GO 82455
// result := 3 ;
82447: LD_ADDR_VAR 0 5
82451: PUSH
82452: LD_INT 3
82454: ST_TO_ADDR
// exit ;
82455: GO 82543
// end ; if y1 = y2 then
82457: LD_VAR 0 2
82461: PUSH
82462: LD_VAR 0 4
82466: EQUAL
82467: IFFALSE 82501
// begin if x1 > x2 then
82469: LD_VAR 0 1
82473: PUSH
82474: LD_VAR 0 3
82478: GREATER
82479: IFFALSE 82491
// result := 1 else
82481: LD_ADDR_VAR 0 5
82485: PUSH
82486: LD_INT 1
82488: ST_TO_ADDR
82489: GO 82499
// result := 4 ;
82491: LD_ADDR_VAR 0 5
82495: PUSH
82496: LD_INT 4
82498: ST_TO_ADDR
// exit ;
82499: GO 82543
// end ; if x1 > x2 and y1 > y2 then
82501: LD_VAR 0 1
82505: PUSH
82506: LD_VAR 0 3
82510: GREATER
82511: PUSH
82512: LD_VAR 0 2
82516: PUSH
82517: LD_VAR 0 4
82521: GREATER
82522: AND
82523: IFFALSE 82535
// result := 2 else
82525: LD_ADDR_VAR 0 5
82529: PUSH
82530: LD_INT 2
82532: ST_TO_ADDR
82533: GO 82543
// result := 5 ;
82535: LD_ADDR_VAR 0 5
82539: PUSH
82540: LD_INT 5
82542: ST_TO_ADDR
// end ;
82543: LD_VAR 0 5
82547: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82548: LD_INT 0
82550: PPUSH
82551: PPUSH
// if not driver or not IsInUnit ( driver ) then
82552: LD_VAR 0 1
82556: NOT
82557: PUSH
82558: LD_VAR 0 1
82562: PPUSH
82563: CALL_OW 310
82567: NOT
82568: OR
82569: IFFALSE 82573
// exit ;
82571: GO 82663
// vehicle := IsInUnit ( driver ) ;
82573: LD_ADDR_VAR 0 3
82577: PUSH
82578: LD_VAR 0 1
82582: PPUSH
82583: CALL_OW 310
82587: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82588: LD_VAR 0 1
82592: PPUSH
82593: LD_STRING \
82595: PUSH
82596: LD_INT 0
82598: PUSH
82599: LD_INT 0
82601: PUSH
82602: LD_INT 0
82604: PUSH
82605: LD_INT 0
82607: PUSH
82608: LD_INT 0
82610: PUSH
82611: LD_INT 0
82613: PUSH
82614: EMPTY
82615: LIST
82616: LIST
82617: LIST
82618: LIST
82619: LIST
82620: LIST
82621: LIST
82622: PUSH
82623: LD_STRING E
82625: PUSH
82626: LD_INT 0
82628: PUSH
82629: LD_INT 0
82631: PUSH
82632: LD_VAR 0 3
82636: PUSH
82637: LD_INT 0
82639: PUSH
82640: LD_INT 0
82642: PUSH
82643: LD_INT 0
82645: PUSH
82646: EMPTY
82647: LIST
82648: LIST
82649: LIST
82650: LIST
82651: LIST
82652: LIST
82653: LIST
82654: PUSH
82655: EMPTY
82656: LIST
82657: LIST
82658: PPUSH
82659: CALL_OW 446
// end ;
82663: LD_VAR 0 2
82667: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82668: LD_INT 0
82670: PPUSH
82671: PPUSH
// if not driver or not IsInUnit ( driver ) then
82672: LD_VAR 0 1
82676: NOT
82677: PUSH
82678: LD_VAR 0 1
82682: PPUSH
82683: CALL_OW 310
82687: NOT
82688: OR
82689: IFFALSE 82693
// exit ;
82691: GO 82807
// vehicle := IsInUnit ( driver ) ;
82693: LD_ADDR_VAR 0 3
82697: PUSH
82698: LD_VAR 0 1
82702: PPUSH
82703: CALL_OW 310
82707: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82708: LD_VAR 0 1
82712: PPUSH
82713: LD_STRING \
82715: PUSH
82716: LD_INT 0
82718: PUSH
82719: LD_INT 0
82721: PUSH
82722: LD_INT 0
82724: PUSH
82725: LD_INT 0
82727: PUSH
82728: LD_INT 0
82730: PUSH
82731: LD_INT 0
82733: PUSH
82734: EMPTY
82735: LIST
82736: LIST
82737: LIST
82738: LIST
82739: LIST
82740: LIST
82741: LIST
82742: PUSH
82743: LD_STRING E
82745: PUSH
82746: LD_INT 0
82748: PUSH
82749: LD_INT 0
82751: PUSH
82752: LD_VAR 0 3
82756: PUSH
82757: LD_INT 0
82759: PUSH
82760: LD_INT 0
82762: PUSH
82763: LD_INT 0
82765: PUSH
82766: EMPTY
82767: LIST
82768: LIST
82769: LIST
82770: LIST
82771: LIST
82772: LIST
82773: LIST
82774: PUSH
82775: EMPTY
82776: LIST
82777: LIST
82778: PPUSH
82779: CALL_OW 447
// display_strings := [ driver , GetTaskList ( driver ) ] ;
82783: LD_ADDR_OWVAR 47
82787: PUSH
82788: LD_VAR 0 1
82792: PUSH
82793: LD_VAR 0 1
82797: PPUSH
82798: CALL_OW 437
82802: PUSH
82803: EMPTY
82804: LIST
82805: LIST
82806: ST_TO_ADDR
// end ;
82807: LD_VAR 0 2
82811: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82812: LD_INT 0
82814: PPUSH
82815: PPUSH
82816: PPUSH
// tmp := [ ] ;
82817: LD_ADDR_VAR 0 5
82821: PUSH
82822: EMPTY
82823: ST_TO_ADDR
// for i in units do
82824: LD_ADDR_VAR 0 4
82828: PUSH
82829: LD_VAR 0 1
82833: PUSH
82834: FOR_IN
82835: IFFALSE 82873
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82837: LD_ADDR_VAR 0 5
82841: PUSH
82842: LD_VAR 0 5
82846: PPUSH
82847: LD_VAR 0 5
82851: PUSH
82852: LD_INT 1
82854: PLUS
82855: PPUSH
82856: LD_VAR 0 4
82860: PPUSH
82861: CALL_OW 256
82865: PPUSH
82866: CALL_OW 2
82870: ST_TO_ADDR
82871: GO 82834
82873: POP
82874: POP
// if not tmp then
82875: LD_VAR 0 5
82879: NOT
82880: IFFALSE 82884
// exit ;
82882: GO 82932
// if asc then
82884: LD_VAR 0 2
82888: IFFALSE 82912
// result := SortListByListAsc ( units , tmp ) else
82890: LD_ADDR_VAR 0 3
82894: PUSH
82895: LD_VAR 0 1
82899: PPUSH
82900: LD_VAR 0 5
82904: PPUSH
82905: CALL_OW 76
82909: ST_TO_ADDR
82910: GO 82932
// result := SortListByListDesc ( units , tmp ) ;
82912: LD_ADDR_VAR 0 3
82916: PUSH
82917: LD_VAR 0 1
82921: PPUSH
82922: LD_VAR 0 5
82926: PPUSH
82927: CALL_OW 77
82931: ST_TO_ADDR
// end ;
82932: LD_VAR 0 3
82936: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82937: LD_INT 0
82939: PPUSH
82940: PPUSH
// task := GetTaskList ( mech ) ;
82941: LD_ADDR_VAR 0 4
82945: PUSH
82946: LD_VAR 0 1
82950: PPUSH
82951: CALL_OW 437
82955: ST_TO_ADDR
// if not task then
82956: LD_VAR 0 4
82960: NOT
82961: IFFALSE 82965
// exit ;
82963: GO 83007
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82965: LD_ADDR_VAR 0 3
82969: PUSH
82970: LD_VAR 0 4
82974: PUSH
82975: LD_INT 1
82977: ARRAY
82978: PUSH
82979: LD_INT 1
82981: ARRAY
82982: PUSH
82983: LD_STRING r
82985: EQUAL
82986: PUSH
82987: LD_VAR 0 4
82991: PUSH
82992: LD_INT 1
82994: ARRAY
82995: PUSH
82996: LD_INT 4
82998: ARRAY
82999: PUSH
83000: LD_VAR 0 2
83004: EQUAL
83005: AND
83006: ST_TO_ADDR
// end ;
83007: LD_VAR 0 3
83011: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83012: LD_INT 0
83014: PPUSH
// SetDir ( unit , d ) ;
83015: LD_VAR 0 1
83019: PPUSH
83020: LD_VAR 0 4
83024: PPUSH
83025: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83029: LD_VAR 0 1
83033: PPUSH
83034: LD_VAR 0 2
83038: PPUSH
83039: LD_VAR 0 3
83043: PPUSH
83044: LD_VAR 0 5
83048: PPUSH
83049: CALL_OW 48
// end ;
83053: LD_VAR 0 6
83057: RET
// export function ToNaturalNumber ( number ) ; begin
83058: LD_INT 0
83060: PPUSH
// result := number div 1 ;
83061: LD_ADDR_VAR 0 2
83065: PUSH
83066: LD_VAR 0 1
83070: PUSH
83071: LD_INT 1
83073: DIV
83074: ST_TO_ADDR
// if number < 0 then
83075: LD_VAR 0 1
83079: PUSH
83080: LD_INT 0
83082: LESS
83083: IFFALSE 83093
// result := 0 ;
83085: LD_ADDR_VAR 0 2
83089: PUSH
83090: LD_INT 0
83092: ST_TO_ADDR
// end ;
83093: LD_VAR 0 2
83097: RET
// export function SortByClass ( units , class ) ; var un ; begin
83098: LD_INT 0
83100: PPUSH
83101: PPUSH
// if not units or not class then
83102: LD_VAR 0 1
83106: NOT
83107: PUSH
83108: LD_VAR 0 2
83112: NOT
83113: OR
83114: IFFALSE 83118
// exit ;
83116: GO 83213
// result := [ ] ;
83118: LD_ADDR_VAR 0 3
83122: PUSH
83123: EMPTY
83124: ST_TO_ADDR
// for un in units do
83125: LD_ADDR_VAR 0 4
83129: PUSH
83130: LD_VAR 0 1
83134: PUSH
83135: FOR_IN
83136: IFFALSE 83211
// if GetClass ( un ) = class then
83138: LD_VAR 0 4
83142: PPUSH
83143: CALL_OW 257
83147: PUSH
83148: LD_VAR 0 2
83152: EQUAL
83153: IFFALSE 83180
// result := Insert ( result , 1 , un ) else
83155: LD_ADDR_VAR 0 3
83159: PUSH
83160: LD_VAR 0 3
83164: PPUSH
83165: LD_INT 1
83167: PPUSH
83168: LD_VAR 0 4
83172: PPUSH
83173: CALL_OW 2
83177: ST_TO_ADDR
83178: GO 83209
// result := Replace ( result , result + 1 , un ) ;
83180: LD_ADDR_VAR 0 3
83184: PUSH
83185: LD_VAR 0 3
83189: PPUSH
83190: LD_VAR 0 3
83194: PUSH
83195: LD_INT 1
83197: PLUS
83198: PPUSH
83199: LD_VAR 0 4
83203: PPUSH
83204: CALL_OW 1
83208: ST_TO_ADDR
83209: GO 83135
83211: POP
83212: POP
// end ; end_of_file
83213: LD_VAR 0 3
83217: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83218: LD_VAR 0 1
83222: PUSH
83223: LD_INT 200
83225: DOUBLE
83226: GREATEREQUAL
83227: IFFALSE 83235
83229: LD_INT 299
83231: DOUBLE
83232: LESSEQUAL
83233: IFTRUE 83237
83235: GO 83269
83237: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83238: LD_VAR 0 1
83242: PPUSH
83243: LD_VAR 0 2
83247: PPUSH
83248: LD_VAR 0 3
83252: PPUSH
83253: LD_VAR 0 4
83257: PPUSH
83258: LD_VAR 0 5
83262: PPUSH
83263: CALL 40437 0 5
83267: GO 83346
83269: LD_INT 300
83271: DOUBLE
83272: GREATEREQUAL
83273: IFFALSE 83281
83275: LD_INT 399
83277: DOUBLE
83278: LESSEQUAL
83279: IFTRUE 83283
83281: GO 83345
83283: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83284: LD_VAR 0 1
83288: PPUSH
83289: LD_VAR 0 2
83293: PPUSH
83294: LD_VAR 0 3
83298: PPUSH
83299: LD_VAR 0 4
83303: PPUSH
83304: LD_VAR 0 5
83308: PPUSH
83309: LD_VAR 0 6
83313: PPUSH
83314: LD_VAR 0 7
83318: PPUSH
83319: LD_VAR 0 8
83323: PPUSH
83324: LD_VAR 0 9
83328: PPUSH
83329: LD_VAR 0 10
83333: PPUSH
83334: LD_VAR 0 11
83338: PPUSH
83339: CALL 38325 0 11
83343: GO 83346
83345: POP
// end ;
83346: PPOPN 11
83348: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83349: LD_VAR 0 1
83353: PPUSH
83354: LD_VAR 0 2
83358: PPUSH
83359: LD_VAR 0 3
83363: PPUSH
83364: LD_VAR 0 4
83368: PPUSH
83369: LD_VAR 0 5
83373: PPUSH
83374: CALL 40419 0 5
// end ; end_of_file
83378: PPOPN 5
83380: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83381: LD_VAR 0 1
83385: PPUSH
83386: LD_VAR 0 2
83390: PPUSH
83391: LD_VAR 0 3
83395: PPUSH
83396: LD_VAR 0 4
83400: PPUSH
83401: LD_VAR 0 5
83405: PPUSH
83406: LD_VAR 0 6
83410: PPUSH
83411: CALL 27133 0 6
// end ;
83415: PPOPN 6
83417: END
