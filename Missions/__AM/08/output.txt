// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9069 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 74248 0 9
// Action ;
  79: CALL 15318 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 40266 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 40266 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 40266 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 40266 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 40266 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 40266 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 40266 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 77558 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 40266 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 40266 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 77558 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 40266 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 40266 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 77558 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 40266 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 77558 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 40266 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 77558 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 40266 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 77558 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 40266 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 77558 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 40266 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 77558 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 77558 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 48197 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 75205 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 53325 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 53325 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 53325 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 53325 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 40266 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 40266 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 40266 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 40266 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 40266 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 40266 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 40266 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 40266 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 40266 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 40266 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 77558 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 40266 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 40266 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 40266 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 40266 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 40266 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 40266 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 40266 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 40266 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 40266 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 40266 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 77558 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 77558 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 40266 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9055
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8759
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8759
// begin ComMoveXY ( i , 52 , 50 ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_INT 52
8737: PPUSH
8738: LD_INT 50
8740: PPUSH
8741: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_EXP 31
8754: PPUSH
8755: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 256
8768: PUSH
8769: LD_INT 600
8771: GREATEREQUAL
8772: PUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 110
8782: NOT
8783: AND
8784: IFFALSE 8810
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_VAR 0 4
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 74
8805: PPUSH
8806: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 256
8819: PUSH
8820: LD_INT 600
8822: LESS
8823: PUSH
8824: LD_VAR 0 2
8828: PPUSH
8829: CALL_OW 110
8833: NOT
8834: AND
8835: IFFALSE 8911
// begin SetTag ( i , 1 ) ;
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8849: LD_ADDR_VAR 0 6
8853: PUSH
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 5
8863: PPUSH
8864: CALL 80902 0 2
8868: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 6
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 40
8903: PPUSH
8904: LD_INT 49
8906: PPUSH
8907: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL_OW 110
8920: PUSH
8921: LD_INT 1
8923: EQUAL
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 40
8932: PPUSH
8933: LD_INT 49
8935: PPUSH
8936: CALL_OW 297
8940: PUSH
8941: LD_INT 9
8943: LESS
8944: AND
8945: PUSH
8946: LD_VAR 0 3
8950: AND
8951: IFFALSE 9053
// begin ComExitVehicle ( tmp ) ;
8953: LD_VAR 0 3
8957: PPUSH
8958: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PPUSH
8972: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8976: LD_INT 35
8978: PPUSH
8979: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 256
8992: PUSH
8993: LD_INT 1000
8995: EQUAL
8996: IFFALSE 8976
// ComEnterUnit ( tmp , i ) ;
8998: LD_VAR 0 3
9002: PPUSH
9003: LD_VAR 0 2
9007: PPUSH
9008: CALL_OW 120
// if GetFuel ( i ) <= 40 then
9012: LD_VAR 0 2
9016: PPUSH
9017: CALL_OW 261
9021: PUSH
9022: LD_INT 40
9024: LESSEQUAL
9025: IFFALSE 9041
// SetTag ( i , 2 ) else
9027: LD_VAR 0 2
9031: PPUSH
9032: LD_INT 2
9034: PPUSH
9035: CALL_OW 109
9039: GO 9053
// SetTag ( i , 0 ) ;
9041: LD_VAR 0 2
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 109
// end ; end ;
9053: GO 8615
9055: POP
9056: POP
// until not filter ;
9057: LD_VAR 0 7
9061: NOT
9062: IFFALSE 8598
// end ; end_of_file
9064: LD_VAR 0 1
9068: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9092: LD_ADDR_EXP 33
9096: PUSH
9097: LD_INT 8
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 14
9105: PUSH
9106: LD_INT 17
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PUSH
9115: LD_OWVAR 67
9119: ARRAY
9120: ST_TO_ADDR
// ruMobile := [ ] ;
9121: LD_ADDR_EXP 34
9125: PUSH
9126: EMPTY
9127: ST_TO_ADDR
// ruBuildList := [ ] ;
9128: LD_ADDR_EXP 35
9132: PUSH
9133: EMPTY
9134: ST_TO_ADDR
// russianAttackers := [ ] ;
9135: LD_ADDR_EXP 36
9139: PUSH
9140: EMPTY
9141: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_INT 43
9149: PUSH
9150: LD_INT 44
9152: PUSH
9153: LD_INT 46
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// if Difficulty > 2 then
9161: LD_OWVAR 67
9165: PUSH
9166: LD_INT 2
9168: GREATER
9169: IFFALSE 9192
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9171: LD_ADDR_VAR 0 5
9175: PUSH
9176: LD_VAR 0 5
9180: PUSH
9181: LD_INT 45
9183: PUSH
9184: LD_INT 46
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: ADD
9191: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9192: LD_ADDR_EXP 32
9196: PUSH
9197: LD_STRING Borodin
9199: PPUSH
9200: CALL_OW 25
9204: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9205: LD_EXP 32
9209: PPUSH
9210: LD_INT 28
9212: PPUSH
9213: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9217: LD_INT 28
9219: PPUSH
9220: CALL_OW 274
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_INT 3000
9230: PUSH
9231: LD_INT 4000
9233: PUSH
9234: LD_INT 5000
9236: PUSH
9237: LD_INT 6000
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: LD_OWVAR 67
9250: ARRAY
9251: PPUSH
9252: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9256: LD_INT 28
9258: PPUSH
9259: CALL_OW 274
9263: PPUSH
9264: LD_INT 2
9266: PPUSH
9267: LD_INT 1000
9269: PPUSH
9270: CALL_OW 277
// if Difficulty > 2 then
9274: LD_OWVAR 67
9278: PUSH
9279: LD_INT 2
9281: GREATER
9282: IFFALSE 9406
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9284: LD_ADDR_VAR 0 4
9288: PUSH
9289: LD_INT 99
9291: PUSH
9292: LD_INT 130
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 121
9305: PUSH
9306: LD_INT 127
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 117
9319: PUSH
9320: LD_INT 121
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: ST_TO_ADDR
// for i in tmp do
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_VAR 0 4
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9404
// begin bc_type := b_turret ;
9349: LD_ADDR_OWVAR 42
9353: PUSH
9354: LD_INT 33
9356: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9357: LD_ADDR_OWVAR 43
9361: PUSH
9362: LD_INT 2
9364: PUSH
9365: LD_OWVAR 67
9369: PLUS
9370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9371: LD_VAR 0 2
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: LD_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ARRAY
9388: PPUSH
9389: LD_VAR 0 2
9393: PUSH
9394: LD_INT 3
9396: ARRAY
9397: PPUSH
9398: CALL_OW 47
// end ;
9402: GO 9346
9404: POP
9405: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: PUSH
9440: FOR_IN
9441: IFFALSE 9463
// SetBLevel ( i , 2 + Difficulty ) ;
9443: LD_VAR 0 2
9447: PPUSH
9448: LD_INT 2
9450: PUSH
9451: LD_OWVAR 67
9455: PLUS
9456: PPUSH
9457: CALL_OW 241
9461: GO 9440
9463: POP
9464: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 30
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 30
9495: PUSH
9496: LD_INT 33
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 69
9516: ST_TO_ADDR
// for i in tmp do
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_VAR 0 4
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9560
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9530: LD_VAR 0 2
9534: PPUSH
9535: LD_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 5
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: PPUSH
9554: CALL_OW 431
9558: GO 9527
9560: POP
9561: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 30
9579: PUSH
9580: LD_INT 32
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9646
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9599: LD_INT 0
9601: PPUSH
9602: LD_INT 5
9604: PUSH
9605: LD_INT 6
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: LD_INT 8
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_OWVAR 67
9624: ARRAY
9625: PPUSH
9626: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9630: CALL_OW 44
9634: PPUSH
9635: LD_VAR 0 2
9639: PPUSH
9640: CALL_OW 52
// end ;
9644: GO 9596
9646: POP
9647: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_INT 22
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9773
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9685: LD_ADDR_VAR 0 3
9689: PUSH
9690: DOUBLE
9691: LD_INT 1
9693: DEC
9694: ST_TO_ADDR
9695: LD_INT 2
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_OWVAR 67
9717: ARRAY
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9769
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9722: LD_INT 0
9724: PPUSH
9725: LD_INT 5
9727: PUSH
9728: LD_INT 6
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 8
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: LD_OWVAR 67
9747: ARRAY
9748: PPUSH
9749: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9753: CALL_OW 44
9757: PPUSH
9758: LD_VAR 0 2
9762: PPUSH
9763: CALL_OW 52
// end ;
9767: GO 9719
9769: POP
9770: POP
// end ;
9771: GO 9682
9773: POP
9774: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9775: LD_ADDR_VAR 0 2
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 3
9787: PUSH
9788: LD_INT 4
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: LD_INT 5
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: LD_OWVAR 67
9807: ARRAY
9808: PUSH
9809: FOR_TO
9810: IFFALSE 9857
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9812: LD_INT 0
9814: PPUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 5
9823: PUSH
9824: LD_INT 6
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_OWVAR 67
9837: ARRAY
9838: PPUSH
9839: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9843: CALL_OW 44
9847: PPUSH
9848: LD_INT 28
9850: PPUSH
9851: CALL_OW 52
// end ;
9855: GO 9809
9857: POP
9858: POP
// for i := 1 to 2 do
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: DOUBLE
9865: LD_INT 1
9867: DEC
9868: ST_TO_ADDR
9869: LD_INT 2
9871: PUSH
9872: FOR_TO
9873: IFFALSE 9907
// begin PrepareScientist ( false , 6 ) ;
9875: LD_INT 0
9877: PPUSH
9878: LD_INT 6
9880: PPUSH
9881: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9885: CALL_OW 44
9889: PPUSH
9890: LD_INT 81
9892: PPUSH
9893: LD_INT 93
9895: PPUSH
9896: CALL_OW 428
9900: PPUSH
9901: CALL_OW 52
// end ;
9905: GO 9872
9907: POP
9908: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9909: LD_INT 22
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 51
9920: PPUSH
9921: LD_INT 100
9923: PPUSH
9924: CALL 45106 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9928: CALL_OW 45
9932: PPUSH
9933: LD_INT 91
9935: PPUSH
9936: LD_INT 94
9938: PPUSH
9939: LD_INT 3
9941: PPUSH
9942: LD_INT 0
9944: PPUSH
9945: CALL_OW 50
// for i := 1 to 2 do
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: DOUBLE
9955: LD_INT 1
9957: DEC
9958: ST_TO_ADDR
9959: LD_INT 2
9961: PUSH
9962: FOR_TO
9963: IFFALSE 10007
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9965: LD_INT 22
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: LD_INT 3
9973: PPUSH
9974: LD_INT 52
9976: PPUSH
9977: LD_INT 100
9979: PPUSH
9980: CALL 45106 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9984: CALL_OW 45
9988: PPUSH
9989: LD_INT 91
9991: PPUSH
9992: LD_INT 94
9994: PPUSH
9995: LD_INT 4
9997: PPUSH
9998: LD_INT 0
10000: PPUSH
10001: CALL_OW 50
// end ;
10005: GO 9962
10007: POP
10008: POP
// end ;
10009: LD_VAR 0 1
10013: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
// uc_side := 3 ;
10021: LD_ADDR_OWVAR 20
10025: PUSH
10026: LD_INT 3
10028: ST_TO_ADDR
// uc_nation := 3 ;
10029: LD_ADDR_OWVAR 21
10033: PUSH
10034: LD_INT 3
10036: ST_TO_ADDR
// for i := 1 to 4 do
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_INT 4
10049: PUSH
10050: FOR_TO
10051: IFFALSE 10178
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10053: LD_INT 22
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: LD_INT 42
10064: PUSH
10065: LD_INT 43
10067: PUSH
10068: LD_INT 44
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 1
10078: PPUSH
10079: LD_INT 3
10081: PPUSH
10082: CALL_OW 12
10086: ARRAY
10087: PPUSH
10088: LD_INT 40
10090: PPUSH
10091: CALL 45106 0 5
// veh := CreateVehicle ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10105: LD_VAR 0 4
10109: PPUSH
10110: LD_INT 5
10112: PPUSH
10113: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10117: LD_VAR 0 4
10121: PPUSH
10122: LD_INT 7
10124: PPUSH
10125: LD_INT 0
10127: PPUSH
10128: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10132: LD_INT 0
10134: PPUSH
10135: LD_INT 5
10137: PPUSH
10138: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10142: CALL_OW 44
10146: PPUSH
10147: LD_VAR 0 4
10151: PPUSH
10152: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10156: LD_ADDR_VAR 0 5
10160: PUSH
10161: LD_VAR 0 5
10165: PPUSH
10166: LD_VAR 0 4
10170: PPUSH
10171: CALL 77558 0 2
10175: ST_TO_ADDR
// end ;
10176: GO 10050
10178: POP
10179: POP
// for i := 1 to 3 do
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: DOUBLE
10186: LD_INT 1
10188: DEC
10189: ST_TO_ADDR
10190: LD_INT 3
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10321
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10196: LD_INT 22
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_INT 42
10207: PUSH
10208: LD_INT 43
10210: PUSH
10211: LD_INT 44
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 12
10229: ARRAY
10230: PPUSH
10231: LD_INT 40
10233: PPUSH
10234: CALL 45106 0 5
// veh := CreateVehicle ;
10238: LD_ADDR_VAR 0 4
10242: PUSH
10243: CALL_OW 45
10247: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10248: LD_VAR 0 4
10252: PPUSH
10253: LD_INT 5
10255: PPUSH
10256: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10260: LD_VAR 0 4
10264: PPUSH
10265: LD_INT 8
10267: PPUSH
10268: LD_INT 0
10270: PPUSH
10271: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10275: LD_INT 0
10277: PPUSH
10278: LD_INT 5
10280: PPUSH
10281: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10285: CALL_OW 44
10289: PPUSH
10290: LD_VAR 0 4
10294: PPUSH
10295: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10299: LD_ADDR_VAR 0 5
10303: PUSH
10304: LD_VAR 0 5
10308: PPUSH
10309: LD_VAR 0 4
10313: PPUSH
10314: CALL 77558 0 2
10318: ST_TO_ADDR
// end ;
10319: GO 10193
10321: POP
10322: POP
// for i := 1 to 2 do
10323: LD_ADDR_VAR 0 2
10327: PUSH
10328: DOUBLE
10329: LD_INT 1
10331: DEC
10332: ST_TO_ADDR
10333: LD_INT 2
10335: PUSH
10336: FOR_TO
10337: IFFALSE 10396
// begin PrepareSoldier ( false , 5 ) ;
10339: LD_INT 0
10341: PPUSH
10342: LD_INT 5
10344: PPUSH
10345: CALL_OW 381
// un := CreateHuman ;
10349: LD_ADDR_VAR 0 3
10353: PUSH
10354: CALL_OW 44
10358: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 8
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10374: LD_ADDR_VAR 0 5
10378: PUSH
10379: LD_VAR 0 5
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: CALL 77558 0 2
10393: ST_TO_ADDR
// end ;
10394: GO 10336
10396: POP
10397: POP
// for i in tmp do
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_VAR 0 5
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10428
// ComAgressiveMove ( i , 51 , 16 ) ;
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 51
10418: PPUSH
10419: LD_INT 16
10421: PPUSH
10422: CALL_OW 114
10426: GO 10408
10428: POP
10429: POP
// end ;
10430: LD_VAR 0 1
10434: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10435: LD_EXP 34
10439: IFFALSE 11014
10441: GO 10443
10443: DISABLE
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
10448: PPUSH
// begin enable ;
10449: ENABLE
// if not ruMobile then
10450: LD_EXP 34
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 11014
// for i in ruMobile do
10459: LD_ADDR_VAR 0 1
10463: PUSH
10464: LD_EXP 34
10468: PUSH
10469: FOR_IN
10470: IFFALSE 11012
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 302
10481: NOT
10482: PUSH
10483: LD_VAR 0 1
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 3
10495: NONEQUAL
10496: OR
10497: IFFALSE 10517
// begin ruMobile := ruMobile diff i ;
10499: LD_ADDR_EXP 34
10503: PUSH
10504: LD_EXP 34
10508: PUSH
10509: LD_VAR 0 1
10513: DIFF
10514: ST_TO_ADDR
// continue ;
10515: GO 10469
// end ; if GetTag ( i ) = 300 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 110
10526: PUSH
10527: LD_INT 300
10529: EQUAL
10530: IFFALSE 10645
// begin if GetFuel ( i ) < 50 then
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 261
10541: PUSH
10542: LD_INT 50
10544: LESS
10545: IFFALSE 10604
// begin ComMoveXY ( i , 93 , 100 ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: LD_INT 93
10554: PPUSH
10555: LD_INT 100
10557: PPUSH
10558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10562: LD_INT 35
10564: PPUSH
10565: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10569: LD_VAR 0 1
10573: PPUSH
10574: LD_INT 93
10576: PPUSH
10577: LD_INT 100
10579: PPUSH
10580: CALL_OW 297
10584: PUSH
10585: LD_INT 4
10587: LESS
10588: IFFALSE 10562
// SetFuel ( i , 100 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 100
10597: PPUSH
10598: CALL_OW 240
// end else
10602: GO 10645
// if not IsInArea ( i , ruParkingArea ) then
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 308
10616: NOT
10617: IFFALSE 10633
// ComMoveToArea ( i , ruParkingArea ) else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 10
10626: PPUSH
10627: CALL_OW 113
10631: GO 10645
// SetTag ( i , 301 ) ;
10633: LD_VAR 0 1
10637: PPUSH
10638: LD_INT 301
10640: PPUSH
10641: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_INT 301
10657: EQUAL
10658: IFFALSE 10788
// begin if GetLives ( i ) < 1000 then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 256
10669: PUSH
10670: LD_INT 1000
10672: LESS
10673: IFFALSE 10765
// begin if not IsDrivenBy ( i ) then
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 311
10684: NOT
10685: IFFALSE 10689
// continue ;
10687: GO 10469
// mech := IsDrivenBy ( i ) ;
10689: LD_ADDR_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: PPUSH
10699: CALL_OW 311
10703: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10713: LD_VAR 0 2
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10727: LD_INT 35
10729: PPUSH
10730: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 256
10743: PUSH
10744: LD_INT 1000
10746: EQUAL
10747: IFFALSE 10727
// ComEnterUnit ( mech , i ) ;
10749: LD_VAR 0 2
10753: PPUSH
10754: LD_VAR 0 1
10758: PPUSH
10759: CALL_OW 120
// end else
10763: GO 10788
// if IsDrivenBy ( i ) then
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 311
10774: IFFALSE 10788
// SetTag ( i , 0 ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 0
10783: PPUSH
10784: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 110
10797: PUSH
10798: LD_INT 300
10800: LESS
10801: IFFALSE 11010
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10803: LD_ADDR_VAR 0 3
10807: PUSH
10808: LD_INT 11
10810: PPUSH
10811: LD_INT 81
10813: PUSH
10814: LD_INT 3
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 70
10825: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 256
10835: PUSH
10836: LD_INT 650
10838: LESS
10839: IFFALSE 10864
// begin ComStop ( i ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 141
// SetTag ( i , 300 ) ;
10850: LD_VAR 0 1
10854: PPUSH
10855: LD_INT 300
10857: PPUSH
10858: CALL_OW 109
// continue ;
10862: GO 10469
// end ; if enemy then
10864: LD_VAR 0 3
10868: IFFALSE 10908
// begin if not HasTask ( i ) then
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 314
10879: NOT
10880: IFFALSE 10906
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 74
10901: PPUSH
10902: CALL_OW 115
// end else
10906: GO 11010
// if ruMobile > 2 then
10908: LD_EXP 34
10912: PUSH
10913: LD_INT 2
10915: GREATER
10916: IFFALSE 11010
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 69
10937: ST_TO_ADDR
// if enemy then
10938: LD_VAR 0 3
10942: IFFALSE 11010
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_INT 116
10951: PUSH
10952: LD_INT 95
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 84
10961: PUSH
10962: LD_INT 68
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 58
10971: PUSH
10972: LD_INT 53
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 44
10981: PUSH
10982: LD_INT 35
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 45
10991: PUSH
10992: LD_INT 23
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL 80162 0 2
// end ; end ; end ;
11010: GO 10469
11012: POP
11013: POP
// end ;
11014: PPOPN 3
11016: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11017: LD_INT 3
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 32
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PPUSH
11048: CALL_OW 69
11052: IFFALSE 11136
11054: GO 11056
11056: DISABLE
11057: LD_INT 0
11059: PPUSH
// begin enable ;
11060: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 69
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11134
// if GetFuel ( i ) < 3 then
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 261
11114: PUSH
11115: LD_INT 3
11117: LESS
11118: IFFALSE 11132
// SetFuel ( i , 3 ) ;
11120: LD_VAR 0 1
11124: PPUSH
11125: LD_INT 3
11127: PPUSH
11128: CALL_OW 240
11132: GO 11102
11134: POP
11135: POP
// end ;
11136: PPOPN 1
11138: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11139: LD_INT 29
11141: PPUSH
11142: CALL_OW 302
11146: PUSH
11147: LD_INT 29
11149: PPUSH
11150: CALL_OW 461
11154: PUSH
11155: LD_INT 2
11157: EQUAL
11158: AND
11159: IFFALSE 11392
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
// begin enable ;
11168: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11169: LD_ADDR_VAR 0 1
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 23
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_INT 4
11197: PPUSH
11198: CALL_OW 12
11202: ARRAY
11203: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11204: LD_ADDR_VAR 0 2
11208: PUSH
11209: LD_INT 42
11211: PUSH
11212: LD_INT 44
11214: PUSH
11215: LD_INT 43
11217: PUSH
11218: LD_INT 46
11220: PUSH
11221: LD_INT 45
11223: PUSH
11224: LD_INT 46
11226: PUSH
11227: LD_INT 45
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: LD_OWVAR 67
11243: PUSH
11244: LD_INT 0
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: CALL_OW 12
11254: PLUS
11255: ARRAY
11256: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11257: LD_VAR 0 1
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 22
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: IN
11272: PUSH
11273: LD_VAR 0 2
11277: PUSH
11278: LD_INT 46
11280: EQUAL
11281: AND
11282: IFFALSE 11311
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11284: LD_ADDR_VAR 0 2
11288: PUSH
11289: LD_INT 44
11291: PUSH
11292: LD_INT 45
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 1
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: CALL_OW 12
11309: ARRAY
11310: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 25200
11318: PUSH
11319: LD_INT 23100
11321: PUSH
11322: LD_INT 21000
11324: PUSH
11325: LD_INT 18900
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESS
11340: IFFALSE 11369
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: LD_INT 44
11349: PUSH
11350: LD_INT 43
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 1
11359: PPUSH
11360: LD_INT 2
11362: PPUSH
11363: CALL_OW 12
11367: ARRAY
11368: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11369: LD_INT 29
11371: PPUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL_OW 185
// end ;
11392: PPOPN 2
11394: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11395: LD_INT 28
11397: PPUSH
11398: CALL_OW 302
11402: IFFALSE 12994
11404: GO 11406
11406: DISABLE
11407: LD_INT 0
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
// begin enable ;
11422: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_INT 12
11430: PPUSH
11431: LD_INT 3
11433: PUSH
11434: LD_INT 24
11436: PUSH
11437: LD_INT 1000
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 70
11466: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 25
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PPUSH
11496: CALL_OW 69
11500: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 34
11518: PUSH
11519: LD_INT 52
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11535: LD_ADDR_VAR 0 8
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: CALL_OW 69
11568: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11569: LD_ADDR_VAR 0 9
11573: PUSH
11574: LD_INT 81
11576: PPUSH
11577: LD_INT 93
11579: PPUSH
11580: CALL_OW 428
11584: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11585: LD_ADDR_VAR 0 10
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 30
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 50
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: LD_INT 58
11618: PUSH
11619: EMPTY
11620: LIST
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 120
11627: PUSH
11628: LD_INT 701
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11651: LD_ADDR_VAR 0 12
11655: PUSH
11656: LD_INT 22
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 30
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 50
11678: PUSH
11679: EMPTY
11680: LIST
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: LD_INT 62
11687: PUSH
11688: EMPTY
11689: LIST
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// if emptyTowers then
11706: LD_VAR 0 10
11710: IFFALSE 11971
// begin for i in emptyTowers do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_VAR 0 10
11721: PUSH
11722: FOR_IN
11723: IFFALSE 11967
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11725: LD_ADDR_VAR 0 11
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 54
11745: PUSH
11746: EMPTY
11747: LIST
11748: PUSH
11749: LD_INT 95
11751: PUSH
11752: LD_INT 12
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 50
11776: PUSH
11777: EMPTY
11778: LIST
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 120
11785: PUSH
11786: LD_INT 701
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if not sol then
11809: LD_VAR 0 11
11813: NOT
11814: IFFALSE 11818
// break ;
11816: GO 11967
// for j in sol do
11818: LD_ADDR_VAR 0 2
11822: PUSH
11823: LD_VAR 0 11
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11880
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11831: LD_VAR 0 2
11835: PPUSH
11836: CALL_OW 310
11840: PUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: CALL_OW 310
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_INT 32
11858: EQUAL
11859: AND
11860: IFFALSE 11878
// sol := sol diff j ;
11862: LD_ADDR_VAR 0 11
11866: PUSH
11867: LD_VAR 0 11
11871: PUSH
11872: LD_VAR 0 2
11876: DIFF
11877: ST_TO_ADDR
11878: GO 11828
11880: POP
11881: POP
// if not sol then
11882: LD_VAR 0 11
11886: NOT
11887: IFFALSE 11891
// break ;
11889: GO 11967
// if IsInUnit ( sol [ 1 ] ) then
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL_OW 310
11904: IFFALSE 11919
// ComExit ( sol [ 1 ] ) ;
11906: LD_VAR 0 11
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL 77956 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11919: LD_VAR 0 11
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: LD_INT 701
11930: PPUSH
11931: CALL_OW 109
// SetTag ( i , 701 ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 701
11942: PPUSH
11943: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11947: LD_VAR 0 11
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 180
// end ;
11965: GO 11722
11967: POP
11968: POP
// end else
11969: GO 12217
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11971: LD_VAR 0 11
11975: PPUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 54
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: LD_INT 95
11987: PUSH
11988: LD_INT 12
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 72
12004: IFFALSE 12217
// begin if barracks then
12006: LD_VAR 0 12
12010: IFFALSE 12078
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_VAR 0 11
12021: PPUSH
12022: LD_INT 3
12024: PUSH
12025: LD_INT 54
12027: PUSH
12028: EMPTY
12029: LIST
12030: PUSH
12031: LD_INT 95
12033: PUSH
12034: LD_INT 12
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 72
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12074
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 12
12063: PUSH
12064: LD_INT 1
12066: ARRAY
12067: PPUSH
12068: CALL_OW 120
12072: GO 12051
12074: POP
12075: POP
// end else
12076: GO 12217
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12078: LD_INT 12
12080: PPUSH
12081: LD_INT 81
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 70
12095: IFFALSE 12217
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_VAR 0 11
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: LD_INT 95
12118: PUSH
12119: LD_INT 12
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12215
// begin SetTag ( i , 702 ) ;
12139: LD_VAR 0 1
12143: PPUSH
12144: LD_INT 702
12146: PPUSH
12147: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12151: LD_ADDR_VAR 0 13
12155: PUSH
12156: LD_INT 12
12158: PPUSH
12159: LD_INT 81
12161: PUSH
12162: LD_INT 3
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 70
12173: PPUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 74
12183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12184: LD_VAR 0 1
12188: PPUSH
12189: LD_VAR 0 13
12193: PPUSH
12194: CALL_OW 250
12198: PPUSH
12199: LD_VAR 0 13
12203: PPUSH
12204: CALL_OW 251
12208: PPUSH
12209: CALL_OW 114
// end ;
12213: GO 12136
12215: POP
12216: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12217: LD_ADDR_VAR 0 3
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 95
12234: PUSH
12235: LD_INT 11
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 50
12244: PUSH
12245: EMPTY
12246: LIST
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 120
12260: PUSH
12261: LD_INT 702
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if tmp then
12280: LD_VAR 0 3
12284: IFFALSE 12330
// for i in tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12328
// begin ComMoveXY ( i , 90 , 94 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 90
12306: PPUSH
12307: LD_INT 94
12309: PPUSH
12310: CALL_OW 111
// SetTag ( i , 0 ) ;
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 109
// end ;
12326: GO 12296
12328: POP
12329: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12330: LD_VAR 0 8
12334: PUSH
12335: LD_VAR 0 5
12339: PPUSH
12340: LD_INT 120
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: AND
12355: IFFALSE 12368
// ComExitAll ( sci ) else
12357: LD_VAR 0 8
12361: PPUSH
12362: CALL 78039 0 1
12366: GO 12441
// if sci then
12368: LD_VAR 0 8
12372: IFFALSE 12441
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12374: LD_VAR 0 8
12378: PPUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 54
12384: PUSH
12385: EMPTY
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: PUSH
12397: LD_VAR 0 9
12401: PPUSH
12402: CALL_OW 302
12406: AND
12407: IFFALSE 12441
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12409: LD_VAR 0 8
12413: PPUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 54
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 72
12431: PPUSH
12432: LD_VAR 0 9
12436: PPUSH
12437: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12441: LD_VAR 0 6
12445: PPUSH
12446: LD_INT 50
12448: PUSH
12449: EMPTY
12450: LIST
12451: PPUSH
12452: CALL_OW 72
12456: PUSH
12457: LD_VAR 0 4
12461: AND
12462: IFFALSE 12493
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12464: LD_VAR 0 6
12468: PPUSH
12469: LD_INT 50
12471: PUSH
12472: EMPTY
12473: LIST
12474: PPUSH
12475: CALL_OW 72
12479: PPUSH
12480: LD_VAR 0 4
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PPUSH
12489: CALL_OW 130
// if eng then
12493: LD_VAR 0 5
12497: IFFALSE 12994
// begin for i in eng do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_VAR 0 5
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12992
// begin tag := GetTag ( i ) ;
12512: LD_ADDR_VAR 0 7
12516: PUSH
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL_OW 110
12526: ST_TO_ADDR
// case tag of 0 :
12527: LD_VAR 0 7
12531: PUSH
12532: LD_INT 0
12534: DOUBLE
12535: EQUAL
12536: IFTRUE 12540
12538: GO 12751
12540: POP
// begin if b then
12541: LD_VAR 0 4
12545: IFFALSE 12561
// begin SetTag ( i , 1 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 109
// continue ;
12559: GO 12509
// end ; if not ruBuildList then
12561: LD_EXP 35
12565: NOT
12566: IFFALSE 12582
// ComEnterUnit ( i , ruDep ) else
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_INT 28
12575: PPUSH
12576: CALL_OW 120
12580: GO 12749
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12582: LD_INT 11
12584: PPUSH
12585: LD_INT 81
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PPUSH
12595: CALL_OW 70
12599: PUSH
12600: LD_INT 0
12602: EQUAL
12603: PUSH
12604: LD_INT 28
12606: PPUSH
12607: LD_EXP 35
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_EXP 35
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PUSH
12629: LD_INT 2
12631: ARRAY
12632: PPUSH
12633: LD_EXP 35
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PUSH
12642: LD_INT 3
12644: ARRAY
12645: PPUSH
12646: LD_EXP 35
12650: PUSH
12651: LD_INT 1
12653: ARRAY
12654: PUSH
12655: LD_INT 4
12657: ARRAY
12658: PPUSH
12659: CALL 53325 0 5
12663: AND
12664: IFFALSE 12749
// begin if IsInUnit ( i ) then
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL_OW 310
12675: IFFALSE 12688
// ComExitBuilding ( i ) else
12677: LD_VAR 0 1
12681: PPUSH
12682: CALL_OW 122
12686: GO 12749
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_EXP 35
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: LD_EXP 35
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PUSH
12715: LD_INT 2
12717: ARRAY
12718: PPUSH
12719: LD_EXP 35
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PUSH
12728: LD_INT 3
12730: ARRAY
12731: PPUSH
12732: LD_EXP 35
12736: PUSH
12737: LD_INT 1
12739: ARRAY
12740: PUSH
12741: LD_INT 4
12743: ARRAY
12744: PPUSH
12745: CALL_OW 145
// end ; end ; 1 :
12749: GO 12948
12751: LD_INT 1
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12862
12759: POP
// begin if not b then
12760: LD_VAR 0 4
12764: NOT
12765: IFFALSE 12781
// begin SetTag ( i , 0 ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 109
// continue ;
12779: GO 12509
// end ; if IsInUnit ( i ) then
12781: LD_VAR 0 1
12785: PPUSH
12786: CALL_OW 310
12790: IFFALSE 12801
// ComExitBuilding ( i ) ;
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 122
// if GetLives ( i ) < 650 then
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 256
12810: PUSH
12811: LD_INT 650
12813: LESS
12814: IFFALSE 12830
// begin SetTag ( i , 2 ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 2
12823: PPUSH
12824: CALL_OW 109
// continue ;
12828: GO 12509
// end ; if b then
12830: LD_VAR 0 4
12834: IFFALSE 12860
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 74
12855: PPUSH
12856: CALL_OW 130
// end ; 2 :
12860: GO 12948
12862: LD_INT 2
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12947
12870: POP
// begin if GetLives ( i ) = 1000 then
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 256
12880: PUSH
12881: LD_INT 1000
12883: EQUAL
12884: IFFALSE 12900
// begin SetTag ( i , 1 ) ;
12886: LD_VAR 0 1
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 109
// continue ;
12898: GO 12509
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_INT 84
12907: PPUSH
12908: LD_INT 93
12910: PPUSH
12911: CALL_OW 297
12915: PUSH
12916: LD_INT 6
12918: GREATER
12919: IFFALSE 12945
// begin ComMoveXY ( i , 84 , 93 ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: LD_INT 84
12928: PPUSH
12929: LD_INT 93
12931: PPUSH
12932: CALL_OW 111
// AddComHold ( i ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 200
// end ; end ; end ;
12945: GO 12948
12947: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_INT 12
12955: PPUSH
12956: CALL_OW 308
12960: NOT
12961: PUSH
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 310
12971: NOT
12972: AND
12973: IFFALSE 12990
// ComMoveXY ( i , 91 , 95 ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_INT 91
12982: PPUSH
12983: LD_INT 95
12985: PPUSH
12986: CALL_OW 111
// end ;
12990: GO 12509
12992: POP
12993: POP
// end ; end ;
12994: PPOPN 13
12996: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12997: LD_INT 0
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: DOUBLE
13011: LD_INT 1
13013: DEC
13014: ST_TO_ADDR
13015: LD_INT 3
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 6
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: LD_OWVAR 67
13037: ARRAY
13038: PUSH
13039: LD_VAR 0 1
13043: PLUS
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13363
// begin uc_side := 6 ;
13048: LD_ADDR_OWVAR 20
13052: PUSH
13053: LD_INT 6
13055: ST_TO_ADDR
// uc_nation := 3 ;
13056: LD_ADDR_OWVAR 21
13060: PUSH
13061: LD_INT 3
13063: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 21
13071: PUSH
13072: LD_INT 22
13074: PUSH
13075: LD_INT 23
13077: PUSH
13078: LD_INT 24
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 4
13092: PPUSH
13093: CALL_OW 12
13097: ARRAY
13098: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13099: LD_ADDR_VAR 0 7
13103: PUSH
13104: LD_INT 42
13106: PUSH
13107: LD_INT 44
13109: PUSH
13110: LD_INT 43
13112: PUSH
13113: LD_INT 46
13115: PUSH
13116: LD_INT 45
13118: PUSH
13119: LD_INT 46
13121: PUSH
13122: LD_INT 45
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_OWVAR 67
13138: PUSH
13139: LD_INT 0
13141: PPUSH
13142: LD_INT 3
13144: PPUSH
13145: CALL_OW 12
13149: PLUS
13150: ARRAY
13151: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13152: LD_VAR 0 6
13156: PUSH
13157: LD_INT 21
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: IN
13167: PUSH
13168: LD_VAR 0 7
13172: PUSH
13173: LD_INT 46
13175: EQUAL
13176: AND
13177: IFFALSE 13206
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13179: LD_ADDR_VAR 0 7
13183: PUSH
13184: LD_INT 44
13186: PUSH
13187: LD_INT 45
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 2
13199: PPUSH
13200: CALL_OW 12
13204: ARRAY
13205: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13206: LD_OWVAR 1
13210: PUSH
13211: LD_INT 31500
13213: PUSH
13214: LD_INT 27300
13216: PUSH
13217: LD_INT 23100
13219: PUSH
13220: LD_INT 18900
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: LD_OWVAR 67
13233: ARRAY
13234: LESS
13235: IFFALSE 13268
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13237: LD_ADDR_VAR 0 7
13241: PUSH
13242: LD_INT 44
13244: PUSH
13245: LD_INT 43
13247: PUSH
13248: LD_INT 42
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 1
13258: PPUSH
13259: LD_INT 3
13261: PPUSH
13262: CALL_OW 12
13266: ARRAY
13267: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13268: LD_VAR 0 6
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: LD_VAR 0 7
13283: PPUSH
13284: LD_INT 90
13286: PPUSH
13287: CALL 45106 0 5
// un := CreateVehicle ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: CALL_OW 45
13300: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_INT 140
13308: PPUSH
13309: LD_INT 146
13311: PPUSH
13312: LD_INT 0
13314: PPUSH
13315: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_INT 131
13326: PPUSH
13327: LD_INT 128
13329: PPUSH
13330: CALL_OW 111
// wait ( 0 0$3 ) ;
13334: LD_INT 105
13336: PPUSH
13337: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13341: LD_ADDR_VAR 0 5
13345: PUSH
13346: LD_VAR 0 5
13350: PPUSH
13351: LD_VAR 0 4
13355: PPUSH
13356: CALL 77558 0 2
13360: ST_TO_ADDR
// end ;
13361: GO 13045
13363: POP
13364: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13365: LD_ADDR_EXP 36
13369: PUSH
13370: LD_EXP 36
13374: PPUSH
13375: LD_VAR 0 5
13379: PPUSH
13380: CALL 77595 0 2
13384: ST_TO_ADDR
// end ;
13385: LD_VAR 0 2
13389: RET
// every 0 0$3 trigger russianAttackers do
13390: LD_EXP 36
13394: IFFALSE 13477
13396: GO 13398
13398: DISABLE
// begin enable ;
13399: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13400: LD_EXP 36
13404: PPUSH
13405: LD_INT 126
13407: PUSH
13408: LD_INT 108
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 107
13417: PUSH
13418: LD_INT 85
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 82
13427: PUSH
13428: LD_INT 62
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 73
13437: PUSH
13438: LD_INT 46
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 62
13447: PUSH
13448: LD_INT 31
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 52
13457: PUSH
13458: LD_INT 17
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL 80162 0 2
// end ; end_of_file
13477: END
// on SailEvent ( event ) do begin if event = 1 then
13478: LD_VAR 0 1
13482: PUSH
13483: LD_INT 1
13485: EQUAL
13486: IFFALSE 13501
// PrepareRussianAttack ( Difficulty + 3 ) ;
13488: LD_OWVAR 67
13492: PUSH
13493: LD_INT 3
13495: PLUS
13496: PPUSH
13497: CALL 12997 0 1
// end ;
13501: PPOPN 1
13503: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13504: LD_VAR 0 1
13508: PUSH
13509: LD_EXP 28
13513: EQUAL
13514: PUSH
13515: LD_VAR 0 2
13519: PUSH
13520: LD_INT 1
13522: EQUAL
13523: AND
13524: IFFALSE 13530
// SikorskiKilledInAction ;
13526: CALL 18647 0 0
// end ;
13530: PPOPN 3
13532: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13533: LD_INT 0
13535: PPUSH
13536: PPUSH
13537: PPUSH
13538: PPUSH
13539: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL 35977 0 1
// if un = JMM then
13549: LD_VAR 0 1
13553: PUSH
13554: LD_EXP 14
13558: EQUAL
13559: IFFALSE 13568
// YouLost ( JMM ) ;
13561: LD_STRING JMM
13563: PPUSH
13564: CALL_OW 104
// if un = Sikorski then
13568: LD_VAR 0 1
13572: PUSH
13573: LD_EXP 28
13577: EQUAL
13578: IFFALSE 13604
// if sikorskiStatus = 0 then
13580: LD_EXP 9
13584: PUSH
13585: LD_INT 0
13587: EQUAL
13588: IFFALSE 13596
// SikorskiKilledInAction else
13590: CALL 18647 0 0
13594: GO 13604
// sikorskiIsKilled := true ;
13596: LD_ADDR_EXP 10
13600: PUSH
13601: LD_INT 1
13603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 255
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 248
13627: PUSH
13628: LD_INT 1
13630: EQUAL
13631: AND
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 266
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: IN
13653: AND
13654: IFFALSE 13663
// YouLost ( Destroyed ) ;
13656: LD_STRING Destroyed
13658: PPUSH
13659: CALL_OW 104
// if un = ruDep then
13663: LD_VAR 0 1
13667: PUSH
13668: LD_INT 28
13670: EQUAL
13671: IFFALSE 13805
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_INT 22
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13803
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: LD_INT 11
13717: PPUSH
13718: LD_INT 81
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 70
13732: PPUSH
13733: LD_VAR 0 2
13737: PPUSH
13738: CALL_OW 74
13742: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 310
13752: PPUSH
13753: CALL_OW 266
13757: PUSH
13758: LD_INT 32
13760: EQUAL
13761: IFFALSE 13801
// begin ComExitBuilding ( i ) ;
13763: LD_VAR 0 2
13767: PPUSH
13768: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13772: LD_VAR 0 2
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: CALL_OW 250
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: CALL_OW 251
13796: PPUSH
13797: CALL_OW 174
// end ; end ;
13801: GO 13707
13803: POP
13804: POP
// end ; if un in ruMobile then
13805: LD_VAR 0 1
13809: PUSH
13810: LD_EXP 34
13814: IN
13815: IFFALSE 13833
// ruMobile := ruMobile diff un ;
13817: LD_ADDR_EXP 34
13821: PUSH
13822: LD_EXP 34
13826: PUSH
13827: LD_VAR 0 1
13831: DIFF
13832: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 3
13845: EQUAL
13846: IFFALSE 14481
// begin if GetType ( un ) = unit_building then
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 247
13857: PUSH
13858: LD_INT 3
13860: EQUAL
13861: IFFALSE 13997
// begin btype := GetBType ( un ) ;
13863: LD_ADDR_VAR 0 6
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: CALL_OW 266
13877: ST_TO_ADDR
// if btype = b_warehouse then
13878: LD_VAR 0 6
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: IFFALSE 13896
// btype := b_depot ;
13888: LD_ADDR_VAR 0 6
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// if btype = b_barracks then
13896: LD_VAR 0 6
13900: PUSH
13901: LD_INT 5
13903: EQUAL
13904: IFFALSE 13914
// btype := b_armoury ;
13906: LD_ADDR_VAR 0 6
13910: PUSH
13911: LD_INT 4
13913: ST_TO_ADDR
// if btype = b_lab_full then
13914: LD_VAR 0 6
13918: PUSH
13919: LD_INT 8
13921: EQUAL
13922: IFFALSE 13932
// btype := b_lab ;
13924: LD_ADDR_VAR 0 6
13928: PUSH
13929: LD_INT 6
13931: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
13932: LD_ADDR_EXP 35
13936: PUSH
13937: LD_EXP 35
13941: PPUSH
13942: LD_EXP 35
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: PPUSH
13951: LD_VAR 0 6
13955: PUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 250
13965: PUSH
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 251
13975: PUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 254
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 1
13996: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 247
14006: PUSH
14007: LD_INT 2
14009: EQUAL
14010: IFFALSE 14285
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 264
14021: PUSH
14022: LD_INT 52
14024: PUSH
14025: LD_INT 51
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: IN
14032: IFFALSE 14062
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14034: LD_INT 29
14036: PPUSH
14037: LD_INT 22
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: LD_INT 3
14045: PPUSH
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 264
14055: PPUSH
14056: CALL_OW 185
// end else
14060: GO 14285
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14062: LD_ADDR_VAR 0 4
14066: PUSH
14067: LD_INT 21
14069: PUSH
14070: LD_INT 22
14072: PUSH
14073: LD_INT 23
14075: PUSH
14076: LD_INT 24
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 1
14087: PPUSH
14088: LD_INT 4
14090: PPUSH
14091: CALL_OW 12
14095: ARRAY
14096: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14097: LD_ADDR_VAR 0 5
14101: PUSH
14102: LD_INT 42
14104: PUSH
14105: LD_INT 44
14107: PUSH
14108: LD_INT 43
14110: PUSH
14111: LD_INT 46
14113: PUSH
14114: LD_INT 45
14116: PUSH
14117: LD_INT 46
14119: PUSH
14120: LD_INT 45
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: LD_OWVAR 67
14136: PUSH
14137: LD_INT 0
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 12
14147: PLUS
14148: ARRAY
14149: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14150: LD_VAR 0 4
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: IN
14165: PUSH
14166: LD_VAR 0 5
14170: PUSH
14171: LD_INT 46
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14177: LD_ADDR_VAR 0 5
14181: PUSH
14182: LD_INT 44
14184: PUSH
14185: LD_INT 45
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 1
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: CALL_OW 12
14202: ARRAY
14203: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14204: LD_OWVAR 1
14208: PUSH
14209: LD_INT 31500
14211: PUSH
14212: LD_INT 27300
14214: PUSH
14215: LD_INT 23100
14217: PUSH
14218: LD_INT 21000
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: LD_OWVAR 67
14231: ARRAY
14232: LESS
14233: IFFALSE 14262
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: LD_INT 44
14242: PUSH
14243: LD_INT 43
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 1
14252: PPUSH
14253: LD_INT 2
14255: PPUSH
14256: CALL_OW 12
14260: ARRAY
14261: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14262: LD_INT 29
14264: PPUSH
14265: LD_VAR 0 4
14269: PPUSH
14270: LD_INT 1
14272: PPUSH
14273: LD_INT 1
14275: PPUSH
14276: LD_VAR 0 5
14280: PPUSH
14281: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 257
14294: PUSH
14295: LD_INT 3
14297: EQUAL
14298: IFFALSE 14481
// begin killMechCounter := Inc ( killMechCounter ) ;
14300: LD_ADDR_EXP 12
14304: PUSH
14305: LD_EXP 12
14309: PPUSH
14310: CALL 78919 0 1
14314: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14315: LD_EXP 33
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: PUSH
14324: LD_INT 29
14326: PPUSH
14327: CALL_OW 302
14331: NOT
14332: OR
14333: IFFALSE 14337
// exit ;
14335: GO 14481
// ruMechCounter := Dec ( ruMechCounter ) ;
14337: LD_ADDR_EXP 33
14341: PUSH
14342: LD_EXP 33
14346: PPUSH
14347: CALL 78941 0 1
14351: ST_TO_ADDR
// uc_side := 3 ;
14352: LD_ADDR_OWVAR 20
14356: PUSH
14357: LD_INT 3
14359: ST_TO_ADDR
// uc_nation := 3 ;
14360: LD_ADDR_OWVAR 21
14364: PUSH
14365: LD_INT 3
14367: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14368: LD_INT 0
14370: PPUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: LD_OWVAR 67
14393: ARRAY
14394: PPUSH
14395: CALL_OW 383
// tmp := CreateHuman ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: CALL_OW 44
14408: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 145
14416: PPUSH
14417: LD_INT 133
14419: PPUSH
14420: LD_INT 0
14422: PPUSH
14423: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14427: LD_VAR 0 3
14431: PPUSH
14432: LD_INT 29
14434: PPUSH
14435: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14439: LD_INT 35
14441: PPUSH
14442: CALL_OW 67
// if not HasTask ( tmp ) then
14446: LD_VAR 0 3
14450: PPUSH
14451: CALL_OW 314
14455: NOT
14456: IFFALSE 14470
// ComEnterUnit ( tmp , ruFac ) ;
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 29
14465: PPUSH
14466: CALL_OW 120
// until IsInUnit ( tmp ) ;
14470: LD_VAR 0 3
14474: PPUSH
14475: CALL_OW 310
14479: IFFALSE 14439
// end ; end ; end ;
14481: PPOPN 6
14483: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: PUSH
14494: LD_INT 4
14496: EQUAL
14497: IFFALSE 14514
// ComMoveXY ( driver , 40 , 47 ) ;
14499: LD_VAR 0 1
14503: PPUSH
14504: LD_INT 40
14506: PPUSH
14507: LD_INT 47
14509: PPUSH
14510: CALL_OW 111
// if GetSide ( driver ) = 3 then
14514: LD_VAR 0 1
14518: PPUSH
14519: CALL_OW 255
14523: PUSH
14524: LD_INT 3
14526: EQUAL
14527: IFFALSE 14741
// begin ComMoveXY ( driver , 90 , 97 ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_INT 90
14536: PPUSH
14537: LD_INT 97
14539: PPUSH
14540: CALL_OW 111
// if IsOk ( ruFac ) then
14544: LD_INT 29
14546: PPUSH
14547: CALL_OW 302
14551: IFFALSE 14665
// begin repeat wait ( 0 0$1 ) ;
14553: LD_INT 35
14555: PPUSH
14556: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14560: LD_INT 29
14562: PPUSH
14563: CALL_OW 313
14567: PUSH
14568: LD_INT 6
14570: LESS
14571: PUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: CALL_OW 301
14581: OR
14582: IFFALSE 14553
// if IsDead ( driver ) then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 301
14593: IFFALSE 14597
// exit ;
14595: GO 14741
// repeat wait ( 0 0$10 ) ;
14597: LD_INT 350
14599: PPUSH
14600: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 314
14613: NOT
14614: PUSH
14615: LD_INT 29
14617: PPUSH
14618: CALL_OW 313
14622: PUSH
14623: LD_INT 6
14625: LESS
14626: AND
14627: IFFALSE 14641
// ComEnterUnit ( driver , ruFac ) ;
14629: LD_VAR 0 1
14633: PPUSH
14634: LD_INT 29
14636: PPUSH
14637: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 301
14650: PUSH
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 310
14660: OR
14661: IFFALSE 14597
// end else
14663: GO 14741
// begin ComMoveXY ( driver , 142 , 148 ) ;
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 142
14672: PPUSH
14673: LD_INT 148
14675: PPUSH
14676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14680: LD_INT 35
14682: PPUSH
14683: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 301
14696: PUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 142
14704: PPUSH
14705: LD_INT 148
14707: PPUSH
14708: CALL_OW 307
14712: OR
14713: IFFALSE 14680
// if IsAt ( driver , 142 , 148 ) then
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 142
14722: PPUSH
14723: LD_INT 148
14725: PPUSH
14726: CALL_OW 307
14730: IFFALSE 14741
// RemoveUnit ( driver ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 64
// end ; end ; end ;
14741: PPOPN 4
14743: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14744: LD_VAR 0 2
14748: PPUSH
14749: CALL_OW 257
14753: PUSH
14754: LD_INT 3
14756: EQUAL
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: AND
14772: PUSH
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 29
14780: EQUAL
14781: AND
14782: IFFALSE 14796
// SetLives ( un , 1000 ) ;
14784: LD_VAR 0 2
14788: PPUSH
14789: LD_INT 1000
14791: PPUSH
14792: CALL_OW 234
// if GetTag ( b ) = 701 then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 110
14805: PUSH
14806: LD_INT 701
14808: EQUAL
14809: IFFALSE 14835
// begin SetTag ( b , 0 ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_INT 0
14818: PPUSH
14819: CALL_OW 109
// SetTag ( un , 0 ) ;
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_INT 0
14830: PPUSH
14831: CALL_OW 109
// end ; end ;
14835: PPOPN 2
14837: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 255
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 6
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: IN
14858: PUSH
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 263
14868: PUSH
14869: LD_INT 3
14871: EQUAL
14872: AND
14873: PUSH
14874: LD_EXP 7
14878: NOT
14879: AND
14880: IFFALSE 14899
// begin seenComputer := true ;
14882: LD_ADDR_EXP 7
14886: PUSH
14887: LD_INT 1
14889: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL 17838 0 1
// end ; end ;
14899: PPOPN 1
14901: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14902: LD_INT 0
14904: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL 36097 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 255
14928: PUSH
14929: LD_INT 3
14931: EQUAL
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 263
14942: PUSH
14943: LD_INT 1
14945: EQUAL
14946: AND
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 264
14957: PUSH
14958: LD_INT 42
14960: PUSH
14961: LD_INT 43
14963: PUSH
14964: LD_INT 44
14966: PUSH
14967: LD_INT 46
14969: PUSH
14970: LD_INT 45
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: IN
14980: AND
14981: IFFALSE 15011
// begin SetTag ( vehicle , 300 ) ;
14983: LD_VAR 0 1
14987: PPUSH
14988: LD_INT 300
14990: PPUSH
14991: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14995: LD_ADDR_EXP 34
14999: PUSH
15000: LD_EXP 34
15004: PUSH
15005: LD_VAR 0 1
15009: UNION
15010: ST_TO_ADDR
// end ; end ;
15011: PPOPN 3
15013: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15014: LD_INT 0
15016: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15017: LD_VAR 0 2
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 13
15029: PPUSH
15030: CALL_OW 309
15034: IFFALSE 15165
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15036: LD_ADDR_VAR 0 6
15040: PUSH
15041: LD_INT 22
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 50
15053: PUSH
15054: EMPTY
15055: LIST
15056: PUSH
15057: LD_INT 34
15059: PUSH
15060: LD_INT 51
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// if not cargo then
15077: LD_VAR 0 6
15081: NOT
15082: IFFALSE 15086
// exit ;
15084: GO 15165
// wait ( 0 0$5 ) ;
15086: LD_INT 175
15088: PPUSH
15089: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15093: LD_VAR 0 6
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: LD_INT 28
15104: PPUSH
15105: CALL_OW 296
15109: PUSH
15110: LD_INT 6
15112: LESS
15113: PUSH
15114: LD_VAR 0 6
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: CALL_OW 261
15127: PUSH
15128: LD_INT 50
15130: LESS
15131: AND
15132: IFFALSE 15146
// ComMoveUnit ( cargo , ruDep ) ;
15134: LD_VAR 0 6
15138: PPUSH
15139: LD_INT 28
15141: PPUSH
15142: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15146: LD_VAR 0 6
15150: PPUSH
15151: LD_VAR 0 2
15155: PPUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: CALL_OW 177
// end ; end ;
15165: PPOPN 6
15167: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 264
15177: PUSH
15178: LD_INT 45
15180: EQUAL
15181: IFFALSE 15198
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15183: LD_ADDR_EXP 11
15187: PUSH
15188: LD_EXP 11
15192: PPUSH
15193: CALL 78919 0 1
15197: ST_TO_ADDR
// end ;
15198: PPOPN 4
15200: END
// on BuildingComplete ( b ) do var i , tmp ;
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
// begin if GetSide ( b ) = 3 then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 255
15214: PUSH
15215: LD_INT 3
15217: EQUAL
15218: IFFALSE 15315
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15220: LD_ADDR_EXP 35
15224: PUSH
15225: LD_EXP 35
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 3
15237: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 266
15247: PUSH
15248: LD_INT 4
15250: EQUAL
15251: IFFALSE 15262
// ComUpgrade ( b ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 266
15271: PUSH
15272: LD_INT 32
15274: PUSH
15275: LD_INT 33
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: IN
15282: IFFALSE 15315
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 46
15291: PUSH
15292: LD_INT 45
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 12
15309: ARRAY
15310: PPUSH
15311: CALL_OW 208
// end ; end ; end_of_file
15315: PPOPN 3
15317: END
// export function Action ; var i , tmp , un , inUnit ; begin
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
// Video ( true ) ;
15325: LD_INT 1
15327: PPUSH
15328: CALL 77530 0 1
// invincibleMode := true ;
15332: LD_ADDR_EXP 5
15336: PUSH
15337: LD_INT 1
15339: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15340: LD_INT 50
15342: PPUSH
15343: LD_INT 12
15345: PPUSH
15346: LD_INT 1
15348: PPUSH
15349: LD_INT 56
15351: NEG
15352: PPUSH
15353: CALL 77444 0 4
// CenterOnXY ( 50 , 12 ) ;
15357: LD_INT 50
15359: PPUSH
15360: LD_INT 12
15362: PPUSH
15363: CALL_OW 84
// wait ( 0 0$3 ) ;
15367: LD_INT 105
15369: PPUSH
15370: CALL_OW 67
// PrepareStartRussianAttack ;
15374: CALL 10014 0 0
// CenterOnXY ( 66 , 47 ) ;
15378: LD_INT 66
15380: PPUSH
15381: LD_INT 47
15383: PPUSH
15384: CALL_OW 84
// wait ( 0 0$5 ) ;
15388: LD_INT 175
15390: PPUSH
15391: CALL_OW 67
// case gammaCommander of 1 :
15395: LD_EXP 13
15399: PUSH
15400: LD_INT 1
15402: DOUBLE
15403: EQUAL
15404: IFTRUE 15408
15406: GO 15423
15408: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15409: LD_EXP 16
15413: PPUSH
15414: LD_STRING D1-Don-1
15416: PPUSH
15417: CALL_OW 88
15421: GO 15470
15423: LD_INT 2
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15431
15429: GO 15446
15431: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15432: LD_EXP 15
15436: PPUSH
15437: LD_STRING D1-Brown-1
15439: PPUSH
15440: CALL_OW 88
15444: GO 15470
15446: LD_INT 3
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15469
15454: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15455: LD_EXP 25
15459: PPUSH
15460: LD_STRING D1-VanH-1
15462: PPUSH
15463: CALL_OW 88
15467: GO 15470
15469: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15470: LD_ADDR_VAR 0 3
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 33
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 61
15497: PUSH
15498: EMPTY
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// if tmp then
15511: LD_VAR 0 3
15515: IFFALSE 15532
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 74
15524: PPUSH
15525: LD_INT 44
15527: PPUSH
15528: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: PUSH
15566: LD_EXP 16
15570: PUSH
15571: LD_EXP 15
15575: PUSH
15576: LD_EXP 25
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: DIFF
15586: ST_TO_ADDR
// if tmp then
15587: LD_VAR 0 3
15591: IFFALSE 15669
// for i in tmp do
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_VAR 0 3
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15667
// begin inUnit := IsInUnit ( i ) ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_VAR 0 2
15615: PPUSH
15616: CALL_OW 310
15620: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15621: LD_VAR 0 5
15625: PUSH
15626: LD_VAR 0 5
15630: PPUSH
15631: CALL_OW 266
15635: PUSH
15636: LD_INT 32
15638: PUSH
15639: LD_INT 31
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: IN
15646: AND
15647: IFFALSE 15665
// tmp := tmp diff i ;
15649: LD_ADDR_VAR 0 3
15653: PUSH
15654: LD_VAR 0 3
15658: PUSH
15659: LD_VAR 0 2
15663: DIFF
15664: ST_TO_ADDR
// end ;
15665: GO 15603
15667: POP
15668: POP
// if tmp then
15669: LD_VAR 0 3
15673: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15675: LD_VAR 0 3
15679: PPUSH
15680: CALL 78039 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 74
15691: PPUSH
15692: LD_INT 44
15694: PPUSH
15695: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15699: LD_ADDR_VAR 0 3
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 25
15716: PUSH
15717: LD_INT 4
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 69
15732: ST_TO_ADDR
// if tmp then
15733: LD_VAR 0 3
15737: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL 78039 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 66
15755: PPUSH
15756: LD_INT 28
15758: PPUSH
15759: CALL_OW 171
// end ; end ; game_speed := 4 ;
15763: LD_ADDR_OWVAR 65
15767: PUSH
15768: LD_INT 4
15770: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15771: LD_INT 70
15773: PPUSH
15774: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15778: LD_EXP 29
15782: PPUSH
15783: LD_STRING D1-Har-1
15785: PPUSH
15786: CALL_OW 94
// case gammaCommander of 1 :
15790: LD_EXP 13
15794: PUSH
15795: LD_INT 1
15797: DOUBLE
15798: EQUAL
15799: IFTRUE 15803
15801: GO 15818
15803: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15804: LD_EXP 16
15808: PPUSH
15809: LD_STRING D1-Don-2
15811: PPUSH
15812: CALL_OW 88
15816: GO 15865
15818: LD_INT 2
15820: DOUBLE
15821: EQUAL
15822: IFTRUE 15826
15824: GO 15841
15826: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15827: LD_EXP 15
15831: PPUSH
15832: LD_STRING D1-Brown-2
15834: PPUSH
15835: CALL_OW 88
15839: GO 15865
15841: LD_INT 3
15843: DOUBLE
15844: EQUAL
15845: IFTRUE 15849
15847: GO 15864
15849: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15850: LD_EXP 25
15854: PPUSH
15855: LD_STRING D1-VanH-2
15857: PPUSH
15858: CALL_OW 88
15862: GO 15865
15864: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15865: LD_EXP 29
15869: PPUSH
15870: LD_STRING D1-Har-2
15872: PPUSH
15873: CALL_OW 94
// invincibleMode := false ;
15877: LD_ADDR_EXP 5
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// Video ( false ) ;
15885: LD_INT 0
15887: PPUSH
15888: CALL 77530 0 1
// ChangeMissionObjectives ( M1 ) ;
15892: LD_STRING M1
15894: PPUSH
15895: CALL_OW 337
// SaveForQuickRestart ;
15899: CALL_OW 22
// wait ( 2 2$30 ) ;
15903: LD_INT 5250
15905: PPUSH
15906: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15910: LD_INT 1
15912: PPUSH
15913: CALL 12997 0 1
// wait ( 4 4$30 ) ;
15917: LD_INT 9450
15919: PPUSH
15920: CALL_OW 67
// if Difficulty > 1 then
15924: LD_OWVAR 67
15928: PUSH
15929: LD_INT 1
15931: GREATER
15932: IFFALSE 15941
// PrepareRussianAttack ( 2 ) ;
15934: LD_INT 2
15936: PPUSH
15937: CALL 12997 0 1
// if Difficulty > 2 then
15941: LD_OWVAR 67
15945: PUSH
15946: LD_INT 2
15948: GREATER
15949: IFFALSE 16108
// begin for i := 1 to 4 do
15951: LD_ADDR_VAR 0 2
15955: PUSH
15956: DOUBLE
15957: LD_INT 1
15959: DEC
15960: ST_TO_ADDR
15961: LD_INT 4
15963: PUSH
15964: FOR_TO
15965: IFFALSE 16050
// begin uc_side := 6 ;
15967: LD_ADDR_OWVAR 20
15971: PUSH
15972: LD_INT 6
15974: ST_TO_ADDR
// uc_nation := 3 ;
15975: LD_ADDR_OWVAR 21
15979: PUSH
15980: LD_INT 3
15982: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15983: LD_INT 0
15985: PPUSH
15986: LD_INT 7
15988: PPUSH
15989: CALL_OW 381
// un := CreateHuman ;
15993: LD_ADDR_VAR 0 4
15997: PUSH
15998: CALL_OW 44
16002: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16003: LD_VAR 0 4
16007: PPUSH
16008: LD_INT 122
16010: PPUSH
16011: LD_INT 89
16013: PPUSH
16014: LD_INT 3
16016: PPUSH
16017: LD_INT 0
16019: PPUSH
16020: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16024: LD_VAR 0 4
16028: PPUSH
16029: LD_INT 88
16031: PPUSH
16032: LD_INT 42
16034: PPUSH
16035: CALL_OW 114
// AddComHold ( un ) ;
16039: LD_VAR 0 4
16043: PPUSH
16044: CALL_OW 200
// end ;
16048: GO 15964
16050: POP
16051: POP
// PrepareScientist ( false , 6 ) ;
16052: LD_INT 0
16054: PPUSH
16055: LD_INT 6
16057: PPUSH
16058: CALL_OW 384
// un := CreateHuman ;
16062: LD_ADDR_VAR 0 4
16066: PUSH
16067: CALL_OW 44
16071: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16072: LD_VAR 0 4
16076: PPUSH
16077: LD_INT 122
16079: PPUSH
16080: LD_INT 89
16082: PPUSH
16083: LD_INT 3
16085: PPUSH
16086: LD_INT 0
16088: PPUSH
16089: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16093: LD_VAR 0 4
16097: PPUSH
16098: LD_INT 91
16100: PPUSH
16101: LD_INT 48
16103: PPUSH
16104: CALL_OW 111
// end ; end ;
16108: LD_VAR 0 1
16112: RET
// every 0 0$1 trigger invincibleMode do var i ;
16113: LD_EXP 5
16117: IFFALSE 16214
16119: GO 16121
16121: DISABLE
16122: LD_INT 0
16124: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16125: LD_ADDR_VAR 0 1
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: LD_INT 21
16145: PUSH
16146: LD_INT 3
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 21
16155: PUSH
16156: LD_INT 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: LD_INT 24
16173: PUSH
16174: LD_INT 900
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16212
// SetLives ( i , 900 ) ;
16198: LD_VAR 0 1
16202: PPUSH
16203: LD_INT 900
16205: PPUSH
16206: CALL_OW 234
16210: GO 16195
16212: POP
16213: POP
// end ;
16214: PPOPN 1
16216: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16217: LD_OWVAR 1
16221: PUSH
16222: LD_INT 14700
16224: GREATER
16225: IFFALSE 17835
16227: GO 16229
16229: DISABLE
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
// begin PrepareSupportFromDelta ;
16234: CALL 4052 0 0
// deltaSupport := true ;
16238: LD_ADDR_EXP 6
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// dialog := false ;
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16254: LD_EXP 21
16258: PPUSH
16259: CALL_OW 302
16263: IFFALSE 16285
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_EXP 21
16274: PPUSH
16275: LD_STRING D2-Glad-1
16277: PPUSH
16278: CALL_OW 88
16282: ST_TO_ADDR
16283: GO 16367
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 120
16302: PUSH
16303: LD_INT 107
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 23
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: PUSH
16341: LD_EXP 27
16345: PUSH
16346: LD_EXP 26
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: DIFF
16355: PPUSH
16356: LD_STRING D2-Sol1-1
16358: PPUSH
16359: LD_STRING D2-FSol1-1
16361: PPUSH
16362: CALL 20040 0 3
16366: ST_TO_ADDR
// if dialog then
16367: LD_VAR 0 1
16371: IFFALSE 16472
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16373: LD_EXP 16
16377: PPUSH
16378: CALL_OW 302
16382: PUSH
16383: LD_EXP 13
16387: PUSH
16388: LD_INT 1
16390: EQUAL
16391: AND
16392: IFFALSE 16406
// Say ( Donaldson , D2-Don-1 ) ;
16394: LD_EXP 16
16398: PPUSH
16399: LD_STRING D2-Don-1
16401: PPUSH
16402: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16406: LD_EXP 15
16410: PPUSH
16411: CALL_OW 302
16415: PUSH
16416: LD_EXP 13
16420: PUSH
16421: LD_INT 2
16423: EQUAL
16424: AND
16425: IFFALSE 16439
// Say ( Brown , D2-Brown-1 ) ;
16427: LD_EXP 15
16431: PPUSH
16432: LD_STRING D2-Brown-1
16434: PPUSH
16435: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16439: LD_EXP 25
16443: PPUSH
16444: CALL_OW 302
16448: PUSH
16449: LD_EXP 13
16453: PUSH
16454: LD_INT 3
16456: EQUAL
16457: AND
16458: IFFALSE 16472
// Say ( Houten , D2-VanH-1 ) ;
16460: LD_EXP 25
16464: PPUSH
16465: LD_STRING D2-VanH-1
16467: PPUSH
16468: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16472: LD_INT 3
16474: PPUSH
16475: CALL 12997 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16479: LD_STRING 07_time
16481: PPUSH
16482: LD_INT 18900
16484: PPUSH
16485: CALL_OW 30
16489: PUSH
16490: LD_INT 3
16492: DIV
16493: PPUSH
16494: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16498: LD_INT 34
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 321
16508: PUSH
16509: LD_INT 2
16511: EQUAL
16512: IFFALSE 16521
// SetAchievement ( ACH_HEAVYGUN ) ;
16514: LD_STRING ACH_HEAVYGUN
16516: PPUSH
16517: CALL_OW 543
// PrepareMacmillanSquad ;
16521: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16525: LD_INT 35
16527: PPUSH
16528: CALL_OW 67
// DialogueOn ;
16532: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16536: LD_EXP 14
16540: PPUSH
16541: CALL_OW 87
// dwait ( 0 0$2 ) ;
16545: LD_INT 70
16547: PPUSH
16548: CALL_OW 68
// DialogueOff ;
16552: CALL_OW 7
// wait ( 0 0$10 ) ;
16556: LD_INT 350
16558: PPUSH
16559: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16563: LD_INT 1
16565: PPUSH
16566: CALL_OW 427
// p := 0 ;
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16578: LD_INT 35
16580: PPUSH
16581: CALL_OW 67
// p := Inc ( p ) ;
16585: LD_ADDR_VAR 0 2
16589: PUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL 78919 0 1
16599: ST_TO_ADDR
// if p > 300 then
16600: LD_VAR 0 2
16604: PUSH
16605: LD_INT 300
16607: GREATER
16608: IFFALSE 16612
// exit ;
16610: GO 17835
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16612: LD_EXP 14
16616: PPUSH
16617: LD_INT 15
16619: PPUSH
16620: CALL_OW 308
16624: PUSH
16625: LD_EXP 14
16629: PPUSH
16630: CALL_OW 310
16634: PPUSH
16635: LD_INT 15
16637: PPUSH
16638: CALL_OW 308
16642: OR
16643: PUSH
16644: LD_EXP 14
16648: PPUSH
16649: LD_EXP 27
16653: PPUSH
16654: CALL_OW 296
16658: PUSH
16659: LD_INT 10
16661: LESS
16662: OR
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: PUSH
16677: LD_INT 120
16679: PUSH
16680: LD_INT 106
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 120
16689: PUSH
16690: LD_INT 107
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 91
16704: PUSH
16705: LD_EXP 14
16709: PUSH
16710: LD_INT 12
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: OR
16728: IFFALSE 16578
// DialogueOn ;
16730: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16734: LD_EXP 14
16738: PPUSH
16739: LD_STRING D3-JMM-1
16741: PPUSH
16742: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16746: LD_EXP 16
16750: PPUSH
16751: CALL_OW 302
16755: PUSH
16756: LD_EXP 13
16760: PUSH
16761: LD_INT 1
16763: EQUAL
16764: AND
16765: IFFALSE 16781
// Say ( Donaldson , D3-Don-1 ) else
16767: LD_EXP 16
16771: PPUSH
16772: LD_STRING D3-Don-1
16774: PPUSH
16775: CALL_OW 88
16779: GO 16877
// begin if gammaCommander = 1 then
16781: LD_EXP 13
16785: PUSH
16786: LD_INT 1
16788: EQUAL
16789: IFFALSE 16877
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16791: LD_INT 22
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 23
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 120
16823: PUSH
16824: LD_INT 106
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 26
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: PPUSH
16848: CALL_OW 69
16852: PPUSH
16853: LD_STRING D3-Sol1-1
16855: PPUSH
16856: LD_STRING 
16858: PPUSH
16859: CALL 20040 0 3
16863: IFFALSE 16877
// Say ( JMM , D3-JMM-2 ) ;
16865: LD_EXP 14
16869: PPUSH
16870: LD_STRING D3-JMM-2
16872: PPUSH
16873: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16877: LD_EXP 15
16881: PPUSH
16882: CALL_OW 302
16886: PUSH
16887: LD_EXP 13
16891: PUSH
16892: LD_INT 2
16894: EQUAL
16895: AND
16896: IFFALSE 16912
// Say ( Brown , D3-Brown-1 ) else
16898: LD_EXP 15
16902: PPUSH
16903: LD_STRING D3-Brown-1
16905: PPUSH
16906: CALL_OW 88
16910: GO 17008
// begin if gammaCommander = 2 then
16912: LD_EXP 13
16916: PUSH
16917: LD_INT 2
16919: EQUAL
16920: IFFALSE 17008
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16922: LD_INT 22
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 21
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 23
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 120
16954: PUSH
16955: LD_INT 106
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 26
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 69
16983: PPUSH
16984: LD_STRING D3-Sol1-1a
16986: PPUSH
16987: LD_STRING 
16989: PPUSH
16990: CALL 20040 0 3
16994: IFFALSE 17008
// Say ( JMM , D3-JMM-2 ) ;
16996: LD_EXP 14
17000: PPUSH
17001: LD_STRING D3-JMM-2
17003: PPUSH
17004: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17008: LD_EXP 25
17012: PPUSH
17013: CALL_OW 302
17017: PUSH
17018: LD_EXP 13
17022: PUSH
17023: LD_INT 3
17025: EQUAL
17026: AND
17027: IFFALSE 17043
// Say ( Houten , D3-VanH-1 ) else
17029: LD_EXP 25
17033: PPUSH
17034: LD_STRING D3-VanH-1
17036: PPUSH
17037: CALL_OW 88
17041: GO 17139
// begin if gammaCommander = 3 then
17043: LD_EXP 13
17047: PUSH
17048: LD_INT 3
17050: EQUAL
17051: IFFALSE 17139
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17053: LD_INT 22
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 21
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 23
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 120
17085: PUSH
17086: LD_INT 106
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 26
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: PPUSH
17115: LD_STRING D3-Sol1-1b
17117: PPUSH
17118: LD_STRING 
17120: PPUSH
17121: CALL 20040 0 3
17125: IFFALSE 17139
// Say ( JMM , D3-JMM-2 ) ;
17127: LD_EXP 14
17131: PPUSH
17132: LD_STRING D3-JMM-2
17134: PPUSH
17135: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17139: LD_EXP 27
17143: PPUSH
17144: CALL_OW 302
17148: IFFALSE 17176
// begin Say ( Joan , D3a-Joan-1 ) ;
17150: LD_EXP 27
17154: PPUSH
17155: LD_STRING D3a-Joan-1
17157: PPUSH
17158: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17162: LD_EXP 14
17166: PPUSH
17167: LD_STRING D3a-JMM-1
17169: PPUSH
17170: CALL_OW 88
// end else
17174: GO 17610
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17176: LD_STRING 06_JoanStatus_1
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: CALL_OW 30
17186: PUSH
17187: LD_INT 1
17189: EQUAL
17190: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-1 ) ;
17192: LD_EXP 14
17196: PPUSH
17197: LD_STRING D3b-JMM-1
17199: PPUSH
17200: CALL_OW 88
// dialog := false ;
17204: LD_ADDR_VAR 0 1
17208: PUSH
17209: LD_INT 0
17211: ST_TO_ADDR
// if gammaCommander = 1 then
17212: LD_EXP 13
17216: PUSH
17217: LD_INT 1
17219: EQUAL
17220: IFFALSE 17331
// if IsOK ( Donaldson ) then
17222: LD_EXP 16
17226: PPUSH
17227: CALL_OW 302
17231: IFFALSE 17253
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17233: LD_ADDR_VAR 0 1
17237: PUSH
17238: LD_EXP 16
17242: PPUSH
17243: LD_STRING D3b-Don-1
17245: PPUSH
17246: CALL_OW 88
17250: ST_TO_ADDR
17251: GO 17331
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: LD_INT 22
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 21
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 23
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 120
17290: PUSH
17291: LD_INT 106
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: PPUSH
17320: LD_STRING D3b-Sol1-1
17322: PPUSH
17323: LD_STRING 
17325: PPUSH
17326: CALL 20040 0 3
17330: ST_TO_ADDR
// if gammaCommander = 2 then
17331: LD_EXP 13
17335: PUSH
17336: LD_INT 2
17338: EQUAL
17339: IFFALSE 17450
// if IsOk ( Brown ) then
17341: LD_EXP 15
17345: PPUSH
17346: CALL_OW 302
17350: IFFALSE 17372
// dialog := Say ( Brown , D3b-Brown-1 ) else
17352: LD_ADDR_VAR 0 1
17356: PUSH
17357: LD_EXP 15
17361: PPUSH
17362: LD_STRING D3b-Brown-1
17364: PPUSH
17365: CALL_OW 88
17369: ST_TO_ADDR
17370: GO 17450
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17372: LD_ADDR_VAR 0 1
17376: PUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 23
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 120
17409: PUSH
17410: LD_INT 106
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 26
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PPUSH
17439: LD_STRING D3b-Sol1-1
17441: PPUSH
17442: LD_STRING 
17444: PPUSH
17445: CALL 20040 0 3
17449: ST_TO_ADDR
// if gammaCommander = 3 then
17450: LD_EXP 13
17454: PUSH
17455: LD_INT 3
17457: EQUAL
17458: IFFALSE 17569
// if IsOk ( Houten ) then
17460: LD_EXP 25
17464: PPUSH
17465: CALL_OW 302
17469: IFFALSE 17491
// dialog := Say ( Houten , D3b-VanH-1 ) else
17471: LD_ADDR_VAR 0 1
17475: PUSH
17476: LD_EXP 25
17480: PPUSH
17481: LD_STRING D3b-VanH-1
17483: PPUSH
17484: CALL_OW 88
17488: ST_TO_ADDR
17489: GO 17569
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 21
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 120
17528: PUSH
17529: LD_INT 106
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 26
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PPUSH
17558: LD_STRING D3b-Sol1-1
17560: PPUSH
17561: LD_STRING 
17563: PPUSH
17564: CALL 20040 0 3
17568: ST_TO_ADDR
// if dialog then
17569: LD_VAR 0 1
17573: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-2 ) ;
17575: LD_EXP 14
17579: PPUSH
17580: LD_STRING D3b-JMM-2
17582: PPUSH
17583: CALL_OW 88
// if IsOK ( Lisa ) then
17587: LD_EXP 19
17591: PPUSH
17592: CALL_OW 302
17596: IFFALSE 17610
// Say ( Lisa , D3b-Lisa-2 ) ;
17598: LD_EXP 19
17602: PPUSH
17603: LD_STRING D3b-Lisa-2
17605: PPUSH
17606: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17610: LD_EXP 7
17614: NOT
17615: IFFALSE 17623
// begin DialogueOff ;
17617: CALL_OW 7
// exit ;
17621: GO 17835
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17623: LD_INT 22
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 23
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 120
17658: PUSH
17659: LD_INT 106
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 120
17668: PUSH
17669: LD_INT 107
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 26
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: PPUSH
17698: CALL_OW 69
17702: PPUSH
17703: LD_STRING DCa-Sol1-1
17705: PPUSH
17706: LD_STRING 
17708: PPUSH
17709: CALL 20040 0 3
17713: IFFALSE 17727
// Say ( JMM , DCb-JMM-1 ) ;
17715: LD_EXP 14
17719: PPUSH
17720: LD_STRING DCb-JMM-1
17722: PPUSH
17723: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17727: LD_INT 22
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 120
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 120
17772: PUSH
17773: LD_INT 107
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 26
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_STRING DCb-Sol1-1
17809: PPUSH
17810: LD_STRING 
17812: PPUSH
17813: CALL 20040 0 3
17817: IFFALSE 17831
// Say ( JMM , DCb-JMM-2 ) ;
17819: LD_EXP 14
17823: PPUSH
17824: LD_STRING DCb-JMM-2
17826: PPUSH
17827: CALL_OW 88
// DialogueOff ;
17831: CALL_OW 7
// end ;
17835: PPOPN 2
17837: END
// export function DialogSeenComputer ( un ) ; begin
17838: LD_INT 0
17840: PPUSH
// if jmmArrival then
17841: LD_EXP 8
17845: IFFALSE 17849
// exit ;
17847: GO 17915
// CenterOnUnits ( un ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17858: LD_INT 22
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 120
17873: PUSH
17874: LD_INT 106
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 120
17883: PUSH
17884: LD_INT 107
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PPUSH
17905: LD_STRING DC-Sol1-1
17907: PPUSH
17908: LD_STRING DC-FSol1-1
17910: PPUSH
17911: CALL 20040 0 3
// end ;
17915: LD_VAR 0 2
17919: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17920: LD_EXP 8
17924: PUSH
17925: LD_OWVAR 1
17929: PUSH
17930: LD_INT 48300
17932: GREATEREQUAL
17933: AND
17934: PUSH
17935: LD_EXP 14
17939: PPUSH
17940: CALL_OW 302
17944: AND
17945: IFFALSE 18431
17947: GO 17949
17949: DISABLE
// begin wait ( 2 2$00 ) ;
17950: LD_INT 4200
17952: PPUSH
17953: CALL_OW 67
// DialogueOn ;
17957: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17961: LD_EXP 30
17965: PPUSH
17966: LD_STRING D4-Pow-1
17968: PPUSH
17969: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17973: LD_EXP 14
17977: PPUSH
17978: LD_STRING D4-JMM-1
17980: PPUSH
17981: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17985: LD_EXP 30
17989: PPUSH
17990: LD_STRING D4-Pow-2
17992: PPUSH
17993: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17997: LD_EXP 14
18001: PPUSH
18002: LD_STRING D4-JMM-2
18004: PPUSH
18005: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18009: LD_EXP 30
18013: PPUSH
18014: LD_STRING D4-Pow-3
18016: PPUSH
18017: CALL_OW 94
// DialogueOff ;
18021: CALL_OW 7
// wait ( 1 1$00 ) ;
18025: LD_INT 2100
18027: PPUSH
18028: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 427
// wait ( 7 7$30 ) ;
18039: LD_INT 15750
18041: PPUSH
18042: CALL_OW 67
// DialogueOn ;
18046: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18050: LD_EXP 30
18054: PPUSH
18055: LD_STRING D4a-Pow-1
18057: PPUSH
18058: CALL_OW 94
// DialogueOff ;
18062: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18066: LD_INT 1
18068: PPUSH
18069: CALL_OW 427
// SikorskiCounter ;
18073: CALL 19824 0 0
// PrepareSikorsky ;
18077: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18081: LD_EXP 28
18085: PPUSH
18086: CALL_OW 87
// DialogueOn ;
18090: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18094: LD_EXP 28
18098: PPUSH
18099: LD_STRING D5-Sik-1
18101: PPUSH
18102: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18106: LD_INT 11
18108: PPUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 70
18123: PUSH
18124: LD_INT 1
18126: GREATER
18127: PUSH
18128: LD_INT 28
18130: PPUSH
18131: CALL_OW 302
18135: NOT
18136: OR
18137: PUSH
18138: LD_INT 28
18140: PPUSH
18141: CALL_OW 255
18145: PUSH
18146: LD_INT 1
18148: EQUAL
18149: OR
18150: IFFALSE 18202
// begin Say ( JMM , D5-JMM-1 ) ;
18152: LD_EXP 14
18156: PPUSH
18157: LD_STRING D5-JMM-1
18159: PPUSH
18160: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18164: LD_EXP 28
18168: PPUSH
18169: LD_STRING D7a-Sik-1
18171: PPUSH
18172: CALL_OW 88
// DialogueOff ;
18176: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18180: LD_STRING M2
18182: PPUSH
18183: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18187: LD_INT 1
18189: PPUSH
18190: CALL_OW 427
// SikorskiAttack ;
18194: CALL 7861 0 0
// exit ;
18198: GO 18431
// end else
18200: GO 18247
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18202: LD_INT 15
18204: PPUSH
18205: LD_INT 81
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 70
18219: IFFALSE 18235
// Say ( JMM , D5-JMM-1b ) else
18221: LD_EXP 14
18225: PPUSH
18226: LD_STRING D5-JMM-1b
18228: PPUSH
18229: CALL_OW 88
18233: GO 18247
// Say ( JMM , D5-JMM-1a ) ;
18235: LD_EXP 14
18239: PPUSH
18240: LD_STRING D5-JMM-1a
18242: PPUSH
18243: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18247: LD_EXP 28
18251: PPUSH
18252: LD_STRING D5-Sik-2
18254: PPUSH
18255: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18259: LD_STRING QSikorski
18261: PPUSH
18262: CALL_OW 97
18266: PUSH
18267: LD_INT 1
18269: DOUBLE
18270: EQUAL
18271: IFTRUE 18275
18273: GO 18298
18275: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18276: LD_EXP 28
18280: PPUSH
18281: LD_STRING D5a-Sik-1
18283: PPUSH
18284: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18288: LD_ADDR_EXP 4
18292: PUSH
18293: LD_INT 2100
18295: ST_TO_ADDR
// end ; 2 :
18296: GO 18385
18298: LD_INT 2
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18329
18306: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18307: LD_EXP 28
18311: PPUSH
18312: LD_STRING D5b-Sik-1
18314: PPUSH
18315: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18319: LD_ADDR_EXP 4
18323: PUSH
18324: LD_INT 10500
18326: ST_TO_ADDR
// end ; 3 :
18327: GO 18385
18329: LD_INT 3
18331: DOUBLE
18332: EQUAL
18333: IFTRUE 18337
18335: GO 18384
18337: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18338: LD_EXP 28
18342: PPUSH
18343: LD_STRING D5c-Sik-1
18345: PPUSH
18346: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18350: LD_EXP 14
18354: PPUSH
18355: LD_STRING D5c-JMM-1
18357: PPUSH
18358: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18362: LD_EXP 28
18366: PPUSH
18367: LD_STRING D5c-Sik-2
18369: PPUSH
18370: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18374: LD_ADDR_EXP 4
18378: PUSH
18379: LD_INT 10500
18381: ST_TO_ADDR
// end ; end ;
18382: GO 18385
18384: POP
// DialogueOff ;
18385: CALL_OW 7
// SikorskiWaitCounter ;
18389: CALL 19887 0 0
// DialogueOn ;
18393: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18397: LD_EXP 28
18401: PPUSH
18402: LD_STRING D6-Sik-1
18404: PPUSH
18405: CALL_OW 88
// DialogueOff ;
18409: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18413: LD_STRING M2
18415: PPUSH
18416: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 427
// SikorskiAttack ;
18427: CALL 7861 0 0
// end ;
18431: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18432: LD_INT 11
18434: PPUSH
18435: LD_INT 22
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 70
18449: PUSH
18450: LD_INT 2
18452: GREATER
18453: IFFALSE 18646
18455: GO 18457
18457: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18458: LD_EXP 28
18462: PPUSH
18463: LD_STRING D7-Sik-1
18465: PPUSH
18466: CALL_OW 88
// wait ( 0 0$10 ) ;
18470: LD_INT 350
18472: PPUSH
18473: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18477: LD_EXP 14
18481: PPUSH
18482: LD_INT 11
18484: PPUSH
18485: CALL_OW 308
18489: PUSH
18490: LD_EXP 14
18494: PPUSH
18495: CALL_OW 310
18499: PPUSH
18500: LD_INT 11
18502: PPUSH
18503: CALL_OW 308
18507: OR
18508: IFFALSE 18532
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18510: LD_EXP 28
18514: PPUSH
18515: LD_STRING D7a-Sik-1
18517: PPUSH
18518: CALL_OW 88
// sikorskiStatus := 1 ;
18522: LD_ADDR_EXP 9
18526: PUSH
18527: LD_INT 1
18529: ST_TO_ADDR
// end else
18530: GO 18552
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18532: LD_EXP 28
18536: PPUSH
18537: LD_STRING D7b-Sik-1
18539: PPUSH
18540: CALL_OW 88
// sikorskiStatus := 0 ;
18544: LD_ADDR_EXP 9
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18552: LD_INT 1575
18554: PPUSH
18555: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18559: LD_EXP 14
18563: PPUSH
18564: LD_INT 11
18566: PPUSH
18567: CALL_OW 308
18571: PUSH
18572: LD_EXP 14
18576: PPUSH
18577: CALL_OW 310
18581: PPUSH
18582: LD_INT 11
18584: PPUSH
18585: CALL_OW 308
18589: OR
18590: PUSH
18591: LD_EXP 14
18595: PPUSH
18596: CALL_OW 302
18600: NOT
18601: OR
18602: IFFALSE 18626
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18604: LD_EXP 28
18608: PPUSH
18609: LD_STRING D7a-Sik-1
18611: PPUSH
18612: CALL_OW 88
// sikorskiStatus := 1 ;
18616: LD_ADDR_EXP 9
18620: PUSH
18621: LD_INT 1
18623: ST_TO_ADDR
// end else
18624: GO 18646
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18626: LD_EXP 28
18630: PPUSH
18631: LD_STRING D7b-Sik-1
18633: PPUSH
18634: CALL_OW 88
// sikorskiStatus := 0 ;
18638: LD_ADDR_EXP 9
18642: PUSH
18643: LD_INT 0
18645: ST_TO_ADDR
// end ; end ;
18646: END
// export function SikorskiKilledInAction ; begin
18647: LD_INT 0
18649: PPUSH
// wait ( 0 0$2 ) ;
18650: LD_INT 70
18652: PPUSH
18653: CALL_OW 67
// DialogueOn ;
18657: CALL_OW 6
// dwait ( 0 0$1 ) ;
18661: LD_INT 35
18663: PPUSH
18664: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18668: LD_EXP 30
18672: PPUSH
18673: LD_STRING D8b-Pow-1
18675: PPUSH
18676: CALL_OW 94
// YouLost ( Dismissed ) ;
18680: LD_STRING Dismissed
18682: PPUSH
18683: CALL_OW 104
// DialogueOff ;
18687: CALL_OW 7
// end ;
18691: LD_VAR 0 1
18695: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18696: LD_EXP 8
18700: PUSH
18701: LD_INT 28
18703: PPUSH
18704: CALL_OW 301
18708: AND
18709: PUSH
18710: LD_EXP 32
18714: PPUSH
18715: CALL_OW 301
18719: AND
18720: PUSH
18721: LD_INT 22
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 50
18733: PUSH
18734: EMPTY
18735: LIST
18736: PUSH
18737: LD_INT 30
18739: PUSH
18740: LD_INT 5
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: PUSH
18757: LD_INT 0
18759: EQUAL
18760: AND
18761: IFFALSE 19821
18763: GO 18765
18765: DISABLE
18766: LD_INT 0
18768: PPUSH
18769: PPUSH
18770: PPUSH
// begin Video ( true ) ;
18771: LD_INT 1
18773: PPUSH
18774: CALL 77530 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18778: LD_INT 104
18780: PPUSH
18781: LD_INT 108
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_INT 36
18789: NEG
18790: PPUSH
18791: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18795: LD_INT 104
18797: PPUSH
18798: LD_INT 108
18800: PPUSH
18801: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18805: LD_ADDR_VAR 0 2
18809: PUSH
18810: LD_INT 22
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 24
18835: PUSH
18836: LD_INT 249
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: ST_TO_ADDR
// if tmp then
18857: LD_VAR 0 2
18861: IFFALSE 18892
// for i in tmp do
18863: LD_ADDR_VAR 0 1
18867: PUSH
18868: LD_VAR 0 2
18872: PUSH
18873: FOR_IN
18874: IFFALSE 18890
// SetLives ( i , 249 ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_INT 249
18883: PPUSH
18884: CALL_OW 234
18888: GO 18873
18890: POP
18891: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18892: LD_ADDR_VAR 0 1
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_INT 3
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18970
// begin ComExit ( i ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 77956 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 131
18945: PPUSH
18946: LD_INT 127
18948: PPUSH
18949: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_INT 141
18960: PPUSH
18961: LD_INT 147
18963: PPUSH
18964: CALL_OW 171
// end ;
18968: GO 18926
18970: POP
18971: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18972: LD_INT 81
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: LD_INT 21
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: PPUSH
19008: LD_INT 131
19010: PPUSH
19011: LD_INT 127
19013: PPUSH
19014: CALL_OW 174
// wait ( 0 0$08 ) ;
19018: LD_INT 280
19020: PPUSH
19021: CALL_OW 67
// DialogueOn ;
19025: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19029: LD_EXP 9
19033: PUSH
19034: LD_INT 1
19036: EQUAL
19037: PUSH
19038: LD_EXP 28
19042: PPUSH
19043: CALL_OW 302
19047: AND
19048: IFFALSE 19062
// Say ( Sikorski , D9-Sik-1 ) ;
19050: LD_EXP 28
19054: PPUSH
19055: LD_STRING D9-Sik-1
19057: PPUSH
19058: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19062: LD_INT 22
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PUSH
19077: LD_INT 0
19079: EQUAL
19080: PUSH
19081: LD_EXP 3
19085: AND
19086: IFFALSE 19095
// SetAchievement ( ACH_BLITZKRIEG ) ;
19088: LD_STRING ACH_BLITZKRIEG
19090: PPUSH
19091: CALL_OW 543
// if tick <= 45 45$10 then
19095: LD_OWVAR 1
19099: PUSH
19100: LD_INT 94850
19102: LESSEQUAL
19103: IFFALSE 19119
// begin wait ( 3 ) ;
19105: LD_INT 3
19107: PPUSH
19108: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19112: LD_STRING ACH_ASPEED_8
19114: PPUSH
19115: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19119: LD_STRING med1
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19129: LD_STRING med2
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 101
// if sikorskiStatus = 1 then
19139: LD_EXP 9
19143: PUSH
19144: LD_INT 1
19146: EQUAL
19147: IFFALSE 19161
// AddMedal ( perfect , 1 ) else
19149: LD_STRING perfect
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 101
19159: GO 19172
// AddMedal ( perfect , - 1 ) ;
19161: LD_STRING perfect
19163: PPUSH
19164: LD_INT 1
19166: NEG
19167: PPUSH
19168: CALL_OW 101
// if Difficulty >= 3 then
19172: LD_OWVAR 67
19176: PUSH
19177: LD_INT 3
19179: GREATEREQUAL
19180: IFFALSE 19192
// SetAchievementEX ( ACH_AMER , 8 ) ;
19182: LD_STRING ACH_AMER
19184: PPUSH
19185: LD_INT 8
19187: PPUSH
19188: CALL_OW 564
// GiveMedals ( Main ) ;
19192: LD_STRING Main
19194: PPUSH
19195: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19199: LD_INT 22
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 23
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: PPUSH
19239: CALL_OW 43
// prefix := 08_ ;
19243: LD_ADDR_VAR 0 3
19247: PUSH
19248: LD_STRING 08_
19250: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19251: LD_EXP 14
19255: PPUSH
19256: LD_VAR 0 3
19260: PUSH
19261: LD_STRING JMM
19263: STR
19264: PPUSH
19265: CALL_OW 38
// if IsLive ( Brown ) then
19269: LD_EXP 15
19273: PPUSH
19274: CALL_OW 300
19278: IFFALSE 19298
// SaveCharacters ( Brown , prefix & Brown ) ;
19280: LD_EXP 15
19284: PPUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_STRING Brown
19292: STR
19293: PPUSH
19294: CALL_OW 38
// if IsLive ( Donaldson ) then
19298: LD_EXP 16
19302: PPUSH
19303: CALL_OW 300
19307: IFFALSE 19327
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19309: LD_EXP 16
19313: PPUSH
19314: LD_VAR 0 3
19318: PUSH
19319: LD_STRING Donaldson
19321: STR
19322: PPUSH
19323: CALL_OW 38
// if IsLive ( Bobby ) then
19327: LD_EXP 17
19331: PPUSH
19332: CALL_OW 300
19336: IFFALSE 19356
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19338: LD_EXP 17
19342: PPUSH
19343: LD_VAR 0 3
19347: PUSH
19348: LD_STRING Bobby
19350: STR
19351: PPUSH
19352: CALL_OW 38
// if IsLive ( Cyrus ) then
19356: LD_EXP 18
19360: PPUSH
19361: CALL_OW 300
19365: IFFALSE 19385
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19367: LD_EXP 18
19371: PPUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_STRING Cyrus
19379: STR
19380: PPUSH
19381: CALL_OW 38
// if IsLive ( Lisa ) then
19385: LD_EXP 19
19389: PPUSH
19390: CALL_OW 300
19394: IFFALSE 19414
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19396: LD_EXP 19
19400: PPUSH
19401: LD_VAR 0 3
19405: PUSH
19406: LD_STRING Lisa
19408: STR
19409: PPUSH
19410: CALL_OW 38
// if IsLive ( Frank ) then
19414: LD_EXP 20
19418: PPUSH
19419: CALL_OW 300
19423: IFFALSE 19443
// SaveCharacters ( Frank , prefix & Frank ) ;
19425: LD_EXP 20
19429: PPUSH
19430: LD_VAR 0 3
19434: PUSH
19435: LD_STRING Frank
19437: STR
19438: PPUSH
19439: CALL_OW 38
// if IsLive ( Gladstone ) then
19443: LD_EXP 21
19447: PPUSH
19448: CALL_OW 300
19452: IFFALSE 19472
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19454: LD_EXP 21
19458: PPUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_STRING Gladstone
19466: STR
19467: PPUSH
19468: CALL_OW 38
// if IsLive ( Kikuchi ) then
19472: LD_EXP 22
19476: PPUSH
19477: CALL_OW 300
19481: IFFALSE 19501
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19483: LD_EXP 22
19487: PPUSH
19488: LD_VAR 0 3
19492: PUSH
19493: LD_STRING Kikuchi
19495: STR
19496: PPUSH
19497: CALL_OW 38
// if IsLive ( Denis ) then
19501: LD_EXP 26
19505: PPUSH
19506: CALL_OW 300
19510: IFFALSE 19530
// SaveCharacters ( Denis , prefix & Denis ) ;
19512: LD_EXP 26
19516: PPUSH
19517: LD_VAR 0 3
19521: PUSH
19522: LD_STRING Denis
19524: STR
19525: PPUSH
19526: CALL_OW 38
// if IsLive ( Joan ) then
19530: LD_EXP 27
19534: PPUSH
19535: CALL_OW 300
19539: IFFALSE 19561
// SaveCharacters ( Joan , prefix & Joan ) else
19541: LD_EXP 27
19545: PPUSH
19546: LD_VAR 0 3
19550: PUSH
19551: LD_STRING Joan
19553: STR
19554: PPUSH
19555: CALL_OW 38
19559: GO 19568
// DeleteCharacters ( Joan ) ;
19561: LD_STRING Joan
19563: PPUSH
19564: CALL_OW 40
// if IsLive ( Khatam ) then
19568: LD_EXP 23
19572: PPUSH
19573: CALL_OW 300
19577: IFFALSE 19597
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19579: LD_EXP 23
19583: PPUSH
19584: LD_VAR 0 3
19588: PUSH
19589: LD_STRING Khatam
19591: STR
19592: PPUSH
19593: CALL_OW 38
// if IsLive ( Houten ) then
19597: LD_EXP 25
19601: PPUSH
19602: CALL_OW 300
19606: IFFALSE 19633
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19608: LD_STRING enableBioCharacter(BIO_HOUT)
19610: PPUSH
19611: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19615: LD_EXP 25
19619: PPUSH
19620: LD_VAR 0 3
19624: PUSH
19625: LD_STRING Houten
19627: STR
19628: PPUSH
19629: CALL_OW 38
// end ; if IsLive ( Mike ) then
19633: LD_EXP 24
19637: PPUSH
19638: CALL_OW 300
19642: IFFALSE 19662
// SaveCharacters ( Mike , prefix & Mike ) ;
19644: LD_EXP 24
19648: PPUSH
19649: LD_VAR 0 3
19653: PUSH
19654: LD_STRING Mike
19656: STR
19657: PPUSH
19658: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19662: LD_INT 22
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 23
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: PUSH
19702: LD_EXP 14
19706: PUSH
19707: LD_EXP 15
19711: PUSH
19712: LD_EXP 16
19716: PUSH
19717: LD_EXP 17
19721: PUSH
19722: LD_EXP 18
19726: PUSH
19727: LD_EXP 19
19731: PUSH
19732: LD_EXP 20
19736: PUSH
19737: LD_EXP 21
19741: PUSH
19742: LD_EXP 22
19746: PUSH
19747: LD_EXP 26
19751: PUSH
19752: LD_EXP 27
19756: PUSH
19757: LD_EXP 25
19761: PUSH
19762: LD_EXP 23
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: DIFF
19782: PPUSH
19783: LD_STRING 08_other_survivors
19785: PPUSH
19786: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19790: LD_INT 15
19792: PPUSH
19793: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19797: LD_EXP 10
19801: NOT
19802: PPUSH
19803: LD_STRING 08_SikorskiStatus
19805: PPUSH
19806: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
19810: LD_STRING enableBioCharacter(BIO_SIK)
19812: PPUSH
19813: CALL_OW 559
// YouWin ;
19817: CALL_OW 103
// end ; end_of_file
19821: PPOPN 3
19823: END
// export function SikorskiCounter ; begin
19824: LD_INT 0
19826: PPUSH
// repeat wait ( 0 0$1 ) ;
19827: LD_INT 35
19829: PPUSH
19830: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19834: LD_ADDR_OWVAR 47
19838: PUSH
19839: LD_STRING #Am08-2
19841: PUSH
19842: LD_EXP 3
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19851: LD_ADDR_EXP 3
19855: PUSH
19856: LD_EXP 3
19860: PUSH
19861: LD_INT 35
19863: MINUS
19864: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19865: LD_EXP 3
19869: PUSH
19870: LD_INT 0
19872: EQUAL
19873: IFFALSE 19827
// display_strings := [ ] ;
19875: LD_ADDR_OWVAR 47
19879: PUSH
19880: EMPTY
19881: ST_TO_ADDR
// end ;
19882: LD_VAR 0 1
19886: RET
// export function SikorskiWaitCounter ; begin
19887: LD_INT 0
19889: PPUSH
// repeat wait ( 0 0$1 ) ;
19890: LD_INT 35
19892: PPUSH
19893: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19897: LD_ADDR_OWVAR 47
19901: PUSH
19902: LD_STRING #Am08-1
19904: PUSH
19905: LD_EXP 4
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19914: LD_ADDR_EXP 4
19918: PUSH
19919: LD_EXP 4
19923: PUSH
19924: LD_INT 35
19926: MINUS
19927: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19928: LD_EXP 4
19932: PUSH
19933: LD_INT 0
19935: EQUAL
19936: IFFALSE 19890
// display_strings := [ ] ;
19938: LD_ADDR_OWVAR 47
19942: PUSH
19943: EMPTY
19944: ST_TO_ADDR
// end ; end_of_file
19945: LD_VAR 0 1
19949: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19950: LD_EXP 3
19954: IFFALSE 19994
19956: GO 19958
19958: DISABLE
// begin enable ;
19959: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19960: LD_INT 14
19962: PPUSH
19963: CALL_OW 435
19967: PUSH
19968: LD_INT 10
19970: LESS
19971: IFFALSE 19994
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19973: LD_INT 1
19975: PPUSH
19976: LD_INT 5
19978: PPUSH
19979: CALL_OW 12
19983: PPUSH
19984: LD_INT 14
19986: PPUSH
19987: LD_INT 1
19989: PPUSH
19990: CALL_OW 55
// end ;
19994: END
// every 0 0$55 trigger sikorskiArriveCounter do
19995: LD_EXP 3
19999: IFFALSE 20039
20001: GO 20003
20003: DISABLE
// begin enable ;
20004: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20005: LD_INT 13
20007: PPUSH
20008: CALL_OW 435
20012: PUSH
20013: LD_INT 10
20015: LESS
20016: IFFALSE 20039
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20018: LD_INT 1
20020: PPUSH
20021: LD_INT 5
20023: PPUSH
20024: CALL_OW 12
20028: PPUSH
20029: LD_INT 13
20031: PPUSH
20032: LD_INT 1
20034: PPUSH
20035: CALL_OW 55
// end ; end_of_file
20039: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20040: LD_INT 0
20042: PPUSH
20043: PPUSH
// if not units then
20044: LD_VAR 0 1
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20178
// result := false ;
20053: LD_ADDR_VAR 0 4
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20061: LD_ADDR_VAR 0 5
20065: PUSH
20066: LD_VAR 0 1
20070: PPUSH
20071: LD_INT 26
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PPUSH
20081: CALL_OW 72
20085: ST_TO_ADDR
// if tmp then
20086: LD_VAR 0 5
20090: IFFALSE 20116
// result := Say ( tmp [ 1 ] , menDialog ) ;
20092: LD_ADDR_VAR 0 4
20096: PUSH
20097: LD_VAR 0 5
20101: PUSH
20102: LD_INT 1
20104: ARRAY
20105: PPUSH
20106: LD_VAR 0 2
20110: PPUSH
20111: CALL_OW 88
20115: ST_TO_ADDR
// if not result then
20116: LD_VAR 0 4
20120: NOT
20121: IFFALSE 20178
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20123: LD_ADDR_VAR 0 5
20127: PUSH
20128: LD_VAR 0 1
20132: PPUSH
20133: LD_INT 26
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 72
20147: ST_TO_ADDR
// if tmp then
20148: LD_VAR 0 5
20152: IFFALSE 20178
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20154: LD_ADDR_VAR 0 4
20158: PUSH
20159: LD_VAR 0 5
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: CALL_OW 88
20177: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20178: LD_VAR 0 4
20182: RET
// export globalGameSaveCounter ; every 0 0$1 do
20183: GO 20185
20185: DISABLE
// begin enable ;
20186: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20187: LD_STRING updateTimer(
20189: PUSH
20190: LD_OWVAR 1
20194: STR
20195: PUSH
20196: LD_STRING );
20198: STR
20199: PPUSH
20200: CALL_OW 559
// end ;
20204: END
// every 0 0$1 do
20205: GO 20207
20207: DISABLE
// begin globalGameSaveCounter := 0 ;
20208: LD_ADDR_EXP 37
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20216: LD_STRING setGameSaveCounter(0)
20218: PPUSH
20219: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20223: LD_STRING initStreamRollete();
20225: PPUSH
20226: CALL_OW 559
// InitStreamMode ;
20230: CALL 21556 0 0
// DefineStreamItems ( false ) ;
20234: LD_INT 0
20236: PPUSH
20237: CALL 22020 0 1
// end ;
20241: END
// export function SOS_MapStart ( ) ; begin
20242: LD_INT 0
20244: PPUSH
// if streamModeActive then
20245: LD_EXP 38
20249: IFFALSE 20258
// DefineStreamItems ( true ) ;
20251: LD_INT 1
20253: PPUSH
20254: CALL 22020 0 1
// UpdateLuaVariables ( ) ;
20258: CALL 20275 0 0
// UpdateFactoryWaypoints ( ) ;
20262: CALL 34881 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20266: CALL 35138 0 0
// end ;
20270: LD_VAR 0 1
20274: RET
// function UpdateLuaVariables ( ) ; begin
20275: LD_INT 0
20277: PPUSH
// if globalGameSaveCounter then
20278: LD_EXP 37
20282: IFFALSE 20316
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20284: LD_ADDR_EXP 37
20288: PUSH
20289: LD_EXP 37
20293: PPUSH
20294: CALL 78919 0 1
20298: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20299: LD_STRING setGameSaveCounter(
20301: PUSH
20302: LD_EXP 37
20306: STR
20307: PUSH
20308: LD_STRING )
20310: STR
20311: PPUSH
20312: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20316: LD_STRING setGameDifficulty(
20318: PUSH
20319: LD_OWVAR 67
20323: STR
20324: PUSH
20325: LD_STRING )
20327: STR
20328: PPUSH
20329: CALL_OW 559
// end ;
20333: LD_VAR 0 1
20337: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20338: LD_INT 0
20340: PPUSH
// if p2 = stream_mode then
20341: LD_VAR 0 2
20345: PUSH
20346: LD_INT 100
20348: EQUAL
20349: IFFALSE 21352
// begin if not StreamModeActive then
20351: LD_EXP 38
20355: NOT
20356: IFFALSE 20366
// StreamModeActive := true ;
20358: LD_ADDR_EXP 38
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 0 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 0
20373: EQUAL
20374: IFFALSE 20380
// InitStreamMode ;
20376: CALL 21556 0 0
// if p3 = 1 then
20380: LD_VAR 0 3
20384: PUSH
20385: LD_INT 1
20387: EQUAL
20388: IFFALSE 20398
// sRocket := true ;
20390: LD_ADDR_EXP 43
20394: PUSH
20395: LD_INT 1
20397: ST_TO_ADDR
// if p3 = 2 then
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 2
20405: EQUAL
20406: IFFALSE 20416
// sSpeed := true ;
20408: LD_ADDR_EXP 42
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// if p3 = 3 then
20416: LD_VAR 0 3
20420: PUSH
20421: LD_INT 3
20423: EQUAL
20424: IFFALSE 20434
// sEngine := true ;
20426: LD_ADDR_EXP 44
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// if p3 = 4 then
20434: LD_VAR 0 3
20438: PUSH
20439: LD_INT 4
20441: EQUAL
20442: IFFALSE 20452
// sSpec := true ;
20444: LD_ADDR_EXP 41
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// if p3 = 5 then
20452: LD_VAR 0 3
20456: PUSH
20457: LD_INT 5
20459: EQUAL
20460: IFFALSE 20470
// sLevel := true ;
20462: LD_ADDR_EXP 45
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// if p3 = 6 then
20470: LD_VAR 0 3
20474: PUSH
20475: LD_INT 6
20477: EQUAL
20478: IFFALSE 20488
// sArmoury := true ;
20480: LD_ADDR_EXP 46
20484: PUSH
20485: LD_INT 1
20487: ST_TO_ADDR
// if p3 = 7 then
20488: LD_VAR 0 3
20492: PUSH
20493: LD_INT 7
20495: EQUAL
20496: IFFALSE 20506
// sRadar := true ;
20498: LD_ADDR_EXP 47
20502: PUSH
20503: LD_INT 1
20505: ST_TO_ADDR
// if p3 = 8 then
20506: LD_VAR 0 3
20510: PUSH
20511: LD_INT 8
20513: EQUAL
20514: IFFALSE 20524
// sBunker := true ;
20516: LD_ADDR_EXP 48
20520: PUSH
20521: LD_INT 1
20523: ST_TO_ADDR
// if p3 = 9 then
20524: LD_VAR 0 3
20528: PUSH
20529: LD_INT 9
20531: EQUAL
20532: IFFALSE 20542
// sHack := true ;
20534: LD_ADDR_EXP 49
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// if p3 = 10 then
20542: LD_VAR 0 3
20546: PUSH
20547: LD_INT 10
20549: EQUAL
20550: IFFALSE 20560
// sFire := true ;
20552: LD_ADDR_EXP 50
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if p3 = 11 then
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 11
20567: EQUAL
20568: IFFALSE 20578
// sRefresh := true ;
20570: LD_ADDR_EXP 51
20574: PUSH
20575: LD_INT 1
20577: ST_TO_ADDR
// if p3 = 12 then
20578: LD_VAR 0 3
20582: PUSH
20583: LD_INT 12
20585: EQUAL
20586: IFFALSE 20596
// sExp := true ;
20588: LD_ADDR_EXP 52
20592: PUSH
20593: LD_INT 1
20595: ST_TO_ADDR
// if p3 = 13 then
20596: LD_VAR 0 3
20600: PUSH
20601: LD_INT 13
20603: EQUAL
20604: IFFALSE 20614
// sDepot := true ;
20606: LD_ADDR_EXP 53
20610: PUSH
20611: LD_INT 1
20613: ST_TO_ADDR
// if p3 = 14 then
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 14
20621: EQUAL
20622: IFFALSE 20632
// sFlag := true ;
20624: LD_ADDR_EXP 54
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// if p3 = 15 then
20632: LD_VAR 0 3
20636: PUSH
20637: LD_INT 15
20639: EQUAL
20640: IFFALSE 20650
// sKamikadze := true ;
20642: LD_ADDR_EXP 62
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// if p3 = 16 then
20650: LD_VAR 0 3
20654: PUSH
20655: LD_INT 16
20657: EQUAL
20658: IFFALSE 20668
// sTroll := true ;
20660: LD_ADDR_EXP 63
20664: PUSH
20665: LD_INT 1
20667: ST_TO_ADDR
// if p3 = 17 then
20668: LD_VAR 0 3
20672: PUSH
20673: LD_INT 17
20675: EQUAL
20676: IFFALSE 20686
// sSlow := true ;
20678: LD_ADDR_EXP 64
20682: PUSH
20683: LD_INT 1
20685: ST_TO_ADDR
// if p3 = 18 then
20686: LD_VAR 0 3
20690: PUSH
20691: LD_INT 18
20693: EQUAL
20694: IFFALSE 20704
// sLack := true ;
20696: LD_ADDR_EXP 65
20700: PUSH
20701: LD_INT 1
20703: ST_TO_ADDR
// if p3 = 19 then
20704: LD_VAR 0 3
20708: PUSH
20709: LD_INT 19
20711: EQUAL
20712: IFFALSE 20722
// sTank := true ;
20714: LD_ADDR_EXP 67
20718: PUSH
20719: LD_INT 1
20721: ST_TO_ADDR
// if p3 = 20 then
20722: LD_VAR 0 3
20726: PUSH
20727: LD_INT 20
20729: EQUAL
20730: IFFALSE 20740
// sRemote := true ;
20732: LD_ADDR_EXP 68
20736: PUSH
20737: LD_INT 1
20739: ST_TO_ADDR
// if p3 = 21 then
20740: LD_VAR 0 3
20744: PUSH
20745: LD_INT 21
20747: EQUAL
20748: IFFALSE 20758
// sPowell := true ;
20750: LD_ADDR_EXP 69
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// if p3 = 22 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 22
20765: EQUAL
20766: IFFALSE 20776
// sTeleport := true ;
20768: LD_ADDR_EXP 72
20772: PUSH
20773: LD_INT 1
20775: ST_TO_ADDR
// if p3 = 23 then
20776: LD_VAR 0 3
20780: PUSH
20781: LD_INT 23
20783: EQUAL
20784: IFFALSE 20794
// sOilTower := true ;
20786: LD_ADDR_EXP 74
20790: PUSH
20791: LD_INT 1
20793: ST_TO_ADDR
// if p3 = 24 then
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 24
20801: EQUAL
20802: IFFALSE 20812
// sShovel := true ;
20804: LD_ADDR_EXP 75
20808: PUSH
20809: LD_INT 1
20811: ST_TO_ADDR
// if p3 = 25 then
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 25
20819: EQUAL
20820: IFFALSE 20830
// sSheik := true ;
20822: LD_ADDR_EXP 76
20826: PUSH
20827: LD_INT 1
20829: ST_TO_ADDR
// if p3 = 26 then
20830: LD_VAR 0 3
20834: PUSH
20835: LD_INT 26
20837: EQUAL
20838: IFFALSE 20848
// sEarthquake := true ;
20840: LD_ADDR_EXP 78
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// if p3 = 27 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 27
20855: EQUAL
20856: IFFALSE 20866
// sAI := true ;
20858: LD_ADDR_EXP 79
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 28 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 28
20873: EQUAL
20874: IFFALSE 20884
// sCargo := true ;
20876: LD_ADDR_EXP 82
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 29 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 29
20891: EQUAL
20892: IFFALSE 20902
// sDLaser := true ;
20894: LD_ADDR_EXP 83
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 30 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 30
20909: EQUAL
20910: IFFALSE 20920
// sExchange := true ;
20912: LD_ADDR_EXP 84
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 31 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 31
20927: EQUAL
20928: IFFALSE 20938
// sFac := true ;
20930: LD_ADDR_EXP 85
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 32 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 32
20945: EQUAL
20946: IFFALSE 20956
// sPower := true ;
20948: LD_ADDR_EXP 86
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 33 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 33
20963: EQUAL
20964: IFFALSE 20974
// sRandom := true ;
20966: LD_ADDR_EXP 87
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 34 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 34
20981: EQUAL
20982: IFFALSE 20992
// sShield := true ;
20984: LD_ADDR_EXP 88
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 35 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 35
20999: EQUAL
21000: IFFALSE 21010
// sTime := true ;
21002: LD_ADDR_EXP 89
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 36 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 36
21017: EQUAL
21018: IFFALSE 21028
// sTools := true ;
21020: LD_ADDR_EXP 90
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 101 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 101
21035: EQUAL
21036: IFFALSE 21046
// sSold := true ;
21038: LD_ADDR_EXP 55
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 102 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 102
21053: EQUAL
21054: IFFALSE 21064
// sDiff := true ;
21056: LD_ADDR_EXP 56
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 103 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 103
21071: EQUAL
21072: IFFALSE 21082
// sFog := true ;
21074: LD_ADDR_EXP 59
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 104 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 104
21089: EQUAL
21090: IFFALSE 21100
// sReset := true ;
21092: LD_ADDR_EXP 60
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 105 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 105
21107: EQUAL
21108: IFFALSE 21118
// sSun := true ;
21110: LD_ADDR_EXP 61
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 106 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 106
21125: EQUAL
21126: IFFALSE 21136
// sTiger := true ;
21128: LD_ADDR_EXP 57
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 107 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 107
21143: EQUAL
21144: IFFALSE 21154
// sBomb := true ;
21146: LD_ADDR_EXP 58
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 108 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 108
21161: EQUAL
21162: IFFALSE 21172
// sWound := true ;
21164: LD_ADDR_EXP 66
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 109 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 109
21179: EQUAL
21180: IFFALSE 21190
// sBetray := true ;
21182: LD_ADDR_EXP 70
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 110 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 110
21197: EQUAL
21198: IFFALSE 21208
// sContamin := true ;
21200: LD_ADDR_EXP 71
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 111 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 111
21215: EQUAL
21216: IFFALSE 21226
// sOil := true ;
21218: LD_ADDR_EXP 73
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 112 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 112
21233: EQUAL
21234: IFFALSE 21244
// sStu := true ;
21236: LD_ADDR_EXP 77
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 113 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 113
21251: EQUAL
21252: IFFALSE 21262
// sBazooka := true ;
21254: LD_ADDR_EXP 80
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 114 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 114
21269: EQUAL
21270: IFFALSE 21280
// sMortar := true ;
21272: LD_ADDR_EXP 81
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 115 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 115
21287: EQUAL
21288: IFFALSE 21298
// sRanger := true ;
21290: LD_ADDR_EXP 91
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 116 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 116
21305: EQUAL
21306: IFFALSE 21316
// sComputer := true ;
21308: LD_ADDR_EXP 92
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 117 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 117
21323: EQUAL
21324: IFFALSE 21334
// s30 := true ;
21326: LD_ADDR_EXP 93
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 118 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 118
21341: EQUAL
21342: IFFALSE 21352
// s60 := true ;
21344: LD_ADDR_EXP 94
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// end ; if p2 = hack_mode then
21352: LD_VAR 0 2
21356: PUSH
21357: LD_INT 101
21359: EQUAL
21360: IFFALSE 21488
// begin case p3 of 1 :
21362: LD_VAR 0 3
21366: PUSH
21367: LD_INT 1
21369: DOUBLE
21370: EQUAL
21371: IFTRUE 21375
21373: GO 21382
21375: POP
// hHackUnlimitedResources ; 2 :
21376: CALL 33627 0 0
21380: GO 21488
21382: LD_INT 2
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21397
21390: POP
// hHackSetLevel10 ; 3 :
21391: CALL 33760 0 0
21395: GO 21488
21397: LD_INT 3
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21412
21405: POP
// hHackSetLevel10YourUnits ; 4 :
21406: CALL 33845 0 0
21410: GO 21488
21412: LD_INT 4
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21427
21420: POP
// hHackInvincible ; 5 :
21421: CALL 34293 0 0
21425: GO 21488
21427: LD_INT 5
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21442
21435: POP
// hHackInvisible ; 6 :
21436: CALL 34404 0 0
21440: GO 21488
21442: LD_INT 6
21444: DOUBLE
21445: EQUAL
21446: IFTRUE 21450
21448: GO 21457
21450: POP
// hHackChangeYourSide ; 7 :
21451: CALL 34461 0 0
21455: GO 21488
21457: LD_INT 7
21459: DOUBLE
21460: EQUAL
21461: IFTRUE 21465
21463: GO 21472
21465: POP
// hHackChangeUnitSide ; 8 :
21466: CALL 34503 0 0
21470: GO 21488
21472: LD_INT 8
21474: DOUBLE
21475: EQUAL
21476: IFTRUE 21480
21478: GO 21487
21480: POP
// hHackFog ; end ;
21481: CALL 34604 0 0
21485: GO 21488
21487: POP
// end ; if p2 = game_save_mode then
21488: LD_VAR 0 2
21492: PUSH
21493: LD_INT 102
21495: EQUAL
21496: IFFALSE 21551
// begin if p3 = 1 then
21498: LD_VAR 0 3
21502: PUSH
21503: LD_INT 1
21505: EQUAL
21506: IFFALSE 21518
// globalGameSaveCounter := p4 ;
21508: LD_ADDR_EXP 37
21512: PUSH
21513: LD_VAR 0 4
21517: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21518: LD_VAR 0 3
21522: PUSH
21523: LD_INT 2
21525: EQUAL
21526: PUSH
21527: LD_EXP 37
21531: AND
21532: IFFALSE 21551
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21534: LD_STRING setGameSaveCounter(
21536: PUSH
21537: LD_EXP 37
21541: STR
21542: PUSH
21543: LD_STRING )
21545: STR
21546: PPUSH
21547: CALL_OW 559
// end ; end ;
21551: LD_VAR 0 7
21555: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21556: LD_INT 0
21558: PPUSH
// streamModeActive := false ;
21559: LD_ADDR_EXP 38
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// normalCounter := 36 ;
21567: LD_ADDR_EXP 39
21571: PUSH
21572: LD_INT 36
21574: ST_TO_ADDR
// hardcoreCounter := 18 ;
21575: LD_ADDR_EXP 40
21579: PUSH
21580: LD_INT 18
21582: ST_TO_ADDR
// sRocket := false ;
21583: LD_ADDR_EXP 43
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sSpeed := false ;
21591: LD_ADDR_EXP 42
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sEngine := false ;
21599: LD_ADDR_EXP 44
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sSpec := false ;
21607: LD_ADDR_EXP 41
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sLevel := false ;
21615: LD_ADDR_EXP 45
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sArmoury := false ;
21623: LD_ADDR_EXP 46
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sRadar := false ;
21631: LD_ADDR_EXP 47
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sBunker := false ;
21639: LD_ADDR_EXP 48
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sHack := false ;
21647: LD_ADDR_EXP 49
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sFire := false ;
21655: LD_ADDR_EXP 50
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sRefresh := false ;
21663: LD_ADDR_EXP 51
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sExp := false ;
21671: LD_ADDR_EXP 52
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sDepot := false ;
21679: LD_ADDR_EXP 53
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sFlag := false ;
21687: LD_ADDR_EXP 54
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sKamikadze := false ;
21695: LD_ADDR_EXP 62
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sTroll := false ;
21703: LD_ADDR_EXP 63
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sSlow := false ;
21711: LD_ADDR_EXP 64
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sLack := false ;
21719: LD_ADDR_EXP 65
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sTank := false ;
21727: LD_ADDR_EXP 67
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sRemote := false ;
21735: LD_ADDR_EXP 68
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sPowell := false ;
21743: LD_ADDR_EXP 69
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTeleport := false ;
21751: LD_ADDR_EXP 72
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sOilTower := false ;
21759: LD_ADDR_EXP 74
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sShovel := false ;
21767: LD_ADDR_EXP 75
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sSheik := false ;
21775: LD_ADDR_EXP 76
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sEarthquake := false ;
21783: LD_ADDR_EXP 78
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sAI := false ;
21791: LD_ADDR_EXP 79
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sCargo := false ;
21799: LD_ADDR_EXP 82
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sDLaser := false ;
21807: LD_ADDR_EXP 83
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sExchange := false ;
21815: LD_ADDR_EXP 84
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sFac := false ;
21823: LD_ADDR_EXP 85
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sPower := false ;
21831: LD_ADDR_EXP 86
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// sRandom := false ;
21839: LD_ADDR_EXP 87
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// sShield := false ;
21847: LD_ADDR_EXP 88
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// sTime := false ;
21855: LD_ADDR_EXP 89
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
// sTools := false ;
21863: LD_ADDR_EXP 90
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// sSold := false ;
21871: LD_ADDR_EXP 55
21875: PUSH
21876: LD_INT 0
21878: ST_TO_ADDR
// sDiff := false ;
21879: LD_ADDR_EXP 56
21883: PUSH
21884: LD_INT 0
21886: ST_TO_ADDR
// sFog := false ;
21887: LD_ADDR_EXP 59
21891: PUSH
21892: LD_INT 0
21894: ST_TO_ADDR
// sReset := false ;
21895: LD_ADDR_EXP 60
21899: PUSH
21900: LD_INT 0
21902: ST_TO_ADDR
// sSun := false ;
21903: LD_ADDR_EXP 61
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// sTiger := false ;
21911: LD_ADDR_EXP 57
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
// sBomb := false ;
21919: LD_ADDR_EXP 58
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// sWound := false ;
21927: LD_ADDR_EXP 66
21931: PUSH
21932: LD_INT 0
21934: ST_TO_ADDR
// sBetray := false ;
21935: LD_ADDR_EXP 70
21939: PUSH
21940: LD_INT 0
21942: ST_TO_ADDR
// sContamin := false ;
21943: LD_ADDR_EXP 71
21947: PUSH
21948: LD_INT 0
21950: ST_TO_ADDR
// sOil := false ;
21951: LD_ADDR_EXP 73
21955: PUSH
21956: LD_INT 0
21958: ST_TO_ADDR
// sStu := false ;
21959: LD_ADDR_EXP 77
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// sBazooka := false ;
21967: LD_ADDR_EXP 80
21971: PUSH
21972: LD_INT 0
21974: ST_TO_ADDR
// sMortar := false ;
21975: LD_ADDR_EXP 81
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// sRanger := false ;
21983: LD_ADDR_EXP 91
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// sComputer := false ;
21991: LD_ADDR_EXP 92
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// s30 := false ;
21999: LD_ADDR_EXP 93
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// s60 := false ;
22007: LD_ADDR_EXP 94
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
// end ;
22015: LD_VAR 0 1
22019: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
22025: PPUSH
22026: PPUSH
22027: PPUSH
22028: PPUSH
// result := [ ] ;
22029: LD_ADDR_VAR 0 2
22033: PUSH
22034: EMPTY
22035: ST_TO_ADDR
// if campaign_id = 1 then
22036: LD_OWVAR 69
22040: PUSH
22041: LD_INT 1
22043: EQUAL
22044: IFFALSE 25210
// begin case mission_number of 1 :
22046: LD_OWVAR 70
22050: PUSH
22051: LD_INT 1
22053: DOUBLE
22054: EQUAL
22055: IFTRUE 22059
22057: GO 22135
22059: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22060: LD_ADDR_VAR 0 2
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 4
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 23
22088: PUSH
22089: LD_INT 26
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 101
22105: PUSH
22106: LD_INT 102
22108: PUSH
22109: LD_INT 106
22111: PUSH
22112: LD_INT 116
22114: PUSH
22115: LD_INT 117
22117: PUSH
22118: LD_INT 118
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: ST_TO_ADDR
22133: GO 25208
22135: LD_INT 2
22137: DOUBLE
22138: EQUAL
22139: IFTRUE 22143
22141: GO 22227
22143: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22144: LD_ADDR_VAR 0 2
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 4
22154: PUSH
22155: LD_INT 11
22157: PUSH
22158: LD_INT 12
22160: PUSH
22161: LD_INT 15
22163: PUSH
22164: LD_INT 16
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_INT 23
22172: PUSH
22173: LD_INT 26
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 101
22189: PUSH
22190: LD_INT 102
22192: PUSH
22193: LD_INT 105
22195: PUSH
22196: LD_INT 106
22198: PUSH
22199: LD_INT 108
22201: PUSH
22202: LD_INT 116
22204: PUSH
22205: LD_INT 117
22207: PUSH
22208: LD_INT 118
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: ST_TO_ADDR
22225: GO 25208
22227: LD_INT 3
22229: DOUBLE
22230: EQUAL
22231: IFTRUE 22235
22233: GO 22323
22235: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: LD_INT 4
22246: PUSH
22247: LD_INT 5
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 15
22258: PUSH
22259: LD_INT 16
22261: PUSH
22262: LD_INT 22
22264: PUSH
22265: LD_INT 26
22267: PUSH
22268: LD_INT 36
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 101
22285: PUSH
22286: LD_INT 102
22288: PUSH
22289: LD_INT 105
22291: PUSH
22292: LD_INT 106
22294: PUSH
22295: LD_INT 108
22297: PUSH
22298: LD_INT 116
22300: PUSH
22301: LD_INT 117
22303: PUSH
22304: LD_INT 118
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 25208
22323: LD_INT 4
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22427
22331: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 11
22351: PUSH
22352: LD_INT 12
22354: PUSH
22355: LD_INT 15
22357: PUSH
22358: LD_INT 16
22360: PUSH
22361: LD_INT 22
22363: PUSH
22364: LD_INT 23
22366: PUSH
22367: LD_INT 26
22369: PUSH
22370: LD_INT 36
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 101
22389: PUSH
22390: LD_INT 102
22392: PUSH
22393: LD_INT 105
22395: PUSH
22396: LD_INT 106
22398: PUSH
22399: LD_INT 108
22401: PUSH
22402: LD_INT 116
22404: PUSH
22405: LD_INT 117
22407: PUSH
22408: LD_INT 118
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: ST_TO_ADDR
22425: GO 25208
22427: LD_INT 5
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22547
22435: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22436: LD_ADDR_VAR 0 2
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: LD_INT 4
22446: PUSH
22447: LD_INT 5
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: LD_INT 8
22455: PUSH
22456: LD_INT 11
22458: PUSH
22459: LD_INT 12
22461: PUSH
22462: LD_INT 15
22464: PUSH
22465: LD_INT 16
22467: PUSH
22468: LD_INT 22
22470: PUSH
22471: LD_INT 23
22473: PUSH
22474: LD_INT 25
22476: PUSH
22477: LD_INT 26
22479: PUSH
22480: LD_INT 36
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 101
22501: PUSH
22502: LD_INT 102
22504: PUSH
22505: LD_INT 105
22507: PUSH
22508: LD_INT 106
22510: PUSH
22511: LD_INT 108
22513: PUSH
22514: LD_INT 109
22516: PUSH
22517: LD_INT 112
22519: PUSH
22520: LD_INT 116
22522: PUSH
22523: LD_INT 117
22525: PUSH
22526: LD_INT 118
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: ST_TO_ADDR
22545: GO 25208
22547: LD_INT 6
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22687
22555: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22556: LD_ADDR_VAR 0 2
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: LD_INT 4
22566: PUSH
22567: LD_INT 5
22569: PUSH
22570: LD_INT 6
22572: PUSH
22573: LD_INT 8
22575: PUSH
22576: LD_INT 11
22578: PUSH
22579: LD_INT 12
22581: PUSH
22582: LD_INT 15
22584: PUSH
22585: LD_INT 16
22587: PUSH
22588: LD_INT 20
22590: PUSH
22591: LD_INT 21
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_INT 23
22599: PUSH
22600: LD_INT 25
22602: PUSH
22603: LD_INT 26
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 31
22611: PUSH
22612: LD_INT 32
22614: PUSH
22615: LD_INT 36
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 101
22641: PUSH
22642: LD_INT 102
22644: PUSH
22645: LD_INT 105
22647: PUSH
22648: LD_INT 106
22650: PUSH
22651: LD_INT 108
22653: PUSH
22654: LD_INT 109
22656: PUSH
22657: LD_INT 112
22659: PUSH
22660: LD_INT 116
22662: PUSH
22663: LD_INT 117
22665: PUSH
22666: LD_INT 118
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: ST_TO_ADDR
22685: GO 25208
22687: LD_INT 7
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22807
22695: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22696: LD_ADDR_VAR 0 2
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: LD_INT 4
22706: PUSH
22707: LD_INT 5
22709: PUSH
22710: LD_INT 7
22712: PUSH
22713: LD_INT 11
22715: PUSH
22716: LD_INT 12
22718: PUSH
22719: LD_INT 15
22721: PUSH
22722: LD_INT 16
22724: PUSH
22725: LD_INT 20
22727: PUSH
22728: LD_INT 21
22730: PUSH
22731: LD_INT 22
22733: PUSH
22734: LD_INT 23
22736: PUSH
22737: LD_INT 25
22739: PUSH
22740: LD_INT 26
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: LD_INT 105
22770: PUSH
22771: LD_INT 106
22773: PUSH
22774: LD_INT 108
22776: PUSH
22777: LD_INT 112
22779: PUSH
22780: LD_INT 116
22782: PUSH
22783: LD_INT 117
22785: PUSH
22786: LD_INT 118
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: ST_TO_ADDR
22805: GO 25208
22807: LD_INT 8
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 22955
22815: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22816: LD_ADDR_VAR 0 2
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 4
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: LD_INT 6
22832: PUSH
22833: LD_INT 7
22835: PUSH
22836: LD_INT 8
22838: PUSH
22839: LD_INT 11
22841: PUSH
22842: LD_INT 12
22844: PUSH
22845: LD_INT 15
22847: PUSH
22848: LD_INT 16
22850: PUSH
22851: LD_INT 20
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 25
22865: PUSH
22866: LD_INT 26
22868: PUSH
22869: LD_INT 30
22871: PUSH
22872: LD_INT 31
22874: PUSH
22875: LD_INT 32
22877: PUSH
22878: LD_INT 36
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 101
22905: PUSH
22906: LD_INT 102
22908: PUSH
22909: LD_INT 103
22911: PUSH
22912: LD_INT 105
22914: PUSH
22915: LD_INT 106
22917: PUSH
22918: LD_INT 108
22920: PUSH
22921: LD_INT 109
22923: PUSH
22924: LD_INT 112
22926: PUSH
22927: LD_INT 116
22929: PUSH
22930: LD_INT 117
22932: PUSH
22933: LD_INT 118
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: ST_TO_ADDR
22953: GO 25208
22955: LD_INT 9
22957: DOUBLE
22958: EQUAL
22959: IFTRUE 22963
22961: GO 23111
22963: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22964: LD_ADDR_VAR 0 2
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 4
22974: PUSH
22975: LD_INT 5
22977: PUSH
22978: LD_INT 6
22980: PUSH
22981: LD_INT 7
22983: PUSH
22984: LD_INT 8
22986: PUSH
22987: LD_INT 11
22989: PUSH
22990: LD_INT 12
22992: PUSH
22993: LD_INT 15
22995: PUSH
22996: LD_INT 16
22998: PUSH
22999: LD_INT 20
23001: PUSH
23002: LD_INT 21
23004: PUSH
23005: LD_INT 22
23007: PUSH
23008: LD_INT 23
23010: PUSH
23011: LD_INT 25
23013: PUSH
23014: LD_INT 26
23016: PUSH
23017: LD_INT 28
23019: PUSH
23020: LD_INT 30
23022: PUSH
23023: LD_INT 31
23025: PUSH
23026: LD_INT 32
23028: PUSH
23029: LD_INT 36
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 101
23057: PUSH
23058: LD_INT 102
23060: PUSH
23061: LD_INT 103
23063: PUSH
23064: LD_INT 105
23066: PUSH
23067: LD_INT 106
23069: PUSH
23070: LD_INT 108
23072: PUSH
23073: LD_INT 109
23075: PUSH
23076: LD_INT 112
23078: PUSH
23079: LD_INT 114
23081: PUSH
23082: LD_INT 116
23084: PUSH
23085: LD_INT 117
23087: PUSH
23088: LD_INT 118
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: ST_TO_ADDR
23109: GO 25208
23111: LD_INT 10
23113: DOUBLE
23114: EQUAL
23115: IFTRUE 23119
23117: GO 23315
23119: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23120: LD_ADDR_VAR 0 2
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: LD_INT 4
23130: PUSH
23131: LD_INT 5
23133: PUSH
23134: LD_INT 6
23136: PUSH
23137: LD_INT 7
23139: PUSH
23140: LD_INT 8
23142: PUSH
23143: LD_INT 9
23145: PUSH
23146: LD_INT 10
23148: PUSH
23149: LD_INT 11
23151: PUSH
23152: LD_INT 12
23154: PUSH
23155: LD_INT 13
23157: PUSH
23158: LD_INT 14
23160: PUSH
23161: LD_INT 15
23163: PUSH
23164: LD_INT 16
23166: PUSH
23167: LD_INT 17
23169: PUSH
23170: LD_INT 18
23172: PUSH
23173: LD_INT 19
23175: PUSH
23176: LD_INT 20
23178: PUSH
23179: LD_INT 21
23181: PUSH
23182: LD_INT 22
23184: PUSH
23185: LD_INT 23
23187: PUSH
23188: LD_INT 24
23190: PUSH
23191: LD_INT 25
23193: PUSH
23194: LD_INT 26
23196: PUSH
23197: LD_INT 28
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 31
23205: PUSH
23206: LD_INT 32
23208: PUSH
23209: LD_INT 36
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 101
23245: PUSH
23246: LD_INT 102
23248: PUSH
23249: LD_INT 103
23251: PUSH
23252: LD_INT 104
23254: PUSH
23255: LD_INT 105
23257: PUSH
23258: LD_INT 106
23260: PUSH
23261: LD_INT 107
23263: PUSH
23264: LD_INT 108
23266: PUSH
23267: LD_INT 109
23269: PUSH
23270: LD_INT 110
23272: PUSH
23273: LD_INT 111
23275: PUSH
23276: LD_INT 112
23278: PUSH
23279: LD_INT 114
23281: PUSH
23282: LD_INT 116
23284: PUSH
23285: LD_INT 117
23287: PUSH
23288: LD_INT 118
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: ST_TO_ADDR
23313: GO 25208
23315: LD_INT 11
23317: DOUBLE
23318: EQUAL
23319: IFTRUE 23323
23321: GO 23527
23323: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: LD_INT 3
23334: PUSH
23335: LD_INT 4
23337: PUSH
23338: LD_INT 5
23340: PUSH
23341: LD_INT 6
23343: PUSH
23344: LD_INT 7
23346: PUSH
23347: LD_INT 8
23349: PUSH
23350: LD_INT 9
23352: PUSH
23353: LD_INT 10
23355: PUSH
23356: LD_INT 11
23358: PUSH
23359: LD_INT 12
23361: PUSH
23362: LD_INT 13
23364: PUSH
23365: LD_INT 14
23367: PUSH
23368: LD_INT 15
23370: PUSH
23371: LD_INT 16
23373: PUSH
23374: LD_INT 17
23376: PUSH
23377: LD_INT 18
23379: PUSH
23380: LD_INT 19
23382: PUSH
23383: LD_INT 20
23385: PUSH
23386: LD_INT 21
23388: PUSH
23389: LD_INT 22
23391: PUSH
23392: LD_INT 23
23394: PUSH
23395: LD_INT 24
23397: PUSH
23398: LD_INT 25
23400: PUSH
23401: LD_INT 26
23403: PUSH
23404: LD_INT 28
23406: PUSH
23407: LD_INT 30
23409: PUSH
23410: LD_INT 31
23412: PUSH
23413: LD_INT 32
23415: PUSH
23416: LD_INT 34
23418: PUSH
23419: LD_INT 36
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 101
23457: PUSH
23458: LD_INT 102
23460: PUSH
23461: LD_INT 103
23463: PUSH
23464: LD_INT 104
23466: PUSH
23467: LD_INT 105
23469: PUSH
23470: LD_INT 106
23472: PUSH
23473: LD_INT 107
23475: PUSH
23476: LD_INT 108
23478: PUSH
23479: LD_INT 109
23481: PUSH
23482: LD_INT 110
23484: PUSH
23485: LD_INT 111
23487: PUSH
23488: LD_INT 112
23490: PUSH
23491: LD_INT 114
23493: PUSH
23494: LD_INT 116
23496: PUSH
23497: LD_INT 117
23499: PUSH
23500: LD_INT 118
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: ST_TO_ADDR
23525: GO 25208
23527: LD_INT 12
23529: DOUBLE
23530: EQUAL
23531: IFTRUE 23535
23533: GO 23755
23535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23536: LD_ADDR_VAR 0 2
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: LD_INT 6
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 8
23564: PUSH
23565: LD_INT 9
23567: PUSH
23568: LD_INT 10
23570: PUSH
23571: LD_INT 11
23573: PUSH
23574: LD_INT 12
23576: PUSH
23577: LD_INT 13
23579: PUSH
23580: LD_INT 14
23582: PUSH
23583: LD_INT 15
23585: PUSH
23586: LD_INT 16
23588: PUSH
23589: LD_INT 17
23591: PUSH
23592: LD_INT 18
23594: PUSH
23595: LD_INT 19
23597: PUSH
23598: LD_INT 20
23600: PUSH
23601: LD_INT 21
23603: PUSH
23604: LD_INT 22
23606: PUSH
23607: LD_INT 23
23609: PUSH
23610: LD_INT 24
23612: PUSH
23613: LD_INT 25
23615: PUSH
23616: LD_INT 26
23618: PUSH
23619: LD_INT 27
23621: PUSH
23622: LD_INT 28
23624: PUSH
23625: LD_INT 30
23627: PUSH
23628: LD_INT 31
23630: PUSH
23631: LD_INT 32
23633: PUSH
23634: LD_INT 33
23636: PUSH
23637: LD_INT 34
23639: PUSH
23640: LD_INT 36
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 101
23681: PUSH
23682: LD_INT 102
23684: PUSH
23685: LD_INT 103
23687: PUSH
23688: LD_INT 104
23690: PUSH
23691: LD_INT 105
23693: PUSH
23694: LD_INT 106
23696: PUSH
23697: LD_INT 107
23699: PUSH
23700: LD_INT 108
23702: PUSH
23703: LD_INT 109
23705: PUSH
23706: LD_INT 110
23708: PUSH
23709: LD_INT 111
23711: PUSH
23712: LD_INT 112
23714: PUSH
23715: LD_INT 113
23717: PUSH
23718: LD_INT 114
23720: PUSH
23721: LD_INT 116
23723: PUSH
23724: LD_INT 117
23726: PUSH
23727: LD_INT 118
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: ST_TO_ADDR
23753: GO 25208
23755: LD_INT 13
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23971
23763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: LD_INT 4
23780: PUSH
23781: LD_INT 5
23783: PUSH
23784: LD_INT 8
23786: PUSH
23787: LD_INT 9
23789: PUSH
23790: LD_INT 10
23792: PUSH
23793: LD_INT 11
23795: PUSH
23796: LD_INT 12
23798: PUSH
23799: LD_INT 14
23801: PUSH
23802: LD_INT 15
23804: PUSH
23805: LD_INT 16
23807: PUSH
23808: LD_INT 17
23810: PUSH
23811: LD_INT 18
23813: PUSH
23814: LD_INT 19
23816: PUSH
23817: LD_INT 20
23819: PUSH
23820: LD_INT 21
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_INT 23
23828: PUSH
23829: LD_INT 24
23831: PUSH
23832: LD_INT 25
23834: PUSH
23835: LD_INT 26
23837: PUSH
23838: LD_INT 27
23840: PUSH
23841: LD_INT 28
23843: PUSH
23844: LD_INT 30
23846: PUSH
23847: LD_INT 31
23849: PUSH
23850: LD_INT 32
23852: PUSH
23853: LD_INT 33
23855: PUSH
23856: LD_INT 34
23858: PUSH
23859: LD_INT 36
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 101
23897: PUSH
23898: LD_INT 102
23900: PUSH
23901: LD_INT 103
23903: PUSH
23904: LD_INT 104
23906: PUSH
23907: LD_INT 105
23909: PUSH
23910: LD_INT 106
23912: PUSH
23913: LD_INT 107
23915: PUSH
23916: LD_INT 108
23918: PUSH
23919: LD_INT 109
23921: PUSH
23922: LD_INT 110
23924: PUSH
23925: LD_INT 111
23927: PUSH
23928: LD_INT 112
23930: PUSH
23931: LD_INT 113
23933: PUSH
23934: LD_INT 114
23936: PUSH
23937: LD_INT 116
23939: PUSH
23940: LD_INT 117
23942: PUSH
23943: LD_INT 118
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: ST_TO_ADDR
23969: GO 25208
23971: LD_INT 14
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 24203
23979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 3
23993: PUSH
23994: LD_INT 4
23996: PUSH
23997: LD_INT 5
23999: PUSH
24000: LD_INT 6
24002: PUSH
24003: LD_INT 7
24005: PUSH
24006: LD_INT 8
24008: PUSH
24009: LD_INT 9
24011: PUSH
24012: LD_INT 10
24014: PUSH
24015: LD_INT 11
24017: PUSH
24018: LD_INT 12
24020: PUSH
24021: LD_INT 13
24023: PUSH
24024: LD_INT 14
24026: PUSH
24027: LD_INT 15
24029: PUSH
24030: LD_INT 16
24032: PUSH
24033: LD_INT 17
24035: PUSH
24036: LD_INT 18
24038: PUSH
24039: LD_INT 19
24041: PUSH
24042: LD_INT 20
24044: PUSH
24045: LD_INT 21
24047: PUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 23
24053: PUSH
24054: LD_INT 24
24056: PUSH
24057: LD_INT 25
24059: PUSH
24060: LD_INT 26
24062: PUSH
24063: LD_INT 27
24065: PUSH
24066: LD_INT 28
24068: PUSH
24069: LD_INT 29
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 31
24077: PUSH
24078: LD_INT 32
24080: PUSH
24081: LD_INT 33
24083: PUSH
24084: LD_INT 34
24086: PUSH
24087: LD_INT 36
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 101
24129: PUSH
24130: LD_INT 102
24132: PUSH
24133: LD_INT 103
24135: PUSH
24136: LD_INT 104
24138: PUSH
24139: LD_INT 105
24141: PUSH
24142: LD_INT 106
24144: PUSH
24145: LD_INT 107
24147: PUSH
24148: LD_INT 108
24150: PUSH
24151: LD_INT 109
24153: PUSH
24154: LD_INT 110
24156: PUSH
24157: LD_INT 111
24159: PUSH
24160: LD_INT 112
24162: PUSH
24163: LD_INT 113
24165: PUSH
24166: LD_INT 114
24168: PUSH
24169: LD_INT 116
24171: PUSH
24172: LD_INT 117
24174: PUSH
24175: LD_INT 118
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: ST_TO_ADDR
24201: GO 25208
24203: LD_INT 15
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24435
24211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24212: LD_ADDR_VAR 0 2
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: LD_INT 2
24222: PUSH
24223: LD_INT 3
24225: PUSH
24226: LD_INT 4
24228: PUSH
24229: LD_INT 5
24231: PUSH
24232: LD_INT 6
24234: PUSH
24235: LD_INT 7
24237: PUSH
24238: LD_INT 8
24240: PUSH
24241: LD_INT 9
24243: PUSH
24244: LD_INT 10
24246: PUSH
24247: LD_INT 11
24249: PUSH
24250: LD_INT 12
24252: PUSH
24253: LD_INT 13
24255: PUSH
24256: LD_INT 14
24258: PUSH
24259: LD_INT 15
24261: PUSH
24262: LD_INT 16
24264: PUSH
24265: LD_INT 17
24267: PUSH
24268: LD_INT 18
24270: PUSH
24271: LD_INT 19
24273: PUSH
24274: LD_INT 20
24276: PUSH
24277: LD_INT 21
24279: PUSH
24280: LD_INT 22
24282: PUSH
24283: LD_INT 23
24285: PUSH
24286: LD_INT 24
24288: PUSH
24289: LD_INT 25
24291: PUSH
24292: LD_INT 26
24294: PUSH
24295: LD_INT 27
24297: PUSH
24298: LD_INT 28
24300: PUSH
24301: LD_INT 29
24303: PUSH
24304: LD_INT 30
24306: PUSH
24307: LD_INT 31
24309: PUSH
24310: LD_INT 32
24312: PUSH
24313: LD_INT 33
24315: PUSH
24316: LD_INT 34
24318: PUSH
24319: LD_INT 36
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 101
24361: PUSH
24362: LD_INT 102
24364: PUSH
24365: LD_INT 103
24367: PUSH
24368: LD_INT 104
24370: PUSH
24371: LD_INT 105
24373: PUSH
24374: LD_INT 106
24376: PUSH
24377: LD_INT 107
24379: PUSH
24380: LD_INT 108
24382: PUSH
24383: LD_INT 109
24385: PUSH
24386: LD_INT 110
24388: PUSH
24389: LD_INT 111
24391: PUSH
24392: LD_INT 112
24394: PUSH
24395: LD_INT 113
24397: PUSH
24398: LD_INT 114
24400: PUSH
24401: LD_INT 116
24403: PUSH
24404: LD_INT 117
24406: PUSH
24407: LD_INT 118
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: ST_TO_ADDR
24433: GO 25208
24435: LD_INT 16
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24579
24443: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24444: LD_ADDR_VAR 0 2
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: LD_INT 4
24454: PUSH
24455: LD_INT 5
24457: PUSH
24458: LD_INT 7
24460: PUSH
24461: LD_INT 11
24463: PUSH
24464: LD_INT 12
24466: PUSH
24467: LD_INT 15
24469: PUSH
24470: LD_INT 16
24472: PUSH
24473: LD_INT 20
24475: PUSH
24476: LD_INT 21
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_INT 23
24484: PUSH
24485: LD_INT 25
24487: PUSH
24488: LD_INT 26
24490: PUSH
24491: LD_INT 30
24493: PUSH
24494: LD_INT 31
24496: PUSH
24497: LD_INT 32
24499: PUSH
24500: LD_INT 33
24502: PUSH
24503: LD_INT 34
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 101
24529: PUSH
24530: LD_INT 102
24532: PUSH
24533: LD_INT 103
24535: PUSH
24536: LD_INT 106
24538: PUSH
24539: LD_INT 108
24541: PUSH
24542: LD_INT 112
24544: PUSH
24545: LD_INT 113
24547: PUSH
24548: LD_INT 114
24550: PUSH
24551: LD_INT 116
24553: PUSH
24554: LD_INT 117
24556: PUSH
24557: LD_INT 118
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: ST_TO_ADDR
24577: GO 25208
24579: LD_INT 17
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24811
24587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24588: LD_ADDR_VAR 0 2
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 3
24601: PUSH
24602: LD_INT 4
24604: PUSH
24605: LD_INT 5
24607: PUSH
24608: LD_INT 6
24610: PUSH
24611: LD_INT 7
24613: PUSH
24614: LD_INT 8
24616: PUSH
24617: LD_INT 9
24619: PUSH
24620: LD_INT 10
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 13
24631: PUSH
24632: LD_INT 14
24634: PUSH
24635: LD_INT 15
24637: PUSH
24638: LD_INT 16
24640: PUSH
24641: LD_INT 17
24643: PUSH
24644: LD_INT 18
24646: PUSH
24647: LD_INT 19
24649: PUSH
24650: LD_INT 20
24652: PUSH
24653: LD_INT 21
24655: PUSH
24656: LD_INT 22
24658: PUSH
24659: LD_INT 23
24661: PUSH
24662: LD_INT 24
24664: PUSH
24665: LD_INT 25
24667: PUSH
24668: LD_INT 26
24670: PUSH
24671: LD_INT 27
24673: PUSH
24674: LD_INT 28
24676: PUSH
24677: LD_INT 29
24679: PUSH
24680: LD_INT 30
24682: PUSH
24683: LD_INT 31
24685: PUSH
24686: LD_INT 32
24688: PUSH
24689: LD_INT 33
24691: PUSH
24692: LD_INT 34
24694: PUSH
24695: LD_INT 36
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 101
24737: PUSH
24738: LD_INT 102
24740: PUSH
24741: LD_INT 103
24743: PUSH
24744: LD_INT 104
24746: PUSH
24747: LD_INT 105
24749: PUSH
24750: LD_INT 106
24752: PUSH
24753: LD_INT 107
24755: PUSH
24756: LD_INT 108
24758: PUSH
24759: LD_INT 109
24761: PUSH
24762: LD_INT 110
24764: PUSH
24765: LD_INT 111
24767: PUSH
24768: LD_INT 112
24770: PUSH
24771: LD_INT 113
24773: PUSH
24774: LD_INT 114
24776: PUSH
24777: LD_INT 116
24779: PUSH
24780: LD_INT 117
24782: PUSH
24783: LD_INT 118
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: ST_TO_ADDR
24809: GO 25208
24811: LD_INT 18
24813: DOUBLE
24814: EQUAL
24815: IFTRUE 24819
24817: GO 24967
24819: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24820: LD_ADDR_VAR 0 2
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 4
24830: PUSH
24831: LD_INT 5
24833: PUSH
24834: LD_INT 7
24836: PUSH
24837: LD_INT 11
24839: PUSH
24840: LD_INT 12
24842: PUSH
24843: LD_INT 15
24845: PUSH
24846: LD_INT 16
24848: PUSH
24849: LD_INT 20
24851: PUSH
24852: LD_INT 21
24854: PUSH
24855: LD_INT 22
24857: PUSH
24858: LD_INT 23
24860: PUSH
24861: LD_INT 25
24863: PUSH
24864: LD_INT 26
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: LD_INT 31
24872: PUSH
24873: LD_INT 32
24875: PUSH
24876: LD_INT 33
24878: PUSH
24879: LD_INT 34
24881: PUSH
24882: LD_INT 35
24884: PUSH
24885: LD_INT 36
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 101
24913: PUSH
24914: LD_INT 102
24916: PUSH
24917: LD_INT 103
24919: PUSH
24920: LD_INT 106
24922: PUSH
24923: LD_INT 108
24925: PUSH
24926: LD_INT 112
24928: PUSH
24929: LD_INT 113
24931: PUSH
24932: LD_INT 114
24934: PUSH
24935: LD_INT 115
24937: PUSH
24938: LD_INT 116
24940: PUSH
24941: LD_INT 117
24943: PUSH
24944: LD_INT 118
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: ST_TO_ADDR
24965: GO 25208
24967: LD_INT 19
24969: DOUBLE
24970: EQUAL
24971: IFTRUE 24975
24973: GO 25207
24975: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24976: LD_ADDR_VAR 0 2
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: LD_INT 3
24989: PUSH
24990: LD_INT 4
24992: PUSH
24993: LD_INT 5
24995: PUSH
24996: LD_INT 6
24998: PUSH
24999: LD_INT 7
25001: PUSH
25002: LD_INT 8
25004: PUSH
25005: LD_INT 9
25007: PUSH
25008: LD_INT 10
25010: PUSH
25011: LD_INT 11
25013: PUSH
25014: LD_INT 12
25016: PUSH
25017: LD_INT 13
25019: PUSH
25020: LD_INT 14
25022: PUSH
25023: LD_INT 15
25025: PUSH
25026: LD_INT 16
25028: PUSH
25029: LD_INT 17
25031: PUSH
25032: LD_INT 18
25034: PUSH
25035: LD_INT 19
25037: PUSH
25038: LD_INT 20
25040: PUSH
25041: LD_INT 21
25043: PUSH
25044: LD_INT 22
25046: PUSH
25047: LD_INT 23
25049: PUSH
25050: LD_INT 24
25052: PUSH
25053: LD_INT 25
25055: PUSH
25056: LD_INT 26
25058: PUSH
25059: LD_INT 27
25061: PUSH
25062: LD_INT 28
25064: PUSH
25065: LD_INT 29
25067: PUSH
25068: LD_INT 30
25070: PUSH
25071: LD_INT 31
25073: PUSH
25074: LD_INT 32
25076: PUSH
25077: LD_INT 33
25079: PUSH
25080: LD_INT 34
25082: PUSH
25083: LD_INT 35
25085: PUSH
25086: LD_INT 36
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 101
25129: PUSH
25130: LD_INT 102
25132: PUSH
25133: LD_INT 103
25135: PUSH
25136: LD_INT 104
25138: PUSH
25139: LD_INT 105
25141: PUSH
25142: LD_INT 106
25144: PUSH
25145: LD_INT 107
25147: PUSH
25148: LD_INT 108
25150: PUSH
25151: LD_INT 109
25153: PUSH
25154: LD_INT 110
25156: PUSH
25157: LD_INT 111
25159: PUSH
25160: LD_INT 112
25162: PUSH
25163: LD_INT 113
25165: PUSH
25166: LD_INT 114
25168: PUSH
25169: LD_INT 115
25171: PUSH
25172: LD_INT 116
25174: PUSH
25175: LD_INT 117
25177: PUSH
25178: LD_INT 118
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: ST_TO_ADDR
25205: GO 25208
25207: POP
// end else
25208: GO 25439
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25210: LD_ADDR_VAR 0 2
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: LD_INT 4
25226: PUSH
25227: LD_INT 5
25229: PUSH
25230: LD_INT 6
25232: PUSH
25233: LD_INT 7
25235: PUSH
25236: LD_INT 8
25238: PUSH
25239: LD_INT 9
25241: PUSH
25242: LD_INT 10
25244: PUSH
25245: LD_INT 11
25247: PUSH
25248: LD_INT 12
25250: PUSH
25251: LD_INT 13
25253: PUSH
25254: LD_INT 14
25256: PUSH
25257: LD_INT 15
25259: PUSH
25260: LD_INT 16
25262: PUSH
25263: LD_INT 17
25265: PUSH
25266: LD_INT 18
25268: PUSH
25269: LD_INT 19
25271: PUSH
25272: LD_INT 20
25274: PUSH
25275: LD_INT 21
25277: PUSH
25278: LD_INT 22
25280: PUSH
25281: LD_INT 23
25283: PUSH
25284: LD_INT 24
25286: PUSH
25287: LD_INT 25
25289: PUSH
25290: LD_INT 26
25292: PUSH
25293: LD_INT 27
25295: PUSH
25296: LD_INT 28
25298: PUSH
25299: LD_INT 29
25301: PUSH
25302: LD_INT 30
25304: PUSH
25305: LD_INT 31
25307: PUSH
25308: LD_INT 32
25310: PUSH
25311: LD_INT 33
25313: PUSH
25314: LD_INT 34
25316: PUSH
25317: LD_INT 35
25319: PUSH
25320: LD_INT 36
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 101
25363: PUSH
25364: LD_INT 102
25366: PUSH
25367: LD_INT 103
25369: PUSH
25370: LD_INT 104
25372: PUSH
25373: LD_INT 105
25375: PUSH
25376: LD_INT 106
25378: PUSH
25379: LD_INT 107
25381: PUSH
25382: LD_INT 108
25384: PUSH
25385: LD_INT 109
25387: PUSH
25388: LD_INT 110
25390: PUSH
25391: LD_INT 111
25393: PUSH
25394: LD_INT 112
25396: PUSH
25397: LD_INT 113
25399: PUSH
25400: LD_INT 114
25402: PUSH
25403: LD_INT 115
25405: PUSH
25406: LD_INT 116
25408: PUSH
25409: LD_INT 117
25411: PUSH
25412: LD_INT 118
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: ST_TO_ADDR
// if result then
25439: LD_VAR 0 2
25443: IFFALSE 26229
// begin normal :=  ;
25445: LD_ADDR_VAR 0 5
25449: PUSH
25450: LD_STRING 
25452: ST_TO_ADDR
// hardcore :=  ;
25453: LD_ADDR_VAR 0 6
25457: PUSH
25458: LD_STRING 
25460: ST_TO_ADDR
// active :=  ;
25461: LD_ADDR_VAR 0 7
25465: PUSH
25466: LD_STRING 
25468: ST_TO_ADDR
// for i = 1 to normalCounter do
25469: LD_ADDR_VAR 0 8
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_EXP 39
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25586
// begin tmp := 0 ;
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_STRING 0
25494: ST_TO_ADDR
// if result [ 1 ] then
25495: LD_VAR 0 2
25499: PUSH
25500: LD_INT 1
25502: ARRAY
25503: IFFALSE 25568
// if result [ 1 ] [ 1 ] = i then
25505: LD_VAR 0 2
25509: PUSH
25510: LD_INT 1
25512: ARRAY
25513: PUSH
25514: LD_INT 1
25516: ARRAY
25517: PUSH
25518: LD_VAR 0 8
25522: EQUAL
25523: IFFALSE 25568
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25525: LD_ADDR_VAR 0 2
25529: PUSH
25530: LD_VAR 0 2
25534: PPUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_VAR 0 2
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: CALL_OW 3
25554: PPUSH
25555: CALL_OW 1
25559: ST_TO_ADDR
// tmp := 1 ;
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_STRING 1
25567: ST_TO_ADDR
// end ; normal := normal & tmp ;
25568: LD_ADDR_VAR 0 5
25572: PUSH
25573: LD_VAR 0 5
25577: PUSH
25578: LD_VAR 0 3
25582: STR
25583: ST_TO_ADDR
// end ;
25584: GO 25484
25586: POP
25587: POP
// for i = 1 to hardcoreCounter do
25588: LD_ADDR_VAR 0 8
25592: PUSH
25593: DOUBLE
25594: LD_INT 1
25596: DEC
25597: ST_TO_ADDR
25598: LD_EXP 40
25602: PUSH
25603: FOR_TO
25604: IFFALSE 25709
// begin tmp := 0 ;
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_STRING 0
25613: ST_TO_ADDR
// if result [ 2 ] then
25614: LD_VAR 0 2
25618: PUSH
25619: LD_INT 2
25621: ARRAY
25622: IFFALSE 25691
// if result [ 2 ] [ 1 ] = 100 + i then
25624: LD_VAR 0 2
25628: PUSH
25629: LD_INT 2
25631: ARRAY
25632: PUSH
25633: LD_INT 1
25635: ARRAY
25636: PUSH
25637: LD_INT 100
25639: PUSH
25640: LD_VAR 0 8
25644: PLUS
25645: EQUAL
25646: IFFALSE 25691
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25648: LD_ADDR_VAR 0 2
25652: PUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 2
25660: PPUSH
25661: LD_VAR 0 2
25665: PUSH
25666: LD_INT 2
25668: ARRAY
25669: PPUSH
25670: LD_INT 1
25672: PPUSH
25673: CALL_OW 3
25677: PPUSH
25678: CALL_OW 1
25682: ST_TO_ADDR
// tmp := 1 ;
25683: LD_ADDR_VAR 0 3
25687: PUSH
25688: LD_STRING 1
25690: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25691: LD_ADDR_VAR 0 6
25695: PUSH
25696: LD_VAR 0 6
25700: PUSH
25701: LD_VAR 0 3
25705: STR
25706: ST_TO_ADDR
// end ;
25707: GO 25603
25709: POP
25710: POP
// if isGameLoad then
25711: LD_VAR 0 1
25715: IFFALSE 26190
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25717: LD_ADDR_VAR 0 4
25721: PUSH
25722: LD_EXP 43
25726: PUSH
25727: LD_EXP 42
25731: PUSH
25732: LD_EXP 44
25736: PUSH
25737: LD_EXP 41
25741: PUSH
25742: LD_EXP 45
25746: PUSH
25747: LD_EXP 46
25751: PUSH
25752: LD_EXP 47
25756: PUSH
25757: LD_EXP 48
25761: PUSH
25762: LD_EXP 49
25766: PUSH
25767: LD_EXP 50
25771: PUSH
25772: LD_EXP 51
25776: PUSH
25777: LD_EXP 52
25781: PUSH
25782: LD_EXP 53
25786: PUSH
25787: LD_EXP 54
25791: PUSH
25792: LD_EXP 62
25796: PUSH
25797: LD_EXP 63
25801: PUSH
25802: LD_EXP 64
25806: PUSH
25807: LD_EXP 65
25811: PUSH
25812: LD_EXP 67
25816: PUSH
25817: LD_EXP 68
25821: PUSH
25822: LD_EXP 69
25826: PUSH
25827: LD_EXP 72
25831: PUSH
25832: LD_EXP 74
25836: PUSH
25837: LD_EXP 75
25841: PUSH
25842: LD_EXP 76
25846: PUSH
25847: LD_EXP 78
25851: PUSH
25852: LD_EXP 79
25856: PUSH
25857: LD_EXP 82
25861: PUSH
25862: LD_EXP 83
25866: PUSH
25867: LD_EXP 84
25871: PUSH
25872: LD_EXP 85
25876: PUSH
25877: LD_EXP 86
25881: PUSH
25882: LD_EXP 87
25886: PUSH
25887: LD_EXP 88
25891: PUSH
25892: LD_EXP 89
25896: PUSH
25897: LD_EXP 90
25901: PUSH
25902: LD_EXP 55
25906: PUSH
25907: LD_EXP 56
25911: PUSH
25912: LD_EXP 59
25916: PUSH
25917: LD_EXP 60
25921: PUSH
25922: LD_EXP 61
25926: PUSH
25927: LD_EXP 57
25931: PUSH
25932: LD_EXP 58
25936: PUSH
25937: LD_EXP 66
25941: PUSH
25942: LD_EXP 70
25946: PUSH
25947: LD_EXP 71
25951: PUSH
25952: LD_EXP 73
25956: PUSH
25957: LD_EXP 77
25961: PUSH
25962: LD_EXP 80
25966: PUSH
25967: LD_EXP 81
25971: PUSH
25972: LD_EXP 91
25976: PUSH
25977: LD_EXP 92
25981: PUSH
25982: LD_EXP 93
25986: PUSH
25987: LD_EXP 94
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: ST_TO_ADDR
// tmp :=  ;
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_STRING 
26055: ST_TO_ADDR
// for i = 1 to normalCounter do
26056: LD_ADDR_VAR 0 8
26060: PUSH
26061: DOUBLE
26062: LD_INT 1
26064: DEC
26065: ST_TO_ADDR
26066: LD_EXP 39
26070: PUSH
26071: FOR_TO
26072: IFFALSE 26108
// begin if flags [ i ] then
26074: LD_VAR 0 4
26078: PUSH
26079: LD_VAR 0 8
26083: ARRAY
26084: IFFALSE 26106
// tmp := tmp & i & ; ;
26086: LD_ADDR_VAR 0 3
26090: PUSH
26091: LD_VAR 0 3
26095: PUSH
26096: LD_VAR 0 8
26100: STR
26101: PUSH
26102: LD_STRING ;
26104: STR
26105: ST_TO_ADDR
// end ;
26106: GO 26071
26108: POP
26109: POP
// for i = 1 to hardcoreCounter do
26110: LD_ADDR_VAR 0 8
26114: PUSH
26115: DOUBLE
26116: LD_INT 1
26118: DEC
26119: ST_TO_ADDR
26120: LD_EXP 40
26124: PUSH
26125: FOR_TO
26126: IFFALSE 26172
// begin if flags [ normalCounter + i ] then
26128: LD_VAR 0 4
26132: PUSH
26133: LD_EXP 39
26137: PUSH
26138: LD_VAR 0 8
26142: PLUS
26143: ARRAY
26144: IFFALSE 26170
// tmp := tmp & ( 100 + i ) & ; ;
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_VAR 0 3
26155: PUSH
26156: LD_INT 100
26158: PUSH
26159: LD_VAR 0 8
26163: PLUS
26164: STR
26165: PUSH
26166: LD_STRING ;
26168: STR
26169: ST_TO_ADDR
// end ;
26170: GO 26125
26172: POP
26173: POP
// if tmp then
26174: LD_VAR 0 3
26178: IFFALSE 26190
// active := tmp ;
26180: LD_ADDR_VAR 0 7
26184: PUSH
26185: LD_VAR 0 3
26189: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26190: LD_STRING getStreamItemsFromMission("
26192: PUSH
26193: LD_VAR 0 5
26197: STR
26198: PUSH
26199: LD_STRING ","
26201: STR
26202: PUSH
26203: LD_VAR 0 6
26207: STR
26208: PUSH
26209: LD_STRING ","
26211: STR
26212: PUSH
26213: LD_VAR 0 7
26217: STR
26218: PUSH
26219: LD_STRING ")
26221: STR
26222: PPUSH
26223: CALL_OW 559
// end else
26227: GO 26236
// ToLua ( getStreamItemsFromMission("","","") ) ;
26229: LD_STRING getStreamItemsFromMission("","","")
26231: PPUSH
26232: CALL_OW 559
// end ;
26236: LD_VAR 0 2
26240: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26241: LD_EXP 38
26245: PUSH
26246: LD_EXP 43
26250: AND
26251: IFFALSE 26375
26253: GO 26255
26255: DISABLE
26256: LD_INT 0
26258: PPUSH
26259: PPUSH
// begin enable ;
26260: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26261: LD_ADDR_VAR 0 2
26265: PUSH
26266: LD_INT 22
26268: PUSH
26269: LD_OWVAR 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: LD_INT 34
26283: PUSH
26284: LD_INT 7
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 34
26293: PUSH
26294: LD_INT 45
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 34
26303: PUSH
26304: LD_INT 28
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 34
26313: PUSH
26314: LD_INT 47
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 69
26336: ST_TO_ADDR
// if not tmp then
26337: LD_VAR 0 2
26341: NOT
26342: IFFALSE 26346
// exit ;
26344: GO 26375
// for i in tmp do
26346: LD_ADDR_VAR 0 1
26350: PUSH
26351: LD_VAR 0 2
26355: PUSH
26356: FOR_IN
26357: IFFALSE 26373
// begin SetLives ( i , 0 ) ;
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_INT 0
26366: PPUSH
26367: CALL_OW 234
// end ;
26371: GO 26356
26373: POP
26374: POP
// end ;
26375: PPOPN 2
26377: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26378: LD_EXP 38
26382: PUSH
26383: LD_EXP 44
26387: AND
26388: IFFALSE 26472
26390: GO 26392
26392: DISABLE
26393: LD_INT 0
26395: PPUSH
26396: PPUSH
// begin enable ;
26397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26398: LD_ADDR_VAR 0 2
26402: PUSH
26403: LD_INT 22
26405: PUSH
26406: LD_OWVAR 2
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 32
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PPUSH
26429: CALL_OW 69
26433: ST_TO_ADDR
// if not tmp then
26434: LD_VAR 0 2
26438: NOT
26439: IFFALSE 26443
// exit ;
26441: GO 26472
// for i in tmp do
26443: LD_ADDR_VAR 0 1
26447: PUSH
26448: LD_VAR 0 2
26452: PUSH
26453: FOR_IN
26454: IFFALSE 26470
// begin SetLives ( i , 0 ) ;
26456: LD_VAR 0 1
26460: PPUSH
26461: LD_INT 0
26463: PPUSH
26464: CALL_OW 234
// end ;
26468: GO 26453
26470: POP
26471: POP
// end ;
26472: PPOPN 2
26474: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26475: LD_EXP 38
26479: PUSH
26480: LD_EXP 41
26484: AND
26485: IFFALSE 26578
26487: GO 26489
26489: DISABLE
26490: LD_INT 0
26492: PPUSH
// begin enable ;
26493: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_INT 22
26501: PUSH
26502: LD_OWVAR 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 25
26516: PUSH
26517: LD_INT 5
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 25
26526: PUSH
26527: LD_INT 9
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 25
26536: PUSH
26537: LD_INT 8
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PPUSH
26554: CALL_OW 69
26558: PUSH
26559: FOR_IN
26560: IFFALSE 26576
// begin SetClass ( i , 1 ) ;
26562: LD_VAR 0 1
26566: PPUSH
26567: LD_INT 1
26569: PPUSH
26570: CALL_OW 336
// end ;
26574: GO 26559
26576: POP
26577: POP
// end ;
26578: PPOPN 1
26580: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26581: LD_EXP 38
26585: PUSH
26586: LD_EXP 42
26590: AND
26591: PUSH
26592: LD_OWVAR 65
26596: PUSH
26597: LD_INT 7
26599: LESS
26600: AND
26601: IFFALSE 26615
26603: GO 26605
26605: DISABLE
// begin enable ;
26606: ENABLE
// game_speed := 7 ;
26607: LD_ADDR_OWVAR 65
26611: PUSH
26612: LD_INT 7
26614: ST_TO_ADDR
// end ;
26615: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26616: LD_EXP 38
26620: PUSH
26621: LD_EXP 45
26625: AND
26626: IFFALSE 26828
26628: GO 26630
26630: DISABLE
26631: LD_INT 0
26633: PPUSH
26634: PPUSH
26635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 81
26643: PUSH
26644: LD_OWVAR 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 21
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// if not tmp then
26672: LD_VAR 0 3
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26828
// if tmp > 5 then
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 5
26688: GREATER
26689: IFFALSE 26701
// k := 5 else
26691: LD_ADDR_VAR 0 2
26695: PUSH
26696: LD_INT 5
26698: ST_TO_ADDR
26699: GO 26711
// k := tmp ;
26701: LD_ADDR_VAR 0 2
26705: PUSH
26706: LD_VAR 0 3
26710: ST_TO_ADDR
// for i := 1 to k do
26711: LD_ADDR_VAR 0 1
26715: PUSH
26716: DOUBLE
26717: LD_INT 1
26719: DEC
26720: ST_TO_ADDR
26721: LD_VAR 0 2
26725: PUSH
26726: FOR_TO
26727: IFFALSE 26826
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PPUSH
26740: LD_VAR 0 1
26744: PUSH
26745: LD_INT 4
26747: MOD
26748: PUSH
26749: LD_INT 1
26751: PLUS
26752: PPUSH
26753: CALL_OW 259
26757: PUSH
26758: LD_INT 10
26760: LESS
26761: IFFALSE 26824
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26763: LD_VAR 0 3
26767: PUSH
26768: LD_VAR 0 1
26772: ARRAY
26773: PPUSH
26774: LD_VAR 0 1
26778: PUSH
26779: LD_INT 4
26781: MOD
26782: PUSH
26783: LD_INT 1
26785: PLUS
26786: PPUSH
26787: LD_VAR 0 3
26791: PUSH
26792: LD_VAR 0 1
26796: ARRAY
26797: PPUSH
26798: LD_VAR 0 1
26802: PUSH
26803: LD_INT 4
26805: MOD
26806: PUSH
26807: LD_INT 1
26809: PLUS
26810: PPUSH
26811: CALL_OW 259
26815: PUSH
26816: LD_INT 1
26818: PLUS
26819: PPUSH
26820: CALL_OW 237
26824: GO 26726
26826: POP
26827: POP
// end ;
26828: PPOPN 3
26830: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26831: LD_EXP 38
26835: PUSH
26836: LD_EXP 46
26840: AND
26841: IFFALSE 26861
26843: GO 26845
26845: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26846: LD_INT 4
26848: PPUSH
26849: LD_OWVAR 2
26853: PPUSH
26854: LD_INT 0
26856: PPUSH
26857: CALL_OW 324
26861: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26862: LD_EXP 38
26866: PUSH
26867: LD_EXP 75
26871: AND
26872: IFFALSE 26892
26874: GO 26876
26876: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26877: LD_INT 19
26879: PPUSH
26880: LD_OWVAR 2
26884: PPUSH
26885: LD_INT 0
26887: PPUSH
26888: CALL_OW 324
26892: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26893: LD_EXP 38
26897: PUSH
26898: LD_EXP 47
26902: AND
26903: IFFALSE 27005
26905: GO 26907
26907: DISABLE
26908: LD_INT 0
26910: PPUSH
26911: PPUSH
// begin enable ;
26912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26913: LD_ADDR_VAR 0 2
26917: PUSH
26918: LD_INT 22
26920: PUSH
26921: LD_OWVAR 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: LD_INT 34
26935: PUSH
26936: LD_INT 11
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 34
26945: PUSH
26946: LD_INT 30
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 69
26966: ST_TO_ADDR
// if not tmp then
26967: LD_VAR 0 2
26971: NOT
26972: IFFALSE 26976
// exit ;
26974: GO 27005
// for i in tmp do
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: FOR_IN
26987: IFFALSE 27003
// begin SetLives ( i , 0 ) ;
26989: LD_VAR 0 1
26993: PPUSH
26994: LD_INT 0
26996: PPUSH
26997: CALL_OW 234
// end ;
27001: GO 26986
27003: POP
27004: POP
// end ;
27005: PPOPN 2
27007: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27008: LD_EXP 38
27012: PUSH
27013: LD_EXP 48
27017: AND
27018: IFFALSE 27038
27020: GO 27022
27022: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27023: LD_INT 32
27025: PPUSH
27026: LD_OWVAR 2
27030: PPUSH
27031: LD_INT 0
27033: PPUSH
27034: CALL_OW 324
27038: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27039: LD_EXP 38
27043: PUSH
27044: LD_EXP 49
27048: AND
27049: IFFALSE 27230
27051: GO 27053
27053: DISABLE
27054: LD_INT 0
27056: PPUSH
27057: PPUSH
27058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27059: LD_ADDR_VAR 0 2
27063: PUSH
27064: LD_INT 22
27066: PUSH
27067: LD_OWVAR 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 33
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 2
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27230
// side := 0 ;
27104: LD_ADDR_VAR 0 3
27108: PUSH
27109: LD_INT 0
27111: ST_TO_ADDR
// for i := 1 to 8 do
27112: LD_ADDR_VAR 0 1
27116: PUSH
27117: DOUBLE
27118: LD_INT 1
27120: DEC
27121: ST_TO_ADDR
27122: LD_INT 8
27124: PUSH
27125: FOR_TO
27126: IFFALSE 27174
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27128: LD_OWVAR 2
27132: PUSH
27133: LD_VAR 0 1
27137: NONEQUAL
27138: PUSH
27139: LD_OWVAR 2
27143: PPUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 81
27153: PUSH
27154: LD_INT 2
27156: EQUAL
27157: AND
27158: IFFALSE 27172
// begin side := i ;
27160: LD_ADDR_VAR 0 3
27164: PUSH
27165: LD_VAR 0 1
27169: ST_TO_ADDR
// break ;
27170: GO 27174
// end ;
27172: GO 27125
27174: POP
27175: POP
// if not side then
27176: LD_VAR 0 3
27180: NOT
27181: IFFALSE 27185
// exit ;
27183: GO 27230
// for i := 1 to tmp do
27185: LD_ADDR_VAR 0 1
27189: PUSH
27190: DOUBLE
27191: LD_INT 1
27193: DEC
27194: ST_TO_ADDR
27195: LD_VAR 0 2
27199: PUSH
27200: FOR_TO
27201: IFFALSE 27228
// if Prob ( 60 ) then
27203: LD_INT 60
27205: PPUSH
27206: CALL_OW 13
27210: IFFALSE 27226
// SetSide ( i , side ) ;
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_VAR 0 3
27221: PPUSH
27222: CALL_OW 235
27226: GO 27200
27228: POP
27229: POP
// end ;
27230: PPOPN 3
27232: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27233: LD_EXP 38
27237: PUSH
27238: LD_EXP 51
27242: AND
27243: IFFALSE 27362
27245: GO 27247
27247: DISABLE
27248: LD_INT 0
27250: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27251: LD_ADDR_VAR 0 1
27255: PUSH
27256: LD_INT 22
27258: PUSH
27259: LD_OWVAR 2
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 21
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: LD_INT 23
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: CALL_OW 69
27304: PUSH
27305: FOR_IN
27306: IFFALSE 27360
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL_OW 257
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: LD_INT 4
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: IN
27336: IFFALSE 27358
// SetClass ( un , rand ( 1 , 4 ) ) ;
27338: LD_VAR 0 1
27342: PPUSH
27343: LD_INT 1
27345: PPUSH
27346: LD_INT 4
27348: PPUSH
27349: CALL_OW 12
27353: PPUSH
27354: CALL_OW 336
27358: GO 27305
27360: POP
27361: POP
// end ;
27362: PPOPN 1
27364: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27365: LD_EXP 38
27369: PUSH
27370: LD_EXP 50
27374: AND
27375: IFFALSE 27454
27377: GO 27379
27379: DISABLE
27380: LD_INT 0
27382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27383: LD_ADDR_VAR 0 1
27387: PUSH
27388: LD_INT 22
27390: PUSH
27391: LD_OWVAR 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 21
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PPUSH
27414: CALL_OW 69
27418: ST_TO_ADDR
// if not tmp then
27419: LD_VAR 0 1
27423: NOT
27424: IFFALSE 27428
// exit ;
27426: GO 27454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27428: LD_VAR 0 1
27432: PUSH
27433: LD_INT 1
27435: PPUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 12
27445: ARRAY
27446: PPUSH
27447: LD_INT 100
27449: PPUSH
27450: CALL_OW 234
// end ;
27454: PPOPN 1
27456: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27457: LD_EXP 38
27461: PUSH
27462: LD_EXP 52
27466: AND
27467: IFFALSE 27565
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27475: LD_ADDR_VAR 0 1
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_OWVAR 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 21
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL_OW 69
27510: ST_TO_ADDR
// if not tmp then
27511: LD_VAR 0 1
27515: NOT
27516: IFFALSE 27520
// exit ;
27518: GO 27565
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27520: LD_VAR 0 1
27524: PUSH
27525: LD_INT 1
27527: PPUSH
27528: LD_VAR 0 1
27532: PPUSH
27533: CALL_OW 12
27537: ARRAY
27538: PPUSH
27539: LD_INT 1
27541: PPUSH
27542: LD_INT 4
27544: PPUSH
27545: CALL_OW 12
27549: PPUSH
27550: LD_INT 3000
27552: PPUSH
27553: LD_INT 9000
27555: PPUSH
27556: CALL_OW 12
27560: PPUSH
27561: CALL_OW 492
// end ;
27565: PPOPN 1
27567: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27568: LD_EXP 38
27572: PUSH
27573: LD_EXP 53
27577: AND
27578: IFFALSE 27598
27580: GO 27582
27582: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27583: LD_INT 1
27585: PPUSH
27586: LD_OWVAR 2
27590: PPUSH
27591: LD_INT 0
27593: PPUSH
27594: CALL_OW 324
27598: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27599: LD_EXP 38
27603: PUSH
27604: LD_EXP 54
27608: AND
27609: IFFALSE 27692
27611: GO 27613
27613: DISABLE
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27618: LD_ADDR_VAR 0 2
27622: PUSH
27623: LD_INT 22
27625: PUSH
27626: LD_OWVAR 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 21
27637: PUSH
27638: LD_INT 3
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PPUSH
27649: CALL_OW 69
27653: ST_TO_ADDR
// if not tmp then
27654: LD_VAR 0 2
27658: NOT
27659: IFFALSE 27663
// exit ;
27661: GO 27692
// for i in tmp do
27663: LD_ADDR_VAR 0 1
27667: PUSH
27668: LD_VAR 0 2
27672: PUSH
27673: FOR_IN
27674: IFFALSE 27690
// SetBLevel ( i , 10 ) ;
27676: LD_VAR 0 1
27680: PPUSH
27681: LD_INT 10
27683: PPUSH
27684: CALL_OW 241
27688: GO 27673
27690: POP
27691: POP
// end ;
27692: PPOPN 2
27694: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27695: LD_EXP 38
27699: PUSH
27700: LD_EXP 55
27704: AND
27705: IFFALSE 27816
27707: GO 27709
27709: DISABLE
27710: LD_INT 0
27712: PPUSH
27713: PPUSH
27714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27715: LD_ADDR_VAR 0 3
27719: PUSH
27720: LD_INT 22
27722: PUSH
27723: LD_OWVAR 2
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 25
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PPUSH
27746: CALL_OW 69
27750: ST_TO_ADDR
// if not tmp then
27751: LD_VAR 0 3
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27816
// un := tmp [ rand ( 1 , tmp ) ] ;
27760: LD_ADDR_VAR 0 2
27764: PUSH
27765: LD_VAR 0 3
27769: PUSH
27770: LD_INT 1
27772: PPUSH
27773: LD_VAR 0 3
27777: PPUSH
27778: CALL_OW 12
27782: ARRAY
27783: ST_TO_ADDR
// if Crawls ( un ) then
27784: LD_VAR 0 2
27788: PPUSH
27789: CALL_OW 318
27793: IFFALSE 27804
// ComWalk ( un ) ;
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27804: LD_VAR 0 2
27808: PPUSH
27809: LD_INT 5
27811: PPUSH
27812: CALL_OW 336
// end ;
27816: PPOPN 3
27818: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27819: LD_EXP 38
27823: PUSH
27824: LD_EXP 56
27828: AND
27829: PUSH
27830: LD_OWVAR 67
27834: PUSH
27835: LD_INT 4
27837: LESS
27838: AND
27839: IFFALSE 27858
27841: GO 27843
27843: DISABLE
// begin Difficulty := Difficulty + 1 ;
27844: LD_ADDR_OWVAR 67
27848: PUSH
27849: LD_OWVAR 67
27853: PUSH
27854: LD_INT 1
27856: PLUS
27857: ST_TO_ADDR
// end ;
27858: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27859: LD_EXP 38
27863: PUSH
27864: LD_EXP 57
27868: AND
27869: IFFALSE 27972
27871: GO 27873
27873: DISABLE
27874: LD_INT 0
27876: PPUSH
// begin for i := 1 to 5 do
27877: LD_ADDR_VAR 0 1
27881: PUSH
27882: DOUBLE
27883: LD_INT 1
27885: DEC
27886: ST_TO_ADDR
27887: LD_INT 5
27889: PUSH
27890: FOR_TO
27891: IFFALSE 27970
// begin uc_nation := nation_nature ;
27893: LD_ADDR_OWVAR 21
27897: PUSH
27898: LD_INT 0
27900: ST_TO_ADDR
// uc_side := 0 ;
27901: LD_ADDR_OWVAR 20
27905: PUSH
27906: LD_INT 0
27908: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27909: LD_ADDR_OWVAR 29
27913: PUSH
27914: LD_INT 12
27916: PUSH
27917: LD_INT 12
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// hc_agressivity := 20 ;
27924: LD_ADDR_OWVAR 35
27928: PUSH
27929: LD_INT 20
27931: ST_TO_ADDR
// hc_class := class_tiger ;
27932: LD_ADDR_OWVAR 28
27936: PUSH
27937: LD_INT 14
27939: ST_TO_ADDR
// hc_gallery :=  ;
27940: LD_ADDR_OWVAR 33
27944: PUSH
27945: LD_STRING 
27947: ST_TO_ADDR
// hc_name :=  ;
27948: LD_ADDR_OWVAR 26
27952: PUSH
27953: LD_STRING 
27955: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27956: CALL_OW 44
27960: PPUSH
27961: LD_INT 0
27963: PPUSH
27964: CALL_OW 51
// end ;
27968: GO 27890
27970: POP
27971: POP
// end ;
27972: PPOPN 1
27974: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27975: LD_EXP 38
27979: PUSH
27980: LD_EXP 58
27984: AND
27985: IFFALSE 27994
27987: GO 27989
27989: DISABLE
// StreamSibBomb ;
27990: CALL 27995 0 0
27994: END
// export function StreamSibBomb ; var i , x , y ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
27999: PPUSH
28000: PPUSH
// result := false ;
28001: LD_ADDR_VAR 0 1
28005: PUSH
28006: LD_INT 0
28008: ST_TO_ADDR
// for i := 1 to 16 do
28009: LD_ADDR_VAR 0 2
28013: PUSH
28014: DOUBLE
28015: LD_INT 1
28017: DEC
28018: ST_TO_ADDR
28019: LD_INT 16
28021: PUSH
28022: FOR_TO
28023: IFFALSE 28222
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28025: LD_ADDR_VAR 0 3
28029: PUSH
28030: LD_INT 10
28032: PUSH
28033: LD_INT 20
28035: PUSH
28036: LD_INT 30
28038: PUSH
28039: LD_INT 40
28041: PUSH
28042: LD_INT 50
28044: PUSH
28045: LD_INT 60
28047: PUSH
28048: LD_INT 70
28050: PUSH
28051: LD_INT 80
28053: PUSH
28054: LD_INT 90
28056: PUSH
28057: LD_INT 100
28059: PUSH
28060: LD_INT 110
28062: PUSH
28063: LD_INT 120
28065: PUSH
28066: LD_INT 130
28068: PUSH
28069: LD_INT 140
28071: PUSH
28072: LD_INT 150
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_INT 15
28097: PPUSH
28098: CALL_OW 12
28102: ARRAY
28103: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28104: LD_ADDR_VAR 0 4
28108: PUSH
28109: LD_INT 10
28111: PUSH
28112: LD_INT 20
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: LD_INT 40
28120: PUSH
28121: LD_INT 50
28123: PUSH
28124: LD_INT 60
28126: PUSH
28127: LD_INT 70
28129: PUSH
28130: LD_INT 80
28132: PUSH
28133: LD_INT 90
28135: PUSH
28136: LD_INT 100
28138: PUSH
28139: LD_INT 110
28141: PUSH
28142: LD_INT 120
28144: PUSH
28145: LD_INT 130
28147: PUSH
28148: LD_INT 140
28150: PUSH
28151: LD_INT 150
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: PPUSH
28174: LD_INT 15
28176: PPUSH
28177: CALL_OW 12
28181: ARRAY
28182: ST_TO_ADDR
// if ValidHex ( x , y ) then
28183: LD_VAR 0 3
28187: PPUSH
28188: LD_VAR 0 4
28192: PPUSH
28193: CALL_OW 488
28197: IFFALSE 28220
// begin result := [ x , y ] ;
28199: LD_ADDR_VAR 0 1
28203: PUSH
28204: LD_VAR 0 3
28208: PUSH
28209: LD_VAR 0 4
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// break ;
28218: GO 28222
// end ; end ;
28220: GO 28022
28222: POP
28223: POP
// if result then
28224: LD_VAR 0 1
28228: IFFALSE 28288
// begin ToLua ( playSibBomb() ) ;
28230: LD_STRING playSibBomb()
28232: PPUSH
28233: CALL_OW 559
// wait ( 0 0$14 ) ;
28237: LD_INT 490
28239: PPUSH
28240: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28244: LD_VAR 0 1
28248: PUSH
28249: LD_INT 1
28251: ARRAY
28252: PPUSH
28253: LD_VAR 0 1
28257: PUSH
28258: LD_INT 2
28260: ARRAY
28261: PPUSH
28262: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 1
28273: ARRAY
28274: PPUSH
28275: LD_VAR 0 1
28279: PUSH
28280: LD_INT 2
28282: ARRAY
28283: PPUSH
28284: CALL_OW 429
// end ; end ;
28288: LD_VAR 0 1
28292: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28293: LD_EXP 38
28297: PUSH
28298: LD_EXP 60
28302: AND
28303: IFFALSE 28315
28305: GO 28307
28307: DISABLE
// YouLost (  ) ;
28308: LD_STRING 
28310: PPUSH
28311: CALL_OW 104
28315: END
// every 0 0$1 trigger StreamModeActive and sFog do
28316: LD_EXP 38
28320: PUSH
28321: LD_EXP 59
28325: AND
28326: IFFALSE 28340
28328: GO 28330
28330: DISABLE
// FogOff ( your_side ) ;
28331: LD_OWVAR 2
28335: PPUSH
28336: CALL_OW 344
28340: END
// every 0 0$1 trigger StreamModeActive and sSun do
28341: LD_EXP 38
28345: PUSH
28346: LD_EXP 61
28350: AND
28351: IFFALSE 28379
28353: GO 28355
28355: DISABLE
// begin solar_recharge_percent := 0 ;
28356: LD_ADDR_OWVAR 79
28360: PUSH
28361: LD_INT 0
28363: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28364: LD_INT 10500
28366: PPUSH
28367: CALL_OW 67
// solar_recharge_percent := 100 ;
28371: LD_ADDR_OWVAR 79
28375: PUSH
28376: LD_INT 100
28378: ST_TO_ADDR
// end ;
28379: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28380: LD_EXP 38
28384: PUSH
28385: LD_EXP 62
28389: AND
28390: IFFALSE 28629
28392: GO 28394
28394: DISABLE
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
28399: PPUSH
// begin tmp := [ ] ;
28400: LD_ADDR_VAR 0 3
28404: PUSH
28405: EMPTY
28406: ST_TO_ADDR
// for i := 1 to 6 do
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: DOUBLE
28413: LD_INT 1
28415: DEC
28416: ST_TO_ADDR
28417: LD_INT 6
28419: PUSH
28420: FOR_TO
28421: IFFALSE 28526
// begin uc_nation := nation_nature ;
28423: LD_ADDR_OWVAR 21
28427: PUSH
28428: LD_INT 0
28430: ST_TO_ADDR
// uc_side := 0 ;
28431: LD_ADDR_OWVAR 20
28435: PUSH
28436: LD_INT 0
28438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28439: LD_ADDR_OWVAR 29
28443: PUSH
28444: LD_INT 12
28446: PUSH
28447: LD_INT 12
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// hc_agressivity := 20 ;
28454: LD_ADDR_OWVAR 35
28458: PUSH
28459: LD_INT 20
28461: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28462: LD_ADDR_OWVAR 28
28466: PUSH
28467: LD_INT 17
28469: ST_TO_ADDR
// hc_gallery :=  ;
28470: LD_ADDR_OWVAR 33
28474: PUSH
28475: LD_STRING 
28477: ST_TO_ADDR
// hc_name :=  ;
28478: LD_ADDR_OWVAR 26
28482: PUSH
28483: LD_STRING 
28485: ST_TO_ADDR
// un := CreateHuman ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: CALL_OW 44
28495: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28496: LD_VAR 0 2
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: CALL_OW 51
// tmp := tmp ^ un ;
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_VAR 0 3
28517: PUSH
28518: LD_VAR 0 2
28522: ADD
28523: ST_TO_ADDR
// end ;
28524: GO 28420
28526: POP
28527: POP
// repeat wait ( 0 0$1 ) ;
28528: LD_INT 35
28530: PPUSH
28531: CALL_OW 67
// for un in tmp do
28535: LD_ADDR_VAR 0 2
28539: PUSH
28540: LD_VAR 0 3
28544: PUSH
28545: FOR_IN
28546: IFFALSE 28620
// begin if IsDead ( un ) then
28548: LD_VAR 0 2
28552: PPUSH
28553: CALL_OW 301
28557: IFFALSE 28577
// begin tmp := tmp diff un ;
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_VAR 0 3
28568: PUSH
28569: LD_VAR 0 2
28573: DIFF
28574: ST_TO_ADDR
// continue ;
28575: GO 28545
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_INT 3
28584: PUSH
28585: LD_INT 22
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 74
28613: PPUSH
28614: CALL_OW 115
// end ;
28618: GO 28545
28620: POP
28621: POP
// until not tmp ;
28622: LD_VAR 0 3
28626: NOT
28627: IFFALSE 28528
// end ;
28629: PPOPN 3
28631: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28632: LD_EXP 38
28636: PUSH
28637: LD_EXP 63
28641: AND
28642: IFFALSE 28696
28644: GO 28646
28646: DISABLE
// begin ToLua ( displayTroll(); ) ;
28647: LD_STRING displayTroll();
28649: PPUSH
28650: CALL_OW 559
// wait ( 3 3$00 ) ;
28654: LD_INT 6300
28656: PPUSH
28657: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28661: LD_STRING hideTroll();
28663: PPUSH
28664: CALL_OW 559
// wait ( 1 1$00 ) ;
28668: LD_INT 2100
28670: PPUSH
28671: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28675: LD_STRING displayTroll();
28677: PPUSH
28678: CALL_OW 559
// wait ( 1 1$00 ) ;
28682: LD_INT 2100
28684: PPUSH
28685: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28689: LD_STRING hideTroll();
28691: PPUSH
28692: CALL_OW 559
// end ;
28696: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28697: LD_EXP 38
28701: PUSH
28702: LD_EXP 64
28706: AND
28707: IFFALSE 28770
28709: GO 28711
28711: DISABLE
28712: LD_INT 0
28714: PPUSH
// begin p := 0 ;
28715: LD_ADDR_VAR 0 1
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
// repeat game_speed := 1 ;
28723: LD_ADDR_OWVAR 65
28727: PUSH
28728: LD_INT 1
28730: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28731: LD_INT 35
28733: PPUSH
28734: CALL_OW 67
// p := p + 1 ;
28738: LD_ADDR_VAR 0 1
28742: PUSH
28743: LD_VAR 0 1
28747: PUSH
28748: LD_INT 1
28750: PLUS
28751: ST_TO_ADDR
// until p >= 60 ;
28752: LD_VAR 0 1
28756: PUSH
28757: LD_INT 60
28759: GREATEREQUAL
28760: IFFALSE 28723
// game_speed := 4 ;
28762: LD_ADDR_OWVAR 65
28766: PUSH
28767: LD_INT 4
28769: ST_TO_ADDR
// end ;
28770: PPOPN 1
28772: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28773: LD_EXP 38
28777: PUSH
28778: LD_EXP 65
28782: AND
28783: IFFALSE 28929
28785: GO 28787
28787: DISABLE
28788: LD_INT 0
28790: PPUSH
28791: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28792: LD_ADDR_VAR 0 1
28796: PUSH
28797: LD_INT 22
28799: PUSH
28800: LD_OWVAR 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 30
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 30
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PPUSH
28841: CALL_OW 69
28845: ST_TO_ADDR
// if not depot then
28846: LD_VAR 0 1
28850: NOT
28851: IFFALSE 28855
// exit ;
28853: GO 28929
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28855: LD_ADDR_VAR 0 2
28859: PUSH
28860: LD_VAR 0 1
28864: PUSH
28865: LD_INT 1
28867: PPUSH
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 12
28877: ARRAY
28878: PPUSH
28879: CALL_OW 274
28883: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28884: LD_VAR 0 2
28888: PPUSH
28889: LD_INT 1
28891: PPUSH
28892: LD_INT 0
28894: PPUSH
28895: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28899: LD_VAR 0 2
28903: PPUSH
28904: LD_INT 2
28906: PPUSH
28907: LD_INT 0
28909: PPUSH
28910: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28914: LD_VAR 0 2
28918: PPUSH
28919: LD_INT 3
28921: PPUSH
28922: LD_INT 0
28924: PPUSH
28925: CALL_OW 277
// end ;
28929: PPOPN 2
28931: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28932: LD_EXP 38
28936: PUSH
28937: LD_EXP 66
28941: AND
28942: IFFALSE 29039
28944: GO 28946
28946: DISABLE
28947: LD_INT 0
28949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28950: LD_ADDR_VAR 0 1
28954: PUSH
28955: LD_INT 22
28957: PUSH
28958: LD_OWVAR 2
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 21
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 23
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: LIST
28998: PPUSH
28999: CALL_OW 69
29003: ST_TO_ADDR
// if not tmp then
29004: LD_VAR 0 1
29008: NOT
29009: IFFALSE 29013
// exit ;
29011: GO 29039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29013: LD_VAR 0 1
29017: PUSH
29018: LD_INT 1
29020: PPUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 12
29030: ARRAY
29031: PPUSH
29032: LD_INT 200
29034: PPUSH
29035: CALL_OW 234
// end ;
29039: PPOPN 1
29041: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29042: LD_EXP 38
29046: PUSH
29047: LD_EXP 67
29051: AND
29052: IFFALSE 29131
29054: GO 29056
29056: DISABLE
29057: LD_INT 0
29059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29060: LD_ADDR_VAR 0 1
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_OWVAR 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 21
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 1
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29105: LD_VAR 0 1
29109: PUSH
29110: LD_INT 1
29112: PPUSH
29113: LD_VAR 0 1
29117: PPUSH
29118: CALL_OW 12
29122: ARRAY
29123: PPUSH
29124: LD_INT 60
29126: PPUSH
29127: CALL_OW 234
// end ;
29131: PPOPN 1
29133: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29134: LD_EXP 38
29138: PUSH
29139: LD_EXP 68
29143: AND
29144: IFFALSE 29243
29146: GO 29148
29148: DISABLE
29149: LD_INT 0
29151: PPUSH
29152: PPUSH
// begin enable ;
29153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29154: LD_ADDR_VAR 0 1
29158: PUSH
29159: LD_INT 22
29161: PUSH
29162: LD_OWVAR 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 61
29173: PUSH
29174: EMPTY
29175: LIST
29176: PUSH
29177: LD_INT 33
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: PPUSH
29192: CALL_OW 69
29196: ST_TO_ADDR
// if not tmp then
29197: LD_VAR 0 1
29201: NOT
29202: IFFALSE 29206
// exit ;
29204: GO 29243
// for i in tmp do
29206: LD_ADDR_VAR 0 2
29210: PUSH
29211: LD_VAR 0 1
29215: PUSH
29216: FOR_IN
29217: IFFALSE 29241
// if IsControledBy ( i ) then
29219: LD_VAR 0 2
29223: PPUSH
29224: CALL_OW 312
29228: IFFALSE 29239
// ComUnlink ( i ) ;
29230: LD_VAR 0 2
29234: PPUSH
29235: CALL_OW 136
29239: GO 29216
29241: POP
29242: POP
// end ;
29243: PPOPN 2
29245: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29246: LD_EXP 38
29250: PUSH
29251: LD_EXP 69
29255: AND
29256: IFFALSE 29396
29258: GO 29260
29260: DISABLE
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
// begin ToLua ( displayPowell(); ) ;
29265: LD_STRING displayPowell();
29267: PPUSH
29268: CALL_OW 559
// uc_side := 0 ;
29272: LD_ADDR_OWVAR 20
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// uc_nation := 2 ;
29280: LD_ADDR_OWVAR 21
29284: PUSH
29285: LD_INT 2
29287: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29288: LD_ADDR_OWVAR 37
29292: PUSH
29293: LD_INT 14
29295: ST_TO_ADDR
// vc_engine := engine_siberite ;
29296: LD_ADDR_OWVAR 39
29300: PUSH
29301: LD_INT 3
29303: ST_TO_ADDR
// vc_control := control_apeman ;
29304: LD_ADDR_OWVAR 38
29308: PUSH
29309: LD_INT 5
29311: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29312: LD_ADDR_OWVAR 40
29316: PUSH
29317: LD_INT 29
29319: ST_TO_ADDR
// un := CreateVehicle ;
29320: LD_ADDR_VAR 0 2
29324: PUSH
29325: CALL_OW 45
29329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_INT 1
29337: PPUSH
29338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29342: LD_INT 35
29344: PPUSH
29345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29349: LD_VAR 0 2
29353: PPUSH
29354: LD_INT 22
29356: PUSH
29357: LD_OWVAR 2
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PPUSH
29366: CALL_OW 69
29370: PPUSH
29371: LD_VAR 0 2
29375: PPUSH
29376: CALL_OW 74
29380: PPUSH
29381: CALL_OW 115
// until IsDead ( un ) ;
29385: LD_VAR 0 2
29389: PPUSH
29390: CALL_OW 301
29394: IFFALSE 29342
// end ;
29396: PPOPN 2
29398: END
// every 0 0$1 trigger StreamModeActive and sStu do
29399: LD_EXP 38
29403: PUSH
29404: LD_EXP 77
29408: AND
29409: IFFALSE 29425
29411: GO 29413
29413: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29414: LD_STRING displayStucuk();
29416: PPUSH
29417: CALL_OW 559
// ResetFog ;
29421: CALL_OW 335
// end ;
29425: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29426: LD_EXP 38
29430: PUSH
29431: LD_EXP 70
29435: AND
29436: IFFALSE 29577
29438: GO 29440
29440: DISABLE
29441: LD_INT 0
29443: PPUSH
29444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29445: LD_ADDR_VAR 0 2
29449: PUSH
29450: LD_INT 22
29452: PUSH
29453: LD_OWVAR 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 21
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: ST_TO_ADDR
// if not tmp then
29481: LD_VAR 0 2
29485: NOT
29486: IFFALSE 29490
// exit ;
29488: GO 29577
// un := tmp [ rand ( 1 , tmp ) ] ;
29490: LD_ADDR_VAR 0 1
29494: PUSH
29495: LD_VAR 0 2
29499: PUSH
29500: LD_INT 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: CALL_OW 12
29512: ARRAY
29513: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_INT 0
29521: PPUSH
29522: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29526: LD_VAR 0 1
29530: PPUSH
29531: LD_OWVAR 3
29535: PUSH
29536: LD_VAR 0 1
29540: DIFF
29541: PPUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: CALL_OW 74
29551: PPUSH
29552: CALL_OW 115
// wait ( 0 0$20 ) ;
29556: LD_INT 700
29558: PPUSH
29559: CALL_OW 67
// SetSide ( un , your_side ) ;
29563: LD_VAR 0 1
29567: PPUSH
29568: LD_OWVAR 2
29572: PPUSH
29573: CALL_OW 235
// end ;
29577: PPOPN 2
29579: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29580: LD_EXP 38
29584: PUSH
29585: LD_EXP 71
29589: AND
29590: IFFALSE 29696
29592: GO 29594
29594: DISABLE
29595: LD_INT 0
29597: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_OWVAR 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 30
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 30
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ST_TO_ADDR
// if not depot then
29652: LD_VAR 0 1
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29696
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29661: LD_VAR 0 1
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PPUSH
29670: CALL_OW 250
29674: PPUSH
29675: LD_VAR 0 1
29679: PUSH
29680: LD_INT 1
29682: ARRAY
29683: PPUSH
29684: CALL_OW 251
29688: PPUSH
29689: LD_INT 70
29691: PPUSH
29692: CALL_OW 495
// end ;
29696: PPOPN 1
29698: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29699: LD_EXP 38
29703: PUSH
29704: LD_EXP 72
29708: AND
29709: IFFALSE 29920
29711: GO 29713
29713: DISABLE
29714: LD_INT 0
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29721: LD_ADDR_VAR 0 5
29725: PUSH
29726: LD_INT 22
29728: PUSH
29729: LD_OWVAR 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 21
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: ST_TO_ADDR
// if not tmp then
29757: LD_VAR 0 5
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29920
// for i in tmp do
29766: LD_ADDR_VAR 0 1
29770: PUSH
29771: LD_VAR 0 5
29775: PUSH
29776: FOR_IN
29777: IFFALSE 29918
// begin d := rand ( 0 , 5 ) ;
29779: LD_ADDR_VAR 0 4
29783: PUSH
29784: LD_INT 0
29786: PPUSH
29787: LD_INT 5
29789: PPUSH
29790: CALL_OW 12
29794: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29795: LD_ADDR_VAR 0 2
29799: PUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 250
29809: PPUSH
29810: LD_VAR 0 4
29814: PPUSH
29815: LD_INT 3
29817: PPUSH
29818: LD_INT 12
29820: PPUSH
29821: CALL_OW 12
29825: PPUSH
29826: CALL_OW 272
29830: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_VAR 0 1
29840: PPUSH
29841: CALL_OW 251
29845: PPUSH
29846: LD_VAR 0 4
29850: PPUSH
29851: LD_INT 3
29853: PPUSH
29854: LD_INT 12
29856: PPUSH
29857: CALL_OW 12
29861: PPUSH
29862: CALL_OW 273
29866: ST_TO_ADDR
// if ValidHex ( x , y ) then
29867: LD_VAR 0 2
29871: PPUSH
29872: LD_VAR 0 3
29876: PPUSH
29877: CALL_OW 488
29881: IFFALSE 29916
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_VAR 0 2
29892: PPUSH
29893: LD_VAR 0 3
29897: PPUSH
29898: LD_INT 3
29900: PPUSH
29901: LD_INT 6
29903: PPUSH
29904: CALL_OW 12
29908: PPUSH
29909: LD_INT 1
29911: PPUSH
29912: CALL_OW 483
// end ;
29916: GO 29776
29918: POP
29919: POP
// end ;
29920: PPOPN 5
29922: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29923: LD_EXP 38
29927: PUSH
29928: LD_EXP 73
29932: AND
29933: IFFALSE 30027
29935: GO 29937
29937: DISABLE
29938: LD_INT 0
29940: PPUSH
29941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29942: LD_ADDR_VAR 0 2
29946: PUSH
29947: LD_INT 22
29949: PUSH
29950: LD_OWVAR 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 32
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 21
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 69
29988: ST_TO_ADDR
// if not tmp then
29989: LD_VAR 0 2
29993: NOT
29994: IFFALSE 29998
// exit ;
29996: GO 30027
// for i in tmp do
29998: LD_ADDR_VAR 0 1
30002: PUSH
30003: LD_VAR 0 2
30007: PUSH
30008: FOR_IN
30009: IFFALSE 30025
// SetFuel ( i , 0 ) ;
30011: LD_VAR 0 1
30015: PPUSH
30016: LD_INT 0
30018: PPUSH
30019: CALL_OW 240
30023: GO 30008
30025: POP
30026: POP
// end ;
30027: PPOPN 2
30029: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30030: LD_EXP 38
30034: PUSH
30035: LD_EXP 74
30039: AND
30040: IFFALSE 30106
30042: GO 30044
30044: DISABLE
30045: LD_INT 0
30047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30048: LD_ADDR_VAR 0 1
30052: PUSH
30053: LD_INT 22
30055: PUSH
30056: LD_OWVAR 2
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 30
30067: PUSH
30068: LD_INT 29
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PPUSH
30079: CALL_OW 69
30083: ST_TO_ADDR
// if not tmp then
30084: LD_VAR 0 1
30088: NOT
30089: IFFALSE 30093
// exit ;
30091: GO 30106
// DestroyUnit ( tmp [ 1 ] ) ;
30093: LD_VAR 0 1
30097: PUSH
30098: LD_INT 1
30100: ARRAY
30101: PPUSH
30102: CALL_OW 65
// end ;
30106: PPOPN 1
30108: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30109: LD_EXP 38
30113: PUSH
30114: LD_EXP 76
30118: AND
30119: IFFALSE 30248
30121: GO 30123
30123: DISABLE
30124: LD_INT 0
30126: PPUSH
// begin uc_side := 0 ;
30127: LD_ADDR_OWVAR 20
30131: PUSH
30132: LD_INT 0
30134: ST_TO_ADDR
// uc_nation := nation_arabian ;
30135: LD_ADDR_OWVAR 21
30139: PUSH
30140: LD_INT 2
30142: ST_TO_ADDR
// hc_gallery :=  ;
30143: LD_ADDR_OWVAR 33
30147: PUSH
30148: LD_STRING 
30150: ST_TO_ADDR
// hc_name :=  ;
30151: LD_ADDR_OWVAR 26
30155: PUSH
30156: LD_STRING 
30158: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30159: LD_INT 1
30161: PPUSH
30162: LD_INT 11
30164: PPUSH
30165: LD_INT 10
30167: PPUSH
30168: CALL_OW 380
// un := CreateHuman ;
30172: LD_ADDR_VAR 0 1
30176: PUSH
30177: CALL_OW 44
30181: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30182: LD_VAR 0 1
30186: PPUSH
30187: LD_INT 1
30189: PPUSH
30190: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30194: LD_INT 35
30196: PPUSH
30197: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30201: LD_VAR 0 1
30205: PPUSH
30206: LD_INT 22
30208: PUSH
30209: LD_OWVAR 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 74
30232: PPUSH
30233: CALL_OW 115
// until IsDead ( un ) ;
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 301
30246: IFFALSE 30194
// end ;
30248: PPOPN 1
30250: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30251: LD_EXP 38
30255: PUSH
30256: LD_EXP 78
30260: AND
30261: IFFALSE 30273
30263: GO 30265
30265: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30266: LD_STRING earthquake(getX(game), 0, 32)
30268: PPUSH
30269: CALL_OW 559
30273: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30274: LD_EXP 38
30278: PUSH
30279: LD_EXP 79
30283: AND
30284: IFFALSE 30375
30286: GO 30288
30288: DISABLE
30289: LD_INT 0
30291: PPUSH
// begin enable ;
30292: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30293: LD_ADDR_VAR 0 1
30297: PUSH
30298: LD_INT 22
30300: PUSH
30301: LD_OWVAR 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 21
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 33
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: PPUSH
30335: CALL_OW 69
30339: ST_TO_ADDR
// if not tmp then
30340: LD_VAR 0 1
30344: NOT
30345: IFFALSE 30349
// exit ;
30347: GO 30375
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: PPUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 12
30366: ARRAY
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: CALL_OW 234
// end ;
30375: PPOPN 1
30377: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30378: LD_EXP 38
30382: PUSH
30383: LD_EXP 80
30387: AND
30388: IFFALSE 30529
30390: GO 30392
30392: DISABLE
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
30397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: LD_INT 22
30405: PUSH
30406: LD_OWVAR 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 25
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PPUSH
30429: CALL_OW 69
30433: ST_TO_ADDR
// if not tmp then
30434: LD_VAR 0 3
30438: NOT
30439: IFFALSE 30443
// exit ;
30441: GO 30529
// un := tmp [ rand ( 1 , tmp ) ] ;
30443: LD_ADDR_VAR 0 2
30447: PUSH
30448: LD_VAR 0 3
30452: PUSH
30453: LD_INT 1
30455: PPUSH
30456: LD_VAR 0 3
30460: PPUSH
30461: CALL_OW 12
30465: ARRAY
30466: ST_TO_ADDR
// if Crawls ( un ) then
30467: LD_VAR 0 2
30471: PPUSH
30472: CALL_OW 318
30476: IFFALSE 30487
// ComWalk ( un ) ;
30478: LD_VAR 0 2
30482: PPUSH
30483: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_INT 9
30494: PPUSH
30495: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30499: LD_INT 28
30501: PPUSH
30502: LD_OWVAR 2
30506: PPUSH
30507: LD_INT 2
30509: PPUSH
30510: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30514: LD_INT 29
30516: PPUSH
30517: LD_OWVAR 2
30521: PPUSH
30522: LD_INT 2
30524: PPUSH
30525: CALL_OW 322
// end ;
30529: PPOPN 3
30531: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30532: LD_EXP 38
30536: PUSH
30537: LD_EXP 81
30541: AND
30542: IFFALSE 30653
30544: GO 30546
30546: DISABLE
30547: LD_INT 0
30549: PPUSH
30550: PPUSH
30551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 22
30559: PUSH
30560: LD_OWVAR 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 25
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 69
30587: ST_TO_ADDR
// if not tmp then
30588: LD_VAR 0 3
30592: NOT
30593: IFFALSE 30597
// exit ;
30595: GO 30653
// un := tmp [ rand ( 1 , tmp ) ] ;
30597: LD_ADDR_VAR 0 2
30601: PUSH
30602: LD_VAR 0 3
30606: PUSH
30607: LD_INT 1
30609: PPUSH
30610: LD_VAR 0 3
30614: PPUSH
30615: CALL_OW 12
30619: ARRAY
30620: ST_TO_ADDR
// if Crawls ( un ) then
30621: LD_VAR 0 2
30625: PPUSH
30626: CALL_OW 318
30630: IFFALSE 30641
// ComWalk ( un ) ;
30632: LD_VAR 0 2
30636: PPUSH
30637: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30641: LD_VAR 0 2
30645: PPUSH
30646: LD_INT 8
30648: PPUSH
30649: CALL_OW 336
// end ;
30653: PPOPN 3
30655: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30656: LD_EXP 38
30660: PUSH
30661: LD_EXP 82
30665: AND
30666: IFFALSE 30810
30668: GO 30670
30670: DISABLE
30671: LD_INT 0
30673: PPUSH
30674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30675: LD_ADDR_VAR 0 2
30679: PUSH
30680: LD_INT 22
30682: PUSH
30683: LD_OWVAR 2
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 21
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 34
30707: PUSH
30708: LD_INT 12
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 34
30717: PUSH
30718: LD_INT 51
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 34
30727: PUSH
30728: LD_INT 32
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: PPUSH
30746: CALL_OW 69
30750: ST_TO_ADDR
// if not tmp then
30751: LD_VAR 0 2
30755: NOT
30756: IFFALSE 30760
// exit ;
30758: GO 30810
// for i in tmp do
30760: LD_ADDR_VAR 0 1
30764: PUSH
30765: LD_VAR 0 2
30769: PUSH
30770: FOR_IN
30771: IFFALSE 30808
// if GetCargo ( i , mat_artifact ) = 0 then
30773: LD_VAR 0 1
30777: PPUSH
30778: LD_INT 4
30780: PPUSH
30781: CALL_OW 289
30785: PUSH
30786: LD_INT 0
30788: EQUAL
30789: IFFALSE 30806
// SetCargo ( i , mat_siberit , 100 ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_INT 3
30798: PPUSH
30799: LD_INT 100
30801: PPUSH
30802: CALL_OW 290
30806: GO 30770
30808: POP
30809: POP
// end ;
30810: PPOPN 2
30812: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30813: LD_EXP 38
30817: PUSH
30818: LD_EXP 83
30822: AND
30823: IFFALSE 31006
30825: GO 30827
30827: DISABLE
30828: LD_INT 0
30830: PPUSH
30831: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30832: LD_ADDR_VAR 0 2
30836: PUSH
30837: LD_INT 22
30839: PUSH
30840: LD_OWVAR 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PPUSH
30849: CALL_OW 69
30853: ST_TO_ADDR
// if not tmp then
30854: LD_VAR 0 2
30858: NOT
30859: IFFALSE 30863
// exit ;
30861: GO 31006
// for i := 1 to 2 do
30863: LD_ADDR_VAR 0 1
30867: PUSH
30868: DOUBLE
30869: LD_INT 1
30871: DEC
30872: ST_TO_ADDR
30873: LD_INT 2
30875: PUSH
30876: FOR_TO
30877: IFFALSE 31004
// begin uc_side := your_side ;
30879: LD_ADDR_OWVAR 20
30883: PUSH
30884: LD_OWVAR 2
30888: ST_TO_ADDR
// uc_nation := nation_american ;
30889: LD_ADDR_OWVAR 21
30893: PUSH
30894: LD_INT 1
30896: ST_TO_ADDR
// vc_chassis := us_morphling ;
30897: LD_ADDR_OWVAR 37
30901: PUSH
30902: LD_INT 5
30904: ST_TO_ADDR
// vc_engine := engine_siberite ;
30905: LD_ADDR_OWVAR 39
30909: PUSH
30910: LD_INT 3
30912: ST_TO_ADDR
// vc_control := control_computer ;
30913: LD_ADDR_OWVAR 38
30917: PUSH
30918: LD_INT 3
30920: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30921: LD_ADDR_OWVAR 40
30925: PUSH
30926: LD_INT 10
30928: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30929: LD_VAR 0 2
30933: PUSH
30934: LD_INT 1
30936: ARRAY
30937: PPUSH
30938: CALL_OW 310
30942: NOT
30943: IFFALSE 30990
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30945: CALL_OW 45
30949: PPUSH
30950: LD_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: ARRAY
30958: PPUSH
30959: CALL_OW 250
30963: PPUSH
30964: LD_VAR 0 2
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PPUSH
30973: CALL_OW 251
30977: PPUSH
30978: LD_INT 12
30980: PPUSH
30981: LD_INT 1
30983: PPUSH
30984: CALL_OW 50
30988: GO 31002
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30990: CALL_OW 45
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: CALL_OW 51
// end ;
31002: GO 30876
31004: POP
31005: POP
// end ;
31006: PPOPN 2
31008: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31009: LD_EXP 38
31013: PUSH
31014: LD_EXP 84
31018: AND
31019: IFFALSE 31241
31021: GO 31023
31023: DISABLE
31024: LD_INT 0
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31032: LD_ADDR_VAR 0 6
31036: PUSH
31037: LD_INT 22
31039: PUSH
31040: LD_OWVAR 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 21
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: LD_INT 23
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: PPUSH
31081: CALL_OW 69
31085: ST_TO_ADDR
// if not tmp then
31086: LD_VAR 0 6
31090: NOT
31091: IFFALSE 31095
// exit ;
31093: GO 31241
// s1 := rand ( 1 , 4 ) ;
31095: LD_ADDR_VAR 0 2
31099: PUSH
31100: LD_INT 1
31102: PPUSH
31103: LD_INT 4
31105: PPUSH
31106: CALL_OW 12
31110: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31111: LD_ADDR_VAR 0 4
31115: PUSH
31116: LD_VAR 0 6
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: LD_VAR 0 2
31129: PPUSH
31130: CALL_OW 259
31134: ST_TO_ADDR
// if s1 = 1 then
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 1
31142: EQUAL
31143: IFFALSE 31163
// s2 := rand ( 2 , 4 ) else
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 2
31152: PPUSH
31153: LD_INT 4
31155: PPUSH
31156: CALL_OW 12
31160: ST_TO_ADDR
31161: GO 31171
// s2 := 1 ;
31163: LD_ADDR_VAR 0 3
31167: PUSH
31168: LD_INT 1
31170: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 6
31180: PUSH
31181: LD_INT 1
31183: ARRAY
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL_OW 259
31194: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31195: LD_VAR 0 6
31199: PUSH
31200: LD_INT 1
31202: ARRAY
31203: PPUSH
31204: LD_VAR 0 2
31208: PPUSH
31209: LD_VAR 0 5
31213: PPUSH
31214: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31218: LD_VAR 0 6
31222: PUSH
31223: LD_INT 1
31225: ARRAY
31226: PPUSH
31227: LD_VAR 0 3
31231: PPUSH
31232: LD_VAR 0 4
31236: PPUSH
31237: CALL_OW 237
// end ;
31241: PPOPN 6
31243: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31244: LD_EXP 38
31248: PUSH
31249: LD_EXP 85
31253: AND
31254: IFFALSE 31333
31256: GO 31258
31258: DISABLE
31259: LD_INT 0
31261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31262: LD_ADDR_VAR 0 1
31266: PUSH
31267: LD_INT 22
31269: PUSH
31270: LD_OWVAR 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 30
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PPUSH
31293: CALL_OW 69
31297: ST_TO_ADDR
// if not tmp then
31298: LD_VAR 0 1
31302: NOT
31303: IFFALSE 31307
// exit ;
31305: GO 31333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31307: LD_VAR 0 1
31311: PUSH
31312: LD_INT 1
31314: PPUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL_OW 12
31324: ARRAY
31325: PPUSH
31326: LD_INT 1
31328: PPUSH
31329: CALL_OW 234
// end ;
31333: PPOPN 1
31335: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31336: LD_EXP 38
31340: PUSH
31341: LD_EXP 86
31345: AND
31346: IFFALSE 31458
31348: GO 31350
31350: DISABLE
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31355: LD_ADDR_VAR 0 2
31359: PUSH
31360: LD_INT 22
31362: PUSH
31363: LD_OWVAR 2
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 30
31377: PUSH
31378: LD_INT 27
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 30
31387: PUSH
31388: LD_INT 26
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 30
31397: PUSH
31398: LD_INT 28
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PPUSH
31415: CALL_OW 69
31419: ST_TO_ADDR
// if not tmp then
31420: LD_VAR 0 2
31424: NOT
31425: IFFALSE 31429
// exit ;
31427: GO 31458
// for i in tmp do
31429: LD_ADDR_VAR 0 1
31433: PUSH
31434: LD_VAR 0 2
31438: PUSH
31439: FOR_IN
31440: IFFALSE 31456
// SetLives ( i , 1 ) ;
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_INT 1
31449: PPUSH
31450: CALL_OW 234
31454: GO 31439
31456: POP
31457: POP
// end ;
31458: PPOPN 2
31460: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31461: LD_EXP 38
31465: PUSH
31466: LD_EXP 87
31470: AND
31471: IFFALSE 31758
31473: GO 31475
31475: DISABLE
31476: LD_INT 0
31478: PPUSH
31479: PPUSH
31480: PPUSH
// begin i := rand ( 1 , 7 ) ;
31481: LD_ADDR_VAR 0 1
31485: PUSH
31486: LD_INT 1
31488: PPUSH
31489: LD_INT 7
31491: PPUSH
31492: CALL_OW 12
31496: ST_TO_ADDR
// case i of 1 :
31497: LD_VAR 0 1
31501: PUSH
31502: LD_INT 1
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31520
31510: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31511: LD_STRING earthquake(getX(game), 0, 32)
31513: PPUSH
31514: CALL_OW 559
31518: GO 31758
31520: LD_INT 2
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31542
31528: POP
// begin ToLua ( displayStucuk(); ) ;
31529: LD_STRING displayStucuk();
31531: PPUSH
31532: CALL_OW 559
// ResetFog ;
31536: CALL_OW 335
// end ; 3 :
31540: GO 31758
31542: LD_INT 3
31544: DOUBLE
31545: EQUAL
31546: IFTRUE 31550
31548: GO 31654
31550: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31551: LD_ADDR_VAR 0 2
31555: PUSH
31556: LD_INT 22
31558: PUSH
31559: LD_OWVAR 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 25
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PPUSH
31582: CALL_OW 69
31586: ST_TO_ADDR
// if not tmp then
31587: LD_VAR 0 2
31591: NOT
31592: IFFALSE 31596
// exit ;
31594: GO 31758
// un := tmp [ rand ( 1 , tmp ) ] ;
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_VAR 0 2
31605: PUSH
31606: LD_INT 1
31608: PPUSH
31609: LD_VAR 0 2
31613: PPUSH
31614: CALL_OW 12
31618: ARRAY
31619: ST_TO_ADDR
// if Crawls ( un ) then
31620: LD_VAR 0 3
31624: PPUSH
31625: CALL_OW 318
31629: IFFALSE 31640
// ComWalk ( un ) ;
31631: LD_VAR 0 3
31635: PPUSH
31636: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31640: LD_VAR 0 3
31644: PPUSH
31645: LD_INT 8
31647: PPUSH
31648: CALL_OW 336
// end ; 4 :
31652: GO 31758
31654: LD_INT 4
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31736
31662: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31663: LD_ADDR_VAR 0 2
31667: PUSH
31668: LD_INT 22
31670: PUSH
31671: LD_OWVAR 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 29
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PPUSH
31694: CALL_OW 69
31698: ST_TO_ADDR
// if not tmp then
31699: LD_VAR 0 2
31703: NOT
31704: IFFALSE 31708
// exit ;
31706: GO 31758
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31708: LD_VAR 0 2
31712: PUSH
31713: LD_INT 1
31715: ARRAY
31716: PPUSH
31717: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31721: LD_VAR 0 2
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PPUSH
31730: CALL_OW 65
// end ; 5 .. 7 :
31734: GO 31758
31736: LD_INT 5
31738: DOUBLE
31739: GREATEREQUAL
31740: IFFALSE 31748
31742: LD_INT 7
31744: DOUBLE
31745: LESSEQUAL
31746: IFTRUE 31750
31748: GO 31757
31750: POP
// StreamSibBomb ; end ;
31751: CALL 27995 0 0
31755: GO 31758
31757: POP
// end ;
31758: PPOPN 3
31760: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31761: LD_EXP 38
31765: PUSH
31766: LD_EXP 88
31770: AND
31771: IFFALSE 31927
31773: GO 31775
31775: DISABLE
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31781: LD_ADDR_VAR 0 2
31785: PUSH
31786: LD_INT 81
31788: PUSH
31789: LD_OWVAR 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 21
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PPUSH
31830: CALL_OW 69
31834: ST_TO_ADDR
// if not tmp then
31835: LD_VAR 0 2
31839: NOT
31840: IFFALSE 31844
// exit ;
31842: GO 31927
// p := 0 ;
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_INT 0
31851: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31852: LD_INT 35
31854: PPUSH
31855: CALL_OW 67
// p := p + 1 ;
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_VAR 0 3
31868: PUSH
31869: LD_INT 1
31871: PLUS
31872: ST_TO_ADDR
// for i in tmp do
31873: LD_ADDR_VAR 0 1
31877: PUSH
31878: LD_VAR 0 2
31882: PUSH
31883: FOR_IN
31884: IFFALSE 31915
// if GetLives ( i ) < 1000 then
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 256
31895: PUSH
31896: LD_INT 1000
31898: LESS
31899: IFFALSE 31913
// SetLives ( i , 1000 ) ;
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_INT 1000
31908: PPUSH
31909: CALL_OW 234
31913: GO 31883
31915: POP
31916: POP
// until p > 20 ;
31917: LD_VAR 0 3
31921: PUSH
31922: LD_INT 20
31924: GREATER
31925: IFFALSE 31852
// end ;
31927: PPOPN 3
31929: END
// every 0 0$1 trigger StreamModeActive and sTime do
31930: LD_EXP 38
31934: PUSH
31935: LD_EXP 89
31939: AND
31940: IFFALSE 31975
31942: GO 31944
31944: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31945: LD_INT 28
31947: PPUSH
31948: LD_OWVAR 2
31952: PPUSH
31953: LD_INT 2
31955: PPUSH
31956: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31960: LD_INT 30
31962: PPUSH
31963: LD_OWVAR 2
31967: PPUSH
31968: LD_INT 2
31970: PPUSH
31971: CALL_OW 322
// end ;
31975: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31976: LD_EXP 38
31980: PUSH
31981: LD_EXP 90
31985: AND
31986: IFFALSE 32107
31988: GO 31990
31990: DISABLE
31991: LD_INT 0
31993: PPUSH
31994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31995: LD_ADDR_VAR 0 2
31999: PUSH
32000: LD_INT 22
32002: PUSH
32003: LD_OWVAR 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 21
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: LD_INT 23
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: PPUSH
32044: CALL_OW 69
32048: ST_TO_ADDR
// if not tmp then
32049: LD_VAR 0 2
32053: NOT
32054: IFFALSE 32058
// exit ;
32056: GO 32107
// for i in tmp do
32058: LD_ADDR_VAR 0 1
32062: PUSH
32063: LD_VAR 0 2
32067: PUSH
32068: FOR_IN
32069: IFFALSE 32105
// begin if Crawls ( i ) then
32071: LD_VAR 0 1
32075: PPUSH
32076: CALL_OW 318
32080: IFFALSE 32091
// ComWalk ( i ) ;
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 138
// SetClass ( i , 2 ) ;
32091: LD_VAR 0 1
32095: PPUSH
32096: LD_INT 2
32098: PPUSH
32099: CALL_OW 336
// end ;
32103: GO 32068
32105: POP
32106: POP
// end ;
32107: PPOPN 2
32109: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32110: LD_EXP 38
32114: PUSH
32115: LD_EXP 91
32119: AND
32120: IFFALSE 32408
32122: GO 32124
32124: DISABLE
32125: LD_INT 0
32127: PPUSH
32128: PPUSH
32129: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32130: LD_OWVAR 2
32134: PPUSH
32135: LD_INT 9
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: LD_INT 1
32143: PPUSH
32144: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32148: LD_INT 9
32150: PPUSH
32151: LD_OWVAR 2
32155: PPUSH
32156: CALL_OW 343
// uc_side := 9 ;
32160: LD_ADDR_OWVAR 20
32164: PUSH
32165: LD_INT 9
32167: ST_TO_ADDR
// uc_nation := 2 ;
32168: LD_ADDR_OWVAR 21
32172: PUSH
32173: LD_INT 2
32175: ST_TO_ADDR
// hc_name := Dark Warrior ;
32176: LD_ADDR_OWVAR 26
32180: PUSH
32181: LD_STRING Dark Warrior
32183: ST_TO_ADDR
// hc_gallery :=  ;
32184: LD_ADDR_OWVAR 33
32188: PUSH
32189: LD_STRING 
32191: ST_TO_ADDR
// hc_noskilllimit := true ;
32192: LD_ADDR_OWVAR 76
32196: PUSH
32197: LD_INT 1
32199: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32200: LD_ADDR_OWVAR 31
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_INT 30
32210: PUSH
32211: LD_INT 30
32213: PUSH
32214: LD_INT 30
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// un := CreateHuman ;
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: CALL_OW 44
32232: ST_TO_ADDR
// hc_noskilllimit := false ;
32233: LD_ADDR_OWVAR 76
32237: PUSH
32238: LD_INT 0
32240: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32241: LD_VAR 0 3
32245: PPUSH
32246: LD_INT 1
32248: PPUSH
32249: CALL_OW 51
// ToLua ( playRanger() ) ;
32253: LD_STRING playRanger()
32255: PPUSH
32256: CALL_OW 559
// p := 0 ;
32260: LD_ADDR_VAR 0 2
32264: PUSH
32265: LD_INT 0
32267: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32268: LD_INT 35
32270: PPUSH
32271: CALL_OW 67
// p := p + 1 ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 2
32284: PUSH
32285: LD_INT 1
32287: PLUS
32288: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32289: LD_VAR 0 3
32293: PPUSH
32294: CALL_OW 256
32298: PUSH
32299: LD_INT 1000
32301: LESS
32302: IFFALSE 32316
// SetLives ( un , 1000 ) ;
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_INT 1000
32311: PPUSH
32312: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32316: LD_VAR 0 3
32320: PPUSH
32321: LD_INT 81
32323: PUSH
32324: LD_OWVAR 2
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 91
32335: PUSH
32336: LD_VAR 0 3
32340: PUSH
32341: LD_INT 30
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: PPUSH
32358: LD_VAR 0 3
32362: PPUSH
32363: CALL_OW 74
32367: PPUSH
32368: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 80
32379: GREATER
32380: PUSH
32381: LD_VAR 0 3
32385: PPUSH
32386: CALL_OW 301
32390: OR
32391: IFFALSE 32268
// if un then
32393: LD_VAR 0 3
32397: IFFALSE 32408
// RemoveUnit ( un ) ;
32399: LD_VAR 0 3
32403: PPUSH
32404: CALL_OW 64
// end ;
32408: PPOPN 3
32410: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32411: LD_EXP 92
32415: IFFALSE 32531
32417: GO 32419
32419: DISABLE
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
32424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32425: LD_ADDR_VAR 0 2
32429: PUSH
32430: LD_INT 81
32432: PUSH
32433: LD_OWVAR 2
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 21
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PPUSH
32456: CALL_OW 69
32460: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32461: LD_STRING playComputer()
32463: PPUSH
32464: CALL_OW 559
// if not tmp then
32468: LD_VAR 0 2
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 32531
// for i in tmp do
32477: LD_ADDR_VAR 0 1
32481: PUSH
32482: LD_VAR 0 2
32486: PUSH
32487: FOR_IN
32488: IFFALSE 32529
// for j := 1 to 4 do
32490: LD_ADDR_VAR 0 3
32494: PUSH
32495: DOUBLE
32496: LD_INT 1
32498: DEC
32499: ST_TO_ADDR
32500: LD_INT 4
32502: PUSH
32503: FOR_TO
32504: IFFALSE 32525
// SetSkill ( i , j , 10 ) ;
32506: LD_VAR 0 1
32510: PPUSH
32511: LD_VAR 0 3
32515: PPUSH
32516: LD_INT 10
32518: PPUSH
32519: CALL_OW 237
32523: GO 32503
32525: POP
32526: POP
32527: GO 32487
32529: POP
32530: POP
// end ;
32531: PPOPN 3
32533: END
// every 0 0$1 trigger s30 do var i , tmp ;
32534: LD_EXP 93
32538: IFFALSE 32607
32540: GO 32542
32542: DISABLE
32543: LD_INT 0
32545: PPUSH
32546: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32547: LD_ADDR_VAR 0 2
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_OWVAR 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PPUSH
32564: CALL_OW 69
32568: ST_TO_ADDR
// if not tmp then
32569: LD_VAR 0 2
32573: NOT
32574: IFFALSE 32578
// exit ;
32576: GO 32607
// for i in tmp do
32578: LD_ADDR_VAR 0 1
32582: PUSH
32583: LD_VAR 0 2
32587: PUSH
32588: FOR_IN
32589: IFFALSE 32605
// SetLives ( i , 300 ) ;
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_INT 300
32598: PPUSH
32599: CALL_OW 234
32603: GO 32588
32605: POP
32606: POP
// end ;
32607: PPOPN 2
32609: END
// every 0 0$1 trigger s60 do var i , tmp ;
32610: LD_EXP 94
32614: IFFALSE 32683
32616: GO 32618
32618: DISABLE
32619: LD_INT 0
32621: PPUSH
32622: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32623: LD_ADDR_VAR 0 2
32627: PUSH
32628: LD_INT 22
32630: PUSH
32631: LD_OWVAR 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PPUSH
32640: CALL_OW 69
32644: ST_TO_ADDR
// if not tmp then
32645: LD_VAR 0 2
32649: NOT
32650: IFFALSE 32654
// exit ;
32652: GO 32683
// for i in tmp do
32654: LD_ADDR_VAR 0 1
32658: PUSH
32659: LD_VAR 0 2
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32681
// SetLives ( i , 600 ) ;
32667: LD_VAR 0 1
32671: PPUSH
32672: LD_INT 600
32674: PPUSH
32675: CALL_OW 234
32679: GO 32664
32681: POP
32682: POP
// end ;
32683: PPOPN 2
32685: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32686: LD_INT 0
32688: PPUSH
// case cmd of 301 :
32689: LD_VAR 0 1
32693: PUSH
32694: LD_INT 301
32696: DOUBLE
32697: EQUAL
32698: IFTRUE 32702
32700: GO 32734
32702: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32703: LD_VAR 0 6
32707: PPUSH
32708: LD_VAR 0 7
32712: PPUSH
32713: LD_VAR 0 8
32717: PPUSH
32718: LD_VAR 0 4
32722: PPUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: CALL 33935 0 5
32732: GO 32855
32734: LD_INT 302
32736: DOUBLE
32737: EQUAL
32738: IFTRUE 32742
32740: GO 32779
32742: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32743: LD_VAR 0 6
32747: PPUSH
32748: LD_VAR 0 7
32752: PPUSH
32753: LD_VAR 0 8
32757: PPUSH
32758: LD_VAR 0 9
32762: PPUSH
32763: LD_VAR 0 4
32767: PPUSH
32768: LD_VAR 0 5
32772: PPUSH
32773: CALL 34026 0 6
32777: GO 32855
32779: LD_INT 303
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32824
32787: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32788: LD_VAR 0 6
32792: PPUSH
32793: LD_VAR 0 7
32797: PPUSH
32798: LD_VAR 0 8
32802: PPUSH
32803: LD_VAR 0 9
32807: PPUSH
32808: LD_VAR 0 4
32812: PPUSH
32813: LD_VAR 0 5
32817: PPUSH
32818: CALL 32860 0 6
32822: GO 32855
32824: LD_INT 304
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32854
32832: POP
// hHackTeleport ( unit , x , y ) ; end ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 4
32842: PPUSH
32843: LD_VAR 0 5
32847: PPUSH
32848: CALL 34619 0 3
32852: GO 32855
32854: POP
// end ;
32855: LD_VAR 0 12
32859: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32864: LD_VAR 0 1
32868: PUSH
32869: LD_INT 1
32871: LESS
32872: PUSH
32873: LD_VAR 0 1
32877: PUSH
32878: LD_INT 3
32880: GREATER
32881: OR
32882: PUSH
32883: LD_VAR 0 5
32887: PPUSH
32888: LD_VAR 0 6
32892: PPUSH
32893: CALL_OW 428
32897: OR
32898: IFFALSE 32902
// exit ;
32900: GO 33622
// uc_side := your_side ;
32902: LD_ADDR_OWVAR 20
32906: PUSH
32907: LD_OWVAR 2
32911: ST_TO_ADDR
// uc_nation := nation ;
32912: LD_ADDR_OWVAR 21
32916: PUSH
32917: LD_VAR 0 1
32921: ST_TO_ADDR
// bc_level = 1 ;
32922: LD_ADDR_OWVAR 43
32926: PUSH
32927: LD_INT 1
32929: ST_TO_ADDR
// case btype of 1 :
32930: LD_VAR 0 2
32934: PUSH
32935: LD_INT 1
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32954
32943: POP
// bc_type := b_depot ; 2 :
32944: LD_ADDR_OWVAR 42
32948: PUSH
32949: LD_INT 0
32951: ST_TO_ADDR
32952: GO 33566
32954: LD_INT 2
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32973
32962: POP
// bc_type := b_warehouse ; 3 :
32963: LD_ADDR_OWVAR 42
32967: PUSH
32968: LD_INT 1
32970: ST_TO_ADDR
32971: GO 33566
32973: LD_INT 3
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 32992
32981: POP
// bc_type := b_lab ; 4 .. 9 :
32982: LD_ADDR_OWVAR 42
32986: PUSH
32987: LD_INT 6
32989: ST_TO_ADDR
32990: GO 33566
32992: LD_INT 4
32994: DOUBLE
32995: GREATEREQUAL
32996: IFFALSE 33004
32998: LD_INT 9
33000: DOUBLE
33001: LESSEQUAL
33002: IFTRUE 33006
33004: GO 33058
33006: POP
// begin bc_type := b_lab_half ;
33007: LD_ADDR_OWVAR 42
33011: PUSH
33012: LD_INT 7
33014: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33015: LD_ADDR_OWVAR 44
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 12
33028: PUSH
33029: LD_INT 15
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: LD_INT 13
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: LD_VAR 0 2
33050: PUSH
33051: LD_INT 3
33053: MINUS
33054: ARRAY
33055: ST_TO_ADDR
// end ; 10 .. 13 :
33056: GO 33566
33058: LD_INT 10
33060: DOUBLE
33061: GREATEREQUAL
33062: IFFALSE 33070
33064: LD_INT 13
33066: DOUBLE
33067: LESSEQUAL
33068: IFTRUE 33072
33070: GO 33149
33072: POP
// begin bc_type := b_lab_full ;
33073: LD_ADDR_OWVAR 42
33077: PUSH
33078: LD_INT 8
33080: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33081: LD_ADDR_OWVAR 44
33085: PUSH
33086: LD_INT 10
33088: PUSH
33089: LD_INT 12
33091: PUSH
33092: LD_INT 14
33094: PUSH
33095: LD_INT 13
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: PUSH
33104: LD_VAR 0 2
33108: PUSH
33109: LD_INT 9
33111: MINUS
33112: ARRAY
33113: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33114: LD_ADDR_OWVAR 45
33118: PUSH
33119: LD_INT 11
33121: PUSH
33122: LD_INT 15
33124: PUSH
33125: LD_INT 12
33127: PUSH
33128: LD_INT 15
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: PUSH
33137: LD_VAR 0 2
33141: PUSH
33142: LD_INT 9
33144: MINUS
33145: ARRAY
33146: ST_TO_ADDR
// end ; 14 :
33147: GO 33566
33149: LD_INT 14
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33157
33155: GO 33168
33157: POP
// bc_type := b_workshop ; 15 :
33158: LD_ADDR_OWVAR 42
33162: PUSH
33163: LD_INT 2
33165: ST_TO_ADDR
33166: GO 33566
33168: LD_INT 15
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33187
33176: POP
// bc_type := b_factory ; 16 :
33177: LD_ADDR_OWVAR 42
33181: PUSH
33182: LD_INT 3
33184: ST_TO_ADDR
33185: GO 33566
33187: LD_INT 16
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33206
33195: POP
// bc_type := b_ext_gun ; 17 :
33196: LD_ADDR_OWVAR 42
33200: PUSH
33201: LD_INT 17
33203: ST_TO_ADDR
33204: GO 33566
33206: LD_INT 17
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33242
33214: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33215: LD_ADDR_OWVAR 42
33219: PUSH
33220: LD_INT 19
33222: PUSH
33223: LD_INT 23
33225: PUSH
33226: LD_INT 19
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: PUSH
33234: LD_VAR 0 1
33238: ARRAY
33239: ST_TO_ADDR
33240: GO 33566
33242: LD_INT 18
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33261
33250: POP
// bc_type := b_ext_radar ; 19 :
33251: LD_ADDR_OWVAR 42
33255: PUSH
33256: LD_INT 20
33258: ST_TO_ADDR
33259: GO 33566
33261: LD_INT 19
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33280
33269: POP
// bc_type := b_ext_radio ; 20 :
33270: LD_ADDR_OWVAR 42
33274: PUSH
33275: LD_INT 22
33277: ST_TO_ADDR
33278: GO 33566
33280: LD_INT 20
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33299
33288: POP
// bc_type := b_ext_siberium ; 21 :
33289: LD_ADDR_OWVAR 42
33293: PUSH
33294: LD_INT 21
33296: ST_TO_ADDR
33297: GO 33566
33299: LD_INT 21
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33318
33307: POP
// bc_type := b_ext_computer ; 22 :
33308: LD_ADDR_OWVAR 42
33312: PUSH
33313: LD_INT 24
33315: ST_TO_ADDR
33316: GO 33566
33318: LD_INT 22
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33337
33326: POP
// bc_type := b_ext_track ; 23 :
33327: LD_ADDR_OWVAR 42
33331: PUSH
33332: LD_INT 16
33334: ST_TO_ADDR
33335: GO 33566
33337: LD_INT 23
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33356
33345: POP
// bc_type := b_ext_laser ; 24 :
33346: LD_ADDR_OWVAR 42
33350: PUSH
33351: LD_INT 25
33353: ST_TO_ADDR
33354: GO 33566
33356: LD_INT 24
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33375
33364: POP
// bc_type := b_control_tower ; 25 :
33365: LD_ADDR_OWVAR 42
33369: PUSH
33370: LD_INT 36
33372: ST_TO_ADDR
33373: GO 33566
33375: LD_INT 25
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33394
33383: POP
// bc_type := b_breastwork ; 26 :
33384: LD_ADDR_OWVAR 42
33388: PUSH
33389: LD_INT 31
33391: ST_TO_ADDR
33392: GO 33566
33394: LD_INT 26
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33413
33402: POP
// bc_type := b_bunker ; 27 :
33403: LD_ADDR_OWVAR 42
33407: PUSH
33408: LD_INT 32
33410: ST_TO_ADDR
33411: GO 33566
33413: LD_INT 27
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33432
33421: POP
// bc_type := b_turret ; 28 :
33422: LD_ADDR_OWVAR 42
33426: PUSH
33427: LD_INT 33
33429: ST_TO_ADDR
33430: GO 33566
33432: LD_INT 28
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33451
33440: POP
// bc_type := b_armoury ; 29 :
33441: LD_ADDR_OWVAR 42
33445: PUSH
33446: LD_INT 4
33448: ST_TO_ADDR
33449: GO 33566
33451: LD_INT 29
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33459
33457: GO 33470
33459: POP
// bc_type := b_barracks ; 30 :
33460: LD_ADDR_OWVAR 42
33464: PUSH
33465: LD_INT 5
33467: ST_TO_ADDR
33468: GO 33566
33470: LD_INT 30
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33478
33476: GO 33489
33478: POP
// bc_type := b_solar_power ; 31 :
33479: LD_ADDR_OWVAR 42
33483: PUSH
33484: LD_INT 27
33486: ST_TO_ADDR
33487: GO 33566
33489: LD_INT 31
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33497
33495: GO 33508
33497: POP
// bc_type := b_oil_power ; 32 :
33498: LD_ADDR_OWVAR 42
33502: PUSH
33503: LD_INT 26
33505: ST_TO_ADDR
33506: GO 33566
33508: LD_INT 32
33510: DOUBLE
33511: EQUAL
33512: IFTRUE 33516
33514: GO 33527
33516: POP
// bc_type := b_siberite_power ; 33 :
33517: LD_ADDR_OWVAR 42
33521: PUSH
33522: LD_INT 28
33524: ST_TO_ADDR
33525: GO 33566
33527: LD_INT 33
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 33546
33535: POP
// bc_type := b_oil_mine ; 34 :
33536: LD_ADDR_OWVAR 42
33540: PUSH
33541: LD_INT 29
33543: ST_TO_ADDR
33544: GO 33566
33546: LD_INT 34
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33554
33552: GO 33565
33554: POP
// bc_type := b_siberite_mine ; end ;
33555: LD_ADDR_OWVAR 42
33559: PUSH
33560: LD_INT 30
33562: ST_TO_ADDR
33563: GO 33566
33565: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33566: LD_ADDR_VAR 0 8
33570: PUSH
33571: LD_VAR 0 5
33575: PPUSH
33576: LD_VAR 0 6
33580: PPUSH
33581: LD_VAR 0 3
33585: PPUSH
33586: CALL_OW 47
33590: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33591: LD_OWVAR 42
33595: PUSH
33596: LD_INT 32
33598: PUSH
33599: LD_INT 33
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: IN
33606: IFFALSE 33622
// PlaceWeaponTurret ( b , weapon ) ;
33608: LD_VAR 0 8
33612: PPUSH
33613: LD_VAR 0 4
33617: PPUSH
33618: CALL_OW 431
// end ;
33622: LD_VAR 0 7
33626: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33633: LD_ADDR_VAR 0 4
33637: PUSH
33638: LD_INT 22
33640: PUSH
33641: LD_OWVAR 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 30
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 30
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PPUSH
33682: CALL_OW 69
33686: ST_TO_ADDR
// if not tmp then
33687: LD_VAR 0 4
33691: NOT
33692: IFFALSE 33696
// exit ;
33694: GO 33755
// for i in tmp do
33696: LD_ADDR_VAR 0 2
33700: PUSH
33701: LD_VAR 0 4
33705: PUSH
33706: FOR_IN
33707: IFFALSE 33753
// for j = 1 to 3 do
33709: LD_ADDR_VAR 0 3
33713: PUSH
33714: DOUBLE
33715: LD_INT 1
33717: DEC
33718: ST_TO_ADDR
33719: LD_INT 3
33721: PUSH
33722: FOR_TO
33723: IFFALSE 33749
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33725: LD_VAR 0 2
33729: PPUSH
33730: CALL_OW 274
33734: PPUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: LD_INT 99999
33742: PPUSH
33743: CALL_OW 277
33747: GO 33722
33749: POP
33750: POP
33751: GO 33706
33753: POP
33754: POP
// end ;
33755: LD_VAR 0 1
33759: RET
// export function hHackSetLevel10 ; var i , j ; begin
33760: LD_INT 0
33762: PPUSH
33763: PPUSH
33764: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33765: LD_ADDR_VAR 0 2
33769: PUSH
33770: LD_INT 21
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PPUSH
33780: CALL_OW 69
33784: PUSH
33785: FOR_IN
33786: IFFALSE 33838
// if IsSelected ( i ) then
33788: LD_VAR 0 2
33792: PPUSH
33793: CALL_OW 306
33797: IFFALSE 33836
// begin for j := 1 to 4 do
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: DOUBLE
33805: LD_INT 1
33807: DEC
33808: ST_TO_ADDR
33809: LD_INT 4
33811: PUSH
33812: FOR_TO
33813: IFFALSE 33834
// SetSkill ( i , j , 10 ) ;
33815: LD_VAR 0 2
33819: PPUSH
33820: LD_VAR 0 3
33824: PPUSH
33825: LD_INT 10
33827: PPUSH
33828: CALL_OW 237
33832: GO 33812
33834: POP
33835: POP
// end ;
33836: GO 33785
33838: POP
33839: POP
// end ;
33840: LD_VAR 0 1
33844: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33845: LD_INT 0
33847: PPUSH
33848: PPUSH
33849: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33850: LD_ADDR_VAR 0 2
33854: PUSH
33855: LD_INT 22
33857: PUSH
33858: LD_OWVAR 2
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 21
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PPUSH
33881: CALL_OW 69
33885: PUSH
33886: FOR_IN
33887: IFFALSE 33928
// begin for j := 1 to 4 do
33889: LD_ADDR_VAR 0 3
33893: PUSH
33894: DOUBLE
33895: LD_INT 1
33897: DEC
33898: ST_TO_ADDR
33899: LD_INT 4
33901: PUSH
33902: FOR_TO
33903: IFFALSE 33924
// SetSkill ( i , j , 10 ) ;
33905: LD_VAR 0 2
33909: PPUSH
33910: LD_VAR 0 3
33914: PPUSH
33915: LD_INT 10
33917: PPUSH
33918: CALL_OW 237
33922: GO 33902
33924: POP
33925: POP
// end ;
33926: GO 33886
33928: POP
33929: POP
// end ;
33930: LD_VAR 0 1
33934: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33935: LD_INT 0
33937: PPUSH
// uc_side := your_side ;
33938: LD_ADDR_OWVAR 20
33942: PUSH
33943: LD_OWVAR 2
33947: ST_TO_ADDR
// uc_nation := nation ;
33948: LD_ADDR_OWVAR 21
33952: PUSH
33953: LD_VAR 0 1
33957: ST_TO_ADDR
// InitHc ;
33958: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33962: LD_INT 0
33964: PPUSH
33965: LD_VAR 0 2
33969: PPUSH
33970: LD_VAR 0 3
33974: PPUSH
33975: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33979: LD_VAR 0 4
33983: PPUSH
33984: LD_VAR 0 5
33988: PPUSH
33989: CALL_OW 428
33993: PUSH
33994: LD_INT 0
33996: EQUAL
33997: IFFALSE 34021
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33999: CALL_OW 44
34003: PPUSH
34004: LD_VAR 0 4
34008: PPUSH
34009: LD_VAR 0 5
34013: PPUSH
34014: LD_INT 1
34016: PPUSH
34017: CALL_OW 48
// end ;
34021: LD_VAR 0 6
34025: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34026: LD_INT 0
34028: PPUSH
34029: PPUSH
// uc_side := your_side ;
34030: LD_ADDR_OWVAR 20
34034: PUSH
34035: LD_OWVAR 2
34039: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34040: LD_VAR 0 1
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 4
34056: PUSH
34057: LD_INT 5
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: IN
34067: IFFALSE 34079
// uc_nation := nation_american else
34069: LD_ADDR_OWVAR 21
34073: PUSH
34074: LD_INT 1
34076: ST_TO_ADDR
34077: GO 34122
// if chassis in [ 11 , 12 , 13 , 14 ] then
34079: LD_VAR 0 1
34083: PUSH
34084: LD_INT 11
34086: PUSH
34087: LD_INT 12
34089: PUSH
34090: LD_INT 13
34092: PUSH
34093: LD_INT 14
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: IN
34102: IFFALSE 34114
// uc_nation := nation_arabian else
34104: LD_ADDR_OWVAR 21
34108: PUSH
34109: LD_INT 2
34111: ST_TO_ADDR
34112: GO 34122
// uc_nation := nation_russian ;
34114: LD_ADDR_OWVAR 21
34118: PUSH
34119: LD_INT 3
34121: ST_TO_ADDR
// vc_chassis := chassis ;
34122: LD_ADDR_OWVAR 37
34126: PUSH
34127: LD_VAR 0 1
34131: ST_TO_ADDR
// vc_engine := engine ;
34132: LD_ADDR_OWVAR 39
34136: PUSH
34137: LD_VAR 0 2
34141: ST_TO_ADDR
// vc_control := control ;
34142: LD_ADDR_OWVAR 38
34146: PUSH
34147: LD_VAR 0 3
34151: ST_TO_ADDR
// vc_weapon := weapon ;
34152: LD_ADDR_OWVAR 40
34156: PUSH
34157: LD_VAR 0 4
34161: ST_TO_ADDR
// un := CreateVehicle ;
34162: LD_ADDR_VAR 0 8
34166: PUSH
34167: CALL_OW 45
34171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34172: LD_VAR 0 8
34176: PPUSH
34177: LD_INT 0
34179: PPUSH
34180: LD_INT 5
34182: PPUSH
34183: CALL_OW 12
34187: PPUSH
34188: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34192: LD_VAR 0 8
34196: PPUSH
34197: LD_VAR 0 5
34201: PPUSH
34202: LD_VAR 0 6
34206: PPUSH
34207: LD_INT 1
34209: PPUSH
34210: CALL_OW 48
// end ;
34214: LD_VAR 0 7
34218: RET
// export hInvincible ; every 1 do
34219: GO 34221
34221: DISABLE
// hInvincible := [ ] ;
34222: LD_ADDR_EXP 95
34226: PUSH
34227: EMPTY
34228: ST_TO_ADDR
34229: END
// every 10 do var i ;
34230: GO 34232
34232: DISABLE
34233: LD_INT 0
34235: PPUSH
// begin enable ;
34236: ENABLE
// if not hInvincible then
34237: LD_EXP 95
34241: NOT
34242: IFFALSE 34246
// exit ;
34244: GO 34290
// for i in hInvincible do
34246: LD_ADDR_VAR 0 1
34250: PUSH
34251: LD_EXP 95
34255: PUSH
34256: FOR_IN
34257: IFFALSE 34288
// if GetLives ( i ) < 1000 then
34259: LD_VAR 0 1
34263: PPUSH
34264: CALL_OW 256
34268: PUSH
34269: LD_INT 1000
34271: LESS
34272: IFFALSE 34286
// SetLives ( i , 1000 ) ;
34274: LD_VAR 0 1
34278: PPUSH
34279: LD_INT 1000
34281: PPUSH
34282: CALL_OW 234
34286: GO 34256
34288: POP
34289: POP
// end ;
34290: PPOPN 1
34292: END
// export function hHackInvincible ; var i ; begin
34293: LD_INT 0
34295: PPUSH
34296: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34297: LD_ADDR_VAR 0 2
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 21
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 21
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: PPUSH
34330: CALL_OW 69
34334: PUSH
34335: FOR_IN
34336: IFFALSE 34397
// if IsSelected ( i ) then
34338: LD_VAR 0 2
34342: PPUSH
34343: CALL_OW 306
34347: IFFALSE 34395
// begin if i in hInvincible then
34349: LD_VAR 0 2
34353: PUSH
34354: LD_EXP 95
34358: IN
34359: IFFALSE 34379
// hInvincible := hInvincible diff i else
34361: LD_ADDR_EXP 95
34365: PUSH
34366: LD_EXP 95
34370: PUSH
34371: LD_VAR 0 2
34375: DIFF
34376: ST_TO_ADDR
34377: GO 34395
// hInvincible := hInvincible union i ;
34379: LD_ADDR_EXP 95
34383: PUSH
34384: LD_EXP 95
34388: PUSH
34389: LD_VAR 0 2
34393: UNION
34394: ST_TO_ADDR
// end ;
34395: GO 34335
34397: POP
34398: POP
// end ;
34399: LD_VAR 0 1
34403: RET
// export function hHackInvisible ; var i , j ; begin
34404: LD_INT 0
34406: PPUSH
34407: PPUSH
34408: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34409: LD_ADDR_VAR 0 2
34413: PUSH
34414: LD_INT 21
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PPUSH
34424: CALL_OW 69
34428: PUSH
34429: FOR_IN
34430: IFFALSE 34454
// if IsSelected ( i ) then
34432: LD_VAR 0 2
34436: PPUSH
34437: CALL_OW 306
34441: IFFALSE 34452
// ComForceInvisible ( i ) ;
34443: LD_VAR 0 2
34447: PPUSH
34448: CALL_OW 496
34452: GO 34429
34454: POP
34455: POP
// end ;
34456: LD_VAR 0 1
34460: RET
// export function hHackChangeYourSide ; begin
34461: LD_INT 0
34463: PPUSH
// if your_side = 8 then
34464: LD_OWVAR 2
34468: PUSH
34469: LD_INT 8
34471: EQUAL
34472: IFFALSE 34484
// your_side := 0 else
34474: LD_ADDR_OWVAR 2
34478: PUSH
34479: LD_INT 0
34481: ST_TO_ADDR
34482: GO 34498
// your_side := your_side + 1 ;
34484: LD_ADDR_OWVAR 2
34488: PUSH
34489: LD_OWVAR 2
34493: PUSH
34494: LD_INT 1
34496: PLUS
34497: ST_TO_ADDR
// end ;
34498: LD_VAR 0 1
34502: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34503: LD_INT 0
34505: PPUSH
34506: PPUSH
34507: PPUSH
// for i in all_units do
34508: LD_ADDR_VAR 0 2
34512: PUSH
34513: LD_OWVAR 3
34517: PUSH
34518: FOR_IN
34519: IFFALSE 34597
// if IsSelected ( i ) then
34521: LD_VAR 0 2
34525: PPUSH
34526: CALL_OW 306
34530: IFFALSE 34595
// begin j := GetSide ( i ) ;
34532: LD_ADDR_VAR 0 3
34536: PUSH
34537: LD_VAR 0 2
34541: PPUSH
34542: CALL_OW 255
34546: ST_TO_ADDR
// if j = 8 then
34547: LD_VAR 0 3
34551: PUSH
34552: LD_INT 8
34554: EQUAL
34555: IFFALSE 34567
// j := 0 else
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: LD_INT 0
34564: ST_TO_ADDR
34565: GO 34581
// j := j + 1 ;
34567: LD_ADDR_VAR 0 3
34571: PUSH
34572: LD_VAR 0 3
34576: PUSH
34577: LD_INT 1
34579: PLUS
34580: ST_TO_ADDR
// SetSide ( i , j ) ;
34581: LD_VAR 0 2
34585: PPUSH
34586: LD_VAR 0 3
34590: PPUSH
34591: CALL_OW 235
// end ;
34595: GO 34518
34597: POP
34598: POP
// end ;
34599: LD_VAR 0 1
34603: RET
// export function hHackFog ; begin
34604: LD_INT 0
34606: PPUSH
// FogOff ( true ) ;
34607: LD_INT 1
34609: PPUSH
34610: CALL_OW 344
// end ;
34614: LD_VAR 0 1
34618: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34619: LD_INT 0
34621: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34622: LD_VAR 0 1
34626: PPUSH
34627: LD_VAR 0 2
34631: PPUSH
34632: LD_VAR 0 3
34636: PPUSH
34637: LD_INT 1
34639: PPUSH
34640: LD_INT 1
34642: PPUSH
34643: CALL_OW 483
// CenterOnXY ( x , y ) ;
34647: LD_VAR 0 2
34651: PPUSH
34652: LD_VAR 0 3
34656: PPUSH
34657: CALL_OW 84
// end ;
34661: LD_VAR 0 4
34665: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34666: LD_INT 0
34668: PPUSH
34669: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34670: LD_VAR 0 1
34674: NOT
34675: PUSH
34676: LD_VAR 0 2
34680: PPUSH
34681: LD_VAR 0 3
34685: PPUSH
34686: CALL_OW 488
34690: NOT
34691: OR
34692: PUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 266
34702: PUSH
34703: LD_INT 3
34705: NONEQUAL
34706: PUSH
34707: LD_VAR 0 1
34711: PPUSH
34712: CALL_OW 247
34716: PUSH
34717: LD_INT 1
34719: EQUAL
34720: NOT
34721: AND
34722: OR
34723: IFFALSE 34727
// exit ;
34725: GO 34876
// if GetType ( factory ) = unit_human then
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 247
34736: PUSH
34737: LD_INT 1
34739: EQUAL
34740: IFFALSE 34757
// factory := IsInUnit ( factory ) ;
34742: LD_ADDR_VAR 0 1
34746: PUSH
34747: LD_VAR 0 1
34751: PPUSH
34752: CALL_OW 310
34756: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34757: LD_VAR 0 1
34761: PPUSH
34762: CALL_OW 266
34766: PUSH
34767: LD_INT 3
34769: NONEQUAL
34770: IFFALSE 34774
// exit ;
34772: GO 34876
// if HexInfo ( x , y ) = factory then
34774: LD_VAR 0 2
34778: PPUSH
34779: LD_VAR 0 3
34783: PPUSH
34784: CALL_OW 428
34788: PUSH
34789: LD_VAR 0 1
34793: EQUAL
34794: IFFALSE 34821
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34796: LD_ADDR_EXP 96
34800: PUSH
34801: LD_EXP 96
34805: PPUSH
34806: LD_VAR 0 1
34810: PPUSH
34811: LD_INT 0
34813: PPUSH
34814: CALL_OW 1
34818: ST_TO_ADDR
34819: GO 34872
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34821: LD_ADDR_EXP 96
34825: PUSH
34826: LD_EXP 96
34830: PPUSH
34831: LD_VAR 0 1
34835: PPUSH
34836: LD_VAR 0 1
34840: PPUSH
34841: CALL_OW 255
34845: PUSH
34846: LD_VAR 0 1
34850: PUSH
34851: LD_VAR 0 2
34855: PUSH
34856: LD_VAR 0 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: PPUSH
34867: CALL_OW 1
34871: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34872: CALL 34881 0 0
// end ;
34876: LD_VAR 0 4
34880: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34881: LD_INT 0
34883: PPUSH
34884: PPUSH
34885: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34886: LD_STRING resetFactoryWaypoint();
34888: PPUSH
34889: CALL_OW 559
// if factoryWaypoints then
34893: LD_EXP 96
34897: IFFALSE 35023
// begin list := PrepareArray ( factoryWaypoints ) ;
34899: LD_ADDR_VAR 0 3
34903: PUSH
34904: LD_EXP 96
34908: PPUSH
34909: CALL 81316 0 1
34913: ST_TO_ADDR
// for i := 1 to list do
34914: LD_ADDR_VAR 0 2
34918: PUSH
34919: DOUBLE
34920: LD_INT 1
34922: DEC
34923: ST_TO_ADDR
34924: LD_VAR 0 3
34928: PUSH
34929: FOR_TO
34930: IFFALSE 35021
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34932: LD_STRING setFactoryWaypointXY(
34934: PUSH
34935: LD_VAR 0 3
34939: PUSH
34940: LD_VAR 0 2
34944: ARRAY
34945: PUSH
34946: LD_INT 1
34948: ARRAY
34949: STR
34950: PUSH
34951: LD_STRING ,
34953: STR
34954: PUSH
34955: LD_VAR 0 3
34959: PUSH
34960: LD_VAR 0 2
34964: ARRAY
34965: PUSH
34966: LD_INT 2
34968: ARRAY
34969: STR
34970: PUSH
34971: LD_STRING ,
34973: STR
34974: PUSH
34975: LD_VAR 0 3
34979: PUSH
34980: LD_VAR 0 2
34984: ARRAY
34985: PUSH
34986: LD_INT 3
34988: ARRAY
34989: STR
34990: PUSH
34991: LD_STRING ,
34993: STR
34994: PUSH
34995: LD_VAR 0 3
34999: PUSH
35000: LD_VAR 0 2
35004: ARRAY
35005: PUSH
35006: LD_INT 4
35008: ARRAY
35009: STR
35010: PUSH
35011: LD_STRING )
35013: STR
35014: PPUSH
35015: CALL_OW 559
35019: GO 34929
35021: POP
35022: POP
// end ; end ;
35023: LD_VAR 0 1
35027: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35028: LD_INT 0
35030: PPUSH
// if HexInfo ( x , y ) = warehouse then
35031: LD_VAR 0 2
35035: PPUSH
35036: LD_VAR 0 3
35040: PPUSH
35041: CALL_OW 428
35045: PUSH
35046: LD_VAR 0 1
35050: EQUAL
35051: IFFALSE 35078
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35053: LD_ADDR_EXP 97
35057: PUSH
35058: LD_EXP 97
35062: PPUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: LD_INT 0
35070: PPUSH
35071: CALL_OW 1
35075: ST_TO_ADDR
35076: GO 35129
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35078: LD_ADDR_EXP 97
35082: PUSH
35083: LD_EXP 97
35087: PPUSH
35088: LD_VAR 0 1
35092: PPUSH
35093: LD_VAR 0 1
35097: PPUSH
35098: CALL_OW 255
35102: PUSH
35103: LD_VAR 0 1
35107: PUSH
35108: LD_VAR 0 2
35112: PUSH
35113: LD_VAR 0 3
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: PPUSH
35124: CALL_OW 1
35128: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35129: CALL 35138 0 0
// end ;
35133: LD_VAR 0 4
35137: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35138: LD_INT 0
35140: PPUSH
35141: PPUSH
35142: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35143: LD_STRING resetWarehouseGatheringPoints();
35145: PPUSH
35146: CALL_OW 559
// if warehouseGatheringPoints then
35150: LD_EXP 97
35154: IFFALSE 35280
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: LD_EXP 97
35165: PPUSH
35166: CALL 81316 0 1
35170: ST_TO_ADDR
// for i := 1 to list do
35171: LD_ADDR_VAR 0 2
35175: PUSH
35176: DOUBLE
35177: LD_INT 1
35179: DEC
35180: ST_TO_ADDR
35181: LD_VAR 0 3
35185: PUSH
35186: FOR_TO
35187: IFFALSE 35278
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35189: LD_STRING setWarehouseGatheringPointXY(
35191: PUSH
35192: LD_VAR 0 3
35196: PUSH
35197: LD_VAR 0 2
35201: ARRAY
35202: PUSH
35203: LD_INT 1
35205: ARRAY
35206: STR
35207: PUSH
35208: LD_STRING ,
35210: STR
35211: PUSH
35212: LD_VAR 0 3
35216: PUSH
35217: LD_VAR 0 2
35221: ARRAY
35222: PUSH
35223: LD_INT 2
35225: ARRAY
35226: STR
35227: PUSH
35228: LD_STRING ,
35230: STR
35231: PUSH
35232: LD_VAR 0 3
35236: PUSH
35237: LD_VAR 0 2
35241: ARRAY
35242: PUSH
35243: LD_INT 3
35245: ARRAY
35246: STR
35247: PUSH
35248: LD_STRING ,
35250: STR
35251: PUSH
35252: LD_VAR 0 3
35256: PUSH
35257: LD_VAR 0 2
35261: ARRAY
35262: PUSH
35263: LD_INT 4
35265: ARRAY
35266: STR
35267: PUSH
35268: LD_STRING )
35270: STR
35271: PPUSH
35272: CALL_OW 559
35276: GO 35186
35278: POP
35279: POP
// end ; end ;
35280: LD_VAR 0 1
35284: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35285: LD_EXP 97
35289: IFFALSE 35974
35291: GO 35293
35293: DISABLE
35294: LD_INT 0
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
// begin enable ;
35305: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35306: LD_ADDR_VAR 0 3
35310: PUSH
35311: LD_EXP 97
35315: PPUSH
35316: CALL 81316 0 1
35320: ST_TO_ADDR
// if not list then
35321: LD_VAR 0 3
35325: NOT
35326: IFFALSE 35330
// exit ;
35328: GO 35974
// for i := 1 to list do
35330: LD_ADDR_VAR 0 1
35334: PUSH
35335: DOUBLE
35336: LD_INT 1
35338: DEC
35339: ST_TO_ADDR
35340: LD_VAR 0 3
35344: PUSH
35345: FOR_TO
35346: IFFALSE 35972
// begin depot := list [ i ] [ 2 ] ;
35348: LD_ADDR_VAR 0 8
35352: PUSH
35353: LD_VAR 0 3
35357: PUSH
35358: LD_VAR 0 1
35362: ARRAY
35363: PUSH
35364: LD_INT 2
35366: ARRAY
35367: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35368: LD_ADDR_VAR 0 5
35372: PUSH
35373: LD_VAR 0 3
35377: PUSH
35378: LD_VAR 0 1
35382: ARRAY
35383: PUSH
35384: LD_INT 1
35386: ARRAY
35387: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35388: LD_VAR 0 8
35392: PPUSH
35393: CALL_OW 301
35397: PUSH
35398: LD_VAR 0 5
35402: PUSH
35403: LD_VAR 0 8
35407: PPUSH
35408: CALL_OW 255
35412: NONEQUAL
35413: OR
35414: IFFALSE 35443
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35416: LD_ADDR_EXP 97
35420: PUSH
35421: LD_EXP 97
35425: PPUSH
35426: LD_VAR 0 8
35430: PPUSH
35431: LD_INT 0
35433: PPUSH
35434: CALL_OW 1
35438: ST_TO_ADDR
// exit ;
35439: POP
35440: POP
35441: GO 35974
// end ; x := list [ i ] [ 3 ] ;
35443: LD_ADDR_VAR 0 6
35447: PUSH
35448: LD_VAR 0 3
35452: PUSH
35453: LD_VAR 0 1
35457: ARRAY
35458: PUSH
35459: LD_INT 3
35461: ARRAY
35462: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35463: LD_ADDR_VAR 0 7
35467: PUSH
35468: LD_VAR 0 3
35472: PUSH
35473: LD_VAR 0 1
35477: ARRAY
35478: PUSH
35479: LD_INT 4
35481: ARRAY
35482: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35483: LD_ADDR_VAR 0 9
35487: PUSH
35488: LD_VAR 0 6
35492: PPUSH
35493: LD_VAR 0 7
35497: PPUSH
35498: LD_INT 16
35500: PPUSH
35501: CALL 79904 0 3
35505: ST_TO_ADDR
// if not cratesNearbyPoint then
35506: LD_VAR 0 9
35510: NOT
35511: IFFALSE 35517
// exit ;
35513: POP
35514: POP
35515: GO 35974
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35517: LD_ADDR_VAR 0 4
35521: PUSH
35522: LD_INT 22
35524: PUSH
35525: LD_VAR 0 5
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 60
35539: PUSH
35540: EMPTY
35541: LIST
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 91
35549: PUSH
35550: LD_VAR 0 8
35554: PUSH
35555: LD_INT 6
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: LD_INT 25
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 25
35578: PUSH
35579: LD_INT 16
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: PPUSH
35597: CALL_OW 69
35601: PUSH
35602: LD_VAR 0 8
35606: PPUSH
35607: CALL_OW 313
35611: PPUSH
35612: LD_INT 3
35614: PUSH
35615: LD_INT 60
35617: PUSH
35618: EMPTY
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 25
35630: PUSH
35631: LD_INT 2
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 25
35640: PUSH
35641: LD_INT 16
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PPUSH
35657: CALL_OW 72
35661: UNION
35662: ST_TO_ADDR
// if tmp then
35663: LD_VAR 0 4
35667: IFFALSE 35747
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35669: LD_ADDR_VAR 0 4
35673: PUSH
35674: LD_VAR 0 4
35678: PPUSH
35679: LD_INT 3
35681: PPUSH
35682: CALL 77873 0 2
35686: ST_TO_ADDR
// for j in tmp do
35687: LD_ADDR_VAR 0 2
35691: PUSH
35692: LD_VAR 0 4
35696: PUSH
35697: FOR_IN
35698: IFFALSE 35741
// begin if IsInUnit ( j ) then
35700: LD_VAR 0 2
35704: PPUSH
35705: CALL_OW 310
35709: IFFALSE 35720
// ComExit ( j ) ;
35711: LD_VAR 0 2
35715: PPUSH
35716: CALL 77956 0 1
// AddComCollect ( j , x , y ) ;
35720: LD_VAR 0 2
35724: PPUSH
35725: LD_VAR 0 6
35729: PPUSH
35730: LD_VAR 0 7
35734: PPUSH
35735: CALL_OW 177
// end ;
35739: GO 35697
35741: POP
35742: POP
// exit ;
35743: POP
35744: POP
35745: GO 35974
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35747: LD_ADDR_VAR 0 4
35751: PUSH
35752: LD_INT 22
35754: PUSH
35755: LD_VAR 0 5
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 91
35766: PUSH
35767: LD_VAR 0 8
35771: PUSH
35772: LD_INT 8
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: LD_INT 34
35785: PUSH
35786: LD_INT 12
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 34
35795: PUSH
35796: LD_INT 51
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 34
35805: PUSH
35806: LD_INT 32
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 34
35815: PUSH
35816: LD_INT 89
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: PPUSH
35835: CALL_OW 69
35839: ST_TO_ADDR
// if tmp then
35840: LD_VAR 0 4
35844: IFFALSE 35970
// begin for j in tmp do
35846: LD_ADDR_VAR 0 2
35850: PUSH
35851: LD_VAR 0 4
35855: PUSH
35856: FOR_IN
35857: IFFALSE 35968
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35859: LD_VAR 0 2
35863: PPUSH
35864: CALL_OW 262
35868: PUSH
35869: LD_INT 3
35871: EQUAL
35872: PUSH
35873: LD_VAR 0 2
35877: PPUSH
35878: CALL_OW 261
35882: PUSH
35883: LD_INT 20
35885: GREATER
35886: OR
35887: PUSH
35888: LD_VAR 0 2
35892: PPUSH
35893: CALL_OW 314
35897: NOT
35898: AND
35899: PUSH
35900: LD_VAR 0 2
35904: PPUSH
35905: CALL_OW 263
35909: PUSH
35910: LD_INT 1
35912: NONEQUAL
35913: PUSH
35914: LD_VAR 0 2
35918: PPUSH
35919: CALL_OW 311
35923: OR
35924: AND
35925: IFFALSE 35966
// begin ComCollect ( j , x , y ) ;
35927: LD_VAR 0 2
35931: PPUSH
35932: LD_VAR 0 6
35936: PPUSH
35937: LD_VAR 0 7
35941: PPUSH
35942: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_VAR 0 8
35955: PPUSH
35956: CALL_OW 172
// exit ;
35960: POP
35961: POP
35962: POP
35963: POP
35964: GO 35974
// end ;
35966: GO 35856
35968: POP
35969: POP
// end ; end ;
35970: GO 35345
35972: POP
35973: POP
// end ; end_of_file
35974: PPOPN 9
35976: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35977: LD_INT 0
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35983: LD_VAR 0 1
35987: PPUSH
35988: CALL_OW 264
35992: PUSH
35993: LD_INT 91
35995: EQUAL
35996: IFFALSE 36068
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35998: LD_INT 68
36000: PPUSH
36001: LD_VAR 0 1
36005: PPUSH
36006: CALL_OW 255
36010: PPUSH
36011: CALL_OW 321
36015: PUSH
36016: LD_INT 2
36018: EQUAL
36019: IFFALSE 36031
// eff := 70 else
36021: LD_ADDR_VAR 0 4
36025: PUSH
36026: LD_INT 70
36028: ST_TO_ADDR
36029: GO 36039
// eff := 30 ;
36031: LD_ADDR_VAR 0 4
36035: PUSH
36036: LD_INT 30
36038: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36039: LD_VAR 0 1
36043: PPUSH
36044: CALL_OW 250
36048: PPUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 251
36058: PPUSH
36059: LD_VAR 0 4
36063: PPUSH
36064: CALL_OW 495
// end ; end ;
36068: LD_VAR 0 2
36072: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36073: LD_INT 0
36075: PPUSH
// end ;
36076: LD_VAR 0 4
36080: RET
// export function SOS_Command ( cmd ) ; begin
36081: LD_INT 0
36083: PPUSH
// end ;
36084: LD_VAR 0 2
36088: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36089: LD_INT 0
36091: PPUSH
// end ;
36092: LD_VAR 0 6
36096: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36097: LD_INT 0
36099: PPUSH
36100: PPUSH
// if not vehicle or not factory then
36101: LD_VAR 0 1
36105: NOT
36106: PUSH
36107: LD_VAR 0 2
36111: NOT
36112: OR
36113: IFFALSE 36117
// exit ;
36115: GO 36348
// if factoryWaypoints >= factory then
36117: LD_EXP 96
36121: PUSH
36122: LD_VAR 0 2
36126: GREATEREQUAL
36127: IFFALSE 36348
// if factoryWaypoints [ factory ] then
36129: LD_EXP 96
36133: PUSH
36134: LD_VAR 0 2
36138: ARRAY
36139: IFFALSE 36348
// begin if GetControl ( vehicle ) = control_manual then
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 263
36150: PUSH
36151: LD_INT 1
36153: EQUAL
36154: IFFALSE 36235
// begin driver := IsDrivenBy ( vehicle ) ;
36156: LD_ADDR_VAR 0 4
36160: PUSH
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL_OW 311
36170: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36171: LD_VAR 0 4
36175: PPUSH
36176: LD_EXP 96
36180: PUSH
36181: LD_VAR 0 2
36185: ARRAY
36186: PUSH
36187: LD_INT 3
36189: ARRAY
36190: PPUSH
36191: LD_EXP 96
36195: PUSH
36196: LD_VAR 0 2
36200: ARRAY
36201: PUSH
36202: LD_INT 4
36204: ARRAY
36205: PPUSH
36206: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36210: LD_VAR 0 4
36214: PPUSH
36215: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36219: LD_VAR 0 4
36223: PPUSH
36224: LD_VAR 0 2
36228: PPUSH
36229: CALL_OW 180
// end else
36233: GO 36348
// if GetControl ( vehicle ) = control_remote then
36235: LD_VAR 0 1
36239: PPUSH
36240: CALL_OW 263
36244: PUSH
36245: LD_INT 2
36247: EQUAL
36248: IFFALSE 36309
// begin wait ( 0 0$2 ) ;
36250: LD_INT 70
36252: PPUSH
36253: CALL_OW 67
// if Connect ( vehicle ) then
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL 48197 0 1
36266: IFFALSE 36307
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36268: LD_VAR 0 1
36272: PPUSH
36273: LD_EXP 96
36277: PUSH
36278: LD_VAR 0 2
36282: ARRAY
36283: PUSH
36284: LD_INT 3
36286: ARRAY
36287: PPUSH
36288: LD_EXP 96
36292: PUSH
36293: LD_VAR 0 2
36297: ARRAY
36298: PUSH
36299: LD_INT 4
36301: ARRAY
36302: PPUSH
36303: CALL_OW 171
// end else
36307: GO 36348
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36309: LD_VAR 0 1
36313: PPUSH
36314: LD_EXP 96
36318: PUSH
36319: LD_VAR 0 2
36323: ARRAY
36324: PUSH
36325: LD_INT 3
36327: ARRAY
36328: PPUSH
36329: LD_EXP 96
36333: PUSH
36334: LD_VAR 0 2
36338: ARRAY
36339: PUSH
36340: LD_INT 4
36342: ARRAY
36343: PPUSH
36344: CALL_OW 171
// end ; end ;
36348: LD_VAR 0 3
36352: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36353: LD_INT 0
36355: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36356: LD_VAR 0 1
36360: PUSH
36361: LD_INT 250
36363: EQUAL
36364: PUSH
36365: LD_VAR 0 2
36369: PPUSH
36370: CALL_OW 264
36374: PUSH
36375: LD_INT 81
36377: EQUAL
36378: AND
36379: IFFALSE 36400
// MinerPlaceMine ( unit , x , y ) ;
36381: LD_VAR 0 2
36385: PPUSH
36386: LD_VAR 0 4
36390: PPUSH
36391: LD_VAR 0 5
36395: PPUSH
36396: CALL 38785 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36400: LD_VAR 0 1
36404: PUSH
36405: LD_INT 251
36407: EQUAL
36408: PUSH
36409: LD_VAR 0 2
36413: PPUSH
36414: CALL_OW 264
36418: PUSH
36419: LD_INT 81
36421: EQUAL
36422: AND
36423: IFFALSE 36444
// MinerDetonateMine ( unit , x , y ) ;
36425: LD_VAR 0 2
36429: PPUSH
36430: LD_VAR 0 4
36434: PPUSH
36435: LD_VAR 0 5
36439: PPUSH
36440: CALL 39060 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36444: LD_VAR 0 1
36448: PUSH
36449: LD_INT 252
36451: EQUAL
36452: PUSH
36453: LD_VAR 0 2
36457: PPUSH
36458: CALL_OW 264
36462: PUSH
36463: LD_INT 81
36465: EQUAL
36466: AND
36467: IFFALSE 36488
// MinerCreateMinefield ( unit , x , y ) ;
36469: LD_VAR 0 2
36473: PPUSH
36474: LD_VAR 0 4
36478: PPUSH
36479: LD_VAR 0 5
36483: PPUSH
36484: CALL 39477 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36488: LD_VAR 0 1
36492: PUSH
36493: LD_INT 253
36495: EQUAL
36496: PUSH
36497: LD_VAR 0 2
36501: PPUSH
36502: CALL_OW 257
36506: PUSH
36507: LD_INT 5
36509: EQUAL
36510: AND
36511: IFFALSE 36532
// ComBinocular ( unit , x , y ) ;
36513: LD_VAR 0 2
36517: PPUSH
36518: LD_VAR 0 4
36522: PPUSH
36523: LD_VAR 0 5
36527: PPUSH
36528: CALL 39846 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36532: LD_VAR 0 1
36536: PUSH
36537: LD_INT 254
36539: EQUAL
36540: PUSH
36541: LD_VAR 0 2
36545: PPUSH
36546: CALL_OW 264
36550: PUSH
36551: LD_INT 99
36553: EQUAL
36554: AND
36555: PUSH
36556: LD_VAR 0 3
36560: PPUSH
36561: CALL_OW 263
36565: PUSH
36566: LD_INT 3
36568: EQUAL
36569: AND
36570: IFFALSE 36586
// HackDestroyVehicle ( unit , selectedUnit ) ;
36572: LD_VAR 0 2
36576: PPUSH
36577: LD_VAR 0 3
36581: PPUSH
36582: CALL 38149 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36586: LD_VAR 0 1
36590: PUSH
36591: LD_INT 255
36593: EQUAL
36594: PUSH
36595: LD_VAR 0 2
36599: PPUSH
36600: CALL_OW 264
36604: PUSH
36605: LD_INT 14
36607: PUSH
36608: LD_INT 53
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: IN
36615: AND
36616: PUSH
36617: LD_VAR 0 4
36621: PPUSH
36622: LD_VAR 0 5
36626: PPUSH
36627: CALL_OW 488
36631: AND
36632: IFFALSE 36656
// CutTreeXYR ( unit , x , y , 12 ) ;
36634: LD_VAR 0 2
36638: PPUSH
36639: LD_VAR 0 4
36643: PPUSH
36644: LD_VAR 0 5
36648: PPUSH
36649: LD_INT 12
36651: PPUSH
36652: CALL 36719 0 4
// if cmd = 256 then
36656: LD_VAR 0 1
36660: PUSH
36661: LD_INT 256
36663: EQUAL
36664: IFFALSE 36685
// SetFactoryWaypoint ( unit , x , y ) ;
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_VAR 0 4
36675: PPUSH
36676: LD_VAR 0 5
36680: PPUSH
36681: CALL 34666 0 3
// if cmd = 257 then
36685: LD_VAR 0 1
36689: PUSH
36690: LD_INT 257
36692: EQUAL
36693: IFFALSE 36714
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36695: LD_VAR 0 2
36699: PPUSH
36700: LD_VAR 0 4
36704: PPUSH
36705: LD_VAR 0 5
36709: PPUSH
36710: CALL 35028 0 3
// end ;
36714: LD_VAR 0 6
36718: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36719: LD_INT 0
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36730: LD_VAR 0 1
36734: NOT
36735: PUSH
36736: LD_VAR 0 2
36740: PPUSH
36741: LD_VAR 0 3
36745: PPUSH
36746: CALL_OW 488
36750: NOT
36751: OR
36752: PUSH
36753: LD_VAR 0 4
36757: NOT
36758: OR
36759: IFFALSE 36763
// exit ;
36761: GO 37103
// list := [ ] ;
36763: LD_ADDR_VAR 0 13
36767: PUSH
36768: EMPTY
36769: ST_TO_ADDR
// if x - r < 0 then
36770: LD_VAR 0 2
36774: PUSH
36775: LD_VAR 0 4
36779: MINUS
36780: PUSH
36781: LD_INT 0
36783: LESS
36784: IFFALSE 36796
// min_x := 0 else
36786: LD_ADDR_VAR 0 7
36790: PUSH
36791: LD_INT 0
36793: ST_TO_ADDR
36794: GO 36812
// min_x := x - r ;
36796: LD_ADDR_VAR 0 7
36800: PUSH
36801: LD_VAR 0 2
36805: PUSH
36806: LD_VAR 0 4
36810: MINUS
36811: ST_TO_ADDR
// if y - r < 0 then
36812: LD_VAR 0 3
36816: PUSH
36817: LD_VAR 0 4
36821: MINUS
36822: PUSH
36823: LD_INT 0
36825: LESS
36826: IFFALSE 36838
// min_y := 0 else
36828: LD_ADDR_VAR 0 8
36832: PUSH
36833: LD_INT 0
36835: ST_TO_ADDR
36836: GO 36854
// min_y := y - r ;
36838: LD_ADDR_VAR 0 8
36842: PUSH
36843: LD_VAR 0 3
36847: PUSH
36848: LD_VAR 0 4
36852: MINUS
36853: ST_TO_ADDR
// max_x := x + r ;
36854: LD_ADDR_VAR 0 9
36858: PUSH
36859: LD_VAR 0 2
36863: PUSH
36864: LD_VAR 0 4
36868: PLUS
36869: ST_TO_ADDR
// max_y := y + r ;
36870: LD_ADDR_VAR 0 10
36874: PUSH
36875: LD_VAR 0 3
36879: PUSH
36880: LD_VAR 0 4
36884: PLUS
36885: ST_TO_ADDR
// for _x = min_x to max_x do
36886: LD_ADDR_VAR 0 11
36890: PUSH
36891: DOUBLE
36892: LD_VAR 0 7
36896: DEC
36897: ST_TO_ADDR
36898: LD_VAR 0 9
36902: PUSH
36903: FOR_TO
36904: IFFALSE 37021
// for _y = min_y to max_y do
36906: LD_ADDR_VAR 0 12
36910: PUSH
36911: DOUBLE
36912: LD_VAR 0 8
36916: DEC
36917: ST_TO_ADDR
36918: LD_VAR 0 10
36922: PUSH
36923: FOR_TO
36924: IFFALSE 37017
// begin if not ValidHex ( _x , _y ) then
36926: LD_VAR 0 11
36930: PPUSH
36931: LD_VAR 0 12
36935: PPUSH
36936: CALL_OW 488
36940: NOT
36941: IFFALSE 36945
// continue ;
36943: GO 36923
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36945: LD_VAR 0 11
36949: PPUSH
36950: LD_VAR 0 12
36954: PPUSH
36955: CALL_OW 351
36959: PUSH
36960: LD_VAR 0 11
36964: PPUSH
36965: LD_VAR 0 12
36969: PPUSH
36970: CALL_OW 554
36974: AND
36975: IFFALSE 37015
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36977: LD_ADDR_VAR 0 13
36981: PUSH
36982: LD_VAR 0 13
36986: PPUSH
36987: LD_VAR 0 13
36991: PUSH
36992: LD_INT 1
36994: PLUS
36995: PPUSH
36996: LD_VAR 0 11
37000: PUSH
37001: LD_VAR 0 12
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PPUSH
37010: CALL_OW 2
37014: ST_TO_ADDR
// end ;
37015: GO 36923
37017: POP
37018: POP
37019: GO 36903
37021: POP
37022: POP
// if not list then
37023: LD_VAR 0 13
37027: NOT
37028: IFFALSE 37032
// exit ;
37030: GO 37103
// for i in list do
37032: LD_ADDR_VAR 0 6
37036: PUSH
37037: LD_VAR 0 13
37041: PUSH
37042: FOR_IN
37043: IFFALSE 37101
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37045: LD_VAR 0 1
37049: PPUSH
37050: LD_STRING M
37052: PUSH
37053: LD_VAR 0 6
37057: PUSH
37058: LD_INT 1
37060: ARRAY
37061: PUSH
37062: LD_VAR 0 6
37066: PUSH
37067: LD_INT 2
37069: ARRAY
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: PPUSH
37095: CALL_OW 447
37099: GO 37042
37101: POP
37102: POP
// end ;
37103: LD_VAR 0 5
37107: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37108: LD_EXP 99
37112: NOT
37113: IFFALSE 37163
37115: GO 37117
37117: DISABLE
// begin initHack := true ;
37118: LD_ADDR_EXP 99
37122: PUSH
37123: LD_INT 1
37125: ST_TO_ADDR
// hackTanks := [ ] ;
37126: LD_ADDR_EXP 100
37130: PUSH
37131: EMPTY
37132: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37133: LD_ADDR_EXP 101
37137: PUSH
37138: EMPTY
37139: ST_TO_ADDR
// hackLimit := 3 ;
37140: LD_ADDR_EXP 102
37144: PUSH
37145: LD_INT 3
37147: ST_TO_ADDR
// hackDist := 12 ;
37148: LD_ADDR_EXP 103
37152: PUSH
37153: LD_INT 12
37155: ST_TO_ADDR
// hackCounter := [ ] ;
37156: LD_ADDR_EXP 104
37160: PUSH
37161: EMPTY
37162: ST_TO_ADDR
// end ;
37163: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37164: LD_EXP 99
37168: PUSH
37169: LD_INT 34
37171: PUSH
37172: LD_INT 99
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PPUSH
37179: CALL_OW 69
37183: AND
37184: IFFALSE 37437
37186: GO 37188
37188: DISABLE
37189: LD_INT 0
37191: PPUSH
37192: PPUSH
// begin enable ;
37193: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37194: LD_ADDR_VAR 0 1
37198: PUSH
37199: LD_INT 34
37201: PUSH
37202: LD_INT 99
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PPUSH
37209: CALL_OW 69
37213: PUSH
37214: FOR_IN
37215: IFFALSE 37435
// begin if not i in hackTanks then
37217: LD_VAR 0 1
37221: PUSH
37222: LD_EXP 100
37226: IN
37227: NOT
37228: IFFALSE 37311
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37230: LD_ADDR_EXP 100
37234: PUSH
37235: LD_EXP 100
37239: PPUSH
37240: LD_EXP 100
37244: PUSH
37245: LD_INT 1
37247: PLUS
37248: PPUSH
37249: LD_VAR 0 1
37253: PPUSH
37254: CALL_OW 1
37258: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37259: LD_ADDR_EXP 101
37263: PUSH
37264: LD_EXP 101
37268: PPUSH
37269: LD_EXP 101
37273: PUSH
37274: LD_INT 1
37276: PLUS
37277: PPUSH
37278: EMPTY
37279: PPUSH
37280: CALL_OW 1
37284: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37285: LD_ADDR_EXP 104
37289: PUSH
37290: LD_EXP 104
37294: PPUSH
37295: LD_EXP 104
37299: PUSH
37300: LD_INT 1
37302: PLUS
37303: PPUSH
37304: EMPTY
37305: PPUSH
37306: CALL_OW 1
37310: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL_OW 302
37320: NOT
37321: IFFALSE 37334
// begin HackUnlinkAll ( i ) ;
37323: LD_VAR 0 1
37327: PPUSH
37328: CALL 37440 0 1
// continue ;
37332: GO 37214
// end ; HackCheckCapturedStatus ( i ) ;
37334: LD_VAR 0 1
37338: PPUSH
37339: CALL 37883 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37343: LD_ADDR_VAR 0 2
37347: PUSH
37348: LD_INT 81
37350: PUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 255
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 33
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 91
37377: PUSH
37378: LD_VAR 0 1
37382: PUSH
37383: LD_EXP 103
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 50
37395: PUSH
37396: EMPTY
37397: LIST
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: PPUSH
37405: CALL_OW 69
37409: ST_TO_ADDR
// if not tmp then
37410: LD_VAR 0 2
37414: NOT
37415: IFFALSE 37419
// continue ;
37417: GO 37214
// HackLink ( i , tmp ) ;
37419: LD_VAR 0 1
37423: PPUSH
37424: LD_VAR 0 2
37428: PPUSH
37429: CALL 37576 0 2
// end ;
37433: GO 37214
37435: POP
37436: POP
// end ;
37437: PPOPN 2
37439: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37440: LD_INT 0
37442: PPUSH
37443: PPUSH
37444: PPUSH
// if not hack in hackTanks then
37445: LD_VAR 0 1
37449: PUSH
37450: LD_EXP 100
37454: IN
37455: NOT
37456: IFFALSE 37460
// exit ;
37458: GO 37571
// index := GetElementIndex ( hackTanks , hack ) ;
37460: LD_ADDR_VAR 0 4
37464: PUSH
37465: LD_EXP 100
37469: PPUSH
37470: LD_VAR 0 1
37474: PPUSH
37475: CALL 45013 0 2
37479: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37480: LD_EXP 101
37484: PUSH
37485: LD_VAR 0 4
37489: ARRAY
37490: IFFALSE 37571
// begin for i in hackTanksCaptured [ index ] do
37492: LD_ADDR_VAR 0 3
37496: PUSH
37497: LD_EXP 101
37501: PUSH
37502: LD_VAR 0 4
37506: ARRAY
37507: PUSH
37508: FOR_IN
37509: IFFALSE 37535
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37511: LD_VAR 0 3
37515: PUSH
37516: LD_INT 1
37518: ARRAY
37519: PPUSH
37520: LD_VAR 0 3
37524: PUSH
37525: LD_INT 2
37527: ARRAY
37528: PPUSH
37529: CALL_OW 235
37533: GO 37508
37535: POP
37536: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37537: LD_ADDR_EXP 101
37541: PUSH
37542: LD_EXP 101
37546: PPUSH
37547: LD_VAR 0 4
37551: PPUSH
37552: EMPTY
37553: PPUSH
37554: CALL_OW 1
37558: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37559: LD_VAR 0 1
37563: PPUSH
37564: LD_INT 0
37566: PPUSH
37567: CALL_OW 505
// end ; end ;
37571: LD_VAR 0 2
37575: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37576: LD_INT 0
37578: PPUSH
37579: PPUSH
37580: PPUSH
// if not hack in hackTanks or not vehicles then
37581: LD_VAR 0 1
37585: PUSH
37586: LD_EXP 100
37590: IN
37591: NOT
37592: PUSH
37593: LD_VAR 0 2
37597: NOT
37598: OR
37599: IFFALSE 37603
// exit ;
37601: GO 37878
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37603: LD_ADDR_VAR 0 2
37607: PUSH
37608: LD_VAR 0 1
37612: PPUSH
37613: LD_VAR 0 2
37617: PPUSH
37618: LD_INT 1
37620: PPUSH
37621: LD_INT 1
37623: PPUSH
37624: CALL 45663 0 4
37628: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37629: LD_ADDR_VAR 0 5
37633: PUSH
37634: LD_EXP 100
37638: PPUSH
37639: LD_VAR 0 1
37643: PPUSH
37644: CALL 45013 0 2
37648: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37649: LD_EXP 101
37653: PUSH
37654: LD_VAR 0 5
37658: ARRAY
37659: PUSH
37660: LD_EXP 102
37664: LESS
37665: IFFALSE 37854
// begin for i := 1 to vehicles do
37667: LD_ADDR_VAR 0 4
37671: PUSH
37672: DOUBLE
37673: LD_INT 1
37675: DEC
37676: ST_TO_ADDR
37677: LD_VAR 0 2
37681: PUSH
37682: FOR_TO
37683: IFFALSE 37852
// begin if hackTanksCaptured [ index ] = hackLimit then
37685: LD_EXP 101
37689: PUSH
37690: LD_VAR 0 5
37694: ARRAY
37695: PUSH
37696: LD_EXP 102
37700: EQUAL
37701: IFFALSE 37705
// break ;
37703: GO 37852
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37705: LD_ADDR_EXP 104
37709: PUSH
37710: LD_EXP 104
37714: PPUSH
37715: LD_VAR 0 5
37719: PPUSH
37720: LD_EXP 104
37724: PUSH
37725: LD_VAR 0 5
37729: ARRAY
37730: PUSH
37731: LD_INT 1
37733: PLUS
37734: PPUSH
37735: CALL_OW 1
37739: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37740: LD_ADDR_EXP 101
37744: PUSH
37745: LD_EXP 101
37749: PPUSH
37750: LD_VAR 0 5
37754: PUSH
37755: LD_EXP 101
37759: PUSH
37760: LD_VAR 0 5
37764: ARRAY
37765: PUSH
37766: LD_INT 1
37768: PLUS
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PPUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_VAR 0 4
37783: ARRAY
37784: PUSH
37785: LD_VAR 0 2
37789: PUSH
37790: LD_VAR 0 4
37794: ARRAY
37795: PPUSH
37796: CALL_OW 255
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PPUSH
37805: CALL 45228 0 3
37809: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37810: LD_VAR 0 2
37814: PUSH
37815: LD_VAR 0 4
37819: ARRAY
37820: PPUSH
37821: LD_VAR 0 1
37825: PPUSH
37826: CALL_OW 255
37830: PPUSH
37831: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37835: LD_VAR 0 2
37839: PUSH
37840: LD_VAR 0 4
37844: ARRAY
37845: PPUSH
37846: CALL_OW 141
// end ;
37850: GO 37682
37852: POP
37853: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37854: LD_VAR 0 1
37858: PPUSH
37859: LD_EXP 101
37863: PUSH
37864: LD_VAR 0 5
37868: ARRAY
37869: PUSH
37870: LD_INT 0
37872: PLUS
37873: PPUSH
37874: CALL_OW 505
// end ;
37878: LD_VAR 0 3
37882: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37883: LD_INT 0
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
// if not hack in hackTanks then
37889: LD_VAR 0 1
37893: PUSH
37894: LD_EXP 100
37898: IN
37899: NOT
37900: IFFALSE 37904
// exit ;
37902: GO 38144
// index := GetElementIndex ( hackTanks , hack ) ;
37904: LD_ADDR_VAR 0 4
37908: PUSH
37909: LD_EXP 100
37913: PPUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL 45013 0 2
37923: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: DOUBLE
37930: LD_EXP 101
37934: PUSH
37935: LD_VAR 0 4
37939: ARRAY
37940: INC
37941: ST_TO_ADDR
37942: LD_INT 1
37944: PUSH
37945: FOR_DOWNTO
37946: IFFALSE 38118
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37948: LD_ADDR_VAR 0 5
37952: PUSH
37953: LD_EXP 101
37957: PUSH
37958: LD_VAR 0 4
37962: ARRAY
37963: PUSH
37964: LD_VAR 0 3
37968: ARRAY
37969: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37970: LD_VAR 0 5
37974: PUSH
37975: LD_INT 1
37977: ARRAY
37978: PPUSH
37979: CALL_OW 302
37983: NOT
37984: PUSH
37985: LD_VAR 0 5
37989: PUSH
37990: LD_INT 1
37992: ARRAY
37993: PPUSH
37994: CALL_OW 255
37998: PUSH
37999: LD_VAR 0 1
38003: PPUSH
38004: CALL_OW 255
38008: NONEQUAL
38009: OR
38010: IFFALSE 38116
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38012: LD_VAR 0 5
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: PPUSH
38021: CALL_OW 305
38025: PUSH
38026: LD_VAR 0 5
38030: PUSH
38031: LD_INT 1
38033: ARRAY
38034: PPUSH
38035: CALL_OW 255
38039: PUSH
38040: LD_VAR 0 1
38044: PPUSH
38045: CALL_OW 255
38049: EQUAL
38050: AND
38051: IFFALSE 38075
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38053: LD_VAR 0 5
38057: PUSH
38058: LD_INT 1
38060: ARRAY
38061: PPUSH
38062: LD_VAR 0 5
38066: PUSH
38067: LD_INT 2
38069: ARRAY
38070: PPUSH
38071: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38075: LD_ADDR_EXP 101
38079: PUSH
38080: LD_EXP 101
38084: PPUSH
38085: LD_VAR 0 4
38089: PPUSH
38090: LD_EXP 101
38094: PUSH
38095: LD_VAR 0 4
38099: ARRAY
38100: PPUSH
38101: LD_VAR 0 3
38105: PPUSH
38106: CALL_OW 3
38110: PPUSH
38111: CALL_OW 1
38115: ST_TO_ADDR
// end ; end ;
38116: GO 37945
38118: POP
38119: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38120: LD_VAR 0 1
38124: PPUSH
38125: LD_EXP 101
38129: PUSH
38130: LD_VAR 0 4
38134: ARRAY
38135: PUSH
38136: LD_INT 0
38138: PLUS
38139: PPUSH
38140: CALL_OW 505
// end ;
38144: LD_VAR 0 2
38148: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38149: LD_INT 0
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
// if not hack in hackTanks then
38155: LD_VAR 0 1
38159: PUSH
38160: LD_EXP 100
38164: IN
38165: NOT
38166: IFFALSE 38170
// exit ;
38168: GO 38255
// index := GetElementIndex ( hackTanks , hack ) ;
38170: LD_ADDR_VAR 0 5
38174: PUSH
38175: LD_EXP 100
38179: PPUSH
38180: LD_VAR 0 1
38184: PPUSH
38185: CALL 45013 0 2
38189: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38190: LD_ADDR_VAR 0 4
38194: PUSH
38195: DOUBLE
38196: LD_INT 1
38198: DEC
38199: ST_TO_ADDR
38200: LD_EXP 101
38204: PUSH
38205: LD_VAR 0 5
38209: ARRAY
38210: PUSH
38211: FOR_TO
38212: IFFALSE 38253
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38214: LD_EXP 101
38218: PUSH
38219: LD_VAR 0 5
38223: ARRAY
38224: PUSH
38225: LD_VAR 0 4
38229: ARRAY
38230: PUSH
38231: LD_INT 1
38233: ARRAY
38234: PUSH
38235: LD_VAR 0 2
38239: EQUAL
38240: IFFALSE 38251
// KillUnit ( vehicle ) ;
38242: LD_VAR 0 2
38246: PPUSH
38247: CALL_OW 66
38251: GO 38211
38253: POP
38254: POP
// end ;
38255: LD_VAR 0 3
38259: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38260: LD_EXP 105
38264: NOT
38265: IFFALSE 38300
38267: GO 38269
38269: DISABLE
// begin initMiner := true ;
38270: LD_ADDR_EXP 105
38274: PUSH
38275: LD_INT 1
38277: ST_TO_ADDR
// minersList := [ ] ;
38278: LD_ADDR_EXP 106
38282: PUSH
38283: EMPTY
38284: ST_TO_ADDR
// minerMinesList := [ ] ;
38285: LD_ADDR_EXP 107
38289: PUSH
38290: EMPTY
38291: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38292: LD_ADDR_EXP 108
38296: PUSH
38297: LD_INT 5
38299: ST_TO_ADDR
// end ;
38300: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38301: LD_EXP 105
38305: PUSH
38306: LD_INT 34
38308: PUSH
38309: LD_INT 81
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PPUSH
38316: CALL_OW 69
38320: AND
38321: IFFALSE 38782
38323: GO 38325
38325: DISABLE
38326: LD_INT 0
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
// begin enable ;
38332: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38333: LD_ADDR_VAR 0 1
38337: PUSH
38338: LD_INT 34
38340: PUSH
38341: LD_INT 81
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PPUSH
38348: CALL_OW 69
38352: PUSH
38353: FOR_IN
38354: IFFALSE 38426
// begin if not i in minersList then
38356: LD_VAR 0 1
38360: PUSH
38361: LD_EXP 106
38365: IN
38366: NOT
38367: IFFALSE 38424
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38369: LD_ADDR_EXP 106
38373: PUSH
38374: LD_EXP 106
38378: PPUSH
38379: LD_EXP 106
38383: PUSH
38384: LD_INT 1
38386: PLUS
38387: PPUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 1
38397: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38398: LD_ADDR_EXP 107
38402: PUSH
38403: LD_EXP 107
38407: PPUSH
38408: LD_EXP 107
38412: PUSH
38413: LD_INT 1
38415: PLUS
38416: PPUSH
38417: EMPTY
38418: PPUSH
38419: CALL_OW 1
38423: ST_TO_ADDR
// end end ;
38424: GO 38353
38426: POP
38427: POP
// for i := minerMinesList downto 1 do
38428: LD_ADDR_VAR 0 1
38432: PUSH
38433: DOUBLE
38434: LD_EXP 107
38438: INC
38439: ST_TO_ADDR
38440: LD_INT 1
38442: PUSH
38443: FOR_DOWNTO
38444: IFFALSE 38780
// begin if IsLive ( minersList [ i ] ) then
38446: LD_EXP 106
38450: PUSH
38451: LD_VAR 0 1
38455: ARRAY
38456: PPUSH
38457: CALL_OW 300
38461: IFFALSE 38489
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38463: LD_EXP 106
38467: PUSH
38468: LD_VAR 0 1
38472: ARRAY
38473: PPUSH
38474: LD_EXP 107
38478: PUSH
38479: LD_VAR 0 1
38483: ARRAY
38484: PPUSH
38485: CALL_OW 505
// if not minerMinesList [ i ] then
38489: LD_EXP 107
38493: PUSH
38494: LD_VAR 0 1
38498: ARRAY
38499: NOT
38500: IFFALSE 38504
// continue ;
38502: GO 38443
// for j := minerMinesList [ i ] downto 1 do
38504: LD_ADDR_VAR 0 2
38508: PUSH
38509: DOUBLE
38510: LD_EXP 107
38514: PUSH
38515: LD_VAR 0 1
38519: ARRAY
38520: INC
38521: ST_TO_ADDR
38522: LD_INT 1
38524: PUSH
38525: FOR_DOWNTO
38526: IFFALSE 38776
// begin side := GetSide ( minersList [ i ] ) ;
38528: LD_ADDR_VAR 0 3
38532: PUSH
38533: LD_EXP 106
38537: PUSH
38538: LD_VAR 0 1
38542: ARRAY
38543: PPUSH
38544: CALL_OW 255
38548: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38549: LD_ADDR_VAR 0 4
38553: PUSH
38554: LD_EXP 107
38558: PUSH
38559: LD_VAR 0 1
38563: ARRAY
38564: PUSH
38565: LD_VAR 0 2
38569: ARRAY
38570: PUSH
38571: LD_INT 1
38573: ARRAY
38574: PPUSH
38575: LD_EXP 107
38579: PUSH
38580: LD_VAR 0 1
38584: ARRAY
38585: PUSH
38586: LD_VAR 0 2
38590: ARRAY
38591: PUSH
38592: LD_INT 2
38594: ARRAY
38595: PPUSH
38596: CALL_OW 428
38600: ST_TO_ADDR
// if not tmp then
38601: LD_VAR 0 4
38605: NOT
38606: IFFALSE 38610
// continue ;
38608: GO 38525
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38610: LD_VAR 0 4
38614: PUSH
38615: LD_INT 81
38617: PUSH
38618: LD_VAR 0 3
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PPUSH
38627: CALL_OW 69
38631: IN
38632: PUSH
38633: LD_EXP 107
38637: PUSH
38638: LD_VAR 0 1
38642: ARRAY
38643: PUSH
38644: LD_VAR 0 2
38648: ARRAY
38649: PUSH
38650: LD_INT 1
38652: ARRAY
38653: PPUSH
38654: LD_EXP 107
38658: PUSH
38659: LD_VAR 0 1
38663: ARRAY
38664: PUSH
38665: LD_VAR 0 2
38669: ARRAY
38670: PUSH
38671: LD_INT 2
38673: ARRAY
38674: PPUSH
38675: CALL_OW 458
38679: AND
38680: IFFALSE 38774
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38682: LD_EXP 107
38686: PUSH
38687: LD_VAR 0 1
38691: ARRAY
38692: PUSH
38693: LD_VAR 0 2
38697: ARRAY
38698: PUSH
38699: LD_INT 1
38701: ARRAY
38702: PPUSH
38703: LD_EXP 107
38707: PUSH
38708: LD_VAR 0 1
38712: ARRAY
38713: PUSH
38714: LD_VAR 0 2
38718: ARRAY
38719: PUSH
38720: LD_INT 2
38722: ARRAY
38723: PPUSH
38724: LD_VAR 0 3
38728: PPUSH
38729: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38733: LD_ADDR_EXP 107
38737: PUSH
38738: LD_EXP 107
38742: PPUSH
38743: LD_VAR 0 1
38747: PPUSH
38748: LD_EXP 107
38752: PUSH
38753: LD_VAR 0 1
38757: ARRAY
38758: PPUSH
38759: LD_VAR 0 2
38763: PPUSH
38764: CALL_OW 3
38768: PPUSH
38769: CALL_OW 1
38773: ST_TO_ADDR
// end ; end ;
38774: GO 38525
38776: POP
38777: POP
// end ;
38778: GO 38443
38780: POP
38781: POP
// end ;
38782: PPOPN 4
38784: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38785: LD_INT 0
38787: PPUSH
38788: PPUSH
// result := false ;
38789: LD_ADDR_VAR 0 4
38793: PUSH
38794: LD_INT 0
38796: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 264
38806: PUSH
38807: LD_INT 81
38809: EQUAL
38810: NOT
38811: IFFALSE 38815
// exit ;
38813: GO 39055
// index := GetElementIndex ( minersList , unit ) ;
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: LD_EXP 106
38824: PPUSH
38825: LD_VAR 0 1
38829: PPUSH
38830: CALL 45013 0 2
38834: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38835: LD_EXP 107
38839: PUSH
38840: LD_VAR 0 5
38844: ARRAY
38845: PUSH
38846: LD_EXP 108
38850: GREATEREQUAL
38851: IFFALSE 38855
// exit ;
38853: GO 39055
// ComMoveXY ( unit , x , y ) ;
38855: LD_VAR 0 1
38859: PPUSH
38860: LD_VAR 0 2
38864: PPUSH
38865: LD_VAR 0 3
38869: PPUSH
38870: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38874: LD_INT 35
38876: PPUSH
38877: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38881: LD_VAR 0 1
38885: PPUSH
38886: LD_VAR 0 2
38890: PPUSH
38891: LD_VAR 0 3
38895: PPUSH
38896: CALL 76368 0 3
38900: NOT
38901: PUSH
38902: LD_VAR 0 1
38906: PPUSH
38907: CALL_OW 314
38911: AND
38912: IFFALSE 38916
// exit ;
38914: GO 39055
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38916: LD_VAR 0 2
38920: PPUSH
38921: LD_VAR 0 3
38925: PPUSH
38926: CALL_OW 428
38930: PUSH
38931: LD_VAR 0 1
38935: EQUAL
38936: PUSH
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 314
38946: NOT
38947: AND
38948: IFFALSE 38874
// PlaySoundXY ( x , y , PlantMine ) ;
38950: LD_VAR 0 2
38954: PPUSH
38955: LD_VAR 0 3
38959: PPUSH
38960: LD_STRING PlantMine
38962: PPUSH
38963: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38967: LD_VAR 0 2
38971: PPUSH
38972: LD_VAR 0 3
38976: PPUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL_OW 255
38986: PPUSH
38987: LD_INT 0
38989: PPUSH
38990: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38994: LD_ADDR_EXP 107
38998: PUSH
38999: LD_EXP 107
39003: PPUSH
39004: LD_VAR 0 5
39008: PUSH
39009: LD_EXP 107
39013: PUSH
39014: LD_VAR 0 5
39018: ARRAY
39019: PUSH
39020: LD_INT 1
39022: PLUS
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PPUSH
39028: LD_VAR 0 2
39032: PUSH
39033: LD_VAR 0 3
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PPUSH
39042: CALL 45228 0 3
39046: ST_TO_ADDR
// result := true ;
39047: LD_ADDR_VAR 0 4
39051: PUSH
39052: LD_INT 1
39054: ST_TO_ADDR
// end ;
39055: LD_VAR 0 4
39059: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39060: LD_INT 0
39062: PPUSH
39063: PPUSH
39064: PPUSH
// if not unit in minersList then
39065: LD_VAR 0 1
39069: PUSH
39070: LD_EXP 106
39074: IN
39075: NOT
39076: IFFALSE 39080
// exit ;
39078: GO 39472
// index := GetElementIndex ( minersList , unit ) ;
39080: LD_ADDR_VAR 0 6
39084: PUSH
39085: LD_EXP 106
39089: PPUSH
39090: LD_VAR 0 1
39094: PPUSH
39095: CALL 45013 0 2
39099: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39100: LD_ADDR_VAR 0 5
39104: PUSH
39105: DOUBLE
39106: LD_EXP 107
39110: PUSH
39111: LD_VAR 0 6
39115: ARRAY
39116: INC
39117: ST_TO_ADDR
39118: LD_INT 1
39120: PUSH
39121: FOR_DOWNTO
39122: IFFALSE 39283
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39124: LD_EXP 107
39128: PUSH
39129: LD_VAR 0 6
39133: ARRAY
39134: PUSH
39135: LD_VAR 0 5
39139: ARRAY
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PUSH
39145: LD_VAR 0 2
39149: EQUAL
39150: PUSH
39151: LD_EXP 107
39155: PUSH
39156: LD_VAR 0 6
39160: ARRAY
39161: PUSH
39162: LD_VAR 0 5
39166: ARRAY
39167: PUSH
39168: LD_INT 2
39170: ARRAY
39171: PUSH
39172: LD_VAR 0 3
39176: EQUAL
39177: AND
39178: IFFALSE 39281
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39180: LD_EXP 107
39184: PUSH
39185: LD_VAR 0 6
39189: ARRAY
39190: PUSH
39191: LD_VAR 0 5
39195: ARRAY
39196: PUSH
39197: LD_INT 1
39199: ARRAY
39200: PPUSH
39201: LD_EXP 107
39205: PUSH
39206: LD_VAR 0 6
39210: ARRAY
39211: PUSH
39212: LD_VAR 0 5
39216: ARRAY
39217: PUSH
39218: LD_INT 2
39220: ARRAY
39221: PPUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 255
39231: PPUSH
39232: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39236: LD_ADDR_EXP 107
39240: PUSH
39241: LD_EXP 107
39245: PPUSH
39246: LD_VAR 0 6
39250: PPUSH
39251: LD_EXP 107
39255: PUSH
39256: LD_VAR 0 6
39260: ARRAY
39261: PPUSH
39262: LD_VAR 0 5
39266: PPUSH
39267: CALL_OW 3
39271: PPUSH
39272: CALL_OW 1
39276: ST_TO_ADDR
// exit ;
39277: POP
39278: POP
39279: GO 39472
// end ; end ;
39281: GO 39121
39283: POP
39284: POP
// for i := minerMinesList [ index ] downto 1 do
39285: LD_ADDR_VAR 0 5
39289: PUSH
39290: DOUBLE
39291: LD_EXP 107
39295: PUSH
39296: LD_VAR 0 6
39300: ARRAY
39301: INC
39302: ST_TO_ADDR
39303: LD_INT 1
39305: PUSH
39306: FOR_DOWNTO
39307: IFFALSE 39470
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39309: LD_EXP 107
39313: PUSH
39314: LD_VAR 0 6
39318: ARRAY
39319: PUSH
39320: LD_VAR 0 5
39324: ARRAY
39325: PUSH
39326: LD_INT 1
39328: ARRAY
39329: PPUSH
39330: LD_EXP 107
39334: PUSH
39335: LD_VAR 0 6
39339: ARRAY
39340: PUSH
39341: LD_VAR 0 5
39345: ARRAY
39346: PUSH
39347: LD_INT 2
39349: ARRAY
39350: PPUSH
39351: LD_VAR 0 2
39355: PPUSH
39356: LD_VAR 0 3
39360: PPUSH
39361: CALL_OW 298
39365: PUSH
39366: LD_INT 6
39368: LESS
39369: IFFALSE 39468
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39371: LD_EXP 107
39375: PUSH
39376: LD_VAR 0 6
39380: ARRAY
39381: PUSH
39382: LD_VAR 0 5
39386: ARRAY
39387: PUSH
39388: LD_INT 1
39390: ARRAY
39391: PPUSH
39392: LD_EXP 107
39396: PUSH
39397: LD_VAR 0 6
39401: ARRAY
39402: PUSH
39403: LD_VAR 0 5
39407: ARRAY
39408: PUSH
39409: LD_INT 2
39411: ARRAY
39412: PPUSH
39413: LD_VAR 0 1
39417: PPUSH
39418: CALL_OW 255
39422: PPUSH
39423: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39427: LD_ADDR_EXP 107
39431: PUSH
39432: LD_EXP 107
39436: PPUSH
39437: LD_VAR 0 6
39441: PPUSH
39442: LD_EXP 107
39446: PUSH
39447: LD_VAR 0 6
39451: ARRAY
39452: PPUSH
39453: LD_VAR 0 5
39457: PPUSH
39458: CALL_OW 3
39462: PPUSH
39463: CALL_OW 1
39467: ST_TO_ADDR
// end ; end ;
39468: GO 39306
39470: POP
39471: POP
// end ;
39472: LD_VAR 0 4
39476: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39477: LD_INT 0
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
39487: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39488: LD_VAR 0 1
39492: PPUSH
39493: CALL_OW 264
39497: PUSH
39498: LD_INT 81
39500: EQUAL
39501: NOT
39502: PUSH
39503: LD_VAR 0 1
39507: PUSH
39508: LD_EXP 106
39512: IN
39513: NOT
39514: OR
39515: IFFALSE 39519
// exit ;
39517: GO 39841
// index := GetElementIndex ( minersList , unit ) ;
39519: LD_ADDR_VAR 0 6
39523: PUSH
39524: LD_EXP 106
39528: PPUSH
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL 45013 0 2
39538: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39539: LD_ADDR_VAR 0 8
39543: PUSH
39544: LD_EXP 108
39548: PUSH
39549: LD_EXP 107
39553: PUSH
39554: LD_VAR 0 6
39558: ARRAY
39559: MINUS
39560: ST_TO_ADDR
// if not minesFreeAmount then
39561: LD_VAR 0 8
39565: NOT
39566: IFFALSE 39570
// exit ;
39568: GO 39841
// tmp := [ ] ;
39570: LD_ADDR_VAR 0 7
39574: PUSH
39575: EMPTY
39576: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39577: LD_ADDR_VAR 0 5
39581: PUSH
39582: DOUBLE
39583: LD_INT 1
39585: DEC
39586: ST_TO_ADDR
39587: LD_VAR 0 8
39591: PUSH
39592: FOR_TO
39593: IFFALSE 39788
// begin _d := rand ( 0 , 5 ) ;
39595: LD_ADDR_VAR 0 11
39599: PUSH
39600: LD_INT 0
39602: PPUSH
39603: LD_INT 5
39605: PPUSH
39606: CALL_OW 12
39610: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39611: LD_ADDR_VAR 0 12
39615: PUSH
39616: LD_INT 2
39618: PPUSH
39619: LD_INT 6
39621: PPUSH
39622: CALL_OW 12
39626: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39627: LD_ADDR_VAR 0 9
39631: PUSH
39632: LD_VAR 0 2
39636: PPUSH
39637: LD_VAR 0 11
39641: PPUSH
39642: LD_VAR 0 12
39646: PPUSH
39647: CALL_OW 272
39651: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39652: LD_ADDR_VAR 0 10
39656: PUSH
39657: LD_VAR 0 3
39661: PPUSH
39662: LD_VAR 0 11
39666: PPUSH
39667: LD_VAR 0 12
39671: PPUSH
39672: CALL_OW 273
39676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39677: LD_VAR 0 9
39681: PPUSH
39682: LD_VAR 0 10
39686: PPUSH
39687: CALL_OW 488
39691: PUSH
39692: LD_VAR 0 9
39696: PUSH
39697: LD_VAR 0 10
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_VAR 0 7
39710: IN
39711: NOT
39712: AND
39713: PUSH
39714: LD_VAR 0 9
39718: PPUSH
39719: LD_VAR 0 10
39723: PPUSH
39724: CALL_OW 458
39728: NOT
39729: AND
39730: IFFALSE 39772
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39732: LD_ADDR_VAR 0 7
39736: PUSH
39737: LD_VAR 0 7
39741: PPUSH
39742: LD_VAR 0 7
39746: PUSH
39747: LD_INT 1
39749: PLUS
39750: PPUSH
39751: LD_VAR 0 9
39755: PUSH
39756: LD_VAR 0 10
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PPUSH
39765: CALL_OW 1
39769: ST_TO_ADDR
39770: GO 39786
// i := i - 1 ;
39772: LD_ADDR_VAR 0 5
39776: PUSH
39777: LD_VAR 0 5
39781: PUSH
39782: LD_INT 1
39784: MINUS
39785: ST_TO_ADDR
// end ;
39786: GO 39592
39788: POP
39789: POP
// for i in tmp do
39790: LD_ADDR_VAR 0 5
39794: PUSH
39795: LD_VAR 0 7
39799: PUSH
39800: FOR_IN
39801: IFFALSE 39839
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39803: LD_VAR 0 1
39807: PPUSH
39808: LD_VAR 0 5
39812: PUSH
39813: LD_INT 1
39815: ARRAY
39816: PPUSH
39817: LD_VAR 0 5
39821: PUSH
39822: LD_INT 2
39824: ARRAY
39825: PPUSH
39826: CALL 38785 0 3
39830: NOT
39831: IFFALSE 39837
// exit ;
39833: POP
39834: POP
39835: GO 39841
39837: GO 39800
39839: POP
39840: POP
// end ;
39841: LD_VAR 0 4
39845: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39846: LD_INT 0
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
// if not GetClass ( unit ) = class_sniper then
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 257
39864: PUSH
39865: LD_INT 5
39867: EQUAL
39868: NOT
39869: IFFALSE 39873
// exit ;
39871: GO 40261
// dist := 8 ;
39873: LD_ADDR_VAR 0 5
39877: PUSH
39878: LD_INT 8
39880: ST_TO_ADDR
// viewRange := 12 ;
39881: LD_ADDR_VAR 0 7
39885: PUSH
39886: LD_INT 12
39888: ST_TO_ADDR
// side := GetSide ( unit ) ;
39889: LD_ADDR_VAR 0 6
39893: PUSH
39894: LD_VAR 0 1
39898: PPUSH
39899: CALL_OW 255
39903: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39904: LD_INT 61
39906: PPUSH
39907: LD_VAR 0 6
39911: PPUSH
39912: CALL_OW 321
39916: PUSH
39917: LD_INT 2
39919: EQUAL
39920: IFFALSE 39930
// viewRange := 16 ;
39922: LD_ADDR_VAR 0 7
39926: PUSH
39927: LD_INT 16
39929: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39930: LD_VAR 0 1
39934: PPUSH
39935: LD_VAR 0 2
39939: PPUSH
39940: LD_VAR 0 3
39944: PPUSH
39945: CALL_OW 297
39949: PUSH
39950: LD_VAR 0 5
39954: GREATER
39955: IFFALSE 40034
// begin ComMoveXY ( unit , x , y ) ;
39957: LD_VAR 0 1
39961: PPUSH
39962: LD_VAR 0 2
39966: PPUSH
39967: LD_VAR 0 3
39971: PPUSH
39972: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39976: LD_INT 35
39978: PPUSH
39979: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39983: LD_VAR 0 1
39987: PPUSH
39988: LD_VAR 0 2
39992: PPUSH
39993: LD_VAR 0 3
39997: PPUSH
39998: CALL 76368 0 3
40002: NOT
40003: IFFALSE 40007
// exit ;
40005: GO 40261
// until GetDistUnitXY ( unit , x , y ) < dist ;
40007: LD_VAR 0 1
40011: PPUSH
40012: LD_VAR 0 2
40016: PPUSH
40017: LD_VAR 0 3
40021: PPUSH
40022: CALL_OW 297
40026: PUSH
40027: LD_VAR 0 5
40031: LESS
40032: IFFALSE 39976
// end ; ComTurnXY ( unit , x , y ) ;
40034: LD_VAR 0 1
40038: PPUSH
40039: LD_VAR 0 2
40043: PPUSH
40044: LD_VAR 0 3
40048: PPUSH
40049: CALL_OW 118
// wait ( 5 ) ;
40053: LD_INT 5
40055: PPUSH
40056: CALL_OW 67
// _d := GetDir ( unit ) ;
40060: LD_ADDR_VAR 0 10
40064: PUSH
40065: LD_VAR 0 1
40069: PPUSH
40070: CALL_OW 254
40074: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40075: LD_ADDR_VAR 0 8
40079: PUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 250
40089: PPUSH
40090: LD_VAR 0 10
40094: PPUSH
40095: LD_VAR 0 5
40099: PPUSH
40100: CALL_OW 272
40104: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40105: LD_ADDR_VAR 0 9
40109: PUSH
40110: LD_VAR 0 1
40114: PPUSH
40115: CALL_OW 251
40119: PPUSH
40120: LD_VAR 0 10
40124: PPUSH
40125: LD_VAR 0 5
40129: PPUSH
40130: CALL_OW 273
40134: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40135: LD_VAR 0 8
40139: PPUSH
40140: LD_VAR 0 9
40144: PPUSH
40145: CALL_OW 488
40149: NOT
40150: IFFALSE 40154
// exit ;
40152: GO 40261
// ComAnimCustom ( unit , 1 ) ;
40154: LD_VAR 0 1
40158: PPUSH
40159: LD_INT 1
40161: PPUSH
40162: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40166: LD_VAR 0 8
40170: PPUSH
40171: LD_VAR 0 9
40175: PPUSH
40176: LD_VAR 0 6
40180: PPUSH
40181: LD_VAR 0 7
40185: PPUSH
40186: CALL_OW 330
// repeat wait ( 1 ) ;
40190: LD_INT 1
40192: PPUSH
40193: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL_OW 316
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 314
40216: OR
40217: PUSH
40218: LD_VAR 0 1
40222: PPUSH
40223: CALL_OW 302
40227: NOT
40228: OR
40229: PUSH
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 301
40239: OR
40240: IFFALSE 40190
// RemoveSeeing ( _x , _y , side ) ;
40242: LD_VAR 0 8
40246: PPUSH
40247: LD_VAR 0 9
40251: PPUSH
40252: LD_VAR 0 6
40256: PPUSH
40257: CALL_OW 331
// end ; end_of_file
40261: LD_VAR 0 4
40265: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40266: LD_INT 0
40268: PPUSH
40269: PPUSH
// if exist_mode then
40270: LD_VAR 0 2
40274: IFFALSE 40299
// unit := CreateCharacter ( prefix & ident ) else
40276: LD_ADDR_VAR 0 5
40280: PUSH
40281: LD_VAR 0 3
40285: PUSH
40286: LD_VAR 0 1
40290: STR
40291: PPUSH
40292: CALL_OW 34
40296: ST_TO_ADDR
40297: GO 40314
// unit := NewCharacter ( ident ) ;
40299: LD_ADDR_VAR 0 5
40303: PUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL_OW 25
40313: ST_TO_ADDR
// result := unit ;
40314: LD_ADDR_VAR 0 4
40318: PUSH
40319: LD_VAR 0 5
40323: ST_TO_ADDR
// end ;
40324: LD_VAR 0 4
40328: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40329: LD_INT 0
40331: PPUSH
40332: PPUSH
// if not side or not nation then
40333: LD_VAR 0 1
40337: NOT
40338: PUSH
40339: LD_VAR 0 2
40343: NOT
40344: OR
40345: IFFALSE 40349
// exit ;
40347: GO 41117
// case nation of nation_american :
40349: LD_VAR 0 2
40353: PUSH
40354: LD_INT 1
40356: DOUBLE
40357: EQUAL
40358: IFTRUE 40362
40360: GO 40576
40362: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40363: LD_ADDR_VAR 0 4
40367: PUSH
40368: LD_INT 35
40370: PUSH
40371: LD_INT 45
40373: PUSH
40374: LD_INT 46
40376: PUSH
40377: LD_INT 47
40379: PUSH
40380: LD_INT 82
40382: PUSH
40383: LD_INT 83
40385: PUSH
40386: LD_INT 84
40388: PUSH
40389: LD_INT 85
40391: PUSH
40392: LD_INT 86
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: LD_INT 6
40403: PUSH
40404: LD_INT 15
40406: PUSH
40407: LD_INT 16
40409: PUSH
40410: LD_INT 7
40412: PUSH
40413: LD_INT 12
40415: PUSH
40416: LD_INT 13
40418: PUSH
40419: LD_INT 10
40421: PUSH
40422: LD_INT 14
40424: PUSH
40425: LD_INT 20
40427: PUSH
40428: LD_INT 21
40430: PUSH
40431: LD_INT 22
40433: PUSH
40434: LD_INT 25
40436: PUSH
40437: LD_INT 32
40439: PUSH
40440: LD_INT 27
40442: PUSH
40443: LD_INT 36
40445: PUSH
40446: LD_INT 69
40448: PUSH
40449: LD_INT 39
40451: PUSH
40452: LD_INT 34
40454: PUSH
40455: LD_INT 40
40457: PUSH
40458: LD_INT 48
40460: PUSH
40461: LD_INT 49
40463: PUSH
40464: LD_INT 50
40466: PUSH
40467: LD_INT 51
40469: PUSH
40470: LD_INT 52
40472: PUSH
40473: LD_INT 53
40475: PUSH
40476: LD_INT 54
40478: PUSH
40479: LD_INT 55
40481: PUSH
40482: LD_INT 56
40484: PUSH
40485: LD_INT 57
40487: PUSH
40488: LD_INT 58
40490: PUSH
40491: LD_INT 59
40493: PUSH
40494: LD_INT 60
40496: PUSH
40497: LD_INT 61
40499: PUSH
40500: LD_INT 62
40502: PUSH
40503: LD_INT 80
40505: PUSH
40506: LD_INT 82
40508: PUSH
40509: LD_INT 83
40511: PUSH
40512: LD_INT 84
40514: PUSH
40515: LD_INT 85
40517: PUSH
40518: LD_INT 86
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
40574: GO 41041
40576: LD_INT 2
40578: DOUBLE
40579: EQUAL
40580: IFTRUE 40584
40582: GO 40810
40584: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40585: LD_ADDR_VAR 0 4
40589: PUSH
40590: LD_INT 35
40592: PUSH
40593: LD_INT 45
40595: PUSH
40596: LD_INT 46
40598: PUSH
40599: LD_INT 47
40601: PUSH
40602: LD_INT 82
40604: PUSH
40605: LD_INT 83
40607: PUSH
40608: LD_INT 84
40610: PUSH
40611: LD_INT 85
40613: PUSH
40614: LD_INT 87
40616: PUSH
40617: LD_INT 70
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: LD_INT 11
40625: PUSH
40626: LD_INT 3
40628: PUSH
40629: LD_INT 4
40631: PUSH
40632: LD_INT 5
40634: PUSH
40635: LD_INT 6
40637: PUSH
40638: LD_INT 15
40640: PUSH
40641: LD_INT 18
40643: PUSH
40644: LD_INT 7
40646: PUSH
40647: LD_INT 17
40649: PUSH
40650: LD_INT 8
40652: PUSH
40653: LD_INT 20
40655: PUSH
40656: LD_INT 21
40658: PUSH
40659: LD_INT 22
40661: PUSH
40662: LD_INT 72
40664: PUSH
40665: LD_INT 26
40667: PUSH
40668: LD_INT 69
40670: PUSH
40671: LD_INT 39
40673: PUSH
40674: LD_INT 40
40676: PUSH
40677: LD_INT 41
40679: PUSH
40680: LD_INT 42
40682: PUSH
40683: LD_INT 43
40685: PUSH
40686: LD_INT 48
40688: PUSH
40689: LD_INT 49
40691: PUSH
40692: LD_INT 50
40694: PUSH
40695: LD_INT 51
40697: PUSH
40698: LD_INT 52
40700: PUSH
40701: LD_INT 53
40703: PUSH
40704: LD_INT 54
40706: PUSH
40707: LD_INT 55
40709: PUSH
40710: LD_INT 56
40712: PUSH
40713: LD_INT 60
40715: PUSH
40716: LD_INT 61
40718: PUSH
40719: LD_INT 62
40721: PUSH
40722: LD_INT 66
40724: PUSH
40725: LD_INT 67
40727: PUSH
40728: LD_INT 68
40730: PUSH
40731: LD_INT 81
40733: PUSH
40734: LD_INT 82
40736: PUSH
40737: LD_INT 83
40739: PUSH
40740: LD_INT 84
40742: PUSH
40743: LD_INT 85
40745: PUSH
40746: LD_INT 87
40748: PUSH
40749: LD_INT 88
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: ST_TO_ADDR
40808: GO 41041
40810: LD_INT 3
40812: DOUBLE
40813: EQUAL
40814: IFTRUE 40818
40816: GO 41040
40818: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40819: LD_ADDR_VAR 0 4
40823: PUSH
40824: LD_INT 46
40826: PUSH
40827: LD_INT 47
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: LD_INT 82
40838: PUSH
40839: LD_INT 83
40841: PUSH
40842: LD_INT 84
40844: PUSH
40845: LD_INT 85
40847: PUSH
40848: LD_INT 86
40850: PUSH
40851: LD_INT 11
40853: PUSH
40854: LD_INT 9
40856: PUSH
40857: LD_INT 20
40859: PUSH
40860: LD_INT 19
40862: PUSH
40863: LD_INT 21
40865: PUSH
40866: LD_INT 24
40868: PUSH
40869: LD_INT 22
40871: PUSH
40872: LD_INT 25
40874: PUSH
40875: LD_INT 28
40877: PUSH
40878: LD_INT 29
40880: PUSH
40881: LD_INT 30
40883: PUSH
40884: LD_INT 31
40886: PUSH
40887: LD_INT 37
40889: PUSH
40890: LD_INT 38
40892: PUSH
40893: LD_INT 32
40895: PUSH
40896: LD_INT 27
40898: PUSH
40899: LD_INT 33
40901: PUSH
40902: LD_INT 69
40904: PUSH
40905: LD_INT 39
40907: PUSH
40908: LD_INT 34
40910: PUSH
40911: LD_INT 40
40913: PUSH
40914: LD_INT 71
40916: PUSH
40917: LD_INT 23
40919: PUSH
40920: LD_INT 44
40922: PUSH
40923: LD_INT 48
40925: PUSH
40926: LD_INT 49
40928: PUSH
40929: LD_INT 50
40931: PUSH
40932: LD_INT 51
40934: PUSH
40935: LD_INT 52
40937: PUSH
40938: LD_INT 53
40940: PUSH
40941: LD_INT 54
40943: PUSH
40944: LD_INT 55
40946: PUSH
40947: LD_INT 56
40949: PUSH
40950: LD_INT 57
40952: PUSH
40953: LD_INT 58
40955: PUSH
40956: LD_INT 59
40958: PUSH
40959: LD_INT 63
40961: PUSH
40962: LD_INT 64
40964: PUSH
40965: LD_INT 65
40967: PUSH
40968: LD_INT 82
40970: PUSH
40971: LD_INT 83
40973: PUSH
40974: LD_INT 84
40976: PUSH
40977: LD_INT 85
40979: PUSH
40980: LD_INT 86
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
41038: GO 41041
41040: POP
// if state > - 1 and state < 3 then
41041: LD_VAR 0 3
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: GREATER
41050: PUSH
41051: LD_VAR 0 3
41055: PUSH
41056: LD_INT 3
41058: LESS
41059: AND
41060: IFFALSE 41117
// for i in result do
41062: LD_ADDR_VAR 0 5
41066: PUSH
41067: LD_VAR 0 4
41071: PUSH
41072: FOR_IN
41073: IFFALSE 41115
// if GetTech ( i , side ) <> state then
41075: LD_VAR 0 5
41079: PPUSH
41080: LD_VAR 0 1
41084: PPUSH
41085: CALL_OW 321
41089: PUSH
41090: LD_VAR 0 3
41094: NONEQUAL
41095: IFFALSE 41113
// result := result diff i ;
41097: LD_ADDR_VAR 0 4
41101: PUSH
41102: LD_VAR 0 4
41106: PUSH
41107: LD_VAR 0 5
41111: DIFF
41112: ST_TO_ADDR
41113: GO 41072
41115: POP
41116: POP
// end ;
41117: LD_VAR 0 4
41121: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41122: LD_INT 0
41124: PPUSH
41125: PPUSH
41126: PPUSH
// result := true ;
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_INT 1
41134: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41135: LD_ADDR_VAR 0 5
41139: PUSH
41140: LD_VAR 0 2
41144: PPUSH
41145: CALL_OW 480
41149: ST_TO_ADDR
// if not tmp then
41150: LD_VAR 0 5
41154: NOT
41155: IFFALSE 41159
// exit ;
41157: GO 41208
// for i in tmp do
41159: LD_ADDR_VAR 0 4
41163: PUSH
41164: LD_VAR 0 5
41168: PUSH
41169: FOR_IN
41170: IFFALSE 41206
// if GetTech ( i , side ) <> state_researched then
41172: LD_VAR 0 4
41176: PPUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 321
41186: PUSH
41187: LD_INT 2
41189: NONEQUAL
41190: IFFALSE 41204
// begin result := false ;
41192: LD_ADDR_VAR 0 3
41196: PUSH
41197: LD_INT 0
41199: ST_TO_ADDR
// exit ;
41200: POP
41201: POP
41202: GO 41208
// end ;
41204: GO 41169
41206: POP
41207: POP
// end ;
41208: LD_VAR 0 3
41212: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41213: LD_INT 0
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41228: LD_VAR 0 1
41232: NOT
41233: PUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: CALL_OW 257
41243: PUSH
41244: LD_INT 9
41246: NONEQUAL
41247: OR
41248: IFFALSE 41252
// exit ;
41250: GO 41825
// side := GetSide ( unit ) ;
41252: LD_ADDR_VAR 0 9
41256: PUSH
41257: LD_VAR 0 1
41261: PPUSH
41262: CALL_OW 255
41266: ST_TO_ADDR
// tech_space := tech_spacanom ;
41267: LD_ADDR_VAR 0 12
41271: PUSH
41272: LD_INT 29
41274: ST_TO_ADDR
// tech_time := tech_taurad ;
41275: LD_ADDR_VAR 0 13
41279: PUSH
41280: LD_INT 28
41282: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41283: LD_ADDR_VAR 0 11
41287: PUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: CALL_OW 310
41297: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41298: LD_VAR 0 11
41302: PPUSH
41303: CALL_OW 247
41307: PUSH
41308: LD_INT 2
41310: EQUAL
41311: IFFALSE 41315
// exit ;
41313: GO 41825
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41315: LD_ADDR_VAR 0 8
41319: PUSH
41320: LD_INT 81
41322: PUSH
41323: LD_VAR 0 9
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 21
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PPUSH
41353: CALL_OW 69
41357: ST_TO_ADDR
// if not tmp then
41358: LD_VAR 0 8
41362: NOT
41363: IFFALSE 41367
// exit ;
41365: GO 41825
// if in_unit then
41367: LD_VAR 0 11
41371: IFFALSE 41395
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41373: LD_ADDR_VAR 0 10
41377: PUSH
41378: LD_VAR 0 8
41382: PPUSH
41383: LD_VAR 0 11
41387: PPUSH
41388: CALL_OW 74
41392: ST_TO_ADDR
41393: GO 41415
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41395: LD_ADDR_VAR 0 10
41399: PUSH
41400: LD_VAR 0 8
41404: PPUSH
41405: LD_VAR 0 1
41409: PPUSH
41410: CALL_OW 74
41414: ST_TO_ADDR
// if not enemy then
41415: LD_VAR 0 10
41419: NOT
41420: IFFALSE 41424
// exit ;
41422: GO 41825
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41424: LD_VAR 0 11
41428: PUSH
41429: LD_VAR 0 11
41433: PPUSH
41434: LD_VAR 0 10
41438: PPUSH
41439: CALL_OW 296
41443: PUSH
41444: LD_INT 13
41446: GREATER
41447: AND
41448: PUSH
41449: LD_VAR 0 1
41453: PPUSH
41454: LD_VAR 0 10
41458: PPUSH
41459: CALL_OW 296
41463: PUSH
41464: LD_INT 12
41466: GREATER
41467: OR
41468: IFFALSE 41472
// exit ;
41470: GO 41825
// missile := [ 1 ] ;
41472: LD_ADDR_VAR 0 14
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41483: LD_VAR 0 9
41487: PPUSH
41488: LD_VAR 0 12
41492: PPUSH
41493: CALL_OW 325
41497: IFFALSE 41526
// missile := Replace ( missile , missile + 1 , 2 ) ;
41499: LD_ADDR_VAR 0 14
41503: PUSH
41504: LD_VAR 0 14
41508: PPUSH
41509: LD_VAR 0 14
41513: PUSH
41514: LD_INT 1
41516: PLUS
41517: PPUSH
41518: LD_INT 2
41520: PPUSH
41521: CALL_OW 1
41525: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41526: LD_VAR 0 9
41530: PPUSH
41531: LD_VAR 0 13
41535: PPUSH
41536: CALL_OW 325
41540: PUSH
41541: LD_VAR 0 10
41545: PPUSH
41546: CALL_OW 255
41550: PPUSH
41551: LD_VAR 0 13
41555: PPUSH
41556: CALL_OW 325
41560: NOT
41561: AND
41562: IFFALSE 41591
// missile := Replace ( missile , missile + 1 , 3 ) ;
41564: LD_ADDR_VAR 0 14
41568: PUSH
41569: LD_VAR 0 14
41573: PPUSH
41574: LD_VAR 0 14
41578: PUSH
41579: LD_INT 1
41581: PLUS
41582: PPUSH
41583: LD_INT 3
41585: PPUSH
41586: CALL_OW 1
41590: ST_TO_ADDR
// if missile < 2 then
41591: LD_VAR 0 14
41595: PUSH
41596: LD_INT 2
41598: LESS
41599: IFFALSE 41603
// exit ;
41601: GO 41825
// x := GetX ( enemy ) ;
41603: LD_ADDR_VAR 0 4
41607: PUSH
41608: LD_VAR 0 10
41612: PPUSH
41613: CALL_OW 250
41617: ST_TO_ADDR
// y := GetY ( enemy ) ;
41618: LD_ADDR_VAR 0 5
41622: PUSH
41623: LD_VAR 0 10
41627: PPUSH
41628: CALL_OW 251
41632: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41633: LD_ADDR_VAR 0 6
41637: PUSH
41638: LD_VAR 0 4
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PPUSH
41647: LD_INT 1
41649: PPUSH
41650: CALL_OW 12
41654: PLUS
41655: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41656: LD_ADDR_VAR 0 7
41660: PUSH
41661: LD_VAR 0 5
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PPUSH
41670: LD_INT 1
41672: PPUSH
41673: CALL_OW 12
41677: PLUS
41678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41679: LD_VAR 0 6
41683: PPUSH
41684: LD_VAR 0 7
41688: PPUSH
41689: CALL_OW 488
41693: NOT
41694: IFFALSE 41716
// begin _x := x ;
41696: LD_ADDR_VAR 0 6
41700: PUSH
41701: LD_VAR 0 4
41705: ST_TO_ADDR
// _y := y ;
41706: LD_ADDR_VAR 0 7
41710: PUSH
41711: LD_VAR 0 5
41715: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 1
41723: PPUSH
41724: LD_VAR 0 14
41728: PPUSH
41729: CALL_OW 12
41733: ST_TO_ADDR
// case i of 1 :
41734: LD_VAR 0 3
41738: PUSH
41739: LD_INT 1
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41747
41745: GO 41764
41747: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41748: LD_VAR 0 1
41752: PPUSH
41753: LD_VAR 0 10
41757: PPUSH
41758: CALL_OW 115
41762: GO 41825
41764: LD_INT 2
41766: DOUBLE
41767: EQUAL
41768: IFTRUE 41772
41770: GO 41794
41772: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41773: LD_VAR 0 1
41777: PPUSH
41778: LD_VAR 0 6
41782: PPUSH
41783: LD_VAR 0 7
41787: PPUSH
41788: CALL_OW 153
41792: GO 41825
41794: LD_INT 3
41796: DOUBLE
41797: EQUAL
41798: IFTRUE 41802
41800: GO 41824
41802: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41803: LD_VAR 0 1
41807: PPUSH
41808: LD_VAR 0 6
41812: PPUSH
41813: LD_VAR 0 7
41817: PPUSH
41818: CALL_OW 154
41822: GO 41825
41824: POP
// end ;
41825: LD_VAR 0 2
41829: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41830: LD_INT 0
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
// if not unit or not building then
41838: LD_VAR 0 1
41842: NOT
41843: PUSH
41844: LD_VAR 0 2
41848: NOT
41849: OR
41850: IFFALSE 41854
// exit ;
41852: GO 42012
// x := GetX ( building ) ;
41854: LD_ADDR_VAR 0 5
41858: PUSH
41859: LD_VAR 0 2
41863: PPUSH
41864: CALL_OW 250
41868: ST_TO_ADDR
// y := GetY ( building ) ;
41869: LD_ADDR_VAR 0 6
41873: PUSH
41874: LD_VAR 0 2
41878: PPUSH
41879: CALL_OW 251
41883: ST_TO_ADDR
// for i = 0 to 5 do
41884: LD_ADDR_VAR 0 4
41888: PUSH
41889: DOUBLE
41890: LD_INT 0
41892: DEC
41893: ST_TO_ADDR
41894: LD_INT 5
41896: PUSH
41897: FOR_TO
41898: IFFALSE 42010
// begin _x := ShiftX ( x , i , 3 ) ;
41900: LD_ADDR_VAR 0 7
41904: PUSH
41905: LD_VAR 0 5
41909: PPUSH
41910: LD_VAR 0 4
41914: PPUSH
41915: LD_INT 3
41917: PPUSH
41918: CALL_OW 272
41922: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41923: LD_ADDR_VAR 0 8
41927: PUSH
41928: LD_VAR 0 6
41932: PPUSH
41933: LD_VAR 0 4
41937: PPUSH
41938: LD_INT 3
41940: PPUSH
41941: CALL_OW 273
41945: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41946: LD_VAR 0 7
41950: PPUSH
41951: LD_VAR 0 8
41955: PPUSH
41956: CALL_OW 488
41960: NOT
41961: IFFALSE 41965
// continue ;
41963: GO 41897
// if HexInfo ( _x , _y ) = 0 then
41965: LD_VAR 0 7
41969: PPUSH
41970: LD_VAR 0 8
41974: PPUSH
41975: CALL_OW 428
41979: PUSH
41980: LD_INT 0
41982: EQUAL
41983: IFFALSE 42008
// begin ComMoveXY ( unit , _x , _y ) ;
41985: LD_VAR 0 1
41989: PPUSH
41990: LD_VAR 0 7
41994: PPUSH
41995: LD_VAR 0 8
41999: PPUSH
42000: CALL_OW 111
// exit ;
42004: POP
42005: POP
42006: GO 42012
// end ; end ;
42008: GO 41897
42010: POP
42011: POP
// end ;
42012: LD_VAR 0 3
42016: RET
// export function ScanBase ( side , base_area ) ; begin
42017: LD_INT 0
42019: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42020: LD_ADDR_VAR 0 3
42024: PUSH
42025: LD_VAR 0 2
42029: PPUSH
42030: LD_INT 81
42032: PUSH
42033: LD_VAR 0 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PPUSH
42042: CALL_OW 70
42046: ST_TO_ADDR
// end ;
42047: LD_VAR 0 3
42051: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42052: LD_INT 0
42054: PPUSH
42055: PPUSH
42056: PPUSH
42057: PPUSH
// result := false ;
42058: LD_ADDR_VAR 0 2
42062: PUSH
42063: LD_INT 0
42065: ST_TO_ADDR
// side := GetSide ( unit ) ;
42066: LD_ADDR_VAR 0 3
42070: PUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: CALL_OW 255
42080: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42081: LD_ADDR_VAR 0 4
42085: PUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: CALL_OW 248
42095: ST_TO_ADDR
// case nat of 1 :
42096: LD_VAR 0 4
42100: PUSH
42101: LD_INT 1
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42120
42109: POP
// tech := tech_lassight ; 2 :
42110: LD_ADDR_VAR 0 5
42114: PUSH
42115: LD_INT 12
42117: ST_TO_ADDR
42118: GO 42159
42120: LD_INT 2
42122: DOUBLE
42123: EQUAL
42124: IFTRUE 42128
42126: GO 42139
42128: POP
// tech := tech_mortar ; 3 :
42129: LD_ADDR_VAR 0 5
42133: PUSH
42134: LD_INT 41
42136: ST_TO_ADDR
42137: GO 42159
42139: LD_INT 3
42141: DOUBLE
42142: EQUAL
42143: IFTRUE 42147
42145: GO 42158
42147: POP
// tech := tech_bazooka ; end ;
42148: LD_ADDR_VAR 0 5
42152: PUSH
42153: LD_INT 44
42155: ST_TO_ADDR
42156: GO 42159
42158: POP
// if Researched ( side , tech ) then
42159: LD_VAR 0 3
42163: PPUSH
42164: LD_VAR 0 5
42168: PPUSH
42169: CALL_OW 325
42173: IFFALSE 42200
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42175: LD_ADDR_VAR 0 2
42179: PUSH
42180: LD_INT 5
42182: PUSH
42183: LD_INT 8
42185: PUSH
42186: LD_INT 9
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: PUSH
42194: LD_VAR 0 4
42198: ARRAY
42199: ST_TO_ADDR
// end ;
42200: LD_VAR 0 2
42204: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42205: LD_INT 0
42207: PPUSH
42208: PPUSH
42209: PPUSH
// if not mines then
42210: LD_VAR 0 2
42214: NOT
42215: IFFALSE 42219
// exit ;
42217: GO 42363
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42219: LD_ADDR_VAR 0 5
42223: PUSH
42224: LD_INT 81
42226: PUSH
42227: LD_VAR 0 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 21
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PPUSH
42257: CALL_OW 69
42261: ST_TO_ADDR
// for i in mines do
42262: LD_ADDR_VAR 0 4
42266: PUSH
42267: LD_VAR 0 2
42271: PUSH
42272: FOR_IN
42273: IFFALSE 42361
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42275: LD_VAR 0 4
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: PPUSH
42284: LD_VAR 0 4
42288: PUSH
42289: LD_INT 2
42291: ARRAY
42292: PPUSH
42293: CALL_OW 458
42297: NOT
42298: IFFALSE 42302
// continue ;
42300: GO 42272
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42302: LD_VAR 0 4
42306: PUSH
42307: LD_INT 1
42309: ARRAY
42310: PPUSH
42311: LD_VAR 0 4
42315: PUSH
42316: LD_INT 2
42318: ARRAY
42319: PPUSH
42320: CALL_OW 428
42324: PUSH
42325: LD_VAR 0 5
42329: IN
42330: IFFALSE 42359
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42332: LD_VAR 0 4
42336: PUSH
42337: LD_INT 1
42339: ARRAY
42340: PPUSH
42341: LD_VAR 0 4
42345: PUSH
42346: LD_INT 2
42348: ARRAY
42349: PPUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: CALL_OW 456
// end ;
42359: GO 42272
42361: POP
42362: POP
// end ;
42363: LD_VAR 0 3
42367: RET
// export function Count ( array ) ; begin
42368: LD_INT 0
42370: PPUSH
// result := array + 0 ;
42371: LD_ADDR_VAR 0 2
42375: PUSH
42376: LD_VAR 0 1
42380: PUSH
42381: LD_INT 0
42383: PLUS
42384: ST_TO_ADDR
// end ;
42385: LD_VAR 0 2
42389: RET
// export function IsEmpty ( building ) ; begin
42390: LD_INT 0
42392: PPUSH
// if not building then
42393: LD_VAR 0 1
42397: NOT
42398: IFFALSE 42402
// exit ;
42400: GO 42445
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42402: LD_ADDR_VAR 0 2
42406: PUSH
42407: LD_VAR 0 1
42411: PUSH
42412: LD_INT 22
42414: PUSH
42415: LD_VAR 0 1
42419: PPUSH
42420: CALL_OW 255
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 58
42431: PUSH
42432: EMPTY
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PPUSH
42439: CALL_OW 69
42443: IN
42444: ST_TO_ADDR
// end ;
42445: LD_VAR 0 2
42449: RET
// export function IsNotFull ( building ) ; var places ; begin
42450: LD_INT 0
42452: PPUSH
42453: PPUSH
// if not building then
42454: LD_VAR 0 1
42458: NOT
42459: IFFALSE 42463
// exit ;
42461: GO 42491
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42463: LD_ADDR_VAR 0 2
42467: PUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: LD_INT 3
42475: PUSH
42476: LD_INT 62
42478: PUSH
42479: EMPTY
42480: LIST
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PPUSH
42486: CALL_OW 72
42490: ST_TO_ADDR
// end ;
42491: LD_VAR 0 2
42495: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42496: LD_INT 0
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
// tmp := [ ] ;
42502: LD_ADDR_VAR 0 3
42506: PUSH
42507: EMPTY
42508: ST_TO_ADDR
// list := [ ] ;
42509: LD_ADDR_VAR 0 5
42513: PUSH
42514: EMPTY
42515: ST_TO_ADDR
// for i = 16 to 25 do
42516: LD_ADDR_VAR 0 4
42520: PUSH
42521: DOUBLE
42522: LD_INT 16
42524: DEC
42525: ST_TO_ADDR
42526: LD_INT 25
42528: PUSH
42529: FOR_TO
42530: IFFALSE 42603
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_VAR 0 3
42541: PUSH
42542: LD_INT 22
42544: PUSH
42545: LD_VAR 0 1
42549: PPUSH
42550: CALL_OW 255
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 91
42561: PUSH
42562: LD_VAR 0 1
42566: PUSH
42567: LD_INT 6
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 30
42577: PUSH
42578: LD_VAR 0 4
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: PUSH
42592: EMPTY
42593: LIST
42594: PPUSH
42595: CALL_OW 69
42599: ADD
42600: ST_TO_ADDR
42601: GO 42529
42603: POP
42604: POP
// for i = 1 to tmp do
42605: LD_ADDR_VAR 0 4
42609: PUSH
42610: DOUBLE
42611: LD_INT 1
42613: DEC
42614: ST_TO_ADDR
42615: LD_VAR 0 3
42619: PUSH
42620: FOR_TO
42621: IFFALSE 42709
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_VAR 0 5
42632: PUSH
42633: LD_VAR 0 3
42637: PUSH
42638: LD_VAR 0 4
42642: ARRAY
42643: PPUSH
42644: CALL_OW 266
42648: PUSH
42649: LD_VAR 0 3
42653: PUSH
42654: LD_VAR 0 4
42658: ARRAY
42659: PPUSH
42660: CALL_OW 250
42664: PUSH
42665: LD_VAR 0 3
42669: PUSH
42670: LD_VAR 0 4
42674: ARRAY
42675: PPUSH
42676: CALL_OW 251
42680: PUSH
42681: LD_VAR 0 3
42685: PUSH
42686: LD_VAR 0 4
42690: ARRAY
42691: PPUSH
42692: CALL_OW 254
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: PUSH
42703: EMPTY
42704: LIST
42705: ADD
42706: ST_TO_ADDR
42707: GO 42620
42709: POP
42710: POP
// result := list ;
42711: LD_ADDR_VAR 0 2
42715: PUSH
42716: LD_VAR 0 5
42720: ST_TO_ADDR
// end ;
42721: LD_VAR 0 2
42725: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42726: LD_INT 0
42728: PPUSH
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
// if not factory then
42735: LD_VAR 0 1
42739: NOT
42740: IFFALSE 42744
// exit ;
42742: GO 43337
// if control = control_apeman then
42744: LD_VAR 0 4
42748: PUSH
42749: LD_INT 5
42751: EQUAL
42752: IFFALSE 42861
// begin tmp := UnitsInside ( factory ) ;
42754: LD_ADDR_VAR 0 8
42758: PUSH
42759: LD_VAR 0 1
42763: PPUSH
42764: CALL_OW 313
42768: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42769: LD_VAR 0 8
42773: PPUSH
42774: LD_INT 25
42776: PUSH
42777: LD_INT 12
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PPUSH
42784: CALL_OW 72
42788: NOT
42789: IFFALSE 42799
// control := control_manual ;
42791: LD_ADDR_VAR 0 4
42795: PUSH
42796: LD_INT 1
42798: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42799: LD_ADDR_VAR 0 8
42803: PUSH
42804: LD_VAR 0 1
42808: PPUSH
42809: CALL 42496 0 1
42813: ST_TO_ADDR
// if tmp then
42814: LD_VAR 0 8
42818: IFFALSE 42861
// begin for i in tmp do
42820: LD_ADDR_VAR 0 7
42824: PUSH
42825: LD_VAR 0 8
42829: PUSH
42830: FOR_IN
42831: IFFALSE 42859
// if i [ 1 ] = b_ext_radio then
42833: LD_VAR 0 7
42837: PUSH
42838: LD_INT 1
42840: ARRAY
42841: PUSH
42842: LD_INT 22
42844: EQUAL
42845: IFFALSE 42857
// begin control := control_remote ;
42847: LD_ADDR_VAR 0 4
42851: PUSH
42852: LD_INT 2
42854: ST_TO_ADDR
// break ;
42855: GO 42859
// end ;
42857: GO 42830
42859: POP
42860: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42861: LD_VAR 0 1
42865: PPUSH
42866: LD_VAR 0 2
42870: PPUSH
42871: LD_VAR 0 3
42875: PPUSH
42876: LD_VAR 0 4
42880: PPUSH
42881: LD_VAR 0 5
42885: PPUSH
42886: CALL_OW 448
42890: IFFALSE 42925
// begin result := [ chassis , engine , control , weapon ] ;
42892: LD_ADDR_VAR 0 6
42896: PUSH
42897: LD_VAR 0 2
42901: PUSH
42902: LD_VAR 0 3
42906: PUSH
42907: LD_VAR 0 4
42911: PUSH
42912: LD_VAR 0 5
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// exit ;
42923: GO 43337
// end ; _chassis := AvailableChassisList ( factory ) ;
42925: LD_ADDR_VAR 0 9
42929: PUSH
42930: LD_VAR 0 1
42934: PPUSH
42935: CALL_OW 475
42939: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42940: LD_ADDR_VAR 0 11
42944: PUSH
42945: LD_VAR 0 1
42949: PPUSH
42950: CALL_OW 476
42954: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42955: LD_ADDR_VAR 0 12
42959: PUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: CALL_OW 477
42969: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42970: LD_ADDR_VAR 0 10
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 478
42984: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42985: LD_VAR 0 9
42989: NOT
42990: PUSH
42991: LD_VAR 0 11
42995: NOT
42996: OR
42997: PUSH
42998: LD_VAR 0 12
43002: NOT
43003: OR
43004: PUSH
43005: LD_VAR 0 10
43009: NOT
43010: OR
43011: IFFALSE 43046
// begin result := [ chassis , engine , control , weapon ] ;
43013: LD_ADDR_VAR 0 6
43017: PUSH
43018: LD_VAR 0 2
43022: PUSH
43023: LD_VAR 0 3
43027: PUSH
43028: LD_VAR 0 4
43032: PUSH
43033: LD_VAR 0 5
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// exit ;
43044: GO 43337
// end ; if not chassis in _chassis then
43046: LD_VAR 0 2
43050: PUSH
43051: LD_VAR 0 9
43055: IN
43056: NOT
43057: IFFALSE 43083
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43059: LD_ADDR_VAR 0 2
43063: PUSH
43064: LD_VAR 0 9
43068: PUSH
43069: LD_INT 1
43071: PPUSH
43072: LD_VAR 0 9
43076: PPUSH
43077: CALL_OW 12
43081: ARRAY
43082: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43083: LD_VAR 0 2
43087: PPUSH
43088: LD_VAR 0 3
43092: PPUSH
43093: CALL 43342 0 2
43097: NOT
43098: IFFALSE 43157
// repeat engine := _engine [ 1 ] ;
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_VAR 0 11
43109: PUSH
43110: LD_INT 1
43112: ARRAY
43113: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43114: LD_ADDR_VAR 0 11
43118: PUSH
43119: LD_VAR 0 11
43123: PPUSH
43124: LD_INT 1
43126: PPUSH
43127: CALL_OW 3
43131: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43132: LD_VAR 0 2
43136: PPUSH
43137: LD_VAR 0 3
43141: PPUSH
43142: CALL 43342 0 2
43146: PUSH
43147: LD_VAR 0 11
43151: PUSH
43152: EMPTY
43153: EQUAL
43154: OR
43155: IFFALSE 43100
// if not control in _control then
43157: LD_VAR 0 4
43161: PUSH
43162: LD_VAR 0 12
43166: IN
43167: NOT
43168: IFFALSE 43194
// control := _control [ rand ( 1 , _control ) ] ;
43170: LD_ADDR_VAR 0 4
43174: PUSH
43175: LD_VAR 0 12
43179: PUSH
43180: LD_INT 1
43182: PPUSH
43183: LD_VAR 0 12
43187: PPUSH
43188: CALL_OW 12
43192: ARRAY
43193: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43194: LD_VAR 0 2
43198: PPUSH
43199: LD_VAR 0 5
43203: PPUSH
43204: CALL 43562 0 2
43208: NOT
43209: IFFALSE 43268
// repeat weapon := _weapon [ 1 ] ;
43211: LD_ADDR_VAR 0 5
43215: PUSH
43216: LD_VAR 0 10
43220: PUSH
43221: LD_INT 1
43223: ARRAY
43224: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43225: LD_ADDR_VAR 0 10
43229: PUSH
43230: LD_VAR 0 10
43234: PPUSH
43235: LD_INT 1
43237: PPUSH
43238: CALL_OW 3
43242: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43243: LD_VAR 0 2
43247: PPUSH
43248: LD_VAR 0 5
43252: PPUSH
43253: CALL 43562 0 2
43257: PUSH
43258: LD_VAR 0 10
43262: PUSH
43263: EMPTY
43264: EQUAL
43265: OR
43266: IFFALSE 43211
// result := [ ] ;
43268: LD_ADDR_VAR 0 6
43272: PUSH
43273: EMPTY
43274: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43275: LD_VAR 0 1
43279: PPUSH
43280: LD_VAR 0 2
43284: PPUSH
43285: LD_VAR 0 3
43289: PPUSH
43290: LD_VAR 0 4
43294: PPUSH
43295: LD_VAR 0 5
43299: PPUSH
43300: CALL_OW 448
43304: IFFALSE 43337
// result := [ chassis , engine , control , weapon ] ;
43306: LD_ADDR_VAR 0 6
43310: PUSH
43311: LD_VAR 0 2
43315: PUSH
43316: LD_VAR 0 3
43320: PUSH
43321: LD_VAR 0 4
43325: PUSH
43326: LD_VAR 0 5
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// end ;
43337: LD_VAR 0 6
43341: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43342: LD_INT 0
43344: PPUSH
// if not chassis or not engine then
43345: LD_VAR 0 1
43349: NOT
43350: PUSH
43351: LD_VAR 0 2
43355: NOT
43356: OR
43357: IFFALSE 43361
// exit ;
43359: GO 43557
// case engine of engine_solar :
43361: LD_VAR 0 2
43365: PUSH
43366: LD_INT 2
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43412
43374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 11
43382: PUSH
43383: LD_INT 12
43385: PUSH
43386: LD_INT 13
43388: PUSH
43389: LD_INT 14
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
43410: GO 43541
43412: LD_INT 1
43414: DOUBLE
43415: EQUAL
43416: IFTRUE 43420
43418: GO 43482
43420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43421: LD_ADDR_VAR 0 3
43425: PUSH
43426: LD_INT 11
43428: PUSH
43429: LD_INT 12
43431: PUSH
43432: LD_INT 13
43434: PUSH
43435: LD_INT 14
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: LD_INT 3
43446: PUSH
43447: LD_INT 4
43449: PUSH
43450: LD_INT 5
43452: PUSH
43453: LD_INT 21
43455: PUSH
43456: LD_INT 23
43458: PUSH
43459: LD_INT 22
43461: PUSH
43462: LD_INT 24
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 43541
43482: LD_INT 3
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43540
43490: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 13
43498: PUSH
43499: LD_INT 14
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: LD_INT 4
43510: PUSH
43511: LD_INT 5
43513: PUSH
43514: LD_INT 21
43516: PUSH
43517: LD_INT 22
43519: PUSH
43520: LD_INT 23
43522: PUSH
43523: LD_INT 24
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
43538: GO 43541
43540: POP
// result := ( chassis in result ) ;
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_VAR 0 1
43550: PUSH
43551: LD_VAR 0 3
43555: IN
43556: ST_TO_ADDR
// end ;
43557: LD_VAR 0 3
43561: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43562: LD_INT 0
43564: PPUSH
// if not chassis or not weapon then
43565: LD_VAR 0 1
43569: NOT
43570: PUSH
43571: LD_VAR 0 2
43575: NOT
43576: OR
43577: IFFALSE 43581
// exit ;
43579: GO 44641
// case weapon of us_machine_gun :
43581: LD_VAR 0 2
43585: PUSH
43586: LD_INT 2
43588: DOUBLE
43589: EQUAL
43590: IFTRUE 43594
43592: GO 43624
43594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43595: LD_ADDR_VAR 0 3
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: LD_INT 4
43611: PUSH
43612: LD_INT 5
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: ST_TO_ADDR
43622: GO 44625
43624: LD_INT 3
43626: DOUBLE
43627: EQUAL
43628: IFTRUE 43632
43630: GO 43662
43632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 3
43646: PUSH
43647: LD_INT 4
43649: PUSH
43650: LD_INT 5
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: ST_TO_ADDR
43660: GO 44625
43662: LD_INT 11
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43700
43670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 3
43684: PUSH
43685: LD_INT 4
43687: PUSH
43688: LD_INT 5
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
43698: GO 44625
43700: LD_INT 4
43702: DOUBLE
43703: EQUAL
43704: IFTRUE 43708
43706: GO 43734
43708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43709: LD_ADDR_VAR 0 3
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 3
43719: PUSH
43720: LD_INT 4
43722: PUSH
43723: LD_INT 5
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
43732: GO 44625
43734: LD_INT 5
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43768
43742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 4
43756: PUSH
43757: LD_INT 5
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
43766: GO 44625
43768: LD_INT 9
43770: DOUBLE
43771: EQUAL
43772: IFTRUE 43776
43774: GO 43802
43776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43777: LD_ADDR_VAR 0 3
43781: PUSH
43782: LD_INT 2
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: LD_INT 4
43790: PUSH
43791: LD_INT 5
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
43800: GO 44625
43802: LD_INT 7
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43836
43810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43811: LD_ADDR_VAR 0 3
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: LD_INT 4
43824: PUSH
43825: LD_INT 5
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: ST_TO_ADDR
43834: GO 44625
43836: LD_INT 12
43838: DOUBLE
43839: EQUAL
43840: IFTRUE 43844
43842: GO 43870
43844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43845: LD_ADDR_VAR 0 3
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 3
43855: PUSH
43856: LD_INT 4
43858: PUSH
43859: LD_INT 5
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: ST_TO_ADDR
43868: GO 44625
43870: LD_INT 13
43872: DOUBLE
43873: EQUAL
43874: IFTRUE 43878
43876: GO 43904
43878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43879: LD_ADDR_VAR 0 3
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: LD_INT 4
43892: PUSH
43893: LD_INT 5
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
43902: GO 44625
43904: LD_INT 14
43906: DOUBLE
43907: EQUAL
43908: IFTRUE 43912
43910: GO 43930
43912: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43913: LD_ADDR_VAR 0 3
43917: PUSH
43918: LD_INT 4
43920: PUSH
43921: LD_INT 5
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: ST_TO_ADDR
43928: GO 44625
43930: LD_INT 6
43932: DOUBLE
43933: EQUAL
43934: IFTRUE 43938
43936: GO 43956
43938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43939: LD_ADDR_VAR 0 3
43943: PUSH
43944: LD_INT 4
43946: PUSH
43947: LD_INT 5
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: ST_TO_ADDR
43954: GO 44625
43956: LD_INT 10
43958: DOUBLE
43959: EQUAL
43960: IFTRUE 43964
43962: GO 43982
43964: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43965: LD_ADDR_VAR 0 3
43969: PUSH
43970: LD_INT 4
43972: PUSH
43973: LD_INT 5
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: ST_TO_ADDR
43980: GO 44625
43982: LD_INT 22
43984: DOUBLE
43985: EQUAL
43986: IFTRUE 43990
43988: GO 44016
43990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43991: LD_ADDR_VAR 0 3
43995: PUSH
43996: LD_INT 11
43998: PUSH
43999: LD_INT 12
44001: PUSH
44002: LD_INT 13
44004: PUSH
44005: LD_INT 14
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
44014: GO 44625
44016: LD_INT 23
44018: DOUBLE
44019: EQUAL
44020: IFTRUE 44024
44022: GO 44050
44024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: LD_INT 11
44032: PUSH
44033: LD_INT 12
44035: PUSH
44036: LD_INT 13
44038: PUSH
44039: LD_INT 14
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: ST_TO_ADDR
44048: GO 44625
44050: LD_INT 24
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44058
44056: GO 44084
44058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44059: LD_ADDR_VAR 0 3
44063: PUSH
44064: LD_INT 11
44066: PUSH
44067: LD_INT 12
44069: PUSH
44070: LD_INT 13
44072: PUSH
44073: LD_INT 14
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
44082: GO 44625
44084: LD_INT 30
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44092
44090: GO 44118
44092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44093: LD_ADDR_VAR 0 3
44097: PUSH
44098: LD_INT 11
44100: PUSH
44101: LD_INT 12
44103: PUSH
44104: LD_INT 13
44106: PUSH
44107: LD_INT 14
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
44116: GO 44625
44118: LD_INT 25
44120: DOUBLE
44121: EQUAL
44122: IFTRUE 44126
44124: GO 44144
44126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44127: LD_ADDR_VAR 0 3
44131: PUSH
44132: LD_INT 13
44134: PUSH
44135: LD_INT 14
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: ST_TO_ADDR
44142: GO 44625
44144: LD_INT 27
44146: DOUBLE
44147: EQUAL
44148: IFTRUE 44152
44150: GO 44170
44152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44153: LD_ADDR_VAR 0 3
44157: PUSH
44158: LD_INT 13
44160: PUSH
44161: LD_INT 14
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: ST_TO_ADDR
44168: GO 44625
44170: LD_INT 92
44172: DOUBLE
44173: EQUAL
44174: IFTRUE 44178
44176: GO 44204
44178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: LD_INT 11
44186: PUSH
44187: LD_INT 12
44189: PUSH
44190: LD_INT 13
44192: PUSH
44193: LD_INT 14
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: ST_TO_ADDR
44202: GO 44625
44204: LD_INT 28
44206: DOUBLE
44207: EQUAL
44208: IFTRUE 44212
44210: GO 44230
44212: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44213: LD_ADDR_VAR 0 3
44217: PUSH
44218: LD_INT 13
44220: PUSH
44221: LD_INT 14
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: ST_TO_ADDR
44228: GO 44625
44230: LD_INT 29
44232: DOUBLE
44233: EQUAL
44234: IFTRUE 44238
44236: GO 44256
44238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44239: LD_ADDR_VAR 0 3
44243: PUSH
44244: LD_INT 13
44246: PUSH
44247: LD_INT 14
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: ST_TO_ADDR
44254: GO 44625
44256: LD_INT 31
44258: DOUBLE
44259: EQUAL
44260: IFTRUE 44264
44262: GO 44282
44264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44265: LD_ADDR_VAR 0 3
44269: PUSH
44270: LD_INT 13
44272: PUSH
44273: LD_INT 14
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: ST_TO_ADDR
44280: GO 44625
44282: LD_INT 26
44284: DOUBLE
44285: EQUAL
44286: IFTRUE 44290
44288: GO 44308
44290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44291: LD_ADDR_VAR 0 3
44295: PUSH
44296: LD_INT 13
44298: PUSH
44299: LD_INT 14
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: ST_TO_ADDR
44306: GO 44625
44308: LD_INT 42
44310: DOUBLE
44311: EQUAL
44312: IFTRUE 44316
44314: GO 44342
44316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44317: LD_ADDR_VAR 0 3
44321: PUSH
44322: LD_INT 21
44324: PUSH
44325: LD_INT 22
44327: PUSH
44328: LD_INT 23
44330: PUSH
44331: LD_INT 24
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: ST_TO_ADDR
44340: GO 44625
44342: LD_INT 43
44344: DOUBLE
44345: EQUAL
44346: IFTRUE 44350
44348: GO 44376
44350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44351: LD_ADDR_VAR 0 3
44355: PUSH
44356: LD_INT 21
44358: PUSH
44359: LD_INT 22
44361: PUSH
44362: LD_INT 23
44364: PUSH
44365: LD_INT 24
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: ST_TO_ADDR
44374: GO 44625
44376: LD_INT 44
44378: DOUBLE
44379: EQUAL
44380: IFTRUE 44384
44382: GO 44410
44384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44385: LD_ADDR_VAR 0 3
44389: PUSH
44390: LD_INT 21
44392: PUSH
44393: LD_INT 22
44395: PUSH
44396: LD_INT 23
44398: PUSH
44399: LD_INT 24
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: ST_TO_ADDR
44408: GO 44625
44410: LD_INT 45
44412: DOUBLE
44413: EQUAL
44414: IFTRUE 44418
44416: GO 44444
44418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44419: LD_ADDR_VAR 0 3
44423: PUSH
44424: LD_INT 21
44426: PUSH
44427: LD_INT 22
44429: PUSH
44430: LD_INT 23
44432: PUSH
44433: LD_INT 24
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: ST_TO_ADDR
44442: GO 44625
44444: LD_INT 49
44446: DOUBLE
44447: EQUAL
44448: IFTRUE 44452
44450: GO 44478
44452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44453: LD_ADDR_VAR 0 3
44457: PUSH
44458: LD_INT 21
44460: PUSH
44461: LD_INT 22
44463: PUSH
44464: LD_INT 23
44466: PUSH
44467: LD_INT 24
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: ST_TO_ADDR
44476: GO 44625
44478: LD_INT 51
44480: DOUBLE
44481: EQUAL
44482: IFTRUE 44486
44484: GO 44512
44486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44487: LD_ADDR_VAR 0 3
44491: PUSH
44492: LD_INT 21
44494: PUSH
44495: LD_INT 22
44497: PUSH
44498: LD_INT 23
44500: PUSH
44501: LD_INT 24
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: ST_TO_ADDR
44510: GO 44625
44512: LD_INT 52
44514: DOUBLE
44515: EQUAL
44516: IFTRUE 44520
44518: GO 44546
44520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44521: LD_ADDR_VAR 0 3
44525: PUSH
44526: LD_INT 21
44528: PUSH
44529: LD_INT 22
44531: PUSH
44532: LD_INT 23
44534: PUSH
44535: LD_INT 24
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
44544: GO 44625
44546: LD_INT 53
44548: DOUBLE
44549: EQUAL
44550: IFTRUE 44554
44552: GO 44572
44554: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44555: LD_ADDR_VAR 0 3
44559: PUSH
44560: LD_INT 23
44562: PUSH
44563: LD_INT 24
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: ST_TO_ADDR
44570: GO 44625
44572: LD_INT 46
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44598
44580: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_INT 23
44588: PUSH
44589: LD_INT 24
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: ST_TO_ADDR
44596: GO 44625
44598: LD_INT 47
44600: DOUBLE
44601: EQUAL
44602: IFTRUE 44606
44604: GO 44624
44606: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44607: LD_ADDR_VAR 0 3
44611: PUSH
44612: LD_INT 23
44614: PUSH
44615: LD_INT 24
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: ST_TO_ADDR
44622: GO 44625
44624: POP
// result := ( chassis in result ) ;
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: LD_VAR 0 1
44634: PUSH
44635: LD_VAR 0 3
44639: IN
44640: ST_TO_ADDR
// end ;
44641: LD_VAR 0 3
44645: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44646: LD_INT 0
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
// result := array ;
44655: LD_ADDR_VAR 0 5
44659: PUSH
44660: LD_VAR 0 1
44664: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44665: LD_VAR 0 1
44669: NOT
44670: PUSH
44671: LD_VAR 0 2
44675: NOT
44676: OR
44677: PUSH
44678: LD_VAR 0 3
44682: NOT
44683: OR
44684: PUSH
44685: LD_VAR 0 2
44689: PUSH
44690: LD_VAR 0 1
44694: GREATER
44695: OR
44696: PUSH
44697: LD_VAR 0 3
44701: PUSH
44702: LD_VAR 0 1
44706: GREATER
44707: OR
44708: IFFALSE 44712
// exit ;
44710: GO 45008
// if direction then
44712: LD_VAR 0 4
44716: IFFALSE 44780
// begin d := 1 ;
44718: LD_ADDR_VAR 0 9
44722: PUSH
44723: LD_INT 1
44725: ST_TO_ADDR
// if i_from > i_to then
44726: LD_VAR 0 2
44730: PUSH
44731: LD_VAR 0 3
44735: GREATER
44736: IFFALSE 44762
// length := ( array - i_from ) + i_to else
44738: LD_ADDR_VAR 0 11
44742: PUSH
44743: LD_VAR 0 1
44747: PUSH
44748: LD_VAR 0 2
44752: MINUS
44753: PUSH
44754: LD_VAR 0 3
44758: PLUS
44759: ST_TO_ADDR
44760: GO 44778
// length := i_to - i_from ;
44762: LD_ADDR_VAR 0 11
44766: PUSH
44767: LD_VAR 0 3
44771: PUSH
44772: LD_VAR 0 2
44776: MINUS
44777: ST_TO_ADDR
// end else
44778: GO 44841
// begin d := - 1 ;
44780: LD_ADDR_VAR 0 9
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: ST_TO_ADDR
// if i_from > i_to then
44789: LD_VAR 0 2
44793: PUSH
44794: LD_VAR 0 3
44798: GREATER
44799: IFFALSE 44819
// length := i_from - i_to else
44801: LD_ADDR_VAR 0 11
44805: PUSH
44806: LD_VAR 0 2
44810: PUSH
44811: LD_VAR 0 3
44815: MINUS
44816: ST_TO_ADDR
44817: GO 44841
// length := ( array - i_to ) + i_from ;
44819: LD_ADDR_VAR 0 11
44823: PUSH
44824: LD_VAR 0 1
44828: PUSH
44829: LD_VAR 0 3
44833: MINUS
44834: PUSH
44835: LD_VAR 0 2
44839: PLUS
44840: ST_TO_ADDR
// end ; if not length then
44841: LD_VAR 0 11
44845: NOT
44846: IFFALSE 44850
// exit ;
44848: GO 45008
// tmp := array ;
44850: LD_ADDR_VAR 0 10
44854: PUSH
44855: LD_VAR 0 1
44859: ST_TO_ADDR
// for i = 1 to length do
44860: LD_ADDR_VAR 0 6
44864: PUSH
44865: DOUBLE
44866: LD_INT 1
44868: DEC
44869: ST_TO_ADDR
44870: LD_VAR 0 11
44874: PUSH
44875: FOR_TO
44876: IFFALSE 44996
// begin for j = 1 to array do
44878: LD_ADDR_VAR 0 7
44882: PUSH
44883: DOUBLE
44884: LD_INT 1
44886: DEC
44887: ST_TO_ADDR
44888: LD_VAR 0 1
44892: PUSH
44893: FOR_TO
44894: IFFALSE 44982
// begin k := j + d ;
44896: LD_ADDR_VAR 0 8
44900: PUSH
44901: LD_VAR 0 7
44905: PUSH
44906: LD_VAR 0 9
44910: PLUS
44911: ST_TO_ADDR
// if k > array then
44912: LD_VAR 0 8
44916: PUSH
44917: LD_VAR 0 1
44921: GREATER
44922: IFFALSE 44932
// k := 1 ;
44924: LD_ADDR_VAR 0 8
44928: PUSH
44929: LD_INT 1
44931: ST_TO_ADDR
// if not k then
44932: LD_VAR 0 8
44936: NOT
44937: IFFALSE 44949
// k := array ;
44939: LD_ADDR_VAR 0 8
44943: PUSH
44944: LD_VAR 0 1
44948: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44949: LD_ADDR_VAR 0 10
44953: PUSH
44954: LD_VAR 0 10
44958: PPUSH
44959: LD_VAR 0 8
44963: PPUSH
44964: LD_VAR 0 1
44968: PUSH
44969: LD_VAR 0 7
44973: ARRAY
44974: PPUSH
44975: CALL_OW 1
44979: ST_TO_ADDR
// end ;
44980: GO 44893
44982: POP
44983: POP
// array := tmp ;
44984: LD_ADDR_VAR 0 1
44988: PUSH
44989: LD_VAR 0 10
44993: ST_TO_ADDR
// end ;
44994: GO 44875
44996: POP
44997: POP
// result := array ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_VAR 0 1
45007: ST_TO_ADDR
// end ;
45008: LD_VAR 0 5
45012: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45013: LD_INT 0
45015: PPUSH
45016: PPUSH
// result := 0 ;
45017: LD_ADDR_VAR 0 3
45021: PUSH
45022: LD_INT 0
45024: ST_TO_ADDR
// if not array or not value in array then
45025: LD_VAR 0 1
45029: NOT
45030: PUSH
45031: LD_VAR 0 2
45035: PUSH
45036: LD_VAR 0 1
45040: IN
45041: NOT
45042: OR
45043: IFFALSE 45047
// exit ;
45045: GO 45101
// for i = 1 to array do
45047: LD_ADDR_VAR 0 4
45051: PUSH
45052: DOUBLE
45053: LD_INT 1
45055: DEC
45056: ST_TO_ADDR
45057: LD_VAR 0 1
45061: PUSH
45062: FOR_TO
45063: IFFALSE 45099
// if value = array [ i ] then
45065: LD_VAR 0 2
45069: PUSH
45070: LD_VAR 0 1
45074: PUSH
45075: LD_VAR 0 4
45079: ARRAY
45080: EQUAL
45081: IFFALSE 45097
// begin result := i ;
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_VAR 0 4
45092: ST_TO_ADDR
// exit ;
45093: POP
45094: POP
45095: GO 45101
// end ;
45097: GO 45062
45099: POP
45100: POP
// end ;
45101: LD_VAR 0 3
45105: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45106: LD_INT 0
45108: PPUSH
// vc_chassis := chassis ;
45109: LD_ADDR_OWVAR 37
45113: PUSH
45114: LD_VAR 0 1
45118: ST_TO_ADDR
// vc_engine := engine ;
45119: LD_ADDR_OWVAR 39
45123: PUSH
45124: LD_VAR 0 2
45128: ST_TO_ADDR
// vc_control := control ;
45129: LD_ADDR_OWVAR 38
45133: PUSH
45134: LD_VAR 0 3
45138: ST_TO_ADDR
// vc_weapon := weapon ;
45139: LD_ADDR_OWVAR 40
45143: PUSH
45144: LD_VAR 0 4
45148: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45149: LD_ADDR_OWVAR 41
45153: PUSH
45154: LD_VAR 0 5
45158: ST_TO_ADDR
// end ;
45159: LD_VAR 0 6
45163: RET
// export function WantPlant ( unit ) ; var task ; begin
45164: LD_INT 0
45166: PPUSH
45167: PPUSH
// result := false ;
45168: LD_ADDR_VAR 0 2
45172: PUSH
45173: LD_INT 0
45175: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45176: LD_ADDR_VAR 0 3
45180: PUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 437
45190: ST_TO_ADDR
// if task then
45191: LD_VAR 0 3
45195: IFFALSE 45223
// if task [ 1 ] [ 1 ] = p then
45197: LD_VAR 0 3
45201: PUSH
45202: LD_INT 1
45204: ARRAY
45205: PUSH
45206: LD_INT 1
45208: ARRAY
45209: PUSH
45210: LD_STRING p
45212: EQUAL
45213: IFFALSE 45223
// result := true ;
45215: LD_ADDR_VAR 0 2
45219: PUSH
45220: LD_INT 1
45222: ST_TO_ADDR
// end ;
45223: LD_VAR 0 2
45227: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45228: LD_INT 0
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
// if pos < 1 then
45234: LD_VAR 0 2
45238: PUSH
45239: LD_INT 1
45241: LESS
45242: IFFALSE 45246
// exit ;
45244: GO 45549
// if pos = 1 then
45246: LD_VAR 0 2
45250: PUSH
45251: LD_INT 1
45253: EQUAL
45254: IFFALSE 45287
// result := Replace ( arr , pos [ 1 ] , value ) else
45256: LD_ADDR_VAR 0 4
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: LD_VAR 0 2
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: PPUSH
45275: LD_VAR 0 3
45279: PPUSH
45280: CALL_OW 1
45284: ST_TO_ADDR
45285: GO 45549
// begin tmp := arr ;
45287: LD_ADDR_VAR 0 6
45291: PUSH
45292: LD_VAR 0 1
45296: ST_TO_ADDR
// s_arr := [ tmp ] ;
45297: LD_ADDR_VAR 0 7
45301: PUSH
45302: LD_VAR 0 6
45306: PUSH
45307: EMPTY
45308: LIST
45309: ST_TO_ADDR
// for i = 1 to pos - 1 do
45310: LD_ADDR_VAR 0 5
45314: PUSH
45315: DOUBLE
45316: LD_INT 1
45318: DEC
45319: ST_TO_ADDR
45320: LD_VAR 0 2
45324: PUSH
45325: LD_INT 1
45327: MINUS
45328: PUSH
45329: FOR_TO
45330: IFFALSE 45375
// begin tmp := tmp [ pos [ i ] ] ;
45332: LD_ADDR_VAR 0 6
45336: PUSH
45337: LD_VAR 0 6
45341: PUSH
45342: LD_VAR 0 2
45346: PUSH
45347: LD_VAR 0 5
45351: ARRAY
45352: ARRAY
45353: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45354: LD_ADDR_VAR 0 7
45358: PUSH
45359: LD_VAR 0 7
45363: PUSH
45364: LD_VAR 0 6
45368: PUSH
45369: EMPTY
45370: LIST
45371: ADD
45372: ST_TO_ADDR
// end ;
45373: GO 45329
45375: POP
45376: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45377: LD_ADDR_VAR 0 6
45381: PUSH
45382: LD_VAR 0 6
45386: PPUSH
45387: LD_VAR 0 2
45391: PUSH
45392: LD_VAR 0 2
45396: ARRAY
45397: PPUSH
45398: LD_VAR 0 3
45402: PPUSH
45403: CALL_OW 1
45407: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45408: LD_ADDR_VAR 0 7
45412: PUSH
45413: LD_VAR 0 7
45417: PPUSH
45418: LD_VAR 0 7
45422: PPUSH
45423: LD_VAR 0 6
45427: PPUSH
45428: CALL_OW 1
45432: ST_TO_ADDR
// for i = s_arr downto 2 do
45433: LD_ADDR_VAR 0 5
45437: PUSH
45438: DOUBLE
45439: LD_VAR 0 7
45443: INC
45444: ST_TO_ADDR
45445: LD_INT 2
45447: PUSH
45448: FOR_DOWNTO
45449: IFFALSE 45533
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45451: LD_ADDR_VAR 0 6
45455: PUSH
45456: LD_VAR 0 7
45460: PUSH
45461: LD_VAR 0 5
45465: PUSH
45466: LD_INT 1
45468: MINUS
45469: ARRAY
45470: PPUSH
45471: LD_VAR 0 2
45475: PUSH
45476: LD_VAR 0 5
45480: PUSH
45481: LD_INT 1
45483: MINUS
45484: ARRAY
45485: PPUSH
45486: LD_VAR 0 7
45490: PUSH
45491: LD_VAR 0 5
45495: ARRAY
45496: PPUSH
45497: CALL_OW 1
45501: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45502: LD_ADDR_VAR 0 7
45506: PUSH
45507: LD_VAR 0 7
45511: PPUSH
45512: LD_VAR 0 5
45516: PUSH
45517: LD_INT 1
45519: MINUS
45520: PPUSH
45521: LD_VAR 0 6
45525: PPUSH
45526: CALL_OW 1
45530: ST_TO_ADDR
// end ;
45531: GO 45448
45533: POP
45534: POP
// result := s_arr [ 1 ] ;
45535: LD_ADDR_VAR 0 4
45539: PUSH
45540: LD_VAR 0 7
45544: PUSH
45545: LD_INT 1
45547: ARRAY
45548: ST_TO_ADDR
// end ; end ;
45549: LD_VAR 0 4
45553: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45554: LD_INT 0
45556: PPUSH
45557: PPUSH
// if not list then
45558: LD_VAR 0 1
45562: NOT
45563: IFFALSE 45567
// exit ;
45565: GO 45658
// i := list [ pos1 ] ;
45567: LD_ADDR_VAR 0 5
45571: PUSH
45572: LD_VAR 0 1
45576: PUSH
45577: LD_VAR 0 2
45581: ARRAY
45582: ST_TO_ADDR
// if not i then
45583: LD_VAR 0 5
45587: NOT
45588: IFFALSE 45592
// exit ;
45590: GO 45658
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45592: LD_ADDR_VAR 0 1
45596: PUSH
45597: LD_VAR 0 1
45601: PPUSH
45602: LD_VAR 0 2
45606: PPUSH
45607: LD_VAR 0 1
45611: PUSH
45612: LD_VAR 0 3
45616: ARRAY
45617: PPUSH
45618: CALL_OW 1
45622: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45623: LD_ADDR_VAR 0 1
45627: PUSH
45628: LD_VAR 0 1
45632: PPUSH
45633: LD_VAR 0 3
45637: PPUSH
45638: LD_VAR 0 5
45642: PPUSH
45643: CALL_OW 1
45647: ST_TO_ADDR
// result := list ;
45648: LD_ADDR_VAR 0 4
45652: PUSH
45653: LD_VAR 0 1
45657: ST_TO_ADDR
// end ;
45658: LD_VAR 0 4
45662: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45663: LD_INT 0
45665: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45666: LD_ADDR_VAR 0 5
45670: PUSH
45671: LD_VAR 0 1
45675: PPUSH
45676: CALL_OW 250
45680: PPUSH
45681: LD_VAR 0 1
45685: PPUSH
45686: CALL_OW 251
45690: PPUSH
45691: LD_VAR 0 2
45695: PPUSH
45696: LD_VAR 0 3
45700: PPUSH
45701: LD_VAR 0 4
45705: PPUSH
45706: CALL 45716 0 5
45710: ST_TO_ADDR
// end ;
45711: LD_VAR 0 5
45715: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45716: LD_INT 0
45718: PPUSH
45719: PPUSH
45720: PPUSH
45721: PPUSH
// if not list then
45722: LD_VAR 0 3
45726: NOT
45727: IFFALSE 45731
// exit ;
45729: GO 46119
// result := [ ] ;
45731: LD_ADDR_VAR 0 6
45735: PUSH
45736: EMPTY
45737: ST_TO_ADDR
// for i in list do
45738: LD_ADDR_VAR 0 7
45742: PUSH
45743: LD_VAR 0 3
45747: PUSH
45748: FOR_IN
45749: IFFALSE 45951
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45751: LD_ADDR_VAR 0 9
45755: PUSH
45756: LD_VAR 0 7
45760: PPUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: LD_VAR 0 2
45770: PPUSH
45771: CALL_OW 297
45775: ST_TO_ADDR
// if not result then
45776: LD_VAR 0 6
45780: NOT
45781: IFFALSE 45807
// result := [ [ i , tmp ] ] else
45783: LD_ADDR_VAR 0 6
45787: PUSH
45788: LD_VAR 0 7
45792: PUSH
45793: LD_VAR 0 9
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: EMPTY
45803: LIST
45804: ST_TO_ADDR
45805: GO 45949
// begin if result [ result ] [ 2 ] < tmp then
45807: LD_VAR 0 6
45811: PUSH
45812: LD_VAR 0 6
45816: ARRAY
45817: PUSH
45818: LD_INT 2
45820: ARRAY
45821: PUSH
45822: LD_VAR 0 9
45826: LESS
45827: IFFALSE 45869
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45829: LD_ADDR_VAR 0 6
45833: PUSH
45834: LD_VAR 0 6
45838: PPUSH
45839: LD_VAR 0 6
45843: PUSH
45844: LD_INT 1
45846: PLUS
45847: PPUSH
45848: LD_VAR 0 7
45852: PUSH
45853: LD_VAR 0 9
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PPUSH
45862: CALL_OW 2
45866: ST_TO_ADDR
45867: GO 45949
// for j = 1 to result do
45869: LD_ADDR_VAR 0 8
45873: PUSH
45874: DOUBLE
45875: LD_INT 1
45877: DEC
45878: ST_TO_ADDR
45879: LD_VAR 0 6
45883: PUSH
45884: FOR_TO
45885: IFFALSE 45947
// begin if tmp < result [ j ] [ 2 ] then
45887: LD_VAR 0 9
45891: PUSH
45892: LD_VAR 0 6
45896: PUSH
45897: LD_VAR 0 8
45901: ARRAY
45902: PUSH
45903: LD_INT 2
45905: ARRAY
45906: LESS
45907: IFFALSE 45945
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45909: LD_ADDR_VAR 0 6
45913: PUSH
45914: LD_VAR 0 6
45918: PPUSH
45919: LD_VAR 0 8
45923: PPUSH
45924: LD_VAR 0 7
45928: PUSH
45929: LD_VAR 0 9
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PPUSH
45938: CALL_OW 2
45942: ST_TO_ADDR
// break ;
45943: GO 45947
// end ; end ;
45945: GO 45884
45947: POP
45948: POP
// end ; end ;
45949: GO 45748
45951: POP
45952: POP
// if result and not asc then
45953: LD_VAR 0 6
45957: PUSH
45958: LD_VAR 0 4
45962: NOT
45963: AND
45964: IFFALSE 46039
// begin tmp := result ;
45966: LD_ADDR_VAR 0 9
45970: PUSH
45971: LD_VAR 0 6
45975: ST_TO_ADDR
// for i = tmp downto 1 do
45976: LD_ADDR_VAR 0 7
45980: PUSH
45981: DOUBLE
45982: LD_VAR 0 9
45986: INC
45987: ST_TO_ADDR
45988: LD_INT 1
45990: PUSH
45991: FOR_DOWNTO
45992: IFFALSE 46037
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45994: LD_ADDR_VAR 0 6
45998: PUSH
45999: LD_VAR 0 6
46003: PPUSH
46004: LD_VAR 0 9
46008: PUSH
46009: LD_VAR 0 7
46013: MINUS
46014: PUSH
46015: LD_INT 1
46017: PLUS
46018: PPUSH
46019: LD_VAR 0 9
46023: PUSH
46024: LD_VAR 0 7
46028: ARRAY
46029: PPUSH
46030: CALL_OW 1
46034: ST_TO_ADDR
46035: GO 45991
46037: POP
46038: POP
// end ; tmp := [ ] ;
46039: LD_ADDR_VAR 0 9
46043: PUSH
46044: EMPTY
46045: ST_TO_ADDR
// if mode then
46046: LD_VAR 0 5
46050: IFFALSE 46119
// begin for i = 1 to result do
46052: LD_ADDR_VAR 0 7
46056: PUSH
46057: DOUBLE
46058: LD_INT 1
46060: DEC
46061: ST_TO_ADDR
46062: LD_VAR 0 6
46066: PUSH
46067: FOR_TO
46068: IFFALSE 46107
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46070: LD_ADDR_VAR 0 9
46074: PUSH
46075: LD_VAR 0 9
46079: PPUSH
46080: LD_VAR 0 7
46084: PPUSH
46085: LD_VAR 0 6
46089: PUSH
46090: LD_VAR 0 7
46094: ARRAY
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: PPUSH
46100: CALL_OW 1
46104: ST_TO_ADDR
46105: GO 46067
46107: POP
46108: POP
// result := tmp ;
46109: LD_ADDR_VAR 0 6
46113: PUSH
46114: LD_VAR 0 9
46118: ST_TO_ADDR
// end ; end ;
46119: LD_VAR 0 6
46123: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46124: LD_INT 0
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46132: LD_ADDR_VAR 0 5
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: EMPTY
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// if not x or not y then
46154: LD_VAR 0 2
46158: NOT
46159: PUSH
46160: LD_VAR 0 3
46164: NOT
46165: OR
46166: IFFALSE 46170
// exit ;
46168: GO 47820
// if not range then
46170: LD_VAR 0 4
46174: NOT
46175: IFFALSE 46185
// range := 10 ;
46177: LD_ADDR_VAR 0 4
46181: PUSH
46182: LD_INT 10
46184: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46185: LD_ADDR_VAR 0 8
46189: PUSH
46190: LD_INT 81
46192: PUSH
46193: LD_VAR 0 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 92
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: LD_VAR 0 3
46214: PUSH
46215: LD_VAR 0 4
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: LD_INT 21
46231: PUSH
46232: LD_INT 3
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: PPUSH
46248: CALL_OW 69
46252: ST_TO_ADDR
// if not tmp then
46253: LD_VAR 0 8
46257: NOT
46258: IFFALSE 46262
// exit ;
46260: GO 47820
// for i in tmp do
46262: LD_ADDR_VAR 0 6
46266: PUSH
46267: LD_VAR 0 8
46271: PUSH
46272: FOR_IN
46273: IFFALSE 47795
// begin points := [ 0 , 0 , 0 ] ;
46275: LD_ADDR_VAR 0 9
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: ST_TO_ADDR
// bpoints := 1 ;
46294: LD_ADDR_VAR 0 10
46298: PUSH
46299: LD_INT 1
46301: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46302: LD_VAR 0 6
46306: PPUSH
46307: CALL_OW 247
46311: PUSH
46312: LD_INT 1
46314: DOUBLE
46315: EQUAL
46316: IFTRUE 46320
46318: GO 46898
46320: POP
// begin if GetClass ( i ) = 1 then
46321: LD_VAR 0 6
46325: PPUSH
46326: CALL_OW 257
46330: PUSH
46331: LD_INT 1
46333: EQUAL
46334: IFFALSE 46355
// points := [ 10 , 5 , 3 ] ;
46336: LD_ADDR_VAR 0 9
46340: PUSH
46341: LD_INT 10
46343: PUSH
46344: LD_INT 5
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46355: LD_VAR 0 6
46359: PPUSH
46360: CALL_OW 257
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: IN
46379: IFFALSE 46400
// points := [ 3 , 2 , 1 ] ;
46381: LD_ADDR_VAR 0 9
46385: PUSH
46386: LD_INT 3
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46400: LD_VAR 0 6
46404: PPUSH
46405: CALL_OW 257
46409: PUSH
46410: LD_INT 5
46412: EQUAL
46413: IFFALSE 46434
// points := [ 130 , 5 , 2 ] ;
46415: LD_ADDR_VAR 0 9
46419: PUSH
46420: LD_INT 130
46422: PUSH
46423: LD_INT 5
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46434: LD_VAR 0 6
46438: PPUSH
46439: CALL_OW 257
46443: PUSH
46444: LD_INT 8
46446: EQUAL
46447: IFFALSE 46468
// points := [ 35 , 35 , 30 ] ;
46449: LD_ADDR_VAR 0 9
46453: PUSH
46454: LD_INT 35
46456: PUSH
46457: LD_INT 35
46459: PUSH
46460: LD_INT 30
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46468: LD_VAR 0 6
46472: PPUSH
46473: CALL_OW 257
46477: PUSH
46478: LD_INT 9
46480: EQUAL
46481: IFFALSE 46502
// points := [ 20 , 55 , 40 ] ;
46483: LD_ADDR_VAR 0 9
46487: PUSH
46488: LD_INT 20
46490: PUSH
46491: LD_INT 55
46493: PUSH
46494: LD_INT 40
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46502: LD_VAR 0 6
46506: PPUSH
46507: CALL_OW 257
46511: PUSH
46512: LD_INT 12
46514: PUSH
46515: LD_INT 16
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: IN
46522: IFFALSE 46543
// points := [ 5 , 3 , 2 ] ;
46524: LD_ADDR_VAR 0 9
46528: PUSH
46529: LD_INT 5
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46543: LD_VAR 0 6
46547: PPUSH
46548: CALL_OW 257
46552: PUSH
46553: LD_INT 17
46555: EQUAL
46556: IFFALSE 46577
// points := [ 100 , 50 , 75 ] ;
46558: LD_ADDR_VAR 0 9
46562: PUSH
46563: LD_INT 100
46565: PUSH
46566: LD_INT 50
46568: PUSH
46569: LD_INT 75
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46577: LD_VAR 0 6
46581: PPUSH
46582: CALL_OW 257
46586: PUSH
46587: LD_INT 15
46589: EQUAL
46590: IFFALSE 46611
// points := [ 10 , 5 , 3 ] ;
46592: LD_ADDR_VAR 0 9
46596: PUSH
46597: LD_INT 10
46599: PUSH
46600: LD_INT 5
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46611: LD_VAR 0 6
46615: PPUSH
46616: CALL_OW 257
46620: PUSH
46621: LD_INT 14
46623: EQUAL
46624: IFFALSE 46645
// points := [ 10 , 0 , 0 ] ;
46626: LD_ADDR_VAR 0 9
46630: PUSH
46631: LD_INT 10
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46645: LD_VAR 0 6
46649: PPUSH
46650: CALL_OW 257
46654: PUSH
46655: LD_INT 11
46657: EQUAL
46658: IFFALSE 46679
// points := [ 30 , 10 , 5 ] ;
46660: LD_ADDR_VAR 0 9
46664: PUSH
46665: LD_INT 30
46667: PUSH
46668: LD_INT 10
46670: PUSH
46671: LD_INT 5
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46679: LD_VAR 0 1
46683: PPUSH
46684: LD_INT 5
46686: PPUSH
46687: CALL_OW 321
46691: PUSH
46692: LD_INT 2
46694: EQUAL
46695: IFFALSE 46712
// bpoints := bpoints * 1.8 ;
46697: LD_ADDR_VAR 0 10
46701: PUSH
46702: LD_VAR 0 10
46706: PUSH
46707: LD_REAL  1.80000000000000E+0000
46710: MUL
46711: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46712: LD_VAR 0 6
46716: PPUSH
46717: CALL_OW 257
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 4
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: IN
46740: PUSH
46741: LD_VAR 0 1
46745: PPUSH
46746: LD_INT 51
46748: PPUSH
46749: CALL_OW 321
46753: PUSH
46754: LD_INT 2
46756: EQUAL
46757: AND
46758: IFFALSE 46775
// bpoints := bpoints * 1.2 ;
46760: LD_ADDR_VAR 0 10
46764: PUSH
46765: LD_VAR 0 10
46769: PUSH
46770: LD_REAL  1.20000000000000E+0000
46773: MUL
46774: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46775: LD_VAR 0 6
46779: PPUSH
46780: CALL_OW 257
46784: PUSH
46785: LD_INT 5
46787: PUSH
46788: LD_INT 7
46790: PUSH
46791: LD_INT 9
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: IN
46799: PUSH
46800: LD_VAR 0 1
46804: PPUSH
46805: LD_INT 52
46807: PPUSH
46808: CALL_OW 321
46812: PUSH
46813: LD_INT 2
46815: EQUAL
46816: AND
46817: IFFALSE 46834
// bpoints := bpoints * 1.5 ;
46819: LD_ADDR_VAR 0 10
46823: PUSH
46824: LD_VAR 0 10
46828: PUSH
46829: LD_REAL  1.50000000000000E+0000
46832: MUL
46833: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46834: LD_VAR 0 1
46838: PPUSH
46839: LD_INT 66
46841: PPUSH
46842: CALL_OW 321
46846: PUSH
46847: LD_INT 2
46849: EQUAL
46850: IFFALSE 46867
// bpoints := bpoints * 1.1 ;
46852: LD_ADDR_VAR 0 10
46856: PUSH
46857: LD_VAR 0 10
46861: PUSH
46862: LD_REAL  1.10000000000000E+0000
46865: MUL
46866: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46867: LD_ADDR_VAR 0 10
46871: PUSH
46872: LD_VAR 0 10
46876: PUSH
46877: LD_VAR 0 6
46881: PPUSH
46882: LD_INT 1
46884: PPUSH
46885: CALL_OW 259
46889: PUSH
46890: LD_REAL  1.15000000000000E+0000
46893: MUL
46894: MUL
46895: ST_TO_ADDR
// end ; unit_vehicle :
46896: GO 47724
46898: LD_INT 2
46900: DOUBLE
46901: EQUAL
46902: IFTRUE 46906
46904: GO 47712
46906: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46907: LD_VAR 0 6
46911: PPUSH
46912: CALL_OW 264
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 42
46922: PUSH
46923: LD_INT 24
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: IN
46931: IFFALSE 46952
// points := [ 25 , 5 , 3 ] ;
46933: LD_ADDR_VAR 0 9
46937: PUSH
46938: LD_INT 25
46940: PUSH
46941: LD_INT 5
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46952: LD_VAR 0 6
46956: PPUSH
46957: CALL_OW 264
46961: PUSH
46962: LD_INT 4
46964: PUSH
46965: LD_INT 43
46967: PUSH
46968: LD_INT 25
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: IN
46976: IFFALSE 46997
// points := [ 40 , 15 , 5 ] ;
46978: LD_ADDR_VAR 0 9
46982: PUSH
46983: LD_INT 40
46985: PUSH
46986: LD_INT 15
46988: PUSH
46989: LD_INT 5
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46997: LD_VAR 0 6
47001: PPUSH
47002: CALL_OW 264
47006: PUSH
47007: LD_INT 3
47009: PUSH
47010: LD_INT 23
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: IN
47017: IFFALSE 47038
// points := [ 7 , 25 , 8 ] ;
47019: LD_ADDR_VAR 0 9
47023: PUSH
47024: LD_INT 7
47026: PUSH
47027: LD_INT 25
47029: PUSH
47030: LD_INT 8
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47038: LD_VAR 0 6
47042: PPUSH
47043: CALL_OW 264
47047: PUSH
47048: LD_INT 5
47050: PUSH
47051: LD_INT 27
47053: PUSH
47054: LD_INT 44
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: IN
47062: IFFALSE 47083
// points := [ 14 , 50 , 16 ] ;
47064: LD_ADDR_VAR 0 9
47068: PUSH
47069: LD_INT 14
47071: PUSH
47072: LD_INT 50
47074: PUSH
47075: LD_INT 16
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47083: LD_VAR 0 6
47087: PPUSH
47088: CALL_OW 264
47092: PUSH
47093: LD_INT 6
47095: PUSH
47096: LD_INT 46
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: IN
47103: IFFALSE 47124
// points := [ 32 , 120 , 70 ] ;
47105: LD_ADDR_VAR 0 9
47109: PUSH
47110: LD_INT 32
47112: PUSH
47113: LD_INT 120
47115: PUSH
47116: LD_INT 70
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: LIST
47123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47124: LD_VAR 0 6
47128: PPUSH
47129: CALL_OW 264
47133: PUSH
47134: LD_INT 7
47136: PUSH
47137: LD_INT 28
47139: PUSH
47140: LD_INT 45
47142: PUSH
47143: LD_INT 92
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: IN
47152: IFFALSE 47173
// points := [ 35 , 20 , 45 ] ;
47154: LD_ADDR_VAR 0 9
47158: PUSH
47159: LD_INT 35
47161: PUSH
47162: LD_INT 20
47164: PUSH
47165: LD_INT 45
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47173: LD_VAR 0 6
47177: PPUSH
47178: CALL_OW 264
47182: PUSH
47183: LD_INT 47
47185: PUSH
47186: EMPTY
47187: LIST
47188: IN
47189: IFFALSE 47210
// points := [ 67 , 45 , 75 ] ;
47191: LD_ADDR_VAR 0 9
47195: PUSH
47196: LD_INT 67
47198: PUSH
47199: LD_INT 45
47201: PUSH
47202: LD_INT 75
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47210: LD_VAR 0 6
47214: PPUSH
47215: CALL_OW 264
47219: PUSH
47220: LD_INT 26
47222: PUSH
47223: EMPTY
47224: LIST
47225: IN
47226: IFFALSE 47247
// points := [ 120 , 30 , 80 ] ;
47228: LD_ADDR_VAR 0 9
47232: PUSH
47233: LD_INT 120
47235: PUSH
47236: LD_INT 30
47238: PUSH
47239: LD_INT 80
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47247: LD_VAR 0 6
47251: PPUSH
47252: CALL_OW 264
47256: PUSH
47257: LD_INT 22
47259: PUSH
47260: EMPTY
47261: LIST
47262: IN
47263: IFFALSE 47284
// points := [ 40 , 1 , 1 ] ;
47265: LD_ADDR_VAR 0 9
47269: PUSH
47270: LD_INT 40
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47284: LD_VAR 0 6
47288: PPUSH
47289: CALL_OW 264
47293: PUSH
47294: LD_INT 29
47296: PUSH
47297: EMPTY
47298: LIST
47299: IN
47300: IFFALSE 47321
// points := [ 70 , 200 , 400 ] ;
47302: LD_ADDR_VAR 0 9
47306: PUSH
47307: LD_INT 70
47309: PUSH
47310: LD_INT 200
47312: PUSH
47313: LD_INT 400
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47321: LD_VAR 0 6
47325: PPUSH
47326: CALL_OW 264
47330: PUSH
47331: LD_INT 14
47333: PUSH
47334: LD_INT 53
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: IN
47341: IFFALSE 47362
// points := [ 40 , 10 , 20 ] ;
47343: LD_ADDR_VAR 0 9
47347: PUSH
47348: LD_INT 40
47350: PUSH
47351: LD_INT 10
47353: PUSH
47354: LD_INT 20
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47362: LD_VAR 0 6
47366: PPUSH
47367: CALL_OW 264
47371: PUSH
47372: LD_INT 9
47374: PUSH
47375: EMPTY
47376: LIST
47377: IN
47378: IFFALSE 47399
// points := [ 5 , 70 , 20 ] ;
47380: LD_ADDR_VAR 0 9
47384: PUSH
47385: LD_INT 5
47387: PUSH
47388: LD_INT 70
47390: PUSH
47391: LD_INT 20
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47399: LD_VAR 0 6
47403: PPUSH
47404: CALL_OW 264
47408: PUSH
47409: LD_INT 10
47411: PUSH
47412: EMPTY
47413: LIST
47414: IN
47415: IFFALSE 47436
// points := [ 35 , 110 , 70 ] ;
47417: LD_ADDR_VAR 0 9
47421: PUSH
47422: LD_INT 35
47424: PUSH
47425: LD_INT 110
47427: PUSH
47428: LD_INT 70
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47436: LD_VAR 0 6
47440: PPUSH
47441: CALL_OW 265
47445: PUSH
47446: LD_INT 25
47448: EQUAL
47449: IFFALSE 47470
// points := [ 80 , 65 , 100 ] ;
47451: LD_ADDR_VAR 0 9
47455: PUSH
47456: LD_INT 80
47458: PUSH
47459: LD_INT 65
47461: PUSH
47462: LD_INT 100
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47470: LD_VAR 0 6
47474: PPUSH
47475: CALL_OW 263
47479: PUSH
47480: LD_INT 1
47482: EQUAL
47483: IFFALSE 47518
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47485: LD_ADDR_VAR 0 10
47489: PUSH
47490: LD_VAR 0 10
47494: PUSH
47495: LD_VAR 0 6
47499: PPUSH
47500: CALL_OW 311
47504: PPUSH
47505: LD_INT 3
47507: PPUSH
47508: CALL_OW 259
47512: PUSH
47513: LD_INT 4
47515: MUL
47516: MUL
47517: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 263
47527: PUSH
47528: LD_INT 2
47530: EQUAL
47531: IFFALSE 47582
// begin j := IsControledBy ( i ) ;
47533: LD_ADDR_VAR 0 7
47537: PUSH
47538: LD_VAR 0 6
47542: PPUSH
47543: CALL_OW 312
47547: ST_TO_ADDR
// if j then
47548: LD_VAR 0 7
47552: IFFALSE 47582
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47554: LD_ADDR_VAR 0 10
47558: PUSH
47559: LD_VAR 0 10
47563: PUSH
47564: LD_VAR 0 7
47568: PPUSH
47569: LD_INT 3
47571: PPUSH
47572: CALL_OW 259
47576: PUSH
47577: LD_INT 3
47579: MUL
47580: MUL
47581: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47582: LD_VAR 0 6
47586: PPUSH
47587: CALL_OW 264
47591: PUSH
47592: LD_INT 5
47594: PUSH
47595: LD_INT 6
47597: PUSH
47598: LD_INT 46
47600: PUSH
47601: LD_INT 44
47603: PUSH
47604: LD_INT 47
47606: PUSH
47607: LD_INT 45
47609: PUSH
47610: LD_INT 28
47612: PUSH
47613: LD_INT 7
47615: PUSH
47616: LD_INT 27
47618: PUSH
47619: LD_INT 29
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: IN
47634: PUSH
47635: LD_VAR 0 1
47639: PPUSH
47640: LD_INT 52
47642: PPUSH
47643: CALL_OW 321
47647: PUSH
47648: LD_INT 2
47650: EQUAL
47651: AND
47652: IFFALSE 47669
// bpoints := bpoints * 1.2 ;
47654: LD_ADDR_VAR 0 10
47658: PUSH
47659: LD_VAR 0 10
47663: PUSH
47664: LD_REAL  1.20000000000000E+0000
47667: MUL
47668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47669: LD_VAR 0 6
47673: PPUSH
47674: CALL_OW 264
47678: PUSH
47679: LD_INT 6
47681: PUSH
47682: LD_INT 46
47684: PUSH
47685: LD_INT 47
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: IN
47693: IFFALSE 47710
// bpoints := bpoints * 1.2 ;
47695: LD_ADDR_VAR 0 10
47699: PUSH
47700: LD_VAR 0 10
47704: PUSH
47705: LD_REAL  1.20000000000000E+0000
47708: MUL
47709: ST_TO_ADDR
// end ; unit_building :
47710: GO 47724
47712: LD_INT 3
47714: DOUBLE
47715: EQUAL
47716: IFTRUE 47720
47718: GO 47723
47720: POP
// ; end ;
47721: GO 47724
47723: POP
// for j = 1 to 3 do
47724: LD_ADDR_VAR 0 7
47728: PUSH
47729: DOUBLE
47730: LD_INT 1
47732: DEC
47733: ST_TO_ADDR
47734: LD_INT 3
47736: PUSH
47737: FOR_TO
47738: IFFALSE 47791
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47740: LD_ADDR_VAR 0 5
47744: PUSH
47745: LD_VAR 0 5
47749: PPUSH
47750: LD_VAR 0 7
47754: PPUSH
47755: LD_VAR 0 5
47759: PUSH
47760: LD_VAR 0 7
47764: ARRAY
47765: PUSH
47766: LD_VAR 0 9
47770: PUSH
47771: LD_VAR 0 7
47775: ARRAY
47776: PUSH
47777: LD_VAR 0 10
47781: MUL
47782: PLUS
47783: PPUSH
47784: CALL_OW 1
47788: ST_TO_ADDR
47789: GO 47737
47791: POP
47792: POP
// end ;
47793: GO 46272
47795: POP
47796: POP
// result := Replace ( result , 4 , tmp ) ;
47797: LD_ADDR_VAR 0 5
47801: PUSH
47802: LD_VAR 0 5
47806: PPUSH
47807: LD_INT 4
47809: PPUSH
47810: LD_VAR 0 8
47814: PPUSH
47815: CALL_OW 1
47819: ST_TO_ADDR
// end ;
47820: LD_VAR 0 5
47824: RET
// export function DangerAtRange ( unit , range ) ; begin
47825: LD_INT 0
47827: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47828: LD_ADDR_VAR 0 3
47832: PUSH
47833: LD_VAR 0 1
47837: PPUSH
47838: CALL_OW 255
47842: PPUSH
47843: LD_VAR 0 1
47847: PPUSH
47848: CALL_OW 250
47852: PPUSH
47853: LD_VAR 0 1
47857: PPUSH
47858: CALL_OW 251
47862: PPUSH
47863: LD_VAR 0 2
47867: PPUSH
47868: CALL 46124 0 4
47872: ST_TO_ADDR
// end ;
47873: LD_VAR 0 3
47877: RET
// export function DangerInArea ( side , area ) ; begin
47878: LD_INT 0
47880: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47881: LD_ADDR_VAR 0 3
47885: PUSH
47886: LD_VAR 0 2
47890: PPUSH
47891: LD_INT 81
47893: PUSH
47894: LD_VAR 0 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PPUSH
47903: CALL_OW 70
47907: ST_TO_ADDR
// end ;
47908: LD_VAR 0 3
47912: RET
// export function IsExtension ( b ) ; begin
47913: LD_INT 0
47915: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47916: LD_ADDR_VAR 0 2
47920: PUSH
47921: LD_VAR 0 1
47925: PUSH
47926: LD_INT 23
47928: PUSH
47929: LD_INT 20
47931: PUSH
47932: LD_INT 22
47934: PUSH
47935: LD_INT 17
47937: PUSH
47938: LD_INT 24
47940: PUSH
47941: LD_INT 21
47943: PUSH
47944: LD_INT 19
47946: PUSH
47947: LD_INT 16
47949: PUSH
47950: LD_INT 25
47952: PUSH
47953: LD_INT 18
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: IN
47968: ST_TO_ADDR
// end ;
47969: LD_VAR 0 2
47973: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47974: LD_INT 0
47976: PPUSH
47977: PPUSH
47978: PPUSH
// result := [ ] ;
47979: LD_ADDR_VAR 0 4
47983: PUSH
47984: EMPTY
47985: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47986: LD_ADDR_VAR 0 5
47990: PUSH
47991: LD_VAR 0 2
47995: PPUSH
47996: LD_INT 21
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PPUSH
48006: CALL_OW 70
48010: ST_TO_ADDR
// if not tmp then
48011: LD_VAR 0 5
48015: NOT
48016: IFFALSE 48020
// exit ;
48018: GO 48084
// if checkLink then
48020: LD_VAR 0 3
48024: IFFALSE 48074
// begin for i in tmp do
48026: LD_ADDR_VAR 0 6
48030: PUSH
48031: LD_VAR 0 5
48035: PUSH
48036: FOR_IN
48037: IFFALSE 48072
// if GetBase ( i ) <> base then
48039: LD_VAR 0 6
48043: PPUSH
48044: CALL_OW 274
48048: PUSH
48049: LD_VAR 0 1
48053: NONEQUAL
48054: IFFALSE 48070
// ComLinkToBase ( base , i ) ;
48056: LD_VAR 0 1
48060: PPUSH
48061: LD_VAR 0 6
48065: PPUSH
48066: CALL_OW 169
48070: GO 48036
48072: POP
48073: POP
// end ; result := tmp ;
48074: LD_ADDR_VAR 0 4
48078: PUSH
48079: LD_VAR 0 5
48083: ST_TO_ADDR
// end ;
48084: LD_VAR 0 4
48088: RET
// export function ComComplete ( units , b ) ; var i ; begin
48089: LD_INT 0
48091: PPUSH
48092: PPUSH
// if not units then
48093: LD_VAR 0 1
48097: NOT
48098: IFFALSE 48102
// exit ;
48100: GO 48192
// for i in units do
48102: LD_ADDR_VAR 0 4
48106: PUSH
48107: LD_VAR 0 1
48111: PUSH
48112: FOR_IN
48113: IFFALSE 48190
// if BuildingStatus ( b ) = bs_build then
48115: LD_VAR 0 2
48119: PPUSH
48120: CALL_OW 461
48124: PUSH
48125: LD_INT 1
48127: EQUAL
48128: IFFALSE 48188
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48130: LD_VAR 0 4
48134: PPUSH
48135: LD_STRING h
48137: PUSH
48138: LD_VAR 0 2
48142: PPUSH
48143: CALL_OW 250
48147: PUSH
48148: LD_VAR 0 2
48152: PPUSH
48153: CALL_OW 251
48157: PUSH
48158: LD_VAR 0 2
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: PUSH
48181: EMPTY
48182: LIST
48183: PPUSH
48184: CALL_OW 446
48188: GO 48112
48190: POP
48191: POP
// end ;
48192: LD_VAR 0 3
48196: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48197: LD_INT 0
48199: PPUSH
48200: PPUSH
48201: PPUSH
48202: PPUSH
48203: PPUSH
48204: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48205: LD_VAR 0 1
48209: NOT
48210: PUSH
48211: LD_VAR 0 1
48215: PPUSH
48216: CALL_OW 263
48220: PUSH
48221: LD_INT 2
48223: NONEQUAL
48224: OR
48225: IFFALSE 48229
// exit ;
48227: GO 48545
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48229: LD_ADDR_VAR 0 6
48233: PUSH
48234: LD_INT 22
48236: PUSH
48237: LD_VAR 0 1
48241: PPUSH
48242: CALL_OW 255
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 30
48256: PUSH
48257: LD_INT 36
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 34
48266: PUSH
48267: LD_INT 31
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PPUSH
48283: CALL_OW 69
48287: ST_TO_ADDR
// if not tmp then
48288: LD_VAR 0 6
48292: NOT
48293: IFFALSE 48297
// exit ;
48295: GO 48545
// result := [ ] ;
48297: LD_ADDR_VAR 0 2
48301: PUSH
48302: EMPTY
48303: ST_TO_ADDR
// for i in tmp do
48304: LD_ADDR_VAR 0 3
48308: PUSH
48309: LD_VAR 0 6
48313: PUSH
48314: FOR_IN
48315: IFFALSE 48386
// begin t := UnitsInside ( i ) ;
48317: LD_ADDR_VAR 0 4
48321: PUSH
48322: LD_VAR 0 3
48326: PPUSH
48327: CALL_OW 313
48331: ST_TO_ADDR
// if t then
48332: LD_VAR 0 4
48336: IFFALSE 48384
// for j in t do
48338: LD_ADDR_VAR 0 7
48342: PUSH
48343: LD_VAR 0 4
48347: PUSH
48348: FOR_IN
48349: IFFALSE 48382
// result := Replace ( result , result + 1 , j ) ;
48351: LD_ADDR_VAR 0 2
48355: PUSH
48356: LD_VAR 0 2
48360: PPUSH
48361: LD_VAR 0 2
48365: PUSH
48366: LD_INT 1
48368: PLUS
48369: PPUSH
48370: LD_VAR 0 7
48374: PPUSH
48375: CALL_OW 1
48379: ST_TO_ADDR
48380: GO 48348
48382: POP
48383: POP
// end ;
48384: GO 48314
48386: POP
48387: POP
// if not result then
48388: LD_VAR 0 2
48392: NOT
48393: IFFALSE 48397
// exit ;
48395: GO 48545
// mech := result [ 1 ] ;
48397: LD_ADDR_VAR 0 5
48401: PUSH
48402: LD_VAR 0 2
48406: PUSH
48407: LD_INT 1
48409: ARRAY
48410: ST_TO_ADDR
// if result > 1 then
48411: LD_VAR 0 2
48415: PUSH
48416: LD_INT 1
48418: GREATER
48419: IFFALSE 48531
// begin for i = 2 to result do
48421: LD_ADDR_VAR 0 3
48425: PUSH
48426: DOUBLE
48427: LD_INT 2
48429: DEC
48430: ST_TO_ADDR
48431: LD_VAR 0 2
48435: PUSH
48436: FOR_TO
48437: IFFALSE 48529
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48439: LD_ADDR_VAR 0 4
48443: PUSH
48444: LD_VAR 0 2
48448: PUSH
48449: LD_VAR 0 3
48453: ARRAY
48454: PPUSH
48455: LD_INT 3
48457: PPUSH
48458: CALL_OW 259
48462: PUSH
48463: LD_VAR 0 2
48467: PUSH
48468: LD_VAR 0 3
48472: ARRAY
48473: PPUSH
48474: CALL_OW 432
48478: MINUS
48479: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48480: LD_VAR 0 4
48484: PUSH
48485: LD_VAR 0 5
48489: PPUSH
48490: LD_INT 3
48492: PPUSH
48493: CALL_OW 259
48497: PUSH
48498: LD_VAR 0 5
48502: PPUSH
48503: CALL_OW 432
48507: MINUS
48508: GREATEREQUAL
48509: IFFALSE 48527
// mech := result [ i ] ;
48511: LD_ADDR_VAR 0 5
48515: PUSH
48516: LD_VAR 0 2
48520: PUSH
48521: LD_VAR 0 3
48525: ARRAY
48526: ST_TO_ADDR
// end ;
48527: GO 48436
48529: POP
48530: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48531: LD_VAR 0 1
48535: PPUSH
48536: LD_VAR 0 5
48540: PPUSH
48541: CALL_OW 135
// end ;
48545: LD_VAR 0 2
48549: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48550: LD_INT 0
48552: PPUSH
48553: PPUSH
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
// result := [ ] ;
48565: LD_ADDR_VAR 0 7
48569: PUSH
48570: EMPTY
48571: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48572: LD_VAR 0 1
48576: PPUSH
48577: CALL_OW 266
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: IN
48592: NOT
48593: IFFALSE 48597
// exit ;
48595: GO 50231
// if name then
48597: LD_VAR 0 3
48601: IFFALSE 48617
// SetBName ( base_dep , name ) ;
48603: LD_VAR 0 1
48607: PPUSH
48608: LD_VAR 0 3
48612: PPUSH
48613: CALL_OW 500
// base := GetBase ( base_dep ) ;
48617: LD_ADDR_VAR 0 15
48621: PUSH
48622: LD_VAR 0 1
48626: PPUSH
48627: CALL_OW 274
48631: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48632: LD_ADDR_VAR 0 16
48636: PUSH
48637: LD_VAR 0 1
48641: PPUSH
48642: CALL_OW 255
48646: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48647: LD_ADDR_VAR 0 17
48651: PUSH
48652: LD_VAR 0 1
48656: PPUSH
48657: CALL_OW 248
48661: ST_TO_ADDR
// if sources then
48662: LD_VAR 0 5
48666: IFFALSE 48713
// for i = 1 to 3 do
48668: LD_ADDR_VAR 0 8
48672: PUSH
48673: DOUBLE
48674: LD_INT 1
48676: DEC
48677: ST_TO_ADDR
48678: LD_INT 3
48680: PUSH
48681: FOR_TO
48682: IFFALSE 48711
// AddResourceType ( base , i , sources [ i ] ) ;
48684: LD_VAR 0 15
48688: PPUSH
48689: LD_VAR 0 8
48693: PPUSH
48694: LD_VAR 0 5
48698: PUSH
48699: LD_VAR 0 8
48703: ARRAY
48704: PPUSH
48705: CALL_OW 276
48709: GO 48681
48711: POP
48712: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48713: LD_ADDR_VAR 0 18
48717: PUSH
48718: LD_VAR 0 15
48722: PPUSH
48723: LD_VAR 0 2
48727: PPUSH
48728: LD_INT 1
48730: PPUSH
48731: CALL 47974 0 3
48735: ST_TO_ADDR
// InitHc ;
48736: CALL_OW 19
// InitUc ;
48740: CALL_OW 18
// uc_side := side ;
48744: LD_ADDR_OWVAR 20
48748: PUSH
48749: LD_VAR 0 16
48753: ST_TO_ADDR
// uc_nation := nation ;
48754: LD_ADDR_OWVAR 21
48758: PUSH
48759: LD_VAR 0 17
48763: ST_TO_ADDR
// if buildings then
48764: LD_VAR 0 18
48768: IFFALSE 50090
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48770: LD_ADDR_VAR 0 19
48774: PUSH
48775: LD_VAR 0 18
48779: PPUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 30
48785: PUSH
48786: LD_INT 29
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 30
48795: PUSH
48796: LD_INT 30
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: PPUSH
48808: CALL_OW 72
48812: ST_TO_ADDR
// if tmp then
48813: LD_VAR 0 19
48817: IFFALSE 48865
// for i in tmp do
48819: LD_ADDR_VAR 0 8
48823: PUSH
48824: LD_VAR 0 19
48828: PUSH
48829: FOR_IN
48830: IFFALSE 48863
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48832: LD_VAR 0 8
48836: PPUSH
48837: CALL_OW 250
48841: PPUSH
48842: LD_VAR 0 8
48846: PPUSH
48847: CALL_OW 251
48851: PPUSH
48852: LD_VAR 0 16
48856: PPUSH
48857: CALL_OW 441
48861: GO 48829
48863: POP
48864: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48865: LD_VAR 0 18
48869: PPUSH
48870: LD_INT 2
48872: PUSH
48873: LD_INT 30
48875: PUSH
48876: LD_INT 32
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 30
48885: PUSH
48886: LD_INT 33
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: PPUSH
48898: CALL_OW 72
48902: IFFALSE 48990
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48904: LD_ADDR_VAR 0 8
48908: PUSH
48909: LD_VAR 0 18
48913: PPUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 30
48919: PUSH
48920: LD_INT 32
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 30
48929: PUSH
48930: LD_INT 33
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: PPUSH
48942: CALL_OW 72
48946: PUSH
48947: FOR_IN
48948: IFFALSE 48988
// begin if not GetBWeapon ( i ) then
48950: LD_VAR 0 8
48954: PPUSH
48955: CALL_OW 269
48959: NOT
48960: IFFALSE 48986
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48962: LD_VAR 0 8
48966: PPUSH
48967: LD_VAR 0 8
48971: PPUSH
48972: LD_VAR 0 2
48976: PPUSH
48977: CALL 50236 0 2
48981: PPUSH
48982: CALL_OW 431
// end ;
48986: GO 48947
48988: POP
48989: POP
// end ; for i = 1 to personel do
48990: LD_ADDR_VAR 0 8
48994: PUSH
48995: DOUBLE
48996: LD_INT 1
48998: DEC
48999: ST_TO_ADDR
49000: LD_VAR 0 6
49004: PUSH
49005: FOR_TO
49006: IFFALSE 50070
// begin if i > 4 then
49008: LD_VAR 0 8
49012: PUSH
49013: LD_INT 4
49015: GREATER
49016: IFFALSE 49020
// break ;
49018: GO 50070
// case i of 1 :
49020: LD_VAR 0 8
49024: PUSH
49025: LD_INT 1
49027: DOUBLE
49028: EQUAL
49029: IFTRUE 49033
49031: GO 49113
49033: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49034: LD_ADDR_VAR 0 12
49038: PUSH
49039: LD_VAR 0 18
49043: PPUSH
49044: LD_INT 22
49046: PUSH
49047: LD_VAR 0 16
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 58
49058: PUSH
49059: EMPTY
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 30
49067: PUSH
49068: LD_INT 32
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 30
49077: PUSH
49078: LD_INT 4
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 30
49087: PUSH
49088: LD_INT 5
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: PPUSH
49106: CALL_OW 72
49110: ST_TO_ADDR
49111: GO 49335
49113: LD_INT 2
49115: DOUBLE
49116: EQUAL
49117: IFTRUE 49121
49119: GO 49183
49121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49122: LD_ADDR_VAR 0 12
49126: PUSH
49127: LD_VAR 0 18
49131: PPUSH
49132: LD_INT 22
49134: PUSH
49135: LD_VAR 0 16
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 30
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 30
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PPUSH
49176: CALL_OW 72
49180: ST_TO_ADDR
49181: GO 49335
49183: LD_INT 3
49185: DOUBLE
49186: EQUAL
49187: IFTRUE 49191
49189: GO 49253
49191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49192: LD_ADDR_VAR 0 12
49196: PUSH
49197: LD_VAR 0 18
49201: PPUSH
49202: LD_INT 22
49204: PUSH
49205: LD_VAR 0 16
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 30
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 30
49229: PUSH
49230: LD_INT 3
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PPUSH
49246: CALL_OW 72
49250: ST_TO_ADDR
49251: GO 49335
49253: LD_INT 4
49255: DOUBLE
49256: EQUAL
49257: IFTRUE 49261
49259: GO 49334
49261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49262: LD_ADDR_VAR 0 12
49266: PUSH
49267: LD_VAR 0 18
49271: PPUSH
49272: LD_INT 22
49274: PUSH
49275: LD_VAR 0 16
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 30
49289: PUSH
49290: LD_INT 6
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 30
49299: PUSH
49300: LD_INT 7
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 30
49309: PUSH
49310: LD_INT 8
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PPUSH
49327: CALL_OW 72
49331: ST_TO_ADDR
49332: GO 49335
49334: POP
// if i = 1 then
49335: LD_VAR 0 8
49339: PUSH
49340: LD_INT 1
49342: EQUAL
49343: IFFALSE 49454
// begin tmp := [ ] ;
49345: LD_ADDR_VAR 0 19
49349: PUSH
49350: EMPTY
49351: ST_TO_ADDR
// for j in f do
49352: LD_ADDR_VAR 0 9
49356: PUSH
49357: LD_VAR 0 12
49361: PUSH
49362: FOR_IN
49363: IFFALSE 49436
// if GetBType ( j ) = b_bunker then
49365: LD_VAR 0 9
49369: PPUSH
49370: CALL_OW 266
49374: PUSH
49375: LD_INT 32
49377: EQUAL
49378: IFFALSE 49405
// tmp := Insert ( tmp , 1 , j ) else
49380: LD_ADDR_VAR 0 19
49384: PUSH
49385: LD_VAR 0 19
49389: PPUSH
49390: LD_INT 1
49392: PPUSH
49393: LD_VAR 0 9
49397: PPUSH
49398: CALL_OW 2
49402: ST_TO_ADDR
49403: GO 49434
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49405: LD_ADDR_VAR 0 19
49409: PUSH
49410: LD_VAR 0 19
49414: PPUSH
49415: LD_VAR 0 19
49419: PUSH
49420: LD_INT 1
49422: PLUS
49423: PPUSH
49424: LD_VAR 0 9
49428: PPUSH
49429: CALL_OW 2
49433: ST_TO_ADDR
49434: GO 49362
49436: POP
49437: POP
// if tmp then
49438: LD_VAR 0 19
49442: IFFALSE 49454
// f := tmp ;
49444: LD_ADDR_VAR 0 12
49448: PUSH
49449: LD_VAR 0 19
49453: ST_TO_ADDR
// end ; x := personel [ i ] ;
49454: LD_ADDR_VAR 0 13
49458: PUSH
49459: LD_VAR 0 6
49463: PUSH
49464: LD_VAR 0 8
49468: ARRAY
49469: ST_TO_ADDR
// if x = - 1 then
49470: LD_VAR 0 13
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: EQUAL
49479: IFFALSE 49688
// begin for j in f do
49481: LD_ADDR_VAR 0 9
49485: PUSH
49486: LD_VAR 0 12
49490: PUSH
49491: FOR_IN
49492: IFFALSE 49684
// repeat InitHc ;
49494: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49498: LD_VAR 0 9
49502: PPUSH
49503: CALL_OW 266
49507: PUSH
49508: LD_INT 5
49510: EQUAL
49511: IFFALSE 49581
// begin if UnitsInside ( j ) < 3 then
49513: LD_VAR 0 9
49517: PPUSH
49518: CALL_OW 313
49522: PUSH
49523: LD_INT 3
49525: LESS
49526: IFFALSE 49562
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49528: LD_INT 0
49530: PPUSH
49531: LD_INT 5
49533: PUSH
49534: LD_INT 8
49536: PUSH
49537: LD_INT 9
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: PUSH
49545: LD_VAR 0 17
49549: ARRAY
49550: PPUSH
49551: LD_VAR 0 4
49555: PPUSH
49556: CALL_OW 380
49560: GO 49579
// PrepareHuman ( false , i , skill ) ;
49562: LD_INT 0
49564: PPUSH
49565: LD_VAR 0 8
49569: PPUSH
49570: LD_VAR 0 4
49574: PPUSH
49575: CALL_OW 380
// end else
49579: GO 49598
// PrepareHuman ( false , i , skill ) ;
49581: LD_INT 0
49583: PPUSH
49584: LD_VAR 0 8
49588: PPUSH
49589: LD_VAR 0 4
49593: PPUSH
49594: CALL_OW 380
// un := CreateHuman ;
49598: LD_ADDR_VAR 0 14
49602: PUSH
49603: CALL_OW 44
49607: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49608: LD_ADDR_VAR 0 7
49612: PUSH
49613: LD_VAR 0 7
49617: PPUSH
49618: LD_INT 1
49620: PPUSH
49621: LD_VAR 0 14
49625: PPUSH
49626: CALL_OW 2
49630: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49631: LD_VAR 0 14
49635: PPUSH
49636: LD_VAR 0 9
49640: PPUSH
49641: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49645: LD_VAR 0 9
49649: PPUSH
49650: CALL_OW 313
49654: PUSH
49655: LD_INT 6
49657: EQUAL
49658: PUSH
49659: LD_VAR 0 9
49663: PPUSH
49664: CALL_OW 266
49668: PUSH
49669: LD_INT 32
49671: PUSH
49672: LD_INT 31
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: IN
49679: OR
49680: IFFALSE 49494
49682: GO 49491
49684: POP
49685: POP
// end else
49686: GO 50068
// for j = 1 to x do
49688: LD_ADDR_VAR 0 9
49692: PUSH
49693: DOUBLE
49694: LD_INT 1
49696: DEC
49697: ST_TO_ADDR
49698: LD_VAR 0 13
49702: PUSH
49703: FOR_TO
49704: IFFALSE 50066
// begin InitHc ;
49706: CALL_OW 19
// if not f then
49710: LD_VAR 0 12
49714: NOT
49715: IFFALSE 49804
// begin PrepareHuman ( false , i , skill ) ;
49717: LD_INT 0
49719: PPUSH
49720: LD_VAR 0 8
49724: PPUSH
49725: LD_VAR 0 4
49729: PPUSH
49730: CALL_OW 380
// un := CreateHuman ;
49734: LD_ADDR_VAR 0 14
49738: PUSH
49739: CALL_OW 44
49743: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49744: LD_ADDR_VAR 0 7
49748: PUSH
49749: LD_VAR 0 7
49753: PPUSH
49754: LD_INT 1
49756: PPUSH
49757: LD_VAR 0 14
49761: PPUSH
49762: CALL_OW 2
49766: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49767: LD_VAR 0 14
49771: PPUSH
49772: LD_VAR 0 1
49776: PPUSH
49777: CALL_OW 250
49781: PPUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: CALL_OW 251
49791: PPUSH
49792: LD_INT 10
49794: PPUSH
49795: LD_INT 0
49797: PPUSH
49798: CALL_OW 50
// continue ;
49802: GO 49703
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49804: LD_VAR 0 12
49808: PUSH
49809: LD_INT 1
49811: ARRAY
49812: PPUSH
49813: CALL_OW 313
49817: PUSH
49818: LD_VAR 0 12
49822: PUSH
49823: LD_INT 1
49825: ARRAY
49826: PPUSH
49827: CALL_OW 266
49831: PUSH
49832: LD_INT 32
49834: PUSH
49835: LD_INT 31
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: IN
49842: AND
49843: PUSH
49844: LD_VAR 0 12
49848: PUSH
49849: LD_INT 1
49851: ARRAY
49852: PPUSH
49853: CALL_OW 313
49857: PUSH
49858: LD_INT 6
49860: EQUAL
49861: OR
49862: IFFALSE 49882
// f := Delete ( f , 1 ) ;
49864: LD_ADDR_VAR 0 12
49868: PUSH
49869: LD_VAR 0 12
49873: PPUSH
49874: LD_INT 1
49876: PPUSH
49877: CALL_OW 3
49881: ST_TO_ADDR
// if not f then
49882: LD_VAR 0 12
49886: NOT
49887: IFFALSE 49905
// begin x := x + 2 ;
49889: LD_ADDR_VAR 0 13
49893: PUSH
49894: LD_VAR 0 13
49898: PUSH
49899: LD_INT 2
49901: PLUS
49902: ST_TO_ADDR
// continue ;
49903: GO 49703
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49905: LD_VAR 0 12
49909: PUSH
49910: LD_INT 1
49912: ARRAY
49913: PPUSH
49914: CALL_OW 266
49918: PUSH
49919: LD_INT 5
49921: EQUAL
49922: IFFALSE 49996
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49924: LD_VAR 0 12
49928: PUSH
49929: LD_INT 1
49931: ARRAY
49932: PPUSH
49933: CALL_OW 313
49937: PUSH
49938: LD_INT 3
49940: LESS
49941: IFFALSE 49977
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49943: LD_INT 0
49945: PPUSH
49946: LD_INT 5
49948: PUSH
49949: LD_INT 8
49951: PUSH
49952: LD_INT 9
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: PUSH
49960: LD_VAR 0 17
49964: ARRAY
49965: PPUSH
49966: LD_VAR 0 4
49970: PPUSH
49971: CALL_OW 380
49975: GO 49994
// PrepareHuman ( false , i , skill ) ;
49977: LD_INT 0
49979: PPUSH
49980: LD_VAR 0 8
49984: PPUSH
49985: LD_VAR 0 4
49989: PPUSH
49990: CALL_OW 380
// end else
49994: GO 50013
// PrepareHuman ( false , i , skill ) ;
49996: LD_INT 0
49998: PPUSH
49999: LD_VAR 0 8
50003: PPUSH
50004: LD_VAR 0 4
50008: PPUSH
50009: CALL_OW 380
// un := CreateHuman ;
50013: LD_ADDR_VAR 0 14
50017: PUSH
50018: CALL_OW 44
50022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50023: LD_ADDR_VAR 0 7
50027: PUSH
50028: LD_VAR 0 7
50032: PPUSH
50033: LD_INT 1
50035: PPUSH
50036: LD_VAR 0 14
50040: PPUSH
50041: CALL_OW 2
50045: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50046: LD_VAR 0 14
50050: PPUSH
50051: LD_VAR 0 12
50055: PUSH
50056: LD_INT 1
50058: ARRAY
50059: PPUSH
50060: CALL_OW 52
// end ;
50064: GO 49703
50066: POP
50067: POP
// end ;
50068: GO 49005
50070: POP
50071: POP
// result := result ^ buildings ;
50072: LD_ADDR_VAR 0 7
50076: PUSH
50077: LD_VAR 0 7
50081: PUSH
50082: LD_VAR 0 18
50086: ADD
50087: ST_TO_ADDR
// end else
50088: GO 50231
// begin for i = 1 to personel do
50090: LD_ADDR_VAR 0 8
50094: PUSH
50095: DOUBLE
50096: LD_INT 1
50098: DEC
50099: ST_TO_ADDR
50100: LD_VAR 0 6
50104: PUSH
50105: FOR_TO
50106: IFFALSE 50229
// begin if i > 4 then
50108: LD_VAR 0 8
50112: PUSH
50113: LD_INT 4
50115: GREATER
50116: IFFALSE 50120
// break ;
50118: GO 50229
// x := personel [ i ] ;
50120: LD_ADDR_VAR 0 13
50124: PUSH
50125: LD_VAR 0 6
50129: PUSH
50130: LD_VAR 0 8
50134: ARRAY
50135: ST_TO_ADDR
// if x = - 1 then
50136: LD_VAR 0 13
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: EQUAL
50145: IFFALSE 50149
// continue ;
50147: GO 50105
// PrepareHuman ( false , i , skill ) ;
50149: LD_INT 0
50151: PPUSH
50152: LD_VAR 0 8
50156: PPUSH
50157: LD_VAR 0 4
50161: PPUSH
50162: CALL_OW 380
// un := CreateHuman ;
50166: LD_ADDR_VAR 0 14
50170: PUSH
50171: CALL_OW 44
50175: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50176: LD_VAR 0 14
50180: PPUSH
50181: LD_VAR 0 1
50185: PPUSH
50186: CALL_OW 250
50190: PPUSH
50191: LD_VAR 0 1
50195: PPUSH
50196: CALL_OW 251
50200: PPUSH
50201: LD_INT 10
50203: PPUSH
50204: LD_INT 0
50206: PPUSH
50207: CALL_OW 50
// result := result ^ un ;
50211: LD_ADDR_VAR 0 7
50215: PUSH
50216: LD_VAR 0 7
50220: PUSH
50221: LD_VAR 0 14
50225: ADD
50226: ST_TO_ADDR
// end ;
50227: GO 50105
50229: POP
50230: POP
// end ; end ;
50231: LD_VAR 0 7
50235: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50236: LD_INT 0
50238: PPUSH
50239: PPUSH
50240: PPUSH
50241: PPUSH
50242: PPUSH
50243: PPUSH
50244: PPUSH
50245: PPUSH
50246: PPUSH
50247: PPUSH
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
50252: PPUSH
50253: PPUSH
// result := false ;
50254: LD_ADDR_VAR 0 3
50258: PUSH
50259: LD_INT 0
50261: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50262: LD_VAR 0 1
50266: NOT
50267: PUSH
50268: LD_VAR 0 1
50272: PPUSH
50273: CALL_OW 266
50277: PUSH
50278: LD_INT 32
50280: PUSH
50281: LD_INT 33
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: IN
50288: NOT
50289: OR
50290: IFFALSE 50294
// exit ;
50292: GO 51403
// nat := GetNation ( tower ) ;
50294: LD_ADDR_VAR 0 12
50298: PUSH
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL_OW 248
50308: ST_TO_ADDR
// side := GetSide ( tower ) ;
50309: LD_ADDR_VAR 0 16
50313: PUSH
50314: LD_VAR 0 1
50318: PPUSH
50319: CALL_OW 255
50323: ST_TO_ADDR
// x := GetX ( tower ) ;
50324: LD_ADDR_VAR 0 10
50328: PUSH
50329: LD_VAR 0 1
50333: PPUSH
50334: CALL_OW 250
50338: ST_TO_ADDR
// y := GetY ( tower ) ;
50339: LD_ADDR_VAR 0 11
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: CALL_OW 251
50353: ST_TO_ADDR
// if not x or not y then
50354: LD_VAR 0 10
50358: NOT
50359: PUSH
50360: LD_VAR 0 11
50364: NOT
50365: OR
50366: IFFALSE 50370
// exit ;
50368: GO 51403
// weapon := 0 ;
50370: LD_ADDR_VAR 0 18
50374: PUSH
50375: LD_INT 0
50377: ST_TO_ADDR
// fac_list := [ ] ;
50378: LD_ADDR_VAR 0 17
50382: PUSH
50383: EMPTY
50384: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50385: LD_ADDR_VAR 0 6
50389: PUSH
50390: LD_VAR 0 1
50394: PPUSH
50395: CALL_OW 274
50399: PPUSH
50400: LD_VAR 0 2
50404: PPUSH
50405: LD_INT 0
50407: PPUSH
50408: CALL 47974 0 3
50412: PPUSH
50413: LD_INT 30
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PPUSH
50423: CALL_OW 72
50427: ST_TO_ADDR
// if not factories then
50428: LD_VAR 0 6
50432: NOT
50433: IFFALSE 50437
// exit ;
50435: GO 51403
// for i in factories do
50437: LD_ADDR_VAR 0 8
50441: PUSH
50442: LD_VAR 0 6
50446: PUSH
50447: FOR_IN
50448: IFFALSE 50473
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50450: LD_ADDR_VAR 0 17
50454: PUSH
50455: LD_VAR 0 17
50459: PUSH
50460: LD_VAR 0 8
50464: PPUSH
50465: CALL_OW 478
50469: UNION
50470: ST_TO_ADDR
50471: GO 50447
50473: POP
50474: POP
// if not fac_list then
50475: LD_VAR 0 17
50479: NOT
50480: IFFALSE 50484
// exit ;
50482: GO 51403
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50484: LD_ADDR_VAR 0 5
50488: PUSH
50489: LD_INT 4
50491: PUSH
50492: LD_INT 5
50494: PUSH
50495: LD_INT 9
50497: PUSH
50498: LD_INT 10
50500: PUSH
50501: LD_INT 6
50503: PUSH
50504: LD_INT 7
50506: PUSH
50507: LD_INT 11
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 27
50521: PUSH
50522: LD_INT 28
50524: PUSH
50525: LD_INT 26
50527: PUSH
50528: LD_INT 30
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 43
50539: PUSH
50540: LD_INT 44
50542: PUSH
50543: LD_INT 46
50545: PUSH
50546: LD_INT 45
50548: PUSH
50549: LD_INT 47
50551: PUSH
50552: LD_INT 49
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: PUSH
50568: LD_VAR 0 12
50572: ARRAY
50573: ST_TO_ADDR
// list := list isect fac_list ;
50574: LD_ADDR_VAR 0 5
50578: PUSH
50579: LD_VAR 0 5
50583: PUSH
50584: LD_VAR 0 17
50588: ISECT
50589: ST_TO_ADDR
// if not list then
50590: LD_VAR 0 5
50594: NOT
50595: IFFALSE 50599
// exit ;
50597: GO 51403
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50599: LD_VAR 0 12
50603: PUSH
50604: LD_INT 3
50606: EQUAL
50607: PUSH
50608: LD_INT 49
50610: PUSH
50611: LD_VAR 0 5
50615: IN
50616: AND
50617: PUSH
50618: LD_INT 31
50620: PPUSH
50621: LD_VAR 0 16
50625: PPUSH
50626: CALL_OW 321
50630: PUSH
50631: LD_INT 2
50633: EQUAL
50634: AND
50635: IFFALSE 50695
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50637: LD_INT 22
50639: PUSH
50640: LD_VAR 0 16
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 35
50651: PUSH
50652: LD_INT 49
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 91
50661: PUSH
50662: LD_VAR 0 1
50666: PUSH
50667: LD_INT 10
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: PPUSH
50680: CALL_OW 69
50684: NOT
50685: IFFALSE 50695
// weapon := ru_time_lapser ;
50687: LD_ADDR_VAR 0 18
50691: PUSH
50692: LD_INT 49
50694: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50695: LD_VAR 0 12
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: IN
50710: PUSH
50711: LD_INT 11
50713: PUSH
50714: LD_VAR 0 5
50718: IN
50719: PUSH
50720: LD_INT 30
50722: PUSH
50723: LD_VAR 0 5
50727: IN
50728: OR
50729: AND
50730: PUSH
50731: LD_INT 6
50733: PPUSH
50734: LD_VAR 0 16
50738: PPUSH
50739: CALL_OW 321
50743: PUSH
50744: LD_INT 2
50746: EQUAL
50747: AND
50748: IFFALSE 50913
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50750: LD_INT 22
50752: PUSH
50753: LD_VAR 0 16
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 35
50767: PUSH
50768: LD_INT 11
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 35
50777: PUSH
50778: LD_INT 30
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 91
50792: PUSH
50793: LD_VAR 0 1
50797: PUSH
50798: LD_INT 18
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: PPUSH
50811: CALL_OW 69
50815: NOT
50816: PUSH
50817: LD_INT 22
50819: PUSH
50820: LD_VAR 0 16
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 30
50834: PUSH
50835: LD_INT 32
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 30
50844: PUSH
50845: LD_INT 33
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 91
50859: PUSH
50860: LD_VAR 0 1
50864: PUSH
50865: LD_INT 12
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: PPUSH
50881: CALL_OW 69
50885: PUSH
50886: LD_INT 2
50888: GREATER
50889: AND
50890: IFFALSE 50913
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50892: LD_ADDR_VAR 0 18
50896: PUSH
50897: LD_INT 11
50899: PUSH
50900: LD_INT 30
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_VAR 0 12
50911: ARRAY
50912: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50913: LD_VAR 0 18
50917: NOT
50918: PUSH
50919: LD_INT 40
50921: PPUSH
50922: LD_VAR 0 16
50926: PPUSH
50927: CALL_OW 321
50931: PUSH
50932: LD_INT 2
50934: EQUAL
50935: AND
50936: PUSH
50937: LD_INT 7
50939: PUSH
50940: LD_VAR 0 5
50944: IN
50945: PUSH
50946: LD_INT 28
50948: PUSH
50949: LD_VAR 0 5
50953: IN
50954: OR
50955: PUSH
50956: LD_INT 45
50958: PUSH
50959: LD_VAR 0 5
50963: IN
50964: OR
50965: AND
50966: IFFALSE 51220
// begin hex := GetHexInfo ( x , y ) ;
50968: LD_ADDR_VAR 0 4
50972: PUSH
50973: LD_VAR 0 10
50977: PPUSH
50978: LD_VAR 0 11
50982: PPUSH
50983: CALL_OW 546
50987: ST_TO_ADDR
// if hex [ 1 ] then
50988: LD_VAR 0 4
50992: PUSH
50993: LD_INT 1
50995: ARRAY
50996: IFFALSE 51000
// exit ;
50998: GO 51403
// height := hex [ 2 ] ;
51000: LD_ADDR_VAR 0 15
51004: PUSH
51005: LD_VAR 0 4
51009: PUSH
51010: LD_INT 2
51012: ARRAY
51013: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51014: LD_ADDR_VAR 0 14
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: LD_INT 5
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: ST_TO_ADDR
// for i in tmp do
51037: LD_ADDR_VAR 0 8
51041: PUSH
51042: LD_VAR 0 14
51046: PUSH
51047: FOR_IN
51048: IFFALSE 51218
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51050: LD_ADDR_VAR 0 9
51054: PUSH
51055: LD_VAR 0 10
51059: PPUSH
51060: LD_VAR 0 8
51064: PPUSH
51065: LD_INT 5
51067: PPUSH
51068: CALL_OW 272
51072: PUSH
51073: LD_VAR 0 11
51077: PPUSH
51078: LD_VAR 0 8
51082: PPUSH
51083: LD_INT 5
51085: PPUSH
51086: CALL_OW 273
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51095: LD_VAR 0 9
51099: PUSH
51100: LD_INT 1
51102: ARRAY
51103: PPUSH
51104: LD_VAR 0 9
51108: PUSH
51109: LD_INT 2
51111: ARRAY
51112: PPUSH
51113: CALL_OW 488
51117: IFFALSE 51216
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51119: LD_ADDR_VAR 0 4
51123: PUSH
51124: LD_VAR 0 9
51128: PUSH
51129: LD_INT 1
51131: ARRAY
51132: PPUSH
51133: LD_VAR 0 9
51137: PUSH
51138: LD_INT 2
51140: ARRAY
51141: PPUSH
51142: CALL_OW 546
51146: ST_TO_ADDR
// if hex [ 1 ] then
51147: LD_VAR 0 4
51151: PUSH
51152: LD_INT 1
51154: ARRAY
51155: IFFALSE 51159
// continue ;
51157: GO 51047
// h := hex [ 2 ] ;
51159: LD_ADDR_VAR 0 13
51163: PUSH
51164: LD_VAR 0 4
51168: PUSH
51169: LD_INT 2
51171: ARRAY
51172: ST_TO_ADDR
// if h + 7 < height then
51173: LD_VAR 0 13
51177: PUSH
51178: LD_INT 7
51180: PLUS
51181: PUSH
51182: LD_VAR 0 15
51186: LESS
51187: IFFALSE 51216
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51189: LD_ADDR_VAR 0 18
51193: PUSH
51194: LD_INT 7
51196: PUSH
51197: LD_INT 28
51199: PUSH
51200: LD_INT 45
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: PUSH
51208: LD_VAR 0 12
51212: ARRAY
51213: ST_TO_ADDR
// break ;
51214: GO 51218
// end ; end ; end ;
51216: GO 51047
51218: POP
51219: POP
// end ; if not weapon then
51220: LD_VAR 0 18
51224: NOT
51225: IFFALSE 51285
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51227: LD_ADDR_VAR 0 5
51231: PUSH
51232: LD_VAR 0 5
51236: PUSH
51237: LD_INT 11
51239: PUSH
51240: LD_INT 30
51242: PUSH
51243: LD_INT 49
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: DIFF
51251: ST_TO_ADDR
// if not list then
51252: LD_VAR 0 5
51256: NOT
51257: IFFALSE 51261
// exit ;
51259: GO 51403
// weapon := list [ rand ( 1 , list ) ] ;
51261: LD_ADDR_VAR 0 18
51265: PUSH
51266: LD_VAR 0 5
51270: PUSH
51271: LD_INT 1
51273: PPUSH
51274: LD_VAR 0 5
51278: PPUSH
51279: CALL_OW 12
51283: ARRAY
51284: ST_TO_ADDR
// end ; if weapon then
51285: LD_VAR 0 18
51289: IFFALSE 51403
// begin tmp := CostOfWeapon ( weapon ) ;
51291: LD_ADDR_VAR 0 14
51295: PUSH
51296: LD_VAR 0 18
51300: PPUSH
51301: CALL_OW 451
51305: ST_TO_ADDR
// j := GetBase ( tower ) ;
51306: LD_ADDR_VAR 0 9
51310: PUSH
51311: LD_VAR 0 1
51315: PPUSH
51316: CALL_OW 274
51320: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51321: LD_VAR 0 9
51325: PPUSH
51326: LD_INT 1
51328: PPUSH
51329: CALL_OW 275
51333: PUSH
51334: LD_VAR 0 14
51338: PUSH
51339: LD_INT 1
51341: ARRAY
51342: GREATEREQUAL
51343: PUSH
51344: LD_VAR 0 9
51348: PPUSH
51349: LD_INT 2
51351: PPUSH
51352: CALL_OW 275
51356: PUSH
51357: LD_VAR 0 14
51361: PUSH
51362: LD_INT 2
51364: ARRAY
51365: GREATEREQUAL
51366: AND
51367: PUSH
51368: LD_VAR 0 9
51372: PPUSH
51373: LD_INT 3
51375: PPUSH
51376: CALL_OW 275
51380: PUSH
51381: LD_VAR 0 14
51385: PUSH
51386: LD_INT 3
51388: ARRAY
51389: GREATEREQUAL
51390: AND
51391: IFFALSE 51403
// result := weapon ;
51393: LD_ADDR_VAR 0 3
51397: PUSH
51398: LD_VAR 0 18
51402: ST_TO_ADDR
// end ; end ;
51403: LD_VAR 0 3
51407: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51408: LD_INT 0
51410: PPUSH
51411: PPUSH
// result := true ;
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_INT 1
51419: ST_TO_ADDR
// if array1 = array2 then
51420: LD_VAR 0 1
51424: PUSH
51425: LD_VAR 0 2
51429: EQUAL
51430: IFFALSE 51490
// begin for i = 1 to array1 do
51432: LD_ADDR_VAR 0 4
51436: PUSH
51437: DOUBLE
51438: LD_INT 1
51440: DEC
51441: ST_TO_ADDR
51442: LD_VAR 0 1
51446: PUSH
51447: FOR_TO
51448: IFFALSE 51486
// if array1 [ i ] <> array2 [ i ] then
51450: LD_VAR 0 1
51454: PUSH
51455: LD_VAR 0 4
51459: ARRAY
51460: PUSH
51461: LD_VAR 0 2
51465: PUSH
51466: LD_VAR 0 4
51470: ARRAY
51471: NONEQUAL
51472: IFFALSE 51484
// begin result := false ;
51474: LD_ADDR_VAR 0 3
51478: PUSH
51479: LD_INT 0
51481: ST_TO_ADDR
// break ;
51482: GO 51486
// end ;
51484: GO 51447
51486: POP
51487: POP
// end else
51488: GO 51498
// result := false ;
51490: LD_ADDR_VAR 0 3
51494: PUSH
51495: LD_INT 0
51497: ST_TO_ADDR
// end ;
51498: LD_VAR 0 3
51502: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51503: LD_INT 0
51505: PPUSH
51506: PPUSH
// if not array1 or not array2 then
51507: LD_VAR 0 1
51511: NOT
51512: PUSH
51513: LD_VAR 0 2
51517: NOT
51518: OR
51519: IFFALSE 51523
// exit ;
51521: GO 51587
// result := true ;
51523: LD_ADDR_VAR 0 3
51527: PUSH
51528: LD_INT 1
51530: ST_TO_ADDR
// for i = 1 to array1 do
51531: LD_ADDR_VAR 0 4
51535: PUSH
51536: DOUBLE
51537: LD_INT 1
51539: DEC
51540: ST_TO_ADDR
51541: LD_VAR 0 1
51545: PUSH
51546: FOR_TO
51547: IFFALSE 51585
// if array1 [ i ] <> array2 [ i ] then
51549: LD_VAR 0 1
51553: PUSH
51554: LD_VAR 0 4
51558: ARRAY
51559: PUSH
51560: LD_VAR 0 2
51564: PUSH
51565: LD_VAR 0 4
51569: ARRAY
51570: NONEQUAL
51571: IFFALSE 51583
// begin result := false ;
51573: LD_ADDR_VAR 0 3
51577: PUSH
51578: LD_INT 0
51580: ST_TO_ADDR
// break ;
51581: GO 51585
// end ;
51583: GO 51546
51585: POP
51586: POP
// end ;
51587: LD_VAR 0 3
51591: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51592: LD_INT 0
51594: PPUSH
51595: PPUSH
51596: PPUSH
// pom := GetBase ( fac ) ;
51597: LD_ADDR_VAR 0 5
51601: PUSH
51602: LD_VAR 0 1
51606: PPUSH
51607: CALL_OW 274
51611: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51612: LD_ADDR_VAR 0 4
51616: PUSH
51617: LD_VAR 0 2
51621: PUSH
51622: LD_INT 1
51624: ARRAY
51625: PPUSH
51626: LD_VAR 0 2
51630: PUSH
51631: LD_INT 2
51633: ARRAY
51634: PPUSH
51635: LD_VAR 0 2
51639: PUSH
51640: LD_INT 3
51642: ARRAY
51643: PPUSH
51644: LD_VAR 0 2
51648: PUSH
51649: LD_INT 4
51651: ARRAY
51652: PPUSH
51653: CALL_OW 449
51657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51658: LD_ADDR_VAR 0 3
51662: PUSH
51663: LD_VAR 0 5
51667: PPUSH
51668: LD_INT 1
51670: PPUSH
51671: CALL_OW 275
51675: PUSH
51676: LD_VAR 0 4
51680: PUSH
51681: LD_INT 1
51683: ARRAY
51684: GREATEREQUAL
51685: PUSH
51686: LD_VAR 0 5
51690: PPUSH
51691: LD_INT 2
51693: PPUSH
51694: CALL_OW 275
51698: PUSH
51699: LD_VAR 0 4
51703: PUSH
51704: LD_INT 2
51706: ARRAY
51707: GREATEREQUAL
51708: AND
51709: PUSH
51710: LD_VAR 0 5
51714: PPUSH
51715: LD_INT 3
51717: PPUSH
51718: CALL_OW 275
51722: PUSH
51723: LD_VAR 0 4
51727: PUSH
51728: LD_INT 3
51730: ARRAY
51731: GREATEREQUAL
51732: AND
51733: ST_TO_ADDR
// end ;
51734: LD_VAR 0 3
51738: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51739: LD_INT 0
51741: PPUSH
51742: PPUSH
51743: PPUSH
51744: PPUSH
// pom := GetBase ( building ) ;
51745: LD_ADDR_VAR 0 3
51749: PUSH
51750: LD_VAR 0 1
51754: PPUSH
51755: CALL_OW 274
51759: ST_TO_ADDR
// if not pom then
51760: LD_VAR 0 3
51764: NOT
51765: IFFALSE 51769
// exit ;
51767: GO 51939
// btype := GetBType ( building ) ;
51769: LD_ADDR_VAR 0 5
51773: PUSH
51774: LD_VAR 0 1
51778: PPUSH
51779: CALL_OW 266
51783: ST_TO_ADDR
// if btype = b_armoury then
51784: LD_VAR 0 5
51788: PUSH
51789: LD_INT 4
51791: EQUAL
51792: IFFALSE 51802
// btype := b_barracks ;
51794: LD_ADDR_VAR 0 5
51798: PUSH
51799: LD_INT 5
51801: ST_TO_ADDR
// if btype = b_depot then
51802: LD_VAR 0 5
51806: PUSH
51807: LD_INT 0
51809: EQUAL
51810: IFFALSE 51820
// btype := b_warehouse ;
51812: LD_ADDR_VAR 0 5
51816: PUSH
51817: LD_INT 1
51819: ST_TO_ADDR
// if btype = b_workshop then
51820: LD_VAR 0 5
51824: PUSH
51825: LD_INT 2
51827: EQUAL
51828: IFFALSE 51838
// btype := b_factory ;
51830: LD_ADDR_VAR 0 5
51834: PUSH
51835: LD_INT 3
51837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51838: LD_ADDR_VAR 0 4
51842: PUSH
51843: LD_VAR 0 5
51847: PPUSH
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 248
51857: PPUSH
51858: CALL_OW 450
51862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51863: LD_ADDR_VAR 0 2
51867: PUSH
51868: LD_VAR 0 3
51872: PPUSH
51873: LD_INT 1
51875: PPUSH
51876: CALL_OW 275
51880: PUSH
51881: LD_VAR 0 4
51885: PUSH
51886: LD_INT 1
51888: ARRAY
51889: GREATEREQUAL
51890: PUSH
51891: LD_VAR 0 3
51895: PPUSH
51896: LD_INT 2
51898: PPUSH
51899: CALL_OW 275
51903: PUSH
51904: LD_VAR 0 4
51908: PUSH
51909: LD_INT 2
51911: ARRAY
51912: GREATEREQUAL
51913: AND
51914: PUSH
51915: LD_VAR 0 3
51919: PPUSH
51920: LD_INT 3
51922: PPUSH
51923: CALL_OW 275
51927: PUSH
51928: LD_VAR 0 4
51932: PUSH
51933: LD_INT 3
51935: ARRAY
51936: GREATEREQUAL
51937: AND
51938: ST_TO_ADDR
// end ;
51939: LD_VAR 0 2
51943: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51944: LD_INT 0
51946: PPUSH
51947: PPUSH
51948: PPUSH
// pom := GetBase ( building ) ;
51949: LD_ADDR_VAR 0 4
51953: PUSH
51954: LD_VAR 0 1
51958: PPUSH
51959: CALL_OW 274
51963: ST_TO_ADDR
// if not pom then
51964: LD_VAR 0 4
51968: NOT
51969: IFFALSE 51973
// exit ;
51971: GO 52074
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51973: LD_ADDR_VAR 0 5
51977: PUSH
51978: LD_VAR 0 2
51982: PPUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 248
51992: PPUSH
51993: CALL_OW 450
51997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51998: LD_ADDR_VAR 0 3
52002: PUSH
52003: LD_VAR 0 4
52007: PPUSH
52008: LD_INT 1
52010: PPUSH
52011: CALL_OW 275
52015: PUSH
52016: LD_VAR 0 5
52020: PUSH
52021: LD_INT 1
52023: ARRAY
52024: GREATEREQUAL
52025: PUSH
52026: LD_VAR 0 4
52030: PPUSH
52031: LD_INT 2
52033: PPUSH
52034: CALL_OW 275
52038: PUSH
52039: LD_VAR 0 5
52043: PUSH
52044: LD_INT 2
52046: ARRAY
52047: GREATEREQUAL
52048: AND
52049: PUSH
52050: LD_VAR 0 4
52054: PPUSH
52055: LD_INT 3
52057: PPUSH
52058: CALL_OW 275
52062: PUSH
52063: LD_VAR 0 5
52067: PUSH
52068: LD_INT 3
52070: ARRAY
52071: GREATEREQUAL
52072: AND
52073: ST_TO_ADDR
// end ;
52074: LD_VAR 0 3
52078: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52079: LD_INT 0
52081: PPUSH
52082: PPUSH
52083: PPUSH
52084: PPUSH
52085: PPUSH
52086: PPUSH
52087: PPUSH
52088: PPUSH
52089: PPUSH
52090: PPUSH
52091: PPUSH
// result := false ;
52092: LD_ADDR_VAR 0 8
52096: PUSH
52097: LD_INT 0
52099: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52100: LD_VAR 0 5
52104: NOT
52105: PUSH
52106: LD_VAR 0 1
52110: NOT
52111: OR
52112: PUSH
52113: LD_VAR 0 2
52117: NOT
52118: OR
52119: PUSH
52120: LD_VAR 0 3
52124: NOT
52125: OR
52126: IFFALSE 52130
// exit ;
52128: GO 52944
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52130: LD_ADDR_VAR 0 14
52134: PUSH
52135: LD_VAR 0 1
52139: PPUSH
52140: LD_VAR 0 2
52144: PPUSH
52145: LD_VAR 0 3
52149: PPUSH
52150: LD_VAR 0 4
52154: PPUSH
52155: LD_VAR 0 5
52159: PUSH
52160: LD_INT 1
52162: ARRAY
52163: PPUSH
52164: CALL_OW 248
52168: PPUSH
52169: LD_INT 0
52171: PPUSH
52172: CALL 54177 0 6
52176: ST_TO_ADDR
// if not hexes then
52177: LD_VAR 0 14
52181: NOT
52182: IFFALSE 52186
// exit ;
52184: GO 52944
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52186: LD_ADDR_VAR 0 17
52190: PUSH
52191: LD_VAR 0 5
52195: PPUSH
52196: LD_INT 22
52198: PUSH
52199: LD_VAR 0 13
52203: PPUSH
52204: CALL_OW 255
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 30
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 30
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PPUSH
52245: CALL_OW 72
52249: ST_TO_ADDR
// for i = 1 to hexes do
52250: LD_ADDR_VAR 0 9
52254: PUSH
52255: DOUBLE
52256: LD_INT 1
52258: DEC
52259: ST_TO_ADDR
52260: LD_VAR 0 14
52264: PUSH
52265: FOR_TO
52266: IFFALSE 52942
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52268: LD_ADDR_VAR 0 13
52272: PUSH
52273: LD_VAR 0 14
52277: PUSH
52278: LD_VAR 0 9
52282: ARRAY
52283: PUSH
52284: LD_INT 1
52286: ARRAY
52287: PPUSH
52288: LD_VAR 0 14
52292: PUSH
52293: LD_VAR 0 9
52297: ARRAY
52298: PUSH
52299: LD_INT 2
52301: ARRAY
52302: PPUSH
52303: CALL_OW 428
52307: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52308: LD_VAR 0 14
52312: PUSH
52313: LD_VAR 0 9
52317: ARRAY
52318: PUSH
52319: LD_INT 1
52321: ARRAY
52322: PPUSH
52323: LD_VAR 0 14
52327: PUSH
52328: LD_VAR 0 9
52332: ARRAY
52333: PUSH
52334: LD_INT 2
52336: ARRAY
52337: PPUSH
52338: CALL_OW 351
52342: PUSH
52343: LD_VAR 0 14
52347: PUSH
52348: LD_VAR 0 9
52352: ARRAY
52353: PUSH
52354: LD_INT 1
52356: ARRAY
52357: PPUSH
52358: LD_VAR 0 14
52362: PUSH
52363: LD_VAR 0 9
52367: ARRAY
52368: PUSH
52369: LD_INT 2
52371: ARRAY
52372: PPUSH
52373: CALL_OW 488
52377: NOT
52378: OR
52379: PUSH
52380: LD_VAR 0 13
52384: PPUSH
52385: CALL_OW 247
52389: PUSH
52390: LD_INT 3
52392: EQUAL
52393: OR
52394: IFFALSE 52400
// exit ;
52396: POP
52397: POP
52398: GO 52944
// if not tmp then
52400: LD_VAR 0 13
52404: NOT
52405: IFFALSE 52409
// continue ;
52407: GO 52265
// result := true ;
52409: LD_ADDR_VAR 0 8
52413: PUSH
52414: LD_INT 1
52416: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52417: LD_VAR 0 6
52421: PUSH
52422: LD_VAR 0 13
52426: PPUSH
52427: CALL_OW 247
52431: PUSH
52432: LD_INT 2
52434: EQUAL
52435: AND
52436: PUSH
52437: LD_VAR 0 13
52441: PPUSH
52442: CALL_OW 263
52446: PUSH
52447: LD_INT 1
52449: EQUAL
52450: AND
52451: IFFALSE 52615
// begin if IsDrivenBy ( tmp ) then
52453: LD_VAR 0 13
52457: PPUSH
52458: CALL_OW 311
52462: IFFALSE 52466
// continue ;
52464: GO 52265
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52466: LD_VAR 0 6
52470: PPUSH
52471: LD_INT 3
52473: PUSH
52474: LD_INT 60
52476: PUSH
52477: EMPTY
52478: LIST
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: LD_INT 55
52489: PUSH
52490: EMPTY
52491: LIST
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PPUSH
52501: CALL_OW 72
52505: IFFALSE 52613
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52507: LD_ADDR_VAR 0 18
52511: PUSH
52512: LD_VAR 0 6
52516: PPUSH
52517: LD_INT 3
52519: PUSH
52520: LD_INT 60
52522: PUSH
52523: EMPTY
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: LD_INT 55
52535: PUSH
52536: EMPTY
52537: LIST
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PPUSH
52547: CALL_OW 72
52551: PUSH
52552: LD_INT 1
52554: ARRAY
52555: ST_TO_ADDR
// if IsInUnit ( driver ) then
52556: LD_VAR 0 18
52560: PPUSH
52561: CALL_OW 310
52565: IFFALSE 52576
// ComExit ( driver ) ;
52567: LD_VAR 0 18
52571: PPUSH
52572: CALL 77956 0 1
// AddComEnterUnit ( driver , tmp ) ;
52576: LD_VAR 0 18
52580: PPUSH
52581: LD_VAR 0 13
52585: PPUSH
52586: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52590: LD_VAR 0 18
52594: PPUSH
52595: LD_VAR 0 7
52599: PPUSH
52600: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52604: LD_VAR 0 18
52608: PPUSH
52609: CALL_OW 181
// end ; continue ;
52613: GO 52265
// end ; if not cleaners or not tmp in cleaners then
52615: LD_VAR 0 6
52619: NOT
52620: PUSH
52621: LD_VAR 0 13
52625: PUSH
52626: LD_VAR 0 6
52630: IN
52631: NOT
52632: OR
52633: IFFALSE 52940
// begin if dep then
52635: LD_VAR 0 17
52639: IFFALSE 52775
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52641: LD_ADDR_VAR 0 16
52645: PUSH
52646: LD_VAR 0 17
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: PPUSH
52655: CALL_OW 250
52659: PPUSH
52660: LD_VAR 0 17
52664: PUSH
52665: LD_INT 1
52667: ARRAY
52668: PPUSH
52669: CALL_OW 254
52673: PPUSH
52674: LD_INT 5
52676: PPUSH
52677: CALL_OW 272
52681: PUSH
52682: LD_VAR 0 17
52686: PUSH
52687: LD_INT 1
52689: ARRAY
52690: PPUSH
52691: CALL_OW 251
52695: PPUSH
52696: LD_VAR 0 17
52700: PUSH
52701: LD_INT 1
52703: ARRAY
52704: PPUSH
52705: CALL_OW 254
52709: PPUSH
52710: LD_INT 5
52712: PPUSH
52713: CALL_OW 273
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52722: LD_VAR 0 16
52726: PUSH
52727: LD_INT 1
52729: ARRAY
52730: PPUSH
52731: LD_VAR 0 16
52735: PUSH
52736: LD_INT 2
52738: ARRAY
52739: PPUSH
52740: CALL_OW 488
52744: IFFALSE 52775
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52746: LD_VAR 0 13
52750: PPUSH
52751: LD_VAR 0 16
52755: PUSH
52756: LD_INT 1
52758: ARRAY
52759: PPUSH
52760: LD_VAR 0 16
52764: PUSH
52765: LD_INT 2
52767: ARRAY
52768: PPUSH
52769: CALL_OW 111
// continue ;
52773: GO 52265
// end ; end ; r := GetDir ( tmp ) ;
52775: LD_ADDR_VAR 0 15
52779: PUSH
52780: LD_VAR 0 13
52784: PPUSH
52785: CALL_OW 254
52789: ST_TO_ADDR
// if r = 5 then
52790: LD_VAR 0 15
52794: PUSH
52795: LD_INT 5
52797: EQUAL
52798: IFFALSE 52808
// r := 0 ;
52800: LD_ADDR_VAR 0 15
52804: PUSH
52805: LD_INT 0
52807: ST_TO_ADDR
// for j = r to 5 do
52808: LD_ADDR_VAR 0 10
52812: PUSH
52813: DOUBLE
52814: LD_VAR 0 15
52818: DEC
52819: ST_TO_ADDR
52820: LD_INT 5
52822: PUSH
52823: FOR_TO
52824: IFFALSE 52938
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52826: LD_ADDR_VAR 0 11
52830: PUSH
52831: LD_VAR 0 13
52835: PPUSH
52836: CALL_OW 250
52840: PPUSH
52841: LD_VAR 0 10
52845: PPUSH
52846: LD_INT 2
52848: PPUSH
52849: CALL_OW 272
52853: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52854: LD_ADDR_VAR 0 12
52858: PUSH
52859: LD_VAR 0 13
52863: PPUSH
52864: CALL_OW 251
52868: PPUSH
52869: LD_VAR 0 10
52873: PPUSH
52874: LD_INT 2
52876: PPUSH
52877: CALL_OW 273
52881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52882: LD_VAR 0 11
52886: PPUSH
52887: LD_VAR 0 12
52891: PPUSH
52892: CALL_OW 488
52896: PUSH
52897: LD_VAR 0 11
52901: PPUSH
52902: LD_VAR 0 12
52906: PPUSH
52907: CALL_OW 428
52911: NOT
52912: AND
52913: IFFALSE 52936
// begin ComMoveXY ( tmp , _x , _y ) ;
52915: LD_VAR 0 13
52919: PPUSH
52920: LD_VAR 0 11
52924: PPUSH
52925: LD_VAR 0 12
52929: PPUSH
52930: CALL_OW 111
// break ;
52934: GO 52938
// end ; end ;
52936: GO 52823
52938: POP
52939: POP
// end ; end ;
52940: GO 52265
52942: POP
52943: POP
// end ;
52944: LD_VAR 0 8
52948: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52949: LD_INT 0
52951: PPUSH
// result := true ;
52952: LD_ADDR_VAR 0 3
52956: PUSH
52957: LD_INT 1
52959: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52960: LD_VAR 0 2
52964: PUSH
52965: LD_INT 24
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52979
52971: LD_INT 33
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 52979
52977: GO 53004
52979: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52980: LD_ADDR_VAR 0 3
52984: PUSH
52985: LD_INT 32
52987: PPUSH
52988: LD_VAR 0 1
52992: PPUSH
52993: CALL_OW 321
52997: PUSH
52998: LD_INT 2
53000: EQUAL
53001: ST_TO_ADDR
53002: GO 53320
53004: LD_INT 20
53006: DOUBLE
53007: EQUAL
53008: IFTRUE 53012
53010: GO 53037
53012: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53013: LD_ADDR_VAR 0 3
53017: PUSH
53018: LD_INT 6
53020: PPUSH
53021: LD_VAR 0 1
53025: PPUSH
53026: CALL_OW 321
53030: PUSH
53031: LD_INT 2
53033: EQUAL
53034: ST_TO_ADDR
53035: GO 53320
53037: LD_INT 22
53039: DOUBLE
53040: EQUAL
53041: IFTRUE 53051
53043: LD_INT 36
53045: DOUBLE
53046: EQUAL
53047: IFTRUE 53051
53049: GO 53076
53051: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53052: LD_ADDR_VAR 0 3
53056: PUSH
53057: LD_INT 15
53059: PPUSH
53060: LD_VAR 0 1
53064: PPUSH
53065: CALL_OW 321
53069: PUSH
53070: LD_INT 2
53072: EQUAL
53073: ST_TO_ADDR
53074: GO 53320
53076: LD_INT 30
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53084
53082: GO 53109
53084: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53085: LD_ADDR_VAR 0 3
53089: PUSH
53090: LD_INT 20
53092: PPUSH
53093: LD_VAR 0 1
53097: PPUSH
53098: CALL_OW 321
53102: PUSH
53103: LD_INT 2
53105: EQUAL
53106: ST_TO_ADDR
53107: GO 53320
53109: LD_INT 28
53111: DOUBLE
53112: EQUAL
53113: IFTRUE 53123
53115: LD_INT 21
53117: DOUBLE
53118: EQUAL
53119: IFTRUE 53123
53121: GO 53148
53123: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: LD_INT 21
53131: PPUSH
53132: LD_VAR 0 1
53136: PPUSH
53137: CALL_OW 321
53141: PUSH
53142: LD_INT 2
53144: EQUAL
53145: ST_TO_ADDR
53146: GO 53320
53148: LD_INT 16
53150: DOUBLE
53151: EQUAL
53152: IFTRUE 53156
53154: GO 53181
53156: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53157: LD_ADDR_VAR 0 3
53161: PUSH
53162: LD_INT 84
53164: PPUSH
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 321
53174: PUSH
53175: LD_INT 2
53177: EQUAL
53178: ST_TO_ADDR
53179: GO 53320
53181: LD_INT 19
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53195
53187: LD_INT 23
53189: DOUBLE
53190: EQUAL
53191: IFTRUE 53195
53193: GO 53220
53195: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53196: LD_ADDR_VAR 0 3
53200: PUSH
53201: LD_INT 83
53203: PPUSH
53204: LD_VAR 0 1
53208: PPUSH
53209: CALL_OW 321
53213: PUSH
53214: LD_INT 2
53216: EQUAL
53217: ST_TO_ADDR
53218: GO 53320
53220: LD_INT 17
53222: DOUBLE
53223: EQUAL
53224: IFTRUE 53228
53226: GO 53253
53228: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53229: LD_ADDR_VAR 0 3
53233: PUSH
53234: LD_INT 39
53236: PPUSH
53237: LD_VAR 0 1
53241: PPUSH
53242: CALL_OW 321
53246: PUSH
53247: LD_INT 2
53249: EQUAL
53250: ST_TO_ADDR
53251: GO 53320
53253: LD_INT 18
53255: DOUBLE
53256: EQUAL
53257: IFTRUE 53261
53259: GO 53286
53261: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53262: LD_ADDR_VAR 0 3
53266: PUSH
53267: LD_INT 40
53269: PPUSH
53270: LD_VAR 0 1
53274: PPUSH
53275: CALL_OW 321
53279: PUSH
53280: LD_INT 2
53282: EQUAL
53283: ST_TO_ADDR
53284: GO 53320
53286: LD_INT 27
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53294
53292: GO 53319
53294: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53295: LD_ADDR_VAR 0 3
53299: PUSH
53300: LD_INT 35
53302: PPUSH
53303: LD_VAR 0 1
53307: PPUSH
53308: CALL_OW 321
53312: PUSH
53313: LD_INT 2
53315: EQUAL
53316: ST_TO_ADDR
53317: GO 53320
53319: POP
// end ;
53320: LD_VAR 0 3
53324: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53325: LD_INT 0
53327: PPUSH
53328: PPUSH
53329: PPUSH
53330: PPUSH
53331: PPUSH
53332: PPUSH
53333: PPUSH
53334: PPUSH
53335: PPUSH
53336: PPUSH
53337: PPUSH
// result := false ;
53338: LD_ADDR_VAR 0 6
53342: PUSH
53343: LD_INT 0
53345: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53346: LD_VAR 0 1
53350: NOT
53351: PUSH
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL_OW 266
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: IN
53372: NOT
53373: OR
53374: PUSH
53375: LD_VAR 0 2
53379: NOT
53380: OR
53381: PUSH
53382: LD_VAR 0 5
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: LD_INT 4
53401: PUSH
53402: LD_INT 5
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: IN
53413: NOT
53414: OR
53415: PUSH
53416: LD_VAR 0 3
53420: PPUSH
53421: LD_VAR 0 4
53425: PPUSH
53426: CALL_OW 488
53430: NOT
53431: OR
53432: IFFALSE 53436
// exit ;
53434: GO 54172
// side := GetSide ( depot ) ;
53436: LD_ADDR_VAR 0 9
53440: PUSH
53441: LD_VAR 0 1
53445: PPUSH
53446: CALL_OW 255
53450: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53451: LD_VAR 0 9
53455: PPUSH
53456: LD_VAR 0 2
53460: PPUSH
53461: CALL 52949 0 2
53465: NOT
53466: IFFALSE 53470
// exit ;
53468: GO 54172
// pom := GetBase ( depot ) ;
53470: LD_ADDR_VAR 0 10
53474: PUSH
53475: LD_VAR 0 1
53479: PPUSH
53480: CALL_OW 274
53484: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53485: LD_ADDR_VAR 0 11
53489: PUSH
53490: LD_VAR 0 2
53494: PPUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 248
53504: PPUSH
53505: CALL_OW 450
53509: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53510: LD_VAR 0 10
53514: PPUSH
53515: LD_INT 1
53517: PPUSH
53518: CALL_OW 275
53522: PUSH
53523: LD_VAR 0 11
53527: PUSH
53528: LD_INT 1
53530: ARRAY
53531: GREATEREQUAL
53532: PUSH
53533: LD_VAR 0 10
53537: PPUSH
53538: LD_INT 2
53540: PPUSH
53541: CALL_OW 275
53545: PUSH
53546: LD_VAR 0 11
53550: PUSH
53551: LD_INT 2
53553: ARRAY
53554: GREATEREQUAL
53555: AND
53556: PUSH
53557: LD_VAR 0 10
53561: PPUSH
53562: LD_INT 3
53564: PPUSH
53565: CALL_OW 275
53569: PUSH
53570: LD_VAR 0 11
53574: PUSH
53575: LD_INT 3
53577: ARRAY
53578: GREATEREQUAL
53579: AND
53580: NOT
53581: IFFALSE 53585
// exit ;
53583: GO 54172
// if GetBType ( depot ) = b_depot then
53585: LD_VAR 0 1
53589: PPUSH
53590: CALL_OW 266
53594: PUSH
53595: LD_INT 0
53597: EQUAL
53598: IFFALSE 53610
// dist := 28 else
53600: LD_ADDR_VAR 0 14
53604: PUSH
53605: LD_INT 28
53607: ST_TO_ADDR
53608: GO 53618
// dist := 36 ;
53610: LD_ADDR_VAR 0 14
53614: PUSH
53615: LD_INT 36
53617: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53618: LD_VAR 0 1
53622: PPUSH
53623: LD_VAR 0 3
53627: PPUSH
53628: LD_VAR 0 4
53632: PPUSH
53633: CALL_OW 297
53637: PUSH
53638: LD_VAR 0 14
53642: GREATER
53643: IFFALSE 53647
// exit ;
53645: GO 54172
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53647: LD_ADDR_VAR 0 12
53651: PUSH
53652: LD_VAR 0 2
53656: PPUSH
53657: LD_VAR 0 3
53661: PPUSH
53662: LD_VAR 0 4
53666: PPUSH
53667: LD_VAR 0 5
53671: PPUSH
53672: LD_VAR 0 1
53676: PPUSH
53677: CALL_OW 248
53681: PPUSH
53682: LD_INT 0
53684: PPUSH
53685: CALL 54177 0 6
53689: ST_TO_ADDR
// if not hexes then
53690: LD_VAR 0 12
53694: NOT
53695: IFFALSE 53699
// exit ;
53697: GO 54172
// hex := GetHexInfo ( x , y ) ;
53699: LD_ADDR_VAR 0 15
53703: PUSH
53704: LD_VAR 0 3
53708: PPUSH
53709: LD_VAR 0 4
53713: PPUSH
53714: CALL_OW 546
53718: ST_TO_ADDR
// if hex [ 1 ] then
53719: LD_VAR 0 15
53723: PUSH
53724: LD_INT 1
53726: ARRAY
53727: IFFALSE 53731
// exit ;
53729: GO 54172
// height := hex [ 2 ] ;
53731: LD_ADDR_VAR 0 13
53735: PUSH
53736: LD_VAR 0 15
53740: PUSH
53741: LD_INT 2
53743: ARRAY
53744: ST_TO_ADDR
// for i = 1 to hexes do
53745: LD_ADDR_VAR 0 7
53749: PUSH
53750: DOUBLE
53751: LD_INT 1
53753: DEC
53754: ST_TO_ADDR
53755: LD_VAR 0 12
53759: PUSH
53760: FOR_TO
53761: IFFALSE 54091
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53763: LD_VAR 0 12
53767: PUSH
53768: LD_VAR 0 7
53772: ARRAY
53773: PUSH
53774: LD_INT 1
53776: ARRAY
53777: PPUSH
53778: LD_VAR 0 12
53782: PUSH
53783: LD_VAR 0 7
53787: ARRAY
53788: PUSH
53789: LD_INT 2
53791: ARRAY
53792: PPUSH
53793: CALL_OW 488
53797: NOT
53798: PUSH
53799: LD_VAR 0 12
53803: PUSH
53804: LD_VAR 0 7
53808: ARRAY
53809: PUSH
53810: LD_INT 1
53812: ARRAY
53813: PPUSH
53814: LD_VAR 0 12
53818: PUSH
53819: LD_VAR 0 7
53823: ARRAY
53824: PUSH
53825: LD_INT 2
53827: ARRAY
53828: PPUSH
53829: CALL_OW 428
53833: PUSH
53834: LD_INT 0
53836: GREATER
53837: OR
53838: PUSH
53839: LD_VAR 0 12
53843: PUSH
53844: LD_VAR 0 7
53848: ARRAY
53849: PUSH
53850: LD_INT 1
53852: ARRAY
53853: PPUSH
53854: LD_VAR 0 12
53858: PUSH
53859: LD_VAR 0 7
53863: ARRAY
53864: PUSH
53865: LD_INT 2
53867: ARRAY
53868: PPUSH
53869: CALL_OW 351
53873: OR
53874: IFFALSE 53880
// exit ;
53876: POP
53877: POP
53878: GO 54172
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53880: LD_ADDR_VAR 0 8
53884: PUSH
53885: LD_VAR 0 12
53889: PUSH
53890: LD_VAR 0 7
53894: ARRAY
53895: PUSH
53896: LD_INT 1
53898: ARRAY
53899: PPUSH
53900: LD_VAR 0 12
53904: PUSH
53905: LD_VAR 0 7
53909: ARRAY
53910: PUSH
53911: LD_INT 2
53913: ARRAY
53914: PPUSH
53915: CALL_OW 546
53919: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53920: LD_VAR 0 8
53924: PUSH
53925: LD_INT 1
53927: ARRAY
53928: PUSH
53929: LD_VAR 0 8
53933: PUSH
53934: LD_INT 2
53936: ARRAY
53937: PUSH
53938: LD_VAR 0 13
53942: PUSH
53943: LD_INT 2
53945: PLUS
53946: GREATER
53947: OR
53948: PUSH
53949: LD_VAR 0 8
53953: PUSH
53954: LD_INT 2
53956: ARRAY
53957: PUSH
53958: LD_VAR 0 13
53962: PUSH
53963: LD_INT 2
53965: MINUS
53966: LESS
53967: OR
53968: PUSH
53969: LD_VAR 0 8
53973: PUSH
53974: LD_INT 3
53976: ARRAY
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 8
53983: PUSH
53984: LD_INT 9
53986: PUSH
53987: LD_INT 10
53989: PUSH
53990: LD_INT 11
53992: PUSH
53993: LD_INT 12
53995: PUSH
53996: LD_INT 13
53998: PUSH
53999: LD_INT 16
54001: PUSH
54002: LD_INT 17
54004: PUSH
54005: LD_INT 18
54007: PUSH
54008: LD_INT 19
54010: PUSH
54011: LD_INT 20
54013: PUSH
54014: LD_INT 21
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: IN
54032: NOT
54033: OR
54034: PUSH
54035: LD_VAR 0 8
54039: PUSH
54040: LD_INT 5
54042: ARRAY
54043: NOT
54044: OR
54045: PUSH
54046: LD_VAR 0 8
54050: PUSH
54051: LD_INT 6
54053: ARRAY
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 7
54063: PUSH
54064: LD_INT 9
54066: PUSH
54067: LD_INT 10
54069: PUSH
54070: LD_INT 11
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: IN
54081: NOT
54082: OR
54083: IFFALSE 54089
// exit ;
54085: POP
54086: POP
54087: GO 54172
// end ;
54089: GO 53760
54091: POP
54092: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54093: LD_VAR 0 9
54097: PPUSH
54098: LD_VAR 0 3
54102: PPUSH
54103: LD_VAR 0 4
54107: PPUSH
54108: LD_INT 20
54110: PPUSH
54111: CALL 46124 0 4
54115: PUSH
54116: LD_INT 4
54118: ARRAY
54119: IFFALSE 54123
// exit ;
54121: GO 54172
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54123: LD_VAR 0 2
54127: PUSH
54128: LD_INT 29
54130: PUSH
54131: LD_INT 30
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: IN
54138: PUSH
54139: LD_VAR 0 3
54143: PPUSH
54144: LD_VAR 0 4
54148: PPUSH
54149: LD_VAR 0 9
54153: PPUSH
54154: CALL_OW 440
54158: NOT
54159: AND
54160: IFFALSE 54164
// exit ;
54162: GO 54172
// result := true ;
54164: LD_ADDR_VAR 0 6
54168: PUSH
54169: LD_INT 1
54171: ST_TO_ADDR
// end ;
54172: LD_VAR 0 6
54176: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54177: LD_INT 0
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
54185: PPUSH
54186: PPUSH
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
54192: PPUSH
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
54222: PPUSH
54223: PPUSH
54224: PPUSH
54225: PPUSH
54226: PPUSH
54227: PPUSH
54228: PPUSH
54229: PPUSH
54230: PPUSH
54231: PPUSH
54232: PPUSH
54233: PPUSH
54234: PPUSH
54235: PPUSH
54236: PPUSH
// result = [ ] ;
54237: LD_ADDR_VAR 0 7
54241: PUSH
54242: EMPTY
54243: ST_TO_ADDR
// temp_list = [ ] ;
54244: LD_ADDR_VAR 0 9
54248: PUSH
54249: EMPTY
54250: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54251: LD_VAR 0 4
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: LD_INT 5
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: IN
54282: NOT
54283: PUSH
54284: LD_VAR 0 1
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: IN
54299: PUSH
54300: LD_VAR 0 5
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: IN
54319: NOT
54320: AND
54321: OR
54322: IFFALSE 54326
// exit ;
54324: GO 72717
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54326: LD_VAR 0 1
54330: PUSH
54331: LD_INT 6
54333: PUSH
54334: LD_INT 7
54336: PUSH
54337: LD_INT 8
54339: PUSH
54340: LD_INT 13
54342: PUSH
54343: LD_INT 12
54345: PUSH
54346: LD_INT 15
54348: PUSH
54349: LD_INT 11
54351: PUSH
54352: LD_INT 14
54354: PUSH
54355: LD_INT 10
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: IN
54369: IFFALSE 54379
// btype = b_lab ;
54371: LD_ADDR_VAR 0 1
54375: PUSH
54376: LD_INT 6
54378: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54379: LD_VAR 0 6
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: IN
54398: NOT
54399: PUSH
54400: LD_VAR 0 1
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: LD_INT 6
54419: PUSH
54420: LD_INT 36
54422: PUSH
54423: LD_INT 4
54425: PUSH
54426: LD_INT 5
54428: PUSH
54429: LD_INT 31
54431: PUSH
54432: LD_INT 32
54434: PUSH
54435: LD_INT 33
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: IN
54451: NOT
54452: PUSH
54453: LD_VAR 0 6
54457: PUSH
54458: LD_INT 1
54460: EQUAL
54461: AND
54462: OR
54463: PUSH
54464: LD_VAR 0 1
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: IN
54479: NOT
54480: PUSH
54481: LD_VAR 0 6
54485: PUSH
54486: LD_INT 2
54488: EQUAL
54489: AND
54490: OR
54491: IFFALSE 54501
// mode = 0 ;
54493: LD_ADDR_VAR 0 6
54497: PUSH
54498: LD_INT 0
54500: ST_TO_ADDR
// case mode of 0 :
54501: LD_VAR 0 6
54505: PUSH
54506: LD_INT 0
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54514
54512: GO 65967
54514: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54515: LD_ADDR_VAR 0 11
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54708: LD_ADDR_VAR 0 12
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54904: LD_ADDR_VAR 0 13
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55103: LD_ADDR_VAR 0 14
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55299: LD_ADDR_VAR 0 15
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55492: LD_ADDR_VAR 0 16
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55685: LD_ADDR_VAR 0 17
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55915: LD_ADDR_VAR 0 18
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56145: LD_ADDR_VAR 0 19
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56375: LD_ADDR_VAR 0 20
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56605: LD_ADDR_VAR 0 21
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56835: LD_ADDR_VAR 0 22
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57065: LD_ADDR_VAR 0 23
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 3
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57345: LD_ADDR_VAR 0 24
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 2
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57621: LD_ADDR_VAR 0 25
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57895: LD_ADDR_VAR 0 26
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58171: LD_ADDR_VAR 0 27
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58451: LD_ADDR_VAR 0 28
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 3
58686: NEG
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58733: LD_ADDR_VAR 0 29
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59012: LD_ADDR_VAR 0 30
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59290: LD_ADDR_VAR 0 31
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59568: LD_ADDR_VAR 0 32
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 3
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59846: LD_ADDR_VAR 0 33
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60125: LD_ADDR_VAR 0 34
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: LD_INT 3
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60405: LD_ADDR_VAR 0 35
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60517: LD_ADDR_VAR 0 36
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60629: LD_ADDR_VAR 0 37
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60741: LD_ADDR_VAR 0 38
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60853: LD_ADDR_VAR 0 39
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60965: LD_ADDR_VAR 0 40
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61077: LD_ADDR_VAR 0 41
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 3
61351: NEG
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: NEG
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: NEG
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61427: LD_ADDR_VAR 0 42
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: LD_INT 3
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 3
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: PUSH
61653: LD_INT 2
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 3
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 3
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 3
61736: NEG
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61777: LD_ADDR_VAR 0 43
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 2
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 3
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 3
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: LD_INT 3
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: NEG
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62125: LD_ADDR_VAR 0 44
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62475: LD_ADDR_VAR 0 45
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62825: LD_ADDR_VAR 0 46
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 3
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63173: LD_ADDR_VAR 0 47
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63324: LD_ADDR_VAR 0 48
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 2
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63471: LD_ADDR_VAR 0 49
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63615: LD_ADDR_VAR 0 50
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 2
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63759: LD_ADDR_VAR 0 51
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: NEG
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63906: LD_ADDR_VAR 0 52
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: NEG
64034: PUSH
64035: LD_INT 2
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64057: LD_ADDR_VAR 0 53
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 2
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 2
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64287: LD_ADDR_VAR 0 54
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: LD_INT 2
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 2
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_INT 2
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 2
64486: NEG
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64517: LD_ADDR_VAR 0 55
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 2
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 2
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 2
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64747: LD_ADDR_VAR 0 56
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64977: LD_ADDR_VAR 0 57
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 2
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 2
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 2
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 2
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: NEG
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 2
65176: NEG
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65207: LD_ADDR_VAR 0 58
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 2
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 2
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: NEG
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65437: LD_ADDR_VAR 0 59
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: LD_INT 1
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65525: LD_ADDR_VAR 0 60
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65613: LD_ADDR_VAR 0 61
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65701: LD_ADDR_VAR 0 62
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65789: LD_ADDR_VAR 0 63
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65877: LD_ADDR_VAR 0 64
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: LD_INT 1
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: ST_TO_ADDR
// end ; 1 :
65965: GO 71862
65967: LD_INT 1
65969: DOUBLE
65970: EQUAL
65971: IFTRUE 65975
65973: GO 68598
65975: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65976: LD_ADDR_VAR 0 11
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: LD_INT 2
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66020: LD_ADDR_VAR 0 12
66024: PUSH
66025: LD_INT 2
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 3
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66061: LD_ADDR_VAR 0 13
66065: PUSH
66066: LD_INT 3
66068: PUSH
66069: LD_INT 2
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 3
66078: PUSH
66079: LD_INT 3
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: LD_INT 3
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66101: LD_ADDR_VAR 0 14
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 3
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: LD_INT 2
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: LIST
66141: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66142: LD_ADDR_VAR 0 15
66146: PUSH
66147: LD_INT 2
66149: NEG
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66186: LD_ADDR_VAR 0 16
66190: PUSH
66191: LD_INT 2
66193: NEG
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: LD_INT 2
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: LD_INT 3
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66232: LD_ADDR_VAR 0 17
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 3
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 2
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66276: LD_ADDR_VAR 0 18
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 3
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66317: LD_ADDR_VAR 0 19
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: LD_INT 2
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 2
66344: PUSH
66345: LD_INT 3
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66357: LD_ADDR_VAR 0 20
66361: PUSH
66362: LD_INT 1
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: LD_INT 2
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: LIST
66397: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66398: LD_ADDR_VAR 0 21
66402: PUSH
66403: LD_INT 2
66405: NEG
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: NEG
66428: PUSH
66429: LD_INT 1
66431: NEG
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66442: LD_ADDR_VAR 0 22
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: LD_INT 3
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: LD_INT 2
66465: NEG
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 3
66473: NEG
66474: PUSH
66475: LD_INT 3
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66488: LD_ADDR_VAR 0 23
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_INT 3
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 4
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: LD_INT 3
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66532: LD_ADDR_VAR 0 24
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 4
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: LIST
66572: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66573: LD_ADDR_VAR 0 25
66577: PUSH
66578: LD_INT 3
66580: PUSH
66581: LD_INT 3
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 4
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 3
66600: PUSH
66601: LD_INT 4
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66613: LD_ADDR_VAR 0 26
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: LD_INT 4
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: LD_INT 3
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: LIST
66653: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66654: LD_ADDR_VAR 0 27
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 3
66672: NEG
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 4
66683: NEG
66684: PUSH
66685: LD_INT 1
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66698: LD_ADDR_VAR 0 28
66702: PUSH
66703: LD_INT 3
66705: NEG
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 3
66717: NEG
66718: PUSH
66719: LD_INT 4
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 4
66729: NEG
66730: PUSH
66731: LD_INT 3
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66744: LD_ADDR_VAR 0 29
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: LD_INT 3
66766: NEG
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: LD_INT 2
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 1
66785: NEG
66786: PUSH
66787: LD_INT 4
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: LD_INT 4
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: NEG
66820: PUSH
66821: LD_INT 5
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: LD_INT 5
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: LD_INT 4
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: LD_INT 6
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 6
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: LD_INT 5
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66899: LD_ADDR_VAR 0 30
66903: PUSH
66904: LD_INT 2
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 3
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: LD_INT 1
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 4
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 4
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 4
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 5
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 5
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 5
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 6
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 6
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67042: LD_ADDR_VAR 0 31
67046: PUSH
67047: LD_INT 3
67049: PUSH
67050: LD_INT 2
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 3
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 2
67069: PUSH
67070: LD_INT 3
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 4
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 4
67089: PUSH
67090: LD_INT 4
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: LD_INT 4
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 5
67109: PUSH
67110: LD_INT 4
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 5
67119: PUSH
67120: LD_INT 5
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 4
67129: PUSH
67130: LD_INT 5
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 6
67139: PUSH
67140: LD_INT 5
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 6
67149: PUSH
67150: LD_INT 6
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 5
67159: PUSH
67160: LD_INT 6
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67181: LD_ADDR_VAR 0 32
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: LD_INT 3
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 0
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: LD_INT 4
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: LD_INT 4
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: LD_INT 3
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 5
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 5
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: LD_INT 4
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: LD_INT 6
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: LD_INT 6
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: LD_INT 5
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67324: LD_ADDR_VAR 0 33
67328: PUSH
67329: LD_INT 2
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: NEG
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 3
67353: NEG
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 4
67376: NEG
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 4
67387: NEG
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 4
67399: NEG
67400: PUSH
67401: LD_INT 1
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 5
67410: NEG
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 5
67421: NEG
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 6
67444: NEG
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 6
67455: NEG
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67479: LD_ADDR_VAR 0 34
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: LD_INT 3
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: LD_INT 4
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 4
67534: NEG
67535: PUSH
67536: LD_INT 3
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 4
67546: NEG
67547: PUSH
67548: LD_INT 4
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 4
67558: NEG
67559: PUSH
67560: LD_INT 5
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 5
67570: NEG
67571: PUSH
67572: LD_INT 4
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 5
67582: NEG
67583: PUSH
67584: LD_INT 5
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 5
67594: NEG
67595: PUSH
67596: LD_INT 6
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 6
67606: NEG
67607: PUSH
67608: LD_INT 5
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 6
67618: NEG
67619: PUSH
67620: LD_INT 6
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67642: LD_ADDR_VAR 0 41
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: LD_INT 2
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 1
67660: NEG
67661: PUSH
67662: LD_INT 3
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: PUSH
67673: LD_INT 2
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67686: LD_ADDR_VAR 0 42
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 2
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: LD_INT 1
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: LIST
67726: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67727: LD_ADDR_VAR 0 43
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: LD_INT 2
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: LIST
67766: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67767: LD_ADDR_VAR 0 44
67771: PUSH
67772: LD_INT 0
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: NEG
67795: PUSH
67796: LD_INT 2
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67808: LD_ADDR_VAR 0 45
67812: PUSH
67813: LD_INT 2
67815: NEG
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 2
67826: NEG
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: LD_INT 1
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: LIST
67851: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67852: LD_ADDR_VAR 0 46
67856: PUSH
67857: LD_INT 2
67859: NEG
67860: PUSH
67861: LD_INT 2
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: LD_INT 3
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 3
67883: NEG
67884: PUSH
67885: LD_INT 2
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67898: LD_ADDR_VAR 0 47
67902: PUSH
67903: LD_INT 2
67905: NEG
67906: PUSH
67907: LD_INT 3
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: LD_INT 3
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67931: LD_ADDR_VAR 0 48
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 2
67949: PUSH
67950: LD_INT 1
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67962: LD_ADDR_VAR 0 49
67966: PUSH
67967: LD_INT 3
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 3
67979: PUSH
67980: LD_INT 2
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67991: LD_ADDR_VAR 0 50
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: LD_INT 3
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68020: LD_ADDR_VAR 0 51
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: LD_INT 2
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 2
68038: NEG
68039: PUSH
68040: LD_INT 1
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68051: LD_ADDR_VAR 0 52
68055: PUSH
68056: LD_INT 3
68058: NEG
68059: PUSH
68060: LD_INT 1
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 3
68070: NEG
68071: PUSH
68072: LD_INT 2
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68084: LD_ADDR_VAR 0 53
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: LIST
68127: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68128: LD_ADDR_VAR 0 54
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 3
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 3
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68169: LD_ADDR_VAR 0 55
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: LD_INT 2
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: LD_INT 3
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: LD_INT 3
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: LIST
68208: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68209: LD_ADDR_VAR 0 56
68213: PUSH
68214: LD_INT 1
68216: PUSH
68217: LD_INT 3
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: LD_INT 3
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68250: LD_ADDR_VAR 0 57
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 1
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 3
68268: NEG
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 3
68279: NEG
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68294: LD_ADDR_VAR 0 58
68298: PUSH
68299: LD_INT 2
68301: NEG
68302: PUSH
68303: LD_INT 3
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 3
68313: NEG
68314: PUSH
68315: LD_INT 2
68317: NEG
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 3
68325: NEG
68326: PUSH
68327: LD_INT 3
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68340: LD_ADDR_VAR 0 59
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 0
68359: PUSH
68360: LD_INT 2
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 1
68370: PUSH
68371: LD_INT 1
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68384: LD_ADDR_VAR 0 60
68388: PUSH
68389: LD_INT 1
68391: PUSH
68392: LD_INT 1
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 2
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 2
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: LIST
68424: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68425: LD_ADDR_VAR 0 61
68429: PUSH
68430: LD_INT 2
68432: PUSH
68433: LD_INT 1
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 2
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: PUSH
68453: LD_INT 2
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68465: LD_ADDR_VAR 0 62
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: LD_INT 2
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: LD_INT 2
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: LIST
68505: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68506: LD_ADDR_VAR 0 63
68510: PUSH
68511: LD_INT 1
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 2
68535: NEG
68536: PUSH
68537: LD_INT 1
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: LIST
68549: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68550: LD_ADDR_VAR 0 64
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: LD_INT 2
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 2
68569: NEG
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: LD_INT 2
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: LIST
68595: ST_TO_ADDR
// end ; 2 :
68596: GO 71862
68598: LD_INT 2
68600: DOUBLE
68601: EQUAL
68602: IFTRUE 68606
68604: GO 71861
68606: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68607: LD_ADDR_VAR 0 29
68611: PUSH
68612: LD_INT 4
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 4
68624: PUSH
68625: LD_INT 1
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 5
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 5
68645: PUSH
68646: LD_INT 1
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 3
68675: PUSH
68676: LD_INT 1
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: LD_INT 2
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 5
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 3
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: LD_INT 2
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: LD_INT 3
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 4
68737: PUSH
68738: LD_INT 4
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 4
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: LD_INT 2
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 4
68777: PUSH
68778: LD_INT 2
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 2
68787: PUSH
68788: LD_INT 4
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 4
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: LD_INT 3
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: LD_INT 4
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 1
68827: PUSH
68828: LD_INT 5
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: LD_INT 5
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: NEG
68848: PUSH
68849: LD_INT 4
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 1
68858: NEG
68859: PUSH
68860: LD_INT 3
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 2
68869: PUSH
68870: LD_INT 5
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 2
68879: NEG
68880: PUSH
68881: LD_INT 3
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 3
68890: NEG
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: NEG
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 2
68913: NEG
68914: PUSH
68915: LD_INT 0
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 2
68924: NEG
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 3
68935: NEG
68936: PUSH
68937: LD_INT 1
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 4
68946: NEG
68947: PUSH
68948: LD_INT 0
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 4
68957: NEG
68958: PUSH
68959: LD_INT 1
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 4
68969: NEG
68970: PUSH
68971: LD_INT 2
68973: NEG
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 2
68981: NEG
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 4
68992: NEG
68993: PUSH
68994: LD_INT 4
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 4
69004: NEG
69005: PUSH
69006: LD_INT 5
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: LD_INT 4
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: LD_INT 3
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 4
69040: NEG
69041: PUSH
69042: LD_INT 3
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 5
69052: NEG
69053: PUSH
69054: LD_INT 4
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 5
69064: NEG
69065: PUSH
69066: LD_INT 5
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: LD_INT 5
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 5
69088: NEG
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69145: LD_ADDR_VAR 0 30
69149: PUSH
69150: LD_INT 4
69152: PUSH
69153: LD_INT 4
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 4
69162: PUSH
69163: LD_INT 3
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 5
69172: PUSH
69173: LD_INT 4
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 5
69182: PUSH
69183: LD_INT 5
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 4
69192: PUSH
69193: LD_INT 5
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 3
69202: PUSH
69203: LD_INT 4
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 3
69212: PUSH
69213: LD_INT 3
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 5
69222: PUSH
69223: LD_INT 3
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 3
69232: PUSH
69233: LD_INT 5
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: LD_INT 3
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 1
69262: PUSH
69263: LD_INT 3
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: LD_INT 4
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 4
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: LD_INT 3
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: LD_INT 2
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 2
69314: PUSH
69315: LD_INT 4
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 2
69324: NEG
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 4
69335: NEG
69336: PUSH
69337: LD_INT 0
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 4
69346: NEG
69347: PUSH
69348: LD_INT 1
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: NEG
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: NEG
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: NEG
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 5
69391: NEG
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 5
69402: NEG
69403: PUSH
69404: LD_INT 1
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 5
69414: NEG
69415: PUSH
69416: LD_INT 2
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: NEG
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 3
69437: NEG
69438: PUSH
69439: LD_INT 3
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 3
69449: NEG
69450: PUSH
69451: LD_INT 4
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: LD_INT 3
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 2
69473: NEG
69474: PUSH
69475: LD_INT 2
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: LD_INT 2
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 4
69497: NEG
69498: PUSH
69499: LD_INT 3
69501: NEG
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 4
69509: NEG
69510: PUSH
69511: LD_INT 4
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 2
69521: NEG
69522: PUSH
69523: LD_INT 4
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 4
69533: NEG
69534: PUSH
69535: LD_INT 2
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: LD_INT 4
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: LD_INT 5
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: LD_INT 4
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: PUSH
69579: LD_INT 3
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: LD_INT 3
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: LD_INT 4
69604: NEG
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 1
69612: NEG
69613: PUSH
69614: LD_INT 5
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: LD_INT 3
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 2
69635: NEG
69636: PUSH
69637: LD_INT 5
69639: NEG
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69692: LD_ADDR_VAR 0 31
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: LD_INT 4
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: LD_INT 3
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: PUSH
69720: LD_INT 4
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 1
69729: PUSH
69730: LD_INT 5
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 5
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: LD_INT 4
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: NEG
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 2
69771: PUSH
69772: LD_INT 5
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 2
69781: NEG
69782: PUSH
69783: LD_INT 3
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 3
69792: NEG
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 3
69803: NEG
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: NEG
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 2
69826: NEG
69827: PUSH
69828: LD_INT 1
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: NEG
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 4
69848: NEG
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 4
69859: NEG
69860: PUSH
69861: LD_INT 1
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 4
69871: NEG
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 2
69883: NEG
69884: PUSH
69885: LD_INT 2
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 4
69894: NEG
69895: PUSH
69896: LD_INT 4
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 4
69906: NEG
69907: PUSH
69908: LD_INT 5
69910: NEG
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 3
69918: NEG
69919: PUSH
69920: LD_INT 4
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 3
69930: NEG
69931: PUSH
69932: LD_INT 3
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 4
69942: NEG
69943: PUSH
69944: LD_INT 3
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 5
69954: NEG
69955: PUSH
69956: LD_INT 4
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 5
69966: NEG
69967: PUSH
69968: LD_INT 5
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 3
69978: NEG
69979: PUSH
69980: LD_INT 5
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 5
69990: NEG
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: LD_INT 3
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: LD_INT 4
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: LD_INT 3
70027: NEG
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: LD_INT 2
70038: NEG
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 0
70046: PUSH
70047: LD_INT 2
70049: NEG
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 1
70057: NEG
70058: PUSH
70059: LD_INT 3
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: PUSH
70071: LD_INT 4
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 2
70081: PUSH
70082: LD_INT 2
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 2
70092: NEG
70093: PUSH
70094: LD_INT 4
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 4
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 4
70114: PUSH
70115: LD_INT 1
70117: NEG
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 5
70125: PUSH
70126: LD_INT 0
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 5
70135: PUSH
70136: LD_INT 1
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 4
70145: PUSH
70146: LD_INT 1
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 3
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 3
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: LD_INT 2
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 5
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70242: LD_ADDR_VAR 0 32
70246: PUSH
70247: LD_INT 4
70249: NEG
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 4
70260: NEG
70261: PUSH
70262: LD_INT 1
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 3
70272: NEG
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 3
70283: NEG
70284: PUSH
70285: LD_INT 1
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 4
70294: NEG
70295: PUSH
70296: LD_INT 1
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 5
70305: NEG
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 5
70316: NEG
70317: PUSH
70318: LD_INT 1
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 5
70328: NEG
70329: PUSH
70330: LD_INT 2
70332: NEG
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 3
70340: NEG
70341: PUSH
70342: LD_INT 2
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 3
70351: NEG
70352: PUSH
70353: LD_INT 3
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 3
70363: NEG
70364: PUSH
70365: LD_INT 4
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: LD_INT 3
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 2
70387: NEG
70388: PUSH
70389: LD_INT 2
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 3
70399: NEG
70400: PUSH
70401: LD_INT 2
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 4
70411: NEG
70412: PUSH
70413: LD_INT 3
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 4
70423: NEG
70424: PUSH
70425: LD_INT 4
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 2
70435: NEG
70436: PUSH
70437: LD_INT 4
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 4
70447: NEG
70448: PUSH
70449: LD_INT 2
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: LD_INT 4
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 0
70470: PUSH
70471: LD_INT 5
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: LD_INT 4
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 3
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 0
70503: PUSH
70504: LD_INT 3
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 1
70514: NEG
70515: PUSH
70516: LD_INT 4
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 1
70526: NEG
70527: PUSH
70528: LD_INT 5
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 2
70538: PUSH
70539: LD_INT 3
70541: NEG
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 2
70549: NEG
70550: PUSH
70551: LD_INT 5
70553: NEG
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 3
70561: PUSH
70562: LD_INT 0
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 3
70571: PUSH
70572: LD_INT 1
70574: NEG
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 4
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 4
70592: PUSH
70593: LD_INT 1
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: LD_INT 1
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 2
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: PUSH
70623: LD_INT 1
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: PUSH
70634: LD_INT 2
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 4
70644: PUSH
70645: LD_INT 2
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 4
70654: PUSH
70655: LD_INT 4
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 4
70664: PUSH
70665: LD_INT 3
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 5
70674: PUSH
70675: LD_INT 4
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 5
70684: PUSH
70685: LD_INT 5
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 4
70694: PUSH
70695: LD_INT 5
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 3
70704: PUSH
70705: LD_INT 4
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 3
70714: PUSH
70715: LD_INT 3
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 5
70724: PUSH
70725: LD_INT 3
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 3
70734: PUSH
70735: LD_INT 5
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70789: LD_ADDR_VAR 0 33
70793: PUSH
70794: LD_INT 4
70796: NEG
70797: PUSH
70798: LD_INT 4
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 4
70808: NEG
70809: PUSH
70810: LD_INT 5
70812: NEG
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 3
70820: NEG
70821: PUSH
70822: LD_INT 4
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 3
70832: NEG
70833: PUSH
70834: LD_INT 3
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 4
70844: NEG
70845: PUSH
70846: LD_INT 3
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 5
70856: NEG
70857: PUSH
70858: LD_INT 4
70860: NEG
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 5
70868: NEG
70869: PUSH
70870: LD_INT 5
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 3
70880: NEG
70881: PUSH
70882: LD_INT 5
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 5
70892: NEG
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: LD_INT 3
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: LD_INT 4
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: LD_INT 3
70929: NEG
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 1
70937: PUSH
70938: LD_INT 2
70940: NEG
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: LD_INT 2
70951: NEG
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 1
70959: NEG
70960: PUSH
70961: LD_INT 3
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 1
70971: NEG
70972: PUSH
70973: LD_INT 4
70975: NEG
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 2
70983: PUSH
70984: LD_INT 2
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 2
70994: NEG
70995: PUSH
70996: LD_INT 4
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 4
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 4
71016: PUSH
71017: LD_INT 1
71019: NEG
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 5
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 5
71037: PUSH
71038: LD_INT 1
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 4
71047: PUSH
71048: LD_INT 1
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 3
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: LD_INT 1
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 3
71078: PUSH
71079: LD_INT 2
71081: NEG
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 5
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 3
71099: PUSH
71100: LD_INT 3
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: LD_INT 2
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 4
71119: PUSH
71120: LD_INT 3
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 4
71129: PUSH
71130: LD_INT 4
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: LD_INT 4
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: LD_INT 3
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 2
71159: PUSH
71160: LD_INT 2
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 4
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 2
71179: PUSH
71180: LD_INT 4
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 0
71189: PUSH
71190: LD_INT 4
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: LD_INT 3
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 1
71209: PUSH
71210: LD_INT 4
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 1
71219: PUSH
71220: LD_INT 5
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: LD_INT 5
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 1
71239: NEG
71240: PUSH
71241: LD_INT 4
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 1
71250: NEG
71251: PUSH
71252: LD_INT 3
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: LD_INT 5
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 2
71271: NEG
71272: PUSH
71273: LD_INT 3
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71327: LD_ADDR_VAR 0 34
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: LD_INT 4
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 0
71345: PUSH
71346: LD_INT 5
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 1
71356: PUSH
71357: LD_INT 4
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 1
71367: PUSH
71368: LD_INT 3
71370: NEG
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: LD_INT 3
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 1
71389: NEG
71390: PUSH
71391: LD_INT 4
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: NEG
71402: PUSH
71403: LD_INT 5
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 2
71413: PUSH
71414: LD_INT 3
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 2
71424: NEG
71425: PUSH
71426: LD_INT 5
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 3
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 3
71446: PUSH
71447: LD_INT 1
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 4
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 4
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 3
71477: PUSH
71478: LD_INT 1
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 2
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 2
71497: PUSH
71498: LD_INT 1
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 2
71508: PUSH
71509: LD_INT 2
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 4
71519: PUSH
71520: LD_INT 2
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 4
71529: PUSH
71530: LD_INT 4
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 4
71539: PUSH
71540: LD_INT 3
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 5
71549: PUSH
71550: LD_INT 4
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 5
71559: PUSH
71560: LD_INT 5
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 4
71569: PUSH
71570: LD_INT 5
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 3
71579: PUSH
71580: LD_INT 4
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 3
71589: PUSH
71590: LD_INT 3
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 5
71599: PUSH
71600: LD_INT 3
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 3
71609: PUSH
71610: LD_INT 5
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: LD_INT 3
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 2
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 1
71639: PUSH
71640: LD_INT 3
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 1
71649: PUSH
71650: LD_INT 4
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 4
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: LD_INT 3
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 1
71680: NEG
71681: PUSH
71682: LD_INT 2
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: LD_INT 4
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 2
71701: NEG
71702: PUSH
71703: LD_INT 2
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 4
71712: NEG
71713: PUSH
71714: LD_INT 0
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 4
71723: NEG
71724: PUSH
71725: LD_INT 1
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 3
71735: NEG
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 3
71746: NEG
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 4
71757: NEG
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 5
71768: NEG
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 5
71779: NEG
71780: PUSH
71781: LD_INT 1
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 5
71791: NEG
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 3
71803: NEG
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: ST_TO_ADDR
// end ; end ;
71859: GO 71862
71861: POP
// case btype of b_depot , b_warehouse :
71862: LD_VAR 0 1
71866: PUSH
71867: LD_INT 0
71869: DOUBLE
71870: EQUAL
71871: IFTRUE 71881
71873: LD_INT 1
71875: DOUBLE
71876: EQUAL
71877: IFTRUE 71881
71879: GO 72082
71881: POP
// case nation of nation_american :
71882: LD_VAR 0 5
71886: PUSH
71887: LD_INT 1
71889: DOUBLE
71890: EQUAL
71891: IFTRUE 71895
71893: GO 71951
71895: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71896: LD_ADDR_VAR 0 9
71900: PUSH
71901: LD_VAR 0 11
71905: PUSH
71906: LD_VAR 0 12
71910: PUSH
71911: LD_VAR 0 13
71915: PUSH
71916: LD_VAR 0 14
71920: PUSH
71921: LD_VAR 0 15
71925: PUSH
71926: LD_VAR 0 16
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: PUSH
71939: LD_VAR 0 4
71943: PUSH
71944: LD_INT 1
71946: PLUS
71947: ARRAY
71948: ST_TO_ADDR
71949: GO 72080
71951: LD_INT 2
71953: DOUBLE
71954: EQUAL
71955: IFTRUE 71959
71957: GO 72015
71959: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71960: LD_ADDR_VAR 0 9
71964: PUSH
71965: LD_VAR 0 17
71969: PUSH
71970: LD_VAR 0 18
71974: PUSH
71975: LD_VAR 0 19
71979: PUSH
71980: LD_VAR 0 20
71984: PUSH
71985: LD_VAR 0 21
71989: PUSH
71990: LD_VAR 0 22
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: PUSH
72003: LD_VAR 0 4
72007: PUSH
72008: LD_INT 1
72010: PLUS
72011: ARRAY
72012: ST_TO_ADDR
72013: GO 72080
72015: LD_INT 3
72017: DOUBLE
72018: EQUAL
72019: IFTRUE 72023
72021: GO 72079
72023: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72024: LD_ADDR_VAR 0 9
72028: PUSH
72029: LD_VAR 0 23
72033: PUSH
72034: LD_VAR 0 24
72038: PUSH
72039: LD_VAR 0 25
72043: PUSH
72044: LD_VAR 0 26
72048: PUSH
72049: LD_VAR 0 27
72053: PUSH
72054: LD_VAR 0 28
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: PUSH
72067: LD_VAR 0 4
72071: PUSH
72072: LD_INT 1
72074: PLUS
72075: ARRAY
72076: ST_TO_ADDR
72077: GO 72080
72079: POP
72080: GO 72635
72082: LD_INT 2
72084: DOUBLE
72085: EQUAL
72086: IFTRUE 72096
72088: LD_INT 3
72090: DOUBLE
72091: EQUAL
72092: IFTRUE 72096
72094: GO 72152
72096: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72097: LD_ADDR_VAR 0 9
72101: PUSH
72102: LD_VAR 0 29
72106: PUSH
72107: LD_VAR 0 30
72111: PUSH
72112: LD_VAR 0 31
72116: PUSH
72117: LD_VAR 0 32
72121: PUSH
72122: LD_VAR 0 33
72126: PUSH
72127: LD_VAR 0 34
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: PUSH
72140: LD_VAR 0 4
72144: PUSH
72145: LD_INT 1
72147: PLUS
72148: ARRAY
72149: ST_TO_ADDR
72150: GO 72635
72152: LD_INT 16
72154: DOUBLE
72155: EQUAL
72156: IFTRUE 72214
72158: LD_INT 17
72160: DOUBLE
72161: EQUAL
72162: IFTRUE 72214
72164: LD_INT 18
72166: DOUBLE
72167: EQUAL
72168: IFTRUE 72214
72170: LD_INT 19
72172: DOUBLE
72173: EQUAL
72174: IFTRUE 72214
72176: LD_INT 22
72178: DOUBLE
72179: EQUAL
72180: IFTRUE 72214
72182: LD_INT 20
72184: DOUBLE
72185: EQUAL
72186: IFTRUE 72214
72188: LD_INT 21
72190: DOUBLE
72191: EQUAL
72192: IFTRUE 72214
72194: LD_INT 23
72196: DOUBLE
72197: EQUAL
72198: IFTRUE 72214
72200: LD_INT 24
72202: DOUBLE
72203: EQUAL
72204: IFTRUE 72214
72206: LD_INT 25
72208: DOUBLE
72209: EQUAL
72210: IFTRUE 72214
72212: GO 72270
72214: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72215: LD_ADDR_VAR 0 9
72219: PUSH
72220: LD_VAR 0 35
72224: PUSH
72225: LD_VAR 0 36
72229: PUSH
72230: LD_VAR 0 37
72234: PUSH
72235: LD_VAR 0 38
72239: PUSH
72240: LD_VAR 0 39
72244: PUSH
72245: LD_VAR 0 40
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: PUSH
72258: LD_VAR 0 4
72262: PUSH
72263: LD_INT 1
72265: PLUS
72266: ARRAY
72267: ST_TO_ADDR
72268: GO 72635
72270: LD_INT 6
72272: DOUBLE
72273: EQUAL
72274: IFTRUE 72326
72276: LD_INT 7
72278: DOUBLE
72279: EQUAL
72280: IFTRUE 72326
72282: LD_INT 8
72284: DOUBLE
72285: EQUAL
72286: IFTRUE 72326
72288: LD_INT 13
72290: DOUBLE
72291: EQUAL
72292: IFTRUE 72326
72294: LD_INT 12
72296: DOUBLE
72297: EQUAL
72298: IFTRUE 72326
72300: LD_INT 15
72302: DOUBLE
72303: EQUAL
72304: IFTRUE 72326
72306: LD_INT 11
72308: DOUBLE
72309: EQUAL
72310: IFTRUE 72326
72312: LD_INT 14
72314: DOUBLE
72315: EQUAL
72316: IFTRUE 72326
72318: LD_INT 10
72320: DOUBLE
72321: EQUAL
72322: IFTRUE 72326
72324: GO 72382
72326: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72327: LD_ADDR_VAR 0 9
72331: PUSH
72332: LD_VAR 0 41
72336: PUSH
72337: LD_VAR 0 42
72341: PUSH
72342: LD_VAR 0 43
72346: PUSH
72347: LD_VAR 0 44
72351: PUSH
72352: LD_VAR 0 45
72356: PUSH
72357: LD_VAR 0 46
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: PUSH
72370: LD_VAR 0 4
72374: PUSH
72375: LD_INT 1
72377: PLUS
72378: ARRAY
72379: ST_TO_ADDR
72380: GO 72635
72382: LD_INT 36
72384: DOUBLE
72385: EQUAL
72386: IFTRUE 72390
72388: GO 72446
72390: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72391: LD_ADDR_VAR 0 9
72395: PUSH
72396: LD_VAR 0 47
72400: PUSH
72401: LD_VAR 0 48
72405: PUSH
72406: LD_VAR 0 49
72410: PUSH
72411: LD_VAR 0 50
72415: PUSH
72416: LD_VAR 0 51
72420: PUSH
72421: LD_VAR 0 52
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: PUSH
72434: LD_VAR 0 4
72438: PUSH
72439: LD_INT 1
72441: PLUS
72442: ARRAY
72443: ST_TO_ADDR
72444: GO 72635
72446: LD_INT 4
72448: DOUBLE
72449: EQUAL
72450: IFTRUE 72472
72452: LD_INT 5
72454: DOUBLE
72455: EQUAL
72456: IFTRUE 72472
72458: LD_INT 34
72460: DOUBLE
72461: EQUAL
72462: IFTRUE 72472
72464: LD_INT 37
72466: DOUBLE
72467: EQUAL
72468: IFTRUE 72472
72470: GO 72528
72472: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72473: LD_ADDR_VAR 0 9
72477: PUSH
72478: LD_VAR 0 53
72482: PUSH
72483: LD_VAR 0 54
72487: PUSH
72488: LD_VAR 0 55
72492: PUSH
72493: LD_VAR 0 56
72497: PUSH
72498: LD_VAR 0 57
72502: PUSH
72503: LD_VAR 0 58
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: PUSH
72516: LD_VAR 0 4
72520: PUSH
72521: LD_INT 1
72523: PLUS
72524: ARRAY
72525: ST_TO_ADDR
72526: GO 72635
72528: LD_INT 31
72530: DOUBLE
72531: EQUAL
72532: IFTRUE 72578
72534: LD_INT 32
72536: DOUBLE
72537: EQUAL
72538: IFTRUE 72578
72540: LD_INT 33
72542: DOUBLE
72543: EQUAL
72544: IFTRUE 72578
72546: LD_INT 27
72548: DOUBLE
72549: EQUAL
72550: IFTRUE 72578
72552: LD_INT 26
72554: DOUBLE
72555: EQUAL
72556: IFTRUE 72578
72558: LD_INT 28
72560: DOUBLE
72561: EQUAL
72562: IFTRUE 72578
72564: LD_INT 29
72566: DOUBLE
72567: EQUAL
72568: IFTRUE 72578
72570: LD_INT 30
72572: DOUBLE
72573: EQUAL
72574: IFTRUE 72578
72576: GO 72634
72578: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72579: LD_ADDR_VAR 0 9
72583: PUSH
72584: LD_VAR 0 59
72588: PUSH
72589: LD_VAR 0 60
72593: PUSH
72594: LD_VAR 0 61
72598: PUSH
72599: LD_VAR 0 62
72603: PUSH
72604: LD_VAR 0 63
72608: PUSH
72609: LD_VAR 0 64
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: PUSH
72622: LD_VAR 0 4
72626: PUSH
72627: LD_INT 1
72629: PLUS
72630: ARRAY
72631: ST_TO_ADDR
72632: GO 72635
72634: POP
// temp_list2 = [ ] ;
72635: LD_ADDR_VAR 0 10
72639: PUSH
72640: EMPTY
72641: ST_TO_ADDR
// for i in temp_list do
72642: LD_ADDR_VAR 0 8
72646: PUSH
72647: LD_VAR 0 9
72651: PUSH
72652: FOR_IN
72653: IFFALSE 72705
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72655: LD_ADDR_VAR 0 10
72659: PUSH
72660: LD_VAR 0 10
72664: PUSH
72665: LD_VAR 0 8
72669: PUSH
72670: LD_INT 1
72672: ARRAY
72673: PUSH
72674: LD_VAR 0 2
72678: PLUS
72679: PUSH
72680: LD_VAR 0 8
72684: PUSH
72685: LD_INT 2
72687: ARRAY
72688: PUSH
72689: LD_VAR 0 3
72693: PLUS
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: EMPTY
72700: LIST
72701: ADD
72702: ST_TO_ADDR
72703: GO 72652
72705: POP
72706: POP
// result = temp_list2 ;
72707: LD_ADDR_VAR 0 7
72711: PUSH
72712: LD_VAR 0 10
72716: ST_TO_ADDR
// end ;
72717: LD_VAR 0 7
72721: RET
// export function EnemyInRange ( unit , dist ) ; begin
72722: LD_INT 0
72724: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72725: LD_ADDR_VAR 0 3
72729: PUSH
72730: LD_VAR 0 1
72734: PPUSH
72735: CALL_OW 255
72739: PPUSH
72740: LD_VAR 0 1
72744: PPUSH
72745: CALL_OW 250
72749: PPUSH
72750: LD_VAR 0 1
72754: PPUSH
72755: CALL_OW 251
72759: PPUSH
72760: LD_VAR 0 2
72764: PPUSH
72765: CALL 46124 0 4
72769: PUSH
72770: LD_INT 4
72772: ARRAY
72773: ST_TO_ADDR
// end ;
72774: LD_VAR 0 3
72778: RET
// export function PlayerSeeMe ( unit ) ; begin
72779: LD_INT 0
72781: PPUSH
// result := See ( your_side , unit ) ;
72782: LD_ADDR_VAR 0 2
72786: PUSH
72787: LD_OWVAR 2
72791: PPUSH
72792: LD_VAR 0 1
72796: PPUSH
72797: CALL_OW 292
72801: ST_TO_ADDR
// end ;
72802: LD_VAR 0 2
72806: RET
// export function ReverseDir ( unit ) ; begin
72807: LD_INT 0
72809: PPUSH
// if not unit then
72810: LD_VAR 0 1
72814: NOT
72815: IFFALSE 72819
// exit ;
72817: GO 72842
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72819: LD_ADDR_VAR 0 2
72823: PUSH
72824: LD_VAR 0 1
72828: PPUSH
72829: CALL_OW 254
72833: PUSH
72834: LD_INT 3
72836: PLUS
72837: PUSH
72838: LD_INT 6
72840: MOD
72841: ST_TO_ADDR
// end ;
72842: LD_VAR 0 2
72846: RET
// export function ReverseArray ( array ) ; var i ; begin
72847: LD_INT 0
72849: PPUSH
72850: PPUSH
// if not array then
72851: LD_VAR 0 1
72855: NOT
72856: IFFALSE 72860
// exit ;
72858: GO 72915
// result := [ ] ;
72860: LD_ADDR_VAR 0 2
72864: PUSH
72865: EMPTY
72866: ST_TO_ADDR
// for i := array downto 1 do
72867: LD_ADDR_VAR 0 3
72871: PUSH
72872: DOUBLE
72873: LD_VAR 0 1
72877: INC
72878: ST_TO_ADDR
72879: LD_INT 1
72881: PUSH
72882: FOR_DOWNTO
72883: IFFALSE 72913
// result := Join ( result , array [ i ] ) ;
72885: LD_ADDR_VAR 0 2
72889: PUSH
72890: LD_VAR 0 2
72894: PPUSH
72895: LD_VAR 0 1
72899: PUSH
72900: LD_VAR 0 3
72904: ARRAY
72905: PPUSH
72906: CALL 77558 0 2
72910: ST_TO_ADDR
72911: GO 72882
72913: POP
72914: POP
// end ;
72915: LD_VAR 0 2
72919: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72920: LD_INT 0
72922: PPUSH
72923: PPUSH
72924: PPUSH
72925: PPUSH
72926: PPUSH
72927: PPUSH
// if not unit or not hexes then
72928: LD_VAR 0 1
72932: NOT
72933: PUSH
72934: LD_VAR 0 2
72938: NOT
72939: OR
72940: IFFALSE 72944
// exit ;
72942: GO 73067
// dist := 9999 ;
72944: LD_ADDR_VAR 0 5
72948: PUSH
72949: LD_INT 9999
72951: ST_TO_ADDR
// for i = 1 to hexes do
72952: LD_ADDR_VAR 0 4
72956: PUSH
72957: DOUBLE
72958: LD_INT 1
72960: DEC
72961: ST_TO_ADDR
72962: LD_VAR 0 2
72966: PUSH
72967: FOR_TO
72968: IFFALSE 73055
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72970: LD_ADDR_VAR 0 6
72974: PUSH
72975: LD_VAR 0 1
72979: PPUSH
72980: LD_VAR 0 2
72984: PUSH
72985: LD_VAR 0 4
72989: ARRAY
72990: PUSH
72991: LD_INT 1
72993: ARRAY
72994: PPUSH
72995: LD_VAR 0 2
72999: PUSH
73000: LD_VAR 0 4
73004: ARRAY
73005: PUSH
73006: LD_INT 2
73008: ARRAY
73009: PPUSH
73010: CALL_OW 297
73014: ST_TO_ADDR
// if tdist < dist then
73015: LD_VAR 0 6
73019: PUSH
73020: LD_VAR 0 5
73024: LESS
73025: IFFALSE 73053
// begin hex := hexes [ i ] ;
73027: LD_ADDR_VAR 0 8
73031: PUSH
73032: LD_VAR 0 2
73036: PUSH
73037: LD_VAR 0 4
73041: ARRAY
73042: ST_TO_ADDR
// dist := tdist ;
73043: LD_ADDR_VAR 0 5
73047: PUSH
73048: LD_VAR 0 6
73052: ST_TO_ADDR
// end ; end ;
73053: GO 72967
73055: POP
73056: POP
// result := hex ;
73057: LD_ADDR_VAR 0 3
73061: PUSH
73062: LD_VAR 0 8
73066: ST_TO_ADDR
// end ;
73067: LD_VAR 0 3
73071: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73072: LD_INT 0
73074: PPUSH
73075: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73076: LD_VAR 0 1
73080: NOT
73081: PUSH
73082: LD_VAR 0 1
73086: PUSH
73087: LD_INT 21
73089: PUSH
73090: LD_INT 2
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 23
73099: PUSH
73100: LD_INT 2
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PPUSH
73111: CALL_OW 69
73115: IN
73116: NOT
73117: OR
73118: IFFALSE 73122
// exit ;
73120: GO 73169
// for i = 1 to 3 do
73122: LD_ADDR_VAR 0 3
73126: PUSH
73127: DOUBLE
73128: LD_INT 1
73130: DEC
73131: ST_TO_ADDR
73132: LD_INT 3
73134: PUSH
73135: FOR_TO
73136: IFFALSE 73167
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73138: LD_VAR 0 1
73142: PPUSH
73143: CALL_OW 250
73147: PPUSH
73148: LD_VAR 0 1
73152: PPUSH
73153: CALL_OW 251
73157: PPUSH
73158: LD_INT 1
73160: PPUSH
73161: CALL_OW 453
73165: GO 73135
73167: POP
73168: POP
// end ;
73169: LD_VAR 0 2
73173: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73174: LD_INT 0
73176: PPUSH
73177: PPUSH
73178: PPUSH
73179: PPUSH
73180: PPUSH
73181: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73182: LD_VAR 0 1
73186: NOT
73187: PUSH
73188: LD_VAR 0 2
73192: NOT
73193: OR
73194: PUSH
73195: LD_VAR 0 1
73199: PPUSH
73200: CALL_OW 314
73204: OR
73205: IFFALSE 73209
// exit ;
73207: GO 73676
// if GetLives ( i ) < 250 then
73209: LD_VAR 0 4
73213: PPUSH
73214: CALL_OW 256
73218: PUSH
73219: LD_INT 250
73221: LESS
73222: IFFALSE 73235
// begin ComAutodestruct ( i ) ;
73224: LD_VAR 0 4
73228: PPUSH
73229: CALL 73072 0 1
// exit ;
73233: GO 73676
// end ; x := GetX ( enemy_unit ) ;
73235: LD_ADDR_VAR 0 7
73239: PUSH
73240: LD_VAR 0 2
73244: PPUSH
73245: CALL_OW 250
73249: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73250: LD_ADDR_VAR 0 8
73254: PUSH
73255: LD_VAR 0 2
73259: PPUSH
73260: CALL_OW 251
73264: ST_TO_ADDR
// if not x or not y then
73265: LD_VAR 0 7
73269: NOT
73270: PUSH
73271: LD_VAR 0 8
73275: NOT
73276: OR
73277: IFFALSE 73281
// exit ;
73279: GO 73676
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73281: LD_ADDR_VAR 0 6
73285: PUSH
73286: LD_VAR 0 7
73290: PPUSH
73291: LD_INT 0
73293: PPUSH
73294: LD_INT 4
73296: PPUSH
73297: CALL_OW 272
73301: PUSH
73302: LD_VAR 0 8
73306: PPUSH
73307: LD_INT 0
73309: PPUSH
73310: LD_INT 4
73312: PPUSH
73313: CALL_OW 273
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_VAR 0 7
73326: PPUSH
73327: LD_INT 1
73329: PPUSH
73330: LD_INT 4
73332: PPUSH
73333: CALL_OW 272
73337: PUSH
73338: LD_VAR 0 8
73342: PPUSH
73343: LD_INT 1
73345: PPUSH
73346: LD_INT 4
73348: PPUSH
73349: CALL_OW 273
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_VAR 0 7
73362: PPUSH
73363: LD_INT 2
73365: PPUSH
73366: LD_INT 4
73368: PPUSH
73369: CALL_OW 272
73373: PUSH
73374: LD_VAR 0 8
73378: PPUSH
73379: LD_INT 2
73381: PPUSH
73382: LD_INT 4
73384: PPUSH
73385: CALL_OW 273
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_VAR 0 7
73398: PPUSH
73399: LD_INT 3
73401: PPUSH
73402: LD_INT 4
73404: PPUSH
73405: CALL_OW 272
73409: PUSH
73410: LD_VAR 0 8
73414: PPUSH
73415: LD_INT 3
73417: PPUSH
73418: LD_INT 4
73420: PPUSH
73421: CALL_OW 273
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_VAR 0 7
73434: PPUSH
73435: LD_INT 4
73437: PPUSH
73438: LD_INT 4
73440: PPUSH
73441: CALL_OW 272
73445: PUSH
73446: LD_VAR 0 8
73450: PPUSH
73451: LD_INT 4
73453: PPUSH
73454: LD_INT 4
73456: PPUSH
73457: CALL_OW 273
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_VAR 0 7
73470: PPUSH
73471: LD_INT 5
73473: PPUSH
73474: LD_INT 4
73476: PPUSH
73477: CALL_OW 272
73481: PUSH
73482: LD_VAR 0 8
73486: PPUSH
73487: LD_INT 5
73489: PPUSH
73490: LD_INT 4
73492: PPUSH
73493: CALL_OW 273
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: ST_TO_ADDR
// for i = tmp downto 1 do
73510: LD_ADDR_VAR 0 4
73514: PUSH
73515: DOUBLE
73516: LD_VAR 0 6
73520: INC
73521: ST_TO_ADDR
73522: LD_INT 1
73524: PUSH
73525: FOR_DOWNTO
73526: IFFALSE 73627
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73528: LD_VAR 0 6
73532: PUSH
73533: LD_VAR 0 4
73537: ARRAY
73538: PUSH
73539: LD_INT 1
73541: ARRAY
73542: PPUSH
73543: LD_VAR 0 6
73547: PUSH
73548: LD_VAR 0 4
73552: ARRAY
73553: PUSH
73554: LD_INT 2
73556: ARRAY
73557: PPUSH
73558: CALL_OW 488
73562: NOT
73563: PUSH
73564: LD_VAR 0 6
73568: PUSH
73569: LD_VAR 0 4
73573: ARRAY
73574: PUSH
73575: LD_INT 1
73577: ARRAY
73578: PPUSH
73579: LD_VAR 0 6
73583: PUSH
73584: LD_VAR 0 4
73588: ARRAY
73589: PUSH
73590: LD_INT 2
73592: ARRAY
73593: PPUSH
73594: CALL_OW 428
73598: PUSH
73599: LD_INT 0
73601: NONEQUAL
73602: OR
73603: IFFALSE 73625
// tmp := Delete ( tmp , i ) ;
73605: LD_ADDR_VAR 0 6
73609: PUSH
73610: LD_VAR 0 6
73614: PPUSH
73615: LD_VAR 0 4
73619: PPUSH
73620: CALL_OW 3
73624: ST_TO_ADDR
73625: GO 73525
73627: POP
73628: POP
// j := GetClosestHex ( unit , tmp ) ;
73629: LD_ADDR_VAR 0 5
73633: PUSH
73634: LD_VAR 0 1
73638: PPUSH
73639: LD_VAR 0 6
73643: PPUSH
73644: CALL 72920 0 2
73648: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73649: LD_VAR 0 1
73653: PPUSH
73654: LD_VAR 0 5
73658: PUSH
73659: LD_INT 1
73661: ARRAY
73662: PPUSH
73663: LD_VAR 0 5
73667: PUSH
73668: LD_INT 2
73670: ARRAY
73671: PPUSH
73672: CALL_OW 111
// end ;
73676: LD_VAR 0 3
73680: RET
// export function PrepareApemanSoldier ( ) ; begin
73681: LD_INT 0
73683: PPUSH
// uc_nation := 0 ;
73684: LD_ADDR_OWVAR 21
73688: PUSH
73689: LD_INT 0
73691: ST_TO_ADDR
// hc_sex := sex_male ;
73692: LD_ADDR_OWVAR 27
73696: PUSH
73697: LD_INT 1
73699: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73700: LD_ADDR_OWVAR 28
73704: PUSH
73705: LD_INT 15
73707: ST_TO_ADDR
// hc_gallery :=  ;
73708: LD_ADDR_OWVAR 33
73712: PUSH
73713: LD_STRING 
73715: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73716: LD_ADDR_OWVAR 31
73720: PUSH
73721: LD_INT 0
73723: PPUSH
73724: LD_INT 3
73726: PPUSH
73727: CALL_OW 12
73731: PUSH
73732: LD_INT 0
73734: PPUSH
73735: LD_INT 3
73737: PPUSH
73738: CALL_OW 12
73742: PUSH
73743: LD_INT 0
73745: PUSH
73746: LD_INT 0
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: ST_TO_ADDR
// end ;
73755: LD_VAR 0 1
73759: RET
// export function PrepareApemanEngineer ( ) ; begin
73760: LD_INT 0
73762: PPUSH
// uc_nation := 0 ;
73763: LD_ADDR_OWVAR 21
73767: PUSH
73768: LD_INT 0
73770: ST_TO_ADDR
// hc_sex := sex_male ;
73771: LD_ADDR_OWVAR 27
73775: PUSH
73776: LD_INT 1
73778: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73779: LD_ADDR_OWVAR 28
73783: PUSH
73784: LD_INT 16
73786: ST_TO_ADDR
// hc_gallery :=  ;
73787: LD_ADDR_OWVAR 33
73791: PUSH
73792: LD_STRING 
73794: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73795: LD_ADDR_OWVAR 31
73799: PUSH
73800: LD_INT 0
73802: PPUSH
73803: LD_INT 3
73805: PPUSH
73806: CALL_OW 12
73810: PUSH
73811: LD_INT 0
73813: PPUSH
73814: LD_INT 3
73816: PPUSH
73817: CALL_OW 12
73821: PUSH
73822: LD_INT 0
73824: PUSH
73825: LD_INT 0
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: ST_TO_ADDR
// end ;
73834: LD_VAR 0 1
73838: RET
// export function PrepareApeman ( agressivity ) ; begin
73839: LD_INT 0
73841: PPUSH
// uc_side := 0 ;
73842: LD_ADDR_OWVAR 20
73846: PUSH
73847: LD_INT 0
73849: ST_TO_ADDR
// uc_nation := 0 ;
73850: LD_ADDR_OWVAR 21
73854: PUSH
73855: LD_INT 0
73857: ST_TO_ADDR
// hc_sex := sex_male ;
73858: LD_ADDR_OWVAR 27
73862: PUSH
73863: LD_INT 1
73865: ST_TO_ADDR
// hc_class := class_apeman ;
73866: LD_ADDR_OWVAR 28
73870: PUSH
73871: LD_INT 12
73873: ST_TO_ADDR
// hc_gallery :=  ;
73874: LD_ADDR_OWVAR 33
73878: PUSH
73879: LD_STRING 
73881: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73882: LD_ADDR_OWVAR 35
73886: PUSH
73887: LD_VAR 0 1
73891: NEG
73892: PPUSH
73893: LD_VAR 0 1
73897: PPUSH
73898: CALL_OW 12
73902: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73903: LD_ADDR_OWVAR 31
73907: PUSH
73908: LD_INT 0
73910: PPUSH
73911: LD_INT 3
73913: PPUSH
73914: CALL_OW 12
73918: PUSH
73919: LD_INT 0
73921: PPUSH
73922: LD_INT 3
73924: PPUSH
73925: CALL_OW 12
73929: PUSH
73930: LD_INT 0
73932: PUSH
73933: LD_INT 0
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: ST_TO_ADDR
// end ;
73942: LD_VAR 0 2
73946: RET
// export function PrepareTiger ( agressivity ) ; begin
73947: LD_INT 0
73949: PPUSH
// uc_side := 0 ;
73950: LD_ADDR_OWVAR 20
73954: PUSH
73955: LD_INT 0
73957: ST_TO_ADDR
// uc_nation := 0 ;
73958: LD_ADDR_OWVAR 21
73962: PUSH
73963: LD_INT 0
73965: ST_TO_ADDR
// hc_class := class_tiger ;
73966: LD_ADDR_OWVAR 28
73970: PUSH
73971: LD_INT 14
73973: ST_TO_ADDR
// hc_gallery :=  ;
73974: LD_ADDR_OWVAR 33
73978: PUSH
73979: LD_STRING 
73981: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73982: LD_ADDR_OWVAR 35
73986: PUSH
73987: LD_VAR 0 1
73991: NEG
73992: PPUSH
73993: LD_VAR 0 1
73997: PPUSH
73998: CALL_OW 12
74002: ST_TO_ADDR
// end ;
74003: LD_VAR 0 2
74007: RET
// export function PrepareEnchidna ( ) ; begin
74008: LD_INT 0
74010: PPUSH
// uc_side := 0 ;
74011: LD_ADDR_OWVAR 20
74015: PUSH
74016: LD_INT 0
74018: ST_TO_ADDR
// uc_nation := 0 ;
74019: LD_ADDR_OWVAR 21
74023: PUSH
74024: LD_INT 0
74026: ST_TO_ADDR
// hc_class := class_baggie ;
74027: LD_ADDR_OWVAR 28
74031: PUSH
74032: LD_INT 13
74034: ST_TO_ADDR
// hc_gallery :=  ;
74035: LD_ADDR_OWVAR 33
74039: PUSH
74040: LD_STRING 
74042: ST_TO_ADDR
// end ;
74043: LD_VAR 0 1
74047: RET
// export function PrepareFrog ( ) ; begin
74048: LD_INT 0
74050: PPUSH
// uc_side := 0 ;
74051: LD_ADDR_OWVAR 20
74055: PUSH
74056: LD_INT 0
74058: ST_TO_ADDR
// uc_nation := 0 ;
74059: LD_ADDR_OWVAR 21
74063: PUSH
74064: LD_INT 0
74066: ST_TO_ADDR
// hc_class := class_frog ;
74067: LD_ADDR_OWVAR 28
74071: PUSH
74072: LD_INT 19
74074: ST_TO_ADDR
// hc_gallery :=  ;
74075: LD_ADDR_OWVAR 33
74079: PUSH
74080: LD_STRING 
74082: ST_TO_ADDR
// end ;
74083: LD_VAR 0 1
74087: RET
// export function PrepareFish ( ) ; begin
74088: LD_INT 0
74090: PPUSH
// uc_side := 0 ;
74091: LD_ADDR_OWVAR 20
74095: PUSH
74096: LD_INT 0
74098: ST_TO_ADDR
// uc_nation := 0 ;
74099: LD_ADDR_OWVAR 21
74103: PUSH
74104: LD_INT 0
74106: ST_TO_ADDR
// hc_class := class_fish ;
74107: LD_ADDR_OWVAR 28
74111: PUSH
74112: LD_INT 20
74114: ST_TO_ADDR
// hc_gallery :=  ;
74115: LD_ADDR_OWVAR 33
74119: PUSH
74120: LD_STRING 
74122: ST_TO_ADDR
// end ;
74123: LD_VAR 0 1
74127: RET
// export function PrepareBird ( ) ; begin
74128: LD_INT 0
74130: PPUSH
// uc_side := 0 ;
74131: LD_ADDR_OWVAR 20
74135: PUSH
74136: LD_INT 0
74138: ST_TO_ADDR
// uc_nation := 0 ;
74139: LD_ADDR_OWVAR 21
74143: PUSH
74144: LD_INT 0
74146: ST_TO_ADDR
// hc_class := class_phororhacos ;
74147: LD_ADDR_OWVAR 28
74151: PUSH
74152: LD_INT 18
74154: ST_TO_ADDR
// hc_gallery :=  ;
74155: LD_ADDR_OWVAR 33
74159: PUSH
74160: LD_STRING 
74162: ST_TO_ADDR
// end ;
74163: LD_VAR 0 1
74167: RET
// export function PrepareHorse ( ) ; begin
74168: LD_INT 0
74170: PPUSH
// uc_side := 0 ;
74171: LD_ADDR_OWVAR 20
74175: PUSH
74176: LD_INT 0
74178: ST_TO_ADDR
// uc_nation := 0 ;
74179: LD_ADDR_OWVAR 21
74183: PUSH
74184: LD_INT 0
74186: ST_TO_ADDR
// hc_class := class_horse ;
74187: LD_ADDR_OWVAR 28
74191: PUSH
74192: LD_INT 21
74194: ST_TO_ADDR
// hc_gallery :=  ;
74195: LD_ADDR_OWVAR 33
74199: PUSH
74200: LD_STRING 
74202: ST_TO_ADDR
// end ;
74203: LD_VAR 0 1
74207: RET
// export function PrepareMastodont ( ) ; begin
74208: LD_INT 0
74210: PPUSH
// uc_side := 0 ;
74211: LD_ADDR_OWVAR 20
74215: PUSH
74216: LD_INT 0
74218: ST_TO_ADDR
// uc_nation := 0 ;
74219: LD_ADDR_OWVAR 21
74223: PUSH
74224: LD_INT 0
74226: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74227: LD_ADDR_OWVAR 37
74231: PUSH
74232: LD_INT 31
74234: ST_TO_ADDR
// vc_control := control_rider ;
74235: LD_ADDR_OWVAR 38
74239: PUSH
74240: LD_INT 4
74242: ST_TO_ADDR
// end ;
74243: LD_VAR 0 1
74247: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74248: LD_INT 0
74250: PPUSH
74251: PPUSH
74252: PPUSH
// uc_side = 0 ;
74253: LD_ADDR_OWVAR 20
74257: PUSH
74258: LD_INT 0
74260: ST_TO_ADDR
// uc_nation = 0 ;
74261: LD_ADDR_OWVAR 21
74265: PUSH
74266: LD_INT 0
74268: ST_TO_ADDR
// InitHc_All ( ) ;
74269: CALL_OW 584
// InitVc ;
74273: CALL_OW 20
// if mastodonts then
74277: LD_VAR 0 6
74281: IFFALSE 74348
// for i = 1 to mastodonts do
74283: LD_ADDR_VAR 0 11
74287: PUSH
74288: DOUBLE
74289: LD_INT 1
74291: DEC
74292: ST_TO_ADDR
74293: LD_VAR 0 6
74297: PUSH
74298: FOR_TO
74299: IFFALSE 74346
// begin vc_chassis := 31 ;
74301: LD_ADDR_OWVAR 37
74305: PUSH
74306: LD_INT 31
74308: ST_TO_ADDR
// vc_control := control_rider ;
74309: LD_ADDR_OWVAR 38
74313: PUSH
74314: LD_INT 4
74316: ST_TO_ADDR
// animal := CreateVehicle ;
74317: LD_ADDR_VAR 0 12
74321: PUSH
74322: CALL_OW 45
74326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74327: LD_VAR 0 12
74331: PPUSH
74332: LD_VAR 0 8
74336: PPUSH
74337: LD_INT 0
74339: PPUSH
74340: CALL 76476 0 3
// end ;
74344: GO 74298
74346: POP
74347: POP
// if horses then
74348: LD_VAR 0 5
74352: IFFALSE 74419
// for i = 1 to horses do
74354: LD_ADDR_VAR 0 11
74358: PUSH
74359: DOUBLE
74360: LD_INT 1
74362: DEC
74363: ST_TO_ADDR
74364: LD_VAR 0 5
74368: PUSH
74369: FOR_TO
74370: IFFALSE 74417
// begin hc_class := 21 ;
74372: LD_ADDR_OWVAR 28
74376: PUSH
74377: LD_INT 21
74379: ST_TO_ADDR
// hc_gallery :=  ;
74380: LD_ADDR_OWVAR 33
74384: PUSH
74385: LD_STRING 
74387: ST_TO_ADDR
// animal := CreateHuman ;
74388: LD_ADDR_VAR 0 12
74392: PUSH
74393: CALL_OW 44
74397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74398: LD_VAR 0 12
74402: PPUSH
74403: LD_VAR 0 8
74407: PPUSH
74408: LD_INT 0
74410: PPUSH
74411: CALL 76476 0 3
// end ;
74415: GO 74369
74417: POP
74418: POP
// if birds then
74419: LD_VAR 0 1
74423: IFFALSE 74490
// for i = 1 to birds do
74425: LD_ADDR_VAR 0 11
74429: PUSH
74430: DOUBLE
74431: LD_INT 1
74433: DEC
74434: ST_TO_ADDR
74435: LD_VAR 0 1
74439: PUSH
74440: FOR_TO
74441: IFFALSE 74488
// begin hc_class = 18 ;
74443: LD_ADDR_OWVAR 28
74447: PUSH
74448: LD_INT 18
74450: ST_TO_ADDR
// hc_gallery =  ;
74451: LD_ADDR_OWVAR 33
74455: PUSH
74456: LD_STRING 
74458: ST_TO_ADDR
// animal := CreateHuman ;
74459: LD_ADDR_VAR 0 12
74463: PUSH
74464: CALL_OW 44
74468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74469: LD_VAR 0 12
74473: PPUSH
74474: LD_VAR 0 8
74478: PPUSH
74479: LD_INT 0
74481: PPUSH
74482: CALL 76476 0 3
// end ;
74486: GO 74440
74488: POP
74489: POP
// if tigers then
74490: LD_VAR 0 2
74494: IFFALSE 74578
// for i = 1 to tigers do
74496: LD_ADDR_VAR 0 11
74500: PUSH
74501: DOUBLE
74502: LD_INT 1
74504: DEC
74505: ST_TO_ADDR
74506: LD_VAR 0 2
74510: PUSH
74511: FOR_TO
74512: IFFALSE 74576
// begin hc_class = class_tiger ;
74514: LD_ADDR_OWVAR 28
74518: PUSH
74519: LD_INT 14
74521: ST_TO_ADDR
// hc_gallery =  ;
74522: LD_ADDR_OWVAR 33
74526: PUSH
74527: LD_STRING 
74529: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74530: LD_ADDR_OWVAR 35
74534: PUSH
74535: LD_INT 7
74537: NEG
74538: PPUSH
74539: LD_INT 7
74541: PPUSH
74542: CALL_OW 12
74546: ST_TO_ADDR
// animal := CreateHuman ;
74547: LD_ADDR_VAR 0 12
74551: PUSH
74552: CALL_OW 44
74556: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74557: LD_VAR 0 12
74561: PPUSH
74562: LD_VAR 0 8
74566: PPUSH
74567: LD_INT 0
74569: PPUSH
74570: CALL 76476 0 3
// end ;
74574: GO 74511
74576: POP
74577: POP
// if apemans then
74578: LD_VAR 0 3
74582: IFFALSE 74705
// for i = 1 to apemans do
74584: LD_ADDR_VAR 0 11
74588: PUSH
74589: DOUBLE
74590: LD_INT 1
74592: DEC
74593: ST_TO_ADDR
74594: LD_VAR 0 3
74598: PUSH
74599: FOR_TO
74600: IFFALSE 74703
// begin hc_class = class_apeman ;
74602: LD_ADDR_OWVAR 28
74606: PUSH
74607: LD_INT 12
74609: ST_TO_ADDR
// hc_gallery =  ;
74610: LD_ADDR_OWVAR 33
74614: PUSH
74615: LD_STRING 
74617: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74618: LD_ADDR_OWVAR 35
74622: PUSH
74623: LD_INT 2
74625: NEG
74626: PPUSH
74627: LD_INT 2
74629: PPUSH
74630: CALL_OW 12
74634: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74635: LD_ADDR_OWVAR 31
74639: PUSH
74640: LD_INT 1
74642: PPUSH
74643: LD_INT 3
74645: PPUSH
74646: CALL_OW 12
74650: PUSH
74651: LD_INT 1
74653: PPUSH
74654: LD_INT 3
74656: PPUSH
74657: CALL_OW 12
74661: PUSH
74662: LD_INT 0
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: ST_TO_ADDR
// animal := CreateHuman ;
74674: LD_ADDR_VAR 0 12
74678: PUSH
74679: CALL_OW 44
74683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74684: LD_VAR 0 12
74688: PPUSH
74689: LD_VAR 0 8
74693: PPUSH
74694: LD_INT 0
74696: PPUSH
74697: CALL 76476 0 3
// end ;
74701: GO 74599
74703: POP
74704: POP
// if enchidnas then
74705: LD_VAR 0 4
74709: IFFALSE 74776
// for i = 1 to enchidnas do
74711: LD_ADDR_VAR 0 11
74715: PUSH
74716: DOUBLE
74717: LD_INT 1
74719: DEC
74720: ST_TO_ADDR
74721: LD_VAR 0 4
74725: PUSH
74726: FOR_TO
74727: IFFALSE 74774
// begin hc_class = 13 ;
74729: LD_ADDR_OWVAR 28
74733: PUSH
74734: LD_INT 13
74736: ST_TO_ADDR
// hc_gallery =  ;
74737: LD_ADDR_OWVAR 33
74741: PUSH
74742: LD_STRING 
74744: ST_TO_ADDR
// animal := CreateHuman ;
74745: LD_ADDR_VAR 0 12
74749: PUSH
74750: CALL_OW 44
74754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74755: LD_VAR 0 12
74759: PPUSH
74760: LD_VAR 0 8
74764: PPUSH
74765: LD_INT 0
74767: PPUSH
74768: CALL 76476 0 3
// end ;
74772: GO 74726
74774: POP
74775: POP
// if fishes then
74776: LD_VAR 0 7
74780: IFFALSE 74847
// for i = 1 to fishes do
74782: LD_ADDR_VAR 0 11
74786: PUSH
74787: DOUBLE
74788: LD_INT 1
74790: DEC
74791: ST_TO_ADDR
74792: LD_VAR 0 7
74796: PUSH
74797: FOR_TO
74798: IFFALSE 74845
// begin hc_class = 20 ;
74800: LD_ADDR_OWVAR 28
74804: PUSH
74805: LD_INT 20
74807: ST_TO_ADDR
// hc_gallery =  ;
74808: LD_ADDR_OWVAR 33
74812: PUSH
74813: LD_STRING 
74815: ST_TO_ADDR
// animal := CreateHuman ;
74816: LD_ADDR_VAR 0 12
74820: PUSH
74821: CALL_OW 44
74825: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74826: LD_VAR 0 12
74830: PPUSH
74831: LD_VAR 0 9
74835: PPUSH
74836: LD_INT 0
74838: PPUSH
74839: CALL 76476 0 3
// end ;
74843: GO 74797
74845: POP
74846: POP
// end ;
74847: LD_VAR 0 10
74851: RET
// export function WantHeal ( sci , unit ) ; begin
74852: LD_INT 0
74854: PPUSH
// if GetTaskList ( sci ) > 0 then
74855: LD_VAR 0 1
74859: PPUSH
74860: CALL_OW 437
74864: PUSH
74865: LD_INT 0
74867: GREATER
74868: IFFALSE 74938
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74870: LD_VAR 0 1
74874: PPUSH
74875: CALL_OW 437
74879: PUSH
74880: LD_INT 1
74882: ARRAY
74883: PUSH
74884: LD_INT 1
74886: ARRAY
74887: PUSH
74888: LD_STRING l
74890: EQUAL
74891: PUSH
74892: LD_VAR 0 1
74896: PPUSH
74897: CALL_OW 437
74901: PUSH
74902: LD_INT 1
74904: ARRAY
74905: PUSH
74906: LD_INT 4
74908: ARRAY
74909: PUSH
74910: LD_VAR 0 2
74914: EQUAL
74915: AND
74916: IFFALSE 74928
// result := true else
74918: LD_ADDR_VAR 0 3
74922: PUSH
74923: LD_INT 1
74925: ST_TO_ADDR
74926: GO 74936
// result := false ;
74928: LD_ADDR_VAR 0 3
74932: PUSH
74933: LD_INT 0
74935: ST_TO_ADDR
// end else
74936: GO 74946
// result := false ;
74938: LD_ADDR_VAR 0 3
74942: PUSH
74943: LD_INT 0
74945: ST_TO_ADDR
// end ;
74946: LD_VAR 0 3
74950: RET
// export function HealTarget ( sci ) ; begin
74951: LD_INT 0
74953: PPUSH
// if not sci then
74954: LD_VAR 0 1
74958: NOT
74959: IFFALSE 74963
// exit ;
74961: GO 75028
// result := 0 ;
74963: LD_ADDR_VAR 0 2
74967: PUSH
74968: LD_INT 0
74970: ST_TO_ADDR
// if GetTaskList ( sci ) then
74971: LD_VAR 0 1
74975: PPUSH
74976: CALL_OW 437
74980: IFFALSE 75028
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74982: LD_VAR 0 1
74986: PPUSH
74987: CALL_OW 437
74991: PUSH
74992: LD_INT 1
74994: ARRAY
74995: PUSH
74996: LD_INT 1
74998: ARRAY
74999: PUSH
75000: LD_STRING l
75002: EQUAL
75003: IFFALSE 75028
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75005: LD_ADDR_VAR 0 2
75009: PUSH
75010: LD_VAR 0 1
75014: PPUSH
75015: CALL_OW 437
75019: PUSH
75020: LD_INT 1
75022: ARRAY
75023: PUSH
75024: LD_INT 4
75026: ARRAY
75027: ST_TO_ADDR
// end ;
75028: LD_VAR 0 2
75032: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75033: LD_INT 0
75035: PPUSH
75036: PPUSH
75037: PPUSH
75038: PPUSH
// if not base_units then
75039: LD_VAR 0 1
75043: NOT
75044: IFFALSE 75048
// exit ;
75046: GO 75135
// result := false ;
75048: LD_ADDR_VAR 0 2
75052: PUSH
75053: LD_INT 0
75055: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75056: LD_ADDR_VAR 0 5
75060: PUSH
75061: LD_VAR 0 1
75065: PPUSH
75066: LD_INT 21
75068: PUSH
75069: LD_INT 3
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PPUSH
75076: CALL_OW 72
75080: ST_TO_ADDR
// if not tmp then
75081: LD_VAR 0 5
75085: NOT
75086: IFFALSE 75090
// exit ;
75088: GO 75135
// for i in tmp do
75090: LD_ADDR_VAR 0 3
75094: PUSH
75095: LD_VAR 0 5
75099: PUSH
75100: FOR_IN
75101: IFFALSE 75133
// begin result := EnemyInRange ( i , 22 ) ;
75103: LD_ADDR_VAR 0 2
75107: PUSH
75108: LD_VAR 0 3
75112: PPUSH
75113: LD_INT 22
75115: PPUSH
75116: CALL 72722 0 2
75120: ST_TO_ADDR
// if result then
75121: LD_VAR 0 2
75125: IFFALSE 75131
// exit ;
75127: POP
75128: POP
75129: GO 75135
// end ;
75131: GO 75100
75133: POP
75134: POP
// end ;
75135: LD_VAR 0 2
75139: RET
// export function FilterByTag ( units , tag ) ; begin
75140: LD_INT 0
75142: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75143: LD_ADDR_VAR 0 3
75147: PUSH
75148: LD_VAR 0 1
75152: PPUSH
75153: LD_INT 120
75155: PUSH
75156: LD_VAR 0 2
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PPUSH
75165: CALL_OW 72
75169: ST_TO_ADDR
// end ;
75170: LD_VAR 0 3
75174: RET
// export function IsDriver ( un ) ; begin
75175: LD_INT 0
75177: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75178: LD_ADDR_VAR 0 2
75182: PUSH
75183: LD_VAR 0 1
75187: PUSH
75188: LD_INT 55
75190: PUSH
75191: EMPTY
75192: LIST
75193: PPUSH
75194: CALL_OW 69
75198: IN
75199: ST_TO_ADDR
// end ;
75200: LD_VAR 0 2
75204: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75205: LD_INT 0
75207: PPUSH
75208: PPUSH
// list := [ ] ;
75209: LD_ADDR_VAR 0 5
75213: PUSH
75214: EMPTY
75215: ST_TO_ADDR
// case d of 0 :
75216: LD_VAR 0 3
75220: PUSH
75221: LD_INT 0
75223: DOUBLE
75224: EQUAL
75225: IFTRUE 75229
75227: GO 75362
75229: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75230: LD_ADDR_VAR 0 5
75234: PUSH
75235: LD_VAR 0 1
75239: PUSH
75240: LD_INT 4
75242: MINUS
75243: PUSH
75244: LD_VAR 0 2
75248: PUSH
75249: LD_INT 4
75251: MINUS
75252: PUSH
75253: LD_INT 2
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: PUSH
75261: LD_VAR 0 1
75265: PUSH
75266: LD_INT 3
75268: MINUS
75269: PUSH
75270: LD_VAR 0 2
75274: PUSH
75275: LD_INT 1
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: LIST
75282: PUSH
75283: LD_VAR 0 1
75287: PUSH
75288: LD_INT 4
75290: PLUS
75291: PUSH
75292: LD_VAR 0 2
75296: PUSH
75297: LD_INT 4
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: LIST
75304: PUSH
75305: LD_VAR 0 1
75309: PUSH
75310: LD_INT 3
75312: PLUS
75313: PUSH
75314: LD_VAR 0 2
75318: PUSH
75319: LD_INT 3
75321: PLUS
75322: PUSH
75323: LD_INT 5
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: LIST
75330: PUSH
75331: LD_VAR 0 1
75335: PUSH
75336: LD_VAR 0 2
75340: PUSH
75341: LD_INT 4
75343: PLUS
75344: PUSH
75345: LD_INT 0
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: LIST
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: ST_TO_ADDR
// end ; 1 :
75360: GO 76060
75362: LD_INT 1
75364: DOUBLE
75365: EQUAL
75366: IFTRUE 75370
75368: GO 75503
75370: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75371: LD_ADDR_VAR 0 5
75375: PUSH
75376: LD_VAR 0 1
75380: PUSH
75381: LD_VAR 0 2
75385: PUSH
75386: LD_INT 4
75388: MINUS
75389: PUSH
75390: LD_INT 3
75392: PUSH
75393: EMPTY
75394: LIST
75395: LIST
75396: LIST
75397: PUSH
75398: LD_VAR 0 1
75402: PUSH
75403: LD_INT 3
75405: MINUS
75406: PUSH
75407: LD_VAR 0 2
75411: PUSH
75412: LD_INT 3
75414: MINUS
75415: PUSH
75416: LD_INT 2
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: LIST
75423: PUSH
75424: LD_VAR 0 1
75428: PUSH
75429: LD_INT 4
75431: MINUS
75432: PUSH
75433: LD_VAR 0 2
75437: PUSH
75438: LD_INT 1
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: LIST
75445: PUSH
75446: LD_VAR 0 1
75450: PUSH
75451: LD_VAR 0 2
75455: PUSH
75456: LD_INT 3
75458: PLUS
75459: PUSH
75460: LD_INT 0
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: LIST
75467: PUSH
75468: LD_VAR 0 1
75472: PUSH
75473: LD_INT 4
75475: PLUS
75476: PUSH
75477: LD_VAR 0 2
75481: PUSH
75482: LD_INT 4
75484: PLUS
75485: PUSH
75486: LD_INT 5
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: LIST
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: ST_TO_ADDR
// end ; 2 :
75501: GO 76060
75503: LD_INT 2
75505: DOUBLE
75506: EQUAL
75507: IFTRUE 75511
75509: GO 75640
75511: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75512: LD_ADDR_VAR 0 5
75516: PUSH
75517: LD_VAR 0 1
75521: PUSH
75522: LD_VAR 0 2
75526: PUSH
75527: LD_INT 3
75529: MINUS
75530: PUSH
75531: LD_INT 3
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: LIST
75538: PUSH
75539: LD_VAR 0 1
75543: PUSH
75544: LD_INT 4
75546: PLUS
75547: PUSH
75548: LD_VAR 0 2
75552: PUSH
75553: LD_INT 4
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: LIST
75560: PUSH
75561: LD_VAR 0 1
75565: PUSH
75566: LD_VAR 0 2
75570: PUSH
75571: LD_INT 4
75573: PLUS
75574: PUSH
75575: LD_INT 0
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: LIST
75582: PUSH
75583: LD_VAR 0 1
75587: PUSH
75588: LD_INT 3
75590: MINUS
75591: PUSH
75592: LD_VAR 0 2
75596: PUSH
75597: LD_INT 1
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: LIST
75604: PUSH
75605: LD_VAR 0 1
75609: PUSH
75610: LD_INT 4
75612: MINUS
75613: PUSH
75614: LD_VAR 0 2
75618: PUSH
75619: LD_INT 4
75621: MINUS
75622: PUSH
75623: LD_INT 2
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: LIST
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: ST_TO_ADDR
// end ; 3 :
75638: GO 76060
75640: LD_INT 3
75642: DOUBLE
75643: EQUAL
75644: IFTRUE 75648
75646: GO 75781
75648: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75649: LD_ADDR_VAR 0 5
75653: PUSH
75654: LD_VAR 0 1
75658: PUSH
75659: LD_INT 3
75661: PLUS
75662: PUSH
75663: LD_VAR 0 2
75667: PUSH
75668: LD_INT 4
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: LIST
75675: PUSH
75676: LD_VAR 0 1
75680: PUSH
75681: LD_INT 4
75683: PLUS
75684: PUSH
75685: LD_VAR 0 2
75689: PUSH
75690: LD_INT 4
75692: PLUS
75693: PUSH
75694: LD_INT 5
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: LIST
75701: PUSH
75702: LD_VAR 0 1
75706: PUSH
75707: LD_INT 4
75709: MINUS
75710: PUSH
75711: LD_VAR 0 2
75715: PUSH
75716: LD_INT 1
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: LIST
75723: PUSH
75724: LD_VAR 0 1
75728: PUSH
75729: LD_VAR 0 2
75733: PUSH
75734: LD_INT 4
75736: MINUS
75737: PUSH
75738: LD_INT 3
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: LIST
75745: PUSH
75746: LD_VAR 0 1
75750: PUSH
75751: LD_INT 3
75753: MINUS
75754: PUSH
75755: LD_VAR 0 2
75759: PUSH
75760: LD_INT 3
75762: MINUS
75763: PUSH
75764: LD_INT 2
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: LIST
75771: PUSH
75772: EMPTY
75773: LIST
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: ST_TO_ADDR
// end ; 4 :
75779: GO 76060
75781: LD_INT 4
75783: DOUBLE
75784: EQUAL
75785: IFTRUE 75789
75787: GO 75922
75789: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75790: LD_ADDR_VAR 0 5
75794: PUSH
75795: LD_VAR 0 1
75799: PUSH
75800: LD_VAR 0 2
75804: PUSH
75805: LD_INT 4
75807: PLUS
75808: PUSH
75809: LD_INT 0
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: LIST
75816: PUSH
75817: LD_VAR 0 1
75821: PUSH
75822: LD_INT 3
75824: PLUS
75825: PUSH
75826: LD_VAR 0 2
75830: PUSH
75831: LD_INT 3
75833: PLUS
75834: PUSH
75835: LD_INT 5
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: LIST
75842: PUSH
75843: LD_VAR 0 1
75847: PUSH
75848: LD_INT 4
75850: PLUS
75851: PUSH
75852: LD_VAR 0 2
75856: PUSH
75857: LD_INT 4
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: LIST
75864: PUSH
75865: LD_VAR 0 1
75869: PUSH
75870: LD_VAR 0 2
75874: PUSH
75875: LD_INT 3
75877: MINUS
75878: PUSH
75879: LD_INT 3
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: LIST
75886: PUSH
75887: LD_VAR 0 1
75891: PUSH
75892: LD_INT 4
75894: MINUS
75895: PUSH
75896: LD_VAR 0 2
75900: PUSH
75901: LD_INT 4
75903: MINUS
75904: PUSH
75905: LD_INT 2
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: LIST
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: ST_TO_ADDR
// end ; 5 :
75920: GO 76060
75922: LD_INT 5
75924: DOUBLE
75925: EQUAL
75926: IFTRUE 75930
75928: GO 76059
75930: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75931: LD_ADDR_VAR 0 5
75935: PUSH
75936: LD_VAR 0 1
75940: PUSH
75941: LD_INT 4
75943: MINUS
75944: PUSH
75945: LD_VAR 0 2
75949: PUSH
75950: LD_INT 1
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: LIST
75957: PUSH
75958: LD_VAR 0 1
75962: PUSH
75963: LD_VAR 0 2
75967: PUSH
75968: LD_INT 4
75970: MINUS
75971: PUSH
75972: LD_INT 3
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: LIST
75979: PUSH
75980: LD_VAR 0 1
75984: PUSH
75985: LD_INT 4
75987: PLUS
75988: PUSH
75989: LD_VAR 0 2
75993: PUSH
75994: LD_INT 4
75996: PLUS
75997: PUSH
75998: LD_INT 5
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: LIST
76005: PUSH
76006: LD_VAR 0 1
76010: PUSH
76011: LD_INT 3
76013: PLUS
76014: PUSH
76015: LD_VAR 0 2
76019: PUSH
76020: LD_INT 4
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: LIST
76027: PUSH
76028: LD_VAR 0 1
76032: PUSH
76033: LD_VAR 0 2
76037: PUSH
76038: LD_INT 3
76040: PLUS
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: LIST
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: ST_TO_ADDR
// end ; end ;
76057: GO 76060
76059: POP
// result := list ;
76060: LD_ADDR_VAR 0 4
76064: PUSH
76065: LD_VAR 0 5
76069: ST_TO_ADDR
// end ;
76070: LD_VAR 0 4
76074: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76075: LD_INT 0
76077: PPUSH
76078: PPUSH
76079: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76080: LD_VAR 0 1
76084: NOT
76085: PUSH
76086: LD_VAR 0 2
76090: PUSH
76091: LD_INT 1
76093: PUSH
76094: LD_INT 2
76096: PUSH
76097: LD_INT 3
76099: PUSH
76100: LD_INT 4
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: IN
76109: NOT
76110: OR
76111: IFFALSE 76115
// exit ;
76113: GO 76198
// tmp := [ ] ;
76115: LD_ADDR_VAR 0 5
76119: PUSH
76120: EMPTY
76121: ST_TO_ADDR
// for i in units do
76122: LD_ADDR_VAR 0 4
76126: PUSH
76127: LD_VAR 0 1
76131: PUSH
76132: FOR_IN
76133: IFFALSE 76167
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76135: LD_ADDR_VAR 0 5
76139: PUSH
76140: LD_VAR 0 5
76144: PPUSH
76145: LD_VAR 0 4
76149: PPUSH
76150: LD_VAR 0 2
76154: PPUSH
76155: CALL_OW 259
76159: PPUSH
76160: CALL 77558 0 2
76164: ST_TO_ADDR
76165: GO 76132
76167: POP
76168: POP
// if not tmp then
76169: LD_VAR 0 5
76173: NOT
76174: IFFALSE 76178
// exit ;
76176: GO 76198
// result := SortListByListDesc ( units , tmp ) ;
76178: LD_ADDR_VAR 0 3
76182: PUSH
76183: LD_VAR 0 1
76187: PPUSH
76188: LD_VAR 0 5
76192: PPUSH
76193: CALL_OW 77
76197: ST_TO_ADDR
// end ;
76198: LD_VAR 0 3
76202: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76203: LD_INT 0
76205: PPUSH
76206: PPUSH
76207: PPUSH
// result := false ;
76208: LD_ADDR_VAR 0 3
76212: PUSH
76213: LD_INT 0
76215: ST_TO_ADDR
// if not building then
76216: LD_VAR 0 2
76220: NOT
76221: IFFALSE 76225
// exit ;
76223: GO 76363
// x := GetX ( building ) ;
76225: LD_ADDR_VAR 0 4
76229: PUSH
76230: LD_VAR 0 2
76234: PPUSH
76235: CALL_OW 250
76239: ST_TO_ADDR
// y := GetY ( building ) ;
76240: LD_ADDR_VAR 0 5
76244: PUSH
76245: LD_VAR 0 2
76249: PPUSH
76250: CALL_OW 251
76254: ST_TO_ADDR
// if not x or not y then
76255: LD_VAR 0 4
76259: NOT
76260: PUSH
76261: LD_VAR 0 5
76265: NOT
76266: OR
76267: IFFALSE 76271
// exit ;
76269: GO 76363
// if GetTaskList ( unit ) then
76271: LD_VAR 0 1
76275: PPUSH
76276: CALL_OW 437
76280: IFFALSE 76363
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76282: LD_STRING e
76284: PUSH
76285: LD_VAR 0 1
76289: PPUSH
76290: CALL_OW 437
76294: PUSH
76295: LD_INT 1
76297: ARRAY
76298: PUSH
76299: LD_INT 1
76301: ARRAY
76302: EQUAL
76303: PUSH
76304: LD_VAR 0 4
76308: PUSH
76309: LD_VAR 0 1
76313: PPUSH
76314: CALL_OW 437
76318: PUSH
76319: LD_INT 1
76321: ARRAY
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: EQUAL
76327: AND
76328: PUSH
76329: LD_VAR 0 5
76333: PUSH
76334: LD_VAR 0 1
76338: PPUSH
76339: CALL_OW 437
76343: PUSH
76344: LD_INT 1
76346: ARRAY
76347: PUSH
76348: LD_INT 3
76350: ARRAY
76351: EQUAL
76352: AND
76353: IFFALSE 76363
// result := true end ;
76355: LD_ADDR_VAR 0 3
76359: PUSH
76360: LD_INT 1
76362: ST_TO_ADDR
// end ;
76363: LD_VAR 0 3
76367: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76368: LD_INT 0
76370: PPUSH
// result := false ;
76371: LD_ADDR_VAR 0 4
76375: PUSH
76376: LD_INT 0
76378: ST_TO_ADDR
// if GetTaskList ( unit ) then
76379: LD_VAR 0 1
76383: PPUSH
76384: CALL_OW 437
76388: IFFALSE 76471
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76390: LD_STRING M
76392: PUSH
76393: LD_VAR 0 1
76397: PPUSH
76398: CALL_OW 437
76402: PUSH
76403: LD_INT 1
76405: ARRAY
76406: PUSH
76407: LD_INT 1
76409: ARRAY
76410: EQUAL
76411: PUSH
76412: LD_VAR 0 2
76416: PUSH
76417: LD_VAR 0 1
76421: PPUSH
76422: CALL_OW 437
76426: PUSH
76427: LD_INT 1
76429: ARRAY
76430: PUSH
76431: LD_INT 2
76433: ARRAY
76434: EQUAL
76435: AND
76436: PUSH
76437: LD_VAR 0 3
76441: PUSH
76442: LD_VAR 0 1
76446: PPUSH
76447: CALL_OW 437
76451: PUSH
76452: LD_INT 1
76454: ARRAY
76455: PUSH
76456: LD_INT 3
76458: ARRAY
76459: EQUAL
76460: AND
76461: IFFALSE 76471
// result := true ;
76463: LD_ADDR_VAR 0 4
76467: PUSH
76468: LD_INT 1
76470: ST_TO_ADDR
// end ; end ;
76471: LD_VAR 0 4
76475: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76476: LD_INT 0
76478: PPUSH
76479: PPUSH
76480: PPUSH
76481: PPUSH
// if not unit or not area then
76482: LD_VAR 0 1
76486: NOT
76487: PUSH
76488: LD_VAR 0 2
76492: NOT
76493: OR
76494: IFFALSE 76498
// exit ;
76496: GO 76661
// tmp := AreaToList ( area , i ) ;
76498: LD_ADDR_VAR 0 6
76502: PUSH
76503: LD_VAR 0 2
76507: PPUSH
76508: LD_VAR 0 5
76512: PPUSH
76513: CALL_OW 517
76517: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76518: LD_ADDR_VAR 0 5
76522: PUSH
76523: DOUBLE
76524: LD_INT 1
76526: DEC
76527: ST_TO_ADDR
76528: LD_VAR 0 6
76532: PUSH
76533: LD_INT 1
76535: ARRAY
76536: PUSH
76537: FOR_TO
76538: IFFALSE 76659
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76540: LD_ADDR_VAR 0 7
76544: PUSH
76545: LD_VAR 0 6
76549: PUSH
76550: LD_INT 1
76552: ARRAY
76553: PUSH
76554: LD_VAR 0 5
76558: ARRAY
76559: PUSH
76560: LD_VAR 0 6
76564: PUSH
76565: LD_INT 2
76567: ARRAY
76568: PUSH
76569: LD_VAR 0 5
76573: ARRAY
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76579: LD_INT 92
76581: PUSH
76582: LD_VAR 0 7
76586: PUSH
76587: LD_INT 1
76589: ARRAY
76590: PUSH
76591: LD_VAR 0 7
76595: PUSH
76596: LD_INT 2
76598: ARRAY
76599: PUSH
76600: LD_INT 3
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: PPUSH
76609: CALL_OW 69
76613: PUSH
76614: LD_INT 0
76616: EQUAL
76617: IFFALSE 76657
// begin PlaceUnitArea ( unit , area , mode ) ;
76619: LD_VAR 0 1
76623: PPUSH
76624: LD_VAR 0 2
76628: PPUSH
76629: LD_VAR 0 3
76633: PPUSH
76634: CALL_OW 49
// result := IsPlaced ( unit ) ;
76638: LD_ADDR_VAR 0 4
76642: PUSH
76643: LD_VAR 0 1
76647: PPUSH
76648: CALL_OW 305
76652: ST_TO_ADDR
// exit ;
76653: POP
76654: POP
76655: GO 76661
// end ; end ;
76657: GO 76537
76659: POP
76660: POP
// end ;
76661: LD_VAR 0 4
76665: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76666: LD_INT 0
76668: PPUSH
76669: PPUSH
76670: PPUSH
// if not side or side > 8 then
76671: LD_VAR 0 1
76675: NOT
76676: PUSH
76677: LD_VAR 0 1
76681: PUSH
76682: LD_INT 8
76684: GREATER
76685: OR
76686: IFFALSE 76690
// exit ;
76688: GO 76877
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76690: LD_ADDR_VAR 0 4
76694: PUSH
76695: LD_INT 22
76697: PUSH
76698: LD_VAR 0 1
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: LD_INT 21
76709: PUSH
76710: LD_INT 3
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: PPUSH
76721: CALL_OW 69
76725: ST_TO_ADDR
// if not tmp then
76726: LD_VAR 0 4
76730: NOT
76731: IFFALSE 76735
// exit ;
76733: GO 76877
// enable_addtolog := true ;
76735: LD_ADDR_OWVAR 81
76739: PUSH
76740: LD_INT 1
76742: ST_TO_ADDR
// AddToLog ( [ ) ;
76743: LD_STRING [
76745: PPUSH
76746: CALL_OW 561
// for i in tmp do
76750: LD_ADDR_VAR 0 3
76754: PUSH
76755: LD_VAR 0 4
76759: PUSH
76760: FOR_IN
76761: IFFALSE 76868
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76763: LD_STRING [
76765: PUSH
76766: LD_VAR 0 3
76770: PPUSH
76771: CALL_OW 266
76775: STR
76776: PUSH
76777: LD_STRING , 
76779: STR
76780: PUSH
76781: LD_VAR 0 3
76785: PPUSH
76786: CALL_OW 250
76790: STR
76791: PUSH
76792: LD_STRING , 
76794: STR
76795: PUSH
76796: LD_VAR 0 3
76800: PPUSH
76801: CALL_OW 251
76805: STR
76806: PUSH
76807: LD_STRING , 
76809: STR
76810: PUSH
76811: LD_VAR 0 3
76815: PPUSH
76816: CALL_OW 254
76820: STR
76821: PUSH
76822: LD_STRING , 
76824: STR
76825: PUSH
76826: LD_VAR 0 3
76830: PPUSH
76831: LD_INT 1
76833: PPUSH
76834: CALL_OW 268
76838: STR
76839: PUSH
76840: LD_STRING , 
76842: STR
76843: PUSH
76844: LD_VAR 0 3
76848: PPUSH
76849: LD_INT 2
76851: PPUSH
76852: CALL_OW 268
76856: STR
76857: PUSH
76858: LD_STRING ],
76860: STR
76861: PPUSH
76862: CALL_OW 561
// end ;
76866: GO 76760
76868: POP
76869: POP
// AddToLog ( ]; ) ;
76870: LD_STRING ];
76872: PPUSH
76873: CALL_OW 561
// end ;
76877: LD_VAR 0 2
76881: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76882: LD_INT 0
76884: PPUSH
76885: PPUSH
76886: PPUSH
76887: PPUSH
76888: PPUSH
// if not area or not rate or not max then
76889: LD_VAR 0 1
76893: NOT
76894: PUSH
76895: LD_VAR 0 2
76899: NOT
76900: OR
76901: PUSH
76902: LD_VAR 0 4
76906: NOT
76907: OR
76908: IFFALSE 76912
// exit ;
76910: GO 77101
// while 1 do
76912: LD_INT 1
76914: IFFALSE 77101
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76916: LD_ADDR_VAR 0 9
76920: PUSH
76921: LD_VAR 0 1
76925: PPUSH
76926: LD_INT 1
76928: PPUSH
76929: CALL_OW 287
76933: PUSH
76934: LD_INT 10
76936: MUL
76937: ST_TO_ADDR
// r := rate / 10 ;
76938: LD_ADDR_VAR 0 7
76942: PUSH
76943: LD_VAR 0 2
76947: PUSH
76948: LD_INT 10
76950: DIVREAL
76951: ST_TO_ADDR
// time := 1 1$00 ;
76952: LD_ADDR_VAR 0 8
76956: PUSH
76957: LD_INT 2100
76959: ST_TO_ADDR
// if amount < min then
76960: LD_VAR 0 9
76964: PUSH
76965: LD_VAR 0 3
76969: LESS
76970: IFFALSE 76988
// r := r * 2 else
76972: LD_ADDR_VAR 0 7
76976: PUSH
76977: LD_VAR 0 7
76981: PUSH
76982: LD_INT 2
76984: MUL
76985: ST_TO_ADDR
76986: GO 77014
// if amount > max then
76988: LD_VAR 0 9
76992: PUSH
76993: LD_VAR 0 4
76997: GREATER
76998: IFFALSE 77014
// r := r / 2 ;
77000: LD_ADDR_VAR 0 7
77004: PUSH
77005: LD_VAR 0 7
77009: PUSH
77010: LD_INT 2
77012: DIVREAL
77013: ST_TO_ADDR
// time := time / r ;
77014: LD_ADDR_VAR 0 8
77018: PUSH
77019: LD_VAR 0 8
77023: PUSH
77024: LD_VAR 0 7
77028: DIVREAL
77029: ST_TO_ADDR
// if time < 0 then
77030: LD_VAR 0 8
77034: PUSH
77035: LD_INT 0
77037: LESS
77038: IFFALSE 77055
// time := time * - 1 ;
77040: LD_ADDR_VAR 0 8
77044: PUSH
77045: LD_VAR 0 8
77049: PUSH
77050: LD_INT 1
77052: NEG
77053: MUL
77054: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77055: LD_VAR 0 8
77059: PUSH
77060: LD_INT 35
77062: PPUSH
77063: LD_INT 875
77065: PPUSH
77066: CALL_OW 12
77070: PLUS
77071: PPUSH
77072: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77076: LD_INT 1
77078: PPUSH
77079: LD_INT 5
77081: PPUSH
77082: CALL_OW 12
77086: PPUSH
77087: LD_VAR 0 1
77091: PPUSH
77092: LD_INT 1
77094: PPUSH
77095: CALL_OW 55
// end ;
77099: GO 76912
// end ;
77101: LD_VAR 0 5
77105: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77106: LD_INT 0
77108: PPUSH
77109: PPUSH
77110: PPUSH
77111: PPUSH
77112: PPUSH
77113: PPUSH
77114: PPUSH
77115: PPUSH
// if not turrets or not factories then
77116: LD_VAR 0 1
77120: NOT
77121: PUSH
77122: LD_VAR 0 2
77126: NOT
77127: OR
77128: IFFALSE 77132
// exit ;
77130: GO 77439
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77132: LD_ADDR_VAR 0 10
77136: PUSH
77137: LD_INT 5
77139: PUSH
77140: LD_INT 6
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: PUSH
77147: LD_INT 2
77149: PUSH
77150: LD_INT 4
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: PUSH
77157: LD_INT 3
77159: PUSH
77160: LD_INT 5
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: LIST
77171: PUSH
77172: LD_INT 24
77174: PUSH
77175: LD_INT 25
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: LD_INT 23
77184: PUSH
77185: LD_INT 27
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: PUSH
77192: EMPTY
77193: LIST
77194: LIST
77195: PUSH
77196: LD_INT 42
77198: PUSH
77199: LD_INT 43
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 44
77208: PUSH
77209: LD_INT 46
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: LD_INT 45
77218: PUSH
77219: LD_INT 47
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: LIST
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: LIST
77235: ST_TO_ADDR
// result := [ ] ;
77236: LD_ADDR_VAR 0 3
77240: PUSH
77241: EMPTY
77242: ST_TO_ADDR
// for i in turrets do
77243: LD_ADDR_VAR 0 4
77247: PUSH
77248: LD_VAR 0 1
77252: PUSH
77253: FOR_IN
77254: IFFALSE 77437
// begin nat := GetNation ( i ) ;
77256: LD_ADDR_VAR 0 7
77260: PUSH
77261: LD_VAR 0 4
77265: PPUSH
77266: CALL_OW 248
77270: ST_TO_ADDR
// weapon := 0 ;
77271: LD_ADDR_VAR 0 8
77275: PUSH
77276: LD_INT 0
77278: ST_TO_ADDR
// if not nat then
77279: LD_VAR 0 7
77283: NOT
77284: IFFALSE 77288
// continue ;
77286: GO 77253
// for j in list [ nat ] do
77288: LD_ADDR_VAR 0 5
77292: PUSH
77293: LD_VAR 0 10
77297: PUSH
77298: LD_VAR 0 7
77302: ARRAY
77303: PUSH
77304: FOR_IN
77305: IFFALSE 77346
// if GetBWeapon ( i ) = j [ 1 ] then
77307: LD_VAR 0 4
77311: PPUSH
77312: CALL_OW 269
77316: PUSH
77317: LD_VAR 0 5
77321: PUSH
77322: LD_INT 1
77324: ARRAY
77325: EQUAL
77326: IFFALSE 77344
// begin weapon := j [ 2 ] ;
77328: LD_ADDR_VAR 0 8
77332: PUSH
77333: LD_VAR 0 5
77337: PUSH
77338: LD_INT 2
77340: ARRAY
77341: ST_TO_ADDR
// break ;
77342: GO 77346
// end ;
77344: GO 77304
77346: POP
77347: POP
// if not weapon then
77348: LD_VAR 0 8
77352: NOT
77353: IFFALSE 77357
// continue ;
77355: GO 77253
// for k in factories do
77357: LD_ADDR_VAR 0 6
77361: PUSH
77362: LD_VAR 0 2
77366: PUSH
77367: FOR_IN
77368: IFFALSE 77433
// begin weapons := AvailableWeaponList ( k ) ;
77370: LD_ADDR_VAR 0 9
77374: PUSH
77375: LD_VAR 0 6
77379: PPUSH
77380: CALL_OW 478
77384: ST_TO_ADDR
// if not weapons then
77385: LD_VAR 0 9
77389: NOT
77390: IFFALSE 77394
// continue ;
77392: GO 77367
// if weapon in weapons then
77394: LD_VAR 0 8
77398: PUSH
77399: LD_VAR 0 9
77403: IN
77404: IFFALSE 77431
// begin result := [ i , weapon ] ;
77406: LD_ADDR_VAR 0 3
77410: PUSH
77411: LD_VAR 0 4
77415: PUSH
77416: LD_VAR 0 8
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: ST_TO_ADDR
// exit ;
77425: POP
77426: POP
77427: POP
77428: POP
77429: GO 77439
// end ; end ;
77431: GO 77367
77433: POP
77434: POP
// end ;
77435: GO 77253
77437: POP
77438: POP
// end ;
77439: LD_VAR 0 3
77443: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77444: LD_INT 0
77446: PPUSH
// if not side or side > 8 then
77447: LD_VAR 0 3
77451: NOT
77452: PUSH
77453: LD_VAR 0 3
77457: PUSH
77458: LD_INT 8
77460: GREATER
77461: OR
77462: IFFALSE 77466
// exit ;
77464: GO 77525
// if not range then
77466: LD_VAR 0 4
77470: NOT
77471: IFFALSE 77482
// range := - 12 ;
77473: LD_ADDR_VAR 0 4
77477: PUSH
77478: LD_INT 12
77480: NEG
77481: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77482: LD_VAR 0 1
77486: PPUSH
77487: LD_VAR 0 2
77491: PPUSH
77492: LD_VAR 0 3
77496: PPUSH
77497: LD_VAR 0 4
77501: PPUSH
77502: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77506: LD_VAR 0 1
77510: PPUSH
77511: LD_VAR 0 2
77515: PPUSH
77516: LD_VAR 0 3
77520: PPUSH
77521: CALL_OW 331
// end ;
77525: LD_VAR 0 5
77529: RET
// export function Video ( mode ) ; begin
77530: LD_INT 0
77532: PPUSH
// ingame_video = mode ;
77533: LD_ADDR_OWVAR 52
77537: PUSH
77538: LD_VAR 0 1
77542: ST_TO_ADDR
// interface_hidden = mode ;
77543: LD_ADDR_OWVAR 54
77547: PUSH
77548: LD_VAR 0 1
77552: ST_TO_ADDR
// end ;
77553: LD_VAR 0 2
77557: RET
// export function Join ( array , element ) ; begin
77558: LD_INT 0
77560: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77561: LD_ADDR_VAR 0 3
77565: PUSH
77566: LD_VAR 0 1
77570: PPUSH
77571: LD_VAR 0 1
77575: PUSH
77576: LD_INT 1
77578: PLUS
77579: PPUSH
77580: LD_VAR 0 2
77584: PPUSH
77585: CALL_OW 1
77589: ST_TO_ADDR
// end ;
77590: LD_VAR 0 3
77594: RET
// export function JoinUnion ( array , element ) ; begin
77595: LD_INT 0
77597: PPUSH
// result := array union element ;
77598: LD_ADDR_VAR 0 3
77602: PUSH
77603: LD_VAR 0 1
77607: PUSH
77608: LD_VAR 0 2
77612: UNION
77613: ST_TO_ADDR
// end ;
77614: LD_VAR 0 3
77618: RET
// export function GetBehemoths ( side ) ; begin
77619: LD_INT 0
77621: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77622: LD_ADDR_VAR 0 2
77626: PUSH
77627: LD_INT 22
77629: PUSH
77630: LD_VAR 0 1
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PUSH
77639: LD_INT 31
77641: PUSH
77642: LD_INT 25
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PPUSH
77653: CALL_OW 69
77657: ST_TO_ADDR
// end ;
77658: LD_VAR 0 2
77662: RET
// export function Shuffle ( array ) ; var i , index ; begin
77663: LD_INT 0
77665: PPUSH
77666: PPUSH
77667: PPUSH
// result := [ ] ;
77668: LD_ADDR_VAR 0 2
77672: PUSH
77673: EMPTY
77674: ST_TO_ADDR
// if not array then
77675: LD_VAR 0 1
77679: NOT
77680: IFFALSE 77684
// exit ;
77682: GO 77783
// Randomize ;
77684: CALL_OW 10
// for i = array downto 1 do
77688: LD_ADDR_VAR 0 3
77692: PUSH
77693: DOUBLE
77694: LD_VAR 0 1
77698: INC
77699: ST_TO_ADDR
77700: LD_INT 1
77702: PUSH
77703: FOR_DOWNTO
77704: IFFALSE 77781
// begin index := rand ( 1 , array ) ;
77706: LD_ADDR_VAR 0 4
77710: PUSH
77711: LD_INT 1
77713: PPUSH
77714: LD_VAR 0 1
77718: PPUSH
77719: CALL_OW 12
77723: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77724: LD_ADDR_VAR 0 2
77728: PUSH
77729: LD_VAR 0 2
77733: PPUSH
77734: LD_VAR 0 2
77738: PUSH
77739: LD_INT 1
77741: PLUS
77742: PPUSH
77743: LD_VAR 0 1
77747: PUSH
77748: LD_VAR 0 4
77752: ARRAY
77753: PPUSH
77754: CALL_OW 2
77758: ST_TO_ADDR
// array := Delete ( array , index ) ;
77759: LD_ADDR_VAR 0 1
77763: PUSH
77764: LD_VAR 0 1
77768: PPUSH
77769: LD_VAR 0 4
77773: PPUSH
77774: CALL_OW 3
77778: ST_TO_ADDR
// end ;
77779: GO 77703
77781: POP
77782: POP
// end ;
77783: LD_VAR 0 2
77787: RET
// export function GetBaseMaterials ( base ) ; begin
77788: LD_INT 0
77790: PPUSH
// result := [ 0 , 0 , 0 ] ;
77791: LD_ADDR_VAR 0 2
77795: PUSH
77796: LD_INT 0
77798: PUSH
77799: LD_INT 0
77801: PUSH
77802: LD_INT 0
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: LIST
77809: ST_TO_ADDR
// if not base then
77810: LD_VAR 0 1
77814: NOT
77815: IFFALSE 77819
// exit ;
77817: GO 77868
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77819: LD_ADDR_VAR 0 2
77823: PUSH
77824: LD_VAR 0 1
77828: PPUSH
77829: LD_INT 1
77831: PPUSH
77832: CALL_OW 275
77836: PUSH
77837: LD_VAR 0 1
77841: PPUSH
77842: LD_INT 2
77844: PPUSH
77845: CALL_OW 275
77849: PUSH
77850: LD_VAR 0 1
77854: PPUSH
77855: LD_INT 3
77857: PPUSH
77858: CALL_OW 275
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: LIST
77867: ST_TO_ADDR
// end ;
77868: LD_VAR 0 2
77872: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77873: LD_INT 0
77875: PPUSH
77876: PPUSH
// result := array ;
77877: LD_ADDR_VAR 0 3
77881: PUSH
77882: LD_VAR 0 1
77886: ST_TO_ADDR
// if size >= result then
77887: LD_VAR 0 2
77891: PUSH
77892: LD_VAR 0 3
77896: GREATEREQUAL
77897: IFFALSE 77901
// exit ;
77899: GO 77951
// if size then
77901: LD_VAR 0 2
77905: IFFALSE 77951
// for i := array downto size do
77907: LD_ADDR_VAR 0 4
77911: PUSH
77912: DOUBLE
77913: LD_VAR 0 1
77917: INC
77918: ST_TO_ADDR
77919: LD_VAR 0 2
77923: PUSH
77924: FOR_DOWNTO
77925: IFFALSE 77949
// result := Delete ( result , result ) ;
77927: LD_ADDR_VAR 0 3
77931: PUSH
77932: LD_VAR 0 3
77936: PPUSH
77937: LD_VAR 0 3
77941: PPUSH
77942: CALL_OW 3
77946: ST_TO_ADDR
77947: GO 77924
77949: POP
77950: POP
// end ;
77951: LD_VAR 0 3
77955: RET
// export function ComExit ( unit ) ; var tmp ; begin
77956: LD_INT 0
77958: PPUSH
77959: PPUSH
// if not IsInUnit ( unit ) then
77960: LD_VAR 0 1
77964: PPUSH
77965: CALL_OW 310
77969: NOT
77970: IFFALSE 77974
// exit ;
77972: GO 78034
// tmp := IsInUnit ( unit ) ;
77974: LD_ADDR_VAR 0 3
77978: PUSH
77979: LD_VAR 0 1
77983: PPUSH
77984: CALL_OW 310
77988: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77989: LD_VAR 0 3
77993: PPUSH
77994: CALL_OW 247
77998: PUSH
77999: LD_INT 2
78001: EQUAL
78002: IFFALSE 78015
// ComExitVehicle ( unit ) else
78004: LD_VAR 0 1
78008: PPUSH
78009: CALL_OW 121
78013: GO 78024
// ComExitBuilding ( unit ) ;
78015: LD_VAR 0 1
78019: PPUSH
78020: CALL_OW 122
// result := tmp ;
78024: LD_ADDR_VAR 0 2
78028: PUSH
78029: LD_VAR 0 3
78033: ST_TO_ADDR
// end ;
78034: LD_VAR 0 2
78038: RET
// export function ComExitAll ( units ) ; var i ; begin
78039: LD_INT 0
78041: PPUSH
78042: PPUSH
// if not units then
78043: LD_VAR 0 1
78047: NOT
78048: IFFALSE 78052
// exit ;
78050: GO 78078
// for i in units do
78052: LD_ADDR_VAR 0 3
78056: PUSH
78057: LD_VAR 0 1
78061: PUSH
78062: FOR_IN
78063: IFFALSE 78076
// ComExit ( i ) ;
78065: LD_VAR 0 3
78069: PPUSH
78070: CALL 77956 0 1
78074: GO 78062
78076: POP
78077: POP
// end ;
78078: LD_VAR 0 2
78082: RET
// export function ResetHc ; begin
78083: LD_INT 0
78085: PPUSH
// InitHc ;
78086: CALL_OW 19
// hc_importance := 0 ;
78090: LD_ADDR_OWVAR 32
78094: PUSH
78095: LD_INT 0
78097: ST_TO_ADDR
// end ;
78098: LD_VAR 0 1
78102: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78103: LD_INT 0
78105: PPUSH
78106: PPUSH
78107: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78108: LD_ADDR_VAR 0 6
78112: PUSH
78113: LD_VAR 0 1
78117: PUSH
78118: LD_VAR 0 3
78122: PLUS
78123: PUSH
78124: LD_INT 2
78126: DIV
78127: ST_TO_ADDR
// if _x < 0 then
78128: LD_VAR 0 6
78132: PUSH
78133: LD_INT 0
78135: LESS
78136: IFFALSE 78153
// _x := _x * - 1 ;
78138: LD_ADDR_VAR 0 6
78142: PUSH
78143: LD_VAR 0 6
78147: PUSH
78148: LD_INT 1
78150: NEG
78151: MUL
78152: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78153: LD_ADDR_VAR 0 7
78157: PUSH
78158: LD_VAR 0 2
78162: PUSH
78163: LD_VAR 0 4
78167: PLUS
78168: PUSH
78169: LD_INT 2
78171: DIV
78172: ST_TO_ADDR
// if _y < 0 then
78173: LD_VAR 0 7
78177: PUSH
78178: LD_INT 0
78180: LESS
78181: IFFALSE 78198
// _y := _y * - 1 ;
78183: LD_ADDR_VAR 0 7
78187: PUSH
78188: LD_VAR 0 7
78192: PUSH
78193: LD_INT 1
78195: NEG
78196: MUL
78197: ST_TO_ADDR
// result := [ _x , _y ] ;
78198: LD_ADDR_VAR 0 5
78202: PUSH
78203: LD_VAR 0 6
78207: PUSH
78208: LD_VAR 0 7
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: ST_TO_ADDR
// end ;
78217: LD_VAR 0 5
78221: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78222: LD_INT 0
78224: PPUSH
78225: PPUSH
78226: PPUSH
78227: PPUSH
// task := GetTaskList ( unit ) ;
78228: LD_ADDR_VAR 0 7
78232: PUSH
78233: LD_VAR 0 1
78237: PPUSH
78238: CALL_OW 437
78242: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78243: LD_VAR 0 7
78247: NOT
78248: PUSH
78249: LD_VAR 0 1
78253: PPUSH
78254: LD_VAR 0 2
78258: PPUSH
78259: CALL_OW 308
78263: NOT
78264: AND
78265: IFFALSE 78269
// exit ;
78267: GO 78387
// if IsInArea ( unit , area ) then
78269: LD_VAR 0 1
78273: PPUSH
78274: LD_VAR 0 2
78278: PPUSH
78279: CALL_OW 308
78283: IFFALSE 78301
// begin ComMoveToArea ( unit , goAway ) ;
78285: LD_VAR 0 1
78289: PPUSH
78290: LD_VAR 0 3
78294: PPUSH
78295: CALL_OW 113
// exit ;
78299: GO 78387
// end ; if task [ 1 ] [ 1 ] <> M then
78301: LD_VAR 0 7
78305: PUSH
78306: LD_INT 1
78308: ARRAY
78309: PUSH
78310: LD_INT 1
78312: ARRAY
78313: PUSH
78314: LD_STRING M
78316: NONEQUAL
78317: IFFALSE 78321
// exit ;
78319: GO 78387
// x := task [ 1 ] [ 2 ] ;
78321: LD_ADDR_VAR 0 5
78325: PUSH
78326: LD_VAR 0 7
78330: PUSH
78331: LD_INT 1
78333: ARRAY
78334: PUSH
78335: LD_INT 2
78337: ARRAY
78338: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78339: LD_ADDR_VAR 0 6
78343: PUSH
78344: LD_VAR 0 7
78348: PUSH
78349: LD_INT 1
78351: ARRAY
78352: PUSH
78353: LD_INT 3
78355: ARRAY
78356: ST_TO_ADDR
// if InArea ( x , y , area ) then
78357: LD_VAR 0 5
78361: PPUSH
78362: LD_VAR 0 6
78366: PPUSH
78367: LD_VAR 0 2
78371: PPUSH
78372: CALL_OW 309
78376: IFFALSE 78387
// ComStop ( unit ) ;
78378: LD_VAR 0 1
78382: PPUSH
78383: CALL_OW 141
// end ;
78387: LD_VAR 0 4
78391: RET
// export function Abs ( value ) ; begin
78392: LD_INT 0
78394: PPUSH
// result := value ;
78395: LD_ADDR_VAR 0 2
78399: PUSH
78400: LD_VAR 0 1
78404: ST_TO_ADDR
// if value < 0 then
78405: LD_VAR 0 1
78409: PUSH
78410: LD_INT 0
78412: LESS
78413: IFFALSE 78430
// result := value * - 1 ;
78415: LD_ADDR_VAR 0 2
78419: PUSH
78420: LD_VAR 0 1
78424: PUSH
78425: LD_INT 1
78427: NEG
78428: MUL
78429: ST_TO_ADDR
// end ;
78430: LD_VAR 0 2
78434: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78435: LD_INT 0
78437: PPUSH
78438: PPUSH
78439: PPUSH
78440: PPUSH
78441: PPUSH
78442: PPUSH
78443: PPUSH
78444: PPUSH
// if not unit or not building then
78445: LD_VAR 0 1
78449: NOT
78450: PUSH
78451: LD_VAR 0 2
78455: NOT
78456: OR
78457: IFFALSE 78461
// exit ;
78459: GO 78687
// x := GetX ( building ) ;
78461: LD_ADDR_VAR 0 4
78465: PUSH
78466: LD_VAR 0 2
78470: PPUSH
78471: CALL_OW 250
78475: ST_TO_ADDR
// y := GetY ( building ) ;
78476: LD_ADDR_VAR 0 6
78480: PUSH
78481: LD_VAR 0 2
78485: PPUSH
78486: CALL_OW 251
78490: ST_TO_ADDR
// d := GetDir ( building ) ;
78491: LD_ADDR_VAR 0 8
78495: PUSH
78496: LD_VAR 0 2
78500: PPUSH
78501: CALL_OW 254
78505: ST_TO_ADDR
// r := 4 ;
78506: LD_ADDR_VAR 0 9
78510: PUSH
78511: LD_INT 4
78513: ST_TO_ADDR
// for i := 1 to 5 do
78514: LD_ADDR_VAR 0 10
78518: PUSH
78519: DOUBLE
78520: LD_INT 1
78522: DEC
78523: ST_TO_ADDR
78524: LD_INT 5
78526: PUSH
78527: FOR_TO
78528: IFFALSE 78685
// begin _x := ShiftX ( x , d , r + i ) ;
78530: LD_ADDR_VAR 0 5
78534: PUSH
78535: LD_VAR 0 4
78539: PPUSH
78540: LD_VAR 0 8
78544: PPUSH
78545: LD_VAR 0 9
78549: PUSH
78550: LD_VAR 0 10
78554: PLUS
78555: PPUSH
78556: CALL_OW 272
78560: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78561: LD_ADDR_VAR 0 7
78565: PUSH
78566: LD_VAR 0 6
78570: PPUSH
78571: LD_VAR 0 8
78575: PPUSH
78576: LD_VAR 0 9
78580: PUSH
78581: LD_VAR 0 10
78585: PLUS
78586: PPUSH
78587: CALL_OW 273
78591: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78592: LD_VAR 0 5
78596: PPUSH
78597: LD_VAR 0 7
78601: PPUSH
78602: CALL_OW 488
78606: PUSH
78607: LD_VAR 0 5
78611: PPUSH
78612: LD_VAR 0 7
78616: PPUSH
78617: CALL_OW 428
78621: PPUSH
78622: CALL_OW 247
78626: PUSH
78627: LD_INT 3
78629: PUSH
78630: LD_INT 2
78632: PUSH
78633: EMPTY
78634: LIST
78635: LIST
78636: IN
78637: NOT
78638: AND
78639: IFFALSE 78683
// begin ComMoveXY ( unit , _x , _y ) ;
78641: LD_VAR 0 1
78645: PPUSH
78646: LD_VAR 0 5
78650: PPUSH
78651: LD_VAR 0 7
78655: PPUSH
78656: CALL_OW 111
// result := [ _x , _y ] ;
78660: LD_ADDR_VAR 0 3
78664: PUSH
78665: LD_VAR 0 5
78669: PUSH
78670: LD_VAR 0 7
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: ST_TO_ADDR
// exit ;
78679: POP
78680: POP
78681: GO 78687
// end ; end ;
78683: GO 78527
78685: POP
78686: POP
// end ;
78687: LD_VAR 0 3
78691: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78692: LD_INT 0
78694: PPUSH
78695: PPUSH
78696: PPUSH
// result := 0 ;
78697: LD_ADDR_VAR 0 3
78701: PUSH
78702: LD_INT 0
78704: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78705: LD_VAR 0 1
78709: PUSH
78710: LD_INT 0
78712: LESS
78713: PUSH
78714: LD_VAR 0 1
78718: PUSH
78719: LD_INT 8
78721: GREATER
78722: OR
78723: PUSH
78724: LD_VAR 0 2
78728: PUSH
78729: LD_INT 0
78731: LESS
78732: OR
78733: PUSH
78734: LD_VAR 0 2
78738: PUSH
78739: LD_INT 8
78741: GREATER
78742: OR
78743: IFFALSE 78747
// exit ;
78745: GO 78822
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78747: LD_ADDR_VAR 0 4
78751: PUSH
78752: LD_INT 22
78754: PUSH
78755: LD_VAR 0 2
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PPUSH
78764: CALL_OW 69
78768: PUSH
78769: FOR_IN
78770: IFFALSE 78820
// begin un := UnitShoot ( i ) ;
78772: LD_ADDR_VAR 0 5
78776: PUSH
78777: LD_VAR 0 4
78781: PPUSH
78782: CALL_OW 504
78786: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78787: LD_VAR 0 5
78791: PPUSH
78792: CALL_OW 255
78796: PUSH
78797: LD_VAR 0 1
78801: EQUAL
78802: IFFALSE 78818
// begin result := un ;
78804: LD_ADDR_VAR 0 3
78808: PUSH
78809: LD_VAR 0 5
78813: ST_TO_ADDR
// exit ;
78814: POP
78815: POP
78816: GO 78822
// end ; end ;
78818: GO 78769
78820: POP
78821: POP
// end ;
78822: LD_VAR 0 3
78826: RET
// export function GetCargoBay ( units ) ; begin
78827: LD_INT 0
78829: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78830: LD_ADDR_VAR 0 2
78834: PUSH
78835: LD_VAR 0 1
78839: PPUSH
78840: LD_INT 2
78842: PUSH
78843: LD_INT 34
78845: PUSH
78846: LD_INT 12
78848: PUSH
78849: EMPTY
78850: LIST
78851: LIST
78852: PUSH
78853: LD_INT 34
78855: PUSH
78856: LD_INT 51
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: PUSH
78863: LD_INT 34
78865: PUSH
78866: LD_INT 32
78868: PUSH
78869: EMPTY
78870: LIST
78871: LIST
78872: PUSH
78873: LD_INT 34
78875: PUSH
78876: LD_INT 89
78878: PUSH
78879: EMPTY
78880: LIST
78881: LIST
78882: PUSH
78883: EMPTY
78884: LIST
78885: LIST
78886: LIST
78887: LIST
78888: LIST
78889: PPUSH
78890: CALL_OW 72
78894: ST_TO_ADDR
// end ;
78895: LD_VAR 0 2
78899: RET
// export function Negate ( value ) ; begin
78900: LD_INT 0
78902: PPUSH
// result := not value ;
78903: LD_ADDR_VAR 0 2
78907: PUSH
78908: LD_VAR 0 1
78912: NOT
78913: ST_TO_ADDR
// end ;
78914: LD_VAR 0 2
78918: RET
// export function Inc ( value ) ; begin
78919: LD_INT 0
78921: PPUSH
// result := value + 1 ;
78922: LD_ADDR_VAR 0 2
78926: PUSH
78927: LD_VAR 0 1
78931: PUSH
78932: LD_INT 1
78934: PLUS
78935: ST_TO_ADDR
// end ;
78936: LD_VAR 0 2
78940: RET
// export function Dec ( value ) ; begin
78941: LD_INT 0
78943: PPUSH
// result := value - 1 ;
78944: LD_ADDR_VAR 0 2
78948: PUSH
78949: LD_VAR 0 1
78953: PUSH
78954: LD_INT 1
78956: MINUS
78957: ST_TO_ADDR
// end ;
78958: LD_VAR 0 2
78962: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78963: LD_INT 0
78965: PPUSH
78966: PPUSH
78967: PPUSH
78968: PPUSH
78969: PPUSH
78970: PPUSH
78971: PPUSH
78972: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78973: LD_VAR 0 1
78977: PPUSH
78978: LD_VAR 0 2
78982: PPUSH
78983: CALL_OW 488
78987: NOT
78988: PUSH
78989: LD_VAR 0 3
78993: PPUSH
78994: LD_VAR 0 4
78998: PPUSH
78999: CALL_OW 488
79003: NOT
79004: OR
79005: IFFALSE 79018
// begin result := - 1 ;
79007: LD_ADDR_VAR 0 5
79011: PUSH
79012: LD_INT 1
79014: NEG
79015: ST_TO_ADDR
// exit ;
79016: GO 79253
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79018: LD_ADDR_VAR 0 12
79022: PUSH
79023: LD_VAR 0 1
79027: PPUSH
79028: LD_VAR 0 2
79032: PPUSH
79033: LD_VAR 0 3
79037: PPUSH
79038: LD_VAR 0 4
79042: PPUSH
79043: CALL 78103 0 4
79047: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79048: LD_ADDR_VAR 0 11
79052: PUSH
79053: LD_VAR 0 1
79057: PPUSH
79058: LD_VAR 0 2
79062: PPUSH
79063: LD_VAR 0 12
79067: PUSH
79068: LD_INT 1
79070: ARRAY
79071: PPUSH
79072: LD_VAR 0 12
79076: PUSH
79077: LD_INT 2
79079: ARRAY
79080: PPUSH
79081: CALL_OW 298
79085: ST_TO_ADDR
// distance := 9999 ;
79086: LD_ADDR_VAR 0 10
79090: PUSH
79091: LD_INT 9999
79093: ST_TO_ADDR
// for i := 0 to 5 do
79094: LD_ADDR_VAR 0 6
79098: PUSH
79099: DOUBLE
79100: LD_INT 0
79102: DEC
79103: ST_TO_ADDR
79104: LD_INT 5
79106: PUSH
79107: FOR_TO
79108: IFFALSE 79251
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79110: LD_ADDR_VAR 0 7
79114: PUSH
79115: LD_VAR 0 1
79119: PPUSH
79120: LD_VAR 0 6
79124: PPUSH
79125: LD_VAR 0 11
79129: PPUSH
79130: CALL_OW 272
79134: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79135: LD_ADDR_VAR 0 8
79139: PUSH
79140: LD_VAR 0 2
79144: PPUSH
79145: LD_VAR 0 6
79149: PPUSH
79150: LD_VAR 0 11
79154: PPUSH
79155: CALL_OW 273
79159: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79160: LD_VAR 0 7
79164: PPUSH
79165: LD_VAR 0 8
79169: PPUSH
79170: CALL_OW 488
79174: NOT
79175: IFFALSE 79179
// continue ;
79177: GO 79107
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79179: LD_ADDR_VAR 0 9
79183: PUSH
79184: LD_VAR 0 12
79188: PUSH
79189: LD_INT 1
79191: ARRAY
79192: PPUSH
79193: LD_VAR 0 12
79197: PUSH
79198: LD_INT 2
79200: ARRAY
79201: PPUSH
79202: LD_VAR 0 7
79206: PPUSH
79207: LD_VAR 0 8
79211: PPUSH
79212: CALL_OW 298
79216: ST_TO_ADDR
// if tmp < distance then
79217: LD_VAR 0 9
79221: PUSH
79222: LD_VAR 0 10
79226: LESS
79227: IFFALSE 79249
// begin result := i ;
79229: LD_ADDR_VAR 0 5
79233: PUSH
79234: LD_VAR 0 6
79238: ST_TO_ADDR
// distance := tmp ;
79239: LD_ADDR_VAR 0 10
79243: PUSH
79244: LD_VAR 0 9
79248: ST_TO_ADDR
// end ; end ;
79249: GO 79107
79251: POP
79252: POP
// end ;
79253: LD_VAR 0 5
79257: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79258: LD_INT 0
79260: PPUSH
79261: PPUSH
// if not driver or not IsInUnit ( driver ) then
79262: LD_VAR 0 1
79266: NOT
79267: PUSH
79268: LD_VAR 0 1
79272: PPUSH
79273: CALL_OW 310
79277: NOT
79278: OR
79279: IFFALSE 79283
// exit ;
79281: GO 79373
// vehicle := IsInUnit ( driver ) ;
79283: LD_ADDR_VAR 0 3
79287: PUSH
79288: LD_VAR 0 1
79292: PPUSH
79293: CALL_OW 310
79297: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79298: LD_VAR 0 1
79302: PPUSH
79303: LD_STRING \
79305: PUSH
79306: LD_INT 0
79308: PUSH
79309: LD_INT 0
79311: PUSH
79312: LD_INT 0
79314: PUSH
79315: LD_INT 0
79317: PUSH
79318: LD_INT 0
79320: PUSH
79321: LD_INT 0
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: PUSH
79333: LD_STRING E
79335: PUSH
79336: LD_INT 0
79338: PUSH
79339: LD_INT 0
79341: PUSH
79342: LD_VAR 0 3
79346: PUSH
79347: LD_INT 0
79349: PUSH
79350: LD_INT 0
79352: PUSH
79353: LD_INT 0
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: LIST
79360: LIST
79361: LIST
79362: LIST
79363: LIST
79364: PUSH
79365: EMPTY
79366: LIST
79367: LIST
79368: PPUSH
79369: CALL_OW 446
// end ;
79373: LD_VAR 0 2
79377: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79378: LD_INT 0
79380: PPUSH
79381: PPUSH
// if not driver or not IsInUnit ( driver ) then
79382: LD_VAR 0 1
79386: NOT
79387: PUSH
79388: LD_VAR 0 1
79392: PPUSH
79393: CALL_OW 310
79397: NOT
79398: OR
79399: IFFALSE 79403
// exit ;
79401: GO 79493
// vehicle := IsInUnit ( driver ) ;
79403: LD_ADDR_VAR 0 3
79407: PUSH
79408: LD_VAR 0 1
79412: PPUSH
79413: CALL_OW 310
79417: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79418: LD_VAR 0 1
79422: PPUSH
79423: LD_STRING \
79425: PUSH
79426: LD_INT 0
79428: PUSH
79429: LD_INT 0
79431: PUSH
79432: LD_INT 0
79434: PUSH
79435: LD_INT 0
79437: PUSH
79438: LD_INT 0
79440: PUSH
79441: LD_INT 0
79443: PUSH
79444: EMPTY
79445: LIST
79446: LIST
79447: LIST
79448: LIST
79449: LIST
79450: LIST
79451: LIST
79452: PUSH
79453: LD_STRING E
79455: PUSH
79456: LD_INT 0
79458: PUSH
79459: LD_INT 0
79461: PUSH
79462: LD_VAR 0 3
79466: PUSH
79467: LD_INT 0
79469: PUSH
79470: LD_INT 0
79472: PUSH
79473: LD_INT 0
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: PPUSH
79489: CALL_OW 447
// end ;
79493: LD_VAR 0 2
79497: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79498: LD_INT 0
79500: PPUSH
79501: PPUSH
79502: PPUSH
// tmp := [ ] ;
79503: LD_ADDR_VAR 0 5
79507: PUSH
79508: EMPTY
79509: ST_TO_ADDR
// for i in units do
79510: LD_ADDR_VAR 0 4
79514: PUSH
79515: LD_VAR 0 1
79519: PUSH
79520: FOR_IN
79521: IFFALSE 79559
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79523: LD_ADDR_VAR 0 5
79527: PUSH
79528: LD_VAR 0 5
79532: PPUSH
79533: LD_VAR 0 5
79537: PUSH
79538: LD_INT 1
79540: PLUS
79541: PPUSH
79542: LD_VAR 0 4
79546: PPUSH
79547: CALL_OW 256
79551: PPUSH
79552: CALL_OW 2
79556: ST_TO_ADDR
79557: GO 79520
79559: POP
79560: POP
// if not tmp then
79561: LD_VAR 0 5
79565: NOT
79566: IFFALSE 79570
// exit ;
79568: GO 79618
// if asc then
79570: LD_VAR 0 2
79574: IFFALSE 79598
// result := SortListByListAsc ( units , tmp ) else
79576: LD_ADDR_VAR 0 3
79580: PUSH
79581: LD_VAR 0 1
79585: PPUSH
79586: LD_VAR 0 5
79590: PPUSH
79591: CALL_OW 76
79595: ST_TO_ADDR
79596: GO 79618
// result := SortListByListDesc ( units , tmp ) ;
79598: LD_ADDR_VAR 0 3
79602: PUSH
79603: LD_VAR 0 1
79607: PPUSH
79608: LD_VAR 0 5
79612: PPUSH
79613: CALL_OW 77
79617: ST_TO_ADDR
// end ;
79618: LD_VAR 0 3
79622: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79623: LD_INT 0
79625: PPUSH
79626: PPUSH
// task := GetTaskList ( mech ) ;
79627: LD_ADDR_VAR 0 4
79631: PUSH
79632: LD_VAR 0 1
79636: PPUSH
79637: CALL_OW 437
79641: ST_TO_ADDR
// if not task then
79642: LD_VAR 0 4
79646: NOT
79647: IFFALSE 79651
// exit ;
79649: GO 79693
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79651: LD_ADDR_VAR 0 3
79655: PUSH
79656: LD_VAR 0 4
79660: PUSH
79661: LD_INT 1
79663: ARRAY
79664: PUSH
79665: LD_INT 1
79667: ARRAY
79668: PUSH
79669: LD_STRING r
79671: EQUAL
79672: PUSH
79673: LD_VAR 0 4
79677: PUSH
79678: LD_INT 1
79680: ARRAY
79681: PUSH
79682: LD_INT 4
79684: ARRAY
79685: PUSH
79686: LD_VAR 0 2
79690: EQUAL
79691: AND
79692: ST_TO_ADDR
// end ;
79693: LD_VAR 0 3
79697: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79698: LD_INT 0
79700: PPUSH
// SetDir ( unit , d ) ;
79701: LD_VAR 0 1
79705: PPUSH
79706: LD_VAR 0 4
79710: PPUSH
79711: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79715: LD_VAR 0 1
79719: PPUSH
79720: LD_VAR 0 2
79724: PPUSH
79725: LD_VAR 0 3
79729: PPUSH
79730: LD_VAR 0 5
79734: PPUSH
79735: CALL_OW 48
// end ;
79739: LD_VAR 0 6
79743: RET
// export function ToNaturalNumber ( number ) ; begin
79744: LD_INT 0
79746: PPUSH
// result := number div 1 ;
79747: LD_ADDR_VAR 0 2
79751: PUSH
79752: LD_VAR 0 1
79756: PUSH
79757: LD_INT 1
79759: DIV
79760: ST_TO_ADDR
// if number < 0 then
79761: LD_VAR 0 1
79765: PUSH
79766: LD_INT 0
79768: LESS
79769: IFFALSE 79779
// result := 0 ;
79771: LD_ADDR_VAR 0 2
79775: PUSH
79776: LD_INT 0
79778: ST_TO_ADDR
// end ;
79779: LD_VAR 0 2
79783: RET
// export function SortByClass ( units , class ) ; var un ; begin
79784: LD_INT 0
79786: PPUSH
79787: PPUSH
// if not units or not class then
79788: LD_VAR 0 1
79792: NOT
79793: PUSH
79794: LD_VAR 0 2
79798: NOT
79799: OR
79800: IFFALSE 79804
// exit ;
79802: GO 79899
// result := [ ] ;
79804: LD_ADDR_VAR 0 3
79808: PUSH
79809: EMPTY
79810: ST_TO_ADDR
// for un in units do
79811: LD_ADDR_VAR 0 4
79815: PUSH
79816: LD_VAR 0 1
79820: PUSH
79821: FOR_IN
79822: IFFALSE 79897
// if GetClass ( un ) = class then
79824: LD_VAR 0 4
79828: PPUSH
79829: CALL_OW 257
79833: PUSH
79834: LD_VAR 0 2
79838: EQUAL
79839: IFFALSE 79866
// result := Insert ( result , 1 , un ) else
79841: LD_ADDR_VAR 0 3
79845: PUSH
79846: LD_VAR 0 3
79850: PPUSH
79851: LD_INT 1
79853: PPUSH
79854: LD_VAR 0 4
79858: PPUSH
79859: CALL_OW 2
79863: ST_TO_ADDR
79864: GO 79895
// result := Replace ( result , result + 1 , un ) ;
79866: LD_ADDR_VAR 0 3
79870: PUSH
79871: LD_VAR 0 3
79875: PPUSH
79876: LD_VAR 0 3
79880: PUSH
79881: LD_INT 1
79883: PLUS
79884: PPUSH
79885: LD_VAR 0 4
79889: PPUSH
79890: CALL_OW 1
79894: ST_TO_ADDR
79895: GO 79821
79897: POP
79898: POP
// end ;
79899: LD_VAR 0 3
79903: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79904: LD_INT 0
79906: PPUSH
79907: PPUSH
79908: PPUSH
79909: PPUSH
79910: PPUSH
79911: PPUSH
79912: PPUSH
// result := [ ] ;
79913: LD_ADDR_VAR 0 4
79917: PUSH
79918: EMPTY
79919: ST_TO_ADDR
// if x - r < 0 then
79920: LD_VAR 0 1
79924: PUSH
79925: LD_VAR 0 3
79929: MINUS
79930: PUSH
79931: LD_INT 0
79933: LESS
79934: IFFALSE 79946
// min_x := 0 else
79936: LD_ADDR_VAR 0 8
79940: PUSH
79941: LD_INT 0
79943: ST_TO_ADDR
79944: GO 79962
// min_x := x - r ;
79946: LD_ADDR_VAR 0 8
79950: PUSH
79951: LD_VAR 0 1
79955: PUSH
79956: LD_VAR 0 3
79960: MINUS
79961: ST_TO_ADDR
// if y - r < 0 then
79962: LD_VAR 0 2
79966: PUSH
79967: LD_VAR 0 3
79971: MINUS
79972: PUSH
79973: LD_INT 0
79975: LESS
79976: IFFALSE 79988
// min_y := 0 else
79978: LD_ADDR_VAR 0 7
79982: PUSH
79983: LD_INT 0
79985: ST_TO_ADDR
79986: GO 80004
// min_y := y - r ;
79988: LD_ADDR_VAR 0 7
79992: PUSH
79993: LD_VAR 0 2
79997: PUSH
79998: LD_VAR 0 3
80002: MINUS
80003: ST_TO_ADDR
// max_x := x + r ;
80004: LD_ADDR_VAR 0 9
80008: PUSH
80009: LD_VAR 0 1
80013: PUSH
80014: LD_VAR 0 3
80018: PLUS
80019: ST_TO_ADDR
// max_y := y + r ;
80020: LD_ADDR_VAR 0 10
80024: PUSH
80025: LD_VAR 0 2
80029: PUSH
80030: LD_VAR 0 3
80034: PLUS
80035: ST_TO_ADDR
// for _x = min_x to max_x do
80036: LD_ADDR_VAR 0 5
80040: PUSH
80041: DOUBLE
80042: LD_VAR 0 8
80046: DEC
80047: ST_TO_ADDR
80048: LD_VAR 0 9
80052: PUSH
80053: FOR_TO
80054: IFFALSE 80155
// for _y = min_y to max_y do
80056: LD_ADDR_VAR 0 6
80060: PUSH
80061: DOUBLE
80062: LD_VAR 0 7
80066: DEC
80067: ST_TO_ADDR
80068: LD_VAR 0 10
80072: PUSH
80073: FOR_TO
80074: IFFALSE 80151
// begin if not ValidHex ( _x , _y ) then
80076: LD_VAR 0 5
80080: PPUSH
80081: LD_VAR 0 6
80085: PPUSH
80086: CALL_OW 488
80090: NOT
80091: IFFALSE 80095
// continue ;
80093: GO 80073
// if GetResourceTypeXY ( _x , _y ) then
80095: LD_VAR 0 5
80099: PPUSH
80100: LD_VAR 0 6
80104: PPUSH
80105: CALL_OW 283
80109: IFFALSE 80149
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80111: LD_ADDR_VAR 0 4
80115: PUSH
80116: LD_VAR 0 4
80120: PPUSH
80121: LD_VAR 0 4
80125: PUSH
80126: LD_INT 1
80128: PLUS
80129: PPUSH
80130: LD_VAR 0 5
80134: PUSH
80135: LD_VAR 0 6
80139: PUSH
80140: EMPTY
80141: LIST
80142: LIST
80143: PPUSH
80144: CALL_OW 1
80148: ST_TO_ADDR
// end ;
80149: GO 80073
80151: POP
80152: POP
80153: GO 80053
80155: POP
80156: POP
// end ;
80157: LD_VAR 0 4
80161: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80162: LD_INT 0
80164: PPUSH
80165: PPUSH
80166: PPUSH
80167: PPUSH
80168: PPUSH
80169: PPUSH
80170: PPUSH
80171: PPUSH
// if not units then
80172: LD_VAR 0 1
80176: NOT
80177: IFFALSE 80181
// exit ;
80179: GO 80705
// result := UnitFilter ( units , [ f_ok ] ) ;
80181: LD_ADDR_VAR 0 3
80185: PUSH
80186: LD_VAR 0 1
80190: PPUSH
80191: LD_INT 50
80193: PUSH
80194: EMPTY
80195: LIST
80196: PPUSH
80197: CALL_OW 72
80201: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80202: LD_ADDR_VAR 0 8
80206: PUSH
80207: LD_VAR 0 1
80211: PUSH
80212: LD_INT 1
80214: ARRAY
80215: PPUSH
80216: CALL_OW 255
80220: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80221: LD_ADDR_VAR 0 10
80225: PUSH
80226: LD_INT 29
80228: PUSH
80229: LD_INT 91
80231: PUSH
80232: LD_INT 49
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: LIST
80239: ST_TO_ADDR
// if not result then
80240: LD_VAR 0 3
80244: NOT
80245: IFFALSE 80249
// exit ;
80247: GO 80705
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80249: LD_ADDR_VAR 0 5
80253: PUSH
80254: LD_INT 81
80256: PUSH
80257: LD_VAR 0 8
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: PPUSH
80266: CALL_OW 69
80270: ST_TO_ADDR
// for i in result do
80271: LD_ADDR_VAR 0 4
80275: PUSH
80276: LD_VAR 0 3
80280: PUSH
80281: FOR_IN
80282: IFFALSE 80703
// begin tag := GetTag ( i ) + 1 ;
80284: LD_ADDR_VAR 0 9
80288: PUSH
80289: LD_VAR 0 4
80293: PPUSH
80294: CALL_OW 110
80298: PUSH
80299: LD_INT 1
80301: PLUS
80302: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80303: LD_ADDR_VAR 0 7
80307: PUSH
80308: LD_VAR 0 4
80312: PPUSH
80313: CALL_OW 250
80317: PPUSH
80318: LD_VAR 0 4
80322: PPUSH
80323: CALL_OW 251
80327: PPUSH
80328: LD_INT 6
80330: PPUSH
80331: CALL 79904 0 3
80335: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80336: LD_VAR 0 4
80340: PPUSH
80341: CALL_OW 247
80345: PUSH
80346: LD_INT 2
80348: EQUAL
80349: PUSH
80350: LD_VAR 0 7
80354: AND
80355: PUSH
80356: LD_VAR 0 4
80360: PPUSH
80361: CALL_OW 264
80365: PUSH
80366: LD_VAR 0 10
80370: IN
80371: NOT
80372: AND
80373: IFFALSE 80412
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80375: LD_VAR 0 4
80379: PPUSH
80380: LD_VAR 0 7
80384: PUSH
80385: LD_INT 1
80387: ARRAY
80388: PUSH
80389: LD_INT 1
80391: ARRAY
80392: PPUSH
80393: LD_VAR 0 7
80397: PUSH
80398: LD_INT 1
80400: ARRAY
80401: PUSH
80402: LD_INT 2
80404: ARRAY
80405: PPUSH
80406: CALL_OW 116
80410: GO 80701
// if path > tag then
80412: LD_VAR 0 2
80416: PUSH
80417: LD_VAR 0 9
80421: GREATER
80422: IFFALSE 80630
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80424: LD_ADDR_VAR 0 6
80428: PUSH
80429: LD_VAR 0 5
80433: PPUSH
80434: LD_INT 91
80436: PUSH
80437: LD_VAR 0 4
80441: PUSH
80442: LD_INT 8
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: LIST
80449: PPUSH
80450: CALL_OW 72
80454: ST_TO_ADDR
// if nearEnemy then
80455: LD_VAR 0 6
80459: IFFALSE 80528
// begin if GetWeapon ( i ) = ru_time_lapser then
80461: LD_VAR 0 4
80465: PPUSH
80466: CALL_OW 264
80470: PUSH
80471: LD_INT 49
80473: EQUAL
80474: IFFALSE 80502
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80476: LD_VAR 0 4
80480: PPUSH
80481: LD_VAR 0 6
80485: PPUSH
80486: LD_VAR 0 4
80490: PPUSH
80491: CALL_OW 74
80495: PPUSH
80496: CALL_OW 112
80500: GO 80526
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80502: LD_VAR 0 4
80506: PPUSH
80507: LD_VAR 0 6
80511: PPUSH
80512: LD_VAR 0 4
80516: PPUSH
80517: CALL_OW 74
80521: PPUSH
80522: CALL_OW 115
// end else
80526: GO 80628
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80528: LD_VAR 0 4
80532: PPUSH
80533: LD_VAR 0 2
80537: PUSH
80538: LD_VAR 0 9
80542: ARRAY
80543: PUSH
80544: LD_INT 1
80546: ARRAY
80547: PPUSH
80548: LD_VAR 0 2
80552: PUSH
80553: LD_VAR 0 9
80557: ARRAY
80558: PUSH
80559: LD_INT 2
80561: ARRAY
80562: PPUSH
80563: CALL_OW 297
80567: PUSH
80568: LD_INT 6
80570: GREATER
80571: IFFALSE 80614
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80573: LD_VAR 0 4
80577: PPUSH
80578: LD_VAR 0 2
80582: PUSH
80583: LD_VAR 0 9
80587: ARRAY
80588: PUSH
80589: LD_INT 1
80591: ARRAY
80592: PPUSH
80593: LD_VAR 0 2
80597: PUSH
80598: LD_VAR 0 9
80602: ARRAY
80603: PUSH
80604: LD_INT 2
80606: ARRAY
80607: PPUSH
80608: CALL_OW 114
80612: GO 80628
// SetTag ( i , tag ) ;
80614: LD_VAR 0 4
80618: PPUSH
80619: LD_VAR 0 9
80623: PPUSH
80624: CALL_OW 109
// end else
80628: GO 80701
// if enemy then
80630: LD_VAR 0 5
80634: IFFALSE 80701
// begin if GetWeapon ( i ) = ru_time_lapser then
80636: LD_VAR 0 4
80640: PPUSH
80641: CALL_OW 264
80645: PUSH
80646: LD_INT 49
80648: EQUAL
80649: IFFALSE 80677
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80651: LD_VAR 0 4
80655: PPUSH
80656: LD_VAR 0 5
80660: PPUSH
80661: LD_VAR 0 4
80665: PPUSH
80666: CALL_OW 74
80670: PPUSH
80671: CALL_OW 112
80675: GO 80701
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80677: LD_VAR 0 4
80681: PPUSH
80682: LD_VAR 0 5
80686: PPUSH
80687: LD_VAR 0 4
80691: PPUSH
80692: CALL_OW 74
80696: PPUSH
80697: CALL_OW 115
// end ; end ;
80701: GO 80281
80703: POP
80704: POP
// end ;
80705: LD_VAR 0 3
80709: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80710: LD_INT 0
80712: PPUSH
80713: PPUSH
80714: PPUSH
// if not unit or IsInUnit ( unit ) then
80715: LD_VAR 0 1
80719: NOT
80720: PUSH
80721: LD_VAR 0 1
80725: PPUSH
80726: CALL_OW 310
80730: OR
80731: IFFALSE 80735
// exit ;
80733: GO 80826
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80735: LD_ADDR_VAR 0 4
80739: PUSH
80740: LD_VAR 0 1
80744: PPUSH
80745: CALL_OW 250
80749: PPUSH
80750: LD_VAR 0 2
80754: PPUSH
80755: LD_INT 1
80757: PPUSH
80758: CALL_OW 272
80762: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80763: LD_ADDR_VAR 0 5
80767: PUSH
80768: LD_VAR 0 1
80772: PPUSH
80773: CALL_OW 251
80777: PPUSH
80778: LD_VAR 0 2
80782: PPUSH
80783: LD_INT 1
80785: PPUSH
80786: CALL_OW 273
80790: ST_TO_ADDR
// if ValidHex ( x , y ) then
80791: LD_VAR 0 4
80795: PPUSH
80796: LD_VAR 0 5
80800: PPUSH
80801: CALL_OW 488
80805: IFFALSE 80826
// ComTurnXY ( unit , x , y ) ;
80807: LD_VAR 0 1
80811: PPUSH
80812: LD_VAR 0 4
80816: PPUSH
80817: LD_VAR 0 5
80821: PPUSH
80822: CALL_OW 118
// end ;
80826: LD_VAR 0 3
80830: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80831: LD_INT 0
80833: PPUSH
80834: PPUSH
// result := false ;
80835: LD_ADDR_VAR 0 3
80839: PUSH
80840: LD_INT 0
80842: ST_TO_ADDR
// if not units then
80843: LD_VAR 0 2
80847: NOT
80848: IFFALSE 80852
// exit ;
80850: GO 80897
// for i in units do
80852: LD_ADDR_VAR 0 4
80856: PUSH
80857: LD_VAR 0 2
80861: PUSH
80862: FOR_IN
80863: IFFALSE 80895
// if See ( side , i ) then
80865: LD_VAR 0 1
80869: PPUSH
80870: LD_VAR 0 4
80874: PPUSH
80875: CALL_OW 292
80879: IFFALSE 80893
// begin result := true ;
80881: LD_ADDR_VAR 0 3
80885: PUSH
80886: LD_INT 1
80888: ST_TO_ADDR
// exit ;
80889: POP
80890: POP
80891: GO 80897
// end ;
80893: GO 80862
80895: POP
80896: POP
// end ;
80897: LD_VAR 0 3
80901: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80902: LD_INT 0
80904: PPUSH
80905: PPUSH
80906: PPUSH
80907: PPUSH
// if not unit or not points then
80908: LD_VAR 0 1
80912: NOT
80913: PUSH
80914: LD_VAR 0 2
80918: NOT
80919: OR
80920: IFFALSE 80924
// exit ;
80922: GO 81014
// dist := 99999 ;
80924: LD_ADDR_VAR 0 5
80928: PUSH
80929: LD_INT 99999
80931: ST_TO_ADDR
// for i in points do
80932: LD_ADDR_VAR 0 4
80936: PUSH
80937: LD_VAR 0 2
80941: PUSH
80942: FOR_IN
80943: IFFALSE 81012
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80945: LD_ADDR_VAR 0 6
80949: PUSH
80950: LD_VAR 0 1
80954: PPUSH
80955: LD_VAR 0 4
80959: PUSH
80960: LD_INT 1
80962: ARRAY
80963: PPUSH
80964: LD_VAR 0 4
80968: PUSH
80969: LD_INT 2
80971: ARRAY
80972: PPUSH
80973: CALL_OW 297
80977: ST_TO_ADDR
// if tmpDist < dist then
80978: LD_VAR 0 6
80982: PUSH
80983: LD_VAR 0 5
80987: LESS
80988: IFFALSE 81010
// begin result := i ;
80990: LD_ADDR_VAR 0 3
80994: PUSH
80995: LD_VAR 0 4
80999: ST_TO_ADDR
// dist := tmpDist ;
81000: LD_ADDR_VAR 0 5
81004: PUSH
81005: LD_VAR 0 6
81009: ST_TO_ADDR
// end ; end ;
81010: GO 80942
81012: POP
81013: POP
// end ;
81014: LD_VAR 0 3
81018: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81019: LD_INT 0
81021: PPUSH
// uc_side := side ;
81022: LD_ADDR_OWVAR 20
81026: PUSH
81027: LD_VAR 0 1
81031: ST_TO_ADDR
// uc_nation := 3 ;
81032: LD_ADDR_OWVAR 21
81036: PUSH
81037: LD_INT 3
81039: ST_TO_ADDR
// vc_chassis := 25 ;
81040: LD_ADDR_OWVAR 37
81044: PUSH
81045: LD_INT 25
81047: ST_TO_ADDR
// vc_engine := engine_siberite ;
81048: LD_ADDR_OWVAR 39
81052: PUSH
81053: LD_INT 3
81055: ST_TO_ADDR
// vc_control := control_computer ;
81056: LD_ADDR_OWVAR 38
81060: PUSH
81061: LD_INT 3
81063: ST_TO_ADDR
// vc_weapon := 59 ;
81064: LD_ADDR_OWVAR 40
81068: PUSH
81069: LD_INT 59
81071: ST_TO_ADDR
// result := CreateVehicle ;
81072: LD_ADDR_VAR 0 5
81076: PUSH
81077: CALL_OW 45
81081: ST_TO_ADDR
// SetDir ( result , d ) ;
81082: LD_VAR 0 5
81086: PPUSH
81087: LD_VAR 0 4
81091: PPUSH
81092: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81096: LD_VAR 0 5
81100: PPUSH
81101: LD_VAR 0 2
81105: PPUSH
81106: LD_VAR 0 3
81110: PPUSH
81111: LD_INT 0
81113: PPUSH
81114: CALL_OW 48
// end ;
81118: LD_VAR 0 5
81122: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81123: LD_INT 0
81125: PPUSH
81126: PPUSH
81127: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81128: LD_ADDR_VAR 0 2
81132: PUSH
81133: LD_INT 0
81135: PUSH
81136: LD_INT 0
81138: PUSH
81139: LD_INT 0
81141: PUSH
81142: LD_INT 0
81144: PUSH
81145: EMPTY
81146: LIST
81147: LIST
81148: LIST
81149: LIST
81150: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81151: LD_VAR 0 1
81155: NOT
81156: PUSH
81157: LD_VAR 0 1
81161: PPUSH
81162: CALL_OW 264
81166: PUSH
81167: LD_INT 12
81169: PUSH
81170: LD_INT 51
81172: PUSH
81173: LD_INT 32
81175: PUSH
81176: LD_INT 89
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: LIST
81183: LIST
81184: IN
81185: NOT
81186: OR
81187: IFFALSE 81191
// exit ;
81189: GO 81289
// for i := 1 to 3 do
81191: LD_ADDR_VAR 0 3
81195: PUSH
81196: DOUBLE
81197: LD_INT 1
81199: DEC
81200: ST_TO_ADDR
81201: LD_INT 3
81203: PUSH
81204: FOR_TO
81205: IFFALSE 81287
// begin tmp := GetCargo ( cargo , i ) ;
81207: LD_ADDR_VAR 0 4
81211: PUSH
81212: LD_VAR 0 1
81216: PPUSH
81217: LD_VAR 0 3
81221: PPUSH
81222: CALL_OW 289
81226: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81227: LD_ADDR_VAR 0 2
81231: PUSH
81232: LD_VAR 0 2
81236: PPUSH
81237: LD_VAR 0 3
81241: PPUSH
81242: LD_VAR 0 4
81246: PPUSH
81247: CALL_OW 1
81251: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81252: LD_ADDR_VAR 0 2
81256: PUSH
81257: LD_VAR 0 2
81261: PPUSH
81262: LD_INT 4
81264: PPUSH
81265: LD_VAR 0 2
81269: PUSH
81270: LD_INT 4
81272: ARRAY
81273: PUSH
81274: LD_VAR 0 4
81278: PLUS
81279: PPUSH
81280: CALL_OW 1
81284: ST_TO_ADDR
// end ;
81285: GO 81204
81287: POP
81288: POP
// end ;
81289: LD_VAR 0 2
81293: RET
// export function Length ( array ) ; begin
81294: LD_INT 0
81296: PPUSH
// result := array + 0 ;
81297: LD_ADDR_VAR 0 2
81301: PUSH
81302: LD_VAR 0 1
81306: PUSH
81307: LD_INT 0
81309: PLUS
81310: ST_TO_ADDR
// end ;
81311: LD_VAR 0 2
81315: RET
// export function PrepareArray ( array ) ; begin
81316: LD_INT 0
81318: PPUSH
// result := array diff 0 ;
81319: LD_ADDR_VAR 0 2
81323: PUSH
81324: LD_VAR 0 1
81328: PUSH
81329: LD_INT 0
81331: DIFF
81332: ST_TO_ADDR
// if not result [ 1 ] then
81333: LD_VAR 0 2
81337: PUSH
81338: LD_INT 1
81340: ARRAY
81341: NOT
81342: IFFALSE 81362
// result := Delete ( result , 1 ) ;
81344: LD_ADDR_VAR 0 2
81348: PUSH
81349: LD_VAR 0 2
81353: PPUSH
81354: LD_INT 1
81356: PPUSH
81357: CALL_OW 3
81361: ST_TO_ADDR
// end ;
81362: LD_VAR 0 2
81366: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81367: LD_INT 0
81369: PPUSH
81370: PPUSH
81371: PPUSH
81372: PPUSH
// sibRocketRange := 25 ;
81373: LD_ADDR_VAR 0 6
81377: PUSH
81378: LD_INT 25
81380: ST_TO_ADDR
// result := false ;
81381: LD_ADDR_VAR 0 4
81385: PUSH
81386: LD_INT 0
81388: ST_TO_ADDR
// for i := 0 to 5 do
81389: LD_ADDR_VAR 0 5
81393: PUSH
81394: DOUBLE
81395: LD_INT 0
81397: DEC
81398: ST_TO_ADDR
81399: LD_INT 5
81401: PUSH
81402: FOR_TO
81403: IFFALSE 81470
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81405: LD_VAR 0 1
81409: PPUSH
81410: LD_VAR 0 5
81414: PPUSH
81415: LD_VAR 0 6
81419: PPUSH
81420: CALL_OW 272
81424: PPUSH
81425: LD_VAR 0 2
81429: PPUSH
81430: LD_VAR 0 5
81434: PPUSH
81435: LD_VAR 0 6
81439: PPUSH
81440: CALL_OW 273
81444: PPUSH
81445: LD_VAR 0 3
81449: PPUSH
81450: CALL_OW 309
81454: IFFALSE 81468
// begin result := true ;
81456: LD_ADDR_VAR 0 4
81460: PUSH
81461: LD_INT 1
81463: ST_TO_ADDR
// exit ;
81464: POP
81465: POP
81466: GO 81472
// end ;
81468: GO 81402
81470: POP
81471: POP
// end ;
81472: LD_VAR 0 4
81476: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81477: LD_INT 0
81479: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81480: LD_VAR 0 1
81484: PPUSH
81485: LD_VAR 0 2
81489: PPUSH
81490: LD_INT 0
81492: PPUSH
81493: LD_INT 0
81495: PPUSH
81496: LD_INT 1
81498: PPUSH
81499: LD_INT 0
81501: PPUSH
81502: CALL_OW 587
// end ;
81506: LD_VAR 0 3
81510: RET
// export function CenterOnNow ( unit ) ; begin
81511: LD_INT 0
81513: PPUSH
// result := IsInUnit ( unit ) ;
81514: LD_ADDR_VAR 0 2
81518: PUSH
81519: LD_VAR 0 1
81523: PPUSH
81524: CALL_OW 310
81528: ST_TO_ADDR
// if not result then
81529: LD_VAR 0 2
81533: NOT
81534: IFFALSE 81546
// result := unit ;
81536: LD_ADDR_VAR 0 2
81540: PUSH
81541: LD_VAR 0 1
81545: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81546: LD_VAR 0 1
81550: PPUSH
81551: CALL_OW 87
// end ;
81555: LD_VAR 0 2
81559: RET
// export function ComMoveHex ( unit , hex ) ; begin
81560: LD_INT 0
81562: PPUSH
// if not hex then
81563: LD_VAR 0 2
81567: NOT
81568: IFFALSE 81572
// exit ;
81570: GO 81625
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81572: LD_VAR 0 2
81576: PUSH
81577: LD_INT 1
81579: ARRAY
81580: PPUSH
81581: LD_VAR 0 2
81585: PUSH
81586: LD_INT 2
81588: ARRAY
81589: PPUSH
81590: CALL_OW 428
81594: IFFALSE 81598
// exit ;
81596: GO 81625
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81598: LD_VAR 0 1
81602: PPUSH
81603: LD_VAR 0 2
81607: PUSH
81608: LD_INT 1
81610: ARRAY
81611: PPUSH
81612: LD_VAR 0 2
81616: PUSH
81617: LD_INT 2
81619: ARRAY
81620: PPUSH
81621: CALL_OW 111
// end ; end_of_file
81625: LD_VAR 0 3
81629: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81630: LD_VAR 0 1
81634: PUSH
81635: LD_INT 200
81637: DOUBLE
81638: GREATEREQUAL
81639: IFFALSE 81647
81641: LD_INT 299
81643: DOUBLE
81644: LESSEQUAL
81645: IFTRUE 81649
81647: GO 81681
81649: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81650: LD_VAR 0 1
81654: PPUSH
81655: LD_VAR 0 2
81659: PPUSH
81660: LD_VAR 0 3
81664: PPUSH
81665: LD_VAR 0 4
81669: PPUSH
81670: LD_VAR 0 5
81674: PPUSH
81675: CALL 36353 0 5
81679: GO 81758
81681: LD_INT 300
81683: DOUBLE
81684: GREATEREQUAL
81685: IFFALSE 81693
81687: LD_INT 399
81689: DOUBLE
81690: LESSEQUAL
81691: IFTRUE 81695
81693: GO 81757
81695: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81696: LD_VAR 0 1
81700: PPUSH
81701: LD_VAR 0 2
81705: PPUSH
81706: LD_VAR 0 3
81710: PPUSH
81711: LD_VAR 0 4
81715: PPUSH
81716: LD_VAR 0 5
81720: PPUSH
81721: LD_VAR 0 6
81725: PPUSH
81726: LD_VAR 0 7
81730: PPUSH
81731: LD_VAR 0 8
81735: PPUSH
81736: LD_VAR 0 9
81740: PPUSH
81741: LD_VAR 0 10
81745: PPUSH
81746: LD_VAR 0 11
81750: PPUSH
81751: CALL 32686 0 11
81755: GO 81758
81757: POP
// end ;
81758: PPOPN 11
81760: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81761: LD_VAR 0 1
81765: PPUSH
81766: LD_VAR 0 2
81770: PPUSH
81771: LD_VAR 0 3
81775: PPUSH
81776: LD_VAR 0 4
81780: PPUSH
81781: LD_VAR 0 5
81785: PPUSH
81786: CALL 36089 0 5
// end ; end_of_file
81790: PPOPN 5
81792: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81793: LD_VAR 0 1
81797: PPUSH
81798: LD_VAR 0 2
81802: PPUSH
81803: LD_VAR 0 3
81807: PPUSH
81808: LD_VAR 0 4
81812: PPUSH
81813: LD_VAR 0 5
81817: PPUSH
81818: LD_VAR 0 6
81822: PPUSH
81823: CALL 20338 0 6
// end ;
81827: PPOPN 6
81829: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81830: LD_INT 0
81832: PPUSH
// begin if not units then
81833: LD_VAR 0 1
81837: NOT
81838: IFFALSE 81842
// exit ;
81840: GO 81842
// end ;
81842: PPOPN 7
81844: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81845: CALL 20242 0 0
// end ;
81849: PPOPN 1
81851: END
