// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 38950 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1657 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 38978 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6497 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 38978 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 ;
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 95
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 3
 538: PUSH
 539: LD_INT 60
 541: PUSH
 542: EMPTY
 543: LIST
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: PPUSH
 554: CALL_OW 69
 558: PUSH
 559: LD_INT 5
 561: GREATEREQUAL
 562: IFFALSE 509
// wait ( 0 0$1 ) ;
 564: LD_INT 35
 566: PPUSH
 567: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 571: LD_EXP 2
 575: PPUSH
 576: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 580: LD_EXP 3
 584: PPUSH
 585: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 589: LD_INT 10
 591: PPUSH
 592: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 596: LD_EXP 3
 600: PPUSH
 601: LD_INT 52
 603: PPUSH
 604: LD_INT 42
 606: PPUSH
 607: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 611: LD_EXP 2
 615: PPUSH
 616: LD_INT 52
 618: PPUSH
 619: LD_INT 42
 621: PPUSH
 622: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 626: LD_EXP 3
 630: PPUSH
 631: LD_INT 68
 633: PPUSH
 634: LD_INT 55
 636: PPUSH
 637: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 641: LD_EXP 2
 645: PPUSH
 646: LD_INT 68
 648: PPUSH
 649: LD_INT 58
 651: PPUSH
 652: CALL_OW 171
// AddComTurnXY ( Powell , 73 , 54 ) ;
 656: LD_EXP 3
 660: PPUSH
 661: LD_INT 73
 663: PPUSH
 664: LD_INT 54
 666: PPUSH
 667: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 671: LD_EXP 2
 675: PPUSH
 676: LD_INT 74
 678: PPUSH
 679: LD_INT 58
 681: PPUSH
 682: CALL_OW 178
// ComExitVehicle ( people [ 4 ] ) ;
 686: LD_EXP 5
 690: PUSH
 691: LD_INT 4
 693: ARRAY
 694: PPUSH
 695: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 699: LD_EXP 5
 703: PUSH
 704: LD_INT 5
 706: ARRAY
 707: PPUSH
 708: CALL_OW 121
// wait ( 0 0$02 ) ;
 712: LD_INT 70
 714: PPUSH
 715: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 719: LD_EXP 5
 723: PUSH
 724: LD_INT 4
 726: ARRAY
 727: PPUSH
 728: LD_INT 50
 730: PPUSH
 731: LD_INT 40
 733: PPUSH
 734: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 738: LD_EXP 5
 742: PUSH
 743: LD_INT 5
 745: ARRAY
 746: PPUSH
 747: LD_INT 49
 749: PPUSH
 750: LD_INT 59
 752: PPUSH
 753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 757: LD_INT 35
 759: PPUSH
 760: CALL_OW 67
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 764: LD_EXP 3
 768: PPUSH
 769: LD_INT 68
 771: PPUSH
 772: LD_INT 55
 774: PPUSH
 775: CALL_OW 307
 779: PUSH
 780: LD_EXP 2
 784: PPUSH
 785: LD_INT 68
 787: PPUSH
 788: LD_INT 58
 790: PPUSH
 791: CALL_OW 307
 795: AND
 796: IFFALSE 757
// CenterNowOnUnits ( JMM ) ;
 798: LD_EXP 2
 802: PPUSH
 803: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 807: LD_EXP 3
 811: PPUSH
 812: LD_STRING D1-Pow-1
 814: PPUSH
 815: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 819: LD_EXP 2
 823: PPUSH
 824: LD_STRING D1-JMM-1
 826: PPUSH
 827: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 831: LD_EXP 3
 835: PPUSH
 836: LD_STRING D1-Pow-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_EXP 3
 852: PPUSH
 853: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 857: LD_EXP 2
 861: PPUSH
 862: LD_STRING D1-JMM-2
 864: PPUSH
 865: CALL_OW 88
// wait ( 0 0$01 ) ;
 869: LD_INT 35
 871: PPUSH
 872: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_EXP 2
 885: PPUSH
 886: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
 890: LD_EXP 3
 894: PPUSH
 895: LD_STRING D1-Pow-3
 897: PPUSH
 898: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
 902: LD_EXP 2
 906: PPUSH
 907: LD_STRING D1-JMM-3
 909: PPUSH
 910: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
 914: LD_EXP 3
 918: PPUSH
 919: LD_STRING D1-Pow-4
 921: PPUSH
 922: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
 926: LD_EXP 2
 930: PPUSH
 931: LD_STRING D1-JMM-4
 933: PPUSH
 934: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
 938: LD_EXP 3
 942: PPUSH
 943: LD_STRING D1-Pow-5
 945: PPUSH
 946: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
 950: LD_EXP 2
 954: PPUSH
 955: LD_STRING D1-JMM-5
 957: PPUSH
 958: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING D1-Pow-6
 969: PPUSH
 970: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
 974: LD_EXP 2
 978: PPUSH
 979: LD_STRING D1-JMM-6
 981: PPUSH
 982: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
 986: LD_EXP 3
 990: PPUSH
 991: LD_STRING D1-Pow-7
 993: PPUSH
 994: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
 998: LD_EXP 2
1002: PPUSH
1003: LD_STRING D1-JMM-7
1005: PPUSH
1006: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1010: LD_EXP 3
1014: PPUSH
1015: LD_INT 68
1017: PPUSH
1018: LD_INT 57
1020: PPUSH
1021: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1025: LD_INT 10
1027: PPUSH
1028: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_INT 68
1039: PPUSH
1040: LD_INT 57
1042: PPUSH
1043: CALL_OW 307
1047: IFFALSE 1025
// ComTurnUnit ( Powell , JMM ) ;
1049: LD_EXP 3
1053: PPUSH
1054: LD_EXP 2
1058: PPUSH
1059: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1063: LD_EXP 3
1067: PPUSH
1068: LD_STRING D1-Pow-8
1070: PPUSH
1071: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1075: LD_INT 18
1077: PPUSH
1078: CALL_OW 67
// Query ( QLetter ) ;
1082: LD_STRING QLetter
1084: PPUSH
1085: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1089: LD_EXP 3
1093: PPUSH
1094: LD_STRING D1aa-Pow-1
1096: PPUSH
1097: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1101: LD_EXP 2
1105: PPUSH
1106: LD_STRING D1aa-JMM-1
1108: PPUSH
1109: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1113: LD_EXP 3
1117: PPUSH
1118: LD_STRING D1aa-Pow-2
1120: PPUSH
1121: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1125: LD_EXP 2
1129: PPUSH
1130: LD_STRING D1aa-JMM-2
1132: PPUSH
1133: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1137: LD_EXP 3
1141: PPUSH
1142: LD_STRING D1aa-Pow-3
1144: PPUSH
1145: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1149: LD_EXP 2
1153: PPUSH
1154: LD_STRING D1aa-JMM-3
1156: PPUSH
1157: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1161: LD_EXP 3
1165: PPUSH
1166: LD_INT 69
1168: PPUSH
1169: LD_INT 55
1171: PPUSH
1172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1176: LD_INT 35
1178: PPUSH
1179: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1183: LD_EXP 3
1187: PPUSH
1188: LD_INT 69
1190: PPUSH
1191: LD_INT 55
1193: PPUSH
1194: CALL_OW 307
1198: IFFALSE 1176
// ComTurnXY ( Powell , 71 , 55 ) ;
1200: LD_EXP 3
1204: PPUSH
1205: LD_INT 71
1207: PPUSH
1208: LD_INT 55
1210: PPUSH
1211: CALL_OW 118
// wait ( 0 0$2 ) ;
1215: LD_INT 70
1217: PPUSH
1218: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1222: LD_EXP 3
1226: PPUSH
1227: LD_STRING D1aa-Pow-4
1229: PPUSH
1230: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1234: LD_EXP 2
1238: PPUSH
1239: LD_STRING D1aa-JMM-4
1241: PPUSH
1242: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1246: LD_EXP 3
1250: PPUSH
1251: LD_EXP 2
1255: PPUSH
1256: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1260: LD_INT 10
1262: PPUSH
1263: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1267: LD_EXP 3
1271: PPUSH
1272: LD_STRING D1aa-Pow-5
1274: PPUSH
1275: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1279: LD_EXP 2
1283: PPUSH
1284: LD_STRING D1aa-JMM-5
1286: PPUSH
1287: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1291: LD_EXP 3
1295: PPUSH
1296: LD_STRING D1aa-Pow-6
1298: PPUSH
1299: CALL_OW 88
// wait ( 0 0$1 ) ;
1303: LD_INT 35
1305: PPUSH
1306: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1310: LD_EXP 2
1314: PPUSH
1315: LD_EXP 4
1319: PUSH
1320: LD_INT 3
1322: ARRAY
1323: PPUSH
1324: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1328: LD_INT 18
1330: PPUSH
1331: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1335: LD_EXP 3
1339: PPUSH
1340: LD_EXP 4
1344: PUSH
1345: LD_INT 2
1347: ARRAY
1348: PPUSH
1349: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1353: LD_INT 35
1355: PPUSH
1356: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1360: LD_EXP 3
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL_OW 308
1372: IFFALSE 1353
// CenterOnXY ( 42 , 40 ) ;
1374: LD_INT 42
1376: PPUSH
1377: LD_INT 40
1379: PPUSH
1380: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1384: LD_EXP 5
1388: PUSH
1389: LD_INT 4
1391: ARRAY
1392: PPUSH
1393: LD_EXP 4
1397: PUSH
1398: LD_INT 4
1400: ARRAY
1401: PPUSH
1402: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1406: LD_EXP 5
1410: PUSH
1411: LD_INT 5
1413: ARRAY
1414: PPUSH
1415: LD_EXP 4
1419: PUSH
1420: LD_INT 5
1422: ARRAY
1423: PPUSH
1424: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1428: LD_INT 35
1430: PPUSH
1431: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1435: LD_INT 22
1437: PUSH
1438: LD_INT 1
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 56
1447: PUSH
1448: EMPTY
1449: LIST
1450: PUSH
1451: LD_INT 21
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL_OW 69
1470: PUSH
1471: LD_INT 0
1473: EQUAL
1474: IFFALSE 1428
// CenterOnXY ( 36 , 35 ) ;
1476: LD_INT 36
1478: PPUSH
1479: LD_INT 35
1481: PPUSH
1482: CALL_OW 84
// for i := 1 to 5 do
1486: LD_ADDR_VAR 0 2
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_INT 5
1498: PUSH
1499: FOR_TO
1500: IFFALSE 1532
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1502: LD_EXP 4
1506: PUSH
1507: LD_VAR 0 2
1511: ARRAY
1512: PPUSH
1513: LD_INT 11
1515: PPUSH
1516: LD_INT 18
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 67
// end ;
1530: GO 1499
1532: POP
1533: POP
// wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1541: LD_STRING 1
1543: PPUSH
1544: LD_STRING %_cont
1546: PPUSH
1547: CALL_OW 340
// end ;
1551: LD_VAR 0 1
1555: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1556: LD_EXP 5
1560: PUSH
1561: LD_INT 4
1563: ARRAY
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: LD_INT 40
1570: PPUSH
1571: CALL_OW 307
1575: IFFALSE 1599
1577: GO 1579
1579: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1580: LD_EXP 5
1584: PUSH
1585: LD_INT 4
1587: ARRAY
1588: PPUSH
1589: LD_INT 51
1591: PPUSH
1592: LD_INT 40
1594: PPUSH
1595: CALL_OW 118
1599: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1600: LD_EXP 5
1604: PUSH
1605: LD_INT 5
1607: ARRAY
1608: PPUSH
1609: LD_INT 49
1611: PPUSH
1612: LD_INT 59
1614: PPUSH
1615: CALL_OW 307
1619: IFFALSE 1643
1621: GO 1623
1623: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1624: LD_EXP 5
1628: PUSH
1629: LD_INT 5
1631: ARRAY
1632: PPUSH
1633: LD_INT 51
1635: PPUSH
1636: LD_INT 67
1638: PPUSH
1639: CALL_OW 118
1643: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1644: LD_STRING 1
1646: PPUSH
1647: LD_STRING %_cont
1649: PPUSH
1650: CALL_OW 340
// end ; end_of_file
1654: PPOPN 1
1656: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1657: LD_INT 0
1659: PPUSH
1660: PPUSH
// if exist_mode then
1661: LD_VAR 0 2
1665: IFFALSE 1690
// unit := CreateCharacter ( prefix & ident ) else
1667: LD_ADDR_VAR 0 5
1671: PUSH
1672: LD_VAR 0 3
1676: PUSH
1677: LD_VAR 0 1
1681: STR
1682: PPUSH
1683: CALL_OW 34
1687: ST_TO_ADDR
1688: GO 1705
// unit := NewCharacter ( ident ) ;
1690: LD_ADDR_VAR 0 5
1694: PUSH
1695: LD_VAR 0 1
1699: PPUSH
1700: CALL_OW 25
1704: ST_TO_ADDR
// result := unit ;
1705: LD_ADDR_VAR 0 4
1709: PUSH
1710: LD_VAR 0 5
1714: ST_TO_ADDR
// end ;
1715: LD_VAR 0 4
1719: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1720: LD_INT 0
1722: PPUSH
1723: PPUSH
// if not side or not nation then
1724: LD_VAR 0 1
1728: NOT
1729: PUSH
1730: LD_VAR 0 2
1734: NOT
1735: OR
1736: IFFALSE 1740
// exit ;
1738: GO 2508
// case nation of nation_american :
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 1
1747: DOUBLE
1748: EQUAL
1749: IFTRUE 1753
1751: GO 1967
1753: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1754: LD_ADDR_VAR 0 4
1758: PUSH
1759: LD_INT 35
1761: PUSH
1762: LD_INT 45
1764: PUSH
1765: LD_INT 46
1767: PUSH
1768: LD_INT 47
1770: PUSH
1771: LD_INT 82
1773: PUSH
1774: LD_INT 83
1776: PUSH
1777: LD_INT 84
1779: PUSH
1780: LD_INT 85
1782: PUSH
1783: LD_INT 86
1785: PUSH
1786: LD_INT 1
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 6
1794: PUSH
1795: LD_INT 15
1797: PUSH
1798: LD_INT 16
1800: PUSH
1801: LD_INT 7
1803: PUSH
1804: LD_INT 12
1806: PUSH
1807: LD_INT 13
1809: PUSH
1810: LD_INT 10
1812: PUSH
1813: LD_INT 14
1815: PUSH
1816: LD_INT 20
1818: PUSH
1819: LD_INT 21
1821: PUSH
1822: LD_INT 22
1824: PUSH
1825: LD_INT 25
1827: PUSH
1828: LD_INT 32
1830: PUSH
1831: LD_INT 27
1833: PUSH
1834: LD_INT 36
1836: PUSH
1837: LD_INT 69
1839: PUSH
1840: LD_INT 39
1842: PUSH
1843: LD_INT 34
1845: PUSH
1846: LD_INT 40
1848: PUSH
1849: LD_INT 48
1851: PUSH
1852: LD_INT 49
1854: PUSH
1855: LD_INT 50
1857: PUSH
1858: LD_INT 51
1860: PUSH
1861: LD_INT 52
1863: PUSH
1864: LD_INT 53
1866: PUSH
1867: LD_INT 54
1869: PUSH
1870: LD_INT 55
1872: PUSH
1873: LD_INT 56
1875: PUSH
1876: LD_INT 57
1878: PUSH
1879: LD_INT 58
1881: PUSH
1882: LD_INT 59
1884: PUSH
1885: LD_INT 60
1887: PUSH
1888: LD_INT 61
1890: PUSH
1891: LD_INT 62
1893: PUSH
1894: LD_INT 80
1896: PUSH
1897: LD_INT 82
1899: PUSH
1900: LD_INT 83
1902: PUSH
1903: LD_INT 84
1905: PUSH
1906: LD_INT 85
1908: PUSH
1909: LD_INT 86
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: ST_TO_ADDR
1965: GO 2432
1967: LD_INT 2
1969: DOUBLE
1970: EQUAL
1971: IFTRUE 1975
1973: GO 2201
1975: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1976: LD_ADDR_VAR 0 4
1980: PUSH
1981: LD_INT 35
1983: PUSH
1984: LD_INT 45
1986: PUSH
1987: LD_INT 46
1989: PUSH
1990: LD_INT 47
1992: PUSH
1993: LD_INT 82
1995: PUSH
1996: LD_INT 83
1998: PUSH
1999: LD_INT 84
2001: PUSH
2002: LD_INT 85
2004: PUSH
2005: LD_INT 87
2007: PUSH
2008: LD_INT 70
2010: PUSH
2011: LD_INT 1
2013: PUSH
2014: LD_INT 11
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: LD_INT 4
2022: PUSH
2023: LD_INT 5
2025: PUSH
2026: LD_INT 6
2028: PUSH
2029: LD_INT 15
2031: PUSH
2032: LD_INT 18
2034: PUSH
2035: LD_INT 7
2037: PUSH
2038: LD_INT 17
2040: PUSH
2041: LD_INT 8
2043: PUSH
2044: LD_INT 20
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 22
2052: PUSH
2053: LD_INT 72
2055: PUSH
2056: LD_INT 26
2058: PUSH
2059: LD_INT 69
2061: PUSH
2062: LD_INT 39
2064: PUSH
2065: LD_INT 40
2067: PUSH
2068: LD_INT 41
2070: PUSH
2071: LD_INT 42
2073: PUSH
2074: LD_INT 43
2076: PUSH
2077: LD_INT 48
2079: PUSH
2080: LD_INT 49
2082: PUSH
2083: LD_INT 50
2085: PUSH
2086: LD_INT 51
2088: PUSH
2089: LD_INT 52
2091: PUSH
2092: LD_INT 53
2094: PUSH
2095: LD_INT 54
2097: PUSH
2098: LD_INT 55
2100: PUSH
2101: LD_INT 56
2103: PUSH
2104: LD_INT 60
2106: PUSH
2107: LD_INT 61
2109: PUSH
2110: LD_INT 62
2112: PUSH
2113: LD_INT 66
2115: PUSH
2116: LD_INT 67
2118: PUSH
2119: LD_INT 68
2121: PUSH
2122: LD_INT 81
2124: PUSH
2125: LD_INT 82
2127: PUSH
2128: LD_INT 83
2130: PUSH
2131: LD_INT 84
2133: PUSH
2134: LD_INT 85
2136: PUSH
2137: LD_INT 87
2139: PUSH
2140: LD_INT 88
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
2199: GO 2432
2201: LD_INT 3
2203: DOUBLE
2204: EQUAL
2205: IFTRUE 2209
2207: GO 2431
2209: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2210: LD_ADDR_VAR 0 4
2214: PUSH
2215: LD_INT 46
2217: PUSH
2218: LD_INT 47
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 2
2226: PUSH
2227: LD_INT 82
2229: PUSH
2230: LD_INT 83
2232: PUSH
2233: LD_INT 84
2235: PUSH
2236: LD_INT 85
2238: PUSH
2239: LD_INT 86
2241: PUSH
2242: LD_INT 11
2244: PUSH
2245: LD_INT 9
2247: PUSH
2248: LD_INT 20
2250: PUSH
2251: LD_INT 19
2253: PUSH
2254: LD_INT 21
2256: PUSH
2257: LD_INT 24
2259: PUSH
2260: LD_INT 22
2262: PUSH
2263: LD_INT 25
2265: PUSH
2266: LD_INT 28
2268: PUSH
2269: LD_INT 29
2271: PUSH
2272: LD_INT 30
2274: PUSH
2275: LD_INT 31
2277: PUSH
2278: LD_INT 37
2280: PUSH
2281: LD_INT 38
2283: PUSH
2284: LD_INT 32
2286: PUSH
2287: LD_INT 27
2289: PUSH
2290: LD_INT 33
2292: PUSH
2293: LD_INT 69
2295: PUSH
2296: LD_INT 39
2298: PUSH
2299: LD_INT 34
2301: PUSH
2302: LD_INT 40
2304: PUSH
2305: LD_INT 71
2307: PUSH
2308: LD_INT 23
2310: PUSH
2311: LD_INT 44
2313: PUSH
2314: LD_INT 48
2316: PUSH
2317: LD_INT 49
2319: PUSH
2320: LD_INT 50
2322: PUSH
2323: LD_INT 51
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 53
2331: PUSH
2332: LD_INT 54
2334: PUSH
2335: LD_INT 55
2337: PUSH
2338: LD_INT 56
2340: PUSH
2341: LD_INT 57
2343: PUSH
2344: LD_INT 58
2346: PUSH
2347: LD_INT 59
2349: PUSH
2350: LD_INT 63
2352: PUSH
2353: LD_INT 64
2355: PUSH
2356: LD_INT 65
2358: PUSH
2359: LD_INT 82
2361: PUSH
2362: LD_INT 83
2364: PUSH
2365: LD_INT 84
2367: PUSH
2368: LD_INT 85
2370: PUSH
2371: LD_INT 86
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
2429: GO 2432
2431: POP
// if state > - 1 and state < 3 then
2432: LD_VAR 0 3
2436: PUSH
2437: LD_INT 1
2439: NEG
2440: GREATER
2441: PUSH
2442: LD_VAR 0 3
2446: PUSH
2447: LD_INT 3
2449: LESS
2450: AND
2451: IFFALSE 2508
// for i in result do
2453: LD_ADDR_VAR 0 5
2457: PUSH
2458: LD_VAR 0 4
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2506
// if GetTech ( i , side ) <> state then
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_VAR 0 1
2475: PPUSH
2476: CALL_OW 321
2480: PUSH
2481: LD_VAR 0 3
2485: NONEQUAL
2486: IFFALSE 2504
// result := result diff i ;
2488: LD_ADDR_VAR 0 4
2492: PUSH
2493: LD_VAR 0 4
2497: PUSH
2498: LD_VAR 0 5
2502: DIFF
2503: ST_TO_ADDR
2504: GO 2463
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 4
2512: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// result := true ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2526: LD_ADDR_VAR 0 5
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 480
2540: ST_TO_ADDR
// if not tmp then
2541: LD_VAR 0 5
2545: NOT
2546: IFFALSE 2550
// exit ;
2548: GO 2599
// for i in tmp do
2550: LD_ADDR_VAR 0 4
2554: PUSH
2555: LD_VAR 0 5
2559: PUSH
2560: FOR_IN
2561: IFFALSE 2597
// if GetTech ( i , side ) <> state_researched then
2563: LD_VAR 0 4
2567: PPUSH
2568: LD_VAR 0 1
2572: PPUSH
2573: CALL_OW 321
2577: PUSH
2578: LD_INT 2
2580: NONEQUAL
2581: IFFALSE 2595
// begin result := false ;
2583: LD_ADDR_VAR 0 3
2587: PUSH
2588: LD_INT 0
2590: ST_TO_ADDR
// exit ;
2591: POP
2592: POP
2593: GO 2599
// end ;
2595: GO 2560
2597: POP
2598: POP
// end ;
2599: LD_VAR 0 3
2603: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2604: LD_INT 0
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
2618: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2619: LD_VAR 0 1
2623: NOT
2624: PUSH
2625: LD_VAR 0 1
2629: PPUSH
2630: CALL_OW 257
2634: PUSH
2635: LD_INT 9
2637: NONEQUAL
2638: OR
2639: IFFALSE 2643
// exit ;
2641: GO 3216
// side := GetSide ( unit ) ;
2643: LD_ADDR_VAR 0 9
2647: PUSH
2648: LD_VAR 0 1
2652: PPUSH
2653: CALL_OW 255
2657: ST_TO_ADDR
// tech_space := tech_spacanom ;
2658: LD_ADDR_VAR 0 12
2662: PUSH
2663: LD_INT 29
2665: ST_TO_ADDR
// tech_time := tech_taurad ;
2666: LD_ADDR_VAR 0 13
2670: PUSH
2671: LD_INT 28
2673: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2674: LD_ADDR_VAR 0 11
2678: PUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 310
2688: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2689: LD_VAR 0 11
2693: PPUSH
2694: CALL_OW 247
2698: PUSH
2699: LD_INT 2
2701: EQUAL
2702: IFFALSE 2706
// exit ;
2704: GO 3216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2706: LD_ADDR_VAR 0 8
2710: PUSH
2711: LD_INT 81
2713: PUSH
2714: LD_VAR 0 9
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: LD_INT 21
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: ST_TO_ADDR
// if not tmp then
2749: LD_VAR 0 8
2753: NOT
2754: IFFALSE 2758
// exit ;
2756: GO 3216
// if in_unit then
2758: LD_VAR 0 11
2762: IFFALSE 2786
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2764: LD_ADDR_VAR 0 10
2768: PUSH
2769: LD_VAR 0 8
2773: PPUSH
2774: LD_VAR 0 11
2778: PPUSH
2779: CALL_OW 74
2783: ST_TO_ADDR
2784: GO 2806
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2786: LD_ADDR_VAR 0 10
2790: PUSH
2791: LD_VAR 0 8
2795: PPUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 74
2805: ST_TO_ADDR
// if not enemy then
2806: LD_VAR 0 10
2810: NOT
2811: IFFALSE 2815
// exit ;
2813: GO 3216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2815: LD_VAR 0 11
2819: PUSH
2820: LD_VAR 0 11
2824: PPUSH
2825: LD_VAR 0 10
2829: PPUSH
2830: CALL_OW 296
2834: PUSH
2835: LD_INT 13
2837: GREATER
2838: AND
2839: PUSH
2840: LD_VAR 0 1
2844: PPUSH
2845: LD_VAR 0 10
2849: PPUSH
2850: CALL_OW 296
2854: PUSH
2855: LD_INT 12
2857: GREATER
2858: OR
2859: IFFALSE 2863
// exit ;
2861: GO 3216
// missile := [ 1 ] ;
2863: LD_ADDR_VAR 0 14
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2874: LD_VAR 0 9
2878: PPUSH
2879: LD_VAR 0 12
2883: PPUSH
2884: CALL_OW 325
2888: IFFALSE 2917
// missile := Replace ( missile , missile + 1 , 2 ) ;
2890: LD_ADDR_VAR 0 14
2894: PUSH
2895: LD_VAR 0 14
2899: PPUSH
2900: LD_VAR 0 14
2904: PUSH
2905: LD_INT 1
2907: PLUS
2908: PPUSH
2909: LD_INT 2
2911: PPUSH
2912: CALL_OW 1
2916: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2917: LD_VAR 0 9
2921: PPUSH
2922: LD_VAR 0 13
2926: PPUSH
2927: CALL_OW 325
2931: PUSH
2932: LD_VAR 0 10
2936: PPUSH
2937: CALL_OW 255
2941: PPUSH
2942: LD_VAR 0 13
2946: PPUSH
2947: CALL_OW 325
2951: NOT
2952: AND
2953: IFFALSE 2982
// missile := Replace ( missile , missile + 1 , 3 ) ;
2955: LD_ADDR_VAR 0 14
2959: PUSH
2960: LD_VAR 0 14
2964: PPUSH
2965: LD_VAR 0 14
2969: PUSH
2970: LD_INT 1
2972: PLUS
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 1
2981: ST_TO_ADDR
// if missile < 2 then
2982: LD_VAR 0 14
2986: PUSH
2987: LD_INT 2
2989: LESS
2990: IFFALSE 2994
// exit ;
2992: GO 3216
// x := GetX ( enemy ) ;
2994: LD_ADDR_VAR 0 4
2998: PUSH
2999: LD_VAR 0 10
3003: PPUSH
3004: CALL_OW 250
3008: ST_TO_ADDR
// y := GetY ( enemy ) ;
3009: LD_ADDR_VAR 0 5
3013: PUSH
3014: LD_VAR 0 10
3018: PPUSH
3019: CALL_OW 251
3023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3024: LD_ADDR_VAR 0 6
3028: PUSH
3029: LD_VAR 0 4
3033: PUSH
3034: LD_INT 1
3036: NEG
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: CALL_OW 12
3045: PLUS
3046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3047: LD_ADDR_VAR 0 7
3051: PUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: NEG
3060: PPUSH
3061: LD_INT 1
3063: PPUSH
3064: CALL_OW 12
3068: PLUS
3069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3070: LD_VAR 0 6
3074: PPUSH
3075: LD_VAR 0 7
3079: PPUSH
3080: CALL_OW 488
3084: NOT
3085: IFFALSE 3107
// begin _x := x ;
3087: LD_ADDR_VAR 0 6
3091: PUSH
3092: LD_VAR 0 4
3096: ST_TO_ADDR
// _y := y ;
3097: LD_ADDR_VAR 0 7
3101: PUSH
3102: LD_VAR 0 5
3106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_VAR 0 14
3119: PPUSH
3120: CALL_OW 12
3124: ST_TO_ADDR
// case i of 1 :
3125: LD_VAR 0 3
3129: PUSH
3130: LD_INT 1
3132: DOUBLE
3133: EQUAL
3134: IFTRUE 3138
3136: GO 3155
3138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3139: LD_VAR 0 1
3143: PPUSH
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 115
3153: GO 3216
3155: LD_INT 2
3157: DOUBLE
3158: EQUAL
3159: IFTRUE 3163
3161: GO 3185
3163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: LD_VAR 0 7
3178: PPUSH
3179: CALL_OW 153
3183: GO 3216
3185: LD_INT 3
3187: DOUBLE
3188: EQUAL
3189: IFTRUE 3193
3191: GO 3215
3193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3194: LD_VAR 0 1
3198: PPUSH
3199: LD_VAR 0 6
3203: PPUSH
3204: LD_VAR 0 7
3208: PPUSH
3209: CALL_OW 154
3213: GO 3216
3215: POP
// end ;
3216: LD_VAR 0 2
3220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
// if not unit or not building then
3229: LD_VAR 0 1
3233: NOT
3234: PUSH
3235: LD_VAR 0 2
3239: NOT
3240: OR
3241: IFFALSE 3245
// exit ;
3243: GO 3403
// x := GetX ( building ) ;
3245: LD_ADDR_VAR 0 5
3249: PUSH
3250: LD_VAR 0 2
3254: PPUSH
3255: CALL_OW 250
3259: ST_TO_ADDR
// y := GetY ( building ) ;
3260: LD_ADDR_VAR 0 6
3264: PUSH
3265: LD_VAR 0 2
3269: PPUSH
3270: CALL_OW 251
3274: ST_TO_ADDR
// for i = 0 to 5 do
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: DOUBLE
3281: LD_INT 0
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3401
// begin _x := ShiftX ( x , i , 3 ) ;
3291: LD_ADDR_VAR 0 7
3295: PUSH
3296: LD_VAR 0 5
3300: PPUSH
3301: LD_VAR 0 4
3305: PPUSH
3306: LD_INT 3
3308: PPUSH
3309: CALL_OW 272
3313: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3314: LD_ADDR_VAR 0 8
3318: PUSH
3319: LD_VAR 0 6
3323: PPUSH
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: CALL_OW 273
3336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3337: LD_VAR 0 7
3341: PPUSH
3342: LD_VAR 0 8
3346: PPUSH
3347: CALL_OW 488
3351: NOT
3352: IFFALSE 3356
// continue ;
3354: GO 3288
// if HexInfo ( _x , _y ) = 0 then
3356: LD_VAR 0 7
3360: PPUSH
3361: LD_VAR 0 8
3365: PPUSH
3366: CALL_OW 428
3370: PUSH
3371: LD_INT 0
3373: EQUAL
3374: IFFALSE 3399
// begin ComMoveXY ( unit , _x , _y ) ;
3376: LD_VAR 0 1
3380: PPUSH
3381: LD_VAR 0 7
3385: PPUSH
3386: LD_VAR 0 8
3390: PPUSH
3391: CALL_OW 111
// exit ;
3395: POP
3396: POP
3397: GO 3403
// end ; end ;
3399: GO 3288
3401: POP
3402: POP
// end ;
3403: LD_VAR 0 3
3407: RET
// export function ScanBase ( side , base_area ) ; begin
3408: LD_INT 0
3410: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: LD_VAR 0 2
3420: PPUSH
3421: LD_INT 81
3423: PUSH
3424: LD_VAR 0 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PPUSH
3433: CALL_OW 70
3437: ST_TO_ADDR
// end ;
3438: LD_VAR 0 3
3442: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3443: LD_INT 0
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
// result := false ;
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// side := GetSide ( unit ) ;
3457: LD_ADDR_VAR 0 3
3461: PUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 255
3471: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3472: LD_ADDR_VAR 0 4
3476: PUSH
3477: LD_VAR 0 1
3481: PPUSH
3482: CALL_OW 248
3486: ST_TO_ADDR
// case nat of 1 :
3487: LD_VAR 0 4
3491: PUSH
3492: LD_INT 1
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3500
3498: GO 3511
3500: POP
// tech := tech_lassight ; 2 :
3501: LD_ADDR_VAR 0 5
3505: PUSH
3506: LD_INT 12
3508: ST_TO_ADDR
3509: GO 3550
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3530
3519: POP
// tech := tech_mortar ; 3 :
3520: LD_ADDR_VAR 0 5
3524: PUSH
3525: LD_INT 41
3527: ST_TO_ADDR
3528: GO 3550
3530: LD_INT 3
3532: DOUBLE
3533: EQUAL
3534: IFTRUE 3538
3536: GO 3549
3538: POP
// tech := tech_bazooka ; end ;
3539: LD_ADDR_VAR 0 5
3543: PUSH
3544: LD_INT 44
3546: ST_TO_ADDR
3547: GO 3550
3549: POP
// if Researched ( side , tech ) then
3550: LD_VAR 0 3
3554: PPUSH
3555: LD_VAR 0 5
3559: PPUSH
3560: CALL_OW 325
3564: IFFALSE 3591
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3566: LD_ADDR_VAR 0 2
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: LD_INT 8
3576: PUSH
3577: LD_INT 9
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: PUSH
3585: LD_VAR 0 4
3589: ARRAY
3590: ST_TO_ADDR
// end ;
3591: LD_VAR 0 2
3595: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3596: LD_INT 0
3598: PPUSH
3599: PPUSH
3600: PPUSH
// if not mines then
3601: LD_VAR 0 2
3605: NOT
3606: IFFALSE 3610
// exit ;
3608: GO 3754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3610: LD_ADDR_VAR 0 5
3614: PUSH
3615: LD_INT 81
3617: PUSH
3618: LD_VAR 0 1
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 3
3629: PUSH
3630: LD_INT 21
3632: PUSH
3633: LD_INT 3
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 69
3652: ST_TO_ADDR
// for i in mines do
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: LD_VAR 0 2
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3752
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3666: LD_VAR 0 4
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 2
3682: ARRAY
3683: PPUSH
3684: CALL_OW 458
3688: NOT
3689: IFFALSE 3693
// continue ;
3691: GO 3663
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: LD_VAR 0 4
3706: PUSH
3707: LD_INT 2
3709: ARRAY
3710: PPUSH
3711: CALL_OW 428
3715: PUSH
3716: LD_VAR 0 5
3720: IN
3721: IFFALSE 3750
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3723: LD_VAR 0 4
3727: PUSH
3728: LD_INT 1
3730: ARRAY
3731: PPUSH
3732: LD_VAR 0 4
3736: PUSH
3737: LD_INT 2
3739: ARRAY
3740: PPUSH
3741: LD_VAR 0 1
3745: PPUSH
3746: CALL_OW 456
// end ;
3750: GO 3663
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 3
3758: RET
// export function Count ( array ) ; begin
3759: LD_INT 0
3761: PPUSH
// result := array + 0 ;
3762: LD_ADDR_VAR 0 2
3766: PUSH
3767: LD_VAR 0 1
3771: PUSH
3772: LD_INT 0
3774: PLUS
3775: ST_TO_ADDR
// end ;
3776: LD_VAR 0 2
3780: RET
// export function IsEmpty ( building ) ; begin
3781: LD_INT 0
3783: PPUSH
// if not building then
3784: LD_VAR 0 1
3788: NOT
3789: IFFALSE 3793
// exit ;
3791: GO 3836
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_VAR 0 1
3802: PUSH
3803: LD_INT 22
3805: PUSH
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 255
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 58
3822: PUSH
3823: EMPTY
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PPUSH
3830: CALL_OW 69
3834: IN
3835: ST_TO_ADDR
// end ;
3836: LD_VAR 0 2
3840: RET
// export function IsNotFull ( building ) ; var places ; begin
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// if not building then
3845: LD_VAR 0 1
3849: NOT
3850: IFFALSE 3854
// exit ;
3852: GO 3882
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3854: LD_ADDR_VAR 0 2
3858: PUSH
3859: LD_VAR 0 1
3863: PPUSH
3864: LD_INT 3
3866: PUSH
3867: LD_INT 62
3869: PUSH
3870: EMPTY
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 72
3881: ST_TO_ADDR
// end ;
3882: LD_VAR 0 2
3886: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3887: LD_INT 0
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
// tmp := [ ] ;
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: EMPTY
3899: ST_TO_ADDR
// list := [ ] ;
3900: LD_ADDR_VAR 0 5
3904: PUSH
3905: EMPTY
3906: ST_TO_ADDR
// for i = 16 to 25 do
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: DOUBLE
3913: LD_INT 16
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 25
3919: PUSH
3920: FOR_TO
3921: IFFALSE 3994
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_INT 22
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 255
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 91
3952: PUSH
3953: LD_VAR 0 1
3957: PUSH
3958: LD_INT 6
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 30
3968: PUSH
3969: LD_VAR 0 4
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: EMPTY
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: ADD
3991: ST_TO_ADDR
3992: GO 3920
3994: POP
3995: POP
// for i = 1 to tmp do
3996: LD_ADDR_VAR 0 4
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_VAR 0 3
4010: PUSH
4011: FOR_TO
4012: IFFALSE 4100
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_VAR 0 5
4023: PUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_VAR 0 4
4033: ARRAY
4034: PPUSH
4035: CALL_OW 266
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: LD_VAR 0 4
4049: ARRAY
4050: PPUSH
4051: CALL_OW 250
4055: PUSH
4056: LD_VAR 0 3
4060: PUSH
4061: LD_VAR 0 4
4065: ARRAY
4066: PPUSH
4067: CALL_OW 251
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: ARRAY
4082: PPUSH
4083: CALL_OW 254
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: PUSH
4094: EMPTY
4095: LIST
4096: ADD
4097: ST_TO_ADDR
4098: GO 4011
4100: POP
4101: POP
// result := list ;
4102: LD_ADDR_VAR 0 2
4106: PUSH
4107: LD_VAR 0 5
4111: ST_TO_ADDR
// end ;
4112: LD_VAR 0 2
4116: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
// if not factory then
4126: LD_VAR 0 1
4130: NOT
4131: IFFALSE 4135
// exit ;
4133: GO 4728
// if control = control_apeman then
4135: LD_VAR 0 4
4139: PUSH
4140: LD_INT 5
4142: EQUAL
4143: IFFALSE 4252
// begin tmp := UnitsInside ( factory ) ;
4145: LD_ADDR_VAR 0 8
4149: PUSH
4150: LD_VAR 0 1
4154: PPUSH
4155: CALL_OW 313
4159: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4160: LD_VAR 0 8
4164: PPUSH
4165: LD_INT 25
4167: PUSH
4168: LD_INT 12
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 72
4179: NOT
4180: IFFALSE 4190
// control := control_manual ;
4182: LD_ADDR_VAR 0 4
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4190: LD_ADDR_VAR 0 8
4194: PUSH
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL 3887 0 1
4204: ST_TO_ADDR
// if tmp then
4205: LD_VAR 0 8
4209: IFFALSE 4252
// begin for i in tmp do
4211: LD_ADDR_VAR 0 7
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: FOR_IN
4222: IFFALSE 4250
// if i [ 1 ] = b_ext_radio then
4224: LD_VAR 0 7
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PUSH
4233: LD_INT 22
4235: EQUAL
4236: IFFALSE 4248
// begin control := control_remote ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_INT 2
4245: ST_TO_ADDR
// break ;
4246: GO 4250
// end ;
4248: GO 4221
4250: POP
4251: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 2
4261: PPUSH
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_VAR 0 4
4271: PPUSH
4272: LD_VAR 0 5
4276: PPUSH
4277: CALL_OW 448
4281: IFFALSE 4316
// begin result := [ chassis , engine , control , weapon ] ;
4283: LD_ADDR_VAR 0 6
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_VAR 0 3
4297: PUSH
4298: LD_VAR 0 4
4302: PUSH
4303: LD_VAR 0 5
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: ST_TO_ADDR
// exit ;
4314: GO 4728
// end ; _chassis := AvailableChassisList ( factory ) ;
4316: LD_ADDR_VAR 0 9
4320: PUSH
4321: LD_VAR 0 1
4325: PPUSH
4326: CALL_OW 475
4330: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4331: LD_ADDR_VAR 0 11
4335: PUSH
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 476
4345: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4346: LD_ADDR_VAR 0 12
4350: PUSH
4351: LD_VAR 0 1
4355: PPUSH
4356: CALL_OW 477
4360: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4361: LD_ADDR_VAR 0 10
4365: PUSH
4366: LD_VAR 0 1
4370: PPUSH
4371: CALL_OW 478
4375: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4376: LD_VAR 0 9
4380: NOT
4381: PUSH
4382: LD_VAR 0 11
4386: NOT
4387: OR
4388: PUSH
4389: LD_VAR 0 12
4393: NOT
4394: OR
4395: PUSH
4396: LD_VAR 0 10
4400: NOT
4401: OR
4402: IFFALSE 4437
// begin result := [ chassis , engine , control , weapon ] ;
4404: LD_ADDR_VAR 0 6
4408: PUSH
4409: LD_VAR 0 2
4413: PUSH
4414: LD_VAR 0 3
4418: PUSH
4419: LD_VAR 0 4
4423: PUSH
4424: LD_VAR 0 5
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// exit ;
4435: GO 4728
// end ; if not chassis in _chassis then
4437: LD_VAR 0 2
4441: PUSH
4442: LD_VAR 0 9
4446: IN
4447: NOT
4448: IFFALSE 4474
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4450: LD_ADDR_VAR 0 2
4454: PUSH
4455: LD_VAR 0 9
4459: PUSH
4460: LD_INT 1
4462: PPUSH
4463: LD_VAR 0 9
4467: PPUSH
4468: CALL_OW 12
4472: ARRAY
4473: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4474: LD_VAR 0 2
4478: PPUSH
4479: LD_VAR 0 3
4483: PPUSH
4484: CALL 4733 0 2
4488: NOT
4489: IFFALSE 4548
// repeat engine := _engine [ 1 ] ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_VAR 0 11
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4505: LD_ADDR_VAR 0 11
4509: PUSH
4510: LD_VAR 0 11
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: CALL_OW 3
4522: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4523: LD_VAR 0 2
4527: PPUSH
4528: LD_VAR 0 3
4532: PPUSH
4533: CALL 4733 0 2
4537: PUSH
4538: LD_VAR 0 11
4542: PUSH
4543: EMPTY
4544: EQUAL
4545: OR
4546: IFFALSE 4491
// if not control in _control then
4548: LD_VAR 0 4
4552: PUSH
4553: LD_VAR 0 12
4557: IN
4558: NOT
4559: IFFALSE 4585
// control := _control [ rand ( 1 , _control ) ] ;
4561: LD_ADDR_VAR 0 4
4565: PUSH
4566: LD_VAR 0 12
4570: PUSH
4571: LD_INT 1
4573: PPUSH
4574: LD_VAR 0 12
4578: PPUSH
4579: CALL_OW 12
4583: ARRAY
4584: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4585: LD_VAR 0 2
4589: PPUSH
4590: LD_VAR 0 5
4594: PPUSH
4595: CALL 4953 0 2
4599: NOT
4600: IFFALSE 4659
// repeat weapon := _weapon [ 1 ] ;
4602: LD_ADDR_VAR 0 5
4606: PUSH
4607: LD_VAR 0 10
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4616: LD_ADDR_VAR 0 10
4620: PUSH
4621: LD_VAR 0 10
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: CALL_OW 3
4633: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4634: LD_VAR 0 2
4638: PPUSH
4639: LD_VAR 0 5
4643: PPUSH
4644: CALL 4953 0 2
4648: PUSH
4649: LD_VAR 0 10
4653: PUSH
4654: EMPTY
4655: EQUAL
4656: OR
4657: IFFALSE 4602
// result := [ ] ;
4659: LD_ADDR_VAR 0 6
4663: PUSH
4664: EMPTY
4665: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 2
4675: PPUSH
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: LD_VAR 0 5
4690: PPUSH
4691: CALL_OW 448
4695: IFFALSE 4728
// result := [ chassis , engine , control , weapon ] ;
4697: LD_ADDR_VAR 0 6
4701: PUSH
4702: LD_VAR 0 2
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_VAR 0 4
4716: PUSH
4717: LD_VAR 0 5
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
// end ;
4728: LD_VAR 0 6
4732: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4733: LD_INT 0
4735: PPUSH
// if not chassis or not engine then
4736: LD_VAR 0 1
4740: NOT
4741: PUSH
4742: LD_VAR 0 2
4746: NOT
4747: OR
4748: IFFALSE 4752
// exit ;
4750: GO 4948
// case engine of engine_solar :
4752: LD_VAR 0 2
4756: PUSH
4757: LD_INT 2
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4803
4765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_INT 11
4773: PUSH
4774: LD_INT 12
4776: PUSH
4777: LD_INT 13
4779: PUSH
4780: LD_INT 14
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: LD_INT 3
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 4932
4803: LD_INT 1
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4873
4811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 11
4819: PUSH
4820: LD_INT 12
4822: PUSH
4823: LD_INT 13
4825: PUSH
4826: LD_INT 14
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: LD_INT 2
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: LD_INT 4
4840: PUSH
4841: LD_INT 5
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 23
4849: PUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 24
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
4871: GO 4932
4873: LD_INT 3
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4931
4881: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: LD_INT 13
4889: PUSH
4890: LD_INT 14
4892: PUSH
4893: LD_INT 2
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: LD_INT 5
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: LD_INT 22
4910: PUSH
4911: LD_INT 23
4913: PUSH
4914: LD_INT 24
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: ST_TO_ADDR
4929: GO 4932
4931: POP
// result := ( chassis in result ) ;
4932: LD_ADDR_VAR 0 3
4936: PUSH
4937: LD_VAR 0 1
4941: PUSH
4942: LD_VAR 0 3
4946: IN
4947: ST_TO_ADDR
// end ;
4948: LD_VAR 0 3
4952: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4953: LD_INT 0
4955: PPUSH
// if not chassis or not weapon then
4956: LD_VAR 0 1
4960: NOT
4961: PUSH
4962: LD_VAR 0 2
4966: NOT
4967: OR
4968: IFFALSE 4972
// exit ;
4970: GO 6032
// case weapon of us_machine_gun :
4972: LD_VAR 0 2
4976: PUSH
4977: LD_INT 2
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 5015
4985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4986: LD_ADDR_VAR 0 3
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 2
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: LD_INT 4
5002: PUSH
5003: LD_INT 5
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: ST_TO_ADDR
5013: GO 6016
5015: LD_INT 3
5017: DOUBLE
5018: EQUAL
5019: IFTRUE 5023
5021: GO 5053
5023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5024: LD_ADDR_VAR 0 3
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 2
5034: PUSH
5035: LD_INT 3
5037: PUSH
5038: LD_INT 4
5040: PUSH
5041: LD_INT 5
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
5051: GO 6016
5053: LD_INT 11
5055: DOUBLE
5056: EQUAL
5057: IFTRUE 5061
5059: GO 5091
5061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: LD_INT 1
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: LD_INT 4
5078: PUSH
5079: LD_INT 5
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: ST_TO_ADDR
5089: GO 6016
5091: LD_INT 4
5093: DOUBLE
5094: EQUAL
5095: IFTRUE 5099
5097: GO 5125
5099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 2
5107: PUSH
5108: LD_INT 3
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: LD_INT 5
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: ST_TO_ADDR
5123: GO 6016
5125: LD_INT 5
5127: DOUBLE
5128: EQUAL
5129: IFTRUE 5133
5131: GO 5159
5133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 4
5147: PUSH
5148: LD_INT 5
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
5157: GO 6016
5159: LD_INT 9
5161: DOUBLE
5162: EQUAL
5163: IFTRUE 5167
5165: GO 5193
5167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_INT 2
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: LD_INT 4
5181: PUSH
5182: LD_INT 5
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: ST_TO_ADDR
5191: GO 6016
5193: LD_INT 7
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5227
5201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: LD_INT 5
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: ST_TO_ADDR
5225: GO 6016
5227: LD_INT 12
5229: DOUBLE
5230: EQUAL
5231: IFTRUE 5235
5233: GO 5261
5235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 4
5249: PUSH
5250: LD_INT 5
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
5259: GO 6016
5261: LD_INT 13
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5295
5269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: LD_INT 3
5280: PUSH
5281: LD_INT 4
5283: PUSH
5284: LD_INT 5
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: ST_TO_ADDR
5293: GO 6016
5295: LD_INT 14
5297: DOUBLE
5298: EQUAL
5299: IFTRUE 5303
5301: GO 5321
5303: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5304: LD_ADDR_VAR 0 3
5308: PUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: ST_TO_ADDR
5319: GO 6016
5321: LD_INT 6
5323: DOUBLE
5324: EQUAL
5325: IFTRUE 5329
5327: GO 5347
5329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5330: LD_ADDR_VAR 0 3
5334: PUSH
5335: LD_INT 4
5337: PUSH
5338: LD_INT 5
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: ST_TO_ADDR
5345: GO 6016
5347: LD_INT 10
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5373
5355: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5356: LD_ADDR_VAR 0 3
5360: PUSH
5361: LD_INT 4
5363: PUSH
5364: LD_INT 5
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: ST_TO_ADDR
5371: GO 6016
5373: LD_INT 22
5375: DOUBLE
5376: EQUAL
5377: IFTRUE 5381
5379: GO 5407
5381: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5382: LD_ADDR_VAR 0 3
5386: PUSH
5387: LD_INT 11
5389: PUSH
5390: LD_INT 12
5392: PUSH
5393: LD_INT 13
5395: PUSH
5396: LD_INT 14
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: ST_TO_ADDR
5405: GO 6016
5407: LD_INT 23
5409: DOUBLE
5410: EQUAL
5411: IFTRUE 5415
5413: GO 5441
5415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5416: LD_ADDR_VAR 0 3
5420: PUSH
5421: LD_INT 11
5423: PUSH
5424: LD_INT 12
5426: PUSH
5427: LD_INT 13
5429: PUSH
5430: LD_INT 14
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
5439: GO 6016
5441: LD_INT 24
5443: DOUBLE
5444: EQUAL
5445: IFTRUE 5449
5447: GO 5475
5449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_INT 11
5457: PUSH
5458: LD_INT 12
5460: PUSH
5461: LD_INT 13
5463: PUSH
5464: LD_INT 14
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 6016
5475: LD_INT 30
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5483
5481: GO 5509
5483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5484: LD_ADDR_VAR 0 3
5488: PUSH
5489: LD_INT 11
5491: PUSH
5492: LD_INT 12
5494: PUSH
5495: LD_INT 13
5497: PUSH
5498: LD_INT 14
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: ST_TO_ADDR
5507: GO 6016
5509: LD_INT 25
5511: DOUBLE
5512: EQUAL
5513: IFTRUE 5517
5515: GO 5535
5517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5518: LD_ADDR_VAR 0 3
5522: PUSH
5523: LD_INT 13
5525: PUSH
5526: LD_INT 14
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: ST_TO_ADDR
5533: GO 6016
5535: LD_INT 27
5537: DOUBLE
5538: EQUAL
5539: IFTRUE 5543
5541: GO 5561
5543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5544: LD_ADDR_VAR 0 3
5548: PUSH
5549: LD_INT 13
5551: PUSH
5552: LD_INT 14
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 6016
5561: LD_INT 92
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5595
5569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 11
5577: PUSH
5578: LD_INT 12
5580: PUSH
5581: LD_INT 13
5583: PUSH
5584: LD_INT 14
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
5593: GO 6016
5595: LD_INT 28
5597: DOUBLE
5598: EQUAL
5599: IFTRUE 5603
5601: GO 5621
5603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_INT 13
5611: PUSH
5612: LD_INT 14
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 6016
5621: LD_INT 29
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5647
5629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 13
5637: PUSH
5638: LD_INT 14
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
5645: GO 6016
5647: LD_INT 31
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5655
5653: GO 5673
5655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_INT 13
5663: PUSH
5664: LD_INT 14
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 6016
5673: LD_INT 26
5675: DOUBLE
5676: EQUAL
5677: IFTRUE 5681
5679: GO 5699
5681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: LD_INT 13
5689: PUSH
5690: LD_INT 14
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: ST_TO_ADDR
5697: GO 6016
5699: LD_INT 42
5701: DOUBLE
5702: EQUAL
5703: IFTRUE 5707
5705: GO 5733
5707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5708: LD_ADDR_VAR 0 3
5712: PUSH
5713: LD_INT 21
5715: PUSH
5716: LD_INT 22
5718: PUSH
5719: LD_INT 23
5721: PUSH
5722: LD_INT 24
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: ST_TO_ADDR
5731: GO 6016
5733: LD_INT 43
5735: DOUBLE
5736: EQUAL
5737: IFTRUE 5741
5739: GO 5767
5741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5742: LD_ADDR_VAR 0 3
5746: PUSH
5747: LD_INT 21
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 23
5755: PUSH
5756: LD_INT 24
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: ST_TO_ADDR
5765: GO 6016
5767: LD_INT 44
5769: DOUBLE
5770: EQUAL
5771: IFTRUE 5775
5773: GO 5801
5775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: LD_INT 21
5783: PUSH
5784: LD_INT 22
5786: PUSH
5787: LD_INT 23
5789: PUSH
5790: LD_INT 24
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: ST_TO_ADDR
5799: GO 6016
5801: LD_INT 45
5803: DOUBLE
5804: EQUAL
5805: IFTRUE 5809
5807: GO 5835
5809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: LD_INT 21
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_INT 23
5823: PUSH
5824: LD_INT 24
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: ST_TO_ADDR
5833: GO 6016
5835: LD_INT 49
5837: DOUBLE
5838: EQUAL
5839: IFTRUE 5843
5841: GO 5869
5843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5844: LD_ADDR_VAR 0 3
5848: PUSH
5849: LD_INT 21
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_INT 23
5857: PUSH
5858: LD_INT 24
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: ST_TO_ADDR
5867: GO 6016
5869: LD_INT 51
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5903
5877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5878: LD_ADDR_VAR 0 3
5882: PUSH
5883: LD_INT 21
5885: PUSH
5886: LD_INT 22
5888: PUSH
5889: LD_INT 23
5891: PUSH
5892: LD_INT 24
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: ST_TO_ADDR
5901: GO 6016
5903: LD_INT 52
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5937
5911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5912: LD_ADDR_VAR 0 3
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: LD_INT 22
5922: PUSH
5923: LD_INT 23
5925: PUSH
5926: LD_INT 24
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: ST_TO_ADDR
5935: GO 6016
5937: LD_INT 53
5939: DOUBLE
5940: EQUAL
5941: IFTRUE 5945
5943: GO 5963
5945: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5946: LD_ADDR_VAR 0 3
5950: PUSH
5951: LD_INT 23
5953: PUSH
5954: LD_INT 24
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: ST_TO_ADDR
5961: GO 6016
5963: LD_INT 46
5965: DOUBLE
5966: EQUAL
5967: IFTRUE 5971
5969: GO 5989
5971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5972: LD_ADDR_VAR 0 3
5976: PUSH
5977: LD_INT 23
5979: PUSH
5980: LD_INT 24
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: ST_TO_ADDR
5987: GO 6016
5989: LD_INT 47
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6015
5997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5998: LD_ADDR_VAR 0 3
6002: PUSH
6003: LD_INT 23
6005: PUSH
6006: LD_INT 24
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 6016
6015: POP
// result := ( chassis in result ) ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_VAR 0 1
6025: PUSH
6026: LD_VAR 0 3
6030: IN
6031: ST_TO_ADDR
// end ;
6032: LD_VAR 0 3
6036: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6037: LD_INT 0
6039: PPUSH
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
6045: PPUSH
// result := array ;
6046: LD_ADDR_VAR 0 5
6050: PUSH
6051: LD_VAR 0 1
6055: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6056: LD_VAR 0 1
6060: NOT
6061: PUSH
6062: LD_VAR 0 2
6066: NOT
6067: OR
6068: PUSH
6069: LD_VAR 0 3
6073: NOT
6074: OR
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_VAR 0 1
6085: GREATER
6086: OR
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 1
6097: GREATER
6098: OR
6099: IFFALSE 6103
// exit ;
6101: GO 6399
// if direction then
6103: LD_VAR 0 4
6107: IFFALSE 6171
// begin d := 1 ;
6109: LD_ADDR_VAR 0 9
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// if i_from > i_to then
6117: LD_VAR 0 2
6121: PUSH
6122: LD_VAR 0 3
6126: GREATER
6127: IFFALSE 6153
// length := ( array - i_from ) + i_to else
6129: LD_ADDR_VAR 0 11
6133: PUSH
6134: LD_VAR 0 1
6138: PUSH
6139: LD_VAR 0 2
6143: MINUS
6144: PUSH
6145: LD_VAR 0 3
6149: PLUS
6150: ST_TO_ADDR
6151: GO 6169
// length := i_to - i_from ;
6153: LD_ADDR_VAR 0 11
6157: PUSH
6158: LD_VAR 0 3
6162: PUSH
6163: LD_VAR 0 2
6167: MINUS
6168: ST_TO_ADDR
// end else
6169: GO 6232
// begin d := - 1 ;
6171: LD_ADDR_VAR 0 9
6175: PUSH
6176: LD_INT 1
6178: NEG
6179: ST_TO_ADDR
// if i_from > i_to then
6180: LD_VAR 0 2
6184: PUSH
6185: LD_VAR 0 3
6189: GREATER
6190: IFFALSE 6210
// length := i_from - i_to else
6192: LD_ADDR_VAR 0 11
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: MINUS
6207: ST_TO_ADDR
6208: GO 6232
// length := ( array - i_to ) + i_from ;
6210: LD_ADDR_VAR 0 11
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: LD_VAR 0 3
6224: MINUS
6225: PUSH
6226: LD_VAR 0 2
6230: PLUS
6231: ST_TO_ADDR
// end ; if not length then
6232: LD_VAR 0 11
6236: NOT
6237: IFFALSE 6241
// exit ;
6239: GO 6399
// tmp := array ;
6241: LD_ADDR_VAR 0 10
6245: PUSH
6246: LD_VAR 0 1
6250: ST_TO_ADDR
// for i = 1 to length do
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: DOUBLE
6257: LD_INT 1
6259: DEC
6260: ST_TO_ADDR
6261: LD_VAR 0 11
6265: PUSH
6266: FOR_TO
6267: IFFALSE 6387
// begin for j = 1 to array do
6269: LD_ADDR_VAR 0 7
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_VAR 0 1
6283: PUSH
6284: FOR_TO
6285: IFFALSE 6373
// begin k := j + d ;
6287: LD_ADDR_VAR 0 8
6291: PUSH
6292: LD_VAR 0 7
6296: PUSH
6297: LD_VAR 0 9
6301: PLUS
6302: ST_TO_ADDR
// if k > array then
6303: LD_VAR 0 8
6307: PUSH
6308: LD_VAR 0 1
6312: GREATER
6313: IFFALSE 6323
// k := 1 ;
6315: LD_ADDR_VAR 0 8
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if not k then
6323: LD_VAR 0 8
6327: NOT
6328: IFFALSE 6340
// k := array ;
6330: LD_ADDR_VAR 0 8
6334: PUSH
6335: LD_VAR 0 1
6339: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6340: LD_ADDR_VAR 0 10
6344: PUSH
6345: LD_VAR 0 10
6349: PPUSH
6350: LD_VAR 0 8
6354: PPUSH
6355: LD_VAR 0 1
6359: PUSH
6360: LD_VAR 0 7
6364: ARRAY
6365: PPUSH
6366: CALL_OW 1
6370: ST_TO_ADDR
// end ;
6371: GO 6284
6373: POP
6374: POP
// array := tmp ;
6375: LD_ADDR_VAR 0 1
6379: PUSH
6380: LD_VAR 0 10
6384: ST_TO_ADDR
// end ;
6385: GO 6266
6387: POP
6388: POP
// result := array ;
6389: LD_ADDR_VAR 0 5
6393: PUSH
6394: LD_VAR 0 1
6398: ST_TO_ADDR
// end ;
6399: LD_VAR 0 5
6403: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6404: LD_INT 0
6406: PPUSH
6407: PPUSH
// result := 0 ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 0
6415: ST_TO_ADDR
// if not array or not value in array then
6416: LD_VAR 0 1
6420: NOT
6421: PUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_VAR 0 1
6431: IN
6432: NOT
6433: OR
6434: IFFALSE 6438
// exit ;
6436: GO 6492
// for i = 1 to array do
6438: LD_ADDR_VAR 0 4
6442: PUSH
6443: DOUBLE
6444: LD_INT 1
6446: DEC
6447: ST_TO_ADDR
6448: LD_VAR 0 1
6452: PUSH
6453: FOR_TO
6454: IFFALSE 6490
// if value = array [ i ] then
6456: LD_VAR 0 2
6460: PUSH
6461: LD_VAR 0 1
6465: PUSH
6466: LD_VAR 0 4
6470: ARRAY
6471: EQUAL
6472: IFFALSE 6488
// begin result := i ;
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_VAR 0 4
6483: ST_TO_ADDR
// exit ;
6484: POP
6485: POP
6486: GO 6492
// end ;
6488: GO 6453
6490: POP
6491: POP
// end ;
6492: LD_VAR 0 3
6496: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6497: LD_INT 0
6499: PPUSH
// vc_chassis := chassis ;
6500: LD_ADDR_OWVAR 37
6504: PUSH
6505: LD_VAR 0 1
6509: ST_TO_ADDR
// vc_engine := engine ;
6510: LD_ADDR_OWVAR 39
6514: PUSH
6515: LD_VAR 0 2
6519: ST_TO_ADDR
// vc_control := control ;
6520: LD_ADDR_OWVAR 38
6524: PUSH
6525: LD_VAR 0 3
6529: ST_TO_ADDR
// vc_weapon := weapon ;
6530: LD_ADDR_OWVAR 40
6534: PUSH
6535: LD_VAR 0 4
6539: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6540: LD_ADDR_OWVAR 41
6544: PUSH
6545: LD_VAR 0 5
6549: ST_TO_ADDR
// end ;
6550: LD_VAR 0 6
6554: RET
// export function WantPlant ( unit ) ; var task ; begin
6555: LD_INT 0
6557: PPUSH
6558: PPUSH
// result := false ;
6559: LD_ADDR_VAR 0 2
6563: PUSH
6564: LD_INT 0
6566: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_VAR 0 1
6576: PPUSH
6577: CALL_OW 437
6581: ST_TO_ADDR
// if task then
6582: LD_VAR 0 3
6586: IFFALSE 6614
// if task [ 1 ] [ 1 ] = p then
6588: LD_VAR 0 3
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PUSH
6597: LD_INT 1
6599: ARRAY
6600: PUSH
6601: LD_STRING p
6603: EQUAL
6604: IFFALSE 6614
// result := true ;
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: LD_INT 1
6613: ST_TO_ADDR
// end ;
6614: LD_VAR 0 2
6618: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
6623: PPUSH
6624: PPUSH
// if pos < 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: LESS
6633: IFFALSE 6637
// exit ;
6635: GO 6940
// if pos = 1 then
6637: LD_VAR 0 2
6641: PUSH
6642: LD_INT 1
6644: EQUAL
6645: IFFALSE 6678
// result := Replace ( arr , pos [ 1 ] , value ) else
6647: LD_ADDR_VAR 0 4
6651: PUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: LD_VAR 0 2
6661: PUSH
6662: LD_INT 1
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: CALL_OW 1
6675: ST_TO_ADDR
6676: GO 6940
// begin tmp := arr ;
6678: LD_ADDR_VAR 0 6
6682: PUSH
6683: LD_VAR 0 1
6687: ST_TO_ADDR
// s_arr := [ tmp ] ;
6688: LD_ADDR_VAR 0 7
6692: PUSH
6693: LD_VAR 0 6
6697: PUSH
6698: EMPTY
6699: LIST
6700: ST_TO_ADDR
// for i = 1 to pos - 1 do
6701: LD_ADDR_VAR 0 5
6705: PUSH
6706: DOUBLE
6707: LD_INT 1
6709: DEC
6710: ST_TO_ADDR
6711: LD_VAR 0 2
6715: PUSH
6716: LD_INT 1
6718: MINUS
6719: PUSH
6720: FOR_TO
6721: IFFALSE 6766
// begin tmp := tmp [ pos [ i ] ] ;
6723: LD_ADDR_VAR 0 6
6727: PUSH
6728: LD_VAR 0 6
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 5
6742: ARRAY
6743: ARRAY
6744: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6745: LD_ADDR_VAR 0 7
6749: PUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 6
6759: PUSH
6760: EMPTY
6761: LIST
6762: ADD
6763: ST_TO_ADDR
// end ;
6764: GO 6720
6766: POP
6767: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6768: LD_ADDR_VAR 0 6
6772: PUSH
6773: LD_VAR 0 6
6777: PPUSH
6778: LD_VAR 0 2
6782: PUSH
6783: LD_VAR 0 2
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PPUSH
6794: CALL_OW 1
6798: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6799: LD_ADDR_VAR 0 7
6803: PUSH
6804: LD_VAR 0 7
6808: PPUSH
6809: LD_VAR 0 7
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 1
6823: ST_TO_ADDR
// for i = s_arr downto 2 do
6824: LD_ADDR_VAR 0 5
6828: PUSH
6829: DOUBLE
6830: LD_VAR 0 7
6834: INC
6835: ST_TO_ADDR
6836: LD_INT 2
6838: PUSH
6839: FOR_DOWNTO
6840: IFFALSE 6924
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: LD_VAR 0 7
6851: PUSH
6852: LD_VAR 0 5
6856: PUSH
6857: LD_INT 1
6859: MINUS
6860: ARRAY
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_VAR 0 5
6871: PUSH
6872: LD_INT 1
6874: MINUS
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 7
6881: PUSH
6882: LD_VAR 0 5
6886: ARRAY
6887: PPUSH
6888: CALL_OW 1
6892: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6893: LD_ADDR_VAR 0 7
6897: PUSH
6898: LD_VAR 0 7
6902: PPUSH
6903: LD_VAR 0 5
6907: PUSH
6908: LD_INT 1
6910: MINUS
6911: PPUSH
6912: LD_VAR 0 6
6916: PPUSH
6917: CALL_OW 1
6921: ST_TO_ADDR
// end ;
6922: GO 6839
6924: POP
6925: POP
// result := s_arr [ 1 ] ;
6926: LD_ADDR_VAR 0 4
6930: PUSH
6931: LD_VAR 0 7
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: ST_TO_ADDR
// end ; end ;
6940: LD_VAR 0 4
6944: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
// if not list then
6949: LD_VAR 0 1
6953: NOT
6954: IFFALSE 6958
// exit ;
6956: GO 7049
// i := list [ pos1 ] ;
6958: LD_ADDR_VAR 0 5
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: LD_VAR 0 2
6972: ARRAY
6973: ST_TO_ADDR
// if not i then
6974: LD_VAR 0 5
6978: NOT
6979: IFFALSE 6983
// exit ;
6981: GO 7049
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_VAR 0 2
6997: PPUSH
6998: LD_VAR 0 1
7002: PUSH
7003: LD_VAR 0 3
7007: ARRAY
7008: PPUSH
7009: CALL_OW 1
7013: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7014: LD_ADDR_VAR 0 1
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: LD_VAR 0 5
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// result := list ;
7039: LD_ADDR_VAR 0 4
7043: PUSH
7044: LD_VAR 0 1
7048: ST_TO_ADDR
// end ;
7049: LD_VAR 0 4
7053: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7054: LD_INT 0
7056: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7057: LD_ADDR_VAR 0 5
7061: PUSH
7062: LD_VAR 0 1
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_VAR 0 2
7086: PPUSH
7087: LD_VAR 0 3
7091: PPUSH
7092: LD_VAR 0 4
7096: PPUSH
7097: CALL 7107 0 5
7101: ST_TO_ADDR
// end ;
7102: LD_VAR 0 5
7106: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7107: LD_INT 0
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
// if not list then
7113: LD_VAR 0 3
7117: NOT
7118: IFFALSE 7122
// exit ;
7120: GO 7510
// result := [ ] ;
7122: LD_ADDR_VAR 0 6
7126: PUSH
7127: EMPTY
7128: ST_TO_ADDR
// for i in list do
7129: LD_ADDR_VAR 0 7
7133: PUSH
7134: LD_VAR 0 3
7138: PUSH
7139: FOR_IN
7140: IFFALSE 7342
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7142: LD_ADDR_VAR 0 9
7146: PUSH
7147: LD_VAR 0 7
7151: PPUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: CALL_OW 297
7166: ST_TO_ADDR
// if not result then
7167: LD_VAR 0 6
7171: NOT
7172: IFFALSE 7198
// result := [ [ i , tmp ] ] else
7174: LD_ADDR_VAR 0 6
7178: PUSH
7179: LD_VAR 0 7
7183: PUSH
7184: LD_VAR 0 9
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: ST_TO_ADDR
7196: GO 7340
// begin if result [ result ] [ 2 ] < tmp then
7198: LD_VAR 0 6
7202: PUSH
7203: LD_VAR 0 6
7207: ARRAY
7208: PUSH
7209: LD_INT 2
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 9
7217: LESS
7218: IFFALSE 7260
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7220: LD_ADDR_VAR 0 6
7224: PUSH
7225: LD_VAR 0 6
7229: PPUSH
7230: LD_VAR 0 6
7234: PUSH
7235: LD_INT 1
7237: PLUS
7238: PPUSH
7239: LD_VAR 0 7
7243: PUSH
7244: LD_VAR 0 9
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PPUSH
7253: CALL_OW 2
7257: ST_TO_ADDR
7258: GO 7340
// for j = 1 to result do
7260: LD_ADDR_VAR 0 8
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_VAR 0 6
7274: PUSH
7275: FOR_TO
7276: IFFALSE 7338
// begin if tmp < result [ j ] [ 2 ] then
7278: LD_VAR 0 9
7282: PUSH
7283: LD_VAR 0 6
7287: PUSH
7288: LD_VAR 0 8
7292: ARRAY
7293: PUSH
7294: LD_INT 2
7296: ARRAY
7297: LESS
7298: IFFALSE 7336
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7300: LD_ADDR_VAR 0 6
7304: PUSH
7305: LD_VAR 0 6
7309: PPUSH
7310: LD_VAR 0 8
7314: PPUSH
7315: LD_VAR 0 7
7319: PUSH
7320: LD_VAR 0 9
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PPUSH
7329: CALL_OW 2
7333: ST_TO_ADDR
// break ;
7334: GO 7338
// end ; end ;
7336: GO 7275
7338: POP
7339: POP
// end ; end ;
7340: GO 7139
7342: POP
7343: POP
// if result and not asc then
7344: LD_VAR 0 6
7348: PUSH
7349: LD_VAR 0 4
7353: NOT
7354: AND
7355: IFFALSE 7430
// begin tmp := result ;
7357: LD_ADDR_VAR 0 9
7361: PUSH
7362: LD_VAR 0 6
7366: ST_TO_ADDR
// for i = tmp downto 1 do
7367: LD_ADDR_VAR 0 7
7371: PUSH
7372: DOUBLE
7373: LD_VAR 0 9
7377: INC
7378: ST_TO_ADDR
7379: LD_INT 1
7381: PUSH
7382: FOR_DOWNTO
7383: IFFALSE 7428
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7385: LD_ADDR_VAR 0 6
7389: PUSH
7390: LD_VAR 0 6
7394: PPUSH
7395: LD_VAR 0 9
7399: PUSH
7400: LD_VAR 0 7
7404: MINUS
7405: PUSH
7406: LD_INT 1
7408: PLUS
7409: PPUSH
7410: LD_VAR 0 9
7414: PUSH
7415: LD_VAR 0 7
7419: ARRAY
7420: PPUSH
7421: CALL_OW 1
7425: ST_TO_ADDR
7426: GO 7382
7428: POP
7429: POP
// end ; tmp := [ ] ;
7430: LD_ADDR_VAR 0 9
7434: PUSH
7435: EMPTY
7436: ST_TO_ADDR
// if mode then
7437: LD_VAR 0 5
7441: IFFALSE 7510
// begin for i = 1 to result do
7443: LD_ADDR_VAR 0 7
7447: PUSH
7448: DOUBLE
7449: LD_INT 1
7451: DEC
7452: ST_TO_ADDR
7453: LD_VAR 0 6
7457: PUSH
7458: FOR_TO
7459: IFFALSE 7498
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7461: LD_ADDR_VAR 0 9
7465: PUSH
7466: LD_VAR 0 9
7470: PPUSH
7471: LD_VAR 0 7
7475: PPUSH
7476: LD_VAR 0 6
7480: PUSH
7481: LD_VAR 0 7
7485: ARRAY
7486: PUSH
7487: LD_INT 1
7489: ARRAY
7490: PPUSH
7491: CALL_OW 1
7495: ST_TO_ADDR
7496: GO 7458
7498: POP
7499: POP
// result := tmp ;
7500: LD_ADDR_VAR 0 6
7504: PUSH
7505: LD_VAR 0 9
7509: ST_TO_ADDR
// end ; end ;
7510: LD_VAR 0 6
7514: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7515: LD_INT 0
7517: PPUSH
7518: PPUSH
7519: PPUSH
7520: PPUSH
7521: PPUSH
7522: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7523: LD_ADDR_VAR 0 5
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: LD_INT 0
7533: PUSH
7534: LD_INT 0
7536: PUSH
7537: EMPTY
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// if not x or not y then
7545: LD_VAR 0 2
7549: NOT
7550: PUSH
7551: LD_VAR 0 3
7555: NOT
7556: OR
7557: IFFALSE 7561
// exit ;
7559: GO 9211
// if not range then
7561: LD_VAR 0 4
7565: NOT
7566: IFFALSE 7576
// range := 10 ;
7568: LD_ADDR_VAR 0 4
7572: PUSH
7573: LD_INT 10
7575: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7576: LD_ADDR_VAR 0 8
7580: PUSH
7581: LD_INT 81
7583: PUSH
7584: LD_VAR 0 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 92
7595: PUSH
7596: LD_VAR 0 2
7600: PUSH
7601: LD_VAR 0 3
7605: PUSH
7606: LD_VAR 0 4
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 21
7622: PUSH
7623: LD_INT 3
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: ST_TO_ADDR
// if not tmp then
7644: LD_VAR 0 8
7648: NOT
7649: IFFALSE 7653
// exit ;
7651: GO 9211
// for i in tmp do
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_VAR 0 8
7662: PUSH
7663: FOR_IN
7664: IFFALSE 9186
// begin points := [ 0 , 0 , 0 ] ;
7666: LD_ADDR_VAR 0 9
7670: PUSH
7671: LD_INT 0
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: ST_TO_ADDR
// bpoints := 1 ;
7685: LD_ADDR_VAR 0 10
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7693: LD_VAR 0 6
7697: PPUSH
7698: CALL_OW 247
7702: PUSH
7703: LD_INT 1
7705: DOUBLE
7706: EQUAL
7707: IFTRUE 7711
7709: GO 8289
7711: POP
// begin if GetClass ( i ) = 1 then
7712: LD_VAR 0 6
7716: PPUSH
7717: CALL_OW 257
7721: PUSH
7722: LD_INT 1
7724: EQUAL
7725: IFFALSE 7746
// points := [ 10 , 5 , 3 ] ;
7727: LD_ADDR_VAR 0 9
7731: PUSH
7732: LD_INT 10
7734: PUSH
7735: LD_INT 5
7737: PUSH
7738: LD_INT 3
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7746: LD_VAR 0 6
7750: PPUSH
7751: CALL_OW 257
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: LD_INT 3
7761: PUSH
7762: LD_INT 4
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: LIST
7769: IN
7770: IFFALSE 7791
// points := [ 3 , 2 , 1 ] ;
7772: LD_ADDR_VAR 0 9
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 1
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7791: LD_VAR 0 6
7795: PPUSH
7796: CALL_OW 257
7800: PUSH
7801: LD_INT 5
7803: EQUAL
7804: IFFALSE 7825
// points := [ 130 , 5 , 2 ] ;
7806: LD_ADDR_VAR 0 9
7810: PUSH
7811: LD_INT 130
7813: PUSH
7814: LD_INT 5
7816: PUSH
7817: LD_INT 2
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7825: LD_VAR 0 6
7829: PPUSH
7830: CALL_OW 257
7834: PUSH
7835: LD_INT 8
7837: EQUAL
7838: IFFALSE 7859
// points := [ 35 , 35 , 30 ] ;
7840: LD_ADDR_VAR 0 9
7844: PUSH
7845: LD_INT 35
7847: PUSH
7848: LD_INT 35
7850: PUSH
7851: LD_INT 30
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7859: LD_VAR 0 6
7863: PPUSH
7864: CALL_OW 257
7868: PUSH
7869: LD_INT 9
7871: EQUAL
7872: IFFALSE 7893
// points := [ 20 , 55 , 40 ] ;
7874: LD_ADDR_VAR 0 9
7878: PUSH
7879: LD_INT 20
7881: PUSH
7882: LD_INT 55
7884: PUSH
7885: LD_INT 40
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7893: LD_VAR 0 6
7897: PPUSH
7898: CALL_OW 257
7902: PUSH
7903: LD_INT 12
7905: PUSH
7906: LD_INT 16
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: IN
7913: IFFALSE 7934
// points := [ 5 , 3 , 2 ] ;
7915: LD_ADDR_VAR 0 9
7919: PUSH
7920: LD_INT 5
7922: PUSH
7923: LD_INT 3
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7934: LD_VAR 0 6
7938: PPUSH
7939: CALL_OW 257
7943: PUSH
7944: LD_INT 17
7946: EQUAL
7947: IFFALSE 7968
// points := [ 100 , 50 , 75 ] ;
7949: LD_ADDR_VAR 0 9
7953: PUSH
7954: LD_INT 100
7956: PUSH
7957: LD_INT 50
7959: PUSH
7960: LD_INT 75
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7968: LD_VAR 0 6
7972: PPUSH
7973: CALL_OW 257
7977: PUSH
7978: LD_INT 15
7980: EQUAL
7981: IFFALSE 8002
// points := [ 10 , 5 , 3 ] ;
7983: LD_ADDR_VAR 0 9
7987: PUSH
7988: LD_INT 10
7990: PUSH
7991: LD_INT 5
7993: PUSH
7994: LD_INT 3
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8002: LD_VAR 0 6
8006: PPUSH
8007: CALL_OW 257
8011: PUSH
8012: LD_INT 14
8014: EQUAL
8015: IFFALSE 8036
// points := [ 10 , 0 , 0 ] ;
8017: LD_ADDR_VAR 0 9
8021: PUSH
8022: LD_INT 10
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8036: LD_VAR 0 6
8040: PPUSH
8041: CALL_OW 257
8045: PUSH
8046: LD_INT 11
8048: EQUAL
8049: IFFALSE 8070
// points := [ 30 , 10 , 5 ] ;
8051: LD_ADDR_VAR 0 9
8055: PUSH
8056: LD_INT 30
8058: PUSH
8059: LD_INT 10
8061: PUSH
8062: LD_INT 5
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8070: LD_VAR 0 1
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: CALL_OW 321
8082: PUSH
8083: LD_INT 2
8085: EQUAL
8086: IFFALSE 8103
// bpoints := bpoints * 1.8 ;
8088: LD_ADDR_VAR 0 10
8092: PUSH
8093: LD_VAR 0 10
8097: PUSH
8098: LD_REAL  1.80000000000000E+0000
8101: MUL
8102: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8103: LD_VAR 0 6
8107: PPUSH
8108: CALL_OW 257
8112: PUSH
8113: LD_INT 1
8115: PUSH
8116: LD_INT 2
8118: PUSH
8119: LD_INT 3
8121: PUSH
8122: LD_INT 4
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: IN
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: LD_INT 51
8139: PPUSH
8140: CALL_OW 321
8144: PUSH
8145: LD_INT 2
8147: EQUAL
8148: AND
8149: IFFALSE 8166
// bpoints := bpoints * 1.2 ;
8151: LD_ADDR_VAR 0 10
8155: PUSH
8156: LD_VAR 0 10
8160: PUSH
8161: LD_REAL  1.20000000000000E+0000
8164: MUL
8165: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8166: LD_VAR 0 6
8170: PPUSH
8171: CALL_OW 257
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 7
8181: PUSH
8182: LD_INT 9
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: IN
8190: PUSH
8191: LD_VAR 0 1
8195: PPUSH
8196: LD_INT 52
8198: PPUSH
8199: CALL_OW 321
8203: PUSH
8204: LD_INT 2
8206: EQUAL
8207: AND
8208: IFFALSE 8225
// bpoints := bpoints * 1.5 ;
8210: LD_ADDR_VAR 0 10
8214: PUSH
8215: LD_VAR 0 10
8219: PUSH
8220: LD_REAL  1.50000000000000E+0000
8223: MUL
8224: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8225: LD_VAR 0 1
8229: PPUSH
8230: LD_INT 66
8232: PPUSH
8233: CALL_OW 321
8237: PUSH
8238: LD_INT 2
8240: EQUAL
8241: IFFALSE 8258
// bpoints := bpoints * 1.1 ;
8243: LD_ADDR_VAR 0 10
8247: PUSH
8248: LD_VAR 0 10
8252: PUSH
8253: LD_REAL  1.10000000000000E+0000
8256: MUL
8257: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8258: LD_ADDR_VAR 0 10
8262: PUSH
8263: LD_VAR 0 10
8267: PUSH
8268: LD_VAR 0 6
8272: PPUSH
8273: LD_INT 1
8275: PPUSH
8276: CALL_OW 259
8280: PUSH
8281: LD_REAL  1.15000000000000E+0000
8284: MUL
8285: MUL
8286: ST_TO_ADDR
// end ; unit_vehicle :
8287: GO 9115
8289: LD_INT 2
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 9103
8297: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8298: LD_VAR 0 6
8302: PPUSH
8303: CALL_OW 264
8307: PUSH
8308: LD_INT 2
8310: PUSH
8311: LD_INT 42
8313: PUSH
8314: LD_INT 24
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: IN
8322: IFFALSE 8343
// points := [ 25 , 5 , 3 ] ;
8324: LD_ADDR_VAR 0 9
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 5
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8343: LD_VAR 0 6
8347: PPUSH
8348: CALL_OW 264
8352: PUSH
8353: LD_INT 4
8355: PUSH
8356: LD_INT 43
8358: PUSH
8359: LD_INT 25
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: IN
8367: IFFALSE 8388
// points := [ 40 , 15 , 5 ] ;
8369: LD_ADDR_VAR 0 9
8373: PUSH
8374: LD_INT 40
8376: PUSH
8377: LD_INT 15
8379: PUSH
8380: LD_INT 5
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8388: LD_VAR 0 6
8392: PPUSH
8393: CALL_OW 264
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: LD_INT 23
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: IN
8408: IFFALSE 8429
// points := [ 7 , 25 , 8 ] ;
8410: LD_ADDR_VAR 0 9
8414: PUSH
8415: LD_INT 7
8417: PUSH
8418: LD_INT 25
8420: PUSH
8421: LD_INT 8
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8429: LD_VAR 0 6
8433: PPUSH
8434: CALL_OW 264
8438: PUSH
8439: LD_INT 5
8441: PUSH
8442: LD_INT 27
8444: PUSH
8445: LD_INT 44
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: IN
8453: IFFALSE 8474
// points := [ 14 , 50 , 16 ] ;
8455: LD_ADDR_VAR 0 9
8459: PUSH
8460: LD_INT 14
8462: PUSH
8463: LD_INT 50
8465: PUSH
8466: LD_INT 16
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: LIST
8473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8474: LD_VAR 0 6
8478: PPUSH
8479: CALL_OW 264
8483: PUSH
8484: LD_INT 6
8486: PUSH
8487: LD_INT 46
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: IN
8494: IFFALSE 8515
// points := [ 32 , 120 , 70 ] ;
8496: LD_ADDR_VAR 0 9
8500: PUSH
8501: LD_INT 32
8503: PUSH
8504: LD_INT 120
8506: PUSH
8507: LD_INT 70
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8515: LD_VAR 0 6
8519: PPUSH
8520: CALL_OW 264
8524: PUSH
8525: LD_INT 7
8527: PUSH
8528: LD_INT 28
8530: PUSH
8531: LD_INT 45
8533: PUSH
8534: LD_INT 92
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: IN
8543: IFFALSE 8564
// points := [ 35 , 20 , 45 ] ;
8545: LD_ADDR_VAR 0 9
8549: PUSH
8550: LD_INT 35
8552: PUSH
8553: LD_INT 20
8555: PUSH
8556: LD_INT 45
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8564: LD_VAR 0 6
8568: PPUSH
8569: CALL_OW 264
8573: PUSH
8574: LD_INT 47
8576: PUSH
8577: EMPTY
8578: LIST
8579: IN
8580: IFFALSE 8601
// points := [ 67 , 45 , 75 ] ;
8582: LD_ADDR_VAR 0 9
8586: PUSH
8587: LD_INT 67
8589: PUSH
8590: LD_INT 45
8592: PUSH
8593: LD_INT 75
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8601: LD_VAR 0 6
8605: PPUSH
8606: CALL_OW 264
8610: PUSH
8611: LD_INT 26
8613: PUSH
8614: EMPTY
8615: LIST
8616: IN
8617: IFFALSE 8638
// points := [ 120 , 30 , 80 ] ;
8619: LD_ADDR_VAR 0 9
8623: PUSH
8624: LD_INT 120
8626: PUSH
8627: LD_INT 30
8629: PUSH
8630: LD_INT 80
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8638: LD_VAR 0 6
8642: PPUSH
8643: CALL_OW 264
8647: PUSH
8648: LD_INT 22
8650: PUSH
8651: EMPTY
8652: LIST
8653: IN
8654: IFFALSE 8675
// points := [ 40 , 1 , 1 ] ;
8656: LD_ADDR_VAR 0 9
8660: PUSH
8661: LD_INT 40
8663: PUSH
8664: LD_INT 1
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: LIST
8674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 264
8684: PUSH
8685: LD_INT 29
8687: PUSH
8688: EMPTY
8689: LIST
8690: IN
8691: IFFALSE 8712
// points := [ 70 , 200 , 400 ] ;
8693: LD_ADDR_VAR 0 9
8697: PUSH
8698: LD_INT 70
8700: PUSH
8701: LD_INT 200
8703: PUSH
8704: LD_INT 400
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8712: LD_VAR 0 6
8716: PPUSH
8717: CALL_OW 264
8721: PUSH
8722: LD_INT 14
8724: PUSH
8725: LD_INT 53
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: IN
8732: IFFALSE 8753
// points := [ 40 , 10 , 20 ] ;
8734: LD_ADDR_VAR 0 9
8738: PUSH
8739: LD_INT 40
8741: PUSH
8742: LD_INT 10
8744: PUSH
8745: LD_INT 20
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8753: LD_VAR 0 6
8757: PPUSH
8758: CALL_OW 264
8762: PUSH
8763: LD_INT 9
8765: PUSH
8766: EMPTY
8767: LIST
8768: IN
8769: IFFALSE 8790
// points := [ 5 , 70 , 20 ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 5
8778: PUSH
8779: LD_INT 70
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8790: LD_VAR 0 6
8794: PPUSH
8795: CALL_OW 264
8799: PUSH
8800: LD_INT 10
8802: PUSH
8803: EMPTY
8804: LIST
8805: IN
8806: IFFALSE 8827
// points := [ 35 , 110 , 70 ] ;
8808: LD_ADDR_VAR 0 9
8812: PUSH
8813: LD_INT 35
8815: PUSH
8816: LD_INT 110
8818: PUSH
8819: LD_INT 70
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8827: LD_VAR 0 6
8831: PPUSH
8832: CALL_OW 265
8836: PUSH
8837: LD_INT 25
8839: EQUAL
8840: IFFALSE 8861
// points := [ 80 , 65 , 100 ] ;
8842: LD_ADDR_VAR 0 9
8846: PUSH
8847: LD_INT 80
8849: PUSH
8850: LD_INT 65
8852: PUSH
8853: LD_INT 100
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8861: LD_VAR 0 6
8865: PPUSH
8866: CALL_OW 263
8870: PUSH
8871: LD_INT 1
8873: EQUAL
8874: IFFALSE 8909
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8876: LD_ADDR_VAR 0 10
8880: PUSH
8881: LD_VAR 0 10
8885: PUSH
8886: LD_VAR 0 6
8890: PPUSH
8891: CALL_OW 311
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: CALL_OW 259
8903: PUSH
8904: LD_INT 4
8906: MUL
8907: MUL
8908: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8909: LD_VAR 0 6
8913: PPUSH
8914: CALL_OW 263
8918: PUSH
8919: LD_INT 2
8921: EQUAL
8922: IFFALSE 8973
// begin j := IsControledBy ( i ) ;
8924: LD_ADDR_VAR 0 7
8928: PUSH
8929: LD_VAR 0 6
8933: PPUSH
8934: CALL_OW 312
8938: ST_TO_ADDR
// if j then
8939: LD_VAR 0 7
8943: IFFALSE 8973
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8945: LD_ADDR_VAR 0 10
8949: PUSH
8950: LD_VAR 0 10
8954: PUSH
8955: LD_VAR 0 7
8959: PPUSH
8960: LD_INT 3
8962: PPUSH
8963: CALL_OW 259
8967: PUSH
8968: LD_INT 3
8970: MUL
8971: MUL
8972: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8973: LD_VAR 0 6
8977: PPUSH
8978: CALL_OW 264
8982: PUSH
8983: LD_INT 5
8985: PUSH
8986: LD_INT 6
8988: PUSH
8989: LD_INT 46
8991: PUSH
8992: LD_INT 44
8994: PUSH
8995: LD_INT 47
8997: PUSH
8998: LD_INT 45
9000: PUSH
9001: LD_INT 28
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: LD_INT 27
9009: PUSH
9010: LD_INT 29
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: IN
9025: PUSH
9026: LD_VAR 0 1
9030: PPUSH
9031: LD_INT 52
9033: PPUSH
9034: CALL_OW 321
9038: PUSH
9039: LD_INT 2
9041: EQUAL
9042: AND
9043: IFFALSE 9060
// bpoints := bpoints * 1.2 ;
9045: LD_ADDR_VAR 0 10
9049: PUSH
9050: LD_VAR 0 10
9054: PUSH
9055: LD_REAL  1.20000000000000E+0000
9058: MUL
9059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9060: LD_VAR 0 6
9064: PPUSH
9065: CALL_OW 264
9069: PUSH
9070: LD_INT 6
9072: PUSH
9073: LD_INT 46
9075: PUSH
9076: LD_INT 47
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: IN
9084: IFFALSE 9101
// bpoints := bpoints * 1.2 ;
9086: LD_ADDR_VAR 0 10
9090: PUSH
9091: LD_VAR 0 10
9095: PUSH
9096: LD_REAL  1.20000000000000E+0000
9099: MUL
9100: ST_TO_ADDR
// end ; unit_building :
9101: GO 9115
9103: LD_INT 3
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9114
9111: POP
// ; end ;
9112: GO 9115
9114: POP
// for j = 1 to 3 do
9115: LD_ADDR_VAR 0 7
9119: PUSH
9120: DOUBLE
9121: LD_INT 1
9123: DEC
9124: ST_TO_ADDR
9125: LD_INT 3
9127: PUSH
9128: FOR_TO
9129: IFFALSE 9182
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9131: LD_ADDR_VAR 0 5
9135: PUSH
9136: LD_VAR 0 5
9140: PPUSH
9141: LD_VAR 0 7
9145: PPUSH
9146: LD_VAR 0 5
9150: PUSH
9151: LD_VAR 0 7
9155: ARRAY
9156: PUSH
9157: LD_VAR 0 9
9161: PUSH
9162: LD_VAR 0 7
9166: ARRAY
9167: PUSH
9168: LD_VAR 0 10
9172: MUL
9173: PLUS
9174: PPUSH
9175: CALL_OW 1
9179: ST_TO_ADDR
9180: GO 9128
9182: POP
9183: POP
// end ;
9184: GO 7663
9186: POP
9187: POP
// result := Replace ( result , 4 , tmp ) ;
9188: LD_ADDR_VAR 0 5
9192: PUSH
9193: LD_VAR 0 5
9197: PPUSH
9198: LD_INT 4
9200: PPUSH
9201: LD_VAR 0 8
9205: PPUSH
9206: CALL_OW 1
9210: ST_TO_ADDR
// end ;
9211: LD_VAR 0 5
9215: RET
// export function DangerAtRange ( unit , range ) ; begin
9216: LD_INT 0
9218: PPUSH
// if not unit then
9219: LD_VAR 0 1
9223: NOT
9224: IFFALSE 9228
// exit ;
9226: GO 9273
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9228: LD_ADDR_VAR 0 3
9232: PUSH
9233: LD_VAR 0 1
9237: PPUSH
9238: CALL_OW 255
9242: PPUSH
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 250
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 251
9262: PPUSH
9263: LD_VAR 0 2
9267: PPUSH
9268: CALL 7515 0 4
9272: ST_TO_ADDR
// end ;
9273: LD_VAR 0 3
9277: RET
// export function DangerInArea ( side , area ) ; begin
9278: LD_INT 0
9280: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9281: LD_ADDR_VAR 0 3
9285: PUSH
9286: LD_VAR 0 2
9290: PPUSH
9291: LD_INT 81
9293: PUSH
9294: LD_VAR 0 1
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 70
9307: ST_TO_ADDR
// end ;
9308: LD_VAR 0 3
9312: RET
// export function IsExtension ( b ) ; begin
9313: LD_INT 0
9315: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9316: LD_ADDR_VAR 0 2
9320: PUSH
9321: LD_VAR 0 1
9325: PUSH
9326: LD_INT 23
9328: PUSH
9329: LD_INT 20
9331: PUSH
9332: LD_INT 22
9334: PUSH
9335: LD_INT 17
9337: PUSH
9338: LD_INT 24
9340: PUSH
9341: LD_INT 21
9343: PUSH
9344: LD_INT 19
9346: PUSH
9347: LD_INT 16
9349: PUSH
9350: LD_INT 25
9352: PUSH
9353: LD_INT 18
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: IN
9368: ST_TO_ADDR
// end ;
9369: LD_VAR 0 2
9373: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9374: LD_INT 0
9376: PPUSH
9377: PPUSH
9378: PPUSH
// result := [ ] ;
9379: LD_ADDR_VAR 0 4
9383: PUSH
9384: EMPTY
9385: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9386: LD_ADDR_VAR 0 5
9390: PUSH
9391: LD_VAR 0 2
9395: PPUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 70
9410: ST_TO_ADDR
// if not tmp then
9411: LD_VAR 0 5
9415: NOT
9416: IFFALSE 9420
// exit ;
9418: GO 9484
// if checkLink then
9420: LD_VAR 0 3
9424: IFFALSE 9474
// begin for i in tmp do
9426: LD_ADDR_VAR 0 6
9430: PUSH
9431: LD_VAR 0 5
9435: PUSH
9436: FOR_IN
9437: IFFALSE 9472
// if GetBase ( i ) <> base then
9439: LD_VAR 0 6
9443: PPUSH
9444: CALL_OW 274
9448: PUSH
9449: LD_VAR 0 1
9453: NONEQUAL
9454: IFFALSE 9470
// ComLinkToBase ( base , i ) ;
9456: LD_VAR 0 1
9460: PPUSH
9461: LD_VAR 0 6
9465: PPUSH
9466: CALL_OW 169
9470: GO 9436
9472: POP
9473: POP
// end ; result := tmp ;
9474: LD_ADDR_VAR 0 4
9478: PUSH
9479: LD_VAR 0 5
9483: ST_TO_ADDR
// end ;
9484: LD_VAR 0 4
9488: RET
// export function ComComplete ( units , b ) ; var i ; begin
9489: LD_INT 0
9491: PPUSH
9492: PPUSH
// if not units then
9493: LD_VAR 0 1
9497: NOT
9498: IFFALSE 9502
// exit ;
9500: GO 9592
// for i in units do
9502: LD_ADDR_VAR 0 4
9506: PUSH
9507: LD_VAR 0 1
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9590
// if BuildingStatus ( b ) = bs_build then
9515: LD_VAR 0 2
9519: PPUSH
9520: CALL_OW 461
9524: PUSH
9525: LD_INT 1
9527: EQUAL
9528: IFFALSE 9588
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9530: LD_VAR 0 4
9534: PPUSH
9535: LD_STRING h
9537: PUSH
9538: LD_VAR 0 2
9542: PPUSH
9543: CALL_OW 250
9547: PUSH
9548: LD_VAR 0 2
9552: PPUSH
9553: CALL_OW 251
9557: PUSH
9558: LD_VAR 0 2
9562: PUSH
9563: LD_INT 0
9565: PUSH
9566: LD_INT 0
9568: PUSH
9569: LD_INT 0
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: PPUSH
9584: CALL_OW 446
9588: GO 9512
9590: POP
9591: POP
// end ;
9592: LD_VAR 0 3
9596: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9597: LD_INT 0
9599: PPUSH
9600: PPUSH
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9605: LD_VAR 0 1
9609: NOT
9610: PUSH
9611: LD_VAR 0 1
9615: PPUSH
9616: CALL_OW 263
9620: PUSH
9621: LD_INT 2
9623: NONEQUAL
9624: OR
9625: IFFALSE 9629
// exit ;
9627: GO 9945
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9629: LD_ADDR_VAR 0 6
9633: PUSH
9634: LD_INT 22
9636: PUSH
9637: LD_VAR 0 1
9641: PPUSH
9642: CALL_OW 255
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 2
9653: PUSH
9654: LD_INT 30
9656: PUSH
9657: LD_INT 36
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 34
9666: PUSH
9667: LD_INT 31
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PPUSH
9683: CALL_OW 69
9687: ST_TO_ADDR
// if not tmp then
9688: LD_VAR 0 6
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9945
// result := [ ] ;
9697: LD_ADDR_VAR 0 2
9701: PUSH
9702: EMPTY
9703: ST_TO_ADDR
// for i in tmp do
9704: LD_ADDR_VAR 0 3
9708: PUSH
9709: LD_VAR 0 6
9713: PUSH
9714: FOR_IN
9715: IFFALSE 9786
// begin t := UnitsInside ( i ) ;
9717: LD_ADDR_VAR 0 4
9721: PUSH
9722: LD_VAR 0 3
9726: PPUSH
9727: CALL_OW 313
9731: ST_TO_ADDR
// if t then
9732: LD_VAR 0 4
9736: IFFALSE 9784
// for j in t do
9738: LD_ADDR_VAR 0 7
9742: PUSH
9743: LD_VAR 0 4
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9782
// result := Replace ( result , result + 1 , j ) ;
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: LD_VAR 0 2
9760: PPUSH
9761: LD_VAR 0 2
9765: PUSH
9766: LD_INT 1
9768: PLUS
9769: PPUSH
9770: LD_VAR 0 7
9774: PPUSH
9775: CALL_OW 1
9779: ST_TO_ADDR
9780: GO 9748
9782: POP
9783: POP
// end ;
9784: GO 9714
9786: POP
9787: POP
// if not result then
9788: LD_VAR 0 2
9792: NOT
9793: IFFALSE 9797
// exit ;
9795: GO 9945
// mech := result [ 1 ] ;
9797: LD_ADDR_VAR 0 5
9801: PUSH
9802: LD_VAR 0 2
9806: PUSH
9807: LD_INT 1
9809: ARRAY
9810: ST_TO_ADDR
// if result > 1 then
9811: LD_VAR 0 2
9815: PUSH
9816: LD_INT 1
9818: GREATER
9819: IFFALSE 9931
// begin for i = 2 to result do
9821: LD_ADDR_VAR 0 3
9825: PUSH
9826: DOUBLE
9827: LD_INT 2
9829: DEC
9830: ST_TO_ADDR
9831: LD_VAR 0 2
9835: PUSH
9836: FOR_TO
9837: IFFALSE 9929
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9839: LD_ADDR_VAR 0 4
9843: PUSH
9844: LD_VAR 0 2
9848: PUSH
9849: LD_VAR 0 3
9853: ARRAY
9854: PPUSH
9855: LD_INT 3
9857: PPUSH
9858: CALL_OW 259
9862: PUSH
9863: LD_VAR 0 2
9867: PUSH
9868: LD_VAR 0 3
9872: ARRAY
9873: PPUSH
9874: CALL_OW 432
9878: MINUS
9879: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9880: LD_VAR 0 4
9884: PUSH
9885: LD_VAR 0 5
9889: PPUSH
9890: LD_INT 3
9892: PPUSH
9893: CALL_OW 259
9897: PUSH
9898: LD_VAR 0 5
9902: PPUSH
9903: CALL_OW 432
9907: MINUS
9908: GREATEREQUAL
9909: IFFALSE 9927
// mech := result [ i ] ;
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: LD_VAR 0 2
9920: PUSH
9921: LD_VAR 0 3
9925: ARRAY
9926: ST_TO_ADDR
// end ;
9927: GO 9836
9929: POP
9930: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9931: LD_VAR 0 1
9935: PPUSH
9936: LD_VAR 0 5
9940: PPUSH
9941: CALL_OW 135
// end ;
9945: LD_VAR 0 2
9949: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9950: LD_INT 0
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
9956: PPUSH
9957: PPUSH
9958: PPUSH
9959: PPUSH
9960: PPUSH
9961: PPUSH
9962: PPUSH
9963: PPUSH
9964: PPUSH
// result := [ ] ;
9965: LD_ADDR_VAR 0 7
9969: PUSH
9970: EMPTY
9971: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9972: LD_VAR 0 1
9976: PPUSH
9977: CALL_OW 266
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: IN
9992: NOT
9993: IFFALSE 9997
// exit ;
9995: GO 11631
// if name then
9997: LD_VAR 0 3
10001: IFFALSE 10017
// SetBName ( base_dep , name ) ;
10003: LD_VAR 0 1
10007: PPUSH
10008: LD_VAR 0 3
10012: PPUSH
10013: CALL_OW 500
// base := GetBase ( base_dep ) ;
10017: LD_ADDR_VAR 0 15
10021: PUSH
10022: LD_VAR 0 1
10026: PPUSH
10027: CALL_OW 274
10031: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10032: LD_ADDR_VAR 0 16
10036: PUSH
10037: LD_VAR 0 1
10041: PPUSH
10042: CALL_OW 255
10046: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10047: LD_ADDR_VAR 0 17
10051: PUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 248
10061: ST_TO_ADDR
// if sources then
10062: LD_VAR 0 5
10066: IFFALSE 10113
// for i = 1 to 3 do
10068: LD_ADDR_VAR 0 8
10072: PUSH
10073: DOUBLE
10074: LD_INT 1
10076: DEC
10077: ST_TO_ADDR
10078: LD_INT 3
10080: PUSH
10081: FOR_TO
10082: IFFALSE 10111
// AddResourceType ( base , i , sources [ i ] ) ;
10084: LD_VAR 0 15
10088: PPUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: LD_VAR 0 5
10098: PUSH
10099: LD_VAR 0 8
10103: ARRAY
10104: PPUSH
10105: CALL_OW 276
10109: GO 10081
10111: POP
10112: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10113: LD_ADDR_VAR 0 18
10117: PUSH
10118: LD_VAR 0 15
10122: PPUSH
10123: LD_VAR 0 2
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL 9374 0 3
10135: ST_TO_ADDR
// InitHc ;
10136: CALL_OW 19
// InitUc ;
10140: CALL_OW 18
// uc_side := side ;
10144: LD_ADDR_OWVAR 20
10148: PUSH
10149: LD_VAR 0 16
10153: ST_TO_ADDR
// uc_nation := nation ;
10154: LD_ADDR_OWVAR 21
10158: PUSH
10159: LD_VAR 0 17
10163: ST_TO_ADDR
// if buildings then
10164: LD_VAR 0 18
10168: IFFALSE 11490
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10170: LD_ADDR_VAR 0 19
10174: PUSH
10175: LD_VAR 0 18
10179: PPUSH
10180: LD_INT 2
10182: PUSH
10183: LD_INT 30
10185: PUSH
10186: LD_INT 29
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 30
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 72
10212: ST_TO_ADDR
// if tmp then
10213: LD_VAR 0 19
10217: IFFALSE 10265
// for i in tmp do
10219: LD_ADDR_VAR 0 8
10223: PUSH
10224: LD_VAR 0 19
10228: PUSH
10229: FOR_IN
10230: IFFALSE 10263
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10232: LD_VAR 0 8
10236: PPUSH
10237: CALL_OW 250
10241: PPUSH
10242: LD_VAR 0 8
10246: PPUSH
10247: CALL_OW 251
10251: PPUSH
10252: LD_VAR 0 16
10256: PPUSH
10257: CALL_OW 441
10261: GO 10229
10263: POP
10264: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10265: LD_VAR 0 18
10269: PPUSH
10270: LD_INT 2
10272: PUSH
10273: LD_INT 30
10275: PUSH
10276: LD_INT 32
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 30
10285: PUSH
10286: LD_INT 33
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: IFFALSE 10390
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10304: LD_ADDR_VAR 0 8
10308: PUSH
10309: LD_VAR 0 18
10313: PPUSH
10314: LD_INT 2
10316: PUSH
10317: LD_INT 30
10319: PUSH
10320: LD_INT 32
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 30
10329: PUSH
10330: LD_INT 33
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 72
10346: PUSH
10347: FOR_IN
10348: IFFALSE 10388
// begin if not GetBWeapon ( i ) then
10350: LD_VAR 0 8
10354: PPUSH
10355: CALL_OW 269
10359: NOT
10360: IFFALSE 10386
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10362: LD_VAR 0 8
10366: PPUSH
10367: LD_VAR 0 8
10371: PPUSH
10372: LD_VAR 0 2
10376: PPUSH
10377: CALL 11636 0 2
10381: PPUSH
10382: CALL_OW 431
// end ;
10386: GO 10347
10388: POP
10389: POP
// end ; for i = 1 to personel do
10390: LD_ADDR_VAR 0 8
10394: PUSH
10395: DOUBLE
10396: LD_INT 1
10398: DEC
10399: ST_TO_ADDR
10400: LD_VAR 0 6
10404: PUSH
10405: FOR_TO
10406: IFFALSE 11470
// begin if i > 4 then
10408: LD_VAR 0 8
10412: PUSH
10413: LD_INT 4
10415: GREATER
10416: IFFALSE 10420
// break ;
10418: GO 11470
// case i of 1 :
10420: LD_VAR 0 8
10424: PUSH
10425: LD_INT 1
10427: DOUBLE
10428: EQUAL
10429: IFTRUE 10433
10431: GO 10513
10433: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10434: LD_ADDR_VAR 0 12
10438: PUSH
10439: LD_VAR 0 18
10443: PPUSH
10444: LD_INT 22
10446: PUSH
10447: LD_VAR 0 16
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 58
10458: PUSH
10459: EMPTY
10460: LIST
10461: PUSH
10462: LD_INT 2
10464: PUSH
10465: LD_INT 30
10467: PUSH
10468: LD_INT 32
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: LD_INT 30
10477: PUSH
10478: LD_INT 4
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 30
10487: PUSH
10488: LD_INT 5
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 72
10510: ST_TO_ADDR
10511: GO 10735
10513: LD_INT 2
10515: DOUBLE
10516: EQUAL
10517: IFTRUE 10521
10519: GO 10583
10521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10522: LD_ADDR_VAR 0 12
10526: PUSH
10527: LD_VAR 0 18
10531: PPUSH
10532: LD_INT 22
10534: PUSH
10535: LD_VAR 0 16
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: LD_INT 30
10549: PUSH
10550: LD_INT 0
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 30
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 72
10580: ST_TO_ADDR
10581: GO 10735
10583: LD_INT 3
10585: DOUBLE
10586: EQUAL
10587: IFTRUE 10591
10589: GO 10653
10591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10592: LD_ADDR_VAR 0 12
10596: PUSH
10597: LD_VAR 0 18
10601: PPUSH
10602: LD_INT 22
10604: PUSH
10605: LD_VAR 0 16
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: LD_INT 30
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 30
10629: PUSH
10630: LD_INT 3
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PPUSH
10646: CALL_OW 72
10650: ST_TO_ADDR
10651: GO 10735
10653: LD_INT 4
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10734
10661: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10662: LD_ADDR_VAR 0 12
10666: PUSH
10667: LD_VAR 0 18
10671: PPUSH
10672: LD_INT 22
10674: PUSH
10675: LD_VAR 0 16
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 2
10686: PUSH
10687: LD_INT 30
10689: PUSH
10690: LD_INT 6
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 30
10699: PUSH
10700: LD_INT 7
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 30
10709: PUSH
10710: LD_INT 8
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PPUSH
10727: CALL_OW 72
10731: ST_TO_ADDR
10732: GO 10735
10734: POP
// if i = 1 then
10735: LD_VAR 0 8
10739: PUSH
10740: LD_INT 1
10742: EQUAL
10743: IFFALSE 10854
// begin tmp := [ ] ;
10745: LD_ADDR_VAR 0 19
10749: PUSH
10750: EMPTY
10751: ST_TO_ADDR
// for j in f do
10752: LD_ADDR_VAR 0 9
10756: PUSH
10757: LD_VAR 0 12
10761: PUSH
10762: FOR_IN
10763: IFFALSE 10836
// if GetBType ( j ) = b_bunker then
10765: LD_VAR 0 9
10769: PPUSH
10770: CALL_OW 266
10774: PUSH
10775: LD_INT 32
10777: EQUAL
10778: IFFALSE 10805
// tmp := Insert ( tmp , 1 , j ) else
10780: LD_ADDR_VAR 0 19
10784: PUSH
10785: LD_VAR 0 19
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: LD_VAR 0 9
10797: PPUSH
10798: CALL_OW 2
10802: ST_TO_ADDR
10803: GO 10834
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10805: LD_ADDR_VAR 0 19
10809: PUSH
10810: LD_VAR 0 19
10814: PPUSH
10815: LD_VAR 0 19
10819: PUSH
10820: LD_INT 1
10822: PLUS
10823: PPUSH
10824: LD_VAR 0 9
10828: PPUSH
10829: CALL_OW 2
10833: ST_TO_ADDR
10834: GO 10762
10836: POP
10837: POP
// if tmp then
10838: LD_VAR 0 19
10842: IFFALSE 10854
// f := tmp ;
10844: LD_ADDR_VAR 0 12
10848: PUSH
10849: LD_VAR 0 19
10853: ST_TO_ADDR
// end ; x := personel [ i ] ;
10854: LD_ADDR_VAR 0 13
10858: PUSH
10859: LD_VAR 0 6
10863: PUSH
10864: LD_VAR 0 8
10868: ARRAY
10869: ST_TO_ADDR
// if x = - 1 then
10870: LD_VAR 0 13
10874: PUSH
10875: LD_INT 1
10877: NEG
10878: EQUAL
10879: IFFALSE 11088
// begin for j in f do
10881: LD_ADDR_VAR 0 9
10885: PUSH
10886: LD_VAR 0 12
10890: PUSH
10891: FOR_IN
10892: IFFALSE 11084
// repeat InitHc ;
10894: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10898: LD_VAR 0 9
10902: PPUSH
10903: CALL_OW 266
10907: PUSH
10908: LD_INT 5
10910: EQUAL
10911: IFFALSE 10981
// begin if UnitsInside ( j ) < 3 then
10913: LD_VAR 0 9
10917: PPUSH
10918: CALL_OW 313
10922: PUSH
10923: LD_INT 3
10925: LESS
10926: IFFALSE 10962
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10928: LD_INT 0
10930: PPUSH
10931: LD_INT 5
10933: PUSH
10934: LD_INT 8
10936: PUSH
10937: LD_INT 9
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: LD_VAR 0 17
10949: ARRAY
10950: PPUSH
10951: LD_VAR 0 4
10955: PPUSH
10956: CALL_OW 380
10960: GO 10979
// PrepareHuman ( false , i , skill ) ;
10962: LD_INT 0
10964: PPUSH
10965: LD_VAR 0 8
10969: PPUSH
10970: LD_VAR 0 4
10974: PPUSH
10975: CALL_OW 380
// end else
10979: GO 10998
// PrepareHuman ( false , i , skill ) ;
10981: LD_INT 0
10983: PPUSH
10984: LD_VAR 0 8
10988: PPUSH
10989: LD_VAR 0 4
10993: PPUSH
10994: CALL_OW 380
// un := CreateHuman ;
10998: LD_ADDR_VAR 0 14
11002: PUSH
11003: CALL_OW 44
11007: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11008: LD_ADDR_VAR 0 7
11012: PUSH
11013: LD_VAR 0 7
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: LD_VAR 0 14
11025: PPUSH
11026: CALL_OW 2
11030: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11031: LD_VAR 0 14
11035: PPUSH
11036: LD_VAR 0 9
11040: PPUSH
11041: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11045: LD_VAR 0 9
11049: PPUSH
11050: CALL_OW 313
11054: PUSH
11055: LD_INT 6
11057: EQUAL
11058: PUSH
11059: LD_VAR 0 9
11063: PPUSH
11064: CALL_OW 266
11068: PUSH
11069: LD_INT 32
11071: PUSH
11072: LD_INT 31
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: IN
11079: OR
11080: IFFALSE 10894
11082: GO 10891
11084: POP
11085: POP
// end else
11086: GO 11468
// for j = 1 to x do
11088: LD_ADDR_VAR 0 9
11092: PUSH
11093: DOUBLE
11094: LD_INT 1
11096: DEC
11097: ST_TO_ADDR
11098: LD_VAR 0 13
11102: PUSH
11103: FOR_TO
11104: IFFALSE 11466
// begin InitHc ;
11106: CALL_OW 19
// if not f then
11110: LD_VAR 0 12
11114: NOT
11115: IFFALSE 11204
// begin PrepareHuman ( false , i , skill ) ;
11117: LD_INT 0
11119: PPUSH
11120: LD_VAR 0 8
11124: PPUSH
11125: LD_VAR 0 4
11129: PPUSH
11130: CALL_OW 380
// un := CreateHuman ;
11134: LD_ADDR_VAR 0 14
11138: PUSH
11139: CALL_OW 44
11143: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11144: LD_ADDR_VAR 0 7
11148: PUSH
11149: LD_VAR 0 7
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: LD_VAR 0 14
11161: PPUSH
11162: CALL_OW 2
11166: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11167: LD_VAR 0 14
11171: PPUSH
11172: LD_VAR 0 1
11176: PPUSH
11177: CALL_OW 250
11181: PPUSH
11182: LD_VAR 0 1
11186: PPUSH
11187: CALL_OW 251
11191: PPUSH
11192: LD_INT 10
11194: PPUSH
11195: LD_INT 0
11197: PPUSH
11198: CALL_OW 50
// continue ;
11202: GO 11103
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11204: LD_VAR 0 12
11208: PUSH
11209: LD_INT 1
11211: ARRAY
11212: PPUSH
11213: CALL_OW 313
11217: PUSH
11218: LD_VAR 0 12
11222: PUSH
11223: LD_INT 1
11225: ARRAY
11226: PPUSH
11227: CALL_OW 266
11231: PUSH
11232: LD_INT 32
11234: PUSH
11235: LD_INT 31
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: IN
11242: AND
11243: PUSH
11244: LD_VAR 0 12
11248: PUSH
11249: LD_INT 1
11251: ARRAY
11252: PPUSH
11253: CALL_OW 313
11257: PUSH
11258: LD_INT 6
11260: EQUAL
11261: OR
11262: IFFALSE 11282
// f := Delete ( f , 1 ) ;
11264: LD_ADDR_VAR 0 12
11268: PUSH
11269: LD_VAR 0 12
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 3
11281: ST_TO_ADDR
// if not f then
11282: LD_VAR 0 12
11286: NOT
11287: IFFALSE 11305
// begin x := x + 2 ;
11289: LD_ADDR_VAR 0 13
11293: PUSH
11294: LD_VAR 0 13
11298: PUSH
11299: LD_INT 2
11301: PLUS
11302: ST_TO_ADDR
// continue ;
11303: GO 11103
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11305: LD_VAR 0 12
11309: PUSH
11310: LD_INT 1
11312: ARRAY
11313: PPUSH
11314: CALL_OW 266
11318: PUSH
11319: LD_INT 5
11321: EQUAL
11322: IFFALSE 11396
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11324: LD_VAR 0 12
11328: PUSH
11329: LD_INT 1
11331: ARRAY
11332: PPUSH
11333: CALL_OW 313
11337: PUSH
11338: LD_INT 3
11340: LESS
11341: IFFALSE 11377
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11343: LD_INT 0
11345: PPUSH
11346: LD_INT 5
11348: PUSH
11349: LD_INT 8
11351: PUSH
11352: LD_INT 9
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: LIST
11359: PUSH
11360: LD_VAR 0 17
11364: ARRAY
11365: PPUSH
11366: LD_VAR 0 4
11370: PPUSH
11371: CALL_OW 380
11375: GO 11394
// PrepareHuman ( false , i , skill ) ;
11377: LD_INT 0
11379: PPUSH
11380: LD_VAR 0 8
11384: PPUSH
11385: LD_VAR 0 4
11389: PPUSH
11390: CALL_OW 380
// end else
11394: GO 11413
// PrepareHuman ( false , i , skill ) ;
11396: LD_INT 0
11398: PPUSH
11399: LD_VAR 0 8
11403: PPUSH
11404: LD_VAR 0 4
11408: PPUSH
11409: CALL_OW 380
// un := CreateHuman ;
11413: LD_ADDR_VAR 0 14
11417: PUSH
11418: CALL_OW 44
11422: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11423: LD_ADDR_VAR 0 7
11427: PUSH
11428: LD_VAR 0 7
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: LD_VAR 0 14
11440: PPUSH
11441: CALL_OW 2
11445: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11446: LD_VAR 0 14
11450: PPUSH
11451: LD_VAR 0 12
11455: PUSH
11456: LD_INT 1
11458: ARRAY
11459: PPUSH
11460: CALL_OW 52
// end ;
11464: GO 11103
11466: POP
11467: POP
// end ;
11468: GO 10405
11470: POP
11471: POP
// result := result ^ buildings ;
11472: LD_ADDR_VAR 0 7
11476: PUSH
11477: LD_VAR 0 7
11481: PUSH
11482: LD_VAR 0 18
11486: ADD
11487: ST_TO_ADDR
// end else
11488: GO 11631
// begin for i = 1 to personel do
11490: LD_ADDR_VAR 0 8
11494: PUSH
11495: DOUBLE
11496: LD_INT 1
11498: DEC
11499: ST_TO_ADDR
11500: LD_VAR 0 6
11504: PUSH
11505: FOR_TO
11506: IFFALSE 11629
// begin if i > 4 then
11508: LD_VAR 0 8
11512: PUSH
11513: LD_INT 4
11515: GREATER
11516: IFFALSE 11520
// break ;
11518: GO 11629
// x := personel [ i ] ;
11520: LD_ADDR_VAR 0 13
11524: PUSH
11525: LD_VAR 0 6
11529: PUSH
11530: LD_VAR 0 8
11534: ARRAY
11535: ST_TO_ADDR
// if x = - 1 then
11536: LD_VAR 0 13
11540: PUSH
11541: LD_INT 1
11543: NEG
11544: EQUAL
11545: IFFALSE 11549
// continue ;
11547: GO 11505
// PrepareHuman ( false , i , skill ) ;
11549: LD_INT 0
11551: PPUSH
11552: LD_VAR 0 8
11556: PPUSH
11557: LD_VAR 0 4
11561: PPUSH
11562: CALL_OW 380
// un := CreateHuman ;
11566: LD_ADDR_VAR 0 14
11570: PUSH
11571: CALL_OW 44
11575: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11576: LD_VAR 0 14
11580: PPUSH
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 250
11590: PPUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 251
11600: PPUSH
11601: LD_INT 10
11603: PPUSH
11604: LD_INT 0
11606: PPUSH
11607: CALL_OW 50
// result := result ^ un ;
11611: LD_ADDR_VAR 0 7
11615: PUSH
11616: LD_VAR 0 7
11620: PUSH
11621: LD_VAR 0 14
11625: ADD
11626: ST_TO_ADDR
// end ;
11627: GO 11505
11629: POP
11630: POP
// end ; end ;
11631: LD_VAR 0 7
11635: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11636: LD_INT 0
11638: PPUSH
11639: PPUSH
11640: PPUSH
11641: PPUSH
11642: PPUSH
11643: PPUSH
11644: PPUSH
11645: PPUSH
11646: PPUSH
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
11652: PPUSH
11653: PPUSH
// result := false ;
11654: LD_ADDR_VAR 0 3
11658: PUSH
11659: LD_INT 0
11661: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11662: LD_VAR 0 1
11666: NOT
11667: PUSH
11668: LD_VAR 0 1
11672: PPUSH
11673: CALL_OW 266
11677: PUSH
11678: LD_INT 32
11680: PUSH
11681: LD_INT 33
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: IN
11688: NOT
11689: OR
11690: IFFALSE 11694
// exit ;
11692: GO 12803
// nat := GetNation ( tower ) ;
11694: LD_ADDR_VAR 0 12
11698: PUSH
11699: LD_VAR 0 1
11703: PPUSH
11704: CALL_OW 248
11708: ST_TO_ADDR
// side := GetSide ( tower ) ;
11709: LD_ADDR_VAR 0 16
11713: PUSH
11714: LD_VAR 0 1
11718: PPUSH
11719: CALL_OW 255
11723: ST_TO_ADDR
// x := GetX ( tower ) ;
11724: LD_ADDR_VAR 0 10
11728: PUSH
11729: LD_VAR 0 1
11733: PPUSH
11734: CALL_OW 250
11738: ST_TO_ADDR
// y := GetY ( tower ) ;
11739: LD_ADDR_VAR 0 11
11743: PUSH
11744: LD_VAR 0 1
11748: PPUSH
11749: CALL_OW 251
11753: ST_TO_ADDR
// if not x or not y then
11754: LD_VAR 0 10
11758: NOT
11759: PUSH
11760: LD_VAR 0 11
11764: NOT
11765: OR
11766: IFFALSE 11770
// exit ;
11768: GO 12803
// weapon := 0 ;
11770: LD_ADDR_VAR 0 18
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// fac_list := [ ] ;
11778: LD_ADDR_VAR 0 17
11782: PUSH
11783: EMPTY
11784: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11785: LD_ADDR_VAR 0 6
11789: PUSH
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL_OW 274
11799: PPUSH
11800: LD_VAR 0 2
11804: PPUSH
11805: LD_INT 0
11807: PPUSH
11808: CALL 9374 0 3
11812: PPUSH
11813: LD_INT 30
11815: PUSH
11816: LD_INT 3
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PPUSH
11823: CALL_OW 72
11827: ST_TO_ADDR
// if not factories then
11828: LD_VAR 0 6
11832: NOT
11833: IFFALSE 11837
// exit ;
11835: GO 12803
// for i in factories do
11837: LD_ADDR_VAR 0 8
11841: PUSH
11842: LD_VAR 0 6
11846: PUSH
11847: FOR_IN
11848: IFFALSE 11873
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11850: LD_ADDR_VAR 0 17
11854: PUSH
11855: LD_VAR 0 17
11859: PUSH
11860: LD_VAR 0 8
11864: PPUSH
11865: CALL_OW 478
11869: UNION
11870: ST_TO_ADDR
11871: GO 11847
11873: POP
11874: POP
// if not fac_list then
11875: LD_VAR 0 17
11879: NOT
11880: IFFALSE 11884
// exit ;
11882: GO 12803
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11884: LD_ADDR_VAR 0 5
11888: PUSH
11889: LD_INT 4
11891: PUSH
11892: LD_INT 5
11894: PUSH
11895: LD_INT 9
11897: PUSH
11898: LD_INT 10
11900: PUSH
11901: LD_INT 6
11903: PUSH
11904: LD_INT 7
11906: PUSH
11907: LD_INT 11
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 27
11921: PUSH
11922: LD_INT 28
11924: PUSH
11925: LD_INT 26
11927: PUSH
11928: LD_INT 30
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 43
11939: PUSH
11940: LD_INT 44
11942: PUSH
11943: LD_INT 46
11945: PUSH
11946: LD_INT 45
11948: PUSH
11949: LD_INT 47
11951: PUSH
11952: LD_INT 49
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: PUSH
11968: LD_VAR 0 12
11972: ARRAY
11973: ST_TO_ADDR
// list := list isect fac_list ;
11974: LD_ADDR_VAR 0 5
11978: PUSH
11979: LD_VAR 0 5
11983: PUSH
11984: LD_VAR 0 17
11988: ISECT
11989: ST_TO_ADDR
// if not list then
11990: LD_VAR 0 5
11994: NOT
11995: IFFALSE 11999
// exit ;
11997: GO 12803
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11999: LD_VAR 0 12
12003: PUSH
12004: LD_INT 3
12006: EQUAL
12007: PUSH
12008: LD_INT 49
12010: PUSH
12011: LD_VAR 0 5
12015: IN
12016: AND
12017: PUSH
12018: LD_INT 31
12020: PPUSH
12021: LD_VAR 0 16
12025: PPUSH
12026: CALL_OW 321
12030: PUSH
12031: LD_INT 2
12033: EQUAL
12034: AND
12035: IFFALSE 12095
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12037: LD_INT 22
12039: PUSH
12040: LD_VAR 0 16
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 35
12051: PUSH
12052: LD_INT 49
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 91
12061: PUSH
12062: LD_VAR 0 1
12066: PUSH
12067: LD_INT 10
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 69
12084: NOT
12085: IFFALSE 12095
// weapon := ru_time_lapser ;
12087: LD_ADDR_VAR 0 18
12091: PUSH
12092: LD_INT 49
12094: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12095: LD_VAR 0 12
12099: PUSH
12100: LD_INT 1
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: IN
12110: PUSH
12111: LD_INT 11
12113: PUSH
12114: LD_VAR 0 5
12118: IN
12119: PUSH
12120: LD_INT 30
12122: PUSH
12123: LD_VAR 0 5
12127: IN
12128: OR
12129: AND
12130: PUSH
12131: LD_INT 6
12133: PPUSH
12134: LD_VAR 0 16
12138: PPUSH
12139: CALL_OW 321
12143: PUSH
12144: LD_INT 2
12146: EQUAL
12147: AND
12148: IFFALSE 12313
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12150: LD_INT 22
12152: PUSH
12153: LD_VAR 0 16
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 2
12164: PUSH
12165: LD_INT 35
12167: PUSH
12168: LD_INT 11
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 35
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 91
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: LD_INT 18
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: PPUSH
12211: CALL_OW 69
12215: NOT
12216: PUSH
12217: LD_INT 22
12219: PUSH
12220: LD_VAR 0 16
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 2
12231: PUSH
12232: LD_INT 30
12234: PUSH
12235: LD_INT 32
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 30
12244: PUSH
12245: LD_INT 33
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 91
12259: PUSH
12260: LD_VAR 0 1
12264: PUSH
12265: LD_INT 12
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: PPUSH
12281: CALL_OW 69
12285: PUSH
12286: LD_INT 2
12288: GREATER
12289: AND
12290: IFFALSE 12313
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12292: LD_ADDR_VAR 0 18
12296: PUSH
12297: LD_INT 11
12299: PUSH
12300: LD_INT 30
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_VAR 0 12
12311: ARRAY
12312: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12313: LD_VAR 0 18
12317: NOT
12318: PUSH
12319: LD_INT 40
12321: PPUSH
12322: LD_VAR 0 16
12326: PPUSH
12327: CALL_OW 321
12331: PUSH
12332: LD_INT 2
12334: EQUAL
12335: AND
12336: PUSH
12337: LD_INT 7
12339: PUSH
12340: LD_VAR 0 5
12344: IN
12345: PUSH
12346: LD_INT 28
12348: PUSH
12349: LD_VAR 0 5
12353: IN
12354: OR
12355: PUSH
12356: LD_INT 45
12358: PUSH
12359: LD_VAR 0 5
12363: IN
12364: OR
12365: AND
12366: IFFALSE 12620
// begin hex := GetHexInfo ( x , y ) ;
12368: LD_ADDR_VAR 0 4
12372: PUSH
12373: LD_VAR 0 10
12377: PPUSH
12378: LD_VAR 0 11
12382: PPUSH
12383: CALL_OW 546
12387: ST_TO_ADDR
// if hex [ 1 ] then
12388: LD_VAR 0 4
12392: PUSH
12393: LD_INT 1
12395: ARRAY
12396: IFFALSE 12400
// exit ;
12398: GO 12803
// height := hex [ 2 ] ;
12400: LD_ADDR_VAR 0 15
12404: PUSH
12405: LD_VAR 0 4
12409: PUSH
12410: LD_INT 2
12412: ARRAY
12413: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12414: LD_ADDR_VAR 0 14
12418: PUSH
12419: LD_INT 0
12421: PUSH
12422: LD_INT 2
12424: PUSH
12425: LD_INT 3
12427: PUSH
12428: LD_INT 5
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: ST_TO_ADDR
// for i in tmp do
12437: LD_ADDR_VAR 0 8
12441: PUSH
12442: LD_VAR 0 14
12446: PUSH
12447: FOR_IN
12448: IFFALSE 12618
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12450: LD_ADDR_VAR 0 9
12454: PUSH
12455: LD_VAR 0 10
12459: PPUSH
12460: LD_VAR 0 8
12464: PPUSH
12465: LD_INT 5
12467: PPUSH
12468: CALL_OW 272
12472: PUSH
12473: LD_VAR 0 11
12477: PPUSH
12478: LD_VAR 0 8
12482: PPUSH
12483: LD_INT 5
12485: PPUSH
12486: CALL_OW 273
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12495: LD_VAR 0 9
12499: PUSH
12500: LD_INT 1
12502: ARRAY
12503: PPUSH
12504: LD_VAR 0 9
12508: PUSH
12509: LD_INT 2
12511: ARRAY
12512: PPUSH
12513: CALL_OW 488
12517: IFFALSE 12616
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12519: LD_ADDR_VAR 0 4
12523: PUSH
12524: LD_VAR 0 9
12528: PUSH
12529: LD_INT 1
12531: ARRAY
12532: PPUSH
12533: LD_VAR 0 9
12537: PUSH
12538: LD_INT 2
12540: ARRAY
12541: PPUSH
12542: CALL_OW 546
12546: ST_TO_ADDR
// if hex [ 1 ] then
12547: LD_VAR 0 4
12551: PUSH
12552: LD_INT 1
12554: ARRAY
12555: IFFALSE 12559
// continue ;
12557: GO 12447
// h := hex [ 2 ] ;
12559: LD_ADDR_VAR 0 13
12563: PUSH
12564: LD_VAR 0 4
12568: PUSH
12569: LD_INT 2
12571: ARRAY
12572: ST_TO_ADDR
// if h + 7 < height then
12573: LD_VAR 0 13
12577: PUSH
12578: LD_INT 7
12580: PLUS
12581: PUSH
12582: LD_VAR 0 15
12586: LESS
12587: IFFALSE 12616
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12589: LD_ADDR_VAR 0 18
12593: PUSH
12594: LD_INT 7
12596: PUSH
12597: LD_INT 28
12599: PUSH
12600: LD_INT 45
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: PUSH
12608: LD_VAR 0 12
12612: ARRAY
12613: ST_TO_ADDR
// break ;
12614: GO 12618
// end ; end ; end ;
12616: GO 12447
12618: POP
12619: POP
// end ; if not weapon then
12620: LD_VAR 0 18
12624: NOT
12625: IFFALSE 12685
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12627: LD_ADDR_VAR 0 5
12631: PUSH
12632: LD_VAR 0 5
12636: PUSH
12637: LD_INT 11
12639: PUSH
12640: LD_INT 30
12642: PUSH
12643: LD_INT 49
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: DIFF
12651: ST_TO_ADDR
// if not list then
12652: LD_VAR 0 5
12656: NOT
12657: IFFALSE 12661
// exit ;
12659: GO 12803
// weapon := list [ rand ( 1 , list ) ] ;
12661: LD_ADDR_VAR 0 18
12665: PUSH
12666: LD_VAR 0 5
12670: PUSH
12671: LD_INT 1
12673: PPUSH
12674: LD_VAR 0 5
12678: PPUSH
12679: CALL_OW 12
12683: ARRAY
12684: ST_TO_ADDR
// end ; if weapon then
12685: LD_VAR 0 18
12689: IFFALSE 12803
// begin tmp := CostOfWeapon ( weapon ) ;
12691: LD_ADDR_VAR 0 14
12695: PUSH
12696: LD_VAR 0 18
12700: PPUSH
12701: CALL_OW 451
12705: ST_TO_ADDR
// j := GetBase ( tower ) ;
12706: LD_ADDR_VAR 0 9
12710: PUSH
12711: LD_VAR 0 1
12715: PPUSH
12716: CALL_OW 274
12720: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12721: LD_VAR 0 9
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 275
12733: PUSH
12734: LD_VAR 0 14
12738: PUSH
12739: LD_INT 1
12741: ARRAY
12742: GREATEREQUAL
12743: PUSH
12744: LD_VAR 0 9
12748: PPUSH
12749: LD_INT 2
12751: PPUSH
12752: CALL_OW 275
12756: PUSH
12757: LD_VAR 0 14
12761: PUSH
12762: LD_INT 2
12764: ARRAY
12765: GREATEREQUAL
12766: AND
12767: PUSH
12768: LD_VAR 0 9
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: CALL_OW 275
12780: PUSH
12781: LD_VAR 0 14
12785: PUSH
12786: LD_INT 3
12788: ARRAY
12789: GREATEREQUAL
12790: AND
12791: IFFALSE 12803
// result := weapon ;
12793: LD_ADDR_VAR 0 3
12797: PUSH
12798: LD_VAR 0 18
12802: ST_TO_ADDR
// end ; end ;
12803: LD_VAR 0 3
12807: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12808: LD_INT 0
12810: PPUSH
12811: PPUSH
// result := true ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
// if array1 = array2 then
12820: LD_VAR 0 1
12824: PUSH
12825: LD_VAR 0 2
12829: EQUAL
12830: IFFALSE 12890
// begin for i = 1 to array1 do
12832: LD_ADDR_VAR 0 4
12836: PUSH
12837: DOUBLE
12838: LD_INT 1
12840: DEC
12841: ST_TO_ADDR
12842: LD_VAR 0 1
12846: PUSH
12847: FOR_TO
12848: IFFALSE 12886
// if array1 [ i ] <> array2 [ i ] then
12850: LD_VAR 0 1
12854: PUSH
12855: LD_VAR 0 4
12859: ARRAY
12860: PUSH
12861: LD_VAR 0 2
12865: PUSH
12866: LD_VAR 0 4
12870: ARRAY
12871: NONEQUAL
12872: IFFALSE 12884
// begin result := false ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// break ;
12882: GO 12886
// end ;
12884: GO 12847
12886: POP
12887: POP
// end else
12888: GO 12898
// result := false ;
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// end ;
12898: LD_VAR 0 3
12902: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12903: LD_INT 0
12905: PPUSH
12906: PPUSH
// if not array1 or not array2 then
12907: LD_VAR 0 1
12911: NOT
12912: PUSH
12913: LD_VAR 0 2
12917: NOT
12918: OR
12919: IFFALSE 12923
// exit ;
12921: GO 12987
// result := true ;
12923: LD_ADDR_VAR 0 3
12927: PUSH
12928: LD_INT 1
12930: ST_TO_ADDR
// for i = 1 to array1 do
12931: LD_ADDR_VAR 0 4
12935: PUSH
12936: DOUBLE
12937: LD_INT 1
12939: DEC
12940: ST_TO_ADDR
12941: LD_VAR 0 1
12945: PUSH
12946: FOR_TO
12947: IFFALSE 12985
// if array1 [ i ] <> array2 [ i ] then
12949: LD_VAR 0 1
12953: PUSH
12954: LD_VAR 0 4
12958: ARRAY
12959: PUSH
12960: LD_VAR 0 2
12964: PUSH
12965: LD_VAR 0 4
12969: ARRAY
12970: NONEQUAL
12971: IFFALSE 12983
// begin result := false ;
12973: LD_ADDR_VAR 0 3
12977: PUSH
12978: LD_INT 0
12980: ST_TO_ADDR
// break ;
12981: GO 12985
// end ;
12983: GO 12946
12985: POP
12986: POP
// end ;
12987: LD_VAR 0 3
12991: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12992: LD_INT 0
12994: PPUSH
12995: PPUSH
12996: PPUSH
// pom := GetBase ( fac ) ;
12997: LD_ADDR_VAR 0 5
13001: PUSH
13002: LD_VAR 0 1
13006: PPUSH
13007: CALL_OW 274
13011: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13012: LD_ADDR_VAR 0 4
13016: PUSH
13017: LD_VAR 0 2
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: LD_VAR 0 2
13030: PUSH
13031: LD_INT 2
13033: ARRAY
13034: PPUSH
13035: LD_VAR 0 2
13039: PUSH
13040: LD_INT 3
13042: ARRAY
13043: PPUSH
13044: LD_VAR 0 2
13048: PUSH
13049: LD_INT 4
13051: ARRAY
13052: PPUSH
13053: CALL_OW 449
13057: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13058: LD_ADDR_VAR 0 3
13062: PUSH
13063: LD_VAR 0 5
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 275
13075: PUSH
13076: LD_VAR 0 4
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: GREATEREQUAL
13085: PUSH
13086: LD_VAR 0 5
13090: PPUSH
13091: LD_INT 2
13093: PPUSH
13094: CALL_OW 275
13098: PUSH
13099: LD_VAR 0 4
13103: PUSH
13104: LD_INT 2
13106: ARRAY
13107: GREATEREQUAL
13108: AND
13109: PUSH
13110: LD_VAR 0 5
13114: PPUSH
13115: LD_INT 3
13117: PPUSH
13118: CALL_OW 275
13122: PUSH
13123: LD_VAR 0 4
13127: PUSH
13128: LD_INT 3
13130: ARRAY
13131: GREATEREQUAL
13132: AND
13133: ST_TO_ADDR
// end ;
13134: LD_VAR 0 3
13138: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13139: LD_INT 0
13141: PPUSH
13142: PPUSH
13143: PPUSH
13144: PPUSH
// pom := GetBase ( building ) ;
13145: LD_ADDR_VAR 0 3
13149: PUSH
13150: LD_VAR 0 1
13154: PPUSH
13155: CALL_OW 274
13159: ST_TO_ADDR
// if not pom then
13160: LD_VAR 0 3
13164: NOT
13165: IFFALSE 13169
// exit ;
13167: GO 13339
// btype := GetBType ( building ) ;
13169: LD_ADDR_VAR 0 5
13173: PUSH
13174: LD_VAR 0 1
13178: PPUSH
13179: CALL_OW 266
13183: ST_TO_ADDR
// if btype = b_armoury then
13184: LD_VAR 0 5
13188: PUSH
13189: LD_INT 4
13191: EQUAL
13192: IFFALSE 13202
// btype := b_barracks ;
13194: LD_ADDR_VAR 0 5
13198: PUSH
13199: LD_INT 5
13201: ST_TO_ADDR
// if btype = b_depot then
13202: LD_VAR 0 5
13206: PUSH
13207: LD_INT 0
13209: EQUAL
13210: IFFALSE 13220
// btype := b_warehouse ;
13212: LD_ADDR_VAR 0 5
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// if btype = b_workshop then
13220: LD_VAR 0 5
13224: PUSH
13225: LD_INT 2
13227: EQUAL
13228: IFFALSE 13238
// btype := b_factory ;
13230: LD_ADDR_VAR 0 5
13234: PUSH
13235: LD_INT 3
13237: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13238: LD_ADDR_VAR 0 4
13242: PUSH
13243: LD_VAR 0 5
13247: PPUSH
13248: LD_VAR 0 1
13252: PPUSH
13253: CALL_OW 248
13257: PPUSH
13258: CALL_OW 450
13262: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_VAR 0 3
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 275
13280: PUSH
13281: LD_VAR 0 4
13285: PUSH
13286: LD_INT 1
13288: ARRAY
13289: GREATEREQUAL
13290: PUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 2
13298: PPUSH
13299: CALL_OW 275
13303: PUSH
13304: LD_VAR 0 4
13308: PUSH
13309: LD_INT 2
13311: ARRAY
13312: GREATEREQUAL
13313: AND
13314: PUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 3
13322: PPUSH
13323: CALL_OW 275
13327: PUSH
13328: LD_VAR 0 4
13332: PUSH
13333: LD_INT 3
13335: ARRAY
13336: GREATEREQUAL
13337: AND
13338: ST_TO_ADDR
// end ;
13339: LD_VAR 0 2
13343: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13344: LD_INT 0
13346: PPUSH
13347: PPUSH
13348: PPUSH
// pom := GetBase ( building ) ;
13349: LD_ADDR_VAR 0 4
13353: PUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 274
13363: ST_TO_ADDR
// if not pom then
13364: LD_VAR 0 4
13368: NOT
13369: IFFALSE 13373
// exit ;
13371: GO 13474
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13373: LD_ADDR_VAR 0 5
13377: PUSH
13378: LD_VAR 0 2
13382: PPUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: CALL_OW 248
13392: PPUSH
13393: CALL_OW 450
13397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13398: LD_ADDR_VAR 0 3
13402: PUSH
13403: LD_VAR 0 4
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 275
13415: PUSH
13416: LD_VAR 0 5
13420: PUSH
13421: LD_INT 1
13423: ARRAY
13424: GREATEREQUAL
13425: PUSH
13426: LD_VAR 0 4
13430: PPUSH
13431: LD_INT 2
13433: PPUSH
13434: CALL_OW 275
13438: PUSH
13439: LD_VAR 0 5
13443: PUSH
13444: LD_INT 2
13446: ARRAY
13447: GREATEREQUAL
13448: AND
13449: PUSH
13450: LD_VAR 0 4
13454: PPUSH
13455: LD_INT 3
13457: PPUSH
13458: CALL_OW 275
13462: PUSH
13463: LD_VAR 0 5
13467: PUSH
13468: LD_INT 3
13470: ARRAY
13471: GREATEREQUAL
13472: AND
13473: ST_TO_ADDR
// end ;
13474: LD_VAR 0 3
13478: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13479: LD_INT 0
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
13489: PPUSH
13490: PPUSH
13491: PPUSH
// result := false ;
13492: LD_ADDR_VAR 0 8
13496: PUSH
13497: LD_INT 0
13499: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13500: LD_VAR 0 5
13504: NOT
13505: PUSH
13506: LD_VAR 0 1
13510: NOT
13511: OR
13512: PUSH
13513: LD_VAR 0 2
13517: NOT
13518: OR
13519: PUSH
13520: LD_VAR 0 3
13524: NOT
13525: OR
13526: IFFALSE 13530
// exit ;
13528: GO 14344
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13530: LD_ADDR_VAR 0 14
13534: PUSH
13535: LD_VAR 0 1
13539: PPUSH
13540: LD_VAR 0 2
13544: PPUSH
13545: LD_VAR 0 3
13549: PPUSH
13550: LD_VAR 0 4
13554: PPUSH
13555: LD_VAR 0 5
13559: PUSH
13560: LD_INT 1
13562: ARRAY
13563: PPUSH
13564: CALL_OW 248
13568: PPUSH
13569: LD_INT 0
13571: PPUSH
13572: CALL 15597 0 6
13576: ST_TO_ADDR
// if not hexes then
13577: LD_VAR 0 14
13581: NOT
13582: IFFALSE 13586
// exit ;
13584: GO 14344
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13586: LD_ADDR_VAR 0 17
13590: PUSH
13591: LD_VAR 0 5
13595: PPUSH
13596: LD_INT 22
13598: PUSH
13599: LD_VAR 0 13
13603: PPUSH
13604: CALL_OW 255
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 30
13618: PUSH
13619: LD_INT 0
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 30
13628: PUSH
13629: LD_INT 1
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 72
13649: ST_TO_ADDR
// for i = 1 to hexes do
13650: LD_ADDR_VAR 0 9
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_VAR 0 14
13664: PUSH
13665: FOR_TO
13666: IFFALSE 14342
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13668: LD_ADDR_VAR 0 13
13672: PUSH
13673: LD_VAR 0 14
13677: PUSH
13678: LD_VAR 0 9
13682: ARRAY
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_VAR 0 14
13692: PUSH
13693: LD_VAR 0 9
13697: ARRAY
13698: PUSH
13699: LD_INT 2
13701: ARRAY
13702: PPUSH
13703: CALL_OW 428
13707: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13708: LD_VAR 0 14
13712: PUSH
13713: LD_VAR 0 9
13717: ARRAY
13718: PUSH
13719: LD_INT 1
13721: ARRAY
13722: PPUSH
13723: LD_VAR 0 14
13727: PUSH
13728: LD_VAR 0 9
13732: ARRAY
13733: PUSH
13734: LD_INT 2
13736: ARRAY
13737: PPUSH
13738: CALL_OW 351
13742: PUSH
13743: LD_VAR 0 14
13747: PUSH
13748: LD_VAR 0 9
13752: ARRAY
13753: PUSH
13754: LD_INT 1
13756: ARRAY
13757: PPUSH
13758: LD_VAR 0 14
13762: PUSH
13763: LD_VAR 0 9
13767: ARRAY
13768: PUSH
13769: LD_INT 2
13771: ARRAY
13772: PPUSH
13773: CALL_OW 488
13777: NOT
13778: OR
13779: PUSH
13780: LD_VAR 0 13
13784: PPUSH
13785: CALL_OW 247
13789: PUSH
13790: LD_INT 3
13792: EQUAL
13793: OR
13794: IFFALSE 13800
// exit ;
13796: POP
13797: POP
13798: GO 14344
// if not tmp then
13800: LD_VAR 0 13
13804: NOT
13805: IFFALSE 13809
// continue ;
13807: GO 13665
// result := true ;
13809: LD_ADDR_VAR 0 8
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13817: LD_VAR 0 6
13821: PUSH
13822: LD_VAR 0 13
13826: PPUSH
13827: CALL_OW 247
13831: PUSH
13832: LD_INT 2
13834: EQUAL
13835: AND
13836: PUSH
13837: LD_VAR 0 13
13841: PPUSH
13842: CALL_OW 263
13846: PUSH
13847: LD_INT 1
13849: EQUAL
13850: AND
13851: IFFALSE 14015
// begin if IsDrivenBy ( tmp ) then
13853: LD_VAR 0 13
13857: PPUSH
13858: CALL_OW 311
13862: IFFALSE 13866
// continue ;
13864: GO 13665
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13866: LD_VAR 0 6
13870: PPUSH
13871: LD_INT 3
13873: PUSH
13874: LD_INT 60
13876: PUSH
13877: EMPTY
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 3
13886: PUSH
13887: LD_INT 55
13889: PUSH
13890: EMPTY
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 72
13905: IFFALSE 14013
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13907: LD_ADDR_VAR 0 18
13911: PUSH
13912: LD_VAR 0 6
13916: PPUSH
13917: LD_INT 3
13919: PUSH
13920: LD_INT 60
13922: PUSH
13923: EMPTY
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 3
13932: PUSH
13933: LD_INT 55
13935: PUSH
13936: EMPTY
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 72
13951: PUSH
13952: LD_INT 1
13954: ARRAY
13955: ST_TO_ADDR
// if IsInUnit ( driver ) then
13956: LD_VAR 0 18
13960: PPUSH
13961: CALL_OW 310
13965: IFFALSE 13976
// ComExit ( driver ) ;
13967: LD_VAR 0 18
13971: PPUSH
13972: CALL 39376 0 1
// AddComEnterUnit ( driver , tmp ) ;
13976: LD_VAR 0 18
13980: PPUSH
13981: LD_VAR 0 13
13985: PPUSH
13986: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13990: LD_VAR 0 18
13994: PPUSH
13995: LD_VAR 0 7
13999: PPUSH
14000: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14004: LD_VAR 0 18
14008: PPUSH
14009: CALL_OW 181
// end ; continue ;
14013: GO 13665
// end ; if not cleaners or not tmp in cleaners then
14015: LD_VAR 0 6
14019: NOT
14020: PUSH
14021: LD_VAR 0 13
14025: PUSH
14026: LD_VAR 0 6
14030: IN
14031: NOT
14032: OR
14033: IFFALSE 14340
// begin if dep then
14035: LD_VAR 0 17
14039: IFFALSE 14175
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14041: LD_ADDR_VAR 0 16
14045: PUSH
14046: LD_VAR 0 17
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: PPUSH
14055: CALL_OW 250
14059: PPUSH
14060: LD_VAR 0 17
14064: PUSH
14065: LD_INT 1
14067: ARRAY
14068: PPUSH
14069: CALL_OW 254
14073: PPUSH
14074: LD_INT 5
14076: PPUSH
14077: CALL_OW 272
14081: PUSH
14082: LD_VAR 0 17
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: CALL_OW 251
14095: PPUSH
14096: LD_VAR 0 17
14100: PUSH
14101: LD_INT 1
14103: ARRAY
14104: PPUSH
14105: CALL_OW 254
14109: PPUSH
14110: LD_INT 5
14112: PPUSH
14113: CALL_OW 273
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14122: LD_VAR 0 16
14126: PUSH
14127: LD_INT 1
14129: ARRAY
14130: PPUSH
14131: LD_VAR 0 16
14135: PUSH
14136: LD_INT 2
14138: ARRAY
14139: PPUSH
14140: CALL_OW 488
14144: IFFALSE 14175
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14146: LD_VAR 0 13
14150: PPUSH
14151: LD_VAR 0 16
14155: PUSH
14156: LD_INT 1
14158: ARRAY
14159: PPUSH
14160: LD_VAR 0 16
14164: PUSH
14165: LD_INT 2
14167: ARRAY
14168: PPUSH
14169: CALL_OW 111
// continue ;
14173: GO 13665
// end ; end ; r := GetDir ( tmp ) ;
14175: LD_ADDR_VAR 0 15
14179: PUSH
14180: LD_VAR 0 13
14184: PPUSH
14185: CALL_OW 254
14189: ST_TO_ADDR
// if r = 5 then
14190: LD_VAR 0 15
14194: PUSH
14195: LD_INT 5
14197: EQUAL
14198: IFFALSE 14208
// r := 0 ;
14200: LD_ADDR_VAR 0 15
14204: PUSH
14205: LD_INT 0
14207: ST_TO_ADDR
// for j = r to 5 do
14208: LD_ADDR_VAR 0 10
14212: PUSH
14213: DOUBLE
14214: LD_VAR 0 15
14218: DEC
14219: ST_TO_ADDR
14220: LD_INT 5
14222: PUSH
14223: FOR_TO
14224: IFFALSE 14338
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14226: LD_ADDR_VAR 0 11
14230: PUSH
14231: LD_VAR 0 13
14235: PPUSH
14236: CALL_OW 250
14240: PPUSH
14241: LD_VAR 0 10
14245: PPUSH
14246: LD_INT 2
14248: PPUSH
14249: CALL_OW 272
14253: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14254: LD_ADDR_VAR 0 12
14258: PUSH
14259: LD_VAR 0 13
14263: PPUSH
14264: CALL_OW 251
14268: PPUSH
14269: LD_VAR 0 10
14273: PPUSH
14274: LD_INT 2
14276: PPUSH
14277: CALL_OW 273
14281: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14282: LD_VAR 0 11
14286: PPUSH
14287: LD_VAR 0 12
14291: PPUSH
14292: CALL_OW 488
14296: PUSH
14297: LD_VAR 0 11
14301: PPUSH
14302: LD_VAR 0 12
14306: PPUSH
14307: CALL_OW 428
14311: NOT
14312: AND
14313: IFFALSE 14336
// begin ComMoveXY ( tmp , _x , _y ) ;
14315: LD_VAR 0 13
14319: PPUSH
14320: LD_VAR 0 11
14324: PPUSH
14325: LD_VAR 0 12
14329: PPUSH
14330: CALL_OW 111
// break ;
14334: GO 14338
// end ; end ;
14336: GO 14223
14338: POP
14339: POP
// end ; end ;
14340: GO 13665
14342: POP
14343: POP
// end ;
14344: LD_VAR 0 8
14348: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14349: LD_INT 0
14351: PPUSH
// result := true ;
14352: LD_ADDR_VAR 0 3
14356: PUSH
14357: LD_INT 1
14359: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14360: LD_VAR 0 2
14364: PUSH
14365: LD_INT 24
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14379
14371: LD_INT 33
14373: DOUBLE
14374: EQUAL
14375: IFTRUE 14379
14377: GO 14404
14379: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14380: LD_ADDR_VAR 0 3
14384: PUSH
14385: LD_INT 32
14387: PPUSH
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 321
14397: PUSH
14398: LD_INT 2
14400: EQUAL
14401: ST_TO_ADDR
14402: GO 14720
14404: LD_INT 20
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14437
14412: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: LD_INT 6
14420: PPUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 321
14430: PUSH
14431: LD_INT 2
14433: EQUAL
14434: ST_TO_ADDR
14435: GO 14720
14437: LD_INT 22
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14451
14443: LD_INT 36
14445: DOUBLE
14446: EQUAL
14447: IFTRUE 14451
14449: GO 14476
14451: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14452: LD_ADDR_VAR 0 3
14456: PUSH
14457: LD_INT 15
14459: PPUSH
14460: LD_VAR 0 1
14464: PPUSH
14465: CALL_OW 321
14469: PUSH
14470: LD_INT 2
14472: EQUAL
14473: ST_TO_ADDR
14474: GO 14720
14476: LD_INT 30
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14509
14484: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 20
14492: PPUSH
14493: LD_VAR 0 1
14497: PPUSH
14498: CALL_OW 321
14502: PUSH
14503: LD_INT 2
14505: EQUAL
14506: ST_TO_ADDR
14507: GO 14720
14509: LD_INT 28
14511: DOUBLE
14512: EQUAL
14513: IFTRUE 14523
14515: LD_INT 21
14517: DOUBLE
14518: EQUAL
14519: IFTRUE 14523
14521: GO 14548
14523: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14524: LD_ADDR_VAR 0 3
14528: PUSH
14529: LD_INT 21
14531: PPUSH
14532: LD_VAR 0 1
14536: PPUSH
14537: CALL_OW 321
14541: PUSH
14542: LD_INT 2
14544: EQUAL
14545: ST_TO_ADDR
14546: GO 14720
14548: LD_INT 16
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14581
14556: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14557: LD_ADDR_VAR 0 3
14561: PUSH
14562: LD_INT 84
14564: PPUSH
14565: LD_VAR 0 1
14569: PPUSH
14570: CALL_OW 321
14574: PUSH
14575: LD_INT 2
14577: EQUAL
14578: ST_TO_ADDR
14579: GO 14720
14581: LD_INT 19
14583: DOUBLE
14584: EQUAL
14585: IFTRUE 14595
14587: LD_INT 23
14589: DOUBLE
14590: EQUAL
14591: IFTRUE 14595
14593: GO 14620
14595: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14596: LD_ADDR_VAR 0 3
14600: PUSH
14601: LD_INT 83
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 321
14613: PUSH
14614: LD_INT 2
14616: EQUAL
14617: ST_TO_ADDR
14618: GO 14720
14620: LD_INT 17
14622: DOUBLE
14623: EQUAL
14624: IFTRUE 14628
14626: GO 14653
14628: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14629: LD_ADDR_VAR 0 3
14633: PUSH
14634: LD_INT 39
14636: PPUSH
14637: LD_VAR 0 1
14641: PPUSH
14642: CALL_OW 321
14646: PUSH
14647: LD_INT 2
14649: EQUAL
14650: ST_TO_ADDR
14651: GO 14720
14653: LD_INT 18
14655: DOUBLE
14656: EQUAL
14657: IFTRUE 14661
14659: GO 14686
14661: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14662: LD_ADDR_VAR 0 3
14666: PUSH
14667: LD_INT 40
14669: PPUSH
14670: LD_VAR 0 1
14674: PPUSH
14675: CALL_OW 321
14679: PUSH
14680: LD_INT 2
14682: EQUAL
14683: ST_TO_ADDR
14684: GO 14720
14686: LD_INT 27
14688: DOUBLE
14689: EQUAL
14690: IFTRUE 14694
14692: GO 14719
14694: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_INT 35
14702: PPUSH
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 321
14712: PUSH
14713: LD_INT 2
14715: EQUAL
14716: ST_TO_ADDR
14717: GO 14720
14719: POP
// end ;
14720: LD_VAR 0 3
14724: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14725: LD_INT 0
14727: PPUSH
14728: PPUSH
14729: PPUSH
14730: PPUSH
14731: PPUSH
14732: PPUSH
14733: PPUSH
14734: PPUSH
14735: PPUSH
14736: PPUSH
14737: PPUSH
// result := false ;
14738: LD_ADDR_VAR 0 6
14742: PUSH
14743: LD_INT 0
14745: ST_TO_ADDR
// if btype = b_depot then
14746: LD_VAR 0 2
14750: PUSH
14751: LD_INT 0
14753: EQUAL
14754: IFFALSE 14766
// begin result := true ;
14756: LD_ADDR_VAR 0 6
14760: PUSH
14761: LD_INT 1
14763: ST_TO_ADDR
// exit ;
14764: GO 15592
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14766: LD_VAR 0 1
14770: NOT
14771: PUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 266
14781: PUSH
14782: LD_INT 0
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: IN
14792: NOT
14793: OR
14794: PUSH
14795: LD_VAR 0 2
14799: NOT
14800: OR
14801: PUSH
14802: LD_VAR 0 5
14806: PUSH
14807: LD_INT 0
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: LD_INT 3
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: LD_INT 5
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: IN
14833: NOT
14834: OR
14835: PUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_VAR 0 4
14845: PPUSH
14846: CALL_OW 488
14850: NOT
14851: OR
14852: IFFALSE 14856
// exit ;
14854: GO 15592
// side := GetSide ( depot ) ;
14856: LD_ADDR_VAR 0 9
14860: PUSH
14861: LD_VAR 0 1
14865: PPUSH
14866: CALL_OW 255
14870: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14871: LD_VAR 0 9
14875: PPUSH
14876: LD_VAR 0 2
14880: PPUSH
14881: CALL 14349 0 2
14885: NOT
14886: IFFALSE 14890
// exit ;
14888: GO 15592
// pom := GetBase ( depot ) ;
14890: LD_ADDR_VAR 0 10
14894: PUSH
14895: LD_VAR 0 1
14899: PPUSH
14900: CALL_OW 274
14904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14905: LD_ADDR_VAR 0 11
14909: PUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 248
14924: PPUSH
14925: CALL_OW 450
14929: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14930: LD_VAR 0 10
14934: PPUSH
14935: LD_INT 1
14937: PPUSH
14938: CALL_OW 275
14942: PUSH
14943: LD_VAR 0 11
14947: PUSH
14948: LD_INT 1
14950: ARRAY
14951: GREATEREQUAL
14952: PUSH
14953: LD_VAR 0 10
14957: PPUSH
14958: LD_INT 2
14960: PPUSH
14961: CALL_OW 275
14965: PUSH
14966: LD_VAR 0 11
14970: PUSH
14971: LD_INT 2
14973: ARRAY
14974: GREATEREQUAL
14975: AND
14976: PUSH
14977: LD_VAR 0 10
14981: PPUSH
14982: LD_INT 3
14984: PPUSH
14985: CALL_OW 275
14989: PUSH
14990: LD_VAR 0 11
14994: PUSH
14995: LD_INT 3
14997: ARRAY
14998: GREATEREQUAL
14999: AND
15000: NOT
15001: IFFALSE 15005
// exit ;
15003: GO 15592
// if GetBType ( depot ) = b_depot then
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 266
15014: PUSH
15015: LD_INT 0
15017: EQUAL
15018: IFFALSE 15030
// dist := 28 else
15020: LD_ADDR_VAR 0 14
15024: PUSH
15025: LD_INT 28
15027: ST_TO_ADDR
15028: GO 15038
// dist := 36 ;
15030: LD_ADDR_VAR 0 14
15034: PUSH
15035: LD_INT 36
15037: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_VAR 0 3
15047: PPUSH
15048: LD_VAR 0 4
15052: PPUSH
15053: CALL_OW 297
15057: PUSH
15058: LD_VAR 0 14
15062: GREATER
15063: IFFALSE 15067
// exit ;
15065: GO 15592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15067: LD_ADDR_VAR 0 12
15071: PUSH
15072: LD_VAR 0 2
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: LD_VAR 0 4
15086: PPUSH
15087: LD_VAR 0 5
15091: PPUSH
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL_OW 248
15101: PPUSH
15102: LD_INT 0
15104: PPUSH
15105: CALL 15597 0 6
15109: ST_TO_ADDR
// if not hexes then
15110: LD_VAR 0 12
15114: NOT
15115: IFFALSE 15119
// exit ;
15117: GO 15592
// hex := GetHexInfo ( x , y ) ;
15119: LD_ADDR_VAR 0 15
15123: PUSH
15124: LD_VAR 0 3
15128: PPUSH
15129: LD_VAR 0 4
15133: PPUSH
15134: CALL_OW 546
15138: ST_TO_ADDR
// if hex [ 1 ] then
15139: LD_VAR 0 15
15143: PUSH
15144: LD_INT 1
15146: ARRAY
15147: IFFALSE 15151
// exit ;
15149: GO 15592
// height := hex [ 2 ] ;
15151: LD_ADDR_VAR 0 13
15155: PUSH
15156: LD_VAR 0 15
15160: PUSH
15161: LD_INT 2
15163: ARRAY
15164: ST_TO_ADDR
// for i = 1 to hexes do
15165: LD_ADDR_VAR 0 7
15169: PUSH
15170: DOUBLE
15171: LD_INT 1
15173: DEC
15174: ST_TO_ADDR
15175: LD_VAR 0 12
15179: PUSH
15180: FOR_TO
15181: IFFALSE 15511
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15183: LD_VAR 0 12
15187: PUSH
15188: LD_VAR 0 7
15192: ARRAY
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_VAR 0 12
15202: PUSH
15203: LD_VAR 0 7
15207: ARRAY
15208: PUSH
15209: LD_INT 2
15211: ARRAY
15212: PPUSH
15213: CALL_OW 488
15217: NOT
15218: PUSH
15219: LD_VAR 0 12
15223: PUSH
15224: LD_VAR 0 7
15228: ARRAY
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_VAR 0 12
15238: PUSH
15239: LD_VAR 0 7
15243: ARRAY
15244: PUSH
15245: LD_INT 2
15247: ARRAY
15248: PPUSH
15249: CALL_OW 428
15253: PUSH
15254: LD_INT 0
15256: GREATER
15257: OR
15258: PUSH
15259: LD_VAR 0 12
15263: PUSH
15264: LD_VAR 0 7
15268: ARRAY
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: LD_VAR 0 12
15278: PUSH
15279: LD_VAR 0 7
15283: ARRAY
15284: PUSH
15285: LD_INT 2
15287: ARRAY
15288: PPUSH
15289: CALL_OW 351
15293: OR
15294: IFFALSE 15300
// exit ;
15296: POP
15297: POP
15298: GO 15592
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15300: LD_ADDR_VAR 0 8
15304: PUSH
15305: LD_VAR 0 12
15309: PUSH
15310: LD_VAR 0 7
15314: ARRAY
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: LD_VAR 0 12
15324: PUSH
15325: LD_VAR 0 7
15329: ARRAY
15330: PUSH
15331: LD_INT 2
15333: ARRAY
15334: PPUSH
15335: CALL_OW 546
15339: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15340: LD_VAR 0 8
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: PUSH
15349: LD_VAR 0 8
15353: PUSH
15354: LD_INT 2
15356: ARRAY
15357: PUSH
15358: LD_VAR 0 13
15362: PUSH
15363: LD_INT 2
15365: PLUS
15366: GREATER
15367: OR
15368: PUSH
15369: LD_VAR 0 8
15373: PUSH
15374: LD_INT 2
15376: ARRAY
15377: PUSH
15378: LD_VAR 0 13
15382: PUSH
15383: LD_INT 2
15385: MINUS
15386: LESS
15387: OR
15388: PUSH
15389: LD_VAR 0 8
15393: PUSH
15394: LD_INT 3
15396: ARRAY
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: LD_INT 8
15403: PUSH
15404: LD_INT 9
15406: PUSH
15407: LD_INT 10
15409: PUSH
15410: LD_INT 11
15412: PUSH
15413: LD_INT 12
15415: PUSH
15416: LD_INT 13
15418: PUSH
15419: LD_INT 16
15421: PUSH
15422: LD_INT 17
15424: PUSH
15425: LD_INT 18
15427: PUSH
15428: LD_INT 19
15430: PUSH
15431: LD_INT 20
15433: PUSH
15434: LD_INT 21
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: IN
15452: NOT
15453: OR
15454: PUSH
15455: LD_VAR 0 8
15459: PUSH
15460: LD_INT 5
15462: ARRAY
15463: NOT
15464: OR
15465: PUSH
15466: LD_VAR 0 8
15470: PUSH
15471: LD_INT 6
15473: ARRAY
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 7
15483: PUSH
15484: LD_INT 9
15486: PUSH
15487: LD_INT 10
15489: PUSH
15490: LD_INT 11
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: IN
15501: NOT
15502: OR
15503: IFFALSE 15509
// exit ;
15505: POP
15506: POP
15507: GO 15592
// end ;
15509: GO 15180
15511: POP
15512: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15513: LD_VAR 0 9
15517: PPUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: LD_VAR 0 4
15527: PPUSH
15528: LD_INT 20
15530: PPUSH
15531: CALL 7515 0 4
15535: PUSH
15536: LD_INT 4
15538: ARRAY
15539: IFFALSE 15543
// exit ;
15541: GO 15592
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15543: LD_VAR 0 2
15547: PUSH
15548: LD_INT 29
15550: PUSH
15551: LD_INT 30
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: IN
15558: PUSH
15559: LD_VAR 0 3
15563: PPUSH
15564: LD_VAR 0 4
15568: PPUSH
15569: LD_VAR 0 9
15573: PPUSH
15574: CALL_OW 440
15578: NOT
15579: AND
15580: IFFALSE 15584
// exit ;
15582: GO 15592
// result := true ;
15584: LD_ADDR_VAR 0 6
15588: PUSH
15589: LD_INT 1
15591: ST_TO_ADDR
// end ;
15592: LD_VAR 0 6
15596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
15632: PPUSH
15633: PPUSH
15634: PPUSH
15635: PPUSH
15636: PPUSH
15637: PPUSH
15638: PPUSH
15639: PPUSH
15640: PPUSH
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
15654: PPUSH
15655: PPUSH
15656: PPUSH
// result = [ ] ;
15657: LD_ADDR_VAR 0 7
15661: PUSH
15662: EMPTY
15663: ST_TO_ADDR
// temp_list = [ ] ;
15664: LD_ADDR_VAR 0 9
15668: PUSH
15669: EMPTY
15670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15671: LD_VAR 0 4
15675: PUSH
15676: LD_INT 0
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: IN
15702: NOT
15703: PUSH
15704: LD_VAR 0 1
15708: PUSH
15709: LD_INT 0
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: IN
15719: PUSH
15720: LD_VAR 0 5
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: LD_INT 3
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: IN
15739: NOT
15740: AND
15741: OR
15742: IFFALSE 15746
// exit ;
15744: GO 34137
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15746: LD_VAR 0 1
15750: PUSH
15751: LD_INT 6
15753: PUSH
15754: LD_INT 7
15756: PUSH
15757: LD_INT 8
15759: PUSH
15760: LD_INT 13
15762: PUSH
15763: LD_INT 12
15765: PUSH
15766: LD_INT 15
15768: PUSH
15769: LD_INT 11
15771: PUSH
15772: LD_INT 14
15774: PUSH
15775: LD_INT 10
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: IN
15789: IFFALSE 15799
// btype = b_lab ;
15791: LD_ADDR_VAR 0 1
15795: PUSH
15796: LD_INT 6
15798: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15799: LD_VAR 0 6
15803: PUSH
15804: LD_INT 0
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: LD_INT 2
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: IN
15818: NOT
15819: PUSH
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 0
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: LD_INT 2
15833: PUSH
15834: LD_INT 3
15836: PUSH
15837: LD_INT 6
15839: PUSH
15840: LD_INT 36
15842: PUSH
15843: LD_INT 4
15845: PUSH
15846: LD_INT 5
15848: PUSH
15849: LD_INT 31
15851: PUSH
15852: LD_INT 32
15854: PUSH
15855: LD_INT 33
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: IN
15871: NOT
15872: PUSH
15873: LD_VAR 0 6
15877: PUSH
15878: LD_INT 1
15880: EQUAL
15881: AND
15882: OR
15883: PUSH
15884: LD_VAR 0 1
15888: PUSH
15889: LD_INT 2
15891: PUSH
15892: LD_INT 3
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: IN
15899: NOT
15900: PUSH
15901: LD_VAR 0 6
15905: PUSH
15906: LD_INT 2
15908: EQUAL
15909: AND
15910: OR
15911: IFFALSE 15921
// mode = 0 ;
15913: LD_ADDR_VAR 0 6
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// case mode of 0 :
15921: LD_VAR 0 6
15925: PUSH
15926: LD_INT 0
15928: DOUBLE
15929: EQUAL
15930: IFTRUE 15934
15932: GO 27387
15934: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15935: LD_ADDR_VAR 0 11
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: LD_INT 0
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 0
15952: PUSH
15953: LD_INT 1
15955: NEG
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 1
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 1
15993: NEG
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 1
16004: NEG
16005: PUSH
16006: LD_INT 1
16008: NEG
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 1
16016: NEG
16017: PUSH
16018: LD_INT 2
16020: NEG
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: LD_INT 2
16031: NEG
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: PUSH
16040: LD_INT 1
16042: NEG
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 1
16050: PUSH
16051: LD_INT 2
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 0
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 1
16070: NEG
16071: PUSH
16072: LD_INT 1
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: LD_INT 3
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: LD_INT 3
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 1
16101: NEG
16102: PUSH
16103: LD_INT 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16128: LD_ADDR_VAR 0 12
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: LD_INT 1
16148: NEG
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 1
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 1
16186: NEG
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: NEG
16198: PUSH
16199: LD_INT 1
16201: NEG
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 2
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 2
16230: PUSH
16231: LD_INT 1
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 1
16240: NEG
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 2
16251: NEG
16252: PUSH
16253: LD_INT 0
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 2
16262: NEG
16263: PUSH
16264: LD_INT 1
16266: NEG
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 2
16274: NEG
16275: PUSH
16276: LD_INT 1
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 3
16285: NEG
16286: PUSH
16287: LD_INT 0
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 3
16296: NEG
16297: PUSH
16298: LD_INT 1
16300: NEG
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16324: LD_ADDR_VAR 0 13
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: LD_INT 0
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 0
16341: PUSH
16342: LD_INT 1
16344: NEG
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 0
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 1
16382: NEG
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: LD_INT 1
16397: NEG
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: NEG
16406: PUSH
16407: LD_INT 2
16409: NEG
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 2
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 1
16437: PUSH
16438: LD_INT 2
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 2
16447: NEG
16448: PUSH
16449: LD_INT 1
16451: NEG
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 2
16459: NEG
16460: PUSH
16461: LD_INT 2
16463: NEG
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: LD_INT 3
16475: NEG
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 3
16483: NEG
16484: PUSH
16485: LD_INT 2
16487: NEG
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 3
16495: NEG
16496: PUSH
16497: LD_INT 3
16499: NEG
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16523: LD_ADDR_VAR 0 14
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: LD_INT 0
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 1
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 1
16561: PUSH
16562: LD_INT 1
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 1
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 1
16581: NEG
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 1
16592: NEG
16593: PUSH
16594: LD_INT 1
16596: NEG
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: NEG
16605: PUSH
16606: LD_INT 2
16608: NEG
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 0
16616: PUSH
16617: LD_INT 2
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: LD_INT 1
16630: NEG
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 0
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: NEG
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 1
16669: NEG
16670: PUSH
16671: LD_INT 3
16673: NEG
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 0
16681: PUSH
16682: LD_INT 3
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: LD_INT 2
16695: NEG
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16719: LD_ADDR_VAR 0 15
16723: PUSH
16724: LD_INT 0
16726: PUSH
16727: LD_INT 0
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: LD_INT 1
16739: NEG
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 1
16747: PUSH
16748: LD_INT 0
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 1
16777: NEG
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 1
16788: NEG
16789: PUSH
16790: LD_INT 1
16792: NEG
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: LD_INT 1
16803: NEG
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 2
16811: PUSH
16812: LD_INT 0
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 2
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 1
16831: NEG
16832: PUSH
16833: LD_INT 1
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: LD_INT 0
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 2
16853: NEG
16854: PUSH
16855: LD_INT 1
16857: NEG
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: LD_INT 1
16868: NEG
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 3
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 3
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16912: LD_ADDR_VAR 0 16
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 0
16929: PUSH
16930: LD_INT 1
16932: NEG
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: LD_INT 0
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 1
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 0
16960: PUSH
16961: LD_INT 1
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 1
16970: NEG
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 1
16981: NEG
16982: PUSH
16983: LD_INT 1
16985: NEG
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: NEG
16994: PUSH
16995: LD_INT 2
16997: NEG
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 2
17015: PUSH
17016: LD_INT 2
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 2
17035: NEG
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 2
17047: NEG
17048: PUSH
17049: LD_INT 2
17051: NEG
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 3
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: LD_INT 3
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 3
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17105: LD_ADDR_VAR 0 17
17109: PUSH
17110: LD_INT 0
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: LD_INT 1
17125: NEG
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 1
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 0
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 1
17163: NEG
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 1
17174: NEG
17175: PUSH
17176: LD_INT 1
17178: NEG
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 1
17186: NEG
17187: PUSH
17188: LD_INT 2
17190: NEG
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 0
17198: PUSH
17199: LD_INT 2
17201: NEG
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: LD_INT 1
17212: NEG
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 2
17220: PUSH
17221: LD_INT 0
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: LD_INT 2
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 0
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 2
17281: NEG
17282: PUSH
17283: LD_INT 0
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 2
17292: NEG
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: NEG
17305: PUSH
17306: LD_INT 2
17308: NEG
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17335: LD_ADDR_VAR 0 18
17339: PUSH
17340: LD_INT 0
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 1
17355: NEG
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 0
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 1
17393: NEG
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 1
17404: NEG
17405: PUSH
17406: LD_INT 1
17408: NEG
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 1
17416: NEG
17417: PUSH
17418: LD_INT 2
17420: NEG
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: LD_INT 2
17431: NEG
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: LD_INT 1
17442: NEG
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: LD_INT 0
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 2
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 1
17500: NEG
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 2
17511: NEG
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 2
17522: NEG
17523: PUSH
17524: LD_INT 1
17526: NEG
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 2
17534: NEG
17535: PUSH
17536: LD_INT 2
17538: NEG
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17565: LD_ADDR_VAR 0 19
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: LD_INT 1
17585: NEG
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 0
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 1
17623: NEG
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 1
17634: NEG
17635: PUSH
17636: LD_INT 1
17638: NEG
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 1
17646: NEG
17647: PUSH
17648: LD_INT 2
17650: NEG
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: LD_INT 2
17661: NEG
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 2
17680: PUSH
17681: LD_INT 0
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 1
17730: NEG
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 2
17741: NEG
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 2
17752: NEG
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 2
17764: NEG
17765: PUSH
17766: LD_INT 2
17768: NEG
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17795: LD_ADDR_VAR 0 20
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: NEG
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: NEG
17877: PUSH
17878: LD_INT 2
17880: NEG
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 2
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: LD_INT 1
17902: NEG
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 0
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 2
17971: NEG
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 2
17982: NEG
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 2
17994: NEG
17995: PUSH
17996: LD_INT 2
17998: NEG
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18025: LD_ADDR_VAR 0 21
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 1
18045: NEG
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: LD_INT 2
18110: NEG
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: LD_INT 2
18121: NEG
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: LD_INT 0
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 2
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 0
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 2
18201: NEG
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: LD_INT 1
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: NEG
18225: PUSH
18226: LD_INT 2
18228: NEG
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18255: LD_ADDR_VAR 0 22
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: LD_INT 1
18275: NEG
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 1
18313: NEG
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: NEG
18325: PUSH
18326: LD_INT 1
18328: NEG
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: LD_INT 2
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 1
18362: NEG
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 2
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 2
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: LD_INT 2
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 1
18420: NEG
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 2
18431: NEG
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 2
18442: NEG
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 2
18454: NEG
18455: PUSH
18456: LD_INT 2
18458: NEG
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18485: LD_ADDR_VAR 0 23
18489: PUSH
18490: LD_INT 0
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: NEG
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 2
18661: NEG
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: NEG
18673: PUSH
18674: LD_INT 1
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 2
18684: NEG
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 2
18696: NEG
18697: PUSH
18698: LD_INT 3
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: LD_INT 3
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 2
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18765: LD_ADDR_VAR 0 24
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: NEG
18847: PUSH
18848: LD_INT 2
18850: NEG
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 2
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 1
18872: NEG
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: LD_INT 2
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: NEG
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 2
18964: NEG
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 3
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 3
19008: PUSH
19009: LD_INT 2
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19041: LD_ADDR_VAR 0 25
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 1
19110: NEG
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: NEG
19123: PUSH
19124: LD_INT 2
19126: NEG
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: LD_INT 2
19137: NEG
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: PUSH
19146: LD_INT 1
19148: NEG
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: LD_INT 2
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: NEG
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 2
19217: NEG
19218: PUSH
19219: LD_INT 0
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: NEG
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: NEG
19241: PUSH
19242: LD_INT 2
19244: NEG
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 3
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 3
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: LD_INT 3
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: LD_INT 3
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19315: LD_ADDR_VAR 0 26
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 1
19384: NEG
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 2
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 2
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 2
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: NEG
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 2
19502: NEG
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: LD_INT 2
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: LD_INT 3
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: LD_INT 3
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19591: LD_ADDR_VAR 0 27
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: LD_INT 1
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: LD_INT 2
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 2
19778: NEG
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: NEG
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 2
19813: NEG
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 3
19824: NEG
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 3
19836: NEG
19837: PUSH
19838: LD_INT 2
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19871: LD_ADDR_VAR 0 28
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: LD_INT 0
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: LD_INT 1
19944: NEG
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: NEG
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: LD_INT 2
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: NEG
20083: PUSH
20084: LD_INT 3
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: LD_INT 3
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 3
20106: NEG
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 3
20118: NEG
20119: PUSH
20120: LD_INT 2
20122: NEG
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20153: LD_ADDR_VAR 0 29
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 1
20222: NEG
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 1
20234: NEG
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 2
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 1
20260: NEG
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: LD_INT 0
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: NEG
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: NEG
20332: PUSH
20333: LD_INT 2
20335: NEG
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: LD_INT 3
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 3
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: LD_INT 3
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 3
20397: NEG
20398: PUSH
20399: LD_INT 2
20401: NEG
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20432: LD_ADDR_VAR 0 30
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: LD_INT 1
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: NEG
20491: PUSH
20492: LD_INT 0
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: LD_INT 2
20517: NEG
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: PUSH
20568: LD_INT 2
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 2
20598: NEG
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 2
20609: NEG
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: LD_INT 3
20625: NEG
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: LD_INT 2
20636: NEG
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 3
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: LD_INT 3
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 2
20664: NEG
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 3
20675: NEG
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20710: LD_ADDR_VAR 0 31
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 0
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: NEG
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: LD_INT 2
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 2
20875: NEG
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: NEG
20888: PUSH
20889: LD_INT 2
20891: NEG
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 2
20899: NEG
20900: PUSH
20901: LD_INT 3
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 3
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: LD_INT 3
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 1
20942: NEG
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 3
20953: NEG
20954: PUSH
20955: LD_INT 2
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20988: LD_ADDR_VAR 0 32
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: LD_INT 0
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: LD_INT 1
21008: NEG
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 1
21046: NEG
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: NEG
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: LD_INT 2
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 2
21154: NEG
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 2
21165: NEG
21166: PUSH
21167: LD_INT 1
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: LD_INT 3
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 2
21192: NEG
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 3
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 3
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: NEG
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 3
21231: NEG
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21266: LD_ADDR_VAR 0 33
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: NEG
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: LD_INT 0
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: NEG
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: NEG
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: NEG
21445: PUSH
21446: LD_INT 2
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: LD_INT 3
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 3
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 3
21510: NEG
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21545: LD_ADDR_VAR 0 34
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 2
21701: NEG
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 2
21712: NEG
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: NEG
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: LD_INT 3
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: LD_INT 2
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 3
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 3
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 2
21779: NEG
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 3
21790: NEG
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21825: LD_ADDR_VAR 0 35
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: LD_INT 0
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: LD_INT 1
21845: NEG
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 1
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 0
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: LD_INT 1
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 2
21916: NEG
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21937: LD_ADDR_VAR 0 36
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: LD_INT 1
21957: NEG
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: LD_INT 1
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: NEG
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22049: LD_ADDR_VAR 0 37
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: LD_INT 0
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: LD_INT 0
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: LD_INT 1
22122: NEG
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 1
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22161: LD_ADDR_VAR 0 38
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: NEG
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22273: LD_ADDR_VAR 0 39
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22385: LD_ADDR_VAR 0 40
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: LD_INT 1
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 1
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22497: LD_ADDR_VAR 0 41
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: LD_INT 1
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: LD_INT 2
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: NEG
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 2
22675: NEG
22676: PUSH
22677: LD_INT 2
22679: NEG
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: NEG
22688: PUSH
22689: LD_INT 3
22691: NEG
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 3
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 3
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 3
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: NEG
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 3
22771: NEG
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 3
22782: NEG
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 3
22794: NEG
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 3
22806: NEG
22807: PUSH
22808: LD_INT 3
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22847: LD_ADDR_VAR 0 42
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: LD_INT 1
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 2
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 2
23013: NEG
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: NEG
23026: PUSH
23027: LD_INT 2
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: LD_INT 3
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: LD_INT 3
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 3
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: LD_INT 3
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 3
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: NEG
23145: PUSH
23146: LD_INT 2
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 3
23156: NEG
23157: PUSH
23158: LD_INT 3
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23197: LD_ADDR_VAR 0 43
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: LD_INT 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 2
23363: NEG
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 2
23374: NEG
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: LD_INT 3
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 3
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 3
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 3
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 3
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: LD_INT 3
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 2
23482: NEG
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 3
23493: NEG
23494: PUSH
23495: LD_INT 0
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 3
23504: NEG
23505: PUSH
23506: LD_INT 1
23508: NEG
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23545: LD_ADDR_VAR 0 44
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: LD_INT 1
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 1
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 2
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 2
23700: NEG
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 2
23711: NEG
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: NEG
23724: PUSH
23725: LD_INT 2
23727: NEG
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 2
23735: NEG
23736: PUSH
23737: LD_INT 3
23739: NEG
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 3
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 3
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: LD_INT 3
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: NEG
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 3
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 3
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 3
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 3
23854: NEG
23855: PUSH
23856: LD_INT 3
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23895: LD_ADDR_VAR 0 45
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: LD_INT 2
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 2
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 2
24061: NEG
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: NEG
24086: PUSH
24087: LD_INT 3
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 3
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: LD_INT 3
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 2
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: LD_INT 3
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 3
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: LD_INT 3
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 2
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 3
24192: NEG
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 3
24204: NEG
24205: PUSH
24206: LD_INT 3
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24245: LD_ADDR_VAR 0 46
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 2
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 2
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: LD_INT 2
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 2
24411: NEG
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 2
24422: NEG
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: LD_INT 3
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: LD_INT 3
24449: NEG
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 3
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 3
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 3
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 3
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 2
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 3
24541: NEG
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 3
24552: NEG
24553: PUSH
24554: LD_INT 1
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24593: LD_ADDR_VAR 0 47
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: LD_INT 1
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: LD_INT 1
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 2
24720: NEG
24721: PUSH
24722: LD_INT 2
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24744: LD_ADDR_VAR 0 48
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24891: LD_ADDR_VAR 0 49
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25035: LD_ADDR_VAR 0 50
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: LD_INT 2
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25179: LD_ADDR_VAR 0 51
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: LD_INT 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 2
25291: NEG
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 2
25302: NEG
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25326: LD_ADDR_VAR 0 52
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 1
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 2
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 2
25441: NEG
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: NEG
25454: PUSH
25455: LD_INT 2
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25477: LD_ADDR_VAR 0 53
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: NEG
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: LD_INT 2
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 2
25653: NEG
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: NEG
25677: PUSH
25678: LD_INT 2
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25707: LD_ADDR_VAR 0 54
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 2
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 2
25883: NEG
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: NEG
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25937: LD_ADDR_VAR 0 55
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 2
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: NEG
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 2
26136: NEG
26137: PUSH
26138: LD_INT 2
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26167: LD_ADDR_VAR 0 56
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: LD_INT 2
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 2
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: LD_INT 2
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26397: LD_ADDR_VAR 0 57
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26627: LD_ADDR_VAR 0 58
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: NEG
26827: PUSH
26828: LD_INT 2
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26857: LD_ADDR_VAR 0 59
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: NEG
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26945: LD_ADDR_VAR 0 60
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27033: LD_ADDR_VAR 0 61
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27121: LD_ADDR_VAR 0 62
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27209: LD_ADDR_VAR 0 63
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27297: LD_ADDR_VAR 0 64
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: ST_TO_ADDR
// end ; 1 :
27385: GO 33282
27387: LD_INT 1
27389: DOUBLE
27390: EQUAL
27391: IFTRUE 27395
27393: GO 30018
27395: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27396: LD_ADDR_VAR 0 11
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: LD_INT 3
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 3
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27440: LD_ADDR_VAR 0 12
27444: PUSH
27445: LD_INT 2
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 3
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 3
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27481: LD_ADDR_VAR 0 13
27485: PUSH
27486: LD_INT 3
27488: PUSH
27489: LD_INT 2
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 3
27498: PUSH
27499: LD_INT 3
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: LD_INT 3
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27521: LD_ADDR_VAR 0 14
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 3
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27562: LD_ADDR_VAR 0 15
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 3
27580: NEG
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 3
27591: NEG
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27606: LD_ADDR_VAR 0 16
27610: PUSH
27611: LD_INT 2
27613: NEG
27614: PUSH
27615: LD_INT 3
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 3
27625: NEG
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 3
27637: NEG
27638: PUSH
27639: LD_INT 3
27641: NEG
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27652: LD_ADDR_VAR 0 17
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: LD_INT 3
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 3
27674: NEG
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27696: LD_ADDR_VAR 0 18
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 3
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: LIST
27736: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27737: LD_ADDR_VAR 0 19
27741: PUSH
27742: LD_INT 3
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: LD_INT 3
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: LD_INT 3
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: LIST
27776: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27777: LD_ADDR_VAR 0 20
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: NEG
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27818: LD_ADDR_VAR 0 21
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 3
27836: NEG
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 3
27847: NEG
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27862: LD_ADDR_VAR 0 22
27866: PUSH
27867: LD_INT 2
27869: NEG
27870: PUSH
27871: LD_INT 3
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 3
27881: NEG
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 3
27893: NEG
27894: PUSH
27895: LD_INT 3
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27908: LD_ADDR_VAR 0 23
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 3
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: LD_INT 4
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 3
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27952: LD_ADDR_VAR 0 24
27956: PUSH
27957: LD_INT 3
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 3
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 4
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: LIST
27992: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27993: LD_ADDR_VAR 0 25
27997: PUSH
27998: LD_INT 3
28000: PUSH
28001: LD_INT 3
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 4
28010: PUSH
28011: LD_INT 3
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 3
28020: PUSH
28021: LD_INT 4
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28033: LD_ADDR_VAR 0 26
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 3
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 4
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: NEG
28061: PUSH
28062: LD_INT 3
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28074: LD_ADDR_VAR 0 27
28078: PUSH
28079: LD_INT 3
28081: NEG
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 3
28092: NEG
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 4
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28118: LD_ADDR_VAR 0 28
28122: PUSH
28123: LD_INT 3
28125: NEG
28126: PUSH
28127: LD_INT 3
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 3
28137: NEG
28138: PUSH
28139: LD_INT 4
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 4
28149: NEG
28150: PUSH
28151: LD_INT 3
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28164: LD_ADDR_VAR 0 29
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: LD_INT 3
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: LD_INT 3
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: LD_INT 4
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: LD_INT 4
28220: NEG
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: LD_INT 3
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: LD_INT 5
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 5
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 4
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 6
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 6
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: LD_INT 5
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28319: LD_ADDR_VAR 0 30
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 3
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 3
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 3
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 4
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 4
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 5
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 5
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 5
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 6
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 6
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28462: LD_ADDR_VAR 0 31
28466: PUSH
28467: LD_INT 3
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 3
28479: PUSH
28480: LD_INT 3
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 2
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 4
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 4
28509: PUSH
28510: LD_INT 4
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 3
28519: PUSH
28520: LD_INT 4
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 5
28529: PUSH
28530: LD_INT 4
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 5
28539: PUSH
28540: LD_INT 5
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 4
28549: PUSH
28550: LD_INT 5
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 6
28559: PUSH
28560: LD_INT 5
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 6
28569: PUSH
28570: LD_INT 6
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 5
28579: PUSH
28580: LD_INT 6
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28601: LD_ADDR_VAR 0 32
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: LD_INT 4
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 4
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: LD_INT 3
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 5
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 5
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 4
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 6
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 6
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: LD_INT 5
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28744: LD_ADDR_VAR 0 33
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 3
28762: NEG
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 3
28773: NEG
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 3
28785: NEG
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 4
28796: NEG
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 4
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 4
28819: NEG
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 5
28830: NEG
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 5
28841: NEG
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 5
28853: NEG
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 6
28864: NEG
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 6
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28899: LD_ADDR_VAR 0 34
28903: PUSH
28904: LD_INT 2
28906: NEG
28907: PUSH
28908: LD_INT 3
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 3
28918: NEG
28919: PUSH
28920: LD_INT 2
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 3
28930: NEG
28931: PUSH
28932: LD_INT 3
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 3
28942: NEG
28943: PUSH
28944: LD_INT 4
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 4
28954: NEG
28955: PUSH
28956: LD_INT 3
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 4
28966: NEG
28967: PUSH
28968: LD_INT 4
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 4
28978: NEG
28979: PUSH
28980: LD_INT 5
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 5
28990: NEG
28991: PUSH
28992: LD_INT 4
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 5
29002: NEG
29003: PUSH
29004: LD_INT 5
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 5
29014: NEG
29015: PUSH
29016: LD_INT 6
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 6
29026: NEG
29027: PUSH
29028: LD_INT 5
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 6
29038: NEG
29039: PUSH
29040: LD_INT 6
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29062: LD_ADDR_VAR 0 41
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: LD_INT 3
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29106: LD_ADDR_VAR 0 42
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: LIST
29146: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29147: LD_ADDR_VAR 0 43
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 3
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29187: LD_ADDR_VAR 0 44
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29228: LD_ADDR_VAR 0 45
29232: PUSH
29233: LD_INT 2
29235: NEG
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 2
29246: NEG
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29272: LD_ADDR_VAR 0 46
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: LD_INT 2
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: NEG
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 3
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29318: LD_ADDR_VAR 0 47
29322: PUSH
29323: LD_INT 2
29325: NEG
29326: PUSH
29327: LD_INT 3
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: LD_INT 3
29341: NEG
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29351: LD_ADDR_VAR 0 48
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29382: LD_ADDR_VAR 0 49
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 3
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29411: LD_ADDR_VAR 0 50
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29440: LD_ADDR_VAR 0 51
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29471: LD_ADDR_VAR 0 52
29475: PUSH
29476: LD_INT 3
29478: NEG
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 3
29490: NEG
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29504: LD_ADDR_VAR 0 53
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: LD_INT 3
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: LD_INT 3
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29548: LD_ADDR_VAR 0 54
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 3
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29589: LD_ADDR_VAR 0 55
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 3
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29629: LD_ADDR_VAR 0 56
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: LD_INT 3
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: LD_INT 3
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29670: LD_ADDR_VAR 0 57
29674: PUSH
29675: LD_INT 2
29677: NEG
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 3
29688: NEG
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 3
29699: NEG
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29714: LD_ADDR_VAR 0 58
29718: PUSH
29719: LD_INT 2
29721: NEG
29722: PUSH
29723: LD_INT 3
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 3
29733: NEG
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: LD_INT 3
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: LIST
29759: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29760: LD_ADDR_VAR 0 59
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: LD_INT 2
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29804: LD_ADDR_VAR 0 60
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29845: LD_ADDR_VAR 0 61
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29885: LD_ADDR_VAR 0 62
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29926: LD_ADDR_VAR 0 63
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 2
29955: NEG
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29970: LD_ADDR_VAR 0 64
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 2
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: NEG
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: ST_TO_ADDR
// end ; 2 :
30016: GO 33282
30018: LD_INT 2
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 33281
30026: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30027: LD_ADDR_VAR 0 29
30031: PUSH
30032: LD_INT 4
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 4
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 5
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 5
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 4
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: LD_INT 2
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 5
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 4
30147: PUSH
30148: LD_INT 3
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 4
30157: PUSH
30158: LD_INT 4
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 3
30167: PUSH
30168: LD_INT 4
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: LD_INT 3
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 4
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 4
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: LD_INT 4
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 3
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: LD_INT 4
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: LD_INT 5
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 5
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: LD_INT 4
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 3
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: PUSH
30290: LD_INT 5
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: LD_INT 3
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 3
30310: NEG
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: NEG
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 2
30333: NEG
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: NEG
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 3
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 4
30366: NEG
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 4
30377: NEG
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: NEG
30413: PUSH
30414: LD_INT 4
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 4
30424: NEG
30425: PUSH
30426: LD_INT 5
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 3
30436: NEG
30437: PUSH
30438: LD_INT 4
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: LD_INT 3
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: LD_INT 3
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 5
30472: NEG
30473: PUSH
30474: LD_INT 4
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 5
30484: NEG
30485: PUSH
30486: LD_INT 5
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 3
30496: NEG
30497: PUSH
30498: LD_INT 5
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 5
30508: NEG
30509: PUSH
30510: LD_INT 3
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30565: LD_ADDR_VAR 0 30
30569: PUSH
30570: LD_INT 4
30572: PUSH
30573: LD_INT 4
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 5
30602: PUSH
30603: LD_INT 5
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 4
30612: PUSH
30613: LD_INT 5
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: LD_INT 4
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 5
30642: PUSH
30643: LD_INT 3
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 3
30652: PUSH
30653: LD_INT 5
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 3
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 4
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 4
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 2
30734: PUSH
30735: LD_INT 4
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 4
30755: NEG
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 4
30766: NEG
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: NEG
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: NEG
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 4
30800: NEG
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 5
30811: NEG
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 5
30822: NEG
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 5
30834: NEG
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 3
30846: NEG
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 3
30857: NEG
30858: PUSH
30859: LD_INT 3
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 3
30869: NEG
30870: PUSH
30871: LD_INT 4
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: LD_INT 3
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: LD_INT 2
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 3
30905: NEG
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 4
30917: NEG
30918: PUSH
30919: LD_INT 3
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 4
30929: NEG
30930: PUSH
30931: LD_INT 4
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: LD_INT 4
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 4
30953: NEG
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 5
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: LD_INT 4
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 3
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 3
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 4
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: LD_INT 5
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: LD_INT 3
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: NEG
31056: PUSH
31057: LD_INT 5
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31112: LD_ADDR_VAR 0 31
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: LD_INT 4
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 3
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: LD_INT 4
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 5
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 5
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 4
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: LD_INT 5
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 2
31201: NEG
31202: PUSH
31203: LD_INT 3
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 3
31212: NEG
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 3
31223: NEG
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 2
31235: NEG
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 4
31268: NEG
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 4
31279: NEG
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 4
31291: NEG
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: NEG
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 4
31314: NEG
31315: PUSH
31316: LD_INT 4
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 4
31326: NEG
31327: PUSH
31328: LD_INT 5
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: LD_INT 4
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 4
31362: NEG
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 5
31374: NEG
31375: PUSH
31376: LD_INT 4
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 5
31386: NEG
31387: PUSH
31388: LD_INT 5
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: LD_INT 5
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 5
31410: NEG
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 4
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 3
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 3
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: LD_INT 4
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 2
31512: NEG
31513: PUSH
31514: LD_INT 4
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 4
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 4
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 5
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 5
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 3
31585: PUSH
31586: LD_INT 1
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: LD_INT 2
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 5
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31662: LD_ADDR_VAR 0 32
31666: PUSH
31667: LD_INT 4
31669: NEG
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 4
31680: NEG
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 4
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 5
31725: NEG
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 5
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 5
31748: NEG
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: NEG
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: LD_INT 3
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: LD_INT 4
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 4
31831: NEG
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 4
31843: NEG
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: LD_INT 4
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 4
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: LD_INT 5
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 4
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 4
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 5
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 3
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 5
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 4
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 2
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 4
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 4
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 4
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 5
32094: PUSH
32095: LD_INT 4
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: LD_INT 5
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 4
32114: PUSH
32115: LD_INT 5
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: LD_INT 4
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 5
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: LD_INT 5
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32209: LD_ADDR_VAR 0 33
32213: PUSH
32214: LD_INT 4
32216: NEG
32217: PUSH
32218: LD_INT 4
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 4
32228: NEG
32229: PUSH
32230: LD_INT 5
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 3
32240: NEG
32241: PUSH
32242: LD_INT 4
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: LD_INT 3
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 4
32264: NEG
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 5
32276: NEG
32277: PUSH
32278: LD_INT 4
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 5
32288: NEG
32289: PUSH
32290: LD_INT 5
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: LD_INT 5
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 5
32312: NEG
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 3
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 4
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 3
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: LD_INT 4
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 2
32414: NEG
32415: PUSH
32416: LD_INT 4
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 4
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 4
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 5
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 4
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 5
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 4
32549: PUSH
32550: LD_INT 4
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 3
32559: PUSH
32560: LD_INT 4
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 4
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 4
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: LD_INT 3
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 5
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: LD_INT 4
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 3
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32747: LD_ADDR_VAR 0 34
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 5
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 4
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 3
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: LD_INT 4
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 5
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 3
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: LD_INT 5
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 3
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 4
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 4
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 3
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 2
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 4
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 4
32949: PUSH
32950: LD_INT 4
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 4
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 5
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 5
32979: PUSH
32980: LD_INT 5
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 4
32989: PUSH
32990: LD_INT 5
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: PUSH
33000: LD_INT 4
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 5
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: LD_INT 3
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 4
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 4
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: LD_INT 4
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: LD_INT 2
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 4
33132: NEG
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 4
33143: NEG
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 3
33155: NEG
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 3
33166: NEG
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 4
33177: NEG
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 5
33188: NEG
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 5
33199: NEG
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 5
33211: NEG
33212: PUSH
33213: LD_INT 2
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 3
33223: NEG
33224: PUSH
33225: LD_INT 2
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: ST_TO_ADDR
// end ; end ;
33279: GO 33282
33281: POP
// case btype of b_depot , b_warehouse :
33282: LD_VAR 0 1
33286: PUSH
33287: LD_INT 0
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33301
33293: LD_INT 1
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33502
33301: POP
// case nation of nation_american :
33302: LD_VAR 0 5
33306: PUSH
33307: LD_INT 1
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33371
33315: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33316: LD_ADDR_VAR 0 9
33320: PUSH
33321: LD_VAR 0 11
33325: PUSH
33326: LD_VAR 0 12
33330: PUSH
33331: LD_VAR 0 13
33335: PUSH
33336: LD_VAR 0 14
33340: PUSH
33341: LD_VAR 0 15
33345: PUSH
33346: LD_VAR 0 16
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: PUSH
33359: LD_VAR 0 4
33363: PUSH
33364: LD_INT 1
33366: PLUS
33367: ARRAY
33368: ST_TO_ADDR
33369: GO 33500
33371: LD_INT 2
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33435
33379: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33380: LD_ADDR_VAR 0 9
33384: PUSH
33385: LD_VAR 0 17
33389: PUSH
33390: LD_VAR 0 18
33394: PUSH
33395: LD_VAR 0 19
33399: PUSH
33400: LD_VAR 0 20
33404: PUSH
33405: LD_VAR 0 21
33409: PUSH
33410: LD_VAR 0 22
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: PUSH
33423: LD_VAR 0 4
33427: PUSH
33428: LD_INT 1
33430: PLUS
33431: ARRAY
33432: ST_TO_ADDR
33433: GO 33500
33435: LD_INT 3
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33499
33443: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33444: LD_ADDR_VAR 0 9
33448: PUSH
33449: LD_VAR 0 23
33453: PUSH
33454: LD_VAR 0 24
33458: PUSH
33459: LD_VAR 0 25
33463: PUSH
33464: LD_VAR 0 26
33468: PUSH
33469: LD_VAR 0 27
33473: PUSH
33474: LD_VAR 0 28
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: PUSH
33487: LD_VAR 0 4
33491: PUSH
33492: LD_INT 1
33494: PLUS
33495: ARRAY
33496: ST_TO_ADDR
33497: GO 33500
33499: POP
33500: GO 34055
33502: LD_INT 2
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33516
33508: LD_INT 3
33510: DOUBLE
33511: EQUAL
33512: IFTRUE 33516
33514: GO 33572
33516: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33517: LD_ADDR_VAR 0 9
33521: PUSH
33522: LD_VAR 0 29
33526: PUSH
33527: LD_VAR 0 30
33531: PUSH
33532: LD_VAR 0 31
33536: PUSH
33537: LD_VAR 0 32
33541: PUSH
33542: LD_VAR 0 33
33546: PUSH
33547: LD_VAR 0 34
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: PUSH
33560: LD_VAR 0 4
33564: PUSH
33565: LD_INT 1
33567: PLUS
33568: ARRAY
33569: ST_TO_ADDR
33570: GO 34055
33572: LD_INT 16
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33634
33578: LD_INT 17
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33634
33584: LD_INT 18
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33634
33590: LD_INT 19
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33634
33596: LD_INT 22
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33634
33602: LD_INT 20
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33634
33608: LD_INT 21
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33634
33614: LD_INT 23
33616: DOUBLE
33617: EQUAL
33618: IFTRUE 33634
33620: LD_INT 24
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33634
33626: LD_INT 25
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33634
33632: GO 33690
33634: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33635: LD_ADDR_VAR 0 9
33639: PUSH
33640: LD_VAR 0 35
33644: PUSH
33645: LD_VAR 0 36
33649: PUSH
33650: LD_VAR 0 37
33654: PUSH
33655: LD_VAR 0 38
33659: PUSH
33660: LD_VAR 0 39
33664: PUSH
33665: LD_VAR 0 40
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: LD_VAR 0 4
33682: PUSH
33683: LD_INT 1
33685: PLUS
33686: ARRAY
33687: ST_TO_ADDR
33688: GO 34055
33690: LD_INT 6
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33746
33696: LD_INT 7
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33746
33702: LD_INT 8
33704: DOUBLE
33705: EQUAL
33706: IFTRUE 33746
33708: LD_INT 13
33710: DOUBLE
33711: EQUAL
33712: IFTRUE 33746
33714: LD_INT 12
33716: DOUBLE
33717: EQUAL
33718: IFTRUE 33746
33720: LD_INT 15
33722: DOUBLE
33723: EQUAL
33724: IFTRUE 33746
33726: LD_INT 11
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33746
33732: LD_INT 14
33734: DOUBLE
33735: EQUAL
33736: IFTRUE 33746
33738: LD_INT 10
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33802
33746: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33747: LD_ADDR_VAR 0 9
33751: PUSH
33752: LD_VAR 0 41
33756: PUSH
33757: LD_VAR 0 42
33761: PUSH
33762: LD_VAR 0 43
33766: PUSH
33767: LD_VAR 0 44
33771: PUSH
33772: LD_VAR 0 45
33776: PUSH
33777: LD_VAR 0 46
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: PUSH
33790: LD_VAR 0 4
33794: PUSH
33795: LD_INT 1
33797: PLUS
33798: ARRAY
33799: ST_TO_ADDR
33800: GO 34055
33802: LD_INT 36
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33866
33810: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33811: LD_ADDR_VAR 0 9
33815: PUSH
33816: LD_VAR 0 47
33820: PUSH
33821: LD_VAR 0 48
33825: PUSH
33826: LD_VAR 0 49
33830: PUSH
33831: LD_VAR 0 50
33835: PUSH
33836: LD_VAR 0 51
33840: PUSH
33841: LD_VAR 0 52
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: PUSH
33854: LD_VAR 0 4
33858: PUSH
33859: LD_INT 1
33861: PLUS
33862: ARRAY
33863: ST_TO_ADDR
33864: GO 34055
33866: LD_INT 4
33868: DOUBLE
33869: EQUAL
33870: IFTRUE 33892
33872: LD_INT 5
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33892
33878: LD_INT 34
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33892
33884: LD_INT 37
33886: DOUBLE
33887: EQUAL
33888: IFTRUE 33892
33890: GO 33948
33892: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33893: LD_ADDR_VAR 0 9
33897: PUSH
33898: LD_VAR 0 53
33902: PUSH
33903: LD_VAR 0 54
33907: PUSH
33908: LD_VAR 0 55
33912: PUSH
33913: LD_VAR 0 56
33917: PUSH
33918: LD_VAR 0 57
33922: PUSH
33923: LD_VAR 0 58
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: PUSH
33936: LD_VAR 0 4
33940: PUSH
33941: LD_INT 1
33943: PLUS
33944: ARRAY
33945: ST_TO_ADDR
33946: GO 34055
33948: LD_INT 31
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33998
33954: LD_INT 32
33956: DOUBLE
33957: EQUAL
33958: IFTRUE 33998
33960: LD_INT 33
33962: DOUBLE
33963: EQUAL
33964: IFTRUE 33998
33966: LD_INT 27
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33998
33972: LD_INT 26
33974: DOUBLE
33975: EQUAL
33976: IFTRUE 33998
33978: LD_INT 28
33980: DOUBLE
33981: EQUAL
33982: IFTRUE 33998
33984: LD_INT 29
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33998
33990: LD_INT 30
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34054
33998: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33999: LD_ADDR_VAR 0 9
34003: PUSH
34004: LD_VAR 0 59
34008: PUSH
34009: LD_VAR 0 60
34013: PUSH
34014: LD_VAR 0 61
34018: PUSH
34019: LD_VAR 0 62
34023: PUSH
34024: LD_VAR 0 63
34028: PUSH
34029: LD_VAR 0 64
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: PUSH
34042: LD_VAR 0 4
34046: PUSH
34047: LD_INT 1
34049: PLUS
34050: ARRAY
34051: ST_TO_ADDR
34052: GO 34055
34054: POP
// temp_list2 = [ ] ;
34055: LD_ADDR_VAR 0 10
34059: PUSH
34060: EMPTY
34061: ST_TO_ADDR
// for i in temp_list do
34062: LD_ADDR_VAR 0 8
34066: PUSH
34067: LD_VAR 0 9
34071: PUSH
34072: FOR_IN
34073: IFFALSE 34125
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34075: LD_ADDR_VAR 0 10
34079: PUSH
34080: LD_VAR 0 10
34084: PUSH
34085: LD_VAR 0 8
34089: PUSH
34090: LD_INT 1
34092: ARRAY
34093: PUSH
34094: LD_VAR 0 2
34098: PLUS
34099: PUSH
34100: LD_VAR 0 8
34104: PUSH
34105: LD_INT 2
34107: ARRAY
34108: PUSH
34109: LD_VAR 0 3
34113: PLUS
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: EMPTY
34120: LIST
34121: ADD
34122: ST_TO_ADDR
34123: GO 34072
34125: POP
34126: POP
// result = temp_list2 ;
34127: LD_ADDR_VAR 0 7
34131: PUSH
34132: LD_VAR 0 10
34136: ST_TO_ADDR
// end ;
34137: LD_VAR 0 7
34141: RET
// export function EnemyInRange ( unit , dist ) ; begin
34142: LD_INT 0
34144: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 255
34159: PPUSH
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 250
34169: PPUSH
34170: LD_VAR 0 1
34174: PPUSH
34175: CALL_OW 251
34179: PPUSH
34180: LD_VAR 0 2
34184: PPUSH
34185: CALL 7515 0 4
34189: PUSH
34190: LD_INT 4
34192: ARRAY
34193: ST_TO_ADDR
// end ;
34194: LD_VAR 0 3
34198: RET
// export function PlayerSeeMe ( unit ) ; begin
34199: LD_INT 0
34201: PPUSH
// result := See ( your_side , unit ) ;
34202: LD_ADDR_VAR 0 2
34206: PUSH
34207: LD_OWVAR 2
34211: PPUSH
34212: LD_VAR 0 1
34216: PPUSH
34217: CALL_OW 292
34221: ST_TO_ADDR
// end ;
34222: LD_VAR 0 2
34226: RET
// export function ReverseDir ( unit ) ; begin
34227: LD_INT 0
34229: PPUSH
// if not unit then
34230: LD_VAR 0 1
34234: NOT
34235: IFFALSE 34239
// exit ;
34237: GO 34262
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 254
34253: PUSH
34254: LD_INT 3
34256: PLUS
34257: PUSH
34258: LD_INT 6
34260: MOD
34261: ST_TO_ADDR
// end ;
34262: LD_VAR 0 2
34266: RET
// export function ReverseArray ( array ) ; var i ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
// if not array then
34271: LD_VAR 0 1
34275: NOT
34276: IFFALSE 34280
// exit ;
34278: GO 34335
// result := [ ] ;
34280: LD_ADDR_VAR 0 2
34284: PUSH
34285: EMPTY
34286: ST_TO_ADDR
// for i := array downto 1 do
34287: LD_ADDR_VAR 0 3
34291: PUSH
34292: DOUBLE
34293: LD_VAR 0 1
34297: INC
34298: ST_TO_ADDR
34299: LD_INT 1
34301: PUSH
34302: FOR_DOWNTO
34303: IFFALSE 34333
// result := Join ( result , array [ i ] ) ;
34305: LD_ADDR_VAR 0 2
34309: PUSH
34310: LD_VAR 0 2
34314: PPUSH
34315: LD_VAR 0 1
34319: PUSH
34320: LD_VAR 0 3
34324: ARRAY
34325: PPUSH
34326: CALL 38978 0 2
34330: ST_TO_ADDR
34331: GO 34302
34333: POP
34334: POP
// end ;
34335: LD_VAR 0 2
34339: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34340: LD_INT 0
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
// if not unit or not hexes then
34348: LD_VAR 0 1
34352: NOT
34353: PUSH
34354: LD_VAR 0 2
34358: NOT
34359: OR
34360: IFFALSE 34364
// exit ;
34362: GO 34487
// dist := 9999 ;
34364: LD_ADDR_VAR 0 5
34368: PUSH
34369: LD_INT 9999
34371: ST_TO_ADDR
// for i = 1 to hexes do
34372: LD_ADDR_VAR 0 4
34376: PUSH
34377: DOUBLE
34378: LD_INT 1
34380: DEC
34381: ST_TO_ADDR
34382: LD_VAR 0 2
34386: PUSH
34387: FOR_TO
34388: IFFALSE 34475
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34390: LD_ADDR_VAR 0 6
34394: PUSH
34395: LD_VAR 0 1
34399: PPUSH
34400: LD_VAR 0 2
34404: PUSH
34405: LD_VAR 0 4
34409: ARRAY
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: PPUSH
34415: LD_VAR 0 2
34419: PUSH
34420: LD_VAR 0 4
34424: ARRAY
34425: PUSH
34426: LD_INT 2
34428: ARRAY
34429: PPUSH
34430: CALL_OW 297
34434: ST_TO_ADDR
// if tdist < dist then
34435: LD_VAR 0 6
34439: PUSH
34440: LD_VAR 0 5
34444: LESS
34445: IFFALSE 34473
// begin hex := hexes [ i ] ;
34447: LD_ADDR_VAR 0 8
34451: PUSH
34452: LD_VAR 0 2
34456: PUSH
34457: LD_VAR 0 4
34461: ARRAY
34462: ST_TO_ADDR
// dist := tdist ;
34463: LD_ADDR_VAR 0 5
34467: PUSH
34468: LD_VAR 0 6
34472: ST_TO_ADDR
// end ; end ;
34473: GO 34387
34475: POP
34476: POP
// result := hex ;
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_VAR 0 8
34486: ST_TO_ADDR
// end ;
34487: LD_VAR 0 3
34491: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34492: LD_INT 0
34494: PPUSH
34495: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34496: LD_VAR 0 1
34500: NOT
34501: PUSH
34502: LD_VAR 0 1
34506: PUSH
34507: LD_INT 21
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 23
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PPUSH
34531: CALL_OW 69
34535: IN
34536: NOT
34537: OR
34538: IFFALSE 34542
// exit ;
34540: GO 34589
// for i = 1 to 3 do
34542: LD_ADDR_VAR 0 3
34546: PUSH
34547: DOUBLE
34548: LD_INT 1
34550: DEC
34551: ST_TO_ADDR
34552: LD_INT 3
34554: PUSH
34555: FOR_TO
34556: IFFALSE 34587
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34558: LD_VAR 0 1
34562: PPUSH
34563: CALL_OW 250
34567: PPUSH
34568: LD_VAR 0 1
34572: PPUSH
34573: CALL_OW 251
34577: PPUSH
34578: LD_INT 1
34580: PPUSH
34581: CALL_OW 453
34585: GO 34555
34587: POP
34588: POP
// end ;
34589: LD_VAR 0 2
34593: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34594: LD_INT 0
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34602: LD_VAR 0 1
34606: NOT
34607: PUSH
34608: LD_VAR 0 2
34612: NOT
34613: OR
34614: PUSH
34615: LD_VAR 0 1
34619: PPUSH
34620: CALL_OW 314
34624: OR
34625: IFFALSE 34629
// exit ;
34627: GO 35096
// if GetLives ( i ) < 250 then
34629: LD_VAR 0 4
34633: PPUSH
34634: CALL_OW 256
34638: PUSH
34639: LD_INT 250
34641: LESS
34642: IFFALSE 34655
// begin ComAutodestruct ( i ) ;
34644: LD_VAR 0 4
34648: PPUSH
34649: CALL 34492 0 1
// exit ;
34653: GO 35096
// end ; x := GetX ( enemy_unit ) ;
34655: LD_ADDR_VAR 0 7
34659: PUSH
34660: LD_VAR 0 2
34664: PPUSH
34665: CALL_OW 250
34669: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34670: LD_ADDR_VAR 0 8
34674: PUSH
34675: LD_VAR 0 2
34679: PPUSH
34680: CALL_OW 251
34684: ST_TO_ADDR
// if not x or not y then
34685: LD_VAR 0 7
34689: NOT
34690: PUSH
34691: LD_VAR 0 8
34695: NOT
34696: OR
34697: IFFALSE 34701
// exit ;
34699: GO 35096
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34701: LD_ADDR_VAR 0 6
34705: PUSH
34706: LD_VAR 0 7
34710: PPUSH
34711: LD_INT 0
34713: PPUSH
34714: LD_INT 4
34716: PPUSH
34717: CALL_OW 272
34721: PUSH
34722: LD_VAR 0 8
34726: PPUSH
34727: LD_INT 0
34729: PPUSH
34730: LD_INT 4
34732: PPUSH
34733: CALL_OW 273
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_VAR 0 7
34746: PPUSH
34747: LD_INT 1
34749: PPUSH
34750: LD_INT 4
34752: PPUSH
34753: CALL_OW 272
34757: PUSH
34758: LD_VAR 0 8
34762: PPUSH
34763: LD_INT 1
34765: PPUSH
34766: LD_INT 4
34768: PPUSH
34769: CALL_OW 273
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_VAR 0 7
34782: PPUSH
34783: LD_INT 2
34785: PPUSH
34786: LD_INT 4
34788: PPUSH
34789: CALL_OW 272
34793: PUSH
34794: LD_VAR 0 8
34798: PPUSH
34799: LD_INT 2
34801: PPUSH
34802: LD_INT 4
34804: PPUSH
34805: CALL_OW 273
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_VAR 0 7
34818: PPUSH
34819: LD_INT 3
34821: PPUSH
34822: LD_INT 4
34824: PPUSH
34825: CALL_OW 272
34829: PUSH
34830: LD_VAR 0 8
34834: PPUSH
34835: LD_INT 3
34837: PPUSH
34838: LD_INT 4
34840: PPUSH
34841: CALL_OW 273
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_VAR 0 7
34854: PPUSH
34855: LD_INT 4
34857: PPUSH
34858: LD_INT 4
34860: PPUSH
34861: CALL_OW 272
34865: PUSH
34866: LD_VAR 0 8
34870: PPUSH
34871: LD_INT 4
34873: PPUSH
34874: LD_INT 4
34876: PPUSH
34877: CALL_OW 273
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_VAR 0 7
34890: PPUSH
34891: LD_INT 5
34893: PPUSH
34894: LD_INT 4
34896: PPUSH
34897: CALL_OW 272
34901: PUSH
34902: LD_VAR 0 8
34906: PPUSH
34907: LD_INT 5
34909: PPUSH
34910: LD_INT 4
34912: PPUSH
34913: CALL_OW 273
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// for i = tmp downto 1 do
34930: LD_ADDR_VAR 0 4
34934: PUSH
34935: DOUBLE
34936: LD_VAR 0 6
34940: INC
34941: ST_TO_ADDR
34942: LD_INT 1
34944: PUSH
34945: FOR_DOWNTO
34946: IFFALSE 35047
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34948: LD_VAR 0 6
34952: PUSH
34953: LD_VAR 0 4
34957: ARRAY
34958: PUSH
34959: LD_INT 1
34961: ARRAY
34962: PPUSH
34963: LD_VAR 0 6
34967: PUSH
34968: LD_VAR 0 4
34972: ARRAY
34973: PUSH
34974: LD_INT 2
34976: ARRAY
34977: PPUSH
34978: CALL_OW 488
34982: NOT
34983: PUSH
34984: LD_VAR 0 6
34988: PUSH
34989: LD_VAR 0 4
34993: ARRAY
34994: PUSH
34995: LD_INT 1
34997: ARRAY
34998: PPUSH
34999: LD_VAR 0 6
35003: PUSH
35004: LD_VAR 0 4
35008: ARRAY
35009: PUSH
35010: LD_INT 2
35012: ARRAY
35013: PPUSH
35014: CALL_OW 428
35018: PUSH
35019: LD_INT 0
35021: NONEQUAL
35022: OR
35023: IFFALSE 35045
// tmp := Delete ( tmp , i ) ;
35025: LD_ADDR_VAR 0 6
35029: PUSH
35030: LD_VAR 0 6
35034: PPUSH
35035: LD_VAR 0 4
35039: PPUSH
35040: CALL_OW 3
35044: ST_TO_ADDR
35045: GO 34945
35047: POP
35048: POP
// j := GetClosestHex ( unit , tmp ) ;
35049: LD_ADDR_VAR 0 5
35053: PUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: LD_VAR 0 6
35063: PPUSH
35064: CALL 34340 0 2
35068: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35069: LD_VAR 0 1
35073: PPUSH
35074: LD_VAR 0 5
35078: PUSH
35079: LD_INT 1
35081: ARRAY
35082: PPUSH
35083: LD_VAR 0 5
35087: PUSH
35088: LD_INT 2
35090: ARRAY
35091: PPUSH
35092: CALL_OW 111
// end ;
35096: LD_VAR 0 3
35100: RET
// export function PrepareApemanSoldier ( ) ; begin
35101: LD_INT 0
35103: PPUSH
// uc_nation := 0 ;
35104: LD_ADDR_OWVAR 21
35108: PUSH
35109: LD_INT 0
35111: ST_TO_ADDR
// hc_sex := sex_male ;
35112: LD_ADDR_OWVAR 27
35116: PUSH
35117: LD_INT 1
35119: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35120: LD_ADDR_OWVAR 28
35124: PUSH
35125: LD_INT 15
35127: ST_TO_ADDR
// hc_gallery :=  ;
35128: LD_ADDR_OWVAR 33
35132: PUSH
35133: LD_STRING 
35135: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35136: LD_ADDR_OWVAR 31
35140: PUSH
35141: LD_INT 0
35143: PPUSH
35144: LD_INT 3
35146: PPUSH
35147: CALL_OW 12
35151: PUSH
35152: LD_INT 0
35154: PPUSH
35155: LD_INT 3
35157: PPUSH
35158: CALL_OW 12
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: ST_TO_ADDR
// end ;
35175: LD_VAR 0 1
35179: RET
// export function PrepareApemanEngineer ( ) ; begin
35180: LD_INT 0
35182: PPUSH
// uc_nation := 0 ;
35183: LD_ADDR_OWVAR 21
35187: PUSH
35188: LD_INT 0
35190: ST_TO_ADDR
// hc_sex := sex_male ;
35191: LD_ADDR_OWVAR 27
35195: PUSH
35196: LD_INT 1
35198: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35199: LD_ADDR_OWVAR 28
35203: PUSH
35204: LD_INT 16
35206: ST_TO_ADDR
// hc_gallery :=  ;
35207: LD_ADDR_OWVAR 33
35211: PUSH
35212: LD_STRING 
35214: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35215: LD_ADDR_OWVAR 31
35219: PUSH
35220: LD_INT 0
35222: PPUSH
35223: LD_INT 3
35225: PPUSH
35226: CALL_OW 12
35230: PUSH
35231: LD_INT 0
35233: PPUSH
35234: LD_INT 3
35236: PPUSH
35237: CALL_OW 12
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// end ;
35254: LD_VAR 0 1
35258: RET
// export function PrepareApeman ( agressivity ) ; begin
35259: LD_INT 0
35261: PPUSH
// uc_side := 0 ;
35262: LD_ADDR_OWVAR 20
35266: PUSH
35267: LD_INT 0
35269: ST_TO_ADDR
// uc_nation := 0 ;
35270: LD_ADDR_OWVAR 21
35274: PUSH
35275: LD_INT 0
35277: ST_TO_ADDR
// hc_sex := sex_male ;
35278: LD_ADDR_OWVAR 27
35282: PUSH
35283: LD_INT 1
35285: ST_TO_ADDR
// hc_class := class_apeman ;
35286: LD_ADDR_OWVAR 28
35290: PUSH
35291: LD_INT 12
35293: ST_TO_ADDR
// hc_gallery :=  ;
35294: LD_ADDR_OWVAR 33
35298: PUSH
35299: LD_STRING 
35301: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35302: LD_ADDR_OWVAR 35
35306: PUSH
35307: LD_VAR 0 1
35311: NEG
35312: PPUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: CALL_OW 12
35322: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35323: LD_ADDR_OWVAR 31
35327: PUSH
35328: LD_INT 0
35330: PPUSH
35331: LD_INT 3
35333: PPUSH
35334: CALL_OW 12
35338: PUSH
35339: LD_INT 0
35341: PPUSH
35342: LD_INT 3
35344: PPUSH
35345: CALL_OW 12
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: ST_TO_ADDR
// end ;
35362: LD_VAR 0 2
35366: RET
// export function PrepareTiger ( agressivity ) ; begin
35367: LD_INT 0
35369: PPUSH
// uc_side := 0 ;
35370: LD_ADDR_OWVAR 20
35374: PUSH
35375: LD_INT 0
35377: ST_TO_ADDR
// uc_nation := 0 ;
35378: LD_ADDR_OWVAR 21
35382: PUSH
35383: LD_INT 0
35385: ST_TO_ADDR
// hc_class := class_tiger ;
35386: LD_ADDR_OWVAR 28
35390: PUSH
35391: LD_INT 14
35393: ST_TO_ADDR
// hc_gallery :=  ;
35394: LD_ADDR_OWVAR 33
35398: PUSH
35399: LD_STRING 
35401: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35402: LD_ADDR_OWVAR 35
35406: PUSH
35407: LD_VAR 0 1
35411: NEG
35412: PPUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 12
35422: ST_TO_ADDR
// end ;
35423: LD_VAR 0 2
35427: RET
// export function PrepareEnchidna ( ) ; begin
35428: LD_INT 0
35430: PPUSH
// uc_side := 0 ;
35431: LD_ADDR_OWVAR 20
35435: PUSH
35436: LD_INT 0
35438: ST_TO_ADDR
// uc_nation := 0 ;
35439: LD_ADDR_OWVAR 21
35443: PUSH
35444: LD_INT 0
35446: ST_TO_ADDR
// hc_class := class_baggie ;
35447: LD_ADDR_OWVAR 28
35451: PUSH
35452: LD_INT 13
35454: ST_TO_ADDR
// hc_gallery :=  ;
35455: LD_ADDR_OWVAR 33
35459: PUSH
35460: LD_STRING 
35462: ST_TO_ADDR
// end ;
35463: LD_VAR 0 1
35467: RET
// export function PrepareFrog ( ) ; begin
35468: LD_INT 0
35470: PPUSH
// uc_side := 0 ;
35471: LD_ADDR_OWVAR 20
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// uc_nation := 0 ;
35479: LD_ADDR_OWVAR 21
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// hc_class := class_frog ;
35487: LD_ADDR_OWVAR 28
35491: PUSH
35492: LD_INT 19
35494: ST_TO_ADDR
// hc_gallery :=  ;
35495: LD_ADDR_OWVAR 33
35499: PUSH
35500: LD_STRING 
35502: ST_TO_ADDR
// end ;
35503: LD_VAR 0 1
35507: RET
// export function PrepareFish ( ) ; begin
35508: LD_INT 0
35510: PPUSH
// uc_side := 0 ;
35511: LD_ADDR_OWVAR 20
35515: PUSH
35516: LD_INT 0
35518: ST_TO_ADDR
// uc_nation := 0 ;
35519: LD_ADDR_OWVAR 21
35523: PUSH
35524: LD_INT 0
35526: ST_TO_ADDR
// hc_class := class_fish ;
35527: LD_ADDR_OWVAR 28
35531: PUSH
35532: LD_INT 20
35534: ST_TO_ADDR
// hc_gallery :=  ;
35535: LD_ADDR_OWVAR 33
35539: PUSH
35540: LD_STRING 
35542: ST_TO_ADDR
// end ;
35543: LD_VAR 0 1
35547: RET
// export function PrepareBird ( ) ; begin
35548: LD_INT 0
35550: PPUSH
// uc_side := 0 ;
35551: LD_ADDR_OWVAR 20
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// uc_nation := 0 ;
35559: LD_ADDR_OWVAR 21
35563: PUSH
35564: LD_INT 0
35566: ST_TO_ADDR
// hc_class := class_phororhacos ;
35567: LD_ADDR_OWVAR 28
35571: PUSH
35572: LD_INT 18
35574: ST_TO_ADDR
// hc_gallery :=  ;
35575: LD_ADDR_OWVAR 33
35579: PUSH
35580: LD_STRING 
35582: ST_TO_ADDR
// end ;
35583: LD_VAR 0 1
35587: RET
// export function PrepareHorse ( ) ; begin
35588: LD_INT 0
35590: PPUSH
// uc_side := 0 ;
35591: LD_ADDR_OWVAR 20
35595: PUSH
35596: LD_INT 0
35598: ST_TO_ADDR
// uc_nation := 0 ;
35599: LD_ADDR_OWVAR 21
35603: PUSH
35604: LD_INT 0
35606: ST_TO_ADDR
// hc_class := class_horse ;
35607: LD_ADDR_OWVAR 28
35611: PUSH
35612: LD_INT 21
35614: ST_TO_ADDR
// hc_gallery :=  ;
35615: LD_ADDR_OWVAR 33
35619: PUSH
35620: LD_STRING 
35622: ST_TO_ADDR
// end ;
35623: LD_VAR 0 1
35627: RET
// export function PrepareMastodont ( ) ; begin
35628: LD_INT 0
35630: PPUSH
// uc_side := 0 ;
35631: LD_ADDR_OWVAR 20
35635: PUSH
35636: LD_INT 0
35638: ST_TO_ADDR
// uc_nation := 0 ;
35639: LD_ADDR_OWVAR 21
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35647: LD_ADDR_OWVAR 37
35651: PUSH
35652: LD_INT 31
35654: ST_TO_ADDR
// vc_control := control_rider ;
35655: LD_ADDR_OWVAR 38
35659: PUSH
35660: LD_INT 4
35662: ST_TO_ADDR
// end ;
35663: LD_VAR 0 1
35667: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35668: LD_INT 0
35670: PPUSH
35671: PPUSH
35672: PPUSH
// uc_side = 0 ;
35673: LD_ADDR_OWVAR 20
35677: PUSH
35678: LD_INT 0
35680: ST_TO_ADDR
// uc_nation = 0 ;
35681: LD_ADDR_OWVAR 21
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
// InitHc_All ( ) ;
35689: CALL_OW 584
// InitVc ;
35693: CALL_OW 20
// if mastodonts then
35697: LD_VAR 0 6
35701: IFFALSE 35768
// for i = 1 to mastodonts do
35703: LD_ADDR_VAR 0 11
35707: PUSH
35708: DOUBLE
35709: LD_INT 1
35711: DEC
35712: ST_TO_ADDR
35713: LD_VAR 0 6
35717: PUSH
35718: FOR_TO
35719: IFFALSE 35766
// begin vc_chassis := 31 ;
35721: LD_ADDR_OWVAR 37
35725: PUSH
35726: LD_INT 31
35728: ST_TO_ADDR
// vc_control := control_rider ;
35729: LD_ADDR_OWVAR 38
35733: PUSH
35734: LD_INT 4
35736: ST_TO_ADDR
// animal := CreateVehicle ;
35737: LD_ADDR_VAR 0 12
35741: PUSH
35742: CALL_OW 45
35746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35747: LD_VAR 0 12
35751: PPUSH
35752: LD_VAR 0 8
35756: PPUSH
35757: LD_INT 0
35759: PPUSH
35760: CALL 37896 0 3
// end ;
35764: GO 35718
35766: POP
35767: POP
// if horses then
35768: LD_VAR 0 5
35772: IFFALSE 35839
// for i = 1 to horses do
35774: LD_ADDR_VAR 0 11
35778: PUSH
35779: DOUBLE
35780: LD_INT 1
35782: DEC
35783: ST_TO_ADDR
35784: LD_VAR 0 5
35788: PUSH
35789: FOR_TO
35790: IFFALSE 35837
// begin hc_class := 21 ;
35792: LD_ADDR_OWVAR 28
35796: PUSH
35797: LD_INT 21
35799: ST_TO_ADDR
// hc_gallery :=  ;
35800: LD_ADDR_OWVAR 33
35804: PUSH
35805: LD_STRING 
35807: ST_TO_ADDR
// animal := CreateHuman ;
35808: LD_ADDR_VAR 0 12
35812: PUSH
35813: CALL_OW 44
35817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35818: LD_VAR 0 12
35822: PPUSH
35823: LD_VAR 0 8
35827: PPUSH
35828: LD_INT 0
35830: PPUSH
35831: CALL 37896 0 3
// end ;
35835: GO 35789
35837: POP
35838: POP
// if birds then
35839: LD_VAR 0 1
35843: IFFALSE 35910
// for i = 1 to birds do
35845: LD_ADDR_VAR 0 11
35849: PUSH
35850: DOUBLE
35851: LD_INT 1
35853: DEC
35854: ST_TO_ADDR
35855: LD_VAR 0 1
35859: PUSH
35860: FOR_TO
35861: IFFALSE 35908
// begin hc_class := 18 ;
35863: LD_ADDR_OWVAR 28
35867: PUSH
35868: LD_INT 18
35870: ST_TO_ADDR
// hc_gallery =  ;
35871: LD_ADDR_OWVAR 33
35875: PUSH
35876: LD_STRING 
35878: ST_TO_ADDR
// animal := CreateHuman ;
35879: LD_ADDR_VAR 0 12
35883: PUSH
35884: CALL_OW 44
35888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35889: LD_VAR 0 12
35893: PPUSH
35894: LD_VAR 0 8
35898: PPUSH
35899: LD_INT 0
35901: PPUSH
35902: CALL 37896 0 3
// end ;
35906: GO 35860
35908: POP
35909: POP
// if tigers then
35910: LD_VAR 0 2
35914: IFFALSE 35998
// for i = 1 to tigers do
35916: LD_ADDR_VAR 0 11
35920: PUSH
35921: DOUBLE
35922: LD_INT 1
35924: DEC
35925: ST_TO_ADDR
35926: LD_VAR 0 2
35930: PUSH
35931: FOR_TO
35932: IFFALSE 35996
// begin hc_class = class_tiger ;
35934: LD_ADDR_OWVAR 28
35938: PUSH
35939: LD_INT 14
35941: ST_TO_ADDR
// hc_gallery =  ;
35942: LD_ADDR_OWVAR 33
35946: PUSH
35947: LD_STRING 
35949: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35950: LD_ADDR_OWVAR 35
35954: PUSH
35955: LD_INT 7
35957: NEG
35958: PPUSH
35959: LD_INT 7
35961: PPUSH
35962: CALL_OW 12
35966: ST_TO_ADDR
// animal := CreateHuman ;
35967: LD_ADDR_VAR 0 12
35971: PUSH
35972: CALL_OW 44
35976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35977: LD_VAR 0 12
35981: PPUSH
35982: LD_VAR 0 8
35986: PPUSH
35987: LD_INT 0
35989: PPUSH
35990: CALL 37896 0 3
// end ;
35994: GO 35931
35996: POP
35997: POP
// if apemans then
35998: LD_VAR 0 3
36002: IFFALSE 36125
// for i = 1 to apemans do
36004: LD_ADDR_VAR 0 11
36008: PUSH
36009: DOUBLE
36010: LD_INT 1
36012: DEC
36013: ST_TO_ADDR
36014: LD_VAR 0 3
36018: PUSH
36019: FOR_TO
36020: IFFALSE 36123
// begin hc_class = class_apeman ;
36022: LD_ADDR_OWVAR 28
36026: PUSH
36027: LD_INT 12
36029: ST_TO_ADDR
// hc_gallery =  ;
36030: LD_ADDR_OWVAR 33
36034: PUSH
36035: LD_STRING 
36037: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36038: LD_ADDR_OWVAR 35
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PPUSH
36047: LD_INT 2
36049: PPUSH
36050: CALL_OW 12
36054: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36055: LD_ADDR_OWVAR 31
36059: PUSH
36060: LD_INT 1
36062: PPUSH
36063: LD_INT 3
36065: PPUSH
36066: CALL_OW 12
36070: PUSH
36071: LD_INT 1
36073: PPUSH
36074: LD_INT 3
36076: PPUSH
36077: CALL_OW 12
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// animal := CreateHuman ;
36094: LD_ADDR_VAR 0 12
36098: PUSH
36099: CALL_OW 44
36103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36104: LD_VAR 0 12
36108: PPUSH
36109: LD_VAR 0 8
36113: PPUSH
36114: LD_INT 0
36116: PPUSH
36117: CALL 37896 0 3
// end ;
36121: GO 36019
36123: POP
36124: POP
// if enchidnas then
36125: LD_VAR 0 4
36129: IFFALSE 36196
// for i = 1 to enchidnas do
36131: LD_ADDR_VAR 0 11
36135: PUSH
36136: DOUBLE
36137: LD_INT 1
36139: DEC
36140: ST_TO_ADDR
36141: LD_VAR 0 4
36145: PUSH
36146: FOR_TO
36147: IFFALSE 36194
// begin hc_class = 13 ;
36149: LD_ADDR_OWVAR 28
36153: PUSH
36154: LD_INT 13
36156: ST_TO_ADDR
// hc_gallery =  ;
36157: LD_ADDR_OWVAR 33
36161: PUSH
36162: LD_STRING 
36164: ST_TO_ADDR
// animal := CreateHuman ;
36165: LD_ADDR_VAR 0 12
36169: PUSH
36170: CALL_OW 44
36174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36175: LD_VAR 0 12
36179: PPUSH
36180: LD_VAR 0 8
36184: PPUSH
36185: LD_INT 0
36187: PPUSH
36188: CALL 37896 0 3
// end ;
36192: GO 36146
36194: POP
36195: POP
// if fishes then
36196: LD_VAR 0 7
36200: IFFALSE 36267
// for i = 1 to fishes do
36202: LD_ADDR_VAR 0 11
36206: PUSH
36207: DOUBLE
36208: LD_INT 1
36210: DEC
36211: ST_TO_ADDR
36212: LD_VAR 0 7
36216: PUSH
36217: FOR_TO
36218: IFFALSE 36265
// begin hc_class = 20 ;
36220: LD_ADDR_OWVAR 28
36224: PUSH
36225: LD_INT 20
36227: ST_TO_ADDR
// hc_gallery =  ;
36228: LD_ADDR_OWVAR 33
36232: PUSH
36233: LD_STRING 
36235: ST_TO_ADDR
// animal := CreateHuman ;
36236: LD_ADDR_VAR 0 12
36240: PUSH
36241: CALL_OW 44
36245: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36246: LD_VAR 0 12
36250: PPUSH
36251: LD_VAR 0 9
36255: PPUSH
36256: LD_INT 0
36258: PPUSH
36259: CALL 37896 0 3
// end ;
36263: GO 36217
36265: POP
36266: POP
// end ;
36267: LD_VAR 0 10
36271: RET
// export function WantHeal ( sci , unit ) ; begin
36272: LD_INT 0
36274: PPUSH
// if GetTaskList ( sci ) > 0 then
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL_OW 437
36284: PUSH
36285: LD_INT 0
36287: GREATER
36288: IFFALSE 36358
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 437
36299: PUSH
36300: LD_INT 1
36302: ARRAY
36303: PUSH
36304: LD_INT 1
36306: ARRAY
36307: PUSH
36308: LD_STRING l
36310: EQUAL
36311: PUSH
36312: LD_VAR 0 1
36316: PPUSH
36317: CALL_OW 437
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: PUSH
36326: LD_INT 4
36328: ARRAY
36329: PUSH
36330: LD_VAR 0 2
36334: EQUAL
36335: AND
36336: IFFALSE 36348
// result := true else
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_INT 1
36345: ST_TO_ADDR
36346: GO 36356
// result := false ;
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_INT 0
36355: ST_TO_ADDR
// end else
36356: GO 36366
// result := false ;
36358: LD_ADDR_VAR 0 3
36362: PUSH
36363: LD_INT 0
36365: ST_TO_ADDR
// end ;
36366: LD_VAR 0 3
36370: RET
// export function HealTarget ( sci ) ; begin
36371: LD_INT 0
36373: PPUSH
// if not sci then
36374: LD_VAR 0 1
36378: NOT
36379: IFFALSE 36383
// exit ;
36381: GO 36448
// result := 0 ;
36383: LD_ADDR_VAR 0 2
36387: PUSH
36388: LD_INT 0
36390: ST_TO_ADDR
// if GetTaskList ( sci ) then
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL_OW 437
36400: IFFALSE 36448
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36402: LD_VAR 0 1
36406: PPUSH
36407: CALL_OW 437
36411: PUSH
36412: LD_INT 1
36414: ARRAY
36415: PUSH
36416: LD_INT 1
36418: ARRAY
36419: PUSH
36420: LD_STRING l
36422: EQUAL
36423: IFFALSE 36448
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36425: LD_ADDR_VAR 0 2
36429: PUSH
36430: LD_VAR 0 1
36434: PPUSH
36435: CALL_OW 437
36439: PUSH
36440: LD_INT 1
36442: ARRAY
36443: PUSH
36444: LD_INT 4
36446: ARRAY
36447: ST_TO_ADDR
// end ;
36448: LD_VAR 0 2
36452: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36453: LD_INT 0
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
// if not base_units then
36459: LD_VAR 0 1
36463: NOT
36464: IFFALSE 36468
// exit ;
36466: GO 36555
// result := false ;
36468: LD_ADDR_VAR 0 2
36472: PUSH
36473: LD_INT 0
36475: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36476: LD_ADDR_VAR 0 5
36480: PUSH
36481: LD_VAR 0 1
36485: PPUSH
36486: LD_INT 21
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PPUSH
36496: CALL_OW 72
36500: ST_TO_ADDR
// if not tmp then
36501: LD_VAR 0 5
36505: NOT
36506: IFFALSE 36510
// exit ;
36508: GO 36555
// for i in tmp do
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_VAR 0 5
36519: PUSH
36520: FOR_IN
36521: IFFALSE 36553
// begin result := EnemyInRange ( i , 22 ) ;
36523: LD_ADDR_VAR 0 2
36527: PUSH
36528: LD_VAR 0 3
36532: PPUSH
36533: LD_INT 22
36535: PPUSH
36536: CALL 34142 0 2
36540: ST_TO_ADDR
// if result then
36541: LD_VAR 0 2
36545: IFFALSE 36551
// exit ;
36547: POP
36548: POP
36549: GO 36555
// end ;
36551: GO 36520
36553: POP
36554: POP
// end ;
36555: LD_VAR 0 2
36559: RET
// export function FilterByTag ( units , tag ) ; begin
36560: LD_INT 0
36562: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36563: LD_ADDR_VAR 0 3
36567: PUSH
36568: LD_VAR 0 1
36572: PPUSH
36573: LD_INT 120
36575: PUSH
36576: LD_VAR 0 2
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PPUSH
36585: CALL_OW 72
36589: ST_TO_ADDR
// end ;
36590: LD_VAR 0 3
36594: RET
// export function IsDriver ( un ) ; begin
36595: LD_INT 0
36597: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36598: LD_ADDR_VAR 0 2
36602: PUSH
36603: LD_VAR 0 1
36607: PUSH
36608: LD_INT 55
36610: PUSH
36611: EMPTY
36612: LIST
36613: PPUSH
36614: CALL_OW 69
36618: IN
36619: ST_TO_ADDR
// end ;
36620: LD_VAR 0 2
36624: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36625: LD_INT 0
36627: PPUSH
36628: PPUSH
// list := [ ] ;
36629: LD_ADDR_VAR 0 5
36633: PUSH
36634: EMPTY
36635: ST_TO_ADDR
// case d of 0 :
36636: LD_VAR 0 3
36640: PUSH
36641: LD_INT 0
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36649
36647: GO 36782
36649: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36650: LD_ADDR_VAR 0 5
36654: PUSH
36655: LD_VAR 0 1
36659: PUSH
36660: LD_INT 4
36662: MINUS
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_INT 4
36671: MINUS
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PUSH
36681: LD_VAR 0 1
36685: PUSH
36686: LD_INT 3
36688: MINUS
36689: PUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: LD_VAR 0 1
36707: PUSH
36708: LD_INT 4
36710: PLUS
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_INT 4
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: PUSH
36725: LD_VAR 0 1
36729: PUSH
36730: LD_INT 3
36732: PLUS
36733: PUSH
36734: LD_VAR 0 2
36738: PUSH
36739: LD_INT 3
36741: PLUS
36742: PUSH
36743: LD_INT 5
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: PUSH
36751: LD_VAR 0 1
36755: PUSH
36756: LD_VAR 0 2
36760: PUSH
36761: LD_INT 4
36763: PLUS
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// end ; 1 :
36780: GO 37480
36782: LD_INT 1
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36923
36790: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36791: LD_ADDR_VAR 0 5
36795: PUSH
36796: LD_VAR 0 1
36800: PUSH
36801: LD_VAR 0 2
36805: PUSH
36806: LD_INT 4
36808: MINUS
36809: PUSH
36810: LD_INT 3
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: PUSH
36818: LD_VAR 0 1
36822: PUSH
36823: LD_INT 3
36825: MINUS
36826: PUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_INT 3
36834: MINUS
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: LD_VAR 0 1
36848: PUSH
36849: LD_INT 4
36851: MINUS
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: PUSH
36866: LD_VAR 0 1
36870: PUSH
36871: LD_VAR 0 2
36875: PUSH
36876: LD_INT 3
36878: PLUS
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: PUSH
36888: LD_VAR 0 1
36892: PUSH
36893: LD_INT 4
36895: PLUS
36896: PUSH
36897: LD_VAR 0 2
36901: PUSH
36902: LD_INT 4
36904: PLUS
36905: PUSH
36906: LD_INT 5
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: ST_TO_ADDR
// end ; 2 :
36921: GO 37480
36923: LD_INT 2
36925: DOUBLE
36926: EQUAL
36927: IFTRUE 36931
36929: GO 37060
36931: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36932: LD_ADDR_VAR 0 5
36936: PUSH
36937: LD_VAR 0 1
36941: PUSH
36942: LD_VAR 0 2
36946: PUSH
36947: LD_INT 3
36949: MINUS
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: PUSH
36959: LD_VAR 0 1
36963: PUSH
36964: LD_INT 4
36966: PLUS
36967: PUSH
36968: LD_VAR 0 2
36972: PUSH
36973: LD_INT 4
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: PUSH
36981: LD_VAR 0 1
36985: PUSH
36986: LD_VAR 0 2
36990: PUSH
36991: LD_INT 4
36993: PLUS
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: PUSH
37003: LD_VAR 0 1
37007: PUSH
37008: LD_INT 3
37010: MINUS
37011: PUSH
37012: LD_VAR 0 2
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PUSH
37025: LD_VAR 0 1
37029: PUSH
37030: LD_INT 4
37032: MINUS
37033: PUSH
37034: LD_VAR 0 2
37038: PUSH
37039: LD_INT 4
37041: MINUS
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
// end ; 3 :
37058: GO 37480
37060: LD_INT 3
37062: DOUBLE
37063: EQUAL
37064: IFTRUE 37068
37066: GO 37201
37068: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37069: LD_ADDR_VAR 0 5
37073: PUSH
37074: LD_VAR 0 1
37078: PUSH
37079: LD_INT 3
37081: PLUS
37082: PUSH
37083: LD_VAR 0 2
37087: PUSH
37088: LD_INT 4
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: PUSH
37096: LD_VAR 0 1
37100: PUSH
37101: LD_INT 4
37103: PLUS
37104: PUSH
37105: LD_VAR 0 2
37109: PUSH
37110: LD_INT 4
37112: PLUS
37113: PUSH
37114: LD_INT 5
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: LD_VAR 0 1
37126: PUSH
37127: LD_INT 4
37129: MINUS
37130: PUSH
37131: LD_VAR 0 2
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: PUSH
37144: LD_VAR 0 1
37148: PUSH
37149: LD_VAR 0 2
37153: PUSH
37154: LD_INT 4
37156: MINUS
37157: PUSH
37158: LD_INT 3
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: PUSH
37166: LD_VAR 0 1
37170: PUSH
37171: LD_INT 3
37173: MINUS
37174: PUSH
37175: LD_VAR 0 2
37179: PUSH
37180: LD_INT 3
37182: MINUS
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// end ; 4 :
37199: GO 37480
37201: LD_INT 4
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37342
37209: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37210: LD_ADDR_VAR 0 5
37214: PUSH
37215: LD_VAR 0 1
37219: PUSH
37220: LD_VAR 0 2
37224: PUSH
37225: LD_INT 4
37227: PLUS
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: PUSH
37237: LD_VAR 0 1
37241: PUSH
37242: LD_INT 3
37244: PLUS
37245: PUSH
37246: LD_VAR 0 2
37250: PUSH
37251: LD_INT 3
37253: PLUS
37254: PUSH
37255: LD_INT 5
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: PUSH
37263: LD_VAR 0 1
37267: PUSH
37268: LD_INT 4
37270: PLUS
37271: PUSH
37272: LD_VAR 0 2
37276: PUSH
37277: LD_INT 4
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: PUSH
37285: LD_VAR 0 1
37289: PUSH
37290: LD_VAR 0 2
37294: PUSH
37295: LD_INT 3
37297: MINUS
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: PUSH
37307: LD_VAR 0 1
37311: PUSH
37312: LD_INT 4
37314: MINUS
37315: PUSH
37316: LD_VAR 0 2
37320: PUSH
37321: LD_INT 4
37323: MINUS
37324: PUSH
37325: LD_INT 2
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// end ; 5 :
37340: GO 37480
37342: LD_INT 5
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37479
37350: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37351: LD_ADDR_VAR 0 5
37355: PUSH
37356: LD_VAR 0 1
37360: PUSH
37361: LD_INT 4
37363: MINUS
37364: PUSH
37365: LD_VAR 0 2
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: PUSH
37378: LD_VAR 0 1
37382: PUSH
37383: LD_VAR 0 2
37387: PUSH
37388: LD_INT 4
37390: MINUS
37391: PUSH
37392: LD_INT 3
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: LD_VAR 0 1
37404: PUSH
37405: LD_INT 4
37407: PLUS
37408: PUSH
37409: LD_VAR 0 2
37413: PUSH
37414: LD_INT 4
37416: PLUS
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: PUSH
37426: LD_VAR 0 1
37430: PUSH
37431: LD_INT 3
37433: PLUS
37434: PUSH
37435: LD_VAR 0 2
37439: PUSH
37440: LD_INT 4
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: PUSH
37448: LD_VAR 0 1
37452: PUSH
37453: LD_VAR 0 2
37457: PUSH
37458: LD_INT 3
37460: PLUS
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// end ; end ;
37477: GO 37480
37479: POP
// result := list ;
37480: LD_ADDR_VAR 0 4
37484: PUSH
37485: LD_VAR 0 5
37489: ST_TO_ADDR
// end ;
37490: LD_VAR 0 4
37494: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37495: LD_INT 0
37497: PPUSH
37498: PPUSH
37499: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37500: LD_VAR 0 1
37504: NOT
37505: PUSH
37506: LD_VAR 0 2
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: LD_INT 3
37519: PUSH
37520: LD_INT 4
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: IN
37529: NOT
37530: OR
37531: IFFALSE 37535
// exit ;
37533: GO 37618
// tmp := [ ] ;
37535: LD_ADDR_VAR 0 5
37539: PUSH
37540: EMPTY
37541: ST_TO_ADDR
// for i in units do
37542: LD_ADDR_VAR 0 4
37546: PUSH
37547: LD_VAR 0 1
37551: PUSH
37552: FOR_IN
37553: IFFALSE 37587
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37555: LD_ADDR_VAR 0 5
37559: PUSH
37560: LD_VAR 0 5
37564: PPUSH
37565: LD_VAR 0 4
37569: PPUSH
37570: LD_VAR 0 2
37574: PPUSH
37575: CALL_OW 259
37579: PPUSH
37580: CALL 38978 0 2
37584: ST_TO_ADDR
37585: GO 37552
37587: POP
37588: POP
// if not tmp then
37589: LD_VAR 0 5
37593: NOT
37594: IFFALSE 37598
// exit ;
37596: GO 37618
// result := SortListByListDesc ( units , tmp ) ;
37598: LD_ADDR_VAR 0 3
37602: PUSH
37603: LD_VAR 0 1
37607: PPUSH
37608: LD_VAR 0 5
37612: PPUSH
37613: CALL_OW 77
37617: ST_TO_ADDR
// end ;
37618: LD_VAR 0 3
37622: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37623: LD_INT 0
37625: PPUSH
37626: PPUSH
37627: PPUSH
// result := false ;
37628: LD_ADDR_VAR 0 3
37632: PUSH
37633: LD_INT 0
37635: ST_TO_ADDR
// if not building then
37636: LD_VAR 0 2
37640: NOT
37641: IFFALSE 37645
// exit ;
37643: GO 37783
// x := GetX ( building ) ;
37645: LD_ADDR_VAR 0 4
37649: PUSH
37650: LD_VAR 0 2
37654: PPUSH
37655: CALL_OW 250
37659: ST_TO_ADDR
// y := GetY ( building ) ;
37660: LD_ADDR_VAR 0 5
37664: PUSH
37665: LD_VAR 0 2
37669: PPUSH
37670: CALL_OW 251
37674: ST_TO_ADDR
// if not x or not y then
37675: LD_VAR 0 4
37679: NOT
37680: PUSH
37681: LD_VAR 0 5
37685: NOT
37686: OR
37687: IFFALSE 37691
// exit ;
37689: GO 37783
// if GetTaskList ( unit ) then
37691: LD_VAR 0 1
37695: PPUSH
37696: CALL_OW 437
37700: IFFALSE 37783
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37702: LD_STRING e
37704: PUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: CALL_OW 437
37714: PUSH
37715: LD_INT 1
37717: ARRAY
37718: PUSH
37719: LD_INT 1
37721: ARRAY
37722: EQUAL
37723: PUSH
37724: LD_VAR 0 4
37728: PUSH
37729: LD_VAR 0 1
37733: PPUSH
37734: CALL_OW 437
37738: PUSH
37739: LD_INT 1
37741: ARRAY
37742: PUSH
37743: LD_INT 2
37745: ARRAY
37746: EQUAL
37747: AND
37748: PUSH
37749: LD_VAR 0 5
37753: PUSH
37754: LD_VAR 0 1
37758: PPUSH
37759: CALL_OW 437
37763: PUSH
37764: LD_INT 1
37766: ARRAY
37767: PUSH
37768: LD_INT 3
37770: ARRAY
37771: EQUAL
37772: AND
37773: IFFALSE 37783
// result := true end ;
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_INT 1
37782: ST_TO_ADDR
// end ;
37783: LD_VAR 0 3
37787: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37788: LD_INT 0
37790: PPUSH
// result := false ;
37791: LD_ADDR_VAR 0 4
37795: PUSH
37796: LD_INT 0
37798: ST_TO_ADDR
// if GetTaskList ( unit ) then
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 437
37808: IFFALSE 37891
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37810: LD_STRING M
37812: PUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL_OW 437
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PUSH
37827: LD_INT 1
37829: ARRAY
37830: EQUAL
37831: PUSH
37832: LD_VAR 0 2
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: CALL_OW 437
37846: PUSH
37847: LD_INT 1
37849: ARRAY
37850: PUSH
37851: LD_INT 2
37853: ARRAY
37854: EQUAL
37855: AND
37856: PUSH
37857: LD_VAR 0 3
37861: PUSH
37862: LD_VAR 0 1
37866: PPUSH
37867: CALL_OW 437
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PUSH
37876: LD_INT 3
37878: ARRAY
37879: EQUAL
37880: AND
37881: IFFALSE 37891
// result := true ;
37883: LD_ADDR_VAR 0 4
37887: PUSH
37888: LD_INT 1
37890: ST_TO_ADDR
// end ; end ;
37891: LD_VAR 0 4
37895: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37896: LD_INT 0
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
// if not unit or not area then
37902: LD_VAR 0 1
37906: NOT
37907: PUSH
37908: LD_VAR 0 2
37912: NOT
37913: OR
37914: IFFALSE 37918
// exit ;
37916: GO 38081
// tmp := AreaToList ( area , i ) ;
37918: LD_ADDR_VAR 0 6
37922: PUSH
37923: LD_VAR 0 2
37927: PPUSH
37928: LD_VAR 0 5
37932: PPUSH
37933: CALL_OW 517
37937: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37938: LD_ADDR_VAR 0 5
37942: PUSH
37943: DOUBLE
37944: LD_INT 1
37946: DEC
37947: ST_TO_ADDR
37948: LD_VAR 0 6
37952: PUSH
37953: LD_INT 1
37955: ARRAY
37956: PUSH
37957: FOR_TO
37958: IFFALSE 38079
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37960: LD_ADDR_VAR 0 7
37964: PUSH
37965: LD_VAR 0 6
37969: PUSH
37970: LD_INT 1
37972: ARRAY
37973: PUSH
37974: LD_VAR 0 5
37978: ARRAY
37979: PUSH
37980: LD_VAR 0 6
37984: PUSH
37985: LD_INT 2
37987: ARRAY
37988: PUSH
37989: LD_VAR 0 5
37993: ARRAY
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37999: LD_INT 92
38001: PUSH
38002: LD_VAR 0 7
38006: PUSH
38007: LD_INT 1
38009: ARRAY
38010: PUSH
38011: LD_VAR 0 7
38015: PUSH
38016: LD_INT 2
38018: ARRAY
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: PPUSH
38029: CALL_OW 69
38033: PUSH
38034: LD_INT 0
38036: EQUAL
38037: IFFALSE 38077
// begin PlaceUnitArea ( unit , area , mode ) ;
38039: LD_VAR 0 1
38043: PPUSH
38044: LD_VAR 0 2
38048: PPUSH
38049: LD_VAR 0 3
38053: PPUSH
38054: CALL_OW 49
// result := IsPlaced ( unit ) ;
38058: LD_ADDR_VAR 0 4
38062: PUSH
38063: LD_VAR 0 1
38067: PPUSH
38068: CALL_OW 305
38072: ST_TO_ADDR
// exit ;
38073: POP
38074: POP
38075: GO 38081
// end ; end ;
38077: GO 37957
38079: POP
38080: POP
// end ;
38081: LD_VAR 0 4
38085: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38086: LD_INT 0
38088: PPUSH
38089: PPUSH
38090: PPUSH
// if not side or side > 8 then
38091: LD_VAR 0 1
38095: NOT
38096: PUSH
38097: LD_VAR 0 1
38101: PUSH
38102: LD_INT 8
38104: GREATER
38105: OR
38106: IFFALSE 38110
// exit ;
38108: GO 38297
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38110: LD_ADDR_VAR 0 4
38114: PUSH
38115: LD_INT 22
38117: PUSH
38118: LD_VAR 0 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 21
38129: PUSH
38130: LD_INT 3
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PPUSH
38141: CALL_OW 69
38145: ST_TO_ADDR
// if not tmp then
38146: LD_VAR 0 4
38150: NOT
38151: IFFALSE 38155
// exit ;
38153: GO 38297
// enable_addtolog := true ;
38155: LD_ADDR_OWVAR 81
38159: PUSH
38160: LD_INT 1
38162: ST_TO_ADDR
// AddToLog ( [ ) ;
38163: LD_STRING [
38165: PPUSH
38166: CALL_OW 561
// for i in tmp do
38170: LD_ADDR_VAR 0 3
38174: PUSH
38175: LD_VAR 0 4
38179: PUSH
38180: FOR_IN
38181: IFFALSE 38288
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38183: LD_STRING [
38185: PUSH
38186: LD_VAR 0 3
38190: PPUSH
38191: CALL_OW 266
38195: STR
38196: PUSH
38197: LD_STRING , 
38199: STR
38200: PUSH
38201: LD_VAR 0 3
38205: PPUSH
38206: CALL_OW 250
38210: STR
38211: PUSH
38212: LD_STRING , 
38214: STR
38215: PUSH
38216: LD_VAR 0 3
38220: PPUSH
38221: CALL_OW 251
38225: STR
38226: PUSH
38227: LD_STRING , 
38229: STR
38230: PUSH
38231: LD_VAR 0 3
38235: PPUSH
38236: CALL_OW 254
38240: STR
38241: PUSH
38242: LD_STRING , 
38244: STR
38245: PUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: LD_INT 1
38253: PPUSH
38254: CALL_OW 268
38258: STR
38259: PUSH
38260: LD_STRING , 
38262: STR
38263: PUSH
38264: LD_VAR 0 3
38268: PPUSH
38269: LD_INT 2
38271: PPUSH
38272: CALL_OW 268
38276: STR
38277: PUSH
38278: LD_STRING ],
38280: STR
38281: PPUSH
38282: CALL_OW 561
// end ;
38286: GO 38180
38288: POP
38289: POP
// AddToLog ( ]; ) ;
38290: LD_STRING ];
38292: PPUSH
38293: CALL_OW 561
// end ;
38297: LD_VAR 0 2
38301: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38302: LD_INT 0
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
// if not area or not rate or not max then
38309: LD_VAR 0 1
38313: NOT
38314: PUSH
38315: LD_VAR 0 2
38319: NOT
38320: OR
38321: PUSH
38322: LD_VAR 0 4
38326: NOT
38327: OR
38328: IFFALSE 38332
// exit ;
38330: GO 38521
// while 1 do
38332: LD_INT 1
38334: IFFALSE 38521
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38336: LD_ADDR_VAR 0 9
38340: PUSH
38341: LD_VAR 0 1
38345: PPUSH
38346: LD_INT 1
38348: PPUSH
38349: CALL_OW 287
38353: PUSH
38354: LD_INT 10
38356: MUL
38357: ST_TO_ADDR
// r := rate / 10 ;
38358: LD_ADDR_VAR 0 7
38362: PUSH
38363: LD_VAR 0 2
38367: PUSH
38368: LD_INT 10
38370: DIVREAL
38371: ST_TO_ADDR
// time := 1 1$00 ;
38372: LD_ADDR_VAR 0 8
38376: PUSH
38377: LD_INT 2100
38379: ST_TO_ADDR
// if amount < min then
38380: LD_VAR 0 9
38384: PUSH
38385: LD_VAR 0 3
38389: LESS
38390: IFFALSE 38408
// r := r * 2 else
38392: LD_ADDR_VAR 0 7
38396: PUSH
38397: LD_VAR 0 7
38401: PUSH
38402: LD_INT 2
38404: MUL
38405: ST_TO_ADDR
38406: GO 38434
// if amount > max then
38408: LD_VAR 0 9
38412: PUSH
38413: LD_VAR 0 4
38417: GREATER
38418: IFFALSE 38434
// r := r / 2 ;
38420: LD_ADDR_VAR 0 7
38424: PUSH
38425: LD_VAR 0 7
38429: PUSH
38430: LD_INT 2
38432: DIVREAL
38433: ST_TO_ADDR
// time := time / r ;
38434: LD_ADDR_VAR 0 8
38438: PUSH
38439: LD_VAR 0 8
38443: PUSH
38444: LD_VAR 0 7
38448: DIVREAL
38449: ST_TO_ADDR
// if time < 0 then
38450: LD_VAR 0 8
38454: PUSH
38455: LD_INT 0
38457: LESS
38458: IFFALSE 38475
// time := time * - 1 ;
38460: LD_ADDR_VAR 0 8
38464: PUSH
38465: LD_VAR 0 8
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: MUL
38474: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38475: LD_VAR 0 8
38479: PUSH
38480: LD_INT 35
38482: PPUSH
38483: LD_INT 875
38485: PPUSH
38486: CALL_OW 12
38490: PLUS
38491: PPUSH
38492: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38496: LD_INT 1
38498: PPUSH
38499: LD_INT 5
38501: PPUSH
38502: CALL_OW 12
38506: PPUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: LD_INT 1
38514: PPUSH
38515: CALL_OW 55
// end ;
38519: GO 38332
// end ;
38521: LD_VAR 0 5
38525: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38526: LD_INT 0
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
// if not turrets or not factories then
38536: LD_VAR 0 1
38540: NOT
38541: PUSH
38542: LD_VAR 0 2
38546: NOT
38547: OR
38548: IFFALSE 38552
// exit ;
38550: GO 38859
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38552: LD_ADDR_VAR 0 10
38556: PUSH
38557: LD_INT 5
38559: PUSH
38560: LD_INT 6
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: LD_INT 4
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: LD_INT 5
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 24
38594: PUSH
38595: LD_INT 25
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 23
38604: PUSH
38605: LD_INT 27
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 42
38618: PUSH
38619: LD_INT 43
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 44
38628: PUSH
38629: LD_INT 46
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 45
38638: PUSH
38639: LD_INT 47
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: LIST
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: ST_TO_ADDR
// result := [ ] ;
38656: LD_ADDR_VAR 0 3
38660: PUSH
38661: EMPTY
38662: ST_TO_ADDR
// for i in turrets do
38663: LD_ADDR_VAR 0 4
38667: PUSH
38668: LD_VAR 0 1
38672: PUSH
38673: FOR_IN
38674: IFFALSE 38857
// begin nat := GetNation ( i ) ;
38676: LD_ADDR_VAR 0 7
38680: PUSH
38681: LD_VAR 0 4
38685: PPUSH
38686: CALL_OW 248
38690: ST_TO_ADDR
// weapon := 0 ;
38691: LD_ADDR_VAR 0 8
38695: PUSH
38696: LD_INT 0
38698: ST_TO_ADDR
// if not nat then
38699: LD_VAR 0 7
38703: NOT
38704: IFFALSE 38708
// continue ;
38706: GO 38673
// for j in list [ nat ] do
38708: LD_ADDR_VAR 0 5
38712: PUSH
38713: LD_VAR 0 10
38717: PUSH
38718: LD_VAR 0 7
38722: ARRAY
38723: PUSH
38724: FOR_IN
38725: IFFALSE 38766
// if GetBWeapon ( i ) = j [ 1 ] then
38727: LD_VAR 0 4
38731: PPUSH
38732: CALL_OW 269
38736: PUSH
38737: LD_VAR 0 5
38741: PUSH
38742: LD_INT 1
38744: ARRAY
38745: EQUAL
38746: IFFALSE 38764
// begin weapon := j [ 2 ] ;
38748: LD_ADDR_VAR 0 8
38752: PUSH
38753: LD_VAR 0 5
38757: PUSH
38758: LD_INT 2
38760: ARRAY
38761: ST_TO_ADDR
// break ;
38762: GO 38766
// end ;
38764: GO 38724
38766: POP
38767: POP
// if not weapon then
38768: LD_VAR 0 8
38772: NOT
38773: IFFALSE 38777
// continue ;
38775: GO 38673
// for k in factories do
38777: LD_ADDR_VAR 0 6
38781: PUSH
38782: LD_VAR 0 2
38786: PUSH
38787: FOR_IN
38788: IFFALSE 38853
// begin weapons := AvailableWeaponList ( k ) ;
38790: LD_ADDR_VAR 0 9
38794: PUSH
38795: LD_VAR 0 6
38799: PPUSH
38800: CALL_OW 478
38804: ST_TO_ADDR
// if not weapons then
38805: LD_VAR 0 9
38809: NOT
38810: IFFALSE 38814
// continue ;
38812: GO 38787
// if weapon in weapons then
38814: LD_VAR 0 8
38818: PUSH
38819: LD_VAR 0 9
38823: IN
38824: IFFALSE 38851
// begin result := [ i , weapon ] ;
38826: LD_ADDR_VAR 0 3
38830: PUSH
38831: LD_VAR 0 4
38835: PUSH
38836: LD_VAR 0 8
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: ST_TO_ADDR
// exit ;
38845: POP
38846: POP
38847: POP
38848: POP
38849: GO 38859
// end ; end ;
38851: GO 38787
38853: POP
38854: POP
// end ;
38855: GO 38673
38857: POP
38858: POP
// end ;
38859: LD_VAR 0 3
38863: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38864: LD_INT 0
38866: PPUSH
// if not side or side > 8 then
38867: LD_VAR 0 3
38871: NOT
38872: PUSH
38873: LD_VAR 0 3
38877: PUSH
38878: LD_INT 8
38880: GREATER
38881: OR
38882: IFFALSE 38886
// exit ;
38884: GO 38945
// if not range then
38886: LD_VAR 0 4
38890: NOT
38891: IFFALSE 38902
// range := - 12 ;
38893: LD_ADDR_VAR 0 4
38897: PUSH
38898: LD_INT 12
38900: NEG
38901: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38902: LD_VAR 0 1
38906: PPUSH
38907: LD_VAR 0 2
38911: PPUSH
38912: LD_VAR 0 3
38916: PPUSH
38917: LD_VAR 0 4
38921: PPUSH
38922: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38926: LD_VAR 0 1
38930: PPUSH
38931: LD_VAR 0 2
38935: PPUSH
38936: LD_VAR 0 3
38940: PPUSH
38941: CALL_OW 331
// end ;
38945: LD_VAR 0 5
38949: RET
// export function Video ( mode ) ; begin
38950: LD_INT 0
38952: PPUSH
// ingame_video = mode ;
38953: LD_ADDR_OWVAR 52
38957: PUSH
38958: LD_VAR 0 1
38962: ST_TO_ADDR
// interface_hidden = mode ;
38963: LD_ADDR_OWVAR 54
38967: PUSH
38968: LD_VAR 0 1
38972: ST_TO_ADDR
// end ;
38973: LD_VAR 0 2
38977: RET
// export function Join ( array , element ) ; begin
38978: LD_INT 0
38980: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38981: LD_ADDR_VAR 0 3
38985: PUSH
38986: LD_VAR 0 1
38990: PPUSH
38991: LD_VAR 0 1
38995: PUSH
38996: LD_INT 1
38998: PLUS
38999: PPUSH
39000: LD_VAR 0 2
39004: PPUSH
39005: CALL_OW 1
39009: ST_TO_ADDR
// end ;
39010: LD_VAR 0 3
39014: RET
// export function JoinUnion ( array , element ) ; begin
39015: LD_INT 0
39017: PPUSH
// result := array union element ;
39018: LD_ADDR_VAR 0 3
39022: PUSH
39023: LD_VAR 0 1
39027: PUSH
39028: LD_VAR 0 2
39032: UNION
39033: ST_TO_ADDR
// end ;
39034: LD_VAR 0 3
39038: RET
// export function GetBehemoths ( side ) ; begin
39039: LD_INT 0
39041: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39042: LD_ADDR_VAR 0 2
39046: PUSH
39047: LD_INT 22
39049: PUSH
39050: LD_VAR 0 1
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 31
39061: PUSH
39062: LD_INT 25
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PPUSH
39073: CALL_OW 69
39077: ST_TO_ADDR
// end ;
39078: LD_VAR 0 2
39082: RET
// export function Shuffle ( array ) ; var i , index ; begin
39083: LD_INT 0
39085: PPUSH
39086: PPUSH
39087: PPUSH
// result := [ ] ;
39088: LD_ADDR_VAR 0 2
39092: PUSH
39093: EMPTY
39094: ST_TO_ADDR
// if not array then
39095: LD_VAR 0 1
39099: NOT
39100: IFFALSE 39104
// exit ;
39102: GO 39203
// Randomize ;
39104: CALL_OW 10
// for i = array downto 1 do
39108: LD_ADDR_VAR 0 3
39112: PUSH
39113: DOUBLE
39114: LD_VAR 0 1
39118: INC
39119: ST_TO_ADDR
39120: LD_INT 1
39122: PUSH
39123: FOR_DOWNTO
39124: IFFALSE 39201
// begin index := rand ( 1 , array ) ;
39126: LD_ADDR_VAR 0 4
39130: PUSH
39131: LD_INT 1
39133: PPUSH
39134: LD_VAR 0 1
39138: PPUSH
39139: CALL_OW 12
39143: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39144: LD_ADDR_VAR 0 2
39148: PUSH
39149: LD_VAR 0 2
39153: PPUSH
39154: LD_VAR 0 2
39158: PUSH
39159: LD_INT 1
39161: PLUS
39162: PPUSH
39163: LD_VAR 0 1
39167: PUSH
39168: LD_VAR 0 4
39172: ARRAY
39173: PPUSH
39174: CALL_OW 2
39178: ST_TO_ADDR
// array := Delete ( array , index ) ;
39179: LD_ADDR_VAR 0 1
39183: PUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: LD_VAR 0 4
39193: PPUSH
39194: CALL_OW 3
39198: ST_TO_ADDR
// end ;
39199: GO 39123
39201: POP
39202: POP
// end ;
39203: LD_VAR 0 2
39207: RET
// export function GetBaseMaterials ( base ) ; begin
39208: LD_INT 0
39210: PPUSH
// result := [ 0 , 0 , 0 ] ;
39211: LD_ADDR_VAR 0 2
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: ST_TO_ADDR
// if not base then
39230: LD_VAR 0 1
39234: NOT
39235: IFFALSE 39239
// exit ;
39237: GO 39288
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39239: LD_ADDR_VAR 0 2
39243: PUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: LD_INT 1
39251: PPUSH
39252: CALL_OW 275
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: LD_INT 2
39264: PPUSH
39265: CALL_OW 275
39269: PUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: LD_INT 3
39277: PPUSH
39278: CALL_OW 275
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: ST_TO_ADDR
// end ;
39288: LD_VAR 0 2
39292: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39293: LD_INT 0
39295: PPUSH
39296: PPUSH
// result := array ;
39297: LD_ADDR_VAR 0 3
39301: PUSH
39302: LD_VAR 0 1
39306: ST_TO_ADDR
// if size >= result then
39307: LD_VAR 0 2
39311: PUSH
39312: LD_VAR 0 3
39316: GREATEREQUAL
39317: IFFALSE 39321
// exit ;
39319: GO 39371
// if size then
39321: LD_VAR 0 2
39325: IFFALSE 39371
// for i := array downto size do
39327: LD_ADDR_VAR 0 4
39331: PUSH
39332: DOUBLE
39333: LD_VAR 0 1
39337: INC
39338: ST_TO_ADDR
39339: LD_VAR 0 2
39343: PUSH
39344: FOR_DOWNTO
39345: IFFALSE 39369
// result := Delete ( result , result ) ;
39347: LD_ADDR_VAR 0 3
39351: PUSH
39352: LD_VAR 0 3
39356: PPUSH
39357: LD_VAR 0 3
39361: PPUSH
39362: CALL_OW 3
39366: ST_TO_ADDR
39367: GO 39344
39369: POP
39370: POP
// end ;
39371: LD_VAR 0 3
39375: RET
// export function ComExit ( unit ) ; var tmp ; begin
39376: LD_INT 0
39378: PPUSH
39379: PPUSH
// if not IsInUnit ( unit ) then
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL_OW 310
39389: NOT
39390: IFFALSE 39394
// exit ;
39392: GO 39454
// tmp := IsInUnit ( unit ) ;
39394: LD_ADDR_VAR 0 3
39398: PUSH
39399: LD_VAR 0 1
39403: PPUSH
39404: CALL_OW 310
39408: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39409: LD_VAR 0 3
39413: PPUSH
39414: CALL_OW 247
39418: PUSH
39419: LD_INT 2
39421: EQUAL
39422: IFFALSE 39435
// ComExitVehicle ( unit ) else
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 121
39433: GO 39444
// ComExitBuilding ( unit ) ;
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 122
// result := tmp ;
39444: LD_ADDR_VAR 0 2
39448: PUSH
39449: LD_VAR 0 3
39453: ST_TO_ADDR
// end ;
39454: LD_VAR 0 2
39458: RET
// export function ComExitAll ( units ) ; var i ; begin
39459: LD_INT 0
39461: PPUSH
39462: PPUSH
// if not units then
39463: LD_VAR 0 1
39467: NOT
39468: IFFALSE 39472
// exit ;
39470: GO 39498
// for i in units do
39472: LD_ADDR_VAR 0 3
39476: PUSH
39477: LD_VAR 0 1
39481: PUSH
39482: FOR_IN
39483: IFFALSE 39496
// ComExit ( i ) ;
39485: LD_VAR 0 3
39489: PPUSH
39490: CALL 39376 0 1
39494: GO 39482
39496: POP
39497: POP
// end ;
39498: LD_VAR 0 2
39502: RET
// export function ResetHc ; begin
39503: LD_INT 0
39505: PPUSH
// InitHc ;
39506: CALL_OW 19
// hc_importance := 0 ;
39510: LD_ADDR_OWVAR 32
39514: PUSH
39515: LD_INT 0
39517: ST_TO_ADDR
// end ;
39518: LD_VAR 0 1
39522: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39523: LD_INT 0
39525: PPUSH
39526: PPUSH
39527: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39528: LD_ADDR_VAR 0 6
39532: PUSH
39533: LD_VAR 0 1
39537: PUSH
39538: LD_VAR 0 3
39542: PLUS
39543: PUSH
39544: LD_INT 2
39546: DIV
39547: ST_TO_ADDR
// if _x < 0 then
39548: LD_VAR 0 6
39552: PUSH
39553: LD_INT 0
39555: LESS
39556: IFFALSE 39573
// _x := _x * - 1 ;
39558: LD_ADDR_VAR 0 6
39562: PUSH
39563: LD_VAR 0 6
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: MUL
39572: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39573: LD_ADDR_VAR 0 7
39577: PUSH
39578: LD_VAR 0 2
39582: PUSH
39583: LD_VAR 0 4
39587: PLUS
39588: PUSH
39589: LD_INT 2
39591: DIV
39592: ST_TO_ADDR
// if _y < 0 then
39593: LD_VAR 0 7
39597: PUSH
39598: LD_INT 0
39600: LESS
39601: IFFALSE 39618
// _y := _y * - 1 ;
39603: LD_ADDR_VAR 0 7
39607: PUSH
39608: LD_VAR 0 7
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: MUL
39617: ST_TO_ADDR
// result := [ _x , _y ] ;
39618: LD_ADDR_VAR 0 5
39622: PUSH
39623: LD_VAR 0 6
39627: PUSH
39628: LD_VAR 0 7
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: ST_TO_ADDR
// end ;
39637: LD_VAR 0 5
39641: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39642: LD_INT 0
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
// task := GetTaskList ( unit ) ;
39648: LD_ADDR_VAR 0 7
39652: PUSH
39653: LD_VAR 0 1
39657: PPUSH
39658: CALL_OW 437
39662: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39663: LD_VAR 0 7
39667: NOT
39668: PUSH
39669: LD_VAR 0 1
39673: PPUSH
39674: LD_VAR 0 2
39678: PPUSH
39679: CALL_OW 308
39683: NOT
39684: AND
39685: IFFALSE 39689
// exit ;
39687: GO 39807
// if IsInArea ( unit , area ) then
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_VAR 0 2
39698: PPUSH
39699: CALL_OW 308
39703: IFFALSE 39721
// begin ComMoveToArea ( unit , goAway ) ;
39705: LD_VAR 0 1
39709: PPUSH
39710: LD_VAR 0 3
39714: PPUSH
39715: CALL_OW 113
// exit ;
39719: GO 39807
// end ; if task [ 1 ] [ 1 ] <> M then
39721: LD_VAR 0 7
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: PUSH
39730: LD_INT 1
39732: ARRAY
39733: PUSH
39734: LD_STRING M
39736: NONEQUAL
39737: IFFALSE 39741
// exit ;
39739: GO 39807
// x := task [ 1 ] [ 2 ] ;
39741: LD_ADDR_VAR 0 5
39745: PUSH
39746: LD_VAR 0 7
39750: PUSH
39751: LD_INT 1
39753: ARRAY
39754: PUSH
39755: LD_INT 2
39757: ARRAY
39758: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39759: LD_ADDR_VAR 0 6
39763: PUSH
39764: LD_VAR 0 7
39768: PUSH
39769: LD_INT 1
39771: ARRAY
39772: PUSH
39773: LD_INT 3
39775: ARRAY
39776: ST_TO_ADDR
// if InArea ( x , y , area ) then
39777: LD_VAR 0 5
39781: PPUSH
39782: LD_VAR 0 6
39786: PPUSH
39787: LD_VAR 0 2
39791: PPUSH
39792: CALL_OW 309
39796: IFFALSE 39807
// ComStop ( unit ) ;
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL_OW 141
// end ;
39807: LD_VAR 0 4
39811: RET
// export function Abs ( value ) ; begin
39812: LD_INT 0
39814: PPUSH
// result := value ;
39815: LD_ADDR_VAR 0 2
39819: PUSH
39820: LD_VAR 0 1
39824: ST_TO_ADDR
// if value < 0 then
39825: LD_VAR 0 1
39829: PUSH
39830: LD_INT 0
39832: LESS
39833: IFFALSE 39850
// result := value * - 1 ;
39835: LD_ADDR_VAR 0 2
39839: PUSH
39840: LD_VAR 0 1
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: MUL
39849: ST_TO_ADDR
// end ;
39850: LD_VAR 0 2
39854: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39855: LD_INT 0
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
// if not unit or not building then
39865: LD_VAR 0 1
39869: NOT
39870: PUSH
39871: LD_VAR 0 2
39875: NOT
39876: OR
39877: IFFALSE 39881
// exit ;
39879: GO 40107
// x := GetX ( building ) ;
39881: LD_ADDR_VAR 0 4
39885: PUSH
39886: LD_VAR 0 2
39890: PPUSH
39891: CALL_OW 250
39895: ST_TO_ADDR
// y := GetY ( building ) ;
39896: LD_ADDR_VAR 0 6
39900: PUSH
39901: LD_VAR 0 2
39905: PPUSH
39906: CALL_OW 251
39910: ST_TO_ADDR
// d := GetDir ( building ) ;
39911: LD_ADDR_VAR 0 8
39915: PUSH
39916: LD_VAR 0 2
39920: PPUSH
39921: CALL_OW 254
39925: ST_TO_ADDR
// r := 4 ;
39926: LD_ADDR_VAR 0 9
39930: PUSH
39931: LD_INT 4
39933: ST_TO_ADDR
// for i := 1 to 5 do
39934: LD_ADDR_VAR 0 10
39938: PUSH
39939: DOUBLE
39940: LD_INT 1
39942: DEC
39943: ST_TO_ADDR
39944: LD_INT 5
39946: PUSH
39947: FOR_TO
39948: IFFALSE 40105
// begin _x := ShiftX ( x , d , r + i ) ;
39950: LD_ADDR_VAR 0 5
39954: PUSH
39955: LD_VAR 0 4
39959: PPUSH
39960: LD_VAR 0 8
39964: PPUSH
39965: LD_VAR 0 9
39969: PUSH
39970: LD_VAR 0 10
39974: PLUS
39975: PPUSH
39976: CALL_OW 272
39980: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39981: LD_ADDR_VAR 0 7
39985: PUSH
39986: LD_VAR 0 6
39990: PPUSH
39991: LD_VAR 0 8
39995: PPUSH
39996: LD_VAR 0 9
40000: PUSH
40001: LD_VAR 0 10
40005: PLUS
40006: PPUSH
40007: CALL_OW 273
40011: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40012: LD_VAR 0 5
40016: PPUSH
40017: LD_VAR 0 7
40021: PPUSH
40022: CALL_OW 488
40026: PUSH
40027: LD_VAR 0 5
40031: PPUSH
40032: LD_VAR 0 7
40036: PPUSH
40037: CALL_OW 428
40041: PPUSH
40042: CALL_OW 247
40046: PUSH
40047: LD_INT 3
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: IN
40057: NOT
40058: AND
40059: IFFALSE 40103
// begin ComMoveXY ( unit , _x , _y ) ;
40061: LD_VAR 0 1
40065: PPUSH
40066: LD_VAR 0 5
40070: PPUSH
40071: LD_VAR 0 7
40075: PPUSH
40076: CALL_OW 111
// result := [ _x , _y ] ;
40080: LD_ADDR_VAR 0 3
40084: PUSH
40085: LD_VAR 0 5
40089: PUSH
40090: LD_VAR 0 7
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: ST_TO_ADDR
// exit ;
40099: POP
40100: POP
40101: GO 40107
// end ; end ;
40103: GO 39947
40105: POP
40106: POP
// end ;
40107: LD_VAR 0 3
40111: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40112: LD_INT 0
40114: PPUSH
40115: PPUSH
40116: PPUSH
// result := 0 ;
40117: LD_ADDR_VAR 0 3
40121: PUSH
40122: LD_INT 0
40124: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40125: LD_VAR 0 1
40129: PUSH
40130: LD_INT 0
40132: LESS
40133: PUSH
40134: LD_VAR 0 1
40138: PUSH
40139: LD_INT 8
40141: GREATER
40142: OR
40143: PUSH
40144: LD_VAR 0 2
40148: PUSH
40149: LD_INT 0
40151: LESS
40152: OR
40153: PUSH
40154: LD_VAR 0 2
40158: PUSH
40159: LD_INT 8
40161: GREATER
40162: OR
40163: IFFALSE 40167
// exit ;
40165: GO 40242
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40167: LD_ADDR_VAR 0 4
40171: PUSH
40172: LD_INT 22
40174: PUSH
40175: LD_VAR 0 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PPUSH
40184: CALL_OW 69
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40240
// begin un := UnitShoot ( i ) ;
40192: LD_ADDR_VAR 0 5
40196: PUSH
40197: LD_VAR 0 4
40201: PPUSH
40202: CALL_OW 504
40206: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40207: LD_VAR 0 5
40211: PPUSH
40212: CALL_OW 255
40216: PUSH
40217: LD_VAR 0 1
40221: EQUAL
40222: IFFALSE 40238
// begin result := un ;
40224: LD_ADDR_VAR 0 3
40228: PUSH
40229: LD_VAR 0 5
40233: ST_TO_ADDR
// exit ;
40234: POP
40235: POP
40236: GO 40242
// end ; end ;
40238: GO 40189
40240: POP
40241: POP
// end ;
40242: LD_VAR 0 3
40246: RET
// export function GetCargoBay ( units ) ; begin
40247: LD_INT 0
40249: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40250: LD_ADDR_VAR 0 2
40254: PUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 34
40265: PUSH
40266: LD_INT 12
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 34
40275: PUSH
40276: LD_INT 51
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 34
40285: PUSH
40286: LD_INT 32
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 34
40295: PUSH
40296: LD_INT 89
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: PPUSH
40310: CALL_OW 72
40314: ST_TO_ADDR
// end ;
40315: LD_VAR 0 2
40319: RET
// export function Negate ( value ) ; begin
40320: LD_INT 0
40322: PPUSH
// result := not value ;
40323: LD_ADDR_VAR 0 2
40327: PUSH
40328: LD_VAR 0 1
40332: NOT
40333: ST_TO_ADDR
// end ;
40334: LD_VAR 0 2
40338: RET
// export function Inc ( value ) ; begin
40339: LD_INT 0
40341: PPUSH
// result := value + 1 ;
40342: LD_ADDR_VAR 0 2
40346: PUSH
40347: LD_VAR 0 1
40351: PUSH
40352: LD_INT 1
40354: PLUS
40355: ST_TO_ADDR
// end ;
40356: LD_VAR 0 2
40360: RET
// export function Dec ( value ) ; begin
40361: LD_INT 0
40363: PPUSH
// result := value - 1 ;
40364: LD_ADDR_VAR 0 2
40368: PUSH
40369: LD_VAR 0 1
40373: PUSH
40374: LD_INT 1
40376: MINUS
40377: ST_TO_ADDR
// end ;
40378: LD_VAR 0 2
40382: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40383: LD_INT 0
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
40392: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40393: LD_VAR 0 1
40397: PPUSH
40398: LD_VAR 0 2
40402: PPUSH
40403: CALL_OW 488
40407: NOT
40408: PUSH
40409: LD_VAR 0 3
40413: PPUSH
40414: LD_VAR 0 4
40418: PPUSH
40419: CALL_OW 488
40423: NOT
40424: OR
40425: IFFALSE 40438
// begin result := - 1 ;
40427: LD_ADDR_VAR 0 5
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: ST_TO_ADDR
// exit ;
40436: GO 40673
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40438: LD_ADDR_VAR 0 12
40442: PUSH
40443: LD_VAR 0 1
40447: PPUSH
40448: LD_VAR 0 2
40452: PPUSH
40453: LD_VAR 0 3
40457: PPUSH
40458: LD_VAR 0 4
40462: PPUSH
40463: CALL 39523 0 4
40467: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40468: LD_ADDR_VAR 0 11
40472: PUSH
40473: LD_VAR 0 1
40477: PPUSH
40478: LD_VAR 0 2
40482: PPUSH
40483: LD_VAR 0 12
40487: PUSH
40488: LD_INT 1
40490: ARRAY
40491: PPUSH
40492: LD_VAR 0 12
40496: PUSH
40497: LD_INT 2
40499: ARRAY
40500: PPUSH
40501: CALL_OW 298
40505: ST_TO_ADDR
// distance := 9999 ;
40506: LD_ADDR_VAR 0 10
40510: PUSH
40511: LD_INT 9999
40513: ST_TO_ADDR
// for i := 0 to 5 do
40514: LD_ADDR_VAR 0 6
40518: PUSH
40519: DOUBLE
40520: LD_INT 0
40522: DEC
40523: ST_TO_ADDR
40524: LD_INT 5
40526: PUSH
40527: FOR_TO
40528: IFFALSE 40671
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40530: LD_ADDR_VAR 0 7
40534: PUSH
40535: LD_VAR 0 1
40539: PPUSH
40540: LD_VAR 0 6
40544: PPUSH
40545: LD_VAR 0 11
40549: PPUSH
40550: CALL_OW 272
40554: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40555: LD_ADDR_VAR 0 8
40559: PUSH
40560: LD_VAR 0 2
40564: PPUSH
40565: LD_VAR 0 6
40569: PPUSH
40570: LD_VAR 0 11
40574: PPUSH
40575: CALL_OW 273
40579: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40580: LD_VAR 0 7
40584: PPUSH
40585: LD_VAR 0 8
40589: PPUSH
40590: CALL_OW 488
40594: NOT
40595: IFFALSE 40599
// continue ;
40597: GO 40527
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40599: LD_ADDR_VAR 0 9
40603: PUSH
40604: LD_VAR 0 12
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: PPUSH
40613: LD_VAR 0 12
40617: PUSH
40618: LD_INT 2
40620: ARRAY
40621: PPUSH
40622: LD_VAR 0 7
40626: PPUSH
40627: LD_VAR 0 8
40631: PPUSH
40632: CALL_OW 298
40636: ST_TO_ADDR
// if tmp < distance then
40637: LD_VAR 0 9
40641: PUSH
40642: LD_VAR 0 10
40646: LESS
40647: IFFALSE 40669
// begin result := i ;
40649: LD_ADDR_VAR 0 5
40653: PUSH
40654: LD_VAR 0 6
40658: ST_TO_ADDR
// distance := tmp ;
40659: LD_ADDR_VAR 0 10
40663: PUSH
40664: LD_VAR 0 9
40668: ST_TO_ADDR
// end ; end ;
40669: GO 40527
40671: POP
40672: POP
// end ;
40673: LD_VAR 0 5
40677: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40678: LD_INT 0
40680: PPUSH
40681: PPUSH
// if not driver or not IsInUnit ( driver ) then
40682: LD_VAR 0 1
40686: NOT
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 310
40697: NOT
40698: OR
40699: IFFALSE 40703
// exit ;
40701: GO 40793
// vehicle := IsInUnit ( driver ) ;
40703: LD_ADDR_VAR 0 3
40707: PUSH
40708: LD_VAR 0 1
40712: PPUSH
40713: CALL_OW 310
40717: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40718: LD_VAR 0 1
40722: PPUSH
40723: LD_STRING \
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: PUSH
40753: LD_STRING E
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_VAR 0 3
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PPUSH
40789: CALL_OW 446
// end ;
40793: LD_VAR 0 2
40797: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40798: LD_INT 0
40800: PPUSH
40801: PPUSH
// if not driver or not IsInUnit ( driver ) then
40802: LD_VAR 0 1
40806: NOT
40807: PUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: CALL_OW 310
40817: NOT
40818: OR
40819: IFFALSE 40823
// exit ;
40821: GO 40913
// vehicle := IsInUnit ( driver ) ;
40823: LD_ADDR_VAR 0 3
40827: PUSH
40828: LD_VAR 0 1
40832: PPUSH
40833: CALL_OW 310
40837: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40838: LD_VAR 0 1
40842: PPUSH
40843: LD_STRING \
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: PUSH
40873: LD_STRING E
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_VAR 0 3
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PPUSH
40909: CALL_OW 447
// end ;
40913: LD_VAR 0 2
40917: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
40922: PPUSH
// tmp := [ ] ;
40923: LD_ADDR_VAR 0 5
40927: PUSH
40928: EMPTY
40929: ST_TO_ADDR
// for i in units do
40930: LD_ADDR_VAR 0 4
40934: PUSH
40935: LD_VAR 0 1
40939: PUSH
40940: FOR_IN
40941: IFFALSE 40979
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40943: LD_ADDR_VAR 0 5
40947: PUSH
40948: LD_VAR 0 5
40952: PPUSH
40953: LD_VAR 0 5
40957: PUSH
40958: LD_INT 1
40960: PLUS
40961: PPUSH
40962: LD_VAR 0 4
40966: PPUSH
40967: CALL_OW 256
40971: PPUSH
40972: CALL_OW 2
40976: ST_TO_ADDR
40977: GO 40940
40979: POP
40980: POP
// if not tmp then
40981: LD_VAR 0 5
40985: NOT
40986: IFFALSE 40990
// exit ;
40988: GO 41038
// if asc then
40990: LD_VAR 0 2
40994: IFFALSE 41018
// result := SortListByListAsc ( units , tmp ) else
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: LD_VAR 0 5
41010: PPUSH
41011: CALL_OW 76
41015: ST_TO_ADDR
41016: GO 41038
// result := SortListByListDesc ( units , tmp ) ;
41018: LD_ADDR_VAR 0 3
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: LD_VAR 0 5
41032: PPUSH
41033: CALL_OW 77
41037: ST_TO_ADDR
// end ;
41038: LD_VAR 0 3
41042: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41043: LD_INT 0
41045: PPUSH
41046: PPUSH
// task := GetTaskList ( mech ) ;
41047: LD_ADDR_VAR 0 4
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 437
41061: ST_TO_ADDR
// if not task then
41062: LD_VAR 0 4
41066: NOT
41067: IFFALSE 41071
// exit ;
41069: GO 41113
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41071: LD_ADDR_VAR 0 3
41075: PUSH
41076: LD_VAR 0 4
41080: PUSH
41081: LD_INT 1
41083: ARRAY
41084: PUSH
41085: LD_INT 1
41087: ARRAY
41088: PUSH
41089: LD_STRING r
41091: EQUAL
41092: PUSH
41093: LD_VAR 0 4
41097: PUSH
41098: LD_INT 1
41100: ARRAY
41101: PUSH
41102: LD_INT 4
41104: ARRAY
41105: PUSH
41106: LD_VAR 0 2
41110: EQUAL
41111: AND
41112: ST_TO_ADDR
// end ;
41113: LD_VAR 0 3
41117: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41118: LD_INT 0
41120: PPUSH
// SetDir ( unit , d ) ;
41121: LD_VAR 0 1
41125: PPUSH
41126: LD_VAR 0 4
41130: PPUSH
41131: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41135: LD_VAR 0 1
41139: PPUSH
41140: LD_VAR 0 2
41144: PPUSH
41145: LD_VAR 0 3
41149: PPUSH
41150: LD_VAR 0 5
41154: PPUSH
41155: CALL_OW 48
// end ;
41159: LD_VAR 0 6
41163: RET
// export function ToNaturalNumber ( number ) ; begin
41164: LD_INT 0
41166: PPUSH
// result := number div 1 ;
41167: LD_ADDR_VAR 0 2
41171: PUSH
41172: LD_VAR 0 1
41176: PUSH
41177: LD_INT 1
41179: DIV
41180: ST_TO_ADDR
// if number < 0 then
41181: LD_VAR 0 1
41185: PUSH
41186: LD_INT 0
41188: LESS
41189: IFFALSE 41199
// result := 0 ;
41191: LD_ADDR_VAR 0 2
41195: PUSH
41196: LD_INT 0
41198: ST_TO_ADDR
// end ;
41199: LD_VAR 0 2
41203: RET
// export function SortByClass ( units , class ) ; var un ; begin
41204: LD_INT 0
41206: PPUSH
41207: PPUSH
// if not units or not class then
41208: LD_VAR 0 1
41212: NOT
41213: PUSH
41214: LD_VAR 0 2
41218: NOT
41219: OR
41220: IFFALSE 41224
// exit ;
41222: GO 41319
// result := [ ] ;
41224: LD_ADDR_VAR 0 3
41228: PUSH
41229: EMPTY
41230: ST_TO_ADDR
// for un in units do
41231: LD_ADDR_VAR 0 4
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: FOR_IN
41242: IFFALSE 41317
// if GetClass ( un ) = class then
41244: LD_VAR 0 4
41248: PPUSH
41249: CALL_OW 257
41253: PUSH
41254: LD_VAR 0 2
41258: EQUAL
41259: IFFALSE 41286
// result := Insert ( result , 1 , un ) else
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 3
41270: PPUSH
41271: LD_INT 1
41273: PPUSH
41274: LD_VAR 0 4
41278: PPUSH
41279: CALL_OW 2
41283: ST_TO_ADDR
41284: GO 41315
// result := Replace ( result , result + 1 , un ) ;
41286: LD_ADDR_VAR 0 3
41290: PUSH
41291: LD_VAR 0 3
41295: PPUSH
41296: LD_VAR 0 3
41300: PUSH
41301: LD_INT 1
41303: PLUS
41304: PPUSH
41305: LD_VAR 0 4
41309: PPUSH
41310: CALL_OW 1
41314: ST_TO_ADDR
41315: GO 41241
41317: POP
41318: POP
// end ;
41319: LD_VAR 0 3
41323: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41324: LD_INT 0
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
// result := [ ] ;
41333: LD_ADDR_VAR 0 4
41337: PUSH
41338: EMPTY
41339: ST_TO_ADDR
// if x - r < 0 then
41340: LD_VAR 0 1
41344: PUSH
41345: LD_VAR 0 3
41349: MINUS
41350: PUSH
41351: LD_INT 0
41353: LESS
41354: IFFALSE 41366
// min_x := 0 else
41356: LD_ADDR_VAR 0 8
41360: PUSH
41361: LD_INT 0
41363: ST_TO_ADDR
41364: GO 41382
// min_x := x - r ;
41366: LD_ADDR_VAR 0 8
41370: PUSH
41371: LD_VAR 0 1
41375: PUSH
41376: LD_VAR 0 3
41380: MINUS
41381: ST_TO_ADDR
// if y - r < 0 then
41382: LD_VAR 0 2
41386: PUSH
41387: LD_VAR 0 3
41391: MINUS
41392: PUSH
41393: LD_INT 0
41395: LESS
41396: IFFALSE 41408
// min_y := 0 else
41398: LD_ADDR_VAR 0 7
41402: PUSH
41403: LD_INT 0
41405: ST_TO_ADDR
41406: GO 41424
// min_y := y - r ;
41408: LD_ADDR_VAR 0 7
41412: PUSH
41413: LD_VAR 0 2
41417: PUSH
41418: LD_VAR 0 3
41422: MINUS
41423: ST_TO_ADDR
// max_x := x + r ;
41424: LD_ADDR_VAR 0 9
41428: PUSH
41429: LD_VAR 0 1
41433: PUSH
41434: LD_VAR 0 3
41438: PLUS
41439: ST_TO_ADDR
// max_y := y + r ;
41440: LD_ADDR_VAR 0 10
41444: PUSH
41445: LD_VAR 0 2
41449: PUSH
41450: LD_VAR 0 3
41454: PLUS
41455: ST_TO_ADDR
// for _x = min_x to max_x do
41456: LD_ADDR_VAR 0 5
41460: PUSH
41461: DOUBLE
41462: LD_VAR 0 8
41466: DEC
41467: ST_TO_ADDR
41468: LD_VAR 0 9
41472: PUSH
41473: FOR_TO
41474: IFFALSE 41575
// for _y = min_y to max_y do
41476: LD_ADDR_VAR 0 6
41480: PUSH
41481: DOUBLE
41482: LD_VAR 0 7
41486: DEC
41487: ST_TO_ADDR
41488: LD_VAR 0 10
41492: PUSH
41493: FOR_TO
41494: IFFALSE 41571
// begin if not ValidHex ( _x , _y ) then
41496: LD_VAR 0 5
41500: PPUSH
41501: LD_VAR 0 6
41505: PPUSH
41506: CALL_OW 488
41510: NOT
41511: IFFALSE 41515
// continue ;
41513: GO 41493
// if GetResourceTypeXY ( _x , _y ) then
41515: LD_VAR 0 5
41519: PPUSH
41520: LD_VAR 0 6
41524: PPUSH
41525: CALL_OW 283
41529: IFFALSE 41569
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41531: LD_ADDR_VAR 0 4
41535: PUSH
41536: LD_VAR 0 4
41540: PPUSH
41541: LD_VAR 0 4
41545: PUSH
41546: LD_INT 1
41548: PLUS
41549: PPUSH
41550: LD_VAR 0 5
41554: PUSH
41555: LD_VAR 0 6
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PPUSH
41564: CALL_OW 1
41568: ST_TO_ADDR
// end ;
41569: GO 41493
41571: POP
41572: POP
41573: GO 41473
41575: POP
41576: POP
// end ;
41577: LD_VAR 0 4
41581: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
// if not units then
41592: LD_VAR 0 1
41596: NOT
41597: IFFALSE 41601
// exit ;
41599: GO 42125
// result := UnitFilter ( units , [ f_ok ] ) ;
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_VAR 0 1
41610: PPUSH
41611: LD_INT 50
41613: PUSH
41614: EMPTY
41615: LIST
41616: PPUSH
41617: CALL_OW 72
41621: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41622: LD_ADDR_VAR 0 8
41626: PUSH
41627: LD_VAR 0 1
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PPUSH
41636: CALL_OW 255
41640: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41641: LD_ADDR_VAR 0 10
41645: PUSH
41646: LD_INT 29
41648: PUSH
41649: LD_INT 91
41651: PUSH
41652: LD_INT 49
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// if not result then
41660: LD_VAR 0 3
41664: NOT
41665: IFFALSE 41669
// exit ;
41667: GO 42125
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41669: LD_ADDR_VAR 0 5
41673: PUSH
41674: LD_INT 81
41676: PUSH
41677: LD_VAR 0 8
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PPUSH
41686: CALL_OW 69
41690: ST_TO_ADDR
// for i in result do
41691: LD_ADDR_VAR 0 4
41695: PUSH
41696: LD_VAR 0 3
41700: PUSH
41701: FOR_IN
41702: IFFALSE 42123
// begin tag := GetTag ( i ) + 1 ;
41704: LD_ADDR_VAR 0 9
41708: PUSH
41709: LD_VAR 0 4
41713: PPUSH
41714: CALL_OW 110
41718: PUSH
41719: LD_INT 1
41721: PLUS
41722: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41723: LD_ADDR_VAR 0 7
41727: PUSH
41728: LD_VAR 0 4
41732: PPUSH
41733: CALL_OW 250
41737: PPUSH
41738: LD_VAR 0 4
41742: PPUSH
41743: CALL_OW 251
41747: PPUSH
41748: LD_INT 6
41750: PPUSH
41751: CALL 41324 0 3
41755: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41756: LD_VAR 0 4
41760: PPUSH
41761: CALL_OW 247
41765: PUSH
41766: LD_INT 2
41768: EQUAL
41769: PUSH
41770: LD_VAR 0 7
41774: AND
41775: PUSH
41776: LD_VAR 0 4
41780: PPUSH
41781: CALL_OW 264
41785: PUSH
41786: LD_VAR 0 10
41790: IN
41791: NOT
41792: AND
41793: IFFALSE 41832
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41795: LD_VAR 0 4
41799: PPUSH
41800: LD_VAR 0 7
41804: PUSH
41805: LD_INT 1
41807: ARRAY
41808: PUSH
41809: LD_INT 1
41811: ARRAY
41812: PPUSH
41813: LD_VAR 0 7
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PUSH
41822: LD_INT 2
41824: ARRAY
41825: PPUSH
41826: CALL_OW 116
41830: GO 42121
// if path > tag then
41832: LD_VAR 0 2
41836: PUSH
41837: LD_VAR 0 9
41841: GREATER
41842: IFFALSE 42050
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41844: LD_ADDR_VAR 0 6
41848: PUSH
41849: LD_VAR 0 5
41853: PPUSH
41854: LD_INT 91
41856: PUSH
41857: LD_VAR 0 4
41861: PUSH
41862: LD_INT 8
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: PPUSH
41870: CALL_OW 72
41874: ST_TO_ADDR
// if nearEnemy then
41875: LD_VAR 0 6
41879: IFFALSE 41948
// begin if GetWeapon ( i ) = ru_time_lapser then
41881: LD_VAR 0 4
41885: PPUSH
41886: CALL_OW 264
41890: PUSH
41891: LD_INT 49
41893: EQUAL
41894: IFFALSE 41922
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41896: LD_VAR 0 4
41900: PPUSH
41901: LD_VAR 0 6
41905: PPUSH
41906: LD_VAR 0 4
41910: PPUSH
41911: CALL_OW 74
41915: PPUSH
41916: CALL_OW 112
41920: GO 41946
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41922: LD_VAR 0 4
41926: PPUSH
41927: LD_VAR 0 6
41931: PPUSH
41932: LD_VAR 0 4
41936: PPUSH
41937: CALL_OW 74
41941: PPUSH
41942: CALL 43050 0 2
// end else
41946: GO 42048
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41948: LD_VAR 0 4
41952: PPUSH
41953: LD_VAR 0 2
41957: PUSH
41958: LD_VAR 0 9
41962: ARRAY
41963: PUSH
41964: LD_INT 1
41966: ARRAY
41967: PPUSH
41968: LD_VAR 0 2
41972: PUSH
41973: LD_VAR 0 9
41977: ARRAY
41978: PUSH
41979: LD_INT 2
41981: ARRAY
41982: PPUSH
41983: CALL_OW 297
41987: PUSH
41988: LD_INT 6
41990: GREATER
41991: IFFALSE 42034
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41993: LD_VAR 0 4
41997: PPUSH
41998: LD_VAR 0 2
42002: PUSH
42003: LD_VAR 0 9
42007: ARRAY
42008: PUSH
42009: LD_INT 1
42011: ARRAY
42012: PPUSH
42013: LD_VAR 0 2
42017: PUSH
42018: LD_VAR 0 9
42022: ARRAY
42023: PUSH
42024: LD_INT 2
42026: ARRAY
42027: PPUSH
42028: CALL_OW 114
42032: GO 42048
// SetTag ( i , tag ) ;
42034: LD_VAR 0 4
42038: PPUSH
42039: LD_VAR 0 9
42043: PPUSH
42044: CALL_OW 109
// end else
42048: GO 42121
// if enemy then
42050: LD_VAR 0 5
42054: IFFALSE 42121
// begin if GetWeapon ( i ) = ru_time_lapser then
42056: LD_VAR 0 4
42060: PPUSH
42061: CALL_OW 264
42065: PUSH
42066: LD_INT 49
42068: EQUAL
42069: IFFALSE 42097
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42071: LD_VAR 0 4
42075: PPUSH
42076: LD_VAR 0 5
42080: PPUSH
42081: LD_VAR 0 4
42085: PPUSH
42086: CALL_OW 74
42090: PPUSH
42091: CALL_OW 112
42095: GO 42121
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42097: LD_VAR 0 4
42101: PPUSH
42102: LD_VAR 0 5
42106: PPUSH
42107: LD_VAR 0 4
42111: PPUSH
42112: CALL_OW 74
42116: PPUSH
42117: CALL 43050 0 2
// end ; end ;
42121: GO 41701
42123: POP
42124: POP
// end ;
42125: LD_VAR 0 3
42129: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42130: LD_INT 0
42132: PPUSH
42133: PPUSH
42134: PPUSH
// if not unit or IsInUnit ( unit ) then
42135: LD_VAR 0 1
42139: NOT
42140: PUSH
42141: LD_VAR 0 1
42145: PPUSH
42146: CALL_OW 310
42150: OR
42151: IFFALSE 42155
// exit ;
42153: GO 42246
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42155: LD_ADDR_VAR 0 4
42159: PUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: CALL_OW 250
42169: PPUSH
42170: LD_VAR 0 2
42174: PPUSH
42175: LD_INT 1
42177: PPUSH
42178: CALL_OW 272
42182: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42183: LD_ADDR_VAR 0 5
42187: PUSH
42188: LD_VAR 0 1
42192: PPUSH
42193: CALL_OW 251
42197: PPUSH
42198: LD_VAR 0 2
42202: PPUSH
42203: LD_INT 1
42205: PPUSH
42206: CALL_OW 273
42210: ST_TO_ADDR
// if ValidHex ( x , y ) then
42211: LD_VAR 0 4
42215: PPUSH
42216: LD_VAR 0 5
42220: PPUSH
42221: CALL_OW 488
42225: IFFALSE 42246
// ComTurnXY ( unit , x , y ) ;
42227: LD_VAR 0 1
42231: PPUSH
42232: LD_VAR 0 4
42236: PPUSH
42237: LD_VAR 0 5
42241: PPUSH
42242: CALL_OW 118
// end ;
42246: LD_VAR 0 3
42250: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42251: LD_INT 0
42253: PPUSH
42254: PPUSH
// result := false ;
42255: LD_ADDR_VAR 0 3
42259: PUSH
42260: LD_INT 0
42262: ST_TO_ADDR
// if not units then
42263: LD_VAR 0 2
42267: NOT
42268: IFFALSE 42272
// exit ;
42270: GO 42317
// for i in units do
42272: LD_ADDR_VAR 0 4
42276: PUSH
42277: LD_VAR 0 2
42281: PUSH
42282: FOR_IN
42283: IFFALSE 42315
// if See ( side , i ) then
42285: LD_VAR 0 1
42289: PPUSH
42290: LD_VAR 0 4
42294: PPUSH
42295: CALL_OW 292
42299: IFFALSE 42313
// begin result := true ;
42301: LD_ADDR_VAR 0 3
42305: PUSH
42306: LD_INT 1
42308: ST_TO_ADDR
// exit ;
42309: POP
42310: POP
42311: GO 42317
// end ;
42313: GO 42282
42315: POP
42316: POP
// end ;
42317: LD_VAR 0 3
42321: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42322: LD_INT 0
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
// if not unit or not points then
42328: LD_VAR 0 1
42332: NOT
42333: PUSH
42334: LD_VAR 0 2
42338: NOT
42339: OR
42340: IFFALSE 42344
// exit ;
42342: GO 42434
// dist := 99999 ;
42344: LD_ADDR_VAR 0 5
42348: PUSH
42349: LD_INT 99999
42351: ST_TO_ADDR
// for i in points do
42352: LD_ADDR_VAR 0 4
42356: PUSH
42357: LD_VAR 0 2
42361: PUSH
42362: FOR_IN
42363: IFFALSE 42432
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42365: LD_ADDR_VAR 0 6
42369: PUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: LD_VAR 0 4
42379: PUSH
42380: LD_INT 1
42382: ARRAY
42383: PPUSH
42384: LD_VAR 0 4
42388: PUSH
42389: LD_INT 2
42391: ARRAY
42392: PPUSH
42393: CALL_OW 297
42397: ST_TO_ADDR
// if tmpDist < dist then
42398: LD_VAR 0 6
42402: PUSH
42403: LD_VAR 0 5
42407: LESS
42408: IFFALSE 42430
// begin result := i ;
42410: LD_ADDR_VAR 0 3
42414: PUSH
42415: LD_VAR 0 4
42419: ST_TO_ADDR
// dist := tmpDist ;
42420: LD_ADDR_VAR 0 5
42424: PUSH
42425: LD_VAR 0 6
42429: ST_TO_ADDR
// end ; end ;
42430: GO 42362
42432: POP
42433: POP
// end ;
42434: LD_VAR 0 3
42438: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42439: LD_INT 0
42441: PPUSH
// uc_side := side ;
42442: LD_ADDR_OWVAR 20
42446: PUSH
42447: LD_VAR 0 1
42451: ST_TO_ADDR
// uc_nation := 3 ;
42452: LD_ADDR_OWVAR 21
42456: PUSH
42457: LD_INT 3
42459: ST_TO_ADDR
// vc_chassis := 25 ;
42460: LD_ADDR_OWVAR 37
42464: PUSH
42465: LD_INT 25
42467: ST_TO_ADDR
// vc_engine := engine_siberite ;
42468: LD_ADDR_OWVAR 39
42472: PUSH
42473: LD_INT 3
42475: ST_TO_ADDR
// vc_control := control_computer ;
42476: LD_ADDR_OWVAR 38
42480: PUSH
42481: LD_INT 3
42483: ST_TO_ADDR
// vc_weapon := 59 ;
42484: LD_ADDR_OWVAR 40
42488: PUSH
42489: LD_INT 59
42491: ST_TO_ADDR
// result := CreateVehicle ;
42492: LD_ADDR_VAR 0 5
42496: PUSH
42497: CALL_OW 45
42501: ST_TO_ADDR
// SetDir ( result , d ) ;
42502: LD_VAR 0 5
42506: PPUSH
42507: LD_VAR 0 4
42511: PPUSH
42512: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42516: LD_VAR 0 5
42520: PPUSH
42521: LD_VAR 0 2
42525: PPUSH
42526: LD_VAR 0 3
42530: PPUSH
42531: LD_INT 0
42533: PPUSH
42534: CALL_OW 48
// end ;
42538: LD_VAR 0 5
42542: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42543: LD_INT 0
42545: PPUSH
42546: PPUSH
42547: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42548: LD_ADDR_VAR 0 2
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42571: LD_VAR 0 1
42575: NOT
42576: PUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 264
42586: PUSH
42587: LD_INT 12
42589: PUSH
42590: LD_INT 51
42592: PUSH
42593: LD_INT 32
42595: PUSH
42596: LD_INT 89
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: IN
42605: NOT
42606: OR
42607: IFFALSE 42611
// exit ;
42609: GO 42709
// for i := 1 to 3 do
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: DOUBLE
42617: LD_INT 1
42619: DEC
42620: ST_TO_ADDR
42621: LD_INT 3
42623: PUSH
42624: FOR_TO
42625: IFFALSE 42707
// begin tmp := GetCargo ( cargo , i ) ;
42627: LD_ADDR_VAR 0 4
42631: PUSH
42632: LD_VAR 0 1
42636: PPUSH
42637: LD_VAR 0 3
42641: PPUSH
42642: CALL_OW 289
42646: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42647: LD_ADDR_VAR 0 2
42651: PUSH
42652: LD_VAR 0 2
42656: PPUSH
42657: LD_VAR 0 3
42661: PPUSH
42662: LD_VAR 0 4
42666: PPUSH
42667: CALL_OW 1
42671: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42672: LD_ADDR_VAR 0 2
42676: PUSH
42677: LD_VAR 0 2
42681: PPUSH
42682: LD_INT 4
42684: PPUSH
42685: LD_VAR 0 2
42689: PUSH
42690: LD_INT 4
42692: ARRAY
42693: PUSH
42694: LD_VAR 0 4
42698: PLUS
42699: PPUSH
42700: CALL_OW 1
42704: ST_TO_ADDR
// end ;
42705: GO 42624
42707: POP
42708: POP
// end ;
42709: LD_VAR 0 2
42713: RET
// export function Length ( array ) ; begin
42714: LD_INT 0
42716: PPUSH
// result := array + 0 ;
42717: LD_ADDR_VAR 0 2
42721: PUSH
42722: LD_VAR 0 1
42726: PUSH
42727: LD_INT 0
42729: PLUS
42730: ST_TO_ADDR
// end ;
42731: LD_VAR 0 2
42735: RET
// export function PrepareArray ( array ) ; begin
42736: LD_INT 0
42738: PPUSH
// result := array diff 0 ;
42739: LD_ADDR_VAR 0 2
42743: PUSH
42744: LD_VAR 0 1
42748: PUSH
42749: LD_INT 0
42751: DIFF
42752: ST_TO_ADDR
// if not result [ 1 ] then
42753: LD_VAR 0 2
42757: PUSH
42758: LD_INT 1
42760: ARRAY
42761: NOT
42762: IFFALSE 42782
// result := Delete ( result , 1 ) ;
42764: LD_ADDR_VAR 0 2
42768: PUSH
42769: LD_VAR 0 2
42773: PPUSH
42774: LD_INT 1
42776: PPUSH
42777: CALL_OW 3
42781: ST_TO_ADDR
// end ;
42782: LD_VAR 0 2
42786: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42787: LD_INT 0
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
// sibRocketRange := 25 ;
42793: LD_ADDR_VAR 0 6
42797: PUSH
42798: LD_INT 25
42800: ST_TO_ADDR
// result := false ;
42801: LD_ADDR_VAR 0 4
42805: PUSH
42806: LD_INT 0
42808: ST_TO_ADDR
// for i := 0 to 5 do
42809: LD_ADDR_VAR 0 5
42813: PUSH
42814: DOUBLE
42815: LD_INT 0
42817: DEC
42818: ST_TO_ADDR
42819: LD_INT 5
42821: PUSH
42822: FOR_TO
42823: IFFALSE 42890
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42825: LD_VAR 0 1
42829: PPUSH
42830: LD_VAR 0 5
42834: PPUSH
42835: LD_VAR 0 6
42839: PPUSH
42840: CALL_OW 272
42844: PPUSH
42845: LD_VAR 0 2
42849: PPUSH
42850: LD_VAR 0 5
42854: PPUSH
42855: LD_VAR 0 6
42859: PPUSH
42860: CALL_OW 273
42864: PPUSH
42865: LD_VAR 0 3
42869: PPUSH
42870: CALL_OW 309
42874: IFFALSE 42888
// begin result := true ;
42876: LD_ADDR_VAR 0 4
42880: PUSH
42881: LD_INT 1
42883: ST_TO_ADDR
// exit ;
42884: POP
42885: POP
42886: GO 42892
// end ;
42888: GO 42822
42890: POP
42891: POP
// end ;
42892: LD_VAR 0 4
42896: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42897: LD_INT 0
42899: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42900: LD_VAR 0 1
42904: PPUSH
42905: LD_VAR 0 2
42909: PPUSH
42910: LD_INT 0
42912: PPUSH
42913: LD_INT 0
42915: PPUSH
42916: LD_INT 1
42918: PPUSH
42919: LD_INT 0
42921: PPUSH
42922: CALL_OW 587
// end ;
42926: LD_VAR 0 3
42930: RET
// export function CenterOnNow ( unit ) ; begin
42931: LD_INT 0
42933: PPUSH
// result := IsInUnit ( unit ) ;
42934: LD_ADDR_VAR 0 2
42938: PUSH
42939: LD_VAR 0 1
42943: PPUSH
42944: CALL_OW 310
42948: ST_TO_ADDR
// if not result then
42949: LD_VAR 0 2
42953: NOT
42954: IFFALSE 42966
// result := unit ;
42956: LD_ADDR_VAR 0 2
42960: PUSH
42961: LD_VAR 0 1
42965: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42966: LD_VAR 0 1
42970: PPUSH
42971: CALL_OW 87
// end ;
42975: LD_VAR 0 2
42979: RET
// export function ComMoveHex ( unit , hex ) ; begin
42980: LD_INT 0
42982: PPUSH
// if not hex then
42983: LD_VAR 0 2
42987: NOT
42988: IFFALSE 42992
// exit ;
42990: GO 43045
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42992: LD_VAR 0 2
42996: PUSH
42997: LD_INT 1
42999: ARRAY
43000: PPUSH
43001: LD_VAR 0 2
43005: PUSH
43006: LD_INT 2
43008: ARRAY
43009: PPUSH
43010: CALL_OW 428
43014: IFFALSE 43018
// exit ;
43016: GO 43045
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43018: LD_VAR 0 1
43022: PPUSH
43023: LD_VAR 0 2
43027: PUSH
43028: LD_INT 1
43030: ARRAY
43031: PPUSH
43032: LD_VAR 0 2
43036: PUSH
43037: LD_INT 2
43039: ARRAY
43040: PPUSH
43041: CALL_OW 111
// end ;
43045: LD_VAR 0 3
43049: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43050: LD_INT 0
43052: PPUSH
43053: PPUSH
43054: PPUSH
// if not unit or not enemy then
43055: LD_VAR 0 1
43059: NOT
43060: PUSH
43061: LD_VAR 0 2
43065: NOT
43066: OR
43067: IFFALSE 43071
// exit ;
43069: GO 43195
// x := GetX ( enemy ) ;
43071: LD_ADDR_VAR 0 4
43075: PUSH
43076: LD_VAR 0 2
43080: PPUSH
43081: CALL_OW 250
43085: ST_TO_ADDR
// y := GetY ( enemy ) ;
43086: LD_ADDR_VAR 0 5
43090: PUSH
43091: LD_VAR 0 2
43095: PPUSH
43096: CALL_OW 251
43100: ST_TO_ADDR
// if ValidHex ( x , y ) then
43101: LD_VAR 0 4
43105: PPUSH
43106: LD_VAR 0 5
43110: PPUSH
43111: CALL_OW 488
43115: IFFALSE 43195
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
43117: LD_VAR 0 2
43121: PPUSH
43122: CALL_OW 247
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: IN
43137: PUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 255
43147: PPUSH
43148: LD_VAR 0 2
43152: PPUSH
43153: CALL_OW 292
43157: AND
43158: IFFALSE 43176
// ComAttackUnit ( unit , enemy ) else
43160: LD_VAR 0 1
43164: PPUSH
43165: LD_VAR 0 2
43169: PPUSH
43170: CALL_OW 115
43174: GO 43195
// ComAgressiveMove ( unit , x , y ) ;
43176: LD_VAR 0 1
43180: PPUSH
43181: LD_VAR 0 4
43185: PPUSH
43186: LD_VAR 0 5
43190: PPUSH
43191: CALL_OW 114
// end ;
43195: LD_VAR 0 3
43199: RET
